C  Copyright (c) 2003-2010 University of Florida
C
C  This program is free software; you can redistribute it and/or modify
C  it under the terms of the GNU General Public License as published by
C  the Free Software Foundation; either version 2 of the License, or
C  (at your option) any later version.

C  This program is distributed in the hope that it will be useful,
C  but WITHOUT ANY WARRANTY; without even the implied warranty of
C  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
C  GNU General Public License for more details.

C  The GNU General Public License is included in this distribution
C  in the file COPYRIGHT.
      subroutine dropcore_fno(array_table, narray_table, 
     *                    index_table,
     *                    nindex_table, segment_table, nsegment_table,
     *                    block_map_table, nblock_map_table,
     *                    scalar_table, nscalar_table, 
     *                    address_table, op)
c--------------------------------------------------------------------------
c   Print the first and last sample of a block.
c--------------------------------------------------------------------------

      implicit none
      include 'interpreter.h'
      include 'mpif.h'
      include 'trace.h'
      include 'parallel_info.h'
#ifdef ALTIX
      include 'sheap.h'
#endif

      integer narray_table, nindex_table, nsegment_table, 
     *        nblock_map_table
      integer op(loptable_entry)
      integer array_table(larray_table_entry, narray_table)
      integer index_table(lindex_table_entry, nindex_table)
      integer segment_table(lsegment_table_entry, nsegment_table)
      integer block_map_table(lblock_map_entry, nblock_map_table)
      integer nscalar_table
       double precision scalar_table(nscalar_table)
      integer*8 address_table(narray_table)

      integer i, j, k
      integer array, index(mx_array_index), nindex, ierr
      integer block, blkndx, seg(mx_array_index)
      integer find_current_block
      integer*8 indblk, get_block_index
      integer*8 daddr, get_index_from_base
      integer type
      integer stack
      
      integer comm

      integer val1(mx_array_index), val2(mx_array_index)

      double precision x(1)
#ifdef ALTIX
      pointer (dptr, x)
#else
      common x
#endif

      integer n, nb, proc, map, company_comm
      integer na1,na2,ni1,ni2
      integer pst_get_company_comm, pst_get_company_rank
      company_comm    = pst_get_company_comm(me)
      proc  = pst_get_company_rank(me)

      if (dryrun) return
#ifdef ALTIX
      dptr = dshptr
#endif

c---------------------------------------------------------------------------
c   Find the indices of the array block.
c---------------------------------------------------------------------------
       
      array = op(c_result_array)
      type  = array_table(c_array_type,array)
      nb = array_table(c_numblks, array)
      map = array_table(c_block_map, array)

      nindex = array_table(c_nindex, array)
      n = 1
      do i = 1, nindex
         index(i) = array_table(c_index_array1+i-1,array)
         seg(i) = index_table(c_current_seg,index(i))

c-------------------------------------------------------------------------
c   Get segment ranges.
c-------------------------------------------------------------------------

         call get_index_segment(index(i), seg(i), segment_table,
     *                             nsegment_table, index_table,
     *                             nindex_table, val1(i), val2(i))
         n = n * (val2(i)-val1(i)+1)
      enddo

c---------------------------------------------------------------------------
c   Get array data address.
c---------------------------------------------------------------------------

      if (type .eq. static_array) then
         daddr = address_table(array)
         indblk = get_index_from_base(daddr, x, 2)
      else
         block = find_current_block(array, array_table(1,array),
     *                             index_table, nindex_table,
     *                             segment_table, nsegment_table,
     *                             block_map_table, blkndx)
         if (block .lt. 0) return 

C         if (type .eq. distributed_array .and.
C     *       block_map_table(c_processor,map+block-1).eq.proc) then
C            call dump_block_data(array,block)
C         else
C            call dump_block_data(array,block)
C         endif

         stack = array_table(c_array_stack, array)
         indblk = get_block_index(array, block, stack,
     *                            blkndx, x, .true.)
      endif

         if (type .eq. static_array) then
            na1 = array_table(c_index_range1,array)
            na2 = array_table(c_index_range2,array)
            ni1 = array_table(c_index_range1+1,array)
            ni2 = array_table(c_index_range2+1,array)
         else
            na1 = val1(1)
            na2 = val2(1)
            ni1 = val1(2)
            ni2 = val2(2)
         endif
      call dropcore(me, array, block,
     *                x(indblk), val1(1),val2(1),
     *                val1(2),val2(2), na1,na2,ni1,ni2)
     
      return
      end

      subroutine dropcore(me, array, block, x, 
     *                           a1,a2,i1,i2, na1, na2,ni1,ni2)
      implicit none
      include 'int_gen_parms.h'
      integer max_basis
      parameter (max_basis = 2000)

      integer me, array, block
      integer a1,a2,i1,i2
      integer na1,na2,ni1,ni2
      double precision x(na1:na2,ni1:ni2)
      integer a,i, k
      integer ndropmo_a
      integer modrop_a(max_basis)

      call igetrec(1, 'JOBARC', 'OCCUPYA0', 1, nalpha_occupied)
      CALL IGETREC(20,'JOBARC','NUMDROPA',1,NDROPMO_A)
      if (ndropmo_a .gt. 0) then
          CALL IGETREC(20,'JOBARC','MODROPA',NDROPMO_A,MODROP_A)
          do i = 1,ndropmo_a
              k = modrop_a(i)
              if(k .le. nalpha_occupied) then
                  do a = na1,na2
                      x(a,k) = 0.d0
                  enddo
              end if
          end do
      endif

      return
      end

