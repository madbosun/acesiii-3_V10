C  Copyright (c) 2003-2010 University of Florida
C
C  This program is free software; you can redistribute it and/or modify
C  it under the terms of the GNU General Public License as published by
C  the Free Software Foundation; either version 2 of the License, or
C  (at your option) any later version.

C  This program is distributed in the hope that it will be useful,
C  but WITHOUT ANY WARRANTY; without even the implied warranty of
C  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
C  GNU General Public License for more details.

C  The GNU General Public License is included in this distribution
C  in the file COPYRIGHT.
      subroutine check_stack_pop(array_table, narray_table, index_table,
     *                           nindex_table, block_map_table) 
c-------------------------------------------------------------------------
c The population of the stacks is checked. If pop is too great a wait is
c enforced so the subsequent operations can proceed.  
c-------------------------------------------------------------------------

      implicit none
      integer i, j, nblocks, blkndx   

      include 'interpreter.h' 
      include 'blkmgr.h' 
      include 'int_gen_parms.h'
      include 'mpif.h'
      include 'parallel_info.h'
      include 'server_monitor.h'
      include 'trace.h'
      include 'timerz.h' 

      integer array_table, narray_table, index_table, nindex_table 
      integer block_map_table(*) 

      integer array, block, type, request, instruction_timer,
     *        comm_timer, iblkndx, n_used, n_free, min_blocks  
      integer stack, ncount, min_block, max_siter 
      integer ierr
      integer status(MPI_STATUS_SIZE)
      logical flag

c     if (me .eq. 0) then 
c     write(6,*) 'Checking stack population ' 
c     write(6,*) 'Number of stacks:', nblkmgr_stacks  
c     endif 

      min_blocks = 6 
      max_siter = 5000001  

      nblocks = 0 
      do i = nblkmgr_stacks, nblkmgr_stacks-1, -1 
            stack = i 
            nblocks = nblocks + nblocks_stack(stack) 
            ncount = 0 
            min_block = min(min_blocks,nblocks_stack(stack))  
10          continue 
            ncount = ncount + 1 
            call find_free_stack(stack,iblkndx) 
            if (iblkndx .lt. 0) then 
               n_free = 0 
               n_used = nblocks_stack(stack) 
            else 
               n_free = iblkndx - stack_start(stack) + 1 
               n_used = nblocks_stack(stack) - n_free  
            endif 

            if (n_free .ge. min_block) go to 11  

            if (n_free .lt. min_block) then 
            call exec_thread_server(0) 

            call scrub_from_stack(stack, array_table,
     *           narray_table, index_table, nindex_table,
     *           block_map_table, ierr)

            call reclaim_persistent_block_from_stack(stack,
     *           array_table,narray_table, index_table, nindex_table,
     *           block_map_table, ierr)

            endif  

         if (ncount .lt. max_siter) go to 10 
         write(6,*) ' There are only',n_free,' free blocks on stack', 
     *                stack, 'on processor ', me 
11       continue 
c           write(6,*) ' nused nfree ', i, n_used, n_free, 
c    *                 ' ntot ', nblocks_stack(i), 
c    *                 ' start ', stack_start(i),    
c    *                 ' iblkndx', iblkndx , 
c    *                 ' after ', ncount, 'iterations'   
      enddo 

      return 
      end 
