#  Copyright (c) 2003-2010 University of Florida
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  The GNU General Public License is included in this distribution
#  in the file COPYRIGHT.
#
                           SIAL LCCSD_UHF
#                          --------------
#
#
# Status of served update: mimimize prepare/request 
# -------------------------------------------------
#
# AOLADDER --> DONE  
# T2NEW    --> DONE  
# WMINJ    --> DONE  
# WMEBJ    --> ALMOST DONE  
# BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
#
# Declare indeces 
# --------------- 
#
      index kiter    = 1, cc_iter   
      index jiter    = 1, cc_iter
      index   kptr1  = 1, 2
      index   kptr2  = 1, 2
      index   kone   = 1, 1
#
      aoindex mu     = 1, norb 
      aoindex nu     = 1, norb
      aoindex lambda = 1, norb
      aoindex sigma  = 1, norb
#
      moaindex i = baocc, eaocc
      moaindex i1= baocc, eaocc
      moaindex i2= baocc, eaocc
      moaindex i3= baocc, eaocc
#
      moaindex a = bavirt, eavirt
      moaindex a1= bavirt, eavirt
      moaindex a2= bavirt, eavirt
      moaindex a3= bavirt, eavirt
#
      mobindex j = bbocc, ebocc
      mobindex j1= bbocc, ebocc
      mobindex j2= bbocc, ebocc
      mobindex j3= bbocc, ebocc
#
      mobindex b = bbvirt, ebvirt
      mobindex b1= bbvirt, ebvirt
      mobindex b2= bbvirt, ebvirt
      mobindex b3= bbvirt, ebvirt
#
      moaindex p = baocc, eavirt
      moaindex p1= baocc, eavirt
      moaindex p2= baocc, eavirt
      moaindex p3= baocc, eavirt
#
      mobindex q = bbocc, ebvirt
      mobindex q1= bbocc, ebvirt
      mobindex q2= bbocc, ebvirt
      mobindex q3= bbocc, ebvirt
# 
# Declare static arrays 
# --------------------- 
#
      distributed t1a_old(a,i) 
      distributed t1a_new(a,i) 
      distributed t1b_old(b,j) 
      distributed t1b_new(b,j) 
#
      distributed Fae_a(a,a1) 
      distributed Fae_b(b,b1) 
      distributed Fme_a(i,a) 
      distributed Fme_b(j,b) 
      distributed Fmi_a(i,i1) 
      distributed Fmi_b(j,j1) 

      distributed Fae_a_ab(a,a1) 
      distributed Fae_b_ab(b,b1) 
      distributed Fme_a_ia(i,a) 
      distributed Fme_b_ia(j,b) 
      distributed Fmi_a_ij(i,i1) 
      distributed Fmi_b_ij(j,j1) 
#
#
# Arrays used in transformation for AO2 algorithm
# -----------------------------------------------
#
      temp Txixi(mu,i1,lambda,i)
      temp Txxii(mu,nu,i1,i)
      temp Tixxi(i1,nu,lambda,i)
      temp Txipi(mu,i,p,i1)
      temp Tpipi(p1,i,p,i1)
      temp T1pipi(p1,i,p,i1)
      temp Tixai(i,mu,a,i1)
      temp Txaii(mu,a,i,i1)
      temp Tiaai(i,a1,a,i1)
      temp Taaii(a,a1,i,i1)
      temp Txaai(mu,a1,a,i)
      temp Taaai(a2,a,a1,i)
      temp Txxai(mu,nu,a,i)
      temp T1xxii(mu,nu,i1,i)
      temp T1ixxi(i1,nu,lambda,i)
      temp T1xipi(mu,i,p,i1)
      temp T1ixai(i,mu,a,i1)
      temp T1xaii(mu,a,i,i1)
      temp T1aaii(a,a1,i,i1)
      temp T1xaai(mu,a1,a,i)
      temp T1xxai(mu,nu,a,i)

      served VSpipi(p1,i,p,i1)
      served Viaai(i,a1,a,i1) 
      served Vaaii(a,a1,i,i1)
      served VSaaai(a2,a,a1,i)
#
      temp Txjxj(mu,j1,lambda,j)
      temp Txxjj(mu,nu,j1,j)
      temp Tjjxx(j1,nu,lambda,j)
      temp Tjxxj(j1,nu,lambda,j)
      temp Txjqj(mu,j,q,j1)
      temp Tqjqj(q1,j,q,j1)
      temp T1qjqj(q1,j,q,j1)
      temp Tjxbj(j,mu,b,j1)
      temp Txbjj(mu,b,j,j1)
      temp Tjbbj(j,b1,b,j1)
      temp Tbbjj(b,b1,j,j1)
      temp Txbbj(mu,b1,b,j)
      temp Tbbbj(b2,b,b1,j)
      temp Txxbj(mu,nu,b,j)
#
      served Vxxxi(mu,nu,lambda,i)
      served Vxixi(mu,i1,lambda,i)
      served Vxxii(mu,nu,i1,i)
      served Vixxi(i1,nu,lambda,i)
      served Vxipi(mu,i,p,i1)
      served Vixai(i,mu,a,i1)
      served Vxaii(mu,a,i,i1)
      served Vxxai(mu,nu,a,i)

      served Vxxxj(mu,nu,lambda,j)
      served Vxxjj(mu,nu,j1,j)
      served Vjxxj(j1,nu,lambda,j)
      served Vxjqj(mu,j,q,j1)
      served VSqjqj(q1,j,q,j1)
      served Vjxbj(j,mu,b,j1)
      served Vxbjj(mu,b,j,j1)
      served Vjbbj(j,b1,b,j1)
      served Vbbjj(b,b1,j,j1)
      served Vxbbj(mu,b1,b,j)
      served Vxxbj(mu,nu,b,j)
      served VSbbbj(b2,b,b1,j)
#
      served Vxbii(mu,b,i,i1)
      served Vbbii(b,b1,i,i1)
      served Vjbii(j,b,i,i1)
      served Vxbai(mu,b,a,i)
      served Vbbai(b,b1,a,i)
      served Vxjxj(mu,j1,nu,j)
      served Vxaai(mu,a1,a,i)
#
      served Vxixj(mu,i,nu,j)
      served Vxiqj(mu,i,q,j)
      served Vpiqj(p,i,q,j)
      served Vxajj(mu,a,j,j1)
      served Vaajj(a,a1,j,j1)
      served Vxabj(mu,a,b,j)
      served Vxxij(mu,nu,i,j)
      served Vixxj(i,mu,nu,j)
      served Vixbj(i,mu,b,j)
      served Viabj(i,a,b,j)
      served Vaabj(a,a1,b,j)
#
      temp Txixj(mu,i,nu,j)
      temp Txiqj(mu,i,q,j)
      temp Tpiqj(p,i,q,j)
      temp Tiixb(i,i1,mu,b)
      temp Txabj(mu,a,b,j)
      temp Tixxj(i,mu,nu,j)
      temp Tixbj(i,mu,b,j)
      temp Tiabj(i,a,b,j)
      temp Taabj(a,a1,b,j)
#
      temp Txbii(mu,b,i,i1)
      temp Tbbii(b,b1,i,i1)
      temp Tjbii(j,b,i,i1)
      temp Txbai(mu,b,a,i)
      temp Tbbai(b,b1,a,i)
#
# --------------------------------------------------- 
#
# Declare temporary arrays 
# ------------------------ 
#
#      temp Txxxi(mu,nu,lambda,i)
#      temp Txxxj(mu,nu,lambda,j)


      temp T1xjxj(mu,j1,lambda,j)
      temp T1xxjj(mu,nu,j1,j)
      temp T1jxxj(j1,nu,lambda,j)
      temp T1xjqj(mu,j,q,j1)
      temp T1jxbj(j,mu,b,j1)
      temp T1xbjj(mu,b,j,j1)
      temp T1bbjj(b,b1,j,j1)
      temp T1xbbj(mu,b1,b,j)
      temp T1xxbj(mu,nu,b,j)
      temp T1xxij(mu,nu,i,j)
      temp T1xixj(mu,i,nu,j)
      temp T1ixxj(i,mu,nu,j)
      temp T1xbii(mu,b,i,i1)
      temp T1xbai(mu,b,a,i)
      temp Txajj(mu,a,j,j1) 
      temp T1xajj(mu,a,j,j1)
      temp T1xabj(mu,a,b,j)
      temp T1xiqj(mu,i,q,j)
      temp T1ixbj(i,mu,b,j)
      temp T1bbii(b1,b,i,i1)
      temp T1jbii(j,b,i,i1)
      temp T1bbai(b1,b,a,i)
      temp T1piqj(p,i,q,j)
      temp Taajj(a1,a,j,j1)
      temp T1aajj(a1,a,j,j1)
      temp  T1aabj(a1,a,b,j)

      temp T1xixi(mu,i,nu,i1)
      temp Txiix(mu,i,i1,nu)
      temp Txjjx(mu,j,j1,nu)
      temp Txijx(mu,i,j,nu)
      temp Txpii(mu,p,i,i1)
      temp Txqii(mu,q,i,i1)
      temp Tppii(p,p1,i,i1)
      temp Tqqii(q,q1,i,i1)
      temp Txpjj(mu,p,j,j1)
      temp Txqjj(mu,q,j,j1)
      temp Tppjj(p,p1,j,j1)
      temp Tqqjj(q,q1,j,j1)
      temp Tixpi(i,mu,p,i1)
      temp Tippi(i,p,p1,i1)
      temp Tjxqj(j,mu,q,j1)
      temp Tjqqj(j,q,q1,j1)
      temp Tixqj(i,mu,q,j)
      temp Tipqj(i,p,q,j)
#
      temp Vblock(i,i1,i2,i3)
      temp Taiai(p,i,p1,i1)
      temp T1aiai(p,i,p1,i1)
      temp T2aiai(p,i,p1,i1)
      temp T3aiai(p,i,p1,i1)
      temp Tbjbj(q,j,q1,j1)
      temp T1bjbj(q,j,q1,j1)
      temp T2bjbj(q,j,q1,j1)
      temp T3bjbj(q,j,q1,j1)
      temp Taibj(p,i,q,j)
      temp T1aibj(p,i,q,j)
      temp T2aibj(p,i,q,j)
#
      local Txxxi(mu,nu,lambda,i)
      local Txxxj(mu,nu,lambda,j)
      temp T1xxxi(mu,nu,lambda,i)
      temp T1xxxj(mu,nu,lambda,j)
      temp Txxxp(mu,nu,lambda,i)
      temp  Txxij(mu,nu,i,j)

      temp Txxxq(mu,nu,lambda,j)
      temp Txxpp(mu,nu,p1,i)
      temp Txxqq(mu,nu,q1,j)
      temp Txppp(mu,p2,p1,i)
      temp Txqpp(mu,q,p1,i)
      temp Txqqq(mu,q2,q1,j)
      temp Txpqq(mu,p,q1,j)
      temp Tpppp(p3,p2,p1,p)
      temp Tqqqq(q3,q2,q1,q)
      temp Tppqq(p1,p,q1,j)
      temp Tqqpp(q1,q,p1,i)
      temp Tixxx(i,mu,nu,sigma) 
      temp Tipxx(i,p,nu,sigma) 
      temp Tipqx(i,p,q,sigma) 
      temp Tipqq(i,p,q,q1) 
      temp Txiai(lambda,i,a1,i1) 
      temp Txjbj(lambda,j,b1,j1) 
      temp Txibj(lambda,i,b1,j1) 
#
      temp tmp1_aiai(a,i,a1,i1) 
      temp tmp2_aiai(a,i,a1,i1) 
      temp tmp3_aiai(a,i,a1,i1) 
      temp tmp1_bjbj(b,j,b1,j1) 
      temp tmp2_bjbj(b,j,b1,j1) 
      temp tmp3_bjbj(b,j,b1,j1) 
      temp tmp1_aibj(a,i,b,j) 
      temp tmp2_aibj(a,i,b,j) 
#
      temp Tai(a,i) 
      temp T1ai(a,i) 
      temp T2ai(a,i) 
      temp Tbj(b,j) 
      temp T1bj(b,j) 
      temp T2bj(b,j) 
#
      temp Taa(a,a1) 
      temp T1aa(a,a1) 
      temp Tbb(b,b1) 
      temp T1bb(b,b1) 
      temp Tae_a(a,a1) 
      temp Tae_b(b,b1) 
#
      temp Tia(i,a) 
      temp T1ia(i,a) 
      temp Tjb(j,b) 
      temp T1jb(j,b) 
      temp Tme_a(i,a) 
      temp Tme_b(j,b) 
#
      temp Tii(i,i1) 
      temp T1ii(i,i1) 
      temp Tjj(j,j1) 
      temp T1jj(j,j1) 
      temp Tmi_a(i,i1) 
      temp Tmi_b(j,j1) 
#
      temp T1pppp(p,p1,p2,p3) 
      temp T1qqqq(q,q1,q2,q3) 
      temp Taiii(a,i,i1,i2) 
      temp T1aiii(a,i,i1,i2) 
#
      temp  Tiiii(i,i1,i2,i3) 
      temp T1iiii(i,i1,i2,i3) 
#
      temp  Tjjjj(j,j1,j2,j3) 
      temp T1jjjj(j,j1,j2,j3) 
      temp  Tbjjj(b,j,j1,j2) 
      temp T1bjjj(b,j,j1,j2) 
#
      temp  Tiijj(i,i1,j2,j3) 
      temp T1iijj(i,i1,j2,j3) 
#
      temp  tmp_aa(a,a1) 
      temp tmp1_aa(a,a1) 
      temp  tmp_ii(i,i1) 
      temp tmp1_ii(i,i1) 
#
      temp  Tiiai(i,i1,a,i2) 
      temp T1iiai(i,i1,a,i2) 
#
      temp  tmp_bb(b,b1) 
      temp tmp1_bb(b,b1) 
      temp  tmp_jj(j,j1) 
      temp tmp1_jj(j,j1) 
#
      temp  Tjjbj(j,j1,b,j2) 
      temp T1jjbj(j,j1,b,j2) 
# 
      temp T1aaai(a,a1,a2,i)  
      temp T2aaai(a,a1,a2,i)  
      temp Taaaa(a,a1,a2,a3)  
      temp T1aaaa(a,a1,a2,a3)  
#
      temp T1bbbj(b,b1,b2,j)  
      temp T2bbbj(b,b1,b2,j)  
      temp Tbbbb(b,b1,b2,b3)  
      temp T1bbbb(b,b1,b2,b3)  
#
      temp Taabb(a,a1,b,b1)  
      temp T1aabb(a,a1,b,b1)  
#
      temp R1aiai(a,i,a1,i1) 
      temp R2aiai(a,i,a1,i1) 
      temp R3aiai(a,i,a1,i1) 
      temp R4aiai(a,i,a1,i1) 
      temp R1bjbj(b,j,b1,j1) 
      temp R2bjbj(b,j,b1,j1) 
      temp R3bjbj(b,j,b1,j1) 
      temp R4bjbj(b,j,b1,j1) 
      temp R1aibj(a,i,b,j) 
      temp R2aibj(a,i,b,j) 
      temp R3aibj(a,i,b,j) 
      temp R4aibj(a,i,b,j) 
#
      temp T1iaai(i,a,a1,i1) 
      temp T2iaai(i,a,a1,i1) 
      temp T1jbbj(j,b,b1,j1) 
      temp T2jbbj(j,b,b1,j1) 
      temp T1iabj(i,a,b,j) 
      temp T2iabj(i,a,b,j) 
      temp Tjjpp(j,j1,p,p1) 
      temp T1jjpp(j,j1,p,p1) 
      temp T2jjpp(j,j1,p,p1) 
      temp  Tiiqq(i,i1,q,q1) 
      temp T1iiqq(i,i1,q,q1) 
      temp T2iiqq(i,i1,q,q1) 
      temp  Tjjai(j,j1,a,i) 
      temp T1jjai(j,j1,a,i) 
      temp T2jjai(j,j1,a,i) 
      temp  Tiibj(i,i1,b,j) 
      temp T1iibj(i,i1,b,j) 
      temp T2iibj(i,i1,b,j) 
      temp  Tjbai(j,b,a,i)  
      temp T1jbai(j,b,a,i)  
      temp T2jbai(j,b,a,i)  
      temp  Taijj(a,i,j,j1) 
      temp T1aijj(a,i,j,j1) 
      temp Tqqip(a,i,b,b1)  
#
      temp tpx(p,mu) 
      temp t1px(p,mu) 
      temp tqx(q,mu) 
      temp t1qx(q,mu) 
      temp txi(mu,i) 
      temp t1xi(mu,i) 
      temp txj(mu,j) 
      temp t1xj(mu,j) 
#
# Declare distributed arrays 
# -------------------------- 
#
      served T2new_aa(a,i,a1,i1)
      served T2new_bb(b,j,b1,j1)
      served T2new_ab(a,i,b,j)
      served T2old_aa(a,i,a1,i1)
      served T2old_bb(b,j,b1,j1)
      served T2old_ab(a,i,b,j)
#
      served Tau_aa(a,i,a1,i1)
      served Tau_bb(b,j,b1,j1)
      served Tau_ab(a,i,b,j)
      served Taup_aa(a,i,a1,i1)
      served Taup_bb(b,j,b1,j1)
      served Taup_ab(a,i,b,j)
#
      served Wiibb(i1,i,b,b1)    
      served Wjjaa(j1,j,a,a1)      
#
# Declare served arrays 
# --------------------- 
#
      temp AOINT(mu,nu,lambda,sigma) 
      static pinf(kiter,kptr1)
      temp tpinf(kiter,kptr1)
      scalar ncount1
      scalar ncount2
      scalar one
      scalar two
      scalar five
      scalar six
      scalar seven
#
# Arrays needed for AOLADDER contribution
# ---------------------------------------
#
     temp Zaa(lambda,i,a1,i1)
     temp Zbb(lambda,j,b,j1)
     temp Zab(lambda,i,b,j)
     temp ZZaa(lambda,i,sigma,i1)
     temp ZZ1aa(lambda,i,sigma,i1)
     temp ZZbb(lambda,j,sigma,j1)
     temp ZZ1bb(lambda,j,sigma,j1)
     temp ZZab(lambda,i,sigma,j)
#
     temp Yaa(lambda,i,mu,i1)
     temp Ybb(lambda,j,mu,j1)
     temp Yab(lambda,i,mu,j)
#
     temp TXaiai(a,i,nu,i1)
     temp Taixi(a,i,nu,i1)   
     temp TYaiai(a,i,a1,i1)
     temp TY1aiai(a,i,a1,i1)
     temp TXbjbj(b,j,nu,j1)
     temp Tbjxj(b,j,nu,j1)
     temp TYbjbj(b,j,b1,j1)
     temp TY1bjbj(b,j,b1,j1)
     temp TXaibj(a,i,nu,j)
     temp TZaibj(a,i,nu,j)
     temp Taixj(a,i,nu,j)
     temp TYaibj(a,i,b,j)
#
     served TAO_aa(lambda,i,sigma,i1)
     served TAO_bb(lambda,j,sigma,j1)
     served TAO_ab(lambda,i,sigma,j)
     served T1AO_aa(lambda,i,a,i1)
     served T1AO_bb(lambda,j,b,j1)
     served T1AO_ab(lambda,i,b,j)
     served T2AO_aa(lambda,i,sigma,i1)
     served T2AO_bb(lambda,j,sigma,j1)
     served T2AO_ab(lambda,i,sigma,j)
     distributed t1a_ax(a,mu) 
     distributed t1b_bx(b,mu) 
     distributed t1a_xi(mu,i) 
     distributed t1b_xj(mu,j) 
#
# local arrays used for data storage
# ---------------------------------- 
#
     local Liiai(i2,i,a,i1) 
     local L1iiai(i,i1,a2,i2) 
     local L2iiai(i2,i1,a2,i)  
     local L3iiai(i,i1,a,i2)  
     local L4iiai(i2,i1,a,i)  
     local Laiai(a,i,a2,i1) 
     local L1aiai(a,i,a1,i2) 
     local L2aiai(a1,i1,a2,i) 
     local L3aiai(a2,i1,a,i2) 
     local L4aiai(a1,i,a2,i1) 
     local Laaai(a,a2,a1,i) 
#
     local Ljjbj(j2,j,b,j1) 
     local Lbjbj(b,j,b2,j1) 
     local L1bjbj(b,j,b1,j2) 
     local L2bjbj(b1,j1,b2,j) 
     local L3bjbj(b2,j1,b,j2) 
     local L4bjbj(b1,j,b2,j1) 
     local Lbbbj(b,b2,b1,j) 
#
     local Laijj(a,i,j1,j) 
     local Laibj(a,i,b1,j) 
     local L1aibj(a1,i,b,j) 
     local L2aibj(a,i,b,j2) 
     local L3aibj(a,i1,b,j) 
     local L4aibj(a,i,b1,j) 
     local Liibj(i1,i,b,j) 
     local L1iibj(i,i1,b,j) 
     local Lbbai(b,b1,a,i) 
     local Laabj(a,a1,b,j) 
     local LLaiai(a,i,a1,i1) 
     local Lxiai(lambda,i,a1,i1) 
     local LLbjbj(b,j,b1,j1) 
     local Lxjbj(lambda,j,b1,j1) 
     local LLaibj(a,i,b,j) 
     local Lxibj(lambda,i,b,j) 
     local L1xixi(mu,i,nu,i1)  
     local L2xixi(nu,i1,mu,i)  
     local L1xjxj(mu,j,nu,j1)  
     local L2xjxj(nu,j1,mu,j)  
     local L1xixj(mu,i,nu,j)  
     local Laiii(a,i,i2,i1) 
     local L1aiii(a1,i2,i,i1) 
     local Lbjjj(b,j,j2,j1) 
     local L1bjjj(b1,j2,j,j1) 
     local Ljjai(a,i,j,j1) 
#
     local LWaaai(a2,a,a1,i1) 
     local LWbbbj(b2,b,b1,j1) 
     local LWbbai(b1,b,a,i) 
     local LWaabj(a1,a,b,j) 
     local LXbbai(b1,b,a1,i1) 
     local LXaabj(a1,a,b1,j1) 
     local LWaiai(a2,i,a,i1) 
     local LWbjbj(b2,j,b,j1) 
     local LWaibj(a,i,b,j) 
#
# Distributed two-particle arrays 
# ------------------------------- 
#
     distributed Wminj_aa(i2,i,i3,i1) 
     distributed Wminj_bb(j2,j,j3,j1) 
     distributed Wminj_ab(i2,i,j3,j1) 
#
# Declare scalars 
# --------------- 
#
      scalar etemp
      scalar esum
      scalar esuma
      scalar esumb
      scalar esumab
      scalar ecorraa
      scalar ecorrbb
      scalar ecorrab
      scalar ecorrT
      scalar enew 
      scalar eold 
      scalar ecrit 
      scalar ediff 
      scalar enhfa 
      scalar enhfb
      scalar ecorrnha 
      scalar ecorrnhb
      scalar mp2_energy
      scalar sum 
      scalar suma
      scalar tmp
# 
# CIS vectors
#
      distributed VSTART1A1(a,i)
      distributed VSTART1A2(a,i)
      distributed VSTART1A3(a,i)
      distributed VSTART1A4(a,i)
      distributed VSTART1A5(a,i)
      distributed VSTART1A6(a,i)
      distributed VSTART1A7(a,i)
      distributed VSTART1A8(a,i)
      distributed VSTART1A9(a,i)
      distributed VSTART1A10(a,i)
      distributed VSTART1A11(a,i)
      distributed VSTART1A12(a,i)
#
      distributed VSTART1B1(b,j)
      distributed VSTART1B2(b,j)
      distributed VSTART1B3(b,j)
      distributed VSTART1B4(b,j)
      distributed VSTART1B5(b,j)
      distributed VSTART1B6(b,j)
      distributed VSTART1B7(b,j)
      distributed VSTART1B8(b,j)
      distributed VSTART1B9(b,j)
      distributed VSTART1B10(b,j)
      distributed VSTART1B11(b,j)
      distributed VSTART1B12(b,j)
#
      local TAOINT(mu,nu,lambda,sigma)
      local L1xxxi(mu,nu,lambda,i)
      local L2xxxi(mu,lambda,nu,i)
      local L3xxxi(lambda,mu,nu,i)
      local L1xxxj(mu,nu,lambda,j)
      local L2xxxj(mu,lambda,nu,j)
      local L3xxxj(lambda,mu,nu,j)
      local Lxixi(mu,i,nu,i1)
      local Lxxii(mu,nu,i,i1)
      local Lixxi(i,mu,nu,i1)
      local Lxjxj(mu,j,nu,j1)
      local Lxxjj(mu,nu,j,j1)
      local Ljxxj(j,mu,nu,j1)
      local Lxxai(mu,nu,a,i)
      local Lxxbj(mu,nu,b,j)
      local Lxixj(mu,i,nu,j)
      local Lixxj(i,mu,nu,j)
      local Lxipi(mu,i,p,i1)
      local Lxaii(mu,a,i,i1)
      local Lixai(i,mu,a,i1)
      local L1xaai(mu,a,a1,i)
      local L2xaai(mu,a,a2,i)
      local Lxjqj(mu,j,q,j1)
      local Lxbjj(mu,b,j,j1)
      local Ljxbj(j,mu,b,j1)
      local Lxbbj(mu,b,b1,j)
      local Lxbii(mu,b,i,i1)
      local Lxbai(mu,b,a,i)
      local Lxiqj(mu,i,q,j)
      local Lxajj(mu,a,j,j1)
      local Lixbj(i,mu,b,j)
      local Lxabj(mu,a,b,j)
      local L1xbbj(mu,b,b1,j)
#
# Arrays/Scalars used exclusively in DIIS procedure. 
# -------------------------------------------------- 
#
       served D0aiai(a,i,a1,i1)  
       served D1aiai(a,i,a1,i1)  
       served D2aiai(a,i,a1,i1)  
       served D3aiai(a,i,a1,i1)  
       served D4aiai(a,i,a1,i1)  
       served D5aiai(a,i,a1,i1)  
#
       served D0bjbj(b,j,b1,j1)  
       served D1bjbj(b,j,b1,j1)  
       served D2bjbj(b,j,b1,j1)  
       served D3bjbj(b,j,b1,j1)  
       served D4bjbj(b,j,b1,j1)  
       served D5bjbj(b,j,b1,j1)  
#
       served D0aibj(a,i,b,j)  
       served D1aibj(a,i,b,j)  
       served D2aibj(a,i,b,j)  
       served D3aibj(a,i,b,j)  
       served D4aibj(a,i,b,j)  
       served D5aibj(a,i,b,j)  
#
       distributed D0ai(a,i)  
       distributed D1ai(a,i)  
       distributed D2ai(a,i)  
       distributed D3ai(a,i)  
       distributed D4ai(a,i)  
       distributed D5ai(a,i)  
#
       distributed D0bj(b,j)   
       distributed D1bj(b,j)   
       distributed D2bj(b,j)   
       distributed D3bj(b,j)   
       distributed D4bj(b,j)   
       distributed D5bj(b,j)   
#
       distributed e1ai(a,i)  
       distributed e2ai(a,i)  
       distributed e3ai(a,i)  
       distributed e4ai(a,i)  
       distributed e5ai(a,i)  
#
       distributed e1bj(b,j)   
       distributed e2bj(b,j)   
       distributed e3bj(b,j)   
       distributed e4bj(b,j)   
       distributed e5bj(b,j)   
#
       served Waiai(a,i,a1,i1)  
       served e1aiai(a,i,a1,i1)  
       served e2aiai(a,i,a1,i1)  
       served e3aiai(a,i,a1,i1)  
       served e4aiai(a,i,a1,i1)  
       served e5aiai(a,i,a1,i1)  
#
       served e1bjbj(b,j,b1,j1)  
       served e2bjbj(b,j,b1,j1)  
       served e3bjbj(b,j,b1,j1)  
       served e4bjbj(b,j,b1,j1)  
       served e5bjbj(b,j,b1,j1)  
#
       served e1aibj(a,i,b,j)  
       served e2aibj(a,i,b,j)  
       served e3aibj(a,i,b,j)  
       served e4aibj(a,i,b,j)  
       served e5aibj(a,i,b,j)  
       served e6aibj(a,i,b,j)  
#
       scalar b11
       scalar b12
       scalar b13
       scalar b14
       scalar b15
       scalar b16
       scalar b17
       scalar b18
       scalar b19
       scalar b110
#
       scalar b22
       scalar b23
       scalar b24
       scalar b25
       scalar b26
       scalar b27
       scalar b28
       scalar b29
       scalar b210
#
       scalar b33
       scalar b34
       scalar b35
       scalar b36
       scalar b37
       scalar b38
       scalar b39
       scalar b310
       scalar b44
       scalar b45
       scalar b46
       scalar b47
       scalar b48
       scalar b49
       scalar b410
#
       scalar b55
       scalar b56
       scalar b57
       scalar b58
       scalar b59
       scalar b510
#
       scalar b66
       scalar b67
       scalar b68
       scalar b69
       scalar b610
#
       scalar b77
       scalar b78
       scalar b79
       scalar b710
#
       scalar b88
       scalar b89
       scalar b810
#
       scalar b99
       scalar b910
#
       scalar b1010
#
       scalar Tb11
       scalar Tb12
       scalar Tb13
       scalar Tb14
       scalar Tb15
       scalar Tb16
       scalar Tb17
       scalar Tb18
       scalar Tb19
       scalar Tb110
#
       scalar Tb22
       scalar Tb23
       scalar Tb24
       scalar Tb25
       scalar Tb26
       scalar Tb27
       scalar Tb28
       scalar Tb29
       scalar Tb210
#
       scalar Tb33
       scalar Tb34
       scalar Tb35
       scalar Tb36
       scalar Tb37
       scalar Tb38
       scalar Tb39
       scalar Tb310
       scalar Tb44
       scalar Tb45
       scalar Tb46
       scalar Tb47
       scalar Tb48
       scalar Tb49
       scalar Tb410
#
       scalar Tb55
       scalar Tb56
       scalar Tb57
       scalar Tb58
       scalar Tb59
       scalar Tb510
#
       scalar Tb66
       scalar Tb67
       scalar Tb68
       scalar Tb69
       scalar Tb610
#
       scalar Tb77
       scalar Tb78
       scalar Tb79
       scalar Tb710
#
       scalar Tb88
       scalar Tb89
       scalar Tb810
#
       scalar Tb99
       scalar Tb910
#
       scalar Tb1010
#
       scalar c1 
       scalar c2 
       scalar c3 
       scalar c4 
       scalar c5 
       scalar c6 
       scalar c7 
       scalar c8 
       scalar c9 
       scalar c10  
       scalar NONHF
#
     PROC READ_CIS
#    -------------
#
      create VSTART1A1
      create VSTART1A2
      create VSTART1A3
      create VSTART1A4
      create VSTART1A5
      create VSTART1A6
      create VSTART1A7
      create VSTART1A8
      create VSTART1A9
      create VSTART1A10
      create VSTART1A11
      create VSTART1A12
      create VSTART1B1
      create VSTART1B2
      create VSTART1B3
      create VSTART1B4
      create VSTART1B5
      create VSTART1B6
      create VSTART1B7
      create VSTART1B8
      create VSTART1B9
      create VSTART1B10
      create VSTART1B11
      create VSTART1B12
#
      execute sip_barrier
#
      execute list_to_blocks VSTART1A1
      execute list_to_blocks VSTART1B1
      execute list_to_blocks VSTART1A2
      execute list_to_blocks VSTART1B2
      execute list_to_blocks VSTART1A3
      execute list_to_blocks VSTART1B3
      execute list_to_blocks VSTART1A4
      execute list_to_blocks VSTART1B4
      execute list_to_blocks VSTART1A5
      execute list_to_blocks VSTART1B5
      execute list_to_blocks VSTART1A6
      execute list_to_blocks VSTART1B6
      execute list_to_blocks VSTART1A7
      execute list_to_blocks VSTART1B7
      execute list_to_blocks VSTART1A8
      execute list_to_blocks VSTART1B8
      execute list_to_blocks VSTART1A9
      execute list_to_blocks VSTART1B9
      execute list_to_blocks VSTART1A10
      execute list_to_blocks VSTART1B10
      execute list_to_blocks VSTART1A11
      execute list_to_blocks VSTART1B11
      execute list_to_blocks VSTART1A12
      execute list_to_blocks VSTART1B12
#
      execute read_list_to_blocks
      execute server_barrier 
#
     ENDPROC READ_CIS
#    -----------------
#
     PROC READ_2EL   
# 
#    ------------------------------------------------------------------------ 
#
      execute server_barrier
      execute list_to_blocks                VSpipi
      execute list_to_blocks                Vaaii
      execute list_to_blocks                Viaai
      execute list_to_blocks                VSaaai
      execute list_to_blocks                VSqjqj
      execute list_to_blocks                Vbbjj
      execute list_to_blocks                Vjbbj
      execute list_to_blocks                VSbbbj
      execute list_to_blocks                Vbbii
      execute list_to_blocks                Vjbii
      execute list_to_blocks                Vbbai
      execute list_to_blocks                Vpiqj
      execute list_to_blocks                Vaajj
      execute list_to_blocks                Viabj
      execute list_to_blocks                Vaabj
      execute read_list_to_blocks
      execute server_barrier

      ENDPROC READ_2EL   
#     ----------------

      PROC WRITE_CIS
#     --------------
      execute server_barrier
#
      EXECUTE  BLOCKS_TO_LIST  VSTART1A1
      EXECUTE  BLOCKS_TO_LIST  VSTART1B1
      EXECUTE  BLOCKS_TO_LIST  VSTART1A2
      EXECUTE  BLOCKS_TO_LIST  VSTART1B2
      EXECUTE  BLOCKS_TO_LIST  VSTART1A3
      EXECUTE  BLOCKS_TO_LIST  VSTART1B3
      EXECUTE  BLOCKS_TO_LIST  VSTART1A4
      EXECUTE  BLOCKS_TO_LIST  VSTART1B4
      EXECUTE  BLOCKS_TO_LIST  VSTART1A5
      EXECUTE  BLOCKS_TO_LIST  VSTART1B5
      EXECUTE  BLOCKS_TO_LIST  VSTART1A6
      EXECUTE  BLOCKS_TO_LIST  VSTART1B6
      EXECUTE  BLOCKS_TO_LIST  VSTART1A7
      EXECUTE  BLOCKS_TO_LIST  VSTART1B7
      EXECUTE  BLOCKS_TO_LIST  VSTART1A8
      EXECUTE  BLOCKS_TO_LIST  VSTART1B8
      EXECUTE  BLOCKS_TO_LIST  VSTART1A9
      EXECUTE  BLOCKS_TO_LIST  VSTART1B9
      EXECUTE  BLOCKS_TO_LIST  VSTART1A10
      EXECUTE  BLOCKS_TO_LIST  VSTART1B10
      EXECUTE  BLOCKS_TO_LIST  VSTART1A11
      EXECUTE  BLOCKS_TO_LIST  VSTART1B11
      EXECUTE  BLOCKS_TO_LIST  VSTART1A12
      EXECUTE  BLOCKS_TO_LIST  VSTART1B12

      ENDPROC WRITE_CIS
#     -----------------
#
     PROC WRITE_2EL   
# 
#    ------------------------------------------------------------------------ 
#
      execute server_barrier
      execute blocks_to_list                VSpipi(p,i,p1,i1) 
      execute blocks_to_list                Vaaii
      execute blocks_to_list                Viaai
      execute blocks_to_list                VSaaai
      execute blocks_to_list                VSqjqj(q,j,q1,j1) 
      execute blocks_to_list                Vbbjj
      execute blocks_to_list                Vjbbj
      execute blocks_to_list                VSbbbj
      execute blocks_to_list                Vbbii
      execute blocks_to_list                Vjbii
      execute blocks_to_list                Vbbai
      execute blocks_to_list                Vpiqj(p,i,q,j) 
      execute blocks_to_list                Vaajj
      execute blocks_to_list                Viabj
      execute blocks_to_list                Vaabj
#
#    ------------------------------------------------------------------------ 
#
     ENDPROC WRITE_2EL   

#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
#    Perform the first two stages of the transformation in two N5 steps.
#
     PROC TRAN_TRAN2
#
#    ------------------------------------------------------------------------
#
     PARDO mu, nu, lambda
#
          allocate Txxxi(mu,nu,lambda,*)
          allocate Txxxj(mu,nu,lambda,*)
#
          DO sigma
#
             aoint(mu,nu,lambda,sigma) = 0.0
             compute_integrals aoint(mu,nu,lambda,sigma)
#
             DO i
#
                 T1xxxi(mu,nu,lambda,i)  = aoint(mu,nu,lambda,sigma)*ca(sigma,i)
                 Txxxi(mu,nu,lambda,i)  += T1xxxi(mu,nu,lambda,i)
#
             ENDDO i
#
             DO j
#
                 T1xxxj(mu,nu,lambda,j)  = aoint(mu,nu,lambda,sigma)*cb(sigma,j)
                 Txxxj(mu,nu,lambda,j)  += T1xxxj(mu,nu,lambda,j)
#
             ENDDO j
#
          ENDDO sigma

          DO i
             T1xxxi(mu,nu,lambda,i)         = Txxxi(mu,nu,lambda,i)
             PREPARE Vxxxi(mu,nu,lambda,i)  = T1xxxi(mu,nu,lambda,i)
          ENDDO i

          DO j
             T1xxxj(mu,nu,lambda,j)         = Txxxj(mu,nu,lambda,j)
             PREPARE Vxxxj(mu,nu,lambda,j)  = T1xxxj(mu,nu,lambda,j)
          ENDDO j

          deallocate Txxxi(mu,nu,lambda,*)
          deallocate Txxxj(mu,nu,lambda,*)
#
     ENDPARDO mu, nu, lambda
     execute server_barrier
#
#    ------------------------------------------------------------------------
#    ------------------------------------------------------------------------
#
     PARDO mu, nu, i
#
           allocate L1xxxi(mu,nu,*,i)
#
           DO lambda
#
              REQUEST Vxxxi(mu,nu,lambda,i) i
#
              L1xxxi(mu,nu,lambda,i) = Vxxxi(mu,nu,lambda,i)
#
           ENDDO lambda
#
           DO i1
#
              Txxii(mu,nu,i1,i) = 0.0
#
              DO lambda
#
                 T1xxii(mu,nu,i1,i) = L1xxxi(mu,nu,lambda,i)*ca(lambda,i1)
                 Txxii(mu,nu,i1,i) += T1xxii(mu,nu,i1,i)
#
              ENDDO lambda
#
              PREPARE Vxxii(mu,nu,i1,i) = Txxii(mu,nu,i1,i)
#
           ENDDO i1
#
           DO a
#
              Txxai(mu,nu,a,i) = 0.0
#
              DO lambda
#
                 T1xxai(mu,nu,a,i) = L1xxxi(mu,nu,lambda,i)*ca(lambda,a)
                 Txxai(mu,nu,a,i) += T1xxai(mu,nu,a,i)
#
              ENDDO lambda
#
              PREPARE Vxxai(mu,nu,a,i) = Txxai(mu,nu,a,i)
#
           ENDDO a
           deallocate L1xxxi(mu,nu,*,i)
           allocate L2xxxi(mu,*,nu,i)

           DO lambda
              REQUEST Vxxxi(mu,lambda,nu,i) i
              L2xxxi(mu,lambda,nu,i) = Vxxxi(mu,lambda,nu,i)
           ENDDO lambda

           DO i1
              Txixi(mu,i1,nu,i) = 0.0

              DO lambda
                 T1xixi(mu,i1,nu,i) = L2xxxi(mu,lambda,nu,i)*ca(lambda,i1)
                 Txixi(mu,i1,nu,i) += T1xixi(mu,i1,nu,i)
              ENDDO lambda

              PREPARE Vxixi(mu,i1,nu,i) = Txixi(mu,i1,nu,i)
           ENDDO i1

           deallocate L2xxxi(mu,*,nu,i)
           allocate L3xxxi(*,mu,nu,i)

           DO lambda
              REQUEST Vxxxi(lambda,mu,nu,i) i
              L3xxxi(lambda,mu,nu,i) = Vxxxi(lambda,mu,nu,i)
           ENDDO lambda

           DO i1
              Tixxi(i1,mu,nu,i) = 0.0

              DO lambda
                 T1ixxi(i1,mu,nu,i) = L3xxxi(lambda,mu,nu,i)*ca(lambda,i1)
                 Tixxi(i1,mu,nu,i) += T1ixxi(i1,mu,nu,i)
              ENDDO lambda

              PREPARE Vixxi(i1,mu,nu,i) = Tixxi(i1,mu,nu,i)
           ENDDO i1

           deallocate L3xxxi(*,mu,nu,i)
#
     ENDPARDO mu, nu, i
#
#    ------------------------------------------------------------------------
#
     PARDO mu, nu, j
#
           allocate L1xxxj(mu,nu,*,j)
#
           DO lambda
#
              REQUEST Vxxxj(mu,nu,lambda,j) j
#
              L1xxxj(mu,nu,lambda,j) = Vxxxj(mu,nu,lambda,j)
#
           ENDDO lambda
#
           DO j1
#
              Txxjj(mu,nu,j1,j) = 0.0
#
              DO lambda
#
                 T1xxjj(mu,nu,j1,j) = L1xxxj(mu,nu,lambda,j)*cb(lambda,j1)
                 Txxjj(mu,nu,j1,j) += T1xxjj(mu,nu,j1,j)
#
              ENDDO lambda
#
              PREPARE Vxxjj(mu,nu,j1,j) = Txxjj(mu,nu,j1,j)
#
           ENDDO j1
#
           DO b
#
              Txxbj(mu,nu,b,j) = 0.0
#
              DO lambda
#
                 T1xxbj(mu,nu,b,j) = L1xxxj(mu,nu,lambda,j)*cb(lambda,b)
                 Txxbj(mu,nu,b,j) += T1xxbj(mu,nu,b,j)
#
              ENDDO lambda
#
              PREPARE Vxxbj(mu,nu,b,j) = Txxbj(mu,nu,b,j)
#
           ENDDO b
#
           DO i
#
              Txxij(mu,nu,i,j) = 0.0
#
              DO lambda
#
                 T1xxij(mu,nu,i,j) = L1xxxj(mu,nu,lambda,j)*ca(lambda,i)
                 Txxij(mu,nu,i,j) += T1xxij(mu,nu,i,j)
#
              ENDDO lambda
#
              PREPARE Vxxij(mu,nu,i,j) = Txxij(mu,nu,i,j)
#
           ENDDO i
#
           deallocate L1xxxj(mu,nu,*,j)
           allocate L2xxxj(mu,*,nu,j)

           DO lambda
              REQUEST Vxxxj(mu,lambda,nu,j) j
              L2xxxj(mu,lambda,nu,j) = Vxxxj(mu,lambda,nu,j)
           ENDDO lambda
           DO j1
              Txjxj(mu,j1,nu,j) = 0.0

              DO lambda
                 T1xjxj(mu,j1,nu,j) = L2xxxj(mu,lambda,nu,j)*cb(lambda,j1)
                 Txjxj(mu,j1,nu,j) += T1xjxj(mu,j1,nu,j)
              ENDDO lambda

              PREPARE Vxjxj(mu,j1,nu,j) = Txjxj(mu,j1,nu,j)
           ENDDO j1

           DO i
              Txixj(mu,i,nu,j) = 0.0

              DO lambda
                 T1xixj(mu,i,nu,j) = L2xxxj(mu,lambda,nu,j)*ca(lambda,i)
                 Txixj(mu,i,nu,j) += T1xixj(mu,i,nu,j)
              ENDDO lambda

              PREPARE Vxixj(mu,i,nu,j) = Txixj(mu,i,nu,j)
           ENDDO i

           deallocate L2xxxj(mu,*,nu,j)
           allocate L3xxxj(*,mu,nu,j)

           DO lambda
              REQUEST Vxxxj(lambda,mu,nu,j) j
              L3xxxj(lambda,mu,nu,j) = Vxxxj(lambda,mu,nu,j)
           ENDDO lambda

           DO j1
              Tjxxj(j1,mu,nu,j) = 0.0

              DO lambda
                 T1jxxj(j1,mu,nu,j) = L3xxxj(lambda,mu,nu,j)*cb(lambda,j1)
                 Tjxxj(j1,mu,nu,j) += T1jxxj(j1,mu,nu,j)
              ENDDO lambda

              PREPARE Vjxxj(j1,mu,nu,j) = Tjxxj(j1,mu,nu,j)
           ENDDO j1

           DO i
              Tixxj(i,mu,nu,j) = 0.0

              DO lambda
                 T1ixxj(i,mu,nu,j) = L3xxxj(lambda,mu,nu,j)*ca(lambda,i)
                 Tixxj(i,mu,nu,j) += T1ixxj(i,mu,nu,j)
              ENDDO lambda

              PREPARE Vixxj(i,mu,nu,j) = Tixxj(i,mu,nu,j)
           ENDDO i

           deallocate L3xxxj(*,mu,nu,j)
#
     ENDPARDO mu, nu, j
#
     execute server_barrier
#
#    ------------------------------------------------------------------------
#
     ENDPROC TRAN_TRAN2
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
#    Perform the third N5 stage of the transformation.
#
     PROC TRAN_TRAN3
#
#    ------------------------------------------------------------------------
#
     PARDO mu, i, i1
#
           allocate Lxixi(mu,i,*,i1)
           allocate Lxxii(mu,*,i,i1)
           allocate Lixxi(i,mu,*,i1)
#
           DO nu
#
              REQUEST Vxixi(mu,i,nu,i1) i1
              REQUEST Vxxii(mu,nu,i,i1) i1
              REQUEST Vixxi(i,mu,nu,i1) i1
#
              Lxixi(mu,i,nu,i1) = Vxixi(mu,i,nu,i1)
              Lxxii(mu,nu,i,i1) = Vxxii(mu,nu,i,i1)
              Lixxi(i,mu,nu,i1) = Vixxi(i,mu,nu,i1)
#
           ENDDO nu
#
           DO p
#
              Txipi(mu,i,p,i1) = 0.0
#
              DO nu
#
                 T1xipi(mu,i,p,i1) = Lxixi(mu,i,nu,i1)*ca(nu,p)
                 Txipi(mu,i,p,i1) += T1xipi(mu,i,p,i1)
#
              ENDDO nu
              PREPARE Vxipi(mu,i,p,i1) = Txipi(mu,i,p,i1)
#
           ENDDO p
#
           DO a
#
              Txaii(mu,a,i,i1) = 0.0
              Tixai(i,mu,a,i1) = 0.0
#
              DO nu
#
                 T1xaii(mu,a,i,i1) = Lxxii(mu,nu,i,i1)*ca(nu,a)
                 Txaii(mu,a,i,i1) += T1xaii(mu,a,i,i1)
#
                 T1ixai(i,mu,a,i1) = Lixxi(i,mu,nu,i1)*ca(nu,a)
                 Tixai(i,mu,a,i1) += T1ixai(i,mu,a,i1)

              ENDDO nu
#
              PREPARE Vxaii(mu,a,i,i1) = Txaii(mu,a,i,i1)
              PREPARE Vixai(i,mu,a,i1) = Tixai(i,mu,a,i1)
#
           ENDDO a
#
           DO b
#
              Txbii(mu,b,i,i1) = 0.0
#
              DO nu
#
                 T1xbii(mu,b,i,i1) = Lxxii(mu,nu,i,i1)*cb(nu,b)
                 Txbii(mu,b,i,i1) += T1xbii(mu,b,i,i1)
#
              ENDDO nu
#
              PREPARE Vxbii(mu,b,i,i1) = Txbii(mu,b,i,i1)
#
           ENDDO b
#
           deallocate Lxixi(mu,i,*,i1)
           deallocate Lxxii(mu,*,i,i1)
           deallocate Lixxi(i,mu,*,i1)
#
     ENDPARDO mu, i, i1
#
#    ------------------------------------------------------------------------
#
     PARDO mu, a, i
#
           allocate Lxxai(mu,*,a,i)
#
           DO nu
#
              REQUEST Vxxai(mu,nu,a,i) i
              Lxxai(mu,nu,a,i) = Vxxai(mu,nu,a,i)
#
           ENDDO nu
#
           DO a1
#
              Txaai(mu,a1,a,i) = 0.0
#
              DO nu
#
                 T1xaai(mu,a1,a,i) = Lxxai(mu,nu,a,i)*ca(nu,a1)
                 Txaai(mu,a1,a,i) += T1xaai(mu,a1,a,i)
#
              ENDDO nu
#
              PREPARE Vxaai(mu,a1,a,i) = Txaai(mu,a1,a,i)
#
           ENDDO a1
#
           DO b
#
              Txbai(mu,b,a,i) = 0.0
#
              DO nu
#
                 T1xbai(mu,b,a,i) = Lxxai(mu,nu,a,i)*cb(nu,b)
                 Txbai(mu,b,a,i) += T1xbai(mu,b,a,i)
#
              ENDDO nu
#
              PREPARE Vxbai(mu,b,a,i) = Txbai(mu,b,a,i)
#
           ENDDO b
#
           deallocate Lxxai(mu,*,a,i)
#
     ENDPARDO mu, a, i
#
#    ------------------------------------------------------------------------
#
     PARDO mu, j, j1
#
           allocate Lxjxj(mu,j,*,j1)
           allocate Lxxjj(mu,*,j,j1)
           allocate Ljxxj(j,mu,*,j1)
#
           DO nu
#
              REQUEST Vxjxj(mu,j,nu,j1) j1
              REQUEST Vxxjj(mu,nu,j,j1) j1
              REQUEST Vjxxj(j,mu,nu,j1) j1
#
              Lxjxj(mu,j,nu,j1) = Vxjxj(mu,j,nu,j1)
              Lxxjj(mu,nu,j,j1) = Vxxjj(mu,nu,j,j1)
              Ljxxj(j,mu,nu,j1) = Vjxxj(j,mu,nu,j1)
#
           ENDDO nu
#
           DO q
#
              Txjqj(mu,j,q,j1) = 0.0
#
              DO nu
#
                 T1xjqj(mu,j,q,j1) = Lxjxj(mu,j,nu,j1)*cb(nu,q)
                 Txjqj(mu,j,q,j1) += T1xjqj(mu,j,q,j1)
#
              ENDDO nu
#
              PREPARE Vxjqj(mu,j,q,j1) = Txjqj(mu,j,q,j1)
#
           ENDDO q
#
           DO b
#
              Txbjj(mu,b,j,j1) = 0.0
              Tjxbj(j,mu,b,j1) = 0.0
#
              DO nu
#
                 T1xbjj(mu,b,j,j1) = Lxxjj(mu,nu,j,j1)*cb(nu,b)
                 Txbjj(mu,b,j,j1) += T1xbjj(mu,b,j,j1)
#
                 T1jxbj(j,mu,b,j1) = Ljxxj(j,mu,nu,j1)*cb(nu,b)
                 Tjxbj(j,mu,b,j1) += T1jxbj(j,mu,b,j1)

              ENDDO nu
#
              PREPARE Vxbjj(mu,b,j,j1) = Txbjj(mu,b,j,j1)
              PREPARE Vjxbj(j,mu,b,j1) = Tjxbj(j,mu,b,j1)
#
           ENDDO b
#
           DO a
#
              Txajj(mu,a,j,j1) = 0.0
#
              DO nu
                T1xajj(mu,a,j,j1) = Lxxjj(mu,nu,j,j1)*ca(nu,a)
                 Txajj(mu,a,j,j1) += T1xajj(mu,a,j,j1)
#
              ENDDO nu
#
              PREPARE Vxajj(mu,a,j,j1) = Txajj(mu,a,j,j1)
#
           ENDDO a
#
           deallocate Lxjxj(mu,j,*,j1)
           deallocate Lxxjj(mu,*,j,j1)
           deallocate Ljxxj(j,mu,*,j1)
#
     ENDPARDO mu, j, j1
#
#    ------------------------------------------------------------------------
#
     PARDO mu, b, j
#
           allocate Lxxbj(mu,*,b,j)
#
           DO nu
#
              REQUEST Vxxbj(mu,nu,b,j) j
              Lxxbj(mu,nu,b,j) = Vxxbj(mu,nu,b,j)
#
           ENDDO nu
#
           DO b1
#
              Txbbj(mu,b1,b,j) = 0.0
#
              DO nu
#
                 T1xbbj(mu,b1,b,j) = Lxxbj(mu,nu,b,j)*cb(nu,b1)
                 Txbbj(mu,b1,b,j) += T1xbbj(mu,b1,b,j)
#
              ENDDO nu
#
              PREPARE Vxbbj(mu,b1,b,j) = Txbbj(mu,b1,b,j)
#
           ENDDO b1
#
           DO a
#
              Txabj(mu,a,b,j) = 0.0
#
              DO nu
#
                 T1xabj(mu,a,b,j) = Lxxbj(mu,nu,b,j)*ca(nu,a)
                 Txabj(mu,a,b,j) += T1xabj(mu,a,b,j)
#
              ENDDO nu
#
              PREPARE Vxabj(mu,a,b,j) = Txabj(mu,a,b,j)
#
           ENDDO a
#
           deallocate Lxxbj(mu,*,b,j)
#
     ENDPARDO mu, b, j
#
#    ------------------------------------------------------------------------
#
     PARDO mu, i, j
#
           allocate Lxixj(mu,i,*,j)
           allocate Lixxj(i,mu,*,j)
#
           DO nu
#
              REQUEST Vxixj(mu,i,nu,j) j
              REQUEST Vixxj(i,mu,nu,j) j
#
              Lxixj(mu,i,nu,j) = Vxixj(mu,i,nu,j)
              Lixxj(i,mu,nu,j) = Vixxj(i,mu,nu,j)
#
           ENDDO nu
#
           DO q
#
              Txiqj(mu,i,q,j) = 0.0
#
              DO nu
#
                 T1xiqj(mu,i,q,j) = Lxixj(mu,i,nu,j)*cb(nu,q)
                 Txiqj(mu,i,q,j) += T1xiqj(mu,i,q,j)
#
              ENDDO nu
#
#
              PREPARE Vxiqj(mu,i,q,j) = Txiqj(mu,i,q,j)
#
           ENDDO q
#
           DO b
#
              Tixbj(i,mu,b,j) = 0.0
#
              DO nu
#
                 T1ixbj(i,mu,b,j) = Lixxj(i,mu,nu,j)*cb(nu,b)
                 Tixbj(i,mu,b,j) += T1ixbj(i,mu,b,j)
#
              ENDDO nu
#
              PREPARE Vixbj(i,mu,b,j) = Tixbj(i,mu,b,j)
#
           ENDDO b
#
           deallocate Lxixj(mu,i,*,j)
           deallocate Lixxj(i,mu,*,j)
#
     ENDPARDO mu, i, j
#
#    ------------------------------------------------------------------------
#   
     execute server_barrier
#
     ENDPROC TRAN_TRAN3
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
     PROC TRAN_TRAN4
#
#    ------------------------------------------------------------------------
#
     PARDO p, i, i1
#
           allocate Lxipi(*,i,p,i1)
#
           DO mu
#
              REQUEST Vxipi(mu,i,p,i1) i1
              REQUEST Vxipi(mu,i1,p,i) i
              Lxipi(mu,i,p,i1)  = Vxipi(mu,i,p,i1)
              Txipi(mu,i,p,i1)  = Vxipi(mu,i1,p,i)
              Lxipi(mu,i,p,i1) -= Txipi(mu,i,p,i1)
#
#
           ENDDO mu
#
           DO p1
#
              Tpipi(p1,i,p,i1) = 0.0
#
              DO mu
#
                 T1pipi(p1,i,p,i1) = Lxipi(mu,i,p,i1)*ca(mu,p1)
                 Tpipi(p1,i,p,i1) += T1pipi(p1,i,p,i1)
#
              ENDDO mu
#
              PREPARE VSpipi(p1,i,p,i1) = Tpipi(p1,i,p,i1)
#
           ENDDO p1
#
           deallocate Lxipi(*,i,p,i1)
#
     ENDPARDO p, i, i1
#
     PARDO a, i, i1
#
           allocate Lxaii(*,a,i,i1)
           allocate Lixai(i,*,a,i1)
#
           DO mu
#
              REQUEST Vxaii(mu,a,i,i1) i1
              REQUEST Vixai(i,mu,a,i1) i1
#
              Lxaii(mu,a,i,i1) = Vxaii(mu,a,i,i1)
              Lixai(i,mu,a,i1) = Vixai(i,mu,a,i1)
#
           ENDDO mu
#
           DO a1
#
              Taaii(a1,a,i,i1) = 0.0
#
              DO mu
#
                 T1aaii(a1,a,i,i1) = Lxaii(mu,a,i,i1)*ca(mu,a1)
                 Taaii(a1,a,i,i1) += T1aaii(a1,a,i,i1)
#
              ENDDO mu
#
              PREPARE Vaaii(a1,a,i,i1) = Taaii(a1,a,i,i1)
#
           ENDDO a1
#
           deallocate Lxaii(*,a,i,i1)
#
           DO a1
#
              Tiaai(i,a1,a,i1) = 0.0
#
              DO mu
#
                 T1iaai(i,a1,a,i1) = Lixai(i,mu,a,i1)*ca(mu,a1)
                 Tiaai(i,a1,a,i1) += T1iaai(i,a1,a,i1)
#
              ENDDO mu
#
              PREPARE Viaai(i,a1,a,i1) = Tiaai(i,a1,a,i1)
#
           ENDDO a1
#
           deallocate Lixai(i,*,a,i1)
#
     ENDPARDO a, i, i1
#
     PARDO a, a1, i
#
           allocate L1xaai(*,a,a1,i)
#
           DO mu
#
              REQUEST Vxaai(mu,a,a1,i) i
#
              L1xaai(mu,a,a1,i)  = Vxaai(mu,a,a1,i)
#
           ENDDO mu
#
           DO a2
#
              Taaai(a2,a,a1,i) = 0.0
#
              DO mu
#
                 T1aaai(a2,a,a1,i) = L1xaai(mu,a,a1,i)*ca(mu,a2)
                 Taaai(a2,a,a1,i) += T1aaai(a2,a,a1,i)
#
              ENDDO mu
#
              T1aaai(a1,a,a2,i)           = Taaai(a2,a,a1,i)
              T1aaai(a1,a,a2,i)          *= -1.0
              PREPARE VSaaai(a2,a,a1,i)  += Taaai(a2,a,a1,i)
              PREPARE VSaaai(a1,a,a2,i)  += T1aaai(a1,a,a2,i)
#
           ENDDO a2
#
           deallocate L1xaai(*,a,a1,i)
#
     ENDPARDO a, a1, i
#
     PARDO q, j, j1
#
           allocate Lxjqj(*,j,q,j1)
#
           DO mu
#
              REQUEST Vxjqj(mu,j,q,j1) j1
              REQUEST Vxjqj(mu,j1,q,j) j1
              Lxjqj(mu,j,q,j1)  = Vxjqj(mu,j,q,j1)
              Txjqj(mu,j,q,j1)  = Vxjqj(mu,j1,q,j)
              Lxjqj(mu,j,q,j1) -= Txjqj(mu,j,q,j1)
#
           ENDDO mu
#
           DO q1
#
              Tqjqj(q1,j,q,j1) = 0.0
#
              DO mu
#
                 T1qjqj(q1,j,q,j1)      = Lxjqj(mu,j,q,j1)*cb(mu,q1)
                 Tqjqj(q1,j,q,j1)      += T1qjqj(q1,j,q,j1)
#
              ENDDO mu
#
              PREPARE VSqjqj(q1,j,q,j1) = Tqjqj(q1,j,q,j1)
#
           ENDDO q1
#
           deallocate Lxjqj(*,j,q,j1)
#
     ENDPARDO q, j, j1
#
     PARDO b, j, j1
#
           allocate Lxbjj(*,b,j,j1)
           allocate Ljxbj(j,*,b,j1)
#
           DO mu
#
              REQUEST Vxbjj(mu,b,j,j1) j1
              REQUEST Vjxbj(j,mu,b,j1) j1
#
              Lxbjj(mu,b,j,j1) = Vxbjj(mu,b,j,j1)
              Ljxbj(j,mu,b,j1) = Vjxbj(j,mu,b,j1)
#
#
           ENDDO mu
#
           DO b1
#
              Tbbjj(b1,b,j,j1) = 0.0
#
              DO mu
#
                 T1bbjj(b1,b,j,j1) = Lxbjj(mu,b,j,j1)*cb(mu,b1)
                 Tbbjj(b1,b,j,j1) += T1bbjj(b1,b,j,j1)
#
              ENDDO mu
#
              PREPARE Vbbjj(b1,b,j,j1) = Tbbjj(b1,b,j,j1)
#
           ENDDO b1
#
           deallocate Lxbjj(*,b,j,j1)
#
           DO b1
#
              Tjbbj(j,b1,b,j1) = 0.0
#
              DO mu
#
                 T1jbbj(j,b1,b,j1) = Ljxbj(j,mu,b,j1)*cb(mu,b1)
                 Tjbbj(j,b1,b,j1) += T1jbbj(j,b1,b,j1)
#
              ENDDO mu
#
              PREPARE Vjbbj(j,b1,b,j1) = Tjbbj(j,b1,b,j1)
#
           ENDDO b1
#
           deallocate Ljxbj(j,*,b,j1)
#
     ENDPARDO b, j, j1
#
     PARDO b, b1, j
#
           allocate L1xbbj(*,b,b1,j)
#
           DO mu
#
              REQUEST Vxbbj(mu,b,b1,j) j
#
              L1xbbj(mu,b,b1,j)  = Vxbbj(mu,b,b1,j)
#
           ENDDO mu
#
           DO b2
#
              Tbbbj(b2,b,b1,j) = 0.0
#
              DO mu
#
                 T1bbbj(b2,b,b1,j) = L1xbbj(mu,b,b1,j)*cb(mu,b2)
                 Tbbbj(b2,b,b1,j) += T1bbbj(b2,b,b1,j)
#
              ENDDO mu
#
              T1bbbj(b1,b,b2,j)           = Tbbbj(b2,b,b1,j)
              T1bbbj(b1,b,b2,j)          *= -1.0
              PREPARE VSbbbj(b2,b,b1,j)  += Tbbbj(b2,b,b1,j)
              PREPARE VSbbbj(b1,b,b2,j)  += T1bbbj(b1,b,b2,j)
#
           ENDDO b2
#
           deallocate L1xbbj(*,b,b1,j)
#
     ENDPARDO b, b1, j
#
     PARDO b, i, i1
#
           allocate Lxbii(*,b,i,i1)
#
           DO mu
#
              REQUEST Vxbii(mu,b,i,i1) i1
              Lxbii(mu,b,i,i1) = Vxbii(mu,b,i,i1)
#
           ENDDO mu
#
           DO b1
#
              Tbbii(b1,b,i,i1) = 0.0
#
              DO mu
#
                 T1bbii(b1,b,i,i1) = Lxbii(mu,b,i,i1)*cb(mu,b1)
                 Tbbii(b1,b,i,i1) += T1bbii(b1,b,i,i1)
#
              ENDDO mu
#
              PREPARE Vbbii(b1,b,i,i1) = Tbbii(b1,b,i,i1)
#
           ENDDO b1
#
           deallocate Lxbii(*,b,i,i1)
     ENDPARDO b, i, i1
#
     PARDO b, i, i1
#
           allocate Lxbii(*,b,i,i1)
#
           DO mu
#
              REQUEST Vxbii(mu,b,i,i1) i1
              Lxbii(mu,b,i,i1) = Vxbii(mu,b,i,i1)
#
           ENDDO mu
#
           DO j
#
              Tjbii(j,b,i,i1) = 0.0
#
              DO mu
#
                 T1jbii(j,b,i,i1) = Lxbii(mu,b,i,i1)*cb(mu,j)
                 Tjbii(j,b,i,i1) += T1jbii(j,b,i,i1)
#
              ENDDO mu
#
              PREPARE Vjbii(j,b,i,i1) = Tjbii(j,b,i,i1)
#
           ENDDO j
#
           deallocate Lxbii(*,b,i,i1)
#
     ENDPARDO b, i, i1
#
     PARDO b, a, i
#
           allocate Lxbai(*,b,a,i)
#
           DO mu
#
              REQUEST Vxbai(mu,b,a,i) i
              Lxbai(mu,b,a,i) = Vxbai(mu,b,a,i)
#
           ENDDO mu
#
           DO b1
#
              Tbbai(b1,b,a,i) = 0.0
#
              DO mu
#
                 T1bbai(b1,b,a,i) = Lxbai(mu,b,a,i)*cb(mu,b1)
                 Tbbai(b1,b,a,i) += T1bbai(b1,b,a,i)
#
              ENDDO mu
#
              PREPARE Vbbai(b1,b,a,i) = Tbbai(b1,b,a,i)
#
           ENDDO b1
#
           deallocate Lxbai(*,b,a,i)
#
     ENDPARDO b, a, i
#
     PARDO q, i, j
#
           allocate Lxiqj(*,i,q,j)
#
           DO mu
#
              REQUEST Vxiqj(mu,i,q,j) j
              Lxiqj(mu,i,q,j) = Vxiqj(mu,i,q,j)
#
           ENDDO mu
#
           DO p
#
              Tpiqj(p,i,q,j) = 0.0
#
              DO mu
#
                 T1piqj(p,i,q,j) = Lxiqj(mu,i,q,j)*ca(mu,p)
                 Tpiqj(p,i,q,j) += T1piqj(p,i,q,j)
#
              ENDDO mu
#
              PREPARE Vpiqj(p,i,q,j) = Tpiqj(p,i,q,j)
#
           ENDDO p
#
           deallocate Lxiqj(*,i,q,j)
#
     ENDPARDO q, i, j
#
     PARDO a, j, j1
#
           allocate Lxajj(*,a,j,j1)
#
           DO mu
#
              REQUEST Vxajj(mu,a,j,j1) j1
              Lxajj(mu,a,j,j1) = Vxajj(mu,a,j,j1)
           ENDDO mu
#
           DO a1
#
              Taajj(a1,a,j,j1) = 0.0
#
              DO mu
#
                 T1aajj(a1,a,j,j1) = Lxajj(mu,a,j,j1)*ca(mu,a1)
                 Taajj(a1,a,j,j1) += T1aajj(a1,a,j,j1)
#
              ENDDO mu
#
              PREPARE Vaajj(a1,a,j,j1) = Taajj(a1,a,j,j1)
#
           ENDDO a1
#
           deallocate Lxajj(*,a,j,j1)
#
     ENDPARDO a, j, j1
#
     PARDO b, i, j
#
           allocate Lixbj(i,*,b,j)
#
           DO mu
#
              REQUEST Vixbj(i,mu,b,j) j
              Lixbj(i,mu,b,j) = Vixbj(i,mu,b,j)
#
           ENDDO mu
#
           DO a
#
              Tiabj(i,a,b,j) = 0.0
#
              DO mu
#
                 T1iabj(i,a,b,j) = Lixbj(i,mu,b,j)*ca(mu,a)
                 Tiabj(i,a,b,j) += T1iabj(i,a,b,j)
#
              ENDDO mu
#
              PREPARE Viabj(i,a,b,j) += Tiabj(i,a,b,j)
#
           ENDDO a
#
           deallocate Lixbj(i,*,b,j)
#
     ENDPARDO b, i, j
#
     PARDO a, b, j
#
           allocate Lxabj(*,a,b,j)
#
           DO mu
#
              REQUEST Vxabj(mu,a,b,j) j
              Lxabj(mu,a,b,j) = Vxabj(mu,a,b,j)
#
           ENDDO mu
#
           DO a1
#
              Taabj(a1,a,b,j) = 0.0
#
              DO mu
#
                 T1aabj(a1,a,b,j) = Lxabj(mu,a,b,j)*ca(mu,a1)
                 Taabj(a1,a,b,j) += T1aabj(a1,a,b,j)
#
              ENDDO mu
#
              PREPARE Vaabj(a1,a,b,j) = Taabj(a1,a,b,j)
#
           ENDDO a1
#
           deallocate Lxabj(*,a,b,j)
#
     ENDPARDO a, b, j
#
#    ------------------------------------------------------------------------
#
     ENDPROC TRAN_TRAN4
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
     PROC TRAN_UHF
#
#        CALL COMP_INTEGRALS # --> compute integrals and put into served array
         CALL TRAN_TRAN2     # --> performs the first two stages of the
                             #     two-electron integral transformation.
         CALL TRAN_TRAN3     # --> performs the third stage
                             #     two-electron integral transformation.
         CALL TRAN_TRAN4     # --> performs the fourth stage of the
                             #     two-electron integral transformation.
#
     ENDPROC TRAN_UHF
#
#    ------------------------------------------------------------------------
#
     PROC IGUESS_UHF  
# 
#    ------------------------------------------------------------------------ 
#
     PARDO a, a1, i, i1 
#
           REQUEST VSpipi(a,i,a1,i1) i1  
#
           Taiai(a,i,a1,i1)            = VSpipi(a,i,a1,i1)
           execute energy_denominator    Taiai 
           PREPARE T2old_aa(a,i,a1,i1) = Taiai(a,i,a1,i1)  
           PREPARE D0aiai(a,i,a1,i1) = Taiai(a,i,a1,i1)  
#
     ENDPARDO a, a1, i, i1  
#
     PARDO b, b1, j, j1 
#
           REQUEST VSqjqj(b,j,b1,j1) j1  
#
           Tbjbj(b,j,b1,j1)            = VSqjqj(b,j,b1,j1)  
           execute energy_denominator    Tbjbj 
           PREPARE T2old_bb(b,j,b1,j1) = Tbjbj(b,j,b1,j1)  
           PREPARE D0bjbj(b,j,b1,j1) = Tbjbj(b,j,b1,j1)  
#
     ENDPARDO b, b1, j, j1 
#
     PARDO a, b, i, j 
#
           REQUEST Vpiqj(a,i,b,j) j  
#
           Taibj(a,i,b,j)            = Vpiqj(a,i,b,j)
           execute energy_denominator  Taibj 
           PREPARE T2old_ab(a,i,b,j) = Taibj(a,i,b,j)  
           PREPARE D0aibj(a,i,b,j) = Taibj(a,i,b,j)  
#
     ENDPARDO a, b, i, j 
#
     PARDO a, i
#
           tai(a,i) = 0.0
           PUT t1a_old(a,i) = tai(a,i)
           PUT D0ai(a,i) = tai(a,i)
#
     ENDPARDO a, i
#
     PARDO b, j
#
           tbj(b,j) = 0.0
           PUT t1b_old(b,j) = tbj(b,j)
           PUT D0bj(b,j) = tbj(b,j)
#
     ENDPARDO b, j
#
#    ------------------------------------------------------------------------ 
# 
     ENDPROC IGUESS_UHF 
# 
#    ------------------------------------------------------------------------ 
#
      PROC TAUAA 
#     ----------
#
      PARDO a, i, a1, i1 
#
            REQUEST T2old_aa(a,i,a1,i1) i1  
            tmp1_aiai(a,i,a1,i1)      = T2old_aa(a,i,a1,i1) 

            PREPARE Tau_aa(a,i,a1,i1)  = tmp1_aiai(a,i,a1,i1)  
#
      ENDPARDO a, i, a1, i1 
#
      ENDPROC TAUAA 
#     ------------- 
# 
#    ------------------------------------------------------------------------ 
#
#    ------------------------------------------------------------------------ 
#
      PROC TAUBB 
#     ----------
#
      PARDO b, j, b1, j1 
#
            REQUEST T2old_bb(b,j,b1,j1) j1  

            tmp1_bjbj(b,j,b1,j1)      = T2old_bb(b,j,b1,j1) 

            PREPARE Tau_bb(b,j,b1,j1)  = tmp1_bjbj(b,j,b1,j1)  
#
      ENDPARDO b, j, b1, j1 
#
      ENDPROC TAUBB 
#     ------------- 
#
#    ------------------------------------------------------------------------ 
#
      PROC TAUAB 
#     ----------
#
      PARDO a, i, b, j 
#
            REQUEST T2old_ab(a,i,b,j) j  
            tmp1_aibj(a,i,b,j)      = T2old_ab(a,i,b,j) 

            PREPARE Tau_ab(a,i,b,j)  = tmp1_aibj(a,i,b,j)  
#
      ENDPARDO a, i, b, j 
#
      ENDPROC TAUAB 
#     ------------- 
#
#    ------------------------------------------------------------------------ 
#
      PROC TAU 
#
           CALL TAUAA 
           CALL TAUBB 
           CALL TAUAB 
#
      ENDPROC TAU 

#    ------------------------------------------------------------------------ 
#
      PROC FAEA
#     ----------
#
      DO a
      DO a1
         GET  Fae_a_ab(a,a1) 
         Taa(a,a1) = Fae_a_ab(a,a1)  

         PUT Fae_a(a,a1) = Taa(a,a1)
      ENDDO a1
      ENDDO a 
#
      ENDPROC FAEA
#     -------------
#
#    ------------------------------------------------------------------------ 
#
      PROC FAEB
#     ----------
      DO b
      DO b1
         GET  Fae_b_ab(b,b1)
         Tbb(b,b1) = Fae_b_ab(b,b1)
         PUT Fae_b(b,b1) = Tbb(b,b1)
      ENDDO b1
      ENDDO b

      ENDPROC FAEB
#     -------------
#
#    ------------------------------------------------------------------------ 
#
      PROC FAE
#     --------
         CALL FAEA 
         CALL FAEB 
      ENDPROC FAE
#     ----------- 
#
#    ------------------------------------------------------------------------ 
#
      PROC FMEA
#     ----------
      DO i
      DO a
         GET Fme_a_ia(i,a)
         Tme_a(i,a) = Fme_a_ia(i,a)
         PUT Fme_a(i,a) = Tme_a(i,a)
      ENDDO a
      ENDDO i
#
      ENDPROC FMEA
#     -------------
#
#    ------------------------------------------------------------------------ 
#
      PROC FMEB
#     ----------
      DO j
      DO b
         GET Fme_b_ia(j,b)
         Tme_b(j,b) = Fme_b_ia(j,b)
         PUT Fme_b(j,b) = Tme_b(j,b)
      ENDDO b
      ENDDO j

      ENDPROC FMEB
#     -------------
#
#    ------------------------------------------------------------------------ 
#
      PROC FME
#     ----------
         CALL FMEA
         CALL FMEB
      ENDPROC FME
#     ------------
#
#    ------------------------------------------------------------------------ 
#
      PROC FMIA
#     ----------
      DO i
      DO i1
         GET Fmi_a_ij(i,i1)
         Tii(i,i1) = Fmi_a_ij(i,i1)
         PUT Fmi_a(i,i1) = Tii(i,i1)
      ENDDO i1
      ENDDO i

      ENDPROC FMIA
#     -------------
#
#    ------------------------------------------------------------------------ 
#
      PROC FMIB
#     ----------
      DO j
      DO j1
         GET Fmi_b_ij(j,j1)
         Tjj(j,j1) = Fmi_b_ij(j,j1)
        
         PUT Fmi_b(j,j1) = Tjj(j,j1)
      ENDDO j1
      ENDDO j

      ENDPROC FMIB
#     -------------
#
#    ------------------------------------------------------------------------ 
#
      PROC FMI 
#     ----------
         CALL FMIA 
         CALL FMIB 
      ENDPROC FMI 
#     ----------- 
#
# ---------------------------------------------------------------------------- 
#
# In the procedure T1ANEW all contributions to the singles amplitude t1a 
# are computed. 
#
      PROC T1ANEW 
#     -----------
#
      PARDO a, i 

            IF NONHF == 1.0
               GET Fme_a_ia(i,a)
               t1ai(a,i) = Fme_a_ia(i,a)
               tai(a,i) = t1ai(a,i)
            ELSE
               tai(a,i) = 0.0
            ENDIF
#
            DO i1 
#
               GET t1a_old(a,i1) 
               GET Fmi_a(i1,i) 
#
               t1ai(a,i) = t1a_old(a,i1)*Fmi_a(i1,i)
               tai(a,i) -= t1ai(a,i) 
#
            ENDDO i1  
#
            DO b 
            DO j 
#
               REQUEST T2old_ab(a,i,b,j) j 
               REQUEST Viabj(i,a,b,j) j  
               GET Fme_b(j,b) 
               GET t1b_old(b,j) 
#
               t1ai(a,i) = T2old_ab(a,i,b,j)*Fme_b(j,b) 
               tai(a,i) += t1ai(a,i) 
#
               t2ai(a,i)  = Viabj(i,a,b,j)*t1b_old(b,j) 
               tai(a,i) += t2ai(a,i) 
#
            ENDDO j 
            ENDDO b 
# 
            DO a1 
#
               GET t1a_old(a1,i) 
               GET Fae_a(a,a1) 
#
               t1ai(a,i) = t1a_old(a1,i)*Fae_a(a,a1) 
               tai(a,i) += t1ai(a,i) 
#
               DO i1 
#
                  REQUEST T2old_aa(a,i,a1,i1) i1  
                  REQUEST Vaaii(a,a1,i1,i) i  
                  REQUEST Viaai(i1,a1,a,i) i  
                  GET Fme_a(i1,a1) 
                  GET t1a_old(a1,i1) 
#
                  t1ai(a,i) = T2old_aa(a,i,a1,i1)*Fme_a(i1,a1)
                  tai(a,i) += t1ai(a,i) 
#
                  Tpppp(i1,a1,a,i)  = Vaaii(a,a1,i1,i)  
                  Tpppp(i1,a1,a,i) -= Viaai(i1,a1,a,i)  
#
                  t2ai(a,i) = Tpppp(i1,a1,a,i)*t1a_old(a1,i1) 
                  tai(a,i) -= t2ai(a,i) 
#
               ENDDO i1 
#
            ENDDO a1 
#
            PUT t1a_new(a,i) += tai(a,i) 
#
      ENDPARDO a, i 
#
      PARDO a1, a2, i1   
#
            allocate L4aiai(a1,*,a2,i1) 
#
            DO i 
#
               REQUEST T2old_aa(a1,i,a2,i1) i1 
               L4aiai(a1,i,a2,i1) = T2old_aa(a1,i,a2,i1) 
#
            ENDDO i  
#
            DO a 
#
               REQUEST VSaaai(a2,a,a1,i1)   i1 
# 
               DO i 
#
                  tai(a,i)  = VSaaai(a2,a,a1,i1)*L4aiai(a1,i,a2,i1) 
                  tai(a,i) *= -0.5 
#
                  PUT t1a_new(a,i) += tai(a,i) 
#
               ENDDO i 
#
            ENDDO a 
#
            deallocate L4aiai(a1,*,a2,i1) 
#
      ENDPARDO a1, a2, i1  
#
      PARDO a1, i1, i2  
#
            allocate L1aiii(a1,i2,*,i1) 
#
            DO i 
#
               REQUEST VSpipi(a1,i2,i,i1) i1 
               L1aiii(a1,i2,i,i1) = VSpipi(a1,i2,i,i1) 
#
            ENDDO i 
#
            DO a 
#
               REQUEST T2old_aa(a,i1,a1,i2) i1 
# 
               DO i 
#
                  tai(a,i)  = L1aiii(a1,i2,i,i1)*T2old_aa(a,i1,a1,i2) 
                  tai(a,i) *= -0.5 
#
                  PUT t1a_new(a,i) += tai(a,i) 
#
               ENDDO i 
#
            ENDDO a 
#
            deallocate L1aiii(a1,i2,*,i1) 
#
      ENDPARDO a1, i1, i2  
#
      PARDO a1, b, j  
#
            allocate L1aibj(a1,*,b,j) 
#
            DO i 
#
               REQUEST T2old_ab(a1,i,b,j) j 
               L1aibj(a1,i,b,j) = T2old_ab(a1,i,b,j) 
#
            ENDDO i 
#
            DO a 
#
               REQUEST Vaabj(a1,a,b,j) j 
#
               DO i  
#
                  tai(a,i)  = Vaabj(a1,a,b,j)*L1aibj(a1,i,b,j) 
#
                  PUT t1a_new(a,i) += tai(a,i) 
#
               ENDDO i 
#
            ENDDO a 
#
            deallocate L1aibj(a1,*,b,j) 
#
      ENDPARDO a1, b, j  
#
      PARDO b, j, i1  
#
            allocate L1iibj(*,i1,b,j) 
#
            DO i 
#
               REQUEST Vpiqj(i,i1,b,j) j 
               L1iibj(i,i1,b,j) = Vpiqj(i,i1,b,j) 
#
            ENDDO i 
#
            DO a 
#
               REQUEST T2old_ab(a,i1,b,j) j  
#
               DO i 
#
                  tai(a,i)  = L1iibj(i,i1,b,j)*T2old_ab(a,i1,b,j) 
                  tai(a,i) *= -1.0 
#
                  PUT t1a_new(a,i) += tai(a,i) 
#
               ENDDO i 
#
            ENDDO a 
#
            deallocate L1iibj(*,i1,b,j) 
#
      ENDPARDO b, j, i1  
#
      ENDPROC T1ANEW 
#     --------------
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
# In the procedure T1BNEW all contributions to the singles amplitude t1a 
# are computed. 
#
      PROC T1BNEW 
#     -----------
#
      PARDO b, j 
#
            IF NONHF == 1.0
               GET Fme_b_ia(j,b)
               t1bj(b,j) = Fme_b_ia(j,b)
               tbj(b,j) = t1bj(b,j)
            ELSE
               tbj(b,j) = 0.0 
            ENDIF

            DO j1 
#
               GET t1b_old(b,j1) 
               GET Fmi_b(j1,j) 
#
               t1bj(b,j) = t1b_old(b,j1)*Fmi_b(j1,j)
               tbj(b,j) -= t1bj(b,j) 
#
            ENDDO j1  
#
            DO a 
            DO i 
#
               REQUEST T2old_ab(a,i,b,j) j 
               REQUEST Viabj(i,a,b,j) j  
               GET Fme_a(i,a) 
               GET t1a_old(a,i) 
#
               t1bj(b,j) = T2old_ab(a,i,b,j)*Fme_a(i,a) 
               tbj(b,j) += t1bj(b,j) 
#
               t2bj(b,j)  = Viabj(i,a,b,j)*t1a_old(a,i) 
               tbj(b,j) += t2bj(b,j) 
#
            ENDDO i 
            ENDDO a 
# 
            DO b1 
#
               GET t1b_old(b1,j) 
               GET Fae_b(b,b1) 
#
               t1bj(b,j) = t1b_old(b1,j)*Fae_b(b,b1) 
               tbj(b,j) += t1bj(b,j) 
#
               DO j1 
#
                  REQUEST T2old_bb(b,j,b1,j1) j1  
                  REQUEST Vbbjj(b,b1,j1,j) j  
                  REQUEST Vjbbj(j1,b1,b,j) j  
                  GET Fme_b(j1,b1) 
                  GET t1b_old(b1,j1) 
#
                  t1bj(b,j) = T2old_bb(b,j,b1,j1)*Fme_b(j1,b1)
                  tbj(b,j) += t1bj(b,j) 
#
                  Tqqqq(j1,b1,b,j)  = Vbbjj(b,b1,j1,j)  
                  Tqqqq(j1,b1,b,j) -= Vjbbj(j1,b1,b,j)  
#
                  t2bj(b,j) = Tqqqq(j1,b1,b,j)*t1b_old(b1,j1) 
                  tbj(b,j) -= t2bj(b,j) 
#
               ENDDO j1 
#
            ENDDO b1 
#
            PUT t1b_new(b,j) += tbj(b,j) 
#
      ENDPARDO b, j 
#
      PARDO b1, b2, j1   
#
            allocate L4bjbj(b1,*,b2,j1) 
#
            DO j 
#
               REQUEST T2old_bb(b1,j,b2,j1) j1 
               L4bjbj(b1,j,b2,j1) = T2old_bb(b1,j,b2,j1) 
#
            ENDDO j  
#
            DO b 
#
               REQUEST VSbbbj(b2,b,b1,j1)   j1 
# 
               DO j 
#
                  tbj(b,j)  = VSbbbj(b2,b,b1,j1)*L4bjbj(b1,j,b2,j1) 
                  tbj(b,j) *= -0.5 
#
                  PUT t1b_new(b,j) += tbj(b,j) 
#
               ENDDO j 
#
            ENDDO b 
#
            deallocate L4bjbj(b1,*,b2,j1) 
#
      ENDPARDO b1, b2, j1  
#
      PARDO b1, j1, j2  
#
            allocate L1bjjj(b1,j2,*,j1) 
#
            DO j 
#
               REQUEST VSqjqj(b1,j2,j,j1) j1 
               L1bjjj(b1,j2,j,j1) = VSqjqj(b1,j2,j,j1) 
#
            ENDDO j 
#
            DO b 
#
               REQUEST T2old_bb(b,j1,b1,j2) j1 
# 
               DO j 
#
                  tbj(b,j)  = L1bjjj(b1,j2,j,j1)*T2old_bb(b,j1,b1,j2) 
                  tbj(b,j) *= -0.5 
#
                  PUT t1b_new(b,j) += tbj(b,j) 
#
               ENDDO j 
#
            ENDDO b 
#
            deallocate L1bjjj(b1,j2,*,j1) 
#
      ENDPARDO b1, j1, j2  
#
      PARDO b1, a, i  
#
            allocate L4aibj(a,i,b1,*) 
#
            DO j 
#
               REQUEST T2old_ab(a,i,b1,j) j 
               L4aibj(a,i,b1,j) = T2old_ab(a,i,b1,j) 
#
            ENDDO j 
#
            DO b 
#
               REQUEST Vbbai(b1,b,a,i) i 
#
               DO j  
#
                  tbj(b,j)  = Vbbai(b1,b,a,i)*L4aibj(a,i,b1,j)  
#
                  PUT t1b_new(b,j) += tbj(b,j) 
#
               ENDDO j 
#
            ENDDO b 
#
            deallocate L4aibj(a,i,b1,*) 
#
      ENDPARDO b1, a, i  
#
      PARDO a, i, j1  
#
            allocate Ljjai(a,i,*,j1) 
#
            DO j 
#
               REQUEST Vpiqj(a,i,j,j1) j 
               Ljjai(a,i,j,j1) = Vpiqj(a,i,j,j1) 
#
            ENDDO j 
#
            DO b 
#
               REQUEST T2old_ab(a,i,b,j1) j1  
#
               DO j 
#
                  tbj(b,j)  = Ljjai(a,i,j,j1)*T2old_ab(a,i,b,j1)  
                  tbj(b,j) *= -1.0 
#
                  PUT t1b_new(b,j) += tbj(b,j) 
#
               ENDDO j 
#
            ENDDO b 
#
            deallocate Ljjai(a,i,*,j1)  
#
      ENDPARDO a, i, j1  
#
      ENDPROC T1BNEW 
#     --------------
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
# 
      PROC WminjAA
#     ------------
#
      create Wminj_aa
      execute sip_barrier
      PARDO i, i1, i2, i3
#
            REQUEST VSpipi(i2,i,i3,i1) i1
            Tiiii(i2,i,i3,i1) = VSpipi(i2,i,i3,i1)
            PUT Wminj_aa(i2,i,i3,i1) += Tiiii(i2,i,i3,i1)
      ENDPARDO i, i1, i2, i3
#
      execute sip_barrier
#
      PARDO i, i1, a, a1
#
            Taiai(a,i,a1,i1) = 0.0
#
            DO i2
            DO i3
#
               REQUEST Tau_aa(a,i2,a1,i3) i3
               GET Wminj_aa(i2,i,i3,i1)
#
               T1aiai(a,i,a1,i1) = Tau_aa(a,i2,a1,i3)*Wminj_aa(i2,i,i3,i1)
               Taiai(a,i,a1,i1) += T1aiai(a,i,a1,i1)
#
            ENDDO i3
            ENDDO i2
#
            Taiai(a,i,a1,i1)            *= 0.5
            PREPARE T2new_aa(a,i,a1,i1) += Taiai(a,i,a1,i1)
#
      ENDPARDO i, i1, a, a1
      execute sip_barrier
      delete Wminj_aa
      ENDPROC WminjAA
#     --------------- 
#
# ----------------------------------------------------------------------------  
#
      PROC WminjBB
#     ------------
#
      create Wminj_bb
      execute sip_barrier
      PARDO j, j1, j2, j3
#
            REQUEST VSqjqj(j2,j,j3,j1) j1
            Tjjjj(j2,j,j3,j1) = VSqjqj(j2,j,j3,j1)
            PUT Wminj_bb(j2,j,j3,j1) += Tjjjj(j2,j,j3,j1)
      ENDPARDO j, j1, j2, j3
#
      execute sip_barrier
#
      PARDO j, j1, b, b1
#
            Tbjbj(b,j,b1,j1) = 0.0
#
            DO j2
            DO j3
#
               REQUEST Tau_bb(b,j2,b1,j3) j3
               GET Wminj_bb(j2,j,j3,j1)
#
               T1bjbj(b,j,b1,j1) = Tau_bb(b,j2,b1,j3)*Wminj_bb(j2,j,j3,j1)
               Tbjbj(b,j,b1,j1) += T1bjbj(b,j,b1,j1)
#
            ENDDO j3
            ENDDO j2
#
            Tbjbj(b,j,b1,j1)            *= 0.5
            PREPARE T2new_bb(b,j,b1,j1) += Tbjbj(b,j,b1,j1)
#
      ENDPARDO j, j1, b, b1
      execute sip_barrier
      delete Wminj_bb

      ENDPROC WminjBB
#     --------------- 
#
# -----------------------------------------------------------------------  
#
      PROC WminjAB
#     ------------
#
      create Wminj_ab
      execute sip_barrier
      PARDO i, i1, j, j1
#
            REQUEST Vpiqj(i1,i,j1,j) j
            Tiijj(i1,i,j1,j) = Vpiqj(i1,i,j1,j)
            PUT Wminj_ab(i1,i,j1,j) += Tiijj(i1,i,j1,j)
      ENDPARDO i, i1, j, j1

      execute sip_barrier

      PARDO i, j, a, b
#
            Taibj(a,i,b,j) = 0.0
#
            DO i1
            DO j1
#
               REQUEST Tau_ab(a,i1,b,j1) j1
               GET     Wminj_ab(i1,i,j1,j)
#
               T1aibj(a,i,b,j) = Tau_ab(a,i1,b,j1)*Wminj_ab(i1,i,j1,j)
               Taibj(a,i,b,j) += T1aibj(a,i,b,j)
#
#
            ENDDO j1
            ENDDO i1
#
            PREPARE T2new_ab(a,i,b,j) += Taibj(a,i,b,j)
#
      ENDPARDO i, j, a, b
      execute sip_barrier
      delete Wminj_ab

      ENDPROC WminjAB
#     --------------- 
# 
      PROC WMINJ 
#
           CALL WminjAA 
#bgn_debug
#     execute server_barrier
#     sum=0.0
#     suma=0.0
#        pardo a, i, a1,i1
#        REQUEST T2NEW_aa(a,i,a1,i1) i1
#        tmp = T2NEW_aa(a,i,a1,i1)* T2NEW_aa(a,i,a1,i1)
#        sum += tmp
#        endpardo a, i, a1, i1
#        execute server_barrier
#        collective suma += sum
#        execute print_scalar suma
#end_debug
           CALL WminjAB 
           CALL WminjBB 
#
      ENDPROC WMINJ 
# 
# ----------------------------------------------------------------------------
#
# In PROCEDURE T2NEWAA the new amplitudes T2new_aa are computed.
#
# ----------------------------------------------------------------------------
#
      PROC T2NEWAA    
#     ------------
#
      PARDO a, i, i1
#
#           allocate arrays containing two-particle contracted arrays 
#           --------------------------------------------------------- 
            allocate Liiai(*,i,a,i1) 
            allocate Laiai(a,i,*,i1) 
#
#           fill in allocated arrays 
#           ------------------------ 
            DO i2 
# 
               REQUEST VSpipi(i2,i,a,i1) i1 
               Liiai(i2,i,a,i1) = VSpipi(i2,i,a,i1) 
#
            ENDDO i2 
#
            DO a2 
#
               REQUEST T2old_aa(a,i,a2,i1) i1
               Laiai(a,i,a2,i1) = T2old_aa(a,i,a2,i1) 
#
            ENDDO a2 
#
#           Start computation 
#           ----------------- 
            DO a1 
#
               REQUEST VSpipi(a,i,a1,i1) i1
#
               Taiai(a,i,a1,i1)   = VSpipi(a,i,a1,i1)
               TYaiai(a1,i,a,i1)  = 0.0
#
               DO i2
#
                  GET t1a_old(a1,i2)
#
                  T1aiai(a1,i,a,i1) = Liiai(i2,i,a,i1)*t1a_old(a1,i2)
                  T2aiai(a,i,a1,i1) = T1aiai(a1,i,a,i1)
#
                  Taiai(a,i,a1,i1)  += T2aiai(a,i,a1,i1)
                  TYaiai(a1,i,a,i1) -= T1aiai(a1,i,a,i1)
#
               ENDDO i2
#
               DO a2
#
                   GET Fae_a(a1,a2)
                   tmp_aa(a1,a2) = Fae_a(a1,a2)
#
                   T1aiai(a,i,a1,i1) = Laiai(a,i,a2,i1)*tmp_aa(a1,a2)
                   T2aiai(a1,i,a,i1) = T1aiai(a,i,a1,i1)

                   Taiai(a,i,a1,i1) += T1aiai(a,i,a1,i1)
                   TYaiai(a1,i,a,i1)-= T2aiai(a1,i,a,i1)
#
               ENDDO a2
#
               PREPARE T2NEW_aa(a,i,a1,i1) += Taiai(a,i,a1,i1)
               PREPARE T2NEW_aa(a1,i,a,i1) += TYaiai(a1,i,a,i1)
#
            ENDDO a1 
#
#           remove allocated arrays 
#           ----------------------- 
            deallocate Liiai(*,i,a,i1) 
            deallocate Laiai(a,i,*,i1) 
#
      ENDPARDO a, i, i1
#
      PARDO a, i, a1 
#
#           allocate arrays containing two-particle contracted arrays 
#           --------------------------------------------------------- 
            allocate L1aiai(a,i,a1,*) 
            allocate Laaai(a,*,a1,i) 
#
#           fill in allocated arrays 
#           ------------------------ 
            DO i2 
#
               REQUEST T2old_aa(a,i,a1,i2) i2 
               L1aiai(a,i,a1,i2) = T2old_aa(a,i,a1,i2) 
#
            ENDDO i2 
#
            DO a2
#
               REQUEST VSaaai(a,a2,a1,i) i
               Laaai(a,a2,a1,i) = VSaaai(a,a2,a1,i) 
#
            ENDDO a2
#
#           Start computation 
#           ----------------- 
            DO i1 
#
               Taiai(a,i,a1,i1)   = 0.0  
               TY1aiai(a,i1,a1,i) = 0.0
#
               DO i2
#
                  GET Fmi_a(i2,i1)
                  tmp_ii(i2,i1) = Fmi_a(i2,i1)
#
                  T1aiai(a,i,a1,i1)  = L1aiai(a,i,a1,i2)*tmp_ii(i2,i1)
                  T2aiai(a,i1,a1,i)  = T1aiai(a,i,a1,i1)

                  Taiai(a,i,a1,i1)  -= T1aiai(a,i,a1,i1)
                  TY1aiai(a,i1,a1,i)+= T2aiai(a,i1,a1,i)
#
               ENDDO i2
#
               DO a2
#
                  GET t1a_old(a2,i1)
#
                  T1aiai(a,i1,a1,i) = Laaai(a,a2,a1,i)*t1a_old(a2,i1)
                  T2aiai(a,i,a1,i1) = T1aiai(a,i1,a1,i)
#
                  Taiai(a,i,a1,i1)  -= T2aiai(a,i,a1,i1)
                  TY1aiai(a,i1,a1,i)+= T1aiai(a,i1,a1,i)
#
               ENDDO a2
#
               PREPARE T2NEW_aa(a,i,a1,i1) += Taiai(a,i,a1,i1)
               PREPARE T2NEW_aa(a,i1,a1,i) += TY1aiai(a,i1,a1,i)
#
            ENDDO i1 
#
#           remove allocated arrays 
#           ----------------------- 
            deallocate L1aiai(a,i,a1,*) 
            deallocate Laaai(a,*,a1,i) 
#
      ENDPARDO a, i, a1 

#bgn_debug
#     execute server_barrier
#     sum=0.0
#     suma=0.0
#        pardo a, i, a1,i1
#        REQUEST T2NEW_aa(a,i,a1,i1) i1
#        tmp = T2NEW_aa(a,i,a1,i1)* T2NEW_aa(a,i,a1,i1)
#        sum += tmp
#        endpardo a, i, a1, i1
#        execute server_barrier
#        collective suma += sum
#        execute print_scalar suma
#end_debug

#
      ENDPROC T2NEWAA    
#     ---------------
#
# In PROCEDURE T2NEWBB the new amplitudes T2new_bb are computed. Contributions 
#
      PROC T2NEWBB    
#     ------------
#
      PARDO b, j, j1
#
#           allocate arrays containing two-particle contracted arrays 
#           --------------------------------------------------------- 
            allocate Ljjbj(*,j,b,j1) 
            allocate Lbjbj(b,j,*,j1) 
#
#           fill in allocated arrays 
#           ------------------------ 
            DO j2 
# 
               REQUEST VSqjqj(j2,j,b,j1) j1 
               Ljjbj(j2,j,b,j1) = VSqjqj(j2,j,b,j1) 
#
            ENDDO j2 
#
            DO b2 
#
               REQUEST T2old_bb(b,j,b2,j1) j1
               Lbjbj(b,j,b2,j1) = T2old_bb(b,j,b2,j1) 
#
            ENDDO b2 
#
#           Start computation 
#           ----------------- 
            DO b1 
#
               REQUEST VSqjqj(b,j,b1,j1) j1
#
               Tbjbj(b,j,b1,j1)   = VSqjqj(b,j,b1,j1)
               TYbjbj(b1,j,b,j1)  = 0.0
#
               DO j2
#
                  GET t1b_old(b1,j2)
#
                  T1bjbj(b1,j,b,j1) = Ljjbj(j2,j,b,j1)*t1b_old(b1,j2)
                  T2bjbj(b,j,b1,j1) = T1bjbj(b1,j,b,j1)
#
                  Tbjbj(b,j,b1,j1)  += T2bjbj(b,j,b1,j1)
                  TYbjbj(b1,j,b,j1) -= T1bjbj(b1,j,b,j1)
#
               ENDDO j2
#
               DO b2
#
                   GET Fae_b(b1,b2)
                   tmp_bb(b1,b2) = Fae_b(b1,b2)
#
                   T1bjbj(b,j,b1,j1) = Lbjbj(b,j,b2,j1)*tmp_bb(b1,b2)
                   T2bjbj(b1,j,b,j1) = T1bjbj(b,j,b1,j1)
                   Tbjbj(b,j,b1,j1) += T1bjbj(b,j,b1,j1)
                   TYbjbj(b1,j,b,j1)-= T2bjbj(b1,j,b,j1)
#
               ENDDO b2
#
               PREPARE T2NEW_bb(b,j,b1,j1) += Tbjbj(b,j,b1,j1)
               PREPARE T2NEW_bb(b1,j,b,j1) += TYbjbj(b1,j,b,j1)
#
            ENDDO b1 
#
#           remove allocated arrays 
#           ----------------------- 
            deallocate Ljjbj(*,j,b,j1) 
            deallocate Lbjbj(b,j,*,j1) 
#
      ENDPARDO b, j, j1
#
      PARDO b, j, b1 
#
#           allocate arrays containing two-particle contracted arrays 
#           --------------------------------------------------------- 
            allocate L1bjbj(b,j,b1,*) 
            allocate Lbbbj(b,*,b1,j) 
#
#           fill in allocated arrays 
#           ------------------------ 
            DO j2 
#
               REQUEST T2old_bb(b,j,b1,j2) j2 
               L1bjbj(b,j,b1,j2) = T2old_bb(b,j,b1,j2) 
#
            ENDDO j2 
#
            DO b2
#
               REQUEST VSbbbj(b,b2,b1,j) j
               Lbbbj(b,b2,b1,j) = VSbbbj(b,b2,b1,j) 
#
            ENDDO b2
#
#           Start computation 
#           ----------------- 
            DO j1 
#
               Tbjbj(b,j,b1,j1)   = 0.0  
               TY1bjbj(b,j1,b1,j) = 0.0
#
               DO j2
#
                  GET Fmi_b(j2,j1)
                  tmp_jj(j2,j1) = Fmi_b(j2,j1)
#
                  T1bjbj(b,j,b1,j1)  = L1bjbj(b,j,b1,j2)*tmp_jj(j2,j1)
                  T2bjbj(b,j1,b1,j)  = T1bjbj(b,j,b1,j1)

                  Tbjbj(b,j,b1,j1)  -= T1bjbj(b,j,b1,j1)
                  TY1bjbj(b,j1,b1,j)+= T2bjbj(b,j1,b1,j)
#
               ENDDO j2
#
               DO b2
#
                  GET t1b_old(b2,j1)
#
                  T1bjbj(b,j1,b1,j) = Lbbbj(b,b2,b1,j)*t1b_old(b2,j1)
                  T2bjbj(b,j,b1,j1) = T1bjbj(b,j1,b1,j)
#
                  Tbjbj(b,j,b1,j1)  -= T2bjbj(b,j,b1,j1)
                  TY1bjbj(b,j1,b1,j)+= T1bjbj(b,j1,b1,j)
#
               ENDDO b2
#
               PREPARE T2NEW_bb(b,j,b1,j1) += Tbjbj(b,j,b1,j1)
               PREPARE T2NEW_bb(b,j1,b1,j) += TY1bjbj(b,j1,b1,j)
#
            ENDDO j1 
#
#           remove allocated arrays 
#           ----------------------- 
            deallocate L1bjbj(b,j,b1,*) 
            deallocate Lbbbj(b,*,b1,j) 
#
      ENDPARDO b, j, b1 
#
      ENDPROC T2NEWBB    
#     ---------------
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# In PROCEDURE T2NEWAB the new amplitudes T2new_ab are computed.
#
      PROC T2NEWAB    
#     ------------
#
      PARDO a, i, j 
#
            allocate         Laijj(a,i,*,j) 
            allocate         Laibj(a,i,*,j) 
#
            DO j1 
#
               REQUEST Vpiqj(a,i,j1,j) j 
               Laijj(a,i,j1,j) = Vpiqj(a,i,j1,j) 
#
            ENDDO j1 
#
            DO b1 
#
               REQUEST T2old_ab(a,i,b1,j) j 
               Laibj(a,i,b1,j) = T2old_ab(a,i,b1,j) 
#
            ENDDO b1 
#
            DO b 
#
               REQUEST          Vpiqj(a,i,b,j) j 
               Taibj(a,i,b,j) = Vpiqj(a,i,b,j) 
#
               DO j1 
#
                  GET t1b_old(b,j1) 
#
                  T1aibj(a,i,b,j) = Laijj(a,i,j1,j)*t1b_old(b,j1) 
                  Taibj(a,i,b,j) -= T1aibj(a,i,b,j) 
#
               ENDDO j1 

               DO b1
#
                  GET Fae_b(b,b1)
                  tmp_bb(b,b1) = Fae_b(b,b1)
#
                  T1aibj(a,i,b,j) = Laibj(a,i,b1,j)*tmp_bb(b,b1)
                  Taibj(a,i,b,j) += T1aibj(a,i,b,j)
#
               ENDDO b1
#
               PREPARE T2NEW_AB(a,i,b,j) += Taibj(a,i,b,j)  
#
            ENDDO b 
#
            deallocate Laijj(a,i,*,j) 
            deallocate Laibj(a,i,*,j) 
#
      ENDPARDO a, i, j 
#
      PARDO i, b, j 
#
            allocate Liibj(*,i,b,j) 
            allocate L1aibj(*,i,b,j)   
#
            DO i1 
#
               REQUEST Vpiqj(i1,i,b,j) j 
               Liibj(i1,i,b,j) = Vpiqj(i1,i,b,j) 
#
            ENDDO i1 
#
            DO a1 
#
               REQUEST T2old_ab(a1,i,b,j) j 
               L1aibj(a1,i,b,j) = T2old_ab(a1,i,b,j) 
#
            ENDDO a1 
#
            DO a 
#
               Taibj(a,i,b,j) = 0.0  
#
               DO i1 
#
                  GET t1a_old(a,i1) 
#
                  T1aibj(a,i,b,j) = Liibj(i1,i,b,j)*t1a_old(a,i1) 
                  Taibj(a,i,b,j) -= T1aibj(a,i,b,j) 
#
               ENDDO i1 
#
               DO a1 
#
                  GET Fae_a(a,a1) 
                  tmp_aa(a,a1) = Fae_a(a,a1)    
#
                  T1aibj(a,i,b,j) = L1aibj(a1,i,b,j)*tmp_aa(a,a1)  
                  Taibj(a,i,b,j) += T1aibj(a,i,b,j) 
#
               ENDDO a1 
#
               PREPARE T2NEW_AB(a,i,b,j) += Taibj(a,i,b,j)  
#
            ENDDO a 
#
            deallocate Liibj(*,i,b,j) 
            deallocate L1aibj(*,i,b,j)   
#
      ENDPARDO i, b, j 
#
      PARDO a, i, b 
#
            allocate Lbbai(b,*,a,i) 
            allocate L2aibj(a,i,b,*) 
#
            DO b1 
#
               REQUEST Vbbai(b,b1,a,i) i 
               Lbbai(b,b1,a,i) = Vbbai(b,b1,a,i) 
#
            ENDDO b1 
#
            DO j2  
#
               REQUEST T2old_ab(a,i,b,j2) j2  
               L2aibj(a,i,b,j2) = T2old_ab(a,i,b,j2)  
#
            ENDDO j2  
#
            DO j 
#
               Taibj(a,i,b,j) = 0.0  
#
               DO b1 
#
                  GET t1b_old(b1,j) 
#
                  T1aibj(a,i,b,j) = Lbbai(b,b1,a,i)*t1b_old(b1,j)  
                  Taibj(a,i,b,j) += T1aibj(a,i,b,j) 
#
               ENDDO b1 
#
               DO j2 
#
                  GET Fmi_b(j2,j) 
                  tmp_jj(j2,j) = Fmi_b(j2,j)  
#
                  T1aibj(a,i,b,j) = L2aibj(a,i,b,j2)*tmp_jj(j2,j)  
                  Taibj(a,i,b,j) -= T1aibj(a,i,b,j) 
#
               ENDDO j2 
#
               PREPARE T2NEW_AB(a,i,b,j) += Taibj(a,i,b,j)  
#
            ENDDO j 
#
            deallocate Lbbai(b,*,a,i) 
            deallocate L2aibj(a,i,b,*) 
#
      ENDPARDO a, i, b  
#
      PARDO a, b, j 
#
            allocate L3aibj(a,*,b,j) 
            allocate Laabj(a,*,b,j) 
#
            DO i1 
#
               REQUEST T2old_ab(a,i1,b,j) j 
               L3aibj(a,i1,b,j) = T2old_ab(a,i1,b,j) 
#
            ENDDO i1 
#
            DO a1 
#
               REQUEST Vaabj(a,a1,b,j) j  
               Laabj(a,a1,b,j) = Vaabj(a,a1,b,j)  
#
            ENDDO a1 
#
            DO i 
#
               Taibj(a,i,b,j) = 0.0  
#
               DO i1 
#
                  GET Fmi_a(i1,i) 
                  tmp_ii(i1,i) = Fmi_a(i1,i) 
#
                  T1aibj(a,i,b,j) = L3aibj(a,i1,b,j)*tmp_ii(i1,i) 
                  Taibj(a,i,b,j) -= T1aibj(a,i,b,j) 
#
               ENDDO i1 
#
               DO a1 
#
                  GET t1a_old(a1,i) 
#
                  T1aibj(a,i,b,j) = Laabj(a,a1,b,j)*t1a_old(a1,i)  
                  Taibj(a,i,b,j) += T1aibj(a,i,b,j) 
#
               ENDDO a1 
#
               PREPARE T2NEW_AB(a,i,b,j) += Taibj(a,i,b,j)  
#
            ENDDO i 
#
            deallocate L3aibj(a,*,b,j) 
            deallocate Laabj(a,*,b,j) 
#
      ENDPARDO a, b, j 
#
      ENDPROC T2NEWAB    
#     ---------------
#
#    ------------------------------------------------------------------------ 
#
     PROC AOLADDER  
#
#    ------------------------------------------------------------------------ 
#
#    Form Half back transformed cluster arrays  
#    -----------------------------------------
#
     PARDO a1, i1, i   
#
           allocate LLaiai(*,i,a1,i1) 
#
           DO a  
#
              REQUEST Tau_aa(a, i,a1,i1) i1 
              LLaiai(a,i,a1,i1)  = Tau_aa(a, i,a1,i1) 
              LLaiai(a,i,a1,i1)  *= 2.0
#
           ENDDO a  
#
           DO lambda   
#
              Zaa(lambda,i,a1,i1) = 0.0 
#
              DO a  
#
                 Txiai(lambda,i,a1,i1) = LLaiai(a,i,a1,i1)*ca(lambda,a)
                 Zaa(lambda,i,a1,i1)  += Txiai(lambda,i,a1,i1) 
#
              ENDDO a 
#
              PREPARE T1AO_aa(lambda,i,a1,i1) = Zaa(lambda,i,a1,i1) 
#
           ENDDO lambda  
#
           deallocate LLaiai(*,i,a1,i1) 
#
     ENDPARDO a1, i1, i   
#
     PARDO b1, j1, j   
#
           allocate LLbjbj(*,j,b1,j1) 
#
           DO b  
#
              REQUEST Tau_bb(b, j,b1,j1) j1 
              LLbjbj(b,j,b1,j1)  = Tau_bb(b, j,b1,j1) 
              LLbjbj(b,j,b1,j1)  *= 2.0
#
           ENDDO b  
#
           DO lambda   
#
              Zbb(lambda,j,b1,j1) = 0.0 
#
              DO b  
#
                 Txjbj(lambda,j,b1,j1) = LLbjbj(b,j,b1,j1)*cb(lambda,b)
                 Zbb(lambda,j,b1,j1)  += Txjbj(lambda,j,b1,j1) 
#
              ENDDO b 
#
              PREPARE T1AO_bb(lambda,j,b1,j1) = Zbb(lambda,j,b1,j1) 
#
           ENDDO lambda  
#
           deallocate LLbjbj(*,j,b1,j1) 
#
     ENDPARDO b1, j1, j   
#
     PARDO b, j, i   
#
           allocate LLaibj(*,i,b,j) 
#
           DO a  
#
              REQUEST Tau_ab(a,i,b,j) j 
              LLaibj(a,i,b,j) = Tau_ab(a,i,b,j) 
#
           ENDDO a  
#
           DO lambda   
#
              Zab(lambda,i,b,j) = 0.0 
#
              DO a  
#
                 Txibj(lambda,i,b,j) = LLaibj(a,i,b,j)*ca(lambda,a)
                 Zab(lambda,i,b,j)  += Txibj(lambda,i,b,j) 
#
              ENDDO a 
#
              PREPARE T1AO_ab(lambda,i,b,j) = Zab(lambda,i,b,j) 
#
           ENDDO lambda  
#
           deallocate LLaibj(*,i,b,j) 
#
     ENDPARDO b, j, i   
     execute server_barrier 
#
     PARDO lambda, i, i1  
#
           allocate Lxiai(lambda,i,*,i1) 
#
           DO a1 
#
              REQUEST T1AO_aa(lambda,i,a1,i1) i1  
              Lxiai(lambda,i,a1,i1) = T1AO_aa(lambda,i,a1,i1) 
#
           ENDDO a1 
#
           DO sigma 
#
              ZZaa(lambda,i,sigma,i1)  = 0.0 
#
              DO a1 
#
                 Txixi(lambda,i,sigma,i1) = Lxiai(lambda,i,a1,i1)*ca(sigma,a1)
                 ZZaa(lambda,i,sigma,i1) += Txixi(lambda,i,sigma,i1)  
#
              ENDDO a1 
#
              PREPARE TAO_aa(lambda,i,sigma,i1) = ZZaa(lambda,i,sigma,i1)
#
           ENDDO sigma 
#
           deallocate Lxiai(lambda,i,*,i1) 
#
     ENDPARDO lambda, i, i1   
#
     PARDO lambda, j, j1  
#
           allocate Lxjbj(lambda,j,*,j1) 
#
           DO b1 
#
              REQUEST T1AO_bb(lambda,j,b1,j1) j1  
              Lxjbj(lambda,j,b1,j1) = T1AO_bb(lambda,j,b1,j1) 
#
           ENDDO b1 
#
           DO sigma 
#
              ZZbb(lambda,j,sigma,j1)  = 0.0 
#
              DO b1 
#
                 Txjxj(lambda,j,sigma,j1) = Lxjbj(lambda,j,b1,j1)*cb(sigma,b1)
                 ZZbb(lambda,j,sigma,j1) += Txjxj(lambda,j,sigma,j1)  
#
              ENDDO b1 
#
              PREPARE TAO_bb(lambda,j,sigma,j1) = ZZbb(lambda,j,sigma,j1)
#
           ENDDO sigma 
#
           deallocate Lxjbj(lambda,j,*,j1) 
#
     ENDPARDO lambda, j, j1   
#
     PARDO lambda, i, j  
#
           allocate Lxibj(lambda,i,*,j) 
#
           DO b 
#
              REQUEST T1AO_ab(lambda,i,b,j) j  
              Lxibj(lambda,i,b,j) = T1AO_ab(lambda,i,b,j) 
#
           ENDDO b 
#
           DO sigma 
#
              ZZab(lambda,i,sigma,j)  = 0.0 
#
              DO b 
#
                 Txixj(lambda,i,sigma,j) = Lxibj(lambda,i,b,j)*cb(sigma,b)
                 ZZab(lambda,i,sigma,j) += Txixj(lambda,i,sigma,j)  
#
              ENDDO b 
#
              PREPARE TAO_ab(lambda,i,sigma,j) = ZZab(lambda,i,sigma,j)
#
           ENDDO sigma 
#
           deallocate Lxibj(lambda,i,*,j) 
#
     ENDPARDO lambda, i, j   
#
     execute server_barrier   
#
#    Contract AOINT with half back transformed Amplitudes 
#    ----------------------------------------------------    
#
     PARDO mu, nu 
#
           allocate L1xixi(mu,*,nu,*) 
           allocate L1xjxj(mu,*,nu,*) 
           allocate L1xixj(mu,*,nu,*) 
#
           DO lambda
           DO sigma
#
              compute_integrals aoint(mu,lambda,nu,sigma)
#
              DO i
              DO i1 
#
                 REQUEST TAO_aa(lambda,i,sigma,i1) i1 
                 Yaa(mu,i,nu,i1) = aoint(mu,lambda,nu,sigma)*TAO_aa(lambda,i,sigma,i1)
                 L1xixi(mu,i,nu,i1) += Yaa(mu,i,nu,i1)
#
              ENDDO i1 
              ENDDO i
#
              DO j
	      DO j1 
#
                 REQUEST TAO_bb(lambda,j,sigma,j1) j1 
                 Ybb(mu,j,nu,j1) = aoint(mu,lambda,nu,sigma)*TAO_bb(lambda,j,sigma,j1)
                 L1xjxj(mu,j,nu,j1) += Ybb(mu,j,nu,j1)
#
              ENDDO j1  
              ENDDO j
#
              DO i 
              DO j
#
                 REQUEST TAO_ab(lambda,i,sigma,j) j 
                 Yab(mu,i,nu,j)  = aoint(mu,lambda,nu,sigma)*TAO_ab(lambda,i,sigma,j)
                 L1xixj(mu,i,nu,j) += Yab(mu,i,nu,j)
#
              ENDDO j
              ENDDO i  
#
           ENDDO sigma
           ENDDO lambda
#
           DO i 
           DO i1 
#
              Txixi(mu,i,nu,i1) = L1xixi(mu,i,nu,i1)
              PREPARE T2AO_aa(mu,i,nu,i1) = Txixi(mu,i,nu,i1)  
#
           ENDDO i1 
           ENDDO i 
#
           DO j 
           DO j1 
#
              Txjxj(mu,j,nu,j1) = L1xjxj(mu,j,nu,j1)
              PREPARE T2AO_bb(mu,j,nu,j1) = Txjxj(mu,j,nu,j1)  
#
           ENDDO j1 
           ENDDO j 
#
           DO i 
           DO j 
#
              Txixj(mu,i,nu,j) = L1xixj(mu,i,nu,j)
              PREPARE T2AO_ab(mu,i,nu,j) = Txixj(mu,i,nu,j)  
#
           ENDDO j 
           ENDDO i 
#
           deallocate L1xixi(mu,*,nu,*) 
           deallocate L1xjxj(mu,*,nu,*) 
           deallocate L1xixj(mu,*,nu,*) 
#
     ENDPARDO  mu, nu 
     execute server_barrier  
#
#    Perform final transformation 
#    ---------------------------- 
#
     PARDO a, a1, i, i1  
#
           T1aiai(a,i,a1,i1) = 0.0  
           T2aiai(a,i,a1,i1) = 0.0  
#
           DO nu  
#
              TXaiai(a,i,nu,i1) = 0.0 
#
              DO mu   
#
                 REQUEST              T2AO_aa(mu,i,nu,i1) i1 
                 Taixi(a,i,nu,i1)   = T2AO_aa(mu,i,nu,i1)*ca(mu,a)
                 TXaiai(a,i,nu,i1) += Taixi(a,i,nu,i1)   
#
              ENDDO mu   
#
              TYaiai(a,i,a1,i1)  = TXaiai(a,i,nu,i1)*ca(nu,a1)
              TYaiai(a,i,a1,i1) *= 0.5  
              T1aiai(a,i,a1,i1) += TYaiai(a,i,a1,i1)
#
           ENDDO nu  

           PREPARE T2new_aa(a,i,a1,i1) += T1aiai(a,i,a1,i1) 
#
     ENDPARDO a, a1, i, i1  
#
     PARDO b, b1, j, j1  
#
           T1bjbj(b,j,b1,j1) = 0.0  
           T2bjbj(b,j,b1,j1) = 0.0  
#
           DO nu  
              TXbjbj(b,j,nu,j1) = 0.0 
#
              DO mu   
#
                 REQUEST              T2AO_bb(mu,j,nu,j1) j1 
                 Tbjxj(b,j,nu,j1)   = T2AO_bb(mu,j,nu,j1)*cb(mu,b)
                 TXbjbj(b,j,nu,j1) += Tbjxj(b,j,nu,j1)   
#
              ENDDO mu   
#
              TYbjbj(b,j,b1,j1)  = TXbjbj(b,j,nu,j1)*cb(nu,b1)
              TYbjbj(b,j,b1,j1) *= 0.5  
              T1bjbj(b,j,b1,j1) += TYbjbj(b,j,b1,j1)
#
           ENDDO nu  
#
           PREPARE T2new_bb(b,j,b1,j1) += T1bjbj(b,j,b1,j1) 
#
     ENDPARDO b, b1, j, j1  
#
     PARDO a, b, i, j  
#
           T1aibj(a,i,b,j) = 0.0  
#
           DO nu  
#
              TXaibj(a,i,nu,j) = 0.0 
#
              DO mu   
#
                 REQUEST             T2AO_ab(mu,i,nu,j) j 
                 Taixj(a,i,nu,j)   = T2AO_ab(mu,i,nu,j)*ca(mu,a)
                 TXaibj(a,i,nu,j) += Taixj(a,i,nu,j)   

              ENDDO mu   
#
              TYaibj(a,i,b,j)  = TXaibj(a,i,nu,j)*cb(nu,b)
              T1aibj(a,i,b,j) += TYaibj(a,i,b,j)
#
           ENDDO nu  
#
           PREPARE T2new_ab(a,i,b,j) += T1aibj(a,i,b,j) 
#
     ENDPARDO a, b, i, j  

#bgn_debug
#     execute server_barrier
#     sum=0.0
#     suma=0.0
#        pardo a, i, a1,i1
#        REQUEST T2NEW_aa(a,i,a1,i1) i1
#        tmp = T2NEW_aa(a,i,a1,i1)* T2NEW_aa(a,i,a1,i1)
#        sum += tmp
#        endpardo a, i, a1, i1
#        execute server_barrier
#        collective suma += sum
#        execute print_scalar suma
#end_debug

#
#    ------------------------------------------------------------------------ 
#
     ENDPROC AOLADDER  
#
# SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS 
#
# In the procedures WMEBJAA, WMEBJBB, WMEBJAB, and WMEBJBA these  
# intermediates are formed as temporary arrarys. The contribution to the 
# outout arrays is computed directly from these temporary arrays so 
# that the array is never stored.   
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
      PROC WMEBJAA 
#     ------------
#
      PARDO a, a1, i, i1  
#
               REQUEST              Viaai(i1,a1,a,i) i  
               REQUEST              Vaaii(a,a1,i1,i) i  
#
               TYaiai(a1,i1,a,i) = 0.
#
               Taiai(a1,i1,a,i)   = Vaaii(a,a1,i1,i)
               TYaiai(a1,i1,a,i) -= Taiai(a1,i1,a,i)
               Taiai(a1,i1,a,i) = Viaai(i1,a1,a,i)
               TYaiai(a1,i1,a,i) += Taiai(a1,i1,a,i)
               PREPARE TAUP_aa(a1,i1,a,i) = TYaiai(a1,i1,a,i) 
#
      ENDPARDO a, a1, i, i1  
      execute server_barrier 

# Contributions to T2new_aa 
# ------------------------- 
#
      PARDO a, i, a1, i1  
            REQUEST              TAUP_aa(a1,i1,a,i)    i1 
#
            DO i2 
            DO a2 
               REQUEST              T2old_aa(a2,i2,a1,i1) i1  
#
               R1aiai(a2,i2,a,i)  = T2old_aa(a2,i2,a1,i1)*TAUP_aa(a1,i1,a,i) 
               R2aiai(a2,i,a,i2)            = R1aiai(a2,i2,a,i)
               R2aiai(a2,i,a,i2)           *= -1.0
               R3aiai(a,i2,a2,i)            = R2aiai(a2,i,a,i2)
               R4aiai(a,i,a2,i2)            = R1aiai(a2,i2,a,i)
#
               PREPARE T2new_aa(a2,i2,a,i) += R1aiai(a2,i2,a,i) 
               PREPARE T2new_aa(a2,i,a,i2) += R2aiai(a2,i,a,i2) 
               PREPARE T2new_aa(a,i2,a2,i) += R3aiai(a,i2,a2,i) 
               PREPARE T2new_aa(a,i,a2,i2) += R4aiai(a,i,a2,i2) 
            ENDDO a2 
            ENDDO i2 
#
      ENDPARDO a, i, a1, i1  
#
# Contributions to T2new_ab 
# ------------------------- 
#
      PARDO a, i, a1, i1 
#
            REQUEST            TAUP_aa(a1,i1,a,i)  i 
#
            DO j  
            DO b
#
               REQUEST            T2old_ab(a1,i1,b,j) j  
#
               R1aibj(a,i,b,j)  = TAUP_aa(a1,i1,a,i)*T2old_ab(a1,i1,b,j) 
               PREPARE T2new_ab(a,i,b,j) += R1aibj(a,i,b,j)
            ENDDO b  
            ENDDO j  
#
      ENDPARDO a, i, a1, i1 
#
      ENDPROC WMEBJAA 
#     ---------------
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
      PROC WMEBJBB 
#     ------------
#
      PARDO j, b, j1, b1
#
               REQUEST              Vjbbj(j1,b1,b,j) j  
               REQUEST              Vbbjj(b,b1,j1,j) j  
#
               TYbjbj(b1,j1,b,j) = 0.
#
               T1bjbj(b1,j1,b,j)  = Vbbjj(b,b1,j1,j) 
               TYbjbj(b1,j1,b,j) -= T1bjbj(b1,j1,b,j)  
               T1bjbj(b1,j1,b,j) = Vjbbj(j1,b1,b,j) 
               TYbjbj(b1,j1,b,j) += T1bjbj(b1,j1,b,j)
               PREPARE TAUP_bb(b1,j1,b,j) = TYbjbj(b1,j1,b,j) 
#
      ENDPARDO j, b, j1, b1
      execute server_barrier

# Contributions to T2new_bb 
# ------------------------- 
#
      PARDO j, b, b1, j1 
#
            REQUEST              TAUP_bb(b1,j1,b,j)    j1  
#
            DO j2
            DO b2
#
               REQUEST              T2old_bb(b2,j2,b1,j1) j1  
               R1bjbj(b2,j2,b,j)  = T2old_bb(b2,j2,b1,j1)*TAUP_bb(b1,j1,b,j) 
#
               R2bjbj(b2,j,b,j2)            = R1bjbj(b2,j2,b,j) 
               R2bjbj(b2,j,b,j2)           *= -1.0  
               R3bjbj(b,j2,b2,j)            = R1bjbj(b2,j2,b,j) 
               R3bjbj(b,j2,b2,j)           *= -1.0  
               R4bjbj(b,j,b2,j2)            = R1bjbj(b2,j2,b,j) 
#
               PREPARE T2new_bb(b2,j2,b,j) += R1bjbj(b2,j2,b,j) 
               PREPARE T2new_bb(b2,j,b,j2) += R2bjbj(b2,j,b,j2) 
               PREPARE T2new_bb(b,j2,b2,j) += R3bjbj(b,j2,b2,j) 
               PREPARE T2new_bb(b,j,b2,j2) += R4bjbj(b,j,b2,j2) 
            ENDDO b2
            ENDDO j2 
#
      ENDPARDO j, b, b1, j1 
#
# Contributions to T2new_ab 
# ------------------------- 
#
      PARDO a, i, b1, j1 
#
            REQUEST            T2old_ab(a,i,b1,j1) j1  
#
            DO b  
            DO j  
#
               REQUEST            TAUP_bb(b1,j1,b,j)  j1  
#
               R1aibj(a,i,b,j)  = T2old_ab(a,i,b1,j1)*TAUP_bb(b1,j1,b,j) 
               PREPARE T2new_ab(a,i,b,j) += R1aibj(a,i,b,j)
            ENDDO j  
            ENDDO b  
#
#
      ENDPARDO a, i, b1, j1 
#
      ENDPROC WMEBJBB 
#     ---------------
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
      PROC WMEBJAB 
#     ------------

      PARDO j, b, i, a

               REQUEST           Viabj(i,a,b,j) j  

               Taibj(a,i,b,j) = 0.


               T1aibj(a,i,b,j)  = Viabj(i,a,b,j) 
               Taibj(a,i,b,j) += T1aibj(a,i,b,j)
               PREPARE TAUP_ab(a,i,b,j) = Taibj(a,i,b,j) 

      ENDPARDO j, b, i, a
      execute server_barrier

# Contribution to T2new_bb 
# ------------------------ 
#
      PARDO b, j, a, i 
#
            REQUEST              TAUP_ab(a,i,b,j)    j  
#
            DO j1 
            DO b1 
#
               REQUEST              T2old_ab(a,i,b1,j1) j1  

               R1bjbj(b1,j1,b,j)  = T2old_ab(a,i,b1,j1)*TAUP_ab(a,i,b,j) 

               R2bjbj(b1,j,b,j1)            = R1bjbj(b1,j1,b,j) 
               R2bjbj(b1,j,b,j1)           *= -1.0  
               R3bjbj(b,j1,b1,j)            = R1bjbj(b1,j1,b,j) 
               R3bjbj(b,j1,b1,j)           *= -1.0  
               R4bjbj(b,j,b1,j1)            = R1bjbj(b1,j1,b,j) 

               PREPARE T2new_bb(b1,j1,b,j) += R1bjbj(b1,j1,b,j) 
               PREPARE T2new_bb(b1,j,b,j1) += R2bjbj(b1,j,b,j1) 
               PREPARE T2new_bb(b,j1,b1,j) += R3bjbj(b,j1,b1,j) 
               PREPARE T2new_bb(b,j,b1,j1) += R4bjbj(b,j,b1,j1) 
            ENDDO b1 
            ENDDO j1 
#
      ENDPARDO b, j, a, i
#
# Contribution to T2new_ab 
# ------------------------ 
#
      PARDO i1, a1, a, i
#
            REQUEST              T2old_aa(a1,i1,a,i) i 

            DO j 
            DO b 
#
               REQUEST              TAUP_ab(a,i,b,j)    j  

               R1aibj(a1,i1,b,j)  = T2old_aa(a1,i1,a,i)*TAUP_ab(a,i,b,j)  
               PREPARE T2new_ab(a1,i1,b,j) += R1aibj(a1,i1,b,j) 
            ENDDO b 
            ENDDO j 
#
      ENDPARDO i1, a1, a, i
#
      ENDPROC WMEBJAB 
#     ---------------
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
      PROC WMEBJBA  
#     ------------
#
      execute server_barrier 

      PARDO i, a, j, b
#
               REQUEST           Viabj(i,a,b,j) j  
#
               Taibj(a,i,b,j) = 0.
#
#
               T1aibj(a,i,b,j) = Viabj(i,a,b,j) 
               Taibj(a,i,b,j) += T1aibj(a,i,b,j) 
#
               PREPARE TAUP_ab(a,i,b,j) = Taibj(a,i,b,j) 
#
      ENDPARDO i, a, j, b
      execute server_barrier

# Contribution to T2new_aa 
# ------------------------ 
#
      PARDO a, i, b, j
#
            REQUEST               TAUP_ab(a,i,b,j)    j  
#
            DO a1 
            DO i1 
#
               REQUEST               T2old_ab(a1,i1,b,j) j  
#
               R1aiai(a1,i1,a,i)  =  T2old_ab(a1,i1,b,j)*TAUP_ab(a,i,b,j) 
#
               R2aiai(a1,i,a,i1)            =  R1aiai(a1,i1,a,i) 
               R2aiai(a1,i,a,i1)           *= -1.0  
               R3aiai(a,i1,a1,i)            =  R1aiai(a1,i1,a,i) 
               R3aiai(a,i1,a1,i)           *= -1.0  
               R4aiai(a,i,a1,i1)            =  R1aiai(a1,i1,a,i) 
#
               PREPARE T2new_aa(a1,i1,a,i) += R1aiai(a1,i1,a,i) 
               PREPARE T2new_aa(a1,i,a,i1) += R2aiai(a1,i,a,i1) 
               PREPARE T2new_aa(a,i1,a1,i) += R3aiai(a,i1,a1,i) 
               PREPARE T2new_aa(a,i,a1,i1) += R4aiai(a,i,a1,i1) 
            ENDDO i1 
            ENDDO a1 
#
      ENDPARDO a, i, b, j
#
# Contribution to T2new_ab 
# ------------------------ 
#
      PARDO a, i, b, j  
#
            REQUEST              TAUP_ab(a,i,b,j)    j  
#
            DO j1 
            DO b1
#
               REQUEST              T2old_bb(b1,j1,b,j) j 
#
               R1aibj(a,i,b1,j1)  = T2old_bb(b1,j1,b,j)*TAUP_ab(a,i,b,j)  
               PREPARE T2new_ab(a,i,b1,j1) += R1aibj(a,i,b1,j1) 
            ENDDO b1
            ENDDO j1 
#
      ENDPARDO a, i, b, j  
#
      ENDPROC WMEBJBA  
#     ---------------
#
# Compute contributions from 'Wmjbe'. 
#
#
      PROC WMJBEAB
#     -------------
#
      PARDO b, i, b1, i1
#
            REQUEST Vbbii(b,b1,i1,i) i
            Tiiqq(i1,i,b,b1) = 0.
#
            T1iiqq(i1,i,b,b1) = Vbbii(b,b1,i1,i)
            Tiiqq(i1,i,b,b1) += T1iiqq(i1,i,b,b1)
            PREPARE Wiibb(i1,i,b,b1) = Tiiqq(i1,i,b,b1)
#
      ENDPARDO b, i, b1, i1
      execute server_barrier

#  Calculate contribution to the amplitudes
#  ----------------------------------------
#
      PARDO a, j, i1, b1
#
            REQUEST            T2old_ab(a,i1,b1,j) j
#
            DO i
            DO b
#
               REQUEST            Wiibb(i1,i,b,b1)    i
#
               Taibj(a,i,b,j) = 0.
               T1aibj(a,i,b,j)  = T2old_ab(a,i1,b1,j)*Wiibb(i1,i,b,b1)
               Taibj(a,i,b,j)  -= T1aibj(a,i,b,j)
#
               PREPARE T2new_ab(a,i,b,j) += Taibj(a,i,b,j)
            ENDDO b
            ENDDO i
#
      ENDPARDO a, j, i1, b1
#
      ENDPROC WMJBEAB
#     ---------------
#
      PROC WMJBEBA
#     -------------
#
      PARDO a, j, a1, j1
#
            REQUEST Vaajj(a,a1,j1,j) j
            Tjjpp(j1,j,a,a1) = 0.
#
            T1jjpp(j1,j,a,a1) = Vaajj(a,a1,j1,j)
            Tjjpp(j1,j,a,a1) += T1jjpp(j1,j,a,a1)
            PREPARE Wjjaa(j1,j,a,a1) = Tjjpp(j1,j,a,a1)
#
      ENDPARDO a, j, a1, j1
      execute server_barrier

#  Calculate contribution to the amplitudes
#  ----------------------------------------
#
      PARDO i, b, a1, j1
#
            REQUEST           T2old_ab(a1,i,b,j1) j1
#
            DO a
            DO j
#
               REQUEST           Wjjaa(j1,j,a,a1)    j1
#
               Taibj(a,i,b,j) = 0.
               T1aibj(a,i,b,j) = Wjjaa(j1,j,a,a1)*T2old_ab(a1,i,b,j1)
               Taibj(a,i,b,j) -= T1aibj(a,i,b,j)
#
               PREPARE T2new_ab(a,i,b,j) += Taibj(a,i,b,j)
            ENDDO j
            ENDDO a
#
      ENDPARDO i, b, a1, j1
#
      ENDPROC WMJBEBA
#     ---------------
#
# SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS 
#
      PROC WMEBJ 
# 
           CALL WMEBJAA
           CALL WMEBJBB
           CALL WMEBJAB
           CALL WMEBJBA
           CALL WMJBEAB
           CALL WMJBEBA
#bgn_debug
#     execute server_barrier
#     sum=0.0
#     suma=0.0
#        pardo a, i, a1,i1
#        REQUEST T2NEW_aa(a,i,a1,i1) i1
#        tmp = T2NEW_aa(a,i,a1,i1)* T2NEW_aa(a,i,a1,i1)
#        sum += tmp
#        endpardo a, i, a1, i1
#        execute server_barrier
#        collective suma += sum
#        execute print_scalar suma
#end_debug

      ENDPROC WMEBJ 
#
# SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS 
#
     PROC ENERGY_NEW 
# 
#    ------------------------------------------------------------------------ 
#
     esuma   = 0.0 
     ecorraa = 0.0 
     PARDO a, a1, i, i1 
#
           REQUEST VSpipi(a,i,a1,i1) i1  
           REQUEST T2old_aa(a,i,a1,i1) i1  
           T2aiai(a,i,a1,i1) = T2old_aa(a,i,a1,i1)
#
           etemp = VSpipi(a,i,a1,i1)*T2aiai(a,i,a1,i1) 
           etemp = 0.25*etemp 
           esuma += etemp 
#
     ENDPARDO a, a1, i, i1  
#
     ecorrbb = 0.0 
     esumb   = 0.0 
     PARDO b, b1, j, j1 
#
           REQUEST VSqjqj(b,j,b1,j1) j1  
           REQUEST T2old_bb(b,j,b1,j1) j1  
#
           T2bjbj(b,j,b1,j1) = T2old_bb(b,j,b1,j1)
#
           etemp = VSqjqj(b,j,b1,j1)*T2bjbj(b,j,b1,j1) 
           etemp = 0.25*etemp 
#          execute print_scalar etemp 
           esumb += etemp 
#
     ENDPARDO b, b1, j, j1 

     ecorrab = 0.0 
     esumab  = 0.0 
     PARDO a, b, i, j 
#
           REQUEST Vpiqj(a,i,b,j) j  
           REQUEST T2old_ab(a,i,b,j) j  

           Taibj(a,i,b,j) = T2old_ab(a,i,b,j)  
#
           etemp = Taibj(a,i,b,j)*Vpiqj(a,i,b,j) 
           esumab += etemp 
#
     ENDPARDO a, b, i, j 

     IF NONHF == 1.0

        enhfa    = 0.0
        ecorrnha = 0.0
        PARDO a, i
           GET t1a_old(a,i)
           GET Fme_a_ia(i,a)
           etemp = t1a_old(a,i) * Fme_a_ia(i,a)
           enhfa +=  etemp
        ENDPARDO a, i

        enhfb    = 0.0
        ecorrnhb = 0.0
        PARDO b, j
           GET t1b_old(b,j)
           GET Fme_b_ia(j,b)
           etemp = t1b_old(b,j) * Fme_b_ia(j,b)
           enhfb +=  etemp
        ENDPARDO b, j
     ENDIF 

     execute server_barrier 

     collective ecorraa += esuma
     collective ecorrbb += esumb 
     collective ecorrab += esumab

     IF NONHF == 1.0
        collective ecorrnha += enhfa
        collective ecorrnhb += enhfb
     ENDIF 
#
     ecorrT  = ecorraa + ecorrbb
     ecorrT += ecorrab 

     IF NONHF == 1.0
        ecorrT += ecorrnha
        ecorrT += ecorrnhb
     ENDIF
  
     execute print_scalar ecorraa
     execute print_scalar ecorrbb
     execute print_scalar ecorrab
     execute print_scalar ecorrT  

     if kiter > 0
            ncount1 = 0.0
         DO kptr1
            ncount1 = ncount1 + 1.0
            if ncount1 == one
               tpinf(kiter,kptr1) = ecorrT
               pinf(kiter,kptr1)  = tpinf(kiter,kptr1)
            endif
         ENDDO kptr1

            ncount1 = 0.0
         DO kptr1
            ncount1 = ncount1 + 1.0
            if ncount1 == two
               etemp = ecorrT
               etemp+= scfeneg
               tpinf(kiter,kptr1) = etemp
               pinf(kiter,kptr1)  = tpinf(kiter,kptr1)
            endif
         ENDDO kptr1

         execute print_rel_info five pinf
      endif

# 
#    ------------------------------------------------------------------------ 
# 
     ENDPROC ENERGY_NEW 
# 
#    ------------------------------------------------------------------------ 
# 
     PROC T2NEW_ZERO
#    --------------- 
#
#     Zero out new 1-particle amplitude arrays 
#     ---------------------------------------- 
#
          PARDO a, i 
                tai(a,i) = 0.0 
                PUT t1a_new(a,i) = tai(a,i) 
          ENDPARDO a, i 
#
          PARDO b, j 
                tbj(b,j) = 0.0 
                PUT t1b_new(b,j) = tbj(b,j) 
          ENDPARDO b, j 
#
#     Zero out new 2-particle amplitude arrays 
#     ---------------------------------------- 
#
          PARDO a, a1, i, i1 
                Taiai(a,i,a1,i1) = 0.0
                PREPARE T2new_aa(a,i,a1,i1) = Taiai(a,i,a1,i1) 
          ENDPARDO a, a1, i, i1 
#
          PARDO b, b1, j, j1 
                Tbjbj(b,j,b1,j1) = 0.0
                PREPARE T2new_bb(b,j,b1,j1) = Tbjbj(b,j,b1,j1) 
          ENDPARDO b, b1, j, j1 
#
          PARDO a, b, i, j 
                Taibj(a,i,b,j) = 0.0
                PREPARE T2new_ab(a,i,b,j) = Taibj(a,i,b,j) 
          ENDPARDO a, b, i, j 
# 
     ENDPROC T2NEW_ZERO
# 
#    ------------------------------------------------------------------------ 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
      PROC UPDATET2 
#     ------------- 
#
      PARDO a, a1, i, i1 
#
            REQUEST                    T2old_aa(a,i,a1,i1) a
            REQUEST                    T2new_aa(a,i,a1,i1) a
            Taiai(a,i,a1,i1)         = T2new_aa(a,i,a1,i1)
            T1aiai(a,i,a1,i1)        = T2old_aa(a,i,a1,i1)
            execute energy_denominator Taiai
            t1aiai(a,i,a1,i1) -= taiai(a,i,a1,i1)
            t1aiai(a,i,a1,i1) *= -1.0
#
            if kiter == 1
               PREPARE e1aiai(a,i,a1,i1) = T1aiai(a,i,a1,i1)
            endif
#
            if kiter == 2
               PREPARE e2aiai(a,i,a1,i1) = T1aiai(a,i,a1,i1)
            endif
#
            if kiter == 3
               PREPARE e3aiai(a,i,a1,i1) = T1aiai(a,i,a1,i1)
            endif
#
            if kiter == 4
               PREPARE e4aiai(a,i,a1,i1) = T1aiai(a,i,a1,i1)
            endif
#
            if kiter >= 5
               PREPARE e5aiai(a,i,a1,i1) = T1aiai(a,i,a1,i1)
            endif
#
      ENDPARDO a, a1, i, i1
#
#
      PARDO b, b1, j, j1
#
            REQUEST                    T2old_bb(b,j,b1,j1) b 
            REQUEST                    T2new_bb(b,j,b1,j1) b 
            Tbjbj(b,j,b1,j1)         = T2new_bb(b,j,b1,j1)
            T1bjbj(b,j,b1,j1)        = T2old_bb(b,j,b1,j1)
            execute energy_denominator Tbjbj
            T1bjbj(b,j,b1,j1) -= tbjbj(b,j,b1,j1)
            T1bjbj(b,j,b1,j1) *= -1.0
#
            if kiter == 1
               PREPARE e1bjbj(b,j,b1,j1) = T1bjbj(b,j,b1,j1)
            endif
#
            if kiter == 2
               PREPARE e2bjbj(b,j,b1,j1) = T1bjbj(b,j,b1,j1)
            endif
#
            if kiter == 3
               PREPARE e3bjbj(b,j,b1,j1) = T1bjbj(b,j,b1,j1)
            endif
#
            if kiter == 4
               PREPARE e4bjbj(b,j,b1,j1) = T1bjbj(b,j,b1,j1)
            endif
#
            if kiter >= 5
               PREPARE e5bjbj(b,j,b1,j1) = T1bjbj(b,j,b1,j1)
            endif
#
      ENDPARDO b, b1, j, j1
#
      PARDO b, a, j, i
#
            REQUEST                    T2old_ab(a,i,b,j) b 
            REQUEST                    T2new_ab(a,i,b,j) b 
            Taibj(a,i,b,j)           = T2new_ab(a,i,b,j)
            T1aibj(a,i,b,j)          = T2old_ab(a,i,b,j)
            execute energy_denominator Taibj
            T1aibj(a,i,b,j) -= Taibj(a,i,b,j)
            T1aibj(a,i,b,j) *= -1.0
#
            if kiter == 1
               PREPARE e1aibj(a,i,b,j) = T1aibj(a,i,b,j)
            endif
#
            if kiter == 2
               PREPARE e2aibj(a,i,b,j) = T1aibj(a,i,b,j)
            endif
#
            if kiter == 3
               PREPARE e3aibj(a,i,b,j) = T1aibj(a,i,b,j)
            endif
#
            if kiter == 4
               PREPARE e4aibj(a,i,b,j) = T1aibj(a,i,b,j)
            endif
#
            if kiter >= 5
               PREPARE e5aibj(a,i,b,j) = T1aibj(a,i,b,j)
            endif
#
      ENDPARDO b, a, j, i
      execute server_barrier 
#
      PARDO a, a1, i, i1
#
            REQUEST                    T2new_aa(a,i,a1,i1) a 
            Taiai(a,i,a1,i1)         = T2new_aa(a,i,a1,i1)
            execute energy_denominator Taiai
            PREPARE T2old_aa(a,i,a1,i1)  = Taiai(a,i,a1,i1)
      ENDPARDO a, a1, i, i1
#
      PARDO b, b1, j, j1
#
            REQUEST                    T2new_bb(b,j,b1,j1) b 
            Tbjbj(b,j,b1,j1)         = T2new_bb(b,j,b1,j1)
            execute energy_denominator Tbjbj
            PREPARE T2old_bb(b,j,b1,j1)  = Tbjbj(b,j,b1,j1)
#
      ENDPARDO b, b1, j, j1
#
      PARDO b, a, j, i
#
            REQUEST                    T2new_ab(a,i,b,j) a
            Taibj(a,i,b,j)           = T2new_ab(a,i,b,j)
            execute energy_denominator Taibj
            PREPARE T2old_ab(a,i,b,j)    = Taibj(a,i,b,j)
#
      ENDPARDO b, a, j, i
#
      ENDPROC UPDATET2 
#     ----------------  
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
      PROC UPDATET1 
#     ------------- 
#
      PARDO a, i 
#
            GET                t1a_new(a,i) 
            GET                t1a_old(a,i) 
            tai(a,i)         = t1a_new(a,i) 
            t1ai(a,i)        = t1a_old(a,i) 
            execute energy_denominator tai 
            PUT t1a_old(a,i) = tai(a,i) 
            tai(a,i)        -= t1ai(a,i) 
#
            if kiter == 1 
               PUT e1ai(a,i) = Tai(a,i) 
            endif 
#
            if kiter == 2 
               PUT e2ai(a,i) = Tai(a,i) 
            endif 
#
            if kiter == 3 
               PUT e3ai(a,i) = Tai(a,i) 
            endif 
#
            if kiter == 4 
               PUT e4ai(a,i) = Tai(a,i) 
            endif 
#
            if kiter >= 5 
               PUT e5ai(a,i) = Tai(a,i) 
            endif 
#
      ENDPARDO a, i 
#
      PARDO b, j 
#
            GET                t1b_new(b,j) 
            GET                t1b_old(b,j) 
            tbj(b,j)         = t1b_new(b,j) 
            t1bj(b,j)        = t1b_old(b,j) 
            execute energy_denominator tbj
            PUT t1b_old(b,j) = tbj(b,j) 
            tbj(b,j)        -= t1bj(b,j) 
#
            if kiter == 1 
               PUT e1bj(b,j) = Tbj(b,j) 
            endif 
#
            if kiter == 2 
               PUT e2bj(b,j) = Tbj(b,j) 
            endif 
#
            if kiter == 3 
               PUT e3bj(b,j) = Tbj(b,j) 
            endif 
#
            if kiter == 4 
               PUT e4bj(b,j) = Tbj(b,j) 
            endif 
#
            if kiter >= 5 
               PUT e5bj(b,j) = Tbj(b,j) 
            endif 
#
      ENDPARDO b, j 
      execute sip_barrier 
#
      ENDPROC UPDATET1 
#     ----------------  
#
      PROC MOVET2
#     ------------
#
      PARDO a, a1, i, i1
#
            REQUEST            T2old_aa(a,i,a1,i1) a 
            taiai(a,i,a1,i1) = T2old_aa(a,i,a1,i1)
#
            if kiter == 1
               PREPARE d1aiai(a,i,a1,i1) = taiai(a,i,a1,i1)
            endif
#
            if kiter == 2
               PREPARE d2aiai(a,i,a1,i1) = Taiai(a,i,a1,i1)
            endif
#
            if kiter == 3
               PREPARE d3aiai(a,i,a1,i1) = Taiai(a,i,a1,i1)
            endif
#
            if kiter == 4
               PREPARE d4aiai(a,i,a1,i1) = Taiai(a,i,a1,i1)
            endif
#
            if kiter >= 5
               PREPARE d4aiai(a,i,a1,i1) = Taiai(a,i,a1,i1)
            endif
#
      ENDPARDO a, a1, i, i1
#
      PARDO b, b1, j, j1
#
            REQUEST            T2old_bb(b,j,b1,j1) b 
            Tbjbj(b,j,b1,j1) = T2old_bb(b,j,b1,j1)
#
            if kiter == 1
               PREPARE d1bjbj(b,j,b1,j1) = Tbjbj(b,j,b1,j1)
            endif
#
            if kiter == 2
               PREPARE d2bjbj(b,j,b1,j1) = Tbjbj(b,j,b1,j1)
            endif
#
            if kiter == 3
               PREPARE d3bjbj(b,j,b1,j1) = Tbjbj(b,j,b1,j1)
            endif
#
            if kiter == 4
               PREPARE d4bjbj(b,j,b1,j1) = Tbjbj(b,j,b1,j1)
            endif
#
            if kiter >= 5
               PREPARE d4bjbj(b,j,b1,j1) = Tbjbj(b,j,b1,j1)
            endif
#
      ENDPARDO b, b1, j, j1
#
      PARDO b, a, j, i
#
            REQUEST                    T2old_ab(a,i,b,j) a 
            Taibj(a,i,b,j)           = T2old_ab(a,i,b,j)
#
            if kiter == 1
               PREPARE d1aibj(a,i,b,j) = Taibj(a,i,b,j)
            endif
#
            if kiter == 2
               PREPARE d2aibj(a,i,b,j) = Taibj(a,i,b,j)
            endif
#
            if kiter == 3
               PREPARE d3aibj(a,i,b,j) = Taibj(a,i,b,j)
            endif
#
            if kiter == 4
               PREPARE d4aibj(a,i,b,j) = Taibj(a,i,b,j)
            endif
#
            if kiter >= 5
               PREPARE d4aibj(a,i,b,j) = Taibj(a,i,b,j)
            endif
#
      ENDPARDO b, a, j, i
#
      ENDPROC MOVET2
#     ----------------
#
      PROC MOVET1
#     ------------
#
      PARDO a, i 
#
            GET        t1a_old(a,i)
            tai(a,i) = t1a_old(a,i)
#
            if kiter == 1
               PUT d1ai(a,i) = tai(a,i)
            endif
#
            if kiter == 2
               PUT d2ai(a,i) = Tai(a,i)
            endif
#
            if kiter == 3
               PUT d3ai(a,i) = Tai(a,i)
            endif
#
            if kiter == 4
               PUT d4ai(a,i) = Tai(a,i)
            endif
#
            if kiter >= 5
               PUT d4ai(a,i) = Tai(a,i)
            endif
#
      ENDPARDO a, i
#
      PARDO b, j 
#
            GET        t1b_old(b,j)
            tbj(b,j) = t1b_old(b,j)
#
            if kiter == 1
               PUT d1bj(b,j) = tbj(b,j)
            endif
#
            if kiter == 2
               PUT d2bj(b,j) = tbj(b,j)
            endif
#
            if kiter == 3
               PUT d3bj(b,j) = tbj(b,j)
            endif
#
            if kiter == 4
               PUT d4bj(b,j) = tbj(b,j)
            endif
#
            if kiter >= 5
               PUT d4bj(b,j) = tbj(b,j)
            endif
#
      ENDPARDO b, j
#
      ENDPROC MOVET1
#     ----------------
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# ---------------------------------------------------------------------------------
#
     PROC ZERO_DSCALAR  
#    ----------------- 
#
#    The scalars used (overlap of error arrays and coeffients) in the DIIS 
#    expansion are zero'd out. 
#
#      Zero out scalars.
#      -----------------
#
       b11 = 0.0
       b12 = 0.0
       b13 = 0.0
       b14 = 0.0
       b15 = 0.0
       b16 = 0.0
       b17 = 0.0
       b18 = 0.0
       b19 = 0.0
       b110 = 0.0
#
       b22 = 0.0
       b23 = 0.0
       b24 = 0.0
       b25 = 0.0
       b26 = 0.0
       b27 = 0.0
       b28 = 0.0
       b29 = 0.0
       b210 = 0.0
#
       b33 = 0.0
       b34 = 0.0
       b35 = 0.0
       b36 = 0.0
       b37 = 0.0
       b38 = 0.0
       b39 = 0.0
       b310 = 0.0
#
       b44 = 0.0
       b45 = 0.0
       b46 = 0.0
       b47 = 0.0
       b48 = 0.0
       b49 = 0.0
       b410 = 0.0
#
       b55 = 0.0
       b56 = 0.0
       b57 = 0.0
       b58 = 0.0
       b59 = 0.0
       b510 = 0.0
#
       b66 = 0.0
       b67 = 0.0
       b68 = 0.0
       b69 = 0.0
       b610 = 0.0
#
       b77 = 0.0
       b78 = 0.0
       b79 = 0.0
       b710 = 0.0
#
       b88 = 0.0
       b89 = 0.0
       b810 = 0.0
#
       b99 = 0.0
       b910 = 0.0
#
       b1010 = 0.0
#
       Tb11 = 0.0
       Tb12 = 0.0
       Tb13 = 0.0
       Tb14 = 0.0
       Tb15 = 0.0
       Tb16 = 0.0
       Tb17 = 0.0
       Tb18 = 0.0
       Tb19 = 0.0
       Tb110 = 0.0
#
       Tb22 = 0.0
       Tb23 = 0.0
       Tb24 = 0.0
       Tb25 = 0.0
       Tb26 = 0.0
       Tb27 = 0.0
       Tb28 = 0.0
       Tb29 = 0.0
       Tb210 = 0.0
#
       Tb33 = 0.0
       Tb34 = 0.0
       Tb35 = 0.0
       Tb36 = 0.0
       Tb37 = 0.0
       Tb38 = 0.0
       Tb39 = 0.0
       Tb310 = 0.0
#
       Tb44 = 0.0
       Tb45 = 0.0
       Tb46 = 0.0
       Tb47 = 0.0
       Tb48 = 0.0
       Tb49 = 0.0
       Tb410 = 0.0
#
       Tb55 = 0.0
       Tb56 = 0.0
       Tb57 = 0.0
       Tb58 = 0.0
       Tb59 = 0.0
       Tb510 = 0.0
#
       Tb66 = 0.0
       Tb67 = 0.0
       Tb68 = 0.0
       Tb69 = 0.0
       Tb610 = 0.0
#
       Tb77 = 0.0
       Tb78 = 0.0
       Tb79 = 0.0
       Tb710 = 0.0
#
       Tb88 = 0.0
       Tb89 = 0.0
       Tb810 = 0.0
#
       Tb99 = 0.0
       Tb910 = 0.0
#
       Tb1010 = 0.0
#
       c1 = 0.0
       c2 = 0.0
       c3 = 0.0
       c4 = 0.0
       c5 = 0.0
       c6 = 0.0
       c7 = 0.0
       c8 = 0.0
       c9 = 0.0
       c10 = 0.0
#
       execute sip_barrier
#
     ENDPROC ZERO_DSCALAR  
#    -------------------- 
#
# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
#
     PROC SETUP_DIIS   
#    --------------- 
#
#    Put the matrix elements of B into the sip 'B' matrix. 
#
       execute diis_setup Tb11
       execute diis_setup Tb12
       execute diis_setup Tb13
       execute diis_setup Tb14
       execute diis_setup Tb15
       execute diis_setup Tb16
       execute diis_setup Tb17
       execute diis_setup Tb18
       execute diis_setup Tb19
       execute diis_setup Tb110

       execute diis_setup Tb22
       execute diis_setup Tb23
       execute diis_setup Tb24
       execute diis_setup Tb25
       execute diis_setup Tb26
       execute diis_setup Tb27
       execute diis_setup Tb28
       execute diis_setup Tb29
       execute diis_setup Tb210

       execute diis_setup Tb33
       execute diis_setup Tb34
       execute diis_setup Tb35
       execute diis_setup Tb36
       execute diis_setup Tb37
       execute diis_setup Tb38
       execute diis_setup Tb39
       execute diis_setup Tb310

       execute diis_setup Tb44
       execute diis_setup Tb45
       execute diis_setup Tb46
       execute diis_setup Tb47
       execute diis_setup Tb48
       execute diis_setup Tb49
       execute diis_setup Tb410

       execute diis_setup Tb55
       execute diis_setup Tb56
       execute diis_setup Tb57
       execute diis_setup Tb58
       execute diis_setup Tb59
       execute diis_setup Tb510

       execute diis_setup Tb66
       execute diis_setup Tb67
       execute diis_setup Tb68
       execute diis_setup Tb69
       execute diis_setup Tb610

       execute diis_setup Tb77
       execute diis_setup Tb78
       execute diis_setup Tb79
       execute diis_setup Tb710

       execute diis_setup Tb88
       execute diis_setup Tb89
       execute diis_setup Tb810

       execute diis_setup Tb99
       execute diis_setup Tb910

       execute diis_setup Tb1010
#
       execute sip_barrier
#
     ENDPROC SETUP_DIIS   
#    ------------------ 
#
# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
#
     PROC DIIS1  
#    ---------- 
#
#    Zero out scalars.
#    ----------------- 
#
     CALL ZERO_DSCALAR 
#
#    Determine the 'B-matrix'. 
#    ------------------------- 
#
#    Compute contributions due to T2aiai amplitudes. 
#    ----------------------------------------------- 
#
#
     PARDO a, i, a1, i1
#
#          REQUEST/GET amplitude data from all 2 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1aiai(a,i,a1,i1) a # kiter-1 amplitudes
           REQUEST e2aiai(a,i,a1,i1) a # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,2
#             ---------
#
              etemp = e1aiai(a,i,a1,i1)*e1aiai(a,i,a1,i1)
              b11  += etemp
#
              etemp = e1aiai(a,i,a1,i1)*e2aiai(a,i,a1,i1)
              b12  += etemp
#
#             b1x x=2,2
#             ---------
#
              etemp = e2aiai(a,i,a1,i1)*e2aiai(a,i,a1,i1)
              b22  += etemp
#
     ENDPARDO a, i, a1, i1
#
#    Compute contributions due to T2bjbj amplitudes.
#    -----------------------------------------------
#
     PARDO b, j, b1, j1
#
#          REQUEST/GET amplitude data from all 2 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1bjbj(b,j,b1,j1) b # kiter-1 amplitudes
           REQUEST e2bjbj(b,j,b1,j1) b # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,2
#             ---------
#
              etemp = e1bjbj(b,j,b1,j1)*e1bjbj(b,j,b1,j1)
              b11  += etemp
#
              etemp = e1bjbj(b,j,b1,j1)*e2bjbj(b,j,b1,j1)
              b12  += etemp
#
#             b1x x=2,2
#             ---------
#
              etemp = e2bjbj(b,j,b1,j1)*e2bjbj(b,j,b1,j1)
              b22  += etemp
#
     ENDPARDO b, j, b1, j1
#
#    Compute contributions due to T2aibj amplitudes.
#    -----------------------------------------------
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 2 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1aibj(a,i,b,j) a # kiter-1 amplitudes
           REQUEST e2aibj(a,i,b,j) a # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,2
#             ---------
#
              etemp = e1aibj(a,i,b,j)*e1aibj(a,i,b,j)
              etemp *= 4.0
              b11  += etemp
#
              etemp = e1aibj(a,i,b,j)*e2aibj(a,i,b,j)
              etemp *= 4.0
              b12  += etemp
#
#             b1x x=2,2
#             ---------
#
              etemp = e2aibj(a,i,b,j)*e2aibj(a,i,b,j)
              etemp *= 4.0
              b22  += etemp
#
     ENDPARDO a, i, b, j
#
#    Compute contributions due to T1ai amplitudes. 
#    --------------------------------------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 2 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET e1ai(a,i)    # kiter-1 amplitudes  
           GET e2ai(a,i)    # kiter-0 amplitudes  
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#             b1x x=1,2 
#             --------- 
#
              etemp = e1ai(a,i)*e1ai(a,i) 
              etemp *= 4.0
              b11  += etemp            
#
              etemp = e1ai(a,i)*e2ai(a,i) 
              etemp *= 4.0
              b12  += etemp            
#
#             b1x x=2,2 
#             --------- 
#
              etemp = e2ai(a,i)*e2ai(a,i) 
              etemp *= 4.0
              b22  += etemp            
#
     ENDPARDO a, i 
#
#    Compute contributions due to T1bj amplitudes. 
#    --------------------------------------------- 
#
     PARDO b, j  
#
#          REQUEST/GET amplitude data from all 2 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET e1bj(b,j)    # kiter-1 amplitudes  
           GET e2bj(b,j)    # kiter-0 amplitudes  
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#             b1x x=1,2 
#             --------- 
#
              etemp = e1bj(b,j)*e1bj(b,j) 
              etemp *= 4.0
              b11  += etemp            
#
              etemp = e1bj(b,j)*e2bj(b,j) 
              etemp *= 4.0
#              b12  += etemp            
#
#             b1x x=2,2 
#             --------- 
#
              etemp = e2bj(b,j)*e2bj(b,j) 
              etemp *= 4.0
              b22  += etemp            
#
     ENDPARDO b, j 
#
     execute sip_barrier
     execute server_barrier 
#
#    Collectively sum B-matrix elements. 
#    -----------------------------------
#
     collective Tb11 += b11 
     collective Tb12 += b12 
     collective Tb22 += b22 
#
#    Now the unique elements of the 'B-matrix' have been computed, the array is filled out
#    in the setup_diis. 
#    --------------------------------------------------------------------------------------
#
#    Put the elements of the 'B-matrix', which have been computed as scalars into the  
#    R-matrix. 
#    -------------------------------------------------------------------------------- 
#
     CALL SETUP_DIIS 
#
     execute compute_diis # --> New instruction  
#
     c1 = Tb11 
     c2 = Tb22 
    #execute print_scalar c1 
    #execute print_scalar c2 
#
#    Done computing the c-vector. 
#    ---------------------------- 
#
#    Form the updated amplitudes using the c-vector. 
#    -----------------------------------------------  
#
#    Form T2old_aa. 
#    -------------- 
#
     PARDO a, i, a1, i1
#
#          REQUEST/GET amplitude data from all 2 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST d0aiai(a,i,a1,i1) a # kiter-2 amplitudes
           REQUEST d1aiai(a,i,a1,i1) a # kiter-1 amplitudes
#
           REQUEST e1aiai(a,i,a1,i1) a # kiter-1 amplitudes
           REQUEST e2aiai(a,i,a1,i1) a # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> T2old_aa.
#          ---------------------------------------------------------
#
           t2aiai(a,i,a1,i1)            = d0aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           += e1aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           *= c1
           taiai(a,i,a1,i1)             = t2aiai(a,i,a1,i1)
#
           t2aiai(a,i,a1,i1)            = d1aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           += e2aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           *= c2
           taiai(a,i,a1,i1)            += t2aiai(a,i,a1,i1)
#
           PREPARE T2old_aa(a,i,a1,i1)      = taiai(a,i,a1,i1)
#
     ENDPARDO a, i, a1, i1
#
#    Form T2old_bb. 
#    -------------- 
#
     PARDO b, j, b1, j1
#
#          REQUEST/GET amplitude data from all 2 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST D0bjbj(b,j,b1,j1) b # kiter-2 amplitudes
           REQUEST D1bjbj(b,j,b1,j1) b # kiter-1 amplitudes
#
           REQUEST e1bjbj(b,j,b1,j1) b # kiter-1 amplitudes
           REQUEST e2bjbj(b,j,b1,j1) b # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> T2old_bb.
#          ---------------------------------------------------------
#
           t2bjbj(b,j,b1,j1)            = d0bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           += e1bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           *= c1
           tbjbj(b,j,b1,j1)             = t2bjbj(b,j,b1,j1)
#
           t2bjbj(b,j,b1,j1)            = d1bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           += e2bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           *= c2
           tbjbj(b,j,b1,j1)            += t2bjbj(b,j,b1,j1)
#
           PREPARE T2old_bb(b,j,b1,j1)      = tbjbj(b,j,b1,j1)
#
     ENDPARDO b, j, b1, j1
#
#    Form T2old_ab. 
#    -------------- 
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 2 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST D0aibj(a,i,b,j) a # kiter-2 amplitudes
           REQUEST D1aibj(a,i,b,j) a # kiter-1 amplitudes
#
           REQUEST e1aibj(a,i,b,j) a # kiter-1 amplitudes
           REQUEST e2aibj(a,i,b,j) a # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> T2old_ab.
#          ---------------------------------------------------------
#
           t2aibj(a,i,b,j)            = d0aibj(a,i,b,j)
           t2aibj(a,i,b,j)           += e1aibj(a,i,b,j)
           t2aibj(a,i,b,j)           *= c1
           taibj(a,i,b,j)             = t2aibj(a,i,b,j)
#
           t2aibj(a,i,b,j)            = d1aibj(a,i,b,j)
           t2aibj(a,i,b,j)           += e2aibj(a,i,b,j)
           t2aibj(a,i,b,j)           *= c2
           taibj(a,i,b,j)            += t2aibj(a,i,b,j)
#
           PREPARE T2old_ab(a,i,b,j)      = taibj(a,i,b,j)
#
     ENDPARDO a, i, b, j
#
#    Form tai_old. 
#    ------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 2 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET D0ai(a,i)     # kiter-2 amplitudes  
           GET D1ai(a,i)     # kiter-1 amplitudes  
#
           GET e1ai(a,i)     # kiter-1 amplitudes  
           GET e2ai(a,i)     # kiter-0 amplitudes  
#
#          Compute contributions to updated amplitudes --> tai_old. 
#          --------------------------------------------------------  
# 
           t1ai(a,i)     = d0ai(a,i) 
           t1ai(a,i)    += e1ai(a,i) 
           t1ai(a,i)    *= c1  
           tai(a,i)      = t1ai(a,i) 
#
           t1ai(a,i)     = d1ai(a,i) 
           t1ai(a,i)    += e2ai(a,i) 
           t1ai(a,i)    *= c2  
           tai(a,i)     += t1ai(a,i) 
# 
           PUT t1a_old(a,i) = tai(a,i) 
#
     ENDPARDO a, i  
#
#    Form tbj_old. 
#    ------------- 
#
     PARDO b, j  
#
#          REQUEST/GET amplitude data from all 2 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET D0bj(b,j)     # kiter-2 amplitudes  
           GET D1bj(b,j)     # kiter-1 amplitudes  
#
           GET e1bj(b,j)     # kiter-1 amplitudes  
           GET e2bj(b,j)     # kiter-0 amplitudes  
#
#          Compute contributions to updated amplitudes --> tbj_old. 
#          --------------------------------------------------------  
# 
           t1bj(b,j)     = d0bj(b,j) 
           t1bj(b,j)    += e1bj(b,j) 
           t1bj(b,j)    *= c1  
           tbj(b,j)      = t1bj(b,j) 
# 
           t1bj(b,j)     = d1bj(b,j) 
           t1bj(b,j)    += e2bj(b,j) 
           t1bj(b,j)    *= c2  
           tbj(b,j)     += t1bj(b,j) 
# 
           PUT t1b_old(b,j) = tbj(b,j) 
# 
     ENDPARDO b, j 
#
     execute sip_barrier 
     execute server_barrier 
#
     ENDPROC DIIS1  
#    ------------- 
#
# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
#
     PROC DIIS2  
#    ---------- 
#
#    Zero out scalars.
#    ----------------- 
#
     CALL ZERO_DSCALAR 
#
#    Determine the 'B-matrix'. 
#    ------------------------- 
#
#    Compute contributions due to T2aiai amplitudes. 
#    ----------------------------------------------- 
#
#
     PARDO a, i, a1, i1
#
#          REQUEST/GET amplitude data from all 3 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1aiai(a,i,a1,i1) a # kiter-2 amplitudes
           REQUEST e2aiai(a,i,a1,i1) a # kiter-1 amplitudes
           REQUEST e3aiai(a,i,a1,i1) a # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,3
#             ---------
#
              etemp = e1aiai(a,i,a1,i1)*e1aiai(a,i,a1,i1)
              b11  += etemp
#
              etemp = e1aiai(a,i,a1,i1)*e2aiai(a,i,a1,i1)
              b12  += etemp
#
              etemp = e1aiai(a,i,a1,i1)*e3aiai(a,i,a1,i1)
              b13  += etemp
#
#             b1x x=2,3
#             ---------
#
              etemp = e2aiai(a,i,a1,i1)*e2aiai(a,i,a1,i1)
              b22  += etemp
#
              etemp = e2aiai(a,i,a1,i1)*e3aiai(a,i,a1,i1)
              b23  += etemp
#
#             b1x x=3,3
#             ---------
#
              etemp = e3aiai(a,i,a1,i1)*e3aiai(a,i,a1,i1)
              b33  += etemp
#
     ENDPARDO a, i, a1, i1
#
#    Compute contributions due to T2bjbj amplitudes.
#    -----------------------------------------------
#
     PARDO b, j, b1, j1
#
#          REQUEST/GET amplitude data from all 3 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1bjbj(b,j,b1,j1) b # kiter-2 amplitudes
           REQUEST e2bjbj(b,j,b1,j1) b # kiter-1 amplitudes
           REQUEST e3bjbj(b,j,b1,j1) b # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,3
#             ---------
#
              etemp = e1bjbj(b,j,b1,j1)*e1bjbj(b,j,b1,j1)
              b11  += etemp
#
              etemp = e1bjbj(b,j,b1,j1)*e2bjbj(b,j,b1,j1)
              b12  += etemp
#
              etemp = e1bjbj(b,j,b1,j1)*e3bjbj(b,j,b1,j1)
              b13  += etemp
#
#             b1x x=2,3
#             ---------
#
              etemp = e2bjbj(b,j,b1,j1)*e2bjbj(b,j,b1,j1)
              b22  += etemp
#
              etemp = e2bjbj(b,j,b1,j1)*e3bjbj(b,j,b1,j1)
              b23  += etemp
#
#             b1x x=3,3
#             ---------
#
              etemp = e3bjbj(b,j,b1,j1)*e3bjbj(b,j,b1,j1)
              b33  += etemp
#
     ENDPARDO b, j, b1, j1
#
#    Compute contributions due to T2aibj amplitudes.
#    -----------------------------------------------
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 3 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1aibj(a,i,b,j) a # kiter-2 amplitudes
           REQUEST e2aibj(a,i,b,j) a # kiter-1 amplitudes
           REQUEST e3aibj(a,i,b,j) a # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,3
#             ---------
#
              etemp = e1aibj(a,i,b,j)*e1aibj(a,i,b,j)
              etemp *= 4.0
              b11  += etemp
#
              etemp = e1aibj(a,i,b,j)*e2aibj(a,i,b,j)
              etemp *= 4.0
              b12  += etemp
#
              etemp = e1aibj(a,i,b,j)*e3aibj(a,i,b,j)
              etemp *= 4.0
              b13  += etemp
#
#             b1x x=2,3
#             ---------
#
              etemp = e2aibj(a,i,b,j)*e2aibj(a,i,b,j)
              etemp *= 4.0
              b22  += etemp
#
              etemp = e2aibj(a,i,b,j)*e3aibj(a,i,b,j)
              etemp *= 4.0
              b23  += etemp
#
#             b1x x=3,3
#             ---------
#
              etemp = e3aibj(a,i,b,j)*e3aibj(a,i,b,j)
              etemp *= 4.0
              b33  += etemp
#
     ENDPARDO a, i, b, j
#
#    Compute contributions due to T1ai amplitudes. 
#    --------------------------------------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 4 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET e1ai(a,i)    # kiter-2 amplitudes  
           GET e2ai(a,i)    # kiter-1 amplitudes  
           GET e3ai(a,i)    # kiter-0 amplitudes  
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#             b1x x=1,3 
#             --------- 
#
              etemp = e1ai(a,i)*e1ai(a,i) 
              etemp *= 4.0
              b11  += etemp            
#
              etemp = e1ai(a,i)*e2ai(a,i) 
              etemp *= 4.0
              b12  += etemp            
#
              etemp = e1ai(a,i)*e3ai(a,i) 
              etemp *= 4.0
              b13  += etemp            
#
#             b1x x=2,3 
#             --------- 
#
              etemp = e2ai(a,i)*e2ai(a,i) 
              etemp *= 4.0
              b22  += etemp            
#
              etemp = e2ai(a,i)*e3ai(a,i) 
              etemp *= 4.0
              b23  += etemp            
#
#             b1x x=3,3 
#             --------- 
#
              etemp = e3ai(a,i)*e3ai(a,i) 
              etemp *= 4.0
              b33  += etemp            
#
     ENDPARDO a, i 
#
#    Compute contributions due to T1bj amplitudes. 
#    --------------------------------------------- 
#
     PARDO b, j  
#
#          REQUEST/GET amplitude data from all 3 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET e1bj(b,j)    # kiter-2 amplitudes  
           GET e2bj(b,j)    # kiter-1 amplitudes  
           GET e3bj(b,j)    # kiter-0 amplitudes  
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#             b1x x=1,3 
#             --------- 
#
              etemp = e1bj(b,j)*e1bj(b,j) 
              etemp *= 4.0
              b11  += etemp            
#
              etemp = e1bj(b,j)*e2bj(b,j) 
              etemp *= 4.0
              b12  += etemp            
#
              etemp = e1bj(b,j)*e3bj(b,j) 
              etemp *= 4.0
              b13  += etemp            
#
#             b1x x=2,3 
#             --------- 
#
              etemp = e2bj(b,j)*e2bj(b,j) 
              etemp *= 4.0
              b22  += etemp            
#
              etemp = e2bj(b,j)*e3bj(b,j) 
              etemp *= 4.0
              b23  += etemp            
#
#             b1x x=3,3 
#             --------- 
#
              etemp = e3bj(b,j)*e3bj(b,j) 
              etemp *= 4.0
              b33  += etemp            
#
     ENDPARDO b, j 
#
     execute sip_barrier
     execute server_barrier 
#
#    Collectively sum B-matrix elements. 
#    -----------------------------------
#
     collective Tb11 += b11 
     collective Tb12 += b12 
     collective Tb13 += b13 
     collective Tb22 += b22 
     collective Tb23 += b23 
     collective Tb33 += b33 
#
#    Now the unique elements of the 'B-matrix' have been computed and the array filled out. 
#    --------------------------------------------------------------------------------------
#
#    Put the elements of the 'B-matrix', which have been computed as scalars into the  
#    R-matrix. 
#    -------------------------------------------------------------------------------- 
#
     CALL SETUP_DIIS 
#
     execute compute_diis # --> New instruction  
#
     c1 = Tb11 
     c2 = Tb22 
     c3 = Tb33 
    #execute print_scalar c1 
    #execute print_scalar c2 
    #execute print_scalar c3 
#
#    Done computing the c-vector. 
#    ---------------------------- 
#
#    Form the updated amplitudes using the c-vector. 
#    -----------------------------------------------  
#
#    Form T2old_aa. 
#    -------------- 
#
     PARDO a, i, a1, i1
#
#          REQUEST/GET amplitude data from all 3 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST d0aiai(a,i,a1,i1) a # kiter-3 amplitudes
           REQUEST d1aiai(a,i,a1,i1) a # kiter-2 amplitudes
           REQUEST d2aiai(a,i,a1,i1) a # kiter-1 amplitudes
#
           REQUEST e1aiai(a,i,a1,i1) a # kiter-2 amplitudes
           REQUEST e2aiai(a,i,a1,i1) a # kiter-1 amplitudes
           REQUEST e3aiai(a,i,a1,i1) a # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> T2old_aa.
#          ---------------------------------------------------------
#
           t2aiai(a,i,a1,i1)            = d0aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           += e1aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           *= c1
           taiai(a,i,a1,i1)             = t2aiai(a,i,a1,i1)
#
           t2aiai(a,i,a1,i1)            = d1aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           += e2aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           *= c2
           taiai(a,i,a1,i1)            += t2aiai(a,i,a1,i1)
#
           t2aiai(a,i,a1,i1)            = d2aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           += e3aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           *= c3
           taiai(a,i,a1,i1)            += t2aiai(a,i,a1,i1)
#
           PREPARE T2old_aa(a,i,a1,i1)      = taiai(a,i,a1,i1)
#
     ENDPARDO a, i, a1, i1
#
#    Form T2old_bb. 
#    -------------- 
#
     PARDO b, j, b1, j1
#
#          REQUEST/GET amplitude data from all 3 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST D0bjbj(b,j,b1,j1) b # kiter-3 amplitudes
           REQUEST D1bjbj(b,j,b1,j1) b # kiter-2 amplitudes
           REQUEST D2bjbj(b,j,b1,j1) b # kiter-1 amplitudes
#
           REQUEST e1bjbj(b,j,b1,j1) b # kiter-2 amplitudes
           REQUEST e2bjbj(b,j,b1,j1) b # kiter-1 amplitudes
           REQUEST e3bjbj(b,j,b1,j1) b # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> T2old_bb.
#          ---------------------------------------------------------
#
           t2bjbj(b,j,b1,j1)            = d0bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           += e1bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           *= c1
           tbjbj(b,j,b1,j1)             = t2bjbj(b,j,b1,j1)
#
           t2bjbj(b,j,b1,j1)            = d1bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           += e2bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           *= c2
           tbjbj(b,j,b1,j1)            += t2bjbj(b,j,b1,j1)
#
           t2bjbj(b,j,b1,j1)            = d2bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           += e3bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           *= c3
           tbjbj(b,j,b1,j1)            += t2bjbj(b,j,b1,j1)
#
           PREPARE T2old_bb(b,j,b1,j1)      = tbjbj(b,j,b1,j1)
#
     ENDPARDO b, j, b1, j1
#
#    Form T2old_ab. 
#    -------------- 
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 3 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST D0aibj(a,i,b,j) a # kiter-3 amplitudes
           REQUEST D1aibj(a,i,b,j) a # kiter-2 amplitudes
           REQUEST D2aibj(a,i,b,j) a # kiter-1 amplitudes
#
           REQUEST e1aibj(a,i,b,j) a # kiter-2 amplitudes
           REQUEST e2aibj(a,i,b,j) a # kiter-1 amplitudes
           REQUEST e3aibj(a,i,b,j) a # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> T2old_ab.
#          ---------------------------------------------------------
#
           t2aibj(a,i,b,j)            = d0aibj(a,i,b,j)
           t2aibj(a,i,b,j)           += e1aibj(a,i,b,j)
           t2aibj(a,i,b,j)           *= c1
           taibj(a,i,b,j)             = t2aibj(a,i,b,j)
#
           t2aibj(a,i,b,j)            = d1aibj(a,i,b,j)
           t2aibj(a,i,b,j)           += e2aibj(a,i,b,j)
           t2aibj(a,i,b,j)           *= c2
           taibj(a,i,b,j)            += t2aibj(a,i,b,j)
#
           t2aibj(a,i,b,j)            = d2aibj(a,i,b,j)
           t2aibj(a,i,b,j)           += e3aibj(a,i,b,j)
           t2aibj(a,i,b,j)           *= c3
           taibj(a,i,b,j)            += t2aibj(a,i,b,j)
#
           PREPARE T2old_ab(a,i,b,j)      = taibj(a,i,b,j)
#
     ENDPARDO a, i, b, j
#
#    Form tai_old. 
#    ------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 3 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET D0ai(a,i)     # kiter-3 amplitudes  
           GET D1ai(a,i)     # kiter-2 amplitudes  
           GET D2ai(a,i)     # kiter-1 amplitudes  
#
           GET e1ai(a,i)     # kiter-2 amplitudes  
           GET e2ai(a,i)     # kiter-1 amplitudes  
           GET e3ai(a,i)     # kiter-0 amplitudes  
#
#          Compute contributions to updated amplitudes --> tai_old. 
#          --------------------------------------------------------  
# 
           t1ai(a,i)     = d0ai(a,i) 
           t1ai(a,i)    += e1ai(a,i) 
           t1ai(a,i)    *= c1  
           tai(a,i)      = t1ai(a,i) 
#
           t1ai(a,i)     = d1ai(a,i) 
           t1ai(a,i)    += e2ai(a,i) 
           t1ai(a,i)    *= c2  
           tai(a,i)     += t1ai(a,i) 
#
           t1ai(a,i)     = d2ai(a,i) 
           t1ai(a,i)    += e3ai(a,i) 
           t1ai(a,i)    *= c3  
           tai(a,i)     += t1ai(a,i) 
# 
           PUT t1a_old(a,i) = tai(a,i) 
#
     ENDPARDO a, i  
#
#    Form tbj_old. 
#    ------------- 
#
     PARDO b, j  
#
#          REQUEST/GET amplitude data from all 3 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET D0bj(b,j)     # kiter-3 amplitudes  
           GET D1bj(b,j)     # kiter-2 amplitudes  
           GET D2bj(b,j)     # kiter-1 amplitudes  
#
           GET e1bj(b,j)     # kiter-2 amplitudes  
           GET e2bj(b,j)     # kiter-1 amplitudes  
           GET e3bj(b,j)     # kiter-0 amplitudes  
#
#          Compute contributions to updated amplitudes --> tbj_old. 
#          --------------------------------------------------------  
# 
           t1bj(b,j)     = d0bj(b,j) 
           t1bj(b,j)    += e1bj(b,j) 
           t1bj(b,j)    *= c1  
           tbj(b,j)      = t1bj(b,j) 
# 
           t1bj(b,j)     = d1bj(b,j) 
           t1bj(b,j)    += e2bj(b,j) 
           t1bj(b,j)    *= c2  
           tbj(b,j)     += t1bj(b,j) 
# 
           t1bj(b,j)     = d2bj(b,j) 
           t1bj(b,j)    += e3bj(b,j) 
           t1bj(b,j)    *= c3  
           tbj(b,j)     += t1bj(b,j) 
# 
           PUT t1b_old(b,j) = tbj(b,j) 
# 
     ENDPARDO b, j 
#
     execute sip_barrier 
     execute server_barrier 
#
     ENDPROC DIIS2  
#    ------------- 
#
# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
#
     PROC DIIS3  
#    ---------- 
#
#    Zero out scalars.
#    ----------------- 
#
     CALL ZERO_DSCALAR 
#
#    Determine the 'B-matrix'. 
#    ------------------------- 
#
#    Compute contributions due to T2aiai amplitudes. 
#    ----------------------------------------------- 
#
#
     PARDO a, i, a1, i1
#
#          REQUEST/GET amplitude data from all 4 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1aiai(a,i,a1,i1) a # kiter-3 amplitudes
           REQUEST e2aiai(a,i,a1,i1) a # kiter-2 amplitudes
           REQUEST e3aiai(a,i,a1,i1) a # kiter-1 amplitudes
           REQUEST e4aiai(a,i,a1,i1) a # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,4
#             ---------
#
              etemp = e1aiai(a,i,a1,i1)*e1aiai(a,i,a1,i1)
              b11  += etemp
#
              etemp = e1aiai(a,i,a1,i1)*e2aiai(a,i,a1,i1)
              b12  += etemp
#
              etemp = e1aiai(a,i,a1,i1)*e3aiai(a,i,a1,i1)
              b13  += etemp
#
              etemp = e1aiai(a,i,a1,i1)*e4aiai(a,i,a1,i1)
              b14  += etemp
#
#             b1x x=2,4
#             ---------
#
              etemp = e2aiai(a,i,a1,i1)*e2aiai(a,i,a1,i1)
              b22  += etemp
#
              etemp = e2aiai(a,i,a1,i1)*e3aiai(a,i,a1,i1)
              b23  += etemp
#
              etemp = e2aiai(a,i,a1,i1)*e4aiai(a,i,a1,i1)
              b24  += etemp
#
#             b1x x=3,4
#             ---------
#
              etemp = e3aiai(a,i,a1,i1)*e3aiai(a,i,a1,i1)
              b33  += etemp
#
              etemp = e3aiai(a,i,a1,i1)*e4aiai(a,i,a1,i1)
              b34  += etemp
#
#             b1x x=4,4
#             ---------
#
              etemp = e4aiai(a,i,a1,i1)*e4aiai(a,i,a1,i1)
              b44  += etemp
#
     ENDPARDO a, i, a1, i1
#
#    Compute contributions due to T2bjbj amplitudes.
#    -----------------------------------------------
#
     PARDO b, j, b1, j1
#
#          REQUEST/GET amplitude data from all 4 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1bjbj(b,j,b1,j1) b # kiter-3 amplitudes
           REQUEST e2bjbj(b,j,b1,j1) b # kiter-2 amplitudes
           REQUEST e3bjbj(b,j,b1,j1) b # kiter-1 amplitudes
           REQUEST e4bjbj(b,j,b1,j1) b # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,4
#             ---------
#
              etemp = e1bjbj(b,j,b1,j1)*e1bjbj(b,j,b1,j1)
              b11  += etemp
#
              etemp = e1bjbj(b,j,b1,j1)*e2bjbj(b,j,b1,j1)
              b12  += etemp
#
              etemp = e1bjbj(b,j,b1,j1)*e3bjbj(b,j,b1,j1)
              b13  += etemp
#
              etemp = e1bjbj(b,j,b1,j1)*e4bjbj(b,j,b1,j1)
              b14  += etemp
#
#             b1x x=2,4
#             ---------
#
              etemp = e2bjbj(b,j,b1,j1)*e2bjbj(b,j,b1,j1)
              b22  += etemp
#
              etemp = e2bjbj(b,j,b1,j1)*e3bjbj(b,j,b1,j1)
              b23  += etemp
#
              etemp = e2bjbj(b,j,b1,j1)*e4bjbj(b,j,b1,j1)
              b24  += etemp
#
#             b1x x=3,4
#             ---------
#
              etemp = e3bjbj(b,j,b1,j1)*e3bjbj(b,j,b1,j1)
              b33  += etemp
#
              etemp = e3bjbj(b,j,b1,j1)*e4bjbj(b,j,b1,j1)
              b34  += etemp
#
#             b1x x=4,4
#             ---------
#
              etemp = e4bjbj(b,j,b1,j1)*e4bjbj(b,j,b1,j1)
              b44  += etemp
#
     ENDPARDO b, j, b1, j1
#
#    Compute contributions due to T2aibj amplitudes.
#    -----------------------------------------------
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 4 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1aibj(a,i,b,j) a # kiter-3 amplitudes
           REQUEST e2aibj(a,i,b,j) a # kiter-2 amplitudes
           REQUEST e3aibj(a,i,b,j) a # kiter-1 amplitudes
           REQUEST e4aibj(a,i,b,j) a # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,4
#             ---------
#
              etemp = e1aibj(a,i,b,j)*e1aibj(a,i,b,j)
              etemp *= 4.0
              b11  += etemp
#
              etemp = e1aibj(a,i,b,j)*e2aibj(a,i,b,j)
              etemp *= 4.0
              b12  += etemp
#
              etemp = e1aibj(a,i,b,j)*e3aibj(a,i,b,j)
              etemp *= 4.0
              b13  += etemp
#
              etemp = e1aibj(a,i,b,j)*e4aibj(a,i,b,j)
              etemp *= 4.0
              b14  += etemp
#
#             b1x x=2,4
#             ---------
#
              etemp = e2aibj(a,i,b,j)*e2aibj(a,i,b,j)
              etemp *= 4.0
              b22  += etemp
#
              etemp = e2aibj(a,i,b,j)*e3aibj(a,i,b,j)
              etemp *= 4.0
              b23  += etemp
#
              etemp = e2aibj(a,i,b,j)*e4aibj(a,i,b,j)
              etemp *= 4.0
              b24  += etemp
#
#             b1x x=3,4
#             ---------
#
              etemp = e3aibj(a,i,b,j)*e3aibj(a,i,b,j)
              etemp *= 4.0
              b33  += etemp
#
              etemp = e3aibj(a,i,b,j)*e4aibj(a,i,b,j)
              etemp *= 4.0
              b34  += etemp
#
#             b1x x=4,4
#             ---------
#
              etemp = e4aibj(a,i,b,j)*e4aibj(a,i,b,j)
              etemp *= 4.0
              b44  += etemp
#
     ENDPARDO a, i, b, j
#
#    Compute contributions due to T1ai amplitudes. 
#    --------------------------------------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 4 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET e1ai(a,i)    # kiter-3 amplitudes  
           GET e2ai(a,i)    # kiter-2 amplitudes  
           GET e3ai(a,i)    # kiter-1 amplitudes  
           GET e4ai(a,i)    # kiter-0 amplitudes  
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#             b1x x=1,4 
#             --------- 
#
              etemp = e1ai(a,i)*e1ai(a,i) 
              etemp *= 4.0
              b11  += etemp            
#
              etemp = e1ai(a,i)*e2ai(a,i) 
              etemp *= 4.0
              b12  += etemp            
#
              etemp = e1ai(a,i)*e3ai(a,i) 
              etemp *= 4.0
              b13  += etemp            
#
              etemp = e1ai(a,i)*e4ai(a,i) 
              etemp *= 4.0
              b14  += etemp            
#
#             b1x x=2,4 
#             --------- 
#
              etemp = e2ai(a,i)*e2ai(a,i) 
              etemp *= 4.0
              b22  += etemp            
#
              etemp = e2ai(a,i)*e3ai(a,i) 
              etemp *= 4.0
              b23  += etemp            
#
              etemp = e2ai(a,i)*e4ai(a,i) 
              etemp *= 4.0
              b24  += etemp            
#
#             b1x x=3,4 
#             --------- 
#
              etemp = e3ai(a,i)*e3ai(a,i) 
              etemp *= 4.0
              b33  += etemp            
#
              etemp = e3ai(a,i)*e4ai(a,i) 
              etemp *= 4.0
              b34  += etemp            
#
#             b1x x=4,4 
#             --------- 
#
              etemp = e4ai(a,i)*e4ai(a,i) 
              etemp *= 4.0
              b44  += etemp            
#
     ENDPARDO a, i 
#
#    Compute contributions due to T1bj amplitudes. 
#    --------------------------------------------- 
#
     PARDO b, j  
#
#          REQUEST/GET amplitude data from all 4 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET e1bj(b,j)    # kiter-3 amplitudes  
           GET e2bj(b,j)    # kiter-2 amplitudes  
           GET e3bj(b,j)    # kiter-1 amplitudes  
           GET e4bj(b,j)    # kiter-0 amplitudes  
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#             b1x x=1,4 
#             --------- 
#
              etemp = e1bj(b,j)*e1bj(b,j) 
              etemp *= 4.0
              b11  += etemp            
#
              etemp = e1bj(b,j)*e2bj(b,j) 
              etemp *= 4.0
              b12  += etemp            
#
              etemp = e1bj(b,j)*e3bj(b,j) 
              etemp *= 4.0
              b13  += etemp            
#
              etemp = e1bj(b,j)*e4bj(b,j) 
              etemp *= 4.0
              b14  += etemp            
#
#             b1x x=2,4 
#             --------- 
#
              etemp = e2bj(b,j)*e2bj(b,j) 
              etemp *= 4.0
              b22  += etemp            
#
              etemp = e2bj(b,j)*e3bj(b,j) 
              etemp *= 4.0
              b23  += etemp            
#
              etemp = e2bj(b,j)*e4bj(b,j) 
              etemp *= 4.0
              b24  += etemp            
#
#             b1x x=3,4 
#             --------- 
#
              etemp = e3bj(b,j)*e3bj(b,j) 
              etemp *= 4.0
              b33  += etemp            
#
              etemp = e3bj(b,j)*e4bj(b,j) 
              etemp *= 4.0
              b34  += etemp            
#
#             b1x x=4,4 
#             --------- 
#
              etemp = e4bj(b,j)*e4bj(b,j) 
              etemp *= 4.0
              b44  += etemp            
#
     ENDPARDO b, j 
#
     execute sip_barrier
     execute server_barrier 
#
#    Collectively sum B-matrix elements. 
#    -----------------------------------
#
     collective Tb11 += b11 
     collective Tb12 += b12 
     collective Tb13 += b13 
     collective Tb14 += b14 
     collective Tb22 += b22 
     collective Tb23 += b23 
     collective Tb24 += b24 
     collective Tb33 += b33 
     collective Tb34 += b34 
     collective Tb44 += b44 
#
#    Now the unique elements of the 'B-matrix' have been computed and the array filled out. 
#    --------------------------------------------------------------------------------------
#
#    Put the elements of the 'B-matrix', which have been computed as scalars into the  
#    R-matrix. 
#    -------------------------------------------------------------------------------- 
#
     CALL SETUP_DIIS 
#
     execute compute_diis # --> New instruction  
#
     c1 = Tb11 
     c2 = Tb22 
     c3 = Tb33 
     c4 = Tb44 
    #execute print_scalar c1 
    #execute print_scalar c2 
    #execute print_scalar c3 
    #execute print_scalar c4 
#
#    Done computing the c-vector. 
#    ---------------------------- 
#
#    Form the updated amplitudes using the c-vector. 
#    -----------------------------------------------  
#
#    Form T2old_aa. 
#    -------------- 
#
     PARDO a, i, a1, i1
#
#          REQUEST/GET amplitude data from all 4 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST d0aiai(a,i,a1,i1) a # kiter-4 amplitudes
           REQUEST d1aiai(a,i,a1,i1) a # kiter-3 amplitudes
           REQUEST d2aiai(a,i,a1,i1) a # kiter-2 amplitudes
           REQUEST d3aiai(a,i,a1,i1) a # kiter-1 amplitudes
#
           REQUEST e1aiai(a,i,a1,i1) a # kiter-3 amplitudes
           REQUEST e2aiai(a,i,a1,i1) a # kiter-2 amplitudes
           REQUEST e3aiai(a,i,a1,i1) a # kiter-1 amplitudes
           REQUEST e4aiai(a,i,a1,i1) a # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> T2old_aa.
#          ---------------------------------------------------------
#
           t2aiai(a,i,a1,i1)            = d0aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           += e1aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           *= c1
           taiai(a,i,a1,i1)             = t2aiai(a,i,a1,i1)
#
           t2aiai(a,i,a1,i1)            = d1aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           += e2aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           *= c2
           taiai(a,i,a1,i1)            += t2aiai(a,i,a1,i1)
#
           t2aiai(a,i,a1,i1)            = d2aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           += e3aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           *= c3
           taiai(a,i,a1,i1)            += t2aiai(a,i,a1,i1)
#
           t2aiai(a,i,a1,i1)            = d3aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           += e4aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           *= c4
           taiai(a,i,a1,i1)            += t2aiai(a,i,a1,i1)
#
           PREPARE T2old_aa(a,i,a1,i1)      = taiai(a,i,a1,i1)
#
     ENDPARDO a, i, a1, i1
#
#    Form T2old_bb. 
#    -------------- 
#
     PARDO b, j, b1, j1
#
#          REQUEST/GET amplitude data from all 4 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST D0bjbj(b,j,b1,j1) b # kiter-4 amplitudes
           REQUEST D1bjbj(b,j,b1,j1) b # kiter-3 amplitudes
           REQUEST D2bjbj(b,j,b1,j1) b # kiter-2 amplitudes
           REQUEST D3bjbj(b,j,b1,j1) b # kiter-1 amplitudes
#
           REQUEST e1bjbj(b,j,b1,j1) b # kiter-3 amplitudes
           REQUEST e2bjbj(b,j,b1,j1) b # kiter-2 amplitudes
           REQUEST e3bjbj(b,j,b1,j1) b # kiter-1 amplitudes
           REQUEST e4bjbj(b,j,b1,j1) b # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> T2old_bb.
#          ---------------------------------------------------------
#
           t2bjbj(b,j,b1,j1)            = d0bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           += e1bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           *= c1
           tbjbj(b,j,b1,j1)             = t2bjbj(b,j,b1,j1)
#
           t2bjbj(b,j,b1,j1)            = d1bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           += e2bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           *= c2
           tbjbj(b,j,b1,j1)            += t2bjbj(b,j,b1,j1)
#
           t2bjbj(b,j,b1,j1)            = d2bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           += e3bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           *= c3
           tbjbj(b,j,b1,j1)            += t2bjbj(b,j,b1,j1)
#
           t2bjbj(b,j,b1,j1)            = d3bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           += e4bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           *= c4
           tbjbj(b,j,b1,j1)            += t2bjbj(b,j,b1,j1)
#
           PREPARE T2old_bb(b,j,b1,j1)      = tbjbj(b,j,b1,j1)
#
     ENDPARDO b, j, b1, j1
#
#    Form T2old_ab. 
#    -------------- 
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 4 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST D0aibj(a,i,b,j) a # kiter-4 amplitudes
           REQUEST D1aibj(a,i,b,j) a # kiter-3 amplitudes
           REQUEST D2aibj(a,i,b,j) a # kiter-2 amplitudes
           REQUEST D3aibj(a,i,b,j) a # kiter-1 amplitudes
#
           REQUEST e1aibj(a,i,b,j) a # kiter-3 amplitudes
           REQUEST e2aibj(a,i,b,j) a # kiter-2 amplitudes
           REQUEST e3aibj(a,i,b,j) a # kiter-1 amplitudes
           REQUEST e4aibj(a,i,b,j) a # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> T2old_ab.
#          ---------------------------------------------------------
#
           t2aibj(a,i,b,j)            = d0aibj(a,i,b,j)
           t2aibj(a,i,b,j)           += e1aibj(a,i,b,j)
           t2aibj(a,i,b,j)           *= c1
           taibj(a,i,b,j)             = t2aibj(a,i,b,j)
#
           t2aibj(a,i,b,j)            = d1aibj(a,i,b,j)
           t2aibj(a,i,b,j)           += e2aibj(a,i,b,j)
           t2aibj(a,i,b,j)           *= c2
           taibj(a,i,b,j)            += t2aibj(a,i,b,j)
#
           t2aibj(a,i,b,j)            = d2aibj(a,i,b,j)
           t2aibj(a,i,b,j)           += e3aibj(a,i,b,j)
           t2aibj(a,i,b,j)           *= c3
           taibj(a,i,b,j)            += t2aibj(a,i,b,j)
#
           t2aibj(a,i,b,j)            = d3aibj(a,i,b,j)
           t2aibj(a,i,b,j)           += e4aibj(a,i,b,j)
           t2aibj(a,i,b,j)           *= c4
           taibj(a,i,b,j)            += t2aibj(a,i,b,j)
#
           PREPARE T2old_ab(a,i,b,j)      = taibj(a,i,b,j)
#
     ENDPARDO a, i, b, j
#
#    Form tai_old. 
#    ------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 4 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET D0ai(a,i)     # kiter-4 amplitudes  
           GET D1ai(a,i)     # kiter-3 amplitudes  
           GET D2ai(a,i)     # kiter-2 amplitudes  
           GET D3ai(a,i)     # kiter-1 amplitudes  
#
           GET e1ai(a,i)     # kiter-3 amplitudes  
           GET e2ai(a,i)     # kiter-2 amplitudes  
           GET e3ai(a,i)     # kiter-1 amplitudes  
           GET e4ai(a,i)     # kiter-0 amplitudes  
#
#          Compute contributions to updated amplitudes --> tai_old. 
#          --------------------------------------------------------  
# 
           t1ai(a,i)     = d0ai(a,i) 
           t1ai(a,i)    += e1ai(a,i) 
           t1ai(a,i)    *= c1  
           tai(a,i)      = t1ai(a,i) 
#
           t1ai(a,i)     = d1ai(a,i) 
           t1ai(a,i)    += e2ai(a,i) 
           t1ai(a,i)    *= c2  
           tai(a,i)     += t1ai(a,i) 
#
           t1ai(a,i)     = d2ai(a,i) 
           t1ai(a,i)    += e3ai(a,i) 
           t1ai(a,i)    *= c3  
           tai(a,i)     += t1ai(a,i) 
#
           t1ai(a,i)     = d3ai(a,i) 
           t1ai(a,i)    += e4ai(a,i) 
           t1ai(a,i)    *= c4  
           tai(a,i)     += t1ai(a,i) 
# 
           PUT t1a_old(a,i) = tai(a,i) 
#
     ENDPARDO a, i  
#
#    Form tbj_old. 
#    ------------- 
#
     PARDO b, j  
#
#          REQUEST/GET amplitude data from all 4 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET D0bj(b,j)     # kiter-4 amplitudes  
           GET D1bj(b,j)     # kiter-3 amplitudes  
           GET D2bj(b,j)     # kiter-2 amplitudes  
           GET D3bj(b,j)     # kiter-1 amplitudes  
#
           GET e1bj(b,j)     # kiter-3 amplitudes  
           GET e2bj(b,j)     # kiter-2 amplitudes  
           GET e3bj(b,j)     # kiter-1 amplitudes  
           GET e4bj(b,j)     # kiter-0 amplitudes  
#
#          Compute contributions to updated amplitudes --> tbj_old. 
#          --------------------------------------------------------  
# 
           t1bj(b,j)     = d0bj(b,j) 
           t1bj(b,j)    += e1bj(b,j) 
           t1bj(b,j)    *= c1  
           tbj(b,j)      = t1bj(b,j) 
# 
           t1bj(b,j)     = d1bj(b,j) 
           t1bj(b,j)    += e2bj(b,j) 
           t1bj(b,j)    *= c2  
           tbj(b,j)     += t1bj(b,j) 
# 
           t1bj(b,j)     = d2bj(b,j) 
           t1bj(b,j)    += e3bj(b,j) 
           t1bj(b,j)    *= c3  
           tbj(b,j)     += t1bj(b,j) 
# 
           t1bj(b,j)     = d3bj(b,j) 
           t1bj(b,j)    += e4bj(b,j) 
           t1bj(b,j)    *= c4  
           tbj(b,j)     += t1bj(b,j) 
# 
           PUT t1b_old(b,j) = tbj(b,j) 
# 
     ENDPARDO b, j 
#
     execute sip_barrier 
     execute server_barrier 
#
     ENDPROC DIIS3  
#    ------------- 
#
# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
#
     PROC DIIS4  
#    ---------- 
#
#    Zero out scalars.
#    ----------------- 
#
     CALL ZERO_DSCALAR 
#
#    Determine the 'B-matrix'. 
#    ------------------------- 
#
#    Compute contributions due to T2aiai amplitudes. 
#    ----------------------------------------------- 
#
#
     PARDO a, i, a1, i1
#
#          REQUEST/GET amplitude data from all 5 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1aiai(a,i,a1,i1) a # kiter-4 amplitudes
           REQUEST e2aiai(a,i,a1,i1) a # kiter-3 amplitudes
           REQUEST e3aiai(a,i,a1,i1) a # kiter-2 amplitudes
           REQUEST e4aiai(a,i,a1,i1) a # kiter-1 amplitudes
           REQUEST e5aiai(a,i,a1,i1) a # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,5
#             ---------
#
              etemp = e1aiai(a,i,a1,i1)*e1aiai(a,i,a1,i1)
              b11  += etemp
#
              etemp = e1aiai(a,i,a1,i1)*e2aiai(a,i,a1,i1)
              b12  += etemp
#
              etemp = e1aiai(a,i,a1,i1)*e3aiai(a,i,a1,i1)
              b13  += etemp
#
              etemp = e1aiai(a,i,a1,i1)*e4aiai(a,i,a1,i1)
              b14  += etemp
#
              etemp = e1aiai(a,i,a1,i1)*e5aiai(a,i,a1,i1)
              b15  += etemp
#
#             b1x x=2,5
#             ---------
#
              etemp = e2aiai(a,i,a1,i1)*e2aiai(a,i,a1,i1)
              b22  += etemp
#
              etemp = e2aiai(a,i,a1,i1)*e3aiai(a,i,a1,i1)
              b23  += etemp
#
              etemp = e2aiai(a,i,a1,i1)*e4aiai(a,i,a1,i1)
              b24  += etemp
#
              etemp = e2aiai(a,i,a1,i1)*e5aiai(a,i,a1,i1)
              b25  += etemp
#
#             b1x x=3,5
#             ---------
#
              etemp = e3aiai(a,i,a1,i1)*e3aiai(a,i,a1,i1)
              b33  += etemp
#
              etemp = e3aiai(a,i,a1,i1)*e4aiai(a,i,a1,i1)
              b34  += etemp
#
              etemp = e3aiai(a,i,a1,i1)*e5aiai(a,i,a1,i1)
              b35  += etemp
#
#             b1x x=4,5
#             ---------
#
              etemp = e4aiai(a,i,a1,i1)*e4aiai(a,i,a1,i1)
              b44  += etemp
#
              etemp = e4aiai(a,i,a1,i1)*e5aiai(a,i,a1,i1)
              b45  += etemp
#
#             b1x x=5,5
#             ---------
#
              etemp = e5aiai(a,i,a1,i1)*e5aiai(a,i,a1,i1)
              b55  += etemp
#
     ENDPARDO a, i, a1, i1
#
#    Compute contributions due to T2bjbj amplitudes.
#    -----------------------------------------------
#
     PARDO b, j, b1, j1
#
#          REQUEST/GET amplitude data from all 5 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1bjbj(b,j,b1,j1) b # kiter-4 amplitudes
           REQUEST e2bjbj(b,j,b1,j1) b # kiter-3 amplitudes
           REQUEST e3bjbj(b,j,b1,j1) b # kiter-2 amplitudes
           REQUEST e4bjbj(b,j,b1,j1) b # kiter-1 amplitudes
           REQUEST e5bjbj(b,j,b1,j1) b # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,5
#             ---------
#
              etemp = e1bjbj(b,j,b1,j1)*e1bjbj(b,j,b1,j1)
              b11  += etemp
#
              etemp = e1bjbj(b,j,b1,j1)*e2bjbj(b,j,b1,j1)
              b12  += etemp
#
              etemp = e1bjbj(b,j,b1,j1)*e3bjbj(b,j,b1,j1)
              b13  += etemp
#
              etemp = e1bjbj(b,j,b1,j1)*e4bjbj(b,j,b1,j1)
              b14  += etemp
#
              etemp = e1bjbj(b,j,b1,j1)*e5bjbj(b,j,b1,j1)
              b15  += etemp
#
#             b1x x=2,5
#             ---------
#
              etemp = e2bjbj(b,j,b1,j1)*e2bjbj(b,j,b1,j1)
              b22  += etemp
#
              etemp = e2bjbj(b,j,b1,j1)*e3bjbj(b,j,b1,j1)
              b23  += etemp
#
              etemp = e2bjbj(b,j,b1,j1)*e4bjbj(b,j,b1,j1)
              b24  += etemp
#
              etemp = e2bjbj(b,j,b1,j1)*e5bjbj(b,j,b1,j1)
              b25  += etemp
#
#             b1x x=3,5
#             ---------
#
              etemp = e3bjbj(b,j,b1,j1)*e3bjbj(b,j,b1,j1)
              b33  += etemp
#
              etemp = e3bjbj(b,j,b1,j1)*e4bjbj(b,j,b1,j1)
              b34  += etemp
#
              etemp = e3bjbj(b,j,b1,j1)*e5bjbj(b,j,b1,j1)
              b35  += etemp
#
#             b1x x=4,5
#             ---------
#
              etemp = e4bjbj(b,j,b1,j1)*e4bjbj(b,j,b1,j1)
              b44  += etemp
#
              etemp = e4bjbj(b,j,b1,j1)*e5bjbj(b,j,b1,j1)
              b45  += etemp
#
#             b1x x=5,5
#             ---------
#
              etemp = e5bjbj(b,j,b1,j1)*e5bjbj(b,j,b1,j1)
              b55  += etemp
#
     ENDPARDO b, j, b1, j1
#
#    Compute contributions due to T2aibj amplitudes.
#    -----------------------------------------------
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 5 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1aibj(a,i,b,j) a # kiter-4 amplitudes
           REQUEST e2aibj(a,i,b,j) a # kiter-3 amplitudes
           REQUEST e3aibj(a,i,b,j) a # kiter-2 amplitudes
           REQUEST e4aibj(a,i,b,j) a # kiter-1 amplitudes
           REQUEST e5aibj(a,i,b,j) a # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,5
#             ---------
#
              etemp = e1aibj(a,i,b,j)*e1aibj(a,i,b,j)
              etemp *= 4.0
              b11  += etemp
#
              etemp = e1aibj(a,i,b,j)*e2aibj(a,i,b,j)
              etemp *= 4.0
              b12  += etemp
#
              etemp = e1aibj(a,i,b,j)*e3aibj(a,i,b,j)
              etemp *= 4.0
              b13  += etemp
#
              etemp = e1aibj(a,i,b,j)*e4aibj(a,i,b,j)
              etemp *= 4.0
              b14  += etemp
#
              etemp = e1aibj(a,i,b,j)*e5aibj(a,i,b,j)
              etemp *= 4.0
              b15  += etemp
#
#             b1x x=2,5
#             ---------
#
              etemp = e2aibj(a,i,b,j)*e2aibj(a,i,b,j)
              etemp *= 4.0
              b22  += etemp
#
              etemp = e2aibj(a,i,b,j)*e3aibj(a,i,b,j)
              etemp *= 4.0
              b23  += etemp
#
              etemp = e2aibj(a,i,b,j)*e4aibj(a,i,b,j)
              etemp *= 4.0
              b24  += etemp
#
              etemp = e2aibj(a,i,b,j)*e5aibj(a,i,b,j)
              etemp *= 4.0
              b25  += etemp
#
#             b1x x=3,5
#             ---------
#
              etemp = e3aibj(a,i,b,j)*e3aibj(a,i,b,j)
              etemp *= 4.0
              b33  += etemp
#
              etemp = e3aibj(a,i,b,j)*e4aibj(a,i,b,j)
              etemp *= 4.0
              b34  += etemp
#
              etemp = e3aibj(a,i,b,j)*e5aibj(a,i,b,j)
              etemp *= 4.0
              b35  += etemp
#
#             b1x x=4,5
#             ---------
#
              etemp = e4aibj(a,i,b,j)*e4aibj(a,i,b,j)
              etemp *= 4.0
              b44  += etemp
#
              etemp = e4aibj(a,i,b,j)*e5aibj(a,i,b,j)
              etemp *= 4.0
              b45  += etemp
#
#             b1x x=5,5
#             ---------
#
              etemp = e5aibj(a,i,b,j)*e5aibj(a,i,b,j)
              etemp *= 4.0
              b55  += etemp
#
     ENDPARDO a, i, b, j
#
#    Compute contributions due to T1ai amplitudes. 
#    --------------------------------------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 5 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET e1ai(a,i)    # kiter-4 amplitudes  
           GET e2ai(a,i)    # kiter-3 amplitudes  
           GET e3ai(a,i)    # kiter-2 amplitudes  
           GET e4ai(a,i)    # kiter-1 amplitudes  
           GET e5ai(a,i)    # kiter-0 amplitudes  
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#             b1x x=1,5 
#             --------- 
#
              etemp = e1ai(a,i)*e1ai(a,i) 
              etemp *= 4.0
              b11  += etemp            
#
              etemp = e1ai(a,i)*e2ai(a,i) 
              etemp *= 4.0
              b12  += etemp            
#
              etemp = e1ai(a,i)*e3ai(a,i) 
              etemp *= 4.0
              b13  += etemp            
#
              etemp = e1ai(a,i)*e4ai(a,i) 
              etemp *= 4.0
              b14  += etemp            
#
              etemp = e1ai(a,i)*e5ai(a,i) 
              etemp *= 4.0
              b15  += etemp            
#
#             b1x x=2,5 
#             --------- 
#
              etemp = e2ai(a,i)*e2ai(a,i) 
              etemp *= 4.0
              b22  += etemp            
#
              etemp = e2ai(a,i)*e3ai(a,i) 
              etemp *= 4.0
              b23  += etemp            
#
              etemp = e2ai(a,i)*e4ai(a,i) 
              etemp *= 4.0
              b24  += etemp            
#
              etemp = e2ai(a,i)*e5ai(a,i) 
              etemp *= 4.0
              b25  += etemp            
#
#             b1x x=3,5 
#             --------- 
#
              etemp = e3ai(a,i)*e3ai(a,i) 
              etemp *= 4.0
              b33  += etemp            
#
              etemp = e3ai(a,i)*e4ai(a,i) 
              etemp *= 4.0
              b34  += etemp            
#
              etemp = e3ai(a,i)*e5ai(a,i) 
              etemp *= 4.0
              b35  += etemp            
#
#             b1x x=4,5 
#             --------- 
#
              etemp = e4ai(a,i)*e4ai(a,i) 
              etemp *= 4.0
              b44  += etemp            
#
              etemp = e4ai(a,i)*e5ai(a,i) 
              etemp *= 4.0
              b45  += etemp            
#
#             b1x x=5,5 
#             --------- 
#
              etemp = e5ai(a,i)*e5ai(a,i) 
              etemp *= 4.0
              b55  += etemp            
#
     ENDPARDO a, i 
#
#    Compute contributions due to T1bj amplitudes. 
#    --------------------------------------------- 
#
     PARDO b, j  
#
#          REQUEST/GET amplitude data from all 5 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET e1bj(b,j)    # kiter-4 amplitudes  
           GET e2bj(b,j)    # kiter-3 amplitudes  
           GET e3bj(b,j)    # kiter-2 amplitudes  
           GET e4bj(b,j)    # kiter-1 amplitudes  
           GET e5bj(b,j)    # kiter-0 amplitudes  
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#             b1x x=1,5 
#             --------- 
#
              etemp = e1bj(b,j)*e1bj(b,j) 
              etemp *= 4.0
              b11  += etemp            
#
              etemp = e1bj(b,j)*e2bj(b,j) 
              etemp *= 4.0
              b12  += etemp            
#
              etemp = e1bj(b,j)*e3bj(b,j) 
              etemp *= 4.0
              b13  += etemp            
#
              etemp = e1bj(b,j)*e4bj(b,j) 
              etemp *= 4.0
              b14  += etemp            
#
              etemp = e1bj(b,j)*e5bj(b,j) 
              etemp *= 4.0
              b15  += etemp            
#
#             b1x x=2,5 
#             --------- 
#
              etemp = e2bj(b,j)*e2bj(b,j) 
              etemp *= 4.0
              b22  += etemp            
#
              etemp = e2bj(b,j)*e3bj(b,j) 
              etemp *= 4.0
              b23  += etemp            
#
              etemp = e2bj(b,j)*e4bj(b,j) 
              etemp *= 4.0
              b24  += etemp            
#
              etemp = e2bj(b,j)*e5bj(b,j) 
              etemp *= 4.0
              b25  += etemp            
#
#             b1x x=3,5 
#             --------- 
#
              etemp = e3bj(b,j)*e3bj(b,j) 
              etemp *= 4.0
              b33  += etemp            
#
              etemp = e3bj(b,j)*e4bj(b,j) 
              etemp *= 4.0
              b34  += etemp            
#
              etemp = e3bj(b,j)*e5bj(b,j) 
              etemp *= 4.0
              b35  += etemp            
#
#             b1x x=4,5 
#             --------- 
#
              etemp = e4bj(b,j)*e4bj(b,j) 
              etemp *= 4.0
              b44  += etemp            
#
              etemp = e4bj(b,j)*e5bj(b,j) 
              etemp *= 4.0
              b45  += etemp            
#
#             b1x x=5,5 
#             --------- 
#
              etemp = e5bj(b,j)*e5bj(b,j) 
              etemp *= 4.0
              b55  += etemp            
#
     ENDPARDO b, j 
#
     execute sip_barrier
     execute server_barrier 
#
#    Collectively sum B-matrix elements. 
#    -----------------------------------
#
     collective Tb11 += b11 
     collective Tb12 += b12 
     collective Tb13 += b13 
     collective Tb14 += b14 
     collective Tb15 += b15 
     collective Tb22 += b22 
     collective Tb23 += b23 
     collective Tb24 += b24 
     collective Tb25 += b25 
     collective Tb33 += b33 
     collective Tb34 += b34 
     collective Tb35 += b35 
     collective Tb44 += b44 
     collective Tb45 += b45 
     collective Tb55 += b55 
#
#    Now the unique elements of the 'B-matrix' have been computed and the array filled out. 
#    --------------------------------------------------------------------------------------
#
#    Put the elements of the 'B-matrix', which have been computed as scalars into the  
#    R-matrix. 
#    -------------------------------------------------------------------------------- 
#
     CALL SETUP_DIIS 
#
     execute compute_diis # --> New instruction  
#
     c1 = Tb11 
     c2 = Tb22 
     c3 = Tb33 
     c4 = Tb44 
     c5 = Tb55 
    #execute print_scalar c1 
    #execute print_scalar c2 
    #execute print_scalar c3 
    #execute print_scalar c4 
    #execute print_scalar c5 
#
#    Done computing the c-vector. 
#    ---------------------------- 
#
#    Form the updated amplitudes using the c-vector. 
#    -----------------------------------------------  
#
#    Form T2old_aa. 
#    -------------- 
#
     PARDO a, i, a1, i1
#
#          REQUEST/GET amplitude data from all 5 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST d0aiai(a,i,a1,i1) a # kiter-5 amplitudes
           REQUEST d1aiai(a,i,a1,i1) a # kiter-4 amplitudes
           REQUEST d2aiai(a,i,a1,i1) a # kiter-3 amplitudes
           REQUEST d3aiai(a,i,a1,i1) a # kiter-2 amplitudes
           REQUEST d4aiai(a,i,a1,i1) a # kiter-1 amplitudes
#
           REQUEST e1aiai(a,i,a1,i1) a # kiter-4 amplitudes
           REQUEST e2aiai(a,i,a1,i1) a # kiter-3 amplitudes
           REQUEST e3aiai(a,i,a1,i1) a # kiter-2 amplitudes
           REQUEST e4aiai(a,i,a1,i1) a # kiter-1 amplitudes
           REQUEST e5aiai(a,i,a1,i1) a # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> T2old_aa.
#          ---------------------------------------------------------
#
           t2aiai(a,i,a1,i1)            = d0aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           += e1aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           *= c1
           taiai(a,i,a1,i1)             = t2aiai(a,i,a1,i1)
#
           t2aiai(a,i,a1,i1)            = d1aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           += e2aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           *= c2
           taiai(a,i,a1,i1)            += t2aiai(a,i,a1,i1)
#
           t2aiai(a,i,a1,i1)            = d2aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           += e3aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           *= c3
           taiai(a,i,a1,i1)            += t2aiai(a,i,a1,i1)
#
           t2aiai(a,i,a1,i1)            = d3aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           += e4aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           *= c4
           taiai(a,i,a1,i1)            += t2aiai(a,i,a1,i1)
#
           t2aiai(a,i,a1,i1)            = d4aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           += e5aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           *= c5
           taiai(a,i,a1,i1)            += t2aiai(a,i,a1,i1)
#
           PREPARE T2old_aa(a,i,a1,i1)      = taiai(a,i,a1,i1)
#
     ENDPARDO a, i, a1, i1
#
#    Form T2old_bb. 
#    -------------- 
#
     PARDO b, j, b1, j1
#
#          REQUEST/GET amplitude data from all 5 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST D0bjbj(b,j,b1,j1) b # kiter-5 amplitudes
           REQUEST D1bjbj(b,j,b1,j1) b # kiter-4 amplitudes
           REQUEST D2bjbj(b,j,b1,j1) b # kiter-3 amplitudes
           REQUEST D3bjbj(b,j,b1,j1) b # kiter-2 amplitudes
           REQUEST D4bjbj(b,j,b1,j1) b # kiter-1 amplitudes
#
           REQUEST e1bjbj(b,j,b1,j1) b # kiter-4 amplitudes
           REQUEST e2bjbj(b,j,b1,j1) b # kiter-3 amplitudes
           REQUEST e3bjbj(b,j,b1,j1) b # kiter-2 amplitudes
           REQUEST e4bjbj(b,j,b1,j1) b # kiter-1 amplitudes
           REQUEST e5bjbj(b,j,b1,j1) b # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> T2old_bb.
#          ---------------------------------------------------------
#
           t2bjbj(b,j,b1,j1)            = d0bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           += e1bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           *= c1
           tbjbj(b,j,b1,j1)             = t2bjbj(b,j,b1,j1)
#
           t2bjbj(b,j,b1,j1)            = d1bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           += e2bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           *= c2
           tbjbj(b,j,b1,j1)            += t2bjbj(b,j,b1,j1)
#
           t2bjbj(b,j,b1,j1)            = d2bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           += e3bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           *= c3
           tbjbj(b,j,b1,j1)            += t2bjbj(b,j,b1,j1)
#
           t2bjbj(b,j,b1,j1)            = d3bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           += e4bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           *= c4
           tbjbj(b,j,b1,j1)            += t2bjbj(b,j,b1,j1)
#
           t2bjbj(b,j,b1,j1)            = d4bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           += e5bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           *= c5
           tbjbj(b,j,b1,j1)            += t2bjbj(b,j,b1,j1)
#
           PREPARE T2old_bb(b,j,b1,j1)      = tbjbj(b,j,b1,j1)
#
     ENDPARDO b, j, b1, j1
#
#    Form T2old_ab. 
#    -------------- 
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 5 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST D0aibj(a,i,b,j) a # kiter-5 amplitudes
           REQUEST D1aibj(a,i,b,j) a # kiter-4 amplitudes
           REQUEST D2aibj(a,i,b,j) a # kiter-3 amplitudes
           REQUEST D3aibj(a,i,b,j) a # kiter-2 amplitudes
           REQUEST D4aibj(a,i,b,j) a # kiter-1 amplitudes
#
           REQUEST e1aibj(a,i,b,j) a # kiter-4 amplitudes
           REQUEST e2aibj(a,i,b,j) a # kiter-3 amplitudes
           REQUEST e3aibj(a,i,b,j) a # kiter-2 amplitudes
           REQUEST e4aibj(a,i,b,j) a # kiter-1 amplitudes
           REQUEST e5aibj(a,i,b,j) a # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> T2old_ab.
#          ---------------------------------------------------------
#
           t2aibj(a,i,b,j)            = d0aibj(a,i,b,j)
           t2aibj(a,i,b,j)           += e1aibj(a,i,b,j)
           t2aibj(a,i,b,j)           *= c1
           taibj(a,i,b,j)             = t2aibj(a,i,b,j)
#
           t2aibj(a,i,b,j)            = d1aibj(a,i,b,j)
           t2aibj(a,i,b,j)           += e2aibj(a,i,b,j)
           t2aibj(a,i,b,j)           *= c2
           taibj(a,i,b,j)            += t2aibj(a,i,b,j)
#
           t2aibj(a,i,b,j)            = d2aibj(a,i,b,j)
           t2aibj(a,i,b,j)           += e3aibj(a,i,b,j)
           t2aibj(a,i,b,j)           *= c3
           taibj(a,i,b,j)            += t2aibj(a,i,b,j)
#
           t2aibj(a,i,b,j)            = d3aibj(a,i,b,j)
           t2aibj(a,i,b,j)           += e4aibj(a,i,b,j)
           t2aibj(a,i,b,j)           *= c4
           taibj(a,i,b,j)            += t2aibj(a,i,b,j)
#
           t2aibj(a,i,b,j)            = d4aibj(a,i,b,j)
           t2aibj(a,i,b,j)           += e5aibj(a,i,b,j)
           t2aibj(a,i,b,j)           *= c5
           taibj(a,i,b,j)            += t2aibj(a,i,b,j)
#
           PREPARE T2old_ab(a,i,b,j)      = taibj(a,i,b,j)
#
     ENDPARDO a, i, b, j
#
#    Form tai_old. 
#    ------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 5 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET D0ai(a,i)     # kiter-5 amplitudes  
           GET D1ai(a,i)     # kiter-4 amplitudes  
           GET D2ai(a,i)     # kiter-3 amplitudes  
           GET D3ai(a,i)     # kiter-2 amplitudes  
           GET D4ai(a,i)     # kiter-1 amplitudes  
#
           GET e1ai(a,i)     # kiter-4 amplitudes  
           GET e2ai(a,i)     # kiter-3 amplitudes  
           GET e3ai(a,i)     # kiter-2 amplitudes  
           GET e4ai(a,i)     # kiter-1 amplitudes  
           GET e5ai(a,i)     # kiter-0 amplitudes  
#
#          Compute contributions to updated amplitudes --> tai_old. 
#          --------------------------------------------------------  
# 
           t1ai(a,i)     = d0ai(a,i) 
           t1ai(a,i)    += e1ai(a,i) 
           t1ai(a,i)    *= c1  
           tai(a,i)      = t1ai(a,i) 
#
           t1ai(a,i)     = d1ai(a,i) 
           t1ai(a,i)    += e2ai(a,i) 
           t1ai(a,i)    *= c2  
           tai(a,i)     += t1ai(a,i) 
#
           t1ai(a,i)     = d2ai(a,i) 
           t1ai(a,i)    += e3ai(a,i) 
           t1ai(a,i)    *= c3  
           tai(a,i)     += t1ai(a,i) 
#
           t1ai(a,i)     = d3ai(a,i) 
           t1ai(a,i)    += e4ai(a,i) 
           t1ai(a,i)    *= c4  
           tai(a,i)     += t1ai(a,i) 
#
           t1ai(a,i)     = d4ai(a,i) 
           t1ai(a,i)    += e5ai(a,i) 
           t1ai(a,i)    *= c5  
           tai(a,i)     += t1ai(a,i) 
# 
           PUT t1a_old(a,i) = tai(a,i) 
#
     ENDPARDO a, i  
#
#    Form tbj_old. 
#    ------------- 
#
     PARDO b, j  
#
#          REQUEST/GET amplitude data from all 5 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET D0bj(b,j)     # kiter-5 amplitudes  
           GET D1bj(b,j)     # kiter-4 amplitudes  
           GET D2bj(b,j)     # kiter-3 amplitudes  
           GET D3bj(b,j)     # kiter-2 amplitudes  
           GET D4bj(b,j)     # kiter-1 amplitudes  
#
           GET e1bj(b,j)     # kiter-4 amplitudes  
           GET e2bj(b,j)     # kiter-3 amplitudes  
           GET e3bj(b,j)     # kiter-2 amplitudes  
           GET e4bj(b,j)     # kiter-1 amplitudes  
           GET e5bj(b,j)     # kiter-0 amplitudes  
#
#          Compute contributions to updated amplitudes --> tbj_old. 
#          --------------------------------------------------------  
# 
           t1bj(b,j)     = d0bj(b,j) 
           t1bj(b,j)    += e1bj(b,j) 
           t1bj(b,j)    *= c1  
           tbj(b,j)      = t1bj(b,j) 
# 
           t1bj(b,j)     = d1bj(b,j) 
           t1bj(b,j)    += e2bj(b,j) 
           t1bj(b,j)    *= c2  
           tbj(b,j)     += t1bj(b,j) 
# 
           t1bj(b,j)     = d2bj(b,j) 
           t1bj(b,j)    += e3bj(b,j) 
           t1bj(b,j)    *= c3  
           tbj(b,j)     += t1bj(b,j) 
# 
           t1bj(b,j)     = d3bj(b,j) 
           t1bj(b,j)    += e4bj(b,j) 
           t1bj(b,j)    *= c4  
           tbj(b,j)     += t1bj(b,j) 
# 
           t1bj(b,j)     = d4bj(b,j) 
           t1bj(b,j)    += e5bj(b,j) 
           t1bj(b,j)    *= c5  
           tbj(b,j)     += t1bj(b,j) 
# 
           PUT t1b_old(b,j) = tbj(b,j) 
# 
     ENDPARDO b, j 
#
     execute sip_barrier 
     execute server_barrier 
#
     ENDPROC DIIS4  
#    ------------- 
#
# ---------------------------------------------------------------------------------
#
     PROC MOVE4
#    ----------
     execute server_barrier
     execute sip_barrier
#
#    0 --> 1
#    ---------------------------------------------------
#
     execute array_copy d1aiai d0aiai
     execute array_copy d1bjbj d0bjbj
     execute array_copy d1aibj d0aibj
#
#
#    2 --> 1
#    ---------------------------------------------------
#
     execute array_copy e2aiai e1aiai
     execute array_copy e2bjbj e1bjbj
     execute array_copy e2aibj e1aibj
     execute array_copy d2aiai d1aiai
     execute array_copy d2bjbj d1bjbj
     execute array_copy d2aibj d1aibj
#
#    3 --> 2
#    ---------------------------------------------------
#
     execute array_copy e3aiai e2aiai
     execute array_copy e3bjbj e2bjbj
     execute array_copy e3aibj e2aibj
     execute array_copy d3aiai d2aiai
     execute array_copy d3bjbj d2bjbj
     execute array_copy d3aibj d2aibj
#
#
#    4 --> 3
#    ---------------------------------------------------
#
     execute array_copy e4aiai e3aiai
     execute array_copy e4bjbj e3bjbj
     execute array_copy e4aibj e3aibj
     execute array_copy d4aiai d3aiai
     execute array_copy d4bjbj d3bjbj
     execute array_copy d4aibj d3aibj
#
#    5 --> 4
#    ---------------------------------------------------
#
     execute array_copy e5aiai e4aiai
     execute array_copy e5bjbj e4bjbj
     execute array_copy e5aibj e4aibj
#
     execute sip_barrier
#
     PARDO a, i
           GET d1ai(a,i)
           PUT d0ai(a,i) = d1ai(a,i)
     ENDPARDO a, i
#
     PARDO b, j
           GET d1bj(b,j)
           PUT d0bj(b,j) = d1bj(b,j)
     ENDPARDO b, j
#
     execute sip_barrier
#
     PARDO a, i
           GET e2ai(a,i)
           PUT e1ai(a,i) = e2ai(a,i)
     ENDPARDO a, i
#
     PARDO b, j
           GET e2bj(b,j)
           PUT e1bj(b,j) = e2bj(b,j)
     ENDPARDO b, j
#
     PARDO a, i
           GET d2ai(a,i)
           PUT d1ai(a,i) = d2ai(a,i)
     ENDPARDO a, i
#
     PARDO b, j
           GET d2bj(b,j)
           PUT d1bj(b,j) = d2bj(b,j)
     ENDPARDO b, j
#
     execute sip_barrier
#
     PARDO a, i
           GET e3ai(a,i)
           PUT e2ai(a,i) = e3ai(a,i)
     ENDPARDO a, i
#
     PARDO b, j
           GET e3bj(b,j)
           PUT e2bj(b,j) = e3bj(b,j)
     ENDPARDO b, j
#
     PARDO a, i
           GET d3ai(a,i)
           PUT d2ai(a,i) = d3ai(a,i)
     ENDPARDO a, i
#
     PARDO b, j
           GET d3bj(b,j)
           PUT d2bj(b,j) = d3bj(b,j)
     ENDPARDO b, j
#
     execute sip_barrier
#
     PARDO a, i
           GET e4ai(a,i)
           PUT e3ai(a,i) = e4ai(a,i)
     ENDPARDO a, i
#
     PARDO b, j
           GET e4bj(b,j)
           PUT e3bj(b,j) = e4bj(b,j)
     ENDPARDO b, j
#
     PARDO a, i
           GET d4ai(a,i)
           PUT d3ai(a,i) = d4ai(a,i)
     ENDPARDO a, i
#
     PARDO b, j
           GET d4bj(b,j)
           PUT d3bj(b,j) = d4bj(b,j)
     ENDPARDO b, j
#
     execute sip_barrier
#
     PARDO a, i
           GET e5ai(a,i)
           PUT e4ai(a,i) = e5ai(a,i)
     ENDPARDO a, i
#
     PARDO b, j
           GET e5bj(b,j)
           PUT e4bj(b,j) = e5bj(b,j)
     ENDPARDO b, j
#
     execute sip_barrier
     execute server_barrier
#
     ENDPROC MOVE4
#    -------------
#
# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
# 
# BEGIN MAIN PROGRAM 
# ------------------ 
#
      ecrit = cc_conv  
      one = 1.0
      two = 2.0
      five  = 5.0
      six   = 6.0
      seven = 7.0
      NONHF = 0.0
#
# Read transformed integrals from lists 
# ------------------------------------- 
#
      CALL READ_CIS
#      CALL READ_2EL 
#
      CREATE t1a_old 
      CREATE t1a_new 
      CREATE t1b_old 
      CREATE t1b_new 
#
      CREATE D0ai
      CREATE D1ai
      CREATE D2ai
      CREATE D3ai
      CREATE D4ai
      CREATE D5ai
#
      CREATE D0bj
      CREATE D1bj
      CREATE D2bj
      CREATE D3bj
      CREATE D4bj
      CREATE D5bj
#
      CREATE e1ai
      CREATE e2ai
      CREATE e3ai
      CREATE e4ai
      CREATE e5ai
#
      CREATE e1bj
      CREATE e2bj
      CREATE e3bj
      CREATE e4bj
      CREATE e5bj
#
      EXECUTE SERVER_BARRIER
      CALL TRAN_UHF
      EXECUTE SERVER_BARRIER
#
      EXECUTE SIP_BARRIER  
#
# Get initial second-order guess 
# ------------------------------ 
      CALL IGUESS_UHF
      EXECUTE SIP_BARRIER  
      EXECUTE SERVER_BARRIER  
#
# Calculate the second-order energy 
# --------------------------------- 
      CALL ENERGY_NEW 

      do kiter
      do kptr1
         etemp = 0.0
         pinf(kiter,kptr1)  = etemp
      enddo kptr1
      enddo kiter

        do jiter
           ncount2 = 0.0
         DO kptr1
            ncount2 += 1.0
            if ncount2 == two
               etemp              = ecorrT
               etemp             += scfeneg
               tpinf(jiter,kptr1) = etemp
               pinf(jiter,kptr1)  = tpinf(jiter,kptr1)
            endif
         ENDDO kptr1
        enddo jiter

        do jiter
           ncount2 = 0.0
         DO kptr1
            ncount2 += 1.0
            if ncount2 == one
               tpinf(jiter,kptr1) = ecorrT
               pinf(jiter,kptr1)  = tpinf(jiter,kptr1)
            endif
         ENDDO kptr1
        enddo jiter

        execute print_rel_info six pinf

      do kiter
      do kptr1
         etemp = 0.0
         pinf(kiter,kptr1)  = etemp
      enddo kptr1
      enddo kiter
#
# Start iterations
# ---------------- 
      DO KITER 
#
#        Form Tau and Taup 
#        ----------------- 
         CALL TAU  
#
#        Zero-out the new two-particle amplitude arrays
#        ---------------------------------------------- 
#
         CALL T2NEW_ZERO
#
#        Form one-particle intermediates 
#        ------------------------------- 
         CREATE Fae_a 
         CREATE Fae_b 
         CREATE Fme_a
         CREATE Fme_b
         CREATE Fmi_a 
         CREATE Fmi_b  

         IF NONHF == 1.0
            CREATE Fae_a_ab
            CREATE Fae_b_ab
            CREATE Fme_a_ia
            CREATE Fme_b_ia
            CREATE Fmi_a_ij
            CREATE Fmi_b_ij
         ENDIF

         EXECUTE SERVER_BARRIER  
#
# For linear CC methods, all there F intermidiates are zeor for HF 
# methods
#

         IF NONHF == 1.0
            CALL FAE 
            CALL FMI 
            CALL FME 
            EXECUTE SIP_BARRIER 
         ENDIF 
#
#        Calculate new one-particle amplitudes 
#        ------------------------------------- 
#
# For linear methods no need to change these assuming the inermediates
# have T dependent terms. Extended to include NONHF terms.j
#
         CALL T1ANEW 
         CALL T1BNEW 
#
#bgn_debug
#         pardo a, i
#          tai(a,i) = 0.0
#          put t1a_new(a,i) =  tai(a,i)
#          put t1a_old(a,i) =  tai(a,i)
#        endpardo a, i
#         pardo b, j
#           tbj(b,j) = 0.0
#           put t1b_new(b,j) = tbj(b,j)
#           put t1b_old(b,j) = tbj(b,j)
#         endpardo b, j  
#         execute sip_barrier
#end_debug
#

#        Calculate new two-particle amplitudes 
#        ------------------------------------- 
#
         CALL T2NEWAA  
         CALL T2NEWBB  
         CALL T2NEWAB  

         EXECUTE SIP_BARRIER   
         EXECUTE SERVER_BARRIER   
#
         CALL WMINJ 
         CALL AOLADDER 
         CALL WMEBJ 
#
#        Wait for all to finish 
#        ---------------------- 
         EXECUTE SIP_BARRIER   
         EXECUTE SERVER_BARRIER   
#
         DELETE Fae_a 
         DELETE Fae_b 
         DELETE Fme_a
         DELETE Fme_b
         DELETE Fmi_a 
         DELETE Fmi_b 

         IF NONHF == 1.0
            DELETE Fae_a_ab
            DELETE Fae_b_ab
            DELETE Fme_a_ia
            DELETE Fme_b_ia
            DELETE Fmi_a_ij
            DELETE Fmi_b_ij
         ENDIF
         CALL UPDATET1 
         CALL UPDATET2 
#
         EXECUTE SIP_BARRIER   
         EXECUTE SERVER_BARRIER   
         CALL ENERGY_NEW 
         EXECUTE SIP_BARRIER  
         EXECUTE SERVER_BARRIER   
#
         if kiter == 2
#
#           Get uptated amplitudes based on DIIS procedure.
#           -----------------------------------------------
#
            CALL DIIS1
#
         endif # kiter == 2
#
         if kiter == 3
#
#           Get uptated amplitudes based on DIIS procedure.
#           -----------------------------------------------
#
            CALL DIIS2
#
         endif # kiter == 3
#
         if kiter == 4
#
#           Get uptated amplitudes based on DIIS procedure.
#           -----------------------------------------------
#
            CALL DIIS3
#
         endif # kiter == 4
#
         if kiter >= 5
#
#           Get uptated amplitudes based on DIIS procedure.
#           -----------------------------------------------
#
            CALL DIIS4
            CALL MOVE4
#
         endif # kiter == 5
#

#bgn_debug
#     execute server_barrier
#     sum=0.0
#     suma=0.0
#        pardo a, i, a1,i1
#        REQUEST T2OLD_aa(a,i,a1,i1) i1
#        tmp = T2OLD_aa(a,i,a1,i1)* T2OLD_aa(a,i,a1,i1)
#        sum += tmp
#        endpardo a, i, a1, i1
#        execute server_barrier
#        collective suma += sum
#        execute print_scalar suma
#end_debug

         CALL MOVET1
         CALL MOVET2
#
#        Check on convergence 
#        -------------------- 
#
         IF ecorrT < eold 
            ediff = eold - ecorrT 
            IF ediff < ecrit 
               exit # kiter 
            ENDIF
         ENDIF   
#
         IF ecorrT > eold 
            ediff = ecorrT - eold  
            IF ediff < ecrit 
               exit # kiter 
            ENDIF
         ENDIF   
#
#        Reset eold --> enew 
#        ------------------- 
#
         eold = ecorrT 
#
      ENDDO KITER 
#
      totenerg  = ecorrT  
      totenerg += scfeneg  
     #execute print_scalar totenerg  
      execute print_rel_info seven pinf
#
# Write amplitudes to file
# ------------------------

      etemp = 23.0
      execute print_rel_info etemp pinf
      DO a
      DO a1  
      DO i
      DO i1  
         REQUEST T2old_aa(a,i,a1,i1) a
         execute maxamp_print T2old_aa
      ENDDO i1  
      ENDDO i
      ENDDO a1  
      ENDDO a

      etemp = 24.0
      execute print_rel_info etemp pinf
      DO b
      DO b1  
      DO j
      DO j1  
         REQUEST T2old_bb(b,j,b1,j1) b
         execute maxamp_print T2old_bb
      ENDDO j1  
      ENDDO j
      ENDDO b1  
      ENDDO b

      etemp = 25.0
      execute print_rel_info etemp pinf
      DO a
      DO b
      DO i
      DO j
         REQUEST T2old_ab(a,i,b,j) a
         execute maxamp_print T2old_ab
      ENDDO j
      ENDDO i
      ENDDO b
      ENDDO a

      etemp = 26.0
      execute print_rel_info etemp pinf
      DO a
      DO i
         GET t1a_old(a,i)
         execute maxamp_print t1a_old
      ENDDO i
      ENDDO a

      etemp = 27.0
      execute print_rel_info etemp pinf
      DO b
      DO j
         GET t1b_old(b,j)
         execute maxamp_print t1b_old
      ENDDO j
      ENDDO b
#
#  Uncomment here if the MO two electrons are not needed in
#  the succeding SIAL codes.
#
#      CALL WRITE_2EL   
      CALL WRITE_CIS
#
      execute sip_barrier
      execute blocks_to_list                t1a_old
      execute blocks_to_list                t1b_old
      execute blocks_to_list                T2old_aa
      execute blocks_to_list                T2old_ab
      execute blocks_to_list                T2old_bb
      execute write_blocks_to_list
      execute sip_barrier
#
                        ENDSIAL LCCSD_UHF 
#                       -----------------

