#  Copyright (c) 2003-2010 University of Florida
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  The GNU General Public License is included in this distribution
#  in the file COPYRIGHT.
                    SIAL ONE_GRAD_MO_DIST1        
#
# This SIAL program computes the two particle density 
# matrice but only stores one piece at a time similar to dens6.sial. 
# The one-particle intermediates are computed and stored.  
# The two-particle density matrices have been tested and are CORRECT.  
# The one-particle intermediates have been tested and are CORRECT. 
# Contributions coming from Vabcd --> Iab are computed in AO basis and CHECKED. 
# Contributions coming from Vabcd --> Iai are computed in AO basis and CHECKED. 
#
# This version also computes Dai iteratively in the final step --> Tested and Working 
#
# Iij_aa --> matches aces 
# Iij_bb --> matches aces 
#
# Iab_aa --> matches aces 
# Iab_bb --> matches aces 
#
# Iai_aa --> matches aces 
# Iai_bb --> matches aces 
#
# Iia_aa --> matches aces 
# Iia_bb --> matches aces 
#
# The integral files are split --> IN PROGRESS 
# and 
# antisymmetrized --> IN PROGRESS 
#
# ---------------------------------------
# PROCEDURE                  OPTIMIZATION 
# ---------------------------------------
# DIJKL                      COMPLETE  
# DABCD                      COMPLETE  
# DIBJA                      IN PROGRESS  
# DIJAB                      COMPLETE   
# DIJKA                      PARTIAL  
# DABCI                      PARTIAL  
#
# I11                        COMPLETE 
# IABDIRECT                  COMPLETE 
# IFOCK                      COMPLETE 
# DAI                        COMPLETE 
#
# DAB                        COMPLETE  
# DIJ                        COMPLETE  
# GAE                        COMPLETE --> REDO????   
# GMI                        COMPLETE  
# TAU                        COMPLETE  
# ---------------------------------------
#
# BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
#
# Declare indeces
# ---------------
#
      index kiter    = 1, cc_iter  
      aoindex mu     = 1, norb
      aoindex nu     = 1, norb
      aoindex lambda = 1, norb
      aoindex sigma  = 1, norb
#
      moaindex i = baocc, eaocc
      moaindex i1= baocc, eaocc
      moaindex i2= baocc, eaocc
      moaindex i3= baocc, eaocc
      moaindex i4= baocc, eaocc
#
      moaindex a = bavirt, eavirt
      moaindex a1= bavirt, eavirt
      moaindex a2= bavirt, eavirt
      moaindex a3= bavirt, eavirt
      moaindex a4= bavirt, eavirt
#
      mobindex j = bbocc, ebocc
      mobindex j1= bbocc, ebocc
      mobindex j2= bbocc, ebocc
      mobindex j3= bbocc, ebocc
      mobindex j4= bbocc, ebocc
#
      mobindex b = bbvirt, ebvirt
      mobindex b1= bbvirt, ebvirt
      mobindex b2= bbvirt, ebvirt
      mobindex b3= bbvirt, ebvirt
      mobindex b4= bbvirt, ebvirt
#
      moaindex p = baocc, eavirt
      moaindex p1= baocc, eavirt
      moaindex p2= baocc, eavirt
      moaindex p3= baocc, eavirt
#
      mobindex q = bbocc, ebvirt
      mobindex q1= bbocc, ebvirt
      mobindex q2= bbocc, ebvirt
      mobindex q3= bbocc, ebvirt
#
# Arrays used in transformation for AO2 algorithm
# -----------------------------------------------
#
      temp Txixi(mu,i1,lambda,i)
      temp Txxii(mu,nu,i1,i)
      temp Tixxi(i1,nu,lambda,i)
      temp Txipi(mu,i,p,i1)
      temp Tpipi(p1,i,p,i1)
      temp T1pipi(p1,i,p,i1)
      temp Tixai(i,mu,a,i1)
      temp Txaii(mu,a,i,i1)
      temp Taiia(a,i1,i,a1)
      temp Taaii(a,a1,i,i1)
      temp Txaai(mu,a1,a,i)
      temp Taaai(a2,a,a1,i)
      temp Txxai(mu,nu,a,i)
      temp Txxxi(mu,nu,lambda,i)
#
      distributed Vxixi(mu,i1,lambda,i)
      distributed Vxxii(mu,nu,i1,i)
      distributed Viixx(i1,i,mu,nu)
      distributed Vixxi(i1,nu,lambda,i)
      distributed Vxipi(mu,i,p,i1)
      distributed VSpipi(p1,i,p,i1)
      distributed Vixai(i,mu,a,i1)
      distributed Vxaii(mu,a,i,i1)
      distributed Viaai(i,a1,a,i1)
      distributed Vaaii(a,a1,i,i1)
      distributed Vxaai(mu,a1,a,i)
      distributed VSaaai(a2,a,a1,i)
      distributed Vxxai(mu,nu,a,i)
#
      temp Txjxj(mu,j1,lambda,j)
      temp Txxjj(mu,nu,j1,j)
      temp Tjjxx(j1,nu,lambda,j)
      temp Tjxxj(j1,nu,lambda,j)
      temp Txjqj(mu,j,q,j1)
      temp Tqjqj(q1,j,q,j1)
      temp T1qjqj(q1,j,q,j1)
      temp Tjxbj(j,mu,b,j1)
      temp Txbjj(mu,b,j,j1)
      temp Tjbbj(j,b1,b,j1)
      temp Tbbjj(b,b1,j,j1)
      temp Txbbj(mu,b1,b,j)
      temp Tbbbj(b2,b,b1,j)
      temp Txxbj(mu,nu,b,j)
      temp Txxxj(mu,nu,lambda,j)
#
      distributed Vxjxj(mu,j1,lambda,j)
      distributed Vxxjj(mu,nu,j1,j)
      distributed Vjjxx(j1,nu,lambda,j)
      distributed Vjxxj(j1,nu,lambda,j)
      distributed Vxjqj(mu,j,q,j1)
      distributed VSqjqj(q1,j,q,j1)
      distributed Vjxbj(j,mu,b,j1)
      distributed Vxbjj(mu,b,j,j1)
      distributed Vjbbj(j,b1,b,j1)
      distributed Vbbjj(b,b1,j,j1)
      distributed Vxbbj(mu,b1,b,j)
      distributed VSbbbj(b2,b,b1,j)
      distributed Vxxbj(mu,nu,b,j)
#
      temp Txiqj(mu,i,q,j)
      temp Tpiqj(p,i,q,j)
      temp Tiixx(i,i1,mu,nu)
      temp Tiixb(i,i1,mu,b)
      temp Tiibb(i,i1,b1,b)
      temp Txajj(mu,a,j,j1)
      temp Taajj(a,a1,j,j1)
      temp Txabj(mu,a,b,j)
      temp Tixxj(i,mu,nu,j)
      temp Tixbj(i,mu,b,j)
      temp Tiabj(i,a,b,j)
      temp Taabj(a,a1,b,j)
      temp T1xibj(lambda,i,b,j)  
#
      distributed Vxixj(mu,i,nu,j)
      distributed Vxiqj(mu,i,q,j)
      distributed Vpiqj(p,i,q,j)
      distributed Viixb(i,i1,mu,b)
      distributed Viibb(i,i1,b1,b)
      distributed Vxajj(mu,a,j,j1)
      distributed Vaajj(a,a1,j,j1)
      distributed Vxabj(mu,a,b,j)
      distributed Vixxj(i,mu,nu,j)
      distributed Vixbj(i,mu,b,j)
      distributed Viabj(i,a,b,j)
      distributed Vaabj(a,a1,b,j)
#
      temp Txbii(mu,b,i,i1)
      temp Tbbii(b,b1,i,i1)
      temp Tjbii(j,b,i,i1)
      temp Txbai(mu,b,a,i)
      temp Tbbai(b,b1,a,i)
#
      distributed Vxbii(mu,b,i,i1)
      distributed Vbbii(b,b1,i,i1)
      distributed Vjbii(j,b,i,i1)
      distributed Vxbai(mu,b,a,i)
      distributed Vbbai(b,b1,a,i)
#
# End Arrays used in transformation for AO2 algorithm
# ---------------------------------------------------
#
# Declare temporary arrays
# ------------------------
#
      temp Txxxx(mu,nu,lambda,sigma)
      temp Txxxp(mu,nu,lambda,p)
      temp Txxpp(mu,nu,p1,p)
      temp Txppp(mu,p2,p1,p)
      temp Tpppp(p3,p2,p1,p)
      temp T1pppp(p3,p2,p1,p)
      temp T2pppp(p3,p2,p1,p)
      temp T3pppp(p3,p2,p1,p)
      temp Txxxq(mu,nu,lambda,q)
      temp Txxqq(mu,nu,q1,q)
      temp Txqqq(mu,q2,q1,q)
      temp Tqqqq(q3,q2,q1,q)
      temp T1qqqq(q3,q2,q1,q)
      temp T2qqqq(q3,q2,q1,q)
      temp T3qqqq(q3,q2,q1,q)
      temp Txpqq(mu,p,q1,q)
      temp Tppqq(p1,p,q1,q)
      temp T1ppqq(p1,p,q1,q)
      temp T2ppqq(p1,p,q1,q)
      temp Tqpqp(q1,p2,q,p)
      temp Tpqpq(p1,q1,p,q)
      temp Tqqpp(q,q1,p,p1)
      temp T2qqpp(q,q1,p,p1)
      temp Txqpp(mu,q,p1,i)
#
# Declare local arrays
# --------------------------
#
      temp Tixxx(i,mu,nu,sigma)
      temp Tipxx(i,p,nu,sigma)
      temp Tipqx(i,p,q,sigma)
      temp Tipqq(i,p,q,q1) 
#
      distributed Vxxxp(mu,nu,lambda,i)
      distributed Vxxxq(mu,nu,lambda,j)
      distributed Vxxpp(mu,nu,p1,i)
      distributed Vxxqq(mu,nu,q1,j)
      distributed Vxppp(mu,p2,p1,i)
      distributed Vxqpp(mu,q,p1,i)
      distributed Vxqqq(mu,q2,q1,j)
      distributed Vxpqq(mu,p,q1,j)
#
      distributed Vixxx(i,mu,nu,lambda)
      distributed Vipxx(i,p,nu,lambda)
      distributed Vipqx(i,p,q,lambda) 
#
# Declare distributed arrays
# --------------------------
#
      distributed Vpppp(p3,p2,p1,i)
      distributed Vqqqq(q3,q2,q1,j)
      distributed Vppqq(p1,p,q1,j)
      distributed Vqqpp(q1,q,p1,i) 
#
# Declare served arrays
# ---------------------
#
      served AOINT(mu,nu,lambda,sigma)
#
# Declare static arrays
# ---------------------
#
      distributed t1a_old(a,i)
      distributed t1b_old(b,j)
      distributed l1a_old(i,a)
      distributed l1b_old(j,b)
      distributed T2old_aa(a,i,a1,i1)
      distributed T2old_bb(b,j,b1,j1)
      distributed T2old_ab(a,i,b,j)
      distributed L2old_aa(i,a,i1,a1)
      distributed L2old_bb(j,b,j1,b1)
      distributed L2old_ab(i,a,j,b)
# 
      distributed Tau_aa(a,i,a1,i1)
      distributed Tau_bb(b,j,b1,j1)
      distributed Tau_ab(a,i,b,j)
      distributed Gmi_a(i,i1) 
      distributed Gmi_b(j,j1) 
      distributed Gae_a(a,a1) 
      distributed Gae_b(b,b1) 
# 
      distributed Dij_a(i,i1) 
      distributed Dij_b(j,j1) 
      distributed Dab_a(a,a1) 
      distributed Dab_b(b,b1) 
      distributed Dii(i,i1)
      distributed Daa(a1,a)
      distributed Dijab_aa(i,i1,a,a1)
      distributed Dijab_ab(i,j,a,b)
      distributed Dijab_bb(j,j1,b,b1)
      distributed Djj(j,j1)
      distributed Dbb(b1,b)
      temp  Dabcd_aa(a,a1,a2,a3)
      temp DXabcd_aa(a2,a3,a,a1)
      temp  Dabcd_bb(b,b1,b2,b3)
      temp DXabcd_bb(b2,b3,b,b1)
      temp  Dabcd_ab(a,b,a1,b1)
      temp DXabcd_ab(a1,b1,a,b)
      distributed Dijkl_aa(i2,i,i3,i1)
      distributed Vijmn_aaaa(i,i2,i1,i3)
      distributed Dijkl_bb(j,j2,j1,j3)
      distributed Vijmn_bbbb(j,j2,j1,j3)
      distributed Dijkl_ab(i,j,i1,j1)
      distributed Vijmn_abab(i,j,i1,j1)

      distributed Vibja_aaaa(i,a,i1,a1)
      distributed Dibja_aaaa(i,a,i1,a1)
      distributed Vibja_abab(i,b,i1,b1)
      distributed Dibja_abab(i,b,i1,b1)
      distributed Vibja_baba(j,a,j1,a1)
      distributed Dibja_baba(j,a,j1,a1)
      distributed Vibja_bbbb(j,b,j1,b1)
      distributed Dibja_bbbb(j,b,j1,b1)
      distributed Dibja_baab(j,a,i,b)
      distributed Vibja_baab(j,a,i,b)
      distributed Dibja_abba(i,b,j,a)
      distributed Vibja_abba(i,b,j,a) 

      distributed Dabci_aaaa(a,a2,a1,i)
      distributed Dabci_abab(a,b,a1,j)
      distributed Dabci_baba(b,a,b1,i)
      distributed Dabci_bbbb(b,b2,b1,j)
      distributed Dijka_aaaa(i,i2,i1,a)
      distributed Dijka_abab(i,j,i1,b)
      distributed Dijka_baba(j,i,j1,a)
      distributed Dijka_bbbb(j,j2,j1,b)
      distributed Ipq(mu,nu)
      distributed Dpq(mu,nu)
      distributed DHF(mu,nu)
      distributed DHFa(mu,nu)
      distributed DHFb(mu,nu)
#
# Define Local arrays 
# ------------------- 
#
     local Laa(a,a1) 
     local L1aa(a1,a) 
     local Lbb(b,b1) 
     local L1bb(b1,b) 
     local Lai(a,i) 
     local L1ai(a1,i) 
     local Lbj(b,j) 
     local L1bj(b1,j) 
     local Lia(i,a) 
     Local Ljb(j,b) 
#
     distributed I3AA(i,a,i1,i2) 
     distributed I3AB(i,a,j,j1) 
     distributed I3BA(j,b,i,i1) 
     distributed I3BB(j,b,j1,j2) 
#
     distributed TAO_aa(mu,i,nu,i1)  
     distributed TAO_ab(mu,i,nu,j)  
     distributed TAO_bb(mu,j,nu,j1)  
     distributed LAO_aa(i,mu,i1,nu)  
     distributed LAO_ab(i,mu,j,nu)  
     distributed LAO_bb(j,mu,j1,nu)  
#
#    ------------------------------------------------------------------------
#
# Declare temporary arrays
# ------------------------
#
      temp Taiai(p,i,p1,i1)
      temp T1aiai(p,i,p1,i1)
      temp T2aiai(p,i,p1,i1)
      temp T3aiai(p,i,p1,i1)
      temp Laiai(p,i,p1,i1)
#
      temp  Tiaia(i,a,i1,a1)
      temp T1iaia(i,a,i1,a1)
      temp T2iaia(i,a,i1,a1)
      temp T3iaia(i,a,i1,a1)
      temp TAiaia(i,a,i1,a1)
      temp  Tiaai(i,a,a1,i1)
      temp Tiiai(i1,i2,a2,i)  
      temp  Tjbjb(j,b,j1,b1)
      temp T1jbjb(j,b,j1,b1)
      temp T2jbjb(j,b,j1,b1)
      temp T3jbjb(j,b,j1,b1)
      temp TAjbjb(j,b,j1,b1)
      temp  Tiajb(i,a,j,b)
      temp T1iajb(i,a,j,b)
      temp T2iajb(i,a,j,b)
      temp TAiajb(i,a,j,b)
      temp  Tibib(i,b,i1,b1)
      temp T1ibib(i,b,i1,b1)
      temp T2ibib(i,b,i1,b1)
      temp TAibib(i,b,i1,b1)
      temp  Tjaja(j,a,j1,a1)
      temp T1jaja(j,a,j1,a1)
      temp T2jaja(j,a,j1,a1)
      temp TAjaja(j,a,j1,a1)
      temp  Taijb(a,i,j,b)   
      temp  Tbjjb(b,j,j1,b1)
      temp T1bjjb(b,j,j1,b1)
      temp Tjjbj(j1,j2,b2,j)  
#
      temp Tbjbj(q,j,q1,j1)
      temp T1bjbj(q,j,q1,j1)
      temp T2bjbj(q,j,q1,j1)
      temp T3bjbj(q,j,q1,j1)
      temp Lbjbj(q,j,q1,j1)
      temp Taibj(p,i,q,j)
      temp T1aibj(p,i,q,j)
#
      temp tmp1_aiai(a,i,a1,i1)
      temp tmp2_aiai(a,i,a1,i1)
      temp tmp1_bjbj(b,j,b1,j1)
      temp tmp2_bjbj(b,j,b1,j1)
      temp tmp1_aibj(a,i,b,j)
#
      temp Tai(a,i)
      temp T1ai(a,i)
      temp Tbj(b,j)
      temp T1bj(b,j)
      temp Tpq(mu,nu)
      temp T1pq(mu,nu)
#
      temp Taa(a,a1)
      temp T1aa(a,a1)
      temp Tbb(b,b1)
      temp T1bb(b,b1)
      temp Tae_a(a,a1)
      temp Tae_b(b,b1)
      temp Tia(i,a)
      temp T1ia(i,a)
      temp T2ia(i,a)
      temp T3ia(i,a)
      temp T4ia(i,a)
      temp Tjb(j,b)
      temp T1jb(j,b)
      temp T2jb(j,b)
      temp T3jb(j,b)
      temp T4jb(j,b)
      temp Tme_a(i,a)
      temp Tme_b(j,b)
#
      temp Tii(i,i1)
      temp T1ii(i,i1)
      temp Tjj(j,j1)
      temp T1jj(j,j1)
      temp Tmi_a(i,i1)
      temp Tmi_b(j,j1)
#
      temp Liaai(i,a,a1,i1) 
      temp T1iaai(i,a,a1,i1) 
      temp Ljbbj(j,b,b1,j1) 
      temp Liabj(i,a,b,j) 
      temp Lbjai(b,j,a,i) 
      temp Tbjai(b,j,a,i) 
      temp Ljbai(j,b,a,i) 
      temp Tjbai(j,b,a,i) 
      temp Taaaa(a,a1,a2,a3) 
      temp T1aaaa(a,a1,a2,a3) 
      temp Taabb(a,a1,b,b1) 
      temp T1aabb(a,a1,b,b1) 
      temp Tbbbb(b,b1,b2,b3) 
      temp T1bbbb(b,b1,b2,b3) 
      temp Tiiii(i,i1,i2,i3) 
      temp T1iiii(i,i1,i2,i3) 
      temp Tiijj(i,i1,j,j1) 
      temp T1iijj(i,i1,j,j1) 
      temp Tjjjj(j,j1,j2,j3) 
      temp T1jjjj(j,j1,j2,j3) 
      temp Tiiaa(i,i1,a,a1) 
      temp TAiiaa(i,i1,a,a1) 
      temp T1iiaa(i,i1,a,a1) 
      temp T2iiaa(i,i1,a,a1) 
      temp T1iibb(i,i1,b,b1) 
      temp T2iibb(i,i1,b,b1) 
      temp TAiibb(i,i1,b,b1) 
      temp Tjjaa(j,j1,a,a1) 
      temp T1jjaa(j,j1,a,a1) 
      temp T2jjaa(j,j1,a,a1) 
      temp TAjjaa(j,j1,a,a1) 
      temp Tjjbb(j,j1,b,b1) 
      temp TAjjbb(j,j1,b,b1) 
      temp T1jjbb(j,j1,b,b1) 
      temp T2jjbb(j,j1,b,b1) 
      temp T1iabj(i,a,b,j) 
      temp T1jbai(j,b,a,i) 
      temp T1bjia(b,j,i,a) 
      temp Tiaii(i,a,i1,i2) 
      temp Tjbjj(j,b,j1,j2) 
      temp Tiajj(i,a,j,j1) 
      temp T1aaai(a,a1,a2,i) 
      temp T1aabj(a,a1,b,j) 
      temp T1bbai(b,b1,a,i) 
      temp T1bbbj(b,b1,b2,j) 
      temp Tiiia(i,i1,i2,a) 
      temp T1iiia(i,i1,i2,a) 
      temp  Tiijb(i,i1,j,b) 
      temp T1iijb(i,i1,j,b) 
      temp  Tjjia(j,j1,i,a) 
      temp T1jjia(j,j1,i,a) 
      temp  Tjjjb(j,j1,j2,b) 
      temp T1jjjb(j,j1,j2,b) 
      temp  Tijab(i,j,a,b) 
      temp T1ijab(i,j,a,b) 
      temp T2ijab(i,j,a,b) 
      temp  Tijaj(i,j,a,j1) 
      temp  Tabab(a,b,a1,b1) 
      temp T1abab(a,b,a1,b1) 
      temp  Tijij(i,j,i1,j1) 
      temp T1ijij(i,j,i1,j1) 
      temp  Tjbia(j,b,i,a) 
      temp T1jbia(j,b,i,a) 
      temp  Tabaj(a,b,a1,j) 
      temp  Tabij(a,b,i,j) 
      temp T1abaj(a,b,a1,j) 
      temp  Tbabi(b,a,b1,i) 
      temp T1babi(b,a,b1,i) 
      temp  Tijib(i,j,i1,b) 
      temp T1ijib(i,j,i1,b) 
      temp  Tjija(j,i,j1,a) 
      temp T1jija(j,i,j1,a) 
      temp  Tjaib(j,a,i,b) 
      temp  Tibja(i,b,j,a) 
      temp  Tibaj(i,b,a,j) 
      temp  Tjaaj(j,a,a1,j1) 
      temp  Tbibi(b,i1,b1,i) 
      temp  Lbibi(b,i1,b1,i) 
      temp  Tajaj(a,j1,a1,j)  
      temp  Lajaj(a,j1,a1,j) 
      temp  Tbaji(b1,a,j,i1)  
      temp  Tjibi(j,i1,b,i)   
#
      temp Zaa(lambda,i,a1,i1) 
      temp ZZaa(lambda,i,sigma,i1)  
      temp Zbb(lambda,j,b1,j1) 
      temp ZZbb(lambda,j,sigma,j1)  
      temp Zab(lambda,i,b1,j1) 
      temp ZZab(lambda,i,sigma,j1)  
#
      temp Qaa(i,lambda,i1,a1) 
      temp QQaa(i,lambda,i1,sigma) 
      temp Qbb(j,lambda,j1,b1)
      temp QQbb(j,lambda,j1,sigma) 
      temp  Qab(i,lambda,j,b) 
      temp QQab(i,lambda,j,sigma) 
#
# Intermediate arrays
# -------------------
#
      distributed Iij_aa(i,i1)
      distributed Iij_bb(j,j1)
      distributed Iab_aa(a,a1)
      distributed Iab_bb(b,b1)
      distributed Iai_aa(a,i)
      distributed Iia_aa(i,a)
      distributed Iai_bb(b,j)
      distributed Iia_bb(j,b)
      distributed Xai_aa(a,i)
      distributed Xai_bb(b,j)
#
# Arrays used in 'direct' computations 
# ------------------------------------ 
#
      temp T1xixi(mu,i,nu,i1) 
      distributed Ixixi(mu,i,nu,i1) 
      distributed I1xixi(mu,i,nu,i1) 
      temp T1xjxj(mu,j,nu,j1) 
      distributed Ixjxj(mu,j,nu,j1) 
      distributed I1xjxj(mu,j,nu,j1) 
      temp Txixj(mu,i,nu,j) 
      distributed Ixixj(mu,i,nu,j) 
      distributed I1xixj(mu,i,nu,j) 
#
      temp  Txiai(lambda,i,a1,i1)  
      temp T1xiai(lambda,i,a1,i1)  
      temp  Txjbj(lambda,j,b1,j1)  
      temp T1xjbj(lambda,j,b1,j1)  
      temp  Txibj(lambda,i,b1,j1)  
      temp Txabi(mu,a,b,i) 
      temp Txbaj(mu,b,a1,j) 
      temp Txxbi(mu,nu,b,i) 
      temp Txxaj(mu,nu,a,j) 
      temp  Txi(mu,i) 
      temp T1xi(mu,i) 
      temp  Txj(mu,j) 
      temp T1xj(mu,j) 
      temp Jxi(mu,i) 
      temp Jxj(mu,j) 
      temp Jxa(mu,a) 
      temp Jxb(mu,b) 
      temp Ixa(mu,a) 
      temp Ixb(mu,b) 
      temp Ixx(mu,nu) 
      temp I1xx(mu,nu) 
#
      distributed  Iaiai(a,i,a1,i1) 
      distributed I1aiai(a,i,a1,i1) 
      distributed  Ibjbj(b,j,b1,j1) 
      distributed I1bjbj(b,j,b1,j1) 
      distributed  Iaibj(a,i,b,j) 
      distributed I1aibj(a,i,b,j) 
      distributed  Ixxai(mu,nu,a,i) 
      distributed I1xxai(mu,nu,a,i) 
      distributed  Ixxbj(mu,nu,b,j) 
      distributed I1xxbj(mu,nu,b,j) 
      distributed Ixabi(mu,a,b,i) 
      distributed Ixxbi(mu,nu,b,i) 
      distributed I1xxbi(mu,nu,b,i) 
      distributed Ixxaj(mu,nu,a,j) 
      distributed I1xxaj(mu,nu,a,j) 
      distributed  Ixi(mu,i) 
      distributed I1xi(mu,i) 
      distributed  Ixj(mu,j) 
      distributed I1xj(mu,j) 
#
# Arrays and scalars  used in iterative computation of Dai 
# -------------------------------------------------------- 
#
      distributed Doldai_a(a,i) 
      distributed Dnewai_a(a,i) 
      distributed Doldai_b(b,j) 
      distributed Dnewai_b(b,j) 
#
      distributed D0ai(a,i)
      distributed D1ai(a,i)
      distributed D2ai(a,i)
      distributed D3ai(a,i)
      distributed D4ai(a,i)
#
      distributed D0bj(b,j)
      distributed D1bj(b,j)
      distributed D2bj(b,j)
      distributed D3bj(b,j)
      distributed D4bj(b,j)
#
      distributed e1ai(a,i)
      distributed e2ai(a,i)
      distributed e3ai(a,i)
      distributed e4ai(a,i)
      distributed e5ai(a,i)
#
      distributed e1bj(b,j)
      distributed e2bj(b,j)
      distributed e3bj(b,j)
      distributed e4bj(b,j)
      distributed e5bj(b,j)
#
       scalar b11
       scalar b12
       scalar b13
       scalar b14
       scalar b15
       scalar b16
       scalar b17
       scalar b18
       scalar b19
       scalar b110
#
       scalar b22
       scalar b23
       scalar b24
       scalar b25
       scalar b26
       scalar b27
       scalar b28
       scalar b29
       scalar b210
#
       scalar b33
       scalar b34
       scalar b35
       scalar b36
       scalar b37
       scalar b38
       scalar b39
       scalar b310
       scalar b44
       scalar b45
       scalar b46
       scalar b47
       scalar b48
       scalar b49
       scalar b410
#
#
       scalar b55
       scalar b56
       scalar b57
       scalar b58
       scalar b59
       scalar b510
#
       scalar b66
       scalar b67
       scalar b68
       scalar b69
       scalar b610
#
       scalar b77
       scalar b78
       scalar b79
       scalar b710
#
       scalar b88
       scalar b89
       scalar b810
#
       scalar b99
       scalar b910
#
       scalar b1010
#
       scalar Tb11
       scalar Tb12
       scalar Tb13
       scalar Tb14
       scalar Tb15
       scalar Tb16
       scalar Tb17
       scalar Tb18
       scalar Tb19
       scalar Tb110
#
       scalar Tb22
       scalar Tb23
       scalar Tb24
       scalar Tb25
       scalar Tb26
       scalar Tb27
       scalar Tb28
       scalar Tb29
       scalar Tb210
#
       scalar Tb33
       scalar Tb34
       scalar Tb35
       scalar Tb36
       scalar Tb37
       scalar Tb38
       scalar Tb39
       scalar Tb310
       scalar Tb44
       scalar Tb45
       scalar Tb46
       scalar Tb47
       scalar Tb48
       scalar Tb49
       scalar Tb410
#
       scalar Tb55
       scalar Tb56
       scalar Tb57
       scalar Tb58
       scalar Tb59
       scalar Tb510
#
       scalar Tb66
       scalar Tb67
       scalar Tb68
       scalar Tb69
       scalar Tb610
#
       scalar Tb77
       scalar Tb78
       scalar Tb79
       scalar Tb710
#
       scalar Tb88
       scalar Tb89
       scalar Tb810
#
       scalar Tb99
       scalar Tb910
#
       scalar Tb1010
#
       scalar c1
       scalar c2
       scalar c3
       scalar c4
       scalar c5
       scalar c6
       scalar c7
       scalar c8
       scalar c9
       scalar c10
#
# Define scalar quantities 
# ------------------------ 
#
      scalar etemp 
      scalar esum 
      scalar eacbd 
      scalar eold
      scalar enew 
      scalar ecrit 
      scalar ediff 
#    
#    ------------------------------------------------------------------------
#
     PROC READ_2EL
#
#    ------------------------------------------------------------------------
#
      create VSpipi
      create Vaaii
      create Viaai
      create VSaaai
      create VSqjqj
      create Vbbjj
      create Vjbbj
      create VSbbbj
      create Vbbii
      create Vjbii
      create Vbbai
      create Vpiqj
      create Vaajj
      create Viabj
      create Vaabj
#     create VSaaaa
#     create VSbbbb
#     create Vaabb
#
      execute server_barrier
      execute list_to_blocks                VSpipi
      execute list_to_blocks                Vaaii
      execute list_to_blocks                Viaai
      execute list_to_blocks                VSaaai
      execute list_to_blocks                VSqjqj
      execute list_to_blocks                Vbbjj
      execute list_to_blocks                Vjbbj
      execute list_to_blocks                VSbbbj
      execute list_to_blocks                Vbbii
      execute list_to_blocks                Vjbii
      execute list_to_blocks                Vbbai
      execute list_to_blocks                Vpiqj
      execute list_to_blocks                Vaajj
      execute list_to_blocks                Viabj
      execute list_to_blocks                Vaabj
#     execute list_to_blocks                VSaaaa
#     execute list_to_blocks                VSbbbb
#     execute list_to_blocks                Vaabb
#
#    ------------------------------------------------------------------------
#
     ENDPROC READ_2EL
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
# 
         PROC CREATE1ARRAY 
# 
              CREATE Gmi_a 
              CREATE Gmi_b 
              CREATE Gae_a 
              CREATE Gae_b 
              CREATE Tau_aa
              CREATE Tau_ab
              CREATE Tau_bb

              CREATE Dij_a
              CREATE Dij_b
              CREATE Dab_a
              CREATE Dab_b
#
              CREATE Iij_aa
              CREATE Iij_bb
              CREATE Iab_aa
              CREATE Iab_bb
              CREATE Xai_aa
              CREATE Xai_bb
              CREATE Iai_aa
              CREATE Iia_aa
              CREATE Iai_bb
              CREATE Iia_bb
# 
         ENDPROC CREATE1ARRAY 
# 
         PROC CREATEARRAY 
              CREATE Dii
              CREATE Daa
              CREATE Dijab_aa  
              CREATE Dijab_ab  
              CREATE Dijab_bb  
              CREATE Djj
              CREATE Dbb

              CREATE Dabcd_aa
              CREATE Dabcd_bb
              CREATE Dabcd_ab
              CREATE Dijkl_aa

              CREATE Vijmn_aaaa
              CREATE Dijkl_bb
              CREATE Vijmn_bbbb
              CREATE Dijkl_ab
              CREATE Vijmn_abab

              CREATE Vibja_aaaa
              CREATE Dibja_aaaa
              CREATE Vibja_abab
              CREATE Dibja_abab
              CREATE Vibja_baba
              CREATE Dibja_baba
              CREATE Dibja_baab
              CREATE Vibja_baab
              CREATE Dibja_abba
              CREATE Vibja_abba
              CREATE Vibja_bbbb
              CREATE Dibja_bbbb

              CREATE Dabci_aaaa
              CREATE Dabci_abab
              CREATE Dabci_baba
              CREATE Dabci_bbbb

              CREATE Dijka_aaaa
              CREATE Dijka_abab
              CREATE Dijka_baba
              CREATE Dijka_bbbb


         ENDPROC CREATEARRAY 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
#
      PROC TAUAA
#     ----------
#
      PARDO a, i, a1, i1
#
            GET T2old_aa(a,i,a1,i1)
            GET t1a_old(a1,i1)
            GET t1a_old(a1,i)
            GET t1a_old(a,i1)
            GET t1a_old(a,i)
#
            tai(a1,i1)            = t1a_old(a1,i1)
            tmp1_aiai(a,i,a1,i1)  = t1a_old(a,i)^tai(a1,i1)
            tai(a1,i)             = t1a_old(a1,i)
            tmp2_aiai(a,i,a1,i1)  = t1a_old(a,i1)^tai(a1,i)
            tmp1_aiai(a,i,a1,i1) += T2old_aa(a,i,a1,i1)
            tmp1_aiai(a,i,a1,i1) -= tmp2_aiai(a,i,a1,i1)
            PUT Tau_aa(a,i,a1,i1) = tmp1_aiai(a,i,a1,i1)
#
      ENDPARDO a, i, a1, i1
#
      ENDPROC TAUAA
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
#
      PROC TAUBB
#     ----------
#
      PARDO b, j, b1, j1
#
            GET T2old_bb(b,j,b1,j1)
            GET t1b_old(b1,j1)
            GET t1b_old(b1,j)
            GET t1b_old(b,j1)
            GET t1b_old(b,j)
#
            tbj(b1,j1)            = t1b_old(b1,j1)
            tmp1_bjbj(b,j,b1,j1)  = t1b_old(b,j)^tbj(b1,j1)
            tbj(b1,j)             = t1b_old(b1,j)
            tmp2_bjbj(b,j,b1,j1)  = t1b_old(b,j1)^tbj(b1,j)
            tmp1_bjbj(b,j,b1,j1) += T2old_bb(b,j,b1,j1)
            tmp1_bjbj(b,j,b1,j1) -= tmp2_bjbj(b,j,b1,j1)
            PUT Tau_bb(b,j,b1,j1) = tmp1_bjbj(b,j,b1,j1)
#
      ENDPARDO b, j, b1, j1
#
      ENDPROC TAUBB
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
#
      PROC TAUAB
#     ----------
#
      PARDO a, i, b, j
#
            GET T2old_ab(a,i,b,j)
            GET t1a_old(a,i)
            GET t1b_old(b,j)
#
            tmp1_aibj(a,i,b,j)  = t1a_old(a,i)^t1b_old(b,j)
            tmp1_aibj(a,i,b,j) += T2old_ab(a,i,b,j)
            PUT Tau_ab(a,i,b,j) = tmp1_aibj(a,i,b,j)
#
      ENDPARDO a, i, b, j
#
      ENDPROC TAUAB
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
#
      PROC TAU
#
           CALL TAUAA
           CALL TAUBB
           CALL TAUAB
#
      ENDPROC TAU
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
#
      PROC GAEA
#     ---------
#
      PARDO a, a1
#
            Taa(a,a1) = 0.0
#
            DO i1
            DO i
            DO a2
#
               GET T2old_aa(a1,i1,a2,i)
               GET L2old_aa(i1,a,i,a2)
#
               T1aa(a,a1)  = L2old_aa(i1,a,i,a2)*T2old_aa(a1,i1,a2,i)
               T1aa(a,a1) *= 0.5
               Taa(a,a1)  -= T1aa(a,a1)
#
            ENDDO a2
            ENDDO i
            ENDDO i1
#
            DO i
            DO j
            DO b
#
               GET T2old_ab(a1,i,b,j)
               GET L2old_ab(i,a,j,b)
#
               T1aa(a,a1) = L2old_ab(i,a,j,b)*T2old_ab(a1,i,b,j)
               Taa(a,a1) -= T1aa(a,a1)
#
            ENDDO b
            ENDDO j
            ENDDO i
#
            PUT Gae_a(a,a1) += Taa(a,a1)
#
      ENDPARDO a, a1
#
      ENDPROC GAEA
#     ------------
#
      PROC GAEB
#     ---------
#
      PARDO b, b1
#
            Tbb(b,b1) = 0.0
#
            DO j
            DO j1
            DO b2
#
               GET T2old_bb(b1,j,b2,j1)
               GET L2old_bb(j,b,j1,b2)
#
               T1bb(b,b1)  = L2old_bb(j,b,j1,b2)*T2old_bb(b1,j,b2,j1)
               T1bb(b,b1) *= 0.5
               Tbb(b,b1)  -= T1bb(b,b1)
#
            ENDDO b2
            ENDDO j1
            ENDDO j
#
#
            DO j
            DO i
            DO a
#
               GET T2old_ab(a,i,b1,j)
               GET L2old_ab(i,a,j,b)
#
               T1bb(b,b1) = L2old_ab(i,a,j,b)*T2old_ab(a,i,b1,j)
               Tbb(b,b1) -= T1bb(b,b1)
#
            ENDDO a
            ENDDO i
            ENDDO j
#
            PUT Gae_b(b,b1) += Tbb(b,b1)
#
      ENDPARDO b, b1
#
      ENDPROC GAEB
#     ------------
#
      PROC GAE
#     --------
         CALL GAEA
         CALL GAEB
      ENDPROC GAE
#     -----------
#
      PROC GMIA
#     ---------
#
      PARDO i1, i
#
            Gmi_a(i1,i) = 0.0
#
      ENDPARDO i1, i
      execute sip_barrier Gmi_a
#
      PARDO a, a1, i, i1
#
            DO i2
#
               GET T2old_aa(a,i1,a1,i2)
               GET L2old_aa(i,a,i2,a1)
#
               Tii(i1,i)        = T2old_aa(a,i1,a1,i2)*L2old_aa(i,a,i2,a1)
               Tii(i1,i)       *= 0.5
               PUT Gmi_a(i1,i) += Tii(i1,i)
#
            ENDDO i2
#
      ENDPARDO a, a1, i, i1
#
      PARDO a, b, i, j
#
            DO i1
#
               GET T2old_ab(a,i1,b,j)
               GET L2old_ab(i,a,j,b)
#
               Tii(i1,i)        = T2old_ab(a,i1,b,j)*L2old_ab(i,a,j,b)
               PUT Gmi_a(i1,i) += Tii(i1,i)
#
            ENDDO i1
#
      ENDPARDO a, b, i, j
#
      ENDPROC GMIA
#     ------------
#
      PROC GMIB
#     ---------
#
      PARDO j1, j
#
            Gmi_b(j1,j) = 0.0
#
      ENDPARDO j1, j
      execute sip_barrier Gmi_b
#
      PARDO b, b1, j, j1
#
            DO j2
#
               GET T2old_bb(b,j1,b1,j2)
               GET L2old_bb(j,b,j2,b1)
#
               Tjj(j1,j)        = T2old_bb(b,j1,b1,j2)*L2old_bb(j,b,j2,b1)
               Tjj(j1,j)       *= 0.5
               PUT Gmi_b(j1,j) += Tjj(j1,j)
#
            ENDDO j2
#
      ENDPARDO b, b1, j, j1
#
      PARDO b, a, j, i
#
            DO j1
#
               GET T2old_ab(a,i,b,j1)
               GET L2old_ab(i,a,j,b)
#
               Tjj(j1,j)        = T2old_ab(a,i,b,j1)*L2old_ab(i,a,j,b)
               PUT Gmi_b(j1,j) += Tjj(j1,j)
#
            ENDDO j1
#
      ENDPARDO b, a, j, i
#
      ENDPROC GMIB
#     ------------
#
      PROC GMI
#     --------
         CALL GMIA
         CALL GMIB
      ENDPROC GMI
#     -----------
#
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
#
      PROC IAIAA1 
#     ----------- 
#
# First form the half back-transformed density array 
# -------------------------------------------------- 
#
      create Ixxai 
      execute sip_barrier 
#
      PARDO a1, a2, a, i 
#
            GET Dabci_aaaa(a1,a2,a,i) 
#
            DO mu 
#
               Txaai(mu,a2,a,i) = Dabci_aaaa(a1,a2,a,i)*ca(mu,a1) 
#
               DO nu 
#
                  Txxai(mu,nu,a,i) = Txaai(mu,a2,a,i)*ca(nu,a2) 
                  PUT Ixxai(mu,nu,a,i) += Txxai(mu,nu,a,i) 
#
               ENDDO nu 
#
            ENDDO mu 
#
      ENDPARDO a1, a2, a, i 
      execute sip_barrier
      delete Dabci_aaaa
      create I1xxai 
      execute sip_barrier 
#
# Contract with AO integrals 
# -------------------------- 
#
      PARDO mu, nu, lambda, sigma 
#
            compute_integrals AOINT(lambda,mu,sigma,nu)
            Txxxx(lambda,sigma,mu,nu) = AOINT(lambda,mu,sigma,nu) 
#
            DO a 
            DO i 
#
               GET Ixxai(mu,nu,a,i) 
#
               Txxai(lambda,sigma,a,i) = Txxxx(lambda,sigma,mu,nu)*Ixxai(mu,nu,a,i)
               PUT I1xxai(lambda,sigma,a,i) += Txxai(lambda,sigma,a,i) 
#
            ENDDO i 
            ENDDO a 
#
      ENDPARDO mu, nu, lambda, sigma 
      create Ixi 
      create I1xi 
      execute sip_barrier 
      delete Ixxai 
#
# Contract with last two transformation coefficients 
# -------------------------------------------------- 
#
      PARDO lambda, sigma, a, i 
#
            GET I1xxai(lambda,sigma,a,i) 
#
            Txi(sigma,i)   = I1xxai(lambda,sigma,a,i)*ca(lambda,a) 
            T1xi(lambda,i) = I1xxai(lambda,sigma,a,i)*ca(sigma,a) 
#
            PUT Ixi(sigma,i) += Txi(sigma,i) 
            PUT I1xi(lambda,i) += T1xi(lambda,i) 
#
      ENDPARDO lambda, sigma, a, i 
      execute sip_barrier 
      delete I1xxai 
#
      PARDO sigma, a, i 
#
            GET Ixi(sigma,i) 
            Tai(a,i)  = Ixi(sigma,i)*ca(sigma,a) 
            Tai(a,i) *= 0.5 
            PUT Iai_aa(a,i) += Tai(a,i) 
#
      ENDPARDO sigma, a, i 
#
      PARDO sigma, a, i 
#
            GET I1xi(sigma,i) 
            Tai(a,i)  = I1xi(sigma,i)*ca(sigma,a) 
            Tai(a,i) *= -0.5 
            PUT Iai_aa(a,i) += Tai(a,i) 
#
      ENDPARDO sigma, a, i 
      execute sip_barrier 
      delete Ixi  
      delete I1xi  
#
      ENDPROC IAIAA1 
#     -------------- 
#
      PROC IAIAA2 
#     ----------- 
#
# First form the half back-transformed density array 
# -------------------------------------------------- 
#
      create Ixxbi 
      execute sip_barrier 
#
      PARDO a, b, b1, i 
#
            GET Dabci_baba(b,a,b1,i) 
#
            DO mu 
#
               Txabi(mu,a,b1,i) = Dabci_baba(b,a,b1,i)*cb(mu,b) 
#
               DO nu 
#
                  Txxbi(mu,nu,b1,i) = Txabi(mu,a,b1,i)*ca(nu,a) 
                  PUT Ixxbi(mu,nu,b1,i) += Txxbi(mu,nu,b1,i) 
#
               ENDDO nu 
#
            ENDDO mu 
#
      ENDPARDO a, b, b1, i 

      execute sip_barrier
      delete Dabci_baba

      create I1xxbi 
      execute sip_barrier 
#
# Contract with AO integrals 
# -------------------------- 
#
      PARDO mu, nu, lambda, sigma 
#
            compute_integrals AOINT(lambda,mu,sigma,nu)
            Txxxx(lambda,sigma,mu,nu) = AOINT(lambda,mu,sigma,nu) 
#
            DO b 
            DO i 
#
               GET Ixxbi(mu,nu,b,i) 
#
               Txxbi(lambda,sigma,b,i) = Txxxx(lambda,sigma,mu,nu)*Ixxbi(mu,nu,b,i)
               PUT I1xxbi(lambda,sigma,b,i) += Txxbi(lambda,sigma,b,i) 
#
            ENDDO i 
            ENDDO b 
#
      ENDPARDO mu, nu, lambda, sigma 
      create Ixi 
      execute sip_barrier 
      delete Ixxbi 
#
# Contract with last two transformation coefficients 
# -------------------------------------------------- 
#
      PARDO lambda, sigma, b, i 
#
            GET I1xxbi(lambda,sigma,b,i) 
#
            Txi(sigma,i)   = I1xxbi(lambda,sigma,b,i)*cb(lambda,b) 
#
            PUT Ixi(sigma,i) += Txi(sigma,i) 
#
      ENDPARDO lambda, sigma, b, i 
      execute sip_barrier 
      delete I1xxbi 
#
      PARDO sigma, a, i 
#
            GET Ixi(sigma,i) 
            Tai(a,i)  = Ixi(sigma,i)*ca(sigma,a) 
            PUT Iai_aa(a,i) += Tai(a,i) 
#
      ENDPARDO sigma, a, i 
#
      execute sip_barrier 
      delete Ixi  
#
      ENDPROC IAIAA2 
#     -------------- 
#
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
#
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
#
      PROC IAIBB1 
#     ----------- 
#
# First form the half back-transformed density array 
# -------------------------------------------------- 
#
      create Ixxbj 
      execute sip_barrier 
#
      PARDO b1, b2, b, j 
#
            GET Dabci_bbbb(b1,b2,b,j) 
#
            DO mu 
#
               Txbbj(mu,b2,b,j) = Dabci_bbbb(b1,b2,b,j)*cb(mu,b1) 
#
               DO nu 
#
                  Txxbj(mu,nu,b,j) = Txbbj(mu,b2,b,j)*cb(nu,b2) 
                  PUT Ixxbj(mu,nu,b,j) += Txxbj(mu,nu,b,j) 
#
               ENDDO nu 
#
            ENDDO mu 
#
      ENDPARDO b1, b2, b, j 
      execute sip_barrier
      delete Dabci_bbbb
      create I1xxbj 
      execute sip_barrier
#
# Contract with AO integrals 
# -------------------------- 
#
      PARDO mu, nu, lambda, sigma 
#
            compute_integrals AOINT(lambda,mu,sigma,nu)
            Txxxx(lambda,sigma,mu,nu) = AOINT(lambda,mu,sigma,nu) 
#
            DO b 
            DO j 
#
               GET Ixxbj(mu,nu,b,j) 
#
               Txxbj(lambda,sigma,b,j) = Txxxx(lambda,sigma,mu,nu)*Ixxbj(mu,nu,b,j)
               PUT I1xxbj(lambda,sigma,b,j) += Txxbj(lambda,sigma,b,j) 
#
            ENDDO j 
            ENDDO b 
#
      ENDPARDO mu, nu, lambda, sigma 
      create Ixj 
      create I1xj 
      execute sip_barrier 
      delete Ixxbj 
#
# Contract with last two transformation coefficients 
# -------------------------------------------------- 
#
      PARDO lambda, sigma, b, j 
#
            GET I1xxbj(lambda,sigma,b,j) 
#
            Txj(sigma,j)   = I1xxbj(lambda,sigma,b,j)*cb(lambda,b) 
            T1xj(lambda,j) = I1xxbj(lambda,sigma,b,j)*cb(sigma,b) 
#
            PUT Ixj(sigma,j) += Txj(sigma,j) 
            PUT I1xj(lambda,j) += T1xj(lambda,j) 
#
      ENDPARDO lambda, sigma, b, j 
      execute sip_barrier 
      delete I1xxbj 
#
      PARDO sigma, b, j 
#
            GET Ixj(sigma,j) 
            Tbj(b,j)  = Ixj(sigma,j)*cb(sigma,b) 
            Tbj(b,j) *= 0.5 
            PUT Iai_bb(b,j) += Tbj(b,j) 
#
      ENDPARDO sigma, b, j 
#
      PARDO sigma, b, j 
#
            GET I1xj(sigma,j) 
            Tbj(b,j)  = I1xj(sigma,j)*cb(sigma,b) 
            Tbj(b,j) *= -0.5 
            PUT Iai_bb(b,j) += Tbj(b,j) 
#
      ENDPARDO sigma, b, j 
      execute sip_barrier 
      delete Ixj  
      delete I1xj  
#
      ENDPROC IAIBB1 
#     -------------- 
#
      PROC IAIBB2 
#     ----------- 
#
# First form the half back-transformed density array 
# -------------------------------------------------- 
#
      create Ixxaj 
      execute sip_barrier 
#
      PARDO a, a1, b, j 
#
            GET Dabci_abab(a,b,a1,j) 
#
            DO mu 
#
               Txbaj(mu,b,a1,j) = Dabci_abab(a,b,a1,j)*ca(mu,a) 
#
               DO nu 
#
                  Txxaj(mu,nu,a1,j) = Txbaj(mu,b,a1,j)*cb(nu,b) 
                  PUT Ixxaj(mu,nu,a1,j) += Txxaj(mu,nu,a1,j) 
#
               ENDDO nu 
#
            ENDDO mu 
#
      ENDPARDO a, a1, b, j 
      execute sip_barrier
      delete Dabci_abab
      create I1xxaj 
      execute sip_barrier 
#
# Contract with AO integrals 
# -------------------------- 
#
      PARDO mu, nu, lambda, sigma 
#
            compute_integrals AOINT(lambda,mu,sigma,nu)
            Txxxx(lambda,sigma,mu,nu) = AOINT(lambda,mu,sigma,nu) 
#
            DO a 
            DO j 
#
               GET Ixxaj(mu,nu,a,j) 
#
               Txxaj(lambda,sigma,a,j) = Txxxx(lambda,sigma,mu,nu)*Ixxaj(mu,nu,a,j)
               PUT I1xxaj(lambda,sigma,a,j) += Txxaj(lambda,sigma,a,j) 
#
            ENDDO j 
            ENDDO a 
#
      ENDPARDO mu, nu, lambda, sigma 
      create Ixj 
      execute sip_barrier 
      delete Ixxaj 
#
# Contract with last two transformation coefficients 
# -------------------------------------------------- 
#
      PARDO lambda, sigma, a, j 
#
            GET I1xxaj(lambda,sigma,a,j) 
#
            Txj(sigma,j)   = I1xxaj(lambda,sigma,a,j)*ca(lambda,a) 
#
            PUT Ixj(sigma,j) += Txj(sigma,j) 
#
      ENDPARDO lambda, sigma, a, j 
      execute sip_barrier 
      delete I1xxaj 
#
      PARDO sigma, b, j 
#
            GET Ixj(sigma,j) 
            Tbj(b,j)  = Ixj(sigma,j)*cb(sigma,b) 
            PUT Iai_bb(b,j) += Tbj(b,j) 
#
      ENDPARDO sigma, b, j 
#
      execute sip_barrier 
      delete Ixj  
#
      ENDPROC IAIBB2 
#     -------------- 
#
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
#
#
# --------------------------------------------------------------------------- 
#
# In this PROCEDURE the D^{ij}_{ab} block of the two-particle 
# density matrix is formed. Only the AA spin case is considered.  
#
# --------------------------------------------------------------------------- 
#
# First form one-particle intermediates 
#
# --------------------------------------------------------------------------- 
#
# Dim(i,m) = Gmi_a(i,m) + l1a_old(m,e)*t1a_old(e,i)  
#
# Dea(e,a) = Gae_a(e,a) - l1a_old(m,e)*t1a_old(a,m) 
#
# --------------------------------------------------------------------------- 
#
      PROC DIJABAA 
#     ------------- 
#
# Dii 
# ---  
#
      PARDO i, i1 
#
            GET Gmi_a(i,i1) 
            PUT Dii(i,i1) += Gmi_a(i,i1) 
#
      ENDPARDO i, i1 
#
      PARDO i, i1, a       
#
            GET l1a_old(i1,a) 
            GET t1a_old(a,i) 
            Tii(i,i1)      = l1a_old(i1,a)*t1a_old(a,i) 
            PUT Dii(i,i1) += Tii(i,i1) 
#
      ENDPARDO i, i1, a       
      execute sip_barrier 
#
# Daa 
# --- 
#
      PARDO a1, a 
#
            GET Gae_a(a1,a) 
            PUT Daa(a1,a) += Gae_a(a1,a) 
#
      ENDPARDO a1, a 
#
      PARDO a1, a, i 
#
            GET l1a_old(i,a1) 
            GET t1a_old(a,i) 
            Taa(a1,a)      = t1a_old(a,i)*l1a_old(i,a1) 
            Taa(a1,a)     *= -1.0  
            PUT Daa(a1,a) += Taa(a1,a) 
#
      ENDPARDO a1, a, i  
#
      execute sip_barrier ca  
#
# Done one-particle intermediates 
# ------------------------------- 
#
# Terms 1-5 in Eq. 33 
# ------------------- 
#
      PARDO a, a1, i, i1 
#
            GET Tau_aa(a,i,a1,i1) 
            GET L2old_aa(i,a,i1,a1) 
#
            Tiiaa(i,i1,a,a1)  = Tau_aa(a,i,a1,i1) 
            T1iiaa(i,i1,a,a1) = L2old_aa(i,a,i1,a1) 
            Tiiaa(i,i1,a,a1) += T1iiaa(i,i1,a,a1) 
            Tiiaa(i,i1,a,a1) *= 0.125  
#
            DO i2  
#
               GET Dii(i,i2) 
               GET Tau_aa(a,i2,a1,i1) 
               GET Dii(i1,i2) 
               GET Tau_aa(a,i2,a1,i) 
#
               T1iiaa(i,i1,a,a1) = Tau_aa(a,i2,a1,i1)*Dii(i,i2) 
               T1iiaa(i,i1,a,a1)*= -0.125 
               Tiiaa(i,i1,a,a1) += T1iiaa(i,i1,a,a1) 
#
               T1iiaa(i,i1,a,a1) = Tau_aa(a,i2,a1,i)*Dii(i1,i2) 
               T1iiaa(i,i1,a,a1)*= 0.125 
               Tiiaa(i,i1,a,a1) += T1iiaa(i,i1,a,a1) 
#
               DO i3 
#
                  GET Tau_aa(a,i2,a1,i3) 
                  GET Vijmn_aaaa(i,i1,i2,i3) 
#
                  T2iiaa(i2,i3,a,a1) = Tau_aa(a,i2,a1,i3) 
                  T1iiaa(i,i1,a,a1)  = Vijmn_aaaa(i,i1,i2,i3)*T2iiaa(i2,i3,a,a1)
                  T1iiaa(i,i1,a,a1) *= 0.0625 
                  Tiiaa(i,i1,a,a1)  += T1iiaa(i,i1,a,a1) 
#
               ENDDO i3 
#
            ENDDO i2 
#            
            DO a2 
#
               GET Daa(a2,a) 
               GET Tau_aa(a2,i,a1,i1) 
               GET Daa(a2,a1) 
               GET Tau_aa(a2,i,a,i1) 
#
               T1iiaa(i,i1,a,a1) = Tau_aa(a2,i,a1,i1)*Daa(a2,a) 
               T1iiaa(i,i1,a,a1)*= 0.125 
               Tiiaa(i,i1,a,a1) += T1iiaa(i,i1,a,a1) 
#
               T1iiaa(i,i1,a,a1) = Tau_aa(a2,i,a,i1)*Daa(a2,a1) 
               T1iiaa(i,i1,a,a1)*= -0.125 
               Tiiaa(i,i1,a,a1) += T1iiaa(i,i1,a,a1) 
#
            ENDDO a2 
#            
            PUT Dijab_aa(i,i1,a,a1) += Tiiaa(i,i1,a,a1) 
#
      ENDPARDO a, a1, i, i1 
#
# Final term in Eq. 33
# --------------------
#
      PARDO a, a1
#
            allocate L1aa(a1,*)
#
            DO i
#
               GET t1a_old(a1,i)
#
               DO a2
#
                  GET l1a_old(i,a2)
                  Taa(a1,a2)   = t1a_old(a1,i)*l1a_old(i,a2)
                  L1aa(a1,a2) += Taa(a1,a2)
#
               ENDDO a2
#
            ENDDO i
#
            allocate L1ai(a1,*)
#
            DO a2
            DO i
#
               GET t1a_old(a2,i)
               Tai(a1,i)   = L1aa(a1,a2)*t1a_old(a2,i)
               L1ai(a1,i) += Tai(a1,i)
#
            ENDDO i
            ENDDO a2
#
            deallocate L1aa(a1,*)
#
            DO i
#
               GET t1a_old(a,i)
#
               DO i1
#
                  Tiiaa(i,i1,a,a1)         = t1a_old(a,i)^L1ai(a1,i1)
                  Tiiaa(i,i1,a,a1)        *= 0.375
                  PUT Dijab_aa(i,i1,a,a1) += Tiiaa(i,i1,a,a1)
#
                  T1iiaa(i,i1,a1,a)        = Tiiaa(i,i1,a,a1)
                  T1iiaa(i,i1,a1,a)       *= -1.0
                  PUT Dijab_aa(i,i1,a1,a) += T1iiaa(i,i1,a1,a)
#
                  T1iiaa(i1,i,a,a1)        = Tiiaa(i,i1,a,a1)
                  T1iiaa(i1,i,a,a1)       *= -1.0
                  PUT Dijab_aa(i1,i,a,a1) += T1iiaa(i1,i,a,a1)
#
                  T1iiaa(i1,i,a1,a)        = Tiiaa(i,i1,a,a1)
                  PUT Dijab_aa(i1,i,a1,a) += T1iiaa(i1,i,a1,a)
#
               ENDDO i1
#
            ENDDO i
#
            deallocate L1ai(a1,*)
#
      ENDPARDO a, a1
#
# Sixth-term in Eq. 33
# --------------------
#
      PARDO i2, a2, a1, i1
#
            GET l1a_old(i2,a2)
            GET t1a_old(a1,i1)
#
            Liaai(i2,a2,a1,i1)  = l1a_old(i2,a2)^t1a_old(a1,i1)
            Liaai(i2,a2,a1,i1) *= 2.0
#
            DO i
            DO a
#
               GET T2old_aa(a,i,a1,i1)
               GET L2old_aa(i2,a2,i,a)
#
               Tiaai(i2,a2,a1,i1)  = L2old_aa(i2,a2,i,a)*T2old_aa(a,i,a1,i1)
               Liaai(i2,a2,a1,i1) += Tiaai(i2,a2,a1,i1)
#
            ENDDO a
            ENDDO i
#
            DO j
            DO b
#
               GET T2old_ab(a1,i1,b,j)
               GET L2old_ab(i2,a2,j,b)
#
               Tiaai(i2,a2,a1,i1)  = L2old_ab(i2,a2,j,b)*T2old_ab(a1,i1,b,j)
               Liaai(i2,a2,a1,i1) += Tiaai(i2,a2,a1,i1)
#
            ENDDO b
            ENDDO j
#
            DO i
#
               GET t1a_old(a2,i)
               tai(a2,i) = t1a_old(a2,i)
#
               DO a
#
                  GET t1a_old(a,i2)
                  GET T2old_aa(a,i2,a2,i)
#
                  Laiai(a,i2,a2,i)         = t1a_old(a,i2)^tai(a2,i)
                  Laiai(a,i2,a2,i)        *= 2.0
                  Laiai(a,i2,a2,i)        += T2old_aa(a,i2,a2,i)
#
#                 Tiiaa(i,i1,a,a1)         = Laiai(a,i2,a2,i)*Liaai(i2,a2,a1,i1)
#
                  Taiia(a,i,i2,a2)         = Laiai(a,i2,a2,i) 
                  Taiai(a,i,a1,i1)         = Taiia(a,i,i2,a2)*Liaai(i2,a2,a1,i1)  
                  Tiiaa(i,i1,a,a1)         = Taiai(a,i,a1,i1) 

                  Tiiaa(i,i1,a,a1)        *= -0.0625 
                  PUT Dijab_aa(i,i1,a,a1) += Tiiaa(i,i1,a,a1)
#
                  T1iiaa(i,i1,a1,a)        = Tiiaa(i,i1,a,a1)
                  T1iiaa(i,i1,a1,a)       *= -1.0
                  PUT Dijab_aa(i,i1,a1,a) += T1iiaa(i,i1,a1,a)
#
                  T1iiaa(i1,i,a,a1)        = Tiiaa(i,i1,a,a1)
                  T1iiaa(i1,i,a,a1)       *= -1.0
                  PUT Dijab_aa(i1,i,a,a1) += T1iiaa(i1,i,a,a1)
#
                  T1iiaa(i1,i,a1,a)        = Tiiaa(i,i1,a,a1)
                  PUT Dijab_aa(i1,i,a1,a) += T1iiaa(i1,i,a1,a)
#
               ENDDO a
#
            ENDDO i
#
      ENDPARDO i2, a2, a1, i1
#
# Odd spin combination
# --------------------
#
      PARDO j, b, a1, i1
#
            GET l1b_old(j,b)
            GET t1a_old(a1,i1)
#
            Ljbai(j,b,a1,i1)  = l1b_old(j,b)^t1a_old(a1,i1)
            ljbai(j,b,a1,i1) *= 2.0
#
            DO i3
            DO a3
#
               GET T2old_aa(a3,i3,a1,i1)
               GET L2old_ab(i3,a3,j,b)
#
               Tjbai(j,b,a1,i1)  = L2old_ab(i3,a3,j,b)*T2old_aa(a3,i3,a1,i1)
               Ljbai(j,b,a1,i1) += Tjbai(j,b,a1,i1)
#
            ENDDO a3
            ENDDO i3
#
            DO j1
            DO b1
#
               GET T2old_ab(a1,i1,b1,j1)
               GET L2old_bb(j1,b1,j,b)
#
               Tjbai(j,b,a1,i1)  = L2old_bb(j1,b1,j,b)*T2old_ab(a1,i1,b1,j1)
               Ljbai(j,b,a1,i1) += Tjbai(j,b,a1,i1)
#
            ENDDO b1
            ENDDO j1
#
            DO i
            DO a
#
               GET T2old_ab(a,i,b,j)
               Taijb(a,i,j,b)           = T2old_ab(a,i,b,j)
#
#              Tiiaa(i,i1,a,a1)         = Taibj(a,i,b,j)*Ljbai(j,b,a1,i1)
               Taiai(a,i,a1,i1)         = Taijb(a,i,j,b)*Ljbai(j,b,a1,i1) 
               Tiiaa(i,i1,a,a1)         = Taiai(a,i,a1,i1) 
#
               Tiiaa(i,i1,a,a1)        *= 0.0625 
               PUT Dijab_aa(i,i1,a,a1) += Tiiaa(i,i1,a,a1)
#
               T1iiaa(i,i1,a1,a)        = Tiiaa(i,i1,a,a1)
               T1iiaa(i,i1,a1,a)       *= -1.0
               PUT Dijab_aa(i,i1,a1,a) += T1iiaa(i,i1,a1,a)
#
               T1iiaa(i1,i,a,a1)        = Tiiaa(i,i1,a,a1)
               T1iiaa(i1,i,a,a1)       *= -1.0
               PUT Dijab_aa(i1,i,a,a1) += T1iiaa(i1,i,a,a1)
#
               T1iiaa(i1,i,a1,a)        = Tiiaa(i,i1,a,a1)
               PUT Dijab_aa(i1,i,a1,a) += T1iiaa(i1,i,a1,a)
#
            ENDDO a
            ENDDO i
#
      ENDPARDO j, b, a1, i1
      execute sip_barrier 
#
# Multiply by 2 to match aces 
# --------------------------- 
#
      PARDO a, a1, i, i1 
#
            GET Dijab_aa(i,i1,a,a1) 
#
            Tiiaa(i,i1,a,a1)        = 2.0*Dijab_aa(i,i1,a,a1)
            PUT Dijab_aa(i,i1,a,a1) = Tiiaa(i,i1,a,a1) 
#
      ENDPARDO a, a1, i, i1 
      execute sip_barrier 
#
# Compute contributions to one-particle intermediates 
# ---------------------------------------------------
#
# First-term of Iij_aa 
# --------------------
#
      PARDO i2, a1, a, i
#
           GET VSpipi(a,i2,a1,i) # +
           Tpppp(i2,a1,a,i)  = VSpipi(a,i2,a1,i)
#
           DO i1
#
              GET Dijab_aa(i1,i2,a1,a)
#
              Tii(i,i1)         = Dijab_aa(i1,i2,a1,a)*Tpppp(i2,a1,a,i)
              Tii(i,i1)        *= -1.0  
              PUT Iij_aa(i,i1) += Tii(i,i1)
#
           ENDDO i1
#
      ENDPARDO i2, a1, a, i
#
# First-term of Iab_aa
# --------------------
#
      PARDO a, a2, i, i1
#
            GET VSpipi(a,i,a2,i1) # +
#
            DO a1
#
               GET Dijab_aa(i,i1,a1,a2)
#
               Taa(a,a1)         = VSpipi(a,i,a2,i1)*Dijab_aa(i,i1,a1,a2)
               Taa(a,a1)        *= -1.0  
               PUT Iab_aa(a,a1) += Taa(a,a1)
#
            ENDDO a1
#
      ENDPARDO a, a2, i, i1
#
# First-term of Iai_aa
# --------------------
#
      PARDO a, a1, a2, i1
#
            GET VSaaai(a1,a,a2,i1) # +
            Tpppp(i1,a1,a2,a)  = VSaaai(a1,a,a2,i1)
#
            DO i
#
               GET Dijab_aa(i,i1,a1,a2)
#
               Tai(a,i)         = Dijab_aa(i,i1,a1,a2)*Tpppp(i1,a1,a2,a)
               PUT Iai_aa(a,i) += Tai(a,i)
#
            ENDDO i
#
      ENDPARDO a, a1, a2, i1
#
# First-term of Iia_aa
# --------------------
# 
      PARDO a, a1, i2, i1
#
            GET Dijab_aa(i2,i1,a,a1)
#
            DO i
#
               GET VSpipi(a1,i1,i,i2) # +
#
               Tia(i,a)           = VSpipi(a1,i1,i,i2)*Dijab_aa(i2,i1,a,a1)
               Tia(i,a)          *= -1.0  
               PUT Iia_aa(i,a)   += Tia(i,a)
#
            ENDDO i
#
      ENDPARDO a, a1, i2, i1
#
# Done contributions to one-particle intermediates 
# ------------------------------------------------ 
      execute sip_barrier 
      delete Dijab_aa 
#
# --------------------------------------------------------------------------- 
#
      ENDPROC DIJABAA 
#
# --------------------------------------------------------------------------- 
#
#
# --------------------------------------------------------------------------- 
#
# In this PROCEDURE the D^{ij}_{ab} clock of the two-particle 
# density matrix is formed.  
#
# --------------------------------------------------------------------------- 
#
# First form one-particle intermediates 
#
# --------------------------------------------------------------------------- 
#
# Dim(i,m) = Gmi_a(i,m) + l1a_old(m,e)*t1a_old(e,i)  
#
# Dea(e,a) = Gae_a(e,a) - l1a_old(m,e)*t1a_old(a,m) 
#
# --------------------------------------------------------------------------- 
#
      PROC DIJABAB 
#     ------------- 
#
# One-particle intermediates computed in AA/BB blocks  
# ---------------------------------------------------  
#
# Terms 1-5 in Eq. 33 
# ------------------- 
#
      PARDO a, b, i, j 
#
            GET Tau_ab(a,i,b,j) 
            GET L2old_ab(i,a,j,b) 
#
            Tijab(i,j,a,b)  = Tau_ab(a,i,b,j) 
            T1ijab(i,j,a,b) = L2old_ab(i,a,j,b) 
            Tijab(i,j,a,b) += T1ijab(i,j,a,b)  
            Tijab(i,j,a,b) *= 0.125  
#
            DO i1 
#
               GET Dii(i,i1) 
               GET Tau_ab(a,i1,b,j) 
#
               T1ijab(i,j,a,b) = Tau_ab(a,i1,b,j)*Dii(i,i1) 
               T1ijab(i,j,a,b)*= -0.125 
               Tijab(i,j,a,b) += T1ijab(i,j,a,b) 
#
               DO j1 
#
                  GET Tau_ab(a,i1,b,j1) 
                  GET Vijmn_abab(i,j,i1,j1) 
#
                  T2ijab(i1,j1,a,b) = Tau_ab(a,i1,b,j1) 
                  T1ijab(i,j,a,b)   = Vijmn_abab(i,j,i1,j1)*T2ijab(i1,j1,a,b)
                  T1ijab(i,j,a,b)  *= 0.125 
                  Tijab(i,j,a,b)   += T1ijab(i,j,a,b) 
#
               ENDDO j1 
#
            ENDDO i1 
#
            DO j1 
#
               GET Djj(j,j1) 
               GET Tau_ab(a,i,b,j1) 
#
               T1ijab(i,j,a,b) = Tau_ab(a,i,b,j1)*Djj(j,j1) 
               T1ijab(i,j,a,b)*= -0.125 
               Tijab(i,j,a,b) += T1ijab(i,j,a,b) 
#
            ENDDO j1 
#            
            DO a1 
#
               GET Daa(a1,a) 
               GET Tau_ab(a1,i,b,j) 
#
               T1ijab(i,j,a,b) = Tau_ab(a1,i,b,j)*Daa(a1,a) 
               T1ijab(i,j,a,b)*= 0.125 
               Tijab(i,j,a,b) += T1ijab(i,j,a,b) 
#
            ENDDO a1 
#            
            DO b1 
#
               GET Dbb(b1,b) 
               GET Tau_ab(a,i,b1,j) 
#
               T1ijab(i,j,a,b) = Tau_ab(a,i,b1,j)*Dbb(b1,b) 
               T1ijab(i,j,a,b)*= 0.125 
               Tijab(i,j,a,b) += T1ijab(i,j,a,b) 
#
            ENDDO b1 
#            
            PUT Dijab_ab(i,j,a,b) += Tijab(i,j,a,b) 
#
      ENDPARDO a, b, i, j 
#
# Final term in Eq. 33
# --------------------
#
      PARDO a, b
#
            allocate Lbb(b,*)
#
            DO j
#
               GET t1b_old(b,j)
#
               DO b1
#
                  GET l1b_old(j,b1)
                  Tbb(b,b1)  = t1b_old(b,j)*l1b_old(j,b1)
                  Lbb(b,b1) += Tbb(b,b1)
#
               ENDDO b1
#
            ENDDO j
#
            allocate Lbj(b,*)
#
            DO b1
            DO j
#
               GET t1b_old(b1,j)
               Tbj(b,j)  = Lbb(b,b1)*t1b_old(b1,j)
               Lbj(b,j) += Tbj(b,j)
#
            ENDDO j
            ENDDO b1
#
            deallocate Lbb(b,*)
#
            DO i
#
               GET t1a_old(a,i)
#
               DO j
#
                  Tijab(i,j,a,b)  = t1a_old(a,i)^Lbj(b,j)
                  Tijab(i,j,a,b) *= 0.375
                  PUT Dijab_ab(i,j,a,b) += Tijab(i,j,a,b)
#
               ENDDO j
#
            ENDDO i
#
            deallocate Lbj(b,*)
#
      ENDPARDO a, b
#
      PARDO a, b
#
            allocate Laa(a,*)
#
            DO i
#
               GET t1a_old(a,i)
#
               DO a1
#
                  GET l1a_old(i,a1)
                  Taa(a,a1)  = t1a_old(a,i)*l1a_old(i,a1)
                  Laa(a,a1) += Taa(a,a1)
#
               ENDDO a1
#
            ENDDO i
#
            allocate Lai(a,*)
#
            DO a1
            DO i
#
               GET t1a_old(a1,i)
               Tai(a,i)  = Laa(a,a1)*t1a_old(a1,i)
               Lai(a,i) += Tai(a,i)
#
            ENDDO i
            ENDDO a1
#
            deallocate Laa(a,*)
#
            DO i
            DO j
#
               GET t1b_old(b,j)
               Tijab(i,j,a,b)         = t1b_old(b,j)^Lai(a,i)
               Tijab(i,j,a,b)        *= 0.375
               PUT Dijab_ab(i,j,a,b) += Tijab(i,j,a,b)
#
            ENDDO j
            ENDDO i
#
            deallocate Lai(a,*)
#
      ENDPARDO a, b
#
# Sixth-term in Eq. 33
# --------------------
#
      PARDO i1, a1, b, j
#
            GET l1a_old(i1,a1)
            GET t1b_old(b,j)
            Liabj(i1,a1,b,j)  = l1a_old(i1,a1)^t1b_old(b,j)
            Liabj(i1,a1,b,j) *= 2.0
#
            DO j1
            DO b1
#
               GET T2old_bb(b,j,b1,j1)
               GET L2old_ab(i1,a1,j1,b1)
               Tiabj(i1,a1,b,j)  = L2old_ab(i1,a1,j1,b1)*T2old_bb(b,j,b1,j1)
               Liabj(i1,a1,b,j) += Tiabj(i1,a1,b,j)
#
            ENDDO b1
            ENDDO j1
#
            DO i
            DO a
#
               GET T2old_ab(a,i,b,j)
               GET L2old_aa(i1,a1,i,a)
               Tiabj(i1,a1,b,j)  = L2old_aa(i1,a1,i,a)*T2old_ab(a,i,b,j)
               Liabj(i1,a1,b,j) += Tiabj(i1,a1,b,j)
#
            ENDDO a
            ENDDO i
#
            DO i
#
               GET t1a_old(a1,i)
               tai(a1,i) = t1a_old(a1,i)
#
               DO a
#
                  GET t1a_old(a,i1)
                  GET T2old_aa(a,i1,a1,i)
#
                  Laiai(a,i1,a1,i)       = t1a_old(a,i1)^tai(a1,i)
                  Laiai(a,i1,a1,i)      *= 2.0
                  Laiai(a,i1,a1,i)      += T2old_aa(a,i1,a1,i)
#
#                 Tijab(i,j,a,b)         = Laiai(a,i1,a1,i)*Liabj(i1,a1,b,j)
#
                  Taiia(a,i,i1,a1)       = Laiai(a,i1,a1,i) 
                  Taibj(a,i,b,j)         = Taiia(a,i,i1,a1)*Liabj(i1,a1,b,j)  
                  Tijab(i,j,a,b)         = Taibj(a,i,b,j) 
                  Tijab(i,j,a,b)        *= -0.0625 
                  PUT Dijab_ab(i,j,a,b) += Tijab(i,j,a,b)
#
               ENDDO a
#
            ENDDO i
#
      ENDPARDO i1, a1, b, j
#
      PARDO j2, b2, b, j
#
            GET l1b_old(j2,b2)
            GET t1b_old(b,j)
#
            Ljbbj(j2,b2,b,j)  = l1b_old(j2,b2)^t1b_old(b,j)
            Ljbbj(j2,b2,b,j) *= 2.0
#
            DO j1
            DO b1
#
               GET T2old_bb(b,j,b1,j1)
               GET L2old_bb(j2,b2,j1,b1)
#
               Tjbbj(j2,b2,b,j)  = L2old_bb(j2,b2,j1,b1)*T2old_bb(b,j,b1,j1)
               Ljbbj(j2,b2,b,j) += Tjbbj(j2,b2,b,j)
#
            ENDDO b1
            ENDDO j1
#
            DO i
            DO a
#
               GET T2old_ab(a,i,b,j)
               GET L2old_ab(i,a,j2,b2)
#
               Tjbbj(j2,b2,b,j)  = L2old_ab(i,a,j2,b2)*T2old_ab(a,i,b,j)
               Ljbbj(j2,b2,b,j) += Tjbbj(j2,b2,b,j)
#
            ENDDO a
            ENDDO i
#
            DO i
            DO a
#
               GET T2old_ab(a,i,b2,j2)
#
#              Tijab(i,j,a,b)         = T2old_ab(a,i,b2,j2)*Ljbbj(j2,b2,b,j)
#
               Tiajb(i,a,j2,b2)       = T2old_ab(a,i,b2,j2) 
               Tiabj(i,a,b,j)         = Tiajb(i,a,j2,b2)*Ljbbj(j2,b2,b,j) 
               Tijab(i,j,a,b)         = Tiabj(i,a,b,j)  
               Tijab(i,j,a,b)        *= 0.0625 
               PUT Dijab_ab(i,j,a,b) += Tijab(i,j,a,b)
#
            ENDDO a
            ENDDO i
#
      ENDPARDO j2, b2, b, j
#
      PARDO j1, b1, a, i
#
            GET l1b_old(j1,b1)
            GET t1a_old(a,i)
#
            Ljbai(j1,b1,a,i)  = l1b_old(j1,b1)^t1a_old(a,i)
            Ljbai(j1,b1,a,i) *= 2.0
#
            DO i1
            DO a1
#
               GET T2old_aa(a,i,a1,i1)
               GET L2old_ab(i1,a1,j1,b1)
#
               Tjbai(j1,b1,a,i)  = L2old_ab(i1,a1,j1,b1)*T2old_aa(a,i,a1,i1)
               Ljbai(j1,b1,a,i) += Tjbai(j1,b1,a,i)
#
            ENDDO a1
            ENDDO i1
#
            DO j
            DO b
#
               GET T2old_ab(a,i,b,j)
               GET L2old_bb(j,b,j1,b1)
#
               Tjbai(j1,b1,a,i)  = L2old_bb(j,b,j1,b1)*T2old_ab(a,i,b,j)
               Ljbai(j1,b1,a,i) += Tjbai(j1,b1,a,i)
#
            ENDDO b
            ENDDO j
#
            DO j
#
               GET t1b_old(b1,j)
               tbj(b1,j) = t1b_old(b1,j)
#
               DO b
#
                  GET t1b_old(b,j1)
                  GET T2old_bb(b,j1,b1,j)
#
                  Tbjjb(b,j,j1,b1)       = t1b_old(b,j1)^tbj(b1,j)
                  Tbjjb(b,j,j1,b1)      *= 2.0
                  T1bjjb(b,j,j1,b1)      = T2old_bb(b,j1,b1,j)
                  Tbjjb(b,j,j1,b1)      += T1bjjb(b,j,j1,b1)  
#
#                 Tijab(i,j,a,b)         = Lbjbj(b,j1,b1,j)*Ljbai(j1,b1,a,i)
                  Tbjai(b,j,a,i)         = Tbjjb(b,j,j1,b1)*Ljbai(j1,b1,a,i)
                  Tijab(i,j,a,b)         = Tbjai(b,j,a,i)  
                  Tijab(i,j,a,b)        *= -0.0625 
                  PUT Dijab_ab(i,j,a,b) += Tijab(i,j,a,b)
#
               ENDDO b
#
            ENDDO j
#
      ENDPARDO j1, b1, a, i
#
      PARDO i2, a2, a, i
#
            GET l1a_old(i2,a2)
            GET t1a_old(a,i)
#
            Liaai(i2,a2,a,i)  = l1a_old(i2,a2)^t1a_old(a,i)
            Liaai(i2,a2,a,i) *= 2.0
#
            DO i1
            DO a1
#
               GET T2old_aa(a,i,a1,i1)
               GET L2old_aa(i2,a2,i1,a1)
#
               Tiaai(i2,a2,a,i)  = L2old_aa(i2,a2,i1,a1)*T2old_aa(a,i,a1,i1)
               Liaai(i2,a2,a,i) += Tiaai(i2,a2,a,i)
#
            ENDDO a1
            ENDDO i1
#
            DO j
            DO b
#
               GET T2old_ab(a,i,b,j)
               GET L2old_ab(i2,a2,j,b)
#
               Tiaai(i2,a2,a,i)  = L2old_ab(i2,a2,j,b)*T2old_ab(a,i,b,j)
               Liaai(i2,a2,a,i) += Tiaai(i2,a2,a,i)
#
            ENDDO b
            ENDDO j
#
            DO j
            DO b
#
               GET T2old_ab(a2,i2,b,j)
#
#              Tijab(i,j,a,b)         = T2old_ab(a2,i2,b,j)*Liaai(i2,a2,a,i)
#
               Taiai(a,i,a2,i2)       = Liaai(i2,a2,a,i) 
               Taibj(a,i,b,j)         = Taiai(a,i,a2,i2)*T2old_ab(a2,i2,b,j) 
               Tijab(i,j,a,b)         = Taibj(a,i,b,j) 
               Tijab(i,j,a,b)        *= 0.0625 
               PUT Dijab_ab(i,j,a,b) += Tijab(i,j,a,b)
#
            ENDDO b
            ENDDO j
#
      ENDPARDO i2, a2, a, i
#
      PARDO b, b1, i1, i
#
            Lbibi(b,i1,b1,i) = 0.0
#
            DO j
            DO a
#
               GET T2old_ab(a,i,b,j)
               GET L2old_ab(i1,a,j,b1)
#
#              Tbibi(b,i1,b1,i)  = T2old_ab(a,i,b,j)*L2old_ab(i1,a,j,b1)
#
               Tibja(i,b,j,a)    = T2old_ab(a,i,b,j)
               Tjaib(j,a,i1,b1)  = L2old_ab(i1,a,j,b1) 
               Tibib(i,b,i1,b1)  = Tibja(i,b,j,a)*Tjaib(j,a,i1,b1)   
               Tbibi(b,i1,b1,i)  = Tibib(i,b,i1,b1) 
               Lbibi(b,i1,b1,i) += Tbibi(b,i1,b1,i)
#
            ENDDO a
            ENDDO j
#
            DO a
            DO j
#
               GET T2old_ab(a,i1,b1,j)
               GET t1a_old(a,i1)
               GET t1b_old(b1,j)
#
               Taibj(a,i1,b1,j)       = t1a_old(a,i1)^t1b_old(b1,j)
               Taibj(a,i1,b1,j)      *= 2.0
               Taibj(a,i1,b1,j)      += T2old_ab(a,i1,b1,j)
#
               Tijab(i,j,a,b)         = Taibj(a,i1,b1,j)*Lbibi(b,i1,b1,i)
               Tijab(i,j,a,b)        *= 0.0625 
               PUT Dijab_ab(i,j,a,b) += Tijab(i,j,a,b)
#
            ENDDO j
            ENDDO a
#
      ENDPARDO b, b1, i1, i
#
      PARDO a, a1, j1, j
#
            Lajaj(a,j1,a1,j) = 0.0
#
            DO i
            DO b
#
               GET T2old_ab(a,i,b,j)
               GET L2old_ab(i,a1,j1,b)
#
               Tajaj(a,j1,a1,j)  = T2old_ab(a,i,b,j)*L2old_ab(i,a1,j1,b)
               Lajaj(a,j1,a1,j) += Tajaj(a,j1,a1,j)
#
            ENDDO b
            ENDDO i
#
            DO b
#
               GET t1b_old(b,j1)
#
               DO i
#
                  GET T2old_ab(a1,i,b,j1)
                  GET t1a_old(a1,i)
#
                  Taibj(a1,i,b,j1)       = t1a_old(a1,i)^t1b_old(b,j1)
                  Taibj(a1,i,b,j1)      *= 2.0
                  Taibj(a1,i,b,j1)      += T2old_ab(a1,i,b,j1)
#
                  Tijab(i,j,a,b)         = Taibj(a1,i,b,j1)*Lajaj(a,j1,a1,j)
                  Tijab(i,j,a,b)        *= 0.0625 
                  PUT Dijab_ab(i,j,a,b) += Tijab(i,j,a,b)
#
            ENDDO i
#
            ENDDO b
#
      ENDPARDO a, a1, j1, j 
      execute sip_barrier 
#
# Multiply by 2 to match aces 
# --------------------------- 
#
      PARDO b, a, j, i 
#
            GET Dijab_ab(i,j,a,b) 
            Tijab(i,j,a,b)        = 2.0*Dijab_ab(i,j,a,b)
            PUT Dijab_ab(i,j,a,b) = Tijab(i,j,a,b) 
#
      ENDPARDO b, a, j, i 
      execute sip_barrier ca  
#
# Compute contributions to one-particle intermediates 
# --------------------------------------------------- 
#
# First-term of Iij_aa 
# --------------------
#
      PARDO j, a, b, i
#
           GET Vpiqj(a,i,b,j) # +
#
           DO i1
#
              GET Dijab_ab(i1,j,a,b)
#
              Tii(i,i1)         = Dijab_ab(i1,j,a,b)*Vpiqj(a,i,b,j)
              Tii(i,i1)        *= -2.0  
              PUT Iij_aa(i,i1) += Tii(i,i1)
#
           ENDDO i1
#
      ENDPARDO j, a, b, i
#
# First-term of Iij_bb 
# -------------------- 
#
      PARDO i, b, a, j1
#
            GET Vpiqj(a,i,b,j1) # +
#
            DO j
#
               GET Dijab_ab(i,j,a,b)
#
               Tjj(j1,j)         = Dijab_ab(i,j,a,b)*Vpiqj(a,i,b,j1)
               Tjj(j1,j)        *= -2.0  
               PUT Iij_bb(j1,j) += Tjj(j1,j)
#
            ENDDO j
#
      ENDPARDO i, b, a, j1
#
# First-term of Iab_aa
# --------------------
#
      PARDO a, b, i, j
#
            GET Vpiqj(a,i,b,j) # +
#
            DO a1
#
               GET Dijab_ab(i,j,a1,b)
#
               Taa(a,a1)         = Vpiqj(a,i,b,j)*Dijab_ab(i,j,a1,b)
               Taa(a,a1)        *= -2.0  
               PUT Iab_aa(a,a1) += Taa(a,a1)
#
            ENDDO a1
#
      ENDPARDO a, b, i, j
#
# First-term of Iab_bb
# --------------------
#
      PARDO b1, a, j, i
#
            GET Vpiqj(a,i,b1,j) # +
#
            DO b
#
               GET Dijab_ab(i,j,a,b)
#
               Tbb(b1,b)         = Vpiqj(a,i,b1,j)*Dijab_ab(i,j,a,b)
               Tbb(b1,b)        *= -2.0  
               PUT Iab_bb(b1,b) += Tbb(b1,b)
#
            ENDDO b
#
      ENDPARDO b1, a, j, i
#
# First-term of Iai_aa 
# -------------------- 
#
      PARDO a, a1, b, j
#
            GET Vaabj(a1,a,b,j) # +
            Tqpqp(j,a1,b,a)  = Vaabj(a1,a,b,j)
#
            DO i
#
               GET Dijab_ab(i,j,a1,b)
#
               Tai(a,i)         = Dijab_ab(i,j,a1,b)*Tqpqp(j,a1,b,a)
               Tai(a,i)        *= 2.0  
               PUT Iai_aa(a,i) += Tai(a,i)
#
            ENDDO i
#
      ENDPARDO a, a1, b, j
#
# First-term of Iai_bb 
# -------------------- 
#
      PARDO b, b1, a, i
#
            GET Vbbai(b1,b,a,i)
            Tpqpq(i,b1,a,b)  = Vbbai(b1,b,a,i)  
#
            DO j
#
               GET Dijab_ab(i,j,a,b1)
#
               Tbj(b,j)         = Dijab_ab(i,j,a,b1)*Tpqpq(i,b1,a,b)
               Tbj(b,j)        *= 2.0 
               PUT Iai_bb(b,j) += Tbj(b,j)
#
            ENDDO j
#
      ENDPARDO b, b1, a, i
#
# First-term of Iia_aa 
# -------------------- 
#
      PARDO a, b, i1, j
#
            GET Dijab_ab(i1,j,a,b)
#
            DO i
#
               GET Vpiqj(i,i1,b,j) # +
#
               Tia(i,a)         = Vpiqj(i,i1,b,j)*Dijab_ab(i1,j,a,b)
               Tia(i,a)        *= -2.0 
               PUT Iia_aa(i,a) += Tia(i,a)
#
            ENDDO i
#
      ENDPARDO a, b, i1, j
#
# First-term of Iia_bb 
# -------------------- 
#
      PARDO b, a, j1, i
#
            GET Dijab_ab(i,j1,a,b)
#
            DO j
#
               GET Vpiqj(a,i,j,j1)
#
               Tjb(j,b)         = Vpiqj(a,i,j,j1)*Dijab_ab(i,j1,a,b)
               Tjb(j,b)        *= -2.0  
               PUT Iia_bb(j,b) += Tjb(j,b)
#
            ENDDO j
#
      ENDPARDO b, a, j1, i
#
# Done contributions to one-particle intermediates 
# ------------------------------------------------ 
      execute sip_barrier 
      delete Dijab_ab  
#
# --------------------------------------------------------------------------- 
#
      ENDPROC DIJABAB 
#
# --------------------------------------------------------------------------- 
#
# --------------------------------------------------------------------------- 
#
# In this PROCEDURE the D^{ij}_{ab} block of the two-particle 
# density matrix is formed. Only the BB spin case is considered.  
#
# --------------------------------------------------------------------------- 
#
# First form one-particle intermediates 
#
# --------------------------------------------------------------------------- 
#
# Dim(i,m) = Gmi_b(i,m) + l1b_old(m,e)*t1b_old(e,i)  
#
# Dea(e,a) = Gae_b(e,a) - l1b_old(m,e)*t1b_old(a,m) 
#
# --------------------------------------------------------------------------- 
#
      PROC DIJABBB 
#     ------------- 
#
      execute sip_barrier ca  
#
# Djj 
# ---  
#
      PARDO j, j1 
#
            GET Gmi_b(j,j1) 
            PUT Djj(j,j1) += Gmi_b(j,j1) 
#
      ENDPARDO j, j1 
#
      PARDO j, j1, b       
#
            GET l1b_old(j1,b) 
            GET t1b_old(b,j) 
            Tjj(j,j1)      = l1b_old(j1,b)*t1b_old(b,j)  
            PUT Djj(j,j1) += Tjj(j,j1) 
#
      ENDPARDO j, j1, b       
#
# Dbb 
# --- 
#
      PARDO b1, b 
#
            GET Gae_b(b1,b) 
            PUT Dbb(b1,b) += Gae_b(b1,b) 
#
      ENDPARDO b1, b 
#
      PARDO b1, b, j 
#
            GET l1b_old(j,b1) 
            GET t1b_old(b,j) 
            Tbb(b1,b)      = t1b_old(b,j)*l1b_old(j,b1) 
            Tbb(b1,b)     *= -1.0  
            PUT Dbb(b1,b) += Tbb(b1,b) 
#
      ENDPARDO b1, b, j  
#
      execute sip_barrier ca  
#
# Done one-particle intermediates 
# ------------------------------- 
#
# Terms 1-5 in Eq. 33 
# ------------------- 
#
      PARDO b, b1, j, j1 
#
            GET Tau_bb(b,j,b1,j1) 
            GET L2old_bb(j,b,j1,b1) 
#
            Tjjbb(j,j1,b,b1)  = Tau_bb(b,j,b1,j1) 
            T1jjbb(j,j1,b,b1) = L2old_bb(j,b,j1,b1) 
            Tjjbb(j,j1,b,b1) += T1jjbb(j,j1,b,b1)  
            Tjjbb(j,j1,b,b1) *= 0.125  
#
            DO j2  
#
               GET Djj(j,j2) 
               GET Djj(j1,j2) 
               GET Tau_bb(b,j2,b1,j1) 
               GET Tau_bb(b,j2,b1,j) 
#
               T1jjbb(j,j1,b,b1) = Tau_bb(b,j2,b1,j1)*Djj(j,j2) 
               T1jjbb(j,j1,b,b1)*= -0.125 
               Tjjbb(j,j1,b,b1) += T1jjbb(j,j1,b,b1) 
#
               T1jjbb(j,j1,b,b1) = Tau_bb(b,j2,b1,j)*Djj(j1,j2) 
               T1jjbb(j,j1,b,b1)*= 0.125 
               Tjjbb(j,j1,b,b1) += T1jjbb(j,j1,b,b1) 
#
               DO j3 
#
                  GET Tau_bb(b,j2,b1,j3) 
                  GET Vijmn_bbbb(j,j1,j2,j3) 
#
#                 T1jjbb(j,j1,b,b1)  = Vijmn_bbbb(j,j1,j2,j3)*Tau_bb(b,j2,b1,j3)

                  T2jjbb(j2,j3,b,b1) = Tau_bb(b,j2,b1,j3) 
                  T1jjbb(j,j1,b,b1)  = Vijmn_bbbb(j,j1,j2,j3)*T2jjbb(j2,j3,b,b1) 
                  T1jjbb(j,j1,b,b1) *= 0.0625 
                  Tjjbb(j,j1,b,b1)  += T1jjbb(j,j1,b,b1) 
#
               ENDDO j3 
#
            ENDDO j2 
#            
            DO b2 
#
               GET Dbb(b2,b) 
               GET Dbb(b2,b1) 
               GET Tau_bb(b2,j,b1,j1) 
               GET Tau_bb(b2,j,b,j1) 
#
               T1jjbb(j,j1,b,b1) = Tau_bb(b2,j,b1,j1)*Dbb(b2,b) 
               T1jjbb(j,j1,b,b1)*= 0.125 
               Tjjbb(j,j1,b,b1) += T1jjbb(j,j1,b,b1) 
#
               T1jjbb(j,j1,b,b1) = Tau_bb(b2,j,b,j1)*Dbb(b2,b1) 
               T1jjbb(j,j1,b,b1)*= -0.125 
               Tjjbb(j,j1,b,b1) += T1jjbb(j,j1,b,b1) 
#
            ENDDO b2 
#            
            PUT Dijab_bb(j,j1,b,b1) += Tjjbb(j,j1,b,b1) 
#
      ENDPARDO b, b1, j, j1 
#
# Final term in Eq. 33
# --------------------
#
      PARDO b, b1
#
            allocate L1bb(b1,*)
#
            DO j
#
               GET t1b_old(b1,j)
#
               DO b2
#
                  GET l1b_old(j,b2)
                  Tbb(b1,b2)   = t1b_old(b1,j)*l1b_old(j,b2)
                  L1bb(b1,b2) += Tbb(b1,b2)
#
               ENDDO b2
#
            ENDDO j
#
            allocate L1bj(b1,*)
#
            DO b2
            DO j
#
               GET t1b_old(b2,j)
               Tbj(b1,j)   = L1bb(b1,b2)*t1b_old(b2,j)
               L1bj(b1,j) += Tbj(b1,j)
#
            ENDDO j
            ENDDO b2
#
            deallocate L1bb(b1,*)
#
            DO j
#
               GET t1b_old(b,j)
#
               DO j1
#
                  Tjjbb(j,j1,b,b1)         = t1b_old(b,j)^L1bj(b1,j1)
                  Tjjbb(j,j1,b,b1)        *= 0.375
                  PUT Dijab_bb(j,j1,b,b1) += Tjjbb(j,j1,b,b1)
#
                  T1jjbb(j,j1,b1,b)        = Tjjbb(j,j1,b,b1)
                  T1jjbb(j,j1,b1,b)       *= -1.0
                  PUT Dijab_bb(j,j1,b1,b) += T1jjbb(j,j1,b1,b)
#
                  T1jjbb(j1,j,b,b1)        = Tjjbb(j,j1,b,b1)
                  T1jjbb(j1,j,b,b1)       *= -1.0
                  PUT Dijab_bb(j1,j,b,b1) += T1jjbb(j1,j,b,b1)
#
                  T1jjbb(j1,j,b1,b)        = Tjjbb(j,j1,b,b1)
                  PUT Dijab_bb(j1,j,b1,b) += T1jjbb(j1,j,b1,b)
#
               ENDDO j1
#
            ENDDO j
#
            deallocate L1bj(b1,*)
#
      ENDPARDO b, b1
#
# Sixth-term in Eq. 33
# --------------------
#
      PARDO j2, b2, b1, j1
#
            GET l1b_old(j2,b2)
            GET t1b_old(b1,j1)

            Ljbbj(j2,b2,b1,j1)  = l1b_old(j2,b2)^t1b_old(b1,j1)
            Ljbbj(j2,b2,b1,j1) *= 2.0
#
            DO j3
            DO b3
#
               GET T2old_bb(b3,j3,b1,j1)
               GET L2old_bb(j2,b2,j3,b3)

               Tjbbj(j2,b2,b1,j1)  = L2old_bb(j2,b2,j3,b3)*T2old_bb(b3,j3,b1,j1)
               Ljbbj(j2,b2,b1,j1) += Tjbbj(j2,b2,b1,j1)
#
            ENDDO b3
            ENDDO j3
#
            DO i
            DO a
#
               GET T2old_ab(a,i,b1,j1)
               GET L2old_ab(i,a,j2,b2)

               Tjbbj(j2,b2,b1,j1)  = L2old_ab(i,a,j2,b2)*T2old_ab(a,i,b1,j1)
               Ljbbj(j2,b2,b1,j1) += Tjbbj(j2,b2,b1,j1)
#
            ENDDO a
            ENDDO i
#
            DO j
#
               GET t1b_old(b2,j)
               tbj(b2,j) = t1b_old(b2,j)
#
               DO b
#
                  GET t1b_old(b,j2)
                  GET T2old_bb(b,j2,b2,j)
#
                  Lbjbj(b,j2,b2,j)         = t1b_old(b,j2)^tbj(b2,j)
                  Lbjbj(b,j2,b2,j)        *= 2.0
                  Lbjbj(b,j2,b2,j)        += T2old_bb(b,j2,b2,j)
#
#                 Tjjbb(j,j1,b,b1)         = Lbjbj(b,j2,b2,j)*Ljbbj(j2,b2,b1,j1)
                  
                  Tjbjb(j,b,j2,b2)         = Lbjbj(b,j2,b2,j) 
                  Tjbbj(j,b,b1,j1)         = Tjbjb(j,b,j2,b2)*Ljbbj(j2,b2,b1,j1)
                  Tjjbb(j,j1,b,b1)         = Tjbbj(j,b,b1,j1) 
#
                  Tjjbb(j,j1,b,b1)        *= -0.0625 
                  PUT Dijab_bb(j,j1,b,b1) += Tjjbb(j,j1,b,b1)
#
                  T1jjbb(j,j1,b1,b)        = Tjjbb(j,j1,b,b1)
                  T1jjbb(j,j1,b1,b)       *= -1.0
                  PUT Dijab_bb(j,j1,b1,b) += T1jjbb(j,j1,b1,b)
#
                  T1jjbb(j1,j,b,b1)        = Tjjbb(j,j1,b,b1)
                  T1jjbb(j1,j,b,b1)       *= -1.0
                  PUT Dijab_bb(j1,j,b,b1) += T1jjbb(j1,j,b,b1)
#
                  T1jjbb(j1,j,b1,b)        = Tjjbb(j,j1,b,b1)
                  PUT Dijab_bb(j1,j,b1,b) += T1jjbb(j1,j,b1,b)
#
               ENDDO b
#
            ENDDO j
#
      ENDPARDO j2, b2, b1, j1
#
# Odd spin combination
# --------------------
#
      PARDO i, a, b1, j1
#
            GET l1a_old(i,a)
            GET t1b_old(b1,j1)
#
            Liabj(i,a,b1,j1)  = l1a_old(i,a)^t1b_old(b1,j1)
            Liabj(i,a,b1,j1) *= 2.0
#
            DO j3
            DO b3
#
               GET T2old_bb(b3,j3,b1,j1)
               GET L2old_ab(i,a,j3,b3)
#
               Tiabj(i,a,b1,j1)  = L2old_ab(i,a,j3,b3)*T2old_bb(b3,j3,b1,j1)
               Liabj(i,a,b1,j1) += Tiabj(i,a,b1,j1)
#
            ENDDO b3
            ENDDO j3
#
            DO i1
            DO a1
#
               GET T2old_ab(a1,i1,b1,j1)
               GET L2old_aa(i1,a1,i,a)
#
               Tiabj(i,a,b1,j1)  = L2old_aa(i1,a1,i,a)*T2old_ab(a1,i1,b1,j1)
               Liabj(i,a,b1,j1) += Tiabj(i,a,b1,j1)
#
            ENDDO a1
            ENDDO i1
#
            DO j
            DO b
#
               GET T2old_ab(a,i,b,j)
#
#              Tjjbb(j,j1,b,b1)         = T2old_ab(a,i,b,j)*Liabj(i,a,b1,j1)

               Tjbia(j,b,i,a)           = T2old_ab(a,i,b,j) 
               Tjbbj(j,b,b1,j1)         = Tjbia(j,b,i,a)*Liabj(i,a,b1,j1)  
               Tjjbb(j,j1,b,b1)         = Tjbbj(j,b,b1,j1) 
               Tjjbb(j,j1,b,b1)        *= 0.0625
               PUT Dijab_bb(j,j1,b,b1) += Tjjbb(j,j1,b,b1)
#
               T1jjbb(j,j1,b1,b)        = Tjjbb(j,j1,b,b1)
               T1jjbb(j,j1,b1,b)       *= -1.0
               PUT Dijab_bb(j,j1,b1,b) += T1jjbb(j,j1,b1,b)
#
               T1jjbb(j1,j,b,b1)        = Tjjbb(j,j1,b,b1)
               T1jjbb(j1,j,b,b1)       *= -1.0
               PUT Dijab_bb(j1,j,b,b1) += T1jjbb(j1,j,b,b1)
#
               T1jjbb(j1,j,b1,b)        = Tjjbb(j,j1,b,b1)
               PUT Dijab_bb(j1,j,b1,b) += T1jjbb(j1,j,b1,b)
#
            ENDDO b
            ENDDO j
#
      ENDPARDO i, a, b1, j1
      execute sip_barrier 
#
      PARDO b, b1, j, j1 
#
            GET Dijab_bb(j,j1,b,b1) 
            Tjjbb(j,j1,b,b1)        = 2.0*Dijab_bb(j,j1,b,b1)
            PUT Dijab_bb(j,j1,b,b1) = Tjjbb(j,j1,b,b1) 
#
      ENDPARDO b, b1, j, j1 
      execute sip_barrier 
#
# Compute contributions to one-particle intermediates 
# --------------------------------------------------- 
#
# First-term of Iij_bb 
# -------------------- 
#
      PARDO j2, b, b1, j1
#
            GET VSqjqj(b1,j2,b,j1) # +
            Tqqqq(j2,b,b1,j1)  = VSqjqj(b1,j2,b,j1)
#
            DO j
#
               GET Dijab_bb(j,j2,b,b1)
#
               Tjj(j1,j)         = Dijab_bb(j,j2,b,b1)*Tqqqq(j2,b,b1,j1)
               Tjj(j1,j)        *= -1.0  
               PUT Iij_bb(j1,j) += Tjj(j1,j)
#
            ENDDO j
#
      ENDPARDO j2, b, b1, j1
#
# First-term of Iab_bb
# --------------------
#
      PARDO b, b2, j, j1
#
            GET VSqjqj(b,j,b2,j1) # +
#
            DO b1
#
               GET Dijab_bb(j,j1,b1,b2)
#
               Tbb(b,b1)         = VSqjqj(b,j,b2,j1)*Dijab_bb(j,j1,b1,b2)
               Tbb(b,b1)        *= -1.0  
               PUT Iab_bb(b,b1) += Tbb(b,b1)
#
            ENDDO b1
#
      ENDPARDO b, b2, j, j1
#
# First-term of Iai_bb
# --------------------
#
      PARDO b, b1, b2, j1
#
            GET VSbbbj(b1,b,b2,j1) # +
            Tqqqq(j1,b1,b2,b)  = VSbbbj(b1,b,b2,j1)
#
            DO j
#
               GET Dijab_bb(j,j1,b1,b2)
#
               Tbj(b,j)         = Dijab_bb(j,j1,b1,b2)*Tqqqq(j1,b1,b2,b)
               PUT Iai_bb(b,j) += Tbj(b,j)
#
            ENDDO j
#
      ENDPARDO b, b1, b2, j1
#
# First-term of Iia_bb
# --------------------
#
      PARDO b, b1, j1, j2
#
            GET Dijab_bb(j1,j2,b,b1)
#
            DO j
#
               GET VSqjqj(b1,j2,j,j1) # +
#
               Tjb(j,b)         = VSqjqj(b1,j2,j,j1)*Dijab_bb(j1,j2,b,b1)
               Tjb(j,b)        *= -1.0  
               PUT Iia_bb(j,b) += Tjb(j,b)
#
            ENDDO j
#
      ENDPARDO b, b1, j1, j2
#
# Done contributions to one-particle intermediates 
# ------------------------------------------------ 
      execute sip_barrier 
      delete Dijab_bb 
#
# --------------------------------------------------------------------------- 
#
      ENDPROC DIJABBB 
#
# --------------------------------------------------------------------------- 
#
      PROC DIJAB 
#     ----------- 
#
# Create gamma arrays and one-particle intermediates 
# Note that Dii and Daa are computed in DIJABAA and 
# Djj and Dbb are computed in DIJABBB. 
# -------------------------------------------------- 
#
           CREATE Dii
           CREATE Daa
           CREATE Djj
           CREATE Dbb
           execute sip_barrier 
#
           CREATE Dijab_aa  
           execute sip_barrier

           CALL DIJABAA 

           CREATE Dijab_bb
           execute sip_barrier

           CALL DIJABBB 

           CREATE Dijab_ab
           execute sip_barrier

           CALL DIJABAB 
           execute sip_barrier 

           DELETE Dii
           DELETE Daa
           DELETE Djj
           DELETE Dbb
#
      ENDPROC DIJAB 
#     ------------- 
#
# --------------------------------------------------------------------------- 
#
#
# -----------------------------------------------------------------------------
#
# Expression programmed: Equivalent to gamma2.  
#
# D^{ab}_{cd} = 1/16 P_+(ab,cd) \Tau^{ab}_{ij} \lambda^{ij}_{cd} 
# 4* D is stored to be consistent with acess 
#
# -----------------------------------------------------------------------------
#
      PROC DABCDAA 
#     ------------- 
# 
      PARDO a, a1, a2, a3 
#
            Dabcd_aa(a,a1,a2,a3)  = 0.0  
            DXabcd_aa(a2,a3,a,a1) = 0.0  
#
            DO i 
            DO i1 
#
               GET Tau_aa(a,i,a1,i1) 
               GET L2old_aa(i,a2,i1,a3) 
               Taaii(a,a1,i,i1)  = Tau_aa(a,i,a1,i1)
               Tiiaa(i,i1,a2,a3) = L2old_aa(i,a2,i1,a3) 
#
#              Taaaa(a,a1,a2,a3)      = Tau_aa(a,i,a1,i1)*L2old_aa(i,a2,i1,a3)
               Taaaa(a,a1,a2,a3)      = Taaii(a,a1,i,i1)*Tiiaa(i,i1,a2,a3)
#
               Taaaa(a,a1,a2,a3)     *= 0.25
               T1aaaa(a2,a3,a,a1)     = Taaaa(a,a1,a2,a3)
#
                Dabcd_aa(a,a1,a2,a3) += Taaaa(a,a1,a2,a3)
               DXabcd_aa(a2,a3,a,a1) += T1aaaa(a2,a3,a,a1) 
#
            ENDDO i1 
            ENDDO i 
#
# Compute contributions to one-particle intermediates 
# --------------------------------------------------- 
#
#           Second-term of Iia_aa 
#           --------------------- 
#
            DO i
#
               GET VSaaai(a3,a1,a2,i) # +
               GET VSaaai(a1,a3,a,i) # +
#
               Tpppp(a1,a2,a3,i)  = VSaaai(a3,a1,a2,i)
#
               Tia(i,a)           = Dabcd_aa(a,a1,a2,a3)*Tpppp(a1,a2,a3,i)
               Tia(i,a)          *= -0.5  
               PUT Iia_aa(i,a)   += Tia(i,a)
#
               Tpppp(a3,a,a1,i)   = VSaaai(a1,a3,a,i)
#
               Tia(i,a2)          = DXabcd_aa(a2,a3,a,a1)*Tpppp(a3,a,a1,i)
               Tia(i,a2)         *=-0.5  
               PUT Iia_aa(i,a2)  += Tia(i,a2)
#
            ENDDO i
#
# Done contributions to one-particle intermediates 
# ------------------------------------------------ 
#
      ENDPARDO a, a1, a2, a3 
#
      ENDPROC DABCDAA 
#     ---------------- 
#
# -----------------------------------------------------------------------------
#
# Expression programmed: 
#
# D^{AB}_{CD} = 1/16 P_+(AB,CD) \Tau^{AB}_{IJ} \lambda^{IJ}_{CD} 
# 4* D is stored to be consistent with acess 
#
# -----------------------------------------------------------------------------
#
      PROC DABCDBB 
#     ------------- 
# 
      PARDO b, b1, b2, b3 
#
            Dabcd_bb(b,b1,b2,b3)  = 0.0  
            DXabcd_bb(b2,b3,b,b1) = 0.0  
#
            DO j 
            DO j1 
#
               GET Tau_bb(b,j,b1,j1) 
               GET L2old_bb(j,b2,j1,b3) 
               Tbbjj(b,b1,j,j1)  = Tau_bb(b,j,b1,j1)
               Tjjbb(j,j1,b2,b3) = L2old_bb(j,b2,j1,b3) 
#
#              Tbbbb(b,b1,b2,b3)     = Tau_bb(b,j,b1,j1)*L2old_bb(j,b2,j1,b3) 
               Tbbbb(b,b1,b2,b3)     = Tbbjj(b,b1,j,j1)*Tjjbb(j,j1,b2,b3) 
#
               Tbbbb(b,b1,b2,b3)    *= 0.25  
               T1bbbb(b2,b3,b,b1)    = Tbbbb(b,b1,b2,b3)  
#
                Dabcd_bb(b,b1,b2,b3) += Tbbbb(b,b1,b2,b3)  
               DXabcd_bb(b2,b3,b,b1) += T1bbbb(b2,b3,b,b1)  
#
            ENDDO j1 
            ENDDO j 
#
# Compute contributions to one-particle intermediates 
# --------------------------------------------------- 
#
#           Second-term of Iia_bb 
#           --------------------- 
#
            DO j
#
               GET VSbbbj(b3,b1,b2,j) # +
               GET VSbbbj(b1,b3,b,j) # +
#
               Tqqqq(b1,b2,b3,j)  = VSbbbj(b3,b1,b2,j)
               Tjb(j,b)           = Dabcd_bb(b,b1,b2,b3)*Tqqqq(b1,b2,b3,j)
               Tjb(j,b)          *= -0.5
               PUT Iia_bb(j,b)   += Tjb(j,b)
#
               Tqqqq(b3,b,b1,j)   = VSbbbj(b1,b3,b,j)
#
               Tjb(j,b2)          = DXabcd_bb(b2,b3,b,b1)*Tqqqq(b3,b,b1,j)
               Tjb(j,b2)         *= -0.5
               PUT Iia_bb(j,b2)  += Tjb(j,b2)
#
            ENDDO j
#
# Done contributions to one-particle intermediates 
# ------------------------------------------------ 
#
      ENDPARDO b, b1, b2, b3 
#
      ENDPROC DABCDBB 
#     ---------------- 
# 
# -----------------------------------------------------------------------------
#
# Expression programmed: 
#
# D^{aB}_{cD} = 1/8 P_+(aB,cD) \Tau^{aB}_{iJ} \lambda^{iJ}_{cD} 
# 4* D is stored to be consistent with acess 
#
# -----------------------------------------------------------------------------
#
      PROC DABCDAB 
#     ------------- 
# 
      PARDO a, b, a1, b1 
#
            Dabcd_ab(a,b,a1,b1)  = 0.0  
            DXabcd_ab(a1,b1,a,b) = 0.0  
#
            DO i 
            DO j 
#
               GET Tau_ab(a,i,b,j) 
               GET L2old_ab(i,a1,j,b1) 
               Tabij(a,b,i,j)        = Tau_ab(a,i,b,j) 
               Tijab(i,j,a1,b1)      = L2old_ab(i,a1,j,b1) 
#
#              Tabab(a,b,a1,b1)      = Tau_ab(a,i,b,j)*L2old_ab(i,a1,j,b1) 
               Tabab(a,b,a1,b1)      = Tabij(a,b,i,j)*Tijab(i,j,a1,b1) 
#
               Tabab(a,b,a1,b1)     *= 0.5  
               T1abab(a1,b1,a,b)     = Tabab(a,b,a1,b1)  
#
                Dabcd_ab(a,b,a1,b1) += Tabab(a,b,a1,b1)  
               DXabcd_ab(a1,b1,a,b) += T1abab(a1,b1,a,b)  
#
            ENDDO j 
            ENDDO i 
#
# Compute contributions to one-particle intermediates 
# --------------------------------------------------- 
#
#           Second-term of Iia_aa 
#           --------------------- 
#
            DO i
#
               GET Vbbai(b1,b,a1,i)
               GET Vbbai(b,b1,a,i)
#
               Tia(i,a)          = Dabcd_ab(a,b,a1,b1)*Vbbai(b1,b,a1,i) 
               Tia(i,a)         *= -1.0
               PUT Iia_aa(i,a)  += Tia(i,a)
#
               Tia(i,a1)         = DXabcd_ab(a1,b1,a,b)*Vbbai(b,b1,a,i)
               Tia(i,a1)        *= -1.0
               PUT Iia_aa(i,a1) += Tia(i,a1)
#
            ENDDO i
#
#           Second-term of Iia_bb 
#           --------------------- 
#
            DO j
#
               GET Vaabj(a1,a,b1,j) # +
               GET Vaabj(a,a1,b,j) # +
#
               Tjb(j,b)          = Dabcd_ab(a,b,a1,b1)*Vaabj(a1,a,b1,j)
               Tjb(j,b)         *= -1.0
               PUT Iia_bb(j,b)  += Tjb(j,b)
#
               Tjb(j,b1)         = DXabcd_ab(a1,b1,a,b)*Vaabj(a,a1,b,j)
               Tjb(j,b1)        *= -1.0
               PUT Iia_bb(j,b1) += Tjb(j,b1)
#
            ENDDO j
#
# Done contributions to one-particle intermediates 
# ------------------------------------------------ 
#
      ENDPARDO a, b, a1, b1 
#
      ENDPROC DABCDAB 
#     ---------------- 
# 
      PROC DABCD 
#     ---------- 
#
# Create gamma arrays 
# ------------------- 
#
           CALL DABCDAA 
           CALL DABCDAB 
           CALL DABCDBB 
# 
      ENDPROC DABCD 
#     -------------  
#
# ---------------------------------------------------------------------------- 
#
# Expression programmed: 
#
# D^{ij}_{kl} = 1/16 P_+(ij,kl) \lambda^{ij}_{ef} \tau^{ef}_{kl} 
# Note that 4* result is kept to be consistent with aces. 
#
# Equivalent to gamma3 
#
# ---------------------------------------------------------------------------- 
#
      PROC DIJKLAAAA 
#     -------------- 
#
      CREATE Dijkl_aa
      CREATE Vijmn_aaaa
      execute sip_barrier 
#
      PARDO a, a1, i, i1  
#
            GET L2old_aa(i,a,i1,a1) 
            Tiiaa(i,i1,a,a1) = L2old_aa(i,a,i1,a1)  
#
            DO i2 
            DO i3 
#
               GET Tau_aa(a,i2,a1,i3) 
               Taaii(a,a1,i2,i3) = Tau_aa(a,i2,a1,i3) 
#
#              Tiiii(i,i1,i2,i3)           = L2old_aa(i,a,i1,a1)*Tau_aa(a,i2,a1,i3) 
               Tiiii(i,i1,i2,i3)           = Tiiaa(i,i1,a,a1)*Taaii(a,a1,i2,i3)  
#
               Tiiii(i,i1,i2,i3)          *= 0.25  
               T1iiii(i2,i3,i,i1)          = Tiiii(i,i1,i2,i3) 
               PUT Dijkl_aa(i,i1,i2,i3)   += Tiiii(i,i1,i2,i3) 
               PUT Dijkl_aa(i2,i3,i,i1)   += T1iiii(i2,i3,i,i1) 
#
               T1iiii(i2,i3,i,i1)         *= 2.0   
               PUT Vijmn_aaaa(i2,i3,i,i1) += T1iiii(i2,i3,i,i1)  
#
            ENDDO i3 
            ENDDO i2 
#
      ENDPARDO a, a1, i, i1  
      execute sip_barrier 
#
# Compute contributions to intermediates 
# -------------------------------------- 
#
#     Part of the Second-term of Iij_aa
#     ---------------------------------
#
      PARDO i2, i3, i4, i
#
            GET VSpipi(i3,i,i4,i2) # +
            Tpppp(i2,i3,i4,i)  = VSpipi(i3,i,i4,i2)
#
            DO i1
#
               GET Dijkl_aa(i1,i2,i3,i4)
#
               Tii(i,i1)         = Dijkl_aa(i1,i2,i3,i4)*Tpppp(i2,i3,i4,i)
               Tii(i,i1)        *= -0.5
               PUT Iij_aa(i,i1) += Tii(i,i1)
#
            ENDDO i1
#
      ENDPARDO i2, i3, i4, i
#
#     Part of the Second-term of Iai_aa
#     ---------------------------------
#
      PARDO a, i2, i3, i1
#
            GET VSpipi(i3,i2,a,i1) # +
            Tpppp(i3,i1,i2,a)  = VSpipi(i3,i2,a,i1)
#
            DO i
#
               GET Dijkl_aa(i,i3,i1,i2)
#
               Tai(a,i)         = Dijkl_aa(i,i3,i1,i2)*Tpppp(i3,i1,i2,a)
               Tai(a,i)        *= 0.5
               PUT Iai_aa(a,i) += Tai(a,i)
#
            ENDDO i
#
      ENDPARDO a, i2, i3, i1
#
# Done one-particle contributions 
# ------------------------------- 
#
# Remove density component
# ------------------------ 
      execute sip_barrier 
      delete Dijkl_aa 
#
      ENDPROC DIJKLAAAA 
#     ----------------- 
#
# ---------------------------------------------------------------------------- 
#
# Expression programmed: 
#
# D^{IJ}_{KL} = 1/16 P_+(IJ,KL) \lambda^{IJ}_{EF} \tau^{EF}_{KL} 
# Note that 4* result is kept to be consistent with aces. 
#
# ---------------------------------------------------------------------------- 
#
      PROC DIJKLBBBB 
#     -------------- 
#
      CREATE Dijkl_bb
      CREATE Vijmn_bbbb
      execute sip_barrier 
#
      PARDO b, b1, j, j1   
#
            GET L2old_bb(j,b,j1,b1) 
            Tjjbb(j,j1,b,b1) = L2old_bb(j,b,j1,b1) 
#
            DO j2 
            DO j3 
#
               GET Tau_bb(b,j2,b1,j3) 
               Tbbjj(b,b1,j2,j3) = Tau_bb(b,j2,b1,j3) 
#
#              Tjjjj(j,j1,j2,j3)           = L2old_bb(j,b,j1,b1)*Tau_bb(b,j2,b1,j3) 
               Tjjjj(j,j1,j2,j3)           = Tjjbb(j,j1,b,b1)*Tbbjj(b,b1,j2,j3)  
#
               Tjjjj(j,j1,j2,j3)          *= 0.25  
               T1jjjj(j2,j3,j,j1)          = Tjjjj(j,j1,j2,j3) 
               PUT Dijkl_bb(j,j1,j2,j3)   += Tjjjj(j,j1,j2,j3) 
               PUT Dijkl_bb(j2,j3,j,j1)   += T1jjjj(j2,j3,j,j1) 
#
               T1jjjj(j2,j3,j,j1)         *= 2.0   
               PUT Vijmn_bbbb(j2,j3,j,j1) += T1jjjj(j2,j3,j,j1) 
#
            ENDDO j3 
            ENDDO j2 
#
      ENDPARDO b, b1, j, j1  
      execute sip_barrier 
#
# Compute contributions to intermediates 
# -------------------------------------- 
#
#     Part of the Second-term of Iij_bb
#     ---------------------------------
#
      PARDO j2, j3, j4, j1
#
            GET VSqjqj(j3,j1,j4,j2) # +
            Tqqqq(j2,j3,j4,j1)  = VSqjqj(j3,j1,j4,j2)
#
            DO j
#
               GET Dijkl_bb(j,j2,j3,j4)
#
               Tjj(j1,j)         = Dijkl_bb(j,j2,j3,j4)*Tqqqq(j2,j3,j4,j1)
               Tjj(j1,j)        *= -0.5
               PUT Iij_bb(j1,j) += Tjj(j1,j)
#
            ENDDO j
#
      ENDPARDO j2, j3, j4, j1
#
#     Part of the Second-term of Iai_bb
#     ---------------------------------
#
      PARDO b, j3, j1, j2
#
            GET VSqjqj(j1,j3,b,j2) # +
            Tqqqq(j1,j2,j3,b)  = VSqjqj(j1,j3,b,j2)
#
            DO j
#
               GET Dijkl_bb(j,j1,j2,j3)
#
               Tbj(b,j)         = Dijkl_bb(j,j1,j2,j3)*Tqqqq(j1,j2,j3,b)
               Tbj(b,j)        *= 0.5
               PUT Iai_bb(b,j) += Tbj(b,j)
#
            ENDDO j
#
      ENDPARDO b, j3, j1, j2
#
# Done one-particle contributions 
# ------------------------------- 
#
# Remove density component
# ------------------------ 
      execute sip_barrier 
      delete Dijkl_bb 
#
      ENDPROC DIJKLBBBB 
#     ----------------- 
#
# ---------------------------------------------------------------------------- 
#
# Expression programmed: 
#
# D^{iJ}_{kL} = 1/8 P_+(iJ,kL) \lambda^{iJ}_{eF} \tau^{eF}_{kL} 
#
# ---------------------------------------------------------------------------- 
#
      PROC DIJKLABAB 
#     -------------- 
#
      CREATE Dijkl_ab
      CREATE Vijmn_abab
      execute sip_barrier 
#
      PARDO a, b, i, j  
#
            GET L2old_ab(i,a,j,b) 
            Tijab(i,j,a,b) = L2old_ab(i,a,j,b) 
#
            DO i1 
            DO j1 
#
               GET Tau_ab(a,i1,b,j1) 
               Tabij(a,b,i1,j1) = Tau_ab(a,i1,b,j1) 
#
#              Tijij(i,j,i1,j1)           = L2old_ab(i,a,j,b)*Tau_ab(a,i1,b,j1) 
               Tijij(i,j,i1,j1)           = Tijab(i,j,a,b)*Tabij(a,b,i1,j1)   
#
               Tijij(i,j,i1,j1)          *= 0.5  
               T1ijij(i1,j1,i,j)          = Tijij(i,j,i1,j1) 
               PUT Dijkl_ab(i,j,i1,j1)   += Tijij(i,j,i1,j1) 
               PUT Dijkl_ab(i1,j1,i,j)   += T1ijij(i1,j1,i,j) 
#
               T1ijij(i1,j1,i,j)         *= 2.0  
               PUT Vijmn_abab(i1,j1,i,j) += T1ijij(i1,j1,i,j) 
#
            ENDDO j1 
            ENDDO i1 
#
      ENDPARDO a, b, i, j  
      execute sip_barrier 
#
# Compute contributions to intermediates 
# -------------------------------------- 
#
# Part of the second-term of Iij_aa
# ---------------------------------
#
      PARDO j1, i2, j, i
#
            GET Vpiqj(i2,i,j,j1) # +
#
            DO i1
#
               GET Dijkl_ab(i1,j1,i2,j)
#
               Tii(i,i1)         = Dijkl_ab(i1,j1,i2,j)*Vpiqj(i2,i,j,j1) 
               Tii(i,i1)        *= -1.0
               PUT Iij_aa(i,i1) += Tii(i,i1)
#
            ENDDO i1
#
      ENDPARDO j1, i2, j, i
#
# Part of the second-term of Iij_bb
# ---------------------------------
#
      PARDO i, j2, i1, j1
#
            GET Vpiqj(i1,i,j2,j1) # +
#
            DO j
#
               GET Dijkl_ab(i,j,i1,j2)
#
               Tjj(j1,j)         = Dijkl_ab(i,j,i1,j2)*Vpiqj(i1,i,j2,j1)
               Tjj(j1,j)        *= -1.0
               PUT Iij_bb(j1,j) += Tjj(j1,j)
#
            ENDDO j
#
      ENDPARDO i, j2, i1, j1
#
# Part of the Second-term of Iai_aa
# ---------------------------------
#
      PARDO a, j1, j, i1
#
            GET Vpiqj(a,i1,j,j1)
            Tqpqp(j,i1,j1,a)  = Vpiqj(a,i1,j,j1)
#
            DO i
#
               GET Dijkl_ab(i,j,i1,j1)
#
               Tai(a,i)         = Dijkl_ab(i,j,i1,j1)*Tqpqp(j,i1,j1,a)
               PUT Iai_aa(a,i) += Tai(a,i)
#
            ENDDO i
#
      ENDPARDO a, j1, j, i1
#
# Part of the Second-term of Iai_bb
# ---------------------------------
#
      PARDO b, i1, i, j1
#
            GET Vpiqj(i,i1,b,j1)
            Tpqpq(i,j1,i1,b)  = Vpiqj(i,i1,b,j1)
#
            DO j
#
               GET Dijkl_ab(i,j,i1,j1)
#
               Tbj(b,j)         = Dijkl_ab(i,j,i1,j1)*Tpqpq(i,j1,i1,b)
               PUT Iai_bb(b,j) += Tbj(b,j)
#
            ENDDO j
#
      ENDPARDO b, i1, i, j1
#
# Done one-particle contributions 
# ------------------------------- 
#
# Remove density component
# ------------------------ 
      execute sip_barrier 
      delete Dijkl_ab 
#
      ENDPROC DIJKLABAB 
#     ----------------- 
#
# ---------------------------------------------------------------------------- 
#
      PROC DIJKL 
#     ---------- 
#
      CALL DIJKLAAAA 
      CALL DIJKLABAB 
      CALL DIJKLBBBB 
#
      ENDPROC DIJKL 
#     ------------- 
#
# ---------------------------------------------------------------------------- 
#
# Equivalent to gamma4*4 --> factor of 4 to match aces  
#
# ----------------------------------------------------------------------------
#
      PROC DIBJAAAAA 
#     -------------- 
      CREATE Dibja_aaaa 
      CREATE Vibja_aaaa 
      execute sip_barrier 
#
      PARDO a, a1, i, i1 
#
            Tiaia(i,a1,i1,a)  = 0.0 
            TAiaia(i1,a,i,a1) = 0.0 
#
            GET t1a_old(a,i) 
            GET l1a_old(i1,a1) 
# 
            T1iaia(i,a1,i1,a)   = t1a_old(a,i)^l1a_old(i1,a1)    
            T1iaia(i,a1,i1,a)  *= 0.125     
            Tiaia(i,a1,i1,a)   += T1iaia(i,a1,i1,a)  
#
            T2iaia(i1,a,i,a1)  = T1iaia(i,a1,i1,a)  
            TAiaia(i1,a,i,a1) += T2iaia(i1,a,i,a1)  
#
            DO i2  
#
               GET t1a_old(a,i2) 
               tai(a,i2) = t1a_old(a,i2) 
#
               DO a2 
#
                  GET T2old_aa(a,i,a2,i2) 
                  GET L2old_aa(i1,a1,i2,a2)   
                  GET t1a_old(a2,i) 
#
                  Tiaai(i2,a2,a,i)           = T2old_aa(a,i,a2,i2) 
                  T1iaai(i1,a1,a,i)          = L2old_aa(i1,a1,i2,a2)*Tiaai(i2,a2,a,i)  
                  T1iaia(i,a1,i1,a)          = T1iaai(i1,a1,a,i)  
                  T1iaia(i,a1,i1,a)         *= 0.5   
                  PUT Vibja_aaaa(i,a1,i1,a) += T1iaia(i,a1,i1,a) 
#
                  T1iaia(i,a1,i1,a)         *= 0.25   
                  Tiaia(i,a1,i1,a)          += T1iaia(i,a1,i1,a)  
#
                  T2iaia(i1,a,i,a1)          = T1iaia(i,a1,i1,a)  
                  TAiaia(i1,a,i,a1)         += T2iaia(i1,a,i,a1)  
#
                  T1iaia(i2,a2,i,a)          = t1a_old(a2,i)^tai(a,i2)
#
#                 T1iaia(i,a1,i1,a)          = L2old_aa(i1,a1,i2,a2)*Taiai(a2,i,a,i2) 
                  T3iaia(i1,a1,i,a)          = L2old_aa(i1,a1,i2,a2)*T1iaia(i2,a2,i,a) 
                  T1iaia(i,a1,i1,a)          = T3iaia(i1,a1,i,a)  
#
                  T1iaia(i,a1,i1,a)         *= -0.125 
                  Tiaia(i,a1,i1,a)          += T1iaia(i,a1,i1,a)  
#
                  T2iaia(i1,a,i,a1)          = T1iaia(i,a1,i1,a)  
                  TAiaia(i1,a,i,a1)         += T2iaia(i1,a,i,a1)  
#
               ENDDO a2 
#
            ENDDO i2 
#
            DO j 
            DO b 
#
               GET T2old_ab(a,i,b,j) 
               GET L2old_ab(i1,a1,j,b)   
#
               Tjbia(j,b,i,a)             = T2old_ab(a,i,b,j) 
               T2iaia(i1,a1,i,a)          = L2old_ab(i1,a1,j,b)*Tjbia(j,b,i,a)  
               T1iaia(i,a1,i1,a)          = T2iaia(i1,a1,i,a) 
#  
               T1iaia(i,a1,i1,a)         *= 0.5   
               PUT Vibja_aaaa(i,a1,i1,a) += T1iaia(i,a1,i1,a) 
#
               T1iaia(i,a1,i1,a)         *= 0.25   
               Tiaia(i,a1,i1,a)          += T1iaia(i,a1,i1,a)  
#
               T2iaia(i1,a,i,a1)          = T1iaia(i,a1,i1,a)  
               TAiaia(i1,a,i,a1)         += T2iaia(i1,a,i,a1)  
#
            ENDDO b 
            ENDDO j 
#
# Multiply by 4 to match aces 
# --------------------------- 
#
            Tiaia(i,a1,i1,a)          *= 4.0 
            TAiaia(i1,a,i,a1)         *= 4.0 
#
            PUT Dibja_aaaa(i,a1,i1,a) += Tiaia(i,a1,i1,a)  
            PUT Dibja_aaaa(i1,a,i,a1) += TAiaia(i1,a,i,a1)  
#
      ENDPARDO a, a1, i, i1 
      execute sip_barrier 
#
# Compute contributions to one-particle intermediates 
# --------------------------------------------------- 
#
#     Third-term of Iij_ii
#     --------------------
#
      PARDO i, a, i2, a1
#
            GET Vaaii(a1,a,i2,i) # +
            GET Viaai(i2,a,a1,i) # -
#
            Tpppp(a,i2,a1,i)  = Vaaii(a1,a,i2,i)
            T1pppp(a,i2,a1,i) = Viaai(i2,a,a1,i)
            Tpppp(a,i2,a1,i) -= T1pppp(a,i2,a1,i)
#
            DO i1
#
               GET Dibja_aaaa(i1,a,i2,a1)
#
               Tii(i,i1)         = Dibja_aaaa(i1,a,i2,a1)*Tpppp(a,i2,a1,i)
               PUT Iij_aa(i,i1) += Tii(i,i1)
#
            ENDDO i1
#
      ENDPARDO i, a, i2, a1
#
#     Third-term of Iab_aa
#     --------------------
#
      PARDO a, a2, i, i1
#
            GET Vaaii(a2,a,i1,i) # +
            GET Viaai(i1,a,a2,i) # -
            Tpppp(a2,a,i1,i)  = Vaaii(a2,a,i1,i)
            T1pppp(a2,a,i1,i) = Viaai(i1,a,a2,i)
            Tpppp(a2,a,i1,i) -= T1pppp(a2,a,i1,i)
#
            DO a1
#
               GET Dibja_aaaa(i,a1,i1,a2)
#
               Taa(a,a1)         = Tpppp(a2,a,i1,i)*Dibja_aaaa(i,a1,i1,a2)
               PUT Iab_aa(a,a1) += Taa(a,a1)
#
            ENDDO a1
#
      ENDPARDO a, a2, i, i1
#
#     Fifth-term of Iai_aa
#     --------------------
#
      PARDO a, a1, i1, a2
#
            GET VSaaai(a1,a2,a,i1) # +
            Tpppp(a1,i1,a2,a)  = VSaaai(a1,a2,a,i1)
#
            DO i
#
               GET Dibja_aaaa(i,a1,i1,a2)
#
               Tai(a,i)         = Dibja_aaaa(i,a1,i1,a2)*Tpppp(a1,i1,a2,a)
               Tai(a,i)        *= -1.0  
               PUT Iai_aa(a,i) += Tai(a,i)
#
            ENDDO i
#
      ENDPARDO a, a1, i1, a2
#
#     Third-term of Iia_aa
#     --------------------
#
      PARDO a, a1, i1, i2
#
            GET Dibja_aaaa(i1,a,i2,a1)
#
            DO i
#
               GET VSpipi(i2,i1,a1,i) # +
#
               Tia(i,a)         = Dibja_aaaa(i1,a,i2,a1)*VSpipi(i2,i1,a1,i)
               PUT Iia_aa(i,a) += Tia(i,a)
#
            ENDDO i
#
      ENDPARDO a, a1, i1, i2
#
# Done one-particle intermediate contributions 
# -------------------------------------------- 
      execute sip_barrier 
      delete Dibja_aaaa 
#
      ENDPROC DIBJAAAAA 
#     ------------------ 
#
# The D(iB,jA) block of the two-particle density matrix is calculated. 
#
      PROC DIBJAABAB 
#     -------------- 
      CREATE Dibja_abab 
      CREATE Vibja_abab 
      execute sip_barrier 
#
      PARDO b1, b, i, i1 
#
            Tibib(i1,b1,i,b) = 0.0 
            TAibib(i,b,i1,b1) = 0.0 
#
            DO j 
#
               GET t1b_old(b1,j) 
#
                  DO a 
#
                  GET T2old_ab(a,i,b1,j) 
                  GET L2old_ab(i1,a,j,b)   
                  GET t1a_old(a,i) 
#
                  T1ibib(i1,b1,i,b)          = L2old_ab(i1,a,j,b)*T2old_ab(a,i,b1,j) 
                  T1ibib(i1,b1,i,b)         *= 0.125   
                  Tibib(i1,b1,i,b)          += T1ibib(i1,b1,i,b)  
#
                  T2ibib(i,b,i1,b1)          = T1ibib(i1,b1,i,b)  
                  TAibib(i,b,i1,b1)         += T2ibib(i,b,i1,b1)  
#
                  T2ibib(i,b,i1,b1)         *= 4.0  
                  PUT Vibja_abab(i,b,i1,b1) += T2ibib(i,b,i1,b1) 
#
                  Taibj(a,i,b1,j)            = t1a_old(a,i)^t1b_old(b1,j)
                  T1ibib(i1,b1,i,b)          = L2old_ab(i1,a,j,b)*Taibj(a,i,b1,j) 
                  T1ibib(i1,b1,i,b)         *= 0.125   
                  Tibib(i1,b1,i,b)          += T1ibib(i1,b1,i,b)  
#
                  T2ibib(i,b,i1,b1)          = T1ibib(i1,b1,i,b)  
                  TAibib(i,b,i1,b1)         += T2ibib(i,b,i1,b1)  
#
               ENDDO a 
#
            ENDDO j 
#
# Multiply by 4 to match aces 
# --------------------------- 
#
            Tibib(i1,b1,i,b)  *= 4.0 
            TAibib(i,b,i1,b1) *= 4.0 
#
            PUT Dibja_abab(i1,b1,i,b) += Tibib(i1,b1,i,b) 
            PUT Dibja_abab(i,b,i1,b1) += TAibib(i,b,i1,b1) 
#
      ENDPARDO b1, b, i, i1 
      execute sip_barrier 
#
# Compute contributions to one-particle intermediates 
# ---------------------------------------------------
#
# Third-term of Iij_aa 
# --------------------
#
      PARDO i1, b, i2, b1
#
            GET Dibja_abab(i1,b,i2,b1)
#
            DO i
#
               GET Vbbii(b1,b,i2,i) 
#
               Tii(i,i1)         = Dibja_abab(i1,b,i2,b1)*Vbbii(b1,b,i2,i)
               PUT Iij_aa(i,i1) += Tii(i,i1)
#
            ENDDO i
#
      ENDPARDO i1, b, i2, b1
#
# Third-term of Iab_bb 
# --------------------
#
      PARDO b1, b2, i, i1
#
            GET Vbbii(b2,b1,i1,i)
#
            DO b
#
               GET Dibja_abab(i,b,i1,b2)
#
               Tbb(b1,b)         = Vbbii(b2,b1,i1,i)*Dibja_abab(i,b,i1,b2)
               PUT Iab_bb(b1,b) += Tbb(b1,b)
#
            ENDDO b
#
      ENDPARDO b1, b2, i, i1
#
# Fifth-term of Iai_aa 
# -------------------- 
#
      PARDO a, b, i1, b1
#
            GET Vbbai(b,b1,a,i1)
            Tqpqp(b,i1,b1,a)  = Vbbai(b,b1,a,i1)
#
            DO i
#
               GET Dibja_abab(i,b,i1,b1)
#
               Tai(a,i)         = Dibja_abab(i,b,i1,b1)*Tqpqp(b,i1,b1,a)
               Tai(a,i)        *= -1.0  
               PUT Iai_aa(a,i) += Tai(a,i)
#
            ENDDO i
#
      ENDPARDO a, b, i1, b1 
#
# Third-term of Iia_bb 
# -------------------- 
#
      PARDO b, b1, i, i1
#
            GET Dibja_abab(i,b,i1,b1)
#
            DO j
#
               GET Vpiqj(i1,i,b1,j) # +
#
               Tjb(j,b)         = Dibja_abab(i,b,i1,b1)*Vpiqj(i1,i,b1,j)
               PUT Iia_bb(j,b) += Tjb(j,b)
#
            ENDDO j
#
      ENDPARDO b, b1, i, i1
#
# Done contribution to intermediates 
# ---------------------------------- 
      execute sip_barrier 
      delete Dibja_abab 
#
      ENDPROC DIBJAABAB 
#     ------------------ 
#
# The D(Ib,Ja) block of the two-particle density matrix is calculated. 
#
      PROC DIBJABABA 
#     --------------  
      CREATE Dibja_baba 
      CREATE Vibja_baba 
      execute sip_barrier 
#
      PARDO a, a1, j1, j 
#
            Tjaja(j,a,j1,a1)  = 0.0 
            TAjaja(j1,a1,j,a) = 0.0 
#
            DO i 
#
               GET t1a_old(a,i) 
#
               DO b 
#
                  GET T2old_ab(a,i,b,j1) 
                  GET L2old_ab(i,a1,j,b)   
                  GET t1b_old(b,j1) 
#
#                 T1jaja(j,a,j1,a1)          = L2old_ab(i,a1,j,b)*T2old_ab(a,i,b,j1) 
                  Tjaib(j,a1,i,b)            = L2old_ab(i,a1,j,b) 
                  Tibaj(i,b,a,j1)            = T2old_ab(a,i,b,j1) 
                  Tjaaj(j,a1,a,j1)           = Tjaib(j,a1,i,b)*Tibaj(i,b,a,j1) 
                  T1jaja(j,a,j1,a1)          = Tjaaj(j,a1,a,j1) 
#
                  T1jaja(j,a,j1,a1)         *= 0.125   
                  Tjaja(j,a,j1,a1)          += T1jaja(j,a,j1,a1)  
#
                  T2jaja(j1,a1,j,a)          = T1jaja(j,a,j1,a1)  
                  TAjaja(j1,a1,j,a)         += T2jaja(j1,a1,j,a)  
#
                  T2jaja(j1,a1,j,a)         *= 4.0  
                  PUT Vibja_baba(j1,a1,j,a) += T2jaja(j1,a1,j,a) 
#
                  Tbjai(b,j1,a,i)            = t1b_old(b,j1)^t1a_old(a,i)
                  T1jaja(j,a,j1,a1)          = L2old_ab(i,a1,j,b)*Tbjai(b,j1,a,i) 
                  T1jaja(j,a,j1,a1)         *= 0.125   
                  Tjaja(j,a,j1,a1)          += T1jaja(j,a,j1,a1)  
#
                  T2jaja(j1,a1,j,a)          = T1jaja(j,a,j1,a1)  
                  TAjaja(j1,a1,j,a)         += T2jaja(j1,a1,j,a)  
#
               ENDDO b 
#
            ENDDO i 
#
# Multiply by 4 to match aces 
# --------------------------- 
#
            Tjaja(j,a,j1,a1)  *= 4.0 
            TAjaja(j1,a1,j,a) *= 4.0 
#
            PUT Dibja_baba(j,a,j1,a1) += Tjaja(j,a,j1,a1) 
            PUT Dibja_baba(j1,a1,j,a) += TAjaja(j1,a1,j,a)  
#
      ENDPARDO a, a1, j1, j 
      execute sip_barrier 
#
# Compute contributions to one-particle intermediates 
# ---------------------------------------------------
#
# Third-term of Iij_bb 
# --------------------
#
      PARDO j1, a1, j2, a
#
            GET Vaajj(a,a1,j2,j1) # +
#
            DO j
#
               GET Dibja_baba(j,a1,j2,a)
#
               Tjj(j1,j)         = Dibja_baba(j,a1,j2,a)*Vaajj(a,a1,j2,j1)
               PUT Iij_bb(j1,j) += Tjj(j1,j)
#
            ENDDO j
#
      ENDPARDO j1, a1, j2, a
#
# Third-term of Iab_aa 
# -------------------- 
#
      PARDO a, a2, j, j1
#
            GET Vaajj(a2,a,j1,j) # +
#
            DO a1
#
               GET Dibja_baba(j,a1,j1,a2)
#
               Taa(a,a1)         = Vaajj(a2,a,j1,j)*Dibja_baba(j,a1,j1,a2)
               PUT Iab_aa(a,a1) += Taa(a,a1)
#
            ENDDO a1
#
      ENDPARDO a, a2, j, j1
#
# Fifth-term of Iai_bb 
# --------------------
#
      PARDO b, a, j1, a1
#
            GET Vaabj(a,a1,b,j1) # +
            Tpqpq(a,j1,a1,b)  = Vaabj(a,a1,b,j1)
#
            DO j
#
               GET Dibja_baba(j,a,j1,a1)
#
               Tbj(b,j)         = Dibja_baba(j,a,j1,a1)*Tpqpq(a,j1,a1,b)
               Tbj(b,j)        *= -1.0  
               PUT Iai_bb(b,j) += Tbj(b,j)
#
            ENDDO j
#
      ENDPARDO b, a, j1, a1
#
# Third-term of Iia_aa 
# -------------------- 
#
      PARDO a, a1, j, j1
#
            GET Dibja_baba(j,a,j1,a1)
#
            DO i
#
               GET Vpiqj(a1,i,j1,j)
#
               Tia(i,a)         = Dibja_baba(j,a,j1,a1)*Vpiqj(a1,i,j1,j)
               PUT Iia_aa(i,a) += Tia(i,a)
#
            ENDDO i
#
      ENDPARDO a, a1, j, j1
#
# Done one-particle intermediates 
# -------------------------------
#
      execute sip_barrier 
      DELETE Dibja_baba 
#
      ENDPROC DIBJABABA 
#     ------------------ 
#
      PROC DIBJABBBB 
#     --------------- 
      CREATE Dibja_bbbb 
      CREATE Vibja_bbbb 
      execute sip_barrier 
#
      PARDO b, b1, j, j1
#
            Tjbjb(j,b1,j1,b)  = 0.0
            TAjbjb(j1,b,j,b1) = 0.0
#
            GET t1b_old(b,j)
            GET l1b_old(j1,b1)
#
            T1jbjb(j,b1,j1,b)  = t1b_old(b,j)^l1b_old(j1,b1)
            T1jbjb(j,b1,j1,b) *= 0.125
            Tjbjb(j,b1,j1,b)  += T1jbjb(j,b1,j1,b)
#
            T2jbjb(j1,b,j,b1)  = T1jbjb(j,b1,j1,b)
            TAjbjb(j1,b,j,b1) += T2jbjb(j1,b,j,b1)
#
            DO j2
#
               GET t1b_old(b,j2)
               tbj(b,j2) = t1b_old(b,j2)
#
               DO b2
#
                  GET T2old_bb(b,j,b2,j2)
                  GET L2old_bb(j1,b1,j2,b2)
                  GET t1b_old(b2,j)
#
#                 T1jbjb(j,b1,j1,b)          = L2old_bb(j1,b1,j2,b2)*T2old_bb(b,j,b2,j2)
                  T1jbjb(j2,b2,j,b)          = T2old_bb(b,j,b2,j2) 
                  T2jbjb(j1,b1,j,b)          = L2old_bb(j1,b1,j2,b2)*T1jbjb(j2,b2,j,b)
                  T1jbjb(j,b1,j1,b)          = T2jbjb(j1,b1,j,b) 
#
                  T1jbjb(j,b1,j1,b)         *= 0.5
                  PUT Vibja_bbbb(j,b1,j1,b) += T1jbjb(j,b1,j1,b)
#
                  T1jbjb(j,b1,j1,b)         *= 0.25
                  Tjbjb(j,b1,j1,b)          += T1jbjb(j,b1,j1,b)
#
                  T2jbjb(j1,b,j,b1)          = T1jbjb(j,b1,j1,b)
                  TAjbjb(j1,b,j,b1)         += T2jbjb(j1,b,j,b1)
#
                  T2jbjb(j2,b2,j,b)           = t1b_old(b2,j)^tbj(b,j2)
#                 T1jbjb(j,b1,j1,b)          = L2old_bb(j1,b1,j2,b2)*Tbjbj(b2,j,b,j2)
                  T3jbjb(j1,b1,j,b)          = L2old_bb(j1,b1,j2,b2)*T2jbjb(j2,b2,j,b)
                  T1jbjb(j,b1,j1,b)          = T3jbjb(j1,b1,j,b) 
#
                  T1jbjb(j,b1,j1,b)         *= -0.125
                  Tjbjb(j,b1,j1,b)          += T1jbjb(j,b1,j1,b)
#
                  T2jbjb(j1,b,j,b1)          = T1jbjb(j,b1,j1,b)
                  TAjbjb(j1,b,j,b1)         += T2jbjb(j1,b,j,b1)
#
               ENDDO b2
#
            ENDDO j2
#
            DO i
            DO a
#
               GET T2old_ab(a,i,b,j)
               GET L2old_ab(i,a,j1,b1)
#
               Tjbia(j,b,i,a)             = T2old_ab(a,i,b,j)  
               T2jbjb(j,b,j1,b1)          = Tjbia(j,b,i,a)*L2old_ab(i,a,j1,b1)  
               T1jbjb(j,b1,j1,b)          = T2jbjb(j,b,j1,b1) 
               T1jbjb(j,b1,j1,b)         *= 0.5 
               PUT Vibja_bbbb(j,b1,j1,b) += T1jbjb(j,b1,j1,b)
#
               T1jbjb(j,b1,j1,b)         *= 0.25
               Tjbjb(j,b1,j1,b)          += T1jbjb(j,b1,j1,b)
#
               T2jbjb(j1,b,j,b1)          = T1jbjb(j,b1,j1,b)
               TAjbjb(j1,b,j,b1)         += T2jbjb(j1,b,j,b1)
#
            ENDDO a
            ENDDO i
#
# Multiply by 4 to match aces 
# --------------------------- 
#
            Tjbjb(j,b1,j1,b)  *= 4.0 
            TAjbjb(j1,b,j,b1) *= 4.0 
#
            PUT Dibja_bbbb(j,b1,j1,b) += Tjbjb(j,b1,j1,b)
            PUT Dibja_bbbb(j1,b,j,b1) += TAjbjb(j1,b,j,b1)
#
      ENDPARDO b, b1, j, j1
      execute sip_barrier 
#
# Calculate contribution to one-particle intermediates 
# ---------------------------------------------------- 
#
#     Third-term of Iij_bb 
#     --------------------
#
      PARDO j1, b1, j2, b
#
            GET Vbbjj(b,b1,j2,j1) # +
            GET Vjbbj(j2,b1,b,j1) # -
#
            Tqqqq(b1,j2,b,j1)  = Vbbjj(b,b1,j2,j1)
            T1qqqq(b1,j2,b,j1) = Vjbbj(j2,b1,b,j1)
            Tqqqq(b1,j2,b,j1) -= T1qqqq(b1,j2,b,j1)
#
            DO j
#
               GET Dibja_bbbb(j,b1,j2,b)
#
               Tjj(j1,j)         = Dibja_bbbb(j,b1,j2,b)*Tqqqq(b1,j2,b,j1)
               PUT Iij_bb(j1,j) += Tjj(j1,j)
#
            ENDDO j
#
      ENDPARDO j1, b1, j2, b 
#
#     Third-term of Iab_bb 
#     --------------------
#
      PARDO b1, b2, j, j1
#
            GET Vbbjj(b2,b1,j1,j) # +
            GET Vjbbj(j1,b1,b2,j) # -
            Tqqqq(b2,b1,j1,j)  = Vbbjj(b2,b1,j1,j)
            T1qqqq(b2,b1,j1,j) = Vjbbj(j1,b1,b2,j)
            Tqqqq(b2,b1,j1,j) -= T1qqqq(b2,b1,j1,j)
#
            DO b
#
               GET Dibja_bbbb(j,b,j1,b2)
#
               Tbb(b1,b)         = Tqqqq(b2,b1,j1,j)*Dibja_bbbb(j,b,j1,b2)
               PUT Iab_bb(b1,b) += Tbb(b1,b)
#
            ENDDO b
#
      ENDPARDO b1, b2, j, j1
#
#     Fifth-term of Iai_bb 
#     --------------------
#
      PARDO b, b1, j1, b2
#
            GET VSbbbj(b1,b2,b,j1) # +
            Tqqqq(b1,j1,b2,b)  = VSbbbj(b1,b2,b,j1)
#
            DO j
#
               GET Dibja_bbbb(j,b1,j1,b2)
#
               Tbj(b,j)         = Dibja_bbbb(j,b1,j1,b2)*Tqqqq(b1,j1,b2,b)
               Tbj(b,j)        *= -1.0  
               PUT Iai_bb(b,j) += Tbj(b,j)
#
            ENDDO j
#
      ENDPARDO b, b1, j1, b2
#
#     Third-term of Iia_bb 
#     -------------------- 
#
      PARDO b, b1, j1, j2

            GET Dibja_bbbb(j1,b,j2,b1)
#
            DO j
#
               GET VSqjqj(j2,j1,b1,j) # +
#
               Tjb(j,b)           = Dibja_bbbb(j1,b,j2,b1)*VSqjqj(j2,j1,b1,j)
               PUT Iia_bb(j,b)   += Tjb(j,b)
#
            ENDDO j
#
      ENDPARDO b, b1, j1, j2
#
# Done one-particle contributions 
# ------------------------------- 
      execute sip_barrier
      delete Dibja_bbbb 
#
      ENDPROC DIBJABBBB 
#     ------------------ 
#
      PROC DIBJAABBA 
#     --------------- 
      CREATE Dibja_abba 
      CREATE Vibja_abba 
      execute sip_barrier 
#
      PARDO i, a, b, j 
#
            Tiajb(i,a,j,b) = 0.0  
#
            GET l1b_old(j,b) 
            GET t1a_old(a,i) 
            GET l1a_old(i,a) 
            GET t1b_old(b,j) 
#
            T1iajb(i,a,j,b)  = t1a_old(a,i)^l1b_old(j,b) 
            T1iajb(i,a,j,b) *= 0.125  
            Tiajb(i,a,j,b)  += T1iajb(i,a,j,b) 
#
            T1iajb(i,a,j,b)  = l1a_old(i,a)^t1b_old(b,j) 
            T1iajb(i,a,j,b) *= 0.125  
            Tiajb(i,a,j,b)  += T1iajb(i,a,j,b) 
#
            DO i1 
#
               GET t1a_old(a,i1) 
               tai(a,i1) = t1a_old(a,i1) 
#
               DO a1 
#
                  GET T2old_aa(a,i,a1,i1) 
                  GET L2old_ab(i1,a1,j,b) 
                  GET T2old_ab(a1,i1,b,j) 
                  GET L2old_aa(i1,a1,i,a) 
                  GET t1a_old(a1,i) 
#
                  T1iajb(i,a,j,b)          = T2old_aa(a,i,a1,i1)*L2old_ab(i1,a1,j,b)  
                  T1iajb(i,a,j,b)         *= 0.125  
                  Tiajb(i,a,j,b)          += T1iajb(i,a,j,b) 
#
                  Tibja(i,b,j,a)           = T1iajb(i,a,j,b) 
                  Tibja(i,b,j,a)          *= 4.0 
                  PUT Vibja_abba(i,b,j,a) += Tibja(i,b,j,a)  
#
#                 T1iajb(i,a,j,b)          = T2old_ab(a1,i1,b,j)*L2old_aa(i1,a1,i,a)  
                  Tiaai(i,a,a1,i1)         = L2old_aa(i1,a1,i,a) 
                  Tiabj(i,a,b,j)           = Tiaai(i,a,a1,i1)*T2old_ab(a1,i1,b,j)    
                  T1iajb(i,a,j,b)          = Tiabj(i,a,b,j) 
#
                  T1iajb(i,a,j,b)         *= 0.125  
                  Tiajb(i,a,j,b)          += T1iajb(i,a,j,b) 
#
                  Tiaia(i,a,i1,a1)         = t1a_old(a1,i)^tai(a,i1) 
                  T1iajb(i,a,j,b)          = Tiaia(i,a,i1,a1)*L2old_ab(i1,a1,j,b) 
                  T1iajb(i,a,j,b)         *= -0.125  
                  Tiajb(i,a,j,b)          += T1iajb(i,a,j,b) 
#
               ENDDO a1 
#
            ENDDO i1 
#
            DO j1 
#
               GET t1b_old(b,j1) 
               tbj(b,j1) = t1b_old(b,j1) 
#
               DO b1 
#
                  GET T2old_ab(a,i,b1,j1) 
                  GET L2old_bb(j1,b1,j,b) 
                  GET T2old_bb(b,j,b1,j1) 
                  GET L2old_ab(i,a,j1,b1) 
                  GET t1b_old(b1,j) 
#
                  T1iajb(i,a,j,b)          = T2old_ab(a,i,b1,j1)*L2old_bb(j1,b1,j,b)  
                  T1iajb(i,a,j,b)         *= 0.125  
                  Tiajb(i,a,j,b)          += T1iajb(i,a,j,b) 
#
                  Tibja(i,b,j,a)           = T1iajb(i,a,j,b) 
                  Tibja(i,b,j,a)          *= 4.0 
                  PUT Vibja_abba(i,b,j,a) += Tibja(i,b,j,a)  
#
#                 T1iajb(i,a,j,b)          = T2old_bb(b,j,b1,j1)*L2old_ab(i,a,j1,b1)  
                  Tjbjb(j1,b1,j,b)         = T2old_bb(b,j,b1,j1) 
                  T1iajb(i,a,j,b)          = L2old_ab(i,a,j1,b1)*Tjbjb(j1,b1,j,b)   
#
                  T1iajb(i,a,j,b)         *= 0.125  
                  Tiajb(i,a,j,b)          += T1iajb(i,a,j,b) 
#
                  Tjbjb(j,b,j1,b1)         = t1b_old(b1,j)^tbj(b,j1) 
                  T1iajb(i,a,j,b)          = Tjbjb(j,b,j1,b1)*L2old_ab(i,a,j1,b1) 
                  T1iajb(i,a,j,b)         *= -0.125  
                  Tiajb(i,a,j,b)          += T1iajb(i,a,j,b) 
#
               ENDDO b1 
#
            ENDDO j1  
#
# Multiply by 4(VFL) to match aces 
# -------------------------------- 
#
            Tiajb(i,a,j,b)          *= 4.0 
            Tibja(i,b,j,a)           = Tiajb(i,a,j,b) 
#
            PUT Dibja_abba(i,b,j,a) += Tibja(i,b,j,a)  
#
      ENDPARDO i, a, b, j 
      execute sip_barrier 
#
# Compute contributions to one-particle intermediates 
# --------------------------------------------------- 
#
# Third-term of Iij_aa 
# -------------------- 
#
      PARDO i1, b, j, a
#
            GET Dibja_abba(i1,b,j,a)
#
            DO i
#
               GET Viabj(i,a,b,j)
#
               Tii(i,i1)         = Dibja_abba(i1,b,j,a)*Viabj(i,a,b,j)
               Tii(i,i1)        *= -1.0  
               PUT Iij_aa(i,i1) += Tii(i,i1)
#
            ENDDO i
#
      ENDPARDO i1, b, j, a
#
# Third-term of Iab_bb 
# -------------------- 
#
      PARDO b1, a, i, j
#
            GET Viabj(i,a,b1,j) # -
#
            DO b
#
               GET Dibja_abba(i,b,j,a)
#
               Tbb(b1,b)         = Viabj(i,a,b1,j)*Dibja_abba(i,b,j,a)
               Tbb(b1,b)        *= -1.0  
               PUT Iab_bb(b1,b) += Tbb(b1,b)
#
            ENDDO b
#
      ENDPARDO b1, a, i, j
#
# Fifth-term of Iai_aa
# -------------------- 
#
      PARDO a, b, j, a1
#
            GET Vaabj(a,a1,b,j) # -
            Tqqpp(b,j,a1,a) = Vaabj(a,a1,b,j)
#
            DO i
#
               GET Dibja_abba(i,b,j,a1)
#
               Tai(a,i)         = Dibja_abba(i,b,j,a1)*Tqqpp(b,j,a1,a)
               PUT Iai_aa(a,i) += Tai(a,i)
#
            ENDDO i
#
      ENDPARDO a, b, j, a1
#
# Third-term of Iia_bb 
# -------------------- 
#
      PARDO b, a, i, j1
#
            GET Dibja_abba(i,b,j1,a)
#
            DO j
#
               GET Vpiqj(a,i,j1,j) # -
#
               Tjb(j,b)         = Dibja_abba(i,b,j1,a)*Vpiqj(a,i,j1,j)
               Tjb(j,b)        *= -1.0  
               PUT Iia_bb(j,b) += Tjb(j,b)
#
            ENDDO j
#
      ENDPARDO b, a, i, j1
#
# Done one-particle intermediates 
# -------------------------------
      execute sip_barrier 
      delete Dibja_abba 
#
      ENDPROC DIBJAABBA 
#     ------------------ 
# 
      PROC DIBJABAAB 
#     --------------- 
      CREATE Dibja_baab  
      CREATE Vibja_baab  
      execute sip_barrier 
#
      PARDO j, b, a, i 
#
            Tjbia(j,b,i,a) = 0.0  
#
            GET t1a_old(a,i) 
            GET l1b_old(j,b) 
            GET t1b_old(b,j) 
            GET l1a_old(i,a) 
#
            T1jbia(j,b,i,a)  = l1b_old(j,b)^t1a_old(a,i) 
            T1jbia(j,b,i,a) *= 0.125  
            Tjbia(j,b,i,a)  += T1jbia(j,b,i,a) 
#
            T1jbia(j,b,i,a)  = l1a_old(i,a)^t1b_old(b,j) 
            T1jbia(j,b,i,a) *= 0.125  
            Tjbia(j,b,i,a)  += T1jbia(j,b,i,a) 
#
            DO i1 
#
               GET t1a_old(a,i1) 
               tai(a,i1) = t1a_old(a,i1) 
#
               DO a1 
#
                  GET T2old_ab(a1,i1,b,j) 
                  GET L2old_aa(i1,a1,i,a) 
                  GET T2old_aa(a,i,a1,i1) 
                  GET L2old_ab(i1,a1,j,b) 
                  GET t1a_old(a1,i) 
#
                  T1jbia(j,b,i,a)          = T2old_ab(a1,i1,b,j)*L2old_aa(i1,a1,i,a)  
                  T1jbia(j,b,i,a)         *= 0.125  
                  Tjbia(j,b,i,a)          += T1jbia(j,b,i,a) 
#
                  Tjaib(j,a,i,b)           = T1jbia(j,b,i,a)  
                  Tjaib(j,a,i,b)          *= 4.0  
                  PUT Vibja_baab(j,a,i,b) += Tjaib(j,a,i,b) 
#
#                 T1jbia(j,b,i,a)          = T2old_aa(a,i,a1,i1)*L2old_ab(i1,a1,j,b)  
                  Taiia(a,i,i1,a1)         = T2old_aa(a,i,a1,i1)

                  Taijb(a,i,j,b)           = Taiia(a,i,i1,a1)*L2old_ab(i1,a1,j,b)  
                  T1jbia(j,b,i,a)          =  Taijb(a,i,j,b) 
                  T1jbia(j,b,i,a)         *= 0.125  
                  Tjbia(j,b,i,a)          += T1jbia(j,b,i,a) 
#
                  Tiaia(i,a,i1,a1)         = t1a_old(a1,i)^tai(a,i1) 
                  T1jbia(j,b,i,a)          = Tiaia(i,a,i1,a1)*L2old_ab(i1,a1,j,b) 
                  T1jbia(j,b,i,a)         *= -0.125  
                  Tjbia(j,b,i,a)          += T1jbia(j,b,i,a) 
#
               ENDDO a1 
#
            ENDDO i1 
#
            DO j1 
#
               GET t1b_old(b,j1) 
               tbj(b,j1) = t1b_old(b,j1) 
#
               DO b1 
#
                  GET T2old_bb(b,j,b1,j1) 
                  GET L2old_ab(i,a,j1,b1) 
                  GET T2old_ab(a,i,b1,j1) 
                  GET L2old_bb(j,b,j1,b1) 
                  GET t1b_old(b1,j) 
#
                  T1jbia(j,b,i,a)          = T2old_bb(b,j,b1,j1)*L2old_ab(i,a,j1,b1)  
                  T1jbia(j,b,i,a)         *= 0.125  
                  Tjbia(j,b,i,a)          += T1jbia(j,b,i,a) 
#
                  Tjaib(j,a,i,b)           = T1jbia(j,b,i,a)  
                  Tjaib(j,a,i,b)          *= 4.0  
                  PUT Vibja_baab(j,a,i,b) += Tjaib(j,a,i,b) 
#
#                 T1jbia(j,b,i,a)          = T2old_ab(a,i,b1,j1)*L2old_bb(j,b,j1,b1)  
                  Tbjbj(b1,j1,b,j)         = L2old_bb(j,b,j1,b1) 
                  Taibj(a,i,b,j)           = T2old_ab(a,i,b1,j1)*Tbjbj(b1,j1,b,j)  
                  T1jbia(j,b,i,a)          = Taibj(a,i,b,j) 
#
                  T1jbia(j,b,i,a)         *= 0.125  
                  Tjbia(j,b,i,a)          += T1jbia(j,b,i,a) 
#
                  Tjbjb(j,b,j1,b1)         = t1b_old(b1,j)^tbj(b,j1) 
                  T1jbia(j,b,i,a)          = Tjbjb(j,b,j1,b1)*L2old_ab(i,a,j1,b1) 
                  T1jbia(j,b,i,a)         *= -0.125  
                  Tjbia(j,b,i,a)          += T1jbia(j,b,i,a) 
#
               ENDDO b1 
#
            ENDDO j1 
#
# Multiply by 4(VFL) to match aces 
# -------------------------------- 
#
            Tjbia(j,b,i,a)          *= 4.0 
            Tjaib(j,a,i,b)           = Tjbia(j,b,i,a) 
            PUT Dibja_baab(j,a,i,b) += Tjaib(j,a,i,b) 
#
      ENDPARDO j, b, a, i 
      execute sip_barrier  
#
# Compute contributions to one-particle intermediates 
# --------------------------------------------------- 
#
# Third-term of Iij_bb 
# -------------------- 
#
      PARDO j1, a, i, b
#
            GET Viabj(i,a,b,j1)
#
            DO j
#
               GET Dibja_baab(j,a,i,b)
#
               Tjj(j1,j)         = Dibja_baab(j,a,i,b)*Viabj(i,a,b,j1)
               Tjj(j1,j)        *= -1.0  
               PUT Iij_bb(j1,j) += Tjj(j1,j)
#
            ENDDO j
#
      ENDPARDO j1, a, i, b
#
# Third-term of Iab_aa 
# --------------------
#
      PARDO a, b, j, i
#
            GET Viabj(i,a,b,j) # -
#
            DO a1
#
               GET Dibja_baab(j,a1,i,b)
#
               Taa(a,a1)         = Viabj(i,a,b,j)*Dibja_baab(j,a1,i,b)
               Taa(a,a1)        *= -1.0  
               PUT Iab_aa(a,a1) += Taa(a,a1)
#
            ENDDO a1
#
      ENDPARDO a, b, j, i
#
# Fifth-term of Iai_bb 
# --------------------
#
      PARDO b, a, b1, i
#
            GET Vbbai(b,b1,a,i)
#
            DO j
#
               GET Dibja_baab(j,a,i,b1)
#
               Tbj(b,j)         = Dibja_baab(j,a,i,b1)*Vbbai(b,b1,a,i)
               PUT Iai_bb(b,j) += Tbj(b,j)
#
            ENDDO j
#
      ENDPARDO b, a, b1, i
#
# Third-term of Iia_aa
# --------------------
#
      PARDO a, b, j, i1
#
            GET Dibja_baab(j,a,i1,b)
#
            DO i
               GET Vpiqj(i1,i,b,j)
#
               Tia(i,a)         = Dibja_baab(j,a,i1,b)*Vpiqj(i1,i,b,j)
               Tia(i,a)        *= -1.0  
               PUT Iia_aa(i,a) += Tia(i,a)
#
            ENDDO i
#
      ENDPARDO a, b, j, i1
#
# Done one-particle intermediate contributions 
# -------------------------------------------- 
      execute sip_barrier 
      delete Dibja_baab 
#
      ENDPROC DIBJABAAB
#     ------------------ 
#
# ----------------------------------------------------------------------------
#
      PROC DIBJA  
#
# Create gamma arrays and V intermediates 
# --------------------------------------- 
#
           CALL DIBJAAAAA
           CALL DIBJAABAB
           CALL DIBJABABA
           CALL DIBJABBBB
           CALL DIBJABAAB 
           CALL DIBJAABBA 
#
      ENDPROC DIBJA 
#
# ----------------------------------------------------------------------------
#
      PROC I2XX 
#     --------- 
# 
# ------------------------------------------------------------------------- 
#
# Form the two-particle intermediate I3aa, I3bb, I3ab, and I3ba  needed in 
# place of V^{ab}_{cd}. 
#
# ------------------------------------------------------------------------- 
#
# Form the intermediate I3aa 
# -------------------------- 
#
      PARDO a, a1 
#
            DO i2 
            DO i1 
            DO i 
#
               GET L2old_aa(i2,a,i1,a1) 
               GET t1a_old(a1,i) 
#
               Tiaii(i2,a,i1,i) = L2old_aa(i2,a,i1,a1)*t1a_old(a1,i) 
               PUT I3aa(i2,a,i1,i) += Tiaii(i2,a,i1,i) 
#
            ENDDO i 
            ENDDO i1 
            ENDDO i2 
#
      ENDPARDO a, a1 
#
# Form the intermediate I3bb 
# -------------------------- 
#
      PARDO b, b1 
#
            DO j2 
            DO j1 
            DO j 
#
               GET L2old_bb(j2,b,j1,b1) 
               GET t1b_old(b1,j) 
#
               Tjbjj(j2,b,j1,j) = L2old_bb(j2,b,j1,b1)*t1b_old(b1,j) 
               PUT I3bb(j2,b,j1,j) += Tjbjj(j2,b,j1,j) 
#
            ENDDO j 
            ENDDO j1 
            ENDDO j2 
#
      ENDPARDO b, b1 

#
# Form the intermediate I3ab 
# -------------------------- 
#
      PARDO a, b1 
#
            DO i2 
            DO j1 
            DO j 
#
               GET L2old_ab(i2,a,j1,b1) 
               GET t1b_old(b1,j) 
#
               Tiajj(i2,a,j1,j) = L2old_ab(i2,a,j1,b1)*t1b_old(b1,j) 
               PUT I3ab(i2,a,j1,j) += Tiajj(i2,a,j1,j) 
#
            ENDDO j 
            ENDDO j1 
            ENDDO i2 
#
      ENDPARDO a, b1 

#
# Form the intermediate I3ba 
# -------------------------- 
#
      PARDO b, a1 
#
            DO j 
            DO i1 
            DO i 
#
               GET L2old_ab(i1,a1,j,b) 
               GET t1a_old(a1,i) 
#
               Tjbii(j,b,i1,i) = L2old_ab(i1,a1,j,b)*t1a_old(a1,i) 
               PUT I3ba(j,b,i1,i) += Tjbii(j,b,i1,i) 
#
            ENDDO i 
            ENDDO i1 
            ENDDO j 
#
      ENDPARDO b, a1 
#
      ENDPROC I2XX 
#     ------------ 
# 
# ------------------------------------------------------------------------- 
#
# Start the calculation of the D^{ab}_{ci} type contributions to the
# density. Equivalent to Gamma5   
#
# ------------------------------------------------------------------------- 
#
      PROC DABCIAAAA 
#     ---------------
#
      CREATE Dabci_aaaa 
      execute sip_barrier 
# 
      PARDO a, a1, a2, i 
#
            Taaai(a,a1,a2,i) = 0.0  
#
            GET Gae_a(a2,a) 
            GET t1a_old(a1,i) 
            T1aaai(a,a1,a2,i)  = Gae_a(a2,a)^t1a_old(a1,i) 
            T1aaai(a,a1,a2,i) *= -0.125 
            Taaai(a,a1,a2,i)  += T1aaai(a,a1,a2,i)  
#
            GET Gae_a(a2,a1) 
            GET t1a_old(a,i) 
            T1aaai(a,a1,a2,i)  = Gae_a(a2,a1)^t1a_old(a,i) 
            T1aaai(a,a1,a2,i) *= 0.125 
            Taaai(a,a1,a2,i)  += T1aaai(a,a1,a2,i)  
#
            DO i1 
#
               GET Tau_aa(a,i1,a1,i) 
               GET l1a_old(i1,a2) 
               GET L2old_aa(i1,a,i,a1) 
               GET t1a_old(a2,i1) 
               GET Vibja_aaaa(i,a2,i1,a) 
               GET t1a_old(a1,i1) 
               GET Vibja_aaaa(i,a2,i1,a1) 
               GET t1a_old(a,i1) 
#
               T1aaai(a,a1,a2,i)  = Tau_aa(a,i1,a1,i)*l1a_old(i1,a2) 
               T1aaai(a,a1,a2,i) *= 0.125 
               Taaai(a,a1,a2,i)  += T1aaai(a,a1,a2,i)  
#
               T1aaai(a,a1,a2,i)  = L2old_aa(i1,a,i,a1)*t1a_old(a2,i1) 
               T1aaai(a,a1,a2,i) *= 0.125 
               Taaai(a,a1,a2,i)  += T1aaai(a,a1,a2,i)  
#
               T1aaai(a,a1,a2,i)  = Vibja_aaaa(i,a2,i1,a)*t1a_old(a1,i1)  
               T1aaai(a,a1,a2,i) *= -0.25 
               Taaai(a,a1,a2,i)  += T1aaai(a,a1,a2,i)  
#
               T1aaai(a,a1,a2,i)  = Vibja_aaaa(i,a2,i1,a1)*t1a_old(a,i1)  
               T1aaai(a,a1,a2,i) *= 0.25 
               Taaai(a,a1,a2,i)  += T1aaai(a,a1,a2,i)  
#
               DO i2 
#
                  GET I3aa(i1,a2,i2,i) 
                  GET Tau_aa(a,i1,a1,i2) 
#
#                 T1aaai(a,a1,a2,i)  = Tau_aa(a,i1,a1,i2)*I3aa(i1,a2,i2,i) 
#
                  Taaii(a,a1,i1,i2)  = Tau_aa(a,i1,a1,i2) 
                  Tiiai(i1,i2,a2,i)  = I3aa(i1,a2,i2,i) 
                  T1aaai(a,a1,a2,i)  = Taaii(a,a1,i1,i2)*Tiiai(i1,i2,a2,i) 
                  T1aaai(a,a1,a2,i) *= -0.0625 
                  Taaai(a,a1,a2,i)  += T1aaai(a,a1,a2,i)  
#
               ENDDO i2 
#
            ENDDO i1 
#
# Multiply by 4 to match aces 
# --------------------------- 
#
            Taaai(a,a1,a2,i)          *= 4.0 
            PUT Dabci_aaaa(a,a1,a2,i) += Taaai(a,a1,a2,i) 
#
# Compute indirect contributions to one-particle intermediates 
# ------------------------------------------------------------ 
#
#           Fourth-term of Iij_aa 
#           ---------------------
#
            DO  i1 
#
               GET VSaaai(a,a2,a1,i1) # +
#
               Tpppp(i1,a,a1,a2)  = VSaaai(a,a2,a1,i1)
               Tii(i1,i)          = Tpppp(i1,a,a1,a2)*Taaai(a,a1,a2,i)
               Tii(i1,i)         *= -0.5 
               PUT Iij_aa(i1,i)  += Tii(i1,i)
#
            ENDDO i1  
#
#           Fourth-term of Iia_aa 
#           ---------------------
#
            DO i1  
#
               GET VSpipi(a,i1,a1,i) # +
#
               Tia(i1,a2)         = Taaai(a,a1,a2,i)*VSpipi(a,i1,a1,i)
               Tia(i1,a2)        *= -0.5
               PUT Iia_aa(i1,a2) += Tia(i1,a2)
#
            ENDDO i1  
#
#           Fifth-term of Iia_aa 
#           --------------------
#
            DO i1  
#
               GET Vaaii(a2,a,i,i1) # +
               GET Viaai(i,a,a2,i1) # -
#
               Tpppp(i,a,a2,i1)   = Vaaii(a2,a,i,i1)
               Tpppp(i,a,a2,i1)  -= Viaai(i,a,a2,i1)
               Tia(i1,a1)         = Taaai(a,a1,a2,i)*Tpppp(i,a,a2,i1)
               Tia(i1,a1)        *= -1.0  
               PUT Iia_aa(i1,a1) += Tia(i1,a1)
#
            ENDDO i1  
#
#           Fourth-term of Iab_aa 
#           ---------------------
#
            DO a3
#
               GET VSaaai(a,a3,a1,i) # +
#
               Taa(a3,a2)         = VSaaai(a,a3,a1,i)*Taaai(a,a1,a2,i)
               Taa(a3,a2)        *= -0.5
               PUT Iab_aa(a3,a2) += Taa(a3,a2)
#
            ENDDO a3
#
#           Fifth-term of Iab_aa 
#           --------------------
#
            DO a3
#
               GET VSaaai(a3,a2,a1,i) # +
#
               Taa(a3,a)          = VSaaai(a3,a2,a1,i)*Taaai(a,a1,a2,i)
               Taa(a3,a)         *= -1.0
               PUT Iab_aa(a3,a)  += Taa(a3,a)
#
            ENDDO a3
#
# Done indirect contributions to one-particle intermediates 
# --------------------------------------------------------- 
# 
      ENDPARDO a, a1, a2, i 
#
#     Compute 'direct' contribution to Iai_aa  
#     ---------------------------------------  

#     Note: Dabci_aaaa is deleted internally to Proc IAIAA1 now.
      CALL IAIAA1 
#
# End computation of one-particle intermediate contributions 
# ---------------------------------------------------------- 
#
      ENDPROC DABCIAAAA 
#     ------------------
#
      PROC DABCIBBBB 
#     ---------------
#
      CREATE Dabci_bbbb  
      execute sip_barrier 
# 
      PARDO b, b1, b2, j 
#
            Tbbbj(b,b1,b2,j) = 0.0  
#
            GET Gae_b(b2,b) 
            GET t1b_old(b1,j) 
            GET Gae_b(b2,b1) 
            GET t1b_old(b,j) 
#
            T1bbbj(b,b1,b2,j)  = Gae_b(b2,b)^t1b_old(b1,j) 
            T1bbbj(b,b1,b2,j) *= -0.125 
            Tbbbj(b,b1,b2,j)  += T1bbbj(b,b1,b2,j)  
#
            T1bbbj(b,b1,b2,j)  = Gae_b(b2,b1)^t1b_old(b,j) 
            T1bbbj(b,b1,b2,j) *= 0.125 
            Tbbbj(b,b1,b2,j)  += T1bbbj(b,b1,b2,j)  
#
            DO j1 
#
               GET Tau_bb(b,j1,b1,j) 
               GET l1b_old(j1,b2) 
               GET Vibja_bbbb(j,b2,j1,b) 
               GET Vibja_bbbb(j,b2,j1,b1) 
               GET L2old_bb(j1,b,j,b1) 
               GET t1b_old(b2,j1) 
               GET t1b_old(b,j1) 
               GET t1b_old(b1,j1) 
#
               T1bbbj(b,b1,b2,j)  = Tau_bb(b,j1,b1,j)*l1b_old(j1,b2) 
               T1bbbj(b,b1,b2,j) *= 0.125 
               Tbbbj(b,b1,b2,j)  += T1bbbj(b,b1,b2,j)  
#
               T1bbbj(b,b1,b2,j)  = L2old_bb(j1,b,j,b1)*t1b_old(b2,j1) 
               T1bbbj(b,b1,b2,j) *= 0.125 
               Tbbbj(b,b1,b2,j)  += T1bbbj(b,b1,b2,j)  
#
               T1bbbj(b,b1,b2,j)  = Vibja_bbbb(j,b2,j1,b)*t1b_old(b1,j1)  
               T1bbbj(b,b1,b2,j) *= -0.25 
               Tbbbj(b,b1,b2,j)  += T1bbbj(b,b1,b2,j)  
#
               T1bbbj(b,b1,b2,j)  = Vibja_bbbb(j,b2,j1,b1)*t1b_old(b,j1)  
               T1bbbj(b,b1,b2,j) *= 0.25 
               Tbbbj(b,b1,b2,j)  += T1bbbj(b,b1,b2,j)  
#
               DO j2 
#
                  GET I3bb(j1,b2,j2,j) 
                  GET Tau_bb(b,j1,b1,j2) 
#
#                 T1bbbj(b,b1,b2,j)  = Tau_bb(b,j1,b1,j2)*I3bb(j1,b2,j2,j) 
                  Tbbjj(b,b1,j1,j2)  = Tau_bb(b,j1,b1,j2) 
                  Tjjbj(j1,j2,b2,j)  = I3bb(j1,b2,j2,j) 
                  T1bbbj(b,b1,b2,j)  = Tbbjj(b,b1,j1,j2)*Tjjbj(j1,j2,b2,j) 
                  T1bbbj(b,b1,b2,j) *= -0.0625 
                  Tbbbj(b,b1,b2,j)  += T1bbbj(b,b1,b2,j)  
#
               ENDDO j2 
#
            ENDDO j1 
#
# Multiply by 4 to match aces 
# --------------------------- 
#
            Tbbbj(b,b1,b2,j) *= 4.0 
#
            PUT Dabci_bbbb(b,b1,b2,j) += Tbbbj(b,b1,b2,j) 
#
# Compute indirect contributions to one-particle intermediates 
# ------------------------------------------------------------ 
#
#           Fourth-term of Iij_bb 
#           ---------------------
#
            DO  j1 
#
               GET VSbbbj(b,b2,b1,j1) # +
#
               Tqqqq(j1,b,b1,b2)  = VSbbbj(b,b2,b1,j1)
               Tjj(j1,j)          = Tqqqq(j1,b,b1,b2)*Tbbbj(b,b1,b2,j)
               Tjj(j1,j)         *= -0.5 
               PUT Iij_bb(j1,j)  += Tjj(j1,j)
#
            ENDDO j1  
#
#           Fourth-term of Iia_bb 
#           ---------------------
#
            DO j1  
#
               GET VSqjqj(b,j1,b1,j) # +
#
               Tjb(j1,b2)         = Tbbbj(b,b1,b2,j)*VSqjqj(b,j1,b1,j)
               Tjb(j1,b2)        *= -0.5
               PUT Iia_bb(j1,b2) += Tjb(j1,b2)
#
            ENDDO j1  
#
#           Fifth-term of Iia_bb 
#           --------------------
#
            DO j1  
#
               GET Vbbjj(b2,b,j,j1) # +
               GET Vjbbj(j,b,b2,j1) # -
#
               Tqqqq(j,b,b2,j1)   = Vbbjj(b2,b,j,j1)
               Tqqqq(j,b,b2,j1)  -= Vjbbj(j,b,b2,j1)
               Tjb(j1,b1)         = Tbbbj(b,b1,b2,j)*Tqqqq(j,b,b2,j1)
               Tjb(j1,b1)        *= -1.0  
               PUT Iia_bb(j1,b1) += Tjb(j1,b1)
#
            ENDDO j1  
#
#           Fourth-term of Iab_bb 
#           ---------------------
#
            DO b3
#
               GET VSbbbj(b,b3,b1,j) # +
#
               Tbb(b3,b2)         = VSbbbj(b,b3,b1,j)*Tbbbj(b,b1,b2,j)
               Tbb(b3,b2)        *= -0.5
               PUT Iab_bb(b3,b2) += Tbb(b3,b2)
#
            ENDDO b3
#
#           Fifth-term of Iab_bb 
#           --------------------
#
            DO b3
#
               GET VSbbbj(b3,b2,b1,j) # +
#
               Tbb(b3,b)          = VSbbbj(b3,b2,b1,j)*Tbbbj(b,b1,b2,j)
               Tbb(b3,b)         *= -1.0
               PUT Iab_bb(b3,b)  += Tbb(b3,b)
#
            ENDDO b3
#
# Done indirect contributions to one-particle intermediates 
# --------------------------------------------------------- 
# 
      ENDPARDO b, b1, b2, j 
#
#     Compute 'direct' contribution to Iai_bb 
#     --------------------------------------- 
      CALL IAIBB1 
#
# Done contributions to one-particle intermediates 
# ------------------------------------------------ 
#
      ENDPROC DABCIBBBB 
#     ------------------
#
      PROC DABCIABAB 
#     --------------- 
#
      CREATE Dabci_abab  
      execute sip_barrier 
#
      PARDO a, a1, b, j 
#
            Tabaj(a,b,a1,j) = 0.0 
#
            GET Gae_a(a,a1) 
            GET t1b_old(b,j) 
#
            T1abaj(a,b,a1,j)  = Gae_a(a,a1)^t1b_old(b,j) 
            T1abaj(a,b,a1,j) *= -0.125 
            Tabaj(a,b,a1,j)  += T1abaj(a,b,a1,j) 
#
            DO i 
#
               GET Tau_ab(a,i,b,j) 
               GET L2old_ab(i,a,j,b) 
               GET Vibja_baab(j,a1,i,b) 
               GET l1a_old(i,a1) 
               GET t1a_old(a1,i) 
               GET t1a_old(a,i) 
#
               T1abaj(a,b,a1,j)  = Tau_ab(a,i,b,j)*l1a_old(i,a1) 
               T1abaj(a,b,a1,j) *= 0.125 
               Tabaj(a,b,a1,j)  += T1abaj(a,b,a1,j) 
#
               T1abaj(a,b,a1,j)  = L2old_ab(i,a,j,b)*t1a_old(a1,i)  
               T1abaj(a,b,a1,j) *= 0.125 
               Tabaj(a,b,a1,j)  += T1abaj(a,b,a1,j) 
#
               T1abaj(a,b,a1,j)  = Vibja_baab(j,a1,i,b)*t1a_old(a,i) 
               T1abaj(a,b,a1,j) *= 0.25 
               Tabaj(a,b,a1,j)  += T1abaj(a,b,a1,j) 
#
            ENDDO i 
#
            DO j1 
#
               GET Vibja_baba(j,a1,j1,a) 
               GET t1b_old(b,j1) 
#
               T1abaj(a,b,a1,j)  = Vibja_baba(j,a1,j1,a)*t1b_old(b,j1) 
               T1abaj(a,b,a1,j) *= -0.25 
               Tabaj(a,b,a1,j)  += T1abaj(a,b,a1,j) 
#
               DO i 
#
                  GET I3ab(i,a1,j1,j) 
                  GET Tau_ab(a,i,b,j1) 
#
#                 T1abaj(a,b,a1,j)  = Tau_ab(a,i,b,j1)*I3ab(i,a1,j1,j) 
#
                  Tabij(a,b,i,j1)   = Tau_ab(a,i,b,j1) 
                  Tijaj(i,j1,a1,j)  = I3ab(i,a1,j1,j) 
                  T1abaj(a,b,a1,j)  = Tabij(a,b,i,j1)*Tijaj(i,j1,a1,j) 
                  T1abaj(a,b,a1,j) *= -0.125 
                  Tabaj(a,b,a1,j)  += T1abaj(a,b,a1,j) 
#
               ENDDO i 
#
            ENDDO j1 
#
# Multiply by 4 to match aces 
# --------------------------- 
#
            Tabaj(a,b,a1,j) *= 4.0 
#
            PUT Dabci_abab(a,b,a1,j) += Tabaj(a,b,a1,j) 
#
# Compute contributions to one-particle intermediates 
# --------------------------------------------------- 
#
#           Fourth-term of Iij_bb 
#           --------------------- 
#
            DO j1  
#
               GET Vaabj(a,a1,b,j1)
#
               Tjj(j1,j)         = Vaabj(a,a1,b,j1)*Tabaj(a,b,a1,j)
               Tjj(j1,j)        *= -1.0
               PUT Iij_bb(j1,j) += Tjj(j1,j)
#
            ENDDO j1  
#
#           Fourth-term of Iab_aa 
#           --------------------- 
#
            DO a2
#
               GET Vaabj(a,a2,b,j) # +
#
               Taa(a2,a1)         = Vaabj(a,a2,b,j)*Tabaj(a,b,a1,j)
               Taa(a2,a1)        *= -1.0
               PUT Iab_aa(a2,a1) += Taa(a2,a1)
#
            ENDDO a2
#
#           Fifth-term of Iab_aa 
#           --------------------  
#
            DO a2
#
               GET Vaabj(a2,a1,b,j) # +
#
               Taa(a2,a)         = Vaabj(a2,a1,b,j)*Tabaj(a,b,a1,j)
               Taa(a2,a)        *= -1.0
               PUT Iab_aa(a2,a) += Taa(a2,a)
#
            ENDDO a2
#
#           Fifth-term of Iab_bb 
#           --------------------  
#
            DO b1  
#
               GET Vaabj(a,a1,b1,j) # +
#
               Tbb(b1,b)         = Vaabj(a,a1,b1,j)*Tabaj(a,b,a1,j)
               Tbb(b1,b)        *= -1.0  
               PUT Iab_bb(b1,b) += Tbb(b1,b)
#
            ENDDO b1  
#
#           Fourth-term of Iia_aa 
#           --------------------- 
#
            DO i
#
               GET Vpiqj(a,i,b,j) # +
#
               Tia(i,a1)         = Tabaj(a,b,a1,j)*Vpiqj(a,i,b,j)
               Tia(i,a1)        *= -1.0
               PUT Iia_aa(i,a1) += Tia(i,a1)
#
            ENDDO i
#
#           Fifth-term of Iia_aa 
#           -------------------- 
#
            DO i
#
               GET Viabj(i,a1,b,j)
#
               Tia(i,a)         = Viabj(i,a1,b,j)*Tabaj(a,b,a1,j)
               Tia(i,a)        *= -1.0  
               PUT Iia_aa(i,a) += Tia(i,a)
#
            ENDDO i
#
#          Fifth-term of Iia_bb 
#          -------------------- 
#
            DO j1  
#
               GET Vaajj(a1,a,j,j1) # +
#
               Tjb(j1,b)         = Tabaj(a,b,a1,j)*Vaajj(a1,a,j,j1)
               Tjb(j1,b)        *= -1.0  
               PUT Iia_bb(j1,b) += Tjb(j1,b)
#
            ENDDO j1  
#
      ENDPARDO a, a1, b, j 
      execute sip_barrier 
#
#     Compute 'direct' contribution to Iai_bb 
#     --------------------------------------- 
      CALL IAIBB2 
#
# Done one-particle intermediates 
# ------------------------------- 
#
      ENDPROC DABCIABAB 
#     ------------------ 
#
      PROC DABCIBABA 
#     --------------- 
#
      CREATE Dabci_baba  
      execute sip_barrier 
#
      PARDO b1, b, a, i 
#
            Tbabi(b1,a,b,i) = 0.0 
#
            GET Gae_b(b1,b) 
            GET t1a_old(a,i) 
#
            T1babi(b1,a,b,i)  = Gae_b(b1,b)^t1a_old(a,i) 
            T1babi(b1,a,b,i) *= -0.125 
            Tbabi(b1,a,b,i)  += T1babi(b1,a,b,i) 
#
            DO j 
#
               GET Tau_ab(a,i,b1,j) 
               GET Vibja_abba(i,b,j,a) 
               GET L2old_ab(i,a,j,b1) 
               GET t1b_old(b1,j) 
               GET t1b_old(b,j) 
               GET l1b_old(j,b) 
#
               T1babi(b1,a,b,i)  = Tau_ab(a,i,b1,j)*l1b_old(j,b) 
               T1babi(b1,a,b,i) *= 0.125 
               Tbabi(b1,a,b,i)  += T1babi(b1,a,b,i) 
#
               T1babi(b1,a,b,i)  = L2old_ab(i,a,j,b1)*t1b_old(b,j)  
               T1babi(b1,a,b,i) *= 0.125 
               Tbabi(b1,a,b,i)  += T1babi(b1,a,b,i) 
#
               T1babi(b1,a,b,i)  = Vibja_abba(i,b,j,a)*t1b_old(b1,j) 
               T1babi(b1,a,b,i) *= 0.25 
               Tbabi(b1,a,b,i)  += T1babi(b1,a,b,i) 
#
            ENDDO j 
#
            DO i1 
#
               GET Vibja_abab(i,b,i1,b1) 
               GET t1a_old(a,i1) 
#
               T1babi(b1,a,b,i)  = Vibja_abab(i,b,i1,b1)*t1a_old(a,i1) 
               T1babi(b1,a,b,i) *= -0.25 
               Tbabi(b1,a,b,i)  += T1babi(b1,a,b,i) 
#
               DO j 
#
                  GET I3ba(j,b,i1,i) 
                  GET Tau_ab(a,i1,b1,j) 
#
#                 T1babi(b1,a,b,i)  = Tau_ab(a,i1,b1,j)*I3ba(j,b,i1,i) 
#
                  Tbaji(b1,a,j,i1)  = Tau_ab(a,i1,b1,j) 
                  Tjibi(j,i1,b,i)   = I3ba(j,b,i1,i)
                  T1babi(b1,a,b,i)  = Tbaji(b1,a,j,i1)*Tjibi(j,i1,b,i)  
                  T1babi(b1,a,b,i) *= -0.125 
                  Tbabi(b1,a,b,i)  += T1babi(b1,a,b,i) 
#
               ENDDO j 
#
            ENDDO i1 
#
# Multiply by 4 to match aces 
# --------------------------- 
#
            Tbabi(b1,a,b,i) *= 4.0 
#
            PUT Dabci_baba(b1,a,b,i) += Tbabi(b1,a,b,i) 
#
# Compute contributions to one-particle intermediates 
# --------------------------------------------------- 
#
#           Fourth-term of Iij_aa 
#           --------------------- 
#
            DO i1
#
               GET Vbbai(b1,b,a,i1) 
#
               Tii(i1,i)         = Vbbai(b1,b,a,i1)*Tbabi(b1,a,b,i)
               Tii(i1,i)        *= -1.0
               PUT Iij_aa(i1,i) += Tii(i1,i)
#
            ENDDO i1
#
#           Fifth-term of Iab_aa 
#           --------------------
#
            DO a1
#
               GET Vbbai(b1,b,a1,i) 
#
               Taa(a1,a)         = Vbbai(b1,b,a1,i)*Tbabi(b1,a,b,i)
               Taa(a1,a)        *= -1.0  
               PUT Iab_aa(a1,a) += Taa(a1,a)
#
            ENDDO a1
#
#           Fourth-term of Iab_bb 
#           --------------------- 
#
            DO b2  
#
               GET Vbbai(b1,b2,a,i) 
#
               Tbb(b2,b)         = Vbbai(b1,b2,a,i)*Tbabi(b1,a,b,i)
               Tbb(b2,b)        *= -1.0
               PUT Iab_bb(b2,b) += Tbb(b2,b)
#
            ENDDO b2  
#
#           Fifth-term of Iab_bb 
#           -------------------- 
#
            DO b2  
#
               GET Vbbai(b2,b,a,i)
#
               Tbb(b2,b1)         = Vbbai(b2,b,a,i)*Tbabi(b1,a,b,i)
               Tbb(b2,b1)        *= -1.0  
               PUT Iab_bb(b2,b1) += Tbb(b2,b1)
#
            ENDDO b2  
#
#           Fifth-term of Iia_aa 
#           -------------------- 
#
            DO i1
#
               GET Vbbii(b,b1,i,i1)
#
               Tia(i1,a)         = Tbabi(b1,a,b,i)*Vbbii(b,b1,i,i1)
               Tia(i1,a)        *= -1.0  
               PUT Iia_aa(i1,a) += Tia(i1,a)
#
            ENDDO i1
#
#          Fourth-term of Iia_bb 
#          ---------------------
#
            DO j
#
               GET Vpiqj(a,i,b1,j) # +
#
               Tjb(j,b)         = Tbabi(b1,a,b,i)*Vpiqj(a,i,b1,j)
               Tjb(j,b)        *= -1.0
               PUT Iia_bb(j,b) += Tjb(j,b)
#
            ENDDO j
#
#           Fifth-term of Iia_bb 
#           -------------------- 
#
            DO j
#
               GET Viabj(i,a,b,j)
#
               Tjb(j,b1)         = Viabj(i,a,b,j)*Tbabi(b1,a,b,i)
               Tjb(j,b1)        *= -1.0  
               PUT Iia_bb(j,b1) += Tjb(j,b1)
#
            ENDDO j
#
      ENDPARDO b1, b, a, i 
      execute sip_barrier 
#
#     Compute 'direct' contribution to Iai_aa  
#     ---------------------------------------  

#     Proc IAIAA2 deletes Dabci_baba internally after using for efficiency.

      CALL IAIAA2 
#
# Done contributions to one-particle intermediates 
# ------------------------------------------------ 
#
      ENDPROC DABCIBABA 
#     ------------------ 
#
# Delete distributed intermediate arrays 
# -------------------------------------- 
#
      PROC DABCI  
#     ---------- 
#
# Create distributed intermediate arrays 
# -------------------------------------- 
#
      CREATE I3aa 
      CREATE I3ab 
      CREATE I3ba 
      CREATE I3bb 
      execute sip_barrier ca  
#
      CALL I2XX
      execute sip_barrier ca  
      CALL DABCIAAAA
      CALL DABCIBBBB
      CALL DABCIABAB
      CALL DABCIBABA
#
# Delete distributed intermediate arrays 
# -------------------------------------- 
#
      execute sip_barrier ca  
      DELETE I3aa 
      DELETE I3ab 
      DELETE I3ba 
      DELETE I3bb 
#
      ENDPROC DABCI 
#     ------------- 
#
# Equivalent to gamma6 
#
# ----------------------------------------------------------------------------- 
#
# In this procedure the D(ij,ka) block of the two-particle 
# density matrix is evaluated. Only the AAAA contribution is computed.  
#
# ----------------------------------------------------------------------------- 
#
      PROC DIJKAAAAA 
#     -------------- 
      CREATE Dijka_aaaa 
      execute sip_barrier 
#
      PARDO i, i1, i2, a 
#
            Tiiia(i,i1,i2,a) = 0.0 
#
            GET Gmi_a(i,i2) 
            GET t1a_old(a,i1) 
            GET Gmi_a(i1,i2) 
            GET t1a_old(a,i) 
#
            T1iiia(i,i1,i2,a)  = Gmi_a(i,i2)^t1a_old(a,i1) 
            T1iiia(i,i1,i2,a) *= -0.125  
            Tiiia(i,i1,i2,a)  += T1iiia(i,i1,i2,a) 
#
            T1iiia(i,i1,i2,a)  = Gmi_a(i1,i2)^t1a_old(a,i) 
            T1iiia(i,i1,i2,a) *= 0.125  
            Tiiia(i,i1,i2,a)  += T1iiia(i,i1,i2,a) 
#
            DO a1 
#
               GET Tau_aa(a1,i,a,i1) 
               GET l1a_old(i2,a1) 
               GET L2old_aa(i,a1,i1,a) 
               GET Vibja_aaaa(i,a1,i2,a) 
               GET Vibja_aaaa(i1,a1,i2,a) 
               GET t1a_old(a1,i1) 
               GET t1a_old(a1,i) 
               GET t1a_old(a1,i2) 
#
               T1iiia(i,i1,i2,a) = Tau_aa(a1,i,a,i1)*l1a_old(i2,a1) 
               T1iiia(i,i1,i2,a)*= -0.125  
               Tiiia(i,i1,i2,a) += T1iiia(i,i1,i2,a) 
#
               T1iiia(i,i1,i2,a) = L2old_aa(i,a1,i1,a)*t1a_old(a1,i2) 
               T1iiia(i,i1,i2,a)*= -0.125  
               Tiiia(i,i1,i2,a) += T1iiia(i,i1,i2,a) 
#
               T1iiia(i,i1,i2,a) = Vibja_aaaa(i,a1,i2,a)*t1a_old(a1,i1) 
               T1iiia(i,i1,i2,a)*= 0.25  
               Tiiia(i,i1,i2,a) += T1iiia(i,i1,i2,a) 
#
               T1iiia(i,i1,i2,a) = Vibja_aaaa(i1,a1,i2,a)*t1a_old(a1,i) 
               T1iiia(i,i1,i2,a)*= -0.25  
               Tiiia(i,i1,i2,a) += T1iiia(i,i1,i2,a) 
#
            ENDDO a1 
#
            DO i3 
# 
               GET Vijmn_aaaa(i,i1,i2,i3) 
               GET t1a_old(a,i3) 
# 
               T1iiia(i,i1,i2,a) = Vijmn_aaaa(i,i1,i2,i3)*t1a_old(a,i3) 
               T1iiia(i,i1,i2,a)*= 0.125  
               Tiiia(i,i1,i2,a) += T1iiia(i,i1,i2,a) 
#
            ENDDO i3 
#
# Multiply by 4 to match aces 
# --------------------------- 
#
            Tiiia(i,i1,i2,a) *= 4.0 
#
            PUT Dijka_aaaa(i,i1,i2,a) += Tiiia(i,i1,i2,a) 
#
      ENDPARDO i, i1, i2, a 
      execute sip_barrier 
#
# Compute contributions to one-particle intermediates 
# --------------------------------------------------- 
#
# Fifth-term of Iij_aa 
# -------------------- 
#
      PARDO i2, i3, a, i
#
            GET VSpipi(a,i2,i3,i) # +
            Tpppp(i2,i3,a,i)  = VSpipi(a,i2,i3,i)
#
            DO i1
#
               GET Dijka_aaaa(i1,i2,i3,a)
#
               Tii(i,i1)         = Dijka_aaaa(i1,i2,i3,a)*Tpppp(i2,i3,a,i)
               Tii(i,i1)        *= -1.0  
               PUT Iij_aa(i,i1) += Tii(i,i1)
#
            ENDDO i1
#
      ENDPARDO i2, i3, a, i
#
# Sixth-term of Iij_aa
# -------------------- 
#
      PARDO i3, i2, a, i
#
            GET VSpipi(a,i2,i,i3) # +
#
            DO i1
#
               GET Dijka_aaaa(i3,i2,i1,a)
#
               Tii(i,i1)         = VSpipi(a,i2,i,i3)*Dijka_aaaa(i3,i2,i1,a)
               Tii(i,i1)        *= -0.5
               PUT Iij_aa(i,i1) += Tii(i,i1)
#
            ENDDO i1
#
      ENDPARDO i3, i2, a, i
#
# Sixth-term of Iab_aa
# --------------------
#
      PARDO a, i2, i, i1
#
            GET VSpipi(a,i1,i2,i) # +
            Tpppp(a,i,i1,i2)  = VSpipi(a,i1,i2,i)
#
            DO a1
#
               GET Dijka_aaaa(i,i1,i2,a1)
#
               Taa(a,a1)         = Tpppp(a,i,i1,i2)*Dijka_aaaa(i,i1,i2,a1)
               Taa(a,a1)        *= -0.5
               PUT Iab_aa(a,a1) += Taa(a,a1)
#
            ENDDO a1
#
      ENDPARDO a, i2, i, i1
#
# Third-term of Iai_aa
# --------------------  
#
      PARDO a, a1, i1, i2
#
            GET Viaai(i1,a1,a,i2) # +
            GET Vaaii(a,a1,i1,i2) # -
#
            Tpppp(i1,i2,a1,a)  = Viaai(i1,a1,a,i2)
            T1pppp(i1,i2,a1,a) = Vaaii(a,a1,i1,i2)
            Tpppp(i1,i2,a1,a) -= T1pppp(i1,i2,a1,a)
#
            DO i
#
               GET Dijka_aaaa(i,i1,i2,a1)
#
               Tai(a,i)         = Dijka_aaaa(i,i1,i2,a1)*Tpppp(i1,i2,a1,a)
               PUT Iai_aa(a,i) += Tai(a,i)
#
            ENDDO i
#
      ENDPARDO a, a1, i1, i2
#
# Fourth-term of Iai_aa
# --------------------
#
      PARDO a, a1, i1, i2
#
            GET VSpipi(a,i1,a1,i2) # +
#
            DO i
#
               GET Dijka_aaaa(i1,i2,i,a1)
#
               Tai(a,i)         = VSpipi(a,i1,a1,i2)*Dijka_aaaa(i1,i2,i,a1)
               Tai(a,i)        *= 0.5
               PUT Iai_aa(a,i) += Tai(a,i)
#
            ENDDO i
#
      ENDPARDO a, a1, i1, i2
#
# Sixth-term of Iia_aa 
# --------------------
#
      PARDO a, i3, i1, i2
#
            GET Dijka_aaaa(i1,i2,i3,a)
#
            DO i
#
               GET VSpipi(i1,i3,i2,i) # +
#
               Tpppp(i,i1,i2,i3)  = VSpipi(i1,i3,i2,i)
               Tia(i,a)           = Tpppp(i,i1,i2,i3)*Dijka_aaaa(i1,i2,i3,a)
               Tia(i,a)          *= -0.5
               PUT Iia_aa(i,a)   += Tia(i,a)
#
            ENDDO i
#
      ENDPARDO a, i3, i1, i2
#
# Done contribution to one-particle intermediates 
# ----------------------------------------------- 
      execute sip_barrier 
      delete Dijka_aaaa 
#
      ENDPROC DIJKAAAAA 
#     ----------------- 
#
# ----------------------------------------------------------------------------- 
#
# ----------------------------------------------------------------------------- 
#
# In this procedure the D(iJ,kA) block of the two-particle 
# density matrix is evaluated. The AB block is computed.  
#
# ----------------------------------------------------------------------------- 
#
      PROC DIJKAABAB 
#     -------------- 
      CREATE Dijka_abab 
      execute sip_barrier 
#
      PARDO i, j, i1, b 
#
            Tijib(i,j,i1,b) = 0.0 
#
            GET Gmi_a(i,i1) 
            GET t1b_old(b,j) 
#
            T1ijib(i,j,i1,b) = Gmi_a(i,i1)^t1b_old(b,j) 
            T1ijib(i,j,i1,b)*= -0.125  
            Tijib(i,j,i1,b) += T1ijib(i,j,i1,b) 
#
            DO a 
#
               GET Tau_ab(a,i,b,j) 
               GET L2old_ab(i,a,j,b) 
               GET Vibja_baab(j,a,i1,b) 
               GET l1a_old(i1,a) 
               GET t1a_old(a,i1) 
               GET t1a_old(a,i) 
#
               T1ijib(i,j,i1,b) = Tau_ab(a,i,b,j)*l1a_old(i1,a) 
               T1ijib(i,j,i1,b)*= -0.125  
               Tijib(i,j,i1,b) += T1ijib(i,j,i1,b) 
#
               T1ijib(i,j,i1,b) = L2old_ab(i,a,j,b)*t1a_old(a,i1) 
               T1ijib(i,j,i1,b)*= -0.125  
               Tijib(i,j,i1,b) += T1ijib(i,j,i1,b) 
#
               T1ijib(i,j,i1,b) = Vibja_baab(j,a,i1,b)*t1a_old(a,i) 
               T1ijib(i,j,i1,b)*= -0.25  
               Tijib(i,j,i1,b) += T1ijib(i,j,i1,b) 
#
            ENDDO a 
#
            DO j1 
# 
               GET Vijmn_abab(i,j,i1,j1) 
               GET t1b_old(b,j1) 
               T1ijib(i,j,i1,b) = Vijmn_abab(i,j,i1,j1)*t1b_old(b,j1) 
               T1ijib(i,j,i1,b)*= 0.125  
               Tijib(i,j,i1,b) += T1ijib(i,j,i1,b) 
#
            ENDDO j1 
#
            DO b1 
#
               GET Vibja_abab(i,b1,i1,b) 
               GET t1b_old(b1,j) 
               T1ijib(i,j,i1,b) = Vibja_abab(i,b1,i1,b)*t1b_old(b1,j) 
               T1ijib(i,j,i1,b)*= 0.25  
               Tijib(i,j,i1,b) += T1ijib(i,j,i1,b) 
#
            ENDDO b1 
#
# Multiply by 4 to match aces 
# --------------------------- 
#
            Tijib(i,j,i1,b) *= 4.0 
#
            PUT Dijka_abab(i,j,i1,b) += Tijib(i,j,i1,b) 
#
      ENDPARDO i, j, i1, b 
      execute sip_barrier 
#
# Compute contributions to one-particle intermediates 
# --------------------------------------------------- 
#
# Fifth-term of Iij_aa 
# -------------------- 
#
      PARDO j1, i2, b, i
#
            GET Vpiqj(i2,i,b,j1) # +
#
            DO i1
#
               GET Dijka_abab(i1,j1,i2,b)
#
               Tii(i,i1)         = Dijka_abab(i1,j1,i2,b)*Vpiqj(i2,i,b,j1)
               Tii(i,i1)        *= -1.0  
               PUT Iij_aa(i,i1) += Tii(i,i1)
#
            ENDDO i1
#
      ENDPARDO j1, i2, b, i
#
# Sixth-term of Iij_aa 
# -------------------- 
#
      PARDO i2, j, b, i
#
            GET Vpiqj(i,i2,b,j) # +
#
            DO i1
#
               GET Dijka_abab(i2,j,i1,b)
#
               Tii(i,i1)         = Vpiqj(i,i2,b,j)*Dijka_abab(i2,j,i1,b)
               Tii(i,i1)        *= -1.0
               PUT Iij_aa(i,i1) += Tii(i,i1)
#
            ENDDO i1
#
      ENDPARDO i2, j, b, i
#
# Fifth-term of Iij_bb 
# -------------------- 
#
      PARDO i, i1, b, j1
#
            GET Vpiqj(i1,i,b,j1) # -
#
            DO j
#
               GET Dijka_abab(i,j,i1,b)
#
               Tjj(j1,j)         = Dijka_abab(i,j,i1,b)*Vpiqj(i1,i,b,j1)
               Tjj(j1,j)        *= -1.0  
               PUT Iij_bb(j1,j) += Tjj(j1,j)
#
            ENDDO j
#
      ENDPARDO i, i1, b, j1
#
# Sixth-term of Iab_bb 
# -------------------- 
#
      PARDO b1, i1, i, j
#
            GET Vpiqj(i1,i,b1,j) # +
#
            DO b
#
               GET Dijka_abab(i,j,i1,b)
#
               Tbb(b1,b)         = Vpiqj(i1,i,b1,j)*Dijka_abab(i,j,i1,b)
               Tbb(b1,b)        *= -1.0
               PUT Iab_bb(b1,b) += Tbb(b1,b)
#
            ENDDO b
#
      ENDPARDO b1, i1, i, j
#
# Third-term of Iai_aa 
# --------------------
#
      PARDO a, b, j, i1
#
            GET Viabj(i1,a,b,j)
            Tqpqp(j,i1,b,a)  = Viabj(i1,a,b,j)
#
            DO i
#
               GET Dijka_abab(i,j,i1,b)
#
               Tai(a,i)         = Dijka_abab(i,j,i1,b)*Tqpqp(j,i1,b,a)
               PUT Iai_aa(a,i) += Tai(a,i)
#
            ENDDO i
#
      ENDPARDO a, b, j, i1
#
# Fourth-term of Iai_aa 
# ---------------------
#
      PARDO a, b, i1, j
#
            GET Vpiqj(a,i1,b,j) # +
#
            DO i
#
               GET Dijka_abab(i1,j,i,b)
#
               Tai(a,i)         = Vpiqj(a,i1,b,j)*Dijka_abab(i1,j,i,b)
               PUT Iai_aa(a,i) += Tai(a,i)
#
            ENDDO i
#
      ENDPARDO a, b, i1, j
#
# Third-term of Iai_bb 
# --------------------
#
      PARDO b, b1, i, i1
#
            GET Vbbii(b,b1,i,i1)
            Tppqq(i,i1,b1,b) = Vbbii(b,b1,i,i1)
#
            DO j
#
               GET Dijka_abab(i,j,i1,b1)
#
               Tbj(b,j)         = Dijka_abab(i,j,i1,b1)*Tppqq(i,i1,b1,b)
               PUT Iai_bb(b,j) += Tbj(b,j)
#
            ENDDO j
#
      ENDPARDO b, b1, i, i1
#
# Sixth-term of Iia_bb 
# -------------------- 
#
      PARDO b, i1, i, j1
#
            GET Dijka_abab(i,j1,i1,b)
#
            DO j
#
               GET Vpiqj(i,i1,j1,j) # +
#
               Tjb(j,b)         = Dijka_abab(i,j1,i1,b)*Vpiqj(i,i1,j1,j)
               Tjb(j,b)        *= -1.0
               PUT Iia_bb(j,b) += Tjb(j,b)
#
            ENDDO j
#
      ENDPARDO b, i1, i, j1 
#
# Done contributions to one-particle intermediates 
# ------------------------------------------------ 
      execute sip_barrier 
      delete Dijka_abab 
#
      ENDPROC DIJKAABAB 
#     ----------------- 
#
# ----------------------------------------------------------------------------- 
#
# ----------------------------------------------------------------------------- 
#
# In this procedure the D(Ij,Ka) block of the two-particle 
# density matrix is evaluated. The BABA block is computed.  
#
# ----------------------------------------------------------------------------- 
#
      PROC DIJKABABA 
#     -------------- 
      CREATE Dijka_baba 
      execute sip_barrier 
#
      PARDO j, i, j1, a 
#
            Tjija(j,i,j1,a) = 0.0 
#
            GET Gmi_b(j,j1) 
            GET t1a_old(a,i) 
#
            T1jija(j,i,j1,a) = Gmi_b(j,j1)^t1a_old(a,i) 
            T1jija(j,i,j1,a)*= -0.125  
            Tjija(j,i,j1,a) += T1jija(j,i,j1,a) 
#
            DO b 
#
               GET Tau_ab(a,i,b,j) 
               GET L2old_ab(i,a,j,b) 
               GET Vibja_abba(i,b,j1,a) 
               GET t1b_old(b,j) 
               GET t1b_old(b,j1) 
               GET l1b_old(j1,b) 
#
               T1jija(j,i,j1,a) = Tau_ab(a,i,b,j)*l1b_old(j1,b) 
               T1jija(j,i,j1,a)*= -0.125  
               Tjija(j,i,j1,a) += T1jija(j,i,j1,a) 
#
               T1jija(j,i,j1,a) = L2old_ab(i,a,j,b)*t1b_old(b,j1) 
               T1jija(j,i,j1,a)*= -0.125  
               Tjija(j,i,j1,a) += T1jija(j,i,j1,a) 
#
               T1jija(j,i,j1,a) = Vibja_abba(i,b,j1,a)*t1b_old(b,j) 
               T1jija(j,i,j1,a)*= -0.25  
               Tjija(j,i,j1,a) += T1jija(j,i,j1,a) 
#
            ENDDO b 
#
            DO i1 
# 
               GET Vijmn_abab(i,j,i1,j1) 
               GET t1a_old(a,i1) 
               T1jija(j,i,j1,a) = Vijmn_abab(i,j,i1,j1)*t1a_old(a,i1) 
               T1jija(j,i,j1,a)*= 0.125  
               Tjija(j,i,j1,a) += T1jija(j,i,j1,a) 
#
            ENDDO i1 
#
            DO a1 
#
               GET Vibja_baba(j,a1,j1,a) 
               GET t1a_old(a1,i) 
               T1jija(j,i,j1,a) = Vibja_baba(j,a1,j1,a)*t1a_old(a1,i) 
               T1jija(j,i,j1,a)*= 0.25  
               Tjija(j,i,j1,a) += T1jija(j,i,j1,a) 
#
            ENDDO a1 
#
# Multiply by 4 to match aces 
# --------------------------- 
#
            Tjija(j,i,j1,a) *= 4.0 
#
            PUT Dijka_baba(j,i,j1,a) += Tjija(j,i,j1,a) 
#
      ENDPARDO j, i, j1, a 
      execute sip_barrier
#
# Compute contributions to one-particle intermediates 
# --------------------------------------------------- 
#
# Fifth-term of Iij_aa 
# -------------------- 
#
      PARDO j1, j, a, i
#
            GET Vpiqj(a,i,j,j1)
#
            DO i1
#
               GET Dijka_baba(j1,i1,j,a)
#
               Tii(i,i1)         = Dijka_baba(j1,i1,j,a)*Vpiqj(a,i,j,j1)
               Tii(i,i1)        *= -1.0  
               PUT Iij_aa(i,i1) += Tii(i,i1)
#
            ENDDO i1
#
      ENDPARDO j1, j, a, i
#
# Fifth-term of Iij_bb 
# -------------------- 
#
      PARDO i, j2, a, j1
#
            GET Vpiqj(a,i,j2,j1) # +
#
            DO j
#
               GET Dijka_baba(j,i,j2,a)
#
               Tjj(j1,j)         = Dijka_baba(j,i,j2,a)*Vpiqj(a,i,j2,j1)
               Tjj(j1,j)        *= -1.0  
               PUT Iij_bb(j1,j) += Tjj(j1,j)
#
            ENDDO j
#
      ENDPARDO i, j2, a, j1
#
# Sixth-term of Iij_bb 
# -------------------- 
#
      PARDO j2, i, a, j1
#
            GET Vpiqj(a,i,j1,j2) # +
#
            DO j
#
               GET Dijka_baba(j2,i,j,a)
               GET Vpiqj(a,i,j1,j2) # +
#
               Tjj(j1,j)         = Vpiqj(a,i,j1,j2)*Dijka_baba(j2,i,j,a)
               Tjj(j1,j)        *= -1.0
               PUT Iij_bb(j1,j) += Tjj(j1,j)
#
            ENDDO j
#
      ENDPARDO j2, i, a, j1
#
# Sixth-term of Iab_aa 
# -------------------- 
#
      PARDO a, j1, j, i
#
            GET Vpiqj(a,i,j1,j) # +
#
            DO a1
#
               GET Dijka_baba(j,i,j1,a1)
#
               Taa(a,a1)         = Vpiqj(a,i,j1,j)*Dijka_baba(j,i,j1,a1)
               Taa(a,a1)        *= -1.0
               PUT Iab_aa(a,a1) += Taa(a,a1)
#
            ENDDO a1
#
      ENDPARDO a, j1, j, i
#
# Third-term of Iai_aa 
# -------------------- 
#
      PARDO a, a1, j, j1
#
            GET Vaajj(a,a1,j,j1) # -
            Tqqpp(j,j1,a1,a) = Vaajj(a,a1,j,j1)
#
            DO i
#
               GET Dijka_baba(j,i,j1,a1)
#
               Tai(a,i)         = Dijka_baba(j,i,j1,a1)*Tqqpp(j,j1,a1,a)
               PUT Iai_aa(a,i) += Tai(a,i)
#
            ENDDO i
#
      ENDPARDO a, a1, j, j1
#
# Third-term of Iai_bb 
# -------------------- 
#
      PARDO b, a, i, j1
#
            GET Viabj(i,a,b,j1) # +
            Tpqpq(i,j1,a,b)  = Viabj(i,a,b,j1)
#
            DO j
#
               GET Dijka_baba(j,i,j1,a)
#
               Tbj(b,j)         = Dijka_baba(j,i,j1,a)*Tpqpq(i,j1,a,b)
               PUT Iai_bb(b,j) += Tbj(b,j)
#
            ENDDO j
#
      ENDPARDO b, a, i, j1
#
# Fourth-term of Iai_bb 
# ---------------------
#
      PARDO b, a, j1, i
#
            GET Vpiqj(a,i,b,j1)
#
            DO j
#
               GET Dijka_baba(j1,i,j,a)
#
               Tbj(b,j)         = Vpiqj(a,i,b,j1)*Dijka_baba(j1,i,j,a)
               PUT Iai_bb(b,j) += Tbj(b,j)
#
            ENDDO j
#
      ENDPARDO b, a, j1, i
#
# Sixth-term of Iia_aa 
# -------------------- 
#
      PARDO a, j1, j, i1
#
            GET Dijka_baba(j,i1,j1,a)
#
            DO i
#
               GET Vpiqj(i1,i,j,j1)
#
               Tia(i,a)         = Dijka_baba(j,i1,j1,a)*Vpiqj(i1,i,j,j1)
               Tia(i,a)        *= -1.0
               PUT Iia_aa(i,a) += Tia(i,a)
#
            ENDDO i
#
      ENDPARDO a, j1, j, i1
#
# Done contributions to one-particle intermediates 
# ------------------------------------------------ 
      execute sip_barrier 
      delete Dijka_baba 
# 
      ENDPROC DIJKABABA 
#     ----------------- 
#
# ----------------------------------------------------------------------------- 
#
# ----------------------------------------------------------------------------- 
#
# In this procedure the D(IJ,KA) block of the two-particle 
# density matrix is evaluated. Only the BBBB contribution is computed.  
#
# ----------------------------------------------------------------------------- 
#
      PROC DIJKABBBB 
#     -------------- 
      CREATE Dijka_bbbb 
      execute sip_barrier 
#
      PARDO j, j1, j2, b 
#
            Tjjjb(j,j1,j2,b) = 0.0 
#
            GET Gmi_b(j,j2) 
            GET t1b_old(b,j1) 
            GET Gmi_b(j1,j2) 
            GET t1b_old(b,j) 
#
            T1jjjb(j,j1,j2,b)  = Gmi_b(j,j2)^t1b_old(b,j1) 
            T1jjjb(j,j1,j2,b) *= -0.125  
            Tjjjb(j,j1,j2,b)  += T1jjjb(j,j1,j2,b) 
#
            T1jjjb(j,j1,j2,b)  = Gmi_b(j1,j2)^t1b_old(b,j) 
            T1jjjb(j,j1,j2,b) *= 0.125  
            Tjjjb(j,j1,j2,b)  += T1jjjb(j,j1,j2,b) 
#
            DO b1 
#
               GET Tau_bb(b1,j,b,j1) 
               GET l1b_old(j2,b1) 
               GET L2old_bb(j,b1,j1,b) 
               GET Vibja_bbbb(j,b1,j2,b) 
               GET Vibja_bbbb(j1,b1,j2,b) 
               GET t1b_old(b1,j) 
               GET t1b_old(b1,j1) 
               GET t1b_old(b1,j2) 
#
               T1jjjb(j,j1,j2,b) = Tau_bb(b1,j,b,j1)*l1b_old(j2,b1) 
               T1jjjb(j,j1,j2,b)*= -0.125  
               Tjjjb(j,j1,j2,b) += T1jjjb(j,j1,j2,b) 
#
               T1jjjb(j,j1,j2,b) = L2old_bb(j,b1,j1,b)*t1b_old(b1,j2) 
               T1jjjb(j,j1,j2,b)*= -0.125  
               Tjjjb(j,j1,j2,b) += T1jjjb(j,j1,j2,b) 
#
               T1jjjb(j,j1,j2,b) = Vibja_bbbb(j,b1,j2,b)*t1b_old(b1,j1) 
               T1jjjb(j,j1,j2,b)*= 0.25  
               Tjjjb(j,j1,j2,b) += T1jjjb(j,j1,j2,b) 
#
               T1jjjb(j,j1,j2,b) = Vibja_bbbb(j1,b1,j2,b)*t1b_old(b1,j) 
               T1jjjb(j,j1,j2,b)*= -0.25  
               Tjjjb(j,j1,j2,b) += T1jjjb(j,j1,j2,b) 
#
            ENDDO b1 
#
            DO j3 
# 
               GET Vijmn_bbbb(j,j1,j2,j3) 
               GET t1b_old(b,j3) 
#
               T1jjjb(j,j1,j2,b) = Vijmn_bbbb(j,j1,j2,j3)*t1b_old(b,j3) 
               T1jjjb(j,j1,j2,b)*= 0.125  
               Tjjjb(j,j1,j2,b) += T1jjjb(j,j1,j2,b) 
#
            ENDDO j3 
#
# Multiply by 4 to match aces 
# --------------------------- 
#
            Tjjjb(j,j1,j2,b) *= 4.0 
#
            PUT Dijka_bbbb(j,j1,j2,b) += Tjjjb(j,j1,j2,b) 
#
      ENDPARDO j, j1, j2, b 
      execute sip_barrier 
#
# Compute contribution to one-particle intermediates 
# -------------------------------------------------- 
#
# Fifth-term of Iij_bb 
# --------------------
#
      PARDO j2, j3, b, j1
#
            GET VSqjqj(b,j2,j3,j1) # +
            Tqqqq(j2,j3,b,j1)  = VSqjqj(b,j2,j3,j1)
#
            DO j
#
               GET Dijka_bbbb(j,j2,j3,b)
#
               Tjj(j1,j)         = Dijka_bbbb(j,j2,j3,b)*Tqqqq(j2,j3,b,j1)
               Tjj(j1,j)        *= -1.0  
               PUT Iij_bb(j1,j) += Tjj(j1,j)
#
            ENDDO j
#
      ENDPARDO j2, j3, b, j1
#
#     Sixth-term of Iij_bb 
#     --------------------
#
      PARDO j2, j3, b, j1
#
            GET VSqjqj(b,j3,j1,j2) # +
#
            DO j
#
               GET Dijka_bbbb(j2,j3,j,b)
#
               Tjj(j1,j)         = VSqjqj(b,j3,j1,j2)*Dijka_bbbb(j2,j3,j,b)
               Tjj(j1,j)        *= -0.5
               PUT Iij_bb(j1,j) += Tjj(j1,j)
#
            ENDDO j
#
      ENDPARDO j2, j3, b, j1
#
#     Sixth-term of Iab_bb 
#     --------------------
#
      PARDO b1, j2, j, j1
#
            GET VSqjqj(b1,j1,j2,j) # +
            Tqqqq(b1,j,j1,j2)  = VSqjqj(b1,j1,j2,j)
#
            DO b
#
               GET Dijka_bbbb(j,j1,j2,b)
#
               Tbb(b1,b)         = Tqqqq(b1,j,j1,j2)*Dijka_bbbb(j,j1,j2,b)
               Tbb(b1,b)        *= -0.5
               PUT Iab_bb(b1,b) += Tbb(b1,b)
#
            ENDDO b
#
      ENDPARDO b1, j2, j, j1
#
# Third-term of Iai_bb 
# --------------------
#
      PARDO b, b1, j1, j2
#
            GET Vjbbj(j1,b1,b,j2) # +
            GET Vbbjj(b,b1,j1,j2) # -
            Tqqqq(j1,j2,b1,b)  = Vjbbj(j1,b1,b,j2)
            T1qqqq(j1,j2,b1,b) = Vbbjj(b,b1,j1,j2)
            Tqqqq(j1,j2,b1,b) -= T1qqqq(j1,j2,b1,b)
#
            DO j
#
               GET Dijka_bbbb(j,j1,j2,b1)
#
               Tbj(b,j)         = Dijka_bbbb(j,j1,j2,b1)*Tqqqq(j1,j2,b1,b)
               PUT Iai_bb(b,j) += Tbj(b,j)
#
            ENDDO j
#
      ENDPARDO b, b1, j1, j2
#
# Fourth-term of Iai_bb 
# --------------------- 
#
      PARDO b, b1, j1, j2
#
            GET VSqjqj(b,j1,b1,j2) # +
#
            DO j
#
               GET Dijka_bbbb(j1,j2,j,b1)
#
               Tbj(b,j)         = VSqjqj(b,j1,b1,j2)*Dijka_bbbb(j1,j2,j,b1)
               Tbj(b,j)        *= 0.5
               PUT Iai_bb(b,j) += Tbj(b,j)
#
            ENDDO j
#
      ENDPARDO b, b1, j1, j2
#
# Sixth-term of Iia_bb 
# --------------------
#
      PARDO b, j3, j1, j2
#
            GET Dijka_bbbb(j1,j2,j3,b)
#
            DO j
#
               GET VSqjqj(j1,j3,j2,j) # +
#
               Tqqqq(j,j1,j2,j3)  = VSqjqj(j1,j3,j2,j)
               Tjb(j,b)           = Tqqqq(j,j1,j2,j3)*Dijka_bbbb(j1,j2,j3,b)
               Tjb(j,b)          *= -0.5
               PUT Iia_bb(j,b)   += Tjb(j,b)
#
            ENDDO j
#
      ENDPARDO b, j3, j1, j2
#
# Done contributions to one-particle intermediates 
# ------------------------------------------------
      execute sip_barrier
      delete Dijka_bbbb 
#
      ENDPROC DIJKABBBB 
#     ----------------- 
#
# ----------------------------------------------------------------------------- 
#
      PROC DIJKA 
#     ---------- 
#
# Create gamma arrays 
# ------------------- 
#
           CALL DIJKAAAAA 
           CALL DIJKAABAB 
           CALL DIJKABABA 
           CALL DIJKABBBB 
#
      ENDPROC DIJKA 
#     ------------- 
#
# ----------------------------------------------------------------------------
#
# In this superprocedure the particle-particle block of the relaxed density 
# matrix is computed. The expressions programmed are: 
# 
# D_{ab} = 1/4 P_+(ab) t^{ae}_{mn} \lambda^{mn}_{be}  
#        + 1/4 P_+(ab) t^{aE}_{mN} \lambda^{mN}_{bE}  
#        + 1/2 P_+(ab) t^{a}_{m} \lambda^{m}_{b} 
#
# D_{AB} = D_{ab} [a<-->A, b<-->B, i<-->I, j<-->J, m<-->M, n<-->N] 
#
      PROC DABA 
#     --------- 
#
      PARDO a, a1, i  
#
            GET t1a_old(a,i) 
            GET l1a_old(i,a1) 
#
            Taa(a,a1)        = t1a_old(a,i)*l1a_old(i,a1) 
            Taa(a,a1)       *= 0.5 
            T1aa(a1,a)       = Taa(a,a1)  
            PUT Dab_a(a,a1) += Taa(a,a1) 
            PUT Dab_a(a1,a) += T1aa(a1,a) 
#
            DO a2 
            DO i1 
#
               GET T2old_aa(a,i,a2,i1) 
               GET L2old_aa(i,a1,i1,a2) 
#
               Taa(a,a1)        = T2old_aa(a,i,a2,i1)*L2old_aa(i,a1,i1,a2)
               Taa(a,a1)       *= 0.25 
               T1aa(a1,a)       = Taa(a,a1)  
               PUT Dab_a(a,a1) += Taa(a,a1) 
               PUT Dab_a(a1,a) += T1aa(a1,a) 
#
            ENDDO i1 
            ENDDO a2 
#
            DO b 
            DO j 
#
               GET T2old_ab(a,i,b,j) 
               GET L2old_ab(i,a1,j,b) 
#
               Taa(a,a1)        = T2old_ab(a,i,b,j)*L2old_ab(i,a1,j,b)
               Taa(a,a1)       *= 0.5 
               T1aa(a1,a)       = Taa(a,a1)  
               PUT Dab_a(a,a1) += Taa(a,a1) 
               PUT Dab_a(a1,a) += T1aa(a1,a) 
#
            ENDDO j 
            ENDDO b 
#
      ENDPARDO a, a1, i  
#
      ENDPROC DABA 
#     ------------ 
#
      PROC DABB 
#     --------- 
#
      PARDO b1, b, j  
#
            GET t1b_old(b1,j) 
            GET l1b_old(j,b) 
#
            Tbb(b1,b)        = t1b_old(b1,j)*l1b_old(j,b) 
            Tbb(b1,b)       *= 0.5 
            T1bb(b,b1)       = Tbb(b1,b)  
            PUT Dab_b(b1,b) += Tbb(b1,b) 
            PUT Dab_b(b,b1) += T1bb(b,b1) 
#
            DO b2 
            DO j1 
#
               GET T2old_bb(b1,j,b2,j1) 
               GET L2old_bb(j,b,j1,b2) 
#
               Tbb(b1,b)        = T2old_bb(b1,j,b2,j1)*L2old_bb(j,b,j1,b2)
               Tbb(b1,b)       *= 0.25 
               T1bb(b,b1)       = Tbb(b1,b)  
               PUT Dab_b(b1,b) += Tbb(b1,b) 
               PUT Dab_b(b,b1) += T1bb(b,b1) 
#
            ENDDO j1 
            ENDDO b2 
#
            DO a 
            DO i 
#
               GET T2old_ab(a,i,b1,j) 
               GET L2old_ab(i,a,j,b) 
#
               Tbb(b1,b)        = T2old_ab(a,i,b1,j)*L2old_ab(i,a,j,b)
               Tbb(b1,b)       *= 0.5 
               T1bb(b,b1)       = Tbb(b1,b)  
               PUT Dab_b(b1,b) += Tbb(b1,b) 
               PUT Dab_b(b,b1) += T1bb(b,b1) 
#
            ENDDO i 
            ENDDO a 
#
      ENDPARDO b1, b, j  
#
      ENDPROC DABB 
#     ------------ 
#
# ----------------------------------------------------------------------------
#
      PROC DAB 
           CALL DABA 
           CALL DABB 
      ENDPROC DAB 
#
# --------------------------------------------------------------------------- 
#
# In this superprocedure the occupied-occupied block of the relaxed
# density matrix is computed. The expressions programmed are:
#
# D_{ij} = -1/4 P_+(ij) t^{ef}_{im} \lambda^{jm}_{ef} 
#          -1/4 P_+(ij) t^{eF}_{iM} \lambda^{jM}_{eF}   
#          -1/2 P_+(ij) t^{e}_{i} \lambda^{j}_{e}   
#
# D_{IJ} = D_{ij} [i<-->I, j<-->J, e<-->E, f<-->F] 
#
# --------------------------------------------------------------------------- 
#
      PROC DIJA 
#     --------- 
#
      PARDO a, a1, i2 
#
            DO i 
#
               GET T2old_aa(a,i,a1,i2) 
#
               DO i1 
#
                  GET L2old_aa(i1,a,i2,a1) 
#
                  Tii(i,i1)        = T2old_aa(a,i,a1,i2)*L2old_aa(i1,a,i2,a1) 
                  Tii(i,i1)       *= -0.25   
                  T1ii(i1,i)       = Tii(i,i1) 
                  PUT Dij_a(i,i1) += Tii(i,i1) 
                  PUT Dij_a(i1,i) += T1ii(i1,i) 
#
               ENDDO i1 
#
            ENDDO i 
#
      ENDPARDO a, a1, i2 
#
      PARDO a, b, j 
#
            DO i 
#
               GET T2old_ab(a,i,b,j) 
#
               DO i1 
#
                  GET L2old_ab(i1,a,j,b) 
#
                  Tii(i,i1)        = T2old_ab(a,i,b,j)*L2old_ab(i1,a,j,b) 
                  Tii(i,i1)       *= -0.5   
                  T1ii(i1,i)       = Tii(i,i1) 
                  PUT Dij_a(i,i1) += Tii(i,i1) 
                  PUT Dij_a(i1,i) += T1ii(i1,i) 
#
               ENDDO i1 
#
            ENDDO i 
#
      ENDPARDO a, b, j 
#
      PARDO a, i, i1  
#
            GET t1a_old(a,i) 
            GET l1a_old(i1,a) 
#
            Tii(i,i1)        = l1a_old(i1,a)*t1a_old(a,i) 
            Tii(i,i1)       *= -0.5   
            T1ii(i1,i)       = Tii(i,i1) 
            PUT Dij_a(i,i1) += Tii(i,i1) 
            PUT Dij_a(i1,i) += T1ii(i1,i) 
#
      ENDPARDO a, i, i1  
#
      ENDPROC DIJA 
#     ------------ 
#
      PROC DIJB 
#     --------- 
#
      PARDO b, b1, j2 
#
            DO j1 
            DO j 
#
               GET L2old_bb(j,b,j2,b1) 
               GET T2old_bb(b,j1,b1,j2) 
#
               Tjj(j1,j)        = T2old_bb(b,j1,b1,j2)*L2old_bb(j,b,j2,b1) 
               Tjj(j1,j)       *= -0.25   
               T1jj(j,j1)       = Tjj(j1,j) 
               PUT Dij_b(j1,j) += Tjj(j1,j) 
               PUT Dij_b(j,j1) += T1jj(j,j1) 
#
            ENDDO j 
            ENDDO j1 
#
      ENDPARDO b, b1, j2 
#
      PARDO b, a, i 
#
            DO j1 
#
               GET T2old_ab(a,i,b,j1) 
#
               DO j 
#
                  GET L2old_ab(i,a,j,b) 
#
                  Tjj(j1,j)        = T2old_ab(a,i,b,j1)*L2old_ab(i,a,j,b) 
                  Tjj(j1,j)       *= -0.5   
                  T1jj(j,j1)       = Tjj(j1,j) 
                  PUT Dij_b(j1,j) += Tjj(j1,j) 
                  PUT Dij_b(j,j1) += T1jj(j,j1) 
#
               ENDDO j 
#
            ENDDO j1 
#
      ENDPARDO b, a, i 
#
      PARDO b, j, j1  
#
            GET t1b_old(b,j1) 
            GET l1b_old(j,b) 
#
            Tjj(j1,j)        = l1b_old(j,b)*t1b_old(b,j1) 
            Tjj(j1,j)       *= -0.5   
            T1jj(j,j1)       = Tjj(j1,j) 
            PUT Dij_b(j1,j) += Tjj(j1,j) 
            PUT Dij_b(j,j1) += T1jj(j,j1) 
#
      ENDPARDO b, j, j1  
#
      ENDPROC DIJB 
#     ------------ 
#
      PROC DIJ 
#     ----------- 
           CALL DIJA 
           CALL DIJB 
      ENDPROC DIJ 
#     ----------- 
# 
     PROC I11 
#    -------- 
#
# Calculate contribution to Iai_aa 
# -------------------------------- 
#
     PARDO a, i, i1, i2  
#
           GET VSpipi(a,i2,i1,i) # + 
           GET Dij_a(i1,i2) 
#
           Tpppp(a,i,i1,i2)  = VSpipi(a,i2,i1,i) 
           Tai(a,i)          = Tpppp(a,i,i1,i2)*Dij_a(i1,i2) 
           Tai(a,i)         *= -1.0  
           PUT Iai_aa(a,i)  += Tai(a,i) 
#
     ENDPARDO a, i, i1, i2  
#
     PARDO a, j, j1, i 
#
           GET Vpiqj(a,i,j,j1) # - 
           GET Dij_b(j,j1) 
#
           Tai(a,i)         = Vpiqj(a,i,j,j1)*Dij_b(j,j1) 
           PUT Iai_aa(a,i) += Tai(a,i) 
#
     ENDPARDO a, j, j1, i 
#
     PARDO a, a1, a2, i 
#
           GET VSaaai(a,a1,a2,i) # + 
           GET Dab_a(a2,a1) 
#
           Tpppp(a,i,a2,a1)  = VSaaai(a,a1,a2,i) 
           Tai(a,i)          = Tpppp(a,i,a2,a1)*Dab_a(a2,a1) 
           Tai(a,i)         *= -1.0   
           PUT Iai_aa(a,i)  += Tai(a,i) 
#
     ENDPARDO a, a1, a2, i 
#
     PARDO a, b, b1, i 
#
           GET Vbbai(b1,b,a,i) # - 
           GET Dab_b(b1,b) 
#
           Tai(a,i)         = Vbbai(b1,b,a,i)*Dab_b(b1,b) 
           PUT Iai_aa(a,i) += Tai(a,i) 
#
     ENDPARDO a, b, b1, i 
#
# Done contribution to Iai_aa 
# --------------------------- 
#
# Calculate contribution to Iai_bb 
# -------------------------------- 
#
     PARDO b, j1, j2, j 
#
           GET VSqjqj(b,j1,j2,j) # + 
           GET Dij_b(j1,j2) 
#
           Tqqqq(b,j,j1,j2)  = VSqjqj(b,j1,j2,j) 
           Tbj(b,j)          = Tqqqq(b,j,j1,j2)*Dij_b(j1,j2) 
           Tbj(b,j)         *= -1.0   
           PUT Iai_bb(b,j)  += Tbj(b,j) 
#
     ENDPARDO b, j1, j2, j 
#
     PARDO b, i, i1, j 
#
           GET Vpiqj(i1,i,b,j) # - 
           GET Dij_a(i,i1) 
#
           Tbj(b,j)         = Vpiqj(i1,i,b,j)*Dij_a(i,i1) 
           PUT Iai_bb(b,j) += Tbj(b,j) 
#
     ENDPARDO b, i, i1, j 
#
     PARDO b, b1, b2, j 
#
           GET VSbbbj(b,b1,b2,j) # + 
           GET Dab_b(b1,b2) 
#
           Tqqqq(b,j,b1,b2)  = VSbbbj(b,b1,b2,j) 
           Tbj(b,j)          = Tqqqq(b,j,b1,b2)*Dab_b(b1,b2) 
           Tbj(b,j)         *= -1.0   
           PUT Iai_bb(b,j)  += Tbj(b,j) 
#
     ENDPARDO b, b1, b2, j 
#
     PARDO b, a, a1, j 
#
           GET Vaabj(a1,a,b,j)  
           GET Dab_a(a,a1) 
#
           Tbj(b,j)         = Vaabj(a1,a,b,j)*Dab_a(a,a1) 
           PUT Iai_bb(b,j) += Tbj(b,j) 
#
     ENDPARDO b, a, a1, j 
#
# Done contribution to Iai_bb 
# --------------------------- 
#
# Compute contribution to Iij_aa 
# ------------------------------ 
#
#     Dab contribution 
#     ---------------- 
#
      PARDO a, a1, i, i1 
#
            GET Dab_a(a,a1) 
            GET Vaaii(a,a1,i,i1) # + 
            GET Viaai(i,a1,a,i1) # - 
            GET Vaaii(a,a1,i1,i) # + 
            GET Viaai(i1,a1,a,i) #   
#
            Tpppp(i,i1,a,a1)  = Vaaii(a,a1,i,i1)  
            T1pppp(i,i1,a,a1) = Viaai(i,a1,a,i1)  
            T2pppp(i,i1,a,a1) = Vaaii(a,a1,i1,i)  
            T3pppp(i,i1,a,a1) = Viaai(i1,a1,a,i) 
#
            Tpppp(i,i1,a,a1) -= T1pppp(i,i1,a,a1)  
            Tpppp(i,i1,a,a1) += T2pppp(i,i1,a,a1)  
            Tpppp(i,i1,a,a1) -= T3pppp(i,i1,a,a1)  
#
            Tii(i,i1)         = Tpppp(i,i1,a,a1)*Dab_a(a,a1) 
            Tii(i,i1)        *= -0.5  
            PUT Iij_aa(i,i1) += Tii(i,i1) 
#
      ENDPARDO a, a1, i, i1 
#
      PARDO b, b1, i, i1 
#
            GET Dab_b(b,b1) 
            GET Vbbii(b,b1,i,i1) # + 
            GET Vbbii(b,b1,i1,i) # + 
#
            Tppqq(i,i1,b,b1)  = Vbbii(b,b1,i,i1)  
            T2ppqq(i,i1,b,b1) = Vbbii(b,b1,i1,i)  
            Tppqq(i,i1,b,b1) += T2ppqq(i,i1,b,b1)  
#
            Tii(i,i1)         = Tppqq(i,i1,b,b1)*Dab_b(b,b1) 
            Tii(i,i1)        *= -0.5  
            PUT Iij_aa(i,i1) += Tii(i,i1) 
#
      ENDPARDO b, b1, i, i1 
#
#     Dij contribution 
#     ---------------- 
#
      PARDO i2, i3, i, i1 
#
            GET Dij_a(i2,i3) 
            GET VSpipi(i2,i3,i,i1) # + 
            GET VSpipi(i2,i3,i1,i) # + 
#
            Tpppp(i,i1,i2,i3)  = VSpipi(i2,i3,i,i1)  
            T2pppp(i,i1,i2,i3) = VSpipi(i2,i3,i1,i)  
            Tpppp(i,i1,i2,i3) += T2pppp(i,i1,i2,i3)  
#
            Tii(i,i1)          = Tpppp(i,i1,i2,i3)*Dij_a(i2,i3) 
            Tii(i,i1)         *= -0.5  
            PUT Iij_aa(i,i1)  += Tii(i,i1) 
#
      ENDPARDO i2, i3, i, i1 
#
      PARDO j, j1, i, i1 
#
            GET Dij_b(j,j1) 
            GET Vpiqj(i,i1,j,j1) # + 
            GET Vpiqj(i1,i,j,j1) # + 
#
            Tppqq(i,i1,j,j1)  = Vpiqj(i,i1,j,j1)  
            T2ppqq(i,i1,j,j1) = Vpiqj(i1,i,j,j1)  
            Tppqq(i,i1,j,j1) += T2ppqq(i,i1,j,j1)  
#
            Tii(i,i1)         = Tppqq(i,i1,j,j1)*Dij_b(j,j1) 
            Tii(i,i1)        *= -0.5  
            PUT Iij_aa(i,i1) += Tii(i,i1) 
#
      ENDPARDO j, j1, i, i1 
# 
# DONE Compute contribution to Iij_aa 
# ----------------------------------- 
#
# Compute contribution to Iij_bb 
# ------------------------------ 
#
#     Dab contribution 
#     ---------------- 
#
      PARDO b, b1, j, j1 
#
            GET Dab_b(b,b1) 
            GET Vbbjj(b,b1,j,j1) # + 
            GET Vjbbj(j,b1,b,j1) # - 
            GET Vbbjj(b,b1,j1,j) # + 
            GET Vjbbj(j1,b1,b,j) #   
#
            Tqqqq(j,j1,b,b1)  = Vbbjj(b,b1,j,j1)  
            T1qqqq(j,j1,b,b1) = Vjbbj(j,b1,b,j1)  
            T2qqqq(j,j1,b,b1) = Vbbjj(b,b1,j1,j)  
            T3qqqq(j,j1,b,b1) = Vjbbj(j1,b1,b,j) 
#
            Tqqqq(j,j1,b,b1) -= T1qqqq(j,j1,b,b1)  
            Tqqqq(j,j1,b,b1) += T2qqqq(j,j1,b,b1)  
            Tqqqq(j,j1,b,b1) -= T3qqqq(j,j1,b,b1)  
#
            Tjj(j,j1)         = Tqqqq(j,j1,b,b1)*Dab_b(b,b1) 
            Tjj(j,j1)        *= -0.5  
            PUT Iij_bb(j,j1) += Tjj(j,j1) 
#
      ENDPARDO b, b1, j, j1 
#
      PARDO a, a1, j, j1 
#
            GET Dab_a(a,a1) 
            GET Vaajj(a,a1,j,j1) # + 
            GET Vaajj(a,a1,j1,j) # + 
#
            Tqqpp(j,j1,a,a1)  = Vaajj(a,a1,j,j1)  
            T2qqpp(j,j1,a,a1) = Vaajj(a,a1,j1,j)  
            Tqqpp(j,j1,a,a1) += T2qqpp(j,j1,a,a1)  
#
            Tjj(j,j1)         = Tqqpp(j,j1,a,a1)*Dab_a(a,a1) 
            Tjj(j,j1)        *= -0.5  
            PUT Iij_bb(j,j1) += Tjj(j,j1) 
#
      ENDPARDO a, a1, j, j1 
#
#     Dij contribution 
#     ---------------- 
#
      PARDO j2, j3, j, j1 
#
            GET Dij_b(j2,j3) 
            GET VSqjqj(j2,j3,j,j1) # + 
            GET VSqjqj(j2,j3,j1,j) # + 
#
            Tqqqq(j,j1,j2,j3)  = VSqjqj(j2,j3,j,j1)  
            T2qqqq(j,j1,j2,j3) = VSqjqj(j2,j3,j1,j)  
            Tqqqq(j,j1,j2,j3) += T2qqqq(j,j1,j2,j3)  
            Tjj(j,j1)          = Tqqqq(j,j1,j2,j3)*Dij_b(j2,j3) 
            Tjj(j,j1)         *= -0.5  
            PUT Iij_bb(j,j1)  += Tjj(j,j1) 
#
      ENDPARDO j2, j3, j, j1 
#
      PARDO j, j1, i, i1 
#
            GET Dij_a(i,i1) 
            GET Vpiqj(i,i1,j,j1) # + 
            GET Vpiqj(i,i1,j1,j) # + 
#
            Tppqq(i,i1,j,j1)  = Vpiqj(i,i1,j,j1)  
            T2ppqq(i,i1,j,j1) = Vpiqj(i,i1,j1,j)  
            Tppqq(i,i1,j,j1) += T2ppqq(i,i1,j,j1)  
#
            Tjj(j,j1)         = Tppqq(i,i1,j,j1)*Dij_a(i,i1) 
            Tjj(j,j1)        *= -0.5  
            PUT Iij_bb(j,j1) += Tjj(j,j1) 
#
      ENDPARDO j, j1, i, i1 
# 
     ENDPROC I11 
#    ----------- 
#
# This procedure computes the contributions to the intermediate
# Iij_a which contain the Fock matrix. First-term of equation 43
# and computed in dfini.f.
#
# Equation programmed:
#
#     I(i,j) = - f(i,m) D(j,m)
#
      PROC FOCKIIJA
#     -------------
#
      PARDO i, i1 
#
            Tii(i,i1) = Fock_a(i,i1)
#
            DO i2 
#
            IF i2 == i 
#
               GET Dij_a(i1,i2)
#
               T1ii(i,i1)        = Dij_a(i1,i2)*Fock_a(i2,i)
               Tii(i,i1)        += T1ii(i,i1)  
#
            ENDIF # i2 == i 
#
            ENDDO i2 
#
            Tii(i,i1)        *= -1.0 
            PUT Iij_aa(i,i1) += Tii(i,i1)
#
      ENDPARDO i, i1 
#
# Also subtract out Dai contribution Eq. 56 
# ----------------------------------------- 
#
      PARDO i, i1, a, i2 
#
            GET Doldai_a(a,i2) 
            GET VSpipi(a,i2,i,i1) # + 
            GET VSpipi(i1,i,a,i2) # +  
#
            Tpppp(i,i1,a,i2)  = VSpipi(a,i2,i,i1) 
            T2pppp(i,i1,a,i2) = VSpipi(i1,i,a,i2)  
            Tpppp(i,i1,a,i2) += T2pppp(i,i1,a,i2)  
#
            Tii(i,i1)         = Tpppp(i,i1,a,i2)*Doldai_a(a,i2)
            Tii(i,i1)        *= -1.0 
            PUT Iij_aa(i,i1) += Tii(i,i1)
# 
      ENDPARDO i, i1, a, i2 
#
      PARDO i, i1, b, j 
#
            GET Doldai_b(b,j) 
            GET Vpiqj(i,i1,b,j) # + 
            GET Vpiqj(i1,i,b,j) # +  
#
            Tppqq(i,i1,b,j)   = Vpiqj(i,i1,b,j)  
            T2ppqq(i,i1,b,j)  = Vpiqj(i1,i,b,j)  
            Tppqq(i,i1,b,j)  += T2ppqq(i,i1,b,j)  
#
            Tii(i,i1)         = Tppqq(i,i1,b,j)*Doldai_b(b,j)
            Tii(i,i1)        *= -1.0 
#
            PUT Iij_aa(i,i1) += Tii(i,i1)
# 
      ENDPARDO i, i1, b, j 
#
      ENDPROC FOCKIIJA
#     ----------------
#
# This procedure computes the contributions to the intermediate
# Iij_b which contain the Fock matrix. First-term of equation 43
# and computed in dfini.f.
#
# Equation programmed:
#
#     I(I,J) = - f(I,M) D(J,M)
#
      PROC FOCKIIJB
#     -------------
#
      PARDO j, j1 
#
            Tjj(j,j1) = Fock_b(j,j1)
#
            DO j2 
#
            IF j2 == j 
#
               GET Dij_b(j1,j2)
#
               T1jj(j,j1)        = Dij_b(j1,j2)*Fock_b(j2,j)
               Tjj(j,j1)        += T1jj(j,j1)  
#
            ENDIF # j2 == j1  
#
            ENDDO j2 
#
            Tjj(j,j1)        *= -1.0  
            PUT Iij_bb(j,j1) += Tjj(j,j1)
#
      ENDPARDO j, j1 
#
# Also subtract out Dai contribution Eq. 56 
# ----------------------------------------- 
#
      PARDO j, j1, b, j2 
#
            GET Doldai_b(b,j2) 
            GET VSqjqj(b,j2,j,j1) # + 
            GET VSqjqj(j1,j,b,j2) # +  
#
            Tqqqq(j,j1,b,j2)  = VSqjqj(b,j2,j,j1) 
            T2qqqq(j,j1,b,j2) = VSqjqj(j1,j,b,j2)  
            Tqqqq(j,j1,b,j2) += T2qqqq(j,j1,b,j2)  
            Tjj(j,j1)         = Tqqqq(j,j1,b,j2)*Doldai_b(b,j2)
            Tjj(j,j1)        *= -1.0 
            PUT Iij_bb(j,j1) += Tjj(j,j1)
# 
      ENDPARDO j, j1, b, j2 
#
      PARDO j, j1, a, i 
#
            GET Doldai_a(a,i) 
            GET Vpiqj(a,i,j,j1) # + 
            GET Vpiqj(a,i,j1,j) # +  
#
            Tqqpp(j,j1,a,i)   = Vpiqj(a,i,j,j1)  
            T2qqpp(j,j1,a,i)  = Vpiqj(a,i,j1,j)  
            Tqqpp(j,j1,a,i)  += T2qqpp(j,j1,a,i)  
#
            Tjj(j,j1)         = Tqqpp(j,j1,a,i)*Doldai_a(a,i)
            Tjj(j,j1)        *= -1.0 
            PUT Iij_bb(j,j1) += Tjj(j,j1)
# 
      ENDPARDO j, j1, a, i 
#
      ENDPROC FOCKIIJB
#     ----------------
#
# This procedure computes the contributions to the intermediate
# Iab_a which contain the Fock matrix. First-term of equation 43
# and computed in dfini.f.
#
# Equation programmed:
#
#     I(a,b) = - f(a,e) D(b,e)
#
      PROC FOCKIABA
#     -------------
#
      PARDO a, a1
#
            DO a2
#
               IF a2 == a 
#
                  GET Dab_a(a1,a2)
                  Taa(a,a1)         = Fock_a(a,a2)*Dab_a(a1,a2)
                  Taa(a,a1)        *= -1.0
                  PUT Iab_aa(a,a1) += Taa(a,a1)
#
               ENDIF # a2 == a 
#
            ENDDO a2
#
      ENDPARDO a, a1
#
      ENDPROC FOCKIABA
#     ----------------
#
# This procedure computes the contributions to the intermediate
# Iab_b which contain the Fock matrix. First-term of equarion 43
# and computed in dfini.f.
#
# Equation programmed:
#
#     I(A,B) = - f(A,E) D(B,E)
#
      PROC FOCKIABB
#     -------------
#
      PARDO b, b1
#
            DO b2
#
               IF b2 == b 
#
                  GET Dab_b(b1,b2)
#
                  Tbb(b,b1)         = Fock_b(b,b2)*Dab_b(b1,b2)
                  Tbb(b,b1)        *= -1.0
                  PUT Iab_bb(b,b1) += Tbb(b,b1)
#
               ENDIF # b2 == b 
#
            ENDDO b2
#
      ENDPARDO b, b1 
#
      PARDO a, i 
#
            Tia(i,a) = 0.0 
#
            DO i1 
#
               IF i1 == i 
#
               GET Doldai_a(a,i1) 
#
               T1ia(i,a) = Doldai_a(a,i1)*fock_a(i1,i) 
               Tia(i,a) -= T1ia(i,a) 
#
               ENDIF # i1 == i 
#
            ENDDO i1 
#
            PUT Iia_aa(i,a) += Tia(i,a) 
#
      ENDPARDO a, i 
#
      PARDO b, j
#
            Tjb(j,b) = 0.0 
#
            DO j1 
#
               IF j1 == j 
#
                  GET Doldai_b(b,j1) 
#
                  T1jb(j,b) = Doldai_b(b,j1)*fock_b(j1,j) 
                  Tjb(j,b) -= T1jb(j,b) 
#
               ENDIF # j1 == j 
#
            ENDDO j1  
#
            PUT Iia_bb(j,b) += Tjb(j,b) 
#
      ENDPARDO b, j  
#
      ENDPROC FOCKIABB
#     ----------------
#
      PROC IFOCK
#     ----------
           CALL FOCKIIJA
           CALL FOCKIIJB
           CALL FOCKIABA
           CALL FOCKIABB
      ENDPROC IFOCK
#     -------------
# 
# @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
#
# Contributions depending in Vabcd are computed in this procedure 
# 'directly'. Since these integrals are not stored the terms:
# Iab_aa(2) and Iab_bb(2), and Iai_aa(6) and Iai_bb(6) must be 
# computed differently than earlier. 
#
     PROC IABAA1 
#    ----------- 
#
#    Form Half back transformed cluster array
#    ----------------------------------------
#
     CREATE TAO_aa
     execute sip_barrier
#
     PARDO a, a1, i, i1
#
           GET Tau_aa(a,i,a1,i1)
#
           DO lambda
#
              Zaa(lambda,i,a1,i1) = Tau_aa(a,i,a1,i1)*ca(lambda,a)
#
              DO sigma
#
                 ZZaa(lambda,i,sigma,i1)        = Zaa(lambda,i,a1,i1)*ca(sigma,a1)
                 PUT TAO_aa(lambda,i,sigma,i1) += ZZaa(lambda,i,sigma,i1)
#
              ENDDO sigma
#
           ENDDO lambda
#
     ENDPARDO a, a1, i, i1
#
#    Form Half back transformed lambda array
#    ---------------------------------------
#
     CREATE LAO_aa
     execute sip_barrier
#
     PARDO a, a1, i, i1
#
           GET L2old_aa(i,a,i1,a1)
#
           DO lambda
#
              Qaa(i,lambda,i1,a1) = L2old_aa(i,a,i1,a1)*ca(lambda,a)
#
              DO sigma
#
                 QQaa(i,lambda,i1,sigma)        = Qaa(i,lambda,i1,a1)*ca(sigma,a1)
                 PUT LAO_aa(i,lambda,i1,sigma) += QQaa(i,lambda,i1,sigma)
#
              ENDDO sigma
#
           ENDDO lambda
#
     ENDPARDO a, a1, i, i1
     create  Ixixi 
     create I1xixi 
     execute sip_barrier 
#
#    Contract Half back transformed arrays with AO integrals 
#    --> Txixi and T1xixi 
#    ------------------------------------------------------- 
#
     PARDO mu, nu, lambda, sigma 
#
           compute_integrals aoint(mu,lambda,nu,sigma) 
#
           DO i 
           DO i1 
#
              GET Tao_aa(mu,i,nu,i1) 
              GET Lao_aa(i,mu,i1,nu) 
#
              Txixi(lambda,i,sigma,i1)      = Tao_aa(mu,i,nu,i1)*aoint(mu,lambda,nu,sigma) 
              PUT Ixixi(lambda,i,sigma,i1) += Txixi(lambda,i,sigma,i1) 
#
              T1xixi(lambda,i,sigma,i1) = Lao_aa(i,mu,i1,nu)*aoint(mu,lambda,nu,sigma) 
              PUT I1xixi(lambda,i,sigma,i1) += T1xixi(lambda,i,sigma,i1) 
#
           ENDDO i1 
           ENDDO i 
#
     ENDPARDO mu, nu, lambda, sigma 
     execute sip_barrier 
     delete Tao_aa 
     delete Lao_aa 
     create  Iaiai
     create I1aiai
     execute sip_barrier
#
#    Transform I and I1 
#    ------------------ 
#
     PARDO lambda, sigma, i, i1 
#
           GET Ixixi(lambda,i,sigma,i1) 
           GET I1xixi(lambda,i,sigma,i1) 
#
           DO a1 
#
              Txiai(lambda,i,a1,i1)  =  Ixixi(lambda,i,sigma,i1)*ca(sigma,a1) 
              T1xiai(lambda,i,a1,i1) = I1xixi(lambda,i,sigma,i1)*ca(sigma,a1) 
#
              DO a 
#
                 Taiai(a,i,a1,i1)       =  Txiai(lambda,i,a1,i1)*ca(lambda,a)  
                 T1aiai(a,i,a1,i1)      = T1xiai(lambda,i,a1,i1)*ca(lambda,a)  
#
                 PUT Iaiai(a,i,a1,i1)  += Taiai(a,i,a1,i1) 
                 PUT I1aiai(a,i,a1,i1) += T1aiai(a,i,a1,i1) 
#
                 T2aiai(a1,i,a,i1)      =  Taiai(a,i,a1,i1) 
                 T3aiai(a1,i,a,i1)      = T1aiai(a,i,a1,i1) 
#
                 T2aiai(a1,i,a,i1)     *= -1.0  
                 T3aiai(a1,i,a,i1)     *= -1.0  
#
                 PUT Iaiai(a1,i,a,i1)  += T2aiai(a1,i,a,i1) 
                 PUT I1aiai(a1,i,a,i1) += T3aiai(a1,i,a,i1) 
#
              ENDDO a 
#
           ENDDO a1 
#
     ENDPARDO lambda, sigma, i, i1 
     execute sip_barrier 
     delete  Ixixi 
     delete I1xixi 
#
#    Perform final contraction 
#    ------------------------- 
#
     PARDO a, a1, a2 
#
           DO i 
           DO i1 
#
              GET  Iaiai(a,i,a2,i1) 
              GET I1aiai(a,i,a2,i1) 
              GET L2old_aa(i,a1,i1,a2) 
              GET Tau_aa(a1,i,a2,i1) 
#
              Taa(a,a1)         = Iaiai(a,i,a2,i1)*L2old_aa(i,a1,i1,a2) 
              T1aa(a,a1)        = I1aiai(a,i,a2,i1)*Tau_aa(a1,i,a2,i1) 
              Taa(a,a1)        += T1aa(a,a1) 
              Taa(a,a1)        *= -0.125 
              PUT Iab_aa(a,a1) += Taa(a,a1) 
#
           ENDDO i1 
           ENDDO i 
#
     ENDPARDO a, a1, a2 
     execute sip_barrier 
     delete  Iaiai 
     delete I1aiai 
#
     ENDPROC IABAA1 
#    -------------- 
#
     PROC IABAA2 
#    ----------- 
#
#    Form Half back transformed cluster array
#    ----------------------------------------
#
     CREATE TAO_ab
     execute sip_barrier
#
     PARDO a, b, i, j
#
           GET Tau_ab(a,i,b,j)
#
           DO lambda
#
              Zab(lambda,i,b,j) = Tau_ab(a,i,b,j)*ca(lambda,a)
#
              DO sigma
#
                 ZZab(lambda,i,sigma,j)        = Zab(lambda,i,b,j)*cb(sigma,b)
                 PUT TAO_ab(lambda,i,sigma,j) += ZZab(lambda,i,sigma,j)
#
              ENDDO sigma
#
           ENDDO lambda
#
     ENDPARDO a, b, i, j
#
#    Form Half back transformed lambda array
#    ---------------------------------------
#
     CREATE LAO_ab
     execute sip_barrier
#
     PARDO a, b, i, j
#
           GET L2old_ab(i,a,j,b)
#
           DO lambda
#
              Qab(i,lambda,j,b) = L2old_ab(i,a,j,b)*ca(lambda,a)
#
              DO sigma
#
                 QQab(i,lambda,j,sigma)        = Qab(i,lambda,j,b)*cb(sigma,b)
                 PUT LAO_ab(i,lambda,j,sigma) += QQab(i,lambda,j,sigma)
#
              ENDDO sigma
#
           ENDDO lambda
#
     ENDPARDO a, b, i, j
     create  Ixixj 
     create I1xixj 
     execute sip_barrier 
#
#    Contract Half back transformed arrays with AO integrals 
#    --> Txixj and T1xixj 
#    ------------------------------------------------------- 
#
     PARDO mu, nu, lambda, sigma 
#
           compute_integrals aoint(mu,lambda,nu,sigma) 
#
           DO i 
           DO j 
#
              GET Tao_ab(mu,i,nu,j) 
              GET Lao_ab(i,mu,j,nu) 
#
              Txixj(lambda,i,sigma,j)       = Tao_ab(mu,i,nu,j)*aoint(mu,lambda,nu,sigma) 
              PUT Ixixj(lambda,i,sigma,j)  += Txixj(lambda,i,sigma,j) 
#
              Txixj(lambda,i,sigma,j)       = Lao_ab(i,mu,j,nu)*aoint(mu,lambda,nu,sigma) 
              PUT I1xixj(lambda,i,sigma,j) += Txixj(lambda,i,sigma,j) 
#
           ENDDO j 
           ENDDO i 
#
     ENDPARDO mu, nu, lambda, sigma 
     execute sip_barrier 
     delete Tao_ab 
     delete Lao_ab 
     create  Iaibj
     create I1aibj
     execute sip_barrier
#
#    Transform I and I1 
#    ------------------ 
#
     PARDO lambda, sigma, i, j 
#
           GET Ixixj(lambda,i,sigma,j) 
           GET I1xixj(lambda,i,sigma,j) 
#
           DO b 
#
              Txibj(lambda,i,b,j)     =  Ixixj(lambda,i,sigma,j)*cb(sigma,b) 
              T1xibj(lambda,i,b,j)    = I1xixj(lambda,i,sigma,j)*cb(sigma,b) 
#
              DO a 
#
                 Taibj(a,i,b,j)       =  Txibj(lambda,i,b,j)*ca(lambda,a)  
                 T1aibj(a,i,b,j)      = T1xibj(lambda,i,b,j)*ca(lambda,a)  
#
                 PUT Iaibj(a,i,b,j)  += Taibj(a,i,b,j) 
                 PUT I1aibj(a,i,b,j) += T1aibj(a,i,b,j) 
#
              ENDDO a 
#
           ENDDO b 
#
     ENDPARDO lambda, sigma, i, j 
     execute sip_barrier 
     delete  Ixixj 
     delete I1xixj 
#
#    Perform final contraction to Iab_aa  
#    -----------------------------------  
#
     PARDO a, a1, b 
#
           DO i 
           DO j 
#
              GET  Iaibj(a,i,b,j) 
              GET I1aibj(a,i,b,j) 
              GET L2old_ab(i,a1,j,b) 
              GET Tau_ab(a1,i,b,j) 
#
              Taa(a,a1)         = Iaibj(a,i,b,j)*L2old_ab(i,a1,j,b) 
              T1aa(a,a1)        = I1aibj(a,i,b,j)*Tau_ab(a1,i,b,j) 
              Taa(a,a1)        += T1aa(a,a1) 
              Taa(a,a1)        *= -0.5 
              PUT Iab_aa(a,a1) += Taa(a,a1) 
#
           ENDDO j 
           ENDDO i 
#
     ENDPARDO a, a1, b 
#
#    Perform final contraction to Iab_bb  
#    -----------------------------------  
#
     PARDO b, b1, a 
#
           DO i 
           DO j 
#
              GET  Iaibj(a,i,b,j) 
              GET I1aibj(a,i,b,j) 
              GET L2old_ab(i,a,j,b1) 
              GET Tau_ab(a,i,b1,j) 
#
              Tbb(b,b1)         = Iaibj(a,i,b,j)*L2old_ab(i,a,j,b1) 
              T1bb(b,b1)        = I1aibj(a,i,b,j)*Tau_ab(a,i,b1,j) 
              Tbb(b,b1)        += T1bb(b,b1) 
              Tbb(b,b1)        *= -0.5 
              PUT Iab_bb(b,b1) += Tbb(b,b1) 
#
           ENDDO j 
           ENDDO i 
#
     ENDPARDO b, b1, a 
     execute sip_barrier 
     delete  Iaibj 
     delete I1aibj 
#
     ENDPROC IABAA2 
#    -------------- 
#
     PROC IABBB1 
#    ----------- 
#
#    Form Half back transformed cluster array
#    ----------------------------------------
#
     CREATE TAO_bb
     execute sip_barrier
#
     PARDO b, b1, j, j1
#
           GET Tau_bb(b,j,b1,j1)
#
           DO lambda
#
              Zbb(lambda,j,b1,j1) = Tau_bb(b,j,b1,j1)*cb(lambda,b)
#
              DO sigma
#
                 ZZbb(lambda,j,sigma,j1)        = Zbb(lambda,j,b1,j1)*cb(sigma,b1)
                 PUT TAO_bb(lambda,j,sigma,j1) += ZZbb(lambda,j,sigma,j1)
#
              ENDDO sigma
#
           ENDDO lambda
#
     ENDPARDO b, b1, j, j1
#
#    Form Half back transformed lambda array
#    ---------------------------------------
#
     CREATE LAO_bb
     execute sip_barrier
#
     PARDO b, b1, j, j1
#
           GET L2old_bb(j,b,j1,b1)
#
           DO lambda
#
              Qbb(j,lambda,j1,b1) = L2old_bb(j,b,j1,b1)*cb(lambda,b)
#
              DO sigma
#
                 QQbb(j,lambda,j1,sigma)        = Qbb(j,lambda,j1,b1)*cb(sigma,b1)
                 PUT LAO_bb(j,lambda,j1,sigma) += QQbb(j,lambda,j1,sigma)
#
              ENDDO sigma
#
           ENDDO lambda
#
     ENDPARDO b, b1, j, j1
     create  Ixjxj 
     create I1xjxj 
     execute sip_barrier 
#
#    Contract Half back transformed arrays with AO integrals 
#    --> Txjxj and T1xjxj 
#    ------------------------------------------------------- 
#
     PARDO mu, nu, lambda, sigma 
#
           compute_integrals aoint(mu,lambda,nu,sigma) 
#
           DO j 
           DO j1 
#
              GET Tao_bb(mu,j,nu,j1) 
              GET Lao_bb(j,mu,j1,nu) 
#
              Txjxj(lambda,j,sigma,j1)       = Tao_bb(mu,j,nu,j1)*aoint(mu,lambda,nu,sigma) 
              PUT Ixjxj(lambda,j,sigma,j1)  += Txjxj(lambda,j,sigma,j1) 
#
              T1xjxj(lambda,j,sigma,j1)      = Lao_bb(j,mu,j1,nu)*aoint(mu,lambda,nu,sigma) 
              PUT I1xjxj(lambda,j,sigma,j1) += T1xjxj(lambda,j,sigma,j1) 
#
           ENDDO j1 
           ENDDO j 
#
     ENDPARDO mu, nu, lambda, sigma 
     execute sip_barrier 
     delete Tao_bb 
     delete Lao_bb 
     create  Ibjbj
     create I1bjbj
     execute sip_barrier
#
#    Transform I and I1 
#    ------------------ 
#
     PARDO lambda, sigma, j, j1 
#
           GET Ixjxj(lambda,j,sigma,j1) 
           GET I1xjxj(lambda,j,sigma,j1) 
#
           DO b1 
#
              Txjbj(lambda,j,b1,j1)  =  Ixjxj(lambda,j,sigma,j1)*cb(sigma,b1) 
              T1xjbj(lambda,j,b1,j1) = I1xjxj(lambda,j,sigma,j1)*cb(sigma,b1) 
#
              DO b 
#
                 Tbjbj(b,j,b1,j1)       =  Txjbj(lambda,j,b1,j1)*cb(lambda,b)  
                 T1bjbj(b,j,b1,j1)      = T1xjbj(lambda,j,b1,j1)*cb(lambda,b)  
#
                 PUT Ibjbj(b,j,b1,j1)  += Tbjbj(b,j,b1,j1) 
                 PUT I1bjbj(b,j,b1,j1) += T1bjbj(b,j,b1,j1) 
#
                 T2bjbj(b1,j,b,j1)      =  Tbjbj(b,j,b1,j1) 
                 T3bjbj(b1,j,b,j1)      = T1bjbj(b,j,b1,j1) 
#
                 T2bjbj(b1,j,b,j1)     *= -1.0  
                 T3bjbj(b1,j,b,j1)     *= -1.0  
#
                 PUT Ibjbj(b1,j,b,j1)  += T2bjbj(b1,j,b,j1) 
                 PUT I1bjbj(b1,j,b,j1) += T3bjbj(b1,j,b,j1) 
#
              ENDDO b 
#
           ENDDO b1 
#
     ENDPARDO lambda, sigma, j, j1 
     execute sip_barrier 
     delete  Ixjxj 
     delete I1xjxj 
#
#    Perform final contraction 
#    ------------------------- 
#
     PARDO b, b1, b2 
#
           DO j 
           DO j1 
#
              GET  Ibjbj(b,j,b2,j1) 
              GET I1bjbj(b,j,b2,j1) 
              GET L2old_bb(j,b1,j1,b2) 
              GET Tau_bb(b1,j,b2,j1) 
#
              Tbb(b,b1)         = Ibjbj(b,j,b2,j1)*L2old_bb(j,b1,j1,b2) 
              T1bb(b,b1)        = I1bjbj(b,j,b2,j1)*Tau_bb(b1,j,b2,j1) 
              Tbb(b,b1)        += T1bb(b,b1) 
              Tbb(b,b1)        *= -0.125 
              PUT Iab_bb(b,b1) += Tbb(b,b1) 
#
           ENDDO j1 
           ENDDO j 
#
     ENDPARDO b, b1, b2 
     execute sip_barrier 
     delete  Ibjbj 
     delete I1bjbj 
#
     ENDPROC IABBB1 
#    -------------- 
#
     PROC IABBB2 
#    ----------- 
#
#    Form Half back transformed cluster array
#    ----------------------------------------
#
     CREATE TAO_ab
     execute sip_barrier
#
     PARDO a, b, i, j
#
           GET Tau_ab(a,i,b,j)
#
           DO lambda
#
              Zab(lambda,i,b,j) = Tau_ab(a,i,b,j)*ca(lambda,a)
#
              DO sigma
#
                 ZZab(lambda,i,sigma,j)        = Zab(lambda,i,b,j)*cb(sigma,b)
                 PUT TAO_ab(lambda,i,sigma,j) += ZZab(lambda,i,sigma,j)
#
              ENDDO sigma
#
           ENDDO lambda
#
     ENDPARDO a, b, i, j
#
#    Form Half back transformed lambda array
#    ---------------------------------------
#
     CREATE LAO_ab
     execute sip_barrier
#
     PARDO a, b, i, j
#
           GET L2old_ab(i,a,j,b)
#
           DO lambda
#
              Qab(i,lambda,j,b) = L2old_ab(i,a,j,b)*ca(lambda,a)
#
              DO sigma
#
                 QQab(i,lambda,j,sigma)        = Qab(i,lambda,j,b)*cb(sigma,b)
                 PUT LAO_ab(i,lambda,j,sigma) += QQab(i,lambda,j,sigma)
#
              ENDDO sigma
#
           ENDDO lambda
#
     ENDPARDO a, b, i, j
     create  Ixixj 
     create I1xixj 
     execute sip_barrier 
#
#    Contract Half back transformed arrays with AO integrals 
#    --> Txixj and T1xixj 
#    ------------------------------------------------------- 
#
     PARDO mu, nu, lambda, sigma 
#
           compute_integrals aoint(mu,lambda,nu,sigma) 
#
           DO i 
           DO j 
#
              GET Tao_ab(mu,i,nu,j) 
              GET Lao_ab(i,mu,j,nu) 
#
              Txixj(lambda,i,sigma,j)       = Tao_ab(mu,i,nu,j)*aoint(mu,lambda,nu,sigma) 
              PUT Ixixj(lambda,i,sigma,j)  += Txixj(lambda,i,sigma,j) 
#
              Txixj(lambda,i,sigma,j)       = Lao_ab(i,mu,j,nu)*aoint(mu,lambda,nu,sigma) 
              PUT I1xixj(lambda,i,sigma,j) += Txixj(lambda,i,sigma,j) 
#
           ENDDO j 
           ENDDO i 
#
     ENDPARDO mu, nu, lambda, sigma 
     execute sip_barrier 
     delete Tao_ab 
     delete Lao_ab 
     create  Iaibj
     create I1aibj
     execute sip_barrier
#
#    Transform I and I1 
#    ------------------ 
#
     PARDO lambda, sigma, i, j 
#
           GET Ixixj(lambda,i,sigma,j) 
           GET I1xixj(lambda,i,sigma,j) 
#
           DO b 
#
              Txibj(lambda,i,b,j)  =  Ixixj(lambda,i,sigma,j)*cb(sigma,b) 
              T1xibj(lambda,i,b,j) = I1xixj(lambda,i,sigma,j)*cb(sigma,b) 
#
              DO a 
#
                 Taibj(a,i,b,j)       =  Txibj(lambda,i,b,j)*ca(lambda,a)  
                 T1aibj(a,i,b,j)      = T1xibj(lambda,i,b,j)*ca(lambda,a)  
#
                 PUT Iaibj(a,i,b,j)  += Taibj(a,i,b,j) 
                 PUT I1aibj(a,i,b,j) += T1aibj(a,i,b,j) 
#
              ENDDO a 
#
           ENDDO b 
#
     ENDPARDO lambda, sigma, i, j 
     execute sip_barrier 
     delete  Ixixj 
     delete I1xixj 
#
#    Perform final contraction 
#    ------------------------- 
#
     PARDO b, b1, a 
#
           DO i 
           DO j 
#
              GET  Iaibj(a,i,b,j) 
              GET I1aibj(a,i,b,j) 
              GET L2old_ab(i,a,j,b1) 
              GET Tau_ab(a,i,b1,j) 
#
              Tbb(b,b1)         = Iaibj(a,i,b,j)*L2old_ab(i,a,j,b1) 
              T1bb(b,b1)        = I1aibj(a,i,b,j)*Tau_ab(a,i,b1,j) 
              Tbb(b,b1)        += T1bb(b,b1) 
              Tbb(b,b1)        *= -0.5 
              PUT Iab_bb(b,b1) += Tbb(b,b1) 
#
           ENDDO j 
           ENDDO i 
#
     ENDPARDO b, b1, a 
     execute sip_barrier 
     delete  Iaibj 
     delete I1aibj 
#
     ENDPROC IABBB2 
#    -------------- 
#
     PROC IABDIRECT 
#    -------------- 
          CALL IABAA1 
          CALL IABAA2 
          CALL IABBB1 
#         CALL IABBB2 --> Not needed, Computation done in IABAA2  
     ENDPROC IABDIRECT 
#    ----------------- 
#
# ----------------------------------------------------------------------------------------
#
         PROC UPDATE_DAI 
#        --------------- 
#
         PARDO a, i 
#
               GET        Dnewai_a(a,i) 
               GET        Doldai_a(a,i) 
               Tai(a,i) = Dnewai_a(a,i) 
               execute energy_denominator Tai(a,i) 
               Tai(a,i) -= Doldai_a(a,i) 
#
               if kiter == 1 
                  PUT e1ai(a,i) = tai(a,i) 
               endif 
#
               if kiter == 2 
                  PUT e2ai(a,i) = tai(a,i) 
               endif 
#
               if kiter == 3 
                  PUT e3ai(a,i) = tai(a,i) 
               endif 
#
               if kiter == 4 
                  PUT e4ai(a,i) = tai(a,i) 
               endif 
#
               if kiter >= 5 
                  PUT e5ai(a,i) = tai(a,i) 
               endif 
#
         ENDPARDO a, i 
#
         PARDO b, j 
#
               GET        Dnewai_b(b,j) 
               GET        Doldai_b(b,j) 
               Tbj(b,j) = Dnewai_b(b,j) 
               execute energy_denominator Tbj(b,j) 
               Tbj(b,j) -= Doldai_b(b,j) 
#
               if kiter == 1 
                  PUT e1bj(b,j) = tbj(b,j) 
               endif 
#
               if kiter == 2 
                  PUT e2bj(b,j) = tbj(b,j) 
               endif 
#
               if kiter == 3 
                  PUT e3bj(b,j) = tbj(b,j) 
               endif 
#
               if kiter == 4 
                  PUT e4bj(b,j) = tbj(b,j) 
               endif 
#
               if kiter >= 5 
                  PUT e5bj(b,j) = tbj(b,j) 
               endif 
#
         ENDPARDO b, j 
#
         ENDPROC UPDATE_DAI 
#        ------------------ 
#
# ----------------------------------------------------------------------------------------
# 
# ----------------------------------------------------------------------------------------
#
      PROC MOVE_DAI 
#     ------------- 
#
      PARDO a, i
#
            GET        Doldai_a(a,i)
            tai(a,i) = Doldai_a(a,i)
#
            if kiter == 1
               PUT d1ai(a,i) = tai(a,i)
            endif
#
            if kiter == 2
               PUT d2ai(a,i) = Tai(a,i)
            endif
#
            if kiter == 3
               PUT d3ai(a,i) = Tai(a,i)
            endif
#
            if kiter == 4
               PUT d4ai(a,i) = Tai(a,i)
            endif
#
            if kiter >= 5
               PUT d4ai(a,i) = Tai(a,i)
            endif
#
      ENDPARDO a, i
#
      PARDO b, j
#
            GET        Doldai_b(b,j)
            tbj(b,j) = Doldai_b(b,j)
#
            if kiter == 1
               PUT d1bj(b,j) = tbj(b,j)
            endif
#
            if kiter == 2
               PUT d2bj(b,j) = tbj(b,j)
            endif
#
            if kiter == 3
               PUT d3bj(b,j) = tbj(b,j)
            endif
#
            if kiter == 4
               PUT d4bj(b,j) = tbj(b,j)
            endif
#
            if kiter >= 5
               PUT d4bj(b,j) = tbj(b,j)
            endif
#
      ENDPARDO b, j
#
      ENDPROC MOVE_DAI 
#     ---------------- 
# 
# ----------------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
#
     PROC ZERO_DSCALAR
#    -----------------
#
#    The scalars used (overlap of error arrays and coeffients) in the DIIS
#    expansion are zero'd out.
#
#      Zero out scalars.
#      -----------------
#
       b11 = 0.0
       b12 = 0.0
       b13 = 0.0
       b14 = 0.0
       b15 = 0.0
       b16 = 0.0
       b17 = 0.0
       b18 = 0.0
       b19 = 0.0
       b110 = 0.0
#
       b22 = 0.0
       b23 = 0.0
       b24 = 0.0
       b25 = 0.0
       b26 = 0.0
       b27 = 0.0
       b28 = 0.0
       b29 = 0.0
       b210 = 0.0
#
       b33 = 0.0
       b34 = 0.0
       b35 = 0.0
       b36 = 0.0
       b37 = 0.0
       b38 = 0.0
       b39 = 0.0
       b310 = 0.0
#
       b44 = 0.0
       b45 = 0.0
       b46 = 0.0
       b47 = 0.0
       b48 = 0.0
       b49 = 0.0
       b410 = 0.0
#
       b55 = 0.0
       b56 = 0.0
       b57 = 0.0
       b58 = 0.0
       b59 = 0.0
       b510 = 0.0
#
       b66 = 0.0
       b67 = 0.0
       b68 = 0.0
       b69 = 0.0
       b610 = 0.0
#
       b77 = 0.0
       b78 = 0.0
       b79 = 0.0
       b710 = 0.0
#
       b88 = 0.0
       b89 = 0.0
       b810 = 0.0
#
       b99 = 0.0
       b910 = 0.0
#
       b1010 = 0.0
#
       Tb11 = 0.0
       Tb12 = 0.0
       Tb13 = 0.0
       Tb14 = 0.0
       Tb15 = 0.0
       Tb16 = 0.0
       Tb17 = 0.0
       Tb18 = 0.0
       Tb19 = 0.0
       Tb110 = 0.0
#
       Tb22 = 0.0
       Tb23 = 0.0
       Tb24 = 0.0
       Tb25 = 0.0
       Tb26 = 0.0
       Tb27 = 0.0
       Tb28 = 0.0
       Tb29 = 0.0
       Tb210 = 0.0
#
       Tb33 = 0.0
       Tb34 = 0.0
       Tb35 = 0.0
       Tb36 = 0.0
       Tb37 = 0.0
       Tb38 = 0.0
       Tb39 = 0.0
       Tb310 = 0.0
#
       Tb44 = 0.0
       Tb45 = 0.0
       Tb46 = 0.0
       Tb47 = 0.0
       Tb48 = 0.0
       Tb49 = 0.0
       Tb410 = 0.0
#
       Tb55 = 0.0
       Tb56 = 0.0
       Tb57 = 0.0
       Tb58 = 0.0
       Tb59 = 0.0
       Tb510 = 0.0
#
       Tb66 = 0.0
       Tb67 = 0.0
       Tb68 = 0.0
       Tb69 = 0.0
       Tb610 = 0.0
#
       Tb77 = 0.0
       Tb78 = 0.0
       Tb79 = 0.0
       Tb710 = 0.0
#
       Tb88 = 0.0
       Tb89 = 0.0
       Tb810 = 0.0
#
       Tb99 = 0.0
       Tb910 = 0.0
#
       Tb1010 = 0.0
#
       c1 = 0.0
       c2 = 0.0
       c3 = 0.0
       c4 = 0.0
       c5 = 0.0
       c6 = 0.0
       c7 = 0.0
       c8 = 0.0
       c9 = 0.0
       c10 = 0.0
#
       execute sip_barrier
#
     ENDPROC ZERO_DSCALAR
#    --------------------
#
# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
#
     PROC SETUP_DIIS
#    ---------------
#
#    Put the matrix elements of B into the sip 'B' matrix.
#
       execute diis_setup Tb11
       execute diis_setup Tb12
       execute diis_setup Tb13
       execute diis_setup Tb14
       execute diis_setup Tb15
       execute diis_setup Tb16
       execute diis_setup Tb17
       execute diis_setup Tb18
       execute diis_setup Tb19
       execute diis_setup Tb110

       execute diis_setup Tb22
       execute diis_setup Tb23
       execute diis_setup Tb24
       execute diis_setup Tb25
       execute diis_setup Tb26
       execute diis_setup Tb27
       execute diis_setup Tb28
       execute diis_setup Tb29
       execute diis_setup Tb210

       execute diis_setup Tb33
       execute diis_setup Tb34
       execute diis_setup Tb35
       execute diis_setup Tb36
       execute diis_setup Tb37
       execute diis_setup Tb38
       execute diis_setup Tb39
       execute diis_setup Tb310

       execute diis_setup Tb44
       execute diis_setup Tb45
       execute diis_setup Tb46
       execute diis_setup Tb47
       execute diis_setup Tb48
       execute diis_setup Tb49
       execute diis_setup Tb410

       execute diis_setup Tb55
       execute diis_setup Tb56
       execute diis_setup Tb57
       execute diis_setup Tb58
       execute diis_setup Tb59
       execute diis_setup Tb510

       execute diis_setup Tb66
       execute diis_setup Tb67
       execute diis_setup Tb68
       execute diis_setup Tb69
       execute diis_setup Tb610

       execute diis_setup Tb77
       execute diis_setup Tb78
       execute diis_setup Tb79
       execute diis_setup Tb710

       execute diis_setup Tb88
       execute diis_setup Tb89
       execute diis_setup Tb810

       execute diis_setup Tb99
       execute diis_setup Tb910

       execute diis_setup Tb1010
#
       execute sip_barrier
#
     ENDPROC SETUP_DIIS
#    ------------------
#
# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
#
     PROC DIIS1
#    ----------
#
#    Zero out scalars.
#    -----------------
#
     CALL ZERO_DSCALAR
#
     execute sip_barrier
#
#    Determine the 'B-matrix'.
#    -------------------------
#
#    Compute contributions due to Dai amplitudes.
#    --------------------------------------------
#
     PARDO a, i
#
#          REQUEST/GET amplitude data from all 2 previous iterations.
#          ----------------------------------------------------------
#
           GET e1ai(a,i)    # kiter-1 amplitudes
           GET e2ai(a,i)    # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,2
#             ---------
#
              etemp = e1ai(a,i)*e1ai(a,i)
              b11  += etemp
#
              etemp = e1ai(a,i)*e2ai(a,i)
              b12  += etemp
#
#             b1x x=2,2
#             ---------
#
              etemp = e2ai(a,i)*e2ai(a,i)
              b22  += etemp
#
     ENDPARDO a, i
#
#    Compute contributions due to Dbj amplitudes.
#    --------------------------------------------
#
     PARDO b, j
#
#          REQUEST/GET amplitude data from all 2 previous iterations.
#          ----------------------------------------------------------
#
           GET e1bj(b,j)    # kiter-1 amplitudes
           GET e2bj(b,j)    # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,2
#             ---------
#
              etemp = e1bj(b,j)*e1bj(b,j)
              b11  += etemp
#
              etemp = e1bj(b,j)*e2bj(b,j)
              b12  += etemp
#
#             b1x x=2,2
#             ---------
#
              etemp = e2bj(b,j)*e2bj(b,j)
              b22  += etemp
#
     ENDPARDO b, j
#
     execute sip_barrier
#
#    Collectively sum B-matrix elements.
#    -----------------------------------
#
     collective Tb11 += b11
     collective Tb12 += b12
     collective Tb22 += b22
#
#    Now the unique elements of the 'B-matrix' have been computed, the array is filled out
#    in the setup_diis.
#    --------------------------------------------------------------------------------------
#
#    Put the elements of the 'B-matrix', which have been computed as scalars into the
#    R-matrix.
#    --------------------------------------------------------------------------------
#
     CALL SETUP_DIIS
#
     execute compute_diis # --> New instruction
#
     c1 = Tb11
     c2 = Tb22
     execute print_scalar c1
     execute print_scalar c2
#
#    Done computing the c-vector.
#    ----------------------------
#
#    Form Dai_old.
#    -------------
#
     PARDO a, i
#
#          REQUEST/GET amplitude data from all 2 previous iterations.
#          ----------------------------------------------------------
#
           GET D0ai(a,i)     # kiter-2 amplitudes
           GET D1ai(a,i)     # kiter-1 amplitudes
#
           GET e1ai(a,i)     # kiter-1 amplitudes
           GET e2ai(a,i)     # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> tai_old.
#          --------------------------------------------------------
#
           t1ai(a,i)     = d0ai(a,i)
           t1ai(a,i)    += e1ai(a,i)
           t1ai(a,i)    *= c1
           tai(a,i)      = t1ai(a,i)
#
           t1ai(a,i)     = d1ai(a,i)
           t1ai(a,i)    += e2ai(a,i)
           t1ai(a,i)    *= c2
           tai(a,i)     += t1ai(a,i)
#
           PUT Doldai_a(a,i) = tai(a,i)
#
     ENDPARDO a, i
#
#    Form Dbj_old.
#    -------------
#
     PARDO b, j
#
#          REQUEST/GET amplitude data from all 2 previous iterations.
#          ----------------------------------------------------------
#
           GET D0bj(b,j)     # kiter-2 amplitudes
           GET D1bj(b,j)     # kiter-1 amplitudes
#
           GET e1bj(b,j)     # kiter-1 amplitudes
           GET e2bj(b,j)     # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> tbj_old.
#          --------------------------------------------------------
#
           t1bj(b,j)     = d0bj(b,j)
           t1bj(b,j)    += e1bj(b,j)
           t1bj(b,j)    *= c1
           tbj(b,j)      = t1bj(b,j)
#
           t1bj(b,j)     = d1bj(b,j)
           t1bj(b,j)    += e2bj(b,j)
           t1bj(b,j)    *= c2
           tbj(b,j)     += t1bj(b,j)
#
           PUT Doldai_b(b,j) = tbj(b,j)
#
     ENDPARDO b, j
#
     execute sip_barrier
#
     ENDPROC DIIS1
#    -------------
#
# ---------------------------------------------------------------------------------
#
     PROC DIIS2
#    ----------
#
#    Zero out scalars.
#    -----------------
#
     CALL ZERO_DSCALAR
#
     execute sip_barrier
#
#    Determine the 'B-matrix'.
#    -------------------------
#
#    Compute contributions due to dai amplitudes.
#    --------------------------------------------
#
     PARDO a, i
#
#          REQUEST/GET amplitude data from all 4 previous iterations.
#          ----------------------------------------------------------
#
           GET e1ai(a,i)    # kiter-2 amplitudes
           GET e2ai(a,i)    # kiter-1 amplitudes
           GET e3ai(a,i)    # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,3
#             ---------
#
              etemp = e1ai(a,i)*e1ai(a,i)
              b11  += etemp
#
              etemp = e1ai(a,i)*e2ai(a,i)
              b12  += etemp
#
              etemp = e1ai(a,i)*e3ai(a,i)
              b13  += etemp
#
#             b1x x=2,3
#             ---------
#
              etemp = e2ai(a,i)*e2ai(a,i)
              b22  += etemp
#
              etemp = e2ai(a,i)*e3ai(a,i)
              b23  += etemp
#
#             b1x x=3,3
#             ---------
#
              etemp = e3ai(a,i)*e3ai(a,i)
              b33  += etemp
#
     ENDPARDO a, i
#
#    Compute contributions due to dbj amplitudes.
#    --------------------------------------------
#
     PARDO b, j
#
#          REQUEST/GET amplitude data from all 3 previous iterations.
#          ----------------------------------------------------------
#
           GET e1bj(b,j)    # kiter-2 amplitudes
           GET e2bj(b,j)    # kiter-1 amplitudes
           GET e3bj(b,j)    # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,3
#             ---------
#
              etemp = e1bj(b,j)*e1bj(b,j)
              b11  += etemp
#
              etemp = e1bj(b,j)*e2bj(b,j)
              b12  += etemp
#
              etemp = e1bj(b,j)*e3bj(b,j)
              b13  += etemp
#
#             b1x x=2,3
#             ---------
#
              etemp = e2bj(b,j)*e2bj(b,j)
              b22  += etemp
#
              etemp = e2bj(b,j)*e3bj(b,j)
              b23  += etemp
#
#             b1x x=3,3
#             ---------
#
              etemp = e3bj(b,j)*e3bj(b,j)
              b33  += etemp
#
     ENDPARDO b, j
#
     execute sip_barrier
#
#    Collectively sum B-matrix elements.
#    -----------------------------------
#
     collective Tb11 += b11
     collective Tb12 += b12
     collective Tb13 += b13
     collective Tb22 += b22
     collective Tb23 += b23
     collective Tb33 += b33
#
#    Now the unique elements of the 'B-matrix' have been computed and the array filled out.
#    --------------------------------------------------------------------------------------
#
#    Put the elements of the 'B-matrix', which have been computed as scalars into the
#    R-matrix.
#    --------------------------------------------------------------------------------

     CALL SETUP_DIIS
#
     execute compute_diis # --> New instruction
#
     c1 = Tb11
     c2 = Tb22
     c3 = Tb33
     execute print_scalar c1
     execute print_scalar c2
     execute print_scalar c3
#
#    Done computing the c-vector.
#    ----------------------------
#
#    Form the updated amplitudes using the c-vector.
#    -----------------------#
#    Form Dai_old.
#    -------------
#
     PARDO a, i
#
#          REQUEST/GET amplitude data from all 3 previous iterations.
#          ----------------------------------------------------------
#
           GET D0ai(a,i)     # kiter-3 amplitudes
           GET D1ai(a,i)     # kiter-2 amplitudes
           GET D2ai(a,i)     # kiter-1 amplitudes
#
           GET e1ai(a,i)     # kiter-2 amplitudes
           GET e2ai(a,i)     # kiter-1 amplitudes
           GET e3ai(a,i)     # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> tai_old.
#          --------------------------------------------------------
#
           t1ai(a,i)     = d0ai(a,i)
           t1ai(a,i)    += e1ai(a,i)
           t1ai(a,i)    *= c1
           tai(a,i)      = t1ai(a,i)
#
           t1ai(a,i)     = d1ai(a,i)
           t1ai(a,i)    += e2ai(a,i)
           t1ai(a,i)    *= c2
           tai(a,i)     += t1ai(a,i)
#
           t1ai(a,i)     = d2ai(a,i)
           t1ai(a,i)    += e3ai(a,i)
           t1ai(a,i)    *= c3
           tai(a,i)     += t1ai(a,i)
#
           PUT Doldai_a(a,i) = tai(a,i)
#
     ENDPARDO a, i
#
#    Form tbj_old.
#    -------------
#
     PARDO b, j
#
#          REQUEST/GET amplitude data from all 3 previous iterations.
#          ----------------------------------------------------------
#
           GET D0bj(b,j)     # kiter-3 amplitudes
           GET D1bj(b,j)     # kiter-2 amplitudes
           GET D2bj(b,j)     # kiter-1 amplitudes
#
           GET e1bj(b,j)     # kiter-2 amplitudes
           GET e2bj(b,j)     # kiter-1 amplitudes
           GET e3bj(b,j)     # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> tbj_old.
#          --------------------------------------------------------
#
           t1bj(b,j)     = d0bj(b,j)
           t1bj(b,j)    += e1bj(b,j)
           t1bj(b,j)    *= c1
           tbj(b,j)      = t1bj(b,j)
#
           t1bj(b,j)     = d1bj(b,j)
           t1bj(b,j)    += e2bj(b,j)
           t1bj(b,j)    *= c2
           tbj(b,j)     += t1bj(b,j)
#
           t1bj(b,j)     = d2bj(b,j)
           t1bj(b,j)    += e3bj(b,j)
           t1bj(b,j)    *= c3
           tbj(b,j)     += t1bj(b,j)
#
           PUT Doldai_b(b,j) = tbj(b,j)
#
     ENDPARDO b, j
#
     execute sip_barrier
#
     ENDPROC DIIS2
#    -------------
#
# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
#
     PROC DIIS3
#    ----------
#
#    Zero out scalars.
#    -----------------
#
     CALL ZERO_DSCALAR
#
     execute sip_barrier
#
#    Determine the 'B-matrix'.
#    -------------------------
#
#    Compute contributions due to dai amplitudes.
#    --------------------------------------------
#
     PARDO a, i
#
#          REQUEST/GET amplitude data from all 4 previous iterations.
#          ----------------------------------------------------------
#
           GET e1ai(a,i)    # kiter-3 amplitudes
           GET e2ai(a,i)    # kiter-2 amplitudes
           GET e3ai(a,i)    # kiter-1 amplitudes
           GET e4ai(a,i)    # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,4
#             ---------
#
              etemp = e1ai(a,i)*e1ai(a,i)
              b11  += etemp
#
              etemp = e1ai(a,i)*e2ai(a,i)
              b12  += etemp
#
              etemp = e1ai(a,i)*e3ai(a,i)
              b13  += etemp
#
              etemp = e1ai(a,i)*e4ai(a,i)
              b14  += etemp
#
#             b1x x=2,4
#             ---------
#
              etemp = e2ai(a,i)*e2ai(a,i)
              b22  += etemp
#
              etemp = e2ai(a,i)*e3ai(a,i)
              b23  += etemp
#
              etemp = e2ai(a,i)*e4ai(a,i)
              b24  += etemp
#
#             b1x x=3,4
#             ---------
#
              etemp = e3ai(a,i)*e3ai(a,i)
              b33  += etemp
#
              etemp = e3ai(a,i)*e4ai(a,i)
              b34  += etemp
#
#             b1x x=4,4
#             ---------
#
              etemp = e4ai(a,i)*e4ai(a,i)
              b44  += etemp
#
     ENDPARDO a, i
#
#    Compute contributions due to dbj amplitudes.
#    --------------------------------------------
#
     PARDO b, j
#
#          REQUEST/GET amplitude data from all 3 previous iterations.
#          ----------------------------------------------------------
#
           GET e1bj(b,j)    # kiter-3 amplitudes
           GET e2bj(b,j)    # kiter-2 amplitudes
           GET e3bj(b,j)    # kiter-1 amplitudes
           GET e4bj(b,j)    # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,4
#             ---------
#
              etemp = e1bj(b,j)*e1bj(b,j)
              b11  += etemp
#
              etemp = e1bj(b,j)*e2bj(b,j)
              b12  += etemp
#
              etemp = e1bj(b,j)*e3bj(b,j)
              b13  += etemp
#
              etemp = e1bj(b,j)*e4bj(b,j)
              b14  += etemp
#
#             b1x x=2,4
#             ---------
#
              etemp = e2bj(b,j)*e2bj(b,j)
              b22  += etemp
#
              etemp = e2bj(b,j)*e3bj(b,j)
              b23  += etemp
#
              etemp = e2bj(b,j)*e4bj(b,j)
              b24  += etemp
#
#             b1x x=3,4
#             ---------
#
              etemp = e3bj(b,j)*e3bj(b,j)
              b33  += etemp
#
              etemp = e3bj(b,j)*e4bj(b,j)
              b34  += etemp
#
#             b1x x=4,4
#             ---------
#
              etemp = e4bj(b,j)*e4bj(b,j)
              b44  += etemp
#
     ENDPARDO b, j
#
     execute sip_barrier
#
#    Collectively sum B-matrix elements.
#    -----------------------------------
#
     collective Tb11 += b11
     collective Tb12 += b12
     collective Tb13 += b13
     collective Tb14 += b14
     collective Tb22 += b22
     collective Tb23 += b23
     collective Tb24 += b24
     collective Tb33 += b33
     collective Tb34 += b34
     collective Tb44 += b44
#
#    Now the unique elements of the 'B-matrix' have been computed and the array filled out.
#    --------------------------------------------------------------------------------------
#
#    Put the elements of the 'B-matrix', which have been computed as scalars into the
#    R-matrix.
#    --------------------------------------------------------------------------------

     CALL SETUP_DIIS
#
     execute compute_diis # --> New instruction
#
     c1 = Tb11
     c2 = Tb22
     c3 = Tb33
     c4 = Tb44
     execute print_scalar c1
     execute print_scalar c2
     execute print_scalar c3
     execute print_scalar c4
#
#    Done computing the c-vector.
#    ----------------------------
#
#    Form the updated amplitudes using the c-vector.
#    -----------------------#
#
#    Form Dai_old.
#    -------------
#
     PARDO a, i
#
#          REQUEST/GET amplitude data from all 3 previous iterations.
#          ----------------------------------------------------------
#
           GET D0ai(a,i)     # kiter-4 amplitudes
           GET D1ai(a,i)     # kiter-3 amplitudes
           GET D2ai(a,i)     # kiter-2 amplitudes
           GET D3ai(a,i)     # kiter-1 amplitudes
#
           GET e1ai(a,i)     # kiter-3 amplitudes
           GET e2ai(a,i)     # kiter-2 amplitudes
           GET e3ai(a,i)     # kiter-1 amplitudes
           GET e4ai(a,i)     # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> tai_old.
#          --------------------------------------------------------
#
           t1ai(a,i)     = d0ai(a,i)
           t1ai(a,i)    += e1ai(a,i)
           t1ai(a,i)    *= c1
           tai(a,i)      = t1ai(a,i)
#
           t1ai(a,i)     = d1ai(a,i)
           t1ai(a,i)    += e2ai(a,i)
           t1ai(a,i)    *= c2
           tai(a,i)     += t1ai(a,i)
#
           t1ai(a,i)     = d2ai(a,i)
           t1ai(a,i)    += e3ai(a,i)
           t1ai(a,i)    *= c3
           tai(a,i)     += t1ai(a,i)
#
           t1ai(a,i)     = d3ai(a,i)
           t1ai(a,i)    += e4ai(a,i)
           t1ai(a,i)    *= c4
           tai(a,i)     += t1ai(a,i)
#
           PUT Doldai_a(a,i) = tai(a,i)
#
     ENDPARDO a, i
#
#    Form tbj_old.
#    -------------
#
     PARDO b, j
#
#          REQUEST/GET amplitude data from all 3 previous iterations.
#          ----------------------------------------------------------
#
           GET D0bj(b,j)     # kiter-4 amplitudes
           GET D1bj(b,j)     # kiter-3 amplitudes
           GET D2bj(b,j)     # kiter-2 amplitudes
           GET D3bj(b,j)     # kiter-1 amplitudes
#
           GET e1bj(b,j)     # kiter-3 amplitudes
           GET e2bj(b,j)     # kiter-2 amplitudes
           GET e3bj(b,j)     # kiter-1 amplitudes
           GET e4bj(b,j)     # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> tbj_old.
#          --------------------------------------------------------
#
           t1bj(b,j)     = d0bj(b,j)
           t1bj(b,j)    += e1bj(b,j)
           t1bj(b,j)    *= c1
           tbj(b,j)      = t1bj(b,j)
#
           t1bj(b,j)     = d1bj(b,j)
           t1bj(b,j)    += e2bj(b,j)
           t1bj(b,j)    *= c2
           tbj(b,j)     += t1bj(b,j)
#
           t1bj(b,j)     = d2bj(b,j)
           t1bj(b,j)    += e3bj(b,j)
           t1bj(b,j)    *= c3
           tbj(b,j)     += t1bj(b,j)
#
           t1bj(b,j)     = d3bj(b,j)
           t1bj(b,j)    += e4bj(b,j)
           t1bj(b,j)    *= c4
           tbj(b,j)     += t1bj(b,j)
#
           PUT Doldai_b(b,j) = tbj(b,j)
#
     ENDPARDO b, j
#
     execute sip_barrier
#
     ENDPROC DIIS3
#    -------------
#
# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
#
     PROC DIIS4
#    ----------
#
#    Zero out scalars.
#    -----------------
#
     CALL ZERO_DSCALAR
#
     execute sip_barrier
#
#    Determine the 'B-matrix'.
#    -------------------------
#
#    Compute contributions due to dai amplitudes.
#    --------------------------------------------
#
     PARDO a, i
#
#          REQUEST/GET amplitude data from all 4 previous iterations.
#          ----------------------------------------------------------
#
           GET e1ai(a,i)    # kiter-4 amplitudes
           GET e2ai(a,i)    # kiter-3 amplitudes
           GET e3ai(a,i)    # kiter-2 amplitudes
           GET e4ai(a,i)    # kiter-1 amplitudes
           GET e5ai(a,i)    # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,5
#             ---------
#
              etemp = e1ai(a,i)*e1ai(a,i)
              b11  += etemp
#
              etemp = e1ai(a,i)*e2ai(a,i)
              b12  += etemp
#
              etemp = e1ai(a,i)*e3ai(a,i)
              b13  += etemp
#
              etemp = e1ai(a,i)*e4ai(a,i)
              b14  += etemp
#
              etemp = e1ai(a,i)*e5ai(a,i)
              b15  += etemp
#
#             b1x x=2,5
#             ---------
#
              etemp = e2ai(a,i)*e2ai(a,i)
              b22  += etemp
#
              etemp = e2ai(a,i)*e3ai(a,i)
              b23  += etemp
#
              etemp = e2ai(a,i)*e4ai(a,i)
              b24  += etemp
#
              etemp = e2ai(a,i)*e5ai(a,i)
              b25  += etemp
#
#             b1x x=3,5
#             ---------
#
              etemp = e3ai(a,i)*e3ai(a,i)
              b33  += etemp
#
              etemp = e3ai(a,i)*e4ai(a,i)
              b34  += etemp
#
              etemp = e3ai(a,i)*e5ai(a,i)
              b35  += etemp
#
#             b1x x=4,5
#             ---------
#
              etemp = e4ai(a,i)*e4ai(a,i)
              b44  += etemp
#
              etemp = e4ai(a,i)*e5ai(a,i)
              b45  += etemp
#
#             b1x x=5,5
#             ---------
#
              etemp = e5ai(a,i)*e5ai(a,i)
              b55  += etemp
#
     ENDPARDO a, i
#
#    Compute contributions due to dbj amplitudes.
#    --------------------------------------------
#
     PARDO b, j
#
#          REQUEST/GET amplitude data from all 3 previous iterations.
#          ----------------------------------------------------------
#
           GET e1bj(b,j)    # kiter-4 amplitudes
           GET e2bj(b,j)    # kiter-3 amplitudes
           GET e3bj(b,j)    # kiter-2 amplitudes
           GET e4bj(b,j)    # kiter-1 amplitudes
           GET e5bj(b,j)    # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,5
#             ---------
#
              etemp = e1bj(b,j)*e1bj(b,j)
              b11  += etemp
#
              etemp = e1bj(b,j)*e2bj(b,j)
              b12  += etemp
#
              etemp = e1bj(b,j)*e3bj(b,j)
              b13  += etemp
#
              etemp = e1bj(b,j)*e4bj(b,j)
              b14  += etemp
#
              etemp = e1bj(b,j)*e5bj(b,j)
              b15  += etemp
#
#             b1x x=2,5
#             ---------
#
              etemp = e2bj(b,j)*e2bj(b,j)
              b22  += etemp
#
              etemp = e2bj(b,j)*e3bj(b,j)
              b23  += etemp
#
              etemp = e2bj(b,j)*e4bj(b,j)
              b24  += etemp
#
              etemp = e2bj(b,j)*e5bj(b,j)
              b25  += etemp
#
#             b1x x=3,5
#             ---------
#
              etemp = e3bj(b,j)*e3bj(b,j)
              b33  += etemp
#
              etemp = e3bj(b,j)*e4bj(b,j)
              b34  += etemp
#
              etemp = e3bj(b,j)*e5bj(b,j)
              b35  += etemp
#
#             b1x x=4,5
#             ---------
#
              etemp = e4bj(b,j)*e4bj(b,j)
              b44  += etemp
#
              etemp = e4bj(b,j)*e5bj(b,j)
              b45  += etemp
#
#             b1x x=5,5
#             ---------
#
              etemp = e5bj(b,j)*e5bj(b,j)
              b55  += etemp
#
     ENDPARDO b, j
#
     execute sip_barrier
#
#    Collectively sum B-matrix elements.
#    -----------------------------------
#
     collective Tb11 += b11
     collective Tb12 += b12
     collective Tb13 += b13
     collective Tb14 += b14
     collective Tb15 += b15
     collective Tb22 += b22
     collective Tb23 += b23
     collective Tb24 += b24
     collective Tb25 += b25
     collective Tb33 += b33
     collective Tb34 += b34
     collective Tb35 += b35
     collective Tb44 += b44
     collective Tb45 += b45
     collective Tb55 += b55
#
#    Now the unique elements of the 'B-matrix' have been computed and the array filled out.
#    --------------------------------------------------------------------------------------
#
#    Put the elements of the 'B-matrix', which have been computed as scalars into the
#    R-matrix.
#    --------------------------------------------------------------------------------

     CALL SETUP_DIIS
#
     execute compute_diis # --> New instruction
#
     c1 = Tb11
     c2 = Tb22
     c3 = Tb33
     c4 = Tb44
     c5 = Tb55
     execute print_scalar c1
     execute print_scalar c2
     execute print_scalar c3
     execute print_scalar c4
     execute print_scalar c5
#
#    Done computing the c-vector.
#    ----------------------------
#
#    Form the updated amplitudes using the c-vector.
#    -----------------------#
#    Form Dai_old.
#    -------------
#
     PARDO a, i
#
#          REQUEST/GET amplitude data from all 3 previous iterations.
#          ----------------------------------------------------------
#
           GET D0ai(a,i)     # kiter-5 amplitudes
           GET D1ai(a,i)     # kiter-4 amplitudes
           GET D2ai(a,i)     # kiter-3 amplitudes
           GET D3ai(a,i)     # kiter-2 amplitudes
           GET D4ai(a,i)     # kiter-1 amplitudes
#
           GET e1ai(a,i)     # kiter-4 amplitudes
           GET e2ai(a,i)     # kiter-3 amplitudes
           GET e3ai(a,i)     # kiter-2 amplitudes
           GET e4ai(a,i)     # kiter-1 amplitudes
           GET e5ai(a,i)     # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> tai_old.
#          --------------------------------------------------------
#
           t1ai(a,i)     = d0ai(a,i)
           t1ai(a,i)    += e1ai(a,i)
           t1ai(a,i)    *= c1
           tai(a,i)      = t1ai(a,i)
#
           t1ai(a,i)     = d1ai(a,i)
           t1ai(a,i)    += e2ai(a,i)
           t1ai(a,i)    *= c2
           tai(a,i)     += t1ai(a,i)
#
           t1ai(a,i)     = d2ai(a,i)
           t1ai(a,i)    += e3ai(a,i)
           t1ai(a,i)    *= c3
           tai(a,i)     += t1ai(a,i)
#
           t1ai(a,i)     = d3ai(a,i)
           t1ai(a,i)    += e4ai(a,i)
           t1ai(a,i)    *= c4
           tai(a,i)     += t1ai(a,i)
#
           t1ai(a,i)     = d4ai(a,i)
           t1ai(a,i)    += e5ai(a,i)
           t1ai(a,i)    *= c5
           tai(a,i)     += t1ai(a,i)
#
           PUT Doldai_a(a,i) = tai(a,i)
#
     ENDPARDO a, i
#
#    Form tbj_old.
#    -------------
#
     PARDO b, j
#
#          REQUEST/GET amplitude data from all 3 previous iterations.
#          ----------------------------------------------------------
#
           GET D0bj(b,j)     # kiter-5 amplitudes
           GET D1bj(b,j)     # kiter-4 amplitudes
           GET D2bj(b,j)     # kiter-3 amplitudes
           GET D3bj(b,j)     # kiter-2 amplitudes
           GET D4bj(b,j)     # kiter-1 amplitudes
#
           GET e1bj(b,j)     # kiter-4 amplitudes
           GET e2bj(b,j)     # kiter-3 amplitudes
           GET e3bj(b,j)     # kiter-2 amplitudes
           GET e4bj(b,j)     # kiter-1 amplitudes
           GET e5bj(b,j)     # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> tbj_old.
#          --------------------------------------------------------
#
           t1bj(b,j)     = d0bj(b,j)
           t1bj(b,j)    += e1bj(b,j)
           t1bj(b,j)    *= c1
           tbj(b,j)      = t1bj(b,j)
#
           t1bj(b,j)     = d1bj(b,j)
           t1bj(b,j)    += e2bj(b,j)
           t1bj(b,j)    *= c2
           tbj(b,j)     += t1bj(b,j)
#
           t1bj(b,j)     = d2bj(b,j)
           t1bj(b,j)    += e3bj(b,j)
           t1bj(b,j)    *= c3
           tbj(b,j)     += t1bj(b,j)
#
           t1bj(b,j)     = d3bj(b,j)
           t1bj(b,j)    += e4bj(b,j)
           t1bj(b,j)    *= c4
           tbj(b,j)     += t1bj(b,j)
#
           t1bj(b,j)     = d4bj(b,j)
           t1bj(b,j)    += e5bj(b,j)
           t1bj(b,j)    *= c5
           tbj(b,j)     += t1bj(b,j)
#
           PUT Doldai_b(b,j) = tbj(b,j)
#
     ENDPARDO b, j
#
     execute sip_barrier
#
     ENDPROC DIIS4
#    -------------
#
# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
#
     PROC MOVE4
#    ----------
#
#    0 --> 1
#    ---------------------------------------------------
#
     PARDO a, i
           GET d1ai(a,i)
           PUT d0ai(a,i) = d1ai(a,i)
     ENDPARDO a, i
#
     PARDO b, j
           GET d1bj(b,j)
           PUT d0bj(b,j) = d1bj(b,j)
     ENDPARDO b, j
#
     execute sip_barrier 
#
#    2 --> 1
#    ---------------------------------------------------
#
     PARDO a, i
           GET e2ai(a,i)
           PUT e1ai(a,i) = e2ai(a,i)
     ENDPARDO a, i
#
     PARDO b, j
           GET e2bj(b,j)
           PUT e1bj(b,j) = e2bj(b,j)
     ENDPARDO b, j
#
     PARDO a, i
           GET d2ai(a,i)
           PUT d1ai(a,i) = d2ai(a,i)
     ENDPARDO a, i
#
     PARDO b, j
           GET d2bj(b,j)
           PUT d1bj(b,j) = d2bj(b,j)
     ENDPARDO b, j
#
     execute sip_barrier
#
#    3 --> 2
#    ---------------------------------------------------
#
     PARDO a, i
           GET e3ai(a,i)
           PUT e2ai(a,i) = e3ai(a,i)
     ENDPARDO a, i
#
     PARDO b, j
           GET e3bj(b,j)
           PUT e2bj(b,j) = e3bj(b,j)
     ENDPARDO b, j
#
     PARDO a, i
           GET d3ai(a,i)
           PUT d2ai(a,i) = d3ai(a,i)
     ENDPARDO a, i
#
     PARDO b, j
           GET d3bj(b,j)
           PUT d2bj(b,j) = d3bj(b,j)
     ENDPARDO b, j
#
     execute sip_barrier
#
#    4 --> 3
#    ---------------------------------------------------
#
     PARDO a, i
           GET e4ai(a,i)
           PUT e3ai(a,i) = e4ai(a,i)
     ENDPARDO a, i
#
     PARDO b, j
           GET e4bj(b,j)
           PUT e3bj(b,j) = e4bj(b,j)
     ENDPARDO b, j
#
     PARDO a, i
           GET d4ai(a,i)
           PUT d3ai(a,i) = d4ai(a,i)
     ENDPARDO a, i
#
     PARDO b, j
           GET d4bj(b,j)
           PUT d3bj(b,j) = d4bj(b,j)
     ENDPARDO b, j
#
     execute sip_barrier
#
#    5 --> 4
#    ---------------------------------------------------
#
     PARDO a, i
           GET e5ai(a,i)
           PUT e4ai(a,i) = e5ai(a,i)
     ENDPARDO a, i
#
     PARDO b, j
           GET e5bj(b,j)
           PUT e4bj(b,j) = e5bj(b,j)
     ENDPARDO b, j
#
     PARDO a, i
           GET doldai_a(a,i)
           PUT d4ai(a,i) = doldai_a(a,i)
     ENDPARDO a, i
#
     PARDO b, j
           GET doldai_b(b,j)  
           PUT d4bj(b,j) = doldai_b(b,j)
     ENDPARDO b, j
#
     execute sip_barrier
#
     ENDPROC MOVE4
#    -------------
#
# ---------------------------------------------------------------------------------
#
# ----------------------------------------------------------------------------------------
#
# This procedure calculates the virtual-occupied block of the density 
# matrix iteratively. The equation for the AA spin programmed is:
#
# D(a,i)*(e_i-e_a) = X(a,i) - D(c,k)*[ V^{ca}_{ki} - V^{ca}_{ik}  
#                                    + V^{ci}_{ka} - V^{ci}_{ak} ] 
#                           - D(C,K)*[ V^{Ca}_{Ki} + V^{Ci}_{Ka} ] 
#
# ----------------------------------------------------------------------------------------
#
      PROC DAI
#     -------- 
#
# First get initial guess 
# ----------------------- 
#
      create Doldai_a 
      create Dnewai_a 
      create Doldai_b 
      create Dnewai_b 
#
      CREATE D0ai
      CREATE D1ai
      CREATE D2ai
      CREATE D3ai
      CREATE D4ai
#
      CREATE D0bj
      CREATE D1bj
      CREATE D2bj
      CREATE D3bj
      CREATE D4bj
#
      CREATE e1ai
      CREATE e2ai
      CREATE e3ai
      CREATE e4ai
      CREATE e5ai
#
      CREATE e1bj
      CREATE e2bj
      CREATE e3bj
      CREATE e4bj
      CREATE e5bj
      ecrit  = cc_conv # Threshold  
#
# Set Xai_aa and Xai_bb  
# ---------------------  
#
      PARDO a, i  
#
            GET Iai_aa(a,i) 
            GET Iia_aa(i,a) 
#
            Tai(a,i)        = Iia_aa(i,a) 
            Tai(a,i)       += Iai_aa(a,i) 
            PUT Xai_aa(a,i) = Tai(a,i)  
#
      ENDPARDO a, i  
#
      PARDO b, j  
#
            GET Iai_bb(b,j) 
            GET Iia_bb(j,b) 
#
            Tbj(b,j)        = Iia_bb(j,b) 
            Tbj(b,j)       += Iai_bb(b,j) 
            PUT Xai_bb(b,j) = Tbj(b,j)  
#
      ENDPARDO b, j  
      execute sip_barrier 
#
# DONE Set Xai_aa and Xai_bb  
# --------------------------  
#
      esum = 0.0 
      eold = 0.0 
      PARDO a, i 
#
            GET Xai_aa(a,i) 
            Tai(a,i) = Xai_aa(a,i) 
            execute energy_denominator Tai(a,i) 
            PUT Doldai_a(a,i) = Tai(a,i) 
            PUT D0ai(a,i) = Tai(a,i) 
#
      ENDPARDO a, i 
#
      PARDO b, j 
#
            GET Xai_bb(b,j) 
            Tbj(b,j) = Xai_bb(b,j) 
            execute energy_denominator Tbj(b,j) 
            PUT Doldai_b(b,j) = Tbj(b,j) 
            PUT D0bj(b,j) = Tbj(b,j) 
#
      ENDPARDO b, j 
      execute sip_barrier 
#
# Start iterations 
# ---------------- 
#
      DO KITER  
#
#        AA-spin first 
#        ------------- 
#
         PARDO a, i 
#
               GET Xai_aa(a,i) 
               Tai(a,i)           = Xai_aa(a,i) 
               PUT Dnewai_a(a,i) += Tai(a,i) 
#
         ENDPARDO a, i 
#
         PARDO a, i, a1, i1 
#
               GET Doldai_a(a1,i1) 
               GET VSpipi(a1,i1,a,i) # + 
               GET Viaai(i1,a1,a,i) # + 
               GET Vaaii(a,a1,i1,i) # - 
#
               Tpppp(a,i,a1,i1)   = VSpipi(a1,i1,a,i) 
               T2pppp(a,i,a1,i1)  = Viaai(i1,a1,a,i)   
               T3pppp(a,i,a1,i1)  = Vaaii(a,a1,i1,i)  
#
               Tpppp(a,i,a1,i1)  += T2pppp(a,i,a1,i1) 
               Tpppp(a,i,a1,i1)  -= T3pppp(a,i,a1,i1) 
#
               Tai(a,i)           = Tpppp(a,i,a1,i1)*Doldai_a(a1,i1) 
               PUT Dnewai_a(a,i) += Tai(a,i) 
#
         ENDPARDO a, i, a1, i1 
#
         PARDO a, i, b, j 
#
               GET Doldai_b(b,j) 
               GET Vpiqj(a,i,b,j) # + 
               GET Viabj(i,a,b,j) # + 
#
               Tppqq(a,i,b,j)     = Vpiqj(a,i,b,j)  
               T2ppqq(a,i,b,j)    = Viabj(i,a,b,j)  
               Tppqq(a,i,b,j)    += T2ppqq(a,i,b,j) 
#
               Tai(a,i)           = Tppqq(a,i,b,j)*Doldai_b(b,j) 
               PUT Dnewai_a(a,i) += Tai(a,i) 
#
         ENDPARDO a, i, b, j 
#
#        DONE AA-spin 
#        ------------ 
#
#        BB-spin next 
#        ------------ 
#
         PARDO b, j 
#
               GET Xai_bb(b,j) 
               Tbj(b,j)           = Xai_bb(b,j) 
               PUT Dnewai_b(b,j) += Tbj(b,j) 
#
         ENDPARDO b, j 
#
         PARDO b, j, b1, j1 
#
               GET Doldai_b(b1,j1) 
               GET VSqjqj(b1,j1,b,j) # + 
               GET Vjbbj(j1,b1,b,j) # + 
               GET Vbbjj(b,b1,j1,j) # - 
#
               Tqqqq(b,j,b1,j1)   = VSqjqj(b1,j1,b,j) 
               T2qqqq(b,j,b1,j1)  = Vjbbj(j1,b1,b,j)   
               T3qqqq(b,j,b1,j1)  = Vbbjj(b,b1,j1,j)  
               Tqqqq(b,j,b1,j1)  += T2qqqq(b,j,b1,j1) 
               Tqqqq(b,j,b1,j1)  -= T3qqqq(b,j,b1,j1) 
#
               Tbj(b,j)           = Tqqqq(b,j,b1,j1)*Doldai_b(b1,j1) 
               PUT Dnewai_b(b,j) += Tbj(b,j) 
#
         ENDPARDO b, j, b1, j1 
#
         PARDO a, i, b, j 
#
               GET Doldai_a(a,i) 
               GET Vpiqj(a,i,b,j) # + 
               GET Viabj(i,a,b,j) # + 
#
               Tqqpp(b,j,a,i)     = Vpiqj(a,i,b,j)  
               T2qqpp(b,j,a,i)    = Viabj(i,a,b,j)   
               Tqqpp(b,j,a,i)    += T2qqpp(b,j,a,i) 
#
               Tbj(b,j)           = Tqqpp(b,j,a,i)*Doldai_a(a,i) 
               PUT Dnewai_b(b,j) += Tbj(b,j) 
#
         ENDPARDO a, i, b, j 
#
#        DONE BB-spin 
#        ------------ 
         execute sip_barrier 
#
#        Update error vector for diis
#        ----------------------------
#
         CALL UPDATE_DAI 
         execute sip_barrier 
#
#        Compute 'Energy' 
#        ---------------- 
#
         esum = 0.0 
         PARDO a, i 
#
               GET Dnewai_a(a,i) 
               etemp = Dnewai_a(a,i)*Dnewai_a(a,i)  
               esum += etemp 
               Tai(a,i) = Dnewai_a(a,i) 
               execute energy_denominator Tai(a,i) 
               PUT Doldai_a(a,i) = Tai(a,i) 
#
         ENDPARDO a, i 
#
         PARDO b, j 
#
               GET Dnewai_b(b,j)  
               etemp = Dnewai_b(b,j)*Dnewai_b(b,j) 
               esum += etemp 
               Tbj(b,j) = Dnewai_b(b,j) 
               execute energy_denominator Tbj(b,j) 
               PUT Doldai_b(b,j) = Tbj(b,j) 
#
         ENDPARDO b, j 
         execute sip_barrier 
         collective enew += esum 
         execute print_scalar enew 
         execute print_scalar eold 
#
#        Check on convergence
#        --------------------
#
         IF enew < eold
            ediff = eold - enew 
            IF ediff < ecrit
               exit # kiter
            ENDIF
         ENDIF
#
         IF enew > eold
            ediff = enew - eold
            IF ediff < ecrit
               exit # kiter
            ENDIF
         ENDIF
#
#        Reset eold --> enew
#        -------------------
#
         eold = enew 
#
         if kiter == 2
#
#           Get uptated amplitudes based on DIIS procedure.
#           -----------------------------------------------
#
            CALL DIIS1
#
         endif # kiter == 2
#
         if kiter == 3
#
#           Get uptated amplitudes based on DIIS procedure.
#           -----------------------------------------------
#
            CALL DIIS2
#
         endif # kiter == 3
#
         if kiter == 4
#
#           Get uptated amplitudes based on DIIS procedure.
#           -----------------------------------------------
#
            CALL DIIS3
#
         endif # kiter == 4
#
         if kiter >= 5
#
#           Get uptated amplitudes based on DIIS procedure.
#           -----------------------------------------------
#
            CALL DIIS4
            CALL MOVE4
#
         endif # kiter == 5
#
         CALL MOVE_DAI 
#
#        Zero out Dai 
#        ------------ 
# 
         PARDO a, i 
#
               Tai(a,i) = 0.0 
               PUT Dnewai_a(a,i) = Tai(a,i) 
#
         ENDPARDO a, i 
# 
         PARDO b, j 
#
               Tbj(b,j) = 0.0 
               PUT Dnewai_b(b,j) = Tbj(b,j) 
#
         ENDPARDO b, j 
         execute sip_barrier 
#
      ENDDO KITER  
      execute sip_barrier 
#
      ENDPROC DAI
#     ----------- 
#
# -----------------------------------------------------------------------------
#
      PROC I1TRANS
#     ------------
#
# -----------------------------------------------------------------------------
#
#     Transform Iai_aa and Iia_aa
#     ---------------------------
      PARDO a, i
#
            GET Iia_aa(i,a)
#
            DO mu
#
               Jxi(mu,i)  = ca(mu,a)*Iia_aa(i,a)
#
               DO nu
#
                  Ixx(mu,nu) = Jxi(mu,i)*ca(nu,i)
                  I1xx(nu,mu) = Ixx(mu,nu)
                  PUT Ipq(mu,nu) += Ixx(mu,nu)
                  PUT Ipq(nu,mu) += I1xx(nu,mu)
#
               ENDDO nu
#
            ENDDO mu
#
      ENDPARDO a, i
#
#     Transform Iai_bb and Iia_bb
#     ---------------------------
      PARDO b, j
#
            GET Iia_bb(j,b)
#
            DO mu
#
               Jxj(mu,j)  = cb(mu,b)*Iia_bb(j,b)
#
               DO nu
#
                  Ixx(mu,nu) = Jxj(mu,j)*cb(nu,j)
                  I1xx(nu,mu) = Ixx(mu,nu)
                  PUT Ipq(mu,nu) += Ixx(mu,nu)
                  PUT Ipq(nu,mu) += I1xx(nu,mu)
#
               ENDDO nu
#
            ENDDO mu
#
      ENDPARDO b, j
#
#     Transform Iaa_aa
#     ----------------
      PARDO a, a1
#
            GET Iab_aa(a,a1)
#
            DO mu
#
               Ixa(mu,a1)  = ca(mu,a)*Iab_aa(a,a1)
#
               DO nu
#
                  Ixx(mu,nu) = Ixa(mu,a1)*ca(nu,a1)
                  PUT Ipq(mu,nu) += Ixx(mu,nu)
#
               ENDDO nu
#
            ENDDO mu
#
      ENDPARDO a, a1
#
#     Transform Iaa_bb
#     ----------------
      PARDO b, b1
#
            GET Iab_bb(b,b1)
#
            DO mu
#
               Ixb(mu,b1)  = cb(mu,b)*Iab_bb(b,b1)
#
               DO nu
#
                  Ixx(mu,nu) = Ixb(mu,b1)*cb(nu,b1)
                  PUT Ipq(mu,nu) += Ixx(mu,nu)
#
               ENDDO nu
#
            ENDDO mu
#
      ENDPARDO b, b1
#
#     Transform Iij_aa
#     ----------------
      PARDO i, i1
#
            GET Iij_aa(i,i1)
#
            DO mu
#
               Jxi(mu,i1)  = ca(mu,i)*Iij_aa(i,i1)
#
               DO nu
#
                  Ixx(mu,nu) = Jxi(mu,i1)*ca(nu,i1)
                  PUT Ipq(mu,nu) += Ixx(mu,nu)
#
               ENDDO nu
#
            ENDDO mu
#
      ENDPARDO i, i1
#
#     Transform Iij_bb
#     ----------------
      PARDO j, j1
#
            GET Iij_bb(j,j1)
#
            DO mu
#
               Jxj(mu,j1)  = cb(mu,j)*Iij_bb(j,j1)
#
               DO nu
#
                  Ixx(mu,nu) = Jxj(mu,j1)*cb(nu,j1)
                  PUT Ipq(mu,nu) += Ixx(mu,nu)
#
               ENDDO nu
#
            ENDDO mu
#
      ENDPARDO j, j1
      execute sip_barrier
#
# Finally contract with the derivative integrals
# ----------------------------------------------
#
      PARDO mu, nu
            GET Ipq(mu,nu)
            Tpq(mu,nu)  = Ipq(mu,nu)
            EXECUTE SCONT1 Tpq(mu,nu)
      ENDPARDO mu, nu
#
# -----------------------------------------------------------------------------
#
      ENDPROC I1TRANS
#     ---------------
#
# -----------------------------------------------------------------------------
#
# -----------------------------------------------------------------------------
#
      PROC D1TRANS
#     ------------
#
# -----------------------------------------------------------------------------
#
#     Transform Dai_aa
#     ----------------
      PARDO a, i
#
            GET Doldai_a(a,i)
#
            DO mu
#
               Jxi(mu,i)  = Doldai_a(a,i)*ca(mu,a)
#
               DO nu
#
                  Ixx(mu,nu)      = Jxi(mu,i)*ca(nu,i)
                  I1xx(nu,mu)     = Ixx(mu,nu)
                  PUT Dpq(mu,nu) += Ixx(mu,nu)
                  PUT Dpq(nu,mu) += I1xx(nu,mu)
#
               ENDDO nu
#
            ENDDO mu
#
      ENDPARDO a, i
#
#     Transform Dai_bb
#     ----------------
      PARDO b, j
#
            GET Doldai_b(b,j)
#
            DO mu
#
               Jxj(mu,j)  = Doldai_b(b,j)*cb(mu,b)
#
               DO nu
#
                  Ixx(mu,nu) = Jxj(mu,j)*cb(nu,j)
                  I1xx(nu,mu)     = Ixx(mu,nu)
                  PUT Dpq(mu,nu) += Ixx(mu,nu)
                  PUT Dpq(nu,mu) += I1xx(nu,mu)
#
               ENDDO nu
#
            ENDDO mu
#
      ENDPARDO b, j
#
#     Transform Dab_a
#     ---------------
      PARDO a, a1
#
            GET Dab_a(a,a1)
#
            DO mu
#
               Ixa(mu,a1)  = Dab_a(a,a1)*ca(mu,a)
#
               DO nu
#
                  Ixx(mu,nu) = Ixa(mu,a1)*ca(nu,a1)
                  PUT Dpq(mu,nu) += Ixx(mu,nu)
#
               ENDDO nu
#
            ENDDO mu
#
      ENDPARDO a, a1
#
#     Transform Dab_b
#     ----------------
      PARDO b, b1
#
            GET Dab_b(b,b1)
#
            DO mu
#
               Ixb(mu,b1)  = Dab_b(b,b1)*cb(mu,b)
#
               DO nu
#
                  Ixx(mu,nu) = Ixb(mu,b1)*cb(nu,b1)
                  PUT Dpq(mu,nu) += Ixx(mu,nu)
#
               ENDDO nu
#
            ENDDO mu
#
      ENDPARDO b, b1
#
#     Transform Dij_aa
#     ----------------
      PARDO i, i1
#
            GET Dij_a(i,i1)
#
            DO mu
#
               Jxi(mu,i1)  = Dij_a(i,i1)*ca(mu,i)
#
               DO nu
#
                  Ixx(mu,nu) = Jxi(mu,i1)*ca(nu,i1)
                  PUT Dpq(mu,nu) += Ixx(mu,nu)
#
               ENDDO nu
#
            ENDDO mu
#
      ENDPARDO i, i1
#
#     Transform Dij_bb
#     ----------------
      PARDO j, j1
#
            GET Dij_b(j,j1)
#
            DO mu
#
               Jxj(mu,j1)  = Dij_b(j,j1)*cb(mu,j)
#
               DO nu
#
                  Ixx(mu,nu) = Jxj(mu,j1)*cb(nu,j1)
                  PUT Dpq(mu,nu) += Ixx(mu,nu)
#
               ENDDO nu
#
            ENDDO mu
#
      ENDPARDO j, j1
      execute sip_barrier
#
# Finally contract with the derivative integrals
# ----------------------------------------------
#
      PARDO mu, nu
            GET Dpq(mu,nu)
            GET DHF(mu,nu)
            Tpq(mu,nu)  = Dpq(mu,nu)
            Tpq(mu,nu) += DHF(mu,nu)
            EXECUTE HCONT1 Tpq(mu,nu)
      ENDPARDO mu, nu
#
# -----------------------------------------------------------------------------
#
      ENDPROC D1TRANS
#     ---------------
#
# -----------------------------------------------------------------------------
#
# -----------------------------------------------------------------------------
#
      PROC HFDENS
#     -----------
#
      PARDO mu, nu, i
#
            Txi(nu,i)       = ca(nu,i)
            Tpq(mu,nu)      = ca(mu,i)*Txi(nu,i)
            PUT Dhf(mu,nu) += Tpq(mu,nu)
#
      ENDPARDO mu, nu, i
#
      PARDO mu, nu, j
#
            Txj(nu,j)       = cb(nu,j)
            Tpq(mu,nu)      = cb(mu,j)*Txj(nu,j)
            PUT Dhf(mu,nu) += Tpq(mu,nu)
#
      ENDPARDO mu, nu, j
#
      ENDPROC HFDENS
#     --------------
#
      PROC WHFDENS
#     ------------
#
      PARDO mu, nu, i
#
            Txi(nu,i) = 0.0
#
            DO i1
#
               IF i1 == i 
#
               T1xi(nu,i) = ca(nu,i1)*fock_a(i,i1)
               Txi(nu,i) -= T1xi(nu,i)
#
               ENDIF # i1 == i 
#
            ENDDO i1
#
            Tpq(mu,nu)      = ca(mu,i)*Txi(nu,i)
            PUT Dhfa(mu,nu) += Tpq(mu,nu)
#
      ENDPARDO mu, nu, i
#
      PARDO mu, nu, j
#
            Txj(nu,j) = 0.0
#
            DO j1
#
               IF j1 == j 
#
               T1xj(nu,j) = cb(nu,j1)*fock_b(j,j1)
               Txj(nu,j) -= T1xj(nu,j)
#
               ENDIF # j1 == j 
#
            ENDDO j1
#
            Tpq(mu,nu)      = cb(mu,j)*Txj(nu,j)
            PUT Dhfb(mu,nu) += Tpq(mu,nu)
#
      ENDPARDO mu, nu, j
      execute sip_barrier
#
      ENDPROC WHFDENS
#     --------------
# -----------------------------------------------------------------------------
#
#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ 
#
      PROC S2IIJ 
#
           DO i 
           DO i1 
              GET Iij_aa(i,i1) 
              execute dump_block Iij_aa(i,i1)  
           ENDDO i1 
           ENDDO i 
#
           DO j 
           DO j1 
              GET Iij_bb(j,j1) 
              execute dump_block Iij_bb(j,j1)  
           ENDDO j1 
           ENDDO j 
#
      ENDPROC S2IIJ 
#
      PROC S2IAB 
#
           DO a 
           DO a1 
              GET Iab_aa(a,a1) 
              execute dump_block Iab_aa(a,a1)  
           ENDDO a1 
           ENDDO a 
#
           DO b 
           DO b1 
              GET Iab_bb(b,b1) 
              execute dump_block Iab_bb(b,b1)  
           ENDDO b1 
           ENDDO b 
#
      ENDPROC S2IAB 
#
      PROC S2IAI 
#
           DO a 
           DO i 
              GET Iai_aa(a,i) 
              execute dump_block Iai_aa(a,i)  
           ENDDO i 
           ENDDO a 
#
           DO b 
           DO j 
              GET Iai_bb(b,j) 
              execute dump_block Iai_bb(b,j)  
           ENDDO j 
           ENDDO b 
#
      ENDPROC S2IAI 
#
      PROC S2IIA 
#
           DO a 
           DO i 
              GET Iia_aa(i,a) 
              execute dump_block Iia_aa(i,a)  
           ENDDO i 
           ENDDO a 
#
           DO b 
           DO j 
              GET Iia_bb(j,b) 
              execute dump_block Iia_bb(j,b)  
           ENDDO j 
           ENDDO b 
#
      ENDPROC S2IIA 
#
      PROC PRINTIIJ
#
           DO i
           DO i1
              GET Iij_aa(i,i1)
              execute dump_block Iij_aa(i,i1)
           ENDDO i1
           ENDDO i
#
           DO j
           DO j1
              GET Iij_bb(j,j1)
              execute dump_block Iij_bb(j,j1)
           ENDDO j1
           ENDDO j
#
      ENDPROC PRINTIIJ
#
      PROC PRINTIAB
#
           DO a
           DO a1
              GET Iab_aa(a,a1)
              execute dump_block Iab_aa
           ENDDO a1
           ENDDO a
#
           DO b
           DO b1
              GET Iab_bb(b,b1)
              execute dump_block Iab_bb
           ENDDO b1
           ENDDO b
#
      ENDPROC PRINTIAB
#
      PROC PRINTIIA
#
           DO i
           DO a
              GET Iia_aa(i,a)
              execute dump_block Iia_aa
           ENDDO a
           ENDDO i
#
           DO j
           DO b
              GET Iia_bb(j,b)
              execute dump_block Iia_bb
           ENDDO b
           ENDDO j
#
      ENDPROC PRINTIIA
#
      PROC PRINTIAI
#
           DO i
           DO a
              GET Iai_aa(a,i)
              execute dump_block Iai_aa
           ENDDO a
           ENDDO i
#
           DO j
           DO b
              GET Iai_bb(b,j)
              execute dump_block Iai_bb
           ENDDO b
           ENDDO j
#
      ENDPROC PRINTIAI
#
# --------------------------------------------------------------------------- 
# 
# ----------------------------------------------------------------------------------------
#
# As a simple test of the correctnes of the code the sum of the sum of the squares 
# of ALL the one-particle intermediates is computed. This can determine whether there
# is an error but obviously not where the error is. Of course the same quantity 
# must have been calculated correctly using another code.  
#
      PROC SQUAREALL 
#     -------------- 
#
# Intermediate arrays
# -------------------
#
      esum = 0.0 
#
      PARDO i, i1 
            GET Iij_aa(i,i1)
            etemp = Iij_aa(i,i1)*Iij_aa(i,i1) 
            esum += etemp 
      ENDPARDO i, i1 
#
      PARDO j, j1 
            GET Iij_bb(j,j1)
            etemp = Iij_bb(j,j1)*Iij_bb(j,j1) 
            esum += etemp 
      ENDPARDO j, j1 
#
      PARDO a, a1 
            GET Iab_aa(a,a1)
            etemp = Iab_aa(a,a1)*Iab_aa(a,a1) 
            esum += etemp 
      ENDPARDO a, a1 
#
      PARDO b, b1 
            GET Iab_bb(b,b1)
            etemp = Iab_bb(b,b1)*Iab_bb(b,b1) 
            esum += etemp 
      ENDPARDO b, b1 
#
      PARDO a, i 
            GET Iai_aa(a,i)
            GET Iia_aa(i,a)
            GET Xai_aa(a,i)

            etemp = Iai_aa(a,i)*Iai_aa(a,i) 
            esum += etemp 
            etemp = Iia_aa(i,a)*Iia_aa(i,a) 
            esum += etemp 
            etemp = Xai_aa(a,i)*Xai_aa(a,i) 
            esum += etemp 
      ENDPARDO a, i 
#
      PARDO b, j 
            GET Iai_bb(b,j)
            GET Iia_bb(j,b)
            GET Xai_bb(b,j)

            etemp = Iai_bb(b,j)*Iai_bb(b,j) 
            esum += etemp 
            etemp = Iia_bb(j,b)*Iia_bb(j,b) 
            esum += etemp 
            etemp = Xai_bb(b,j)*Xai_bb(b,j) 
            esum += etemp 
      ENDPARDO b, j 
#
      execute sip_barrier 
      collective enew += esum 
      execute print_scalar enew  
#
      ENDPROC SQUAREALL 
#     ----------------- 
# 
# ----------------------------------------------------------------------------- 
#
      PROC DMAIN
#     ----------
#
# Create Tau arrays, single particle intermediates GAE and GMI and DAB, DIJ arrays 
# -------------------------------------------------------------------------------- 
         CALL CREATE1ARRAY 
         execute sip_barrier ca 
#
# Form the Tau arrays and single particle intermediates GAE and GMI  
# -----------------------------------------------------------------  
         CALL TAU 
         CALL GAE 
         CALL GMI 
         execute sip_barrier ca 
#
# Form the single particle density DAB and DIJ   
# --------------------------------------------  
         CALL DAB 
         CALL DIJ 
#
# Perform two-electron transformation 
# ----------------------------------- 
#        CALL TRAN_XXXX
         execute sip_barrier ca 
#
# Compute contributions to one-particle intermediates from DAB and DIJ 
# -------------------------------------------------------------------- 
         CALL I11 
#
# Form DIJKL 
# ---------- 
         CALL DIJKL # gamma3 
#
# Form DABCD 
# ---------- 
         CALL DABCD # gamma2 
#
# Form DIBJA 
# ---------- 
         CALL DIBJA # gamma4 
#
# Form DIJAB  
# ---------- 
         CALL DIJAB # gamma1 
#
# Form DIJKA  
# ---------- 
         CALL DIJKA # gamma6 
#
# Form DABCI 
# ---------- 
         CALL DABCI # gamma5 
#
# Compute 'Direct' contributions to Iab coming from Vabcd  
# ------------------------------------------------------- 
         CALL IABDIRECT 
         execute sip_barrier ca 
#
# Finally solve for Dai iteratively 
# --------------------------------- 
         CALL DAI 
         execute sip_barrier ca 
#
# Compute the contributions to Iai coming from the Fock matrix 
# ------------------------------------------------------------ 
         CALL IFOCK
         execute sip_barrier ca 
#     CALL PRINTIIJ   # --> symmetric  
#     CALL PRINTIAB   # --> symmetric  
#     CALL PRINTIIA   # --> symmetric  
#     CALL PRINTIAI   # --> symmetric  
#     CALL SQUAREALL 
#
# Backtransform one-particle intermediates and contract with integral derivatives
# -------------------------------------------------------------------------------
         create Ipq
         create Dpq
         create DHF
         create DHFa
         create DHFb
         execute sip_barrier
         CALL HFDENS
         CALL WHFDENS
         execute sip_barrier
         CALL I1TRANS
#
# Backtransform one-particle density and contract with integral derivatives
# -------------------------------------------------------------------------
         CALL D1TRANS
#
      ENDPROC DMAIN
#     -------------
#
# Read two-electron transformed integrals 
# --------------------------------------- 
#
      CALL READ_2EL 
#
# Read converged T and Lambda amplitudes 
# -------------------------------------- 
#
      CREATE T2old_aa 
      CREATE T2old_ab 
      CREATE T2old_bb 
      CREATE t1a_old 
      CREATE t1b_old 
      CREATE L2old_aa 
      CREATE L2old_ab 
      CREATE L2old_bb 
      CREATE l1a_old 
      CREATE l1b_old 
      execute sip_barrier
#
      execute list_to_blocks t1a_old
      execute list_to_blocks t1b_old
      execute list_to_blocks T2old_aa
      execute list_to_blocks T2old_ab
      execute list_to_blocks T2old_bb
#
      execute list_to_blocks  l1a_old
      execute list_to_blocks  l1b_old
      execute list_to_blocks L2old_aa
      execute list_to_blocks L2old_ab
      execute list_to_blocks L2old_bb
      execute read_list_to_blocks
      execute sip_barrier
#
# Do computation 
# -------------- 
#
      CALL DMAIN 
#
# Write amplitudes to file
# ------------------------
#
      execute sip_barrier
      execute blocks_to_list t1a_old
      execute blocks_to_list t1b_old
      execute blocks_to_list T2old_aa
      execute blocks_to_list T2old_ab
      execute blocks_to_list T2old_bb
#
      execute blocks_to_list l1a_old
      execute blocks_to_list l1b_old
      execute blocks_to_list L2old_aa
      execute blocks_to_list L2old_ab
      execute blocks_to_list L2old_bb
#
      execute blocks_to_list Doldai_a
      execute blocks_to_list Doldai_b
      execute write_blocks_to_list
      execute sip_barrier
#
# Compute squares of each density contribution 
# -------------------------------------------- 
#
#     CALL S2IIJ   # --> symmetric  
#     CALL S2IAB   # --> symmetric  
#
#     CALL S2DIJKL # --> symmetric Matches Aces 
#     CALL S2DABCD # --> symmetric Matches Aces  
#     CALL S2DIBJA # --> symmetric Matches Aces  
#
#     CALL S2DIJKA # --> symmetric Matches Aces  
#     CALL S2ABCI  # --> symmetric Matches Aces  
#     CALL S2DIJAB # --> symmetric Matches Aces  
# 
                    ENDSIAL ONE_GRAD_MO_DIST1        
# 
# ----------------------------------------------------------------------------------------
#
