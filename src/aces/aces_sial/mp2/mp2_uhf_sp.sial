#  Copyright (c) 2003-2010 University of Florida
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  The GNU General Public License is included in this distribution
#  in the file COPYRIGHT.
      SIAL MP2_N6_UHF  
#
# Make index definitions 
#
      index kiter    = 1, cc_iter
      index jiter    = 1, cc_iter
      index   kptr1  = 1, 2
      index   kptr2  = 1, 2
      index   kone   = 1, 1
#
      aoindex mu     = 1, norb 
      aoindex nu     = 1, norb 
      aoindex lambda = 1, norb 
      aoindex sigma  = 1, norb 
#
      moaindex i = baocc, eaocc
      moaindex i1= baocc, eaocc
      moaindex i2= baocc, eaocc
      moaindex i3= baocc, eaocc
#
      moaindex a = bavirt, eavirt
      moaindex a1= bavirt, eavirt
      moaindex a2= bavirt, eavirt
      moaindex a3= bavirt, eavirt 
#
      mobindex j = bbocc, ebocc
      mobindex j1= bbocc, ebocc
      mobindex j2= bbocc, ebocc
      mobindex j3= bbocc, ebocc
#
      mobindex b = bbvirt, ebvirt
      mobindex b1= bbvirt, ebvirt
      mobindex b2= bbvirt, ebvirt
      mobindex b3= bbvirt, ebvirt 
#
      moaindex p = baocc, eavirt  
      moaindex p1= baocc, eavirt  
      moaindex p2= baocc, eavirt  
      moaindex p3= baocc, eavirt  
#
      mobindex q = bbocc, ebvirt  
      mobindex q1= bbocc, ebvirt  
      mobindex q2= bbocc, ebvirt  
      mobindex q3= bbocc, ebvirt  
#
# Declare distributed arrays which are used 
# 
      distributed Vxixi(mu,i1,nu,i) 
      distributed Vaiai(a,i1,a1,i) 
      distributed Vxjxj(mu,j1,nu,j) 
      distributed Vbjbj(b,j1,b1,j) 
      distributed Vxixj(mu,i,nu,j) 
      distributed Vaibj(a,i,b,j) 
#
# Declare Temporary arrays which are used 
# 
      temp Txxxi(mu,nu,lambda,i) 
      temp Txxxj(mu,nu,lambda,j) 
      temp Txiai(mu,i,a,i1) 
      temp T1xiai(mu,i,a,i1) 
      temp Txjbj(mu,j,b,j1) 
      temp T1xjbj(mu,j,b,j1) 
      temp Txibj(mu,i,b,j1) 
      temp T1xibj(mu,i,b,j1) 
      temp Txixi(mu,i,nu,i1) 
      temp T1xixi(mu,i,nu,i1) 
      temp Txjxj(mu,j,nu,j1) 
      temp T1xjxj(mu,j,nu,j1) 
      temp Txixj(mu,i,nu,j) 
      temp T1xixj(mu,i,nu,j) 
      temp Taiai(a,i,a1,i1) 
      temp T1aiai(a,i,a1,i1) 
      temp Tbjbj(b,j,b1,j1) 
      temp T1bjbj(b,j,b1,j1) 
      temp Taibj(a,i,b,j) 
      temp T1aibj(a,i,b,j) 
      temp V0xxxi(mu,nu,lambda,i) 
      temp V2xxxi(mu,nu,sigma,i) 
      temp V0xxxj(mu,nu,lambda,j) 
      temp V2xxxj(mu,nu,sigma,j) 
#
# Declare served arrays 
# 
      temp AOINT(mu,nu,lambda,sigma)
      temp BOINT(mu,nu,lambda,sigma)
      static pinf(kiter,kptr1)
      temp tpinf(kiter,kptr1)
      scalar one
      scalar two
      scalar five
      scalar six
      scalar seven
      scalar ncount1
      scalar ncount2
#
# Declare Scalars 
#
     scalar etemp 
     scalar esum 
     scalar esumaa  
     scalar esumab  
     scalar esumbb  
     scalar ecorraa 
     scalar ecorrbb 
     scalar ecorrab 
     scalar mp2_energy 
#
#    ------------------------------------------------------------------------ 
#
     PROC TRAN_AAII  
#
#    ------------------------------------------------------------------------ 
#
     execute sip_barrier 
#
     DO i 
#
        create Vxixi(*,*,*,i)
        create Vaiai(*,*,*,i)     
        execute sip_barrier 
#
        PARDO mu, nu, lambda, sigma  
#
              WHERE mu     < nu
              WHERE lambda < sigma
#
                 compute_integrals        AOINT(mu,nu,lambda,sigma)
                 V0xxxi(mu,nu,lambda,i) = AOINT(mu,nu,lambda,sigma)*ca(sigma,i)
                 V2xxxi(mu,nu,sigma,i)  = AOINT(mu,nu,lambda,sigma)*ca(lambda,i)
#
                 DO i1 
#
                    Txixi(mu,i1,lambda,i)      = V0xxxi(mu,nu,lambda,i)*ca(nu,i1)
                    put Vxixi(mu,i1,lambda,i) += Txixi(mu,i1,lambda,i)
#
                    T1xixi(mu,i1,sigma,i)      = V2xxxi(mu,nu,sigma,i)*ca(nu,i1)
                    put Vxixi(mu,i1,sigma,i)  += T1xixi(mu,i1,sigma,i)
#
                 ENDDO i1  
#
                 DO i1
#
                    Txixi(nu,i1,lambda,i)      = V0xxxi(mu,nu,lambda,i)*ca(mu,i1)
                    put Vxixi(nu,i1,lambda,i) += Txixi(nu,i1,lambda,i)
#
                    T1xixi(nu,i1,sigma,i)      = V2xxxi(mu,nu,sigma,i)*ca(mu,i1)
                    put Vxixi(nu,i1,sigma,i)  += T1xixi(nu,i1,sigma,i)
#
                 ENDDO i1
#
             #ENDIF # lambda < sigma
             #ENDIF # mu     < nu
#
        ENDPARDO mu, nu, lambda, sigma  
#
        PARDO mu, nu, lambda, sigma  
#
              WHERE mu     == nu
              WHERE lambda < sigma
#
                 compute_integrals        AOINT(mu,nu,lambda,sigma)
                 V0xxxi(mu,nu,lambda,i) = AOINT(mu,nu,lambda,sigma)*ca(sigma,i)
                 V2xxxi(mu,nu,sigma,i)  = AOINT(mu,nu,lambda,sigma)*ca(lambda,i)
#
                 DO i1 
#
                    Txixi(mu,i1,lambda,i)      = V0xxxi(mu,nu,lambda,i)*ca(nu,i1)
                    put Vxixi(mu,i1,lambda,i) += Txixi(mu,i1,lambda,i)
#
                    T1xixi(mu,i1,sigma,i)      = V2xxxi(mu,nu,sigma,i)*ca(nu,i1)
                    put Vxixi(mu,i1,sigma,i)  += T1xixi(mu,i1,sigma,i)
#
                 ENDDO i1  
#
             #ENDIF # lambda < sigma
             #ENDIF # mu     == nu
#
        ENDPARDO mu, nu, lambda, sigma  
#
        PARDO mu, nu, lambda, sigma  
#
              WHERE mu     < nu
              WHERE lambda == sigma
#
                 compute_integrals        AOINT(mu,nu,lambda,sigma)
                 V0xxxi(mu,nu,lambda,i) = AOINT(mu,nu,lambda,sigma)*ca(sigma,i)
#
                 DO i1 
#
                    Txixi(mu,i1,lambda,i)      = V0xxxi(mu,nu,lambda,i)*ca(nu,i1)
                    put Vxixi(mu,i1,lambda,i) += Txixi(mu,i1,lambda,i)
#
                    T1xixi(nu,i1,lambda,i)     = V0xxxi(mu,nu,lambda,i)*ca(mu,i1)
                    put Vxixi(nu,i1,lambda,i) += T1xixi(nu,i1,lambda,i)
#
                 ENDDO i1
#
             #ENDIF # lambda == sigma
             #ENDIF # mu     < nu
#
        ENDPARDO mu, nu, lambda, sigma  
#
        PARDO mu, nu, lambda, sigma  
#
              WHERE mu     == nu
              WHERE lambda == sigma
#
                 compute_integrals        AOINT(mu,nu,lambda,sigma)
                 V0xxxi(mu,nu,lambda,i) = AOINT(mu,nu,lambda,sigma)*ca(sigma,i)
#
                 DO i1 
#
                    Txixi(mu,i1,lambda,i)      = V0xxxi(mu,nu,lambda,i)*ca(nu,i1)
                    put Vxixi(mu,i1,lambda,i) += Txixi(mu,i1,lambda,i)
#
                 ENDDO i1  
#
             #ENDIF # lambda == sigma
             #ENDIF # mu     == nu
#
        ENDPARDO mu, nu, lambda, sigma  
#       
        execute sip_barrier 
#
        PARDO a1, mu, i1  
#
           Txiai(mu,i1,a1,i) = 0.0 
#
           DO lambda  
#
              get                  Vxixi(mu,i1,lambda,i)
              T1xiai(mu,i1,a1,i) = Vxixi(mu,i1,lambda,i)*ca(lambda,a1)  
              Txiai(mu,i1,a1,i) += T1xiai(mu,i1,a1,i) 
#
           ENDDO lambda  
#
           DO a 
#
              Taiai(a,i1,a1,i)      = Txiai(mu,i1,a1,i)*ca(mu,a) 
              put Vaiai(a,i1,a1,i) += Taiai(a,i1,a1,i)  
#
           ENDDO a 
#
        ENDPARDO a1, mu, i1  
#
        execute sip_barrier 
        delete Vxixi(*,*,*,i)
#
        PARDO a, a1, i1   
#
              get                        Vaiai(a,i1,a1,i)  
              get                        Vaiai(a1,i1,a,i)  
              Taiai(a,i1,a1,i)         = Vaiai(a,i1,a1,i)
              T1aiai(a,i1,a1,i)        = Vaiai(a1,i1,a,i)
              Taiai(a,i1,a1,i)        -= T1aiai(a,i1,a1,i)  
              Taiai(a,i1,a1,i)        *= 0.5  
              execute energy_denominator Taiai  
              etemp                    = Taiai(a,i1,a1,i)*Vaiai(a,i1,a1,i) 
             #etemp                   *= 0.25  
              esumaa                  += etemp 
#
        ENDPARDO a, a1, i1   
#
        execute sip_barrier 
        delete Vaiai(*,*,*,i)
#
     ENDDO i
#
#    ------------------------------------------------------------------------ 
#
     ENDPROC TRAN_AAII  
# 
#    ------------------------------------------------------------------------ 
#
#    ------------------------------------------------------------------------ 
#
     PROC TRAN_BBJJ  
#
#    ------------------------------------------------------------------------ 
#
     execute sip_barrier 
#
     DO j 
#
        create Vxjxj(*,*,*,j)
        create Vbjbj(*,*,*,j)     
        execute sip_barrier 
#
        PARDO mu, nu, lambda, sigma  
#
              WHERE mu     < nu
              WHERE lambda < sigma
              #IF mu     < nu
              #IF lambda < sigma
#
                 compute_integrals        AOINT(mu,nu,lambda,sigma)
                 V0xxxj(mu,nu,lambda,j) = AOINT(mu,nu,lambda,sigma)*cb(sigma,j)
                 V2xxxj(mu,nu,sigma,j)  = AOINT(mu,nu,lambda,sigma)*cb(lambda,j)
#
                 DO j1 
#
                    Txjxj(mu,j1,lambda,j)      = V0xxxj(mu,nu,lambda,j)*cb(nu,j1)
                    put Vxjxj(mu,j1,lambda,j) += Txjxj(mu,j1,lambda,j)
#
                    T1xjxj(mu,j1,sigma,j)      = V2xxxj(mu,nu,sigma,j)*cb(nu,j1)
                    put Vxjxj(mu,j1,sigma,j)  += T1xjxj(mu,j1,sigma,j)
#
                 ENDDO j1  
#
                 DO j1
#
                    Txjxj(nu,j1,lambda,j)      = V0xxxj(mu,nu,lambda,j)*cb(mu,j1)
                    put Vxjxj(nu,j1,lambda,j) += Txjxj(nu,j1,lambda,j)
#
                    T1xjxj(nu,j1,sigma,j)      = V2xxxj(mu,nu,sigma,j)*cb(mu,j1)
                    put Vxjxj(nu,j1,sigma,j)  += T1xjxj(nu,j1,sigma,j)
#
                 ENDDO j1
#
             #ENDIF # lambda < sigma
             #ENDIF # mu     < nu
#
        ENDPARDO mu, nu, lambda, sigma  
#
        PARDO mu, nu, lambda, sigma  
#
              WHERE mu     == nu
              WHERE lambda < sigma
              #IF mu     == nu
              #IF lambda < sigma
#
                 compute_integrals        AOINT(mu,nu,lambda,sigma)
                 V0xxxj(mu,nu,lambda,j) = AOINT(mu,nu,lambda,sigma)*cb(sigma,j)
                 V2xxxj(mu,nu,sigma,j)  = AOINT(mu,nu,lambda,sigma)*cb(lambda,j)
#
                 DO j1 
#
                    Txjxj(mu,j1,lambda,j)      = V0xxxj(mu,nu,lambda,j)*cb(nu,j1)
                    put Vxjxj(mu,j1,lambda,j) += Txjxj(mu,j1,lambda,j)
#
                    T1xjxj(mu,j1,sigma,j)      = V2xxxj(mu,nu,sigma,j)*cb(nu,j1)
                    put Vxjxj(mu,j1,sigma,j)  += T1xjxj(mu,j1,sigma,j)
#
                 ENDDO j1  
#
             #ENDIF # lambda < sigma
             #ENDIF # mu     == nu
#
        ENDPARDO mu, nu, lambda, sigma  
#
        PARDO mu, nu, lambda, sigma  
#
              WHERE mu     < nu
              WHERE lambda == sigma
              #IF mu     < nu
              #IF lambda == sigma
#
                 compute_integrals        AOINT(mu,nu,lambda,sigma)
                 V0xxxj(mu,nu,lambda,j) = AOINT(mu,nu,lambda,sigma)*cb(sigma,j)
#
                 DO j1 
#
                    Txjxj(mu,j1,lambda,j)      = V0xxxj(mu,nu,lambda,j)*cb(nu,j1)
                    put Vxjxj(mu,j1,lambda,j) += Txjxj(mu,j1,lambda,j)
#
                    T1xjxj(nu,j1,lambda,j)     = V0xxxj(mu,nu,lambda,j)*cb(mu,j1)
                    put Vxjxj(nu,j1,lambda,j) += T1xjxj(nu,j1,lambda,j)
#
                 ENDDO j1
#
             #ENDIF # lambda == sigma
             #ENDIF # mu     < nu
#
        ENDPARDO mu, nu, lambda, sigma  
#
        PARDO mu, nu, lambda, sigma  
#
              WHERE mu     == nu
              WHERE lambda == sigma
              #IF mu     == nu
              #IF lambda == sigma
#
                 compute_integrals        AOINT(mu,nu,lambda,sigma)
                 V0xxxj(mu,nu,lambda,j) = AOINT(mu,nu,lambda,sigma)*cb(sigma,j)
#
                 DO j1 
#
                    Txjxj(mu,j1,lambda,j)      = V0xxxj(mu,nu,lambda,j)*cb(nu,j1)
                    put Vxjxj(mu,j1,lambda,j) += Txjxj(mu,j1,lambda,j)
#
                 ENDDO j1  
#
             #ENDIF # lambda == sigma
             #ENDIF # mu     == nu
#
        ENDPARDO mu, nu, lambda, sigma  
#       
        execute sip_barrier 
#
        PARDO b1, mu, j1  
#
           Txjbj(mu,j1,b1,j) = 0.0 
#
           DO lambda  
#
              get                  Vxjxj(mu,j1,lambda,j)
              T1xjbj(mu,j1,b1,j) = Vxjxj(mu,j1,lambda,j)*cb(lambda,b1)  
              Txjbj(mu,j1,b1,j) += T1xjbj(mu,j1,b1,j) 
#
           ENDDO lambda  
#
           DO b 
#
              Tbjbj(b,j1,b1,j)      = Txjbj(mu,j1,b1,j)*cb(mu,b) 
              put Vbjbj(b,j1,b1,j) += Tbjbj(b,j1,b1,j)  
#
           ENDDO b 
#
        ENDPARDO b1, mu, j1  
#
        execute sip_barrier 
        delete Vxjxj(*,*,*,j)
#
        PARDO b, b1, j1   
#
              get                        Vbjbj(b,j1,b1,j)  
              get                        Vbjbj(b1,j1,b,j)  
              Tbjbj(b,j1,b1,j)         = Vbjbj(b,j1,b1,j)
              T1bjbj(b,j1,b1,j)        = Vbjbj(b1,j1,b,j)
              Tbjbj(b,j1,b1,j)        -= T1bjbj(b,j1,b1,j)  
              Tbjbj(b,j1,b1,j)        *= 0.5  
              execute energy_denominator Tbjbj  
              etemp                    = Tbjbj(b,j1,b1,j)*Vbjbj(b,j1,b1,j) 
             #etemp                   *= 0.25  
              esumbb                  += etemp 
#
        ENDPARDO b, b1, j1   
#
        execute sip_barrier 
        delete Vbjbj(*,*,*,j)
#
     ENDDO j
#
#    ------------------------------------------------------------------------ 
#
     ENDPROC TRAN_BBJJ  
# 
#    ------------------------------------------------------------------------ 
#
#    ------------------------------------------------------------------------ 
#
     PROC TRAN_ABIJ  
#
#    ------------------------------------------------------------------------ 
#
     execute sip_barrier 
#
     DO j 
#
        create Vxixj(*,*,*,j)
        create Vaibj(*,*,*,j)     
        execute sip_barrier 
#
        PARDO mu, nu, lambda, sigma  
#
              WHERE mu     < nu
              WHERE lambda < sigma
#
                 compute_integrals        AOINT(mu,nu,lambda,sigma)
                 V0xxxj(mu,nu,lambda,j) = AOINT(mu,nu,lambda,sigma)*cb(sigma,j)
                 V2xxxj(mu,nu,sigma,j)  = AOINT(mu,nu,lambda,sigma)*cb(lambda,j)
#
                 DO i1 
#
                    Txixj(mu,i1,lambda,j)      = V0xxxj(mu,nu,lambda,j)*ca(nu,i1)
                    put Vxixj(mu,i1,lambda,j) += Txixj(mu,i1,lambda,j)
#
                    T1xixj(mu,i1,sigma,j)      = V2xxxj(mu,nu,sigma,j)*ca(nu,i1)
                    put Vxixj(mu,i1,sigma,j)  += T1xixj(mu,i1,sigma,j)
#
                 ENDDO i1  
#
                 DO i1
#
                    Txixj(nu,i1,lambda,j)      = V0xxxj(mu,nu,lambda,j)*ca(mu,i1)
                    put Vxixj(nu,i1,lambda,j) += Txixj(nu,i1,lambda,j)
#
                    T1xixj(nu,i1,sigma,j)      = V2xxxj(mu,nu,sigma,j)*ca(mu,i1)
                    put Vxixj(nu,i1,sigma,j)  += T1xixj(nu,i1,sigma,j)
#
                 ENDDO i1
#
             #ENDIF # lambda < sigma
             #ENDIF # mu     < nu
#
        ENDPARDO mu, nu, lambda, sigma  
#
        PARDO mu, nu, lambda, sigma  
#
              WHERE mu     == nu
              WHERE lambda < sigma
#
                 compute_integrals        AOINT(mu,nu,lambda,sigma)
                 V0xxxj(mu,nu,lambda,j) = AOINT(mu,nu,lambda,sigma)*cb(sigma,j)
                 V2xxxj(mu,nu,sigma,j)  = AOINT(mu,nu,lambda,sigma)*cb(lambda,j)
#
                 DO i1 
#
                    Txixj(mu,i1,lambda,j)      = V0xxxj(mu,nu,lambda,j)*ca(nu,i1)
                    put Vxixj(mu,i1,lambda,j) += Txixj(mu,i1,lambda,j)
#
                    T1xixj(mu,i1,sigma,j)      = V2xxxj(mu,nu,sigma,j)*ca(nu,i1)
                    put Vxixj(mu,i1,sigma,j)  += T1xixj(mu,i1,sigma,j)
#
                 ENDDO i1  
#
             #ENDIF # lambda < sigma
             #ENDIF # mu     == nu
#
        ENDPARDO mu, nu, lambda, sigma  
#
        PARDO mu, nu, lambda, sigma  
#
              WHERE mu     < nu
              WHERE lambda == sigma
#
                 compute_integrals        AOINT(mu,nu,lambda,sigma)
                 V0xxxj(mu,nu,lambda,j) = AOINT(mu,nu,lambda,sigma)*cb(sigma,j)
#
                 DO i1 
#
                    Txixj(mu,i1,lambda,j)      = V0xxxj(mu,nu,lambda,j)*ca(nu,i1)
                    put Vxixj(mu,i1,lambda,j) += Txixj(mu,i1,lambda,j)
#
                    T1xixj(nu,i1,lambda,j)     = V0xxxj(mu,nu,lambda,j)*ca(mu,i1)
                    put Vxixj(nu,i1,lambda,j) += T1xixj(nu,i1,lambda,j)
#
                 ENDDO i1
#
             #ENDIF # lambda == sigma
             #ENDIF # mu     < nu
#
        ENDPARDO mu, nu, lambda, sigma  
#
        PARDO mu, nu, lambda, sigma  
#
              WHERE mu     == nu
              WHERE lambda == sigma
#
                 compute_integrals        AOINT(mu,nu,lambda,sigma)
                 V0xxxj(mu,nu,lambda,j) = AOINT(mu,nu,lambda,sigma)*cb(sigma,j)
#
                 DO i1 
#
                    Txixj(mu,i1,lambda,j)      = V0xxxj(mu,nu,lambda,j)*ca(nu,i1)
                    put Vxixj(mu,i1,lambda,j) += Txixj(mu,i1,lambda,j)
#
                 ENDDO i1  
#
             #ENDIF # lambda == sigma
             #ENDIF # mu     == nu
#
        ENDPARDO mu, nu, lambda, sigma  
#       
        execute sip_barrier 
#
        PARDO b1, mu, i1  
#
           Txibj(mu,i1,b1,j) = 0.0 
#
           DO lambda  
#
              get                  Vxixj(mu,i1,lambda,j)
              T1xibj(mu,i1,b1,j) = Vxixj(mu,i1,lambda,j)*cb(lambda,b1)  
              Txibj(mu,i1,b1,j) += T1xibj(mu,i1,b1,j) 
#
           ENDDO lambda  
#
           DO a 
#
              Taibj(a,i1,b1,j)      = Txibj(mu,i1,b1,j)*ca(mu,a) 
              put Vaibj(a,i1,b1,j) += Taibj(a,i1,b1,j)  
#
           ENDDO a 
#
        ENDPARDO b1, mu, i1  
#
        execute sip_barrier 
        delete Vxixj(*,*,*,j)
#
        PARDO a, b1, i1   
#
              get                        Vaibj(a,i1,b1,j)  
              Taibj(a,i1,b1,j)         = Vaibj(a,i1,b1,j)
              execute energy_denominator Taibj  
              etemp                    = Taibj(a,i1,b1,j)*Vaibj(a,i1,b1,j) 
             #etemp                   *= 0.25  
              esumab                  += etemp 
#
        ENDPARDO a, b1, i1   
#
        execute sip_barrier 
        delete Vaibj(*,*,*,j)
#
     ENDDO j
#
#    ------------------------------------------------------------------------ 
#
     ENDPROC TRAN_ABIJ  
# 
#    ------------------------------------------------------------------------ 
# 
# 
     PROC MP2_RHF 
# 
     ecorraa = 0.
     ecorrbb = 0.
     ecorrab = 0.
     execute sip_barrier
     collective ecorraa += esumaa  
     collective ecorrbb += esumbb  
     collective ecorrab += esumab  
     execute sip_barrier

    #execute print_scalar ecorraa 
    #execute print_scalar ecorrbb 
    #execute print_scalar ecorrab 
#
     mp2_energy  = ecorraa 
     mp2_energy += ecorrbb 
     mp2_energy += ecorrab 
     totenerg   = mp2_energy + scfeneg
    #execute print_scalar mp2_energy  

     one = 1.0
     two = 2.0
     six = 6.0

      do kiter
      do kptr1
         etemp = 0.0
         pinf(kiter,kptr1)  = etemp
      enddo kptr1
      enddo kiter

        do jiter
           ncount2 = 0.0
         DO kptr1
            ncount2 += 1.0
            if ncount2 == two
               etemp              = mp2_energy  
               etemp             += scfeneg
               tpinf(jiter,kptr1) = etemp
               pinf(jiter,kptr1)  = tpinf(jiter,kptr1)
            endif
         ENDDO kptr1
        enddo jiter

        do jiter
           ncount2 = 0.0
         DO kptr1
            ncount2 += 1.0
            if ncount2 == one
               tpinf(jiter,kptr1) = mp2_energy  
               pinf(jiter,kptr1)  = tpinf(jiter,kptr1)
            endif
         ENDDO kptr1
        enddo jiter

        execute print_rel_info six pinf

# 
#    ------------------------------------------------------------------------ 
# 
     ENDPROC MP2_RHF 
# 
#    ------------------------------------------------------------------------ 
#
# ************************************************************************* 
#
#    Main program which performs a two-electron transformation and then
#    a second-order energy calculation. 
#
# ************************************************************************* 
# 
     esumaa = 0.
     esumbb = 0.
     esumab = 0.
     execute sip_barrier
 
     CALL TRAN_AAII 
     CALL TRAN_BBJJ  
     CALL TRAN_ABIJ  
#
     CALL MP2_RHF
# 
     execute sip_barrier totenerg
     ENDSIAL MP2_N6_UHF  
#
