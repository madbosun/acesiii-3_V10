                           SIAL LAMBDA_SV1     
#
# Working version of UHF based lambda code which computes the VVVV 
# integrals on the fly. No VVVV OR VVVO intermediates are stored. 
# The W1MEBJ intermediates are also not stored rather computed on the 
# fly ==> only W2MEBJ, W1IEMN, and W1MINJ are stored. 
# Many changes have been made to improve scalability. 
#
# BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
#
# Declare indeces 
# --------------- 
#
      index kiter    = 1, cc_iter  
#
      aoindex mu     = 1, norb
      aoindex nu     = 1, norb
      aoindex lambda = 1, norb
      aoindex sigma  = 1, norb
#
      moaindex i = baocc, eaocc
      moaindex i1= baocc, eaocc
      moaindex i2= baocc, eaocc
      moaindex i3= baocc, eaocc
      moaindex i4= baocc, eaocc
#
      moaindex a = bavirt, eavirt
      moaindex a1= bavirt, eavirt
      moaindex a2= bavirt, eavirt
      moaindex a3= bavirt, eavirt
      moaindex a4= bavirt, eavirt
#
      mobindex j = bbocc, ebocc
      mobindex j1= bbocc, ebocc
      mobindex j2= bbocc, ebocc
      mobindex j3= bbocc, ebocc
      mobindex j4= bbocc, ebocc
#
      mobindex b = bbvirt, ebvirt
      mobindex b1= bbvirt, ebvirt
      mobindex b2= bbvirt, ebvirt
      mobindex b3= bbvirt, ebvirt
      mobindex b4= bbvirt, ebvirt
#
      moaindex p = baocc, eavirt
      moaindex p1= baocc, eavirt
      moaindex p2= baocc, eavirt
      moaindex p3= baocc, eavirt
#
      mobindex q = bbocc, ebvirt
      mobindex q1= bbocc, ebvirt
      mobindex q2= bbocc, ebvirt
      mobindex q3= bbocc, ebvirt
# 
# Declare static arrays 
# --------------------- 
#
      distributed t1a_old(a,i) 
      distributed t1a_new(a,i) 
      distributed t1b_old(b,j) 
      distributed t1b_new(b,j) 
      distributed sai(a,i) 
      distributed sbj(b,j) 
#
      distributed Iij_aa(i,i1) 
      distributed Iij_bb(j,j1) 
      distributed Iia_aa(i,a1) 
      distributed Iia_bb(j,b1) 
      distributed Iab_aa(a,a1) 
      distributed Iab_bb(b,b1) 
      distributed Iai_aa(a,i1) 
      distributed Iai_bb(b,j1) 
#
#     Contribution to one-density
#     ---------------------------
#
      distributed Daa(a,a1) 
      distributed Dbb(b,b1)
      distributed Dii(i,i1)
      distributed Djj(j,j1)
      distributed DDai(a,i) 
      distributed DDbj(b,j) 
#
      distributed Fae_a(a,a1) 
      distributed Fae_b(b,b1) 
      distributed Fme_a(i,a) 
      distributed Fme_b(j,b) 
      distributed Fmi_a(i,i1) 
      distributed Fmi_b(j,j1) 
#
      distributed Gae_a(a,a1) 
      distributed Gae_b(b,b1) 
      distributed Gmi_a(i,i1) 
      distributed Gmi_b(j,j1) 
#
# #
# Two-particle density arrays
# ---------------------------
#
      served Gaaai(a,a1,a2,i)
      served Gbbbj(b,b1,b2,j)
      served Gaabj(a,a1,b,j) 
      served Gbbai(b,b1,a,i) 
     #served Giiia(i1,i2,i3,a)
     #served Gijib(i1,j2,i3,b)
     #served Gjija(j1,i1,j2,a)
     #served Gjjjb(j1,j2,j3,b)
     #served Giiaa(i1,i2,a1,a2)
     #served Gijab(i1,j2,a1,b2)
     #served Gjjbb(j1,j2,b1,b2)
#
# Arrays used in transformation for AO2 algorithm
# -----------------------------------------------
#
      temp Txixi(mu,i1,lambda,i)
      temp Txxii(mu,nu,i1,i)
      temp Tixxi(i1,nu,lambda,i)
      temp Txipi(mu,i,p,i1)
      temp Tpipi(p1,i,p,i1)
      temp T1pipi(p1,i,p,i1)
      temp Tixai(i,mu,a,i1)
      temp Txaii(mu,a,i,i1)
      temp Tiaai(i,a1,a,i1)
      temp Taaii(a,a1,i,i1)
      temp Txaai(mu,a1,a,i)
      temp Taaai(a2,a,a1,i)
      temp Txxai(mu,nu,a,i)
#
      served VSpipi(p1,i,p,i1)
      served Viaai(i,a1,a,i1)
      served Vaaii(a,a1,i,i1)
      served Vxaai(mu,a1,a,i)
      served VSaaai(a2,a,a1,i)
#
      temp Txjxj(mu,j1,lambda,j)
      temp Txxjj(mu,nu,j1,j)
      temp Tjjxx(j1,nu,lambda,j)
      temp Tjxxj(j1,nu,lambda,j)
      temp Txjqj(mu,j,q,j1)
      temp Tqjqj(q1,j,q,j1)
      temp T1qjqj(q1,j,q,j1)
      temp Tjxbj(j,mu,b,j1)
      temp Txbjj(mu,b,j,j1)
      temp Tjbbj(j,b1,b,j1)
      temp Tbbjj(b,b1,j,j1)
      temp Txbbj(mu,b1,b,j)
      temp Tbbbj(b2,b,b1,j)
      temp Txxbj(mu,nu,b,j)
#
      served VSqjqj(q1,j,q,j1)
      served Vjbbj(j,b1,b,j1)
      served Vbbjj(b,b1,j,j1)
      served VSbbbj(b2,b,b1,j)
#
      temp Txixj(mu,i,nu,j)
      temp Txiqj(mu,i,q,j)
      temp Tpiqj(p,i,q,j)
      temp Tiixx(i,i1,mu,nu)
      temp Tiixb(i,i1,mu,b)
      temp Tiibb(i,i1,b1,b)
      temp Txajj(mu,a,j,j1)
      temp Taajj(a,a1,j,j1)
      temp Txabj(mu,a,b,j)
      temp Tixxj(i,mu,nu,j)
      temp Tixbj(i,mu,b,j)
      temp Tiabj(i,a,b,j)
      temp Taabj(a,a1,b,j)
#
      served Vpiqj(p,i,q,j)
      served Viibb(i,i1,b1,b)
      served Vaajj(a,a1,j,j1)
      served Viabj(i,a,b,j)
      served Vaabj(a,a1,b,j)
#
      temp Txbii(mu,b,i,i1)
      temp Tbbii(b,b1,i,i1)
      temp Tjbii(j,b,i,i1)
      temp Txbai(mu,b,a,i)
      temp Tbbai(b,b1,a,i)
#
      served Vbbii(b,b1,i,i1)
      served Vjbii(j,b,i,i1)
      served Vbbai(b,b1,a,i)
#
# End Arrays used in transformation for AO2 algorithm
# --------------------------------------------------- 
#
# Declare temporary arrays 
# ------------------------ 
#
      temp Txxxi(mu,nu,lambda,i)
      temp Txxxj(mu,nu,lambda,j)
      temp Txiix(mu,i,i1,nu)
      temp Txjjx(mu,j,j1,nu)
      temp Txijx(mu,i,j,nu)
      temp Txpii(mu,p,i,i1)
      temp Txqii(mu,q,i,i1)
      temp Tppii(p,p1,i,i1)
      temp Tqqii(q,q1,i,i1)
      temp Txpjj(mu,p,j,j1)
      temp Txqjj(mu,q,j,j1)
      temp Tppjj(p,p1,j,j1)
      temp Tqqjj(q,q1,j,j1)
      temp Tixpi(i,mu,p,i1)
      temp Tippi(i,p,p1,i1)
      temp Tjxqj(j,mu,q,j1)
      temp Tjqqj(j,q,q1,j1)
      temp Tixqj(i,mu,q,j)
      temp Tipqj(i,p,q,j)
#
      temp Vblock(i,i1,i2,i3)
      temp Taiai(p,i,p1,i1)
      temp T1aiai(p,i,p1,i1)
      temp T2aiai(p,i,p1,i1)
      temp T3aiai(p,i,p1,i1)
#
      temp  Tiaia(i,a,i1,a1)
      temp T1iaia(i,a,i1,a1)
      temp T2iaia(i,a,i1,a1)
      temp T3iaia(i,a,i1,a1)
      temp T4iaia(i,a,i1,a1)
      temp TXiaia(i,a,i1,a1)
      temp  Tjbjb(j,b,j1,b1)
      temp T1jbjb(j,b,j1,b1)
      temp T2jbjb(j,b,j1,b1)
      temp T3jbjb(j,b,j1,b1)
      temp T4jbjb(j,b,j1,b1)
      temp TXjbjb(j,b,j1,b1)
      temp  Tiajb(i,a,j,b)
      temp T1iajb(i,a,j,b)
      temp T2iajb(i,a,j,b)
# 
      temp Tbjbj(q,j,q1,j1)
      temp T1bjbj(q,j,q1,j1)
      temp T2bjbj(q,j,q1,j1)
      temp T3bjbj(q,j,q1,j1)
      temp Taibj(p,i,q,j)
      temp T1aibj(p,i,q,j)
#
      temp Txxxp(mu,nu,lambda,p)
      temp Txxxq(mu,nu,lambda,q)
      temp Txxpp(mu,nu,p1,p)
      temp Txxqq(mu,nu,q1,q)
      temp Txppp(mu,p2,p1,p)
      temp Txqqq(mu,q2,q1,q)
      temp Txpqq(mu,p,q1,q)
      temp Tpppp(p3,p2,p1,p)
      temp T1pppp(p3,p2,p1,p)
      temp T2pppp(p3,p2,p1,p)
      temp TSpppp(p3,p2,p1,p)
      temp Tqqqq(q3,q2,q1,q)
      temp T1qqqq(q3,q2,q1,q)
      temp T2qqqq(q3,q2,q1,q)
      temp TSqqqq(q3,q2,q1,q)
      temp Tppqq(p1,p,q1,q)
      temp T1ppqq(p1,p,q1,q)
      temp Tqqpp(q1,q,p1,p)
      temp T1qqpp(q1,q,p1,p)
      temp Tixxx(i,mu,nu,sigma)
      temp Tipxx(i,p,nu,sigma)
      temp Tipqx(i,p,q,sigma)
      temp Tipqq(i,p,q,q1)
#
      temp tmp1_aiai(a,i,a1,i1) 
      temp tmp2_aiai(a,i,a1,i1) 
      temp tmp3_aiai(a,i,a1,i1) 
      temp tmp1_bjbj(b,j,b1,j1) 
      temp tmp2_bjbj(b,j,b1,j1) 
      temp tmp3_bjbj(b,j,b1,j1) 
      temp tmp1_aibj(a,i,b,j) 
      temp tmp2_aibj(a,i,b,j) 
#
      temp Tai(a,i) 
      temp T1ai(a,i) 
      temp Tbj(b,j) 
      temp T1bj(b,j) 
#
      temp Taa(a,a1) 
      temp T1aa(a,a1) 
      temp Tbb(b,b1) 
      temp T1bb(b,b1) 
      temp Tae_a(a,a1) 
      temp Tae_b(b,b1) 
#
      temp Tia(i,a) 
      temp T1ia(i,a) 
      temp T2ia(i,a) 
      temp T3ia(i,a) 
      temp T4ia(i,a) 
      temp Tjb(j,b) 
      temp T1jb(j,b) 
      temp T2jb(j,b) 
      temp T3jb(j,b) 
      temp T4jb(j,b) 
      temp Tme_a(i,a) 
      temp Tme_b(j,b) 
#
      temp Tii(i,i1) 
      temp T1ii(i,i1) 
      temp Tjj(j,j1) 
      temp T1jj(j,j1) 
      temp Tmi_a(i,i1) 
      temp Tmi_b(j,j1) 
#
      temp Taiii(a,i,i1,i2) 
      temp T1aiii(a,i,i1,i2) 
#
      temp  Tiiii(i,i1,i2,i3) 
      temp T1iiii(i,i1,i2,i3) 
      temp T2iiii(i,i1,i2,i3) 
      temp TXiiii(i,i1,i2,i3) 
#
      temp  Tjjjj(j,j1,j2,j3) 
      temp T1jjjj(j,j1,j2,j3) 
      temp T2jjjj(j,j1,j2,j3) 
      temp TXjjjj(j,j1,j2,j3) 
      temp  Tbjjj(b,j,j1,j2) 
      temp T1bjjj(b,j,j1,j2) 
#
      temp  Tiijj(i,i1,j2,j3) 
      temp T1iijj(i,i1,j2,j3) 
#
      temp  tmp_aa(a,a1) 
      temp tmp1_aa(a,a1) 
      temp  tmp_ii(i,i1) 
      temp tmp1_ii(i,i1) 
#
      temp  Tiiai(i,i1,a,i2) 
      temp T1iiai(i,i1,a,i2) 
      temp T2iiai(i,i1,a,i2) 
      temp T3iiai(i,i1,a,i2) 
      temp T4iiai(i,i1,a,i2) 
      temp TSiiai(i,i1,a,i2) 
#
      temp  tmp_bb(b,b1) 
      temp tmp1_bb(b,b1) 
      temp  tmp_jj(j,j1) 
      temp tmp1_jj(j,j1) 
#
      temp  Tjjbj(j,j1,b,j2) 
      temp T1jjbj(j,j1,b,j2) 
      temp T2jjbj(j,j1,b,j2) 
      temp T3jjbj(j,j1,b,j2) 
      temp T4jjbj(j,j1,b,j2) 
      temp TSjjbj(j,j1,b,j2) 
# 
      temp T1aaai(a,a1,a2,i)  
      temp T2aaai(a,a1,a2,i)  
      temp Taaaa(a,a1,a2,a3)  
      temp T1aaaa(a,a1,a2,a3)  
#
      temp T1bbbj(b,b1,b2,j)  
      temp T2bbbj(b,b1,b2,j)  
      temp Tbbbb(b,b1,b2,b3)  
      temp T1bbbb(b,b1,b2,b3)  
#
      temp Taabb(a,a1,b,b1)  
      temp T1aabb(a,a1,b,b1)  
#
      temp R1aiai(a,i,a1,i1) 
      temp R2aiai(a,i,a1,i1) 
      temp R3aiai(a,i,a1,i1) 
      temp R4aiai(a,i,a1,i1) 
      temp R1bjbj(b,j,b1,j1) 
      temp R2bjbj(b,j,b1,j1) 
      temp R3bjbj(b,j,b1,j1) 
      temp R4bjbj(b,j,b1,j1) 
      temp R1aibj(a,i,b,j) 
      temp R2aibj(a,i,b,j) 
      temp R3aibj(a,i,b,j) 
      temp R4aibj(a,i,b,j) 
#
      temp T1iaai(i,a,a1,i1) 
      temp T2iaai(i,a,a1,i1) 
      temp T1jbbj(j,b,b1,j1) 
      temp T2jbbj(j,b,b1,j1) 
      temp T1iabj(i,a,b,j) 
      temp T2iabj(i,a,b,j) 
      temp Tjjpp(j,j1,p,p1) 
      temp T1jjpp(j,j1,p,p1) 
      temp T2jjpp(j,j1,p,p1) 
      temp  Tiiqq(i,i1,q,q1) 
      temp T1iiqq(i,i1,q,q1) 
      temp T2iiqq(i,i1,q,q1) 
      temp  Tjjai(j,j1,a,i) 
      temp T1jjai(j,j1,a,i) 
      temp T2jjai(j,j1,a,i) 
      temp  Tiibj(i,i1,b,j) 
      temp T1iibj(i,i1,b,j) 
      temp T2iibj(i,i1,b,j) 
      temp  Tjbai(j,b,a,i)  
      temp T1jbai(j,b,a,i)  
      temp T2jbai(j,b,a,i)  
      temp  Taijj(a,i,j,j1) 
      temp T1aijj(a,i,j,j1) 
      temp Tqqip(a,i,b,b1)  
#
      temp T1iibb(i,i1,b,b1) 
      temp  Tjjaa(j,j1,a,a1) 
      temp T1jjaa(j,j1,a,a1) 
      temp  Tjjii(j,j1,i,i1) 
#
      temp Taibb(a,i,b,b1)
      temp T1aibb(a,i,b,b1)
      temp Tbjaa(b,j,a,a1)
      temp T1bjaa(b,j,a,a1)
      temp T1jbii(j,b,i,i1)
      temp Tiajj(i,a,j,j1)
      temp T1iajj(i,a,j,j1)
      temp  Taiaa(a1,i,a2,a) 
      temp T1aiaa(a1,i,a2,a) 
      temp  Tbjbb(b1,j,b2,b) 
      temp T1bjbb(b1,j,b2,b) 
      temp Tjibi(j,i,b,i1) 
      temp Tbiba(b,i,b1,a) 
      temp Tjiba(j,i,b,a) 
#
# Declare distributed arrays 
# -------------------------- 
#
      served T2new_aa(a,i,a1,i1)
      served T2new_bb(b,j,b1,j1)
      served T2new_ab(a,i,b,j)
      served T2old_aa(a,i,a1,i1)
      served T2old_bb(b,j,b1,j1)
      served T2old_ab(a,i,b,j)
      served Tau_aa(a,i,a1,i1)
      served Tau_bb(b,j,b1,j1)
      served Tau_ab(a,i,b,j)
      served Taup_aa(a,i,a1,i1)
      served Taup_bb(b,j,b1,j1)
      served Taup_ab(a,i,b,j)
      served saiai(a,i,a1,i1) 
      served saibj(a,i,b1,j1) 
      served sbjbj(b,j,b1,j1) 
#
# Declare served arrays 
# --------------------- 
#
      temp AOINT(mu,nu,lambda,sigma) 
#
# ---------------------------------------
#
      temp TXaiai(a,i,nu,i1)
      temp TYaiai(a,i,a1,i1)
      temp TXbjbj(b,j,nu,j1)
      temp TYbjbj(b,j,b1,j1)
      temp TXaibj(a,i,nu,j)
      temp TYaibj(a,i,b,j)
#
      distributed F1me_a(i,a)
      distributed F1me_b(j,b)
#
      distributed F1ae_a(a,a1)
      distributed F1ae_b(b,b1)
#
      distributed F1mi_a(i,i1)
      distributed F1mi_b(j,j1)
#
      distributed W1minj_aa(i,i1,i2,i3)
      distributed W1minj_bb(j,j1,j2,j3)
      distributed W1minj_ab(i,i1,j,j1)
#
      served W2mebj_aa(i,a,a1,i1)
      served W2mebj_bb(j,b,b1,j1)
      served W2mebj_ab(i,a,b,j)
      served W2mebj_ba(j,b,a,i)
      served W2mjbe_ab(i,i1,b,b1)
      served W2mjbe_ba(j,j1,a,a1)
#
      served W1mebj_aa(i,a,a1,i1)
      served W1mebj_bb(j,b,b1,j1)
      served W1mebj_ab(i,a,b,j)
      served W1mebj_ba(j,b,a,i)
      served W1mjbe_ab(i,i1,b,b1)
      served W1mjbe_ba(j,j1,a,a1)
#
      served W1imen_aa(i,i1,a,i2)
      served W1imen_bb(j,j1,b,j2)
      served W1imen_ab(i,i1,b,j)
      served W1imen_ba(j,j1,a,i)
#
      served W1eafm_aa(a,a1,a2,i)
      served W1eafm_bb(b,b1,b2,j)
      served W1eafm_ab(a1,a,b,j)
      served W1eafm_ba(b1,b,a,i)
#
      distributed l1a_old(i,a) 
      distributed l1a_new(i,a) 
      distributed l1b_old(j,b) 
      distributed l1b_new(j,b) 
#
      served L2old_aa(i,a,i1,a1) 
      served L2new_aa(i,a,i1,a1) 
      served L2old_bb(j,b,j1,b1) 
      served L2new_bb(j,b,j1,b1) 
      served L2old_ab(i,a,j,b) 
      served L2new_ab(i,a,j,b) 
#
# Procedure specific arrays used used: 
# ------------------------------------ 
#
# Local arrays: 
# ------------- 
#
      local ZAA(i,mu,i1,a1) 
      local ZAB(i,mu,j,b) 
      local ZBB(j,mu,j1,b1) 
      local Liaix(i,a,i1,nu) 
      local Ljbjx(j,b,j1,nu) 
      local Liajx(i,a,j,nu) 
#
      local Laaaa(a3,a2,a,a1) 
      local Lbbbb(b3,b2,b,b1) 
      local Laabb(a,a1,b,b1) 
      local Lbbaa(b,b1,a,a1) 
      local Liaaa(i,a1,a3,a2) 
      local Ljbbb(j,b1,b3,b2) 
      local Liabb(i,a1,b,b1) 
      local Ljbaa(j,b1,a,a1) 
# 
      local Liiia(i,i2,i1,a2) 
      local Liiii(i,i2,i1,i3) 
      local Ljjjb(j,j2,j1,b2) 
      local Ljjjj(j,j2,j1,j3) 
      local Liijb(i,i1,j,b1) 
      local Liajj(i,a1,j,j1) 
      local Liijj(i,i1,j,j1) 
#
      local L1aiai(a,i,a2,i1)
      local L1aibj(a1,i,b,j)
      local L1bjbj(b1,j1,b2,j)
      local L2aibj(a,i,b1,j)
      local L2aiai(a2,i1,a,i2)
      local L3aibj(a,i1,b,j)
      local L2bjbj(b2,j1,b,j2)
      local L4aibj(a,i,b,j1)
      local L3aiai(a1,i1,a2,i)
      local L5aibj(a1,i,b,j)
      local L3bjbj(b1,j1,b2,j)
      local L6aibj(a,i,b1,j)
      local L4aiai(a,i1,a1,i2)
      local L7aibj(a,i1,b,j)
      local L4bjbj(b,j1,b1,j2)
      local L5aiai(a,i,b,j1)
      local Liaia(i1,a,i2,a1)
      local Liajb(i1,a,j,b)
#
      local L1iiii(i,i3,i2,i4)
      local L1iiia(i4,i2,i3,a)
      local L1jjjj(j,j3,j2,j4)
      local L1jjjb(j4,j2,j3,b)
      local L1jjii(j,j1,i2,i1)
      local L1jbii(j1,b,i1,i2) 
      local L1iajj(i1,a,j1,j2)
      local L1iijj(i,i1,j2,j1) 
#
      distributed Xiiia(i,i1,i2,a) 
      distributed Xiajj(i,a,j,j1) 
      distributed Xiibj(i,i1,b,j) 
      distributed Xjjjb(j,j1,j2,b) 
      distributed Xjbii(j,b,i,i1) 
      distributed Xjjai(j,j1,a,i) 
#
      temp Tbbaa(b,b1,a,a1) 
      temp Tjbaa(j,b1,a2,a3) 
      temp Tjbbb(j,b1,b2,b3) 
      temp Tiabb(i,a1,b2,b3) 
      temp Tiaaa(i,a1,a2,a3) 
      temp Tiijb(i,i1,j,b) 
      temp Tixia(i,mu,i1,a1) 
      temp Tixjb(i,mu,j,b) 
      temp Tjxjb(j,mu,j1,b) 
      temp Tixix(i,mu,i1,nu) 
      temp Tixjx(i,mu,j,nu) 
      temp Tjxjx(j,mu,j1,nu) 
      temp Yaa(i,mu,i1,nu) 
      temp Yab(i,mu,j,nu) 
      temp Ybb(j,mu,j1,nu) 
      temp Tiaix(i,a,i1,nu)  
      temp Tiajx(i,a,j1,nu)  
      temp Tjbjx(j,b,j1,nu)  
      temp Tiiia(i,i2,i1,a)
      temp Tjjjb(j,j2,j1,b)
      temp Ljbjb(j,b,j1,b1)  
      temp Tbjai(b,j,a,i) 
      temp T1bjai(b,j,a,i) 
      temp Tjbia(j,b,i,a) 
      temp Tjbix(j,b,i,mu) 
      temp Tijaj(i,j,a,j1) 
      temp T1ijaj(i,j,a,j1) 
      temp Tijib(i,j,i1,b)  
      temp Tajab(a,j,a1,b) 
      temp Tijab(i,j,a,b) 
      temp T1ijab(i,j,a,b) 
      temp Tibab(i,b,a,b1) 
      temp Tjija(j,i,j1,a) 
      temp Tjaba(j,a,b,a1) 
#
# Distributed arrays 
# ------------------ 
# 
      served Z2AA(i,mu,i1,nu) 
      served Z2AB(i,mu,j1,nu) 
      served Z2BB(j,mu,j1,nu) 
      served L2AO_aa(i,mu,i1,nu) 
      served L2AO_ab(i,mu,j1,nu) 
      served L2AO_bb(j,mu,j1,nu) 
      distributed Iiiia(i,i1,i2,a2) 
      distributed Iiiii(i,i1,i2,i3) 
      distributed Ijjjb(j,j1,j2,b2) 
      distributed Ijjjj(j,j1,j2,j3) 
      distributed Iiijb(i,i1,j,b) 
      distributed Iiajj(i,a,j,j1) 
      distributed Iiijj(i,i1,j,j1) 
#
# Declare scalars 
# --------------- 
#
      scalar etemp
      scalar etemp1 
      scalar esum
      scalar esuma
      scalar esumb
      scalar esumab
      scalar ecorraa
      scalar ecorrbb
      scalar ecorrab
      scalar ecorrT
      scalar ecrit 
      scalar eold 
      scalar ediff 
      scalar mp2_energy
#
# Arrays/Scalars used exclusively in DIIS procedure. 
# -------------------------------------------------- 
#
       served D0iaia(i,a,i1,a1)  
       served D1iaia(i,a,i1,a1)  
       served D2iaia(i,a,i1,a1)  
       served D3iaia(i,a,i1,a1)  
       served D4iaia(i,a,i1,a1)  
       served D5iaia(i,a,i1,a1)  
#
       served D0jbjb(j,b,j1,b1)  
       served D1jbjb(j,b,j1,b1)  
       served D2jbjb(j,b,j1,b1)  
       served D3jbjb(j,b,j1,b1)  
       served D4jbjb(j,b,j1,b1)  
       served D5jbjb(j,b,j1,b1)  
#
       served D0iajb(i,a,j,b)  
       served D1iajb(i,a,j,b)  
       served D2iajb(i,a,j,b)  
       served D3iajb(i,a,j,b)  
       served D4iajb(i,a,j,b)  
       served D5iajb(i,a,j,b)  
#
       distributed D0ia(i,a)  
       distributed D1ia(i,a)  
       distributed D2ia(i,a)  
       distributed D3ia(i,a)  
       distributed D4ia(i,a)  
       distributed D5ia(i,a)  
#
       distributed D0jb(j,b)   
       distributed D1jb(j,b)   
       distributed D2jb(j,b)   
       distributed D3jb(j,b)   
       distributed D4jb(j,b)   
       distributed D5jb(j,b)   
#
       distributed e1ia(i,a)  
       distributed e2ia(i,a)  
       distributed e3ia(i,a)  
       distributed e4ia(i,a)  
       distributed e5ia(i,a)  
#
       distributed e1jb(j,b)   
       distributed e2jb(j,b)   
       distributed e3jb(j,b)   
       distributed e4jb(j,b)   
       distributed e5jb(j,b)   
#
       served e1iaia(i,a,i1,a1)  
       served e2iaia(i,a,i1,a1)  
       served e3iaia(i,a,i1,a1)  
       served e4iaia(i,a,i1,a1)  
       served e5iaia(i,a,i1,a1)  
#
       served e1jbjb(j,b,j1,b1)  
       served e2jbjb(j,b,j1,b1)  
       served e3jbjb(j,b,j1,b1)  
       served e4jbjb(j,b,j1,b1)  
       served e5jbjb(j,b,j1,b1)  
#
       served e1iajb(i,a,j,b)  
       served e2iajb(i,a,j,b)  
       served e3iajb(i,a,j,b)  
       served e4iajb(i,a,j,b)  
       served e5iajb(i,a,j,b)  
#
       scalar b11
       scalar b12
       scalar b13
       scalar b14
       scalar b15
       scalar b16
       scalar b17
       scalar b18
       scalar b19
       scalar b110
#
       scalar b22
       scalar b23
       scalar b24
       scalar b25
       scalar b26
       scalar b27
       scalar b28
       scalar b29
       scalar b210
#
       scalar b33
       scalar b34
       scalar b35
       scalar b36
       scalar b37
       scalar b38
       scalar b39
       scalar b310
       scalar b44
       scalar b45
       scalar b46
       scalar b47
       scalar b48
       scalar b49
       scalar b410
#
       scalar b55
       scalar b56
       scalar b57
       scalar b58
       scalar b59
       scalar b510
#
       scalar b66
       scalar b67
       scalar b68
       scalar b69
       scalar b610
#
       scalar b77
       scalar b78
       scalar b79
       scalar b710
#
       scalar b88
       scalar b89
       scalar b810
#
       scalar b99
       scalar b910
#
       scalar b1010
#
       scalar Tb11
       scalar Tb12
       scalar Tb13
       scalar Tb14
       scalar Tb15
       scalar Tb16
       scalar Tb17
       scalar Tb18
       scalar Tb19
       scalar Tb110
#
       scalar Tb22
       scalar Tb23
       scalar Tb24
       scalar Tb25
       scalar Tb26
       scalar Tb27
       scalar Tb28
       scalar Tb29
       scalar Tb210
#
       scalar Tb33
       scalar Tb34
       scalar Tb35
       scalar Tb36
       scalar Tb37
       scalar Tb38
       scalar Tb39
       scalar Tb310
       scalar Tb44
       scalar Tb45
       scalar Tb46
       scalar Tb47
       scalar Tb48
       scalar Tb49
       scalar Tb410
#
       scalar Tb55
       scalar Tb56
       scalar Tb57
       scalar Tb58
       scalar Tb59
       scalar Tb510
#
       scalar Tb66
       scalar Tb67
       scalar Tb68
       scalar Tb69
       scalar Tb610
#
       scalar Tb77
       scalar Tb78
       scalar Tb79
       scalar Tb710
#
       scalar Tb88
       scalar Tb89
       scalar Tb810
#
       scalar Tb99
       scalar Tb910
#
       scalar Tb1010
#
       scalar c1 
       scalar c2 
       scalar c3 
       scalar c4 
       scalar c5 
       scalar c6 
       scalar c7 
       scalar c8 
       scalar c9 
       scalar c10  
#
#
#    ------------------------------------------------------------------------
#
     PROC READ_2EL
#
#    ------------------------------------------------------------------------
#
      execute server_barrier
      execute list_to_blocks                VSpipi
      execute list_to_blocks                Vaaii
      execute list_to_blocks                Viaai
      execute list_to_blocks                VSaaai
      execute list_to_blocks                VSqjqj
      execute list_to_blocks                Vbbjj
      execute list_to_blocks                Vjbbj
      execute list_to_blocks                VSbbbj
      execute list_to_blocks                Vbbii
      execute list_to_blocks                Vjbii
      execute list_to_blocks                Vbbai
      execute list_to_blocks                Vpiqj
      execute list_to_blocks                Vaajj
      execute list_to_blocks                Viabj
      execute list_to_blocks                Vaabj
#
      execute list_to_blocks t1a_old
      execute list_to_blocks t1b_old
      execute list_to_blocks T2old_aa
      execute list_to_blocks T2old_ab
      execute list_to_blocks T2old_bb

      execute list_to_blocks sai  
      execute list_to_blocks sbj  
      execute list_to_blocks saiai  
      execute list_to_blocks saibj  
      execute list_to_blocks sbjbj  
#
#     One-particle intermediates
#     --------------------------
#
      execute list_to_blocks Iij_aa
      execute list_to_blocks Iij_bb
      execute list_to_blocks Iia_aa
      execute list_to_blocks Iia_bb
      execute list_to_blocks Iab_aa
      execute list_to_blocks Iab_bb
      execute list_to_blocks Iai_aa
      execute list_to_blocks Iai_bb
#
#     Contribution to one-density
#     ---------------------------
#
      execute list_to_blocks Daa
      execute list_to_blocks Dbb
      execute list_to_blocks Dii
      execute list_to_blocks Djj
      execute list_to_blocks DDai
      execute list_to_blocks DDbj
#
      execute list_to_blocks Gaaai
      execute list_to_blocks Gbbbj
      execute list_to_blocks Gaabj
      execute list_to_blocks Gbbai
#
      execute read_list_to_blocks
      execute server_barrier
#
#    ------------------------------------------------------------------------
#
     ENDPROC READ_2EL
#
#    ------------------------------------------------------------------------

#    ------------------------------------------------------------------------
#
     PROC WRITE_2EL
#
#    ------------------------------------------------------------------------
#
      execute server_barrier
      execute blocks_to_list                VSpipi(p,i,p1,i1)
      execute blocks_to_list                Vaaii
      execute blocks_to_list                Viaai
      execute blocks_to_list                VSaaai
      execute blocks_to_list                VSqjqj(q,j,q1,j1)
      execute blocks_to_list                Vbbjj
      execute blocks_to_list                Vjbbj
      execute blocks_to_list                VSbbbj
      execute blocks_to_list                Vbbii
      execute blocks_to_list                Vjbii
      execute blocks_to_list                Vbbai
      execute blocks_to_list                Vpiqj(p,i,q,j)
      execute blocks_to_list                Vaajj
      execute blocks_to_list                Viabj
      execute blocks_to_list                Vaabj
#
#    ------------------------------------------------------------------------
#
     ENDPROC WRITE_2EL
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------ 
# 
      PROC TAUAA 
#     ----------
#
      PARDO a, i, a1, i1
#
            REQUEST T2old_aa(a,i,a1,i1) i1
            GET t1a_old(a1,i1)
            GET t1a_old(a1,i)
            GET t1a_old(a,i1)
            GET t1a_old(a,i)
#
            tai(a1,i1)                 = t1a_old(a1,i1)
            tmp1_aiai(a,i,a1,i1)       = t1a_old(a,i)^tai(a1,i1)
            tai(a1,i)                  = t1a_old(a1,i)
            tmp2_aiai(a,i,a1,i1)       = t1a_old(a,i1)^tai(a1,i)
            tmp1_aiai(a,i,a1,i1)      -= tmp2_aiai(a,i,a1,i1)
#
            tmp3_aiai(a,i,a1,i1)       = tmp1_aiai(a,i,a1,i1)
            tmp3_aiai(a,i,a1,i1)      += T2old_aa(a,i,a1,i1)
            PREPARE Tau_aa(a,i,a1,i1)  = tmp3_aiai(a,i,a1,i1)
#
            tmp1_aiai(a,i,a1,i1)      *= 0.5
            tmp1_aiai(a,i,a1,i1)      += T2old_aa(a,i,a1,i1)
            PREPARE Taup_aa(a,i,a1,i1) = tmp1_aiai(a,i,a1,i1)
#
      ENDPARDO a, i, a1, i1
#
      ENDPROC TAUAA
#     -------------
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
      PROC TAUBB
#     ----------
#
      PARDO b, j, b1, j1
#
            REQUEST T2old_bb(b,j,b1,j1) j1
            GET t1b_old(b1,j1)
            GET t1b_old(b1,j)
            GET t1b_old(b,j1)
            GET t1b_old(b,j)
#
            tbj(b1,j1)                 = t1b_old(b1,j1)
            tmp1_bjbj(b,j,b1,j1)       = t1b_old(b,j)^tbj(b1,j1)
            tbj(b1,j)                  = t1b_old(b1,j)
            tmp2_bjbj(b,j,b1,j1)       = t1b_old(b,j1)^tbj(b1,j)
            tmp1_bjbj(b,j,b1,j1)      -= tmp2_bjbj(b,j,b1,j1)
#
            tmp3_bjbj(b,j,b1,j1)       = tmp1_bjbj(b,j,b1,j1)
            tmp3_bjbj(b,j,b1,j1)      += T2old_bb(b,j,b1,j1)
            PREPARE Tau_bb(b,j,b1,j1)  = tmp3_bjbj(b,j,b1,j1)
#
            tmp1_bjbj(b,j,b1,j1)      *= 0.5
            tmp1_bjbj(b,j,b1,j1)      += T2old_bb(b,j,b1,j1)
            PREPARE Taup_bb(b,j,b1,j1) = tmp1_bjbj(b,j,b1,j1)
#
      ENDPARDO b, j, b1, j1
#
      ENDPROC TAUBB
#     -------------
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
      PROC TAUAB
#     ----------
#
      PARDO a, i, b, j
#
            REQUEST T2old_ab(a,i,b,j) j
            GET t1a_old(a,i)
            GET t1b_old(b,j)
#
            tmp1_aibj(a,i,b,j)       = t1a_old(a,i)^t1b_old(b,j)
            tmp2_aibj(a,i,b,j)       = tmp1_aibj(a,i,b,j)
            tmp2_aibj(a,i,b,j)      *= 0.5
#
            tmp1_aibj(a,i,b,j)      += T2old_ab(a,i,b,j)
            tmp2_aibj(a,i,b,j)      += T2old_ab(a,i,b,j)
            PREPARE Tau_ab(a,i,b,j)  = tmp1_aibj(a,i,b,j)
            PREPARE Taup_ab(a,i,b,j) = tmp2_aibj(a,i,b,j)
#
      ENDPARDO a, i, b, j
#
      ENDPROC TAUAB
#     -------------
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
      PROC TAU
#     -------- 
#
           CALL TAUAA
           CALL TAUBB
           CALL TAUAB
#
      ENDPROC TAU
#     ----------- 
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
      PROC CREAT1INTER 
#     ---------------- 
#
         CREATE Fme_a
         CREATE Fme_b
#
         CREATE F1ae_a
         CREATE F1ae_b
#
         CREATE F1mi_a
         CREATE F1mi_b
#
         CREATE D0ia
         CREATE D1ia
         CREATE D2ia
         CREATE D3ia
         CREATE D4ia
         CREATE D5ia
#
         CREATE D0jb
         CREATE D1jb
         CREATE D2jb
         CREATE D3jb
         CREATE D4jb
         CREATE D5jb
#
         CREATE e1ia
         CREATE e2ia
         CREATE e3ia
         CREATE e4ia
         CREATE e5ia
#
         CREATE e1jb
         CREATE e2jb
         CREATE e3jb
         CREATE e4jb
         CREATE e5jb
#
      ENDPROC CREAT1INTER 
#     ------------------- 
#
      PROC CREATLAMBDAOLD 
#     ------------------- 
#
         CREATE l1a_old
         CREATE l1b_old
#
      ENDPROC CREATLAMBDAOLD  
#     ----------------------  
#
      PROC CREATLAMBDANEW 
#     ------------------- 
#
         CREATE l1a_new
         CREATE l1b_new
#
         CREATE Gae_a 
         CREATE Gae_b 
         CREATE Gmi_a 
         CREATE Gmi_b 
#
      ENDPROC CREATLAMBDANEW  
#     ---------------------- 
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
      PROC F1AEA
#     ----------
#
#     Local arrays used:
#     ------------------ 
#     local L1aiai(a,i,a2,i1) 
#     local L1aibj(a1,i,b,j) 
#
      PARDO a, a1 
#
            Tae_a(a,a1) = 0.0
#
            DO i 
#
               GET t1a_old(a,i) 
               GET Fme_a(i,a1) 
#
               Taa(a,a1)    = t1a_old(a,i)*Fme_a(i,a1)  
               Taa(a,a1)   *= 0.5  
               Tae_a(a,a1) -=  Taa(a,a1)  
#
               DO a2 
#
                  REQUEST VSaaai(a1,a,a2,i) i  
                  GET t1a_old(a2,i) 
#
                  Taa(a,a1)    = VSaaai(a1,a,a2,i)*t1a_old(a2,i)  
                  Tae_a(a,a1) +=  Taa(a,a1)  
#
#                 Initialize W1eafm_aa Intermediate. 
#                 ---------------------------------- 
                  PREPARE W1eafm_aa(a1,a,a2,i) = VSaaai(a1,a,a2,i)
#
               ENDDO a2 
#
            ENDDO i 
#
            DO j 
            DO b 
#
               REQUEST Vaabj(a1,a,b,j) j  
               GET t1b_old(b,j) 
#
               Taa(a,a1)    = Vaabj(a1,a,b,j)*t1b_old(b,j) 
               Tae_a(a,a1) +=  Taa(a,a1)  
#
#              Initialize the W1eafm_ab intermediate. 
#              -------------------------------------- 
               PREPARE W1eafm_ab(a1,a,b,j) = Vaabj(a1,a,b,j) 
#
            ENDDO b 
            ENDDO j 
#
            PUT F1ae_a(a,a1) += Tae_a(a,a1) 
#
      ENDPARDO a, a1 
#
      PARDO i, i1, a2  
#
            allocate L1aiai(*,i,a2,i1) 
#
            DO a 
#
               REQUEST Taup_aa(a,i,a2,i1) i1
               L1aiai(a,i,a2,i1) = Taup_aa(a,i,a2,i1) 
#
            ENDDO a 
#
            DO a1 
#
               REQUEST VSpipi(a1,i1,a2,i) i1 
#
               DO a 
#
                  Taa(a,a1)         = L1aiai(a,i,a2,i1)*VSpipi(a1,i1,a2,i) 
                  Taa(a,a1)        *= 0.5 
                  PUT F1ae_a(a,a1) +=  Taa(a,a1)  
#
               ENDDO a 
#
            ENDDO a1 
#
            deallocate L1aiai(*,i,a2,i1) 
#
      ENDPARDO i, i1, a2  
#
      PARDO i, j, b 
#
            allocate L1aibj(*,i,b,j) 
#
            DO a1 
#
               REQUEST Vpiqj(a1,i,b,j)  j 
               L1aibj(a1,i,b,j) = Vpiqj(a1,i,b,j) 
#
            ENDDO a1 
#
            DO a 
#
               REQUEST Taup_ab(a,i,b,j) j  
#
               DO a1   
#
                  Taa(a,a1)         = Taup_ab(a,i,b,j)*L1aibj(a1,i,b,j) 
                  Taa(a,a1)        *= -1.0  
                  PUT F1ae_a(a,a1) += Taa(a,a1) 
#
               ENDDO a1  
#
            ENDDO a  
#
            deallocate L1aibj(*,i,b,j) 
#
      ENDPARDO i, j, b  
#
      ENDPROC F1AEA
#     -------------
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
      PROC F1AEB
#     ----------
#
#     Local arrays used:
#     ------------------ 
#     local L1bjbj(b1,j1,b2,j)  
#     local L2aibj(a,i,b1,j) 
#
      PARDO b, b1 
#
            Tae_b(b,b1) = 0.0
#
            DO j 
#
               GET t1b_old(b,j) 
               GET Fme_b(j,b1) 
#
               Tbb(b,b1)    = t1b_old(b,j)*Fme_b(j,b1)  
               Tbb(b,b1)   *= 0.5  
               Tae_b(b,b1) -=  Tbb(b,b1)  
#
               DO b2 
#
                  REQUEST VSbbbj(b1,b,b2,j) j  
                  GET t1b_old(b2,j) 
#
                  Tbb(b,b1)    = VSbbbj(b1,b,b2,j)*t1b_old(b2,j) 
                  Tae_b(b,b1) +=  Tbb(b,b1)  
#
#                 Initialize W1eafm_bb Intermediate. 
#                 ---------------------------------- 
                  PREPARE W1eafm_bb(b1,b,b2,j) = VSbbbj(b1,b,b2,j)
#
               ENDDO b2 
#
            ENDDO j 
#
            DO i 
            DO a 
#
               REQUEST Vbbai(b1,b,a,i) i  
               GET t1a_old(a,i) 
#
               Tbb(b,b1)    = Vbbai(b1,b,a,i)*t1a_old(a,i) 
               Tae_b(b,b1) +=  Tbb(b,b1)  
#
#              Initialize the W1eafm_ba intermediate. 
#              -------------------------------------- 
               PREPARE W1eafm_ba(b1,b,a,i) = Vbbai(b1,b,a,i) 
#
            ENDDO a 
            ENDDO i 
#
            PUT F1ae_b(b,b1) += Tae_b(b,b1) 
#
      ENDPARDO b, b1 
#
      PARDO j, j1, b2  
#
            allocate L1bjbj(*,j1,b2,j) 
#
            DO b1 
#
               REQUEST              VSqjqj(b1,j1,b2,j) j1 
               L1bjbj(b1,j1,b2,j) = VSqjqj(b1,j1,b2,j) 
#
            ENDDO b1 
#
            DO b 
#
               REQUEST Taup_bb(b,j,b2,j1) j1 
#
               DO b1 
#
                  Tbb(b,b1)         = Taup_bb(b,j,b2,j1)*L1bjbj(b1,j1,b2,j) 
                  Tbb(b,b1)        *= 0.5 
                  PUT F1ae_b(b,b1) +=  Tbb(b,b1)  
#
               ENDDO b1 
#
            ENDDO b 
#
            deallocate L1bjbj(*,j1,b2,j) 
#
      ENDPARDO j, j1, b2  
#
      PARDO i, j, a  
#
            allocate L2aibj(a,i,*,j) 
#
            DO b1 
#
               REQUEST Vpiqj(a,i,b1,j)  j
               L2aibj(a,i,b1,j) = Vpiqj(a,i,b1,j)
#
            ENDDO b1 
#
            DO b  
#
               REQUEST Taup_ab(a,i,b,j) j 
#
               DO b1  
#
                  Tbb(b,b1)         = Taup_ab(a,i,b,j)*L2aibj(a,i,b1,j) 
                  Tbb(b,b1)        *= -1.0  
                  PUT F1ae_b(b,b1) += Tbb(b,b1) 
#
               ENDDO b1  
#
            ENDDO b 
#
            deallocate L2aibj(a,i,*,j) 
#
      ENDPARDO i, j, a  
#
      ENDPROC F1AEB
#     -------------
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
      PROC F1AE
#     --------
         CALL F1AEA 
         CALL F1AEB 
      ENDPROC F1AE
#     ------------ 
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
      PROC FMEA
#     ----------
#
      PARDO i, a, i1, a1  
#
            REQUEST VSpipi(a,i,a1,i1) i1  
            GET t1a_old(a1,i1) 
#
            Tia(i,a)        = VSpipi(a,i,a1,i1)*t1a_old(a1,i1) 
            PUT Fme_a(i,a) += Tia(i,a) 
#
      ENDPARDO i, a, i1, a1  
#
      PARDO i, a, j, b  
#
            REQUEST Vpiqj(a,i,b,j) j  
            GET t1b_old(b,j) 
#
            Tia(i,a)        = Vpiqj(a,i,b,j)*t1b_old(b,j) 
            PUT Fme_a(i,a) += Tia(i,a) 
#
      ENDPARDO i, a, j, b  
# 
      ENDPROC FMEA
#     -------------
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
      PROC FMEB
#     ----------
#
      PARDO j, b, j1, b1  
#
            REQUEST VSqjqj(b,j,b1,j1) j1  
            GET t1b_old(b1,j1) 
#
            Tjb(j,b)        = VSqjqj(b,j,b1,j1)*t1b_old(b1,j1) 
            PUT Fme_b(j,b) += Tjb(j,b) 
#
      ENDPARDO j, b, j1, b1  
#
      PARDO j, b, i, a  
# 
            REQUEST Vpiqj(a,i,b,j) j  
            GET t1a_old(a,i) 
#
            Tjb(j,b)        = Vpiqj(a,i,b,j)*t1a_old(a,i) 
            PUT Fme_b(j,b) += Tjb(j,b) 
#
      ENDPARDO j, b, i, a  
# 
      ENDPROC FMEB
#     -------------
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
      PROC FME
#     ----------
         CALL FMEA
         CALL FMEB
      ENDPROC FME
#     ----------- 
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
      PROC F1MIA
#     ----------
#
#     Local arrays used:
#     ------------------ 
#     local L2aiai(a2,i1,a,i2) 
#     local L3aibj(a,i1,b,j) 
#
      PARDO i1, i, a    
#
            GET t1a_old(a,i) 
            GET Fme_a(i1,a) 
#
            Tii(i1,i)         = Fme_a(i1,a)*t1a_old(a,i) 
            Tii(i1,i)        *= 0.5 
            PUT F1mi_a(i1,i) += Tii(i1,i) 
#
            DO i2 
#
               REQUEST VSpipi(a,i2,i,i1) i1  
               GET t1a_old(a,i2) 
#
               Tii(i1,i)         = VSpipi(a,i2,i,i1)*t1a_old(a,i2) 
               PUT F1mi_a(i1,i) += Tii(i1,i) 
#
            ENDDO i2 
#
      ENDPARDO i1, i, a  
#
      PARDO a, a2, i2  
#
            allocate L2aiai(a2,*,a,i2) 
#
            DO i1 
#
               REQUEST              VSpipi(a2,i1,a,i2) i2 
               L2aiai(a2,i1,a,i2) = VSpipi(a2,i1,a,i2) 
#
            ENDDO i1 
#
            DO i 
#
               REQUEST Taup_aa(a2,i,a,i2) i2  
#
               DO i1  
#
                  Tii(i1,i)         = L2aiai(a2,i1,a,i2)*Taup_aa(a2,i,a,i2) 
                  Tii(i1,i)        *= 0.5 
                  PUT F1mi_a(i1,i) += Tii(i1,i) 
#
               ENDDO i1  
#
            ENDDO i 
#
            deallocate L2aiai(a2,*,a,i2) 
#
      ENDPARDO a, a2, i2  
#
      PARDO i1, i, j, b  
#
            REQUEST Vpiqj(i,i1,b,j) j 
            GET     t1b_old(b,j) 
#
            Tii(i1,i)         = Vpiqj(i,i1,b,j)*t1b_old(b,j) 
            PUT F1mi_a(i1,i) += Tii(i1,i) 
#
      ENDPARDO i1, i, j, b  
# 
      PARDO a, b, j   
#
            allocate L3aibj(a,*,b,j) 
#
            DO i1 
# 
               REQUEST            Vpiqj(a,i1,b,j)  j  
               L3aibj(a,i1,b,j) = Vpiqj(a,i1,b,j) 
#
            ENDDO i1 
#
            DO i 
#
               REQUEST Taup_ab(a,i,b,j) j 
#
               DO i1 
#
                  Tii(i1,i)         = Taup_ab(a,i,b,j)*L3aibj(a,i1,b,j) 
                  PUT F1mi_a(i1,i) += Tii(i1,i) 
#
               ENDDO i1 
#
            ENDDO i 
#
            deallocate L3aibj(a,*,b,j) 
#
      ENDPARDO a, b, j  
# 
      ENDPROC F1MIA
#     -------------
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
      PROC F1MIB
#     ----------
#     Local arrays used:
#     ------------------ 
#     local L2bjbj(b2,j1,b,j2) 
#     local L4aibj(a,i,b,j1) 
#
      PARDO j1, j, b  
#
            GET t1b_old(b,j) 
            GET Fme_b(j1,b) 
#
            Tjj(j1,j)         = Fme_b(j1,b)*t1b_old(b,j) 
            Tjj(j1,j)        *= 0.5 
            PUT F1mi_b(j1,j) += Tjj(j1,j) 
#
            DO j2 
#
               REQUEST VSqjqj(b,j2,j,j1) j1  
               GET t1b_old(b,j2) 
#
               Tjj(j1,j)         = VSqjqj(b,j2,j,j1)*t1b_old(b,j2) 
               PUT F1mi_b(j1,j) += Tjj(j1,j) 
#
            ENDDO j2 
#
      ENDPARDO j1, j, b  
#
      PARDO b, b2, j2  
#
            allocate L2bjbj(b2,*,b,j2) 
#
            DO j1 
#
               REQUEST              VSqjqj(b2,j1,b,j2) j2
               L2bjbj(b2,j1,b,j2) = VSqjqj(b2,j1,b,j2) 
#
            ENDDO j1 
#
            DO j 
#
               REQUEST Taup_bb(b2,j,b,j2) j2  
#
               DO j1  
#
                  Tjj(j1,j)         = L2bjbj(b2,j1,b,j2)*Taup_bb(b2,j,b,j2) 
                  Tjj(j1,j)        *= 0.5 
                  PUT F1mi_b(j1,j) += Tjj(j1,j) 
#
               ENDDO j1  
#
            ENDDO j 
#
            deallocate L2bjbj(b2,*,b,j2) 
#
      ENDPARDO b, b2, j2  
#
      PARDO j1, j, i, a  
#
            REQUEST Vpiqj(a,i,j,j1) j1  
            GET t1a_old(a,i) 
#
            Tjj(j1,j)         = Vpiqj(a,i,j,j1)*t1a_old(a,i) 
            PUT F1mi_b(j1,j) += Tjj(j1,j) 
#
      ENDPARDO j1, j, i, a  
#
      PARDO a, b, i   
#
            allocate L4aibj(a,i,b,*) 
#
            DO j1 
#
               REQUEST            Vpiqj(a,i,b,j1) j1  
               L4aibj(a,i,b,j1) = Vpiqj(a,i,b,j1) 
#
            ENDDO j1 
#
            DO j  
#
               REQUEST Taup_ab(a,i,b,j) j 
# 
               DO j1 
#
                  Tjj(j1,j)         = Taup_ab(a,i,b,j)*L4aibj(a,i,b,j1) 
                  PUT F1mi_b(j1,j) += Tjj(j1,j) 
#
               ENDDO j1 
#
            ENDDO j 
#
            deallocate L4aibj(a,i,b,*) 
#
      ENDPARDO a, b, i  
#
      ENDPROC F1MIB
#     -------------
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
      PROC F1MI 
#     ----------
         CALL F1MIA 
         CALL F1MIB 
      ENDPROC F1MI 
#     ------------ 
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
      PROC GAEA
#     --------- 
#
#     local arrays used:
#     ------------------ 
#     local L3aiai(a1,i1,a2,i) 
#     local L5aibj(a1,i,b,j) 
#
      PARDO i, i1, a2  
#
            allocate L3aiai(*,i1,a2,i)  
#
            DO a1  
#
               REQUEST              T2old_aa(a1,i1,a2,i) i  
               L3aiai(a1,i1,a2,i) = T2old_aa(a1,i1,a2,i)   
#
            ENDDO a1  
#
            DO a  
#
               REQUEST L2old_aa(i1,a,i,a2)  i  
#
               DO a1  
#
                  T1aa(a,a1)       = L2old_aa(i1,a,i,a2)*L3aiai(a1,i1,a2,i)  
                  T1aa(a,a1)      *= -0.5 
                  PUT Gae_a(a,a1) += T1aa(a,a1) 
#
               ENDDO a1  
#
            ENDDO a  
#
            deallocate L3aiai(*,i1,a2,i)  
#
      ENDPARDO i, i1, a2     
#
      PARDO i, j, b  
#
            allocate L5aibj(*,i,b,j)  
#
            DO a1 
#
               REQUEST            T2old_ab(a1,i,b,j) j 
               L5aibj(a1,i,b,j) = T2old_ab(a1,i,b,j) 
#
            ENDDO a1 
#
            DO a 
#
               REQUEST L2old_ab(i,a,j,b) j 
#
               DO a1  
#
                  Taa(a,a1)        = L2old_ab(i,a,j,b)*L5aibj(a1,i,b,j)  
                  Taa(a,a1)       *= -1.0  
                  PUT Gae_a(a,a1) += Taa(a,a1) 
#
               ENDDO a1  
#
            ENDDO a 
# 
            deallocate L5aibj(*,i,b,j)  
#
      ENDPARDO i, j, b    
#
      ENDPROC GAEA
#     ------------ 
#
      PROC GAEB
#     --------- 
#
#     local arrays used:
#     ------------------ 
#     local L3bjbj(b1,j1,b2,j) 
#     local L6aibj(a,i,b1,j) 
#
      PARDO j, j1, b2  
#
            allocate L3bjbj(*,j1,b2,j)  
#
            DO b1  
#
               REQUEST              T2old_bb(b1,j1,b2,j) j  
               L3bjbj(b1,j1,b2,j) = T2old_bb(b1,j1,b2,j)   
#
            ENDDO b1  
#
            DO b  
#
               REQUEST L2old_bb(j1,b,j,b2)  j  
#
               DO b1  
#
                  T1bb(b,b1)       = L2old_bb(j1,b,j,b2)*L3bjbj(b1,j1,b2,j)  
                  T1bb(b,b1)      *= -0.5 
                  PUT Gae_b(b,b1) += T1bb(b,b1) 
#
               ENDDO b1  
#
            ENDDO b  
#
            deallocate L3bjbj(*,j1,b2,j)  
#
      ENDPARDO j, j1, b2     
#
      PARDO j, i, a  
#
            allocate L6aibj(a,i,*,j)  
#
            DO b1 
#
               REQUEST            T2old_ab(a,i,b1,j) j 
               L6aibj(a,i,b1,j) = T2old_ab(a,i,b1,j) 
#
            ENDDO b1 
#
            DO b 
#
               REQUEST L2old_ab(i,a,j,b) j 
#
               DO b1  
#
                  Tbb(b,b1)        = L2old_ab(i,a,j,b)*L6aibj(a,i,b1,j)  
                  Tbb(b,b1)       *= -1.0  
                  PUT Gae_b(b,b1) += Tbb(b,b1) 
#
               ENDDO b1  
#
            ENDDO b 
# 
            deallocate L6aibj(a,i,*,j)  
#
      ENDPARDO j, i, a    
#
      ENDPROC GAEB
#     ------------ 
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
      PROC GAE 
#     -------- 
         CALL GAEA 
         CALL GAEB 
      ENDPROC GAE 
#     ----------- 
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
      PROC GMIA 
#     --------- 
#
#     local arrays used: 
#     ------------------ 
#     local L4aiai(a,i1,a1,i2) 
#     local L7aibj(a,i1,b,j) 
#
      PARDO i1, i 
#
            Gmi_a(i1,i) = 0.0 
#
      ENDPARDO i1, i 
      execute sip_barrier Gmi_a 
#
      PARDO a, a1, i2  
#
            allocate L4aiai(a,*,a1,i2) 
#
            DO i1 
#
               REQUEST T2old_aa(a,i1,a1,i2) i2 
               L4aiai(a,i1,a1,i2) = T2old_aa(a,i1,a1,i2) 
#
            ENDDO i1 
#
            DO i 
#
               REQUEST L2old_aa(i,a,i2,a1) a1  
#
               DO i1  
#
                  Tii(i1,i)        = L4aiai(a,i1,a1,i2)*L2old_aa(i,a,i2,a1)   
                  Tii(i1,i)       *= 0.5  
                  PUT Gmi_a(i1,i) += Tii(i1,i) 
#               
               ENDDO i1  
#
            ENDDO i 
#
            deallocate L4aiai(a,*,a1,i2) 
#
      ENDPARDO a, a1, i2  
#
      PARDO a, b, j  
#
            allocate L7aibj(a,*,b,j) 
#
            DO i1 
#
               REQUEST            T2old_ab(a,i1,b,j) j  
               L7aibj(a,i1,b,j) = T2old_ab(a,i1,b,j)  
#
            ENDDO i1 
#
            DO i 
#
               REQUEST L2old_ab(i,a,j,b) b  
#
               DO i1 
#
                  Tii(i1,i)        = L7aibj(a,i1,b,j)*L2old_ab(i,a,j,b)   
                  PUT Gmi_a(i1,i) += Tii(i1,i) 
#               
               ENDDO i1 
#
            ENDDO i 
#
            deallocate L7aibj(a,*,b,j) 
#
      ENDPARDO a, b, j  
#
      ENDPROC GMIA 
#     ------------ 
#
      PROC GMIB 
#     --------- 
#
#     local arrays used:
#     ------------------ 
#     local L4bjbj(b,j1,b1,j2) 
#     local L5aiai(a,i,b,j1) 
#
      PARDO j1, j 
#
            Gmi_b(j1,j) = 0.0 
#
      ENDPARDO j1, j 
      execute sip_barrier Gmi_b 
#
      PARDO b, b1, j2  
#
            allocate L4bjbj(b,*,b1,j2) 
#
            DO j1 
#
              REQUEST              T2old_bb(b,j1,b1,j2) j2  
              L4bjbj(b,j1,b1,j2) = T2old_bb(b,j1,b1,j2) 
#
            ENDDO j1 
#
            DO j 
#
               REQUEST L2old_bb(j,b,j2,b1) b1  
#
               DO j1 
#
                  Tjj(j1,j)        = L4bjbj(b,j1,b1,j2)*L2old_bb(j,b,j2,b1)   
                  Tjj(j1,j)       *= 0.5  
                  PUT Gmi_b(j1,j) += Tjj(j1,j) 
#               
               ENDDO j1 
#
            ENDDO j 
#
            deallocate L4bjbj(b,*,b1,j2) 
#
      ENDPARDO b, b1, j2  
#
      PARDO b, a, i  
#
            allocate L5aiai(a,i,b,*) 
#
            DO j1 
#
               REQUEST T2old_ab(a,i,b,j1) j1  
               L5aiai(a,i,b,j1) = T2old_ab(a,i,b,j1) 
#
            ENDDO j1 
#
            DO j 
#
               REQUEST L2old_ab(i,a,j,b) b  
#
               DO j1 
#
                  Tjj(j1,j)        = L5aiai(a,i,b,j1)*L2old_ab(i,a,j,b)   
                  PUT Gmi_b(j1,j) += Tjj(j1,j) 
#               
               ENDDO j1 
#
            ENDDO j 
#
            deallocate L5aiai(a,i,b,*) 
#
      ENDPARDO b, a, i  
#
      ENDPROC GMIB 
#     ------------ 
#
      PROC GMI 
#     -------- 
         CALL GMIA 
         CALL GMIB 
      ENDPROC GMI 
#     ----------- 
#
# ----------------------------------------------------------------------------------  
#
# ----------------------------------------------------------------------------------  
# 
      PROC W1minjAA 
#     ------------- 
#
      PARDO i2, i, i3, i1 
#
            REQUEST              VSpipi(i2,i,i3,i1) i1  
            Tiiii(i2,i,i3,i1)  = VSpipi(i2,i,i3,i1)  
#
            DO a 
#
               REQUEST VSpipi(a,i3,i,i2)  i2  
               REQUEST VSpipi(a,i3,i1,i2) i2  
               GET t1a_old(a,i1) 
               GET t1a_old(a,i)
# 
               T1iiii(i2,i,i3,i1)  = VSpipi(a,i3,i,i2)*t1a_old(a,i1) 
               T2iiii(i2,i,i3,i1)  = VSpipi(a,i3,i1,i2)*t1a_old(a,i) 
#
               Tiiii(i2,i,i3,i1)  += T1iiii(i2,i,i3,i1) 
               Tiiii(i2,i,i3,i1)  -= T2iiii(i2,i,i3,i1) 
#
               DO a1
#
                  REQUEST Tau_aa(a,i,a1,i1)  i1 
                  REQUEST VSpipi(a,i2,a1,i3) i3 
#
                  T1iiii(i2,i,i3,i1) = VSpipi(a,i2,a1,i3)*Tau_aa(a,i,a1,i1)
                  T1iiii(i2,i,i3,i1)*= 0.5
#
                  Tiiii(i2,i,i3,i1) += T1iiii(i2,i,i3,i1)
#
               ENDDO a1
#
            ENDDO a 
#
            PUT W1minj_aa(i2,i,i3,i1) = Tiiii(i2,i,i3,i1) 
#
      ENDPARDO i2, i, i3, i1 
#
      ENDPROC W1minjAA 
#     ---------------- 
#
# ----------------------------------------------------------------------------------  
#
# ----------------------------------------------------------------------------------  
# 
      PROC W1minjBB 
#     ------------- 
#
      PARDO j, j1, j2, j3 
#
            REQUEST VSqjqj(j2,j,j3,j1) j1  
            Tjjjj(j2,j,j3,j1)  = VSqjqj(j2,j,j3,j1) 
#
            DO b 
#
               REQUEST VSqjqj(b,j3,j,j2)  j2  
               REQUEST VSqjqj(b,j3,j1,j2) j2  
               GET t1b_old(b,j1) 
               GET t1b_old(b,j)
#
               T1jjjj(j2,j,j3,j1)  = VSqjqj(b,j3,j,j2)*t1b_old(b,j1) 
               T2jjjj(j2,j,j3,j1)  = VSqjqj(b,j3,j1,j2)*t1b_old(b,j) 
#
               Tjjjj(j2,j,j3,j1)  += T1jjjj(j2,j,j3,j1) 
               Tjjjj(j2,j,j3,j1)  -= T2jjjj(j2,j,j3,j1) 
#
               DO b1  
#
                  REQUEST Tau_bb(b,j,b1,j1) j1  
                  REQUEST VSqjqj(b,j2,b1,j3) j3  
#
                  T1jjjj(j2,j,j3,j1)  = VSqjqj(b,j2,b1,j3)*Tau_bb(b,j,b1,j1) 
                  T1jjjj(j2,j,j3,j1) *= 0.5 
                  Tjjjj(j2,j,j3,j1)  += T1jjjj(j2,j,j3,j1) 
#
               ENDDO b1 
#
            ENDDO b  
#
            PUT W1minj_bb(j2,j,j3,j1) = Tjjjj(j2,j,j3,j1) 
#
      ENDPARDO j, j1, j2, j3 
#
      ENDPROC W1minjBB 
#     ---------------- 
#
# ----------------------------------------------------------------------------------  
#
# ----------------------------------------------------------------------------------  
# 
      PROC W1minjAB 
#     ------------- 
#
      PARDO i, i1, j, j1 
#
            REQUEST Vpiqj(i1,i,j1,j) j  
            Tiijj(i1,i,j1,j) = Vpiqj(i1,i,j1,j) 
#
            DO b  
#
               REQUEST Vpiqj(i,i1,b,j1) j1  
               GET t1b_old(b,j) 

               T1iijj(i1,i,j1,j) = Vpiqj(i,i1,b,j1)*t1b_old(b,j) 
               Tiijj(i1,i,j1,j) += T1iijj(i1,i,j1,j) 
#
            ENDDO b   
#
            DO a 
#
               REQUEST Vpiqj(a,i1,j,j1) j1  
               GET t1a_old(a,i) 
# 
               T1iijj(i1,i,j1,j) = Vpiqj(a,i1,j,j1)*t1a_old(a,i) 
               Tiijj(i1,i,j1,j) += T1iijj(i1,i,j1,j) 
#
               DO b  
#
                  REQUEST Tau_ab(a,i,b,j) j 
                  REQUEST Vpiqj(a,i1,b,j1) j1  
#
                  T1iijj(i1,i,j1,j) = Tau_ab(a,i,b,j)*Vpiqj(a,i1,b,j1) 
                  Tiijj(i1,i,j1,j) += T1iijj(i1,i,j1,j) 
#
               ENDDO b 
#
            ENDDO a 
#
            PUT W1minj_ab(i1,i,j1,j) = Tiijj(i1,i,j1,j)  
#
      ENDPARDO i, i1, j, j1 
#
      ENDPROC W1minjAB 
#     ---------------- 
#
# ----------------------------------------------------------------------------------  
#
# ----------------------------------------------------------------------------------  
# 
      PROC W1MINJ 
#     ----------- 
#
           create W1minj_aa
           create W1minj_ab
           create W1minj_bb
           execute sip_barrier 
#
           CALL W1minjAA 
           CALL W1minjAB 
           CALL W1minjBB 
#
      ENDPROC W1MINJ 
#     -------------- 
#
# ----------------------------------------------------------------------------------  
#
# ----------------------------------------------------------------------------------  
# 
# In the procedures W1MEBJAA, W1MEBJBB, W1MEBJAB, and W1MEBJBA these  
# intermediates are formed as temporary arrarys. The contribution to the 
# outout arrays is computed directly from these temporary arrays so 
# that the array is never stored.   
#
# ----------------------------------------------------------------------------------  
#
      PROC W1MEBJAA_S  
#     ---------------
#
      PARDO i, a, i1, a1  
#
            REQUEST             Viaai(i1,a1,a,i) i 
            REQUEST             Vaaii(a,a1,i1,i) i  
#
            Tiaai(i1,a1,a,i)  = Vaaii(a,a1,i1,i) 
            Tiaai(i1,a1,a,i) -= Viaai(i1,a1,a,i) 
            Tiaai(i1,a1,a,i) *= -1.0 
#
            DO i2  
#
               REQUEST              VSpipi(a1,i1,i,i2) i2  
               GET                  t1a_old(a,i2) 
#
               T1iaai(i1,a1,a,i)  = VSpipi(a1,i1,i,i2)*t1a_old(a,i2)  
               Tiaai(i1,a1,a,i)  -= T1iaai(i1,a1,a,i)  
#
            ENDDO i2  
#
            DO a2  
#
               REQUEST VSaaai(a2,a,a1,i1) i1  
               GET t1a_old(a2,i) 
#
               T1iaai(i1,a1,a,i)  = VSaaai(a2,a,a1,i1)*t1a_old(a2,i) 
               Tiaai(i1,a1,a,i)  += T1iaai(i1,a1,a,i)  
#
               DO i2 
#
                  REQUEST VSpipi(a2,i2,a1,i1) i1  
                  REQUEST T2old_aa(a2,i,a,i2) i2  
                  GET t1a_old(a,i2) 
#
                  Taiai(a1,i2,a2,i1)  = VSpipi(a2,i2,a1,i1) 
                  tai(a,i2)           = t1a_old(a,i2) 
                  T1aiai(a2,i,a,i2)   = t1a_old(a2,i)^tai(a,i2) 
                  T1aiai(a2,i,a,i2)  += T2old_aa(a2,i,a,i2) 
                  T1iaai(i1,a1,a,i)   = T1aiai(a2,i,a,i2)*Taiai(a1,i2,a2,i1) 
                  Tiaai(i1,a1,a,i)   -= T1iaai(i1,a1,a,i)  
#
               ENDDO i2  
#
            ENDDO a2  
#
            DO b
            DO j
#
               REQUEST Vpiqj(a1,i1,b,j) j 
               REQUEST T2old_ab(a,i,b,j) j 
#
               T1iaai(i1,a1,a,i)  = Vpiqj(a1,i1,b,j)*T2old_ab(a,i,b,j)
               Tiaai(i1,a1,a,i)  += T1iaai(i1,a1,a,i)
#
            ENDDO j
            ENDDO b
#
            PREPARE W1MEBJ_AA(i1,a1,a,i) = Tiaai(i1,a1,a,i)  
# 
      ENDPARDO i, a, i1, a1  
#
      ENDPROC W1MEBJAA_S  
#     ------------------
#
      PROC W1MEBJAA 
#     ----------------
# 
      PARDO i1, a1, a, i 
#
            REQUEST W1MEBJ_AA(i1,a1,a,i) a 
#
# Compute contribution to L1a_new  
# ------------------------------- 
#
            GET l1a_old(i,a)
            Tia(i1,a1)          = W1MEBJ_AA(i1,a1,a,i)*l1a_old(i,a)
            PUT l1a_new(i1,a1) += Tia(i1,a1)
#
# Compute contributions to L2new_aa  
# ---------------------------------  
#
            DO i2
            DO a2
#
               REQUEST L2old_aa(i2,a2,i,a) a 
#
               T1iaia(i2,a2,i1,a1)        = L2old_aa(i2,a2,i,a)*W1MEBJ_AA(i1,a1,a,i)
               T2iaia(i2,a1,i1,a2)        = T1iaia(i2,a2,i1,a1)
               T2iaia(i2,a1,i1,a2)       *= -1.0  
               T3iaia(i1,a2,i2,a1)        = T1iaia(i2,a2,i1,a1)
               T3iaia(i1,a2,i2,a1)       *= -1.0  
               T4iaia(i1,a1,i2,a2)        = T1iaia(i2,a2,i1,a1)
#
               PREPARE L2new_aa(i2,a2,i1,a1) += T1iaia(i2,a2,i1,a1) 
               PREPARE L2new_aa(i2,a1,i1,a2) += T2iaia(i2,a1,i1,a2) 
               PREPARE L2new_aa(i1,a2,i2,a1) += T3iaia(i1,a2,i2,a1)  
               PREPARE L2new_aa(i1,a1,i2,a2) += T4iaia(i1,a1,i2,a2)  
#
            ENDDO a2
            ENDDO i2
#
# Compute contributions to L2new_ab 
# --------------------------------- 
#
            DO j
            DO b
#
               REQUEST L2old_ab(i,a,j,b) b 
               T1iajb(i1,a1,j,b)      = L2old_ab(i,a,j,b)*W1MEBJ_AA(i1,a1,a,i)
               PREPARE L2new_ab(i1,a1,j,b) += T1iajb(i1,a1,j,b)
#
            ENDDO b
            ENDDO j
#
      ENDPARDO i1, a1, a, i 
#
      ENDPROC W1MEBJAA 
#     ----------------
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
      PROC W1MEBJBB_S  
#     ---------------
#
      PARDO j, b, j1, b1  
#
            REQUEST Vjbbj(j1,b1,b,j) j  
            REQUEST Vbbjj(b,b1,j1,j) j  
#
            Tjbbj(j1,b1,b,j)  = Vbbjj(b,b1,j1,j) 
            Tjbbj(j1,b1,b,j) -= Vjbbj(j1,b1,b,j) 
            Tjbbj(j1,b1,b,j) *= -1.0 
#
            DO b2  
#
               REQUEST VSbbbj(b2,b,b1,j1) j1  
               GET t1b_old(b2,j) 
#
               T1jbbj(j1,b1,b,j)  = VSbbbj(b2,b,b1,j1)*t1b_old(b2,j) 
               Tjbbj(j1,b1,b,j)  += T1jbbj(j1,b1,b,j)  
#
            ENDDO b2  
#
            DO j2 
#
               REQUEST VSqjqj(b1,j1,j,j2) j2  
               GET t1b_old(b,j2) 
#
               T1jbbj(j1,b1,b,j)  = VSqjqj(b1,j1,j,j2)*t1b_old(b,j2)  
               Tjbbj(j1,b1,b,j)  -= T1jbbj(j1,b1,b,j)  
#
               DO b2 
#
                  REQUEST VSqjqj(b2,j2,b1,j1) j1  
                  REQUEST T2old_bb(b2,j,b,j2) j2 
                  GET t1b_old(b2,j) 
#
                  tbj(b2,j)           = t1b_old(b2,j) 
                  T1bjbj(b2,j,b,j2)   = t1b_old(b,j2)^tbj(b2,j) 
                  T1bjbj(b2,j,b,j2)  += t2old_bb(b2,j,b,j2) 
                  T1jbbj(j1,b1,b,j)   = T1bjbj(b2,j,b,j2)*VSqjqj(b2,j2,b1,j1) 
                  Tjbbj(j1,b1,b,j)   -= T1jbbj(j1,b1,b,j)  
#
               ENDDO b2  
#
            ENDDO j2  
#
            DO a
            DO i
#
               REQUEST Vpiqj(a,i,b1,j1) j1 
               REQUEST T2old_ab(a,i,b,j) j 
#
               T1jbbj(j1,b1,b,j)  = Vpiqj(a,i,b1,j1)*T2old_ab(a,i,b,j)
               Tjbbj(j1,b1,b,j)  += T1jbbj(j1,b1,b,j)
#
            ENDDO i
            ENDDO a
#
            PREPARE W1MEBJ_BB(j1,b1,b,j) = Tjbbj(j1,b1,b,j)  
#
      ENDPARDO j, b, j1, b1  
#
      ENDPROC W1MEBJBB_S  
#     ------------------
#
      PROC W1MEBJBB  
#     -------------
#
      PARDO j1, b1, b, j 
#
            REQUEST W1MEBJ_BB(j1,b1,b,j) b 
#
# Compute contribution to L1b_new  
# ------------------------------- 
#
            GET l1b_old(j,b)
#
            Tjb(j1,b1)          = W1MEBJ_BB(j1,b1,b,j)*l1b_old(j,b)
            PUT l1b_new(j1,b1) += Tjb(j1,b1)
#
# Compute contributions to L2new_bb  
# ---------------------------------  
#
            DO j2
            DO b2
#
               REQUEST L2old_bb(j2,b2,j,b) b 
#
               T1jbjb(j2,b2,j1,b1)  = L2old_bb(j2,b2,j,b)*W1MEBJ_BB(j1,b1,b,j)
               T2jbjb(j2,b1,j1,b2)  = T1jbjb(j2,b2,j1,b1)
               T2jbjb(j2,b1,j1,b2) *= -1.0  
               T3jbjb(j1,b2,j2,b1)  = T1jbjb(j2,b2,j1,b1)
               T3jbjb(j1,b2,j2,b1) *= -1.0  
               T4jbjb(j1,b1,j2,b2)  = T1jbjb(j2,b2,j1,b1)
#
               PREPARE L2new_bb(j2,b2,j1,b1) += T1jbjb(j2,b2,j1,b1) 
               PREPARE L2new_bb(j2,b1,j1,b2) += T2jbjb(j2,b1,j1,b2) 
               PREPARE L2new_bb(j1,b2,j2,b1) += T3jbjb(j1,b2,j2,b1)  
               PREPARE L2new_bb(j1,b1,j2,b2) += T4jbjb(j1,b1,j2,b2)  
#
            ENDDO b2
            ENDDO j2
#
# Compute contributions to L2new_ab 
# --------------------------------- 
#
            DO i
            DO a
#
               REQUEST L2old_ab(i,a,j,b) b 
#
               T1iajb(i,a,j1,b1)            = L2old_ab(i,a,j,b)*W1MEBJ_BB(j1,b1,b,j)
               PREPARE L2new_ab(i,a,j1,b1) += T1iajb(i,a,j1,b1)
#
            ENDDO a
            ENDDO i
#
      ENDPARDO j1, b1, b, j 
#
      ENDPROC W1MEBJBB 
#     ---------------
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
      PROC W1MEBJAB_S 
#     ---------------
#
      PARDO j, i, a, b 
#
            REQUEST          Viabj(i,a,b,j) j  
            Tiabj(i,a,b,j) = Viabj(i,a,b,j) 
#
            DO b1 
#
               REQUEST Vbbai(b1,b,a,i) i  
               GET t1b_old(b1,j) 
#
               T1iabj(i,a,b,j) = Vbbai(b1,b,a,i)*t1b_old(b1,j) 
               Tiabj(i,a,b,j) += T1iabj(i,a,b,j) 
#
            ENDDO b1 
#
            DO j1 
#
               REQUEST Vpiqj(a,i,j,j1) j1  
               GET t1b_old(b,j1) 
#
               T1iabj(i,a,b,j) = Vpiqj(a,i,j,j1)*t1b_old(b,j1) 
               Tiabj(i,a,b,j) -= T1iabj(i,a,b,j) 
#
               DO b1 
#
                  REQUEST t2old_bb(b1,j,b,j1) j1 
                  REQUEST Vpiqj(a,i,b1,j1)    j1  
                  GET t1b_old(b1,j) 
# 
                  tbj(b,j1)          = t1b_old(b,j1) 
                  T2bjbj(b1,j,b,j1)  = t1b_old(b1,j)^tbj(b,j1) 
                  T2bjbj(b1,j,b,j1) += T2old_bb(b1,j,b,j1) 
                  T1iabj(i,a,b,j)    = T2bjbj(b1,j,b,j1)*Vpiqj(a,i,b1,j1) 
                  Tiabj(i,a,b,j)    -= T1iabj(i,a,b,j) 
#
               ENDDO b1 
#
            ENDDO j1 
#
            DO a1
            DO i1
#
               REQUEST T2old_ab(a1,i1,b,j) j  
               REQUEST VSpipi(a1,i1,a,i)   i 
#
               T1iabj(i,a,b,j) = T2old_ab(a1,i1,b,j)*VSpipi(a1,i1,a,i)
               Tiabj(i,a,b,j) += T1iabj(i,a,b,j)
#
            ENDDO i1
            ENDDO a1
#
            PREPARE W1MEBJ_AB(i,a,b,j) = Tiabj(i,a,b,j)  
#
      ENDPARDO j, i, a, b 
#
      ENDPROC W1MEBJAB_S  
#     ------------------
#
#
      PROC W1MEBJAB 
#     ----------------
#
      PARDO i, a, b, j 
#
            REQUEST W1MEBJ_AB(i,a,b,j) a 
#
# Compute contribution to l1a_new 
# ------------------------------- 
#
            GET l1b_old(j,b)
            T1ia(i,a)         = W1MEBJ_AB(i,a,b,j)*l1b_old(j,b)
            PUT l1a_new(i,a) += T1ia(i,a) 
#
# Compute contributions to L2new_aa 
# --------------------------------- 
#
            DO i1  
            DO a1  
#
               REQUEST L2old_ab(i1,a1,j,b) b 
#
               T1iaia(i1,a1,i,a)  = L2old_ab(i1,a1,j,b)*W1MEBJ_AB(i,a,b,j)
               T2iaia(i1,a,i,a1)  = T1iaia(i1,a1,i,a)
               T2iaia(i1,a,i,a1) *= -1.0  
               T3iaia(i,a1,i1,a)  = T1iaia(i1,a1,i,a)
               T3iaia(i,a1,i1,a) *= -1.0  
               T4iaia(i,a,i1,a1)  = T1iaia(i1,a1,i,a)
#
               PREPARE L2new_aa(i1,a1,i,a) += T1iaia(i1,a1,i,a) 
               PREPARE L2new_aa(i1,a,i,a1) += T2iaia(i1,a,i,a1) 
               PREPARE L2new_aa(i,a1,i1,a) += T3iaia(i,a1,i1,a) 
               PREPARE L2new_aa(i,a,i1,a1) += T4iaia(i,a,i1,a1) 
#
            ENDDO a1  
            ENDDO i1  
#
# Compute contributions to L2new_ab 
# --------------------------------- 
#
            DO j1
            DO b1
#
               REQUEST L2old_bb(j,b,j1,b1) b1 
#
               T1iajb(i,a,j1,b1)            = L2old_bb(j,b,j1,b1)*W1MEBJ_AB(i,a,b,j)
               PREPARE L2new_ab(i,a,j1,b1) += T1iajb(i,a,j1,b1)
#
            ENDDO b1
            ENDDO j1
#
      ENDPARDO i, a, b, j 
#
      ENDPROC W1MEBJAB 
#     ----------------
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
      PROC W1MEBJBA_S  
#     ---------------
#
      PARDO i, a, j, b   
# 
            REQUEST          Viabj(i,a,b,j) j  
            Tjbai(j,b,a,i) = Viabj(i,a,b,j) 
#
            DO a1  
#
               REQUEST Vaabj(a1,a,b,j) j  
               GET t1a_old(a1,i) 
#
               T1jbai(j,b,a,i) = Vaabj(a1,a,b,j)*t1a_old(a1,i) 
               Tjbai(j,b,a,i) += T1jbai(j,b,a,i) 
#
            ENDDO a1 
#
            DO i1 
#
               REQUEST Vpiqj(i,i1,b,j) j  
               GET t1a_old(a,i1) 
#
               T1jbai(j,b,a,i) = Vpiqj(i,i1,b,j)*t1a_old(a,i1) 
               Tjbai(j,b,a,i) -= T1jbai(j,b,a,i) 
#
               DO a1 
#
                  REQUEST T2old_aa(a1,i,a,i1) i1  
                  REQUEST Vpiqj(a1,i1,b,j)    i1  
                  GET t1a_old(a1,i) 
# 
                  tai(a,i1)          = t1a_old(a,i1) 
                  T2aiai(a1,i,a,i1)  = t1a_old(a1,i)^tai(a,i1) 
                  T2aiai(a1,i,a,i1) += T2old_aa(a1,i,a,i1) 
                  T1jbai(j,b,a,i)    = Vpiqj(a1,i1,b,j)*T2aiai(a1,i,a,i1) 
                  Tjbai(j,b,a,i)    -= T1jbai(j,b,a,i) 
#
               ENDDO a1 
#
            ENDDO i1 
#
            DO b1
            DO j1
#
               REQUEST T2old_ab(a,i,b1,j1) j1 
               REQUEST VSqjqj(b1,j1,b,j)   j 
#
               T1jbai(j,b,a,i) = T2old_ab(a,i,b1,j1)*VSqjqj(b1,j1,b,j)
               Tjbai(j,b,a,i) += T1jbai(j,b,a,i)
#
            ENDDO j1
            ENDDO b1
#
            PREPARE W1MEBJ_BA(j,b,a,i) = Tjbai(j,b,a,i)  
#
      ENDPARDO i, a, j, b  
#
      ENDPROC W1MEBJBA_S  
#     ------------------
#
      PROC W1MEBJBA  
#     -------------
#
      PARDO j, b, a, i  
# 
            REQUEST W1MEBJ_BA(j,b,a,i) a 
#
# Compute contribution to l1b_new 
# ------------------------------- 
#
            GET l1a_old(i,a)
#
            T1jb(j,b)         = W1MEBJ_BA(j,b,a,i)*l1a_old(i,a)
            PUT l1b_new(j,b) += T1jb(j,b) 
#
# Compute contributions to L2new_bb 
# --------------------------------- 
#
            DO j1  
            DO b1  
#
               REQUEST L2old_ab(i,a,j1,b1) b1 
#
               T1jbjb(j1,b1,j,b)  = L2old_ab(i,a,j1,b1)*W1MEBJ_BA(j,b,a,i)
               T2jbjb(j1,b,j,b1)  = T1jbjb(j1,b1,j,b)
               T2jbjb(j1,b,j,b1) *= -1.0  
               T3jbjb(j,b1,j1,b)  = T1jbjb(j1,b1,j,b)
               T3jbjb(j,b1,j1,b) *= -1.0  
               T4jbjb(j,b,j1,b1)  = T1jbjb(j1,b1,j,b)
#
               PREPARE L2new_bb(j1,b1,j,b) += T1jbjb(j1,b1,j,b) 
               PREPARE L2new_bb(j1,b,j,b1) += T2jbjb(j1,b,j,b1) 
               PREPARE L2new_bb(j,b1,j1,b) += T3jbjb(j,b1,j1,b) 
               PREPARE L2new_bb(j,b,j1,b1) += T4jbjb(j,b,j1,b1) 
#
            ENDDO b1  
            ENDDO j1  
#
# Compute contributions to L2new_ab 
# --------------------------------- 
#
            DO i1
            DO a1
#
               REQUEST L2old_aa(i,a,i1,a1) a1 
#
               T1iajb(i1,a1,j,b)            = L2old_aa(i,a,i1,a1)*W1MEBJ_BA(j,b,a,i)  
               PREPARE L2new_ab(i1,a1,j,b) += T1iajb(i1,a1,j,b)
#
            ENDDO a1
            ENDDO i1
#
      ENDPARDO j, b, a, i 
#
      ENDPROC W1MEBJBA  
#     ---------------
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# Compute contributions from 'Wmjbe'. This needs to be checked 
#
      PROC W1MJBEab_S 
#     ---------------
#
      PARDO i, i1, b1, b 
#
            REQUEST            Vbbii(b,b1,i1,i) i  
            Tiiqq(i1,i,b,b1) = Vbbii(b,b1,i1,i) 
#
            DO a1 
#
               REQUEST Vbbai(b1,b,a1,i1) i1 
               GET t1a_old(a1,i) 
#
               T1iiqq(i1,i,b,b1) = Vbbai(b1,b,a1,i1)*t1a_old(a1,i)
               Tiiqq(i1,i,b,b1) += T1iiqq(i1,i,b,b1) 
#
            ENDDO a1  
#
            DO j1 
#
               REQUEST Vpiqj(i,i1,b1,j1) j1  
               GET t1b_old(b,j1) 
# 
               T1iiqq(i1,i,b,b1) = Vpiqj(i,i1,b1,j1)*t1b_old(b,j1) 
               Tiiqq(i1,i,b,b1) -= T1iiqq(i1,i,b,b1) 
#
               DO a1 
#
                  REQUEST T2old_ab(a1,i,b,j1) j1  
                  REQUEST Vpiqj(a1,i1,b1,j1)  j1  
                  GET t1a_old(a1,i) 
#
                  Taibj(a1,i,b,j1)   = t1a_old(a1,i)^t1b_old(b,j1) 
                  T1aibj(a1,i,b,j1)  = T2old_ab(a1,i,b,j1)  
                  T1aibj(a1,i,b,j1) += Taibj(a1,i,b,j1)  
                  T1iiqq(i1,i,b,b1)  = T1aibj(a1,i,b,j1)*Vpiqj(a1,i1,b1,j1) 
                  Tiiqq(i1,i,b,b1)  -= T1iiqq(i1,i,b,b1) 
#
               ENDDO a1 
#
            ENDDO j1 
#
            Tiiqq(i1,i,b,b1)            *= -1.0 
            PREPARE W1mjbe_ab(i1,i,b,b1) = Tiiqq(i1,i,b,b1) 
#
      ENDPARDO i, i1, b1, b 
#
      ENDPROC W1MJBEab_S 
#     --------------------
#
      PROC W1MJBEab
#     -------------
#
      PARDO i1, b1, b, i 
#
            REQUEST W1mjbe_ab(i1,i,b,b1) b 
#
# Compute the contribution to L2new_ab 
# ------------------------------------ 
#
            DO j 
            DO a
#
               REQUEST L2old_ab(i,a,j,b) b 
#
               T1iajb(i1,a,j,b1)            = W1mjbe_ab(i1,i,b,b1)*L2old_ab(i,a,j,b)
               PREPARE L2new_ab(i1,a,j,b1) += T1iajb(i1,a,j,b1) # VFL
#
            ENDDO a
            ENDDO j
#
      ENDPARDO i1, b1, b, i 
#
      ENDPROC W1MJBEab
#     ---------------
#
      PROC W1MJBEba_S 
#     ---------------
#
      PARDO j, j1, a1, a 
#
            REQUEST            Vaajj(a,a1,j1,j) j  
            Tjjpp(j1,j,a,a1) = Vaajj(a,a1,j1,j) 
#
            DO b1 
#
               REQUEST Vaabj(a1,a,b1,j1) j1  
               GET t1b_old(b1,j) 
#
               T1jjpp(j1,j,a,a1) = Vaabj(a1,a,b1,j1)*t1b_old(b1,j)
               Tjjpp(j1,j,a,a1) += T1jjpp(j1,j,a,a1) 
#
            ENDDO b1 
#
            DO i1 
#
               REQUEST Vpiqj(a1,i1,j,j1) j1  
               GET t1a_old(a,i1) 
#
               T1jjpp(j1,j,a,a1) = Vpiqj(a1,i1,j,j1)*t1a_old(a,i1) 
               Tjjpp(j1,j,a,a1) -= T1jjpp(j1,j,a,a1) 
#
               DO b1 
#
                  REQUEST T2old_ab(a,i1,b1,j) j 
                  REQUEST Vpiqj(a1,i1,b1,j1)  j1  
                  GET t1b_old(b1,j) 
# 
                  Taibj(a,i1,b1,j)   = t1b_old(b1,j)^t1a_old(a,i1) 
                  T1aibj(a,i1,b1,j)  = T2old_ab(a,i1,b1,j)  
                  T1aibj(a,i1,b1,j) += Taibj(a,i1,b1,j)  
                  T1jjpp(j1,j,a,a1) = T1aibj(a,i1,b1,j)*Vpiqj(a1,i1,b1,j1) 
                  Tjjpp(j1,j,a,a1) -= T1jjpp(j1,j,a,a1) 
#
               ENDDO b1 
#
            ENDDO i1 
#
            Tjjpp(j1,j,a,a1)            *= -1.0 
            PREPARE W1mjbe_ba(j1,j,a,a1) = Tjjpp(j1,j,a,a1) 
#
      ENDPARDO j, j1, a1, a  
#
      ENDPROC W1MJBEba_S 
#     ------------------
#
      PROC W1MJBEba
#     -------------
#
      PARDO j1, a1, a, j 
#
            REQUEST W1mjbe_ba(j1,j,a,a1) a 
#
# Compute the contribution to L2new_ab 
# ------------------------------------ 
#
            DO i
            DO b
#
               REQUEST L2old_ab(i,a,j,b) b 
#
               T1iajb(i,a1,j1,b)            = L2old_ab(i,a,j,b)*W1mjbe_ba(j1,j,a,a1)
               PREPARE L2new_ab(i,a1,j1,b) += T1iajb(i,a1,j1,b)  # VFL
#
            ENDDO b
            ENDDO i
#
      ENDPARDO j1, a1, a, j 
#
      ENDPROC W1MJBEba
#     ----------------
#
# ------------------------------------------------------------------------------------  
#
      PROC W1MEBJ_S  
# 
           CALL W1MEBJAA_S 
           CALL W1MEBJBB_S
           CALL W1MEBJAB_S 
           CALL W1MEBJBA_S 
           CALL W1MJBEab_S 
           CALL W1MJBEba_S 
#
      ENDPROC W1MEBJ_S  
#
# ------------------------------------------------------------------------------------  
#
# ------------------------------------------------------------------------------------  
#
      PROC W1MEBJ 
# 
           CALL W1MEBJAA
           CALL W1MEBJBB
           CALL W1MEBJAB
           CALL W1MEBJBA
           CALL W1MJBEab
           CALL W1MJBEba 
#
      ENDPROC W1MEBJ 
#
# ------------------------------------------------------------------------------------  
#
# ------------------------------------------------------------------------------------  
#
      PROC W2MEBJAA 
#     ------------- 
#
# First the 'bare' terms put into the arrays to initialize them. 
# -------------------------------------------------------------- 
#
      PARDO i1, a1, a, i 
#
            REQUEST                        Viaai(i1,a1,a,i) i # +  
            REQUEST                        Vaaii(a,a1,i1,i) i # - 
            Tiaai(i1,a1,a,i)             = Vaaii(a,a1,i1,i)  
            Tiaai(i1,a1,a,i)            -= Viaai(i1,a1,a,i)  
            Tiaai(i1,a1,a,i)            *= -1.0  
            PREPARE W2mebj_aa(i1,a1,a,i) = Tiaai(i1,a1,a,i) 
#
      ENDPARDO i1, a1, a, i 
#
      PARDO i, a, b, j 
#
            REQUEST                      Viabj(i,a,b,j) j  
            Tiabj(i,a,b,j)             = Viabj(i,a,b,j) 
            PREPARE W2mebj_ab(i,a,b,j) = Tiabj(i,a,b,j)  
#
      ENDPARDO i, a, b, j 
#
      PARDO j, b, a, i 
#
            REQUEST                      Viabj(i,a,b,j) j  
            Tjbai(j,b,a,i)             = Viabj(i,a,b,j) 
            PREPARE W2mebj_ba(j,b,a,i) = Tjbai(j,b,a,i)  
#
      ENDPARDO j, b, a, i 
#
      PARDO j1, b1, b, j 
#
            REQUEST                        Vjbbj(j1,b1,b,j) j # +  
            REQUEST                        Vbbjj(b,b1,j1,j) j # - 
            Tjbbj(j1,b1,b,j)             = Vbbjj(b,b1,j1,j)  
            Tjbbj(j1,b1,b,j)            -= Vjbbj(j1,b1,b,j)  
            Tjbbj(j1,b1,b,j)            *= -1.0  
            PREPARE W2mebj_bb(j1,b1,b,j) = Tjbbj(j1,b1,b,j) 
#
      ENDPARDO j1, b1, b, j 
#
      PARDO i, i1, b, b1 
#
            REQUEST                        Vbbii(b,b1,i,i1) i1  
            Tiibb(i,i1,b,b1)             = Vbbii(b,b1,i,i1) 
            Tiibb(i,i1,b,b1)            *= -1.0 
            PREPARE W2mjbe_ab(i,i1,b,b1) = Tiibb(i,i1,b,b1) 
#
      ENDPARDO i, i1, b, b1 
#
      PARDO j1, j, a, a1 
#
            REQUEST                        Vaajj(a,a1,j1,j) j  
            Tjjaa(j1,j,a,a1)             = Vaajj(a,a1,j1,j) 
            Tjjaa(j1,j,a,a1)            *= -1.0 
            PREPARE W2mjbe_ba(j1,j,a,a1) = Tjjaa(j1,j,a,a1) 
#
      ENDPARDO j1, j, a, a1 
#
      execute server_barrier 
#
# Done initializing intermediates to the 'bare' terms. 
# ---------------------------------------------------- 
#
      PARDO i, a, a2, i2 
#
            REQUEST T2old_aa(a,i2,a2,i) i  
#
            DO i1 
            DO a1 
#
               REQUEST                         VSpipi(a1,i1,a2,i2) i2 # + 
               Tiaai(i1,a1,a,i)              = VSpipi(a1,i1,a2,i2)*T2old_aa(a,i2,a2,i) 
               Tiaai(i1,a1,a,i)             *= -1.0  
               PREPARE W2mebj_aa(i1,a1,a,i) += Tiaai(i1,a1,a,i) 
#
            ENDDO a1 
            ENDDO i1 
#
      ENDPARDO i, a, a2, i2 
#
      PARDO a, i, b, j  
#
            REQUEST T2old_ab(a,i,b,j) j  
#
            DO i1 
            DO a1 
#
               REQUEST                         Vpiqj(a1,i1,b,j) j # + 
               Tiaai(i1,a1,a,i)              = Vpiqj(a1,i1,b,j)*T2old_ab(a,i,b,j) 
               PREPARE W2mebj_aa(i1,a1,a,i) += Tiaai(i1,a1,a,i) 
#
            ENDDO a1 
            ENDDO i1 
#
      ENDPARDO a, i, b, j  
#
      ENDPROC W2MEBJAA 
#     ---------------- 
#
      PROC W2MEBJAB 
#     ------------- 
#
      PARDO b, j, a1, i1  
#
            REQUEST T2old_ab(a1,i1,b,j) j  
#
            DO a 
            DO i 
#
               REQUEST                       VSpipi(a,i,a1,i1) i1 # +  
               Tiabj(i,a,b,j)              = VSpipi(a,i,a1,i1)*T2old_ab(a1,i1,b,j) 
               PREPARE W2mebj_ab(i,a,b,j) += Tiabj(i,a,b,j)  
#
            ENDDO i 
            ENDDO a 
#
      ENDPARDO b, j, a1, i1  
#
      PARDO b, j, b1, j1  
#
            REQUEST T2old_bb(b1,j1,b,j) j  
#
            DO a 
            DO i 
#
               REQUEST                       Vpiqj(a,i,b1,j1)    j1 # +  
               Tiabj(i,a,b,j)              = Vpiqj(a,i,b1,j1)*T2old_bb(b1,j1,b,j) 
               PREPARE W2mebj_ab(i,a,b,j) += Tiabj(i,a,b,j)  
#
            ENDDO i 
            ENDDO a 
#
      ENDPARDO b, j, b1, j1  
#
      ENDPROC W2MEBJAB 
#     ---------------- 
#
      PROC W2MEBJBA 
#     ------------- 
#
      PARDO a, i, b1, j1  
#
            REQUEST T2old_ab(a,i,b1,j1) j1  
#
            DO b 
            DO j 
#
               REQUEST                       VSqjqj(b,j,b1,j1)   j1 # +  
               Tjbai(j,b,a,i)              = VSqjqj(b,j,b1,j1)*T2old_ab(a,i,b1,j1) 
               PREPARE W2mebj_ba(j,b,a,i) += Tjbai(j,b,a,i)  
#
            ENDDO j 
            ENDDO b 
#
      ENDPARDO a, i, b1, j1  
#
      PARDO a, i, a1, i1  
#
            REQUEST T2old_aa(a1,i1,a,i) i  
#
            DO b 
            DO j 
#
               REQUEST                       Vpiqj(a1,i1,b,j)    j # +  
               Tjbai(j,b,a,i)              = Vpiqj(a1,i1,b,j)*T2old_aa(a1,i1,a,i) 
               PREPARE W2mebj_ba(j,b,a,i) += Tjbai(j,b,a,i)  
#
            ENDDO j 
            ENDDO b 
#
      ENDPARDO a, i, a1, i1  
#
      ENDPROC W2MEBJBA 
#     ---------------- 
#
      PROC W2MEBJBB 
#     ------------- 
#
      PARDO b, j, b2, j2  
#
            REQUEST T2old_bb(b,j2,b2,j) j  
#
            DO j1 
            DO b1 
#
               REQUEST                         VSqjqj(b1,j1,b2,j2) j2 # + 
               Tjbbj(j1,b1,b,j)              = VSqjqj(b1,j1,b2,j2)*T2old_bb(b,j2,b2,j) 
               Tjbbj(j1,b1,b,j)             *= -1.0  
               PREPARE W2mebj_bb(j1,b1,b,j) += Tjbbj(j1,b1,b,j) 
#
            ENDDO b1 
            ENDDO j1 
#
      ENDPARDO b, j, b2, j2  
#
      PARDO b, j, a, i  
#
            REQUEST T2old_ab(a,i,b,j) j  
#
            DO j1 
            DO b1 
#
               REQUEST                         Vpiqj(a,i,b1,j1)  j1 # + 
               Tjbbj(j1,b1,b,j)              = Vpiqj(a,i,b1,j1)*T2old_ab(a,i,b,j) 
               PREPARE W2mebj_bb(j1,b1,b,j) += Tjbbj(j1,b1,b,j) 
#
            ENDDO b1 
            ENDDO j1 
#
      ENDPARDO b, j, a, i  
#
      ENDPROC W2MEBJBB 
#     ---------------- 
#
      PROC W2MJBEAB
#     ------------- 
#
      PARDO b, i1, a, j  
#
            REQUEST T2old_ab(a,i1,b,j) j  
#
            DO i  
            DO b1  
#
               REQUEST                         Vpiqj(a,i,b1,j) j  
               Tiibb(i,i1,b,b1)              = T2old_ab(a,i1,b,j)*Vpiqj(a,i,b1,j) 
               PREPARE W2mjbe_ab(i,i1,b,b1) += Tiibb(i,i1,b,b1) 
#
            ENDDO b1 
            ENDDO i 
#
      ENDPARDO b, i1, a, j  
#
      ENDPROC W2MJBEAB
#     ---------------- 
#
      PROC W2MJBEBA
#     ------------- 
#
      PARDO a, i, b, j  
#
            REQUEST T2old_ab(a,i,b,j) j  
#
            DO a1  
            DO j1  
#
               REQUEST                         Vpiqj(a1,i,b,j1) j1  
               Tjjaa(j1,j,a,a1)              = T2old_ab(a,i,b,j)*Vpiqj(a1,i,b,j1) 
               PREPARE W2mjbe_ba(j1,j,a,a1) += Tjjaa(j1,j,a,a1) 
#
            ENDDO j1 
            ENDDO a1  
#
      ENDPARDO a, i, b, j  
#
      ENDPROC W2MJBEBA
#     ---------------- 
#
# ------------------------------------------------------------------------------------- 
#
# ------------------------------------------------------------------------------------- 
#
      PROC W2MEBJ 
#     ----------- 
           CALL W2MEBJAA
           CALL W2MEBJAB
           CALL W2MEBJBA
           CALL W2MEBJBB
#
           CALL W2MJBEAB 
           CALL W2MJBEBA  
      ENDPROC W2MEBJ 
#     -------------- 
#
# ------------------------------------------------------------------------------------- 
#
# ------------------------------------------------------------------------------------- 
#
      PROC W1IMENAA 
#     ------------- 
#
      PARDO i, i1, a, i2 
#
            REQUEST             VSpipi(i,i1,a,i2) i2  
            Tiiai(i,i1,a,i2)  = VSpipi(i,i1,a,i2) 
            TSiiai(i,i2,a,i1) = 0.0  
#
            DO i3 
#
               GET W1minj_aa(i,i1,i3,i2)   
               GET t1a_old(a,i3) 
#   
               T1iiai(i,i1,a,i2) = W1minj_aa(i,i1,i3,i2)*t1a_old(a,i3) 
               Tiiai(i,i1,a,i2) -= T1iiai(i,i1,a,i2) 
#
            ENDDO i3 
#
            DO a1 
#
               REQUEST T2old_aa(a,i1,a1,i2) i2  
               REQUEST W2mebj_aa(i,a1,a,i2) i2  
               GET     Fme_a(i,a1) 
               GET     t1a_old(a1,i1) 
#
               T1iiai(i,i1,a,i2)  = T2old_aa(a,i1,a1,i2)*Fme_a(i,a1) 
               Tiiai(i,i1,a,i2)  -= T1iiai(i,i1,a,i2) 
#
               T1iiai(i,i1,a,i2)  = W2mebj_aa(i,a1,a,i2)*t1a_old(a1,i1)  
               T2iiai(i,i2,a,i1)  = T1iiai(i,i1,a,i2)  
#
               Tiiai(i,i1,a,i2)  += T1iiai(i,i1,a,i2) 
               TSiiai(i,i2,a,i1) -= T2iiai(i,i2,a,i1) 
#
               DO a2 
#
                  REQUEST Tau_aa(a1,i1,a2,i2) i2  
                  REQUEST VSaaai(a2,a,a1,i)   i # + 
#
                  T1iiai(i,i1,a,i2)  = Tau_aa(a1,i1,a2,i2)*VSaaai(a2,a,a1,i)
                  T1iiai(i,i1,a,i2) *= 0.5  
                  Tiiai(i,i1,a,i2)  += T1iiai(i,i1,a,i2) 
#
               ENDDO a2 
#
               DO i3 
#
                  REQUEST T2old_aa(a,i2,a1,i3) i3  
                  REQUEST VSpipi(i1,i,a1,i3)   i3 # + 
#
                  T1iiai(i,i1,a,i2)   = VSpipi(i1,i,a1,i3)*T2old_aa(a,i2,a1,i3) 
                  T2iiai(i,i2,a,i1)   = T1iiai(i,i1,a,i2) 
                  Tiiai(i,i1,a,i2)   += T1iiai(i,i1,a,i2) 
                  TSiiai(i,i2,a,i1)  -= T2iiai(i,i2,a,i1) 
#
               ENDDO i3 
#
            ENDDO a1 
#
            DO b 
            DO j 
#
               REQUEST T2old_ab(a,i2,b,j) j  
               REQUEST Vpiqj(i1,i,b,j)    j # + 
#
               T1iiai(i,i1,a,i2)  = Vpiqj(i1,i,b,j)*T2old_ab(a,i2,b,j) 
               Tiiai(i,i1,a,i2)  += T1iiai(i,i1,a,i2) 
#
               T2iiai(i,i2,a,i1)  = T1iiai(i,i1,a,i2) 
               TSiiai(i,i2,a,i1) -= T2iiai(i,i2,a,i1) 
#
            ENDDO j 
            ENDDO b 
#
            PREPARE W1imen_aa(i,i1,a,i2) += Tiiai(i,i1,a,i2) 
            PREPARE W1imen_aa(i,i2,a,i1) += TSiiai(i,i2,a,i1) 
#
      ENDPARDO i, i1, a, i2 
#
      ENDPROC W1IMENAA 
#     ---------------- 
#
      PROC W1IMENAB 
#     ------------- 
#
      PARDO i, i1, b, j 
#
            REQUEST Vpiqj(i,i1,b,j) j  
            Tiibj(i,i1,b,j) = Vpiqj(i,i1,b,j)  
#
            DO a 
#
               REQUEST T2old_ab(a,i1,b,j) j  
               REQUEST W2mebj_ab(i,a,b,j) j  
               GET Fme_a(i,a) 
               GET t1a_old(a,i1) 
#
               T1iibj(i,i1,b,j) = T2old_ab(a,i1,b,j)*Fme_a(i,a) 
               Tiibj(i,i1,b,j) += T1iibj(i,i1,b,j) 
#
               T1iibj(i,i1,b,j) = W2mebj_ab(i,a,b,j)*t1a_old(a,i1) 
               Tiibj(i,i1,b,j) += T1iibj(i,i1,b,j) 
#
               DO b1 
#
                  REQUEST Tau_ab(a,i1,b1,j) j  
                  REQUEST Vbbai(b1,b,a,i)   i  
#
                  T1iibj(i,i1,b,j) = Vbbai(b1,b,a,i)*Tau_ab(a,i1,b1,j) 
                  Tiibj(i,i1,b,j) += T1iibj(i,i1,b,j) 
#
               ENDDO b1 
#
               DO i2 
#
                  REQUEST T2old_ab(a,i2,b,j) j  
                  REQUEST VSpipi(i1,i,a,i2)  i2 # + 
#
                  T1iibj(i,i1,b,j) = VSpipi(i1,i,a,i2)*T2old_ab(a,i2,b,j)  
                  Tiibj(i,i1,b,j) += T1iibj(i,i1,b,j) 
#
               ENDDO i2 
#
               DO j1 
#
                  REQUEST T2old_ab(a,i1,b,j1) j1  
                  REQUEST Vpiqj(a,i,j,j1)     j1 # + 
#
                  T1iibj(i,i1,b,j) = Vpiqj(a,i,j,j1)*T2old_ab(a,i1,b,j1)  
                  Tiibj(i,i1,b,j) -= T1iibj(i,i1,b,j) 
#
               ENDDO j1 
#
            ENDDO a 
#
            DO j1 
#
               GET W1minj_ab(i,i1,j1,j)   
               GET t1b_old(b,j1) 
#
               T1iibj(i,i1,b,j) = W1minj_ab(i,i1,j1,j)*t1b_old(b,j1)  
               Tiibj(i,i1,b,j) -= T1iibj(i,i1,b,j) 
#
            ENDDO j1 
#
            DO b1 
#
               REQUEST W2mjbe_ab(i,i1,b,b1) b1  
               GET t1b_old(b1,j) 
#
               T1iibj(i,i1,b,j) = W2mjbe_ab(i,i1,b,b1)*t1b_old(b1,j)  
               Tiibj(i,i1,b,j) -= T1iibj(i,i1,b,j) 
#
               DO j2 
#
                  REQUEST T2old_bb(b1,j2,b,j) j  
                  REQUEST Vpiqj(i1,i,b1,j2)   j2 # + 
#
                  T1iibj(i,i1,b,j) = Vpiqj(i1,i,b1,j2)*T2old_bb(b1,j2,b,j)  
                  Tiibj(i,i1,b,j) += T1iibj(i,i1,b,j) 
#
               ENDDO j2 
#
            ENDDO b1 
#
            PREPARE W1imen_ab(i,i1,b,j) = Tiibj(i,i1,b,j) 
#
      ENDPARDO i, i1, b, j 
#
      ENDPROC W1IMENAB 
#     ---------------- 
#
      PROC W1IMENBA 
#     ------------- 
#
      PARDO j, j1, a, i 
#
            REQUEST Vpiqj(a,i,j,j1) j1  
            Tjjai(j,j1,a,i) = Vpiqj(a,i,j,j1)  
#
            DO b 
#
               REQUEST T2old_ab(a,i,b,j1) j1  
               REQUEST W2mebj_ba(j,b,a,i) i  
               GET Fme_b(j,b) 
               GET t1b_old(b,j1) 
#
               T1jjai(j,j1,a,i) = T2old_ab(a,i,b,j1)*Fme_b(j,b) 
               Tjjai(j,j1,a,i) += T1jjai(j,j1,a,i) 
#
               T1jjai(j,j1,a,i) = W2mebj_ba(j,b,a,i)*t1b_old(b,j1) 
               Tjjai(j,j1,a,i) += T1jjai(j,j1,a,i) 
#
               DO a1 
#
                  REQUEST Tau_ab(a1,i,b,j1) j1  
                  REQUEST Vaabj(a1,a,b,j)   j  
#
                  T1jjai(j,j1,a,i) = Vaabj(a1,a,b,j)*Tau_ab(a1,i,b,j1) 
                  Tjjai(j,j1,a,i) += T1jjai(j,j1,a,i) 
#
               ENDDO a1 
#
               DO j2 
#
                  REQUEST T2old_ab(a,i,b,j2) j2  
                  REQUEST VSqjqj(j1,j,b,j2)  j2 # + 
#
                  T1jjai(j,j1,a,i) = VSqjqj(j1,j,b,j2)*T2old_ab(a,i,b,j2)  
                  Tjjai(j,j1,a,i) += T1jjai(j,j1,a,i) 
#
               ENDDO j2 
#
               DO i1 
#
                  REQUEST T2old_ab(a,i1,b,j1) j1  
                  REQUEST Vpiqj(i,i1,b,j)     j # + 
#
                  T1jjai(j,j1,a,i) = T2old_ab(a,i1,b,j1)*Vpiqj(i,i1,b,j)  
                  Tjjai(j,j1,a,i) -= T1jjai(j,j1,a,i) 
#
               ENDDO i1 
#
            ENDDO b 
#
            DO i1 
#
               GET W1minj_ab(i1,i,j,j1) 
               GET t1a_old(a,i1) 
#
               T1jjai(j,j1,a,i) = W1minj_ab(i1,i,j,j1)*t1a_old(a,i1)  
               Tjjai(j,j1,a,i) -= T1jjai(j,j1,a,i) 
#
            ENDDO i1 
#
            DO a1  
#
               REQUEST W2mjbe_ba(j,j1,a,a1) a1  
               GET t1a_old(a1,i) 
#
               T1jjai(j,j1,a,i) = W2mjbe_ba(j,j1,a,a1)*t1a_old(a1,i)  
               Tjjai(j,j1,a,i) -= T1jjai(j,j1,a,i) 
#
               DO i1 
#
                  REQUEST T2old_aa(a1,i1,a,i) i  
                  REQUEST Vpiqj(a1,i1,j1,j)   j # + 
#
                  T1jjai(j,j1,a,i) = Vpiqj(a1,i1,j1,j)*T2old_aa(a1,i1,a,i)  
                  Tjjai(j,j1,a,i) += T1jjai(j,j1,a,i) 
#
               ENDDO i1 
#
            ENDDO a1 
#
            PREPARE W1imen_ba(j,j1,a,i) = Tjjai(j,j1,a,i) 
#
      ENDPARDO j, j1, a, i 
#
      ENDPROC W1IMENBA 
#     ---------------- 
#
      PROC W1IMENBB 
#     ------------- 
#
      PARDO j, j1, b, j2 
#
            REQUEST VSqjqj(j,j1,b,j2) j2 # + 
            Tjjbj(j,j1,b,j2)  = VSqjqj(j,j1,b,j2) 
            TSjjbj(j,j2,b,j1) = 0.0  
#
            DO j3  
#
               GET W1minj_bb(j,j1,j3,j2) 
               GET t1b_old(b,j3) 
#   
               T1jjbj(j,j1,b,j2) = W1minj_bb(j,j1,j3,j2)*t1b_old(b,j3) 
               Tjjbj(j,j1,b,j2) -= T1jjbj(j,j1,b,j2) 
#
            ENDDO j3 
#
            DO b1 
#
               REQUEST T2old_bb(b,j1,b1,j2) j2  
               REQUEST W2mebj_bb(j,b1,b,j2) j2  
               GET Fme_b(j,b1) 
               GET t1b_old(b1,j1) 
#
               T1jjbj(j,j1,b,j2)  = T2old_bb(b,j1,b1,j2)*Fme_b(j,b1) 
               Tjjbj(j,j1,b,j2)  -= T1jjbj(j,j1,b,j2) 
#
               T1jjbj(j,j1,b,j2)  = W2mebj_bb(j,b1,b,j2)*t1b_old(b1,j1)  
               T2jjbj(j,j2,b,j1)  = T1jjbj(j,j1,b,j2) 
#
               Tjjbj(j,j1,b,j2)  += T1jjbj(j,j1,b,j2) 
               TSjjbj(j,j2,b,j1) -= T2jjbj(j,j2,b,j1) 
#
               DO b2 
#
                  REQUEST Tau_bb(b1,j1,b2,j2) j2  
                  REQUEST VSbbbj(b2,b,b1,j)   j # + 
#
                  T1jjbj(j,j1,b,j2)  = Tau_bb(b1,j1,b2,j2)*VSbbbj(b2,b,b1,j)
                  T1jjbj(j,j1,b,j2) *= 0.5  
                  Tjjbj(j,j1,b,j2)  += T1jjbj(j,j1,b,j2) 
#
               ENDDO b2 
#
               DO j3 
#
                  REQUEST T2old_bb(b,j2,b1,j3) j3  
                  REQUEST VSqjqj(j1,j,b1,j3)   j3 # + 
#
                  T1jjbj(j,j1,b,j2)  = VSqjqj(j1,j,b1,j3)*T2old_bb(b,j2,b1,j3) 
                  Tjjbj(j,j1,b,j2)  += T1jjbj(j,j1,b,j2) 
#
                  T2jjbj(j,j2,b,j1)  = T1jjbj(j,j1,b,j2) 
                  TSjjbj(j,j2,b,j1) -= T2jjbj(j,j2,b,j1) 
#
               ENDDO j3 
#
            ENDDO b1 
#
            DO a 
            DO i 
#
               REQUEST T2old_ab(a,i,b,j2) j2  
               REQUEST Vpiqj(a,i,j1,j)    j # + 
#
               T1jjbj(j,j1,b,j2)  = Vpiqj(a,i,j1,j)*T2old_ab(a,i,b,j2) 
               T2jjbj(j,j2,b,j1)  = T1jjbj(j,j1,b,j2) 
#
               Tjjbj(j,j1,b,j2)   += T1jjbj(j,j1,b,j2) 
               TSjjbj(j,j2,b,j1)  -= T2jjbj(j,j2,b,j1) 
#
            ENDDO i 
            ENDDO a 
#
            PREPARE W1imen_bb(j,j1,b,j2) += Tjjbj(j,j1,b,j2) 
            PREPARE W1imen_bb(j,j2,b,j1) += TSjjbj(j,j2,b,j1) 
#
      ENDPARDO j, j1, b, j2 
#
      ENDPROC W1IMENBB 
#     ---------------- 
#
# ------------------------------------------------------------------------------------- 
#
# ------------------------------------------------------------------------------------- 
#
      PROC W1IMEN 
#     ----------- 
#
         CALL W1IMENAA
         CALL W1IMENAB 
         CALL W1IMENBA 
         CALL W1IMENBB
#
      ENDPROC W1IMEN 
#     -------------- 
#
# ------------------------------------------------------------------------------------- 
#
# ------------------------------------------------------------------------------------- 
#
      PROC W1EAFMAA_S  
#     --------------- 
#
      PARDO a1, a, a2, i 
#
# Compute (a1,a,a1,i) and (a2,a,a1,i) block of intermediate 
# --------------------------------------------------------- 
#
            Tpppp(a1,a,a2,i)  = 0.0  
            TSpppp(a2,a,a1,i) = 0.0  
#
            DO i1 
#
               REQUEST              T2old_aa(a1,i,a2,i1) i1  
               REQUEST              W2mebj_aa(i1,a,a2,i) i  
               GET                  Fme_a(i1,a) 
               GET                  t1a_old(a1,i1) 
#
               T1pppp(a1,a,a2,i)  = T2old_aa(a1,i,a2,i1)*Fme_a(i1,a)  
               Tpppp(a1,a,a2,i)  += T1pppp(a1,a,a2,i) 
#
               T1pppp(a1,a,a2,i)  = W2mebj_aa(i1,a,a2,i)*t1a_old(a1,i1)  
               T2pppp(a2,a,a1,i)  = T1pppp(a1,a,a2,i)  
# 
               Tpppp(a1,a,a2,i)  -= T1pppp(a1,a,a2,i) 
               TSpppp(a2,a,a1,i) += T2pppp(a2,a,a1,i) 
#
            ENDDO i1 
#
            PREPARE W1eafm_aa(a1,a,a2,i) +=  Tpppp(a1,a,a2,i) 
            PREPARE W1eafm_aa(a2,a,a1,i) += TSpppp(a2,a,a1,i) 
#
      ENDPARDO a1, a, a2, i 
#
      PARDO a1, a2, i1, i2  
#
            REQUEST Tau_aa(a1,i1,a2,i2) i2  
#
            DO a 
            DO i 
#
               REQUEST                         VSpipi(a,i1,i,i2)   i2 # +  
               T1pppp(a1,a,a2,i)             = Tau_aa(a1,i1,a2,i2)*VSpipi(a,i1,i,i2)  
               T1pppp(a1,a,a2,i)            *= 0.5  
               PREPARE W1eafm_aa(a1,a,a2,i) +=  T1pppp(a1,a,a2,i) 
#
            ENDDO i 
            ENDDO a 
#
      ENDPARDO a1, a2, i1, i2  
#
      PARDO a, a1, a3, i2 
#
            REQUEST VSaaai(a,a1,a3,i2) i2 
#
            DO i 
            DO a2 
#
               REQUEST                         T2old_aa(a3,i2,a2,i) i 
               T1pppp(a1,a,a2,i)             = VSaaai(a,a1,a3,i2)*T2old_aa(a3,i2,a2,i) 
               PREPARE W1eafm_aa(a1,a,a2,i) += T1pppp(a1,a,a2,i) 
#
               T2pppp(a2,a,a1,i)             = T1pppp(a1,a,a2,i)  
               T2pppp(a2,a,a1,i)            *= -1.0  
               PREPARE W1eafm_aa(a2,a,a1,i) += T2pppp(a2,a,a1,i) 
#
            ENDDO a2 
            ENDDO i 
#
            DO b 
            DO j 
#
               REQUEST                        T2old_ab(a3,i2,b,j) j 
               Tppqq(a1,a,b,j)              = VSaaai(a,a1,a3,i2)*T2old_ab(a3,i2,b,j) 
               PREPARE W1eafm_ab(a1,a,b,j) += Tppqq(a1,a,b,j)
#
            ENDDO j 
            ENDDO b 
#
      ENDPARDO a, a1, a3, i2
#
      PARDO a, a1, b, j 
#
            REQUEST Vaabj(a,a1,b,j) j 
#
            DO a2  
            DO i 
#
               REQUEST                         T2old_ab(a2,i,b,j) j 
               Tpppp(a1,a,a2,i)              = Vaabj(a,a1,b,j)*T2old_ab(a2,i,b,j)
               Tpppp(a1,a,a2,i)             *= 2.0  
               PREPARE W1eafm_aa(a1,a,a2,i) +=  Tpppp(a1,a,a2,i) 
#
            ENDDO i 
            ENDDO a2 
#
            DO b1 
            DO j1 
#
               REQUEST                          T2old_bb(b1,j1,b,j) j 
               Tppqq(a1,a,b1,j1)              = Vaabj(a,a1,b,j)*T2old_bb(b1,j1,b,j)
               PREPARE W1eafm_ab(a1,a,b1,j1) += Tppqq(a1,a,b1,j1) 
#
            ENDDO j1 
            ENDDO b1 
#
            DO b1 
            DO i  
#
               REQUEST                         T2old_ab(a,i,b1,j) j 
               Tqqpp(b1,b,a1,i)              = T2old_ab(a,i,b1,j)*Vaabj(a,a1,b,j) 
               Tqqpp(b1,b,a1,i)             *= -1.0  
               PREPARE W1eafm_ba(b1,b,a1,i) += Tqqpp(b1,b,a1,i) 
#
            ENDDO i  
            ENDDO b1 
#
      ENDPARDO a, a1, b, j 
#
      ENDPROC W1EAFMAA_S  
#     --------------- 
#
      PROC W1EAFMAA  
#     ------------- 
#
# Done contributions involving integrals with three virtuals.
# -----------------------------------------------------------
#
      PARDO a, i, a1, a2  
#
            REQUEST W1eafm_aa(a1,a,a2,i) a  
#
# Compute contribution to l1a_new 
# ------------------------------- 
#
            DO i1 
#
               REQUEST L2old_aa(i1,a1,i,a2) a2  
#
               T1ia(i1,a)         = L2old_aa(i1,a1,i,a2)*W1eafm_aa(a1,a,a2,i)
               T1ia(i1,a)        *= 0.5
               PUT l1a_new(i1,a) += T1ia(i1,a) 
#
            ENDDO i1 
#
      ENDPARDO a, i, a1, a2 
#
# Done contributions involving integrals with three virtuals.
# -----------------------------------------------------------
#
      ENDPROC W1EAFMAA 
#     ---------------- 
#
      PROC W1EAFMAB_S 
#     --------------- 
#
# Compute (a1,a,b,j) block of intermediate 
# ---------------------------------------- 
#
      PARDO a, a1, j, b 
#
            Tppqq(a1,a,b,j) = 0.0 
#
            DO i 
#
               REQUEST            T2old_ab(a1,i,b,j) j  
               REQUEST            W2mebj_ab(i,a,b,j) j  
               GET                Fme_a(i,a) 
               GET                t1a_old(a1,i) 
#
               T1ppqq(a1,a,b,j) = T2old_ab(a1,i,b,j)*Fme_a(i,a)
               Tppqq(a1,a,b,j) -= T1ppqq(a1,a,b,j)
#
               T1ppqq(a1,a,b,j) = W2mebj_ab(i,a,b,j)*t1a_old(a1,i) 
               Tppqq(a1,a,b,j) -= T1ppqq(a1,a,b,j)
#
            ENDDO i 
#
            PREPARE W1eafm_ab(a1,a,b,j) += Tppqq(a1,a,b,j) 
#
      ENDPARDO a, a1, j, b 
#
      PARDO a, a1, j, j1  
#
            REQUEST W2mjbe_ba(j1,j,a1,a) a  
#
            DO b 
#
               GET                            t1b_old(b,j1) 
               Tppqq(a1,a,b,j)              = W2mjbe_ba(j1,j,a1,a)*t1b_old(b,j1) 
               PREPARE W1eafm_ab(a1,a,b,j) += Tppqq(a1,a,b,j) 
#
            ENDDO b 
#
      ENDPARDO a, a1, j, j1 
#
      PARDO a1, b, j1, i 
#
            REQUEST Tau_ab(a1,i,b,j1) j1  
#
            DO a 
            DO j 
#   
               REQUEST                        Vpiqj(a,i,j,j1) j1  
               Tppqq(a1,a,b,j)              = Tau_ab(a1,i,b,j1)*Vpiqj(a,i,j,j1) 
               PREPARE W1eafm_ab(a1,a,b,j) += Tppqq(a1,a,b,j) 
#
            ENDDO j 
            ENDDO a 
#
      ENDPARDO a1, b, j1, i 
#
      ENDPROC W1EAFMAB_S 
#     ------------------ 
#
      PROC W1EAFMAB 
#     ------------- 
#
# Compute contribution to l1a_new
# -------------------------------
#
      PARDO a, a1, j, b
#
            REQUEST W1eafm_ab(a1,a,b,j) a  
#
            DO i
#
               REQUEST             L2old_ab(i,a1,j,b) b
               T1ia(i,a)         = L2old_ab(i,a1,j,b)*W1eafm_ab(a1,a,b,j)
               PUT l1a_new(i,a) += T1ia(i,a)
#
            ENDDO i
#
      ENDPARDO a, a1, j, b 
#
# Done contributions involving integrals with three virtuals.
# -----------------------------------------------------------
#
      ENDPROC W1EAFMAB 
#     ---------------- 
#
      PROC W1EAFMBA_S  
#     --------------- 
#
      PARDO b, b1, a, i 
#
# Compute (b1,b,a,i) block of intermediate 
# ---------------------------------------- 
#
            Tqqpp(b1,b,a,i) = 0.0 
#
            DO j 
#
               REQUEST T2old_ab(a,i,b1,j) j  
               REQUEST W2mebj_ba(j,b,a,i) j  
               GET Fme_b(j,b) 
               GET t1b_old(b1,j) 
#
               T1qqpp(b1,b,a,i) = T2old_ab(a,i,b1,j)*Fme_b(j,b)
               Tqqpp(b1,b,a,i) -= T1qqpp(b1,b,a,i)
#
               T1qqpp(b1,b,a,i) = W2mebj_ba(j,b,a,i)*t1b_old(b1,j) 
               Tqqpp(b1,b,a,i) -= T1qqpp(b1,b,a,i)
#
            ENDDO j 
#
            PREPARE W1eafm_ba(b1,b,a,i) += Tqqpp(b1,b,a,i) 
#
      ENDPARDO b, b1, a, i  
#
      PARDO a, b1, i1, j  
#
            REQUEST Tau_ab(a,i1,b1,j) j  
#
            DO b 
            DO i 
#   
               REQUEST                        Vpiqj(i,i1,b,j) j  
               Tqqpp(b1,b,a,i)              = Tau_ab(a,i1,b1,j)*Vpiqj(i,i1,b,j) 
               PREPARE W1eafm_ba(b1,b,a,i) += Tqqpp(b1,b,a,i) 
#
            ENDDO i 
            ENDDO b 
#
      ENDPARDO a, b1, i1, j 
#
      PARDO i, i1, b, b1  
#
            REQUEST W2mjbe_ab(i1,i,b1,b) b  
#
            DO a 
               GET                            t1a_old(a,i1) 
               Tqqpp(b1,b,a,i)              = W2mjbe_ab(i1,i,b1,b)*t1a_old(a,i1) 
               PREPARE W1eafm_ba(b1,b,a,i) += Tqqpp(b1,b,a,i) 
#
            ENDDO a 
#
      ENDPARDO i, i1, b, b1 
#
      ENDPROC W1EAFMBA_S  
#     ------------------ 
#
# Compute contribution to l1b_new 
# ------------------------------- 
#
      PROC W1EAFMBA 
#     ------------- 
#
      PARDO b, b1, i, a  
#
            REQUEST W1eafm_ba(b1,b,a,i) a 
#
            DO j
#
               REQUEST             L2old_ab(i,a,j,b1) b1 
               T1jb(j,b)         = W1eafm_ba(b1,b,a,i)*L2old_ab(i,a,j,b1)
               PUT l1b_new(j,b) += T1jb(j,b)
#
            ENDDO j
#
      ENDPARDO b, b1, i, a  
#
      ENDPROC W1EAFMBA 
#     ---------------- 
#
      PROC W1EAFMBB_S  
#     --------------- 
#
      PARDO b1, b, b2, j 
#
# Compute (b1,b,b1,j) and (b2,b,b1,j) block of intermediate 
# --------------------------------------------------------- 
#
            Tqqqq(b1,b,b2,j)  = 0.0  
            TSqqqq(b2,b,b1,j) = 0.0  
#
            DO j1 
#
               REQUEST              T2old_bb(b1,j,b2,j1) j1  
               REQUEST              W2mebj_bb(j1,b,b2,j) j1  
               GET                  Fme_b(j1,b) 
               GET                  t1b_old(b1,j1) 
#
               T1qqqq(b1,b,b2,j)  = T2old_bb(b1,j,b2,j1)*Fme_b(j1,b)  
               Tqqqq(b1,b,b2,j)  += T1qqqq(b1,b,b2,j) 
#
               T1qqqq(b1,b,b2,j)  = W2mebj_bb(j1,b,b2,j)*t1b_old(b1,j1)  
               T2qqqq(b2,b,b1,j)  = T1qqqq(b1,b,b2,j)  
# 
                Tqqqq(b1,b,b2,j) -= T1qqqq(b1,b,b2,j) 
               TSqqqq(b2,b,b1,j) += T2qqqq(b2,b,b1,j) 
#
            ENDDO j1 
#
            PREPARE W1eafm_bb(b1,b,b2,j) +=  Tqqqq(b1,b,b2,j) 
            PREPARE W1eafm_bb(b2,b,b1,j) += TSqqqq(b2,b,b1,j) 
#
      ENDPARDO b1, b, b2, j 
#
      PARDO j, b, b1, b2  
#
            Tqqqq(b1,b,b2,j)  = 0.0  
#
            DO j1 
            DO j2 
#
               REQUEST Tau_bb(b1,j1,b2,j2) j2  
               REQUEST VSqjqj(b,j1,j,j2)   j2 # +  
#
               T1qqqq(b1,b,b2,j)  = Tau_bb(b1,j1,b2,j2)*VSqjqj(b,j1,j,j2)  
               T1qqqq(b1,b,b2,j) *= 0.5  
               Tqqqq(b1,b,b2,j)  += T1qqqq(b1,b,b2,j) 
#
            ENDDO j2 
            ENDDO j1 
#
            PREPARE W1eafm_bb(b1,b,b2,j) +=  Tqqqq(b1,b,b2,j) 
#
      ENDPARDO j, b, b1, b2  
#
      PARDO b, b1, b3, j2  
#
            REQUEST VSbbbj(b,b1,b3,j2) j2 
#
            DO b2 
            DO j 
#
               REQUEST                         T2old_bb(b3,j2,b2,j) j 
               T1qqqq(b1,b,b2,j)             = VSbbbj(b,b1,b3,j2)*T2old_bb(b3,j2,b2,j) 
               PREPARE W1eafm_bb(b1,b,b2,j) += T1qqqq(b1,b,b2,j) 
#
               T2qqqq(b2,b,b1,j)             = T1qqqq(b1,b,b2,j)  
               T2qqqq(b2,b,b1,j)            *= -1.0  
               PREPARE W1eafm_bb(b2,b,b1,j) += T2qqqq(b2,b,b1,j) 
#
            ENDDO j 
            ENDDO b2 
#
            DO a 
            DO i 
#
               REQUEST                        T2old_ab(a,i,b3,j2) j2 
               Tqqpp(b1,b,a,i)              = VSbbbj(b,b1,b3,j2)*T2old_ab(a,i,b3,j2)
               PREPARE W1eafm_ba(b1,b,a,i) += Tqqpp(b1,b,a,i)
#
            ENDDO i 
            ENDDO a 
#
      ENDPARDO b, b1, b3, j2  
#
      PARDO b, b1, a, i 
#
            REQUEST Vbbai(b,b1,a,i) i 
#
            DO b2 
            DO j 
#
               REQUEST                         T2old_ab(a,i,b2,j) j 
               Tqqqq(b1,b,b2,j)              = Vbbai(b,b1,a,i)*T2old_ab(a,i,b2,j)
               Tqqqq(b1,b,b2,j)             *= 2.0  
               PREPARE W1eafm_bb(b1,b,b2,j) += Tqqqq(b1,b,b2,j) 
#
            ENDDO j 
            ENDDO b2 
#
            DO j 
            DO a1  
#
               REQUEST                         T2old_ab(a1,i,b,j) j 
               Tppqq(a1,a,b1,j)              = T2old_ab(a1,i,b,j)*Vbbai(b,b1,a,i)  
               Tppqq(a1,a,b1,j)             *= -1.0  
               PREPARE W1eafm_ab(a1,a,b1,j) += Tppqq(a1,a,b1,j)
#
            ENDDO a1 
            ENDDO j  
#
            DO a1 
            DO i1 
#
               REQUEST                          T2old_aa(a1,i1,a,i) i1 
               Tqqpp(b1,b,a1,i1)              = Vbbai(b,b1,a,i)*T2old_aa(a1,i1,a,i)  
               PREPARE W1eafm_ba(b1,b,a1,i1) += Tqqpp(b1,b,a1,i1)
#
            ENDDO i1 
            ENDDO a1 
#
      ENDPARDO b, b1, a, i 
#
      ENDPROC W1EAFMBB_S  
#     ------------------ 
#
      PROC W1EAFMBB  
#     ------------- 
#
      PARDO b, b1, b2, j 
#
            REQUEST W1eafm_bb(b1,b,b2,j) b 
#
# Compute contribution to l1b_new 
# ------------------------------- 
#
            DO j1 
#
               REQUEST L2old_bb(j1,b1,j,b2) b2 
#
               T1jb(j1,b)         = L2old_bb(j1,b1,j,b2)*W1eafm_bb(b1,b,b2,j)
               T1jb(j1,b)        *= 0.5
               PUT l1b_new(j1,b) += T1jb(j1,b)
#
            ENDDO j1 
#
      ENDPARDO b, b1, b2, j 
#
      ENDPROC W1EAFMBB 
#     ---------------- 
#
      PROC W1EAFM_S  
#     -------------  
# 
         CALL W1EAFMAA_S 
         CALL W1EAFMAB_S 
         CALL W1EAFMBB_S 
         CALL W1EAFMBA_S
#
      ENDPROC W1EAFM_S 
#     ---------------- 
#
      PROC W1EAFM 
#     -----------  
# 
         CALL W1EAFMAA
         CALL W1EAFMAB
         CALL W1EAFMBB
         CALL W1EAFMBA
#
      ENDPROC W1EAFM 
#     -------------- 
#
# -------------------------------------------------------------------------------------- 
#
# -------------------------------------------------------------------------------------- 
#
      PROC L1ANEW 
#     ----------- 
#
#     local arrays used: 
#     ------------------ 
#     local Liaia(i1,a,i2,a1) 
#     local Liajb(i1,a,j,b) 
# 
      PARDO a, i
#
            GET        Fme_a(i,a)
            GET        Sai(a,i) 
            Tia(i,a) = Sai(a,i) 
            Tia(i,a)+= Fme_a(i,a) 
#
            DO a1
#
               GET l1a_old(i,a1)
               GET F1ae_a(a1,a)
#
               T1ia(i,a) = l1a_old(i,a1)*F1ae_a(a1,a)
               Tia(i,a) += T1ia(i,a)
#
               DO a2
#
                  REQUEST VSaaai(a2,a1,a,i) i
                  GET Gae_a(a1,a2)
#
                  T1ia(i,a) = VSaaai(a2,a1,a,i)*Gae_a(a1,a2)
                  Tia(i,a) -= T1ia(i,a)
#
               ENDDO a2
#
            ENDDO a1
#
            DO i1
#
               GET l1a_old(i1,a)
               GET F1mi_a(i,i1)
#
               T1ia(i,a) = l1a_old(i1,a)*F1mi_a(i,i1)
               Tia(i,a) -= T1ia(i,a)
#
               DO i2
#
                  REQUEST VSpipi(a,i,i1,i2) i2  
                  GET Gmi_a(i2,i1)
#
                  T1ia(i,a) = VSpipi(a,i,i1,i2)*Gmi_a(i2,i1)
                  Tia(i,a) -= T1ia(i,a)
#
               ENDDO i2
#
            ENDDO i1
#
            DO j
#
               DO j1
#
                  REQUEST Vpiqj(a,i,j,j1) j1  
                  GET Gmi_b(j1,j)
#
                  T1ia(i,a) = Vpiqj(a,i,j,j1)*Gmi_b(j1,j)
                  Tia(i,a) -= T1ia(i,a)
#
               ENDDO j1
#
            ENDDO j
#
            DO b
            DO b1
#
               REQUEST Vbbai(b1,b,a,i) i
               GET Gae_b(b,b1)
#
               T1ia(i,a) = Vbbai(b1,b,a,i)*Gae_b(b,b1)
               Tia(i,a) -= T1ia(i,a)
#
            ENDDO b1
            ENDDO b
#
            PUT l1a_new(i,a) += Tia(i,a)
#
      ENDPARDO a, i
#
      PARDO i1, a1, i2  
#
            allocate Liaia(i1,*,i2,a1) 
#
            DO a 
#
               REQUEST             L2old_aa(i1,a,i2,a1)  a1
               Liaia(i1,a,i2,a1) = L2old_aa(i1,a,i2,a1) 
#
            ENDDO a 
#
            DO i
#
               REQUEST W1imen_aa(i,i1,a1,i2) i2 
#
               DO a
#
                  Tia(i,a)          = W1imen_aa(i,i1,a1,i2)*Liaia(i1,a,i2,a1)
                  Tia(i,a)         *= -0.5
                  PUT l1a_new(i,a) += Tia(i,a)
#
               ENDDO a
#
            ENDDO i
#
            deallocate Liaia(i1,*,i2,a1) 
#
      ENDPARDO i1, a1, i2  
#
      PARDO j, b, i1  
#
            allocate Liajb(i1,*,j,b) 
#
            DO a 
#
               REQUEST           L2old_ab(i1,a,j,b)  b 
               Liajb(i1,a,j,b) = L2old_ab(i1,a,j,b) 
#
            ENDDO a 
#
            DO i
#
               REQUEST W1imen_ab(i,i1,b,j) b 
#
               DO a
#
                  Tia(i,a)          = W1imen_ab(i,i1,b,j)*Liajb(i1,a,j,b) 
                  Tia(i,a)         *= -1.0
                  PUT l1a_new(i,a) += Tia(i,a)
#
               ENDDO a
#
            ENDDO i
#
            deallocate Liajb(i1,*,j,b) 
#
      ENDPARDO j, b, i1  
#
      PARDO a, i, a1, i1
#
            REQUEST             VSpipi(a,i,a1,i1) i1  
            Taiai(a,i,a1,i1)  = VSpipi(a,i,a1,i1)
#
            T2ia(i1,a1) = 0.0
#
            DO a2
#
               GET Gae_a(a2,a1)
               GET t1a_old(a2,i1)
#
               T3ia(i1,a1)  = Gae_a(a2,a1)*t1a_old(a2,i1)
               T2ia(i1,a1) += T3ia(i1,a1)
#
            ENDDO a2
#
            DO i2
#
               GET Gmi_a(i1,i2)
               GET t1a_old(a1,i2)
#
               T3ia(i1,a1)  = Gmi_a(i1,i2)*t1a_old(a1,i2)
               T2ia(i1,a1) -= T3ia(i1,a1)
#
            ENDDO i2
#
            Tia(i,a)          = Taiai(a,i,a1,i1)*T2ia(i1,a1)
            PUT l1a_new(i,a) += Tia(i,a)
#
      ENDPARDO a, i, a1, i1
#
      PARDO a, b, i, j
#
            REQUEST Vpiqj(a,i,b,j) j
#
            T2jb(j,b) = 0.0
#
            DO b1
#
               GET Gae_b(b1,b)
               GET t1b_old(b1,j)
#
               T3jb(j,b)  = Gae_b(b1,b)*t1b_old(b1,j)
               T2jb(j,b) += T3jb(j,b)
#
            ENDDO b1
#
            DO j1
#
               GET Gmi_b(j,j1)
               GET t1b_old(b,j1)
#
               T3jb(j,b)  = Gmi_b(j,j1)*t1b_old(b,j1)
               T2jb(j,b) -= T3jb(j,b)
#
            ENDDO j1
#
            Tia(i,a)          = Vpiqj(a,i,b,j)*T2jb(j,b)
            PUT l1a_new(i,a) += Tia(i,a)
#
      ENDPARDO a, b, i, j
#
      ENDPROC L1ANEW 
#     -------------- 
#
      PROC L1BNEW 
#     ----------- 
#
      PARDO b, j
# 
            GET        Fme_b(j,b)
            GET        Sbj(b,j) 
            Tjb(j,b) = Sbj(b,j) 
            Tjb(j,b)+= Fme_b(j,b) #0.0
#
            DO j1
#
               GET l1b_old(j1,b)
               GET F1mi_b(j,j1)
#
               T1jb(j,b) = l1b_old(j1,b)*F1mi_b(j,j1)
               Tjb(j,b) -= T1jb(j,b)
#
               DO j2
#
                  REQUEST VSqjqj(b,j,j1,j2) j2  
                  GET Gmi_b(j2,j1)
#
                  T1jb(j,b) = VSqjqj(b,j,j1,j2)*Gmi_b(j2,j1)
                  Tjb(j,b) -= T1jb(j,b)
#
                  DO b1
#
                     REQUEST L2old_bb(j1,b,j2,b1)  b1 
                     REQUEST W1imen_bb(j,j1,b1,j2) j2 
#
                     T1jb(j,b)  = W1imen_bb(j,j1,b1,j2)*L2old_bb(j1,b,j2,b1)
                     T1jb(j,b) *= -0.5
                     Tjb(j,b) += T1jb(j,b)
#
                  ENDDO b1
#
               ENDDO j2
#
            ENDDO j1
#
            DO b1
#
               GET l1b_old(j,b1)
               GET F1ae_b(b1,b)
#
               T1jb(j,b) = l1b_old(j,b1)*F1ae_b(b1,b)
               Tjb(j,b) += T1jb(j,b)
#
               DO b2
#
                  REQUEST VSbbbj(b2,b1,b,j) j
                  GET Gae_b(b1,b2)
#
                  T1jb(j,b) = VSbbbj(b2,b1,b,j)*Gae_b(b1,b2)
                  Tjb(j,b) -= T1jb(j,b)
#
               ENDDO b2
#
            ENDDO b1
#
            DO i
#
               DO i1
#
                  REQUEST Vpiqj(i,i1,b,j) j
                  GET Gmi_a(i1,i)
#
                  T1jb(j,b) = Vpiqj(i,i1,b,j)*Gmi_a(i1,i)
                  Tjb(j,b) -= T1jb(j,b)
#
               ENDDO i1
#
               DO j1
               DO a
#
                  REQUEST L2old_ab(i,a,j1,b)  b 
                  REQUEST W1imen_ba(j,j1,a,i) i 
#
                  T1jb(j,b)  = W1imen_ba(j,j1,a,i)*L2old_ab(i,a,j1,b)
                  Tjb(j,b) -= T1jb(j,b)
#
               ENDDO a
               ENDDO j1
#
            ENDDO i
#
            DO a
            DO a1
#
               REQUEST Vaabj(a1,a,b,j) j
               GET Gae_a(a,a1)
#
               T1jb(j,b) = Vaabj(a1,a,b,j)*Gae_a(a,a1)
               Tjb(j,b) -= T1jb(j,b)
#
            ENDDO a1
            ENDDO a
#
            PUT l1b_new(j,b) += Tjb(j,b)
#
      ENDPARDO b, j
#
      PARDO b, b1, j, j1
#
            REQUEST VSqjqj(b,j,b1,j1) j1  
            Tbjbj(b,j1,b1,j) = VSqjqj(b,j,b1,j1)
#
            T2jb(j1,b1) = 0.0
#
            DO b2
#
               GET Gae_b(b2,b1)
               GET t1b_old(b2,j1)
#
               T3jb(j1,b1)  = Gae_b(b2,b1)*t1b_old(b2,j1)
               T2jb(j1,b1) += T3jb(j1,b1)
#
            ENDDO b2
#
            DO j2
#
               GET Gmi_b(j1,j2)
               GET t1b_old(b1,j2)
#
               T3jb(j1,b1)  = Gmi_b(j1,j2)*t1b_old(b1,j2)
               T2jb(j1,b1) -= T3jb(j1,b1)
#
            ENDDO j2
#
            Tjb(j,b) = Tbjbj(b,j1,b1,j)*T2jb(j1,b1)
#
            PUT l1b_new(j,b) += Tjb(j,b)
#
      ENDPARDO b, b1, j, j1
#
      PARDO b, a, j, i
#
            REQUEST Vpiqj(a,i,b,j) j
            T2ia(i,a) = 0.0
#
            DO a1
#
               GET Gae_a(a1,a)
               GET t1a_old(a1,i)
#
               T3ia(i,a)  = Gae_a(a1,a)*t1a_old(a1,i)
               T2ia(i,a) += T3ia(i,a)
#
            ENDDO a1
#
            DO i1
#
               GET Gmi_a(i,i1)
               GET t1a_old(a,i1)
#
               T3ia(i,a)  = Gmi_a(i,i1)*t1a_old(a,i1)
               T2ia(i,a) -= T3ia(i,a)
#
            ENDDO i1
#
            Tjb(j,b) = Vpiqj(a,i,b,j)*T2ia(i,a)
#
            PUT l1b_new(j,b) += Tjb(j,b)
#
      ENDPARDO b, a, j, i
#
      ENDPROC L1BNEW 
#     -------------- 
#
# ------------------------------------------------------------------------------------ 
#
# ------------------------------------------------------------------------------------ 
#
      PROC L2NEWAA 
#     ------------ 
#
      PARDO a, a1, a2, i1
#
            REQUEST VSaaai(a,a2,a1,i1)  i1  
#
            DO i
#
               GET                            l1a_old(i,a2)
               Tiaia(i,a,i1,a1)             = VSaaai(a,a2,a1,i1)*l1a_old(i,a2)
               T3iaia(i1,a,i,a1)            = Tiaia(i,a,i1,a1)
               T3iaia(i1,a,i,a1)           *= -1.0  
               PREPARE L2new_aa(i,a,i1,a1) +=  Tiaia(i,a,i1,a1)
               PREPARE L2new_aa(i1,a,i,a1) += T3iaia(i1,a,i,a1)
#
            ENDDO i
#
      ENDPARDO a, a1, a2, i1
#
      PARDO i, a1, a, i1
#
            REQUEST             VSpipi(a,i,a1,i1) i1  
            GET                 l1a_old(i,a)
            GET                 Fme_a(i1,a1)
#
            Tiaia(i,a,i1,a1)  = VSpipi(a,i,a1,i1)
            T2iaia(i,a1,i1,a) = 0.0
            T3iaia(i1,a,i,a1) = 0.0
            T4iaia(i1,a1,i,a) = 0.0
#
            DO a2
#
               REQUEST              L2old_aa(i,a,i1,a2) a2 
               REQUEST              VSpipi(a,i,a2,i1)   i1  
               GET                  Gae_a(a1,a2)
               GET                  F1ae_a(a2,a1)
#
               T1iaia(i,a,i1,a1)  = L2old_aa(i,a,i1,a2)*F1ae_a(a2,a1)
               Tiaia(i,a,i1,a1)  += T1iaia(i,a,i1,a1)
#
               TXiaia(i,a1,i1,a)  = T1iaia(i,a,i1,a1)
               T2iaia(i,a1,i1,a) -= TXiaia(i,a1,i1,a)
#
               Taa(a2,a1)         = Gae_a(a1,a2)
#
               DO i2
#
                  GET            l1a_old(i2,a1)
                  GET           t1a_old(a2,i2)

                  T1aa(a2,a1) = t1a_old(a2,i2)*l1a_old(i2,a1)
                  Taa(a2,a1) -= T1aa(a2,a1)
#
               ENDDO i2
#
               T1iaia(i,a,i1,a1)  = VSpipi(a,i,a2,i1)*Taa(a2,a1)
               Tiaia(i,a,i1,a1)  += T1iaia(i,a,i1,a1)
#
               TXiaia(i,a1,i1,a)  = T1iaia(i,a,i1,a1)
               T2iaia(i,a1,i1,a) -= TXiaia(i,a1,i1,a)
#
            ENDDO a2
#
            T1iaia(i,a,i1,a1)  = l1a_old(i,a)^Fme_a(i1,a1)
            Tiaia(i,a,i1,a1)  += T1iaia(i,a,i1,a1)
#
            TXiaia(i,a1,i1,a)  = T1iaia(i,a,i1,a1)
            T2iaia(i,a1,i1,a) -= TXiaia(i,a1,i1,a)
#
            TXiaia(i1,a,i,a1)  = T1iaia(i,a,i1,a1)
            T3iaia(i1,a,i,a1) -= TXiaia(i1,a,i,a1)
#
            TXiaia(i1,a1,i,a)  = T1iaia(i,a,i1,a1)
            T4iaia(i1,a1,i,a) += TXiaia(i1,a1,i,a)
#
            PREPARE L2new_aa(i,a,i1,a1) +=  Tiaia(i,a,i1,a1)
            PREPARE L2new_aa(i,a1,i1,a) += T2iaia(i,a1,i1,a)
            PREPARE L2new_aa(i1,a,i,a1) += T3iaia(i1,a,i,a1)
            PREPARE L2new_aa(i1,a1,i,a) += T4iaia(i1,a1,i,a)
#
      ENDPARDO i, a1, a, i1
#
      PARDO i1, i, a, a1
#
            REQUEST Saiai(a,i,a1,i1) a 
#
            Tiaia(i,a,i1,a1)  = Saiai(a,i,a1,i1) # 0.0  
            T2iaia(i,a1,i1,a) = 0.0
            T3iaia(i1,a,i,a1) = 0.0
#
            DO i2
#
               REQUEST L2old_aa(i,a,i2,a1) a1
               REQUEST VSpipi(i2,i,a1,i1)  i1  
               REQUEST VSpipi(a,i,a1,i2)   i2  
               GET Gmi_a(i2,i1)
               GET F1mi_a(i1,i2)
               GET l1a_old(i2,a)
#
               T1iaia(i,a,i1,a1)  = L2old_aa(i,a,i2,a1)*F1mi_a(i1,i2)
               T1iaia(i,a,i1,a1) *= -1.0
#
               Tii(i1,i2)         = Gmi_a(i2,i1)
               Tiaia(i,a,i1,a1)  += T1iaia(i,a,i1,a1)
#
               TXiaia(i1,a,i,a1)  = T1iaia(i,a,i1,a1)
               T3iaia(i1,a,i,a1) -= TXiaia(i1,a,i,a1)
#
               T1iaia(i,a,i1,a1)  = VSpipi(i2,i,a1,i1)*l1a_old(i2,a)
               Tiaia(i,a,i1,a1)  -= T1iaia(i,a,i1,a1)
#
               TXiaia(i,a1,i1,a)  = T1iaia(i,a,i1,a1)
               T2iaia(i,a1,i1,a) += TXiaia(i,a1,i1,a)
#
               DO a2
#
                  GET l1a_old(i1,a2)
                  GET t1a_old(a2,i2)
#
                  T1ii(i1,i2) = l1a_old(i1,a2)*t1a_old(a2,i2)
                  Tii(i1,i2) += T1ii(i1,i2)
#
               ENDDO a2
#
               T1iaia(i,a,i1,a1)  = VSpipi(a,i,a1,i2)*Tii(i1,i2)
               Tiaia(i,a,i1,a1)  -= T1iaia(i,a,i1,a1)
#
               TXiaia(i1,a,i,a1)  = T1iaia(i,a,i1,a1)
               T3iaia(i1,a,i,a1) += TXiaia(i1,a,i,a1)
#
               DO i3
#
                  REQUEST L2old_aa(i2,a,i3,a1)  a1 
                  GET     W1minj_aa(i,i2,i1,i3) 
#
                  T1iaia(i,a,i1,a1)  = W1minj_aa(i,i2,i1,i3)*L2old_aa(i2,a,i3,a1)
                  T1iaia(i,a,i1,a1) *= 0.5
                  Tiaia(i,a,i1,a1)  += T1iaia(i,a,i1,a1)
#
               ENDDO i3
#
            ENDDO i2
#
            PREPARE L2new_aa(i,a,i1,a1) +=  Tiaia(i,a,i1,a1)
            PREPARE L2new_aa(i,a1,i1,a) += T2iaia(i,a1,i1,a)
            PREPARE L2new_aa(i1,a,i,a1) += T3iaia(i1,a,i,a1)
#
      ENDPARDO i1, i, a, a1
# 
      ENDPROC L2NEWAA 
#     --------------- 
#
      PROC L2NEWAB 
#     ------------ 
#
      PARDO i, j, a, b  
#
            REQUEST            Vpiqj(a,i,b,j) j 
            GET                l1a_old(i,a)
            GET                Fme_b(j,b)
            GET                l1b_old(j,b)
            GET                Fme_a(i,a)
#
            Tiajb(i,a,j,b)   = Vpiqj(a,i,b,j)
#
            T1iajb(i,a,j,b)  = l1a_old(i,a)^Fme_b(j,b)
            Tiajb(i,a,j,b)  += T1iajb(i,a,j,b)
#
            T1iajb(i,a,j,b)  = Fme_a(i,a)^l1b_old(j,b)
            Tiajb(i,a,j,b)  += T1iajb(i,a,j,b)
#
            DO i1 
            DO j1
#
               REQUEST           L2old_ab(i1,a,j1,b)  b 
               GET               W1minj_ab(i,i1,j,j1) 
#
               T1iajb(i,a,j,b) = L2old_ab(i1,a,j1,b)* W1minj_ab(i,i1,j,j1)
               Tiajb(i,a,j,b) += T1iajb(i,a,j,b) 
#
            ENDDO j1
            ENDDO i1
#
            PREPARE L2new_ab(i,a,j,b) += Tiajb(i,a,j,b)
#
      ENDPARDO i, j, a, b  
#
      PARDO a, i, b, b1  
#
            REQUEST Vbbai(b,b1,a,i) i 
#
            DO j
#
               GET                          l1b_old(j,b1)
               Tiajb(i,a,j,b)             = Vbbai(b,b1,a,i)*l1b_old(j,b1)
               PREPARE L2new_ab(i,a,j,b) += Tiajb(i,a,j,b)
#
            ENDDO j
#
      ENDPARDO a, i, b, b1 
#
      PARDO b, j, a, i  
#
            REQUEST          Saibj(a,i,b,j) a 
            Tiajb(i,a,j,b) = Saibj(a,i,b,j) # 0.0  
#
            DO b1
#
               REQUEST           L2old_ab(i,a,j,b1) b1 
               REQUEST           Vpiqj(a,i,b1,j)    j 
               GET               Gae_b(b,b1)
               GET               F1ae_b(b1,b)
               GET               l1b_old(j,b1)
#
               Tbb(b1,b)       = Gae_b(b,b1)
               T1iajb(i,a,j,b) = L2old_ab(i,a,j,b1)*F1ae_b(b1,b)
               Tiajb(i,a,j,b) += T1iajb(i,a,j,b)
#
               DO j1
#
                  GET          l1b_old(j1,b)
                  GET          t1b_old(b1,j1)
#
                  T1bb(b1,b) = t1b_old(b1,j1)*l1b_old(j1,b)
                  Tbb(b1,b) -= T1bb(b1,b)
#
               ENDDO j1
#
               T1iajb(i,a,j,b) = Vpiqj(a,i,b1,j)*Tbb(b1,b)
               Tiajb(i,a,j,b) += T1iajb(i,a,j,b)
#
            ENDDO b1
#
            PREPARE L2new_ab(i,a,j,b) += Tiajb(i,a,j,b)
#
      ENDPARDO b, j, a, i  
#
      PARDO a, a1, b, j 
#
            REQUEST Vaabj(a,a1,b,j) j 
#
            DO i
#
               GET                          l1a_old(i,a1)
               Tiajb(i,a,j,b)             = Vaabj(a,a1,b,j)*l1a_old(i,a1)
               PREPARE L2new_ab(i,a,j,b) += Tiajb(i,a,j,b)
#
            ENDDO i
#
      ENDPARDO a, a1, b, j 
#
      PARDO a, i, b, j 
#
            Tiajb(i,a,j,b) = 0.0  
#
            DO a1
#
               REQUEST           L2old_ab(i,a1,j,b) b 
               REQUEST           Vpiqj(a1,i,b,j) j 
               GET               Gae_a(a,a1)
               GET               F1ae_a(a1,a)
#
               Taa(a1,a)       = Gae_a(a,a1)
               T1iajb(i,a,j,b) = L2old_ab(i,a1,j,b)*F1ae_a(a1,a)
               Tiajb(i,a,j,b) += T1iajb(i,a,j,b)
#
               DO i1
#
                  GET          l1a_old(i1,a)
                  GET          t1a_old(a1,i1)
#
                  T1aa(a1,a) = t1a_old(a1,i1)*l1a_old(i1,a)
                  Taa(a1,a) -= T1aa(a1,a)
#
               ENDDO i1
#
               T1iajb(i,a,j,b) = Vpiqj(a1,i,b,j)*Taa(a1,a)
               Tiajb(i,a,j,b) += T1iajb(i,a,j,b)
#
            ENDDO a1
#
            PREPARE L2new_ab(i,a,j,b) += Tiajb(i,a,j,b)
#
      ENDPARDO a, i, b, j 
#
      PARDO j, a, i, b  
#
            Tiajb(i,a,j,b) = 0.0  
#
            DO j1
#
               REQUEST           L2old_ab(i,a,j1,b) b 
               REQUEST           Vpiqj(a,i,j1,j)    j 
               REQUEST           Vpiqj(a,i,b,j1) j1 
               GET               Gmi_b(j1,j)
               GET               F1mi_b(j,j1)
               GET               l1b_old(j1,b)
#
               Tjj(j,j1)       = Gmi_b(j1,j)
               T1iajb(i,a,j,b) = L2old_ab(i,a,j1,b)*F1mi_b(j,j1)
               Tiajb(i,a,j,b) -= T1iajb(i,a,j,b)
#
               T1iajb(i,a,j,b) = Vpiqj(a,i,j1,j)*l1b_old(j1,b)
               Tiajb(i,a,j,b) -= T1iajb(i,a,j,b)
#
               DO b1
#
                  GET          l1b_old(j,b1)
                  GET          t1b_old(b1,j1)
#
                  T1jj(j,j1) = l1b_old(j,b1)*t1b_old(b1,j1)
                  Tjj(j,j1) += T1jj(j,j1)
#
               ENDDO b1
#
               T1iajb(i,a,j,b) = Vpiqj(a,i,b,j1)*Tjj(j,j1)
               Tiajb(i,a,j,b) -= T1iajb(i,a,j,b)
#
            ENDDO j1
#
            PREPARE L2new_ab(i,a,j,b) += Tiajb(i,a,j,b)
#
      ENDPARDO j, a, i, b  
#
      PARDO i, a, b, j 
#
            Tiajb(i,a,j,b) = 0.0  
#
            DO i1
#
               REQUEST           L2old_ab(i1,a,j,b) b 
               REQUEST           Vpiqj(i1,i,b,j)    j 
               REQUEST           Vpiqj(a,i1,b,j)    j 
               GET               Gmi_a(i1,i)
               GET               F1mi_a(i,i1)
               GET               l1a_old(i1,a)
#
               Tii(i,i1)       = Gmi_a(i1,i)
               T1iajb(i,a,j,b) = L2old_ab(i1,a,j,b)*F1mi_a(i,i1)
               Tiajb(i,a,j,b) -= T1iajb(i,a,j,b)
#
               T1iajb(i,a,j,b) = Vpiqj(i1,i,b,j)*l1a_old(i1,a)
               Tiajb(i,a,j,b) -= T1iajb(i,a,j,b)
#
               DO a1
#
                  GET          l1a_old(i,a1)
                  GET          t1a_old(a1,i1)
#
                  T1ii(i,i1) = l1a_old(i,a1)*t1a_old(a1,i1)
                  Tii(i,i1) += T1ii(i,i1)
#
               ENDDO a1
#
               T1iajb(i,a,j,b) = Vpiqj(a,i1,b,j)*Tii(i,i1)
               Tiajb(i,a,j,b) -= T1iajb(i,a,j,b)
#
            ENDDO i1
#
            PREPARE L2new_ab(i,a,j,b) += Tiajb(i,a,j,b)
#
      ENDPARDO i, a, b, j 
#
      ENDPROC L2NEWAB 
#     --------------- 
#
      PROC L2NEWBB 
#     ------------ 
#
      PARDO b, b1, b2, j1
#
            REQUEST VSbbbj(b,b2,b1,j1)  j1  
#
            DO j
#
               GET                            l1b_old(j,b2)
               Tjbjb(j,b,j1,b1)             = VSbbbj(b,b2,b1,j1)*l1b_old(j,b2)
               T3jbjb(j1,b,j,b1)            = Tjbjb(j,b,j1,b1)
               T3jbjb(j1,b,j,b1)           *= -1.0  
               PREPARE L2new_bb(j,b,j1,b1) +=  Tjbjb(j,b,j1,b1)
               PREPARE L2new_bb(j1,b,j,b1) += T3jbjb(j1,b,j,b1)
#
            ENDDO j
#
      ENDPARDO b, b1, b2, j1
#
      PARDO b, j, j1, b1 
#
            REQUEST             VSqjqj(b1,j1,b,j) j
            GET                 l1b_old(j1,b1)
            GET                 Fme_b(j,b)
#
            Tjbjb(j1,b1,j,b)  = VSqjqj(b1,j1,b,j) 
            T2jbjb(j,b1,j1,b) = 0.0  
            T3jbjb(j1,b,j,b1) = 0.0  
            T4jbjb(j,b,j1,b1) = 0.0  
#
            DO b2
#
               REQUEST              L2old_bb(j1,b1,j,b2) b2 
               REQUEST              VSqjqj(b1,j1,b2,j)   j  
               GET                  Gae_b(b,b2)
               GET                  F1ae_b(b2,b)
               GET                  l1b_old(j1,b2)
#
               T1jbjb(j1,b1,j,b)  = L2old_bb(j1,b1,j,b2)*F1ae_b(b2,b)
               Tjbjb(j1,b1,j,b)  += T1jbjb(j1,b1,j,b)
#
               Tbb(b2,b)          = Gae_b(b,b2)
               TXjbjb(j1,b,j,b1)  = T1jbjb(j1,b1,j,b)
               T3jbjb(j1,b,j,b1) -= TXjbjb(j1,b,j,b1)
#
               DO j2
#
                  GET          l1b_old(j2,b)
                  GET          t1b_old(b2,j2)
#
                  T1bb(b2,b) = t1b_old(b2,j2)*l1b_old(j2,b)
                  Tbb(b2,b) -= T1bb(b2,b)
#
               ENDDO j2
#
               T1jbjb(j1,b1,j,b)  = VSqjqj(b1,j1,b2,j)*Tbb(b2,b)
               Tjbjb(j1,b1,j,b)  += T1jbjb(j1,b1,j,b)
#
               TXjbjb(j1,b,j,b1)  = T1jbjb(j1,b1,j,b)
               T3jbjb(j1,b,j,b1) -= TXjbjb(j1,b,j,b1)
#
            ENDDO b2
#
            T1jbjb(j1,b1,j,b)  = l1b_old(j1,b1)^Fme_b(j,b)
            Tjbjb(j1,b1,j,b)  += T1jbjb(j1,b1,j,b)
#
            TXjbjb(j1,b,j,b1)  = T1jbjb(j1,b1,j,b)
            T3jbjb(j1,b,j,b1) -= TXjbjb(j1,b,j,b1)
#
            TXjbjb(j,b1,j1,b)  = T1jbjb(j1,b1,j,b)
            T2jbjb(j,b1,j1,b) -= TXjbjb(j,b1,j1,b)
#
            TXjbjb(j,b,j1,b1)  = T1jbjb(j1,b1,j,b)
            T4jbjb(j,b,j1,b1) += TXjbjb(j,b,j1,b1)
#
            PREPARE L2NEW_bb(j1,b1,j,b) +=  Tjbjb(j1,b1,j,b)
            PREPARE L2NEW_bb(j,b1,j1,b) += T2jbjb(j,b1,j1,b)
            PREPARE L2NEW_bb(j1,b,j,b1) += T3jbjb(j1,b,j,b1)
            PREPARE L2NEW_bb(j,b,j1,b1) += T4jbjb(j,b,j1,b1)
#
      ENDPARDO b, j, j1, b1 
# 
      PARDO j, b1, b, j1  
#
            REQUEST Sbjbj(b,j,b1,j1) b 
#
            Tjbjb(j1,b1,j,b)  = Sbjbj(b,j,b1,j1) # 0.0  
            T2jbjb(j,b1,j1,b) = 0.0  
            T3jbjb(j1,b,j,b1) = 0.0  
#
            DO j2
#
               REQUEST              L2old_bb(j1,b1,j2,b) b 
               REQUEST              VSqjqj(j2,j1,b,j)    j  
               REQUEST              VSqjqj(b1,j1,b,j2)   j2  
               GET                  Gmi_b(j2,j)
               GET                  F1mi_b(j,j2)
               GET                  l1b_old(j2,b1)
#
               T1jbjb(j1,b1,j,b)  = L2old_bb(j1,b1,j2,b)*F1mi_b(j,j2)
               T1jbjb(j1,b1,j,b) *= -1.0
               Tjbjb(j1,b1,j,b)  += T1jbjb(j1,b1,j,b)
#
               Tjj(j,j2)          = Gmi_b(j2,j)
               TXjbjb(j,b1,j1,b)  = T1jbjb(j1,b1,j,b)
               T2jbjb(j,b1,j1,b) -= TXjbjb(j,b1,j1,b)
#
               T1jbjb(j1,b1,j,b)  = VSqjqj(j2,j1,b,j)*l1b_old(j2,b1)
               Tjbjb(j1,b1,j,b)  -= T1jbjb(j1,b1,j,b)
#
               TXjbjb(j1,b,j,b1)  = T1jbjb(j1,b1,j,b)
               T3jbjb(j1,b,j,b1) += TXjbjb(j1,b,j,b1)
#
               DO b2
#
                  GET          l1b_old(j,b2)
                  GET          t1b_old(b2,j2)
#
                  T1jj(j,j2) = l1b_old(j,b2)*t1b_old(b2,j2)
                  Tjj(j,j2) += T1jj(j,j2)
#
               ENDDO b2
#
               T1jbjb(j1,b1,j,b)  = VSqjqj(b1,j1,b,j2)*Tjj(j,j2)
               T1jbjb(j1,b1,j,b) *= -1.0
               Tjbjb(j1,b1,j,b)  += T1jbjb(j1,b1,j,b)
#
               TXjbjb(j,b1,j1,b)  = T1jbjb(j1,b1,j,b)
               T2jbjb(j,b1,j1,b) -= TXjbjb(j,b1,j1,b)
#
               DO j3
#
                  REQUEST              L2old_bb(j2,b1,j3,b)  b 
                  GET                  W1minj_bb(j1,j2,j,j3) 
#
                  T1jbjb(j1,b1,j,b)  = L2old_bb(j2,b1,j3,b)*W1minj_bb(j1,j2,j,j3)
                  T1jbjb(j1,b1,j,b) *= 0.5
                  Tjbjb(j1,b1,j,b)  += T1jbjb(j1,b1,j,b)
#
               ENDDO j3
#
            ENDDO j2
#
            PREPARE L2NEW_bb(j1,b1,j,b) +=  Tjbjb(j1,b1,j,b)
            PREPARE L2NEW_bb(j,b1,j1,b) += T2jbjb(j,b1,j1,b)
            PREPARE L2NEW_bb(j1,b,j,b1) += T3jbjb(j1,b,j,b1)
#
      ENDPARDO j, b1, b, j1  
# 
      ENDPROC L2NEWBB 
#     --------------- 
#
      PROC CLEANLITER
#     ---------------
#
           delete l1a_new
           delete l1b_new
           delete Gae_a
           delete Gae_b
           delete Gmi_a
           delete Gmi_b
#
      ENDPROC CLEANLITER
#     ------------------ 
#
#    ------------------------------------------------------------------------
#
      PROC UPDATEL2
#     -------------
#
      PARDO a, a1, i, i1
#
            REQUEST                    L2old_aa(i,a,i1,a1) a 
            REQUEST                    L2new_aa(i,a,i1,a1) a 
            Tiaia(i,a,i1,a1)         = L2new_aa(i,a,i1,a1)
            T1iaia(i,a,i1,a1)        = L2old_aa(i,a,i1,a1)
            execute energy_denominator Tiaia
            t1iaia(i,a,i1,a1) += tiaia(i,a,i1,a1)
            t1iaia(i,a,i1,a1) *= -1.0
#
            if kiter == 1
               PREPARE e1iaia(i,a,i1,a1) = T1iaia(i,a,i1,a1)
            endif
#
            if kiter == 2
               PREPARE e2iaia(i,a,i1,a1) = T1iaia(i,a,i1,a1)
            endif
#
            if kiter == 3
               PREPARE e3iaia(i,a,i1,a1) = T1iaia(i,a,i1,a1)
            endif
#
            if kiter == 4
               PREPARE e4iaia(i,a,i1,a1) = T1iaia(i,a,i1,a1)
            endif
#
            if kiter >= 5
               PREPARE e5iaia(i,a,i1,a1) = T1iaia(i,a,i1,a1)
            endif
#
      ENDPARDO a, a1, i, i1
      execute server_barrier 
#
      PARDO a, a1, i, i1
#
            REQUEST                     L2new_aa(i,a,i1,a1) a 
            L2new_aa(i,a,i1,a1)     *= -1.0 
            execute energy_denominator L2new_aa 
            PREPARE L2old_aa(i,a,i1,a1)  = L2new_aa(i,a,i1,a1)  
#
      ENDPARDO a, a1, i, i1
#
      PARDO b, b1, j, j1
#
            REQUEST                    L2old_bb(j,b,j1,b1) b 
            REQUEST                    L2new_bb(j,b,j1,b1) b 
            Tjbjb(j,b,j1,b1)         = L2new_bb(j,b,j1,b1)
            T1jbjb(j,b,j1,b1)        = L2old_bb(j,b,j1,b1)
            execute energy_denominator Tjbjb
            t1jbjb(j,b,j1,b1) += tjbjb(j,b,j1,b1)
            t1jbjb(j,b,j1,b1) *= -1.0
#
            if kiter == 1
               PREPARE e1jbjb(j,b,j1,b1) = T1jbjb(j,b,j1,b1)
            endif
#
            if kiter == 2
               PREPARE e2jbjb(j,b,j1,b1) = T1jbjb(j,b,j1,b1)
            endif
#
            if kiter == 3
               PREPARE e3jbjb(j,b,j1,b1) = T1jbjb(j,b,j1,b1)
            endif
#
            if kiter == 4
               PREPARE e4jbjb(j,b,j1,b1) = T1jbjb(j,b,j1,b1)
            endif
#
            if kiter >= 5
               PREPARE e5jbjb(j,b,j1,b1) = T1jbjb(j,b,j1,b1)
            endif
#
      ENDPARDO b, b1, j, j1
      execute server_barrier 
#
      PARDO b, b1, j, j1
#
            REQUEST                     L2new_bb(j,b,j1,b1) b 
            L2new_bb(j,b,j1,b1)     *= -1.0 
            execute energy_denominator L2new_bb 
            PREPARE L2old_bb(j,b,j1,b1)  = L2new_bb(j,b,j1,b1)  
#
      ENDPARDO b, b1, j, j1
#
      PARDO b, a, j, i
#
            REQUEST                    L2old_ab(i,a,j,b) a 
            REQUEST                    L2new_ab(i,a,j,b) a 
            Tiajb(i,a,j,b)           = L2new_ab(i,a,j,b)
            T1iajb(i,a,j,b)          = L2old_ab(i,a,j,b)
            execute energy_denominator Tiajb
            t1iajb(i,a,j,b)         += tiajb(i,a,j,b)
            t1iajb(i,a,j,b)         *= -1.0
#
            if kiter == 1
               PREPARE e1iajb(i,a,j,b) = T1iajb(i,a,j,b)
            endif
#
            if kiter == 2
               PREPARE e2iajb(i,a,j,b) = T1iajb(i,a,j,b)
            endif
#
            if kiter == 3
               PREPARE e3iajb(i,a,j,b) = T1iajb(i,a,j,b)
            endif
#
            if kiter == 4
               PREPARE e4iajb(i,a,j,b) = T1iajb(i,a,j,b)
            endif
#
            if kiter >= 5
               PREPARE e5iajb(i,a,j,b) = T1iajb(i,a,j,b)
            endif
#
      ENDPARDO b, a, j, i
      execute server_barrier 
#
      PARDO b, a, j, i
#
            REQUEST                    L2new_ab(i,a,j,b) a 
            L2new_ab(i,a,j,b)      *= -1.0 
            execute energy_denominator L2new_ab 
            PREPARE L2old_ab(i,a,j,b)= L2new_ab(i,a,j,b)  
#
      ENDPARDO b, a, j, i
#
      ENDPROC UPDATEL2
#     ----------------
#
      PROC UPDATEL1
#     -------------
#
      PARDO a, i 
#
            GET                        l1a_new(i,a)
            GET                        l1a_old(i,a)
            tia(i,a)                 = l1a_new(i,a) 
            t1ia(i,a)                = l1a_old(i,a) 
            execute energy_denominator tia(i,a)
            t1ia(i,a)               += tia(i,a) 
            t1ia(i,a)               *= -1.0
#
            if kiter == 1
               PUT e1ia(i,a) = T1ia(i,a)
            endif
#
            if kiter == 2
               PUT e2ia(i,a) = T1ia(i,a)
            endif
#
            if kiter == 3
               PUT e3ia(i,a) = T1ia(i,a)
            endif
#
            if kiter == 4
               PUT e4ia(i,a) = T1ia(i,a)
            endif
#
            if kiter >= 5
               PUT e5ia(i,a) = T1ia(i,a)
            endif
#
      ENDPARDO a, i 
#
      PARDO b, j 
#
            GET                        l1b_new(j,b)
            GET                        l1b_old(j,b)
            tjb(j,b)                 = l1b_new(j,b) 
            t1jb(j,b)                = l1b_old(j,b) 
            execute energy_denominator tjb(j,b)
            t1jb(j,b)               += tjb(j,b) 
            t1jb(j,b)               *= -1.0
#
            if kiter == 1
               PUT e1jb(j,b) = T1jb(j,b)
            endif
#
            if kiter == 2
               PUT e2jb(j,b) = T1jb(j,b)
            endif
#
            if kiter == 3
               PUT e3jb(j,b) = T1jb(j,b)
            endif
#
            if kiter == 4
               PUT e4jb(j,b) = T1jb(j,b)
            endif
#
            if kiter >= 5
               PUT e5jb(j,b) = T1jb(j,b)
            endif
#
      ENDPARDO b, j 
#
      execute sip_barrier

      PARDO a, i
#
            GET                        l1a_new(i,a)
            tia(i,a)           = -1.0 * l1a_new(i,a)
            execute energy_denominator tia(i,a)
            PUT l1a_old(i,a)         = tia(i,a)
#
      ENDPARDO a, i
#
      PARDO b, j
#
            GET                        l1b_new(j,b)
            tjb(j,b)            = -1.0 * l1b_new(j,b)
            execute energy_denominator tjb(j,b)
            PUT l1b_old(j,b)         = tjb(j,b)
#
      ENDPARDO b, j 
#
      ENDPROC UPDATEL1
#     ----------------
#
      PROC MOVEL2 
#     ----------- 
#
      PARDO a, a1, i, i1
#
            REQUEST            L2old_aa(i,a,i1,a1) a 
            tiaia(i,a,i1,a1) = L2old_aa(i,a,i1,a1)
#
            if kiter == 1
               PREPARE d1iaia(i,a,i1,a1) = tiaia(i,a,i1,a1)
            endif 
#
            if kiter == 2
               PREPARE d2iaia(i,a,i1,a1) = tiaia(i,a,i1,a1)
            endif 
#
            if kiter == 3
               PREPARE d3iaia(i,a,i1,a1) = tiaia(i,a,i1,a1)
            endif 
#
            if kiter == 4
               PREPARE d4iaia(i,a,i1,a1) = tiaia(i,a,i1,a1)
            endif 
#
            if kiter >= 5
               PREPARE d4iaia(i,a,i1,a1) = tiaia(i,a,i1,a1)
            endif 
#
      ENDPARDO a, a1, i, i1
#
      PARDO b, b1, j, j1
#
            REQUEST            L2old_bb(j,b,j1,b1) b 
            tjbjb(j,b,j1,b1) = L2old_bb(j,b,j1,b1)
#
            if kiter == 1
               PREPARE d1jbjb(j,b,j1,b1) = tjbjb(j,b,j1,b1)
            endif 
#
            if kiter == 2
               PREPARE d2jbjb(j,b,j1,b1) = tjbjb(j,b,j1,b1)
            endif 
#
            if kiter == 3
               PREPARE d3jbjb(j,b,j1,b1) = tjbjb(j,b,j1,b1)
            endif 
#
            if kiter == 4
               PREPARE d4jbjb(j,b,j1,b1) = tjbjb(j,b,j1,b1)
            endif 
#
            if kiter >= 5
               PREPARE d4jbjb(j,b,j1,b1) = tjbjb(j,b,j1,b1)
            endif 
#
      ENDPARDO b, b1, j, j1
#
      PARDO a, b, i, j
#
            REQUEST          L2old_ab(i,a,j,b) a 
            tiajb(i,a,j,b) = L2old_ab(i,a,j,b)
#
            if kiter == 1
               PREPARE d1iajb(i,a,j,b) = tiajb(i,a,j,b)
            endif 
#
            if kiter == 2
               PREPARE d2iajb(i,a,j,b) = tiajb(i,a,j,b)
            endif 
#
            if kiter == 3
               PREPARE d3iajb(i,a,j,b) = tiajb(i,a,j,b)
            endif 
#
            if kiter == 4
               PREPARE d4iajb(i,a,j,b) = tiajb(i,a,j,b)
            endif 
#
            if kiter >= 5
               PREPARE d4iajb(i,a,j,b) = tiajb(i,a,j,b)
            endif 
#
      ENDPARDO a, b, i, j
#
      ENDPROC MOVEL2 
#     -------------- 
#
      PROC MOVEL1
#     ------------
#
      PARDO a, i
#
            GET        l1a_old(i,a)
            tia(i,a) = l1a_old(i,a)
#
            if kiter == 1
               PUT d1ia(i,a) = tia(i,a)
            endif
#
            if kiter == 2
               PUT d2ia(i,a) = tia(i,a)
            endif
#
            if kiter == 3
               PUT d3ia(i,a) = tia(i,a)
            endif
#
            if kiter == 4
               PUT d4ia(i,a) = tia(i,a)
            endif
#
            if kiter >= 5
               PUT d4ia(i,a) = tia(i,a)
            endif
#
      ENDPARDO a, i
#
      PARDO b, j
#
            GET        l1b_old(j,b)
            tjb(j,b) = l1b_old(j,b)
#
            if kiter == 1
               PUT d1jb(j,b) = tjb(j,b)
            endif
#
            if kiter == 2
               PUT d2jb(j,b) = tjb(j,b)
            endif
#
            if kiter == 3
               PUT d3jb(j,b) = tjb(j,b)
            endif
#
            if kiter == 4
               PUT d4jb(j,b) = tjb(j,b)
            endif
#
            if kiter >= 5
               PUT d4jb(j,b) = tjb(j,b)
            endif
#
      ENDPARDO b, j
#
      ENDPROC MOVEL1
#     --------------
#
#    ------------------------------------------------------------------------
#
     PROC LIGUESS
#
#    ------------------------------------------------------------------------
#
     PARDO a, a1, i, i1
#
           REQUEST T2old_aa(a,i,a1,i1) a 
           Tiaia(i,a,i1,a1) = T2old_aa(a,i,a1,i1)
           PREPARE L2old_aa(i,a,i1,a1) = Tiaia(i,a,i1,a1)
           PREPARE D0iaia(i,a,i1,a1) = Tiaia(i,a,i1,a1) 
#
     ENDPARDO a, a1, i, i1
#
     PARDO b, b1, j, j1
#
           REQUEST T2old_bb(b,j,b1,j1) b 
           Tjbjb(j,b,j1,b1) = T2old_bb(b,j,b1,j1)
           PREPARE L2old_bb(j,b,j1,b1) = Tjbjb(j,b,j1,b1)
           PREPARE D0jbjb(j,b,j1,b1) = Tjbjb(j,b,j1,b1)
#
     ENDPARDO b, b1, j, j1
#
     PARDO b, a, j, i
#
           REQUEST T2old_ab(a,i,b,j) a 
           Tiajb(i,a,j,b) = T2old_ab(a,i,b,j)
           PREPARE L2old_ab(i,a,j,b) = Tiajb(i,a,j,b)
           PREPARE D0iajb(i,a,j,b) = Tiajb(i,a,j,b)
#
     ENDPARDO b, a, j, i
#
     PARDO a, i
#
           GET t1a_old(a,i)
           tia(i,a) = t1a_old(a,i)
           PUT l1a_old(i,a) = tia(i,a)
           PUT D0ia(i,a) = tia(i,a)
#
     ENDPARDO a, i
     PARDO b, j
#
           GET t1b_old(b,j)
           tjb(j,b) = t1b_old(b,j)
           PUT l1b_old(j,b) = tjb(j,b)
           PUT D0jb(j,b) = tjb(j,b)
#
     ENDPARDO b, j 
#

#
#    ------------------------------------------------------------------------
#
     ENDPROC LIGUESS
#
#    ------------------------------------------------------------------------
#
#
#    ------------------------------------------------------------------------
#
     PROC LENERGY
#
#    ------------------------------------------------------------------------
#
     esum    = 0.0
     ecorraa = 0.0
     PARDO a, a1, i, i1
#
           REQUEST VSpipi(a,i,a1,i1)   i1 
           REQUEST L2new_aa(i,a,i1,a1) a1 
#
           GET l1a_new(i1,a1)
           GET l1a_new(i1,a)
           GET l1a_new(i,a1)
           GET l1a_new(i,a)
#
           tia(i1,a1)         =          l1a_new(i1,a1)
           T2iaia(i,a,i1,a1)  = l1a_new(i,a)^tia(i1,a1)
           tia(i,a1)          =           l1a_new(i,a1)
           T3iaia(i,a,i1,a1)  = l1a_new(i1,a)^tia(i,a1)
           T2iaia(i,a,i1,a1) -= T3iaia(i,a,i1,a1)
           T2iaia(i,a,i1,a1)  = L2new_aa(i,a,i1,a1)
#
           etemp = VSpipi(a,i,a1,i1)*T2iaia(i,a,i1,a1)
           etemp = 0.25*etemp
           esum += etemp
#
     ENDPARDO a, a1, i, i1
#
     execute sip_barrier 
     execute server_barrier 
     collective ecorraa += esum
     execute sip_barrier 
     execute print_scalar ecorraa
#
     esum    = 0.0
     ecorrbb = 0.0
     PARDO b, b1, j, j1
#
           REQUEST VSqjqj(b,j,b1,j1)   j1 
           REQUEST L2new_bb(j,b,j1,b1) b1 
#
           GET l1b_new(j1,b1)
           GET l1b_new(j1,b)
           GET l1b_new(j,b1)
           GET l1b_new(j,b)
#
           tjb(j1,b1)         =          l1b_new(j1,b1)
           T2jbjb(j,b,j1,b1)  = l1b_new(j,b)^tjb(j1,b1)
           tjb(j,b1)          =           l1b_new(j,b1)
           T3jbjb(j,b,j1,b1)  = l1b_new(j1,b)^tjb(j,b1)
           T2jbjb(j,b,j1,b1) -= T3jbjb(j,b,j1,b1)
           T2jbjb(j,b,j1,b1)  = L2new_bb(j,b,j1,b1)
#
           etemp = VSqjqj(b,j,b1,j1)*T2jbjb(j,b,j1,b1)
           etemp = 0.25*etemp
           esum += etemp
#
     ENDPARDO b, b1, j, j1
#
     execute sip_barrier 
     execute server_barrier 
     collective ecorrbb += esum
     execute sip_barrier 
     execute print_scalar ecorrbb
#
     ecorrab = 0.0
     esum    = 0.0
     PARDO a, b, i, j
#
           REQUEST Vpiqj(a,i,b,j)    j 
           REQUEST L2new_ab(i,a,j,b) b 
           GET l1a_new(i,a)
           GET l1b_new(j,b)
#
           Tiajb(i,a,j,b)  = l1a_new(i,a)^l1b_new(j,b)
           Tiajb(i,a,j,b)  = L2new_ab(i,a,j,b)
#
           etemp = Tiajb(i,a,j,b)*Vpiqj(a,i,b,j)
           esum += etemp
#
     ENDPARDO a, b, i, j
     execute sip_barrier 
     execute server_barrier 
     collective ecorrab += esum
     execute sip_barrier 
     execute print_scalar ecorrab
#
     ecorrT  = ecorraa
     ecorrT += ecorrbb
     ecorrT += ecorrab
     execute print_scalar ecorrT 
#
#    ------------------------------------------------------------------------
#
     ENDPROC LENERGY
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
     PROC LOLDENERGY
#
#    ------------------------------------------------------------------------
#
     esuma   = 0.0
     ecorraa = 0.0
     PARDO a, a1, i, i1
#
           REQUEST VSpipi(a,i,a1,i1)   i1 
           REQUEST L2old_aa(i,a,i1,a1) a1 
#
           etemp = VSpipi(a,i,a1,i1)*L2old_aa(i,a,i1,a1)
           etemp = 0.25*etemp
           esuma += etemp
#
     ENDPARDO a, a1, i, i1
#
     esumb    = 0.0
     ecorrbb = 0.0
     PARDO b, b1, j, j1
#
           REQUEST VSqjqj(b,j,b1,j1)   j1 
           REQUEST L2old_bb(j,b,j1,b1) b1 
#
           etemp = VSqjqj(b,j,b1,j1)*L2old_bb(j,b,j1,b1)
           etemp = 0.25*etemp
           esumb += etemp
#
     ENDPARDO b, b1, j, j1
#
     ecorrab = 0.0
     esumab  = 0.0
     PARDO a, b, i, j
#
           REQUEST Vpiqj(a,i,b,j) j 
           REQUEST L2old_ab(i,a,j,b) b 
#
           etemp = L2old_ab(i,a,j,b)*Vpiqj(a,i,b,j)
           esumab += etemp
#
     ENDPARDO a, b, i, j
#
     execute sip_barrier 
     execute server_barrier 

     collective ecorraa += esuma
     execute print_scalar ecorraa

     collective ecorrbb += esumb
     execute print_scalar ecorrbb

     collective ecorrab += esumab
     execute print_scalar ecorrab
#
     ecorrT  = ecorraa + ecorrbb
     ecorrT += ecorrab
     execute print_scalar ecorrT 
#
#    ------------------------------------------------------------------------
#
     ENDPROC LOLDENERGY
#
#    ------------------------------------------------------------------------
#
# In this superprocedure the contributions to the lambda amplitude
# equations from the W^{ef}_{ab} intermediate are computed. The
# contributions are split into two pieces, those using;
# 
# 1. the V^{ab}_{cd} integrals --> PROC LLADDER  
# 2. not using the V^{ab}_{cd} integrals
#    a. L1 contributions       --> PROC L1WABCD 
#    b. L2 contributions       --> PROC L2WABCD 
#
# ------------------------------------------------------------------------------- 
#
      PROC LLADDER 
#     ------------ 
#
#     First zero-out intermediate arrays
#     ----------------------------------
#
      PARDO mu, nu, i, i1
            Tixix(i,mu,i1,nu)           = 0.0
            PREPARE Z2aa(i,mu,i1,nu)    = Tixix(i,mu,i1,nu)
            PREPARE L2AO_aa(i,mu,i1,nu) = Tixix(i,mu,i1,nu)
      ENDPARDO mu, nu, i, i1
#
      PARDO mu, nu, j, j1
            Tjxjx(j,mu,j1,nu)           = 0.0
            PREPARE Z2bb(j,mu,j1,nu)    = Tjxjx(j,mu,j1,nu)
            PREPARE L2AO_bb(j,mu,j1,nu) = Tjxjx(j,mu,j1,nu)
      ENDPARDO mu, nu, j, j1
#
      PARDO mu, nu, i, j
            Tixjx(i,mu,j,nu)           = 0.0
            PREPARE Z2ab(i,mu,j,nu)    = Tixjx(i,mu,j,nu)
            PREPARE L2AO_ab(i,mu,j,nu) = Tixjx(i,mu,j,nu)
      ENDPARDO mu, nu, i, j
      execute server_barrier
#
# ------------------------------------------------------------------------------- 
#
#     Compute half back transformed 2-particle lambda arrays 
#     ------------------------------------------------------ 
#
#     AA spin combination 
#     ------------------- 
#
      PARDO a, a1, i, i1  
#
            REQUEST             L2old_aa(i1,a1,i,a) a1  
            REQUEST             L2old_aa(i1,a,i,a1) a1  
#
            Tiaia(i1,a1,i,a)  = L2old_aa(i1,a1,i,a)
            T1iaia(i1,a1,i,a) = L2old_aa(i1,a,i,a1)
            Tiaia(i1,a1,i,a) -= T1iaia(i1,a1,i,a)
# 
            DO mu 
#
               Tiaix(i1,a1,i,mu) = Tiaia(i1,a1,i,a)*ca(mu,a)
               Zaa(i,mu,i1,a1)   = Tiaix(i1,a1,i,mu)
#
               DO nu 
#
                  Tixix(i,mu,i1,nu)         = Zaa(i,mu,i1,a1)*ca(nu,a1) 
                  PREPARE Z2aa(i,mu,i1,nu) += Tixix(i,mu,i1,nu)  
#
               ENDDO nu 
#
            ENDDO mu 
#
      ENDPARDO a, a1, i, i1  
#
#     BB spin combination 
#     ------------------- 
#
      PARDO b, b1, j, j1  
#
            REQUEST             L2old_bb(j1,b1,j,b) b1  
            REQUEST             L2old_bb(j1,b,j,b1) b1  
#
            Tjbjb(j1,b1,j,b)  = L2old_bb(j1,b1,j,b)
            T1jbjb(j1,b1,j,b) = L2old_bb(j1,b,j,b1)
            Tjbjb(j1,b1,j,b) -= T1jbjb(j1,b1,j,b) 
# 
            DO mu 
#
               Tjbjx(j1,b1,j,mu) = Tjbjb(j1,b1,j,b)*cb(mu,b)
               Zbb(j,mu,j1,b1)   = Tjbjx(j1,b1,j,mu) 
#
               DO nu 
#
                  Tjxjx(j,mu,j1,nu)         = Zbb(j,mu,j1,b1)*cb(nu,b1) 
                  PREPARE Z2bb(j,mu,j1,nu) += Tjxjx(j,mu,j1,nu)  
#
               ENDDO nu 
#
            ENDDO mu 
#
      ENDPARDO b, b1, j, j1  
#
#     AB spin combination 
#     ------------------- 
#
      PARDO a, b, i, j  
#
            REQUEST L2old_ab(i,a,j,b) b
# 
            DO mu 
#
               Zab(i,mu,j,b) = L2old_ab(i,a,j,b)*ca(mu,a) 
#
               DO nu 
#
                  Tixjx(i,mu,j,nu)         = Zab(i,mu,j,b)*cb(nu,b) 
                  PREPARE Z2ab(i,mu,j,nu) += Tixjx(i,mu,j,nu)  
#
               ENDDO nu 
#
            ENDDO mu 
#
      ENDPARDO a, b, i, j  
#
      execute server_barrier 
#
#     Contract half transformed amplitudes with AO integrals 
#     ------------------------------------------------------ 
#     AA spin combination 
#     ------------------- 
# 
      PARDO mu, nu, lambda, sigma
#
               compute_integrals aoint(lambda,mu,sigma,nu)
#
#              AB spin combination 
#              ------------------- 
# 
               DO i
               DO j
#
                  REQUEST                       Z2ab(i,lambda,j,sigma) i 
                  Yab(i,mu,j,nu)              = aoint(lambda,mu,sigma,nu)*Z2ab(i,lambda,j,sigma)
                  PREPARE L2AO_ab(i,mu,j,nu) += Yab(i,mu,j,nu)
#
               ENDDO j
               ENDDO i
#
               DO i
               DO i1
#
                  IF i == i1 
#
                     REQUEST                        Z2aa(i,lambda,i1,sigma) i 
                     Yaa(i,mu,i1,nu)              = aoint(lambda,mu,sigma,nu)*Z2aa(i,lambda,i1,sigma)
                     PREPARE L2AO_aa(i,mu,i1,nu) += Yaa(i,mu,i1,nu)
#
                  ENDIF # i == i1 
#
                  IF i < i1 
#
                     REQUEST                        Z2aa(i,lambda,i1,sigma) i 
                     Yaa(i,mu,i1,nu)              = aoint(lambda,mu,sigma,nu)*Z2aa(i,lambda,i1,sigma)
                     PREPARE L2AO_aa(i,mu,i1,nu) += Yaa(i,mu,i1,nu)
                     Tixix(i1,nu,i,mu)            = Yaa(i,mu,i1,nu) 
                     PREPARE L2AO_aa(i1,nu,i,mu) += Tixix(i1,nu,i,mu)
#
                  ENDIF # i < i1 
#
              ENDDO i1
              ENDDO i
#
#             BB spin combination 
#             ------------------- 
#
              DO j
              DO j1
#
                 IF j == j1 
#
                    REQUEST                        Z2bb(j,lambda,j1,sigma) j 
                    Ybb(j,mu,j1,nu)              = aoint(lambda,mu,sigma,nu)*Z2bb(j,lambda,j1,sigma)
                    PREPARE L2AO_bb(j,mu,j1,nu) += Ybb(j,mu,j1,nu)
#
                 ENDIF # j == j1 
#
                 IF j < j1 
#
                    REQUEST                        Z2bb(j,lambda,j1,sigma) j 
                    Ybb(j,mu,j1,nu)              = aoint(lambda,mu,sigma,nu)*Z2bb(j,lambda,j1,sigma)
                    PREPARE L2AO_bb(j,mu,j1,nu) += Ybb(j,mu,j1,nu)
                    Tjxjx(j1,nu,j,mu)            = Ybb(j,mu,j1,nu) 
                    PREPARE L2AO_bb(j1,nu,j,mu) += Tjxjx(j1,nu,j,mu)
#
                 ENDIF # j < j1 
#
              ENDDO j1
              ENDDO j
#
      ENDPARDO mu, nu, lambda, sigma
#
#     Perform final two transformations of L2AO  
#     ----------------------------------------- 
# 
      execute server_barrier  
#
#     AA spin combination 
#     ------------------- 
#
      PARDO mu, nu, i, i1
#
            REQUEST L2AO_aa(i,mu,i1,nu) i 
#
            DO a
#
               Tiaix(i,a,i1,nu)  = L2AO_aa(i,mu,i1,nu)*ca(mu,a)
#
               DO a1
#
                  Tiaia(i,a,i1,a1)  = Tiaix(i,a,i1,nu)*ca(nu,a1)
                  Tiaia(i,a,i1,a1) *= 0.5
#
#                 Update L2new 
#                 ------------ 
                  PREPARE L2new_aa(i,a,i1,a1) += Tiaia(i,a,i1,a1)
#
                  GET        t1a_old(a1,i1) 
                  Tia(i,a) = Tiaia(i,a,i1,a1)*t1a_old(a1,i1) 
#
#                 Update L1new 
#                 ------------ 
                  PUT l1a_new(i,a) += Tia(i,a) 
#
               ENDDO a1
#
            ENDDO a
#
      ENDPARDO mu, nu, i, i1
#
#     BB spin combination 
#     ------------------- 
#
      PARDO mu, nu, j, j1
#
            REQUEST L2AO_bb(j,mu,j1,nu) j 
#
            DO b
#
               Tjbjx(j,b,j1,nu)  = L2AO_bb(j,mu,j1,nu)*cb(mu,b)
#
               DO b1
#
                  Tjbjb(j,b,j1,b1)  = Tjbjx(j,b,j1,nu)*cb(nu,b1)
                  Tjbjb(j,b,j1,b1) *= 0.5
#
#                 Update L2new 
#                 ------------ 
                  PREPARE L2new_bb(j,b,j1,b1) += Tjbjb(j,b,j1,b1)
#
                  GET        t1b_old(b1,j1) 
                  Tjb(j,b) = Tjbjb(j,b,j1,b1)*t1b_old(b1,j1) 
#
#                 Update L1new 
#                 ------------ 
                  PUT l1b_new(j,b) += Tjb(j,b) 
#
               ENDDO b1
#
            ENDDO b
#
      ENDPARDO mu, nu, j, j1
#
#     AB spin combination 
#     ------------------- 
#
      PARDO mu, nu, i, j
#
            REQUEST L2AO_ab(i,mu,j,nu) i 
#
            DO a
#
               Tiajx(i,a,j,nu)  = L2AO_ab(i,mu,j,nu)*ca(mu,a)
#
               DO b
#
                  Tiajb(i,a,j,b)  = Tiajx(i,a,j,nu)*cb(nu,b)
#
#                 Update L2new 
#                 ------------ 
                  PREPARE L2new_ab(i,a,j,b) += Tiajb(i,a,j,b)
#
                  GET        t1b_old(b,j) 
                  GET        t1a_old(a,i) 
                  Tia(i,a) = Tiajb(i,a,j,b)*t1b_old(b,j) 
                  Tjb(j,b) = Tiajb(i,a,j,b)*t1a_old(a,i) 
#
#                 Update L1new 
#                 ------------ 
                  PUT l1a_new(i,a) += Tia(i,a) 
                  PUT l1b_new(j,b) += Tjb(j,b) 
#
               ENDDO b
#
            ENDDO a
#
      ENDPARDO mu, nu, i, j
#
      execute server_barrier   
#
# ------------------------------------------------------------------------------- 
#
      ENDPROC LLADDER 
#
# ------------------------------------------------------------------------------- 
#
# ------------------------------------------------------------------------------- 
#
      PROC L2WABCDaa  
#
# ------------------------------------------------------------------------------- 
#
#     AA spin combination 
#     ------------------- 
#
      create Iiiia 
      create Iiiii 
      execute sip_barrier 
#
      PARDO i, i1, a, a1 
# 
            REQUEST L2old_aa(i,a,i1,a1) a1  
#
            DO i2  
            DO i3  
#
              REQUEST                  Tau_aa(a,i2,a1,i3)  i3  
              Tiiii(i,i2,i1,i3)      = L2old_aa(i,a,i1,a1)*Tau_aa(a,i2,a1,i3) 
              PUT Iiiii(i,i2,i1,i3) += Tiiii(i,i2,i1,i3) 
#
            ENDDO i3 
            ENDDO i2
#
            DO i2 
#
               GET                      t1a_old(a,i2) 
               Tiiia(i,i2,i1,a1)      = L2old_aa(i,a,i1,a1)*t1a_old(a,i2) 
               PUT Iiiia(i,i2,i1,a1) += Tiiia(i,i2,i1,a1) 
#
            ENDDO i2 
#
      ENDPARDO i, i1, a, a1   
#
      execute sip_barrier 
#
      PARDO a, a1, a2, i2    
#
               REQUEST VSaaai(a1,a2,a,i2) i2
#
               DO i
               DO i1 
#
                  GET                            Iiiia(i,i2,i1,a2) 
                  Tiaia(i,a,i1,a1)             = Iiiia(i,i2,i1,a2)*VSaaai(a1,a2,a,i2) 
                  Tiaia(i,a,i1,a1)            *= -1.0 # -0.5  
                  PREPARE L2new_aa(i,a,i1,a1) += Tiaia(i,a,i1,a1)  
#
               ENDDO i1 
               ENDDO i
#
      ENDPARDO a, a1, a2, i2  
#
      PARDO a, a1, i2, i3  
#
            REQUEST VSpipi(a,i2,a1,i3) i3  
#
             DO i 
             DO i1  
#
               GET                            Iiiii(i,i2,i1,i3) 
               Tiaia(i,a,i1,a1)             = Iiiii(i,i2,i1,i3)*VSpipi(a,i2,a1,i3) 
               Tiaia(i,a,i1,a1)            *= 0.25  
               PREPARE L2new_aa(i,a,i1,a1) += Tiaia(i,a,i1,a1) 
#
             ENDDO i1 
             ENDDO i 
#
      ENDPARDO a, a1, i2, i3  
#
      execute sip_barrier 
      delete Iiiia 
      delete Iiiii 
# 
# ------------------------------------------------------------------------------- 
#
      ENDPROC L2WABCDaa  
#
# ------------------------------------------------------------------------------- 
#
# ------------------------------------------------------------------------------- 
#
      PROC L2WABCDbb  
#
# ------------------------------------------------------------------------------- 
#
#     BB spin combination 
#     ------------------- 
#
      create Ijjjb 
      create Ijjjj 
      execute sip_barrier 
#
      PARDO j, j1, b, b1 
# 
            REQUEST L2old_bb(j,b,j1,b1) b1  
#
            DO j2  
            DO j3  
#
              REQUEST                  Tau_bb(b,j2,b1,j3)  j3  
              Tjjjj(j,j2,j1,j3)      = L2old_bb(j,b,j1,b1)*Tau_bb(b,j2,b1,j3) 
              PUT Ijjjj(j,j2,j1,j3) += Tjjjj(j,j2,j1,j3) 
#
            ENDDO j3 
            ENDDO j2
#
            DO j2 
#
               GET                      t1b_old(b,j2) 
               Tjjjb(j,j2,j1,b1)      = L2old_bb(j,b,j1,b1)*t1b_old(b,j2) 
               PUT Ijjjb(j,j2,j1,b1) += Tjjjb(j,j2,j1,b1) 
#
            ENDDO j2 
#
      ENDPARDO j, j1, b, b1   
#
      execute sip_barrier 
#
      PARDO b, b1, b2, j2    
#
               REQUEST VSbbbj(b1,b2,b,j2) j2
#
               DO j
               DO j1 
#
                  GET                            Ijjjb(j,j2,j1,b2) 
                  Tjbjb(j,b,j1,b1)             = Ijjjb(j,j2,j1,b2)*VSbbbj(b1,b2,b,j2) 
                  Tjbjb(j,b,j1,b1)            *= -1.0 # -0.5  
                  PREPARE L2new_bb(j,b,j1,b1) += Tjbjb(j,b,j1,b1)  
#
               ENDDO j1 
               ENDDO j
#
      ENDPARDO b, b1, b2, j2  
#
      PARDO b, b1, j2, j3  
#
            REQUEST VSqjqj(b,j2,b1,j3) j3  
#
             DO j 
             DO j1  
#
               GET                            Ijjjj(j,j2,j1,j3) 
               Tjbjb(j,b,j1,b1)             = Ijjjj(j,j2,j1,j3)*VSqjqj(b,j2,b1,j3) 
               Tjbjb(j,b,j1,b1)            *= 0.25  
               PREPARE L2new_bb(j,b,j1,b1) += Tjbjb(j,b,j1,b1) 
#
             ENDDO j1 
             ENDDO j 
#
      ENDPARDO b, b1, j2, j3  
#
      execute sip_barrier 
      delete Ijjjb 
      delete Ijjjj 
# 
# ------------------------------------------------------------------------------- 
#
      ENDPROC L2WABCDbb  
#
# ------------------------------------------------------------------------------- 
#
# ------------------------------------------------------------------------------- 
#
      PROC L2WABCDab  
#
# ------------------------------------------------------------------------------- 
#
#     AB spin combination 
#     ------------------- 
#
      create Iiijb 
      create Iiajj 
      create Iiijj 
      execute sip_barrier 
#
      PARDO i, j, a, b   
#
            REQUEST L2old_ab(i,a,j,b) b  
#
            DO i1  
            DO j1  
#
               REQUEST                 Tau_ab(a,i1,b,j1) j1  
               Tiijj(i,i1,j,j1)      = L2old_ab(i,a,j,b)*Tau_ab(a,i1,b,j1) 
               PUT Iiijj(i,i1,j,j1) += Tiijj(i,i1,j,j1) 
#
            ENDDO j1   
            ENDDO i1 
#
            DO i1   
#
               GET                    t1a_old(a,i1) 
               Tiijb(i,i1,j,b)      = L2old_ab(i,a,j,b)*t1a_old(a,i1)
               PUT Iiijb(i,i1,j,b) += Tiijb(i,i1,j,b) 
#
            ENDDO i1   
#
            DO j1  
#
               GET                    t1b_old(b,j1) 
               Tiajj(i,a,j,j1)      = L2old_ab(i,a,j,b)*t1b_old(b,j1) 
               PUT Iiajj(i,a,j,j1) += Tiajj(i,a,j,j1) 
#
            ENDDO j1 
#
      ENDPARDO i, j, a, b 
#
      execute sip_barrier 
#
      PARDO a, b, i1, b1 
#
            REQUEST Vbbai(b,b1,a,i1) i1  
#
            DO i  
            DO j  
#
               GET                          Iiijb(i,i1,j,b1)
               Tiajb(i,a,j,b)             = Vbbai(b,b1,a,i1)*Iiijb(i,i1,j,b1) 
               Tiajb(i,a,j,b)            *= -1.0   
               PREPARE L2new_ab(i,a,j,b) += Tiajb(i,a,j,b) 
#
            ENDDO j  
            ENDDO i  
#
      ENDPARDO a, b, i1, b1 
#
      PARDO a, b, j1, a1 
#
            REQUEST Vaabj(a,a1,b,j1) j1  
# 
            DO i  
            DO j  
#
               GET                          Iiajj(i,a1,j,j1) 
               Tiajb(i,a,j,b)             = Iiajj(i,a1,j,j1)*Vaabj(a,a1,b,j1) 
               Tiajb(i,a,j,b)            *= -1.0   
               PREPARE L2new_ab(i,a,j,b) += Tiajb(i,a,j,b) 
# 
            ENDDO j 
            ENDDO i  
#
      ENDPARDO a, b, j1, a1 
#
      PARDO a, b, i1, j1 
#
            REQUEST Vpiqj(a,i1,b,j1) j1  
#
            DO i  
            DO j  
#
               GET                          Iiijj(i,i1,j,j1)
               Tiajb(i,a,j,b)             = Iiijj(i,i1,j,j1)*Vpiqj(a,i1,b,j1) 
               PREPARE L2new_ab(i,a,j,b) += Tiajb(i,a,j,b) 
#
            ENDDO j  
            ENDDO i  
#
      ENDPARDO a, b, i1, j1 
#
      execute sip_barrier 
      delete Iiijb 
      delete Iiajj 
      delete Iiijj 
# 
# ------------------------------------------------------------------------------- 
#
      ENDPROC L2WABCDab  
#
# ------------------------------------------------------------------------------- 
#
# ------------------------------------------------------------------------------- 
# 
      PROC L1WABCDa 
#     -------------- 
#
#     First piece
#     -----------
#
      create Xiiia
      execute sip_barrier
      PARDO i, i2, a1, a2
#
            REQUEST L2old_aa(i,a1,i2,a2) a2 
            REQUEST L2old_aa(i,a2,i2,a1) a2 
#
            DO i3
#
               GET t1a_old(a1,i3)
#
               tiaia(i,a1,i2,a2)      = L2old_aa(i,a1,i2,a2)
               t1iaia(i,a1,i2,a2)     = L2old_aa(i,a2,i2,a1)
               t1iaia(i,a1,i2,a2)    -= tiaia(i,a1,i2,a2)
#
               tiiia(i,i3,i2,a2)      = t1iaia(i,a1,i2,a2)*t1a_old(a1,i3)
               PUT Xiiia(i,i3,i2,a2) += tiiia(i,i3,i2,a2)
#
            ENDDO i3
#
      ENDPARDO i, i2, a1, a2
      execute sip_barrier
#
      PARDO a, a2, a3, i3 
#
            REQUEST VSaaai(a3,a2,a,i3) i3 
#
            DO i
            DO i2
#
               GET                 Xiiia(i,i3,i2,a2)
               GET                 t1a_old(a3,i2)
#
               Tiaia(i,a,i2,a3)  = Xiiia(i,i3,i2,a2)*VSaaai(a3,a2,a,i3)
               tia(i,a)          = Tiaia(i,a,i2,a3)*t1a_old(a3,i2)
               tia(i,a)         *= 0.5
               PUT l1a_new(i,a) += tia(i,a)
#
            ENDDO i2
            ENDDO i
#
      ENDPARDO a, a2, a3, i3 
      execute sip_barrier
      delete Xiiia
#
      PARDO i2, i3, i4
#
            allocate L1iiii(*,i3,i2,i4)
            allocate L1iiia(i4,i2,i3,*)
#
            DO a1
            DO a2
#
               REQUEST Tau_aa(a1,i3,a2,i4) a1 
#
               DO i
#
                  REQUEST L2old_aa(i,a1,i2,a2) a2 
#
                  Tiiii(i,i3,i2,i4)   = L2old_aa(i,a1,i2,a2)*Tau_aa(a1,i3,a2,i4)
                  L1iiii(i,i3,i2,i4) += Tiiii(i,i3,i2,i4)
#
               ENDDO i
#
            ENDDO a2
            ENDDO a1
#
            DO a3
#
               GET t1a_old(a3,i2)
#
               DO a
#
                  REQUEST VSpipi(a,i3,a3,i4) i4 
#
                  Tiiia(i4,i2,i3,a)   = VSpipi(a,i3,a3,i4)*t1a_old(a3,i2)
                  L1iiia(i4,i2,i3,a) += Tiiia(i4,i2,i3,a)
#
               ENDDO a
#
            ENDDO a3
#
            DO i
            DO a
#
               tia(i,a)          = L1iiii(i,i3,i2,i4)*L1iiia(i4,i2,i3,a)
               tia(i,a)         *= 0.25
               PUT l1a_new(i,a) += tia(i,a)
#
            ENDDO a
            ENDDO i
#
            deallocate L1iiii(*,i3,i2,i4)
            deallocate L1iiia(i4,i2,i3,*)
#
      ENDPARDO i2, i3, i4
#
#     Second piece
#     ------------
#
      create Xiajj
      create Xiibj
      execute sip_barrier
      PARDO i, j2, a1, b1
#
            REQUEST L2old_ab(i,a1,j2,b1) b1 
#
            DO j1
#
               GET t1b_old(b1,j1)
#
               Tiajj(i,a1,j2,j1)      = L2old_ab(i,a1,j2,b1)*t1b_old(b1,j1)
               PUT Xiajj(i,a1,j2,j1) += Tiajj(i,a1,j2,j1)
#
            ENDDO j1
#
            DO i1
#
               GET t1a_old(a1,i1)
#
               Tiibj(i1,i,b1,j2)      = L2old_ab(i,a1,j2,b1)*t1a_old(a1,i1)
               PUT Xiibj(i1,i,b1,j2) += Tiibj(i1,i,b1,j2)
#
            ENDDO i1
#
      ENDPARDO i, j2, a1, b1
      execute sip_barrier
#
      PARDO a, b, a1, j1  
#
#           Actual contribution computed. 
#           ----------------------------- 
#           T1iabj(i,a,b,j2) = -Xiajj(i,a1,j2,j1)*Vaabj(a,a1,b,j1)*t1b_old(b,j2)
#
            REQUEST Vaabj(a,a1,b,j1) j1 
#
            DO i
            DO j2
#
               GET                 Xiajj(i,a1,j2,j1)
               GET                 t1b_old(b,j2)
#
               Tijaj(i,j2,a1,j1) = Xiajj(i,a1,j2,j1)
               Tajab(a1,j1,a,b)  = Vaabj(a,a1,b,j1)
#
               Tijab(i,j2,a,b)   = Tijaj(i,j2,a1,j1)*Tajab(a1,j1,a,b)
               Tiabj(i,a,b,j2)   = Tijab(i,j2,a,b)
#
               tia(i,a)          = Tiabj(i,a,b,j2)*t1b_old(b,j2)
               tia(i,a)         *= -1.0
               PUT l1a_new(i,a) += tia(i,a)
#
            ENDDO j2
            ENDDO i
#
      ENDPARDO a, b, a1, j1 
#
      PARDO a, b, b1, i1  
#
#           Actual term computed. 
#           ---------------------
#           T1iabj(i,a,b,j2) = -Xiibj(i1,i,b1,j2)*Vbbai(b,b1,a,i1)*t1b_old(b,j2)
#
            REQUEST Vbbai(b,b1,a,i1) i1 
#
            DO j2  
            DO i
#
               GET                 Xiibj(i1,i,b1,j2)
               GET                 t1b_old(b,j2)
#
               Tijib(i,j2,i1,b1) = Xiibj(i1,i,b1,j2)
               Tibab(i1,b1,a,b)  = Vbbai(b,b1,a,i1)
#
               Tijab(i,j2,a,b)   = Tijib(i,j2,i1,b1)*Tibab(i1,b1,a,b)
               Tiabj(i,a,b,j2)   = Tijab(i,j2,a,b)
#
               tia(i,a)          = Tiabj(i,a,b,j2)*t1b_old(b,j2)
               tia(i,a)         *= -1.0
               PUT l1a_new(i,a) += tia(i,a)
#
            ENDDO i
            ENDDO j2  
#
      ENDPARDO a, b, b1, i1  
#
      execute sip_barrier
      delete Xiajj
      delete Xiibj
#
      PARDO i1, j1, j2
#
            allocate L1iijj(*,i1,j2,j1)
            allocate L1iajj(i1,*,j1,j2)
#
            DO a1
            DO b1
#
               REQUEST Tau_ab(a1,i1,b1,j1) j1 
#
               DO i
#
                  REQUEST L2old_ab(i,a1,j2,b1) b1
#
                  Tiijj(i,i1,j2,j1)   = L2old_ab(i,a1,j2,b1)*Tau_ab(a1,i1,b1,j1)
                  L1iijj(i,i1,j2,j1) += Tiijj(i,i1,j2,j1)
#
               ENDDO i
#
            ENDDO b1
            ENDDO a1
#
            DO b
#
               GET t1b_old(b,j2)
#
               DO a
#
                  REQUEST Vpiqj(a,i1,b,j1) j1 
#
                  Tiajj(i1,a,j1,j2)   = Vpiqj(a,i1,b,j1)*t1b_old(b,j2)
                  L1iajj(i1,a,j1,j2) += Tiajj(i1,a,j1,j2)
#
               ENDDO a
#
            ENDDO b
#
            DO i
            DO a
#
               tia(i,a)          = L1iijj(i,i1,j2,j1)*L1iajj(i1,a,j1,j2)
               PUT l1a_new(i,a) += tia(i,a)
#
            ENDDO a
            ENDDO i
#
            deallocate L1iijj(*,i1,j2,j1)
            deallocate L1iajj(i1,*,j1,j2)
#
      ENDPARDO i1, j1, j2
#
# -------------------------------------------------------------------------------
#
# ------------------------------------------------------------------------------- 
#
      ENDPROC L1WABCDa 
#     -------------- 
#
# ------------------------------------------------------------------------------- 
# 
# ------------------------------------------------------------------------------- 
# 
      PROC L1WABCDb 
#     -------------- 
#
#     First piece
#     -----------
#
      create Xjjjb
      execute sip_barrier
      PARDO j, j2, b1, b2
#
            REQUEST L2old_bb(j,b1,j2,b2) b2 
            REQUEST L2old_bb(j,b2,j2,b1) b2 
#
            DO j3
#
               GET t1b_old(b1,j3)
#
               tjbjb(j,b1,j2,b2)      = L2old_bb(j,b1,j2,b2)
               t1jbjb(j,b1,j2,b2)     = L2old_bb(j,b2,j2,b1)
               t1jbjb(j,b1,j2,b2)    -= tjbjb(j,b1,j2,b2)
#
               tjjjb(j,j3,j2,b2)      = t1jbjb(j,b1,j2,b2)*t1b_old(b1,j3)
               PUT Xjjjb(j,j3,j2,b2) += tjjjb(j,j3,j2,b2)
#
            ENDDO j3
#
      ENDPARDO j, j2, b1, b2
      execute sip_barrier
#
      PARDO b, b3, b2, j3  
#
            REQUEST VSbbbj(b3,b2,b,j3) j3 
#
            DO j
            DO j2
#
               GET                 Xjjjb(j,j3,j2,b2)
               GET                 t1b_old(b3,j2)
#
               Tjbjb(j,b,j2,b3)  = Xjjjb(j,j3,j2,b2)*VSbbbj(b3,b2,b,j3)
               tjb(j,b)          = Tjbjb(j,b,j2,b3)*t1b_old(b3,j2)
               tjb(j,b)         *= 0.5
               PUT l1b_new(j,b) += tjb(j,b)
#
            ENDDO j2
            ENDDO j
#
      ENDPARDO b, b3, b2, j3
      execute sip_barrier
      delete Xjjjb
#
      PARDO j2, j3, j4
#
            allocate L1jjjj(*,j3,j2,j4)
            allocate L1jjjb(j4,j2,j3,*)
#
            DO b1
            DO b2
#
               REQUEST Tau_bb(b1,j3,b2,j4) j4 
#
               DO j
#
                  REQUEST L2old_bb(j,b1,j2,b2) b2 
#
                  Tjjjj(j,j3,j2,j4)   = L2old_bb(j,b1,j2,b2)*Tau_bb(b1,j3,b2,j4)
                  L1jjjj(j,j3,j2,j4) += Tjjjj(j,j3,j2,j4)
#
               ENDDO j
#
            ENDDO b2
            ENDDO b1
#
            DO b3
#
               GET t1b_old(b3,j2)
#
               DO b
#
                  REQUEST VSqjqj(b,j3,b3,j4) j4 
#
                  Tjjjb(j4,j2,j3,b)   = VSqjqj(b,j3,b3,j4)*t1b_old(b3,j2)
                  L1jjjb(j4,j2,j3,b) += Tjjjb(j4,j2,j3,b)
#
               ENDDO b
#
            ENDDO b3
#
            DO j
            DO b
#
               tjb(j,b)          = L1jjjj(j,j3,j2,j4)*L1jjjb(j4,j2,j3,b)
               tjb(j,b)         *= 0.25
               PUT l1b_new(j,b) += tjb(j,b)
#
            ENDDO b
            ENDDO j
#
            deallocate L1jjjj(*,j3,j2,j4)
            deallocate L1jjjb(j4,j2,j3,*)
#
      ENDPARDO j2, j3, j4
#
#     Second piece
#     ------------
#
      create Xjbii
      create Xjjai
      execute sip_barrier
      PARDO j, i2, b1, a1
#
            REQUEST L2old_ab(i2,a1,j,b1) b1 
#
            DO i1
#
               GET t1a_old(a1,i1)
#
               Tjbii(j,b1,i2,i1)      = L2old_ab(i2,a1,j,b1)*t1a_old(a1,i1)
               PUT Xjbii(j,b1,i2,i1) += Tjbii(j,b1,i2,i1)
#
            ENDDO i1
#
            DO j1
#
               GET t1b_old(b1,j1)
#
               Tjjai(j1,j,a1,i2)      = L2old_ab(i2,a1,j,b1)*t1b_old(b1,j1)
               PUT Xjjai(j1,j,a1,i2) += Tjjai(j1,j,a1,i2)
#
            ENDDO j1
#
      ENDPARDO j, i2, b1, a1
      execute sip_barrier
#
      PARDO a, b, b1, i1  
#
#           Actual term programmed. 
#           -----------------------
#           T1jbai(j,b,a,i2) = Xjbii(j,b1,i2,i1)*Vbbai(b,b1,a,i1)*t1a_old(a,i2)
#
            REQUEST Vbbai(b,b1,a,i1) i1 
#
            DO j
            DO i2
#
               GET                 Xjbii(j,b1,i2,i1)
               GET                 t1a_old(a,i2)
#
               Tjibi(j,i2,b1,i1) = Xjbii(j,b1,i2,i1)
               Tbiba(b1,i1,b,a)  = Vbbai(b,b1,a,i1)
#
               Tjiba(j,i2,b,a)   = Tjibi(j,i2,b1,i1)*Tbiba(b1,i1,b,a)
               Tjbai(j,b,a,i2)   = Tjiba(j,i2,b,a)
#
               tjb(j,b)          = Tjbai(j,b,a,i2)*t1a_old(a,i2)
               tjb(j,b)         *= -1.0
               PUT l1b_new(j,b) += tjb(j,b)
#
            ENDDO i2
            ENDDO j
#
      ENDPARDO a, b, b1, i1  
#
      PARDO a, b, j1, a1  
#
#           Actual term programmed. 
#           -----------------------
#           T1jbai(j,b,a,i2)  = Xjjai(j1,j,a1,i2)*Vaabj(a,a1,b,j1)*t1a_old(a,i2) 
#
            REQUEST Vaabj(a,a1,b,j1) j1 
#
            DO j
            DO i2  
#
               GET                 Xjjai(j1,j,a1,i2)
               GET                 t1a_old(a,i2)
#
               Tjija(j,i2,j1,a1) = Xjjai(j1,j,a1,i2)
               Tjaba(j1,a1,b,a)  = Vaabj(a,a1,b,j1)
#
               Tjiba(j,i2,b,a)   = Tjija(j,i2,j1,a1)*Tjaba(j1,a1,b,a)
               Tjbai(j,b,a,i2)   = Tjiba(j,i2,b,a)
#
               tjb(j,b)          = Tjbai(j,b,a,i2)*t1a_old(a,i2)
               tjb(j,b)         *= -1.0
               PUT l1b_new(j,b) += tjb(j,b)
#
            ENDDO i2  
            ENDDO j
#
      ENDPARDO a, b, j1, a1  
#
      execute sip_barrier
      delete Xjbii
      delete Xjjai
#
      PARDO j1, i1, i2
#
            allocate L1jjii(*,j1,i2,i1)
            allocate L1jbii(j1,*,i1,i2)
#
            DO b1
            DO a1
#
               REQUEST Tau_ab(a1,i1,b1,j1) j1 
#
               DO j
#
                  REQUEST L2old_ab(i2,a1,j,b1) b1 
#
                  Tjjii(j,j1,i2,i1)   = L2old_ab(i2,a1,j,b1)*Tau_ab(a1,i1,b1,j1)
                  L1jjii(j,j1,i2,i1) += Tjjii(j,j1,i2,i1)
#
               ENDDO j
#
            ENDDO a1
            ENDDO b1
#
            DO a
#
               GET t1a_old(a,i2)
#
               DO b
#
                  REQUEST Vpiqj(a,i1,b,j1) j1 
#
                  Tjbii(j1,b,i1,i2)   = Vpiqj(a,i1,b,j1)*t1a_old(a,i2)
                  L1jbii(j1,b,i1,i2) += Tjbii(j1,b,i1,i2)
#
               ENDDO b
#
            ENDDO a
#
            DO j
            DO b
#
               tjb(j,b)          = L1jjii(j,j1,i2,i1)*L1jbii(j1,b,i1,i2)
               PUT l1b_new(j,b) += tjb(j,b)
#
            ENDDO b
            ENDDO j
#
            deallocate L1jjii(*,j1,i2,i1)
            deallocate L1jbii(j1,*,i1,i2)
#
      ENDPARDO j1, i1, i2
#
# -------------------------------------------------------------------------------
#
      ENDPROC L1WABCDb 
#     ---------------- 
#
      PROC VABCD
#     ----------
#
           CALL LLADDER
           CALL L2WABCDaa
           CALL L2WABCDbb
           CALL L2WABCDab
#
           CALL L1WABCDa
           CALL L1WABCDb
#
      ENDPROC VABCD
#     -------------
#
# ------------------------------------------------------------------------------- 
#
     PROC L2ZERO
#
          PARDO a, a1, i, i1
                Tiaia(i,a,i1,a1) = 0.0
                PREPARE L2new_aa(i,a,i1,a1) = Tiaia(i,a,i1,a1)
          ENDPARDO a, a1, i, i1
#
          PARDO b, b1, j, j1
                Tjbjb(j,b,j1,b1) = 0.0
                PREPARE L2new_bb(j,b,j1,b1) = Tjbjb(j,b,j1,b1)
          ENDPARDO b, b1, j, j1
#
          PARDO a, b, i, j
                Tiajb(i,a,j,b) = 0.0
                PREPARE L2new_ab(i,a,j,b) = Tiajb(i,a,j,b)
          ENDPARDO a, b, i, j
#
     ENDPROC L2ZERO
#
# ------------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------------
#
     PROC ZERO_DSCALAR  
#    ----------------- 
#
#    The scalars used (overlap of error arrays and coeffients) in the DIIS 
#    expansion are zero'd out. 
#
#      Zero out scalars.
#      -----------------
#
       b11 = 0.0
       b12 = 0.0
       b13 = 0.0
       b14 = 0.0
       b15 = 0.0
       b16 = 0.0
       b17 = 0.0
       b18 = 0.0
       b19 = 0.0
       b110 = 0.0
#
       b22 = 0.0
       b23 = 0.0
       b24 = 0.0
       b25 = 0.0
       b26 = 0.0
       b27 = 0.0
       b28 = 0.0
       b29 = 0.0
       b210 = 0.0
#
       b33 = 0.0
       b34 = 0.0
       b35 = 0.0
       b36 = 0.0
       b37 = 0.0
       b38 = 0.0
       b39 = 0.0
       b310 = 0.0
#
       b44 = 0.0
       b45 = 0.0
       b46 = 0.0
       b47 = 0.0
       b48 = 0.0
       b49 = 0.0
       b410 = 0.0
#
       b55 = 0.0
       b56 = 0.0
       b57 = 0.0
       b58 = 0.0
       b59 = 0.0
       b510 = 0.0
#
       b66 = 0.0
       b67 = 0.0
       b68 = 0.0
       b69 = 0.0
       b610 = 0.0
#
       b77 = 0.0
       b78 = 0.0
       b79 = 0.0
       b710 = 0.0
#
       b88 = 0.0
       b89 = 0.0
       b810 = 0.0
#
       b99 = 0.0
       b910 = 0.0
#
       b1010 = 0.0
#
       Tb11 = 0.0
       Tb12 = 0.0
       Tb13 = 0.0
       Tb14 = 0.0
       Tb15 = 0.0
       Tb16 = 0.0
       Tb17 = 0.0
       Tb18 = 0.0
       Tb19 = 0.0
       Tb110 = 0.0
#
       Tb22 = 0.0
       Tb23 = 0.0
       Tb24 = 0.0
       Tb25 = 0.0
       Tb26 = 0.0
       Tb27 = 0.0
       Tb28 = 0.0
       Tb29 = 0.0
       Tb210 = 0.0
#
       Tb33 = 0.0
       Tb34 = 0.0
       Tb35 = 0.0
       Tb36 = 0.0
       Tb37 = 0.0
       Tb38 = 0.0
       Tb39 = 0.0
       Tb310 = 0.0
#
       Tb44 = 0.0
       Tb45 = 0.0
       Tb46 = 0.0
       Tb47 = 0.0
       Tb48 = 0.0
       Tb49 = 0.0
       Tb410 = 0.0
#
       Tb55 = 0.0
       Tb56 = 0.0
       Tb57 = 0.0
       Tb58 = 0.0
       Tb59 = 0.0
       Tb510 = 0.0
#
       Tb66 = 0.0
       Tb67 = 0.0
       Tb68 = 0.0
       Tb69 = 0.0
       Tb610 = 0.0
#
       Tb77 = 0.0
       Tb78 = 0.0
       Tb79 = 0.0
       Tb710 = 0.0
#
       Tb88 = 0.0
       Tb89 = 0.0
       Tb810 = 0.0
#
       Tb99 = 0.0
       Tb910 = 0.0
#
       Tb1010 = 0.0
#
       c1 = 0.0
       c2 = 0.0
       c3 = 0.0
       c4 = 0.0
       c5 = 0.0
       c6 = 0.0
       c7 = 0.0
       c8 = 0.0
       c9 = 0.0
       c10 = 0.0
#
       execute sip_barrier
#
     ENDPROC ZERO_DSCALAR  
#    -------------------- 
#
# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
#
     PROC SETUP_DIIS   
#    --------------- 
#
#    Put the matrix elements of B into the sip 'B' matrix. 
#
       execute diis_setup Tb11
       execute diis_setup Tb12
       execute diis_setup Tb13
       execute diis_setup Tb14
       execute diis_setup Tb15
       execute diis_setup Tb16
       execute diis_setup Tb17
       execute diis_setup Tb18
       execute diis_setup Tb19
       execute diis_setup Tb110

       execute diis_setup Tb22
       execute diis_setup Tb23
       execute diis_setup Tb24
       execute diis_setup Tb25
       execute diis_setup Tb26
       execute diis_setup Tb27
       execute diis_setup Tb28
       execute diis_setup Tb29
       execute diis_setup Tb210

       execute diis_setup Tb33
       execute diis_setup Tb34
       execute diis_setup Tb35
       execute diis_setup Tb36
       execute diis_setup Tb37
       execute diis_setup Tb38
       execute diis_setup Tb39
       execute diis_setup Tb310

       execute diis_setup Tb44
       execute diis_setup Tb45
       execute diis_setup Tb46
       execute diis_setup Tb47
       execute diis_setup Tb48
       execute diis_setup Tb49
       execute diis_setup Tb410

       execute diis_setup Tb55
       execute diis_setup Tb56
       execute diis_setup Tb57
       execute diis_setup Tb58
       execute diis_setup Tb59
       execute diis_setup Tb510

       execute diis_setup Tb66
       execute diis_setup Tb67
       execute diis_setup Tb68
       execute diis_setup Tb69
       execute diis_setup Tb610

       execute diis_setup Tb77
       execute diis_setup Tb78
       execute diis_setup Tb79
       execute diis_setup Tb710

       execute diis_setup Tb88
       execute diis_setup Tb89
       execute diis_setup Tb810

       execute diis_setup Tb99
       execute diis_setup Tb910

       execute diis_setup Tb1010
#
       execute sip_barrier
#
     ENDPROC SETUP_DIIS   
#    ------------------ 
#
# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
#
     PROC DIIS1  
#    ---------- 
#
#    Zero out scalars.
#    ----------------- 
#
     CALL ZERO_DSCALAR 
#
     execute server_barrier 
     execute sip_barrier 
#
#    Determine the 'B-matrix'. 
#    ------------------------- 
#
#    Compute contributions due to L2iaia amplitudes. 
#    ----------------------------------------------- 
#
     PARDO a, i, a1, i1
#
#          REQUEST/GET amplitude data from all 2 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1iaia(i,a,i1,a1) a # kiter-1 amplitudes
           REQUEST e2iaia(i,a,i1,a1) a # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,2
#             ---------
#
              etemp = e1iaia(i,a,i1,a1)*e1iaia(i,a,i1,a1)  
              b11   += etemp
#
              etemp = e1iaia(i,a,i1,a1)*e2iaia(i,a,i1,a1)  
              b12   += etemp
#
#             b1x x=2,2
#             ---------
#
              etemp = e2iaia(i,a,i1,a1)*e2iaia(i,a,i1,a1)  
              b22   += etemp
#
     ENDPARDO a, i, a1, i1
#
#    Compute contributions due to L2jbjb amplitudes.
#    -----------------------------------------------
#
     PARDO b, j, b1, j1
#
#          REQUEST/GET amplitude data from all 2 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1jbjb(j,b,j1,b1) b # kiter-1 amplitudes
           REQUEST e2jbjb(j,b,j1,b1) b # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,2
#             ---------
#
              etemp = e1jbjb(j,b,j1,b1)*e1jbjb(j,b,j1,b1)  
              b11  += etemp
#
              etemp = e1jbjb(j,b,j1,b1)*e2jbjb(j,b,j1,b1)  
              b12  += etemp
#
#             b1x x=2,2
#             ---------
#
              etemp = e2jbjb(j,b,j1,b1)*e2jbjb(j,b,j1,b1)  
              b22  += etemp
#
     ENDPARDO b, j, b1, j1
#
#    Compute contributions due to L2iajb amplitudes.
#    -----------------------------------------------
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 2 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1iajb(i,a,j,b) a # kiter-1 amplitudes
           REQUEST e2iajb(i,a,j,b) a # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,2
#             ---------
#
              etemp = e1iajb(i,a,j,b)*e1iajb(i,a,j,b)  
              etemp *= 4.0
              b11  += etemp
#
              etemp = e1iajb(i,a,j,b)*e2iajb(i,a,j,b)  
              etemp *= 4.0
              b12  += etemp
#
#             b1x x=2,2
#             ---------
#
              etemp = e2iajb(i,a,j,b)*e2iajb(i,a,j,b)  
              etemp *= 4.0
              b22  += etemp
#
     ENDPARDO a, i, b, j
#
#    Compute contributions due to L1ia amplitudes. 
#    --------------------------------------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 2 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET e1ia(i,a)    # kiter-1 amplitudes  
           GET e2ia(i,a)    # kiter-0 amplitudes  
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#             b1x x=1,2 
#             --------- 
#
              etemp = e1ia(i,a)*e1ia(i,a) 
              etemp *= 4.0
              b11  += etemp            
#
              etemp = e1ia(i,a)*e2ia(i,a) 
              etemp *= 4.0
              b12  += etemp            
#
#             b1x x=2,2 
#             --------- 
#
              etemp = e2ia(i,a)*e2ia(i,a) 
              etemp *= 4.0
              b22  += etemp            
#
     ENDPARDO a, i 
#
#    Compute contributions due to L1jb amplitudes. 
#    --------------------------------------------- 
#
     PARDO b, j  
#
#          REQUEST/GET amplitude data from all 2 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET e1jb(j,b)    # kiter-1 amplitudes  
           GET e2jb(j,b)    # kiter-0 amplitudes  
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#             b1x x=1,2 
#             --------- 
#
              etemp = e1jb(j,b)*e1jb(j,b) 
              etemp *= 4.0
              b11  += etemp            
#
              etemp = e1jb(j,b)*e2jb(j,b) 
              etemp *= 4.0
              b12  += etemp            
#
#             b1x x=2,2 
#             --------- 
#
              etemp = e2jb(j,b)*e2jb(j,b) 
              etemp *= 4.0
              b22  += etemp            
#
     ENDPARDO b, j 
#
     execute sip_barrier
     execute server_barrier 
#
#    Collectively sum B-matrix elements. 
#    -----------------------------------
#
     collective Tb11 += b11 
     collective Tb12 += b12 
     collective Tb22 += b22 
#
#    Now the unique elements of the 'B-matrix' have been computed, the array is filled out
#    in the setup_diis. 
#    --------------------------------------------------------------------------------------
#
#    Put the elements of the 'B-matrix', which have been computed as scalars into the  
#    R-matrix. 
#    -------------------------------------------------------------------------------- 
#
     CALL SETUP_DIIS 
#
     execute compute_diis # --> New instruction  
#
     c1 = Tb11 
     c2 = Tb22 
     execute print_scalar c1 
     execute print_scalar c2 
     execute server_barrier 
     execute sip_barrier 
#
#    Done computing the c-vector. 
#    ---------------------------- 
#
#    Form the updated amplitudes using the c-vector. 
#    -----------------------------------------------  
#
#    Form L2old_aa. 
#    -------------- 
#
     PARDO a, i, a1, i1
#
#          REQUEST/GET amplitude data from all 2 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST d0iaia(i,a,i1,a1) a # kiter-2 amplitudes
           REQUEST d1iaia(i,a,i1,a1) a # kiter-1 amplitudes
#
           REQUEST e1iaia(i,a,i1,a1) a # kiter-1 amplitudes
           REQUEST e2iaia(i,a,i1,a1) a # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> T2old_aa.
#          ---------------------------------------------------------
#
           t2iaia(i,a,i1,a1)            = d0iaia(i,a,i1,a1)
           t2iaia(i,a,i1,a1)           += e1iaia(i,a,i1,a1)
           t2iaia(i,a,i1,a1)           *= c1
           tiaia(i,a,i1,a1)             = t2iaia(i,a,i1,a1)
#
           t2iaia(i,a,i1,a1)            = d1iaia(i,a,i1,a1)
           t2iaia(i,a,i1,a1)           += e2iaia(i,a,i1,a1)
           t2iaia(i,a,i1,a1)           *= c2
           tiaia(i,a,i1,a1)            += t2iaia(i,a,i1,a1)
#
           PREPARE L2old_aa(i,a,i1,a1)      = tiaia(i,a,i1,a1)
#
     ENDPARDO a, i, a1, i1
#
#    Form L2old_bb. 
#    -------------- 
#
     PARDO b, j, b1, j1
#
#          REQUEST/GET amplitude data from all 2 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST D0jbjb(j,b,j1,b1) b # kiter-2 amplitudes
           REQUEST D1jbjb(j,b,j1,b1) b # kiter-1 amplitudes
#
           REQUEST e1jbjb(j,b,j1,b1) b # kiter-1 amplitudes
           REQUEST e2jbjb(j,b,j1,b1) b # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> T2old_bb.
#          ---------------------------------------------------------
#
           t2jbjb(j,b,j1,b1)            = D0jbjb(j,b,j1,b1)  
           t2jbjb(j,b,j1,b1)           += e1jbjb(j,b,j1,b1)
           t2jbjb(j,b,j1,b1)           *= c1
           tjbjb(j,b,j1,b1)             = t2jbjb(j,b,j1,b1)
#
           t2jbjb(j,b,j1,b1)            = D1jbjb(j,b,j1,b1)  
           t2jbjb(j,b,j1,b1)           += e2jbjb(j,b,j1,b1)
           t2jbjb(j,b,j1,b1)           *= c2
           tjbjb(j,b,j1,b1)            += t2jbjb(j,b,j1,b1)
#
           PREPARE L2old_bb(j,b,j1,b1)      = tjbjb(j,b,j1,b1)
#
     ENDPARDO b, j, b1, j1
#
#    Form L2old_ab. 
#    -------------- 
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 2 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST D0iajb(i,a,j,b) a # kiter-2 amplitudes
           REQUEST D1iajb(i,a,j,b) a # kiter-1 amplitudes
#
           REQUEST e1iajb(i,a,j,b) a # kiter-1 amplitudes
           REQUEST e2iajb(i,a,j,b) a # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> L2old_ab.
#          ---------------------------------------------------------
#
           t2iajb(i,a,j,b)            = d0iajb(i,a,j,b)
           t2iajb(i,a,j,b)           += e1iajb(i,a,j,b)
           t2iajb(i,a,j,b)           *= c1
           tiajb(i,a,j,b)             = t2iajb(i,a,j,b)
#
           t2iajb(i,a,j,b)            = d1iajb(i,a,j,b)
           t2iajb(i,a,j,b)           += e2iajb(i,a,j,b)
           t2iajb(i,a,j,b)           *= c2
           tiajb(i,a,j,b)            += t2iajb(i,a,j,b)
#
           PREPARE L2old_ab(i,a,j,b)      = tiajb(i,a,j,b)
#
     ENDPARDO a, i, b, j
#
#    Form Lai_old. 
#    ------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 2 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET D0ia(i,a)     # kiter-2 amplitudes  
           GET D1ia(i,a)     # kiter-1 amplitudes  
#
           GET e1ia(i,a)     # kiter-1 amplitudes  
           GET e2ia(i,a)     # kiter-0 amplitudes  
#
#          Compute contributions to updated amplitudes --> lai_old. 
#          --------------------------------------------------------  
# 
           t1ia(i,a)     = d0ia(i,a) 
           t1ia(i,a)    += e1ia(i,a) 
           t1ia(i,a)    *= c1  
           tia(i,a)      = t1ia(i,a) 
# 
           t1ia(i,a)     = d1ia(i,a) 
           t1ia(i,a)    += e2ia(i,a) 
           t1ia(i,a)    *= c2  
           tia(i,a)     += t1ia(i,a) 
#
           PUT L1a_old(i,a) = tia(i,a) 
#
     ENDPARDO a, i  
#
#    Form Lbj_old. 
#    ------------- 
#
     PARDO b, j  
#
#          REQUEST/GET amplitude data from all 2 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET D0jb(j,b)     # kiter-2 amplitudes  
           GET D1jb(j,b)     # kiter-1 amplitudes  
#
           GET e1jb(j,b)     # kiter-1 amplitudes  
           GET e2jb(j,b)     # kiter-0 amplitudes  
#
#          Compute contributions to updated amplitudes --> lbj_old. 
#          --------------------------------------------------------  
# 
           t1jb(j,b)     = d0jb(j,b) 
           t1jb(j,b)    += e1jb(j,b) 
           t1jb(j,b)    *= c1  
           tjb(j,b)      = t1jb(j,b) 
# 
           t1jb(j,b)     = d1jb(j,b) 
           t1jb(j,b)    += e2jb(j,b) 
           t1jb(j,b)    *= c2  
           tjb(j,b)     += t1jb(j,b) 
# 
           PUT l1b_old(j,b) = tjb(j,b) 
# 
     ENDPARDO b, j 
#
     execute server_barrier 
     execute sip_barrier 
#
     ENDPROC DIIS1  
#    ------------- 
#
# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
#
     PROC DIIS2  
#    ---------- 
#
#    Zero out scalars.
#    ----------------- 
#
     CALL ZERO_DSCALAR 
#
     execute server_barrier 
     execute sip_barrier 
#
#    Determine the 'B-matrix'. 
#    ------------------------- 
#
#    Compute contributions due to L2iaia amplitudes. 
#    ----------------------------------------------- 
#
     PARDO a, i, a1, i1
#
#          REQUEST/GET amplitude data from all 2 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1iaia(i,a,i1,a1) a # kiter-2 amplitudes
           REQUEST e2iaia(i,a,i1,a1) a # kiter-1 amplitudes
           REQUEST e3iaia(i,a,i1,a1) a # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,3
#             ---------
#
              etemp = e1iaia(i,a,i1,a1)*e1iaia(i,a,i1,a1)  
              b11   += etemp
#
              etemp = e1iaia(i,a,i1,a1)*e2iaia(i,a,i1,a1)  
              b12   += etemp
#
              etemp = e1iaia(i,a,i1,a1)*e3iaia(i,a,i1,a1)  
              b13   += etemp
#
#             b1x x=2,3
#             ---------
#
              etemp = e2iaia(i,a,i1,a1)*e2iaia(i,a,i1,a1)  
              b22   += etemp
#
              etemp = e2iaia(i,a,i1,a1)*e3iaia(i,a,i1,a1)  
              b23   += etemp
#
#             b1x x=3,3
#             ---------
#
              etemp = e3iaia(i,a,i1,a1)*e3iaia(i,a,i1,a1)  
              b33   += etemp
#
     ENDPARDO a, i, a1, i1
#
#    Compute contributions due to L2jbjb amplitudes.
#    -----------------------------------------------
#
     PARDO b, j, b1, j1
#
#          REQUEST/GET amplitude data from all 2 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1jbjb(j,b,j1,b1) b # kiter-2 amplitudes
           REQUEST e2jbjb(j,b,j1,b1) b # kiter-1 amplitudes
           REQUEST e3jbjb(j,b,j1,b1) b # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,3
#             ---------
#
              etemp = e1jbjb(j,b,j1,b1)*e1jbjb(j,b,j1,b1)  
              b11  += etemp
#
              etemp = e1jbjb(j,b,j1,b1)*e2jbjb(j,b,j1,b1)  
              b12  += etemp
#
              etemp = e1jbjb(j,b,j1,b1)*e3jbjb(j,b,j1,b1)  
              b13  += etemp
#
#             b1x x=2,3
#             ---------
#
              etemp = e2jbjb(j,b,j1,b1)*e2jbjb(j,b,j1,b1)  
              b22  += etemp
#
              etemp = e2jbjb(j,b,j1,b1)*e3jbjb(j,b,j1,b1)  
              b23  += etemp
#
#             b1x x=3,3
#             ---------
#
              etemp = e3jbjb(j,b,j1,b1)*e3jbjb(j,b,j1,b1)  
              b33  += etemp
#
     ENDPARDO b, j, b1, j1
#
#    Compute contributions due to L2iajb amplitudes.
#    -----------------------------------------------
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 2 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1iajb(i,a,j,b) a # kiter-2 amplitudes
           REQUEST e2iajb(i,a,j,b) a # kiter-1 amplitudes
           REQUEST e3iajb(i,a,j,b) a # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,3
#             ---------
#
              etemp = e1iajb(i,a,j,b)*e1iajb(i,a,j,b)  
              etemp *= 4.0
              b11  += etemp
#
              etemp = e1iajb(i,a,j,b)*e2iajb(i,a,j,b)  
              etemp *= 4.0
              b12  += etemp
#
              etemp = e1iajb(i,a,j,b)*e3iajb(i,a,j,b)  
              etemp *= 4.0
              b13  += etemp
#
#             b1x x=2,3
#             ---------
#
              etemp = e2iajb(i,a,j,b)*e2iajb(i,a,j,b)  
              etemp *= 4.0
              b22  += etemp
#
              etemp = e2iajb(i,a,j,b)*e3iajb(i,a,j,b)  
              etemp *= 4.0
              b23  += etemp
#
#             b1x x=3,3
#             ---------
#
              etemp = e3iajb(i,a,j,b)*e3iajb(i,a,j,b)  
              etemp *= 4.0
              b33  += etemp
#
     ENDPARDO a, i, b, j
#
#    Compute contributions due to L1ia amplitudes. 
#    --------------------------------------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 2 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET e1ia(i,a)    # kiter-2 amplitudes  
           GET e2ia(i,a)    # kiter-1 amplitudes  
           GET e3ia(i,a)    # kiter-0 amplitudes  
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#             b1x x=1,3 
#             --------- 
#
              etemp = e1ia(i,a)*e1ia(i,a) 
              etemp *= 4.0
              b11  += etemp            
#
              etemp = e1ia(i,a)*e2ia(i,a) 
              etemp *= 4.0
              b12  += etemp            
#
              etemp = e1ia(i,a)*e3ia(i,a) 
              etemp *= 4.0
              b13  += etemp            
#
#             b1x x=2,3 
#             --------- 
#
              etemp = e2ia(i,a)*e2ia(i,a) 
              etemp *= 4.0
              b22  += etemp            
#
              etemp = e2ia(i,a)*e3ia(i,a) 
              etemp *= 4.0
              b23  += etemp            
#
#             b1x x=3,3 
#             --------- 
#
              etemp = e3ia(i,a)*e3ia(i,a) 
              etemp *= 4.0
              b33  += etemp            
#
     ENDPARDO a, i 
#
#    Compute contributions due to L1jb amplitudes. 
#    --------------------------------------------- 
#
     PARDO b, j  
#
#          REQUEST/GET amplitude data from all 2 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET e1jb(j,b)    # kiter-2 amplitudes  
           GET e2jb(j,b)    # kiter-1 amplitudes  
           GET e3jb(j,b)    # kiter-0 amplitudes  
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#             b1x x=1,3 
#             --------- 
#
              etemp = e1jb(j,b)*e1jb(j,b) 
              etemp *= 4.0
              b11  += etemp            
#
              etemp = e1jb(j,b)*e2jb(j,b) 
              etemp *= 4.0
              b12  += etemp            
#
              etemp = e1jb(j,b)*e3jb(j,b) 
              etemp *= 4.0
              b13  += etemp            
#
#             b1x x=2,3 
#             --------- 
#
              etemp = e2jb(j,b)*e2jb(j,b) 
              etemp *= 4.0
              b22  += etemp            
#
              etemp = e2jb(j,b)*e3jb(j,b) 
              etemp *= 4.0
              b23  += etemp            
#
#             b1x x=3,3 
#             --------- 
#
              etemp = e3jb(j,b)*e3jb(j,b) 
              etemp *= 4.0
              b33  += etemp            
#
     ENDPARDO b, j 
#
     execute sip_barrier
     execute server_barrier 
#
#    Collectively sum B-matrix elements. 
#    -----------------------------------
#
     collective Tb11 += b11 
     collective Tb12 += b12 
     collective Tb13 += b13 
     collective Tb22 += b22 
     collective Tb23 += b23 
     collective Tb33 += b33 
#
#    Now the unique elements of the 'B-matrix' have been computed, the array is filled out
#    in the setup_diis. 
#    --------------------------------------------------------------------------------------
#
#    Put the elements of the 'B-matrix', which have been computed as scalars into the  
#    R-matrix. 
#    -------------------------------------------------------------------------------- 
#
     CALL SETUP_DIIS 
#
     execute compute_diis # --> New instruction  
#
     c1 = Tb11 
     c2 = Tb22 
     c3 = Tb33 
     execute print_scalar c1 
     execute print_scalar c2 
     execute print_scalar c3 
     execute server_barrier 
     execute sip_barrier 
#
#    Done computing the c-vector. 
#    ---------------------------- 
#
#    Form the updated amplitudes using the c-vector. 
#    -----------------------------------------------  
#
#    Form L2old_aa. 
#    -------------- 
#
     PARDO a, i, a1, i1
#
#          REQUEST/GET amplitude data from all 3 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST d0iaia(i,a,i1,a1) a # kiter-3 amplitudes
           REQUEST d1iaia(i,a,i1,a1) a # kiter-2 amplitudes
           REQUEST d2iaia(i,a,i1,a1) a # kiter-1 amplitudes
#
           REQUEST e1iaia(i,a,i1,a1) a # kiter-2 amplitudes
           REQUEST e2iaia(i,a,i1,a1) a # kiter-1 amplitudes
           REQUEST e3iaia(i,a,i1,a1) a # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> T2old_aa.
#          ---------------------------------------------------------
#
           t2iaia(i,a,i1,a1)            = d0iaia(i,a,i1,a1)
           t2iaia(i,a,i1,a1)           += e1iaia(i,a,i1,a1)
           t2iaia(i,a,i1,a1)           *= c1
           tiaia(i,a,i1,a1)             = t2iaia(i,a,i1,a1)
#
           t2iaia(i,a,i1,a1)            = d1iaia(i,a,i1,a1)
           t2iaia(i,a,i1,a1)           += e2iaia(i,a,i1,a1)
           t2iaia(i,a,i1,a1)           *= c2
           tiaia(i,a,i1,a1)            += t2iaia(i,a,i1,a1)
#
           t2iaia(i,a,i1,a1)            = d2iaia(i,a,i1,a1)
           t2iaia(i,a,i1,a1)           += e3iaia(i,a,i1,a1)
           t2iaia(i,a,i1,a1)           *= c3
           tiaia(i,a,i1,a1)            += t2iaia(i,a,i1,a1)
#
           PREPARE L2old_aa(i,a,i1,a1)      = tiaia(i,a,i1,a1)
#
     ENDPARDO a, i, a1, i1
#
#    Form L2old_bb. 
#    -------------- 
#
     PARDO b, j, b1, j1
#
#          REQUEST/GET amplitude data from all 3 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST D0jbjb(j,b,j1,b1) b # kiter-3 amplitudes
           REQUEST D1jbjb(j,b,j1,b1) b # kiter-2 amplitudes
           REQUEST D2jbjb(j,b,j1,b1) b # kiter-1 amplitudes
#
           REQUEST e1jbjb(j,b,j1,b1) b # kiter-2 amplitudes
           REQUEST e2jbjb(j,b,j1,b1) b # kiter-1 amplitudes
           REQUEST e3jbjb(j,b,j1,b1) b # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> T2old_bb.
#          ---------------------------------------------------------
#
           t2jbjb(j,b,j1,b1)            = D0jbjb(j,b,j1,b1)  
           t2jbjb(j,b,j1,b1)           += e1jbjb(j,b,j1,b1)
           t2jbjb(j,b,j1,b1)           *= c1
           tjbjb(j,b,j1,b1)             = t2jbjb(j,b,j1,b1)
#
           t2jbjb(j,b,j1,b1)            = D1jbjb(j,b,j1,b1)  
           t2jbjb(j,b,j1,b1)           += e2jbjb(j,b,j1,b1)
           t2jbjb(j,b,j1,b1)           *= c2
           tjbjb(j,b,j1,b1)            += t2jbjb(j,b,j1,b1)
#
           t2jbjb(j,b,j1,b1)            = D2jbjb(j,b,j1,b1)  
           t2jbjb(j,b,j1,b1)           += e3jbjb(j,b,j1,b1)
           t2jbjb(j,b,j1,b1)           *= c3
           tjbjb(j,b,j1,b1)            += t2jbjb(j,b,j1,b1)
#
           PREPARE L2old_bb(j,b,j1,b1)      = tjbjb(j,b,j1,b1)
#
     ENDPARDO b, j, b1, j1
#
#    Form L2old_ab. 
#    -------------- 
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 3 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST D0iajb(i,a,j,b) a # kiter-3 amplitudes
           REQUEST D1iajb(i,a,j,b) a # kiter-2 amplitudes
           REQUEST D2iajb(i,a,j,b) a # kiter-1 amplitudes
#
           REQUEST e1iajb(i,a,j,b) a # kiter-2 amplitudes
           REQUEST e2iajb(i,a,j,b) a # kiter-1 amplitudes
           REQUEST e3iajb(i,a,j,b) a # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> L2old_ab.
#          ---------------------------------------------------------
#
           t2iajb(i,a,j,b)            = d0iajb(i,a,j,b)
           t2iajb(i,a,j,b)           += e1iajb(i,a,j,b)
           t2iajb(i,a,j,b)           *= c1
           tiajb(i,a,j,b)             = t2iajb(i,a,j,b)
#
           t2iajb(i,a,j,b)            = d1iajb(i,a,j,b)
           t2iajb(i,a,j,b)           += e2iajb(i,a,j,b)
           t2iajb(i,a,j,b)           *= c2
           tiajb(i,a,j,b)            += t2iajb(i,a,j,b)
#
           t2iajb(i,a,j,b)            = d2iajb(i,a,j,b)
           t2iajb(i,a,j,b)           += e3iajb(i,a,j,b)
           t2iajb(i,a,j,b)           *= c3
           tiajb(i,a,j,b)            += t2iajb(i,a,j,b)
#
           PREPARE L2old_ab(i,a,j,b)      = tiajb(i,a,j,b)
#
     ENDPARDO a, i, b, j
#
#    Form Lai_old. 
#    ------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 3 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET D0ia(i,a)     # kiter-3 amplitudes  
           GET D1ia(i,a)     # kiter-2 amplitudes  
           GET D2ia(i,a)     # kiter-1 amplitudes  
#
           GET e1ia(i,a)     # kiter-2 amplitudes  
           GET e2ia(i,a)     # kiter-1 amplitudes  
           GET e3ia(i,a)     # kiter-0 amplitudes  
#
#          Compute contributions to updated amplitudes --> lai_old. 
#          --------------------------------------------------------  
# 
           t1ia(i,a)     = d0ia(i,a) 
           t1ia(i,a)    += e1ia(i,a) 
           t1ia(i,a)    *= c1  
           tia(i,a)      = t1ia(i,a) 
# 
           t1ia(i,a)     = d1ia(i,a) 
           t1ia(i,a)    += e2ia(i,a) 
           t1ia(i,a)    *= c2  
           tia(i,a)     += t1ia(i,a) 
# 
           t1ia(i,a)     = d2ia(i,a) 
           t1ia(i,a)    += e3ia(i,a) 
           t1ia(i,a)    *= c3  
           tia(i,a)     += t1ia(i,a) 
#
           PUT L1a_old(i,a) = tia(i,a) 
#
     ENDPARDO a, i  
#
#    Form Lbj_old. 
#    ------------- 
#
     PARDO b, j  
#
#          REQUEST/GET amplitude data from all 3 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET D0jb(j,b)     # kiter-3 amplitudes  
           GET D1jb(j,b)     # kiter-2 amplitudes  
           GET D2jb(j,b)     # kiter-1 amplitudes  
#
           GET e1jb(j,b)     # kiter-2 amplitudes  
           GET e2jb(j,b)     # kiter-1 amplitudes  
           GET e3jb(j,b)     # kiter-0 amplitudes  
#
#          Compute contributions to updated amplitudes --> lbj_old. 
#          --------------------------------------------------------  
# 
           t1jb(j,b)     = d0jb(j,b) 
           t1jb(j,b)    += e1jb(j,b) 
           t1jb(j,b)    *= c1  
           tjb(j,b)      = t1jb(j,b) 
# 
           t1jb(j,b)     = d1jb(j,b) 
           t1jb(j,b)    += e2jb(j,b) 
           t1jb(j,b)    *= c2  
           tjb(j,b)     += t1jb(j,b) 
# 
           t1jb(j,b)     = d2jb(j,b) 
           t1jb(j,b)    += e3jb(j,b) 
           t1jb(j,b)    *= c3  
           tjb(j,b)     += t1jb(j,b) 
# 
           PUT l1b_old(j,b) = tjb(j,b) 
# 
     ENDPARDO b, j 
#
     execute server_barrier 
     execute sip_barrier 
#
     ENDPROC DIIS2  
#    ------------- 
#
# ---------------------------------------------------------------------------------
#
#
# ---------------------------------------------------------------------------------
#
     PROC DIIS3  
#    ---------- 
#
#    Zero out scalars.
#    ----------------- 
#
     CALL ZERO_DSCALAR 
#
     execute server_barrier 
     execute sip_barrier 
#
#    Determine the 'B-matrix'. 
#    ------------------------- 
#
#    Compute contributions due to L2iaia amplitudes. 
#    ----------------------------------------------- 
#
     PARDO a, i, a1, i1
#
#          REQUEST/GET amplitude data from all 4 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1iaia(i,a,i1,a1) a # kiter-3 amplitudes
           REQUEST e2iaia(i,a,i1,a1) a # kiter-2 amplitudes
           REQUEST e3iaia(i,a,i1,a1) a # kiter-1 amplitudes
           REQUEST e4iaia(i,a,i1,a1) a # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,4
#             ---------
#
              etemp = e1iaia(i,a,i1,a1)*e1iaia(i,a,i1,a1)  
              b11   += etemp
#
              etemp = e1iaia(i,a,i1,a1)*e2iaia(i,a,i1,a1)  
              b12   += etemp
#
              etemp = e1iaia(i,a,i1,a1)*e3iaia(i,a,i1,a1)  
              b13   += etemp
#
              etemp = e1iaia(i,a,i1,a1)*e4iaia(i,a,i1,a1)  
              b14   += etemp
#
#             b1x x=2,4
#             ---------
#
              etemp = e2iaia(i,a,i1,a1)*e2iaia(i,a,i1,a1)  
              b22   += etemp
#
              etemp = e2iaia(i,a,i1,a1)*e3iaia(i,a,i1,a1)  
              b23   += etemp
#
              etemp = e2iaia(i,a,i1,a1)*e4iaia(i,a,i1,a1)  
              b24   += etemp
#
#             b1x x=3,4
#             ---------
#
              etemp = e3iaia(i,a,i1,a1)*e3iaia(i,a,i1,a1)  
              b33   += etemp
#
              etemp = e3iaia(i,a,i1,a1)*e4iaia(i,a,i1,a1)  
              b34   += etemp
#
#             b1x x=4,4
#             ---------
#
              etemp = e4iaia(i,a,i1,a1)*e4iaia(i,a,i1,a1)  
              b44   += etemp
#
     ENDPARDO a, i, a1, i1
#
#    Compute contributions due to L2jbjb amplitudes.
#    -----------------------------------------------
#
     PARDO b, j, b1, j1
#
#          REQUEST/GET amplitude data from all 4 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1jbjb(j,b,j1,b1) b # kiter-3 amplitudes
           REQUEST e2jbjb(j,b,j1,b1) b # kiter-2 amplitudes
           REQUEST e3jbjb(j,b,j1,b1) b # kiter-1 amplitudes
           REQUEST e4jbjb(j,b,j1,b1) b # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,4
#             ---------
#
              etemp = e1jbjb(j,b,j1,b1)*e1jbjb(j,b,j1,b1)  
              b11  += etemp
#
              etemp = e1jbjb(j,b,j1,b1)*e2jbjb(j,b,j1,b1)  
              b12  += etemp
#
              etemp = e1jbjb(j,b,j1,b1)*e3jbjb(j,b,j1,b1)  
              b13  += etemp
#
              etemp = e1jbjb(j,b,j1,b1)*e4jbjb(j,b,j1,b1)  
              b14  += etemp
#
#             b1x x=2,4
#             ---------
#
              etemp = e2jbjb(j,b,j1,b1)*e2jbjb(j,b,j1,b1)  
              b22  += etemp
#
              etemp = e2jbjb(j,b,j1,b1)*e3jbjb(j,b,j1,b1)  
              b23  += etemp
#
              etemp = e2jbjb(j,b,j1,b1)*e4jbjb(j,b,j1,b1)  
              b24  += etemp
#
#             b1x x=3,4
#             ---------
#
              etemp = e3jbjb(j,b,j1,b1)*e3jbjb(j,b,j1,b1)  
              b33  += etemp
#
              etemp = e3jbjb(j,b,j1,b1)*e4jbjb(j,b,j1,b1)  
              b34  += etemp
#
#             b1x x=4,4
#             ---------
#
              etemp = e4jbjb(j,b,j1,b1)*e4jbjb(j,b,j1,b1)  
              b44  += etemp
#
     ENDPARDO b, j, b1, j1
#
#    Compute contributions due to L2iajb amplitudes.
#    -----------------------------------------------
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 4 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1iajb(i,a,j,b) a # kiter-3 amplitudes
           REQUEST e2iajb(i,a,j,b) a # kiter-2 amplitudes
           REQUEST e3iajb(i,a,j,b) a # kiter-1 amplitudes
           REQUEST e4iajb(i,a,j,b) a # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,4
#             ---------
#
              etemp = e1iajb(i,a,j,b)*e1iajb(i,a,j,b)  
              etemp *= 4.0
              b11  += etemp
#
              etemp = e1iajb(i,a,j,b)*e2iajb(i,a,j,b)  
              etemp *= 4.0
              b12  += etemp
#
              etemp = e1iajb(i,a,j,b)*e3iajb(i,a,j,b)  
              etemp *= 4.0
              b13  += etemp
#
              etemp = e1iajb(i,a,j,b)*e4iajb(i,a,j,b)  
              etemp *= 4.0
              b14  += etemp
#
#             b1x x=2,4
#             ---------
#
              etemp = e2iajb(i,a,j,b)*e2iajb(i,a,j,b)  
              etemp *= 4.0
              b22  += etemp
#
              etemp = e2iajb(i,a,j,b)*e3iajb(i,a,j,b)  
              etemp *= 4.0
              b23  += etemp
#
              etemp = e2iajb(i,a,j,b)*e4iajb(i,a,j,b)  
              etemp *= 4.0
              b24  += etemp
#
#             b1x x=3,4
#             ---------
#
              etemp = e3iajb(i,a,j,b)*e3iajb(i,a,j,b)  
              etemp *= 4.0
              b33  += etemp
#
              etemp = e3iajb(i,a,j,b)*e4iajb(i,a,j,b)  
              etemp *= 4.0
              b34  += etemp
#
#             b1x x=4,4
#             ---------
#
              etemp = e4iajb(i,a,j,b)*e4iajb(i,a,j,b)  
              etemp *= 4.0
              b44  += etemp
#
     ENDPARDO a, i, b, j
#
#    Compute contributions due to L1ia amplitudes. 
#    --------------------------------------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 4 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET e1ia(i,a)    # kiter-3 amplitudes  
           GET e2ia(i,a)    # kiter-2 amplitudes  
           GET e3ia(i,a)    # kiter-1 amplitudes  
           GET e4ia(i,a)    # kiter-0 amplitudes  
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#             b1x x=1,4 
#             --------- 
#
              etemp = e1ia(i,a)*e1ia(i,a) 
              etemp *= 4.0
              b11  += etemp            
#
              etemp = e1ia(i,a)*e2ia(i,a) 
              etemp *= 4.0
              b12  += etemp            
#
              etemp = e1ia(i,a)*e3ia(i,a) 
              etemp *= 4.0
              b13  += etemp            
#
              etemp = e1ia(i,a)*e4ia(i,a) 
              etemp *= 4.0
              b14  += etemp            
#
#             b1x x=2,4 
#             --------- 
#
              etemp = e2ia(i,a)*e2ia(i,a) 
              etemp *= 4.0
              b22  += etemp            
#
              etemp = e2ia(i,a)*e3ia(i,a) 
              etemp *= 4.0
              b23  += etemp            
#
              etemp = e2ia(i,a)*e4ia(i,a) 
              etemp *= 4.0
              b24  += etemp            
#
#             b1x x=3,4 
#             --------- 
#
              etemp = e3ia(i,a)*e3ia(i,a) 
              etemp *= 4.0
              b33  += etemp            
#
              etemp = e3ia(i,a)*e4ia(i,a) 
              etemp *= 4.0
              b34  += etemp            
#
#             b1x x=4,4 
#             --------- 
#
              etemp = e4ia(i,a)*e4ia(i,a) 
              etemp *= 4.0
              b44  += etemp            
#
     ENDPARDO a, i 
#
#    Compute contributions due to L1jb amplitudes. 
#    --------------------------------------------- 
#
     PARDO b, j  
#
#          REQUEST/GET amplitude data from all 4 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET e1jb(j,b)    # kiter-3 amplitudes  
           GET e2jb(j,b)    # kiter-2 amplitudes  
           GET e3jb(j,b)    # kiter-1 amplitudes  
           GET e4jb(j,b)    # kiter-0 amplitudes  
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#             b1x x=1,4 
#             --------- 
#
              etemp = e1jb(j,b)*e1jb(j,b) 
              etemp *= 4.0
              b11  += etemp            
#
              etemp = e1jb(j,b)*e2jb(j,b) 
              etemp *= 4.0
              b12  += etemp            
#
              etemp = e1jb(j,b)*e3jb(j,b) 
              etemp *= 4.0
              b13  += etemp            
#
              etemp = e1jb(j,b)*e4jb(j,b) 
              etemp *= 4.0
              b14  += etemp            
#
#             b1x x=2,4 
#             --------- 
#
              etemp = e2jb(j,b)*e2jb(j,b) 
              etemp *= 4.0
              b22  += etemp            
#
              etemp = e2jb(j,b)*e3jb(j,b) 
              etemp *= 4.0
              b23  += etemp            
#
              etemp = e2jb(j,b)*e4jb(j,b) 
              etemp *= 4.0
              b24  += etemp            
#
#             b1x x=3,4 
#             --------- 
#
              etemp = e3jb(j,b)*e3jb(j,b) 
              etemp *= 4.0
              b33  += etemp            
#
              etemp = e3jb(j,b)*e4jb(j,b) 
              etemp *= 4.0
              b34  += etemp            
#
#             b1x x=4,4 
#             --------- 
#
              etemp = e4jb(j,b)*e4jb(j,b) 
              etemp *= 4.0
              b44  += etemp            
#
     ENDPARDO b, j 
#
     execute sip_barrier
     execute server_barrier 
#
#    Collectively sum B-matrix elements. 
#    -----------------------------------
#
     collective Tb11 += b11 
     collective Tb12 += b12 
     collective Tb13 += b13 
     collective Tb14 += b14 
     collective Tb22 += b22 
     collective Tb23 += b23 
     collective Tb24 += b24 
     collective Tb33 += b33 
     collective Tb34 += b34 
     collective Tb44 += b44 
#
#    Now the unique elements of the 'B-matrix' have been computed, the array is filled out
#    in the setup_diis. 
#    --------------------------------------------------------------------------------------
#
#    Put the elements of the 'B-matrix', which have been computed as scalars into the  
#    R-matrix. 
#    -------------------------------------------------------------------------------- 
#
     CALL SETUP_DIIS 
#
     execute compute_diis # --> New instruction  
#
     c1 = Tb11 
     c2 = Tb22 
     c3 = Tb33 
     c4 = Tb44 
     execute print_scalar c1 
     execute print_scalar c2 
     execute print_scalar c3 
     execute print_scalar c4 
     execute server_barrier 
     execute sip_barrier 
#
#    Done computing the c-vector. 
#    ---------------------------- 
#
#    Form the updated amplitudes using the c-vector. 
#    -----------------------------------------------  
#
#    Form L2old_aa. 
#    -------------- 
#
     PARDO a, i, a1, i1
#
#          REQUEST/GET amplitude data from all 4 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST d0iaia(i,a,i1,a1) a # kiter-4 amplitudes
           REQUEST d1iaia(i,a,i1,a1) a # kiter-3 amplitudes
           REQUEST d2iaia(i,a,i1,a1) a # kiter-2 amplitudes
           REQUEST d3iaia(i,a,i1,a1) a # kiter-1 amplitudes
#
           REQUEST e1iaia(i,a,i1,a1) a # kiter-3 amplitudes
           REQUEST e2iaia(i,a,i1,a1) a # kiter-2 amplitudes
           REQUEST e3iaia(i,a,i1,a1) a # kiter-1 amplitudes
           REQUEST e4iaia(i,a,i1,a1) a # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> T2old_aa.
#          ---------------------------------------------------------
#
           t2iaia(i,a,i1,a1)            = d0iaia(i,a,i1,a1)
           t2iaia(i,a,i1,a1)           += e1iaia(i,a,i1,a1)
           t2iaia(i,a,i1,a1)           *= c1
           tiaia(i,a,i1,a1)             = t2iaia(i,a,i1,a1)
#
           t2iaia(i,a,i1,a1)            = d1iaia(i,a,i1,a1)
           t2iaia(i,a,i1,a1)           += e2iaia(i,a,i1,a1)
           t2iaia(i,a,i1,a1)           *= c2
           tiaia(i,a,i1,a1)            += t2iaia(i,a,i1,a1)
#
           t2iaia(i,a,i1,a1)            = d2iaia(i,a,i1,a1)
           t2iaia(i,a,i1,a1)           += e3iaia(i,a,i1,a1)
           t2iaia(i,a,i1,a1)           *= c3
           tiaia(i,a,i1,a1)            += t2iaia(i,a,i1,a1)
#
           t2iaia(i,a,i1,a1)            = d3iaia(i,a,i1,a1)
           t2iaia(i,a,i1,a1)           += e4iaia(i,a,i1,a1)
           t2iaia(i,a,i1,a1)           *= c4
           tiaia(i,a,i1,a1)            += t2iaia(i,a,i1,a1)
#
           PREPARE L2old_aa(i,a,i1,a1)      = tiaia(i,a,i1,a1)
#
     ENDPARDO a, i, a1, i1
#
#    Form L2old_bb. 
#    -------------- 
#
     PARDO b, j, b1, j1
#
#          REQUEST/GET amplitude data from all 4 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST D0jbjb(j,b,j1,b1) b # kiter-4 amplitudes
           REQUEST D1jbjb(j,b,j1,b1) b # kiter-3 amplitudes
           REQUEST D2jbjb(j,b,j1,b1) b # kiter-2 amplitudes
           REQUEST D3jbjb(j,b,j1,b1) b # kiter-1 amplitudes
#
           REQUEST e1jbjb(j,b,j1,b1) b # kiter-3 amplitudes
           REQUEST e2jbjb(j,b,j1,b1) b # kiter-2 amplitudes
           REQUEST e3jbjb(j,b,j1,b1) b # kiter-1 amplitudes
           REQUEST e4jbjb(j,b,j1,b1) b # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> T2old_bb.
#          ---------------------------------------------------------
#
           t2jbjb(j,b,j1,b1)            = D0jbjb(j,b,j1,b1)  
           t2jbjb(j,b,j1,b1)           += e1jbjb(j,b,j1,b1)
           t2jbjb(j,b,j1,b1)           *= c1
           tjbjb(j,b,j1,b1)             = t2jbjb(j,b,j1,b1)
#
           t2jbjb(j,b,j1,b1)            = D1jbjb(j,b,j1,b1)  
           t2jbjb(j,b,j1,b1)           += e2jbjb(j,b,j1,b1)
           t2jbjb(j,b,j1,b1)           *= c2
           tjbjb(j,b,j1,b1)            += t2jbjb(j,b,j1,b1)
#
           t2jbjb(j,b,j1,b1)            = D2jbjb(j,b,j1,b1)  
           t2jbjb(j,b,j1,b1)           += e3jbjb(j,b,j1,b1)
           t2jbjb(j,b,j1,b1)           *= c3
           tjbjb(j,b,j1,b1)            += t2jbjb(j,b,j1,b1)
#
           t2jbjb(j,b,j1,b1)            = D3jbjb(j,b,j1,b1)  
           t2jbjb(j,b,j1,b1)           += e4jbjb(j,b,j1,b1)
           t2jbjb(j,b,j1,b1)           *= c4
           tjbjb(j,b,j1,b1)            += t2jbjb(j,b,j1,b1)
#
           PREPARE L2old_bb(j,b,j1,b1)      = tjbjb(j,b,j1,b1)
#
     ENDPARDO b, j, b1, j1
#
#    Form L2old_ab. 
#    -------------- 
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 4 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST D0iajb(i,a,j,b) a # kiter-4 amplitudes
           REQUEST D1iajb(i,a,j,b) a # kiter-3 amplitudes
           REQUEST D2iajb(i,a,j,b) a # kiter-2 amplitudes
           REQUEST D3iajb(i,a,j,b) a # kiter-1 amplitudes
#
           REQUEST e1iajb(i,a,j,b) a # kiter-3 amplitudes
           REQUEST e2iajb(i,a,j,b) a # kiter-2 amplitudes
           REQUEST e3iajb(i,a,j,b) a # kiter-1 amplitudes
           REQUEST e4iajb(i,a,j,b) a # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> L2old_ab.
#          ---------------------------------------------------------
#
           t2iajb(i,a,j,b)            = d0iajb(i,a,j,b)
           t2iajb(i,a,j,b)           += e1iajb(i,a,j,b)
           t2iajb(i,a,j,b)           *= c1
           tiajb(i,a,j,b)             = t2iajb(i,a,j,b)
#
           t2iajb(i,a,j,b)            = d1iajb(i,a,j,b)
           t2iajb(i,a,j,b)           += e2iajb(i,a,j,b)
           t2iajb(i,a,j,b)           *= c2
           tiajb(i,a,j,b)            += t2iajb(i,a,j,b)
#
           t2iajb(i,a,j,b)            = d2iajb(i,a,j,b)
           t2iajb(i,a,j,b)           += e3iajb(i,a,j,b)
           t2iajb(i,a,j,b)           *= c3
           tiajb(i,a,j,b)            += t2iajb(i,a,j,b)
#
           t2iajb(i,a,j,b)            = d3iajb(i,a,j,b)
           t2iajb(i,a,j,b)           += e4iajb(i,a,j,b)
           t2iajb(i,a,j,b)           *= c4
           tiajb(i,a,j,b)            += t2iajb(i,a,j,b)
#
           PREPARE L2old_ab(i,a,j,b)      = tiajb(i,a,j,b)
#
     ENDPARDO a, i, b, j
#
#    Form Lai_old. 
#    ------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 4 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET D0ia(i,a)     # kiter-4 amplitudes  
           GET D1ia(i,a)     # kiter-3 amplitudes  
           GET D2ia(i,a)     # kiter-2 amplitudes  
           GET D3ia(i,a)     # kiter-1 amplitudes  
#
           GET e1ia(i,a)     # kiter-3 amplitudes  
           GET e2ia(i,a)     # kiter-2 amplitudes  
           GET e3ia(i,a)     # kiter-1 amplitudes  
           GET e4ia(i,a)     # kiter-0 amplitudes  
#
#          Compute contributions to updated amplitudes --> lai_old. 
#          --------------------------------------------------------  
# 
           t1ia(i,a)     = d0ia(i,a) 
           t1ia(i,a)    += e1ia(i,a) 
           t1ia(i,a)    *= c1  
           tia(i,a)      = t1ia(i,a) 
# 
           t1ia(i,a)     = d1ia(i,a) 
           t1ia(i,a)    += e2ia(i,a) 
           t1ia(i,a)    *= c2  
           tia(i,a)     += t1ia(i,a) 
# 
           t1ia(i,a)     = d2ia(i,a) 
           t1ia(i,a)    += e3ia(i,a) 
           t1ia(i,a)    *= c3  
           tia(i,a)     += t1ia(i,a) 
# 
           t1ia(i,a)     = d3ia(i,a) 
           t1ia(i,a)    += e4ia(i,a) 
           t1ia(i,a)    *= c4  
           tia(i,a)     += t1ia(i,a) 
#
           PUT L1a_old(i,a) = tia(i,a) 
#
     ENDPARDO a, i  
#
#    Form Lbj_old. 
#    ------------- 
#
     PARDO b, j  
#
#          REQUEST/GET amplitude data from all 4 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET D0jb(j,b)     # kiter-4 amplitudes  
           GET D1jb(j,b)     # kiter-3 amplitudes  
           GET D2jb(j,b)     # kiter-2 amplitudes  
           GET D3jb(j,b)     # kiter-1 amplitudes  
#
           GET e1jb(j,b)     # kiter-3 amplitudes  
           GET e2jb(j,b)     # kiter-2 amplitudes  
           GET e3jb(j,b)     # kiter-1 amplitudes  
           GET e4jb(j,b)     # kiter-0 amplitudes  
#
#          Compute contributions to updated amplitudes --> lbj_old. 
#          --------------------------------------------------------  
# 
           t1jb(j,b)     = d0jb(j,b) 
           t1jb(j,b)    += e1jb(j,b) 
           t1jb(j,b)    *= c1  
           tjb(j,b)      = t1jb(j,b) 
# 
           t1jb(j,b)     = d1jb(j,b) 
           t1jb(j,b)    += e2jb(j,b) 
           t1jb(j,b)    *= c2  
           tjb(j,b)     += t1jb(j,b) 
# 
           t1jb(j,b)     = d2jb(j,b) 
           t1jb(j,b)    += e3jb(j,b) 
           t1jb(j,b)    *= c3  
           tjb(j,b)     += t1jb(j,b) 
# 
           t1jb(j,b)     = d3jb(j,b) 
           t1jb(j,b)    += e4jb(j,b) 
           t1jb(j,b)    *= c4  
           tjb(j,b)     += t1jb(j,b) 
# 
           PUT l1b_old(j,b) = tjb(j,b) 
# 
     ENDPARDO b, j 
#
     execute server_barrier 
     execute sip_barrier 
#
     ENDPROC DIIS3  
#    ------------- 
#
# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
#
     PROC DIIS4  
#    ---------- 
#
#    Zero out scalars.
#    ----------------- 
#
     CALL ZERO_DSCALAR 
#
     execute server_barrier 
     execute sip_barrier 
#
#    Determine the 'B-matrix'. 
#    ------------------------- 
#
#    Compute contributions due to L2iaia amplitudes. 
#    ----------------------------------------------- 
#
     PARDO a, i, a1, i1
#
#          REQUEST/GET amplitude data from all 5 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1iaia(i,a,i1,a1) a # kiter-4 amplitudes
           REQUEST e2iaia(i,a,i1,a1) a # kiter-3 amplitudes
           REQUEST e3iaia(i,a,i1,a1) a # kiter-2 amplitudes
           REQUEST e4iaia(i,a,i1,a1) a # kiter-1 amplitudes
           REQUEST e5iaia(i,a,i1,a1) a # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,5
#             ---------
#
              etemp = e1iaia(i,a,i1,a1)*e1iaia(i,a,i1,a1)  
              b11   += etemp
#
              etemp = e1iaia(i,a,i1,a1)*e2iaia(i,a,i1,a1)  
              b12   += etemp
#
              etemp = e1iaia(i,a,i1,a1)*e3iaia(i,a,i1,a1)  
              b13   += etemp
#
              etemp = e1iaia(i,a,i1,a1)*e4iaia(i,a,i1,a1)  
              b14   += etemp
#
              etemp = e1iaia(i,a,i1,a1)*e5iaia(i,a,i1,a1)  
              b15   += etemp
#
#             b1x x=2,5
#             ---------
#
              etemp = e2iaia(i,a,i1,a1)*e2iaia(i,a,i1,a1)  
              b22   += etemp
#
              etemp = e2iaia(i,a,i1,a1)*e3iaia(i,a,i1,a1)  
              b23   += etemp
#
              etemp = e2iaia(i,a,i1,a1)*e4iaia(i,a,i1,a1)  
              b24   += etemp
#
              etemp = e2iaia(i,a,i1,a1)*e5iaia(i,a,i1,a1)  
              b25   += etemp
#
#             b1x x=3,5
#             ---------
#
              etemp = e3iaia(i,a,i1,a1)*e3iaia(i,a,i1,a1)  
              b33   += etemp
#
              etemp = e3iaia(i,a,i1,a1)*e4iaia(i,a,i1,a1)  
              b34   += etemp
#
              etemp = e3iaia(i,a,i1,a1)*e5iaia(i,a,i1,a1)  
              b35   += etemp
#
#             b1x x=4,5
#             ---------
#
              etemp = e4iaia(i,a,i1,a1)*e4iaia(i,a,i1,a1)  
              b44   += etemp
#
              etemp = e4iaia(i,a,i1,a1)*e5iaia(i,a,i1,a1)  
              b45   += etemp
#
#             b1x x=5,5
#             ---------
#
              etemp = e5iaia(i,a,i1,a1)*e5iaia(i,a,i1,a1)  
              b55   += etemp
#
     ENDPARDO a, i, a1, i1
#
#    Compute contributions due to L2jbjb amplitudes.
#    -----------------------------------------------
#
     PARDO b, j, b1, j1
#
#          REQUEST/GET amplitude data from all 5 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1jbjb(j,b,j1,b1) b # kiter-4 amplitudes
           REQUEST e2jbjb(j,b,j1,b1) b # kiter-3 amplitudes
           REQUEST e3jbjb(j,b,j1,b1) b # kiter-2 amplitudes
           REQUEST e4jbjb(j,b,j1,b1) b # kiter-1 amplitudes
           REQUEST e5jbjb(j,b,j1,b1) b # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,5
#             ---------
#
              etemp = e1jbjb(j,b,j1,b1)*e1jbjb(j,b,j1,b1)  
              b11  += etemp
#
              etemp = e1jbjb(j,b,j1,b1)*e2jbjb(j,b,j1,b1)  
              b12  += etemp
#
              etemp = e1jbjb(j,b,j1,b1)*e3jbjb(j,b,j1,b1)  
              b13  += etemp
#
              etemp = e1jbjb(j,b,j1,b1)*e4jbjb(j,b,j1,b1)  
              b14  += etemp
#
              etemp = e1jbjb(j,b,j1,b1)*e5jbjb(j,b,j1,b1)  
              b15  += etemp
#
#             b1x x=2,5
#             ---------
#
              etemp = e2jbjb(j,b,j1,b1)*e2jbjb(j,b,j1,b1)  
              b22  += etemp
#
              etemp = e2jbjb(j,b,j1,b1)*e3jbjb(j,b,j1,b1)  
              b23  += etemp
#
              etemp = e2jbjb(j,b,j1,b1)*e4jbjb(j,b,j1,b1)  
              b24  += etemp
#
              etemp = e2jbjb(j,b,j1,b1)*e5jbjb(j,b,j1,b1)  
              b25  += etemp
#
#             b1x x=3,5
#             ---------
#
              etemp = e3jbjb(j,b,j1,b1)*e3jbjb(j,b,j1,b1)  
              b33  += etemp
#
              etemp = e3jbjb(j,b,j1,b1)*e4jbjb(j,b,j1,b1)  
              b34  += etemp
#
              etemp = e3jbjb(j,b,j1,b1)*e5jbjb(j,b,j1,b1)  
              b35  += etemp
#
#             b1x x=4,5
#             ---------
#
              etemp = e4jbjb(j,b,j1,b1)*e4jbjb(j,b,j1,b1)  
              b44  += etemp
#
              etemp = e4jbjb(j,b,j1,b1)*e5jbjb(j,b,j1,b1)  
              b45  += etemp
#
#             b1x x=5,5
#             ---------
#
              etemp = e5jbjb(j,b,j1,b1)*e5jbjb(j,b,j1,b1)  
              b55  += etemp
#
     ENDPARDO b, j, b1, j1
#
#    Compute contributions due to L2iajb amplitudes.
#    -----------------------------------------------
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 5 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1iajb(i,a,j,b) a # kiter-4 amplitudes
           REQUEST e2iajb(i,a,j,b) a # kiter-3 amplitudes
           REQUEST e3iajb(i,a,j,b) a # kiter-2 amplitudes
           REQUEST e4iajb(i,a,j,b) a # kiter-1 amplitudes
           REQUEST e5iajb(i,a,j,b) a # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,5
#             ---------
#
              etemp = e1iajb(i,a,j,b)*e1iajb(i,a,j,b)  
              etemp *= 4.0
              b11  += etemp
#
              etemp = e1iajb(i,a,j,b)*e2iajb(i,a,j,b)  
              etemp *= 4.0
              b12  += etemp
#
              etemp = e1iajb(i,a,j,b)*e3iajb(i,a,j,b)  
              etemp *= 4.0
              b13  += etemp
#
              etemp = e1iajb(i,a,j,b)*e4iajb(i,a,j,b)  
              etemp *= 4.0
              b14  += etemp
#
              etemp = e1iajb(i,a,j,b)*e5iajb(i,a,j,b)  
              etemp *= 4.0
              b15  += etemp
#
#             b1x x=2,5
#             ---------
#
              etemp = e2iajb(i,a,j,b)*e2iajb(i,a,j,b)  
              etemp *= 4.0
              b22  += etemp
#
              etemp = e2iajb(i,a,j,b)*e3iajb(i,a,j,b)  
              etemp *= 4.0
              b23  += etemp
#
              etemp = e2iajb(i,a,j,b)*e4iajb(i,a,j,b)  
              etemp *= 4.0
              b24  += etemp
#
              etemp = e2iajb(i,a,j,b)*e5iajb(i,a,j,b)  
              etemp *= 4.0
              b25  += etemp
#
#             b1x x=3,5
#             ---------
#
              etemp = e3iajb(i,a,j,b)*e3iajb(i,a,j,b)  
              etemp *= 4.0
              b33  += etemp
#
              etemp = e3iajb(i,a,j,b)*e4iajb(i,a,j,b)  
              etemp *= 4.0
              b34  += etemp
#
              etemp = e3iajb(i,a,j,b)*e5iajb(i,a,j,b)  
              etemp *= 4.0
              b35  += etemp
#
#             b1x x=4,5
#             ---------
#
              etemp = e4iajb(i,a,j,b)*e4iajb(i,a,j,b)  
              etemp *= 4.0
              b44  += etemp
#
              etemp = e4iajb(i,a,j,b)*e5iajb(i,a,j,b)  
              etemp *= 4.0
              b45  += etemp
#
#             b1x x=5,5
#             ---------
#
              etemp = e5iajb(i,a,j,b)*e5iajb(i,a,j,b)  
              etemp *= 4.0
              b55  += etemp
#
     ENDPARDO a, i, b, j
#
#    Compute contributions due to L1ia amplitudes. 
#    --------------------------------------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 5 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET e1ia(i,a)    # kiter-4 amplitudes  
           GET e2ia(i,a)    # kiter-3 amplitudes  
           GET e3ia(i,a)    # kiter-2 amplitudes  
           GET e4ia(i,a)    # kiter-1 amplitudes  
           GET e5ia(i,a)    # kiter-0 amplitudes  
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#             b1x x=1,5 
#             --------- 
#
              etemp = e1ia(i,a)*e1ia(i,a) 
              etemp *= 4.0
              b11  += etemp            
#
              etemp = e1ia(i,a)*e2ia(i,a) 
              etemp *= 4.0
              b12  += etemp            
#
              etemp = e1ia(i,a)*e3ia(i,a) 
              etemp *= 4.0
              b13  += etemp            
#
              etemp = e1ia(i,a)*e4ia(i,a) 
              etemp *= 4.0
              b14  += etemp            
#
              etemp = e1ia(i,a)*e5ia(i,a) 
              etemp *= 4.0
              b15  += etemp            
#
#             b1x x=2,5 
#             --------- 
#
              etemp = e2ia(i,a)*e2ia(i,a) 
              etemp *= 4.0
              b22  += etemp            
#
              etemp = e2ia(i,a)*e3ia(i,a) 
              etemp *= 4.0
              b23  += etemp            
#
              etemp = e2ia(i,a)*e4ia(i,a) 
              etemp *= 4.0
              b24  += etemp            
#
              etemp = e2ia(i,a)*e5ia(i,a) 
              etemp *= 4.0
              b25  += etemp            
#
#             b1x x=3,5 
#             --------- 
#
              etemp = e3ia(i,a)*e3ia(i,a) 
              etemp *= 4.0
              b33  += etemp            
#
              etemp = e3ia(i,a)*e4ia(i,a) 
              etemp *= 4.0
              b34  += etemp            
#
              etemp = e3ia(i,a)*e5ia(i,a) 
              etemp *= 4.0
              b35  += etemp            
#
#             b1x x=4,5 
#             --------- 
#
              etemp = e4ia(i,a)*e4ia(i,a) 
              etemp *= 4.0
              b44  += etemp            
#
              etemp = e4ia(i,a)*e5ia(i,a) 
              etemp *= 4.0
              b45  += etemp            
#
#             b1x x=5,5 
#             --------- 
#
              etemp = e5ia(i,a)*e5ia(i,a) 
              etemp *= 4.0
              b55  += etemp            
#
     ENDPARDO a, i 
#
#    Compute contributions due to L1jb amplitudes. 
#    --------------------------------------------- 
#
     PARDO b, j  
#
#          REQUEST/GET amplitude data from all 5 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET e1jb(j,b)    # kiter-4 amplitudes  
           GET e2jb(j,b)    # kiter-3 amplitudes  
           GET e3jb(j,b)    # kiter-2 amplitudes  
           GET e4jb(j,b)    # kiter-1 amplitudes  
           GET e5jb(j,b)    # kiter-0 amplitudes  
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#             b1x x=1,5 
#             --------- 
#
              etemp = e1jb(j,b)*e1jb(j,b) 
              etemp *= 4.0
              b11  += etemp            
#
              etemp = e1jb(j,b)*e2jb(j,b) 
              etemp *= 4.0
              b12  += etemp            
#
              etemp = e1jb(j,b)*e3jb(j,b) 
              etemp *= 4.0
              b13  += etemp            
#
              etemp = e1jb(j,b)*e4jb(j,b) 
              etemp *= 4.0
              b14  += etemp            
#
              etemp = e1jb(j,b)*e5jb(j,b) 
              etemp *= 4.0
              b15  += etemp            
#
#             b1x x=2,5 
#             --------- 
#
              etemp = e2jb(j,b)*e2jb(j,b) 
              etemp *= 4.0
              b22  += etemp            
#
              etemp = e2jb(j,b)*e3jb(j,b) 
              etemp *= 4.0
              b23  += etemp            
#
              etemp = e2jb(j,b)*e4jb(j,b) 
              etemp *= 4.0
              b24  += etemp            
#
              etemp = e2jb(j,b)*e5jb(j,b) 
              etemp *= 4.0
              b25  += etemp            
#
#             b1x x=3,5 
#             --------- 
#
              etemp = e3jb(j,b)*e3jb(j,b) 
              etemp *= 4.0
              b33  += etemp            
#
              etemp = e3jb(j,b)*e4jb(j,b) 
              etemp *= 4.0
              b34  += etemp            
#
              etemp = e3jb(j,b)*e5jb(j,b) 
              etemp *= 4.0
              b35  += etemp            
#
#             b1x x=4,5 
#             --------- 
#
              etemp = e4jb(j,b)*e4jb(j,b) 
              etemp *= 4.0
              b44  += etemp            
#
              etemp = e4jb(j,b)*e5jb(j,b) 
              etemp *= 4.0
              b45  += etemp            
#
#             b1x x=5,5 
#             --------- 
#
              etemp = e5jb(j,b)*e5jb(j,b) 
              etemp *= 4.0
              b55  += etemp            
#
     ENDPARDO b, j 
#
     execute sip_barrier
     execute server_barrier 
#
#    Collectively sum B-matrix elements. 
#    -----------------------------------
#
     collective Tb11 += b11 
     collective Tb12 += b12 
     collective Tb13 += b13 
     collective Tb14 += b14 
     collective Tb15 += b15 
     collective Tb22 += b22 
     collective Tb23 += b23 
     collective Tb24 += b24 
     collective Tb25 += b25 
     collective Tb33 += b33 
     collective Tb34 += b34 
     collective Tb35 += b35 
     collective Tb44 += b44 
     collective Tb45 += b45 
     collective Tb55 += b55 
#
#    Now the unique elements of the 'B-matrix' have been computed, the array is filled out
#    in the setup_diis. 
#    --------------------------------------------------------------------------------------
#
#    Put the elements of the 'B-matrix', which have been computed as scalars into the  
#    R-matrix. 
#    -------------------------------------------------------------------------------- 
#
     CALL SETUP_DIIS 
#
     execute compute_diis # --> New instruction  
#
     c1 = Tb11 
     c2 = Tb22 
     c3 = Tb33 
     c4 = Tb44 
     c5 = Tb55 
     execute print_scalar c1 
     execute print_scalar c2 
     execute print_scalar c3 
     execute print_scalar c4 
     execute print_scalar c5 
     execute server_barrier 
     execute sip_barrier 
#
#    Done computing the c-vector. 
#    ---------------------------- 
#
#    Form the updated amplitudes using the c-vector. 
#    -----------------------------------------------  
#
#    Form L2old_aa. 
#    -------------- 
#
     PARDO a, i, a1, i1
#
#          REQUEST/GET amplitude data from all 5 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST d0iaia(i,a,i1,a1) a # kiter-5 amplitudes
           REQUEST d1iaia(i,a,i1,a1) a # kiter-4 amplitudes
           REQUEST d2iaia(i,a,i1,a1) a # kiter-3 amplitudes
           REQUEST d3iaia(i,a,i1,a1) a # kiter-2 amplitudes
           REQUEST d4iaia(i,a,i1,a1) a # kiter-1 amplitudes
#
           REQUEST e1iaia(i,a,i1,a1) a # kiter-4 amplitudes
           REQUEST e2iaia(i,a,i1,a1) a # kiter-3 amplitudes
           REQUEST e3iaia(i,a,i1,a1) a # kiter-2 amplitudes
           REQUEST e4iaia(i,a,i1,a1) a # kiter-1 amplitudes
           REQUEST e5iaia(i,a,i1,a1) a # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> T2old_aa.
#          ---------------------------------------------------------
#
           t2iaia(i,a,i1,a1)            = d0iaia(i,a,i1,a1)
           t2iaia(i,a,i1,a1)           += e1iaia(i,a,i1,a1)
           t2iaia(i,a,i1,a1)           *= c1
           tiaia(i,a,i1,a1)             = t2iaia(i,a,i1,a1)
#
           t2iaia(i,a,i1,a1)            = d1iaia(i,a,i1,a1)
           t2iaia(i,a,i1,a1)           += e2iaia(i,a,i1,a1)
           t2iaia(i,a,i1,a1)           *= c2
           tiaia(i,a,i1,a1)            += t2iaia(i,a,i1,a1)
#
           t2iaia(i,a,i1,a1)            = d2iaia(i,a,i1,a1)
           t2iaia(i,a,i1,a1)           += e3iaia(i,a,i1,a1)
           t2iaia(i,a,i1,a1)           *= c3
           tiaia(i,a,i1,a1)            += t2iaia(i,a,i1,a1)
#
           t2iaia(i,a,i1,a1)            = d3iaia(i,a,i1,a1)
           t2iaia(i,a,i1,a1)           += e4iaia(i,a,i1,a1)
           t2iaia(i,a,i1,a1)           *= c4
           tiaia(i,a,i1,a1)            += t2iaia(i,a,i1,a1)
#
           t2iaia(i,a,i1,a1)            = d4iaia(i,a,i1,a1)
           t2iaia(i,a,i1,a1)           += e5iaia(i,a,i1,a1)
           t2iaia(i,a,i1,a1)           *= c5
           tiaia(i,a,i1,a1)            += t2iaia(i,a,i1,a1)
#
           PREPARE L2old_aa(i,a,i1,a1)      = tiaia(i,a,i1,a1)
#
     ENDPARDO a, i, a1, i1
#
#    Form L2old_bb. 
#    -------------- 
#
     PARDO b, j, b1, j1
#
#          REQUEST/GET amplitude data from all 5 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST D0jbjb(j,b,j1,b1) b # kiter-5 amplitudes
           REQUEST D1jbjb(j,b,j1,b1) b # kiter-4 amplitudes
           REQUEST D2jbjb(j,b,j1,b1) b # kiter-3 amplitudes
           REQUEST D3jbjb(j,b,j1,b1) b # kiter-2 amplitudes
           REQUEST D4jbjb(j,b,j1,b1) b # kiter-1 amplitudes
#
           REQUEST e1jbjb(j,b,j1,b1) b # kiter-4 amplitudes
           REQUEST e2jbjb(j,b,j1,b1) b # kiter-3 amplitudes
           REQUEST e3jbjb(j,b,j1,b1) b # kiter-2 amplitudes
           REQUEST e4jbjb(j,b,j1,b1) b # kiter-1 amplitudes
           REQUEST e5jbjb(j,b,j1,b1) b # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> T2old_bb.
#          ---------------------------------------------------------
#
           t2jbjb(j,b,j1,b1)            = D0jbjb(j,b,j1,b1)  
           t2jbjb(j,b,j1,b1)           += e1jbjb(j,b,j1,b1)
           t2jbjb(j,b,j1,b1)           *= c1
           tjbjb(j,b,j1,b1)             = t2jbjb(j,b,j1,b1)
#
           t2jbjb(j,b,j1,b1)            = D1jbjb(j,b,j1,b1)  
           t2jbjb(j,b,j1,b1)           += e2jbjb(j,b,j1,b1)
           t2jbjb(j,b,j1,b1)           *= c2
           tjbjb(j,b,j1,b1)            += t2jbjb(j,b,j1,b1)
#
           t2jbjb(j,b,j1,b1)            = D2jbjb(j,b,j1,b1)  
           t2jbjb(j,b,j1,b1)           += e3jbjb(j,b,j1,b1)
           t2jbjb(j,b,j1,b1)           *= c3
           tjbjb(j,b,j1,b1)            += t2jbjb(j,b,j1,b1)
#
           t2jbjb(j,b,j1,b1)            = D3jbjb(j,b,j1,b1)  
           t2jbjb(j,b,j1,b1)           += e4jbjb(j,b,j1,b1)
           t2jbjb(j,b,j1,b1)           *= c4
           tjbjb(j,b,j1,b1)            += t2jbjb(j,b,j1,b1)
#
           t2jbjb(j,b,j1,b1)            = D4jbjb(j,b,j1,b1)  
           t2jbjb(j,b,j1,b1)           += e5jbjb(j,b,j1,b1)
           t2jbjb(j,b,j1,b1)           *= c5
           tjbjb(j,b,j1,b1)            += t2jbjb(j,b,j1,b1)
#
           PREPARE L2old_bb(j,b,j1,b1)      = tjbjb(j,b,j1,b1)
#
     ENDPARDO b, j, b1, j1
#
#    Form L2old_ab. 
#    -------------- 
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 5 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST D0iajb(i,a,j,b) a # kiter-5 amplitudes
           REQUEST D1iajb(i,a,j,b) a # kiter-4 amplitudes
           REQUEST D2iajb(i,a,j,b) a # kiter-3 amplitudes
           REQUEST D3iajb(i,a,j,b) a # kiter-2 amplitudes
           REQUEST D4iajb(i,a,j,b) a # kiter-1 amplitudes
#
           REQUEST e1iajb(i,a,j,b) a # kiter-4 amplitudes
           REQUEST e2iajb(i,a,j,b) a # kiter-3 amplitudes
           REQUEST e3iajb(i,a,j,b) a # kiter-2 amplitudes
           REQUEST e4iajb(i,a,j,b) a # kiter-1 amplitudes
           REQUEST e5iajb(i,a,j,b) a # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> L2old_ab.
#          ---------------------------------------------------------
#
           t2iajb(i,a,j,b)            = d0iajb(i,a,j,b)
           t2iajb(i,a,j,b)           += e1iajb(i,a,j,b)
           t2iajb(i,a,j,b)           *= c1
           tiajb(i,a,j,b)             = t2iajb(i,a,j,b)
#
           t2iajb(i,a,j,b)            = d1iajb(i,a,j,b)
           t2iajb(i,a,j,b)           += e2iajb(i,a,j,b)
           t2iajb(i,a,j,b)           *= c2
           tiajb(i,a,j,b)            += t2iajb(i,a,j,b)
#
           t2iajb(i,a,j,b)            = d2iajb(i,a,j,b)
           t2iajb(i,a,j,b)           += e3iajb(i,a,j,b)
           t2iajb(i,a,j,b)           *= c3
           tiajb(i,a,j,b)            += t2iajb(i,a,j,b)
#
           t2iajb(i,a,j,b)            = d3iajb(i,a,j,b)
           t2iajb(i,a,j,b)           += e4iajb(i,a,j,b)
           t2iajb(i,a,j,b)           *= c4
           tiajb(i,a,j,b)            += t2iajb(i,a,j,b)
#
           t2iajb(i,a,j,b)            = d4iajb(i,a,j,b)
           t2iajb(i,a,j,b)           += e5iajb(i,a,j,b)
           t2iajb(i,a,j,b)           *= c5
           tiajb(i,a,j,b)            += t2iajb(i,a,j,b)
#
           PREPARE L2old_ab(i,a,j,b)      = tiajb(i,a,j,b)
#
     ENDPARDO a, i, b, j
#
#    Form Lai_old. 
#    ------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 5 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET D0ia(i,a)     # kiter-5 amplitudes  
           GET D1ia(i,a)     # kiter-4 amplitudes  
           GET D2ia(i,a)     # kiter-3 amplitudes  
           GET D3ia(i,a)     # kiter-2 amplitudes  
           GET D4ia(i,a)     # kiter-1 amplitudes  
#
           GET e1ia(i,a)     # kiter-4 amplitudes  
           GET e2ia(i,a)     # kiter-3 amplitudes  
           GET e3ia(i,a)     # kiter-2 amplitudes  
           GET e4ia(i,a)     # kiter-1 amplitudes  
           GET e5ia(i,a)     # kiter-0 amplitudes  
#
#          Compute contributions to updated amplitudes --> lai_old. 
#          --------------------------------------------------------  
# 
           t1ia(i,a)     = d0ia(i,a) 
           t1ia(i,a)    += e1ia(i,a) 
           t1ia(i,a)    *= c1  
           tia(i,a)      = t1ia(i,a) 
# 
           t1ia(i,a)     = d1ia(i,a) 
           t1ia(i,a)    += e2ia(i,a) 
           t1ia(i,a)    *= c2  
           tia(i,a)     += t1ia(i,a) 
# 
           t1ia(i,a)     = d2ia(i,a) 
           t1ia(i,a)    += e3ia(i,a) 
           t1ia(i,a)    *= c3  
           tia(i,a)     += t1ia(i,a) 
# 
           t1ia(i,a)     = d3ia(i,a) 
           t1ia(i,a)    += e4ia(i,a) 
           t1ia(i,a)    *= c4  
           tia(i,a)     += t1ia(i,a) 
# 
           t1ia(i,a)     = d4ia(i,a) 
           t1ia(i,a)    += e5ia(i,a) 
           t1ia(i,a)    *= c5  
           tia(i,a)     += t1ia(i,a) 
#
           PUT L1a_old(i,a) = tia(i,a) 
#
     ENDPARDO a, i  
#
#    Form Lbj_old. 
#    ------------- 
#
     PARDO b, j  
#
#          REQUEST/GET amplitude data from all 5 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET D0jb(j,b)     # kiter-5 amplitudes  
           GET D1jb(j,b)     # kiter-4 amplitudes  
           GET D2jb(j,b)     # kiter-3 amplitudes  
           GET D3jb(j,b)     # kiter-2 amplitudes  
           GET D4jb(j,b)     # kiter-1 amplitudes  
#
           GET e1jb(j,b)     # kiter-4 amplitudes  
           GET e2jb(j,b)     # kiter-3 amplitudes  
           GET e3jb(j,b)     # kiter-2 amplitudes  
           GET e4jb(j,b)     # kiter-1 amplitudes  
           GET e5jb(j,b)     # kiter-0 amplitudes  
#
#          Compute contributions to updated amplitudes --> lbj_old. 
#          --------------------------------------------------------  
# 
           t1jb(j,b)     = d0jb(j,b) 
           t1jb(j,b)    += e1jb(j,b) 
           t1jb(j,b)    *= c1  
           tjb(j,b)      = t1jb(j,b) 
# 
           t1jb(j,b)     = d1jb(j,b) 
           t1jb(j,b)    += e2jb(j,b) 
           t1jb(j,b)    *= c2  
           tjb(j,b)     += t1jb(j,b) 
# 
           t1jb(j,b)     = d2jb(j,b) 
           t1jb(j,b)    += e3jb(j,b) 
           t1jb(j,b)    *= c3  
           tjb(j,b)     += t1jb(j,b) 
# 
           t1jb(j,b)     = d3jb(j,b) 
           t1jb(j,b)    += e4jb(j,b) 
           t1jb(j,b)    *= c4  
           tjb(j,b)     += t1jb(j,b) 
# 
           t1jb(j,b)     = d4jb(j,b) 
           t1jb(j,b)    += e5jb(j,b) 
           t1jb(j,b)    *= c5  
           tjb(j,b)     += t1jb(j,b) 
# 
           PUT l1b_old(j,b) = tjb(j,b) 
# 
     ENDPARDO b, j 
#
     execute server_barrier 
     execute sip_barrier 
#
     ENDPROC DIIS4  
#    ------------- 
#
# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
#
     PROC MOVE4
#    ----------
#
#    1 --> 0
#    ---------------------------------------------------
#
     execute server_barrier
     execute array_copy d1iaia d0iaia
     execute array_copy d1jbjb d0jbjb
     execute array_copy d1iajb d0iajb
#
#
#    2 --> 1
#    ---------------------------------------------------
#
     execute array_copy e2iaia e1iaia
     execute array_copy e2jbjb e1jbjb
     execute array_copy e2iajb e1iajb
     execute array_copy d2iaia d1iaia
     execute array_copy d2jbjb d1jbjb
     execute array_copy d2iajb d1iajb
#
#    3 --> 2
#    ---------------------------------------------------
#
     execute array_copy e3iaia e2iaia
     execute array_copy e3jbjb e2jbjb
     execute array_copy e3iajb e2iajb
     execute array_copy d3iaia d2iaia
     execute array_copy d3jbjb d2jbjb
     execute array_copy d3iajb d2iajb
#
#
#    4 --> 3
#    ---------------------------------------------------
#
     execute array_copy e4iaia e3iaia
     execute array_copy e4jbjb e3jbjb
     execute array_copy e4iajb e3iajb
     execute array_copy d4iaia d3iaia
     execute array_copy d4jbjb d3jbjb
     execute array_copy d4iajb d3iajb
#
#
#
#    5 --> 4
#    ---------------------------------------------------
#
     execute array_copy e5iaia e4iaia
     execute array_copy e5jbjb e4jbjb
     execute array_copy e5iajb e4iajb
#
#   Now copy the distributed data.
#
     execute sip_barrier
#
     PARDO a, i
           GET d1ia(i,a)
           PUT d0ia(i,a) = d1ia(i,a)
     ENDPARDO a, i
#
     PARDO b, j
           GET d1jb(j,b)
           PUT d0jb(j,b) = d1jb(j,b)
     ENDPARDO b, j
#
     PARDO a, i
           GET e2ia(i,a)
           PUT e1ia(i,a) = e2ia(i,a)
     ENDPARDO a, i
#
     PARDO b, j
           GET e2jb(j,b)
           PUT e1jb(j,b) = e2jb(j,b)
     ENDPARDO b, j
#
     execute sip_barrier
#
     PARDO a, i
           GET d2ia(i,a)
           PUT d1ia(i,a) = d2ia(i,a)
     ENDPARDO a, i
#
     PARDO b, j
           GET d2jb(j,b)
           PUT d1jb(j,b) = d2jb(j,b)
     ENDPARDO b, j
#
     PARDO a, i
           GET e3ia(i,a)
           PUT e2ia(i,a) = e3ia(i,a)
     ENDPARDO a, i
#
     PARDO b, j
           GET e3jb(j,b)
           PUT e2jb(j,b) = e3jb(j,b)
     ENDPARDO b, j
#
     execute sip_barrier
#
     PARDO a, i
           GET d3ia(i,a)
           PUT d2ia(i,a) = d3ia(i,a)
     ENDPARDO a, i
#
     PARDO b, j
           GET d3jb(j,b)
           PUT d2jb(j,b) = d3jb(j,b)
     ENDPARDO b, j
#
     PARDO a, i
           GET e4ia(i,a)
           PUT e3ia(i,a) = e4ia(i,a)
     ENDPARDO a, i
#
     PARDO b, j
           GET e4jb(j,b)
           PUT e3jb(j,b) = e4jb(j,b)
     ENDPARDO b, j
#
     execute sip_barrier
#
     PARDO a, i
           GET d4ia(i,a)
           PUT d3ia(i,a) = d4ia(i,a)
     ENDPARDO a, i
#
     PARDO b, j
           GET d4jb(j,b)
           PUT d3jb(j,b) = d4jb(j,b)
     ENDPARDO b, j
#
     PARDO a, i
           GET e5ia(i,a)
           PUT e4ia(i,a) = e5ia(i,a)
     ENDPARDO a, i
#
     PARDO b, j
           GET e5jb(j,b)
           PUT e4jb(j,b) = e5jb(j,b)
     ENDPARDO b, j
#
     execute sip_barrier
     execute server_barrier
#
     ENDPROC MOVE4
#    -------------
#
# ---------------------------------------------------------------------------------
#
# 
      PROC LMAIN 
#     ---------- 
#
# Create one-particle intermediate arrays 
# --------------------------------------- 
      CALL CREAT1INTER  
#
# Compute Tau and Taup arrays 
# --------------------------- 
      CALL TAU 
      execute server_barrier  
#
# Compute permanent Intermediates 
# ------------------------------------- 
# 
      CALL FME 
      execute sip_barrier 
      CALL F1AE 
      CALL F1MI  
      execute sip_barrier 
#
      CALL W1MINJ 
      CALL W2MEBJ   
      execute server_barrier 
      execute sip_barrier 
#
      CALL W1IMEN 
      CALL W1MEBJ_S  
      CALL W1EAFM_S  
#
# Done computing permanent Intermediates 
# -------------------------------------- 
#
# Start Iterations 
# ---------------- 
#
      CALL CREATLAMBDAOLD # creates one-particle lambda arrays 
      execute sip_barrier 
#
# Create initial guess
# --------------------
#
      CALL LIGUESS
      execute server_barrier 
      CALL LOLDENERGY
      execute server_barrier 
      eold = ecorrT 
#
      DO kiter 
#
         CALL CREATLAMBDANEW # creates one-particle lambda arrays 
#
# Zero-out new amplitudes 
# ----------------------- 
#
         CALL L2ZERO 
         execute sip_barrier 
         execute server_barrier 
# 
# Compute temporary intermediates 
# ------------------------------- 
#
         CALL GAE 
         CALL GMI 
         execute sip_barrier 
#
# Compute New L1 and L2 arrays 
# ---------------------------- 
#
         CALL L1ANEW 
         CALL L1BNEW 
         CALL L2NEWAA 
         CALL L2NEWBB 
         CALL L2NEWAB 
         CALL VABCD
         CALL W1EAFM
         CALL W1MEBJ  
         execute sip_barrier 
         execute server_barrier 
#
# Update arrays 
# ------------- 
#
         CALL UPDATEL1 
         CALL UPDATEL2 
         execute sip_barrier 
         execute server_barrier 
#
         CALL LOLDENERGY
#
#        Check on convergence
#        --------------------
#
         IF ecorrT < eold
            ediff = eold - ecorrT
            IF ediff < ecrit
               exit # kiter
            ENDIF
         ENDIF
#
         IF ecorrT > eold
            ediff = ecorrT - eold
            IF ediff < ecrit
               exit # kiter
            ENDIF
         ENDIF

         if kiter == 2
#
#           Get uptated amplitudes based on DIIS procedure.
#           -----------------------------------------------
#
            CALL DIIS1
#
         endif # kiter == 2
#
         if kiter == 3
#
#           Get uptated amplitudes based on DIIS procedure.
#           -----------------------------------------------
#
            CALL DIIS2
#
         endif # kiter == 3
#
         if kiter == 4
#
#           Get uptated amplitudes based on DIIS procedure.
#           -----------------------------------------------
#
            CALL DIIS3
#
         endif # kiter == 4
#
         if kiter >= 5
#
#           Get uptated amplitudes based on DIIS procedure.
#           -----------------------------------------------
#
            CALL DIIS4
            CALL MOVE4
#
         endif # kiter == 5
#
         CALL MOVEL1
         CALL MOVEL2
#
# Clean up temporary arrays
# -------------------------
#
         execute sip_barrier Gae_a
         CALL CLEANLITER
         execute sip_barrier Fme_a
#
#        Reset eold --> enew
#        -------------------
#
         eold = ecorrT
#
      ENDDO kiter
#
      ENDPROC LMAIN 
#     ------------- 
#
# MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM 
#
# PERFORM INITIALIZATION FOR TESTS  
# --------------------------------  
#
      ecrit = cc_conv  
#     CALL TRAN_UHF_P1 # perform full transformation  
#
# First read in the converged amplitudes
# --------------------------------------
#
      create t1a_old 
      create t1b_old 
      create sai 
      create sbj 
      create Iij_aa
      create Iij_bb
      create Iia_aa
      create Iia_bb
      create Iab_aa
      create Iab_bb
      create Iai_aa
      create Iai_bb
      create Daa 
      create Dbb
      create Dii
      create Djj
      create DDai 
      create DDbj 
#
      CALL READ_2EL 
#
#     COMPUTE LAMBDA AMPLITUDES
#     ------------------------- 
#
      CALL LMAIN 
#
# Write amplitudes to file
# ------------------------
#
      CALL WRITE_2EL 
      execute blocks_to_list t1a_old
      execute blocks_to_list t1b_old
      execute blocks_to_list T2old_aa
      execute blocks_to_list T2old_ab
      execute blocks_to_list T2old_bb
#
      execute blocks_to_list l1a_old
      execute blocks_to_list l1b_old
      execute blocks_to_list L2old_aa
      execute blocks_to_list L2old_ab
      execute blocks_to_list L2old_bb
#
#     One-particle intermediates
#     --------------------------
#
      execute blocks_to_list Iij_aa
      execute blocks_to_list Iij_bb
      execute blocks_to_list Iia_aa
      execute blocks_to_list Iia_bb
      execute blocks_to_list Iab_aa
      execute blocks_to_list Iab_bb
      execute blocks_to_list Iai_aa
      execute blocks_to_list Iai_bb
#
#     Contribution to one-density
#     ---------------------------
#
      execute blocks_to_list Daa
      execute blocks_to_list Dbb
      execute blocks_to_list Dii
      execute blocks_to_list Djj
      execute blocks_to_list DDai
      execute blocks_to_list DDbj
#
#     Two particle density
#     --------------------
#
      execute blocks_to_list                Gaaai
      execute blocks_to_list                Gbbbj
      execute blocks_to_list                Gaabj
      execute blocks_to_list                Gbbai
#
#     Two particle density
#     --------------------
#
     #execute blocks_to_list                Giiia(i1,i2,i3,a)
     #execute blocks_to_list                Gijib(i1,j2,i3,b)
     #execute blocks_to_list                Gjija(j1,i1,j2,a)
     #execute blocks_to_list                Gjjjb(j1,j2,j3,b)
     #execute blocks_to_list                Giiaa(i1,i2,a1,a2)
     #execute blocks_to_list                Gijab(i1,j2,a1,b2)
     #execute blocks_to_list                Gjjbb(j1,j2,b1,b2)
#
      execute write_blocks_to_list
      execute sip_barrier
#
                           ENDSIAL LAMBDA_SV1     
#
# EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE 
#
