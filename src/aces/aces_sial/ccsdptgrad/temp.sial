      SIAL TRY4_GRAD     
#
# Make index definitions 
#
      Index   i      = 1, naocc   
      Index   j      = 1, naocc   
      Index   l      = 1, naocc   
      Index   ib     = 1, nbocc 
      Index   jb     = 1, nbocc 
      Index   kb     = 1, nbocc 
      Index   lb     = 1, nbocc 
      Index   ai     = bavirtorb, eavirtorb
      Index   aj     = bavirtorb, eavirtorb
      Index   bi     = bbvirtorb, ebvirtorb
      Index   bj     = bbvirtorb, ebvirtorb
#
      aoindex mu     = 1, norb 
      aoindex nu     = 1, norb 
      aoindex lambda = 1, norb 
      aoindex sigma  = 1, norb 
#
      moaindex i1= baocc, eaocc
      moaindex i2= baocc, eaocc
      moaindex i3= baocc, eaocc
      moaindex i4= baocc, eaocc
#
      moaindex k= baocc, eaocc
#
      moaindex a = bavirt, eavirt
      moaindex a1= bavirt, eavirt
      moaindex a2= bavirt, eavirt
      moaindex a3= bavirt, eavirt 
      moaindex a4= bavirt, eavirt 
#
      mobindex j1= bbocc, ebocc
      mobindex j2= bbocc, ebocc
      mobindex j3= bbocc, ebocc
      mobindex j4= bbocc, ebocc
#
      mobindex b = bbvirt, ebvirt
      mobindex b1= bbvirt, ebvirt
      mobindex b2= bbvirt, ebvirt
      mobindex b3= bbvirt, ebvirt 
      mobindex b4= bbvirt, ebvirt 
#
      moaindex p = baocc, eavirt  
      moaindex p1= baocc, eavirt  
      moaindex p2= baocc, eavirt  
      moaindex p3= baocc, eavirt  
#
      mobindex q = bbocc, ebvirt  
      mobindex q1= bbocc, ebvirt  
      mobindex q2= bbocc, ebvirt  
      mobindex q3= bbocc, ebvirt  
#
# Declare served arrays which are read from disk  
# 
      served VSaaai(a1,a2,a3,i1)
      served VSpipi(p,i1,p1,i2)
      served VSbbbj(b,b1,b2,j1)
      served VSbjjj(b,j1,j2,j3)
      served Vaaii(a,a1,i1,i2)
      served Viaai(i1,a,a1,i2)
      served VSqjqj(q,j1,q2,j2)
      served Vbbjj(b,b1,j1,j2)
      served Vjbbj(j1,b,b1,j2)
      served Vbbii(b,b1,i1,i2)
      served Vjbii(j1,b,i1,i2)
      served Vbbai(b,b1,a,i1)
      served Vpiqj(p,i1,q,j2)
      served Vaajj(a,a1,j1,j2)
      served Viabj(i1,a,b,j1)
      served Vaabj(a,a1,b,j1)

      served Vaiai(a,i1,a1,i2) 
      served Vbjbj(b,j1,b1,j2) 
      served Vaibj(a,i1,b,j1) 
#
      served T2aiai(a,i1,a1,i2)
      served T2bjbj(b,j1,b1,j2) 
      served T2aibj(a,i1,b,j1) 
#
      served Taaii(a,a1,j,k) 
      served Xaaii(a,a1,j,k) 
      served Tbbjj(b,b1,jb,kb) 
      served Tabij(a,b,i,kb) 
      temp XSaaai(a,a1,a2,i) 
      served XSbbbj(b,b1,b2,ib) 
      served Xbbai(b,b1,a,i) 
      served Xaabj(a,a1,b,kb) 
      distributed XSaiii(a,i,i1,j)  
      distributed YSaiii(a,k,i1,j) 
      distributed XSbjjj(b,ib,j1,jb)  
      distributed XaIjJ(a,i,j1,jb)  
      distributed XiIbJ(i1,i,b,jb)  
#
      temp tpppsps(a2,k,a1,j,a,i)  
      temp tppppss(a,a1,a2,k,i,j)  
#
# Two-particle arrays Sabij used in ccsd(t) gradient 
#
      served saaii(a,a1,i,j) 
      served sabij(a,b,i,jb) 
      served sbbjj(b,b1,ib,jb) 
      served Saiai(a,i1,a1,i2) 
      served Sbjbj(b,j1,b1,j2) 
      served Saibj(a,i1,b,j1) 
#
# Declare distributed arrays 
# 
      distributed Paaai(a,a1,a2) 
      served Saaai(a,a1,a2,i) 
      served Sbbbj(b,b1,b2,ib) 
      served Saabj(a,a1,b,ib) 
      served Sbbai(b,b1,a,i) 
      distributed Paaaj(a,a1,a2) 
      distributed Paaak(a,a1,a2,k) 
      distributed Pbbbi(b,b1,b2,ib)  
      distributed Pbbbj(b,b1,b2,jb)  
      distributed Pbbbk(b,b1,b2,kb)  
      distributed Pbbai(b,b1,a,i) 
      distributed Pbbaj(b,b1,a,j) 
      distributed Paabk(a,a1,b,kb) 
      distributed Paabi(a,a1,b,ib) 
      distributed Paabj(a,a1,b,jb) 
      distributed Pbbak(b,b1,a,k) 
#
      temp Paiii(a,i,i1,j)   
      temp Pbjjj(b,ib,j1,jb)   
      temp PaIjJ(a,i,j1,jb) 
      temp PiIbJ(i1,i,b,jb) 
      temp PaKiI(a,k,i1,j) 
#
      temp taIII(a,k,l,j) 
      temp tIIbJ(l,j,b,kb) 
      temp tbJJJ(b2,kb,lb,jb) 
      temp taIJJ(a,k,lb,jb) 
      temp tbJII(b1,jb,l,k)    
      temp tpIII(p,i,j,l) 
      temp t1pIII(p,i,j,l) 
      temp tpijj(a,i,lb,kb)   
      temp tqJJJ(b,lb,ib,jb)    
      temp t1qJJJ(b,lb,ib,jb)    
      temp tqpJI(b2,a,ib,k)  
      temp tqjpi(b,ib,a,k)     
#
      temp XaJbK(a,j,b,kb) 
      temp X1aJbK(a,j,b,kb) 
      temp X2aJbK(a,j,b,kb) 
      temp XaIbK(a,i,b,kb) 
      temp X1aIbK(a,i,b,kb) 
      temp X2aIbK(a,i,b,kb) 
      temp XaJaI(a,j,a1,i) 
      temp X1aJaI(a,j,a1,i) 
      temp YaibK(a,i1,b,kb) 
      temp Y1aibK(a,i1,b,kb) 
      temp XaIbj(a,i,b,j1) 
      temp X1aIbj(a,i,b,j1) 
      temp XaJbj(a,j,b,j1) 
      temp X1aJbj(a,j,b,j1) 
      temp XaiaI(a,i1,a1,i) 
      temp XaiaJ(a,i1,a1,j) 
#
      distributed DSbbbj(b,b1,b2,ib) 
      distributed DSaiii(a,i1,k,j) 
      distributed DSbjjj(b,j1,ib,jb) 
      distributed DSbbai(b,b1,a,i) 
      distributed DSaabj(a,a1,b,kb) 
      distributed DSaaii(a,a1,j,k) 
      distributed DSbbjj(b,b1,jb,kb) 
      distributed D1abij(a,b,i1,kb) 
      distributed D1aaii(a,a1,i1,i) 
      distributed D1bbjj(b,b1,j1,kb) 
      distributed Dbaji(b,a,jb,k) 
      distributed DbjbS(b,j1,b1,ib) 
      distributed D1bjbS(b,j1,b1,jb) 
      distributed D2bjbS(b,j1,b1,kb) 
      distributed DbSbS(b,jb,b1,ib) 
      distributed D1bSbS(b,ib,b1,kb) 
      distributed D2bSbS(b,jb,b1,kb) 
      distributed EaSbS(a,k,b,ib) 
      distributed E1aSbS(a,k,b,jb) 
      distributed EaibS(a,i1,b,ib) 
      distributed E1aibS(a,i1,b,jb) 
      distributed EaSbj(a,k,b,j1) 
#
      distributed X3ijk(a,a1,a2,k) 
      distributed Y3ijk(a,a1,a2,k) 
      distributed D3ijk(a,a1,a2,k) 
      distributed E3ijk(a,a1,a2,k) 
#
      distributed X3bbb(b,b1,b2) 
      distributed Y3bbb(b,b1,b2) 
      distributed D3bbb(b,b1,b2) 
      distributed E3bbb(b,b1,b2) 
#
      distributed X3aab(a,a1,b2) 
      distributed Y3aab(a,a1,b2) 
      distributed Z3aab(a,a1,b2) 
      distributed D3aab(a,a1,b2) 
      distributed E3aab(a,a1,b2) 
#
      distributed X3bba(b,b1,a2) 
      distributed Y3bba(b,b1,a2) 
      distributed D3bba(b,b1,a2) 
      distributed E3bba(b,b1,a2) 
#
      distributed D1baji(b,a1,j1,i) 
      distributed DSajij(a,j1,j,kb) 
      distributed DSbiji(b,i1,kb,j) 
#
      distributed sai(a,i) 
      distributed sbj(b,kb) 
      temp txai(a,i) 
      temp saai(a,a1,ai) 
      temp siii(i2,i)  
      temp txbj(b,j) 
      temp sbbj(b,bj) 
      temp sjjj(j2,ib)  
      served t1a_old(a,i1) 
      served t1b_old(b,j1) 
      distributed t1ai(a,i) 
      distributed t1bj(b,jb) 

      temp txppp(ai,a1,a2,k)  
      served Spppp(a,a1,a2,k) 
      temp t1xppp(ai,a1,a2,k) 
      served S1pppp(a,a1,a2,k) 
#
# Declare temporary arrays 
#
      temp xa(a) 
      temp tp(p) 
      temp tq(q) 
      temp tI(i) 
      temp tJ(ib) 
      temp xb(b) 
      temp xai(a,i) 
      temp xbj(b,kb) 
      temp Pai(a,i) 
      temp Pbj(b,kb) 
      temp tpp(p,p1) 
      temp t1pp(p,p1) 
      temp t2pp(p,p1) 
      temp tqp(q,p) 
      temp tqq(q,q1) 
      temp t1qq(q,q1) 
      temp t2qq(q,q1) 
#
      temp tppp(p,p1,p2) 
      temp t1ppp(p,p1,p2) 
      temp t2ppp(p,p1,p2) 
      temp t4ppp(p,p1,p2) 
      temp t3ppp(p,p1,p2) 
      temp t5ppp(p,p1,p2) 
      temp taaaiii(a,a1,a2,i,j,k) 
      temp t1aaaiii(a,a1,a2,k,i,j) 
      temp t2aaaiii(a,a1,a2,i,j,k) 
      temp t3aaaiii(a,a1,a2,i,j,k) 
      temp t4aaaiii(a,a1,a2,i,j,k) 
      temp t5aaaiii(a,a1,a2,i,j,k) 
      temp t6aaaiii(a,a1,a2,i,j,k) 
      temp t7aaaiii(a,a1,a2,i,j,k) 
      temp t8aaaiii(a,a1,a2,i,j,k) 
      temp t9aaaiii(a,a1,a2,i,j,k) 

      temp taaapii(a,a1,a2,k,i,j) 
      temp t2aaapii(a,a1,a2,k,i,j) 
      temp t1aaaiip(a,a1,a2,i,j,k) 
#
      temp Fpppp(p,p1,p2,p3) 
      temp F1pppp(p,p1,p2,p3) 
#
      temp ipppp(p,p1,p2,p3) 
      temp i1pppp(p,p1,p2,p3) 
      temp i2pppp(p,p1,p2,p3) 
      temp iqqqq(q,q1,q2,q3) 
      temp i1qqqq(q,q1,q2,q3) 
      temp i2qqqq(q,q1,q2,q3) 
      temp ipqpq(p,q,p1,q1) 
      temp i1pqpq(p,q,p1,q1) 
      temp i2pqpq(p,q,p1,q1) 
      temp iqpqp(q,p,q1,p1) 
      temp i1qpqp(q,p,q1,p1) 
      temp i2qpqp(q,p,q1,p1) 
      temp ippii(a,i1,i,j)    
      temp ipppi(a,i1,i2,i)   
      temp iqqpp(q,q1,p2,p3) 
      temp i1qqpp(b,j1,i2,i3) 
      temp iqqii(b,j1,i,j)  
      temp iqqpi(b,j1,i2,i) 
      temp ippqq(p,p1,q2,q3) 
      temp i1ppqq(p,p1,q2,q3) 
      temp ippqj(a,i1,j2,kb)   
      temp ippjj(a,i1,jb,kb) 
      temp iqqjj(b,j1,jb,kb)  
      temp iqqqj(b,j1,j2,kb)  
#
      temp tpppp(p,p1,p2,p3) 
      temp t1pppp(p,p1,p2,p3) 
      temp t2pppp(p,p1,p2,p3) 
      temp t3pppp(p,p1,p2,p3) 
      temp t4pppp(p,p1,p2,p3) 
      temp t5pppp(p,p1,p2,p3) 
#
      temp tppps(p,p1,p2,i) 
      temp t1ppps(p,p1,p2,i) 
      temp t2ppps(p,p1,p2,j) 
      temp t3ppps(p,p1,p2,k) 
      temp tpsps(p,j,p2,i) 
      temp t1psps(p,j,p2,i) 
      temp t2psps(p,j,p2,i) 
#
      temp t1pspp(a,i,a1,k) 
      temp t2pspp(a,j,a1,k) 
#
      temp tpsqq(a,i,b,j1) 
      temp t1psqq(a,j,b,j1) 
#
      temp tpsqs(a,i,b,kb) 
      temp t1psqs(a,j,b,kb) 
#
      temp Fqqqq(q,q1,q2,q3) 
      temp F1qqqq(q,q1,q2,q3) 
#
      temp tqqqq(q,q1,q2,ib) 
      temp tqqqs(q,q1,q2,ib) 
      temp tqSqS(b,jb,b1,ib) 
      temp t1qSqS(b,jb,b1,ib) 
#
      temp Fpqpq(a,b1,i1,j2) 
      temp F1pqpq(a,b1,i1,j2) 
      temp Fppqq(p,p1,q,q1) 
      temp F1ppqq(p,p1,q,q1) 
#
      temp Fqqpp(q,q1,p,p1)  
      temp F1qqpp(q,q1,p,p1)  
#
      temp tqqps(b,b1,a,i) 
      temp tppqs(p,p1,q,kb) 
      temp t1ppqs(p,p1,q,kb) 
#
      temp tqqq(q,q1,q2) 
      temp t1qqq(q,q1,q2) 
      temp t2qqq(q,q1,q2) 
      temp t3qqq(q,q1,q2) 
      temp t4qqq(q,q1,q2) 
      temp t5qqq(q,q1,q2) 
#
      temp tppq(p,p1,q) 
      temp t1ppq(p,p1,q) 
      temp t2ppq(p,p1,q) 
      temp t3ppq(p,p1,q,i,j,kb) 
      temp t4qqp(q,q1,p,ib,jb,k) 

      temp tqqp(q,q1,p) 
      temp t1qqp(q,q1,p) 
      temp t2qqp(q,q1,p) 
      temp t3qqp(q,q1,p) 
      temp tqpp(q,p,p1) 
      temp t1qpp(q,p,p1) 
      temp t2qpp(q,p,p1) 
      temp tqpq(b,a1,j1)      
      temp tpqp(a1,b,i1)  
      temp tpqq(p,q,q1)  
      temp t1pqq(p,q,q1)  
      temp t2pqq(p,q,q1)  
#
      temp tpppi(p,p1,p2,i) 
      temp t2pppi(p,p1,p2,i) 
      temp t3pppi(p,p1,p2,i) 
      temp tppii(p,p1,i,j) 
      temp t1ppii(p,p1,i,j) 
      temp Sppii(p,p1,i,j) 
      temp S1ppii(p,p1,i,j) 
      temp tpipi(p,i,p1,j) 
      temp t1pipi(p,k,p1,j) 
      temp t2pipi(p,i,p1,k) 
      temp t3pipi(p,k,p1,j) 
      temp t4pipi(p,i,p1,j) 
      temp t5pipi(p,i,p1,j) 
      temp Y1pipi(p,i,p1,j) 
      temp Y2pipi(p,i,p1,j) 
      temp Y3pipi(p,i,p1,j) 
      temp Y4pipi(p,i,p1,j) 
      temp Y5pipi(p,i,p1,j) 
      temp Y6pipi(p,i,p1,j) 
      temp Y7pipi(p,i,p1,j) 
      temp Y8pipi(p,i,p1,j) 
      temp Y9pipi(p,i,p1,j) 
#
      temp X1pipi(p,i1,p1,i) 
      temp X2pipi(p,i1,p1,i) 
      temp X3pipi(p,i1,p1,i) 
      temp X4pipi(p,i1,p1,i) 
      temp X5pipi(p,i1,p1,i) 
      temp X6pipi(p,i1,p1,i) 
      temp X7pipi(p,i1,p1,i) 
      temp X8pipi(p,i1,p1,i) 
      temp X9pipi(p,i1,p1,i) 
      temp t2aiii(a,i1,j,i)   
#
      temp tppqj(p,p1,q,ib) 
      temp tqqpi(q,q1,p,i) 
#
      temp tqqqj(q,q1,q2,ib) 
      temp tqqjj(q,q1,ib,jb) 
      temp Sqqjj(q,q1,ib,jb) 
      temp tqjqj(q,ib,q1,jb) 
      temp t1qjqj(q,ib,q1,jb) 
      temp t2qjqj(q,ib,q1,jb) 
      temp t3qjqj(q,ib,q1,jb) 
      temp t4qjqj(q,ib,q1,jb) 
      temp tqjii(b,kb,l,j)   

      temp taab(a,a1,b1)
      temp t1aab(a,a1,b1)
      temp tbba(b,b1,a2)
      temp t1bba(b,b1,a2)
      temp tpi(p,i) 
      temp t1pi(p,i) 
      temp tpj(p,j) 
      temp tpk(p,k) 
      temp tqi(q,ib) 
      temp tqj(q,jb) 
      temp tqk(q,kb) 
      temp tpqpi(p,q1,p,i)
      temp tpqpj(a,b1,i1,jb) 
      
      temp taiaiai(a,i,a1,j,a2,k) 
      temp taiaiap(a,i,a1,j,a2,k)  
#
# Arrays used in Tbbbjjj computation
#
      temp Tbbbjjj(b,b1,b2,ib,jb,kb) 
      temp tbjbjbj(b,ib,b1,jb,b2,kb)   
      temp t1bbbjjj(b,b1,b2,ib,jb,kb) 
      temp t2bbbjjj(b,b1,b2,jb,ib,kb) 
      temp t3bbbjjj(b,b1,b2,kb,jb,ib) 
      temp t4bbbjjj(b1,b,b2,ib,jb,kb) 
      temp t5bbbjjj(b2,b1,b,ib,jb,kb) 
      temp t6bbbjjj(b1,b,b2,jb,ib,kb) 
      temp t7bbbjjj(b1,b,b2,kb,jb,ib) 
      temp t8bbbjjj(b2,b1,b,jb,ib,kb) 
      temp t9bbbjjj(b2,b1,b,kb,jb,ib) 
      temp t2bjjj(b,j1,kb,jb)  
      temp X1qjqj(b1,j1,b2,ib) 
      temp X2qjqj(b1,j1,b2,ib) 
      temp X3qjqj(b1,j1,b2,ib) 
      temp X4qjqj(b1,j1,b2,ib) 
      temp X5qjqj(b1,j1,b2,ib) 
      temp X6qjqj(b1,j1,b2,ib) 
      temp X7qjqj(b1,j1,b2,ib) 
      temp X8qjqj(b1,j1,b2,ib) 
      temp X9qjqj(b1,j1,b2,ib) 
      temp t1qqjj(b1,b2,j1,ib)
#
# Arrays used in Taabiij computation
#
      temp Dabij(a,b1,j,kb)  
      temp P2aibj(a,j,b,kb) 
      temp P4aibj(a,j,b,kb) 
      temp P5aibj(a,j,b,kb) 
      temp P6aibj(a,j,b,kb) 
      temp P3aibj(a,i,b,jb) 
      temp Tpq(p,q) 
      temp tppqi(a,a1,b,i)
      temp P1bbai(b,b1,a1,i) 
      temp t1aibj(a1,i,b,j1) 
      temp t1ajij(a,j1,j,kb) 
      temp tabji(a1,b,j1,i) 
      temp t1ppqj(a1,a2,b,kb) 
      temp t2ppqj(a1,a2,b,kb) 
      temp taibj(a1,i,b,kb) 
      temp t4aibj(a1,i,b,kb) 
      temp t3aibj(a1,i1,b,kb) 
      temp tpiqj(a,j,b,kb) 
      temp t1piqj(a,j,b,kb) 
      temp t2piqj(a,j,b,kb) 
      temp t3piqj(a,j,b,kb) 
      temp t4piqj(a,j,b,kb) 
      temp t5piqj(a,j,b,kb) 
      temp tbijj(b,i1,j,kb) 
      temp t1qqpi(b,b1,a,k)  
#
      temp t1aabiij(a,a1,b,i,j,kb) 
      temp t2aabiij(a,a1,b,j,i,kb) 
      temp t3aabiij(a1,a,b,i,j,kb) 
      temp t4aabiij(a1,a,b,j,i,kb) 
      temp taiaibj(a,i,a1,j,b,kb) 
      temp taabjii(a,a1,b,kb,i,j) 
      temp t1aabjii(a,a1,b,kb,i,j) 
#
      temp Taabiij(a,a1,b,i,j,kb) 
      temp tbbjaai(b,b1,a,jb,ib,k)
#
# Arrays used in the Tbbajji computation. 
# --------------------------------------- 
#
      temp P1aibj(a,i,b1,ib) 
      temp P2iibj(i1,k,b,jb) 
      temp P1aabj(a,a2,b1,ib)
      temp P1bjbj(b,jb,b2,ib)
      temp P2bjbj(b,jb,b2,ib)
      temp P3bjbj(b,jb,b2,ib)
      temp P4bjbj(b,jb,b2,ib)
      temp P5bjbj(b,jb,b2,ib)
      temp P6bjbj(b,jb,b2,ib)
      temp P7bjbj(b,jb,b2,ib)
      temp P8bjbj(b,jb,b2,ib)
      temp P9bjbj(b,jb,b2,ib)
      temp P1bbbj(b,b2,b1,ib) 
      temp P2bjjj(b,jb,j1,ib) 
      temp P2aijj(a,k,j1,jb) 
#
      temp t2pqij(a2,b,k,jb) 
      temp tqqaj(b,b1,a,ib)  
      temp t2bbji(b,b2,jb,ib)
      temp tqqai(b,b1,a,k) 
      temp t2abij(a,b2,k,jb) 
      temp t2ajij(a,j1,k,jb) 
#
      temp t1bbajji(b,b1,a,ib,jb,k) 
      temp t2bbajji(b,b1,a,jb,ib,k) 
      temp t3bbajji(b1,b,a,ib,jb,k) 
      temp t4bbajji(b1,b,a,jb,ib,k) 
      temp tbjbjai(b,ib,b1,jb,a,k)
      temp tbbaijj(b,b1,a,k,ib,jb) 
      temp tbiji(b,i1,jb,k) 
     #temp tbjjj(b,j1,jb,ib) 
#
      temp Tbbajji(b,b1,a,ib,jb,k) 
      temp tqqa(b,b1,a) 
#
# Arrays used in the sai computation 
# ----------------------------------- 
#
      temp P1aiai(a2,k,a1,j) 
      temp P2aiai(a2,k,a1,j) 
      temp P3aiai(a1,j,a2,i) 
      temp P4aiai(a2,k,a1,j) 
      temp P5aiai(a2,k,a1,j) 
      temp P6aiai(a2,k,a1,j) 
      temp P7aiai(a2,k,a1,j) 
      temp P8aiai(a,j,a2,i) 
      temp P9aiai(a1,j,a,i) 
      temp P10aiai(a1,j,a2,k) 

      temp t1pppi(a,a1,a2,i) 
      temp t2ppii(a1,a2,j,k) 
#
      temp Tabbijj(a,b1,b2,i,jb,kb) 
      temp taibjbj(a,i,b1,jb,b2,kb) 
      temp t1abbijj(a,b1,b2,i,jb,kb) 
      temp t1pqqi(a,b1,b2,i) 
      temp t2qqjj(b1,b2,jb,kb) 
      temp t1ppqi(a,a1,b2,i) 
#
# Arrays used in the sbj computation 
# ----------------------------------- 
#
      temp t1qqqj(b,b1,b2,ib) 
      temp t1qppj(b,a1,a,ib) 
      temp tqqpj(b,b1,a,ib) 
      temp t1qqpj(b,b1,a,ib) 
      temp tpqij(a,b1,i,jb) 
      temp tqpij(b1,a,k,jb) 
#
      temp t1baajii(b,a1,a,ib,j,k) 
#
# Distributed arrays to partially hold amplitudes 
# ------------------------------------------------ 
#
      distributed DaaiS(a,a1,i1,i) 
      distributed D1aaiS(a,a1,i1,j) 
      distributed D2aaiS(a,a1,i1,k) 
      distributed D1aSaS(a,i,a1,k) 
      distributed D2aSaS(a,j,a1,k) 
#
      distributed DaSbj(a,i,b,j1) 
      distributed D1aSbj(a,j,b,j1) 
      distributed DaSbS(a,i,b,kb) 
      distributed D1aSbS(a,j,b,kb) 
      distributed DaibS(a,i1,b,kb) 
#
      distributed Dab(a,b) 
      distributed D1ab(a,b) 
      distributed Daa(a,a1) 
      distributed D1aa(a,a1,k) 
      distributed D2aa(a,a1,k) 
      distributed Eab(a,b) 
      distributed E1ab(a,b) 
      distributed Dbb(b,b1) 
      distributed D1bb(b,b1) 
      distributed D2bb(b,b1) 
#
# Arrays used in sarray preparation 
# --------------------------------- 
#
      static tii(i1,i2) 
      static t1ii(i1,i2) 
      static taa(a1,a2) 
      static t1aa(a1,a2) 
      served Sii(i1,i2) 
      served Saa(a2,a1) 
      distributed IIi(i,i1) 
      distributed IAa(ai,a1) 
      temp IaS(a1,ai) 
      temp ISa(ai,a1) 
      temp PIi(i,i1) 
      static PAa(ai,a1) 
      static P1Aa(ai,a1) 
      temp TPAa(ai,a1) 
      distributed fsai(a,i1) 
      temp tps(a1,aj) 
      temp tqs(b1,bj)  
#
      temp sSaa(ai,a1,a2,k)  
      temp s1Saa(ai,a1,a2,k) 
      temp sSab(ai,a1,b)  
      temp s1Sab(ai,a1,b) 
      temp sbbS(b,b1,ai)  
      temp s1bbS(b,b1,ai)  
      temp tss(ai,aj) 
      temp t1ss(ai,aj) 
      distributed DaS(ai,aj) 
      temp IbS(b,bi)      
      temp sSbb(bi,b1,b2) 
      temp s1Sbb(bi,b1,b2) 
      temp tuu(bi,bj)     
      distributed DbS(bi,bj) 
      temp saaS(a,a1,bi)  
      temp s1aaS(a,a1,bi) 
      temp sSba(bi,b,a)  
      temp s1Sba(bi,b,a) 
#
      static tjj(j1,j2) 
      static t1jj(j1,j2) 
      static tbb(b1,b2) 
      static t1bb(b1,b2) 
      served Sjj(j1,j2) 
      served Sbb(b2,b1) 
      distributed IJj(jb,j1) 
      distributed IBb(bj,b1) 
      temp PJj(jb,j1) 
      static PBb(bj,b1) 
      static P1Bb(bj,b1) 
      temp TPBb(bj,b1) 
      distributed fsbj(b,j1) 
#
# Two-particle density arrays 
# --------------------------- 
#
      served Gaaai(a,a1,a2,i) 
      served Gbbbj(b,b1,b2,jb) 
      served Gaabj(a,a1,b,jb) 
      served Gbbai(b,b1,a,i) 
#
      served SGaaai(a,a1,a2,i1) 
      served SGbbbj(b,b1,b2,j1) 
      served SGaabj(a,a1,b,j1) 
      served SGbbai(b,b1,a,i1) 
      distributed Giiia(i1,i2,i3,a) 
      distributed Gijib(i1,j2,i3,b) 
      distributed Gjija(j1,i1,j2,a)  
      distributed Gjjjb(j1,j2,j3,b)  
      served Giiaa(i1,i2,a1,a2) 
      served Gijab(i1,j2,a1,b2) 
      served Gjjbb(j1,j2,b1,b2) 
#
      served Gaiii(a,i,j,l) 
      served Gbjjj(b,ib,jb,kb) 
      served Gaijj(a,i,jb,kb) 
      served Gbjii(b,ib,j,i) 
      served Gaiai(a,i,a1,j) 
      served Gbjbj(b,ib,b1,jb) 
      served Gaibj(a,i,b,ib) 
#
      distributed Dai(a,i) 
      distributed Dbj(b,ib) 
      distributed Da(a,a1) 
      distributed Db(b,b1) 
      distributed Di(i,j) 
      temp tIJ(i,j) 
      distributed Dj(ib,jb) 
      temp tIJb(ib,jb) 
      distributed Dii(i1,i2) 
      distributed Djj(j1,j2) 
      distributed DDai(a,i1) 
      distributed DDbj(b,j1) 
#
# Arrays used in backtransformation of density and contraction with I' 
# -------------------------------------------------------------------- 
#
      distributed cai(mu,i) 
      distributed cbj(mu,ib) 
      distributed PaaxI(a,a1,lambda,i) 
      distributed PaxxI(a,nu,lambda,i) 
      distributed PxxxI(mu,nu,lambda,i) 
      served GxxxI(mu,nu,lambda,i) 
      served GxxxJ(mu,nu,lambda,ib) 
      distributed Pbbxi(b,b1,lambda,i) 
      distributed PbxxI(b,nu,lambda,i)         
      distributed Paixi(a,j,lambda,i) 
      distributed Pbjxi(b,jb,lambda,i) 
      distributed PbbxJ(b,b1,lambda,ib) 
      distributed PbxxJ(b,nu,lambda,ib) 
      distributed PxxxJ(mu,nu,lambda,ib) 
      distributed Paaxj(a,a1,lambda,ib) 
      distributed Paxxj(a,nu,lambda,ib) 
      distributed Pbjxj(b,jb,lambda,ib)
      distributed Paixj(a,i,lambda,ib)
      temp txi(mu,i) 
      temp t1xi(mu,i) 
      temp txj(mu,ib) 
      temp t1xj(mu,ib) 
      temp taaxi(a,a1,lambda,i) 
      temp taxxi(a,nu,lambda,i) 
      temp txxxi(mu,nu,lambda,i) 
      temp t1xxxi(mu,nu,lambda,i) 
      temp tbbxj(b,b1,lambda,ib) 
      temp tbxxj(b,nu,lambda,ib) 
      temp txxxj(mu,nu,lambda,ib) 
      temp t1xxxj(mu,nu,lambda,ib) 
      temp tbbxI(b,b1,lambda,i)    
      temp tbxxI(b,nu,lambda,i)    
      temp taixi(a,j,lambda,i) 
      temp tbjxi(b,jb,lambda,i)   
      temp taaxj(a,a1,lambda,ib) 
      temp taxxj(a,nu,lambda,ib) 
      temp tbjxj(b,jb,lambda,ib) 
      temp taixj(a,i,lambda,ib) 
      temp Txxxx(mu,nu,lambda,sigma) 
      temp T1xxxx(mu,nu,lambda,sigma) 
      temp dx1(mu,nu,lambda,sigma)
      temp dy1(mu,nu,lambda,sigma)
      temp dz1(mu,nu,lambda,sigma)
      temp dx2(mu,nu,lambda,sigma)
      temp dy2(mu,nu,lambda,sigma)
      temp dz2(mu,nu,lambda,sigma)
      temp dx3(mu,nu,lambda,sigma)
      temp dy3(mu,nu,lambda,sigma)
      temp dz3(mu,nu,lambda,sigma)
      temp dx4(mu,nu,lambda,sigma)
      temp dy4(mu,nu,lambda,sigma)
      temp dz4(mu,nu,lambda,sigma) 
#
# One particle intermediate arrays 
# -------------------------------- 
#
      distributed Iij_aa(i1,i2) 
      distributed Iij_bb(j1,j2) 
      distributed Iia_aa(i1,a)  
      distributed Iia_bb(j1,b)  
      distributed Iab_aa(a,a1)  
      distributed Iab_bb(b,b1)  
      distributed Iai_aa(a,i3) 
      distributed Iai_bb(b,j3) 
#
# Declare scalars 
#
      scalar fact 
      scalar etemp 
      scalar etemp1
      scalar etemp2
      scalar etemp3
      scalar etemp4
      scalar etemp5
      scalar etempa
      scalar esum 
      scalar esum1
      scalar esum2
      scalar esum3
      scalar esum4
      scalar esum5
      scalar esum6
      scalar esuma  
      scalar ecorraaa 
      scalar ecorraab 
      scalar ecorrbba 
      scalar ecorrbbb 
      scalar ecorrsa 
      scalar ecorrsb 
#
# --------------------------------------------------------------------------
#
     PROC READ_BLOCKDATA  
#    -------------------  
#
#   Read BLOCKDATA file.
#
      execute server_barrier
      execute list_to_blocks                VSpipi(p,i1,p1,i2)
      execute list_to_blocks                Vaaii
      execute list_to_blocks                Viaai
      execute list_to_blocks                VSaaai
      execute list_to_blocks                VSqjqj(q,j1,q1,j2)
      execute list_to_blocks                Vbbjj
      execute list_to_blocks                Vjbbj
      execute list_to_blocks                VSbbbj
      execute list_to_blocks                Vbbii
      execute list_to_blocks                Vjbii
      execute list_to_blocks                Vbbai
      execute list_to_blocks                Vpiqj(p,i1,q,j2)
      execute list_to_blocks                Vaajj
      execute list_to_blocks                Viabj
      execute list_to_blocks                Vaabj

      execute list_to_blocks                t1a_old
      execute list_to_blocks                t1b_old
      execute list_to_blocks                T2aiai
      execute list_to_blocks                T2aibj
      execute list_to_blocks                T2bjbj
      execute read_list_to_blocks
      execute server_barrier
#
      etemp = 0.0 
      etemp1= 0.0 
      etemp2= 0.0 
      etemp3= 0.0 
      etemp4= 0.0 
      etemp5= 0.0 
      esuma = 0.0
      esum  = 0.0 
      esum1 = 0.0 
      esum2 = 0.0 
      esum3 = 0.0 
      esum4 = 0.0 
      esum5 = 0.0 
      esum6 = 0.0 
#
     ENDPROC READ_BLOCKDATA  
#    ----------------------  
#
# --------------------------------------------------------------------------
#
     PROC PDATA  
#    ---------- 
#
#    Put the vOoO integrals into a distributed array 
#    ----------------------------------------------- 
#
     create XSaIiI 
     create YSaIiI 
     create XSbJjJ 
     create XaIjJ
     create XiIbJ
     create t1ai 
     create t1bj 
     execute sip_barrier 
     PARDO a, i1, i, j 
           PREQUEST PaIiI(a,i,i1,j) = VSpipi(a,i2,i1,i3) 
           PUT XSaIiI(a,i,i1,j)     = Paiii(a,i,i1,j)
     ENDPARDO a, i1, i, j 
#
     PARDO a, i1, k, j 
           PREQUEST PaKiI(a,k,i1,j) = VSpipi(a,k,i1,i3) 
           PUT YSaIiI(a,k,i1,j)     = Pakii(a,k,i1,j)
     ENDPARDO a, i1, k, j 
#
     PARDO b, j1, ib, jb 
           PREQUEST PbJjJ(b,ib,j1,jb) = VSqjqj(b,j2,j1,j3) 
           PUT XSbJjJ(b,ib,j1,jb)     = Pbjjj(b,ib,j1,jb)
     ENDPARDO b, j1, ib, jb  
#
     PARDO a, j1, i, jb
           PREQUEST PaIjJ(a,i,j1,jb) = Vpiqj(a,i2,j1,j3) 
           PUT XaIjJ(a,i,j1,jb)      = Paijj(a,i,j1,jb)
     ENDPARDO a, j1, i, jb
#
     PARDO b, i1, i, jb  
           PREQUEST PiIbJ(i1,i,b,jb) = Vpiqj(i1,i2,b,j3) 
           PUT XiIbJ(i1,i,b,jb)      = PiIbJ(i1,i,b,jb)
     ENDPARDO b, i1, i, jb
#
#    Put the singles amplitudes into a distributed array t1aI/t1bJ 
#    ------------------------------------------------------------- 
#
     PARDO a, i 
           PREQUEST tpi(a,i) = t1a_old(a,i1)  
           PUT t1ai(a,i)     = tpi(a,i) 
     ENDPARDO a, i 
#
     PARDO b, jb
           PREQUEST tqj(b,jb) = t1b_old(b,j1)  
           PUT t1bj(b,jb)     = tqj(b,jb) 
     ENDPARDO b, jb
#
     execute server_barrier 
#
# --------------------------------------------------------------------------
#
     ENDPROC PDATA  
#    ------------- 
#
# --------------------------------------------------------------------------
#
     PROC T4AAA 
#    ---------- 
#
     DO i # segment size of 1  
#
        create Paaai(*,*,*) 
        create DaaiS(*,*,*,i) 
        execute sip_barrier 
#
        PARDO a, a1, a2 
              tppps(a,a1,a2,i) = 0.0 
              DO i1 
                 REQUEST             VSaaai(a,a1,a2,i1) a  
                 GET                 IIi(i,i1) 
                 t1pppi(a,a1,a2,i) = VSaaai(a,a1,a2,i1)*IIi(i,i1) 
                 tppps(a,a1,a2,i) += t1pppi(a,a1,a2,i) 
              ENDDO i1 
              tppp(a,a1,a2)      = tppps(a,a1,a2,i) 
              PUT Paaai(a,a1,a2) = tppp(a,a1,a2) 
        ENDPARDO a, a1, a2 
#
        PARDO a, a1, i1 
              PREQUEST t1ppps(a,i1,a1,i) = T2aiai(a,i1,a1,i2) 
              tppps(a,a1,i1,i)           = t1ppps(a,i1,a1,i) 
              PUT DaaiS(a,a1,i1,i)       = tppps(a,a1,i1,i) 
        ENDPARDO a, a1, i1 
#
        DO j # segment size of 1  
#
       #IF j >= i 
#
        create Paaaj(*,*,*) 
        create Daa 
        create D1aaiS(*,*,*,j) 
        execute sip_barrier 
#
        PARDO a, a1, a2 
              tppps(a,a1,a2,j) = 0.0 
              DO i1 
                 REQUEST             VSaaai(a,a1,a2,i1) a  
                 GET                 IIi(j,i1) 
                 t1pppi(a,a1,a2,j) = VSaaai(a,a1,a2,i1)*IIi(j,i1) 
                 tppps(a,a1,a2,j) += t1pppi(a,a1,a2,j) 
              ENDDO i1 
              tppp(a,a1,a2)      = tppps(a,a1,a2,j) 
              PUT Paaaj(a,a1,a2) = tppp(a,a1,a2) 
        ENDPARDO a, a1, a2 
#
        PARDO a, a1  
              PREQUEST tpsps(a,j,a1,i) = T2aiai(a,i1,a1,i2) 
              tppii(a,a1,j,i)          = tpsps(a,j,a1,i) 
              tpp(a,a1)                = tppii(a,a1,j,i) 
              PUT Daa(a,a1)            = tpp(a,a1) 
        ENDPARDO a, a1  
        PARDO a, a1, i1 
              PREQUEST t2ppps(a,i1,a1,j) = T2aiai(a,i1,a1,i2) 
              t1ppps(a,a1,i1,j)          = t2ppps(a,i1,a1,j) 
              PUT D1aaiS(a,a1,i1,j)      = t1ppps(a,a1,i1,j) 
        ENDPARDO a, a1, i1 
#
#    alpha/alpha/alpha/ block. 
#    ------------------------- 
#
       DO k 
       #IF k >=j 
#
	   CREATE X3ijk 
	   CREATE Y3ijk 
	   CREATE D3ijk 
	   CREATE E3ijk 
	   create D2aaiS(*,*,*,k)  
	   create D1aa(*,*,k)   
	   create D2aa(*,*,k)   
           create Paaak(*,*,*,k) 
	   execute sip_barrier 

           PARDO a, a1, a2
                 REQUEST                VSaaai(a,a1,a2,k) a
                 PUT Paaak(a,a1,a2,k) = VSaaai(a,a1,a2,k)
           ENDPARDO a, a1, a2
#
           PARDO a, a1, i1   
                 REQUEST                 T2aiai(a,i1,a1,k) a  
                 tpppp(a,a1,i1,k)      = T2aiai(a,i1,a1,k) 
                 PUT D2aaiS(a,a1,i1,k) = tpppp(a,a1,i1,k) 
           ENDPARDO a, a1, i1   
           PARDO a, a1    
                 PREQUEST t1pspp(a,i,a1,k) = T2aiai(a,i1,a1,i2) 
                 tpppi(a,a1,k,i)           = t1pspp(a,i,a1,k) 
                 tppp(a,a1,k)              = tpppi(a,a1,k,i) 
                 PUT D1aa(a,a1,k)          = tppp(a,a1,k) 
           ENDPARDO a, a1    
           PARDO a, a1    
                 PREQUEST t2pspp(a,j,a1,k) = T2aiai(a,i1,a1,i2) 
                 tpppi(a,a1,k,j)           = t2pspp(a,j,a1,k) 
                 tppp(a,a1,k)              = tpppi(a,a1,k,j) 
                 PUT D2aa(a,a1,k)          = tppp(a,a1,k) 
           ENDPARDO a, a1    
           execute sip_barrier  
#
#          Form COMPLETE X3 arrays for the (i,j,k) combination. 
#          ---------------------------------------------------- 
#
           PARDO a, a1, a2   
#
                 WHERE a <= a1 
                 WHERE a1 <= a2 

                 DO i1 
#
                    GET                    DaaiS(a1,a2,i1,i) 
                    GET                    YSaiii(a,k,i1,j) 
# 
                    t2ppp(a,k,i1)        = YSaiii(a,k,i1,j) 
                    t3ppp(a1,a2,i1)      = DaaiS(a1,a2,i1,i) 
                    t4ppp(i1,a,k)        = t2ppp(a,k,i1)
                    t1pppp(a1,a2,a,k)    = t3ppp(a1,a2,i1)*t4ppp(i1,a,k)  
                    tpppp(a,a1,a2,k)     = t1pppp(a1,a2,a,k) 
#
                    PUT X3ijk(a,a1,a2,k) += tpppp(a,a1,a2,k) 
      
                 ENDDO i1 
#
           ENDPARDO a, a1, a2     
#
#          (a--a1) permutation 
#          ------------------- 
#
           PARDO a1, a, a2   
#
                 WHERE a <= a1 
                 WHERE a1 <= a2 

                 DO i1 
#
                    GET                   DaaiS(a,a2,i1,i) 
                    GET                   YSaiii(a1,k,i1,j) 
#
                    t1ppp(a1,k,i1)      = YSaiii(a1,k,i1,j)
                    t3ppp(i1,a1,k)      = t1ppp(a1,k,i1) 
                    t2ppp(a,a2,i1)      = DaaiS(a,a2,i1,i) 
           
                    t1pppp(a,a2,a1,k)   = t2ppp(a,a2,i1)*t3ppp(i1,a1,k)  
                    tpppp(a,a1,a2,k)    = t1pppp(a,a2,a1,k)  
                    tpppp(a,a1,a2,k)   *= -1.0  
#
                    PUT X3ijk(a,a1,a2,k) += tpppp(a,a1,a2,k) 
      
                 ENDDO i1 
#
           ENDPARDO a1, a, a2     
#
#          (a--a2) permutation 
#          ------------------- 
#
           PARDO a2, a1, a   
#
                 WHERE a <= a1 
                 WHERE a1 <= a2 

                 DO i1 
#
                    GET                   DaaiS(a1,a,i1,i) 
                    GET                   YSaiii(a2,k,i1,j) 
#
                    t1ppp(a1,a,i1)      = DaaiS(a1,a,i1,i) 
                    t4ppp(a,a1,i1)      = t1ppp(a1,a,i1) 
                    t2ppp(a2,k,i1)      = YSaiii(a2,k,i1,j) 
                    t3ppp(i1,a2,k)      = t2ppp(a2,k,i1) 
#
                    tpppp(a,a1,a2,k)    = t4ppp(a,a1,i1)*t3ppp(i1,a2,k)  
                    tpppp(a,a1,a2,k)   *= -1.0  
#
                    PUT X3ijk(a,a1,a2,k) += tpppp(a,a1,a2,k) 
      
                 ENDDO i1 
#
           ENDPARDO a2, a1, a     
#
#          (i--j) permutation 
#          ------------------- 
#
           PARDO a, a1, a2 
#
                 WHERE a <= a1 
                 WHERE a1 <= a2 

                 DO i1 
#
                    GET                   D1aaiS(a1,a2,i1,j) 
                    GET                   YSaiii(a,k,i1,i) 
#
                    t1ppp(a1,a2,i1)     = D1aaiS(a1,a2,i1,j) 
                    t2ppp(a,k,i1)       = YSaiii(a,k,i1,i) 
                    t3ppp(i1,a,k)       = t2ppp(a,k,i1) 
#
                    t1pppp(a1,a2,a,k)   = t1ppp(a1,a2,i1)*t3ppp(i1,a,k)  
                    tpppp(a,a1,a2,k)    = t1pppp(a1,a2,a,k) 
                    tpppp(a,a1,a2,k)   *= -1.0  
#
                    PUT X3ijk(a,a1,a2,k) += tpppp(a,a1,a2,k) 
      
                 ENDDO i1 
#
           ENDPARDO a, a1, a2     
#
#          (i--k) permutation 
#          ------------------- 
#
           PARDO a, a1, a2   
#
                 WHERE a <= a1 
                 WHERE a1 <= a2 

                 DO i1 
#
                    GET                   D2aaiS(a1,a2,i1,k)  
                    GET                   XSaiii(a,i,i1,j) 
# 
                    t2aiii(a,i1,i,j)    = XSaiii(a,i,i1,j) 
                    tpp(a,i1)           = t2aiii(a,i1,i,j)
                    t1pppp(a1,a2,a,k)   = D2aaiS(a1,a2,i1,k)*tpp(a,i1)  
                    tpppp(a,a1,a2,k)    = t1pppp(a1,a2,a,k) 
                    tpppp(a,a1,a2,k)   *= -1.0  
#
                    PUT X3ijk(a,a1,a2,k) += tpppp(a,a1,a2,k) 
      
                 ENDDO i1 
#
           ENDPARDO a, a1, a2     
#
#          (a--a1) (i--j) permutation 
#          -------------------------- 
#
           PARDO a1, a, a2   
#
                 WHERE a <= a1 
                 WHERE a1 <= a2 

                 DO i1 
#
                    GET                   D1aaiS(a,a2,i1,j) 
                    GET                   YSaiii(a1,k,i1,i) 
#
                    t1ppp(a,a2,i1)      = D1aaiS(a,a2,i1,j) 
                    t2ppp(a1,k,i1)      = YSaiii(a1,k,i1,i) 
                    t3ppp(i1,a1,k)      = t2ppp(a1,k,i1) 
#
                    t1pppp(a,a2,a1,k)    = t1ppp(a,a2,i1)*t3ppp(i1,a1,k)  
                    tpppp(a,a1,a2,k)     = t1pppp(a,a2,a1,k) 
#
                    PUT X3ijk(a,a1,a2,k) += tpppp(a,a1,a2,k) 
      
                 ENDDO i1 
#
           ENDPARDO a1, a, a2     
#
#          (a--a1) (i--k) permutation 
#          --------------------------- 
#
           PARDO a1, a, a2   
#
                 WHERE a <= a1 
                 WHERE a1 <= a2 

                 DO i1 
#
                    GET                   D2aaiS(a,a2,i1,k) 
                    GET                   XSaiii(a1,i,i1,j) 
#
                    t2aiii(a1,i1,i,j)   = XSaiii(a1,i,i1,j) 
                    tpp(a1,i1)          = t2aiii(a1,i1,i,j)
                    tpppp(a,a1,a2,k)    = D2aaiS(a,a2,i1,k)*tpp(a1,i1)  
#
                    PUT X3ijk(a,a1,a2,k) += tpppp(a,a1,a2,k) 
      
                 ENDDO i1 
#
           ENDPARDO a1, a, a2     
#
#          (a--a2) (i--j) permutation 
#          -------------------------- 
#
           PARDO a2, a1, a   
#
                 WHERE a <= a1 
                 WHERE a1 <= a2 

                 DO i1 
#
                    GET                   D1aaiS(a1,a,i1,j) 
                    GET                   YSaiii(a2,k,i1,i) 
#
                    t1ppp(a1,a,i1)      = D1aaiS(a1,a,i1,j) 
                    t2ppp(a2,k,i1)      = YSaiii(a2,k,i1,i) 
                    t3ppp(i1,a2,k)      = t2ppp(a2,k,i1) 
#
                    t1pppp(a1,a,a2,k)   = t1ppp(a1,a,i1)*t3ppp(i1,a2,k) 
                    tpppp(a,a1,a2,k)    = t1pppp(a1,a,a2,k) 
#
                    PUT X3ijk(a,a1,a2,k) += tpppp(a,a1,a2,k) 
      
                 ENDDO i1 
#
           ENDPARDO a2, a1, a     
#
#          (a--a2) (i--l) permutation 
#          -------------------------- 
#
           PARDO a2, a1, a   
#
                 WHERE a <= a1 
                 WHERE a1 <= a2 

                 DO i1 
#
                    GET                   D2aaiS(a1,a,i1,k) 
                    GET                   XSaiii(a2,i,i1,j) 
#
                    t2aiii(a2,i1,i,j)   = XSaiii(a2,i,i1,j) 
                    tpp(a2,i1)          = t2aiii(a2,i1,i,j)
                    tpppp(a,a1,a2,k)    = D2aaiS(a1,a,i1,k)*tpp(a2,i1)  
#
                    PUT X3ijk(a,a1,a2,k) += tpppp(a,a1,a2,k) 
      
                 ENDDO i1 
#
           ENDPARDO a2, a1, a     
#
#          0 permutation 
#          ------------- 
#
           PARDO a, a2, a1   
#
                 WHERE a <= a1 
                 WHERE a1 <= a2 

                 tpppp(a1,a2,a,k) = 0.0 

                 DO a3 
#
                    GET                   Paaai(a1,a3,a2) 
                    GET                   D2aa(a,a3,k) 

                    t1ppp(a1,a2,a3)     = Paaai(a1,a3,a2)
                    t2ppp(a3,a,k)       = D2aa(a,a3,k) 

                    t1pppp(a1,a2,a,k)   = t1ppp(a1,a2,a3)*t2ppp(a3,a,k)   
                    tpppp(a1,a2,a,k)   += t1pppp(a1,a2,a,k) 

                 ENDDO a3 
#
                 t3pppp(a,a1,a2,k)     = tpppp(a1,a2,a,k) 
                 PUT X3ijk(a,a1,a2,k) += t3pppp(a,a1,a2,k) 
#
           ENDPARDO a, a2, a1   
#
#          (a--a1) permutation 
#          ------------------- 
#
           PARDO a2, a1, a   
#
                 WHERE a <= a1 
                 WHERE a1 <= a2 

                 tpppp(a,a2,a1,k) = 0.0 

                 DO a3 
#
                    GET                   Paaai(a,a3,a2) 
                    GET                   D2aa(a1,a3,k) 

                    t1ppp(a,a2,a3)      = Paaai(a,a3,a2) 
                    t2ppp(a3,a1,k)      = D2aa(a1,a3,k) 
#
                    t1pppp(a,a2,a1,k)   = t1ppp(a,a2,a3)*t2ppp(a3,a1,k)   
                    tpppp(a,a2,a1,k)   += t1pppp(a,a2,a1,k) 

                 ENDDO a3 
#
                 t3pppp(a,a1,a2,k)     = tpppp(a,a2,a1,k) 
                 t3pppp(a,a1,a2,k)    *= -1.0  
                 PUT X3ijk(a,a1,a2,k) += t3pppp(a,a1,a2,k) 
#
           ENDPARDO a2, a1, a   
#
#          (a--a2) permutation 
#          ------------------- 
#
           PARDO a, a1, a2   
#
                 WHERE a <= a1 
                 WHERE a1 <= a2 

                 tpppp(a,a1,a2,k) = 0.0 

                 DO a3 
#
                    GET                     Paaai(a1,a3,a) 
                    GET                     D2aa(a2,a3,k) 

                    t1ppp(a,a1,a3)        = Paaai(a1,a3,a) 
                    t2ppp(a3,a2,k)        = D2aa(a2,a3,k)   
#
                    t1pppp(a,a1,a2,k)     = t1ppp(a,a1,a3)*t2ppp(a3,a2,k)   
                    tpppp(a,a1,a2,k)     += t1pppp(a,a1,a2,k) 

                 ENDDO a3 
#
                 tpppp(a,a1,a2,k)     *= -1.0  
                 PUT X3ijk(a,a1,a2,k) += tpppp(a,a1,a2,k) 
#
           ENDPARDO a, a1, a2   
#
#          (i--j) permutation 
#          ------------------- 
#
           PARDO a2, a1, a   
#
                 WHERE a <= a1 
                 WHERE a1 <= a2 

                 tpppp(a1,a2,a,k) = 0.0 

                 DO a3 
#
                    GET                   Paaaj(a1,a3,a2)  
                    GET                   D1aa(a,a3,k)  

                    t1ppp(a1,a2,a3)     = Paaaj(a1,a3,a2) 
                    t2ppp(a3,a,k)       = D1aa(a,a3,k) 
#
                    t1pppp(a1,a2,a,k)   = t1ppp(a1,a2,a3)*t2ppp(a3,a,k)   
                    tpppp(a1,a2,a,k)   += t1pppp(a1,a2,a,k) 

                 ENDDO a3 

                 t3pppp(a,a1,a2,k)    = tpppp(a1,a2,a,k) 
                 t3pppp(a,a1,a2,k)   *= -1.0  
#
                 PUT X3ijk(a,a1,a2,k) += t3pppp(a,a1,a2,k) 
#
           ENDPARDO a2, a1, a   
#
#          (i--k) permutation 
#          ------------------- 
#
           PARDO a2, a1, a   
#
                 WHERE a <= a1 
                 WHERE a1 <= a2 

                 tpppp(a,a1,a2,k) = 0.0 

                 DO a3 
#
                    GET                   Paaak(a1,a3,a2,k) 
                    GET                   Daa(a,a3)  
#
                    t1pppp(a,a1,a2,k)   = Paaak(a1,a3,a2,k)*Daa(a,a3)   
                    tpppp(a,a1,a2,k)   += t1pppp(a,a1,a2,k) 

                 ENDDO a3 
#
                 tpppp(a,a1,a2,k)     *= -1.0  
                 PUT X3ijk(a,a1,a2,k) += tpppp(a,a1,a2,k) 
#
           ENDPARDO a2, a1, a   
#
#          (a--a1) (i--j) permutation 
#          -------------------------- 
#
           PARDO a2, a1, a   
#
                 WHERE a <= a1 
                 WHERE a1 <= a2 

                 tpppp(a,a2,a1,k) = 0.0 

                 DO a3 
#
                    GET                   Paaaj(a,a3,a2) 
                    GET                   D1aa(a1,a3,k) 

                    t1ppp(a,a2,a3)      = Paaaj(a,a3,a2) 
                    t2ppp(a3,a1,k)      = D1aa(a1,a3,k) 
# 
                    t1pppp(a,a2,a1,k)   = t1ppp(a,a2,a3)*t2ppp(a3,a1,k)   
                    tpppp(a,a2,a1,k)   += t1pppp(a,a2,a1,k) 

                 ENDDO a3 
#
                 t2pppp(a,a1,a2,k)     = tpppp(a,a2,a1,k) 
                 PUT X3ijk(a,a1,a2,k) += t2pppp(a,a1,a2,k) 
#
           ENDPARDO a2, a1, a   
#
#          (a--a1) (i--k) permutation 
#          -------------------------- 
#
           PARDO a, a2, a1   
#
                 WHERE a <= a1 
                 WHERE a1 <= a2 

                 tpppp(a,a1,a2,k) = 0.0 

                 DO a3 
#
                    GET                   Paaak(a,a3,a2,k) 
                    GET                   Daa(a1,a3) 
#
                    t1pppp(a,a1,a2,k)    = Paaak(a,a3,a2,k)*Daa(a1,a3)   
                    tpppp(a,a1,a2,k)    += t1pppp(a,a1,a2,k) 

                 ENDDO a3 
#
                 PUT X3ijk(a,a1,a2,k) += tpppp(a,a1,a2,k) 
#
           ENDPARDO a, a2, a1   
#
#          (a--a2) (i--j) permutation 
#          -------------------------- 
#
           PARDO a, a1, a2   
#
                 WHERE a <= a1 
                 WHERE a1 <= a2 

                 tpppp(a,a1,a2,k) = 0.0 

                 DO a3 
#
                    GET                   Paaaj(a1,a3,a) 
                    GET                   D1aa(a2,a3,k) 

                    t1ppp(a,a1,a3)      = Paaaj(a1,a3,a) 
                    t2ppp(a3,a2,k)      = D1aa(a2,a3,k) 
#
                    t1pppp(a,a1,a2,k)    = t1ppp(a,a1,a3)*t2ppp(a3,a2,k)   
                    tpppp(a,a1,a2,k)    += t1pppp(a,a1,a2,k) 

                 ENDDO a3 
#
                 PUT X3ijk(a,a1,a2,k) += tpppp(a,a1,a2,k) 
#
           ENDPARDO a, a1, a2  
#
#          (a--a2) (i--k) permutation 
#          -------------------------- 
#
           PARDO a2, a, a1   
#
                 WHERE a <= a1 
                 WHERE a1 <= a2 

                 tpppp(a2,a1,a,k) = 0.0 

                 DO a3 
#
                    GET                      Paaak(a1,a3,a,k) 
                    GET                      Daa(a2,a3) 
                    t3pppp(a3,a1,a,k)      = Paaak(a1,a3,a,k) 
#
                   #t1pppp(a1,a,a2,k)      = Paaak(a1,a3,a,k)*Daa(a2,a3)   
                    t1pppp(a2,a1,a,k)      = t3pppp(a3,a1,a,k)*Daa(a2,a3)   
                    tpppp(a2,a1,a,k)      += t1pppp(a2,a1,a,k) 

                 ENDDO a3 
#
                 t2pppp(a,a1,a2,k)     = tpppp(a2,a1,a,k) 
                 PUT X3ijk(a,a1,a2,k) += t2pppp(a,a1,a2,k) 
#
           ENDPARDO a2, a, a1   
#
#      Compute disconnected contribution to the amplitude 
#      -------------------------------------------------- 
#
#          (1) 
#          --- 
#
           PARDO a, a1, a2 
#
                 WHERE a <= a1 
                 WHERE a1 <= a2 
#
                    PREQUEST P1aiai(a2,k,a1,j) = VSpipi(a2,k,a1,i1) 
                    GET                          t1ai(a,i) 
#
                    tpppsps(a2,k,a1,j,a,i)     = P1aiai(a2,k,a1,j)^t1ai(a,i) 
                    tppppss(a,a1,a2,k,i,j)     = tpppsps(a2,k,a1,j,a,i)
                    tpppp(a,a1,a2,k)           = tppppss(a,a1,a2,k,i,j)   
#
                    PUT D3ijk(a,a1,a2,k)      += tpppp(a,a1,a2,k)  
#
           ENDPARDO a, a1, a2 
          #execute sip_barrier 
#
#          (-P_ij) 
#          ------- 
#
           PARDO a, a1, a2 
#
                 WHERE a <= a1 
                 WHERE a1 <= a2 
#
                    PREQUEST P2aiai(a2,k,a1,i) = VSpipi(a2,k,a1,i1) 
                    GET                          t1ai(a,j)     
#
                    tpppsps(a2,k,a1,i,a,j)     = P2aiai(a2,k,a1,i)^t1ai(a,j) 
                    tppppss(a,a1,a2,k,i,j)     = tpppsps(a2,k,a1,i,a,j)
                    tpppp(a,a1,a2,k)           = tppppss(a,a1,a2,k,i,j)   
#
                    tpppp(a,a1,a2,k)          *= -1.0  
                    PUT D3ijk(a,a1,a2,k)      += tpppp(a,a1,a2,k)  
#
           ENDPARDO a, a1, a2 
          #execute sip_barrier 
#
#          (-P_ik) 
#          ------- 
#
           PARDO a, a1, a2 
#
                 WHERE a <= a1 
                 WHERE a1 <= a2 
#
                    PREQUEST P3aiai(a1,j,a2,i) = VSpipi(a1,i1,a2,i2) 
                    REQUEST                      t1a_old(a,k) a   
#
                    tppii(a1,a2,j,i)           = P3aiai(a1,j,a2,i)
                    tpp(a1,a2)                 = tppii(a1,a2,j,i)
#
                    tpppp(a,a1,a2,k)           = tpp(a1,a2)^t1a_old(a,k)
                    tpppp(a,a1,a2,k)          *= -1.0  
                    PUT D3ijk(a,a1,a2,k)      += tpppp(a,a1,a2,k)  
#
           ENDPARDO a, a1, a2 
          #execute sip_barrier 
#
#          (-a<->a1) 
#          --------- 
#
           PARDO a1, a, a2 
#
                 WHERE a <= a1 
                 WHERE a1 <= a2 
#
                    PREQUEST P4aiai(a2,k,a,j) = VSpipi(a2,k,a,i1) 
                    GET                         t1ai(a1,i)   
#
                    tpppsps(a2,k,a,j,a1,i)    = P4aiai(a2,k,a,j)^t1ai(a1,i) 
                    tppppss(a,a1,a2,k,i,j)    = tpppsps(a2,k,a,j,a1,i)
                    tpppp(a,a1,a2,k)          = tppppss(a,a1,a2,k,i,j)   
#
                    tpppp(a,a1,a2,k)         *= -1.0  
                    PUT D3ijk(a,a1,a2,k)     += tpppp(a,a1,a2,k)  
#
           ENDPARDO a1, a, a2 
          #execute sip_barrier 
#
#          (-a<->a2) 
#          --------- 
#
           PARDO a2, a1, a 
#
                 WHERE a <= a1 
                 WHERE a1 <= a2 
#
                    PREQUEST P5aiai(a,k,a1,j) = VSpipi(a,k,a1,i1) 
                    GET                         t1ai(a2,i) 
#
                    tpppsps(a,k,a1,j,a2,i)   = P5aiai(a,k,a1,j)^t1ai(a2,i) 
                    tppppss(a,a1,a2,k,i,j)   = tpppsps(a,k,a1,j,a2,i)
                    tpppp(a,a1,a2,k)         = tppppss(a,a1,a2,k,i,j)   
#
                    tpppp(a,a1,a2,k)        *= -1.0  
                    PUT D3ijk(a,a1,a2,k)    += tpppp(a,a1,a2,k)  
#
           ENDPARDO a2, a1, a 
          #execute sip_barrier 
#
#          (i<-j a<->a1) 
#          ------------- 
#
           PARDO a1, a, a2 
#
                 WHERE a <= a1 
                 WHERE a1 <= a2 
#
                    PREQUEST P6aiai(a2,k,a,i) = VSpipi(a2,k,a,i1) 
                    GET                         t1ai(a1,j)     
#
                    tpppsps(a2,k,a,i,a1,j)    = P6aiai(a2,k,a,i)^t1ai(a1,j) 
                    tppppss(a,a1,a2,k,i,j)    = tpppsps(a2,k,a,i,a1,j)
                    tpppp(a,a1,a2,k)          = tppppss(a,a1,a2,k,i,j)   
#
                    PUT D3ijk(a,a1,a2,k)     += tpppp(a,a1,a2,k)  
#
           ENDPARDO a1, a, a2 
          #execute sip_barrier 
#
#          (i<-j a<->a2) 
#          ------------- 
#
           PARDO a2, a1, a 
#
                 WHERE a <= a1 
                 WHERE a1 <= a2 
#
                    PREQUEST P7aiai(a,k,a1,i) = VSpipi(a,i2,a1,i1) 
                    GET                         t1ai(a2,j)   
#
                    tpppsps(a,k,a1,i,a2,j)    = P7aiai(a,k,a1,i)^t1ai(a2,j) 
                    tppppss(a,a1,a2,k,i,j)    = tpppsps(a,k,a1,i,a2,j)
                    tpppp(a,a1,a2,k)          = tppppss(a,a1,a2,k,i,j)   
#
                    PUT D3ijk(a,a1,a2,k)     += tpppp(a,a1,a2,k)  
#
           ENDPARDO a2, a1, a 
         # execute sip_barrier 
#
#          (i<-k a<->a1) 
#          ------------- 
#
           PARDO a1, a, a2 
#
                 WHERE a <= a1 
                 WHERE a1 <= a2 
#
                    PREQUEST P8aiai(a,j,a2,i) = VSpipi(a,i1,a2,i2) 
                    REQUEST                     t1a_old(a1,k) k   
#
                    tppii(a,a2,j,i)           = P8aiai(a,j,a2,i)
                    tpp(a,a2)                 = tppii(a,a2,j,i)
#
                    tpppp(a,a1,a2,k)          = tpp(a,a2)^t1a_old(a1,k)
                    PUT D3ijk(a,a1,a2,k)     += tpppp(a,a1,a2,k)  
#
           ENDPARDO a1, a, a2 
         # execute sip_barrier 
#
#          (i<-k a<->a2) 
#          ------------- 
#
           PARDO a2, a1, a 
#
                 WHERE a <= a1 
                 WHERE a1 <= a2 
#
                    PREQUEST P9aiai(a1,j,a,i) = VSpipi(a1,i1,a,i2) 
                    REQUEST                     t1a_old(a2,k) k   
#
                    tppii(a1,a,j,i)           = P9aiai(a1,j,a,i)
                    tpp(a1,a)                 = tppii(a1,a,j,i)
#
                    tpppp(a,a1,a2,k)          = tpp(a1,a)^t1a_old(a2,k)
                    PUT D3ijk(a,a1,a2,k)     += tpppp(a,a1,a2,k)  
#
           ENDPARDO a2, a1, a 
#
           execute server_barrier 
#
# Symmetrize amplitude array 
# --------------------------- 
#
           PARDO a, a1, a2  
#
                 WHERE a <= a1 
                 WHERE a1 <= a2 
#
                    GET                      X3ijk(a,a1,a2,k) 
                    t1pppp(a1,a,a2,k)      = X3ijk(a,a1,a2,k) 
                    t2pppp(a2,a1,a,k)      = X3ijk(a,a1,a2,k) 
                    t3pppp(a,a2,a1,k)      = X3ijk(a,a1,a2,k) 
                    t4pppp(a1,a2,a,k)      = X3ijk(a,a1,a2,k) 
                    t5pppp(a2,a,a1,k)      = X3ijk(a,a1,a2,k) 
                    t1pppp(a1,a,a2,k)     *= -1.0 
                    t2pppp(a2,a1,a,k)     *= -1.0 
                    t3pppp(a,a2,a1,k)     *= -1.0  

                    PUT Y3ijk(a,a1,a2,k) = X3ijk(a,a1,a2,k)  
                    PUT Y3ijk(a1,a,a2,k) = t1pppp(a1,a,a2,k)  
                    PUT Y3ijk(a2,a1,a,k) = t2pppp(a2,a1,a,k)  
                    PUT Y3ijk(a,a2,a1,k) = t3pppp(a,a2,a1,k)  
                    PUT Y3ijk(a1,a2,a,k) = t4pppp(a1,a2,a,k)  
                    PUT Y3ijk(a2,a,a1,k) = t5pppp(a2,a,a1,k)  
#
           ENDPARDO a, a1, a2   
#
#          Disconnected part 
#          ----------------- 
#
           PARDO a, a1, a2  
#
                 WHERE a <= a1 
                 WHERE a1 <= a2 
#
                    GET                      D3ijk(a,a1,a2,k) 
                    t1pppp(a1,a,a2,k)      = D3ijk(a,a1,a2,k) 
                    t2pppp(a2,a1,a,k)      = D3ijk(a,a1,a2,k) 
                    t3pppp(a,a2,a1,k)      = D3ijk(a,a1,a2,k) 
                    t4pppp(a1,a2,a,k)      = D3ijk(a,a1,a2,k) 
                    t5pppp(a2,a,a1,k)      = D3ijk(a,a1,a2,k) 
                    t1pppp(a1,a,a2,k)     *= -1.0 
                    t2pppp(a2,a1,a,k)     *= -1.0 
                    t3pppp(a,a2,a1,k)     *= -1.0  

                    PUT E3ijk(a,a1,a2,k) = D3ijk(a,a1,a2,k)  
                    PUT E3ijk(a1,a,a2,k) = t1pppp(a1,a,a2,k)  
                    PUT E3ijk(a2,a1,a,k) = t2pppp(a2,a1,a,k)  
                    PUT E3ijk(a,a2,a1,k) = t3pppp(a,a2,a1,k)  
                    PUT E3ijk(a1,a2,a,k) = t4pppp(a1,a2,a,k)  
                    PUT E3ijk(a2,a,a1,k) = t5pppp(a2,a,a1,k)  
#
           ENDPARDO a, a1, a2   
           execute server_barrier 
           execute sip_barrier 
#
# Form contribution to the energy 
# ------------------------------- 
#
           PARDO a, a1, a2 
#
                 GET                        Y3ijk(a,a1,a2,k) 
                 GET                        E3ijk(a,a1,a2,k) 
#
                 t1aaaiii(a,a1,a2,k,i,j)  = Y3ijk(a,a1,a2,k)
                 taiaiap(a,i,a1,j,a2,k)   = T1aaaiii(a,a1,a2,k,i,j) 
                 execute energy_denominator taiaiap(a,i,a1,j,a2,k)  
                 t2aaapii(a,a1,a2,k,i,j)  = taiaiap(a,i,a1,j,a2,k)  
                 t1pppp(a,a1,a2,k)        = t2aaapii(a,a1,a2,k,i,j) 

                 tpppp(a,a1,a2,k)            = Y3ijk(a,a1,a2,k) 
                 tpppp(a,a1,a2,k)           += E3ijk(a,a1,a2,k) 

                 etemp                    = tpppp(a,a1,a2,k)*t1pppp(a,a1,a2,k)
                 etemp                    = etemp/36.0  
                #etemp*= 6.0  
                 esum1                   += etemp 
#
           ENDPARDO a, a1, a2 
#
# Form contribution to Saaii 
# -------------------------- 
#
           PARDO a, a1, a2  
#
                 GET                        Y3ijk(a,a1,a2,k) 
                 GET                        E3ijk(a,a1,a2,k) 
#
                 tpppp(a,a1,a2,k)         = Y3ijk(a,a1,a2,k) 
                 tpppp(a,a1,a2,k)        *= 2.0  
                 tpppp(a,a1,a2,k)        += E3ijk(a,a1,a2,k)
                 t2aaapii(a,a1,a2,k,i,j)  = tpppp(a,a1,a2,k) 
                 taiaiap(a,i,a1,j,a2,k)   = T2aaapii(a,a1,a2,k,i,j) 
                 execute energy_denominator taiaiap(a,i,a1,j,a2,k)  
                 t2aaapii(a,a1,a2,k,j,i)  = taiaiap(a,i,a1,j,a2,k)  
                 tpppp(a,a1,a2,k)         = t2aaapii(a,a1,a2,k,j,i) 
#
                 DO a3 

                    if i < j 
#
                       GET                        Paaak(a1,a3,a2,k) 
                       t3pppp(a1,a2,k,a3)       = Paaak(a1,a3,a2,k) 
#
                       tpp(a,a3)                = tpppp(a,a1,a2,k)*t3pppp(a1,a2,k,a3) 
                       tpp(a,a3)               *= 0.5 
                       tppii(a,a3,i,j)          = tpp(a,a3) 
                       Sppii(a3,a,i,j)          = tppii(a,a3,i,j) 
                       Sppii(a3,a,i,j)         *= -1.0  

                       PREPARE Saaii(a,a3,i,j) += tppii(a,a3,i,j) 
                       PREPARE Saaii(a3,a,i,j) += Sppii(a3,a,i,j) 

                       t1ppii(a3,a,j,i)         = tppii(a,a3,i,j) 
                       S1ppii(a,a3,j,i)         = Sppii(a3,a,i,j) 
                       PREPARE Saaii(a3,a,j,i) += t1ppii(a3,a,j,i) 
                       PREPARE Saaii(a,a3,j,i) += S1ppii(a,a3,j,i) 

                    endif # i < j 

                    if i == j 
#
                       GET                        Paaak(a1,a3,a2,k) 
                       t3pppp(a1,a2,k,a3)       = Paaak(a1,a3,a2,k) 
#
                       tpp(a,a3)                = tpppp(a,a1,a2,k)*t3pppp(a1,a2,k,a3) 
#
                       tpp(a,a3)               *= 0.5 
                       tppii(a,a3,i,j)          = tpp(a,a3) 
                       Sppii(a3,a,i,j)          = tppii(a,a3,i,j) 
                       Sppii(a3,a,i,j)         *= -1.0  

                       PREPARE Saaii(a,a3,i,j) += tppii(a,a3,i,j) 
                       PREPARE Saaii(a3,a,i,j) += Sppii(a3,a,i,j) 

                    endif # i < j 
#
                 ENDDO a3 
#
                 DO l 

                    if a < a1 
#
                       PREQUEST taIII(a2,k,l,j) = VSpipi(a2,i1,i2,i3)  
#
                       t1pp(a2,k)               = taIII(a2,k,l,j) 
                       tpp(a,a1)                = tpppp(a,a1,a2,k)*t1pp(a2,k)  
                       tpp(a,a1)               *= -0.5 
                       tppii(a,a1,i,l)          = tpp(a,a1) 
                       Sppii(a,a1,l,i)          = tpp(a,a1) 
                       Sppii(a,a1,l,i)         *= -1.0 

                       PREPARE Saaii(a,a1,i,l) += tppii(a,a1,i,l) 
                       PREPARE Saaii(a,a1,l,i) += Sppii(a,a1,l,i) 

                       t1ppii(a1,a,i,l)         = tppii(a,a1,i,l) 
                       s1ppii(a1,a,l,i)         = sppii(a,a1,l,i) 

                       PREPARE Saaii(a1,a,i,l) += t1ppii(a1,a,i,l) 
                       PREPARE Saaii(a1,a,l,i) += S1ppii(a1,a,l,i) 

                    endif # a < a1 

                    if a == a1 
#
                       PREQUEST taIII(a2,k,l,j) = VSpipi(a2,i1,i2,i3)  
#
                       t1pp(a2,k)               = taIII(a2,k,l,j) 
                       tpp(a,a1)                = tpppp(a,a1,a2,k)*t1pp(a2,k)  
                       tpp(a,a1)               *= -0.5 
                       tppii(a,a1,i,l)          = tpp(a,a1) 
                       Sppii(a,a1,l,i)         = tpp(a,a1) 
                       Sppii(a,a1,l,i)        *= -1.0 

                       PREPARE Saaii(a,a1,i,l) += tppii(a,a1,i,l) 
                       PREPARE Saaii(a,a1,l,i) += Sppii(a,a1,l,i) 

                    endif # a == a1 
#
                 ENDDO l 
#
           ENDPARDO a, a1, a2  
#
# Done contribution to Saaii 
# -------------------------- 
#
# Form Contribution to Sai
# ------------------------
#
# Perm 1
# -------
#
           PARDO a, a1, a2
#
                 PREQUEST P10aiai(a1,j,a2,k) = VSpipi(a1,i1,a2,k)
                 GET                           Y3ijk(a,a1,a2,k)

                 t2aaapii(a,a1,a2,k,i,j)   = Y3ijk(a,a1,a2,k)
                 taiaiap(a,i,a1,j,a2,k)    = t2aaapii(a,a1,a2,k,i,j)
                 execute energy_denominator  taiaiap(a,i,a1,j,a2,k)
                 t1aaaiip(a,a1,a2,i,j,k)   = taiaiap(a,i,a1,j,a2,k)

                 t2aaapii(a,a1,a2,k,i,j)  = t1aaaiip(a,a1,a2,i,j,k) 
#
                 t1pppp(a,a1,a2,k)        = t2aaapii(a,a1,a2,k,i,j)
                 t2pppi(a1,a2,k,j)        = P10aiai(a1,j,a2,k)
                 tppp(a1,a2,k)            = t2pppi(a1,a2,k,j)
                 tpppi(a1,a2,k,i)         = tppp(a1,a2,k) 
#
                 xai(a,i)                 = t1pppp(a,a1,a2,k)*tpppi(a1,a2,k,i)

                 xai(a,i)                *= 2.0
                 PUT sai(a,i)            += xai(a,i)
#
           ENDPARDO a, a1, a2
           execute server_barrier
           execute sip_barrier
#
# Perm 2
# -------
#
# Form contributions to two-particle density 
# ------------------------------------------ 
#
# Form contribution to Gaiai
# --------------------------
#
           PARDO a, a1, a2 # i, j, k 
#
                 REQUEST                    t1a_old(a2,k) k  
                 PREQUEST t3pipi(a2,k,a1,j) = T2aiai(a2,k,a1,i1)
                 GET                        Y3ijk(a,a1,a2,k)
#
                 tpppp(a,a1,a2,k)         = Y3ijk(a,a1,a2,k)
                 taaapii(a,a1,a2,k,i,j)   = tpppp(a,a1,a2,k)
                 taiaiap(a,i,a1,j,a2,k)   = Taaapii(a,a1,a2,k,i,j)
                 execute energy_denominator taiaiap(a,i,a1,j,a2,k)
                 t2aaapii(a,a1,a2,k,j,i)  = taiaiap(a,i,a1,j,a2,k)
                 tpppp(a,a1,a2,k)         = t2aaapii(a,a1,a2,k,j,i) 
# 
                 tpp(a,a1)                = tpppp(a,a1,a2,k)*t1a_old(a2,k) 
                 tppii(a,a1,i,j)          = tpp(a,a1) 
                 tpipi(a,i,a1,j)          = tppii(a,a1,i,j) 
                 tpipi(a,i,a1,j)         *= 0.125  
                 PREPARE Gaiai(a,i,a1,j) += tpipi(a,i,a1,j) 
#
# Form contribution to Dai 
# ------------------------ 
#
                 t1pi(a,j)                  = t3pipi(a2,k,a1,j)*tpppp(a,a1,a2,k) 
                 tp(a)                      = t1pi(a,j) 
                 tpi(a,i)                   = tp(a) 
                 PUT Dai(a,i)              += tpi(a,i) 
#
           ENDPARDO a, a1, a2 # i, j, k 
#
           PARDO a, a1, a2 # i, j, k 
#
                 GET                        Y3ijk(a,a1,a2,k)
                 GET                        E3ijk(a,a1,a2,k)
#
                 t1pppp(a,a1,a2,k)        = Y3ijk(a,a1,a2,k)
                 t1pppp(a,a1,a2,k)       *= 2.0
                 t1pppp(a,a1,a2,k)       += E3ijk(a,a1,a2,k)
                 taaapii(a,a1,a2,k,i,j)   = t1pppp(a,a1,a2,k)
                 taiaiap(a,i,a1,j,a2,k)   = Taaapii(a,a1,a2,k,i,j)
                 execute energy_denominator taiaiap(a,i,a1,j,a2,k)
                 t2aaapii(a,a1,a2,k,j,i)  = taiaiap(a,i,a1,j,a2,k)
                 t3pppp(a,a1,a2,k)        = t2aaapii(a,a1,a2,k,j,i) 
#
# Form contribution to Gaaai
# --------------------------
#
                 DO a3 
#
                    PREQUEST t1pipi(a2,k,a3,i) = T2aiai(a2,k,a3,i1) 
                    tpppi(a3,a2,k,i)           = t1pipi(a2,k,a3,i) 
                    t1pppi(a,a3,a1,i)          = t3pppp(a,a1,a2,k)*tpppi(a3,a2,k,i) 
                    tppp(a,a3,a1)              = t1pppi(a,a3,a1,i) 
                    tpppi(a,a3,a1,j)           = tppp(a,a3,a1) 
                    tpppi(a,a3,a1,j)          *= 0.25   
                    PREPARE Gaaai(a,a3,a1,j)  += tpppi(a,a3,a1,j) 
#
                 ENDDO a3 
#
# Form contribution to Gaiii
# --------------------------
#
                 DO l 
#
                    PREQUEST t3pppi(a2,k,a1,l) = T2aiai(a2,i2,a1,i1)  
                    tpi(a,l)                   = t3pppp(a,a1,a2,k)*t3pppi(a2,k,a1,l) 
                    tpiii(a,l,i,j)             = tpi(a,l) 
                    t1piii(a,i,l,j)            = tpiii(a,l,i,j) 
                    t1piii(a,i,l,j)           *= -0.25   
                    PREPARE Gaiii(a,i,l,j)    += t1piii(a,i,l,j)  
#
                 ENDDO l 
#
# Done forming contributions to two-particle density 
# -------------------------------------------------- 
#
           ENDPARDO a, a1, a2 # i, j, k 
           execute sip_barrier 
           execute server_barrier 
#
           PARDO a, a1, a2 # i, j, k 
#
                 GET                        Y3ijk(a,a1,a2,k)
                 GET                        E3ijk(a,a1,a2,k) 
#
# Form contribution to Da 
# ----------------------- 
#
                 tpppp(a,a1,a2,k)         = Y3ijk(a,a1,a2,k)
                 tpppp(a,a1,a2,k)        += E3ijk(a,a1,a2,k)
                 taaapii(a,a1,a2,k,i,j)   = tpppp(a,a1,a2,k)
                 taiaiap(a,i,a1,j,a2,k)   = Taaapii(a,a1,a2,k,i,j)
                 execute energy_denominator taiaiap(a,i,a1,j,a2,k)
                 execute energy_denominator taiaiap(a,i,a1,j,a2,k)
                 t2aaapii(a,a1,a2,k,j,i)  = taiaiap(a,i,a1,j,a2,k)
                 tpppp(a,a1,a2,k)         = t2aaapii(a,a1,a2,k,j,i) 
#
                 etemp                    = Y3ijk(a,a1,a2,k)*tpppp(a,a1,a2,k)
                 tIJ(i,i)                 = etemp 
                 PUT Di(i,i)             += tIJ(i,i) 

                 PREPARE Spppp(a,a1,a2,k) = tpppp(a,a1,a2,k) 
                 PREPARE S1pppp(a,a1,a2,k)= Y3ijk(a,a1,a2,k) 
#
                #DO ai  
#   
                #   GET                 IAa(ai,a) 
                #   ISa(ai,a)         = IAa(ai,a) 
                #   sSaa(ai,a1,a2,k)  = ISa(ai,a)*Y3ijk(a,a1,a2,k) 
                #   s1Saa(ai,a1,a2,k) = ISa(ai,a)*tpppp(a,a1,a2,k) 
                #   etemp             = sSaa(ai,a1,a2,k)*s1Saa(ai,a1,a2,k)  
                #   tss(ai,ai)        = etemp 
                #   PUT DaS(ai,ai)   += tss(ai,ai) 
#
                #ENDDO ai  
#
           ENDPARDO a, a1, a2 # i, j, k 
#
           execute server_barrier

           PARDO ai, a1, a2 
                 PREQUEST txppp(ai,a1,a2,k)  = Spppp(a,a1,a2,k) 
                 PREQUEST t1xppp(ai,a1,a2,k) = S1pppp(a,a1,a2,k) 
                 etemp                       = txppp(ai,a1,a2,k)*t1xppp(ai,a1,a2,k)   
                 tss(ai,ai)                  = etemp 
                 PUT DaS(ai,ai)             += tss(ai,ai) 
           ENDPARDO ai, a1, a2 

           execute sip_barrier
#
           DELETE D3ijk 
           DELETE E3ijk 
           DELETE X3ijk 
           DELETE Y3ijk 
           delete D2aaiS(*,*,*,k)   
	   delete D1aa(*,*,k)   
	   delete D2aa(*,*,k)   
           delete Paaak(*,*,*,k) 
#
       #ENDIF # k >=j 
        ENDDO k 
#
        execute sip_barrier 
        delete D1aaiS(*,*,*,j)  
        delete Daa 
        delete Paaaj 
       #ENDIF # i>=j 
        ENDDO j # segment size of 1  
#
        execute sip_barrier 
        delete DaaiS(*,*,*,i) 
        delete Paaai(*,*,*)  
     ENDDO i # segment size of 1  
#
#    DONE alpha/alpha/alpha/ block. 
#    ------------------------------ 
#    alpha/alpha/beta/ block.
#    ------------------------
#
     execute server_barrier 
     collective ecorraaa += esum1 
     execute print_scalar ecorraaa 
#
     execute server_barrier 
     execute sip_barrier
     collective ecorraab += esum2 
     execute print_scalar ecorraab 

     esum = 0.0 
     esum = ecorraaa 
     esum += ecorraab 
     execute print_scalar ecorraaa  
     execute print_scalar ecorraab  
     execute print_scalar esum 
     totenerg += esum 
#
     ENDPROC T4AAA 
#    ------------- 
#
# --------------------------------------------------------------------------
#
# --------------------------------------------------------------------------
#
     PROC ST5 
#    -------- 
#
# Compute contribution to the energy from sai 
# -------------------------------------------  
#
     esum = 0.0 
     execute sip_barrier 
     PARDO a, i 
#
	   PREQUEST Pai(a,i) = t1a_old(a,i1) 
	   GET sai(a,i) 
	   etemp = Pai(a,i)*sai(a,i) 
	   etemp *= 0.25
	   esum += etemp  
#
     ENDPARDO a, i 
#
     execute sip_barrier 
     collective ecorrsa += esum 
     execute sip_barrier 
     execute print_scalar ecorrsa  
     execute server_barrier 
#
# Compute contribution to the energy from sbj 
# ------------------------------------------- 
#
     esum = 0.0 
     execute sip_barrier 
     PARDO b, ib 
#
	   PREQUEST Pbj(b,ib) = t1b_old(b,j1) 
	   GET sbj(b,ib) 
	   etemp = Pbj(b,ib)*sbj(b,ib) 
	   etemp *= 0.25
	   esum += etemp  
#
     ENDPARDO b, ib 
#
     execute sip_barrier 
     collective ecorrsb += esum 
     execute sip_barrier 
     execute print_scalar ecorrsb  
     execute server_barrier 

     ENDPROC ST5 
#    ----------- 
#
# --------------------------------------------------------------------------
#
     PROC FORM_IDENTITY   
#    ------------------  
#
     create IIi 
     create IJj 
     create IAa 
     create IBb 
#
# Form identity arrays 
# -------------------- 
#
     DO i1 
     DO i2 
           tii(i1,i2) = 1.0 
           t1ii(i1,i2) = 0.0 
           execute return_diagonal tii t1ii  
           tpp(i1,i2) = t1ii(i1,i2) 
           PREPARE Sii(i1,i2) = tpp(i1,i2) 
     ENDDO i2 
     ENDDO i1 
#
     DO a1 
     DO a2 
           taa(a2,a1) = 1.0 
           t1aa(a2,a1) = 0.0 
           execute return_diagonal taa t1aa  
           tpp(a2,a1) = t1aa(a2,a1) 
           PREPARE Saa(a2,a1) = tpp(a2,a1) 
     ENDDO a2 
     ENDDO a1 
#
     DO b1 
     DO b2 
           tbb(b2,b1) = 1.0 
           t1bb(b2,b1) = 0.0 
           execute return_diagonal tbb t1bb  
           tqq(b2,b1) = t1bb(b2,b1) 
           PREPARE Sbb(b2,b1) = tqq(b2,b1) 
     ENDDO b2 
     ENDDO b1 
#
     DO j1 
     DO j2 
           tjj(j1,j2) = 1.0 
           t1jj(j1,j2) = 0.0 
           execute return_diagonal tjj t1jj  
           tqq(j1,j2) = t1jj(j1,j2) 
           PREPARE Sjj(j1,j2) = tqq(j1,j2) 
     ENDDO j2 
     ENDDO j1 
     execute sip_barrier 
     execute server_barrier
#
     PARDO i1, i 
#
           PREQUEST PIi(i,i1) = Sii(i2,i1) 
           PUT IIi(i,i1) = PIi(i,i1) 
#
     ENDPARDO i1, i 
#
     DO ai 
     DO a1 
#
           PAa(ai,a1) = 1.0 
           P1Aa(ai,a1) = 0.0 
           execute return_diagonal PAa P1Aa  
           TPAa(ai,a1) = P1Aa(ai,a1) 
          #PREQUEST PAa(ai,a1) = Saa(a2,a1) 
           PUT IAa(ai,a1) = TPAa(ai,a1) 
#
     ENDDO a1 
     ENDDO ai 
#
     DO bj 
     DO b1  
#
           PBb(bj,b1) = 1.0 
           P1Bb(bj,b1) = 0.0 
           execute return_diagonal PBb P1Bb  
          #PREQUEST PBb(bj,b1) = Sbb(b2,b1) 
           TPBb(bj,b1) = P1Bb(bj,b1) 
           PUT IBb(bj,b1) = TPBb(bj,b1) 
#
     ENDDO b1  
     ENDDO bj 
#
     PARDO j1, jb  
#
           PREQUEST PJj(jb,j1) = Sjj(j2,j1) 
           PUT IJj(jb,j1) = PJj(jb,j1) 
#
     ENDPARDO j1, jb  
     execute sip_barrier 
#
     ENDPROC FORM_IDENTITY   
#    ---------------------  
#
# --------------------------------------------------------------------------
#
     PROC S_PREP  
#    ----------- 
#
     create fsai 
     create fsbj 
     create DDai 
     create DDbj
     create Daa 
     create Dbb 
     create Dii 
     create Djj 
     execute sip_barrier 
#
# Form fs and DDAI arrays 
# -----------------------  
#
     PARDO a, i1 
#
           tpp(a,i1)  = 0.0 
           t1pp(a,i1) = 0.0 
#
           DO i 
#
              GET sai(a,i) 
              GET Dai(a,i) 
              GET IIi(i,i1) 
#
              t2pp(a,i1) = sai(a,i)*IIi(i,i1) 
              tpp(a,i1) += t2pp(a,i1)  
#
              t2pp(a,i1) = Dai(a,i)*IIi(i,i1) 
              t1pp(a,i1)+= t2pp(a,i1)  
#
           ENDDO i 
#
           tpp(a,i1)     *= 0.125 
           t1pp(a,i1)    *= 0.0 # 0.25  
           PUT fsai(a,i1) = tpp(a,i1) 
           PUT DDai(a,i1) = t1pp(a,i1) 
#
     ENDPARDO a, i1 
#
     PARDO b, j1 
#
           tqq(b,j1)  = 0.0 
           t1qq(b,j1) = 0.0 
#
           DO jb  
#
              GET sbj(b,jb) 
              GET Dbj(b,jb) 
              GET IJj(jb,j1) 
#
              t2qq(b,j1) = sbj(b,jb)*IJj(jb,j1) 
              tqq(b,j1) += t2qq(b,j1)  
#
              t2qq(b,j1) = Dbj(b,jb)*IJj(jb,j1) 
              t1qq(b,j1)+= t2qq(b,j1)  
#
           ENDDO jb  
#
           tqq(b,j1)     *= 0.125 
           t1qq(b,j1)    *= 0.0 # 0.25  
           PUT fsbj(b,j1) = tqq(b,j1) 
           PUT DDbj(b,j1) = t1qq(b,j1) 
#
     ENDPARDO b, j1 
     execute sip_barrier 
#
     PARDO a, a1, i1, i2 
#
          Fpppp(a,a1,i1,i2) = 0.0 
#
          DO i 
          DO j  
#
             REQUEST              Saaii(a,a1,i,j) a  
             GET                  IIi(i,i1) 
             GET                  IIi(j,i2) 
             tpppi(a,a1,i1,j)   = Saaii(a,a1,i,j)*IIi(i,i1) 
             F1pppp(a,a1,i1,i2) = tpppi(a,a1,i1,j)*IIi(j,i2) 
             Fpppp(a,a1,i1,i2) += F1pppp(a,a1,i1,i2) 
#
          ENDDO j  
          ENDDO i 
#
          F1pppp(a,i1,a1,i2)        = Fpppp(a,a1,i1,i2)
          PREPARE Saiai(a,i1,a1,i2) = F1pppp(a,i1,a1,i2)  
#
     ENDPARDO a, a1, i1, i2 
#
     PARDO b, b1, j1, j2 
#
          Fqqqq(b,b1,j1,j2) = 0.0 
#
          DO ib  
          DO jb 
#
             REQUEST              Sbbjj(b,b1,ib,jb) b  
             GET                  IJj(ib,j1) 
             GET                  IJj(jb,j2) 
             tqqqq(b,b1,j1,jb)  = Sbbjj(b,b1,ib,jb)*IJj(ib,j1) 
             F1qqqq(b,b1,j1,j2) = tqqqq(b,b1,j1,jb)*IJj(jb,j2) 
             Fqqqq(b,b1,j1,j2) += F1qqqq(b,b1,j1,j2) 
#
          ENDDO jb 
          ENDDO ib
#
          F1qqqq(b,j1,b1,j2)        = Fqqqq(b,b1,j1,j2)
         #F1qqqq(b,j1,b1,j2)        = 0.0  
          PREPARE Sbjbj(b,j1,b1,j2) = F1qqqq(b,j1,b1,j2)  
#
     ENDPARDO b, b1, j1, j2 
#
     PARDO a, b1, i1, j2 
#
          Fpqpq(a,b1,i1,j2) = 0.0 
#
          DO i 
          DO jb  
#
             REQUEST              Sabij(a,b1,i,jb) a  
             GET                  IIi(i,i1) 
             GET                  IJj(jb,j2) 
             tpqpj(a,b1,i1,jb)   = Sabij(a,b1,i,jb)*IIi(i,i1) 
             F1pqpq(a,b1,i1,j2) = tpqpj(a,b1,i1,jb)*IJj(jb,j2) 
             Fpqpq(a,b1,i1,j2) += F1pqpq(a,b1,i1,j2) 
#
          ENDDO jb 
          ENDDO i 
#
          Fppqq(a,i1,b1,j2)         = Fpqpq(a,b1,i1,j2)
         #Fppqq(a,i1,b1,j2)         = 0.0  
          PREPARE Saibj(a,i1,b1,j2) = Fppqq(a,i1,b1,j2)  
#
     ENDPARDO a, b1, i1, j2 
#
     execute server_barrier 
#
# Prepare virtual-virtual blocks of the one-density 
# ------------------------------------------------- 
#
#    alpha/alpha block 
#    ----------------- 
#
     PARDO a2, a1 
#
           tpp(a1,a2) = 0.0 
#
           DO ai  
           DO aj 
#
              IF ai == aj 
#
              GET           IAa(ai,a1) 
              GET           IAa(aj,a2) 
              GET           DaS(ai,aj) 
#
              tps(a1,aj)   = DaS(ai,aj)*IAa(ai,a1) 
              t1pp(a1,a2) = tps(a1,aj)*IAa(aj,a2)   
              tpp(a1,a2) += t1pp(a1,a2) 
#
              ENDIF 
#
           ENDDO aj 
           ENDDO ai 
#
           etemp          = 1.0/12.0 
           tpp(a1,a2)    *= etemp 
           PUT Daa(a1,a2) = tpp(a1,a2) 
#
     ENDPARDO a2, a1 
#
#    beta/beta block 
#    --------------- 
#
     PARDO b2, b1 
#
           tqq(b1,b2) = 0.0 
#
           DO bi  
           DO bj 
#
              IF bi == bj 
#
              GET           IBb(bi,b1) 
              GET           IBb(bj,b2) 
              GET           DbS(bi,bj) 
#
              tqs(b1,bj)  = DbS(bi,bj)*IBb(bi,b1) 
              t1qq(b1,b2) = tqs(b1,bj)*IBb(bj,b2)   
              tqq(b1,b2) += t1qq(b1,b2) 
#
              ENDIF 
#
           ENDDO bj 
           ENDDO bi 
#
           etemp          = 1.0/12.0 
           tqq(b1,b2)    *= etemp 
           PUT Dbb(b1,b2) = tqq(b1,b2) 
#
     ENDPARDO b2, b1 
#
# Prepare occupied-occupied blocks of the one-density 
# --------------------------------------------------- 
#
#    alpha/alpha block 
#    ----------------- 
#
     PARDO i2, i1 
#
           tpp(i1,i2) = 0.0 
#
           DO i 
           DO j 
#
              IF i == j 
#
              GET           IIi(i,i1) 
              GET           IIi(j,i2) 
              GET           Di(i,j) 
#
              tpi(i1,j)   = Di(i,j)*IIi(i,i1) 
              t1pp(i1,i2) = tpi(i1,j)*IIi(j,i2)   
              tpp(i1,i2) += t1pp(i1,i2) 
#
              ENDIF 
#
           ENDDO j 
           ENDDO i 
#
           etemp          = -1.0/12.0 
           tpp(i1,i2)    *= etemp 
           PUT Dii(i1,i2) = tpp(i1,i2) 
#
     ENDPARDO i2, i1 
#
#    beta/beta block 
#    --------------- 
#
     PARDO j2, j1 
#
           tqq(j1,j2) = 0.0 
#
           DO ib 
           DO jb  
#
              IF ib == jb 
#
              GET           IJj(ib,j1) 
              GET           IJj(jb,j2) 
              GET           Dj(ib,jb) 
#
              tqj(j1,jb)  = Dj(ib,jb)*IJj(ib,j1) 
              t1qq(j1,j2) = tqj(j1,jb)*IJj(jb,j2)   
              tqq(j1,j2) += t1qq(j1,j2) 
#
              ENDIF 
#
           ENDDO jb  
           ENDDO ib  
#
           etemp          = -1.0/12.0 
           tqq(j1,j2)    *= etemp 
           PUT Djj(j1,j2) = tqq(j1,j2) 
#
     ENDPARDO j2, j1 
#
     execute sip_barrier 
#
     PARDO a, a1, a2, i1  
#
          F1pppp(a,a1,a2,i1) = 0.0 
#
          DO i 
#
             REQUEST              Gaaai(a,a1,a2,i) a  
             GET                  IIi(i,i1) 
             Fpppp(a,a1,a2,i1)  = Gaaai(a,a1,a2,i)*IIi(i,i1) 
             F1pppp(a,a1,a2,i1) += Fpppp(a,a1,a2,i1) 
#
          ENDDO i 
#
          PREPARE SGaaai(a,a1,a2,i1) = F1pppp(a,a1,a2,i1)  
#
     ENDPARDO a, a1, a2, i1 
#
     PARDO b, b1, a2, i1  
#
          F1qqpp(b,b1,a2,i1) = 0.0 
#
          DO i 
#
             REQUEST              Gbbai(b,b1,a2,i) b  
             GET                  IIi(i,i1) 
             Fqqpp(b,b1,a2,i1)  = Gbbai(b,b1,a2,i)*IIi(i,i1) 
             F1qqpp(b,b1,a2,i1) += Fqqpp(b,b1,a2,i1) 
#
          ENDDO i 
#
          PREPARE SGbbai(b,b1,a2,i1) = F1qqpp(b,b1,a2,i1)  
#
     ENDPARDO b, b1, a2, i1 
#
     PARDO b, b1, b2, j1  
#
          F1qqqq(b,b1,b2,j1) = 0.0 
#
          DO jb  
#
             REQUEST              Gbbbj(b,b1,b2,jb) b  
             GET                  IJj(jb,j1) 
             Fqqqq(b,b1,b2,j1)  = Gbbbj(b,b1,b2,jb)*IJj(jb,j1) 
             F1qqqq(b,b1,b2,j1) += Fqqqq(b,b1,b2,j1) 
#
          ENDDO jb 
#
          PREPARE SGbbbj(b,b1,b2,j1) = F1qqqq(b,b1,b2,j1)  
#
     ENDPARDO b, b1, b2, j1 
#
     PARDO a, a1, b2, j1  
#
          F1ppqq(a,a1,b2,j1) = 0.0 
#
          DO jb  
#
             REQUEST              Gaabj(a,a1,b2,jb) a  
             GET                  IJj(jb,j1) 
             Fppqq(a,a1,b2,j1)  = Gaabj(a,a1,b2,jb)*IJj(jb,j1) 
             F1ppqq(a,a1,b2,j1) += Fppqq(a,a1,b2,j1) 
#
          ENDDO jb 
#
          PREPARE SGaabj(a,a1,b2,j1) = F1ppqq(a,a1,b2,j1)  
#
     ENDPARDO a, a1, b2, j1 
#
     ENDPROC S_PREP  
#    -------------- 
#
# --------------------------------------------------------------------------
#
     PROC PRINT_Gaaai 
#    ---------------- 
#
     esum1 = 0.0 
     esum2 = 0.0 
     esum3 = 0.0 
     esum4 = 0.0 
#
     PARDO a, a1, a2, i 
           REQUEST Gaaai(a,a1,a2,i) a
           etemp = Gaaai(a,a1,a2,i)*Gaaai(a,a1,a2,i)
           esum1 += etemp 
          #execute dump_block Gaaai(a,a1,a2,i) 
     ENDPARDO a, a1, a2, i 
#
     PARDO b, b1, b2, ib 
           REQUEST Gbbbj(b,b1,b2,ib) b
           etemp = Gbbbj(b,b1,b2,ib)*Gbbbj(b,b1,b2,ib)
           esum2 += etemp 
          #execute dump_block Gbbbj(b,b1,b2,ib) 
     ENDPARDO b, b1, b2, ib  
#
     PARDO a, a1, b, ib 
           REQUEST Gaabj(a,a1,b,ib) a
           etemp = Gaabj(a,a1,b,ib)*Gaabj(a,a1,b,ib) 
           esum3 += etemp 
          #execute dump_amp Gaabj(a,a1,b,ib) 
     ENDPARDO a, a1, b, ib  
#
     PARDO b, b1, a, i 
           REQUEST Gbbai(b,b1,a,i) b
           etemp = Gbbai(b,b1,a,i)*Gbbai(b,b1,a,i)
           esum4 += etemp 
          #execute dump_amp Gbbai(b,b1,a,i) 
     ENDPARDO b, b1, a, i 
#
     execute server_barrier 
    #etemp = 0.0 
    #collective etemp += esum1 
    #execute print_scalar etemp 
    #etemp = 0.0 
    #collective etemp += esum2 
    #execute print_scalar etemp 
    #etemp = 0.0 
    #collective etemp += esum3 
    #execute print_scalar etemp 
    #etemp = 0.0 
    #collective etemp += esum4 
    #execute print_scalar etemp 
#
     ENDPROC PRINT_Gaaai 
#    ------------------- 
#
# --------------------------------------------------------------------------
#
# --------------------------------------------------------------------------
#
     PROC PRINT_Gaiii 
#    ---------------- 
#
     esum1 = 0.0 
     esum2 = 0.0 
     esum3 = 0.0 
     esum4 = 0.0 
     PARDO a, i, j, l  
           REQUEST Gaiii(a,i,j,l) a
           etemp = Gaiii(a,i,j,l)*Gaiii(a,i,j,l)
           esum1 += etemp 
          #execute dump_block Gaiii(a,i,j,k) 
     ENDPARDO a, i, j, l 
#
     PARDO b, ib, jb, kb  
           REQUEST Gbjjj(b,ib,jb,kb) b
           etemp = Gbjjj(b,ib,jb,kb)*Gbjjj(b,ib,jb,kb)
           esum2 += etemp 
          #execute dump_block Gbjjj(b,ib,jb,kb) 
     ENDPARDO b, ib, jb, kb  
#
     PARDO a, i, jb, kb  
           REQUEST Gaijj(a,i,jb,kb) a
           etemp = Gaijj(a,i,jb,kb)*Gaijj(a,i,jb,kb)
           esum3 += etemp 
          #execute dump_block Gaijj(a,i,jb,kb) 
     ENDPARDO a, i, jb, kb 
#
     PARDO b, ib, j, i  
           REQUEST Gbjii(b,ib,j,i) b
           etemp = Gbjii(b,ib,j,i)*Gbjii(b,ib,j,i)
           esum4 += etemp 
          #execute dump_block Gbjii(b,ib,j,k) 
     ENDPARDO b, ib, j, i  
     execute server_barrier 
     etemp = 0.0 
     collective etemp += esum1 
     execute print_scalar etemp 
     etemp = 0.0 
     collective etemp += esum2 
     execute print_scalar etemp 
     etemp = 0.0 
     collective etemp += esum3 
     execute print_scalar etemp 
     etemp = 0.0 
     collective etemp += esum4 
     execute print_scalar etemp 
#
     ENDPROC PRINT_Gaiii  
#    ------------------- 
#
# --------------------------------------------------------------------------
#
     PROC PRINT_Gaiai 
#    ---------------- 
#
     esum1 = 0.0 
     esum2 = 0.0 
     esum3 = 0.0 
     PARDO a, i, a1, j  
           REQUEST Gaiai(a,i,a1,j) a
           etemp = Gaiai(a,i,a1,j)*Gaiai(a,i,a1,j)
           esum1 += etemp 
     ENDPARDO a, i, a1, j 
#
     PARDO b, ib, b1, jb  
           REQUEST Gbjbj(b,ib,b1,jb) b
           etemp = Gbjbj(b,ib,b1,jb)*Gbjbj(b,ib,b1,jb)
           esum2 += etemp 
     ENDPARDO b, ib, b1, jb 
#
     PARDO a, i, b1, jb  
           REQUEST Gaibj(a,i,b1,jb) a
           etemp = Gaibj(a,i,b1,jb)*Gaibj(a,i,b1,jb)
           esum3 += etemp 
     ENDPARDO a, i, b1, jb 
     execute server_barrier 
     etemp = 0.0 
     collective etemp += esum1 
     execute print_scalar etemp 
     etemp = 0.0 
     collective etemp += esum2 
     execute print_scalar etemp 
     etemp = 0.0 
     collective etemp += esum3 
     execute print_scalar etemp 
#
     ENDPROC PRINT_Gaiai  
#    ------------------- 
#
# --------------------------------------------------------------------------
#
     PROC PRINT_Dai  
#    -------------- 
#
     esum1 = 0.0 
     esum2 = 0.0 
     execute sip_barrier 
     PARDO a, i 
           GET Dai(a,i) 
           etemp = Dai(a,i)*Dai(a,i) 
           esum1 += etemp 
     ENDPARDO a, i 
#
     PARDO b, ib 
           GET Dbj(b,ib) 
           etemp = Dbj(b,ib)*Dbj(b,ib) 
           esum2 += etemp 
     ENDPARDO b, ib 
     execute sip_barrier 
     etemp = 0.0 
     collective etemp += esum1 
     execute print_scalar etemp 
     etemp = 0.0 
     collective etemp += esum2 
     execute print_scalar etemp 
#
     ENDPROC PRINT_Dai  
#    ----------------- 
#
# --------------------------------------------------------------------------
#
     PROC B3TRAN   
#    ----------- 
#
# Transform ca and cb to index basis 
# ---------------------------------- 
#
     create cai 
     create cbj
     execute sip_barrier 
#
     PARDO mu, i 
#
           txi(mu,i) = 0.0 
#
           DO i1 
#
              GET          IIi(i,i1) 
              t1xi(mu,i) = ca(mu,i1)*IIi(i,i1) 
              txi(mu,i) += t1xi(mu,i)  
#
           ENDDO i1  
#
           PUT cai(mu,i) = txi(mu,i) 
#
     ENDPARDO mu, i 
#
     PARDO mu, ib 
#
           txj(mu,ib) = 0.0 
#
           DO j1 
#
              GET          IJj(ib,j1) 
              t1xj(mu,ib) = cb(mu,j1)*IJj(ib,j1) 
              txj(mu,ib) += t1xj(mu,ib)  
#
           ENDDO j1  
#
           PUT cbj(mu,ib) = txj(mu,ib) 
#
     ENDPARDO mu, ib 
#
# Temporary control over what is used in PDCONT
# --------------------------------------------- VFL 
#
#     PARDO a, a1, a2, i 
#           tpppp(a,a1,a2,i) = 0.0 
#           PREPARE Gaaai(a,a1,a2,i) = tpppp(a,a1,a2,i) 
#     ENDPARDO a, a1, a2, i 
#
#     PARDO b, b1, b2, ib  
#           tqqqq(b,b1,b2,ib) = 0.0 
#           PREPARE Gbbbj(b,b1,b2,ib) = tqqqq(b,b1,b2,ib) 
#     ENDPARDO b, b1, b2, ib 
#
#     PARDO a, a1, b, ib  
#           tppqj(a,a1,b,ib) = 0.0 
#           PREPARE Gaabj(a,a1,b,ib) = tppqj(a,a1,b,ib) 
#     ENDPARDO a, a1, b, ib  
#
#     PARDO b, b1, a2, i  
#           tqqpi(b,b1,a2,i) = 0.0 
#           PREPARE Gbbai(b,b1,a2,i) = tqqpi(b,b1,a2,i) 
#     ENDPARDO b, b1, a2, i 
#
#     PARDO a, i, j, k 
#           tpiii(a,i,j,k) = 0.0 
#           PREPARE Gaiii(a,i,j,k) = tpiii(a,i,j,k) 
#     ENDPARDO a, i, j, k 
#
#     PARDO b, ib, jb, kb 
#           tqjjj(b,ib,jb,kb) = 0.0 
#           PREPARE Gbjjj(b,ib,jb,kb) = tqjjj(b,ib,jb,kb) 
#     ENDPARDO b, ib, jb, kb 
#
#     PARDO a, i, jb, kb 
#           tpijj(a,i,jb,kb) = 0.0 
#           PREPARE Gaijj(a,i,jb,kb) = tpijj(a,i,jb,kb) 
#     ENDPARDO a, i, jb, kb 
#
#     PARDO b, ib, j, k 
#           tqjii(b,ib,j,k) = 0.0 
#           PREPARE Gbjii(b,ib,j,k) = tqjii(b,ib,j,k) 
#     ENDPARDO b, ib, j, k 
#
#     PARDO a, a1, i, j 
#           tpipi(a,i,a1,j) = 0.0 
#           PREPARE Gaiai(a,i,a1,j) = tpipi(a,i,a1,j) 
#     ENDPARDO a, a1, i, j 
#
#     PARDO b, b1, ib, jb 
#           tqjqj(b,ib,b1,jb) = 0.0 
#           PREPARE Gbjbj(b,ib,b1,jb) = tqjqj(b,ib,b1,jb) 
#     ENDPARDO b, b1, ib, jb 
#
#     PARDO a, b1, i, jb 
#           tpiqj(a,i,b1,jb) = 0.0 
#           PREPARE Gaibj(a,i,b1,jb) = tpiqj(a,i,b1,jb) 
#     ENDPARDO a, b1, i, jb 
#
      execute server_barrier 
#
# Form Gxxxi from Gaaai, Gbbai, Gaiii, Gbjii, Gaiai 
# -------------------------------------------------  
#
     DO i 
#
# Transform Gaaai --> Gxxxi 
# ------------------------- 
#
        create PaaxI(*,*,*,i) 
        execute sip_barrier 
#
        PARDO a, a1, a2 
#
              REQUEST Gaaai(a,a1,a2,i) a 
#
              DO lambda 
#
                 taaxi(a,a1,lambda,i)      = Gaaai(a,a1,a2,i)*ca(lambda,a2) 
                 PUT PaaxI(a,a1,lambda,i) += taaxi(a,a1,lambda,i)
#
              ENDDO lambda  
#
        ENDPARDO a, a1, a2 
#
        create PaxxI(*,*,*,i) 
        execute sip_barrier 
#
        PARDO a, a1, lambda 
#
              GET PaaxI(a,a1,lambda,i) 
#
              DO nu 
#
                 taxxi(a,nu,lambda,i)      = PaaxI(a,a1,lambda,i)*ca(nu,a1) 
                 PUT PaxxI(a,nu,lambda,i) += taxxi(a,nu,lambda,i)  
#
              ENDDO nu 
#
        ENDPARDO a, a1, lambda 
#
        execute sip_barrier 
        delete PaaxI(*,*,*,i)
        create PxxxI(*,*,*,i) 
        execute sip_barrier 
#
        PARDO a, nu, lambda 
#
              GET PaxxI(a,nu,lambda,i) 
#
              DO mu 
#
                 txxxI(mu,nu,lambda,i)      = PaxxI(a,nu,lambda,i)*ca(mu,a) 
                 t1xxxI(mu,lambda,nu,i)     = txxxI(mu,nu,lambda,i)  
                 PUT PxxxI(mu,nu,lambda,i) += txxxI(mu,nu,lambda,i) 
                #PUT PxxxI(mu,lambda,nu,i) += t1xxxI(mu,lambda,nu,i) 
#
              ENDDO mu 
#
        ENDPARDO a, nu, lambda 
        execute sip_barrier 
        delete PaxxI(*,*,*,i)
#
# Done transforming Gaaai --> Gxxxi 
# --------------------------------- 
#
# Transform Gbbai --> Gxxxi 
# ------------------------- 
#
        create Pbbxi(*,*,*,i) 
        execute sip_barrier 
#
        PARDO b, b1, a 
#
              REQUEST Gbbai(b,b1,a,i) a 
#
              DO lambda 
#
                 tbbxI(b,b1,lambda,i)      = Gbbai(b,b1,a,i)*ca(lambda,a) 
                 PUT Pbbxi(b,b1,lambda,i) += tbbxI(b,b1,lambda,i)
#
              ENDDO lambda 
#
        ENDPARDO b, b1, a 
#
        execute sip_barrier 
        create PbxxI(*,*,*,i) 
        execute sip_barrier 
#
        PARDO b, b1, lambda 
#
              GET Pbbxi(b,b1,lambda,i) 
#
              DO nu 
#
                 tbxxI(b,nu,lambda,i)      = Pbbxi(b,b1,lambda,i)*cb(nu,b1) 
                 PUT PbxxI(b,nu,lambda,i) += tbxxI(b,nu,lambda,i) 
#
              ENDDO nu 
#
        ENDPARDO b, b1, lambda 
#
        execute sip_barrier 
        delete Pbbxi(*,*,*,i) 
#
        PARDO b, nu, lambda 
#
              GET PbxxI(b,nu,lambda,i)         
#
              DO mu 
#
                 txxxI(mu,nu,lambda,i)      = PbxxI(b,nu,lambda,i)*cb(mu,b) 
                 t1xxxI(mu,lambda,nu,i)     = txxxI(mu,nu,lambda,i) 
                 PUT PxxxI(mu,nu,lambda,i) += txxxI(mu,nu,lambda,i) 
                #PUT PxxxI(mu,lambda,nu,i) += t1xxxI(mu,lambda,nu,i) 
#
              ENDDO mu 
#
        ENDPARDO b, nu, lambda 
#
        execute sip_barrier 
        delete PbxxI(*,*,*,i) 
#
# Done transforming Gbbai --> Gxxxi 
# --------------------------------- 
#
# Transform Gaiii --> Gxxxi 
# ------------------------- 
#
        create Paixi(*,*,*,i) 
        execute sip_barrier 
#
        PARDO a, j, l 
#
              REQUEST Gaiii(a,j,l,i) a 
#
              DO lambda 
#
                 GET                        cai(lambda,l) 
                 taixi(a,j,lambda,i)      = Gaiii(a,j,l,i)*cai(lambda,l) 
                 PUT Paixi(a,j,lambda,i) += taixi(a,j,lambda,i)          
#
              ENDDO lambda 
#
        ENDPARDO a, j, l 
#
        create Paxxi(*,*,*,i)  
        execute sip_barrier 
#
        PARDO a, j, lambda 
#
              GET Paixi(a,j,lambda,i) 
#
              DO nu 
#
                 GET                         cai(nu,j) 
                 taxxi(a,nu,lambda,i)      = Paixi(a,j,lambda,i)*cai(nu,j)
                 PUT Paxxi(a,nu,lambda,i) += taxxi(a,nu,lambda,i)  
#
              ENDDO nu 
#
        ENDPARDO a, j, lambda 
#
        execute sip_barrier 
        delete Paixi(*,*,*,i)
#
        PARDO a, nu, lambda  
#
              GET Paxxi(a,nu,lambda,i) 
#
              DO mu 
#
                 txxxi(mu,nu,lambda,i)      = Paxxi(a,nu,lambda,i)*ca(mu,a) 
                 PUT Pxxxi(mu,nu,lambda,i) += txxxi(mu,nu,lambda,i) 
#
              ENDDO mu 
#
        ENDPARDO a, nu, lambda  
#
        execute sip_barrier 
        delete Paxxi(*,*,*,i) 
#
# Done transforming Gaiii --> Gxxxi 
# --------------------------------- 
#
# Transform Gbjii --> Gxxxi 
# ------------------------- 
#
        create Pbjxi(*,*,*,i) 
        execute sip_barrier 
#
        PARDO b, jb, l 
#
              REQUEST Gbjii(b,jb,l,i) b 
#
              DO lambda 
#
                 GET                         cai(lambda,l) 
                 tbjxi(b,jb,lambda,i)      = Gbjii(b,jb,l,i)*cai(lambda,l) 
                 PUT Pbjxi(b,jb,lambda,i) += tbjxi(b,jb,lambda,i)                
#
              ENDDO lambda 
#
        ENDPARDO b, jb, l 
#
        create Pbxxi(*,*,*,i)  
        execute sip_barrier 
#
        PARDO b, jb, lambda 
#
              GET Pbjxi(b,jb,lambda,i) 
#
              DO nu 
#
                 GET                         cbj(nu,jb) 
                 tbxxi(b,nu,lambda,i)      = Pbjxi(b,jb,lambda,i)*cbj(nu,jb)
                 PUT Pbxxi(b,nu,lambda,i) += tbxxi(b,nu,lambda,i)  
#
              ENDDO nu 
#
        ENDPARDO b, jb, lambda 
#
        execute sip_barrier 
        delete Pbjxi(*,*,*,i)
#
        PARDO b, nu, lambda  
#
              GET Pbxxi(b,nu,lambda,i) 
#
              DO mu 
#
                 txxxi(mu,nu,lambda,i)      = Pbxxi(b,nu,lambda,i)*cb(mu,b) 
                 PUT Pxxxi(mu,nu,lambda,i) += txxxi(mu,nu,lambda,i) 
#
              ENDDO mu 
#
        ENDPARDO b, nu, lambda  
#
        execute sip_barrier 
        delete Pbxxi(*,*,*,i) 
#
# Done transforming Gbjii --> Gxxxi 
# --------------------------------- 
#
# Transform Gaiai --> Gxxxi 
# ------------------------- 
#
        create Paixi(*,*,*,i) 
        execute sip_barrier 
#
        PARDO a, a1, j 
#
              REQUEST            Gaiai(a,j,a1,i) a 
              tpipi(a,j,a1,i)  = Gaiai(a,j,a1,i) 
              tpipi(a,j,a1,i) *=  2.0  
#
              DO lambda 
#
                 taixi(a,j,lambda,i)      = tpipi(a,j,a1,i)*ca(lambda,a1) 
                 PUT Paixi(a,j,lambda,i) += taixi(a,j,lambda,i) 
#
              ENDDO lambda 
#
        ENDPARDO a, a1, j 
#
        create Paxxi(*,*,*,i) 
        execute sip_barrier 
#
        PARDO a, lambda, j 
#
              GET Paixi(a,j,lambda,i)
#
              DO nu 
#
                 GET                         cai(nu,j) 
                 taxxi(a,nu,lambda,i)      = Paixi(a,j,lambda,i)*cai(nu,j) 
                 PUT Paxxi(a,nu,lambda,i) += taxxi(a,nu,lambda,i) 
#
              ENDDO nu 
#
        ENDPARDO a, lambda, j 
#
        execute sip_barrier 
        delete Paixi(*,*,*,i) 
#
        PARDO a, lambda, nu 
#
              GET Paxxi(a,nu,lambda,i)
#
              DO mu 
#
                 txxxi(mu,nu,lambda,i) = Paxxi(a,nu,lambda,i)*ca(mu,a) 
                 t1xxxi(mu,lambda,nu,i)     = txxxi(mu,nu,lambda,i) 
                 PUT Pxxxi(mu,nu,lambda,i) += txxxi(mu,nu,lambda,i) 
                #PUT Pxxxi(mu,lambda,nu,i) += t1xxxi(mu,lambda,nu,i) 
#
              ENDDO mu 
#
        ENDPARDO a, lambda, nu 
#
        execute sip_barrier 
#
        PARDO mu, nu, lambda 
              GET                             Pxxxi(mu,nu,lambda,i) 
              PREPARE Gxxxi(mu,nu,lambda,i) = Pxxxi(mu,nu,lambda,i) 
        ENDPARDO mu, nu, lambda 
#
# Done transforming Gaiai --> Gxxxi 
# --------------------------------- 
#
        execute sip_barrier 
        delete Paxxi(*,*,*,i) 
        delete Pxxxi(*,*,*,i) 
#
     ENDDO i 
#
# --------------------------------------------------------------------------
#
# Done forming Gxxxi from Gaaai, Gbbai, Gaiii, Gbjii, Gaiai 
# ---------------------------------------------------------  
#
# Form Gxxxj from Gbbbj, Gaabj, Gbjjj, Gbjii, Gaiai, Gaibj 
# --------------------------------------------------------  
#
     DO ib  
#
# Transform Gbbbj --> Gxxxj 
# ------------------------- 
#
        create PbbxJ(*,*,*,ib)  
        execute sip_barrier 
#
        PARDO b, b1, b2 
#
              REQUEST Gbbbj(b,b1,b2,ib) b 
#
              DO lambda 
#
                 tbbxj(b,b1,lambda,ib)      = Gbbbj(b,b1,b2,ib)*cb(lambda,b2) 
                 PUT PbbxJ(b,b1,lambda,ib) += tbbxj(b,b1,lambda,ib)
#
              ENDDO lambda  
#
        ENDPARDO b, b1, b2 
#
        create PbxxJ(*,*,*,ib) 
        execute sip_barrier 
#
        PARDO b, b1, lambda 
#
              GET PbbxJ(b,b1,lambda,ib) 
#
              DO nu 
#
                 tbxxj(b,nu,lambda,ib)      = PbbxJ(b,b1,lambda,ib)*cb(nu,b1) 
                 PUT PbxxJ(b,nu,lambda,ib) += tbxxj(b,nu,lambda,ib)  
#
              ENDDO nu 
#
        ENDPARDO b, b1, lambda 
#
        execute sip_barrier 
        delete PbbxJ(*,*,*,ib)
        create PxxxJ(*,*,*,ib) 
        execute sip_barrier 
#
        PARDO b, nu, lambda 
#
              GET PbxxJ(b,nu,lambda,ib) 
#
              DO mu 
#
                 txxxJ(mu,nu,lambda,ib)      = PbxxJ(b,nu,lambda,ib)*cb(mu,b) 
                 t1xxxJ(mu,lambda,nu,ib)     = txxxJ(mu,nu,lambda,ib) 
                 PUT PxxxJ(mu,nu,lambda,ib) += txxxJ(mu,nu,lambda,ib) 
                #PUT PxxxJ(mu,lambda,nu,ib) += t1xxxJ(mu,lambda,nu,ib) 
#
              ENDDO mu 
#
        ENDPARDO b, nu, lambda 
        execute sip_barrier 
        delete PbxxJ(*,*,*,ib)
#
# Done transforming Gbbbj --> Gxxxj 
# --------------------------------- 
#
# Transform Gaabj --> Gxxxj 
# ------------------------- 
#
        create Paaxj(*,*,*,ib) 
        execute sip_barrier 
#
        PARDO a, a1, b 
#
              REQUEST Gaabj(a,a1,b,ib) a 
#
              DO lambda 
#
                 taaxj(a,a1,lambda,ib) = Gaabj(a,a1,b,ib)*cb(lambda,b) 
                 PUT Paaxj(a,a1,lambda,ib) += taaxj(a,a1,lambda,ib) 
#
              ENDDO lambda 
#
        ENDPARDO a, a1, b 
#
        create Paxxj(*,*,*,ib) 
        execute sip_barrier 
#
        PARDO a, a1, lambda 
#
              GET Paaxj(a,a1,lambda,ib) 
#
              DO nu 
#
                 taxxj(a,nu,lambda,ib) = Paaxj(a,a1,lambda,ib)*ca(nu,a1) 
                 PUT Paxxj(a,nu,lambda,ib) += taxxj(a,nu,lambda,ib) 
#
              ENDDO nu 
#
        ENDPARDO a, a1, lambda 
#
        execute sip_barrier 
        delete Paaxj(*,*,*,ib)
#
        PARDO a, nu, lambda 
#
              GET Paxxj(a,nu,lambda,ib) 
#
              DO mu 
#
                 txxxj(mu,nu,lambda,ib) = Paxxj(a,nu,lambda,ib)*ca(mu,a) 
                 t1xxxj(mu,lambda,nu,ib) = txxxj(mu,nu,lambda,ib) 
                 PUT Pxxxj(mu,nu,lambda,ib) += txxxj(mu,nu,lambda,ib) 
                #PUT Pxxxj(mu,lambda,nu,ib) += t1xxxj(mu,lambda,nu,ib) 
#
              ENDDO mu 
#
        ENDPARDO a, nu, lambda 
#
        execute sip_barrier 
        delete Paxxj(*,*,*,ib)
#
# Done transforming Gaabj --> Gxxxj 
# --------------------------------- 
#
# Transform Gbjjj --> Gxxxj 
# ------------------------- 
#
        create Pbjxj(*,*,*,ib)
        execute sip_barrier
#
        PARDO b, jb, kb
#
              REQUEST Gbjjj(b,jb,kb,ib) b
#
              DO lambda
#
                 GET cbj(lambda,kb)
                 tbjxj(b,jb,lambda,ib) = Gbjjj(b,jb,kb,ib)*cbj(lambda,kb)
                 PUT Pbjxj(b,jb,lambda,ib) += tbjxj(b,jb,lambda,ib)
#
              ENDDO lambda
#
        ENDPARDO b, jb, kb
#
        create Pbxxj(*,*,*,ib)
        execute sip_barrier
#
        PARDO b, jb, lambda
#
              GET Pbjxj(b,jb,lambda,ib)
#
              DO nu
#
                 GET cbj(nu,jb)
                 tbxxj(b,nu,lambda,ib) = Pbjxj(b,jb,lambda,ib)*cbj(nu,jb)
                 PUT Pbxxj(b,nu,lambda,ib) += tbxxj(b,nu,lambda,ib)
#
              ENDDO nu
#
        ENDPARDO b, jb, lambda
#
        execute sip_barrier
        delete Pbjxj(*,*,*,ib)
#
        PARDO b, nu, lambda
#
              GET Pbxxj(b,nu,lambda,ib)
#
              DO mu
#
                 txxxj(mu,nu,lambda,ib) = Pbxxj(b,nu,lambda,ib)*cb(mu,b)
                 PUT Pxxxj(mu,nu,lambda,ib) += txxxj(mu,nu,lambda,ib)
#
              ENDDO mu
#
        ENDPARDO b, nu, lambda
#
        execute sip_barrier
        delete Pbxxj(*,*,*,ib)
#
# Done transforming Gbjjj --> Gxxxj
# ---------------------------------
#
# Transform Gaijj --> Gxxxj
# -------------------------
#
        create Paixj(*,*,*,ib)
        execute sip_barrier
#
        PARDO a, i, jb
#
              REQUEST Gaijj(a,i,jb,ib) a
#
              DO lambda
#
                 GET cbj(lambda,jb)
                 taixj(a,i,lambda,ib) = Gaijj(a,i,jb,ib)*cbj(lambda,jb)
                 PUT Paixj(a,i,lambda,ib) += taixj(a,i,lambda,ib)
#
              ENDDO lambda
#
        ENDPARDO a, i, jb
#
        create Paxxj(*,*,*,ib)
        execute sip_barrier
#
        PARDO a, i, lambda
#
              GET Paixj(a,i,lambda,ib)
#
              DO nu
#
                 GET cai(nu,i)
                 taxxj(a,nu,lambda,ib) = Paixj(a,i,lambda,ib)*cai(nu,i)
                 PUT Paxxj(a,nu,lambda,ib) += taxxj(a,nu,lambda,ib)
#
              ENDDO nu
#
        ENDPARDO a, i, lambda
#
        execute sip_barrier
        delete Paixj(*,*,*,ib)
#
        PARDO a, nu, lambda
#
              GET Paxxj(a,nu,lambda,ib)
#
              DO mu
#
                 txxxj(mu,nu,lambda,ib) = Paxxj(a,nu,lambda,ib)*ca(mu,a)
                 PUT Pxxxj(mu,nu,lambda,ib) += txxxj(mu,nu,lambda,ib)
#
              ENDDO mu
#
        ENDPARDO a, nu, lambda
#
        execute sip_barrier
        delete Paxxj(*,*,*,ib)
#
# Done transforming Gaijj --> Gxxxj
# ---------------------------------
#
# Transform Gbjbj --> Gxxxj
# -------------------------
#
        create Pbjxj(*,*,*,ib)
        execute sip_barrier
#
        PARDO b, jb, b1
#
              REQUEST              Gbjbj(b,jb,b1,ib) b 
              tqjqj(b,jb,b1,ib)  = Gbjbj(b,jb,b1,ib) 
              tqjqj(b,jb,b1,ib) *=  2.0 
#
              DO lambda
#
                 tbjxj(b,jb,lambda,ib) = tqjqj(b,jb,b1,ib)*cb(lambda,b1)
                 PUT Pbjxj(b,jb,lambda,ib) += tbjxj(b,jb,lambda,ib)
#
              ENDDO lambda
#
        ENDPARDO b, jb, b1
#
        create Pbxxj(*,*,*,ib)
        execute sip_barrier
#
        PARDO b, jb, lambda
#
              GET Pbjxj(b,jb,lambda,ib)
#
              DO nu
#
                 GET cbj(nu,jb)
                 tbxxj(b,nu,lambda,ib) = Pbjxj(b,jb,lambda,ib)*cbj(nu,jb)
                 PUT Pbxxj(b,nu,lambda,ib) += tbxxj(b,nu,lambda,ib)
#
              ENDDO nu
#
        ENDPARDO b, jb, lambda
#
        execute sip_barrier
        delete Pbjxj(*,*,*,ib)
#
        PARDO b, nu, lambda
#
              GET Pbxxj(b,nu,lambda,ib)
#
              DO mu
#
                 txxxj(mu,nu,lambda,ib) = Pbxxj(b,nu,lambda,ib)*cb(mu,b)
                 t1xxxj(mu,lambda,nu,ib)     = txxxj(mu,nu,lambda,ib) 
                 PUT Pxxxj(mu,nu,lambda,ib) += txxxj(mu,nu,lambda,ib)
                #PUT Pxxxj(mu,lambda,nu,ib) += t1xxxj(mu,lambda,nu,ib)
#
              ENDDO mu
#
        ENDPARDO b, nu, lambda
#
        execute sip_barrier
        delete Pbxxj(*,*,*,ib)
#
# Done transforming Gbjbj --> Gxxxj
# ---------------------------------
#
# Transform Gaibj --> Gxxxj 
# ------------------------- 
#
        create Paixj(*,*,*,ib)
        execute sip_barrier
#
        PARDO a, i, b
#
              REQUEST            Gaibj(a,i,b,ib) a 
              tpiqj(a,i,b,ib)  = Gaibj(a,i,b,ib) 
              tpiqj(a,i,b,ib) *= 4.0  
#
              DO lambda 
#
                 taixj(a,i,lambda,ib) = tpiqj(a,i,b,ib)*cb(lambda,b) 
                 PUT Paixj(a,i,lambda,ib) += taixj(a,i,lambda,ib) 
#
              ENDDO lambda 
#
        ENDPARDO a, i, b
#
        create Paxxj(*,*,*,ib) 
        execute sip_barrier 
#
        PARDO a, i, lambda 
#
              GET Paixj(a,i,lambda,ib) 
#
              DO nu
#
                 GET cai(nu,i) 
                 taxxj(a,nu,lambda,ib) = Paixj(a,i,lambda,ib)*cai(nu,i) 
                 PUT Paxxj(a,nu,lambda,ib) += taxxj(a,nu,lambda,ib)  
#
              ENDDO nu
#
        ENDPARDO a, i, lambda 
#
        execute sip_barrier 
        delete Paixj(*,*,*,ib) 
#
        PARDO a, nu, lambda 
#
              GET Paxxj(a,nu,lambda,ib) 
#
              DO mu 
#
                 txxxj(mu,nu,lambda,ib) = Paxxj(a,nu,lambda,ib)*ca(mu,a) 
                 t1xxxj(mu,lambda,nu,ib)     = txxxj(mu,nu,lambda,ib) 
                 PUT Pxxxj(mu,nu,lambda,ib) += txxxj(mu,nu,lambda,ib)  
                #PUT Pxxxj(mu,lambda,nu,ib) += t1xxxj(mu,lambda,nu,ib)  
#
              ENDDO mu 
#
        ENDPARDO a, nu, lambda 
# 
        execute sip_barrier 
#
        PARDO mu, nu, lambda 
              GET                              Pxxxj(mu,nu,lambda,ib) 
              PREPARE Gxxxj(mu,nu,lambda,ib) = Pxxxj(mu,nu,lambda,ib) 
        ENDPARDO mu, nu, lambda 
#
# Done transforming Gaibj --> Gxxxj 
# --------------------------------- 
# 
        execute sip_barrier 
        delete Paxxj(*,*,*,ib) 
        delete PxxxJ(*,*,*,ib) 
#
     ENDDO ib  
#
# Done forming Gxxxj from Gbbbj, Gaabj, Gbjjj, Gbjii, Gaiai, Gaibj 
# ----------------------------------------------------------------  
#
     execute server_barrier 
#
     ENDPROC B3TRAN   
#    -------------- 
#
# --------------------------------------------------------------------------
#
     PROC PDCONT    
#    ----------- 
#
      PARDO mu, nu, lambda, sigma
#     
            Txxxx(mu,nu,lambda,sigma) = 0.0
#     
#           Fully transform Dxxxi
#           ---------------------
            DO i
#              
               REQUEST                       Gxxxi(mu,nu,lambda,i) i
               GET                           cai(sigma,i) 
               T1xxxx(mu,nu,lambda,sigma)  = Gxxxi(mu,nu,lambda,i)*cai(sigma,i)
               Txxxx(mu,nu,lambda,sigma)  += T1xxxx(mu,nu,lambda,sigma)
#           
            ENDDO i
#           
#           Fully transform Dxxxj
#           ---------------------
            DO ib  
#              
               REQUEST                       Gxxxj(mu,nu,lambda,ib) ib  
               GET                           cbj(sigma,ib) 
               T1xxxx(mu,nu,lambda,sigma)  = Gxxxj(mu,nu,lambda,ib)*cbj(sigma,ib)
               Txxxx(mu,nu,lambda,sigma)  += T1xxxx(mu,nu,lambda,sigma)
#           
            ENDDO ib 
#
            Txxxx(mu,nu,lambda,sigma) *= 2.0 
#           
#           INTEGRAL BLOCK 1
#           ----------------
            execute der_int_setup dx1(mu,nu,lambda,sigma)
            execute der_int_setup dy1(mu,nu,lambda,sigma)
            execute der_int_setup dz1(mu,nu,lambda,sigma)
            execute der_int_setup dx2(mu,nu,lambda,sigma)
            execute der_int_setup dy2(mu,nu,lambda,sigma)
            execute der_int_setup dz2(mu,nu,lambda,sigma)
            execute der_int_setup dx3(mu,nu,lambda,sigma)
            execute der_int_setup dy3(mu,nu,lambda,sigma)
            execute der_int_setup dz3(mu,nu,lambda,sigma)
            execute der_int_setup dx4(mu,nu,lambda,sigma)
            execute der_int_setup dy4(mu,nu,lambda,sigma)
            execute der_int_setup dz4(mu,nu,lambda,sigma)
#
            execute compute_derivative_integrals
#
            execute DCONT2 Txxxx(mu,nu,lambda,sigma)
#
      ENDPARDO mu, nu, lambda, sigma
      execute server_barrier
#
     ENDPROC PDCONT    
#    -------------- 
#
# --------------------------------------------------------------------------
#
     PROC FORM_ONEI    
#    --------------  
#
     create Iij_aa 
     create Iij_bb 
     create Iia_aa 
     create Iia_bb 
     create Iab_aa 
     create Iab_bb 
     create Iai_aa 
     create Iai_bb 
     execute sip_barrier 
     etemp = 1.0 # -0.5 
#
# Compute contributions to one-particle intermediates from Gaaai
# --------------------------------------------------------------
#
      PARDO i2, a, a2, a1
#
            i2pppp(a,a1,a2,i2) = 0.0
#
            DO i
               REQUEST               Gaaai(a,a2,a1,i) a
               GET                   IIi(i,i2) 
               ipppp(a,a1,a2,i2)   = Gaaai(a,a2,a1,i)*IIi(i,i2)
               i2pppp(a,a1,a2,i2) += ipppp(a,a1,a2,i2)
            ENDDO i
            i2pppp(a,a1,a2,i2)*= etemp 
#
#           Contribution to Iij_aa
#           -----------------------
#
            DO  i1
#
               REQUEST              VSaaai(a,a2,a1,i1) i1
               ipppp(i1,a,a1,a2)  = VSaaai(a,a2,a1,i1)
               Tpp(i1,i2)         = ipppp(i1,a,a1,a2)*i2pppp(a,a1,a2,i2)
               Tpp(i1,i2)        *= -0.5
               PUT Iij_aa(i1,i2) += Tpp(i1,i2)
#
            ENDDO i1
#
#           Contribution to Iia_aa
#           ----------------------
#
            DO i1
#
               REQUEST              VSpipi(a,i1,a1,i2) a  
               Tpp(i1,a2)         = i2pppp(a,a1,a2,i2)*VSpipi(a,i1,a1,i2)
               Tpp(i1,a2)        *= -0.5
               PUT Iia_aa(i1,a2) += Tpp(i1,a2)
#
            ENDDO i1
#
            DO i1
#
               REQUEST              Vaaii(a2,a,i2,i1) i1
               REQUEST              Viaai(i2,a,a2,i1) i1
#
               ipppp(i2,a,a2,i1)  = Vaaii(a2,a,i2,i1)
               ipppp(i2,a,a2,i1) -= Viaai(i2,a,a2,i1)
               Tpp(i1,a1)         = i2pppp(a,a1,a2,i2)*ipppp(i2,a,a2,i1)
               Tpp(i1,a1)        *= -1.0
               PUT Iia_aa(i1,a1) += Tpp(i1,a1)
#
            ENDDO i1
#
#           Contribution to Iab_aa
#           ----------------------
#
            DO a3
#
               REQUEST              VSaaai(a,a3,a1,i2) a  
               Tpp(a3,a2)         = VSaaai(a,a3,a1,i2)*i2pppp(a,a1,a2,i2)
               Tpp(a3,a2)        *= -0.5
               PUT Iab_aa(a3,a2) += Tpp(a3,a2)
#
            ENDDO a3
#
#           Contribution to Iab_aa
#           ----------------------
#
            DO a3
#
               REQUEST              VSaaai(a3,a2,a1,i2) a1  
               Tpp(a3,a)          = VSaaai(a3,a2,a1,i2)*i2pppp(a,a1,a2,i2)
               Tpp(a3,a)         *= -1.0
               PUT Iab_aa(a3,a)  += Tpp(a3,a)
#
            ENDDO a3 
#
      ENDPARDO i2, a, a2, a1
#
# Compute contributions to one-particle intermediates from Gbbbj
# --------------------------------------------------------------
#
      PARDO j2, b, b2, b1
#
            i2qqqq(b,b1,b2,j2) = 0.0 
#
            DO jb  
               REQUEST               Gbbbj(b,b2,b1,jb) b
               GET                   IJj(jb,j2) 
               iqqqq(b,b1,b2,j2)   = Gbbbj(b,b2,b1,jb)*IJj(jb,j2) 
               i2qqqq(b,b1,b2,j2) += iqqqq(b,b1,b2,j2) 
            ENDDO jb  
            i2qqqq(b,b1,b2,j2)*=etemp 
#
#           Contribution to Iij_bb
#           -----------------------
#
            DO  j1
#
               REQUEST              VSbbbj(b,b2,b1,j1) j1
               iqqqq(j1,b,b1,b2)  = VSbbbj(b,b2,b1,j1)
               Tqq(j1,j2)         = iqqqq(j1,b,b1,b2)*i2qqqq(b,b1,b2,j2)
               Tqq(j1,j2)        *= -0.5
               PUT Iij_bb(j1,j2) += Tqq(j1,j2)
#
            ENDDO j1
#
#           Contribution to Iia_bb
#           ----------------------
#
            DO j1
#
               REQUEST              VSqjqj(b,j1,b1,j2) b
               Tqq(j1,b2)         = i2qqqq(b,b1,b2,j2)*VSqjqj(b,j1,b1,j2)
               Tqq(j1,b2)        *= -0.5
               PUT Iia_bb(j1,b2) += Tqq(j1,b2)
#
            ENDDO j1
#
            DO j1
#
               REQUEST              Vbbjj(b2,b,j2,j1) j1
               REQUEST              Vjbbj(j2,b,b2,j1) j1
#
               iqqqq(j2,b,b2,j1)  = Vbbjj(b2,b,j2,j1)
               iqqqq(j2,b,b2,j1) -= Vjbbj(j2,b,b2,j1)
               Tqq(j1,b1)         = i2qqqq(b,b1,b2,j2)*iqqqq(j2,b,b2,j1)
               Tqq(j1,b1)        *= -1.0
               PUT Iia_bb(j1,b1) += Tqq(j1,b1)
#
            ENDDO j1
#
#           Contribution to Iab_bb
#           ----------------------
#
            DO b3
#
               REQUEST              VSbbbj(b,b3,b1,j2) b  
               Tqq(b3,b2)         = VSbbbj(b,b3,b1,j2)*i2qqqq(b,b1,b2,j2)
               Tqq(b3,b2)        *= -0.5
               PUT Iab_bb(b3,b2) += Tqq(b3,b2)
#
            ENDDO b3
#
            DO b3
#
               REQUEST              VSbbbj(b3,b2,b1,j2) b1  
               Tqq(b3,b)          = VSbbbj(b3,b2,b1,j2)*i2qqqq(b,b1,b2,j2)
               Tqq(b3,b)         *= -1.0
               PUT Iab_bb(b3,b)  += Tqq(b3,b)
#
            ENDDO b3
#
      ENDPARDO j2, b, b2, b1 
#
# Compute contributions to one-particle intermediates from Gbbai
# --------------------------------------------------------------
#
      PARDO a, j2, a1, b
#
            i2pqpq(a,b,a1,j2) = 0.0 
#
            DO jb  
               REQUEST              Gaabj(a,a1,b,jb) a
               GET                  IJj(jb,j2) 
               ipqpq(a,b,a1,j2)   = Gaabj(a,a1,b,jb)*IJj(jb,j2) 
               i2pqpq(a,b,a1,j2) += ipqpq(a,b,a1,j2) 
            ENDDO jb 
            i2pqpq(a,b,a1,j2)*=etemp 
#
#           Contribution to Iij_bb
#           ----------------------
#
            DO j1
#
               REQUEST              Vaabj(a,a1,b,j1) j1
               Tqq(j1,j2)         = Vaabj(a,a1,b,j1)*i2pqpq(a,b,a1,j2)
               Tqq(j1,j2)        *= -1.0
               PUT Iij_bb(j1,j2) += Tqq(j1,j2)
#
            ENDDO j1
#
#           Contribution to Iab_aa
#           ----------------------
#
            DO a2
#
               REQUEST             Vaabj(a2,a1,b,j2) b
               Tpp(a2,a)         = Vaabj(a2,a1,b,j2)*i2pqpq(a,b,a1,j2)
               Tpp(a2,a)        *= -1.0
               PUT Iab_aa(a2,a) += Tpp(a2,a)
#
            ENDDO a2
#
#           Contribution to Iia_aa
#           ----------------------
#
            DO i1 
#
               REQUEST             Viabj(i1,a1,b,j2) b
               Tpp(i1,a)         = Viabj(i1,a1,b,j2)*i2pqpq(a,b,a1,j2)
               Tpp(i1,a)        *= -1.0
               PUT Iia_aa(i1,a) += Tpp(i1,a)
#
            ENDDO i1 
#
#           Contribution to Iab_aa
#           ----------------------
#
            DO a2
#
               REQUEST              Vaabj(a,a2,b,j2) a
               Tpp(a2,a1)         = Vaabj(a,a2,b,j2)*i2pqpq(a,b,a1,j2)
               Tpp(a2,a1)        *= -1.0
               PUT Iab_aa(a2,a1) += Tpp(a2,a1)
#
            ENDDO a2
#
#           Contribution to Iab_bb
#           ----------------------
#
            DO b1
#
               REQUEST             Vaabj(a,a1,b1,j2) a
               Tqq(b1,b)         = Vaabj(a,a1,b1,j2)*i2pqpq(a,b,a1,j2)
               Tqq(b1,b)        *= -1.0
               PUT Iab_bb(b1,b) += Tqq(b1,b)
#
            ENDDO b1
#
#           Contribution to Iia_aa
#           ----------------------
#
            DO i1 
#
               REQUEST             Vpiqj(a,i1,b,j2) b
               Tpp(i1,a1)         = i2pqpq(a,b,a1,j2)*Vpiqj(a,i1,b,j2)
               Tpp(i1,a1)        *= -1.0
               PUT Iia_aa(i1,a1) += Tpp(i1,a1)
#
            ENDDO i1 
#
#           Contribution to  Iia_bb
#           -----------------------
#
            DO j1
#
               REQUEST             Vaajj(a1,a,j2,j1) j1
               Tqq(j1,b)         = i2pqpq(a,b,a1,j2)*Vaajj(a1,a,j2,j1)
               Tqq(j1,b)        *= -1.0
               PUT Iia_bb(j1,b) += Tqq(j1,b)
#
            ENDDO j1
#
      ENDPARDO a, j2, a1, b
#
# Compute contributions to one-particle intermediates from Gbbai
# --------------------------------------------------------------
#
      PARDO b1, i2, a, b
#
            i2qpqp(b1,a,b,i2) = 0.0 
#
            DO i 
               REQUEST              Gbbai(b,b1,a,i) a
               GET                  IIi(i,i2) 
               iqpqp(b1,a,b,i2)   = Gbbai(b,b1,a,i)*IIi(i,i2) 
               i2qpqp(b1,a,b,i2) += iqpqp(b1,a,b,i2)  
            ENDDO i 
            i2qpqp(b1,a,b,i2)*=etemp 
#
#           Contribution to Iij_aa
#           ----------------------
#
            DO i1
#
               REQUEST              Vbbai(b,b1,a,i1) i1
               Tpp(i1,i2)         = Vbbai(b,b1,a,i1)*i2qpqp(b1,a,b,i2)
               Tpp(i1,i2)        *= -1.0
               PUT Iij_aa(i1,i2) += Tpp(i1,i2)
#
            ENDDO i1
#
#           Contribution to Iab_bb
#           ----------------------
#
            DO b2
#
               REQUEST              Vbbai(b2,b,a,i2) a
               Tqq(b2,b1)         = Vbbai(b2,b,a,i2)*i2qpqp(b1,a,b,i2)
               Tqq(b2,b1)        *= -1.0
               PUT Iab_bb(b2,b1) += Tqq(b2,b1)
#
            ENDDO b2
#
#           Contribution to Iia_bb
#           ----------------------
#
            DO j1  
#
               REQUEST             Viabj(i2,a,b,j1) a
               Tqq(j1,b1)         = i2qpqp(b1,a,b,i2)*Viabj(i2,a,b,j1)
               Tqq(j1,b1)        *= -1.0
               PUT Iia_bb(j1,b1) += Tqq(j1,b1)
#
            ENDDO j1  
#
#           Contribution to Iab_bb
#           ----------------------
#
            DO b2
#
               REQUEST             Vbbai(b1,b2,a,i2) a
               Tqq(b2,b)         = Vbbai(b1,b2,a,i2)*i2qpqp(b1,a,b,i2)
               Tqq(b2,b)        *= -1.0
               PUT Iab_bb(b2,b) += Tqq(b2,b)
#
            ENDDO b2
#
#           Contribution to Iab_aa
#           ----------------------
#
            DO a1
#
               REQUEST             Vbbai(b1,b,a1,i2) b  
               Tpp(a1,a)         = Vbbai(b1,b,a1,i2)*i2qpqp(b1,a,b,i2)
               Tpp(a1,a)        *= -1.0
               PUT Iab_aa(a1,a) += Tpp(a1,a)
#
            ENDDO a1
#
#           Contribution to Iia_aa
#           ----------------------
#
            DO i1
#
               REQUEST             Vbbii(b,b1,i2,i1) b1
               Tpp(i1,a)         = i2qpqp(b1,a,b,i2)*Vbbii(b,b1,i2,i1)
               Tpp(i1,a)        *= -1.0
               PUT Iia_aa(i1,a) += Tpp(i1,a)
#
            ENDDO i1
#
#           Contribution to Iia_bb
#           ----------------------
#
            DO j1  
#
               REQUEST             Vpiqj(a,i2,b1,j1) a
               Tqq(j1,b)         = i2qpqp(b1,a,b,i2)*Vpiqj(a,i2,b1,j1)
               Tqq(j1,b)        *= -1.0
               PUT Iia_bb(j1,b) += Tqq(j1,b)
#
            ENDDO j1  
#
      ENDPARDO b1, i2, a, b
#
# Prepare Gaijk --> Gkija to be used in intermediate construction 
# ---------------------------------------------------------------
#
     etemp = 1.0 # 0.5 
     create Giiia 
     execute sip_barrier 
#
# alpha/alpha/alpha/alpha component 
# --------------------------------- 
# 
     PARDO a, i1, i2, i3 
#
           i1pppp(a,i1,i2,i3) = 0.0 
#
           DO i 
           DO j 
           DO l 
#
              REQUEST               Gaiii(a,j,i,l) a 
              GET                   IIi(i,i1) 
              GET                   IIi(j,i2) 
              GET                   IIi(l,i3) 
              ippii(a,i1,j,l)     = Gaiii(a,j,i,l)*IIi(i,i1) 
              ipppi(a,i1,i2,l)    = ippii(a,i1,j,l)*IIi(j,i2) 
              ipppp(a,i1,i2,i3)   = ipppi(a,i1,i2,l)*IIi(l,i3) 
              i1pppp(a,i1,i2,i3) += ipppp(a,i1,i2,i3)  
#
           ENDDO l 
           ENDDO j 
           ENDDO i 
           i1pppp(a,i1,i2,i3)*=etemp 
#
           i2pppp(i3,i2,i1,a)    = i1pppp(a,i1,i2,i3) 
           PUT Giiia(i3,i2,i1,a) = i2pppp(i3,i2,i1,a) 
#
     ENDPARDO a, i1, i2, i3 
     execute sip_barrier 
#
# Compute contributions to one-particle intermediates
# ---------------------------------------------------
#
#     Contribution to Iij_aa
#     ----------------------
#
      PARDO i1, i2, i3, a 
#
            REQUEST              VSpipi(a,i2,i3,i1) a
            ipppp(i2,i3,a,i1)  = VSpipi(a,i2,i3,i1)
#
            DO i4
#
               GET                  Giiia(i4,i2,i3,a) 
               Tpp(i1,i4)         = Giiia(i4,i2,i3,a)*ipppp(i2,i3,a,i1)
               Tpp(i1,i4)        *= -1.0
               PUT Iij_aa(i1,i4) += Tpp(i1,i4)
#
            ENDDO i4
#
      ENDPARDO i1, i2, i3, a 
#
      PARDO i1, i2, i3, a   
#
            REQUEST VSpipi(a,i2,i1,i3) i3
#
            DO i4
#
               GET                  Giiia(i3,i2,i4,a) 
               Tpp(i1,i4)         = VSpipi(a,i2,i1,i3)*Giiia(i3,i2,i4,a)
               Tpp(i1,i4)        *= -0.5
               PUT Iij_aa(i1,i4) += Tpp(i1,i4)
#
            ENDDO i4
#
      ENDPARDO i1, i2, i3, a  
#
#     Contribution to Iab_aa
#     ----------------------
#
      PARDO a, i2, i3, i1
#
            REQUEST             VSpipi(a,i1,i2,i3) a
            ipppp(a,i3,i1,i2) = VSpipi(a,i1,i2,i3)
#
            DO a1
#
               GET                 Giiia(i3,i1,i2,a1) 
               Tpp(a,a1)         = ipppp(a,i3,i1,i2)*Giiia(i3,i1,i2,a1)
               Tpp(a,a1)        *= -0.5
               PUT Iab_aa(a,a1) += Tpp(a,a1)
#
            ENDDO a1
#
      ENDPARDO a, i2, i3, i1
#
#     Contribution to Iai_aa
#     ----------------------
#
      PARDO a, a1, i1, i2
#
            REQUEST Viaai(i1,a1,a,i2) i2
            REQUEST Vaaii(a,a1,i1,i2) i2
#
            ipppp(i1,i2,a1,a)  = Viaai(i1,a1,a,i2)
            i1pppp(i1,i2,a1,a) = Vaaii(a,a1,i1,i2)
            ipppp(i1,i2,a1,a) -= i1pppp(i1,i2,a1,a)
#
            DO i3 
#
               GET                 Giiia(i3,i1,i2,a1) 
               Tpp(a,i3)         = Giiia(i3,i1,i2,a1)*ipppp(i1,i2,a1,a)
               PUT Iai_aa(a,i3) += Tpp(a,i3)
#
            ENDDO i3 
#
      ENDPARDO a, a1, i1, i2
#
      PARDO a, a1, i1, i2
#
            REQUEST VSpipi(a,i1,a1,i2) a  
#
            DO i3 
#
               GET                 Giiia(i1,i2,i3,a1) 
               Tpp(a,i3)         = VSpipi(a,i1,a1,i2)*Giiia(i1,i2,i3,a1)
               Tpp(a,i3)        *= 0.5
               PUT Iai_aa(a,i3) += Tpp(a,i3)
#
            ENDDO i3  
#
      ENDPARDO a, a1, i1, i2 
#
      PARDO a, i3, i1, i2
#
            GET Giiia(i1,i2,i3,a) 
#
            DO i4 
#
               REQUEST               VSpipi(i1,i3,i2,i4) i1  
               ipppp(i4,i1,i2,i3)  = VSpipi(i1,i3,i2,i4)
               Tpp(i4,a)           = ipppp(i4,i1,i2,i3)*Giiia(i1,i2,i3,a)
               Tpp(i4,a)          *= -0.5
               PUT Iia_aa(i4,a)   += Tpp(i4,a)
#
            ENDDO i4  
#
      ENDPARDO a, i3, i1, i2 
#
     execute sip_barrier 
#
# alpha/beta/alpha/beta component 
# --------------------------------- 
#
     create Gijib 
     execute sip_barrier 
# 
     PARDO b, j1, i2, i3 
#
           i1qqpp(b,j1,i2,i3) = 0.0 
#
           DO ib  
           DO j 
           DO i 
#
              REQUEST               Gbjii(b,ib,j,i) b 
              GET                   IJj(ib,j1) 
              GET                   IIi(j,i2) 
              GET                   IIi(i,i3) 
              iqqii(b,j1,j,i)     = Gbjii(b,ib,j,i)*IJj(ib,j1) 
              iqqpi(b,j1,i2,i)    = iqqii(b,j1,j,i)*IIi(j,i2) 
              iqqpp(b,j1,i2,i3)   = iqqpi(b,j1,i2,i)*IIi(i,i3) 
              i1qqpp(b,j1,i2,i3) += iqqpp(b,j1,i2,i3)  
#
           ENDDO i 
           ENDDO j 
           ENDDO ib  
           i1qqpp(b,j1,i2,i3)*=etemp 
#
           i2pqpq(i3,j1,i2,b)    = i1qqpp(b,j1,i2,i3) 
           PUT Gijib(i3,j1,i2,b) = i2pqpq(i3,j1,i2,b) 
#
     ENDPARDO b, j1, i2, i3 
     execute sip_barrier 
#
# Compute contributions to one-particle intermediates
# --------------------------------------------------- 
#
#     Contribution to Iij_aa
#     ----------------------
#
      PARDO j1, i2, b, i3 
#
            REQUEST Vpiqj(i2,i3,b,j1) j1
#
            DO i1
#
               GET                  Gijib(i1,j1,i2,b) 
               Tpp(i3,i1)         = Gijib(i1,j1,i2,b)*Vpiqj(i2,i3,b,j1)
               Tpp(i3,i1)        *= -1.0
               PUT Iij_aa(i3,i1) += Tpp(i3,i1)
#
            ENDDO i1
#
      ENDPARDO j1, i2, b, i3 
#
# Sixth-term of Iij_aa
# --------------------
#
      PARDO i2, j1, b, i3  
#
            REQUEST Vpiqj(i3,i2,b,j1) j1
#
            DO i1
#
               GET                  Gijib(i2,j1,i1,b) 
               Tpp(i3,i1)         = Vpiqj(i3,i2,b,j1)*Gijib(i2,j1,i1,b)
               Tpp(i3,i1)        *= -1.0
               PUT Iij_aa(i3,i1) += Tpp(i3,i1)
#
            ENDDO i1
#
      ENDPARDO i2, j1, b, i3  
#
# Fifth-term of Iij_bb
# --------------------
#
      PARDO i2, i1, b, j1
#
            REQUEST Vpiqj(i1,i2,b,j1) i2
#
            DO j2  
#
               GET                  Gijib(i2,j2,i1,b) 
               Tqq(j1,j2)         = Gijib(i2,j2,i1,b)*Vpiqj(i1,i2,b,j1)
               Tqq(j1,j2)        *= -1.0
               PUT Iij_bb(j1,j2) += Tqq(j1,j2)
#
            ENDDO j2
#
      ENDPARDO i2, i1, b, j1
#
# Sixth-term of Iab_bb
# --------------------
#
      PARDO b1, i1, i2, j1 
#
            REQUEST Vpiqj(i1,i2,b1,j1) j1
#
            DO b
#
               GET                 Gijib(i2,j1,i1,b) 
               Tqq(b1,b)         = Vpiqj(i1,i2,b1,j1)*Gijib(i2,j1,i1,b)
               Tqq(b1,b)        *= -1.0
               PUT Iab_bb(b1,b) += Tqq(b1,b)
#
            ENDDO b
#
      ENDPARDO b1, i1, i2, j1
#
# Third-term of Iai_aa
# --------------------
#
      PARDO a, b, j1, i1
#
            REQUEST Viabj(i1,a,b,j1) j1
            iqpqp(j1,i1,b,a)  = Viabj(i1,a,b,j1)
#
            DO i2 
#
               GET                 Gijib(i2,j1,i1,b) 
               Tpp(a,i2)         = Gijib(i2,j1,i1,b)*iqpqp(j1,i1,b,a)
               PUT Iai_aa(a,i2) += Tpp(a,i2)
#
            ENDDO i2
#
      ENDPARDO a, b, j1, i1
#
# Fourth-term of Iai_aa
# ---------------------
#
      PARDO a, b, i1, j1 
#
            REQUEST Vpiqj(a,i1,b,j1) j1
#
            DO i2 
#
               GET                 Gijib(i1,j1,i2,b) 
               Tpp(a,i2)         = Vpiqj(a,i1,b,j1)*Gijib(i1,j1,i2,b)
               PUT Iai_aa(a,i2) += Tpp(a,i2)
#
            ENDDO i2 
#
      ENDPARDO a, b, i1, j1
#
# Third-term of Iai_bb
# --------------------
#
      PARDO b, b1, i2, i1
#
            REQUEST Vbbii(b,b1,i2,i1) b1
#
            DO j1
#
               GET                 Gijib(i2,j1,i1,b1) 
               Tqq(b,j1)         = Gijib(i2,j1,i1,b1)*Vbbii(b,b1,i2,i1)
               PUT Iai_bb(b,j1) += Tqq(b,j1)
#
            ENDDO j1
#
      ENDPARDO b, b1, i2, i1
#
# Sixth-term of Iia_bb
# --------------------
#
      PARDO b, i1, i2, j1
#
            GET Gijib(i2,j1,i1,b) 
#
            DO j2
#
               REQUEST             Vpiqj(i2,i1,j1,j2) j2
               Tqq(j2,b)         = Gijib(i2,j1,i1,b)*Vpiqj(i2,i1,j1,j2)
               Tqq(j2,b)        *= -1.0
               PUT Iia_bb(j2,b) += Tqq(j2,b)
#
            ENDDO j2
#
      ENDPARDO b, i1, i2, j1
#
     execute sip_barrier 
#
# beta/alpha/beta/alpha component 
# --------------------------------- 
#
     create Gjija 
     execute sip_barrier 
# 
     PARDO a, i1, j2, j3 
#
           i1ppqq(a,i1,j2,j3) = 0.0 
#
           DO i  
           DO jb 
           DO kb 
#
              REQUEST               Gaijj(a,i,jb,kb) a 
              GET                   IIi(i,i1) 
              GET                   IJj(jb,j2) 
              GET                   IJj(kb,j3) 
              ippjj(a,i1,jb,kb)     = Gaijj(a,i,jb,kb)*IIi(i,i1) 
              ippqj(a,i1,j2,kb)    = ippjj(a,i1,jb,kb)*IJj(jb,j2) 
              ippqq(a,i1,j2,j3)   = ippqj(a,i1,j2,kb)*IJj(kb,j3) 
              i1ppqq(a,i1,j2,j3) += ippqq(a,i1,j2,j3)  
#
           ENDDO kb
           ENDDO jb
           ENDDO i   
           i1ppqq(a,i1,j2,j3)*= etemp 
#
           i2qpqp(j3,i1,j2,a)    = i1ppqq(a,i1,j2,j3) 
           PUT Gjija(j3,i1,j2,a) = i2qpqp(j3,i1,j2,a) 
#
     ENDPARDO a, i1, j2, j3 
     execute sip_barrier 
#
# Compute contributions to one-particle intermediates
# ---------------------------------------------------
#
# Fifth-term of Iij_aa
# --------------------
#
      PARDO j1, j2, a, i2 
#
            REQUEST Vpiqj(a,i2,j2,j1) j1
#
            DO i1
#
               GET                  Gjija(j1,i1,j2,a) 
               Tpp(i2,i1)         = Gjija(j1,i1,j2,a)*Vpiqj(a,i2,j2,j1)
               Tpp(i2,i1)        *= -1.0
               PUT Iij_aa(i2,i1) += Tpp(i2,i1)
#
            ENDDO i1
#
      ENDPARDO j1, j2, a, i2 
#
# Fifth-term of Iij_bb
# --------------------
#
      PARDO i1, j2, a, j1
#
            REQUEST Vpiqj(a,i1,j2,j1) j1
#
            DO j3 
#
               GET                  Gjija(j3,i1,j2,a) 
               Tqq(j1,j3)         = Gjija(j3,i1,j2,a)*Vpiqj(a,i1,j2,j1)
               Tqq(j1,j3)        *= -1.0
               PUT Iij_bb(j1,j3) += Tqq(j1,j3)
#
            ENDDO j3 
#
      ENDPARDO i1, j2, a, j1
#
# Sixth-term of Iij_bb
# --------------------
#
      PARDO j2, i1, a, j1
#
            REQUEST Vpiqj(a,i1,j1,j2) a
#
            DO j3 
#
               GET                  Gjija(j2,i1,j3,a) 
               Tqq(j1,j3)         = Vpiqj(a,i1,j1,j2)*Gjija(j2,i1,j3,a)
               Tqq(j1,j3)        *= -1.0
               PUT Iij_bb(j1,j3) += Tqq(j1,j3)
#
            ENDDO j3 
#
      ENDPARDO j2, i1, a, j1
#
# Sixth-term of Iab_aa
# --------------------
#
      PARDO a, j1, j2, i1
#
            REQUEST Vpiqj(a,i1,j1,j2) a
#
            DO a1
#
               GET                 Gjija(j2,i1,j1,a1) 
               Tpp(a,a1)         = Vpiqj(a,i1,j1,j2)*Gjija(j2,i1,j1,a1)
               Tpp(a,a1)        *= -1.0
               PUT Iab_aa(a,a1) += Tpp(a,a1)
#
            ENDDO a1
#
      ENDPARDO a, j1, j2, i1
#
# Third-term of Iai_aa
# --------------------
#
      PARDO a, a1, j2, j1
#
            REQUEST             Vaajj(a,a1,j2,j1) j1
            iqqpp(j2,j1,a1,a) = Vaajj(a,a1,j2,j1)
#
            DO i1
#
               GET                 Gjija(j2,i1,j1,a1) 
               Tpp(a,i1)         = Gjija(j2,i1,j1,a1)*iqqpp(j2,j1,a1,a)
               PUT Iai_aa(a,i1) += Tpp(a,i1)
#
            ENDDO i1
#
      ENDPARDO a, a1, j2, j1
#
# Third-term of Iai_bb
# --------------------
#
      PARDO b, a, i1, j1
#
            REQUEST             Viabj(i1,a,b,j1) j1
            ipqpq(i1,j1,a,b)  = Viabj(i1,a,b,j1)
#
            DO j2
#
               GET                 Gjija(j2,i1,j1,a) 
               Tqq(b,j2)         = Gjija(j2,i1,j1,a)*ipqpq(i1,j1,a,b)
               PUT Iai_bb(b,j2) += Tqq(b,j2)
#
            ENDDO j2 
#
      ENDPARDO b, a, i1, j1
#
# Fourth-term of Iai_bb
# ---------------------
#
      PARDO b, a, j1, i1
#
            REQUEST Vpiqj(a,i1,b,j1) j1
#
            DO j2 
#
               GET                 Gjija(j1,i1,j2,a) 
               Tqq(b,j2)         = Vpiqj(a,i1,b,j1)*Gjija(j1,i1,j2,a)
               PUT Iai_bb(b,j2) += Tqq(b,j2)
#
            ENDDO j2 
#
      ENDPARDO b, a, j1, i1
#
# Sixth-term of Iia_aa
# --------------------
#
      PARDO a, j1, j2, i1
#
            GET Gjija(j2,i1,j1,a) 
#
            DO i2
#
               REQUEST             Vpiqj(i1,i2,j2,j1) j1
               Tpp(i2,a)         = Gjija(j2,i1,j1,a)*Vpiqj(i1,i2,j2,j1)
               Tpp(i2,a)        *= -1.0
               PUT Iia_aa(i2,a) += Tpp(i2,a)
#
            ENDDO i2
#
      ENDPARDO a, j1, j2, i1
#
      execute sip_barrier
#
# Prepare Gbijk --> Gkijb to be used in intermediate construction 
# ---------------------------------------------------------------
#
     create Gjjjb  
     execute sip_barrier 
#
# beta/beta/beta/beta component 
# ----------------------------- 
# 
     PARDO b, j1, j2, j3 
#
           i1qqqq(b,j1,j2,j3) = 0.0 
#
           DO ib 
           DO jb 
           DO kb 
#
              REQUEST               Gbjjj(b,jb,ib,kb) b 
              GET                   IJj(ib,j1) 
              GET                   IJj(jb,j2) 
              GET                   IJj(kb,j3) 
              iqqjj(b,j1,jb,kb)   = Gbjjj(b,jb,ib,kb)*IJj(ib,j1) 
              iqqqj(b,j1,j2,kb)   = iqqjj(b,j1,jb,kb)*IJj(jb,j2) 
              iqqqq(b,j1,j2,j3)   = iqqqj(b,j1,j2,kb)*IJj(kb,j3) 
              i1qqqq(b,j1,j2,j3) += iqqqq(b,j1,j2,j3)  
#
           ENDDO kb 
           ENDDO jb 
           ENDDO ib 
           i1qqqq(b,j1,j2,j3)*=etemp 
#
           i2qqqq(j3,j2,j1,b)    = i1qqqq(b,j1,j2,j3) 
           PUT Gjjjb(j3,j2,j1,b) = i2qqqq(j3,j2,j1,b) 
#
     ENDPARDO b, j1, j2, j3 
     execute sip_barrier 
#
# Compute contributions to one-particle intermediates
# ---------------------------------------------------
#
#     Contribution to Iij_bb
#     ----------------------
#
      PARDO j1, j2, j3, b 
#
            REQUEST              VSqjqj(b,j2,j3,j1) b
            iqqqq(j2,j3,b,j1)  = VSqjqj(b,j2,j3,j1)
#
            DO j4
#
               GET                  Gjjjb(j4,j2,j3,b) 
               Tqq(j1,j4)         = Gjjjb(j4,j2,j3,b)*iqqqq(j2,j3,b,j1)
               Tqq(j1,j4)        *= -1.0
               PUT Iij_bb(j1,j4) += Tqq(j1,j4)
#
            ENDDO j4
#
      ENDPARDO j1, j2, j3, b 
#
      PARDO j1, j2, j3, b   
#
            REQUEST VSqjqj(b,j2,j1,j3) j3
#
            DO j4
#
               GET                  Gjjjb(j3,j2,j4,b) 
               Tqq(j1,j4)         = VSqjqj(b,j2,j1,j3)*Gjjjb(j3,j2,j4,b)
               Tqq(j1,j4)        *= -0.5
               PUT Iij_bb(j1,j4) += Tqq(j1,j4)
#
            ENDDO j4
#
      ENDPARDO j1, j2, j3, b  
#
#     Contribution to Iab_bb
#     ----------------------
#
      PARDO b, j2, j3, j1
#
            REQUEST             VSqjqj(b,j1,j2,j3) b
            iqqqq(b,j3,j1,j2) = VSqjqj(b,j1,j2,j3)
#
            DO b1
#
               GET                 Gjjjb(j3,j1,j2,b1) 
               Tqq(b,b1)         = iqqqq(b,j3,j1,j2)*Gjjjb(j3,j1,j2,b1)
               Tqq(b,b1)        *= -0.5
               PUT Iab_bb(b,b1) += Tqq(b,b1)
#
            ENDDO b1
#
      ENDPARDO b, j2, j3, j1
#
#     Contribution to Iai_bb
#     ----------------------
#
      PARDO b, b1, j1, j2
#
            REQUEST Vjbbj(j1,b1,b,j2) j2
            REQUEST Vbbjj(b,b1,j1,j2) j2
#
            iqqqq(j1,j2,b1,b)  = Vjbbj(j1,b1,b,j2)
            i1qqqq(j1,j2,b1,b) = Vbbjj(b,b1,j1,j2)
            iqqqq(j1,j2,b1,b) -= i1qqqq(j1,j2,b1,b)
#
            DO j3 
#
               GET                 Gjjjb(j3,j1,j2,b1) 
               Tqq(b,j3)         = Gjjjb(j3,j1,j2,b1)*iqqqq(j1,j2,b1,b)
               PUT Iai_bb(b,j3) += Tqq(b,j3)
#
            ENDDO j3 
#
      ENDPARDO b, b1, j1, j2
#
      PARDO b, b1, j1, j2
#
            REQUEST VSqjqj(b,j1,b1,j2) b  
#
            DO j3 
#
               GET                 Gjjjb(j1,j2,j3,b1) 
               Tqq(b,j3)         = VSqjqj(b,j1,b1,j2)*Gjjjb(j1,j2,j3,b1)
               Tqq(b,j3)        *= 0.5
               PUT Iai_bb(b,j3) += Tqq(b,j3)
#
            ENDDO j3  
#
      ENDPARDO b, b1, j1, j2 
#
      PARDO b, j3, j1, j2
#
            GET Gjjjb(j1,j2,j3,b) 
#
            DO j4 
#
               REQUEST               VSqjqj(j1,j3,j2,j4) j1  
               iqqqq(j4,j1,j2,j3)  = VSqjqj(j1,j3,j2,j4)
               Tqq(j4,b)           = iqqqq(j4,j1,j2,j3)*Gjjjb(j1,j2,j3,b)
               Tqq(j4,b)          *= -0.5
               PUT Iia_bb(j4,b)   += Tqq(j4,b)
#
            ENDDO j4  
#
      ENDPARDO b, j3, j1, j2 
#
     execute sip_barrier 
#
# Prepare Gaibj --> Gijab to be used in intermediate construction 
# ---------------------------------------------------------------
     etemp =-1.0 
#
# alpha/alpha/alpha/alpha component 
# --------------------------------- 
# 
     PARDO a1, a2, i1, i2 
#
           i1pppp(a1,i1,a2,i2) = 0.0 
#
           DO i 
           DO j 
#
              REQUEST                Gaiai(a1,i,a2,j) a1  
              GET                    IIi(i,i1) 
              GET                    IIi(j,i2) 
              tpppi(a1,i1,a2,j)    = Gaiai(a1,i,a2,j)*IIi(i,i1) 
              ipppp(a1,i1,a2,i2)   = tpppi(a1,i1,a2,j)*IIi(j,i2) 
              i1pppp(a1,i1,a2,i2) += ipppp(a1,i1,a2,i2)  
#
           ENDDO j 
           ENDDO i 
          #i1pppp(a1,i1,a2,i2)*=-2.0 
#
           i2pppp(i1,i2,a1,a2)        = i1pppp(a1,i1,a2,i2) 
           PREPARE Giiaa(i1,i2,a1,a2) = i2pppp(i1,i2,a1,a2) 
#
     ENDPARDO a1, a2, i1, i2 
     execute server_barrier 
#
# Compute contributions to one-particle intermediates
# ---------------------------------------------------
#
# First-term of Iij_aa
# --------------------
#
      PARDO i2, a1, a, i3
#
           REQUEST              VSpipi(a,i2,a1,i3) i3
           ipppp(i2,a1,a,i3)  = VSpipi(a,i2,a1,i3)
#
           DO i1
#
              REQUEST              Giiaa(i1,i2,a1,a) a
              Tpp(i3,i1)         = Giiaa(i1,i2,a1,a)*ipppp(i2,a1,a,i3)
              Tpp(i3,i1)        *= -2.0
              PUT Iij_aa(i3,i1) += Tpp(i3,i1)
#
           ENDDO i1
#
      ENDPARDO i2, a1, a, i3
#
# First-term of Iab_aa
# --------------------
#
      PARDO a, a2, i2, i1
#
            REQUEST VSpipi(a,i2,a2,i1) i1
#
            DO a1
#
               REQUEST             Giiaa(i2,i1,a1,a2) a2
               Tpp(a,a1)         = VSpipi(a,i2,a2,i1)*Giiaa(i2,i1,a1,a2)
               Tpp(a,a1)        *= -2.0
               PUT Iab_aa(a,a1) += Tpp(a,a1)
#
            ENDDO a1
#
      ENDPARDO a, a2, i2, i1
#
# First-term of Iai_aa
# --------------------
#
      PARDO a, a1, a2, i1
#
            REQUEST             VSaaai(a1,a,a2,i1) i1
            ipppp(i1,a1,a2,a) = VSaaai(a1,a,a2,i1)
#
            DO i2
#
               REQUEST             Giiaa(i2,i1,a1,a2) a2
               Tpp(a,i2)         = Giiaa(i2,i1,a1,a2)*ipppp(i1,a1,a2,a)
               Tpp(a,i2)        *= 2.0
               PUT Iai_aa(a,i2) += Tpp(a,i2)
#
            ENDDO i2
#
      ENDPARDO a, a1, a2, i1
#
# First-term of Iia_aa
# --------------------
#
      PARDO a, a1, i2, i1
#
            REQUEST Giiaa(i2,i1,a,a1) a1
#
            DO i3
#
               REQUEST              VSpipi(a1,i1,i3,i2) i2
               Tpp(i3,a)           = VSpipi(a1,i1,i3,i2)*Giiaa(i2,i1,a,a1)
               Tpp(i3,a)          *= -2.0
               PUT Iia_aa(i3,a)   += Tpp(i3,a)
#
            ENDDO i3
#
      ENDPARDO a, a1, i2, i1
#
# Prepare Gaibj --> Gijab to be used in intermediate construction 
# ---------------------------------------------------------------
#
# alpha/beta/alpha/beta component 
# --------------------------------- 
# 
     PARDO a1, b2, i1, j2 
#
           i1ppqq(a1,i1,b2,j2) = 0.0 
#
           DO i 
           DO jb 
#
              REQUEST                Gaibj(a1,i,b2,jb) a1  
              GET                    IIi(i,i1) 
              GET                    IJJ(jb,j2) 
              tppqj(a1,i1,b2,jb)   = Gaibj(a1,i,b2,jb)*IIi(i,i1) 
              ippqq(a1,i1,b2,j2)   = tppqj(a1,i1,b2,jb)*IJJ(jb,j2) 
              i1ppqq(a1,i1,b2,j2) += ippqq(a1,i1,b2,j2)  
#
           ENDDO jb 
           ENDDO i 
          #i1ppqq(a1,i1,b2,j2)*=-4.0 
#
           i2pqpq(i1,j2,a1,b2)        = i1ppqq(a1,i1,b2,j2) 
           PREPARE Gijab(i1,j2,a1,b2) = i2pqpq(i1,j2,a1,b2) 
#
     ENDPARDO a1, b2, i1, j2 
     execute server_barrier 
#
# Compute contributions to one-particle intermediates
# ---------------------------------------------------
#
# First-term of Iij_aa
# --------------------
#
      PARDO j1, a, b, i2
#
           REQUEST Vpiqj(a,i2,b,j1) j1
#
           DO i1
#
              REQUEST              Gijab(i1,j1,a,b) b
              Tpp(i2,i1)         = Gijab(i1,j1,a,b)*Vpiqj(a,i2,b,j1)
              Tpp(i2,i1)        *= -4.0
              PUT Iij_aa(i2,i1) += Tpp(i2,i1)
#
           ENDDO i1
#
      ENDPARDO j1, a, b, i2
#
# First-term of Iij_bb
# --------------------
#
      PARDO i1, b, a, j1
#
            REQUEST Vpiqj(a,i1,b,j1) j1
#
            DO j2
#
               REQUEST              Gijab(i1,j2,a,b) b
               Tqq(j1,j2)         = Gijab(i1,j2,a,b)*Vpiqj(a,i1,b,j1)
               Tqq(j1,j2)        *= -4.0
               PUT Iij_bb(j1,j2) += Tqq(j1,j2)
#
            ENDDO j2
#
      ENDPARDO i1, b, a, j1
#
# First-term of Iab_aa
# --------------------
#
      PARDO a, b, i1, j1
#
            REQUEST Vpiqj(a,i1,b,j1) j1
#
            DO a1
#
               REQUEST             Gijab(i1,j1,a1,b) b
               Tpp(a,a1)         = Vpiqj(a,i1,b,j1)*Gijab(i1,j1,a1,b)
               Tpp(a,a1)        *= -4.0
               PUT Iab_aa(a,a1) += Tpp(a,a1)
#
            ENDDO a1
#
      ENDPARDO a, b, i1, j1
#
# First-term of Iab_bb
# --------------------
#
      PARDO b1, a, j1, i1
#
            REQUEST Vpiqj(a,i1,b1,j1) j1
#
            DO b
#
               REQUEST             Gijab(i1,j1,a,b) b
               Tqq(b1,b)         = Vpiqj(a,i1,b1,j1)*Gijab(i1,j1,a,b)
               Tqq(b1,b)        *= -4.0
               PUT Iab_bb(b1,b) += Tqq(b1,b)
#
            ENDDO b
#
      ENDPARDO b1, a, j1, i1
#
# First-term of Iai_aa
# --------------------
#
      PARDO a, a1, b, j1
#
            REQUEST Vaabj(a1,a,b,j1) j1
            iqpqp(j1,a1,b,a)  = Vaabj(a1,a,b,j1)
#
            DO i1
#
               REQUEST             Gijab(i1,j1,a1,b) b
               Tpp(a,i1)         = Gijab(i1,j1,a1,b)*iqpqp(j1,a1,b,a)
               Tpp(a,i1)        *= 4.0
               PUT Iai_aa(a,i1) += Tpp(a,i1)
#
            ENDDO i1
#
      ENDPARDO a, a1, b, j1
#
# First-term of Iai_bb
# --------------------
#
      PARDO b, b1, a, i1
#
            REQUEST             Vbbai(b1,b,a,i1) i1
            ipqpq(i1,b1,a,b)  = Vbbai(b1,b,a,i1)
#
            DO j1
#
               REQUEST             Gijab(i1,j1,a,b1) b1
               Tqq(b,j1)         = Gijab(i1,j1,a,b1)*ipqpq(i1,b1,a,b)
               Tqq(b,j1)        *= 4.0
               PUT Iai_bb(b,j1) += Tqq(b,j1)
#
            ENDDO j1
#
      ENDPARDO b, b1, a, i1
#
# First-term of Iia_aa
# --------------------
#
      PARDO a, b, i1, j1
#
            REQUEST Gijab(i1,j1,a,b) b
#
            DO i2
#
               REQUEST             Vpiqj(i2,i1,b,j1) j1
               Tpp(i2,a)         = Vpiqj(i2,i1,b,j1)*Gijab(i1,j1,a,b)
               Tpp(i2,a)        *= -4.0
               PUT Iia_aa(i2,a) += Tpp(i2,a)
#
            ENDDO i2
#
      ENDPARDO a, b, i1, j1
#
# First-term of Iia_bb
# --------------------
#
      PARDO b, a, j1, i1
#
            REQUEST Gijab(i1,j1,a,b) b
#
            DO j2
#
               REQUEST             Vpiqj(a,i1,j2,j1) j1
               Tqq(j2,b)         = Vpiqj(a,i1,j2,j1)*Gijab(i1,j1,a,b)
               Tqq(j2,b)        *= -4.0
               PUT Iia_bb(j2,b) += Tqq(j2,b)
#
            ENDDO j2
#
      ENDPARDO b, a, j1, i1
#
# Prepare Gaibj --> Gijab to be used in intermediate construction 
# ---------------------------------------------------------------
#
# beta/beta/beta/beta component 
# --------------------------------- 
# 
     PARDO b1, b2, j1, j2 
#
           i1qqqq(b1,j1,b2,j2) = 0.0 
#
           DO ib 
           DO jb 
#
              REQUEST                Gbjbj(b1,ib,b2,jb) b1  
              GET                    IJj(ib,j1) 
              GET                    IJj(jb,j2) 
              tqqqj(b1,j1,b2,jb)   = Gbjbj(b1,ib,b2,jb)*IJj(ib,j1) 
              iqqqq(b1,j1,b2,j2)   = tqqqj(b1,j1,b2,jb)*IJj(jb,j2) 
              i1qqqq(b1,j1,b2,j2) += iqqqq(b1,j1,b2,j2)  
#
           ENDDO jb  
           ENDDO ib  
          #i1qqqq(b1,j1,b2,j2)*=-2.0 
#
           i2qqqq(j1,j2,b1,b2)        = i1qqqq(b1,j1,b2,j2) 
           PREPARE Gjjbb(j1,j2,b1,b2) = i2qqqq(j1,j2,b1,b2) 
#
     ENDPARDO b1, b2, j1, j2 
     execute server_barrier 
#
# Compute contributions to one-particle intermediates
# ---------------------------------------------------
#
# First-term of Iij_bb
# --------------------
#
      PARDO j2, b1, b, j3
#
           REQUEST              VSqjqj(b,j2,b1,j3) j3
           iqqqq(j2,b1,b,j3)  = VSqjqj(b,j2,b1,j3)
#
           DO j1
#
              REQUEST              Gjjbb(j1,j2,b1,b) b
              Tqq(j3,j1)         = Gjjbb(j1,j2,b1,b)*iqqqq(j2,b1,b,j3)
              Tqq(j3,j1)        *= -2.0
              PUT Iij_bb(j3,j1) += Tqq(j3,j1)
#
           ENDDO j1
#
      ENDPARDO j2, b1, b, j3
#
# First-term of Iab_bb
# --------------------
#
      PARDO b, b2, j2, j1
#
            REQUEST VSqjqj(b,j2,b2,j1) j1
#
            DO b1
#
               REQUEST             Gjjbb(j2,j1,b1,b2) b2
               Tqq(b,b1)         = VSqjqj(b,j2,b2,j1)*Gjjbb(j2,j1,b1,b2)
               Tqq(b,b1)        *= -2.0
               PUT Iab_bb(b,b1) += Tqq(b,b1)
#
            ENDDO b1
#
      ENDPARDO b, b2, j2, j1
#
# First-term of Iai_bb
# --------------------
#
      PARDO b, b1, b2, j1
#
            REQUEST             VSbbbj(b1,b,b2,j1) j1
            iqqqq(j1,b1,b2,b) = VSbbbj(b1,b,b2,j1)
#
            DO j2
#
               REQUEST             Gjjbb(j2,j1,b1,b2) b2
               Tqq(b,j2)         = Gjjbb(j2,j1,b1,b2)*iqqqq(j1,b1,b2,b)
               Tqq(b,j2)        *= 2.0
               PUT Iai_bb(b,j2) += Tqq(b,j2)
#
            ENDDO j2
#
      ENDPARDO b, b1, b2, j1
#
# First-term of Iia_bb
# --------------------
#
      PARDO b, b1, j2, j1
#
            REQUEST Gjjbb(j2,j1,b,b1) b1
#
            DO j3
#
               REQUEST              VSqjqj(b1,j1,j3,j2) j2
               Tqq(j3,b)           = VSqjqj(b1,j1,j3,j2)*Gjjbb(j2,j1,b,b1)
               Tqq(j3,b)          *= -2.0
               PUT Iia_bb(j3,b)   += Tqq(j3,b)
#
            ENDDO j3
#
      ENDPARDO b, b1, j2, j1
#
# Done formation of the one-particle intermediate contributions coming from
# the two-particle density from T3. 
# -------------------------------------------------------------------------- 
#
     ENDPROC FORM_ONEI    
#    -----------------  
#
# --------------------------------------------------------------------------
#
     PROC WRITE_BLOCKDATA1 
#    --------------------- 
#
#   Write BLOCKDATA file.
#
      execute server_barrier 
#
#     Two-electron integrals 
#     ---------------------- 
#
      execute blocks_to_list                VSpipi(p,i1,p1,i2)
      execute blocks_to_list                Vaaii
      execute blocks_to_list                Viaai
      execute blocks_to_list                VSaaai
      execute blocks_to_list                VSqjqj(q,j1,q1,j2)
      execute blocks_to_list                Vbbjj
      execute blocks_to_list                Vjbbj
      execute blocks_to_list                VSbbbj
      execute blocks_to_list                Vbbii
      execute blocks_to_list                Vjbii
      execute blocks_to_list                Vbbai
      execute blocks_to_list                Vpiqj(p,i1,q,j2)
      execute blocks_to_list                Vaajj
      execute blocks_to_list                Viabj
      execute blocks_to_list                Vaabj
#
#     CCSD amplitudes 
#     --------------- 
#
      execute blocks_to_list                t1a_old(a,i1) 
      execute blocks_to_list                t1b_old(b,j1)
      execute blocks_to_list                T2aiai(a,i1,a1,i2) 
      execute blocks_to_list                T2aibj(a,i1,b,j1) 
      execute blocks_to_list                T2bjbj(b,j1,b1,j2) 
#
# --------------------------------------------------------------------------
#
     ENDPROC WRITE_BLOCKDATA1 
#    ------------------------ 
#
#
     PROC WRITE_BLOCKDATA2 
#    ---------------------  
#
#     Triples modification of lambda equations 
#     ---------------------------------------- 
#
      execute blocks_to_list                fsai 
      execute blocks_to_list                fsbj  
      execute blocks_to_list                saiai  
      execute blocks_to_list                saibj  
      execute blocks_to_list                sbjbj  
#
#     One-particle intermediates 
#     -------------------------- 
#
      execute blocks_to_list                Iij_aa 
      execute blocks_to_list                Iij_bb 
      execute blocks_to_list                Iia_aa 
      execute blocks_to_list                Iia_bb 
      execute blocks_to_list                Iab_aa 
      execute blocks_to_list                Iab_bb 
      execute blocks_to_list                Iai_aa 
      execute blocks_to_list                Iai_bb 
#
#     Contribution to one-density 
#     --------------------------- 
#
      execute blocks_to_list                Daa 
      execute blocks_to_list                Dbb 
      execute blocks_to_list                Dii 
      execute blocks_to_list                Djj 
      execute blocks_to_list                DDai 
      execute blocks_to_list                DDbj 
#
#     Two particle density 
#     -------------------- 
#
      execute blocks_to_list                SGaaai
      execute blocks_to_list                SGbbbj
      execute blocks_to_list                SGaabj
      execute blocks_to_list                SGbbai
#
      execute write_blocks_to_list
 
      execute server_barrier
#
     ENDPROC WRITE_BLOCKDATA2 
#    ------------------------  
#
# --------------------------------------------------------------------------
#
#
# --------------------------------------------------------------------------
#
# --------------------------------------------------------------------------
#
# MAIN PROGRAM 
#
# --------------------------------------------------------------------------
#
# Compute E^{(T)} contribution and form sai, sbj, saaii, sbbjj, and sabij   
# -----------------------------------------------------------------------  
#
     execute sip_barrier 
     create sai  
     create sbj  
     create Dai  
     create Dbj  
     create Da  
     create DaS 
     create DbS 
     create Db 
     create Di  
     create Dj 
     execute sip_barrier 
#
     CALL READ_BLOCKDATA  
     CALL PDATA 
     CALL FORM_IDENTITY   
     CALL T4AAA 
    #CALL T4BBB 
     CALL ST5  #--> Not used in this version to compute the energy only for comparison  
#
# Compute contributions to one-particle intermediates 
# --------------------------------------------------- 
#
     CALL FORM_ONEI 
#
# Backtransform two-density to Gxxxi and Gxxxj 
# -------------------------------------------- 
#
     CALL B3TRAN 
#
# Compute gradient contribution from Gxxxx * I'xxxx 
# ------------------------------------------------- 
#
      CALL PDCONT 

# Test routines to print data out for debugging 
# --------------------------------------------- 
#
#     CALL PRINT_Gaaai # --> Symmetric  
#     CALL PRINT_Gaiii # --> Symmetric  
#     CALL PRINT_Gaiai # --> Symmetric  
#
     execute server_barrier 

# Prepare s arrays to be written out and used in lambda  
# -----------------------------------------------------  
#
     CALL S_PREP 
#
      destroy VSpipi
      destroy Vaaii
      destroy Viaai
      destroy VSaaai
      destroy VSqjqj
      destroy Vbbjj
      destroy Vjbbj
      destroy VSbbbj
      destroy Vbbii
      destroy Vjbii
      destroy Vbbai
      destroy Vpiqj
      destroy Vaajj
      destroy Viabj
      destroy Vaabj

      destroy t1a_old
      destroy t1b_old
      destroy T2aiai
      destroy T2aibj
      destroy T2bjbj

     execute server_barrier 
     CALL READ_BLOCKDATA  
     execute server_barrier 
     CALL WRITE_BLOCKDATA1   
     CALL WRITE_BLOCKDATA2   
     execute server_barrier 
#
#
     ENDSIAL TRY4_GRAD     





#
#
#
