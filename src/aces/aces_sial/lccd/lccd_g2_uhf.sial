#  Copyright (c) 2003-2010 University of Florida
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  The GNU General Public License is included in this distribution
#  in the file COPYRIGHT.
                    SIAL TWO_GRAD_UHF_LCCD   
#
# This SIAL program computes the one and two particle density 
# matrices. It is functional and debugged. This code backtransforms 
# the two particle density matrix so that only it need be stored.   
# The one-particle intermediates are not computed in this SIAL code. 
#
#                  ##################### 
#                  #  WORKING VERSION  #
#                  ##################### 
#
# Note that use of permutational symmetry has not been incorporated 
#
# PROCEDURES OPTIMIZED 
# -------------------- 
#
# ---------------------------------------------------------------------------------------- 
#
# Declare indeces
# ---------------
#
      aoindex mu     = 1, norb
      aoindex nu     = 1, norb
      aoindex lambda = 1, norb
      aoindex sigma  = 1, norb
#
      moaindex i = baocc, eaocc
      moaindex i1= baocc, eaocc
      moaindex i2= baocc, eaocc
      moaindex i3= baocc, eaocc
#
      moaindex a = bavirt, eavirt
      moaindex a1= bavirt, eavirt
      moaindex a2= bavirt, eavirt
      moaindex a3= bavirt, eavirt
#
      mobindex j = bbocc, ebocc
      mobindex j1= bbocc, ebocc
      mobindex j2= bbocc, ebocc
      mobindex j3= bbocc, ebocc
#
      mobindex b = bbvirt, ebvirt
      mobindex b1= bbvirt, ebvirt
      mobindex b2= bbvirt, ebvirt
      mobindex b3= bbvirt, ebvirt
      moaindex p = baocc, eavirt
      moaindex p1= baocc, eavirt
      moaindex p2= baocc, eavirt
      moaindex p3= baocc, eavirt
#
      mobindex q = bbocc, ebvirt
      mobindex q1= bbocc, ebvirt
      mobindex q2= bbocc, ebvirt
      mobindex q3= bbocc, ebvirt
#
      temp dx1(mu,nu,lambda,sigma) 
      temp dy1(mu,nu,lambda,sigma) 
      temp dz1(mu,nu,lambda,sigma) 
      temp dx2(mu,nu,lambda,sigma) 
      temp dy2(mu,nu,lambda,sigma) 
      temp dz2(mu,nu,lambda,sigma) 
      temp dx3(mu,nu,lambda,sigma) 
      temp dy3(mu,nu,lambda,sigma) 
      temp dz3(mu,nu,lambda,sigma) 
      temp dx4(mu,nu,lambda,sigma) 
      temp dy4(mu,nu,lambda,sigma) 
      temp dz4(mu,nu,lambda,sigma) 
#
# Declare served arrays
# ---------------------
#
      served T2old_aa(a,i,a1,i1)
      served T2old_bb(b,j,b1,j1)
      served T2old_ab(a,i,b,j)
      served L2old_aa(i,a,i1,a1)
      served L2old_bb(j,b,j1,b1)
      served L2old_ab(i,a,j,b)
      served Dijab_aa(i,i1,a,a1)
      served Dijab_ab(i,j,a,b)
      served Dijab_bb(j,j1,b,b1)
      distributed Dabcd_aa(a,a2,a3,a1) # -> never used 
      distributed Dabcd_bb(b2,b1,b,b3) # -> never used 
      distributed Dabcd_ab(a,b,a1,b1)  # -> never used 
      served Dijkl_aa(i2,i,i3,i1)
      served Vijmn_aaaa(i,i2,i1,i3)
      served Dijkl_bb(j,j2,j1,j3)
      served Vijmn_bbbb(j,j2,j1,j3)
      served Dijkl_ab(i,j,i1,j1)
      served Vijmn_abab(i,j,i1,j1)

      served Vibja_aaaa(i,a,i1,a1)
      served Dibja_aaaa(i,a,i1,a1)
      served Vibja_abab(i,b,i1,b1)
      served Dibja_abab(i,b,i1,b1)
      served Vibja_baba(j,a,j1,a1)
      served Dibja_baba(j,a,j1,a1)
      served Vibja_bbbb(j,b,j1,b1)
      served Dibja_bbbb(j,b,j1,b1)
      served Dibja_baab(j,a,i,b)
      served Vibja_baab(j,a,i,b)
      served Dibja_abba(i,b,j,a)
      served Vibja_abba(i,b,j,a) 

      served Dabci_aaaa(a,a2,a1,i)
      served Dabci_abab(a,b,a1,j)
      served Dabci_baba(b,a,b1,i)
      served Dabci_bbbb(b,b2,b1,j)
      served Dijka_aaaa(i,i2,i1,a)
      served Dijka_abab(i,j,i1,b)
      served Dijka_baba(j,i,j1,a)
      served Dijka_bbbb(j,j2,j1,b)
      served Dxaai(mu,a,a1,i) 
      served Dxxai(mu,nu,a1,i) 
      served Dxxxi(mu,nu,sigma,i) 
      served Dxbbj(mu,b,b1,j) 
      served Dxxbj(mu,nu,b1,j) 
      served Dxxxj(mu,nu,sigma,j) 
#
      served Dxbaj(mu,b,a1,j) 
      served Dxxaj(mu,nu,a1,j) 
      served Dxabi(mu,a,b1,i) 
      served Dxxbi(mu,nu,b1,i) 
      served Dxiii(mu,i,i1,i2) 
      served Dxxii(mu,nu,i1,i2) 
      served Dxjjj(mu,j,j1,j2) 
      served Dxxjj(mu,nu,j1,j2) 
      served Dxjij(mu,j,i1,j2) 
      served Dxxij(mu,nu,i1,j2) 
      served Diaix(i,a,i1,sigma) 
      served Dixix(i,nu,i1,sigma) 
      served Dxiix(nu,i,i1,sigma) 
      served Dixxx(i,nu,lambda,sigma) 
      served Djbjx(j,b,j1,sigma) 
      served Djxjx(j,nu,j1,sigma) 
      served Dxjjx(nu,j,j1,sigma) 
      served Djxxx(j,nu,lambda,sigma) 
#
      served Dibix(i,b,i1,sigma) 
      served Djajx(j,a,j1,sigma) 
      served Dibjx(i,b,j1,sigma) 
      served Dixjx(i,nu,j1,sigma) 
      served Dixxj(i,nu,sigma,j1) 
      served Djaix(j,a,i1,sigma) 
      served Djxix(j,nu,i1,sigma) 
      served Diiax(i,i1,a,sigma) 
      served Diixx(i,i1,lambda,sigma) 
      served Djjbx(j,j1,b,sigma) 
      served Djjxx(j,j1,lambda,sigma) 
      served Dijax(i,j1,a,sigma) 
      served Dijxx(i,j1,lambda,sigma) 
      served Diiix(i,i1,i2,sigma) 
      served Djjjx(j,j1,j2,sigma) 
      served Dijix(i,j1,i2,sigma) 
      served Djijx(j,i1,j2,sigma) 
      served Djixx(j,i1,lambda,sigma) 
#
      served I3AA(i,a,i1,i2) 
      served I3AB(i,a,j,j1) 
      served I3BA(j,b,i,i1) 
      served I3BB(j,b,j1,j2) 
#
      served TAO_aa(mu,i,nu,i1)  
      served TAO_ab(mu,i,nu,j)  
      served TAO_bb(mu,j,nu,j1)  
      served LAO_aa(i,mu,i1,nu)  
      served LAO_ab(i,mu,j,nu)  
      served LAO_bb(j,mu,j1,nu)  
      served Tau_aa(a,i,a1,i1)
      served Tau_bb(b,j,b1,j1)
      served Tau_ab(a,i,b,j)
#
# Done declare served arrays
# --------------------------
#
      distributed t1a_old(a,i)
      distributed t1b_old(b,j)
      distributed l1a_old(i,a)
      distributed l1b_old(j,b)
# 
      distributed Gmi_a(i,i1) 
      distributed Gmi_b(j,j1) 
      distributed Gae_a(a,a1) 
      distributed Gae_b(b,b1) 
# 
      distributed Doldai_a(a,i)
      distributed Doldai_b(b,j)
      distributed DOR_ii(i,i1)
      distributed DOR_jj(j,j1)
      distributed DOR_aa(a,a1)
      distributed DOR_bb(b,b1) 
      distributed DpqA(mu,nu) 
      distributed DpqB(mu,nu) 
      distributed DHFA(mu,nu) 
      distributed DHFB(mu,nu) 
      local LDpqA(mu,nu) 
      local LDpqB(mu,nu) 
      local LDHFA(mu,nu) 
      local LDHFB(mu,nu) 
      temp Tpq(mu,nu) 
      temp Txx(mu,nu) 
      temp Txi(mu,i) 
      temp Txj(mu,j) 
#
      distributed Dij_a(i,i1) 
      distributed Dij_b(j,j1) 
      distributed Dab_a(a,a1) 
      distributed Dab_b(b,b1) 
      distributed Dii(i,i1)
      distributed Daa(a1,a)
      distributed Djj(j,j1)
      distributed Dbb(b1,b)
#
      temp PXXXX(mu,nu,lambda,sigma) 
      temp TXXXX(mu,nu,lambda,sigma) 
      temp T1XXXX(mu,nu,lambda,sigma) 
      temp T2XXXX(mu,nu,lambda,sigma) 
      temp T3XXXX(mu,nu,lambda,sigma) 
      temp P1XXXX(mu,nu,lambda,sigma) 
#
      temp Txaai(mu,a,a1,i) 
      temp Txxai(mu,nu,a1,i) 
      temp Txxxi(mu,nu,sigma,i) 
      temp T1xxxi(mu,nu,sigma,i) 
      temp Txixx(mu,i,lambda,sigma) 
      temp T1xixx(mu,i,lambda,sigma) 
#
      temp Txbbj(mu,b,b1,j) 
      temp Txxbj(mu,nu,b1,j) 
      temp Txxxj(mu,nu,sigma,j) 
      temp T1xxxj(mu,nu,sigma,j) 
      temp Txjxx(mu,j,lambda,sigma) 
      temp T1xjxx(mu,j,lambda,sigma) 
#
      temp Txbaj(mu,b,a1,j) 
      temp Txxaj(mu,nu,a1,j) 
#
      temp Txabi(mu,a,b1,i) 
      temp Txxbi(mu,nu,b1,i) 
#
      temp Txiii(mu,i,i1,i2) 
      temp T1xiii(mu,i,i1,i2) 
      temp Txxii(mu,nu,i1,i2) 
      temp T1xxii(mu,nu,i1,i2) 
#
      temp Txjjj(mu,j,j1,j2) 
      temp T1xjjj(mu,j,j1,j2) 
      temp Txxjj(mu,nu,j1,j2) 
      temp T1xxjj(mu,nu,j1,j2) 
#
      temp Txjij(mu,j,i1,j2) 
      temp T1xjij(mu,j,i1,j2) 
      temp Txxij(mu,nu,i1,j2) 
      temp T1xxij(mu,nu,i1,j2) 
#
      temp Tiaix(i,a,i1,sigma) 
      temp T1iaix(i,a,i1,sigma) 
      temp Tixix(i,nu,i1,sigma) 
      temp T1ixix(i,nu,i1,sigma) 
      temp Tixxx(i,nu,lambda,sigma) 
      temp T1ixxx(i,nu,lambda,sigma) 
      temp Txiix(nu,i,i1,sigma) 
      temp T1xiix(nu,i,i1,sigma) 
#
      temp Tjbjx(j,b,j1,sigma) 
      temp T1jbjx(j,b,j1,sigma) 
      temp Tjxjx(j,nu,j1,sigma) 
      temp T1jxjx(j,nu,j1,sigma) 
      temp Tjxxx(j,nu,lambda,sigma) 
      temp T1jxxx(j,nu,lambda,sigma) 
      temp Txjjx(nu,j,j1,sigma) 
      temp T1xjjx(nu,j,j1,sigma) 
#
      temp Tibix(i,b,i1,sigma) 
      temp T1ibix(i,b,i1,sigma) 
#
      temp Tjajx(j,a,j1,sigma) 
      temp T1jajx(j,a,j1,sigma) 

      temp Tibjx(i,b,j1,sigma) 
      temp T1ibjx(i,b,j1,sigma) 
      temp Tixjx(i,nu,j1,sigma) 
      temp Tixxj(i,nu,sigma,j1)    
      temp T1ixxj(i,nu,sigma,j1)    
#
      temp Tjaix(j,a,i1,sigma) 
      temp T1jaix(j,a,i1,sigma) 
      temp Tjxix(j,nu,i1,sigma) 
#
      temp Tiiax(i,i1,a,sigma) 
      temp T1iiax(i,i1,a,sigma) 
      temp Tiixx(i,i1,lambda,sigma) 
      temp T1iixx(i,i1,lambda,sigma) 
#
      temp Tjjbx(j,j1,b,sigma) 
      temp T1jjbx(j,j1,b,sigma) 
      temp Tjjxx(j,j1,lambda,sigma) 
      temp T1jjxx(j,j1,lambda,sigma) 
#
      temp Tijax(i,j1,a,sigma) 
      temp T1ijax(i,j1,a,sigma) 
      temp Tijxx(i,j1,lambda,sigma) 
      temp T1ijxx(i,j1,lambda,sigma) 
#
      temp Tiiix(i,i1,i2,sigma) 
#
      temp Tjjjx(j,j1,j2,sigma) 
#
      temp Tijix(i,j1,i2,sigma) 
#
      temp Tjijx(j,i1,j2,sigma) 
#
      temp Tjixx(j,i1,lambda,sigma) 
#
# Define Local arrays 
# ------------------- 
#
     local Laa(a,a1) 
     distributed L1aa(a1,a) 
     local Lbb(b,b1) 
     local L1bb(b1,b) 
     local Lai(a,i) 
     distributed L1ai(a1,i) 
     local Lbj(b,j) 
     local L1bj(b1,j) 
#
     local Lxxai(mu,nu,a2,i) 
     local Lxxaj(mu,nu,a1,j) 
     local Lxxbj(mu,nu,b2,j) 
     local Lxxbi(mu,nu,b,i) 
#
#    ------------------------------------------------------------------------
#
# Declare temporary arrays
# ------------------------
#
      temp Taiai(p,i,p1,i1)
      temp Laiai(p,i,p1,i1)
#
      temp  Tiaia(i,a,i1,a1)
      temp T1iaia(i,a,i1,a1)
      temp T2iaia(i,a,i1,a1)
      temp T3iaia(i,a,i1,a1)
      temp T4iaia(i,a,i1,a1)
      temp TAiaia(i,a,i1,a1)
      temp  Tjbjb(j,b,j1,b1)
      temp T1jbjb(j,b,j1,b1)
      temp T2jbjb(j,b,j1,b1)
      temp T3jbjb(j,b,j1,b1)
      temp T4jbjb(j,b,j1,b1)
      temp TAjbjb(j,b,j1,b1)
      temp  Tiajb(i,a,j,b)
      temp T1iajb(i,a,j,b)
      temp T2iajb(i,a,j,b)
      temp TAiajb(i,a,j,b)
      temp  Tibib(i,b,i1,b1)
      temp T1ibib(i,b,i1,b1)
      temp T2ibib(i,b,i1,b1)
      temp TAibib(i,b,i1,b1)
      temp  Tjaja(j,a,j1,a1)
      temp T1jaja(j,a,j1,a1)
      temp T2jaja(j,a,j1,a1)
      temp TAjaja(j,a,j1,a1)
#
      temp Tbjbj(q,j,q1,j1)
      temp Lbjbj(q,j,q1,j1)
      temp Taibj(p,i,q,j)
      temp T1aibj(p,i,q,j)
#
      temp tmp1_aiai(a,i,a1,i1)
      temp tmp2_aiai(a,i,a1,i1)
      temp tmp1_bjbj(b,j,b1,j1)
      temp tmp2_bjbj(b,j,b1,j1)
      temp tmp1_aibj(a,i,b,j)
#
      temp Tai(a,i)
      temp T1ai(a,i)
      temp Tbj(b,j)
      temp T1bj(b,j)
#
      temp Taa(a,a1)
      temp T1aa(a,a1)
      temp Tbb(b,b1)
      temp T1bb(b,b1)
      temp Tae_a(a,a1)
      temp Tae_b(b,b1)
      temp Tia(i,a)
      temp T1ia(i,a)
      temp T2ia(i,a)
      temp T3ia(i,a)
      temp T4ia(i,a)
      temp Tjb(j,b)
      temp T1jb(j,b)
      temp T2jb(j,b)
      temp T3jb(j,b)
      temp T4jb(j,b)
      temp Tme_a(i,a)
      temp Tme_b(j,b)
#
      temp Tii(i,i1)
      temp T1ii(i,i1)
      temp Tjj(j,j1)
      temp T1jj(j,j1)
      temp Tmi_a(i,i1)
      temp Tmi_b(j,j1)
#
      temp Liaai(i,a,a1,i1) 
      temp Tiaai(i,a,a1,i1) 
      temp T1iaai(i,a,a1,i1) 
      temp Ljbbj(j,b,b1,j1) 
      temp Tjbbj(j,b,b1,j1) 
      temp T1jbbj(j,b,b1,j1) 
      temp Liabj(i,a,b,j) 
      temp Tiabj(i,a,b,j) 
      temp Lbjai(b,j,a,i) 
      temp Tbjai(b,j,a,i) 
      temp Ljbai(j,b,a,i) 
      temp Tjbai(j,b,a,i) 
      temp Taaaa(a,a1,a2,a3) 
      temp T1aaaa(a,a1,a2,a3) 
      temp Taabb(a,a1,b,b1) 
      temp T1aabb(a,a1,b,b1) 
      temp Tbbbb(b,b1,b2,b3) 
      temp T1bbbb(b,b1,b2,b3) 
      temp Tiiii(i,i1,i2,i3) 
      temp T1iiii(i,i1,i2,i3) 
      temp Tiijj(i,i1,j,j1) 
      temp T1iijj(i,i1,j,j1) 
      temp Tjjjj(j,j1,j2,j3) 
      temp T1jjjj(j,j1,j2,j3) 
      temp Tiiaa(i,i1,a,a1) 
      temp TAiiaa(i,i1,a,a1) 
      temp T1iiaa(i,i1,a,a1) 
      temp T2iiaa(i,i1,a,a1) 
      temp Tiibb(i,i1,b,b1) 
      temp T1iibb(i,i1,b,b1) 
      temp T2iibb(i,i1,b,b1) 
      temp TAiibb(i,i1,b,b1) 
      temp Tjjaa(j,j1,a,a1) 
      temp T1jjaa(j,j1,a,a1) 
      temp T2jjaa(j,j1,a,a1) 
      temp TAjjaa(j,j1,a,a1) 
      temp Tjjbb(j,j1,b,b1) 
      temp TAjjbb(j,j1,b,b1) 
      temp T1jjbb(j,j1,b,b1) 
      temp T2jjbb(j,j1,b,b1) 
      temp T1iabj(i,a,b,j) 
      temp T1jbai(j,b,a,i) 
      temp T1bjia(b,j,i,a) 
      temp Tiaii(i,a,i1,i2) 
      temp Tjbjj(j,b,j1,j2) 
      temp Tiajj(i,a,j,j1) 
      temp Tjbii(j,b,i,i1) 
      temp Taaai(a,a1,a2,i) 
      temp T1aaai(a,a1,a2,i) 
      temp Taabj(a,a1,b,j) 
      temp T1aabj(a,a1,b,j) 
      temp Tbbai(b,b1,a,i) 
      temp T1bbai(b,b1,a,i) 
      temp Tbbbj(b,b1,b2,j) 
      temp T1bbbj(b,b1,b2,j) 
      temp Tiiia(i,i1,i2,a) 
      temp T1iiia(i,i1,i2,a) 
      temp  Tiijb(i,i1,j,b) 
      temp T1iijb(i,i1,j,b) 
      temp  Tjjia(j,j1,i,a) 
      temp T1jjia(j,j1,i,a) 
      temp  Tjjjb(j,j1,j2,b) 
      temp T1jjjb(j,j1,j2,b) 
      temp  Tijab(i,j,a,b) 
      temp T1ijab(i,j,a,b) 
      temp T2ijab(i,j,a,b) 
      temp  Tabab(a,b,a1,b1) 
      temp T1abab(a,b,a1,b1) 
      temp  Tijij(i,j,i1,j1) 
      temp T1ijij(i,j,i1,j1) 
      temp  Tjbia(j,b,i,a) 
      temp T1jbia(j,b,i,a) 
      temp T2jbia(j,b,i,a) 
      temp  Tabaj(a,b,a1,j) 
      temp T1abaj(a,b,a1,j) 
      temp  Tbabi(b,a,b1,i) 
      temp T1babi(b,a,b1,i) 
      temp  Tijib(i,j,i1,b) 
      temp T1ijib(i,j,i1,b) 
      temp  Tjija(j,i,j1,a) 
      temp T1jija(j,i,j1,a) 
      temp  Tjaib(j,a,i,b) 
      temp  Tibja(i,b,j,a) 
      temp  Tbibi(b,i1,b1,i) 
      temp T1bibi(b,i1,b1,i) 
      temp  Lbibi(b,i1,b1,i) 
      temp  Tajaj(a,j1,a1,j)  
      temp  Lajaj(a,j1,a1,j) 
#
      temp Tiixa(i,i1,sigma,a1)
      temp Tibaj(i,b,a,j1)        
      temp Tjaaj(j,a1,a,j1)       
      temp Taijb(a,i,j,b)    
      temp Taaii(a,a1,i,i1) 
      temp Tbbjj(b,b1,j,j1) 
      temp Tabij(a,b,i1,j1) 
      temp Tbaji(b,a,j,i) 
      temp Tiiai(i,i1,a,i2) 
      temp Tjjbj(j,j1,b,j2) 
      temp Tijaj(i,j,a,j1) 
      temp Tjibi(j,i,b,i1) 
      temp Tbiaj(b,i,a,j)    
      temp Tajbi(a,j,b1,i1)  
#
      temp Jxi(mu,i) 
      temp Jxj(mu,j) 
      temp Ixa(mu,a) 
      temp Ixb(mu,b) 
      temp Ixx(mu,mu) 
      temp I1xx(mu,mu) 
#
      temp Zaa(lambda,i,a1,i1) 
      temp ZZaa(lambda,i,sigma,i1)  
      temp Zbb(lambda,j,b1,j1) 
      temp ZZbb(lambda,j,sigma,j1)  
      temp Zab(lambda,i,b1,j1) 
      temp ZZab(lambda,i,sigma,j1)  
#
      temp Qaa(i,lambda,i1,a1) 
      temp QQaa(i,lambda,i1,sigma) 
      temp Qbb(j,lambda,j1,b1)
      temp QQbb(j,lambda,j1,sigma) 
      temp  Qab(i,lambda,j,b) 
      temp QQab(i,lambda,j,sigma) 
#
# Define scalar quantities 
# ------------------------ 
#
      scalar etemp 
      scalar esum 
      scalar eacbd 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
# 
         PROC CREATE1ARRAY 
              CREATE Gmi_a 
              CREATE Gmi_b 
              CREATE Gae_a 
              CREATE Gae_b 

              CREATE Dij_a
              CREATE Dij_b
              CREATE Dab_a
              CREATE Dab_b
              CREATE DpqA 
              CREATE DpqB 
              CREATE DhfA  
              CREATE DhfB  
         ENDPROC CREATE1ARRAY 
# 
         PROC CREATEARRAY 
              CREATE Dii
              CREATE Daa
              CREATE Djj
              CREATE Dbb
         ENDPROC CREATEARRAY 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# --------------------------------------------------------------------------- 
#
# In this PROCEDURE the D^{ij}_{ab} block of the two-particle 
# density matrix is formed. Only the AA spin case is considered.  
#
# --------------------------------------------------------------------------- 
#
      PROC DIJABAA 
#     ------------- 
#
# Done one-particle intermediates 
# ------------------------------- 
#
# Terms 1-5 in Eq. 33 
# ------------------- 
#
      PARDO a, a1, i, i1 
#
            REQUEST T2old_aa(a,i,a1,i1)   i1  
#
            Tiiaa(i,i1,a,a1)  = T2old_aa(a,i,a1,i1) 
            Tiiaa(i,i1,a,a1) *= 0.25  
#
            PREPARE Dijab_aa(i,i1,a,a1) += Tiiaa(i,i1,a,a1) 
#
      ENDPARDO a, a1, i, i1 
#
      execute server_barrier 
#
# Backtransform to the AO basis 
# ----------------------------- 
#
      PARDO sigma, a, i, i1 
#
            Tiiax(i,i1,a,sigma) = 0.0  
#
            DO a1 
#
               REQUEST Dijab_aa(i,i1,a,a1) a1  
#
               T1iiax(i,i1,a,sigma) = Dijab_aa(i,i1,a,a1)*ca(sigma,a1) 
               Tiiax(i,i1,a,sigma) += T1iiax(i,i1,a,sigma)  
#
            ENDDO a1  
#
            PREPARE Diiax(i,i1,a,sigma) = Tiiax(i,i1,a,sigma) 
#
      ENDPARDO sigma, a, i, i1 
      execute server_barrier 
#
      PARDO lambda, sigma, i, i1 
#
            Tiixx(i,i1,lambda,sigma) = 0.0  
#
            DO a  
#
               REQUEST Diiax(i,i1,a,sigma) a  
#
               T1iixx(i,i1,lambda,sigma) = Diiax(i,i1,a,sigma)*ca(lambda,a) 
               Tiixx(i,i1,lambda,sigma)  += T1iixx(i,i1,lambda,sigma)  
#
            ENDDO a 
#
            Tiixx(i,i1,lambda,sigma)         *= 4.0  
            PREPARE Diixx(i,i1,lambda,sigma) += Tiixx(i,i1,lambda,sigma) 
#
      ENDPARDO lambda, sigma, i, i1 
      execute server_barrier 
#
# Done backtransformation 
# ----------------------- 
#
# --------------------------------------------------------------------------- 
#
      ENDPROC DIJABAA 
#
# --------------------------------------------------------------------------- 
#
#
# --------------------------------------------------------------------------- 
#
# In this PROCEDURE the D^{ij}_{ab} clock of the two-particle 
# density matrix is formed.  
#
# --------------------------------------------------------------------------- 
#
# First form one-particle intermediates 
#
# --------------------------------------------------------------------------- 
#
# Dim(i,m) = Gmi_a(i,m) + l1a_old(m,e)*t1a_old(e,i)  
#
# Dea(e,a) = Gae_a(e,a) - l1a_old(m,e)*t1a_old(a,m) 
#
# --------------------------------------------------------------------------- 
#
      PROC DIJABAB 
#     ------------- 
#
# One-particle intermediates computed in AA/BB blocks  
# ---------------------------------------------------  
#
# Terms 1-5 in Eq. 33 
# ------------------- 
#
      PARDO a, b, i, j 
#
            REQUEST T2old_ab(a,i,b,j)   j  
#
            Tijab(i,j,a,b)  = T2old_ab(a,i,b,j) 
            Tijab(i,j,a,b) *= 0.25  
#
            PREPARE Dijab_ab(i,j,a,b) += Tijab(i,j,a,b) 
#
      ENDPARDO a, b, i, j 
#
      execute server_barrier 
#
# Backtransform to the AO basis 
# ----------------------------- 
#
      PARDO a, sigma, i, j1 
#
            Tijax(i,j1,a,sigma) = 0.0  
#
            DO b1  
#
               REQUEST Dijab_ab(i,j1,a,b1) b1  
#
               T1ijax(i,j1,a,sigma) = Dijab_ab(i,j1,a,b1)*cb(sigma,b1) 
               Tijax(i,j1,a,sigma) += T1ijax(i,j1,a,sigma)  
#
            ENDDO b1  
#
            PREPARE Dijax(i,j1,a,sigma) = Tijax(i,j1,a,sigma) 
#
      ENDPARDO a, sigma, i, j1 
      execute server_barrier 
#
      PARDO lambda, sigma, i, j1 
#
            Tijxx(i,j1,lambda,sigma) = 0.0  
#
            DO a  
#
               REQUEST Dijax(i,j1,a,sigma) a  
#
               T1ijxx(i,j1,lambda,sigma)  = Dijax(i,j1,a,sigma)*ca(lambda,a) 
               Tijxx(i,j1,lambda,sigma)  += T1ijxx(i,j1,lambda,sigma)  
#
            ENDDO a 
#
            Tijxx(i,j1,lambda,sigma)         *= 8.0  
            PREPARE Dijxx(i,j1,lambda,sigma) += Tijxx(i,j1,lambda,sigma) 
#
      ENDPARDO lambda, sigma, i, j1 
      execute server_barrier 
#
# Done backtransformation 
# ----------------------- 
#
# --------------------------------------------------------------------------- 
#
      ENDPROC DIJABAB 
#
# --------------------------------------------------------------------------- 
#
#
# --------------------------------------------------------------------------- 
#
# In this PROCEDURE the D^{ij}_{ab} block of the two-particle 
# density matrix is formed. Only the BB spin case is considered.  
#
# --------------------------------------------------------------------------- 
#
# First form one-particle intermediates 
#
# --------------------------------------------------------------------------- 
#
# Dim(i,m) = Gmi_b(i,m) + l1b_old(m,e)*t1b_old(e,i)  
#
# Dea(e,a) = Gae_b(e,a) - l1b_old(m,e)*t1b_old(a,m) 
#
# --------------------------------------------------------------------------- 
#
      PROC DIJABBB 
#     ------------- 
#
# Terms 1-5 in Eq. 33 
# ------------------- 
#
      PARDO b, b1, j, j1 
#
            REQUEST T2old_bb(b,j,b1,j1)   b  
#
            Tjjbb(j,j1,b,b1)  = T2old_bb(b,j,b1,j1) 
            Tjjbb(j,j1,b,b1) *= 0.25  
#
            PREPARE Dijab_bb(j,j1,b,b1) += Tjjbb(j,j1,b,b1) 
#
      ENDPARDO b, b1, j, j1 
#
      execute server_barrier 
#
# Backtransform to the AO basis 
# ----------------------------- 
#
      PARDO b, sigma, j, j1 
#
            Tjjbx(j,j1,b,sigma) = 0.0  
#
            DO b1 
#
               REQUEST Dijab_bb(j,j1,b,b1) b1  
#
               T1jjbx(j,j1,b,sigma) = Dijab_bb(j,j1,b,b1)*cb(sigma,b1) 
               Tjjbx(j,j1,b,sigma) += T1jjbx(j,j1,b,sigma)  
#
            ENDDO b1 
#
            PREPARE Djjbx(j,j1,b,sigma) = Tjjbx(j,j1,b,sigma) 
#
      ENDPARDO b, sigma, j, j1 
      execute server_barrier 
#
      PARDO lambda, sigma, j, j1 
#
            Tjjxx(j,j1,lambda,sigma) = 0.0  
#
            DO b  
#
               REQUEST Djjbx(j,j1,b,sigma) b  
#
               T1jjxx(j,j1,lambda,sigma)  = Djjbx(j,j1,b,sigma)*cb(lambda,b) 
               Tjjxx(j,j1,lambda,sigma)  += T1jjxx(j,j1,lambda,sigma)    
#
            ENDDO b 
#
            Tjjxx(j,j1,lambda,sigma)         *= 4.0  
            PREPARE Djjxx(j,j1,lambda,sigma) += Tjjxx(j,j1,lambda,sigma) 
#
      ENDPARDO lambda, sigma, j, j1 
      execute server_barrier 
#
# Done backtransformation 
# ----------------------- 
#
# --------------------------------------------------------------------------- 
#
      ENDPROC DIJABBB 
#
# --------------------------------------------------------------------------- 
#
      PROC DIJAB 
#     ----------- 
#
# Create gamma arrays and one-particle intermediates 
# Note that Dii and Daa are computed in DIJABAA and 
# Djj and Dbb are computed in DIJABBB. 
# -------------------------------------------------- 
#
           CREATE Dii
           CREATE Daa
           CREATE Djj
           CREATE Dbb
           execute sip_barrier 
              CALL DIJABAA 
              CALL DIJABBB 
              CALL DIJABAB 
           execute sip_barrier 
           DELETE Dii
           DELETE Daa
           DELETE Djj
           DELETE Dbb
#
      ENDPROC DIJAB 
#     ------------- 
#
# --------------------------------------------------------------------------- 
#
#
# -----------------------------------------------------------------------------
#
# Expression programmed: Equivalent to gamma2.  
#
# D^{ab}_{cd} = 1/16 P_+(ab,cd) \Tau^{ab}_{ij} \lambda^{ij}_{cd} 
# 4* D is stored to be consistent with acess 
#
# -----------------------------------------------------------------------------
#
      PROC DABCDAA 
#     ------------- 
# 
      PARDO a, a1, a2, a3 
#
            DO i 
            DO i1 
#
               REQUEST Tau_aa(a,i,a1,i1)    i1  
               REQUEST L2old_aa(i,a2,i1,a3) i1  
#
               Taaaa(a,a1,a2,a3)  = Tau_aa(a,i,a1,i1)*L2old_aa(i,a2,i1,a3) 
               Taaaa(a,a1,a2,a3) *= 0.25  
               T1aaaa(a2,a3,a,a1) = Taaaa(a,a1,a2,a3)  
#
               PUT Dabcd_aa(a,a1,a2,a3) += Taaaa(a,a1,a2,a3)  
               PUT Dabcd_aa(a2,a3,a,a1) += T1aaaa(a2,a3,a,a1)  
#
            ENDDO i1 
            ENDDO i 
# 
      ENDPARDO a, a1, a2, a3 
#
      ENDPROC DABCDAA 
#     ---------------- 
#
# -----------------------------------------------------------------------------
#
# Expression programmed: 
#
# D^{AB}_{CD} = 1/16 P_+(AB,CD) \Tau^{AB}_{IJ} \lambda^{IJ}_{CD} 
# 4* D is stored to be consistent with acess 
#
# -----------------------------------------------------------------------------
#
      PROC DABCDBB 
#     ------------- 
# 
      PARDO b1, b, b2, b3 
#
            DO j1 
            DO j 
#
               REQUEST Tau_bb(b1,j1,b,j)    j  
               REQUEST L2old_bb(j1,b2,j,b3) j  
#
               Tbbbb(b1,b,b2,b3)  = Tau_bb(b1,j1,b,j)*L2old_bb(j1,b2,j,b3) 
               Tbbbb(b1,b,b2,b3) *= 0.25  
               T1bbbb(b2,b3,b1,b) = Tbbbb(b1,b,b2,b3)  
#
               PUT Dabcd_bb(b1,b,b2,b3) += Tbbbb(b1,b,b2,b3)  
               PUT Dabcd_bb(b2,b3,b1,b) += T1bbbb(b2,b3,b1,b)  
#
            ENDDO j 
            ENDDO j1 
# 
      ENDPARDO b1, b, b2, b3 
#
      ENDPROC DABCDBB 
#     ---------------- 
# 
# -----------------------------------------------------------------------------
#
# Expression programmed: 
#
# D^{aB}_{cD} = 1/8 P_+(aB,cD) \Tau^{aB}_{iJ} \lambda^{iJ}_{cD} 
# 4* D is stored to be consistent with acess 
#
# -----------------------------------------------------------------------------
#
      PROC DABCDAB 
#     ------------- 
# 
      PARDO a, b, a1, b1 
#
            DO i 
            DO j 
#
               REQUEST Tau_ab(a,i,b,j)     j  
               REQUEST L2old_ab(i,a1,j,b1) j  
#
               Tabab(a,b,a1,b1)  = Tau_ab(a,i,b,j)*L2old_ab(i,a1,j,b1) 
               Tabab(a,b,a1,b1) *= 0.5  
               T1abab(a1,b1,a,b) = Tabab(a,b,a1,b1)  
#
               PUT Dabcd_ab(a,b,a1,b1) += Tabab(a,b,a1,b1)  
               PUT Dabcd_ab(a1,b1,a,b) += T1abab(a1,b1,a,b)  
#
            ENDDO j 
            ENDDO i 
# 
      ENDPARDO a, b, a1, b1 
#
      ENDPROC DABCDAB 
#     ---------------- 
# 
      PROC DABCD 
#     ---------- 
#
# Create gamma arrays 
# ------------------- 
#
           CALL DABCDAA 
           CALL DABCDAB 
           CALL DABCDBB 
# 
      ENDPROC DABCD 
#     -------------  
#
# ---------------------------------------------------------------------------- 
#
# Expression programmed: 
#
# D^{ij}_{kl} = 1/16 P_+(ij,kl) \lambda^{ij}_{ef} \tau^{ef}_{kl} 
# Note that 4* result is kept to be consistent with aces. 
#
# Equivalent to gamma3 
#
# ---------------------------------------------------------------------------- 
#
      PROC DIJKLAAAA 
#     -------------- 
#
      PARDO a, a1, i, i1  
#
            REQUEST L2old_aa(i,a,i1,a1) a1  
            Tiiaa(i,i1,a,a1) = L2old_aa(i,a,i1,a1) 
#
            DO i2 
            DO i3 
#
               REQUEST T2old_aa(a,i2,a1,i3) i3 
               Taaii(a,a1,i2,i3) = T2old_aa(a,i2,a1,i3)
#
#              Tiiii(i,i1,i2,i3)           = L2old_aa(i,a,i1,a1)*Tau_aa(a,i2,a1,i3)
               Tiiii(i,i1,i2,i3)           = Tiiaa(i,i1,a,a1)*Taaii(a,a1,i2,i3)
               Tiiii(i,i1,i2,i3)          *= 0.25
               T1iiii(i2,i3,i,i1)          = Tiiii(i,i1,i2,i3)
               PREPARE Dijkl_aa(i,i1,i2,i3)   += Tiiii(i,i1,i2,i3)
               PREPARE Dijkl_aa(i2,i3,i,i1)   += T1iiii(i2,i3,i,i1)
               T1iiii(i2,i3,i,i1)         *= 2.0
               PREPARE Vijmn_aaaa(i2,i3,i,i1) += T1iiii(i2,i3,i,i1)
#
            ENDDO i3 
            ENDDO i2 
#
      ENDPARDO a, a1, i, i1  
#
      execute server_barrier 
#
# Perform backtransformation to AO representation 
# ----------------------------------------------- 
#
      PARDO mu, i1, i2, i3  
#
            Txiii(mu,i1,i2,i3) = 0.0  
#
            DO i  
#
               REQUEST Dijkl_aa(i,i1,i2,i3) i3  
               REQUEST Dijkl_aa(i,i1,i3,i2) i3  
#
               Tiiii(i,i1,i2,i3)   = Dijkl_aa(i,i1,i2,i3) 
               T1iiii(i,i1,i2,i3)  = Dijkl_aa(i,i1,i3,i2)  
               Tiiii(i,i1,i2,i3)  -= T1iiii(i,i1,i2,i3) 
#
               T1xiii(mu,i1,i2,i3) = Tiiii(i,i1,i2,i3)*ca(mu,i) 
               Txiii(mu,i1,i2,i3) += T1xiii(mu,i1,i2,i3)  
#
            ENDDO i  
#
            PREPARE Dxiii(mu,i1,i2,i3) = Txiii(mu,i1,i2,i3) 
#
      ENDPARDO mu, i1, i2, i3  
#
      execute server_barrier 
      PARDO nu, i2, i3, mu  
#
            Tiixx(i2,i3,mu,nu) = 0.0  
#
            DO i1  
#
               REQUEST Dxiii(mu,i1,i2,i3) i3  
#
               T1iixx(i2,i3,mu,nu)  = Dxiii(mu,i1,i2,i3)*ca(nu,i1) 
               Tiixx(i2,i3,mu,nu)  += T1iixx(i2,i3,mu,nu)  
#
            ENDDO i1  
#
            Tiixx(i2,i3,mu,nu)         *= 0.25  
            PREPARE Diixx(i2,i3,mu,nu) += Tiixx(i2,i3,mu,nu) 
#
      ENDPARDO nu, i2, i3, mu 
      execute server_barrier 
#
# Done backtransformation 
# ----------------------- 
#
      ENDPROC DIJKLAAAA 
#     ----------------- 
#
# ---------------------------------------------------------------------------- 
#
# Expression programmed: 
#
# D^{IJ}_{KL} = 1/16 P_+(IJ,KL) \lambda^{IJ}_{EF} \tau^{EF}_{KL} 
# Note that 4* result is kept to be consistent with aces. 
#
# ---------------------------------------------------------------------------- 
#
      PROC DIJKLBBBB 
#     -------------- 
#
      PARDO b, b1, j, j1   
#
            REQUEST L2old_bb(j,b,j1,b1) b1 
            Tjjbb(j,j1,b,b1) = L2old_bb(j,b,j1,b1)
#
            DO j2
            DO j3
#
               REQUEST T2old_bb(b,j2,b1,j3) j3 
               Tbbjj(b,b1,j2,j3) = T2old_bb(b,j2,b1,j3)
#
#              Tjjjj(j,j1,j2,j3)           = L2old_bb(j,b,j1,b1)*Tau_bb(b,j2,b1,j3)
#
               Tjjjj(j,j1,j2,j3)           = Tjjbb(j,j1,b,b1)*Tbbjj(b,b1,j2,j3)
#
               Tjjjj(j,j1,j2,j3)          *= 0.25
               T1jjjj(j2,j3,j,j1)          = Tjjjj(j,j1,j2,j3)
               PREPARE Dijkl_bb(j,j1,j2,j3)   += Tjjjj(j,j1,j2,j3)
               PREPARE Dijkl_bb(j2,j3,j,j1)   += T1jjjj(j2,j3,j,j1)
               T1jjjj(j2,j3,j,j1)         *= 2.0
               PREPARE Vijmn_bbbb(j2,j3,j,j1) += T1jjjj(j2,j3,j,j1)
#
            ENDDO j3
            ENDDO j2
#
      ENDPARDO b, b1, j, j1  
#
# Perform backtransformation to AO representation 
# ----------------------------------------------- 
#
      execute server_barrier 
#
      PARDO mu, j1, j2, j3  
#
            Txjjj(mu,j1,j2,j3) = 0.0  
#
            DO j 
#
               REQUEST Dijkl_bb(j,j1,j2,j3) j3  
               REQUEST Dijkl_bb(j,j1,j3,j2) j3  
#
               Tjjjj(j,j1,j2,j3)   = Dijkl_bb(j,j1,j2,j3)
               T1jjjj(j,j1,j2,j3)  = Dijkl_bb(j,j1,j3,j2) 
               Tjjjj(j,j1,j2,j3)  -= T1jjjj(j,j1,j2,j3)  
#
               T1xjjj(mu,j1,j2,j3) = Tjjjj(j,j1,j2,j3)*cb(mu,j) 
               Txjjj(mu,j1,j2,j3) += T1xjjj(mu,j1,j2,j3)  
#
            ENDDO j 
#
            PREPARE Dxjjj(mu,j1,j2,j3) = Txjjj(mu,j1,j2,j3) 
#
      ENDPARDO mu, j1, j2, j3  
      execute server_barrier 
#
      PARDO nu, j2, j3, mu  
#
            Tjjxx(j2,j3,mu,nu) = 0.0  
#
            DO j1  
#
               REQUEST Dxjjj(mu,j1,j2,j3) j3  
#
               T1jjxx(j2,j3,mu,nu)  = Dxjjj(mu,j1,j2,j3)*cb(nu,j1) 
               Tjjxx(j2,j3,mu,nu)  += T1jjxx(j2,j3,mu,nu)  
#
            ENDDO j1  
#
            Tjjxx(j2,j3,mu,nu)         *= 0.25  
            PREPARE Djjxx(j2,j3,mu,nu) += Tjjxx(j2,j3,mu,nu) 
#
      ENDPARDO nu, j2, j3, mu 
      execute server_barrier 
#
# Done backtransformation 
# ----------------------- 
#
      ENDPROC DIJKLBBBB 
#     ----------------- 
#
# ---------------------------------------------------------------------------- 
#
# Expression programmed: 
#
# D^{iJ}_{kL} = 1/8 P_+(iJ,kL) \lambda^{iJ}_{eF} \tau^{eF}_{kL} 
#
# ---------------------------------------------------------------------------- 
#
      PROC DIJKLABAB 
#     -------------- 
#
      PARDO a, b,i, j 
#
            REQUEST L2old_ab(i,a,j,b) b 
            Tijab(i,j,a,b) = L2old_ab(i,a,j,b)
#
            DO i1
            DO j1
#
               REQUEST T2old_ab(a,i1,b,j1) j1 
               Tabij(a,b,i1,j1) = T2old_ab(a,i1,b,j1)
#
#              Tijij(i,j,i1,j1)           = L2old_ab(i,a,j,b)*Tau_ab(a,i1,b,j1)
#
               Tijij(i,j,i1,j1)           = Tijab(i,j,a,b)*Tabij(a,b,i1,j1)
#
               Tijij(i,j,i1,j1)          *= 0.5
               T1ijij(i1,j1,i,j)          = Tijij(i,j,i1,j1)
               PREPARE Dijkl_ab(i,j,i1,j1)   += Tijij(i,j,i1,j1)
               PREPARE Dijkl_ab(i1,j1,i,j)   += T1ijij(i1,j1,i,j)
               T1ijij(i1,j1,i,j)         *= 2.0
               PREPARE Vijmn_abab(i1,j1,i,j) += T1ijij(i1,j1,i,j)
#
            ENDDO j1
            ENDDO i1
#
      ENDPARDO a, b, i, j  
#
      execute server_barrier 
#
# Perform backtransformation to AO representation 
# ----------------------------------------------- 
#
      PARDO mu, i1, j, j1  
#
            Txjij(mu,j,i1,j1) = 0.0  
#
            DO i 
#
               REQUEST Dijkl_ab(i,j,i1,j1) j1  
#
               T1xjij(mu,j,i1,j1) = Dijkl_ab(i,j,i1,j1)*ca(mu,i) 
               Txjij(mu,j,i1,j1) += T1xjij(mu,j,i1,j1)   
#
            ENDDO i 
#
            PREPARE Dxjij(mu,j,i1,j1) = Txjij(mu,j,i1,j1) 
#
      ENDPARDO mu, i1, j, j1  
      execute server_barrier 
#
      PARDO i1, nu, j1, mu  
#
            Tijxx(i1,j1,mu,nu) = 0.0  
#
            DO j 
#
               REQUEST Dxjij(mu,j,i1,j1) j1  
#
               T1ijxx(i1,j1,mu,nu) = Dxjij(mu,j,i1,j1)*cb(nu,j) 
               Tijxx(i1,j1,mu,nu) += T1ijxx(i1,j1,mu,nu)  
#
            ENDDO j 
#
            PREPARE Dijxx(i1,j1,mu,nu) += Tijxx(i1,j1,mu,nu) 
#
      ENDPARDO i1, nu, j1, mu 
      execute server_barrier 
#
# Done backtransformation 
# ----------------------- 
#
      ENDPROC DIJKLABAB 
#     ----------------- 
#
# ---------------------------------------------------------------------------- 
#
      PROC DIJKL 
#     ---------- 
#
           CALL DIJKLAAAA 
           CALL DIJKLABAB 
           CALL DIJKLBBBB 
#
      ENDPROC DIJKL 
#     ------------- 
#
# ---------------------------------------------------------------------------- 
#
# Equivalent to gamma4*4 --> factor of 4 to match aces  
#
# ----------------------------------------------------------------------------
#
      PROC DIBJAAAAA 
#     -------------- 
#
      PARDO a, a1, i, i1 
#
            Tiaia(i,a1,i1,a)  = 0.0 
            TAiaia(i1,a,i,a1) = 0.0 
#
            DO i2  
#
               DO a2 
#
                  REQUEST T2old_aa(a,i,a2,i2)   a2  
                  REQUEST L2old_aa(i1,a1,i2,a2) a2   
#
                  Tiaai(i2,a2,a,i)           = T2old_aa(a,i,a2,i2) 
                  T1iaai(i1,a1,a,i)          = L2old_aa(i1,a1,i2,a2)*Tiaai(i2,a2,a,i)  
                  T1iaia(i,a1,i1,a)          = T1iaai(i1,a1,a,i)  
                  T1iaia(i,a1,i1,a)         *= 0.5   
                  PREPARE Vibja_aaaa(i,a1,i1,a) += T1iaia(i,a1,i1,a) 
#
                  T1iaia(i,a1,i1,a)         *= 0.25  
                  Tiaia(i,a1,i1,a)          += T1iaia(i,a1,i1,a)  
#
                  T2iaia(i1,a,i,a1)          = T1iaia(i,a1,i1,a)  
                  TAiaia(i1,a,i,a1)         += T2iaia(i1,a,i,a1)  
#
               ENDDO a2 
#
            ENDDO i2 
#
            DO j 
            DO b 
#
               REQUEST T2old_ab(a,i,b,j)   b  
               REQUEST L2old_ab(i1,a1,j,b) b   
#
               Tjbia(j,b,i,a)             = T2old_ab(a,i,b,j) 
               T2iaia(i1,a1,i,a)          = L2old_ab(i1,a1,j,b)*Tjbia(j,b,i,a)  
               T1iaia(i,a1,i1,a)          = T2iaia(i1,a1,i,a) 
               T1iaia(i,a1,i1,a)         *= 0.5   
               PREPARE Vibja_aaaa(i,a1,i1,a) += T1iaia(i,a1,i1,a) 
#
               T1iaia(i,a1,i1,a)         *= 0.25   
               Tiaia(i,a1,i1,a)          += T1iaia(i,a1,i1,a)  
#
               T2iaia(i1,a,i,a1)          = T1iaia(i,a1,i1,a)  
               TAiaia(i1,a,i,a1)         += T2iaia(i1,a,i,a1)  
#
            ENDDO b 
            ENDDO j 
#
            PREPARE Dibja_aaaa(i,a1,i1,a) += Tiaia(i,a1,i1,a)  
            PREPARE Dibja_aaaa(i1,a,i,a1) += TAiaia(i1,a,i,a1)  
#
      ENDPARDO a, a1, i, i1 
#
      execute server_barrier 
#
# Backtransform to AO representation 
# ---------------------------------- 
#
      PARDO sigma, a1, i, i1 
#
            Tiaix(i,a1,i1,sigma) = 0.0  
#
            DO a 
#
               REQUEST Dibja_aaaa(i,a1,i1,a) a  
#
               T1iaix(i,a1,i1,sigma)  = Dibja_aaaa(i,a1,i1,a)*ca(sigma,a) 
               Tiaix(i,a1,i1,sigma)  += T1iaix(i,a1,i1,sigma)   
#
            ENDDO a 
#
            PREPARE Diaix(i,a1,i1,sigma) = Tiaix(i,a1,i1,sigma) 
#
      ENDPARDO sigma, a1, i, i1 
      execute server_barrier 
#
      PARDO sigma, nu, i, i1 
#
            Txiix(nu,i,i1,sigma) = 0.0  
            Tixix(i,nu,i1,sigma) = 0.0  
#
            DO a1  
#
               REQUEST Diaix(i,a1,i1,sigma) a1  
#
               T1ixix(i,nu,i1,sigma) = Diaix(i,a1,i1,sigma)*ca(nu,a1)  
               T1xiix(nu,i,i1,sigma) = T1ixix(i,nu,i1,sigma)  
#
               Tixix(i,nu,i1,sigma) += T1ixix(i,nu,i1,sigma)  
               Txiix(nu,i,i1,sigma) += T1xiix(nu,i,i1,sigma)  
#
            ENDDO a1 
#
            Txiix(nu,i,i1,sigma) *=  4.0  
            Tixix(i,nu,i1,sigma) *= -4.0  
#
            PREPARE Dixix(i,nu,i1,sigma) += Tixix(i,nu,i1,sigma) 
            PREPARE Dxiix(nu,i,i1,sigma) += Txiix(nu,i,i1,sigma) 
#
      ENDPARDO sigma, nu, i, i1 
      execute server_barrier 
#
# Done backtransformation 
# -----------------------
#
      ENDPROC DIBJAAAAA 
#     ------------------ 
#
# The D(iB,jA) block of the two-particle density matrix is calculated. 
#
      PROC DIBJAABAB 
#     -------------- 
#
      PARDO b1, b, i, i1 
#
            Tibib(i1,b1,i,b)  = 0.0 
            TAibib(i,b,i1,b1) = 0.0 
#
            DO j 
#
               DO a 
#
                  REQUEST T2old_ab(a,i,b1,j) a  
                  REQUEST L2old_ab(i1,a,j,b) a   
#
                  T1ibib(i1,b1,i,b)          = L2old_ab(i1,a,j,b)*T2old_ab(a,i,b1,j) 
                  T1ibib(i1,b1,i,b)         *= 0.125   
                  Tibib(i1,b1,i,b)          += T1ibib(i1,b1,i,b)  
#
                  T2ibib(i,b,i1,b1)          = T1ibib(i1,b1,i,b)  
                  TAibib(i,b,i1,b1)         += T2ibib(i,b,i1,b1)  
#
                  T2ibib(i,b,i1,b1)         *= 4.0  
                  PREPARE Vibja_abab(i,b,i1,b1) += T2ibib(i,b,i1,b1) 
#
               ENDDO a 
#
            ENDDO j 
#
            PREPARE Dibja_abab(i1,b1,i,b) += Tibib(i1,b1,i,b) 
            PREPARE Dibja_abab(i,b,i1,b1) += TAibib(i,b,i1,b1) 
#
      ENDPARDO b1, b, i, i1 
#
      execute server_barrier 
#
# Backtransform to AO representation 
# ---------------------------------- 
#
      PARDO sigma, b1, i, i1 
#
            Tibix(i,b1,i1,sigma) = 0.0  
#
            DO b 
#
               REQUEST Dibja_abab(i,b1,i1,b) b  
#
               T1ibix(i,b1,i1,sigma) = Dibja_abab(i,b1,i1,b)*cb(sigma,b) 
               Tibix(i,b1,i1,sigma) += T1ibix(i,b1,i1,sigma)  
#
            ENDDO b 
#
            PREPARE Dibix(i,b1,i1,sigma) = Tibix(i,b1,i1,sigma) 
#
      ENDPARDO sigma, b1, i, i1 
      execute server_barrier 
#
      PARDO sigma, nu, i, i1 
#
            Tixix(i,nu,i1,sigma) = 0.0  
#
            DO b1  
#
               REQUEST Dibix(i,b1,i1,sigma) b1  
#
               T1ixix(i,nu,i1,sigma) = Dibix(i,b1,i1,sigma)*cb(nu,b1)  
               Tixix(i,nu,i1,sigma) += T1ixix(i,nu,i1,sigma)  
#
            ENDDO b1 
#
            Tixix(i,nu,i1,sigma)         *= -4.0  
            PREPARE Dixix(i,nu,i1,sigma) += Tixix(i,nu,i1,sigma) 
#
      ENDPARDO sigma, nu, i, i1 
      execute server_barrier 
#
# Done backtransformation 
# -----------------------
#
      ENDPROC DIBJAABAB 
#     ------------------ 
#
# The D(Ib,Ja) block of the two-particle density matrix is calculated. 
#
      PROC DIBJABABA 
#     --------------  
#
      PARDO a, a1, j1, j 
#
            Tjaja(j,a,j1,a1) = 0.0 
            TAjaja(j1,a1,j,a) = 0.0 
#
            DO i 
#
               DO b 
#
                  REQUEST T2old_ab(a,i,b,j1) b 
                  REQUEST L2old_ab(i,a1,j,b) b 
#
#                 T1jaja(j,a,j1,a1)          = L2old_ab(i,a1,j,b)*T2old_ab(a,i,b,j1)

                  Tjaib(j,a1,i,b)            = L2old_ab(i,a1,j,b)
                  Tibaj(i,b,a,j1)            = T2old_ab(a,i,b,j1)
                  Tjaaj(j,a1,a,j1)           = Tjaib(j,a1,i,b)*Tibaj(i,b,a,j1)
                  T1jaja(j,a,j1,a1)          = Tjaaj(j,a1,a,j1)
#
                  T1jaja(j,a,j1,a1)         *= 0.125
                  Tjaja(j,a,j1,a1)          += T1jaja(j,a,j1,a1)
#
                  T2jaja(j1,a1,j,a)          = T1jaja(j,a,j1,a1)
                  TAjaja(j1,a1,j,a)         += T2jaja(j1,a1,j,a)
#
                  T2jaja(j1,a1,j,a)         *= 4.0
                  PREPARE Vibja_baba(j1,a1,j,a) += T2jaja(j1,a1,j,a)
#
               ENDDO b 
#
            ENDDO i 
#
# Multiply by 4 to match aces 
# --------------------------- 
#
            PREPARE Dibja_baba(j,a,j1,a1) += Tjaja(j,a,j1,a1) 
            PREPARE Dibja_baba(j1,a1,j,a) += TAjaja(j1,a1,j,a)  
#
      ENDPARDO a, a1, j1, j 
#
      execute server_barrier 
#
# Backtransform to AO representation 
# ---------------------------------- 
#
      PARDO sigma, a1, j, j1 
#
            Tjajx(j,a1,j1,sigma) = 0.0  
#
            DO a 
#
               REQUEST Dibja_baba(j,a1,j1,a) a  
#
               T1jajx(j,a1,j1,sigma) = Dibja_baba(j,a1,j1,a)*ca(sigma,a) 
               Tjajx(j,a1,j1,sigma) += T1jajx(j,a1,j1,sigma)  
#
            ENDDO a 
#
            PREPARE Djajx(j,a1,j1,sigma) = Tjajx(j,a1,j1,sigma) 
#
      ENDPARDO sigma, a1, j, j1 
      execute server_barrier 
#
      PARDO sigma, nu, j, j1 
#
            Tjxjx(j,nu,j1,sigma) = 0.0  
#
            DO a1 
#
               REQUEST Djajx(j,a1,j1,sigma) a1  
#
               T1jxjx(j,nu,j1,sigma) = Djajx(j,a1,j1,sigma)*ca(nu,a1)  
               Tjxjx(j,nu,j1,sigma) += T1jxjx(j,nu,j1,sigma)  
#
            ENDDO a1 
#
            Tjxjx(j,nu,j1,sigma)         *= -4.0  
            PREPARE Djxjx(j,nu,j1,sigma) += Tjxjx(j,nu,j1,sigma) 
#
      ENDPARDO sigma, nu, j, j1 
      execute server_barrier 
#
# Done backtransformation 
# -----------------------
#
      ENDPROC DIBJABABA 
#     ------------------ 
#
      PROC DIBJABBBB 
#     --------------- 
#
      PARDO b, b1, j, j1
#
            Tjbjb(j,b1,j1,b)  = 0.0
            TAjbjb(j1,b,j,b1) = 0.0
#
            DO j2
#
               DO b2
#
                  REQUEST T2old_bb(b,j,b2,j2)   b2 
                  REQUEST L2old_bb(j1,b1,j2,b2) b2 
#
#                 T1jbjb(j,b1,j1,b)          = L2old_bb(j1,b1,j2,b2)*T2old_bb(b,j,b2,j2)
#
                  T3jbjb(j2,b2,j,b)          = T2old_bb(b,j,b2,j2)
                  T2jbjb(j1,b1,j,b)          = L2old_bb(j1,b1,j2,b2)*T3jbjb(j2,b2,j,b)
                  T1jbjb(j,b1,j1,b)          = T2jbjb(j1,b1,j,b)
                  T1jbjb(j,b1,j1,b)         *= 0.5
                  PREPARE Vibja_bbbb(j,b1,j1,b) += T1jbjb(j,b1,j1,b)
#
                  T1jbjb(j,b1,j1,b)         *= 0.25
                  Tjbjb(j,b1,j1,b)          += T1jbjb(j,b1,j1,b)
#
                  T2jbjb(j1,b,j,b1)          = T1jbjb(j,b1,j1,b)
                  TAjbjb(j1,b,j,b1)         += T2jbjb(j1,b,j,b1)
#
               ENDDO b2
#
            ENDDO j2
#
            DO i
            DO a
#
               REQUEST T2old_ab(a,i,b,j)   a 
               REQUEST L2old_ab(i,a,j1,b1) a 
#
               Tjbia(j,b,i,a)             = T2old_ab(a,i,b,j)  
               T2jbjb(j,b,j1,b1)          = Tjbia(j,b,i,a)*L2old_ab(i,a,j1,b1)  
               T1jbjb(j,b1,j1,b)          = T2jbjb(j,b,j1,b1) 
               T1jbjb(j,b1,j1,b)         *= 0.5 
               PREPARE Vibja_bbbb(j,b1,j1,b) += T1jbjb(j,b1,j1,b)
#
               T1jbjb(j,b1,j1,b)         *= 0.25
               Tjbjb(j,b1,j1,b)          += T1jbjb(j,b1,j1,b)
#
               T2jbjb(j1,b,j,b1)          = T1jbjb(j,b1,j1,b)
               TAjbjb(j1,b,j,b1)         += T2jbjb(j1,b,j,b1)
#
            ENDDO a
            ENDDO i
#
            PREPARE Dibja_bbbb(j,b1,j1,b) += Tjbjb(j,b1,j1,b)
            PREPARE Dibja_bbbb(j1,b,j,b1) += TAjbjb(j1,b,j,b1)
#
      ENDPARDO b, b1, j, j1
#
      execute server_barrier 
#
# Backtransform to AO representation 
# ---------------------------------- 
#
      PARDO sigma, b1, j, j1 
#
            Tjbjx(j,b1,j1,sigma) = 0.0  
#
            DO b 
#
               REQUEST Dibja_bbbb(j,b1,j1,b) b  
#
               T1jbjx(j,b1,j1,sigma) = Dibja_bbbb(j,b1,j1,b)*cb(sigma,b) 
               Tjbjx(j,b1,j1,sigma) += T1jbjx(j,b1,j1,sigma)  
#
            ENDDO b 
#
            PREPARE Djbjx(j,b1,j1,sigma) = Tjbjx(j,b1,j1,sigma) 
#
      ENDPARDO sigma, b1, j, j1 
      execute server_barrier 
#
      PARDO sigma, nu, j, j1 
#
            Txjjx(nu,j,j1,sigma) = 0.0  
            Tjxjx(j,nu,j1,sigma) = 0.0  
#
            DO b1 
#
               REQUEST Djbjx(j,b1,j1,sigma) b1  
#
               T1jxjx(j,nu,j1,sigma)      = Djbjx(j,b1,j1,sigma)*cb(nu,b1)  
               T1xjjx(nu,j,j1,sigma)      = T1jxjx(j,nu,j1,sigma)  
#
               Tjxjx(j,nu,j1,sigma)      += T1jxjx(j,nu,j1,sigma)  
               Txjjx(nu,j,j1,sigma)      += T1xjjx(nu,j,j1,sigma)  
#
            ENDDO b1 
#
            Txjjx(nu,j,j1,sigma)         *=  4.0  
            Tjxjx(j,nu,j1,sigma)         *= -4.0  
#
            PREPARE Djxjx(j,nu,j1,sigma) += Tjxjx(j,nu,j1,sigma) 
            PREPARE Dxjjx(nu,j,j1,sigma) += Txjjx(nu,j,j1,sigma) 
#
      ENDPARDO sigma, nu, j, j1 
      execute server_barrier 
#
# Done backtransformation 
# -----------------------
#
      ENDPROC DIBJABBBB 
#     ------------------ 
#
      PROC DIBJAABBA 
#     --------------- 
#
      PARDO i, a, b, j 
#
            Tiajb(i,a,j,b) = 0.0  
#
            DO i1 
#
               DO a1 
#
                  REQUEST T2old_aa(a,i,a1,i1) a1 
                  REQUEST L2old_ab(i1,a1,j,b) a1 
                  REQUEST T2old_ab(a1,i1,b,j) a1 
                  REQUEST L2old_aa(i1,a1,i,a) a1 
#
                  T1iajb(i,a,j,b)          = T2old_aa(a,i,a1,i1)*L2old_ab(i1,a1,j,b)
                  T1iajb(i,a,j,b)         *= 0.125
                  Tiajb(i,a,j,b)          += T1iajb(i,a,j,b)
#
                  Tibja(i,b,j,a)           = T1iajb(i,a,j,b)
                  Tibja(i,b,j,a)          *= 4.0
                  PREPARE Vibja_abba(i,b,j,a) += Tibja(i,b,j,a)
#
#                 T1iajb(i,a,j,b)          = T2old_ab(a1,i1,b,j)*L2old_aa(i1,a1,i,a)
#
                  Tiaia(i,a,i1,a1)         = L2old_aa(i1,a1,i,a)
                  T2iajb(i1,a1,j,b)        = T2old_ab(a1,i1,b,j)
                  T1iajb(i,a,j,b)          = Tiaia(i,a,i1,a1)*T2iajb(i1,a1,j,b)
#
                  T1iajb(i,a,j,b)         *= 0.125
                  Tiajb(i,a,j,b)          += T1iajb(i,a,j,b)
#
               ENDDO a1 
#
            ENDDO i1 
#
            DO j1 
#
               DO b1 
#
                  REQUEST T2old_ab(a,i,b1,j1) b1 
                  REQUEST L2old_bb(j1,b1,j,b) b1 
                  REQUEST T2old_bb(b,j,b1,j1) b1 
                  REQUEST L2old_ab(i,a,j1,b1) b1 
#
                  T1iajb(i,a,j,b)          = T2old_ab(a,i,b1,j1)*L2old_bb(j1,b1,j,b)
                  T1iajb(i,a,j,b)         *= 0.125
                  Tiajb(i,a,j,b)          += T1iajb(i,a,j,b)
#
                  Tibja(i,b,j,a)           = T1iajb(i,a,j,b)
                  Tibja(i,b,j,a)          *= 4.0
                  PREPARE Vibja_abba(i,b,j,a) += Tibja(i,b,j,a)
#
#                 T1iajb(i,a,j,b)          = T2old_bb(b,j,b1,j1)*L2old_ab(i,a,j1,b1)
#
                  Tjbjb(j1,b1,j,b)         = T2old_bb(b,j,b1,j1)
                  T1iajb(i,a,j,b)          = L2old_ab(i,a,j1,b1)*Tjbjb(j1,b1,j,b)
                  T1iajb(i,a,j,b)         *= 0.125
                  Tiajb(i,a,j,b)          += T1iajb(i,a,j,b)
#
               ENDDO b1 
#
            ENDDO j1 
#
            Tibja(i,b,j,a)           = Tiajb(i,a,j,b) 
            PREPARE Dibja_abba(i,b,j,a) += Tibja(i,b,j,a)  
#
      ENDPARDO i, a, b, j 
#
      execute server_barrier 
#
# Backtransform to AO representation 
# ---------------------------------- 
#
      PARDO sigma, b1, i, j1 
#
            Tibjx(i,b1,j1,sigma) = 0.0  
#
            DO a 
#
               REQUEST Dibja_abba(i,b1,j1,a) a  
#
               T1ibjx(i,b1,j1,sigma) = Dibja_abba(i,b1,j1,a)*ca(sigma,a) 
               Tibjx(i,b1,j1,sigma) += T1ibjx(i,b1,j1,sigma)  
#
            ENDDO a 
#
            PREPARE Dibjx(i,b1,j1,sigma) = Tibjx(i,b1,j1,sigma) 
#
      ENDPARDO sigma, b1, i, j1 
      execute server_barrier 
#
      PARDO sigma, nu, i, j1 
#
            Tixxj(i,nu,sigma,j1) = 0.0  
#
            DO b1 
#
               REQUEST Dibjx(i,b1,j1,sigma) b1 
#
               T1ixxj(i,nu,sigma,j1) = Dibjx(i,b1,j1,sigma)*cb(nu,b1)  
               Tixxj(i,nu,sigma,j1) += T1ixxj(i,nu,sigma,j1)  
#
            ENDDO b1 
#
            Tixxj(i,nu,sigma,j1)         *= 4.0  
            PREPARE Dixxj(i,nu,sigma,j1) += Tixxj(i,nu,sigma,j1) 
#
      ENDPARDO sigma, nu, i, j1 
      execute server_barrier 
#
# Done backtransformation 
# -----------------------
#
      ENDPROC DIBJAABBA 
#     ------------------ 
# 
      PROC DIBJABAAB 
#     --------------- 
#
      PARDO j, b, a, i 
#
            Tjbia(j,b,i,a) = 0.0  
#
            DO i1 
#
               DO a1 
#
                  REQUEST T2old_ab(a1,i1,b,j) a1 
                  REQUEST L2old_aa(i1,a1,i,a) a1 
                  REQUEST T2old_aa(a,i,a1,i1) a1 
                  REQUEST L2old_ab(i1,a1,j,b) a1 
#
                  T1jbia(j,b,i,a)          = T2old_ab(a1,i1,b,j)*L2old_aa(i1,a1,i,a)
                  T1jbia(j,b,i,a)         *= 0.125
                  Tjbia(j,b,i,a)          += T1jbia(j,b,i,a)
#
                  Tjaib(j,a,i,b)           = T1jbia(j,b,i,a)
                  Tjaib(j,a,i,b)          *= 4.0
                  PREPARE Vibja_baab(j,a,i,b) += Tjaib(j,a,i,b)
#
#                 T1jbia(j,b,i,a)          = T2old_aa(a,i,a1,i1)*L2old_ab(i1,a1,j,b)
#
                  Taijb(a,i,j,b)           = T2old_aa(a,i,a1,i1)*L2old_ab(i1,a1,j,b)
                  T1jbia(j,b,i,a)          = Taijb(a,i,j,b)
#
                  T1jbia(j,b,i,a)         *= 0.125
                  Tjbia(j,b,i,a)          += T1jbia(j,b,i,a)
#
               ENDDO a1 
#
            ENDDO i1 
#
            DO j1 
#
               DO b1 
#
                  REQUEST T2old_bb(b,j,b1,j1) b1 
                  REQUEST L2old_ab(i,a,j1,b1) b1 
                  REQUEST T2old_ab(a,i,b1,j1) b1 
                  REQUEST L2old_bb(j,b,j1,b1) b1 
#
                  T1jbia(j,b,i,a)          = T2old_bb(b,j,b1,j1)*L2old_ab(i,a,j1,b1)
                  T1jbia(j,b,i,a)         *= 0.125
                  Tjbia(j,b,i,a)          += T1jbia(j,b,i,a)
#
                  Tjaib(j,a,i,b)           = T1jbia(j,b,i,a)
                  Tjaib(j,a,i,b)          *= 4.0
                  PREPARE Vibja_baab(j,a,i,b) += Tjaib(j,a,i,b)
#
#                 T1jbia(j,b,i,a)          = T2old_ab(a,i,b1,j1)*L2old_bb(j,b,j1,b1)
#
                  T2jbia(j1,b1,i,a)        = T2old_ab(a,i,b1,j1)
                  T1jbia(j,b,i,a)          = L2old_bb(j,b,j1,b1)*T2jbia(j1,b1,i,a)
#
                  T1jbia(j,b,i,a)         *= 0.125
                  Tjbia(j,b,i,a)          += T1jbia(j,b,i,a)
#
               ENDDO b1 
#
            ENDDO j1 
#
            Tjaib(j,a,i,b)           = Tjbia(j,b,i,a) 
            PREPARE Dibja_baab(j,a,i,b) += Tjaib(j,a,i,b) 
#
      ENDPARDO j, b, a, i 
#
      execute server_barrier 
#
# Backtransform to AO representation 
# ---------------------------------- 
#
      PARDO sigma, a1, j, i1 
#
            Tjaix(j,a1,i1,sigma) = 0.0  
#
            DO b 
#
               REQUEST Dibja_baab(j,a1,i1,b) b  
#
               T1jaix(j,a1,i1,sigma) = Dibja_baab(j,a1,i1,b)*cb(sigma,b) 
               Tjaix(j,a1,i1,sigma) += T1jaix(j,a1,i1,sigma)  
#
            ENDDO b 
#
            PREPARE Djaix(j,a1,i1,sigma) = Tjaix(j,a1,i1,sigma) 
#
      ENDPARDO sigma, a1, j, i1 
      execute server_barrier 
#
      PARDO sigma, nu, j, i1 
#
            Tixxj(i1,sigma,nu,j) = 0.0  
#
            DO a1 
#
               REQUEST Djaix(j,a1,i1,sigma) a1  
#
               T1ixxj(i1,sigma,nu,j) = Djaix(j,a1,i1,sigma)*ca(nu,a1)  
               Tixxj(i1,sigma,nu,j) += T1ixxj(i1,sigma,nu,j)  
#
            ENDDO a1 
#
            Tixxj(i1,sigma,nu,j)         *= 4.0  
            PREPARE Dixxj(i1,sigma,nu,j) += Tixxj(i1,sigma,nu,j) 
#
      ENDPARDO sigma, nu, j, i1 
      execute server_barrier 
#
# Done backtransformation 
# -----------------------
#
      ENDPROC DIBJABAAB
#     ------------------ 
#
# ----------------------------------------------------------------------------
#
      PROC DIBJA  
#
        CALL DIBJAAAAA # BTRAN OK
        CALL DIBJABBBB # BTRAN OK
#
        CALL DIBJAABAB # BTRAN OK 
        CALL DIBJABABA # BTRAN OK 
#
        CALL DIBJABAAB # BTRAN OK  
        CALL DIBJAABBA # BTRAN OK  
#
      ENDPROC DIBJA 
#
# ----------------------------------------------------------------------------
#
      PROC I2XX 
#     --------- 
# 
# ------------------------------------------------------------------------- 
#
# Form the two-particle intermediate I3aa, I3bb, I3ab, and I3ba  needed in 
# place of V^{ab}_{cd}. 
#
# ------------------------------------------------------------------------- 
#
# Form the intermediate I3aa 
# -------------------------- 
#
      PARDO a, a1 
#
            DO i2 
            DO i1 
            DO i 
#
               REQUEST L2old_aa(i2,a,i1,a1) a  
               GET t1a_old(a1,i) 
#
               Tiaii(i2,a,i1,i) = L2old_aa(i2,a,i1,a1)*t1a_old(a1,i) 
               PREPARE I3aa(i2,a,i1,i) += Tiaii(i2,a,i1,i) 
#
            ENDDO i 
            ENDDO i1 
            ENDDO i2 
#
      ENDPARDO a, a1 
#
# Form the intermediate I3bb 
# -------------------------- 
#
      PARDO b, b1 
#
            DO j2 
            DO j1 
            DO j 
#
               REQUEST L2old_bb(j2,b,j1,b1) b1  
               GET t1b_old(b1,j) 
#
               Tjbjj(j2,b,j1,j) = L2old_bb(j2,b,j1,b1)*t1b_old(b1,j) 
               PREPARE I3bb(j2,b,j1,j) += Tjbjj(j2,b,j1,j) 
#
            ENDDO j 
            ENDDO j1 
            ENDDO j2 
#
      ENDPARDO b, b1 

#
# Form the intermediate I3ab 
# -------------------------- 
#
      PARDO a, b1 
#
            DO i2 
            DO j1 
            DO j 
#
               REQUEST L2old_ab(i2,a,j1,b1) b1  
               GET t1b_old(b1,j) 
#
               Tiajj(i2,a,j1,j) = L2old_ab(i2,a,j1,b1)*t1b_old(b1,j) 
               PREPARE I3ab(i2,a,j1,j) += Tiajj(i2,a,j1,j) 
#
            ENDDO j 
            ENDDO j1 
            ENDDO i2 
#
      ENDPARDO a, b1 

#
# Form the intermediate I3ba 
# -------------------------- 
#
      PARDO b, a1 
#
            DO j 
            DO i1 
            DO i 
#
               REQUEST L2old_ab(i1,a1,j,b) b  
               GET t1a_old(a1,i) 
#
               Tjbii(j,b,i1,i) = L2old_ab(i1,a1,j,b)*t1a_old(a1,i) 
               PREPARE I3ba(j,b,i1,i) += Tjbii(j,b,i1,i) 
#
            ENDDO i 
            ENDDO i1 
            ENDDO j 
#
      ENDPARDO b, a1 
#
      ENDPROC I2XX 
#     ------------ 
# 
# ------------------------------------------------------------------------- 
#
# Start the calculation of the D^{ab}_{ci} type contributions to the
# density. Equivalent to Gamma5   
#
# ------------------------------------------------------------------------- 
#
      PROC DABCIAAAA 
#     ---------------
#
      PARDO a, a1, a2, i 
#
            Taaai(a,a1,a2,i) = 0.0  
#
            GET Gae_a(a2,a) 
            GET t1a_old(a1,i) 
            GET Gae_a(a2,a1) 
            GET t1a_old(a,i) 
#
            T1aaai(a,a1,a2,i)  = Gae_a(a2,a)^t1a_old(a1,i) 
            T1aaai(a,a1,a2,i) *= -0.125 
            Taaai(a,a1,a2,i)  += T1aaai(a,a1,a2,i)  
#
            T1aaai(a,a1,a2,i)  = Gae_a(a2,a1)^t1a_old(a,i)
            T1aaai(a,a1,a2,i) *= 0.125
            Taaai(a,a1,a2,i)  += T1aaai(a,a1,a2,i)
#
            DO i1 
#
               REQUEST Tau_aa(a,i1,a1,i)      i1  
               REQUEST L2old_aa(i1,a,i,a1)    i1  
               REQUEST Vibja_aaaa(i,a2,i1,a)  i1  
               REQUEST Vibja_aaaa(i,a2,i1,a1) i1  
               GET l1a_old(i1,a2) 
               GET t1a_old(a2,i1) 
               GET t1a_old(a1,i1) 
               GET t1a_old(a,i1) 
#
               T1aaai(a,a1,a2,i)  = Tau_aa(a,i1,a1,i)*l1a_old(i1,a2) 
               T1aaai(a,a1,a2,i) *= 0.125 
               Taaai(a,a1,a2,i)  += T1aaai(a,a1,a2,i)  
#
               T1aaai(a,a1,a2,i)  = L2old_aa(i1,a,i,a1)*t1a_old(a2,i1) 
               T1aaai(a,a1,a2,i) *= 0.125 
               Taaai(a,a1,a2,i)  += T1aaai(a,a1,a2,i)  
#
               T1aaai(a,a1,a2,i)  = Vibja_aaaa(i,a2,i1,a)*t1a_old(a1,i1)  
               T1aaai(a,a1,a2,i) *= -0.25 
               Taaai(a,a1,a2,i)  += T1aaai(a,a1,a2,i)  
#
               T1aaai(a,a1,a2,i)  = Vibja_aaaa(i,a2,i1,a1)*t1a_old(a,i1)  
               T1aaai(a,a1,a2,i) *= 0.25 
               Taaai(a,a1,a2,i)  += T1aaai(a,a1,a2,i)  
#
               DO i2 
#
                  REQUEST I3aa(i1,a2,i2,i)   i2 
                  REQUEST Tau_aa(a,i1,a1,i2) i2 
#
#                 T1aaai(a,a1,a2,i)  = Tau_aa(a,i1,a1,i2)*I3aa(i1,a2,i2,i)
#
                  Taaii(a,a1,i1,i2)  = Tau_aa(a,i1,a1,i2)
                  Tiiai(i1,i2,a2,i)  = I3aa(i1,a2,i2,i)
                  T1aaai(a,a1,a2,i)  = Taaii(a,a1,i1,i2)*Tiiai(i1,i2,a2,i)
                  T1aaai(a,a1,a2,i) *= -0.0625
                  Taaai(a,a1,a2,i)  += T1aaai(a,a1,a2,i)
#
               ENDDO i2 
#
            ENDDO i1 
#
# Multiply by 4 to match aces 
# --------------------------- 
#
#           Taaai(a,a1,a2,i) *= 4.0 
#
#           PUT Dabci_aaaa(a,a1,a2,i) += Taaai(a,a1,a2,i) 
# 
            DO mu 
#
               Txaai(mu,a1,a2,i)      = Taaai(a,a1,a2,i)*ca(mu,a) 
               PREPARE Dxaai(mu,a1,a2,i) += Txaai(mu,a1,a2,i)  
# 
            ENDDO mu 
# 
      ENDPARDO a, a1, a2, i 
#
# Back transform to full AO representation
# ---------------------------------------- 
# 
      execute server_barrier 
      PARDO mu, a1, a2, i 
#
            REQUEST Dxaai(mu,a1,a2,i) a1  
# 
            DO nu 
#
               Txxai(mu,nu,a2,i)      = Dxaai(mu,a1,a2,i)*ca(nu,a1) 
               PREPARE Dxxai(mu,nu,a2,i) += Txxai(mu,nu,a2,i)  
# 
            ENDDO nu 
# 
      ENDPARDO mu, a1, a2, i 
      execute server_barrier 
#
      PARDO mu, nu, i 
#
            allocate Lxxai(mu,nu,*,i) 
#
            DO a2 
#
               REQUEST Dxxai(mu,nu,a2,i) i  
               Lxxai(mu,nu,a2,i) = Dxxai(mu,nu,a2,i) 
#
            ENDDO a2 
#
            DO lambda 
#
               Txxxi(mu,nu,lambda,i) = 0.0 
# 
               DO a2   
#
                  T1xxxi(mu,nu,lambda,i) = Lxxai(mu,nu,a2,i)*ca(lambda,a2) 
                  Txxxi(mu,nu,lambda,i) += T1xxxi(mu,nu,lambda,i)  
# 
               ENDDO a2  
#
               PREPARE Dxxxi(mu,nu,lambda,i) = Txxxi(mu,nu,lambda,i)  
#
            ENDDO lambda 
#
            deallocate Lxxai(mu,nu,*,i) 
#
      ENDPARDO mu, nu, i 
      execute server_barrier 
#
#     PARDO mu, nu, lambda, sigma  
#
#           Txxxx(mu,nu,lambda,sigma) = 0.0  
# 
#           DO i  
#
#              REQUEST Dxxxi(mu,nu,lambda,i) i  
#
#              T1xxxx(mu,nu,lambda,sigma) = Dxxxi(mu,nu,lambda,i)*ca(sigma,i) 
#              Txxxx(mu,nu,lambda,sigma) += T1xxxx(mu,nu,lambda,sigma)  
#
#           ENDDO i 
#
#           Txxxx(mu,nu,lambda,sigma) *= 8.0 
#
#           INTEGRAL BLOCK 1 
#           ---------------- 
#           execute der_int_setup dx1(mu,lambda,nu,sigma) 
#           execute der_int_setup dy1(mu,lambda,nu,sigma) 
#           execute der_int_setup dz1(mu,lambda,nu,sigma) 
#           execute der_int_setup dx2(mu,lambda,nu,sigma) 
#           execute der_int_setup dy2(mu,lambda,nu,sigma) 
#           execute der_int_setup dz2(mu,lambda,nu,sigma) 
#           execute der_int_setup dx3(mu,lambda,nu,sigma) 
#           execute der_int_setup dy3(mu,lambda,nu,sigma) 
#           execute der_int_setup dz3(mu,lambda,nu,sigma) 
#           execute der_int_setup dx4(mu,lambda,nu,sigma) 
#           execute der_int_setup dy4(mu,lambda,nu,sigma) 
#           execute der_int_setup dz4(mu,lambda,nu,sigma) 
#
#           execute compute_derivative_integrals 
#
#           T1xxxx(mu,lambda,nu,sigma) = Txxxx(mu,nu,lambda,sigma) 
#           execute DCONT2 T1xxxx(mu,lambda,nu,sigma) 
#
#     ENDPARDO mu, nu, lambda, sigma  
#     execute server_barrier 
#
# Done back transformation 
# ------------------------ 
#
      ENDPROC DABCIAAAA 
#     ------------------
#
      PROC DABCIBBBB 
#     ---------------
#
      PARDO b, b1, b2, j 
#
            Tbbbj(b,b1,b2,j) = 0.0  
#
            GET Gae_b(b2,b) 
            GET t1b_old(b1,j) 
            GET Gae_b(b2,b1) 
            GET t1b_old(b,j) 
#
            T1bbbj(b,b1,b2,j)  = Gae_b(b2,b)^t1b_old(b1,j) 
            T1bbbj(b,b1,b2,j) *= -0.125 
            Tbbbj(b,b1,b2,j)  += T1bbbj(b,b1,b2,j)  
#
            T1bbbj(b,b1,b2,j)  = Gae_b(b2,b1)^t1b_old(b,j) 
            T1bbbj(b,b1,b2,j) *= 0.125 
            Tbbbj(b,b1,b2,j)  += T1bbbj(b,b1,b2,j)  
#
            DO j1 
#
               REQUEST Tau_bb(b,j1,b1,j)      j1  
               REQUEST L2old_bb(j1,b,j,b1)    j1  
               REQUEST Vibja_bbbb(j,b2,j1,b)  j1  
               REQUEST Vibja_bbbb(j,b2,j1,b1) j1  
               GET l1b_old(j1,b2) 
               GET t1b_old(b2,j1) 
               GET t1b_old(b1,j1) 
               GET t1b_old(b,j1) 
#
               T1bbbj(b,b1,b2,j)  = Tau_bb(b,j1,b1,j)*l1b_old(j1,b2) 
               T1bbbj(b,b1,b2,j) *= 0.125 
               Tbbbj(b,b1,b2,j)  += T1bbbj(b,b1,b2,j)  
#
               T1bbbj(b,b1,b2,j)  = L2old_bb(j1,b,j,b1)*t1b_old(b2,j1) 
               T1bbbj(b,b1,b2,j) *= 0.125 
               Tbbbj(b,b1,b2,j)  += T1bbbj(b,b1,b2,j)  
#
               T1bbbj(b,b1,b2,j)  = Vibja_bbbb(j,b2,j1,b)*t1b_old(b1,j1)  
               T1bbbj(b,b1,b2,j) *= -0.25 
               Tbbbj(b,b1,b2,j)  += T1bbbj(b,b1,b2,j)  
#
               T1bbbj(b,b1,b2,j)  = Vibja_bbbb(j,b2,j1,b1)*t1b_old(b,j1)  
               T1bbbj(b,b1,b2,j) *= 0.25 
               Tbbbj(b,b1,b2,j)  += T1bbbj(b,b1,b2,j)  
#
               DO j2 
#
                  REQUEST I3bb(j1,b2,j2,j)   j2 
                  REQUEST Tau_bb(b,j1,b1,j2) j2 
#
#                 T1bbbj(b,b1,b2,j)  = Tau_bb(b,j1,b1,j2)*I3bb(j1,b2,j2,j)
                  Tbbjj(b,b1,j1,j2)  = Tau_bb(b,j1,b1,j2)
                  Tjjbj(j1,j2,b2,j)  = I3bb(j1,b2,j2,j)
                  T1bbbj(b,b1,b2,j)  = Tbbjj(b,b1,j1,j2)*Tjjbj(j1,j2,b2,j)
                  T1bbbj(b,b1,b2,j) *= -0.0625
                  Tbbbj(b,b1,b2,j)  += T1bbbj(b,b1,b2,j)
#
               ENDDO j2 
#
            ENDDO j1 
#
# Multiply by 4 to match aces 
# --------------------------- 
#
#           Tbbbj(b,b1,b2,j) *= 4.0 
#
#           PUT Dabci_bbbb(b,b1,b2,j) += Tbbbj(b,b1,b2,j) 
# 
            DO mu 
#
               Txbbj(mu,b1,b2,j)      = Tbbbj(b,b1,b2,j)*cb(mu,b) 
               PREPARE Dxbbj(mu,b1,b2,j) += Txbbj(mu,b1,b2,j)  
# 
            ENDDO mu 
# 
      ENDPARDO b, b1, b2, j 
#
# Back transform to full AO representation
# ---------------------------------------- 
# 
      execute server_barrier 
      PARDO mu, b1, b2, j 
#
            REQUEST Dxbbj(mu,b1,b2,j) j  
# 
            DO nu 
#
               Txxbj(mu,nu,b2,j)      = Dxbbj(mu,b1,b2,j)*cb(nu,b1) 
               PREPARE Dxxbj(mu,nu,b2,j) += Txxbj(mu,nu,b2,j)  
# 
            ENDDO nu 
# 
      ENDPARDO mu, b1, b2, j 
      execute server_barrier 
#
      PARDO mu, nu, j 
#
            allocate Lxxbj(mu,nu,*,j) 
#
            DO b2 
#
               REQUEST Dxxbj(mu,nu,b2,j) j  
               Lxxbj(mu,nu,b2,j) = Dxxbj(mu,nu,b2,j) 
#
            ENDDO b2 
#
            DO lambda 
#
               Txxxj(mu,nu,lambda,j) = 0.0 
# 
               DO b2   
#
                  T1xxxj(mu,nu,lambda,j) = Lxxbj(mu,nu,b2,j)*cb(lambda,b2) 
                  Txxxj(mu,nu,lambda,j) += T1xxxj(mu,nu,lambda,j)  
# 
               ENDDO b2  
#
               PREPARE Dxxxj(mu,nu,lambda,j) = Txxxj(mu,nu,lambda,j)  
#
            ENDDO lambda 
#
            deallocate Lxxbj(mu,nu,*,j) 
#
      ENDPARDO mu, nu, j 
      execute server_barrier 
#
#     PARDO mu, nu, lambda, sigma  
#
#           Txxxx(mu,nu,lambda,sigma) = 0.0  
# 
#           DO j   
#
#              REQUEST Dxxxj(mu,nu,lambda,j) j  
#
#              T1xxxx(mu,nu,lambda,sigma) = Dxxxj(mu,nu,lambda,j)*cb(sigma,j) 
#              Txxxx(mu,nu,lambda,sigma) += T1xxxx(mu,nu,lambda,sigma)  
#
#           ENDDO j 
#
#           T1xxxx(nu,mu,sigma,lambda)     = Txxxx(mu,nu,lambda,sigma)   
#           T2xxxx(lambda,sigma,mu,nu)     = Txxxx(mu,nu,lambda,sigma)   
#           T3xxxx(sigma,lambda,nu,mu)     = Txxxx(mu,nu,lambda,sigma)   
#           PUT Dxxxx(mu,nu,lambda,sigma) += Txxxx(mu,nu,lambda,sigma)  
#           PUT Dxxxx(nu,mu,sigma,lambda) += T1xxxx(nu,mu,sigma,lambda)  
#           PUT Dxxxx(lambda,sigma,mu,nu) += T2xxxx(lambda,sigma,mu,nu)   
#           PUT Dxxxx(sigma,lambda,nu,mu) += T3xxxx(sigma,lambda,nu,mu)   
#
#           Txxxx(mu,nu,lambda,sigma) *= 8.0 
#
#           INTEGRAL BLOCK 1 
#           ---------------- 
#           execute der_int_setup dx1(mu,lambda,nu,sigma) 
#           execute der_int_setup dy1(mu,lambda,nu,sigma) 
#           execute der_int_setup dz1(mu,lambda,nu,sigma) 
#           execute der_int_setup dx2(mu,lambda,nu,sigma) 
#           execute der_int_setup dy2(mu,lambda,nu,sigma) 
#           execute der_int_setup dz2(mu,lambda,nu,sigma) 
#           execute der_int_setup dx3(mu,lambda,nu,sigma) 
#           execute der_int_setup dy3(mu,lambda,nu,sigma) 
#           execute der_int_setup dz3(mu,lambda,nu,sigma) 
#           execute der_int_setup dx4(mu,lambda,nu,sigma) 
#           execute der_int_setup dy4(mu,lambda,nu,sigma) 
#           execute der_int_setup dz4(mu,lambda,nu,sigma) 
#
#           execute compute_derivative_integrals 
#
#           T1xxxx(mu,lambda,nu,sigma) = Txxxx(mu,nu,lambda,sigma) 
#           execute DCONT2 T1xxxx(mu,lambda,nu,sigma) 
# 
#     ENDPARDO mu, nu, lambda, sigma  
#     execute server_barrier 
#
# Done back transformation 
# ------------------------ 
#
      ENDPROC DABCIBBBB 
#     ------------------
#
      PROC DABCIABAB 
#     --------------- 
#
      PARDO a, a1, b, j 
#
            Tabaj(a,b,a1,j) = 0.0 
#
            GET Gae_a(a,a1) 
            GET t1b_old(b,j) 
#
            T1abaj(a,b,a1,j)  = Gae_a(a,a1)^t1b_old(b,j) 
            T1abaj(a,b,a1,j) *= -0.125 
            Tabaj(a,b,a1,j)  += T1abaj(a,b,a1,j) 
#
            DO i 
#
               REQUEST Tau_ab(a,i,b,j)      i  
               REQUEST L2old_ab(i,a,j,b)    i  
               REQUEST Vibja_baab(j,a1,i,b) i  
               GET l1a_old(i,a1) 
               GET t1a_old(a1,i) 
               GET t1a_old(a,i) 
#
               T1abaj(a,b,a1,j)  = Tau_ab(a,i,b,j)*l1a_old(i,a1) 
               T1abaj(a,b,a1,j) *= 0.125 
               Tabaj(a,b,a1,j)  += T1abaj(a,b,a1,j) 
#
               T1abaj(a,b,a1,j)  = L2old_ab(i,a,j,b)*t1a_old(a1,i)  
               T1abaj(a,b,a1,j) *= 0.125 
               Tabaj(a,b,a1,j)  += T1abaj(a,b,a1,j) 
#
               T1abaj(a,b,a1,j)  = Vibja_baab(j,a1,i,b)*t1a_old(a,i) 
               T1abaj(a,b,a1,j) *= 0.25 
               Tabaj(a,b,a1,j)  += T1abaj(a,b,a1,j) 
#
            ENDDO i 
#
            DO j1 
#
               REQUEST Vibja_baba(j,a1,j1,a) j1  
               GET t1b_old(b,j1) 
#
               T1abaj(a,b,a1,j)  = Vibja_baba(j,a1,j1,a)*t1b_old(b,j1) 
               T1abaj(a,b,a1,j) *= -0.25 
               Tabaj(a,b,a1,j)  += T1abaj(a,b,a1,j) 
#
               DO i 
#
                  REQUEST I3ab(i,a1,j1,j)  i 
                  REQUEST Tau_ab(a,i,b,j1) i 
#
#                 T1abaj(a,b,a1,j)  = Tau_ab(a,i,b,j1)*I3ab(i,a1,j1,j)
#
                  Tabij(a,b,i,j1)   = Tau_ab(a,i,b,j1)
                  Tijaj(i,j1,a1,j)  = I3ab(i,a1,j1,j)
                  T1abaj(a,b,a1,j)  = Tabij(a,b,i,j1)*Tijaj(i,j1,a1,j)
                  T1abaj(a,b,a1,j) *= -0.125
                  Tabaj(a,b,a1,j)  += T1abaj(a,b,a1,j)
#
               ENDDO i 
#
            ENDDO j1 
#
# Multiply by 4 to match aces 
# --------------------------- 
#
#           Tabaj(a,b,a1,j) *= 4.0 
#
#           PUT Dabci_abab(a,b,a1,j) += Tabaj(a,b,a1,j) 
# 
            DO mu 
#
               Txbaj(mu,b,a1,j)      = Tabaj(a,b,a1,j)*ca(mu,a) 
               PREPARE Dxbaj(mu,b,a1,j) += Txbaj(mu,b,a1,j)  
# 
            ENDDO mu 
#
      ENDPARDO a, a1, b, j 
#
# Back transform to full AO representation
# ---------------------------------------- 
# 
      execute server_barrier 
      PARDO mu, b, a1, j 
#
            REQUEST Dxbaj(mu,b,a1,j) j  
# 
            DO nu 
#
               Txxaj(mu,nu,a1,j)      = Dxbaj(mu,b,a1,j)*cb(nu,b) 
               PREPARE Dxxaj(mu,nu,a1,j) += Txxaj(mu,nu,a1,j)  
# 
            ENDDO nu 
# 
      ENDPARDO mu, b, a1, j 
      execute server_barrier 
#
      PARDO mu, nu, j 
#
            allocate Lxxaj(mu,nu,*,j) 
#
            DO a1 
#
               REQUEST Dxxaj(mu,nu,a1,j) j  
               Lxxaj(mu,nu,a1,j) = Dxxaj(mu,nu,a1,j) 
#
            ENDDO a1 
# 
            DO lambda    
#
               Txxxj(mu,nu,lambda,j) = 0.0 
#
               DO a1  
#
                  T1xxxj(mu,nu,lambda,j) = Lxxaj(mu,nu,a1,j)*ca(lambda,a1) 
                  Txxxj(mu,nu,lambda,j) += T1xxxj(mu,nu,lambda,j)   
#
               ENDDO a1  
#
               PREPARE Dxxxj(mu,nu,lambda,j) += Txxxj(mu,nu,lambda,j)  
# 
            ENDDO lambda   
#
            deallocate Lxxaj(mu,nu,*,j) 
# 
      ENDPARDO mu, nu, j 
      execute server_barrier 
#
#     PARDO mu, nu, lambda, sigma  
#
#           Txxxx(mu,nu,lambda,sigma) = 0.0  
# 
#           DO j  
#
#              REQUEST Dxxxj(mu,nu,lambda,j) j  
#
#              T1xxxx(mu,nu,lambda,sigma) = Dxxxj(mu,nu,lambda,j)*cb(sigma,j) 
#              Txxxx(mu,nu,lambda,sigma) += T1xxxx(mu,nu,lambda,sigma)  
#
#           ENDDO j 
#
#           T1xxxx(nu,mu,sigma,lambda)     = Txxxx(mu,nu,lambda,sigma)   
#           T2xxxx(lambda,sigma,mu,nu)     = Txxxx(mu,nu,lambda,sigma)   
#           T3xxxx(sigma,lambda,nu,mu)     = Txxxx(mu,nu,lambda,sigma)   
#           PUT Dxxxx(mu,nu,lambda,sigma) += Txxxx(mu,nu,lambda,sigma)  
#           PUT Dxxxx(nu,mu,sigma,lambda) += T1xxxx(nu,mu,sigma,lambda)  
#           PUT Dxxxx(lambda,sigma,mu,nu) += T2xxxx(lambda,sigma,mu,nu)   
#           PUT Dxxxx(sigma,lambda,nu,mu) += T3xxxx(sigma,lambda,nu,mu)   
#
#           Txxxx(mu,nu,lambda,sigma) *= 8.0 
#
#           INTEGRAL BLOCK 1 
#           ---------------- 
#           execute der_int_setup dx1(mu,lambda,nu,sigma) 
#           execute der_int_setup dy1(mu,lambda,nu,sigma) 
#           execute der_int_setup dz1(mu,lambda,nu,sigma) 
#           execute der_int_setup dx2(mu,lambda,nu,sigma) 
#           execute der_int_setup dy2(mu,lambda,nu,sigma) 
#           execute der_int_setup dz2(mu,lambda,nu,sigma) 
#           execute der_int_setup dx3(mu,lambda,nu,sigma) 
#           execute der_int_setup dy3(mu,lambda,nu,sigma) 
#           execute der_int_setup dz3(mu,lambda,nu,sigma) 
#           execute der_int_setup dx4(mu,lambda,nu,sigma) 
#           execute der_int_setup dy4(mu,lambda,nu,sigma) 
#           execute der_int_setup dz4(mu,lambda,nu,sigma) 
#
#           execute compute_derivative_integrals 
#
#           T1xxxx(mu,lambda,nu,sigma) = Txxxx(mu,nu,lambda,sigma) 
#           execute DCONT2 T1xxxx(mu,lambda,nu,sigma) 
# 
#     ENDPARDO mu, nu, lambda, sigma  
#     execute server_barrier 
#
# Done back transformation 
# ------------------------ 
#
      ENDPROC DABCIABAB 
#     ------------------ 
#
      PROC DABCIBABA 
#     --------------- 
#
      PARDO b1, b, a, i 
#
            Tbabi(b1,a,b,i) = 0.0 
#
            GET Gae_b(b1,b) 
            GET t1a_old(a,i) 
#
            T1babi(b1,a,b,i)  = Gae_b(b1,b)^t1a_old(a,i) 
            T1babi(b1,a,b,i) *= -0.125 
            Tbabi(b1,a,b,i)  += T1babi(b1,a,b,i) 
#
            DO j 
#
               REQUEST Tau_ab(a,i,b1,j)    j  
               REQUEST L2old_ab(i,a,j,b1)  j  
               REQUEST Vibja_abba(i,b,j,a) j  
               GET l1b_old(j,b) 
               GET t1b_old(b,j) 
               GET t1b_old(b1,j) 
#
               T1babi(b1,a,b,i)  = Tau_ab(a,i,b1,j)*l1b_old(j,b) 
               T1babi(b1,a,b,i) *= 0.125 
               Tbabi(b1,a,b,i)  += T1babi(b1,a,b,i) 
#
               T1babi(b1,a,b,i)  = L2old_ab(i,a,j,b1)*t1b_old(b,j)  
               T1babi(b1,a,b,i) *= 0.125 
               Tbabi(b1,a,b,i)  += T1babi(b1,a,b,i) 
#
               T1babi(b1,a,b,i)  = Vibja_abba(i,b,j,a)*t1b_old(b1,j) 
               T1babi(b1,a,b,i) *= 0.25 
               Tbabi(b1,a,b,i)  += T1babi(b1,a,b,i) 
#
            ENDDO j 
#
            DO i1 
#
               REQUEST Vibja_abab(i,b,i1,b1) b1  
               GET t1a_old(a,i1) 
#
               T1babi(b1,a,b,i)  = Vibja_abab(i,b,i1,b1)*t1a_old(a,i1) 
               T1babi(b1,a,b,i) *= -0.25 
               Tbabi(b1,a,b,i)  += T1babi(b1,a,b,i) 
#
               DO j 
#
                  REQUEST I3ba(j,b,i1,i) j 
                  REQUEST Tau_ab(a,i1,b1,j) j 
#
#                 T1babi(b1,a,b,i)  = Tau_ab(a,i1,b1,j)*I3ba(j,b,i1,i)
#
                  Tbaji(b1,a,j,i1)  = Tau_ab(a,i1,b1,j)
                  Tjibi(j,i1,b,i)   = I3ba(j,b,i1,i)
                  T1babi(b1,a,b,i)  = Tbaji(b1,a,j,i1)*Tjibi(j,i1,b,i)
                  T1babi(b1,a,b,i) *= -0.125
                  Tbabi(b1,a,b,i)  += T1babi(b1,a,b,i)
#
               ENDDO j 
#
            ENDDO i1 
#
# Multiply by 4 to match aces 
# --------------------------- 
#
#           Tbabi(b1,a,b,i) *= 4.0 
#
#           PUT Dabci_baba(b1,a,b,i) += Tbabi(b1,a,b,i) 
# 
            DO mu 
#
               Txabi(mu,a,b,i)      = Tbabi(b1,a,b,i)*cb(mu,b1) 
               PREPARE Dxabi(mu,a,b,i) += Txabi(mu,a,b,i)  
# 
            ENDDO mu 
#
      ENDPARDO b1, b, a, i 
#
# Back transform to full AO representation
# ---------------------------------------- 
# 
      execute server_barrier 
      PARDO mu, a, b1, i 
#
            REQUEST Dxabi(mu,a,b1,i) i  
# 
            DO nu 
#
               Txxbi(mu,nu,b1,i)      = Dxabi(mu,a,b1,i)*ca(nu,a) 
               PREPARE Dxxbi(mu,nu,b1,i) += Txxbi(mu,nu,b1,i)  
# 
            ENDDO nu 
# 
      ENDPARDO mu, a, b1, i 
      execute server_barrier 
#
      PARDO mu, nu, i 
#
            allocate Lxxbi(mu,nu,*,i) 
#
            DO b 
#
               REQUEST Dxxbi(mu,nu,b,i) i  
               Lxxbi(mu,nu,b,i) = Dxxbi(mu,nu,b,i) 
#
            ENDDO b 
#
            DO lambda 
#
               Txxxi(mu,nu,lambda,i) = 0.0 
# 
               DO b  
#
                  T1xxxi(mu,nu,lambda,i) = Lxxbi(mu,nu,b,i)*cb(lambda,b) 
                  Txxxi(mu,nu,lambda,i) += T1xxxi(mu,nu,lambda,i)  
# 
               ENDDO b 
#
               PREPARE Dxxxi(mu,nu,lambda,i) += Txxxi(mu,nu,lambda,i)  
#
            ENDDO lambda 
#
            deallocate Lxxbi(mu,nu,*,i) 
#
      ENDPARDO mu, nu, i 
      execute server_barrier 
#
#     PARDO mu, nu, lambda, sigma  
#
#           Txxxx(mu,nu,lambda,sigma) = 0.0  
# 
#           DO i  
#
#              REQUEST Dxxxi(mu,nu,lambda,i) i  
#
#              T1xxxx(mu,nu,lambda,sigma) = Dxxxi(mu,nu,lambda,i)*ca(sigma,i) 
#              Txxxx(mu,nu,lambda,sigma) += T1xxxx(mu,nu,lambda,sigma) 
#
#           ENDDO i 
#
#           T1xxxx(nu,mu,sigma,lambda)     = Txxxx(mu,nu,lambda,sigma)   
#           T2xxxx(lambda,sigma,mu,nu)     = Txxxx(mu,nu,lambda,sigma)   
#           T3xxxx(sigma,lambda,nu,mu)     = Txxxx(mu,nu,lambda,sigma)   
#           PUT Dxxxx(mu,nu,lambda,sigma) += Txxxx(mu,nu,lambda,sigma)  
#           PUT Dxxxx(nu,mu,sigma,lambda) += T1xxxx(nu,mu,sigma,lambda)  
#           PUT Dxxxx(lambda,sigma,mu,nu) += T2xxxx(lambda,sigma,mu,nu)   
#           PUT Dxxxx(sigma,lambda,nu,mu) += T3xxxx(sigma,lambda,nu,mu)   
#
#           Txxxx(mu,nu,lambda,sigma) *= 8.0 
#
#           INTEGRAL BLOCK 1 
#           ---------------- 
#           execute der_int_setup dx1(mu,lambda,nu,sigma) 
#           execute der_int_setup dy1(mu,lambda,nu,sigma) 
#           execute der_int_setup dz1(mu,lambda,nu,sigma) 
#           execute der_int_setup dx2(mu,lambda,nu,sigma) 
#           execute der_int_setup dy2(mu,lambda,nu,sigma) 
#           execute der_int_setup dz2(mu,lambda,nu,sigma) 
#           execute der_int_setup dx3(mu,lambda,nu,sigma) 
#           execute der_int_setup dy3(mu,lambda,nu,sigma) 
#           execute der_int_setup dz3(mu,lambda,nu,sigma) 
#           execute der_int_setup dx4(mu,lambda,nu,sigma) 
#           execute der_int_setup dy4(mu,lambda,nu,sigma) 
#           execute der_int_setup dz4(mu,lambda,nu,sigma) 
#
#           execute compute_derivative_integrals 
#
#           T1xxxx(mu,lambda,nu,sigma) = Txxxx(mu,nu,lambda,sigma) 
#           execute DCONT2 T1xxxx(mu,lambda,nu,sigma) 
# 
#     ENDPARDO mu, nu, lambda, sigma  
#     execute server_barrier 
#
# Done back transformation 
# ------------------------ 
#
      ENDPROC DABCIBABA 
#     ------------------ 
#
# Delete distributed intermediate arrays 
# -------------------------------------- 
#
      PROC DABCI  
#     ---------- 
#
# Create distributed intermediate arrays 
# -------------------------------------- 
#
      CALL I2XX
      execute sip_barrier 
      execute server_barrier 
      CALL DABCIAAAA
      CALL DABCIBBBB
      CALL DABCIABAB
      CALL DABCIBABA
#
      ENDPROC DABCI 
#     ------------- 
#
# Equivalent to gamma6 
#
# ----------------------------------------------------------------------------- 
#
# In this procedure the D(ij,ka) block of the two-particle 
# density matrix is evaluated. Only the AAAA contribution is computed.  
#
# ----------------------------------------------------------------------------- 
#
      PROC DIJKAAAAA 
#     -------------- 
#
      PARDO i, i1, i2, a 
#
            Tiiia(i,i1,i2,a) = 0.0 
#
            GET Gmi_a(i,i2) 
            GET t1a_old(a,i1) 
#
            GET Gmi_a(i1,i2) 
            GET t1a_old(a,i) 
#
            T1iiia(i,i1,i2,a)  = Gmi_a(i,i2)^t1a_old(a,i1) 
            T1iiia(i,i1,i2,a) *= -0.125  
            Tiiia(i,i1,i2,a)  += T1iiia(i,i1,i2,a) 
#
            T1iiia(i,i1,i2,a)  = Gmi_a(i1,i2)^t1a_old(a,i) 
            T1iiia(i,i1,i2,a) *= 0.125  
            Tiiia(i,i1,i2,a)  += T1iiia(i,i1,i2,a) 
#
            DO a1 
#
               REQUEST Tau_aa(a1,i,a,i1)      a1  
               REQUEST L2old_aa(i,a1,i1,a)    a1  
               REQUEST Vibja_aaaa(i,a1,i2,a)  a1  
               REQUEST Vibja_aaaa(i1,a1,i2,a) a1  
               GET l1a_old(i2,a1) 
               GET t1a_old(a1,i1) 
               GET t1a_old(a1,i) 
               GET t1a_old(a1,i2) 
#
               T1iiia(i,i1,i2,a) = Tau_aa(a1,i,a,i1)*l1a_old(i2,a1) 
               T1iiia(i,i1,i2,a)*= -0.125  
               Tiiia(i,i1,i2,a) += T1iiia(i,i1,i2,a) 
#
               T1iiia(i,i1,i2,a) = L2old_aa(i,a1,i1,a)*t1a_old(a1,i2) 
               T1iiia(i,i1,i2,a)*= -0.125  
               Tiiia(i,i1,i2,a) += T1iiia(i,i1,i2,a) 
#
               T1iiia(i,i1,i2,a) = Vibja_aaaa(i,a1,i2,a)*t1a_old(a1,i1) 
               T1iiia(i,i1,i2,a)*= 0.25  
               Tiiia(i,i1,i2,a) += T1iiia(i,i1,i2,a) 
#
               T1iiia(i,i1,i2,a) = Vibja_aaaa(i1,a1,i2,a)*t1a_old(a1,i) 
               T1iiia(i,i1,i2,a)*= -0.25  
               Tiiia(i,i1,i2,a) += T1iiia(i,i1,i2,a) 
#
            ENDDO a1 
#
            DO i3 
# 
               REQUEST Vijmn_aaaa(i,i1,i2,i3) i3  
               GET t1a_old(a,i3) 
# 
               T1iiia(i,i1,i2,a) = Vijmn_aaaa(i,i1,i2,i3)*t1a_old(a,i3) 
               T1iiia(i,i1,i2,a)*= 0.125  
               Tiiia(i,i1,i2,a) += T1iiia(i,i1,i2,a) 
#
            ENDDO i3 
#
# Multiply by 4 to match aces 
# --------------------------- 
#
#           Tiiia(i,i1,i2,a) *= 4.0 
#
#           PUT Dijka_aaaa(i,i1,i2,a) += Tiiia(i,i1,i2,a) 
#
            DO sigma 
#
               Tiiix(i,i1,i2,sigma)      = Tiiia(i,i1,i2,a)*ca(sigma,a) 
               PREPARE Diiix(i,i1,i2,sigma) += Tiiix(i,i1,i2,sigma) 
#
            ENDDO sigma 
#
      ENDPARDO i, i1, i2, a 
#
# Backtransform to AO basis
# ------------------------- 
#
      execute server_barrier 
      PARDO i, i1, lambda, sigma  
#
            Tiixx(i,i1,lambda,sigma) = 0.0  
#
            DO i2  
#
               REQUEST Diiix(i,i1,i2,sigma) i  
#
               T1iixx(i,i1,lambda,sigma) = Diiix(i,i1,i2,sigma)*ca(lambda,i2) 
               Tiixx(i,i1,lambda,sigma) += T1iixx(i,i1,lambda,sigma)  
#
            ENDDO i2 
#
            Tiixx(i,i1,lambda,sigma)         *= 8.0  
            PREPARE Diixx(i,i1,lambda,sigma) += Tiixx(i,i1,lambda,sigma) 
#
      ENDPARDO i, i1, lambda, sigma   
      execute server_barrier
#
# Done Backtransformation 
# ----------------------- 
#
      ENDPROC DIJKAAAAA 
#     ----------------- 
#
# ----------------------------------------------------------------------------- 
#
# ----------------------------------------------------------------------------- 
#
# In this procedure the D(iJ,kA) block of the two-particle 
# density matrix is evaluated. The AB block is computed.  
#
# ----------------------------------------------------------------------------- 
#
      PROC DIJKAABAB 
#     -------------- 
#
      PARDO i, j, i1, b 
#
            Tijib(i,j,i1,b) = 0.0 
#
            GET Gmi_a(i,i1) 
            GET t1b_old(b,j) 
#
            T1ijib(i,j,i1,b) = Gmi_a(i,i1)^t1b_old(b,j) 
            T1ijib(i,j,i1,b)*= -0.125  
            Tijib(i,j,i1,b) += T1ijib(i,j,i1,b) 
#
            DO a 
#
               REQUEST Tau_ab(a,i,b,j)      a  
               REQUEST L2old_ab(i,a,j,b)    a  
               REQUEST Vibja_baab(j,a,i1,b) a  
               GET t1a_old(a,i1) 
               GET t1a_old(a,i) 
               GET l1a_old(i1,a) 
#
               T1ijib(i,j,i1,b) = Tau_ab(a,i,b,j)*l1a_old(i1,a) 
               T1ijib(i,j,i1,b)*= -0.125  
               Tijib(i,j,i1,b) += T1ijib(i,j,i1,b) 
#
               T1ijib(i,j,i1,b) = L2old_ab(i,a,j,b)*t1a_old(a,i1) 
               T1ijib(i,j,i1,b)*= -0.125  
               Tijib(i,j,i1,b) += T1ijib(i,j,i1,b) 
#
               T1ijib(i,j,i1,b) = Vibja_baab(j,a,i1,b)*t1a_old(a,i) 
               T1ijib(i,j,i1,b)*= -0.25  
               Tijib(i,j,i1,b) += T1ijib(i,j,i1,b) 
#
            ENDDO a 
#
            DO b1 
#
               REQUEST Vibja_abab(i,b1,i1,b) b1  
               GET t1b_old(b1,j) 
#
               T1ijib(i,j,i1,b) = Vibja_abab(i,b1,i1,b)*t1b_old(b1,j) 
               T1ijib(i,j,i1,b)*= 0.25  
               Tijib(i,j,i1,b) += T1ijib(i,j,i1,b) 
#
            ENDDO b1 
#
            DO j1 
# 
               REQUEST Vijmn_abab(i,j,i1,j1) j1  
               GET t1b_old(b,j1) 
#
               T1ijib(i,j,i1,b) = Vijmn_abab(i,j,i1,j1)*t1b_old(b,j1) 
               T1ijib(i,j,i1,b)*= 0.125  
               Tijib(i,j,i1,b) += T1ijib(i,j,i1,b) 
#
            ENDDO j1 
#
# Multiply by 4 to match aces 
# --------------------------- 
#
#           Tijib(i,j,i1,b) *= 4.0 
#
#           PUT Dijka_abab(i,j,i1,b) += Tijib(i,j,i1,b) 
#
            DO sigma 
#
               Tijix(i,j,i1,sigma)      = Tijib(i,j,i1,b)*cb(sigma,b) 
               PREPARE Dijix(i,j,i1,sigma) += Tijix(i,j,i1,sigma) 
#
            ENDDO sigma 
#
      ENDPARDO i, j, i1, b 
#
# Backtransform to AO basis
# ------------------------- 
#
      execute server_barrier 
      PARDO i, j1, lambda, sigma  
#
            Tijxx(i,j1,lambda,sigma) = 0.0  
#
            DO i2  
#
               REQUEST Dijix(i,j1,i2,sigma) i  
#
               T1ijxx(i,j1,lambda,sigma) = Dijix(i,j1,i2,sigma)*ca(lambda,i2) 
               Tijxx(i,j1,lambda,sigma) += T1ijxx(i,j1,lambda,sigma)  
#
            ENDDO i2 
#
            Tijxx(i,j1,lambda,sigma)         *= 8.0  
            PREPARE Dijxx(i,j1,lambda,sigma) += Tijxx(i,j1,lambda,sigma) 
#
      ENDPARDO i, j1, lambda, sigma 
      execute server_barrier
#
# Done Backtransformation 
# ----------------------- 
#
      ENDPROC DIJKAABAB 
#     ----------------- 
#
# ----------------------------------------------------------------------------- 
#
# ----------------------------------------------------------------------------- 
#
# In this procedure the D(Ij,Ka) block of the two-particle 
# density matrix is evaluated. The BABA block is computed.  
#
# ----------------------------------------------------------------------------- 
#
      PROC DIJKABABA 
#     -------------- 
#
      PARDO j, i, j1, a 
#
            Tjija(j,i,j1,a) = 0.0 
#
            GET Gmi_b(j,j1) 
            GET t1a_old(a,i) 
#
            T1jija(j,i,j1,a) = Gmi_b(j,j1)^t1a_old(a,i) 
            T1jija(j,i,j1,a)*= -0.125  
            Tjija(j,i,j1,a) += T1jija(j,i,j1,a) 
#
            DO b 
#
               REQUEST Tau_ab(a,i,b,j)      b  
               REQUEST L2old_ab(i,a,j,b)    b  
               REQUEST Vibja_abba(i,b,j1,a) b  
               GET t1b_old(b,j1) 
               GET t1b_old(b,j) 
               GET l1b_old(j1,b) 
#
               T1jija(j,i,j1,a) = Tau_ab(a,i,b,j)*l1b_old(j1,b) 
               T1jija(j,i,j1,a)*= -0.125  
               Tjija(j,i,j1,a) += T1jija(j,i,j1,a) 
#
               T1jija(j,i,j1,a) = L2old_ab(i,a,j,b)*t1b_old(b,j1) 
               T1jija(j,i,j1,a)*= -0.125  
               Tjija(j,i,j1,a) += T1jija(j,i,j1,a) 
#
               T1jija(j,i,j1,a) = Vibja_abba(i,b,j1,a)*t1b_old(b,j) 
               T1jija(j,i,j1,a)*= -0.25  
               Tjija(j,i,j1,a) += T1jija(j,i,j1,a) 
#
            ENDDO b 
#
            DO i1 
# 
               REQUEST Vijmn_abab(i,j,i1,j1) i1  
               GET t1a_old(a,i1) 
               T1jija(j,i,j1,a) = Vijmn_abab(i,j,i1,j1)*t1a_old(a,i1) 
               T1jija(j,i,j1,a)*= 0.125  
               Tjija(j,i,j1,a) += T1jija(j,i,j1,a) 
#
            ENDDO i1 
#
            DO a1 
#
               REQUEST Vibja_baba(j,a1,j1,a) a1  
               GET t1a_old(a1,i) 
               T1jija(j,i,j1,a) = Vibja_baba(j,a1,j1,a)*t1a_old(a1,i) 
               T1jija(j,i,j1,a)*= 0.25  
               Tjija(j,i,j1,a) += T1jija(j,i,j1,a) 
#
            ENDDO a1 
#
# Multiply by 4 to match aces 
# --------------------------- 
#
#           Tjija(j,i,j1,a) *= 4.0 
#
#           PUT Dijka_baba(j,i,j1,a) += Tjija(j,i,j1,a) 
#
            DO sigma 
#
               Tjijx(j,i,j1,sigma)      = Tjija(j,i,j1,a)*ca(sigma,a) 
               PREPARE Djijx(j,i,j1,sigma) += Tjijx(j,i,j1,sigma) 
#
            ENDDO sigma 
#
      ENDPARDO j, i, j1, a 
#
# Backtransform to AO basis
# ------------------------- 
#
      execute server_barrier 
      PARDO j, i1, lambda, sigma  
#
            Tijxx(i1,j,sigma,lambda) = 0.0  
#
            DO j2   
#
               REQUEST Djijx(j,i1,j2,sigma) j  
#
               T1ijxx(i1,j,sigma,lambda) = Djijx(j,i1,j2,sigma)*cb(lambda,j2) 
               Tijxx(i1,j,sigma,lambda) += T1ijxx(i1,j,sigma,lambda)   
#
            ENDDO j2 
#
            Tijxx(i1,j,sigma,lambda)         *= 8.0  
            PREPARE Dijxx(i1,j,sigma,lambda) += Tijxx(i1,j,sigma,lambda)  
#
      ENDPARDO j, i1, lambda, sigma 
      execute server_barrier
#
# Done Backtransformation 
# ----------------------- 
#
      ENDPROC DIJKABABA 
#     ----------------- 
#
# ----------------------------------------------------------------------------- 
#
# ----------------------------------------------------------------------------- 
#
# In this procedure the D(IJ,KA) block of the two-particle 
# density matrix is evaluated. Only the BBBB contribution is computed.  
#
# ----------------------------------------------------------------------------- 
#
      PROC DIJKABBBB 
#     -------------- 
#
      PARDO j, j1, j2, b 
#
            Tjjjb(j,j1,j2,b) = 0.0 
#
            GET Gmi_b(j,j2) 
            GET t1b_old(b,j1) 
#
            GET Gmi_b(j1,j2) 
            GET t1b_old(b,j) 
#
            T1jjjb(j,j1,j2,b) = Gmi_b(j,j2)^t1b_old(b,j1) 
            T1jjjb(j,j1,j2,b)*= -0.125  
            Tjjjb(j,j1,j2,b) += T1jjjb(j,j1,j2,b) 
#
            T1jjjb(j,j1,j2,b)  = Gmi_b(j1,j2)^t1b_old(b,j) 
            T1jjjb(j,j1,j2,b) *= 0.125  
            Tjjjb(j,j1,j2,b)  += T1jjjb(j,j1,j2,b) 
#
            DO b1 
#
               REQUEST Tau_bb(b1,j,b,j1)      b1  
               REQUEST L2old_bb(j,b1,j1,b)    b1  
               REQUEST Vibja_bbbb(j,b1,j2,b)  b1  
               REQUEST Vibja_bbbb(j1,b1,j2,b) b1  
               GET l1b_old(j2,b1) 
               GET t1b_old(b1,j2) 
               GET t1b_old(b1,j1) 
               GET t1b_old(b1,j) 
#
               T1jjjb(j,j1,j2,b) = Tau_bb(b1,j,b,j1)*l1b_old(j2,b1) 
               T1jjjb(j,j1,j2,b)*= -0.125  
               Tjjjb(j,j1,j2,b) += T1jjjb(j,j1,j2,b) 
#
               T1jjjb(j,j1,j2,b) = L2old_bb(j,b1,j1,b)*t1b_old(b1,j2) 
               T1jjjb(j,j1,j2,b)*= -0.125  
               Tjjjb(j,j1,j2,b) += T1jjjb(j,j1,j2,b) 
#
               T1jjjb(j,j1,j2,b) = Vibja_bbbb(j,b1,j2,b)*t1b_old(b1,j1) 
               T1jjjb(j,j1,j2,b)*= 0.25  
               Tjjjb(j,j1,j2,b) += T1jjjb(j,j1,j2,b) 
#
               T1jjjb(j,j1,j2,b) = Vibja_bbbb(j1,b1,j2,b)*t1b_old(b1,j) 
               T1jjjb(j,j1,j2,b)*= -0.25  
               Tjjjb(j,j1,j2,b) += T1jjjb(j,j1,j2,b) 
#
            ENDDO b1 
#
            DO j3 
# 
               REQUEST Vijmn_bbbb(j,j1,j2,j3) j3  
               GET t1b_old(b,j3) 
               T1jjjb(j,j1,j2,b) = Vijmn_bbbb(j,j1,j2,j3)*t1b_old(b,j3) 
               T1jjjb(j,j1,j2,b)*= 0.125  
               Tjjjb(j,j1,j2,b) += T1jjjb(j,j1,j2,b) 
#
            ENDDO j3 
#
# Multiply by 4 to match aces 
# --------------------------- 
#
#           Tjjjb(j,j1,j2,b) *= 4.0 
#
#           PUT Dijka_bbbb(j,j1,j2,b) += Tjjjb(j,j1,j2,b) 
#
            DO sigma 
#
               Tjjjx(j,j1,j2,sigma)      = Tjjjb(j,j1,j2,b)*cb(sigma,b) 
               PREPARE Djjjx(j,j1,j2,sigma) += Tjjjx(j,j1,j2,sigma) 
#
            ENDDO sigma 
#
      ENDPARDO j, j1, j2, b 
#
# Backtransform to AO basis
# ------------------------- 
#
      execute server_barrier 
      PARDO j, j1, lambda, sigma  
#
            Tjjxx(j,j1,lambda,sigma) = 0.0  
#
            DO j2  
#
               REQUEST Djjjx(j,j1,j2,sigma) j  
#
               T1jjxx(j,j1,lambda,sigma) = Djjjx(j,j1,j2,sigma)*cb(lambda,j2) 
               Tjjxx(j,j1,lambda,sigma) += T1jjxx(j,j1,lambda,sigma)  
#
            ENDDO j2 
#
            Tjjxx(j,j1,lambda,sigma)         *= 8.0  
            PREPARE Djjxx(j,j1,lambda,sigma) += Tjjxx(j,j1,lambda,sigma) 
#
      ENDPARDO j, j1, lambda, sigma 
      execute server_barrier
#
# Done Backtransformation 
# ----------------------- 
#
      ENDPROC DIJKABBBB 
#     ----------------- 
#
# ----------------------------------------------------------------------------- 
#
      PROC DIJKA 
#     ---------- 
#
# Create gamma arrays 
# ------------------- 
#
           CALL DIJKAAAAA 
           CALL DIJKAABAB 
           CALL DIJKABABA 
           CALL DIJKABBBB 
#
      ENDPROC DIJKA 
#     ------------- 
#
# ----------------------------------------------------------------------------
#
# In this superprocedure the particle-particle block of the relaxed density 
# matrix is computed. The expressions programmed are: 
# 
# D_{ab} = 1/4 P_+(ab) t^{ae}_{mn} \lambda^{mn}_{be}  
#        + 1/4 P_+(ab) t^{aE}_{mN} \lambda^{mN}_{bE}  
#        + 1/2 P_+(ab) t^{a}_{m} \lambda^{m}_{b} 
#
# D_{AB} = D_{ab} [a<-->A, b<-->B, i<-->I, j<-->J, m<-->M, n<-->N] 
#
      PROC DABA 
#     --------- 
#
      PARDO a, a1, i  
#
            DO a2 
            DO i1 
#
               REQUEST T2old_aa(a,i,a2,i1)  i1  
               REQUEST L2old_aa(i,a1,i1,a2) i1  
#
               Taa(a,a1)        = T2old_aa(a,i,a2,i1)*L2old_aa(i,a1,i1,a2)
               Taa(a,a1)       *= 0.25 
               T1aa(a1,a)       = Taa(a,a1)  
#
               PUT Dab_a(a,a1) += Taa(a,a1) 
               PUT Dab_a(a1,a) += T1aa(a1,a) 
#
            ENDDO i1 
            ENDDO a2 
#
            DO b 
            DO j 
#
               REQUEST T2old_ab(a,i,b,j)  j  
               REQUEST L2old_ab(i,a1,j,b) j  
#
               Taa(a,a1)        = T2old_ab(a,i,b,j)*L2old_ab(i,a1,j,b)
               Taa(a,a1)       *= 0.5 
               T1aa(a1,a)       = Taa(a,a1)  
#
               PUT Dab_a(a,a1) += Taa(a,a1) 
               PUT Dab_a(a1,a) += T1aa(a1,a) 
#
            ENDDO j 
            ENDDO b 
#
      ENDPARDO a, a1, i  
#
      ENDPROC DABA 
#     ------------ 
#
      PROC DABB 
#     --------- 
#
      PARDO b1, b, j  
#
            DO b2 
            DO j1 
#
               REQUEST T2old_bb(b1,j,b2,j1) j1  
               REQUEST L2old_bb(j,b,j1,b2)  j1  
#
               Tbb(b1,b)        = T2old_bb(b1,j,b2,j1)*L2old_bb(j,b,j1,b2)
               Tbb(b1,b)       *= 0.25 
               T1bb(b,b1)       = Tbb(b1,b)  
#
               PUT Dab_b(b1,b) += Tbb(b1,b) 
               PUT Dab_b(b,b1) += T1bb(b,b1) 
#
            ENDDO j1 
            ENDDO b2 
#
            DO a 
            DO i 
#
               REQUEST T2old_ab(a,i,b1,j) i  
               REQUEST L2old_ab(i,a,j,b)  i  
#
               Tbb(b1,b)        = T2old_ab(a,i,b1,j)*L2old_ab(i,a,j,b)
               Tbb(b1,b)       *= 0.5 
               T1bb(b,b1)       = Tbb(b1,b)  
#
               PUT Dab_b(b1,b) += Tbb(b1,b) 
               PUT Dab_b(b,b1) += T1bb(b,b1) 
#
            ENDDO i 
            ENDDO a 
#
      ENDPARDO b1, b, j  
#
      ENDPROC DABB 
#     ------------ 
#
# ----------------------------------------------------------------------------
#
      PROC DAB 
           CALL DABA 
           CALL DABB 
      ENDPROC DAB 
#
# --------------------------------------------------------------------------- 
#
# In this superprocedure the occupied-occupied block of the relaxed
# density matrix is computed. The expressions programmed are:
#
# D_{ij} = -1/4 P_+(ij) t^{ef}_{im} \lambda^{jm}_{ef} 
#          -1/4 P_+(ij) t^{eF}_{iM} \lambda^{jM}_{eF}   
#          -1/2 P_+(ij) t^{e}_{i} \lambda^{j}_{e}   
#
# D_{IJ} = D_{ij} [i<-->I, j<-->J, e<-->E, f<-->F] 
#
# --------------------------------------------------------------------------- 
#
      PROC DIJA 
#     --------- 
#
      PARDO a, a1, i, i2 
#
            REQUEST T2old_aa(a,i,a1,i2) a  
#
            DO i1 
#
               REQUEST L2old_aa(i1,a,i2,a1) i1  
#
               Tii(i,i1)        = T2old_aa(a,i,a1,i2)*L2old_aa(i1,a,i2,a1) 
               Tii(i,i1)       *= -0.25   
               T1ii(i1,i)       = Tii(i,i1) 
               PUT Dij_a(i,i1) += Tii(i,i1) 
               PUT Dij_a(i1,i) += T1ii(i1,i) 
#
            ENDDO i1 
#
      ENDPARDO a, a1, i, i2 
#
      PARDO a, b, i, j 
#
            REQUEST T2old_ab(a,i,b,j) a  
#
            DO i1 
#
               REQUEST L2old_ab(i1,a,j,b) i1  
#
               Tii(i,i1)        = T2old_ab(a,i,b,j)*L2old_ab(i1,a,j,b) 
               Tii(i,i1)       *= -0.5   
               T1ii(i1,i)       = Tii(i,i1) 
               PUT Dij_a(i,i1) += Tii(i,i1) 
               PUT Dij_a(i1,i) += T1ii(i1,i) 
#
            ENDDO i1 
#
      ENDPARDO a, b, i, j 
#
      ENDPROC DIJA 
#     ------------ 
#
      PROC DIJB 
#     --------- 
#
      PARDO b, b1, j, j2 
#
            REQUEST L2old_bb(j,b,j2,b1) b  
#
            DO j1 
#
               REQUEST T2old_bb(b,j1,b1,j2) j1  
#
               Tjj(j1,j)        = T2old_bb(b,j1,b1,j2)*L2old_bb(j,b,j2,b1) 
               Tjj(j1,j)       *= -0.25   
               T1jj(j,j1)       = Tjj(j1,j) 
               PUT Dij_b(j1,j) += Tjj(j1,j) 
               PUT Dij_b(j,j1) += T1jj(j,j1) 
#
            ENDDO j1 
#
      ENDPARDO b, b1, j, j2 
#
      PARDO b, a, j, i 
#
            REQUEST L2old_ab(i,a,j,b) b  
#
            DO j1 
#
               REQUEST T2old_ab(a,i,b,j1) j1  
#
               Tjj(j1,j)        = T2old_ab(a,i,b,j1)*L2old_ab(i,a,j,b) 
               Tjj(j1,j)       *= -0.5   
               T1jj(j,j1)       = Tjj(j1,j) 
               PUT Dij_b(j1,j) += Tjj(j1,j) 
               PUT Dij_b(j,j1) += T1jj(j,j1) 
#
            ENDDO j1 
#
      ENDPARDO b, a, j, i 
#
      ENDPROC DIJB 
#     ------------ 
#
      PROC DIJ 
#     ----------- 
           CALL DIJA 
           CALL DIJB 
      ENDPROC DIJ 
#     ----------- 
#
# --------------------------------------------------------------------------------------
#
     PROC DPQRSTODXXXX
#    ----------------- 
#
#    Form Half back transformed cluster array AAAA spin case 
#    -------------------------------------------------------
#
     PARDO a, a1, i, i1
#
           REQUEST T2old_aa(a,i,a1,i1) a 
#
           DO lambda
#
              Zaa(lambda,i,a1,i1)  = T2old_aa(a,i,a1,i1)*ca(lambda,a)
#
              DO sigma
#
                 ZZaa(lambda,i,sigma,i1)        = Zaa(lambda,i,a1,i1)*ca(sigma,a1)
                 PREPARE TAO_aa(lambda,i,sigma,i1) += ZZaa(lambda,i,sigma,i1)
#
              ENDDO sigma
#
           ENDDO lambda
#
     ENDPARDO a, a1, i, i1 
#
#    Form Half back transformed cluster array BBBB spin case 
#    -------------------------------------------------------
#
     PARDO b, b1, j, j1
#  
           REQUEST T2old_bb(b,j,b1,j1) b 
#
           DO lambda
#
              Zbb(lambda,j,b1,j1) = T2old_bb(b,j,b1,j1)*cb(lambda,b)
#
              DO sigma
#
                 ZZbb(lambda,j,sigma,j1)        = Zbb(lambda,j,b1,j1)*cb(sigma,b1)
                 PREPARE TAO_bb(lambda,j,sigma,j1) += ZZbb(lambda,j,sigma,j1)
#
              ENDDO sigma
#
           ENDDO lambda
#
     ENDPARDO b, b1, j, j1 
#
#    Form Half back transformed cluster array ABAB spin case 
#    -------------------------------------------------------
#
     PARDO a, b, i, j
#
           REQUEST T2old_ab(a,i,b,j) j 
#
           DO lambda
#
              Zab(lambda,i,b,j) = T2old_ab(a,i,b,j)*ca(lambda,a)
#
              DO sigma
#
                 ZZab(lambda,i,sigma,j)        = Zab(lambda,i,b,j)*cb(sigma,b)
                 PREPARE TAO_ab(lambda,i,sigma,j) += ZZab(lambda,i,sigma,j)
#
              ENDDO sigma
#
           ENDDO lambda
#
     ENDPARDO a, b, i, j 
#
     execute server_barrier 
#
# Remove half transformed quantities 
# ---------------------------------- 
# 
     ENDPROC DPQRSTODXXXX
#    -------------------- 
#
# -----------------------------------------------------------------------------
#
      PROC D1TRANS
#     ------------
#
# -----------------------------------------------------------------------------
#
#     Transform Dai_aa
#     ----------------
      PARDO a, i
#
            GET Doldai_a(a,i)
#
            DO mu
#
               Jxi(mu,i)  = Doldai_a(a,i)*ca(mu,a)
#
               DO nu
#
                  Ixx(mu,nu)       = Jxi(mu,i)*ca(nu,i)
                  PUT DpqA(mu,nu) += Ixx(mu,nu)
                  I1xx(nu,mu)      = Ixx(mu,nu) 
                  PUT DpqA(nu,mu) += I1xx(nu,mu)
#
               ENDDO nu
#
            ENDDO mu
#
      ENDPARDO a, i
#
#     Transform Dai_bb
#     ----------------
      PARDO b, j
#
            GET Doldai_b(b,j)
#
            DO mu
#
               Jxj(mu,j)  = Doldai_b(b,j)*cb(mu,b)
#
               DO nu
#
                  Ixx(mu,nu)       = Jxj(mu,j)*cb(nu,j)
                  PUT DpqB(mu,nu) += Ixx(mu,nu)
                  I1xx(nu,mu)      = Ixx(mu,nu) 
                  PUT DpqB(nu,mu) += I1xx(nu,mu)
#
               ENDDO nu
#
            ENDDO mu
#
      ENDPARDO b, j
#
#     Transform Dab_a
#     ---------------
      PARDO a, a1
#
            GET          Dab_a(a,a1)
            GET          DOR_aa(a,a1)
            taa(a,a1)  = Dab_a(a,a1) 
            taa(a,a1) += DOR_aa(a,a1) 
#
            DO mu
#
               Ixa(mu,a1)  = taa(a,a1)*ca(mu,a)
#
               DO nu
#
                  Ixx(mu,nu)       = Ixa(mu,a1)*ca(nu,a1)
                  PUT DpqA(mu,nu) += Ixx(mu,nu)
#
               ENDDO nu
#
            ENDDO mu
#
      ENDPARDO a, a1
#
#     Transform Dab_b
#     ----------------
      PARDO b, b1
#
            GET          Dab_b(b,b1)
            GET          DOR_bb(b,b1)
            tbb(b,b1)  = Dab_b(b,b1) 
            tbb(b,b1) += DOR_bb(b,b1) 
#
            DO mu
#
               Ixb(mu,b1)  = tbb(b,b1)*cb(mu,b)
#
               DO nu
#
                  Ixx(mu,nu)       = Ixb(mu,b1)*cb(nu,b1)
                  PUT DpqB(mu,nu) += Ixx(mu,nu)
#
               ENDDO nu
#
            ENDDO mu
#
      ENDPARDO b, b1
#
#     Transform Dij_aa
#     ----------------
      PARDO i, i1
#
            GET          Dij_a(i,i1)
            GET          DOR_ii(i,i1)
            tii(i,i1)  = Dij_a(i,i1)
            tii(i,i1) += DOR_ii(i,i1)
#
            DO mu
#
               Jxi(mu,i1)  = tii(i,i1)*ca(mu,i)
#
               DO nu
#
                  Ixx(mu,nu)       = Jxi(mu,i1)*ca(nu,i1)
                  PUT DpqA(mu,nu) += Ixx(mu,nu)
#
               ENDDO nu
#
            ENDDO mu
#
      ENDPARDO i, i1
#
#     Transform Dij_bb
#     ----------------
      PARDO j, j1
#
            GET          Dij_b(j,j1)
            GET          DOR_jj(j,j1)
            tjj(j,j1)  = Dij_b(j,j1)
            tjj(j,j1) += DOR_jj(j,j1)
#
            DO mu
#
               Jxj(mu,j1)  = tjj(j,j1)*cb(mu,j)
#
               DO nu
#
                  Ixx(mu,nu)       = Jxj(mu,j1)*cb(nu,j1)
                  PUT DpqB(mu,nu) += Ixx(mu,nu)
#
               ENDDO nu
#
            ENDDO mu
#
      ENDPARDO j, j1
      execute sip_barrier
#
# -----------------------------------------------------------------------------
#
      ENDPROC D1TRANS
#     ---------------
#
      PROC HFDENS  
#     -----------  
#
      PARDO mu, nu, i  
#
            Txi(nu,i)        = ca(nu,i) 
            Tpq(mu,nu)       = ca(mu,i)*Txi(nu,i)  
            PUT DhfA(mu,nu) += Tpq(mu,nu) 
#
      ENDPARDO mu, nu, i  
#
      PARDO mu, nu, j  
#
            Txj(nu,j)        = cb(nu,j) 
            Tpq(mu,nu)       = cb(mu,j)*Txj(nu,j)  
            PUT DhfB(mu,nu) += Tpq(mu,nu) 
#
      ENDPARDO mu, nu, j  
#
      ENDPROC HFDENS  
#     -------------- 
#
# -----------------------------------------------------------------------------
#
# The complete two-particle density martix is fully transformed and 'contracted' 
# with the integral derivatives.  
# --------------------------------------------------- 
#
      PROC PDCONT
#     ----------- 

      allocate LDHFa(*,*) 
      allocate LDpqa(*,*) 
      allocate LDHFb(*,*) 
      allocate LDpqb(*,*) 
      DO mu 
      DO nu 
        GET DHFa(mu,nu) 
        LDHFa(mu,nu) = DHFa(mu,nu) 
      ENDDO nu 
      ENDDO mu
      DO mu 
      DO nu 
        GET Dpqa(mu,nu) 
        LDpqa(mu,nu) = Dpqa(mu,nu) 
      ENDDO nu 
      ENDDO mu

      DO mu 
      DO nu 
        GET DHFb(mu,nu) 
        LDHFb(mu,nu) = DHFb(mu,nu) 
      ENDDO nu 
      ENDDO mu
      DO mu 
      DO nu 
        GET Dpqb(mu,nu) 
        LDpqb(mu,nu) = Dpqb(mu,nu) 
      ENDDO nu 
      ENDDO mu
      execute server_barrier 
#
      PARDO mu, nu, lambda, sigma 
#
            Txxxx(mu,nu,lambda,sigma) = 0.0
#
#           Compute the seperable contribution to the density matrix  
#           --------------------------------------------------------  
#
#           HF only
#           -------
            Txx(mu,lambda)             = LDHFa(mu,lambda)
            T1xxxx(mu,nu,lambda,sigma) = Txx(mu,lambda)^LDHFa(nu,sigma)
            Txxxx(mu,nu,lambda,sigma) += T1xxxx(mu,nu,lambda,sigma)
#
            Txx(mu,lambda)             = LDHFb(mu,lambda)
            T1xxxx(mu,nu,lambda,sigma) = Txx(mu,lambda)^LDHFb(nu,sigma)
            Txxxx(mu,nu,lambda,sigma) += T1xxxx(mu,nu,lambda,sigma)
#
            T1xxxx(mu,nu,lambda,sigma) = LDHFa(mu,lambda)^LDHFb(nu,sigma)
            Txxxx(mu,nu,lambda,sigma) += T1xxxx(mu,nu,lambda,sigma)
#
            T1xxxx(mu,nu,lambda,sigma) = LDHFb(mu,lambda)^LDHFa(nu,sigma)
            Txxxx(mu,nu,lambda,sigma) += T1xxxx(mu,nu,lambda,sigma)
#
            Txx(mu,sigma)              = LDHFa(mu,sigma)
            T1xxxx(mu,nu,lambda,sigma) = Txx(mu,sigma)^LDHFa(nu,lambda)
            Txxxx(mu,nu,lambda,sigma) -= T1xxxx(mu,nu,lambda,sigma)
#
            Txx(mu,sigma)              = LDHFb(mu,sigma)
            T1xxxx(mu,nu,lambda,sigma) = Txx(mu,sigma)^LDHFb(nu,lambda)
            Txxxx(mu,nu,lambda,sigma) -= T1xxxx(mu,nu,lambda,sigma)
#
            Txxxx(mu,nu,lambda,sigma) *= 0.5
#
#           Correlation
#           -----------
            T1xxxx(mu,nu,lambda,sigma) = LDpqA(mu,lambda)^LDHFA(nu,sigma)
            Txxxx(mu,nu,lambda,sigma) += T1xxxx(mu,nu,lambda,sigma)
#
            T1xxxx(mu,nu,lambda,sigma) = LDpqB(mu,lambda)^LDHFB(nu,sigma)
            Txxxx(mu,nu,lambda,sigma) += T1xxxx(mu,nu,lambda,sigma)
#
            T1xxxx(mu,nu,lambda,sigma) = LDpqA(mu,lambda)^LDHFB(nu,sigma)
            Txxxx(mu,nu,lambda,sigma) += T1xxxx(mu,nu,lambda,sigma)
#
            T1xxxx(mu,nu,lambda,sigma) = LDpqB(mu,lambda)^LDHFA(nu,sigma)
            Txxxx(mu,nu,lambda,sigma) += T1xxxx(mu,nu,lambda,sigma)

            T1xxxx(mu,nu,lambda,sigma) = LDpqA(mu,sigma)^LDHFA(nu,lambda)
            T1xxxx(mu,nu,lambda,sigma)*= 0.5
            Txxxx(mu,nu,lambda,sigma) -= T1xxxx(mu,nu,lambda,sigma)
#
            T1xxxx(mu,nu,lambda,sigma) = LDpqA(nu,lambda)^LDHFA(mu,sigma)
            T1xxxx(mu,nu,lambda,sigma)*= 0.5
            Txxxx(mu,nu,lambda,sigma) -= T1xxxx(mu,nu,lambda,sigma)
#
            T1xxxx(mu,nu,lambda,sigma) = LDpqB(mu,sigma)^LDHFB(nu,lambda)
            T1xxxx(mu,nu,lambda,sigma)*= 0.5
            Txxxx(mu,nu,lambda,sigma) -= T1xxxx(mu,nu,lambda,sigma)
#
            T1xxxx(mu,nu,lambda,sigma) = LDpqB(nu,lambda)^LDHFB(mu,sigma)
            T1xxxx(mu,nu,lambda,sigma)*= 0.5
            Txxxx(mu,nu,lambda,sigma) -= T1xxxx(mu,nu,lambda,sigma)
#
#           Fully transform Diixx 
#           --------------------- 
            DO i  
#
               Tixxx(i,nu,lambda,sigma) = 0.0 
#
               DO i1   
                  REQUEST                     Diixx(i,i1,lambda,sigma) i1  
                  T1ixxx(i,nu,lambda,sigma) = Diixx(i,i1,lambda,sigma)*ca(nu,i1) 
                  Tixxx(i,nu,lambda,sigma) += T1ixxx(i,nu,lambda,sigma)
               ENDDO i1   
#
               T1xxxx(mu,nu,lambda,sigma) = Tixxx(i,nu,lambda,sigma)*ca(mu,i) 
               Txxxx(mu,nu,lambda,sigma) += T1xxxx(mu,nu,lambda,sigma)  
#
            ENDDO i 
#
#           Fully transform Djjxx 
#           --------------------- 
            DO j  
#
               Tjxxx(j,nu,lambda,sigma) = 0.0 
#
               DO j1 
#
                  REQUEST                     Djjxx(j,j1,lambda,sigma) j1  
                  T1jxxx(j,nu,lambda,sigma) = Djjxx(j,j1,lambda,sigma)*cb(nu,j1) 
                  Tjxxx(j,nu,lambda,sigma) += T1jxxx(j,nu,lambda,sigma) 
#
               ENDDO j1 
#
               T1xxxx(mu,nu,lambda,sigma) = Tjxxx(j,nu,lambda,sigma)*cb(mu,j) 
               Txxxx(mu,nu,lambda,sigma) += T1xxxx(mu,nu,lambda,sigma)  
#
            ENDDO j 
#
#           Fully transform Dijxx 
#           --------------------- 
            DO i  
#
               Tixxx(i,nu,lambda,sigma) = 0.0 
#
               DO j1 
#
                  REQUEST                     Dijxx(i,j1,lambda,sigma) j1  
                  T1ixxx(i,nu,lambda,sigma) = Dijxx(i,j1,lambda,sigma)*cb(nu,j1) 
                  Tixxx(i,nu,lambda,sigma) += T1ixxx(i,nu,lambda,sigma) 
#
               ENDDO j1  
#
               T1xxxx(mu,nu,lambda,sigma) = Tixxx(i,nu,lambda,sigma)*ca(mu,i) 
               Txxxx(mu,nu,lambda,sigma) += T1xxxx(mu,nu,lambda,sigma)  
#
            ENDDO i 
#
#           Fully transform Dixix 
#           --------------------- 
            DO i 
#
               Tixxx(i,nu,lambda,sigma) = 0.0 
#
               DO i1  
#
                  REQUEST                     Dixix(i,nu,i1,sigma) i1  
                  T1ixxx(i,nu,lambda,sigma) = Dixix(i,nu,i1,sigma)*ca(lambda,i1) 
                  Tixxx(i,nu,lambda,sigma) += T1ixxx(i,nu,lambda,sigma)
#
               ENDDO i1 
#
               T1xxxx(mu,nu,lambda,sigma) = Tixxx(i,nu,lambda,sigma)*ca(mu,i)  
               Txxxx(mu,nu,lambda,sigma) += T1xxxx(mu,nu,lambda,sigma) 
#
            ENDDO i 
#
#           Fully transform Djxjx 
#           --------------------- 
            DO j 
#
               Tjxxx(j,nu,lambda,sigma) = 0.0 
#
               DO j1  
#
                  REQUEST                     Djxjx(j,nu,j1,sigma) j1  
                  T1jxxx(j,nu,lambda,sigma) = Djxjx(j,nu,j1,sigma)*cb(lambda,j1) 
                  Tjxxx(j,nu,lambda,sigma) += T1jxxx(j,nu,lambda,sigma)
#
               ENDDO j1 
#
               T1xxxx(mu,nu,lambda,sigma) = Tjxxx(j,nu,lambda,sigma)*cb(mu,j)  
               Txxxx(mu,nu,lambda,sigma) += T1xxxx(mu,nu,lambda,sigma) 
#
            ENDDO j 
#
#           Fully transform Dixxj 
#           --------------------- 
            DO i 
#
               Tixxx(i,nu,lambda,sigma) = 0.0 
#
               DO j1  
#
                  REQUEST                     Dixxj(i,nu,lambda,j1) j1  
                  T1ixxx(i,nu,lambda,sigma) = Dixxj(i,nu,lambda,j1)*cb(sigma,j1) 
                  Tixxx(i,nu,lambda,sigma) += T1ixxx(i,nu,lambda,sigma)
#
               ENDDO j1 
#
               T1xxxx(mu,nu,lambda,sigma) = Tixxx(i,nu,lambda,sigma)*ca(mu,i)  
               Txxxx(mu,nu,lambda,sigma) += T1xxxx(mu,nu,lambda,sigma) 
#
            ENDDO i 
#
#           Fully transform Dxiix 
#           --------------------- 
            DO i  
#
               Txixx(mu,i,lambda,sigma) = 0.0 
#
               DO i1   
                  REQUEST                     Dxiix(mu,i,i1,sigma) i1  
                  T1xixx(mu,i,lambda,sigma) = Dxiix(mu,i,i1,sigma)*ca(lambda,i1) 
                  Txixx(mu,i,lambda,sigma) += T1xixx(mu,i,lambda,sigma)
               ENDDO i1   
#
               T1xxxx(mu,nu,lambda,sigma) = Txixx(mu,i,lambda,sigma)*ca(nu,i) 
               Txxxx(mu,nu,lambda,sigma) += T1xxxx(mu,nu,lambda,sigma)  
#
            ENDDO i 
#
#           Fully transform Dxjjx 
#           --------------------- 
            DO j  
#
               Txjxx(mu,j,lambda,sigma) = 0.0 
#
               DO j1   
                  REQUEST                     Dxjjx(mu,j,j1,sigma) j1  
                  T1xjxx(mu,j,lambda,sigma) = Dxjjx(mu,j,j1,sigma)*cb(lambda,j1) 
                  Txjxx(mu,j,lambda,sigma) += T1xjxx(mu,j,lambda,sigma)
               ENDDO j1   
#
               T1xxxx(mu,nu,lambda,sigma) = Txjxx(mu,j,lambda,sigma)*cb(nu,j) 
               Txxxx(mu,nu,lambda,sigma) += T1xxxx(mu,nu,lambda,sigma)  
#
            ENDDO j 
#
#           Contract half-transformed amplitudes to form backtransformed Dabcd  
#           ------------------------------------------------------------------ 
#
            PXXXX(mu,nu,lambda,sigma) = 0.0 
#
#           AAAA spin case 
#           -------------- 
            DO i 
            DO i1 
#
               REQUEST                      TAO_AA(mu,i,nu,i1)        i  
               REQUEST                      TAO_AA(lambda,i,sigma,i1) i  
               Txxii(mu,nu,i,i1)          = TAO_AA(mu,i,nu,i1)
               Tiixx(i,i1,lambda,sigma)   = TAO_AA(lambda,i,sigma,i1)
#
               T1xxxx(mu,nu,lambda,sigma) = Txxii(mu,nu,i,i1)*Tiixx(i,i1,lambda,sigma)
               PXXXX(mu,nu,lambda,sigma) += T1xxxx(mu,nu,lambda,sigma) 
#
            ENDDO i1 
            ENDDO i 
#
#           BBBB spin case 
#           -------------- 
            DO j 
            DO j1 
#
               REQUEST                      TAO_bb(mu,j,nu,j1)        j1  
               REQUEST                      TAO_bb(lambda,j,sigma,j1) j1  
               Txxjj(mu,nu,j,j1)          = TAO_BB(mu,j,nu,j1)
               Tjjxx(j,j1,lambda,sigma)   = TAO_BB(lambda,j,sigma,j1)
#
               T1xxxx(mu,nu,lambda,sigma) = Txxjj(mu,nu,j,j1)*Tjjxx(j,j1,lambda,sigma)  
               PXXXX(mu,nu,lambda,sigma) += T1xxxx(mu,nu,lambda,sigma) 
#
            ENDDO j1 
            ENDDO j 
#
#           ABAB spin case 
#           -------------- 
            DO i 
            DO j 
#
               REQUEST                       TAO_ab(mu,i,nu,j)        j  
               REQUEST                       TAO_ab(lambda,i,sigma,j) j  
               Txxij(mu,nu,i,j)            = TAO_AB(mu,i,nu,j)
               Tijxx(i,j,lambda,sigma)     = TAO_AB(lambda,i,sigma,j)
#
               T1xxxx(mu,nu,lambda,sigma)  = Txxij(mu,nu,i,j)*Tijxx(i,j,lambda,sigma)  
               T1xxxx(mu,nu,lambda,sigma) *= 4.0  
               PXXXX(mu,nu,lambda,sigma)  += T1xxxx(mu,nu,lambda,sigma) 
#
            ENDDO j 
            ENDDO i 
#
            Pxxxx(mu,nu,lambda,sigma) *= 0.25  
            Pxxxx(mu,nu,lambda,sigma) += Txxxx(mu,nu,lambda,sigma)  
#
            T1xxxx(mu,lambda,nu,sigma)  = Pxxxx(mu,nu,lambda,sigma) 
#
#           INTEGRAL BLOCK 1 
#           ---------------- 
            execute der_int_setup dx1(mu,lambda,nu,sigma) 
            execute der_int_setup dy1(mu,lambda,nu,sigma) 
            execute der_int_setup dz1(mu,lambda,nu,sigma) 
            execute der_int_setup dx2(mu,lambda,nu,sigma) 
            execute der_int_setup dy2(mu,lambda,nu,sigma) 
            execute der_int_setup dz2(mu,lambda,nu,sigma) 
            execute der_int_setup dx3(mu,lambda,nu,sigma) 
            execute der_int_setup dy3(mu,lambda,nu,sigma) 
            execute der_int_setup dz3(mu,lambda,nu,sigma) 
            execute der_int_setup dx4(mu,lambda,nu,sigma) 
            execute der_int_setup dy4(mu,lambda,nu,sigma) 
            execute der_int_setup dz4(mu,lambda,nu,sigma) 
#
            execute compute_derivative_integrals 
            execute DCONT2 T1xxxx(mu,lambda,nu,sigma) 
#
      ENDPARDO mu, nu, lambda, sigma  
#
      ENDPROC PDCONT 
#     -------------- 
#
      PROC S2DIJ 
#
           esum = 0.0 
           DO i 
           DO i1 
#
              GET Dij_a(i,i1) 
              etemp = Dij_a(i,i1)*Dij_a(i,i1) 
              esum += etemp 
              execute dump_block Dij_a(i,i1) 
#
           ENDDO i1 
           ENDDO i 
           execute print_scalar esum 
#
           esum = 0.0 
           DO j 
           DO j1 
#
              GET Dij_b(j,j1) 
              etemp = Dij_b(j,j1)*Dij_b(j,j1) 
              esum += etemp 
#
           ENDDO j1 
           ENDDO j 
           execute print_scalar esum 
#               
      ENDPROC S2DIJ 
#
      PROC S2DAB 
#
           esum = 0.0 
           DO a 
           DO a1 
#
              GET Dab_a(a,a1) 
              etemp = Dab_a(a,a1)*Dab_a(a,a1) 
              esum += etemp 
              execute dump_block Dab_a(a,a1) 
#
           ENDDO a1 
           ENDDO a 
           execute print_scalar esum 
#
           esum = 0.0 
           DO b 
           DO b1 
#
              GET Dab_b(b,b1) 
              etemp = Dab_b(b,b1)*Dab_b(b,b1) 
              esum += etemp 
#
           ENDDO b1 
           ENDDO b 
           execute print_scalar esum 
#               
      ENDPROC S2DAB 
#
      PROC S2DIJKL 
#
      esum = 0.0 
      PARDO i, i1, i2, i3 
#
            REQUEST Dijkl_aa(i,i1,i2,i3) i  
            etemp = Dijkl_aa(i,i1,i2,i3)*Dijkl_aa(i,i1,i2,i3)
            esum += etemp
#            
      ENDPARDO i, i1, i2, i3 
      execute print_scalar esum 
#
      esum = 0.0 
      PARDO j, j1, j2, j3 
#
            REQUEST Dijkl_bb(j,j1,j2,j3) j  
            etemp = Dijkl_bb(j,j1,j2,j3)*Dijkl_bb(j,j1,j2,j3)
            esum += etemp
#            
      ENDPARDO j, j1, j2, j3 
      execute print_scalar esum 
#
      esum = 0.0 
      PARDO i, i1, j, j1 
#
            REQUEST Dijkl_ab(i,j,i1,j1) i  
            etemp = Dijkl_ab(i,j,i1,j1)*Dijkl_ab(i,j,i1,j1)
            esum += etemp
#            
      ENDPARDO i, i1, j, j1 
      execute print_scalar esum 
#
      ENDPROC S2DIJKL 
#
      PROC S2DABCD  
#
      esum = 0.0 
      PARDO a, a1, a2, a3 
#
            GET Dabcd_aa(a,a1,a2,a3) 
            etemp = Dabcd_aa(a,a1,a2,a3)*Dabcd_aa(a,a1,a2,a3)
            esum += etemp
#            
      ENDPARDO a, a1, a2, a3 
      execute print_scalar esum 
#
      esum = 0.0 
      PARDO b, b1, b2, b3 
#
            GET Dabcd_bb(b,b1,b2,b3) 
            etemp = Dabcd_bb(b,b1,b2,b3)*Dabcd_bb(b,b1,b2,b3)
            esum += etemp
#            
      ENDPARDO b, b1, b2, b3 
      execute print_scalar esum 
#
      esum = 0.0 
      PARDO a, a1, b, b1 
#
            GET Dabcd_ab(a,b,a1,b1) 
            etemp = Dabcd_ab(a,b,a1,b1)*Dabcd_ab(a,b,a1,b1)
            esum += etemp
#            
      ENDPARDO a, a1, b, b1 
      execute print_scalar esum 
#
      ENDPROC S2DABCD  
#
      PROC S2ABCI 
#
      esum = 0.0 
      PARDO a, a1, a2, i 
#
            REQUEST Dabci_aaaa(a,a1,a2,i) i  
            etemp = Dabci_aaaa(a,a1,a2,i)*Dabci_aaaa(a,a1,a2,i)
            esum += etemp
#
      ENDPARDO a, a1, a2, i 
      esum *= 0.5 # to match aces 
      execute print_scalar esum 
#
      esum = 0.0 
      PARDO b, b1, b2, j 
#
            REQUEST Dabci_bbbb(b,b1,b2,j) j  
            etemp = Dabci_bbbb(b,b1,b2,j)*Dabci_bbbb(b,b1,b2,j)
            esum += etemp
#
      ENDPARDO b, b1, b2, j 
      esum *= 0.5 # to match aces 
      execute print_scalar esum 
#
      esum = 0.0 
      PARDO a, a1, b, j 
#
            REQUEST Dabci_abab(a,b,a1,j) j  
            etemp = Dabci_abab(a,b,a1,j)*Dabci_abab(a,b,a1,j)
            esum += etemp
#
      ENDPARDO a, a1, b, j 
      execute print_scalar esum 
#
      esum = 0.0 
      PARDO a, b1, b, i 
#
            REQUEST Dabci_baba(b,a,b1,i) i   
            etemp = Dabci_baba(b,a,b1,i)*Dabci_baba(b,a,b1,i)
            esum += etemp
#
      ENDPARDO a, b1, b, i 
      execute print_scalar esum 
#
      ENDPROC S2ABCI 
#
      PROC S2DIJKA 
#
      esum = 0.0 
      PARDO i, i1, i2, a 
#
            REQUEST Dijka_aaaa(i,i1,i2,a) a  
            etemp = Dijka_aaaa(i,i1,i2,a)*Dijka_aaaa(i,i1,i2,a)
            esum += etemp
#            
      ENDPARDO i, i1, i2, a 
      esum *= 0.5 # to match aces 
      execute print_scalar esum 
#
      esum = 0.0 
      PARDO j, j1, j2, b 
#
            REQUEST Dijka_bbbb(j,j1,j2,b) b  
            etemp = Dijka_bbbb(j,j1,j2,b)*Dijka_bbbb(j,j1,j2,b)
            esum += etemp
#            
      ENDPARDO j, j1, j2, b 
      esum *= 0.5 # to match aces 
      execute print_scalar esum 
#
      esum = 0.0 
      PARDO i, i1, j, b 
#
            REQUEST Dijka_abab(i,j,i1,b) b  
            etemp = Dijka_abab(i,j,i1,b)*Dijka_abab(i,j,i1,b)
            esum += etemp
#            
      ENDPARDO i, i1, j, b 
      execute print_scalar esum 
#
      esum = 0.0 
      PARDO i, j1, j, a 
#
            REQUEST Dijka_baba(j,i,j1,a) a  
            etemp = Dijka_baba(j,i,j1,a)*Dijka_baba(j,i,j1,a)
            esum += etemp
#            
      ENDPARDO i, j1, j, a 
      execute print_scalar esum 
#
      ENDPROC S2DIJKA 
#
      PROC S2DIJAB 
#
      esum = 0.0 
      PARDO i, i1, a, a1  
#
            REQUEST Dijab_aa(i,i1,a,a1) a  
            etemp = Dijab_aa(i,i1,a,a1)*Dijab_aa(i,i1,a,a1)
            esum += etemp
#            
      ENDPARDO i, i1, a,a1 
      esum *= 0.25 # to match aces 
      execute print_scalar esum 
#
      esum = 0.0 
      PARDO j, j1, b, b1  
#
            REQUEST Dijab_bb(j,j1,b,b1) b  
            etemp = Dijab_bb(j,j1,b,b1)*Dijab_bb(j,j1,b,b1)
            esum += etemp
#            
      ENDPARDO j, j1, b,b1 
      esum *= 0.25 # to match aces 
      execute print_scalar esum 
#
      esum = 0.0 
      PARDO i, j, a, b  
#
            REQUEST Dijab_ab(i,j,a,b) a  
            etemp = Dijab_ab(i,j,a,b)*Dijab_ab(i,j,a,b)
            esum += etemp
#            
      ENDPARDO i, j, a, b 
      execute print_scalar esum 
#
      ENDPROC S2DIJAB 
#
      PROC S2DIBJA 
#
      esum = 0.0 
      PARDO i, i1, a, a1  
#
            REQUEST Dibja_aaaa(i,a,i1,a1) a  
            etemp = Dibja_aaaa(i,a,i1,a1)*Dibja_aaaa(i,a,i1,a1)
            esum += etemp
#            
      ENDPARDO i, i1, a, a1 
      execute print_scalar esum 
#
      esum = 0.0 
      PARDO j, j1, b, b1  
#
            REQUEST Dibja_bbbb(j,b,j1,b1) b  
            etemp = Dibja_bbbb(j,b,j1,b1)*Dibja_bbbb(j,b,j1,b1)
            esum += etemp
#            
      ENDPARDO j, j1, b, b1 
      execute print_scalar esum 
#
      esum = 0.0 
      PARDO i, i1, b, b1  
#
            REQUEST Dibja_abab(i,b,i1,b1) b  
            etemp = Dibja_abab(i,b,i1,b1)*Dibja_abab(i,b,i1,b1)
            esum += etemp
#            
      ENDPARDO i, i1, b, b1 
      execute print_scalar esum 
#
      esum = 0.0 
      PARDO j, j1, a, a1  
#
            REQUEST Dibja_baba(j,a,j1,a1) a  
            etemp = Dibja_baba(j,a,j1,a1)*Dibja_baba(j,a,j1,a1)
            esum += etemp
#            
      ENDPARDO j, j1, a, a1 
      execute print_scalar esum 
#
      esum = 0.0 
      PARDO i, j, a, b  
#
            REQUEST Dibja_abba(i,b,j,a) a  
            etemp = Dibja_abba(i,b,j,a)*Dibja_abba(i,b,j,a)
            esum += etemp
#            
      ENDPARDO i, j, a, b 
      execute print_scalar esum 
#
      esum = 0.0 
      PARDO i, j, a, b  
#
            REQUEST Dibja_baab(j,a,i,b) a  
            etemp = Dibja_baab(j,a,i,b)*Dibja_baab(j,a,i,b)
            esum += etemp
#            
      ENDPARDO i, j, a, b 
      execute print_scalar esum 
#
      ENDPROC S2DIBJA 
#
# --------------------------------------------------------------------------- 
# 
# ----------------------------------------------------------------------------- 
#
      PROC DMAIN
#     ----------
#
# Create Tau arrays, single particle intermediates GAE and GMI and DAB, DIJ arrays 
# -------------------------------------------------------------------------------- 
         CALL CREATE1ARRAY 
         execute sip_barrier ca 
#
# Form DABCD. This is done here as the half-transformed amplitudes used 
# are not needed anywhere else  
# ---------------------------------------------------------------------- 
         CALL DPQRSTODXXXX # BTRAN OK 
#
# Form the single particle density DAB and DIJ   
# --------------------------------------------  
         CALL DAB 
         CALL DIJ 
#
# Compute the HF density 
# ---------------------- 
         CALL HFDENS  
#
# Form DIBJA 
# ---------- 
         CALL DIBJA # gamma4 
#
# Form DIJKL 
# ---------- 
         CALL DIJKL # gamma3 # BTRAN OK  
#
# Form DIJAB  
# ---------- 
         CALL DIJAB # gamma1 # BTRAN OK  
#
         execute server_barrier 
#
# Backtransform the 1-particle density matrix 
# ------------------------------------------- 
         CALL D1TRANS
         execute sip_barrier 
#
# Finally contract with the integral derivatives to get the contribution 
# to the gradient. 
# ---------------------------------------------------------------------- 
#
         CALL PDCONT 
#
      ENDPROC DMAIN
#     -------------
#
# Read converged T and Lambda amplitudes 
# -------------------------------------- 
#
      CREATE Doldai_a
      CREATE Doldai_b
      CREATE DOR_ii  
      CREATE DOR_jj  
      CREATE DOR_aa  
      CREATE DOR_bb  
#
      execute sip_barrier 
      execute list_to_blocks T2old_aa
      execute list_to_blocks T2old_ab
      execute list_to_blocks T2old_bb
#
      execute list_to_blocks Doldai_a
      execute list_to_blocks Doldai_b
#
      execute list_to_blocks DOR_ii  
      execute list_to_blocks DOR_jj  
      execute list_to_blocks DOR_aa  
      execute list_to_blocks DOR_bb  
#
      execute read_list_to_blocks
      execute server_barrier 
      PARDO a, i, a1, i1
          REQUEST T2old_aa(a,i,a1,i1) a
          tiaia(i,a,i1,a1) = T2old_aa(a,i,a1,i1)
          PREPARE L2old_aa(i,a,i1,a1) = tiaia(i,a,i1,a1)
      ENDPARDO a, i, a1, i1
      PARDO a, i, b1, j1
          REQUEST T2old_ab(a,i,b1,j1) a
          tiajb(i,a,j1,b1) = T2old_ab(a,i,b1,j1)
          PREPARE L2old_ab(i,a,j1,b1) = tiajb(i,a,j1,b1)
      ENDPARDO a, i, b1, j1
      PARDO b, j, b1, j1
          REQUEST T2old_bb(b,j,b1,j1) b
          tjbjb(j,b,j1,b1) = T2old_bb(b,j,b1,j1)
          PREPARE L2old_bb(j,b,j1,b1) = tjbjb(j,b,j1,b1)
      ENDPARDO b, j, b1, j1
      execute server_barrier
#
      CALL DMAIN 
      execute sip_barrier 
      etemp = 14.0
      execute print_rel_info etemp ca
#
                    ENDSIAL TWO_GRAD_UHF_LCCD   
#
# ---------------------------------------------------------------------- 
