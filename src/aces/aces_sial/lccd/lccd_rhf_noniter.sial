#  Copyright (c) 2003-2010 University of Florida
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  The GNU General Public License is included in this distribution
#  in the file COPYRIGHT.
                           SIAL CCSD_RHF_SV1
#
#-------------------------------------------------------------------------------
#
# Declare indeces 
# --------------- 
#
      index kiter    = 1, 10 # cc_iter   
#
      aoindex mu     = 1, norb 
      aoindex nu     = 1, norb
      aoindex lambda = 1, norb
      aoindex sigma  = 1, norb
#
      moaindex i = baocc, eaocc
      moaindex i1= baocc, eaocc
      moaindex i2= baocc, eaocc
      moaindex i3= baocc, eaocc
#
      moaindex a = bavirt, eavirt
      moaindex a1= bavirt, eavirt
      moaindex a2= bavirt, eavirt
      moaindex a3= bavirt, eavirt
#
      moaindex j = baocc, eaocc
      moaindex j1= baocc, eaocc
      moaindex j2= baocc, eaocc
      moaindex j3= baocc, eaocc
#
      moaindex b = bavirt, eavirt
      moaindex b1= bavirt, eavirt
      moaindex b2= bavirt, eavirt
      moaindex b3= bavirt, eavirt
#
      moaindex p = baocc, eavirt
      moaindex p1= baocc, eavirt
      moaindex p2= baocc, eavirt
      moaindex p3= baocc, eavirt
#
      moaindex q = baocc, eavirt
      moaindex q1= baocc, eavirt
      moaindex q2= baocc, eavirt
      moaindex q3= baocc, eavirt
# 
# Declare static arrays 
# --------------------- 
#
# Arrays used in transformation for AO2 algorithm
# -----------------------------------------------
#
      temp Txixi(mu,i1,lambda,i)
      temp Txxii(mu,nu,i1,i)
      temp Tixxi(i1,nu,lambda,i)
      temp Txipi(mu,i,p,i1)
      temp T1xipi(mu,i,p,i1)
      temp Tpipi(p1,i,p,i1)
      temp T1pipi(p1,i,p,i1)
      temp Tixai(i,mu,a,i1)
      temp Txaii(mu,a,i,i1)
      temp Tiaai(i,a1,a,i1)
      temp Taaii(a,a1,i,i1)
      temp Txaai(mu,a1,a,i)
      temp Taaai(a2,a,a1,i)
      temp Txxai(mu,nu,a,i)
      temp T1xaai(mu,a1,a,i) 
#
      served Viaai(i,a1,a,i1) 
      served Vaaii(a,a1,i,i1)
      served Vpiqj(p1,i,p,i1) 
#
# End Arrays used in transformation for AO2 algorithm
# --------------------------------------------------- 
#
# Declare temporary arrays 
# ------------------------ 
#
      local Lxxxi(mu,nu,lambda,i)
      local Lxxai(mu,nu,a,i) 
      local Lxaai(mu,a1,a,i) 
      temp T1xxxi(mu,nu,lambda,i)  
      temp T1xixi(mu,i,nu,i1)
      temp Txiix(mu,i,i1,nu)
      temp Txpii(mu,p,i,i1)
      temp Tppii(p,p1,i,i1)
      temp Tixpi(i,mu,p,i1)
      temp Tippi(i,p,p1,i1)
#
      temp Taiai(p,i,p1,i1)
      temp T1aiai(p,i,p1,i1)
      temp T2aiai(p,i,p1,i1)
      temp T3aiai(p,i,p1,i1)
      temp Taibj(p,i,q,j)
      temp T1aibj(p,i,q,j)
      temp T2aibj(p,i,q,j)
      temp T3aibj(p,i,q,j)
      temp T4aibj(p,i,q,j)
      temp T5aibj(p,i,q,j)
#
      temp Txxxp(mu,nu,lambda,i)
      temp Txxpp(mu,nu,p1,i)
      temp Txppp(mu,p2,p1,i)
      temp Tpppp(p3,p2,p1,p)
      temp Tixxx(i,mu,nu,sigma) 
      temp Tipxx(i,p,nu,sigma) 
      temp Txiai(lambda,i,a1,i1) 
#
      temp tmp1_aiai(a,i,a1,i1) 
      temp tmp2_aiai(a,i,a1,i1) 
      temp tmp3_aiai(a,i,a1,i1) 
      temp tmp1_aibj(a,i,b,j) 
      temp tmp2_aibj(a,i,b,j) 
#
      temp Taiii(a,i,i1,i2) 
      temp T1aiii(a,i,i1,i2) 
#
      temp  Tiiii(i,i1,i2,i3) 
      temp T1iiii(i,i1,i2,i3) 
#
      temp  Tiiai(i,i1,a,i2) 
      temp T1iiai(i,i1,a,i2) 
#
      temp T1aaai(a,a1,a2,i)  
      temp T2aaai(a,a1,a2,i)  
      temp Taaaa(a,a1,a2,a3)  
      temp T1aaaa(a,a1,a2,a3)  
#
      temp Taabb(a,a1,b,b1)  
      temp T1aabb(a,a1,b,b1)  
#
      temp R1aiai(a,i,a1,i1) 
      temp R2aiai(a,i,a1,i1) 
      temp R3aiai(a,i,a1,i1) 
      temp R4aiai(a,i,a1,i1) 
      temp R1aibj(a,i,b,j) 
      temp R2aibj(a,i,b,j) 
      temp R3aibj(a,i,b,j) 
      temp R4aibj(a,i,b,j) 
#
      temp T1iaai(i,a,a1,i1) 
      temp T2iaai(i,a,a1,i1) 
      temp T1jbbj(j,b,b1,j1) 
      temp T2jbbj(j,b,b1,j1) 
      temp T1iabj(i,a,b,j) 
      temp T2iabj(i,a,b,j) 
      temp Tjjpp(j,j1,p,p1) 
      temp T1jjpp(j,j1,p,p1) 
      temp T2jjpp(j,j1,p,p1) 
      temp  Tiiqq(i,i1,q,q1) 
      temp T1iiqq(i,i1,q,q1) 
      temp T2iiqq(i,i1,q,q1) 
      temp  Tjjai(j,j1,a,i) 
      temp T1jjai(j,j1,a,i) 
      temp T2jjai(j,j1,a,i) 
      temp  Tiibj(i,i1,b,j) 
      temp T1iibj(i,i1,b,j) 
      temp T2iibj(i,i1,b,j) 
      temp  Tjbai(j,b,a,i)  
      temp T1jbai(j,b,a,i)  
      temp T2jbai(j,b,a,i)  
      temp  Taijj(a,i,j,j1) 
      temp T1aijj(a,i,j,j1) 
      temp Tqqip(a,i,b,b1)  
#
# Declare distributed arrays 
# -------------------------- 
#
      served T2new_ab(a,i,b,j)
      served T2old_ab(a,i,b,j)
#
      served Tau_ab(a,i,b,j)
      served Taup_aa(a,i,a1,i1)
      served Taup_ab(a,i,b,j)
#
      served Wiibb(i1,i,b,b1)    
      served Wjjaa(j1,j,a,a1)      
#
# Declare served arrays 
# --------------------- 
#
      temp AOINT(mu,nu,lambda,sigma) 
#
# Arrays needed for AOLADDER contribution
# ---------------------------------------
#
     temp Zab(lambda,i,b,j)
     temp ZZab(lambda,i,sigma,j)
#
     temp Yab(lambda,i,mu,j)
     temp Y1ab(lambda,i,mu,j)
#
     temp TXaiai(a,i,nu,i1)
     temp Taixi(a,i,nu,i1)   
     temp TYaiai(a,i,a1,i1)
     temp TY1aiai(a,i,a1,i1)
     temp TXbjbj(b,j,nu,j1)
     temp Tbjxj(b,j,nu,j1)
     temp TYbjbj(b,j,b1,j1)
     temp TY1bjbj(b,j,b1,j1)
     temp TXaibj(a,i,nu,j)
     temp TZaibj(a,i,nu,j)
     temp Taixj(a,i,nu,j)
     temp T1aixj(a,i,nu,j)
     temp TYaibj(a,i,b,j)
#
     served TAO_ab(lambda,i,sigma,j)
     served T2AO_ab(lambda,i,sigma,j)
     served TDaixj(a,i,nu,j)
     local LDaixj(a,i,nu,j) 
#
# local arrays used for data storage
# ---------------------------------- 
#
     local Liiai(i2,i,a,i1) 
     local L1iiai(i,i1,a2,i2) 
     local L2iiai(i2,i1,a2,i)  
     local L3iiai(i,i1,a,i2)  
     local L4iiai(i2,i1,a,i)  
     local Laiai(a,i,a2,i1) 
     local L1aiai(a,i,a1,i2) 
     local L2aiai(a1,i1,a2,i) 
     local L3aiai(a2,i1,a,i2) 
     local L4aiai(a1,i,a2,i1) 
     local Laaai(a,a2,a1,i) 
#
     local Laijj(a,i,j1,j) 
     local Laibj(a,i,b1,j) 
     local L1aibj(a1,i,b,j) 
     local L2aibj(a,i,b,j2) 
     local L3aibj(a,i1,b,j) 
     local L4aibj(a,i,b1,j) 
     local Liibj(i1,i,b,j) 
     local L1iibj(i,i1,b,j) 
     local Lbbai(b,b1,a,i) 
     local Laabj(a,a1,b,j) 
     local LLaiai(a,i,a1,i1) 
     local Lxiai(lambda,i,a1,i1) 
     local LLbjbj(b,j,b1,j1) 
     local Lxjbj(lambda,j,b1,j1) 
     local LLaibj(a,i,b,j) 
     local Lxibj(lambda,i,b,j) 
     local L1xixi(mu,i,nu,i1)  
     local L2xixi(nu,i1,mu,i)  
     local L1xjxj(mu,j,nu,j1)  
     local L2xjxj(nu,j1,mu,j)  
     local L1xixj(mu,i,nu,j)  
     local Laiii(a,i,i2,i1) 
     local L1aiii(a1,i2,i,i1) 
     local Lbjjj(b,j,j2,j1) 
     local L1bjjj(b1,j2,j,j1) 
     local Ljjai(a,i,j,j1) 
#
     local LXbbai(b1,b,a1,i1) 
     local LXaabj(a1,a,b1,j1) 
#
# Distributed two-particle arrays 
# ------------------------------- 
#
      served Vxixi(mu,i1,lambda,i)
      served Vxxii(mu,nu,i1,i)
      served Vixxi(i1,nu,lambda,i)
      served Vxipi(mu,i,p,i1)
      served Vixai(i,mu,a,i1)
      served Vxaii(mu,a,i,i1)
#
# Declare scalars 
# --------------- 
#
      scalar etemp
      scalar exponent  
      scalar esum
      scalar esuma
      scalar esumb
      scalar esumab
      scalar ecorraa
      scalar ecorrbb
      scalar ecorrab
      scalar ecorrT
      scalar enew 
      scalar eold 
      scalar ecrit 
      scalar ediff 
      scalar mp2_energy
      scalar restart
#
# Arrays/Scalars used exclusively in DIIS procedure. 
# -------------------------------------------------- 
#
       served D0aibj(a,i,b,j)  
       served D1aibj(a,i,b,j)  
       served D2aibj(a,i,b,j)  
       served D3aibj(a,i,b,j)  
       served D4aibj(a,i,b,j)  
       served D5aibj(a,i,b,j)  
#
       distributed D0ai(a,i)  
       distributed D1ai(a,i)  
       distributed D2ai(a,i)  
       distributed D3ai(a,i)  
       distributed D4ai(a,i)  
       distributed D5ai(a,i)  
#
       distributed e1ai(a,i)  
       distributed e2ai(a,i)  
       distributed e3ai(a,i)  
       distributed e4ai(a,i)  
       distributed e5ai(a,i)  
#
       served e1aibj(a,i,b,j)  
       served e2aibj(a,i,b,j)  
       served e3aibj(a,i,b,j)  
       served e4aibj(a,i,b,j)  
       served e5aibj(a,i,b,j)  
       served e6aibj(a,i,b,j)  
#
       served e5aiai(a,i,b,j) 
#
       scalar b11
       scalar b12
       scalar b13
       scalar b14
       scalar b15
       scalar b16
       scalar b17
       scalar b18
       scalar b19
       scalar b110
#
       scalar b22
       scalar b23
       scalar b24
       scalar b25
       scalar b26
       scalar b27
       scalar b28
       scalar b29
       scalar b210
#
       scalar b33
       scalar b34
       scalar b35
       scalar b36
       scalar b37
       scalar b38
       scalar b39
       scalar b310
       scalar b44
       scalar b45
       scalar b46
       scalar b47
       scalar b48
       scalar b49
       scalar b410
#
       scalar b55
       scalar b56
       scalar b57
       scalar b58
       scalar b59
       scalar b510
#
       scalar b66
       scalar b67
       scalar b68
       scalar b69
       scalar b610
#
       scalar b77
       scalar b78
       scalar b79
       scalar b710
#
       scalar b88
       scalar b89
       scalar b810
#
       scalar b99
       scalar b910
#
       scalar b1010
#
       scalar Tb11
       scalar Tb12
       scalar Tb13
       scalar Tb14
       scalar Tb15
       scalar Tb16
       scalar Tb17
       scalar Tb18
       scalar Tb19
       scalar Tb110
#
       scalar Tb22
       scalar Tb23
       scalar Tb24
       scalar Tb25
       scalar Tb26
       scalar Tb27
       scalar Tb28
       scalar Tb29
       scalar Tb210
#
       scalar Tb33
       scalar Tb34
       scalar Tb35
       scalar Tb36
       scalar Tb37
       scalar Tb38
       scalar Tb39
       scalar Tb310
       scalar Tb44
       scalar Tb45
       scalar Tb46
       scalar Tb47
       scalar Tb48
       scalar Tb49
       scalar Tb410
#
       scalar Tb55
       scalar Tb56
       scalar Tb57
       scalar Tb58
       scalar Tb59
       scalar Tb510
#
       scalar Tb66
       scalar Tb67
       scalar Tb68
       scalar Tb69
       scalar Tb610
#
       scalar Tb77
       scalar Tb78
       scalar Tb79
       scalar Tb710
#
       scalar Tb88
       scalar Tb89
       scalar Tb810
#
       scalar Tb99
       scalar Tb910
#
       scalar Tb1010
#
       scalar c1 
       scalar c2 
       scalar c3 
       scalar c4 
       scalar c5 
       scalar c6 
       scalar c7 
       scalar c8 
       scalar c9 
       scalar c10  
#
#    ------------------------------------------------------------------------
#
#    Perform the first two stages of the transformation in two N5 steps.
#
     PROC TRAN_TRAN2
#
#    ------------------------------------------------------------------------
#
     PARDO mu, nu, lambda
#
          allocate Lxxxi(mu,nu,lambda,*)
#     
          DO sigma
#
             compute_integrals            aoint(mu,nu,lambda,sigma)
#
             DO i   
#
                 T1xxxi(mu,nu,lambda,i)  = aoint(mu,nu,lambda,sigma)*ca(sigma,i)
                 Lxxxi(mu,nu,lambda,i)  += T1xxxi(mu,nu,lambda,i)
#    
             ENDDO i
#    
          ENDDO sigma

          DO i
           DO i1
              Txxii(mu,nu,i1,i)          = Lxxxi(mu,nu,lambda,i)*ca(lambda,i1)
              PREPARE Vxxii(mu,nu,i1,i) += Txxii(mu,nu,i1,i)
           ENDDO i1
           ENDDO i

          DO i
           DO i1
              Txixi(mu,i1,lambda,i)      = Lxxxi(mu,nu,lambda,i)*ca(nu,i1)
              PREPARE Vxixi(mu,i1,lambda,i) += Txixi(mu,i1,lambda,i)
           ENDDO i1
           ENDDO i

          DO i
           DO i1
              Tixxi(i1,nu,lambda,i)      = Lxxxi(mu,nu,lambda,i)*ca(mu,i1)
              PREPARE Vixxi(i1,nu,lambda,i) += Tixxi(i1,nu,lambda,i)
           ENDDO i1
           ENDDO i
#    
          deallocate Lxxxi(mu,nu,lambda,*)
#
     ENDPARDO mu, nu, lambda
     execute server_barrier
#
#    ------------------------------------------------------------------------
#
     ENDPROC TRAN_TRAN2
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
#    Perform the third N5 stage of the transformation.
#
     PROC TRAN_TRAN3
#
#    ------------------------------------------------------------------------
#
     PARDO mu, nu, i, i1
#
           REQUEST Vxixi(mu,i,nu,i1) i1
#
           DO p
#
              Txipi(mu,i,p,i1)          = Vxixi(mu,i,nu,i1)*ca(nu,p)
              PREPARE Vxipi(mu,i,p,i1) += Txipi(mu,i,p,i1)
#
           ENDDO p
#
     ENDPARDO mu, nu, i, i1
#
     PARDO mu, nu, i, i1
#
           REQUEST Vxxii(mu,nu,i,i1) i1
#
           DO a
#
              Txaii(mu,a,i,i1)          = Vxxii(mu,nu,i,i1)*ca(nu,a)
              PREPARE Vxaii(mu,a,i,i1) += Txaii(mu,a,i,i1)
#
           ENDDO a
#
     ENDPARDO mu, nu, i, i1
#
     PARDO mu, nu, i, i1
#
           REQUEST Vixxi(i,mu,nu,i1) i1
#
           DO a
#
              Tixai(i,mu,a,i1)          = Vixxi(i,mu,nu,i1)*ca(nu,a)
              PREPARE Vixai(i,mu,a,i1) += Tixai(i,mu,a,i1)
#
           ENDDO a
#
     ENDPARDO mu, nu, i, i1
#
#    ------------------------------------------------------------------------
#
     execute server_barrier
#
     ENDPROC TRAN_TRAN3
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
     PROC TRAN_TRAN4
#
#    ------------------------------------------------------------------------
#
     PARDO mu, p, i, i1
#
           REQUEST             Vxipi(mu,i,p,i1) i1
#
           DO p1
#
              Tpipi(p1,i,p,i1)          = Vxipi(mu,i,p,i1)*ca(mu,p1)
              PREPARE Vpiqj(p1,i,p,i1) += Tpipi(p1,i,p,i1)
#
           ENDDO p1
#
     ENDPARDO mu, p, i, i1
#
     PARDO mu, a, i, i1
#
           REQUEST Vxaii(mu,a,i,i1) i1
           REQUEST Vixai(i,mu,a,i1) i1
#
           DO a1
#
              Taaii(a1,a,i,i1)          = Vxaii(mu,a,i,i1)*ca(mu,a1)
              PREPARE Vaaii(a1,a,i,i1) += Taaii(a1,a,i,i1)
#
           ENDDO a1
#
           DO a1
#
              Tiaai(i,a1,a,i1)          = Vixai(i,mu,a,i1)*ca(mu,a1)
              PREPARE Viaai(i,a1,a,i1) += Tiaai(i,a1,a,i1)
#
           ENDDO a1
#
     ENDPARDO mu, a, i, i1
#
#    ------------------------------------------------------------------------
#
     ENDPROC TRAN_TRAN4
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
     PROC TRAN_UHF
#
#        CALL COMP_INTEGRALS # --> compute integrals and put into served array
         CALL TRAN_TRAN2     # --> performs the first two stages of the
                             #     two-electron integral transformation.
         CALL TRAN_TRAN3     # --> performs the third stage
                             #     two-electron integral transformation.
         CALL TRAN_TRAN4     # --> performs the fourth stage of the
                             #     two-electron integral transformation.
#
     ENDPROC TRAN_UHF
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------ 
#
     PROC IGUESS_UHF  
# 
#    ------------------------------------------------------------------------ 
#
     PARDO a, b, i, j 
#
           REQUEST                     Vpiqj(a,i,b,j) j  
           REQUEST                     Vpiqj(b,j,a,i) j  
           Taibj(a,i,b,j)            = Vpiqj(b,j,a,i)
           Taibj(a,i,b,j)           += Vpiqj(a,i,b,j)
           execute energy_denominator  Taibj 
           Taibj(a,i,b,j)           *= 0.5  
           PREPARE T2old_ab(a,i,b,j) = Taibj(a,i,b,j)  
           PREPARE D0aibj(a,i,b,j)   = Taibj(a,i,b,j)  
#
     ENDPARDO a, b, i, j 
#
#    ------------------------------------------------------------------------ 
# 
     ENDPROC IGUESS_UHF 
# 
#    ------------------------------------------------------------------------ 
#
# ---------------------------------------------------------------------------- 
#
      PROC WminjAB
#     ------------
#
      PARDO a, b, i1, j1 
#
            REQUEST T2old_ab(a,i1,b,j1) j1
#
            DO i
            DO j
#
               REQUEST                      Vpiqj(i1,i,j1,j) j
               T1aibj(a,i,b,j)            = T2old_ab(a,i1,b,j1)*Vpiqj(i1,i,j1,j)
               PREPARE T2new_ab(a,i,b,j) += T1aibj(a,i,b,j)
#
            ENDDO j
            ENDDO i
#
      ENDPARDO a, b, i1, j1
#
      ENDPROC WminjAB
#     --------------- 
# 
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
      PROC WMINJ 
#
           CALL WminjAB 
#
      ENDPROC WMINJ 
# 
# ----------------------------------------------------------------------------
#
      PROC T2NEWAB    
#     ------------
#
      PARDO a, i, b, j 
#
            REQUEST                     Vpiqj(a,i,b,j) j 
            REQUEST                     T2new_ab(a,i,b,j) a 
            REQUEST                     D0aibj(a,i,b,j) a 

            Taibj(a,i,b,j)            = D0aibj(a,i,b,j)   
            t1aibj(a,i,b,j)           = T2new_ab(a,i,b,j) 
            execute apply_den4          t1aibj taibj   

            t3aibj(a,i,b,j)           = 0.0 
            execute temp_x              t3aibj(a,i,b,j) 
            t3aibj(a,i,b,j)          -= t1aibj(a,i,b,j)  

            T2aibj(a,i,b,j)           = Vpiqj(a,i,b,j)   
            execute apply_den4          t2aibj t3aibj 
#
            PREPARE T2old_AB(a,i,b,j) = T2aibj(a,i,b,j)  
#
      ENDPARDO a, i, b, j 
#
      ENDPROC T2NEWAB    
#     ---------------
#
#    ------------------------------------------------------------------------ 
#
     PROC AOLADDER  
#
#    ------------------------------------------------------------------------ 
#
#    Contract AOINT with half back transformed Amplitudes 
#    ----------------------------------------------------    
#
     PARDO mu, nu, lambda, sigma
        WHERE mu < nu 
#
           compute_integrals aoint(lambda,mu,sigma,nu)
          #execute temp_x    aoint etemp 

          #if etemp > 0.00000001 
#
           DO i
           DO j
#
              REQUEST                       TAO_ab(lambda,i,sigma,j) j
              Yab(mu,i,nu,j)              = aoint(lambda,mu,sigma,nu)*TAO_ab(lambda,i,sigma,j)
              Y1ab(nu,j,mu,i)             = Yab(mu,i,nu,j)
#
              PREPARE T2AO_ab(mu,i,nu,j) += Yab(mu,i,nu,j)
              PREPARE T2AO_ab(nu,j,mu,i) += Y1ab(nu,j,mu,i)
#
           ENDDO j
           ENDDO i

          #endif 
#
     ENDPARDO mu, nu, lambda, sigma
#
     PARDO mu, nu, lambda, sigma
        WHERE mu == nu 
#
           compute_integrals aoint(mu,lambda,nu,sigma)
#
           DO i
           DO j
#
              REQUEST                       TAO_ab(lambda,i,sigma,j) j
              Yab(mu,i,nu,j)              = aoint(mu,lambda,nu,sigma)*TAO_ab(lambda,i,sigma,j)
              PREPARE T2AO_ab(mu,i,nu,j) += Yab(mu,i,nu,j)
#
           ENDDO j
           ENDDO i
#
     ENDPARDO mu, nu, lambda, sigma
#
     execute server_barrier  
#
#    ------------------------------------------------------------------------ 
#
     ENDPROC AOLADDER  
#
#    ------------------------------------------------------------------------ 
#
#    ------------------------------------------------------------------------ 
#
# SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS 
#
# In the procedures WMEBJAA, WMEBJBB, WMEBJAB, and WMEBJBA these  
# intermediates are formed as temporary arrarys. The contribution to the 
# outout arrays is computed directly from these temporary arrays so 
# that the array is never stored.   
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
      PROC WMEBJAA 
#     ------------
#
# Contributions to T2new_ab 
# ------------------------- 
#
      PARDO j, b, a, i  
            Taibj(a,i,b,j) = 0.0  
#
            DO i1   
            DO a1  
#
               REQUEST              Viaai(i,a,a1,i1) i  
               REQUEST              Vaaii(a1,a,i,i1) i  
               REQUEST              T2old_ab(a1,i1,b,j) j  

               TYaiai(a,i,a1,i1)   = 0.0  
#
               Taiai(a,i,a1,i1)    = Vaaii(a1,a,i,i1)
               TYaiai(a,i,a1,i1)  -= Taiai(a,i,a1,i1)
               Taiai(a,i,a1,i1)    = Viaai(i,a,a1,i1)
               TYaiai(a,i,a1,i1)  += Taiai(a,i,a1,i1)
#
               R1aibj(a,i,b,j)     = TYaiai(a,i,a1,i1)*T2old_ab(a1,i1,b,j) 
               Taibj(a,i,b,j)     += R1aibj(a,i,b,j) 
#
            ENDDO a1   
            ENDDO i1   

            R1aibj(b,j,a,i)            = taibj(a,i,b,j) 
            PREPARE T2new_ab(a,i,b,j) += taibj(a,i,b,j)
            PREPARE T2new_ab(b,j,a,i) += R1aibj(b,j,a,i)
#
      ENDPARDO j, b, a, i 
#
      ENDPROC WMEBJAA 
#     ---------------
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
      PROC WMEBJAB 
#     ------------
#
# Contribution to T2new_ab 
# ------------------------ 
#
      PARDO i1, a1, a, i
            REQUEST                     T2old_ab(a1,i1,a,i) a 
            REQUEST                     T2old_ab(a1,i,a,i1) a 
            taiai(a1,i1,a,i)          = T2old_ab(a1,i1,a,i) 
            t1aiai(a1,i1,a,i)         = T2old_ab(a1,i,a,i1) 
            taiai(a1,i1,a,i)         -= t1aiai(a1,i1,a,i) 
            tpppp(a1,i1,i,a)          = taiai(a1,i1,a,i) 
#
            DO j 
            DO b 
#
               REQUEST                        Viaai(i,a,b,j) j  
               R1aibj(a1,i1,b,j)            = tpppp(a1,i1,i,a)*Viaai(i,a,b,j)  
               Taibj(b,j,a1,i1)             = R1aibj(a1,i1,b,j) 
               PREPARE T2new_ab(a1,i1,b,j) += R1aibj(a1,i1,b,j) 
               PREPARE T2new_ab(b,j,a1,i1) += Taibj(b,j,a1,i1) 
#
            ENDDO b 
            ENDDO j 
#
      ENDPARDO i1, a1, a, i
#
      ENDPROC WMEBJAB 
#     ---------------
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# -------------------------------------------------------------------------------  
#
# Compute contributions from 'Wmjbe'. 
#
      PROC WMJBEab
#     -------------
#
#  Calculate contribution to the amplitudes
#  ----------------------------------------
#
      PARDO a, j, i1, b1
#
            REQUEST T2old_ab(a,i1,b1,j) j
#
            DO i
            DO b
#
               REQUEST                      Vaaii(b,b1,i1,i) i
#
               Taibj(a,i,b,j)             = T2old_ab(a,i1,b1,j)*Vaaii(b,b1,i1,i)
               Taibj(a,i,b,j)            *= -1.0  
#
               T2aibj(b,j,a,i)            = Taibj(a,i,b,j) 
               PREPARE T2new_ab(a,i,b,j) += Taibj(a,i,b,j)
               PREPARE T2new_ab(b,j,a,i) += T2aibj(b,j,a,i)
#
            ENDDO b
            ENDDO i
#
      ENDPARDO a, j, i1, b1

#    Perform final transformation of LADDER contribution 
#    ---------------------------------------------------
#
        PARDO nu, i, j
#
              allocate LDaixj(*,i,nu,j)
#
              DO mu
#
                 REQUEST T2AO_ab(mu,i,nu,j) j
#
                 DO a
                    Taixj(a,i,nu,j)   = T2AO_ab(mu,i,nu,j)*ca(mu,a)
                    LDaixj(a,i,nu,j) += Taixj(a,i,nu,j)
                 ENDDO a
#
              ENDDO mu

              DO a 
              DO b 
                 Taibj(a,i,b,j)             = LDaixj(a,i,nu,j)*ca(nu,b) 
                 PREPARE T2new_ab(a,i,b,j) += Taibj(a,i,b,j)
              ENDDO b 
              ENDDO a
#
              deallocate LDaixj(*,i,nu,j)
#
        ENDPARDO nu, i, j
#
      ENDPROC WMJBEab
#     ---------------
#
# SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS 
#
      PROC WMEBJ 
# 
           CALL WMEBJAA
           CALL WMEBJAB
           CALL WMJBEab
#
      ENDPROC WMEBJ 
#
# SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
#    ------------------------------------------------------------------------ 
#
     PROC ENERGY_NEW 
# 
#    ------------------------------------------------------------------------ 
#
     ecorrab = 0.0 
     esumab  = 0.0 
     execute sip_barrier 
     PARDO a, b, i, j 
#
           REQUEST Vpiqj(a,i,b,j) j  
           REQUEST Vpiqj(a,j,b,i) j  
#
           REQUEST T2old_ab(a,i,b,j) j  
#
           T1aibj(a,i,b,j) = Vpiqj(a,i,b,j)  
           T2aibj(a,i,b,j) = Vpiqj(a,j,b,i)  
           T1aibj(a,i,b,j)*= 2.0  
           T1aibj(a,i,b,j)-= T2aibj(a,i,b,j)  
#
           etemp = T2old_ab(a,i,b,j)*T1aibj(a,i,b,j) 
           esumab += etemp 
#
     ENDPARDO a, b, i, j 

     execute sip_barrier 
#
     collective ecorrab += esumab
     execute print_scalar ecorrab 
#
    #ecorrT  = ecorraa + ecorrbb
     ecorrT = ecorrab 
     execute print_scalar ecorrT  
# 
#    ------------------------------------------------------------------------ 
# 
     ENDPROC ENERGY_NEW 
# 
#    ------------------------------------------------------------------------ 
# 
     PROC T2NEW_ZERO
#    --------------- 
#
#     Zero out new 2-particle amplitude arrays 
#     ---------------------------------------- 
#
          PARDO a, b, i, j 
                Taibj(a,i,b,j) = 0.0
                PREPARE T2new_ab(a,i,b,j) = Taibj(a,i,b,j) 
          ENDPARDO a, b, i, j 
#
#    Zero-out intermediate arrays
#    ---------------------------------------------
#
          PARDO mu, nu, i, j
                Txixi(mu,i,nu,j)           = 0.0
                PREPARE T2AO_ab(mu,i,nu,j) = Txixi(mu,i,nu,j)
          ENDPARDO mu, nu, i, j
#
          PARDO mu, nu, i, j
                Txixi(mu,i,nu,j)           = 0.0
                PREPARE TAO_ab(mu,i,nu,j) = Txixi(mu,i,nu,j)
          ENDPARDO mu, nu, i, j

          execute server_barrier 
#
#    Form Half back transformed cluster arrays  
#    -----------------------------------------
#
#    AB spin combination
#     -------------------
#
     PARDO mu, a, j, i
#
           taixj(a,i,mu,j) = 0.0 
#
           DO b
#
              REQUEST            T2old_ab(a,i,b,j) a
              T1aixj(a,i,mu,j) = T2old_ab(a,i,b,j)*ca(mu,b)
              Taixj(a,i,mu,j) += T1aixj(a,i,mu,j) 
#
           ENDDO b
#
            DO nu
#
               Txixi(nu,i,mu,j)           = Taixj(a,i,mu,j)*ca(nu,a)
               PREPARE TAO_ab(nu,i,mu,j) += Txixi(nu,i,mu,j)
#
            ENDDO nu
#
      ENDPARDO mu, a, j, i

          execute server_barrier 
#
     ENDPROC T2NEW_ZERO
# 
#    ------------------------------------------------------------------------ 
#
# BEGIN MAIN PROGRAM 
# ------------------ 
#
      ecrit = cc_conv  
#
# Read transformed integrals from lists 
# ------------------------------------- 
#
     #CALL READ_2EL 
#
# Perform two-electron integral transformation 
# -------------------------------------------- 
#
      CALL TRAN_UHF 
#
      EXECUTE SERVER_BARRIER  
#
# Get initial second-order guess 
# ------------------------------ 
      CALL IGUESS_UHF
      EXECUTE SERVER_BARRIER  
#
# Calculate the second-order energy 
# --------------------------------- 
      CALL ENERGY_NEW 
#
      EXECUTE SERVER_BARRIER  

      DO kiter 
#
#        Zero-out the new two-particle amplitude arrays
#        ---------------------------------------------- 
#
         CALL T2NEW_ZERO
#
         CALL AOLADDER 
         CALL WMINJ 
         execute server_barrier 
         CALL WMEBJ 
#
         execute server_barrier 

#        Calculate new two-particle amplitudes 
#        ------------------------------------- 
#
         CALL T2NEWAB  
#
         execute server_barrier 

         CALL ENERGY_NEW 
#
         execute server_barrier 
         PARDO a, b, i, j 
               REQUEST T2old_ab(a,i,b,j) a 
               PREPARE D0aibj(a,i,b,j) = T2old_ab(a,i,b,j) 
         ENDPARDO a, b, i, j 

      ENDDO kiter 
#
      execute sip_barrier 
      totenerg  = ecorrT  
      totenerg += scfeneg  
      execute print_scalar totenerg  
#
# Write amplitudes to file
# ------------------------
#
     #execute blocks_to_list                T2old_ab
     #execute write_blocks_to_list
      execute sip_barrier
#
                           ENDSIAL CCSD_RHF_SV1    
#
# EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE 
#
#
