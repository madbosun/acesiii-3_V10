#  Copyright (c) 2003-2010 University of Florida
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  The GNU General Public License is included in this distribution
#  in the file COPYRIGHT.
                    SIAL  EOMCCSD_GRAD
#
# This SIAL program computes the two particle density 
# matrice but only stores one piece at a time similar to dens6.sial. 
# The one-particle intermediates are computed and stored.  
# The two-particle density matrices have been tested and are CORRECT.  
# The one-particle intermediates have been tested and are CORRECT. 
# Contributions coming from Vabcd --> Iab are computed in AO basis and CHECKED. 
# Contributions coming from Vabcd --> Iai are computed in AO basis and CHECKED. 
#
# This version also computes Dai iteratively in the final step --> Tested and Working 
#
# Iij_aa --> matches aces 
# Iij_bb --> matches aces 
#
# Iab_aa --> matches aces 
# Iab_bb --> matches aces 
#
# Iai_aa --> matches aces 
# Iai_bb --> matches aces 
#
# Iia_aa --> matches aces 
# Iia_bb --> matches aces 
#
# The integral files are split --> IN PROGRESS 
# and 
# antisymmetrized --> IN PROGRESS 
#
# ---------------------------------------
# PROCEDURE                  OPTIMIZATION 
# ---------------------------------------
# DIJKL                      COMPLETE  
# DABCD                      COMPLETE  
# DIBJA                      IN PROGRESS  
# DIJAB                      COMPLETE   
# DIJKA                      PARTIAL  
# DABCI                      PARTIAL  
#
# I11                        COMPLETE 
# IABDIRECT                  COMPLETE 
# IFOCK                      COMPLETE 
# DAI                        COMPLETE 
#
# DAB                        COMPLETE  
# DIJ                        COMPLETE  
# GAE                        COMPLETE 
# GMI                        COMPLETE  
# TAU                        COMPLETE  
# ---------------------------------------
#
# BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
#
# Declare indeces
# ---------------
#

      index  ziter    = 1, cc_iter
      INDEX  jatom    = 1, natoms
      index kiter    = 1, cc_iter  

      aoindex mu     = 1, norb
      aoindex nu     = 1, norb
      aoindex lambda = 1, norb
      aoindex sigma  = 1, norb
#
      moaindex i = baocc, eaocc
      moaindex i1= baocc, eaocc
      moaindex i2= baocc, eaocc
      moaindex i3= baocc, eaocc
      moaindex i4= baocc, eaocc
#
      moaindex a = bavirt, eavirt
      moaindex a1= bavirt, eavirt
      moaindex a2= bavirt, eavirt
      moaindex a3= bavirt, eavirt
      moaindex a4= bavirt, eavirt
#
      moaindex j = baocc, eaocc
      moaindex j1= baocc, eaocc
      moaindex j2= baocc, eaocc
      moaindex j3= baocc, eaocc
      moaindex j4= baocc, eaocc
#
      moaindex b = bavirt, eavirt
      moaindex b1= bavirt, eavirt
      moaindex b2= bavirt, eavirt
      moaindex b3= bavirt, eavirt
      moaindex b4= bavirt, eavirt
#
      moaindex p = baocc, eavirt
      moaindex p1= baocc, eavirt
      moaindex p2= baocc, eavirt
      moaindex p3= baocc, eavirt
#
      moaindex q = baocc, eavirt
      moaindex q1= baocc, eavirt
      moaindex q2= baocc, eavirt
      moaindex q3= baocc, eavirt

      index kroot = 1, 12
      index kindex12 = 1, 12
      index kindex26 = 1, 26
      index indone = 1, 1
      index j20 = 1, 20
      index j21 = 1, 21

      temp Tiibj(i,i1,b,j)
      temp T1iibj(i,i1,b,j)
      temp Tjjai(j,j1,a,i)
      temp T1jjai(j,j1,a,i)

      temp Txxjj(mu,nu,j1,j)
      temp T1xxjj(mu,nu,j1,j)

      temp T1xixj(mu,i,nu,j)
      temp Txiqj(mu,i,q,j)
      temp T1xiqj(mu,i,q,j)
      temp Tpiqj(p,i,q,j)
      temp T1piqj(p,i,q,j)
      temp Tiixx(i,i1,mu,nu)
      temp Tiixb(i,i1,mu,b)
      temp Txajj(mu,a,j,j1)
      temp T1xajj(mu,a,j,j1)
      temp Txabj(mu,a,b,j)
      temp T1xabj(mu,a,b,j)
      temp Tixxj(i,mu,nu,j)
      temp Tixbj(i,mu,b,j)
      temp T1ixbj(i,mu,b,j)
      temp Taabj(a,a1,b,j)
      temp T1aabj(a,a1,b,j)

      served VSqjqj(q1,j,q,j1)
      served Vjbbj(j,b1,b,j1)
      served Vbbjj(b,b1,j,j1)
#
      served Vjbii(j,b,i,i1)
      served Vbbii(b,b1,i,i1)
      served Vbbai(b,b1,a,i)
      served Vaajj(a,a1,j,j1)
      served Viabj(i,a,b,j)
      served Vaabj(a,a1,b,j)

      LOCAL  lii (i,i1)
      LOCAL  l1ii (i,i1)
      LOCAL  ljj (j,j1)
      LOCAL  l1jj (j,j1)

      local LLaa(a,i,nu,i1)
      local LLbb(b,j,nu,j1)
      local LLab(a,i,nu,j)

      local Lxibj(lambda,i,b,j)
      local Lxjbj(lambda,j,b1,j1)
      local Lxiai(lambda,i,a1,i1)
      local Laiii(a1,i2,i,i1)
      local Laijj(a,i,j1,j)
      LOCAL  Liiii  (i2,i,i3,i1)
      LOCAL  L1iiii (i2,i,i3,i1)
      LOCAL  L2iiii (i,i1,i2,i3)
      LOCAL  L4iiii (i,i1,i2,i3)
      LOCAL  L3iiii (i,i3,i1,i2)
      LOCAL  Liijj  (i2,i,j2,j)
      LOCAL  L1iijj (i2,i,j2,j)
      LOCAL  L2iijj (i,i2,j,j2)
      local Liaii (i2,a3,i3,i1)
      LOCAL  Laajj  (a,a1,j1,j)
      LOCAL  Liibb  (i,i1,b,b1)
      LOCAL  Liiaa  (i,i1,a,a1)
      LOCAL  Ljiba  (j,i,b,a)

      LOCAL  Lqqpp  (q,q1,p,p1)
      local Lxxxj(mu,lambda,nu,j)
      local Lxxxi(mu,lambda,nu,i)
      local Laabj(a1,a,b,j)
      local L1aabj(a,a1,b,j)
      local L2aabj(a1,a,b,j)


      local Lxbai(mu,b,a,i)
      local Lxabj(mu,a,b,j)
      local St1a(a,i)
      local St1b(b,j)

      distributed HBAR_aa(a,a1)
      distributed HBAR_ii(i1,i)

      local LHBAR_ii(i1,i)
      local LHBAR_ia(i,a)
      local LHBAR_jb(j,b)
      local LHBAR_aa(a,a1)

      distributed Mxj(sigma,j)
      distributed Mxi(sigma,i)

      temp tmxxxj(mu,lambda,nu,j)
      temp t1mxxxj(mu,lambda,nu,j)
      temp tmxxbj(mu,lambda,b,j)
      temp t1mxxbj(mu,lambda,b,j)
      temp tmxabj(mu,a,b,j)
      temp t1mxabj(mu,a,b,j)
      temp tmaabj(a1,a,b,j)
      temp t1maabj(a1,a,b,j)

      temp tmxbbj(mu,b1,b,j)
      temp t1mxbbj(mu,b1,b,j)
      temp tmbbbj(b2,b1,b,j)
      temp t1mbbbj(b2,b1,b,j)
#
      temp tmxaai(mu,a1,a,i)
      temp t1mxaai(mu,a1,a,i)
      temp tmaaai(a2,a1,a,i)
      temp t1maaai(a2,a1,a,i)
#     
      temp tmxxxi(mu,lambda,nu,i)
      temp t1mxxxi(mu,lambda,nu,i)
      temp tmxxai(mu,lambda,a,i)
      temp t1mxxai(mu,lambda,a,i)
      temp tmxbai(mu,b,a,i)
      temp t1mxbai(mu,b,a,i)
      temp tmbbai(b1,b,a,i)
      temp t1mbbai(b1,b,a,i)
#     
      served Mxxxj(mu,lambda,nu,j)
      served Mxxbj(mu,lambda,b,j)
      served Mxabj(mu,a,b,j)
      served Mxaai(mu,a1,a,i)
      served Mxbbj(mu,b1,b,j)
#     
      served Mxxxi(mu,lambda,nu,i)
      served Mxxai(mu,lambda,a,i)
      served Mxbai(mu,b,a,i)

      served Njjai(j1,a,i,j)
      served Niibj(i1,b,i,j)
      served Niiai(i1,a,i,i2)
      distributed Niijj(i,i1,j,j1)
      distributed Niiii(i,i1,i2,i3)

      LOCAL  LR1W_ii  (i1,i2)
      LOCAL  LR1W_aa  (a1,a2)
      LOCAL  LR1W_ai  (a1,i1)
     #LOCAL  LR1L2_ai (a1,i1)
     #LOCAL  LR2L1_ai (a1,i1)
      LOCAL  LR2W2_ai (a1,i1)
      LOCAL  LR2W2_aa (a1,a2)
      LOCAL  LR2W2_ii (i1,i2)
     #LOCAL  LR2L2_aa (a1,a2)
     #LOCAL  LR2L2_ii (i1,i2)

     #SERVED  L2R2_aaaa (i,a1,i1,a)
     #SERVED  R2L2_aibj (a1,i1,b,j)
     #SERVED  R2L2_iibb (i,i1,b,b1)

      DISTRIBUTED  R2L2_iiii (i2,i,i3,i1)
      DISTRIBUTED  R2L2_iijj (i2,i,j2,j)

      DISTRIBUTED  R2G2_iiii (i2,i,i3,i1)
      DISTRIBUTED  R2G2_iijj (i2,i,j2,j)

      DISTRIBUTED  DIS_OV1 (i1,a)
      DISTRIBUTED  DIS_VO1 (a,i1)
      DISTRIBUTED  DIS_VO2 (a,i1)
      DISTRIBUTED  DIS_VO3 (a,i1)
      DISTRIBUTED  DIS_VO4 (a,i1)
      DISTRIBUTED  DIS_OO1 (i,i1)
      DISTRIBUTED  DIS_OO2 (i,i1)
      DISTRIBUTED  DIS_OO3 (i,i1)
      DISTRIBUTED  DIS_VV1 (a,a1)
      DISTRIBUTED  DIS_VV2 (a,a1)
      DISTRIBUTED  DIS_VV3 (a,a1)

      DISTRIBUTED  XI1_A (a,i)

      SERVED  XI2_AA (a,i,a1,i1)
      SERVED  XI2_AB (a,i,b,j)

      temp  Raiai(a1,i1,a,i)
      temp  R1aiai(a1,i1,a,i)
      temp  R2aiai(a1,i,a,i1)
      temp  R3aiai(a,i1,a1,i)
      temp  R4aiai(a,i1,a1,i)
      temp  R1bjbj(b1,j1,b,j)
      temp  R2bjbj(b1,j,b,j1)
      temp  R3bjbj(b,j1,b1,j)
      temp  R4bjbj(b,j1,b1,j)

      distributed DIAG_ai (a,i) # Watson, remove
      served      DIAG_aibj (a,i,a1,i1) # Watson, remove
      served      TEMP_aibj (a,i,a1,i1) # Watson, remove

      served VCONV2AA(a,i,a1,i1)
      served VCONV2AB(a,i,b,j)
#
      served VCE2AA(a,i,a1,i1)
      served VCE2AB(a,i,b,j)
#
      served VCACT2AA(a,i,a1,i1)
      served VCACT2AB(a,i,b,j)
      served VCHACT2AA(a,i,a1,i1)
      served VCHACT2AB(a,i,b,j)
      distributed VCHACT1A(a,i)
      distributed VCACT1A(a,i)

      local LFmi_a(i1,i)
      local LFmi_b(j1,j)
      local LFae_a(a,a1)
      distributed DDaa(a,a1)
      distributed DDii(i,i1)
      distributed DDia(i,a)
      distributed DDjj(j,j1)
      distributed DDjb(j,b)
      distributed VCONV1A(a,i)
      distributed Fae_a(a,a1)
      distributed Fmi_a(i1,i)
      distributed Fmi_b(j1,j)
     #distributed Fia_a(i,a)
     #distributed Fia_b(j,b)
      distributed Wmnijab(i,i1,j,j1)
      distributed Wmnijaa(i,i1,i2,i3)
      distributed Wmnijbb(j,j1,j2,j3)

      served VC2AA(a,i,a1,i1)
      served VCH2AA(a,i,a1,i1)
      served VTEMP2AA(a,i,a1,i1)
      served VC2AB(a,i,b1,j1)
      served VCH2AB(a,i,b,j)
      served VTEMP2AB(a,i,b,j)
      served VTEMP2AA1(a,i,a1,i1)
      served VTEMP2AB1(a,i,b1,j1)

      distributed VC1A(a,i)
      distributed VCH1A(a,i)
      distributed VTEMP1A(a,i)

      distributed Faa(a,a1)
      distributed Fab(a,b)

      served Vxxaa(mu,nu,a1,a)
      served Gxxbb(mu,nu,b1,b)
      served Vaaaa(a3,a2,a1,a)
      served Vaabb(a3,a2,b1,b)
      temp tba(b,a)
      temp tab(a,b)

      served Vxixj(mu,i,nu,j)
      served Vxiqj(mu,i,q,j)
      served Vxajj(mu,a,j,j1)
      served Vxabj(mu,a,b,j)
      served Vxxij(mu,nu,i,j)
      served Vixxj(i,mu,nu,j)
      served Vixbj(i,mu,b,j)
      served Vxbii(mu,b,i,i1)
      served Vxbai(mu,b,a,i)


      served Vxxxi(mu,nu,lambda,i)
      served Vxixi(mu,i1,lambda,i)
      served Vxxii(mu,nu,i1,i)
      served Vixxi(i1,nu,lambda,i)
      served Vxipi(mu,i,p,i1)
      served Vixai(i,mu,a,i1)
      served Vxaii(mu,a,i,i1)
      served Vxaai(mu,a1,a,i)
      served Vxxai(mu,nu,a,i)
#
      served Vxxxj(mu,nu,lambda,j)
      served Vxjxj(mu,j1,lambda,j)
      served Vxxjj(mu,nu,j1,j)
      served Vjxxj(j1,nu,lambda,j)
      served Vxjqj(mu,j,q,j1)
      served Vjxbj(j,mu,b,j1)
      served Vxbjj(mu,b,j,j1)
      served Vxbbj(mu,b1,b,j)
      served Vxxbj(mu,nu,b,j)

      served WHIAAI(i,a,a1,i1)
      served WHJBBJ(j,b,b1,j1)
      served WHIABJ(i,a,b1,j1)
      served WHJBAI(j,b,a1,i1)
      served WHIIBB(i,i1,b,b1)
      served WHJJAA(j,j1,a,a1)
#
      distributed D2aa(a,i,a1,i1)
      temp Zaa(lambda,i,a1,i1)
      temp Zbb(lambda,j,b,j1)
      temp Zab(lambda,i,b,j)
      temp ZZaa(lambda,i,sigma,i1)
      temp ZZ1aa(lambda,i,sigma,i1)
      temp ZZbb(lambda,j,sigma,j1)
      temp ZZ1bb(lambda,j,sigma,j1)
      temp ZZab(lambda,i,sigma,j)
#
      temp Yaa(lambda,i,mu,i1)
      temp Ybb(lambda,j,mu,j1)
      temp Yab(lambda,i,mu,j)
      temp Y1aa(lambda,i,mu,i1)
      temp Y1bb(lambda,j,mu,j1)
      temp Y1ab(lambda,i,mu,j)


      served NIAAI(i,a,a1,i1)
      served NJBAI(j,b,a,i)
      served NIABJ(i,a,b,j)
      served NJJAA(j1,j,a1,a)
      served NIIBB(i1,i,b1,b)

      temp Taixi(a,i,nu,i1)
      temp Tbjxj(b,j,nu,j1)
      temp Taixj(a,i,nu,j)

      local TAOINT(mu,nu,lambda,sigma)
      local L1xxxi(mu,nu,lambda,i)
      local L2xxxi(mu,lambda,nu,i)
      local L3xxxi(lambda,mu,nu,i)
      local L1xxxj(mu,nu,lambda,j)
      local L2xxxj(mu,lambda,nu,j)
      local L3xxxj(lambda,mu,nu,j)
      local Lxixi(mu,i,nu,i1)
      local Lxxii(mu,nu,i,i1)
      local Lixxi(i,mu,nu,i1)
      local Lxjxj(mu,j,nu,j1)
      local Lxxjj(mu,nu,j,j1)
      local Ljxxj(j,mu,nu,j1)
      local Lxixj(mu,i,nu,j)
      local Lixxj(i,mu,nu,j)
      local Lxipi(mu,i,p,i1)
      local Lxaii(mu,a,i,i1)
      local Lixai(i,mu,a,i1)
      local L1xaai(mu,a,a1,i)
      local L2xaai(mu,a,a2,i)
      local Lxjqj(mu,j,q,j1)
      local Lxbjj(mu,b,j,j1)
      local Ljxbj(j,mu,b,j1)
      local Lxbii(mu,b,i,i1)
      local Lxiqj(mu,i,q,j)
      local Lxajj(mu,a,j,j1)
      local Lixbj(i,mu,b,j)
      local L1xbbj(mu,b,b1,j)

      temp T1ixxi(i1,mu,nu,i)

#
# Arrays used in transformation for AO2 algorithm
# -----------------------------------------------
#
# 
# 
      temp dx1(mu,nu,lambda,sigma) 
      temp dy1(mu,nu,lambda,sigma) 
      temp dz1(mu,nu,lambda,sigma) 
      temp dx2(mu,nu,lambda,sigma) 
      temp dy2(mu,nu,lambda,sigma) 
      temp dz2(mu,nu,lambda,sigma) 
      temp dx3(mu,nu,lambda,sigma) 
      temp dy3(mu,nu,lambda,sigma) 
      temp dz3(mu,nu,lambda,sigma) 
      temp dx4(mu,nu,lambda,sigma) 
      temp dy4(mu,nu,lambda,sigma) 
      temp dz4(mu,nu,lambda,sigma) 

      temp PXXXX(mu,nu,lambda,sigma) 
      temp T2XXXX(mu,nu,lambda,sigma) 
      temp T3XXXX(mu,nu,lambda,sigma) 
      temp P1XXXX(mu,nu,lambda,sigma) 

      temp Txx(mu,nu) 

      temp T1xibj(lambda,i,b,j)
      temp Txaai(mu,a,a1,i)
      temp T1xaai(mu,a,a1,i)
      temp Txxai(mu,nu,a1,i)
      temp T1xxai(mu,nu,a1,i)
      temp Txxxi(mu,nu,sigma,i)
      temp T1xxxi(mu,nu,sigma,i)
      temp Txixx(mu,i,lambda,sigma)
      temp T1xixx(mu,i,lambda,sigma)
#
      temp Txbbj(mu,b,b1,j)
      temp T1xbbj(mu,b,b1,j)
      temp Txxbj(mu,nu,b1,j)
      temp T1xxbj(mu,nu,b1,j)
      Local Txxxj(mu,nu,sigma,j)
      temp T1xxxj(mu,nu,sigma,j)
      temp Txjxx(mu,j,lambda,sigma)
      temp T1xjxx(mu,j,lambda,sigma)

      temp Tiiix(i,i1,i2,sigma)
      temp Tjjjx(j,j1,j2,sigma)
      temp Tijix(i,j1,i2,sigma)
      temp Tjijx(j,i1,j2,sigma)
      temp Tjixx(j,i1,lambda,sigma)

      temp Tiiax(i,i1,a,sigma)
      temp T1iiax(i,i1,a,sigma)
      temp T1iixx(i,i1,lambda,sigma)
#
      temp Tjjbx(j,j1,b,sigma)
      temp T1jjbx(j,j1,b,sigma)
      temp Tjjxx(j,j1,lambda,sigma)
      temp T1jjxx(j,j1,lambda,sigma)
#
      temp Tijax(i,j1,a,sigma)
      temp T1ijax(i,j1,a,sigma)
      temp Tijxx(i,j1,lambda,sigma)
      temp T1ijxx(i,j1,lambda,sigma)

      temp Tjaix(j,a,i1,sigma)
      temp T1jaix(j,a,i1,sigma)
      temp Tjxix(j,nu,i1,sigma)

      temp Tiaix(i,a,i1,sigma)
      temp T1iaix(i,a,i1,sigma)
      temp Tixix(i,nu,i1,sigma)
      temp T1ixix(i,nu,i1,sigma)
      temp Tixxx(i,nu,lambda,sigma)
      temp T1ixxx(i,nu,lambda,sigma)
      temp Txiix(nu,i,i1,sigma)
      temp T1xiix(nu,i,i1,sigma)
#
      temp Tjbjx(j,b,j1,sigma)
      temp T1jbjx(j,b,j1,sigma)
      temp Tjxjx(j,nu,j1,sigma)
      temp T1jxjx(j,nu,j1,sigma)
      temp Tjxxx(j,nu,lambda,sigma)
      temp T1jxxx(j,nu,lambda,sigma)
      temp Txjjx(nu,j,j1,sigma)
      temp T1xjjx(nu,j,j1,sigma)
#
      temp Tibix(i,b,i1,sigma)
      temp T1ibix(i,b,i1,sigma)
#
      temp Tjajx(j,a,j1,sigma)
      temp T1jajx(j,a,j1,sigma)

      temp Tibjx(i,b,j1,sigma)
      temp T1ibjx(i,b,j1,sigma)
      temp Tixjx(i,nu,j1,sigma)
      temp T1ixxj(i,nu,sigma,j1)

      temp Txiii(mu,i,i1,i2)
      temp T1xiii(mu,i,i1,i2)
      temp Txxii(mu,nu,i1,i2)
      temp T1xxii(mu,nu,i1,i2)
      temp Txjij(mu,j,i1,j2)
      temp T1xjij(mu,j,i1,j2)
      temp Txxij(mu,nu,i1,j2)
      temp T1xxij(mu,nu,i1,j2)

      temp Txixi(mu,i1,lambda,i)
      temp Tixxi(i1,nu,lambda,i)
      temp Txipi(mu,i,p,i1)
      temp T1xipi(mu,i,p,i1)
      temp Tpipi(p1,i,p,i1)
      temp T1pipi(p1,i,p,i1)
      temp Tixai(i,mu,a,i1)
      temp T1ixai(i,mu,a,i1)
      temp Txaii(mu,a,i,i1)
      temp T1xaii(mu,a,i,i1)
      temp Taiia(a,i1,i,a1)
      temp T1aiia(a,i1,i,a1)
      temp Taaii(a,a1,i,i1)
      temp T1aaii(a,a1,i,i1)
      temp Taaai(a2,a,a1,i)
      temp t0pqqp(p,q,q1,p1) 
      temp tpqqp(p,q,q1,p1) 
      temp t1pqqp(p,q,q1,p1) 
      temp tqppq(q,p,p1,q1)  
      temp t1qppq(q,p,p1,q1)  
      temp tbija (b,i,j,a)
      temp tbiji (b,i,j,i1)
      temp t1biji (b,i,j,i1)
      temp tjabi (j,a,b,i)
      temp t1jabi (j,a,b,i)
#
      served VSpipi(p1,i,p,i1)
      served Viaai(i,a1,a,i1)
      served Vaaii(a,a1,i,i1)
      served VSaaai(a2,a,a1,i)

      static static_dens (p,p1)
      static static_ca   (p,p1)
#
#
# Watson
#
      DISTRIBUTED  BOMB_SHELL (p,p1) # Never create to force an exit; very stupid thing to do

      DISTRIBUTED  R1A_VECS (a,i,kroot)
      DISTRIBUTED  L1A_VECS (i,a,kroot)

      SERVED  R2AA_VECS (a,i,a1,i1,kroot)
      SERVED  R2AB_VECS (a,i,b ,j ,kroot)

      SERVED  L2AA_VECS (i,a,i1,a1,kroot)
      SERVED  L2AB_VECS (i,a,j ,b ,kroot)

      DISTRIBUTED  R1A (a,i)
      DISTRIBUTED  L1A (i,a)
      DISTRIBUTED  L1A_NORM (i,a)
      SERVED       R2AA (a,i,a1,i1)
      SERVED       R2AB (a,i,b,j)
      SERVED       L2AA (i,a,i1,a1)
      SERVED       L2AB (i,a,j,b)
      SERVED       L2AA_NORM (i,a,i1,a1)
      SERVED       L2AB_NORM (i,a,j,b)

      DISTRIBUTED  L2RTAU_iiii (i,i1,i2,i3)
      DISTRIBUTED  L2RTAU_ijij (i,i1,j ,j1)
      DISTRIBUTED  L2TTAU_iiii (i,i1,i2,i3)
      DISTRIBUTED  L2TTAU_ijij (i,i1,j ,j1)

      DISTRIBUTED  DIS_OO1_A (i,i1)
      DISTRIBUTED  DIS_OO2_A (i,i1)
      DISTRIBUTED  DIS_OO3_A (i,i1)
      DISTRIBUTED  DIS_OO4_A (i,i1)
      DISTRIBUTED  DIS_VV1_A (a,a1)
      DISTRIBUTED  DIS_VV2_A (a,a1)
      DISTRIBUTED  DIS_VV3_A (a,a1)
      DISTRIBUTED  DIS_VV4_A (a,a1)
      DISTRIBUTED  DIS_VO1_A (a,i)
      DISTRIBUTED  DIS_VO2_A (a,i)
      DISTRIBUTED  DIS_VO3_A (a,i)
      DISTRIBUTED  DIS_VO4_A (a,i)

      LOCAL  L_Z1_ai (a,i)
      LOCAL  L_Z2_ai (a,i)

      LOCAL  L_Z_ii (i,i1)
      LOCAL  L_Z_aa (a,a1)
      LOCAL  L_Y_ii (i,i1)
      LOCAL  L_Y_aa (a,a1)

      LOCAL  LR1L2_ai (a,i1)
      LOCAL  LR2L1_ai (a,i1)
      LOCAL  LR2L2_aa (a,a1)
      LOCAL  LR2L2_ii (i,i1)
      LOCAL  LT2L2_aa (a,a1)
      LOCAL  LT2L2_ii (i,i1)

      served Dxaai(mu,a,a1,i)
      served Dxxai(mu,nu,a1,i)
      served Dxxxi(mu,nu,sigma,i)
#
      served Dxbaj(mu,b,a1,j)
      served Dxxaj(mu,nu,a1,j)
      served Dxabi(mu,a,b1,i)
      served Dxxbi(mu,nu,b1,i)
      served Dxiii(mu,i,i1,i2)
      served Dxxii(mu,nu,i1,i2)
      served Dxjij(mu,j,i1,j2)
      served Dxxij(mu,nu,i1,j2)
      served Diaix(i,a,i1,sigma)
      served Dixix(i,nu,i1,sigma)
      served Dxiix(nu,i,i1,sigma)
      served Dixxx(i,nu,lambda,sigma)
#
      served Dibix(i,b,i1,sigma)
      served Djajx(j,a,j1,sigma)
      served Dibjx(i,b,j1,sigma)
      served Dixjx(i,nu,j1,sigma)
      served Dixxj(i,nu,sigma,j1)
      served Djaix(j,a,i1,sigma)
      served Djxix(j,nu,i1,sigma)
      served Diiax(i,i1,a,sigma)
      served Diixx(i,i1,lambda,sigma)
      served Dijax(i,j1,a,sigma)
      served Dijxx(i,j1,lambda,sigma)
      served Diiix(i,i1,i2,sigma)
      served Dijix(i,j1,i2,sigma)
      served Djijx(j,i1,j2,sigma)
      served Djixx(j,i1,lambda,sigma)

      temp Txjxj(mu,j1,lambda,j)
      temp Tjxxj(j1,nu,lambda,j)
      temp T1jxxj(j1,nu,lambda,j)
      temp Txjqj(mu,j,q,j1)
      temp T1xjqj(mu,j,q,j1)
      temp Tqjqj(q1,j,q,j1)
      temp T1qjqj(q1,j,q,j1)
      temp Tjxbj(j,mu,b,j1)
      temp T1jxbj(j,mu,b,j1)
      temp Txbjj(mu,b,j,j1)
      temp T1xbjj(mu,b,j,j1)
      temp Tjbbj(j,b1,b,j1)
      temp T1jbbj(j,b1,b,j1)
      temp Tbbjj(b,b1,j,j1)
      temp T1bbjj(b,b1,j,j1)
      temp Tbbbj(b2,b,b1,j)
#
      temp Tiibb(i,i1,b1,b)
      temp Taajj(a,a1,j,j1)
      temp T1aajj(a,a1,j,j1)
      temp Tiabj(i,a,b,j)
      temp tajib (a,j,i,b)
      temp t1ajib (a,j,i,b)
#
      served Vpiqj(p,i,q,j)
      served Vaaai(a,a1,b,j)
#
      temp Txbii(mu,b,i,i1)
      temp T1xbii(mu,b,i,i1)
      temp Tbbii(b,b1,i,i1)
      temp T1bbii(b,b1,i,i1)
      temp Tjbii(j,b,i,i1)
      temp T1jbii(j,b,i,i1)
      temp Txbai(mu,b,a,i)
      temp T1xbai(mu,b,a,i)
      temp Tbbai(b,b1,a,i)
#
#
# End Arrays used in transformation for AO2 algorithm
# ---------------------------------------------------
#
# Declare temporary arrays
# ------------------------
#
      temp Txxxx(mu,nu,lambda,sigma)
      temp T1xxxx(mu,nu,lambda,sigma)
      temp Txxxp(mu,nu,lambda,p)
      temp Txxpp(mu,nu,p1,p)
      temp Txppp(mu,p2,p1,p)
      temp Tpppp(p3,p2,p1,p)
      temp T1pppp(p3,p2,p1,p)
      temp T2pppp(p3,p2,p1,p)
      temp T3pppp(p3,p2,p1,p)
      temp T4pppp(p3,p2,p1,p)
      temp Txxxq(mu,nu,lambda,q)
      temp Txxqq(mu,nu,q1,q)
      temp Txqqq(mu,q2,q1,q)
      temp Tqqqq(q3,q2,q1,q)
      temp T1qqqq(q3,q2,q1,q)
      temp T2qqqq(q3,q2,q1,q)
      temp T3qqqq(q3,q2,q1,q)
      temp T4qqqq(q3,q2,q1,q)
      temp Txpqq(mu,p,q1,q)
      temp Tppqq(p1,p,q1,q)
      temp T1ppqq(p1,p,q1,q)
      temp T2ppqq(p1,p,q1,q)
      temp T3ppqq(p1,p,q1,q)
      temp Tqpqp(q1,p2,q,p)
      temp T1qpqp(q1,p2,q,p)
      temp T2qpqp(q1,p2,q,p)
      temp T3qpqp(q1,p2,q,p)
      temp Tpqpq(p1,q1,p,q)
      temp T1pqpq(p1,q1,p,q)
      temp T2pqpq(p1,q1,p,q)
      temp T3pqpq(p1,q1,p,q)
      temp Tqqpp(q,q1,p,p1)
      temp T1qqpp(q,q1,p,p1)
      temp T2qqpp(q,q1,p,p1)
      temp Txqpp(mu,q,p1,i)
      temp tabji (a,b,j,i)
#
# Declare local arrays
# --------------------------
#
     local Lxxai(mu,nu,a2,i) 
     local Lxxaj(mu,nu,a1,j) 
     local Lxxbj(mu,nu,b2,j) 
     local Lxxbi(mu,nu,b,i) 
     local Lijab (i,j1,a2,b3)
     local Labij(a,b,i,j)
     local Laaii(a,a1,i,i1)
     local Laibj(a,i,b,j)
     local Laibj2(a,i,b,j)
     local Lajbi4(a,j,b,i)
     local Lajbi5(a,j,b,i)
     local LLaibj(a,i,b,j)
     local L1aibj(a,i,b,j)
     local L2aibj(a,i,b,j)
     local Liibj(i,i1,b,j)
     local L1iibj(i,i1,b,j)
     local LLaiai(a,i,a1,i1)
     local L1aiai(a,i,a1,i1)
     local L2aiai(a,i,a1,i1)
     local Laiai2(a,i,a1,i1)
     local Laiai4(a,i,a1,i1)
     local Laiai5(a,i,a1,i1)
     local L1iiaa (i,i1,a,a1)
     local LLbjbj(b,j,b1,j1)
     local Liiai (i,i1,a,i)
     local L1iiai(i,i1,a,i)
     local Laajb (a,a1,j,b)
     local L1aajb(a,a1,j,b)
     local Liajb (i,a,j,b)
     local L1aaia (a,a1,i,a2)
     local Laaia  (a,a1,i,a2)
     local Liaia  (i,a,i1,a1)
     local L1iaia  (i,a,i1,a1)
     local Lajib  (a,j,i,b)
     local L1ajib  (a,j,i,b)
     local LLbjai (b,j,a,i)
     local Lijij (i,j,i1,j1)
     local L1ijij (i,j,i1,j1)



      temp Taaia (a,a1,i,a2)
      temp T1aaia (a,a1,i,a2)
      temp Taiaa (a,i,a1,a2)
      temp T1aiaa (a,i,a1,a2)
      temp Tipxx(i,p,nu,sigma)
      temp Tipqx(i,p,q,sigma)
      temp Tipqq(i,p,q,q1) 
#
# Declare served arrays
# ---------------------
#
      temp AOINT(mu,nu,lambda,sigma)
      temp AOINT1(mu,nu,lambda,sigma)
      distributed Rbj(b,j)
      distributed Rai(a,i)

      distributed  HBAR_ia (i,a)
      distributed  HBAR_jb (j,b)
      served HBAR_iiii(i,i1,i2,i3)
      served HBAR_iijj(i,i1,j,j1)

      SERVED  HBAR_ABCI_aaaa(a,a1,a2,i)
      SERVED  HBAR_ABCI_aabb(a,a1,b ,j)
      SERVED  HBAR_AIBC_aaaa(a,a1,i,a2)
      SERVED  HBAR_AIBC_aabb(a,a1,j,b2)

      SERVED  HBAR_JKIA_aaaa(i1,i,i2,a)
      SERVED  HBAR_JKIA_aabb(i1,i,j2,b)
      SERVED  HBAR_IAJK_aaaa(i,i1,a,i2)
      SERVED  HBAR_IAJK_aabb(i,i1,b,j )

      served HBAR_AJIB_aaaa(i1,a1,a,i)
      served HBAR_AJIB_aabb(i,a,b,j)
      served HBAR_AJIB_iibb(i1,i,b,b1)
#
# Declare static arrays
# ---------------------
#
      distributed t1a_old(a,i)
      distributed t1b_old(b,j)
      distributed a1a_old(i,a)
#
      served T2old_aa(a,i,a1,i1)
      served T2old_ab(a,i,b,j)
      served T2old_bb(b,j,b1,j1)
      served A2old_aa(i,a,i1,a1)
      served A2old_ab(i,a,j,b)
      served A2old_bb(j,b,j1,b1)
#
      served LTau_aa(a,a1,i,i1)
      served LA2old_aa(i,i1,a,a1)
      served LTau_ab(a,b1,i,j1)
      served LA2old_ab(i,j1,a,b1)
# 
#
#
#      Two particle density matrix!
#
#
      SERVED       L2R2_aaaa (i,a1,i1,a)   #
      SERVED       L2R2_abba (i,b1,j1,a)   #  These can be computed on the fly...
      SERVED       L2R2_abab (i,b1,i1,b)   #  So I don't know what is best...

      SERVED       L2T2_aaaa (i,a1,i1,a)   #
      SERVED       L2T2_abba (i,b1,j1,a)   #  These can be computed on the fly...
      SERVED       L2T2_abab (i,b1,i1,b)   #  So I don't know what is best...

      served Tau_aa(a,i,a1,i1)
      served Tau_ab(a,i,b,j)
#
      served RTAU_aa (a,i,a1,i1)
      served RTAU_ab (a,i,b,j)

      distributed Gmi_a(i,i1) 
      distributed Gmi_b(j,j1) 
      distributed Gae_a(a,a1) 
      distributed Gae_b(b,b1) 

      served Dijab_aa_1(i,i1,a,a1)
      served Dijab_ab_1(i,j,a,b)
#
      served Dijab_aa(i,i1,a,a1)
      served Dijab_ab(i,j,a,b)
      served Dijkl_aa(i2,i,i3,i1)
      served Vijmn_aaaa(i,i2,i1,i3)
      served Dijkl_ab(i,j,i1,j1)
      served Vijmn_abab(i,j,i1,j1)
      served Vibja_aaaa(i,a,i1,a1)
      served Dibja_aaaa(i,a,i1,a1)
      served Vibja_abab(i,b,i1,b1)
      served Dibja_abab(i,b,i1,b1)
      served Dibja_abba(i,b,j,a)
      served Vibja_abba(i,b,j,a) 
      served Dabci_aaaa(a,a2,a1,i)
      served Dabci_abab(a,b,a1,j)
      served Dijka_aaaa(i,i2,i1,a)
      served Dijka_abab(i,j,i1,b)
#
      distributed I3AA(i,a,i1,i2) 
      distributed I3AB(i,a,j,j1) 
      distributed I3BA(j,b,i,i1) 
      distributed I3BB(j,b,j1,j2) 

      served T1AO_aa(lambda,i,a,i1)
      served T1AO_bb(lambda,j,b,j1)
      served T1AO_ab(lambda,i,b,j)
      served T2AO_aa(lambda,i,sigma,i1)
      served T2AO_bb(lambda,j,sigma,j1)
      served T2AO_ab(lambda,i,sigma,j)

      served T3AO_aa(mu,i,nu,i1)  
      served TAO_aa(mu,i,nu,i1)  
      served T3AO_ab(mu,i,nu,j)  
      served TAO_ab(mu,i,nu,j)  
      served RTAO_aa(mu,i,nu,i1)   #Watson, eom gradient
      served RTAO_ab(mu,i,nu,j)   #Watson, eom gradient
      served LAO_aa(i,mu,i1,nu)  
      served LAO_ab(i,mu,j,nu)  
      served LLAO_aa(i,mu,i1,nu)  #Watson, eom gradient
      served LLAO_ab(i,mu,j,nu)  #Watson, eom gradient
# 
      distributed T2L2_VV_A (a,a1)
      distributed R2L2_VV_A (a,a1)
      distributed DENS_INT_OV_A (i,a)
      distributed T1L1_OO_A (i,i1)
      distributed T2L2_OO_A (i,i1)
      distributed R2L2_OO_A (i,i1)

      distributed Dai (a,i)
      distributed Dia (i,a)
      distributed Dij_a(i,i1) 
      distributed Dab_a(a,a1) 
      distributed Dii(i,i1)
      distributed Daa(a1,a)
      distributed Djj(j,j1)
      distributed Dbb(b1,b)
#
      distributed DOR_ii(i,i1) 
      distributed DOR_aa(a,a1) 
      distributed Dpp(p,p1) 
      distributed Dqq(q,q1) 
#
      temp  Dabcd_aa(a,a1,a2,a3)
      temp DXabcd_aa(a2,a3,a,a1)
      temp  Dabcd_bb(b,b1,b2,b3)
      temp DXabcd_bb(b2,b3,b,b1)
      temp  Dabcd_ab(a,b,a1,b1)
      temp DXabcd_ab(a1,b1,a,b)
      distributed Dpq(mu,nu)
      distributed DHF(mu,nu)
      distributed DHFa(mu,nu)
      distributed DHFb(mu,nu)
      distributed Ipq(mu,nu)
#
# Define Local arrays 
# ------------------- 
#
      local Laa(a,a1) 
      local L1aa(a1,a) 
      local Lbb(b,b1) 
      local L1bb(b1,b) 
      local Lai(a,i) 
      local L1ai(a1,i) 
      local Lbj(b,j) 
      local L1bj(b1,j) 
      local Lia(i,a) 
      Local Ljb(j,b) 
      local Laaai(a,a1,a2,i)
      local L1aaai(a,a1,a2,i)
      local L2aaai(a,a1,a2,i)
      local L3aa(i2,a,i1,i)
      local Lxaai(mu,a2,a,i)
      local Lxabi(mu,a,b1,i)
      local Lxbbj(mu,b2,b,j)
      local Lxbaj(mu,b,a1,j)
#
#    ------------------------------------------------------------------------
#
# Declare temporary arrays
# ------------------------
#
      temp Tabib(a,b,i,b1)
      temp T1abib(a,b,i,b1)
      temp Taiai(p,i,p1,i1)
      temp T1aiai(p,i,p1,i1)
      temp T2aiai(p,i,p1,i1)
      temp T3aiai(p,i,p1,i1)
      temp T4aiai(p,i,p1,i1)
      temp Tajaj(a,j,a1,j1)
      temp T1ajaj(a,j,a1,j1)
      temp Laiai(p,i,p1,i1)
#
      temp  Tiaia(i,a,i1,a1)
      temp T1iaia(i,a,i1,a1)
      temp T2iaia(i,a,i1,a1)
      temp T3iaia(i,a,i1,a1)
      temp TAiaia(i,a,i1,a1)
      temp  Tiaai(i,a,a1,i1)
      temp  T1iaai(i,a,a1,i1)
      temp  T2iaai(i,a,a1,i1)
      temp  T3iaai(i,a,a1,i1)
      temp Tiiai(i1,i2,a2,i)  
      temp TSiiai(i1,i2,a2,i)  
      temp T1iiai(i1,i2,a2,i)  
      temp T2iiai(i1,i2,a2,i)  
      temp  Tjbjb(j,b,j1,b1)
      temp T1jbjb(j,b,j1,b1)
      temp T2jbjb(j,b,j1,b1)
      temp T3jbjb(j,b,j1,b1)
      temp TAjbjb(j,b,j1,b1)
      temp  Tiajb(i,a,j,b)
      temp T1iajb(i,a,j,b)
      temp T2iajb(i,a,j,b)
      temp TAiajb(i,a,j,b)
      temp  Tibib(i,b,i1,b1)
      temp T1ibib(i,b,i1,b1)
      temp T2ibib(i,b,i1,b1)
      temp TAibib(i,b,i1,b1)
      temp  Tjaja(j,a,j1,a1)
      temp T1jaja(j,a,j1,a1)
      temp T2jaja(j,a,j1,a1)
      temp TAjaja(j,a,j1,a1)
      temp  Taijb(a,i,j,b)   
      temp  Tbjjb(b,j,j1,b1)
      temp T1bjjb(b,j,j1,b1)
      temp Tjjbj(j1,j2,b2,j)  
#
      temp Tbjbj(q,j,q1,j1)
      temp T1bjbj(q,j,q1,j1)
      temp T2bjbj(q,j,q1,j1)
      temp T3bjbj(q,j,q1,j1)
      temp Lbjbj(q,j,q1,j1)
      temp Taibj(p,i,q,j)
      temp T1aibj(p,i,q,j)
      temp T2aibj(p,i,q,j)
      temp T3aibj(p,i,q,j)
      temp Tajbi(a,j,b,i)
      temp T1ajbi(a,j,b,i)
#
      temp tmp1_aiai(a,i,a1,i1)
      temp tmp2_aiai(a,i,a1,i1)
      temp tmp1_bjbj(b,j,b1,j1)
      temp tmp2_bjbj(b,j,b1,j1)
      temp tmp1_aibj(a,i,b,j)
#
      temp Tai(a,i)
      temp T1ai(a,i)
      temp T2ai(a,i)
      temp T3ai(a,i)
      temp Tbj(b,j)
      temp T1bj(b,j)
      temp Tpq(mu,nu)
      temp T1pq(mu,nu)
      temp tpp(p,p1) 
      temp t1pp(p,p1) 
      temp t2pp(p,p1) 
      temp t3pp(p,p1) 
      temp t4pp(p,p1) 
      temp tqq(q,q1) 
      temp t1qq(q,q1) 
      temp t2qq(q,q1) 
      temp t3qq(q,q1) 
      temp t4qq(q,q1) 
#
      temp Taa(a,a1)
      temp T1aa(a,a1)
      temp Taa2(a,a1)
      temp T3aa(a,a1)
      temp Tbb(b,b1)
      temp T1bb(b,b1)
      temp Tae_a(a,a1)
      temp Tae_b(b,b1)
      temp Tia(i,a)
      temp T1ia(i,a)
      temp T2ia(i,a)
      temp T3ia(i,a)
      temp T4ia(i,a)
      temp Tjb(j,b)
      temp T1jb(j,b)
      temp T2jb(j,b)
      temp T3jb(j,b)
      temp T4jb(j,b)
      temp Tme_a(i,a)
      temp Tme_b(j,b)
#
      temp Tij(i,j1)
      temp Tii(i,i1)
      temp T1ii(i,i1)
      temp T2ii(i,i1)
      temp T3ii(i,i1)
      temp Tjj(j,j1)
      temp T1jj(j,j1)
      temp Tmi_a(i,i1)
      temp Tmi_b(j,j1)
#
      served Liaai(i,a,a1,i1) 
      served Ljbbj(j,b,b1,j1) 
      served Liabj(i,a,b,j) 
      temp Lbjai(b,j,a,i) 
      temp Tbjai(b,j,a,i) 
      served Ljbai(j,b,a,i) 
      temp Tjbai(j,b,a,i) 
      temp T1jbai(j,b,a,i) 
      temp T2jbai(j,b,a,i) 
      temp Tiaaa(i,a1,a2,a3) 
      temp T1iaaa(i,a1,a2,a3) 
      temp Taaaa(a,a1,a2,a3) 
      temp T1aaaa(a,a1,a2,a3) 
      temp T2aaaa(a,a1,a2,a3) 
      temp T3aaaa(a,a1,a2,a3) 
      temp Taabb(a,a1,b,b1) 
      temp T1aabb(a,a1,b,b1) 
      temp Tbbbb(b,b1,b2,b3) 
      temp T1bbbb(b,b1,b2,b3) 
      temp Tiiii(i,i1,i2,i3) 
      temp T1iiii(i,i1,i2,i3) 
      temp Tiijj(i,i1,j,j1) 
      temp T1iijj(i,i1,j,j1) 
      temp Tjjjj(j,j1,j2,j3) 
      temp T1jjjj(j,j1,j2,j3) 
      temp Tiiaa(i,i1,a,a1) 
      temp T1iiaa(i,i1,a,a1) 
      temp T2iiaa(i,i1,a,a1) 
      temp T3iiaa(i,i1,a,a1) 
      temp T4iiaa(i,i1,a,a1) 
      temp TAiiaa(i,i1,a,a1) 
      temp T1iibb(i,i1,b,b1) 
      temp T2iibb(i,i1,b,b1) 
      temp TAiibb(i,i1,b,b1) 
      temp Tjjaa(j,j1,a,a1) 
      temp T1jjaa(j,j1,a,a1) 
      temp T2jjaa(j,j1,a,a1) 
      temp TAjjaa(j,j1,a,a1) 
      temp Tjjbb(j,j1,b,b1) 
      temp TAjjbb(j,j1,b,b1) 
      temp T1jjbb(j,j1,b,b1) 
      temp T2jjbb(j,j1,b,b1) 
      temp T1iabj(i,a,b,j) 
      temp T1bjia(b,j,i,a) 
      temp Tiaii(i,a,i1,i2) 
      temp Tjbjj(j,b,j1,j2) 
      temp Tiajj(i,a,j,j1) 
      temp T1aaai(a,a1,a2,i) 
      temp T1bbai(b,b1,a,i) 
      temp T1bbbj(b,b1,b2,j) 
      temp Tiiia(i,i1,i2,a) 
      temp T1iiia(i,i1,i2,a) 
      temp  Tiijb(i,i1,j,b) 
      temp T1iijb(i,i1,j,b) 
      temp  Tjjia(j,j1,i,a) 
      temp T1jjia(j,j1,i,a) 
      temp  Tjjjb(j,j1,j2,b) 
      temp T1jjjb(j,j1,j2,b) 
      temp  Tijab(i,j,a,b) 
      temp T1ijab(i,j,a,b) 
      temp T2ijab(i,j,a,b) 
      temp  Tijaj(i,j,a,j1) 
      temp  T1ijaj(i,j,a,j1) 
      temp  Tabab(a,b,a1,b1) 
      temp T1abab(a,b,a1,b1) 
      temp  Tijij(i,j,i1,j1) 
      temp T1ijij(i,j,i1,j1) 
      temp  Tjbia(j,b,i,a) 
      temp T1jbia(j,b,i,a) 
      temp  Tabaj(a,b,a1,j) 
      temp  Tabij(a,b,i,j) 
      temp  T1abij(a,b,i,j) 
      temp T1abaj(a,b,a1,j) 
      temp  Tbabi(b,a,b1,i) 
      temp T1babi(b,a,b1,i) 
      temp  Tijib(i,j,i1,b) 
      temp T1ijib(i,j,i1,b) 
      temp  Tjija(j,i,j1,a) 
      temp T1jija(j,i,j1,a) 
      temp  Tjaib(j,a,i,b) 
      temp  Tibja(i,b,j,a) 
      temp  T1ibja(i,b,j,a) 
      temp  tibij (i,b,i1,j)
      temp  t1ibij (i,b,i1,j)
      temp  Tibaj(i,b,a,j) 
      temp  T1ibaj(i,b,a,j) 
      temp  Tjaaj(j,a,a1,j1) 
      temp  Tbibi(b,i1,b1,i) 
      temp  T1bibi(b,i1,b1,i) 
      temp  Lbibi(b,i1,b1,i) 
      temp  Lajaj(a,j1,a1,j) 
      temp  Tbaji(b1,a,j,i1)  
      temp  T1baji(b1,a,j,i1)  
      temp  Tjibi(j,i1,b,i)   
      temp  T1jibi(j,i1,b,i)   
      temp  tjiba (j,i,b,a)
#
#
      temp Qaa(i,lambda,i1,a1) 
      temp QQaa(i,lambda,i1,sigma) 
      temp Qbb(j,lambda,j1,b1)
      temp QQbb(j,lambda,j1,sigma) 
      temp  Qab(i,lambda,j,b) 
      temp QQab(i,lambda,j,sigma) 
#
# Intermediate arrays
# -------------------
#
      distributed Iij_aa(i,i1)
      distributed Iab_aa(a,a1)
      distributed Iai_aa(a,i)
      distributed Iia_aa(i,a)
      distributed Xai_aa(a,i)
#
# Arrays used in 'direct' computations 
# ------------------------------------ 
#
      temp T1xixi(mu,i,nu,i1) 
      served Ixixi(mu,i,nu,i1) 
      served I1xixi(mu,i,nu,i1) 
      served IRxixi(mu,i,nu,i1)  # Watson, below too gradient
      served ILxixi(mu,i,nu,i1) 
      temp T1xjxj(mu,j,nu,j1) 
      served Ixjxj(mu,j,nu,j1) 
      served I1xjxj(mu,j,nu,j1) 
      temp Txixj(mu,i,nu,j) 
      served Ixixj(mu,i,nu,j) 
      served I1xixj(mu,i,nu,j) 
      served IRxixj(mu,i,nu,j) 
      served ILxixj(mu,i,nu,j) 
#
      temp  Txiai(lambda,i,a1,i1)  
      temp T1xiai(lambda,i,a1,i1)  
      temp  Txjbj(lambda,j,b1,j1)  
      temp T1xjbj(lambda,j,b1,j1)  
      temp  Txibj(lambda,i,b1,j1)  
      temp Txabi(mu,a,b,i) 
      temp Txbaj(mu,b,a1,j) 
      temp Txxbi(mu,nu,b,i) 
      temp Txxaj(mu,nu,a,j) 
      temp  Txi(mu,i) 
      temp T1xi(mu,i) 
      temp  Txj(mu,j) 
      temp T1xj(mu,j) 
      temp Jxi(mu,i) 
      temp Jxj(mu,j) 
      temp Jxa(mu,a) 
      temp Jxb(mu,b) 
      temp Ixa(mu,a) 
      temp Ixb(mu,b) 
      temp Ixx(mu,nu) 
      temp I1xx(mu,nu) 
#
      served  Iaiai(a,i,a1,i1)
      served I1aiai(a,i,a1,i1)
      served  IRaiai(a,i,a1,i1) # Watson, below too eom grad
      served ILaiai(a,i,a1,i1)
      served  Ibjbj(b,j,b1,j1)
      served I1bjbj(b,j,b1,j1)
      served  Iaibj(a,i,b,j)
      served I1aibj(a,i,b,j)
      served  IRaibj(a,i,b,j)
      served ILaibj(a,i,b,j)
      served  Ixxai(mu,nu,a,i)
     #served I1xxai(mu,nu,a,i)
      served  Ixxbj(mu,nu,b,j)
     #served I1xxbj(mu,nu,b,j)
      served Ixabi(mu,a,b,i)
      served Ixxbi(mu,nu,b,i)
     #served I1xxbi(mu,nu,b,i)
      served Ixxaj(mu,nu,a,j)
     #served I1xxaj(mu,nu,a,j)
      served Ixxxi(mu,nu,lambda,i)
      served Jxxxi(mu,nu,lambda,i)
      served Ixxxj(mu,nu,lambda,j)
      served Jxxxj(mu,nu,lambda,j)
#
      distributed IIxi(mu,i)
      distributed IIxj(mu,j)
      distributed JJxi(mu,i)
      distributed JJxj(mu,j)
#
      distributed  Ixi(mu,i)
      distributed I1xi(mu,i)
      distributed  Ixj(mu,j)
      distributed I1xj(mu,j)

       served D0aiai(a,i,a1,i1)
       served D1aiai(a,i,a1,i1)
       served D2aiai(a,i,a1,i1)
       served D3aiai(a,i,a1,i1)
       served D4aiai(a,i,a1,i1)
       served D5aiai(a,i,a1,i1)
#
       served D0aibj(a,i,b,j)
       served D1aibj(a,i,b,j)
       served D2aibj(a,i,b,j)
       served D3aibj(a,i,b,j)
       served D4aibj(a,i,b,j)
       served D5aibj(a,i,b,j)

       served Waiai(a,i,a1,i1)
       served e1aiai(a,i,a1,i1)
       served e2aiai(a,i,a1,i1)
       served e3aiai(a,i,a1,i1)
       served e4aiai(a,i,a1,i1)
       served e5aiai(a,i,a1,i1)

       served e1aibj(a,i,b,j)
       served e2aibj(a,i,b,j)
       served e3aibj(a,i,b,j)
       served e4aibj(a,i,b,j)
       served e5aibj(a,i,b,j)
       served e6aibj(a,i,b,j)

#
# Arrays and scalars  used in iterative computation of Dai 
# -------------------------------------------------------- 
#
      distributed Doldai_a(a,i) 
      distributed Dnewai_a(a,i) 
#
      distributed D0ai(a,i)
      distributed D1ai(a,i)
      distributed D2ai(a,i)
      distributed D3ai(a,i)
      distributed D4ai(a,i)
      distributed D5ai(a,i)
#
      distributed e1ai(a,i)
      distributed e2ai(a,i)
      distributed e3ai(a,i)
      distributed e4ai(a,i)
      distributed e5ai(a,i)
#
# Define static arrays which are used to compute the o-o and v-v orbital response density.
# ---------------------------------------------------------------------------------------- 
#
      static DSii(i,i1) 
      static DS1ii(i,i1) 
      static DSaa(a,a1) 
      static DS1aa(a,a1) 
      static DSjj(j,j1) 
      static DS1jj(j,j1) 
      static DSbb(b,b1) 
      static DS1bb(b,b1) 
#
       scalar ncount
       scalar b11
       scalar b12
       scalar b13
       scalar b14
       scalar b15
       scalar b16
       scalar b17
       scalar b18
       scalar b19
       scalar b110
#
       scalar b22
       scalar b23
       scalar b24
       scalar b25
       scalar b26
       scalar b27
       scalar b28
       scalar b29
       scalar b210
#
       scalar b33
       scalar b34
       scalar b35
       scalar b36
       scalar b37
       scalar b38
       scalar b39
       scalar b310
       scalar b44
       scalar b45
       scalar b46
       scalar b47
       scalar b48
       scalar b49
       scalar b410
#
#
       scalar b55
       scalar b56
       scalar b57
       scalar b58
       scalar b59
       scalar b510
#
       scalar b66
       scalar b67
       scalar b68
       scalar b69
       scalar b610
#
       scalar b77
       scalar b78
       scalar b79
       scalar b710
#
       scalar b88
       scalar b89
       scalar b810
#
       scalar b99
       scalar b910
#
       scalar b1010
#
       scalar Tb11
       scalar Tb12
       scalar Tb13
       scalar Tb14
       scalar Tb15
       scalar Tb16
       scalar Tb17
       scalar Tb18
       scalar Tb19
       scalar Tb110
#
       scalar Tb22
       scalar Tb23
       scalar Tb24
       scalar Tb25
       scalar Tb26
       scalar Tb27
       scalar Tb28
       scalar Tb29
       scalar Tb210
#
       scalar Tb33
       scalar Tb34
       scalar Tb35
       scalar Tb36
       scalar Tb37
       scalar Tb38
       scalar Tb39
       scalar Tb310
       scalar Tb44
       scalar Tb45
       scalar Tb46
       scalar Tb47
       scalar Tb48
       scalar Tb49
       scalar Tb410
#
       scalar Tb55
       scalar Tb56
       scalar Tb57
       scalar Tb58
       scalar Tb59
       scalar Tb510
#
       scalar Tb66
       scalar Tb67
       scalar Tb68
       scalar Tb69
       scalar Tb610
#
       scalar Tb77
       scalar Tb78
       scalar Tb79
       scalar Tb710
#
       scalar Tb88
       scalar Tb89
       scalar Tb810
#
       scalar Tb99
       scalar Tb910
#
       scalar Tb1010
#
       scalar c1
       scalar c2
       scalar c3
       scalar c4
       scalar c5
       scalar c6
       scalar c7
       scalar c8
       scalar c9
       scalar c10
#

      DISTRIBUTED  REE (kindex12,indone)
      DISTRIBUTED  LEE (kindex12,indone)
      TEMP         TEE (kindex12,indone)

      TEMP  TMOM_DATA (kindex26,kindex26)

      DISTRIBUTED  AO_DENS (mu,nu)
      DISTRIBUTED  EE (kroot,indone)
      TEMP  txa  (mu,a)
      TEMP  t1xx (mu,nu)
      TEMP  txx2 (mu,nu)
      TEMP  txx3 (mu,nu)
#
# Define scalar quantities 
# ------------------------ 
#
      SCALAR  comp_grad
      SCALAR  debug
      SCALAR  icount
      SCALAR  znew
      SCALAR  zerr_jacob
      SCALAR  zdiff
      SCALAR  iphase
      SCALAR  znorm
      SCALAR  zmax_jacob
      SCALAR  zold
      SCALAR  zcrit

      SCALAR  OMEGA
      SCALAR  L_OMEGA
      SCALAR  OMEGA2
      SCALAR  rootcount
      SCALAR  root_thresh
      SCALAR  iroot
      SCALAR  ZERO
      SCALAR  ONE
      SCALAR  TWO
      SCALAR  THREE
      SCALAR  FOUR
      SCALAR  FIVE
      SCALAR  SIX
      SCALAR  SEVEN
      SCALAR  EIGHT
      SCALAR  NINE
      SCALAR  TEN
      SCALAR  ONEHALF
      SCALAR  energy
      SCALAR  energy_aa
      SCALAR  energy_ab
      SCALAR  energy_ba
      SCALAR  energy_bb
      SCALAR  energy_abba
      SCALAR  etot
      SCALAR  esum_aa
      SCALAR  esum_ab
      SCALAR  R0
      SCALAR  LNORM
      SCALAR  RNORM
      SCALAR  LRNORM
      SCALAR  INVNORM
      SCALAR  IL1R1
      SCALAR  IL2R2
      SCALAR  IF1R1
      SCALAR  IRHBAR
      SCALAR  IG2R2
      SCALAR  el1r1
      SCALAR  el2r2
      SCALAR  DIP_MOM_X
      SCALAR  DIP_MOM_Y
      SCALAR  DIP_MOM_Z
      SCALAR  DIP_MOM
      SCALAR  tmpnuc
      SCALAR  dipnuc
      SCALAR  dipnucx
      SCALAR  dipnucy
      SCALAR  dipnucz
      scalar etemp 
      scalar etemp1 
      scalar etemp2
      scalar etemp3
      scalar etemp4
      scalar etemp5
      scalar esum 
      scalar esum1 
      scalar esum2 
      scalar esum3 
      scalar esum4 
      scalar sum 
      scalar sum1
      scalar sum2
      scalar sum3
      scalar sum4
      scalar sum5
      scalar eacbd 
      scalar eold
      scalar enew 
      scalar ecrit 
      scalar ediff 
#------------------------------------------------------------------------



#
#    ------------------------------------------------------------------------
#
#    Perform the first two stages of the transformation in two N5 steps. 
#
     PROC TRAN_TRAN2 
#
#    ------------------------------------------------------------------------
#
     PARDO mu, nu, lambda
#
          allocate lxxxi(mu,nu,lambda,*)
          allocate Txxxj(mu,nu,lambda,*)
#
          DO sigma
#
             compute_integrals aoint(mu,nu,lambda,sigma)
#
             DO i   
#
                 T1xxxi(mu,nu,lambda,i)  = aoint(mu,nu,lambda,sigma)*ca(sigma,i)
                 lxxxi(mu,nu,lambda,i)  += T1xxxi(mu,nu,lambda,i)  
#
             ENDDO i   
#
             DO j   
#
                 T1xxxj(mu,nu,lambda,j)  = aoint(mu,nu,lambda,sigma)*ca(sigma,j)
                 Txxxj(mu,nu,lambda,j)  += T1xxxj(mu,nu,lambda,j)  
#
             ENDDO j   
#
          ENDDO sigma

          DO i
             T1xxxi(mu,nu,lambda,i)         = lxxxi(mu,nu,lambda,i)
             PREPARE Vxxxi(mu,nu,lambda,i)  = T1xxxi(mu,nu,lambda,i)
          ENDDO i

          DO j
             T1xxxj(mu,nu,lambda,j)         = Txxxj(mu,nu,lambda,j) 
             PREPARE Vxxxj(mu,nu,lambda,j)  = T1xxxj(mu,nu,lambda,j)
          ENDDO j

          deallocate lxxxi(mu,nu,lambda,*)
          deallocate Txxxj(mu,nu,lambda,*)
#
     ENDPARDO mu, nu, lambda 
     execute server_barrier
#
#    ------------------------------------------------------------------------
#
     PARDO mu, nu, i
#
           allocate L1xxxi(mu,nu,*,i)
#
           DO lambda
#
              REQUEST Vxxxi(mu,nu,lambda,i) lambda
#
              L1xxxi(mu,nu,lambda,i) = Vxxxi(mu,nu,lambda,i)
#
           ENDDO lambda
#
           DO i1
#
              Txxii(mu,nu,i1,i) = 0.0
#
              DO lambda
#
                 T1xxii(mu,nu,i1,i) = L1xxxi(mu,nu,lambda,i)*ca(lambda,i1)
                 Txxii(mu,nu,i1,i) += T1xxii(mu,nu,i1,i)
#
              ENDDO lambda
#
              PREPARE Vxxii(mu,nu,i1,i) = Txxii(mu,nu,i1,i)
#
           ENDDO i1
#
           DO a
#
              Txxai(mu,nu,a,i) = 0.0
#
              DO lambda
#
                 T1xxai(mu,nu,a,i) = L1xxxi(mu,nu,lambda,i)*ca(lambda,a)
                 Txxai(mu,nu,a,i) += T1xxai(mu,nu,a,i)
#
              ENDDO lambda
#
              PREPARE Vxxai(mu,nu,a,i) = Txxai(mu,nu,a,i)
#
           ENDDO a
           deallocate L1xxxi(mu,nu,*,i)
           allocate L2xxxi(mu,*,nu,i)

           DO lambda
              REQUEST Vxxxi(mu,lambda,nu,i) i
              L2xxxi(mu,lambda,nu,i) = Vxxxi(mu,lambda,nu,i)
           ENDDO lambda

           DO i1
              Txixi(mu,i1,nu,i) = 0.0

              DO lambda
                 T1xixi(mu,i1,nu,i) = L2xxxi(mu,lambda,nu,i)*ca(lambda,i1)
                 Txixi(mu,i1,nu,i) += T1xixi(mu,i1,nu,i)
              ENDDO lambda

              PREPARE Vxixi(mu,i1,nu,i) = Txixi(mu,i1,nu,i)
           ENDDO i1

           deallocate L2xxxi(mu,*,nu,i)
           allocate L3xxxi(*,mu,nu,i)

           DO lambda
              REQUEST Vxxxi(lambda,mu,nu,i) i
              L3xxxi(lambda,mu,nu,i) = Vxxxi(lambda,mu,nu,i)
           ENDDO lambda

           DO i1
              Tixxi(i1,mu,nu,i) = 0.0

              DO lambda
                 T1ixxi(i1,mu,nu,i) = L3xxxi(lambda,mu,nu,i)*ca(lambda,i1)
                 Tixxi(i1,mu,nu,i) += T1ixxi(i1,mu,nu,i)
              ENDDO lambda

              PREPARE Vixxi(i1,mu,nu,i) = Tixxi(i1,mu,nu,i)
           ENDDO i1

           deallocate L3xxxi(*,mu,nu,i)
#
     ENDPARDO mu, nu, i
#
#    ------------------------------------------------------------------------
#
     PARDO mu, nu, j
#
           allocate L1xxxj(mu,nu,*,j)
#
           DO lambda
#
              REQUEST Vxxxj(mu,nu,lambda,j) j
#
              L1xxxj(mu,nu,lambda,j) = Vxxxj(mu,nu,lambda,j)
#
           ENDDO lambda
#
           DO j1
#
              Txxjj(mu,nu,j1,j) = 0.0
#
              DO lambda
#
                 T1xxjj(mu,nu,j1,j) = L1xxxj(mu,nu,lambda,j)*ca(lambda,j1)
                 Txxjj(mu,nu,j1,j) += T1xxjj(mu,nu,j1,j)
#
              ENDDO lambda
#
              PREPARE Vxxjj(mu,nu,j1,j) = Txxjj(mu,nu,j1,j)
#
           ENDDO j1
#
           DO b
#
              Txxbj(mu,nu,b,j) = 0.0
#
              DO lambda
#
                 T1xxbj(mu,nu,b,j) = L1xxxj(mu,nu,lambda,j)*ca(lambda,b)
                 Txxbj(mu,nu,b,j) += T1xxbj(mu,nu,b,j)
#
              ENDDO lambda
#
              PREPARE Vxxbj(mu,nu,b,j) = Txxbj(mu,nu,b,j)
#
           ENDDO b
#
           DO i
#
              Txxij(mu,nu,i,j) = 0.0
#
              DO lambda
#
                 T1xxij(mu,nu,i,j) = L1xxxj(mu,nu,lambda,j)*ca(lambda,i)
                 Txxij(mu,nu,i,j) += T1xxij(mu,nu,i,j)
#
              ENDDO lambda
#
              PREPARE Vxxij(mu,nu,i,j) = Txxij(mu,nu,i,j)
#
           ENDDO i
#
           deallocate L1xxxj(mu,nu,*,j)
           allocate L2xxxj(mu,*,nu,j)

           DO lambda
              REQUEST Vxxxj(mu,lambda,nu,j) j
              L2xxxj(mu,lambda,nu,j) = Vxxxj(mu,lambda,nu,j)
           ENDDO lambda

           DO j1
              Txjxj(mu,j1,nu,j) = 0.0

              DO lambda
                 T1xjxj(mu,j1,nu,j) = L2xxxj(mu,lambda,nu,j)*ca(lambda,j1)
                 Txjxj(mu,j1,nu,j) += T1xjxj(mu,j1,nu,j)
              ENDDO lambda

              PREPARE Vxjxj(mu,j1,nu,j) = Txjxj(mu,j1,nu,j)
           ENDDO j1

           DO i
              Txixj(mu,i,nu,j) = 0.0

              DO lambda
                 T1xixj(mu,i,nu,j) = L2xxxj(mu,lambda,nu,j)*ca(lambda,i)
                 Txixj(mu,i,nu,j) += T1xixj(mu,i,nu,j)
              ENDDO lambda

              PREPARE Vxixj(mu,i,nu,j) = Txixj(mu,i,nu,j)
           ENDDO i

           deallocate L2xxxj(mu,*,nu,j)
           allocate L3xxxj(*,mu,nu,j)

           DO lambda
              REQUEST Vxxxj(lambda,mu,nu,j) j
              L3xxxj(lambda,mu,nu,j) = Vxxxj(lambda,mu,nu,j)
           ENDDO lambda

           DO j1
              Tjxxj(j1,mu,nu,j) = 0.0

              DO lambda
                 T1jxxj(j1,mu,nu,j) = L3xxxj(lambda,mu,nu,j)*ca(lambda,j1)
                 Tjxxj(j1,mu,nu,j) += T1jxxj(j1,mu,nu,j)
              ENDDO lambda

              PREPARE Vjxxj(j1,mu,nu,j) = Tjxxj(j1,mu,nu,j)
           ENDDO j1

           DO i
              Tixxj(i,mu,nu,j) = 0.0

              DO lambda
                 T1ixxj(i,mu,nu,j) = L3xxxj(lambda,mu,nu,j)*ca(lambda,i)
                 Tixxj(i,mu,nu,j) += T1ixxj(i,mu,nu,j)
              ENDDO lambda

              PREPARE Vixxj(i,mu,nu,j) = Tixxj(i,mu,nu,j)
           ENDDO i

           deallocate L3xxxj(*,mu,nu,j)
#
     ENDPARDO mu, nu, j
#
     execute server_barrier
#
#    ------------------------------------------------------------------------
#
     ENDPROC TRAN_TRAN2 
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
#    Perform the third N5 stage of the transformation.  
#
     PROC TRAN_TRAN3 
#
#    ------------------------------------------------------------------------
#
     PARDO mu, i, i1
#
           allocate Lxixi(mu,i,*,i1) 
           allocate Lxxii(mu,*,i,i1) 
           allocate Lixxi(i,mu,*,i1) 
#
           DO nu 
#
              REQUEST Vxixi(mu,i,nu,i1) i1 
              REQUEST Vxxii(mu,nu,i,i1) i1 
              REQUEST Vixxi(i,mu,nu,i1) i1 
#
              Lxixi(mu,i,nu,i1) = Vxixi(mu,i,nu,i1) 
              Lxxii(mu,nu,i,i1) = Vxxii(mu,nu,i,i1) 
              Lixxi(i,mu,nu,i1) = Vixxi(i,mu,nu,i1) 
#
           ENDDO nu 
#
           DO p 
#
              Txipi(mu,i,p,i1) = 0.0  
#
              DO nu  
#
                 T1xipi(mu,i,p,i1) = Lxixi(mu,i,nu,i1)*ca(nu,p)
                 Txipi(mu,i,p,i1) += T1xipi(mu,i,p,i1)  
#
              ENDDO nu  
#
              PREPARE Vxipi(mu,i,p,i1) = Txipi(mu,i,p,i1)
#
           ENDDO p 
#
           DO a
#
              Txaii(mu,a,i,i1) = 0.0 
              Tixai(i,mu,a,i1) = 0.0  
#
              DO nu 
#
                 T1xaii(mu,a,i,i1) = Lxxii(mu,nu,i,i1)*ca(nu,a)
                 Txaii(mu,a,i,i1) += T1xaii(mu,a,i,i1)  
#
                 T1ixai(i,mu,a,i1) = Lixxi(i,mu,nu,i1)*ca(nu,a)
                 Tixai(i,mu,a,i1) += T1ixai(i,mu,a,i1)  

              ENDDO nu 
#
              PREPARE Vxaii(mu,a,i,i1) = Txaii(mu,a,i,i1)
              PREPARE Vixai(i,mu,a,i1) = Tixai(i,mu,a,i1)
#
           ENDDO a
#
           DO b 
# 
              Txbii(mu,b,i,i1) = 0.0 
#
              DO nu  
#
                 T1xbii(mu,b,i,i1) = Lxxii(mu,nu,i,i1)*ca(nu,b)
                 Txbii(mu,b,i,i1) += T1xbii(mu,b,i,i1)  
#
              ENDDO nu  
#
              PREPARE Vxbii(mu,b,i,i1) = Txbii(mu,b,i,i1)
#
           ENDDO b 
#
           deallocate Lxixi(mu,i,*,i1) 
           deallocate Lxxii(mu,*,i,i1) 
           deallocate Lixxi(i,mu,*,i1) 
#
     ENDPARDO mu, i, i1
#
#    ------------------------------------------------------------------------
#
     PARDO mu, a, i
#
           allocate Lxxai(mu,*,a,i) 
#
           DO nu 
#
              REQUEST Vxxai(mu,nu,a,i) i 
              Lxxai(mu,nu,a,i) = Vxxai(mu,nu,a,i) 
#
           ENDDO nu 
#
           DO a1 
#
              Txaai(mu,a1,a,i) = 0.0  
#
              DO nu  
#
                 T1xaai(mu,a1,a,i) = Lxxai(mu,nu,a,i)*ca(nu,a1)
                 Txaai(mu,a1,a,i) += T1xaai(mu,a1,a,i)  
#
              ENDDO nu  
#
              PREPARE Vxaai(mu,a1,a,i) = Txaai(mu,a1,a,i)
#
           ENDDO a1 
#
           DO b 
#
              Txbai(mu,b,a,i) = 0.0 
#
              DO nu  
#
                 T1xbai(mu,b,a,i) = Lxxai(mu,nu,a,i)*ca(nu,b)
                 Txbai(mu,b,a,i) += T1xbai(mu,b,a,i)   
#
              ENDDO nu  
#
              PREPARE Vxbai(mu,b,a,i) = Txbai(mu,b,a,i)
#
           ENDDO b 
#
           deallocate Lxxai(mu,*,a,i) 
#
     ENDPARDO mu, a, i
#
#    ------------------------------------------------------------------------
#
     PARDO mu, j, j1
#
           allocate Lxjxj(mu,j,*,j1) 
           allocate Lxxjj(mu,*,j,j1) 
           allocate Ljxxj(j,mu,*,j1) 
#
           DO nu 
#
              REQUEST Vxjxj(mu,j,nu,j1) j1 
              REQUEST Vxxjj(mu,nu,j,j1) j1 
              REQUEST Vjxxj(j,mu,nu,j1) j1 
#
              Lxjxj(mu,j,nu,j1) = Vxjxj(mu,j,nu,j1) 
              Lxxjj(mu,nu,j,j1) = Vxxjj(mu,nu,j,j1) 
              Ljxxj(j,mu,nu,j1) = Vjxxj(j,mu,nu,j1) 
#
           ENDDO nu 
#
           DO q 
#
              Txjqj(mu,j,q,j1) = 0.0  
#
              DO nu  
#
                 T1xjqj(mu,j,q,j1) = Lxjxj(mu,j,nu,j1)*ca(nu,q)
                 Txjqj(mu,j,q,j1) += T1xjqj(mu,j,q,j1)  
#
              ENDDO nu  
#
              PREPARE Vxjqj(mu,j,q,j1) = Txjqj(mu,j,q,j1)
#
           ENDDO q 
#
           DO b
#
              Txbjj(mu,b,j,j1) = 0.0 
              Tjxbj(j,mu,b,j1) = 0.0  
#
              DO nu 
#
                 T1xbjj(mu,b,j,j1) = Lxxjj(mu,nu,j,j1)*ca(nu,b)
                 Txbjj(mu,b,j,j1) += T1xbjj(mu,b,j,j1)  
#
                 T1jxbj(j,mu,b,j1) = Ljxxj(j,mu,nu,j1)*ca(nu,b)
                 Tjxbj(j,mu,b,j1) += T1jxbj(j,mu,b,j1)  

              ENDDO nu 
#
              PREPARE Vxbjj(mu,b,j,j1) = Txbjj(mu,b,j,j1)
              PREPARE Vjxbj(j,mu,b,j1) = Tjxbj(j,mu,b,j1)
#
           ENDDO b
#
           DO a 
#
              Txajj(mu,a,j,j1) = 0.0  
#
              DO nu  
#
                 T1xajj(mu,a,j,j1) = Lxxjj(mu,nu,j,j1)*ca(nu,a)
                 Txajj(mu,a,j,j1) += T1xajj(mu,a,j,j1)  
#
              ENDDO nu  
#
              PREPARE Vxajj(mu,a,j,j1) = Txajj(mu,a,j,j1)
#
           ENDDO a 
#
           deallocate Lxjxj(mu,j,*,j1) 
           deallocate Lxxjj(mu,*,j,j1) 
           deallocate Ljxxj(j,mu,*,j1) 
#
     ENDPARDO mu, j, j1
#
#    ------------------------------------------------------------------------
#
     PARDO mu, b, j
#
           allocate Lxxbj(mu,*,b,j) 
#
           DO nu 
#
              REQUEST Vxxbj(mu,nu,b,j) j 
              Lxxbj(mu,nu,b,j) = Vxxbj(mu,nu,b,j) 
#
           ENDDO nu 
#
           DO b1 
#
              Txbbj(mu,b1,b,j) = 0.0  
#
              DO nu  
#
                 T1xbbj(mu,b1,b,j) = Lxxbj(mu,nu,b,j)*ca(nu,b1)
                 Txbbj(mu,b1,b,j) += T1xbbj(mu,b1,b,j)  
#
              ENDDO nu  
#
              PREPARE Vxbbj(mu,b1,b,j) = Txbbj(mu,b1,b,j)
#
           ENDDO b1 
#
           DO a 
#
              Txabj(mu,a,b,j) = 0.0  
#
              DO nu  
#
                 T1xabj(mu,a,b,j) = Lxxbj(mu,nu,b,j)*ca(nu,a)
                 Txabj(mu,a,b,j) += T1xabj(mu,a,b,j)  
#
              ENDDO nu  
#
              PREPARE Vxabj(mu,a,b,j) = Txabj(mu,a,b,j)
#
           ENDDO a 
#
           deallocate Lxxbj(mu,*,b,j)  
#
     ENDPARDO mu, b, j
#
#    ------------------------------------------------------------------------
#
     PARDO mu, i, j
#
           allocate Lxixj(mu,i,*,j) 
           allocate Lixxj(i,mu,*,j) 
#
           DO nu 
#
              REQUEST Vxixj(mu,i,nu,j) j 
              REQUEST Vixxj(i,mu,nu,j) j 
#
              Lxixj(mu,i,nu,j) = Vxixj(mu,i,nu,j) 
              Lixxj(i,mu,nu,j) = Vixxj(i,mu,nu,j) 
#
           ENDDO nu 
#
           DO q 
#
              Txiqj(mu,i,q,j) = 0.0  
#
              DO nu  
#
                 T1xiqj(mu,i,q,j) = Lxixj(mu,i,nu,j)*ca(nu,q)
                 Txiqj(mu,i,q,j) += T1xiqj(mu,i,q,j)  
#
              ENDDO nu  
#
              PREPARE Vxiqj(mu,i,q,j) = Txiqj(mu,i,q,j)
#
           ENDDO q 
#
           DO b 
#
              Tixbj(i,mu,b,j) = 0.0  
#
              DO nu  
#
                 T1ixbj(i,mu,b,j) = Lixxj(i,mu,nu,j)*ca(nu,b)
                 Tixbj(i,mu,b,j) += T1ixbj(i,mu,b,j)  
#
              ENDDO nu  
#
              PREPARE Vixbj(i,mu,b,j) = Tixbj(i,mu,b,j)
#
           ENDDO b 
#
           deallocate Lxixj(mu,i,*,j) 
           deallocate Lixxj(i,mu,*,j) 
#
     ENDPARDO mu, i, j
#
#    ------------------------------------------------------------------------
#    
     execute server_barrier
#
     ENDPROC TRAN_TRAN3 
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
     PROC TRAN_TRAN4 
#
#    ------------------------------------------------------------------------
#
     PARDO p, i, i1
#
           allocate Lxipi(*,i,p,i1) 
#
           DO mu 
#
              REQUEST Vxipi(mu,i,p,i1) i1 
              REQUEST Vxipi(mu,i1,p,i) i 
              Lxipi(mu,i,p,i1)  = Vxipi(mu,i,p,i1) 
              Txipi(mu,i,p,i1)  = Vxipi(mu,i1,p,i) 
              Lxipi(mu,i,p,i1) -= Txipi(mu,i,p,i1) 
#
           ENDDO mu  
#
           DO p1 
#
              Tpipi(p1,i,p,i1) = 0.0  
#
              DO mu  
#
                 T1pipi(p1,i,p,i1) = Lxipi(mu,i,p,i1)*ca(mu,p1)
                 Tpipi(p1,i,p,i1) += T1pipi(p1,i,p,i1)  
#
              ENDDO mu  
#
              PREPARE VSpipi(p1,i,p,i1) = Tpipi(p1,i,p,i1) 
#
           ENDDO p1 
#
           deallocate Lxipi(*,i,p,i1) 
#
     ENDPARDO p, i, i1
#
     PARDO a, i, i1
#
           allocate Lxaii(*,a,i,i1) 
           allocate Lixai(i,*,a,i1) 
#
           DO mu 
#
              REQUEST Vxaii(mu,a,i,i1) i1 
              REQUEST Vixai(i,mu,a,i1) i1 
#
              Lxaii(mu,a,i,i1) = Vxaii(mu,a,i,i1)  
              Lixai(i,mu,a,i1) = Vixai(i,mu,a,i1) 
#
           ENDDO mu 
#
           DO a1 
#
              Taaii(a1,a,i,i1) = 0.0  
#
              DO mu  
#
                 T1aaii(a1,a,i,i1) = Lxaii(mu,a,i,i1)*ca(mu,a1)
                 Taaii(a1,a,i,i1) += T1aaii(a1,a,i,i1)  
#
              ENDDO mu  
#
              PREPARE Vaaii(a1,a,i,i1) = Taaii(a1,a,i,i1)
#
           ENDDO a1 
#
           deallocate Lxaii(*,a,i,i1) 
#
           DO a1 
#
              Tiaai(i,a1,a,i1) = 0.0  
#
              DO mu  
#
                 T1iaai(i,a1,a,i1) = Lixai(i,mu,a,i1)*ca(mu,a1)
                 Tiaai(i,a1,a,i1) += T1iaai(i,a1,a,i1)   
#
              ENDDO mu  
#
              PREPARE Viaai(i,a1,a,i1) = Tiaai(i,a1,a,i1)
#
           ENDDO a1 
#
           deallocate Lixai(i,*,a,i1) 
#
     ENDPARDO a, i, i1
# 
     PARDO a, a1, i
#
           allocate L1xaai(*,a,a1,i) 
#
           DO mu 
#
              REQUEST Vxaai(mu,a,a1,i) i 
#
              L1xaai(mu,a,a1,i)  = Vxaai(mu,a,a1,i)
#
           ENDDO mu 
#
           DO a2  
#
              Taaai(a2,a,a1,i) = 0.0 
#
              DO mu 
#
                 T1aaai(a2,a,a1,i) = L1xaai(mu,a,a1,i)*ca(mu,a2)
                 Taaai(a2,a,a1,i) += T1aaai(a2,a,a1,i)  
#
              ENDDO mu 
#
              T1aaai(a1,a,a2,i)           = Taaai(a2,a,a1,i) 
              T1aaai(a1,a,a2,i)          *= -1.0  
              PREPARE Vaaai (a2,a,a1,i)  += Taaai (a2,a,a1,i)
              PREPARE VSaaai(a2,a,a1,i)  += Taaai (a2,a,a1,i)
              PREPARE VSaaai(a1,a,a2,i)  += T1aaai(a1,a,a2,i)
#
           ENDDO a2  
#
           deallocate L1xaai(*,a,a1,i) 
#
     ENDPARDO a, a1, i
# 
     PARDO q, j, j1
#
           allocate Lxjqj(*,j,q,j1) 
#
           DO mu  
#
              REQUEST Vxjqj(mu,j,q,j1) j1 
              REQUEST Vxjqj(mu,j1,q,j) j1 
              Lxjqj(mu,j,q,j1)  = Vxjqj(mu,j,q,j1) 
              Txjqj(mu,j,q,j1)  = Vxjqj(mu,j1,q,j) 
              Lxjqj(mu,j,q,j1) -= Txjqj(mu,j,q,j1) 
#
           ENDDO mu  
#
           DO q1 
#
              Tqjqj(q1,j,q,j1) = 0.0 
#
              DO mu  
#
                 T1qjqj(q1,j,q,j1)      = Lxjqj(mu,j,q,j1)*ca(mu,q1)
                 Tqjqj(q1,j,q,j1)      += T1qjqj(q1,j,q,j1) 
#
              ENDDO mu  
#
              PREPARE VSqjqj(q1,j,q,j1) = Tqjqj(q1,j,q,j1)
#
           ENDDO q1 
#
           deallocate Lxjqj(*,j,q,j1) 
#
     ENDPARDO q, j, j1
#
     PARDO b, j, j1
#
           allocate Lxbjj(*,b,j,j1) 
           allocate Ljxbj(j,*,b,j1) 
#
           DO mu 
#
              REQUEST Vxbjj(mu,b,j,j1) j1 
              REQUEST Vjxbj(j,mu,b,j1) j1 
#
              Lxbjj(mu,b,j,j1) = Vxbjj(mu,b,j,j1) 
              Ljxbj(j,mu,b,j1) = Vjxbj(j,mu,b,j1) 
#
           ENDDO mu 
#
           DO b1 
#
              Tbbjj(b1,b,j,j1) = 0.0 
#
              DO mu 
#
                 T1bbjj(b1,b,j,j1) = Lxbjj(mu,b,j,j1)*ca(mu,b1)
                 Tbbjj(b1,b,j,j1) += T1bbjj(b1,b,j,j1)  
#
              ENDDO mu  
#
              PREPARE Vbbjj(b1,b,j,j1) = Tbbjj(b1,b,j,j1)
#
           ENDDO b1 
#
           deallocate Lxbjj(*,b,j,j1) 
#
           DO b1 
#
              Tjbbj(j,b1,b,j1) = 0.0 
#
              DO mu  
#
                 T1jbbj(j,b1,b,j1) = Ljxbj(j,mu,b,j1)*ca(mu,b1)
                 Tjbbj(j,b1,b,j1) += T1jbbj(j,b1,b,j1)  
#
              ENDDO mu  
#
              PREPARE Vjbbj(j,b1,b,j1) = Tjbbj(j,b1,b,j1)
#
           ENDDO b1 
#
           deallocate Ljxbj(j,*,b,j1) 
#
     ENDPARDO b, j, j1
#
     PARDO b, i, i1
#
           allocate Lxbii(*,b,i,i1) 
#
           DO mu  
#
              REQUEST Vxbii(mu,b,i,i1) i1 
              Lxbii(mu,b,i,i1) = Vxbii(mu,b,i,i1) 
#
           ENDDO mu  
#
           DO b1 
#
              Tbbii(b1,b,i,i1) = 0.0 
#
              DO mu  
#
                 T1bbii(b1,b,i,i1) = Lxbii(mu,b,i,i1)*ca(mu,b1)
                 Tbbii(b1,b,i,i1) += T1bbii(b1,b,i,i1)  
#
              ENDDO mu  
#
              PREPARE Vbbii(b1,b,i,i1) = Tbbii(b1,b,i,i1)
#
           ENDDO b1 
#
           deallocate Lxbii(*,b,i,i1) 
#
     ENDPARDO b, i, i1
#
     PARDO b, i, i1
#
           allocate Lxbii(*,b,i,i1) 
#
           DO mu 
#
              REQUEST Vxbii(mu,b,i,i1) i1 
              Lxbii(mu,b,i,i1) = Vxbii(mu,b,i,i1)  
#
           ENDDO mu 
#
           DO j 
#
              Tjbii(j,b,i,i1) = 0.0 
#
              DO mu 
#
                 T1jbii(j,b,i,i1) = Lxbii(mu,b,i,i1)*ca(mu,j)
                 Tjbii(j,b,i,i1) += T1jbii(j,b,i,i1)  
#
              ENDDO mu  
#
              PREPARE Vjbii(j,b,i,i1) = Tjbii(j,b,i,i1)
#
           ENDDO j 
#
           deallocate Lxbii(*,b,i,i1) 
#
     ENDPARDO b, i, i1
#
     PARDO b, a, i
#
           allocate Lxbai(*,b,a,i) 
#
           DO mu  
#
              REQUEST Vxbai(mu,b,a,i) i 
              Lxbai(mu,b,a,i) = Vxbai(mu,b,a,i) 
#
           ENDDO mu  
#
           DO b1 
#
              Tbbai(b1,b,a,i) = 0.0 
#
              DO mu  
#
                 T1bbai(b1,b,a,i) = Lxbai(mu,b,a,i)*ca(mu,b1)
                 Tbbai(b1,b,a,i) += T1bbai(b1,b,a,i)  
#
              ENDDO mu  
#
              PREPARE Vbbai(b1,b,a,i) = Tbbai(b1,b,a,i)
#
           ENDDO b1 
#
           deallocate Lxbai(*,b,a,i) 
#
     ENDPARDO b, a, i
#
     PARDO q, i, j
#
           allocate Lxiqj(*,i,q,j) 
#
           DO mu  
#
              REQUEST Vxiqj(mu,i,q,j) j 
              Lxiqj(mu,i,q,j) = Vxiqj(mu,i,q,j) 
#
           ENDDO mu  
#
           DO p 
#
              Tpiqj(p,i,q,j) = 0.0 
#
              DO mu  
#
                 T1piqj(p,i,q,j) = Lxiqj(mu,i,q,j)*ca(mu,p)
                 Tpiqj(p,i,q,j) += T1piqj(p,i,q,j)  
#
              ENDDO mu  
#
              PREPARE Vpiqj(p,i,q,j) = Tpiqj(p,i,q,j)
#
           ENDDO p 
#
           deallocate Lxiqj(*,i,q,j) 
#
     ENDPARDO q, i, j
#
     PARDO a, j, j1
#
           allocate Lxajj(*,a,j,j1) 
#
           DO mu  
#
              REQUEST Vxajj(mu,a,j,j1) j1 
              Lxajj(mu,a,j,j1) = Vxajj(mu,a,j,j1)  
#
           ENDDO mu  
#
           DO a1 
#
              Taajj(a1,a,j,j1) = 0.0 
#
              DO mu  
#
                 T1aajj(a1,a,j,j1) = Lxajj(mu,a,j,j1)*ca(mu,a1)
                 Taajj(a1,a,j,j1) += T1aajj(a1,a,j,j1)  
#
              ENDDO mu  
#
              PREPARE Vaajj(a1,a,j,j1) = Taajj(a1,a,j,j1)
#
           ENDDO a1 
#
           deallocate Lxajj(*,a,j,j1) 
#
     ENDPARDO a, j, j1
#
     PARDO b, i, j
#
           allocate Lixbj(i,*,b,j) 
#
           DO mu 
#
              REQUEST Vixbj(i,mu,b,j) j 
              Lixbj(i,mu,b,j) = Vixbj(i,mu,b,j) 
#
           ENDDO mu 
#
           DO a 
#
              Tiabj(i,a,b,j) = 0.0 
#
              DO mu 
#
                 T1iabj(i,a,b,j) = Lixbj(i,mu,b,j)*ca(mu,a)
                 Tiabj(i,a,b,j) += T1iabj(i,a,b,j)  
#
              ENDDO mu 
#
              PREPARE Viabj(i,a,b,j) += Tiabj(i,a,b,j)
#
           ENDDO a 
#
           deallocate Lixbj(i,*,b,j) 
#
     ENDPARDO b, i, j
#
     PARDO a, b, j
#
           allocate Lxabj(*,a,b,j) 
#
           DO mu  
#
              REQUEST Vxabj(mu,a,b,j) j 
              Lxabj(mu,a,b,j) = Vxabj(mu,a,b,j) 
#
           ENDDO mu  
#
           DO a1 
#
              Taabj(a1,a,b,j) = 0.0 
#
              DO mu  
#
                 T1aabj(a1,a,b,j) = Lxabj(mu,a,b,j)*ca(mu,a1)
                 Taabj(a1,a,b,j) += T1aabj(a1,a,b,j)  
#
              ENDDO mu  
#
              PREPARE Vaabj(a1,a,b,j) = Taabj(a1,a,b,j)
#
           ENDDO a1 
#
           deallocate Lxabj(*,a,b,j) 
#
     ENDPARDO a, b, j
#
#    ------------------------------------------------------------------------
#
     ENDPROC TRAN_TRAN4 
#
#    ------------------------------------------------------------------------
#

#------------------------------------------------------------------------ 
     PROC TRAN_UHF
#        CALL COMP_INTEGRALS # --> compute integrals and put into served array 
         CALL TRAN_TRAN2     # --> performs the first two stages of the 
                             #     two-electron integral transformation.  
         CALL TRAN_TRAN3     # --> performs the third stage   
                             #     two-electron integral transformation.  
         CALL TRAN_TRAN4     # --> performs the fourth stage of the  
                             #     two-electron integral transformation.  
     ENDPROC TRAN_UHF
#------------------------------------------------------------------------ 




#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
      PROC HBAR_AB
#     ------------
#
#     alpha-alpha spin component first. 
#     --------------------------------- 
#
      PARDO a, a1 
#
            tpp(a,a1) = fock_a(a,a1)       
#
            DO i 
               t1pp(a,a1) = St1a(a,i)*fock_a(i,a1) 
               tpp(a,a1) -= t1pp(a,a1) 
            ENDDO i 
#
            LHBAR_aa(a,a1) += tpp(a,a1) 
#
      ENDPARDO a, a1 
#
      PARDO a, a1, a2, i  
#
            REQUEST              VSaaai(a1,a,a2,i) i  
            t1pp(a,a1)         = VSaaai(a1,a,a2,i)*St1a(a2,i) 
#
            LHBAR_aa(a,a1)                 += t1pp(a,a1) 
#
            DO i1  
                t3iaai(i1,a2,a,i)         = VSaaai(a1,a,a2,i)*St1a(a1,i1)
                PREPARE NIAAI(i1,a2,a,i) += t3iaai(i1,a2,a,i)
             ENDDO i1  
#
      ENDPARDO a, a1, a2, i  
#
      PARDO a, a1, b, j  
#
            REQUEST              Vaabj(a1,a,b,j) j  
            t1pp(a,a1)         = Vaabj(a1,a,b,j)*St1b(b,j) 
            tppqq(a,a1,j,b)    = Vaabj(a1,a,b,j)
#
            LHBAR_aa(a,a1)                += t1pp(a,a1) 
            PREPARE HBAR_AIBC_aabb(a,a1,j,b) += tppqq(a,a1,j,b) 
#
      ENDPARDO a, a1, b, j  
#
      PARDO a, i1, a2, i  
            REQUEST             T2old_aa(a,i,a2,i1) i1 
            tai(a2,i1)        = St1a(a2,i1) 
            t1ai(a2,i)        = St1a(a2,i) 
#
            tpppp(a,i,a2,i1)  = T2old_aa(a,i,a2,i1) 
            t1pppp(a,i,a2,i1) = St1a(a,i)^tai(a2,i1) 
            t2pppp(a,i,a2,i1) = St1a(a,i1)^t1ai(a2,i) 
            tpppp(a,i,a2,i1) += t1pppp(a,i,a2,i1) 
            tpppp(a,i,a2,i1) -= t2pppp(a,i,a2,i1) 
#
            DO a1 
               REQUEST              VSpipi(a2,i1,a1,i) i   
               t1pp(a,a1)         = tpppp(a,i,a2,i1)*VSpipi(a2,i1,a1,i) 
               t1pp(a,a1)        *= -0.5  
               LHBAR_aa(a,a1) += t1pp(a,a1) 
            ENDDO a1 
#
      ENDPARDO a, i1, a2, i  
#
      PARDO a, i, b, j  
#
            REQUEST           T2old_ab(a,i,b,j) j 
            tppqq(a,i,b,j)  = T2old_ab(a,i,b,j) 
            t1ppqq(a,i,b,j) = St1a(a,i)^St1b(b,j) 
            tppqq(a,i,b,j) += t1ppqq(a,i,b,j) 
#
            DO a1  
#
               REQUEST              Vpiqj(a1,i,b,j) i   
               t1pp(a,a1)         = tppqq(a,i,b,j)*Vpiqj(a1,i,b,j) 
               t1pp(a,a1)        *= -1.0  
               LHBAR_aa(a,a1) += t1pp(a,a1) 
#
            ENDDO a1  
#
      ENDPARDO a, i, b, j  
#
#     alpha-alpha spin component done. 
#     -------------------------------- 
#
#     beta-beta spin component next. 
#     ------------------------------ 
#
#     beta-beta spin component done. 
#     ------------------------------ 

      execute server_barrier 
      DO a 
      DO a1 
         PUT HBAR_aa(a,a1) += LHBAR_aa(a,a1) 
      ENDDO a1 
      ENDDO a 
      execute server_barrier 
      DO a 
      DO a1 
         GET HBAR_aa(a,a1) 
         LHBAR_aa(a,a1) = HBAR_aa(a,a1) 
      ENDDO a1 
      ENDDO a 
#
      ENDPROC HBAR_AB
#     ---------------
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
      PROC HBAR_IJ
#     ------------
#
#     alpha-alpha spin component first. 
#     --------------------------------- 
#
      PARDO i, i1 
#
            tpp(i1,i) = fock_a(i1,i) 
#
            DO a 
               t1pp(i1,i) = fock_a(i1,a)*St1a(a,i) 
               tpp(i1,i) += t1pp(i1,i) 
            ENDDO a 
#
            DO a 
            DO i2 
               REQUEST      VSpipi(a,i2,i,i1) i1 
               t1pp(i1,i) = VSpipi(a,i2,i,i1)*St1a(a,i2)  
               tpp(i1,i) += t1pp(i1,i) 
            ENDDO i2 
            ENDDO a 
#
            DO b 
            DO j 
               REQUEST      Vpiqj(i,i1,b,j) i1 
               t1pp(i1,i) = Vpiqj(i,i1,b,j)*St1b(b,j)  
               tpp(i1,i) += t1pp(i1,i) 
            ENDDO j 
            ENDDO b 
#
            DO a 
            DO a1 
            DO i2 
               REQUEST             T2old_aa(a,i,a1,i2) i2 
               REQUEST             VSpipi(a,i1,a1,i2) i2  
#
               tpp(a1,i2)        = St1a(a1,i2)
               t1pp(a1,i)        = St1a(a1,i) 
#
               tpppp(a,i,a1,i2)  = T2old_aa(a,i,a1,i2)
               t1pppp(a,i,a1,i2) = St1a(a,i)^tpp(a1,i2) 
               t2pppp(a,i,a1,i2) = St1a(a,i2)^t1pp(a1,i) 
               tpppp(a,i,a1,i2) += t1pppp(a,i,a1,i2) 
               tpppp(a,i,a1,i2) -= t2pppp(a,i,a1,i2) 
#
               t1pp(i1,i)        = tpppp(a,i,a1,i2)*VSpipi(a,i1,a1,i2) 
               t1pp(i1,i)       *= 0.5 
               tpp(i1,i)        += t1pp(i1,i) 
            ENDDO i2 
            ENDDO a1 
            ENDDO a 
#
            DO a 
            DO b 
            DO j 
               REQUEST           T2old_ab(a,i,b,j) j 
               REQUEST           Vpiqj(a,i1,b,j) j  
#
               tppqq(a,i,b,j)  = T2old_ab(a,i,b,j)
               t1ppqq(a,i,b,j) = St1a(a,i)^St1b(b,j) 
               tppqq(a,i,b,j) += t1ppqq(a,i,b,j) 
#
               t1pp(i1,i)      = tppqq(a,i,b,j)*Vpiqj(a,i1,b,j) 
               tpp(i1,i)      += t1pp(i1,i) 
            ENDDO j 
            ENDDO b 
            ENDDO a 
#
            LHBAR_ii(i1,i) = tpp(i1,i) 
#
      ENDPARDO i, i1 
#
#     done alpha-alpha spin component. 
#     -------------------------------- 
#
      execute server_barrier 
      DO i 
      DO i1 
         PUT HBAR_ii(i,i1) += LHBAR_ii(i,i1) 
      ENDDO i1 
      ENDDO i 
      execute server_barrier 
      DO i 
      DO i1 
         GET              HBAR_ii(i,i1) 
         LHBAR_ii(i,i1) = HBAR_ii(i,i1)  
      ENDDO i1 
      ENDDO i 
#
#     done beta-beta spin component. 
#     ------------------------------ 
#
      ENDPROC HBAR_IJ
#     ---------------
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
      PROC HBAR_IB
#     ------------
#
#     alpha-alpha spin component first. 
#     --------------------------------- 
#
      PARDO i, a 
#
            tpp(i,a) = fock_a(i,a) 
#
            DO a1 
            DO i1 
               REQUEST     VSpipi(a,i,a1,i1) i1 
               t1pp(i,a) = VSpipi(a,i,a1,i1)*St1a(a1,i1) 
               tpp(i,a) += t1pp(i,a) 
            ENDDO i1 
            ENDDO a1 
#
            DO b 
            DO j 
               REQUEST     Vpiqj(a,i,b,j) j 
               t1pp(i,a) = Vpiqj(a,i,b,j)*St1b(b,j) 
               tpp(i,a) += t1pp(i,a) 
            ENDDO j 
            ENDDO b 
#
            LHBAR_ia(i,a) = tpp(i,a) 
#
      ENDPARDO i, a 
#
#     done alpha-alpha spin component. 
#     -------------------------------- 
#
#     beta-beta spin component next. 
#     ------------------------------ 
#
      PARDO j, b 
#
            tqq(j,b) = fock_a(j,b) 
#
            DO b1 
            DO j1 
               REQUEST     VSqjqj(b,j,b1,j1) j1 
               t1qq(j,b) = VSqjqj(b,j,b1,j1)*St1b(b1,j1) 
               tqq(j,b) += t1qq(j,b) 
            ENDDO j1 
            ENDDO b1 
#
            DO a 
            DO i 
               REQUEST     Vpiqj(a,i,b,j) j 
               t1qq(j,b) = Vpiqj(a,i,b,j)*St1a(a,i) 
               tqq(j,b) += t1qq(j,b) 
            ENDDO i 
            ENDDO a 
#
            LHBAR_jb(j,b) = tqq(j,b) 
#
      ENDPARDO j, b 
#
#     done alpha-alpha spin component. 
#     -------------------------------- 

      execute server_barrier 
      DO a 
      DO i 
         PUT HBAR_ia(i,a) += LHBAR_ia(i,a) 
      ENDDO i 
      ENDDO a 
      DO b 
      DO j 
         PUT HBAR_jb(j,b) += LHBAR_jb(j,b) 
      ENDDO j 
      ENDDO b 
      execute server_barrier 
      DO a 
      DO i 
         GET HBAR_ia(i,a) 
         LHBAR_ia(i,a) = HBAR_ia(i,a)  
      ENDDO i 
      ENDDO a 
      DO b 
      DO j 
         GET HBAR_jb(j,b) 
         LHBAR_jb(j,b) = HBAR_jb(j,b)  
      ENDDO j 
      ENDDO b 
#
      ENDPROC HBAR_IB
#     ---------------
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
      PROC HBAR_IJKL  
#     --------------
#
#     (alpha,alpha,alpha,alpha) spin component. 
#     ----------------------------------------- 
#
      PARDO i, i2, i1, i3 
#
            REQUEST             VSpipi(i,i1,i2,i3) i3 
            tpppp(i,i1,i2,i3) = VSpipi(i,i1,i2,i3) 
#
            DO a
               REQUEST              VSpipi(i1,i,a,i2) i2  
               t1pppp(i,i1,i2,i3) = VSpipi(i1,i,a,i2)*St1a(a,i3) 
               tpppp(i,i1,i2,i3) += t1pppp(i,i1,i2,i3) 
            ENDDO a
#
            DO a
               REQUEST              VSpipi(i3,i,a,i2) i2  
               t1pppp(i,i1,i2,i3) = VSpipi(i3,i,a,i2)*St1a(a,i1) 
               tpppp(i,i1,i2,i3) -= t1pppp(i,i1,i2,i3) 
            ENDDO a
#
            DO a 
            DO a1 
               REQUEST              VSpipi(a,i,a1,i2) i2 
               REQUEST              T2old_aa(a,i1,a1,i3) i3 
#
               tpp(a1,i3)         = St1a(a1,i3) 
               t1pp(a1,i1)        = St1a(a1,i1) 
#
               t1pppp(a,i1,a1,i3)  = T2old_aa(a,i1,a1,i3) 
               t2pppp(a,i1,a1,i3) = St1a(a,i1)^tpp(a1,i3)  
               t3pppp(a,i1,a1,i3) = St1a(a,i3)^t1pp(a1,i1)  
               t1pppp(a,i1,a1,i3) += t2pppp(a,i1,a1,i3) 
               t1pppp(a,i1,a1,i3) -= t3pppp(a,i1,a1,i3) 
#
               t4pppp(i,i1,i2,i3) = VSpipi(a,i,a1,i2)*t1pppp(a,i1,a1,i3) 
               t4pppp(i,i1,i2,i3) *= 0.5 
               tpppp(i,i1,i2,i3)  += t4pppp(i,i1,i2,i3) 
            ENDDO a1 
            ENDDO a 
#
            PREPARE HBAR_iiii(i,i1,i2,i3) = tpppp(i,i1,i2,i3) 
#
      ENDPARDO i, i2, i1, i3 
#
#     done (alpha,alpha,alpha,alpha) spin component. 
#     ---------------------------------------------- 
#
#     (beta,beta,beta,beta) spin component. 
#     ------------------------------------- 
#
#     done (beta,beta,beta,beta) spin component. 
#     ------------------------------------------ 
#
#     (alpha,alpha,beta,beta) spin component. 
#     --------------------------------------- 
#
      PARDO i, i1, j2, j3 
#
            REQUEST             Vpiqj(i,i1,j2,j3) j3 
            tppqq(i,i1,j2,j3) = Vpiqj(i,i1,j2,j3) 
#
            DO b
               REQUEST              Vpiqj(i1,i,b,j2) j2  
               t1ppqq(i,i1,j2,j3) = Vpiqj(i1,i,b,j2)*St1b(b,j3) 
               tppqq(i,i1,j2,j3) += t1ppqq(i,i1,j2,j3) 
            ENDDO b
#
            DO a
               REQUEST              Vpiqj(a,i,j2,j3) j2  
               t1ppqq(i,i1,j2,j3) = Vpiqj(a,i,j2,j3)*St1a(a,i1) 
               tppqq(i,i1,j2,j3) += t1ppqq(i,i1,j2,j3) 
            ENDDO a
#
            DO a 
            DO b 
               REQUEST             Vpiqj(a,i,b,j2) j2 
               REQUEST             T2old_ab(a,i1,b,j3) j3 
#
               t1ppqq(a,i1,b,j3)  = T2old_ab(a,i1,b,j3) 
               t2ppqq(a,i1,b,j3)  = St1a(a,i1)^St1b(b,j3)  
               t1ppqq(a,i1,b,j3) += t2ppqq(a,i1,b,j3) 
#
               t3ppqq(i,i1,j2,j3) = Vpiqj(a,i,b,j2)*t1ppqq(a,i1,b,j3) 
               tppqq(i,i1,j2,j3) += t3ppqq(i,i1,j2,j3) 
            ENDDO b 
            ENDDO a 
#
            PREPARE HBAR_iijj(i,i1,j2,j3) = tppqq(i,i1,j2,j3) 
#
      ENDPARDO i, i1, j2, j3 
#
#     done (alpha,alpha,beta,beta) spin component. 
#     -------------------------------------------- 
#
      ENDPROC HBAR_IJKL 
#     -----------------
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
#     -----------------
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
      PROC HBAR_AIBC   
#     --------------
#
#     There are four spin cases to compute:
#     1. H^{ai}_{bc) --> HBAR_AIBC_aaaa  
#     2. H^{AI}_{BC) --> HBAR_AIBC_bbbb  
#     3. H^{Ai}_{Bc) --> HBAR_AIBC_bbaa  
#     4. H^{aI}_{bC) --> HBAR_AIBC_aabb  
#
#     Note that since I 'always' store arrays in (11|22) form the 
#     notation, although valid, is slightly confusing. The 
#     storage pattern is therefore array(a,b,i,c).   
#
#    ------------------------------------------------------------------------
#
#     AAAA spin combination. 
#     ---------------------- 
#
#     BBBB spin combination. 
#     ---------------------- 
#
#     AABB spin combination. 
#     ---------------------- 
#
      PARDO i1, a1, b2, j 
#
            REQUEST Vpiqj(a1,i1,b2,j) j 
#
            DO a 
               t1ppqq(a,a1,j,b2)                  = Vpiqj(a1,i1,b2,j)*St1a(a,i1) 
               t1ppqq(a,a1,j,b2)                 *= -1.0  
               PREPARE HBAR_AIBC_aabb(a,a1,j,b2) += t1ppqq(a,a1,j,b2) 
            ENDDO a 
#
      ENDPARDO i1, a1, b2, j 
#
#     BBAA spin combination. 
#     ---------------------- 
#
      ENDPROC HBAR_AIBC   
#     -----------------
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
      PROC HBAR_JKIA   
#     --------------
#
#     There are four spin cases to compute:
#     1. H^{jk}_{ia) --> HBAR_JKIA_aaaa  
#     2. H^{JK}_{IA) --> HBAR_JKIA_bbbb  
#     3. H^{Jk}_{Ia) --> HBAR_JKIA_bbaa  
#     4. H^{jK}_{iA) --> HBAR_JKIA_aabb  
#
#     Note that since I 'always' store arrays in (11|22) form the 
#     notation, although valid, is slightly confusing. The 
#     storage pattern is therefore array(a,b,i,c).   
#
#    ------------------------------------------------------------------------
#
#     AAAA spin combination. 
#     ---------------------- 
#
      PARDO i, i1, i2, a 
#
            REQUEST            VSpipi(i,i1,a,i2) i  
            tpppp(i,i1,a,i2) = VSpipi(i,i1,a,i2) 
#
            DO a1 
               REQUEST             VSpipi(a1,i1,a,i2) a  
               t1pppp(i,i1,a,i2) = VSpipi(a1,i1,a,i2)*St1a(a1,i) 
               tpppp(i,i1,a,i2) += t1pppp(i,i1,a,i2) 
            ENDDO a1 
#
            t1pppp(i1,i,i2,a)                 = tpppp(i,i1,a,i2) 
            PREPARE HBAR_JKIA_aaaa(i1,i,i2,a) = t1pppp(i1,i,i2,a) 
#
      ENDPARDO i, i1, i2, a 
#
#     BBBB spin combination. 
#     ---------------------- 
#
#     AABB spin combination. 
#     ---------------------- 
#
      PARDO i, i1, j2, b 
#
            REQUEST            Vpiqj(i,i1,b,j2) i  
            tppqq(i,i1,b,j2) = Vpiqj(i,i1,b,j2) 
#
            DO a1 
               REQUEST             Vpiqj(a1,i1,b,j2) b  
               t1ppqq(i,i1,b,j2) = Vpiqj(a1,i1,b,j2)*St1a(a1,i) 
               tppqq(i,i1,b,j2) += t1ppqq(i,i1,b,j2) 
            ENDDO a1 
#
            t1ppqq(i1,i,j2,b)                 = tppqq(i,i1,b,j2) 
            PREPARE HBAR_JKIA_aabb(i1,i,j2,b) = t1ppqq(i1,i,j2,b) 
#
      ENDPARDO i, i1, j2, b 
#
#     BBAA spin combination. 
#     ---------------------- 
#
      ENDPROC HBAR_JKIA   
#     -----------------
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
      PROC HBAR_IAJK   
#     --------------
#
#     There are four spin cases to compute:
#     1. H^{ia)_{jk} --> HBAR_IAJK_aaaa  
#     1. H^{IA)_{JK} --> HBAR_IAJK_bbbb  
#     1. H^{Ia)_{Jk} --> HBAR_IAJK_bbaa  
#     1. H^{iA)_{jK} --> HBAR_IAJK_aabb  
#
#     Note that since I 'always' store arrays in (11|22) form the 
#     notation, although valid, is slightly confusing. The 
#     storage pattern is therefore array(a,b,i,c).   
#
#    ------------------------------------------------------------------------
#
#     Form the two-particle intermediates needed. 
#     ------------------------------------------- 
#
      PARDO i1, a1, a, i
#
            REQUEST             Viaai(i1,a1,a,i) i # +
            REQUEST             Vaaii(a,a1,i1,i) i # -
            Tiaai(i1,a1,a,i)  = Vaaii(a,a1,i1,i)
            Tiaai(i1,a1,a,i) -= Viaai(i1,a1,a,i)
            Tiaai(i1,a1,a,i) *= -1.0
#
            DO i2
            DO a2
               REQUEST               T2old_aa(a,i2,a2,i) i
               REQUEST               VSpipi(a1,i1,a2,i2) i2 # +
#
               T1iaai(i1,a1,a,i)   = VSpipi(a1,i1,a2,i2)*T2old_aa(a,i2,a2,i)
               Tiaai(i1,a1,a,i)   -= T1iaai(i1,a1,a,i)
            ENDDO a2
            ENDDO i2
#
            DO j
            DO b
               REQUEST             T2old_ab(a,i,b,j) j
               REQUEST             Vpiqj(a1,i1,b,j)  j # +
#
               T1iaai(i1,a1,a,i) = Vpiqj(a1,i1,b,j)*T2old_ab(a,i,b,j)
               Tiaai(i1,a1,a,i) += T1iaai(i1,a1,a,i)
            ENDDO b
            ENDDO j
#
            PREPARE WHIAAI(i1,a1,a,i) = Tiaai(i1,a1,a,i)
#
      ENDPARDO i1, a1, a, i
#
      PARDO j1, b1, b, j
#
            REQUEST             Vjbbj(j1,b1,b,j) j # +
            REQUEST             Vbbjj(b,b1,j1,j) j # -
            Tjbbj(j1,b1,b,j)  = Vbbjj(b,b1,j1,j)
            Tjbbj(j1,b1,b,j) -= Vjbbj(j1,b1,b,j)
            Tjbbj(j1,b1,b,j) *= -1.0
#
            DO j2
            DO b2
               REQUEST             T2old_Bb(b,j2,b2,j) j
               REQUEST             VSqjqj(b1,j1,b2,j2) j2 # +
#
               T1jbbj(j1,b1,b,j) = VSqjqj(b1,j1,b2,j2)*T2old_bb(b,j2,b2,j)
               Tjbbj(j1,b1,b,j) -= T1jbbj(j1,b1,b,j)
            ENDDO b2
            ENDDO j2
#
            DO i
            DO a
               REQUEST             T2old_ab(a,i,b,j) j
               REQUEST             Vpiqj(a,i,b1,j1)  j1 # +
#
               T1jbbj(j1,b1,b,j) = Vpiqj(a,i,b1,j1)*T2old_ab(a,i,b,j)
               Tjbbj(j1,b1,b,j) += T1jbbj(j1,b1,b,j)
            ENDDO a
            ENDDO i
#
            PREPARE WHJBBJ(j1,b1,b,j) = Tjbbj(j1,b1,b,j)
#
      ENDPARDO j1, b1, b, j 
#
      PARDO i, i1, b, b1
#
            REQUEST             Vbbii(b,b1,i,i1) i1
            Tiibb(i,i1,b,b1)  = Vbbii(b,b1,i,i1)
            Tiibb(i,i1,b,b1) *= -1.0
#
            DO a
            DO j
               REQUEST             T2old_ab(a,i1,b,j) j
               REQUEST             Vpiqj(a,i,b1,j)    j
#
               T1iibb(i,i1,b,b1) = T2old_ab(a,i1,b,j)*Vpiqj(a,i,b1,j)
               Tiibb(i,i1,b,b1) += T1iibb(i,i1,b,b1)
            ENDDO j
            ENDDO a
#
            PREPARE WHIIBB(i,i1,b,b1) = Tiibb(i,i1,b,b1)
#
      ENDPARDO i, i1, b, b1 
#
      PARDO j1, j, a, a1
#
            REQUEST             Vaajj(a,a1,j1,j) j
            Tjjaa(j1,j,a,a1)  = Vaajj(a,a1,j1,j)
            Tjjaa(j1,j,a,a1) *= -1.0
#
            DO b
            DO i
               REQUEST             T2old_ab(a,i,b,j) j
               REQUEST             Vpiqj(a1,i,b,j1)  j1
#
               T1jjaa(j1,j,a,a1) = T2old_ab(a,i,b,j)*Vpiqj(a1,i,b,j1)
               Tjjaa(j1,j,a,a1) += T1jjaa(j1,j,a,a1)
            ENDDO i
            ENDDO b
#
            PREPARE WHJJAA(j1,j,a,a1) = Tjjaa(j1,j,a,a1)
#
      ENDPARDO j1, j, a, a1 
#
      PARDO i, a, b, j
#
            REQUEST          Viabj(i,a,b,j) j
            Tiabj(i,a,b,j) = Viabj(i,a,b,j)
#
            DO a1
            DO i1
               REQUEST             T2old_ab(a1,i1,b,j) j
               REQUEST             VSpipi(a,i,a1,i1)   i1 # +
#
               T1iabj(i,a,b,j)   = VSpipi(a,i,a1,i1)*T2old_ab(a1,i1,b,j)
               Tiabj(i,a,b,j)   += T1iabj(i,a,b,j)
            ENDDO i1
            ENDDO a1
#
            DO b1
            DO j1
               REQUEST           T2old_bb(b1,j1,b,j) j
               REQUEST           Vpiqj(a,i,b1,j1)    j1 # +
#
               T1iabj(i,a,b,j) = Vpiqj(a,i,b1,j1)*T2old_bb(b1,j1,b,j)
               Tiabj(i,a,b,j) += T1iabj(i,a,b,j)
            ENDDO j1
            ENDDO b1
#
            PREPARE WHIABJ(i,a,b,j) = Tiabj(i,a,b,j)
#
      ENDPARDO i, a, b, j 
#
      PARDO j, b, a, i
#
            REQUEST          Viabj(i,a,b,j) j
            Tjbai(j,b,a,i) = Viabj(i,a,b,j)
#
            DO b1
            DO j1
               REQUEST           T2old_ab(a,i,b1,j1) j1
               REQUEST           VSqjqj(b,j,b1,j1)   j1 # +
#
               T1jbai(j,b,a,i) = VSqjqj(b,j,b1,j1)*T2old_ab(a,i,b1,j1)
               Tjbai(j,b,a,i) += T1jbai(j,b,a,i)
            ENDDO j1
            ENDDO b1
#
            DO a1
            DO i1
               REQUEST           T2old_aa(a1,i1,a,i) i
               REQUEST           Vpiqj(a1,i1,b,j)    j # +
#
               T1jbai(j,b,a,i) = Vpiqj(a1,i1,b,j)*T2old_aa(a1,i1,a,i)
               Tjbai(j,b,a,i) += T1jbai(j,b,a,i)
            ENDDO i1
            ENDDO a1
#
            PREPARE WHJBAI(j,b,a,i) = Tjbai(j,b,a,i)
#
      ENDPARDO j, b, a, i 
#
      execute server_barrier 
#
#     AAAA spin combination. 
#     ---------------------- 
#
      PARDO a, i, i1, i2
#
            REQUEST             VSpipi(i,i1,a,i2) i2
            Tiiai(i,i1,a,i2)  = VSpipi(i,i1,a,i2)
#
            DO i3
               REQUEST             HBAR_iiii(i,i1,i3,i2) i2
               T1iiai(i,i1,a,i2) = HBAR_iiii(i,i1,i3,i2)*St1a(a,i3)
               Tiiai(i,i1,a,i2) -= T1iiai(i,i1,a,i2)
            ENDDO i3
#
            PREPARE HBAR_IAJK_aaaa(i,i1,a,i2) += Tiiai(i,i1,a,i2)
#
      ENDPARDO a, i, i1, i2
#
      PARDO i, i1, a, i2
#
            Tiiai(i,i1,a,i2)  = 0.0  
            TSiiai(i,i2,a,i1) = 0.0
#
            DO a1
#
               REQUEST              T2old_aa(a,i1,a1,i2) i2
               REQUEST              WHIAAI(i,a1,a,i2) i2
#
               T1iiai(i,i1,a,i2)  = T2old_aa(a,i1,a1,i2)*LHBAR_ia(i,a1)
               Tiiai(i,i1,a,i2)  -= T1iiai(i,i1,a,i2)
#
               T1iiai(i,i1,a,i2)  = WHIAAI(i,a1,a,i2)*St1a(a1,i1)
               T2iiai(i,i2,a,i1)  = T1iiai(i,i1,a,i2)
#
               Tiiai(i,i1,a,i2)  += T1iiai(i,i1,a,i2)
               TSiiai(i,i2,a,i1) -= T2iiai(i,i2,a,i1)
#
            ENDDO a1
#
            PREPARE HBAR_IAJK_aaaa(i,i1,a,i2) += Tiiai(i,i1,a,i2)
            PREPARE HBAR_IAJK_aaaa(i,i2,a,i1) += TSiiai(i,i2,a,i1)
#
      ENDPARDO i, i1, a, i2
#
      PARDO i, a, a1, a2
#
            REQUEST VSaaai(a2,a,a1,i) i # +
#
            DO i1
               t1pp(a2,i1) = St1a(a2,i1) 
               DO i2
#
                  REQUEST               T2old_aa(a1,i1,a2,i2) i2
                  tpp(a2,i2)          = St1a(a2,i2) 
#
                  tpppp(a1,i1,a2,i2)  = T2old_aa(a1,i1,a2,i2) 
                  t1pppp(a1,i1,a2,i2) = St1a(a1,i1)^tpp(a2,i2) 
                  t2pppp(a1,i1,a2,i2) = St1a(a1,i2)^t1pp(a2,i1) 
                  tpppp(a1,i1,a2,i2) += t1pppp(a1,i1,a2,i2) 
                  tpppp(a1,i1,a2,i2) -= t2pppp(a1,i1,a2,i2) 
#
                  T1iiai(i,i1,a,i2)   = tpppp(a1,i1,a2,i2)*VSaaai(a2,a,a1,i)
                  T1iiai(i,i1,a,i2)  *= 0.5
                  PREPARE HBAR_IAJK_aaaa(i,i1,a,i2) += T1iiai(i,i1,a,i2)
#
               ENDDO i2
            ENDDO i1
#
      ENDPARDO i, a, a1, a2
#
      PARDO i, i1, a, i2
#
            Tiiai(i,i1,a,i2)  = 0.0  
            TSiiai(i,i2,a,i1) = 0.0
#
            DO a1
#
               DO i3
#
                  REQUEST               T2old_aa(a,i2,a1,i3) i3
                  REQUEST               VSpipi(i1,i,a1,i3)   i3 # +
#
                  T1iiai(i,i1,a,i2)   = VSpipi(i1,i,a1,i3)*T2old_aa(a,i2,a1,i3)
                  T2iiai(i,i2,a,i1)   = T1iiai(i,i1,a,i2)
                  Tiiai(i,i1,a,i2)   += T1iiai(i,i1,a,i2)
                  TSiiai(i,i2,a,i1)  -= T2iiai(i,i2,a,i1)
#
               ENDDO i3
#
            ENDDO a1
#
            PREPARE HBAR_IAJK_aaaa(i,i1,a,i2) += Tiiai(i,i1,a,i2)
            PREPARE HBAR_IAJK_aaaa(i,i2,a,i1) += TSiiai(i,i2,a,i1)
#
      ENDPARDO i, i1, a, i2
#
      PARDO i, i1, a, i2
#
            Tiiai(i,i1,a,i2)  = 0.0  
            TSiiai(i,i2,a,i1) = 0.0
#
            DO b
            DO j
#
               REQUEST              T2old_ab(a,i2,b,j) j
               REQUEST              Vpiqj(i1,i,b,j)    j # +
#
               T1iiai(i,i1,a,i2)  = Vpiqj(i1,i,b,j)*T2old_ab(a,i2,b,j)
               Tiiai(i,i1,a,i2)  += T1iiai(i,i1,a,i2)
#
               T2iiai(i,i2,a,i1)  = T1iiai(i,i1,a,i2)
               TSiiai(i,i2,a,i1) -= T2iiai(i,i2,a,i1)
#
            ENDDO j
            ENDDO b
#
            PREPARE HBAR_IAJK_aaaa(i,i1,a,i2) += Tiiai(i,i1,a,i2)
            PREPARE HBAR_IAJK_aaaa(i,i2,a,i1) += TSiiai(i,i2,a,i1)
#
      ENDPARDO i, i1, a, i2
#
#     AABB spin combination. 
#     ---------------------- 
#
      PARDO i, i1, b, j
#
            REQUEST           Vpiqj(i,i1,b,j) j
            Tiibj(i,i1,b,j) = Vpiqj(i,i1,b,j)
#
            DO a
#
               REQUEST            T2old_ab(a,i1,b,j) j
               REQUEST            WHIABJ(i,a,b,j) j
#
               T1iibj(i,i1,b,j) = T2old_ab(a,i1,b,j)*LHBAR_ia(i,a)
               Tiibj(i,i1,b,j) += T1iibj(i,i1,b,j)
#
               T1iibj(i,i1,b,j) = WHIABJ(i,a,b,j)*St1a(a,i1)
               Tiibj(i,i1,b,j) += T1iibj(i,i1,b,j)
#
               DO b1
#
                  REQUEST             T2old_ab(a,i1,b1,j) j
                  REQUEST             Vbbai(b1,b,a,i)   i
#
                  tppqq(a,i1,b1,j)  = T2old_ab(a,i1,b1,j) 
                  t1ppqq(a,i1,b1,j) = St1a(a,i1)^St1b(b1,j) 
                  tppqq(a,i1,b1,j) += t1ppqq(a,i1,b1,j) 
#
                  T1iibj(i,i1,b,j)  = Vbbai(b1,b,a,i)*tppqq(a,i1,b1,j)
                  Tiibj(i,i1,b,j)  += T1iibj(i,i1,b,j)
#
               ENDDO b1
#
               DO i2
#
                  REQUEST            T2old_ab(a,i2,b,j) j
                  REQUEST            VSpipi(i1,i,a,i2)  i2 # +
#
                  T1iibj(i,i1,b,j) = VSpipi(i1,i,a,i2)*T2old_ab(a,i2,b,j)
                  Tiibj(i,i1,b,j) += T1iibj(i,i1,b,j)
#
               ENDDO i2
#
               DO j1
#
                  REQUEST            T2old_ab(a,i1,b,j1) j1
                  REQUEST            Vpiqj(a,i,j,j1)     j1 # +
#
                  T1iibj(i,i1,b,j) = Vpiqj(a,i,j,j1)*T2old_ab(a,i1,b,j1)
                  Tiibj(i,i1,b,j) -= T1iibj(i,i1,b,j)
#
               ENDDO j1
#
            ENDDO a
#
            DO j1
#
               REQUEST            HBAR_iijj(i,i1,j1,j) j
#
               T1iibj(i,i1,b,j) = HBAR_iijj(i,i1,j1,j)*St1b(b,j1)
               Tiibj(i,i1,b,j) -= T1iibj(i,i1,b,j)
#
            ENDDO j1
#
            DO b1
#
               REQUEST            WHIIBB(i,i1,b,b1) b1
               T1iibj(i,i1,b,j) = WHIIBB(i,i1,b,b1)*St1b(b1,j)
               Tiibj(i,i1,b,j) -= T1iibj(i,i1,b,j)
#
               DO j2
#
                  REQUEST            T2old_bb(b1,j2,b,j) j
                  REQUEST            Vpiqj(i1,i,b1,j2)   j2 # +
#
                  T1iibj(i,i1,b,j) = Vpiqj(i1,i,b1,j2)*T2old_bb(b1,j2,b,j)
                  Tiibj(i,i1,b,j) += T1iibj(i,i1,b,j)
#
               ENDDO j2
#
            ENDDO b1
#
            PREPARE HBAR_IAJK_aabb(i,i1,b,j) = Tiibj(i,i1,b,j)
#
      ENDPARDO i, i1, b, j
#
#     BBAA spin combination. 
#     ---------------------- 
#
#     BBBB spin combination. 
#     ---------------------- 
#
      execute server_barrier 
#
      ENDPROC HBAR_IAJK   
#     -----------------
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
      PROC HBAR_AJIB     
#     --------------
#
#     There are four spin cases to compute:
#     1. H^{aj)_{ib} --> HBAR_AJIB_aaaa  
#     2. H^{AJ)_{IB} --> HBAR_AJIB_bbbb  
#     3. H^{aJ)_{iB} --> HBAR_AJIB_aabb  
#     4. H^{Aj)_{Ib} --> HBAR_AJIB_bbaa  
#     5. H^{Aj)_{iB} --> HBAR_AJIB_iibb   
#     6. H^{aJ)_{Ib} --> HBAR_AJIB_jjaa   
#
#     Note that since I 'always' store arrays in (11|22) form the 
#     notation, although valid, is slightly confusing. The 
#     storage pattern is therefore array(a,b,i,c).   
#
#    ------------------------------------------------------------------------
#
#     AAAA spin combination. 
#     ---------------------- 
#
      PARDO i1, a1, a, i
#
            REQUEST                              Viaai(i1,a1,a,i) i 
            REQUEST                              Vaaii(a,a1,i1,i) i 
            Tiaai(i1,a1,a,i)                   = Vaaii(a,a1,i1,i)
            Tiaai(i1,a1,a,i)                  -= Viaai(i1,a1,a,i)
            Tiaai(i1,a1,a,i)                  *= -1.0
            PREPARE HBAR_AJIB_aaaa(i1,a1,a,i) += Tiaai(i1,a1,a,i)
#
      ENDPARDO i1, a1, a, i
#
      PARDO i, i1, a1, i2  
#
            REQUEST VSpipi(a1,i1,i,i2) i
#
            DO a
               T1iaai(i1,a1,a,i)                  = VSpipi(a1,i1,i,i2)*St1a(a,i2)
               T1iaai(i1,a1,a,i)                 *= -1.0  
               PREPARE HBAR_AJIB_aaaa(i1,a1,a,i) += T1iaai(i1,a1,a,i)
            ENDDO a
#
      ENDPARDO i, i1, a1, i2
#
      PARDO i1, a1, a, a2  
#
            REQUEST  VSaaai(a2,a,a1,i1) i1
#
            DO i 
               T2iaai(i,a,a1,i1)                  = VSaaai(a2,a,a1,i1)*St1a(a2,i)
               T1iaai(i1,a1,a,i)                  = T2iaai(i,a,a1,i1)
               PREPARE HBAR_AJIB_aaaa(i1,a1,a,i) += T1iaai(i1,a1,a,i)
            ENDDO i
#
      ENDPARDO i1, a1, a, a2  
#
      PARDO i, a, a2, i2  
#
            REQUEST               T2old_aa(a2,i,a,i2) a2 
            tai(a,i2)           = St1a(a,i2)
            T1aiai(a2,i,a,i2)   = St1a(a2,i)^tai(a,i2)
            T1aiai(a2,i,a,i2)  += T2old_aa(a2,i,a,i2)
#
            DO a1 
            DO i1
#
               REQUEST                              VSpipi(a2,i2,a1,i1) a2 
               Taiai(a1,i2,a2,i1)                 = VSpipi(a2,i2,a1,i1)
               T1iaai(i1,a1,a,i)                  = T1aiai(a2,i,a,i2)*Taiai(a1,i2,a2,i1)
               T1iaai(i1,a1,a,i)                 *= -1.0  
               PREPARE HBAR_AJIB_aaaa(i1,a1,a,i) += T1iaai(i1,a1,a,i)
#
            ENDDO i1
            ENDDO a1
#
      ENDPARDO i, a, a2, i2
#
      PARDO i1, a1, b, j
#
            REQUEST Vpiqj(a1,i1,b,j) j 
#
            DO a
            DO i
#
               REQUEST                              T2old_ab(a,i,b,j) j 
               T1iaai(i1,a1,a,i)                  = Vpiqj(a1,i1,b,j)*T2old_ab(a,i,b,j)
               PREPARE HBAR_AJIB_aaaa(i1,a1,a,i) += T1iaai(i1,a1,a,i)
#
            ENDDO i
            ENDDO a
#
      ENDPARDO i1, a1, b, j
#
#     BBBB spin combination. 
#     ---------------------- 
#
#     AABB spin combination. 
#     ---------------------- 
#
      PARDO i, a, b, j
#
            REQUEST                           Viabj(i,a,b,j) j
            Tiabj(i,a,b,j)                  = Viabj(i,a,b,j)
            PREPARE HBAR_AJIB_aabb(i,a,b,j)+= Tiabj(i,a,b,j)
#
      ENDPARDO i, a, b, j 
#
      PARDO i, a, b, b1  
#
            REQUEST Vbbai(b1,b,a,i) i 
#
            DO j
#
               Tjbai(j,b,a,i)                   = Vbbai(b1,b,a,i)*St1b(b1,j)
               T2jbai(j,b,a,i)                  = Tjbai(j,b,a,i)
               Tiabj(i,a,b,j)                   = Tjbai(j,b,a,i)  
               PREPARE NJBAI(j,b,a,i)          += T2jbai(j,b,a,i)
               PREPARE HBAR_AJIB_aabb(i,a,b,j) += Tiabj(i,a,b,j)
#
            ENDDO j
#
      ENDPARDO i, a, b, b1  
#
      PARDO b, i, a, j
#
            Tiabj(i,a,b,j)  = 0.0  
#
            DO j1
#
               REQUEST           Vpiqj(a,i,j,j1) j 
               T1iabj(i,a,b,j) = Vpiqj(a,i,j,j1)*St1b(b,j1)
               Tiabj(i,a,b,j) -= T1iabj(i,a,b,j)
#
            ENDDO j1
#
            PREPARE HBAR_AJIB_aabb(i,a,b,j) += Tiabj(i,a,b,j)
#
      ENDPARDO b, i, a, j 
#
      PARDO j, b, b1, j1
#
            REQUEST              T2old_bb(b1,j,b,j1) b 
#
            tbj(b,j1)          = St1b(b,j1)
            T2bjbj(b1,j,b,j1)  = St1b(b1,j)^tbj(b,j1)
            T2bjbj(b1,j,b,j1) += T2old_bb(b1,j,b,j1)
#
            DO i
            DO a
#
               REQUEST                            Vpiqj(a,i,b1,j1) a 
               Tiabj(i,a,b,j)                   = T2bjbj(b1,j,b,j1)*Vpiqj(a,i,b1,j1)
               Tiabj(i,a,b,j)                  *= -1.0  
               PREPARE HBAR_AJIB_aabb(i,a,b,j) += Tiabj(i,a,b,j)
#
            ENDDO a
            ENDDO i
#
      ENDPARDO j, b, b1, j1 
#
      PARDO i1, a1, b, j
#
            REQUEST T2old_ab(a1,i1,b,j) a1 
#
            DO a
            DO i
#
               REQUEST                            VSpipi(a1,i1,a,i) a1 
               Tiabj(i,a,b,j)                   = T2old_ab(a1,i1,b,j)*VSpipi(a1,i1,a,i)
               PREPARE HBAR_AJIB_aabb(i,a,b,j) += Tiabj(i,a,b,j)
#
            ENDDO i
            ENDDO a
#
      ENDPARDO i1, a1, b, j 
#
#     BBAA spin combination. 
#     ---------------------- 
#
#     ABAB spin combination. 
#     ---------------------- 
#
      PARDO i1, b1, b, i
#
            REQUEST                              Vbbii(b,b1,i1,i) i 
            Tiibb(i1,i,b,b1)                   = Vbbii(b,b1,i1,i)
            Tiibb(i1,i,b,b1)                  *= -1.0
            PREPARE HBAR_AJIB_iibb(i1,i,b,b1) += Tiibb(i1,i,b,b1)
#
      ENDPARDO i1, b1, b, i
#
      PARDO b1, b, a1, i1  
#
            REQUEST Vbbai(b1,b,a1,i1) i1 
#
            DO i
               T1iibb(i1,i,b,b1)                  = Vbbai(b1,b,a1,i1)*St1a(a1,i)
               T2iibb(i1,i,b,b1)                  = T1iibb(i1,i,b,b1)  
               T2iibb(i1,i,b,b1)                 *= -1.0 
               PREPARE NIIBB(i1,i,b,b1)          += T1iibb(i1,i,b,b1)
               PREPARE HBAR_AJIB_iibb(i1,i,b,b1) += T2iibb(i1,i,b,b1)
            ENDDO i
#
      ENDPARDO b1, b, a1, i1  
#
      PARDO i1, b1, b, i
#
            Tiibb(i1,i,b,b1) = 0.0 
#
            DO j1
               REQUEST             Vpiqj(i,i1,b1,j1) i 
               T1iibb(i1,i,b,b1) = Vpiqj(i,i1,b1,j1)*St1b(b,j1)
               Tiibb(i1,i,b,b1) += T1iibb(i1,i,b,b1) 
            ENDDO j1
#
            PREPARE HBAR_AJIB_iibb(i1,i,b,b1) += Tiibb(i1,i,b,b1)
#
      ENDPARDO i1, b1, b, i
#
      PARDO i, b, j1, a1  
#
            REQUEST              T2old_ab(a1,i,b,j1) j1 
            Taibj(a1,i,b,j1)   = St1a(a1,i)^St1b(b,j1)
            T1aibj(a1,i,b,j1)  = T2old_ab(a1,i,b,j1)
            T1aibj(a1,i,b,j1) += Taibj(a1,i,b,j1)
#
            DO i1
            DO b1
#
               REQUEST                              Vpiqj(a1,i1,b1,j1) j1 
               T1iibb(i1,i,b,b1)                  = T1aibj(a1,i,b,j1)*Vpiqj(a1,i1,b1,j1)
               PREPARE HBAR_AJIB_iibb(i1,i,b,b1) += T1iibb(i1,i,b,b1)
#
            ENDDO b1
            ENDDO i1
#
      ENDPARDO i, b, j1, a1  
#
#     BABA spin combination. 
#     ---------------------- 
#
      PARDO j1, a1, a, b1  
#
            REQUEST Vaabj(a1,a,b1,j1) a 
#
            DO j
               T2jjaa(j1,j,a,a1)                  = Vaabj(a1,a,b1,j1)*St1b(b1,j)
               PREPARE NJJAA(j1,j,a,a1)          += T2jjaa(j1,j,a,a1)
            ENDDO j
#
      ENDPARDO j1, a1, a, b1  
#
      ENDPROC HBAR_AJIB     
#     -----------------
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
      PROC HBAR_ABCI    
#     --------------
#
#     There are four spin cases to compute:
#     1. H^{ab)_{ci} --> HBAR_ABCI_aaaa  
#     2. H^{AB)_{CI} --> HBAR_ABCI_bbbb  
#     3. H^{aB)_{cI} --> HBAR_ABCI_aabb  
#     4. H^{Ab)_{Ci} --> HBAR_ABCI_bbaa  
#
#     Note that since I 'always' store arrays in (11|22) form the 
#     notation, although valid, is slightly confusing. The 
#     storage pattern is therefore array(a,b,i,c).   
#
#    ------------------------------------------------------------------------
#
#     AAAA spin component. 
#     -------------------- 
#
#     BBBB spin component. 
#     -------------------- 
#
#     AABB spin component. 
#     -------------------- 
#
      PARDO a, a1, b, j 
#
            REQUEST                             Vaabj(a,a1,b,j) a  
            PREPARE HBAR_ABCI_aabb(a,a1,b,j) += Vaabj(a,a1,b,j) 
#
      ENDPARDO a, a1, b, j 
#
      PARDO a, a1, a3, i2
#
            REQUEST VSaaai(a,a1,a3,i2) a 
#
            DO b
            DO j
#
               REQUEST                             T2old_ab(a3,i2,b,j) j
               Tppqq(a1,a,b,j)                   = VSaaai(a,a1,a3,i2)*T2old_ab(a3,i2,b,j)
               PREPARE HBAR_ABCI_aabb(a1,a,b,j) += Tppqq(a1,a,b,j)
#
            ENDDO j
            ENDDO b
#
      ENDPARDO a, a1, a3, i2
#
      PARDO a, a1, b, j
#
            REQUEST Vaabj(a,a1,b,j) j
#
            DO b1
            DO j1
#
               REQUEST                               T2old_bb(b1,j1,b,j) j
               Tppqq(a1,a,b1,j1)                   = Vaabj(a,a1,b,j)*T2old_bb(b1,j1,b,j)
               PREPARE HBAR_ABCI_aabb(a1,a,b1,j1) += Tppqq(a1,a,b1,j1)
#
            ENDDO j1
            ENDDO b1
#
      ENDPARDO a, a1, b, j
#
      PARDO a1, a, j, b
#
            Tppqq(a1,a,b,j) = 0.0
#
            DO i
#
               REQUEST            T2old_ab(a1,i,b,j) j
               REQUEST            WHIABJ(i,a,b,j) j
               REQUEST            NJBAI(j,b,a,i) i
#
               T1ppqq(a1,a,b,j) = T2old_ab(a1,i,b,j)*LHBAR_ia(i,a)
               Tppqq(a1,a,b,j) -= T1ppqq(a1,a,b,j)
#
               T2ppqq(a1,a,b,j) = WHIABJ(i,a,b,j)*St1a(a1,i)
               Tppqq(a1,a,b,j) -= T2ppqq(a1,a,b,j)
#
               T3ppqq(a1,a,b,j) = NJBAI(j,b,a,i)*St1a(a1,i)
               Tppqq(a1,a,b,j) -= T3ppqq(a1,a,b,j)
#
            ENDDO i
#
            PREPARE HBAR_ABCI_aabb(a1,a,b,j) += Tppqq(a1,a,b,j)
#
      ENDPARDO a1, a, j, b
#
      PARDO a, a1, j, j1
#
            REQUEST             WHJJAA(j1,j,a1,a) a
            REQUEST             NJJAA(j1,j,a1,a) a
            tqqpp(j1,j,a1,a)  = WHJJAA(j1,j,a1,a) 
            tqqpp(j1,j,a1,a) -= NJJAA(j1,j,a1,a) 
#
            DO b
               Tppqq(a1,a,b,j)                   = tqqpp(j1,j,a1,a)*St1b(b,j1)
               PREPARE HBAR_ABCI_aabb(a1,a,b,j) += Tppqq(a1,a,b,j)
            ENDDO b
#
      ENDPARDO a, a1, j, j1
#
      PARDO a1, b, j1, i 
#
            REQUEST              T2old_ab(a1,i,b,j1) j1
            t1ppqq(a1,i,b,j1)  = St1a(a1,i)^St1b(b,j1)  
            t1ppqq(a1,i,b,j1) += T2old_ab(a1,i,b,j1)  
            t0pqqp(a1,b,j1,i) = t1ppqq(a1,i,b,j1)

            DO a
            DO j
#   
               REQUEST                             HBAR_JKIA_aabb(j1,j,i,a) j1
#####          Tppqq(a1,a,b,j)                   = t1ppqq(a1,i,b,j1)*Vpiqj(a,i,j,j1)
####           Tppqq(a1,a,b,j)                   = t1ppqq(a1,i,b,j1)*HBAR_JKIA_aabb(j1,j,i,a)
               tqpqp(j1,i,j,a)   = HBAR_JKIA_aabb(j1,j,i,a)
               Tppqq(a1,a,b,j) = t0pqqp(a1,b,j1,i)*tqpqp(j1,i,j,a) 
               PREPARE HBAR_ABCI_aabb(a1,a,b,j) += Tppqq(a1,a,b,j)
#
            ENDDO j 
            ENDDO a 
#
      ENDPARDO a1, b, j1, i 
#
      PARDO a, b1, b, i
#
            REQUEST Vbbai(b,b1,a,i) a  
#
            DO j
            DO a1
               REQUEST                              T2old_ab(a1,i,b,j) j
               Tppqq(a1,a,b1,j)                   = T2old_ab(a1,i,b,j)*Vbbai(b,b1,a,i)
               Tppqq(a1,a,b1,j)                  *= -1.0
               PREPARE HBAR_ABCI_aabb(a1,a,b1,j) += Tppqq(a1,a,b1,j)
            ENDDO a1
            ENDDO j
#
      ENDPARDO a, b1, b, i
#
# debug
# debug
#
#     Done AABB spin component. 
#     ------------------------- 
#
#     BBAA spin component. 
#     -------------------- 
#
#     Done AABB spin component. 
#     ------------------------- 
#
      execute server_barrier
#
      ENDPROC HBAR_ABCI    
#
      PROC AO4VIR
#     ----------- 
#
      create Mxj
      create Mxi
#
      execute sip_barrier
#
      PARDO j,sigma
#
            t1xj(sigma,j)=0.0
#
            do b
               txj(sigma,j)=St1b(b,j)*ca(sigma,b)
               t1xj(sigma,j)+=txj(sigma,j)
            enddo b
# 
            put Mxj(sigma,j)=t1xj(sigma,j)
#
      ENDPARDO j, sigma
#
      PARDO i, sigma
#
            t1xi(sigma,i)=0.0
#
            do a
               txi(sigma,i)=St1a(a,i)*ca(sigma,a)
               t1xi(sigma,i)+=txi(sigma,i)
            enddo a
#
            put Mxi(sigma,i)=t1xi(sigma,i)
#
      ENDPARDO i, sigma
#
      execute sip_barrier
#
#    Contract AOINT with half back transformed Amplitudes
#    ----------------------------------------------------
#
      PARDO mu,lambda,nu
#
      allocate Lxxxj(mu,lambda,nu,*)
      allocate Lxxxi(mu,lambda,nu,*)
#
      DO sigma
#
         compute_integrals aoint(mu,lambda,nu,sigma)
#
         DO j
#
            get Mxj(sigma,j)
#
            tmxxxj(mu,lambda,nu,j)=aoint(mu,lambda,nu,sigma)*Mxj(sigma,j)
            Lxxxj(mu,lambda,nu,j)+=tmxxxj(mu,lambda,nu,j)
#
         ENDDO j
####
         DO i
#
            get Mxi(sigma,i)
#
            tmxxxi(mu,lambda,nu,i)=aoint(mu,lambda,nu,sigma)*Mxi(sigma,i)
            Lxxxi(mu,lambda,nu,i)+=tmxxxi(mu,lambda,nu,i)
#
         ENDDO i
####
      enddo sigma
#
      DO j
         prepare Mxxxj(mu,lambda,nu,j)=Lxxxj(mu,lambda,nu,j)
      ENDDO j
      DO i
         prepare Mxxxi(mu,lambda,nu,i)=Lxxxi(mu,lambda,nu,i)
      ENDDO i
#
      deallocate Lxxxi(mu,lambda,nu,*)
      deallocate Lxxxj(mu,lambda,nu,*)
#
      ENDPARDO mu,lambda,nu
#
      execute server_barrier
#
#  2ND STAGE OF TRANSFORMATION
#  --------------------------- 
#
      PARDO mu, nu, j 
#
            allocate Lxxbj(mu,nu,*,j)
#
            DO lambda  
#
               request Mxxxj(mu,nu,lambda,j) j
#
               DO b
#
                  tmxxbj(mu,nu,b,j)=Mxxxj(mu,nu,lambda,j)*ca(lambda,b)
                  lxxbj(mu,nu,b,j)+=tmxxbj(mu,nu,b,j)
#
               ENDDO b
            ENDDO lambda  
#
            DO b
               prepare Mxxbj(mu,nu,b,j)=lxxbj(mu,nu,b,j)
            ENDDO b
#
            deallocate Lxxbj(mu,nu,*,j)
#
      ENDPARDO mu, nu, j 
#
      PARDO mu, nu, i 
#
            allocate Lxxai(mu,nu,*,i)
#
            DO lambda  
#
               request Mxxxi(mu,nu,lambda,i) i
#
               DO a
#
                  tmxxai(mu,nu,a,i)=Mxxxi(mu,nu,lambda,i)*ca(lambda,a)
                  lxxai(mu,nu,a,i)+=tmxxai(mu,nu,a,i)
#
               ENDDO a
            ENDDO lambda  
#
            DO a
               prepare Mxxai(mu,nu,a,i)=lxxai(mu,nu,a,i)
            ENDDO a
#
            deallocate Lxxai(mu,nu,*,i)
#
      ENDPARDO mu, nu, i 
#
      execute server_barrier
#
#  END 2ND STAGE OF TRANSFORMATION
#  ------------------------------- 
#
      pardo mu, b, j
#
         allocate Lxabj(mu,*,b,j)
#
         do lambda
#
            request Mxxbj(mu,lambda,b,j) j
#
            do a
#
               tmxabj(mu,a,b,j)=Mxxbj(mu,lambda,b,j)*ca(lambda,a)
               lxabj(mu,a,b,j)+=tmxabj(mu,a,b,j)
#
            enddo a
#
         enddo lambda
#
         do a
            prepare Mxabj(mu,a,b,j)=lxabj(mu,a,b,j)
         enddo a
#
         deallocate Lxabj(mu,*,b,j)
#
      endpardo mu, b, j
#
      pardo mu, a, i
#
            allocate Lxbai(mu,*,a,i)
#
            do lambda
#
               request Mxxai(mu,lambda,a,i) i
#
               do b
#
                  tmxbai(mu,b,a,i)=Mxxai(mu,lambda,a,i)*ca(lambda,b)
                  lxbai(mu,b,a,i)+=tmxbai(mu,b,a,i)
#
               enddo b
#
            enddo lambda
#
            do b
               prepare Mxbai(mu,b,a,i)=lxbai(mu,b,a,i)
            enddo b
#
            deallocate Lxbai(mu,*,a,i)
#
      endpardo mu, a, i
#
      pardo mu, a, i
#
            allocate Lxaai(mu,*,a,i)
#
            do lambda
#
               request Mxxai(mu,lambda,a,i) i
#
               do a1
#
                  tmxaai(mu,a1,a,i)=Mxxai(mu,lambda,a,i)*ca(lambda,a1)
                  lxaai(mu,a1,a,i)+=tmxaai(mu,a1,a,i)
#
               enddo a1
#
            enddo lambda
#
            do a1
               prepare Mxaai(mu,a1,a,i)=lxaai(mu,a1,a,i)
            enddo a1
#
            deallocate Lxaai(mu,*,a,i)
#
      endpardo mu, a, i
#
      pardo mu, b, j
#
            allocate Lxbbj(mu,*,b,j)
#
            do lambda
#
               request Mxxbj(mu,lambda,b,j) j
#
               do b1
#
                  tmxbbj(mu,b1,b,j)=Mxxbj(mu,lambda,b,j)*ca(lambda,b1)
                  lxbbj(mu,b1,b,j)+=tmxbbj(mu,b1,b,j)
#
               enddo b1
#
            enddo lambda
#
            do b1
               prepare Mxbbj(mu,b1,b,j)=lxbbj(mu,b1,b,j)
            enddo b1
#
            deallocate Lxbbj(mu,*,b,j)
#
      endpardo mu, b, j
#
      execute server_barrier
#
#  END 3RD STAGE OF TRANSFORMATION
#  ------------------------------- 
#
      pardo a, b, j
#
         allocate Laabj(*,a,b,j)
#
         do mu
#
            request Mxabj(mu,a,b,j) j
#
            do a1
#
               tmaabj(a1,a,b,j)=Mxabj(mu,a,b,j)*ca(mu,a1)
               Laabj(a1,a,b,j)+=tmaabj(a1,a,b,j)
#
            enddo a1
#
         enddo mu
#
         do a1
            prepare HBAR_ABCI_aabb(a1,a,b,j)+=Laabj(a1,a,b,j)
         enddo a1
#
         deallocate Laabj(*,a,b,j)
#
      endpardo a, b, j
#
#    ALPHA-ALPHA spin combination
#
      ENDPROC AO4VIR
#     -----------------
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
#    BEGIN HBAR PROGRAM 
#
#    ------------------------------------------------------------------------
#
     PROC HBAR 
#    --------- 
#
     execute sip_barrier 
     CREATE  HBAR_ia
     CREATE  HBAR_jb
     allocate LHBAR_ii(*,*) 
     allocate LHBAR_ia(*,*) 
     allocate LHBAR_jb(*,*) 
     allocate LHBAR_aa(*,*) 
     execute server_barrier 
#
     CALL HBAR_AB # COMPARES WITH ACES  
     CALL HBAR_IJ # COMPARES WITH ACES  
     CALL HBAR_IB # COMPARES WITH ACES 

     execute sip_barrier 
     delete HBAR_ii 
    #delete HBAR_ia 
    #delete HBAR_jb 
# 

     CALL HBAR_IJKL 
     CALL HBAR_JKIA 
     execute server_barrier 
     CALL HBAR_IAJK
#

     CALL HBAR_AIBC 
     CALL HBAR_AJIB 
     execute server_barrier
     CALL HBAR_ABCI 

#
     call AO4VIR
     execute server_barrier


     PARDO a, a1, a2, i 
           REQUEST                             HBAR_AIBC_aabb(a,a1,i,a2) a 
           REQUEST                             HBAR_AIBC_aabb(a,a2,i,a1) a 
           tpppp(a,a1,i,a2)                  = HBAR_AIBC_aabb(a,a1,i,a2) 
           t1pppp(a,a1,i,a2)                 = HBAR_AIBC_aabb(a,a2,i,a1) 
           tpppp(a,a1,i,a2)                 -= t1pppp(a,a1,i,a2) 
           PREPARE HBAR_AIBC_aaaa(a,a1,i,a2) = tpppp(a,a1,i,a2) 
     ENDPARDO a, a1, a2, i 

     PARDO a, a1, a2, i 
           REQUEST                             HBAR_ABCI_aabb(a,a1,a2,i) a 
           REQUEST                             HBAR_ABCI_aabb(a2,a1,a,i) a 
           tpppp(a,a1,a2,i)                  = HBAR_ABCI_aabb(a,a1,a2,i) 
           t1pppp(a,a1,a2,i)                 = HBAR_ABCI_aabb(a2,a1,a,i) 
           tpppp(a,a1,a2,i)                 -= t1pppp(a,a1,a2,i) 
           PREPARE HBAR_ABCI_aaaa(a,a1,a2,i) = tpppp(a,a1,a2,i) 
     ENDPARDO a, a1, a2, i 
#
     ENDPROC HBAR 
#    ------------ 
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
#------------------------------------------------------------------------
#
     PROC READ_2EL
#
#    ------------------------------------------------------------------------
#
      allocate St1a(*,*)
      allocate St1b(*,*)

      execute server_barrier

       EXECUTE  LIST_TO_BLOCKS  REE
       
       EXECUTE  LIST_TO_BLOCKS  R1A_VECS
       EXECUTE  LIST_TO_BLOCKS  R2AA_VECS
       EXECUTE  LIST_TO_BLOCKS  R2AB_VECS
       
       EXECUTE  LIST_TO_BLOCKS  HBAR_ia
       EXECUTE  LIST_TO_BLOCKS  HBAR_jb
       
       EXECUTE  LIST_TO_BLOCKS  t1a_old
       EXECUTE  LIST_TO_BLOCKS  t1b_old
       EXECUTE  LIST_TO_BLOCKS  T2old_aa 
       EXECUTE  LIST_TO_BLOCKS  T2old_ab
       EXECUTE  LIST_TO_BLOCKS  T2old_bb 

       EXECUTE  LIST_TO_BLOCKS  A1a_old
       EXECUTE  LIST_TO_BLOCKS  A2old_aa
       EXECUTE  LIST_TO_BLOCKS  A2old_ab

       EXECUTE  LIST_TO_BLOCKS  VSpipi(p,i,p1,i1)
       EXECUTE  LIST_TO_BLOCKS  Vpiqj(p,i,q,j)

       EXECUTE  LIST_TO_BLOCKS  Vaaii
       EXECUTE  LIST_TO_BLOCKS  Viaai
       EXECUTE  LIST_TO_BLOCKS  Vaabj

       EXECUTE  LIST_TO_BLOCKS  LEE
       EXECUTE  LIST_TO_BLOCKS  L1A_VECS
       EXECUTE  LIST_TO_BLOCKS  L2AA_VECS
       EXECUTE  LIST_TO_BLOCKS  L2AB_VECS

       execute server_barrier
       execute read_list_to_blocks
       execute sip_barrier
       execute server_barrier

         DO a
         DO i
            GET         t1a_old(a,i)
            St1a(a,i) = t1a_old(a,i)
         ENDDO i
         ENDDO a
         DO b
         DO j
            GET         t1b_old(b,j)
            St1b(b,j) = t1b_old(b,j)
         ENDDO j
         ENDDO b

       DELETE  HBAR_ia
       DELETE  HBAR_jb

       PARDO  p, i, p1, i1
          tpppp (p,i,p1,i1) = 0.0
          PREPARE  VSpipi (p,i,p1,i1) = tpppp (p,i,p1,i1)
       ENDPARDO  p, i, p1, i1

       PARDO  p, i, q, j
          tpppp (p,i,q,j) = 0.0
          PREPARE  Vpiqj (p,i,q,j) = tpppp (p,i,q,j)
       ENDPARDO  p, i, q, j

       PARDO  a, a1, i, i1
          tpppp (a,a1,i,i1) = 0.0
          PREPARE  Vaaii (a,a1,i,i1) = tpppp (a,a1,i,i1)
       ENDPARDO  a, a1, i, i1

       PARDO a, a1, i, i1
          tpppp (i,a,a1,i1) = 0.0
          PREPARE  Viaai (i,a,a1,i1) = tpppp (i,a,a1,i1)
       ENDPARDO  a, a1, i, i1

       PARDO  a, a1, b, j
          tpppp (a,a1,b,j) = 0.0
          PREPARE  Vaabj (a,a1,b,j) = tpppp (a,a1,b,j)
       ENDPARDO  a, a1, b, j

       PARDO  a, i, a1, i1
          tiaia (i,a,i1,a1) = 0.0
          PREPARE  A2old_aa (i,a,i1,a1) = tiaia (i,a,i1,a1)
       ENDPARDO  a, i, a1, i1

       PARDO  a, i, b, j
          tiaia (i,a,j,b) = 0.0
          PREPARE  A2old_ab (i,a,j,b) = tiaia (i,a,j,b)
       ENDPARDO  a, i, b, j

       PARDO  a, i
          tia (i,a) = 0.0
          PUT  A1A_old (i,a) = tia (i,a)
       ENDPARDO  a, i

      execute  server_barrier

     ENDPROC READ_2EL
#
#------------------------------------------------------------------------



#------------------------------------------------------------------------
#
#     -----------------
      PROC  PRINT_XI_AB
#     --------------
#
#
      esum = 0.0
      etot = 0.0
      EXECUTE  SERVER_BARRIER
      EXECUTE  PRINT_SCALAR  etemp
      PARDO  a, i, a1, i1
         REQUEST              XI2_AB (a,i,a1,i1) a
         taiai (a,i,a1,i1)  = XI2_AB (a,i,a1,i1)
        #EXECUTE  DUMP_AMP  taiai
         etemp2 = taiai (a,i,a1,i1) * taiai (a,i,a1,i1)
         esum += etemp2
      ENDPARDO  a, i, a1, i1
      EXECUTE  SERVER_BARRIER
      COLLECTIVE  etot += esum
      EXECUTE  SIP_BARRIER
      EXECUTE  PRINT_SCALAR  etot
#
#
#     ...ready!
#
#
      ENDPROC  PRINT_XI_AB
#------------------------------------------------------------------------



#------------------------------------------------------------------------
#
#     ----------------
      PROC  PRINT_D2AA
#     ----------------
#
#
      esum = 0.0
      etot = 0.0
      EXECUTE  SERVER_BARRIER
      PARDO  a, i, a1, i1
         GET                  D2AA (a,i,a1,i1)
         taiai (a,i,a1,i1)  = D2AA (a,i,a1,i1)
       # EXECUTE  DUMP_AMP  taiai
         etemp2 = taiai (a,i,a1,i1) * taiai (a,i,a1,i1)
         esum += etemp2
      ENDPARDO  a, i, a1, i1
      EXECUTE  SERVER_BARRIER
      COLLECTIVE  etot += esum
      EXECUTE  SIP_BARRIER
      EXECUTE  PRINT_SCALAR  etot
#
#
#     ...ready!
#
#
      ENDPROC  PRINT_D2AA
#------------------------------------------------------------------------



#------------------------------------------------------------------------
#
#     -----------------
      PROC  PRINT_XI_AA
#     --------------
#
#
      esum = 0.0
      etot = 0.0
      EXECUTE  SERVER_BARRIER
      PARDO  a, i, a1, i1
         REQUEST              XI2_AA (a,i,a1,i1) a
         taiai (a,i,a1,i1)  = XI2_AA (a,i,a1,i1)
        #EXECUTE  DUMP_AMP  taiai
         etemp2 = taiai (a,i,a1,i1) * taiai (a,i,a1,i1)
         esum += etemp2
      ENDPARDO  a, i, a1, i1
      EXECUTE  SERVER_BARRIER
      COLLECTIVE  etot += esum
      EXECUTE  SIP_BARRIER
      EXECUTE  PRINT_SCALAR  etot
#
#
#     ...ready!
#
#
      ENDPROC  PRINT_XI_AA
#------------------------------------------------------------------------
#
#
#
#------------------------------------------------------------------------
#
#     ----------------
      PROC  PRINT_XI_A
#     ----------------
#
#
      esum = 0.0
      etot = 0.0
      EXECUTE  SERVER_BARRIER
      EXECUTE  PRINT_SCALAR  etemp1
      PARDO  a, i
         GET          XI1_A (a,i)
         tai (a,i)  = XI1_A (a,i)
        #EXECUTE  DUMP_AMP  tai
         etemp2 = tai (a,i) * tai (a,i)
         esum += etemp2
      ENDPARDO  a, i
      EXECUTE  SERVER_BARRIER
      COLLECTIVE  etot += esum
      EXECUTE  SIP_BARRIER
      EXECUTE  PRINT_SCALAR  etot
#
#
#     ...ready!
#
#
      ENDPROC  PRINT_XI_A
#------------------------------------------------------------------------
#
#
#
#
#          Watson, beginning the gradient code.
#
#                 1) Calculate Xi
#                 2) Calculate Z
#
#                               _
#                    Xi = <0| L H |q><q|R|p>
#
#                                      _      -1
#                    Z  = -<0|Xi|p><p| H-E  |p>
#                                         0
#
#------------------------------------------------------------------------
#
#     ----------------------
      PROC  XI_INTERMEDIATES
#     ----------------------
#
#
#
     PARDO i1, b, i, j
           T1pqpq(i1,b,i,j)         = 0.0
           PREPARE Njjai(i1,b,i,j) = T1pqpq(i1,b,i,j)
           PREPARE Niibj(i1,b,i,j) = T1pqpq(i1,b,i,j)
     ENDPARDO i1, b, i, j

     PARDO i, i1, i2, a
           T1pppp(i1,a,i,i2)        = 0.0
           prepare Niiai(i1,a,i,i2) = T1pppp(i1,a,i,i2)
     ENDPARDO i, i1, i2, a

     PARDO i, i1, j, j1
           tiijj(i,i1,j,j1) = 0.0
           put Niijj(i,i1,j,j1) = tiijj(i,i1,j,j1)
     ENDPARDO i, i1, j, j1

     PARDO i, i1, i2, i3
           tiiii(i,i1,i2,i3) = 0.0
           PUT Niiii(i,i1,i2,i3) = tiiii(i,i1,i2,i3)
     ENDPARDO i, i1, i2, i3

      CREATE  R2L2_iijj
      CREATE  R2L2_iiii
      CREATE  R2G2_iijj
      CREATE  R2G2_iiii
      ALLOCATE  LR1W_ai  (*,*)
      ALLOCATE  LR1W_ii  (*,*)
      ALLOCATE  LR1W_aa  (*,*)
      ALLOCATE  LR1L2_ai (*,*)
      ALLOCATE  LR2L1_ai (*,*)
      ALLOCATE  LR2W2_ai (*,*)
      ALLOCATE  LR2W2_aa (*,*)
      ALLOCATE  LR2W2_ii (*,*)
      ALLOCATE  LR2L2_aa (*,*)
      ALLOCATE  LR2L2_ii (*,*)
      EXECUTE  SERVER_BARRIER
#
#
#     Ring intermediates (L2 * T2  AND  L2 * R2)
#
#     The L2R2 is used in computing XI.  L2T2 is computed as well
#     and is only used in the density.
#
#
      PARDO  a, a2, i2, a1
         ALLOCATE  LLaiai (a2,i2,a1,*)
         DO i1
            REQUEST                 L2AA (i1,a1,i2,a2) i1
            LLaiai (a2,i2,a1,i1)  = L2AA (i1,a1,i2,a2)
         ENDDO i1
         DO i
            REQUEST  R2AA (a,i,a2,i2) i
            REQUEST  T2old_aa (a,i,a2,i2) i
            DO i1
               taiai  (a,i,a1,i1) = R2AA (a,i,a2,i2) * LLaiai (a2,i2,a1,i1)
               t1aiai (a,i,a1,i1) = T2old_aa (a,i,a2,i2) * LLaiai (a2,i2,a1,i1)

               tiaia  (i,a1,i1,a) = taiai  (a,i,a1,i1)
               t1iaia (i,a1,i1,a) = t1aiai (a,i,a1,i1)

               PREPARE  L2R2_aaaa (i,a1,i1,a) += tiaia  (i,a1,i1,a)
               PREPARE  L2T2_aaaa (i,a1,i1,a) += t1iaia (i,a1,i1,a)
            ENDDO i1
         ENDDO i
         DEALLOCATE  LLaiai (a2,i2,a1,*)
      ENDPARDO  a, a2, i2, a1

      PARDO  a, b2, j2, a1
         ALLOCATE  LLbjai (b2,j2,a1,*)
         DO i1
            REQUEST                L2AB (i1,a1,j2,b2) i1
            LLbjai (b2,j2,a1,i1)  = L2AB (i1,a1,j2,b2)
         ENDDO i1
         DO i
            REQUEST  R2AB (a,i,b2,j2) i
            REQUEST  T2old_ab (a,i,b2,j2) i
            DO i1
               taiai  (a,i,a1,i1) = R2AB (a,i,b2,j2) * LLbjai (b2,j2,a1,i1)
               t1aiai (a,i,a1,i1) = T2old_ab (a,i,b2,j2) * LLbjai (b2,j2,a1,i1)

               tiaia  (i,a1,i1,a) = taiai  (a,i,a1,i1)
               t1iaia (i,a1,i1,a) = t1aiai (a,i,a1,i1)

               PREPARE  L2R2_aaaa (i,a1,i1,a) += tiaia  (i,a1,i1,a)
               PREPARE  L2T2_aaaa (i,a1,i1,a) += t1iaia (i,a1,i1,a)
            ENDDO i1
         ENDDO i
         DEALLOCATE  LLbjai (b2,j2,a1,*)
      ENDPARDO  a, b2, j2, a1

      PARDO  a, a2, i2, b1
         ALLOCATE  Laibj (a2,i2,b1,*)
         DO j1
            REQUEST                L2AB (i2,a2,j1,b1) j1
            Laibj (a2,i2,b1,j1)  = L2AB (i2,a2,j1,b1)
         ENDDO j1
         DO i
            REQUEST  R2AA (a,i,a2,i2) i
            REQUEST  T2old_aa (a,i,a2,i2) i
            DO j1
               taibj  (a,i,b1,j1) = R2AA (a,i,a2,i2) * Laibj (a2,i2,b1,j1)
               t1aibj (a,i,b1,j1) = T2old_aa (a,i,a2,i2) * Laibj (a2,i2,b1,j1)

               tpqqp  (i,b1,j1,a) = taibj  (a,i,b1,j1)
               t1pqqp (i,b1,j1,a) = t1aibj (a,i,b1,j1)

               PREPARE  L2R2_abba (i,b1,j1,a) += tpqqp  (i,b1,j1,a)
               PREPARE  L2T2_abba (i,b1,j1,a) += t1pqqp (i,b1,j1,a)
            ENDDO j1
         ENDDO i
         DEALLOCATE  Laibj (a2,i2,b1,*)
      ENDPARDO  a, a2, i2, b1

      PARDO  a, b2, j2, b1
         ALLOCATE  LLbjbj (b2,j2,b1,*)
         DO j1
            REQUEST                L2AA (j2,b2,j1,b1) j1
            LLbjbj (b2,j2,b1,j1)  = L2AA (j2,b2,j1,b1)
         ENDDO j1
         DO i
            REQUEST  R2AB (a,i,b2,j2) i
            REQUEST  T2old_ab (a,i,b2,j2) i
            DO j1
               taibj  (a,i,b1,j1) = R2AB (a,i,b2,j2) * LLbjbj (b2,j2,b1,j1)
               t1aibj (a,i,b1,j1) = T2old_ab (a,i,b2,j2) * LLbjbj (b2,j2,b1,j1)

               tpqqp  (i,b1,j1,a) = taibj  (a,i,b1,j1)
               t1pqqp (i,b1,j1,a) = t1aibj (a,i,b1,j1)

               PREPARE  L2R2_abba (i,b1,j1,a) += tpqqp  (i,b1,j1,a)
               PREPARE  L2T2_abba (i,b1,j1,a) += t1pqqp (i,b1,j1,a)
            ENDDO j1
         ENDDO i
         DEALLOCATE  LLbjbj (b2,j2,b1,*)
      ENDPARDO  a, b2, j2, b1

      PARDO  b, a2, j2, b1
         ALLOCATE  Lajib (a2,j2,*,b1)
         DO i1
            REQUEST                L2AB (i1,a2,j2,b1) i1
            Lajib (a2,j2,i1,b1)  = L2AB (i1,a2,j2,b1)
         ENDDO i1
         DO i
            REQUEST              R2AB (a2,i,b,j2) i
            REQUEST              T2old_ab (a2,i,b,j2) i
            tpqpq  (i,b,a2,j2) = R2AB (a2,i,b,j2)
            t1pqpq (i,b,a2,j2) = T2old_ab (a2,i,b,j2)
            DO i1
               tibib  (i,b,i1,b1) = tpqpq  (i,b,a2,j2) * Lajib (a2,j2,i1,b1)
               t1ibib (i,b,i1,b1) = t1pqpq (i,b,a2,j2) * Lajib (a2,j2,i1,b1)

               PREPARE  L2R2_abab (i,b,i1,b1) += tibib  (i,b,i1,b1)
               PREPARE  L2T2_abab (i,b,i1,b1) += t1ibib (i,b,i1,b1)
            ENDDO i1
         ENDDO i
         DEALLOCATE  Lajib (a2,j2,*,b1)
      ENDPARDO  b, a2, j2, b1
#
#
#
#
#
      PARDO  a1, a3, i3, a2
         ALLOCATE  Liiaa (*,i3,a2,a3)
         DO i2
            REQUEST               R2AA (a2,i2,a3,i3) i2
            Liiaa (i2,i3,a2,a3) = R2AA (a2,i2,a3,i3)
         ENDDO i2
         DO i
            REQUEST              HBAR_AIBC_aaaa (a1,a2,i,a3) i
            tpppp (a2,a3,a1,i) = HBAR_AIBC_aaaa (a1,a2,i,a3)
            DO i2
               tiiai (i2,i3,a1,i)  = Liiaa (i2,i3,a2,a3) * tpppp (a2,a3,a1,i)
               tiiai (i2,i3,a1,i) *= -0.5
               tiaii (i2,a1,i3,i)  = tiiai (i2,i3,a1,i)
               PREPARE  Niiai (i2,a1,i3,i) += tiaii (i2,a1,i3,i)
            ENDDO i2
         ENDDO i
         DEALLOCATE  Liiaa (*,i3,a2,a3)
      ENDPARDO  a1, a3, i3, a2

      PARDO  b1, a3, i3, b2
         ALLOCATE Lqqpp (*,i3,b2,a3)
         DO j2
            REQUEST               R2AB (a3,i3,b2,j2) j2
            Lqqpp (j2,i3,b2,a3) = R2AB (a3,i3,b2,j2)
         ENDDO j2
         DO i
            REQUEST              HBAR_AIBC_aabb (b1,b2,i,a3) i
            tqpqp (b2,a3,b1,i) = HBAR_AIBC_aabb (b1,b2,i,a3)
            DO j2
               tjibi (j2,i3,b1,i)  = Lqqpp (j2,i3,b2,a3) * tqpqp (b2,a3,b1,i)
               tibij (i,b1,i3,j2)  = tjibi (j2,i3,b1,i)
               tibij (i,b1,i3,j2) *= -1.0
               PREPARE  Niibj (i,b1,i3,j2) += tibij (i,b1,i3,j2)
            ENDDO j2
         ENDDO i
         DEALLOCATE  Lqqpp (*,i3,b2,a3)
      ENDPARDO  b1, a3, i3, b2
#
#
#
#
#
      PARDO  a2, i2, a1, a3
         REQUEST               HBAR_AIBC_aaaa (a3,a1,i2,a2) a3
         tpppp (a1,a3,a2,i2) = HBAR_AIBC_aaaa (a3,a1,i2,a2)
         GET  R1A (a2,i2)
         taa (a1,a3)  = tpppp (a1,a3,a2,i2) * R1A (a2,i2)
         LR1W_aa (a1,a3) += taa (a1,a3)
      ENDPARDO  a2, i2, a1, a3

      PARDO  b2, j2, a1, a3
         REQUEST               HBAR_AIBC_aabb (a3,a1,j2,b2) a3
         tppqq (a1,a3,b2,j2) = HBAR_AIBC_aabb (a3,a1,j2,b2)
         GET  R1A (b2,j2)
         taa (a1,a3)  = tppqq (a1,a3,b2,j2) * R1A (b2,j2)
         LR1W_aa (a1,a3) += taa (a1,a3)
      ENDPARDO  b2, j2, a1, a3
#
#
#
#
#
      PARDO  i2, a2, a3, i
         ALLOCATE  LLaiai  (a2,i,a3,*)
         ALLOCATE  L1aiai (a2,i,a3,*)
         DO i1
            REQUEST               L2AA   (i,a2,i1,a3) i1
            REQUEST               VSpipi (a2,i,a3,i1) i1
            LLaiai  (a2,i,a3,i1) = L2AA   (i,a2,i1,a3)
            L1aiai (a2,i,a3,i1) = VSpipi (a2,i,a3,i1)
         ENDDO i1
         DO i3
            REQUEST               R2AA (a2,i2,a3,i3) i3
            taiai (a2,i2,a3,i3) = R2AA (a2,i2,a3,i3)
            DO i1
               tppqq  (i2,i,i3,i1)  = R2AA  (a2,i2,a3,i3) * LLaiai (a2,i,a3,i1)
               t1ppqq (i2,i,i3,i1)  = taiai (a2,i2,a3,i3) * L1aiai (a2,i,a3,i1)
               PUT  R2L2_iiii (i2,i,i3,i1) += tppqq  (i2,i,i3,i1)
               PUT  R2G2_iiii (i2,i,i3,i1) += t1ppqq (i2,i,i3,i1)
            ENDDO i1
         ENDDO i3
         DEALLOCATE  LLaiai  (a2,i,a3,*)
         DEALLOCATE  L1aiai (a2,i,a3,*)
      ENDPARDO  i2, a2, a3, i

      PARDO  i2, a2, b2, i
         ALLOCATE  Laibj  (a2,i,b2,*)
         ALLOCATE  L1aibj (a2,i,b2,*)
         DO j
            REQUEST              L2AB  (i,a2,j,b2) j
            REQUEST              Vpiqj (a2,i,b2,j) j
            Laibj  (a2,i,b2,j) = L2AB  (i,a2,j,b2)
            L1aibj (a2,i,b2,j) = Vpiqj (a2,i,b2,j)
         ENDDO j
         DO j2
            REQUEST               R2AB (a2,i2,b2,j2) j2
            taibj (a2,i2,b2,j2) = R2AB (a2,i2,b2,j2)
            DO j
               tppqq  (i2,i,j2,j)  = R2AB  (a2,i2,b2,j2) * Laibj  (a2,i,b2,j)
               t1ppqq (i2,i,j2,j)  = taibj (a2,i2,b2,j2) * L1aibj (a2,i,b2,j)
               PUT  R2L2_iijj (i2,i,j2,j) += tppqq  (i2,i,j2,j)
               PUT  R2G2_iijj (i2,i,j2,j) += t1ppqq (i2,i,j2,j)
            ENDDO j
         ENDDO j2
         DEALLOCATE  Laibj  (a2,i,b2,*)
         DEALLOCATE  L1aibj (a2,i,b2,*)
      ENDPARDO  i2, a2, b2, i
#
#
#
#
#
      PARDO  a2, i2, a1, i1
         REQUEST       VSpipi (a1,i1,a2,i2) a1
         GET           R1A (a2,i2)
         tpp (a1,i1) = VSpipi (a1,i1,a2,i2) * R1A (a2,i2)
         LR1W_ai (a1,i1) += tpp (a1,i1)
      ENDPARDO  a2, i2, a1, i1

      PARDO  b2, j2, a1, i1
         REQUEST       Vpiqj (a1,i1,b2,j2) a1
         GET           R1A (b2,j2)
         tpp (a1,i1) = Vpiqj (a1,i1,b2,j2) * R1A (b2,j2)
         LR1W_ai (a1,i1) += tpp (a1,i1)
      ENDPARDO  b2, j2, a1, i1
#
#
#
#
#
      PARDO  a2, i2, i1, i3
         REQUEST  HBAR_JKIA_aaaa (i1,i3,i2,a2) i1
         GET  R1A (a2,i2)
         tia (i2,a2) = R1A (a2,i2)
         tii (i1,i3) = HBAR_JKIA_aaaa (i1,i3,i2,a2) * tia (i2,a2)
         LR1W_ii (i1,i3) += tii (i1,i3)
      ENDPARDO  a2, i2, i1, i3

      PARDO  b2, j2, i1, i3
         REQUEST  HBAR_JKIA_aabb (i1,i3,j2,b2) i1
         GET  R1A (b2,j2)
         tia (j2,b2) = R1A (b2,j2)
         tii (i1,i3) = HBAR_JKIA_aabb (i1,i3,j2,b2) * tia (j2,b2)
         LR1W_ii (i1,i3) += tii (i1,i3)
      ENDPARDO  b2, j2, i1, i3
#
#
#
#
#
      PARDO  a2, i2, a, i
         REQUEST             R2AA (a,i,a2,i2) a2
         GET                 L1A  (i2,a2)
         tpp  (a2,i2)      = L1A  (i2,a2)
         t1ai (a,i)        = R2AA  (a,i,a2,i2) * tpp (a2,i2)
         LR2L1_ai (a,i)   += t1ai (a,i)
      ENDPARDO  a2, i2, a, i

      PARDO  i2, a2, a, i
         REQUEST             L2AA (i2,a2,i,a) i2
         GET                 R1A  (a2,i2)
         taiai (a2,i2,a,i) = L2AA (i2,a2,i,a)
         tpp   (a2,i2)     = R1A (a2,i2)
         tai  (a,i)        = tpp (a2,i2) * taiai (a2,i2,a,i)
         LR1L2_ai (a,i) += tai (a,i)
      ENDPARDO  i2, a2, a, i

      PARDO  b2, j2, a, i
         REQUEST              R2AB (a,i,b2,j2) b2
         GET                  L1A (j2,b2)
         t2pp (b2,j2)       = L1A (j2,b2)
         t1ai (a,i)         = R2AB  (a,i,b2,j2) * t2pp (b2,j2)
         LR2L1_ai (a,i)   += t1ai (a,i)
      ENDPARDO  b2, j2, a, i

      PARDO  j2, b2, a, i
         REQUEST              L2AB (i,a,j2,b2) j2
         GET                  R1A (b2,j2)
         taibj (a,i,b2,j2)  = L2AB (i,a,j2,b2)
         tqq  (b2,j2)       = R1A (b2,j2)
         tai  (a,i)         = taibj (a,i,b2,j2) * tqq (b2,j2)
         LR1L2_ai (a,i) += tai (a,i)
      ENDPARDO  j2, b2, a, i
#
#
#
#
#
      PARDO  a2, a3, i2
         ALLOCATE  LLaiai (a2,i2,a3,*)
         DO i1
            REQUEST               R2AA (a2,i2,a3,i1) i1
            LLaiai (a2,i2,a3,i1) = R2AA (a2,i2,a3,i1)
         ENDDO i1
         DO a1
            REQUEST               HBAR_AIBC_aaaa (a1,a3,i2,a2) a1
            tpppp (a1,a2,i2,a3) = HBAR_AIBC_aaaa (a1,a3,i2,a2)
            DO i1
               tai (a1,i1)  = tpppp (a1,a2,i2,a3) * LLaiai (a2,i2,a3,i1)
               tai (a1,i1) *= 0.5
               LR2W2_ai (a1,i1) += tai (a1,i1)
            ENDDO i1
         ENDDO a1
         DEALLOCATE  LLaiai (a2,i2,a3,*)
      ENDPARDO  a2, a3, i2

      PARDO  b2, a3, j2
         ALLOCATE  LLaiai (b2,j2,a3,*)
         DO i1
            REQUEST               R2AB (a3,i1,b2,j2) i1
            LLaiai (b2,j2,a3,i1) = R2AB (a3,i1,b2,j2)
         ENDDO i1
         DO a1
            REQUEST               HBAR_AIBC_aabb (a1,a3,j2,b2) a1
            tpppp (a1,b2,j2,a3) = HBAR_AIBC_aabb (a1,a3,j2,b2)
            DO i1
               tai (a1,i1)  = tpppp (a1,b2,j2,a3) * LLaiai (b2,j2,a3,i1)
               LR2W2_ai (a1,i1) += tai (a1,i1)
            ENDDO i1
         ENDDO a1
         DEALLOCATE  LLaiai (b2,j2,a3,*)
      ENDPARDO  b2, a3, j2

      PARDO  i2, a3, i3
         ALLOCATE  Liaii (i2,a3,i3,*)
         DO i1
            REQUEST               HBAR_JKIA_aaaa (i2,i1,i3,a3) i1
            Liaii (i2,a3,i3,i1) = HBAR_JKIA_aaaa (i2,i1,i3,a3)
         ENDDO i1
         DO a1
            REQUEST  R2AA (a1,i2,a3,i3) a1
            DO i1
               tai (a1,i1)  = R2AA (a1,i2,a3,i3) * Liaii (i2,a3,i3,i1)
               tai (a1,i1) *= -0.5
               LR2W2_ai (a1,i1) += tai (a1,i1)
            ENDDO i1
         ENDDO a1
         DEALLOCATE  Liaii (i2,a3,i3,*)
      ENDPARDO  i2, a3, i3

      PARDO  b3, j3, i2
         ALLOCATE  Liaii (i2,b3,j3,*)
         DO i1
            REQUEST               HBAR_JKIA_aabb (i2,i1,j3,b3) i1
            Liaii (i2,b3,j3,i1) = HBAR_JKIA_aabb (i2,i1,j3,b3)
         ENDDO i1
         DO a1
            REQUEST               R2AB (a1,i2,b3,j3) a1
            taibj (a1,i2,b3,j3) = R2AB (a1,i2,b3,j3)
            DO i1
               tai (a1,i1)  = taibj (a1,i2,b3,j3) * Liaii (i2,b3,j3,i1)
               tai (a1,i1) *= -1.0
               LR2W2_ai (a1,i1) += tai (a1,i1)
            ENDDO i1
         ENDDO a1
         DEALLOCATE  Liaii (i2,b3,j3,*)
      ENDPARDO  b3, j3, i2
#
#
#     R2 * L2 --> R2L2_aa
#     R2 * W2 --> R2W2_aa
#
#
      PARDO  a3, i2, i3
         ALLOCATE  Liaia (i3,a3,i2,*)
         DO a2
            REQUEST               R2AA (a2,i2,a3,i3) a2
            Liaia (i3,a3,i2,a2) = R2AA (a2,i2,a3,i3)
         ENDDO a2
         DO a
            REQUEST              VSpipi (a,i2,a3,i3) a
            REQUEST              L2AA   (i2,a,i3,a3) a
            taiai (a,i3,a3,i2) = L2AA   (i2,a,i3,a3)
            tpppp (a,i3,a3,i2) = VSpipi (a,i2,a3,i3)
            DO a2
               taa (a,a2)  = tpppp (a,i3,a3,i2) * Liaia (i3,a3,i2,a2)
               tpp (a,a2)  = taiai (a,i3,a3,i2) * Liaia (i3,a3,i2,a2)
               taa (a,a2) *= -0.5
               tpp (a,a2) *= -0.5
               LR2W2_aa (a,a2) += taa (a,a2)
               LR2L2_aa (a,a2) += tpp (a,a2)
            ENDDO a2
         ENDDO a
         DEALLOCATE  Liaia (i3,a3,i2,*)
      ENDPARDO  a3, i2, i3

      PARDO  b3, i2, j3
         ALLOCATE  Liaia (j3,b3,i2,*)
         DO a2
            REQUEST               R2AB (a2,i2,b3,j3) a2
            Liaia (j3,b3,i2,a2) = R2AB (a2,i2,b3,j3)
         ENDDO a2
         DO a
            REQUEST              Vpiqj (a,i2,b3,j3) a
            REQUEST              L2AB  (i2,a,j3,b3) a
            taiai (a,j3,b3,i2) = L2AB  (i2,a,j3,b3)
            tpppp (a,j3,b3,i2) = Vpiqj (a,i2,b3,j3)
            DO a2
               taa (a,a2)  = tpppp (a,j3,b3,i2) * Liaia (j3,b3,i2,a2)
               tpp (a,a2)  = taiai (a,j3,b3,i2) * Liaia (j3,b3,i2,a2)
               taa (a,a2) *= -1.0
               tpp (a,a2) *= -1.0
               LR2W2_aa (a,a2) += taa (a,a2)
               LR2L2_aa (a,a2) += tpp (a,a2)
            ENDDO a2
         ENDDO a
         DEALLOCATE  Liaia (j3,b3,i2,*)
      ENDPARDO  b3, i2, j3

      PARDO  i3, a2, a3
         ALLOCATE  Liaia (*,a2,i3,a3)
         DO i2
            REQUEST                R2AA (a2,i2,a3,i3) i2
            Liaia (i2,a2,i3,a3)  = R2AA (a2,i2,a3,i3)
            Liaia (i2,a2,i3,a3) *= 0.5
         ENDDO i2
         DO i
            REQUEST              VSpipi (a2,i,a3,i3) i
            REQUEST              L2AA   (i,a2,i3,a3) i
            taiai (a2,i3,a3,i) = VSpipi (a2,i,a3,i3)
            tpppp (a2,i3,a3,i) = L2AA   (i,a2,i3,a3)
            DO i2
               tii (i2,i)  = Liaia (i2,a2,i3,a3) * taiai (a2,i3,a3,i)
               tpp (i2,i)  = Liaia (i2,a2,i3,a3) * tpppp (a2,i3,a3,i)
               LR2W2_ii (i2,i) += tii (i2,i)
               LR2L2_ii (i2,i) += tpp (i2,i)
            ENDDO i2
         ENDDO i
         DEALLOCATE  Liaia (*,a2,i3,a3)
      ENDPARDO  i3, a2, a3

      PARDO  j3, a2, b3
         ALLOCATE  Liaia (*,a2,j3,b3)
         DO i2
            REQUEST                R2AB (a2,i2,b3,j3) i2
            Liaia (i2,a2,j3,b3)  = R2AB (a2,i2,b3,j3)
         ENDDO i2
         DO i
            REQUEST              Vpiqj (a2,i,b3,j3) i
            REQUEST              L2AB  (i,a2,j3,b3) i
            taiai (a2,j3,b3,i) = Vpiqj (a2,i,b3,j3)
            tpppp (a2,j3,b3,i) = L2AB  (i,a2,j3,b3)
            DO i2
               tii (i2,i)  = Liaia (i2,a2,j3,b3) * taiai (a2,j3,b3,i)
               tpp (i2,i)  = Liaia (i2,a2,j3,b3) * tpppp (a2,j3,b3,i)
               LR2W2_ii (i2,i) += tii (i2,i)
               LR2L2_ii (i2,i) += tpp (i2,i)
            ENDDO i2
         ENDDO i
         DEALLOCATE  Liaia (*,b2,j3,a3)
      ENDPARDO  j3, a2, b3
#
#
#          Done computing the intermediates!
#          Put them fully into the local arrays!
#
#
      CREATE  DIS_VO1
      CREATE  DIS_VO2
      CREATE  DIS_VO3
      CREATE  DIS_VO4
      CREATE  DIS_OO1
      CREATE  DIS_OO2
      CREATE  DIS_OO3
      CREATE  DIS_VV1
      CREATE  DIS_VV2
      CREATE  DIS_VV3
      EXECUTE  SIP_BARRIER

      DO i1
      DO a
         tpp  (a,i1) = LR1W_ai  (a,i1)
         t1pp (a,i1) = LR1L2_ai (a,i1)
         t2pp (a,i1) = LR2L1_ai (a,i1)
         t3pp (a,i1) = LR2W2_ai (a,i1)
         PUT  DIS_VO1 (a,i1) += tpp  (a,i1)
         PUT  DIS_VO2 (a,i1) += t1pp (a,i1)
         PUT  DIS_VO3 (a,i1) += t2pp (a,i1)
         PUT  DIS_VO4 (a,i1) += t3pp (a,i1)
      ENDDO a
      ENDDO i1

      DO i1
      DO i
         tpp  (i,i1) = LR1W_ii  (i,i1)
         t1pp (i,i1) = LR2W2_ii (i,i1)
         t2pp (i,i1) = LR2L2_ii (i,i1)
         PUT  DIS_OO1 (i,i1) += tpp  (i,i1)
         PUT  DIS_OO2 (i,i1) += t1pp (i,i1)
         PUT  DIS_OO3 (i,i1) += t2pp (i,i1)
      ENDDO i
      ENDDO i1

      DO a1
      DO a
         tpp  (a,a1) = LR1W_aa  (a,a1)
         t1pp (a,a1) = LR2W2_aa (a,a1)
         t2pp (a,a1) = LR2L2_aa (a,a1)
         PUT  DIS_VV1 (a,a1) += tpp  (a,a1)
         PUT  DIS_VV2 (a,a1) += t1pp (a,a1)
         PUT  DIS_VV3 (a,a1) += t2pp (a,a1)
      ENDDO a
      ENDDO a1

      EXECUTE  SIP_BARRIER

      DO i1
      DO a
         GET  DIS_VO1 (a,i1)
         GET  DIS_VO2 (a,i1)
         GET  DIS_VO3 (a,i1)
         GET  DIS_VO4 (a,i1)
         LR1W_ai  (a,i1) = DIS_VO1 (a,i1)
         LR1L2_ai (a,i1) = DIS_VO2 (a,i1)
         LR2L1_ai (a,i1) = DIS_VO3 (a,i1)
         LR2W2_ai (a,i1) = DIS_VO4 (a,i1)
      ENDDO a
      ENDDO i1

      DO i1
      DO i
            GET  DIS_OO1 (i,i1)
            GET  DIS_OO2 (i,i1)
            GET  DIS_OO3 (i,i1)
            LR1W_ii  (i,i1) = DIS_OO1 (i,i1)
            LR2W2_ii (i,i1) = DIS_OO2 (i,i1)
            LR2L2_ii (i,i1) = DIS_OO3 (i,i1)
      ENDDO i
      ENDDO i1

      DO a1
      DO a
         GET  DIS_VV1 (a,a1)
         GET  DIS_VV2 (a,a1)
         GET  DIS_VV3 (a,a1)
         LR1W_aa  (a,a1) = DIS_VV1 (a,a1)
         LR2W2_aa (a,a1) = DIS_VV2 (a,a1)
         LR2L2_aa (a,a1) = DIS_VV3 (a,a1)
      ENDDO a 
      ENDDO a1

      EXECUTE  SERVER_BARRIER

      DELETE  DIS_VO1
      DELETE  DIS_VO2
      DELETE  DIS_VO3
      DELETE  DIS_VO4
      DELETE  DIS_OO1
      DELETE  DIS_OO2
      DELETE  DIS_OO3
      DELETE  DIS_VV1
      DELETE  DIS_VV2
      DELETE  DIS_VV3
#
#
#     ...ready!
#
#
      ENDPROC  XI_INTERMEDIATES
#------------------------------------------------------------------------



#------------------------------------------------------------------------
#
#     --------------
      PROC  HEAVY_XI
#     --------------
#
#
#       ij               im  ef  jn
#      X   = P(ij)P(ab) l   r   g         1 in R2 L2 G
#       ab               ae  mn  bf
#
#
      PARDO  a, a2, i2, a1
         ALLOCATE  LLaiai (a2,i2,a1,*)
         DO i1
            REQUEST               VSpipi (a2,i2,a1,i1) i1
            LLaiai (a2,i2,a1,i1) = VSpipi (a2,i2,a1,i1)
         ENDDO i1
         DO i
            REQUEST             L2R2_aaaa (i2,a,i,a2) i
            tpppp (a,i,a2,i2) = L2R2_aaaa (i2,a,i,a2)
            DO i1
               taiai (a,i,a1,i1) = tpppp (a,i,a2,i2) * LLaiai (a2,i2,a1,i1)
               PUT  D2aa (a,i,a1,i1) += taiai (a,i,a1,i1)
            ENDDO i1
         ENDDO i
         DEALLOCATE  LLaiai (a2,i2,a1,*)
      ENDPARDO  a, a2, i2, a1

      PARDO  a, b2, j2, a1
         ALLOCATE  LLbjai (b2,j2,a1,*)
         DO i1
            REQUEST               Vpiqj (a1,i1,b2,j2) i1
            LLbjai (b2,j2,a1,i1) = Vpiqj (a1,i1,b2,j2)
         ENDDO i1
         DO i
            REQUEST             L2R2_abba (j2,a,i,b2) i
            tppqq (a,i,b2,j2) = L2R2_abba (j2,a,i,b2)
            DO i1
               taiai (a,i,a1,i1) = tppqq (a,i,b2,j2) * LLbjai (b2,j2,a1,i1)
               PUT D2aa (a,i,a1,i1) += taiai (a,i,a1,i1)
            ENDDO i1
         ENDDO i
         DEALLOCATE  LLbjai (b2,j2,a1,*)
      ENDPARDO  a, b2, j2, a1

      PARDO  b, a1, i1, a
         ALLOCATE  LLaiai  (a,*,a1,i1)
         ALLOCATE  L1aiai (a,*,a1,i1)
         DO i
            REQUEST              VSpipi    (a,i,a1,i1) i
            REQUEST              L2R2_aaaa (i1,a,i,a1) i
            LLaiai  (a,i,a1,i1) = VSpipi    (a,i,a1,i1)
            L1aiai (a,i,a1,i1) = L2R2_aaaa (i1,a,i,a1)
         ENDDO i
         DO j
            REQUEST  L2R2_abba (i1,b,j,a1) j
            REQUEST  Vpiqj     (a1,i1,b,j) j
            t1ppqq (a1,i1,b,j) = L2R2_abba (i1,b,j,a1)
            DO i
               taibj (a,i,b,j)  = LLaiai  (a,i,a1,i1) * t1ppqq (a1,i1,b,j)
               tppqq (a,i,b,j)  = L1aiai (a,i,a1,i1) * Vpiqj  (a1,i1,b,j)
               taibj (a,i,b,j) += tppqq (a,i,b,j)
               PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
            ENDDO i
         ENDDO j
         DEALLOCATE  LLaiai  (a,*,a1,i1)
         DEALLOCATE  L1aiai (a,*,a1,i1)
      ENDPARDO  b, a1, i1, a

      PARDO  b, a, b1, j1
         ALLOCATE  Laibj  (a,*,b1,j1)
         ALLOCATE  L1aibj (a,*,b1,j1)
         DO i
            REQUEST              Vpiqj     (a,i,b1,j1) i
            REQUEST              L2R2_abba (j1,a,i,b1) i
            Laibj  (a,i,b1,j1) = Vpiqj     (a,i,b1,j1)
            L1aibj (a,i,b1,j1) = L2R2_abba (j1,a,i,b1)
         ENDDO i
         DO j
            REQUEST  L2R2_aaaa (j1,b,j,b1) j
            REQUEST  VSpipi    (b1,j1,b,j) j
            tqqqq (b1,j1,b,j) = L2R2_aaaa (j1,b,j,b1)
            DO i 
               taibj (a,i,b,j)  = Laibj  (a,i,b1,j1) * tqqqq  (b1,j1,b,j)
               tppqq (a,i,b,j)  = L1aibj (a,i,b1,j1) * VSpipi (b1,j1,b,j)
               taibj (a,i,b,j) += tppqq (a,i,b,j)
               PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
            ENDDO i
         ENDDO j
         DEALLOCATE  Laibj  (a,*,b1,j1)
         DEALLOCATE  L1aibj (a,*,b1,j1)
      ENDPARDO  b, a, b1, j1

      PARDO  b, a1, j1, a
         ALLOCATE  Laajj (a,a1,j1,*)
         DO j
            REQUEST             L2R2_abab (j1,a1,j,a) j
            Laajj (a,a1,j1,j) = L2R2_abab (j1,a1,j,a)
         ENDDO j
         DO i
            REQUEST             Vpiqj (a1,i,b,j1) i
            tiajb (i,a1,j1,b) = Vpiqj (a1,i,b,j1)
            DO j
               tppqq (i,a,j,b)  = tiajb (i,a1,j1,b) * Laajj (a,a1,j1,j)
               taibj (a,i,b,j)  = tppqq (i,a,j,b)
               PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
            ENDDO j
         ENDDO i
         DEALLOCATE  Laajj (a,a1,j1,*)
      ENDPARDO  b, a1, j1, a

      PARDO  a, b1, i1, b
         ALLOCATE  Liibb (*,i1,b1,b)
         DO i
            REQUEST             L2R2_abab (i1,b1,i,b) i
            Liibb (i,i1,b1,b) = L2R2_abab (i1,b1,i,b)
         ENDDO i
         DO j
            REQUEST  Vpiqj (a,i1,b1,j) j
            DO i
               taibj (a,i,b,j) = Vpiqj (a,i1,b1,j) * Liibb (i,i1,b1,b)
               PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
            ENDDO i
         ENDDO j
         DEALLOCATE  Liibb (*,i1,b1,b)
      ENDPARDO  a, b1, i1, b
#
#
#       ij          im  e  fj
#      X   = P(ij) l   r  G       1 in R1 L2 G
#       ab          fe  m  ab
#     
#        
      PARDO  a2, a, i1, a1
         REQUEST              HBAR_AIBC_aaaa (a2,a,i1,a1) a2
         tpppp (a,a2,a1,i1) = HBAR_AIBC_aaaa (a2,a,i1,a1)
         DO i
            taiai  (a,i,a1,i1)  = LR1L2_ai (a2,i) * tpppp (a,a2,a1,i1)
            t1aiai (a,i1,a1,i)  = taiai (a,i,a1,i1)
            t1aiai (a,i1,a1,i) *= -1.0
            PREPARE  XI2_AA (a,i,a1,i1) += taiai  (a,i,a1,i1)
            PREPARE  XI2_AA (a,i1,a1,i) += t1aiai (a,i1,a1,i)
         ENDDO i
      ENDPARDO  a2, a, i1, a1

      PARDO  a2, a, j, b     
         REQUEST            HBAR_AIBC_aabb (a2,a,j,b) a2
         tppqq (a,a2,b,j) = HBAR_AIBC_aabb (a2,a,j,b)
         DO i
            tia (i,a2) = LR1L2_ai (a2,i) 
            taibj (a,i,b,j)  = tia (i,a2) * tppqq (a,a2,b,j)
            PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
         ENDDO i
      ENDPARDO  a2, a, j, b
      
      PARDO  b2, a, i, b
         REQUEST            HBAR_AIBC_aabb (b2,b,i,a) b2
         tppqq (a,i,b,b2) = HBAR_AIBC_aabb (b2,b,i,a)
         DO j
            taibj (a,i,b,j) = tppqq (a,i,b,b2) * LR1L2_ai (b2,j)
            PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
         ENDDO j
      ENDPARDO  b2, a, i, b
#
#
#       i    im  ef  gn
#      X  = l   r   G     Using R2L2 ring intermediate
#       a    ge  mn  af
#
#
      PARDO  a2, a, i1, a1
         REQUEST              HBAR_AIBC_aaaa (a2,a,i1,a1) a2
         tpppp (a,a1,i1,a2) = HBAR_AIBC_aaaa (a2,a,i1,a1)
         DO i
            REQUEST  L2R2_aaaa (i1,a2,i,a1) i
            tai (a,i) = tpppp (a,a1,i1,a2) * L2R2_aaaa (i1,a2,i,a1)
            PUT  XI1_A (a,i) += tai (a,i)
         ENDDO i
      ENDPARDO  a2, a, i1, a1

      PARDO  a2, a, j1, b1
         REQUEST              HBAR_AIBC_aabb (a2,a,j1,b1) a2
         tpqqp (a,b1,j1,a2) = HBAR_AIBC_aabb (a2,a,j1,b1)
         DO i
            REQUEST  L2R2_abba (j1,a2,i,b1) i
            tai (a,i) = tpqqp (a,b1,j1,a2) * L2R2_abba (j1,a2,i,b1)
            PUT  XI1_A (a,i) += tai (a,i)
         ENDDO i
      ENDPARDO  a2, a, j1, b1

      PARDO  b2, b1, i1, a
         REQUEST              HBAR_AIBC_aabb (b2,b1,i1,a) b2
         tppqq (a,i1,b1,b2) = HBAR_AIBC_aabb (b2,b1,i1,a)
         DO i
            REQUEST              L2R2_abab (i1,b1,i,b2) i
            tpqqp (i1,b1,b2,i) = L2R2_abab (i1,b1,i,b2)
            tai (a,i)  = tppqq (a,i1,b1,b2) * tpqqp (i1,b1,b2,i)
            tai (a,i) *= -1.0
            PUT  XI1_A (a,i) += tai (a,i)
         ENDDO i
      ENDPARDO  b2, b1, i1, a
#
#
#       i        mn  eg  fi
#      X  = 1/2 l   r   G
#       a        ef  mn  ga
#
#
      PARDO  a1, a2, i, a
         REQUEST             HBAR_AIBC_aaaa (a1,a2,i,a) a1
         tpppp (a,i,a1,a2) = HBAR_AIBC_aaaa (a1,a2,i,a)
         tai (a,i) = tpppp (a,i,a1,a2) * LR2L2_aa (a1,a2)
         tai (a,i) *= -1.0
         PUT  XI1_A (a,i) += tai (a,i)
      ENDPARDO  a1, a2, i, a

      PARDO  b1, b2, i, a
         REQUEST             HBAR_AIBC_aabb (b1,b2,i,a) b1
         tppqq (a,i,b1,b2) = HBAR_AIBC_aabb (b1,b2,i,a)
         tai (a,i) = tppqq (a,i,b1,b2) * LR2L2_aa (b1,b2)
         tai (a,i) *= -1.0
         PUT  XI1_A (a,i) += tai (a,i)
      ENDPARDO  b1, b2, i, a
#
#
#       ij               im    f  ej    e  nj
#      X   = P(ij)P(ab) l   ( r  G   + r  G   )      7 and 8 in R1 L2 G
#       ab               ae    m  fb    n  mb
#
#      Hideous ring contractions...
#
#          There already exists 3 served arrays R2L2_xxxx.  To get the following
#          to scale (if it does not scale), we could make R1G_xxxx ring intermediates.
#
#          The reason I do no do this is because forming R1G_xxxx is N^5.
#          This creates an N^6 request, however, where the REQUEST is 2 DO loops in.
#
#
      PARDO i2, i1, a1, a2
         t1aiai (a2,i2,a1,i1) = 0.0
         DO a3
            REQUEST                HBAR_AIBC_aaaa (a2,a3,i1,a1) a3
            GET                    R1A (a3,i2)
            tpppp (a2,a3,a1,i1)  = HBAR_AIBC_aaaa (a2,a3,i1,a1) 
            taiai (a2,i2,a1,i1)  = tpppp (a2,a3,a1,i1) * R1A (a3,i2)
            t1aiai (a2,i2,a1,i1) += taiai (a2,i2,a1,i1)
         ENDDO a3

         DO i3
            REQUEST                HBAR_JKIA_aaaa (i3,i2,i1,a1) i3
            GET                    R1A (a2,i3)
            tai (a2,i3)          = R1A (a2,i3)
            tpppp (i3,i2,a1,i1)  = HBAR_JKIA_aaaa (i3,i2,i1,a1)
            taiai (a2,i2,a1,i1)  = R1A (a2,i3) * tpppp (i3,i2,a1,i1)
            t1aiai (a2,i2,a1,i1) -= taiai (a2,i2,a1,i1)
         ENDDO i3

         DO i
         DO a
            REQUEST               L2AA (i,a,i2,a2) a
            t2pppp (a,i,a2,i2)  = L2AA (i,a,i2,a2) 
            t1pppp (a,i,a1,i1)  = t2pppp (a,i,a2,i2) * t1aiai (a2,i2,a1,i1)

            PUT  D2aa (a,i,a1,i1) += t1pppp (a,i,a1,i1)
         ENDDO a
         ENDDO i
      ENDPARDO  i2, i1, a1, a2

      PARDO j2, i1, a1, b2
         t1aiai (b2,j2,a1,i1) = 0.0
         DO b3
            REQUEST                HBAR_AIBC_aabb (b2,b3,i1,a1) b3
            GET                    R1A (b3,j2)
            tpppp (b2,b3,a1,i1)  = HBAR_AIBC_aabb (b2,b3,i1,a1)
            taiai (b2,j2,a1,i1)  = tpppp (b2,b3,a1,i1) * R1A (b3,j2)
            t1aiai (b2,j2,a1,i1) += taiai (b2,j2,a1,i1)
         ENDDO b3

         DO j3
            REQUEST                HBAR_JKIA_aabb (j3,j2,i1,a1) j3
            GET                    R1A (b2,j3)
            tai (b2,j3)          = R1A (b2,j3)
            tpppp (j3,j2,a1,i1)  = HBAR_JKIA_aabb (j3,j2,i1,a1)
            taiai (b2,j2,a1,i1)  = R1A (b2,j3) * tpppp (j3,j2,a1,i1)
            t1aiai (b2,j2,a1,i1) -= taiai (b2,j2,a1,i1)
         ENDDO j3

         DO i
         DO a
            REQUEST               L2AB (i,a,j2,b2) a
            tpppp  (a,i,b2,j2)  = L2AB (i,a,j2,b2)
            taiai  (a,i,a1,i1)  = tpppp (a,i,b2,j2) * t1aiai (b2,j2,a1,i1)

            PUT  D2aa (a,i,a1,i1) += taiai (a,i,a1,i1)
         ENDDO a
         ENDDO i
      ENDPARDO  j2, i1, a1, b2

      PARDO  i1, b, j, a1
         tppqq (a1,i1,b,j) = 0.0
         DO a2
            REQUEST               HBAR_AIBC_aabb (a1,a2,j,b) a2
            GET                   R1A (a2,i1)
            t1ppqq (a1,a2,b,j)  = HBAR_AIBC_aabb (a1,a2,j,b)
            t1aibj (a1,i1,b,j)  = R1A (a2,i1) * t1ppqq (a1,a2,b,j)
            tppqq  (a1,i1,b,j) += t1aibj (a1,i1,b,j)
         ENDDO a2
         DO i2
            REQUEST               HBAR_JKIA_aabb (i2,i1,j,b) i2
            GET                   R1A (a1,i2)
            t1ppqq (i2,i1,b,j)  = HBAR_JKIA_aabb (i2,i1,j,b)
            t1aibj (a1,i1,b,j)  = R1A (a1,i2) * t1ppqq (i2,i1,b,j)
            tppqq  (a1,i1,b,j) -= t1aibj (a1,i1,b,j)
         ENDDO i2

         DO a
         DO i
            REQUEST              L2AA (i,a,i1,a1) i
            taiai (a,i,a1,i1)  = L2AA (i,a,i1,a1)
            taibj (a,i,b,j)    = taiai (a,i,a1,i1) * tppqq (a1,i1,b,j)
            PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
         ENDDO i
         ENDDO a
      ENDPARDO  i1, b, j, a1

      PARDO  j1, b, j, b1
         tbjbj (b1,j1,b,j) = 0.0
         DO b2
            REQUEST               HBAR_AIBC_aaaa (b1,b2,j,b) b2
            GET                   R1A (b2,j1)
            t1qqqq (b1,b2,b,j)  = HBAR_AIBC_aaaa (b1,b2,j,b)
            tqqqq  (b1,j1,b,j)  = R1A (b2,j1) * t1qqqq (b1,b2,b,j)
            tbjbj  (b1,j1,b,j) += tqqqq (b1,j1,b,j)
         ENDDO b2
         DO j2
            REQUEST               HBAR_JKIA_aaaa (j2,j1,j,b) j2
            GET                   R1A (b1,j2)
            t1qqqq (j2,j1,b,j)  = HBAR_JKIA_aaaa (j2,j1,j,b)
            tqqqq  (b1,j1,b,j)  = R1A (b1,j2) * t1qqqq (j2,j1,b,j)
            tbjbj  (b1,j1,b,j) -= tqqqq (b1,j1,b,j)
         ENDDO j2
         DO a
         DO i
            REQUEST               L2AB (i,a,j1,b1) i
            t1aibj (a,i,b1,j1)  = L2AB (i,a,j1,b1)
            taibj  (a,i,b,j)    = t1aibj (a,i,b1,j1) * tbjbj (b1,j1,b,j)
            PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
         ENDDO i
         ENDDO a
      ENDPARDO  j1, b, j, b1

      PARDO  i1, a, i, a1
         taiai (a,i,a1,i1) = 0.0
         DO a2
            REQUEST               HBAR_AIBC_aaaa (a1,a2,i,a) a2
            GET                   R1A (a2,i1)
            tpppp  (a,i,a1,a2)  = HBAR_AIBC_aaaa (a1,a2,i,a)
            t1aiai (a,i,a1,i1)  = tpppp (a,i,a1,a2) * R1A (a2,i1)
            taiai  (a,i,a1,i1) += t1aiai (a,i,a1,i1)
         ENDDO a2
         DO i2
            REQUEST               HBAR_JKIA_aaaa (i2,i1,i,a) i2
            GET                   R1A (a1,i2)
            tpppp  (a,i,i2,i1)  = HBAR_JKIA_aaaa (i2,i1,i,a)
            t1aiai (a,i,a1,i1)  = tpppp (a,i,i2,i1) * R1A (a1,i2)
            taiai  (a,i,a1,i1) -= t1aiai (a,i,a1,i1)
         ENDDO i2
         DO b
         DO j
            REQUEST              L2AB (i1,a1,j,b) j
            tppqq (a1,i1,b,j)  = L2AB (i1,a1,j,b)
            taibj (a,i,b,j)    = taiai (a,i,a1,i1) * tppqq (a1,i1,b,j)
            PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
         ENDDO j
         ENDDO b
      ENDPARDO  i1, a, i, a1

      PARDO  j1, a, i, b1
         t1aibj (a,i,b1,j1) = 0.0
         DO b2
            REQUEST               HBAR_AIBC_aabb (b1,b2,i,a) b2
            GET                   R1A (b2,j1)
            tppqq  (a,i,b1,b2)  = HBAR_AIBC_aabb (b1,b2,i,a)
            t1ppqq (a,i,b1,j1)  = tppqq (a,i,b1,b2) * R1A (b2,j1)
            t1aibj (a,i,b1,j1) += t1ppqq (a,i,b1,j1)
         ENDDO b2
         DO j2
            REQUEST               HBAR_JKIA_aabb (j2,j1,i,a) j2
            GET                   R1A (b1,j2)
            tppqq  (a,i,j2,j1)  = HBAR_JKIA_aabb (j2,j1,i,a)
            t1ppqq (a,i,b1,j1)  = tppqq (a,i,j2,j1) * R1A (b1,j2)
            t1aibj (a,i,b1,j1) -= t1ppqq (a,i,b1,j1)
         ENDDO j2
         DO b
         DO j
            REQUEST              L2AA (j1,b1,j,b) j
            tbjbj (b1,j1,b,j)  = L2AA (j1,b1,j,b)
            taibj (a,i,b,j)    = t1aibj (a,i,b1,j1) * tbjbj (b1,j1,b,j)
            PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
         ENDDO j
         ENDDO b
      ENDPARDO  j1, a, i, b1

      PARDO  i1, i, b, b1
         tiibb (i,i1,b1,b) = 0.0
         DO a2
            REQUEST               HBAR_AIBC_aabb (b1,b,i,a2) a2
            GET                   R1A (a2,i1)
            tppqq  (i,a2,b1,b)  = HBAR_AIBC_aabb (b1,b,i,a2)
            t1ppqq (i,i1,b1,b)  = R1A (a2,i1) * tppqq (i,a2,b1,b)
            tiibb  (i,i1,b1,b) -= t1ppqq (i,i1,b1,b)
         ENDDO a2
         DO j2
            REQUEST               HBAR_JKIA_aabb (i,i1,j2,b) j2
            GET                   R1A (b1,j2)
            tppqq  (i,i1,j2,b)  = HBAR_JKIA_aabb (i,i1,j2,b)
            t1ppqq (i,i1,b1,b)  = tppqq (i,i1,j2,b) * R1A (b1,j2)
            tiibb  (i,i1,b1,b) += t1ppqq (i,i1,b1,b)
         ENDDO j2
         DO a
         DO j
            REQUEST               L2AB (i1,a,j,b1) j
            t1aibj (a,i1,b1,j)  = L2AB (i1,a,j,b1)
            taibj  (a,i,b,j)    = t1aibj (a,i1,b1,j) * tiibb (i,i1,b1,b)
            PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
         ENDDO j
         ENDDO a
      ENDPARDO  i1, i, b, b1

      PARDO  j1, j, a, a1
         taajj (a,a1,j1,j) = 0.0
         DO b2
            REQUEST               HBAR_AIBC_aabb (a1,a,j,b2) b2
            GET                   R1A (b2,j1)
            t1ppqq (a,a1,b2,j)  = HBAR_AIBC_aabb (a1,a,j,b2)
            tppqq  (a,a1,j1,j)  = t1ppqq (a,a1,b2,j) * R1A (b2,j1)
            taajj  (a,a1,j1,j) -= tppqq (a,a1,j1,j)
         ENDDO b2
         DO i2
            REQUEST               HBAR_JKIA_aabb (j,j1,i2,a) i2
            GET                   R1A (a1,i2)
            t1ppqq (a,i2,j1,j)  = HBAR_JKIA_aabb (j,j1,i2,a)
            tppqq  (a,a1,j1,j)  = R1A (a1,i2) * t1ppqq (a,i2,j1,j)
            taajj  (a,a1,j1,j) += tppqq (a,a1,j1,j)
         ENDDO i2
         DO b
         DO i
            REQUEST             L2AB (i,a1,j1,b) i
            tiajb  (i,a,j,b)  = L2AB (i,a1,j1,b) * taajj (a,a1,j1,j)
            taibj  (a,i,b,j)  = tiajb (i,a,j,b)
            PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
         ENDDO i
         ENDDO b
      ENDPARDO  j1, j, a, a1
#
#
#                        -                            -
#       ij              |   mn  ef  in    in  ef  mj   |
#      X   = -1/2 P(ij) |  l   r   G   + l   r   G     |   5 and 7 in R2 L2 G
#       ab              |   ab  mn  ef    ef  mn  ab   |
#                        -                            -
#
#
      PARDO  a, i1, a1, i2
         REQUEST  L2AA   (i2,a,i1,a1) i2
         REQUEST  VSpipi (a,i2,a1,i1) a
         t1aiai (a,i2,a1,i1) = L2AA (i2,a,i1,a1)
         DO i
            tpppp  (a,i,a1,i1)  = t1aiai (a,i2,a1,i1) * LR2W2_ii (i2,i)
            t1pppp (a,i,a1,i1)  = VSpipi (a,i2,a1,i1) * LR2L2_ii (i2,i)
            tpppp  (a,i,a1,i1) += t1pppp (a,i,a1,i1)

            taiai (a,i1,a1,i)  = tpppp (a,i,a1,i1)
            tpppp (a,i,a1,i1) *= -1.0

            PREPARE  XI2_AA (a,i,a1,i1) += tpppp (a,i,a1,i1)
            PREPARE  XI2_AA (a,i1,a1,i) += taiai (a,i1,a1,i)
         ENDDO i
      ENDPARDO  a, i1, a1, i2

      PARDO  i2, a, j, b
         REQUEST  L2AB  (i2,a,j,b) i2
         REQUEST  Vpiqj (a,i2,b,j) i2
         DO i
            tii (i,i2) = LR2W2_ii (i2,i)
            tiajb  (i,a,j,b)  = tii (i,i2) * L2AB (i2,a,j,b)
            t1aibj (a,i,b,j)  = LR2L2_ii (i2,i) * Vpiqj (a,i2,b,j)
            taibj  (a,i,b,j)  = tiajb (i,a,j,b)
            taibj  (a,i,b,j) += t1aibj (a,i,b,j)
            taibj  (a,i,b,j) *= -1.0
            PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
         ENDDO i
      ENDPARDO  i2, a, j, b

      PARDO  i, a, j2, b
         REQUEST             Vpiqj (a,i,b,j2) j2
         REQUEST             L2AB  (i,a,j2,b) j2
         tppqq (a,i,b,j2)  = L2AB  (i,a,j2,b)
         DO j
            taibj  (a,i,b,j)  = tppqq (a,i,b,j2) * LR2W2_ii (j2,j)
            t1aibj (a,i,b,j)  = Vpiqj (a,i,b,j2) * LR2L2_ii (j2,j)
            taibj  (a,i,b,j) += t1aibj (a,i,b,j)
            taibj  (a,i,b,j) *= -1.0
            PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
         ENDDO j
      ENDPARDO  i, a, j2, b
#
#
#                        -                            -
#       ij              |   ij  ef  mn    mn  ef  ij   |
#      X   = -1/2 P(ab) |  l   r   G   + l   r   G     |   4 and 6 in R2 L2 G
#       ab              |   fb  mn  ea    ea  mn  fb   |
#                        -                            -
#
#
      PARDO  i, i1, a1, a2
         REQUEST               L2AA   (i,a2,i1,a1) i
         REQUEST               VSpipi (a2,i,a1,i1) i
         t1aiai (a2,i,a1,i1) = L2AA (i,a2,i1,a1)
         DO a
            tpppp  (a,i,a1,i1)  = LR2W2_aa (a,a2) * t1aiai (a2,i,a1,i1)
            t1pppp (a,i,a1,i1)  = LR2L2_aa (a,a2) * VSpipi (a2,i,a1,i1)
            tpppp  (a,i,a1,i1) += t1pppp (a,i,a1,i1)

            taiai  (a1,i,a,i1)  = tpppp (a,i,a1,i1)
            taiai  (a1,i,a,i1) *= -1.0

            PREPARE  XI2_AA (a,i,a1,i1) += tpppp (a,i,a1,i1)
            PREPARE  XI2_AA (a1,i,a,i1) += taiai (a1,i,a,i1)
         ENDDO a
      ENDPARDO  i, i1, a1, a2

      PARDO  i, a2, j, b
         REQUEST             L2AB  (i,a2,j,b) i
         REQUEST             Vpiqj (a2,i,b,j) i
         tppqq (a2,i,b,j)  = L2AB  (i,a2,j,b)
         DO a
            taibj  (a,i,b,j)  = LR2W2_aa (a,a2) * tppqq (a2,i,b,j)
            t1aibj (a,i,b,j)  = LR2L2_aa (a,a2) * Vpiqj (a2,i,b,j)
            taibj  (a,i,b,j) += t1aibj (a,i,b,j)
            PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
         ENDDO a
      ENDPARDO  i, a2, j, b

      PARDO  i, a, j, b2
         REQUEST  L2AB  (i,a,j,b2) b2
         REQUEST  Vpiqj (a,i,b2,j) b2
         DO b
            tbb (b2,b) = LR2W2_aa (b,b2)
            tiajb  (i,a,j,b)  = L2AB (i,a,j,b2) * tbb (b2,b)
            t1aibj (a,i,b,j)  = Vpiqj (a,i,b2,j) * LR2L2_aa (b,b2)
            taibj  (a,i,b,j)  = tiajb (i,a,j,b)
            taibj  (a,i,b,j) += t1aibj (a,i,b,j)
            PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
         ENDDO b
      ENDPARDO  i, a, j, b2
#           
#           
#       ij          ij  e  fm
#      X   = P(ab) l   r  g        5 in R1 L2 G
#       ab          af  m  be
#
#     
      PARDO  i, a, i1, a3
         REQUEST              L2AA (i,a,i1,a3) i
         taiai (a,i,a3,i1)  = L2AA (i,a,i1,a3)
         DO a1
            tpppp  (a,i,a1,i1)  = taiai (a,i,a3,i1) * LR1W_aa (a1,a3)
            t1pppp (a1,i,a,i1)  = tpppp (a,i,a1,i1)
            t1pppp (a1,i,a,i1) *= -1.0
            PREPARE  XI2_AA (a,i,a1,i1) += tpppp  (a,i,a1,i1)
            PREPARE  XI2_AA (a1,i,a,i1) += t1pppp (a1,i,a,i1)
         ENDDO a1
      ENDPARDO  i, a, i1, a3

      PARDO  b2, i, a, j    
         REQUEST            L2AB (i,a,j,b2) b2
         tppqq (a,i,b2,j) = L2AB (i,a,j,b2)
         DO b
            tbb (b2,b) = LR1W_aa (b,b2)
            taibj (a,i,b,j)  = tppqq (a,i,b2,j) * tbb (b2,b)
            PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
         ENDDO b
      ENDPARDO  b2, i, a, j
      
      PARDO  a2, i, j, b    
         REQUEST            L2AB (i,a2,j,b) a2
         tppqq (a2,i,b,j) = L2AB (i,a2,j,b)
         DO a
            taibj (a,i,b,j)  = LR1W_aa (a,a2) * tppqq (a2,i,b,j)
            PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
         ENDDO a
      ENDPARDO  a2, i, j, b
#
#
#       ij           in  e   jm
#      X   = -P(ij) l   r   G        6 in R1 L2 G
#       ab           ab  m   ne            
#              
#              
      PARDO  i, a, i3, a1
         REQUEST  L2AA (i,a,i3,a1) i
         taiai (a,i,a1,i3)  = L2AA (i,a,i3,a1)
         taiai (a,i,a1,i3) *= -1.0
         DO i1
            tpppp  (a,i,a1,i1) = taiai (a,i,a1,i3) * LR1W_ii (i1,i3)
            t1pppp (a,i1,a1,i) = tpppp (a,i,a1,i1)
            t1pppp (a,i1,a1,i) *= -1.0
            PREPARE  XI2_AA (a,i,a1,i1) += tpppp  (a,i,a1,i1)
            PREPARE  XI2_AA (a,i1,a1,i) += t1pppp (a,i1,a1,i)
         ENDDO i1
      ENDPARDO  i, a, i3, a1

      PARDO  j2, b, i, a
         REQUEST             L2AB (i,a,j2,b) j2
         tppqq (a,i,b,j2)  = L2AB (i,a,j2,b)
         DO j  
            tjj (j2,j) = LR1W_ii (j,j2)
            taibj (a,i,b,j)  = tppqq (a,i,b,j2) * tjj (j2,j)
            taibj (a,i,b,j) *= -1.0
            PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
         ENDDO j
      ENDPARDO  j2, b, i, a
            
      PARDO  i2, a, j, b
         REQUEST             L2AB (i2,a,j,b) i2
         tppqq (a,i2,b,j)  = L2AB (i2,a,j,b)
         DO i  
            taibj (a,i,b,j)  = LR1W_ii (i,i2) * tppqq (a,i2,b,j)
            taibj (a,i,b,j) *= -1.0
            PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
         ENDDO i
      ENDPARDO  i2, a, j, b
#
#
#       i    mo  ef  ni
#      X  = l   r   G     Using R2L2 ring intermediate
#       a    ea  mn  fo
#
#
      PARDO  a2, i1, a, i2
         REQUEST              L2R2_aaaa (i1,a,i2,a2) i1
         taiai (a,i2,a2,i1) = L2R2_aaaa (i1,a,i2,a2)
         DO i
            REQUEST              HBAR_JKIA_aaaa (i,i2,i1,a2) i
            tpppp (i2,a2,i1,i) = HBAR_JKIA_aaaa (i,i2,i1,a2)
            tai (a,i)  = taiai (a,i2,a2,i1) * tpppp (i2,a2,i1,i)
            tai (a,i) *= -1.0
            PUT  XI1_A (a,i) += tai (a,i)
         ENDDO i
      ENDPARDO  a2, i1, a, i2

      PARDO  b2, j1, a, i2
         REQUEST              L2R2_abba (j1,a,i2,b2) b2
         taibj (a,i2,b2,j1) = L2R2_abba (j1,a,i2,b2)
         DO i
            REQUEST              HBAR_JKIA_aabb (i,i2,j1,b2) i
            tpqqp (i2,b2,j1,i) = HBAR_JKIA_aabb (i,i2,j1,b2)
            tai (a,i)  = taibj (a,i2,b2,j1) * tpqqp (i2,b2,j1,i)
            tai (a,i) *= -1.0
            PUT  XI1_A (a,i) += tai (a,i)
         ENDDO i
      ENDPARDO  b2, j1, a ,i2

      PARDO  a, a2, j2, j1
         REQUEST              L2R2_abab (j1,a2,j2,a) a
         tppqq (a,a2,j1,j2) = L2R2_abab (j1,a2,j2,a)
         DO i
            REQUEST              HBAR_JKIA_aabb (j1,j2,i,a2) i
            tpqqp (a2,j1,j2,i) = HBAR_JKIA_aabb (j1,j2,i,a2)
            tai (a,i) = tppqq (a,a2,j1,j2) * tpqqp (a2,j1,j2,i)
            PUT  XI1_A (a,i) += tai (a,i)
         ENDDO i
      ENDPARDO  a, a2, j2, j1
#
#
#       i         mn  fg  ei
#      X  = -1/4 l   r   G
#       a         ea  mn  fg
#
#
      PARDO  i2, a1, i3, a
         REQUEST              L2AA (i2,a1,i3,a) i2
         taiai (a,i2,a1,i3) = L2AA (i2,a1,i3,a)
         DO i
            REQUEST  Niiai (i2,a1,i3,i) i
            tai (a,i)  = taiai (a,i2,a1,i3) * Niiai (i2,a1,i3,i)
            tai (a,i) *= 0.5
            PUT  XI1_A (a,i) += tai (a,i)
         ENDDO i
      ENDPARDO  i2, a1, i3, a

      PARDO  i3, j2, b1, a
         REQUEST              L2AB (i3,a,j2,b1) j2
         tpqqp (a,b1,j2,i3) = L2AB (i3,a,j2,b1)
         DO i
            REQUEST  Niibj (i,b1,i3,j2) i
            tqqpp (b1,j2,i3,i) = Niibj (i,b1,i3,j2)
            tai (a,i)  = tpqqp (a,b1,j2,i3) * tqqpp (b1,j2,i3,i)
            PUT  XI1_A (a,i) += tai (a,i)
         ENDDO i
      ENDPARDO  i3, j2, b1, a
#
#
#       ij    ij               i  e  mj
#      X   = G   + P(ij)P(ab) l  r  g          0 and 1 in L R G
#       ab    ab               a  m  eb                    1 1
#
#
#
      PARDO  a, i, b ,j
         REQUEST      Vpiqj (a,i,b,j) j
         GET          L1A (i,a)
         GET          L1A (j,b)
         tai (a,i)  = L1A (i,a)
         tbj (b,j)  = L1A (j,b)
         tpppp  (a,i,b,j)  = Vpiqj (a,i,b,j)
         taiai  (a,i,b,j)  = tai (a,i) ^ LR1W_ai (b,j)
         t1aiai (a,i,b,j)  = LR1W_ai (a,i) ^ tbj (b,j)
         taiai  (a,i,b,j) += t1aiai (a,i,b,j)
         taiai  (a,i,b,j) += tpppp  (a,i,b,j)
         PREPARE  XI2_AB (a,i,b,j) += taiai (a,i,b,j)
      ENDPARDO  a, i, b, j
#
#
#       ij               mj  e  i    ij   e  m    ef  mn
#      X   = P(ij)P(ab) l   r  f  + l  ( r  f  + r   G   )   0, 11, and 12 in L2 R1 G
#       ab               eb  m  a    ab   m  e    mn  ef
#
#
      PARDO  a, i, a1, i1   
         GET  L1A (i,a)
         tai  (a,i)  = LHBAR_ia (i,a)
         t1ai (a,i)  = L1A     (i,a)
         
         tpppp  (a,i,a1,i1) = t1ai (a,i) ^ LR1W_ai  (a1,i1)
         taiai  (a,i,a1,i1) = tai  (a,i) ^ LR1L2_ai (a1,i1)
         taiai  (a,i,a1,i1) += tpppp (a,i,a1,i1)
            
         PUT  D2aa (a,i,a1,i1) += taiai (a,i,a1,i1)
      ENDPARDO  a, i, a1, i1

      PARDO  a, i, a1, i1
         REQUEST              L2AA   (i,a,i1,a1) i
         REQUEST              VSpipi (a,i,a1,i1) a
         taiai (a,i,a1,i1)  = L2AA   (i,a,i1,a1) 
         taiai (a,i,a1,i1) *= IRHBAR
         tpppp (a,i,a1,i1)  = VSpipi (a,i,a1,i1)
         taiai (a,i,a1,i1) += tpppp  (a,i,a1,i1)
         
         PREPARE  XI2_AA (a,i,a1,i1) += taiai (a,i,a1,i1)
      ENDPARDO  a, i, a1, i1

      PARDO  a, i, b, j
         REQUEST             L2AB (i,a,j,b) i
         t1aibj (a,i,b,j)  = L2AB (i,a,j,b)
         t1aibj (a,i,b,j) *= IRHBAR

         tai  (a,i) = LHBAR_ia (i,a)
         tbj  (b,j) = LHBAR_ia (j,b)

         taibj (a,i,b,j)  = tai (a,i) ^ LR1L2_ai (b,j)
         tppqq (a,i,b,j)  = LR1L2_ai (a,i) ^ tbj (b,j)
         taibj (a,i,b,j) += tppqq  (a,i,b,j)
         taibj (a,i,b,j) += t1aibj (a,i,b,j)
         PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
      ENDPARDO  a, i, b, j
#
#
#       i         io  eg  fm        io  ef  mn
#      X  =  1/2 l   r   G   - 1/2 l   r   G
#       a         ef  mo  ge        ef  mn  eo
#
#
      PARDO  a, i, a1, i1
         REQUEST             L2AA (i,a,i1,a1) i
         taiai (a,i,a1,i1) = L2AA (i,a,i1,a1)
         tai (a,i)  = taiai (a,i,a1,i1) * LR2W2_ai (a1,i1)
         PUT  XI1_A (a,i) += tai (a,i)
      ENDPARDO  a, i, a1, i1

      PARDO  a, i, b1, j1
         REQUEST             L2AB (i,a,j1,b1) i
         taibj (a,i,b1,j1) = L2AB (i,a,j1,b1)
         tai (a,i)  = taibj (a,i,b1,j1) * LR2W2_ai (b1,j1)
         PUT  XI1_A (a,i) += tai (a,i)
      ENDPARDO  a, i, b1, j1
#     
#
#       i    m  ef  in
#      X  = l  r   G
#       a    e  mn  af
#
#
      PARDO  a, i, a2, i2     
         REQUEST     VSpipi (a,i,a2,i2) a
         tpp (a,i) = VSpipi (a,i,a2,i2) * LR2L1_ai (a2,i2)
         PUT  XI1_A (a,i) += tpp (a,i)
      ENDPARDO  a, i, a2, i2
            
      PARDO  a, i, b2, j2
         REQUEST     Vpiqj (a,i,b2,j2) a
         tai (a,i) = Vpiqj (a,i,b2,j2) * LR2L1_ai (b2,j2)
         PUT  XI1_A (a,i) += tai (a,i)
      ENDPARDO  a, i, b2, j2
#     
#
#       i    in  ef  m
#      X  = l   r   f
#       a    af  mn  e
#
#
      PARDO  a, i, a1, i1
         REQUEST  L2R2_aaaa (i1,a,i,a1) a
         tai (a,i) = LHBAR_ia (i1,a1) * L2R2_aaaa (i1,a,i,a1)
         PUT  XI1_A (a,i) += tai (a,i)
      ENDPARDO  a, i, a1, i1

      PARDO  a, i, b1, j1
         REQUEST  L2R2_abba (j1,a,i,b1) a
         tai (a,i) = LHBAR_ia (j1,b1) * L2R2_abba (j1,a,i,b1)
         PUT  XI1_A (a,i) += tai (a,i)
      ENDPARDO  a, i, b1, j1
#     
#
#       ij           mn  e  ij
#      X   = -P(ab) l   r  g        2 in R1 L2 G
#       ab           ea  m  nb
#
#
      PARDO  i2, i, a1, i1
         REQUEST              HBAR_JKIA_aaaa (i,i2,i1,a1) i2
         tpppp (i2,i,a1,i1) = HBAR_JKIA_aaaa (i,i2,i1,a1)
         DO a
            taiai  (a,i,a1,i1)  = LR1L2_ai (a,i2) * tpppp (i2,i,a1,i1)
            t1aiai (a1,i,a,i1)  = taiai (a,i,a1,i1)
            taiai  (a,i,a1,i1) *= -1.0
            PREPARE  XI2_AA (a,i,a1,i1) += taiai  (a,i,a1,i1)
            PREPARE  XI2_AA (a1,i,a,i1) += t1aiai (a1,i,a,i1)
         ENDDO a
      ENDPARDO  i2, i, a1, i1

      PARDO  i2, i, b, j
         REQUEST            HBAR_JKIA_aabb (i,i2,j,b) i2
         tppqq (i2,i,b,j) = HBAR_JKIA_aabb (i,i2,j,b) 
         DO a
            taibj (a,i,b,j)  = LR1L2_ai (a,i2) * tppqq (i2,i,b,j)
            taibj (a,i,b,j) *= -1.0
            PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
         ENDDO a
      ENDPARDO  i2, i, b, j
      
      PARDO  j2, j, a, i
         REQUEST            HBAR_JKIA_aabb (j,j2,i,a) j2
         tppqq (a,i,j2,j) = HBAR_JKIA_aabb (j,j2,i,a) 
         DO b
            tjb (j2,b) = LR1L2_ai (b,j2)
            taibj (a,i,b,j)  = tppqq (a,i,j2,j) * tjb (j2,b)
            taibj (a,i,b,j) *= -1.0
            PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
         ENDDO b
      ENDPARDO  j2, j, a, i
#
#
#       ij        ij  ef  mn         mn  ef  ij
#      X   = 1/4 l   r   g    + 1/4 l   r   G       2 and 3 in R2 L2 G
#       ab        ef  mn  ab         ab  mn  ef
#
#     
      PARDO  a, i, i2, i3
         ALLOCATE  Liiii  (i2,i,i3,*)
         ALLOCATE  L1iiii (i2,i,i3,*)
         DO i1
            GET                   R2L2_iiii (i2,i,i3,i1)
            GET                   R2G2_iiii (i2,i,i3,i1)
            Liiii  (i2,i,i3,i1) = R2L2_iiii (i2,i,i3,i1)
            L1iiii (i2,i,i3,i1) = R2G2_iiii (i2,i,i3,i1)
         ENDDO i1
         DO a1
            REQUEST              VSpipi (a,i2,a1,i3) a1
            REQUEST              L2AA   (i2,a,i3,a1) a1
            tpppp (a,i2,a1,i3) = L2AA   (i2,a,i3,a1)
            DO i1
               taiai  (a,i,a1,i1)  = VSpipi (a,i2,a1,i3) * Liiii  (i2,i,i3,i1)
               t1aiai (a,i,a1,i1)  = tpppp  (a,i2,a1,i3) * L1iiii (i2,i,i3,i1)
               taiai  (a,i,a1,i1) += t1aiai (a,i,a1,i1)
               taiai  (a,i,a1,i1) *= 0.25
               PREPARE  XI2_AA (a,i,a1,i1) += taiai (a,i,a1,i1)
            ENDDO i1
         ENDDO a1
         DEALLOCATE  Liiii  (i2,i,i3,*)
         DEALLOCATE  L1iiii (i2,i,i3,*)
      ENDPARDO  a, i, i2, i3

      PARDO  a, i, i2, j2
         ALLOCATE  Liijj  (i2,i,j2,*)
         ALLOCATE  L1iijj (i2,i,j2,*)
         DO j
            GET  R2L2_iijj (i2,i,j2,j)
            GET  R2G2_iijj (i2,i,j2,j)
            Liijj  (i2,i,j2,j) = R2L2_iijj (i2,i,j2,j)
            L1iijj (i2,i,j2,j) = R2G2_iijj (i2,i,j2,j)
         ENDDO j
         DO b
            REQUEST             Vpiqj (a,i2,b,j2) b
            REQUEST             L2AB  (i2,a,j2,b) b
            tppqq (a,i2,b,j2) = L2AB  (i2,a,j2,b)
            DO j
               taibj  (a,i,b,j)  = Vpiqj (a,i2,b,j2) * Liijj  (i2,i,j2,j)
               t1aibj (a,i,b,j)  = tppqq (a,i2,b,j2) * L1iijj (i2,i,j2,j)
               taibj  (a,i,b,j) += t1aibj (a,i,b,j)
               PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
            ENDDO j
         ENDDO b
         DEALLOCATE  Liijj  (i2,i,j2,*)
         DEALLOCATE  L1iijj (i2,i,j2,*)
      ENDPARDO  a, i, i2, j2
#
#
#       i         io  ef  mn
#      X  = -1/4 l   r   G
#       a         ef  mn  oa
#
#

      PARDO  i1, i2, i3, a
         REQUEST              HBAR_JKIA_aaaa (i1,i2,i3,a) i1
         tpppp (a,i3,i2,i1) = HBAR_JKIA_aaaa (i1,i2,i3,a)
         DO i
            GET                  R2L2_iiii (i1,i2,i3,i)
            tiiii (i3,i2,i1,i) = R2L2_iiii (i1,i2,i3,i)
            tai (a,i)  = tpppp (a,i3,i2,i1) * tiiii (i3,i2,i1,i)
            tai (a,i) *= 0.25
            PUT  XI1_A (a,i) += tai (a,i)
         ENDDO i
      ENDPARDO  i1, i2, i3, a

      PARDO  j1, j2, i3, a
         REQUEST              HBAR_JKIA_aabb (j1,j2,i3,a) j1
         tppqq (a,i3,j2,j1) = HBAR_JKIA_aabb (j1,j2,i3,a)
         DO i
            GET                  R2L2_iijj (i3,i,j1,j2)
            tpqqp (i3,j2,j1,i) = R2L2_iijj (i3,i,j1,j2)
            tai (a,i) = tppqq (a,i3,j2,j1) * tpqqp (i3,j2,j1,i)
            PUT  XI1_A (a,i) += tai (a,i)
         ENDDO i
      ENDPARDO  j1, j2, i3, a
#
#
#       i         mn  ef  oi
#      X  = -1/2 l   r   G
#       a         ef  mo  na
#
#
      PARDO  i2, i1, i, a
         REQUEST             HBAR_JKIA_aaaa (i2,i1,i,a) i2
         tpppp (a,i,i2,i1) = HBAR_JKIA_aaaa (i2,i1,i,a)
         tai (a,i) = tpppp (a,i,i2,i1) * LR2L2_ii (i2,i1)
         tai (a,i) *= -1.0
         PUT  XI1_A (a,i) += tai (a,i)
      ENDPARDO  i2, i1, i, a
            
      PARDO  j2, j1, i, a
         REQUEST             HBAR_JKIA_aabb (j2,j1,i,a) j2
         tppqq (a,i,j2,j1) = HBAR_JKIA_aabb (j2,j1,i,a)
         tai (a,i) = tppqq (a,i,j2,j1) * LR2L2_ii (j2,j1)
         tai (a,i) *= -1.0
         PUT  XI1_A (a,i) += tai (a,i)
      ENDPARDO  j2, j1, i, a
#
#
#     ...ready!
#
#
      ENDPROC  HEAVY_XI
#------------------------------------------------------------------------



#------------------------------------------------------------------------
#
#     --------------
      PROC  LIGHT_XI
#     --------------
#
#
#
#       ij           m  e  ij          ij  e  m
#      X   = -P(ab) l  r  g   - P(ab) l   r  f       3 in L1R1G, 10 in R1L2G
#       ab           a  m  eb          eb  m  a
#
#
      PARDO  a1, i, a2  # Could use R1L1 Intermediate, artificial N^5 step
         ALLOCATE  Laa  (a2,*)
         ALLOCATE  L1aa (a2,*)
         DO i2
            GET  R1A (a2,i2)
            DO a
               GET  L1A (i2,a)
               tpp  (a2,a)  = R1A (a2,i2) * L1A (i2,a)
               taa  (a2,a)  = R1A (a2,i2) * LHBAR_ia (i2,a)
               Laa  (a2,a) -= tpp (a2,a)
               L1aa (a2,a) -= taa (a2,a)
            ENDDO a
         ENDDO i2
         DO i1
            REQUEST              VSpipi (a2,i,a1,i1) a1
            REQUEST              L2AA   (i,a2,i1,a1) a1
            tpppp (a2,i,a1,i1) = L2AA   (i,a2,i1,a1)
            DO a
               taiai  (a,i,a1,i1)  = Laa  (a2,a) * VSpipi (a2,i,a1,i1)
               t2aiai (a,i,a1,i1)  = L1aa (a2,a) * tpppp  (a2,i,a1,i1)
               taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

               t1aiai (a1,i,a,i1)  = taiai (a,i,a1,i1)
               t1aiai (a1,i,a,i1) *= -1.0

               PREPARE  XI2_AA (a,i,a1,i1) += taiai  (a,i,a1,i1)
               PREPARE  XI2_AA (a1,i,a,i1) += t1aiai (a1,i,a,i1)
            ENDDO a
         ENDDO i1
         DEALLOCATE  Laa  (a2,*)
         DEALLOCATE  L1aa (a2,*)
      ENDPARDO  a1, i, a2

      PARDO  b, i, a2  # Could use R1L1 Intermediate, artificial N^5 step
         ALLOCATE  Laa  (a2,*)
         ALLOCATE  L1aa (a2,*)
         DO i2
            GET  R1A (a2,i2)
            DO a
               GET  L1A (i2,a)
               tpp  (a2,a)  = R1A (a2,i2) * L1A (i2,a)
               taa  (a2,a)  = R1A (a2,i2) * LHBAR_ia (i2,a)
               Laa  (a2,a) -= tpp (a2,a)
               L1aa (a2,a) -= taa (a2,a)
            ENDDO a
         ENDDO i2
         DO j
            REQUEST            Vpiqj (a2,i,b,j) b
            REQUEST            L2AB  (i,a2,j,b) b
            tppqq (a2,i,b,j) = L2AB  (i,a2,j,b)
            DO a
               taibj  (a,i,b,j)  = Laa  (a2,a) * Vpiqj (a2,i,b,j)
               t1aibj (a,i,b,j)  = L1aa (a2,a) * tppqq (a2,i,b,j)
               taibj  (a,i,b,j) += t1aibj (a,i,b,j)
               PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
            ENDDO a
         ENDDO j
         DEALLOCATE  Laa (a2,*)
         DEALLOCATE  L1aa (a2,*)
      ENDPARDO  b, i, a2

      PARDO  a, j, b2  # Could use R1L1 Intermediate, artificial N^5 step
         ALLOCATE  Lbb  (b2,*)
         ALLOCATE  L1bb (b2,*)
         DO j2
            GET  R1A (b2,j2)
            DO b
               GET  L1A (j2,b)
               tqq  (b2,b)  = R1A (b2,j2) * L1A (j2,b)
               tbb  (b2,b)  = R1A (b2,j2) * LHBAR_ia (j2,b)
               Lbb  (b2,b) -= tqq (b2,b)
               L1bb (b2,b) -= tbb (b2,b)
            ENDDO b
         ENDDO j2
         DO i
            REQUEST            Vpiqj (a,i,b2,j) a
            REQUEST            L2AB  (i,a,j,b2) a
            tppqq (a,i,b2,j) = L2AB  (i,a,j,b2)
            DO b
               taibj  (a,i,b,j)  = Vpiqj (a,i,b2,j) * Lbb  (b2,b)
               t1aibj (a,i,b,j)  = tppqq (a,i,b2,j) * L1bb (b2,b)
               taibj  (a,i,b,j) += t1aibj (a,i,b,j)
               PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
            ENDDO b
         ENDDO i
         DEALLOCATE  Lbb  (b2,*)
         DEALLOCATE  L1bb (b2,*)
      ENDPARDO  a, j, b2
#
#
#       ij           i  e  mj          mj  e  i
#      X   = -P(ij) l  r  g   - P(ij) l   r  f      2 in L1R1G, 9 in R1L2G
#       ab           e  m  ab          ab  m  e
#
#
      PARDO  a, a1, i2  # Could use L1 R1 Intermediate, artificial N^5 step
         ALLOCATE  Lii  (*,i2)
         ALLOCATE  L1ii (*,i2)
         DO a2
            GET  R1A (a2,i2)
            DO i
               GET  L1A (i,a2)
               tpp  (i,i2)  = L1A (i,a2) * R1A (a2,i2)
               tii  (i,i2)  = LHBAR_ia (i,a2) * R1A (a2,i2)
               Lii  (i,i2) -= tpp (i,i2)
               L1ii (i,i2) -= tii (i,i2)
            ENDDO i
         ENDDO a2
         DO i1
            REQUEST              VSpipi (a,i2,a1,i1) a
            REQUEST              L2AA   (i2,a,i1,a1) a
            tpppp (a,i2,a1,i1) = L2AA   (i2,a,i1,a1)
            DO i
               taiai  (a,i,a1,i1)  = VSpipi (a,i2,a1,i1) * Lii  (i,i2)
               t2aiai (a,i,a1,i1)  = tpppp  (a,i2,a1,i1) * L1ii (i,i2)
               taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

               t1aiai (a,i1,a1,i)  = taiai (a,i,a1,i1)
               t1aiai (a,i1,a1,i) *= -1.0

               PREPARE  XI2_AA (a,i,a1,i1) += taiai  (a,i,a1,i1)
               PREPARE  XI2_AA (a,i1,a1,i) += t1aiai (a,i1,a1,i)
            ENDDO i
         ENDDO i1
         DEALLOCATE  Lii  (*,i2)
         DEALLOCATE  L1ii (*,i2)
      ENDPARDO  a, a1, i2

      PARDO  a, b, i2  # Could use L1 R1 Intermediate, artificial N^5 step
         ALLOCATE  Lii  (*,i2)
         ALLOCATE  L1ii (*,i2)
         DO a2
            GET  R1A (a2,i2)
            DO i
               GET  L1A (i,a2)
               tpp  (i,i2)  = L1A (i,a2) * R1A (a2,i2)
               tii  (i,i2)  = LHBAR_ia (i,a2) * R1A (a2,i2)
               Lii  (i,i2) -= tpp (i,i2)
               L1ii (i,i2) -= tii (i,i2)
            ENDDO i
         ENDDO a2
         DO j
            REQUEST            Vpiqj (a,i2,b,j) j
            REQUEST            L2AB  (i2,a,j,b) j
            tppqq (a,i2,b,j) = L2AB  (i2,a,j,b)
            DO i
               taibj  (a,i,b,j)  = Lii  (i,i2) * Vpiqj (a,i2,b,j)
               t1aibj (a,i,b,j)  = L1ii (i,i2) * tppqq (a,i2,b,j)
               taibj  (a,i,b,j) += t1aibj (a,i,b,j)
               PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
            ENDDO i
         ENDDO j
         DEALLOCATE  Lii  (*,i2)
         DEALLOCATE  L1ii (*,i2)
      ENDPARDO  a, b, i2

      PARDO  a, b, j2  # Could use L1 R1 Intermediate, artificial N^5 step
         ALLOCATE  Ljj  (*,j2)
         ALLOCATE  L1jj (*,j2)
         DO b2
            GET  R1A (b2,j2)
            DO j
               GET  L1A (j,b2)
               tpp  (j,j2)  = L1A (j,b2) * R1A (b2,j2)
               tjj  (j,j2)  = LHBAR_ia (j,b2) * R1A (b2,j2)
               Ljj  (j,j2) -= tpp (j,j2)
               L1jj (j,j2) -= tjj (j,j2)
            ENDDO j
         ENDDO b2
         DO i
            REQUEST            Vpiqj (a,i,b,j2) i
            REQUEST            L2AB  (i,a,j2,b) i
            tppqq (a,i,b,j2) = L2AB  (i,a,j2,b)
            DO j
               taibj  (a,i,b,j)  = Vpiqj (a,i,b,j2) * Ljj  (j,j2)
               t1aibj (a,i,b,j)  = tppqq (a,i,b,j2) * L1jj (j,j2)
               taibj  (a,i,b,j) += t1aibj (a,i,b,j)
               PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
            ENDDO j
         ENDDO i
         DEALLOCATE  Ljj  (*,j2)
         DEALLOCATE  L1jj (*,j2)
      ENDPARDO  a, b, j2
#
#
#       i         i  ef  mn
#      X  = -1/2 l  r   G
#       a         e  mn  af
#
#
      
      PARDO  a, i, a2  
         GET           L1A (i,a2)
         tai (a2,i)  = L1A (i,a2)
         tpp (a,i)   = LR2W2_aa (a,a2) * tai (a2,i)
         PUT  XI1_A (a,i) += tpp (a,i)
      ENDPARDO  a, i, a2
#     
#
#       i         mn  ef  i
#      X  = -1/2 l  r    f
#       a         af  mn  e
#
#     
      PARDO  a2, a, i
         tpp (a2,i) = LHBAR_ia (i,a2)
         tai (a,i)  = LR2L2_aa (a,a2) * tpp (a2,i)
         PUT  XI1_A (a,i) += tai (a,i)
      ENDPARDO  a2, a, i
#
#
#       ij    ij  e  fm
#      X   = l   r  g        3 in L2 R1 G
#       ab    ef  m  ba
#
#
      PARDO  i2, i, a2    # Could use Niiai Intermediate
         ALLOCATE  Laiii (a2,i,i2,*)
         DO i1
            DO a3
               REQUEST                L2AA  (i,a2,i1,a3) a3
               GET                    R1A   (a3,i2)
               t1pppp (a2,i,a3,i1)  = L2AA  (i,a2,i1,a3)
               tpppp  (a2,i,i2,i1)  = t1pppp (a2,i,a3,i1) * R1A (a3,i2)
               Laiii  (a2,i,i2,i1) -= tpppp (a2,i,i2,i1)
            ENDDO a3
         ENDDO i1
         DO a
         DO a1
            REQUEST               HBAR_AIBC_aaaa (a2,a,i2,a1) a1
            tpppp  (a,a2,a1,i2) = HBAR_AIBC_aaaa (a2,a,i2,a1)
            DO i1
               t1aiai (a,i,a1,i1) = tpppp (a,a2,a1,i2) * Laiii (a2,i,i2,i1)
               PREPARE  XI2_AA (a,i,a1,i1) += t1aiai (a,i,a1,i1)
            ENDDO i1
         ENDDO a1
         ENDDO a
         DEALLOCATE  Laiii (a2,i,i2,*)
      ENDPARDO  i2, i, a2

      PARDO  j2, i, a2    # Could use Njjai Intermediate
         ALLOCATE  Laijj (a2,i,j2,*)
         DO j
            DO b3
               REQUEST               L2AB (i,a2,j,b3) b3
               GET                   R1A  (b3,j2)
               tppqq  (a2,i,b3,j)  = L2AB (i,a2,j,b3)
               t1ppqq (a2,i,j2,j)  = tppqq (a2,i,b3,j) * R1A (b3,j2)
               Laijj  (a2,i,j2,j) -= t1ppqq (a2,i,j2,j)
            ENDDO b3
         ENDDO j
         DO a
         DO b
            REQUEST             HBAR_AIBC_aabb (a2,a,j2,b) b
            tppqq (a,a2,b,j2) = HBAR_AIBC_aabb (a2,a,j2,b)
            DO j
               taibj (a,i,b,j)  = tppqq (a,a2,b,j2) * Laijj (a2,i,j2,j)
               PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
            ENDDO j
         ENDDO b
         ENDDO a
         DEALLOCATE  Laijj (a2,i,j2,*)
      ENDPARDO  j2, i, a2

      PARDO  i2, j, b2  # Could use Niibj Intermediate
         ALLOCATE  Liibj (i2,*,b2,j)
         DO i
            DO a3
               REQUEST               L2AB (i,a3,j,b2) a3
               GET                   R1A  (a3,i2)
               tia (i2,a3)         = R1A  (a3,i2)
               tppqq  (a3,i,b2,j)  = L2AB (i,a3,j,b2)
               t1ppqq (i2,i,b2,j)  = tia (i2,a3) * tppqq (a3,i,b2,j)
               Liibj  (i2,i,b2,j) -= t1ppqq (i2,i,b2,j)
            ENDDO a3
         ENDDO i
         DO b
         DO a
            REQUEST             HBAR_AIBC_aabb (b2,b,i2,a) a
            tppqq (a,i2,b,b2) = HBAR_AIBC_aabb (b2,b,i2,a)
            DO i
               taibj (a,i,b,j)  = tppqq (a,i2,b,b2) * Liibj (i2,i,b2,j)
               PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
            ENDDO i
         ENDDO a
         ENDDO b
         DEALLOCATE  Liibj (i2,*,b2,j)
      ENDPARDO  i2, j, b2
#
#
#       i         m  ef  in
#      X  = -1/2 l  r   G
#       a         a  mn  ef
#
#
      PARDO  i, i2, a
         GET           L1A (i2,a)
         tai (a,i2)  = L1A (i2,a)
         tai (a,i2) *= -1.0
         tpp (a,i)   = tai (a,i2) * LR2W2_ii (i2,i)
         PUT  XI1_A (a,i) += tpp (a,i)
      ENDPARDO  i, i2, a
#
#
#       i         in  ef  m
#      X  = -1/2 l  r    f
#       a         ef  mn  a
#
#
      PARDO  i2, a, i
         tpp (a,i2) = LHBAR_ia (i2,a)
         tai (a,i)  = tpp (a,i2) * LR2L2_ii (i2,i)
         tai (a,i) *= -1.0
         PUT  XI1_A (a,i) += tai (a,i)
      ENDPARDO  i2, a, i
#
#
#       ij    mn  e  ij
#      X   = l   r  g      PREPARE too far in?  4 in R1 L2 G
#       ab    ab  m  en
#
#
      PARDO  i2, i, i3
         ALLOCATE  L3iiii (i,i3,*,i2)
         DO i1
            DO a2
               REQUEST  HBAR_JKIA_aaaa (i,i3,i1,a2) a2
               GET      R1A (a2,i2)
               tiiii (i,i3,i1,i2)  = HBAR_JKIA_aaaa (i,i3,i1,a2) * R1A (a2,i2)
               L3iiii (i,i3,i1,i2) -= tiiii (i,i3,i1,i2)
            ENDDO a2
         ENDDO i1
         DO a
         DO a1
            REQUEST              L2AA (i2,a,i3,a1) a1
            tpppp (a,i3,a1,i2) = L2AA (i2,a,i3,a1)
            DO i1
               taiai (a,i,a1,i1)  = tpppp (a,i3,a1,i2) * L3iiii (i,i3,i1,i2)
               PREPARE  XI2_AA (a,i,a1,i1) += taiai (a,i,a1,i1)
            ENDDO i1
         ENDDO a1
         ENDDO a
         DEALLOCATE  L3iiii (i,i3,*,i2)
      ENDPARDO  i2, i, i3

      PARDO  i, i2, j2
         ALLOCATE  L2iijj (i,i2,*,j2)
         DO j
            DO a2
               REQUEST               HBAR_JKIA_aabb (j,j2,i,a2) a2
               GET                   R1A (a2,i2)
               tpppp  (i,a2,j,j2)  = HBAR_JKIA_aabb (j,j2,i,a2)
               t1pppp (i,i2,j,j2)  = R1A (a2,i2) * tpppp (i,a2,j,j2)
               L2iijj  (i,i2,j,j2) += t1pppp (i,i2,j,j2)
            ENDDO a2
            DO b2
               REQUEST               HBAR_JKIA_aabb (i,i2,j,b2) b2
               GET                   R1A (b2,j2)
               t1pppp (i,i2,j,j2)  = HBAR_JKIA_aabb (i,i2,j,b2) * R1A (b2,j2)
               L2iijj  (i,i2,j,j2) += t1pppp (i,i2,j,j2)
            ENDDO b2
         ENDDO j 
         DO b
         DO a
            REQUEST             L2AB (i2,a,j2,b) b
            tppqq (a,i2,b,j2) = L2AB (i2,a,j2,b)
            DO j
               taibj (a,i,b,j)  = tppqq (a,i2,b,j2) * L2iijj (i,i2,j,j2)
               PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
            ENDDO j
         ENDDO a
         ENDDO b
         DEALLOCATE  L2iijj (i,i2,*,j2)
      ENDPARDO  i, i2, j2
#        
#
#       i        i  ef  mn        i  mn  ef
#      X  = 1/4 l  r   G   + 1/4 f  l   r
#       a        a  mn  ef        a  ef  mn
#
#
      PARDO  a, i
         GET          L1A      (i,a)
         tai (a,i)  = LHBAR_ia (i,a)
         tpp (a,i)  = L1A (i,a)

         tai (a,i) *= IL2R2
         tpp (a,i) *= IG2R2
         tai (a,i) += tpp (a,i)
         PUT  XI1_A (a,i) += tai (a,i)
      ENDPARDO  a, i
#
#
#     ...ready!
#
#
      ENDPROC  LIGHT_XI
#------------------------------------------------------------------------



#------------------------------------------------------------------------
#
#     ----------------
      PROC  CALC_XI
#     ----------------
#
#
#
      CREATE  D2aa
      CREATE  XI1_A

      CALL  XI_INTERMEDIATES

      CALL  HEAVY_XI
      CALL  LIGHT_XI

      EXECUTE  SIP_BARRIER
#     
#
#          Some contributions were put in to D2dd, so prepare them
#          in to VCHACT2 now with appropriate permutations!
#
#
      PARDO  a, i, a1, i1
      
         GET                   D2aa (a,i,a1,i1)
         t2aiai (a1,i1,a,i)  = D2aa (a,i,a1,i1)
         t3aiai (a1,i,a,i1)  = D2aa (a,i,a1,i1)
         t4aiai (a,i1,a1,i)  = D2aa (a,i,a1,i1)
         t3aiai (a1,i,a,i1) *= -1.0 
         t4aiai (a,i1,a1,i) *= -1.0
         
         PREPARE  XI2_AA (a,i,a1,i1) += D2aa   (a,i,a1,i1)
         PREPARE  XI2_AA (a1,i1,a,i) += T2aiai (a1,i1,a,i)
         PREPARE  XI2_AA (a1,i,a,i1) += T3aiai (a1,i,a,i1)
         PREPARE  XI2_AA (a,i1,a1,i) += T4aiai (a,i1,a1,i)

      ENDPARDO  a, i, a1, i1

      esum = 0.0
      etot = 0.0
      EXECUTE  SERVER_BARRIER
#
#
#          Free up all unnecessary memory used in CALC_XI!
#
#
      DELETE  D2aa
      DELETE  R2L2_iijj
      DELETE  R2L2_iiii
      DELETE  R2G2_iijj
      DELETE  R2G2_iiii
      DEALLOCATE  LR1W_ai  (*,*)
      DEALLOCATE  LR1W_ii  (*,*)
      DEALLOCATE  LR1W_aa  (*,*)
      DEALLOCATE  LR1L2_ai (*,*)
      DEALLOCATE  LR2L1_ai (*,*)
      DEALLOCATE  LR2W2_ai (*,*)
      DEALLOCATE  LR2W2_aa (*,*)
      DEALLOCATE  LR2W2_ii (*,*)
      DEALLOCATE  LR2L2_aa (*,*)
      DEALLOCATE  LR2L2_ii (*,*)

     #CALL  PRINT_XI_AB
     #CALL  PRINT_XI_AA
     #CALL  PRINT_XI_A
      esum = 0.0
      etot = 0.0
      EXECUTE  SIP_BARRIER

      PARDO  a, i, a1, i1
         REQUEST  XI2_AA (a,i,a1,i1) a
         taiai (a,i,a1,i1) = XI2_AA (a,i,a1,i1)
         etemp  = taiai (a,i,a1,i1) * taiai (a,i,a1,i1)
         etemp *= 0.5
         esum  += etemp
      ENDPARDO  a, i, a1, i1

      PARDO  a, i, b, j
         REQUEST  XI2_AB (a,i,b,j) a
         taibj (a,i,b,j) = XI2_AB (a,i,b,j)
         etemp  = taibj (a,i,b,j) * taibj (a,i,b,j)
         esum  += etemp
      ENDPARDO  a, i, b, j

      PARDO  a, i
         GET  XI1_A (a,i)
         tai (a,i) = XI1_A (a,i)
         etemp  = tai (a,i) * tai (a,i)
         etemp *= 2.0
         esum  += etemp
      ENDPARDO  a, i

      EXECUTE  SERVER_BARRIER

      COLLECTIVE  etot += esum

      EXECUTE  SIP_BARRIER
      EXECUTE  SQUARE_ROOT  etot ONEHALF
      EXECUTE  PRINT_SCALAR  etot
#
#
#     ...ready!
#
#
      ENDPROC  CALC_XI
#------------------------------------------------------------------------



#
# ------------------------------------------------------------------------ 
#
     PROC SYMMETRHC_A
#    ---------------- 
#
     PARDO a, a1, i, i1
           Taiai(a,i,a1,i1)              = 0.0
          #PREPARE VCE2AA(a,i,a1,i1)    = Taiai(a,i,a1,i1)
           PREPARE VTEMP2AA1(a,i,a1,i1)    = Taiai(a,i,a1,i1)
           PREPARE VCHACT2AA(a,i,a1,i1) = Taiai(a,i,a1,i1)
     ENDPARDO  a, a1, i, i1
#
     execute server_barrier
#
     PARDO a, a1, i, i1
                 REQUEST            VCH2AA(a,i,a1,i1) a 
                 taiai(a,i,a1,i1) = VCH2AA(a,i,a1,i1)  
#
                 R3aiai(a1,i,a,i1) = 0.0
                 Raiai(a,i,a1,i1)  = 0.0
#
                 if a == a1
#   
                    Raiai(a,i,a1,i1)    =Taiai(a,i,a1,i1)
                    execute symm_force_a Raiai
#
                 endif
#
                 if a < a1
#
                    Raiai(a,i,a1,i1)   = Taiai(a,i,a1,i1)
                    R3aiai(a1,i,a,i1)  = Taiai(a,i,a1,i1)
                    R3aiai(a1,i,a,i1) *= -1.0
#
                 endif
#
                 PREPARE VTEMP2AA1(a,i,a1,i1) += Raiai(a,i,a1,i1)
                 PREPARE VTEMP2AA1(a1,i,a,i1) += R3aiai(a1,i,a,i1)
#
     ENDPARDO  a, a1, i, i1
#
     execute server_barrier
#
     PARDO a, a1, i, i1
#
           REQUEST            VTEMP2AA1(a,i,a1,i1) i1
           Taiai(a,i,a1,i1) = VTEMP2AA1(a,i,a1,i1)
#
           R2aiai(a,i1,a1,i)= 0.0
           Raiai(a,i,a1,i1) = 0.0
#
           if i == i1
#
              Raiai(a,i,a1,i1)=Taiai(a,i,a1,i1)
              execute symm_force_i Raiai
#
           endif
#
           if i < i1
#
              Raiai(a,i,a1,i1)   = Taiai(a,i,a1,i1)
              R2aiai(a,i1,a1,i)  = Taiai(a,i,a1,i1)
              R2aiai(a,i1,a1,i) *= -1.0
#
           endif
#
           PREPARE VCHACT2AA(a,i,a1,i1) += Raiai(a,i,a1,i1)
           PREPARE VCHACT2AA(a,i1,a1,i) += R2aiai(a,i1,a1,i)
#
     ENDPARDO  a, a1, i, i1
#
     execute server_barrier
#
     ENDPROC SYMMETRHC_A
#    ------------------- 
#
     PROC SYMMETRHC_B
#    ----------------
#
     PARDO a, a1, i, i1
           REQUEST            VCHACT2AA(a,i,a1,i1) i1
           Taiai(a,i,a1,i1) = VCHACT2AA(a,i,a1,i1)
#
                 t2aiai(a,i,a1,i1)        = Taiai(a,i,a1,i1) 
                 PREPARE VCH2AA(a,i,a1,i1) = t2aiai(a,i,a1,i1)
#
     ENDPARDO  a, a1, i, i1
#
     ENDPROC SYMMETRHC_B
#    -------------------
#
#-------------------------------------------------------------------------


# ---------------------------------------------------------------------------- 
#
#
     PROC VCHACT_ZERO
#    ---------------
#
          PARDO a, i
                tai(a,i) = 0.0
                PUT VCHACT1A(a,i) = tai(a,i)
          ENDPARDO a, i
#
          PARDO a, a1, i, i1
                Taiai(a,i,a1,i1) = 0.0
                PREPARE VCHACT2AA(a,i,a1,i1) = Taiai(a,i,a1,i1)
          ENDPARDO a, a1, i, i1
#
          PARDO a, b, i, j
                Taibj(a,i,b,j) = 0.0
                PREPARE VCHACT2AB(a,i,b,j) = Taibj(a,i,b,j)
          ENDPARDO a, b, i, j
#    
     ENDPROC VCHACT_ZERO
#    ------------------- 
#
# ---------------------------------------------------------------------------- 


#
#-------------------------------------------------------------------------
#
#     --------------------
      PROC  LEFT_FACTORIZE
#     --------------------
#
#
     PARDO i1, b, i, j
           T1pqpq(i1,b,i,j)         = 0.0
           PREPARE Njjai(i1,b,i,j) = T1pqpq(i1,b,i,j)
           PREPARE Niibj(i1,b,i,j) = T1pqpq(i1,b,i,j)
     ENDPARDO i1, b, i, j

     PARDO i, i1, i2, a
           T1pppp(i1,a,i,i2)        = 0.0
           prepare Niiai(i1,a,i,i2) = T1pppp(i1,a,i,i2)
     ENDPARDO i, i1, i2, a

     PARDO i, i1, j, j1
           tiijj(i,i1,j,j1) = 0.0
           put Niijj(i,i1,j,j1) = tiijj(i,i1,j,j1)
     ENDPARDO i, i1, j, j1

     PARDO i, i1, i2, i3
           tiiii(i,i1,i2,i3) = 0.0
           PUT Niiii(i,i1,i2,i3) = tiiii(i,i1,i2,i3)
     ENDPARDO i, i1, i2, i3

     EXECUTE  SIP_BARRIER
     EXECUTE  SERVER_BARRIER
#
#    Form Half back transformed cluster arrays  
#    -----------------------------------------
#
     PARDO a1, i1, i
#
           allocate LLaiai(*,i,a1,i1)
#
           DO a
              REQUEST              VCACT2AA(a,i,a1,i1) i1
              LLaiai(a,i,a1,i1)  = VCACT2AA(a, i,a1,i1)
              LLaiai(a,i,a1,i1) *= 2.0
           ENDDO a
#
           DO lambda
              Zaa(lambda,i,a1,i1) = 0.0
              DO a
                 Txiai(lambda,i,a1,i1) = LLaiai(a,i,a1,i1)*ca(lambda,a)
                 Zaa(lambda,i,a1,i1)  += Txiai(lambda,i,a1,i1)
              ENDDO a
              PREPARE T1AO_aa(lambda,i,a1,i1) = Zaa(lambda,i,a1,i1)
           ENDDO lambda
#
           deallocate LLaiai(*,i,a1,i1)
#
     ENDPARDO a1, i1, i
#
     PARDO b, j, i
#
           allocate LLaibj(*,i,b,j)
#
           DO a
              REQUEST           VCACT2AB(a,i,b,j) j
              LLaibj(a,i,b,j) = VCACT2AB(a,i,b,j)
           ENDDO a
#
           DO lambda
              Zab(lambda,i,b,j) = 0.0
              DO a
                 Txibj(lambda,i,b,j) = LLaibj(a,i,b,j)*ca(lambda,a)
                 Zab(lambda,i,b,j)  += Txibj(lambda,i,b,j)
              ENDDO a
              PREPARE T1AO_ab(lambda,i,b,j) = Zab(lambda,i,b,j)
           ENDDO lambda

           deallocate LLaibj(*,i,b,j)

     ENDPARDO b, j, i
#
#
#                 cb  ij
#     Form F   = t   l
#           ab    ij  ca
#
#
#       ALPHA
#       -----
#
#          Alpha - Alpha part
#
#
      PARDO  i, i1, a1, a2

         REQUEST              VCACT2AA (a2,i,a1,i1) i
         tpppp (i1,a2,i,a1) = VCACT2AA (a2,i,a1,i1)

         DO a
            REQUEST          T2old_aa (a,i1,a2,i) a
            taa    (a,a1)  = T2old_aa (a,i1,a2,i) * tpppp (i1,a2,i,a1)
            taa    (a,a1) *= 0.5
            LFae_a (a,a1) -= taa (a,a1)
         ENDDO a

      ENDPARDO  i, i1, a1, a2
#
#
#          Alpha - Beta part
#
#
      PARDO  i, j, a1, b

         REQUEST            VCACT2AB (a1,i,b,j) j
         tpppp (i,b,j,a1) = VCACT2AB (a1,i,b,j)

         DO a
            REQUEST          T2old_ab (a,i,b,j) a
            taa    (a,a1)  = T2old_ab (a,i,b,j) * tpppp (i,b,j,a1)
            LFae_a (a,a1) -= taa (a,a1)
         ENDDO a

      ENDPARDO  i, j, a1, b
#
#
#                 ab  ij
#     Form F   = t   l
#           ij    ij  ab
#
#
#       ALPHA
#       -----
#
#          Alpha - Alpha part
#
#
      PARDO  i1, i2, a, a1

         REQUEST             VCACT2AA (a,i2,a1,i1) i1
         DO i
            REQUEST             T2old_aa (a,i2,a1,i) i
            tpppp (i,a,i2,a1) = T2old_aa (a,i2,a1,i)

            tii    (i,i1)  = tpppp (i,a,i2,a1) * VCACT2AA (a,i2,a1,i1)
            tii    (i,i1) *= 0.5
            LFmi_a (i,i1) += tii (i,i1)
         ENDDO i

      ENDPARDO  i1, i2, a, a1
#
#
#          Alpha - Beta part
#
#
      PARDO  i1, j, a, b

         REQUEST            VCACT2AB (a,i1,b,j) j
         tpppp (a,b,j,i1) = VCACT2AB (a,i1,b,j)

         DO i
            REQUEST            T2old_ab (a,i,b,j) i
            tiabj  (i,a,b,j) = T2old_ab (a,i,b,j)
            tii    (i,i1)    = tiabj (i,a,b,j) * tpppp (a,b,j,i1)
            LFmi_a (i,i1)   += tii (i,i1)
         ENDDO i

      ENDPARDO  i1, j, a, b
#
#
#       BETA 
#       ----
#
#          Beta - Beta part
#
#
      PARDO  j1, j2, b, b1

         REQUEST  VCACT2AA (b,j2,b1,j1) j1
         DO j
            REQUEST              T2old_aa (b,j2,b1,j) j
            tqqqq  (j,b,j2,b1) = T2old_aa (b,j2,b1,j)
            tjj    (j,j1)      = tqqqq (j,b,j2,b1) * VCACT2AA (b,j2,b1,j1)
            tjj    (j,j1)     *= 0.5
            LFmi_b (j,j1)     += tjj (j,j1)
         ENDDO j

      ENDPARDO  j1, j2, b, b1
#     
#
#          Beta - Alpha part
#
#
      PARDO  i, j1, a, b

         REQUEST  VCACT2AB (a,i,b,j1) j1
         DO j
            REQUEST            T2old_ab (a,i,b,j) i
            tqppq  (j,a,i,b) = T2old_ab (a,i,b,j)
            tjj    (j,j1)    = tqppq (j,a,i,b) * VCACT2AB (a,i,b,j1)
            LFmi_b (j,j1)   += tjj (j,j1)
         ENDDO j

      ENDPARDO  i, j1, a, b
#
#
#                     -               -
#           ij    ij |  1   cd    c d  |
#     Form N   = l   | --- t   + t t   |
#           kl    cd |  2   kl    k l  |
#                     -               -
#
#       ALPHA - ALPHA
#       -------------
#
      PARDO  i2, i3, a, a1

         ALLOCATE l2aiai (a,i2,a1,i3)
         REQUEST  T2old_aa   (a,i2,a1,i3) i3

         tai    (a,i2)        = ST1A (a,i2)
         t1ai   (a,i3)        = ST1A (a,i3)
         t1aiai (a,i2,a1,i3)  = tai  (a,i2) ^ ST1A (a1,i3)
         t2aiai (a,i2,a1,i3)  = t1ai (a,i3) ^ ST1A (a1,i2)
         t1aiai (a,i2,a1,i3) -= t2aiai (a,i2,a1,i3)

         l2aiai  (a,i2,a1,i3)  = T2old_aa (a,i2,a1,i3)
         l2aiai  (a,i2,a1,i3) += t1aiai (a,i2,a1,i3)
         l2aiai  (a,i2,a1,i3) *= 0.5

         DO i
         DO i1
            REQUEST              VCACT2AA (a,i,a1,i1) i1
            tiiii (i2,i,i3,i1) = VCACT2AA (a,i,a1,i1) * l2aiai (a,i2,a1,i3)
            PUT  Niiii (i2,i,i3,i1) += tiiii (i2,i,i3,i1)
         ENDDO i1
         ENDDO i

         DEALLOCATE l2aiai (a,i2,a1,i3)

      ENDPARDO  i2, i3, a, a1

#      EXECUTE  SIP_BARRIER
#      EXECUTE  SERVER_BARRIER
#      EXECUTE  PRINT_SCALAR  ZERO
#      PARDO  i, i1, i2, i3
#         GET                  Niiii (i,i1,i2,i3)
#         tiiii (i,i1,i2,i3) = Niiii (i,i1,i2,i3)
#         EXECUTE  DUMP_AMP  tiiii
#      ENDPARDO  i, i1, i2, i3
#
#
#       ALPHA - BETA
#       ------------
#        
      PARDO  i2, j1, a, b

         REQUEST  T2old_ab (a,i2,b,j1) j1
         GET      t1a_old  (a,i2)
         GET      t1b_old  (b,j1)

         tai   (a,i2)        = t1a_old  (a,i2)
         taibj (a,i2,b,j1)   = tai  (a,i2) ^ t1b_old (b,j1)
         taibj (a,i2,b,j1)  += T2old_ab (a,i2,b,j1)

         DO i
         DO j
            REQUEST             VCACT2AB (a,i,b,j) j
            tiijj (i,i2,j,j1) = VCACT2AB (a,i,b,j) * taibj (a,i2,b,j1)
            PUT  Niijj (i,i2,j,j1) += tiijj (i,i2,j,j1)
         ENDDO j
         ENDDO i

      ENDPARDO  i2, j1, a, b
#     
#
#
#           ck    d  ij
#     Form N   = t  l
#           ij    k  cd
#
#
#       ALPHA - ALPHA
#       -------------  
#
      PARDO  i, i1, i2, a

         DO a1
            REQUEST  VCACT2AA (a,i,a1,i1) a1
            GET      t1a_old     (a1,i2)

            tpppp (i,a,i1,i2) = t1a_old (a1,i2) * VCACT2AA (a,i,a1,i1)
            PREPARE  Niiai (i,a,i1,i2) += tpppp (i,a,i1,i2)
         ENDDO a1

      ENDPARDO  i, i1, i2, a

#      EXECUTE  SIP_BARRIER
#      EXECUTE  SERVER_BARRIER
#      EXECUTE  PRINT_SCALAR  ZERO
#      PARDO  i, i1, i2, a
#         REQUEST  Niiai (i,a,i1,i2) i2
#         tpppp (i,a,i1,i2) = Niiai (i,a,i1,i2)
#         EXECUTE  C2AA_PRINT  tpppp  ZERO
#      ENDPARDO  i, i1, i2, a
#      EXECUTE  SIP_BARRIER
#      EXECUTE  SERVER_BARRIER
#
#
#       ALPHA - BETA
#       ------------  
#
      PARDO  a, i, b, j

         REQUEST  VCACT2AB (a,i,b,j) j
         tpppp (j,a,i,b) = VCACT2AB (a,i,b,j)

         DO j1
            GET  t1b_old (b,j1)
            tpqpq (j,a,i,j1) = tpppp (j,a,i,b) * t1b_old (b,j1)
            PREPARE  Njjai (j,a,i,j1) += tpqpq (j,a,i,j1)
         ENDDO j1

      ENDPARDO  a, i, b, j

#      PARDO  i, j, j1, a
#
#         DO b
#            GET               T1B      (b,j1)
#            REQUEST           VCACT2AB (a,i,b,j) b
#
#            tqppq (j,a,i,j1) = VCACT2AB (a,i,b,j) * T1B (b,j1)
#            PREPARE  Njjai (j,a,i,j1) += tqppq (j,a,i,j1)
#         ENDDO b
#      ENDPARDO  i, j, j1, a

      PARDO  i, j, b, a

         REQUEST  VCACT2AB (a,i,b,j) j

         DO i2
            GET                t1a_old (a,i2)
            tpqpq (i,b,i2,j) = t1a_old (a,i2) * VCACT2AB (a,i,b,j)
            PREPARE  Niibj (i,b,i2,j) += tpqpq (i,b,i2,j)
         ENDDO i2

      ENDPARDO  i, j, b, a

#      EXECUTE  SERVER_BARRIER
#      EXECUTE  PRINT_SCALAR  ZERO
#      PARDO  j, a, i, j1
#         REQUEST            Njjai (j,a,i,j1) j1
#         tpppp (j,a,i,j1) = Njjai (j,a,i,j1)
#         EXECUTE  C2AB_PRINT  tpppp  ZERO
#      ENDPARDO  j, a, i, j1
#      EXECUTE  SERVER_BARRIER
#      EXECUTE  PRINT_SCALAR  ZERO
#      PARDO  i2, b, i, j
#         REQUEST            Niibj (i2,b,i,j) j
#         tpppp (i2,b,i,j) = Niibj (i2,b,i,j)
#         EXECUTE  C2AB_PRINT  tpppp  ZERO
#      ENDPARDO  i2, b, i, j
#      EXECUTE  SERVER_BARRIER
#
#
#
#          Done computing the intermediates!
#
#
      DO i
      DO i1
         tii(i,i1)        = LFmi_a(i,i1)
         PUT Fmi_a(i,i1) += tii(i,i1)
      ENDDO i1
      ENDDO i
      DO j
      DO j1
         tjj(j,j1)        = LFmi_b(j,j1)
         PUT Fmi_b(j,j1) += tjj(j,j1)
      ENDDO j1
      ENDDO j
      DO a
      DO a1
         taa(a,a1)        = LFae_a(a,a1)
         PUT Fae_a(a,a1) += taa(a,a1)
      ENDDO a1
      ENDDO a
      execute sip_barrier
      execute server_barrier
      DO a
      DO a1
         GET            Fae_a(a,a1)
         taa(a,a1)    = Fae_a(a,a1)
         LFae_a(a,a1) = taa(a,a1) # Fae_a(a,a1) 
      ENDDO a1
      ENDDO a
      DO i
      DO i1
         GET            Fmi_a(i,i1)
         tii(i,i1)    = Fmi_a(i,i1)
         LFmi_a(i,i1) = tii(i,i1) # Fmi_a(i,i1) 
      ENDDO i1
      ENDDO i
      DO j
      DO j1
         GET            Fmi_b(j,j1)
         tjj(j,j1)    = Fmi_b(j,j1)
         LFmi_b(j,j1) = tjj(j,j1) # Fmi_b(j,j1) 
      ENDDO j1
      ENDDO j
      EXECUTE SIP_BARRIER
#
#
#     -----------------------
      ENDPROC  LEFT_FACTORIZE
#-------------------------------------------------------------------------




#    ------------------------------------------------------------------------ 
#
     PROC AOLADDER_NEW  
#
#    ------------------------------------------------------------------------ 
    #execute server_barrier 
#
     PARDO lambda, i, i1  
#
           allocate Lxiai(lambda,i,*,i1) 
#
           DO a1 
              REQUEST                 T1AO_aa(lambda,i,a1,i1) i1  
              Lxiai(lambda,i,a1,i1) = T1AO_aa(lambda,i,a1,i1) 
           ENDDO a1 
#
           DO sigma 
              ZZaa(lambda,i,sigma,i1)  = 0.0 
              PREPARE T2AO_aa(lambda,i,sigma,i1) = ZZaa(lambda,i,sigma,i1)
              DO a1 
                 Txixi(lambda,i,sigma,i1) = Lxiai(lambda,i,a1,i1)*ca(sigma,a1)
                 ZZaa(lambda,i,sigma,i1) += Txixi(lambda,i,sigma,i1)  
              ENDDO a1 
              PREPARE T3AO_aa(lambda,i,sigma,i1) = ZZaa(lambda,i,sigma,i1)
           ENDDO sigma 
#
           deallocate Lxiai(lambda,i,*,i1) 
#
     ENDPARDO lambda, i, i1   
#
     PARDO lambda, i, j  
#
           allocate Lxibj(lambda,i,*,j) 
#
           DO b 
              REQUEST               T1AO_ab(lambda,i,b,j) j  
              Lxibj(lambda,i,b,j) = T1AO_ab(lambda,i,b,j) 
           ENDDO b 
#
           DO sigma 
              ZZab(lambda,i,sigma,j)  = 0.0 
              PREPARE T2AO_ab(lambda,i,sigma,j) = ZZab(lambda,i,sigma,j)
              DO b 
                 Txixj(lambda,i,sigma,j) = Lxibj(lambda,i,b,j)*ca(sigma,b)
                 ZZab(lambda,i,sigma,j) += Txixj(lambda,i,sigma,j)  
              ENDDO b 
              PREPARE T3AO_ab(lambda,i,sigma,j) = ZZab(lambda,i,sigma,j)
           ENDDO sigma 
#
           deallocate Lxibj(lambda,i,*,j) 
#
     ENDPARDO lambda, i, j   
#
     execute server_barrier   
#
#    Contract AOINT with half back transformed Amplitudes 
#    ----------------------------------------------------    
#
     PARDO mu, nu, lambda, sigma
#
           compute_integrals aoint(lambda,mu,sigma,nu)
#
           DO i
           DO i1
              if i < i1 
                 REQUEST                        T3AO_aa(lambda,i,sigma,i1) i1
                 Yaa(mu,i,nu,i1)              = aoint(lambda,mu,sigma,nu)*T3AO_aa(lambda,i,sigma,i1)
                 Y1aa(nu,i1,mu,i)             = Yaa(mu,i,nu,i1)  
                 PREPARE T2AO_aa(mu,i,nu,i1) += Yaa(mu,i,nu,i1)
                 PREPARE T2AO_aa(nu,i1,mu,i) += Y1aa(nu,i1,mu,i)
              endif 
              if i == i1 
                 REQUEST                        T3AO_aa(lambda,i,sigma,i1) i1
                 Yaa(mu,i,nu,i1)              = aoint(lambda,mu,sigma,nu)*T3AO_aa(lambda,i,sigma,i1)
                 PREPARE T2AO_aa(mu,i,nu,i1) += Yaa(mu,i,nu,i1)
              endif 
           ENDDO i1
           ENDDO i
#
           DO i
           DO i1
              if i < i1 
                 REQUEST                        T3AO_ab(lambda,i,sigma,i1) i1
                 Yaa(mu,i,nu,i1)              = aoint(lambda,mu,sigma,nu)*T3AO_ab(lambda,i,sigma,i1)
                 Y1aa(nu,i1,mu,i)             = Yaa(mu,i,nu,i1)  
                 PREPARE T2AO_ab(mu,i,nu,i1) += Yaa(mu,i,nu,i1)
                 PREPARE T2AO_ab(nu,i1,mu,i) += Y1aa(nu,i1,mu,i)
              endif 
              if i == i1 
                 REQUEST                        T3AO_ab(lambda,i,sigma,i1) i1
                 Yaa(mu,i,nu,i1)              = aoint(lambda,mu,sigma,nu)*T3AO_ab(lambda,i,sigma,i1)
                 PREPARE T2AO_ab(mu,i,nu,i1) += Yaa(mu,i,nu,i1)
              endif 
           ENDDO i1
           ENDDO i
#
     ENDPARDO mu, nu, lambda, sigma
#
     execute server_barrier  
#
#    Perform final transformation 
#    ---------------------------- 
#
     PARDO nu, i, i1
           allocate LLaa(*,i,nu,i1)
           DO mu
              REQUEST T2AO_aa(mu,i,nu,i1) i1
              DO a
                 Taixi(a,i,nu,i1) = T2AO_aa(mu,i,nu,i1)*ca(mu,a)
                 LLaa(a,i,nu,i1) += Taixi(a,i,nu,i1)
              ENDDO a
           ENDDO mu
           DO a
              LLaa(a,i,nu,i1) *= 0.5
              DO a1
                 Taiai(a,i,a1,i1)             = LLaa(a,i,nu,i1)*ca(nu,a1)
                 PREPARE VCHACT2AA(a,i,a1,i1) += Taiai(a,i,a1,i1) 
              ENDDO a1
           ENDDO a
           deallocate LLaa(*,i,nu,i1)
     ENDPARDO nu, i, i1
#
     PARDO nu, i, j
           allocate LLab(*,i,nu,j)
           DO mu
              REQUEST T2AO_ab(mu,i,nu,j) j
              DO a
                 Taixj(a,i,nu,j) = T2AO_ab(mu,i,nu,j)*ca(mu,a)
                 LLab(a,i,nu,j) += Taixj(a,i,nu,j)
              ENDDO a
           ENDDO mu
           DO a
              DO b
                 Taibj(a,i,b,j)             = LLab(a,i,nu,j)*ca(nu,b)
                 PREPARE VCHACT2AB(a,i,b,j) += Taibj(a,i,b,j) 
              ENDDO b
           ENDDO a
           deallocate LLab(*,i,nu,j)
     ENDPARDO nu, i, j
#
#    ------------------------------------------------------------------------ 
#
     ENDPROC AOLADDER_NEW  
#    -------------------- 
#
#    ------------------------------------------------------------------------ 


#-------------------------------------------------------------------------
#
#     ----------------
      PROC  L2AB_WORKS
#     ----------------
#   
#
#          Begin the LISTT2IN in ACES2
#
#
      PARDO  a, i, b, j

         ALLOCATE  laibj (a,i,b,j)

         DO i1
            GET                 VCACT1A (a,i1)
            REQUEST             HBAR_JKIA_aabb (i,i1,j,b) i1
            tpppp (i1,i,b,j)  = HBAR_JKIA_aabb (i,i1,j,b)
            taibj (a,i,b,j)   = VCACT1A (a,i1) * tpppp (i1,i,b,j)
            laibj (a,i,b,j)  -= taibj (a,i,b,j)
         ENDDO i1

         DO j1
            GET                 VCACT1A (b,j1)
            REQUEST             HBAR_JKIA_aabb (j,j1,i,a) j1
            tpppp (a,i,j1,j)  = HBAR_JKIA_aabb (j,j1,i,a)
            taibj (a,i,b,j)   = tpppp (a,i,j1,j) * VCACT1A (b,j1)
            laibj (a,i,b,j)  -= taibj (a,i,b,j)
         ENDDO j1

         PREPARE  VCHACT2AB (a,i,b,j) += laibj (a,i,b,j)

         DEALLOCATE  laibj (a,i,b,j)

      ENDPARDO  a, i, b, j
#
      PARDO  a, i, b, j

         ALLOCATE  laibj (a,i,b,j)

         DO a1
            GET                 VCACT1A (a1,i)
            REQUEST             HBAR_AIBC_aabb (a1,a,j,b) a1
            taabj (a,a1,b,j)  = HBAR_AIBC_aabb (a1,a,j,b)
            taibj (a,i,b,j)   = taabj (a,a1,b,j) * VCACT1A (a1,i)
            laibj (a,i,b,j)  += taibj (a,i,b,j)
         ENDDO a1

         DO b1
            GET                 VCACT1A (b1,j)
            REQUEST             HBAR_AIBC_aabb (b1,b,i,a) b1
            tpppp (a,i,b,b1)  = HBAR_AIBC_aabb (b1,b,i,a)
            taibj (a,i,b,j)   = tpppp (a,i,b,b1) * VCACT1A (b1,j)
            laibj (a,i,b,j)  += taibj (a,i,b,j)
         ENDDO b1

         PREPARE  VCHACT2AB (a,i,b,j) += laibj (a,i,b,j)

         DEALLOCATE  laibj (a,i,b,j)

      ENDPARDO  a, i, b ,j
#
#
#      This ends the DT1 IN T2 PORTION
#
#
      PARDO  a, i, b, j1

         ALLOCATE  laibj (a,i,b,*)

         DO i1
            REQUEST  VCACT2AB (a,i1,b,j1) i1
            REQUEST  Vpiqj    (a,i1,b,j1) i1
            DO j
               REQUEST  HBAR_iijj (i,i1,j,j1) j
               GET      Niijj     (i,i1,j,j1)

               taibj (a,i,b,j)  = HBAR_iijj (i,i1,j,j1) * VCACT2AB (a,i1,b,j1)
               laibj (a,i,b,j) += taibj (a,i,b,j)

               taibj (a,i,b,j)  = Vpiqj (a,i1,b,j1) * Niijj (i,i1,j,j1)
               laibj (a,i,b,j) += taibj (a,i,b,j)
            ENDDO j
         ENDDO i1

         DO j
            PREPARE  VCHACT2AB (a,i,b,j) += laibj (a,i,b,j)
         ENDDO j

         DEALLOCATE  laibj (a,i,b,*)

      ENDPARDO  a, i, b, j1
#
#      This ends after W1LAD in ACESII
#
#
      PARDO  a, i, b, b1

         ALLOCATE  laibj  (a,i,b,*)

         DO i1
            REQUEST             Vbbai (b1,b,a,i1) i1
            tpqpq (a,i1,b,b1) = Vbbai (b1,b,a,i1)
            DO j
               REQUEST             Niibj (i,b1,i1,j) j
               tpppp (i1,i,b1,j) = Niibj (i,b1,i1,j)
               taibj (a,i,b,j)   = tpqpq (a,i1,b,b1) * tpppp (i1,i,b1,j)
               laibj (a,i,b,j)  -= taibj (a,i,b,j)
            ENDDO j
         ENDDO i1

         DO j
            PREPARE  VCHACT2AB (a,i,b,j) += laibj (a,i,b,j)
         ENDDO j

         DO j
            tpppp (b,j,a,i)               = laibj (a,i,b,j)
            PREPARE  VCHACT2AB (b,j,a,i) += tpppp (b,j,a,i)
         ENDDO j

         DEALLOCATE  laibj  (a,i,b,*)

      ENDPARDO  a, i, b, b1
#
#      This ends the l1w1, but I symmetrized the l1w1, so I'll
#      check an unsymmetrized version later
#
#
#
#          BEGIN  LISTT2RS from ACES2
#
#
      PARDO  a, i, b

        ALLOCATE  laibj (a,i,b,*)

        DO j1
           REQUEST  VCACT2AB (a,i,b,j1) j1
           REQUEST  Vpiqj    (a,i,b,j1) j1
           DO j
              t1aibj (a,i,b,j)  = VCACT2AB (a,i,b,j1) * LHBAR_ii (j,j1)
              laibj  (a,i,b,j) -= t1aibj (a,i,b,j)

              taibj  (a,i,b,j)  = Vpiqj (a,i,b,j1) * LFmi_b (j1,j)
              laibj  (a,i,b,j) -= taibj (a,i,b,j)
           ENDDO j
        ENDDO j1

        DO j
           PREPARE  VCHACT2AB (a,i,b,j) += laibj (a,i,b,j)
        ENDDO j

        DEALLOCATE  laibj (a,i,b,*)

      ENDPARDO  a, i, b
#
      PARDO  a, j, b

        ALLOCATE  laibj (a,*,b,j)

        DO i1
           REQUEST  VCACT2AB (a,i1,b,j) j
           REQUEST  Vpiqj    (a,i1,b,j) j
           DO i
              t1aibj (a,i,b,j)  = VCACT2AB (a,i1,b,j) * LHBAR_ii (i,i1)
              laibj  (a,i,b,j) -= t1aibj (a,i,b,j)

              taibj  (a,i,b,j)  = Vpiqj (a,i1,b,j) * LFmi_b (i1,i)
              laibj  (a,i,b,j) -= taibj (a,i,b,j)
           ENDDO i
        ENDDO i1 

        DO i
           PREPARE  VCHACT2AB (a,i,b,j) += laibj (a,i,b,j)
        ENDDO i

        DEALLOCATE  laibj (a,*,b,j)

      ENDPARDO  a, j, b
#
# XXXXXXXXXX 

      PARDO  a, i, j

         ALLOCATE  laibj (a,i,*,j)

         DO b1
            REQUEST  VCACT2AB (a,i,b1,j) j
            REQUEST  Vpiqj    (a,i,b1,j) j
            DO b
               t1aibj (a,i,b,j)  = LHBAR_aa (b1,b) * VCACT2AB (a,i,b1,j)
               laibj  (a,i,b,j) += t1aibj (a,i,b,j)

               taibj  (a,i,b,j)  = Vpiqj  (a,i,b1,j) * LFae_a (b1,b)
               laibj  (a,i,b,j) += taibj  (a,i,b,j)
            ENDDO b
         ENDDO b1

         DO b
            PREPARE  VCHACT2AB (a,i,b,j) += laibj (a,i,b,j)
         ENDDO b

         DEALLOCATE  laibj (a,i,*,j)

      ENDPARDO  a, i, j
#

      PARDO  b, i, j

         ALLOCATE  laibj (*,i,b,j)

         DO a1
            REQUEST  VCACT2AB (a1,i,b,j) j
            REQUEST  Vpiqj    (a1,i,b,j) j
            DO a
               t1aibj (a,i,b,j)  = LHBAR_aa (a1,a) * VCACT2AB (a1,i,b,j)
               laibj  (a,i,b,j) += t1aibj (a,i,b,j)

               taibj  (a,i,b,j)  = Vpiqj  (a1,i,b,j) * LFae_a (a1,a)
               laibj  (a,i,b,j) += taibj  (a,i,b,j)
            ENDDO a
         ENDDO a1

         DO a
            lbjai (b,j,a,i) = laibj (a,i,b,j)
            PREPARE  VCHACT2AB (a,i,b,j) += laibj (a,i,b,j)
         ENDDO a

         DEALLOCATE  laibj (*,i,b,j)

      ENDPARDO  b, i, j
#
#
#      This ends the DFT2INT2 and the Three body term!
#
#
# THIS NEEDS TO BE OPTIMIZED!
#
#

      PARDO  a, i, b, j

         GET         VCACT1A  (a,i)
         tbj (b,j) = LHBAR_jb (j,b)

         taibj (a,i,b,j)  = VCACT1A (a,i) ^ tbj (b,j)
         tbjai (b,j,a,i)  = taibj (a,i,b,j)

         PREPARE  VCHACT2AB (a,i,b,j) += taibj (a,i,b,j)
         PREPARE  VCHACT2AB (b,j,a,i) += tbjai (b,j,a,i)

      ENDPARDO  a, i, b, j
#
# VFLVFLVFL ???? 
#
     PARDO j, b, i1, a1
#
           REQUEST VCACT2AB(a1,i1,b,j) j
           REQUEST HBAR_AJIB_aabb(j,b,a1,i1) i1
           tpppp (a1,i1,b,j) = HBAR_AJIB_aabb (j,b,a1,i1)
#
           DO i
           DO a

            if a < b
              REQUEST                       VCACT2AA(a,i,a1,i1) i1
              REQUEST                       HBAR_AJIB_aaaa(i,a,a1,i1) i
              T1aibj(a,i,b,j)             = HBAR_AJIB_aaaa(i,a,a1,i1)*VCACT2AB(a1,i1,b,j)
              T2aibj(a,i,b,j)             = VCACT2AA(a,i,a1,i1) * tpppp (a1,i1,b,j)
              Taibj(a,i,b,j)              = T1aibj(a,i,b,j)
              Taibj(a,i,b,j)             += T2aibj(a,i,b,j)
              T3aibj(b,j,a,i)             = Taibj(a,i,b,j)
              PREPARE VCHACT2AB(a,i,b,j) += Taibj(a,i,b,j)
              PREPARE VCHACT2AB(b,j,a,i) += T3aibj(b,j,a,i)

            endif

            if a == b
              REQUEST                       VCACT2AA(a,i,a1,i1) i1
              REQUEST                       HBAR_AJIB_aaaa(i,a,a1,i1) i
              tpppp (a1,i1,b,j)           = HBAR_AJIB_aabb (j,b,a1,i1)
              T1aibj(a,i,b,j)             = HBAR_AJIB_aaaa(i,a,a1,i1)*VCACT2AB(a1,i1,b,j)
              T2aibj(a,i,b,j)             = VCACT2AA (a,i,a1,i1) * tpppp (a1,i1,b,j)
              Taibj(a,i,b,j)              = T1aibj(a,i,b,j)
              Taibj(a,i,b,j)             += T2aibj(a,i,b,j)
              PREPARE VCHACT2AB(a,i,b,j) += Taibj(a,i,b,j)

            endif

           ENDDO a
           ENDDO i
#
     ENDPARDO j, b, i1, a1

     PARDO i, a, j1, b1
#
           REQUEST VCACT2AB(a,i,b1,j1) j1
           REQUEST HBAR_AJIB_aabb(i,a,b1,j1) j1
#
           DO j
           DO b

            if a < b
              REQUEST                       VCACT2AA(b,j,b1,j1) j1
              REQUEST                       HBAR_AJIB_aaaa(j,b,b1,j1) j
              tpppp (b1,j1,b,j)           = HBAR_AJIB_aaaa(j,b,b1,j1)
              T1aibj(a,i,b,j)             = VCACT2AB(a,i,b1,j1) * tpppp (b1,j1,b,j)
              T2aibj(a,i,b,j)             = HBAR_AJIB_aabb(i,a,b1,j1)*VCACT2AA(b,j,b1,j1)
              Taibj(a,i,b,j)              = T1aibj(a,i,b,j)
              Taibj(a,i,b,j)             += T2aibj(a,i,b,j)
              T3aibj(b,j,a,i)             = Taibj(a,i,b,j)
              PREPARE VCHACT2AB(a,i,b,j) += Taibj(a,i,b,j)
              PREPARE VCHACT2AB(b,j,a,i) += T3aibj(b,j,a,i)

            endif

            if a == b
              REQUEST                       VCACT2AA(b,j,b1,j1) j1
              REQUEST                       HBAR_AJIB_aaaa(j,b,b1,j1) j
              tpppp (b1,j1,b,j)           = HBAR_AJIB_aaaa(j,b,b1,j1)
              T1aibj(a,i,b,j)             = VCACT2AB(a,i,b1,j1) * tpppp (b1,j1,b,j)
              T2aibj(a,i,b,j)             = HBAR_AJIB_aabb(i,a,b1,j1)*VCACT2AA(b,j,b1,j1)
              Taibj(a,i,b,j)              = T1aibj(a,i,b,j)
              Taibj(a,i,b,j)             += T2aibj(a,i,b,j)
              PREPARE VCHACT2AB(a,i,b,j) += Taibj(a,i,b,j)

            endif

           enddo b
           enddo j
#
     ENDPARDO i, a, j1, b1

#
     PARDO j, a, a1, j1
#
           REQUEST HBAR_AJIB_iibb(j,j1,a1,a) j1
#
           DO i
           DO b

            if a < b
              REQUEST                       VCACT2AB(a1,i,b,j1) j1
              Taibj(a,i,b,j)              = HBAR_AJIB_iibb(j,j1,a1,a)*VCACT2AB(a1,i,b,j1)
              T1aibj(b,j,a,i)             = Taibj(a,i,b,j)
              PREPARE VCHACT2AB(a,i,b,j) += Taibj(a,i,b,j)
              PREPARE VCHACT2AB(b,j,a,i) += T1aibj(b,j,a,i)

            endif

            if a == b
              REQUEST                       VCACT2AB(a1,i,b,j1) j1
              Taibj(a,i,b,j)              = HBAR_AJIB_iibb(j,j1,a1,a)*VCACT2AB(a1,i,b,j1)
              PREPARE VCHACT2AB(a,i,b,j) += Taibj(a,i,b,j)

            endif

           ENDDO b
           ENDDO i
#
     ENDPARDO j, a, a1, j1

     PARDO i, b, i1, b1
#
           REQUEST HBAR_AJIB_iibb(i,i1,b1,b) i1
#
           DO j
           DO a

            if a < b
              REQUEST                       VCACT2AB(a,i1,b1,j) j
              Taibj(a,i,b,j)              = HBAR_AJIB_iibb(i,i1,b1,b)*VCACT2AB(a,i1,b1,j)
              T1aibj(b,j,a,i)             = taibj(a,i,b,j)
              PREPARE VCHACT2AB(a,i,b,j) += Taibj(a,i,b,j)
              PREPARE VCHACT2AB(b,j,a,i) += T1aibj(b,j,a,i)

            endif

            if a == b
              REQUEST                       VCACT2AB(a,i1,b1,j) j
              Taibj(a,i,b,j)              = HBAR_AJIB_iibb(i,i1,b1,b)*VCACT2AB(a,i1,b1,j)
              PREPARE VCHACT2AB(a,i,b,j) += Taibj(a,i,b,j)

            endif

           ENDDO a
           ENDDO j
#
     ENDPARDO i, b, i1, b1

#     -------------------
      ENDPROC  L2AB_WORKS
#-------------------------------------------------------------------------



#-------------------------------------------------------------------------
#
#     ----------------
      PROC  L2AA_WORKS
#     ----------------
#   
#        
#
      PARDO  a, i, i1, i2
      
         REQUEST             HBAR_JKIA_aaaa (i1,i2,i,a) i2
         tpppp (a,i,i2,i1) = HBAR_JKIA_aaaa (i1,i2,i,a)

         DO a1
            GET  VCACT1A (a1,i2)
            taiai  (a,i,a1,i1)  = tpppp (a,i,i2,i1) * VCACT1A (a1,i2)
            t1aiai (a1,i,a,i1)  = taiai (a,i,a1,i1)
            taiai  (a,i,a1,i1) *= -1.0
            
            PREPARE  VCHACT2AA (a,i,a1,i1) += taiai  (a,i,a1,i1)
            PREPARE  VCHACT2AA (a1,i,a,i1) += t1aiai (a1,i,a,i1)
         ENDDO a1  

      ENDPARDO  a, i, i1, i2

      PARDO  a, a1, a2, i
      WHERE a < a1

         REQUEST             HBAR_AIBC_aaaa (a2,a1,i,a) a
         tpppp (a,i,a1,a2) = HBAR_AIBC_aaaa (a2,a1,i,a)

         DO i1
            GET  VCACT1A (a2,i1)
            taiai  (a,i,a1,i1)  = tpppp (a,i,a1,a2) * VCACT1A (a2,i1)
            PUT  D2aa (a,i,a1,i1) += taiai (a,i,a1,i1)
         ENDDO i1
         
      ENDPARDO  a, a1, a2, i
            
      PARDO  a, a1, a2, i
      WHERE a == a1
         
         REQUEST             HBAR_AIBC_aaaa (a2,a1,i,a) a
         tpppp (a,i,a1,a2) = HBAR_AIBC_aaaa (a2,a1,i,a)
      
         DO i1
            GET  VCACT1A (a2,i1)

            taiai  (a,i,a1,i1)  = tpppp (a,i,a1,a2) * VCACT1A (a2,i1)
            t1aiai (a,i1,a1,i)  = taiai (a,i,a1,i1)
            t1aiai (a,i1,a1,i) *= -1.0

            PREPARE  VCHACT2AA (a,i,a1,i1) += taiai  (a,i,a1,i1)
            PREPARE  VCHACT2AA (a,i1,a1,i) += t1aiai (a,i1,a1,i)
         ENDDO i1

      ENDPARDO  a, a1, a2, i

      PARDO  a, a1, i2, i3

         WHERE i2 < i3

            REQUEST  VCACT2AA (a,i2,a1,i3) i3
            REQUEST  VSpipi   (a,i2,a1,i3) i3

            DO i
            DO i1
               REQUEST  HBAR_iiii (i,i2,i1,i3) i1
               GET      Niiii     (i2,i,i3,i1)

               taiai  (a,i,a1,i1)  = HBAR_iiii (i,i2,i1,i3) * VCACT2AA (a,i2,a1,i3)
               taiai  (a,i,a1,i1) *= 0.25
               t1aiai (a,i,a1,i1)  = taiai (a,i,a1,i1)

               taiai  (a,i,a1,i1)  = VSpipi (a,i2,a1,i3) * Niiii (i2,i,i3,i1)
               taiai  (a,i,a1,i1) *= 0.25
               t1aiai (a,i,a1,i1) += taiai (a,i,a1,i1)

               PUT  D2aa (a,i,a1,i1) += t1aiai (a,i,a1,i1)
            ENDDO i1
            ENDDO i

      ENDPARDO  a, a1, i2, i3

      PARDO  a, a1, i2, i3

         WHERE i2 == i3

            REQUEST  VCACT2AA (a,i2,a1,i3) i3
            REQUEST  VSpipi   (a,i2,a1,i3) i3

            DO i
            DO i1
               REQUEST  HBAR_iiii (i,i2,i1,i3) i1
               GET      Niiii     (i2,i,i3,i1)
               
               taiai  (a,i,a1,i1)  = HBAR_iiii (i,i2,i1,i3) * VCACT2AA (a,i2,a1,i3)
               taiai  (a,i,a1,i1) *= 0.125 
               t1aiai (a,i,a1,i1)  = taiai (a,i,a1,i1)
               
               taiai  (a,i,a1,i1)  = VSpipi (a,i2,a1,i3) * Niiii (i2,i,i3,i1)
               taiai  (a,i,a1,i1) *= 0.125 
               t1aiai (a,i,a1,i1) += taiai (a,i,a1,i1)
               
               PUT  D2aa (a,i,a1,i1) += t1aiai (a,i,a1,i1)
            ENDDO i1
            ENDDO i
      
      ENDPARDO  a, a1, i2, i3

      PARDO  a, i, a1, a2

         ALLOCATE  llaiai (a,i,a1,*)

         DO i2
            REQUEST  VSaaai (a1,a2,a,i2) i2
            tpppp (a,a2,a1,i2) = VSaaai (a1,a2,a,i2)
            DO i1
               REQUEST  Niiai (i1,a2,i,i2) i1
               t1pppp (a2,i,i2,i1) = Niiai (i1,a2,i,i2)
               taiai (a,i,a1,i1)  = tpppp (a,a2,a1,i2) * t1pppp (a2,i,i2,i1)
               llaiai (a,i,a1,i1) -= taiai (a,i,a1,i1)
            ENDDO i1
         ENDDO i2
         
         DO i1
            PREPARE  VCHACT2AA (a,i,a1,i1) += llaiai (a,i,a1,i1)
         ENDDO i1
         
         DEALLOCATE  llaiai (a,i,a1,*)
      
      ENDPARDO  a, i, a1, a2
#   
#        
#          Diagram computation!
#
#
      PARDO  a, i, a1, i2

         REQUEST  VCACT2AA (a,i,a1,i2) i2
         REQUEST  VSpipi   (a,i,a1,i2) i2

         DO i1
            t1aiai (a,i,a1,i1)  = VCACT2AA (a,i,a1,i2) * LHBAR_ii (i1,i2)
            taiai  (a,i,a1,i1)  = t1aiai (a,i,a1,i1)

            t1aiai (a,i,a1,i1)  = VSpipi (a,i,a1,i2) * LFmi_a (i2,i1)
            taiai  (a,i,a1,i1) += t1aiai (a,i,a1,i1)

            taiai  (a,i,a1,i1) *= -0.50
            PUT  D2aa (a,i,a1,i1) += taiai (a,i,a1,i1)
         ENDDO i1

      ENDPARDO  a, i, a1, i2

      PARDO  a, i, a2, i1

         REQUEST  VCACT2AA (a,i,a2,i1) i1
         REQUEST  VSpipi   (a,i,a2,i1) i1
         
         DO a1
            t1aiai (a,i,a1,i1)  = VCACT2AA (a,i,a2,i1) * LHBAR_aa (a2,a1)
            taiai  (a,i,a1,i1)  = t1aiai (a,i,a1,i1)
            
            t1aiai (a,i,a1,i1)  = VSpipi (a,i,a2,i1) * LFae_a (a2,a1)
            taiai  (a,i,a1,i1) += t1aiai (a,i,a1,i1)
            
            taiai  (a,i,a1,i1) *=  0.50
            PUT  D2aa (a,i,a1,i1) += taiai (a,i,a1,i1)
         ENDDO a1
      
      ENDPARDO  a, i, a2, i1

      PARDO  a1, i1, a2, i2   

         REQUEST                HBAR_AJIB_aaaa (i1,a1,a2,i2) i2
         t1aiai (a2,i2,a1,i1) = HBAR_AJIB_aaaa (i1,a1,a2,i2)
               
         DO i
         DO a
            REQUEST             VCACT2AA (a,i,a2,i2) a
            taiai (a,i,a1,i1) = VCACT2AA (a,i,a2,i2) * t1aiai (a2,i2,a1,i1)
            PUT  D2aa (a,i,a1,i1) += taiai (a,i,a1,i1)
         ENDDO a
         ENDDO i

      ENDPARDO  a1, i1, a2, i2

      PARDO  a1, i1, b, j

         REQUEST             HBAR_AJIB_aabb (i1,a1,b,j) j
         tbjai (b,j,a1,i1) = HBAR_AJIB_aabb (i1,a1,b,j)

         DO i
         DO a
            REQUEST             VCACT2AB (a,i,b,j) a
            taiai (a,i,a1,i1) = VCACT2AB (a,i,b,j) * tbjai (b,j,a1,i1)
            PUT  D2aa (a,i,a1,i1) += taiai (a,i,a1,i1)
         ENDDO a
         ENDDO i

      ENDPARDO  a1, i1, b, j

      PARDO  a, i, a1, i1
               
         GET         VCACT1A  (a,i)
         tai (a1,i1) = LHBAR_ia (i1,a1)
               
         taiai (a,i,a1,i1) = VCACT1A (a,i) ^ tai (a1,i1)

         PUT  D2aa (a,i,a1,i1) += taiai (a,i,a1,i1)

      ENDPARDO  a, i, a1, i1
#
#
#          ...ready!
#
#     
#     -------------------
      ENDPROC  L2AA_WORKS
#-------------------------------------------------------------------------



#-------------------------------------------------------------------------
#
#     ------------
      PROC  L1ANEW
#     ------------
#
#
#           j  bi
#          l  G
#           b  ja
#
#
#               Alpha - Alpha part CHECK
#
#
      PARDO  i, i1, a, a1

         REQUEST             HBAR_AJIB_aaaa (i,a,a1,i1) a1
         GET                 VCACT1A        (a1,i1)
         taiai (a,i,a1,i1) = HBAR_AJIB_aaaa (i,a,a1,i1)

         tai (a,i)  = taiai (a,i,a1,i1) * VCACT1A (a1,i1)
         PUT  VCHACT1A (a,i) += tai (a,i)

      ENDPARDO  i, i1, a, a1
#
#
#               Alpha - Beta part CHECK
#
#
      PARDO  a, i, b, j

         REQUEST           HBAR_AJIB_aabb (i,a,b,j) b
         GET               VCACT1A        (b,j)
         taibj (a,i,b,j) = HBAR_AJIB_aabb (i,a,b,j)

         tai (a,i)  = taibj (a,i,b,j) * VCACT1A (b,j)
         PUT  VCHACT1A (a,i) += tai (a,i)

      ENDPARDO  a, i, b, j
#
#
#          _    i   _    a
#          H   l  - H   l    CHECK
#           ba  b    ij  j
#
#
      PARDO  a, a1, i

         GET         VCACT1A (a1,i)
         tai (a,i) = LHBAR_aa (a1,a) * VCACT1A (a1,i)
         PUT  VCHACT1A (a,i) += tai (a,i)

      ENDPARDO  a, a1, i

      PARDO  i, i1, a

         GET          VCACT1A (a,i1)
         tai (a,i)  = VCACT1A (a,i1) * LHBAR_ii (i,i1)
         tai (a,i) *= -1.0
         PUT  VCHACT1A (a,i) += tai (a,i)

      ENDPARDO  i, i1, a
#     
#     
#           1   cb  ij
#          --- G   l    CHECK
#           2   aj  cb
#
#
#               Alpha - Alpha part
#     
#
      PARDO  i1, a1, a2

         ALLOCATE  l1aaai (*,a2,a1,i1)

         DO a
            REQUEST               HBAR_ABCI_aaaa (a2,a,a1,i1) a
            l1aaai (a,a2,a1,i1) = HBAR_ABCI_aaaa (a2,a,a1,i1)
         ENDDO a

         DO i
            REQUEST              VCACT2AA (a2,i,a1,i1) i
            taaii (a2,a1,i1,i) = VCACT2AA (a2,i,a1,i1)
            DO a
               tai (a,i)  = l1aaai (a,a2,a1,i1) * taaii (a2,a1,i1,i)
               tai (a,i) *= 0.5
               PUT  VCHACT1A (a,i) += tai (a,i)
            ENDDO a
         ENDDO i

         DEALLOCATE  l1aaai (*,a2,a1,i1)

      ENDPARDO  i1, a1, a2
#
#
#               Alpha - Beta part CHECK
#
#
      PARDO  a1, b, j

         ALLOCATE  l1aabj (*,a1,b,j)

         DO a
            REQUEST             HBAR_ABCI_aabb (a1,a,b,j) a
            l1aabj (a,a1,b,j) = HBAR_ABCI_aabb (a1,a,b,j)
         ENDDO a

         DO i
            REQUEST            VCACT2AB (a1,i,b,j) i
            tpppp (a1,b,j,i) = VCACT2AB (a1,i,b,j)
            DO a
               tai (a,i)  = l1aabj (a,a1,b,j) * tpppp (a1,b,j,i)
               PUT  VCHACT1A (a,i) += tai (a,i)
            ENDDO a
         ENDDO i

         DEALLOCATE  l1aabj (*,a1,b,j)

      ENDPARDO  a1, b, j
#           
#        
#          -1   ib  jk
#          --- G   l
#           2   jk  ab
#        
#
#               Alpha - Alpha part  CHECK
#
#
      PARDO  i1, i2, a1

         ALLOCATE  l1aiai (*,i2,a1,i1)

         DO a
            REQUEST              VCACT2AA (a,i2,a1,i1) a
            l1aiai (a,i2,a1,i1) = VCACT2AA (a,i2,a1,i1)
         ENDDO a

         DO i
            REQUEST              HBAR_IAJK_aaaa (i,i2,a1,i1) i
            tpppp (i2,a1,i1,i) = HBAR_IAJK_aaaa (i,i2,a1,i1)
            DO a
               tai (a,i)  = l1aiai (a,i2,a1,i1) * tpppp (i2,a1,i1,i)
               tai (a,i) *= -0.5
               PUT  VCHACT1A (a,i) += tai (a,i)
            ENDDO a
         ENDDO i

         DEALLOCATE  l1aiai (*,i2,a1,i1)

      ENDPARDO  i1, i2, a1
#
#
#               Alpha - Beta part  CHECK
#
#
      PARDO  i1, j, b

         ALLOCATE  l2aibj (*,i1,b,j)

         DO a
            REQUEST  VCACT2AB (a,i1,b,j) a
            l2aibj (a,i1,b,j) = VCACT2AB (a,i1,b,j)
         ENDDO a

         DO i
            REQUEST            HBAR_IAJK_aabb (i,i1,b,j) i
            tpppp (i1,b,j,i) = HBAR_IAJK_aabb (i,i1,b,j)
            DO a
               tai (a,i)  = l2aibj (a,i1,b,j) * tpppp (i1,b,j,i)
               tai (a,i) *= -1.0
               PUT  VCHACT1A (a,i) += tai (a,i)
            ENDDO a
         ENDDO i

         DEALLOCATE  l2aibj (*,i1,b,j)

      ENDPARDO  i1, j, b
#           
#        
#          -1   bc  li  jk     li
#          --- t   G   l   =  G   F
#           2   jl  ka  bc     ka  ji
#        
#
#               Alpha - Alpha part
#
#
      PARDO  i, i1, i2, a

         REQUEST  HBAR_JKIA_aaaa (i1,i2,i,a) a
         tpppp (a,i,i1,i2) = HBAR_JKIA_aaaa (i1,i2,i,a)

         tai (a,i)  = tpppp (a,i,i1,i2) * LFmi_a (i1,i2)
         tai (a,i) *= -1.0
         PUT  VCHACT1A (a,i) += tai (a,i)

      ENDPARDO  i, i1, i2, a
#
#
#               Alpha - Beta part
#
#
      PARDO  a, i, j, j1

         REQUEST  HBAR_JKIA_aabb (j,j1,i,a) a
         tppqq (a,i,j,j1) = HBAR_JKIA_aabb (j,j1,i,a)

         tai (a,i)  = tppqq (a,i,j,j1) * LFmi_b (j,j1)
         tai (a,i) *= -1.0
         PUT  VCHACT1A (a,i) += tai (a,i)

      ENDPARDO  a, i, j, j1
#           
#        
#           1   bd  ci  jk     ci
#          --- t   G   l   =  G   F
#           2   jk  da  bc     da  dc
#        
#
#               Alpha - Alpha part
#
#
      PARDO  i, a, a1, a2

         REQUEST             HBAR_AIBC_aaaa (a1,a2,i,a) a
         tpppp (a,i,a2,a1) = HBAR_AIBC_aaaa (a1,a2,i,a)

         tai (a,i)  = tpppp (a,i,a2,a1) * LFae_a (a2,a1)
         tai (a,i) *= -1.0
         PUT  VCHACT1A (a,i) += tai (a,i)

      ENDPARDO  i, a, a1, a2
#
#
#               Alpha - Beta part
#
#
      PARDO  i, a, b, b1

         REQUEST            HBAR_AIBC_aabb (b1,b,i,a) a
         tppqq (a,i,b1,b) = HBAR_AIBC_aabb (b1,b,i,a)

         tai (a,i)  = tppqq (a,i,b1,b) * LFae_a (b,b1)
         tai (a,i) *= -1.0
         PUT  VCHACT1A (a,i) += tai (a,i)

      ENDPARDO  i, a, b, b1
#
#
#          ...ready!
#
#
#     ---------------
      ENDPROC  L1ANEW
#-------------------------------------------------------------------------



#-------------------------------------------------------------------------
#
     PROC UPDATE
#    ----------- 
#
     PARDO a, a1, i, i1
           REQUEST            VCHACT2AA(a,i,a1,i1) i1
           Taiai(a,i,a1,i1) = VCHACT2AA(a,i,a1,i1)
 
                  t2aiai(a,i,a1,i1)        = Taiai(a,i,a1,i1) 
                  PREPARE VCH2AA(a,i,a1,i1) = t2aiai(a,i,a1,i1) 
 
     ENDPARDO a, a1, i, i1
#
     PARDO a, b, i, j
#
           REQUEST          VCHACT2AB(a,i,b,j) j
           Taibj(a,i,b,j) = VCHACT2AB(a,i,b,j)
#
                  t2aibj(a,i,b,j)        = Taibj(a,i,b,j) 
                  PREPARE VCH2AB(a,i,b,j) = t2aibj(a,i,b,j) 
#
     ENDPARDO a, b, i, j
#
#    one particle amplitudes
#
     PARDO a, i 
#
           GET        VCHACT1A(a,i)
           tai(a,i) = VCHACT1A(a,i)
#
                  t2ai(a,i)     = tai(a,i) 
                  PUT VCH1A(a,i) = t2ai(a,i) 
#
     ENDPARDO a, i 
#
     ENDPROC UPDATE
#    --------------
#-------------------------------------------------------------------------



#-------------------------------------------------------------------------
#
#   --------------
     PROC  HCmult
#   -------------- 
#
#
      ALLOCATE  LFmi_a(*,*)
      ALLOCATE  LFmi_b(*,*)
      ALLOCATE  LFae_a(*,*)

      CREATE  Fmi_a
      CREATE  Fmi_b
      CREATE  Fae_a

      CREATE  D2AA

      EXECUTE SERVER_BARRIER

      CALL  VCHACT_ZERO

      CALL  LEFT_FACTORIZE
      EXECUTE SERVER_BARRIER

      CALL  AOLADDER_NEW
      CALL  L2AB_WORKS
      CALL  L2AA_WORKS
      CALL  L1ANEW
      EXECUTE  SIP_BARRIER
      EXECUTE  SERVER_BARRIER
#
#
#          Some contributions were put in to D2dd, so prepare them
#          in to VCHACT2 now with appropriate permutations!
#
#
      PARDO  a, i, a1, i1

         GET                   D2aa (a,i,a1,i1)
         t2aiai (a1,i1,a,i)  = D2aa (a,i,a1,i1)
         t3aiai (a1,i,a,i1)  = D2aa (a,i,a1,i1)
         t4aiai (a,i1,a1,i)  = D2aa (a,i,a1,i1)
         t3aiai (a1,i,a,i1) *= -1.0
         t4aiai (a,i1,a1,i) *= -1.0

         PREPARE  VCHACT2AA (a,i,a1,i1) += D2aa   (a,i,a1,i1)
         PREPARE  VCHACT2AA (a1,i1,a,i) += T2aiai (a1,i1,a,i)
         PREPARE  VCHACT2AA (a1,i,a,i1) += T3aiai (a1,i,a,i1)
         PREPARE  VCHACT2AA (a,i1,a1,i) += T4aiai (a,i1,a1,i)

      ENDPARDO  a, i, a1, i1

      EXECUTE  SERVER_BARRIER

    #PARDO  a, i, b, j
    #       REQUEST VCHACT2AB(a,i,b,j) a 
    #       REQUEST VCHACT2AB(b,j,a,i) a 
    #       tpppp(a,i,b,j) = VCHACT2AB(b,j,a,i) 
    #       tpppp(a,i,b,j)-= VCHACT2AB(a,i,b,j) 
    #       execute dump_block tpppp 
    #ENDPARDO  a, i, b, j

     #CALL  L2AA_PRINT
     #CALL  L2AB_PRINT
     #CALL  L1_PRINT

     #CALL  R2ABLIN_NEW
     #CALL  R2AALIN_NEW
     #CALL  R1ANEW

      CALL  UPDATE

      EXECUTE SERVER_BARRIER

      CALL  SYMMETRHC_A
      CALL  SYMMETRHC_B

      EXECUTE  SERVER_BARRIER
      EXECUTE  SIP_BARRIER

      DELETE  D2AA
      DELETE  Fae_a
      DELETE  Fmi_a
      DELETE  Fmi_b

      DEALLOCATE  LFae_a (*,*)
      DEALLOCATE  LFmi_a (*,*)
      DEALLOCATE  LFmi_b (*,*)

      EXECUTE  SERVER_BARRIER
      PARDO a, i, b, j 
         REQUEST VCHACT2AB (a,i,b,j) j
         REQUEST VCHACT2AB (b,j,a,i) j
         tpppp(a,i,b,j) = VCHACT2AB (b,j,a,i)
         tpppp(a,i,b,j)+= VCHACT2AB (a,i,b,j)
         tpppp(a,i,b,j)*= 0.5  
         PREPARE diag_aibj(a,i,b,j) = tpppp(a,i,b,j) 
      ENDPARDO a, i, b, j 
      EXECUTE  SERVER_BARRIER
      PARDO a, i, b, j 
         REQUEST diag_aibj(a,i,b,j) a 
         PREPARE  VCHACT2AB (a,i,b,j) = diag_aibj (a,i,b,j)
      ENDPARDO a, i, b, j 
      EXECUTE  SERVER_BARRIER

     ENDPROC HCmult
#-------------------------------------------------------------------------




# ---------------------------------------------------------------------- 
#
     PROC CONVER
#    ----------- 
#
      create Faa
      create Fab
#
      execute sip_barrier
#
     PARDO a, a1, i, i1
           taiai(a,i,a1,i1)            = 0.0
           prepare VCONV2AA(a,i,a1,i1) = taiai(a,i,a1,i1)
     ENDPARDO a, a1, i, i1
#
     PARDO a, b, i, j
           taibj(a,i,b,j)            = 0.0 
           prepare VCONV2AB(a,i,b,j) = taibj(a,i,b,j)
     ENDPARDO a, b, i, j
#
     PARDO mu, nu, lambda, sigma 
#
           compute_integrals aoint(mu,nu,lambda,sigma) 
#
           DO a 
              Txxxp(mu,nu,lambda,a) = aoint(mu,nu,lambda,sigma)*ca(sigma,a) 
              DO a1 
                 if a == a1 
                    Txxpp(mu,nu,a1,a) = Txxxp(mu,nu,lambda,a)*ca(lambda,a1) 
                    PREPARE Vxxaa(mu,nu,a1,a) += Txxpp(mu,nu,a1,a) 
                 endif 
              ENDDO a1 
           ENDDO a 
#
           DO b 
              Txxxq(mu,nu,lambda,b) = aoint(mu,nu,lambda,sigma)*ca(sigma,b) 
              DO b1 
                 if b == b1 
                    Txxqq(mu,nu,b1,b) = Txxxq(mu,nu,lambda,b)*ca(lambda,b1) 
                    PREPARE Gxxbb(mu,nu,b1,b) += Txxqq(mu,nu,b1,b) 
                 endif 
              ENDDO b1 
           ENDDO b 
#
     ENDPARDO mu, nu, lambda, sigma 
#
     PARDO mu, nu, lambda, sigma 
#
           compute_integrals            aoint(mu,sigma,lambda,nu) 
           txxxx(mu,nu,lambda,sigma)  = aoint(mu,sigma,lambda,nu) 
           txxxx(mu,nu,lambda,sigma) *= -1.0  
#
           DO a 
              Txxxp(mu,nu,lambda,a) = txxxx(mu,nu,lambda,sigma)*ca(sigma,a) 
              DO a1 
                 if a == a1 
                    Txxpp(mu,nu,a1,a) = Txxxp(mu,nu,lambda,a)*ca(lambda,a1) 
                    PREPARE Vxxaa(mu,nu,a1,a) += Txxpp(mu,nu,a1,a) 
                 endif 
              ENDDO a1 
           ENDDO a 
#
     ENDPARDO mu, nu, lambda, sigma 
#
     execute server_barrier
#
     PARDO mu, nu, a, a1 
           WHERE a == a1 
           REQUEST Vxxaa(mu,nu,a1,a) a            
              DO a2 
                 Txppp(mu,a2,a1,a) = Vxxaa(mu,nu,a1,a)*ca(nu,a2) 
                 DO a3 
                    if a2 == a3 
                       Tpppp(a3,a2,a1,a) = Txppp(mu,a2,a1,a)*ca(mu,a3) 
                       PREPARE Vaaaa(a3,a2,a1,a) += Tpppp(a3,a2,a1,a) 
                    endif 
                 ENDDO a3 
              ENDDO a2 
     ENDPARDO mu, nu, a, a1 
#
     PARDO mu, nu, b, b1 
           WHERE b == b1 
           REQUEST Gxxbb(mu,nu,b1,b) b            
              DO a2 
                 Txpqq(mu,a2,b1,b) = Gxxbb(mu,nu,b1,b)*ca(nu,a2) 
                 DO a3 
                    if a2 == a3 
                       Tppqq(a3,a2,b1,b) = Txpqq(mu,a2,b1,b)*ca(mu,a3) 
                       PREPARE Vaabb(a3,a2,b1,b) += Tppqq(a3,a2,b1,b) 
                    endif 
                 ENDDO a3 
              ENDDO a2 
     ENDPARDO mu, nu, b, b1 
#
     execute server_barrier
#
# -----prepare f_aa diagonal = Sdaa
#
     PARDO a, a1, a2, a3   
        WHERE a  == a1 
        WHERE a2 == a3 
#
           REQUEST              Vaaaa(a,a1,a2,a3) a
           Tpppp(a,a1,a2,a3)  = Vaaaa(a,a1,a2,a3)
           execute return_diagonal4 Tpppp
           taa(a3,a1)         = 1.0
           t1aa(a,a2)         = Tpppp(a,a1,a2,a3)*taa(a3,a1)
#
           PUT Faa(a,a2)     += t1aa(a,a2)
#
     ENDPARDO a, a1, a2, a3  
#
     PARDO a, a1, b2, b3   
        WHERE a  == a1 
        WHERE b2 == b3 
#
           REQUEST              Vaabb(a,a1,b2,b3) a
           Tppqq(a,a1,b2,b3)  = Vaabb(a,a1,b2,b3)
           execute return_diagonal4 Tppqq
           tba(b3,a1)         = 1.0
           tab(a,b2)          = Tppqq(a,a1,b2,b3)*tba(b3,a1)
#
           PUT Fab(a,b2)     += tab(a,b2)
#
     ENDPARDO a, a1, b2, b3  
#
     PARDO a, a1
      WHERE a==a1 
#
           taa(a,a1)      = LHBAR_aa(a,a1)
           execute return_diagonal4 taa 
           put DDaa(a,a1) = taa(a,a1)
#
     ENDPARDO a, a1
#
# -----prepare f_ii diagonal = Sdii
#
     PARDO i, i1
      WHERE i==i1 
#
           tii(i1,i)      = LHBAR_ii(i1,i)
           execute return_diagonal4 tii 
           put DDii(i1,i) = tii(i1,i)
#
     ENDPARDO i, i1
#
# -----prepare f_jj diagonal = DDjj
#
     PARDO j, j1
      WHERE j==j1 
#
        tjj(j1,j)      = LHBAR_ii(j1,j)
        execute return_diagonal4 tjj 
        put DDjj(j1,j) = tjj(j1,j)
#
     ENDPARDO j, j1
#
     execute sip_barrier
#
# -----prepare Hbar_aiai diagonal
#
     PARDO a, i
#
        tai(a,i)=0.0
#
        do a1
        do i1
#
           REQUEST            HBAR_AJIB_aaaa(i1,a1,a,i) i
           Taaii(a,a1,i,i1) = HBAR_AJIB_aaaa(i1,a1,a,i)
           execute return_diagonal4 Taaii
           tia(i1,a1)       = 1.0
           t1ai(a,i)        = Taaii(a,a1,i,i1)*tia(i1,a1)
           tai(a,i)        += t1ai(a,i)
#
        enddo i1
        enddo a1
#
        PUT VCONV1A(a,i) = tai(a,i)
#
     ENDPARDO a, i
#
# -----prepare Hbar_bjbj diagonal
#
     execute sip_barrier
     execute server_barrier
#
     PARDO a, a1, i, i1
#
           get                            VCONV1A(a,i1)
           get                            VCONV1A(a1,i)
           tia(i1,a)                    = 1.0
           t1ia(i,a1)                   = 1.0
           tai(a,i1)                    = VCONV1A(a,i1)
           t2ai(a1,i)                   = VCONV1A(a1,i)
           t1aiai(a,i,a1,i1)            = tai(a,i1)^t1ia(i,a1)
           t2aiai(a,i,a1,i1)            = t2ai(a1,i)^tia(i1,a)
#
           prepare VCONV2AA(a,i,a1,i1) += t1aiai(a,i,a1,i1)
           prepare VCONV2AA(a,i,a1,i1) += t2aiai(a,i,a1,i1)
#
     ENDPARDO a, a1, i, i1
#
     execute sip_barrier
     execute server_barrier
#
# -------------------------------------------------------------------------------------
# Start of correction ??? 
# -------------------------------------------------------------------------------------
#
# -----prepare Hbar_aiai diagonal
#
     PARDO a, i
#
           tai(a,i)=0.0
#
           do a1
           do i1
#
              REQUEST            HBAR_AJIB_aaaa(i1,a1,a,i) i
              Taaii(a,a1,i,i1) = HBAR_AJIB_aaaa(i1,a1,a,i)
              execute return_diagonal4 Taaii
              tia(i1,a1)       = 1.0
              t1ai(a,i)        = Taaii(a,a1,i,i1)*tia(i1,a1)
              tai(a,i)        += t1ai(a,i)
#
           enddo i1
           enddo a1
#
           PUT VCONV1A(a,i) = tai(a,i)
#
     ENDPARDO a, i
#
# -----prepare Hbar_bjbj diagonal
#
     execute sip_barrier
     execute server_barrier
#
# ---------compute T(a,i)=F(a,a)-f(i,i)-v(a,i,a,i)
#
     PARDO a, i
#
           tai(a,i)=0.0
#
           do a1
#
              get         DDaa(a,a1)
              tia(i,a1) = 1.0
              taa(a1,a) = DDaa(a,a1)
#
              t2ai(a,i) = tia(i,a1)*taa(a1,a)
              tai(a,i) += t2ai(a,i)
#
           enddo a1
#
           do i1
#
              get          DDii(i1,i)
              t2ia(i1,a) = 1.0
              tii(i,i1)  = DDii(i1,i)
#
              t2ai(a,i)  = tii(i,i1)*t2ia(i1,a)
              t2ai(a,i) *= -1.0
              tai(a,i)  += t2ai(a,i)
#
           enddo i1
#
           PUT VCONV1A(a,i) += tai(a,i)
#
     ENDPARDO a, i
#
# ---------compute T(b,j)=F(b,b)-f(j,j)
#
     execute sip_barrier
     execute server_barrier
#
     PARDO a, a1, i, i1
#
           get                 VCONV1A(a,i)
           get                 VCONV1A(a1,i1)
           tia(i,a)          = 1.0
           t1ia(i1,a1)       = 1.0
           tai(a,i)          = VCONV1A(a,i)
           t2ai(a1,i1)       = VCONV1A(a1,i1)
           t1aiai(a,i,a1,i1) = tai(a,i)^t1ia(i1,a1)
           t2aiai(a,i,a1,i1) = t2ai(a1,i1)^tia(i,a)
#
           taiai(a,i,a1,i1)  = t1aiai(a,i,a1,i1)
           taiai(a,i,a1,i1) += t2aiai(a,i,a1,i1)
#
           do i2
           do i3
#
              request             HBAR_iiii(i,i2,i1,i3) i
              tiiii(i,i2,i1,i3) = HBAR_iiii(i,i2,i1,i3)
              execute return_diagonal4 Tiiii
              t1aiai(a,i2,a1,i3)=1.0
              t2aiai(a,i,a1,i1) = Tiiii(i,i2,i1,i3)*t1aiai(a,i2,a1,i3)
              taiai(a,i,a1,i1) += t2aiai(a,i,a1,i1)
#
           enddo i3
           enddo i2
#
           get                 Faa(a,a1)
           tii(i,i1)         = 1.0
           t1aiai(a,i,a1,i1) = Faa(a,a1)^tii(i,i1)
           taiai(a,i,a1,i1) += t1aiai(a,i,a1,i1)
#
           prepare VCONV2AA(a,i,a1,i1) += taiai(a,i,a1,i1)
#
     ENDPARDO a, a1, i, i1
#
# alpha/beta contribution 
# ----------------------- 
#
     PARDO a, i, b, j
#
           get               VCONV1A(b,j)
           get               VCONV1A(a,i)
           t1ai(a,i)       = 1.0
           t1bj(b,j)       = 1.0
#
           tbj(b,j)        = VCONV1A(b,j)
           tai(a,i)        = VCONV1A(a,i)
           t1aibj(a,i,b,j) = t1ai(a,i)^tbj(b,j)
           t2aibj(a,i,b,j) = tai(a,i)^t1bj(b,j)
#
           taibj(a,i,b,j)  = 0.0  
           taibj(a,i,b,j)  = t1aibj(a,i,b,j)
           taibj(a,i,b,j) += t2aibj(a,i,b,j)
#
           do i1
           do j1
#
              request                   HBAR_iijj(i,i1,j,j1) j1
              Tiijj(i,i1,j,j1)        = HBAR_iijj(i,i1,j,j1)
              execute return_diagonal4  Tiijj
              t2aibj(a,i1,b,j1)       = 1.0
              t1aibj(a,i,b,j)         = Tiijj(i,i1,j,j1)*t2aibj(a,i1,b,j1)
              taibj(a,i,b,j)         += t1aibj(a,i,b,j)
#
           enddo j1
           enddo i1
#
           get Fab(a,b)
           tij(i,j)=1.0
           t1aibj(a,i,b,j)=Fab(a,b)^tij(i,j)
           taibj(a,i,b,j)+=t1aibj(a,i,b,j)
#
           do i1
           do b1
#
              request HBAR_AJIB_iibb(i1,i,b,b1) b1
              Tiibb(i1,i,b,b1)=HBAR_AJIB_iibb(i1,i,b,b1)
              execute return_diagonal4 Tiibb
              t2aibj(a,i1,b1,j)=1.0
              t1aibj(a,i,b,j)=Tiibb(i1,i,b,b1)*t2aibj(a,i1,b1,j)
              taibj(a,i,b,j)+=t1aibj(a,i,b,j)
#
           enddo b1
           enddo i1
#
           do j1
           do a1
#
              request HBAR_AJIB_iibb(j1,j,a,a1) a1
              Tjjaa(j1,j,a,a1)=HBAR_AJIB_iibb(j1,j,a,a1)
              execute return_diagonal4 Tjjaa
              t2aibj(a1,i,b,j1)=1.0
              t1aibj(a,i,b,j)=Tjjaa(j1,j,a,a1)*t2aibj(a1,i,b,j1)
              taibj(a,i,b,j)+=t1aibj(a,i,b,j)
#
           enddo a1
           enddo j1
#
           PREPARE VCONV2AB(a,i,b,j) = taibj(a,i,b,j)
#
     ENDPARDO a, i, b, j
#
     execute server_barrier

      delete Faa
      delete Fab
#
     ENDPROC CONVER
#    -------------- 
#------------------------------------------------------------------------




#------------------------------------------------------------------------
#
#     -----------------------
      PROC  ZERO_DSCALAR_ZETA
#     -----------------------
#
#
#
#    The scalars used (overlap of error arrays and coeffients) in the DIIS 
#    expansion are zero'd out. 
#
#      Zero out scalars.
#      -----------------
#
       b11 = 0.0
       b12 = 0.0
       b13 = 0.0
       b14 = 0.0
       b15 = 0.0
       b16 = 0.0
       b17 = 0.0
       b18 = 0.0
       b19 = 0.0
       b110 = 0.0
#
       b22 = 0.0
       b23 = 0.0
       b24 = 0.0
       b25 = 0.0
       b26 = 0.0
       b27 = 0.0
       b28 = 0.0
       b29 = 0.0
       b210 = 0.0
#
       b33 = 0.0
       b34 = 0.0
       b35 = 0.0
       b36 = 0.0
       b37 = 0.0
       b38 = 0.0
       b39 = 0.0
       b310 = 0.0
#
       b44 = 0.0
       b45 = 0.0
       b46 = 0.0
       b47 = 0.0
       b48 = 0.0
       b49 = 0.0
       b410 = 0.0
#
       b55 = 0.0
       b56 = 0.0
       b57 = 0.0
       b58 = 0.0
       b59 = 0.0
       b510 = 0.0
#
       b66 = 0.0
       b67 = 0.0
       b68 = 0.0
       b69 = 0.0
       b610 = 0.0
#
       b77 = 0.0
       b78 = 0.0
       b79 = 0.0
       b710 = 0.0
#
       b88 = 0.0
       b89 = 0.0
       b810 = 0.0
#      
       b99 = 0.0
       b910 = 0.0
#      
       b1010 = 0.0
#      
       Tb11 = 0.0
       Tb12 = 0.0
       Tb13 = 0.0
       Tb14 = 0.0
       Tb15 = 0.0
       Tb16 = 0.0
       Tb17 = 0.0
       Tb18 = 0.0
       Tb19 = 0.0
       Tb110 = 0.0
#      
       Tb22 = 0.0
       Tb23 = 0.0
       Tb24 = 0.0
       Tb25 = 0.0
       Tb26 = 0.0
       Tb27 = 0.0
       Tb28 = 0.0
       Tb29 = 0.0
       Tb210 = 0.0
#      
       Tb33 = 0.0
       Tb34 = 0.0
       Tb35 = 0.0
       Tb36 = 0.0
       Tb37 = 0.0
       Tb38 = 0.0
       Tb39 = 0.0
       Tb310 = 0.0
#
       Tb44 = 0.0
       Tb45 = 0.0
       Tb46 = 0.0
       Tb47 = 0.0
       Tb48 = 0.0
       Tb49 = 0.0
       Tb410 = 0.0
#
       Tb55 = 0.0
       Tb56 = 0.0
       Tb57 = 0.0
       Tb58 = 0.0
       Tb59 = 0.0
       Tb510 = 0.0
#
       Tb66 = 0.0
       Tb67 = 0.0
       Tb68 = 0.0
       Tb69 = 0.0
       Tb610 = 0.0
#
       Tb77 = 0.0
       Tb78 = 0.0
       Tb79 = 0.0
       Tb710 = 0.0
#
       Tb88 = 0.0
       Tb89 = 0.0
       Tb810 = 0.0
#      
       Tb99 = 0.0
       Tb910 = 0.0
#      
       Tb1010 = 0.0
#      
       c1 = 0.0
       c2 = 0.0
       c3 = 0.0
       c4 = 0.0
       c5 = 0.0
       c6 = 0.0
       c7 = 0.0
       c8 = 0.0
       c9 = 0.0
       c10 = 0.0
#      
       execute sip_barrier
#
#
#     ...ready!
#
#
      ENDPROC  ZERO_DSCALAR_ZETA
#------------------------------------------------------------------------



#------------------------------------------------------------------------
#
#     ----------------
      PROC  SETUP_ZDIIS
#     ----------------
#
#
#    Put the matrix elements of B into the sip 'B' matrix. 
#      
       execute diis_setup Tb11
       execute diis_setup Tb12
       execute diis_setup Tb13
       execute diis_setup Tb14
       execute diis_setup Tb15
       execute diis_setup Tb16
       execute diis_setup Tb17
       execute diis_setup Tb18
       execute diis_setup Tb19
       execute diis_setup Tb110
       
       execute diis_setup Tb22
       execute diis_setup Tb23
       execute diis_setup Tb24
       execute diis_setup Tb25
       execute diis_setup Tb26
       execute diis_setup Tb27
       execute diis_setup Tb28
       execute diis_setup Tb29
       execute diis_setup Tb210
       
       execute diis_setup Tb33
       execute diis_setup Tb34
       execute diis_setup Tb35
       execute diis_setup Tb36
       execute diis_setup Tb37
       execute diis_setup Tb38
       execute diis_setup Tb39
       execute diis_setup Tb310

       execute diis_setup Tb44
       execute diis_setup Tb45
       execute diis_setup Tb46
       execute diis_setup Tb47
       execute diis_setup Tb48
       execute diis_setup Tb49
       execute diis_setup Tb410

       execute diis_setup Tb55
       execute diis_setup Tb56
       execute diis_setup Tb57
       execute diis_setup Tb58
       execute diis_setup Tb59
       execute diis_setup Tb510

       execute diis_setup Tb66
       execute diis_setup Tb67
       execute diis_setup Tb68
       execute diis_setup Tb69
       execute diis_setup Tb610

       execute diis_setup Tb77
       execute diis_setup Tb78
       execute diis_setup Tb79
       execute diis_setup Tb710

       execute diis_setup Tb88
       execute diis_setup Tb89
       execute diis_setup Tb810

       execute diis_setup Tb99
       execute diis_setup Tb910
       
       execute diis_setup Tb1010
#      
       execute sip_barrier
#
#
#     ...ready!
#
#
      ENDPROC  SETUP_ZDIIS
#------------------------------------------------------------------------


#
# ---------------------------------------------------------------------------------
#
     PROC ZDIIS1  
#    ---------- 
#
#    Zero out scalars.
#    ----------------- 
#
     CALL ZERO_DSCALAR_ZETA 
#
#    Determine the 'B-matrix'. 
#    ------------------------- 
#
#    Compute contributions due to T2aiai amplitudes. 
#    ----------------------------------------------- 
#
#
     PARDO a, i, a1, i1
#
#          REQUEST/GET amplitude data from all 2 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1aiai(a,i,a1,i1) a # ziter-1 amplitudes
           REQUEST e2aiai(a,i,a1,i1) a # ziter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,2
#             ---------
#
              etemp = e1aiai(a,i,a1,i1)*e1aiai(a,i,a1,i1)
              b11  += etemp
#
              etemp = e1aiai(a,i,a1,i1)*e2aiai(a,i,a1,i1)
              b12  += etemp
#
#             b1x x=2,2
#             ---------
#
              etemp = e2aiai(a,i,a1,i1)*e2aiai(a,i,a1,i1)
              b22  += etemp
#
     ENDPARDO a, i, a1, i1
#
#    Compute contributions due to T2aibj amplitudes.
#    -----------------------------------------------
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 2 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1aibj(a,i,b,j) a # ziter-1 amplitudes
           REQUEST e2aibj(a,i,b,j) a # ziter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,2
#             ---------
#
              etemp = e1aibj(a,i,b,j)*e1aibj(a,i,b,j)
              etemp *= 2.0
              b11  += etemp
#
              etemp = e1aibj(a,i,b,j)*e2aibj(a,i,b,j)
              etemp *= 2.0
              b12  += etemp
#
#             b1x x=2,2
#             ---------
#
              etemp = e2aibj(a,i,b,j)*e2aibj(a,i,b,j)
              etemp *= 2.0
              b22  += etemp
#
     ENDPARDO a, i, b, j
#
#    Compute contributions due to T1ai amplitudes. 
#    --------------------------------------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 2 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET e1ai(a,i)    # ziter-1 amplitudes  
           GET e2ai(a,i)    # ziter-0 amplitudes  
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#             b1x x=1,2 
#             --------- 
#
              etemp = e1ai(a,i)*e1ai(a,i) 
              etemp *= 4.0
              b11  += etemp            
#
              etemp = e1ai(a,i)*e2ai(a,i) 
              etemp *= 4.0
              b12  += etemp            
#
#             b1x x=2,2 
#             --------- 
#
              etemp = e2ai(a,i)*e2ai(a,i) 
              etemp *= 4.0
              b22  += etemp            
#
     ENDPARDO a, i 
#
     execute server_barrier 
#
#    Collectively sum B-matrix elements. 
#    -----------------------------------
#
     collective Tb11 += b11 
     collective Tb12 += b12 
     collective Tb22 += b22 
#
#    Now the unique elements of the 'B-matrix' have been computed, the array is filled out
#    in the setup_diis. 
#    --------------------------------------------------------------------------------------
#
#    Put the elements of the 'B-matrix', which have been computed as scalars into the  
#    R-matrix. 
#    -------------------------------------------------------------------------------- 
#
     CALL SETUP_ZDIIS 
#
     execute compute_diis # --> New instruction  
#
     c1 = Tb11 
     c2 = Tb22 
     execute print_scalar c1 
     execute print_scalar c2 
#
#    Done computing the c-vector. 
#    ---------------------------- 
#
#    Form the updated amplitudes using the c-vector. 
#    -----------------------------------------------  
#
#    Form T2old_aa. 
#    -------------- 
#
     PARDO a, i, a1, i1
#
#          REQUEST/GET amplitude data from all 2 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST d0aiai(a,i,a1,i1) a # ziter-2 amplitudes
           REQUEST d1aiai(a,i,a1,i1) a # ziter-1 amplitudes
#
           REQUEST e1aiai(a,i,a1,i1) a # ziter-1 amplitudes
           REQUEST e2aiai(a,i,a1,i1) a # ziter-0 amplitudes

           REQUEST             VCONV2AA (a,i,a1,i1) a # Diagonal HBAR elements
           tpppp (a,i,a1,i1) = VCONV2AA (a,i,a1,i1)
#
#          Evaluate the ZDIIS approximant 
#          -----------------------------
#
           taiai  (a,i,a1,i1)  = e1aiai (a,i,a1,i1)
           taiai  (a,i,a1,i1) *= c1

           t2aiai (a,i,a1,i1)  = e2aiai (a,i,a1,i1)
           t2aiai (a,i,a1,i1) *= c2
           taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)
           taiai  (a,i,a1,i1) *=  0.75 # To match ACESII
           EXECUTE  APPLY_DEN4_NODIAG  taiai  tpppp
#
#
#          Add to the associated residual vectors
#
#
           t2aiai (a,i,a1,i1)  = d0aiai (a,i,a1,i1)
           t2aiai (a,i,a1,i1) *= c1
           taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

           t2aiai (a,i,a1,i1)  = d1aiai (a,i,a1,i1)
           t2aiai (a,i,a1,i1) *= c2
           taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

           PREPARE  VCACT2AA (a,i,a1,i1) = taiai (a,i,a1,i1)

     ENDPARDO a, i, a1, i1
#
#    Form T2old_ab. 
#    -------------- 
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 2 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST D0aibj(a,i,b,j) a # ziter-2 amplitudes
           REQUEST D1aibj(a,i,b,j) a # ziter-1 amplitudes
#
           REQUEST e1aibj(a,i,b,j) a # ziter-1 amplitudes
           REQUEST e2aibj(a,i,b,j) a # ziter-0 amplitudes

           REQUEST           VCONV2AB (a,i,b,j) a
           tppqq (a,i,b,j) = VCONV2AB (a,i,b,j)
#
#          Evaluate the ZDIIS approximant 
#          -----------------------------
#    
           taibj  (a,i,b,j)  = e1aibj (a,i,b,j)
           taibj  (a,i,b,j) *= c1

           t2aibj (a,i,b,j)  = e2aibj (a,i,b,j)
           t2aibj (a,i,b,j) *= c2
           taibj  (a,i,b,j) += t2aibj (a,i,b,j)
           taibj  (a,i,b,j) *=  0.75 # To match ACESII
           EXECUTE  APPLY_DEN4  taibj  tppqq
#
#
#          Add to the associated residual vectors
#
#
           t2aibj (a,i,b,j)  = d0aibj (a,i,b,j)
           t2aibj (a,i,b,j) *= c1
           taibj  (a,i,b,j) += t2aibj (a,i,b,j)

           t2aibj (a,i,b,j)  = d1aibj (a,i,b,j)
           t2aibj (a,i,b,j) *= c2
           taibj  (a,i,b,j) += t2aibj (a,i,b,j)

           PREPARE  VCACT2AB (a,i,b,j) = taibj (a,i,b,j)

     ENDPARDO a, i, b, j
#
#    Form tai_old. 
#    ------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 2 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET D0ai(a,i)     # ziter-2 amplitudes  
           GET D1ai(a,i)     # ziter-1 amplitudes  
#
           GET e1ai(a,i)     # ziter-1 amplitudes  
           GET e2ai(a,i)     # ziter-0 amplitudes  

           GET         VCONV1A (a,i)
           tpp (a,i) = VCONV1A (a,i)
#
#          Evaluate the ZDIIS approximant 
#          -----------------------------
#    
           tai  (a,i)  = e1ai (a,i)
           tai  (a,i) *= c1

           t2ai (a,i)  = e2ai (a,i)
           t2ai (a,i) *= c2
           tai  (a,i) += t2ai (a,i)
           tai  (a,i) *=  0.75 # To match ACESII
           EXECUTE  APPLY_DEN2  tai  tpp
#
#
#          Add to the associated residual vectors
#
#
           t2ai (a,i)  = d0ai (a,i)
           t2ai (a,i) *= c1
           tai  (a,i) += t2ai (a,i)

           t2ai (a,i)  = d1ai (a,i)
           t2ai (a,i) *= c2
           tai  (a,i) += t2ai (a,i)

           PUT  VCACT1A (a,i) = tai (a,i)
#
     ENDPARDO a, i  
#
     execute server_barrier 
#
     ENDPROC ZDIIS1  
#    ------------- 
#
# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
#
     PROC ZDIIS2  
#    ---------- 
#
#    Zero out scalars.
#    ----------------- 
#
     CALL ZERO_DSCALAR_ZETA 
#
#    Determine the 'B-matrix'. 
#    ------------------------- 
#
#    Compute contributions due to T2aiai amplitudes. 
#    ----------------------------------------------- 
#
#
     PARDO a, i, a1, i1
#
#          REQUEST/GET amplitude data from all 3 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1aiai(a,i,a1,i1) a # ziter-2 amplitudes
           REQUEST e2aiai(a,i,a1,i1) a # ziter-1 amplitudes
           REQUEST e3aiai(a,i,a1,i1) a # ziter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,3
#             ---------
#
              etemp = e1aiai(a,i,a1,i1)*e1aiai(a,i,a1,i1)
              b11  += etemp
#
              etemp = e1aiai(a,i,a1,i1)*e2aiai(a,i,a1,i1)
              b12  += etemp
#
              etemp = e1aiai(a,i,a1,i1)*e3aiai(a,i,a1,i1)
              b13  += etemp
#
#             b1x x=2,3
#             ---------
#
              etemp = e2aiai(a,i,a1,i1)*e2aiai(a,i,a1,i1)
              b22  += etemp
#
              etemp = e2aiai(a,i,a1,i1)*e3aiai(a,i,a1,i1)
              b23  += etemp
#
#             b1x x=3,3
#             ---------
#
              etemp = e3aiai(a,i,a1,i1)*e3aiai(a,i,a1,i1)
              b33  += etemp
#
     ENDPARDO a, i, a1, i1
#
#    Compute contributions due to T2aibj amplitudes.
#    -----------------------------------------------
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 3 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1aibj(a,i,b,j) a # ziter-2 amplitudes
           REQUEST e2aibj(a,i,b,j) a # ziter-1 amplitudes
           REQUEST e3aibj(a,i,b,j) a # ziter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,3
#             ---------
#
              etemp = e1aibj(a,i,b,j)*e1aibj(a,i,b,j)
              etemp *= 2.0
              b11  += etemp
#
              etemp = e1aibj(a,i,b,j)*e2aibj(a,i,b,j)
              etemp *= 2.0
              b12  += etemp
#
              etemp = e1aibj(a,i,b,j)*e3aibj(a,i,b,j)
              etemp *= 2.0
              b13  += etemp
#
#             b1x x=2,3
#             ---------
#
              etemp = e2aibj(a,i,b,j)*e2aibj(a,i,b,j)
              etemp *= 2.0
              b22  += etemp
#
              etemp = e2aibj(a,i,b,j)*e3aibj(a,i,b,j)
              etemp *= 2.0
              b23  += etemp
#
#             b1x x=3,3
#             ---------
#
              etemp = e3aibj(a,i,b,j)*e3aibj(a,i,b,j)
              etemp *= 2.0
              b33  += etemp
#
     ENDPARDO a, i, b, j
#
#    Compute contributions due to T1ai amplitudes. 
#    --------------------------------------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 4 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET e1ai(a,i)    # ziter-2 amplitudes  
           GET e2ai(a,i)    # ziter-1 amplitudes  
           GET e3ai(a,i)    # ziter-0 amplitudes  
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#             b1x x=1,3 
#             --------- 
#
              etemp = e1ai(a,i)*e1ai(a,i) 
              etemp *= 4.0
              b11  += etemp            
#
              etemp = e1ai(a,i)*e2ai(a,i) 
              etemp *= 4.0
              b12  += etemp            
#
              etemp = e1ai(a,i)*e3ai(a,i) 
              etemp *= 4.0
              b13  += etemp            
#
#             b1x x=2,3 
#             --------- 
#
              etemp = e2ai(a,i)*e2ai(a,i) 
              etemp *= 4.0
              b22  += etemp            
#
              etemp = e2ai(a,i)*e3ai(a,i) 
              etemp *= 4.0
              b23  += etemp            
#
#             b1x x=3,3 
#             --------- 
#
              etemp = e3ai(a,i)*e3ai(a,i) 
              etemp *= 4.0
              b33  += etemp            
#
     ENDPARDO a, i 

     execute server_barrier
#
#    Collectively sum B-matrix elements. 
#    -----------------------------------
#
     collective Tb11 += b11 
     collective Tb12 += b12 
     collective Tb13 += b13 
     collective Tb22 += b22 
     collective Tb23 += b23 
     collective Tb33 += b33 
#
#    Now the unique elements of the 'B-matrix' have been computed and the array filled out. 
#    --------------------------------------------------------------------------------------
#
#    Put the elements of the 'B-matrix', which have been computed as scalars into the  
#    R-matrix. 
#    -------------------------------------------------------------------------------- 
#
     CALL SETUP_ZDIIS 
#
     execute compute_diis # --> New instruction  
#
     c1 = Tb11 
     c2 = Tb22 
     c3 = Tb33 
     execute print_scalar c1 
     execute print_scalar c2 
     execute print_scalar c3 
#
#    Done computing the c-vector. 
#    ---------------------------- 
#
#    Form the updated amplitudes using the c-vector. 
#    -----------------------------------------------  
#
#    Form T2old_aa. 
#    -------------- 
#
     PARDO a, i, a1, i1
#
#          REQUEST/GET amplitude data from all 3 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST d0aiai(a,i,a1,i1) a # ziter-3 amplitudes
           REQUEST d1aiai(a,i,a1,i1) a # ziter-2 amplitudes
           REQUEST d2aiai(a,i,a1,i1) a # ziter-1 amplitudes
#
           REQUEST e1aiai(a,i,a1,i1) a # ziter-2 amplitudes
           REQUEST e2aiai(a,i,a1,i1) a # ziter-1 amplitudes
           REQUEST e3aiai(a,i,a1,i1) a # ziter-0 amplitudes

           REQUEST             VCONV2AA (a,i,a1,i1) a # Diagonal HBAR elements
           tpppp (a,i,a1,i1) = VCONV2AA (a,i,a1,i1)
#
#          Evaluate the ZDIIS approximant 
#          -----------------------------
#
           taiai  (a,i,a1,i1)  = e1aiai (a,i,a1,i1)
           taiai  (a,i,a1,i1) *= c1

           t2aiai (a,i,a1,i1)  = e2aiai (a,i,a1,i1)
           t2aiai (a,i,a1,i1) *= c2
           taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

           t2aiai (a,i,a1,i1)  = e3aiai (a,i,a1,i1)
           t2aiai (a,i,a1,i1) *= c3     
           taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

           taiai  (a,i,a1,i1) *=  0.75 # To match ACESII
           EXECUTE  APPLY_DEN4_NODIAG  taiai  tpppp
#
#
#          Add to the associated residual vectors
#
#
           t2aiai (a,i,a1,i1)  = d0aiai (a,i,a1,i1)
           t2aiai (a,i,a1,i1) *= c1
           taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

           t2aiai (a,i,a1,i1)  = d1aiai (a,i,a1,i1)
           t2aiai (a,i,a1,i1) *= c2
           taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

           t2aiai (a,i,a1,i1)  = d2aiai (a,i,a1,i1)
           t2aiai (a,i,a1,i1) *= c3
           taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

           PREPARE  VCACT2AA (a,i,a1,i1) = taiai (a,i,a1,i1)

     ENDPARDO a, i, a1, i1
#
#    Form T2old_ab. 
#    -------------- 
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 3 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST D0aibj(a,i,b,j) a # ziter-3 amplitudes
           REQUEST D1aibj(a,i,b,j) a # ziter-2 amplitudes
           REQUEST D2aibj(a,i,b,j) a # ziter-1 amplitudes
#
           REQUEST e1aibj(a,i,b,j) a # ziter-2 amplitudes
           REQUEST e2aibj(a,i,b,j) a # ziter-1 amplitudes
           REQUEST e3aibj(a,i,b,j) a # ziter-0 amplitudes

           REQUEST           VCONV2AB (a,i,b,j) a
           tppqq (a,i,b,j) = VCONV2AB (a,i,b,j) 
#          
#          Evaluate the ZDIIS approximant 
#          -----------------------------
#    
           taibj  (a,i,b,j)  = e1aibj (a,i,b,j)
           taibj  (a,i,b,j) *= c1
           
           t2aibj (a,i,b,j)  = e2aibj (a,i,b,j)
           t2aibj (a,i,b,j) *= c2
           taibj  (a,i,b,j) += t2aibj (a,i,b,j)

           t2aibj (a,i,b,j)  = e3aibj (a,i,b,j)
           t2aibj (a,i,b,j) *= c3
           taibj  (a,i,b,j) += t2aibj (a,i,b,j)

           taibj  (a,i,b,j) *=  0.75 # To match ACESII
           EXECUTE  APPLY_DEN4  taibj  tppqq
#
#
#          Add to the associated residual vectors
#
#
           t2aibj (a,i,b,j)  = d0aibj (a,i,b,j)
           t2aibj (a,i,b,j) *= c1
           taibj  (a,i,b,j) += t2aibj (a,i,b,j)

           t2aibj (a,i,b,j)  = d1aibj (a,i,b,j)
           t2aibj (a,i,b,j) *= c2
           taibj  (a,i,b,j) += t2aibj (a,i,b,j)

           t2aibj (a,i,b,j)  = d2aibj (a,i,b,j)
           t2aibj (a,i,b,j) *= c3
           taibj  (a,i,b,j) += t2aibj (a,i,b,j)

           PREPARE  VCACT2AB (a,i,b,j) = taibj (a,i,b,j)

     ENDPARDO a, i, b, j
#
#    Form tai_old. 
#    ------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 3 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET D0ai(a,i)     # ziter-3 amplitudes  
           GET D1ai(a,i)     # ziter-2 amplitudes  
           GET D2ai(a,i)     # ziter-1 amplitudes  
#
           GET e1ai(a,i)     # ziter-2 amplitudes  
           GET e2ai(a,i)     # ziter-1 amplitudes  
           GET e3ai(a,i)     # ziter-0 amplitudes  

           GET         VCONV1A (a,i)
           tpp (a,i) = VCONV1A (a,i)
#
#          Evaluate the ZDIIS approximant 
#          -----------------------------
#    
           tai  (a,i)  = e1ai (a,i)
           tai  (a,i) *= c1

           t2ai (a,i)  = e2ai (a,i)
           t2ai (a,i) *= c2
           tai  (a,i) += t2ai (a,i)

           t2ai (a,i)  = e3ai (a,i)
           t2ai (a,i) *= c3
           tai  (a,i) += t2ai (a,i)

           tai  (a,i) *=  0.75 # To match ACESII
           EXECUTE  APPLY_DEN2  tai  tpp
#
#
#          Add to the associated residual vectors
#
#    
           t2ai (a,i)  = d0ai (a,i)
           t2ai (a,i) *= c1
           tai  (a,i) += t2ai (a,i)

           t2ai (a,i)  = d1ai (a,i)
           t2ai (a,i) *= c2  
           tai  (a,i) += t2ai (a,i)

           t2ai (a,i)  = d2ai (a,i)
           t2ai (a,i) *= c3
           tai  (a,i) += t2ai (a,i)
           
           PUT  VCACT1A (a,i) = tai (a,i)
#
     ENDPARDO a, i  
#
     execute server_barrier 
#
     ENDPROC ZDIIS2  
#    ------------- 
#
# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
#
     PROC ZDIIS3  
#    ---------- 
#
#    Zero out scalars.
#    ----------------- 
#
     CALL ZERO_DSCALAR_ZETA 
#
#    Determine the 'B-matrix'. 
#    ------------------------- 
#
#    Compute contributions due to T2aiai amplitudes. 
#    ----------------------------------------------- 
#
#
     PARDO a, i, a1, i1
#
#          REQUEST/GET amplitude data from all 4 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1aiai(a,i,a1,i1) a # ziter-3 amplitudes
           REQUEST e2aiai(a,i,a1,i1) a # ziter-2 amplitudes
           REQUEST e3aiai(a,i,a1,i1) a # ziter-1 amplitudes
           REQUEST e4aiai(a,i,a1,i1) a # ziter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,4
#             ---------
#
              etemp = e1aiai(a,i,a1,i1)*e1aiai(a,i,a1,i1)
              b11  += etemp
#
              etemp = e1aiai(a,i,a1,i1)*e2aiai(a,i,a1,i1)
              b12  += etemp
#
              etemp = e1aiai(a,i,a1,i1)*e3aiai(a,i,a1,i1)
              b13  += etemp
#
              etemp = e1aiai(a,i,a1,i1)*e4aiai(a,i,a1,i1)
              b14  += etemp
#
#             b1x x=2,4
#             ---------
#
              etemp = e2aiai(a,i,a1,i1)*e2aiai(a,i,a1,i1)
              b22  += etemp
#
              etemp = e2aiai(a,i,a1,i1)*e3aiai(a,i,a1,i1)
              b23  += etemp
#
              etemp = e2aiai(a,i,a1,i1)*e4aiai(a,i,a1,i1)
              b24  += etemp
#
#             b1x x=3,4
#             ---------
#
              etemp = e3aiai(a,i,a1,i1)*e3aiai(a,i,a1,i1)
              b33  += etemp
#
              etemp = e3aiai(a,i,a1,i1)*e4aiai(a,i,a1,i1)
              b34  += etemp
#
#             b1x x=4,4
#             ---------
#
              etemp = e4aiai(a,i,a1,i1)*e4aiai(a,i,a1,i1)
              b44  += etemp
#
     ENDPARDO a, i, a1, i1
#
#    Compute contributions due to T2aibj amplitudes.
#    -----------------------------------------------
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 4 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1aibj(a,i,b,j) a # ziter-3 amplitudes
           REQUEST e2aibj(a,i,b,j) a # ziter-2 amplitudes
           REQUEST e3aibj(a,i,b,j) a # ziter-1 amplitudes
           REQUEST e4aibj(a,i,b,j) a # ziter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,4
#             ---------
#
              etemp = e1aibj(a,i,b,j)*e1aibj(a,i,b,j)
              etemp *= 2.0
              b11  += etemp
#
              etemp = e1aibj(a,i,b,j)*e2aibj(a,i,b,j)
              etemp *= 2.0
              b12  += etemp
#
              etemp = e1aibj(a,i,b,j)*e3aibj(a,i,b,j)
              etemp *= 2.0
              b13  += etemp
#
              etemp = e1aibj(a,i,b,j)*e4aibj(a,i,b,j)
              etemp *= 2.0
              b14  += etemp
#
#             b1x x=2,4
#             ---------
#
              etemp = e2aibj(a,i,b,j)*e2aibj(a,i,b,j)
              etemp *= 2.0
              b22  += etemp
#
              etemp = e2aibj(a,i,b,j)*e3aibj(a,i,b,j)
              etemp *= 2.0
              b23  += etemp
#
              etemp = e2aibj(a,i,b,j)*e4aibj(a,i,b,j)
              etemp *= 2.0
              b24  += etemp
#
#             b1x x=3,4
#             ---------
#
              etemp = e3aibj(a,i,b,j)*e3aibj(a,i,b,j)
              etemp *= 2.0
              b33  += etemp
#
              etemp = e3aibj(a,i,b,j)*e4aibj(a,i,b,j)
              etemp *= 2.0
              b34  += etemp
#
#             b1x x=4,4
#             ---------
#
              etemp = e4aibj(a,i,b,j)*e4aibj(a,i,b,j)
              etemp *= 2.0
              b44  += etemp
#
     ENDPARDO a, i, b, j
#
#    Compute contributions due to T1ai amplitudes. 
#    --------------------------------------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 4 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET e1ai(a,i)    # ziter-3 amplitudes  
           GET e2ai(a,i)    # ziter-2 amplitudes  
           GET e3ai(a,i)    # ziter-1 amplitudes  
           GET e4ai(a,i)    # ziter-0 amplitudes  
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#             b1x x=1,4 
#             --------- 
#
              etemp = e1ai(a,i)*e1ai(a,i) 
              etemp *= 4.0
              b11  += etemp            
#
              etemp = e1ai(a,i)*e2ai(a,i) 
              etemp *= 4.0
              b12  += etemp            
#
              etemp = e1ai(a,i)*e3ai(a,i) 
              etemp *= 4.0
              b13  += etemp            
#
              etemp = e1ai(a,i)*e4ai(a,i) 
              etemp *= 4.0
              b14  += etemp            
#
#             b1x x=2,4 
#             --------- 
#
              etemp = e2ai(a,i)*e2ai(a,i) 
              etemp *= 4.0
              b22  += etemp            
#
              etemp = e2ai(a,i)*e3ai(a,i) 
              etemp *= 4.0
              b23  += etemp            
#
              etemp = e2ai(a,i)*e4ai(a,i) 
              etemp *= 4.0
              b24  += etemp            
#
#             b1x x=3,4 
#             --------- 
#
              etemp = e3ai(a,i)*e3ai(a,i) 
              etemp *= 4.0
              b33  += etemp            
#
              etemp = e3ai(a,i)*e4ai(a,i) 
              etemp *= 4.0
              b34  += etemp            
#
#             b1x x=4,4 
#             --------- 
#
              etemp = e4ai(a,i)*e4ai(a,i) 
              etemp *= 4.0
              b44  += etemp            
#
     ENDPARDO a, i 
#
     execute server_barrier 
#
#    Collectively sum B-matrix elements. 
#    -----------------------------------
#
     collective Tb11 += b11 
     collective Tb12 += b12 
     collective Tb13 += b13 
     collective Tb14 += b14 
     collective Tb22 += b22 
     collective Tb23 += b23 
     collective Tb24 += b24 
     collective Tb33 += b33 
     collective Tb34 += b34 
     collective Tb44 += b44 
#
#    Now the unique elements of the 'B-matrix' have been computed and the array filled out. 
#    --------------------------------------------------------------------------------------
#
#    Put the elements of the 'B-matrix', which have been computed as scalars into the  
#    R-matrix. 
#    -------------------------------------------------------------------------------- 
#
     CALL SETUP_ZDIIS 
#
     execute compute_diis # --> New instruction  
#
     c1 = Tb11 
     c2 = Tb22 
     c3 = Tb33 
     c4 = Tb44 
     execute print_scalar c1 
     execute print_scalar c2 
     execute print_scalar c3 
     execute print_scalar c4 
#
#    Done computing the c-vector. 
#    ---------------------------- 
#
#    Form the updated amplitudes using the c-vector. 
#    -----------------------------------------------  
#
#    Form T2old_aa. 
#    -------------- 
#
     PARDO a, i, a1, i1
#
#          REQUEST/GET amplitude data from all 4 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST d0aiai(a,i,a1,i1) a # ziter-4 amplitudes
           REQUEST d1aiai(a,i,a1,i1) a # ziter-3 amplitudes
           REQUEST d2aiai(a,i,a1,i1) a # ziter-2 amplitudes
           REQUEST d3aiai(a,i,a1,i1) a # ziter-1 amplitudes
#
           REQUEST e1aiai(a,i,a1,i1) a # ziter-3 amplitudes
           REQUEST e2aiai(a,i,a1,i1) a # ziter-2 amplitudes
           REQUEST e3aiai(a,i,a1,i1) a # ziter-1 amplitudes
           REQUEST e4aiai(a,i,a1,i1) a # ziter-0 amplitudes

           REQUEST             VCONV2AA (a,i,a1,i1) a # Diagonal HBAR elements
           tpppp (a,i,a1,i1) = VCONV2AA (a,i,a1,i1)
#
#          Evaluate the ZDIIS approximant 
#          -----------------------------
#
           taiai  (a,i,a1,i1)  = e1aiai (a,i,a1,i1)
           taiai  (a,i,a1,i1) *= c1

           t2aiai (a,i,a1,i1)  = e2aiai (a,i,a1,i1)
           t2aiai (a,i,a1,i1) *= c2
           taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

           t2aiai (a,i,a1,i1)  = e3aiai (a,i,a1,i1)
           t2aiai (a,i,a1,i1) *= c3     
           taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

           t2aiai (a,i,a1,i1)  = e4aiai (a,i,a1,i1)
           t2aiai (a,i,a1,i1) *= c4     
           taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

           taiai  (a,i,a1,i1) *=  0.75 # To match ACESII
           EXECUTE  APPLY_DEN4_NODIAG  taiai  tpppp
#
#
#          Add to the associated residual vectors
#
#
           t2aiai (a,i,a1,i1)  = d0aiai (a,i,a1,i1)
           t2aiai (a,i,a1,i1) *= c1
           taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

           t2aiai (a,i,a1,i1)  = d1aiai (a,i,a1,i1)
           t2aiai (a,i,a1,i1) *= c2
           taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

           t2aiai (a,i,a1,i1)  = d2aiai (a,i,a1,i1)
           t2aiai (a,i,a1,i1) *= c3
           taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

           t2aiai (a,i,a1,i1)  = d3aiai (a,i,a1,i1)
           t2aiai (a,i,a1,i1) *= c4
           taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

           PREPARE  VCACT2AA (a,i,a1,i1) = taiai (a,i,a1,i1)
#
     ENDPARDO a, i, a1, i1
#
#    Form T2old_ab. 
#    -------------- 
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 4 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST D0aibj(a,i,b,j) a # ziter-4 amplitudes
           REQUEST D1aibj(a,i,b,j) a # ziter-3 amplitudes
           REQUEST D2aibj(a,i,b,j) a # ziter-2 amplitudes
           REQUEST D3aibj(a,i,b,j) a # ziter-1 amplitudes
#
           REQUEST e1aibj(a,i,b,j) a # ziter-3 amplitudes
           REQUEST e2aibj(a,i,b,j) a # ziter-2 amplitudes
           REQUEST e3aibj(a,i,b,j) a # ziter-1 amplitudes
           REQUEST e4aibj(a,i,b,j) a # ziter-0 amplitudes

           REQUEST           VCONV2AB (a,i,b,j) a
           tppqq (a,i,b,j) = VCONV2AB (a,i,b,j) 
#          
#          Evaluate the ZDIIS approximant 
#          -----------------------------
#    
           taibj  (a,i,b,j)  = e1aibj (a,i,b,j)
           taibj  (a,i,b,j) *= c1
           
           t2aibj (a,i,b,j)  = e2aibj (a,i,b,j)
           t2aibj (a,i,b,j) *= c2
           taibj  (a,i,b,j) += t2aibj (a,i,b,j)

           t2aibj (a,i,b,j)  = e3aibj (a,i,b,j)
           t2aibj (a,i,b,j) *= c3
           taibj  (a,i,b,j) += t2aibj (a,i,b,j)

           t2aibj (a,i,b,j)  = e4aibj (a,i,b,j)
           t2aibj (a,i,b,j) *= c4
           taibj  (a,i,b,j) += t2aibj (a,i,b,j)

           taibj  (a,i,b,j) *=  0.75 # To match ACESII
           EXECUTE  APPLY_DEN4  taibj  tppqq
#
#
#          Add to the associated residual vectors
#
#
           t2aibj (a,i,b,j)  = d0aibj (a,i,b,j)
           t2aibj (a,i,b,j) *= c1
           taibj  (a,i,b,j) += t2aibj (a,i,b,j)

           t2aibj (a,i,b,j)  = d1aibj (a,i,b,j)
           t2aibj (a,i,b,j) *= c2
           taibj  (a,i,b,j) += t2aibj (a,i,b,j)

           t2aibj (a,i,b,j)  = d2aibj (a,i,b,j)
           t2aibj (a,i,b,j) *= c3
           taibj  (a,i,b,j) += t2aibj (a,i,b,j)

           t2aibj (a,i,b,j)  = d3aibj (a,i,b,j)
           t2aibj (a,i,b,j) *= c4
           taibj  (a,i,b,j) += t2aibj (a,i,b,j)

           PREPARE  VCACT2AB (a,i,b,j) = taibj (a,i,b,j)
#
     ENDPARDO a, i, b, j
#
#    Form tai_old. 
#    ------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 4 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET D0ai(a,i)     # ziter-4 amplitudes  
           GET D1ai(a,i)     # ziter-3 amplitudes  
           GET D2ai(a,i)     # ziter-2 amplitudes  
           GET D3ai(a,i)     # ziter-1 amplitudes  
#
           GET e1ai(a,i)     # ziter-3 amplitudes  
           GET e2ai(a,i)     # ziter-2 amplitudes  
           GET e3ai(a,i)     # ziter-1 amplitudes  
           GET e4ai(a,i)     # ziter-0 amplitudes  

           GET         VCONV1A (a,i)
           tpp (a,i) = VCONV1A (a,i)
#
#          Evaluate the ZDIIS approximant 
#          -----------------------------
#    
           tai  (a,i)  = e1ai (a,i)
           tai  (a,i) *= c1

           t2ai (a,i)  = e2ai (a,i)
           t2ai (a,i) *= c2
           tai  (a,i) += t2ai (a,i)

           t2ai (a,i)  = e3ai (a,i)
           t2ai (a,i) *= c3
           tai  (a,i) += t2ai (a,i)

           t2ai (a,i)  = e4ai (a,i)
           t2ai (a,i) *= c4
           tai  (a,i) += t2ai (a,i)

           tai  (a,i) *=  0.75 # To match ACESII
           EXECUTE  APPLY_DEN2  tai  tpp
#
#
#          Add to the associated residual vectors
#
#    
           t2ai (a,i)  = d0ai (a,i)
           t2ai (a,i) *= c1
           tai  (a,i) += t2ai (a,i)

           t2ai (a,i)  = d1ai (a,i)
           t2ai (a,i) *= c2  
           tai  (a,i) += t2ai (a,i)

           t2ai (a,i)  = d2ai (a,i)
           t2ai (a,i) *= c3
           tai  (a,i) += t2ai (a,i)
           
           t2ai (a,i)  = d3ai (a,i)
           t2ai (a,i) *= c4
           tai  (a,i) += t2ai (a,i)

           PUT  VCACT1A (a,i) = tai (a,i)
#
     ENDPARDO a, i  
#
     execute sip_barrier 
     execute server_barrier 
#
     ENDPROC ZDIIS3  
#    ------------- 
#
# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
#
     PROC ZDIIS4  
#    ---------- 
#
#    Zero out scalars.
#    ----------------- 
#
     CALL ZERO_DSCALAR_ZETA 
#
#    Determine the 'B-matrix'. 
#    ------------------------- 
#
#    Compute contributions due to T2aiai amplitudes. 
#    ----------------------------------------------- 
#
#
     PARDO a, i, a1, i1
#
#          REQUEST/GET amplitude data from all 5 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1aiai(a,i,a1,i1) a # ziter-4 amplitudes
           REQUEST e2aiai(a,i,a1,i1) a # ziter-3 amplitudes
           REQUEST e3aiai(a,i,a1,i1) a # ziter-2 amplitudes
           REQUEST e4aiai(a,i,a1,i1) a # ziter-1 amplitudes
           REQUEST e5aiai(a,i,a1,i1) a # ziter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,5
#             ---------
#
              etemp = e1aiai(a,i,a1,i1)*e1aiai(a,i,a1,i1)
              b11  += etemp
#
              etemp = e1aiai(a,i,a1,i1)*e2aiai(a,i,a1,i1)
              b12  += etemp
#
              etemp = e1aiai(a,i,a1,i1)*e3aiai(a,i,a1,i1)
              b13  += etemp
#
              etemp = e1aiai(a,i,a1,i1)*e4aiai(a,i,a1,i1)
              b14  += etemp
#
              etemp = e1aiai(a,i,a1,i1)*e5aiai(a,i,a1,i1)
              b15  += etemp
#
#             b1x x=2,5
#             ---------
#
              etemp = e2aiai(a,i,a1,i1)*e2aiai(a,i,a1,i1)
              b22  += etemp
#
              etemp = e2aiai(a,i,a1,i1)*e3aiai(a,i,a1,i1)
              b23  += etemp
#
              etemp = e2aiai(a,i,a1,i1)*e4aiai(a,i,a1,i1)
              b24  += etemp
#
              etemp = e2aiai(a,i,a1,i1)*e5aiai(a,i,a1,i1)
              b25  += etemp
#
#             b1x x=3,5
#             ---------
#
              etemp = e3aiai(a,i,a1,i1)*e3aiai(a,i,a1,i1)
              b33  += etemp
#
              etemp = e3aiai(a,i,a1,i1)*e4aiai(a,i,a1,i1)
              b34  += etemp
#
              etemp = e3aiai(a,i,a1,i1)*e5aiai(a,i,a1,i1)
              b35  += etemp
#
#             b1x x=4,5
#             ---------
#
              etemp = e4aiai(a,i,a1,i1)*e4aiai(a,i,a1,i1)
              b44  += etemp
#
              etemp = e4aiai(a,i,a1,i1)*e5aiai(a,i,a1,i1)
              b45  += etemp
#
#             b1x x=5,5
#             ---------
#
              etemp = e5aiai(a,i,a1,i1)*e5aiai(a,i,a1,i1)
              b55  += etemp
#
     ENDPARDO a, i, a1, i1
#
#    Compute contributions due to T2aibj amplitudes.
#    -----------------------------------------------
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 5 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1aibj(a,i,b,j) a # ziter-4 amplitudes
           REQUEST e2aibj(a,i,b,j) a # ziter-3 amplitudes
           REQUEST e3aibj(a,i,b,j) a # ziter-2 amplitudes
           REQUEST e4aibj(a,i,b,j) a # ziter-1 amplitudes
           REQUEST e5aibj(a,i,b,j) a # ziter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,5
#             ---------
#
              etemp = e1aibj(a,i,b,j)*e1aibj(a,i,b,j)
              etemp *= 2.0
              b11  += etemp
#
              etemp = e1aibj(a,i,b,j)*e2aibj(a,i,b,j)
              etemp *= 2.0
              b12  += etemp
#
              etemp = e1aibj(a,i,b,j)*e3aibj(a,i,b,j)
              etemp *= 2.0
              b13  += etemp
#
              etemp = e1aibj(a,i,b,j)*e4aibj(a,i,b,j)
              etemp *= 2.0
              b14  += etemp
#
              etemp = e1aibj(a,i,b,j)*e5aibj(a,i,b,j)
              etemp *= 2.0
              b15  += etemp
#
#             b1x x=2,5
#             ---------
#
              etemp = e2aibj(a,i,b,j)*e2aibj(a,i,b,j)
              etemp *= 2.0
              b22  += etemp
#
              etemp = e2aibj(a,i,b,j)*e3aibj(a,i,b,j)
              etemp *= 2.0
              b23  += etemp
#
              etemp = e2aibj(a,i,b,j)*e4aibj(a,i,b,j)
              etemp *= 2.0
              b24  += etemp
#
              etemp = e2aibj(a,i,b,j)*e5aibj(a,i,b,j)
              etemp *= 2.0
              b25  += etemp
#
#             b1x x=3,5
#             ---------
#
              etemp = e3aibj(a,i,b,j)*e3aibj(a,i,b,j)
              etemp *= 2.0
              b33  += etemp
#
              etemp = e3aibj(a,i,b,j)*e4aibj(a,i,b,j)
              etemp *= 2.0
              b34  += etemp
#
              etemp = e3aibj(a,i,b,j)*e5aibj(a,i,b,j)
              etemp *= 2.0
              b35  += etemp
#
#             b1x x=4,5
#             ---------
#
              etemp = e4aibj(a,i,b,j)*e4aibj(a,i,b,j)
              etemp *= 2.0
              b44  += etemp
#
              etemp = e4aibj(a,i,b,j)*e5aibj(a,i,b,j)
              etemp *= 2.0
              b45  += etemp
#
#             b1x x=5,5
#             ---------
#
              etemp = e5aibj(a,i,b,j)*e5aibj(a,i,b,j)
              etemp *= 2.0
              b55  += etemp
#
     ENDPARDO a, i, b, j
#
#    Compute contributions due to T1ai amplitudes. 
#    --------------------------------------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 5 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET e1ai(a,i)    # ziter-4 amplitudes  
           GET e2ai(a,i)    # ziter-3 amplitudes  
           GET e3ai(a,i)    # ziter-2 amplitudes  
           GET e4ai(a,i)    # ziter-1 amplitudes  
           GET e5ai(a,i)    # ziter-0 amplitudes  
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#             b1x x=1,5 
#             --------- 
#
              etemp = e1ai(a,i)*e1ai(a,i) 
              etemp *= 4.0
              b11  += etemp            
#
              etemp = e1ai(a,i)*e2ai(a,i) 
              etemp *= 4.0
              b12  += etemp            
#
              etemp = e1ai(a,i)*e3ai(a,i) 
              etemp *= 4.0
              b13  += etemp            
#
              etemp = e1ai(a,i)*e4ai(a,i) 
              etemp *= 4.0
              b14  += etemp            
#
              etemp = e1ai(a,i)*e5ai(a,i) 
              etemp *= 4.0
              b15  += etemp            
#
#             b1x x=2,5 
#             --------- 
#
              etemp = e2ai(a,i)*e2ai(a,i) 
              etemp *= 4.0
              b22  += etemp            
#
              etemp = e2ai(a,i)*e3ai(a,i) 
              etemp *= 4.0
              b23  += etemp            
#
              etemp = e2ai(a,i)*e4ai(a,i) 
              etemp *= 4.0
              b24  += etemp            
#
              etemp = e2ai(a,i)*e5ai(a,i) 
              etemp *= 4.0
              b25  += etemp            
#
#             b1x x=3,5 
#             --------- 
#
              etemp = e3ai(a,i)*e3ai(a,i) 
              etemp *= 4.0
              b33  += etemp            
#
              etemp = e3ai(a,i)*e4ai(a,i) 
              etemp *= 4.0
              b34  += etemp            
#
              etemp = e3ai(a,i)*e5ai(a,i) 
              etemp *= 4.0
              b35  += etemp            
#
#             b1x x=4,5 
#             --------- 
#
              etemp = e4ai(a,i)*e4ai(a,i) 
              etemp *= 4.0
              b44  += etemp            
#
              etemp = e4ai(a,i)*e5ai(a,i) 
              etemp *= 4.0
              b45  += etemp            
#
#             b1x x=5,5 
#             --------- 
#
              etemp = e5ai(a,i)*e5ai(a,i) 
              etemp *= 4.0
              b55  += etemp            
#
     ENDPARDO a, i 
#
     execute server_barrier 
#
#    Collectively sum B-matrix elements. 
#    -----------------------------------
#
     collective Tb11 += b11 
     collective Tb12 += b12 
     collective Tb13 += b13 
     collective Tb14 += b14 
     collective Tb15 += b15 
     collective Tb22 += b22 
     collective Tb23 += b23 
     collective Tb24 += b24 
     collective Tb25 += b25 
     collective Tb33 += b33 
     collective Tb34 += b34 
     collective Tb35 += b35 
     collective Tb44 += b44 
     collective Tb45 += b45 
     collective Tb55 += b55 
#
#    Now the unique elements of the 'B-matrix' have been computed and the array filled out. 
#    --------------------------------------------------------------------------------------
#
#    Put the elements of the 'B-matrix', which have been computed as scalars into the  
#    R-matrix. 
#    -------------------------------------------------------------------------------- 
#
     CALL SETUP_ZDIIS 
#
     execute compute_diis # --> New instruction  
#
     c1 = Tb11 
     c2 = Tb22 
     c3 = Tb33 
     c4 = Tb44 
     c5 = Tb55 
     execute print_scalar c1 
     execute print_scalar c2 
     execute print_scalar c3 
     execute print_scalar c4 
     execute print_scalar c5 
#
#    Done computing the c-vector. 
#    ---------------------------- 
#
#    Form the updated amplitudes using the c-vector. 
#    -----------------------------------------------  
#
#    Form T2old_aa. 
#    -------------- 
#
     PARDO a, i, a1, i1
#
#          REQUEST/GET amplitude data from all 5 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST d0aiai(a,i,a1,i1) a # ziter-5 amplitudes
           REQUEST d1aiai(a,i,a1,i1) a # ziter-4 amplitudes
           REQUEST d2aiai(a,i,a1,i1) a # ziter-3 amplitudes
           REQUEST d3aiai(a,i,a1,i1) a # ziter-2 amplitudes
           REQUEST d4aiai(a,i,a1,i1) a # ziter-1 amplitudes
#
           REQUEST e1aiai(a,i,a1,i1) a # ziter-4 amplitudes
           REQUEST e2aiai(a,i,a1,i1) a # ziter-3 amplitudes
           REQUEST e3aiai(a,i,a1,i1) a # ziter-2 amplitudes
           REQUEST e4aiai(a,i,a1,i1) a # ziter-1 amplitudes
           REQUEST e5aiai(a,i,a1,i1) a # ziter-0 amplitudes

           REQUEST             VCONV2AA (a,i,a1,i1) a # Diagonal HBAR elements
           tpppp (a,i,a1,i1) = VCONV2AA (a,i,a1,i1)
#
#          Evaluate the ZDIIS approximant 
#          -----------------------------
#
           taiai  (a,i,a1,i1)  = e1aiai (a,i,a1,i1)
           taiai  (a,i,a1,i1) *= c1

           t2aiai (a,i,a1,i1)  = e2aiai (a,i,a1,i1)
           t2aiai (a,i,a1,i1) *= c2
           taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

           t2aiai (a,i,a1,i1)  = e3aiai (a,i,a1,i1)
           t2aiai (a,i,a1,i1) *= c3     
           taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

           t2aiai (a,i,a1,i1)  = e4aiai (a,i,a1,i1)
           t2aiai (a,i,a1,i1) *= c4     
           taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

           t2aiai (a,i,a1,i1)  = e5aiai (a,i,a1,i1)
           t2aiai (a,i,a1,i1) *= c5     
           taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

           taiai  (a,i,a1,i1) *=  0.75 # To match ACESII
           EXECUTE  APPLY_DEN4_NODIAG  taiai  tpppp
#
#
#          Add to the associated residual vectors
#
#
           t2aiai (a,i,a1,i1)  = d0aiai (a,i,a1,i1)
           t2aiai (a,i,a1,i1) *= c1
           taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

           t2aiai (a,i,a1,i1)  = d1aiai (a,i,a1,i1)
           t2aiai (a,i,a1,i1) *= c2
           taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

           t2aiai (a,i,a1,i1)  = d2aiai (a,i,a1,i1)
           t2aiai (a,i,a1,i1) *= c3
           taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

           t2aiai (a,i,a1,i1)  = d3aiai (a,i,a1,i1)
           t2aiai (a,i,a1,i1) *= c4
           taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

           t2aiai (a,i,a1,i1)  = d4aiai (a,i,a1,i1)
           t2aiai (a,i,a1,i1) *= c5
           taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

           PREPARE  VCACT2AA (a,i,a1,i1) = taiai (a,i,a1,i1)
#
     ENDPARDO a, i, a1, i1
#
#    Form T2old_ab. 
#    -------------- 
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 5 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST D0aibj(a,i,b,j) a # ziter-5 amplitudes
           REQUEST D1aibj(a,i,b,j) a # ziter-4 amplitudes
           REQUEST D2aibj(a,i,b,j) a # ziter-3 amplitudes
           REQUEST D3aibj(a,i,b,j) a # ziter-2 amplitudes
           REQUEST D4aibj(a,i,b,j) a # ziter-1 amplitudes
#
           REQUEST e1aibj(a,i,b,j) a # ziter-4 amplitudes
           REQUEST e2aibj(a,i,b,j) a # ziter-3 amplitudes
           REQUEST e3aibj(a,i,b,j) a # ziter-2 amplitudes
           REQUEST e4aibj(a,i,b,j) a # ziter-1 amplitudes
           REQUEST e5aibj(a,i,b,j) a # ziter-0 amplitudes

           REQUEST           VCONV2AB (a,i,b,j) a
           tppqq (a,i,b,j) = VCONV2AB (a,i,b,j) 
#          
#          Evaluate the ZDIIS approximant 
#          -----------------------------
#    
           taibj  (a,i,b,j)  = e1aibj (a,i,b,j)
           taibj  (a,i,b,j) *= c1
           
           t2aibj (a,i,b,j)  = e2aibj (a,i,b,j)
           t2aibj (a,i,b,j) *= c2
           taibj  (a,i,b,j) += t2aibj (a,i,b,j)

           t2aibj (a,i,b,j)  = e3aibj (a,i,b,j)
           t2aibj (a,i,b,j) *= c3
           taibj  (a,i,b,j) += t2aibj (a,i,b,j)

           t2aibj (a,i,b,j)  = e4aibj (a,i,b,j)
           t2aibj (a,i,b,j) *= c4
           taibj  (a,i,b,j) += t2aibj (a,i,b,j)

           t2aibj (a,i,b,j)  = e5aibj (a,i,b,j)
           t2aibj (a,i,b,j) *= c5
           taibj  (a,i,b,j) += t2aibj (a,i,b,j)

           taibj  (a,i,b,j) *=  0.75 # To match ACESII
           EXECUTE  APPLY_DEN4  taibj  tppqq
#
#
#          Add to the associated residual vectors
#
#
           t2aibj (a,i,b,j)  = d0aibj (a,i,b,j)
           t2aibj (a,i,b,j) *= c1
           taibj  (a,i,b,j) += t2aibj (a,i,b,j)

           t2aibj (a,i,b,j)  = d1aibj (a,i,b,j)
           t2aibj (a,i,b,j) *= c2
           taibj  (a,i,b,j) += t2aibj (a,i,b,j)

           t2aibj (a,i,b,j)  = d2aibj (a,i,b,j)
           t2aibj (a,i,b,j) *= c3
           taibj  (a,i,b,j) += t2aibj (a,i,b,j)

           t2aibj (a,i,b,j)  = d3aibj (a,i,b,j)
           t2aibj (a,i,b,j) *= c4
           taibj  (a,i,b,j) += t2aibj (a,i,b,j)

           t2aibj (a,i,b,j)  = d4aibj (a,i,b,j)
           t2aibj (a,i,b,j) *= c5
           taibj  (a,i,b,j) += t2aibj (a,i,b,j)

           PREPARE  VCACT2AB (a,i,b,j) = taibj (a,i,b,j)
#
     ENDPARDO a, i, b, j
#
#    Form tai_old. 
#    ------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 5 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET D0ai(a,i)     # ziter-5 amplitudes  
           GET D1ai(a,i)     # ziter-4 amplitudes  
           GET D2ai(a,i)     # ziter-3 amplitudes  
           GET D3ai(a,i)     # ziter-2 amplitudes  
           GET D4ai(a,i)     # ziter-1 amplitudes  
#
           GET e1ai(a,i)     # ziter-4 amplitudes  
           GET e2ai(a,i)     # ziter-3 amplitudes  
           GET e3ai(a,i)     # ziter-2 amplitudes  
           GET e4ai(a,i)     # ziter-1 amplitudes  
           GET e5ai(a,i)     # ziter-0 amplitudes  

           GET         VCONV1A (a,i)
           tpp (a,i) = VCONV1A (a,i)
#
#          Evaluate the ZDIIS approximant 
#          -----------------------------
#    
           tai  (a,i)  = e1ai (a,i)
           tai  (a,i) *= c1

           t2ai (a,i)  = e2ai (a,i)
           t2ai (a,i) *= c2
           tai  (a,i) += t2ai (a,i)

           t2ai (a,i)  = e3ai (a,i)
           t2ai (a,i) *= c3
           tai  (a,i) += t2ai (a,i)

           t2ai (a,i)  = e4ai (a,i)
           t2ai (a,i) *= c4
           tai  (a,i) += t2ai (a,i)

           t2ai (a,i)  = e5ai (a,i)
           t2ai (a,i) *= c5
           tai  (a,i) += t2ai (a,i)

           tai  (a,i) *=  0.75 # To match ACESII
           EXECUTE  APPLY_DEN2  tai  tpp
#
#
#          Add to the associated residual vectors
#
#    
           t2ai (a,i)  = d0ai (a,i)
           t2ai (a,i) *= c1
           tai  (a,i) += t2ai (a,i)

           t2ai (a,i)  = d1ai (a,i)
           t2ai (a,i) *= c2  
           tai  (a,i) += t2ai (a,i)

           t2ai (a,i)  = d2ai (a,i)
           t2ai (a,i) *= c3
           tai  (a,i) += t2ai (a,i)

           t2ai (a,i)  = d3ai (a,i)
           t2ai (a,i) *= c4
           tai  (a,i) += t2ai (a,i)

           t2ai (a,i)  = d4ai (a,i)
           t2ai (a,i) *= c5
           tai  (a,i) += t2ai (a,i)

           PUT  VCACT1A (a,i) = tai (a,i)
#
     ENDPARDO a, i  
#
     execute sip_barrier 
     execute server_barrier 
#
     ENDPROC ZDIIS4  
#    ------------- 
#
# ---------------------------------------------------------------------------------
#
     PROC MOVE4_ZETA
#    ----------
     execute server_barrier
     execute sip_barrier
#
#    0 --> 1
#    ---------------------------------------------------
#
     execute array_copy d1aiai d0aiai
     execute array_copy d1aibj d0aibj
#
#
#    2 --> 1
#    ---------------------------------------------------
#
     execute array_copy e2aiai e1aiai
     execute array_copy e2aibj e1aibj
     execute array_copy d2aiai d1aiai
     execute array_copy d2aibj d1aibj
#
#    3 --> 2
#    ---------------------------------------------------
#
     execute array_copy e3aiai e2aiai
     execute array_copy e3aibj e2aibj
     execute array_copy d3aiai d2aiai
     execute array_copy d3aibj d2aibj
#
#
#    4 --> 3
#    ---------------------------------------------------
#
     execute array_copy e4aiai e3aiai
     execute array_copy e4aibj e3aibj
     execute array_copy d4aiai d3aiai
     execute array_copy d4aibj d3aibj
#
#    5 --> 4
#    ---------------------------------------------------
#
     execute array_copy e5aiai e4aiai
     execute array_copy e5aibj e4aibj
#
     execute sip_barrier
#
     PARDO a, i
           GET d1ai(a,i)
           PUT d0ai(a,i) = d1ai(a,i)
     ENDPARDO a, i
#
     execute sip_barrier
#
     PARDO a, i
           GET e2ai(a,i)
           PUT e1ai(a,i) = e2ai(a,i)
     ENDPARDO a, i
#
     PARDO a, i
           GET d2ai(a,i)
           PUT d1ai(a,i) = d2ai(a,i)
     ENDPARDO a, i
#
     execute sip_barrier
#
     PARDO a, i
           GET e3ai(a,i)
           PUT e2ai(a,i) = e3ai(a,i)
     ENDPARDO a, i
#
     PARDO a, i
           GET d3ai(a,i)
           PUT d2ai(a,i) = d3ai(a,i)
     ENDPARDO a, i
#
     execute sip_barrier
#
     PARDO a, i
           GET e4ai(a,i)
           PUT e3ai(a,i) = e4ai(a,i)
     ENDPARDO a, i
#
     PARDO a, i
           GET d4ai(a,i)
           PUT d3ai(a,i) = d4ai(a,i)
     ENDPARDO a, i
#
     execute sip_barrier
#
     PARDO a, i
           GET e5ai(a,i)
           PUT e4ai(a,i) = e5ai(a,i)
     ENDPARDO a, i
#
     execute server_barrier
#
     ENDPROC MOVE4_ZETA
#    -------------
#
# ---------------------------------------------------------------------------------
#

#------------------------------------------------------------------------
#
#     ---------------
      PROC  MOVE_ZETA
#     ---------------
#
#
      PARDO  a, a1, i, i1

         REQUEST             VCACT2AA (a,i,a1,i1) a
         taiai (a,i,a1,i1) = VCACT2AA (a,i,a1,i1)

         if ziter == 1
            PREPARE d1aiai(a,i,a1,i1) = taiai(a,i,a1,i1)
         endif
         if ziter == 2
            PREPARE d2aiai(a,i,a1,i1) = Taiai(a,i,a1,i1)
         endif
         if ziter == 3
            PREPARE d3aiai(a,i,a1,i1) = Taiai(a,i,a1,i1)
         endif
         if ziter == 4
            PREPARE d4aiai(a,i,a1,i1) = Taiai(a,i,a1,i1)
         endif
         if ziter >= 5
            PREPARE d4aiai(a,i,a1,i1) = Taiai(a,i,a1,i1)
         endif
      ENDPARDO a, a1, i, i1

      PARDO b, a, j, i

         REQUEST           VCACT2AB (a,i,b,j) b
         taibj (a,i,b,j) = VCACT2AB (a,i,b,j)

         if ziter == 1
            PREPARE d1aibj(a,i,b,j) = taibj(a,i,b,j)
         endif
         if ziter == 2
            PREPARE d2aibj(a,i,b,j) = Taibj(a,i,b,j)
         endif
         if ziter == 3
            PREPARE d3aibj(a,i,b,j) = Taibj(a,i,b,j)
         endif
         if ziter == 4
            PREPARE d4aibj(a,i,b,j) = Taibj(a,i,b,j)
         endif
         if ziter >= 5
            PREPARE d4aibj(a,i,b,j) = Taibj(a,i,b,j)
         endif
      ENDPARDO b, a, j, i

      PARDO a, i

         GET         VCACT1A (a,i)
         tai (a,i) = VCACT1A (a,i)

         if ziter == 1
            PUT d1ai(a,i) = tai(a,i)
         endif
         if ziter == 2
            PUT d2ai(a,i) = Tai(a,i)
         endif
         if ziter == 3
            PUT d3ai(a,i) = Tai(a,i)
         endif
         if ziter == 4
            PUT d4ai(a,i) = Tai(a,i)
         endif
         if ziter >= 5
            PUT d4ai(a,i) = Tai(a,i)
         endif
      ENDPARDO a, i

      EXECUTE  SERVER_BARRIER
#
#
#     ...ready!
#
#
      ENDPROC  MOVE_ZETA
#------------------------------------------------------------------------



#------------------------------------------------------------------------
#
#     -----------------
      PROC  UPDATE_ZETA
#     -----------------
#
#
      PARDO  a, i, a1, i1
         REQUEST              VCHACT2AA (a,i,a1,i1) a
         REQUEST              XI2_AA    (a,i,a1,i1) a
         taiai (a,i,a1,i1)  = XI2_AA (a,i,a1,i1)
         taiai (a,i,a1,i1) -= VCHACT2AA (a,i,a1,i1)

         etemp  = taiai (a,i,a1,i1) * taiai (a,i,a1,i1)
         etemp *= 0.5
         esum  += etemp

         if ziter == 1
            PREPARE e1aiai(a,i,a1,i1) = Taiai(a,i,a1,i1)
#
#   Generate Jacobi iterate!
#
            REQUEST               VCONV2AA (a,i,a1,i1) a
            t1aiai (a,i,a1,i1)  = VCONV2AA (a,i,a1,i1)
            EXECUTE  APPLY_DEN4_NODIAG  taiai  t1aiai
            PREPARE  VCACT2AA (a,i,a1,i1) += taiai (a,i,a1,i1)
         endif

         if ziter == 2
            PREPARE e2aiai(a,i,a1,i1) = Taiai(a,i,a1,i1)
         endif

         if ziter == 3
            PREPARE e3aiai(a,i,a1,i1) = Taiai(a,i,a1,i1)
         endif

         if ziter == 4
            PREPARE e4aiai(a,i,a1,i1) = Taiai(a,i,a1,i1)
         endif

         if ziter >= 5
            PREPARE e5aiai(a,i,a1,i1) = Taiai(a,i,a1,i1)
         endif
      ENDPARDO a, i, a1, i1

      PARDO  a, i, b, j
         REQUEST            VCHACT2AB (a,i,b,j) a
         REQUEST            XI2_AB    (a,i,b,j) a
         taibj (a,i,b,j)  = XI2_AB    (a,i,b,j)
         taibj (a,i,b,j) -= VCHACT2AB (a,i,b,j)

         etemp  = taibj (a,i,b,j) * taibj (a,i,b,j)
         esum  += etemp

         if ziter == 1
            PREPARE  e1aibj   (a,i,b,j)  = Taibj (a,i,b,j)
#
#   Generate Jacobi iterate!
#
            REQUEST             VCONV2AB (a,i,b,j) a
            t1aibj (a,i,b,j)  = VCONV2AB (a,i,b,j)
            EXECUTE  APPLY_DEN4  taibj  t1aibj
            PREPARE  VCACT2AB (a,i,b,j) += taibj (a,i,b,j)
         endif

         if ziter == 2
            PREPARE e2aibj(a,i,b,j) = Taibj(a,i,b,j)
         endif

         if ziter == 3
            PREPARE e3aibj(a,i,b,j) = Taibj(a,i,b,j)
         endif

         if ziter == 4
            PREPARE e4aibj(a,i,b,j) = Taibj(a,i,b,j)
         endif

         if ziter >= 5
            PREPARE e5aibj(a,i,b,j) = Taibj(a,i,b,j)
         endif
      ENDPARDO  a, i, b, j

      PARDO  a, i
         GET          VCHACT1A (a,i)
         GET          XI1_A    (a,i)
         tai (a,i)  = XI1_A    (a,i)
         tai (a,i) -= VCHACT1A (a,i)
         etemp  = tai (a,i) * tai (a,i)
         etemp *= 2.0
         esum  += etemp

         if ziter == 1
            PUT  e1ai    (a,i)  = Tai  (a,i)
#
#   Generate Jacobi iterate!
#
            GET          VCONV1A (a,i)
            t1ai (a,i) = VCONV1A (a,i)
            EXECUTE  APPLY_DEN2  tai  t1ai
            PUT  VCACT1A (a,i) += tai (a,i)
         endif

         if ziter == 2
            PUT e2ai(a,i) = Tai(a,i)
         endif

         if ziter == 3
            PUT e3ai(a,i) = Tai(a,i)
         endif

         if ziter == 4
            PUT e4ai(a,i) = Tai(a,i)
         endif

         if ziter >= 5
            PUT e5ai(a,i) = Tai(a,i)
         endif
      ENDPARDO  a, i

      EXECUTE  SERVER_BARRIER

      COLLECTIVE  zerr_jacob += esum
      EXECUTE  SIP_BARRIER
      EXECUTE  SQUARE_ROOT  zerr_jacob  ONEHALF

      EXECUTE  SERVER_BARRIER
#
#
#     ...ready!
#
#
      ENDPROC  UPDATE_ZETA
#------------------------------------------------------------------------



#------------------------------------------------------------------------
#
#     ----------------
      PROC  SOLVE_ZETA
#     ----------------
#
#
#
      CREATE  D0ai
      CREATE  D1ai
      CREATE  D2ai
      CREATE  D3ai
      CREATE  D4ai
      CREATE  D5ai

      CREATE  e1ai
      CREATE  e2ai
      CREATE  e3ai
      CREATE  e4ai
      CREATE  e5ai

      CALL  CONVER
      EXECUTE  SIP_BARRIER
#
#          Convergence criteria
#
#
      zcrit = 0.000000000001 # What ACESII uses
#
#
#                                        -1
#          Generate initial guess XI * Hd
#
#
      PARDO  a, i, a1, i1
         REQUEST               XI2_AA   (a,i,a1,i1) a
         REQUEST               VCONV2AA (a,i,a1,i1) a
         t1aiai (a,i,a1,i1)  = XI2_AA   (a,i,a1,i1)
         t2aiai (a,i,a1,i1)  = VCONV2AA (a,i,a1,i1)
         EXECUTE  APPLY_DEN4_NODIAG  t1aiai  t2aiai
         PREPARE  VCACT2AA (a,i,a1,i1) = t1aiai (a,i,a1,i1)
         PREPARE  D0aiai   (a,i,a1,i1) = t1aiai (a,i,a1,i1)
      ENDPARDO  a, i, a1, i1

      PARDO  a, i, b1, j1
         REQUEST               XI2_AB   (a,i,b1,j1) a
         REQUEST               VCONV2AB (a,i,b1,j1) a
         t1aibj (a,i,b1,j1)  = XI2_AB   (a,i,b1,j1)
         t2aibj (a,i,b1,j1)  = VCONV2AB (a,i,b1,j1)
         EXECUTE  APPLY_DEN4  t1aibj  t2aibj
         PREPARE  VCACT2AB (a,i,b1,j1) = t1aibj (a,i,b1,j1)
         PREPARE  D0aibj   (a,i,b1,j1) = t1aibj (a,i,b1,j1)
      ENDPARDO  a, i, b1, j1

      PARDO  a, i
         GET           XI1_A   (a,i)
         GET           VCONV1A (a,i)
         t1ai (a,i)  = XI1_A   (a,i)
         t2ai (a,i)  = VCONV1A (a,i)
         EXECUTE  APPLY_DEN2  t1ai  t2ai
         PUT  VCACT1A (a,i) = t1ai (a,i)
         PUT  D0ai    (a,i) = t1ai (a,i)
      ENDPARDO  a, i

      zold = 0.0
      EXECUTE  SERVER_BARRIER

      icount = 0.0
      DO ziter
         icount += 1.0
         EXECUTE  PRINT_SCALAR  icount
#
#
#          Generate new amplitudes!
#
#
         esum = 0.0
         zerr_jacob = 0.0
         zmax_jacob = 0.0

         CALL  HCmult
#
#
#          Update amplitudes!
#
#
         CALL  UPDATE_ZETA
#
#
#          The following ZDIIS routines are slightly modified from 
#          the normal ones in the Coupled Cluster codes.
#
#
         IF ziter == 2
            CALL  ZDIIS1
         ENDIF

         IF ziter == 3
            CALL  ZDIIS2
         ENDIF

         IF ziter == 4
            CALL  ZDIIS3
         ENDIF

         IF ziter >= 5
            CALL  ZDIIS4
            CALL  MOVE4_ZETA
         ENDIF

         CALL  MOVE_ZETA
#
#
#          Check on convergence!
#
#
         IF zerr_jacob < zold
            zdiff = zold - zerr_jacob
            IF zdiff < zcrit
               znorm = 0.0
               esum  = 0.0
               exit # ziter 
            ENDIF
         ENDIF

         IF zerr_jacob > zold
            zdiff = zerr_jacob - zold
            IF zdiff < zcrit
               znorm = 0.0
               esum  = 0.0
               exit # ziter 
            ENDIF
         ENDIF
#
#        Reset zold --> znew
#        
         zold = zerr_jacob
        #EXECUTE  PRINT_SCALAR  zerr_jacob
         EXECUTE  PRINT_SCALAR  zdiff

      ENDDO ziter
#
#
#          Now the Zeta amplitudes are stored in VCACTX (x=1A,2AA,2AB)
#          We're going to prepare them into the Lambda arrays. 
#
#
      
      etemp1 = 0.0
      EXECUTE  SIP_BARRIER

      PARDO  a, i, a1, i1
         REQUEST  VCACT2AA (a,i,a1,i1) a
         REQUEST  R2AA     (a,i,a1,i1) a
         etemp  = VCACT2AA (a,i,a1,i1) * R2AA (a,i,a1,i1)
         etemp *= 0.5
         esum  += etemp
      ENDPARDO  a, i, a1, i1

      PARDO  a, i, b, j
         REQUEST  VCACT2AB (a,i,b,j) a
         REQUEST  R2AB     (a,i,b,j) a
         etemp  = VCACT2AB (a,i,b,j) * R2AB (a,i,b,j)
         esum  += etemp
      ENDPARDO  a, i, b, j

      PARDO  a, i            
         GET  VCACT1A (a,i)
         GET  R1A     (a,i)
         etemp  = VCACT1A (a,i) * R1A (a,i)
         etemp *= 2.0
         esum  += etemp
      ENDPARDO  a, i

      EXECUTE  SERVER_BARRIER
      COLLECTIVE  etemp1 += esum
      EXECUTE  SIP_BARRIER
      etemp1 *= RNORM
      EXECUTE  PRINT_SCALAR  etemp1

     #iphase = 1.0
     #IF LRNORM < ZERO    # then L is out of phase with R
         iphase = -1.0 # need to change phase #Taken care of in Main
     #ENDIF

      znorm = 0.0
      esum  = 0.0
      EXECUTE  SIP_BARRIER

      PARDO  a, i, a1, i1
         REQUEST             VCACT2AA (a,i,a1,i1) i1
         tiaia (i,a,i1,a1) = VCACT2AA (a,i,a1,i1)
         etemp  = tiaia (i,a,i1,a1) * tiaia (i,a,i1,a1)
         etemp *= 0.5
         esum  += etemp
         tiaia (i,a,i1,a1) *= iphase
         PREPARE  A2old_aa(i,a,i1,a1) = tiaia (i,a,i1,a1)
      ENDPARDO  a, i, a1, i1
      
      PARDO  a, i, b, j    
         REQUEST           VCACT2AB (a,i,b,j) j
         tiajb (i,a,j,b) = VCACT2AB (a,i,b,j)
         etemp  = tiajb (i,a,j,b) * tiajb (i,a,j,b)
         esum  += etemp
         tiajb (i,a,j,b) *= iphase
         PREPARE  A2old_ab (i,a,j,b) = tiajb (i,a,j,b)
      ENDPARDO  a, i, b, j
      
      PARDO  a, i    
         GET         VCACT1A (a,i)
         tia (i,a) = VCACT1A (a,i)
         etemp  = tia (i,a) * tia (i,a)
         etemp *= 2.0
         esum  += etemp
         tia (i,a) *= iphase
         PUT  a1a_old (i,a) = tia (i,a)
      ENDPARDO  a, i

      EXECUTE  SERVER_BARRIER
      COLLECTIVE znorm += esum
      EXECUTE  SIP_BARRIER

      EXECUTE  SQUARE_ROOT  znorm  ONEHALF
      EXECUTE  PRINT_SCALAR  znorm
#
#
#          Free up some memory!
#
#
      DELETE  D0ai
      DELETE  D1ai
      DELETE  D2ai
      DELETE  D3ai
      DELETE  D4ai
      DELETE  D5ai

      DELETE  e1ai
      DELETE  e2ai
      DELETE  e3ai
      DELETE  e4ai
      DELETE  e5ai
#
#
#     ...ready!
#
#
      ENDPROC  SOLVE_ZETA
#------------------------------------------------------------------------


#-----------------------------------------------------------------------
#
#     -----------------
      PROC  GET_RL_AMPS
#     -----------------
#
#
#
#
      rootcount = 0.0

      DO indone
      DO kroot

         GET  REE (kroot,indone)
         tee (kroot,indone) = REE (kroot,indone)

         rootcount += 1.0
         IF rootcount == iroot
            EXECUTE  RETURN_SVAL  tee  OMEGA
         ENDIF

      ENDDO kroot
      ENDDO indone

      EXECUTE  SIP_BARRIER

      ncount    = 0.0
      rootcount = 0.0
      DO indone
      DO kroot

         GET                  LEE (kroot,indone)
         tee (kroot,indone) = LEE (kroot,indone)
         EXECUTE  RETURN_SVAL  tee  L_OMEGA
         etemp = L_OMEGA - OMEGA
         IF etemp < 0.0
            etemp *= -1.0
         ENDIF

         rootcount += 1.0
         IF etemp < root_thresh
            ncount = rootcount
            EXIT
         ENDIF

      ENDDO kroot
      ENDDO indone

      EXECUTE  PRINT_SCALAR  OMEGA
      EXECUTE  PRINT_SCALAR  L_OMEGA
      EXECUTE  PRINT_SCALAR  ncount

      EXECUTE  SIP_BARRIER
#
#
#          ...Grab an R  array...
#                      k
#
#     
      PARDO  a, i
         rootcount = 0.0
         DO kroot
            GET  R1A_VECS (a,i,kroot)
            rootcount += 1.0
            IF  rootcount == iroot
                tai (a,i) = R1A_VECS (a,i,kroot)
                PUT  R1A (a,i) = tai (a,i)
            ENDIF
         ENDDO kroot
      ENDPARDO  a, i

      PARDO  a, i, a1, i1
         rootcount = 0.0
         DO kroot
            REQUEST  R2AA_VECS (a,i,a1,i1,kroot) kroot
            rootcount += 1.0
            IF  rootcount == iroot
                taiai (a,i,a1,i1) = R2AA_VECS (a,i,a1,i1,kroot)
                PREPARE  R2AA (a,i,a1,i1) = taiai (a,i,a1,i1)
            ENDIF
         ENDDO kroot
      ENDPARDO  a, i, a1, i1

      PARDO  a, i, b, j
         rootcount = 0.0
         DO kroot
            REQUEST  R2AB_VECS (a,i,b,j,kroot) kroot
            rootcount += 1.0
            IF  rootcount == iroot
                taibj (a,i,b,j) = R2AB_VECS (a,i,b,j,kroot)
                PREPARE  R2AB (a,i,b,j) = taibj (a,i,b,j)
            ENDIF
         ENDDO kroot
      ENDPARDO  a, i, b, j
#
#
#          ...Grab the corresponding L  array...
#                                     k
#
#
#
#
#          We found a matching excitation energy, so grab
#          the corresponding root!
#
#
      IF ncount > ZERO

         PARDO  i, a
            rootcount = 0.0
            DO kroot
               GET  L1A_VECS (i,a,kroot)
               rootcount += 1.0
               IF  rootcount == ncount
                   tia (i,a) = L1A_VECS (i,a,kroot)
                   PUT  L1A (i,a) = tia (i,a)
               ENDIF
            ENDDO kroot
         ENDPARDO  i, a

         PARDO  i, a, i1, a1
            rootcount = 0.0
            DO kroot
               REQUEST  L2AA_VECS (i,a,i1,a1,kroot) kroot
               rootcount += 1.0
               IF  rootcount == ncount
                   tiaia (i,a,i1,a1) = L2AA_VECS (i,a,i1,a1,kroot)
                   PREPARE  L2AA (i,a,i1,a1) = tiaia (i,a,i1,a1)
               ENDIF
            ENDDO kroot
         ENDPARDO  i, a, i1, a1

         PARDO  i, a, j, b
            rootcount = 0.0
            DO kroot
               REQUEST  L2AB_VECS (i,a,j,b,kroot) kroot
               rootcount += 1.0
               IF  rootcount == ncount
                  tiajb (i,a,j,b) = L2AB_VECS (i,a,j,b,kroot)
                  PREPARE  L2AB (i,a,j,b) = tiajb (i,a,j,b)
               ENDIF
            ENDDO kroot
         ENDPARDO  i, a, j, b
               
      ENDIF # ncount > 0
#                  
#                  
#          In the event that none of the L excitation energies
#          match the the current R excitation energy, we need
#          to bomb!
#           
#        
      IF ncount == ZERO

         PARDO  p, p1
            GET  BOMB_SHELL (p,p1) # never created array to force crash
         ENDPARDO  p, p1

      ENDIF 
#
#
#      ...ready!
#
#
      ENDPROC  GET_RL_AMPS
#-------------------------------------------------------------------------




#-----------------------------------------------------------------------
#
#     ------------------
      PROC  COMP_LR_NORM
#     ------------------
#
#
#          ...Compute the contributions...
#
#
      R0 = 0.0
      IF1R1 = 0.0
      IG2R2 = 0.0
      IL1R1  = 0.0
      IL2R2  = 0.0
      esum   = 0.0
      el1r1  = 0.0
      el2r2  = 0.0

      etemp1 = 0.0
      etemp2 = 0.0
      etemp3 = 0.0
      etemp4 = 0.0
      etemp5 = 0.0
      sum1 = 0.0
      sum2 = 0.0
      sum3 = 0.0
      sum4 = 0.0
      sum5 = 0.0

      PARDO  a, i

         GET  HBAR_ia (i,a)
         GET  R1A (a,i)
         etemp = HBAR_ia (i,a) * R1A (a,i)
         etemp*= 2.0  
         sum1 += etemp

      ENDPARDO  a, i

      PARDO  a, a1, i, i1

         REQUEST  R2AA   (a,i,a1,i1) i1
         REQUEST  VSpipi (a,i,a1,i1) i1
         etemp = R2AA (a,i,a1,i1) * VSpipi (a,i,a1,i1)
         etemp*= 2.0  
         sum3 += etemp

      ENDPARDO  a, a1, i, i1

      PARDO  a, i, b, j

         REQUEST  R2AB (a,i,b,j) j
         REQUEST  Vpiqj (a,i,b,j) j
         etemp = R2AB (a,i,b,j) * Vpiqj (a,i,b,j)
         sum5 += etemp

      ENDPARDO  a, i, b, j

      EXECUTE  SERVER_BARRIER

      collective  etemp1 += sum1
      collective  etemp2 += sum2
      collective  etemp3 += sum3
      collective  etemp4 += sum4
      collective  etemp5 += sum5

      etemp3 *= 0.25
      etemp4 *= 0.25

      R0 += etemp1
      R0 += etemp2
      R0 += etemp3
      R0 += etemp4
      R0 += etemp5

#
# EOM GRADIENTS
      IF1R1 += etemp1
      IF1R1 += etemp2
      IG2R2 += etemp3
      IG2R2 += etemp4
      IG2R2 += etemp5

      EXECUTE  SIP_BARRIER

      IRHBAR = R0

      R0      = R0 / OMEGA
      OMEGA2  = TWO / THREE
      OMEGA2 *= OMEGA
#
# Right Norm 
#
      RNORM  = R0
      RNORM *= R0
      esum1  = 0.0

      PARDO  i, a

         GET         R1A (a,i)
         tai (a,i) = R1A (a,i)
         etemp  = tai (a,i) * tai (a,i)
         etemp *= 2.0
         esum1 += etemp

      ENDPARDO  i, a

      PARDO  a, i, a1, i1

         REQUEST             R2AA (a,i,a1,i1) a
         taiai (a,i,a1,i1) = R2AA (a,i,a1,i1)
         etemp  = taiai (a,i,a1,i1) * taiai (a,i,a1,i1)
         etemp  = etemp/2.0
         esum1 += etemp

      ENDPARDO  a, i, a1, i1

      PARDO  a, i, b, j

         REQUEST           R2AB (a,i,b,j) a
         taibj (a,i,b,j) = R2AB (a,i,b,j)
         etemp  = taibj (a,i,b,j) * taibj (a,i,b,j)
         esum1 += etemp

      ENDPARDO  a, i, b, j

      EXECUTE  SIP_BARRIER
      EXECUTE  SERVER_BARRIER

      COLLECTIVE  RNORM += esum1

      EXECUTE SIP_BARRIER
      EXECUTE  SQUARE_ROOT  RNORM  ONEHALF

      RNORM  = 1.0 / RNORM

#
# Leftp norm 
#
      LNORM  = 0.0
      esum1  = 0.0

      PARDO  i, a

         GET         R1A (a,i)
         GET         L1A (i,a)
         tai (a,i) = R1A (a,i)
         etemp  = tai (a,i) * L1A (i,a)
         etemp *= 2.0
         esum1 += etemp
         el1r1 += etemp

      ENDPARDO  i, a

      PARDO  i, a, i1, a1

         REQUEST             R2AA (a,i,a1,i1) i
         REQUEST             L2AA (i,a,i1,a1) i
         taiai (a,i,a1,i1) = R2AA (a,i,a1,i1)
         etemp  = taiai (a,i,a1,i1) * L2AA (i,a,i1,a1)
         etemp  = etemp/2.0
         esum1 += etemp
         el2r2 += etemp

      ENDPARDO  i, a, i1, a1

      PARDO  i, a, j, b

         REQUEST           R2AB (a,i,b,j) i
         REQUEST           L2AB (i,a,j,b) i
         taibj (a,i,b,j) = R2AB (a,i,b,j)
         etemp  = taibj (a,i,b,j) * L2AB (i,a,j,b)
         esum1 += etemp
         el2r2 += etemp

      ENDPARDO  i, a, j, b

      EXECUTE  SIP_BARRIER
      EXECUTE  SERVER_BARRIER

      COLLECTIVE  LNORM += esum1
      COLLECTIVE  IL1R1 += el1r1
      COLLECTIVE  IL2R2 += el2r2

      EXECUTE SIP_BARRIER
      LNORM *= RNORM
      etemp = LNORM
      LNORM = 1.0 / etemp
      LRNORM = LNORM * RNORM
#
      execute print_scalar R0
      execute print_scalar rnorm
      execute print_scalar lnorm
      execute print_scalar lrnorm
#
#
#      ...ready!
#
#
      ENDPROC  COMP_LR_NORM
#-------------------------------------------------------------------------




#    ------------------------------------------------------------------------ 
# 
         PROC CREATE1ARRAY 
# 
              CREATE Gmi_a 
              CREATE Gmi_b 
              CREATE Gae_a 
              CREATE Gae_b 

              CREATE DOR_ii 
              CREATE DOR_aa 
#
              CREATE Iij_aa
              CREATE Iab_aa
              CREATE Xai_aa
              CREATE Iai_aa
              CREATE Iia_aa
# 
              CREATE  L2RTAU_iiii
              CREATE  L2RTAU_ijij
              CREATE  L2TTAU_iiii
              CREATE  L2TTAU_ijij

              ALLOCATE  LR2L2_ii (*,*)
              ALLOCATE  LT2L2_ii (*,*)
              ALLOCATE  LR2L2_aa (*,*)
              ALLOCATE  LT2L2_aa (*,*)
              ALLOCATE  LR1L2_ai (*,*)
              ALLOCATE  LR2L1_ai (*,*)
              ALLOCATE  L_Z1_ai  (*,*)
              ALLOCATE  L_Z2_ai  (*,*)
              ALLOCATE  L_Y_aa   (*,*)
              ALLOCATE  L_Y_ii   (*,*)
              ALLOCATE  L_Z_aa   (*,*)
              ALLOCATE  L_Z_ii   (*,*)

# Watson, this is really stupid, but I'm trying to get out

              PARDO i, a1, i1, a
                 tpppp (i,a1,i1,a) = 0.0
                 PREPARE  L2R2_aaaa (i,a1,i1,a) = tpppp (i,a1,i1,a)
                 PREPARE  L2T2_aaaa (i,a1,i1,a) = tpppp (i,a1,i1,a)
              ENDPARDO  i, a1, i1, a
              
              PARDO i, b1, j1, a
                   tpppp (i,b1,j1,a) = 0.0
                 PREPARE  L2R2_abba (i,b1,j1,a) = tpppp (i,b1,j1,a)
                 PREPARE  L2T2_abba (i,b1,j1,a) = tpppp (i,b1,j1,a)
              ENDPARDO  i, b1, j1, a

              PARDO i, b1, i1, b
                   tpppp (i,b1,i1,b) = 0.0
                   PREPARE  L2R2_abab (i,b1,i1,b) = tpppp (i,b1,i1,b)
                   PREPARE  L2T2_abab (i,b1,i1,b) = tpppp (i,b1,i1,b)
              ENDPARDO  i, b1, i1, b

         ENDPROC CREATE1ARRAY 
# 
         PROC CREATEARRAY 

              CREATE Dii
              CREATE Daa
              CREATE Djj
              CREATE Dbb

         ENDPROC CREATEARRAY 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
#
      PROC TAUAA
#     ----------
#
      PARDO a, i, a1, i1
#
            REQUEST T2old_aa(a,i,a1,i1) i1 
            GET t1a_old(a1,i1)
            GET t1a_old(a1,i)
            GET t1a_old(a,i1)
            GET t1a_old(a,i)
#
            tai(a1,i1)            = t1a_old(a1,i1)
            t1ai(a1,i)            = t1a_old(a1,i)
            t2ai(a,i1)            = t1a_old(a,i1)
            t3ai(a,i)             = t1a_old(a,i)

            tmp1_aiai(a,i,a1,i1)  = t3ai(a,i)^tai(a1,i1)
            tmp2_aiai(a,i,a1,i1)  = t2ai(a,i1)^t1ai(a1,i)
            tmp1_aiai(a,i,a1,i1) += T2old_aa(a,i,a1,i1)
            tmp1_aiai(a,i,a1,i1) -= tmp2_aiai(a,i,a1,i1)
            PREPARE Tau_aa(a,i,a1,i1) = tmp1_aiai(a,i,a1,i1)

            tiiaa (i,i1,a,a1) = tmp1_aiai (a,i,a1,i1)
#
         DO i2 
         DO i3 
            REQUEST               L2AA (i2,a,i3,a1) i3
            taaii (a,a1,i2,i3)  = L2AA (i2,a,i3,a1)
            tiiii (i,i1,i2,i3)  = tiiaa (i,i1,a,a1) * taaii (a,a1,i2,i3)
            tiiii (i,i1,i2,i3) *= 0.5
            PUT  L2TTAU_iiii (i,i1,i2,i3) += tiiii (i,i1,i2,i3)
         ENDDO i3
         ENDDO i2

      ENDPARDO a, i, a1, i1

      PARDO  a, a1, i, i1
         REQUEST               R2AA    (a,i,a1,i1) a
         GET                   R1A     (a,i)
         GET                   R1A     (a1,i1)
         GET                   R1A     (a,i1)
         GET                   R1A     (a1,i)
         GET                   t1a_old (a1,i1)
         GET                   t1a_old (a,i)
         GET                   t1a_old (a1,i)
         GET                   t1a_old (a,i1)

         t1ai (a1,i)         = R1A  (a1,i)
         t2ai (a,i1)         = R1A  (a,i1) 
         t3ai (a1,i1)        = R1A  (a1,i1)

         t1pp (a1,i1)        = t1a_old (a1,i1)
         t2pp (a,i)          = t1a_old (a,i)
         t3pp (a1,i)         = t1a_old (a1,i)
         t4pp (a,i1)         = t1a_old (a,i1)

         taiai  (a,i,a1,i1)  = R1A  (a,i)  ^ t1pp (a1,i1)
         t1aiai (a,i,a1,i1)  = t2pp (a,i)  ^ t3ai (a1,i1)
         t2aiai (a,i1,a1,i)  = t2ai (a,i1) ^ t3pp (a1,i)
         t3aiai (a,i1,a1,i)  = t4pp (a,i1) ^ t1ai (a1,i)
         
         taiai  (a,i,a1,i1) += t1aiai (a,i,a1,i1)
         taiai  (a,i,a1,i1) += R2AA   (a,i,a1,i1)
         t2aiai (a,i1,a1,i) += t3aiai (a,i1,a1,i)
         t2aiai (a,i1,a1,i) *= -1.0
         tpppp  (a,i,a1,i1)  = t2aiai (a,i1,a1,i)
         
         taiai  (a,i,a1,i1) += tpppp (a,i,a1,i1)
         tiiaa  (i,i1,a,a1)  = taiai (a,i,a1,i1)
         PREPARE  RTAU_aa (a,i,a1,i1) += taiai (a,i,a1,i1)

         DO i2
         DO i3
            REQUEST               L2AA (i2,a,i3,a1) i3
            taaii (a,a1,i2,i3)  = L2AA (i2,a,i3,a1)
            tiiii (i,i1,i2,i3)  = tiiaa (i,i1,a,a1) * taaii (a,a1,i2,i3)
            tiiii (i,i1,i2,i3) *= 0.5
            PUT  L2RTAU_iiii (i,i1,i2,i3) += tiiii (i,i1,i2,i3)
         ENDDO i3
         ENDDO i2
      ENDPARDO  a, a1, i, i1
#
      ENDPROC TAUAA
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
#
      PROC TAUAB
#     ----------
#
      PARDO a, i, b, j
#
            REQUEST T2old_ab(a,i,b,j) j 
            GET t1a_old(a,i)
            GET t1a_old(b,j)
            tai(b,j) = t1a_old(b,j)
#
            tmp1_aibj(a,i,b,j)  = t1a_old(a,i)^tai(b,j)
            tmp1_aibj(a,i,b,j) += T2old_ab(a,i,b,j)
            tijab (i,j,a,b) = tmp1_aibj (a,i,b,j)
            PREPARE Tau_ab(a,i,b,j) = tmp1_aibj(a,i,b,j)
#
            DO i1
            DO j1
               REQUEST              L2AB (i1,a,j1,b) j1
               tabij (a,b,i1,j1)  = L2AB (i1,a,j1,b)
               tijij (i,j,i1,j1)  = tijab (i,j,a,b) * tabij (a,b,i1,j1)
               PUT  L2TTAU_ijij (i,j,i1,j1) += tijij (i,j,i1,j1)
            ENDDO j1
            ENDDO i1

      ENDPARDO a, i, b, j
#
      PARDO  a, b1, i, j1
         REQUEST               R2AB (a,i,b1,j1) a
         GET                   R1A  (a,i)
         GET                   R1A  (b1,j1)

         GET                   t1a_old (a,i)
         GET                   t1a_old (b1,j1)

         tbj (b1,j1)         = R1A     (b1,j1)
         tqq (b1,j1)         = t1a_old (b1,j1)

         taiai  (a,i,b1,j1)  = R1A     (a,i)  ^ tqq (b1,j1)
         t1aiai (a,i,b1,j1)  = t1a_old (a,i)  ^ tbj (b1,j1)
         taiai  (a,i,b1,j1) += t1aiai (a,i,b1,j1)
         taiai  (a,i,b1,j1) += R2AB   (a,i,b1,j1)
         tiiaa  (i,j1,a,b1)  = taiai (a,i,b1,j1)

         PREPARE  RTAU_ab (a,i,b1,j1) += taiai (a,i,b1,j1)
         DO i2
         DO j3
            REQUEST               L2AB (i2,a,j3,b1) j3
            tabij (a,b1,i2,j3)  = L2AB (i2,a,j3,b1)
            tijij (i,j1,i2,j3)  = tiiaa (i,j1,a,b1) * tabij (a,b1,i2,j3)
            PUT  L2RTAU_ijij (i,j1,i2,j3) += tijij (i,j1,i2,j3)
         ENDDO j3
         ENDDO i2
      ENDPARDO  a, b1, i, j1

      ENDPROC TAUAB
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
#
      PROC TAU
#
           CALL TAUAA
           CALL TAUAB
#
      ENDPROC TAU
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
#
      PROC GAEA
#     ---------
#
      PARDO a, a1
#
            Taa(a,a1) = 0.0
#
            DO i1
            DO i
            DO a2
#
               REQUEST T2old_aa(a1,i1,a2,i) i 
               REQUEST A2old_aa(i1,a,i,a2)  a2 
#
               T1aa(a,a1)  = A2old_aa(i1,a,i,a2)*T2old_aa(a1,i1,a2,i)
               T1aa(a,a1) *= 0.5
               Taa(a,a1)  -= T1aa(a,a1)
#
            ENDDO a2
            ENDDO i
            ENDDO i1
#
            DO i
            DO j
            DO b
#
               REQUEST T2old_ab(a1,i,b,j) j 
               REQUEST A2old_ab(i,a,j,b)  j 
#
               T1aa(a,a1) = A2old_ab(i,a,j,b)*T2old_ab(a1,i,b,j)
               Taa(a,a1) -= T1aa(a,a1)
#
            ENDDO b
            ENDDO j
            ENDDO i
#
            PUT Gae_a(a,a1) += Taa(a,a1)
#
      ENDPARDO a, a1
#
      ENDPROC GAEA
#     ------------
#
      PROC GAEB
#     ---------
#
      PARDO b, b1
#
            Tbb(b,b1) = 0.0
#
            DO j
            DO j1
            DO b2
#
               REQUEST T2old_aa(b1,j,b2,j1) j1 
               REQUEST A2old_aa(j,b,j1,b2)  j1 
#
               T1bb(b,b1)  = A2old_aa(j,b,j1,b2)*T2old_aa(b1,j,b2,j1)
               T1bb(b,b1) *= 0.5
               Tbb(b,b1)  -= T1bb(b,b1)
#
            ENDDO b2
            ENDDO j1
            ENDDO j
#
            DO j
            DO i
            DO a
#
               REQUEST T2old_ab(a,i,b1,j) j 
               REQUEST A2old_ab(i,a,j,b)  j 
#
               T1bb(b,b1) = A2old_ab(i,a,j,b)*T2old_ab(a,i,b1,j)
               Tbb(b,b1) -= T1bb(b,b1)
#
            ENDDO a
            ENDDO i
            ENDDO j
#
            PUT Gae_b(b,b1) += Tbb(b,b1)
#
      ENDPARDO b, b1
#
      ENDPROC GAEB
#     ------------
#
      PROC GAE
#     --------
         CALL GAEA
         CALL GAEB
      ENDPROC GAE
#     -----------
#
      PROC GMIA
#     ---------
#
      PARDO i1, i
#
            Gmi_a(i1,i) = 0.0
#
      ENDPARDO i1, i
      execute sip_barrier Gmi_a
#
      PARDO a, a1, i, i1
#
            DO i2
#
               REQUEST T2old_aa(a,i1,a1,i2) i2 
               REQUEST A2old_aa(i,a,i2,a1)  a1 
#
               Tii(i1,i)        = T2old_aa(a,i1,a1,i2)*A2old_aa(i,a,i2,a1)
               Tii(i1,i)       *= 0.5
               PUT Gmi_a(i1,i) += Tii(i1,i)
#
            ENDDO i2
#
      ENDPARDO a, a1, i, i1
#
      PARDO a, b, i, j
#
            DO i1
#
               REQUEST T2old_ab(a,i1,b,j) j 
               REQUEST A2old_ab(i,a,j,b)  j 
#
               Tii(i1,i)        = T2old_ab(a,i1,b,j)*A2old_ab(i,a,j,b)
               PUT Gmi_a(i1,i) += Tii(i1,i)
#
            ENDDO i1
#
      ENDPARDO a, b, i, j
#
      ENDPROC GMIA
#     ------------
#
      PROC GMIB
#     ---------
#
      PARDO j1, j
#
            Gmi_b(j1,j) = 0.0
#
      ENDPARDO j1, j
      execute sip_barrier Gmi_b
#
      PARDO b, b1, j, j1
#
            DO j2
#
               REQUEST T2old_aa(b,j1,b1,j2) j2 
               REQUEST A2old_aa(j,b,j2,b1)  j2 
#
               Tjj(j1,j)        = T2old_aa(b,j1,b1,j2)*A2old_aa(j,b,j2,b1)
               Tjj(j1,j)       *= 0.5
               PUT Gmi_b(j1,j) += Tjj(j1,j)
#
            ENDDO j2
#
      ENDPARDO b, b1, j, j1
#
      PARDO b, a, j, i
#
            DO j1
#
               REQUEST T2old_ab(a,i,b,j1) j1 
               REQUEST A2old_ab(i,a,j,b)  b 
#
               Tjj(j1,j)        = T2old_ab(a,i,b,j1)*A2old_ab(i,a,j,b)
               PUT Gmi_b(j1,j) += Tjj(j1,j)
#
            ENDDO j1
#
      ENDPARDO b, a, j, i
#
      ENDPROC GMIB
#     ------------
#
      PROC GMI
#     --------
         CALL GMIA
         CALL GMIB
      ENDPROC GMI
#     -----------
#
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
#
# --------------------------------------------------------------------------- 
#
# In this PROCEDURE the D^{ij}_{ab} block of the two-particle 
# density matrix is formed. Only the AA spin case is considered.  
#
# --------------------------------------------------------------------------- 
#
# First form one-particle intermediates 
#
# --------------------------------------------------------------------------- 
#
# Dim(i,m) = Gmi_a(i,m) + a1a_old(m,e)*t1a_old(e,i)  
#
# Dea(e,a) = Gae_a(e,a) - a1a_old(m,e)*t1a_old(a,m) 
#
# --------------------------------------------------------------------------- 
#
      PROC DIJABAA 
#     ------------- 
#
# Terms 1-5 in Eq. 33 
# ------------------- 
#
      PARDO a, a1, i, i1 
#
            REQUEST Tau_aa(a,i,a1,i1)   a1  
            REQUEST A2old_aa(i,a,i1,a1) a1  
#
            Tiiaa(i,i1,a,a1)  = 0.0 #Tau_aa(a,i,a1,i1) 
            T1iiaa(i,i1,a,a1) = A2old_aa(i,a,i1,a1) 
            Tiiaa(i,i1,a,a1) += T1iiaa(i,i1,a,a1) 
            Tiiaa(i,i1,a,a1) *= 0.125  
#
            DO i2  
#
               REQUEST Tau_aa(a,i2,a1,i1) i1  
               REQUEST Tau_aa(a,i2,a1,i)  i  
               GET Dii(i,i2) 
               GET Dii(i1,i2) 
#
               T1iiaa(i,i1,a,a1) = Tau_aa(a,i2,a1,i1)*Dii(i,i2) 
               T1iiaa(i,i1,a,a1)*= -0.125 
               Tiiaa(i,i1,a,a1) += T1iiaa(i,i1,a,a1) 
#
               T1iiaa(i,i1,a,a1) = Tau_aa(a,i2,a1,i)*Dii(i1,i2) 
               T1iiaa(i,i1,a,a1)*= 0.125 
               Tiiaa(i,i1,a,a1) += T1iiaa(i,i1,a,a1) 
#
               DO i3 
#
                  REQUEST Tau_aa(a,i2,a1,i3) i3  
                  REQUEST Vijmn_aaaa(i,i1,i2,i3) i3  
#
                  T2iiaa(i2,i3,a,a1) = Tau_aa(a,i2,a1,i3) 
                  T1iiaa(i,i1,a,a1)  = Vijmn_aaaa(i,i1,i2,i3)*T2iiaa(i2,i3,a,a1)
                  T1iiaa(i,i1,a,a1) *= 0.0625 
                  Tiiaa(i,i1,a,a1)  += T1iiaa(i,i1,a,a1) 
#
               ENDDO i3 
#
            ENDDO i2 
#            
            DO a2 
#
               REQUEST Tau_aa(a2,i,a1,i1) i1  
               REQUEST Tau_aa(a2,i,a,i1) i1  
               GET Daa(a2,a) 
               GET Daa(a2,a1) 
#
               T1iiaa(i,i1,a,a1) = Tau_aa(a2,i,a1,i1)*Daa(a2,a) 
               T1iiaa(i,i1,a,a1)*= 0.125 
               Tiiaa(i,i1,a,a1) += T1iiaa(i,i1,a,a1) 
#
               T1iiaa(i,i1,a,a1) = Tau_aa(a2,i,a,i1)*Daa(a2,a1) 
               T1iiaa(i,i1,a,a1)*= -0.125 
               Tiiaa(i,i1,a,a1) += T1iiaa(i,i1,a,a1) 
#
            ENDDO a2 

           #Tiiaa (i,i1,a,a1) *= 4.0 # Watson, removed
            PREPARE Dijab_aa(i,i1,a,a1) += Tiiaa(i,i1,a,a1) 
#
      ENDPARDO a, a1, i, i1 
#
# Final term in Eq. 33
# --------------------
#
      PARDO a, a1
#
            allocate L1aa(a1,*)
#
            DO i
#
               GET t1a_old(a1,i)
#
               DO a2
#
                  GET a1a_old(i,a2)
                  Taa(a1,a2)   = t1a_old(a1,i)*a1a_old(i,a2)
                  L1aa(a1,a2) += Taa(a1,a2)
#
               ENDDO a2
#
            ENDDO i
#
            allocate L1ai(a1,*)
#
            DO a2
            DO i
#
               GET t1a_old(a2,i)
               Tai(a1,i)   = L1aa(a1,a2)*t1a_old(a2,i)
               L1ai(a1,i) += Tai(a1,i)
#
            ENDDO i
            ENDDO a2
#
            deallocate L1aa(a1,*)
#
            DO i
#
               GET t1a_old(a,i)
#
               DO i1
#
                  Tiiaa(i,i1,a,a1)         = t1a_old(a,i)^L1ai(a1,i1)
                  Tiiaa(i,i1,a,a1)        *= 0.375

           #Tiiaa (i,i1,a,a1) *= 4.0 # Watson, removed
                  PREPARE Dijab_aa(i,i1,a,a1) += Tiiaa(i,i1,a,a1)
#
                  T1iiaa(i,i1,a1,a)        = Tiiaa(i,i1,a,a1)
                  T1iiaa(i,i1,a1,a)       *= -1.0
                  PREPARE Dijab_aa(i,i1,a1,a) += T1iiaa(i,i1,a1,a)
#
                  T1iiaa(i1,i,a,a1)        = Tiiaa(i,i1,a,a1)
                  T1iiaa(i1,i,a,a1)       *= -1.0
                  PREPARE Dijab_aa(i1,i,a,a1) += T1iiaa(i1,i,a,a1)
#
                  T1iiaa(i1,i,a1,a)        = Tiiaa(i,i1,a,a1)
                  PREPARE Dijab_aa(i1,i,a1,a) += T1iiaa(i1,i,a1,a)
#
               ENDDO i1
#
            ENDDO i
#
            deallocate L1ai(a1,*)
#
      ENDPARDO a, a1
#
# Sixth-term in Eq. 33
# --------------------
#
      PARDO i1, a1, i2, a2    
#
            REQUEST Liaai(i2,a2,a1,i1) a1 
#
            DO i
#
               GET         t1a_old(a2,i)
               tai(a2,i) = t1a_old(a2,i)
#
               DO a
#
                  REQUEST T2old_aa(a,i2,a2,i) i 
                  GET     t1a_old(a,i2)
#
                  Laiai(a,i2,a2,i)         = t1a_old(a,i2)^tai(a2,i)
                  Laiai(a,i2,a2,i)        *= 2.0
                  Laiai(a,i2,a2,i)        += T2old_aa(a,i2,a2,i)
#
#                 Tiiaa(i,i1,a,a1)         = Laiai(a,i2,a2,i)*Liaai(i2,a2,a1,i1)
#
                  Taiia(a,i,i2,a2)         = Laiai(a,i2,a2,i) 
                  Taiai(a,i,a1,i1)         = Taiia(a,i,i2,a2)*Liaai(i2,a2,a1,i1)  
                  Tiiaa(i,i1,a,a1)         = Taiai(a,i,a1,i1) 

                  Tiiaa(i,i1,a,a1)        *= -0.0625 

           #Tiiaa (i,i1,a,a1) *= 4.0 # Watson, removed
                  PREPARE Dijab_aa(i,i1,a,a1) += Tiiaa(i,i1,a,a1)
#
                  T1iiaa(i,i1,a1,a)        = Tiiaa(i,i1,a,a1)
                  T1iiaa(i,i1,a1,a)       *= -1.0
                  PREPARE Dijab_aa(i,i1,a1,a) += T1iiaa(i,i1,a1,a)
#
                  T1iiaa(i1,i,a,a1)        = Tiiaa(i,i1,a,a1)
                  T1iiaa(i1,i,a,a1)       *= -1.0
                  PREPARE Dijab_aa(i1,i,a,a1) += T1iiaa(i1,i,a,a1)
#
                  T1iiaa(i1,i,a1,a)        = Tiiaa(i,i1,a,a1)
                  PREPARE Dijab_aa(i1,i,a1,a) += T1iiaa(i1,i,a1,a)
#
               ENDDO a
#
            ENDDO i
#
      ENDPARDO i1, a1, i2, a2 
#
# Odd spin combination
# --------------------
#
      PARDO i1, a1, j, b 
#
            REQUEST Ljbai(j,b,a1,i1) b 
#
            DO i
            DO a
#
               REQUEST                    T2old_ab(a,i,b,j) j 
               Taijb(a,i,j,b)           = T2old_ab(a,i,b,j)
#
#              Tiiaa(i,i1,a,a1)         = Taibj(a,i,b,j)*Ljbai(j,b,a1,i1)
               Taiai(a,i,a1,i1)         = Taijb(a,i,j,b)*Ljbai(j,b,a1,i1) 
               Tiiaa(i,i1,a,a1)         = Taiai(a,i,a1,i1) 
#
               Tiiaa(i,i1,a,a1)        *= 0.0625 

           #Tiiaa (i,i1,a,a1) *= 4.0 # Watson, removed
               PREPARE Dijab_aa(i,i1,a,a1) += Tiiaa(i,i1,a,a1)
#
               T1iiaa(i,i1,a1,a)        = Tiiaa(i,i1,a,a1)
               T1iiaa(i,i1,a1,a)       *= -1.0
               PREPARE Dijab_aa(i,i1,a1,a) += T1iiaa(i,i1,a1,a)
#
               T1iiaa(i1,i,a,a1)        = Tiiaa(i,i1,a,a1)
               T1iiaa(i1,i,a,a1)       *= -1.0
               PREPARE Dijab_aa(i1,i,a,a1) += T1iiaa(i1,i,a,a1)
#
               T1iiaa(i1,i,a1,a)        = Tiiaa(i,i1,a,a1)
               PREPARE Dijab_aa(i1,i,a1,a) += T1iiaa(i1,i,a1,a)
#
            ENDDO a
            ENDDO i
#
      ENDPARDO i1, a1, j, b 

      ENDPROC DIJABAA 
#
# --------------------------------------------------------------------------- 
#
#
# --------------------------------------------------------------------------- 
#
# In this PROCEDURE the D^{ij}_{ab} clock of the two-particle 
# density matrix is formed.  
#
# --------------------------------------------------------------------------- 
#
# First form one-particle intermediates 
#
# --------------------------------------------------------------------------- 
#
# Dim(i,m) = Gmi_a(i,m) + a1a_old(m,e)*t1a_old(e,i)  
#
# Dea(e,a) = Gae_a(e,a) - a1a_old(m,e)*t1a_old(a,m) 
#
# --------------------------------------------------------------------------- 
#
      PROC DIJABAB 
#     ------------- 
#
# One-particle intermediates computed in AA/BB blocks  
# ---------------------------------------------------  
#
# Terms 1-5 in Eq. 33 
# ------------------- 
#
      PARDO a, b, i, j 
#
            REQUEST Tau_ab(a,i,b,j)   b  
            REQUEST A2old_ab(i,a,j,b) b  
#
            Tijab(i,j,a,b)  = 0.0 #Tau_ab(a,i,b,j) 
            T1ijab(i,j,a,b) = A2old_ab(i,a,j,b) 
            Tijab(i,j,a,b) += T1ijab(i,j,a,b)  
            Tijab(i,j,a,b) *= 0.125  
#
            DO i1 
#
               REQUEST Tau_ab(a,i1,b,j) j  
               GET Dii(i,i1) 
#
               T1ijab(i,j,a,b) = Tau_ab(a,i1,b,j)*Dii(i,i1) 
               T1ijab(i,j,a,b)*= -0.125 
               Tijab(i,j,a,b) += T1ijab(i,j,a,b) 
#
               DO j1 
#
                  REQUEST Tau_ab(a,i1,b,j1)     j1  
                  REQUEST Vijmn_abab(i,j,i1,j1) j1  
#
                  T2ijab(i1,j1,a,b) = Tau_ab(a,i1,b,j1) 
                  T1ijab(i,j,a,b)   = Vijmn_abab(i,j,i1,j1)*T2ijab(i1,j1,a,b)
                  T1ijab(i,j,a,b)  *= 0.125 
                  Tijab(i,j,a,b)   += T1ijab(i,j,a,b) 
#
               ENDDO j1 
#
            ENDDO i1 
#
            DO j1 
#
               REQUEST Tau_ab(a,i,b,j1) j1  
               GET Djj(j,j1) 
#
               T1ijab(i,j,a,b) = Tau_ab(a,i,b,j1)*Djj(j,j1) 
               T1ijab(i,j,a,b)*= -0.125 
               Tijab(i,j,a,b) += T1ijab(i,j,a,b) 
#
            ENDDO j1 
#            
            DO a1 
#
               REQUEST Tau_ab(a1,i,b,j) j  
               GET Daa(a1,a) 
#
               T1ijab(i,j,a,b) = Tau_ab(a1,i,b,j)*Daa(a1,a) 
               T1ijab(i,j,a,b)*= 0.125 
               Tijab(i,j,a,b) += T1ijab(i,j,a,b) 
#
            ENDDO a1 
#            
            DO b1 
#
               REQUEST Tau_ab(a,i,b1,j) j  
               GET Dbb(b1,b) 
#
               T1ijab(i,j,a,b) = Tau_ab(a,i,b1,j)*Dbb(b1,b) 
               T1ijab(i,j,a,b)*= 0.125 
               Tijab(i,j,a,b) += T1ijab(i,j,a,b) 
#
            ENDDO b1 
#            
           #Tijab (i,j,a,b) *= 4.0 # Watson, removed
            PREPARE Dijab_ab(i,j,a,b) += Tijab(i,j,a,b) 
#
      ENDPARDO a, b, i, j 
#
# Final term in Eq. 33
# --------------------
#
      PARDO a, b
#
            allocate Lbb(b,*)
#
            DO j
#
               GET t1a_old(b,j)
#
               DO b1
#
                  GET a1a_old(j,b1)
                  Tbb(b,b1)  = t1a_old(b,j)*a1a_old(j,b1)
                  Lbb(b,b1) += Tbb(b,b1)
#
               ENDDO b1
#
            ENDDO j
#
            allocate Lbj(b,*)
#
            DO b1
            DO j
#
               GET t1a_old(b1,j)
               Tbj(b,j)  = Lbb(b,b1)*t1a_old(b1,j)
               Lbj(b,j) += Tbj(b,j)
#
            ENDDO j
            ENDDO b1
#
            deallocate Lbb(b,*)
#
            DO i
#
               GET t1a_old(a,i)
#
               DO j
#
                  Tijab(i,j,a,b)  = t1a_old(a,i)^Lbj(b,j)
                  Tijab(i,j,a,b) *= 0.375
#            
           #Tijab (i,j,a,b) *= 4.0 # Watson, for eom

                  PREPARE Dijab_ab(i,j,a,b) += Tijab(i,j,a,b)
#
               ENDDO j
#
            ENDDO i
#
            deallocate Lbj(b,*)
#
      ENDPARDO a, b
#
      PARDO a, b
#
            allocate Laa(a,*)
#
            DO i
#
               GET t1a_old(a,i)
#
               DO a1
#
                  GET a1a_old(i,a1)
                  Taa(a,a1)  = t1a_old(a,i)*a1a_old(i,a1)
                  Laa(a,a1) += Taa(a,a1)
#
               ENDDO a1
#
            ENDDO i
#
            allocate Lai(a,*)
#
            DO a1
            DO i
#
               GET t1a_old(a1,i)
               Tai(a,i)  = Laa(a,a1)*t1a_old(a1,i)
               Lai(a,i) += Tai(a,i)
#
            ENDDO i
            ENDDO a1
#
            deallocate Laa(a,*)
#
            DO i
            DO j
#
               GET t1a_old(b,j)
               Tijab(i,j,a,b)         = t1a_old(b,j)^Lai(a,i)
               Tijab(i,j,a,b)        *= 0.375
#            
           #Tijab (i,j,a,b) *= 4.0 # Watson, for eom

               PREPARE Dijab_ab(i,j,a,b) += Tijab(i,j,a,b)
#
            ENDDO j
            ENDDO i
#
            deallocate Lai(a,*)
#
      ENDPARDO a, b
#
# Sixth-term in Eq. 33
# --------------------
#
      PARDO j, b, i1, a1 
#
            REQUEST Liabj(i1,a1,b,j) b 
#
            DO i
#
               GET         t1a_old(a1,i)
               tai(a1,i) = t1a_old(a1,i)
#
               DO a
#
                  REQUEST T2old_aa(a,i1,a1,i) i 
                  GET     t1a_old(a,i1)
#
                  Laiai(a,i1,a1,i)       = t1a_old(a,i1)^tai(a1,i)
                  Laiai(a,i1,a1,i)      *= 2.0
                  Laiai(a,i1,a1,i)      += T2old_aa(a,i1,a1,i)
#
#                 Tijab(i,j,a,b)         = Laiai(a,i1,a1,i)*Liabj(i1,a1,b,j)
#
                  Taiia(a,i,i1,a1)       = Laiai(a,i1,a1,i) 
                  Taibj(a,i,b,j)         = Taiia(a,i,i1,a1)*Liabj(i1,a1,b,j)  
                  Tijab(i,j,a,b)         = Taibj(a,i,b,j) 
                  Tijab(i,j,a,b)        *= -0.0625 

#            
           #Tijab (i,j,a,b) *= 4.0 # Watson, for eom

                  PREPARE Dijab_ab(i,j,a,b) += Tijab(i,j,a,b)
#
               ENDDO a
#
            ENDDO i
#
      ENDPARDO j, b, i1, a1 
#
      PARDO j, b, b2, j2
#
            REQUEST Ljbbj(j2,b2,b,j) b 
#
            DO i
            DO a
#
               REQUEST T2old_ab(a,i,b2,j2) j2 
#
#              Tijab(i,j,a,b)         = T2old_ab(a,i,b2,j2)*Ljbbj(j2,b2,b,j)
#
               Tiajb(i,a,j2,b2)       = T2old_ab(a,i,b2,j2) 
               Tiabj(i,a,b,j)         = Tiajb(i,a,j2,b2)*Ljbbj(j2,b2,b,j) 
               Tijab(i,j,a,b)         = Tiabj(i,a,b,j)  
               Tijab(i,j,a,b)        *= 0.0625 

#            
           #Tijab (i,j,a,b) *= 4.0 # Watson, for eom

               PREPARE Dijab_ab(i,j,a,b) += Tijab(i,j,a,b)
#
            ENDDO a
            ENDDO i
#
      ENDPARDO j, b, b2, j2
#
      PARDO i, a, j1, b1 
#
            REQUEST Ljbai(j1,b1,a,i) a 
#
            DO j
#
               GET         t1a_old(b1,j)
               tbj(b1,j) = t1a_old(b1,j)
#
               DO b
#
                  REQUEST T2old_aa(b,j1,b1,j) j 
                  GET     t1a_old(b,j1)
#
                  Tbjjb(b,j,j1,b1)       = t1a_old(b,j1)^tbj(b1,j)
                  Tbjjb(b,j,j1,b1)      *= 2.0
                  T1bjjb(b,j,j1,b1)      = T2old_aa(b,j1,b1,j)
                  Tbjjb(b,j,j1,b1)      += T1bjjb(b,j,j1,b1)  
#
#                 Tijab(i,j,a,b)         = Lbjbj(b,j1,b1,j)*Ljbai(j1,b1,a,i)
                  Tbjai(b,j,a,i)         = Tbjjb(b,j,j1,b1)*Ljbai(j1,b1,a,i)
                  Tijab(i,j,a,b)         = Tbjai(b,j,a,i)  
                  Tijab(i,j,a,b)        *= -0.0625 
#            
           #Tijab (i,j,a,b) *= 4.0 # Watson, for eom

                  PREPARE Dijab_ab(i,j,a,b) += Tijab(i,j,a,b)
#
               ENDDO b
#
            ENDDO j
#
      ENDPARDO i, a, j1, b1 
#
      PARDO i, a, a2, i2
#
            REQUEST Liaai(i2,a2,a,i) a 
#
            DO j
            DO b
#
               REQUEST T2old_ab(a2,i2,b,j) j 
#
#              Tijab(i,j,a,b)         = T2old_ab(a2,i2,b,j)*Liaai(i2,a2,a,i)
#
               Taiai(a,i,a2,i2)       = Liaai(i2,a2,a,i) 
               Taibj(a,i,b,j)         = Taiai(a,i,a2,i2)*T2old_ab(a2,i2,b,j) 
               Tijab(i,j,a,b)         = Taibj(a,i,b,j) 
               Tijab(i,j,a,b)        *= 0.0625 
#            
           #Tijab (i,j,a,b) *= 4.0 # Watson, for eom

               PREPARE Dijab_ab(i,j,a,b) += Tijab(i,j,a,b)
#
            ENDDO b
            ENDDO j
#
      ENDPARDO i, a, a2, i2
#
      PARDO b, b1, i1, i
#
            Lbibi(b,i1,b1,i) = 0.0
#
            DO j
            DO a
#
               REQUEST T2old_ab(a,i,b,j)   j 
               REQUEST A2old_ab(i1,a,j,b1) j 
#
#              Tbibi(b,i1,b1,i)  = T2old_ab(a,i,b,j)*A2old_ab(i1,a,j,b1)
#
               Tibja(i,b,j,a)    = T2old_ab(a,i,b,j)
               Tjaib(j,a,i1,b1)  = A2old_ab(i1,a,j,b1) 
               Tibib(i,b,i1,b1)  = Tibja(i,b,j,a)*Tjaib(j,a,i1,b1)   
               Tbibi(b,i1,b1,i)  = Tibib(i,b,i1,b1) 
               Lbibi(b,i1,b1,i) += Tbibi(b,i1,b1,i)
#
            ENDDO a
            ENDDO j
#
            DO a
            DO j
#
               REQUEST T2old_ab(a,i1,b1,j) j 
               GET t1a_old(a,i1)
               GET t1a_old(b1,j)
               tai(b1,j) = t1a_old(b1,j)
#
               Taibj(a,i1,b1,j)       = t1a_old(a,i1)^tai(b1,j)
               Taibj(a,i1,b1,j)      *= 2.0
               Taibj(a,i1,b1,j)      += T2old_ab(a,i1,b1,j)
#
               Tijab(i,j,a,b)         = Taibj(a,i1,b1,j)*Lbibi(b,i1,b1,i)
               Tijab(i,j,a,b)        *= 0.0625 
#            
           #Tijab (i,j,a,b) *= 4.0 # Watson, for eom

               PREPARE Dijab_ab(i,j,a,b) += Tijab(i,j,a,b)
#
            ENDDO j
            ENDDO a
#
      ENDPARDO b, b1, i1, i
#
      PARDO a, a1, j1, j
#
            Lajaj(a,j1,a1,j) = 0.0
#
            DO i
            DO b
#
               REQUEST T2old_ab(a,i,b,j) j 
               REQUEST A2old_ab(i,a1,j1,b) b 
#
               Tajaj(a,j1,a1,j)  = T2old_ab(a,i,b,j)*A2old_ab(i,a1,j1,b)
               Lajaj(a,j1,a1,j) += Tajaj(a,j1,a1,j)
#
            ENDDO b
            ENDDO i
#
            DO b
#
               GET t1a_old(b,j1)
               tai(b,j1) = t1a_old(b,j1)
#
               DO i
#
                  REQUEST T2old_ab(a1,i,b,j1) j1 
                  GET t1a_old(a1,i)
#
                  Taibj(a1,i,b,j1)       = t1a_old(a1,i)^tai(b,j1)
                  Taibj(a1,i,b,j1)      *= 2.0
                  Taibj(a1,i,b,j1)      += T2old_ab(a1,i,b,j1)
#
                  Tijab(i,j,a,b)         = Taibj(a1,i,b,j1)*Lajaj(a,j1,a1,j)
                  Tijab(i,j,a,b)        *= 0.0625 
#            
           #Tijab (i,j,a,b) *= 4.0 # Watson, for eom

                  PREPARE Dijab_ab(i,j,a,b) += Tijab(i,j,a,b)
#
            ENDDO i
#
            ENDDO b
#
      ENDPARDO a, a1, j1, j 

#
      ENDPROC DIJABAB 
#
# --------------------------------------------------------------------------- 
#
#-------------------------------------------------------------------------
#
#     ---------------
      PROC  DIJAB_EOM
#     ---------------
#
#
#       ab    ab               a  b
#      G   = t   + P(ij)P(ab) t  t
#       ij    ij               i  j
#
#   
#       ab               a  b
#      G   = P(ij)P(ab) Z  t
#       ij               i  j
#
#       a             a  e            m  a
#      Z   = (R2 * L2)  t  + (R2 * L2)  t
#       i             e  i            i  m
#
#
      PARDO  a, i, a1, i1
         REQUEST              TAU_aa (a,i,a1,i1) a
         GET                  R1A    (a1,i1)
         GET                  t1a_old(a1,i1)
         tpppp (i,i1,a,a1)  = TAU_aa (a,i,a1,i1)
         tpppp (i,i1,a,a1) *= 0.5

         taiai  (a,i,a1,i1)  = L_Z1_ai (a,i) ^ t1a_old (a1,i1)
         t1aiai (a,i,a1,i1)  = L_Z2_ai (a,i) ^ R1A  (a1,i1)
         taiai  (a,i,a1,i1) += t1aiai (a,i,a1,i1)
         taiai  (a,i,a1,i1) *= 0.5

         tiiaa  (i,i1,a,a1) = taiai (a,i,a1,i1)
         t1iiaa (i1,i,a1,a) = taiai (a,i,a1,i1)
         t2iiaa (i1,i,a,a1) = taiai (a,i,a1,i1)
         t3iiaa (i,i1,a1,a) = taiai (a,i,a1,i1)

         t2iiaa (i1,i,a,a1) *= -1.0
         t3iiaa (i,i1,a1,a) *= -1.0

         tiiaa (i,i1,a,a1) += tpppp (i,i1,a,a1)

         PREPARE  Dijab_aa (i,i1,a,a1) += tiiaa  (i,i1,a,a1)
         PREPARE  Dijab_aa (i1,i,a1,a) += t1iiaa (i1,i,a1,a)
         PREPARE  Dijab_aa (i1,i,a,a1) += t2iiaa (i1,i,a,a1)
         PREPARE  Dijab_aa (i,i1,a1,a) += t3iiaa (i,i1,a1,a)
      ENDPARDO  a, i, a1, i1

      PARDO  a, i, b1, j1
         REQUEST  TAU_ab (a,i,b1,j1) a
         GET  R1A (b1,j1)
         GET  R1A (a,i)
         GET  t1a_old (b1,j1)
         GET  t1a_old (a,i)
         tai (a,i) = R1A (a,i)
         tbj (b1,j1) = t1a_old (b1,j1)

         taibj  (a,i,b1,j1)  = L_Z1_ai (a,i) ^ tbj     (b1,j1)
         t1aibj (a,i,b1,j1)  = t1a_old (a,i) ^ L_Z1_ai (b1,j1)
         t2aibj (a,i,b1,j1)  = L_Z2_ai (a,i) ^ R1A     (b1,j1)
         t3aibj (a,i,b1,j1)  = tai     (a,i) ^ L_Z2_ai (b1,j1)
         taibj  (a,i,b1,j1) += t1aibj (a,i,b1,j1)
         taibj  (a,i,b1,j1) += t2aibj (a,i,b1,j1)
         taibj  (a,i,b1,j1) += t3aibj (a,i,b1,j1)
         taibj  (a,i,b1,j1) += TAU_ab (a,i,b1,j1)

         tijab (i,j1,a,b1)  = taibj (a,i,b1,j1)
         tijab (i,j1,a,b1) *= 0.5
         PREPARE  Dijab_ab (i,j1,a,b1) += tijab (i,j1,a,b1)
      ENDPARDO  a, i, b1, j1
#
#
#      Here I am inserting an artifical N^5 step.
#      I do this because I want to avoid barriers as much as possible.
#
#      I believe it is justified because the requests are not far in, and
#      there are no "PREPARE +=" but "PUT +=" instead.
#
#
      PARDO  a2, a, i
         ALLOCATE  LLaiai (a,i,a2,*)
         ALLOCATE  Lai   (a,i)
         DO i2
            REQUEST      T2old_aa (a,i,a2,i2) i2
            GET  t1a_old (a2,i)
            GET  t1a_old (a,i2)
            tpp  (a2,i) = t1a_old (a2,i)
            t1pp (a,i2) = t1a_old (a,i2)
            tpppp  (a,i2,a2,i)  = t1pp (a,i2) ^ tpp (a2,i)
            tpppp  (a,i2,a2,i) *= -1.0
            t1pppp (a,i,a2,i2)  = tpppp  (a,i2,a2,i)
            t1pppp (a,i,a2,i2) += T2old_aa   (a,i,a2,i2)
            LLaiai  (a,i,a2,i2) += t1pppp (a,i,a2,i2)
         ENDDO i2
         DO i2
            t1ai (a,i)  = LLaiai (a,i,a2,i2) * LR1L2_ai (a2,i2)
            t1ai (a,i) *= 0.5
            Lai  (a,i) += t1ai  (a,i)
         ENDDO i2
         DO a1
         DO i1
            GET t1a_old (a1,i1)
            t2pp (a1,i1) = t1a_old (a1,i1)
            taiai  (a,i,a1,i1)  = Lai (a,i) ^ t2pp (a1,i1)
            tiiaa  (i,i1,a,a1)  = taiai (a,i,a1,i1)
            t1iiaa (i1,i,a1,a)  = taiai (a,i,a1,i1)
            t2iiaa (i1,i,a,a1)  = taiai (a,i,a1,i1)
            t3iiaa (i,i1,a1,a)  = taiai (a,i,a1,i1)
         
            t2iiaa (i1,i,a,a1) *= -1.0
            t3iiaa (i,i1,a1,a) *= -1.0
         
            PREPARE  Dijab_aa (i,i1,a,a1) += tiiaa  (i,i1,a,a1)
            PREPARE  Dijab_aa (i1,i,a1,a) += t1iiaa (i1,i,a1,a)
            PREPARE  Dijab_aa (i1,i,a,a1) += t2iiaa (i1,i,a,a1)
            PREPARE  Dijab_aa (i,i1,a1,a) += t3iiaa (i,i1,a1,a)
         ENDDO i1
         ENDDO a1
         DO b1
         DO j1
            GET  t1a_old (b1,j1)
            taibj (a,i,b1,j1)  = Lai (a,i) ^ t1a_old (b1,j1)
            tijab (i,j1,a,b1)  = taibj (a,i,b1,j1)
            PREPARE  Dijab_ab (i,j1,a,b1) += tijab (i,j1,a,b1)
         ENDDO j1
         ENDDO b1
         DEALLOCATE  Lai   (a,i)
         DEALLOCATE  LLaiai (a,i,a2,*)
      ENDPARDO  a2, a, i

      PARDO  b2, a, i
         tai (a,i) = 0.0
         DO j2
            REQUEST       T2old_ab (a,i,b2,j2) j2
            t1ai (a,i)  = T2old_ab (a,i,b2,j2) * LR1L2_ai (b2,j2)
            t1ai (a,i) *= 0.5
            tai  (a,i) +=  t1ai (a,i)
         ENDDO j2
         DO a1
         DO i1
            GET t1a_old (a1,i1)
            taiai  (a,i,a1,i1) = tai (a,i) ^ t1a_old (a1,i1)
            tiiaa  (i,i1,a,a1) = taiai (a,i,a1,i1)
            t1iiaa (i1,i,a1,a) = taiai (a,i,a1,i1)
            t2iiaa (i1,i,a,a1) = taiai (a,i,a1,i1)
            t3iiaa (i,i1,a1,a) = taiai (a,i,a1,i1)
         
            t2iiaa (i1,i,a,a1) *= -1.0
            t3iiaa (i,i1,a1,a) *= -1.0
         
            PREPARE  Dijab_aa (i,i1,a,a1) += tiiaa  (i,i1,a,a1)
            PREPARE  Dijab_aa (i1,i,a1,a) += t1iiaa (i1,i,a1,a)
            PREPARE  Dijab_aa (i1,i,a,a1) += t2iiaa (i1,i,a,a1)
            PREPARE  Dijab_aa (i,i1,a1,a) += t3iiaa (i,i1,a1,a)
         ENDDO i1
         ENDDO a1
         DO b1
         DO j1
            GET t1a_old (b1,j1)
            tqq (b1,j1) = t1a_old (b1,j1)
            taibj (a,i,b1,j1) = tai (a,i) ^ tqq (b1,j1)
            tijab (i,j1,a,b1) = taibj (a,i,b1,j1)
            PREPARE  Dijab_ab (i,j1,a,b1) += tijab (i,j1,a,b1)
         ENDDO j1
         ENDDO b1
      ENDPARDO  b2, a, i

      PARDO  b2, b, j
         ALLOCATE  LLbjbj (b,j,b2,*)
         ALLOCATE  Lbj   (b,j)
         DO j2
            REQUEST      T2old_aa (b,j,b2,j2) j2
            GET t1a_old (b2,j)
            GET t1a_old (b,j2)
            tbj (b2,j) = t1a_old (b2,j)
            tqqqq  (b,j2,b2,j)  = t1a_old (b,j2) ^ tbj (b2,j)
            tqqqq  (b,j2,b2,j) *= -1.0
            t1qqqq (b,j,b2,j2)  = tqqqq  (b,j2,b2,j)
            t1qqqq (b,j,b2,j2) += T2old_aa   (b,j,b2,j2)
            LLbjbj  (b,j,b2,j2) += t1qqqq (b,j,b2,j2)
         ENDDO j2
         DO j2
            t1bj (b,j)  = LLbjbj (b,j,b2,j2) * LR1L2_ai (b2,j2)
            t1bj (b,j) *= 0.5
            Lbj  (b,j) += t1bj  (b,j)
         ENDDO j2
         DO a1
         DO i1
            GET t1a_old (a1,i1)
            tpp (a1,i1) = t1a_old (a1,i1)
            tbjai (b,j,a1,i1) = Lbj (b,j) ^ tpp (a1,i1)
            tijab (i1,j,a1,b) = tbjai (b,j,a1,i1)
            PREPARE  Dijab_ab (i1,j,a1,b) += tijab (i1,j,a1,b)
         ENDDO i1
         ENDDO a1
         DEALLOCATE  Lbj   (b,j)
         DEALLOCATE  LLbjbj (b,j,b2,*)
      ENDPARDO  b2, b, j

      PARDO  a2, b, j
         tbj (b,j) = 0.0
         DO i2
            REQUEST       T2old_ab (a2,i2,b,j) i2
            t1bj (b,j)  = T2old_ab (a2,i2,b,j) * LR1L2_ai (a2,i2)
            t1bj (b,j) *= 0.5
            tbj  (b,j) += t1bj (b,j)
         ENDDO i2
         DO a1
         DO i1
            GET t1a_old (a1,i1)
            tbjai (b,j,a1,i1) = tbj (b,j) ^ t1a_old (a1,i1)
            tijab (i1,j,a1,b) = tbjai (b,j,a1,i1)
            PREPARE  Dijab_ab (i1,j,a1,b) += tijab (i1,j,a1,b)
         ENDDO i1
         ENDDO a1
      ENDPARDO  a2, b, j
#
#
#       ab           e  m        ef  mn    ab           a  m        af  mn    eb
#      G   = P(ij) (t  l  + 1/2 t   l   ) r   + P(ab) (t  l  + 1/2 t   l   ) r
#       ij           i  e        in  ef    mj           m  e        mn  ef    ij
#
#
#
#           f  mn  e    e  m        ef  mn    ab           f  mn  a    a  m        af  mn    eb
# + P(ij) (r  l   t  + r  l  + 1/2 r   l   ) t   + P(ab) (r  l   t  + r  l  + 1/2 r   l   ) t
#           n  ef  i    i  e        in  ef    mh           n  ef  m    m  e        mn  ef    ij
#
#
      PARDO  a, i2, a1, i1
         REQUEST  T2old_aa (a,i2,a1,i1) a
         REQUEST  R2AA (a,i2,a1,i1) a
         DO i
            taiai  (a,i,a1,i1)  = L_Z_ii (i2,i) * T2old_aa (a,i2,a1,i1)
            t1aiai (a,i,a1,i1)  = L_Y_ii (i2,i) * R2AA (a,i2,a1,i1)
            taiai  (a,i,a1,i1) += t1aiai (a,i,a1,i1)
            taiai  (a,i,a1,i1) *= 0.5
            tiiaa  (i,i1,a,a1)  = taiai  (a,i,a1,i1)
            t1iiaa (i1,i,a,a1)  = taiai  (a,i,a1,i1)
            tiiaa  (i,i1,a,a1) *= -1.0
            PREPARE  Dijab_aa (i,i1,a,a1) += tiiaa  (i,i1,a,a1)
            PREPARE  Dijab_aa (i1,i,a,a1) += t1iiaa (i1,i,a,a1)
         ENDDO i
      ENDPARDO  a, i2, a1, i1

      PARDO  a2, i, a1, i1
         REQUEST  T2old_aa (a2,i,a1,i1) a2
         REQUEST  R2AA (a2,i,a1,i1) a2
         DO a
            taiai  (a,i,a1,i1)  = L_Z_aa (a2,a) * T2old_aa (a2,i,a1,i1)
            t1aiai (a,i,a1,i1)  = L_Y_aa (a2,a) * R2AA (a2,i,a1,i1)
            taiai  (a,i,a1,i1) += t1aiai (a,i,a1,i1)
            taiai  (a,i,a1,i1) *= 0.5
            tiiaa  (i,i1,a,a1)  = taiai (a,i,a1,i1)
            t1iiaa (i,i1,a1,a)  = taiai (a,i,a1,i1)
            tiiaa  (i,i1,a,a1) *= -1.0
            PREPARE  Dijab_aa (i,i1,a,a1) += tiiaa  (i,i1,a,a1)
            PREPARE  Dijab_aa (i,i1,a1,a) += t1iiaa (i,i1,a1,a)
         ENDDO a
      ENDPARDO  a2, i, a1, i1

      PARDO  a, i2, b1, j1
         REQUEST  T2old_ab (a,i2,b1,j1) a
         REQUEST  R2AB (a,i2,b1,j1) a
         DO i
            taibj  (a,i,b1,j1)  = L_Z_ii (i2,i) * T2old_ab (a,i2,b1,j1)
            t1aibj (a,i,b1,j1)  = L_Y_ii (i2,i) * R2AB (a,i2,b1,j1)
            taibj  (a,i,b1,j1) += t1aibj (a,i,b1,j1)
            taibj  (a,i,b1,j1) *= 0.5
            tijab  (i,j1,a,b1)  = taibj  (a,i,b1,j1)
            tijab  (i,j1,a,b1) *= -1.0
            PREPARE  Dijab_ab (i,j1,a,b1) += tijab (i,j1,a,b1)
         ENDDO i
      ENDPARDO  a, i2, b1, j1

      PARDO  a, j2, b1, i
         REQUEST  T2old_ab (a,i,b1,j2) a
         REQUEST  R2AB (a,i,b1,j2) a
         DO j1
            taibj  (a,i,b1,j1)  = T2old_ab (a,i,b1,j2) * L_Z_ii (j2,j1)
            t1aibj (a,i,b1,j1)  = R2AB (a,i,b1,j2) * L_Y_ii (j2,j1)
            taibj  (a,i,b1,j1) += t1aibj (a,i,b1,j1)
            taibj  (a,i,b1,j1) *= 0.5
            tijab  (i,j1,a,b1)  = taibj  (a,i,b1,j1)
            tijab  (i,j1,a,b1) *= -1.0
            PREPARE  Dijab_ab (i,j1,a,b1) += tijab (i,j1,a,b1)
         ENDDO j1
      ENDPARDO  a, j2, b1, i

      PARDO  a2, i, b1, j1
         REQUEST  T2old_ab (a2,i,b1,j1) a2
         REQUEST  R2AB (a2,i,b1,j1) a2
         DO a
            taiai  (a,i,b1,j1)  = L_Z_aa (a2,a) * T2old_ab (a2,i,b1,j1)
            t1aiai (a,i,b1,j1)  = L_Y_aa (a2,a) * R2AB (a2,i,b1,j1)
            taiai  (a,i,b1,j1) += t1aiai (a,i,b1,j1)
            taiai  (a,i,b1,j1) *= 0.5
            tiiaa  (i,j1,a,b1)  = taiai (a,i,b1,j1)
            tiiaa  (i,j1,a,b1) *= -1.0
            PREPARE  Dijab_ab (i,j1,a,b1) += tiiaa  (i,j1,a,b1)
         ENDDO a
      ENDPARDO  a2, i, b1, j1

      PARDO  b2, i, a, j1
         REQUEST  T2old_ab (a,i,b2,j1) b2
         REQUEST  R2AB (a,i,b2,j1) b2
         DO b1
            taiai  (a,i,b1,j1)  = T2old_ab (a,i,b2,j1) * L_Z_aa (b2,b1)
            t1aiai (a,i,b1,j1)  = R2AB (a,i,b2,j1) * L_Y_aa (b2,b1)
            taiai  (a,i,b1,j1) += t1aiai (a,i,b1,j1)
            taiai  (a,i,b1,j1) *= 0.5
            tiiaa  (i,j1,a,b1)  = taiai (a,i,b1,j1)
            tiiaa  (i,j1,a,b1) *= -1.0
            PREPARE  Dijab_ab (i,j1,a,b1) += tiiaa  (i,j1,a,b1)
         ENDDO b1
      ENDPARDO  b2, i, a, j1
#
#
#     TPDIJAB4
#
#
      PARDO  a, i, i2, i3
         ALLOCATE  L2iiii  (i,*,i2,i3)
         ALLOCATE  L4iiii (i,*,i2,i3)
         DO i1
            GET                    L2RTAU_iiii (i,i1,i2,i3)
            GET                    L2TTAU_iiii (i,i1,i2,i3)
            L2iiii (i,i1,i2,i3)  = L2RTAU_iiii (i,i1,i2,i3)
            L4iiii (i,i1,i2,i3)  = L2TTAU_iiii (i,i1,i2,i3)
            L2iiii (i,i1,i2,i3) *= 0.25
            L4iiii (i,i1,i2,i3) *= 0.25
         ENDDO i1
         DO a1
            REQUEST               TAU_aa  (a,i2,a1,i3) a1
            REQUEST               RTAU_aa (a,i2,a1,i3) a1
            tiiaa  (i2,i3,a,a1) = TAU_aa  (a,i2,a1,i3)
            t1iiaa (i2,i3,a,a1) = RTAU_aa (a,i2,a1,i3)
            DO i1
               tpppp  (i,i1,a,a1)  = L2iiii (i,i1,i2,i3) * tiiaa  (i2,i3,a,a1)
               t1pppp (i,i1,a,a1)  = L4iiii (i,i1,i2,i3) * t1iiaa (i2,i3,a,a1)
               tpppp  (i,i1,a,a1) += t1pppp (i,i1,a,a1)
               PREPARE  Dijab_aa (i,i1,a,a1) += tpppp (i,i1,a,a1)
            ENDDO i1
         ENDDO a1
         DEALLOCATE  L2iiii  (i,*,i2,i3)
         DEALLOCATE  L4iiii (i,*,i2,i3)
      ENDPARDO  a, i, i2, i3

      PARDO  a, i, i2, j3
         ALLOCATE  Lijij  (i,*,i2,j3)
         ALLOCATE  L1ijij (i,*,i2,j3)
         DO j1
            GET                    L2RTAU_ijij (i,j1,i2,j3)
            GET                    L2TTAU_ijij (i,j1,i2,j3)
            Lijij  (i,j1,i2,j3)  = L2RTAU_ijij (i,j1,i2,j3)
            L1ijij (i,j1,i2,j3)  = L2TTAU_ijij (i,j1,i2,j3)
            Lijij  (i,j1,i2,j3) *= 0.5
            L1ijij (i,j1,i2,j3) *= 0.5
         ENDDO j1
         DO b1
            REQUEST               TAU_ab  (a,i2,b1,j3) b1
            REQUEST               RTAU_ab (a,i2,b1,j3) b1
            tijab  (i2,j3,a,b1) = TAU_ab  (a,i2,b1,j3)
            t1ijab (i2,j3,a,b1) = RTAU_ab (a,i2,b1,j3)
            DO j1
               tpqpq  (i,j1,a,b1)  = Lijij  (i,j1,i2,j3) * tijab  (i2,j3,a,b1)
               t1pqpq (i,j1,a,b1)  = L1ijij (i,j1,i2,j3) * t1ijab (i2,j3,a,b1)
               tpqpq  (i,j1,a,b1) += t1pqpq (i,j1,a,b1)
               PREPARE  Dijab_ab (i,j1,a,b1) += tpqpq (i,j1,a,b1)
            ENDDO j1
         ENDDO b1
         DEALLOCATE  Lijij  (i,*,i2,j3)
         DEALLOCATE  L1ijij (i,*,i2,j3)
      ENDPARDO  a, i, i2, j3
#
#
#     TPDIJAB5
#
#
      PARDO  a1, a2, i2, a
         ALLOCATE  Liaia  (*,a2,i2,a)
         ALLOCATE  L1iaia (*,a2,i2,a)
         DO i
            REQUEST               L2R2_aaaa (i,a2,i2,a) i
            REQUEST               L2T2_aaaa (i,a2,i2,a) i
            Liaia  (i,a2,i2,a)  = L2R2_aaaa (i,a2,i2,a)
            L1iaia (i,a2,i2,a)  = L2T2_aaaa (i,a2,i2,a)
            Liaia  (i,a2,i2,a) *= 0.25
            L1iaia (i,a2,i2,a) *= 0.25
         ENDDO i
         DO i1
            REQUEST        T2old_aa (a1,i1,a2,i2) i1
            REQUEST        R2AA (a1,i1,a2,i2) i1
            GET            R1A  (a1,i2)
            GET            R1A  (a2,i1)
            GET            t1a_old (a1,i2)
            GET            t1a_old (a2,i1)
            tai  (a2,i1) = t1a_old (a2,i1)
            t1ai (a1,i2) = R1A  (a1,i2)
# TAU like
            taiai  (a1,i1,a2,i2)  = tai (a2,i1) ^ t1a_old (a1,i2)
            taiai  (a1,i1,a2,i2) *= -2.0
            taiai  (a1,i1,a2,i2) += T2old_aa   (a1,i1,a2,i2)
# RTAU like
            t1aiai (a1,i1,a2,i2)  = R1A (a2,i1) ^ t1a_old (a1,i2)
            t2pppp (a1,i1,a2,i2)  = tai (a2,i1) ^ t1ai (a1,i2)
            t1aiai (a1,i1,a2,i2) += t2pppp (a1,i1,a2,i2)
            t1aiai (a1,i1,a2,i2) *= -2.0
            t1aiai (a1,i1,a2,i2) += R2AA (a1,i1,a2,i2)
            DO i
               tiaia  (i,a1,i1,a)  = taiai  (a1,i1,a2,i2) * Liaia  (i,a2,i2,a)
               t1iaia (i,a1,i1,a)  = t1aiai (a1,i1,a2,i2) * L1iaia (i,a2,i2,a)
               tiaia  (i,a1,i1,a) += t1iaia (i,a1,i1,a)

               t1iiaa (i,i1,a,a1)  = tiaia (i,a1,i1,a)
               t2iiaa (i1,i,a1,a)  = t1iiaa (i,i1,a,a1)
               t3iiaa (i1,i,a,a1)  = t1iiaa (i,i1,a,a1)
               t4iiaa (i,i1,a1,a)  = t1iiaa (i,i1,a,a1)

               t3iiaa (i1,i,a,a1) *= -1.0
               t4iiaa (i,i1,a1,a) *= -1.0

               PREPARE  Dijab_aa (i,i1,a,a1) += t1iiaa (i,i1,a,a1)
               PREPARE  Dijab_aa (i1,i,a1,a) += t2iiaa (i1,i,a1,a)
               PREPARE  Dijab_aa (i1,i,a,a1) += t3iiaa (i1,i,a,a1)
               PREPARE  Dijab_aa (i,i1,a1,a) += t4iiaa (i,i1,a1,a)
            ENDDO i
         ENDDO i1
         DEALLOCATE  Liaia  (*,a2,i2,a)
         DEALLOCATE  L1iaia (*,a2,i2,a)
      ENDPARDO  a1, a2, i2, a

      PARDO  a1, b2, j2, a
         ALLOCATE  Liaia  (*,b2,j2,a)
         ALLOCATE  L1iaia (*,b2,j2,a)
         DO i
            REQUEST               L2R2_abba (i,b2,j2,a) i
            REQUEST               L2T2_abba (i,b2,j2,a) i
            Liaia  (i,b2,j2,a)  = L2R2_abba (i,b2,j2,a)
            L1iaia (i,b2,j2,a)  = L2T2_abba (i,b2,j2,a)
            Liaia  (i,b2,j2,a) *= 0.25
            L1iaia (i,b2,j2,a) *= 0.25
         ENDDO i
         DO i1
            REQUEST  T2old_ab (a1,i1,b2,j2) i1
            REQUEST  R2AB (a1,i1,b2,j2) i1
            DO i
               tiaia  (i,a1,i1,a)  = T2old_ab (a1,i1,b2,j2) * Liaia  (i,b2,j2,a)
               t1iaia (i,a1,i1,a)  = R2AB (a1,i1,b2,j2) * L1iaia (i,b2,j2,a)
               tiaia  (i,a1,i1,a) += t1iaia (i,a1,i1,a)

               t1iiaa (i,i1,a,a1)  = tiaia (i,a1,i1,a)
               t2iiaa (i1,i,a1,a)  = t1iiaa (i,i1,a,a1)
               t3iiaa (i1,i,a,a1)  = t1iiaa (i,i1,a,a1)
               t4iiaa (i,i1,a1,a)  = t1iiaa (i,i1,a,a1)

               t3iiaa (i1,i,a,a1) *= -1.0
               t4iiaa (i,i1,a1,a) *= -1.0

               PREPARE  Dijab_aa (i,i1,a,a1) += t1iiaa (i,i1,a,a1)
               PREPARE  Dijab_aa (i1,i,a1,a) += t2iiaa (i1,i,a1,a)
               PREPARE  Dijab_aa (i1,i,a,a1) += t3iiaa (i1,i,a,a1)
               PREPARE  Dijab_aa (i,i1,a1,a) += t4iiaa (i,i1,a1,a)
            ENDDO i
         ENDDO i1
         DEALLOCATE  Liaia  (*,b2,j2,a)
         DEALLOCATE  L1iaia (*,b2,j2,a)
      ENDPARDO  a1, b2, j2, a
#
# AB
#
      PARDO  b1, b2, j2, a 
         ALLOCATE  Liaia  (*,b2,j2,a)
         ALLOCATE  L1iaia (*,b2,j2,a)
         DO i
            REQUEST               L2R2_abba (i,b2,j2,a) i
            REQUEST               L2T2_abba (i,b2,j2,a) i
            Liaia  (i,b2,j2,a)  = L2R2_abba (i,b2,j2,a)
            L1iaia (i,b2,j2,a)  = L2T2_abba (i,b2,j2,a)
            Liaia  (i,b2,j2,a) *= 0.25
            L1iaia (i,b2,j2,a) *= 0.25
         ENDDO i
         DO j1
            REQUEST        T2old_aa (b1,j1,b2,j2) j1
            REQUEST        R2AA (b1,j1,b2,j2) j1
            GET            R1A  (b1,j2)
            GET            R1A  (b2,j1)
            GET            t1a_old (b2,j1)
            GET            t1a_old (b1,j2)
            tai  (b2,j1) = t1a_old (b2,j1)
            t1ai (b1,j2) = R1A  (b1,j2)
# TAU like  
            taiai  (b1,j1,b2,j2)  = tai (b2,j1) ^ t1a_old (b1,j2)
            taiai  (b1,j1,b2,j2) *= -2.0
            taiai  (b1,j1,b2,j2) += T2old_aa (b1,j1,b2,j2)
# RTAU like 
            t1aiai (b1,j1,b2,j2)  = R1A (b2,j1) ^ t1a_old (b1,j2)
            t2pppp (b1,j1,b2,j2)  = tai (b2,j1) ^ t1ai (b1,j2)
            t1aiai (b1,j1,b2,j2) += t2pppp (b1,j1,b2,j2)
            t1aiai (b1,j1,b2,j2) *= -2.0
            t1aiai (b1,j1,b2,j2) += R2AA (b1,j1,b2,j2)
            DO i
               tiaia  (i,b1,j1,a)  = taiai  (b1,j1,b2,j2) * Liaia  (i,b2,j2,a)
               t1iaia (i,b1,j1,a)  = t1aiai (b1,j1,b2,j2) * L1iaia (i,b2,j2,a)
               tiaia  (i,b1,j1,a) += t1iaia (i,b1,j1,a)
               t1iiaa (i,j1,a,b1)  = tiaia  (i,b1,j1,a)
               PREPARE  Dijab_ab (i,j1,a,b1) += t1iiaa (i,j1,a,b1)
            ENDDO i
         ENDDO j1
         DEALLOCATE  Liaia  (*,b2,j2,a)
         DEALLOCATE  L1iaia (*,b2,j2,a)
      ENDPARDO  b1, b2, j2, a

      PARDO  b1, a2, i2, a
         ALLOCATE  Liaia  (*,a2,i2,a)
         ALLOCATE  L1iaia (*,a2,i2,a)
         DO i  
            REQUEST               L2R2_aaaa (i,a2,i2,a) i
            REQUEST               L2T2_aaaa (i,a2,i2,a) i
            Liaia  (i,a2,i2,a)  = L2R2_aaaa (i,a2,i2,a)
            L1iaia (i,a2,i2,a)  = L2T2_aaaa (i,a2,i2,a)
            Liaia  (i,a2,i2,a) *= 0.25
            L1iaia (i,a2,i2,a) *= 0.25
         ENDDO i
         DO j1
            REQUEST  T2old_ab (a2,i2,b1,j1) j1
            REQUEST  R2AB (a2,i2,b1,j1) j1
            DO i
               tiaia  (i,b1,j1,a)  = Liaia  (i,a2,i2,a) * T2old_ab (a2,i2,b1,j1)
               t1iaia (i,b1,j1,a)  = L1iaia (i,a2,i2,a) * R2AB (a2,i2,b1,j1)
               tiaia  (i,b1,j1,a) += t1iaia (i,b1,j1,a)
               t1iiaa (i,j1,a,b1)  = tiaia  (i,b1,j1,a)
               PREPARE  Dijab_ab (i,j1,a,b1) += t1iiaa (i,j1,a,b1)
            ENDDO i
         ENDDO j1
         DEALLOCATE  Liaia  (*,a2,i2,a)
         DEALLOCATE  L1iaia (*,a2,i2,a)
      ENDPARDO  b1, a2, i2, a

      PARDO  a, a2, i2, b1
         ALLOCATE  Liaia  (*,a2,i2,b1)
         ALLOCATE  L1iaia (*,a2,i2,b1)
         DO j1
            REQUEST                 L2R2_abba (j1,a2,i2,b1) j1
            REQUEST                 L2T2_abba (j1,a2,i2,b1) j1
            Liaia  (j1,a2,i2,b1)  = L2R2_abba (j1,a2,i2,b1)
            L1iaia (j1,a2,i2,b1)  = L2T2_abba (j1,a2,i2,b1)
            Liaia  (j1,a2,i2,b1) *= 0.25
            L1iaia (j1,a2,i2,b1) *= 0.25
         ENDDO j1
         DO i
            REQUEST       T2old_aa (a,i,a2,i2) i
            REQUEST       R2AA (a,i,a2,i2) i
            GET           R1A  (a,i2)
            GET           R1A  (a2,i)
            GET           t1a_old (a,i2)
            GET           t1a_old (a2,i)
            tai  (a2,i) = t1a_old (a2,i)
            t1ai (a,i2) = R1A  (a,i2)
# TAU like
            taiai  (a,i,a2,i2)  = tai (a2,i) ^ t1a_old (a,i2)
            taiai  (a,i,a2,i2) *= -2.0
            taiai  (a,i,a2,i2) += T2old_aa  (a,i,a2,i2)
# RTAU like
            t1aiai (a,i,a2,i2)  = R1A (a2,i) ^ t1a_old (a,i2)
            t2pppp (a,i,a2,i2)  = tai (a2,i) ^ t1ai (a,i2)
            t1aiai (a,i,a2,i2) += t2pppp (a,i,a2,i2)
            t1aiai (a,i,a2,i2) *= -2.0
            t1aiai (a,i,a2,i2) += R2AA (a,i,a2,i2)
            DO j1
               tiaia  (j1,a,i,b1)  = taiai  (a,i,a2,i2) * Liaia  (j1,a2,i2,b1)
               t1iaia (j1,a,i,b1)  = t1aiai (a,i,a2,i2) * L1iaia (j1,a2,i2,b1)
               tiaia  (j1,a,i,b1) += t1iaia (j1,a,i,b1)
               tiiaa  (i,j1,a,b1)  = tiaia  (j1,a,i,b1)
               PREPARE  Dijab_ab (i,j1,a,b1) += tiiaa (i,j1,a,b1)
            ENDDO j1
         ENDDO i
         DEALLOCATE  Liaia  (*,a2,i2,a)
         DEALLOCATE  L1iaia (*,a2,i2,a)
      ENDPARDO  a, a2, i2, b1

      PARDO  a, b2, j2, b1
         ALLOCATE  Liaia  (*,b2,j2,b1)
         ALLOCATE  L1iaia (*,b2,j2,b1)
         DO j1
            REQUEST                 L2R2_aaaa (j1,b2,j2,b1) j1
            REQUEST                 L2T2_aaaa (j1,b2,j2,b1) j1
            Liaia  (j1,b2,j2,b1)  = L2R2_aaaa (j1,b2,j2,b1)
            L1iaia (j1,b2,j2,b1)  = L2T2_aaaa (j1,b2,j2,b1)
            Liaia  (j1,b2,j2,b1) *= 0.25
            L1iaia (j1,b2,j2,b1) *= 0.25
         ENDDO j1
         DO i
            REQUEST  T2old_ab (a,i,b2,j2) i
            REQUEST  R2AB (a,i,b2,j2) i
            DO j1
               tiaia  (j1,a,i,b1)  = T2old_ab (a,i,b2,j2) * Liaia  (j1,b2,j2,b1)
               t1iaia (j1,a,i,b1)  = R2AB (a,i,b2,j2) * L1iaia (j1,b2,j2,b1)
               tiaia  (j1,a,i,b1) += t1iaia (j1,a,i,b1)
               tiiaa  (i,j1,a,b1)  = tiaia  (j1,a,i,b1)
               PREPARE  Dijab_ab (i,j1,a,b1) += tiiaa (i,j1,a,b1)
            ENDDO j1
         ENDDO i
         DEALLOCATE  Liaia  (*,b2,j2,a)
         DEALLOCATE  L1iaia (*,b2,j2,a)
      ENDPARDO  a, b2, j2, b1

      PARDO  a, b2, i2, b1
         ALLOCATE  Liiaa  (*,i2,b2,b1)
         ALLOCATE  L1iiaa (*,i2,b2,b1)
         DO i
            REQUEST                L2R2_abab (i,b1,i2,b2) i
            REQUEST                L2T2_abab (i,b1,i2,b2) i
            Liiaa  (i,i2,b2,b1)  = L2R2_abab (i,b1,i2,b2)
            L1iiaa (i,i2,b2,b1)  = L2T2_abab (i,b1,i2,b2)
            Liiaa  (i,i2,b2,b1) *= 0.25
            L1iiaa (i,i2,b2,b1) *= 0.25
         ENDDO i
         DO j1 
            REQUEST        T2old_ab (a,i2,b2,j1) j1
            REQUEST        R2AB (a,i2,b2,j1) j1
            GET            R1A  (a,i2)
            GET            R1A  (b2,j1)
            GET            t1a_old (a,i2)
            GET            t1a_old (b2,j1)
            tai  (b2,j1) = t1a_old (b2,j1)
            t1ai (a,i2)  = R1A  (a,i2)
# TAU like
            taiai  (a,i2,b2,j1)  = t1a_old (a,i2) ^ tai (b2,j1)
            taiai  (a,i2,b2,j1) *= 2.0
            taiai  (a,i2,b2,j1) += T2old_ab   (a,i2,b2,j1)
# RTAU like
            t1aiai (a,i2,b2,j1)  = t1a_old (a,i2) ^ R1A (b2,j1)
            t2pppp (a,i2,b2,j1)  = t1ai (a,i2) ^ tai (b2,j1)
            t1aiai (a,i2,b2,j1) += t2pppp (a,i2,b2,j1)
            t1aiai (a,i2,b2,j1) *= 2.0
            t1aiai (a,i2,b2,j1) += R2AB (a,i2,b2,j1)
            DO i
               tiaia  (i,a,j1,b1)  = taiai  (a,i2,b2,j1) * Liiaa  (i,i2,b2,b1)
               t1iaia (i,a,j1,b1)  = t1aiai (a,i2,b2,j1) * L1iiaa (i,i2,b2,b1)
               tiaia  (i,a,j1,b1) += t1iaia (i,a,j1,b1)
               t1iiaa (i,j1,a,b1)  = tiaia (i,a,j1,b1)
               PREPARE  Dijab_ab (i,j1,a,b1) += t1iiaa (i,j1,a,b1)
            ENDDO i
         ENDDO j1
         DEALLOCATE  Liiaa  (*,i2,b2,b1)
         DEALLOCATE  L1iiaa (*,i2,b2,b1)
      ENDPARDO  a, b2, i2, b1

      PARDO  b1, a2, j2, a
         ALLOCATE  Liaia  (*,a2,j2,a)
         ALLOCATE  L1iaia (*,a2,j2,a)
         DO j1
            REQUEST                L2R2_abab (j1,a,j2,a2) j1
            REQUEST                L2T2_abab (j1,a,j2,a2) j1
            Liaia  (j1,a2,j2,a)  = L2R2_abab (j1,a,j2,a2)
            L1iaia (j1,a2,j2,a)  = L2T2_abab (j1,a,j2,a2)
            Liaia  (j1,a2,j2,a) *= 0.25
            L1iaia (j1,a2,j2,a) *= 0.25
         ENDDO j1
         DO i
            REQUEST        T2old_ab (a2,i,b1,j2) i
            REQUEST        R2AB (a2,i,b1,j2) i
            GET            R1A  (a2,i)
            GET            R1A  (b1,j2)
            GET            t1a_old (a2,i)
            GET            t1a_old (b1,j2)
            tai  (b1,j2) = t1a_old (b1,j2)
            t1ai (a2,i)  = R1A  (a2,i)
# TAU like
            taiai  (a2,i,b1,j2)  = t1a_old (a2,i) ^ tai (b1,j2)
            taiai  (a2,i,b1,j2) *= 2.0
            taiai  (a2,i,b1,j2) += T2old_ab (a2,i,b1,j2)
# RTAU like
            t1aiai (a2,i,b1,j2)  = t1a_old (a2,i) ^ R1A (b1,j2)
            t2pppp (a2,i,b1,j2)  = t1ai (a2,i) ^ tai (b1,j2)
            t1aiai (a2,i,b1,j2) += t2pppp (a2,i,b1,j2)
            t1aiai (a2,i,b1,j2) *= 2.0
            t1aiai (a2,i,b1,j2) += R2AB (a2,i,b1,j2)
            DO j1
               tpppp  (j1,i,b1,a)  = taiai  (a2,i,b1,j2) * Liaia  (j1,a2,j2,a)
               t1pppp (j1,i,b1,a)  = t1aiai (a2,i,b1,j2) * L1iaia (j1,a2,j2,a)
               tpppp  (j1,i,b1,a) += t1pppp (j1,i,b1,a)
               t1iiaa (i,j1,a,b1)  = tpppp  (j1,i,b1,a)
               PREPARE  Dijab_ab (i,j1,a,b1) += t1iiaa (i,j1,a,b1)
            ENDDO j1
         ENDDO i
         DEALLOCATE  Liaia  (*,a2,j2,a)
         DEALLOCATE  L1iaia (*,a2,j2,a)
      ENDPARDO  b1, a2, j2, a
#
#
#          ...ready!
#     
#     
      ENDPROC  DIJAB_EOM
#-------------------------------------------------------------------------



#-------------------------------------------------------------------------
#
#    ------------------
      PROC  PRINT_DAIBC
#    ------------------
#
#
      esum1 = 0.0
      esum2 = 0.0
      esum3 = 0.0
      energy_aa = 0.0
      energy_ab = 0.0
      energy_ba = 0.0

      EXECUTE  SERVER_BARRIER
      PARDO  a, a2, a1, i
         REQUEST             Dabci_aaaa (a,a2,a1,i) a
         tpppp (a,a2,a1,i) = Dabci_aaaa (a,a2,a1,i)
         etemp = tpppp (a,a2,a1,i) * tpppp (a,a2,a1,i)
         etemp *= 0.5
         esum1 += etemp
#         EXECUTE  DUMP_AMP  tpppp
      ENDPARDO  a, a2, a1, i
      EXECUTE  SERVER_BARRIER
      PARDO  a, a2, a1, i
         REQUEST             Dabci_abab (a,a2,a1,i) a
         tpppp (a,a2,a1,i) = Dabci_abab (a,a2,a1,i)
         etemp = tpppp (a,a2,a1,i) * tpppp (a,a2,a1,i)
         esum2 += etemp
#         EXECUTE  DUMP_AMP  tpppp
      ENDPARDO  a, a2, a1, i
      EXECUTE  SERVER_BARRIER

      COLLECTIVE  energy_aa += esum1
      COLLECTIVE  energy_ab += esum2
     #COLLECTIVE  energy_ba += esum3

      EXECUTE  SIP_BARRIER

     #energy_bb = energy_aa
      energy += energy_aa
     #energy += energy_bb
      energy += energy_ab
     #energy += energy_ba
      EXECUTE  SIP_BARRIER

      EXECUTE  PRINT_SCALAR  energy_ab
      EXECUTE  PRINT_SCALAR  energy_aa
     #EXECUTE  PRINT_SCALAR  energy_bb
     #EXECUTE  PRINT_SCALAR  energy_ba
      EXECUTE  PRINT_SCALAR  energy
#
#
#          ...ready!
#     
#     
      ENDPROC  PRINT_DAIBC
#-------------------------------------------------------------------------



#-------------------------------------------------------------------------
#
#    ------------------
      PROC  PRINT_DIJKA
#    ------------------
#
#
      esum1 = 0.0
      esum2 = 0.0
      esum3 = 0.0
      energy_aa = 0.0
      energy_ab = 0.0
      energy_ba = 0.0

      EXECUTE  SERVER_BARRIER
      PARDO  i, i1, i2, a
         REQUEST             Dijka_aaaa (i,i1,i2,a) i
         tpppp (i,i1,i2,a) = Dijka_aaaa (i,i1,i2,a)
         etemp = tpppp (i,i1,i2,a) * tpppp (i,i1,i2,a)
         etemp *= 0.5
         esum1 += etemp
#         EXECUTE  DUMP_AMP  tpppp
      ENDPARDO  i, i1, i2, a
      EXECUTE  SERVER_BARRIER
      PARDO  i, i1, i2, a
         REQUEST             Dijka_abab (i,i1,i2,a) i
         tpppp (i,i1,i2,a) = Dijka_abab (i,i1,i2,a)
         etemp = tpppp (i,i1,i2,a) * tpppp (i,i1,i2,a)
         esum2 += etemp
#         EXECUTE  DUMP_AMP  tpppp
      ENDPARDO  i, i1, i2, a
      EXECUTE  SERVER_BARRIER

      COLLECTIVE  energy_aa += esum1
      COLLECTIVE  energy_ab += esum2
     #COLLECTIVE  energy_ba += esum2

      EXECUTE  SIP_BARRIER

     #energy_bb = energy_aa
      energy += energy_aa
     #energy += energy_bb
      energy += energy_ab
     #energy += energy_ba
      EXECUTE  SIP_BARRIER

      EXECUTE  PRINT_SCALAR  energy_ab
      EXECUTE  PRINT_SCALAR  energy_aa
     #EXECUTE  PRINT_SCALAR  energy_bb
     #EXECUTE  PRINT_SCALAR  energy_ba
      EXECUTE  PRINT_SCALAR  energy
#
#
#          ...ready!
#     
#     
      ENDPROC  PRINT_DIJKA
#-------------------------------------------------------------------------




#-------------------------------------------------------------------------
#        
#    ------------------
      PROC  PRINT_DIJAB
#    ------------------
#
#
      esum1 = 0.0
      esum2 = 0.0
      energy_aa = 0.0
      energy_ab = 0.0

      EXECUTE  SERVER_BARRIER
      PARDO  i, i1, a, a1
         REQUEST              Dijab_aa (i,i1,a,a1) i
         taiai (a,i,a1,i1)  = Dijab_aa (i,i1,a,a1)
         etemp = taiai (a,i,a1,i1) * taiai (a,i,a1,i1)
         etemp *= 0.25
         esum1 += etemp
        #taiai (a,i,a1,i1) *= 2.0
#         EXECUTE  DUMP_AMP  taiai (a,i,a1,i1)
      ENDPARDO  i, i1, a, a1
      EXECUTE  SERVER_BARRIER
      PARDO  i, i1, a, a1
         REQUEST              Dijab_ab (i,i1,a,a1) i
         taiai (a,i,a1,i1)  = Dijab_ab (i,i1,a,a1)
         etemp = taiai (a,i,a1,i1) * taiai (a,i,a1,i1)
         esum2 += etemp
        #taiai (a,i,a1,i1) *= 2.0
#         EXECUTE  DUMP_AMP  taiai (a,i,a1,i1)
      ENDPARDO  i, i1, a, a1
      EXECUTE  SERVER_BARRIER

      COLLECTIVE  energy_aa += esum1
      COLLECTIVE  energy_ab += esum2

      EXECUTE  SIP_BARRIER
      energy_aa *= 16.0
      energy_ab *= 16.0

      #nergy_bb = energy_aa
      energy += energy_aa
      #nergy += energy_bb
      energy += energy_ab
      EXECUTE  SIP_BARRIER

      EXECUTE  PRINT_SCALAR  energy_ab
      EXECUTE  PRINT_SCALAR  energy_aa
     #EXECUTE  PRINT_SCALAR  energy_bb
      EXECUTE  PRINT_SCALAR  energy
#
#
#          ...ready!
#     
#     
      ENDPROC  PRINT_DIJAB
#-------------------------------------------------------------------------



# --------------------------------------------------------------------------- 
      PROC DIJAB 
#     ----------- 
#
# Create gamma arrays and one-particle intermediates 
# Note that Dii and Daa are computed in DIJABAA and 
# Djj and Dbb are computed in DIJABBB. 
# -------------------------------------------------- 
#
           CALL DIJAB_EOM

      EXECUTE  SERVER_BARRIER
      PARDO  a, a1, i, i1
         REQUEST              Dijab_aa (i,i1,a,a1) a
         tpppp (i,i1,a,a1)  = Dijab_aa (i,i1,a,a1)
         tpppp (i,i1,a,a1) *= 0.25
         PREPARE  Dijab_aa_1 (i,i1,a,a1) = tpppp (i,i1,a,a1)
      ENDPARDO  a, a1, i, i1

      PARDO  a, b, i, j
         REQUEST            Dijab_ab (i,j,a,b) a
         tpppp (i,j,a,b)  = Dijab_ab (i,j,a,b)
         tpppp (i,j,a,b) *= 0.25
         PREPARE  Dijab_ab_1 (i,j,a,b) = tpppp (i,j,a,b)
      ENDPARDO  a, b, i, j

      EXECUTE  SERVER_BARRIER

      PARDO  a, a1, i, i1
         REQUEST             Dijab_aa_1 (i,i1,a,a1) a
         tpppp (i,i1,a,a1) = Dijab_aa_1 (i,i1,a,a1)
         PREPARE  Dijab_aa (i,i1,a,a1) = tpppp (i,i1,a,a1)
      ENDPARDO  a, a1, i, i1

      PARDO  a, b, i, j
         REQUEST           Dijab_ab_1 (i,j,a,b) a
         tpppp (i,j,a,b) = Dijab_ab_1 (i,j,a,b)
         PREPARE  Dijab_ab (i,j,a,b) = tpppp (i,j,a,b)
      ENDPARDO  a, b, i, j
      EXECUTE  SERVER_BARRIER

           CALL DIJABAA 
           CALL DIJABAB 
#
      ENDPROC DIJAB 
#     ------------- 
#
# --------------------------------------------------------------------------- 
#
# Expression programmed: 
#
# D^{ij}_{kl} = 1/16 P_+(ij,kl) \lambda^{ij}_{ef} \tau^{ef}_{kl} 
# Note that 4* result is kept to be consistent with aces. 
#
# Equivalent to gamma3 
#
# ---------------------------------------------------------------------------- 
#
      PROC DIJKLAAAA 
#     -------------- 
#
      PARDO a, a1, i, i1  
#
            REQUEST A2old_aa(i,a,i1,a1) a1  
            Tiiaa(i,i1,a,a1) = A2old_aa(i,a,i1,a1)  
#
            DO i2 
            DO i3 
#
               REQUEST Tau_aa(a,i2,a1,i3) i3  
               Taaii(a,a1,i2,i3) = Tau_aa(a,i2,a1,i3) 
#
#              Tiiii(i,i1,i2,i3)           = A2old_aa(i,a,i1,a1)*Tau_aa(a,i2,a1,i3) 
               Tiiii(i,i1,i2,i3)           = Tiiaa(i,i1,a,a1)*Taaii(a,a1,i2,i3)  
#
               Tiiii(i,i1,i2,i3)          *= 0.25  
               T1iiii(i2,i3,i,i1)          = Tiiii(i,i1,i2,i3) 
               PREPARE Dijkl_aa(i,i1,i2,i3)   += Tiiii(i,i1,i2,i3) 
               PREPARE Dijkl_aa(i2,i3,i,i1)   += T1iiii(i2,i3,i,i1) 
#
               T1iiii(i2,i3,i,i1)         *= 2.0   
               PREPARE Vijmn_aaaa(i2,i3,i,i1) += T1iiii(i2,i3,i,i1)  
#
            ENDDO i3 
            ENDDO i2 
#
      ENDPARDO a, a1, i, i1  
#
      ENDPROC DIJKLAAAA 
#     ----------------- 
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
# Expression programmed: 
#
# D^{iJ}_{kL} = 1/8 P_+(iJ,kL) \lambda^{iJ}_{eF} \tau^{eF}_{kL} 
#
# ---------------------------------------------------------------------------- 
#
      PROC DIJKLABAB 
#     -------------- 
#
      PARDO a, b, i, j  
#
            REQUEST A2old_ab(i,a,j,b) b  
            Tijab(i,j,a,b) = A2old_ab(i,a,j,b) 
#
            DO i1 
            DO j1 
#
               REQUEST Tau_ab(a,i1,b,j1) j1  
               Tabij(a,b,i1,j1) = Tau_ab(a,i1,b,j1) 
#
#              Tijij(i,j,i1,j1)           = A2old_ab(i,a,j,b)*Tau_ab(a,i1,b,j1) 
               Tijij(i,j,i1,j1)           = Tijab(i,j,a,b)*Tabij(a,b,i1,j1)   
#
               Tijij(i,j,i1,j1)          *= 0.5  
               T1ijij(i1,j1,i,j)          = Tijij(i,j,i1,j1) 
               PREPARE Dijkl_ab(i,j,i1,j1)   += Tijij(i,j,i1,j1) 
               PREPARE Dijkl_ab(i1,j1,i,j)   += T1ijij(i1,j1,i,j) 
#
               T1ijij(i1,j1,i,j)         *= 2.0  
               PREPARE Vijmn_abab(i1,j1,i,j) += T1ijij(i1,j1,i,j) 
#
            ENDDO j1 
            ENDDO i1 
#
      ENDPARDO a, b, i, j  
#
      ENDPROC DIJKLABAB 
#     ----------------- 
#
#----------------------------------------------------------------------------
#
#     --------------
      PROC DIJKL_EOM
#     --------------
#
#
#        kl          ef    e  f    e  f    kl
#     4 G   = 1/2 ( r   + r  t  + t  r  ) l
#        ij          ij    i  j    i  j    ef
#
#
      PARDO  i2, a2, a3, i
         ALLOCATE  Liiaa (i,*,a2,a3)
         DO i1
            REQUEST               L2AA (i,a2,i1,a3) i1
            Liiaa (i,i1,a2,a3)  = L2AA (i,a2,i1,a3)
            Liiaa (i,i1,a2,a3) *= 0.25
         ENDDO i1
         DO i3
            REQUEST                RTAU_aa (a2,i2,a3,i3) i3
            taaii  (a2,a3,i2,i3) = RTAU_aa (a2,i2,a3,i3)
            DO i1
               tiiii  (i,i1,i2,i3)  = Liiaa (i,i1,a2,a3) * taaii (a2,a3,i2,i3)
               t1iiii (i2,i3,i,i1)  = tiiii (i,i1,i2,i3)
               PREPARE  Dijkl_aa (i,i1,i2,i3) += tiiii  (i,i1,i2,i3)
               PREPARE  Dijkl_aa (i2,i3,i,i1) += t1iiii (i2,i3,i,i1)
            ENDDO i1
         ENDDO i3
         DEALLOCATE  Liiaa (i,*,a2,a3)
      ENDPARDO  i2, a2, a3, i

      PARDO  j3, a2, b3, i
         ALLOCATE  Lijab (i,*,a2,b3)
         DO j1
            REQUEST               L2AB (i,a2,j1,b3) j1
            Lijab (i,j1,a2,b3)  = L2AB (i,a2,j1,b3) 
            Lijab (i,j1,a2,b3) *= 0.5
         ENDDO j1 
         DO i2
            REQUEST               RTAU_ab (a2,i2,b3,j3) i2
            tabij (a2,b3,i2,j3) = RTAU_ab (a2,i2,b3,j3)
            DO j1
               tijij  (i,j1,i2,j3) = Lijab (i,j1,a2,b3) * tabij (a2,b3,i2,j3)
               t1ijij (i2,j3,i,j1) = tijij (i,j1,i2,j3)
               PREPARE  Dijkl_ab (i,j1,i2,j3) += tijij  (i,j1,i2,j3)
               PREPARE  Dijkl_ab (i2,j3,i,j1) += t1ijij (i2,j3,i,j1)
            ENDDO j1
         ENDDO i2
         DEALLOCATE  Lijab (i,*,a2,b3)
      ENDPARDO  j3, a2, b3, i
#
#
#     ...ready!
#
#
      ENDPROC  DIJKL_EOM
#----------------------------------------------------------------------------



# ---------------------------------------------------------------------------- 
#
      PROC DIJKL 
#     ---------- 
#
      CALL DIJKL_EOM
#      CALL  PRINT_DIJKL

      CALL DIJKLAAAA 
      CALL DIJKLABAB 
#
      ENDPROC DIJKL 
#     ------------- 
#
# ---------------------------------------------------------------------------- 



#-------------------------------------------------------------------------
#
#    ------------------
      PROC  PRINT_DIJKL
#    ------------------
#
#
      energy = 0.0
      esum1 = 0.0
      esum2 = 0.0
      energy_aa = 0.0
      energy_ab = 0.0

      EXECUTE  SERVER_BARRIER
      PARDO  i, i1, i2, i3
         REQUEST               Dijkl_aa (i,i1,i2,i3) i
         tiiii (i,i1,i2,i3)  = Dijkl_aa (i,i1,i2,i3)
         etemp  = tiiii (i,i1,i2,i3) * tiiii (i,i1,i2,i3)
         etemp *= 0.25
         esum1 += etemp
#         EXECUTE  DUMP_AMP  tiiii
      ENDPARDO  i, i1, i2, i3
      EXECUTE  SERVER_BARRIER
      PARDO  i, i1, i2, i3
         REQUEST               Dijkl_ab (i,i1,i2,i3) i
         tiiii (i,i1,i2,i3)  = Dijkl_ab (i,i1,i2,i3)
         etemp  = tiiii (i,i1,i2,i3) * tiiii (i,i1,i2,i3)
         esum2 += etemp
#         EXECUTE  DUMP_AMP  tiiii
      ENDPARDO  i, i1, i2, i3
      EXECUTE  SERVER_BARRIER

      COLLECTIVE  energy_aa += esum1
      COLLECTIVE  energy_ab += esum2

      EXECUTE  SIP_BARRIER

     #energy_bb = energy_aa
      energy  = energy_aa
     #energy += energy_bb
      energy += energy_ab
      EXECUTE  SIP_BARRIER

      EXECUTE  PRINT_SCALAR  energy_ab
      EXECUTE  PRINT_SCALAR  energy_aa
     #EXECUTE  PRINT_SCALAR  energy_bb
      EXECUTE  PRINT_SCALAR  energy
#
#
#          ...ready!
#     
#     
      ENDPROC  PRINT_DIJKL
#-------------------------------------------------------------------------



#-------------------------------------------------------------------------
#
#    ------------------
      PROC  PRINT_DIBJA
#    ------------------
#
#
      esum1 = 0.0
      esum2 = 0.0
      esum3 = 0.0
      esum4 = 0.0
      energy_aa = 0.0
      energy_ab = 0.0
      energy_ba = 0.0
      energy_abba = 0.0

      EXECUTE  SERVER_BARRIER
      PARDO  i, a, i1, a1
         REQUEST             Dibja_aaaa (i,a,i1,a1) i
         tpppp (i,a,i1,a1) = Dibja_aaaa (i,a,i1,a1)
         etemp = tpppp (i,a,i1,a1) * tpppp (i,a,i1,a1)
         esum1 += etemp
#         EXECUTE  DUMP_AMP  tpppp
      ENDPARDO  i, a, i1, a1
      EXECUTE  SERVER_BARRIER
      PARDO  i, a, i1, a1
         REQUEST             Dibja_abab (i,a,i1,a1) i
         tpppp (i,a,i1,a1) = Dibja_abab (i,a,i1,a1)
         etemp = tpppp (i,a,i1,a1) * tpppp (i,a,i1,a1)
         esum2 += etemp
#         EXECUTE  DUMP_AMP  tpppp
      ENDPARDO  i, a, i1, a1
      EXECUTE  SERVER_BARRIER
      PARDO  i, a, i1, a1
         REQUEST              Dibja_abba (i,a1,i1,a) i
         REQUEST              Dibja_abba (i1,a,i,a1) i
         tpppp (i1,a,i,a1)  = Dibja_abba (i,a1,i1,a)
        #tpppp (i1,a,i,a1) += Dibja_abba (i1,a,i,a1)
        #tpppp (i1,a,i,a1) *= 0.5
         etemp = tpppp (i1,a,i,a1) * tpppp (i1,a,i,a1)
         esum4 += etemp
#         EXECUTE  DUMP_AMP  tpppp
      ENDPARDO  i, a, i1, a1
      EXECUTE  SERVER_BARRIER

      COLLECTIVE  energy_aa += esum1
      COLLECTIVE  energy_ab += esum2
     #COLLECTIVE  energy_ba += esum3
      COLLECTIVE  energy_abba += esum4

      EXECUTE  SIP_BARRIER

     #energy_bb = energy_aa
      energy += energy_aa
     #energy += energy_bb
      energy += energy_ab
     #energy += energy_ba
      energy += energy_abba
      EXECUTE  SIP_BARRIER

      EXECUTE  PRINT_SCALAR  energy_aa
      EXECUTE  PRINT_SCALAR  energy_ab
      EXECUTE  PRINT_SCALAR  energy_abba
     #EXECUTE  PRINT_SCALAR  energy_bb
     #EXECUTE  PRINT_SCALAR  energy_ba
      EXECUTE  PRINT_SCALAR  energy
#
#
#          ...ready!
#     
#     
      ENDPROC  PRINT_DIBJA
#-------------------------------------------------------------------------
#
# Equivalent to gamma4*4 --> factor of 4 to match aces  
#
# ----------------------------------------------------------------------------
#
      PROC DIBJAAAAA 
#     -------------- 
#
      PARDO a, a1, i, i1 
#
            GET                              t1a_old(a,i) 
            GET                              a1a_old(i1,a1) 
# 
            Tiaia(i,a1,i1,a)               = t1a_old(a,i)^a1a_old(i1,a1)    
            Tiaia(i,a1,i1,a)              *= 0.5     
            TAiaia(i1,a,i,a1)              = Tiaia(i,a1,i1,a)  
#
            PREPARE Dibja_aaaa(i,a1,i1,a) += Tiaia(i,a1,i1,a)  
            PREPARE Dibja_aaaa(i1,a,i,a1) += TAiaia(i1,a,i,a1)  
#
      ENDPARDO a, a1, i, i1 
#
      PARDO a, i, a2, i2  
#
            REQUEST     T2old_aa(a,i,a2,i2) i2  
            GET         t1a_old(a,i2) 
            GET         t1a_old(a2,i) 
            tai(a,i2) = t1a_old(a,i2) 
#
            DO i1  
#
               DO a1 
#
                  REQUEST                          A2old_aa(i1,a1,i2,a2) a2   
#
                  Tiaai(i2,a2,a,i)               = T2old_aa(a,i,a2,i2) 
                  T1iaai(i1,a1,a,i)              = A2old_aa(i1,a1,i2,a2)*Tiaai(i2,a2,a,i)  
                  Tiaia(i,a1,i1,a)               = T1iaai(i1,a1,a,i)  
                  Tiaia(i,a1,i1,a)              *= 0.5   
                  TAiaia(i1,a,i,a1)              = Tiaia(i,a1,i1,a) 
                  PREPARE Vibja_aaaa(i,a1,i1,a) += Tiaia(i,a1,i1,a) 
                  PREPARE Dibja_aaaa(i,a1,i1,a) += Tiaia(i,a1,i1,a)  
                  PREPARE Dibja_aaaa(i1,a,i,a1) += TAiaia(i1,a,i,a1)  
#
                  T1iaia(i2,a2,i,a)             = t1a_old(a2,i)^tai(a,i2)
#
#                 T1iaia(i,a1,i1,a)             = A2old_aa(i1,a1,i2,a2)*Taiai(a2,i,a,i2) 
                  T3iaia(i1,a1,i,a)             = A2old_aa(i1,a1,i2,a2)*T1iaia(i2,a2,i,a) 
                  Tiaia(i,a1,i1,a)              = T3iaia(i1,a1,i,a)  
                  Tiaia(i,a1,i1,a)             *= -0.5 
                  TAiaia(i1,a,i,a1)             = Tiaia(i,a1,i1,a)  
#
                  PREPARE Dibja_aaaa(i,a1,i1,a) += Tiaia(i,a1,i1,a)  
                  PREPARE Dibja_aaaa(i1,a,i,a1) += TAiaia(i1,a,i,a1)  
#
               ENDDO a1 
            ENDDO i1 
#
      ENDPARDO a, i, a2, i2  
#
      PARDO a, i, b, j  
#
            REQUEST T2old_ab(a,i,b,j)j  
#
            DO i1 
            DO a1 
#
               REQUEST                          A2old_ab(i1,a1,j,b) b   
#
               Tjbia(j,b,i,a)                 = T2old_ab(a,i,b,j) 
               T2iaia(i1,a1,i,a)              = A2old_ab(i1,a1,j,b)*Tjbia(j,b,i,a)  
               Tiaia(i,a1,i1,a)               = T2iaia(i1,a1,i,a) 
               Tiaia(i,a1,i1,a)              *= 0.5   
               TAiaia(i1,a,i,a1)              = Tiaia(i,a1,i1,a)  
#
               PREPARE Vibja_aaaa(i,a1,i1,a) += Tiaia(i,a1,i1,a) 
               PREPARE Dibja_aaaa(i,a1,i1,a) += Tiaia(i,a1,i1,a)  
               PREPARE Dibja_aaaa(i1,a,i,a1) += TAiaia(i1,a,i,a1)  
#
            ENDDO a1  
            ENDDO i1 
#
      ENDPARDO a, i, b, j  

      ENDPROC DIBJAAAAA 
#     ------------------ 
#
# The D(iB,jA) block of the two-particle density matrix is calculated. 
#
      PROC DIBJAABAB 
#     -------------- 
#
      PARDO i, b1, j, a  
#
            REQUEST T2old_ab(a,i,b1,j) j  
#
            DO i1 
            DO b 
#
               REQUEST                          A2old_ab(i1,a,j,b) j 
#
               Tibib(i1,b1,i,b)               = A2old_ab(i1,a,j,b)*T2old_ab(a,i,b1,j) 
               Tibib(i1,b1,i,b)              *= 0.5   
#
               TAibib(i,b,i1,b1)              = Tibib(i1,b1,i,b)  
#
               PREPARE Vibja_abab(i,b,i1,b1) += TAibib(i,b,i1,b1) 
               PREPARE Dibja_abab(i1,b1,i,b) += Tibib(i1,b1,i,b) 
               PREPARE Dibja_abab(i,b,i1,b1) += TAibib(i,b,i1,b1) 
#
            ENDDO b 
            ENDDO i1 
#
      ENDPARDO i, b1, j, a  
#
      PARDO i1, b, j, a 
#
            REQUEST A2old_ab(i1,a,j,b) j 
#
            DO i 
#
               GET        t1a_old(a,i) 
               tai(a,i) = t1a_old(a,i) 
#
               DO b1 
#
                  GET                              t1a_old(b1,j) 
#
                  Taibj(a,i,b1,j)                = tai(a,i)^t1a_old(b1,j)
                  Tibib(i1,b1,i,b)               = A2old_ab(i1,a,j,b)*Taibj(a,i,b1,j) 
                  Tibib(i1,b1,i,b)              *= 0.5   
#
                  T2ibib(i,b,i1,b1)              = Tibib(i1,b1,i,b)  
                  TAibib(i,b,i1,b1)              = T2ibib(i,b,i1,b1)  
#
                  PREPARE Dibja_abab(i1,b1,i,b) += Tibib(i1,b1,i,b) 
                  PREPARE Dibja_abab(i,b,i1,b1) += TAibib(i,b,i1,b1) 
#
               ENDDO b1 
            ENDDO i 
#
      ENDPARDO i1, b, j, a  

      ENDPROC DIBJAABAB 
#     ------------------ 
#
      PROC DIBJAABBA 
#     --------------- 
#
      PARDO i, a, b, j 
#
            GET a1a_old(j,b) 
            GET t1a_old(a,i) 
            GET a1a_old(i,a) 
            GET t1a_old(b,j) 
#
            Tiajb(i,a,j,b)               = t1a_old(a,i)^a1a_old(j,b) 
            T1iajb(i,a,j,b)              = a1a_old(i,a)^t1a_old(b,j) 
            Tiajb(i,a,j,b)              += T1iajb(i,a,j,b) 
#
            Tiajb(i,a,j,b)              *= 0.5 
            Tibja(i,b,j,a)               = Tiajb(i,a,j,b) 
            PREPARE Dibja_abba(i,b,j,a) += Tibja(i,b,j,a)  
#
      ENDPARDO i, a, b, j 
#
      PARDO a, i, a1, i1  
#
            REQUEST T2old_aa(a,i,a1,i1) i1  
#
            DO j 
            DO b 
#
               REQUEST                        A2old_ab(i1,a1,j,b) i1  
               Tiajb(i,a,j,b)               = T2old_aa(a,i,a1,i1)*A2old_ab(i1,a1,j,b)  
               Tibja(i,b,j,a)               = Tiajb(i,a,j,b) 
               Tibja(i,b,j,a)              *= 0.5 
               PREPARE Vibja_abba(i,b,j,a) += Tibja(i,b,j,a)  
               PREPARE Dibja_abba(i,b,j,a) += Tibja(i,b,j,a)  
#
            ENDDO b 
            ENDDO j 
#
      ENDPARDO a, i, a1, i1  
#
      PARDO b, j, a1, i1  
#
            REQUEST T2old_ab(a1,i1,b,j) j  
            REQUEST A2old_ab(i1,a1,j,b) j  
#
            DO i 
            DO a 
#
               REQUEST A2old_aa(i1,a1,i,a) a  
               GET t1a_old(a1,i) 
               GET t1a_old(a,i1) 
               tai(a,i1) = t1a_old(a,i1) 
#
#              T1iajb(i,a,j,b)          = T2old_ab(a1,i1,b,j)*A2old_aa(i1,a1,i,a)  
               Tiaai(i,a,a1,i1)         = A2old_aa(i1,a1,i,a) 
               Tiabj(i,a,b,j)           = Tiaai(i,a,a1,i1)*T2old_ab(a1,i1,b,j)    
               Tiajb(i,a,j,b)           = Tiabj(i,a,b,j) 
#
               Tiaia(i,a,i1,a1)         = t1a_old(a1,i)^tai(a,i1) 
               T1iajb(i,a,j,b)          = Tiaia(i,a,i1,a1)*A2old_ab(i1,a1,j,b) 
               Tiajb(i,a,j,b)          -= T1iajb(i,a,j,b) 
#
# Multiply by 4(VFL) to match aces 
# -------------------------------- 
#
               Tiajb(i,a,j,b)              *= 0.5 
               Tibja(i,b,j,a)               = Tiajb(i,a,j,b) 
               PREPARE Dibja_abba(i,b,j,a) += Tibja(i,b,j,a)  
#
            ENDDO a 
            ENDDO i 
#
      ENDPARDO b, j, a1, i1  
#
      PARDO a, i, b1, j1  
#
            REQUEST T2old_ab(a,i,b1,j1) j1  
#
            DO j 
            DO b 
#
               REQUEST                        A2old_aa(j1,b1,j,b) j1  
#
               Tiajb(i,a,j,b)               = T2old_ab(a,i,b1,j1)*A2old_aa(j1,b1,j,b)  
               Tiajb(i,a,j,b)              *= 0.5  
#
               Tibja(i,b,j,a)               = Tiajb(i,a,j,b) 
               PREPARE Vibja_abba(i,b,j,a) += Tibja(i,b,j,a)  
#
               Tibja(i,b,j,a)               = Tiajb(i,a,j,b) 
               PREPARE Dibja_abba(i,b,j,a) += Tibja(i,b,j,a)  
#
            ENDDO b 
            ENDDO j  
#
      ENDPARDO a, i, b1, j1  
#
      execute sip_barrier 
#
      PARDO b, j, b1, j1  
#
            REQUEST T2old_aa(b,j,b1,j1) j1  
#
            DO i 
            DO a 
#
               REQUEST     A2old_ab(i,a,j1,b1) j1  
               GET         t1a_old(b1,j) 
               GET         t1a_old(b,j1) 
               tbj(b,j1) = t1a_old(b,j1) 
#
#              T1iajb(i,a,j,b)              = T2old_aa(b,j,b1,j1)*A2old_ab(i,a,j1,b1)  
               Tjbjb(j1,b1,j,b)             = T2old_aa(b,j,b1,j1) 
               Tiajb(i,a,j,b)               = A2old_ab(i,a,j1,b1)*Tjbjb(j1,b1,j,b)   
#
               Tjbjb(j,b,j1,b1)             = t1a_old(b1,j)^tbj(b,j1) 
               T1iajb(i,a,j,b)              = Tjbjb(j,b,j1,b1)*A2old_ab(i,a,j1,b1) 
               Tiajb(i,a,j,b)              -= T1iajb(i,a,j,b) 
#
               Tiajb(i,a,j,b)              *= 0.5 
               Tibja(i,b,j,a)               = Tiajb(i,a,j,b) 
               PREPARE Dibja_abba(i,b,j,a) += Tibja(i,b,j,a)  
#
            ENDDO a 
            ENDDO i  
#
# Multiply by 4(VFL) to match aces 
# -------------------------------- 
#
      ENDPARDO b, j, b1, j1  
#
      ENDPROC DIBJAABBA 
# ----------------------------------------------------------------------------



#----------------------------------------------------------------------------
#
#     --------------
      PROC DIBJA_EOM
#     --------------
#
#
#       ja    j  a     jm  e  a    jm  ea
#      G   = l  r  +  l   r  t  + l   r    ; Last term for ABAB and BABA only
#       bi    b  i     be  m  i    be  mi
#
#
      PARDO  i, a, a1, i1
         REQUEST  L2R2_aaaa (i,a1,i1,a) i
         GET  t1a_old (a,i)
         GET  R1A (a,i)
         GET  L1A (i1,a1)
         tia (i1,a1) = LR1L2_ai (a1,i1)
         tpppp  (a,i,i1,a1)  = R1A (a,i) ^ L1A (i1,a1)
         t1pppp (a,i,i1,a1)  = t1a_old (a,i) ^ tia (i1,a1)
         tpppp  (a,i,i1,a1) += t1pppp (a,i,i1,a1)

         tiaia  (i,a1,i1,a)  = tpppp (a,i,i1,a1)
         tiaia  (i,a1,i1,a) += L2R2_aaaa (i,a1,i1,a)

         tiaia  (i,a1,i1,a) *= 0.5
         t1iaia (i1,a,i,a1)  = tiaia (i,a1,i1,a)
         PREPARE  Dibja_aaaa (i,a1,i1,a) += tiaia  (i,a1,i1,a)
         PREPARE  Dibja_aaaa (i1,a,i,a1) += t1iaia (i1,a,i,a1)
      ENDPARDO  i, a, a1, i1

      PARDO  i, a, b1, j1
         REQUEST  L2R2_abba (i,b1,j1,a) i
         GET  t1a_old (a,i)
         GET  R1A (a,i)
         GET  L1A (j1,b1)
         tjb (j1,b1) = LR1L2_ai (b1,j1)
         tppqq  (a,i,j1,b1)  = R1A (a,i) ^ L1A (j1,b1)
         t1ppqq (a,i,j1,b1)  = t1a_old (a,i) ^ tjb (j1,b1)
         tppqq  (a,i,j1,b1) += t1ppqq (a,i,j1,b1)

         tpqpq  (i,b1,j1,a)  = tppqq (a,i,j1,b1)
         tpqpq  (i,b1,j1,a) += L2R2_abba (i,b1,j1,a)

         tpqpq  (i,b1,j1,a) *= 0.5
         tqpqp  (j1,a,i,b1)  = tpqpq (i,b1,j1,a)
         PREPARE  Dibja_abba (i,b1,j1,a) += tpqpq (i,b1,j1,a)
         PREPARE  Dibja_abba (j1,a,i,b1) += tqpqp (j1,a,i,b1)
      ENDPARDO  i, a, b1, j1

      PARDO  i, b, i1, b1
         REQUEST               L2R2_abab (i,b1,i1,b) i
         tibib  (i,b,i1,b1)  = L2R2_abab (i,b1,i1,b)
         tibib  (i,b,i1,b1) *= 0.5
         t1ibib (i1,b1,i,b)  = tibib (i,b,i1,b1)
         PREPARE  Dibja_abab (i,b,i1,b1) += tibib  (i,b,i1,b1)
         PREPARE  Dibja_abab (i1,b1,i,b) += t1ibib (i1,b1,i,b)
      ENDPARDO  i, b, i1, b1
#
#
#       ja    jm    e  a    e  a
#      G   = l   ( r  t  + t  r  )
#       bi    be    i  m    i  m
#
#
      PARDO  i1, a2, i2, a1
         REQUEST                L2AA (i2,a2,i1,a1) i1
         taaii (a2,a1,i1,i2)  = L2AA (i2,a2,i1,a1)
         DO i
            GET  R1A     (a2,i)
            GET  t1a_old (a2,i)
            t1ia (i,a2) = R1A     (a2,i)
            t2ia (i,a2) = t1a_old (a2,i)
            tpppp  (i,a1,i1,i2)  = t1ia (i,a2) * taaii (a2,a1,i1,i2)
            t1pppp (i,a1,i1,i2)  = t2ia (i,a2) * taaii (a2,a1,i1,i2)
            DO a
               GET  R1A (a,i2)
               tiaia  (i,a1,i1,a)  = tpppp  (i,a1,i1,i2) * t1a_old (a,i2)
               t1iaia (i,a1,i1,a)  = t1pppp (i,a1,i1,i2) * R1A     (a,i2)
               tiaia  (i,a1,i1,a) += t1iaia (i,a1,i1,a)

              #tiaia  (i,a1,i1,a) *= -1.0
               tiaia  (i,a1,i1,a) *= -0.5
               t2iaia (i1,a,i,a1)  = tiaia (i,a1,i1,a)
               PREPARE  Dibja_aaaa (i,a1,i1,a) += tiaia  (i,a1,i1,a)
               PREPARE  Dibja_aaaa (i1,a,i,a1) += t2iaia (i1,a,i,a1)
            ENDDO a
         ENDDO i
      ENDPARDO  i1, a2, i2, a1

      PARDO  j1, a2, i2, b1
         REQUEST                L2AB (i2,a2,j1,b1) j1
         tabji (a2,b1,j1,i2)  = L2AB (i2,a2,j1,b1)
         DO i
            GET  R1A     (a2,i)
            GET  t1a_old (a2,i)
            t1ia (i,a2) = R1A     (a2,i)
            t2ia (i,a2) = t1a_old (a2,i)
            tpqqp  (i,b1,j1,i2)  = t1ia (i,a2) * tabji (a2,b1,j1,i2)
            t1pqqp (i,b1,j1,i2)  = t2ia (i,a2) * tabji (a2,b1,j1,i2)
            DO a
               GET  R1A     (a,i2)
               GET  t1a_old (a,i2)
               tibja  (i,b1,j1,a)  = tpqqp  (i,b1,j1,i2) * t1a_old (a,i2)
               t1ibja (i,b1,j1,a)  = t1pqqp (i,b1,j1,i2) * R1A     (a,i2)
               tibja  (i,b1,j1,a) += t1ibja (i,b1,j1,a)
               tibja  (i,b1,j1,a) *= -0.5
               tjaib  (j1,a,i,b1)  = tibja (i,b1,j1,a)
               PREPARE  Dibja_abba (i,b1,j1,a) += tibja (i,b1,j1,a)
               PREPARE  Dibja_abba (j1,a,i,b1) += tjaib (j1,a,i,b1)
            ENDDO a
         ENDDO i
      ENDPARDO  j1, a2, i2, b1

      PARDO  j2, b, i1, a2    
         REQUEST              L2AB (i1,a2,j2,b) j2
         tabij (a2,b,i1,j2) = L2AB (i1,a2,j2,b)
         DO i
            GET  R1A     (a2,i)
            GET  t1a_old (a2,i)
            t1ia (i,a2) = R1A     (a2,i)
            t2ia (i,a2) = t1a_old (a2,i)
            tibij  (i,b,i1,j2) = t1ia (i,a2) * tabij (a2,b,i1,j2)
            t1ibij (i,b,i1,j2) = t2ia (i,a2) * tabij (a2,b,i1,j2)
            DO b1
               GET  R1A     (b1,j2)
               GET  t1a_old (b1,j2)
               tpqpq  (i,b,i1,b1)  = tibij  (i,b,i1,j2) * t1a_old (b1,j2)
               t1pqpq (i,b,i1,b1)  = t1ibij (i,b,i1,j2) * R1A     (b1,j2)
               tpqpq  (i,b,i1,b1) += t1pqpq (i,b,i1,b1)

               tpqpq  (i,b,i1,b1) *= 0.5
               t2pqpq (i1,b1,i,b)  = tpqpq (i,b,i1,b1)
               PREPARE  Dibja_abab (i,b,i1,b1) += tpqpq  (i,b,i1,b1)
               PREPARE  Dibja_abab (i1,b1,i,b) += t2pqpq (i1,b1,i,b)
            ENDDO b1
         ENDDO i
      ENDPARDO  j2, b, i1, a2
#
#
#     ..ready!
#
#
      ENDPROC  DIBJA_EOM
#----------------------------------------------------------------------------



#----------------------------------------------------------------------------
#
      PROC DIBJA  
#
# Create gamma arrays and V intermediates 
# --------------------------------------- 
#
           CALL DIBJA_EOM
           CALL DIBJAAAAA
           CALL DIBJAABAB
           CALL DIBJAABBA 
#
      ENDPROC DIBJA 
#
# ----------------------------------------------------------------------------
#
# Equivalent to gamma6 
#
# ----------------------------------------------------------------------------- 
#
# In this procedure the D(ij,ka) block of the two-particle 
# density matrix is evaluated. Only the AAAA contribution is computed.  
#
# ----------------------------------------------------------------------------- 
#
      PROC DIJKAAAAA 
#     -------------- 
#
      PARDO i, i1, i2, a 
#
            Tiiia(i,i1,i2,a) = 0.0 
#
            GET Gmi_a(i,i2) 
            GET t1a_old(a,i1) 
            GET Gmi_a(i1,i2) 
            GET t1a_old(a,i) 
#
            T1iiia(i,i1,i2,a)  = Gmi_a(i,i2)^t1a_old(a,i1) 
            T1iiia(i,i1,i2,a) *= -0.125  
            Tiiia(i,i1,i2,a)  += T1iiia(i,i1,i2,a) 
#
            T1iiia(i,i1,i2,a)  = Gmi_a(i1,i2)^t1a_old(a,i) 
            T1iiia(i,i1,i2,a) *= 0.125  
            Tiiia(i,i1,i2,a)  += T1iiia(i,i1,i2,a) 
#
            DO a1 
#
               REQUEST Tau_aa(a1,i,a,i1)   a  
               REQUEST A2old_aa(i,a1,i1,a) a  
               REQUEST Vibja_aaaa(i,a1,i2,a)  a  
               REQUEST Vibja_aaaa(i1,a1,i2,a) a  
               GET t1a_old(a1,i1) 
               GET t1a_old(a1,i) 
               GET t1a_old(a1,i2) 
               GET a1a_old(i2,a1) 
#
               T1iiia(i,i1,i2,a) = Tau_aa(a1,i,a,i1)*a1a_old(i2,a1) 
               T1iiia(i,i1,i2,a)*= -0.125  
               Tiiia(i,i1,i2,a) += T1iiia(i,i1,i2,a) 
#
               T1iiia(i,i1,i2,a) = A2old_aa(i,a1,i1,a)*t1a_old(a1,i2) 
               T1iiia(i,i1,i2,a)*= -0.125  
               Tiiia(i,i1,i2,a) += T1iiia(i,i1,i2,a) 
#
               T1iiia(i,i1,i2,a) = Vibja_aaaa(i,a1,i2,a)*t1a_old(a1,i1) 
               T1iiia(i,i1,i2,a)*= 0.25  
               Tiiia(i,i1,i2,a) += T1iiia(i,i1,i2,a) 
#
               T1iiia(i,i1,i2,a) = Vibja_aaaa(i1,a1,i2,a)*t1a_old(a1,i) 
               T1iiia(i,i1,i2,a)*= -0.25  
               Tiiia(i,i1,i2,a) += T1iiia(i,i1,i2,a) 
#
            ENDDO a1 
#
            DO i3 
# 
               REQUEST Vijmn_aaaa(i,i1,i2,i3) i3  
               GET t1a_old(a,i3) 
# 
               T1iiia(i,i1,i2,a) = Vijmn_aaaa(i,i1,i2,i3)*t1a_old(a,i3) 
               T1iiia(i,i1,i2,a)*= 0.125  
               Tiiia(i,i1,i2,a) += T1iiia(i,i1,i2,a) 
#
            ENDDO i3 

#TWODENS
#            DO sigma 
#               Tiiix(i,i1,i2,sigma)      = Tiiia(i,i1,i2,a)*ca(sigma,a) 
#               PREPARE Diiix(i,i1,i2,sigma) += Tiiix(i,i1,i2,sigma) 
#            ENDDO sigma 

#
# Multiply by 4 to match aces 
# --------------------------- 
#
            Tiiia(i,i1,i2,a) *= 4.0 
#
            PREPARE Dijka_aaaa(i,i1,i2,a) += Tiiia(i,i1,i2,a) 
#
      ENDPARDO i, i1, i2, a 

      ENDPROC DIJKAAAAA 
#     ----------------- 
#
# ----------------------------------------------------------------------------- 
#
# ----------------------------------------------------------------------------- 
#
# In this procedure the D(iJ,kA) block of the two-particle 
# density matrix is evaluated. The AB block is computed.  
#
# ----------------------------------------------------------------------------- 
#
      PROC DIJKAABAB 
#     -------------- 
#
      PARDO i, j, i1, b 
#
            Tijib(i,j,i1,b) = 0.0 
#
            GET Gmi_a(i,i1) 
            GET t1a_old(b,j) 
#
            T1ijib(i,j,i1,b) = Gmi_a(i,i1)^t1a_old(b,j) 
            T1ijib(i,j,i1,b)*= -0.125  
            Tijib(i,j,i1,b) += T1ijib(i,j,i1,b) 
#
            DO a 
#
               REQUEST Tau_ab(a,i,b,j)      b  
               REQUEST A2old_ab(i,a,j,b)    b  
               REQUEST Vibja_abba(j,a,i1,b) b  
               GET a1a_old(i1,a) 
               GET t1a_old(a,i1) 
               GET t1a_old(a,i) 
#
               T1ijib(i,j,i1,b) = Tau_ab(a,i,b,j)*a1a_old(i1,a) 
               T1ijib(i,j,i1,b)*= -0.125  
               Tijib(i,j,i1,b) += T1ijib(i,j,i1,b) 
#
               T1ijib(i,j,i1,b) = A2old_ab(i,a,j,b)*t1a_old(a,i1) 
               T1ijib(i,j,i1,b)*= -0.125  
               Tijib(i,j,i1,b) += T1ijib(i,j,i1,b) 
#
               T1ijib(i,j,i1,b) = Vibja_abba(j,a,i1,b)*t1a_old(a,i) 
               T1ijib(i,j,i1,b)*= -0.25  
               Tijib(i,j,i1,b) += T1ijib(i,j,i1,b) 
#
            ENDDO a 
#
            DO j1 
# 
               REQUEST Vijmn_abab(i,j,i1,j1) j1  
               GET t1a_old(b,j1) 
               T1ijib(i,j,i1,b) = Vijmn_abab(i,j,i1,j1)*t1a_old(b,j1) 
               T1ijib(i,j,i1,b)*= 0.125  
               Tijib(i,j,i1,b) += T1ijib(i,j,i1,b) 
#
            ENDDO j1 
#
            DO b1 
#
               REQUEST Vibja_abab(i,b1,i1,b) b  
               GET t1a_old(b1,j) 
               T1ijib(i,j,i1,b) = Vibja_abab(i,b1,i1,b)*t1a_old(b1,j) 
               T1ijib(i,j,i1,b)*= 0.25  
               Tijib(i,j,i1,b) += T1ijib(i,j,i1,b) 
#
            ENDDO b1 

#TWODENS
#            DO sigma 
#               Tijix(i,j,i1,sigma)      = Tijib(i,j,i1,b)*ca(sigma,b) 
#               PREPARE Dijix(i,j,i1,sigma) += Tijix(i,j,i1,sigma) 
#            ENDDO sigma 
#
# Multiply by 4 to match aces 
# --------------------------- 
#
            Tijib(i,j,i1,b) *= 4.0 
#
            PREPARE Dijka_abab(i,j,i1,b) += Tijib(i,j,i1,b) 
#
      ENDPARDO i, j, i1, b 

      ENDPROC DIJKAABAB 
#     ----------------- 
#
# ----------------------------------------------------------------------------- 

#
#-------------------------------------------------------------------------
#
#     ---------------
      PROC  DIJKA_EOM
#     ---------------
#
#
#       ij        ij  e       _ke  e
#      D   = 1/2 l   r  + 1/2 r   l  ; Note the 'transposition' of the 1st term
#       ka        ea  k        ij  a
#
#
      PARDO  a2, i, i1, a
         REQUEST               L2AA    (i,a2,i1,a) a2              # DIAJK piece
         REQUEST               RTAU_aa (a2,i,a,i1) a2
         t1iiaa (i,i1,a2,a)  = L2AA    (i,a2,i1,a)                 # DIAJK piece
         tiiaa  (i,i1,a2,a)  = RTAU_aa (a2,i,a,i1)
         t1iiaa (i,i1,a2,a) *= -0.5                                # DIAJK piece
         tiiaa  (i,i1,a2,a) *= -0.5
         DO i2
            GET  L1A (i2,a2)
            GET  R1A (a2,i2)
            tpppp  (i,i1,i2,a)  = tiiaa  (i,i1,a2,a) * L1A (i2,a2)
            t1pppp (i,i1,i2,a)  = t1iiaa (i,i1,a2,a) * R1A (a2,i2) # DIAJK piece
            tpppp  (i,i1,i2,a) += t1pppp (i,i1,i2,a)
            PREPARE  Dijka_aaaa (i,i1,i2,a) += tpppp (i,i1,i2,a)
         ENDDO i2
      ENDPARDO  a2, i, i1, a

      PARDO  a2, i, j1, b
         REQUEST               L2AB    (i,a2,j1,b) a2              # DIAJK piece
         REQUEST               RTAU_ab (a2,i,b,j1) a2
         t1ijab (i,j1,a2,b)  = L2AB    (i,a2,j1,b)                 # DIAJK piece
         tijab  (i,j1,a2,b)  = RTAU_ab (a2,i,b,j1)
         t1ijab (i,j1,a2,b) *= -0.5                                # DIAJK piece
         tijab  (i,j1,a2,b) *= -0.5
         DO i2
            GET  R1A (a2,i2)                                       # DIAJK piece
            GET  L1A (i2,a2)
            tpqpq  (i,j1,i2,b)  = t1ijab (i,j1,a2,b) * R1A (a2,i2) # DIAJK piece
            t1pqpq (i,j1,i2,b)  = tijab  (i,j1,a2,b) * L1A (i2,a2)
            t1pqpq (i,j1,i2,b) += tpqpq  (i,j1,i2,b)
            PREPARE  Dijka_abab (i,j1,i2,b) += t1pqpq (i,j1,i2,b)
         ENDDO i2
      ENDPARDO  a2, i, j1, b
#
#
#       ij        km  a _ef        km  a _ef
#      G   = 1/2 l   t  r   + 1/2 l   r  t
#       ka        ef  m  ij        ef  m  ij
#
#
      PARDO  a, a2, i2, a3
         taaia  (a2,a3,i2,a) = 0.0
         t1aaia (a2,a3,i2,a) = 0.0
         DO i3
            REQUEST                L2AA (i2,a2,i3,a3) a3
            GET                    R1A  (a,i3)
            GET                    t1a_old  (a,i3)
            taaii  (a2,a3,i2,i3) = L2AA (i2,a2,i3,a3)
            t2pppp (a2,a3,i2,a)  = taaii (a2,a3,i2,i3) * t1a_old (a,i3)
            t3pppp (a2,a3,i2,a)  = taaii (a2,a3,i2,i3) * R1A  (a,i3)
            taaia  (a2,a3,i2,a) += t2pppp (a2,a3,i2,a)
            t1aaia (a2,a3,i2,a) += t3pppp (a2,a3,i2,a)
         ENDDO i3
         DO i
         DO i1
            REQUEST               RTAU_aa (a2,i,a3,i1) i1
            REQUEST               TAU_aa  (a2,i,a3,i1) i1
            tiiaa  (i,i1,a2,a3) = RTAU_aa (a2,i,a3,i1)
            t1iiaa (i,i1,a2,a3) = TAU_aa  (a2,i,a3,i1)
            tpppp  (i,i1,i2,a)  = tiiaa  (i,i1,a2,a3) * taaia  (a2,a3,i2,a)
            t1pppp (i,i1,i2,a)  = t1iiaa (i,i1,a2,a3) * t1aaia (a2,a3,i2,a)
            tpppp  (i,i1,i2,a) += t1pppp (i,i1,i2,a)
           #tpppp  (i,i1,i2,a) *= -0.25
            tpppp  (i,i1,i2,a) *=  0.25
            PREPARE  Dijka_aaaa (i,i1,i2,a) += tpppp (i,i1,i2,a)
         ENDDO i1
         ENDDO i
      ENDPARDO  a, a2, i2, a3

      PARDO  b, i2, a2, b3
         tabib  (a2,b3,i2,b) = 0.0
         t1abib (a2,b3,i2,b) = 0.0
         DO j3
            REQUEST                L2AB (i2,a2,j3,b3) b3
            GET                    R1A  (b,j3)
            GET                    t1a_old  (b,j3)
            tabij  (a2,b3,i2,j3) = L2AB (i2,a2,j3,b3)
            t2pqpq (a2,b3,i2,b)  = tabij  (a2,b3,i2,j3) * t1a_old (b,j3)
            t3pqpq (a2,b3,i2,b)  = tabij  (a2,b3,i2,j3) * R1A  (b,j3)
            tabib  (a2,b3,i2,b) += t2pqpq (a2,b3,i2,b)
            t1abib (a2,b3,i2,b) += t3pqpq (a2,b3,i2,b)
         ENDDO j3
         DO i
         DO j1
            REQUEST               RTAU_ab (a2,i,b3,j1) j1
            REQUEST               TAU_ab  (a2,i,b3,j1) j1
            tijab  (i,j1,a2,b3) = RTAU_ab (a2,i,b3,j1)
            t1ijab (i,j1,a2,b3) = TAU_ab  (a2,i,b3,j1)
            tpqpq  (i,j1,i2,b)  = tijab  (i,j1,a2,b3) * tabib  (a2,b3,i2,b)
            t1pqpq (i,j1,i2,b)  = t1ijab (i,j1,a2,b3) * t1abib (a2,b3,i2,b)
            tpqpq  (i,j1,i2,b) += t1pqpq (i,j1,i2,b)
           #tpqpq  (i,j1,i2,b) *= -0.5
            tpqpq  (i,j1,i2,b) *=  0.5
            PREPARE  Dijka_abab (i,j1,i2,b) += tpqpq (i,j1,i2,b)
         ENDDO j1
         ENDDO i
      ENDPARDO  b, i2, a2, b3
#
#
#       ij                ef  mk    a          ef  mk    a
#      G   = 1/4 P(ij) ( r   l   ) t  + 1/4 ( t   l   ) r
#       ka                im  ef    j          im  ef    j
#
#
      PARDO  i, i2, i1, a
         GET  R1A (a,i1)
         GET  t1a_old (a,i1)

         tpppp  (i,i2,i1,a)  = LR2L2_ii (i2,i) ^ t1a_old (a,i1)
         t1pppp (i,i2,i1,a)  = LT2L2_ii (i2,i) ^ R1A  (a,i1)
         tpppp  (i,i2,i1,a) += t1pppp (i,i2,i1,a)

         t2pppp (i,i1,i2,a)  = tpppp  (i,i2,i1,a)
         t3pppp (i1,i,i2,a)  = t2pppp (i,i1,i2,a)
         t2pppp (i,i1,i2,a) *= -0.5
         t3pppp (i1,i,i2,a) *=  0.5
         PREPARE  Dijka_aaaa (i,i1,i2,a) += t2pppp (i,i1,i2,a)
         PREPARE  Dijka_aaaa (i1,i,i2,a) += t3pppp (i1,i,i2,a)
      ENDPARDO  i, i2, i1, a

      PARDO  i, i2, j1, b
         GET  R1A (b,j1)
         GET  t1a_old (b,j1)
         tppqq  (i2,i,b,j1)  = LR2L2_ii (i2,i) ^ t1a_old (b,j1)
         t1ppqq (i2,i,b,j1)  = LT2L2_ii (i2,i) ^ R1A  (b,j1)
         tppqq  (i2,i,b,j1) += t1ppqq (i2,i,b,j1)

         tpqpq  (i,j1,i2,b)  = tppqq  (i2,i,b,j1)
         tpqpq  (i,j1,i2,b) *= -0.5
         PREPARE  Dijka_abab (i,j1,i2,b) += tpqpq (i,j1,i2,b)
      ENDPARDO  i, i2, j1, b
#
#
#       ij              d    km  ea          d    km  ea
#      G   = 1/2 P(ij) t  ( l   r   ) + 1/2 r  ( l   t   )
#       ka              i    de  mj          i    de  mj
#
#
#           Note, these rings are used in Dabci and Dibja...
#
#
      PARDO  a2, i2, a, i1
         REQUEST               L2T2_aaaa (i1,a2,i2,a) a2
         REQUEST               L2R2_aaaa (i1,a2,i2,a) a2
         taiia  (a2,i1,i2,a) = L2R2_aaaa (i1,a2,i2,a)
         t1aiia (a2,i1,i2,a) = L2T2_aaaa (i1,a2,i2,a)
         DO i
            GET  R1A (a2,i)
            GET  t1a_old (a2,i)
            tpppp  (i,i1,i2,a)  = t1a_old (a2,i) * taiia  (a2,i1,i2,a)
            t1pppp (i,i1,i2,a)  = R1A  (a2,i) * t1aiia (a2,i1,i2,a)
            tpppp  (i,i1,i2,a) += t1pppp (i,i1,i2,a)
            tpppp  (i,i1,i2,a) *= -0.5

            t2pppp (i1,i,i2,a)  = tpppp (i,i1,i2,a)
            t2pppp (i1,i,i2,a) *= -1.0

            PREPARE  Dijka_aaaa (i,i1,i2,a) += tpppp  (i,i1,i2,a)
            PREPARE  Dijka_aaaa (i1,i,i2,a) += t2pppp (i1,i,i2,a)
         ENDDO i
      ENDPARDO  a2, i2, a, i1

      PARDO  a2, i2, b, j1
         REQUEST               L2T2_abba (j1,a2,i2,b) a2
         REQUEST               L2R2_abba (j1,a2,i2,b) a2
         tajib  (a2,j1,i2,b) = L2R2_abba (j1,a2,i2,b)
         t1ajib (a2,j1,i2,b) = L2T2_abba (j1,a2,i2,b)
         DO i
            GET  R1A (a2,i)
            GET  t1a_old (a2,i)
            tpqpq  (i,j1,i2,b)  = t1a_old (a2,i) * tajib  (a2,j1,i2,b)
            t1pqpq (i,j1,i2,b)  = R1A  (a2,i) * t1ajib (a2,j1,i2,b)
            tpqpq  (i,j1,i2,b) += t1pqpq (i,j1,i2,b)
            tpqpq  (i,j1,i2,b) *= -0.5
            PREPARE  Dijka_abab (i,j1,i2,b) += tpqpq (i,j1,i2,b)
         ENDDO i
      ENDPARDO  a2, i2, b, j1

      PARDO  b2, b, i, i2
         REQUEST              L2T2_abab (i,b,i2,b2) b2
         REQUEST              L2R2_abab (i,b,i2,b2) b2
         tibib  (i,b2,i2,b) = L2R2_abab (i,b,i2,b2)
         t1ibib (i,b2,i2,b) = L2T2_abab (i,b,i2,b2)
         DO j1
            GET  R1A (b2,j1)
            GET  t1a_old (b2,j1)
            tpqpq  (i,j1,i2,b)  = t1a_old (b2,j1) * tibib  (i,b2,i2,b)
            t1pqpq (i,j1,i2,b)  = R1A  (b2,j1) * t1ibib (i,b2,i2,b)
            tpqpq  (i,j1,i2,b) += t1pqpq (i,j1,i2,b)
            tpqpq  (i,j1,i2,b) *=  0.5
            PREPARE  Dijka_abab (i,j1,i2,b) += tpqpq (i,j1,i2,b)
         ENDDO j1
      ENDPARDO  b2, b, i, i2
#
#
#       ij         f    kn _ea
#      G   = -1/2 r  ( l   t   )
#       ka         n    ef  ij
#
#
      PARDO  a2, i, a, i1
         REQUEST             TAU_aa  (a2,i,a,i1) a2
         tiiaa (i,i1,a2,a) = TAU_aa  (a2,i,a,i1)
         DO i2
            tpppp (i,i1,i2,a)  = tiiaa (i,i1,a2,a) * LR1L2_ai (a2,i2)
            tpppp (i,i1,i2,a) *= -0.5
            PREPARE  Dijka_aaaa (i,i1,i2,a) += tpppp (i,i1,i2,a)
         ENDDO i2
      ENDPARDO  a2, i, a, i1

      PARDO  a2, i, b, j1
         REQUEST             TAU_ab (a2,i,b,j1) a2
         tijab (i,j1,a2,b) = TAU_ab (a2,i,b,j1)
         DO i2
            tpqpq (i,j1,i2,b)  = tijab (i,j1,a2,b) * LR1L2_ai (a2,i2)
            tpqpq (i,j1,i2,b) *= -0.5
            PREPARE  Dijka_abab (i,j1,i2,b) += tpqpq (i,j1,i2,b)
         ENDDO i2
      ENDPARDO  a2, i, b, j1
#
#
#          ...ready!
#     
#     
      ENDPROC  DIJKA_EOM
#-------------------------------------------------------------------------



# ----------------------------------------------------------------------------- 
#
      PROC DIJKA 
#     ---------- 
#
# Create gamma arrays 
# ------------------- 
#
           CALL DIJKA_EOM 
           CALL DIJKAAAAA 
           CALL DIJKAABAB 
#
      ENDPROC DIJKA 
#     ------------- 
#
# ----------------------------------------------------------------------------
#
#     ---------
      PROC  DOV
#     ---------
#
      PARDO  i, a
         GET  A1A_old (i,a)
         tai  (a,i)  = A1A_old (i,a)
         tai  (a,i) *= 0.5
         PUT  Dai  (a,i) += tai (a,i)
      ENDPARDO  i, a

      PARDO  a, i
         t1ai(a,i) = 0.0
         DO i1
            GET  T1L1_OO_A (i,i1)
            GET  T2L2_OO_A (i,i1)

            tii (i,i1)  = T1L1_OO_A (i,i1)
            tii (i,i1) += T2L2_OO_A (i,i1)

            tai (a,i)   = ST1A (a,i1) * tii (i,i1)
            tai (a,i)  *= 0.5
            t1ai(a,i) += tai(a,i)
         ENDDO i1
         PUT  Dai (a,i) += t1ai (a,i)
      ENDPARDO  a, i

      PARDO  a, a1, i
            GET               T2L2_VV_A (a,a1)
            tai (a,i)       = T2L2_VV_A (a,a1) * ST1A (a1,i)
            tai (a,i)      *= 0.5
            PUT  Dai (a,i) += tai (a,i)
      ENDPARDO  a, a1, i

      PARDO  a1, i1
         GET  A1A_old (i1,a1)
         DO a
            DO i
               REQUEST           T2old_aa (a,i,a1,i1) i
               tai  (a,i)      = T2old_aa (a,i,a1,i1) * A1A_old (i1,a1)
               tai  (a,i)     *= 0.5
               PUT  Dai (a,i) += tai (a,i)
            ENDDO i
         ENDDO a
      ENDPARDO  a1, i1

      PARDO  b, j
         GET  A1A_old (j,b)
         DO a
            DO i
               REQUEST           T2old_ab (a,i,b,j) i
               tai  (a,i)      = T2old_ab (a,i,b,j) * A1A_old (j,b)
               tai  (a,i)     *= 0.5
               PUT  Dai (a,i) += tai (a,i)
            ENDDO i
         ENDDO a
      ENDPARDO  b, j
#
#
#
#
#     ...ready!
#
#
      ENDPROC  DOV
# ----------------------------------------------------------------------------



# ----------------------------------------------------------------------------
#
# In this superprocedure the particle-particle block of the relaxed density 
# matrix is computed. The expressions programmed are: 
# 
# D_{ab} = 1/4 P_+(ab) t^{ae}_{mn} \lambda^{mn}_{be}  
#        + 1/4 P_+(ab) t^{aE}_{mN} \lambda^{mN}_{bE}  
#        + 1/2 P_+(ab) t^{a}_{m} \lambda^{m}_{b} 
#
# D_{AB} = D_{ab} [a<-->A, b<-->B, i<-->I, j<-->J, m<-->M, n<-->N] 
#
      PROC DABA 
#     --------- 
#
      PARDO a, a1, i  
#
            GET t1a_old(a,i) 
            GET a1a_old(i,a1) 
#
            Taa(a,a1)        = t1a_old(a,i)*a1a_old(i,a1) 
            Taa(a,a1)       *= 0.5 
            T1aa(a1,a)       = Taa(a,a1)  
            PUT Dab_a(a,a1) += Taa(a,a1) 
            PUT Dab_a(a1,a) += T1aa(a1,a) 
#
            DO a2 
            DO i1 
#
               REQUEST T2old_aa(a,i,a2,i1) i1  
               REQUEST A2old_aa(i,a1,i1,a2) a2  
#
               Taa(a,a1)        = T2old_aa(a,i,a2,i1)*A2old_aa(i,a1,i1,a2)

               Taa (a,a1) *= -0.5 # Watson
               PUT  T2L2_VV_A (a,a1) += Taa (a,a1) # Watson

              #Taa(a,a1)       *= 0.25 
               Taa(a,a1)       *= -0.5  # Watson
               T1aa(a1,a)       = Taa(a,a1)  
               PUT Dab_a(a,a1) += Taa(a,a1) 
               PUT Dab_a(a1,a) += T1aa(a1,a) 
#
            ENDDO i1 
            ENDDO a2 
#
            DO b 
            DO j 
#
               REQUEST T2old_ab(a,i,b,j) j  
               REQUEST A2old_ab(i,a1,j,b) j  
#
               Taa(a,a1)        = T2old_ab(a,i,b,j)*A2old_ab(i,a1,j,b)

               Taa(a,a1)       *= -1.0
               PUT  T2L2_VV_A (a,a1) += Taa (a,a1) # Watson

               Taa(a,a1)       *= -0.5 
               T1aa(a1,a)       = Taa(a,a1)  
               PUT Dab_a(a,a1) += Taa(a,a1) 
               PUT Dab_a(a1,a) += T1aa(a1,a) 
#
            ENDDO j 
            ENDDO b 
#
      ENDPARDO a, a1, i  
#
      ENDPROC DABA 
#     ------------ 
#
# ----------------------------------------------------------------------------
#
      PROC DAB 
           CALL DABA 
      ENDPROC DAB 
#
# --------------------------------------------------------------------------- 
#
      PROC DENSPP 
#     ----------- 
#
      create Dpp 
      create Dqq 
      execute sip_barrier 
#
      PARDO i, i1 
           GET             Dij_a(i,i1) 
           GET             DOR_ii(i,i1) 
           tpp(i,i1)     = Dij_a(i,i1) 
           tpp(i,i1)    += DOR_ii(i,i1) 
           PUT Dpp(i,i1) = tpp(i,i1) 
      ENDPARDO i, i1 
#
      PARDO j, j1 
           GET             Dij_a(j,j1) 
           GET             DOR_ii(j,j1) 
           tqq(j,j1)     = Dij_a(j,j1) 
           tqq(j,j1)    += DOR_ii(j,j1) 
           PUT Dqq(j,j1) = tqq(j,j1) 
      ENDPARDO j, j1 
#
      PARDO a, a1 
           GET             Dab_a(a,a1) 
           GET             DOR_aa(a,a1) 
           tpp(a,a1)     = Dab_a(a,a1) 
           tpp(a,a1)    += DOR_aa(a,a1) 
           PUT Dpp(a,a1) = tpp(a,a1) 
      ENDPARDO a, a1 
#
      PARDO b, b1 
           GET             Dab_a(b,b1) 
           GET             DOR_aa(b,b1) 
           tqq(b,b1)     = Dab_a(b,b1) 
           tqq(b,b1)    += DOR_aa(b,b1) 
           PUT Dqq(b,b1) = tqq(b,b1) 
      ENDPARDO b, b1 
      execute sip_barrier 
#
      PARDO i, i1 
            GET Dpp(i,i1) 
            PUT Dij_a(i,i1) = Dpp(i,i1) 
      ENDPARDO i, i1 
#
      PARDO a, a1 
            GET Dpp(a,a1) 
            PUT Dab_a(a,a1) = Dpp(a,a1) 
      ENDPARDO a, a1 
#
      PARDO j, j1 
            GET Dqq(j,j1) 
            PUT Dij_a(j,j1) = Dqq(j,j1) 
      ENDPARDO j, j1 
#
      PARDO b, b1 
            GET Dqq(b,b1) 
            PUT Dab_a(b,b1) = Dqq(b,b1) 
      ENDPARDO b, b1 
      execute sip_barrier 
#
      delete Dpp 
      delete Dqq 
#
      ENDPROC DENSPP 
#     -------------- 
#
# --------------------------------------------------------------------------- 
#
# In this superprocedure the occupied-occupied block of the relaxed
# density matrix is computed. The expressions programmed are:
#
# D_{ij} = -1/4 P_+(ij) t^{ef}_{im} \lambda^{jm}_{ef} 
#          -1/4 P_+(ij) t^{eF}_{iM} \lambda^{jM}_{eF}   
#          -1/2 P_+(ij) t^{e}_{i} \lambda^{j}_{e}   
#
# D_{IJ} = D_{ij} [i<-->I, j<-->J, e<-->E, f<-->F] 
#
# --------------------------------------------------------------------------- 
#
      PROC DIJA 
#     --------- 
#
      PARDO a, a1, i2 
#
            DO i 
#
               REQUEST T2old_aa(a,i,a1,i2) i2  
#
               DO i1 
#
                  REQUEST A2old_aa(i1,a,i2,a1) a1  
#
                  Tii(i,i1)        = T2old_aa(a,i,a1,i2)*A2old_aa(i1,a,i2,a1) 
                  Tii(i,i1)       *= -0.5   
                  PUT  T2L2_OO_A (i,i1) += Tii (i,i1) # Watson

                  Tii(i,i1)       *=  0.5    # Watson
                 #Tii(i,i1)       *= -0.25    # Watson
                  T1ii(i1,i)       = Tii(i,i1) 
                  PUT Dij_a(i,i1) += Tii(i,i1) 
                  PUT Dij_a(i1,i) += T1ii(i1,i) 
#
               ENDDO i1 
#
            ENDDO i 
#
      ENDPARDO a, a1, i2 
#
      PARDO a, b, j 
#
            DO i 
#
               REQUEST T2old_ab(a,i,b,j) j 
#
               DO i1 
#
                  REQUEST A2old_ab(i1,a,j,b) b  
#
                  Tii(i,i1)        = T2old_ab(a,i,b,j)*A2old_ab(i1,a,j,b) 
                  Tii(i,i1)       *= -1.0
                  PUT  T2L2_OO_A (i,i1) += Tii (i,i1) # Watson
                  Tii(i,i1)       *=  0.5   
                  T1ii(i1,i)       = Tii(i,i1) 
                  PUT Dij_a(i,i1) += Tii(i,i1) 
                  PUT Dij_a(i1,i) += T1ii(i1,i) 
#
               ENDDO i1 
#
            ENDDO i 
#
      ENDPARDO a, b, j 
#
      PARDO a, i, i1  
#
            GET t1a_old(a,i) 
            GET a1a_old(i1,a) 
#
            Tii(i,i1)        = a1a_old(i1,a)*t1a_old(a,i) 

            Tii(i,i1)       *= -1.0
            PUT  T1L1_OO_A (i,i1) += Tii (i,i1) # Watson

            Tii(i,i1)       *=  0.5   
            T1ii(i1,i)       = Tii(i,i1) 
            PUT Dij_a(i,i1) += Tii(i,i1) 
            PUT Dij_a(i1,i) += T1ii(i1,i) 
#
      ENDPARDO a, i, i1  
#
      ENDPROC DIJA 
#     ------------ 
#
      PROC DIJ 
#     ----------- 
           CALL DIJA 
      ENDPROC DIJ 
#     ----------- 
#-------------------------------------------------------------------------


#-------------------------------------------------------------------------

#    --------------
      PROC  DPP_EOM 
#    --------------
#
      execute load_balance_on 
#
# VFL
      PARDO  a, a1
         taa(a,a1) = 0.0
         DO i
            GET           L1A (i,a1)
            t1aa (a,a1) = ST1A (a,i) * L1A (i,a1)
            taa(a,a1)  += t1aa(a,a1)
         ENDDO i
         taa (a,a1)           *= R0
         PUT  DIS_VV1   (a,a1) += taa (a,a1)
      ENDPARDO  a, a1

      PARDO  i, a
         GET  L1A (i,a)
         tia  (i,a)  = L1A (i,a)
         tia  (i,a) *= R0
         PUT  DIS_OV1  (i,a) += tia (i,a)
      ENDPARDO  i, a


#VFL
      PARDO  i, i1
         tii(i,i1) = 0.0
         DO a
            GET  L1A (i1,a)
            t1ii (i,i1)  = ST1A (a,i) * L1A (i1,a)
            t1ii (i,i1) *= -1.0
            tii(i,i1) += t1ii(i,i1)
         ENDDO a

         PUT  T1L1_OO_A (i,i1) += tii (i,i1)
         tii (i,i1) *= R0
         PUT  DIS_OO1   (i,i1) += tii (i,i1)
      ENDPARDO  i, i1
#
#     
#                          -------------------
#                          -                 -
#                          -  ALPHA DENSITY  -
#                          -                 -
#                          -------------------
#
#
#    ===========================================================
#       COMPUTE  OCCUPIED - OCCUPIED  PIECE  TO  THE  DENSITY
#    ===========================================================
#    ALPHA                                                 ALPHA
#    -----                                                 -----
#
#
#
#          ...L  * T  ...
#              2    2
#
#
#           
      PARDO i, a, a1, i2
            
            REQUEST            T2old_aa (a,i,a1,i2) i
            tpppp(a,i2,a1,i) = T2old_aa (a,i,a1,i2)

            DO i1

               REQUEST  L2AA (i1,a,i2,a1) i1
            
              #tii (i,i1)  = L2AA (i1,a,i2,a1) * T2old_aa (a,i,a1,i2)
               t1ii (i1,i) = L2AA (i1,a,i2,a1) * tpppp (a,i2,a1,i)
               tii (i,i1)  = t1ii(i1,i) 
               tii (i,i1) *= -0.5
               PUT  T2L2_OO_A (i,i1) += tii (i,i1)
         
               tii (i,i1) *= R0
               PUT  DIS_OO1   (i,i1) += tii (i,i1)

      
            ENDDO i1
      
      ENDPARDO i, a, a1, i2
#                          
      PARDO i, a, b, j

            REQUEST          T2old_ab (a,i,b,j) i
            tpppp(a,j,b,i) = T2old_ab(a,i,b,j)   

            DO i1

               REQUEST       L2AB (i1,a,j,b) i1

              #tii (i,i1)  = L2AB (i1,a,j,b) * T2old_ab (a,i,b,j)
               t1ii(i1,i)  = L2AB (i1,a,j,b) * tpppp (a,j,b,i)
               tii (i,i1)  = t1ii(i1,i)
               tii (i,i1) *= -1.0
               PUT  T2L2_OO_A (i,i1) += tii (i,i1)

               tii (i,i1) *= R0
               PUT  DIS_OO1     (i,i1) += tii (i,i1)

            ENDDO i1

      ENDPARDO  i, a, b, j
#
#
#           ...The other piece to the right moment density...
#
#                 R1 * A1  +  R2 * A2  +  T1 * R1 * A2
#
     #IF  LOGRIGHT == ONE

         PARDO  i, i1, a

               GET  R1A (a,i)
               GET  L1A (i1,a)

               tii  (i,i1)  = R1A (a,i) * L1A (i1,a)
               tii  (i,i1) *= -1.0

               PUT  DIS_OO1   (i,i1) += tii  (i,i1)
               PUT  R2L2_OO_A (i,i1) += tii  (i,i1)

         ENDPARDO  i, i1, a
#
#
#
         PARDO  a, a1, i2

            ALLOCATE  laiai4 (a,i2,a1,*)
            ALLOCATE  laiai5 (a,i2,a1,*)

            DO i

               REQUEST               R2AA (a,i,a1,i2) i
               laiai5 (a,i2,a1,i)  = R2AA (a,i,a1,i2)
               laiai5 (a,i2,a1,i) *= 0.5

               GET  R1A (a1,i2)
               laiai4 (a,i2,a1,i)  = laiai5 (a,i2,a1,i)
               taiai  (a,i2,a1,i)  = ST1A (a,i) ^ R1A (a1,i2)
               laiai4 (a,i2,a1,i) += taiai (a,i2,a1,i)

            ENDDO i

            DO i1

               REQUEST  L2AA (i1,a,i2,a1) i1

               DO i

                  t1ii(i1,i)  = L2AA (i1,a,i2,a1) * laiai4 (a,i2,a1,i)
                  tii (i,i1)  = t1ii(i1,i)
                  tii (i,i1) *= -1.0
                  PUT  DIS_OO1   (i,i1) += tii (i,i1)

                  t1ii(i1,i)  = L2AA (i1,a,i2,a1) * laiai5 (a,i2,a1,i)
                  tii (i,i1)  = t1ii(i1,i)
                  tii (i,i1) *= -1.0
                  PUT  R2L2_OO_A (i,i1) += tii (i,i1)

               ENDDO i

            ENDDO i1

            DEALLOCATE  laiai4 (a,i2,a1,*)
            DEALLOCATE  laiai5 (a,i2,a1,*)

         ENDPARDO  a, a1, i2
#
#
#          ...ALPHA-BETA summation...
#
#
         PARDO  a, j, b

            ALLOCATE  Lajbi4 (a,j,b,*)
            ALLOCATE  Lajbi5 (a,j,b,*)

            DO i

               REQUEST            R2AB (a,i,b,j) i
               GET                R1A (b,j)
               tajbi  (a,j,b,i) = R2AB(a,i,b,j)
               Lajbi5 (a,j,b,i) = tajbi(a,j,b,i)

               Lajbi4 (a,j,b,i)  = tajbi (a,j,b,i)
               t1ajbi  (a,j,b,i)  = ST1A (a,i) ^ R1A (b,j)
               Lajbi4 (a,j,b,i) += t1ajbi (a,j,b,i)

            ENDDO i

            DO i1

               REQUEST  L2AB (i1,a,j,b) i1

               DO i

                  t1ii(i1,i)  = L2AB (i1,a,j,b) * Lajbi4 (a,j,b,i)
                  tii (i,i1)  = t1ii(i1,i)
                  tii (i,i1) *= -1.0
                  PUT  DIS_OO1   (i,i1) += tii (i,i1)

                  t1ii(i1,i)  = L2AB (i1,a,j,b) * Lajbi5 (a,j,b,i)
                  tii (i,i1)  = t1ii(i1,i)
                  tii (i,i1) *= -1.0
                  PUT  R2L2_OO_A (i,i1) += tii (i,i1)

               ENDDO i

            ENDDO i1

            DEALLOCATE  Lajbi5 (a,j,b,*)
            DEALLOCATE  Lajbi4 (a,j,b,*)

         ENDPARDO  a, j, b

     #ENDIF  # LOGRIGHT == ONE #
#
#
#    ===========================================================
#       COMPUTE  VIRTUAL - VIRTUAL  PIECE  TO  THE  DENSITY
#    ===========================================================
#    ALPHA                                                 ALPHA
#    -----                                                 -----
#
#
#
      PARDO  a2, a1, i, i1

            REQUEST             L2AA (i,a2,i1,a1) a2
            tpppp(i,a1,i1,a2) = L2AA (i,a2,i1,a1)

            DO a

               REQUEST       T2old_aa(a,i,a1,i1) a

              #taa (a,a2)  = L2AA (i,a2,i1,a1) *T2old_aa (a,i,a1,i1)
               taa (a,a2)  = T2old_aa(a,i,a1,i1) * tpppp(i,a1,i1,a2)
               taa (a,a2) *= -0.50
               PUT  T2L2_VV_A (a,a2) += taa (a,a2)

               taa (a,a2) *= R0
               taa (a,a2) *= -1.0
               PUT  DIS_VV1   (a,a2) += taa (a,a2)

            ENDDO a

      ENDPARDO  a2, a1, i, i1
#
#
#
      PARDO  a2, b, j, i

            REQUEST           L2AB (i,a2,j,b) a2
            tpppp(i,b,j,a2) = L2AB (i,a2,j,b)

            DO a

               REQUEST  T2old_ab (a,i,b,j) a

              #taa (a,a2)  = L2AB (i,a2,j,b) * T2old_ab (a,i,b,j)
               taa (a,a2)  = T2old_ab (a,i,b,j) * tpppp(i,b,j,a2)
               taa (a,a2) *= -1.0
               PUT  T2L2_VV_A (a,a2) += taa (a,a2)

               taa (a,a2) *= R0
               taa (a,a2) *= -1.0
               PUT  DIS_VV1   (a,a2) += taa (a,a2)

            ENDDO a

      ENDPARDO  a2, b, j, i
#
#
     #IF  LOGRIGHT == ONE

         PARDO  a, a1, i

               GET  R1A (a,i)
               GET  L1A (i,a1)

               taa (a,a1)  = R1A (a,i) * L1A (i,a1)
               PUT  DIS_VV1   (a,a1) += taa (a,a1)

               taa (a,a1) *= -1.0
               PUT  R2L2_VV_A (a,a1) += taa (a,a1)

         ENDPARDO  a, a1, i
#
         PARDO  a1, i, i1

            ALLOCATE  Llaiai (*,i,a1,i1)
            ALLOCATE  laiai2 (*,i,a1,i1)

            GET  R1A (a1,i1)

            DO a

               REQUEST               R2AA (a,i,a1,i1) a

               taiai  (a,i,a1,i1)  = ST1A (a,i) ^ R1A (a1,i1)
               llaiai  (a,i,a1,i1)  = R2AA (a,i,a1,i1)
               llaiai  (a,i,a1,i1) *= 0.5
               laiai2 (a,i,a1,i1)  = llaiai (a,i,a1,i1)
               llaiai  (a,i,a1,i1) += taiai (a,i,a1,i1)

            ENDDO a

            DO a2

               REQUEST              L2AA (i,a2,i1,a1) a2
               tpppp(i,a1,i1,a2) =  L2AA (i,a2,i1,a1)

               DO a

                 #taa  (a,a2) = L2AA (i,a2,i1,a1) * llaiai  (a,i,a1,i1)
                  taa  (a,a2) = llaiai  (a,i,a1,i1) * tpppp(i,a1,i1,a2)
                  PUT  DIS_VV1   (a,a2) += taa  (a,a2)

               ENDDO a

               DO a

                 #taa2 (a,a2)  = L2AA (i,a2,i1,a1) * laiai2 (a,i,a1,i1)
                  taa2 (a,a2)  = laiai2 (a,i,a1,i1) * tpppp(i,a1,i1,a2)
                  taa2 (a,a2) *= -1.0
                  PUT  R2L2_VV_A (a,a2) += taa2 (a,a2)

               ENDDO a

            ENDDO a2

            DEALLOCATE  llaiai  (*,i,a1,i1)
            DEALLOCATE  laiai2 (*,i,a1,i1)

         ENDPARDO  a1, i, i1
#
#
         PARDO  b, j, i

            ALLOCATE  laibj  (*,i,b,j)
            ALLOCATE  laibj2 (*,i,b,j)

            GET  R1A (b,j)

            DO a

               REQUEST            R2AB (a,i,b,j) a
               laibj2 (a,i,b,j) = R2AB (a,i,b,j)

               laibj (a,i,b,j)  = laibj2 (a,i,b,j)
               taibj (a,i,b,j)  = ST1A (a,i) ^ R1A (b,j)
               laibj (a,i,b,j) += taibj (a,i,b,j)

            ENDDO a

            DO a2

               REQUEST            L2AB (i,a2,j,b) a2
               tpppp(i,b,j,a2) =  L2AB (i,a2,j,b)

               DO a

                 #taa  (a,a2) = L2AB (i,a2,j,b) * laibj  (a,i,b,j)
                  taa  (a,a2) = laibj  (a,i,b,j) * tpppp(i,b,j,a2)
                  PUT  DIS_VV1   (a,a2) += taa  (a,a2)

                 #taa2 (a,a2)  = L2AB (i,a2,j,b) * laibj2 (a,i,b,j)
                  taa2 (a,a2)  = laibj2 (a,i,b,j) * tpppp(i,b,j,a2)
                  taa2 (a,a2) *= -1.0
                  PUT  R2L2_VV_A (a,a2) += taa2 (a,a2)

               ENDDO a

            ENDDO a2

            DEALLOCATE  laibj  (*,i,b,j)
            DEALLOCATE  laibj2 (*,i,b,j)

         ENDPARDO  b, j, i

     #ENDIF  # LOGRIGHT == ONE #

#
#
#          ------------------------------------------------
#                          !!! IMPORTANT !!!
#          ------------------------------------------------
#
#           The following Occupied - Virtual code computes
#           both the alpha and beta pieces since one needs
#           both to compute the Virtual - Occupied piece.
#
#          ------------------------------------------------
#          ------------------------------------------------
#
#
#    ===========================================================
#       COMPUTE  OCCUPIED - VIRTUAL  PIECE  TO  THE  DENSITY
#    ===========================================================
#    ALPHA                                                 ALPHA
#    -----                                                 -----
#
#
     #IF  LOGRIGHT == ONE

         PARDO  i, a, a1, i1

            REQUEST                     L2AA (i,a,i1,a1) i1
            GET                         R1A  (a1,i1)
            tia (i,a)                 = L2AA (i,a,i1,a1) * R1A (a1,i1)
            PUT  DIS_OV1      (i,a) += tia (i,a)
            PUT  DENS_INT_OV_A (i,a) += tia (i,a)

         ENDPARDO  i, a, a1, i1

         PARDO  i, a, b, j

            REQUEST                     L2AB (i,a,j,b) j
            GET                         R1A  (b,j)
            tia (i,a)                 = L2AB (i,a,j,b) * R1A (b,j)
            PUT  DIS_OV1      (i,a) += tia (i,a)
            PUT  DENS_INT_OV_A (i,a) += tia (i,a)

         ENDPARDO i, a, b, j

     #ENDIF  # LOGRIGHT == ONE #
#
#
      EXECUTE  SERVER_BARRIER
#
#
#
#    ===========================================================
#       COMPUTE  VIRTUAL - OCCUPIED  PIECE  TO  THE  DENSITY
#    ===========================================================
#    ALPHA                                                 ALPHA
#    -----                                                 -----
#
#
#          ...Evaluate the R0 contribution...
#
#
# VFL 
      PARDO  a, i
         t1ai(a,i) = 0.0
         DO i1
            GET  T1L1_OO_A (i,i1)
            GET  T2L2_OO_A (i,i1)

            tii (i,i1)  = T1L1_OO_A (i,i1)
            tii (i,i1) += T2L2_OO_A (i,i1)

            tai (a,i)   = ST1A (a,i1) * tii (i,i1)
            t1ai(a,i) += tai(a,i)
         ENDDO i1

        #IF GROUNDSTATE == ONE
        #   t1ai (a,i)  += ST1A (a,i)
        #ENDIF

         t1ai (a,i)  *= R0
         PUT  DIS_VO1   (a,i) += t1ai (a,i)

      ENDPARDO  a, i
#
      PARDO  a, a1, i

            GET                     T2L2_VV_A (a,a1)
            tai (a,i)             = T2L2_VV_A (a,a1) * ST1A (a1,i)
            tai (a,i)            *= R0
            PUT  DIS_VO1   (a,i) += tai (a,i)

      ENDPARDO  a, a1, i
#
#
      PARDO  a1, i1

         GET  L1A (i1,a1)

         DO a
            DO i
               REQUEST                 T2old_aa (a,i,a1,i1) i
               tai  (a,i)            = T2old_aa (a,i,a1,i1) * L1A (i1,a1)
               tai  (a,i)           *= R0
               PUT  DIS_VO1   (a,i) += tai (a,i)
            ENDDO i
         ENDDO a

      ENDPARDO  a1, i1

      PARDO  b, j

         GET  L1A (j,b)

         DO a
            DO i
               REQUEST                 T2old_ab (a,i,b,j) i
               tai  (a,i)            = T2old_ab (a,i,b,j) * L1A (j,b)
               tai  (a,i)           *= R0
               PUT  DIS_VO1   (a,i) += tai (a,i)
            ENDDO i
         ENDDO a

      ENDPARDO  b, j

     #IF LOGRIGHT == ONE

       PARDO  a1, i1

            GET  DENS_INT_OV_A (i1,a1)
            tia (i1,a1) = DENS_INT_OV_A (i1,a1)

            DO a
               DO i
                  REQUEST  T2old_aa (a,i,a1,i1) i
                  tai (a,i) = T2old_aa (a,i,a1,i1) * tia (i1,a1)
                  PUT  DIS_VO1   (a,i) += tai (a,i)
               ENDDO i
            ENDDO a

         ENDPARDO  a1, i1

         PARDO  b, j

            GET  DENS_INT_OV_A (j,b)
            tjb (j,b) = DENS_INT_OV_A (j,b)

            DO a
               DO i
                  REQUEST  T2old_ab (a,i,b,j) i
                  tai (a,i)    = T2old_ab (a,i,b,j) * tjb (j,b)
                  PUT  DIS_VO1   (a,i) += tai (a,i)
               ENDDO i
            ENDDO a

         ENDPARDO  b, j
#
         PARDO  i, i1

            tii(i,i1) = 0.0
            DO a1
               GET           DENS_INT_OV_A (i1,a1)
               tia (i1,a1) = DENS_INT_OV_A (i1,a1)
               t1ii (i,i1) = ST1A (a1,i) * tia (i1,a1)
               tii(i,i1) += t1ii(i,i1)
            ENDDO a1

               DO a
                  tai (a,i)             = ST1A (a,i1) * tii (i,i1)
                  tai (a,i)            *= -1.0
                  PUT  DIS_VO1   (a,i) += tai (a,i)
               ENDDO a

         ENDPARDO  i, i1
#
         PARDO  a1, i1

            GET  L1A (i1,a1)

            DO a
               DO i
                  REQUEST                 R2AA (a,i,a1,i1) i
                  tai (a,i)             = R2AA (a,i,a1,i1) * L1A (i1,a1)
                  PUT  DIS_VO1   (a,i) += tai (a,i)
               ENDDO i
            ENDDO a

         ENDPARDO  a1, i1

         PARDO  b, j

            GET  L1A (j,b)

            DO a
               DO i
                  REQUEST                 R2AB (a,i,b,j) i
                  tai (a,i)             = R2AB (a,i,b,j) * L1A (j,b)
                  PUT  DIS_VO1   (a,i) += tai (a,i)
               ENDDO i
            ENDDO a

         ENDPARDO  b, j
#
         PARDO  i, a, a1

               GET  R2L2_VV_A (a,a1)
               GET  T2L2_VV_A (a,a1)
               GET  R1A (a1,i)
               tai  (a,i)  = R2L2_VV_A (a,a1) * ST1A (a1,i)
               t2ai (a,i)  = T2L2_VV_A (a,a1) * R1A (a1,i)
               tai  (a,i) += t2ai (a,i)
               PUT  DIS_VO1   (a,i) += tai (a,i)

         ENDPARDO i, a, a1
#
         PARDO i, a, i1

               GET  R1A (a,i1)
               GET  R2L2_OO_A (i,i1)
               GET  T2L2_OO_A (i,i1)
               tai  (a,i)  = ST1A (a,i1) * R2L2_OO_A (i,i1)
               t2ai (a,i)  = R1A (a,i1) * T2L2_OO_A (i,i1)
               tai  (a,i) += t2ai (a,i)
               PUT  DIS_VO1   (a,i) += tai (a,i)

         ENDPARDO  i, a, i1
#
        #IF EXCITESTATE == ZERO
        #   PARDO  a, i
        #      GET  R1A (a,i)
        #      tai (a,i) = R1A (a,i)
        #      PUT  DIS_VO1   (a,i) += tai (a,i)
        #   ENDPARDO  a, i
        #ENDIF

        #IF EXCITESTATE == ONE
            PARDO  a, i
               tai (a,i)  = ST1A (a,i)
               PUT  DIS_VO1   (a,i) += tai (a,i)
            ENDPARDO  a, i
        #ENDIF


     #ENDIF  # LOGRIGHT = ONE #
#
      execute load_balance_off 
      EXECUTE  SERVER_BARRIER
#
      ENDPROC  DPP_EOM
#-------------------------------------------------------------------------

#-------------------------------------------------------------------------
     PROC I11 
#    -------- 
#
# Calculate contribution to Iai_aa 
# -------------------------------- 
#
     PARDO a, i, i1, i2  
#
           REQUEST VSpipi(a,i2,i1,i) i
           GET Dij_a(i1,i2) 
#
           Tpppp(a,i,i1,i2)  = VSpipi(a,i2,i1,i) 
           Tai(a,i)          = Tpppp(a,i,i1,i2)*Dij_a(i1,i2) 
           Tai(a,i)         *= -1.0  
           PUT Iai_aa(a,i)  += Tai(a,i) 
#
     ENDPARDO a, i, i1, i2  
#
     PARDO a, j, j1, i 
#
           REQUEST Vpiqj(a,i,j,j1) j1  
           GET Dij_a(j,j1) 
#
           Tai(a,i)         = Vpiqj(a,i,j,j1)*Dij_a(j,j1) 
           PUT Iai_aa(a,i) += Tai(a,i) 
#
     ENDPARDO a, j, j1, i 
#
     PARDO a, a1, a2, i 
#
           REQUEST VSaaai(a,a1,a2,i) i
           GET Dab_a(a2,a1) 
#
           Tpppp(a,i,a2,a1)  = VSaaai(a,a1,a2,i) 
           Tai(a,i)          = Tpppp(a,i,a2,a1)*Dab_a(a2,a1) 
           Tai(a,i)         *= -1.0   
           PUT Iai_aa(a,i)  += Tai(a,i) 
#
     ENDPARDO a, a1, a2, i 
#
     PARDO a, b, b1, i 
#
           REQUEST Vaabj(b1,b,a,i) i
           GET Dab_a(b1,b) 
#
           Tai(a,i)         = Vaabj(b1,b,a,i)*Dab_a(b1,b) 
           PUT Iai_aa(a,i) += Tai(a,i) 
#
     ENDPARDO a, b, b1, i 
#
# Done contribution to Iai_aa 
# --------------------------- 
#
# Compute contribution to Iij_aa 
# ------------------------------ 
#
#     Dab contribution 
#     ---------------- 
#
      PARDO a, a1, i, i1 
#
            REQUEST Vaaii(a,a1,i,i1) i1  
            REQUEST Viaai(i,a1,a,i1) i1  
            REQUEST Vaaii(a,a1,i1,i) i1  
            REQUEST Viaai(i1,a1,a,i) i
            GET Dab_a(a,a1) 
#
            Tpppp(i,i1,a,a1)  = Vaaii(a,a1,i,i1)  
            T1pppp(i,i1,a,a1) = Viaai(i,a1,a,i1)  
            T2pppp(i,i1,a,a1) = Vaaii(a,a1,i1,i)  
            T3pppp(i,i1,a,a1) = Viaai(i1,a1,a,i) 
#
            Tpppp(i,i1,a,a1) -= T1pppp(i,i1,a,a1)  
            Tpppp(i,i1,a,a1) += T2pppp(i,i1,a,a1)  
            Tpppp(i,i1,a,a1) -= T3pppp(i,i1,a,a1)  
#
            Tii(i,i1)         = Tpppp(i,i1,a,a1)*Dab_a(a,a1) 
            Tii(i,i1)        *= -0.5  
            PUT Iij_aa(i,i1) += Tii(i,i1) 
#
      ENDPARDO a, a1, i, i1 
#
      PARDO b, b1, i, i1 
#
            REQUEST Vaaii(b,b1,i,i1) b1  
            REQUEST Vaaii(b,b1,i1,i) b1  
            GET Dab_a(b,b1) 
#
            Tppqq(i,i1,b,b1)  = Vaaii(b,b1,i,i1)  
            T2ppqq(i,i1,b,b1) = Vaaii(b,b1,i1,i)  
            Tppqq(i,i1,b,b1) += T2ppqq(i,i1,b,b1)  
#
            Tii(i,i1)         = Tppqq(i,i1,b,b1)*Dab_a(b,b1) 
            Tii(i,i1)        *= -0.5  
            PUT Iij_aa(i,i1) += Tii(i,i1) 
#
      ENDPARDO b, b1, i, i1 
#
#     Dij contribution 
#     ---------------- 
#
      PARDO i2, i3, i, i1 
#
            REQUEST VSpipi(i2,i3,i,i1) i1  
            REQUEST VSpipi(i2,i3,i1,i) i
            GET Dij_a(i2,i3) 
#
            Tpppp(i,i1,i2,i3)  = VSpipi(i2,i3,i,i1)  
            T2pppp(i,i1,i2,i3) = VSpipi(i2,i3,i1,i)  
            Tpppp(i,i1,i2,i3) += T2pppp(i,i1,i2,i3)  
#
            Tii(i,i1)          = Tpppp(i,i1,i2,i3)*Dij_a(i2,i3) 
            Tii(i,i1)         *= -0.5  
            PUT Iij_aa(i,i1)  += Tii(i,i1) 
#
      ENDPARDO i2, i3, i, i1 
#
      PARDO j, j1, i, i1 
#
            REQUEST Vpiqj(i,i1,j,j1) j1  
            REQUEST Vpiqj(i1,i,j,j1) j1  
            GET Dij_a(j,j1) 
#
            Tppqq(i,i1,j,j1)  = Vpiqj(i,i1,j,j1)  
            T2ppqq(i,i1,j,j1) = Vpiqj(i1,i,j,j1)  
            Tppqq(i,i1,j,j1) += T2ppqq(i,i1,j,j1)  
#
            Tii(i,i1)         = Tppqq(i,i1,j,j1)*Dij_a(j,j1) 
            Tii(i,i1)        *= -0.5  
            PUT Iij_aa(i,i1) += Tii(i,i1) 
#
      ENDPARDO j, j1, i, i1 
# 
# DONE Compute contribution to Iij_aa 
# ----------------------------------- 
#
     ENDPROC I11 
#    ----------- 
#
# This procedure computes the contributions to the intermediate
# Iij_a which contain the Fock matrix. First-term of equation 43
# and computed in dfini.f.
#
# Equation programmed:
#
#     I(i,j) = - f(i,m) D(j,m)
#
      PROC FOCKIIJA
#     -------------
#
      PARDO i, i1
#
           #Tii(i,i1) = 0.0 # Used to be in ground state grad Watson, Fock_a(i,i1)
            Tii(i,i1) = Fock_a (i,i1)
           #Tii(i,i1)*= -1.0
#
            DO i2
#
            IF i2 == i
#
               GET                 DOR_ii(i1,i2)
               T1ii(i,i1)        = DOR_ii(i1,i2)*Fock_a(i2,i)
               Tii(i,i1)        += T1ii(i,i1)
#
            ENDIF # i2 == i
#
            ENDDO i2
#
            Tii(i,i1)        *= -1.0
            PUT Iij_aa(i,i1) += Tii(i,i1)
#
      ENDPARDO i, i1
#
# Also subtract out Dai contribution Eq. 56 
# ----------------------------------------- 
#
      PARDO i, i1, a, i2 
#
            REQUEST VSpipi(a,i2,i,i1) i1  
            REQUEST VSpipi(i1,i,a,i2) i2  
            GET Doldai_a(a,i2) 
#
            Tpppp(i,i1,a,i2)  = VSpipi(a,i2,i,i1) 
            T2pppp(i,i1,a,i2) = VSpipi(i1,i,a,i2)  
            Tpppp(i,i1,a,i2) += T2pppp(i,i1,a,i2)  
#
            Tii(i,i1)         = Tpppp(i,i1,a,i2)*Doldai_a(a,i2)
            Tii(i,i1)        *= -1.0 
            PUT Iij_aa(i,i1) += Tii(i,i1)
# 
      ENDPARDO i, i1, a, i2 
#
      PARDO i, i1, b, j 
#
            REQUEST Vpiqj(i,i1,b,j) j 
            REQUEST Vpiqj(i1,i,b,j) j   
            GET Doldai_a(b,j) 
#
            Tppqq(i,i1,b,j)   = Vpiqj(i,i1,b,j)  
            T2ppqq(i,i1,b,j)  = Vpiqj(i1,i,b,j)  
            Tppqq(i,i1,b,j)  += T2ppqq(i,i1,b,j)  
#
            Tii(i,i1)         = Tppqq(i,i1,b,j)*Doldai_a(b,j)
            Tii(i,i1)        *= -1.0 
#
            PUT Iij_aa(i,i1) += Tii(i,i1)
# 
      ENDPARDO i, i1, b, j 
#
# Add contributions from o-o and v-v orbital response. 
# ---------------------------------------------------- 
#
      PARDO i, i1, i2, i3 
#
            REQUEST             VSpipi(i,i1,i2,i3) i 
            GET                 DOR_ii(i2,i3) 
            Tii(i,i1)         = VSpipi(i,i1,i2,i3)*DOR_ii(i2,i3) 
            Tii(i,i1)        *= -1.0  
            PUT Iij_aa(i,i1) += Tii(i,i1)
#
      ENDPARDO i, i1, i2, i3 
#
      PARDO i, i1, j2, j3 
#
            REQUEST             Vpiqj(i,i1,j2,j3) i 
            GET                 DOR_ii(j2,j3) 
            Tii(i,i1)         = Vpiqj(i,i1,j2,j3)*DOR_ii(j2,j3) 
            Tii(i,i1)        *= -1.0  
            PUT Iij_aa(i,i1) += Tii(i,i1)
#
      ENDPARDO i, i1, j2, j3 
#
      PARDO i, i1, a2, a3 
#
            REQUEST             Vaaii(a2,a3,i,i1) i 
            REQUEST             Viaai(i,a3,a2,i1) i 
            GET                 DOR_aa(a2,a3) 
            tpppp(i,i1,a2,a3) = Vaaii(a2,a3,i,i1)  
            t1pppp(i,i1,a2,a3)= Viaai(i,a3,a2,i1)   
            tpppp(i,i1,a2,a3)-= t1pppp(i,i1,a2,a3) 
            Tii(i,i1)         = tpppp(i,i1,a2,a3)*DOR_aa(a2,a3) 
            Tii(i,i1)        *= -1.0  
            PUT Iij_aa(i,i1) += Tii(i,i1)
#
      ENDPARDO i, i1, a2, a3 
#
      PARDO i, i1, b2, b3 
#
            REQUEST             Vaaii(b2,b3,i,i1) i 
            GET                 DOR_aa(b2,b3) 
            Tii(i,i1)         = Vaaii(b2,b3,i,i1)*DOR_aa(b2,b3) 
            Tii(i,i1)        *= -1.0  
            PUT Iij_aa(i,i1) += Tii(i,i1)
#
      ENDPARDO i, i1, b2, b3 
#
      ENDPROC FOCKIIJA
#     ----------------
#
# This procedure computes the contributions to the intermediate
# Iab_a which contain the Fock matrix. First-term of equation 43
# and computed in dfini.f.
#
# Equation programmed:
#
#     I(a,b) = - f(a,e) D(b,e)
#
      PROC FOCKIABA
#     -------------
#
      PARDO a, a1
#
            DO a2
#
               IF a2 == a 
#
                  GET                 DOR_aa(a2,a1)
                  Taa(a,a1)         = Fock_a(a,a2)*DOR_aa(a2,a1)
                  Taa(a,a1)        *= -1.0
                  PUT Iab_aa(a,a1) += Taa(a,a1)
#
               ENDIF # a2 == a 
#
            ENDDO a2
#
      ENDPARDO a, a1
#
      ENDPROC FOCKIABA
#     ----------------
#
# This procedure computes the contributions to the intermediate
# Iab_b which contain the Fock matrix. First-term of equarion 43
# and computed in dfini.f.
#
# Equation programmed:
#
#     I(A,B) = - f(A,E) D(B,E)
#
      PROC FOCKIABB
#     -------------
#
      PARDO a, i 
#
            Tia(i,a) = 0.0 
#
            DO i1 
#
               IF i1 == i 
#
               GET Doldai_a(a,i1) 
#
               T1ia(i,a) = Doldai_a(a,i1)*fock_a(i1,i) 
               Tia(i,a) -= T1ia(i,a) 
#
               ENDIF # i1 == i 
#
            ENDDO i1 
#
            PUT Iia_aa(i,a) += Tia(i,a) 
#
      ENDPARDO a, i 
#
# Calculate contribution to Iai_aa 
# -------------------------------- 
#
#    PARDO a, i, i1, i2  
#
#          REQUEST VSpipi(a,i2,i1,i) i
#          GET Dor_ii(i1,i2) 
#
#          Tpppp(a,i,i1,i2)  = VSpipi(a,i2,i1,i) 
#          Tai(a,i)          = Tpppp(a,i,i1,i2)*Dor_ii(i1,i2) 
#          Tai(a,i)         *= -1.0  
#          PUT Iai_aa(a,i)  += Tai(a,i) 
#
#    ENDPARDO a, i, i1, i2  
#
#    PARDO a, j, j1, i 
#
#          REQUEST Vpiqj(a,i,j,j1) j1  
#          GET Dor_jj(j,j1) 
#
#          Tai(a,i)         = Vpiqj(a,i,j,j1)*Dor_jj(j,j1) 
#          PUT Iai_aa(a,i) += Tai(a,i) 
#
#    ENDPARDO a, j, j1, i 
#
#    PARDO a, a1, a2, i 
#
#          REQUEST VSaaai(a,a1,a2,i) i
#          GET Dor_aa(a2,a1) 
#
#          Tpppp(a,i,a2,a1)  = VSaaai(a,a1,a2,i) 
#          Tai(a,i)          = Tpppp(a,i,a2,a1)*Dor_aa(a2,a1) 
#          Tai(a,i)         *= -1.0   
#          PUT Iai_aa(a,i)  += Tai(a,i) 
#
#    ENDPARDO a, a1, a2, i 
#
#    PARDO a, b, b1, i 
#
#          REQUEST Vbbai(b1,b,a,i) i
#          GET Dor_bb(b1,b) 
#
#          Tai(a,i)         = Vbbai(b1,b,a,i)*Dor_bb(b1,b) 
#          PUT Iai_aa(a,i) += Tai(a,i) 
#
#    ENDPARDO a, b, b1, i 
#
# Done contribution to Iai_aa 
# --------------------------- 
#
# Calculate contribution to Iai_bb 
# -------------------------------- 
#
#    PARDO b, j1, j2, j 
#
#          REQUEST VSqjqj(b,j1,j2,j) j
#          GET Dor_jj(j1,j2) 
#
#          Tqqqq(b,j,j1,j2)  = VSqjqj(b,j1,j2,j) 
#          Tbj(b,j)          = Tqqqq(b,j,j1,j2)*Dor_jj(j1,j2) 
#          Tbj(b,j)         *= -1.0   
#          PUT Iai_bb(b,j)  += Tbj(b,j) 
#
#    ENDPARDO b, j1, j2, j 
#
#    PARDO b, i, i1, j 
#
#          REQUEST Vpiqj(i1,i,b,j) j
#          GET Dor_ii(i,i1) 
#
#          Tbj(b,j)         = Vpiqj(i1,i,b,j)*Dor_ii(i,i1) 
#          PUT Iai_bb(b,j) += Tbj(b,j) 
#
#    ENDPARDO b, i, i1, j 
#
#    PARDO b, b1, b2, j 
#
#          REQUEST VSbbbj(b,b1,b2,j) j
#          GET Dor_bb(b1,b2) 
#
#          Tqqqq(b,j,b1,b2)  = VSbbbj(b,b1,b2,j) 
#          Tbj(b,j)          = Tqqqq(b,j,b1,b2)*Dor_bb(b1,b2) 
#          Tbj(b,j)         *= -1.0   
#          PUT Iai_bb(b,j)  += Tbj(b,j) 
#
#    ENDPARDO b, b1, b2, j 
#
#    PARDO b, a, a1, j 
#
#          REQUEST Vaabj(a1,a,b,j) j  
#          GET Dor_aa(a,a1) 
#
#          Tbj(b,j)         = Vaabj(a1,a,b,j)*Dor_aa(a,a1) 
#          PUT Iai_bb(b,j) += Tbj(b,j) 
#
#    ENDPARDO b, a, a1, j 
#
      ENDPROC FOCKIABB
#     ----------------
#
      PROC IFOCK
#     ----------
           CALL FOCKIIJA
           CALL FOCKIABA
           CALL FOCKIABB
      ENDPROC IFOCK
#     -------------
# 
# ----------------------------------------------------------------------------------------
#
      PROC IFOCK_PP 
#     -------------
#
      PARDO i, i1 
#
           #Tii(i,i1) = Fock_a(i,i1) # Used to be 0.0 Watson for ground state grads
            Tii(i,i1) = 0.0
#
            DO i2 
#
            IF i2 == i 
#
               GET Dij_a(i1,i2)
#
               T1ii(i,i1)        = Dij_a(i1,i2)*Fock_a(i2,i)
               Tii(i,i1)        += T1ii(i,i1)  
#
            ENDIF # i2 == i 
#
            ENDDO i2 
#
            Tii(i,i1)        *= -1.0 
            PUT Iij_aa(i,i1) += Tii(i,i1)
#
      ENDPARDO i, i1 
#
      PARDO a, a1
#
            DO a2
#
               IF a2 == a 
#
                  GET                 Dab_a(a1,a2)
                  Taa(a,a1)         = Fock_a(a,a2)*Dab_a(a1,a2)
                  Taa(a,a1)        *= -1.0
                  PUT Iab_aa(a,a1) += Taa(a,a1)
#
               ENDIF # a2 == a 
#
            ENDDO a2
#
      ENDPARDO a, a1
#
      ENDPROC IFOCK_PP 
#     ----------------
# 
# ----------------------------------------------------------------------------------------
#
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
#
# --------------------------------------------------------------------------- 
#
#
# -----------------------------------------------------------------------------
#
# Expression programmed: Equivalent to gamma2.  
#
# D^{ab}_{cd} = 1/16 P_+(ab,cd) \Tau^{ab}_{ij} \lambda^{ij}_{cd} 
# 4* D is stored to be consistent with acess 
#
# -----------------------------------------------------------------------------
#
      PROC DABCDAA 
#     ------------- 
#
      PARDO a, a2, a1, a3 
#
            Dabcd_aa(a,a1,a2,a3)  = 0.0  
            DXabcd_aa(a2,a3,a,a1) = 0.0  
#
            DO i 
            DO i1 
#
              #REQUEST Tau_aa(a,i,a1,i1)    i1  
              #REQUEST A2old_aa(i,a2,i1,a3) a3  
              #Taaii(a,a1,i,i1)  = Tau_aa(a,i,a1,i1)
              #Tiiaa(i,i1,a2,a3) = A2old_aa(i,a2,i1,a3) 
#             #Taaaa(a,a1,a2,a3)      = Tau_aa(a,i,a1,i1)*A2old_aa(i,a2,i1,a3)
              #Taaaa(a,a1,a2,a3)      = Taaii(a,a1,i,i1)*Tiiaa(i,i1,a2,a3)
#
               REQUEST                  LTau_aa(a,a1,i,i1) a 
               REQUEST                  LA2old_aa(i,i1,a2,a3) a2 
#
               REQUEST                  RTAU_aa(a,i,a1,i1) a
               REQUEST                  L2AA   (i,a2,i1,a3) a2
#
               Taaaa(a,a1,a2,a3)      = LTau_aa(a,a1,i,i1)*LA2old_aa(i,i1,a2,a3)

               Tpppp(a,a1,a2,a3)     = RTAU_aa (a,i,a1,i1) * L2AA (i,a2,i1,a3)

               Taaaa(a,a1,a2,a3)    += Tpppp(a,a1,a2,a3)
               Taaaa(a,a1,a2,a3)     *= 0.25

               T1aaaa(a2,a3,a,a1)     = Taaaa(a,a1,a2,a3)
#
                Dabcd_aa(a,a1,a2,a3) += Taaaa(a,a1,a2,a3)
               DXabcd_aa(a2,a3,a,a1) += T1aaaa(a2,a3,a,a1) 
#
            ENDDO i1 
            ENDDO i 
#
# Compute contributions to one-particle intermediates 
# --------------------------------------------------- 
#
#           Second-term of Iia_aa 
#           --------------------- 
#
            t2aaaa(a1,a2,a3,a) = Dabcd_aa(a,a1,a2,a3) 
            t3aaaa(a1,a,a3,a2) = DXabcd_aa(a2,a3,a,a1) 
            DO i
#
               REQUEST VSaaai(a3,a1,a2,i) i
               REQUEST VSaaai(a1,a3,a,i)  i  
#
               Tiaaa(i,a1,a2,a3)  = VSaaai(a3,a1,a2,i)
#
              #Tia(i,a)           = Dabcd_aa(a,a1,a2,a3)*Tpppp(a1,a2,a3,i)
               Tia(i,a)           = Tiaaa(i,a1,a2,a3)*t2aaaa(a1,a2,a3,a)
               Tia(i,a)          *= -0.5  
               PUT Iia_aa(i,a)   += Tia(i,a)
#
               T1iaaa(i,a1,a,a3)   = VSaaai(a1,a3,a,i)
#
              #Tia(i,a2)          = DXabcd_aa(a2,a3,a,a1)*Tpppp(a3,a,a1,i)
               Tia(i,a2)          = T1iaaa(i,a1,a,a3)*t3aaaa(a1,a,a3,a2)  
               Tia(i,a2)         *=-0.5  
               PUT Iia_aa(i,a2)  += Tia(i,a2)
#
            ENDDO i
#
# Done contributions to one-particle intermediates 
# ------------------------------------------------ 
#
      ENDPARDO a, a2, a1, a3 
#
      ENDPROC DABCDAA 
#     ---------------- 
#
# -----------------------------------------------------------------------------
#
# -----------------------------------------------------------------------------
#
# Expression programmed: 
#
# D^{aB}_{cD} = 1/8 P_+(aB,cD) \Tau^{aB}_{iJ} \lambda^{iJ}_{cD} 
# 4* D is stored to be consistent with acess 
#
# -----------------------------------------------------------------------------
#
      PROC DABCDAB 
#     ------------- 
# 
      PARDO a, a1, b, b1 
#
            Dabcd_ab(a,b,a1,b1)  = 0.0  
            DXabcd_ab(a1,b1,a,b) = 0.0 
#
            DO i 
            DO j 
#
              #REQUEST Tau_ab(a,i,b,j)     j  
              #REQUEST A2old_ab(i,a1,j,b1) b1  
              #Tabij(a,b,i,j)        = Tau_ab(a,i,b,j) 
              #Tijab(i,j,a1,b1)      = A2old_ab(i,a1,j,b1) 
#             #Tabab(a,b,a1,b1)      = Tau_ab(a,i,b,j)*A2old_ab(i,a1,j,b1) 
              #Tabab(a,b,a1,b1)      = Tabij(a,b,i,j)*Tijab(i,j,a1,b1) 
#
               REQUEST LTau_ab(a,b,i,j) a 
               REQUEST LA2old_ab(i,j,a1,b1) i 

               REQUEST RTAU_ab (a,i,b,j) j
               REQUEST L2AB    (i,a1,j,b1) j

               Tabab(a,b,a1,b1)      = LTau_ab(a,b,i,j)*LA2old_ab(i,j,a1,b1) 

               Tpqpq(a,b,a1,b1)      = RTAU_ab(a,i,b,j)*L2AB (i,a1,j,b1)

               Tabab(a,b,a1,b1)     += Tpqpq(a,b,a1,b1)

               Tabab(a,b,a1,b1)     *= 0.5  
               T1abab(a1,b1,a,b)     = Tabab(a,b,a1,b1)  
#
                Dabcd_ab(a,b,a1,b1) += Tabab(a,b,a1,b1)  
               DXabcd_ab(a1,b1,a,b) += T1abab(a1,b1,a,b)  
#
            ENDDO j 
            ENDDO i 
#
# Compute contributions to one-particle intermediates 
# --------------------------------------------------- 
#
#           Second-term of Iia_aa 
#           --------------------- 
#
            tqqpp(b,b1,a1,a) = Dabcd_ab(a,b,a1,b1) 
            t1qqpp(b,b1,a,a1)= DXabcd_ab(a1,b1,a,b) 

            DO i
#
               REQUEST Vaabj(b1,b,a1,i) i 
               REQUEST Vaabj(b,b1,a,i)  i 
#
               tpqqp(i,b,b1,a1)  = Vaabj(b1,b,a1,i) 
              #Tia(i,a)          = Dabcd_ab(a,b,a1,b1)*Vbbai(b1,b,a1,i) 
               Tia(i,a)          = tpqqp(i,b,b1,a1)*tqqpp(b,b1,a1,a)  
               Tia(i,a)         *= -1.0
               PUT Iia_aa(i,a)  += Tia(i,a)
#
               tpqqp(i,b,b1,a)   = Vaabj(b,b1,a,i) 
              #Tia(i,a1)         = DXabcd_ab(a1,b1,a,b)*Vbbai(b,b1,a,i)
               Tia(i,a1)         = tpqqp(i,b,b1,a)*t1qqpp(b,b1,a,a1)  
               Tia(i,a1)        *= -1.0
               PUT Iia_aa(i,a1) += Tia(i,a1)
#
            ENDDO i
#
# Done contributions to one-particle intermediates 
# ------------------------------------------------ 
#
      ENDPARDO a, a1, b, b1 
#
      ENDPROC DABCDAB 
#     ---------------- 
# 
      PROC DABCD 
#     ---------- 
#
# Create gamma arrays 
# ------------------- 
#
           CALL DABCDAA 
           CALL DABCDAB 
# 
      ENDPROC DABCD 
#     -------------  
#
# ------------------------------------------------------------------------- 
#
# Start the calculation of the D^{ab}_{ci} type contributions to the
# density. Equivalent to Gamma5   
#
# ------------------------------------------------------------------------- 
#
      PROC DABCIAAAA 
#     ---------------

      PARDO a, a1, a2, i 
#
            Taaai(a,a1,a2,i) = 0.0  
#
            GET Gae_a(a2,a) 
            GET t1a_old(a1,i) 
            GET Gae_a(a2,a1) 
            GET t1a_old(a,i) 
#
            T1aaai(a,a1,a2,i)  = Gae_a(a2,a)^t1a_old(a1,i) 
            T1aaai(a,a1,a2,i) *= -0.125 
            Taaai(a,a1,a2,i)  += T1aaai(a,a1,a2,i)  
#
            T1aaai(a,a1,a2,i)  = Gae_a(a2,a1)^t1a_old(a,i)
            T1aaai(a,a1,a2,i) *= 0.125
            Taaai(a,a1,a2,i)  += T1aaai(a,a1,a2,i)
#
            DO i1 
#
               REQUEST Tau_aa(a,i1,a1,i)      i1  
               REQUEST A2old_aa(i1,a,i,a1)    i1  
               REQUEST Vibja_aaaa(i,a2,i1,a)  i1  
               REQUEST Vibja_aaaa(i,a2,i1,a1) i1  
               GET a1a_old(i1,a2) 
               GET t1a_old(a2,i1) 
               GET t1a_old(a1,i1) 
               GET t1a_old(a,i1) 
#
               T1aaai(a,a1,a2,i)  = Tau_aa(a,i1,a1,i)*a1a_old(i1,a2) 
               T1aaai(a,a1,a2,i) *= 0.125 
               Taaai(a,a1,a2,i)  += T1aaai(a,a1,a2,i)   # Checked Watson
#
               T1aaai(a,a1,a2,i)  = A2old_aa(i1,a,i,a1)*t1a_old(a2,i1) 
               T1aaai(a,a1,a2,i) *= 0.125 
               Taaai(a,a1,a2,i)  += T1aaai(a,a1,a2,i)  # Checked Watson
#
               T1aaai(a,a1,a2,i)  = Vibja_aaaa(i,a2,i1,a)*t1a_old(a1,i1)  
               T1aaai(a,a1,a2,i) *= -0.25 
               Taaai(a,a1,a2,i)  += T1aaai(a,a1,a2,i)   # Checked Watson
#
               T1aaai(a,a1,a2,i)  = Vibja_aaaa(i,a2,i1,a1)*t1a_old(a,i1)  
               T1aaai(a,a1,a2,i) *= 0.25 
               Taaai(a,a1,a2,i)  += T1aaai(a,a1,a2,i)   # Checked Watson
#
               DO i2 
#
                  GET     I3aa(i1,a2,i2,i)
                  REQUEST Tau_aa(a,i1,a1,i2) i2 
#
#                 T1aaai(a,a1,a2,i)  = Tau_aa(a,i1,a1,i2)*I3aa(i1,a2,i2,i)
#
                  Taaii(a,a1,i1,i2)  = Tau_aa(a,i1,a1,i2)
                  Tiiai(i1,i2,a2,i)  = I3aa(i1,a2,i2,i)
                  T1aaai(a,a1,a2,i)  = Taaii(a,a1,i1,i2)*Tiiai(i1,i2,a2,i)
                  T1aaai(a,a1,a2,i) *= -0.0625
                  Taaai(a,a1,a2,i)  += T1aaai(a,a1,a2,i) # Checked Watson
#
               ENDDO i2 
#
            ENDDO i1 

#            DO mu 
#               Txaai(mu,a1,a2,i)      = Taaai(a,a1,a2,i)*ca(mu,a) 
#               PREPARE Dxaai(mu,a1,a2,i) += Txaai(mu,a1,a2,i)  
#            ENDDO mu 
#
# Multiply by 4 to match aces 
# --------------------------- 
#
            Taaai(a,a1,a2,i) *= 4.0 

            PREPARE Dabci_aaaa(a,a1,a2,i) += Taaai(a,a1,a2,i) 
 
  
      ENDPARDO a, a1, a2, i 
#
      ENDPROC DABCIAAAA 
#     ------------------
#
      PROC DABCIABAB 
#     --------------- 
#
      PARDO b1, b, a, i 
#
            Tbabi(b1,a,b,i) = 0.0 
#
            GET Gae_a(b,b1) 
            GET t1a_old(a,i) 
#
            T1babi(b1,a,b,i)  = Gae_a(b,b1)^t1a_old(a,i) 
            T1babi(b1,a,b,i) *= -0.125 
            Tbabi(b1,a,b,i)  += T1babi(b1,a,b,i) 
#
            DO j 
#
               REQUEST Tau_ab(a,i,b1,j)    j  
               REQUEST A2old_ab(i,a,j,b1)  j  
               REQUEST Vibja_abba(i,b,j,a) j  
               GET a1a_old(j,b) 
               GET t1a_old(b,j) 
               GET t1a_old(b1,j) 
               tbj (b1,j) = t1a_old (b1,j)
#
               T1babi(b1,a,b,i)  = Tau_ab(a,i,b1,j)*a1a_old(j,b) 
               T1babi(b1,a,b,i) *= 0.125 
               Tbabi(b1,a,b,i)  += T1babi(b1,a,b,i)  # Checked Watson
#
               T1babi(b1,a,b,i)  = A2old_ab(i,a,j,b1)*t1a_old(b,j)  
               T1babi(b1,a,b,i) *= 0.125 
               Tbabi(b1,a,b,i)  += T1babi(b1,a,b,i)  # Checked Watson
#
               T1babi(b1,a,b,i)  = Vibja_abba(i,b,j,a)*tbj (b1,j) 
               T1babi(b1,a,b,i) *= 0.25 
               Tbabi(b1,a,b,i)  += T1babi(b1,a,b,i)  # Checked Watson
#
            ENDDO j 
#
            DO i1 
#
               REQUEST Vibja_abab(i,b,i1,b1) b1  
               GET t1a_old(a,i1) 
#
               T1babi(b1,a,b,i)  = Vibja_abab(i,b,i1,b1)*t1a_old(a,i1) 
               T1babi(b1,a,b,i) *= -0.25 
               Tbabi(b1,a,b,i)  += T1babi(b1,a,b,i)  # Checked Watson
#
               DO j 
#
                  GET     I3ab(j,b,i1,i)
                  REQUEST Tau_ab(a,i1,b1,j) j 
#
#                 T1babi(b1,a,b,i)  = Tau_ab(a,i1,b1,j)*I3ba(j,b,i1,i)
#
                  Tbaji(b1,a,j,i1)  = Tau_ab(a,i1,b1,j)
                  Tjibi(j,i1,b,i)   = I3ab(j,b,i1,i)
                  T1babi(b1,a,b,i)  = Tbaji(b1,a,j,i1)*Tjibi(j,i1,b,i)
                  T1babi(b1,a,b,i) *= -0.125
                  Tbabi(b1,a,b,i)  += T1babi(b1,a,b,i) # Checked Watson
#
               ENDDO j 
#
            ENDDO i1 
#
#            DO mu 
#               Txabi(mu,a,b,i)      = Tbabi(b1,a,b,i)*ca(mu,b1) 
#               PREPARE Dxabi(mu,a,b,i) += Txabi(mu,a,b,i)  
#            ENDDO mu 
#
# Multiply by 4 to match aces 
# --------------------------- 
# 
            Tbabi(b1,a,b,i) *= 4.0 

            PREPARE Dabci_abab(b1,a,b,i) += Tbabi(b1,a,b,i) 
#
      ENDPARDO b1, b, a, i 

      ENDPROC DABCIABAB 
#     ------------------ 
#------------------------------------------------------------------------



#-------------------------------------------------------------------------
#
#     ---------------
      PROC  DABCI_EOM
#     ---------------
#
#
#       ab        ab  m       _ab  m
#      D   = 1/2 l   r  + 1/2 r   l  ; Note the transposition of the 1st term
#       ci        mi  c        mi  c
#
#
      PARDO  i2, a, a1, i
         REQUEST               L2AA    (i2,a,i,a1) i2              # DAIBC piece
         REQUEST               RTAU_aa (a,i2,a1,i) i2
         t1aaii (a,a1,i2,i)  = L2AA    (i2,a,i,a1)                 # DAIBC piece
         taaii  (a,a1,i2,i)  = RTAU_aa (a,i2,a1,i)
         t1aaii (a,a1,i2,i) *= 0.5                                 # DAIBC piece
         taaii  (a,a1,i2,i) *= 0.5
         DO a2
            GET  L1A (i2,a2)
            GET  R1A (a2,i2)
            tpppp  (a,a1,a2,i)  = taaii  (a,a1,i2,i) * L1A (i2,a2)
            t1pppp (a,a1,a2,i)  = t1aaii (a,a1,i2,i) * R1A (a2,i2) # DAIBC piece
            tpppp  (a,a1,a2,i) += t1pppp (a,a1,a2,i)
            PREPARE  Dabci_aaaa (a,a1,a2,i) += tpppp (a,a1,a2,i)
         ENDDO a2
      ENDPARDO  i2, a, a1, i

      PARDO  j2, a, b1, i
         REQUEST               L2AB    (i,a,j2,b1) j2              # DAIBC piece
         REQUEST               RTAU_ab (a,i,b1,j2) j2
         t1baji (b1,a,j2,i)  = L2AB    (i,a,j2,b1)                 # DAIBC piece
         tbaji  (b1,a,j2,i)  = RTAU_ab (a,i,b1,j2)
         t1baji (b1,a,j2,i) *= 0.5                                 # DAIBC piece
         tbaji  (b1,a,j2,i) *= 0.5
         DO b
            GET  R1A (b,j2)
            GET  L1A (j2,b)
            tqpqp  (b1,a,b,i)  = t1baji (b1,a,j2,i) * R1A (b,j2)   # DAIBC piece
            t1qpqp (b1,a,b,i)  = tbaji  (b1,a,j2,i) * L1A (j2,b)
            t1qpqp (b1,a,b,i) += tqpqp  (b1,a,b,i)
            PREPARE  Dabci_abab (b1,a,b,i) += t1qpqp (b1,a,b,i)
         ENDDO b
      ENDPARDO  j2, a, b1, i
#
#
#       ab        mn  e _ab        mn  e _ab
#      G   = 1/2 l   t  r   + 1/2 l   r  t
#       ci        ce  i  mn        ce  i  mn
#
#
      PARDO  i2, a2, i3, i
         tiiai  (i2,i3,a2,i) = 0.0
         t1iiai (i2,i3,a2,i) = 0.0
         DO a3
            REQUEST                L2AA (i2,a2,i3,a3) a3
            GET                    t1a_old (a3,i)
            GET                    R1A  (a3,i)
            tiiaa  (i2,i3,a2,a3) = L2AA (i2,a2,i3,a3)
            t2pppp (i2,i3,a2,i)  = tiiaa (i2,i3,a2,a3) * t1a_old (a3,i)
            t3pppp (i2,i3,a2,i)  = tiiaa (i2,i3,a2,a3) * R1A (a3,i)
            tiiai  (i2,i3,a2,i) += t2pppp (i2,i3,a2,i)
            t1iiai (i2,i3,a2,i) += t3pppp (i2,i3,a2,i)
         ENDDO a3
         DO a
         DO a1
            REQUEST               RTAU_aa (a,i2,a1,i3) a1
            REQUEST               TAU_aa  (a,i2,a1,i3) a1
            taaii  (a,a1,i2,i3) = RTAU_aa (a,i2,a1,i3)
            t1aaii (a,a1,i2,i3) = TAU_aa  (a,i2,a1,i3)
            tpppp  (a,a1,a2,i)  = taaii  (a,a1,i2,i3) * tiiai  (i2,i3,a2,i)
            t1pppp (a,a1,a2,i)  = t1aaii (a,a1,i2,i3) * t1iiai (i2,i3,a2,i)
            tpppp  (a,a1,a2,i) += t1pppp (a,a1,a2,i)
            tpppp  (a,a1,a2,i) *= -0.25
            PREPARE  Dabci_aaaa (a,a1,a2,i) += tpppp (a,a1,a2,i)
         ENDDO a1
         ENDDO a
      ENDPARDO  i2, a2, i3, i

      PARDO  i3, j2, b, i
         tjibi  (j2,i3,b,i) = 0.0
         t1jibi (j2,i3,b,i) = 0.0
         DO a3
            REQUEST               L2AB (i3,a3,j2,b) a3
            GET                   t1a_old  (a3,i)
            GET                   R1A      (a3,i)
            tjiba  (j2,i3,b,a3) = L2AB (i3,a3,j2,b)
            t2qpqp (j2,i3,b,i)  = tjiba  (j2,i3,b,a3) * t1a_old (a3,i)
            t3qpqp (j2,i3,b,i)  = tjiba  (j2,i3,b,a3) * R1A     (a3,i)
            tjibi  (j2,i3,b,i) += t2qpqp (j2,i3,b,i)
            t1jibi (j2,i3,b,i) += t3qpqp (j2,i3,b,i)
         ENDDO a3
         DO a
         DO b1
            REQUEST               RTAU_ab (a,i3,b1,j2) b1
            REQUEST               TAU_ab  (a,i3,b1,j2) b1
            tbaji  (b1,a,j2,i3) = RTAU_ab (a,i3,b1,j2)
            t1baji (b1,a,j2,i3) = TAU_ab  (a,i3,b1,j2)
            tpqpq  (b1,a,b,i)  = tbaji  (b1,a,j2,i3) * tjibi  (j2,i3,b,i)
            t1pqpq (b1,a,b,i)  = t1baji (b1,a,j2,i3) * t1jibi (j2,i3,b,i)
            tpqpq  (b1,a,b,i) += t1pqpq (b1,a,b,i)
            tpqpq  (b1,a,b,i) *= -0.5
            PREPARE  Dabci_abab (b1,a,b,i) += tpqpq (b1,a,b,i)
         ENDDO b1
         ENDDO a
      ENDPARDO  i3, j2, b, i
#
#
#       ab                ea  mn    b          ea  mn    b
#      G   = 1/4 P(ab) ( r   l   ) t  + 1/4 ( t   l   ) r
#       ci                mn  ec    i          mn  ec    i
#
#
      PARDO  a, a2, a1, i
         GET  R1A (a1,i)
         GET  t1a_old(a1,i)

         tpppp  (a2,a,a1,i)  = LR2L2_aa (a2,a) ^ t1a_old (a1,i)
         t1pppp (a2,a,a1,i)  = LT2L2_aa (a2,a) ^ R1A  (a1,i)
         tpppp  (a2,a,a1,i) += t1pppp (a2,a,a1,i)

         t2pppp (a,a1,a2,i)  = tpppp  (a2,a,a1,i)
         t3pppp (a1,a,a2,i)  = t2pppp (a,a1,a2,i)
         t2pppp (a,a1,a2,i) *= -0.5
         t3pppp (a1,a,a2,i) *=  0.5
         PREPARE  Dabci_aaaa (a,a1,a2,i) += t2pppp (a,a1,a2,i)
         PREPARE  Dabci_aaaa (a1,a,a2,i) += t3pppp (a1,a,a2,i)
      ENDPARDO  a, a2, a1, i

      PARDO  b1, a, b, i
         GET  R1A (a,i)
         GET  t1a_old(a,i)
         tppqq  (b,b1,a,i)  = LR2L2_aa (b,b1) ^ t1a_old (a,i)
         t1ppqq (b,b1,a,i)  = LT2L2_aa (b,b1) ^ R1A  (a,i)
         tppqq  (b,b1,a,i) += t1ppqq (b,b1,a,i)

         tpqpq  (b1,a,b,i)  = tppqq  (b,b1,a,i)
         tpqpq  (b1,a,b,i) *= -0.5
         PREPARE  Dabci_abab (b1,a,b,i) += tpqpq (b1,a,b,i)
      ENDPARDO  b1, a, b, i
#
#
#       ab              a    kn  fb          a    kn  fb
#      G   = 1/2 P(ab) t  ( l   r   ) + 1/2 r  ( l   t   )
#       ci              k    cf  ni          k    cf  ni
#
#
#           Note, these rings are used in Dijka and Dibja...
#
#
      PARDO  i2, a2, a1, i
         REQUEST               L2T2_aaaa (i,a2,i2,a1) i2
         REQUEST               L2R2_aaaa (i,a2,i2,a1) i2
         tiaai  (i2,a1,a2,i) = L2R2_aaaa (i,a2,i2,a1)
         t1iaai (i2,a1,a2,i) = L2T2_aaaa (i,a2,i2,a1)
         DO a
            GET  R1A (a,i2)
            GET  t1a_old(a,i2)
            tpppp  (a,a1,a2,i)  = t1a_old (a,i2) * tiaai  (i2,a1,a2,i)
            t1pppp (a,a1,a2,i)  = R1A  (a,i2) * t1iaai (i2,a1,a2,i)
            tpppp  (a,a1,a2,i) += t1pppp (a,a1,a2,i)
            tpppp  (a,a1,a2,i) *= 0.5

            t2pppp (a1,a,a2,i)  = tpppp (a,a1,a2,i)
            t2pppp (a1,a,a2,i) *= -1.0

            PREPARE  Dabci_aaaa (a,a1,a2,i) += tpppp  (a,a1,a2,i)
            PREPARE  Dabci_aaaa (a1,a,a2,i) += t2pppp (a1,a,a2,i)
         ENDDO a
      ENDPARDO  i2, a2, a1, i

      PARDO  a, b, j2, i
         REQUEST             L2T2_abba (i,b,j2,a) a
         REQUEST             L2R2_abba (i,b,j2,a) a
         tjabi  (j2,a,b,i) = L2R2_abba (i,b,j2,a)
         t1jabi (j2,a,b,i) = L2T2_abba (i,b,j2,a)
         DO b1
            GET  R1A     (b1,j2)
            GET  t1a_old (b1,j2)
            tpqpq  (b1,a,b,i)  = t1a_old (b1,j2) * tjabi  (j2,a,b,i)
            t1pqpq (b1,a,b,i)  = R1A     (b1,j2) * t1jabi (j2,a,b,i)
            tpqpq  (b1,a,b,i) += t1pqpq (b1,a,b,i)
            tpqpq  (b1,a,b,i) *=  0.5
            PREPARE  Dabci_abab (b1,a,b,i) += tpqpq (b1,a,b,i)
         ENDDO b1
      ENDPARDO  a, b, j2, i

      PARDO  i2, b, b1, i
         REQUEST              L2T2_abab (i,b1,i2,b) i2
         REQUEST              L2R2_abab (i,b1,i2,b) i2
         tbibi  (b1,i2,b,i) = L2R2_abab (i,b1,i2,b)
         t1bibi (b1,i2,b,i) = L2T2_abab (i,b1,i2,b)
         DO a
            GET  R1A (a,i2)
            GET  t1a_old(a,i2)
            tpqpq  (b1,a,b,i)  = t1a_old (a,i2) * tbibi  (b1,i2,b,i)
            t1pqpq (b1,a,b,i)  = R1A     (a,i2) * t1bibi (b1,i2,b,i)
            tpqpq  (b1,a,b,i) += t1pqpq (b1,a,b,i)
            tpqpq  (b1,a,b,i) *= -0.5
            PREPARE  Dabci_abab (b1,a,b,i) += tpqpq (b1,a,b,i)
         ENDDO a
      ENDPARDO  i2, b, b1, i
#
#
#       ab        e    mn _ab
#      G   = 1/2 r  ( l   t   )
#       ci        m    ec  ni
#
#
      PARDO  i2, a, a1, i
         REQUEST             TAU_aa  (a1,i,a,i2) i2
         taaii (a,a1,i2,i) = TAU_aa  (a1,i,a,i2)
         DO a2
            tpppp (a,a1,a2,i)  = taaii (a,a1,i2,i) * LR1L2_ai (a2,i2)
            tpppp (a,a1,a2,i) *= 0.5
            PREPARE  Dabci_aaaa (a,a1,a2,i) += tpppp (a,a1,a2,i)
         ENDDO a2
      ENDPARDO  i2, a, a1, i

      PARDO  j2, a, b1, i
         REQUEST             TAU_ab (a,i,b1,j2) j2
         tbaji (b1,a,j2,i) = TAU_ab (a,i,b1,j2)
         DO b
            tpqpq (b1,a,b,i)  = LR1L2_ai (b,j2) * tbaji (b1,a,j2,i)
            tpqpq (b1,a,b,i) *= 0.5
            PREPARE  Dabci_abab (b1,a,b,i) += tpqpq (b1,a,b,i)
         ENDDO b
      ENDPARDO  j2, a, b1, i
#
#
#          ...ready!
#
#
      ENDPROC  DABCI_EOM
#-------------------------------------------------------------------------

#------------------------------------------------------------------------
      PROC DABCI  
#     ---------- 
#
# Create distributed intermediate arrays 
# -------------------------------------- 
#
      CALL DABCI_EOM
      CALL DABCIAAAA
      CALL DABCIABAB

     #CALL IAIXX 
#
# Delete distributed intermediate arrays 
# -------------------------------------- 
#
      ENDPROC DABCI 
#     ------------- 
# 
# @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
#
# Contributions depending in Vabcd are computed in this procedure 
# 'directly'. Since these integrals are not stored the terms:
# Iab_aa(2) and Iab_bb(2), and Iai_aa(6) and Iai_bb(6) must be 
# computed differently than earlier. 
#
     PROC IABAA1 
#    ----------- 
#
#    Form Half back transformed cluster array
#    ----------------------------------------
#
     PARDO a, a1, i, i1
#
           REQUEST Tau_aa(a,i,a1,i1) i1 
#
           DO lambda
#
              Zaa(lambda,i,a1,i1) = Tau_aa(a,i,a1,i1)*ca(lambda,a)
#
              DO sigma
#
                 ZZaa(lambda,i,sigma,i1)        = Zaa(lambda,i,a1,i1)*ca(sigma,a1)
                 PREPARE TAO_aa(lambda,i,sigma,i1) += ZZaa(lambda,i,sigma,i1)
#
              ENDDO sigma
#
           ENDDO lambda
#
     ENDPARDO a, a1, i, i1
#
# Watson, EOM GRADIENT
#
     PARDO a, a1, i, i1
#
           REQUEST RTau_aa(a,i,a1,i1) i1
#
           DO lambda
#
              Zaa(lambda,i,a1,i1) = RTau_aa(a,i,a1,i1)*ca(lambda,a)
#
              DO sigma
#
                 ZZaa(lambda,i,sigma,i1)        = Zaa(lambda,i,a1,i1)*ca(sigma,a1)
                 PREPARE RTAO_aa(lambda,i,sigma,i1) += ZZaa(lambda,i,sigma,i1)
#
              ENDDO sigma
#
           ENDDO lambda
#
     ENDPARDO a, a1, i, i1

#
#    Form Half back transformed lambda array
#    ---------------------------------------
#
     PARDO a, a1, i, i1
#
           REQUEST A2old_aa(i,a,i1,a1) a1 
#
           DO lambda
#
              Qaa(i,lambda,i1,a1) = A2old_aa(i,a,i1,a1)*ca(lambda,a)
#
              DO sigma
#
                 QQaa(i,lambda,i1,sigma)        = Qaa(i,lambda,i1,a1)*ca(sigma,a1)
                 PREPARE LAO_aa(i,lambda,i1,sigma) += QQaa(i,lambda,i1,sigma)
#
              ENDDO sigma
#
           ENDDO lambda
#
     ENDPARDO a, a1, i, i1
#
# Watson, eom gradient
#
     PARDO a, a1, i, i1
#          
           REQUEST  L2AA (i,a,i1,a1) a1
#          
           DO lambda
#             
              Qaa(i,lambda,i1,a1) = L2AA (i,a,i1,a1)*ca(lambda,a)
#             
              DO sigma
#                
                 QQaa(i,lambda,i1,sigma)        = Qaa(i,lambda,i1,a1)*ca(sigma,a1)
                 PREPARE LLAO_aa(i,lambda,i1,sigma) += QQaa(i,lambda,i1,sigma)
#             
              ENDDO sigma
#          
           ENDDO lambda
#    
     ENDPARDO a, a1, i, i1

     execute server_barrier 
#
#    Contract Half back transformed arrays with AO integrals 
#    --> Txixi and T1xixi 
#    ------------------------------------------------------- 
#
     PARDO lambda, sigma, mu, nu  
#
           compute_integrals aoint(mu,lambda,nu,sigma) 
#
           DO i 
           DO i1 
#
              REQUEST Tao_aa(mu,i,nu,i1) i1  
              REQUEST Lao_aa(i,mu,i1,nu) i1 
#
              Txixi(lambda,i,sigma,i1)      = Tao_aa(mu,i,nu,i1)*aoint(mu,lambda,nu,sigma) 
              PREPARE Ixixi(lambda,i,sigma,i1) += Txixi(lambda,i,sigma,i1) 
#
              T1xixi(lambda,i,sigma,i1) = Lao_aa(i,mu,i1,nu)*aoint(mu,lambda,nu,sigma) 
              PREPARE I1xixi(lambda,i,sigma,i1) += T1xixi(lambda,i,sigma,i1) 
#
           ENDDO i1 
           ENDDO i 
#
     ENDPARDO lambda, sigma, mu, nu  

     PARDO lambda, sigma, mu, nu
#
           compute_integrals aoint(mu,lambda,nu,sigma)
#
           DO i
           DO i1
#
              REQUEST RTao_aa(mu,i,nu,i1) i1
              REQUEST LLao_aa(i,mu,i1,nu) i1
#
              Txixi(lambda,i,sigma,i1)      = RTao_aa(mu,i,nu,i1)*aoint(mu,lambda,nu,sigma)
              PREPARE IRxixi(lambda,i,sigma,i1) += Txixi(lambda,i,sigma,i1)
#
              T1xixi(lambda,i,sigma,i1) = LLao_aa(i,mu,i1,nu)*aoint(mu,lambda,nu,sigma)
              PREPARE ILxixi(lambda,i,sigma,i1) += T1xixi(lambda,i,sigma,i1)
#
           ENDDO i1
           ENDDO i
#
     ENDPARDO lambda, sigma, mu, nu

     execute server_barrier 
#
#    Transform I and I1 
#    ------------------ 
#
     PARDO lambda, sigma, i, i1 
#
           REQUEST Ixixi(lambda,i,sigma,i1)  i1  
           REQUEST I1xixi(lambda,i,sigma,i1) i1  
#
           DO a1 
#
              Txiai(lambda,i,a1,i1)  =  Ixixi(lambda,i,sigma,i1)*ca(sigma,a1) 
              T1xiai(lambda,i,a1,i1) = I1xixi(lambda,i,sigma,i1)*ca(sigma,a1) 
#
              DO a 
#
                 Taiai(a,i,a1,i1)       =  Txiai(lambda,i,a1,i1)*ca(lambda,a)  
                 T1aiai(a,i,a1,i1)      = T1xiai(lambda,i,a1,i1)*ca(lambda,a)  
#
                 PREPARE Iaiai(a,i,a1,i1)  += Taiai(a,i,a1,i1) 
                 PREPARE I1aiai(a,i,a1,i1) += T1aiai(a,i,a1,i1) 
#
                 T2aiai(a1,i,a,i1)      =  Taiai(a,i,a1,i1) 
                 T3aiai(a1,i,a,i1)      = T1aiai(a,i,a1,i1) 
#
                 T2aiai(a1,i,a,i1)     *= -1.0  
                 T3aiai(a1,i,a,i1)     *= -1.0  
#
                 PREPARE Iaiai(a1,i,a,i1)  += T2aiai(a1,i,a,i1) 
                 PREPARE I1aiai(a1,i,a,i1) += T3aiai(a1,i,a,i1) 
#
              ENDDO a 
#
           ENDDO a1 
#
     ENDPARDO lambda, sigma, i, i1 

     PARDO lambda, sigma, i, i1
#
           REQUEST IRxixi(lambda,i,sigma,i1)  i1
           REQUEST ILxixi(lambda,i,sigma,i1) i1
#
           DO a1
#
              Txiai(lambda,i,a1,i1)  = IRxixi(lambda,i,sigma,i1)*ca(sigma,a1)
              T1xiai(lambda,i,a1,i1) = ILxixi(lambda,i,sigma,i1)*ca(sigma,a1)
#
              DO a
#
                 Taiai(a,i,a1,i1)       =  Txiai(lambda,i,a1,i1)*ca(lambda,a)
                 T1aiai(a,i,a1,i1)      = T1xiai(lambda,i,a1,i1)*ca(lambda,a)

                 PREPARE IRaiai(a,i,a1,i1)  += Taiai(a,i,a1,i1)
                 PREPARE ILaiai(a,i,a1,i1) += T1aiai(a,i,a1,i1)
#
                 T2aiai(a1,i,a,i1)      =  Taiai(a,i,a1,i1)
                 T3aiai(a1,i,a,i1)      = T1aiai(a,i,a1,i1)
#
                 T2aiai(a1,i,a,i1)     *= -1.0
                 T3aiai(a1,i,a,i1)     *= -1.0
#
                 PREPARE IRaiai(a1,i,a,i1)  += T2aiai(a1,i,a,i1)
                 PREPARE ILaiai(a1,i,a,i1) += T3aiai(a1,i,a,i1)
#
              ENDDO a
#
           ENDDO a1
#
     ENDPARDO lambda, sigma, i, i1

     execute server_barrier 
#
#    Perform final contraction 
#    ------------------------- 
#
     PARDO a, a1, a2 
#
           DO i 
           DO i1 
#
              REQUEST  Iaiai(a,i,a2,i1)    a2  
              REQUEST I1aiai(a,i,a2,i1)    a2  
              REQUEST A2old_aa(i,a1,i1,a2) a2  
              REQUEST Tau_aa(a1,i,a2,i1)   a2  
#
              Taa(a,a1)         = Iaiai(a,i,a2,i1)*A2old_aa(i,a1,i1,a2) 
              T1aa(a,a1)        = I1aiai(a,i,a2,i1)*Tau_aa(a1,i,a2,i1) 
              Taa(a,a1)        += T1aa(a,a1) 
              Taa(a,a1)        *= -0.125 
              PUT Iab_aa(a,a1) += Taa(a,a1) 
#
           ENDDO i1 
           ENDDO i 
#
     ENDPARDO a, a1, a2 

     PARDO a, a1, a2
#
           DO i
           DO i1
#
              REQUEST IRaiai(a,i,a2,i1)    a2
              REQUEST ILaiai(a,i,a2,i1)    a2
              REQUEST L2AA (i,a1,i1,a2) a2
              REQUEST RTau_aa(a1,i,a2,i1)   a2
#
              Taa(a,a1)         = IRaiai(a,i,a2,i1)*L2AA (i,a1,i1,a2)
              T1aa(a,a1)        = ILaiai(a,i,a2,i1)*RTau_aa(a1,i,a2,i1)
              Taa(a,a1)        += T1aa(a,a1)
              Taa(a,a1)        *= -0.125
              PUT Iab_aa(a,a1) += Taa(a,a1)
#
           ENDDO i1
           ENDDO i
#
     ENDPARDO a, a1, a2

     execute sip_barrier 
     execute server_barrier 
#
     ENDPROC IABAA1 
#    -------------- 
#
     PROC IABAA2 
#    ----------- 
#
#    Form Half back transformed cluster array
#    ----------------------------------------
#
     PARDO a, b, i, j
#
           REQUEST Tau_ab(a,i,b,j) j 
#
           DO lambda
#
              Zab(lambda,i,b,j) = Tau_ab(a,i,b,j)*ca(lambda,a)
#
              DO sigma
#
                 ZZab(lambda,i,sigma,j)        = Zab(lambda,i,b,j)*ca(sigma,b)
                 PREPARE TAO_ab(lambda,i,sigma,j) += ZZab(lambda,i,sigma,j)
#
              ENDDO sigma
#
           ENDDO lambda
#
     ENDPARDO a, b, i, j

     PARDO a, b, i, j
#
           REQUEST RTau_ab(a,i,b,j) j
#
           DO lambda
#
              Zab(lambda,i,b,j) = RTau_ab(a,i,b,j)*ca(lambda,a)
#
              DO sigma
#
                 ZZab(lambda,i,sigma,j)        = Zab(lambda,i,b,j)*ca(sigma,b)
                 PREPARE RTAO_ab(lambda,i,sigma,j) += ZZab(lambda,i,sigma,j)
#
              ENDDO sigma
#
           ENDDO lambda
#
     ENDPARDO a, b, i, j
#
#    Form Half back transformed lambda array
#    ---------------------------------------
#
     PARDO a, b, i, j
#
           REQUEST A2old_ab(i,a,j,b) b 
#
           DO lambda
#
              Qab(i,lambda,j,b) = A2old_ab(i,a,j,b)*ca(lambda,a)
#
              DO sigma
#
                 QQab(i,lambda,j,sigma)        = Qab(i,lambda,j,b)*ca(sigma,b)
                 PREPARE LAO_ab(i,lambda,j,sigma) += QQab(i,lambda,j,sigma)
#
              ENDDO sigma
#
           ENDDO lambda
#
     ENDPARDO a, b, i, j

     PARDO a, b, i, j
#
           REQUEST L2AB (i,a,j,b) b
#
           DO lambda
#
              Qab(i,lambda,j,b) = L2AB (i,a,j,b)*ca(lambda,a)
#
              DO sigma
#
                 QQab(i,lambda,j,sigma)        = Qab(i,lambda,j,b)*ca(sigma,b)
                 PREPARE LLAO_ab(i,lambda,j,sigma) += QQab(i,lambda,j,sigma)
#
              ENDDO sigma
#
           ENDDO lambda
#
     ENDPARDO a, b, i, j

     execute server_barrier 
#
#    Contract Half back transformed arrays with AO integrals 
#    --> Txixj and T1xixj 
#    ------------------------------------------------------- 
#
     PARDO lambda, sigma, mu, nu  
#
           compute_integrals aoint(mu,lambda,nu,sigma) 
#
           DO i 
           DO j 
#
              REQUEST Tao_ab(mu,i,nu,j) j  
              REQUEST Lao_ab(i,mu,j,nu) j  
#
              Txixj(lambda,i,sigma,j)       = Tao_ab(mu,i,nu,j)*aoint(mu,lambda,nu,sigma) 
              PREPARE Ixixj(lambda,i,sigma,j)  += Txixj(lambda,i,sigma,j) 
#
              Txixj(lambda,i,sigma,j)       = Lao_ab(i,mu,j,nu)*aoint(mu,lambda,nu,sigma) 
              PREPARE I1xixj(lambda,i,sigma,j) += Txixj(lambda,i,sigma,j) 
#
           ENDDO j 
           ENDDO i 
#
     ENDPARDO lambda, sigma, mu, nu  

     PARDO lambda, sigma, mu, nu
#
           compute_integrals aoint(mu,lambda,nu,sigma)
#
           DO i
           DO j
#
              REQUEST RTao_ab(mu,i,nu,j) j
              REQUEST LLao_ab(i,mu,j,nu) j
#
              Txixj(lambda,i,sigma,j)       = RTao_ab(mu,i,nu,j)*aoint(mu,lambda,nu,sigma)
              PREPARE IRxixj(lambda,i,sigma,j)  += Txixj(lambda,i,sigma,j)
#
              Txixj(lambda,i,sigma,j)       = LLao_ab(i,mu,j,nu)*aoint(mu,lambda,nu,sigma)
              PREPARE ILxixj(lambda,i,sigma,j) += Txixj(lambda,i,sigma,j)
#
           ENDDO j
           ENDDO i
#
     ENDPARDO lambda, sigma, mu, nu

     execute server_barrier 
#
#    Transform I and I1 
#    ------------------ 
#
     PARDO lambda, sigma, i, j 
#
           REQUEST Ixixj(lambda,i,sigma,j)  j  
           REQUEST I1xixj(lambda,i,sigma,j) j  
#
           DO b 
#
              Txibj(lambda,i,b,j)     =  Ixixj(lambda,i,sigma,j)*ca(sigma,b) 
              T1xibj(lambda,i,b,j)    = I1xixj(lambda,i,sigma,j)*ca(sigma,b) 
#
              DO a 
#
                 Taibj(a,i,b,j)       =  Txibj(lambda,i,b,j)*ca(lambda,a)  
                 T1aibj(a,i,b,j)      = T1xibj(lambda,i,b,j)*ca(lambda,a)  
#
                 PREPARE Iaibj(a,i,b,j)  += Taibj(a,i,b,j) 
                 PREPARE I1aibj(a,i,b,j) += T1aibj(a,i,b,j) 
#
              ENDDO a 
#
           ENDDO b 
#
     ENDPARDO lambda, sigma, i, j 

     PARDO lambda, sigma, i, j
#
           REQUEST IRxixj(lambda,i,sigma,j)  j
           REQUEST ILxixj(lambda,i,sigma,j) j
#
           DO b
#
              Txibj(lambda,i,b,j)     =  IRxixj(lambda,i,sigma,j)*ca(sigma,b)
              T1xibj(lambda,i,b,j)    = ILxixj(lambda,i,sigma,j)*ca(sigma,b)
#
              DO a
#
                 Taibj(a,i,b,j)       =  Txibj(lambda,i,b,j)*ca(lambda,a)
                 T1aibj(a,i,b,j)      = T1xibj(lambda,i,b,j)*ca(lambda,a)
#
                 PREPARE IRaibj(a,i,b,j)  += Taibj(a,i,b,j)
                 PREPARE ILaibj(a,i,b,j) += T1aibj(a,i,b,j)
#
              ENDDO a
#
           ENDDO b
#
     ENDPARDO lambda, sigma, i, j

     execute server_barrier 
#
#    Perform final contraction to Iab_aa  
#    -----------------------------------  
#
     PARDO a, a1, b 
#
           DO i 
           DO j 
#
              REQUEST  Iaibj(a,i,b,j)    b  
              REQUEST I1aibj(a,i,b,j)    b  
              REQUEST A2old_ab(i,a1,j,b) b  
              REQUEST Tau_ab(a1,i,b,j)   b  
#
              Taa(a,a1)         = Iaibj(a,i,b,j)*A2old_ab(i,a1,j,b) 
              T1aa(a,a1)        = I1aibj(a,i,b,j)*Tau_ab(a1,i,b,j) 
              Taa(a,a1)        += T1aa(a,a1) 
              Taa(a,a1)        *= -0.5 
              PUT Iab_aa(a,a1) += Taa(a,a1) 
#
           ENDDO j 
           ENDDO i 
#
     ENDPARDO a, a1, b 
#
     PARDO a, a1, b
#
           DO i
           DO j
#
              REQUEST IRaibj(a,i,b,j)    b
              REQUEST ILaibj(a,i,b,j)    b
              REQUEST L2AB (i,a1,j,b) b
              REQUEST RTau_ab(a1,i,b,j)   b
#
              Taa(a,a1)         = IRaibj(a,i,b,j)*L2AB (i,a1,j,b)
              T1aa(a,a1)        = ILaibj(a,i,b,j)*RTau_ab(a1,i,b,j)
              Taa(a,a1)        += T1aa(a,a1)
              Taa(a,a1)        *= -0.5
              PUT Iab_aa(a,a1) += Taa(a,a1)
#
           ENDDO j
           ENDDO i
#
     ENDPARDO a, a1, b

     execute sip_barrier 
#
     ENDPROC IABAA2 
#    -------------- 
#
     PROC IABDIRECT 
#    -------------- 
          CALL IABAA1 
          CALL IABAA2 
     ENDPROC IABDIRECT 
#    ----------------- 
#
# ----------------------------------------------------------------------------------------
#
         PROC UPDATE_DAI 
#        --------------- 
#
         PARDO a, i 
#
               GET        Dnewai_a(a,i) 
               GET        Doldai_a(a,i) 
               Tai(a,i) = Dnewai_a(a,i) 
               execute energy_denominator Tai(a,i) 
               Tai(a,i) -= Doldai_a(a,i) 
#
               if kiter == 1 
                  PUT e1ai(a,i) = tai(a,i) 
               endif 
#
               if kiter == 2 
                  PUT e2ai(a,i) = tai(a,i) 
               endif 
#
               if kiter == 3 
                  PUT e3ai(a,i) = tai(a,i) 
               endif 
#
               if kiter == 4 
                  PUT e4ai(a,i) = tai(a,i) 
               endif 
#
               if kiter >= 5 
                  PUT e5ai(a,i) = tai(a,i) 
               endif 
#
         ENDPARDO a, i 
#
         ENDPROC UPDATE_DAI 
#        ------------------ 
#
# ----------------------------------------------------------------------------------------
# 
# ----------------------------------------------------------------------------------------
#
      PROC MOVE_DAI 
#     ------------- 
#
      PARDO a, i
#
            GET        Doldai_a(a,i)
            tai(a,i) = Doldai_a(a,i)
#
            if kiter == 1
               PUT d1ai(a,i) = tai(a,i)
            endif
#
            if kiter == 2
               PUT d2ai(a,i) = Tai(a,i)
            endif
#
            if kiter == 3
               PUT d3ai(a,i) = Tai(a,i)
            endif
#
            if kiter == 4
               PUT d4ai(a,i) = Tai(a,i)
            endif
#
            if kiter >= 5
               PUT d4ai(a,i) = Tai(a,i)
            endif
#
      ENDPARDO a, i
# 
      ENDPROC MOVE_DAI 
#     ---------------- 
#
# ----------------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
#
     PROC ZERO_DSCALAR
#    -----------------
#
#    The scalars used (overlap of error arrays and coeffients) in the DIIS
#    expansion are zero'd out.
#
#      Zero out scalars.
#      -----------------
#
       b11 = 0.0
       b12 = 0.0
       b13 = 0.0
       b14 = 0.0
       b15 = 0.0
       b16 = 0.0
       b17 = 0.0
       b18 = 0.0
       b19 = 0.0
       b110 = 0.0
#
       b22 = 0.0
       b23 = 0.0
       b24 = 0.0
       b25 = 0.0
       b26 = 0.0
       b27 = 0.0
       b28 = 0.0
       b29 = 0.0
       b210 = 0.0
#
       b33 = 0.0
       b34 = 0.0
       b35 = 0.0
       b36 = 0.0
       b37 = 0.0
       b38 = 0.0
       b39 = 0.0
       b310 = 0.0
#
       b44 = 0.0
       b45 = 0.0
       b46 = 0.0
       b47 = 0.0
       b48 = 0.0
       b49 = 0.0
       b410 = 0.0
#
       b55 = 0.0
       b56 = 0.0
       b57 = 0.0
       b58 = 0.0
       b59 = 0.0
       b510 = 0.0
#
       b66 = 0.0
       b67 = 0.0
       b68 = 0.0
       b69 = 0.0
       b610 = 0.0
#
       b77 = 0.0
       b78 = 0.0
       b79 = 0.0
       b710 = 0.0
#
       b88 = 0.0
       b89 = 0.0
       b810 = 0.0
#
       b99 = 0.0
       b910 = 0.0
#
       b1010 = 0.0
#
       Tb11 = 0.0
       Tb12 = 0.0
       Tb13 = 0.0
       Tb14 = 0.0
       Tb15 = 0.0
       Tb16 = 0.0
       Tb17 = 0.0
       Tb18 = 0.0
       Tb19 = 0.0
       Tb110 = 0.0
#
       Tb22 = 0.0
       Tb23 = 0.0
       Tb24 = 0.0
       Tb25 = 0.0
       Tb26 = 0.0
       Tb27 = 0.0
       Tb28 = 0.0
       Tb29 = 0.0
       Tb210 = 0.0
#
       Tb33 = 0.0
       Tb34 = 0.0
       Tb35 = 0.0
       Tb36 = 0.0
       Tb37 = 0.0
       Tb38 = 0.0
       Tb39 = 0.0
       Tb310 = 0.0
#
       Tb44 = 0.0
       Tb45 = 0.0
       Tb46 = 0.0
       Tb47 = 0.0
       Tb48 = 0.0
       Tb49 = 0.0
       Tb410 = 0.0
#
       Tb55 = 0.0
       Tb56 = 0.0
       Tb57 = 0.0
       Tb58 = 0.0
       Tb59 = 0.0
       Tb510 = 0.0
#
       Tb66 = 0.0
       Tb67 = 0.0
       Tb68 = 0.0
       Tb69 = 0.0
       Tb610 = 0.0
#
       Tb77 = 0.0
       Tb78 = 0.0
       Tb79 = 0.0
       Tb710 = 0.0
#
       Tb88 = 0.0
       Tb89 = 0.0
       Tb810 = 0.0
#
       Tb99 = 0.0
       Tb910 = 0.0
#
       Tb1010 = 0.0
#
       c1 = 0.0
       c2 = 0.0
       c3 = 0.0
       c4 = 0.0
       c5 = 0.0
       c6 = 0.0
       c7 = 0.0
       c8 = 0.0
       c9 = 0.0
       c10 = 0.0
#
       execute sip_barrier
#
     ENDPROC ZERO_DSCALAR
#    --------------------
#
# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
#
     PROC SETUP_DIIS
#    ---------------
#
#    Put the matrix elements of B into the sip 'B' matrix.
#
       execute diis_setup Tb11
       execute diis_setup Tb12
       execute diis_setup Tb13
       execute diis_setup Tb14
       execute diis_setup Tb15
       execute diis_setup Tb16
       execute diis_setup Tb17
       execute diis_setup Tb18
       execute diis_setup Tb19
       execute diis_setup Tb110

       execute diis_setup Tb22
       execute diis_setup Tb23
       execute diis_setup Tb24
       execute diis_setup Tb25
       execute diis_setup Tb26
       execute diis_setup Tb27
       execute diis_setup Tb28
       execute diis_setup Tb29
       execute diis_setup Tb210

       execute diis_setup Tb33
       execute diis_setup Tb34
       execute diis_setup Tb35
       execute diis_setup Tb36
       execute diis_setup Tb37
       execute diis_setup Tb38
       execute diis_setup Tb39
       execute diis_setup Tb310

       execute diis_setup Tb44
       execute diis_setup Tb45
       execute diis_setup Tb46
       execute diis_setup Tb47
       execute diis_setup Tb48
       execute diis_setup Tb49
       execute diis_setup Tb410

       execute diis_setup Tb55
       execute diis_setup Tb56
       execute diis_setup Tb57
       execute diis_setup Tb58
       execute diis_setup Tb59
       execute diis_setup Tb510

       execute diis_setup Tb66
       execute diis_setup Tb67
       execute diis_setup Tb68
       execute diis_setup Tb69
       execute diis_setup Tb610

       execute diis_setup Tb77
       execute diis_setup Tb78
       execute diis_setup Tb79
       execute diis_setup Tb710

       execute diis_setup Tb88
       execute diis_setup Tb89
       execute diis_setup Tb810

       execute diis_setup Tb99
       execute diis_setup Tb910

       execute diis_setup Tb1010
#
       execute sip_barrier
#
     ENDPROC SETUP_DIIS
#    ------------------
#
# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
#
     PROC DIIS1
#    ----------
#
#    Zero out scalars.
#    -----------------
#
     CALL ZERO_DSCALAR
#
#
#    Determine the 'B-matrix'.
#    -------------------------
#
#    Compute contributions due to Dai amplitudes.
#    --------------------------------------------
#
     PARDO a, i
#
#          REQUEST/GET amplitude data from all 2 previous iterations.
#          ----------------------------------------------------------
#
           GET e1ai(a,i)    # kiter-1 amplitudes
           GET e2ai(a,i)    # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,2
#             ---------
#
              etemp = e1ai(a,i)*e1ai(a,i)
              b11  += etemp
#
              etemp = e1ai(a,i)*e2ai(a,i)
              b12  += etemp
#
#             b1x x=2,2
#             ---------
#
              etemp = e2ai(a,i)*e2ai(a,i)
              b22  += etemp
#
     ENDPARDO a, i
#
     execute sip_barrier
#
#    Collectively sum B-matrix elements.
#    -----------------------------------
#
     collective Tb11 += b11
     collective Tb12 += b12
     collective Tb22 += b22
#
#    Now the unique elements of the 'B-matrix' have been computed, the array is filled out
#    in the setup_diis.
#    --------------------------------------------------------------------------------------
#
#    Put the elements of the 'B-matrix', which have been computed as scalars into the
#    R-matrix.
#    --------------------------------------------------------------------------------
#
     CALL SETUP_DIIS
#
     execute compute_diis # --> New instruction
#
     c1 = Tb11
     c2 = Tb22
     execute print_scalar c1
     execute print_scalar c2
#
#    Done computing the c-vector.
#    ----------------------------
#
#    Form Dai_old.
#    -------------
#
     PARDO a, i
#
#          REQUEST/GET amplitude data from all 2 previous iterations.
#          ----------------------------------------------------------
#
           GET D0ai(a,i)     # kiter-2 amplitudes
           GET D1ai(a,i)     # kiter-1 amplitudes
#
           GET e1ai(a,i)     # kiter-1 amplitudes
           GET e2ai(a,i)     # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> tai_old.
#          --------------------------------------------------------
#
           t1ai(a,i)     = d0ai(a,i) + e1ai(a,i)
           t1ai(a,i)    *= c1
           tai(a,i)      = t1ai(a,i)
#
           t1ai(a,i)     = d1ai(a,i) + e2ai(a,i)
           t1ai(a,i)    *= c2
           tai(a,i)     += t1ai(a,i)
#
           PUT Doldai_a(a,i) = tai(a,i)
#
     ENDPARDO a, i
#
     execute sip_barrier
#
     ENDPROC DIIS1
#    -------------
#
# ---------------------------------------------------------------------------------
#
     PROC DIIS2
#    ----------
#
#    Zero out scalars.
#    -----------------
#
     CALL ZERO_DSCALAR
#
#
#    Determine the 'B-matrix'.
#    -------------------------
#
#    Compute contributions due to dai amplitudes.
#    --------------------------------------------
#
     PARDO a, i
#
#          REQUEST/GET amplitude data from all 4 previous iterations.
#          ----------------------------------------------------------
#
           GET e1ai(a,i)    # kiter-2 amplitudes
           GET e2ai(a,i)    # kiter-1 amplitudes
           GET e3ai(a,i)    # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,3
#             ---------
#
              etemp = e1ai(a,i)*e1ai(a,i)
              b11  += etemp
#
              etemp = e1ai(a,i)*e2ai(a,i)
              b12  += etemp
#
              etemp = e1ai(a,i)*e3ai(a,i)
              b13  += etemp
#
#             b1x x=2,3
#             ---------
#
              etemp = e2ai(a,i)*e2ai(a,i)
              b22  += etemp
#
              etemp = e2ai(a,i)*e3ai(a,i)
              b23  += etemp
#
#             b1x x=3,3
#             ---------
#
              etemp = e3ai(a,i)*e3ai(a,i)
              b33  += etemp
#
     ENDPARDO a, i
#
     execute sip_barrier
#
#    Collectively sum B-matrix elements.
#    -----------------------------------
#
     collective Tb11 += b11
     collective Tb12 += b12
     collective Tb13 += b13
     collective Tb22 += b22
     collective Tb23 += b23
     collective Tb33 += b33
#
#    Now the unique elements of the 'B-matrix' have been computed and the array filled out.
#    --------------------------------------------------------------------------------------
#
#    Put the elements of the 'B-matrix', which have been computed as scalars into the
#    R-matrix.
#    --------------------------------------------------------------------------------

     CALL SETUP_DIIS
#
     execute compute_diis # --> New instruction
#
     c1 = Tb11
     c2 = Tb22
     c3 = Tb33
     execute print_scalar c1
     execute print_scalar c2
     execute print_scalar c3
#
#    Done computing the c-vector.
#    ----------------------------
#
#    Form the updated amplitudes using the c-vector.
#    -----------------------#
#    Form Dai_old.
#    -------------
#
     PARDO a, i
#
#          REQUEST/GET amplitude data from all 3 previous iterations.
#          ----------------------------------------------------------
#
           GET D0ai(a,i)     # kiter-3 amplitudes
           GET D1ai(a,i)     # kiter-2 amplitudes
           GET D2ai(a,i)     # kiter-1 amplitudes
#
           GET e1ai(a,i)     # kiter-2 amplitudes
           GET e2ai(a,i)     # kiter-1 amplitudes
           GET e3ai(a,i)     # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> tai_old.
#          --------------------------------------------------------
#
           t1ai(a,i)     = d0ai(a,i) + e1ai(a,i)
           t1ai(a,i)    *= c1
           tai(a,i)      = t1ai(a,i)
#
           t1ai(a,i)     = d1ai(a,i) + e2ai(a,i)
           t1ai(a,i)    *= c2
           tai(a,i)     += t1ai(a,i)
#
           t1ai(a,i)     = d2ai(a,i) + e3ai(a,i)
           t1ai(a,i)    *= c3
           tai(a,i)     += t1ai(a,i)
#
           PUT Doldai_a(a,i) = tai(a,i)
#
     ENDPARDO a, i
#
     execute sip_barrier
#
     ENDPROC DIIS2
#    -------------
#
# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
#
     PROC DIIS3
#    ----------
#
#    Zero out scalars.
#    -----------------
#
     CALL ZERO_DSCALAR
#
#
#    Determine the 'B-matrix'.
#    -------------------------
#
#    Compute contributions due to dai amplitudes.
#    --------------------------------------------
#
     PARDO a, i
#
#          REQUEST/GET amplitude data from all 4 previous iterations.
#          ----------------------------------------------------------
#
           GET e1ai(a,i)    # kiter-3 amplitudes
           GET e2ai(a,i)    # kiter-2 amplitudes
           GET e3ai(a,i)    # kiter-1 amplitudes
           GET e4ai(a,i)    # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,4
#             ---------
#
              etemp = e1ai(a,i)*e1ai(a,i)
              b11  += etemp
#
              etemp = e1ai(a,i)*e2ai(a,i)
              b12  += etemp
#
              etemp = e1ai(a,i)*e3ai(a,i)
              b13  += etemp
#
              etemp = e1ai(a,i)*e4ai(a,i)
              b14  += etemp
#
#             b1x x=2,4
#             ---------
#
              etemp = e2ai(a,i)*e2ai(a,i)
              b22  += etemp
#
              etemp = e2ai(a,i)*e3ai(a,i)
              b23  += etemp
#
              etemp = e2ai(a,i)*e4ai(a,i)
              b24  += etemp
#
#             b1x x=3,4
#             ---------
#
              etemp = e3ai(a,i)*e3ai(a,i)
              b33  += etemp
#
              etemp = e3ai(a,i)*e4ai(a,i)
              b34  += etemp
#
#             b1x x=4,4
#             ---------
#
              etemp = e4ai(a,i)*e4ai(a,i)
              b44  += etemp
#
     ENDPARDO a, i
#
     execute sip_barrier
#
#    Collectively sum B-matrix elements.
#    -----------------------------------
#
     collective Tb11 += b11
     collective Tb12 += b12
     collective Tb13 += b13
     collective Tb14 += b14
     collective Tb22 += b22
     collective Tb23 += b23
     collective Tb24 += b24
     collective Tb33 += b33
     collective Tb34 += b34
     collective Tb44 += b44
#
#    Now the unique elements of the 'B-matrix' have been computed and the array filled out.
#    --------------------------------------------------------------------------------------
#
#    Put the elements of the 'B-matrix', which have been computed as scalars into the
#    R-matrix.
#    --------------------------------------------------------------------------------

     CALL SETUP_DIIS
#
     execute compute_diis # --> New instruction
#
     c1 = Tb11
     c2 = Tb22
     c3 = Tb33
     c4 = Tb44
     execute print_scalar c1
     execute print_scalar c2
     execute print_scalar c3
     execute print_scalar c4
#
#    Done computing the c-vector.
#    ----------------------------
#
#    Form the updated amplitudes using the c-vector.
#    -----------------------#
#
#    Form Dai_old.
#    -------------
#
     PARDO a, i
#
#          REQUEST/GET amplitude data from all 3 previous iterations.
#          ----------------------------------------------------------
#
           GET D0ai(a,i)     # kiter-4 amplitudes
           GET D1ai(a,i)     # kiter-3 amplitudes
           GET D2ai(a,i)     # kiter-2 amplitudes
           GET D3ai(a,i)     # kiter-1 amplitudes
#
           GET e1ai(a,i)     # kiter-3 amplitudes
           GET e2ai(a,i)     # kiter-2 amplitudes
           GET e3ai(a,i)     # kiter-1 amplitudes
           GET e4ai(a,i)     # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> tai_old.
#          --------------------------------------------------------
#
           t1ai(a,i)     = d0ai(a,i) + e1ai(a,i)
           t1ai(a,i)    *= c1
           tai(a,i)      = t1ai(a,i)
#
           t1ai(a,i)     = d1ai(a,i) + e2ai(a,i)
           t1ai(a,i)    *= c2
           tai(a,i)     += t1ai(a,i)
#
           t1ai(a,i)     = d2ai(a,i) + e3ai(a,i)
           t1ai(a,i)    *= c3
           tai(a,i)     += t1ai(a,i)
#
           t1ai(a,i)     = d3ai(a,i) + e4ai(a,i)
           t1ai(a,i)    *= c4
           tai(a,i)     += t1ai(a,i)
#
           PUT Doldai_a(a,i) = tai(a,i)
#
     ENDPARDO a, i
#
     execute sip_barrier
#
     ENDPROC DIIS3
#    -------------
#
# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
#
     PROC DIIS4
#    ----------
#
#    Zero out scalars.
#    -----------------
#
     CALL ZERO_DSCALAR
#
#
#    Determine the 'B-matrix'.
#    -------------------------
#
#    Compute contributions due to dai amplitudes.
#    --------------------------------------------
#
     PARDO a, i
#
#          REQUEST/GET amplitude data from all 4 previous iterations.
#          ----------------------------------------------------------
#
           GET e1ai(a,i)    # kiter-4 amplitudes
           GET e2ai(a,i)    # kiter-3 amplitudes
           GET e3ai(a,i)    # kiter-2 amplitudes
           GET e4ai(a,i)    # kiter-1 amplitudes
           GET e5ai(a,i)    # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,5
#             ---------
#
              etemp = e1ai(a,i)*e1ai(a,i)
              b11  += etemp
#
              etemp = e1ai(a,i)*e2ai(a,i)
              b12  += etemp
#
              etemp = e1ai(a,i)*e3ai(a,i)
              b13  += etemp
#
              etemp = e1ai(a,i)*e4ai(a,i)
              b14  += etemp
#
              etemp = e1ai(a,i)*e5ai(a,i)
              b15  += etemp
#
#             b1x x=2,5
#             ---------
#
              etemp = e2ai(a,i)*e2ai(a,i)
              b22  += etemp
#
              etemp = e2ai(a,i)*e3ai(a,i)
              b23  += etemp
#
              etemp = e2ai(a,i)*e4ai(a,i)
              b24  += etemp
#
              etemp = e2ai(a,i)*e5ai(a,i)
              b25  += etemp
#
#             b1x x=3,5
#             ---------
#
              etemp = e3ai(a,i)*e3ai(a,i)
              b33  += etemp
#
              etemp = e3ai(a,i)*e4ai(a,i)
              b34  += etemp
#
              etemp = e3ai(a,i)*e5ai(a,i)
              b35  += etemp
#
#             b1x x=4,5
#             ---------
#
              etemp = e4ai(a,i)*e4ai(a,i)
              b44  += etemp
#
              etemp = e4ai(a,i)*e5ai(a,i)
              b45  += etemp
#
#             b1x x=5,5
#             ---------
#
              etemp = e5ai(a,i)*e5ai(a,i)
              b55  += etemp
#
     ENDPARDO a, i
#
     execute sip_barrier
#
#    Collectively sum B-matrix elements.
#    -----------------------------------
#
     collective Tb11 += b11
     collective Tb12 += b12
     collective Tb13 += b13
     collective Tb14 += b14
     collective Tb15 += b15
     collective Tb22 += b22
     collective Tb23 += b23
     collective Tb24 += b24
     collective Tb25 += b25
     collective Tb33 += b33
     collective Tb34 += b34
     collective Tb35 += b35
     collective Tb44 += b44
     collective Tb45 += b45
     collective Tb55 += b55
#
#    Now the unique elements of the 'B-matrix' have been computed and the array filled out.
#    --------------------------------------------------------------------------------------
#
#    Put the elements of the 'B-matrix', which have been computed as scalars into the
#    R-matrix.
#    --------------------------------------------------------------------------------

     CALL SETUP_DIIS
#
     execute compute_diis # --> New instruction
#
     c1 = Tb11
     c2 = Tb22
     c3 = Tb33
     c4 = Tb44
     c5 = Tb55
     execute print_scalar c1
     execute print_scalar c2
     execute print_scalar c3
     execute print_scalar c4
     execute print_scalar c5
#
#    Done computing the c-vector.
#    ----------------------------
#
#    Form the updated amplitudes using the c-vector.
#    -----------------------#
#    Form Dai_old.
#    -------------
#
     PARDO a, i
#
#          REQUEST/GET amplitude data from all 3 previous iterations.
#          ----------------------------------------------------------
#
           GET D0ai(a,i)     # kiter-5 amplitudes
           GET D1ai(a,i)     # kiter-4 amplitudes
           GET D2ai(a,i)     # kiter-3 amplitudes
           GET D3ai(a,i)     # kiter-2 amplitudes
           GET D4ai(a,i)     # kiter-1 amplitudes
#
           GET e1ai(a,i)     # kiter-4 amplitudes
           GET e2ai(a,i)     # kiter-3 amplitudes
           GET e3ai(a,i)     # kiter-2 amplitudes
           GET e4ai(a,i)     # kiter-1 amplitudes
           GET e5ai(a,i)     # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> tai_old.
#          --------------------------------------------------------
#
           t1ai(a,i)     = d0ai(a,i) + e1ai(a,i)
           t1ai(a,i)    *= c1
           tai(a,i)      = t1ai(a,i)
#
           t1ai(a,i)     = d1ai(a,i) + e2ai(a,i)
           t1ai(a,i)    *= c2
           tai(a,i)     += t1ai(a,i)
#
           t1ai(a,i)     = d2ai(a,i) + e3ai(a,i)
           t1ai(a,i)    *= c3
           tai(a,i)     += t1ai(a,i)
#
           t1ai(a,i)     = d3ai(a,i) + e4ai(a,i)
           t1ai(a,i)    *= c4
           tai(a,i)     += t1ai(a,i)
#
           t1ai(a,i)     = d4ai(a,i) + e5ai(a,i)
           t1ai(a,i)    *= c5
           tai(a,i)     += t1ai(a,i)
#
           PUT Doldai_a(a,i) = tai(a,i)
#
     ENDPARDO a, i
#
     execute sip_barrier
#
     ENDPROC DIIS4
#    -------------
#
# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
#
     PROC MOVE4
#    ----------
#
#    0 --> 1
#    ---------------------------------------------------
#
     PARDO a, i
           GET d1ai(a,i)
           PUT d0ai(a,i) = d1ai(a,i)
     ENDPARDO a, i
#
     execute sip_barrier 
#
#    2 --> 1
#    ---------------------------------------------------
#
     PARDO a, i
           GET e2ai(a,i)
           PUT e1ai(a,i) = e2ai(a,i)
     ENDPARDO a, i
#
     PARDO a, i
           GET d2ai(a,i)
           PUT d1ai(a,i) = d2ai(a,i)
     ENDPARDO a, i
#
     execute sip_barrier
#
#    3 --> 2
#    ---------------------------------------------------
#
     PARDO a, i
           GET e3ai(a,i)
           PUT e2ai(a,i) = e3ai(a,i)
     ENDPARDO a, i
#
     PARDO a, i
           GET d3ai(a,i)
           PUT d2ai(a,i) = d3ai(a,i)
     ENDPARDO a, i
#
     execute sip_barrier
#
#    4 --> 3
#    ---------------------------------------------------
#
     PARDO a, i
           GET e4ai(a,i)
           PUT e3ai(a,i) = e4ai(a,i)
     ENDPARDO a, i
#
     PARDO a, i
           GET d4ai(a,i)
           PUT d3ai(a,i) = d4ai(a,i)
     ENDPARDO a, i
#
     execute sip_barrier
#
#    5 --> 4
#    ---------------------------------------------------
#
     PARDO a, i
           GET e5ai(a,i)
           PUT e4ai(a,i) = e5ai(a,i)
     ENDPARDO a, i
#
     PARDO a, i
           GET doldai_a(a,i)
           PUT d4ai(a,i) = doldai_a(a,i)
     ENDPARDO a, i
#
     execute sip_barrier
#
     ENDPROC MOVE4
#    -------------
#
# ---------------------------------------------------------------------------------
#
# ----------------------------------------------------------------------------------------
#
# This procedure calculates the virtual-occupied block of the density 
# matrix iteratively. The equation for the AA spin programmed is:
#
# D(a,i)*(e_i-e_a) = X(a,i) - D(c,k)*[ V^{ca}_{ki} - V^{ca}_{ik}  
#                                    + V^{ci}_{ka} - V^{ci}_{ak} ] 
#                           - D(C,K)*[ V^{Ca}_{Ki} + V^{Ci}_{Ka} ] 
#
# ----------------------------------------------------------------------------------------
#
      PROC DAI_PROC
#     -------- 
#
# First get initial guess 
# ----------------------- 
#
      create Doldai_a 
      create Dnewai_a 
#
      CREATE D0ai
      CREATE D1ai
      CREATE D2ai
      CREATE D3ai
      CREATE D4ai
#
      CREATE e1ai
      CREATE e2ai
      CREATE e3ai
      CREATE e4ai
      CREATE e5ai
#
      ecrit = cc_conv # Threshold  
      execute sip_barrier 
#
# Initialize Dai.  
# ---------------  
#
      esum = 0.0 
      eold = 0.0 
      PARDO a, i 
#
            GET                        Xai_aa(a,i) 
            Tai(a,i)                 = Xai_aa(a,i) 

            execute energy_denominator Tai(a,i) 
            PUT Doldai_a(a,i)        = Tai(a,i) 
            PUT D0ai(a,i)            = Tai(a,i) 
#
      ENDPARDO a, i 
#
      execute sip_barrier 
#
# Start iterations 
# ---------------- 
#
      DO KITER  
#
#        AA-spin first 
#        ------------- 
#
         PARDO a, i 
#
               GET Xai_aa(a,i) 
               Tai(a,i)           = Xai_aa(a,i) 
               PUT Dnewai_a(a,i) += Tai(a,i) 
#
         ENDPARDO a, i 
#
         PARDO a, i, a1, i1 
#
               REQUEST VSpipi(a1,i1,a,i) a # + 
               REQUEST Viaai(i1,a1,a,i)  a # + 
               REQUEST Vaaii(a,a1,i1,i)  a # - 
               GET Doldai_a(a1,i1) 
#
               Tpppp(a,i,a1,i1)   = VSpipi(a1,i1,a,i) 
               T2pppp(a,i,a1,i1)  = Viaai(i1,a1,a,i)   
               T3pppp(a,i,a1,i1)  = Vaaii(a,a1,i1,i)  
#
               Tpppp(a,i,a1,i1)  += T2pppp(a,i,a1,i1) 
               Tpppp(a,i,a1,i1)  -= T3pppp(a,i,a1,i1) 
#
               Tai(a,i)           = Tpppp(a,i,a1,i1)*Doldai_a(a1,i1) 
               PUT Dnewai_a(a,i) += Tai(a,i) 
#
         ENDPARDO a, i, a1, i1 
#
         PARDO a, i, b, j 
#
               REQUEST Vpiqj(a,i,b,j) a # + 
               REQUEST Viaai(i,a,b,j) a # + 
               GET Doldai_a(b,j) 
#
               Tppqq(a,i,b,j)     = Vpiqj(a,i,b,j)  
               T2ppqq(a,i,b,j)    = Viaai(i,a,b,j)  
               Tppqq(a,i,b,j)    += T2ppqq(a,i,b,j) 
#
               Tai(a,i)           = Tppqq(a,i,b,j)*Doldai_a(b,j) 
               PUT Dnewai_a(a,i) += Tai(a,i) 
#
         ENDPARDO a, i, b, j 
#
#        DONE AA-spin 
#        ------------ 
#
         execute sip_barrier 
#
#        Update error vector for diis
#        ----------------------------
#
         CALL UPDATE_DAI 
         execute sip_barrier 
#
#        Compute 'Energy' 
#        ---------------- 
#
         esum = 0.0 
         enew = 0.0 
         PARDO a, i 
#
               GET Dnewai_a(a,i) 
               etemp = Dnewai_a(a,i)*Dnewai_a(a,i)  
               esum += etemp 
               Tai(a,i) = Dnewai_a(a,i) 
               execute energy_denominator Tai(a,i) 
               PUT Doldai_a(a,i) = Tai(a,i) 
#
         ENDPARDO a, i 
#
         execute sip_barrier 
         collective enew += esum 
         execute print_scalar enew 
#         execute print_scalar eold 
#
#        Check on convergence
#        --------------------
#
         IF enew < eold
            ediff = eold - enew 
            IF ediff < ecrit
               exit # kiter
            ENDIF
         ENDIF
#
         IF enew > eold
            ediff = enew - eold
            IF ediff < ecrit
               exit # kiter
            ENDIF
         ENDIF
#
#        Reset eold --> enew
#        -------------------
#
         eold = enew 
#
         if kiter == 2
#
#           Get uptated amplitudes based on DIIS procedure.
#           -----------------------------------------------
#
            CALL DIIS1
#
         endif # kiter == 2
#
         if kiter == 3
#
#           Get uptated amplitudes based on DIIS procedure.
#           -----------------------------------------------
#
            CALL DIIS2
#
         endif # kiter == 3
#
         if kiter == 4
#
#           Get uptated amplitudes based on DIIS procedure.
#           -----------------------------------------------
#
            CALL DIIS3
#
         endif # kiter == 4
#
         if kiter >= 5
#
#           Get uptated amplitudes based on DIIS procedure.
#           -----------------------------------------------
#
            CALL DIIS4
            CALL MOVE4
#
         endif # kiter == 5
#
         CALL MOVE_DAI 
#
#        Zero out Dai 
#        ------------ 
# 
         PARDO a, i 
#
               Tai(a,i) = 0.0 
               PUT Dnewai_a(a,i) = Tai(a,i) 
#
         ENDPARDO a, i 
# 
         execute sip_barrier 
#
      ENDDO KITER  
      execute sip_barrier 
# 
      ENDPROC DAI_PROC
#     ----------- 
#
# -----------------------------------------------------------------------------
#
#
# -----------------------------------------------------------------------------
#
      PROC I1TRANS
#     ------------
#
# -----------------------------------------------------------------------------
#
#     Transform Iai_aa and Iia_aa
#     ---------------------------
      PARDO a, i
#
            GET Iia_aa(i,a)
      
            DO mu
#
               Jxi(mu,i)  = ca(mu,a)*Iia_aa(i,a)
#
               DO nu
#
                  Ixx(mu,nu) = Jxi(mu,i)*ca(nu,i)
                  I1xx(nu,mu) = Ixx(mu,nu)
                  PUT Ipq(mu,nu) += Ixx(mu,nu)
                  PUT Ipq(nu,mu) += I1xx(nu,mu)
#
               ENDDO nu
#
            ENDDO mu
#
      ENDPARDO a, i
#
#     Transform Iaa_aa
#     ----------------
      PARDO a, a1
#
            GET Iab_aa(a,a1)
#
            DO mu
#
               Ixa(mu,a1)  = ca(mu,a)*Iab_aa(a,a1)
#
               DO nu
#
                  Ixx(mu,nu) = Ixa(mu,a1)*ca(nu,a1)
                  PUT Ipq(mu,nu) += Ixx(mu,nu)
#
               ENDDO nu
#
            ENDDO mu
#
      ENDPARDO a, a1
#
#     Transform Iij_aa
#     ----------------
      PARDO i, i1
#
            GET Iij_aa(i,i1)

            DO mu
#
               Jxi(mu,i1)  = ca(mu,i)*Iij_aa(i,i1)
#
               DO nu
#
                  Ixx(mu,nu) = Jxi(mu,i1)*ca(nu,i1)
                  PUT Ipq(mu,nu) += Ixx(mu,nu)
#
               ENDDO nu
#
            ENDDO mu
#
      ENDPARDO i, i1
#
      ENDPROC I1TRANS
#     ---------------
#
# -----------------------------------------------------------------------------
#
# -----------------------------------------------------------------------------
#
      PROC D1TRANS
#     ------------
#
# -----------------------------------------------------------------------------
#
#     Transform Dai_aa
#     ----------------
      PARDO a, i
#
            GET Doldai_a(a,i)
#
            DO mu
#
               Jxi(mu,i)  = Doldai_a(a,i)*ca(mu,a)
#
               DO nu
#
                  Ixx(mu,nu)      = Jxi(mu,i)*ca(nu,i)
                  I1xx(nu,mu)     = Ixx(mu,nu)
                  PUT Dpq(mu,nu) += Ixx(mu,nu)
                  PUT Dpq(nu,mu) += I1xx(nu,mu)
#
               ENDDO nu
#
            ENDDO mu
#
      ENDPARDO a, i
#
#     Transform Dab_a
#     ---------------
      PARDO a, a1
#
            GET Dab_a(a,a1)
            GET Dor_aa(a,a1)
            taa(a,a1) = Dab_a(a,a1) 
            taa(a,a1)+= Dor_aa(a,a1) 
#
            DO mu
#
               Ixa(mu,a1)  = taa(a,a1)*ca(mu,a)
#
               DO nu
#
                  Ixx(mu,nu) = Ixa(mu,a1)*ca(nu,a1)
                  PUT Dpq(mu,nu) += Ixx(mu,nu)
#
               ENDDO nu
#
            ENDDO mu
#
      ENDPARDO a, a1
#
#     Transform Dij_aa
#     ----------------
      PARDO i, i1
#
            GET Dij_a(i,i1)
            GET Dor_ii(i,i1)
            tii(i,i1) = Dij_a(i,i1) 
            tii(i,i1)+= Dor_ii(i,i1) 

            DO mu
#
               Jxi(mu,i1)  = tii(i,i1)*ca(mu,i)
#
               DO nu
#
                  Ixx(mu,nu) = Jxi(mu,i1)*ca(nu,i1)
                  PUT Dpq(mu,nu) += Ixx(mu,nu)
#
               ENDDO nu
#
            ENDDO mu
#
      ENDPARDO i, i1
#
      ENDPROC D1TRANS
#     ---------------
#
# -----------------------------------------------------------------------------
#
# -----------------------------------------------------------------------------
#
      PROC HFDENS
#     -----------
#
      PARDO mu, nu, i
#
            Txi(nu,i)       = ca(nu,i)
            Tpq(mu,nu)      = ca(mu,i)*Txi(nu,i)
            PUT Dhf(mu,nu) += Tpq(mu,nu)
#
      ENDPARDO mu, nu, i
#
      ENDPROC HFDENS
#     --------------
#
# ----------------------------------------------------------------------------------------



#-------------------------------------------------------------------------
#
#    ---------------------------
      PROC  BACK_TRANS_COMP_DIP
#    ---------------------------
#
#
#          ...Zero out the necessary arrays...
#
#
      tmpnuc = 0.0
      DO jatom
         tmpnuc = tmpnuc + 1.0
      ENDDO jatom

      dipnucx = tmpnuc
      dipnucy = dipnucx
      dipnucz = dipnucy

      EXECUTE  NUC_DIPOLE_MOMENT  ONE    dipnucx
      EXECUTE  NUC_DIPOLE_MOMENT  TWO    dipnucy
      EXECUTE  NUC_DIPOLE_MOMENT  THREE  dipnucz

      PARDO mu, nu
         txx (mu,nu)          = 0.0
         PUT  AO_DENS (mu,nu) = txx (mu,nu)
      ENDPARDO  mu, nu

      EXECUTE  SIP_BARRIER
#
#
#          ...Do the transformation...
#
#
      PARDO  mu, nu
         GET                     DHF (mu,nu)
         txx (mu,nu)           = DHF (mu,nu)
         PUT  AO_DENS (mu,nu) += txx (mu,nu)
      ENDPARDO  mu, nu

      PARDO  i, i1
         GET  Dij_a (i,i1)
         DO mu
            txi (mu,i1)  = Dij_a (i,i1) * CA (mu,i)
            DO nu
               txx  (mu,nu) = txi (mu,i1) * CA (nu,i1)
               PUT  AO_DENS (mu,nu) += txx  (mu,nu)
            ENDDO nu
         ENDDO mu
      ENDPARDO  i, i1

      PARDO  a, a1
         GET  Dab_a (a,a1)
         DO mu
            txa (mu,a1) = Dab_a (a,a1) * CA (mu,a)
            DO nu
               txx  (mu,nu) = txa (mu,a1) * CA (nu,a1)
               PUT  AO_DENS (mu,nu) += txx  (mu,nu)
            ENDDO nu
         ENDDO mu
      ENDPARDO  a, a1

      PARDO  a, i
         GET  Dai (a,i)
         DO mu
            txi (mu,i) = Dai (a,i) * CA (mu,a)
            DO nu
               txx  (mu,nu) = txi (mu,i) * CA (nu,i)
               txx2 (nu,mu) = txx (mu,nu)
               PUT  AO_DENS (mu,nu) += txx  (mu,nu)
               PUT  AO_DENS (nu,mu) += txx2 (nu,mu)
            ENDDO nu
         ENDDO mu
      ENDPARDO  a, i

      EXECUTE  SIP_BARRIER
#
#
#          ...Contract with X, Y, and Z integrals...
#
#
      etemp1 = 0.0
      etemp2 = 0.0
      etemp3 = 0.0

      sum1 = 0.0
      sum2 = 0.0
      sum3 = 0.0

      EXECUTE  SIP_BARRIER

      PARDO  mu, nu

         GET             AO_DENS (mu,nu)
         t1xx (mu,nu)  = AO_DENS (mu,nu)
         t1xx (mu,nu) *= 2.0

         txx  (mu,nu) = 0.0
         txx2 (mu,nu) = 0.0
         txx3 (mu,nu) = 0.0

         EXECUTE  RETURN_1ST_MOM  txx   ONE
         EXECUTE  RETURN_1ST_MOM  txx2  TWO
         EXECUTE  RETURN_1ST_MOM  txx3  THREE

         etemp = t1xx (mu,nu) * txx  (mu,nu)
         sum1 += etemp

         etemp = t1xx (mu,nu) * txx2 (mu,nu)
         sum2 += etemp

         etemp = t1xx (mu,nu) * txx3 (mu,nu)
         sum3 += etemp

      ENDPARDO  mu, nu

      EXECUTE  SIP_BARRIER

      COLLECTIVE  etemp1 += sum1
      COLLECTIVE  etemp2 += sum2
      COLLECTIVE  etemp3 += sum3

      EXECUTE  SIP_BARRIER

      etemp1 *= -1.0
      etemp2 *= -1.0
      etemp3 *= -1.0

      DIP_MOM_X = etemp1
      DIP_MOM_Y = etemp2
      DIP_MOM_Z = etemp3

      DIP_MOM_X += dipnucx
      DIP_MOM_Y += dipnucy
      DIP_MOM_Z += dipnucz

      EXECUTE  SIP_BARRIER

      EXECUTE  PRINT_SCALAR  DIP_MOM_X
      EXECUTE  PRINT_SCALAR  DIP_MOM_Y
      EXECUTE  PRINT_SCALAR  DIP_MOM_Z
#     
#     
#          ...ready!
#
#
      ENDPROC  BACK_TRANS_COMP_DIP
#-------------------------------------------------------------------------




#-------------------------------------------------------------------------
#
# 
#     ----------- 
      PROC DIJ_OR  
#     ----------- 
#
# Alpha-alpha block 
# ----------------- 
#
      PARDO i, i1 
#
            GET                         Iij_aa(i,i1)    
            GET                         Iij_aa(i1,i)    
#
            tii(i1,i)                 = Iij_aa(i,i1) 
            tii(i1,i)                -= Iij_aa(i1,i) 
           #tii(i1,i)                *= -1.0  
#
           #execute energy_rdenominator tii 
            execute udenominator tii 
            PUT DOR_ii(i1,i)         += tii(i1,i) 
#
      ENDPARDO i, i1 
#
      ENDPROC DIJ_OR  
#     -------------- 
# 
# ----------------------------------------------------------------------------------------
# 
# ----------------------------------------------------------------------------------------
# 
      PROC DAB_OR  
#     ----------- 
#
# Alpha-alpha block 
# ----------------- 
#
      PARDO a, a1 
#
            GET                         Iab_aa(a,a1)    
            GET                         Iab_aa(a1,a)    
#
            taa(a1,a)                 = Iab_aa(a,a1) 
            taa(a1,a)                -= Iab_aa(a1,a) 
           #taa(a1,a)                *= -1.0  
#
           #execute energy_rdenominator taa 
            execute udenominator taa 
            PUT DOR_aa(a1,a)         += taa(a1,a) 
#
      ENDPARDO a, a1 
#
      ENDPROC DAB_OR  
#     -------------- 
# 
# ----------------------------------------------------------------------------------------
# 
# ----------------------------------------------------------------------------------------
#
      PROC XAI_FULL   
#     ------------- 
#
# Set Xai'_aa and Xai'_bb  
# -----------------------  
#
      PARDO a, i  
#
            GET Iai_aa(a,i) 
            GET Iia_aa(i,a) 
#
            Tai(a,i)        = Iia_aa(i,a) 
            Tai(a,i)       += Iai_aa(a,i) 
            PUT Xai_aa(a,i) = Tai(a,i)  
#
      ENDPARDO a, i  
#
      execute sip_barrier 
#
# Add contributions from the o-o and v-v orbital response density. 
# ----------------------------------------------------------------   
#
# Alpha-alpha contribution 
# ------------------------ 
#
      PARDO a, i, i1, i2 
#
            REQUEST             VSpipi(a,i,i2,i1) a  
            REQUEST             VSpipi(a,i,i1,i2) a  
            GET                 DOR_ii(i2,i1) 
#
            tpppp(a,i,i2,i1)  = VSpipi(a,i,i1,i2) 
            tpppp(a,i,i2,i1) += VSpipi(a,i,i2,i1) 
#
            tpp(a,i)          = tpppp(a,i,i2,i1)*DOR_ii(i2,i1) 
            tpp(a,i)         *= 0.5 
            PUT Xai_aa(a,i)  += tpp(a,i)  
#
      ENDPARDO a, i, i1, i2 
#
      PARDO a, i, j, j1 
#
            REQUEST            Vpiqj(a,i,j1,j) a  
            REQUEST            Vpiqj(a,i,j,j1) a  
            GET                DOR_ii(j1,j) 
#
            tppqq(a,i,j1,j)  = Vpiqj(a,i,j,j1) 
            tppqq(a,i,j1,j) += Vpiqj(a,i,j1,j) 
#
            tpp(a,i)         = tppqq(a,i,j1,j)*DOR_ii(j1,j) 
            tpp(a,i)        *= 0.5 
            PUT Xai_aa(a,i) += tpp(a,i)  
#
      ENDPARDO a, i, j, j1 
#
      PARDO a, i, a1, a2 
#
            REQUEST             VSaaai(a1,a2,a,i) a 
            REQUEST             VSaaai(a2,a1,a,i) a 
            GET                 DOR_aa(a1,a2) 
#
            tpppp(a1,a2,a,i)  = VSaaai(a2,a1,a,i) 
            tpppp(a1,a2,a,i) += VSaaai(a1,a2,a,i) 
#
            tpp(a,i)          = tpppp(a1,a2,a,i)*DOR_aa(a1,a2) 
            tpp(a,i)         *= 0.5 
            PUT Xai_aa(a,i)  += tpp(a,i)  
#
      ENDPARDO a, i, a1, a2 
#
      PARDO a, i, b, b1 
#
            REQUEST            Vaabj(b,b1,a,i) a 
            REQUEST            Vaabj(b1,b,a,i) a 
            GET                DOR_aa(b,b1) 
#
            tqqpp(b,b1,a,i)  = Vaabj(b1,b,a,i) 
            tqqpp(b,b1,a,i) += Vaabj(b,b1,a,i) 
#
            tpp(a,i)         = tqqpp(b,b1,a,i)*DOR_aa(b,b1) 
            tpp(a,i)        *= 0.5 
            PUT Xai_aa(a,i) += tpp(a,i)  
#
      ENDPARDO a, i, b, b1 
#
      execute sip_barrier 
#
      ENDPROC XAI_FULL   
#     ---------------- 
# 
# ----------------------------------------------------------------------------------------




# -----------------------------------------------------------------------------
#
# The complete two-particle density martix is fully transformed and 'contracted' 
# with the integral derivatives.  
# --------------------------------------------------- 
#
      PROC PDCONT
#     ----------- 
#
      PARDO mu, nu, lambda, sigma 
#
            Txxxx(mu,nu,lambda,sigma) = 0.0
#
#           Compute the seperable contribution to the density matrix  
#           --------------------------------------------------------  
#
#           Get 1-particle pieces
#           ---------------------
#
            GET DHF (mu,lambda)
            GET DHF (nu,sigma)
            GET DHF (mu,sigma)
            GET DHF (nu,lambda)
#
           #GET DHFb(mu,lambda)
           #GET DHFb(nu,sigma)
           #GET DHFb(mu,sigma)
           #GET DHFb(nu,lambda)
#
            GET Dpq (mu,lambda)
            GET Dpq (nu,sigma)
            GET Dpq (mu,sigma)
            GET Dpq (nu,lambda)
#
           #GET DpqB(mu,lambda)
           #GET DpqB(nu,sigma)
           #GET DpqB(mu,sigma)
           #GET DpqB(nu,lambda)
#
#           HF only
#           -------
            Txx(mu,lambda)             = DHF (mu,lambda)
            T1xxxx(mu,nu,lambda,sigma) = Txx(mu,lambda)^DHF (nu,sigma)
            T1xxxx(mu,nu,lambda,sigma)*= 4.0  
            Txxxx(mu,nu,lambda,sigma) += T1xxxx(mu,nu,lambda,sigma)
#
           #Txx(mu,lambda)             = DHFb(mu,lambda)
           #T1xxxx(mu,nu,lambda,sigma) = Txx(mu,lambda)^DHFb(nu,sigma)
           #Txxxx(mu,nu,lambda,sigma) += T1xxxx(mu,nu,lambda,sigma)
#
           #T1xxxx(mu,nu,lambda,sigma) = DHF (mu,lambda)^DHFb(nu,sigma)
           #Txxxx(mu,nu,lambda,sigma) += T1xxxx(mu,nu,lambda,sigma)
#
           #T1xxxx(mu,nu,lambda,sigma) = DHFb(mu,lambda)^DHF (nu,sigma)
           #Txxxx(mu,nu,lambda,sigma) += T1xxxx(mu,nu,lambda,sigma)
#
            Txx(mu,sigma)              = DHF (mu,sigma)
            T1xxxx(mu,nu,lambda,sigma) = Txx(mu,sigma)^DHF (nu,lambda)
            T1xxxx(mu,nu,lambda,sigma)*= 2.0  
            Txxxx(mu,nu,lambda,sigma) -= T1xxxx(mu,nu,lambda,sigma)
#
           #Txx(mu,sigma)              = DHFb(mu,sigma)
           #T1xxxx(mu,nu,lambda,sigma) = Txx(mu,sigma)^DHFb(nu,lambda)
           #Txxxx(mu,nu,lambda,sigma) -= T1xxxx(mu,nu,lambda,sigma)
#
            Txxxx(mu,nu,lambda,sigma) *= 0.5
#
#           Correlation
#           -----------
            T1xxxx(mu,nu,lambda,sigma) = Dpq (mu,lambda)^DHF (nu,sigma)
            T1xxxx(mu,nu,lambda,sigma)*= 4.0  
            Txxxx(mu,nu,lambda,sigma) += T1xxxx(mu,nu,lambda,sigma)
#
           #T1xxxx(mu,nu,lambda,sigma) = Dpq (mu,lambda)^DHF (nu,sigma)
           #Txxxx(mu,nu,lambda,sigma) += T1xxxx(mu,nu,lambda,sigma)
#
           #T1xxxx(mu,nu,lambda,sigma) = Dpq (mu,lambda)^DHF (nu,sigma)
           #Txxxx(mu,nu,lambda,sigma) += T1xxxx(mu,nu,lambda,sigma)
#
           #T1xxxx(mu,nu,lambda,sigma) = Dpq (mu,lambda)^DHF (nu,sigma)
           #Txxxx(mu,nu,lambda,sigma) += T1xxxx(mu,nu,lambda,sigma)

            T1xxxx(mu,nu,lambda,sigma) = Dpq (mu,sigma)^DHF (nu,lambda)
           #T1xxxx(mu,nu,lambda,sigma)*= 0.5
            Txxxx(mu,nu,lambda,sigma) -= T1xxxx(mu,nu,lambda,sigma)
#
           #T1xxxx(mu,nu,lambda,sigma) = Dpq (mu,sigma)^DHF (nu,lambda)
           #T1xxxx(mu,nu,lambda,sigma)*= 0.5
           #Txxxx(mu,nu,lambda,sigma) -= T1xxxx(mu,nu,lambda,sigma)
#
            T1xxxx(mu,nu,lambda,sigma) = Dpq (nu,lambda)^DHF (mu,sigma)
           #T1xxxx(mu,nu,lambda,sigma)*= 0.5
            Txxxx(mu,nu,lambda,sigma) -= T1xxxx(mu,nu,lambda,sigma)
#
           #T1xxxx(mu,nu,lambda,sigma) = Dpq (nu,lambda)^DHF (mu,sigma)
           #T1xxxx(mu,nu,lambda,sigma)*= 0.5
           #Txxxx(mu,nu,lambda,sigma) -= T1xxxx(mu,nu,lambda,sigma)
#
#           Fully transform Diixx 
#           --------------------- 
            DO i  
#
               Tixxx(i,nu,lambda,sigma) = 0.0 
#
               DO i1   
                  REQUEST Diixx(i,i1,lambda,sigma) i1  
                  T1ixxx(i,nu,lambda,sigma) = Diixx(i,i1,lambda,sigma)*ca(nu,i1) 
                  Tixxx(i,nu,lambda,sigma) += T1ixxx(i,nu,lambda,sigma)
               ENDDO i1   
#
               T1xxxx(mu,nu,lambda,sigma) = Tixxx(i,nu,lambda,sigma)*ca(mu,i) 
               T1xxxx(mu,nu,lambda,sigma)*= 2.0  
               Txxxx(mu,nu,lambda,sigma) += T1xxxx(mu,nu,lambda,sigma)  
#
            ENDDO i 
#
#           Fully transform Djjxx 
#           --------------------- 
#           DO j  
#
#              Tjxxx(j,nu,lambda,sigma) = 0.0 
#
#              DO j1 
#
#                 REQUEST Djjxx(j,j1,lambda,sigma) j1  
#                 T1jxxx(j,nu,lambda,sigma) = Djjxx(j,j1,lambda,sigma)*ca(nu,j1) 
#                 Tjxxx(j,nu,lambda,sigma) += T1jxxx(j,nu,lambda,sigma) 
#
#              ENDDO j1 
#
#              T1xxxx(mu,nu,lambda,sigma) = Tjxxx(j,nu,lambda,sigma)*ca(mu,j) 
#              Txxxx(mu,nu,lambda,sigma) += T1xxxx(mu,nu,lambda,sigma)  
#
#           ENDDO j 
#
#           Fully transform Dijxx 
#           --------------------- 
            DO i  
#
               Tixxx(i,nu,lambda,sigma) = 0.0 
#
               DO j1 
#
                  REQUEST Dijxx(i,j1,lambda,sigma) j1  
                  T1ixxx(i,nu,lambda,sigma) = Dijxx(i,j1,lambda,sigma)*ca(nu,j1) 
                  Tixxx(i,nu,lambda,sigma) += T1ixxx(i,nu,lambda,sigma) 
#
               ENDDO j1  
#
               T1xxxx(mu,nu,lambda,sigma) = Tixxx(i,nu,lambda,sigma)*ca(mu,i) 
               Txxxx(mu,nu,lambda,sigma) += T1xxxx(mu,nu,lambda,sigma)  
#
            ENDDO i 
#
#           Fully transform Dixix 
#           --------------------- 
            DO i 
#
               Tixxx(i,nu,lambda,sigma) = 0.0 
#
               DO i1  
#
                  REQUEST Dixix(i,nu,i1,sigma) i1  
                  T1ixxx(i,nu,lambda,sigma) = Dixix(i,nu,i1,sigma)*ca(lambda,i1) 
                  Tixxx(i,nu,lambda,sigma) += T1ixxx(i,nu,lambda,sigma)
#
               ENDDO i1 
#
               T1xxxx(mu,nu,lambda,sigma) = Tixxx(i,nu,lambda,sigma)*ca(mu,i)  
               T1xxxx(mu,nu,lambda,sigma)*= 2.0  
               Txxxx(mu,nu,lambda,sigma) += T1xxxx(mu,nu,lambda,sigma) 
#
            ENDDO i 
#
#           Fully transform Djxjx 
#           --------------------- 
#           DO j 
#
#              Tjxxx(j,nu,lambda,sigma) = 0.0 
#
#              DO j1  
#
#                 REQUEST Djxjx(j,nu,j1,sigma) j1  
#                 T1jxxx(j,nu,lambda,sigma) = Djxjx(j,nu,j1,sigma)*ca(lambda,j1) 
#                 Tjxxx(j,nu,lambda,sigma) += T1jxxx(j,nu,lambda,sigma)
#
#              ENDDO j1 
#
#              T1xxxx(mu,nu,lambda,sigma) = Tjxxx(j,nu,lambda,sigma)*ca(mu,j)  
#              Txxxx(mu,nu,lambda,sigma) += T1xxxx(mu,nu,lambda,sigma) 
#
#           ENDDO j 
#
#           Fully transform Dixxj 
#           --------------------- 
            DO i 
#
               Tixxx(i,nu,lambda,sigma) = 0.0 
#
               DO j1  
#
                  REQUEST Dixxj(i,nu,lambda,j1) j1  
                  T1ixxx(i,nu,lambda,sigma) = Dixxj(i,nu,lambda,j1)*ca(sigma,j1) 
                  Tixxx(i,nu,lambda,sigma) += T1ixxx(i,nu,lambda,sigma)
#
               ENDDO j1 
#
               T1xxxx(mu,nu,lambda,sigma) = Tixxx(i,nu,lambda,sigma)*ca(mu,i)  
               Txxxx(mu,nu,lambda,sigma) += T1xxxx(mu,nu,lambda,sigma) 
#
            ENDDO i 
#
#           Fully transform Dxiix 
#           --------------------- 
            DO i  
#
               Txixx(mu,i,lambda,sigma) = 0.0 
#
               DO i1   
                  REQUEST Dxiix(mu,i,i1,sigma) i1  
                  T1xixx(mu,i,lambda,sigma) = Dxiix(mu,i,i1,sigma)*ca(lambda,i1) 
                  Txixx(mu,i,lambda,sigma) += T1xixx(mu,i,lambda,sigma)
               ENDDO i1   
#
               T1xxxx(mu,nu,lambda,sigma) = Txixx(mu,i,lambda,sigma)*ca(nu,i) 
               T1xxxx(mu,nu,lambda,sigma)*= 2.0  
               Txxxx(mu,nu,lambda,sigma) += T1xxxx(mu,nu,lambda,sigma)  
#
            ENDDO i 
#
#           Fully transform Dxjjx 
#           --------------------- 
#           DO j  
#
#              Txjxx(mu,j,lambda,sigma) = 0.0 
#
#              DO j1   
#                 REQUEST Dxjjx(mu,j,j1,sigma) j1  
#                 T1xjxx(mu,j,lambda,sigma) = Dxjjx(mu,j,j1,sigma)*ca(lambda,j1) 
#                 Txjxx(mu,j,lambda,sigma) += T1xjxx(mu,j,lambda,sigma)
#              ENDDO j1   
#
#              T1xxxx(mu,nu,lambda,sigma) = Txjxx(mu,j,lambda,sigma)*ca(nu,j) 
#              Txxxx(mu,nu,lambda,sigma) += T1xxxx(mu,nu,lambda,sigma)  
#
#           ENDDO j 
#
#           Fully transform Dxxxi 
#           --------------------- 
            DO i 
#
               REQUEST Dxxxi(mu,nu,lambda,i) i  
#
               T1xxxx(mu,nu,lambda,sigma)  = Dxxxi(mu,nu,lambda,i)*ca(sigma,i) 
               T1xxxx(mu,nu,lambda,sigma) *= 16.0  
               Txxxx(mu,nu,lambda,sigma)  += T1xxxx(mu,nu,lambda,sigma)  
#
            ENDDO i 
#
#           Fully transform Dxxxj 
#           --------------------- 
#           DO j 
#
#              REQUEST Dxxxj(mu,nu,lambda,j) j  
#
#              T1xxxx(mu,nu,lambda,sigma)  = Dxxxj(mu,nu,lambda,j)*ca(sigma,j) 
#              T1xxxx(mu,nu,lambda,sigma) *= 8.0  
#              Txxxx(mu,nu,lambda,sigma)  += T1xxxx(mu,nu,lambda,sigma)  
#
#           ENDDO j 
#
#           Contract half-transformed amplitudes to form backtransformed Dabcd  
#           ------------------------------------------------------------------ 
#
             PXXXX(mu,nu,lambda,sigma) = 0.0 
#
#           AAAA spin case 
#           -------------- 
            DO i 
            DO i1 
#
               REQUEST TAO_AA(mu,i,nu,i1)        i  
               REQUEST LAO_AA(i,lambda,i1,sigma) i  
               Txxii(mu,nu,i,i1)          = TAO_AA(mu,i,nu,i1)
               Tiixx(i,i1,lambda,sigma)   = LAO_AA(i,lambda,i1,sigma)
#
               T1xxxx(mu,nu,lambda,sigma) = Txxii(mu,nu,i,i1)*Tiixx(i,i1,lambda,sigma)
               T1xxxx(mu,nu,lambda,sigma)*= 2.0  
               PXXXX(mu,nu,lambda,sigma) += T1xxxx(mu,nu,lambda,sigma) 
#
            ENDDO i1 
            ENDDO i 

# Watson, eom gradient

            DO i
            DO i1 
#
               REQUEST RTAO_AA(mu,i,nu,i1)        i
               REQUEST LLAO_AA(i,lambda,i1,sigma) i
               Txxii(mu,nu,i,i1)          = RTAO_AA(mu,i,nu,i1)
               Tiixx(i,i1,lambda,sigma)   = LLAO_AA(i,lambda,i1,sigma)
#
               T1xxxx(mu,nu,lambda,sigma) = Txxii(mu,nu,i,i1)*Tiixx(i,i1,lambda,sigma)
               T1xxxx(mu,nu,lambda,sigma)*= 2.0  
               PXXXX(mu,nu,lambda,sigma) += T1xxxx(mu,nu,lambda,sigma)
#
            ENDDO i1
            ENDDO i 
#
#           BBBB spin case 
#           -------------- 
#           DO j 
#           DO j1 
#
#              REQUEST TAO_bb(mu,j,nu,j1)        j1  
#              REQUEST LAO_bb(j,lambda,j1,sigma) j1  
#              Txxjj(mu,nu,j,j1)          = TAO_BB(mu,j,nu,j1)
#              Tjjxx(j,j1,lambda,sigma)   = LAO_BB(j,lambda,j1,sigma)
#
#              T1xxxx(mu,nu,lambda,sigma) = Txxjj(mu,nu,j,j1)*Tjjxx(j,j1,lambda,sigma)  
#              PXXXX(mu,nu,lambda,sigma) += T1xxxx(mu,nu,lambda,sigma) 
#
#           ENDDO j1 
#           ENDDO j 
#
#           ABAB spin case 
#           -------------- 
            DO i 
            DO j 
#
               REQUEST TAO_ab(mu,i,nu,j)        j  
               REQUEST LAO_ab(i,lambda,j,sigma) j  
               Txxij(mu,nu,i,j)            = TAO_AB(mu,i,nu,j)
               Tijxx(i,j,lambda,sigma)     = LAO_AB(i,lambda,j,sigma)
#
               T1xxxx(mu,nu,lambda,sigma)  = Txxij(mu,nu,i,j)*Tijxx(i,j,lambda,sigma)  
               T1xxxx(mu,nu,lambda,sigma) *= 4.0  
               PXXXX(mu,nu,lambda,sigma)  += T1xxxx(mu,nu,lambda,sigma) 
#
            ENDDO j 
            ENDDO i 
#
            DO i
            DO j
#
               REQUEST RTAO_ab(mu,i,nu,j)        j
               REQUEST LLAO_ab(i,lambda,j,sigma) j
               Txxij(mu,nu,i,j)            = RTAO_AB(mu,i,nu,j)
               Tijxx(i,j,lambda,sigma)     = LLAO_AB(i,lambda,j,sigma)
#              
               T1xxxx(mu,nu,lambda,sigma)  = Txxij(mu,nu,i,j)*Tijxx(i,j,lambda,sigma)
               T1xxxx(mu,nu,lambda,sigma) *= 4.0  
               PXXXX(mu,nu,lambda,sigma)  += T1xxxx(mu,nu,lambda,sigma)
#           
            ENDDO j
            ENDDO i

            Pxxxx(mu,nu,lambda,sigma) *= 0.25  
            Pxxxx(mu,nu,lambda,sigma) += Txxxx(mu,nu,lambda,sigma)  
#
            T1xxxx(mu,lambda,nu,sigma)  = Pxxxx(mu,nu,lambda,sigma) 
#
#           INTEGRAL BLOCK 1 
#           ---------------- 
            execute der_int_setup dx1(mu,lambda,nu,sigma) 
            execute der_int_setup dy1(mu,lambda,nu,sigma) 
            execute der_int_setup dz1(mu,lambda,nu,sigma) 
            execute der_int_setup dx2(mu,lambda,nu,sigma) 
            execute der_int_setup dy2(mu,lambda,nu,sigma) 
            execute der_int_setup dz2(mu,lambda,nu,sigma) 
            execute der_int_setup dx3(mu,lambda,nu,sigma) 
            execute der_int_setup dy3(mu,lambda,nu,sigma) 
            execute der_int_setup dz3(mu,lambda,nu,sigma) 
            execute der_int_setup dx4(mu,lambda,nu,sigma) 
            execute der_int_setup dy4(mu,lambda,nu,sigma) 
            execute der_int_setup dz4(mu,lambda,nu,sigma) 
#
            execute compute_derivative_integrals 
#
            execute DCONT2 T1xxxx(mu,lambda,nu,sigma) 
#
      ENDPARDO mu, nu, lambda, sigma  
      execute server_barrier 
#
      ENDPROC PDCONT 
#-------------------------------------------------------------------------




#-------------------------------------------------------------------------
#
#     ------------------------          
      PROC  DENS_INTERMEDIATES         
#     ------------------------
#     
#
      PARDO a, a1, i, i1
           REQUEST                        Tau_aa(a,i,a1,i1) i1
           REQUEST                        A2old_aa(i,a,i1,a1) i1
           tpppp(a,a1,i,i1)             = Tau_aa(a,i,a1,i1)
           t1pppp(i,i1,a,a1)            = A2old_aa(i,a,i1,a1)
           PREPARE LTau_aa(a,a1,i,i1)   = tpppp(a,a1,i,i1)
           PREPARE LA2old_aa(i,i1,a,a1) = t1pppp(i,i1,a,a1)
      ENDPARDO a, a1, i, i1
#           
      PARDO a, b1, i, j1
           REQUEST                        Tau_ab(a,i,b1,j1) j1
           REQUEST                        A2old_ab(i,a,j1,b1) j1
           tpqpq(a,b1,i,j1)             = Tau_ab(a,i,b1,j1)
           t1pqpq(i,j1,a,b1)            = A2old_ab(i,a,j1,b1)
           PREPARE LTau_ab(a,b1,i,j1)   = tpqpq(a,b1,i,j1)
           PREPARE LA2old_ab(i,j1,a,b1) = t1pqpq(i,j1,a,b1)
      ENDPARDO a, b1, i, j1
#
#
#      Intermediate in DIJAB
#
#
      PARDO i2, a2, a1, i1
            GET a1a_old(i2,a2)
            GET t1a_old(a1,i1)

            Tiaai(i2,a2,a1,i1)          = a1a_old(i2,a2)^t1a_old(a1,i1)
            Tiaai(i2,a2,a1,i1)         *= 2.0
            PREPARE Liaai(i2,a2,a1,i1) += Tiaai(i2,a2,a1,i1)
      ENDPARDO i2, a2, a1, i1

      PARDO i2, a2, a, i
            REQUEST A2old_aa(i2,a2,i,a) a
            DO i1
            DO a1
               REQUEST                       T2old_aa(a,i,a1,i1) i1
               Tiaai(i2,a2,a1,i1)          = A2old_aa(i2,a2,i,a)*T2old_aa(a,i,a1,i1)
               PREPARE Liaai(i2,a2,a1,i1) += Tiaai(i2,a2,a1,i1)
            ENDDO a1
            ENDDO i1
      ENDPARDO i2, a2, a, i

      PARDO i2, a2, b, j
            REQUEST A2old_ab(i2,a2,j,b) j
            DO i1
            DO a1
               REQUEST                       T2old_ab(a1,i1,b,j) j
               Tiaai(i2,a2,a1,i1)          = A2old_ab(i2,a2,j,b)*T2old_ab(a1,i1,b,j)
               PREPARE Liaai(i2,a2,a1,i1) += Tiaai(i2,a2,a1,i1)
            ENDDO a1
            ENDDO i1
      ENDPARDO i2, a2, b, j

      PARDO j, b, a1, i1
            GET a1a_old(j,b)
            GET t1a_old(a1,i1)
#
            Tjbai(j,b,a1,i1)         = a1a_old(j,b)^t1a_old(a1,i1)
            Tjbai(j,b,a1,i1)        *= 2.0
            PREPARE Ljbai(j,b,a1,i1) += Tjbai(j,b,a1,i1)  
      ENDPARDO j, b, a1, i1
#
      PARDO j, b, a3, i3
            REQUEST A2old_ab(i3,a3,j,b) b
            DO i1
            DO a1
               REQUEST                     T2old_aa(a3,i3,a1,i1) i1
               Tjbai(j,b,a1,i1)          = A2old_ab(i3,a3,j,b)*T2old_aa(a3,i3,a1,i1)
               PREPARE Ljbai(j,b,a1,i1) += Tjbai(j,b,a1,i1)
            ENDDO a1
            ENDDO i1
      ENDPARDO j, b, a3, i3
#
      PARDO j, b, j1, b1
            REQUEST A2old_aa(j1,b1,j,b) j1
            DO i1
            DO a1
               REQUEST                     T2old_ab(a1,i1,b1,j1) j1
               Tjbai(j,b,a1,i1)          = A2old_aa(j1,b1,j,b)*T2old_ab(a1,i1,b1,j1)
               PREPARE Ljbai(j,b,a1,i1) += Tjbai(j,b,a1,i1)
            ENDDO a1
            ENDDO i1
      ENDPARDO j, b, j1, b1

      PARDO i1, a1, b, j
            GET a1a_old(i1,a1)
            GET t1a_old(b,j)
#
            Tiabj(i1,a1,b,j)         = a1a_old(i1,a1)^t1a_old(b,j)
            Tiabj(i1,a1,b,j)        *= 2.0
            PREPARE Liabj(i1,a1,b,j) += Tiabj(i1,a1,b,j)
      ENDPARDO i1, a1, b, j
#
      PARDO i1, a1, b1, j1
            REQUEST A2old_ab(i1,a1,j1,b1) j1
            DO j
            DO b
               REQUEST                     T2old_aa(b,j,b1,j1)   j1
               Tiabj(i1,a1,b,j)          = A2old_ab(i1,a1,j1,b1)*T2old_aa(b,j,b1,j1)
               PREPARE Liabj(i1,a1,b,j) += Tiabj(i1,a1,b,j)
            ENDDO b
            ENDDO j
      ENDPARDO i1, a1, b1, j1
#
      PARDO i1, a1, a, i
            REQUEST A2old_aa(i1,a1,i,a) a
            DO j
            DO b
               REQUEST                     T2old_ab(a,i,b,j) j
               Tiabj(i1,a1,b,j)          = A2old_aa(i1,a1,i,a)*T2old_ab(a,i,b,j)
               PREPARE Liabj(i1,a1,b,j) += Tiabj(i1,a1,b,j)
            ENDDO b
            ENDDO j
      ENDPARDO i1, a1, a, i

      PARDO j2, b2, b, j
            GET a1a_old(j2,b2)
            GET t1a_old(b,j)
            Tjbbj(j2,b2,b,j)         = a1a_old(j2,b2)^t1a_old(b,j)
            Tjbbj(j2,b2,b,j)        *= 2.0
            PREPARE Ljbbj(j2,b2,b,j) += Tjbbj(j2,b2,b,j)
      ENDPARDO j2, b2, b, j
#     
      PARDO j2, b2, b1, j1
            REQUEST A2old_aa(j2,b2,j1,b1) j1
            DO j
            DO b
               REQUEST                     T2old_aa(b,j,b1,j1) j1
               Tjbbj(j2,b2,b,j)          = A2old_aa(j2,b2,j1,b1)*T2old_aa(b,j,b1,j1)
               PREPARE Ljbbj(j2,b2,b,j) += Tjbbj(j2,b2,b,j) 
            ENDDO b
            ENDDO j
      ENDPARDO j2, b2, b1, j1
#     
      PARDO j2, b2, a, i
            REQUEST A2old_ab(i,a,j2,b2) b2
            DO j
            DO b
               REQUEST                     T2old_ab(a,i,b,j) j
               Tjbbj(j2,b2,b,j)          = A2old_ab(i,a,j2,b2)*T2old_ab(a,i,b,j)
               PREPARE Ljbbj(j2,b2,b,j) += Tjbbj(j2,b2,b,j) 
            ENDDO b
            ENDDO j
      ENDPARDO j2, b2, a, i
#
# Dii 
# ---  
#
      PARDO i, i1
#
            GET Gmi_a(i,i1)         
            PUT Dii(i,i1) += Gmi_a(i,i1) 
#     
      ENDPARDO i, i1
#     
      PARDO i, i1, a       
#           
            GET a1a_old(i1,a)
            GET t1a_old(a,i)               
            Tii(i,i1)      = a1a_old(i1,a)*t1a_old(a,i) 
            PUT Dii(i,i1) += Tii(i,i1)  
#           
      ENDPARDO i, i1, a
#     
# Daa 
# --- 
#           
      PARDO a1, a
#           
            GET Gae_a(a1,a)                
            PUT Daa(a1,a) += Gae_a(a1,a) 
#              
      ENDPARDO a1, a
#           
      PARDO a1, a, i 
#
            GET a1a_old(i,a1)
            GET t1a_old(a,i)
            Taa(a1,a)      = t1a_old(a,i)*a1a_old(i,a1)
            Taa(a1,a)     *= -1.0
            PUT Daa(a1,a) += Taa(a1,a)
#
      ENDPARDO a1, a, i
#
# Djj 
# ---  
#
      PARDO j, j1
#
            GET Gmi_b(j,j1)
            PUT Djj(j,j1) += Gmi_b(j,j1)
#
      ENDPARDO j, j1
#
      PARDO j, j1, b
#
            GET a1a_old(j1,b)
            GET t1a_old(b,j)
            Tjj(j,j1)      = a1a_old(j1,b)*t1a_old(b,j)
            PUT Djj(j,j1) += Tjj(j,j1)
#
      ENDPARDO j, j1, b
#
# Dbb 
# --- 
#
      PARDO b1, b
#
            GET Gae_b(b1,b)
            PUT Dbb(b1,b) += Gae_b(b1,b)
#
      ENDPARDO b1, b
#
      PARDO b1, b, j  
#
            GET a1a_old(j,b1)
            GET t1a_old(b,j)
            Tbb(b1,b)      = t1a_old(b,j)*a1a_old(j,b1)
            Tbb(b1,b)     *= -1.0
            PUT Dbb(b1,b) += Tbb(b1,b)
#           
      ENDPARDO b1, b, j   

# ------------------------------------------------------------------------- 
#
# Form the two-particle intermediate I3aa, I3bb, I3ab, and I3ba  needed in 
# place of V^{ab}_{cd}. 
#
# ------------------------------------------------------------------------- 
#
# Form the intermediate I3aa 
# -------------------------- 
#
      PARDO a, a1 
#
            DO i2 
            DO i1 
            DO i 
#
               REQUEST A2old_aa(i2,a,i1,a1) a  
               GET t1a_old(a1,i) 
#
               Tiaii(i2,a,i1,i) = A2old_aa(i2,a,i1,a1)*t1a_old(a1,i) 
               PUT     I3aa(i2,a,i1,i) += Tiaii(i2,a,i1,i) 
#
            ENDDO i 
            ENDDO i1 
            ENDDO i2 
#
      ENDPARDO a, a1 
#
# Form the intermediate I3ab 
# -------------------------- 
#
      PARDO a, b1 
#
            DO i2 
            DO j1 
            DO j 
#
               REQUEST A2old_ab(i2,a,j1,b1) b1  
               GET t1a_old(b1,j) 
#
               Tiajj(i2,a,j1,j) = A2old_ab(i2,a,j1,b1)*t1a_old(b1,j) 
               PUT     I3ab(i2,a,j1,j) += Tiajj(i2,a,j1,j) 
#
            ENDDO j 
            ENDDO j1 
            ENDDO i2 
#
      ENDPARDO a, b1 
#
#     
#          ...ready!
#     
#     
      ENDPROC  DENS_INTERMEDIATES
#-------------------------------------------------------------------------



#-------------------------------------------------------------------------
#           
#     ------------------
      PROC  EOM_DENS_INT
#     ------------------
#     
#
#     Ring intermediates (L2 * T2  AND  L2 * R2)
#
#
      PARDO  a, a2, i2, a1
         ALLOCATE  LLaiai (a2,i2,a1,*)
         DO i1
            REQUEST                 L2AA (i1,a1,i2,a2) i1
            LLaiai (a2,i2,a1,i1)  = L2AA (i1,a1,i2,a2)
         ENDDO i1
         DO i
            REQUEST  R2AA (a,i,a2,i2) i
            REQUEST  T2old_aa (a,i,a2,i2) i
            DO i1
               taiai  (a,i,a1,i1) = R2AA (a,i,a2,i2) * LLaiai (a2,i2,a1,i1)
               t1aiai (a,i,a1,i1) = T2old_aa (a,i,a2,i2) * LLaiai (a2,i2,a1,i1)

               tiaia  (i,a1,i1,a) = taiai  (a,i,a1,i1)
               t1iaia (i,a1,i1,a) = t1aiai (a,i,a1,i1)

               PREPARE  L2R2_aaaa (i,a1,i1,a) += tiaia  (i,a1,i1,a)
               PREPARE  L2T2_aaaa (i,a1,i1,a) += t1iaia (i,a1,i1,a)
            ENDDO i1
         ENDDO i
         DEALLOCATE  LLaiai (a2,i2,a1,*)
      ENDPARDO  a, a2, i2, a1

      PARDO  a, b2, j2, a1
         ALLOCATE  LLbjai (b2,j2,a1,*)
         DO i1
            REQUEST                 L2AB (i1,a1,j2,b2) i1
            LLbjai (b2,j2,a1,i1)  = L2AB (i1,a1,j2,b2)
         ENDDO i1
         DO i
            REQUEST  R2AB (a,i,b2,j2) i
            REQUEST  T2old_ab (a,i,b2,j2) i
            DO i1
               taiai  (a,i,a1,i1) = R2AB (a,i,b2,j2) * LLbjai (b2,j2,a1,i1)
               t1aiai (a,i,a1,i1) = T2old_ab (a,i,b2,j2) * LLbjai (b2,j2,a1,i1)

               tiaia  (i,a1,i1,a) = taiai  (a,i,a1,i1)
               t1iaia (i,a1,i1,a) = t1aiai (a,i,a1,i1)

               PREPARE  L2R2_aaaa (i,a1,i1,a) += tiaia  (i,a1,i1,a)
               PREPARE  L2T2_aaaa (i,a1,i1,a) += t1iaia (i,a1,i1,a)
            ENDDO i1
         ENDDO i
         DEALLOCATE  LLbjai (b2,j2,a1,*)
      ENDPARDO  a, b2, j2, a1

      PARDO  a, a2, i2, b1
         ALLOCATE  Laibj (a2,i2,b1,*)
         DO j1
            REQUEST                L2AB (i2,a2,j1,b1) j1
            Laibj (a2,i2,b1,j1)  = L2AB (i2,a2,j1,b1)
         ENDDO j1
         DO i
            REQUEST  R2AA (a,i,a2,i2) i
            REQUEST  T2old_aa (a,i,a2,i2) i
            DO j1
               taibj  (a,i,b1,j1) = R2AA (a,i,a2,i2) * Laibj (a2,i2,b1,j1)
               t1aibj (a,i,b1,j1) = T2old_aa (a,i,a2,i2) * Laibj (a2,i2,b1,j1)

               tpqqp  (i,b1,j1,a) = taibj  (a,i,b1,j1)
               t1pqqp (i,b1,j1,a) = t1aibj (a,i,b1,j1)

               PREPARE  L2R2_abba (i,b1,j1,a) += tpqqp  (i,b1,j1,a)
               PREPARE  L2T2_abba (i,b1,j1,a) += t1pqqp (i,b1,j1,a)
            ENDDO j1
         ENDDO i
         DEALLOCATE  Laibj (a2,i2,b1,*)
      ENDPARDO  a, a2, i2, b1

      PARDO  a, b2, j2, b1
         ALLOCATE  LLbjbj (b2,j2,b1,*)
         DO j1
            REQUEST                L2AA (j2,b2,j1,b1) j1
            LLbjbj (b2,j2,b1,j1)  = L2AA (j2,b2,j1,b1)
         ENDDO j1
         DO i
            REQUEST  R2AB (a,i,b2,j2) i
            REQUEST  T2old_ab (a,i,b2,j2) i
            DO j1
               taibj  (a,i,b1,j1) = R2AB (a,i,b2,j2) * LLbjbj (b2,j2,b1,j1)
               t1aibj (a,i,b1,j1) = T2old_ab (a,i,b2,j2) * LLbjbj (b2,j2,b1,j1)

               tpqqp  (i,b1,j1,a) = taibj  (a,i,b1,j1)
               t1pqqp (i,b1,j1,a) = t1aibj (a,i,b1,j1)

               PREPARE  L2R2_abba (i,b1,j1,a) += tpqqp  (i,b1,j1,a)
               PREPARE  L2T2_abba (i,b1,j1,a) += t1pqqp (i,b1,j1,a)
            ENDDO j1
         ENDDO i
         DEALLOCATE  LLbjbj (b2,j2,b1,*)
      ENDPARDO  a, b2, j2, b1

      PARDO  b, a2, j2, b1
         ALLOCATE  Lajib (a2,j2,*,b1)
         DO i1
            REQUEST                L2AB (i1,a2,j2,b1) i1
            Lajib (a2,j2,i1,b1)  = L2AB (i1,a2,j2,b1)
         ENDDO i1
         DO i
            REQUEST              R2AB (a2,i,b,j2) i
            REQUEST              T2old_ab (a2,i,b,j2) i
            tpqpq  (i,b,a2,j2) = R2AB (a2,i,b,j2)
            t1pqpq (i,b,a2,j2) = T2old_ab (a2,i,b,j2)
            DO i1
               tibib  (i,b,i1,b1) = tpqpq  (i,b,a2,j2) * Lajib (a2,j2,i1,b1)
               t1ibib (i,b,i1,b1) = t1pqpq (i,b,a2,j2) * Lajib (a2,j2,i1,b1)

               PREPARE  L2R2_abab (i,b,i1,b1) += tibib  (i,b,i1,b1)
               PREPARE  L2T2_abab (i,b,i1,b1) += t1ibib (i,b,i1,b1)
            ENDDO i1
         ENDDO i
         DEALLOCATE  Lajib (a2,j2,*,b1)
      ENDPARDO  b, a2, j2, b1
#
#
#     R1 * L2 --> LR1L2_ai
#
#
      PARDO  i2, a2, a, i
         REQUEST             L2AA (i,a,i2,a2) i2
         GET                 R1A  (a2,i2)
         taiai (a,i,a2,i2) = L2AA (i,a,i2,a2)
         tai (a,i)  = taiai (a,i,a2,i2) * R1A (a2,i2)
         LR1L2_ai (a,i) += tai (a,i)
         DO i1
            GET  t1a_old (a,i1)
            tpp (a,i1) = t1a_old (a,i1)
            tii (i,i1) = tai (a,i) * tpp (a,i1)
            L_Z_ii (i,i1) += tii (i,i1)
         ENDDO i1
         DO a1
            GET  t1a_old (a1,i)
            taa (a,a1) = tai (a,i) * t1a_old (a1,i)
            L_Z_aa (a,a1) += taa (a,a1)
         ENDDO a1
      ENDPARDO  i2, a2, a, i

      PARDO  j2, b2, a, i
         REQUEST             L2AB (i,a,j2,b2) j2
         GET                 R1A  (b2,j2)
         taiai (a,i,b2,j2) = L2AB (i,a,j2,b2)
         tai (a,i)  = taiai (a,i,b2,j2) * R1A (b2,j2)
         LR1L2_ai (a,i) += tai (a,i)
         DO i1
            GET  t1a_old (a,i1)
            tpp (a,i1) = t1a_old (a,i1)
            tii (i,i1) = tai (a,i) * tpp (a,i1)
            L_Z_ii (i,i1) += tii (i,i1)
         ENDDO i1
         DO a1
            taa (a,a1) = tai (a,i) * t1a_old (a1,i)
            L_Z_aa (a,a1) += taa (a,a1)
         ENDDO a1
      ENDPARDO  j2, b2, a, i

      PARDO  i, a, i2, a2
         REQUEST             R2AA (a,i,a2,i2) i
         REQUEST             T2old_aa (a,i,a2,i2) i
         GET                 L1A  (i2,a2)
         t1ai (a,i)        = R2AA  (a,i,a2,i2) * L1A (i2,a2)
         t2ai (a,i)        = T2old_aa  (a,i,a2,i2) * L1A (i2,a2)
         LR2L1_ai (a,i) += t1ai (a,i)
         L_Z1_ai  (a,i) += t1ai (a,i)
         L_Z2_ai  (a,i) += t2ai (a,i)
      ENDPARDO  i, a, i2, a2

      PARDO  i, a, j2, b2
         REQUEST              R2AB (a,i,b2,j2) i
         REQUEST              T2old_ab (a,i,b2,j2) i
         GET                  L1A (j2,b2)
         t1ai (a,i)         = R2AB  (a,i,b2,j2) * L1A  (j2,b2)
         t2ai (a,i)         = T2old_ab  (a,i,b2,j2) * L1A  (j2,b2)
         LR2L1_ai (a,i) += t1ai (a,i)
         L_Z1_ai  (a,i) += t1ai (a,i)
         L_Z2_ai  (a,i) += t2ai (a,i)
      ENDPARDO  i, a, j2, b2
#
#
#     R2 * L2 --> R2L2_ii
#     T2 * L2 --> T2L2_ii
#
#
      PARDO  i3, a2, a3
         ALLOCATE  Liaia  (*,a3,i3,a2)
         ALLOCATE  Laaia  (*,a3,i3,a2)
         ALLOCATE  L1aaia (*,a3,i3,a2)
         DO i
            REQUEST               L2AA (i,a2,i3,a3) i
            Liaia (i,a3,i3,a2)  = L2AA (i,a2,i3,a3)
            Liaia (i,a3,i3,a2) *= 0.5
            DO a
               GET  R1A (a,i)
               GET  t1a_old (a,i)
               t2pppp (a,a3,i3,a2)  = t1a_old (a,i) * Liaia (i,a3,i3,a2)
               t3pppp (a,a3,i3,a2)  = R1A  (a,i) * Liaia (i,a3,i3,a2)
               Laaia  (a,a3,i3,a2) += t2pppp (a,a3,i3,a2)
               L1aaia (a,a3,i3,a2) += t3pppp (a,a3,i3,a2)
            ENDDO a
         ENDDO i
         DO i2
            REQUEST               T2old_aa (a3,i3,a2,i2) i2
            REQUEST               R2AA (a3,i3,a2,i2) i2
            DO i
               tii (i,i2) = Liaia (i,a3,i3,a2) * T2old_aa (a3,i3,a2,i2)
               tpp (i,i2) = Liaia (i,a3,i3,a2) * R2AA (a3,i3,a2,i2)
               LT2L2_ii (i,i2) += tii (i,i2)
               LR2L2_ii (i,i2) += tpp (i,i2)
               L_Y_ii   (i,i2) += tii (i,i2)
               L_Z_ii   (i,i2) += tpp (i,i2)
            ENDDO i
            DO a
               tai  (a,i2)  = Laaia  (a,a3,i3,a2) * R2AA (a3,i3,a2,i2)
               t1ai (a,i2)  = L1aaia (a,a3,i3,a2) * T2old_aa (a3,i3,a2,i2)
               t2ai (a,i2)  = Laaia  (a,a3,i3,a2) * T2old_aa (a3,i3,a2,i2)
               tai  (a,i2) += t1ai (a,i2)
               L_Z1_ai (a,i2) -= tai  (a,i2)
               L_Z2_ai (a,i2) -= t2ai (a,i2)
            ENDDO a
         ENDDO i2
         DEALLOCATE  L1aaia (*,a3,i3,a2)
         DEALLOCATE  Laaia  (*,a3,i3,a2)
         DEALLOCATE  Liaia  (*,a3,i3,a2)
      ENDPARDO  i3, a2, a3

      PARDO  j3, a2, b3
         ALLOCATE  Liajb  (*,a2,j3,b3)
         ALLOCATE  Laajb  (*,a2,j3,b3)
         ALLOCATE  L1aajb (*,a2,j3,b3)
         DO i
            REQUEST               L2AB (i,a2,j3,b3) i
            Liajb (i,a2,j3,b3)  = L2AB (i,a2,j3,b3)
            DO a
               GET  R1A (a,i)
               GET  t1a_old (a,i)
               tppqq  (a,a2,j3,b3)  = t1a_old (a,i) * Liajb (i,a2,j3,b3)
               t1ppqq (a,a2,j3,b3)  = R1A  (a,i) * Liajb (i,a2,j3,b3)
               Laajb  (a,a2,j3,b3) += tppqq  (a,a2,j3,b3)
               L1aajb (a,a2,j3,b3) += t1ppqq (a,a2,j3,b3)
            ENDDO a
         ENDDO i
         DO i2
            REQUEST                T2old_ab (a2,i2,b3,j3) i2
            REQUEST                R2AB (a2,i2,b3,j3) i2
            tpqqp  (a2,j3,b3,i2) = T2old_ab (a2,i2,b3,j3)
            t1pqqp (a2,j3,b3,i2) = R2AB (a2,i2,b3,j3)
            DO i
               tii (i,i2) = Liajb (i,a2,j3,b3) * tpqqp  (a2,j3,b3,i2)
               tpp (i,i2) = Liajb (i,a2,j3,b3) * t1pqqp (a2,j3,b3,i2)
               LT2L2_ii (i,i2) += tii (i,i2)
               LR2L2_ii (i,i2) += tpp (i,i2)
               L_Y_ii   (i,i2) += tii (i,i2)
               L_Z_ii   (i,i2) += tpp (i,i2)
            ENDDO i
            DO a
               tai  (a,i2)  = Laajb  (a,a2,j3,b3) * t1pqqp (a2,j3,b3,i2)
               t1ai (a,i2)  = L1aajb (a,a2,j3,b3) * tpqqp  (a2,j3,b3,i2)
               t2ai (a,i2)  = Laajb  (a,a2,j3,b3) * tpqqp  (a2,j3,b3,i2)
               tai  (a,i2) += t1ai (a,i2)
               L_Z1_ai (a,i2) -= tai  (a,i2)
               L_Z2_ai (a,i2) -= t2ai (a,i2)
            ENDDO a
         ENDDO i2
         DEALLOCATE  L1aajb (*,a2,j3,a3)
         DEALLOCATE  Laajb  (*,a2,j3,a3)
         DEALLOCATE  Liajb  (*,a2,j3,a3)
      ENDPARDO  j3, a2, b3
#
#
#      Z intermediates for Dijab
#
#
      PARDO  a2, i2, a
         GET  R1A (a,i2)
         GET  L1A (i2,a2)
         taa (a,a2)  = R1A (a,i2) * L1A (i2,a2)
         DO i
            GET  t1a_old (a2,i)
            tai (a,i) = taa (a,a2) * t1a_old (a2,i)
            L_Z1_ai (a,i) -= tai (a,i)
         ENDDO i
      ENDPARDO  a2, i2, a

      PARDO  a2, i2, i
         GET  R1A (a2,i)
         GET  L1A (i2,a2)
         tii (i2,i)  = L1A (i2,a2) * R1A (a2,i)
         DO a
            GET  t1a_old (a,i2)
            tai (a,i) = t1a_old (a,i2) * tii (i2,i)
            L_Z1_ai (a,i) -= tai (a,i)
         ENDDO a
      ENDPARDO  a2, i2, i

      PARDO  a2, i2, a
         GET  L1A (i2,a2)
         GET  t1a_old (a,i2)
         tpp (a,i2) = t1a_old (a,i2)
         taa (a,a2)  = tpp (a,i2) * L1A (i2,a2)
         DO i
            GET  t1a_old (a2,i)
            tai (a,i) = taa (a,a2) * t1a_old (a2,i)
            L_Z2_ai (a,i) -= tai (a,i)
         ENDDO i
      ENDPARDO  a2, i2, a

      PARDO  a, i
         GET          L1A (i,a)
         tai (a,i)  = L1A (i,a)
         tia (i,a)  = L1A (i,a)
         DO i2
            GET  R1A (a,i2)
            GET  t1a_old (a,i2)
            tpp (a,i2) = t1a_old (a,i2)
            tii  (i,i2)  = tia (i,a) * tpp (a,i2)
            t1ii (i,i2)  = tia (i,a) * R1A (a,i2)
            L_Y_ii (i,i2) += tii  (i,i2)
            L_Z_ii (i,i2) += t1ii (i,i2)
         ENDDO i2
         DO a2
            GET  R1A (a2,i)
            GET  t1a_old (a2,i)
            taa  (a,a2) = tai (a,i) * t1a_old (a2,i)
            t1aa (a,a2) = tai (a,i) * R1A  (a2,i)
            L_Y_aa (a,a2) += taa  (a,a2)
            L_Z_aa (a,a2) += t1aa (a,a2)
         ENDDO a2
      ENDPARDO  a, i
#
#
#     R2 * L2 --> R2L2_aa
#     T2 * L2 --> T2L2_aa
#
#
      PARDO  a3, i2, i3
         ALLOCATE  LLaiai  (*,i2,a3,i3)
         ALLOCATE  Liiai  (*,i2,a3,i3)
         ALLOCATE  L1iiai (*,i2,a3,i3)
         DO a
            REQUEST               L2AA (i2,a,i3,a3) a
            LLaiai (a,i2,a3,i3)  = L2AA (i2,a,i3,a3)
            LLaiai (a,i2,a3,i3) *= -0.5
            DO i
               GET  R1A (a,i)
               GET  t1a_old (a,i)
               tpppp  (i,i2,a3,i3)  = t1a_old (a,i) * LLaiai (a,i2,a3,i3)
               t1pppp (i,i2,a3,i3)  = R1A  (a,i) * LLaiai (a,i2,a3,i3)
               Liiai  (i,i2,a3,i3) += tpppp (i,i2,a3,i3)
               L1iiai (i,i2,a3,i3) += t1pppp (i,i2,a3,i3)
            ENDDO i
         ENDDO a
         DO a2
            REQUEST                R2AA (a3,i3,a2,i2) a2
            REQUEST                T2old_aa (a3,i3,a2,i2) a2
            tiaia  (i2,a3,i3,a2) = R2AA (a3,i3,a2,i2)
            t1iaia (i2,a3,i3,a2) = T2old_aa (a3,i3,a2,i2)
            DO a
               taa (a,a2)  = LLaiai (a,i2,a3,i3) * t1iaia (i2,a3,i3,a2)
               tpp (a,a2)  = LLaiai (a,i2,a3,i3) * tiaia  (i2,a3,i3,a2)
               LT2L2_aa (a,a2) += taa (a,a2)
               LR2L2_aa (a,a2) += tpp (a,a2)
               L_Y_aa   (a,a2) -= taa (a,a2)
               L_Z_aa   (a,a2) -= tpp (a,a2)
            ENDDO a
            DO i
               tai  (a2,i)  = Liiai  (i,i2,a3,i3) * tiaia  (i2,a3,i3,a2)
               t1ai (a2,i)  = L1iiai (i,i2,a3,i3) * t1iaia (i2,a3,i3,a2)
               t2ai (a2,i)  = Liiai  (i,i2,a3,i3) * t1iaia (i2,a3,i3,a2)
               tai  (a2,i) += t1ai (a2,i)
               L_Z1_ai (a2,i) += tai  (a2,i)
               L_Z2_ai (a2,i) += t2ai (a2,i)
            ENDDO i
         ENDDO a2
         DEALLOCATE  L1iiai (*,i2,a3,i3)
         DEALLOCATE  Liiai  (*,i2,a3,i3)
         DEALLOCATE  LLaiai  (*,i2,a3,i3)
      ENDPARDO  a3, i2, i3

      PARDO  b3, i2, j3
         ALLOCATE  Laibj  (*,i2,b3,j3)
         ALLOCATE  Liibj  (*,i2,b3,j3)
         ALLOCATE  L1iibj (*,i2,b3,j3)
         DO a
            REQUEST               L2AB (i2,a,j3,b3) a
            Laibj (a,i2,b3,j3)  = L2AB (i2,a,j3,b3)
            Laibj (a,i2,b3,j3) *= -1.0
            DO i
               GET  R1A (a,i)
               GET  t1a_old (a,i)
               tppqq  (i,i2,b3,j3)  = t1a_old (a,i) * Laibj (a,i2,b3,j3)
               t1ppqq (i,i2,b3,j3)  = R1A  (a,i) * Laibj (a,i2,b3,j3)
               Liibj  (i,i2,b3,j3) += tppqq  (i,i2,b3,j3)
               L1iibj (i,i2,b3,j3) += t1ppqq (i,i2,b3,j3)
            ENDDO i
         ENDDO a
         DO a2
            REQUEST                R2AB  (a2,i2,b3,j3) a2
            REQUEST                T2old_ab  (a2,i2,b3,j3) a2
            tpqqp  (i2,b3,j3,a2) = R2AB  (a2,i2,b3,j3)
            t1pqqp (i2,b3,j3,a2) = T2old_ab  (a2,i2,b3,j3)
            DO a
               taa (a,a2)  = Laibj (a,i2,b3,j3) * t1pqqp (i2,b3,j3,a2)
               tpp (a,a2)  = Laibj (a,i2,b3,j3) * tpqqp  (i2,b3,j3,a2)
               LT2L2_aa (a,a2) += taa (a,a2)
               LR2L2_aa (a,a2) += tpp (a,a2)
               L_Y_aa   (a,a2) -= taa (a,a2)
               L_Z_aa   (a,a2) -= tpp (a,a2)
            ENDDO a
            DO i
               tai  (a2,i)  = Liibj  (i,i2,b3,j3) * tpqqp  (i2,b3,j3,a2)
               t1ai (a2,i)  = L1iibj (i,i2,b3,j3) * t1pqqp (i2,b3,j3,a2)
               t2ai (a2,i)  = Liibj  (i,i2,b3,j3) * t1pqqp (i2,b3,j3,a2)
               tai  (a2,i) += t1ai (a2,i)
               L_Z1_ai (a2,i) += tai  (a2,i)
               L_Z2_ai (a2,i) += t2ai (a2,i)
            ENDDO i
         ENDDO a2
         DEALLOCATE  L1iibj (*,i2,b3,j3)
         DEALLOCATE  Liibj  (*,i2,b3,j3)
         DEALLOCATE  Laibj  (*,i2,b3,j3)
      ENDPARDO  b3, i2, j3

      CREATE  DIS_OO1_A
      CREATE  DIS_OO2_A
      CREATE  DIS_OO3_A
      CREATE  DIS_OO4_A
      CREATE  DIS_VV1_A
      CREATE  DIS_VV2_A
      CREATE  DIS_VV3_A
      CREATE  DIS_VV4_A
      CREATE  DIS_VO1_A
      CREATE  DIS_VO2_A
      CREATE  DIS_VO3_A
      CREATE  DIS_VO4_A
      EXECUTE  SIP_BARRIER

      DO a
      DO a1
         taa  (a,a1) = LR2L2_aa (a,a1)
         t1aa (a,a1) = LT2L2_aa (a,a1)
         taa2 (a,a1) = L_Y_aa   (a,a1)
         t3aa (a,a1) = L_Z_aa   (a,a1)
         PUT  DIS_VV1_A (a,a1) += taa  (a,a1)
         PUT  DIS_VV2_A (a,a1) += t1aa (a,a1)
         PUT  DIS_VV3_A (a,a1) += taa2 (a,a1)
         PUT  DIS_VV4_A (a,a1) += t3aa (a,a1)
      ENDDO a1
      ENDDO a

      DO a
      DO i
         tai  (a,i) = LR1L2_ai (a,i)
         t1ai (a,i) = LR2L1_ai (a,i)
         t2ai (a,i) = L_Z1_ai  (a,i)
         t3ai (a,i) = L_Z2_ai  (a,i)
         PUT  DIS_VO1_A (a,i) += tai  (a,i)
         PUT  DIS_VO2_A (a,i) += t1ai (a,i)
         PUT  DIS_VO3_A (a,i) += t2ai (a,i)
         PUT  DIS_VO4_A (a,i) += t3ai (a,i)
      ENDDO i
      ENDDO a

      DO i
      DO i1
         tii  (i,i1) = LR2L2_ii (i,i1)
         t1ii (i,i1) = LT2L2_ii (i,i1)
         t2ii (i,i1) = L_Y_ii   (i,i1)
         t3ii (i,i1) = L_Z_ii   (i,i1)
         PUT  DIS_OO1_A (i,i1) += tii  (i,i1)
         PUT  DIS_OO2_A (i,i1) += t1ii (i,i1)
         PUT  DIS_OO3_A (i,i1) += t2ii (i,i1)
         PUT  DIS_OO4_A (i,i1) += t3ii (i,i1)
      ENDDO i1
      ENDDO i

      EXECUTE  SIP_BARRIER

      DO a
      DO a1
         GET           DIS_VV1_A (a,a1)
         GET           DIS_VV2_A (a,a1)
         GET           DIS_VV3_A (a,a1)
         GET           DIS_VV4_A (a,a1)
         taa  (a,a1) = DIS_VV1_A (a,a1)
         t1aa (a,a1) = DIS_VV2_A (a,a1)
         taa2 (a,a1) = DIS_VV3_A (a,a1)
         t3aa (a,a1) = DIS_VV4_A (a,a1)
         LR2L2_aa (a,a1) =  taa  (a,a1)
         LT2L2_aa (a,a1) =  t1aa (a,a1)
         L_Y_aa   (a,a1) =  taa2 (a,a1)
         L_Z_aa   (a,a1) =  t3aa (a,a1)
      ENDDO a1
      ENDDO a

      DO a
      DO i
         GET          DIS_VO1_A (a,i)
         GET          DIS_VO2_A (a,i)
         GET          DIS_VO3_A (a,i)
         GET          DIS_VO4_A (a,i)
         tai  (a,i) = DIS_VO1_A (a,i)
         t1ai (a,i) = DIS_VO2_A (a,i)
         t2ai (a,i) = DIS_VO3_A (a,i)
         t3ai (a,i) = DIS_VO4_A (a,i)
         LR1L2_ai (a,i) = tai  (a,i)
         LR2L1_ai (a,i) = t1ai (a,i)
         L_Z1_ai  (a,i) = t2ai (a,i)
         L_Z2_ai  (a,i) = t3ai (a,i)
      ENDDO i
      ENDDO a

      DO i
      DO i1
         GET           DIS_OO1_A (i,i1)
         GET           DIS_OO2_A (i,i1)
         GET           DIS_OO3_A (i,i1)
         GET           DIS_OO4_A (i,i1)
         tii  (i,i1) = DIS_OO1_A (i,i1)
         t1ii (i,i1) = DIS_OO2_A (i,i1)
         t2ii (i,i1) = DIS_OO3_A (i,i1)
         t3ii (i,i1) = DIS_OO4_A (i,i1)
         LR2L2_ii (i,i1) =  tii  (i,i1)
         LT2L2_ii (i,i1) =  t1ii (i,i1)
         L_Y_ii   (i,i1) =  t2ii (i,i1)
         L_Z_ii   (i,i1) =  t3ii (i,i1)
      ENDDO i1
      ENDDO i

      EXECUTE  SIP_BARRIER
      DELETE  DIS_OO1_A
      DELETE  DIS_OO2_A
      DELETE  DIS_OO3_A
      DELETE  DIS_OO4_A
      DELETE  DIS_VV1_A
      DELETE  DIS_VV2_A
      DELETE  DIS_VV3_A
      DELETE  DIS_VV4_A
      DELETE  DIS_VO1_A
      DELETE  DIS_VO2_A
      DELETE  DIS_VO3_A
      DELETE  DIS_VO4_A
#
#     
#          ...ready!
#     
#     
      ENDPROC  EOM_DENS_INT
#-------------------------------------------------------------------------



#-------------------------------------------------------------------------
#
#     ---------------------
      PROC  I_CONTRIBUTIONS
#     ---------------------
#
#
# Compute contributions to intermediates from Dijkl 
# -------------------------------------------------
#
#     Part of the Second-term of Iij_aa
#     ---------------------------------
#
      PARDO i2, i3, i4, i
#
            REQUEST VSpipi(i3,i,i4,i2) i2  
            Tpppp(i2,i3,i4,i)  = VSpipi(i3,i,i4,i2)
#
            DO i1
#
               REQUEST Dijkl_aa(i1,i2,i3,i4) i4 
#
               Tii(i,i1)         = Dijkl_aa(i1,i2,i3,i4)*Tpppp(i2,i3,i4,i)
               Tii(i,i1)        *= -0.5
               PUT Iij_aa(i,i1) += Tii(i,i1)
#
            ENDDO i1
#
      ENDPARDO i2, i3, i4, i
#
#     Part of the Second-term of Iai_aa
#     ---------------------------------
#
      PARDO a, i2, i3, i1
#
            REQUEST VSpipi(i3,i2,a,i1) i1  
            Tpppp(i3,i1,i2,a)  = VSpipi(i3,i2,a,i1)
#
            DO i
#
               REQUEST Dijkl_aa(i,i3,i1,i2) i2 
#
               Tai(a,i)         = Dijkl_aa(i,i3,i1,i2)*Tpppp(i3,i1,i2,a)
               Tai(a,i)        *= 0.5
               PUT Iai_aa(a,i) += Tai(a,i)
#
            ENDDO i
#
      ENDPARDO a, i2, i3, i1
#
# Compute contributions to intermediates from Dijkl_ab 
# ----------------------------------------------------
#
# Part of the second-term of Iij_aa
# ---------------------------------
#
      PARDO j1, i2, j, i
#
            REQUEST Vpiqj(i2,i,j,j1) j
#
            DO i1
#
               REQUEST Dijkl_ab(i1,j1,i2,j) j 
#
               Tii(i,i1)         = Dijkl_ab(i1,j1,i2,j)*Vpiqj(i2,i,j,j1) 
               Tii(i,i1)        *= -1.0
               PUT Iij_aa(i,i1) += Tii(i,i1)
#
            ENDDO i1
#
      ENDPARDO j1, i2, j, i
#
# Part of the Second-term of Iai_aa
# ---------------------------------
#
      PARDO a, j1, j, i1
#
            REQUEST Vpiqj(a,i1,j,j1) j1 
            Tqpqp(j,i1,j1,a)  = Vpiqj(a,i1,j,j1)
#
            DO i
#
               REQUEST Dijkl_ab(i,j,i1,j1) j1 
#
               Tai(a,i)         = Dijkl_ab(i,j,i1,j1)*Tqpqp(j,i1,j1,a)
               PUT Iai_aa(a,i) += Tai(a,i)
#
            ENDDO i
#
      ENDPARDO a, j1, j, i1

#
# Compute contributions to one-particle intermediates from Dibja_aaaa 
# ------------------------------------------------------------------- 
#
#     Third-term of Iij_ii
#     --------------------
#
      PARDO i, a, i2, a1
#
            REQUEST Vaaii(a1,a,i2,i) i
            REQUEST Viaai(i2,a,a1,i) i
#
            Tpppp(a,i2,a1,i)  = Vaaii(a1,a,i2,i)
            T1pppp(a,i2,a1,i) = Viaai(i2,a,a1,i)
            Tpppp(a,i2,a1,i) -= T1pppp(a,i2,a1,i)
#
            DO i1
#
               REQUEST Dibja_aaaa(i1,a,i2,a1) a1 
#
               Tii(i,i1)         = Dibja_aaaa(i1,a,i2,a1)*Tpppp(a,i2,a1,i)
               PUT Iij_aa(i,i1) += Tii(i,i1)
#
            ENDDO i1
#
      ENDPARDO i, a, i2, a1
#
#     Third-term of Iab_aa
#     --------------------
#
      PARDO a, a2, i, i1
#
            REQUEST Vaaii(a2,a,i1,i) i
            REQUEST Viaai(i1,a,a2,i) i
            Tpppp(a2,a,i1,i)  = Vaaii(a2,a,i1,i)
            T1pppp(a2,a,i1,i) = Viaai(i1,a,a2,i)
            Tpppp(a2,a,i1,i) -= T1pppp(a2,a,i1,i)
#
            DO a1
#
               REQUEST Dibja_aaaa(i,a1,i1,a2) a2 
#
               Taa(a,a1)         = Tpppp(a2,a,i1,i)*Dibja_aaaa(i,a1,i1,a2)
               PUT Iab_aa(a,a1) += Taa(a,a1)
#
            ENDDO a1
#
      ENDPARDO a, a2, i, i1
#
#     Fifth-term of Iai_aa
#     --------------------
#
      PARDO a, a1, i1, a2
#
            REQUEST VSaaai(a1,a2,a,i1) i1  
            Tpppp(a1,i1,a2,a)  = VSaaai(a1,a2,a,i1)
#
            DO i
#
               REQUEST Dibja_aaaa(i,a1,i1,a2) a2 
#
               Tai(a,i)         = Dibja_aaaa(i,a1,i1,a2)*Tpppp(a1,i1,a2,a)
               Tai(a,i)        *= -1.0  
               PUT Iai_aa(a,i) += Tai(a,i)
#
            ENDDO i
#
      ENDPARDO a, a1, i1, a2
#
#     Third-term of Iia_aa
#     --------------------
#
      PARDO a, a1, i1, i2
#
            REQUEST Dibja_aaaa(i1,a,i2,a1) a1 
#
            DO i
#
               REQUEST VSpipi(i2,i1,a1,i) i
#
               Tia(i,a)         = Dibja_aaaa(i1,a,i2,a1)*VSpipi(i2,i1,a1,i)
               PUT Iia_aa(i,a) += Tia(i,a)
#
            ENDDO i
#
      ENDPARDO a, a1, i1, i2

#
# Compute contributions to one-particle intermediates from Dibja_abab 
# -------------------------------------------------------------------
#
# Third-term of Iij_aa 
# --------------------
#
      PARDO i1, b, i2, b1
#
            REQUEST Dibja_abab(i1,b,i2,b1) b1 
#
            DO i
#
               REQUEST Vaaii(b1,b,i2,i) b  
#
               Tii(i,i1)         = Dibja_abab(i1,b,i2,b1)*Vaaii(b1,b,i2,i)
               PUT Iij_aa(i,i1) += Tii(i,i1)
#
            ENDDO i
#
      ENDPARDO i1, b, i2, b1
#
# Fifth-term of Iai_aa 
# -------------------- 
#
      PARDO a, b, i1, b1
#
            REQUEST Vaabj(b,b1,a,i1) i1 
            Tqpqp(b,i1,b1,a)  = Vaabj(b,b1,a,i1)
#
            DO i
#
               REQUEST Dibja_abab(i,b,i1,b1) b1 
#
               Tai(a,i)         = Dibja_abab(i,b,i1,b1)*Tqpqp(b,i1,b1,a)
               Tai(a,i)        *= -1.0  
               PUT Iai_aa(a,i) += Tai(a,i)
#
            ENDDO i
#
      ENDPARDO a, b, i1, b1 

#
# Compute contributions to one-particle intermediates from Dibja_baba 
# -------------------------------------------------------------------
#
# Third-term of Iab_aa 
# -------------------- 
#
      PARDO a, a2, j, j1
#
            REQUEST Vaaii(a2,a,j1,j) j1  
#
            DO a1
#
               REQUEST Dibja_abab(j,a1,j1,a2) a2 
#
               Taa(a,a1)         = Vaaii(a2,a,j1,j)*Dibja_abab(j,a1,j1,a2)
               PUT Iab_aa(a,a1) += Taa(a,a1)
#
            ENDDO a1
#
      ENDPARDO a, a2, j, j1
#
# Third-term of Iia_aa 
# -------------------- 
#
      PARDO a, a1, j, j1
#
            REQUEST Dibja_abab(j,a,j1,a1) a1 
#
            DO i
#
               REQUEST Vpiqj(a1,i,j1,j) j 
#
               Tia(i,a)         = Dibja_abab(j,a,j1,a1)*Vpiqj(a1,i,j1,j)
               PUT Iia_aa(i,a) += Tia(i,a)
#
            ENDDO i
#
      ENDPARDO a, a1, j, j1
#
# Compute contributions to one-particle intermediates from Dibja_abba
# -------------------------------------------------------------------
#
# Third-term of Iij_aa 
# -------------------- 
#
      PARDO i1, b, j, a
#
            REQUEST Dibja_abba(i1,b,j,a) a 
#
            DO i
#
               REQUEST Viaai(i,a,b,j) j 
#
               Tii(i,i1)         = Dibja_abba(i1,b,j,a)*Viaai(i,a,b,j)
               Tii(i,i1)        *= -1.0  
               PUT Iij_aa(i,i1) += Tii(i,i1)
#
            ENDDO i
#
      ENDPARDO i1, b, j, a
#
# Fifth-term of Iai_aa
# -------------------- 
#
      PARDO a, b, j, a1
#
            REQUEST Vaabj(a,a1,b,j) j
            Tqqpp(b,j,a1,a) = Vaabj(a,a1,b,j)
#
            DO i
#
               REQUEST Dibja_abba(i,b,j,a1) a1 
#
               Tai(a,i)         = Dibja_abba(i,b,j,a1)*Tqqpp(b,j,a1,a)
               PUT Iai_aa(a,i) += Tai(a,i)
#
            ENDDO i
#
      ENDPARDO a, b, j, a1
#
# Compute contributions to one-particle intermediates from Dibja_baab 
# -------------------------------------------------------------------
#
# Third-term of Iab_aa 
# --------------------
#
      PARDO a, b, j, i
#
            REQUEST Viaai(i,a,b,j) j
#
            DO a1
#
               REQUEST Dibja_abba(j,a1,i,b) b 
#
               Taa(a,a1)         = Viaai(i,a,b,j)*Dibja_abba(j,a1,i,b)
               Taa(a,a1)        *= -1.0  
               PUT Iab_aa(a,a1) += Taa(a,a1)
#
            ENDDO a1
#
      ENDPARDO a, b, j, i
#
# Third-term of Iia_aa
# --------------------
#
      PARDO a, b, j, i1
#
            REQUEST Dibja_abba(j,a,i1,b) b 
#
            DO i
#
               REQUEST Vpiqj(i1,i,b,j) j 
#
               Tia(i,a)         = Dibja_abba(j,a,i1,b)*Vpiqj(i1,i,b,j)
               Tia(i,a)        *= -1.0  
               PUT Iia_aa(i,a) += Tia(i,a)
#
            ENDDO i
#
      ENDPARDO a, b, j, i1
#
# Compute contributions to one-particle intermediates from Dijab_aa 
# -----------------------------------------------------------------
#
# First-term of Iij_aa 
# --------------------
#
      PARDO i2, a1, a, i
#
           REQUEST VSpipi(a,i2,a1,i) i
           Tpppp(i2,a1,a,i)  = VSpipi(a,i2,a1,i)
#
           DO i1
#
              REQUEST Dijab_aa(i1,i2,a1,a) a 
#
              Tii(i,i1)         = Dijab_aa(i1,i2,a1,a)*Tpppp(i2,a1,a,i)
#             Tii(i,i1)        *= -1.0  
              Tii(i,i1)        *= -2.0  
              PUT Iij_aa(i,i1) += Tii(i,i1)
#
           ENDDO i1
#
      ENDPARDO i2, a1, a, i
#
# First-term of Iab_aa
# --------------------
#
      PARDO a, a2, i, i1
#
            REQUEST VSpipi(a,i,a2,i1) i1  
#
            DO a1
#
               REQUEST Dijab_aa(i,i1,a1,a2) a2 
#
               Taa(a,a1)         = VSpipi(a,i,a2,i1)*Dijab_aa(i,i1,a1,a2)
#              Taa(a,a1)        *= -1.0  
               Taa(a,a1)        *= -2.0  
               PUT Iab_aa(a,a1) += Taa(a,a1)
#
            ENDDO a1
#
      ENDPARDO a, a2, i, i1
#
# First-term of Iai_aa
# --------------------
#
      PARDO a, a1, a2, i1
#
            REQUEST VSaaai(a1,a,a2,i1) i1  
            Tpppp(i1,a1,a2,a)  = VSaaai(a1,a,a2,i1)
#
            DO i
#
               REQUEST Dijab_aa(i,i1,a1,a2) a2 
#
               Tai(a,i)         = Dijab_aa(i,i1,a1,a2)*Tpppp(i1,a1,a2,a)
               Tai(a,i)        *= 2.0  
               PUT Iai_aa(a,i) += Tai(a,i)
#
            ENDDO i
#
      ENDPARDO a, a1, a2, i1

#
# First-term of Iia_aa
# --------------------
# 
      PARDO a, a1, i2, i1
#
            REQUEST Dijab_aa(i2,i1,a,a1) a1 
#
            DO i
#
               REQUEST VSpipi(a1,i1,i,i2) i2  
#
               Tia(i,a)           = VSpipi(a1,i1,i,i2)*Dijab_aa(i2,i1,a,a1)
#              Tia(i,a)          *= -1.0  
               Tia(i,a)          *= -2.0  
               PUT Iia_aa(i,a)   += Tia(i,a)
#
            ENDDO i
#
      ENDPARDO a, a1, i2, i1
#
# Compute contributions to one-particle intermediates from Dijab_ab 
# -----------------------------------------------------------------
#
# First-term of Iij_aa 
# --------------------
#
      PARDO j, a, b, i
#
           REQUEST Vpiqj(a,i,b,j) j
#
           DO i1
#
              REQUEST Dijab_ab(i1,j,a,b) b 
#
              Tii(i,i1)         = Dijab_ab(i1,j,a,b)*Vpiqj(a,i,b,j)
              Tii(i,i1)        *= -4.0  
              PUT Iij_aa(i,i1) += Tii(i,i1)
#
           ENDDO i1
#
      ENDPARDO j, a, b, i
#
# First-term of Iab_aa
# --------------------
#
      PARDO a, b, i, j
#
            REQUEST Vpiqj(a,i,b,j) j
#
            DO a1
#
               REQUEST Dijab_ab(i,j,a1,b) b 
#
               Taa(a,a1)         = Vpiqj(a,i,b,j)*Dijab_ab(i,j,a1,b)
               Taa(a,a1)        *= -4.0  
               PUT Iab_aa(a,a1) += Taa(a,a1)
#
            ENDDO a1
#
      ENDPARDO a, b, i, j
#
# First-term of Iai_aa 
# -------------------- 
#
      PARDO a, a1, b, j
#
            REQUEST Vaabj(a1,a,b,j) j
            Tqpqp(j,a1,b,a)  = Vaabj(a1,a,b,j)
#
            DO i
#
               REQUEST Dijab_ab(i,j,a1,b) b 
#
               Tai(a,i)         = Dijab_ab(i,j,a1,b)*Tqpqp(j,a1,b,a)
               Tai(a,i)        *= 4.0  
               PUT Iai_aa(a,i) += Tai(a,i)
#
            ENDDO i
#
      ENDPARDO a, a1, b, j
#
# First-term of Iia_aa 
# -------------------- 
#
      PARDO a, b, i1, j
#
            REQUEST Dijab_ab(i1,j,a,b) b 
#
            DO i
#
               REQUEST Vpiqj(i,i1,b,j) j
#
               Tia(i,a)         = Vpiqj(i,i1,b,j)*Dijab_ab(i1,j,a,b)
               Tia(i,a)        *= -4.0 
               PUT Iia_aa(i,a) += Tia(i,a)
#
            ENDDO i
#
      ENDPARDO a, b, i1, j
#
# Compute contributions to one-particle intermediates from Dijka_aaaa 
# -------------------------------------------------------------------
#
# Fifth-term of Iij_aa 
# -------------------- 
#
      PARDO i2, i3, a, i
#
            REQUEST VSpipi(a,i2,i3,i) i
            Tpppp(i2,i3,a,i)  = VSpipi(a,i2,i3,i)
#
            DO i1
#
               REQUEST Dijka_aaaa(i1,i2,i3,a) a 
#
               Tii(i,i1)         = Dijka_aaaa(i1,i2,i3,a)*Tpppp(i2,i3,a,i)
               Tii(i,i1)        *= -1.0  
               PUT Iij_aa(i,i1) += Tii(i,i1)
#
            ENDDO i1
#
      ENDPARDO i2, i3, a, i
#
# Sixth-term of Iij_aa
# -------------------- 
#
      PARDO i3, i2, a, i
#
            REQUEST VSpipi(a,i2,i,i3) i3  
#
            DO i1
#
               REQUEST Dijka_aaaa(i3,i2,i1,a) a 
#
               Tii(i,i1)         = VSpipi(a,i2,i,i3)*Dijka_aaaa(i3,i2,i1,a)
               Tii(i,i1)        *= -0.5
               PUT Iij_aa(i,i1) += Tii(i,i1)
#
            ENDDO i1
#
      ENDPARDO i3, i2, a, i
#
# Sixth-term of Iab_aa
# --------------------
#
      PARDO a, i2, i, i1
#
            REQUEST VSpipi(a,i1,i2,i) i
            Tpppp(a,i,i1,i2)  = VSpipi(a,i1,i2,i)
#
            DO a1
#
               REQUEST Dijka_aaaa(i,i1,i2,a1) a1 
#
               Taa(a,a1)         = Tpppp(a,i,i1,i2)*Dijka_aaaa(i,i1,i2,a1)
               Taa(a,a1)        *= -0.5
               PUT Iab_aa(a,a1) += Taa(a,a1)
#
            ENDDO a1
#
      ENDPARDO a, i2, i, i1
#
# Third-term of Iai_aa
# --------------------  
#
      PARDO a, a1, i1, i2
#
            REQUEST Viaai(i1,a1,a,i2) i2  
            REQUEST Vaaii(a,a1,i1,i2) i2  
#
            Tpppp(i1,i2,a1,a)  = Viaai(i1,a1,a,i2)
            T1pppp(i1,i2,a1,a) = Vaaii(a,a1,i1,i2)
            Tpppp(i1,i2,a1,a) -= T1pppp(i1,i2,a1,a)
#
            DO i
#
               REQUEST Dijka_aaaa(i,i1,i2,a1) a1 
#
               Tai(a,i)         = Dijka_aaaa(i,i1,i2,a1)*Tpppp(i1,i2,a1,a)
               PUT Iai_aa(a,i) += Tai(a,i)
#
            ENDDO i
#
      ENDPARDO a, a1, i1, i2
#
# Fourth-term of Iai_aa
# --------------------
#
      PARDO a, a1, i1, i2
#
            REQUEST VSpipi(a,i1,a1,i2) i2  
#
            DO i
#
               REQUEST Dijka_aaaa(i1,i2,i,a1) a1 
#
               Tai(a,i)         = VSpipi(a,i1,a1,i2)*Dijka_aaaa(i1,i2,i,a1)
               Tai(a,i)        *= 0.5
               PUT Iai_aa(a,i) += Tai(a,i)
#
            ENDDO i
#
      ENDPARDO a, a1, i1, i2
#
# Sixth-term of Iia_aa 
# --------------------
#
      PARDO a, i3, i1, i2
#
            REQUEST Dijka_aaaa(i1,i2,i3,a) a 
#
            DO i
#
               REQUEST VSpipi(i1,i3,i2,i) i
#
               Tpppp(i,i1,i2,i3)  = VSpipi(i1,i3,i2,i)
               Tia(i,a)           = Tpppp(i,i1,i2,i3)*Dijka_aaaa(i1,i2,i3,a)
               Tia(i,a)          *= -0.5
               PUT Iia_aa(i,a)   += Tia(i,a)
#
            ENDDO i
#
      ENDPARDO a, i3, i1, i2
#
# Compute contributions to one-particle intermediates from Dijka_abab 
# -------------------------------------------------------------------
#
# Fifth-term of Iij_aa 
# -------------------- 
#
      PARDO j1, i2, b, i
#
            REQUEST Vpiqj(i2,i,b,j1) j1  
#
            DO i1
#
               REQUEST Dijka_abab(i1,j1,i2,b) b
#
               Tii(i,i1)         = Dijka_abab(i1,j1,i2,b)*Vpiqj(i2,i,b,j1)
               Tii(i,i1)        *= -1.0  
               PUT Iij_aa(i,i1) += Tii(i,i1)
#
            ENDDO i1
#
      ENDPARDO j1, i2, b, i
#
# Sixth-term of Iij_aa 
# -------------------- 
#
      PARDO i2, j, b, i
#
            REQUEST Vpiqj(i,i2,b,j) j
#
            DO i1
#
               REQUEST Dijka_abab(i2,j,i1,b) b
#
               Tii(i,i1)         = Vpiqj(i,i2,b,j)*Dijka_abab(i2,j,i1,b)
               Tii(i,i1)        *= -1.0
               PUT Iij_aa(i,i1) += Tii(i,i1)
#
            ENDDO i1
#
      ENDPARDO i2, j, b, i
#
# Third-term of Iai_aa 
# --------------------
#
      PARDO a, b, j, i1
#
            REQUEST Viaai(i1,a,b,j) j 
            Tqpqp(j,i1,b,a)  = Viaai(i1,a,b,j)
#
            DO i
#
               REQUEST Dijka_abab(i,j,i1,b) b 
#
               Tai(a,i)         = Dijka_abab(i,j,i1,b)*Tqpqp(j,i1,b,a)
               PUT Iai_aa(a,i) += Tai(a,i)
#
            ENDDO i
#
      ENDPARDO a, b, j, i1
#
# Fourth-term of Iai_aa 
# ---------------------
#
      PARDO a, b, i1, j
#
            REQUEST Vpiqj(a,i1,b,j) j
#
            DO i
#
               REQUEST Dijka_abab(i1,j,i,b) b 
#
               Tai(a,i)         = Vpiqj(a,i1,b,j)*Dijka_abab(i1,j,i,b)
               PUT Iai_aa(a,i) += Tai(a,i)
#
            ENDDO i
#
      ENDPARDO a, b, i1, j
#
# Compute contributions to one-particle intermediates from Dijka_baba 
# -------------------------------------------------------------------
#
# Fifth-term of Iij_aa 
# -------------------- 
#
      PARDO j1, j, a, i
#
            REQUEST Vpiqj(a,i,j,j1) j1 
#
            DO i1
#
               REQUEST Dijka_abab(j1,i1,j,a) a 
#
               Tii(i,i1)         = Dijka_abab(j1,i1,j,a)*Vpiqj(a,i,j,j1)
               Tii(i,i1)        *= -1.0  
               PUT Iij_aa(i,i1) += Tii(i,i1)
#
            ENDDO i1
#
      ENDPARDO j1, j, a, i
#
# Sixth-term of Iab_aa 
# -------------------- 
#
      PARDO a, j1, j, i
#
            REQUEST Vpiqj(a,i,j1,j) j
#
            DO a1
#
               REQUEST Dijka_abab(j,i,j1,a1) a1 
#
               Taa(a,a1)         = Vpiqj(a,i,j1,j)*Dijka_abab(j,i,j1,a1)
               Taa(a,a1)        *= -1.0
               PUT Iab_aa(a,a1) += Taa(a,a1)
#
            ENDDO a1
#
      ENDPARDO a, j1, j, i
#
# Third-term of Iai_aa 
# -------------------- 
#
      PARDO a, a1, j, j1
#
            REQUEST Vaaii(a,a1,j,j1) j1  
            Tqqpp(j,j1,a1,a) = Vaaii(a,a1,j,j1)
#
            DO i
#
               REQUEST Dijka_abab(j,i,j1,a1) a1 
#
               Tai(a,i)         = Dijka_abab(j,i,j1,a1)*Tqqpp(j,j1,a1,a)
               PUT Iai_aa(a,i) += Tai(a,i)
#
            ENDDO i
#
      ENDPARDO a, a1, j, j1
#
# Sixth-term of Iia_aa 
# -------------------- 
#
      PARDO a, j1, j, i1
#
            REQUEST Dijka_abab(j,i1,j1,a) a 
#
            DO i
#
               REQUEST Vpiqj(i1,i,j,j1) j1 
#
               Tia(i,a)         = Dijka_abab(j,i1,j1,a)*Vpiqj(i1,i,j,j1)
               Tia(i,a)        *= -1.0
               PUT Iia_aa(i,a) += Tia(i,a)
#
            ENDDO i
#
      ENDPARDO a, j1, j, i1
#
# Compute indirect contributions to one-particle intermediates from Dabci_aaaa 
# ----------------------------------------------------------------------------
#
      PARDO i, a, a2, a1  
#
            REQUEST Dabci_aaaa(a,a1,a2,i) a 
#
#           Fourth-term of Iij_aa 
#           ---------------------
#
            DO  i1 
#
               REQUEST              VSaaai(a,a2,a1,i1) i1  
#
               Tpppp(i1,a,a1,a2)  = VSaaai(a,a2,a1,i1)
               Tii(i1,i)          = Tpppp(i1,a,a1,a2)*Dabci_aaaa(a,a1,a2,i)  
               Tii(i1,i)         *= -0.5 
               PUT Iij_aa(i1,i)  += Tii(i1,i)
#
            ENDDO i1  
#
#           Fourth-term of Iia_aa 
#           ---------------------
#
            DO i1  
#
               REQUEST              VSpipi(a,i1,a1,i) i
#
               Tia(i1,a2)         = Dabci_aaaa(a,a1,a2,i)*VSpipi(a,i1,a1,i)
               Tia(i1,a2)        *= -0.5
               PUT Iia_aa(i1,a2) += Tia(i1,a2)
#
            ENDDO i1  
#
#           Fifth-term of Iia_aa 
#           --------------------
#
            DO i1  
#
               REQUEST              Vaaii(a2,a,i,i1) i1  
               REQUEST              Viaai(i,a,a2,i1) i1 
#
               Tpppp(i,a,a2,i1)   = Vaaii(a2,a,i,i1)
               Tpppp(i,a,a2,i1)  -= Viaai(i,a,a2,i1)
               Tia(i1,a1)         = Dabci_aaaa(a,a1,a2,i)*Tpppp(i,a,a2,i1)
               Tia(i1,a1)        *= -1.0  
               PUT Iia_aa(i1,a1) += Tia(i1,a1)
#
            ENDDO i1  
#
#           Fourth-term of Iab_aa 
#           ---------------------
#
            tpppp(a,a1,i,a2) = Dabci_aaaa(a,a1,a2,i) 
            DO a3
#
               REQUEST              VSaaai(a,a3,a1,i) i
              #Taa(a3,a2)         = VSaaai(a,a3,a1,i)*Dabci_aaaa(a,a1,a2,i)
              #Taa(a3,a2)        *= -0.5
#
               Taa(a3,a2)         = VSaaai(a,a3,a1,i)*tpppp(a,a1,i,a2)
               Taa(a3,a2)        *= -0.5
               PUT Iab_aa(a3,a2) += Taa(a3,a2)
#
            ENDDO a3
#
#           Fifth-term of Iab_aa 
#           --------------------
#
            tpppp(a2,a1,i,a) = Dabci_aaaa(a,a1,a2,i) 
            DO a3
#
               REQUEST              VSaaai(a3,a2,a1,i) i
              #Taa(a3,a)          = VSaaai(a3,a2,a1,i)*Dabci_aaaa(a,a1,a2,i)
               Taa(a3,a)          = VSaaai(a3,a2,a1,i)*tpppp(a2,a1,i,a)
               Taa(a3,a)         *= -1.0
               PUT Iab_aa(a3,a)  += Taa(a3,a)
#
            ENDDO a3

      ENDPARDO i, a, a2, a1  
#
# Compute contributions to one-particle intermediates from Dabci_abab 
# -------------------------------------------------------------------
#
      PARDO a, j, a1, b  
#
            REQUEST Dabci_abab(a,b,a1,j) a  

#
#           Fifth-term of Iab_aa 
#           --------------------  
#
            tpqqp(a1,b,j,a) = Dabci_abab(a,b,a1,j) 
            DO a2
#
               REQUEST             Vaabj(a2,a1,b,j) j
              #Taa(a2,a)         = Vaabj(a2,a1,b,j)*Dabci_abab(a,b,a1,j)
               Taa(a2,a)         = Vaabj(a2,a1,b,j)*tpqqp(a1,b,j,a)
               Taa(a2,a)        *= -1.0
               PUT Iab_aa(a2,a) += Taa(a2,a)
#
            ENDDO a2
#
#           Fifth-term of Iia_aa 
#           -------------------- 
#
            DO i
#
               REQUEST            Viaai(i,a1,b,j) j 
#
               Tia(i,a)         = Viaai(i,a1,b,j)*Dabci_abab(a,b,a1,j)
               Tia(i,a)        *= -1.0  
               PUT Iia_aa(i,a) += Tia(i,a)
#
            ENDDO i
#
      ENDPARDO a, j, a1, b  
#
      PARDO a1, b, a, j 
#
            REQUEST Dabci_abab(a,b,a1,j) a  
#
#           Fourth-term of Iab_aa 
#           --------------------- 
#
            tpqqp(a,b,j,a1) = Dabci_abab(a,b,a1,j) 
            DO a2
#
              #REQUEST              Vaabj(a,a2,b,j) j
              #Taa(a2,a1)         = Vaabj(a,a2,b,j)*Dabci_abab(a,b,a1,j)
               REQUEST              Vaabj(a2,a,b,j) j
               Taa(a2,a1)         = Vaabj(a2,a,b,j)*tpqqp(a,b,j,a1)   
               Taa(a2,a1)        *= -1.0
               PUT Iab_aa(a2,a1) += Taa(a2,a1)
#
            ENDDO a2
#
#           Fourth-term of Iia_aa 
#           --------------------- 
#
            DO i
#
               REQUEST             Vpiqj(a,i,b,j) j
               Tia(i,a1)         = Dabci_abab(a,b,a1,j)*Vpiqj(a,i,b,j)
               Tia(i,a1)        *= -1.0
               PUT Iia_aa(i,a1) += Tia(i,a1)
#
            ENDDO i
#
      ENDPARDO a1, b, a, j 
#
# Compute contributions to one-particle intermediates from Dabci_baba 
# -------------------------------------------------------------------

      PARDO b1, i, a, b  
#
            REQUEST Dabci_abab(b1,a,b,i) a 
#
#           Fourth-term of Iij_aa 
#           --------------------- 
#
            DO i1
#
               REQUEST Vaabj(b1,b,a,i1) i1  
#
               Tii(i1,i)         = Vaabj(b1,b,a,i1)*Dabci_abab(b1,a,b,i)
               Tii(i1,i)        *= -1.0
               PUT Iij_aa(i1,i) += Tii(i1,i)
#
            ENDDO i1
#
      ENDPARDO b1, i, a, b  
#
      PARDO a, b, i, b1  
#
            REQUEST Dabci_abab(b1,a,b,i) a 
#
#           Fifth-term of Iab_aa 
#           --------------------
#
            tqqpp(b1,b,i,a) = Dabci_abab(b1,a,b,i) 
            DO a1
#
               REQUEST             Vaabj(b1,b,a1,i) i  
               tpqqp(a1,b1,b,i)  = Vaabj(b1,b,a1,i) 
              #Taa(a1,a)         = Vbbai(b1,b,a1,i)*Dabci_baba(b1,a,b,i)
               Taa(a1,a)         = tpqqp(a1,b1,b,i)*tqqpp(b1,b,i,a)
               Taa(a1,a)        *= -1.0  
               PUT Iab_aa(a1,a) += Taa(a1,a)
#
            ENDDO a1
#
#           Fifth-term of Iia_aa 
#           -------------------- 
#
            DO i1
#
               REQUEST Vaaii(b,b1,i,i1) b1 
#
               Tia(i1,a)         = Dabci_abab(b1,a,b,i)*Vaaii(b,b1,i,i1)
               Tia(i1,a)        *= -1.0  
               PUT Iia_aa(i1,a) += Tia(i1,a)
#
            ENDDO i1
#
      ENDPARDO a, b, i, b1  
#
#
#          ...ready!
#     
#     
      ENDPROC  I_CONTRIBUTIONS
#-------------------------------------------------------------------------



#-------------------------------------------------------------------------
#     
#     ---------------------
      PROC  BACK_TRANSFORMS
#     ---------------------
#
#     
#
#
      PARDO  a, a1, a2, i
         REQUEST  Dabci_aaaa (a,a1,a2,i) a
         DO mu 
            Txaai(mu,a1,a2,i)      = Dabci_aaaa(a,a1,a2,i)*ca(mu,a)
            Txaai(mu,a1,a2,i)     *= 0.25
            PREPARE Dxaai(mu,a1,a2,i) += Txaai(mu,a1,a2,i)  
         ENDDO mu 
      ENDPARDO  a, a1, a2, i

      PARDO  b1, a, b, i
         REQUEST  Dabci_abab (b1,a,b,i) b1
         DO mu
            Txabi(mu,a,b,i)      = Dabci_abab(b1,a,b,i)*ca(mu,b1)
            Txabi(mu,a,b,i)     *= 0.25
            PREPARE Dxabi(mu,a,b,i) += Txabi(mu,a,b,i)
         ENDDO mu
      ENDPARDO  b1, a, b, i

      PARDO  a, i2, i1, i
         REQUEST  Dijka_aaaa (i,i1,i2,a) a
         DO sigma 
            Tiiix(i,i1,i2,sigma)      = Dijka_aaaa(i,i1,i2,a)*ca(sigma,a)
            Tiiix(i,i1,i2,sigma)     *= 0.25
            PREPARE Diiix(i,i1,i2,sigma) += Tiiix(i,i1,i2,sigma)
         ENDDO sigma
      ENDPARDO  a, i2, i1, i

      PARDO  b, i1, j, i
         REQUEST  Dijka_abab (i,j,i1,b) b
         DO sigma 
            Tijix(i,j,i1,sigma)      = Dijka_abab (i,j,i1,b)*ca(sigma,b) 
            Tijix(i,j,i1,sigma)     *= 0.25
            PREPARE Dijix(i,j,i1,sigma) += Tijix(i,j,i1,sigma) 
         ENDDO sigma 
      ENDPARDO  b, i1, j, i

      EXECUTE  SERVER_BARRIER
#
#
#          First Part!
#
#
#   DIBJA --> Diaix, Dibix, Dibjx, and Djaix
#
#
      PARDO sigma, a1, i, i1 
            Tiaix(i,a1,i1,sigma) = 0.0  
            DO a 
               REQUEST Dibja_aaaa(i,a1,i1,a) a  
               T1iaix(i,a1,i1,sigma)  = Dibja_aaaa(i,a1,i1,a)*ca(sigma,a) 
               Tiaix(i,a1,i1,sigma)  += T1iaix(i,a1,i1,sigma)   
            ENDDO a 
            PREPARE Diaix(i,a1,i1,sigma) = Tiaix(i,a1,i1,sigma) 
      ENDPARDO sigma, a1, i, i1 

      PARDO sigma, b1, i, i1 
            Tibix(i,b1,i1,sigma) = 0.0  
            DO b 
               REQUEST Dibja_abab(i,b1,i1,b) b  
               T1ibix(i,b1,i1,sigma) = Dibja_abab(i,b1,i1,b)*ca(sigma,b) 
               Tibix(i,b1,i1,sigma) += T1ibix(i,b1,i1,sigma)  
            ENDDO b 
            PREPARE Dibix(i,b1,i1,sigma) = Tibix(i,b1,i1,sigma) 
      ENDPARDO sigma, b1, i, i1 

      PARDO sigma, b1, i, j1 
            Tibjx(i,b1,j1,sigma) = 0.0  
            DO a 
               REQUEST Dibja_abba(i,b1,j1,a) a  
               T1ibjx(i,b1,j1,sigma) = Dibja_abba(i,b1,j1,a)*ca(sigma,a) 
               Tibjx(i,b1,j1,sigma) += T1ibjx(i,b1,j1,sigma)  
            ENDDO a 
            PREPARE Dibjx(i,b1,j1,sigma) = Tibjx(i,b1,j1,sigma) 
      ENDPARDO sigma, b1, i, j1 

      PARDO sigma, a1, j, i1 
            Tjaix(j,a1,i1,sigma) = 0.0  
            DO b 
               REQUEST Dibja_abba(j,a1,i1,b) b  
               T1jaix(j,a1,i1,sigma) = Dibja_abba(j,a1,i1,b)*ca(sigma,b) 
               Tjaix(j,a1,i1,sigma) += T1jaix(j,a1,i1,sigma)  
            ENDDO b 
            PREPARE Djaix(j,a1,i1,sigma) = Tjaix(j,a1,i1,sigma) 
      ENDPARDO sigma, a1, j, i1 
#           
#
#   DIJKL --> Dxiii and Dxjij
#
#
      PARDO mu, i1, i2, i3  
            Txiii(mu,i1,i2,i3) = 0.0  
            DO i  
               REQUEST Dijkl_aa(i,i1,i2,i3) i3  
               REQUEST Dijkl_aa(i,i1,i3,i2) i3  
               Tiiii(i,i1,i2,i3)   = Dijkl_aa(i,i1,i2,i3) 
               T1iiii(i,i1,i2,i3)  = Dijkl_aa(i,i1,i3,i2)  
               Tiiii(i,i1,i2,i3)  -= T1iiii(i,i1,i2,i3) 
               T1xiii(mu,i1,i2,i3) = Tiiii(i,i1,i2,i3)*ca(mu,i) 
               Txiii(mu,i1,i2,i3) += T1xiii(mu,i1,i2,i3)  
            ENDDO i  
            PREPARE Dxiii(mu,i1,i2,i3) = Txiii(mu,i1,i2,i3) 
      ENDPARDO mu, i1, i2, i3  

      PARDO mu, i1, j, j1  
            Txjij(mu,j,i1,j1) = 0.0  
            DO i 
               REQUEST Dijkl_ab(i,j,i1,j1) j1  
               T1xjij(mu,j,i1,j1) = Dijkl_ab(i,j,i1,j1)*ca(mu,i) 
               Txjij(mu,j,i1,j1) += T1xjij(mu,j,i1,j1)   
            ENDDO i 
            PREPARE Dxjij(mu,j,i1,j1) = Txjij(mu,j,i1,j1) 
      ENDPARDO mu, i1, j, j1  
#
#
#   DIJAB --> Diiax and Dijax
#
#
      PARDO sigma, a, i, i1 
            Tiiax(i,i1,a,sigma) = 0.0  
            DO a1 
               REQUEST Dijab_aa(i,i1,a,a1) a1  
               T1iiax(i,i1,a,sigma) = Dijab_aa(i,i1,a,a1)*ca(sigma,a1) 
               Tiiax(i,i1,a,sigma) += T1iiax(i,i1,a,sigma)  
            ENDDO a1  
            PREPARE Diiax(i,i1,a,sigma) = Tiiax(i,i1,a,sigma) 
      ENDPARDO sigma, a, i, i1 

      PARDO a, sigma, i, j1 
            Tijax(i,j1,a,sigma) = 0.0  
            DO b1  
               REQUEST Dijab_ab(i,j1,a,b1) b1  
               T1ijax(i,j1,a,sigma) = Dijab_ab(i,j1,a,b1)*ca(sigma,b1) 
               Tijax(i,j1,a,sigma) += T1ijax(i,j1,a,sigma)  
            ENDDO b1  
            PREPARE Dijax(i,j1,a,sigma) = Tijax(i,j1,a,sigma) 
      ENDPARDO a, sigma, i, j1 
#
#
#   DABCI --> Dxxai and Ixxai
#
#
      PARDO mu, a1, a2, i 
            REQUEST Dxaai(mu,a1,a2,i) a1  
            DO nu 
               Txxai(mu,nu,a2,i)      = Dxaai(mu,a1,a2,i)*ca(nu,a1) 
               PREPARE Dxxai(mu,nu,a2,i) += Txxai(mu,nu,a2,i)  
               Txxai(mu,nu,a2,i)     *= 4.0 # to match ACESII
               PREPARE Ixxai(mu,nu,a2,i) += Txxai(mu,nu,a2,i)  
            ENDDO nu 
      ENDPARDO mu, a1, a2, i 

      PARDO mu, a, b1, i 
            REQUEST Dxabi(mu,a,b1,i) i  
            DO nu 
               Txxbi(mu,nu,b1,i)      = Dxabi(mu,a,b1,i)*ca(nu,a) 
               PREPARE Dxxbi(mu,nu,b1,i) += Txxbi(mu,nu,b1,i)  
               Txxbi(mu,nu,b1,i)     *= 4.0 # to match ACESII
               PREPARE Ixxbi(mu,nu,b1,i) += Txxbi(mu,nu,b1,i)  
            ENDDO nu 
      ENDPARDO mu, a, b1, i 
#
#
#   DIJKA --> Diixx and Dijxx
#
#
      PARDO i, i1, lambda, sigma  
            Tiixx(i,i1,lambda,sigma) = 0.0  
            DO i2  
               REQUEST Diiix(i,i1,i2,sigma) i  
               T1iixx(i,i1,lambda,sigma) = Diiix(i,i1,i2,sigma)*ca(lambda,i2) 
               Tiixx(i,i1,lambda,sigma) += T1iixx(i,i1,lambda,sigma)  
            ENDDO i2 
            Tiixx(i,i1,lambda,sigma)         *= 8.0  
            PREPARE Diixx(i,i1,lambda,sigma) += Tiixx(i,i1,lambda,sigma) 
      ENDPARDO i, i1, lambda, sigma   

      PARDO i, j1, lambda, sigma  
            Tijxx(i,j1,lambda,sigma) = 0.0  
            DO i2  
               REQUEST Dijix(i,j1,i2,sigma) i  
               T1ijxx(i,j1,lambda,sigma) = Dijix(i,j1,i2,sigma)*ca(lambda,i2) 
               Tijxx(i,j1,lambda,sigma) += T1ijxx(i,j1,lambda,sigma)  
            ENDDO i2 
            Tijxx(i,j1,lambda,sigma)         *= 8.0  
            PREPARE Dijxx(i,j1,lambda,sigma) += Tijxx(i,j1,lambda,sigma) 
      ENDPARDO i, j1, lambda, sigma 

      PARDO j, i1, lambda, sigma  
            Tijxx(i1,j,sigma,lambda) = 0.0  
            DO j2   
               REQUEST Dijix(j,i1,j2,sigma) j   # Djijx really
               T1ijxx(i1,j,sigma,lambda) = Dijix(j,i1,j2,sigma)*ca(lambda,j2) 
               Tijxx(i1,j,sigma,lambda) += T1ijxx(i1,j,sigma,lambda)   
            ENDDO j2 
            Tijxx(i1,j,sigma,lambda)         *= 8.0  
            PREPARE Dijxx(i1,j,sigma,lambda) += Tijxx(i1,j,sigma,lambda)  
      ENDPARDO j, i1, lambda, sigma 

      EXECUTE  SERVER_BARRIER
#
#
#          Second Part!
#
#
#   DIBJA --> Diaix, Dibjx, Djaix, and Dibix --> Dixix, Dxiix, and Dixxj
#
#
      PARDO sigma, nu, i, i1 
            Txiix(nu,i,i1,sigma) = 0.0  
            Tixix(i,nu,i1,sigma) = 0.0  
            DO a1  
               REQUEST Diaix(i,a1,i1,sigma) a1  
               T1ixix(i,nu,i1,sigma) = Diaix(i,a1,i1,sigma)*ca(nu,a1)  
               T1xiix(nu,i,i1,sigma) = T1ixix(i,nu,i1,sigma)  
               Tixix(i,nu,i1,sigma) += T1ixix(i,nu,i1,sigma)  
               Txiix(nu,i,i1,sigma) += T1xiix(nu,i,i1,sigma)  
            ENDDO a1 
            Txiix(nu,i,i1,sigma) *=  1.0 # 4.0 
            Tixix(i,nu,i1,sigma) *= -1.0 #-4.0
            PREPARE Dixix(i,nu,i1,sigma) += Tixix(i,nu,i1,sigma) 
            PREPARE Dxiix(nu,i,i1,sigma) += Txiix(nu,i,i1,sigma) 
      ENDPARDO sigma, nu, i, i1 

      PARDO sigma, nu, i, i1 
            Tixix(i,nu,i1,sigma) = 0.0  
            DO b1  
               REQUEST Dibix(i,b1,i1,sigma) b1  
               T1ixix(i,nu,i1,sigma) = Dibix(i,b1,i1,sigma)*ca(nu,b1)  
               Tixix(i,nu,i1,sigma) += T1ixix(i,nu,i1,sigma)  
            ENDDO b1 
            Tixix(i,nu,i1,sigma)         *= -1.0 #-4.0  
            PREPARE Dixix(i,nu,i1,sigma) += Tixix(i,nu,i1,sigma) 
      ENDPARDO sigma, nu, i, i1 

      PARDO sigma, nu, i, j1 
            Tixxj(i,nu,sigma,j1) = 0.0  
            DO b1 
               REQUEST Dibjx(i,b1,j1,sigma) b1 
               T1ixxj(i,nu,sigma,j1) = Dibjx(i,b1,j1,sigma)*ca(nu,b1)  
               Tixxj(i,nu,sigma,j1) += T1ixxj(i,nu,sigma,j1)  
            ENDDO b1 
            Tixxj(i,nu,sigma,j1)         *= 1.0 # 4.0  
            PREPARE Dixxj(i,nu,sigma,j1) += Tixxj(i,nu,sigma,j1) 
      ENDPARDO sigma, nu, i, j1 

      PARDO sigma, nu, j, i1 
            Tixxj(i1,sigma,nu,j) = 0.0  
            DO a1 
               REQUEST Djaix(j,a1,i1,sigma) a1  
               T1ixxj(i1,sigma,nu,j) = Djaix(j,a1,i1,sigma)*ca(nu,a1)  
               Tixxj(i1,sigma,nu,j) += T1ixxj(i1,sigma,nu,j)  
            ENDDO a1 
            Tixxj(i1,sigma,nu,j)         *= 1.0 # 4.0  
            PREPARE Dixxj(i1,sigma,nu,j) += Tixxj(i1,sigma,nu,j) 
      ENDPARDO sigma, nu, j, i1 
#
#
#   DIJKL --> Dxiii and Dxjij --> Diixx and Dijxx
#
#
      PARDO nu, i2, i3, mu  
            Tiixx(i2,i3,mu,nu) = 0.0  
            DO i1  
               REQUEST Dxiii(mu,i1,i2,i3) i3  
               T1iixx(i2,i3,mu,nu)  = Dxiii(mu,i1,i2,i3)*ca(nu,i1) 
               Tiixx(i2,i3,mu,nu)  += T1iixx(i2,i3,mu,nu)  
            ENDDO i1  
            Tiixx(i2,i3,mu,nu)         *= 0.25  
            PREPARE Diixx(i2,i3,mu,nu) += Tiixx(i2,i3,mu,nu) 
      ENDPARDO nu, i2, i3, mu 

      PARDO i1, nu, j1, mu  
            Tijxx(i1,j1,mu,nu) = 0.0  
            DO j 
               REQUEST Dxjij(mu,j,i1,j1) j1  
               T1ijxx(i1,j1,mu,nu) = Dxjij(mu,j,i1,j1)*ca(nu,j) 
               Tijxx(i1,j1,mu,nu) += T1ijxx(i1,j1,mu,nu)  
            ENDDO j 
            PREPARE Dijxx(i1,j1,mu,nu) += Tijxx(i1,j1,mu,nu) 
      ENDPARDO i1, nu, j1, mu 
#
#
#   DIBJA --> Diiax Dijax and --> Diixx and Dijxx
#
#
      PARDO lambda, sigma, i, i1 
            Tiixx(i,i1,lambda,sigma) = 0.0  
            DO a  
               REQUEST Diiax(i,i1,a,sigma) a  
               T1iixx(i,i1,lambda,sigma) = Diiax(i,i1,a,sigma)*ca(lambda,a) 
               Tiixx(i,i1,lambda,sigma)  += T1iixx(i,i1,lambda,sigma)  
            ENDDO a 
            Tiixx(i,i1,lambda,sigma)         *= 4.0  
            PREPARE Diixx(i,i1,lambda,sigma) += Tiixx(i,i1,lambda,sigma) 
      ENDPARDO lambda, sigma, i, i1 

      PARDO lambda, sigma, i, j1 
            Tijxx(i,j1,lambda,sigma) = 0.0  
            DO a  
               REQUEST Dijax(i,j1,a,sigma) a  
               T1ijxx(i,j1,lambda,sigma)  = Dijax(i,j1,a,sigma)*ca(lambda,a) 
               Tijxx(i,j1,lambda,sigma)  += T1ijxx(i,j1,lambda,sigma)  
            ENDDO a 
            Tijxx(i,j1,lambda,sigma)         *= 8.0  
            PREPARE Dijxx(i,j1,lambda,sigma) += Tijxx(i,j1,lambda,sigma) 
      ENDPARDO lambda, sigma, i, j1 
#
#
#   DIJKA --> Diiix and Dijix --> Diixx and Dijxx
#
#     Already done in First Part!
#
#
#
#   DABCI piece
#
#
      PARDO mu, nu, i 
            allocate Lxxai(mu,nu,*,i) 
            DO a2 
               REQUEST Dxxai(mu,nu,a2,i) i  
               Lxxai(mu,nu,a2,i) = Dxxai(mu,nu,a2,i) 
            ENDDO a2 
            DO lambda 
               Txxxi(mu,nu,lambda,i) = 0.0 
               DO a2   
                  T1xxxi(mu,nu,lambda,i) = Lxxai(mu,nu,a2,i)*ca(lambda,a2) 
                  Txxxi(mu,nu,lambda,i) += T1xxxi(mu,nu,lambda,i)  
               ENDDO a2  
               PREPARE Dxxxi(mu,nu,lambda,i) = Txxxi(mu,nu,lambda,i)  
            ENDDO lambda 
            deallocate Lxxai(mu,nu,*,i) 
      ENDPARDO mu, nu, i 

      PARDO mu, nu, i 
            allocate Lxxbi(mu,nu,*,i) 
            DO b 
               REQUEST Dxxbi(mu,nu,b,i) i  
               Lxxbi(mu,nu,b,i) = Dxxbi(mu,nu,b,i) 
            ENDDO b 
            DO lambda 
               Txxxi(mu,nu,lambda,i) = 0.0 
               DO b  
                  T1xxxi(mu,nu,lambda,i) = Lxxbi(mu,nu,b,i)*ca(lambda,b) 
                  Txxxi(mu,nu,lambda,i) += T1xxxi(mu,nu,lambda,i)  
               ENDDO b 
               PREPARE Dxxxi(mu,nu,lambda,i) += Txxxi(mu,nu,lambda,i)  
            ENDDO lambda 
            deallocate Lxxbi(mu,nu,*,i) 
      ENDPARDO mu, nu, i 

      PARDO mu, nu, a, i
            REQUEST Ixxai(mu,nu,a,i) a
            DO lambda
               txxxi(mu,nu,lambda,i) = Ixxai(mu,nu,a,i)*ca(lambda,a)
               PREPARE Ixxxi(mu,nu,lambda,i) += txxxi(mu,nu,lambda,i)
            ENDDO lambda
      ENDPARDO mu, nu, a, i

      PARDO mu, nu, b, i
            REQUEST Ixxbi(mu,nu,b,i) b
            DO lambda
               txxxi(mu,nu,lambda,i) = Ixxbi(mu,nu,b,i)*ca(lambda,b)
               PREPARE Jxxxi(mu,nu,lambda,i) += txxxi(mu,nu,lambda,i)
            ENDDO lambda
      ENDPARDO mu, nu, b, i
#
#
#          Residual Third Parts!
#
#
      create IIxi
      create JJxi
      EXECUTE  SERVER_BARRIER
#
#   Contract DABCI piece with AO integrals into Iai
#
      PARDO sigma, lambda, mu, nu
            compute_integrals            AOINT(lambda,mu,sigma,nu)
            compute_integrals            AOINT1(sigma,mu,lambda,nu)
            Txxxx(lambda,sigma,mu,nu)  = AOINT(lambda,mu,sigma,nu)
            T1xxxx(lambda,sigma,mu,nu) = AOINT1(sigma,mu,lambda,nu)

            DO i
               REQUEST Jxxxi(mu,nu,lambda,i) i
               txi(sigma,i) = Txxxx(lambda,sigma,mu,nu)*Jxxxi(mu,nu,lambda,i)
               PUT JJxi(sigma,i) += txi(sigma,i)
            ENDDO i

            Txxxx(lambda,sigma,mu,nu) -= T1xxxx(lambda,sigma,mu,nu)

            DO i
               REQUEST Ixxxi(mu,nu,lambda,i) i
               txi(sigma,i) = Txxxx(lambda,sigma,mu,nu)*Ixxxi(mu,nu,lambda,i)
               PUT IIxi(sigma,i) += txi(sigma,i)
            ENDDO i
      ENDPARDO sigma, lambda, mu, nu  
#
#
#          Final Fourth Parts!
#
#
      EXECUTE  SIP_BARRIER 

      PARDO mu, a, i
            GET IIxi(mu,i)
            tai(a,i) = IIxi(mu,i)*ca(mu,a)
            tai(a,i) *= 0.5
            PUT Iai_aa(a,i) += Tai(a,i)
      ENDPARDO mu, a, i 

      PARDO mu, a, i 
            GET JJxi(mu,i)
            tai(a,i) = JJxi(mu,i)*ca(mu,a)
            PUT Iai_aa(a,i) += Tai(a,i)
      ENDPARDO mu, a, i
#     
#
#          ...ready!
#     
#     
      ENDPROC  BACK_TRANSFORMS
#-------------------------------------------------------------------------



#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ 
#
      PROC S2IIJ 
#
           DO i 
           DO i1 
              GET Iij_aa(i,i1) 
              execute dump_block Iij_aa(i,i1)  
           ENDDO i1 
           ENDDO i 
#
      ENDPROC S2IIJ 
#
      PROC S2IAB 
#
           DO a 
           DO a1 
              GET Iab_aa(a,a1) 
              execute dump_block Iab_aa(a,a1)  
           ENDDO a1 
           ENDDO a 
#
      ENDPROC S2IAB 
#
      PROC S2IAI 
#
           DO a 
           DO i 
              GET Iai_aa(a,i) 
              execute dump_block Iai_aa(a,i)  
           ENDDO i 
           ENDDO a 
#
      ENDPROC S2IAI 
#
      PROC S2IIA 
#
           DO a 
           DO i 
              GET Iia_aa(i,a) 
              execute dump_block Iia_aa(i,a)  
           ENDDO i 
           ENDDO a 
#
      ENDPROC S2IIA 
#
      PROC PRINTIIJ
#
           DO i
           DO i1
              GET Iij_aa(i,i1)
              execute dump_block Iij_aa(i,i1)
           ENDDO i1
           ENDDO i
#
      ENDPROC PRINTIIJ
#
      PROC PRINTIAB
#
           DO a
           DO a1
              GET Iab_aa(a,a1)
              execute dump_block Iab_aa
           ENDDO a1
           ENDDO a
#
      ENDPROC PRINTIAB
#
      PROC PRINTIIA
#
           DO i
           DO a
              GET Iia_aa(i,a)
              execute dump_block Iia_aa
           ENDDO a
           ENDDO i
#
      ENDPROC PRINTIIA
#
      PROC PRINTIAI
#
           DO i
           DO a
              GET Iai_aa(a,i)
              execute dump_block Iai_aa
           ENDDO a
           ENDDO i
#
      ENDPROC PRINTIAI
#
# --------------------------------------------------------------------------- 
# 
# ----------------------------------------------------------------------------------------
#
# As a simple test of the correctnes of the code the sum of the sum of the squares 
# of ALL the one-particle intermediates is computed. This can determine whether there
# is an error but obviously not where the error is. Of course the same quantity 
# must have been calculated correctly using another code.  
#
      PROC SQUAREALL 
#     -------------- 
#
# Intermediate arrays
# -------------------
#
      esum = 0.0 
#
      PARDO i, i1 
            GET Iij_aa(i,i1)
            etemp = Iij_aa(i,i1)*Iij_aa(i,i1) 
            esum += etemp 
      ENDPARDO i, i1 
#
      PARDO a, a1 
            GET Iab_aa(a,a1)
            etemp = Iab_aa(a,a1)*Iab_aa(a,a1) 
            esum += etemp 
      ENDPARDO a, a1 
#
      PARDO a, i 
            GET Iai_aa(a,i)
            etemp = Iai_aa(a,i)*Iai_aa(a,i) 
            esum += etemp 
      ENDPARDO a, i 
#
      PARDO a, i 
            GET Iia_aa(i,a)
            etemp = Iia_aa(i,a)*Iia_aa(i,a) 
            esum += etemp 
      ENDPARDO a, i 
#
      PARDO a, i 
            GET Xai_aa(a,i)
            etemp = Xai_aa(a,i)*Xai_aa(a,i) 
            esum += etemp 
      ENDPARDO a, i 
#
      execute sip_barrier 
      collective enew += esum 
      execute print_scalar enew  
#
      ENDPROC SQUAREALL 
# ----------------------------------------------------------------------------- 



#----------------------------------------------------------------------------- 
#
#     -----------
      PROC  DGRAD
#     -----------
#
#
      CREATE  AO_DENS
      CREATE  DHF
      CREATE  DIS_OO1
      CREATE  DIS_VV1
      CREATE  DIS_OV1
      CREATE  DIS_VO1
      CREATE  T2L2_VV_A
      CREATE  R2L2_VV_A
      CREATE  DENS_INT_OV_A
      CREATE  T1L1_OO_A
      CREATE  T2L2_OO_A
      CREATE  R2L2_OO_A
      CALL CREATE1ARRAY 

      EXECUTE  SERVER_BARRIER 
#
#
#     Form the single particle density DAB and DIJ   
# 
#
      CALL DPP_EOM

      EXECUTE  SIP_BARRIER
#
#
#     The contributions are symmetrized here!
#
#         - This can be done in the routine though...
#
#
      PARDO  a, a1
         tpp (a,a1) = 0.0
         PUT  T2L2_VV_A (a,a1) = tpp (a,a1)
      ENDPARDO  a, a1

      PARDO  a, a1
         GET            DIS_VV1   (a,a1)
         GET            DIS_VV1   (a1,a)
         taa  (a,a1)  = DIS_VV1   (a1,a)
         taa  (a,a1) += DIS_VV1   (a,a1)
         taa  (a,a1) *= 0.25
         t1aa (a1,a)  = taa (a,a1)
         PUT  Dab_a   (a,a1) += taa  (a,a1)
         PUT  Dab_a   (a1,a) += t1aa (a1,a)
      ENDPARDO  a, a1
          
      PARDO  a, i
         GET          DIS_VO1   (a,i)
         GET          DIS_OV1   (i,a)
         tai (a,i)  = DIS_OV1   (i,a)
         tai (a,i) += DIS_VO1   (a,i) 
         tai (a,i) *= 0.5
         PUT  Dai     (a,i) += tai (a,i)
      ENDPARDO  a, i

      PARDO  i, i1
         tpp (i,i1) = 0.0
         PUT  T1L1_OO_A (i,i1) = tpp (i,i1)
         PUT  T2L2_OO_A (i,i1) = tpp (i,i1)
      ENDPARDO  i, i1

      PARDO  i, i1
         GET            DIS_OO1   (i,i1)
         GET            DIS_OO1   (i1,i)
         tii  (i,i1)  = DIS_OO1   (i1,i)
         tii  (i,i1) += DIS_OO1   (i,i1)
         tii  (i,i1) *= 0.25
         t1ii (i1,i)  = tii (i,i1)
         PUT  Dij_a   (i,i1) += tii  (i,i1)
         PUT  Dij_a   (i1,i) += t1ii (i1,i)
      ENDPARDO  i, i1

      CALL HFDENS
      EXECUTE  SIP_BARRIER

      CALL  BACK_TRANS_COMP_DIP

      CALL DAB 
      CALL DIJ 

      EXECUTE  SIP_BARRIER
      CALL DOV

      CALL  BACK_TRANS_COMP_DIP
      EXECUTE  SERVER_BARRIER

      CREATE  I3AA
      CREATE  I3AB
      CREATE  Dii
      CREATE  Daa
      CREATE  Djj
      CREATE  Dbb
#
#
#    Form D = (Z + r  L)
#                   0
#
#
      etemp = R0
      IF etemp < 0.0
         etemp *= -1.0
      ENDIF
         
      IF etemp > 0.00000000001
         PARDO a, a1, i, i1
            REQUEST              L2AA (i,a,i1,a1) a
            tiaia (i,a,i1,a1)  = L2AA (i,a,i1,a1)
            tiaia (i,a,i1,a1) *= R0
            PREPARE  A2old_aa (i,a,i1,a1) += tiaia (i,a,i1,a1)
         ENDPARDO  a, a1, i, i1

         PARDO a, b, i, j
            REQUEST            L2AB (i,a,j,b) a
            tiajb (i,a,j,b)  = L2AB (i,a,j,b)
            tiajb (i,a,j,b) *= R0
            PREPARE  A2old_ab (i,a,j,b) += tiajb (i,a,j,b)
         ENDPARDO  a, b, i, j

         PARDO  a, i
            GET          L1A (i,a)
            tia (i,a)  = L1A (i,a)
            tia (i,a) *= R0
            PUT  A1A_old (i,a) += tia (i,a)
         ENDPARDO  a, i
      ENDIF

      EXECUTE  SERVER_BARRIER  

      DELETE  DIS_OO1
      DELETE  DIS_VV1
      DELETE  DIS_OV1
      DELETE  DIS_VO1
      DELETE  T2L2_VV_A
      DELETE  R2L2_VV_A
      DELETE  DENS_INT_OV_A
      DELETE  T1L1_OO_A
      DELETE  T2L2_OO_A
      DELETE  R2L2_OO_A
#
#
#     Form the Tau arrays and single particle intermediates 
#     GAE and GMI!
#
#
      CALL TAU
      CALL GAE
      CALL GMI
      EXECUTE  SERVER_BARRIER
#
#
#     Compute contributions to one-particle intermediates from DAB and DIJ 
#     Compute the contributions to Iaa and Iii coming from the Fock matrix 
# 
#
      CALL I11 
      CALL  IFOCK_PP
#
#
#     Compute intermediates used in EOM and "ground-state"
#     density routines!
#
#
      CALL  DENS_INTERMEDIATES
      CALL  EOM_DENS_INT
#
#
#     Form the corresponding 2-particle density matrices!
#
#
      CALL DIJKL # gamma3  EOM Works!
      EXECUTE  SERVER_BARRIER

      CALL DABCD # gamma2  EOM Works (I think)!

      CALL DIBJA # gamma4  EOM Works!

      EXECUTE  SERVER_BARRIER

      CALL DIJAB # gamma1  EOM Works!

      CALL DIJKA # gamma6  EOM Works!

      CALL DABCI # gamma5  EOM Works!


      IF debug > 0.0
         EXECUTE  PRINT_SCALAR  ZERO
         EXECUTE  PRINT_SCALAR  ZERO
         EXECUTE  PRINT_SCALAR  ZERO
         EXECUTE  PRINT_SCALAR  ZERO
            CALL  PRINT_DIJAB # Watson, works!
            CALL  PRINT_DIJKL # Watson, works!
            CALL  PRINT_DIBJA # Watson, works!
            CALL  PRINT_DIJKA # Watson, works!
            CALL  PRINT_DAIBC # Watson, works!
         EXECUTE  PRINT_SCALAR  ZERO
         EXECUTE  PRINT_SCALAR  ZERO
         EXECUTE  PRINT_SCALAR  ZERO
         EXECUTE  PRINT_SCALAR  ZERO
      ENDIF
#
#
#    Compute 'Direct' contributions to Iab coming from Vabcd  
#
#
      CALL IABDIRECT 
      EXECUTE  SERVER_BARRIER

      DELETE Dii
      DELETE Daa
      DELETE Djj
      DELETE Dbb

      DELETE  L2RTAU_iiii
      DELETE  L2RTAU_ijij
      DELETE  L2TTAU_iiii
      DELETE  L2TTAU_ijij

      DEALLOCATE  LR2L2_ii (*,*)
      DEALLOCATE  LT2L2_ii (*,*)
      DEALLOCATE  LR2L2_aa (*,*)
      DEALLOCATE  LT2L2_aa (*,*)
      DEALLOCATE  LR1L2_ai (*,*)
      DEALLOCATE  LR2L1_ai (*,*)
      DEALLOCATE  L_Z1_ai  (*,*)
      DEALLOCATE  L_Z2_ai  (*,*)
      DEALLOCATE  L_Y_aa   (*,*)
      DEALLOCATE  L_Y_ii   (*,*)
      DEALLOCATE  L_Z_aa   (*,*)
      DEALLOCATE  L_Z_ii   (*,*)
#
#
#     Now form the contributions to the intermediate
#     matrix, I, from the density matrices!
#
#     Follow this with the backtransforms to get
#     the two particle matrices in near final form!
#
#
      CALL  I_CONTRIBUTIONS
      CALL  BACK_TRANSFORMS

      EXECUTE  SIP_BARRIER  
#
#
#     Compute the orbital response contributions to the occupied-occupied
#     and virtual-virtual one-particle density matrix. 
#
#
      CALL DIJ_OR  
      CALL DAB_OR  

      EXECUTE  SIP_BARRIER  
#
#
#     Compute the RHS of the Z-vector equation. 
#
#
      CALL XAI_FULL   
      EXECUTE  SIP_BARRIER
#
#
#     Finally solve for Dai iteratively 
#
#
      CALL DAI_PROC

      EXECUTE  SIP_BARRIER
#
#
#     Compute the contributions to Iai coming from the Fock matrix 
#
#
      CALL IFOCK
#
#
#    Backtransform one-particle intermediates and contract with integral derivatives
#
#
      CREATE  Ipq
      CREATE  Dpq
      EXECUTE SIP_BARRIER

      CALL  I1TRANS
#
#
#     Backtransform one-particle density and contract with integral derivatives
#
#
      CALL  D1TRANS

      EXECUTE  SIP_BARRIER
#
#
#     Finally contract with the derivative integrals
#
#     
      PARDO mu, nu
            GET           Ipq(mu,nu)
            Tpq(mu,nu)  = Ipq(mu,nu)
            Tpq(mu,nu) *= 2.0  
            EXECUTE SCONT1 Tpq(mu,nu)
      ENDPARDO mu, nu
      
      PARDO mu, nu
            GET           Dpq(mu,nu)
            GET           DHF(mu,nu)
            Tpq(mu,nu)  = Dpq(mu,nu)
            Tpq(mu,nu) += DHF(mu,nu)
            Tpq(mu,nu) *= 2.0
            EXECUTE HCONT1 Tpq(mu,nu)
      ENDPARDO mu, nu

      EXECUTE  SIP_BARRIER
#
#
#     Complete the backtransformation of the 2-particle
#     density matrices and contract with AO derivative
#     integrals!
#
#
      CALL  PDCONT
#
#
#     ...ready!
#
#
      ENDPROC DGRAD
#-------------------------------------------------------------------------





#-------------------------------------------------------------------------
#                                                                        #
#                      \--------------------------/                      #
#                      |    BEGIN MAIN PROGRAM    |                      #
#                      /--------------------------\                      #
#                                                                        #
#-------------------------------------------------------------------------
#                                                                        #
#                                                                        #
#                                                                        #
      debug = -1.0
      iroot = eom_roots      # always get the last vector!
      root_thresh = eom_tol  # tolerance to distinguish roots
      EXECUTE  PRINT_SCALAR  iroot
      EXECUTE  PRINT_SCALAR  root_thresh

      ONEHALF =  0.5
      ZERO    =  0.0
      ONE     =  1.0
      TWO     =  2.0
      THREE   =  3.0
      FOUR    =  4.0
      FIVE    =  5.0
      SIX     =  6.0
      SEVEN   =  7.0
      EIGHT   =  8.0
      NINE    =  9.0
      TEN     = 10.0

      CREATE R1A_VECS
      CREATE L1A_VECS
      CREATE REE
      CREATE LEE
      CREATE R1A
      CREATE L1A
      CREATE L1A_NORM
      CREATE Dij_a
      CREATE Dab_a
      CREATE Dai
      CREATE Dia
      CREATE t1a_old 
      CREATE t1b_old 
      CREATE a1a_old 
      create HBAR_aa
      create HBAR_ii
      CREATE HBAR_ia
      CREATE HBAR_jb
#
#
#    Read BLOCKDATA then perform an integral transformation
#    Followed by computing Hbar!
#
#
      CALL READ_2EL 
      CALL TRAN_UHF
      EXECUTE  SERVER_BARRIER

      CALL GET_RL_AMPS
      EXECUTE  SERVER_BARRIER
      CALL  HBAR

      DELETE  R1A_VECS
      DELETE  L1A_VECS
     #DESTROY  R2AA_VECS
     #DESTROY  R2AB_VECS
     #DESTROY  L2AA_VECS
     #DESTROY  L2AB_VECS
#
#
#     To make things numerically stable and avoid
#     multiplication by LRNORM everywhere, it is 
#     much easier to normalize L against R!
#
#
      CALL COMP_LR_NORM
      EXECUTE  SERVER_BARRIER

      PARDO  a, i, a1, i1
         REQUEST              L2AA (i,a,i1,a1) a
         tiaia (i,a,i1,a1)  = L2AA (i,a,i1,a1)
         tiaia (i,a,i1,a1) *= LRNORM
         PREPARE  L2AA_NORM (i,a,i1,a1) = tiaia (i,a,i1,a1)
      ENDPARDO  a, i, a1, i1

      PARDO  a, i, b, j
         REQUEST            L2AB (i,a,j,b) a
         tiajb (i,a,j,b)  = L2AB (i,a,j,b)
         tiajb (i,a,j,b) *= LRNORM
         PREPARE  L2AB_NORM (i,a,j,b) = tiajb (i,a,j,b)
      ENDPARDO  a, i, b, j

      PARDO  a, i
         GET          L1A (i,a)
         tia (i,a)  = L1A (i,a)
         tia (i,a) *= LRNORM
         PUT  L1A_NORM (i,a) = tia (i,a)
      ENDPARDO  a, i

      EXECUTE  SERVER_BARRIER

      PARDO  a, i, a1, i1
         REQUEST              L2AA_NORM (i,a,i1,a1) a
         tiaia (i,a,i1,a1)  = L2AA_NORM (i,a,i1,a1)
         PREPARE  L2AA (i,a,i1,a1) = tiaia (i,a,i1,a1)
      ENDPARDO  a, i, a1, i1

      PARDO  a, i, b, j 
         REQUEST            L2AB_NORM (i,a,j,b) a
         tiajb (i,a,j,b)  = L2AB_NORM (i,a,j,b)
         PREPARE  L2AB (i,a,j,b) = tiajb (i,a,j,b)
      ENDPARDO  a, i, b, j
       
      PARDO  a, i
         GET          L1A_NORM (i,a)
         tia (i,a)  = L1A_NORM (i,a)
         PUT  L1A (i,a) = tia (i,a)
      ENDPARDO  a, i

      EXECUTE  SERVER_BARRIER
      DELETE  L1A_NORM
     #DESTROY  L2AA_NORM
     #DESTROY  L2AB_NORM

      CALL  COMP_LR_NORM
      EXECUTE  SERVER_BARRIER
#
#
#     Now with Hbar and MO integrals, we need to
#     compute Xi and then Zeta for the EOM gradients!
#
#
      CREATE  Niijj
      CREATE  Niiii
      CREATE  VCONV1A
      CREATE  VCACT1A
      CREATE  VCHACT1A
      CREATE  DDii
      CREATE  DDaa
      CREATE  DDjj
      CREATE  VC1A
      CREATE  VCH1A
      CREATE  VTEMP1A

      EXECUTE  SERVER_BARRIER

      CALL CALC_XI
      CALL SOLVE_ZETA

      EXECUTE  SIP_BARRIER
      DELETE  Niijj
      DELETE  Niiii
      DELETE  VCONV1A
      DELETE  VCACT1A
      DELETE  VCHACT1A
#
#
#     Now form the one and two particle density
#     matrices, including relaxed contribution
#     and contract in to the gradient array!
#
#
      CALL DGRAD 

      EXECUTE  SERVER_BARRIER

#      IF debug > 0.0
#
#
#     Compute squares of each density contribution 
#
#
        #CALL S2IIJ   # --> symmetric  
        #CALL S2IAB   # --> symmetric  
   
        #CALL S2DIJKL # --> symmetric Matches Aces 
        #CALL S2DABCD # --> symmetric Matches Aces  
        #CALL S2DIBJA # --> symmetric Matches Aces  

        #CALL S2DIJKA # --> symmetric Matches Aces  
        #CALL S2ABCI  # --> symmetric Matches Aces  
        #CALL S2DIJAB # --> symmetric Matches Aces  

#      ENDIF
# 
#
#     ...ready!
#
#
                    ENDSIAL  EOMCCSD_GRAD
# ----------------------------------------------------------------------------------------
