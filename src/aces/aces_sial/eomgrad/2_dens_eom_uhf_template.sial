#  Copyright (c) 2003-2010 University of Florida
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  The GNU General Public License is included in this distribution
#  in the file COPYRIGHT.
                  SIAL EOMCCSD_DENSITY_RHF
#
#
#-------------------------------------------------------------------------
#
#
#          ...Declare variables...
#
#
      AOINDEX  mu     = 1, norb
      AOINDEX  nu     = 1, norb
      AOINDEX  lambda = 1, norb
      AOINDEX  sigma  = 1, norb

      MOAINDEX  i = baocc, eaocc
      MOAINDEX  i1= baocc, eaocc
      MOAINDEX  i2= baocc, eaocc
      MOAINDEX  i3= baocc, eaocc

      MOAINDEX  a = bavirt, eavirt
      MOAINDEX  a1= bavirt, eavirt
      MOAINDEX  a2= bavirt, eavirt
      MOAINDEX  a3= bavirt, eavirt

      MOAINDEX  j = baocc, eaocc
      MOAINDEX  j1= baocc, eaocc
      MOAINDEX  j2= baocc, eaocc
      MOAINDEX  j3= baocc, eaocc

      MOAINDEX  b = bavirt, eavirt
      MOAINDEX  b1= bavirt, eavirt
      MOAINDEX  b2= bavirt, eavirt
      MOAINDEX  b3= bavirt, eavirt

      MOAINDEX  p = baocc, eavirt
      MOAINDEX  p1= baocc, eavirt
      MOAINDEX  p2= baocc, eavirt
      MOAINDEX  p3= baocc, eavirt

      MOAINDEX  q = baocc, eavirt
      MOAINDEX  q1= baocc, eavirt
      MOAINDEX  q2= baocc, eavirt
      MOAINDEX  q3= baocc, eavirt

      INDEX  jatom    = 1, natoms
      INDEX  kindex26 = 1, 26
      INDEX  kindex12 = 1, 12
      INDEX  indone   = 1, 1

      INDEX  kroot    = 1, 12
      INDEX  indstate = 1, 12
      INDEX  moment   = 1, 3
      INDEX  secmom   = 1, 6
      INDEX  octmom   = 1, 10
#
#
#      Two particle density matrix!
#
#
      SERVED       L2R2_aaaa (i,a1,i1,a)   #
      SERVED       L2R2_abba (i,b1,j1,a)   #  These can be computed on the fly...
      SERVED       L2R2_baab (j,a1,i1,b)   #  But they are used 4 times...
      SERVED       L2R2_abab (i,b1,i1,b)   #  So I don't know what is best...
      SERVED       L2R2_baba (j,a1,j1,a)   #

      SERVED       L2T2_aaaa (i,a1,i1,a)   #
      SERVED       L2T2_abba (i,b1,j1,a)   #  These can be computed on the fly...
      SERVED       L2T2_baab (j,a1,i1,b)   #  But they are used 4 times...
      SERVED       L2T2_abab (i,b1,i1,b)   #  So I don't know what is best...
      SERVED       L2T2_baba (j,a1,j1,a)   #

      SERVED       TAU_aa (a,i,a1,i1)
      SERVED       TAU_ab (a,i,b1,j1)

      SERVED       RTAU_aa (a,i,a1,i1)
      SERVED       RTAU_ab (a,i,b1,j1)

      SERVED       Dabci_aaaa (a,a2,a1,i)
      SERVED       Dabci_abab (a,b2,a1,j)
      SERVED       Dabci_baba (b,a2,b1,i)

      SERVED       Dabcd_aa (a,a1,a2,a3)
      SERVED       Dabcd_ab (a,b1,a2,b3)

      DISTRIBUTED  Dijab_aa (i,i1,a,a1)
      DISTRIBUTED  Dijab_ab (i,j ,a,b )
      DISTRIBUTED  Dijab_bb (j,j1,b,b1)

      DISTRIBUTED  Dibja_aaaa (i,a1,i1,a)
      DISTRIBUTED  Dibja_abab (i,b,i1,b1)
      DISTRIBUTED  Dibja_baba (j,a,j1,a1)
      DISTRIBUTED  Dibja_abba (i,b1,j1,a)
      DISTRIBUTED  Dibja_baab (j,a1,i1,b)

      DISTRIBUTED  Dijka_aaaa (i,i1,i2,a)
      DISTRIBUTED  Dijka_abab (i,j1,i2,b)
      DISTRIBUTED  Dijka_baba (j,i1,j2,a)

      DISTRIBUTED  Dijkl_aa (i,i1,i2,i3)
      DISTRIBUTED  Dijkl_ab (i,j1,i2,j3)

      DISTRIBUTED  L2RTAU_iiii (i,i1,i2,i3)
      DISTRIBUTED  L2RTAU_ijij (i,i1,j ,j1)
      DISTRIBUTED  L2TTAU_iiii (i,i1,i2,i3)
      DISTRIBUTED  L2TTAU_ijij (i,i1,j ,j1)

      DISTRIBUTED  DIS_OO1_A (i,i1)
      DISTRIBUTED  DIS_OO2_A (i,i1)
      DISTRIBUTED  DIS_OO3_A (i,i1)
      DISTRIBUTED  DIS_OO4_A (i,i1)
      DISTRIBUTED  DIS_OO1_B (j,j1)
      DISTRIBUTED  DIS_OO2_B (j,j1)
      DISTRIBUTED  DIS_OO3_B (j,j1)
      DISTRIBUTED  DIS_OO4_B (j,j1)

      DISTRIBUTED  DIS_VO1_A (a,i1)
      DISTRIBUTED  DIS_VO2_A (a,i1)
      DISTRIBUTED  DIS_VO3_A (a,i1)
      DISTRIBUTED  DIS_VO4_A (a,i1)
      DISTRIBUTED  DIS_VO1_B (b,j1)
      DISTRIBUTED  DIS_VO2_B (b,j1)
      DISTRIBUTED  DIS_VO3_B (b,j1)
      DISTRIBUTED  DIS_VO4_B (b,j1)

      DISTRIBUTED  DIS_VV1_A (a,a1)
      DISTRIBUTED  DIS_VV2_A (a,a1)
      DISTRIBUTED  DIS_VV3_A (a,a1)
      DISTRIBUTED  DIS_VV4_A (a,a1)
      DISTRIBUTED  DIS_VV1_B (b,b1)
      DISTRIBUTED  DIS_VV2_B (b,b1)
      DISTRIBUTED  DIS_VV3_B (b,b1)
      DISTRIBUTED  DIS_VV4_B (b,b1)

      LOCAL  L_Z1_ai (a,i)
      LOCAL  L_Z1_bj (b,j)
      LOCAL  L_Z2_ai (a,i)
      LOCAL  L_Z2_bj (b,j)

      LOCAL  L_Z_ii (i,i1)
      LOCAL  L_Z_jj (j,j1)
      LOCAL  L_Z_aa (a,a1)
      LOCAL  L_Z_bb (b,b1)
      LOCAL  L_Y_ii (i,i1)
      LOCAL  L_Y_jj (j,j1)
      LOCAL  L_Y_aa (a,a1)
      LOCAL  L_Y_bb (b,b1)

      LOCAL  LR1L2_ai (a,i1)
      LOCAL  LR1L2_bj (b,j1)
      LOCAL  LR2L1_ai (a,i1)
      LOCAL  LR2L1_bj (b,j1)
      LOCAL  LR2L2_aa (a,a1)
      LOCAL  LR2L2_bb (b,b1)
      LOCAL  LR2L2_ii (i,i1)
      LOCAL  LR2L2_jj (j,j1)
      LOCAL  LT2L2_aa (a,a1)
      LOCAL  LT2L2_bb (b,b1)
      LOCAL  LT2L2_ii (i,i1)
      LOCAL  LT2L2_jj (j,j1)

      LOCAL  Liiaa  (i,i1,a2,a3)
      LOCAL  L1iiaa (i,i1,a2,a3)
      LOCAL  Liiii  (i,i1,i2,i3)
      LOCAL  L1iiii (i,i1,i2,i3)
      LOCAL  Lijij  (i,j,i1,j1)
      LOCAL  L1ijij (i,j,i1,j1)
      LOCAL  Laaia  (a,a1,i,a2)
      LOCAL  L1aaia (a,a1,i,a2)
      LOCAL  Lbbia  (b,b1,i,a2)
      LOCAL  L1bbia (a,a1,j,b2)
      LOCAL  Laajb  (a,a1,j,b2)
      LOCAL  L1aajb (a,a1,j,b2)
      LOCAL  Lbbjb  (b,b1,j,b2)
      LOCAL  L1bbjb (b,b1,j,b2)
      LOCAL  Liiai  (i,i1,a,i2)
      LOCAL  L1iiai (i,i1,a,i2)
      LOCAL  Liibj  (i,i1,b,j2)
      LOCAL  L1iibj (i,i1,b,j2)
      LOCAL  Ljjbj  (j,j1,b,j2)
      LOCAL  L1jjbj (j,j1,b,j2)
      LOCAL  Ljjai  (j,j1,a,i2)
      LOCAL  L1jjai (j,j1,a,i2)
      LOCAL  Laaii  (a,a1,i,i1)
      LOCAL  Labij  (a,b1,i,j1)
      LOCAL  Lijab  (i,j1,a,b1)
      LOCAL  Lajib  (a,j,i,b)
      LOCAL  Lbija  (b,i,j,a)

      TEMP  tjaji  (j,a,j1,i )
      TEMP  t1jaji (j,a,j1,i )
      TEMP  tijib  (i,j,i1,b )
      TEMP  t1ijib (i,j,i1,b )
      TEMP  tjija  (j,i,j1,a )
      TEMP  t1jija (j,i,j1,a )
      TEMP  tjaij  (j,a,i, j1)
      TEMP  t1jaij (j,a,i, j1)
      TEMP  tjabi  (j,a,b ,i )
      TEMP  t1jabi (j,a,b ,i )
      TEMP  tibij  (i,b1,i1,j)
      TEMP  t1ibij (i,b1,i1,j)
      TEMP  tbjjj  (b,j,j1,j2)
      TEMP  t1bjjj (b,j,j1,j2)
      TEMP  taaia  (a,a1,i,a2)
      TEMP  t1aaia (a,a1,i,a2)
      TEMP  tiibj  (i,i1,b,j2)
      TEMP  tjjai  (j,j1,a,i2)
      TEMP  t1jjai (j,j1,a,i2)
      TEMP  t1iibj (i,i1,b,j2)
      TEMP  tiiai  (i,i1,a,i2)
      TEMP  t1iiai (i,i1,a,i2)
      TEMP  t2iiai (i,i1,a,i2)
      TEMP  tabib  (a,b ,i,b1)
      TEMP  t1abib (a,b ,i,b1)
      TEMP  tbaja  (b,a ,j,a1)
      TEMP  t1baja (b,a ,j,a1)
      TEMP  tijaj  (i,j1,a,j2)
      TEMP  t1ijaj (i,j1,a,j2)
      TEMP  tjibi  (j,i1,b,i2)
      TEMP  t1jibi (j,i1,b,i2)
      TEMP  taaii  (a,a1,i,i1)
      TEMP  t1aaii (a,a1,i,i1)
      TEMP  t2aaii (a,a1,i,i1)
      TEMP  t3aaii (a,a1,i,i1)
      TEMP  tiiaa  (i,i1,a,a1)
      TEMP  t1iiaa (i,i1,a,a1)
      TEMP  t2iiaa (i,i1,a,a1)
      TEMP  t3iiaa (i,i1,a,a1)
      TEMP  t4iiaa (i,i1,a,a1)
      TEMP  tjjbb  (j,j1,b,b1)
      TEMP  t1jjbb (j,j1,b,b1)
      TEMP  t2jjbb (j,j1,b,b1)
      TEMP  t3jjbb (j,j1,b,b1)
      TEMP  tiiii  (i,i1,i2,i3)
      TEMP  t1iiii (i,i1,i2,i3)
      TEMP  tijij  (i,j1,i2,j3)
#
#
#
      LOCAL  GRDSECM (secmom,indone)
      LOCAL  EXCSECM (secmom,indone)
      LOCAL  GRDQUAD (secmom,indone)
      LOCAL  EXCQUAD (secmom,indone)
      LOCAL  GRDOCTM (octmom,indone)
      LOCAL  EXCOCTM (octmom,indone)

      SERVED  R2AA_VECS (a,i,a1,i1,kroot)
      SERVED  R2BB_VECS (b,j,b1,j1,kroot)
      SERVED  R2AB_VECS (a,i,b ,j ,kroot)

      SERVED  L2AA_VECS (i,a,i1,a1,kroot)
      SERVED  L2AB_VECS (i,a,j ,b ,kroot)

      SERVED  R2AA (a,i,a1,i1)
      SERVED  R2BB (b,j,b1,j1)
      SERVED  R2AB (a,i,b,j)

      SERVED  L2AA (i,a,i1,a1)
      SERVED  L2BB (j,b,j1,b1)
      SERVED  L2AB (i,a,j,b)

      SERVED  A2AA (i,a,i1,a1)
      SERVED  A2BB (j,b,j1,b1)
      SERVED  A2AB (i,a,j,b)

      DISTRIBUTED  R1A_VECS (a,i,kroot)
      DISTRIBUTED  R1B_VECS (b,j,kroot)

      DISTRIBUTED  L1A_VECS (i,a,kroot)
      DISTRIBUTED  L1B_VECS (j,b,kroot)

      DISTRIBUTED  R1A (a,i)
      DISTRIBUTED  R1B (b,j)

      DISTRIBUTED  L1A (i,a)
      LOCAL        LL1A (i,a)
      DISTRIBUTED  L1B (j,b)

      DISTRIBUTED  A1A (i,a)
      LOCAL        LA1A (i,a)
      DISTRIBUTED  A1B (j,b)

      DISTRIBUTED  T1A (a,i)
      LOCAL        LT1A (a,i)
      DISTRIBUTED  T1B (b,j)

      DISTRIBUTED  EE  (kindex12,indone)
      DISTRIBUTED  LEE  (kindex12,indone)
      TEMP         TEE (kindex12,indone)

      TEMP  TMOM_DATA (kindex26,kindex26)

      SERVED  T2AA (a,i,a1,i1)
      SERVED  T2AB (a,i,b,j)
      SERVED  T2BB (b,j,b1,j1)

      TEMP  taiia  (a,i,i1,a1)
      TEMP  t1aiia (a,i,i1,a1)
      TEMP  tpipi  (p,i,p1,i1)
      TEMP  tiaia  (i,a,i1,a1)
      TEMP  t1iaia (i,a,i1,a1)
      TEMP  tjbjb  (j,b,j1,b1)
      TEMP  t1jbjb (j,b,j1,b1)
      TEMP  tjbai  (j,b,a ,i )
      TEMP  tibaj  (i,b,a ,j )
      TEMP  t1ibaj (i,b,a ,j )
      TEMP  tiajb  (i,a,j ,b )
      TEMP  t1iajb (i,a,j ,b )
      TEMP  tbija  (b,i,j ,a )
      TEMP  t1bija (b,i,j ,a )
      TEMP  tajib  (a,j,i ,b )
      TEMP  t1ajib (a,j,i ,b )
      TEMP  taibj  (a,i,b ,j )
      TEMP  tbjai  (b,j,a ,i )
      TEMP  t1bjai (b,j,a ,i )
      TEMP  tibja  (i,b,j ,a )
      TEMP  t1ibja (i,b,j ,a )
      TEMP  tabji  (a,b,j ,i )
      TEMP  t1abji (a,b,j ,i )
      TEMP  tabij  (a,b,i ,j )
      TEMP  t1abij (a,b,i ,j )
      TEMP  tbaji  (b,a,j ,i )
      TEMP  t1baji (b,a,j ,i )
      TEMP  tijab  (i,j,a ,b )
      TEMP  t1ijab (i,j,a ,b )
      TEMP  t2ijab (i,j,a ,b )
      TEMP  tjiba  (j,i,b ,a )
      TEMP  t1jiba (j,i,b ,a )
      TEMP  t2jiba (j,i,b ,a )
      TEMP  t3jiba (j,i,b ,a )
      TEMP  t1aibj (a,i,b ,j )
      TEMP  t2aibj (a,i,b ,j )
      TEMP  t3aibj (a,i,b ,j )
      TEMP  tajji  (a,j1,j2,i)
      TEMP  t1ajji (a,j1,j2,i)
      TEMP  tibba  (i,b,b1,a1)
      TEMP  tbbai  (b,b1,a,i1)
      TEMP  tibib  (i,b,i1,b1)
      TEMP  t1ibib (i,b,i1,b1)
      TEMP  tjaja  (j,a,j1,a1)
      TEMP  t1jaja (j,a,j1,a1)
      TEMP  tjaaj  (j,a1,a,j1)
      TEMP  t1jaaj (j,a1,a,j1)
      TEMP  tibbi  (i,b1,b,i1)
      TEMP  t1ibbi (i,b,b1,i1)
      TEMP  tiaai  (i,a,a1,i1)
      TEMP  t1iaai (i,a,a1,i1)
      TEMP  taabj  (a,a1,b2,j)
      TEMP  tbjbb  (b,j,b1,b2)
      TEMP  tjaab  (j,a,a1,b1)
      TEMP  tiiia  (i,i1,i2,a)
      TEMP  t1iiia (i,i1,i2,a)
      TEMP  taaai  (a,a1,a2,i)
      TEMP  t1aaai (a,a1,a2,i)
      TEMP  tbibi  (b,i,b1,i1)
      TEMP  t1bibi (b,i,b1,i1)
      TEMP  tajaj  (a,j,a1,j1)
      TEMP  t1ajaj (a,j,a1,j1)
      TEMP  taiai  (a,i,a1,i1)
      TEMP  t1aiai (a,i,a1,i1)
      TEMP  t2aiai (a,i,a1,i1)
      TEMP  t3aiai (a,i,a1,i1)
      TEMP  t4aiai (a,i,a1,i1)
      TEMP  tbjjb  (b,j,j1,b1)
      TEMP  tbjbj  (b,j,b1,j1)
      TEMP  t1bjbj (b,j,b1,j1)
      TEMP  t2bjbj (b,j,b1,j1)
      TEMP  tqppq  (q,p,p1,q1)
      TEMP  t1qppq (q,p,p1,q1)
      TEMP  t2qppq (q,p,p1,q1)
      TEMP  t3qppq (q,p,p1,q1)
      TEMP  tpqqp  (p,q,q1,p1)
      TEMP  t1pqqp (p,q,q1,p1)
      TEMP  t2pqqp (p,q,q1,p1)
      TEMP  t3pqqp (p,q,q1,p1)
      TEMP  tppqq  (p,p1,q,q1)
      TEMP  t1ppqq (p,p1,q,q1)
      TEMP  t2ppqq (p,p1,q,q1)
      TEMP  t3ppqq (p,p1,q,q1)
      TEMP  tqqpp  (q,q1,p,p1)
      TEMP  t1qqpp (q,q1,p,p1)
      TEMP  t2qqpp (q,q1,p,p1)
      TEMP  tqqqq  (q,q1,q2,q3)
      TEMP  t1qqqq (q,q1,q2,q3)
      TEMP  t2qqqq (q,q1,q2,q3)
      TEMP  tpppp  (p,p1,p2,p3)
      TEMP  t1pppp (p,p1,p2,p3)
      TEMP  t2pppp (p,p1,p2,p3)
      TEMP  t3pppp (p,p1,p2,p3)
      TEMP  t4pppp (p,p1,p2,p3)
      TEMP  tpqpq  (p,q,p1,q1) 
      TEMP  t1pqpq (p,q,p1,q1) 
      TEMP  t2pqpq (p,q,p1,q1) 
      TEMP  t3pqpq (p,q,p1,q1) 
      TEMP  tqpqp  (q,p,q1,p1) 
      TEMP  t1qpqp (q,p,q1,p1) 
      TEMP  t2qpqp (q,p,q1,p1) 
      TEMP  t3qpqp (q,p,q1,p1) 

      TEMP  tia  (i,a)
      TEMP  tia2 (i,a)
      TEMP  tia3 (i,a)
      TEMP  tai  (a,i)
      TEMP  tai1 (a,i)
      TEMP  tai2 (a,i)
      TEMP  t1ai (a,i)
      TEMP  t2ai (a,i)
      TEMP  t3ai (a,i)
      TEMP  tjb  (j,b)
      TEMP  tjb1 (j,b)
      TEMP  tjb2 (j,b)
      TEMP  tjb3 (j,b)
      TEMP  tbj  (b,j)
      TEMP  t1bj (b,j)
      TEMP  t2bj (b,j)
      TEMP  t3bj (b,j)
      TEMP  tbj2 (b,j)
      TEMP  tbj3 (b,j)
      TEMP  tii  (i1,i)
      TEMP  t1ii (i1,i)
      TEMP  t2ii (i1,i)
      TEMP  t3ii (i1,i)
      TEMP  tjj  (j1,j)
      TEMP  t1jj (j1,j)
      TEMP  t2jj (j1,j)
      TEMP  t3jj (j1,j)
      TEMP  taa  (a,a1)
      TEMP  t1aa (a,a1)
      TEMP  t3aa (a,a1)
      TEMP  taa2 (a,a1)
      TEMP  tbb  (b,b1)
      TEMP  t1bb (b,b1)
      TEMP  t3bb (b,b1)
      TEMP  tbb2 (b,b1)
      TEMP  tpp  (p,p1)
      TEMP  t1pp (p,p1)
      TEMP  t2pp (p,p1)
      TEMP  t3pp (p,p1)
      TEMP  tqq  (q,q1)
      TEMP  t1qq (q,q1)
      TEMP  t2qq (q,q1)
      TEMP  t3qq (q,q1)

      TEMP  tii1 (i,i1)
      TEMP  tii2 (i,i1)
      TEMP  tjj1 (j,j1)
      TEMP  tjj2 (j,j1)
      TEMP  taa1 (a,a1)
      TEMP  tbb1 (b,b1)

      LOCAL  lai (a,i)
      LOCAL  lbj (b,j)
      LOCAL  lia (i,a)
      LOCAL  ljb (j,b)
      LOCAL  laa (a,a1)
      LOCAL  lbb (b,b1)
      LOCAL  lii (i,i1)
      LOCAL  ljj (j,j1)
      LOCAL  lxx (mu,nu)

      TEMP  txx  (mu,nu)
      TEMP  t1xx (mu,nu)
      TEMP  txx2 (mu,nu)
      TEMP  txx3 (mu,nu)
      TEMP  txi  (mu,i)
      TEMP  txj  (mu,j)
      TEMP  txa  (mu,a)
      TEMP  txb  (mu,b)

      DISTRIBUTED  HBAR_ia (i,a)
      DISTRIBUTED  HBAR_jb (j,b)

      SERVED  VSaiai (p,i,p1,i1)
      SERVED  VSbjbj (q,j,q1,j1)
      SERVED  Vaibj  (p,i,q,j)
      SERVED  Vaaii  (a,a1,i,i1)
      SERVED  Viaai  (i,a,a1,i1)
      SERVED  Vaaai  (a,a1,a2,i)

      DISTRIBUTED  DENS_VV_A (a,a1)
      DISTRIBUTED  DENS_VV_B (b,b1)
      DISTRIBUTED  DENS_OO_A (i,i1)
      DISTRIBUTED  DENS_OO_B (j,j1)
      DISTRIBUTED  DENS_OV_A (i,a)
      DISTRIBUTED  DENS_OV_B (j,b)
      DISTRIBUTED  DENS_VO_A (a,i)
      DISTRIBUTED  DENS_VO_B (b,j)

      DISTRIBUTED  DENS_INT_OV_A (i,a)
      DISTRIBUTED  DENS_INT_OV_B (j,b)

      DISTRIBUTED  T1L1_OO_A (i,i1)
      DISTRIBUTED  T1L1_OO_B (j,j1)

      DISTRIBUTED  T2L2_OO_A (i,i1)
      DISTRIBUTED  T2L2_OO_B (j,j1)

      DISTRIBUTED  T2L2_VV_A (a,a1)
      DISTRIBUTED  T2L2_VV_B (b,b1)

      DISTRIBUTED  R2L2_OO_A (i,i1)
      DISTRIBUTED  R2L2_OO_B (j,j1)

      DISTRIBUTED  R2L2_VV_A (a,a1)
      DISTRIBUTED  R2L2_VV_B (b,b1)

      DISTRIBUTED  AO_DENS (mu,nu)
      STATIC       DENSITY (mu,nu)
      DISTRIBUTED  DHF (mu,nu)

      LOCAL  Liaii  (i,a,i1,i2)
      LOCAL  Lajbi  (a,j,b1,i1)
      LOCAL  laiia  (a,i,i1,a1)
      LOCAL  liaia  (i,a,i1,a1)
      LOCAL  l1iaia (i,a,i1,a1)
      LOCAL  ljbia  (j,b,i1,a1)
      LOCAL  ljbjb  (j,b,j1,b1)
      LOCAL  laiai  (a,i,a1,i1)
      LOCAL  l1aiai (a,i,a1,i1)
      LOCAL  lbjai  (b,j,a, i )
      LOCAL  l1bjai (b,j,a, i )
      LOCAL  laibj  (a,i,b, j )
      LOCAL  l1aibj (a,i,b, j )
      LOCAL  liajb  (i,a,j, b )
      LOCAL  laiai2 (a,i,a1,i1)
      LOCAL  laibj2 (a,i1,b,j )
      LOCAL  laiai3 (a,i,a1,i2)
      LOCAL  laiai4 (a,i2,a1,i) 
      LOCAL  laiai5 (a,i2,a1,i) 
      LOCAL  laibj3 (a,i1,b, j)
      LOCAL  laibj4 (a,j,b,i) 
      LOCAL  laibj5 (a,j,b,i) 
      LOCAL  lbiaj  (b,i,a,j) 
      LOCAL  lbiaj2 (b,i,a,j) 

      LOCAL  lbjbj  (b,j,b1,j1)
      LOCAL  lbjbj2 (b,j,b1,j1)
      LOCAL  lbjbj3 (b,j,b1,j2)
      LOCAL  lbjbj4 (b,j2,b1,j) 
      LOCAL  lbjbj5 (b,j2,b1,j) 

      SCALAR  ZERO
      SCALAR  ONE
      SCALAR  TWO
      SCALAR  THREE
      SCALAR  ONEHALF
      SCALAR  energy
      SCALAR  energy_aa
      SCALAR  energy_ab
      SCALAR  energy_ba
      SCALAR  energy_bb
      SCALAR  energy_abba
      SCALAR  esum_aa
      SCALAR  esum_ab
      SCALAR  tmpnuc
      SCALAR  dipnuc
      SCALAR  dipnucx
      SCALAR  dipnucy
      SCALAR  dipnucz
      SCALAR  AMPLTHRESH
      SCALAR  OMEGA
      SCALAR  L_OMEGA
      SCALAR  OMEGA2
      SCALAR  OLD_R0
      SCALAR  R0
      SCALAR  L0
      SCALAR  R0_THRESH
      SCALAR  LOGRIGHT
      SCALAR  GROUNDSTATE
      SCALAR  EXCITESTATE
      SCALAR  iroot
      SCALAR  proot
      SCALAR  imomcount
      SCALAR  rootcount
      SCALAR  ncount
      SCALAR  root_thresh
      SCALAR  inext
      SCALAR  IDENS
      SCALAR  etemp
      SCALAR  etemp1
      SCALAR  etemp2
      SCALAR  etemp3
      SCALAR  etemp4
      SCALAR  etemp5
      SCALAR  etemp6
      SCALAR  sum1
      SCALAR  sum2
      SCALAR  sum3
      SCALAR  sum4
      SCALAR  sum5
      SCALAR  sum6
      SCALAR  OSC_STREN
      SCALAR  OSC_STREN1
      SCALAR  OSC_STREN2
      SCALAR  OSC_STREN3
      SCALAR  OSC_STREN_X
      SCALAR  OSC_STREN_Y
      SCALAR  OSC_STREN_Z
      SCALAR  DIP_SCF_X
      SCALAR  DIP_SCF_Y
      SCALAR  DIP_SCF_Z
      SCALAR  DIP_EXC_X
      SCALAR  DIP_EXC_Y
      SCALAR  DIP_EXC_Z
      SCALAR  DIP_GRD_X
      SCALAR  DIP_GRD_Y
      SCALAR  DIP_GRD_Z
      SCALAR  DIP_MOM_X
      SCALAR  DIP_MOM_Y
      SCALAR  DIP_MOM_Z
      SCALAR  DIP_MOM_X_L
      SCALAR  DIP_MOM_Y_L
      SCALAR  DIP_MOM_Z_L
      SCALAR  DIP_MOM_X_R
      SCALAR  DIP_MOM_Y_R
      SCALAR  DIP_MOM_Z_R
      SCALAR  DIPXY
      SCALAR  DIPXZ
      SCALAR  DIPYZ
      SCALAR  POLXX
      SCALAR  POLYY
      SCALAR  POLZZ
      SCALAR  POLXY
      SCALAR  POLXZ
      SCALAR  POLYZ
      SCALAR  POLTOTXX
      SCALAR  POLTOTYY
      SCALAR  POLTOTZZ
      SCALAR  POLTOTXY
      SCALAR  POLTOTXZ
      SCALAR  POLTOTYZ
      SCALAR  SECONDMOM
      SCALAR  LRNORM  
      SCALAR  LNORM  
      SCALAR  RNORM  
      SCALAR  esum  
      SCALAR  esum1  
      SCALAR  esum2 
      SCALAR  esum3 
      SCALAR  esum4 
#
#
#-------------------------------------------------------------------------


#------------------------------------------------------------------------- 
#
#    ------------
      PROC  READ
#    ------------
#
#          ...Create necessary arrays...
#
      CREATE  EE
      CREATE  LEE

      CREATE  HBAR_ia
      CREATE  HBAR_jb

      CREATE  T1A
      CREATE  T1B
      CREATE  R1A_VECS
      CREATE  L1A_VECS
      CREATE  A1A
      CREATE  A1B
      ALLOCATE LT1A(*,*) 
      ALLOCATE LA1A(*,*) 

      EXECUTE SIP_BARRIER

      EXECUTE  LIST_TO_BLOCKS  EE
      EXECUTE  LIST_TO_BLOCKS  R1A_VECS
      EXECUTE  LIST_TO_BLOCKS  R2AA_VECS
      EXECUTE  LIST_TO_BLOCKS  R2AB_VECS

      EXECUTE  LIST_TO_BLOCKS  HBAR_ia
      EXECUTE  LIST_TO_BLOCKS  HBAR_jb

      EXECUTE  LIST_TO_BLOCKS  T1A
      EXECUTE  LIST_TO_BLOCKS  T1B
      EXECUTE  LIST_TO_BLOCKS  T2AA
      EXECUTE  LIST_TO_BLOCKS  T2AB
      EXECUTE  LIST_TO_BLOCKS  T2BB

      EXECUTE  LIST_TO_BLOCKS  A1A
      EXECUTE  LIST_TO_BLOCKS  A2AA
      EXECUTE  LIST_TO_BLOCKS  A2AB

      EXECUTE  LIST_TO_BLOCKS  VSaiai (p,i,p1,i1)
      EXECUTE  LIST_TO_BLOCKS  Vaibj  (p,i,q,j)

      EXECUTE  LIST_TO_BLOCKS  Vaaii
      EXECUTE  LIST_TO_BLOCKS  Viaai
      EXECUTE  LIST_TO_BLOCKS  Vaaai

      EXECUTE  LIST_TO_BLOCKS  LEE
      EXECUTE  LIST_TO_BLOCKS  L1A_VECS
      EXECUTE  LIST_TO_BLOCKS  L2AA_VECS
      EXECUTE  LIST_TO_BLOCKS  L2AB_VECS

      EXECUTE READ_LIST_TO_BLOCKS

      EXECUTE  SERVER_BARRIER

      PARDO  p, i, p1, i1
         REQUEST  VSaiai (p,i,p1,i1) i1
         tpipi (p,i,p1,i1) = VSaiai (p,i,p1,i1)
         PREPARE  VSbjbj (p,i,p1,i1) = tpipi (p,i,p1,i1)
      ENDPARDO  p, i, p1, i1

      DO a 
      DO i 
         GET         T1A(a,i) 
         LT1A(a,i) = T1A(a,i) 
      ENDDO i 
      ENDDO a 

      DO a 
      DO i 
         GET         A1A(i,a) 
         LA1A(i,a) = A1A(i,a) 
      ENDDO i 
      ENDDO a 

      EXECUTE  SERVER_BARRIER
#
#
#          ...ready!
#
#
      ENDPROC  READ
#-------------------------------------------------------------------------



#-------------------------------------------------------------------------
#
#    ---------------------
      PROC  CREATE_ARRAYS
#    ---------------------
#
#
      CREATE  R1A
      CREATE  R1B

      CREATE  L1A
      CREATE  L1B

      CREATE  DENS_VV_A
      CREATE  DENS_VV_B

      CREATE  DENS_OO_A
      CREATE  DENS_OO_B

      CREATE  T1L1_OO_A
      CREATE  T1L1_OO_B

      CREATE  T2L2_OO_A
      CREATE  T2L2_OO_B

      CREATE  T2L2_VV_A
      CREATE  T2L2_VV_B

      CREATE  R2L2_OO_A
      CREATE  R2L2_OO_B

      CREATE  R2L2_VV_A
      CREATE  R2L2_VV_B

      CREATE  DENS_OV_A
      CREATE  DENS_OV_B

      CREATE  DENS_VO_A
      CREATE  DENS_VO_B

      CREATE  DENS_INT_OV_A
      CREATE  DENS_INT_OV_B

      CREATE  AO_DENS
      CREATE  DHF


      EXECUTE  SIP_BARRIER
#
#
#          ...ready!
#
#
      ENDPROC  CREATE_ARRAYS
#-------------------------------------------------------------------------



#-------------------------------------------------------------------------
#
#    ------------------
      PROC  HF_DENSITY
#    ------------------
#
#
      PARDO  mu, nu
         txx (mu,nu) = 0.0
         PUT  DHF (mu,nu) = txx (mu,nu)
      ENDPARDO  mu, nu
      EXECUTE  SIP_BARRIER

      PARDO mu, nu, i

            txi (nu,i )       = CA (nu,i)
            txx (mu,nu)       = CA (mu,i) * txi (nu,i)

            PUT  DHF (mu,nu) += txx (mu,nu)

      ENDPARDO mu, nu, i

      PARDO mu, nu, j

            txj (nu,j)        = CA (nu,j)
            txx (mu,nu)       = CA (mu,j) * txj (nu,j)

            PUT  DHF (mu,nu) += txx (mu,nu)

      ENDPARDO mu, nu, j

      EXECUTE  SIP_BARRIER
#
#
#          ...ready!
#
#
      ENDPROC  HF_DENSITY
#-------------------------------------------------------------------------



#-------------------------------------------------------------------------
#
#    ---------------------
      PROC  ZERO_Rk_ARRAY
#    ---------------------
#
#
      PARDO  i, a

         tai (a,i) = 0.0
         PUT  R1A (a,i) = tai (a,i)

      ENDPARDO  i, a

      PARDO  j, b

         tbj (b,j) = 0.0
         PUT  R1B (b,j) = tbj (b,j)

      ENDPARDO  j, b

      PARDO  a, i, a1, i1

         taiai (a,i,a1,i1) = 0.0
         PREPARE  R2AA (a,i,a1,i1) = taiai (a,i,a1,i1)

      ENDPARDO  a, i, a1, i1

      PARDO  b, j, b1, j1

         tbjbj (b,j,b1,j1) = 0.0
         PREPARE  R2BB (b,j,b1,j1) = tbjbj (b,j,b1,j1)

      ENDPARDO  b, j, b1, j1

      PARDO  a, i, b, j

         taibj (a,i,b,j) = 0.0
         PREPARE  R2AB (a,i,b,j) = taibj (a,i,b,j)

      ENDPARDO  a, i, b, j

      EXECUTE  SIP_BARRIER
      EXECUTE  SERVER_BARRIER
#
#
#          ...ready!
#
#
      ENDPROC  ZERO_Rk_ARRAY
#-------------------------------------------------------------------------



#-------------------------------------------------------------------------
#
#    --------------------
      PROC  GET_Rk_ARRAY
#    --------------------
#
#
#          ...Grab an R  array...
#                      k
#
#
      PARDO  a, i
         rootcount = 0
         DO kroot
            GET  R1A_VECS (a,i,kroot)
            rootcount += 1
            IF  rootcount == iroot
                tai (a,i) = R1A_VECS (a,i,kroot)
                PUT  R1A (a,i) = tai (a,i)
            ENDIF
         ENDDO kroot
      ENDPARDO  a, i 

      PARDO  b, j
         rootcount = 0
         DO kroot
            GET  R1A_VECS (b,j,kroot)
            rootcount += 1
            IF  rootcount == iroot
                tbj (b,j) = R1A_VECS (b,j,kroot)
                PUT  R1B (b,j) = tbj (b,j)
            ENDIF
         ENDDO kroot
      ENDPARDO  b, j

      PARDO  a, i, a1, i1
         rootcount = 0
         DO kroot
            REQUEST  R2AA_VECS (a,i,a1,i1,kroot) kroot
            rootcount += 1
            IF  rootcount == iroot
                taiai (a,i,a1,i1) = R2AA_VECS (a,i,a1,i1,kroot)
                PREPARE  R2AA (a,i,a1,i1) = taiai (a,i,a1,i1)
            ENDIF
         ENDDO kroot
      ENDPARDO  a, i, a1, i1

      PARDO  b, j, b1, j1
         rootcount = 0
         DO kroot
            REQUEST  R2AA_VECS (b,j,b1,j1,kroot) kroot
            rootcount += 1
            IF  rootcount == iroot
                tbjbj (b,j,b1,j1) = R2AA_VECS (b,j,b1,j1,kroot)
                PREPARE  R2BB (b,j,b1,j1) = tbjbj (b,j,b1,j1)
            ENDIF
         ENDDO kroot
      ENDPARDO  b, j, b1, j1

      PARDO  a, i, b, j
         rootcount = 0
         DO kroot
            REQUEST  R2AB_VECS (a,i,b,j,kroot) kroot
            rootcount += 1
            IF  rootcount == iroot
                taibj (a,i,b,j) = R2AB_VECS (a,i,b,j,kroot)
                PREPARE  R2AB (a,i,b,j) = taibj (a,i,b,j)
            ENDIF
         ENDDO kroot
      ENDPARDO  a, i, b, j

      EXECUTE  SIP_BARRIER
      EXECUTE  SERVER_BARRIER
#
#
#          ...Grab an excitation energy (omega)...
#
#
      rootcount = 0

      DO indone
      DO kindex12

         GET  EE (kindex12,indone)
         tee (kindex12,indone) = EE (kindex12,indone)

         rootcount += 1
         IF rootcount == iroot
            EXECUTE  RETURN_SVAL  tee  OMEGA
         ENDIF

      ENDDO kindex12
      ENDDO indone

      EXECUTE  SIP_BARRIER

      EXECUTE  PRINT_SCALAR  OMEGA
#
#
#          ...ready!
#
#
      ENDPROC  GET_Rk_ARRAY
#-------------------------------------------------------------------------

#-------------------------------------------------------------------------
#
#    --------------------
      PROC  COMP_R_NORM
#    --------------------
#
#
      RNORM  = R0
      RNORM *= R0
      esum   = 0.0

      PARDO  i, a

         GET         R1A (a,i)
         tai (a,i) = R1A (a,i)
         etemp  = tai (a,i) * tai (a,i)
         etemp *= 2.0
         esum  += etemp

      ENDPARDO  i, a

      PARDO  a, i, a1, i1

         REQUEST             R2AA (a,i,a1,i1) i1
         taiai (a,i,a1,i1) = R2AA (a,i,a1,i1)
         etemp  = taiai (a,i,a1,i1) * taiai (a,i,a1,i1)
         etemp  = etemp/2.0
         esum  += etemp

      ENDPARDO  a, i, a1, i1

      PARDO  a, i, b, j

         REQUEST           R2AB (a,i,b,j) j
         taibj (a,i,b,j) = R2AB (a,i,b,j)
         etemp  = taibj (a,i,b,j) * taibj (a,i,b,j)
         esum  += etemp

      ENDPARDO  a, i, b, j

      EXECUTE  SIP_BARRIER
      EXECUTE  SERVER_BARRIER

      COLLECTIVE  RNORM += esum

      EXECUTE SIP_BARRIER
      EXECUTE  SQUARE_ROOT  RNORM  ONEHALF

      RNORM  = 1.0 / RNORM
#
#
#          ...ready!
#
#
      ENDPROC  COMP_R_NORM
#-------------------------------------------------------------------------



#-------------------------------------------------------------------------
#
#    --------------------
      PROC  COMP_L_NORM
#    --------------------
#
#
      LNORM  = 0.0
      esum   = 0.0

      PARDO  i, a

         GET         R1A (a,i)
         GET         L1A (i,a)
         tai (a,i) = R1A (a,i)
         tia (i,a) = L1A (i,a)
         etemp  = tai (a,i) * tia (i,a)
         etemp *= 2.0
         esum  += etemp

      ENDPARDO  i, a

      PARDO  i, a, i1, a1

         REQUEST             R2AA (a,i,a1,i1) i1
         REQUEST             L2AA (i1,a1,i,a) a1
         taiai (a,i,a1,i1) = R2AA (a,i,a1,i1)
         tiaia (i1,a1,i,a) = L2AA (i1,a1,i,a)
         etemp  = taiai (a,i,a1,i1) * tiaia (i1,a1,i,a)
         etemp  = etemp/2.0
         esum  += etemp

      ENDPARDO  i, a, i1, a1

      PARDO  i, a, j, b

         REQUEST           R2AB (a,i,b,j) j
         REQUEST           L2AB (i,a,j,b) b
         taibj (a,i,b,j) = R2AB (a,i,b,j)
         tiaia (j,b,i,a) = L2AB (i,a,j,b)
         etemp  = taibj (a,i,b,j) * tiaia (j,b,i,a)
         esum  += etemp

      ENDPARDO  i, a, j, b

      EXECUTE  SIP_BARRIER
      EXECUTE  SERVER_BARRIER

      COLLECTIVE  LNORM += esum

      EXECUTE SIP_BARRIER
      LNORM *= RNORM
#
#
#   Watson, in some cases, LR = 0, which is obviously not good,
#           but we're just going to make it 1 because why not?
#
#           This is to keep the code running instead of stopping.
#
#
      etemp = LNORM
      if etemp < 0.0
         etemp *= -1.0
      endif
      if etemp < root_thresh
         EXECUTE  PRINT_SCALAR  ZERO
         EXECUTE  PRINT_SCALAR  ZERO
         EXECUTE  PRINT_SCALAR  ZERO
         EXECUTE  PRINT_SCALAR  ZERO
         EXECUTE  PRINT_SCALAR  ZERO
         EXECUTE  PRINT_SCALAR  ZERO
         EXECUTE  PRINT_SCALAR  ZERO
         EXECUTE  PRINT_SCALAR  ZERO
         EXECUTE  PRINT_SCALAR  ZERO
         EXECUTE  PRINT_SCALAR  ZERO
         LNORM = 1.0
      endif

      LNORM  = 1.0 / LNORM

#
#
#          ...ready!
#
#
      ENDPROC  COMP_L_NORM
#-------------------------------------------------------------------------



#-------------------------------------------------------------------------
#
#   ------------------
     PROC  AMPL_PRINT
#   ------------------

      AMPLTHRESH = 0.01
      ALLOCATE  lia (*,*)
      ALLOCATE  ljb (*,*)

      EXECUTE  PRINT_SCALAR  ZERO

      DO a 
      DO i
         GET R1A(a,i)
         lia(i,a)=R1A(a,i)
         EXECUTE c1_print lia AMPLTHRESH
      ENDDO i
      ENDDO a 

      EXECUTE  PRINT_SCALAR  ZERO

      DO a
      DO i
      DO a1
      DO i1
         REQUEST R2AA(a,i,a1,i1) i1
         tiaia(i,a,i1,a1)=R2AA(a,i,a1,i1)
         EXECUTE c2aa_print tiaia AMPLTHRESH
      ENDDO i1
      ENDDO a1 
      ENDDO i 
      ENDDO a 

      EXECUTE  PRINT_SCALAR  ZERO

#     PARDO b, j, b1, j1
#        REQUEST R2BB(b,j,b1,j1) j1
#        tjbjb(j,b,j1,b1)=R2BB(b,j,b1,j1)
#        EXECUTE c2bb_print tjbjb AMPLTHRESH
#     ENDPARDO b, j, b1, j1

#     EXECUTE  PRINT_SCALAR  ZERO

      DO a 
      DO i 
      DO b
      DO j
         REQUEST R2AB(a,i,b,j) j
         tiajb(i,a,j,b)=R2AB(a,i,b,j)
         EXECUTE c2ab_print tiajb AMPLTHRESH
      ENDDO j 
      ENDDO b
      ENDDO i
      ENDDO a

      EXECUTE  PRINT_SCALAR  ZERO
#
#
#          ...Print out the LAMBDA arrays for debugging.
#
#
      EXECUTE  PRINT_SCALAR  ZERO

      DO a 
      DO i
         lia(i,a)=LA1A(i,a)
         EXECUTE c1_print lia AMPLTHRESH
      ENDDO i
      ENDDO a 
      EXECUTE  SIP_BARRIER

#     PARDO b, j
#        GET A1B(j,b)
#        ljb(j,b)=A1B(j,b)
#        EXECUTE c1b_print ljb AMPLTHRESH
#     ENDPARDO b, j
      EXECUTE  SIP_BARRIER

      DO a1 
      DO i1
      DO i 
      DO a 
         REQUEST A2AA(i,a,i1,a1) a1
         tiaia(i,a,i1,a1)=A2AA(i,a,i1,a1)
         EXECUTE c2aa_print tiaia AMPLTHRESH
      ENDDO a 
      ENDDO i 
      ENDDO i1
      ENDDO a1 
      EXECUTE  SERVER_BARRIER

#     PARDO b, j, b1, j1
#        REQUEST A2BB(j,b,j1,b1) b1
#        tjbjb(j,b,j1,b1)=A2BB(j,b,j1,b1)
#        EXECUTE c2bb_print tjbjb AMPLTHRESH
#     ENDPARDO b, j, b1, j1
#     EXECUTE  SERVER_BARRIER

      DO a 
      DO i
      DO b
      DO j
         REQUEST A2AB(i,a,j,b) b
         tiajb(i,a,j,b)=A2AB(i,a,j,b)
         EXECUTE c2ab_print tiajb AMPLTHRESH
      ENDDO j
      ENDDO b
      ENDDO i 
      ENDDO a 
      EXECUTE  SERVER_BARRIER

      DEALLOCATE lia(*,*)
      DEALLOCATE ljb(*,*)
#
#
#          ...ready!
#
#
      ENDPROC  AMPL_PRINT
#-------------------------------------------------------------------------


#-------------------------------------------------------------------------
#
#   -----------------
     PROC  PUT_IN_Lk
#   -----------------
#
#
#          ...LAMBDA case first...
#
#
      IF  LOGRIGHT == ONE

         PARDO  a, i
                 tia (i,a) = LA1A (i,a)
            PUT  L1A (i,a) = tia (i,a)
         ENDPARDO  a, i

         PARDO b, j
                 tjb (j,b) = LA1A (j,b)
            PUT  L1B (j,b) = tjb (j,b)
         ENDPARDO b, j

         PARDO a, i, a1, i1
            REQUEST                      A2AA  (i,a,i1,a1) a1
                     tiaia (i,a,i1,a1) = A2AA  (i,a,i1,a1)
            PREPARE  L2AA  (i,a,i1,a1) = tiaia (i,a,i1,a1)
         ENDPARDO a, i, a1, i1

         PARDO b, j, b1, j1
            REQUEST                      A2AA  (j,b,j1,b1) b1
                     tjbjb (j,b,j1,b1) = A2AA  (j,b,j1,b1)
            PREPARE  L2BB  (j,b,j1,b1) = tjbjb (j,b,j1,b1)
         ENDPARDO b, j, b1, j1

         PARDO a, i, b, j
            REQUEST                    A2AB  (i,a,j,b) b
                     tiajb (i,a,j,b) = A2AB  (i,a,j,b)
            PREPARE  L2AB  (i,a,j,b) = tiajb (i,a,j,b)
         ENDPARDO a, i, b, j

         EXECUTE  SIP_BARRIER
         EXECUTE  SERVER_BARRIER

      ENDIF  # LOGRIGHT == ONE #
#
#
#          ...Left eigenvector case second...
#
#
      IF  LOGRIGHT == ZERO

         ncount    = 0
         rootcount = 0
         DO indone
         DO kroot

            GET                  LEE (kroot,indone)
            tee (kroot,indone) = LEE (kroot,indone)
            EXECUTE  RETURN_SVAL  tee  L_OMEGA
            etemp = L_OMEGA - OMEGA
            IF etemp < 0.0
               etemp *= -1.0
            ENDIF

            rootcount += 1
            IF etemp < root_thresh
               ncount = rootcount
               EXIT
            ENDIF

         ENDDO kroot
         ENDDO indone

         EXECUTE  SIP_BARRIER
         EXECUTE  PRINT_SCALAR  ncount
 
         IF ncount > ZERO

            PARDO  a1, i1
               rootcount = 0
               DO kroot
                  GET  L1A_VECS (i1,a1,kroot)
                  rootcount += 1
                  IF  rootcount == ncount
                      tia (i1,a1) = L1A_VECS (i1,a1,kroot)
                      PUT L1A (i1,a1) = tia (i1,a1)
                      PUT L1B (i1,a1) = tia (i1,a1)
                      EXIT
                  ENDIF
               ENDDO kroot
            ENDPARDO  a1, i1

            PARDO  a1, i1, a2, i2
               rootcount = 0
               DO kroot
                  REQUEST  L2AA_VECS (i1,a1,i2,a2,kroot) kroot
                  rootcount += 1
                  IF  rootcount == ncount
                      tiaia (i1,a1,i2,a2) = L2AA_VECS (i1,a1,i2,a2,kroot)
                      PREPARE  L2AA (i1,a1,i2,a2) = tiaia (i1,a1,i2,a2)
                  ENDIF
               ENDDO kroot
            ENDPARDO  a1, i1, a2, i2

            PARDO  a1, i1, b1, j1
               rootcount = 0
               DO kroot
                  REQUEST  L2AB_VECS (i1,a1,j1,b1,kroot) kroot
                  rootcount += 1
                  IF  rootcount == ncount
                     tiajb (i1,a1,j1,b1) = L2AB_VECS (i1,a1,j1,b1,kroot)
                     PREPARE  L2AB (i1,a1,j1,b1) = tiajb (i1,a1,j1,b1)
                  ENDIF
               ENDDO kroot
            ENDPARDO  a1, i1, b1, j1

            EXECUTE  SERVER_BARRIER

         ENDIF # ncount > 0
#
#
#          In the event that none of the L excitation energies
#          match the the current R excitation energy, we need
#          to put in R^t as L.
#
#
         IF ncount == ZERO

            EXECUTE  PRINT_SCALAR  ZERO
            EXECUTE  PRINT_SCALAR  ZERO
            EXECUTE  PRINT_SCALAR  ZERO
            EXECUTE  PRINT_SCALAR  ZERO
            EXECUTE  PRINT_SCALAR  ZERO
            EXECUTE  PRINT_SCALAR  ZERO
            EXECUTE  PRINT_SCALAR  ZERO
            EXECUTE  PRINT_SCALAR  ZERO
            EXECUTE  PRINT_SCALAR  ZERO
            EXECUTE  PRINT_SCALAR  ZERO

            PARDO a, i
               GET              R1A (a,i)
                    tia (i,a) = R1A (a,i)
               PUT  L1A (i,a) = tia (i,a)
            ENDPARDO a, i
 
            PARDO b, j
               GET              R1B (b,j)
                    tjb (j,b) = R1B (b,j)
               PUT  L1B (j,b) = tjb (j,b)
            ENDPARDO b, j
 
            PARDO a, i, a1, i1
               REQUEST                      R2AA  (a,i,a1,i1) i1
                        tiaia (i,a,i1,a1) = R2AA  (a,i,a1,i1)
               PREPARE  L2AA  (i,a,i1,a1) = tiaia (i,a,i1,a1)
            ENDPARDO a, i, a1, i1
 
            PARDO b, j, b1, j1
               REQUEST                      R2AA  (b,j,b1,j1) j1
                        tjbjb (j,b,j1,b1) = R2AA  (b,j,b1,j1)
               PREPARE  L2BB  (j,b,j1,b1) = tjbjb (j,b,j1,b1)
            ENDPARDO b, j, b1, j1
 
            PARDO a, i, b, j
               REQUEST                    R2AB  (a,i,b,j) j
                        tiajb (i,a,j,b) = R2AB  (a,i,b,j)
               PREPARE  L2AB  (i,a,j,b) = tiajb (i,a,j,b)
            ENDPARDO a, i, b, j

            EXECUTE  SERVER_BARRIER

         ENDIF # ncount == 0 #

      ENDIF  # LOGRIGHT == ZERO #
#
#
#          ...ready!
#
#
      ENDPROC  PUT_IN_Lk
#-------------------------------------------------------------------------


#-------------------------------------------------------------------------
#
#    ------------------
      PROC  R0_COMPUTE
#    ------------------
#
#
#    Compute R  due to the formula
#             0
#                 _               -1
#        R  = <0|(H R) |0> * omega
#         0           c
#
#-------------------------------------------------------------------------
#
#
#          ...Compute the contributions...
#
#
      R0 = 0.0

      etemp1 = 0.0
      etemp2 = 0.0
      etemp3 = 0.0
      etemp4 = 0.0
      etemp5 = 0.0
      sum1 = 0.0
      sum2 = 0.0
      sum3 = 0.0
      sum4 = 0.0
      sum5 = 0.0

      PARDO  a, i

         GET  HBAR_ia (i,a)
         GET  R1A     (a,i)
         tai (a,i) = R1A (a,i)
         etemp = HBAR_ia (i,a) * R1A (a,i)
         sum1 += etemp

      ENDPARDO  a, i

      PARDO  b, j

         GET  HBAR_jb (j,b)
         GET  R1B     (b,j)
         etemp = HBAR_jb (j,b) * R1B (b,j)
         sum2 += etemp

      ENDPARDO  b, j

      PARDO  a, a1, i, i1

         REQUEST  R2AA   (a,i,a1,i1) i1
         REQUEST  VSaiai (a,i,a1,i1) i1
         etemp = R2AA (a,i,a1,i1) * VSaiai (a,i,a1,i1)
         sum3 += etemp

      ENDPARDO  a, a1, i, i1

      PARDO  b, b1, j, j1

         REQUEST  R2AA   (b,j,b1,j1) j1
         REQUEST  VSbjbj (b,j,b1,j1) j1
         etemp = R2AA (b,j,b1,j1) * VSbjbj (b,j,b1,j1)
         sum4 += etemp

      ENDPARDO  b, b1, j, j1

      PARDO  a, i, b, j

         REQUEST  R2AB  (a,i,b,j) j
         REQUEST  Vaibj (a,i,b,j) j
         etemp = R2AB (a,i,b,j) * Vaibj (a,i,b,j)
         sum5 += etemp

      ENDPARDO  a, i, b, j

      EXECUTE  SERVER_BARRIER

      collective  etemp1 += sum1
      collective  etemp2 += sum2
      collective  etemp3 += sum3
      collective  etemp4 += sum4
      collective  etemp5 += sum5

      etemp3 *= 0.25
      etemp4 *= 0.25

      R0 += etemp1
      R0 += etemp2
      R0 += etemp3
      R0 += etemp4
      R0 += etemp5

      EXECUTE  SIP_BARRIER

      R0      = R0 / OMEGA
      OMEGA2  = TWO / THREE
      OMEGA2 *= OMEGA

      EXECUTE  PRINT_SCALAR  R0
#
#
#          ...ready!
#
#
      ENDPROC  R0_COMPUTE
#-------------------------------------------------------------------------


#-------------------------------------------------------------------------

#    -----------------------
      PROC  COMPUTE_DENSITY
#    -----------------------
#
      execute load_balance_on 
#
# VFL
      PARDO  a, a1

         taa(a,a1) = 0.0

         DO i
            GET           L1A (i,a1)
            taa1 (a,a1) = LT1A (a,i) * L1A (i,a1)
            taa(a,a1)  += taa1(a,a1)
         ENDDO i

         taa (a,a1)           *= R0
         PUT  DENS_VV_A (a,a1) = taa (a,a1)
#
#
#          ...Initialize intermediates...
#
#
         taa (a,a1)            = 0.0
         PUT  T2L2_VV_A (a,a1) = taa (a,a1)
         PUT  R2L2_VV_A (a,a1) = taa (a,a1)

      ENDPARDO  a, a1
#
      PARDO  i, a

         GET  L1A (i,a)

         tia  (i,a)  = L1A (i,a)
         tia  (i,a) *= R0
         tia2 (i,a)  = 0.0

         PUT  DENS_OV_A     (i,a) = tia (i,a)
         PUT  DENS_INT_OV_A (i,a) = tia2 (i,a)


      ENDPARDO  i, a


#VFL
      PARDO  i, i1
#
         tii(i,i1) = 0.0

         DO a

            GET  L1A (i1,a)

            tii1 (i,i1)  = LT1A (a,i) * L1A (i1,a)
            tii1 (i,i1) *= -1.0
            tii(i,i1) += tii1(i,i1)

         ENDDO a

            PUT  T1L1_OO_A (i,i1) = tii (i,i1)

            tii (i,i1) *= R0
            PUT  DENS_OO_A (i,i1) = tii (i,i1)

         tii (i,i1) = 0.0
#
#
#          ...Initialize intermediates...
#
#
         PUT  T2L2_OO_A (i,i1) = tii (i,i1)
         PUT  R2L2_OO_A (i,i1) = tii (i,i1)

      ENDPARDO  i, i1
#
      EXECUTE  SIP_BARRIER
#     
#                          -------------------
#                          -                 -
#                          -  ALPHA DENSITY  -
#                          -                 -
#                          -------------------
#
#
#    ===========================================================
#       COMPUTE  OCCUPIED - OCCUPIED  PIECE  TO  THE  DENSITY
#    ===========================================================
#    ALPHA                                                 ALPHA
#    -----                                                 -----
#
#
#
#          ...L  * T  ...
#              2    2
#
#
#           
      PARDO i, a, a1, i2
            
            REQUEST            T2AA (a,i,a1,i2) i
            tpppp(a,i2,a1,i) = T2AA (a,i,a1,i2)

            DO i1

               REQUEST  L2AA (i1,a,i2,a1) i1
            
              #tii (i,i1)  = L2AA (i1,a,i2,a1) * T2AA (a,i,a1,i2)
               tii1 (i1,i) = L2AA (i1,a,i2,a1) * tpppp (a,i2,a1,i)
               tii (i,i1)  = tii1(i1,i) 
               tii (i,i1) *= -0.5
               PUT  T2L2_OO_A (i,i1) += tii (i,i1)
         
               tii (i,i1) *= R0
               PUT  DENS_OO_A (i,i1) += tii (i,i1)

      
            ENDDO i1
      
      ENDPARDO i, a, a1, i2
#                          
      PARDO i, a, b, j

            REQUEST          T2AB (a,i,b,j) i
            tpppp(a,j,b,i) = T2AB(a,i,b,j)   

            DO i1

               REQUEST       L2AB (i1,a,j,b) i1

              #tii (i,i1)  = L2AB (i1,a,j,b) * T2AB (a,i,b,j)
               tii1(i1,i)  = L2AB (i1,a,j,b) * tpppp (a,j,b,i)
               tii (i,i1)  = tii1(i1,i)
               tii (i,i1) *= -1.0
               PUT  T2L2_OO_A (i,i1) += tii (i,i1)

               tii (i,i1) *= R0
               PUT  DENS_OO_A   (i,i1) += tii (i,i1)

            ENDDO i1

      ENDPARDO  i, a, b, j
#
#
#           ...The other piece to the right moment density...
#
#                 R1 * A1  +  R2 * A2  +  T1 * R1 * A2
#
      IF  LOGRIGHT == ONE

         PARDO  i, i1, a

               GET  R1A (a,i)
               GET  L1A (i1,a)

               tii  (i,i1)  = R1A (a,i) * L1A (i1,a)
               tii  (i,i1) *= -1.0

               PUT  DENS_OO_A (i,i1) += tii  (i,i1)
               PUT  R2L2_OO_A (i,i1) += tii  (i,i1)

         ENDPARDO  i, i1, a
#
#
#
         PARDO  a, a1, i2

            ALLOCATE  laiai4 (a,i2,a1,*)
            ALLOCATE  laiai5 (a,i2,a1,*)

            DO i

               REQUEST               R2AA (a,i,a1,i2) i
               laiai5 (a,i2,a1,i)  = R2AA (a,i,a1,i2)
               laiai5 (a,i2,a1,i) *= 0.5

               GET  R1A (a1,i2)
               laiai4 (a,i2,a1,i)  = laiai5 (a,i2,a1,i)
               taiai  (a,i2,a1,i)  = LT1A (a,i) ^ R1A (a1,i2)
               laiai4 (a,i2,a1,i) += taiai (a,i2,a1,i)

            ENDDO i

            DO i1

               REQUEST  L2AA (i1,a,i2,a1) i1

               DO i

                  tii1(i1,i)  = L2AA (i1,a,i2,a1) * laiai4 (a,i2,a1,i)
                  tii (i,i1)  = tii1(i1,i)
                  tii (i,i1) *= -1.0
                  PUT  DENS_OO_A (i,i1) += tii (i,i1)

                  tii1(i1,i)  = L2AA (i1,a,i2,a1) * laiai5 (a,i2,a1,i)
                  tii (i,i1)  = tii1(i1,i)
                  tii (i,i1) *= -1.0
                  PUT  R2L2_OO_A (i,i1) += tii (i,i1)

               ENDDO i

            ENDDO i1

            DEALLOCATE  laiai4 (a,i2,a1,*)
            DEALLOCATE  laiai5 (a,i2,a1,*)

         ENDPARDO  a, a1, i2
#
#
#          ...ALPHA-BETA summation...
#
#
         PARDO  a, b, j

            ALLOCATE  laibj4 (a,j,b,*)
            ALLOCATE  laibj5 (a,j,b,*)

            DO i

               REQUEST            R2AB (a,i,b,j) i
               GET                R1B (b,j)
               laibj5 (a,j,b,i) = R2AB(a,i,b,j)

               laibj4 (a,j,b,i)  = laibj5 (a,j,b,i)
               taibj  (a,j,b,i)  = LT1A (a,i) ^ R1B (b,j)
               laibj4 (a,j,b,i) += taibj (a,j,b,i)

            ENDDO i

            DO i1

               REQUEST  L2AB (i1,a,j,b) i1

               DO i

                  tii1(i1,i)  = L2AB (i1,a,j,b) * laibj4 (a,j,b,i)
                  tii (i,i1)  = tii1(i1,i)
                  tii (i,i1) *= -1.0
                  PUT  DENS_OO_A (i,i1) += tii (i,i1)

                  tii1(i1,i)  = L2AB (i1,a,j,b) * laibj5 (a,j,b,i)
                  tii (i,i1)  = tii1(i1,i)
                  tii (i,i1) *= -1.0
                  PUT  R2L2_OO_A (i,i1) += tii (i,i1)

               ENDDO i

            ENDDO i1

            DEALLOCATE  laibj5 (a,j,b,*)
            DEALLOCATE  laibj4 (a,j,b,*)

         ENDPARDO  a, b, j

      ENDIF  # LOGRIGHT == ONE #
#
#
#    ===========================================================
#       COMPUTE  VIRTUAL - VIRTUAL  PIECE  TO  THE  DENSITY
#    ===========================================================
#    ALPHA                                                 ALPHA
#    -----                                                 -----
#
#
#
      PARDO  a2, a1, i, i1

            REQUEST             L2AA (i,a2,i1,a1) a2
            tpppp(i,a1,i1,a2) = L2AA (i,a2,i1,a1)

            DO a

               REQUEST       T2AA (a,i,a1,i1) a

              #taa (a,a2)  = L2AA (i,a2,i1,a1) * T2AA (a,i,a1,i1)
               taa (a,a2)  = T2AA (a,i,a1,i1) * tpppp(i,a1,i1,a2)
               taa (a,a2) *= -0.50
               PUT  T2L2_VV_A (a,a2) += taa (a,a2)

               taa (a,a2) *= R0
               taa (a,a2) *= -1.0
               PUT  DENS_VV_A (a,a2) += taa (a,a2)

            ENDDO a

      ENDPARDO  a2, a1, i, i1
#
#
#
      PARDO  a2, b, j, i

            REQUEST           L2AB (i,a2,j,b) a2
            tpppp(i,b,j,a2) = L2AB (i,a2,j,b)

            DO a

               REQUEST  T2AB (a,i,b,j) a

              #taa (a,a2)  = L2AB (i,a2,j,b) * T2AB (a,i,b,j)
               taa (a,a2)  = T2AB (a,i,b,j) * tpppp(i,b,j,a2)
               taa (a,a2) *= -1.0
               PUT  T2L2_VV_A (a,a2) += taa (a,a2)

               taa (a,a2) *= R0
               taa (a,a2) *= -1.0
               PUT  DENS_VV_A (a,a2) += taa (a,a2)

            ENDDO a

      ENDPARDO  a2, b, j, i
#
#
      IF  LOGRIGHT == ONE

         PARDO  a, a1, i

               GET  R1A (a,i)
               GET  L1A (i,a1)

               taa (a,a1)  = R1A (a,i) * L1A (i,a1)
               PUT  DENS_VV_A (a,a1) += taa (a,a1)

               taa (a,a1) *= -1.0
               PUT  R2L2_VV_A (a,a1) += taa (a,a1)

         ENDPARDO  a, a1, i
#
         PARDO  a1, i, i1

            ALLOCATE  laiai  (*,i,a1,i1)
            ALLOCATE  laiai2 (*,i,a1,i1)

            GET  R1A (a1,i1)

            DO a

               REQUEST               R2AA (a,i,a1,i1) a

               taiai  (a,i,a1,i1)  = LT1A (a,i) ^ R1A (a1,i1)
               laiai  (a,i,a1,i1)  = R2AA (a,i,a1,i1)
               laiai  (a,i,a1,i1) *= 0.5
               laiai2 (a,i,a1,i1)  = laiai (a,i,a1,i1)
               laiai  (a,i,a1,i1) += taiai (a,i,a1,i1)

            ENDDO a

            DO a2

               REQUEST              L2AA (i,a2,i1,a1) a2
               tpppp(i,a1,i1,a2) =  L2AA (i,a2,i1,a1)

               DO a

                 #taa  (a,a2) = L2AA (i,a2,i1,a1) * laiai  (a,i,a1,i1)
                  taa  (a,a2) = laiai  (a,i,a1,i1) * tpppp(i,a1,i1,a2)
                  PUT  DENS_VV_A (a,a2) += taa  (a,a2)

               ENDDO a

               DO a

                 #taa2 (a,a2)  = L2AA (i,a2,i1,a1) * laiai2 (a,i,a1,i1)
                  taa2 (a,a2)  = laiai2 (a,i,a1,i1) * tpppp(i,a1,i1,a2)
                  taa2 (a,a2) *= -1.0
                  PUT  R2L2_VV_A (a,a2) += taa2 (a,a2)

               ENDDO a

            ENDDO a2

            DEALLOCATE  laiai  (*,i,a1,i1)
            DEALLOCATE  laiai2 (*,i,a1,i1)

         ENDPARDO  a1, i, i1
#
#
         PARDO  b, j, i

            ALLOCATE  laibj  (*,i,b,j)
            ALLOCATE  laibj2 (*,i,b,j)

            GET  R1B (b,j)

            DO a

               REQUEST            R2AB (a,i,b,j) a
               laibj2 (a,i,b,j) = R2AB (a,i,b,j)

               laibj (a,i,b,j)  = laibj2 (a,i,b,j)
               taibj (a,i,b,j)  = LT1A (a,i) ^ R1B (b,j)
               laibj (a,i,b,j) += taibj (a,i,b,j)

            ENDDO a

            DO a2

               REQUEST            L2AB (i,a2,j,b) a2
               tpppp(i,b,j,a2) =  L2AB (i,a2,j,b)

               DO a

                 #taa  (a,a2) = L2AB (i,a2,j,b) * laibj  (a,i,b,j)
                  taa  (a,a2) = laibj  (a,i,b,j) * tpppp(i,b,j,a2)
                  PUT  DENS_VV_A (a,a2) += taa  (a,a2)

                 #taa2 (a,a2)  = L2AB (i,a2,j,b) * laibj2 (a,i,b,j)
                  taa2 (a,a2)  = laibj2 (a,i,b,j) * tpppp(i,b,j,a2)
                  taa2 (a,a2) *= -1.0
                  PUT  R2L2_VV_A (a,a2) += taa2 (a,a2)

               ENDDO a

            ENDDO a2

            DEALLOCATE  laibj  (*,i,b,j)
            DEALLOCATE  laibj2 (*,i,b,j)

         ENDPARDO  b, j, i

      ENDIF  # LOGRIGHT == ONE #

#
#
#          ------------------------------------------------
#                          !!! IMPORTANT !!!
#          ------------------------------------------------
#
#           The following Occupied - Virtual code computes
#           both the alpha and beta pieces since one needs
#           both to compute the Virtual - Occupied piece.
#
#          ------------------------------------------------
#          ------------------------------------------------
#
#
#    ===========================================================
#       COMPUTE  OCCUPIED - VIRTUAL  PIECE  TO  THE  DENSITY
#    ===========================================================
#    ALPHA                                                 ALPHA
#    -----                                                 -----
#
#
      IF  LOGRIGHT == ONE

         PARDO  i, a, a1, i1

            REQUEST                     L2AA (i,a,i1,a1) i1
            GET                         R1A  (a1,i1)
            tia (i,a)                 = L2AA (i,a,i1,a1) * R1A (a1,i1)
            PUT  DENS_OV_A     (i,a) += tia (i,a)
            PUT  DENS_INT_OV_A (i,a) += tia (i,a)

         ENDPARDO  i, a, a1, i1

         PARDO  i, a, b, j

            REQUEST                     L2AB (i,a,j,b) j
            GET                         R1B  (b,j)
            tia (i,a)                 = L2AB (i,a,j,b) * R1B (b,j)
            PUT  DENS_OV_A     (i,a) += tia (i,a)
            PUT  DENS_INT_OV_A (i,a) += tia (i,a)

         ENDPARDO i, a, b, j

      ENDIF  # LOGRIGHT == ONE #
#
#
      EXECUTE  SERVER_BARRIER
#
#
#
#    ===========================================================
#       COMPUTE  VIRTUAL - OCCUPIED  PIECE  TO  THE  DENSITY
#    ===========================================================
#    ALPHA                                                 ALPHA
#    -----                                                 -----
#
#
#          ...Evaluate the R0 contribution...
#
#
# VFL 
      PARDO  a, i

         tai1(a,i) = 0.0

         DO i1

            GET  T1L1_OO_A (i,i1)
            GET  T2L2_OO_A (i,i1)

            tii (i,i1)  = T1L1_OO_A (i,i1)
            tii (i,i1) += T2L2_OO_A (i,i1)

            tai (a,i)   = LT1A (a,i1) * tii (i,i1)

            tai1(a,i) += tai(a,i)

         ENDDO i1

         IF GROUNDSTATE == ONE
            tai1 (a,i)  += LT1A (a,i)
         ENDIF

         tai1 (a,i)  *= R0
         PUT  DENS_VO_A (a,i) = tai1 (a,i)

      ENDPARDO  a, i

      EXECUTE  SIP_BARRIER
#
#
      PARDO  a, a1, i

            GET                     T2L2_VV_A (a,a1)
            tai (a,i)             = T2L2_VV_A (a,a1) * LT1A (a1,i)
            tai (a,i)            *= R0
            PUT  DENS_VO_A (a,i) += tai (a,i)

      ENDPARDO  a, a1, i
#
#
      PARDO  a1, i1

         GET  L1A (i1,a1)

         DO a
            DO i
               REQUEST                 T2AA (a,i,a1,i1) i
               tai  (a,i)            = T2AA (a,i,a1,i1) * L1A (i1,a1)
               tai  (a,i)           *= R0
               PUT  DENS_VO_A (a,i) += tai (a,i)
            ENDDO i
         ENDDO a

      ENDPARDO  a1, i1

      PARDO  b, j

         GET  L1B (j,b)

         DO a
            DO i
               REQUEST                 T2AB (a,i,b,j) i
               tai  (a,i)            = T2AB (a,i,b,j) * L1B (j,b)
               tai  (a,i)           *= R0
               PUT  DENS_VO_A (a,i) += tai (a,i)
            ENDDO i
         ENDDO a

      ENDPARDO  b, j

      IF LOGRIGHT == ONE

       PARDO  a1, i1

            GET  DENS_INT_OV_A (i1,a1)
            tia (i1,a1) = DENS_INT_OV_A (i1,a1)

            DO a
               DO i
                  REQUEST  T2AA (a,i,a1,i1) i
                  tai (a,i) = T2AA (a,i,a1,i1) * tia (i1,a1)
                  PUT  DENS_VO_A (a,i) += tai (a,i)
               ENDDO i
            ENDDO a

         ENDPARDO  a1, i1

         PARDO  b, j

            GET  DENS_INT_OV_A (j,b)
            tjb (j,b) = DENS_INT_OV_A (j,b)

            DO a
               DO i
                  REQUEST  T2AB (a,i,b,j) i
                  tai (a,i)    = T2AB (a,i,b,j) * tjb (j,b)
                  PUT  DENS_VO_A (a,i) += tai (a,i)
               ENDDO i
            ENDDO a

         ENDPARDO  b, j
#
         PARDO  i, i1

            tii(i,i1) = 0.0
            DO a1
               GET           DENS_INT_OV_A (i1,a1)
               tia (i1,a1) = DENS_INT_OV_A (i1,a1)
               tii1 (i,i1) = LT1A (a1,i) * tia (i1,a1)
               tii(i,i1) += tii1(i,i1)
            ENDDO a1

               DO a
                  tai (a,i)             = LT1A (a,i1) * tii (i,i1)
                  tai (a,i)            *= -1.0
                  PUT  DENS_VO_A (a,i) += tai (a,i)
               ENDDO a

         ENDPARDO  i, i1
#
         PARDO  a1, i1

            GET  L1A (i1,a1)

            DO a
               DO i
                  REQUEST                 R2AA (a,i,a1,i1) i
                  tai (a,i)             = R2AA (a,i,a1,i1) * L1A (i1,a1)
                  PUT  DENS_VO_A (a,i) += tai (a,i)
               ENDDO i
            ENDDO a

         ENDPARDO  a1, i1

         PARDO  b, j

            GET  L1B (j,b)

            DO a
               DO i
                  REQUEST                 R2AB (a,i,b,j) i
                  tai (a,i)             = R2AB (a,i,b,j) * L1B (j,b)
                  PUT  DENS_VO_A (a,i) += tai (a,i)
               ENDDO i
            ENDDO a

         ENDPARDO  b, j
#
         PARDO  i, a, a1

               GET  R2L2_VV_A (a,a1)
               GET  T2L2_VV_A (a,a1)
               GET  R1A (a1,i)
               tai  (a,i)  = R2L2_VV_A (a,a1) * LT1A (a1,i)
               tai2 (a,i)  = T2L2_VV_A (a,a1) * R1A (a1,i)
               tai  (a,i) += tai2 (a,i)
               PUT  DENS_VO_A (a,i) += tai (a,i)

         ENDPARDO i, a, a1
#
         PARDO i, a, i1

               GET  R1A (a,i1)
               GET  R2L2_OO_A (i,i1)
               GET  T2L2_OO_A (i,i1)
               tai  (a,i)  = LT1A (a,i1) * R2L2_OO_A (i,i1)
               tai2 (a,i)  = R1A (a,i1) * T2L2_OO_A (i,i1)
               tai  (a,i) += tai2 (a,i)
               PUT  DENS_VO_A (a,i) += tai (a,i)

         ENDPARDO  i, a, i1
#
         IF EXCITESTATE == ZERO
            PARDO  a, i
               GET  R1A (a,i)
               tai (a,i) = R1A (a,i)
               PUT  DENS_VO_A (a,i) += tai (a,i)
            ENDPARDO  a, i
         ENDIF

         IF EXCITESTATE == ONE
            etemp = 1.0 / LRNORM
            PARDO  a, i
               tai (a,i)  = LT1A (a,i)
               tai (a,i) *= etemp
               PUT  DENS_VO_A (a,i) += tai (a,i)
            ENDPARDO  a, i
         ENDIF


      ENDIF  # LOGRIGHT = ONE #
#
      execute load_balance_off 
      EXECUTE  SERVER_BARRIER
#
      ENDPROC  COMPUTE_DENSITY
#-------------------------------------------------------------------------

#-------------------------------------------------------------------------
#
#    ---------------------------
      PROC  COMPUTE_DENSITY_OLD
#    ---------------------------
#
      execute load_balance_on 
#
# VFL 
      PARDO  a, a1

         taa(a,a1) = 0.0 

         DO i
            GET           L1A (i,a1)
            taa1 (a,a1) = LT1A (a,i) * L1A (i,a1)
            taa(a,a1)  += taa1(a,a1) 
         ENDDO i

         taa (a,a1)           *= R0
         PUT  DENS_VV_A (a,a1) = taa (a,a1)
#
#
#          ...Initialize intermediates...
#
#
         taa (a,a1)            = 0.0
         PUT  T2L2_VV_A (a,a1) = taa (a,a1)
         PUT  R2L2_VV_A (a,a1) = taa (a,a1)
 
      ENDPARDO  a, a1
#
# VFL 
      PARDO  b, b1

         tbb(b,b1) = 0.0 

         DO j
            GET           L1B (j,b1)
            tbb1 (b,b1) = LT1A (b,j) * L1B (j,b1)
            tbb(b,b1)  += tbb1(b,b1) 
         ENDDO j

         tbb (b,b1)           *= R0
         PUT  DENS_VV_B (b,b1) = tbb (b,b1)
#
#
#          ...Initialize the intermediates...
#
#
         tbb (b,b1)            = 0.0
         PUT  T2L2_VV_B (b,b1) = tbb (b,b1)
         PUT  R2L2_VV_B (b,b1) = tbb (b,b1)

      ENDPARDO  b, b1

      PARDO  i, a

         GET  L1A (i,a)

         tia  (i,a)  = L1A (i,a)
         tia  (i,a) *= R0
         tia2 (i,a)  = 0.0

         PUT  DENS_OV_A     (i,a) = tia (i,a)
         PUT  DENS_INT_OV_A (i,a) = tia2 (i,a)


      ENDPARDO  i, a

      PARDO  j, b
            
         GET  L1B (j,b) 

         tjb  (j,b)  = L1B (j,b)
         tjb  (j,b) *= R0 
         tjb2 (j,b)  = 0.0

         PUT  DENS_OV_B     (j,b) = tjb  (j,b)
         PUT  DENS_INT_OV_B (j,b) = tjb2 (j,b)

      ENDPARDO  j, b

         
#VFL 
      PARDO  i, i1
#
         tii(i,i1) = 0.0 

         DO a

            GET  L1A (i1,a)

            tii1 (i,i1)  = LT1A (a,i) * L1A (i1,a)
            tii1 (i,i1) *= -1.0
            tii(i,i1) += tii1(i,i1) 

         ENDDO a

            PUT  T1L1_OO_A (i,i1) = tii (i,i1)

            tii (i,i1) *= R0
            PUT  DENS_OO_A (i,i1) = tii (i,i1)

         tii (i,i1) = 0.0
#
#
#          ...Initialize intermediates...
#
#
         PUT  T2L2_OO_A (i,i1) = tii (i,i1)
         PUT  R2L2_OO_A (i,i1) = tii (i,i1)

      ENDPARDO  i, i1

#VFL 
      PARDO  j, j1
#
         tjj(j,j1) = 0.0 

         DO b

            GET  T1B (b,j)
            GET  L1B (j1,b)

            tjj1 (j,j1)  = T1B (b,j) * L1B (j1,b)
            tjj1 (j,j1) *= -1.0
            tjj(j,j1) += tjj1(j,j1) 

         ENDDO b
 
            PUT  T1L1_OO_B (j,j1) = tjj (j,j1)

            tjj (j,j1) *= R0
            PUT  DENS_OO_B (j,j1) = tjj (j,j1)
#
#
#          ...Initialize the intermediates...
#
#
         tjj (j,j1) = 0.0
         PUT  T2L2_OO_B (j,j1) = tjj (j,j1)
         PUT  R2L2_OO_B (j,j1) = tjj (j,j1)

      ENDPARDO  j, j1
#
      EXECUTE  SIP_BARRIER
#     
#                          -------------------
#                          -                 -
#                          -  ALPHA DENSITY  -
#                          -                 -
#                          -------------------
#
#
#    ===========================================================
#       COMPUTE  OCCUPIED - OCCUPIED  PIECE  TO  THE  DENSITY
#    ===========================================================
#    ALPHA                                                 ALPHA
#    -----                                                 -----
#
#
#
#          ...L  * T  ...
#              2    2
#
#
      PARDO i, a, a1, i2

            REQUEST            T2AA (a,i,a1,i2) i
            tpppp(a,i2,a1,i) = T2AA (a,i,a1,i2)  
 
            DO i1

               REQUEST  L2AA (i1,a,i2,a1) i1

              #tii (i,i1)  = L2AA (i1,a,i2,a1) * T2AA (a,i,a1,i2)
               tii1 (i1,i) = L2AA (i1,a,i2,a1) * tpppp (a,i2,a1,i)
               tii (i,i1)  = tii1(i1,i) 
               tii (i,i1) *= -0.5
               PUT  T2L2_OO_A (i,i1) += tii (i,i1)

               tii (i,i1) *= R0
               PUT  DENS_OO_A (i,i1) += tii (i,i1)


            ENDDO i1

      ENDPARDO i, a, a1, i2
#
#
#         ...ALPHA-BETA summation...
#
#
      PARDO i, a, b, j

            REQUEST          T2AB (a,i,b,j) i
            tpppp(a,j,b,i) = T2AB(a,i,b,j) 

            DO i1

               REQUEST       L2AB (i1,a,j,b) i1

              #tii (i,i1)  = L2AB (i1,a,j,b) * T2AB (a,i,b,j)
               tii1(i1,i)  = L2AB (i1,a,j,b) * tpppp (a,j,b,i)
               tii (i,i1)  = tii1(i1,i) 
               tii (i,i1) *= -1.0
               PUT  T2L2_OO_A (i,i1) += tii (i,i1)

               tii (i,i1) *= R0
               PUT  DENS_OO_A   (i,i1) += tii (i,i1)

            ENDDO i1

      ENDPARDO  i, a, b, j
#
#
#           ...The other piece to the right moment density...
#
#                 R1 * A1  +  R2 * A2  +  T1 * R1 * A2
#
      IF  LOGRIGHT == ONE

         PARDO  i, i1, a

               GET  R1A (a,i)
               GET  L1A (i1,a)

               tii  (i,i1)  = R1A (a,i) * L1A (i1,a)
               tii  (i,i1) *= -1.0

               PUT  DENS_OO_A (i,i1) += tii  (i,i1)
               PUT  R2L2_OO_A (i,i1) += tii  (i,i1)

         ENDPARDO  i, i1, a 
#
#
#
         PARDO  a, a1, i2

            ALLOCATE  laiai4 (a,i2,a1,*)
            ALLOCATE  laiai5 (a,i2,a1,*)

            DO i

               REQUEST               R2AA (a,i,a1,i2) i
               laiai5 (a,i2,a1,i)  = R2AA (a,i,a1,i2)
               laiai5 (a,i2,a1,i) *= 0.5
           
               GET  R1A (a1,i2)
               laiai4 (a,i2,a1,i)  = laiai5 (a,i2,a1,i)
               taiai  (a,i2,a1,i)  = LT1A (a,i) ^ R1A (a1,i2)
               laiai4 (a,i2,a1,i) += taiai (a,i2,a1,i)

            ENDDO i

            DO i1

               REQUEST  L2AA (i1,a,i2,a1) i1

               DO i

                  tii1(i1,i)  = L2AA (i1,a,i2,a1) * laiai4 (a,i2,a1,i)
                  tii (i,i1)  = tii1(i1,i)  
                  tii (i,i1) *= -1.0
                  PUT  DENS_OO_A (i,i1) += tii (i,i1)

                  tii1(i1,i)  = L2AA (i1,a,i2,a1) * laiai5 (a,i2,a1,i)
                  tii (i,i1)  = tii1(i1,i)  
                  tii (i,i1) *= -1.0
                  PUT  R2L2_OO_A (i,i1) += tii (i,i1)

               ENDDO i

            ENDDO i1

            DEALLOCATE  laiai4 (a,i2,a1,*)
            DEALLOCATE  laiai5 (a,i2,a1,*)

         ENDPARDO  a, a1, i2
#
#
#          ...ALPHA-BETA summation...
#
#
         PARDO  a, b, j

            ALLOCATE  laibj4 (a,j,b,*)
            ALLOCATE  laibj5 (a,j,b,*)

            DO i
 
               REQUEST            R2AB (a,i,b,j) i
               GET                R1B (b,j)
               laibj5 (a,j,b,i) = R2AB(a,i,b,j)

               laibj4 (a,j,b,i)  = laibj5 (a,j,b,i)
               taibj  (a,j,b,i)  = LT1A (a,i) ^ R1B (b,j)
               laibj4 (a,j,b,i) += taibj (a,j,b,i)

            ENDDO i

            DO i1

               REQUEST  L2AB (i1,a,j,b) i1

               DO i

                  tii1(i1,i)  = L2AB (i1,a,j,b) * laibj4 (a,j,b,i)
                  tii (i,i1)  = tii1(i1,i)  
                  tii (i,i1) *= -1.0
                  PUT  DENS_OO_A (i,i1) += tii (i,i1)

                  tii1(i1,i)  = L2AB (i1,a,j,b) * laibj5 (a,j,b,i)
                  tii (i,i1)  = tii1(i1,i)  
                  tii (i,i1) *= -1.0
                  PUT  R2L2_OO_A (i,i1) += tii (i,i1)

               ENDDO i

            ENDDO i1

            DEALLOCATE  laibj5 (a,j,b,*)
            DEALLOCATE  laibj4 (a,j,b,*)

         ENDPARDO  a, b, j

      ENDIF  # LOGRIGHT == ONE #
#
#
#
#    ===========================================================
#       COMPUTE  VIRTUAL - VIRTUAL  PIECE  TO  THE  DENSITY
#    ===========================================================
#    ALPHA                                                 ALPHA
#    -----                                                 -----
#
#
#
#
#    ...The following is the T1 * L1 piece...
#
#
#          ...This is the T2 * A2 piece
#
#
      PARDO  a2, a1, i, i1

            REQUEST             L2AA (i,a2,i1,a1) a2
            tpppp(i,a1,i1,a2) = L2AA (i,a2,i1,a1) 

            DO a

               REQUEST       T2AA (a,i,a1,i1) a

              #taa (a,a2)  = L2AA (i,a2,i1,a1) * T2AA (a,i,a1,i1)
               taa (a,a2)  = T2AA (a,i,a1,i1) * tpppp(i,a1,i1,a2)  
               taa (a,a2) *= -0.50
               PUT  T2L2_VV_A (a,a2) += taa (a,a2)

               taa (a,a2) *= R0
               taa (a,a2) *= -1.0
               PUT  DENS_VV_A (a,a2) += taa (a,a2)

            ENDDO a

      ENDPARDO  a2, a1, i, i1
#
#
#          ...ALPHA-BETA summation...
#
#
      PARDO  a2, b, j, i

            REQUEST           L2AB (i,a2,j,b) a2
            tpppp(i,b,j,a2) = L2AB (i,a2,j,b) 

            DO a

               REQUEST  T2AB (a,i,b,j) a

              #taa (a,a2)  = L2AB (i,a2,j,b) * T2AB (a,i,b,j)
               taa (a,a2)  = T2AB (a,i,b,j) * tpppp(i,b,j,a2) 
               taa (a,a2) *= -1.0
               PUT  T2L2_VV_A (a,a2) += taa (a,a2)

               taa (a,a2) *= R0
               taa (a,a2) *= -1.0
               PUT  DENS_VV_A (a,a2) += taa (a,a2)

            ENDDO a

      ENDPARDO  a2, b, j, i
#
#
#           ...The other piece to the right moment density...
#
#                 R1 * A1  +  R2 * A2  +  T1 * R1 * A2
#
      IF  LOGRIGHT == ONE

         PARDO  a, a1, i 

               GET  R1A (a,i)
               GET  L1A (i,a1)

               taa (a,a1)  = R1A (a,i) * L1A (i,a1)
               PUT  DENS_VV_A (a,a1) += taa (a,a1)

               taa (a,a1) *= -1.0
               PUT  R2L2_VV_A (a,a1) += taa (a,a1)

         ENDPARDO  a, a1, i 
#
         PARDO  a1, i, i1

            ALLOCATE  laiai  (*,i,a1,i1)
            ALLOCATE  laiai2 (*,i,a1,i1)

            GET  R1A (a1,i1)

            DO a

               REQUEST               R2AA (a,i,a1,i1) a

               taiai  (a,i,a1,i1)  = LT1A (a,i) ^ R1A (a1,i1)
               laiai  (a,i,a1,i1)  = R2AA (a,i,a1,i1)
               laiai  (a,i,a1,i1) *= 0.5
               laiai2 (a,i,a1,i1)  = laiai (a,i,a1,i1)
               laiai  (a,i,a1,i1) += taiai (a,i,a1,i1)

            ENDDO a

            DO a2

               REQUEST              L2AA (i,a2,i1,a1) a2
               tpppp(i,a1,i1,a2) =  L2AA (i,a2,i1,a1) 

               DO a

                 #taa  (a,a2) = L2AA (i,a2,i1,a1) * laiai  (a,i,a1,i1)
                  taa  (a,a2) = laiai  (a,i,a1,i1) * tpppp(i,a1,i1,a2)  
                  PUT  DENS_VV_A (a,a2) += taa  (a,a2)

               ENDDO a

               DO a

                 #taa2 (a,a2)  = L2AA (i,a2,i1,a1) * laiai2 (a,i,a1,i1)
                  taa2 (a,a2)  = laiai2 (a,i,a1,i1) * tpppp(i,a1,i1,a2)
                  taa2 (a,a2) *= -1.0
                  PUT  R2L2_VV_A (a,a2) += taa2 (a,a2)

               ENDDO a

            ENDDO a2

            DEALLOCATE  laiai  (*,i,a1,i1)
            DEALLOCATE  laiai2 (*,i,a1,i1)

         ENDPARDO  a1, i, i1
#
#
#          ...ALPHA-BETA summation...
#
#
         PARDO  b, j, i

            ALLOCATE  laibj  (*,i,b,j)
            ALLOCATE  laibj2 (*,i,b,j)

            GET  R1B (b,j)

            DO a

               REQUEST            R2AB (a,i,b,j) a
               laibj2 (a,i,b,j) = R2AB (a,i,b,j)

               laibj (a,i,b,j)  = laibj2 (a,i,b,j)
               taibj (a,i,b,j)  = LT1A (a,i) ^ R1B (b,j)
               laibj (a,i,b,j) += taibj (a,i,b,j)

            ENDDO a

            DO a2

               REQUEST            L2AB (i,a2,j,b) a2
               tpppp(i,b,j,a2) =  L2AB (i,a2,j,b) 

               DO a

                 #taa  (a,a2) = L2AB (i,a2,j,b) * laibj  (a,i,b,j)
                  taa  (a,a2) = laibj  (a,i,b,j) * tpppp(i,b,j,a2) 
                  PUT  DENS_VV_A (a,a2) += taa  (a,a2)

                 #taa2 (a,a2)  = L2AB (i,a2,j,b) * laibj2 (a,i,b,j)
                  taa2 (a,a2)  = laibj2 (a,i,b,j) * tpppp(i,b,j,a2) 
                  taa2 (a,a2) *= -1.0
                  PUT  R2L2_VV_A (a,a2) += taa2 (a,a2)

               ENDDO a

            ENDDO a2

            DEALLOCATE  laibj  (*,i,b,j)
            DEALLOCATE  laibj2 (*,i,b,j)

         ENDPARDO  b, j, i

      ENDIF  # LOGRIGHT == ONE #
#
#
#
#          ------------------------------------------------
#                          !!! IMPORTANT !!!
#          ------------------------------------------------
#
#           The following Occupied - Virtual code computes
#           both the alpha and beta pieces since one needs
#           both to compute the Virtual - Occupied piece.
#
#          ------------------------------------------------
#          ------------------------------------------------
#
#
#    ===========================================================
#       COMPUTE  OCCUPIED - VIRTUAL  PIECE  TO  THE  DENSITY
#    ===========================================================
#    ALPHA                                                 ALPHA
#    -----                                                 -----
#
#
#
#
#
      IF  LOGRIGHT == ONE

         PARDO  i, a, a1, i1

            REQUEST                     L2AA (i,a,i1,a1) i1
            GET                         R1A  (a1,i1)
            tia (i,a)                 = L2AA (i,a,i1,a1) * R1A (a1,i1)
            PUT  DENS_OV_A     (i,a) += tia (i,a)
            PUT  DENS_INT_OV_A (i,a) += tia (i,a)
    
         ENDPARDO  i, a, a1, i1

         PARDO  i, a, b, j

            REQUEST                     L2AB (i,a,j,b) j
            GET                         R1B  (b,j)
            tia (i,a)                 = L2AB (i,a,j,b) * R1B (b,j)
            PUT  DENS_OV_A     (i,a) += tia (i,a)
            PUT  DENS_INT_OV_A (i,a) += tia (i,a)

         ENDPARDO i, a, b, j

      ENDIF  # LOGRIGHT == ONE #
#
#
#
#    ===========================================================
#       COMPUTE  OCCUPIED - VIRTUAL  PIECE  TO  THE  DENSITY
#    ===========================================================
#    BETA                                                   BETA
#    ----                                                   ----
#

      IF  LOGRIGHT == ONE

         PARDO  j, b

            tjb(j,b) = 0.0 

            DO b1
               DO j1

                  REQUEST                     L2BB (j,b,j1,b1) j1
                  GET                         R1B (b1,j1)
                  tjb1 (j,b)                = L2BB (j,b,j1,b1) * R1B (b1,j1)
                  tjb(j,b)                 += tjb1(j,b) 

               ENDDO j1
            ENDDO b1

            PUT  DENS_OV_B     (j,b) += tjb (j,b)
            PUT  DENS_INT_OV_B (j,b) += tjb (j,b)

         ENDPARDO  j, b

         PARDO  j, b

            tjb(j,b) = 0.0 

            DO a
               DO i

                  REQUEST      L2AB (i,a,j,b) i
                  GET          R1A (a,i)
                  tjb1 (j,b) = L2AB (i,a,j,b) * R1A (a,i)
                  tjb(j,b)  += tjb1(j,b) 

               ENDDO i
            ENDDO a

            PUT  DENS_OV_B     (j,b) += tjb (j,b)
            PUT  DENS_INT_OV_B (j,b) += tjb (j,b)

         ENDPARDO  j, b

      ENDIF  # LOGRIGHT == ONE #

      EXECUTE  SERVER_BARRIER
#
#
#
#    ===========================================================
#       COMPUTE  VIRTUAL - OCCUPIED  PIECE  TO  THE  DENSITY
#    ===========================================================
#    ALPHA                                                 ALPHA
#    -----                                                 -----
#
#
#          ...Evaluate the R0 contribution...
#
#
# VFL 
      PARDO  a, i

         tai1(a,i) = 0.0 

         DO i1 

            GET  T1L1_OO_A (i,i1)
            GET  T2L2_OO_A (i,i1)

            tii (i,i1)  = T1L1_OO_A (i,i1)
            tii (i,i1) += T2L2_OO_A (i,i1)

            tai (a,i)   = LT1A (a,i1) * tii (i,i1)

            tai1(a,i) += tai(a,i) 

         ENDDO i1 

         IF GROUNDSTATE == ONE
            tai1 (a,i)  += LT1A (a,i)
         ENDIF

         tai1 (a,i)  *= R0
         PUT  DENS_VO_A (a,i) = tai1 (a,i)

      ENDPARDO  a, i 

      EXECUTE  SIP_BARRIER
#
#
      PARDO  a, a1, i

            GET                     T2L2_VV_A (a,a1)
            tai (a,i)             = T2L2_VV_A (a,a1) * LT1A (a1,i)
            tai (a,i)            *= R0
            PUT  DENS_VO_A (a,i) += tai (a,i)

      ENDPARDO  a, a1, i
#
#
      PARDO  a1, i1

         GET  L1A (i1,a1)

         DO a
            DO i
               REQUEST                 T2AA (a,i,a1,i1) i
               tai  (a,i)            = T2AA (a,i,a1,i1) * L1A (i1,a1)
               tai  (a,i)           *= R0
               PUT  DENS_VO_A (a,i) += tai (a,i)
            ENDDO i
         ENDDO a

      ENDPARDO  a1, i1

      PARDO  b, j

         GET  L1B (j,b)

         DO a
            DO i
               REQUEST                 T2AB (a,i,b,j) i
               tai  (a,i)            = T2AB (a,i,b,j) * L1B (j,b)
               tai  (a,i)           *= R0
               PUT  DENS_VO_A (a,i) += tai (a,i)
            ENDDO i
         ENDDO a

      ENDPARDO  b, j
#
#
      IF LOGRIGHT == ONE

       PARDO  a1, i1

            GET  DENS_INT_OV_A (i1,a1)
            tia (i1,a1) = DENS_INT_OV_A (i1,a1)

            DO a
               DO i
                  REQUEST  T2AA (a,i,a1,i1) i
                  tai (a,i) = T2AA (a,i,a1,i1) * tia (i1,a1)
                  PUT  DENS_VO_A (a,i) += tai (a,i)
               ENDDO i
            ENDDO a

         ENDPARDO  a1, i1

         PARDO  b, j
      
            GET  DENS_INT_OV_B (j,b)
            tjb (j,b) = DENS_INT_OV_B (j,b)
   
            DO a
               DO i
                  REQUEST  T2AB (a,i,b,j) i
                  tai (a,i)    = T2AB (a,i,b,j) * tjb (j,b)
                  PUT  DENS_VO_A (a,i) += tai (a,i)
               ENDDO i
            ENDDO a
            
         ENDPARDO  b, j
#
         PARDO  i, i1

            tii(i,i1) = 0.0 
            DO a1  
               GET           DENS_INT_OV_A (i1,a1)
               tia (i1,a1) = DENS_INT_OV_A (i1,a1)
               tii1 (i,i1) = LT1A (a1,i) * tia (i1,a1)
               tii(i,i1) += tii1(i,i1) 
            ENDDO a1  

               DO a
                  tai (a,i)             = LT1A (a,i1) * tii (i,i1)
                  tai (a,i)            *= -1.0
                  PUT  DENS_VO_A (a,i) += tai (a,i)
               ENDDO a

         ENDPARDO  i, i1
#
         PARDO  a1, i1

            GET  L1A (i1,a1)

            DO a
               DO i
                  REQUEST                 R2AA (a,i,a1,i1) i
                  tai (a,i)             = R2AA (a,i,a1,i1) * L1A (i1,a1)
                  PUT  DENS_VO_A (a,i) += tai (a,i)
               ENDDO i
            ENDDO a

         ENDPARDO  a1, i1

         PARDO  b, j

            GET  L1B (j,b)

            DO a
               DO i
                  REQUEST                 R2AB (a,i,b,j) i
                  tai (a,i)             = R2AB (a,i,b,j) * L1B (j,b)
                  PUT  DENS_VO_A (a,i) += tai (a,i)
               ENDDO i
            ENDDO a

         ENDPARDO  b, j
# 
         PARDO  i, a, a1 

               GET  R2L2_VV_A (a,a1)
               GET  T2L2_VV_A (a,a1)
               GET  R1A (a1,i)
               tai  (a,i)  = R2L2_VV_A (a,a1) * LT1A (a1,i)
               tai2 (a,i)  = T2L2_VV_A (a,a1) * R1A (a1,i)
               tai  (a,i) += tai2 (a,i)
               PUT  DENS_VO_A (a,i) += tai (a,i)

         ENDPARDO i, a, a1  
#
         PARDO i, a, i1  

               GET  R1A (a,i1)
               GET  R2L2_OO_A (i,i1)
               GET  T2L2_OO_A (i,i1)
               tai  (a,i)  = LT1A (a,i1) * R2L2_OO_A (i,i1)
               tai2 (a,i)  = R1A (a,i1) * T2L2_OO_A (i,i1)
               tai  (a,i) += tai2 (a,i)
               PUT  DENS_VO_A (a,i) += tai (a,i)

         ENDPARDO  i, a, i1  
#
         IF EXCITESTATE == ZERO
            PARDO  a, i
               GET  R1A (a,i)
               tai (a,i) = R1A (a,i)
               PUT  DENS_VO_A (a,i) += tai (a,i)
            ENDPARDO  a, i
         ENDIF

         IF EXCITESTATE == ONE
            PARDO  a, i
               tai (a,i) = LT1A (a,i)
               PUT  DENS_VO_A (a,i) += tai (a,i)
            ENDPARDO  a, i
         ENDIF


      ENDIF  # LOGRIGHT = ONE #

      EXECUTE  SIP_BARRIER
#
#
#     
#                          ------------------
#                          -                -
#                          -  BETA DENSITY  -
#                          -                -
#                          ------------------
#     
#
#
#
#    ===========================================================
#       COMPUTE  OCCUPIED - OCCUPIED  PIECE  TO  THE  DENSITY
#    ===========================================================
#    BETA                                                   BETA
#    ----                                                   ----
#
#
#
#
#
      PARDO  j, b, b1, j2

            REQUEST            T2BB (b,j,b1,j2) j
            tpppp(b,j2,b1,j) = T2BB (b,j,b1,j2) 
 
            DO j1

               REQUEST  L2BB (j1,b,j2,b1) j1

              #tjj (j,j1)  = L2BB (j1,b,j2,b1) * T2BB (b,j,b1,j2)
               tjj1(j1,j)  = L2BB (j1,b,j2,b1) * tpppp (b,j2,b1,j)
               tjj (j,j1)  = tjj1(j1,j)  
               tjj (j,j1) *= -0.5
               PUT  T2L2_OO_B (j,j1) += tjj (j,j1)

               tjj (j,j1) *= R0
               PUT  DENS_OO_B (j,j1) += tjj (j,j1)

            ENDDO j1

      ENDPARDO  j, b, b1, j2
#
#
#          ...ALPHA-BETA summation...
#
#
      PARDO  j1, a, b, i

            REQUEST  L2AB (i,a,j1,b) j1
            tpppp(j1,a,i,b) = L2AB (i,a,j1,b) 

            DO j

               REQUEST  T2AB (a,i,b,j) j

              #tjj (j,j1)  = L2AB (i,a,j1,b) * T2AB (a,i,b,j)
               tjj1(j1,j)  = tpppp (j1,a,i,b) * T2AB (a,i,b,j)
               tjj (j,j1)  = tjj1(j1,j)  
               tjj (j,j1) *= -1.0
               PUT  T2L2_OO_B (j,j1) += tjj (j,j1)

               tjj (j,j1) *= R0
               PUT  DENS_OO_B (j,j1) += tjj (j,j1)

            ENDDO j

      ENDPARDO  j1, a, b, i
#
#
#           ...The other piece to the right moment density...
#
#                 R1 * A1  +  R2 * A2  +  T1 * R1 * A2
#
      IF  LOGRIGHT == ONE

         PARDO  j, j1

            tjj (j,j1) = 0.0

            DO b

               GET  R1B (b,j)
               GET  L1B (j1,b)

               tjj1 (j,j1)  = R1B (b,j) * L1B (j1,b)
               tjj (j,j1) += tjj1(j,j1) 

            ENDDO b

            tjj (j,j1) *= -1.0
            PUT  DENS_OO_B (j,j1) += tjj (j,j1)
            PUT  R2L2_OO_B (j,j1) += tjj (j,j1)
   
         ENDPARDO  j, j1
#
         PARDO  b, b1, j2

            ALLOCATE  lbjbj4 (b,j2,b1,*)
            ALLOCATE  lbjbj5 (b,j2,b1,*)

            DO j

               REQUEST               R2AA (b,j,b1,j2) j
               lbjbj5 (b,j2,b1,j)  = R2AA (b,j,b1,j2)
               lbjbj5 (b,j2,b1,j) *= 0.5
           
               GET  T1B (b,j)
               GET  R1B (b1,j2)
               lbjbj4 (b,j2,b1,j)  = lbjbj5 (b,j2,b1,j)
               tbjbj  (b,j2,b1,j)  = T1B (b,j) ^ R1B (b1,j2)
               lbjbj4 (b,j2,b1,j) += tbjbj (b,j2,b1,j)

            ENDDO j

            DO j1

               REQUEST  L2BB (j1,b,j2,b1) j1

               DO j

                  tjj1(j1,j)  = L2BB (j1,b,j2,b1) * lbjbj4 (b,j2,b1,j)
                  tjj (j,j1)  = tjj1(j1,j)  
                  tjj (j,j1) *= -1.0
                  PUT  DENS_OO_B (j,j1) += tjj (j,j1)

                  tjj1(j1,j) = L2BB (j1,b,j2,b1) * lbjbj5 (b,j2,b1,j)
                  tjj (j,j1)  = tjj1(j1,j)  
                  tjj (j,j1) *= -1.0
                  PUT  R2L2_OO_B (j,j1) += tjj (j,j1)

               ENDDO j

            ENDDO j1

            DEALLOCATE  lbjbj4 (b,j2,b1,*)
            DEALLOCATE  lbjbj5 (b,j2,b1,*)

         ENDPARDO  b, b1, j2
#
#
#          ...ALPHA-BETA summation...
#
#
         PARDO  a, b, i

            ALLOCATE  laibj2 (a,i,b,*)
            ALLOCATE  laibj3 (a,i,b,*)

            DO j
 
               REQUEST            R2AB (a,i,b,j) j
               laibj3 (a,i,b,j) = R2AB(a,i,b,j)

               GET  T1B (b,j)  
               GET  R1A (a,i)
               laibj2 (a,i,b,j)  = laibj3 (a,i,b,j)
               taibj  (a,i,b,j)  = T1B (b,j) ^ R1A (a,i)
               laibj2 (a,i,b,j) += taibj (a,i,b,j)

            ENDDO j

            DO j1

               REQUEST            L2AB (i,a,j1,b) j1
               tpppp(j1,a,i,b) =  L2AB (i,a,j1,b) 

               DO j

                 #tjj (j,j1)  = L2AB (i,a,j1,b) * laibj2 (a,i,b,j)
                  tjj1(j1,j)  = tpppp(j1,a,i,b) * laibj2 (a,i,b,j)
                  tjj (j,j1)  = tjj1(j1,j) 
                  tjj (j,j1) *= -1.0
                  PUT  DENS_OO_B (j,j1) += tjj (j,j1)

                 #tjj (j,j1)  = L2AB (i,a,j1,b) * laibj3 (a,i,b,j)
                  tjj1(j1,j)  = tpppp(j1,a,i,b)  * laibj3 (a,i,b,j)
                  tjj (j,j1)  = tjj1(j1,j) 
                  tjj (j,j1) *= -1.0
                  PUT  R2L2_OO_B (j,j1) += tjj (j,j1)

               ENDDO j

            ENDDO j1

            DEALLOCATE  laibj3 (a,i,b,*)
            DEALLOCATE  laibj2 (a,i,b,*)

         ENDPARDO  a, b, i

      ENDIF  # LOGRIGHT == ONE #
#
#
#
#    ===========================================================
#       COMPUTE  VIRTUAL - VIRTUAL  PIECE  TO  THE  DENSITY
#    ===========================================================
#    BETA                                                   BETA
#    ----                                                   ----
#
#
#
      PARDO  b1, b2, j, j1

            REQUEST             L2BB (j,b1,j1,b2) b1
            tpppp(j,b2,j1,b1) = L2BB (j,b1,j1,b2) 

            DO b

               REQUEST       T2BB (b,j,b2,j1) b

              #tbb (b,b1)  = L2BB (j,b1,j1,b2) * T2BB (b,j,b2,j1)
               tbb (b,b1)  = T2BB (b,j,b2,j1) * tpppp(j,b2,j1,b1) 
               tbb (b,b1) *= -0.50
               PUT  T2L2_VV_B (b,b1) += tbb (b,b1)

               tbb (b,b1) *= R0
               tbb (b,b1) *= -1.0
               PUT  DENS_VV_B (b,b1) += tbb (b,b1)

            ENDDO b

      ENDPARDO b1, b2, j, j1
#
#
#          ...ALPHA-BETA summation...
#
#
      PARDO  b, a, j, i

           #REQUEST  T2AB (a,i,b,j) b
            REQUEST  T2AB (b,j,a,i) b
            tpppp(b,i,a,j) = T2AB(b,j,a,i) 

            DO b1

               REQUEST  L2AB (i,a,j,b1) b1

              #tbb (b,b1)  = L2AB (i,a,j,b1) * T2AB (a,i,b,j)
               tbb (b,b1)  = tpppp(b,i,a,j) * L2AB (i,a,j,b1) 
               tbb (b,b1) *= -1.0
               PUT  T2L2_VV_B (b,b1) += tbb (b,b1)

               tbb (b,b1) *= R0
               tbb (b,b1) *= -1.0
               PUT  DENS_VV_B (b,b1) += tbb (b,b1)

            ENDDO b1

      ENDPARDO  b, a, j, i
#
#
#           ...The other piece to the right moment density...
#
#                 R1 * A1  +  R2 * A2  +  T1 * R1 * A2
#
      IF  LOGRIGHT == ONE

         PARDO  b, b1

            tbb (b,b1) = 0.0

            DO j

               GET  R1B (b,j)
               GET  L1B (j,b1)

               tbb1 (b,b1)  = R1B (b,j) * L1B (j,b1)
               tbb(b,b1)   += tbb1(b,b1) 

            ENDDO j

            PUT  DENS_VV_B (b,b1) += tbb (b,b1)

            tbb (b,b1) *= -1.0
            PUT  R2L2_VV_B (b,b1) += tbb (b,b1)

         ENDPARDO  b, b1
#
#
         PARDO  b1, j, j1

            ALLOCATE  lbjbj  (*,j,b1,j1)
            ALLOCATE  lbjbj2 (*,j,b1,j1)

            GET  R1B (b1,j1)

            DO b

               REQUEST               R2AA (b,j,b1,j1) b
               GET                   T1B (b,j)

               tbjbj  (b,j,b1,j1)  = T1B (b,j) ^ R1B (b1,j1)
               lbjbj  (b,j,b1,j1)  = R2AA (b,j,b1,j1)
               lbjbj  (b,j,b1,j1) *= 0.5
               lbjbj2 (b,j,b1,j1)  = lbjbj (b,j,b1,j1)
               lbjbj  (b,j,b1,j1) += tbjbj (b,j,b1,j1)

            ENDDO b

            DO b2

               REQUEST             L2BB (j,b2,j1,b1) b2
               tpppp(j,b1,j1,b2) = L2BB (j,b2,j1,b1) 

               DO b

                 #tbb  (b,b2) = L2BB (j,b2,j1,b1) * lbjbj  (b,j,b1,j1)
                  tbb  (b,b2) = lbjbj  (b,j,b1,j1) * tpppp(j,b1,j1,b2)  
                  PUT  DENS_VV_B (b,b2) += tbb (b,b2)

               ENDDO b

               DO b

                 #tbb2 (b,b2)  = L2BB (j,b2,j1,b1) * lbjbj2 (b,j,b1,j1)
                  tbb2 (b,b2)  = lbjbj2 (b,j,b1,j1) * tpppp(j,b1,j1,b2)
                  tbb2 (b,b2) *= -1.0
                  PUT  R2L2_VV_B (b,b2) += tbb2 (b,b2)

               ENDDO b

            ENDDO b2

            DEALLOCATE  lbjbj  (*,j,b1,j1)
            DEALLOCATE  lbjbj2 (*,j,b1,j1)

         ENDPARDO  b1, j, j1
#
#
#          ...ALPHA-BETA summation...
#
#
         PARDO  a, j, i

            ALLOCATE  lbiaj  (*,i,a,j)
            ALLOCATE  lbiaj2 (*,i,a,j)

            GET  R1A (a,i)

            DO b

               REQUEST            R2AB (a,i,b,j) b
               GET                T1B (b,j)
               lbiaj2 (b,i,a,j) = R2AB (a,i,b,j)

               lbiaj (b,i,a,j)  = R2AB (a,i,b,j)
               taibj (b,i,a,j)  = R1A (a,i) ^ T1B (b,j)
               lbiaj (b,i,a,j) += taibj (b,i,a,j)

            ENDDO b

            DO b2

               REQUEST  L2AB (i,a,j,b2) b2

               DO b

                  tbb  (b,b2) = lbiaj (b,i,a,j) * L2AB (i,a,j,b2) 
                  PUT  DENS_VV_B (b,b2) += tbb  (b,b2)

                  tbb2 (b,b2)  = lbiaj2 (b,i,a,j) * L2AB (i,a,j,b2)
                  tbb2 (b,b2) *= -1.0
                  PUT  R2L2_VV_B (b,b2) += tbb2 (b,b2)

               ENDDO b

            ENDDO b2

            DEALLOCATE  lbiaj  (*,i,a,j)
            DEALLOCATE  lbiaj2 (*,i,a,j)

         ENDPARDO  a, j, i

      ENDIF  # LOGRIGHT = ONE #

      EXECUTE  SIP_BARRIER
      EXECUTE  SERVER_BARRIER
#
#
#    ===========================================================
#       COMPUTE  OCCUPIED - VIRTUAL  PIECE  TO  THE  DENSITY
#    ===========================================================
#    BETA                                                   BETA
#    ----                                                   ----
#
#                Remember, this was already computed
#                during the alpha part above.
#    -----------------------------------------------------------
#
#
#
#    ===========================================================
#       COMPUTE  VIRTUAL - OCCUPIED  PIECE  TO  THE  DENSITY
#    ===========================================================
#    BETA                                                   BETA
#    ----                                                   ----
#
#
#          ...Evaluate the R0 contribution...
#
#
#VFL
      PARDO  b, j 

         tbj2(b,j) = 0.0 

         DO j1 

            GET  T1B (b,j1)
            GET  T1L1_OO_B (j,j1)
            GET  T2L2_OO_B (j,j1)

            tjj (j,j1)  = T1L1_OO_B (j,j1)
            tjj (j,j1) += T2L2_OO_B (j,j1)

            tbj (b,j)   = T1B (b,j1) * tjj (j,j1)

            tbj2(b,j) += tbj(b,j) 

         ENDDO j1 

         IF GROUNDSTATE == ONE
            GET  T1B (b,j)
            tbj2 (b,j)  += T1B (b,j)
         ENDIF

         tbj2 (b,j)  *= R0

         PUT  DENS_VO_B (b,j) = tbj2(b,j)

      ENDPARDO  b, j 

      EXECUTE  SIP_BARRIER
#
      PARDO  b, b1, j

            GET  T1B (b1,j)
            GET  T2L2_VV_B (b,b1)

            tbj (b,j)  = T2L2_VV_B (b,b1) * T1B (b1,j)
            tbj (b,j) *= R0

            PUT  DENS_VO_B (b,j) += tbj (b,j)

      ENDPARDO  b, b1, j
#
      PARDO  b1, j1

         GET  L1B (j1,b1)

         DO b
            DO j
               REQUEST  T2BB (b,j,b1,j1) j
               tbj  (b,j)  = T2BB (b,j,b1,j1) * L1B (j1,b1)
               tbj  (b,j) *= R0
               PUT  DENS_VO_B (b,j) += tbj (b,j)
            ENDDO j
         ENDDO b

      ENDPARDO  b1, j1

      PARDO  i, a

         GET  L1A (i,a)

         DO b
            DO j
               REQUEST  T2AB (a,i,b,j) j
               tbj  (b,j)  = T2AB (a,i,b,j) * L1A (i,a)
               tbj  (b,j) *= R0
               PUT  DENS_VO_B (b,j) += tbj (b,j)
            ENDDO j
         ENDDO b

      ENDPARDO  i, a
#
      IF LOGRIGHT == ONE

         PARDO  b1, j1

            GET            DENS_INT_OV_B (j1,b1)
            tjb  (j1,b1) = DENS_INT_OV_B (j1,b1)
   
            DO b
               DO j
                  REQUEST  T2BB (b,j,b1,j1) j
                  tbj (b,j) = T2BB (b,j,b1,j1) * tjb (j1,b1)
                  PUT  DENS_VO_B (b,j) += tbj (b,j)
               ENDDO j
            ENDDO b

         ENDPARDO  b1, j1

         PARDO  a, i

            GET          DENS_INT_OV_A (i,a)
            tia  (i,a) = DENS_INT_OV_A (i,a)

            DO b
               DO j
                  REQUEST  T2AB (a,i,b,j) j
                  tbj (b,j)    = T2AB (a,i,b,j) * tia (i,a)
                  PUT  DENS_VO_B (b,j) += tbj (b,j)
               ENDDO j
            ENDDO b

         ENDPARDO  a, i
#
#
#
#
#
         PARDO  b1, j1

            GET            DENS_INT_OV_B (j1,b1)
            tjb  (j1,b1) = DENS_INT_OV_B (j1,b1)

            DO j
               GET  T1B (b1,j)
               tjj (j,j1) = T1B (b1,j) * tjb (j1,b1)
               DO b
                  GET  T1B (b,j1)
                  tbj (b,j)  = T1B (b,j1) * tjj (j,j1)
                  tbj (b,j) *= -1.0
                  PUT  DENS_VO_B (b,j) += tbj (b,j)
               ENDDO b
            ENDDO j

         ENDPARDO  b1, j1
#
#
#
#
#
         PARDO  b1, j1

            GET  L1B (j1,b1)

            DO b
               DO j
                  REQUEST  R2AA (b,j,b1,j1) j
                  tbj (b,j) = R2AA (b,j,b1,j1) * L1B (j1,b1)
                  PUT  DENS_VO_B (b,j) += tbj (b,j)
               ENDDO j
            ENDDO b

         ENDPARDO  b1, j1
#
#
#
#
#
         PARDO  i, a

            GET  L1A (i,a)

            DO b
               DO j
                  REQUEST  R2AB (a,i,b,j) j
                  tbj (b,j) = R2AB (a,i,b,j) * L1A (i,a)
                  PUT  DENS_VO_B (b,j) += tbj (b,j)
               ENDDO j
            ENDDO b

         ENDPARDO  i, a
#
#
#
#
#
         PARDO j, b, b1  

               GET  R2L2_VV_B (b,b1)
               GET  T2L2_VV_B (b,b1)
               GET  R1B (b1,j)
               GET  T1B (b1,j)
               tbj  (b,j)  = R2L2_VV_B (b,b1) * T1B (b1,j)
               tbj2 (b,j)  = T2L2_VV_B (b,b1) * R1B (b1,j)
               tbj  (b,j) += tbj2 (b,j)
#
               PUT  DENS_VO_B (b,j) += tbj (b,j)

         ENDPARDO j, b, b1  
#
#
#
#
#
         PARDO  j, b, j1  

               GET  R1B (b,j1)
               GET  T1B (b,j1)
               GET  R2L2_OO_B (j,j1)
               GET  T2L2_OO_B (j,j1)
               tbj  (b,j)  = T1B (b,j1) * R2L2_OO_B (j,j1)
               tbj2 (b,j)  = R1B (b,j1) * T2L2_OO_B (j,j1)
               tbj  (b,j) += tbj2 (b,j)
               PUT  DENS_VO_B (b,j) += tbj (b,j)
   
         ENDPARDO j, b, j1  
#
#
#
#
#
         IF EXCITESTATE == ZERO
            PARDO  b, j
               GET  R1B (b,j)
               tbj (b,j) = R1B (b,j)
               PUT  DENS_VO_B (b,j) += tbj (b,j)
            ENDPARDO  b, j
         ENDIF

         IF EXCITESTATE == ONE
            PARDO  b, j
               GET  T1B (b,j)
               tbj (b,j) = T1B (b,j)
               PUT  DENS_VO_B (b,j) += tbj (b,j)
            ENDPARDO  b, j
         ENDIF

      ENDIF  # LOGRIGHT == ONE #

      EXECUTE  SERVER_BARRIER
#
#
#
#          ...ready!
#
      execute load_balance_off 
      PARDO a, i1 
           #GET DENS_OV_A(i1,a) 
           #GET DENS_OV_B(i1,a) 
           #tia(i1,a) = DENS_OV_A(i1,a) 
           #tia(i1,a)-= DENS_OV_B(i1,a) 
           #execute dump_amp tia 
           #PUT DENS_VO_B(a,i1) = DENS_VO_A(a,i1) 
      ENDPARDO a, i1 
      EXECUTE  SERVER_BARRIER
#
      ENDPROC  COMPUTE_DENSITY_OLD
#-------------------------------------------------------------------------



#-------------------------------------------------------------------------
#
#    ---------------------------
      PROC  BACK_TRANS_COMP_DIP
#    ---------------------------
#
#
#          ...Zero out the necessary arrays...
#
#
      PARDO mu, nu
         txx (mu,nu)          = 0.0
         PUT  AO_DENS (mu,nu) = txx (mu,nu)
      ENDPARDO  mu, nu

      EXECUTE  SIP_BARRIER
#
#
#          ...Do the transformation...
#
#
      IF GROUNDSTATE == ONE                        # Symmetrize
#
#
#      ...Occupied-occupied alpha...
#
#
         PARDO  i, i1
            GET  DENS_OO_A (i,i1)
            GET  DENS_OO_A (i1,i)
            tii (i,i1)  = DENS_OO_A (i1,i)
            tii (i,i1) += DENS_OO_A (i,i1)
            tii (i,i1) *= LRNORM
            DO mu
               txi  (mu,i1) = tii (i,i1) * CA (mu,i)
               DO nu
                  txx  (mu,nu) = txi (mu,i1) * CA (nu,i1)
                  PUT  AO_DENS (mu,nu) += txx  (mu,nu)
               ENDDO nu
            ENDDO mu
         ENDPARDO  i, i1

         PARDO  a, a1
            GET  DENS_VV_A (a,a1)
            GET  DENS_VV_A (a1,a)
            taa (a,a1)  = DENS_VV_A (a1,a)
            taa (a,a1) += DENS_VV_A (a,a1)
            taa (a,a1) *= LRNORM
            DO mu
               txa  (mu,a1) = taa (a,a1) * CA (mu,a)
               DO nu
                  txx  (mu,nu) = txa (mu,a1) * CA (nu,a1)
                  PUT  AO_DENS (mu,nu) += txx  (mu,nu)
               ENDDO nu
            ENDDO mu
         ENDPARDO  a, a1

         PARDO  a, i
            GET  DENS_VO_A (a,i)
            GET  DENS_OV_A (i,a)
            tai (a,i)  = DENS_OV_A (i,a)
            tai (a,i) += DENS_VO_A (a,i)
            tai (a,i) *= LRNORM
            DO mu
               txi (mu,i) = tai (a,i) * CA (mu,a)
               DO nu
                  txx  (mu,nu) = txi (mu,i) * CA (nu,i)
                  t1xx (nu,mu) = txx (mu,nu)
                  PUT  AO_DENS (mu,nu) += txx  (mu,nu)
                  PUT  AO_DENS (nu,mu) += t1xx (nu,mu)
               ENDDO nu
            ENDDO mu
         ENDPARDO  a, i

         PARDO  mu, nu

            GET                     DHF (mu,nu)
            txx (mu,nu)           = DHF (mu,nu)
            PUT  AO_DENS (mu,nu) += txx (mu,nu)

         ENDPARDO  mu, nu

      ENDIF   #  GROUNDSTATE == ONE  #

      IF GROUNDSTATE != ONE

         PARDO  i, i1
            GET  DENS_OO_A (i,i1)
            DO mu
               txi  (mu,i1) = DENS_OO_A (i,i1) * CA (mu,i)
               txi  (mu,i1)*= 2.0  
               txi  (mu,i1)*= LRNORM
               DO nu
                  txx  (mu,nu) = txi (mu,i1) * CA (nu,i1)
                  PUT  AO_DENS (mu,nu) += txx  (mu,nu)
               ENDDO nu
            ENDDO mu
         ENDPARDO  i, i1

         PARDO  a, a1
            GET  DENS_VV_A (a,a1)
            DO mu
               txa  (mu,a1) = DENS_VV_A (a,a1) * CA (mu,a)
               txa  (mu,a1)*= 2.0
               txa  (mu,a1)*= LRNORM
               DO nu
                  txx  (mu,nu) = txa (mu,a1) * CA (nu,a1)
                  PUT  AO_DENS (mu,nu) += txx  (mu,nu)
               ENDDO nu
            ENDDO mu
         ENDPARDO  a, a1

         PARDO  a, i
            GET  DENS_VO_A (a,i)
            DO mu
               txi (mu,i) = DENS_VO_A (a,i) * CA (mu,a)
               txi (mu,i)*= 2.0
               txi (mu,i)*= LRNORM
               DO nu
                  txx  (mu,nu) = txi (mu,i) * CA (nu,i)
                  PUT  AO_DENS (mu,nu) += txx  (mu,nu)
               ENDDO nu
            ENDDO mu
         ENDPARDO  a, i

         PARDO  i, a
            GET  DENS_OV_A   (i,a)
            DO mu
               txa (mu,a) = DENS_OV_A (i,a) * CA (mu,i)
               txa (mu,a)*= 2.0
               txa (mu,a)*= LRNORM
               DO nu
                  txx  (mu,nu) = txa (mu,a) * CA (nu,a)
                  PUT  AO_DENS (mu,nu) += txx  (mu,nu)
               ENDDO nu
            ENDDO mu
         ENDPARDO  i, a

      ENDIF   #  GROUNDSTATE != ONE  #

      EXECUTE  SIP_BARRIER
#
#
#          ...Contract with X, Y, and Z integrals...
#
#
      etemp1 = 0.0
      etemp2 = 0.0
      etemp3 = 0.0

      sum1 = 0.0
      sum2 = 0.0
      sum3 = 0.0

      PARDO  mu, nu

         GET  AO_DENS (mu,nu)

         txx  (mu,nu) = 0.0
         txx2 (mu,nu) = 0.0
         txx3 (mu,nu) = 0.0

         EXECUTE  RETURN_1ST_MOM  txx   ONE
         EXECUTE  RETURN_1ST_MOM  txx2  TWO
         EXECUTE  RETURN_1ST_MOM  txx3  THREE

         etemp = AO_DENS (mu,nu) * txx  (mu,nu)
         sum1 += etemp

         etemp = AO_DENS (mu,nu) * txx2 (mu,nu)
         sum2 += etemp

         etemp = AO_DENS (mu,nu) * txx3 (mu,nu)
         sum3 += etemp

      ENDPARDO  mu, nu

      EXECUTE  SIP_BARRIER

      COLLECTIVE  etemp1 += sum1
      COLLECTIVE  etemp2 += sum2
      COLLECTIVE  etemp3 += sum3

      EXECUTE  SIP_BARRIER

      etemp1 *= -1.0
      etemp2 *= -1.0
      etemp3 *= -1.0

      DIP_MOM_X = etemp1
      DIP_MOM_Y = etemp2
      DIP_MOM_Z = etemp3

      EXECUTE  SIP_BARRIER
#     
#     
#          ...ready!
#
#
      ENDPROC  BACK_TRANS_COMP_DIP
#-------------------------------------------------------------------------

#-------------------------------------------------------------------------
#
#    -------------------------------
      PROC  BACK_TRANS_COMP_DIP_OLD
#    -------------------------------
#
#
#          ...Zero out the necessary arrays...
#
#
      PARDO mu, nu
         txx (mu,nu)          = 0.0
         PUT  AO_DENS (mu,nu) = txx (mu,nu)
      ENDPARDO  mu, nu

      EXECUTE  SIP_BARRIER
#
#
#          ...Do the transformation...
#
#
#      ...Occupied-occupied alpha...
#
#
      PARDO  i, i1

         GET  DENS_OO_A (i,i1)

         DO mu

            txi  (mu,i1) = DENS_OO_A (i,i1) * CA (mu,i)

            DO nu

               txx  (mu,nu) = txi (mu,i1) * CA (nu,i1)
               PUT  AO_DENS (mu,nu) += txx  (mu,nu)

            ENDDO nu

         ENDDO mu

      ENDPARDO  i, i1
#
#
#      ...Occupied-occupied beta...
#
#
      PARDO  j, j1

         GET  DENS_OO_B   (j,j1)

         DO mu

            txj  (mu,j1) = DENS_OO_B (j,j1) * CA (mu,j)

            DO nu

               txx  (mu,nu) = txj (mu,j1) * CA (nu,j1)
               PUT  AO_DENS (mu,nu) += txx  (mu,nu)
         
            ENDDO nu

         ENDDO mu

      ENDPARDO  j, j1
#
#
#      ...Virtual-Virtual alpha...
#
#
      PARDO  a, a1

         GET  DENS_VV_A (a,a1)

         DO mu

            txa  (mu,a1) = DENS_VV_A (a,a1) * CA (mu,a)

            DO nu

               txx  (mu,nu) = txa (mu,a1) * CA (nu,a1)
               PUT  AO_DENS (mu,nu) += txx  (mu,nu)

            ENDDO nu

         ENDDO mu

      ENDPARDO  a, a1
#
#
#      ...Virtual-virtual beta...
#
#
      PARDO  b, b1

         GET  DENS_VV_B   (b,b1)

         DO mu

            txb  (mu,b1) = DENS_VV_B (b,b1) * CA (mu,b)

            DO nu

               txx  (mu,nu) = txb (mu,b1) * CA (nu,b1)
               PUT  AO_DENS (mu,nu) += txx  (mu,nu)

            ENDDO nu

         ENDDO mu

      ENDPARDO  b, b1
#
#
#      ...Virtual-occupied alpha...
#
#
      PARDO  a, i

         GET  DENS_VO_A (a,i)

         DO mu

            txi (mu,i) = DENS_VO_A (a,i) * CA (mu,a)

            DO nu

               txx  (mu,nu) = txi (mu,i) * CA (nu,i)
               PUT  AO_DENS (mu,nu) += txx  (mu,nu)

            ENDDO nu

         ENDDO mu

      ENDPARDO  a, i
#
#
#      ...Virtual-occupied beta...
#
#
      PARDO  b, j

         GET  DENS_VO_B (b,j)

         DO mu

            txj (mu,j) = DENS_VO_B (b,j) * CA (mu,b)

            DO nu

               txx  (mu,nu) = txj (mu,j) * CA (nu,j)
               PUT  AO_DENS (mu,nu) += txx  (mu,nu)

            ENDDO nu

         ENDDO mu

      ENDPARDO  b, j
#
#
#      ...Occupied-virtual alpha...
#
#
      PARDO  i, a

         GET  DENS_OV_A   (i,a)

         DO mu

            txa (mu,a) = DENS_OV_A (i,a) * CA (mu,i)

            DO nu

               txx  (mu,nu) = txa (mu,a) * CA (nu,a)
               PUT  AO_DENS (mu,nu) += txx  (mu,nu)

            ENDDO nu

         ENDDO mu

      ENDPARDO  i, a
#
#
#      ...Occupied-virtual beta...
#
#
      PARDO  j, b

         GET  DENS_OV_B   (j,b)

         DO mu

            txb (mu,b) = DENS_OV_B (j,b) * CA (mu,j)

            DO nu

               txx  (mu,nu) = txb (mu,b) * CA (nu,b)
               PUT  AO_DENS (mu,nu) += txx  (mu,nu)

            ENDDO nu

         ENDDO mu

      ENDPARDO  j, b

      IF GROUNDSTATE == ONE                        # Grab HF Density

         PARDO  mu, nu

            GET                     DHF (mu,nu)
            txx (mu,nu)           = DHF (mu,nu)
            PUT  AO_DENS (mu,nu) += txx (mu,nu)

         ENDPARDO  mu, nu

      ENDIF   #  GROUNDSTATE == ONE  #

      EXECUTE  SIP_BARRIER
#
#
#          ...Contract with X, Y, and Z integrals...
#
#
      etemp1 = 0.0
      etemp2 = 0.0
      etemp3 = 0.0

      sum1 = 0.0
      sum2 = 0.0
      sum3 = 0.0

      PARDO  mu, nu

         GET  AO_DENS (mu,nu)

         txx  (mu,nu) = 0.0
         txx2 (mu,nu) = 0.0
         txx3 (mu,nu) = 0.0

         EXECUTE  RETURN_1ST_MOM  txx   ONE
         EXECUTE  RETURN_1ST_MOM  txx2  TWO
         EXECUTE  RETURN_1ST_MOM  txx3  THREE

         etemp = AO_DENS (mu,nu) * txx  (mu,nu)
         sum1 += etemp

         etemp = AO_DENS (mu,nu) * txx2 (mu,nu)
         sum2 += etemp

         etemp = AO_DENS (mu,nu) * txx3 (mu,nu)
         sum3 += etemp

      ENDPARDO  mu, nu

      EXECUTE  SIP_BARRIER

      COLLECTIVE  etemp1 += sum1
      COLLECTIVE  etemp2 += sum2
      COLLECTIVE  etemp3 += sum3

      EXECUTE  SIP_BARRIER

      etemp1 *= -1.0
      etemp2 *= -1.0
      etemp3 *= -1.0

      DIP_MOM_X = etemp1
      DIP_MOM_Y = etemp2
      DIP_MOM_Z = etemp3

      EXECUTE  SIP_BARRIER
#     
#     
#          ...ready!
#
#
      ENDPROC  BACK_TRANS_COMP_DIP_OLD
#-------------------------------------------------------------------------


#-------------------------------------------------------------------------
#
#    ------------------------
      PROC  PRINT_OUT_PIECES
#    ------------------------
#
#
#          ...Print the relevant data...
#
#
#
#          ...Alpha Occupied-Occupied...
#
      EXECUTE  PRINT_SCALAR  ZERO

      ALLOCATE  lii (*,*)

      PARDO  i, i1
         GET  DENS_OO_A   (i,i1)
         lii (i,i1) = DENS_OO_A (i,i1)
         EXECUTE  c1_print  lii  AMPLTHRESH
      ENDPARDO  i, i1

      DEALLOCATE  lii (*,*)

      EXECUTE  PRINT_SCALAR  ZERO
      EXECUTE  SIP_BARRIER
#
#          ...Beta Occupied-Occupied...
#
      ALLOCATE    ljj (*,*)

      PARDO  j, j1
         GET  DENS_OO_B   (j,j1)
         ljj (j,j1) = DENS_OO_B (j,j1)
         EXECUTE  c1b_print  ljj  AMPLTHRESH
      ENDPARDO  j, j1

      DEALLOCATE  ljj (*,*)

      EXECUTE  PRINT_SCALAR  ZERO
      EXECUTE  SIP_BARRIER
#
#          ...Alpha Virtual-Virtual...
#
      ALLOCATE  laa (*,*)

      PARDO  a, a1
         GET  DENS_VV_A   (a,a1)
         laa (a,a1) = DENS_VV_A (a,a1)
         EXECUTE  c1_print  laa  AMPLTHRESH
      ENDPARDO  a, a1

      DEALLOCATE  laa (*,*)

      EXECUTE  PRINT_SCALAR  ZERO
      EXECUTE  SIP_BARRIER
#
#          ...Beta Virtual-Virtual...
#
      ALLOCATE  lbb (*,*)

      PARDO  b, b1
         GET  DENS_VV_B   (b,b1)
         lbb (b,b1) = DENS_VV_B (b,b1)
         EXECUTE  c1b_print  lbb  AMPLTHRESH
      ENDPARDO  b, b1

      DEALLOCATE  lbb (*,*)

      EXECUTE  PRINT_SCALAR  ZERO
      EXECUTE  SIP_BARRIER
#
#          ...Alpha Occupied-Virtual...
#
      ALLOCATE  lia (*,*)

      PARDO  i, a
         GET  DENS_OV_A   (i,a)
         lia (i,a) = DENS_OV_A (i,a)
         EXECUTE  c1_print  lia  AMPLTHRESH
      ENDPARDO  i, a

      DEALLOCATE  lia (*,*)

      EXECUTE  PRINT_SCALAR  ZERO
      EXECUTE  SIP_BARRIER
#
#          ...Beta Occupied-Virtual...
#
      ALLOCATE  ljb (*,*)

      PARDO  j, b
         GET  DENS_OV_B   (j,b)
         ljb (j,b) = DENS_OV_B (j,b)
         EXECUTE  c1b_print  ljb  AMPLTHRESH
      ENDPARDO  j, b

      DEALLOCATE  ljb (*,*)

      EXECUTE  PRINT_SCALAR  ZERO
      EXECUTE  SIP_BARRIER
#
#          ...Alpha Virtual-Occupied...
#
      ALLOCATE  lai (*,*)

      PARDO  a, i
         GET  DENS_VO_A   (a,i)
         lai (a,i) = DENS_VO_A (a,i)
         EXECUTE  c1_print  lai  AMPLTHRESH
      ENDPARDO  a, i

      DEALLOCATE  lai (*,*)

      EXECUTE  PRINT_SCALAR  ZERO
      EXECUTE  SIP_BARRIER
#
#          ...Beta Virtual-Occupied...
#
      ALLOCATE  lbj (*,*)

      PARDO  b, j
         GET  DENS_VO_B   (b,j)
         lbj (b,j) = DENS_VO_B (b,j)
         EXECUTE  c1b_print  lbj  AMPLTHRESH
      ENDPARDO  b, j

      DEALLOCATE  lbj (*,*)

      EXECUTE  PRINT_SCALAR  ZERO
      EXECUTE  SIP_BARRIER
#     
#     
#          ...ready!
#
#
      ENDPROC  PRINT_OUT_PIECES
#-------------------------------------------------------------------------


#-------------------------------------------------------------------------
#
#    ----------------------
      PROC  PRINT_EOM_DATA
#    ----------------------
#
#
#          ...Print the relevant data...
#
#
      DO kindex26

         IF kindex26 == 1
            etemp = 1.0
            TMOM_DATA (kindex26,kindex26) = OMEGA
            EXECUTE PRINT_EOM_DENS_INFO  TMOM_DATA  etemp
         ENDIF

         IF kindex26 == 2
            etemp = 2.0
            TMOM_DATA (kindex26,kindex26) = OSC_STREN
            EXECUTE PRINT_EOM_DENS_INFO  TMOM_DATA  etemp
         ENDIF

         IF kindex26 == 3
            etemp = 3.0
            TMOM_DATA (kindex26,kindex26) = DIP_MOM_X_R
            EXECUTE PRINT_EOM_DENS_INFO  TMOM_DATA  etemp
         ENDIF

         IF kindex26 == 4
            etemp = 4.0
            TMOM_DATA (kindex26,kindex26) = DIP_MOM_X_L
            EXECUTE PRINT_EOM_DENS_INFO  TMOM_DATA  etemp
         ENDIF

         IF kindex26 == 5
            etemp = 5.0
            TMOM_DATA (kindex26,kindex26) = DIP_MOM_X
            EXECUTE PRINT_EOM_DENS_INFO  TMOM_DATA  etemp
         ENDIF

         IF kindex26 == 6
            etemp = 6.0
            TMOM_DATA (kindex26,kindex26) = OSC_STREN_X
            EXECUTE PRINT_EOM_DENS_INFO  TMOM_DATA  etemp
         ENDIF

         IF kindex26 == 7
            etemp = 7.0
            TMOM_DATA (kindex26,kindex26) = DIP_MOM_Y_R
            EXECUTE PRINT_EOM_DENS_INFO  TMOM_DATA  etemp
         ENDIF

         IF kindex26 == 8
            etemp = 8.0
            TMOM_DATA (kindex26,kindex26) = DIP_MOM_Y_L
            EXECUTE PRINT_EOM_DENS_INFO  TMOM_DATA  etemp
         ENDIF

         IF kindex26 == 9
            etemp = 9.0
            TMOM_DATA (kindex26,kindex26) = DIP_MOM_Y
            EXECUTE PRINT_EOM_DENS_INFO  TMOM_DATA  etemp
         ENDIF

         IF kindex26 == 10
            etemp = 10.0
            TMOM_DATA (kindex26,kindex26) = OSC_STREN_Y
            EXECUTE PRINT_EOM_DENS_INFO  TMOM_DATA  etemp
         ENDIF

         IF kindex26 == 11
            etemp = 11.0
            TMOM_DATA (kindex26,kindex26) = DIP_MOM_Z_R
            EXECUTE PRINT_EOM_DENS_INFO  TMOM_DATA  etemp
         ENDIF

         IF kindex26 == 12
            etemp = 12.0
            TMOM_DATA (kindex26,kindex26) = DIP_MOM_Z_L
            EXECUTE PRINT_EOM_DENS_INFO  TMOM_DATA  etemp
         ENDIF

         IF kindex26 == 13
            etemp = 13.0
            TMOM_DATA (kindex26,kindex26) = DIP_MOM_Z
            EXECUTE PRINT_EOM_DENS_INFO  TMOM_DATA  etemp
         ENDIF

         IF kindex26 == 14
            etemp = 14.0
            TMOM_DATA (kindex26,kindex26) = OSC_STREN_Z
            EXECUTE PRINT_EOM_DENS_INFO  TMOM_DATA  etemp
         ENDIF

         IF kindex26 == 15
            etemp = 15.0
            TMOM_DATA (kindex26,kindex26) = POLXX
            EXECUTE PRINT_EOM_DENS_INFO  TMOM_DATA  etemp
         ENDIF

         IF kindex26 == 16
            etemp = 16.0
            TMOM_DATA (kindex26,kindex26) = POLTOTXX
            EXECUTE PRINT_EOM_DENS_INFO  TMOM_DATA  etemp
         ENDIF

         IF kindex26 == 17
            etemp = 17.0
            TMOM_DATA (kindex26,kindex26) = POLYY
            EXECUTE PRINT_EOM_DENS_INFO  TMOM_DATA  etemp
         ENDIF

         IF kindex26 == 18
            etemp = 18.0
            TMOM_DATA (kindex26,kindex26) = POLTOTYY
            EXECUTE PRINT_EOM_DENS_INFO  TMOM_DATA  etemp
         ENDIF

         IF kindex26 == 19
            etemp = 19.0
            TMOM_DATA (kindex26,kindex26) = POLZZ
            EXECUTE PRINT_EOM_DENS_INFO  TMOM_DATA  etemp
         ENDIF

         IF kindex26 == 20
            etemp = 20.0
            TMOM_DATA (kindex26,kindex26) = POLTOTZZ
            EXECUTE PRINT_EOM_DENS_INFO  TMOM_DATA  etemp
         ENDIF

         IF kindex26 == 21
            etemp = 21.0
            TMOM_DATA (kindex26,kindex26) = POLXY
            EXECUTE PRINT_EOM_DENS_INFO  TMOM_DATA  etemp
         ENDIF

         IF kindex26 == 22
            etemp = 22.0
            TMOM_DATA (kindex26,kindex26) = POLTOTXY
            EXECUTE PRINT_EOM_DENS_INFO  TMOM_DATA  etemp
         ENDIF

         IF kindex26 == 23
            etemp = 23.0
            TMOM_DATA (kindex26,kindex26) = POLXZ
            EXECUTE PRINT_EOM_DENS_INFO  TMOM_DATA  etemp
         ENDIF

         IF kindex26 == 24
            etemp = 24.0
            TMOM_DATA (kindex26,kindex26) = POLTOTXZ
            EXECUTE PRINT_EOM_DENS_INFO  TMOM_DATA  etemp
         ENDIF

         IF kindex26 == 25
            etemp = 25.0
            TMOM_DATA (kindex26,kindex26) = POLYZ
            EXECUTE PRINT_EOM_DENS_INFO  TMOM_DATA  etemp
         ENDIF

         IF kindex26 == 26
            etemp = 26.0
            TMOM_DATA (kindex26,kindex26) = POLTOTYZ
            EXECUTE PRINT_EOM_DENS_INFO  TMOM_DATA  etemp
         ENDIF

      ENDDO kindex26
#
#
#          ...ready!
#
#
      ENDPROC  PRINT_EOM_DATA
#-------------------------------------------------------------------------



#-------------------------------------------------------------------------
#
#    ----------------------
      PROC  PRINT_MOM_DATA
#    ----------------------
#
#
#             Print the relevant data
#
#

#
#
#          ...ready!
#
#
      ENDPROC  PRINT_MOM_DATA
#-------------------------------------------------------------------------



#-------------------------------------------------------------------------
#
#    -----------------------
      PROC  COMPUTE_MOMENTS
#    -----------------------
#
#
#             Compute the moments!
#
#
      EXECUTE  PRINT_SCALAR  ZERO
      imomcount = 0
      DO indone
      DO secmom
         imomcount += 1

         sum1      = 0.0
         SECONDMOM = 0.0
         PARDO  mu, nu

            txx (mu,nu) = 0.0
            GET  AO_DENS (mu,nu)
            EXECUTE  RETURN_2ND_MOM  txx  imomcount
            etemp  = AO_DENS (mu,nu) * txx (mu,nu)
            sum1  += etemp

         ENDPARDO  mu, nu

         EXECUTE  SIP_BARRIER
         COLLECTIVE  SECONDMOM += sum1
         EXECUTE  SIP_BARRIER

         EXECUTE  PRINT_SCALAR  SECONDMOM
         IF GROUNDSTATE == ONE
            GRDSECM (secmom,indone) = SECONDMOM
         ENDIF

         IF EXCITESTATE == ONE
            EXCSECM (secmom,indone) = SECONDMOM
         ENDIF

      ENDDO secmom
      ENDDO indone
#
#
#          ...ready!
#
#
      ENDPROC  COMPUTE_MOMENTS
#-------------------------------------------------------------------------



#-------------------------------------------------------------------------
#
#    -----------------------
      PROC  WRITE_TO_JOBARC
#    -----------------------
#
#
#             Write to JOBARC
#
#
      DO mu
      DO nu

         GET            AO_DENS (mu,nu)
         txx (mu,nu)  = AO_DENS (mu,nu)
        #EXECUTE  C1_PRINT  txx  ZERO
         DENSITY (mu,nu) = txx (mu,nu)

      ENDDO nu
      ENDDO mu

      proot = iroot - 1
      IDENS = proot + inext
      EXECUTE  PRINT_SCALAR  IDENS

      EXECUTE  DENS2JOBARC  DENSITY  IDENS
#
#
#          ...ready!
#
#
      ENDPROC  WRITE_TO_JOBARC
#-------------------------------------------------------------------------




#-------------------------------------------------------------------------
#
#    ------------------
      PROC  PRINT_DIJKL
#    ------------------
#
#
      EXECUTE  PRINT_SCALAR  ZERO
      EXECUTE  PRINT_SCALAR  ZERO
      EXECUTE  PRINT_SCALAR  ZERO
      EXECUTE  PRINT_SCALAR  ZERO
      EXECUTE  PRINT_SCALAR  ZERO
      energy = 0.0
      esum1 = 0.0
      esum2 = 0.0
      energy_aa = 0.0
      energy_ab = 0.0

      EXECUTE  SERVER_BARRIER
      PARDO  i, i1, i2, i3
         GET                   Dijkl_aa (i,i1,i2,i3)
         GET                   Dijkl_aa (i2,i3,i,i1)
         tiiii (i,i1,i2,i3)  = Dijkl_aa (i2,i3,i,i1)
         tiiii (i,i1,i2,i3) += Dijkl_aa (i,i1,i2,i3)
         tiiii (i,i1,i2,i3) *= 0.5
         etemp  = tiiii (i,i1,i2,i3) * tiiii (i,i1,i2,i3)
         etemp *= 0.25
         esum1 += etemp
         EXECUTE  DUMP_AMP  tiiii
      ENDPARDO  i, i1, i2, i3
      EXECUTE  SERVER_BARRIER
      PARDO  i, i1, i2, i3
         GET                   Dijkl_ab (i,i1,i2,i3)
         GET                   Dijkl_ab (i2,i3,i,i1)
         tiiii (i,i1,i2,i3)  = Dijkl_ab (i2,i3,i,i1)
         tiiii (i,i1,i2,i3) += Dijkl_ab (i,i1,i2,i3)
         tiiii (i,i1,i2,i3) *= 0.5
         etemp  = tiiii (i,i1,i2,i3) * tiiii (i,i1,i2,i3)
         esum2 += etemp
         EXECUTE  DUMP_AMP  tiiii
      ENDPARDO  i, i1, i2, i3
      EXECUTE  SERVER_BARRIER

      COLLECTIVE  energy_aa += esum1
      COLLECTIVE  energy_ab += esum2

      EXECUTE  SIP_BARRIER

      energy_bb = energy_aa
      energy  = energy_aa
      energy += energy_bb
      energy += energy_ab
      EXECUTE  SIP_BARRIER

      EXECUTE  PRINT_SCALAR  energy_ab
      EXECUTE  PRINT_SCALAR  energy_aa
      EXECUTE  PRINT_SCALAR  energy_bb
      EXECUTE  PRINT_SCALAR  energy
#
#
#          ...ready!
#     
#     
      ENDPROC  PRINT_DIJKL
#-------------------------------------------------------------------------



#-------------------------------------------------------------------------
#
#    ------------------
      PROC  PRINT_DABCD
#    ------------------
#
#
      esum1 = 0.0
      esum2 = 0.0
      energy_aa = 0.0
      energy_ab = 0.0

      EXECUTE  SERVER_BARRIER
      PARDO  a, a1, a2, a3
         REQUEST              Dabcd_ab (a,a1,a2,a3) a
         tpppp (a,a1,a2,a3) = Dabcd_ab (a,a1,a2,a3)
         etemp = tpppp (a,a1,a2,a3) * tpppp (a,a1,a2,a3)
         esum2 += etemp
         EXECUTE  DUMP_AMP  tpppp
      ENDPARDO  a, a1, a2, a3
      EXECUTE  SERVER_BARRIER
      PARDO  a, a1, a2, a3
         REQUEST              Dabcd_aa (a,a1,a2,a3) a
         tpppp (a,a1,a2,a3) = Dabcd_aa (a,a1,a2,a3)
         etemp = tpppp (a,a1,a2,a3) * tpppp (a,a1,a2,a3)
         etemp *= 0.25
         esum1 += etemp
         EXECUTE  DUMP_AMP  tpppp
      ENDPARDO  a, a1, a2, a3
      EXECUTE  SERVER_BARRIER

      COLLECTIVE  energy_aa += esum1
      COLLECTIVE  energy_ab += esum2

      EXECUTE  SIP_BARRIER

      energy_bb = energy_aa
      energy += energy_aa
      energy += energy_bb
      energy += energy_ab
      EXECUTE  SIP_BARRIER

      EXECUTE  PRINT_SCALAR  energy_ab
      EXECUTE  PRINT_SCALAR  energy_aa
      EXECUTE  PRINT_SCALAR  energy_bb
      EXECUTE  PRINT_SCALAR  energy
      EXECUTE  PRINT_SCALAR  ZERO
      EXECUTE  PRINT_SCALAR  ZERO
#
#
#          ...ready!
#     
#     
      ENDPROC  PRINT_DABCD
#-------------------------------------------------------------------------



#-------------------------------------------------------------------------
#
#    ------------------
      PROC  PRINT_DAIBC
#    ------------------
#
#
      esum1 = 0.0
      esum2 = 0.0
      esum3 = 0.0
      energy_aa = 0.0
      energy_ab = 0.0
      energy_ba = 0.0

      EXECUTE  SERVER_BARRIER
      PARDO  a, a2, a1, i
         REQUEST             Dabci_aaaa (a,a2,a1,i) a
         tpppp (a,a2,a1,i) = Dabci_aaaa (a,a2,a1,i)
         etemp = tpppp (a,a2,a1,i) * tpppp (a,a2,a1,i)
         etemp *= 0.5
         esum1 += etemp
         EXECUTE  DUMP_AMP  tpppp
      ENDPARDO  a, a2, a1, i
      EXECUTE  SERVER_BARRIER
      PARDO  a, a2, a1, i
         REQUEST             Dabci_abab (a,a2,a1,i) a
         tpppp (a,a2,a1,i) = Dabci_abab (a,a2,a1,i)
         etemp = tpppp (a,a2,a1,i) * tpppp (a,a2,a1,i)
         esum2 += etemp
         EXECUTE  DUMP_AMP  tpppp
      ENDPARDO  a, a2, a1, i
      EXECUTE  SERVER_BARRIER
      PARDO  a, a2, a1, i
         REQUEST             Dabci_baba (a,a2,a1,i) a
         tpppp (a,a2,a1,i) = Dabci_baba (a,a2,a1,i)
         etemp = tpppp (a,a2,a1,i) * tpppp (a,a2,a1,i)
         esum3 += etemp
         EXECUTE  DUMP_AMP  tpppp
      ENDPARDO  a, a2, a1, i
      EXECUTE  SERVER_BARRIER

      COLLECTIVE  energy_aa += esum1
      COLLECTIVE  energy_ab += esum2
      COLLECTIVE  energy_ba += esum3

      EXECUTE  SIP_BARRIER

      energy_bb = energy_aa
      energy += energy_aa
      energy += energy_bb
      energy += energy_ab
      energy += energy_ba
      EXECUTE  SIP_BARRIER

      EXECUTE  PRINT_SCALAR  energy_ab
      EXECUTE  PRINT_SCALAR  energy_aa
      EXECUTE  PRINT_SCALAR  energy_bb
      EXECUTE  PRINT_SCALAR  energy_ba
      EXECUTE  PRINT_SCALAR  energy
#
#
#          ...ready!
#     
#     
      ENDPROC  PRINT_DAIBC
#-------------------------------------------------------------------------



#-------------------------------------------------------------------------
#
#    ------------------
      PROC  PRINT_DIJKA
#    ------------------
#
#
      esum1 = 0.0
      esum2 = 0.0
      esum3 = 0.0
      energy_aa = 0.0
      energy_ab = 0.0
      energy_ba = 0.0

      EXECUTE  SERVER_BARRIER
      PARDO  i, i1, i2, a
         GET                 Dijka_aaaa (i,i1,i2,a)
         tpppp (i,i1,i2,a) = Dijka_aaaa (i,i1,i2,a)
         etemp = tpppp (i,i1,i2,a) * tpppp (i,i1,i2,a)
         etemp *= 0.5
         esum1 += etemp
         EXECUTE  DUMP_AMP  tpppp
      ENDPARDO  i, i1, i2, a
      EXECUTE  SERVER_BARRIER
      PARDO  i, i1, i2, a
         GET                 Dijka_abab (i,i1,i2,a)
         tpppp (i,i1,i2,a) = Dijka_abab (i,i1,i2,a)
         etemp = tpppp (i,i1,i2,a) * tpppp (i,i1,i2,a)
         esum2 += etemp
         EXECUTE  DUMP_AMP  tpppp
      ENDPARDO  i, i1, i2, a
      EXECUTE  SERVER_BARRIER
      PARDO  i, i1, i2, a
         GET                 Dijka_baba (i,i1,i2,a)
         tpppp (i,i1,i2,a) = Dijka_baba (i,i1,i2,a)
         etemp = tpppp (i,i1,i2,a) * tpppp (i,i1,i2,a)
         esum3 += etemp
         EXECUTE  DUMP_AMP  tpppp
      ENDPARDO  i, i1, i2, a
      EXECUTE  SERVER_BARRIER

      COLLECTIVE  energy_aa += esum1
      COLLECTIVE  energy_ab += esum2
      COLLECTIVE  energy_ba += esum2

      EXECUTE  SIP_BARRIER

      energy_bb = energy_aa
      energy += energy_aa
      energy += energy_bb
      energy += energy_ab
      energy += energy_ba
      EXECUTE  SIP_BARRIER

      EXECUTE  PRINT_SCALAR  energy_ab
      EXECUTE  PRINT_SCALAR  energy_aa
      EXECUTE  PRINT_SCALAR  energy_bb
      EXECUTE  PRINT_SCALAR  energy_ba
      EXECUTE  PRINT_SCALAR  energy
#
#
#          ...ready!
#     
#     
      ENDPROC  PRINT_DIJKA
#-------------------------------------------------------------------------




#-------------------------------------------------------------------------
#
#    ------------------
      PROC  PRINT_DAIBJ
#    ------------------
#
#
      esum1 = 0.0
      esum2 = 0.0
      esum3 = 0.0
      esum4 = 0.0
      energy_aa = 0.0
      energy_ab = 0.0
      energy_ba = 0.0
      energy_abba = 0.0

      EXECUTE  SERVER_BARRIER
      PARDO  i, a, i1, a1
         GET                 Dibja_aaaa (i,a,i1,a1)
         tpppp (i,a,i1,a1) = Dibja_aaaa (i,a,i1,a1)
         etemp = tpppp (i,a,i1,a1) * tpppp (i,a,i1,a1)
         esum1 += etemp
         EXECUTE  DUMP_AMP  tpppp
      ENDPARDO  i, a, i1, a1
      EXECUTE  SERVER_BARRIER
      PARDO  i, a, i1, a1
         GET                 Dibja_abab (i,a,i1,a1)
         tpppp (i,a,i1,a1) = Dibja_abab (i,a,i1,a1)
         etemp = tpppp (i,a,i1,a1) * tpppp (i,a,i1,a1)
         esum2 += etemp
         EXECUTE  DUMP_AMP  tpppp
      ENDPARDO  i, a, i1, a1
      EXECUTE  SERVER_BARRIER
      PARDO  i, a, i1, a1
         GET                 Dibja_baba (i,a,i1,a1)
         tpppp (i,a,i1,a1) = Dibja_baba (i,a,i1,a1)
         etemp = tpppp (i,a,i1,a1) * tpppp (i,a,i1,a1)
         esum3 += etemp
         EXECUTE  DUMP_AMP  tpppp
      ENDPARDO  i, a, i1, a1
      EXECUTE  SERVER_BARRIER
      PARDO  i, a, i1, a1
         GET                  Dibja_abba (i,a1,i1,a)
         GET                  Dibja_baab (i1,a,i,a1)
         tpppp (i1,a,i,a1)  = Dibja_abba (i,a1,i1,a)
         tpppp (i1,a,i,a1) += Dibja_abba (i1,a,i,a1)
         tpppp (i1,a,i,a1) *= 0.5
         etemp = tpppp (i1,a,i,a1) * tpppp (i1,a,i,a1)
         esum4 += etemp
         EXECUTE  DUMP_AMP  tpppp
      ENDPARDO  i, a, i1, a1
      EXECUTE  SERVER_BARRIER
#      PARDO  i, a, i1, a1
#         GET                 Dibja_baab (i,a1,i1,a)
#         tpppp (i1,a,i,a1) = Dibja_baab (i,a1,i1,a)
#         EXECUTE  DUMP_AMP  tpppp
#      ENDPARDO  i, a, i1, a1
#      EXECUTE  SERVER_BARRIER

      COLLECTIVE  energy_aa += esum1
      COLLECTIVE  energy_ab += esum2
      COLLECTIVE  energy_ba += esum3
      COLLECTIVE  energy_abba += esum4

      EXECUTE  SIP_BARRIER

      energy_bb = energy_aa
      energy += energy_aa
      energy += energy_bb
      energy += energy_ab
      energy += energy_ba
      energy += energy_abba
      EXECUTE  SIP_BARRIER

      EXECUTE  PRINT_SCALAR  energy_aa
      EXECUTE  PRINT_SCALAR  energy_ab
      EXECUTE  PRINT_SCALAR  energy_abba
      EXECUTE  PRINT_SCALAR  energy_bb
      EXECUTE  PRINT_SCALAR  energy_ba
      EXECUTE  PRINT_SCALAR  energy
#
#
#          ...ready!
#     
#     
      ENDPROC  PRINT_DAIBJ
#-------------------------------------------------------------------------




#-------------------------------------------------------------------------
#        
#    ------------------
      PROC  PRINT_DIJAB
#    ------------------
#
#
      esum1 = 0.0
      esum2 = 0.0
      energy_aa = 0.0
      energy_ab = 0.0

      EXECUTE  SERVER_BARRIER
      PARDO  i, i1, a, a1
         GET                  Dijab_aa (i,i1,a,a1)
         taiai (a,i,a1,i1)  = Dijab_aa (i,i1,a,a1)
         etemp = taiai (a,i,a1,i1) * taiai (a,i,a1,i1)
         etemp *= 0.25
         esum1 += etemp
        #taiai (a,i,a1,i1) *= 2.0
         EXECUTE  DUMP_AMP  taiai (a,i,a1,i1)
      ENDPARDO  i, i1, a, a1
      EXECUTE  SERVER_BARRIER
      PARDO  i, i1, a, a1
         GET                  Dijab_ab (i,i1,a,a1)
         taiai (a,i,a1,i1)  = Dijab_ab (i,i1,a,a1)
         etemp = taiai (a,i,a1,i1) * taiai (a,i,a1,i1)
         esum2 += etemp
        #taiai (a,i,a1,i1) *= 2.0
         EXECUTE  DUMP_AMP  taiai (a,i,a1,i1)
      ENDPARDO  i, i1, a, a1
      EXECUTE  SERVER_BARRIER

      COLLECTIVE  energy_aa += esum1
      COLLECTIVE  energy_ab += esum2

      EXECUTE  SIP_BARRIER

      energy_bb = energy_aa
      energy += energy_aa
      energy += energy_bb
      energy += energy_ab
      EXECUTE  SIP_BARRIER

      EXECUTE  PRINT_SCALAR  energy_ab
      EXECUTE  PRINT_SCALAR  energy_aa
      EXECUTE  PRINT_SCALAR  energy_bb
      EXECUTE  PRINT_SCALAR  energy
#
#
#          ...ready!
#     
#     
      ENDPROC  PRINT_DIJAB
#-------------------------------------------------------------------------




#-------------------------------------------------------------------------
#
#     ------------------
      PROC  TWO_DENS_INT
#     ------------------
#
#
#     Ring intermediates (L2 * T2  AND  L2 * R2)
#
#
      PARDO  a, a2, i2, a1
         ALLOCATE  Laiai (a2,i2,a1,*)
         DO i1
            REQUEST                L2AA (i1,a1,i2,a2) i1
            Laiai (a2,i2,a1,i1)  = L2AA (i1,a1,i2,a2)
            Laiai (a2,i2,a1,i1) *= LRNORM
         ENDDO i1
         DO i
            REQUEST  R2AA (a,i,a2,i2) i
            REQUEST  T2AA (a,i,a2,i2) i
            DO i1
               taiai  (a,i,a1,i1) = R2AA (a,i,a2,i2) * Laiai (a2,i2,a1,i1)
               t1aiai (a,i,a1,i1) = T2AA (a,i,a2,i2) * Laiai (a2,i2,a1,i1)

               tiaia  (i,a1,i1,a) = taiai  (a,i,a1,i1)
               t1iaia (i,a1,i1,a) = t1aiai (a,i,a1,i1)

               PREPARE  L2R2_aaaa (i,a1,i1,a) += tiaia  (i,a1,i1,a)
               PREPARE  L2T2_aaaa (i,a1,i1,a) += t1iaia (i,a1,i1,a)
            ENDDO i1
         ENDDO i
         DEALLOCATE  Laiai (a2,i2,a1,*)
      ENDPARDO  a, a2, i2, a1

      PARDO  a, b2, j2, a1
         ALLOCATE  Lbjai (b2,j2,a1,*)
         DO i1
            REQUEST                L2AB (i1,a1,j2,b2) i1
            Lbjai (b2,j2,a1,i1)  = L2AB (i1,a1,j2,b2)
            Lbjai (b2,j2,a1,i1) *= LRNORM
         ENDDO i1
         DO i
            REQUEST  R2AB (a,i,b2,j2) i
            REQUEST  T2AB (a,i,b2,j2) i
            DO i1
               taiai  (a,i,a1,i1) = R2AB (a,i,b2,j2) * Lbjai (b2,j2,a1,i1)
               t1aiai (a,i,a1,i1) = T2AB (a,i,b2,j2) * Lbjai (b2,j2,a1,i1)

               tiaia  (i,a1,i1,a) = taiai  (a,i,a1,i1)
               t1iaia (i,a1,i1,a) = t1aiai (a,i,a1,i1)

               PREPARE  L2R2_aaaa (i,a1,i1,a) += tiaia  (i,a1,i1,a)
               PREPARE  L2T2_aaaa (i,a1,i1,a) += t1iaia (i,a1,i1,a)
            ENDDO i1
         ENDDO i
         DEALLOCATE  Lbjai (b2,j2,a1,*)
      ENDPARDO  a, b2, j2, a1

      PARDO  a, a2, i2, b1
         ALLOCATE  Laibj (a2,i2,b1,*)
         DO j1
            REQUEST                L2AB (i2,a2,j1,b1) j1
            Laibj (a2,i2,b1,j1)  = L2AB (i2,a2,j1,b1)
            Laibj (a2,i2,b1,j1) *= LRNORM
         ENDDO j1
         DO i
            REQUEST  R2AA (a,i,a2,i2) i
            REQUEST  T2AA (a,i,a2,i2) i
            DO j1
               taibj  (a,i,b1,j1) = R2AA (a,i,a2,i2) * Laibj (a2,i2,b1,j1)
               t1aibj (a,i,b1,j1) = T2AA (a,i,a2,i2) * Laibj (a2,i2,b1,j1)

               tpqqp  (i,b1,j1,a) = taibj  (a,i,b1,j1)
               t1pqqp (i,b1,j1,a) = t1aibj (a,i,b1,j1)

               PREPARE  L2R2_abba (i,b1,j1,a) += tpqqp  (i,b1,j1,a)
               PREPARE  L2T2_abba (i,b1,j1,a) += t1pqqp (i,b1,j1,a)
            ENDDO j1
         ENDDO i
         DEALLOCATE  Laibj (a2,i2,b1,*)
      ENDPARDO  a, a2, i2, b1

      PARDO  a, b2, j2, b1
         ALLOCATE  Lbjbj (b2,j2,b1,*)
         DO j1
            REQUEST                L2AA (j2,b2,j1,b1) j1
            Lbjbj (b2,j2,b1,j1)  = L2AA (j2,b2,j1,b1)
            Lbjbj (b2,j2,b1,j1) *= LRNORM
         ENDDO j1
         DO i
            REQUEST  R2AB (a,i,b2,j2) i
            REQUEST  T2AB (a,i,b2,j2) i
            DO j1
               taibj  (a,i,b1,j1) = R2AB (a,i,b2,j2) * Lbjbj (b2,j2,b1,j1)
               t1aibj (a,i,b1,j1) = T2AB (a,i,b2,j2) * Lbjbj (b2,j2,b1,j1)

               tpqqp  (i,b1,j1,a) = taibj  (a,i,b1,j1)
               t1pqqp (i,b1,j1,a) = t1aibj (a,i,b1,j1)

               PREPARE  L2R2_abba (i,b1,j1,a) += tpqqp  (i,b1,j1,a)
               PREPARE  L2T2_abba (i,b1,j1,a) += t1pqqp (i,b1,j1,a)
            ENDDO j1
         ENDDO i
         DEALLOCATE  Lbjbj (b2,j2,b1,*)
      ENDPARDO  a, b2, j2, b1

      PARDO  b, a2, i2, a1
         ALLOCATE  Laiai (a1,*,a2,i2)
         DO i1
            REQUEST                L2AA (i1,a1,i2,a2) i1
            Laiai (a1,i1,a2,i2)  = L2AA (i1,a1,i2,a2) 
            Laiai (a1,i1,a2,i2) *= LRNORM
         ENDDO i1 
         DO j
            REQUEST  R2AB (a2,i2,b,j) j
            REQUEST  T2AB (a2,i2,b,j) j
            DO i1
               tbjai  (a1,i1,b,j) = Laiai (a1,i1,a2,i2) * R2AB (a2,i2,b,j)
               t1bjai (a1,i1,b,j) = Laiai (a1,i1,a2,i2) * T2AB (a2,i2,b,j)

               tqppq  (j,a1,i1,b) = tbjai  (a1,i1,b,j)
               t1qppq (j,a1,i1,b) = t1bjai (a1,i1,b,j)

               PREPARE  L2R2_baab (j,a1,i1,b) += tqppq  (j,a1,i1,b)
               PREPARE  L2T2_baab (j,a1,i1,b) += t1qppq (j,a1,i1,b)
            ENDDO i1
         ENDDO j
         DEALLOCATE  Laiai (a1,*,a2,i2)
      ENDPARDO  b, a2, i2, a1

      PARDO  b, b2, j2, a1
         ALLOCATE  Laibj (a1,*,b2,j2)
         DO i1
            REQUEST                L2AB (i1,a1,j2,b2) i1
            Laibj (a1,i1,b2,j2)  = L2AB (i1,a1,j2,b2)
            Laibj (a1,i1,b2,j2) *= LRNORM
         ENDDO i1
         DO j
            REQUEST  R2AA (b2,j2,b,j) j
            REQUEST  T2AA (b2,j2,b,j) j
            DO i1
               taibj  (a1,i1,b,j) = Laibj (a1,i1,b2,j2) * R2AA (b2,j2,b,j)
               t1aibj (a1,i1,b,j) = Laibj (a1,i1,b2,j2) * T2AA (b2,j2,b,j)

               tqppq  (j,a1,i1,b) = taibj  (a1,i1,b,j)
               t1qppq (j,a1,i1,b) = t1aibj (a1,i1,b,j)

               PREPARE  L2R2_baab (j,a1,i1,b) += tqppq  (j,a1,i1,b)
               PREPARE  L2T2_baab (j,a1,i1,b) += t1qppq (j,a1,i1,b)
            ENDDO i1
         ENDDO j
         DEALLOCATE  Laiai (a1,*,b2,j2)
      ENDPARDO  b, b2, j2, a1

      PARDO  b, a2, j2, b1
         ALLOCATE  Lajib (a2,j2,*,b1)
         DO i1
            REQUEST                L2AB (i1,a2,j2,b1) i1
            Lajib (a2,j2,i1,b1)  = L2AB (i1,a2,j2,b1)
            Lajib (a2,j2,i1,b1) *= LRNORM
         ENDDO i1
         DO i
            REQUEST              R2AB (a2,i,b,j2) i
            REQUEST              T2AB (a2,i,b,j2) i
            tpqpq  (i,b,a2,j2) = R2AB (a2,i,b,j2)
            t1pqpq (i,b,a2,j2) = T2AB (a2,i,b,j2)
            DO i1
               tibib  (i,b,i1,b1) = tpqpq  (i,b,a2,j2) * Lajib (a2,j2,i1,b1)
               t1ibib (i,b,i1,b1) = t1pqpq (i,b,a2,j2) * Lajib (a2,j2,i1,b1)

               PREPARE  L2R2_abab (i,b,i1,b1) += tibib  (i,b,i1,b1)
               PREPARE  L2T2_abab (i,b,i1,b1) += t1ibib (i,b,i1,b1)
            ENDDO i1
         ENDDO i
         DEALLOCATE  Lajib (a2,j2,*,b1)
      ENDPARDO  b, a2, j2, b1

      PARDO  a, b2, i2, a1
         ALLOCATE  Lbija (b2,i2,*,a1)
         DO j1
            REQUEST                L2AB (i2,a1,j1,b2) j1
            Lbija (b2,i2,j1,a1)  = L2AB (i2,a1,j1,b2)
            Lbija (b2,i2,j1,a1) *= LRNORM
         ENDDO j1
         DO j
            REQUEST              R2AB (a,i2,b2,j) j
            REQUEST              T2AB (a,i2,b2,j) j
            tpqpq  (j,a,b2,i2) = R2AB (a,i2,b2,j)
            t1pqpq (j,a,b2,i2) = T2AB (a,i2,b2,j)
            DO j1
               tjaja  (j,a,j1,a1) = tpqpq  (j,a,b2,i2) * Lbija (b2,i2,j1,a1)
               t1jaja (j,a,j1,a1) = t1pqpq (j,a,b2,i2) * Lbija (b2,i2,j1,a1)
               
               PREPARE  L2R2_baba (j,a,j1,a1) += tjaja  (j,a,j1,a1)
               PREPARE  L2T2_baba (j,a,j1,a1) += t1jaja (j,a,j1,a1)
            ENDDO j1
         ENDDO j
         DEALLOCATE  Lbija (b2,i2,*,a1)
      ENDPARDO  a, b2, i2, a1
#
#
#     R1 * L2 --> LR1L2_ai
#
#
      PARDO  i2, a2, a, i
         REQUEST             L2AA (i,a,i2,a2) i2
         GET                 R1A  (a2,i2)
         taiai (a,i,a2,i2) = L2AA (i,a,i2,a2)
         tai (a,i)  = taiai (a,i,a2,i2) * R1A (a2,i2)
         tai (a,i) *= LRNORM
         LR1L2_ai (a,i) += tai (a,i)
         DO i1
            tii (i,i1) = tai (a,i) * LT1A (a,i1)
            L_Z_ii (i,i1) += tii (i,i1)
         ENDDO i1
         DO a1
            taa (a,a1) = tai (a,i) * LT1A (a1,i)
            L_Z_aa (a,a1) += taa (a,a1)
         ENDDO a1
      ENDPARDO  i2, a2, a, i

      PARDO  j2, b2, a, i
         REQUEST             L2AB (i,a,j2,b2) j2
         GET                 R1A  (b2,j2)
         taiai (a,i,b2,j2) = L2AB (i,a,j2,b2)
         tai (a,i)  = taiai (a,i,b2,j2) * R1A (b2,j2)
         tai (a,i) *= LRNORM
         LR1L2_ai (a,i) += tai (a,i)
         DO i1
            tii (i,i1) = tai (a,i) * LT1A (a,i1)
            L_Z_ii (i,i1) += tii (i,i1)
         ENDDO i1
         DO a1
            taa (a,a1) = tai (a,i) * LT1A (a1,i)
            L_Z_aa (a,a1) += taa (a,a1)
         ENDDO a1
      ENDPARDO  j2, b2, a, i

      PARDO  j2, b2, b, j
         REQUEST             L2AA (j,b,j2,b2) j2
         GET                 R1A  (b2,j2)
         tbjbj (b,j,b2,j2) = L2AA (j,b,j2,b2)
         tbj (b,j)  = tbjbj (b,j,b2,j2) * R1A (b2,j2)
         tbj (b,j) *= LRNORM
         LR1L2_bj (b,j) += tbj (b,j)
         DO j1
            tjj (j,j1) = tbj (b,j) * LT1A (b,j1)
            L_Z_jj (j,j1) += tjj (j,j1)
         ENDDO j1
         DO b1
            tbb (b,b1) = tbj (b,j) * LT1A (b1,j)
            L_Z_bb (b,b1) += tbb (b,b1)
         ENDDO b1
      ENDPARDO  j2, b2, b, j

      PARDO  i2, a2, b, j
         REQUEST             L2AB (i2,a2,j,b) i2
         GET                 R1A  (a2,i2)
         tbjbj (b,j,a2,i2) = L2AB (i2,a2,j,b)
         tbj (b,j)  = tbjbj (b,j,a2,i2) * R1A (a2,i2)
         tbj (b,j) *= LRNORM
         LR1L2_bj (b,j) += tbj (b,j)
         DO j1
            tjj (j,j1) = tbj (b,j) * LT1A (b,j1)
            L_Z_jj (j,j1) += tjj (j,j1)
         ENDDO j1
         DO b1
            tbb (b,b1) = tbj (b,j) * LT1A (b1,j)
            L_Z_bb (b,b1) += tbb (b,b1)
         ENDDO b1
      ENDPARDO  i2, a2, b, j

      PARDO  i, a, i2, a2
         REQUEST             R2AA (a,i,a2,i2) i
         REQUEST             T2AA (a,i,a2,i2) i
         GET                 L1A  (i2,a2)
         t1ai (a,i)        = R2AA  (a,i,a2,i2) * L1A (i2,a2)
         t2ai (a,i)        = T2AA  (a,i,a2,i2) * L1A (i2,a2)
         t1ai (a,i)       *= LRNORM
         t2ai (a,i)       *= LRNORM
         LR2L1_ai (a,i) += t1ai (a,i)
         L_Z1_ai  (a,i) += t1ai (a,i)
         L_Z2_ai  (a,i) += t2ai (a,i)
      ENDPARDO  i, a, i2, a2

      PARDO  i, a, j2, b2
         REQUEST              R2AB (a,i,b2,j2) i
         REQUEST              T2AB (a,i,b2,j2) i
         GET                  L1A (j2,b2)
         t1ai (a,i)         = R2AB  (a,i,b2,j2) * L1A  (j2,b2)
         t2ai (a,i)         = T2AB  (a,i,b2,j2) * L1A  (j2,b2)
         t1ai (a,i)        *= LRNORM
         t2ai (a,i)        *= LRNORM
         LR2L1_ai (a,i) += t1ai (a,i)
         L_Z1_ai  (a,i) += t1ai (a,i)
         L_Z2_ai  (a,i) += t2ai (a,i)
      ENDPARDO  i, a, j2, b2

      PARDO  j, b, j2, b2
         REQUEST             R2AA (b,j,b2,j2) j
         REQUEST             T2AA (b,j,b2,j2) j
         GET                 L1A  (j2,b2)
         t1bj (b,j)        = R2AA  (b,j,b2,j2) * L1A (j2,b2)
         t2bj (b,j)        = T2AA  (b,j,b2,j2) * L1A (j2,b2)
         t1bj (b,j)       *= LRNORM
         t2bj (b,j)       *= LRNORM
         LR2L1_bj (b,j) += t1bj (b,j)
         L_Z1_bj  (b,j) += t1bj (b,j)
         L_Z2_bj  (b,j) += t2bj (b,j)
      ENDPARDO  j, b, j2, b2

      PARDO  j, b, i2, a2
         REQUEST             R2AB (a2,i2,b,j) j
         REQUEST             T2AB (a2,i2,b,j) j
         GET                 L1A  (i2,a2)
         t1bj (b,j)        = R2AB  (b,j,a2,i2) * L1A (i2,a2)
         t2bj (b,j)        = T2AB  (b,j,a2,i2) * L1A (i2,a2)
         t1bj (b,j)       *= LRNORM
         t2bj (b,j)       *= LRNORM
         LR2L1_bj (b,j)   += t1bj (b,j)
         L_Z1_bj  (b,j)   += t1bj (b,j)
         L_Z2_bj  (b,j)   += t2bj (b,j)
      ENDPARDO  j, b, i2, a2
#
#
#     R2 * L2 --> R2L2_ii
#     T2 * L2 --> T2L2_ii
#
#
      PARDO  i3, a2, a3
         ALLOCATE  Liaia  (*,a2,i3,a3)
         ALLOCATE  Laaia  (*,a2,i3,a3)
         ALLOCATE  L1aaia (*,a2,i3,a3)
         DO i
            REQUEST               L2AA (i,a2,i3,a3) i
            Liaia (i,a3,i3,a2)  = L2AA (i,a2,i3,a3)
            Liaia (i,a3,i3,a2) *= LRNORM
            Liaia (i,a3,i3,a2) *= 0.5
            DO a
               GET  R1A (a,i)
               t2pppp (a,a3,i3,a2)  = LT1A (a,i) * Liaia (i,a3,i3,a2)
               t3pppp (a,a3,i3,a2)  = R1A  (a,i) * Liaia (i,a3,i3,a2)
               Laaia  (a,a3,i3,a2) += t2pppp (a,a3,i3,a2)
               L1aaia (a,a3,i3,a2) += t3pppp (a,a3,i3,a2)
            ENDDO a
         ENDDO i
         DO i2
            REQUEST               T2AA (a3,i3,a2,i2) i2
            REQUEST               R2AA (a3,i3,a2,i2) i2
            DO i
               tii (i,i2) = Liaia (i,a3,i3,a2) * T2AA (a3,i3,a2,i2)
               tpp (i,i2) = Liaia (i,a3,i3,a2) * R2AA (a3,i3,a2,i2)
               LT2L2_ii (i,i2) += tii (i,i2)
               LR2L2_ii (i,i2) += tpp (i,i2)
               L_Y_ii   (i,i2) += tii (i,i2)
               L_Z_ii   (i,i2) += tpp (i,i2)
            ENDDO i
            DO a
               tai  (a,i2)  = Laaia  (a,a3,i3,a2) * R2AA (a3,i3,a2,i2)
               t1ai (a,i2)  = L1aaia (a,a3,i3,a2) * T2AA (a3,i3,a2,i2)
               t2ai (a,i2)  = Laaia  (a,a3,i3,a2) * T2AA (a3,i3,a2,i2)
               tai  (a,i2) += t1ai (a,i2)
               L_Z1_ai (a,i2) -= tai  (a,i2)
               L_Z2_ai (a,i2) -= t2ai (a,i2)
            ENDDO a
         ENDDO i2
         DEALLOCATE  L1aaia (*,a2,i3,a3)
         DEALLOCATE  Laaia  (*,a2,i3,a3)
         DEALLOCATE  Liaia  (*,a2,i3,a3)
      ENDPARDO  i3, a2, a3

      PARDO  j3, a2, b3
         ALLOCATE  Liajb  (*,a2,j3,b3)
         ALLOCATE  Laajb  (*,a2,j3,b3)
         ALLOCATE  L1aajb (*,a2,j3,b3)
         DO i
            REQUEST               L2AB (i,a2,j3,b3) i
            Liajb (i,a2,j3,b3)  = L2AB (i,a2,j3,b3)
            Liajb (i,a2,j3,b3) *= LRNORM
            DO a
               GET  R1A (a,i)
               tppqq  (a,a2,j3,b3)  = LT1A (a,i) * Liajb (i,a2,j3,b3)
               t1ppqq (a,a2,j3,b3)  = R1A  (a,i) * Liajb (i,a2,j3,b3)
               Laajb  (a,a2,j3,b3) += tppqq  (a,a2,j3,b3)
               L1aajb (a,a2,j3,b3) += t1ppqq (a,a2,j3,b3)
            ENDDO a
         ENDDO i
         DO i2
            REQUEST                T2AB (a2,i2,b3,j3) i2
            REQUEST                R2AB (a2,i2,b3,j3) i2
            tpqqp  (a2,j3,b3,i2) = T2AB (a2,i2,b3,j3)
            t1pqqp (a2,j3,b3,i2) = R2AB (a2,i2,b3,j3)
            DO i
               tii (i,i2) = Liajb (i,a2,j3,b3) * tpqqp  (a2,j3,b3,i2)
               tpp (i,i2) = Liajb (i,a2,j3,b3) * t1pqqp (a2,j3,b3,i2)
               LT2L2_ii (i,i2) += tii (i,i2)
               LR2L2_ii (i,i2) += tpp (i,i2)
               L_Y_ii   (i,i2) += tii (i,i2)
               L_Z_ii   (i,i2) += tpp (i,i2)
            ENDDO i
            DO a
               tai  (a,i2)  = Laajb  (a,a2,j3,b3) * t1pqqp (a2,j3,b3,i2)
               t1ai (a,i2)  = L1aajb (a,a2,j3,b3) * tpqqp  (a2,j3,b3,i2)
               t2ai (a,i2)  = Laajb  (a,a2,j3,b3) * tpqqp  (a2,j3,b3,i2)
               tai  (a,i2) += t1ai (a,i2)
               L_Z1_ai (a,i2) -= tai  (a,i2)
               L_Z2_ai (a,i2) -= t2ai (a,i2)
            ENDDO a
         ENDDO i2
         DEALLOCATE  L1aajb (*,a2,j3,a3)
         DEALLOCATE  Laajb  (*,a2,j3,a3)
         DEALLOCATE  Liajb  (*,a2,j3,a3)
      ENDPARDO  j3, a2, b3

      PARDO  j3, b2, b3
         ALLOCATE  Ljbjb  (*,b2,j3,b3)
         ALLOCATE  Lbbjb  (*,b2,j3,b3)
         ALLOCATE  L1bbjb (*,b2,j3,b3)
         DO j
            REQUEST               L2AA (j,b2,j3,b3) j 
            Ljbjb (j,b2,j3,b3)  = L2AA (j,b2,j3,b3)
            Ljbjb (j,b2,j3,b3) *= LRNORM
            Ljbjb (j,b2,j3,b3) *= 0.5
            DO b
               GET  R1A (b,j)
               tqqqq  (b,b2,j3,b3)  = LT1A (b,j) * Ljbjb (j,b2,j3,b3)
               t1qqqq (b,b2,j3,b3)  = R1A  (b,j) * Ljbjb (j,b2,j3,b3)
               Lbbjb  (b,b2,j3,b3) += tqqqq  (b,b2,j3,b3)
               L1bbjb (b,b2,j3,b3) += t1qqqq (b,b2,j3,b3)
            ENDDO b
         ENDDO j
         DO j2 
            REQUEST               T2AA (b3,j3,b2,j2) j2
            REQUEST               R2AA (b3,j3,b2,j2) j2
            DO j
               tjj (j,j2) = Ljbjb (j,b2,j3,b3) * T2AA (b3,j3,b2,j2)
               tpp (j,j2) = Ljbjb (j,b2,j3,b3) * R2AA (b3,j3,b2,j2)
               LT2L2_jj (j,j2) += tjj (j,j2)
               LR2L2_jj (j,j2) += tpp (j,j2)
               L_Y_jj   (j,j2) += tjj (j,j2)
               L_Z_jj   (j,j2) += tpp (j,j2)
            ENDDO j
            DO b
               tbj  (b,j2)  = Lbbjb  (b,b2,j3,b3) * R2AA (b3,j3,b2,j2)
               t1bj (b,j2)  = L1bbjb (b,b2,j3,b3) * T2AA (b3,j3,b2,j2)
               t2bj (b,j2)  = Lbbjb  (b,b2,j3,b3) * T2AA (b3,j3,b2,j2)
               tbj  (b,j2) += t1bj (b,j2)
               L_Z1_bj (b,j2) -= tbj  (b,j2)
               L_Z2_bj (b,j2) -= t2bj (b,j2)
            ENDDO b
         ENDDO j2
         DEALLOCATE  L1bbjb (*,b2,j3,b3)
         DEALLOCATE  Lbbjb  (*,b2,j3,b3)
         DEALLOCATE  Ljbjb  (*,b2,j3,b3)
      ENDPARDO  j3, b2, b3

      PARDO  i3, b2, a3
         ALLOCATE  Ljbia  (*,b2,i3,a3)
         ALLOCATE  Lbbia  (*,b2,i3,a3)
         ALLOCATE  L1bbia (*,b2,i3,a3)
         DO j
            REQUEST               L2AB (i3,a3,j,b2) j
            Ljbia (j,b2,i3,a3)  = L2AB (i3,a3,j,b2)
            Ljbia (j,b2,i3,a3) *= LRNORM
            DO b
               GET  R1A (b,j)
               tqqpp  (b,b2,i3,a3)  = LT1A (b,j) * Ljbia (j,b2,i3,a3)
               t1qqpp (b,b2,i3,a3)  = R1A  (b,j) * Ljbia (j,b2,i3,a3)
               Lbbia  (b,b2,i3,a3) += tqqpp  (b,b2,i3,a3)
               L1bbia (b,b2,i3,a3) += t1qqpp (b,b2,i3,a3)
            ENDDO b
         ENDDO j
         DO j2 
            REQUEST  T2AB (a3,i3,b2,j2) j2
            REQUEST  R2AB (a3,i3,b2,j2) j2
            DO j
               tjj (j,j2) = Ljbia (j,b2,i3,a3) * T2AB (a3,i3,b2,j2)
               tpp (j,j2) = Ljbia (j,b2,i3,a3) * R2AB (a3,i3,b2,j2)
               LT2L2_jj (j,j2) += tjj (j,j2)
               LR2L2_jj (j,j2) += tpp (j,j2)
               L_Y_jj   (j,j2) += tjj (j,j2)
               L_Z_jj   (j,j2) += tpp (j,j2)
            ENDDO j
            DO b
               tbj  (b,j2)  = Lbbia  (b,b2,i3,a3) * R2AB (a3,i3,b2,j2)
               t1bj (b,j2)  = L1bbia (b,b2,i3,a3) * T2AB (a3,i3,b2,j2)
               t2bj (b,j2)  = Lbbia  (b,b2,i3,a3) * T2AB (a3,i3,b2,j2)
               tbj  (b,j2) += t1bj (b,j2)
               L_Z1_bj (b,j2) -= tbj  (b,j2)
               L_Z2_bj (b,j2) -= t2bj (b,j2)
            ENDDO b
         ENDDO j2
         DEALLOCATE  L1bbjb (*,b2,i3,a3)
         DEALLOCATE  Lbbjb  (*,b2,i3,a3)
         DEALLOCATE  Ljbjb  (*,b2,i3,a3)
      ENDPARDO  i3, b2, a3
#
#
#      Z intermediates for Dijab
#
#
      PARDO  a2, i2, a
         GET  R1A (a,i2)
         GET  L1A (i2,a2)
         taa (a,a2)  = R1A (a,i2) * L1A (i2,a2)
         taa (a,a2) *= LRNORM
         DO i
            tai (a,i) = taa (a,a2) * LT1A (a2,i)
            L_Z1_ai (a,i) -= tai (a,i)
         ENDDO i
      ENDPARDO  a2, i2, a

      PARDO  b2, j2, b
         GET  R1A (b,j2)
         GET  L1A (j2,b2)
         tbb (b,b2)  = R1A (b,j2) * L1A (j2,b2)
         tbb (b,b2) *= LRNORM
         DO j
            tbj (b,j) = tbb (b,b2) * LT1A (b2,j)
            L_Z1_bj (b,j) -= tbj (b,j)
         ENDDO j
      ENDPARDO  b2, j2, b

      PARDO  a2, i2, i
         GET  R1A (a2,i)
         GET  L1A (i2,a2)
         tii (i2,i)  = L1A (i2,a2) * R1A (a2,i)
         tii (i2,i) *= LRNORM
         DO a
            tai (a,i) = LT1A (a,i2) * tii (i2,i)
            L_Z1_ai (a,i) -= tai (a,i)
         ENDDO a
      ENDPARDO  a2, i2, i

      PARDO  b2, j2, j
         GET  R1A (b2,j)
         GET  L1A (j2,b2)
         tjj (j2,j)  = L1A (j2,b2) * R1A (b2,j)
         tjj (j2,j) *= LRNORM
         DO b
            tbj (b,j) = LT1A (b,j2) * tjj (j2,j)
            L_Z1_bj (b,j) -= tbj (b,j)
         ENDDO b
      ENDPARDO  b2, j2, j

      PARDO  a2, i2, a
         GET  L1A (i2,a2)
         taa (a,a2)  = LT1A (a,i2) * L1A (i2,a2)
         taa (a,a2) *= LRNORM
         DO i
            tai (a,i) = taa (a,a2) * LT1A (a2,i)
            L_Z2_ai (a,i) -= tai (a,i)
         ENDDO i
      ENDPARDO  a2, i2, a
      
      PARDO  b2, j2, b
         GET  L1A (j2,b2)
         tbb (b,b2)  = LT1A (b,j2) * L1A (j2,b2)
         tbb (b,b2) *= LRNORM
         DO j
            tbj (b,j) = tbb (b,b2) * LT1A (b2,j)
            L_Z2_bj (b,j) -= tbj (b,j)
         ENDDO j
      ENDPARDO  b2, j2, b

      PARDO  a, i
         GET          L1A (i,a)
         tai (a,i)  = L1A (i,a)
         tia (i,a)  = L1A (i,a)
         tai (a,i) *= LRNORM
         tia (i,a) *= LRNORM
         DO i2
            GET  R1A (a,i2)
            tii  (i,i2)  = tia (i,a) * LT1A (a,i2)
            t1ii (i,i2)  = tia (i,a) * R1A  (a,i2)
            L_Y_ii (i,i2) += tii  (i,i2)
            L_Z_ii (i,i2) += t1ii (i,i2)
         ENDDO i2
         DO a2
            GET  R1A (a2,i)
            taa  (a,a2) = tai (a,i) * LT1A (a2,i)
            t1aa (a,a2) = tai (a,i) * R1A  (a2,i)
            L_Y_aa (a,a2) += taa  (a,a2)
            L_Z_aa (a,a2) += t1aa (a,a2)
         ENDDO a2
      ENDPARDO  a, i

      PARDO  b, j
         GET          L1A (j,b)
         tbj (b,j)  = L1A (j,b)
         tjb (j,b)  = L1A (j,b)
         tbj (b,j) *= LRNORM
         tjb (j,b) *= LRNORM
         DO j2
            GET  R1A (b,j2)
            tjj  (j,j2)  = tjb (j,b) * LT1A (b,j2)
            t1jj (j,j2)  = tjb (j,b) * R1A  (b,j2)
            L_Y_jj (j,j2) += tjj  (j,j2)
            L_Z_jj (j,j2) += t1jj (j,j2)
         ENDDO j2
         DO b2
            GET  R1A (b2,j)
            tbb  (b,b2) = tbj (b,j) * LT1A (b2,j)
            t1bb (b,b2) = tbj (b,j) * R1A  (b2,j)
            L_Y_bb (b,b2) += tbb  (b,b2)
            L_Z_bb (b,b2) += t1bb (b,b2)
         ENDDO b2
      ENDPARDO  b, j
#
#
#     R2 * L2 --> R2L2_aa
#     T2 * L2 --> T2L2_aa
#
#
      PARDO  a3, i2, i3
         ALLOCATE  Laiai  (*,i2,a3,i3)
         ALLOCATE  Liiai  (*,i2,a3,i3)
         ALLOCATE  L1iiai (*,i2,a3,i3)
         DO a
            REQUEST               L2AA (i2,a,i3,a3) a
            Laiai (a,i2,a3,i3)  = L2AA (i2,a,i3,a3)
            Laiai (a,i2,a3,i3) *= LRNORM
            Laiai (a,i2,a3,i3) *= -0.5
            DO i
               GET  R1A (a,i)
               tpppp  (i,i2,a3,i3)  = LT1A (a,i) * Laiai (a,i2,a3,i3)
               t1pppp (i,i2,a3,i3)  = R1A  (a,i) * Laiai (a,i2,a3,i3)
               Liiai  (i,i2,a3,i3) += tpppp (i,i2,a3,i3)
               L1iiai (i,i2,a3,i3) += t1pppp (i,i2,a3,i3)
            ENDDO i
         ENDDO a
         DO a2
            REQUEST                R2AA (a3,i3,a2,i2) a2
            REQUEST                T2AA (a3,i3,a2,i2) a2
            tiaia  (i2,a3,i3,a2) = R2AA (a3,i3,a2,i2)
            t1iaia (i2,a3,i3,a2) = T2AA (a3,i3,a2,i2)
            DO a
               taa (a,a2)  = Laiai (a,i2,a3,i3) * t1iaia (i2,a3,i3,a2)
               tpp (a,a2)  = Laiai (a,i2,a3,i3) * tiaia  (i2,a3,i3,a2)
               LT2L2_aa (a,a2) += taa (a,a2)
               LR2L2_aa (a,a2) += tpp (a,a2)
               L_Y_aa   (a,a2) -= taa (a,a2)
               L_Z_aa   (a,a2) -= tpp (a,a2)
            ENDDO a
            DO i
               tai  (a2,i)  = Liiai  (i,i2,a3,i3) * tiaia  (i2,a3,i3,a2)
               t1ai (a2,i)  = L1iiai (i,i2,a3,i3) * t1iaia (i2,a3,i3,a2)
               t2ai (a2,i)  = Liiai  (i,i2,a3,i3) * t1iaia (i2,a3,i3,a2)
               tai  (a2,i) += t1ai (a2,i)
               L_Z1_ai (a2,i) += tai  (a2,i)
               L_Z2_ai (a2,i) += t2ai (a2,i)
            ENDDO i
         ENDDO a2
         DEALLOCATE  L1iiai (*,i2,a3,i3)
         DEALLOCATE  Liiai  (*,i2,a3,i3)
         DEALLOCATE  Laiai  (*,i2,a3,i3)
      ENDPARDO  a3, i2, i3

      PARDO  b3, i2, j3
         ALLOCATE  Laibj  (*,i2,b3,j3)
         ALLOCATE  Liibj  (*,i2,b3,j3)
         ALLOCATE  L1iibj (*,i2,b3,j3)
         DO a
            REQUEST               L2AB (i2,a,j3,b3) a
            Laibj (a,i2,b3,j3)  = L2AB (i2,a,j3,b3)
            Laibj (a,i2,b3,j3) *= LRNORM
            Laibj (a,i2,b3,j3) *= -1.0
            DO i
               GET  R1A (a,i)
               tppqq  (i,i2,b3,j3)  = LT1A (a,i) * Laibj (a,i2,b3,j3)
               t1ppqq (i,i2,b3,j3)  = R1A  (a,i) * Laibj (a,i2,b3,j3)
               Liibj  (i,i2,b3,j3) += tppqq  (i,i2,b3,j3)
               L1iibj (i,i2,b3,j3) += t1ppqq (i,i2,b3,j3)
            ENDDO i
         ENDDO a
         DO a2
            REQUEST                R2AB  (a2,i2,b3,j3) a2
            REQUEST                T2AB  (a2,i2,b3,j3) a2
            tpqqp  (i2,b3,j3,a2) = R2AB  (a2,i2,b3,j3)
            t1pqqp (i2,b3,j3,a2) = T2AB  (a2,i2,b3,j3)
            DO a
               taa (a,a2)  = Laibj (a,i2,b3,j3) * t1pqqp (i2,b3,j3,a2)
               tpp (a,a2)  = Laibj (a,i2,b3,j3) * tpqqp  (i2,b3,j3,a2)
               LT2L2_aa (a,a2) += taa (a,a2)
               LR2L2_aa (a,a2) += tpp (a,a2)
               L_Y_aa   (a,a2) -= taa (a,a2)
               L_Z_aa   (a,a2) -= tpp (a,a2)
            ENDDO a
            DO i
               tai  (a2,i)  = Liibj  (i,i2,b3,j3) * tpqqp  (i2,b3,j3,a2)
               t1ai (a2,i)  = L1iibj (i,i2,b3,j3) * t1pqqp (i2,b3,j3,a2)
               t2ai (a2,i)  = Liibj  (i,i2,b3,j3) * t1pqqp (i2,b3,j3,a2)
               tai  (a2,i) += t1ai (a2,i)
               L_Z1_ai (a2,i) += tai  (a2,i)
               L_Z2_ai (a2,i) += t2ai (a2,i)
            ENDDO i
         ENDDO a2
         DEALLOCATE  L1iibj (*,i2,b3,j3)
         DEALLOCATE  Liibj  (*,i2,b3,j3)
         DEALLOCATE  Laibj  (*,i2,b3,j3)
      ENDPARDO  b3, i2, j3

      PARDO  b3, j2, j3          
         ALLOCATE  Lbjbj  (*,j2,b3,j3) 
         ALLOCATE  Ljjbj  (*,j2,b3,j3)
         ALLOCATE  L1jjbj (*,j2,b3,j3)
         DO b
            REQUEST               L2AA (j2,b,j3,b3) b
            Lbjbj (b,j2,b3,j3)  = L2AA (j2,b,j3,b3)
            Lbjbj (b,j2,b3,j3) *= LRNORM
            Lbjbj (b,j2,b3,j3) *= -0.5
            DO j
               GET  R1A (b,j)
               tqqqq  (j,j2,b3,j3)  = LT1A (b,j) * Lbjbj (b,j2,b3,j3)
               t1qqqq (j,j2,b3,j3)  = R1A  (b,j) * Lbjbj (b,j2,b3,j3)
               Ljjbj  (j,j2,b3,j3) += tqqqq  (j,j2,b3,j3)
               L1jjbj (j,j2,b3,j3) += t1qqqq (j,j2,b3,j3)
            ENDDO j
         ENDDO b
         DO b2
            REQUEST                R2AA (b3,j3,b2,j2) b2
            REQUEST                T2AA (b3,j3,b2,j2) b2
            tjbjb  (j2,b3,j3,b2) = R2AA (b3,j3,b2,j2)
            t1jbjb (j2,b3,j3,b2) = T2AA (b3,j3,b2,j2)
            DO b
               tbb (b,b2)  = Lbjbj (b,j2,b3,j3) * t1jbjb (j2,b3,j3,b2)
               tpp (b,b2)  = Lbjbj (b,j2,b3,j3) * tjbjb  (j2,b3,j3,b2)
               LT2L2_bb (b,b2) += tbb (b,b2)
               LR2L2_bb (b,b2) += tpp (b,b2)
               L_Y_bb   (b,b2) -= tbb (b,b2)
               L_Z_bb   (b,b2) -= tpp (b,b2)
            ENDDO b
            DO j
               tbj  (b2,j)  = Ljjbj  (j,j2,b3,j3) * tjbjb  (j2,b3,j3,b2)
               t1bj (b2,j)  = L1jjbj (j,j2,b3,j3) * t1jbjb (j2,b3,j3,b2)
               t2bj (b2,j)  = Ljjbj  (j,j2,b3,j3) * t1jbjb (j2,b3,j3,b2)
	       tbj  (b2,j) += t1bj (b2,j)
               L_Z1_bj (b2,j) += tbj  (b2,j)
               L_Z2_bj (b2,j) += t2bj (b2,j)
            ENDDO j
         ENDDO b2
         DEALLOCATE  L1jjbj (*,j2,b3,j3)
         DEALLOCATE  Ljjbj  (*,j2,b3,j3)
         DEALLOCATE  Lbjbj  (*,j2,b3,j3)
      ENDPARDO  b3, j2, j3

      PARDO  a3, j2, i3
         ALLOCATE  Lbjai  (*,j2,a3,i3)
         ALLOCATE  Ljjai  (*,j2,a3,i3)
         ALLOCATE  L1jjai (*,j2,a3,i3)
         DO b
            REQUEST               L2AB (i3,a3,j2,b) b
            Lbjai (b,j2,a3,i3)  = L2AB (i3,a3,j2,b)
            Lbjai (b,j2,a3,i3) *= LRNORM
            Lbjai (b,j2,a3,i3) *= -1.0
            DO j
               GET  R1A (b,j)
               tqqpp  (j,j2,a3,i3)  = LT1A (b,j) * Lbjai (b,j2,a3,i3)
               t1qqpp (j,j2,a3,i3)  = R1A  (b,j) * Lbjai (b,j2,a3,i3)
               Ljjai  (j,j2,a3,i3) += tqqpp (j,j2,a3,i3)
               L1jjai (j,j2,a3,i3) += t1qqpp (j,j2,a3,i3)
            ENDDO j
         ENDDO b
         DO b2
            REQUEST                R2AB (a3,i3,b2,j2) b2
            REQUEST                T2AB (a3,i3,b2,j2) b2
            tqppq  (j2,a3,i3,b2) = R2AB (a3,i3,b2,j2)
            t1qppq (j2,a3,i3,b2) = T2AB (a3,i3,b2,j2)
            DO b
               tbb (b,b2)  = Lbjai (b,j2,a3,i3) * t1qppq (j2,a3,i3,b2)
               tpp (b,b2)  = Lbjai (b,j2,a3,i3) * tqppq  (j2,a3,i3,b2)
               LT2L2_bb (b,b2) += tbb (b,b2)
               LR2L2_bb (b,b2) += tpp (b,b2)
               L_Y_bb   (b,b2) -= tbb (b,b2)
               L_Z_bb   (b,b2) -= tpp (b,b2)
            ENDDO b
            DO j
               tbj  (b2,j)  = Ljjai  (j,j2,a3,i3) * tqppq  (j2,a3,i3,b2)
               t1bj (b2,j)  = L1jjai (j,j2,a3,i3) * t1qppq (j2,a3,i3,b2)
               t2bj (b2,j)  = Ljjai  (j,j2,a3,i3) * t1qppq (j2,a3,i3,b2)
               tbj  (b2,j) += t1bj (b2,j)
               L_Z1_bj (b2,j) += tbj  (b2,j)
               L_Z2_bj (b2,j) += t2bj (b2,j)
            ENDDO j
         ENDDO b2
         DEALLOCATE  L1jjai (*,j2,a3,i3)
         DEALLOCATE  Ljjai  (*,j2,a3,i3)
         DEALLOCATE  Lbjbj  (*,j2,a3,i3)
      ENDPARDO  a3, j2, i3       
#
#
#      Tau intermediates
#
#
      PARDO  a, a1, i, i1
         REQUEST               R2AA (a,i,a1,i1) a
         GET                   R1A  (a,i)
         GET                   R1A  (a1,i1)
         GET                   R1A  (a,i1)
         GET                   R1A  (a1,i)
         t1ai (a1,i)         = R1A  (a1,i)
         t2ai (a,i1)         = R1A  (a,i1) 
         t3ai (a1,i1)        = R1A  (a1,i1)
         
         taiai  (a,i,a1,i1)  = R1A  (a,i)  ^ LT1A (a1,i1)
         t1aiai (a,i,a1,i1)  = LT1A (a,i)  ^ t3ai (a1,i1)
         t2aiai (a,i1,a1,i)  = t2ai (a,i1) ^ LT1A (a1,i)
         t3aiai (a,i1,a1,i)  = LT1A (a,i1) ^ t1ai (a1,i)
         
         taiai  (a,i,a1,i1) += t1aiai (a,i,a1,i1)
         taiai  (a,i,a1,i1) += R2AA   (a,i,a1,i1)
         t2aiai (a,i1,a1,i) += t3aiai (a,i1,a1,i)
         t2aiai (a,i1,a1,i) *= -1.0
         tpppp  (a,i,a1,i1)  = t2aiai (a,i1,a1,i)

         taiai  (a,i,a1,i1) += tpppp (a,i,a1,i1)
         tiiaa  (i,i1,a,a1)  = taiai (a,i,a1,i1)
         PREPARE  RTAU_aa (a,i,a1,i1) += taiai (a,i,a1,i1)

         DO i2
         DO i3
            REQUEST               L2AA (i2,a,i3,a1) i3
            taaii (a,a1,i2,i3)  = L2AA (i2,a,i3,a1)
            tiiii (i,i1,i2,i3)  = tiiaa (i,i1,a,a1) * taaii (a,a1,i2,i3)
            tiiii (i,i1,i2,i3) *= LRNORM
            tiiii (i,i1,i2,i3) *= 0.5
            PUT  L2RTAU_iiii (i,i1,i2,i3) += tiiii (i,i1,i2,i3)
         ENDDO i3
         ENDDO i2
      ENDPARDO  a, a1, i, i1

      PARDO  a, b1, i, j1
         REQUEST               R2AB (a,i,b1,j1) a
         GET                   R1A  (a,i)
         GET                   R1A  (b1,j1)
         tbj (b1,j1)         = R1A  (b1,j1)

         taiai  (a,i,b1,j1)  = R1A  (a,i)  ^ LT1A (b1,j1)
         t1aiai (a,i,b1,j1)  = LT1A (a,i)  ^ tbj  (b1,j1)
         taiai  (a,i,b1,j1) += t1aiai (a,i,b1,j1)
         taiai  (a,i,b1,j1) += R2AB   (a,i,b1,j1)
         tiiaa  (i,j1,a,b1)  = taiai (a,i,b1,j1)

         PREPARE  RTAU_ab (a,i,b1,j1) += taiai (a,i,b1,j1)

         DO i2
         DO j3
            REQUEST               L2AB (i2,a,j3,b1) j3
            tabij (a,b1,i2,j3)  = L2AB (i2,a,j3,b1)
            tijij (i,j1,i2,j3)  = tiiaa (i,j1,a,b1) * tabij (a,b1,i2,j3)
            tijij (i,j1,i2,j3) *= LRNORM
            PUT  L2RTAU_ijij (i,j1,i2,j3) += tijij (i,j1,i2,j3)
         ENDDO j3
         ENDDO i2
      ENDPARDO  a, b1, i, j1

      PARDO  a, a1, i, i1
         REQUEST               T2AA (a,i,a1,i1) i1
         tai  (a1,i1)        = LT1A (a1,i1)
         t1ai (a1,i)         = LT1A (a1,i)

         taiai  (a,i,a1,i1)  = LT1A (a,i)  ^ tai  (a1,i1)
         t1aiai (a,i,a1,i1)  = LT1A (a,i1) ^ t1ai (a1,i)
         taiai  (a,i,a1,i1) += T2AA (a,i,a1,i1)
         taiai  (a,i,a1,i1) -= t1aiai(a,i,a1,i1)
         tiiaa  (i,i1,a,a1)  = taiai (a,i,a1,i1)

         PREPARE  TAU_aa (a,i,a1,i1) += taiai (a,i,a1,i1)

         DO i2
         DO i3
            REQUEST               L2AA (i2,a,i3,a1) i3
            taaii (a,a1,i2,i3)  = L2AA (i2,a,i3,a1)
            tiiii (i,i1,i2,i3)  = tiiaa (i,i1,a,a1) * taaii (a,a1,i2,i3)
            tiiii (i,i1,i2,i3) *= LRNORM
            tiiii (i,i1,i2,i3) *= 0.5
            PUT  L2TTAU_iiii (i,i1,i2,i3) += tiiii (i,i1,i2,i3)
         ENDDO i3
         ENDDO i2
      ENDPARDO  a, a1, i, i1

      PARDO  a, b, i, j
         REQUEST            T2AB (a,i,b,j) j
         tbj (b,j)        = LT1A (b,j)
         taibj (a,i,b,j)  = LT1A (a,i) ^ tbj (b,j)
         taibj (a,i,b,j) += T2AB (a,i,b,j)
         tijab (i,j,a,b)  = taibj (a,i,b,j)

         PREPARE  TAU_ab (a,i,b,j) += taibj (a,i,b,j)
         DO i1
         DO j1
            REQUEST              L2AB (i1,a,j1,b) j1
            tabij (a,b,i1,j1)  = L2AB (i1,a,j1,b)
            tijij (i,j,i1,j1)  = tijab (i,j,a,b) * tabij (a,b,i1,j1)
            tijij (i,j,i1,j1) *= LRNORM
            PUT  L2TTAU_ijij (i,j,i1,j1) += tijij (i,j,i1,j1)
         ENDDO j1
         ENDDO i1
      ENDPARDO  a, b, i, j

      CREATE  DIS_OO1_A
      CREATE  DIS_OO2_A
      CREATE  DIS_OO3_A
      CREATE  DIS_OO4_A
      CREATE  DIS_OO1_B
      CREATE  DIS_OO2_B
      CREATE  DIS_OO3_B
      CREATE  DIS_OO4_B
      CREATE  DIS_VV1_A
      CREATE  DIS_VV2_A
      CREATE  DIS_VV3_A
      CREATE  DIS_VV4_A
      CREATE  DIS_VV1_B
      CREATE  DIS_VV2_B
      CREATE  DIS_VV3_B
      CREATE  DIS_VV4_B
      CREATE  DIS_VO1_A
      CREATE  DIS_VO2_A
      CREATE  DIS_VO3_A
      CREATE  DIS_VO4_A
      CREATE  DIS_VO1_B
      CREATE  DIS_VO2_B
      CREATE  DIS_VO3_B
      CREATE  DIS_VO4_B
      EXECUTE  SIP_BARRIER

      DO a
      DO a1
         taa  (a,a1) = LR2L2_aa (a,a1)
         t1aa (a,a1) = LT2L2_aa (a,a1)
         taa2 (a,a1) = L_Y_aa   (a,a1)
         t3aa (a,a1) = L_Z_aa   (a,a1)
         PUT  DIS_VV1_A (a,a1) = taa  (a,a1)
         PUT  DIS_VV2_A (a,a1) = t1aa (a,a1)
         PUT  DIS_VV3_A (a,a1) = taa2 (a,a1)
         PUT  DIS_VV4_A (a,a1) = t3aa (a,a1)
      ENDDO a1
      ENDDO a

      DO b
      DO b1
         tbb  (b,b1) = LR2L2_bb (b,b1)
         t1bb (b,b1) = LT2L2_bb (b,b1)
         tbb2 (b,b1) = L_Y_bb   (b,b1)
         t3bb (b,b1) = L_Z_bb   (b,b1)
         PUT  DIS_VV1_B (b,b1) = tbb  (b,b1)
         PUT  DIS_VV2_B (b,b1) = t1bb (b,b1)
         PUT  DIS_VV3_B (b,b1) = tbb2 (b,b1)
         PUT  DIS_VV4_B (b,b1) = t3bb (b,b1)
      ENDDO b1
      ENDDO b

      DO a
      DO i
         tai  (a,i) = LR1L2_ai (a,i)
         t1ai (a,i) = LR2L1_ai (a,i)
         t2ai (a,i) = L_Z1_ai  (a,i)
         t3ai (a,i) = L_Z2_ai  (a,i)
         PUT  DIS_VO1_A (a,i) = tai  (a,i)
         PUT  DIS_VO2_A (a,i) = t1ai (a,i)
         PUT  DIS_VO3_A (a,i) = t2ai (a,i)
         PUT  DIS_VO4_A (a,i) = t3ai (a,i)
      ENDDO i
      ENDDO a

      DO b
      DO j
         tbj  (b,j) = LR1L2_bj (b,j)
         t1bj (b,j) = LR2L1_bj (b,j)
         t2bj (b,j) = L_Z1_bj  (b,j)
         t3bj (b,j) = L_Z2_bj  (b,j)
         PUT  DIS_VO1_B (b,j) = tbj  (b,j)
         PUT  DIS_VO2_B (b,j) = t1bj (b,j)
         PUT  DIS_VO3_B (b,j) = t2bj (b,j)
         PUT  DIS_VO4_B (b,j) = t3bj (b,j)
      ENDDO j
      ENDDO b

      DO i
      DO i1
         tii  (i,i1) = LR2L2_ii (i,i1)
         t1ii (i,i1) = LT2L2_ii (i,i1)
         t2ii (i,i1) = L_Y_ii   (i,i1)
         t3ii (i,i1) = L_Z_ii   (i,i1)
         PUT  DIS_OO1_A (i,i1) = tii  (i,i1)
         PUT  DIS_OO2_A (i,i1) = t1ii (i,i1)
         PUT  DIS_OO3_A (i,i1) = t2ii (i,i1)
         PUT  DIS_OO4_A (i,i1) = t3ii (i,i1)
      ENDDO i1
      ENDDO i

      DO j
      DO j1
         tjj  (j,j1) = LR2L2_jj (j,j1)
         t1jj (j,j1) = LT2L2_jj (j,j1)
         t2jj (j,j1) = L_Y_jj   (j,j1)
         t3jj (j,j1) = L_Z_jj   (j,j1)
         PUT  DIS_OO1_B (j,j1) = tjj  (j,j1)
         PUT  DIS_OO2_B (j,j1) = t1jj (j,j1)
         PUT  DIS_OO3_B (j,j1) = t2jj (j,j1)
         PUT  DIS_OO4_B (j,j1) = t3jj (j,j1)
      ENDDO j1
      ENDDO j

      EXECUTE  SIP_BARRIER

      DO a
      DO a1
         GET           DIS_VV1_A (a,a1)
         GET           DIS_VV2_A (a,a1)
         GET           DIS_VV3_A (a,a1)
         GET           DIS_VV4_A (a,a1)
         taa  (a,a1) = DIS_VV1_A (a,a1)
         t1aa (a,a1) = DIS_VV2_A (a,a1)
         taa2 (a,a1) = DIS_VV3_A (a,a1)
         t3aa (a,a1) = DIS_VV4_A (a,a1)
         LR2L2_aa (a,a1) =  taa  (a,a1)
         LT2L2_aa (a,a1) =  t1aa (a,a1)
         L_Y_aa   (a,a1) =  taa2 (a,a1)
         L_Z_aa   (a,a1) =  t3aa (a,a1)
      ENDDO a1
      ENDDO a

      DO b
      DO b1
         GET           DIS_VV1_B (b,b1)
         GET           DIS_VV2_B (b,b1)
         GET           DIS_VV3_B (b,b1)
         GET           DIS_VV4_B (b,b1)
         tbb  (b,b1) = DIS_VV1_B (b,b1)
         t1bb (b,b1) = DIS_VV2_B (b,b1)
         tbb2 (b,b1) = DIS_VV3_B (b,b1)
         t3bb (b,b1) = DIS_VV4_B (b,b1)
         LR2L2_bb (b,b1) =  tbb  (b,b1)
         LT2L2_bb (b,b1) =  t1bb (b,b1)
         L_Y_bb   (b,b1) =  tbb2 (b,b1)
         L_Z_bb   (b,b1) =  t3bb (b,b1)
      ENDDO b1
      ENDDO b

      DO a
      DO i
         GET          DIS_VO1_A (a,i)
         GET          DIS_VO2_A (a,i)
         GET          DIS_VO3_A (a,i)
         GET          DIS_VO4_A (a,i)
         tai  (a,i) = DIS_VO1_A (a,i)
         t1ai (a,i) = DIS_VO2_A (a,i)
         t2ai (a,i) = DIS_VO3_A (a,i)
         t3ai (a,i) = DIS_VO4_A (a,i)
         LR1L2_ai (a,i) = tai  (a,i)
         LR2L1_ai (a,i) = t1ai (a,i)
         L_Z1_ai  (a,i) = t2ai (a,i)
         L_Z2_ai  (a,i) = t3ai (a,i)
      ENDDO i
      ENDDO a

      DO b
      DO j
         GET          DIS_VO1_B (b,j)
         GET          DIS_VO2_B (b,j)
         GET          DIS_VO3_B (b,j)
         GET          DIS_VO4_B (b,j)
         tbj  (b,j) = DIS_VO1_B (b,j)
         t1bj (b,j) = DIS_VO2_B (b,j)
         t2bj (b,j) = DIS_VO3_B (b,j)
         t3bj (b,j) = DIS_VO4_B (b,j)
         LR1L2_bj (b,j) = tbj  (b,j)
         LR2L1_bj (b,j) = t1bj (b,j)
         L_Z1_bj  (b,j) = t2bj (b,j)
         L_Z2_bj  (b,j) = t3bj (b,j)
      ENDDO j
      ENDDO b

      DO i
      DO i1
         GET           DIS_OO1_A (i,i1)
         GET           DIS_OO2_A (i,i1)
         GET           DIS_OO3_A (i,i1)
         GET           DIS_OO4_A (i,i1)
         tii  (i,i1) = DIS_OO1_A (i,i1)
         t1ii (i,i1) = DIS_OO2_A (i,i1)
         t2ii (i,i1) = DIS_OO3_A (i,i1)
         t3ii (i,i1) = DIS_OO4_A (i,i1)
         LR2L2_ii (i,i1) =  tii  (i,i1)
         LT2L2_ii (i,i1) =  t1ii (i,i1)
         L_Y_ii   (i,i1) =  t2ii (i,i1)
         L_Z_ii   (i,i1) =  t3ii (i,i1)
      ENDDO i1
      ENDDO i

      DO j
      DO j1
         GET           DIS_OO1_B (j,j1)
         GET           DIS_OO2_B (j,j1)
         GET           DIS_OO3_B (j,j1)
         GET           DIS_OO4_B (j,j1)
         tjj  (j,j1) = DIS_OO1_B (j,j1)
         t1jj (j,j1) = DIS_OO2_B (j,j1)
         t2jj (j,j1) = DIS_OO3_B (j,j1)
         t3jj (j,j1) = DIS_OO4_B (j,j1)
         LR2L2_jj (j,j1) =  tjj  (j,j1)
         LT2L2_jj (j,j1) =  t1jj (j,j1)
         L_Y_jj   (j,j1) =  t2jj (j,j1)
         L_Z_jj   (j,j1) =  t3jj (j,j1)
      ENDDO j1 
      ENDDO j 

      EXECUTE  SIP_BARRIER
      DELETE  DIS_OO1_A
      DELETE  DIS_OO2_A
      DELETE  DIS_OO3_A
      DELETE  DIS_OO4_A
      DELETE  DIS_OO1_B
      DELETE  DIS_OO2_B
      DELETE  DIS_OO3_B
      DELETE  DIS_OO4_B
      DELETE  DIS_VV1_A
      DELETE  DIS_VV2_A
      DELETE  DIS_VV3_A
      DELETE  DIS_VV4_A
      DELETE  DIS_VV1_B
      DELETE  DIS_VV2_B
      DELETE  DIS_VV3_B
      DELETE  DIS_VV4_B
      DELETE  DIS_VO1_A
      DELETE  DIS_VO2_A
      DELETE  DIS_VO3_A
      DELETE  DIS_VO4_A
      DELETE  DIS_VO1_B
      DELETE  DIS_VO2_B
      DELETE  DIS_VO3_B
      DELETE  DIS_VO4_B
#
#
#          ...ready!
#     
#     
      ENDPROC  TWO_DENS_INT
#-------------------------------------------------------------------------




#-------------------------------------------------------------------------
#
#     -----------
      PROC  DIJKL
#     -----------
#
#
#        kl          ef    e  f    e  f    kl
#     4 G   = 1/2 ( r   + r  t  + t  r  ) l
#        ij          ij    i  j    i  j    ef
#
#
      PARDO  a2, a3, i1, i2
         ALLOCATE  Laaii (a2,a3,i2,*)
         DO i3
            REQUEST                L2AA (i2,a2,i3,a3) i3
            Laaii (a2,a3,i2,i3)  = L2AA (i2,a2,i3,a3)
            Laaii (a2,a3,i2,i3) *= LRNORM
            Laaii (a2,a3,i2,i3) *= 0.5
         ENDDO i3
         DO i
            REQUEST                RTAU_aa (a2,i,a3,i1) i
            tiiaa  (i,i1,a2,a3)  = RTAU_aa (a2,i,a3,i1)
            DO i3
               tiiii  (i,i1,i2,i3)  = tiiaa  (i,i1,a2,a3) * Laaii (a2,a3,i2,i3)
               PUT  Dijkl_aa (i,i1,i2,i3) += tiiii  (i,i1,i2,i3)
            ENDDO i3
         ENDDO i
         DEALLOCATE  Laaii (a2,a3,i2,*)
      ENDPARDO  a2, a3, i1, i2

      PARDO  a2, b3, j1, i2
         ALLOCATE  Labij (a2,b3,i2,*)
         DO j3
            REQUEST                L2AB (i2,a2,j3,b3) j3
            Labij (a2,b3,i2,j3)  = L2AB (i2,a2,j3,b3) 
            Labij (a2,b3,i2,j3) *= LRNORM
         ENDDO j3 
         DO i
            REQUEST                RTAU_ab (a2,i,b3,j1) i
            tijab  (i,j1,a2,b3)  = RTAU_ab (a2,i,b3,j1)
            DO j3
               tijij (i,j1,i2,j3) = tijab (i,j1,a2,b3) * Labij (a2,b3,i2,j3)
               PUT  Dijkl_ab (i,j1,i2,j3) += tijij (i,j1,i2,j3)
            ENDDO j3
         ENDDO i
         DEALLOCATE  Labij (a2,b3,i2,*)
      ENDPARDO  a2, b3, j1, i2
#
#
#          ...ready!
#     
#     
      ENDPROC  DIJKL
#-------------------------------------------------------------------------




#-------------------------------------------------------------------------
#
#     -----------
      PROC  DABCD
#     -----------
#
#     
#        cd          ab    a  b    a  b    mn
#     4 G   = 1/2 ( r   + r  t  + t  r  ) l
#        ab          mn    m  n    m  n    ab
#
#
      PARDO  i2, i3, a1, a2
         ALLOCATE  Liiaa (i2,i3,a2,*)
         DO a3
            REQUEST                L2AA (i2,a2,i3,a3) a3
            Liiaa (i2,i3,a2,a3)  = L2AA (i2,a2,i3,a3)
            Liiaa (i2,i3,a2,a3) *= 0.5
            Liiaa (i2,i3,a2,a3) *= LRNORM
         ENDDO a3
         DO a
            REQUEST               RTAU_aa (a,i2,a1,i3) a
            taaii  (a,a1,i2,i3) = RTAU_aa (a,i2,a1,i3)
            DO a3
               tpppp (a,a1,a2,a3) = taaii (a,a1,i2,i3) * Liiaa (i2,i3,a2,a3)
               PREPARE  Dabcd_aa (a,a1,a2,a3) += tpppp (a,a1,a2,a3)
            ENDDO a3
         ENDDO a
         DEALLOCATE  Liiaa (i2,i3,a2,*)
      ENDPARDO  i2, i3, a1, a2

      PARDO  i2, j3, b1, a2
         ALLOCATE  Lijab (i2,j3,a2,*)
         DO b3
            REQUEST                L2AB (i2,a2,j3,b3) b3
            Lijab (i2,j3,a2,b3)  = L2AB (i2,a2,j3,b3)
            Lijab (i2,j3,a2,b3) *= LRNORM
         ENDDO b3
         DO a
            REQUEST               RTAU_ab (a,i2,b1,j3) a
            tabij  (a,b1,i2,j3) = RTAU_ab (a,i2,b1,j3)
            DO b3
               tpqpq (a,b1,a2,b3) = tabij (a,b1,i2,j3) * Lijab (i2,j3,a2,b3)
               PREPARE  Dabcd_ab (a,b1,a2,b3) += tpqpq (a,b1,a2,b3)
            ENDDO b3
         ENDDO a
         DEALLOCATE  Lijab (i2,j3,a2,*)
      ENDPARDO  i2, j3, b1, a2
#
#
#          ...ready!
#     
#     
      ENDPROC  DABCD
#-------------------------------------------------------------------------



#-------------------------------------------------------------------------
#
#     -----------
      PROC  DABCI
#     -----------
#
#
#       ab        ab  m       _ab  m
#      D   = 1/2 l   r  + 1/2 r   l  ; Note the transposition of the 1st term
#       ci        mi  c        mi  c
#
#
      PARDO  i2, a, a1, i
         REQUEST               L2AA    (i2,a,i,a1) i2              # DAIBC piece
         REQUEST               RTAU_aa (a,i2,a1,i) i2
         t1aaii (a,a1,i2,i)  = L2AA    (i2,a,i,a1)                 # DAIBC piece
         taaii  (a,a1,i2,i)  = RTAU_aa (a,i2,a1,i)
         t1aaii (a,a1,i2,i) *= LRNORM                              # DAIBC piece
         taaii  (a,a1,i2,i) *= LRNORM
         t1aaii (a,a1,i2,i) *= 0.5                                 # DAIBC piece
         taaii  (a,a1,i2,i) *= 0.5
         DO a2
            GET  L1A (i2,a2)
            GET  R1A (a2,i2)
            tpppp  (a,a1,a2,i)  = taaii  (a,a1,i2,i) * L1A (i2,a2)
            t1pppp (a,a1,a2,i)  = t1aaii (a,a1,i2,i) * R1A (a2,i2) # DAIBC piece
            tpppp  (a,a1,a2,i) += t1pppp (a,a1,a2,i)
            PREPARE  Dabci_aaaa (a,a1,a2,i) += tpppp (a,a1,a2,i)
         ENDDO a2
      ENDPARDO  i2, a, a1, i

      PARDO  i2, a, b1, j
         REQUEST               L2AB    (i2,a,j,b1) i2              # DAIBC piece
         REQUEST               RTAU_ab (a,i2,b1,j) i2
         t1abij (a,b1,i2,j)  = L2AB    (i2,a,j,b1)                 # DAIBC piece
         tabij  (a,b1,i2,j)  = RTAU_ab (a,i2,b1,j)
         t1abij (a,b1,i2,j) *= LRNORM                              # DAIBC piece
         tabij  (a,b1,i2,j) *= LRNORM
         t1abij (a,b1,i2,j) *= 0.5                                 # DAIBC piece
         tabij  (a,b1,i2,j) *= 0.5
         DO a2
            GET  R1A (a2,i2)                                       # DAIBC piece
            GET  L1A (i2,a2)
            tpqpq  (a,b1,a2,j)  = t1abij (a,b1,i2,j) * R1A (a2,i2) # DAIBC piece
            t1pqpq (a,b1,a2,j)  = tabij  (a,b1,i2,j) * L1A (i2,a2)
            t1pqpq (a,b1,a2,j) += tpqpq  (a,b1,a2,j)
            PREPARE  Dabci_abab (a,b1,a2,j) += t1pqpq (a,b1,a2,j)
         ENDDO a2
      ENDPARDO  i2, a, b1, j

      PARDO  j2, b, a1, i
         REQUEST               L2AB    (i,a1,j2,b) j2              # DAIBC piece
         REQUEST               RTAU_ab (a1,i,b,j2) j2
         t1baji (b,a1,j2,i)  = L2AB    (i,a1,j2,b)                 # DAIBC piece
         tbaji  (b,a1,j2,i)  = RTAU_ab (a1,i,b,j2)
         t1baji (b,a1,j2,i) *= LRNORM                              # DAIBC piece
         tbaji  (b,a1,j2,i) *= LRNORM
         t1baji (b,a1,j2,i) *= 0.5                                 # DAIBC piece
         tbaji  (b,a1,j2,i) *= 0.5
         DO b2
            GET  R1A (b2,j2)                                       # DAIBC piece
            GET  L1A (j2,b2)
            t1qpqp (b,a1,b2,i)  = t1baji (b,a1,j2,i) * R1A (b2,j2) # DAIBC piece
            tqpqp  (b,a1,b2,i)  = tbaji  (b,a1,j2,i) * L1A (j2,b2)
            tqpqp  (b,a1,b2,i) += t1qpqp (b,a1,b2,i)
            PREPARE  Dabci_baba (b,a1,b2,i) += tqpqp (b,a1,b2,i)
         ENDDO b2
      ENDPARDO  j2, b, a1, i
#
#
#       ab        mn  e _ab        mn  e _ab
#      G   = 1/2 l   t  r   + 1/2 l   r  t
#       ci        ce  i  mn        ce  i  mn
#
#
      PARDO  i2, a2, i3, i
         tiiai  (i2,i3,a2,i) = 0.0
         t1iiai (i2,i3,a2,i) = 0.0
         DO a3
            REQUEST                L2AA (i2,a2,i3,a3) a3
            GET                    T1A  (a3,i)
            GET                    R1A  (a3,i)
            tiiaa  (i2,i3,a2,a3) = L2AA (i2,a2,i3,a3)
            t2pppp (i2,i3,a2,i)  = tiiaa (i2,i3,a2,a3) * T1A (a3,i)
            t3pppp (i2,i3,a2,i)  = tiiaa (i2,i3,a2,a3) * R1A (a3,i)
            tiiai  (i2,i3,a2,i) += t2pppp (i2,i3,a2,i)
            t1iiai (i2,i3,a2,i) += t3pppp (i2,i3,a2,i)
         ENDDO a3
         DO a
         DO a1
            REQUEST               RTAU_aa (a,i2,a1,i3) a1
            REQUEST               TAU_aa  (a,i2,a1,i3) a1
            taaii  (a,a1,i2,i3) = RTAU_aa (a,i2,a1,i3)
            t1aaii (a,a1,i2,i3) = TAU_aa  (a,i2,a1,i3)
            tpppp  (a,a1,a2,i)  = taaii  (a,a1,i2,i3) * tiiai  (i2,i3,a2,i)
            t1pppp (a,a1,a2,i)  = t1aaii (a,a1,i2,i3) * t1iiai (i2,i3,a2,i)
            tpppp  (a,a1,a2,i) += t1pppp (a,a1,a2,i)
            tpppp  (a,a1,a2,i) *= LRNORM
            tpppp  (a,a1,a2,i) *= -0.25
            PREPARE  Dabci_aaaa (a,a1,a2,i) += tpppp (a,a1,a2,i)
         ENDDO a1
         ENDDO a
      ENDPARDO  i2, a2, i3, i

      PARDO  i2, a2, j3, j
         tijaj  (i2,j3,a2,j) = 0.0
         t1ijaj (i2,j3,a2,j) = 0.0
         DO b3
            REQUEST                L2AB (i2,a2,j3,b3) b3
            GET                    T1A  (b3,j)
            GET                    R1A  (b3,j)
            tijab  (i2,j3,a2,b3) = L2AB (i2,a2,j3,b3)
            t2pqpq (i2,j3,a2,j)  = tijab  (i2,j3,a2,b3) * T1A (b3,j)
            t3pqpq (i2,j3,a2,j)  = tijab  (i2,j3,a2,b3) * R1A (b3,j)
            tijaj  (i2,j3,a2,j) += t2pqpq (i2,j3,a2,j)
            t1ijaj (i2,j3,a2,j) += t3pqpq (i2,j3,a2,j)
         ENDDO b3
         DO a
         DO b1
            REQUEST               RTAU_ab (a,i2,b1,j3) b1
            REQUEST               TAU_ab  (a,i2,b1,j3) b1
            tabij  (a,b1,i2,j3) = RTAU_ab (a,i2,b1,j3)
            t1abij (a,b1,i2,j3) = TAU_ab  (a,i2,b1,j3)
            tpqpq  (a,b1,a2,j)  = tabij  (a,b1,i2,j3) * tijaj  (i2,j3,a2,j)
            t1pqpq (a,b1,a2,j)  = t1abij (a,b1,i2,j3) * t1ijaj (i2,j3,a2,j)
            tpqpq  (a,b1,a2,j) += t1pqpq (a,b1,a2,j)
            tpqpq  (a,b1,a2,j) *= LRNORM
            tpqpq  (a,b1,a2,j) *= -0.5
            PREPARE  Dabci_abab (a,b1,a2,j) += tpqpq (a,b1,a2,j)
         ENDDO b1
         ENDDO a
      ENDPARDO  i2, a2, j3, j

      PARDO  j2, b2, i3, i
         tjibi  (j2,i3,b2,i) = 0.0
         t1jibi (j2,i3,b2,i) = 0.0
         DO a3
            REQUEST                L2AB (i3,a3,j2,b2) a3
            GET                    T1A  (a3,i)
            GET                    R1A  (a3,i)
            tjiba  (j2,i3,b2,a3) = L2AB (i3,a3,j2,b2)
            t2pppp (j2,i3,b2,i)  = tjiba (j2,i3,b2,a3) * T1A (a3,i)
            t3pppp (j2,i3,b2,i)  = tjiba (j2,i3,b2,a3) * R1A (a3,i)
            tjibi  (j2,i3,b2,i) += t2pppp (j2,i3,b2,i)
            t1jibi (j2,i3,b2,i) += t3pppp (j2,i3,b2,i)
         ENDDO a3
         DO b
         DO a1
            REQUEST               RTAU_ab (a1,i3,b,j2) a1
            REQUEST               TAU_ab  (a1,i3,b,j2) a1
            tbaji  (b,a1,j2,i3) = RTAU_ab (a1,i3,b,j2)
            t1baji (b,a1,j2,i3) = TAU_ab  (a1,i3,b,j2)
            tqpqp  (b,a1,b2,i)  = tbaji  (b,a1,j2,i3) * tjibi  (j2,i3,b2,i)
            t1qpqp (b,a1,b2,i)  = t1baji (b,a1,j2,i3) * t1jibi (j2,i3,b2,i)
            tqpqp  (b,a1,b2,i) += t1qpqp (b,a1,b2,i)
            tqpqp  (b,a1,b2,i) *= LRNORM
            tqpqp  (b,a1,b2,i) *= -0.5
            PREPARE  Dabci_baba (b,a1,b2,i) += tqpqp (b,a1,b2,i)
         ENDDO a1
         ENDDO b
      ENDPARDO  j2, b2, i3, i
#
#
#       ab                ea  mn    b          ea  mn    b
#      G   = 1/4 P(ab) ( r   l   ) t  + 1/4 ( t   l   ) r
#       ci                mn  ec    i          mn  ec    i
#
#
      PARDO  a, a2, a1, i
         GET  R1A (a1,i)

         tpppp  (a2,a,a1,i)  = LR2L2_aa (a2,a) ^ LT1A (a1,i)
         t1pppp (a2,a,a1,i)  = LT2L2_aa (a2,a) ^ R1A  (a1,i)
         tpppp  (a2,a,a1,i) += t1pppp (a2,a,a1,i)

         t2pppp (a,a1,a2,i)  = tpppp  (a2,a,a1,i)
         t3pppp (a1,a,a2,i)  = t2pppp (a,a1,a2,i)
         t2pppp (a,a1,a2,i) *= -0.5
         t3pppp (a1,a,a2,i) *=  0.5
         PREPARE  Dabci_aaaa (a,a1,a2,i) += t2pppp (a,a1,a2,i)
         PREPARE  Dabci_aaaa (a1,a,a2,i) += t3pppp (a1,a,a2,i)
      ENDPARDO  a, a2, a1, i

      PARDO  a, a2, b1, j
         GET  R1A (b1,j)
         tppqq  (a2,a,b1,j)  = LR2L2_aa (a2,a) ^ LT1A (b1,j)
         t1ppqq (a2,a,b1,j)  = LT2L2_aa (a2,a) ^ R1A  (b1,j)
         tppqq  (a2,a,b1,j) += t1ppqq (a2,a,b1,j)

         tpqpq  (a,b1,a2,j)  = tppqq  (a2,a,b1,j)
         tpqpq  (a,b1,a2,j) *= -0.5
         PREPARE  Dabci_abab (a,b1,a2,j) += tpqpq (a,b1,a2,j)
      ENDPARDO  a, a2, b1, j

      PARDO  b, b2, a1, i
         GET  R1A (a1,i)
         tqqpp  (b2,b,a1,i)  = LR2L2_bb (b2,b) ^ LT1A (a1,i)
         t1qqpp (b2,b,a1,i)  = LT2L2_bb (b2,b) ^ R1A  (a1,i)
         tqqpp  (b2,b,a1,i) += t1qqpp (b2,b,a1,i)

         tqpqp  (b,a1,b2,i)  = tqqpp (b2,b,a1,i)
         tqpqp  (b,a1,b2,i) *= -0.5
         PREPARE  Dabci_baba (b,a1,b2,i) += tqpqp (b,a1,b2,i)
      ENDPARDO  b, b2, a1, i
#
#
#       ab              a    kn  fb          a    kn  fb
#      G   = 1/2 P(ab) t  ( l   r   ) + 1/2 r  ( l   t   )
#       ci              k    cf  ni          k    cf  ni
#
#
#           Note, these rings are used in Dijka and Dibja...
#
#
      PARDO  i2, a2, a1, i
         REQUEST               L2T2_aaaa (i,a2,i2,a1) i2
         REQUEST               L2R2_aaaa (i,a2,i2,a1) i2
         tiaai  (i2,a1,a2,i) = L2R2_aaaa (i,a2,i2,a1)
         t1iaai (i2,a1,a2,i) = L2T2_aaaa (i,a2,i2,a1)
         DO a
            GET  R1A (a,i2)
            tpppp  (a,a1,a2,i)  = LT1A (a,i2) * tiaai  (i2,a1,a2,i)
            t1pppp (a,a1,a2,i)  = R1A  (a,i2) * t1iaai (i2,a1,a2,i)
            tpppp  (a,a1,a2,i) += t1pppp (a,a1,a2,i)
            tpppp  (a,a1,a2,i) *= 0.5

            t2pppp (a1,a,a2,i)  = tpppp (a,a1,a2,i)
            t2pppp (a1,a,a2,i) *= -1.0

            PREPARE  Dabci_aaaa (a,a1,a2,i) += tpppp  (a,a1,a2,i)
            PREPARE  Dabci_aaaa (a1,a,a2,i) += t2pppp (a1,a,a2,i)
         ENDDO a
      ENDPARDO  i2, a2, a1, i

      PARDO  a2, i2, b1, j
         REQUEST               L2T2_baab (j,a2,i2,b1) a2
         REQUEST               L2R2_baab (j,a2,i2,b1) a2
         tibaj  (i2,b1,a2,j) = L2R2_baab (j,a2,i2,b1)
         t1ibaj (i2,b1,a2,j) = L2T2_baab (j,a2,i2,b1)
         DO a
            GET  R1A (a,i2)
            tpqpq  (a,b1,a2,j)  = LT1A (a,i2) * tibaj  (i2,b1,a2,j)
            t1pqpq (a,b1,a2,j)  = R1A  (a,i2) * t1ibaj (i2,b1,a2,j)
            tpqpq  (a,b1,a2,j) += t1pqpq (a,b1,a2,j)
            tpqpq  (a,b1,a2,j) *= 0.5
            PREPARE  Dabci_abab (a,b1,a2,j) += tpqpq (a,b1,a2,j)
         ENDDO a
      ENDPARDO  a2, i2, b1, j

      PARDO  j2, a2, a, j
         REQUEST              L2T2_baba (j,a,j2,a2) j2
         REQUEST              L2R2_baba (j,a,j2,a2) j2
         tajaj  (a,j2,a2,j) = L2R2_baba (j,a,j2,a2)
         t1ajaj (a,j2,a2,j) = L2T2_baba (j,a,j2,a2)
         DO b1
            GET  R1A (b1,j2)
            tpqpq  (a,b1,a2,j)  = LT1A (b1,j2) * tajaj  (a,j2,a2,j)
            t1pqpq (a,b1,a2,j)  = R1A  (b1,j2) * t1ajaj (a,j2,a2,j)
            tpqpq  (a,b1,a2,j) += t1pqpq (a,b1,a2,j)
            tpqpq  (a,b1,a2,j) *= -0.5
            PREPARE  Dabci_abab (a,b1,a2,j) += tpqpq (a,b1,a2,j)
         ENDDO b1
      ENDPARDO  j2, a2, a, j

      PARDO  j2, b2, a1, i
         REQUEST               L2T2_abba (i,b2,j2,a1) j2
         REQUEST               L2R2_abba (i,b2,j2,a1) j2
         tjabi  (j2,a1,b2,i) = L2R2_abba (i,b2,j2,a1)
         t1jabi (j2,a1,b2,i) = L2T2_abba (i,b2,j2,a1)
         DO b
            GET  R1A (b,j2)
            tqpqp  (b,a1,b2,i)  = LT1A (b,j2) * tjabi  (j2,a1,b2,i)
            t1qpqp (b,a1,b2,i)  = R1A  (b,j2) * t1jabi (j2,a1,b2,i)
            tqpqp  (b,a1,b2,i) += t1qpqp (b,a1,b2,i)
            tqpqp  (b,a1,b2,i) *= 0.5
            PREPARE  Dabci_baba (b,a1,b2,i) += tqpqp (b,a1,b2,i)
         ENDDO b
      ENDPARDO  j2, b2, a1, i

      PARDO  b2, b, i, i2
         REQUEST              L2T2_abab (i,b,i2,b2) b2
         REQUEST              L2R2_abab (i,b,i2,b2) b2
         tbibi  (b,i2,b2,i) = L2R2_abab (i,b,i2,b2)
         t1bibi (b,i2,b2,i) = L2T2_abab (i,b,i2,b2)
         DO a1
            GET  R1A (a1,i2)
            tqpqp  (b,a1,b2,i)  = LT1A (a1,i2) * tbibi  (b,i2,b2,i)
            t1qpqp (b,a1,b2,i)  = R1A  (a1,i2) * t1bibi (b,i2,b2,i)
            tqpqp  (b,a1,b2,i) += t1qpqp (b,a1,b2,i)
            tqpqp  (b,a1,b2,i) *= -0.5
            PREPARE  Dabci_baba (b,a1,b2,i) += tqpqp (b,a1,b2,i)
         ENDDO a1
      ENDPARDO  b2, b, i, i2
#
#
#       ab        e    mn _ab
#      G   = 1/2 r  ( l   t   )
#       ci        m    ec  ni
#
#
      PARDO  i2, a, a1, i
         REQUEST             TAU_aa  (a1,i,a,i2) i2
         taaii (a,a1,i2,i) = TAU_aa  (a1,i,a,i2)
         DO a2
            tpppp (a,a1,a2,i)  = taaii (a,a1,i2,i) * LR1L2_ai (a2,i2)
            tpppp (a,a1,a2,i) *= 0.5
            PREPARE  Dabci_aaaa (a,a1,a2,i) += tpppp (a,a1,a2,i)
         ENDDO a2
      ENDPARDO  i2, a, a1, i

      PARDO  i2, a, b1, j
         REQUEST             TAU_ab (a,i2,b1,j) i2
         tabij (a,b1,i2,j) = TAU_ab (a,i2,b1,j)
         DO a2
            tpqpq (a,b1,a2,j)  = tabij (a,b1,i2,j) * LR1L2_ai (a2,i2)
            tpqpq (a,b1,a2,j) *= 0.5
            PREPARE  Dabci_abab (a,b1,a2,j) += tpqpq (a,b1,a2,j)
         ENDDO a2
      ENDPARDO  i2, a, b1, j

      PARDO  j2, b, a1, i
         REQUEST             TAU_ab (a1,i,b,j2) j2
         tbaji (b,a1,j2,i) = TAU_ab (a1,i,b,j2)
         DO b2
            tqpqp (b,a1,b2,i)  = tbaji (b,a1,j2,i) * LR1L2_bj (b2,j2)
            tqpqp (b,a1,b2,i) *= 0.5
            PREPARE  Dabci_baba (b,a1,b2,i) += tqpqp (b,a1,b2,i)
         ENDDO b2
      ENDPARDO  j2, b, a1, i
#
#
#          ...ready!
#
#
      ENDPROC  DABCI
#-------------------------------------------------------------------------



#-------------------------------------------------------------------------
#
#     -----------
      PROC  DIJKA
#     -----------
#
#
#       ij        ij  e       _ke  e
#      D   = 1/2 l   r  + 1/2 r   l  ; Note the 'transposition' of the 1st term
#       ka        ea  k        ij  a
#
#
      PARDO  a2, i, i1, a
         REQUEST               L2AA    (i,a2,i1,a) a2              # DIAJK piece
         REQUEST               RTAU_aa (a2,i,a,i1) a2
         t1iiaa (i,i1,a2,a)  = L2AA    (i,a2,i1,a)                 # DIAJK piece
         tiiaa  (i,i1,a2,a)  = RTAU_aa (a2,i,a,i1)
         t1iiaa (i,i1,a2,a) *= LRNORM                              # DIAJK piece
         tiiaa  (i,i1,a2,a) *= LRNORM
         t1iiaa (i,i1,a2,a) *= 0.5                                 # DIAJK piece
         tiiaa  (i,i1,a2,a) *= 0.5
         DO i2
            GET  L1A (i2,a2)
            GET  R1A (a2,i2)
            tpppp  (i,i1,i2,a)  = tiiaa  (i,i1,a2,a) * L1A (i2,a2)
            t1pppp (i,i1,i2,a)  = t1iiaa (i,i1,a2,a) * R1A (a2,i2) # DIAJK piece
            tpppp  (i,i1,i2,a) += t1pppp (i,i1,i2,a)
            PUT  Dijka_aaaa (i,i1,i2,a) += tpppp (i,i1,i2,a)
         ENDDO i2
      ENDPARDO  a2, i, i1, a

      PARDO  a2, i, j1, b
         REQUEST               L2AB    (i,a2,j1,b) a2              # DIAJK piece
         REQUEST               RTAU_ab (a2,i,b,j1) a2
         t1ijab (i,j1,a2,b)  = L2AB    (i,a2,j1,b)                 # DIAJK piece
         tijab  (i,j1,a2,b)  = RTAU_ab (a2,i,b,j1)
         t1ijab (i,j1,a2,b) *= LRNORM                              # DIAJK piece
         tijab  (i,j1,a2,b) *= LRNORM
         t1ijab (i,j1,a2,b) *= 0.5                                 # DIAJK piece
         tijab  (i,j1,a2,b) *= 0.5
         DO i2
            GET  R1A (a2,i2)                                       # DIAJK piece
            GET  L1A (i2,a2)
            tpqpq  (i,j1,i2,b)  = t1ijab (i,j1,a2,b) * R1A (a2,i2) # DIAJK piece
            t1pqpq (i,j1,i2,b)  = tijab  (i,j1,a2,b) * L1A (i2,a2)
            t1pqpq (i,j1,i2,b) += tpqpq  (i,j1,i2,b)
            PUT  Dijka_abab (i,j1,i2,b) += t1pqpq (i,j1,i2,b)
         ENDDO i2
      ENDPARDO  a2, i, j1, b

      PARDO  b2, j, i1, a
         REQUEST               L2AB    (i1,a,j,b2) b2              # DIAJK piece
         REQUEST               RTAU_ab (a,i1,b2,j) b2
         t1jiba (j,i1,b2,a)  = L2AB    (i1,a,j,b2)                 # DIAJK piece
         tjiba  (j,i1,b2,a)  = RTAU_ab (a,i1,b2,j)
         t1jiba (j,i1,b2,a) *= LRNORM                              # DIAJK piece
         tjiba  (j,i1,b2,a) *= LRNORM
         t1jiba (j,i1,b2,a) *= 0.5                                 # DIAJK piece
         tjiba  (j,i1,b2,a) *= 0.5
         DO j2
            GET  R1A (b2,j2)                                       # DIAJK piece
            GET  L1A (j2,b2)
            t1qpqp (j,i1,j2,a)  = t1jiba (j,i1,b2,a) * R1A (b2,j2) # DIAJK piece
            tqpqp  (j,i1,j2,a)  = tjiba  (j,i1,b2,a) * L1A (j2,b2)
            tqpqp  (j,i1,j2,a) += t1qpqp (j,i1,j2,a)
            PUT  Dijka_baba (j,i1,j2,a) += tqpqp (j,i1,j2,a)
         ENDDO j2
      ENDPARDO  b2, j, i1, a
#
#
#       ij        km  a _ef        km  a _ef
#      G   = 1/2 l   t  r   + 1/2 l   r  t
#       ka        ef  m  ij        ef  m  ij
#
#
      PARDO  a, a2, i2, a3
         taaia  (a2,a3,i2,a) = 0.0
         t1aaia (a2,a3,i2,a) = 0.0
         DO i3
            REQUEST                L2AA (i2,a2,i3,a3) a3
            GET                    R1A  (a,i3)
            taaii  (a2,a3,i2,i3) = L2AA (i2,a2,i3,a3)
            t2pppp (a2,a3,i2,a)  = taaii (a2,a3,i2,i3) * LT1A (a,i3)
            t3pppp (a2,a3,i2,a)  = taaii (a2,a3,i2,i3) * R1A  (a,i3)
            taaia  (a2,a3,i2,a) += t2pppp (a2,a3,i2,a)
            t1aaia (a2,a3,i2,a) += t3pppp (a2,a3,i2,a)
         ENDDO i3
         DO i
         DO i1
            REQUEST               RTAU_aa (a2,i,a3,i1) i1
            REQUEST               TAU_aa  (a2,i,a3,i1) i1
            tiiaa  (i,i1,a2,a3) = RTAU_aa (a2,i,a3,i1)
            t1iiaa (i,i1,a2,a3) = TAU_aa  (a2,i,a3,i1)
            tpppp  (i,i1,i2,a)  = tiiaa  (i,i1,a2,a3) * taaia  (a2,a3,i2,a)
            t1pppp (i,i1,i2,a)  = t1iiaa (i,i1,a2,a3) * t1aaia (a2,a3,i2,a)
            tpppp  (i,i1,i2,a) += t1pppp (i,i1,i2,a)
            tpppp  (i,i1,i2,a) *= LRNORM
            tpppp  (i,i1,i2,a) *= -0.25
            PUT  Dijka_aaaa (i,i1,i2,a) += tpppp (i,i1,i2,a)
         ENDDO i1
         ENDDO i
      ENDPARDO  a, a2, i2, a3

      PARDO  b, i2, a2, b3
         tabib  (a2,b3,i2,b) = 0.0
         t1abib (a2,b3,i2,b) = 0.0
         DO j3
            REQUEST                L2AB (i2,a2,j3,b3) b3
            GET                    R1A  (b,j3)
            tabij  (a2,b3,i2,j3) = L2AB (i2,a2,j3,b3)
            t2pqpq (a2,b3,i2,b)  = tabij  (a2,b3,i2,j3) * LT1A (b,j3)
            t3pqpq (a2,b3,i2,b)  = tabij  (a2,b3,i2,j3) * R1A  (b,j3)
            tabib  (a2,b3,i2,b) += t2pqpq (a2,b3,i2,b)
            t1abib (a2,b3,i2,b) += t3pqpq (a2,b3,i2,b)
         ENDDO j3
         DO i
         DO j1
            REQUEST               RTAU_ab (a2,i,b3,j1) j1
            REQUEST               TAU_ab  (a2,i,b3,j1) j1
            tijab  (i,j1,a2,b3) = RTAU_ab (a2,i,b3,j1)
            t1ijab (i,j1,a2,b3) = TAU_ab  (a2,i,b3,j1)
            tpqpq  (i,j1,i2,b)  = tijab  (i,j1,a2,b3) * tabib  (a2,b3,i2,b)
            t1pqpq (i,j1,i2,b)  = t1ijab (i,j1,a2,b3) * t1abib (a2,b3,i2,b)
            tpqpq  (i,j1,i2,b) += t1pqpq (i,j1,i2,b)
            tpqpq  (i,j1,i2,b) *= LRNORM
            tpqpq  (i,j1,i2,b) *= -0.5
            PUT  Dijka_abab (i,j1,i2,b) += tpqpq (i,j1,i2,b)
         ENDDO j1
         ENDDO i
      ENDPARDO  b, i2, a2, b3

      PARDO  a, b2, j2, a3
         tbaja  (b2,a3,j2,a) = 0.0
         t1baja (b2,a3,j2,a) = 0.0
         DO i3
            REQUEST                L2AB (i3,a3,j2,b2) a3
            GET                    R1A  (a,i3)
            tbaji  (b2,a3,j2,i3) = L2AB (i3,a3,j2,b2)
            t2pppp (b2,a3,j2,a)  = tbaji (b2,a3,j2,i3) * LT1A (a,i3)
            t3pppp (b2,a3,j2,a)  = tbaji (b2,a3,j2,i3) * R1A  (a,i3)
            tbaja  (b2,a3,j2,a) += t2pppp (b2,a3,j2,a)
            t1baja (b2,a3,j2,a) += t3pppp (b2,a3,j2,a)
         ENDDO i3
         DO j
         DO i1
            REQUEST               RTAU_ab (a3,i1,b2,j) i1
            REQUEST               TAU_ab  (a3,i1,b2,j) i1
            tjiba  (j,i1,b2,a3) = RTAU_ab (a3,i1,b2,j)
            t1jiba (j,i1,b2,a3) = TAU_ab  (a3,i1,b2,j)
            tqpqp  (j,i1,j2,a)  = tjiba  (j,i1,b2,a3) * tbaja  (b2,a3,j2,a)
            t1qpqp (j,i1,j2,a)  = t1jiba (j,i1,b2,a3) * t1baja (b2,a3,j2,a)
            tqpqp  (j,i1,j2,a) += t1qpqp (j,i1,j2,a)
            tqpqp  (j,i1,j2,a) *= LRNORM
            tqpqp  (j,i1,j2,a) *= -0.5
            PUT  Dijka_baba (j,i1,j2,a) += tqpqp (j,i1,j2,a)
         ENDDO i1
         ENDDO j
      ENDPARDO  a, b2, j2, a3
#
#
#       ij                ef  mk    a          ef  mk    a
#      G   = 1/4 P(ij) ( r   l   ) t  + 1/4 ( t   l   ) r
#       ka                im  ef    j          im  ef    j
#
#
      PARDO  i, i2, i1, a
         GET  R1A (a,i1)

         tpppp  (i,i2,i1,a)  = LR2L2_ii (i,i2) ^ LT1A (a,i1)
         t1pppp (i,i2,i1,a)  = LT2L2_ii (i2,i) ^ R1A  (a,i1)
         tpppp  (i,i2,i1,a) += t1pppp (i,i2,i1,a)

         t2pppp (i,i1,i2,a)  = tpppp  (i,i2,i1,a)
         t3pppp (i1,i,i2,a)  = t2pppp (i,i1,i2,a)
         t2pppp (i,i1,i2,a) *=  0.5
         t3pppp (i1,i,i2,a) *= -0.5
         PUT  Dijka_aaaa (i,i1,i2,a) += t2pppp (i,i1,i2,a)
         PUT  Dijka_aaaa (i1,i,i2,a) += t3pppp (i1,i,i2,a)
      ENDPARDO  i, i2, i1, a

      PARDO  i, i2, j1, b
         GET  R1A (b,j1)
         tppqq  (i,i2,b,j1)  = LR2L2_ii (i,i2) ^ LT1A (b,j1)
         t1ppqq (i,i2,b,j1)  = LT2L2_ii (i,i2) ^ R1A  (b,j1)
         tppqq  (i,i2,b,j1) += t1ppqq (i,i2,b,j1)

         tpqpq  (i,j1,i2,b)  = tppqq  (i2,i,b,j1)
         tpqpq  (i,j1,i2,b) *=  0.5
         PUT  Dijka_abab (i,j1,i2,b) += tpqpq (i,j1,i2,b)
      ENDPARDO  i, i2, j1, b

      PARDO  j, j2, i1, a
         GET  R1A (a,i1)
         tqqpp  (j,j2,a,i1)  = LR2L2_jj (j,j2) ^ LT1A (a,i1)
         t1qqpp (j,j2,a,i1)  = LT2L2_jj (j,j2) ^ R1A  (a,i1)
         tqqpp  (j,j2,a,i1) += t1qqpp (j,j2,a,i1)

         tqpqp  (j,i1,j2,a)  = tqqpp (j2,j,a,i1)
         tqpqp  (j,i1,j2,a) *=  0.5
         PUT  Dijka_baba (j,i1,j2,a) += tqpqp (j,i1,j2,a)
      ENDPARDO  j, j2, i1, a
#
#
#       ij              d    km  ea          d    km  ea
#      G   = 1/2 P(ij) t  ( l   r   ) + 1/2 r  ( l   t   )
#       ka              i    de  mj          i    de  mj
#
#
#           Note, these rings are used in Dabci and Dibja...
#
#
      PARDO  a2, i2, a, i1
         REQUEST               L2T2_aaaa (i1,a2,i2,a) a2
         REQUEST               L2R2_aaaa (i1,a2,i2,a) a2
         taiia  (a2,i1,i2,a) = L2R2_aaaa (i1,a2,i2,a)
         t1aiia (a2,i1,i2,a) = L2T2_aaaa (i1,a2,i2,a)
         DO i
            GET  R1A (a2,i)
            tpppp  (i,i1,i2,a)  = LT1A (a2,i) * taiia  (a2,i1,i2,a)
            t1pppp (i,i1,i2,a)  = R1A  (a2,i) * t1aiia (a2,i1,i2,a)
            tpppp  (i,i1,i2,a) += t1pppp (i,i1,i2,a)
            tpppp  (i,i1,i2,a) *= 0.5

            t2pppp (i1,i,i2,a)  = tpppp (i,i1,i2,a)
            t2pppp (i1,i,i2,a) *= -1.0

            PUT  Dijka_aaaa (i,i1,i2,a) += tpppp  (i,i1,i2,a)
            PUT  Dijka_aaaa (i1,i,i2,a) += t2pppp (i1,i,i2,a)
         ENDDO i
      ENDPARDO  a2, i2, a, i1

      PARDO  a2, i2, b, j1
         REQUEST               L2T2_baab (j1,a2,i2,b) a2
         REQUEST               L2R2_baab (j1,a2,i2,b) a2
         tajib  (a2,j1,i2,b) = L2R2_baab (j1,a2,i2,b)
         t1ajib (a2,j1,i2,b) = L2T2_baab (j1,a2,i2,b)
         DO i
            GET  R1A (a2,i)
            tpqpq  (i,j1,i2,b)  = LT1A (a2,i) * tajib  (a2,j1,i2,b)
            t1pqpq (i,j1,i2,b)  = R1A  (a2,i) * t1ajib (a2,j1,i2,b)
            tpqpq  (i,j1,i2,b) += t1pqpq (i,j1,i2,b)
            tpqpq  (i,j1,i2,b) *= 0.5
            PUT  Dijka_abab (i,j1,i2,b) += tpqpq (i,j1,i2,b)
         ENDDO i
      ENDPARDO  a2, i2, b, j1

      PARDO  b2, b, i, i2
         REQUEST              L2T2_abab (i,b,i2,b2) b2
         REQUEST              L2R2_abab (i,b,i2,b2) b2
         tibib  (i,b2,i2,b) = L2R2_abab (i,b,i2,b2)
         t1ibib (i,b2,i2,b) = L2T2_abab (i,b,i2,b2)
         DO j1
            GET  R1A (b2,j1)
            tpqpq  (i,j1,i2,b)  = LT1A (b2,j1) * tibib  (i,b2,i2,b)
            t1pqpq (i,j1,i2,b)  = R1A  (b2,j1) * t1ibib (i,b2,i2,b)
            tpqpq  (i,j1,i2,b) += t1pqpq (i,j1,i2,b)
            tpqpq  (i,j1,i2,b) *= -0.5
            PUT  Dijka_abab (i,j1,i2,b) += tpqpq (i,j1,i2,b)
         ENDDO j1
      ENDPARDO  b2, b, i, i2

      PARDO  b2, j2, a, i1
         REQUEST               L2T2_abba (i1,b2,j2,a) b2
         REQUEST               L2R2_abba (i1,b2,j2,a) b2
         tbija  (b2,i1,j2,a) = L2R2_abba (i1,b2,j2,a)
         t1bija (b2,i1,j2,a) = L2T2_abba (i1,b2,j2,a)
         DO j
            GET  R1A (b2,j)
            tqpqp  (j,i1,j2,a)  = LT1A (b2,j) * tbija  (b2,i1,j2,a)
            t1qpqp (j,i1,j2,a)  = R1A  (b2,j) * t1bija (b2,i1,j2,a)
            tqpqp  (j,i1,j2,a) += t1qpqp (j,i1,j2,a)
            tqpqp  (j,i1,j2,a) *= 0.5
            PUT  Dijka_baba (j,i1,j2,a) += tqpqp (j,i1,j2,a)
         ENDDO j
      ENDPARDO  b2, j2, a, i1

      PARDO  a2, a, j2, j
         REQUEST              L2T2_baba (j,a,j2,a2) a2
         REQUEST              L2R2_baba (j,a,j2,a2) a2
         tjaja  (j,a2,j2,a) = L2R2_baba (j,a,j2,a2)
         t1jaja (j,a2,j2,a) = L2T2_baba (j,a,j2,a2)
         DO i1
            GET  R1A (a2,i1)
            tqpqp  (j,i1,j2,a)  = LT1A (a2,i1) * tjaja  (j,a2,j2,a)
            t1qpqp (j,i1,j2,a)  = R1A  (a2,i1) * t1jaja (j,a2,j2,a)
            tqpqp  (j,i1,j2,a) += t1qpqp (j,i1,j2,a)
            tqpqp  (j,i1,j2,a) *= -0.5
            PUT  Dijka_baba (j,i1,j2,a) += tqpqp (j,i1,j2,a)
         ENDDO i1
      ENDPARDO  a2, a, j2, j
#
#
#       ij         f    kn _ea
#      G   = -1/2 r  ( l   t   )
#       ka         n    ef  ij
#
#
      PARDO  a2, i, a, i1
         REQUEST             TAU_aa  (a2,i,a,i1) a2
         tiiaa (i,i1,a2,a) = TAU_aa  (a2,i,a,i1)
         DO i2
            tpppp (i,i1,i2,a)  = tiiaa (i,i1,a2,a) * LR1L2_ai (a2,i2)
            tpppp (i,i1,i2,a) *= 0.5
            PUT  Dijka_aaaa (i,i1,i2,a) += tpppp (i,i1,i2,a)
         ENDDO i2
      ENDPARDO  a2, i, a, i1

      PARDO  a2, i, b, j1
         REQUEST             TAU_ab (a2,i,b,j1) a2
         tijab (i,j1,a2,b) = TAU_ab (a2,i,b,j1)
         DO i2
            tpqpq (i,j1,i2,b)  = tijab (i,j1,a2,b) * LR1L2_ai (a2,i2)
            tpqpq (i,j1,i2,b) *= 0.5
            PUT  Dijka_abab (i,j1,i2,b) += tpqpq (i,j1,i2,b)
         ENDDO i2
      ENDPARDO  a2, i, b, j1

      PARDO  b2, j, a, i1
         REQUEST             TAU_ab (a,i1,b2,j) b2
         tjiba (j,i1,b2,a) = TAU_ab (a,i1,b2,j)
         DO j2
            tqpqp (j,i1,j2,a)  = tjiba (j,i1,b2,a) * LR1L2_bj (b2,j2)
            tqpqp (j,i1,j2,a) *= 0.5
            PUT  Dijka_baba (j,i1,j2,a) += tqpqp (j,i1,j2,a)
         ENDDO j2
      ENDPARDO  b2, j, a, i1
#
#
#          ...ready!
#     
#     
      ENDPROC  DIJKA
#-------------------------------------------------------------------------



#-------------------------------------------------------------------------
#
#     -----------
      PROC  DAIBJ
#     -----------
#
#
#       ja    j  a     jm  e  a    jm  ea
#      G   = l  r  +  l   r  t  + l   r    ; Last term for ABAB and BABA only
#       bi    b  i     be  m  i    be  mi
#
#
      PARDO  i, a, a1, i1
         REQUEST  L2R2_aaaa (i,a1,i1,a) i
         GET  R1A (a,i)
         GET  L1A (i1,a1)
         tia (i1,a1) = LR1L2_ai (a1,i1)
         tpppp  (a,i,i1,a1)  = R1A (a,i) ^ L1A (i1,a1)
         tpppp  (a,i,i1,a1) *= LRNORM
         t1pppp (a,i,i1,a1)  = LT1A (a,i) ^ tia (i1,a1)
         tpppp  (a,i,i1,a1) += t1pppp (a,i,i1,a1)

         tiaia  (i,a1,i1,a)  = tpppp (a,i,i1,a1)
         tiaia  (i,a1,i1,a) += L2R2_aaaa (i,a1,i1,a)
         PUT  Dibja_aaaa (i,a1,i1,a) += tiaia (i,a1,i1,a)
      ENDPARDO  i, a, a1, i1

      PARDO  i, a, b1, j1
         REQUEST  L2R2_abba (i,b1,j1,a) i
         GET  R1A (a,i)
         GET  L1A (j1,b1)
         tjb (j1,b1) = LR1L2_bj (b1,j1)
         tppqq  (a,i,j1,b1)  = R1A (a,i) ^ L1A (j1,b1)
         tppqq  (a,i,j1,b1) *= LRNORM
         t1ppqq (a,i,j1,b1)  = LT1A (a,i) ^ tjb (j1,b1)
         tppqq  (a,i,j1,b1) += t1ppqq (a,i,j1,b1)

         tpqpq  (i,b1,j1,a)  = tppqq (a,i,j1,b1)
         tpqpq  (i,b1,j1,a) += L2R2_abba (i,b1,j1,a)
         PUT  Dibja_abba (i,b1,j1,a) += tpqpq (i,b1,j1,a)
      ENDPARDO  i, a, b1, j1

      PARDO  j, b, a1, i1
         REQUEST  L2R2_baab (j,a1,i1,b) j
         GET  R1A (b,j)
         GET  L1A (i1,a1)
         tia (i1,a1) = LR1L2_ai (a1,i1)
         tqqpp  (b,j,i1,a1)  = R1A (b,j) ^ L1A (i1,a1)
         tqqpp  (b,j,i1,a1) *= LRNORM
         t1qqpp (b,j,i1,a1)  = LT1A (b,j) ^ tia (i1,a1)
         tqqpp  (b,j,i1,a1) += t1qqpp (b,j,i1,a1)

         tqpqp  (j,a1,i1,b)  = tqqpp (b,j,i1,a1)
         tqpqp  (j,a1,i1,b) += L2R2_baab (j,a1,i1,b)
         PUT  Dibja_baab (j,a1,i1,b) += tqpqp (j,a1,i1,b)
      ENDPARDO  j, b, a1, i1

      PARDO  i, b, i1, b1
         REQUEST                        L2R2_abab (i,b,i1,b1) i
         PUT  Dibja_abab (i,b,i1,b1) += L2R2_abab (i,b,i1,b1)
      ENDPARDO  i, b, i1, b1

      PARDO  j, a, j1, a1
         REQUEST                        L2R2_baba (j,a,j1,a1) j
         PUT  Dibja_baba (j,a,j1,a1) += L2R2_baba (j,a,j1,a1)
      ENDPARDO  j, a, j1, a1
#
#
#       ja    jm    e  a    e  a
#      G   = l   ( r  t  + t  r  )
#       bi    be    i  m    i  m
#
#
      PARDO  i1, a2, i2, a1
         REQUEST                L2AA (i2,a2,i1,a1) i1
         taaii (a2,a1,i1,i2)  = L2AA (i2,a2,i1,a1)
         DO i
            GET  R1A  (a2,i)
            tpppp  (i,a1,i1,i2)  = R1A  (a2,i) * taaii (a2,a1,i1,i2)
            t1pppp (i,a1,i1,i2)  = LT1A (a2,i) * taaii (a2,a1,i1,i2)
            DO a
               GET  R1A (a,i2)
               tiaia  (i,a1,i1,a)  = tpppp  (i,a1,i1,i2) * LT1A (a,i2)
               t1iaia (i,a1,i1,a)  = t1pppp (i,a1,i1,i2) * R1A  (a,i2)
               tiaia  (i,a1,i1,a) += t1iaia (i,a1,i1,a)
               tiaia  (i,a1,i1,a) *= LRNORM
               tiaia  (i,a1,i1,a) *= -1.0
               PUT  Dibja_aaaa (i,a1,i1,a) += tiaia (i,a1,i1,a)
            ENDDO a
         ENDDO i
      ENDPARDO  i1, a2, i2, a1

      PARDO  j1, a2, i2, b1
         REQUEST                L2AB (i2,a2,j1,b1) j1
         tabji (a2,b1,j1,i2)  = L2AB (i2,a2,j1,b1)
         DO i
            GET  R1A  (a2,i)
            tpqqp  (i,b1,j1,i2)  = R1A  (a2,i) * tabji (a2,b1,j1,i2)
            t1pqqp (i,b1,j1,i2)  = LT1A (a2,i) * tabji (a2,b1,j1,i2)
            DO a
               GET  R1A (a,i2)
               tibja  (i,b1,j1,a)  = tpqqp  (i,b1,j1,i2) * LT1A (a,i2)
               t1ibja (i,b1,j1,a)  = t1pqqp (i,b1,j1,i2) * R1A  (a,i2)
               tibja  (i,b1,j1,a) += t1ibja (i,b1,j1,a)
               tibja  (i,b1,j1,a) *= LRNORM
               tibja  (i,b1,j1,a) *= -1.0
               PUT  Dibja_abba (i,b1,j1,a) += tibja (i,b1,j1,a)
            ENDDO a
         ENDDO i
      ENDPARDO  j1, a2, i2, b1

      PARDO  i1, b2, j2, a1
         REQUEST                L2AB (i1,a1,j2,b2) i1
         taaii (b2,a1,i1,j2)  = L2AB (i1,a1,j2,b2)
         DO j
            GET  R1A  (b2,j)
            tjaij  (j,a1,i1,j2)  = R1A  (b2,j) * taaii (b2,a1,i1,j2)
            t1jaij (j,a1,i1,j2)  = LT1A (b2,j) * taaii (b2,a1,i1,j2)
            DO b
               GET  R1A (b,j2)
               tqppq  (j,a1,i1,b)  = tjaij  (j,a1,i1,j2) * LT1A (b,j2)
               t1qppq (j,a1,i1,b)  = t1jaij (j,a1,i1,j2) * R1A  (b,j2)
               tqppq  (j,a1,i1,b) += t1qppq (j,a1,i1,b)
               tqppq  (j,a1,i1,b) *= LRNORM
               tqppq  (j,a1,i1,b) *= -1.0
               PUT  Dibja_baab (j,a1,i1,b) += tqppq (j,a1,i1,b)
            ENDDO b
         ENDDO j
      ENDPARDO  i1, b2, j2, a1

      PARDO  j2, b1, i1, a2    
         REQUEST               L2AB (i1,a2,j2,b1) j2
         tajib (a2,j2,i1,b1) = L2AB (i1,a2,j2,b1)
         DO i
            GET  R1A (a2,i)
            tijib  (i,j2,i1,b1) = R1A  (a2,i) * tajib (a2,j2,i1,b1)
            t1ijib (i,j2,i1,b1) = LT1A (a2,i) * tajib (a2,j2,i1,b1)
            DO b
               GET  R1A (b,j2)
               tpqpq  (i,b,i1,b1)  = LT1A (b,j2) * tijib  (i,j2,i1,b1)
               t1pqpq (i,b,i1,b1)  = R1A  (b,j2) * t1ijib (i,j2,i1,b1)
               tpqpq  (i,b,i1,b1) += t1pqpq (i,b,i1,b1)
               tpqpq  (i,b,i1,b1) *= LRNORM
               PUT  Dibja_abab (i,b,i1,b1) += tpqpq (i,b,i1,b1)
            ENDDO b
         ENDDO i
      ENDPARDO  j2, b1, i1, a2

      PARDO  i2, a1, j1, b2
         REQUEST               L2AB (i2,a1,j1,b2) i2
         tbija (b2,i2,j1,a1) = L2AB (i2,a1,j1,b2)
         DO j
            GET  R1A (b2,j)
            tjija  (j,i2,j1,a1) = R1A  (b2,j) * tbija (b2,i2,j1,a1)
            t1jija (j,i2,j1,a1) = LT1A (b2,j) * tbija (b2,i2,j1,a1)
            DO a
               GET  R1A (a,i2)
               tqpqp  (j,a,j1,a1)  = tjija  (j,i2,j1,a1) * LT1A (a,i2)
               t1qpqp (j,a,j1,a1)  = t1jija (j,i2,j1,a1) * R1A  (a,i2)
               tqpqp  (j,a,j1,a1) += t1qpqp (j,a,j1,a1)
               tqpqp  (j,a,j1,a1) *= LRNORM
               PUT  Dibja_baba (j,a,j1,a1) += tqpqp (j,a,j1,a1)
            ENDDO a
         ENDDO j
      ENDPARDO  i2, a1, j1, b2
#
#
#          ...ready!
#     
#     
      ENDPROC  DAIBJ
#-------------------------------------------------------------------------



#-------------------------------------------------------------------------
#
#     -----------
      PROC  DIJAB
#     -----------
#
#
#       ab    ab               a  b
#      G   = t   + P(ij)P(ab) t  t
#       ij    ij               i  j
#
#   
#       ab               a  b
#      G   = P(ij)P(ab) Z  t
#       ij               i  j
#
#       a             a  e            m  a
#      Z   = (R2 * L2)  t  + (R2 * L2)  t
#       i             e  i            i  m
#
#
      PARDO  a, i, a1, i1
         REQUEST              TAU_aa (a,i,a1,i1) a
         GET                  R1A    (a1,i1)
         tpppp (i,i1,a,a1)  = TAU_aa (a,i,a1,i1)
         tpppp (i,i1,a,a1) *= 0.5

         taiai  (a,i,a1,i1)  = L_Z1_ai (a,i) ^ LT1A (a1,i1)
         t1aiai (a,i,a1,i1)  = L_Z2_ai (a,i) ^ R1A  (a1,i1)
         taiai  (a,i,a1,i1) += t1aiai (a,i,a1,i1)
         taiai  (a,i,a1,i1) *= 0.5

         tiiaa  (i,i1,a,a1) = taiai (a,i,a1,i1)
         t1iiaa (i1,i,a1,a) = taiai (a,i,a1,i1)
         t2iiaa (i1,i,a,a1) = taiai (a,i,a1,i1)
         t3iiaa (i,i1,a1,a) = taiai (a,i,a1,i1)

         t2iiaa (i1,i,a,a1) *= -1.0
         t3iiaa (i,i1,a1,a) *= -1.0

         tiiaa (i,i1,a,a1) += tpppp (i,i1,a,a1)

         PUT  Dijab_aa (i,i1,a,a1) += tiiaa  (i,i1,a,a1)
         PUT  Dijab_aa (i1,i,a1,a) += t1iiaa (i1,i,a1,a)
         PUT  Dijab_aa (i1,i,a,a1) += t2iiaa (i1,i,a,a1)
         PUT  Dijab_aa (i,i1,a1,a) += t3iiaa (i,i1,a1,a)
      ENDPARDO  a, i, a1, i1

      PARDO  a, i, b1, j1
         REQUEST  TAU_ab (a,i,b1,j1) a
         GET  R1A (b1,j1)
         GET  R1A (a,i)

         taibj  (a,i,b1,j1)  = L_Z1_ai (a,i) ^ LT1A    (b1,j1)
         t1aibj (a,i,b1,j1)  = LT1A    (a,i) ^ L_Z1_bj (b1,j1)
         t2aibj (a,i,b1,j1)  = L_Z2_ai (a,i) ^ R1A     (b1,j1)
         t3aibj (a,i,b1,j1)  = R1A     (a,i) ^ L_Z2_ai (b1,j1)
         taibj  (a,i,b1,j1) += t1aibj (a,i,b1,j1)
         taibj  (a,i,b1,j1) += t2aibj (a,i,b1,j1)
         taibj  (a,i,b1,j1) += t3aibj (a,i,b1,j1)
         taibj  (a,i,b1,j1) += TAU_ab (a,i,b1,j1)

         tijab (i,j1,a,b1)  = taibj (a,i,b1,j1)
         tijab (i,j1,a,b1) *= 0.5
         PUT  Dijab_ab (i,j1,a,b1) += tijab (i,j1,a,b1)
      ENDPARDO  a, i, b1, j1
#
#
#      Here I am inserting an artifical N^5 step.
#      I do this because I want to avoid barriers as much as possible.
#
#      I believe it is justified because the requests are not far in, and
#      there are no "PREPARE +=" but "PUT +=" instead.
#
#
      PARDO  a2, a, i
         ALLOCATE  Laiai (a,i,a2,*)
         ALLOCATE  Lai   (a,i)
         DO i2
            REQUEST      T2AA (a,i,a2,i2) i2
            tai (a2,i) = LT1A (a2,i)
            tpppp  (a,i2,a2,i)  = LT1A (a,i2) ^ tai (a2,i)
            tpppp  (a,i2,a2,i) *= -1.0
            t1pppp (a,i,a2,i2)  = tpppp  (a,i2,a2,i)
            t1pppp (a,i,a2,i2) += T2AA   (a,i,a2,i2)
            Laiai  (a,i,a2,i2) += t1pppp (a,i,a2,i2)
         ENDDO i2
         DO i2
            t1ai (a,i)  = Laiai (a,i,a2,i2) * LR1L2_ai (a2,i2)
            t1ai (a,i) *= 0.5
            Lai  (a,i) += t1ai  (a,i)
         ENDDO i2
         DO a1
         DO i1
            taiai  (a,i,a1,i1)  = Lai (a,i) ^ LT1A (a1,i1)
            tiiaa  (i,i1,a,a1)  = taiai (a,i,a1,i1)
            t1iiaa (i1,i,a1,a)  = taiai (a,i,a1,i1)
            t2iiaa (i1,i,a,a1)  = taiai (a,i,a1,i1)
            t3iiaa (i,i1,a1,a)  = taiai (a,i,a1,i1)
         
            t2iiaa (i1,i,a,a1) *= -1.0
            t3iiaa (i,i1,a1,a) *= -1.0
         
            PUT  Dijab_aa (i,i1,a,a1) += tiiaa  (i,i1,a,a1)
            PUT  Dijab_aa (i1,i,a1,a) += t1iiaa (i1,i,a1,a)
            PUT  Dijab_aa (i1,i,a,a1) += t2iiaa (i1,i,a,a1)
            PUT  Dijab_aa (i,i1,a1,a) += t3iiaa (i,i1,a1,a)
         ENDDO i1
         ENDDO a1
         DO b1
         DO j1
            taibj (a,i,b1,j1)  = Lai (a,i) ^ LT1A (b1,j1)
            tijab (i,j1,a,b1)  = taibj (a,i,b1,j1)
            PUT  Dijab_ab (i,j1,a,b1) += tijab (i,j1,a,b1)
         ENDDO j1
         ENDDO b1
         DEALLOCATE  Lai   (a,i)
         DEALLOCATE  Laiai (a,i,a2,*)
      ENDPARDO  a2, a, i

      PARDO  b2, a, i
         tai (a,i) = 0.0
         DO j2
            REQUEST       T2AB (a,i,b2,j2) j2
            t1ai (a,i)  = T2AB (a,i,b2,j2) * LR1L2_bj (b2,j2)
            t1ai (a,i) *= 0.5
            tai  (a,i) +=  t1ai (a,i)
         ENDDO j2
         DO a1
         DO i1
            taiai  (a,i,a1,i1) = tai (a,i) ^ LT1A (a1,i1)
            tiiaa  (i,i1,a,a1) = taiai (a,i,a1,i1)
            t1iiaa (i1,i,a1,a) = taiai (a,i,a1,i1)
            t2iiaa (i1,i,a,a1) = taiai (a,i,a1,i1)
            t3iiaa (i,i1,a1,a) = taiai (a,i,a1,i1)
         
            t2iiaa (i1,i,a,a1) *= -1.0
            t3iiaa (i,i1,a1,a) *= -1.0
         
            PUT  Dijab_aa (i,i1,a,a1) += tiiaa  (i,i1,a,a1)
            PUT  Dijab_aa (i1,i,a1,a) += t1iiaa (i1,i,a1,a)
            PUT  Dijab_aa (i1,i,a,a1) += t2iiaa (i1,i,a,a1)
            PUT  Dijab_aa (i,i1,a1,a) += t3iiaa (i,i1,a1,a)
         ENDDO i1
         ENDDO a1
         DO b1
         DO j1
            taibj (a,i,b1,j1) = tai (a,i) ^ LT1A (b1,j1)
            tijab (i,j1,a,b1) = taibj (a,i,b1,j1)
            PUT  Dijab_ab (i,j1,a,b1) += tijab (i,j1,a,b1)
         ENDDO j1
         ENDDO b1
      ENDPARDO  b2, a, i

      PARDO  b2, b, j
         ALLOCATE  Lbjbj (b,j,b2,*)
         ALLOCATE  Lbj   (b,j)
         DO j2
            REQUEST      T2AA (b,j,b2,j2) j2
            tbj (b2,j) = LT1A (b2,j)
            tqqqq  (b,j2,b2,j)  = LT1A (b,j2) ^ tbj (b2,j)
            tqqqq  (b,j2,b2,j) *= -1.0
            t1qqqq (b,j,b2,j2)  = tqqqq  (b,j2,b2,j)
            t1qqqq (b,j,b2,j2) += T2AA   (b,j,b2,j2)
            Lbjbj  (b,j,b2,j2) += t1qqqq (b,j,b2,j2)
         ENDDO j2
         DO j2
            t1bj (b,j)  = Lbjbj (b,j,b2,j2) * LR1L2_bj (b2,j2)
            t1bj (b,j) *= 0.5
            Lbj  (b,j) += t1bj  (b,j)
         ENDDO j2
         DO b1
         DO j1
            tbjbj  (b,j,b1,j1) = Lbj (b,j) ^ LT1A (b1,j1)
            tjjbb  (j,j1,b,b1) = tbjbj (b,j,b1,j1)
            t1jjbb (j1,j,b1,b) = tbjbj (b,j,b1,j1)
            t2jjbb (j1,j,b,b1) = tbjbj (b,j,b1,j1)
            t3jjbb (j,j1,b1,b) = tbjbj (b,j,b1,j1)
         
            t2jjbb (j1,j,b,b1) *= -1.0
            t3jjbb (j,j1,b1,b) *= -1.0
         
            PUT  Dijab_bb (j,j1,b,b1) += tjjbb  (j,j1,b,b1)
            PUT  Dijab_bb (j1,j,b1,b) += t1jjbb (j1,j,b1,b)
            PUT  Dijab_bb (j1,j,b,b1) += t2jjbb (j1,j,b,b1)
            PUT  Dijab_bb (j,j1,b1,b) += t3jjbb (j,j1,b1,b)
         ENDDO j1
         ENDDO b1
         DO a1
         DO i1
            tbjai (b,j,a1,i1) = Lbj (b,j) ^ LT1A (a1,i1)
            tijab (i1,j,a1,b) = tbjai (b,j,a1,i1)
            PUT  Dijab_ab (i1,j,a1,b) += tijab (i1,j,a1,b)
         ENDDO i1
         ENDDO a1
         DEALLOCATE  Lbj   (b,j)
         DEALLOCATE  Lbjbj (b,j,b2,*)
      ENDPARDO  b2, b, j

      PARDO  a2, b, j
         tbj (b,j) = 0.0
         DO i2
            REQUEST       T2AB (a2,i2,b,j) i2
            t1bj (b,j)  = T2AB (a2,i2,b,j) * LR1L2_ai (a2,i2)
            t1bj (b,j) *= 0.5
            tbj  (b,j) += t1bj (b,j)
         ENDDO i2
         DO b1
         DO j1
            tbjbj  (b,j,b1,j1) = tbj (b,j) ^ LT1A (b1,j1)
            tjjbb  (j,j1,b,b1) = tbjbj (b,j,b1,j1)
            t1jjbb (j1,j,b1,b) = tbjbj (b,j,b1,j1)
            t2jjbb (j1,j,b,b1) = tbjbj (b,j,b1,j1)
            t3jjbb (j,j1,b1,b) = tbjbj (b,j,b1,j1)
         
            t2jjbb (j1,j,b,b1) *= -1.0
            t3jjbb (j,j1,b1,b) *= -1.0
         
            PUT  Dijab_bb (j,j1,b,b1) += tjjbb  (j,j1,b,b1)
            PUT  Dijab_bb (j1,j,b1,b) += t1jjbb (j1,j,b1,b)
            PUT  Dijab_bb (j1,j,b,b1) += t2jjbb (j1,j,b,b1)
            PUT  Dijab_bb (j,j1,b1,b) += t3jjbb (j,j1,b1,b)
         ENDDO j1
         ENDDO b1
         DO a1
         DO i1
            tbjai (b,j,a1,i1) = tbj (b,j) ^ LT1A (a1,i1)
            tijab (i1,j,a1,b) = tbjai (b,j,a1,i1)
            PUT  Dijab_ab (i1,j,a1,b) += tijab (i1,j,a1,b)
         ENDDO i1
         ENDDO a1
      ENDPARDO  a2, b, j
#
#
#       ab           e  m        ef  mn    ab           a  m        af  mn    eb
#      G   = P(ij) (t  l  + 1/2 t   l   ) r   + P(ab) (t  l  + 1/2 t   l   ) r
#       ij           i  e        in  ef    mj           m  e        mn  ef    ij
#
#
#
#           f  mn  e    e  m        ef  mn    ab           f  mn  a    a  m        af  mn    eb
# + P(ij) (r  l   t  + r  l  + 1/2 r   l   ) t   + P(ab) (r  l   t  + r  l  + 1/2 r   l   ) t
#           n  ef  i    i  e        in  ef    mh           n  ef  m    m  e        mn  ef    ij
#
#
      PARDO  a, i2, a1, i1
         REQUEST  T2AA (a,i2,a1,i1) a
         REQUEST  R2AA (a,i2,a1,i1) a
         DO i
            taiai  (a,i,a1,i1)  = L_Z_ii (i2,i) * T2AA (a,i2,a1,i1)
            t1aiai (a,i,a1,i1)  = L_Y_ii (i2,i) * R2AA (a,i2,a1,i1)
            taiai  (a,i,a1,i1) += t1aiai (a,i,a1,i1)
            taiai  (a,i,a1,i1) *= 0.5
            tiiaa  (i,i1,a,a1)  = taiai  (a,i,a1,i1)
            t1iiaa (i1,i,a,a1)  = taiai  (a,i,a1,i1)
            tiiaa  (i,i1,a,a1) *= -1.0
            PUT  Dijab_aa (i,i1,a,a1) += tiiaa  (i,i1,a,a1)
            PUT  Dijab_aa (i1,i,a,a1) += t1iiaa (i1,i,a,a1)
         ENDDO i
      ENDPARDO  a, i2, a1, i1

      PARDO  a2, i, a1, i1
         REQUEST  T2AA (a2,i,a1,i1) a2
         REQUEST  R2AA (a2,i,a1,i1) a2
         DO a
            taiai  (a,i,a1,i1)  = L_Z_aa (a2,a) * T2AA (a2,i,a1,i1)
            t1aiai (a,i,a1,i1)  = L_Y_aa (a2,a) * R2AA (a2,i,a1,i1)
            taiai  (a,i,a1,i1) += t1aiai (a,i,a1,i1)
            taiai  (a,i,a1,i1) *= 0.5
            tiiaa  (i,i1,a,a1)  = taiai (a,i,a1,i1)
            t1iiaa (i,i1,a1,a)  = taiai (a,i,a1,i1)
            tiiaa  (i,i1,a,a1) *= -1.0
            PUT  Dijab_aa (i,i1,a,a1) += tiiaa  (i,i1,a,a1)
            PUT  Dijab_aa (i,i1,a1,a) += t1iiaa (i,i1,a1,a)
         ENDDO a
      ENDPARDO  a2, i, a1, i1

      PARDO  a, i2, b1, j1
         REQUEST  T2AB (a,i2,b1,j1) a
         REQUEST  R2AB (a,i2,b1,j1) a
         DO i
            taibj  (a,i,b1,j1)  = L_Z_ii (i2,i) * T2AB (a,i2,b1,j1)
            t1aibj (a,i,b1,j1)  = L_Y_ii (i2,i) * R2AB (a,i2,b1,j1)
            taibj  (a,i,b1,j1) += t1aibj (a,i,b1,j1)
            taibj  (a,i,b1,j1) *= 0.5
            tijab  (i,j1,a,b1)  = taibj  (a,i,b1,j1)
            tijab  (i,j1,a,b1) *= -1.0
            PUT  Dijab_ab (i,j1,a,b1) += tijab (i,j1,a,b1)
         ENDDO i
      ENDPARDO  a, i2, b1, j1

      PARDO  a, j2, b1, i
         REQUEST  T2AB (a,i,b1,j2) a
         REQUEST  R2AB (a,i,b1,j2) a
         DO j1
            taibj  (a,i,b1,j1)  = T2AB (a,i,b1,j2) * L_Z_jj (j2,j1)
            t1aibj (a,i,b1,j1)  = R2AB (a,i,b1,j2) * L_Y_jj (j2,j1)
            taibj  (a,i,b1,j1) += t1aibj (a,i,b1,j1)
            taibj  (a,i,b1,j1) *= 0.5
            tijab  (i,j1,a,b1)  = taibj  (a,i,b1,j1)
            tijab  (i,j1,a,b1) *= -1.0
            PUT  Dijab_ab (i,j1,a,b1) += tijab (i,j1,a,b1)
         ENDDO j1
      ENDPARDO  a, j2, b1, i

      PARDO  a2, i, b1, j1
         REQUEST  T2AB (a2,i,b1,j1) a2
         REQUEST  R2AB (a2,i,b1,j1) a2
         DO a
            taiai  (a,i,b1,j1)  = L_Z_aa (a2,a) * T2AB (a2,i,b1,j1)
            t1aiai (a,i,b1,j1)  = L_Y_aa (a2,a) * R2AB (a2,i,b1,j1)
            taiai  (a,i,b1,j1) += t1aiai (a,i,b1,j1)
            taiai  (a,i,b1,j1) *= 0.5
            tiiaa  (i,j1,a,b1)  = taiai (a,i,b1,j1)
            tiiaa  (i,j1,a,b1) *= -1.0
            PUT  Dijab_ab (i,j1,a,b1) += tiiaa  (i,j1,a,b1)
         ENDDO a
      ENDPARDO  a2, i, b1, j1

      PARDO  b2, i, a, j1
         REQUEST  T2AB (a,i,b2,j1) b2
         REQUEST  R2AB (a,i,b2,j1) b2
         DO b1
            taiai  (a,i,b1,j1)  = T2AB (a,i,b2,j1) * L_Z_bb (b2,b1)
            t1aiai (a,i,b1,j1)  = R2AB (a,i,b2,j1) * L_Y_bb (b2,b1)
            taiai  (a,i,b1,j1) += t1aiai (a,i,b1,j1)
            taiai  (a,i,b1,j1) *= 0.5
            tiiaa  (i,j1,a,b1)  = taiai (a,i,b1,j1)
            tiiaa  (i,j1,a,b1) *= -1.0
            PUT  Dijab_ab (i,j1,a,b1) += tiiaa  (i,j1,a,b1)
         ENDDO b1
      ENDPARDO  b2, i, a, j1
#
#
#     TPDIJAB4
#
#
      PARDO  a, i, i2, i3
         ALLOCATE  Liiii  (i,*,i2,i3)
         ALLOCATE  L1iiii (i,*,i2,i3)
         DO i1
            GET                    L2RTAU_iiii (i,i1,i2,i3)
            GET                    L2TTAU_iiii (i,i1,i2,i3)
            Liiii  (i,i1,i2,i3)  = L2RTAU_iiii (i,i1,i2,i3)
            L1iiii (i,i1,i2,i3)  = L2TTAU_iiii (i,i1,i2,i3)
            Liiii  (i,i1,i2,i3) *= 0.25
            L1iiii (i,i1,i2,i3) *= 0.25
         ENDDO i1
         DO a1
            REQUEST               TAU_aa  (a,i2,a1,i3) a1
            REQUEST               RTAU_aa (a,i2,a1,i3) a1
            tiiaa  (i2,i3,a,a1) = TAU_aa  (a,i2,a1,i3)
            t1iiaa (i2,i3,a,a1) = RTAU_aa (a,i2,a1,i3)
            DO i1
               tpppp  (i,i1,a,a1)  = Liiii  (i,i1,i2,i3) * tiiaa  (i2,i3,a,a1)
               t1pppp (i,i1,a,a1)  = L1iiii (i,i1,i2,i3) * t1iiaa (i2,i3,a,a1)
               tpppp  (i,i1,a,a1) += t1pppp (i,i1,a,a1)
               PUT  Dijab_aa (i,i1,a,a1) += tpppp (i,i1,a,a1)
            ENDDO i1
         ENDDO a1
         DEALLOCATE  Liiii  (i,*,i2,i3)
         DEALLOCATE  L1iiii (i,*,i2,i3)
      ENDPARDO  a, i, i2, i3

      PARDO  a, i, i2, j3
         ALLOCATE  Lijij  (i,*,i2,j3)
         ALLOCATE  L1ijij (i,*,i2,j3)
         DO j1
            GET                    L2RTAU_ijij (i,j1,i2,j3)
            GET                    L2TTAU_ijij (i,j1,i2,j3)
            Lijij  (i,j1,i2,j3)  = L2RTAU_ijij (i,j1,i2,j3)
            L1ijij (i,j1,i2,j3)  = L2TTAU_ijij (i,j1,i2,j3)
            Lijij  (i,j1,i2,j3) *= 0.5
            L1ijij (i,j1,i2,j3) *= 0.5
         ENDDO j1
         DO b1
            REQUEST               TAU_ab  (a,i2,b1,j3) b1
            REQUEST               RTAU_ab (a,i2,b1,j3) b1
            tijab  (i2,j3,a,b1) = TAU_ab  (a,i2,b1,j3)
            t1ijab (i2,j3,a,b1) = RTAU_ab (a,i2,b1,j3)
            DO j1
               tpqpq  (i,j1,a,b1)  = Lijij  (i,j1,i2,j3) * tijab  (i2,j3,a,b1)
               t1pqpq (i,j1,a,b1)  = L1ijij (i,j1,i2,j3) * t1ijab (i2,j3,a,b1)
               tpqpq  (i,j1,a,b1) += t1pqpq (i,j1,a,b1)
               PUT  Dijab_ab (i,j1,a,b1) += tpqpq (i,j1,a,b1)
            ENDDO j1
         ENDDO b1
         DEALLOCATE  Lijij  (i,*,i2,j3)
         DEALLOCATE  L1ijij (i,*,i2,j3)
      ENDPARDO  a, i, i2, j3
#
#
#     TPDIJAB5
#
#
      PARDO  a1, a2, i2, a
         ALLOCATE  Liaia  (*,a2,i2,a)
         ALLOCATE  L1iaia (*,a2,i2,a)
         DO i
            REQUEST               L2R2_aaaa (i,a2,i2,a) i
            REQUEST               L2T2_aaaa (i,a2,i2,a) i
            Liaia  (i,a2,i2,a)  = L2R2_aaaa (i,a2,i2,a)
            L1iaia (i,a2,i2,a)  = L2T2_aaaa (i,a2,i2,a)
            Liaia  (i,a2,i2,a) *= 0.25
            L1iaia (i,a2,i2,a) *= 0.25
         ENDDO i
         DO i1
            REQUEST        T2AA (a1,i1,a2,i2) i1
            REQUEST        R2AA (a1,i1,a2,i2) i1
            GET            R1A  (a1,i2)
            GET            R1A  (a2,i1)
            tai  (a2,i1) = LT1A (a2,i1)
            t1ai (a1,i2) = R1A  (a1,i2)
# TAU like
            taiai  (a1,i1,a2,i2)  = tai (a2,i1) ^ LT1A (a1,i2)
            taiai  (a1,i1,a2,i2) *= -2.0
            taiai  (a1,i1,a2,i2) += T2AA   (a1,i1,a2,i2)
# RTAU like
            t1aiai (a1,i1,a2,i2)  = R1A  (a2,i1) ^ LT1A (a1,i2)
            t2pppp (a1,i1,a2,i2)  = LT1A (a2,i1) ^ t1ai (a1,i2)
            t1aiai (a1,i1,a2,i2) += t2pppp (a1,i1,a2,i2)
            t1aiai (a1,i1,a2,i2) *= -2.0
            t1aiai (a1,i1,a2,i2) += R2AA (a1,i1,a2,i2)
            DO i
               tiaia  (i,a1,i1,a)  = taiai  (a1,i1,a2,i2) * Liaia  (i,a2,i2,a)
               t1iaia (i,a1,i1,a)  = t1aiai (a1,i1,a2,i2) * L1iaia (i,a2,i2,a)
               tiaia  (i,a1,i1,a) += t1iaia (i,a1,i1,a)

               t1iiaa (i,i1,a,a1)  = tiaia (i,a1,i1,a)
               t2iiaa (i1,i,a1,a)  = t1iiaa (i,i1,a,a1)
               t3iiaa (i1,i,a,a1)  = t1iiaa (i,i1,a,a1)
               t4iiaa (i,i1,a1,a)  = t1iiaa (i,i1,a,a1)

               t3iiaa (i1,i,a,a1) *= -1.0
               t4iiaa (i,i1,a1,a) *= -1.0

               PUT  Dijab_aa (i,i1,a,a1) += t1iiaa (i,i1,a,a1)
               PUT  Dijab_aa (i1,i,a1,a) += t2iiaa (i1,i,a1,a)
               PUT  Dijab_aa (i1,i,a,a1) += t3iiaa (i1,i,a,a1)
               PUT  Dijab_aa (i,i1,a1,a) += t4iiaa (i,i1,a1,a)
            ENDDO i
         ENDDO i1
         DEALLOCATE  Liaia  (*,a2,i2,a)
         DEALLOCATE  L1iaia (*,a2,i2,a)
      ENDPARDO  a1, a2, i2, a

      PARDO  a1, b2, j2, a
         ALLOCATE  Liaia  (*,b2,j2,a)
         ALLOCATE  L1iaia (*,b2,j2,a)
         DO i
            REQUEST               L2R2_abba (i,b2,j2,a) i
            REQUEST               L2T2_abba (i,b2,j2,a) i
            Liaia  (i,b2,j2,a)  = L2R2_abba (i,b2,j2,a)
            L1iaia (i,b2,j2,a)  = L2T2_abba (i,b2,j2,a)
            Liaia  (i,b2,j2,a) *= 0.25
            L1iaia (i,b2,j2,a) *= 0.25
         ENDDO i
         DO i1
            REQUEST  T2AB (a1,i1,b2,j2) i1
            REQUEST  R2AB (a1,i1,b2,j2) i1
            DO i
               tiaia  (i,a1,i1,a)  = T2AB (a1,i1,b2,j2) * Liaia  (i,b2,j2,a)
               t1iaia (i,a1,i1,a)  = R2AB (a1,i1,b2,j2) * L1iaia (i,b2,j2,a)
               tiaia  (i,a1,i1,a) += t1iaia (i,a1,i1,a)

               t1iiaa (i,i1,a,a1)  = tiaia (i,a1,i1,a)
               t2iiaa (i1,i,a1,a)  = t1iiaa (i,i1,a,a1)
               t3iiaa (i1,i,a,a1)  = t1iiaa (i,i1,a,a1)
               t4iiaa (i,i1,a1,a)  = t1iiaa (i,i1,a,a1)

               t3iiaa (i1,i,a,a1) *= -1.0
               t4iiaa (i,i1,a1,a) *= -1.0

               PUT  Dijab_aa (i,i1,a,a1) += t1iiaa (i,i1,a,a1)
               PUT  Dijab_aa (i1,i,a1,a) += t2iiaa (i1,i,a1,a)
               PUT  Dijab_aa (i1,i,a,a1) += t3iiaa (i1,i,a,a1)
               PUT  Dijab_aa (i,i1,a1,a) += t4iiaa (i,i1,a1,a)
            ENDDO i
         ENDDO i1
         DEALLOCATE  Liaia  (*,b2,j2,a)
         DEALLOCATE  L1iaia (*,b2,j2,a)
      ENDPARDO  a1, b2, j2, a
#
# AB
#
      PARDO  b1, b2, j2, a 
         ALLOCATE  Liaia  (*,b2,j2,a)
         ALLOCATE  L1iaia (*,b2,j2,a)
         DO i
            REQUEST               L2R2_baab (i,b2,j2,a) i
            REQUEST               L2T2_baab (i,b2,j2,a) i
            Liaia  (i,b2,j2,a)  = L2R2_baab (i,b2,j2,a)
            L1iaia (i,b2,j2,a)  = L2T2_baab (i,b2,j2,a)
            Liaia  (i,b2,j2,a) *= 0.25
            L1iaia (i,b2,j2,a) *= 0.25
         ENDDO i
         DO j1
            REQUEST        T2AA (b1,j1,b2,j2) j1
            REQUEST        R2AA (b1,j1,b2,j2) j1
            GET            R1A  (b1,j2)
            GET            R1A  (b2,j1)
            tai  (b2,j1) = LT1A (b2,j1)
            t1ai (b1,j2) = R1A  (b1,j2)
# TAU like  
            taiai  (b1,j1,b2,j2)  = tai (b2,j1) ^ LT1A (b1,j2)
            taiai  (b1,j1,b2,j2) *= -2.0
            taiai  (b1,j1,b2,j2) += T2AA (b1,j1,b2,j2)
# RTAU like 
            t1aiai (b1,j1,b2,j2)  = R1A  (b2,j1) ^ LT1A (b1,j2)
            t2pppp (b1,j1,b2,j2)  = LT1A (b2,j1) ^ t1ai (b1,j2)
            t1aiai (b1,j1,b2,j2) += t2pppp (b1,j1,b2,j2)
            t1aiai (b1,j1,b2,j2) *= -2.0
            t1aiai (b1,j1,b2,j2) += R2AA (b1,j1,b2,j2)
            DO i
               tiaia  (i,b1,j1,a)  = taiai  (b1,j1,b2,j2) * Liaia  (i,b2,j2,a)
               t1iaia (i,b1,j1,a)  = t1aiai (b1,j1,b2,j2) * L1iaia (i,b2,j2,a)
               tiaia  (i,b1,j1,a) += t1iaia (i,b1,j1,a)
               t1iiaa (i,j1,a,b1)  = tiaia  (i,b1,j1,a)
               PUT  Dijab_ab (i,j1,a,b1) += t1iiaa (i,j1,a,b1)
            ENDDO i
         ENDDO j1
         DEALLOCATE  Liaia  (*,b2,j2,a)
         DEALLOCATE  L1iaia (*,b2,j2,a)
      ENDPARDO  b1, b2, j2, a

      PARDO  b1, a2, i2, a
         ALLOCATE  Liaia  (*,a2,i2,a)
         ALLOCATE  L1iaia (*,a2,i2,a)
         DO i  
            REQUEST               L2R2_aaaa (i,a2,i2,a) i
            REQUEST               L2T2_aaaa (i,a2,i2,a) i
            Liaia  (i,a2,i2,a)  = L2R2_aaaa (i,a2,i2,a)
            L1iaia (i,a2,i2,a)  = L2T2_aaaa (i,a2,i2,a)
            Liaia  (i,a2,i2,a) *= 0.25
            L1iaia (i,a2,i2,a) *= 0.25
         ENDDO i
         DO j1
            REQUEST  T2AB (a2,i2,b1,j1) j1
            REQUEST  R2AB (a2,i2,b1,j1) j1
            DO i
               tiaia  (i,b1,j1,a)  = Liaia  (i,a2,i2,a) * T2AB (a2,i2,b1,j1)
               t1iaia (i,b1,j1,a)  = L1iaia (i,a2,i2,a) * R2AB (a2,i2,b1,j1)
               tiaia  (i,b1,j1,a) += t1iaia (i,b1,j1,a)
               t1iiaa (i,j1,a,b1)  = tiaia  (i,b1,j1,a)
               PUT  Dijab_ab (i,j1,a,b1) += t1iiaa (i,j1,a,b1)
            ENDDO i
         ENDDO j1
         DEALLOCATE  Liaia  (*,a2,i2,a)
         DEALLOCATE  L1iaia (*,a2,i2,a)
      ENDPARDO  b1, a2, i2, a

      PARDO  a, a2, i2, b1
         ALLOCATE  Liaia  (*,a2,i2,b1)
         ALLOCATE  L1iaia (*,a2,i2,b1)
         DO j1
            REQUEST                 L2R2_baab (j1,a2,i2,b1) j1
            REQUEST                 L2T2_baab (j1,a2,i2,b1) j1
            Liaia  (j1,a2,i2,b1)  = L2R2_baab (j1,a2,i2,b1)
            L1iaia (j1,a2,i2,b1)  = L2T2_baab (j1,a2,i2,b1)
            Liaia  (j1,a2,i2,b1) *= 0.25
            L1iaia (j1,a2,i2,b1) *= 0.25
         ENDDO j1
         DO i
            REQUEST       T2AA (a,i,a2,i2) i
            REQUEST       R2AA (a,i,a2,i2) i
            GET           R1A  (a,i2)
            GET           R1A  (a2,i)
            tai  (a2,i) = LT1A (a2,i)
            t1ai (a,i2) = R1A  (a,i2)
# TAU like
            taiai  (a,i,a2,i2)  = tai (a2,i) ^ LT1A (a,i2)
            taiai  (a,i,a2,i2) *= -2.0
            taiai  (a,i,a2,i2) += T2AA  (a,i,a2,i2)
# RTAU like
            t1aiai (a,i,a2,i2)  = R1A  (a2,i) ^ LT1A (a,i2)
            t2pppp (a,i,a2,i2)  = LT1A (a2,i) ^ t1ai (a,i2)
            t1aiai (a,i,a2,i2) += t2pppp (a,i,a2,i2)
            t1aiai (a,i,a2,i2) *= -2.0
            t1aiai (a,i,a2,i2) += R2AA (a,i,a2,i2)
            DO j1
               tiaia  (j1,a,i,b1)  = taiai  (a,i,a2,i2) * Liaia  (j1,a2,i2,b1)
               t1iaia (j1,a,i,b1)  = t1aiai (a,i,a2,i2) * L1iaia (j1,a2,i2,b1)
               tiaia  (j1,a,i,b1) += t1iaia (j1,a,i,b1)
               tiiaa  (i,j1,a,b1)  = tiaia  (j1,a,i,b1)
               PUT  Dijab_ab (i,j1,a,b1) += tiiaa (i,j1,a,b1)
            ENDDO j1
         ENDDO i
         DEALLOCATE  Liaia  (*,a2,i2,a)
         DEALLOCATE  L1iaia (*,a2,i2,a)
      ENDPARDO  a, a2, i2, b1

      PARDO  a, b2, j2, b1
         ALLOCATE  Liaia  (*,b2,j2,b1)
         ALLOCATE  L1iaia (*,b2,j2,b1)
         DO j1
            REQUEST                 L2R2_aaaa (j1,b2,j2,b1) j1
            REQUEST                 L2T2_aaaa (j1,b2,j2,b1) j1
            Liaia  (j1,b2,j2,b1)  = L2R2_aaaa (j1,b2,j2,b1)
            L1iaia (j1,b2,j2,b1)  = L2T2_aaaa (j1,b2,j2,b1)
            Liaia  (j1,b2,j2,b1) *= 0.25
            L1iaia (j1,b2,j2,b1) *= 0.25
         ENDDO j1
         DO i
            REQUEST  T2AB (a,i,b2,j2) i
            REQUEST  R2AB (a,i,b2,j2) i
            DO j1
               tiaia  (j1,a,i,b1)  = T2AB (a,i,b2,j2) * Liaia  (j1,b2,j2,b1)
               t1iaia (j1,a,i,b1)  = R2AB (a,i,b2,j2) * L1iaia (j1,b2,j2,b1)
               tiaia  (j1,a,i,b1) += t1iaia (j1,a,i,b1)
               tiiaa  (i,j1,a,b1)  = tiaia  (j1,a,i,b1)
               PUT  Dijab_ab (i,j1,a,b1) += tiiaa (i,j1,a,b1)
            ENDDO j1
         ENDDO i
         DEALLOCATE  Liaia  (*,b2,j2,a)
         DEALLOCATE  L1iaia (*,b2,j2,a)
      ENDPARDO  a, b2, j2, b1

      PARDO  a, b2, i2, b1
         ALLOCATE  Liiaa  (*,i2,b2,b1)
         ALLOCATE  L1iiaa (*,i2,b2,b1)
         DO i
            REQUEST                L2R2_abab (i,b1,i2,b2) i
            REQUEST                L2T2_abab (i,b1,i2,b2) i
            Liiaa  (i,i2,b2,b1)  = L2R2_abab (i,b1,i2,b2)
            L1iiaa (i,i2,b2,b1)  = L2T2_abab (i,b1,i2,b2)
            Liiaa  (i,i2,b2,b1) *= 0.25
            L1iiaa (i,i2,b2,b1) *= 0.25
         ENDDO i
         DO j1 
            REQUEST        T2AB (a,i2,b2,j1) j1
            REQUEST        R2AB (a,i2,b2,j1) j1
            GET            R1A  (a,i2)
            GET            R1A  (b2,j1)
            tai  (b2,j1) = LT1A (b2,j1)
            t1ai (a,i2)  = R1A  (a,i2)
# TAU like
            taiai  (a,i2,b2,j1)  = LT1A (a,i2) ^ tai (b2,j1)
            taiai  (a,i2,b2,j1) *= 2.0
            taiai  (a,i2,b2,j1) += T2AB   (a,i2,b2,j1)
# RTAU like
            t1aiai (a,i2,b2,j1)  = LT1A (a,i2) ^ R1A  (b2,j1)
            t2pppp (a,i2,b2,j1)  = t1ai (a,i2) ^ LT1A (b2,j1)
            t1aiai (a,i2,b2,j1) += t2pppp (a,i2,b2,j1)
            t1aiai (a,i2,b2,j1) *= 2.0
            t1aiai (a,i2,b2,j1) += R2AB (a,i2,b2,j1)
            DO i
               tiaia  (i,a,j1,b1)  = taiai  (a,i2,b2,j1) * Liiaa  (i,i2,b2,b1)
               t1iaia (i,a,j1,b1)  = t1aiai (a,i2,b2,j1) * L1iiaa (i,i2,b2,b1)
               tiaia  (i,a,j1,b1) += t1iaia (i,a,j1,b1)
               t1iiaa (i,j1,a,b1)  = tiaia (i,a,j1,b1)
               PUT  Dijab_ab (i,j1,a,b1) += t1iiaa (i,j1,a,b1)
            ENDDO i
         ENDDO j1
         DEALLOCATE  Liiaa  (*,i2,b2,b1)
         DEALLOCATE  L1iiaa (*,i2,b2,b1)
      ENDPARDO  a, b2, i2, b1

      PARDO  b1, a2, j2, a
         ALLOCATE  Liaia  (*,a2,j2,a)
         ALLOCATE  L1iaia (*,a2,j2,a)
         DO j1
            REQUEST                L2R2_baba (j1,a,j2,a2) j1
            REQUEST                L2T2_baba (j1,a,j2,a2) j1
            Liaia  (j1,a2,j2,a)  = L2R2_baba (j1,a,j2,a2)
            L1iaia (j1,a2,j2,a)  = L2T2_baba (j1,a,j2,a2)
            Liaia  (j1,a2,j2,a) *= 0.25
            L1iaia (j1,a2,j2,a) *= 0.25
         ENDDO j1
         DO i
            REQUEST        T2AB (a2,i,b1,j2) i
            REQUEST        R2AB (a2,i,b1,j2) i
            GET            R1A  (a2,i)
            GET            R1A  (b1,j2)
            tai  (b1,j2) = LT1A (b1,j2)
            t1ai (a2,i)  = R1A  (a2,i)
# TAU like
            taiai  (a2,i,b1,j2)  = LT1A (a2,i) ^ tai (b1,j2)
            taiai  (a2,i,b1,j2) *= 2.0
            taiai  (a2,i,b1,j2) += T2AB (a2,i,b1,j2)
# RTAU like
            t1aiai (a2,i,b1,j2)  = LT1A (a2,i) ^ R1A  (b1,j2)
            t2pppp (a2,i,b1,j2)  = t1ai (a2,i) ^ LT1A (b1,j2)
            t1aiai (a2,i,b1,j2) += t2pppp (a2,i,b1,j2)
            t1aiai (a2,i,b1,j2) *= 2.0
            t1aiai (a2,i,b1,j2) += R2AB (a2,i,b1,j2)
            DO j1
               tpppp  (j1,i,b1,a)  = taiai  (a2,i,b1,j2) * Liaia  (j1,a2,j2,a)
               t1pppp (j1,i,b1,a)  = t1aiai (a2,i,b1,j2) * L1iaia (j1,a2,j2,a)
               tpppp  (j1,i,b1,a) += t1pppp (j1,i,b1,a)
               t1iiaa (i,j1,a,b1)  = tpppp  (j1,i,b1,a)
               PUT  Dijab_ab (i,j1,a,b1) += t1iiaa (i,j1,a,b1)
            ENDDO j1
         ENDDO i
         DEALLOCATE  Liaia  (*,a2,j2,a)
         DEALLOCATE  L1iaia (*,a2,j2,a)
      ENDPARDO  b1, a2, j2, a
#
#
#          ...ready!
#     
#     
      ENDPROC  DIJAB
#-------------------------------------------------------------------------



#-------------------------------------------------------------------------
#
#     -------------------
      PROC  CHECK_DENSITY
#     -------------------
#
#
      esum_aa = 0.0
      esum_ab = 0.0
      energy_aa = 0.0
      energy_ab = 0.0
      EXECUTE  SIP_BARRIER

      PARDO  i, i1, i2, i3
         GET                   Dijkl_aa (i,i1,i2,i3)
         GET                   Dijkl_aa (i2,i3,i,i1)
         tiiii (i,i1,i2,i3)  = Dijkl_aa (i2,i3,i,i1)
         tiiii (i,i1,i2,i3) += Dijkl_aa (i,i1,i2,i3)
         tiiii (i,i1,i2,i3) *= 0.5
         etemp  = tiiii (i,i1,i2,i3) * tiiii (i,i1,i2,i3)
         etemp *= 0.25
         esum_aa += etemp
      ENDPARDO  i, i1, i2, i3

      PARDO  i, i1, i2, i3
         GET                   Dijkl_ab (i,i1,i2,i3)
         GET                   Dijkl_ab (i2,i3,i,i1)
         tiiii (i,i1,i2,i3)  = Dijkl_ab (i2,i3,i,i1)
         tiiii (i,i1,i2,i3) += Dijkl_ab (i,i1,i2,i3)
         tiiii (i,i1,i2,i3) *= 0.5
         etemp  = tiiii (i,i1,i2,i3) * tiiii (i,i1,i2,i3)
         esum_ab += etemp
      ENDPARDO  i, i1, i2, i3

      PARDO  a, a1, a2, a3
         REQUEST              Dabcd_ab (a,a1,a2,a3) a
         tpppp (a,a1,a2,a3) = Dabcd_ab (a,a1,a2,a3)
         etemp = tpppp (a,a1,a2,a3) * tpppp (a,a1,a2,a3)
         esum_aa += etemp
      ENDPARDO  a, a1, a2, a3

      PARDO  a, a1, a2, a3
         REQUEST              Dabcd_aa (a,a1,a2,a3) a
         tpppp (a,a1,a2,a3) = Dabcd_aa (a,a1,a2,a3)
         etemp = tpppp (a,a1,a2,a3) * tpppp (a,a1,a2,a3)
         esum_ab += etemp
      ENDPARDO  a, a1, a2, a3

      PARDO  a, a2, a1, i
         REQUEST             Dabci_aaaa (a,a2,a1,i) a
         tpppp (a,a2,a1,i) = Dabci_aaaa (a,a2,a1,i)
         etemp = tpppp (a,a2,a1,i) * tpppp (a,a2,a1,i)
         esum_aa += etemp
      ENDPARDO  a, a2, a1, i

      PARDO  a, a2, a1, i
         REQUEST             Dabci_abab (a,a2,a1,i) a
         tpppp (a,a2,a1,i) = Dabci_abab (a,a2,a1,i)
         etemp = tpppp (a,a2,a1,i) * tpppp (a,a2,a1,i)
         esum_ab += etemp
      ENDPARDO  a, a2, a1, i

      PARDO  a, a2, a1, i
         REQUEST             Dabci_baba (a,a2,a1,i) a
         tpppp (a,a2,a1,i) = Dabci_baba (a,a2,a1,i)
         etemp = tpppp (a,a2,a1,i) * tpppp (a,a2,a1,i)
         esum_ab += etemp
      ENDPARDO  a, a2, a1, i

      PARDO  i, i1, i2, a
         GET                 Dijka_aaaa (i,i1,i2,a)
         tpppp (i,i1,i2,a) = Dijka_aaaa (i,i1,i2,a)
         etemp = tpppp (i,i1,i2,a) * tpppp (i,i1,i2,a)
         esum_aa += etemp
      ENDPARDO  i, i1, i2, a

      PARDO  i, i1, i2, a
         GET                 Dijka_abab (i,i1,i2,a)
         tpppp (i,i1,i2,a) = Dijka_abab (i,i1,i2,a)
         etemp = tpppp (i,i1,i2,a) * tpppp (i,i1,i2,a)
         esum_ab += etemp
      ENDPARDO  i, i1, i2, a

      PARDO  i, i1, i2, a
         GET                 Dijka_baba (i,i1,i2,a)
         tpppp (i,i1,i2,a) = Dijka_baba (i,i1,i2,a)
         etemp = tpppp (i,i1,i2,a) * tpppp (i,i1,i2,a)
         esum_ab += etemp
      ENDPARDO  i, i1, i2, a

      PARDO  i, a, i1, a1
         GET                 Dibja_aaaa (i,a,i1,a1)
         tpppp (i,a,i1,a1) = Dibja_aaaa (i,a,i1,a1)
         etemp = tpppp (i,a,i1,a1) * tpppp (i,a,i1,a1)
         esum_aa += etemp
      ENDPARDO  i, a, i1, a1

      PARDO  i, a, i1, a1
         GET                 Dibja_abab (i,a,i1,a1)
         tpppp (i,a,i1,a1) = Dibja_abab (i,a,i1,a1)
         etemp = tpppp (i,a,i1,a1) * tpppp (i,a,i1,a1)
         esum_ab += etemp
      ENDPARDO  i, a, i1, a1

      PARDO  i, a, i1, a1
         GET                 Dibja_baba (i,a,i1,a1)
         tpppp (i,a,i1,a1) = Dibja_baba (i,a,i1,a1)
         etemp = tpppp (i,a,i1,a1) * tpppp (i,a,i1,a1)
         esum_ab += etemp
      ENDPARDO  i, a, i1, a1

      PARDO  i, a, i1, a1
         GET                  Dibja_abba (i,a1,i1,a)
         GET                  Dibja_baab (i1,a,i,a1)
         tpppp (i1,a,i,a1)  = Dibja_abba (i,a1,i1,a)
         tpppp (i1,a,i,a1) += Dibja_abba (i1,a,i,a1)
         tpppp (i1,a,i,a1) *= 0.5
         etemp = tpppp (i1,a,i,a1) * tpppp (i1,a,i,a1)
         esum_ab += etemp
      ENDPARDO  i, a, i1, a1

      PARDO  i, i1, a, a1
         GET                  Dijab_aa (i,i1,a,a1)
         taiai (a,i,a1,i1)  = Dijab_aa (i,i1,a,a1)
         etemp = taiai (a,i,a1,i1) * taiai (a,i,a1,i1)
         esum_aa += etemp
      ENDPARDO  i, i1, a, a1

      PARDO  i, i1, a, a1
         GET                  Dijab_ab (i,i1,a,a1)
         taiai (a,i,a1,i1)  = Dijab_ab (i,i1,a,a1)
         etemp = taiai (a,i,a1,i1) * taiai (a,i,a1,i1)
         esum_ab += etemp
      ENDPARDO  i, i1, a, a1

      EXECUTE  SERVER_BARRIER
      COLLECTIVE  energy_aa += esum_aa
      COLLECTIVE  energy_ab += esum_ab
      EXECUTE  SERVER_BARRIER
      EXECUTE  PRINT_SCALAR  energy_aa
      EXECUTE  PRINT_SCALAR  energy_ab

      energy_aa *= 2.0
      energy_aa += energy_ab

      EXECUTE  PRINT_SCALAR  ZERO
      EXECUTE  PRINT_SCALAR  ZERO
      EXECUTE  PRINT_SCALAR  energy_aa
      EXECUTE  PRINT_SCALAR  ZERO
      EXECUTE  PRINT_SCALAR  ZERO
#
#
#          ...ready!
#     
#     
      ENDPROC  CHECK_DENSITY
#-------------------------------------------------------------------------



#-------------------------------------------------------------------------
#
#     ----------------------
      PROC  COMPUTE_TWO_DENS
#     ----------------------
#
#
      CREATE  L2RTAU_iiii
      CREATE  L2RTAU_ijij
      CREATE  L2TTAU_iiii
      CREATE  L2TTAU_ijij

      ALLOCATE  LR2L2_ii (*,*)
      ALLOCATE  LR2L2_jj (*,*)
      ALLOCATE  LT2L2_ii (*,*)
      ALLOCATE  LT2L2_jj (*,*)
      ALLOCATE  LR2L2_aa (*,*)
      ALLOCATE  LR2L2_bb (*,*)
      ALLOCATE  LT2L2_aa (*,*)
      ALLOCATE  LT2L2_bb (*,*)
      ALLOCATE  LR1L2_ai (*,*)
      ALLOCATE  LR1L2_bj (*,*)
      ALLOCATE  LR2L1_ai (*,*)
      ALLOCATE  LR2L1_bj (*,*)
      ALLOCATE  L_Z1_ai  (*,*)
      ALLOCATE  L_Z1_bj  (*,*)
      ALLOCATE  L_Z2_ai  (*,*)
      ALLOCATE  L_Z2_bj  (*,*)
      ALLOCATE  L_Y_aa   (*,*)
      ALLOCATE  L_Y_bb   (*,*)
      ALLOCATE  L_Y_ii   (*,*)
      ALLOCATE  L_Y_jj   (*,*)
      ALLOCATE  L_Z_aa   (*,*)
      ALLOCATE  L_Z_bb   (*,*)
      ALLOCATE  L_Z_ii   (*,*)
      ALLOCATE  L_Z_jj   (*,*)
      EXECUTE  SIP_BARRIER

      CALL  TWO_DENS_INT

      CREATE  Dijkl_aa
      CREATE  Dijkl_ab

      CREATE  Dijka_aaaa
      CREATE  Dijka_abab
      CREATE  Dijka_baba

      CREATE  Dijab_aa
      CREATE  Dijab_ab
      CREATE  Dijab_bb

      CREATE  Dibja_aaaa
      CREATE  Dibja_abab
      CREATE  Dibja_baba
      CREATE  Dibja_abba
      CREATE  Dibja_baab

      EXECUTE  SERVER_BARRIER

      CALL  DIJKL # Check
      CALL  PRINT_DIJKL
      CALL  DABCD # Check
      CALL  PRINT_DABCD
      CALL  DABCI # Check
      CALL  PRINT_DAIBC
      CALL  DIJKA # Check
      CALL  PRINT_DIJKA
      CALL  DAIBJ # Check
      CALL  PRINT_DAIBJ
      CALL  DIJAB # Check
      CALL  PRINT_DIJAB

      EXECUTE  SIP_BARRIER
      DEALLOCATE  LR2L2_ii (*,*)
      DEALLOCATE  LR2L2_jj (*,*)
      DEALLOCATE  LT2L2_ii (*,*)
      DEALLOCATE  LT2L2_jj (*,*)
      DEALLOCATE  LR2L2_aa (*,*)
      DEALLOCATE  LR2L2_bb (*,*)
      DEALLOCATE  LT2L2_aa (*,*)
      DEALLOCATE  LT2L2_bb (*,*)
      DEALLOCATE  LR1L2_ai (*,*)
      DEALLOCATE  LR1L2_bj (*,*)
      DEALLOCATE  LR2L1_ai (*,*)
      DEALLOCATE  LR2L1_bj (*,*)
      DEALLOCATE  L_Z1_ai  (*,*)
      DEALLOCATE  L_Z1_bj  (*,*)
      DEALLOCATE  L_Z2_ai  (*,*)
      DEALLOCATE  L_Z2_bj  (*,*)
      DEALLOCATE  L_Y_aa   (*,*)
      DEALLOCATE  L_Y_bb   (*,*)
      DEALLOCATE  L_Y_ii   (*,*)
      DEALLOCATE  L_Y_jj   (*,*)
      DEALLOCATE  L_Z_aa   (*,*)
      DEALLOCATE  L_Z_bb   (*,*)
      DEALLOCATE  L_Z_ii   (*,*)
      DEALLOCATE  L_Z_jj   (*,*)
#
#
#          ...ready!
#
#
      ENDPROC  COMPUTE_TWO_DENS
#-------------------------------------------------------------------------




#-------------------------------------------------------------------------
#
#     -------------------
      PROC  SIAL_TEMPLATE
#     -------------------
#
#
      ZERO = 0.0
#
#
#          ...ready!
#     
#     
      ENDPROC  SIAL_TEMPLATE
#-------------------------------------------------------------------------




#-------------------------------------------------------------------------
#                                                                        #
#                      \--------------------------/                      #
#                      |    BEGIN MAIN PROGRAM    |                      #
#                      /--------------------------\                      #
#                                                                        #
#-------------------------------------------------------------------------
#                                                                        #
#                                                                        #
      execute load_balance_off 
      ZERO      = 0.0
      ONE       = 1.0
      TWO       = 2.0
      THREE     = 3.0
      ONEHALF   = 0.5
      R0_THRESH = 0.0000001

      inext = 0.0 # Very important for writing densities
      root_thresh=eom_tol

      ALLOCATE  GRDSECM (*,*)
      ALLOCATE  EXCSECM (*,*)
      ALLOCATE  GRDQUAD (*,*)
      ALLOCATE  EXCQUAD (*,*)
#
#
#
#             Read in the necessary arrays from BLOCKDATA and
#             create necessary arrays that are in the loop
#
#
#
      CALL  READ
      CALL  CREATE_ARRAYS
#
#
#
#             Compute pieces for the dipole moment
#
#
#
      CALL  HF_DENSITY

      tmpnuc = 0.0
      DO jatom
         tmpnuc = tmpnuc + 1.0
      ENDDO jatom

      dipnucx = tmpnuc
      dipnucy = dipnucx
      dipnucz = dipnucy

      EXECUTE  NUC_DIPOLE_MOMENT  ONE    dipnucx
      EXECUTE  NUC_DIPOLE_MOMENT  TWO    dipnucy
      EXECUTE  NUC_DIPOLE_MOMENT  THREE  dipnucz

      R0           = 1.0

      LOGRIGHT     = ONE
      CALL  PUT_IN_Lk
      LOGRIGHT     = ZERO

      GROUNDSTATE  = ONE
      LRNORM = 1.0
      CALL  COMPUTE_DENSITY
      CALL  BACK_TRANS_COMP_DIP
#     CALL  PRINT_OUT_PIECES

      iroot = 1.0
      inext = 1.0
      CALL  WRITE_TO_JOBARC

      DIP_GRD_X  = DIP_MOM_X
      DIP_GRD_Y  = DIP_MOM_Y
      DIP_GRD_Z  = DIP_MOM_Z
      DIP_GRD_X += dipnucx
      DIP_GRD_Y += dipnucy
      DIP_GRD_Z += dipnucz

      EXECUTE  PRINT_SCALAR  ZERO
      EXECUTE  PRINT_SCALAR  DIP_GRD_X
      EXECUTE  PRINT_SCALAR  DIP_GRD_Y
      EXECUTE  PRINT_SCALAR  DIP_GRD_Z

      CALL  COMPUTE_MOMENTS
      GROUNDSTATE = ZERO
      EXECUTE  PRINT_SCALAR  ZERO
#
#
#
#             Begin the loop over states
#
#
#
      POLTOTXX = 0.0
      POLTOTYY = 0.0
      POLTOTZZ = 0.0
      POLTOTXY = 0.0
      POLTOTXZ = 0.0
      POLTOTYZ = 0.0

      iroot = 0.0
      DO indstate
#
#
#
#             Grab an R1 and an R2 for the computation
#
#                NOTE: If OMEGA is equal to 100,000.00 then that means
#                      that there are no more EOM excitation energies
#
#             Then print the arrays if necessary (debugging purposes)
#
#             Finally, compute an R  value
#                                  0
#
#
#
         iroot += 1.0
         if iroot != 1.0
            inext -= 1.0
         endif 
         EXECUTE  PRINT_SCALAR  iroot
         if iroot <= eom_roots  

         CALL  GET_Rk_ARRAY
 
         IF  OMEGA == 100000.0
            exit                                       # indstate
         ENDIF
 
#         CALL  AMPL_PRINT
 
         CALL  R0_COMPUTE
         OLD_R0 = R0
         CALL  COMP_R_NORM
#
#
#
#             Set the "logic" to compute the Right Transition
#             Density Matrix.  Then put in LAMBDA arrays, then 
#             compute the Right Density
#
#             Then we back transform the density, and compute
#             the transition moments
#
#             NOTE:  One can print out the Density matrix if they want
#
#
#
         LOGRIGHT = ONE
         LRNORM = RNORM

         CALL  PUT_IN_Lk                      # This one puts in LAMBDA
         CALL  COMPUTE_DENSITY
         CALL  BACK_TRANS_COMP_DIP

         inext += 1
         CALL  WRITE_TO_JOBARC

         DIP_MOM_X_R = DIP_MOM_X
         DIP_MOM_Y_R = DIP_MOM_Y
         DIP_MOM_Z_R = DIP_MOM_Z

#         CALL  PRINT_OUT_PIECES
#
#
#
#             Set the "logic" to compute the Left Transition
#             Density Matrix.  Then put in Lk arrays, then 
#             compute the Right Density
#        
#             Then we back transform the density, and compute
#             the transition moments
#
#             NOTE:  One can print out the Density matrix if they want
#
#
#                                 !!! IMPORTANT !!!
#
#             Temporarily, we will put the transpose of R in for L
#             NOTE: This will rewrite the LAMBDA arrays, for this root
#
#
#
         LOGRIGHT = ZERO
         R0       = 1.0

         CALL  PUT_IN_Lk
         CALL  COMP_L_NORM
         EXECUTE  PRINT_SCALAR  RNORM
         EXECUTE  PRINT_SCALAR  LNORM
         LRNORM = LNORM
         CALL  COMPUTE_DENSITY
         CALL  BACK_TRANS_COMP_DIP

         inext += 1
         CALL  WRITE_TO_JOBARC

         DIP_MOM_X_L = DIP_MOM_X
         DIP_MOM_Y_L = DIP_MOM_Y
         DIP_MOM_Z_L = DIP_MOM_Z

#         CALL  PRINT_OUT_PIECES
#
#
#
#             Compute the excited state dipole moment
#
#
#
         LOGRIGHT    = ONE
         R0          = OLD_R0
         LRNORM = LNORM * RNORM

         EXCITESTATE = ONE
         CALL  COMPUTE_DENSITY
         CALL  COMPUTE_TWO_DENS

         GROUNDSTATE = ONE
         CALL  BACK_TRANS_COMP_DIP
         inext += 1
         CALL  WRITE_TO_JOBARC
         GROUNDSTATE = ZERO

#         CALL  PRINT_OUT_PIECES

         DIP_EXC_X  = DIP_MOM_X
         DIP_EXC_Y  = DIP_MOM_Y
         DIP_EXC_Z  = DIP_MOM_Z
         DIP_EXC_X += dipnucx
         DIP_EXC_Y += dipnucy
         DIP_EXC_Z += dipnucz

         EXECUTE  PRINT_SCALAR  ZERO
         EXECUTE  PRINT_SCALAR  DIP_EXC_X
         EXECUTE  PRINT_SCALAR  DIP_EXC_Y
         EXECUTE  PRINT_SCALAR  DIP_EXC_Z

         CALL  COMPUTE_MOMENTS
         EXCITESTATE = ZERO
#
#
#
#             Finally, compute the total transition moments,
#             oscillator strengths, electric polarizabilities,
#             total electric polarizabilities, and second
#             moments.  Then print the data.
#
#
#
         DIP_MOM_X = DIP_MOM_X_R * DIP_MOM_X_L
         DIP_MOM_Y = DIP_MOM_Y_R * DIP_MOM_Y_L
         DIP_MOM_Z = DIP_MOM_Z_R * DIP_MOM_Z_L

         OSC_STREN_X = OMEGA2 * DIP_MOM_X
         OSC_STREN_Y = OMEGA2 * DIP_MOM_Y
         OSC_STREN_Z = OMEGA2 * DIP_MOM_Z

         OSC_STREN  = OSC_STREN_X
         OSC_STREN += OSC_STREN_Y
         OSC_STREN += OSC_STREN_Z

         DIPXY = DIP_MOM_X_R * DIP_MOM_Y_R
         DIPXZ = DIP_MOM_X_R * DIP_MOM_Z_R
         DIPYZ = DIP_MOM_Y_R * DIP_MOM_Z_R

         POLXX = TWO * DIP_MOM_X
         POLYY = TWO * DIP_MOM_Y
         POLZZ = TWO * DIP_MOM_Z
         POLXY = TWO * DIPXY
         POLXZ = TWO * DIPXZ
         POLYZ = TWO * DIPYZ
         POLXX = POLXX / OMEGA
         POLYY = POLYY / OMEGA
         POLZZ = POLZZ / OMEGA
         POLXY = POLXY / OMEGA
         POLXZ = POLXZ / OMEGA
         POLYZ = POLYZ / OMEGA
         POLTOTXX += POLXX
         POLTOTYY += POLYY
         POLTOTZZ += POLZZ
         POLTOTXY += POLXY
         POLTOTXZ += POLXZ
         POLTOTYZ += POLYZ

         CALL  PRINT_EOM_DATA

#         GROUNDSTATE = ONE
#         CALL  PRINT_MOM_DATA
#         GROUNDSTATE = ZERO
#
#         EXCITESTATE = ONE
#         CALL  PRINT_MOM_DATA
#         EXCITESTATE = ZERO

         endif # indstate <= eom_roots  
      ENDDO indstate

      DEALLOCATE  GRDSECM (*,*)
      DEALLOCATE  EXCSECM (*,*)
      DEALLOCATE  GRDQUAD (*,*)
      DEALLOCATE  EXCQUAD (*,*)

      EXECUTE SIP_BARRIER
#
#
#
#          ...ready!
#
#
#    -----------------------------
      ENDSIAL EOMCCSD_DENSITY_RHF
#    -----------------------------
#
#-------------------------------------------------------------------------

