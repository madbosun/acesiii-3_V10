#  Copyright (c) 2003-2010 University of Florida
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  The GNU General Public License is included in this distribution
#  in the file COPYRIGHT.
#
			SIAL EOMCCSD_UHF_AO
#
#***********************************************************
#
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#
# Declare indeces
#
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      index ziter    = 1, cc_iter
#
      aoindex mu     = 1, norb
      aoindex nu     = 1, norb
      aoindex lambda = 1, norb
      aoindex sigma  = 1, norb
#
      moaindex i = baocc, eaocc
      moaindex i1= baocc, eaocc
      moaindex i2= baocc, eaocc
      moaindex i3= baocc, eaocc
#
      moaindex a = bavirt, eavirt
      moaindex a1= bavirt, eavirt
      moaindex a2= bavirt, eavirt
      moaindex a3= bavirt, eavirt
#
      moaindex j = baocc, eaocc
      moaindex j1= baocc, eaocc
      moaindex j2= baocc, eaocc
      moaindex j3= baocc, eaocc
#
      moaindex b = bavirt, eavirt
      moaindex b1= bavirt, eavirt
      moaindex b2= bavirt, eavirt
      moaindex b3= bavirt, eavirt
#
      moaindex p = baocc, eavirt
      moaindex p1= baocc, eavirt
      moaindex p2= baocc, eavirt
      moaindex p3= baocc, eavirt
#
      moaindex q = baocc, eavirt
      moaindex q1= baocc, eavirt
      moaindex q2= baocc, eavirt
      moaindex q3= baocc, eavirt
#
#     eom indeces
#
      index eomcycle = 1, 150
      index spdim = 1, 20 
      index spdim2 = 1, 20 
      index spdim20 = 1, 20 
      index j20 = 1, 20 
      index k20 = 1, 20 
      index j21 = 1, 21 
      index k21 = 1, 21 
      index jindex =1, 20
      index kindex =1, 20
      index jindex2 =1, 2 
      index kindex2 =1, 2 
      index jindex3 =1, 3 
      index kindex3 =1, 3 
      index jindex4 =1, 4 
      index kindex4 =1, 4 
      index jindex5 =1, 5 
      index kindex5 =1, 5 
      index jindex6 =1, 6 
      index kindex6 =1, 6 
      index jindex7 =1, 7 
      index kindex7 =1, 7
      index jindex8 =1, 8
      index kindex8 =1, 8
      index jindex9 =1, 9
      index kindex9 =1, 9
      index jindex10 =1, 10
      index kindex10 =1, 10
      index jindex11 =1, 11
      index kindex11 =1, 11
      index jindex12 =1, 12
      index kindex12 =1, 12
      index jindex13 =1, 13
      index kindex13 =1, 13
      index jindex14 =1, 14
      index kindex14 =1, 14
      index jindex15 =1, 15
      index kindex15 =1, 15
      index jindex16 =1, 16
      index kindex16 =1, 16
      index jindex17 =1, 17
      index kindex17 =1, 17
      index jindex18 =1, 18
      index kindex18 =1, 18
      index jindex19 =1, 19
      index kindex19 =1, 19
      index jindex20 =1, 20
      index kindex20 =1, 20

      index kroot = 1, 12 # Watson
      index indone = 1, 1 # Watson
#
# XPROP indexes 
#
      INDEX  jatom    = 1, natoms
      INDEX  kindex26 = 1, 26

      INDEX  moment   = 1, 3
      INDEX  secmom   = 1, 6
      INDEX  octmom   = 1, 10
#
#
#   Watson, Gradient arrays!
#
#
      SERVED       TAU_aa (a,i,a1,i1)
      SERVED       TAU_ab (a,i,b1,j1)

      SERVED       RTAU_aa (a,i,a1,i1)
      SERVED       RTAU_ab (a,i,b1,j1)

      DISTRIBUTED  L2RTAU_iiii (i,i1,i2,i3)
      DISTRIBUTED  L2RTAU_ijij (i,i1,j ,j1)
      DISTRIBUTED  L2TTAU_iiii (i,i1,i2,i3)
      DISTRIBUTED  L2TTAU_ijij (i,i1,j ,j1)

      DISTRIBUTED  DIS_OO1_A (i,i1)
      DISTRIBUTED  DIS_OO2_A (i,i1)
      DISTRIBUTED  DIS_OO3_A (i,i1)
      DISTRIBUTED  DIS_OO4_A (i,i1)

      DISTRIBUTED  DIS_VO1_A (a,i1)
      DISTRIBUTED  DIS_VO2_A (a,i1)
      DISTRIBUTED  DIS_VO3_A (a,i1)
      DISTRIBUTED  DIS_VO4_A (a,i1)

      DISTRIBUTED  DIS_VV1_A (a,a1)
      DISTRIBUTED  DIS_VV2_A (a,a1)
      DISTRIBUTED  DIS_VV3_A (a,a1)
      DISTRIBUTED  DIS_VV4_A (a,a1)

      LOCAL  L_Z1_ai (a,i)
      LOCAL  L_Z2_ai (a,i)

      LOCAL  L_Z_ii (i,i1)
      LOCAL  L_Z_aa (a,a1)
      LOCAL  L_Y_ii (i,i1)
      LOCAL  L_Y_aa (a,a1)

      LOCAL  LR1L2_ai (a,i1)
      LOCAL  LR2L1_ai (a,i1)
      LOCAL  LR2L2_aa (a,a1)
      LOCAL  LR2L2_ii (i,i1)
      LOCAL  LT2L2_aa (a,a1)
      LOCAL  LT2L2_ii (i,i1)

      distributed I3AA(i,a,i1,i2) 
      distributed I3AB(i,a,j,j1) 

      distributed Gmi_a(i,i1)
      distributed Gae_a(a,a1)

      distributed Dij_a(i,i1) 
      distributed Dab_a(a,a1) 
      distributed Dii(i,i1)
      distributed Daa(a1,a)

      distributed DOR_ii(i,i1)
      distributed DOR_aa(a,a1)

      distributed Iij_aa(i,i1)
      distributed Iab_aa(a,a1)
      distributed Iai_aa(a,i)
      distributed Iia_aa(i,a)
      distributed Xai_aa(a,i)

      LOCAL  tibij (i,b1,i3,j2)
      LOCAL  tjibi (j2,i3,b1,i)
      LOCAL  Lqqpp  (q,q1,p,p1)
      LOCAL  Liiii  (i,i1,i2,i3)
      LOCAL  L1iiii (i,i1,i2,i3)
      LOCAL  Liijj  (i,i1,j,j1)
      LOCAL  L1iijj (i,i1,j,j1)
      LOCAL  Laajj  (a,a1,j,j1)
      LOCAL  Liibb  (i,i1,b,b1)
      LOCAL  Liiaa  (i,i1,a,a1)
      LOCAL  Ljiba  (j,i,b,a)

      LOCAL  LR1W_ii  (i1,i2)
      LOCAL  LR1W_aa  (a1,a2)
      LOCAL  LR1W_ai  (a1,i1)
     #LOCAL  LR1L2_ai (a1,i1)
     #LOCAL  LR2L1_ai (a1,i1)
      LOCAL  LR2W2_ai (a1,i1)
      LOCAL  LR2W2_aa (a1,a2)
      LOCAL  LR2W2_ii (i1,i2)
     #LOCAL  LR2L2_aa (a1,a2)
     #LOCAL  LR2L2_ii (i1,i2)

     #SERVED  L2R2_aaaa (i,a1,i1,a)
     #SERVED  R2L2_aibj (a1,i1,b,j)
     #SERVED  R2L2_iibb (i,i1,b,b1)

      SERVED       L2R2_aaaa (i,a1,i1,a)   #
      SERVED       L2R2_abba (i,b1,j1,a)   #  These can be computed on the fly...
      SERVED       L2R2_abab (i,b,i1,b1)   #  So I don't know what is best...

      SERVED       L2T2_aaaa (i,a1,i1,a)   #
      SERVED       L2T2_abba (i,b1,j1,a)   #  These can be computed on the fly...
      SERVED       L2T2_abab (i,b1,i1,b)   #  So I don't know what is best...

      DISTRIBUTED  R2L2_iiii (i2,i,i3,i1)
      DISTRIBUTED  R2L2_iijj (i2,i,j2,j)

      DISTRIBUTED  R2G2_iiii (i2,i,i3,i1)
      DISTRIBUTED  R2G2_iijj (i2,i,j2,j)

      DISTRIBUTED  DIS_VO1 (a,i1)
      DISTRIBUTED  DIS_VO2 (a,i1)
      DISTRIBUTED  DIS_VO3 (a,i1)
      DISTRIBUTED  DIS_VO4 (a,i1)
      DISTRIBUTED  DIS_OO1 (i,i1)
      DISTRIBUTED  DIS_OO2 (i,i1)
      DISTRIBUTED  DIS_OO3 (i,i1)
      DISTRIBUTED  DIS_VV1 (a,a1)
      DISTRIBUTED  DIS_VV2 (a,a1)
      DISTRIBUTED  DIS_VV3 (a,a1)

      DISTRIBUTED  XI1_A (a,i)

      SERVED  XI2_AA (a,i,a1,i1)
      SERVED  XI2_AB (a,i,b,j)

      SCALAR  comp_grad

#
# Arrays/Scalars used exclusively in DIIS procedure. 
# -------------------------------------------------- 
#
       served D0aiai(a,i,a1,i1)
       served D1aiai(a,i,a1,i1)
       served D2aiai(a,i,a1,i1)
       served D3aiai(a,i,a1,i1)
       served D4aiai(a,i,a1,i1)
       served D5aiai(a,i,a1,i1)
#
       served D0aibj(a,i,b,j)
       served D1aibj(a,i,b,j)
       served D2aibj(a,i,b,j)
       served D3aibj(a,i,b,j)
       served D4aibj(a,i,b,j)
       served D5aibj(a,i,b,j)
#
       distributed D0ai(a,i)
       distributed D1ai(a,i)
       distributed D2ai(a,i)
       distributed D3ai(a,i)
       distributed D4ai(a,i)
       distributed D5ai(a,i)
#
       distributed e1ai(a,i)
       distributed e2ai(a,i)
       distributed e3ai(a,i)
       distributed e4ai(a,i)
       distributed e5ai(a,i)
#
       served Waiai(a,i,a1,i1)
       served e1aiai(a,i,a1,i1)
       served e2aiai(a,i,a1,i1)
       served e3aiai(a,i,a1,i1)
       served e4aiai(a,i,a1,i1)
       served e5aiai(a,i,a1,i1)
#
       served e1aibj(a,i,b,j)
       served e2aibj(a,i,b,j)
       served e3aibj(a,i,b,j)
       served e4aibj(a,i,b,j)
       served e5aibj(a,i,b,j)
       served e6aibj(a,i,b,j)
#
       scalar b11
       scalar b12
       scalar b13
       scalar b14
       scalar b15
       scalar b16
       scalar b17
       scalar b18
       scalar b19
       scalar b110 
#      
       scalar b22
       scalar b23
       scalar b24
       scalar b25
       scalar b26
       scalar b27
       scalar b28
       scalar b29
       scalar b210
#      
       scalar b33
       scalar b34
       scalar b35
       scalar b36
       scalar b37
       scalar b38
       scalar b39
       scalar b310
       scalar b44
       scalar b45
       scalar b46
       scalar b47
       scalar b48
       scalar b49
       scalar b410
#
       scalar b55
       scalar b56
       scalar b57
       scalar b58
       scalar b59
       scalar b510
#
       scalar b66
       scalar b67
       scalar b68
       scalar b69
       scalar b610
#
       scalar b77
       scalar b78
       scalar b79
       scalar b710
#
       scalar b88
       scalar b89
       scalar b810
#
       scalar b99
       scalar b910
#      
       scalar b1010
#      
       scalar Tb11
       scalar Tb12
       scalar Tb13
       scalar Tb14
       scalar Tb15
       scalar Tb16
       scalar Tb17
       scalar Tb18
       scalar Tb19
       scalar Tb110
#      
       scalar Tb22
       scalar Tb23
       scalar Tb24
       scalar Tb25
       scalar Tb26
       scalar Tb27
       scalar Tb28
       scalar Tb29
       scalar Tb210
#      
       scalar Tb33
       scalar Tb34
       scalar Tb35
       scalar Tb36
       scalar Tb37
       scalar Tb38
       scalar Tb39
       scalar Tb310
       scalar Tb44
       scalar Tb45
       scalar Tb46
       scalar Tb47
       scalar Tb48
       scalar Tb49
       scalar Tb410
#
       scalar Tb55
       scalar Tb56
       scalar Tb57
       scalar Tb58
       scalar Tb59
       scalar Tb510
#
       scalar Tb66
       scalar Tb67
       scalar Tb68
       scalar Tb69
       scalar Tb610
#
       scalar Tb77
       scalar Tb78
       scalar Tb79
       scalar Tb710
#
       scalar Tb88
       scalar Tb89
       scalar Tb810
#
       scalar Tb99
       scalar Tb910
#      
       scalar Tb1010
#      
       scalar c1 
       scalar c2 
       scalar c3 
       scalar c4 
       scalar c5
       scalar c6 
       scalar c7 
       scalar c8 
       scalar c9 
       scalar c10 
#
#
#   Watson, done gradient arrays!
#
#
      LOCAL  GRDSECM (secmom,indone)
      LOCAL  EXCSECM (secmom,indone)
      LOCAL  GRDQUAD (secmom,indone)
      LOCAL  EXCQUAD (secmom,indone)
      LOCAL  GRDOCTM (octmom,indone)
      LOCAL  EXCOCTM (octmom,indone)

      SERVED  R2AA_VECS (a,i,a1,i1,kroot)
      SERVED  R2AB_VECS (a,i,b ,j ,kroot)

      SERVED  R2AA (a,i,a1,i1)
      SERVED  R2AB (a,i,b,j)

      SERVED  L2AA_VECS (i,a,i1,a1,kroot)
      SERVED  L2AB_VECS (i,a,j ,b ,kroot)

      SERVED  L2AA (i,a,i1,a1)
      SERVED  L2AB (i,a,j,b)

      SERVED  A2AA (i,a,i1,a1)
      SERVED  A2BB (j,b,j1,b1)
      SERVED  A2AB (i,a,j,b)

      DISTRIBUTED  R1A_VECS (a,i,kroot)
      DISTRIBUTED  L1A_VECS (i,a,kroot)

      DISTRIBUTED  R1A (a,i)
      DISTRIBUTED  R1B (b,j)

      DISTRIBUTED  L1A (i,a)
      LOCAL        LL1A (i,a)
      DISTRIBUTED  L1B (j,b)

      DISTRIBUTED  A1A (i,a)
      LOCAL        LA1A (i,a)
      DISTRIBUTED  A1B (j,b)

      DISTRIBUTED  T1A (a,i)
      LOCAL        LT1A (a,i)
      DISTRIBUTED  T1B (b,j)

      DISTRIBUTED  EE  (kindex12,indone)
      DISTRIBUTED  REE (kindex12,indone)
      DISTRIBUTED  LEE (kindex12,indone)
      TEMP         TEE (kindex12,indone)

      TEMP  TMOM_DATA (kindex26,kindex26)

      SERVED  T2AA (a,i,a1,i1)
      SERVED  T2AB (a,i,b,j)
      SERVED  T2BB (b,j,b1,j1)

      TEMP  tibib (i,b,i1,b1)
      TEMP  t1ibib (i,b,i1,b1)
      TEMP  tijab (i,j,a,b)
      TEMP  tabij (a,b,i,j)
      TEMP  tijij (i,j,i1,j1)
      TEMP  tpipi (p,i,p1,i1)
      TEMP  tiaia (i,a,i1,a1)
      TEMP  t1iaia(i,a,i1,a1)
      TEMP  tjbjb (j,b,j1,b1)
      TEMP  tiajb (i,a,j ,b )
      TEMP  taibj (a,i,b ,j )
      TEMP  taibj1(a,i,b ,j )
      TEMP  taiai (a,i,a1,i1)
      TEMP  taiai1(a,i,a1,i1)
      TEMP  tbjbj (b,j,b1,j1)
      TEMP  tpppp (p,p1,q,q1) 
      TEMP  tpqqp (p,q,q1,p1) 
      TEMP  t1pqqp (p,q,q1,p1) 
      TEMP  tiiaa (i,i1,a,a1) 

      TEMP  tia  (i,a)
      TEMP  tia1 (i,a)
      TEMP  tia2 (i,a)
      TEMP  tia3 (i,a)
      TEMP  tai  (a,i)
      TEMP  tai1 (a,i)
      TEMP  tai2 (a,i)
      TEMP  tjb  (j,b)
      TEMP  tjb1 (j,b)
      TEMP  tjb2 (j,b)
      TEMP  tjb3 (j,b)
      TEMP  tbj  (b,j)
      TEMP  tbj2 (b,j)
      TEMP  tbj3 (b,j)
      TEMP  tii  (i1,i)
      TEMP  t1ii (i1,i)
      TEMP  t2ii (i1,i)
      TEMP  t3ii (i1,i)
      TEMP  tjj  (j1,j)
      TEMP  taa  (a,a1)
      TEMP  taa2 (a,a1)
      TEMP  t1aa (a,a1)
      TEMP  t3aa (a,a1)
      TEMP  tbb  (b,b1)
      TEMP  tbb2 (b,b1)

      TEMP  tii1 (i,i1)
      TEMP  tii2 (i,i1)
      TEMP  tjj1 (j,j1)
      TEMP  tjj2 (j,j1)
      TEMP  taa1 (a,a1)
      TEMP  tbb1 (b,b1)

      LOCAL  lai (a,i)
      LOCAL  lbj (b,j)
      LOCAL  lia (i,a)
      LOCAL  ljb (j,b)
      LOCAL  laa (a,a1)
      LOCAL  l1aa (a,a1)
      LOCAL  lbb (b,b1)
      LOCAL  l1bb (b,b1)
      LOCAL  lii (i,i1)
      LOCAL  l1ii (i,i1)
      LOCAL  ljj (j,j1)
      LOCAL  l1jj (j,j1)
      LOCAL  lxx (mu,nu)

      TEMP  txx  (mu,nu)
      TEMP  txx2 (mu,nu)
      TEMP  txx3 (mu,nu)
      TEMP  txi  (mu,i)
      TEMP  txj  (mu,j)
      TEMP  txa  (mu,a)
      TEMP  txb  (mu,b)

      DISTRIBUTED  HBAR_ia (i,a)
      DISTRIBUTED  HBAR_jb (j,b)

      SERVED  Vaaii  (a,a1,i,i1)
      SERVED  Viaai  (i,a,a1,i1)
      SERVED  Vaaai  (a,a1,a2,i)

      DISTRIBUTED  DENS_VV_A (a,a1)
      DISTRIBUTED  DENS_OO_A (i,i1)
      DISTRIBUTED  DENS_OV_A (i,a)
      DISTRIBUTED  DENS_VO_A (a,i)
      DISTRIBUTED  Dai (a,i)

      distributed T2L2_VV_A (a,a1) 
      distributed R2L2_VV_A (a,a1) 
      distributed DENS_INT_OV_A (i,a) 
      distributed T1L1_OO_A (i,i1) 
      distributed T2L2_OO_A (i,i1) 
      distributed R2L2_OO_A (i,i1) 

      DISTRIBUTED  AO_DENS (mu,nu)
      DISTRIBUTED  DHF (mu,nu)

      LOCAL  liaia  (i,a,i1,a1)
      LOCAL  laiai  (a,i,a1,i1)
      LOCAL  laibj  (a,i,b, j )
      LOCAL  lbjai  (b,j,a, i )
      LOCAL  liajb  (i,a,j, b )
      LOCAL  laiai2 (a,i,a1,i1)
      LOCAL  laibj2 (a,i1,b,j )
      LOCAL  laiai3 (a,i,a1,i2)
      LOCAL  laiai4 (a,i2,a1,i) 
      LOCAL  laiai5 (a,i2,a1,i) 
      LOCAL  laibj3 (a,i1,b, j)
      LOCAL  laibj4 (a,j,b,i) 
      LOCAL  laibj5 (a,j,b,i) 
      LOCAL  lbiaj  (b,i,a,j) 
      LOCAL  lbiaj2 (b,i,a,j) 

      LOCAL  lbjbj  (b,j,b1,j1)
      LOCAL  lbjbj2 (b,j,b1,j1)
      LOCAL  lbjbj3 (b,j,b1,j2)
      LOCAL  lbjbj4 (b,j2,b1,j) 
      LOCAL  lbjbj5 (b,j2,b1,j) 

      SCALAR  ZERO
      SCALAR  ONE
      SCALAR  TWO
      SCALAR  THREE
      SCALAR  ONEHALF
      SCALAR  znorm
      SCALAR  tmpnuc
      SCALAR  dipnuc
      SCALAR  dipnucx
      SCALAR  dipnucy
      SCALAR  dipnucz
      SCALAR  AMPLTHRESH
      SCALAR  R_OMEGA
      SCALAR  OMEGA
      SCALAR  OMEGA2
      SCALAR  OLD_R0
      SCALAR  R0
      SCALAR  L0
      SCALAR  R0_THRESH
      SCALAR  LOGRIGHT
      SCALAR  GROUNDSTATE
      SCALAR  EXCITESTATE
      SCALAR  iroot
      SCALAR  imomcount
      SCALAR  rootcount
      SCALAR  root_thresh
      SCALAR  zcrit
      SCALAR  izero_ints
      SCALAR  iphase
      SCALAR  etemp
      SCALAR  etemp1
      SCALAR  etemp2
      SCALAR  etemp3
      SCALAR  etemp4
      SCALAR  etemp5
      SCALAR  etemp6
      SCALAR  sum1
      SCALAR  sum2
      SCALAR  sum3
      SCALAR  sum4
      SCALAR  sum5
      SCALAR  sum6
      SCALAR  OSC_STREN
      SCALAR  OSC_STREN1
      SCALAR  OSC_STREN2
      SCALAR  OSC_STREN3
      SCALAR  OSC_STREN_X
      SCALAR  OSC_STREN_Y
      SCALAR  OSC_STREN_Z
      SCALAR  DIP_SCF_X
      SCALAR  DIP_SCF_Y
      SCALAR  DIP_SCF_Z
      SCALAR  DIP_EXC_X
      SCALAR  DIP_EXC_Y
      SCALAR  DIP_EXC_Z
      SCALAR  DIP_GRD_X
      SCALAR  DIP_GRD_Y
      SCALAR  DIP_GRD_Z
      SCALAR  DIP_MOM_X
      SCALAR  DIP_MOM_Y
      SCALAR  DIP_MOM_Z
      SCALAR  DIP_MOM_X_L
      SCALAR  DIP_MOM_Y_L
      SCALAR  DIP_MOM_Z_L
      SCALAR  DIP_MOM_X_R
      SCALAR  DIP_MOM_Y_R
      SCALAR  DIP_MOM_Z_R
      SCALAR  DIPXY
      SCALAR  DIPXZ
      SCALAR  DIPYZ
      SCALAR  POLXX
      SCALAR  POLYY
      SCALAR  POLZZ
      SCALAR  POLXY
      SCALAR  POLXZ
      SCALAR  POLYZ
      SCALAR  POLTOTXX
      SCALAR  POLTOTYY
      SCALAR  POLTOTZZ
      SCALAR  POLTOTXY
      SCALAR  POLTOTXZ
      SCALAR  POLTOTYZ
      SCALAR  SECONDMOM
      SCALAR  INVNORM  
      SCALAR  LRNORM  
      SCALAR  LNORM  
      SCALAR  IL1R1
      SCALAR  IL2R2
      SCALAR  IF1R1
      SCALAR  IRHBAR
      SCALAR  IG2R2
      SCALAR  el1r1
      SCALAR  el2r2
      SCALAR  RNORM  
      SCALAR  esum  
      SCALAR  znew
      SCALAR  zerr_jacob
      SCALAR  zmax_jacob
      SCALAR  zold
#
#
#  convergence correction
#
      index pp = bavirtorb, eavirtorb # norb
      index qq = bbvirtorb, ebvirtorb # norb
      index aa = bavirtorb, eavirtorb # norb
      index aa1= bavirtorb, eavirtorb # norb
      index bb = bbvirtorb, ebvirtorb # norb
      index bb1= bbvirtorb, ebvirtorb # norb
#
# Declare two-electron integral arrays
# ------------------------------------
#
      served VSpipi(p1,i,p,i1)
      served VSaaai(a2,a,a1,i)
#
      served VSqjqj(q1,j,q,j1)
      served Vjbbj(j,b1,b,j1)
      served Vbbjj(b,b1,j,j1)
#
      served Vjbii(j,b,i,i1)
      served Vbbii(b,b1,i,i1)
      served Vbbai(b,b1,a,i)
#
      served Vpiqj(p,i,q,j)
      served Vaajj(a,a1,j,j1)
      served Viabj(i,a,b,j)
      served Vaabj(a,a1,b,j)
#
      served NIAAI(i,a,a1,i1)
      served NJBAI(j,b,a,i)
      served NIABJ(i,a,b,j)
      served NJJAA(j1,j,a1,a)
      served NIIBB(i1,i,b1,b)
#
# Watson
#
      SCALAR  inext
      SCALAR  IDENS

      temp        t1ee (kroot,indone)
      temp        t2ee (kroot,indone)
      STATIC  DENSITY (mu,nu)
      static  STATIC_LEE (kroot,indone)
      static  S_ORDER    (kindex12,indone)
      DISTRIBUTED  LEE_resid (kroot,indone)
      TEMP  taiK (a,i,kindex12)
      TEMP  taiaiK (a,i,a1,i1,kindex12)
      TEMP  taibjK (a,i,b,j,kindex12)
#
# Watson
#
# Declare CCSD amplitude arrays
# -----------------------------
#
      local St1a(a,i) 
      local St1b(b,j) 
#
      distributed VSTART1A1(a,i)
      distributed VSTART1A2(a,i)
      distributed VSTART1A3(a,i)
      distributed VSTART1A4(a,i)
      distributed VSTART1A5(a,i)
      distributed VSTART1A6(a,i)
      distributed VSTART1A7(a,i)
      distributed VSTART1A8(a,i)
      distributed VSTART1A9(a,i)
      distributed VSTART1A10(a,i)
      distributed VSTART1A11(a,i)
      distributed VSTART1A12(a,i)
#
      distributed VSTART1B1(b,j)
      distributed VSTART1B2(b,j)
      distributed VSTART1B3(b,j)
      distributed VSTART1B4(b,j)
      distributed VSTART1B5(b,j)
      distributed VSTART1B6(b,j)
      distributed VSTART1B7(b,j)
      distributed VSTART1B8(b,j)
      distributed VSTART1B9(b,j)
      distributed VSTART1B10(b,j)
      distributed VSTART1B11(b,j)
      distributed VSTART1B12(b,j)
#
# Arrays for AO routine
#
      temp AOINT(mu,lambda,nu,sigma)
      local Lxxxj(mu,lambda,nu,j)
      local Lxxbj(mu,nu,b,j)
      local Lxabj(mu,a,b,j)
      local Laabj(a1,a,b,j)
      local Lxxxi(mu,lambda,nu,i)
      local Lxxai(mu,nu,a,i)
      local Lxbai(mu,b,a,i)
      local Lbbai(b1,b,a,i)
      local Lxaai(mu,a1,a,i)
      local Laaai(a2,a1,a,i)
      local Lxbbj(mu,b1,b,j)
      local Lbbbj(b2,b1,b,j)
      local Xbbbj(b,b2,b1,j) 
      temp tmxxxj(mu,lambda,nu,j)
      temp t1mxxxj(mu,lambda,nu,j)
      temp tmxxbj(mu,lambda,b,j)
      temp t1mxxbj(mu,lambda,b,j)
      temp tmxabj(mu,a,b,j)
      temp t1mxabj(mu,a,b,j)
      temp tmaabj(a1,a,b,j)
      temp t1maabj(a1,a,b,j)
#
      temp tmxbbj(mu,b1,b,j)
      temp t1mxbbj(mu,b1,b,j)
      temp tmbbbj(b2,b1,b,j)
      temp t1mbbbj(b2,b1,b,j)
#
      temp tmxaai(mu,a1,a,i)
      temp t1mxaai(mu,a1,a,i)
      temp tmaaai(a2,a1,a,i)
      temp t1maaai(a2,a1,a,i)
#
      temp tmxxxi(mu,lambda,nu,i)
      temp t1mxxxi(mu,lambda,nu,i)
      temp tmxxai(mu,lambda,a,i)
      temp t1mxxai(mu,lambda,a,i)
      temp tmxbai(mu,b,a,i)
      temp t1mxbai(mu,b,a,i)
      temp tmbbai(b1,b,a,i)
      temp t1mbbai(b1,b,a,i)
#
      served Mxxxj(mu,lambda,nu,j)
      served Mxxbj(mu,lambda,b,j)
      served Mxabj(mu,a,b,j)
      served Mxaai(mu,a1,a,i)
      served Mxbbj(mu,b1,b,j)
#
      served Mxxxi(mu,lambda,nu,i)
      served Mxxai(mu,lambda,a,i)
      served Mxbai(mu,b,a,i)
#
      temp t1xj(sigma,j)
      distributed Mxj(sigma,j)
      temp t1xi(sigma,i)
      distributed Mxi(sigma,i)
#
# Declare HBAR arrays. 
# -------------------- 
#
      distributed HBAR_aa(a,a1) 
      distributed HBAR_ii(i1,i) 
#
      local LHBAR_ii(i1,i) 
      local LHBAR_ia(i,a) 
      local LHBAR_jb(j,b) 
      local LHBAR_aa(a,a1) 
#
      served HBAR_iiii(i,i1,i2,i3) 
      served HBAR_iijj(i,i1,j,j1) 
#
      served HBAR_AIBC_aaaa(a,a1,i,a2)
      served HBAR_AIBC_aabb(a,a1,j,b2)
#
      served HBAR_JKIA_aaaa(i1,i,i2,a) 
      served HBAR_JKIA_aabb(i1,i,j2,b) 
#
      served HBAR_IAJK_aaaa(i,i1,a,i2) 
      served HBAR_IAJK_aabb(i,i1,b,j) 
#
      served HBAR_AJIB_aaaa(i1,a1,a,i) 
      served HBAR_AJIB_aabb(i,a,b,j) 
      served HBAR_AJIB_iibb(i1,i,b,b1) 
#
      served HBAR_ABCI_aaaa(a,a1,a2,i) 
      served HBAR_ABCI_aabb(a,a1,b,j) 
#
      served WHIAAI(i,a,a1,i1) 
      served WHJBBJ(j,b,b1,j1) 
      served WHIABJ(i,a,b1,j1) 
      served WHJBAI(j,b,a1,i1) 
      served WHIIBB(i,i1,b,b1) 
      served WHJJAA(j,j1,a,a1) 
#
      distributed D2aa(a,i,a1,i1) 
#
      served Vxxaa(mu,nu,a1,a) 
      served Vaaaa(a3,a2,a1,a) 
      temp Txxxp(mu,nu,lambda,p) 
      temp Txxpp(mu,nu,p1,p) 
      temp Txppp(mu,p2,p1,p) 
#
      temp Txxxq(mu,nu,lambda,q) 
      temp Txxqq(mu,nu,q1,q) 
      temp Txqqq(mu,q2,q1,q) 
#
      served Gxxbb(mu,nu,b1,b) 
      served Vaabb(a3,a2,b1,b) 
      temp Txpqq(mu,p2,q1,q) 
      temp tba(b,a)     
      temp tab(a,b)     
#
# Declare temporary arrays
# ------------------------
#
      temp T2jbai(j,b,a,i)
      temp T3iaai(i,a,a1,i1)
      temp T4iaai(i,a,a1,i1)
      temp T3jbbj(j,b,b1,j1)
      temp T4jbbj(j,b,b1,j1)
      temp t1pppp(p,p1,p2,p3) 
      temp t2pppp(p,p1,p2,p3) 
      temp t3pppp(p,p1,p2,p3) 
      temp t4pppp(p,p1,p2,p3) 
      temp tSpppp(p,p1,p2,p3) 
      temp tqqqq(q,q1,q2,q3) 
      temp t1qqqq(q,q1,q2,q3) 
      temp t2qqqq(q,q1,q2,q3) 
      temp t3qqqq(q,q1,q2,q3) 
      temp t4qqqq(q,q1,q2,q3) 
      temp tSqqqq(q,q1,q2,q3) 
      temp tppqq(p,p1,q,q1) 
      temp tqpqp(q,p,q1,p1)
      temp t0pqqp(p,q1,q,p2) 
      temp t1ppqq(p,p1,q,q1) 
      temp t2ppqq(p,p1,q,q1) 
      temp t3ppqq(p,p1,q,q1) 
      temp tqqpq(q,q1,p,q2) 
      temp tqppq(q,p,p1,q1) 
      temp tqqpp(q,q1,p,p1) 
      temp t1qqpp(q,q1,p,p1) 
      temp t2qqpp(q,q1,p,p1) 
      temp t3qqpp(q,q1,p,p1) 
#
      temp Tiaai(i,a,a1,i1) 
      temp T1iaai(i,a,a1,i1) 
      temp T2iaai(i,a,a1,i1) 
      temp Tiiai(i,i1,a,i2) 
      temp Tiaii(i,a,i1,i2) 
      temp Tiiia(i,i1,i2,a) 
      temp Taiii(a,i,i1,i2) 
      temp T1iiai(i,i1,a,i2) 
      temp T2iiai(i,i1,a,i2) 
      temp TSiiai(i,i1,a,i2) 
      temp Tjbbj(j,b,b1,j1) 
      temp T1jbbj(j,b,b1,j1) 
      temp T2jbbj(j,b,b1,j1) 
      temp Tjjbj(j,j1,b,j2) 
      temp T1jjbj(j,j1,b,j2) 
      temp T2jjbj(j,j1,b,j2) 
      temp TSjjbj(j,j1,b,j2) 
      temp Tiibb(i,i1,b,b1) 
      temp T2iibb(i,i1,b,b1) 
      temp T1iibb(i,i1,b,b1) 
      temp Tjjaa(j,j1,a,a1) 
      temp T2jjaa(j,j1,a,a1) 
      temp T1jjaa(j,j1,a,a1) 
      temp Tiabj(i,a,b,j) 
      temp T2iabj(i,a,b,j) 
      temp T1iabj(i,a,b,j) 
      temp Tjbai(j,b,a,i) 
      temp T1jbai(j,b,a,i) 
      temp Tiibj(i,i1,b,j) 
      temp T1iibj(i,i1,b,j) 
      temp Tjjai(j,j1,a,i) 
      temp T1jjai(j,j1,a,i) 
      temp T1aiai(a1,i2,a2,i1)  
      temp T2aiai(a1,i2,a2,i1)  
      temp T1bjbj(b2,j,b,j2) 
      temp T2bjbj(b2,j,b,j2) 
      temp T1aibj(a1,i,b,j1)  
      temp taabb(a,a1,b,b1)
      temp taaaa(a,a1,a2,a3)
      temp tbbbb(b,b1,b2,b3)
#
      temp tpp(p,p1) 
      temp t1pp(p,p1) 
      temp t2pp(p,p1) 
      temp t3pp(p,p1) 
      temp t1ai(a,i) 
      temp tqq(q,q1) 
      temp t1qq(q,q1) 
      temp t2qq(q,q1) 
      temp t1bj(b,j) 
#
# Declare integral arrays
# ------------------------
#
# Define scalars
# --------------
#
      scalar icopy
      scalar e1
      scalar e2
      scalar e3
      scalar rank  
      scalar etot 
      scalar etot1
      scalar etot2
      scalar etot3
      scalar etot4
      scalar etot5
      scalar etot6
      scalar etot7
      scalar etot8
      scalar etot9
      scalar etot10 
      scalar etot11
      scalar etot12
#
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#
# Declare arrays
#
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#
#    served arrays used in EOM
#
      served VCONV2AA(a,i,a1,i1)
      served VCONV2AB(a,i,b,j)
#
      served VCE2AA(a,i,a1,i1)
      served VCE2AB(a,i,b,j)
#
      served VCACT2AA(a,i,a1,i1)
      served VCACT2AB(a,i,b,j)
      served VCHACT2AA(a,i,a1,i1)
      served VCHACT2AB(a,i,b,j)
#
# VFL arrays to use simple indeces 
      served VC2AA(a,i,a1,i1,k21) 
      served VCH2AA(a,i,a1,i1,k20) 
      served VTEMP2AA(a,i,a1,i1,k20) 
      served VC2AB(a,i,b1,j1,k21) 
      served VCH2AB(a,i,b,j,k20) 
      served VTEMP2AB(a,i,b,j,k20) 
      served VTEMP2AA1(a,i,a1,i1) 
      served VTEMP2AB1(a,i,b1,j1) 

      distributed VC1A(a,i,k21)  
      distributed VCH1A(a,i,k20) 
      distributed VTEMP1A(a,i,k20) 

      distributed ax_20(j20,k20)   
      distributed ax_21(j21,k21)   
      distributed ax(j20,k20)   
      local Lax(j20,k20)   
      static MYvev(kindex20,jindex20)
      static Aeig(kindex20,jindex20)
      temp t1(k21,k21)   
      temp t20(k20,j20)   
      distributed orth(j21,k21) 
      local Lorth(j21,k21) 
      temp taiaiS(a,i,a1,i1,k21)   
      temp t2aiaiS(a,i,a1,i1,k20)   
      temp t3aiaiS(a,i,a1,i1,k20)   
      temp tbjbjS(b,j,b1,j1,k21)        
      temp t2bjbjS(b,j,b1,j1,k20)
      temp t3bjbjS(b,j,b1,j1,k20)
      temp taibjS(a,i,b,j,k21)   
      temp t2aibjS(a,i,b,j,k20)   
      temp t3aibjS(a,i,b,j,k20)   

      temp taiS(a,i,k21) 
      temp t2aiS(a,i,k20) 
      temp t3aiS(a,i,k20) 

      temp tbjS(b,j,k21) 
      temp t2bjS(b,j,k20) 
      temp t3bjS(b,j,k20) 

      temp atemp2(jindex2,kindex2) 
      temp atemp3(jindex3,kindex3) 
      temp atemp4(jindex4,kindex4) 
      temp atemp5(jindex5,kindex5) 
      temp atemp6(jindex6,kindex6) 
      temp atemp7(jindex7,kindex7) 
      temp atemp8(jindex8,kindex8) 
      temp atemp9(jindex9,kindex9) 
      temp atemp10(jindex10,kindex10) 
      temp atemp11(jindex11,kindex11) 
      temp atemp12(jindex12,kindex12) 
      temp atemp13(jindex13,kindex13) 
      temp atemp14(jindex14,kindex14) 
      temp atemp15(jindex15,kindex15) 
      temp atemp16(jindex16,kindex16) 
      temp atemp17(jindex17,kindex17) 
      temp atemp18(jindex18,kindex18) 
      temp atemp19(jindex19,kindex19) 
      temp atemp20(jindex20,kindex20) 

      temp tbjai(b,j,a1,i1) 
      temp eroot(kindex12,kindex12) 

      scalar kcount 
      scalar fact 
      scalar lfact 
      scalar esum1
#
# END VFL arrays to use simple indeces 
#
      served Njjai(j1,a,i,j)
      served Niibj(i1,b,i,j) 
      served Niiai(i1,a,i,i2) 
      distributed Niijj(i,i1,j,j1)
      distributed Niiii(i,i1,i2,i3)
#
#   convergence correction
     temp psa(aa,a1)
     temp psb(bb,b1) 
# 
      distributed Faa(a,a1)
      distributed Fab(a,b)
#
      distributed FSaa(aa,aa1)
      distributed FSab(aa,bb)
      distributed FSbb(bb,bb1)
#
      local LSaa(aa,aa1)
      local LSab(aa,bb1)
      local LSbb(bb,bb1)
#
      local Sxxa(mu,nu,aa)
      local Sxxb(mu,nu,bb)
#
      distributed IIi(pp,a1)
      distributed IJj(qq,b1)
#
      distributed T1Sxxa(mu,nu,aa)
      distributed T3Sxxa(mu,nu,aa)
      distributed T3ASxxa(mu,nu,aa)
      distributed T1Sxxb(mu,nu,bb)
      distributed T3Sxxb(mu,nu,bb)
      distributed T3ASxxb(mu,nu,bb)
#
      temp txxxx(mu,nu,lambda,sigma) 
      temp t1xxxx(mu,nu,lambda,sigma) 
#
      temp typp(a1,a2)
      temp t1ypp(a1,a2)
      temp t2ypp(a1,a2)
      temp tyqq(b1,b2)
      temp t1yqq(b1,b2)
      temp t2yqq(b1,b2)
#
      temp PIi(pp,a1)
      temp PJj(qq,b1)
#
      temp txpp(mu,pp)
      temp t1xpp(mu,pp)
      temp txqq(mu,qq)
      temp t1xqq(mu,qq)
      temp txxa(mu,nu,aa)
      temp txxb(mu,nu,bb)
#
      temp t1xx(lambda,sigma)
      temp tyaaaa(aa,aa1)
      temp tybbbb(bb,bb1)
      temp tyaabb(aa,bb1)
#
      temp tsp(aa,a1)
      temp tpq(a,b1)
      temp tspq(aa,b1)
      temp t1pq(a,b1)
      temp tsq(bb,b1)
#
      temp tij(i,j)
#
# VFL arrays 
# ---------- 
#
      served VFLAB(a1,b,i,j)  
      served VFLAA(a2,a1,i,i2) 
      served VFLBB(b2,b1,j,j2) 
      temp T1qppq(q1,p1,p,q)    
      temp tpqpq(p,q,p1,q1)  
      temp T1pqpq(p,q,p1,q1)  
#
     #static Sii(i,i1)
     #static Sdii(i,i1)
     #static Saa(a,a1)
     #static Sdaa(a,a1)
     #static Sia(i,a)
     #static Sdia(i,a)
     #static Sjj(j,j1)
     #static Sdjj(j,j1)
     #static Sbb(b,b1)
     #static Sdbb(b,b1)
      static Smat(kindex,jindex)
      static SVEV(kindex,jindex)
      static Smat2(kindex2,jindex2)
      static SVEV2(kindex2,jindex2)
      static Smat3(kindex3,jindex3)
      static SVEV3(kindex3,jindex3)
      static Smat4(kindex4,jindex4)
      static SVEV4(kindex4,jindex4)
      static Smat5(kindex5,jindex5)
      static SVEV5(kindex5,jindex5)
      static Smat6(kindex6,jindex6)
      static SVEV6(kindex6,jindex6)
      static Smat7(kindex7,jindex7)
      static SVEV7(kindex7,jindex7)
#======================================================
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#--start of script generated part of the code
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#======================================================
      static Smat8(kindex8,jindex8)
      static SVEV8(kindex8,jindex8)
      static Smat9(kindex9,jindex9)
      static SVEV9(kindex9,jindex9)
      static Smat10(kindex10,jindex10)
      static SVEV10(kindex10,jindex10)
      static Smat11(kindex11,jindex11)
      static SVEV11(kindex11,jindex11)
      static Smat12(kindex12,jindex12)
      static SVEV12(kindex12,jindex12)
      static Smat13(kindex13,jindex13)
      static SVEV13(kindex13,jindex13)
      static Smat14(kindex14,jindex14)
      static SVEV14(kindex14,jindex14)
      static Smat15(kindex15,jindex15)
      static SVEV15(kindex15,jindex15)
      static Smat16(kindex16,jindex16)
      static SVEV16(kindex16,jindex16)
      static Smat17(kindex17,jindex17)
      static SVEV17(kindex17,jindex17)
      static Smat18(kindex18,jindex18)
      static SVEV18(kindex18,jindex18)
      static Smat19(kindex19,jindex19)
      static SVEV19(kindex19,jindex19)
      static Smat20(kindex20,jindex20)
      static SVEV20(kindex20,jindex20)
#======================================================
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#--end of script generated part of the code
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#======================================================
#
      temp Tvev2(kindex2,jindex2)
      temp Tvev3(kindex3,jindex3)
      temp Tvev4(kindex4,jindex4)
      temp Tvev5(kindex5,jindex5)
      temp Tvev6(kindex6,jindex6)
      temp Tvev7(kindex7,jindex7)
      temp Tvev8(kindex8,jindex8)
      temp Tvev9(kindex9,jindex9)
      temp Tvev10(kindex10,jindex10)
      temp Tvev11(kindex11,jindex11)
      temp Tvev12(kindex12,jindex12)
      temp Tvev13(kindex13,jindex13)
      temp Tvev14(kindex14,jindex14)
      temp Tvev15(kindex15,jindex15)
      temp Tvev16(kindex16,jindex16)
      temp Tvev17(kindex17,jindex17)
      temp Tvev18(kindex18,jindex18)
      temp Tvev19(kindex19,jindex19)
      temp Tvev20(kindex20,jindex20)
      temp tcoef2(kindex2,jindex2)
      temp tcoef3(kindex3,jindex3)
      temp tcoef4(kindex4,jindex4)
      temp tcoef5(kindex5,jindex5)
      temp tcoef6(kindex6,jindex6)
      temp tcoef7(kindex7,jindex7)
      temp tcoef8(kindex8,jindex8)
      temp tcoef9(kindex9,jindex9)
      temp tcoef10(kindex10,jindex10)
      temp tcoef11(kindex11,jindex11)
      temp tcoef12(kindex12,jindex12)
      temp tcoef13(kindex13,jindex13)
      temp tcoef14(kindex14,jindex14)
      temp tcoef15(kindex15,jindex15)
      temp tcoef16(kindex16,jindex16)
      temp tcoef17(kindex17,jindex17)
      temp tcoef18(kindex18,jindex18)
      temp tcoef19(kindex19,jindex19)
      temp tcoef20(kindex20,jindex20)
#
#
# Arrays needed for AOLADDER contribution
# ---------------------------------------
#
     local LLaa(a,i,nu,i1) 
     local LLbb(b,j,nu,j1) 
     local LLab(a,i,nu,j) 
     temp Txixj(lambda,i,sigma,j)
     temp Txjxj(lambda,j,sigma,j1)
     temp Txixi(lambda,i,sigma,i1)
     temp Txiai(lambda,i,a1,i1)
     temp Txjbj(lambda,j,b1,j1)
     temp Txibj(lambda,i,b,j)
#
     temp Zaa(lambda,i,a1,i1)
     temp Zbb(lambda,j,b,j1)
     temp Zab(lambda,i,b,j)
     temp ZZaa(lambda,i,sigma,i1)
     temp ZZ1aa(lambda,i,sigma,i1)
     temp ZZbb(lambda,j,sigma,j1)
     temp ZZ1bb(lambda,j,sigma,j1)
     temp ZZab(lambda,i,sigma,j)
#
     temp Yaa(lambda,i,mu,i1)
     temp Ybb(lambda,j,mu,j1)
     temp Yab(lambda,i,mu,j)
     temp Y1aa(lambda,i,mu,i1)
     temp Y1bb(lambda,j,mu,j1)
     temp Y1ab(lambda,i,mu,j)
#
     temp Taixi(a,i,nu,i1)
     temp Tbjxj(b,j,nu,j1)
     temp Taixj(a,i,nu,j)
#
     served TAO_aa(lambda,i,sigma,i1)
     served TAO_bb(lambda,j,sigma,j1)
     served TAO_ab(lambda,i,sigma,j)
     served T1AO_aa(lambda,i,a,i1)
     served T1AO_bb(lambda,j,b,j1)
     served T1AO_ab(lambda,i,b,j)
     served T2AO_aa(lambda,i,sigma,i1)
     served T2AO_bb(lambda,j,sigma,j1)
     served T2AO_ab(lambda,i,sigma,j)
#
      temp  T3aiai(a,i,a1,i1)
      temp  T4aiai(a,i,a1,i1)
      temp  T3bjbj(b,j,b1,j1)
      temp  T4bjbj(b,j,b1,j1)
      temp  TSaiai(a,i,a1,i1)
      temp  TSiaai(i,a,a1,i1)
      temp  TS2iaai(i,a,a1,i1)
      temp  TSbjbj(b,j,b1,j1)
      temp  Taaii(a,a2,i,i2)
      temp  T1aaii(a,a2,i,i2)
      temp  Tbbjj(b,b1,j,j1)
      temp  T2bbjj(b,b1,j,j1)
      temp  T2aibj(a,i,b,j)
      temp  T3aibj(a,i,b,j)
      temp  T4aibj(a,i,b,j)
      temp  T1jj(j,j1)
      temp  Tdaa(a,a1)
      temp  Tiijj(i,i1,j,j1)
      temp  T1iijj(i,i1,j,j1)
      temp  Tiiii(i,i1,i2,i3)
      temp  T1iiii(i,i1,i2,i3)
      temp  Tjjjj(j,j1,j2,j3)
      temp  T1jjjj(j,j1,j2,j3)
      temp  Taajj(a,a1,j,j1)
      temp  T1aajj(a,a1,j,j1)
      temp  Tbbii(b,b1,i,i1)
      temp  T1bbii(b,b1,i,i1)
      temp  R1aiai(a1,i1,a,i)
      temp  R2aiai(a1,i,a,i1)
      temp  R3aiai(a,i1,a1,i)
      temp  R4aiai(a,i1,a1,i)
      temp  R1bjbj(b1,j1,b,j)
      temp  R2bjbj(b1,j,b,j1)
      temp  R3bjbj(b,j1,b1,j)
      temp  R4bjbj(b,j1,b1,j)
      temp  t11ai(a,i)
      temp  t11aa(a,a1)
      temp  t1bb(b,b1)
      temp  t11bb(b,b1)
      temp  t111bb(b,b1)
      temp  t2ia(i,a)
      temp  t2jb(j,b)
      temp  t1ia(i,a)
      temp  t2ai(a,i)
      temp  t3ai(a,i)
      temp  t1jb(j,b)
      temp  t2bj(b,j)
      temp  t3bj(b,j)
      temp  t11bj(b,j)
      temp  Taaai(a,a2,a1,i)
#
      local Lajib (a,j,i,b)
      local Laaia (a,a1,i,a2)
      local L1aaia (a,a1,i,a2)
      local Laajb (a,a1,j,b)
      local L1aajb (a,a1,j,b)
      local l2aiai(a,i2,a1,i3) # Watson
      local l1aabj(a,a1,b,j)
      local l1aiai(a,i2,a1,i1)
      local l2aibj(a,i1,b,j)
      local laibb (a,i,b,b1)
      local l1aaai(a,a2,a1,i1)


      local L1xixi(mu,i,nu,i1)
      local L1xjxj(mu,j,nu,j1)
      local L1xixj(mu,i,nu,j)
      local Lxibj(lambda,i,b,j)
      local Lxjbj(lambda,j,b1,j1)
      local LLaiai(a,i,a1,i1)
      local Liaii (i,a,i1,i2)
      local LLbjbj(b,j,b1,j1)
      local LLaibj(a,i,b,j)
      local Lxiai(lambda,i,a1,i1)
#
      local Ljbbj(j2,b2,b1,j1)
      local Liaai3(i1,a1,a,i)
      local Liiai(i2,i,a,i1)
      local L1iiai(i2,i,a,i1)
      local L2iiai(i,i2,a,i1)
      local L1aibj(a,i,b1,j)
      local Ljjai(a,i,j,j1)
      local Lbjjj(b1,j2,j,j1)
      local Ljjbj(j2,j,b,j1)
      local L2jjbj(j,j2,b,j1)
      local Laijj(a,i,j1,j)
      local Liibj(i1,i,b,j)
      local L2iibj(i1,i,b,j)
      local L1iibj(i,i1,b,j)
      local Laiii(a1,i2,i,i1)
      local L2bjbj(b,j,b2,j1)
      local L3bjbj(b,j,b2,j2)
      local VAL(jindex,kindex)
      temp VAL1(jindex,kindex)
      local l2ai(a,i)
#
#     eom local arrays
#
      local acoef(spdim,spdim)
      local Lmat(kindex,jindex)
      local LVEV(kindex,jindex)
      local acoef2(kindex2,jindex2)
      local Lmat2(kindex2,jindex2)
      local LVEV2(kindex2,jindex2)
      local acoef3(kindex3,jindex3)
      local Lmat3(kindex3,jindex3)
      local LVEV3(kindex3,jindex3)
      local acoef4(kindex4,jindex4)
      local Lmat4(kindex4,jindex4)
      local LVEV4(kindex4,jindex4)
      local acoef5(kindex5,jindex5)
      local Lmat5(kindex5,jindex5)
      local LVEV5(kindex5,jindex5)
      local acoef6(kindex6,jindex6)
      local Lmat6(kindex6,jindex6)
      local LVEV6(kindex6,jindex6)
      local acoef7(kindex7,jindex7)
      local Lmat7(kindex7,jindex7)
      local LVEV7(kindex7,jindex7)
      local acoef8(kindex8,jindex8)
      local Lmat8(kindex8,jindex8)
      local LVEV8(kindex8,jindex8)
      local acoef9(kindex9,jindex9)
      local Lmat9(kindex9,jindex9)
      local LVEV9(kindex9,jindex9)
#======================================================
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#--start of script generated part of the code
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#======================================================
      local Lmat10(kindex10,jindex10)
      local LVEV10(kindex10,jindex10)
      local acoef10(kindex10,jindex10)
      local Lmat11(kindex11,jindex11)
      local LVEV11(kindex11,jindex11)
      local acoef11(kindex11,jindex11)
      local Lmat12(kindex12,jindex12)
      local LVEV12(kindex12,jindex12)
      local acoef12(kindex12,jindex12)
      local Lmat13(kindex13,jindex13)
      local LVEV13(kindex13,jindex13)
      local acoef13(kindex13,jindex13)
      local Lmat14(kindex14,jindex14)
      local LVEV14(kindex14,jindex14)
      local acoef14(kindex14,jindex14)
      local Lmat15(kindex15,jindex15)
      local LVEV15(kindex15,jindex15)
      local acoef15(kindex15,jindex15)
      local Lmat16(kindex16,jindex16)
      local LVEV16(kindex16,jindex16)
      local acoef16(kindex16,jindex16)
      local Lmat17(kindex17,jindex17)
      local LVEV17(kindex17,jindex17)
      local acoef17(kindex17,jindex17)
      local Lmat18(kindex18,jindex18)
      local LVEV18(kindex18,jindex18)
      local acoef18(kindex18,jindex18)
      local Lmat19(kindex19,jindex19)
      local LVEV19(kindex19,jindex19)
      local acoef19(kindex19,jindex19)
      local Lmat20(kindex20,jindex20)
      local LVEV20(kindex20,jindex20)
      local acoef20(kindex20,jindex20)
#======================================================
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#--end of script generated part of the code
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#======================================================
      local Rai(a,i)
      local Rbj(b,j)
      local Raiai(a,i,a1,i1)
      local Rbjbj(b,j,b1,j1)
      local Raibj(a,i,b,j)
#
      distributed DDaa(a,a1)
      distributed DDii(i,i1)
      distributed DDia(i,a)
      distributed DDjj(j,j1)
      distributed DDjb(j,b)
      distributed VCONV1A(a,i)
      distributed Fae_a(a,a1)
      distributed Fmi_a(i1,i)
      distributed Fmi_b(j1,j)
     #distributed Fia_a(i,a)
     #distributed Fia_b(j,b)
      distributed Wmnijab(i,i1,j,j1)
      distributed Wmnijaa(i,i1,i2,i3)
      distributed Wmnijbb(j,j1,j2,j3)

      local LFmi_a(i1,i)
      local LFmi_b(j1,j)
      local LFae_a(a,a1)
#
#     distributed arrays used in EOM
#
      distributed VCE1A(a,i)
#
      distributed VCACT1A(a,i)
#
      distributed VCHACT1A(a,i)
      distributed DIAG_ai (a,i) # Watson, remove
      served      DIAG_aibj (a,i,a1,i1) # Watson, remove
      served      TEMP_aibj (a,i,a1,i1) # Watson, remove
#
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#
# Declare scalars
#
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      scalar maxcycle
      scalar imaxc
      scalar ncount
      scalar aeigtemp
      scalar aeigtemp2
      scalar rootmax
      scalar evfev
      scalar eomthresh
      scalar sqr
      scalar sqr2
      scalar egvmax
      scalar lcount
      scalar icount
      scalar xcount
      scalar imax
      scalar emax
      scalar energaa
      scalar energbb
      scalar energab
      scalar esuma
      scalar esumb
      scalar esumab
      scalar ecorraa
      scalar ecorrbb
      scalar ecorrab
      scalar ecorrT
      scalar eold
      scalar etemp0
      scalar eetemp
      scalar ediff
      scalar zdiff
      scalar xcor
      scalar xcor0
      scalar xcor1
      scalar xcor2
      scalar xcor3
      scalar count_iter
#
#     eom scalars
#
      scalar ispdim
      scalar omega_old
      scalar omega_new
      scalar omegam
      scalar residuum
      scalar square
      scalar squarert
      scalar mult
      scalar exponent
#
      scalar nsp
      scalar proot
      scalar xroot
#
      scalar Aeig1
      scalar Aeig2
      scalar Aeig3
      scalar Aeig4
      scalar Aeig5
      scalar Aeig6
      scalar Aeig7
      scalar Aeig8
      scalar Aeig9
#
      scalar Aeigv1
      scalar Aeigv2
      scalar Aeigv3
      scalar Aeigv4
      scalar Aeigv5
      scalar Aeigv6
      scalar Aeigv7
      scalar Aeigv8
      scalar Aeigv9
#
      scalar Aeigvm1
      scalar Aeigvm2
      scalar Aeigvm3
      scalar Aeigvm4
      scalar Aeigvm5
      scalar Aeigvm6
      scalar Aeigvm7
      scalar Aeigvm8
      scalar Aeigvm9
#
      scalar xmax
#
      scalar xtemp
      scalar xtemp1
#
#======================================================
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#--start of script generated part of the code
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#======================================================
      scalar etemp2_1
      scalar etemp2_2
      scalar etemp2_3
      scalar etemp2_4
      scalar etemp2_5
      scalar etemp2_6
      scalar etemp2_7
      scalar etemp2_8
      scalar etemp2_9
      scalar etemp2_10
      scalar etemp2_11
      scalar etemp2_12
      scalar etemp2_13
      scalar etemp2_14
      scalar etemp2_15
      scalar etemp2_16
      scalar etemp2_17
      scalar etemp2_18
      scalar etemp2_19
      scalar etemp2_20
#
      scalar Vtemp_1
      scalar Vtemp_2
      scalar Vtemp_3
      scalar Vtemp_4
      scalar Vtemp_5
      scalar Vtemp_6
      scalar Vtemp_7
      scalar Vtemp_8
      scalar Vtemp_9
      scalar Vtemp_10
      scalar Vtemp_11
      scalar Vtemp_12
      scalar Vtemp_13
      scalar Vtemp_14
      scalar Vtemp_15
      scalar Vtemp_16
      scalar Vtemp_17
      scalar Vtemp_18
      scalar Vtemp_19
      scalar Vtemp_20
#
      scalar V1_1
      scalar V1_2
      scalar V1_3
      scalar V1_4
      scalar V1_5
      scalar V1_6
      scalar V1_7
      scalar V1_8
      scalar V1_9
      scalar V1_10
      scalar V1_11
      scalar V1_12
      scalar V1_13
      scalar V1_14
      scalar V1_15
      scalar V1_16
      scalar V1_17
      scalar V1_18
      scalar V1_19
      scalar V1_20
      scalar V2_1
      scalar V2_2
      scalar V2_3
      scalar V2_4
      scalar V2_5
      scalar V2_6
      scalar V2_7
      scalar V2_8
      scalar V2_9
      scalar V2_10
      scalar V2_11
      scalar V2_12
      scalar V2_13
      scalar V2_14
      scalar V2_15
      scalar V2_16
      scalar V2_17
      scalar V2_18
      scalar V2_19
      scalar V2_20
      scalar V3_1
      scalar V3_2
      scalar V3_3
      scalar V3_4
      scalar V3_5
      scalar V3_6
      scalar V3_7
      scalar V3_8
      scalar V3_9
      scalar V3_10
      scalar V3_11
      scalar V3_12
      scalar V3_13
      scalar V3_14
      scalar V3_15
      scalar V3_16
      scalar V3_17
      scalar V3_18
      scalar V3_19
      scalar V3_20
      scalar V4_1
      scalar V4_2
      scalar V4_3
      scalar V4_4
      scalar V4_5
      scalar V4_6
      scalar V4_7
      scalar V4_8
      scalar V4_9
      scalar V4_10
      scalar V4_11
      scalar V4_12
      scalar V4_13
      scalar V4_14
      scalar V4_15
      scalar V4_16
      scalar V4_17
      scalar V4_18
      scalar V4_19
      scalar V4_20
      scalar V5_1
      scalar V5_2
      scalar V5_3
      scalar V5_4
      scalar V5_5
      scalar V5_6
      scalar V5_7
      scalar V5_8
      scalar V5_9
      scalar V5_10
      scalar V5_11
      scalar V5_12
      scalar V5_13
      scalar V5_14
      scalar V5_15
      scalar V5_16
      scalar V5_17
      scalar V5_18
      scalar V5_19
      scalar V5_20
      scalar V6_1
      scalar V6_2
      scalar V6_3
      scalar V6_4
      scalar V6_5
      scalar V6_6
      scalar V6_7
      scalar V6_8
      scalar V6_9
      scalar V6_10
      scalar V6_11
      scalar V6_12
      scalar V6_13
      scalar V6_14
      scalar V6_15
      scalar V6_16
      scalar V6_17
      scalar V6_18
      scalar V6_19
      scalar V6_20
      scalar V7_1
      scalar V7_2
      scalar V7_3
      scalar V7_4
      scalar V7_5
      scalar V7_6
      scalar V7_7
      scalar V7_8
      scalar V7_9
      scalar V7_10
      scalar V7_11
      scalar V7_12
      scalar V7_13
      scalar V7_14
      scalar V7_15
      scalar V7_16
      scalar V7_17
      scalar V7_18
      scalar V7_19
      scalar V7_20
      scalar V8_1
      scalar V8_2
      scalar V8_3
      scalar V8_4
      scalar V8_5
      scalar V8_6
      scalar V8_7
      scalar V8_8
      scalar V8_9
      scalar V8_10
      scalar V8_11
      scalar V8_12
      scalar V8_13
      scalar V8_14
      scalar V8_15
      scalar V8_16
      scalar V8_17
      scalar V8_18
      scalar V8_19
      scalar V8_20
      scalar V9_1
      scalar V9_2
      scalar V9_3
      scalar V9_4
      scalar V9_5
      scalar V9_6
      scalar V9_7
      scalar V9_8
      scalar V9_9
      scalar V9_10
      scalar V9_11
      scalar V9_12
      scalar V9_13
      scalar V9_14
      scalar V9_15
      scalar V9_16
      scalar V9_17
      scalar V9_18
      scalar V9_19
      scalar V9_20
      scalar V10_1
      scalar V10_2
      scalar V10_3
      scalar V10_4
      scalar V10_5
      scalar V10_6
      scalar V10_7
      scalar V10_8
      scalar V10_9
      scalar V10_10
      scalar V10_11
      scalar V10_12
      scalar V10_13
      scalar V10_14
      scalar V10_15
      scalar V10_16
      scalar V10_17
      scalar V10_18
      scalar V10_19
      scalar V10_20
      scalar V11_1
      scalar V11_2
      scalar V11_3
      scalar V11_4
      scalar V11_5
      scalar V11_6
      scalar V11_7
      scalar V11_8
      scalar V11_9
      scalar V11_10
      scalar V11_11
      scalar V11_12
      scalar V11_13
      scalar V11_14
      scalar V11_15
      scalar V11_16
      scalar V11_17
      scalar V11_18
      scalar V11_19
      scalar V11_20
      scalar V12_1
      scalar V12_2
      scalar V12_3
      scalar V12_4
      scalar V12_5
      scalar V12_6
      scalar V12_7
      scalar V12_8
      scalar V12_9
      scalar V12_10
      scalar V12_11
      scalar V12_12
      scalar V12_13
      scalar V12_14
      scalar V12_15
      scalar V12_16
      scalar V12_17
      scalar V12_18
      scalar V12_19
      scalar V12_20
#
      scalar root1
      scalar root2
      scalar root3
      scalar root4
      scalar root5
      scalar root6
      scalar root7
      scalar root8
      scalar root9
      scalar root10
      scalar root11
      scalar root12
#
      scalar Aeig10
      scalar Aeigv10
      scalar Aeigvm10
      scalar Aeig11
      scalar Aeigv11
      scalar Aeigvm11
      scalar Aeig12
      scalar Aeigv12
      scalar Aeigvm12
      scalar Aeig13
      scalar Aeigv13
      scalar Aeigvm13
      scalar Aeig14
      scalar Aeigv14
      scalar Aeigvm14
      scalar Aeig15
      scalar Aeigv15
      scalar Aeigvm15
      scalar Aeig16
      scalar Aeigv16
      scalar Aeigvm16
      scalar Aeig17
      scalar Aeigv17
      scalar Aeigvm17
      scalar Aeig18
      scalar Aeigv18
      scalar Aeigvm18
      scalar Aeig19
      scalar Aeigv19
      scalar Aeigvm19
      scalar Aeig20
      scalar Aeigv20
      scalar Aeigvm20
# 
# Declare served arrays 
# ---------------------
#
      served Vxxxi(mu,nu,lambda,i)
      served Vxixi(mu,i1,lambda,i)
      served Vxxii(mu,nu,i1,i)
      served Vixxi(i1,nu,lambda,i)
      served Vxipi(mu,i,p,i1)
      served Vixai(i,mu,a,i1)
      served Vxaii(mu,a,i,i1)
      served Vxaai(mu,a1,a,i)
      served Vxxai(mu,nu,a,i)
#
      served Vxxxj(mu,nu,lambda,j)
      served Vxjxj(mu,j1,lambda,j)
      served Vxxjj(mu,nu,j1,j)
      served Vjxxj(j1,nu,lambda,j)
      served Vxjqj(mu,j,q,j1)
      served Vjxbj(j,mu,b,j1)
      served Vxbjj(mu,b,j,j1)
      served Vxbbj(mu,b1,b,j)
      served Vxxbj(mu,nu,b,j) 
#
      served Vxbii(mu,b,i,i1)
      served Vxbai(mu,b,a,i)
#
      served Vxixj(mu,i,nu,j)
      served Vxiqj(mu,i,q,j)
      served Vxajj(mu,a,j,j1)
      served Vxabj(mu,a,b,j)
      served Vxxij(mu,nu,i,j)
      served Vixxj(i,mu,nu,j)
      served Vixbj(i,mu,b,j)
#
# Declare temporary arrays 
# ------------------------ 
#
      temp T1xjxj(mu,j1,lambda,j)
      temp Txxjj(mu,nu,j1,j)
      temp T1xxjj(mu,nu,j1,j)
      temp Tjjxx(j1,nu,lambda,j)
      temp Tjxxj(j1,nu,lambda,j)
      temp T1jxxj(j1,nu,lambda,j)
      temp Txjqj(mu,j,q,j1)
      temp T1xjqj(mu,j,q,j1)
      temp Tqjqj(q1,j,q,j1)
      temp T1qjqj(q1,j,q,j1)
      temp Tjxbj(j,mu,b,j1)
      temp T1jxbj(j,mu,b,j1)
      temp Txbjj(mu,b,j,j1)
      temp T1xbjj(mu,b,j,j1)
      temp T1bbjj(b,b1,j,j1)
      temp Txbbj(mu,b1,b,j)
      temp T1xbbj(mu,b1,b,j)
      temp Tbbbj(b2,b,b1,j)
      temp T1bbbj(b2,b,b1,j)
      temp Txxbj(mu,nu,b,j)
#
      temp T1xixj(mu,i,nu,j)
      temp Txiqj(mu,i,q,j)
      temp T1xiqj(mu,i,q,j)
      temp Tpiqj(p,i,q,j)
      temp T1piqj(p,i,q,j)
      temp Tiixx(i,i1,mu,nu)
      temp Tiixb(i,i1,mu,b)
      temp Txajj(mu,a,j,j1)
      temp T1xajj(mu,a,j,j1)
      temp Txabj(mu,a,b,j)
      temp T1xabj(mu,a,b,j)
      temp Tixxj(i,mu,nu,j)
      temp Tixbj(i,mu,b,j)
      temp T1ixbj(i,mu,b,j)
      temp Taabj(a,a1,b,j)
      temp T1aabj(a,a1,b,j)
#
      temp Txbii(mu,b,i,i1)
      temp T1xbii(mu,b,i,i1)
      temp Tjbii(j,b,i,i1)
      temp T1jbii(j,b,i,i1)
      temp Txbai(mu,b,a,i)
      temp T1xbai(mu,b,a,i)
      temp Tbbai(b,b1,a,i)
      temp T1bbai(b,b1,a,i)
#
      temp T1aaai(a,a1,a2,i) 
      temp Txxai(mu,nu,a,i) 
      temp Txaai(mu,a,a1,i) 
      temp T1xaai(mu,a,a1,i) 
      temp Txaii(mu,a,i,i1) 
      temp T1xaii(mu,a,i,i1) 
      temp T1xxai(mu,nu,a,i) 
      temp Tixai(i,mu,a,i1) 
      temp T1ixai(i,mu,a,i1) 
      temp Txipi(mu,i,p1,i1) 
      temp T1xipi(mu,i,p1,i1) 
      temp T1pipi(p,i,p1,i1) 
#
      temp T1xxbj(mu,nu,b,j) 
#
      temp Txxij(mu,nu,i,j) 
      temp T1xxij(mu,nu,i,j) 
      temp T1ixxj(i,mu,nu,j) 
      local Txxxi(mu,nu,lambda,i)
      temp T1xxxi(mu,nu,lambda,i)
      local Txxxj(mu,nu,lambda,j)
      temp T1xxxj(mu,nu,lambda,j)
      temp T1xixi(mu,i,nu,i1)
      temp Txxii(mu,nu,i1,i) 
      temp T1xxii(mu,nu,i1,i) 
      temp Tixxi(i1,mu,nu,i) 
      temp T1ixxi(i1,mu,nu,i) 
#
# Declare integral arrays 
# ------------------------  
#
      local TAOINT(mu,nu,lambda,sigma) 
      local L1xxxi(mu,nu,lambda,i) 
      local L2xxxi(mu,lambda,nu,i) 
      local L3xxxi(lambda,mu,nu,i) 
      local L1xxxj(mu,nu,lambda,j) 
      local L2xxxj(mu,lambda,nu,j) 
      local L3xxxj(lambda,mu,nu,j) 
      local Lxixi(mu,i,nu,i1) 
      local Lxxii(mu,nu,i,i1) 
      local Lixxi(i,mu,nu,i1) 
      local Lxjxj(mu,j,nu,j1) 
      local Lxxjj(mu,nu,j,j1) 
      local Ljxxj(j,mu,nu,j1) 
      local Lxixj(mu,i,nu,j) 
      local Lixxj(i,mu,nu,j) 
      local Lxipi(mu,i,p,i1) 
      local Lxaii(mu,a,i,i1) 
      local Lixai(i,mu,a,i1) 
      local L1xaai(mu,a,a1,i)  
      local L2xaai(mu,a,a2,i)  
      local Lxjqj(mu,j,q,j1)  
      local Lxbjj(mu,b,j,j1) 
      local Ljxbj(j,mu,b,j1) 
      local Lxbii(mu,b,i,i1) 
      local Lxiqj(mu,i,q,j) 
      local Lxajj(mu,a,j,j1) 
      local Lixbj(i,mu,b,j) 
      local L1xbbj(mu,b,b1,j) 
#
#    ------------------------------------------------------------------------
#
#    DEFINE PROCEDURES  
#
#    ------------------------------------------------------------------------
#
#    Compute the integrals and store in the served array saoint. 
#
     PROC COMP_INTEGRALS 
#
#    ------------------------------------------------------------------------
#
     PARDO mu, nu, lambda, sigma
#
              compute_integrals                    AOINT(mu,nu,lambda,sigma)
#             prepare saoint(mu,nu,lambda,sigma) = AOINT(mu,nu,lambda,sigma) 
#
     ENDPARDO mu, nu, lambda, sigma
     execute server_barrier 
#
#    ------------------------------------------------------------------------
#
     ENDPROC COMP_INTEGRALS 
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
#    Perform the first two stages of the transformation in two N5 steps. 
#
     PROC TRAN_TRAN2 
#
#    ------------------------------------------------------------------------
#
     PARDO mu, nu, lambda
#
          allocate Txxxi(mu,nu,lambda,*)
          allocate Txxxj(mu,nu,lambda,*)
#
          DO sigma
#
             compute_integrals aoint(mu,nu,lambda,sigma)
#
             DO i   
#
                 T1xxxi(mu,nu,lambda,i)  = aoint(mu,nu,lambda,sigma)*ca(sigma,i)
                 Txxxi(mu,nu,lambda,i)  += T1xxxi(mu,nu,lambda,i)  
#
             ENDDO i   
#
             DO j   
#
                 T1xxxj(mu,nu,lambda,j)  = aoint(mu,nu,lambda,sigma)*ca(sigma,j)
                 Txxxj(mu,nu,lambda,j)  += T1xxxj(mu,nu,lambda,j)  
#
             ENDDO j   
#
          ENDDO sigma

          DO i
             T1xxxi(mu,nu,lambda,i)         = Txxxi(mu,nu,lambda,i)
             PREPARE Vxxxi(mu,nu,lambda,i)  = T1xxxi(mu,nu,lambda,i)
          ENDDO i

          DO j
             T1xxxj(mu,nu,lambda,j)         = Txxxj(mu,nu,lambda,j) 
             PREPARE Vxxxj(mu,nu,lambda,j)  = T1xxxj(mu,nu,lambda,j)
          ENDDO j

          deallocate Txxxi(mu,nu,lambda,*)
          deallocate Txxxj(mu,nu,lambda,*)
#
     ENDPARDO mu, nu, lambda 
     execute server_barrier
#
#    ------------------------------------------------------------------------
#
     PARDO mu, nu, i
#
           allocate L1xxxi(mu,nu,*,i)
#
           DO lambda
#
              REQUEST Vxxxi(mu,nu,lambda,i) lambda
#
              L1xxxi(mu,nu,lambda,i) = Vxxxi(mu,nu,lambda,i)
#
           ENDDO lambda
#
           DO i1
#
              Txxii(mu,nu,i1,i) = 0.0
#
              DO lambda
#
                 T1xxii(mu,nu,i1,i) = L1xxxi(mu,nu,lambda,i)*ca(lambda,i1)
                 Txxii(mu,nu,i1,i) += T1xxii(mu,nu,i1,i)
#
              ENDDO lambda
#
              PREPARE Vxxii(mu,nu,i1,i) = Txxii(mu,nu,i1,i)
#
           ENDDO i1
#
           DO a
#
              Txxai(mu,nu,a,i) = 0.0
#
              DO lambda
#
                 T1xxai(mu,nu,a,i) = L1xxxi(mu,nu,lambda,i)*ca(lambda,a)
                 Txxai(mu,nu,a,i) += T1xxai(mu,nu,a,i)
#
              ENDDO lambda
#
              PREPARE Vxxai(mu,nu,a,i) = Txxai(mu,nu,a,i)
#
           ENDDO a
           deallocate L1xxxi(mu,nu,*,i)
           allocate L2xxxi(mu,*,nu,i)

           DO lambda
              REQUEST Vxxxi(mu,lambda,nu,i) i
              L2xxxi(mu,lambda,nu,i) = Vxxxi(mu,lambda,nu,i)
           ENDDO lambda

           DO i1
              Txixi(mu,i1,nu,i) = 0.0

              DO lambda
                 T1xixi(mu,i1,nu,i) = L2xxxi(mu,lambda,nu,i)*ca(lambda,i1)
                 Txixi(mu,i1,nu,i) += T1xixi(mu,i1,nu,i)
              ENDDO lambda

              PREPARE Vxixi(mu,i1,nu,i) = Txixi(mu,i1,nu,i)
           ENDDO i1

           deallocate L2xxxi(mu,*,nu,i)
           allocate L3xxxi(*,mu,nu,i)

           DO lambda
              REQUEST Vxxxi(lambda,mu,nu,i) i
              L3xxxi(lambda,mu,nu,i) = Vxxxi(lambda,mu,nu,i)
           ENDDO lambda

           DO i1
              Tixxi(i1,mu,nu,i) = 0.0

              DO lambda
                 T1ixxi(i1,mu,nu,i) = L3xxxi(lambda,mu,nu,i)*ca(lambda,i1)
                 Tixxi(i1,mu,nu,i) += T1ixxi(i1,mu,nu,i)
              ENDDO lambda

              PREPARE Vixxi(i1,mu,nu,i) = Tixxi(i1,mu,nu,i)
           ENDDO i1

           deallocate L3xxxi(*,mu,nu,i)
#
     ENDPARDO mu, nu, i
#
#    ------------------------------------------------------------------------
#
     PARDO mu, nu, j
#
           allocate L1xxxj(mu,nu,*,j)
#
           DO lambda
#
              REQUEST Vxxxj(mu,nu,lambda,j) j
#
              L1xxxj(mu,nu,lambda,j) = Vxxxj(mu,nu,lambda,j)
#
           ENDDO lambda
#
           DO j1
#
              Txxjj(mu,nu,j1,j) = 0.0
#
              DO lambda
#
                 T1xxjj(mu,nu,j1,j) = L1xxxj(mu,nu,lambda,j)*ca(lambda,j1)
                 Txxjj(mu,nu,j1,j) += T1xxjj(mu,nu,j1,j)
#
              ENDDO lambda
#
              PREPARE Vxxjj(mu,nu,j1,j) = Txxjj(mu,nu,j1,j)
#
           ENDDO j1
#
           DO b
#
              Txxbj(mu,nu,b,j) = 0.0
#
              DO lambda
#
                 T1xxbj(mu,nu,b,j) = L1xxxj(mu,nu,lambda,j)*ca(lambda,b)
                 Txxbj(mu,nu,b,j) += T1xxbj(mu,nu,b,j)
#
              ENDDO lambda
#
              PREPARE Vxxbj(mu,nu,b,j) = Txxbj(mu,nu,b,j)
#
           ENDDO b
#
           DO i
#
              Txxij(mu,nu,i,j) = 0.0
#
              DO lambda
#
                 T1xxij(mu,nu,i,j) = L1xxxj(mu,nu,lambda,j)*ca(lambda,i)
                 Txxij(mu,nu,i,j) += T1xxij(mu,nu,i,j)
#
              ENDDO lambda
#
              PREPARE Vxxij(mu,nu,i,j) = Txxij(mu,nu,i,j)
#
           ENDDO i
#
           deallocate L1xxxj(mu,nu,*,j)
           allocate L2xxxj(mu,*,nu,j)

           DO lambda
              REQUEST Vxxxj(mu,lambda,nu,j) j
              L2xxxj(mu,lambda,nu,j) = Vxxxj(mu,lambda,nu,j)
           ENDDO lambda

           DO j1
              Txjxj(mu,j1,nu,j) = 0.0

              DO lambda
                 T1xjxj(mu,j1,nu,j) = L2xxxj(mu,lambda,nu,j)*ca(lambda,j1)
                 Txjxj(mu,j1,nu,j) += T1xjxj(mu,j1,nu,j)
              ENDDO lambda

              PREPARE Vxjxj(mu,j1,nu,j) = Txjxj(mu,j1,nu,j)
           ENDDO j1

           DO i
              Txixj(mu,i,nu,j) = 0.0

              DO lambda
                 T1xixj(mu,i,nu,j) = L2xxxj(mu,lambda,nu,j)*ca(lambda,i)
                 Txixj(mu,i,nu,j) += T1xixj(mu,i,nu,j)
              ENDDO lambda

              PREPARE Vxixj(mu,i,nu,j) = Txixj(mu,i,nu,j)
           ENDDO i

           deallocate L2xxxj(mu,*,nu,j)
           allocate L3xxxj(*,mu,nu,j)

           DO lambda
              REQUEST Vxxxj(lambda,mu,nu,j) j
              L3xxxj(lambda,mu,nu,j) = Vxxxj(lambda,mu,nu,j)
           ENDDO lambda

           DO j1
              Tjxxj(j1,mu,nu,j) = 0.0

              DO lambda
                 T1jxxj(j1,mu,nu,j) = L3xxxj(lambda,mu,nu,j)*ca(lambda,j1)
                 Tjxxj(j1,mu,nu,j) += T1jxxj(j1,mu,nu,j)
              ENDDO lambda

              PREPARE Vjxxj(j1,mu,nu,j) = Tjxxj(j1,mu,nu,j)
           ENDDO j1

           DO i
              Tixxj(i,mu,nu,j) = 0.0

              DO lambda
                 T1ixxj(i,mu,nu,j) = L3xxxj(lambda,mu,nu,j)*ca(lambda,i)
                 Tixxj(i,mu,nu,j) += T1ixxj(i,mu,nu,j)
              ENDDO lambda

              PREPARE Vixxj(i,mu,nu,j) = Tixxj(i,mu,nu,j)
           ENDDO i

           deallocate L3xxxj(*,mu,nu,j)
#
     ENDPARDO mu, nu, j
#
     execute server_barrier
#
#    ------------------------------------------------------------------------
#
     ENDPROC TRAN_TRAN2 
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
#    Perform the third N5 stage of the transformation.  
#
     PROC TRAN_TRAN3 
#
#    ------------------------------------------------------------------------
#
     PARDO mu, i, i1
#
           allocate Lxixi(mu,i,*,i1) 
           allocate Lxxii(mu,*,i,i1) 
           allocate Lixxi(i,mu,*,i1) 
#
           DO nu 
#
              REQUEST Vxixi(mu,i,nu,i1) i1 
              REQUEST Vxxii(mu,nu,i,i1) i1 
              REQUEST Vixxi(i,mu,nu,i1) i1 
#
              Lxixi(mu,i,nu,i1) = Vxixi(mu,i,nu,i1) 
              Lxxii(mu,nu,i,i1) = Vxxii(mu,nu,i,i1) 
              Lixxi(i,mu,nu,i1) = Vixxi(i,mu,nu,i1) 
#
           ENDDO nu 
#
           DO p 
#
              Txipi(mu,i,p,i1) = 0.0  
#
              DO nu  
#
                 T1xipi(mu,i,p,i1) = Lxixi(mu,i,nu,i1)*ca(nu,p)
                 Txipi(mu,i,p,i1) += T1xipi(mu,i,p,i1)  
#
              ENDDO nu  
#
              PREPARE Vxipi(mu,i,p,i1) = Txipi(mu,i,p,i1)
#
           ENDDO p 
#
           DO a
#
              Txaii(mu,a,i,i1) = 0.0 
              Tixai(i,mu,a,i1) = 0.0  
#
              DO nu 
#
                 T1xaii(mu,a,i,i1) = Lxxii(mu,nu,i,i1)*ca(nu,a)
                 Txaii(mu,a,i,i1) += T1xaii(mu,a,i,i1)  
#
                 T1ixai(i,mu,a,i1) = Lixxi(i,mu,nu,i1)*ca(nu,a)
                 Tixai(i,mu,a,i1) += T1ixai(i,mu,a,i1)  

              ENDDO nu 
#
              PREPARE Vxaii(mu,a,i,i1) = Txaii(mu,a,i,i1)
              PREPARE Vixai(i,mu,a,i1) = Tixai(i,mu,a,i1)
#
           ENDDO a
#
           DO b 
# 
              Txbii(mu,b,i,i1) = 0.0 
#
              DO nu  
#
                 T1xbii(mu,b,i,i1) = Lxxii(mu,nu,i,i1)*ca(nu,b)
                 Txbii(mu,b,i,i1) += T1xbii(mu,b,i,i1)  
#
              ENDDO nu  
#
              PREPARE Vxbii(mu,b,i,i1) = Txbii(mu,b,i,i1)
#
           ENDDO b 
#
           deallocate Lxixi(mu,i,*,i1) 
           deallocate Lxxii(mu,*,i,i1) 
           deallocate Lixxi(i,mu,*,i1) 
#
     ENDPARDO mu, i, i1
#
#    ------------------------------------------------------------------------
#
     PARDO mu, a, i
#
           allocate Lxxai(mu,*,a,i) 
#
           DO nu 
#
              REQUEST Vxxai(mu,nu,a,i) i 
              Lxxai(mu,nu,a,i) = Vxxai(mu,nu,a,i) 
#
           ENDDO nu 
#
           DO a1 
#
              Txaai(mu,a1,a,i) = 0.0  
#
              DO nu  
#
                 T1xaai(mu,a1,a,i) = Lxxai(mu,nu,a,i)*ca(nu,a1)
                 Txaai(mu,a1,a,i) += T1xaai(mu,a1,a,i)  
#
              ENDDO nu  
#
              PREPARE Vxaai(mu,a1,a,i) = Txaai(mu,a1,a,i)
#
           ENDDO a1 
#
           DO b 
#
              Txbai(mu,b,a,i) = 0.0 
#
              DO nu  
#
                 T1xbai(mu,b,a,i) = Lxxai(mu,nu,a,i)*ca(nu,b)
                 Txbai(mu,b,a,i) += T1xbai(mu,b,a,i)   
#
              ENDDO nu  
#
              PREPARE Vxbai(mu,b,a,i) = Txbai(mu,b,a,i)
#
           ENDDO b 
#
           deallocate Lxxai(mu,*,a,i) 
#
     ENDPARDO mu, a, i
#
#    ------------------------------------------------------------------------
#
     PARDO mu, j, j1
#
           allocate Lxjxj(mu,j,*,j1) 
           allocate Lxxjj(mu,*,j,j1) 
           allocate Ljxxj(j,mu,*,j1) 
#
           DO nu 
#
              REQUEST Vxjxj(mu,j,nu,j1) j1 
              REQUEST Vxxjj(mu,nu,j,j1) j1 
              REQUEST Vjxxj(j,mu,nu,j1) j1 
#
              Lxjxj(mu,j,nu,j1) = Vxjxj(mu,j,nu,j1) 
              Lxxjj(mu,nu,j,j1) = Vxxjj(mu,nu,j,j1) 
              Ljxxj(j,mu,nu,j1) = Vjxxj(j,mu,nu,j1) 
#
           ENDDO nu 
#
           DO q 
#
              Txjqj(mu,j,q,j1) = 0.0  
#
              DO nu  
#
                 T1xjqj(mu,j,q,j1) = Lxjxj(mu,j,nu,j1)*ca(nu,q)
                 Txjqj(mu,j,q,j1) += T1xjqj(mu,j,q,j1)  
#
              ENDDO nu  
#
              PREPARE Vxjqj(mu,j,q,j1) = Txjqj(mu,j,q,j1)
#
           ENDDO q 
#
           DO b
#
              Txbjj(mu,b,j,j1) = 0.0 
              Tjxbj(j,mu,b,j1) = 0.0  
#
              DO nu 
#
                 T1xbjj(mu,b,j,j1) = Lxxjj(mu,nu,j,j1)*ca(nu,b)
                 Txbjj(mu,b,j,j1) += T1xbjj(mu,b,j,j1)  
#
                 T1jxbj(j,mu,b,j1) = Ljxxj(j,mu,nu,j1)*ca(nu,b)
                 Tjxbj(j,mu,b,j1) += T1jxbj(j,mu,b,j1)  

              ENDDO nu 
#
              PREPARE Vxbjj(mu,b,j,j1) = Txbjj(mu,b,j,j1)
              PREPARE Vjxbj(j,mu,b,j1) = Tjxbj(j,mu,b,j1)
#
           ENDDO b
#
           DO a 
#
              Txajj(mu,a,j,j1) = 0.0  
#
              DO nu  
#
                 T1xajj(mu,a,j,j1) = Lxxjj(mu,nu,j,j1)*ca(nu,a)
                 Txajj(mu,a,j,j1) += T1xajj(mu,a,j,j1)  
#
              ENDDO nu  
#
              PREPARE Vxajj(mu,a,j,j1) = Txajj(mu,a,j,j1)
#
           ENDDO a 
#
           deallocate Lxjxj(mu,j,*,j1) 
           deallocate Lxxjj(mu,*,j,j1) 
           deallocate Ljxxj(j,mu,*,j1) 
#
     ENDPARDO mu, j, j1
#
#    ------------------------------------------------------------------------
#
     PARDO mu, b, j
#
           allocate Lxxbj(mu,*,b,j) 
#
           DO nu 
#
              REQUEST Vxxbj(mu,nu,b,j) j 
              Lxxbj(mu,nu,b,j) = Vxxbj(mu,nu,b,j) 
#
           ENDDO nu 
#
           DO b1 
#
              Txbbj(mu,b1,b,j) = 0.0  
#
              DO nu  
#
                 T1xbbj(mu,b1,b,j) = Lxxbj(mu,nu,b,j)*ca(nu,b1)
                 Txbbj(mu,b1,b,j) += T1xbbj(mu,b1,b,j)  
#
              ENDDO nu  
#
              PREPARE Vxbbj(mu,b1,b,j) = Txbbj(mu,b1,b,j)
#
           ENDDO b1 
#
           DO a 
#
              Txabj(mu,a,b,j) = 0.0  
#
              DO nu  
#
                 T1xabj(mu,a,b,j) = Lxxbj(mu,nu,b,j)*ca(nu,a)
                 Txabj(mu,a,b,j) += T1xabj(mu,a,b,j)  
#
              ENDDO nu  
#
              PREPARE Vxabj(mu,a,b,j) = Txabj(mu,a,b,j)
#
           ENDDO a 
#
           deallocate Lxxbj(mu,*,b,j)  
#
     ENDPARDO mu, b, j
#
#    ------------------------------------------------------------------------
#
     PARDO mu, i, j
#
           allocate Lxixj(mu,i,*,j) 
           allocate Lixxj(i,mu,*,j) 
#
           DO nu 
#
              REQUEST Vxixj(mu,i,nu,j) j 
              REQUEST Vixxj(i,mu,nu,j) j 
#
              Lxixj(mu,i,nu,j) = Vxixj(mu,i,nu,j) 
              Lixxj(i,mu,nu,j) = Vixxj(i,mu,nu,j) 
#
           ENDDO nu 
#
           DO q 
#
              Txiqj(mu,i,q,j) = 0.0  
#
              DO nu  
#
                 T1xiqj(mu,i,q,j) = Lxixj(mu,i,nu,j)*ca(nu,q)
                 Txiqj(mu,i,q,j) += T1xiqj(mu,i,q,j)  
#
              ENDDO nu  
#
              PREPARE Vxiqj(mu,i,q,j) = Txiqj(mu,i,q,j)
#
           ENDDO q 
#
           DO b 
#
              Tixbj(i,mu,b,j) = 0.0  
#
              DO nu  
#
                 T1ixbj(i,mu,b,j) = Lixxj(i,mu,nu,j)*ca(nu,b)
                 Tixbj(i,mu,b,j) += T1ixbj(i,mu,b,j)  
#
              ENDDO nu  
#
              PREPARE Vixbj(i,mu,b,j) = Tixbj(i,mu,b,j)
#
           ENDDO b 
#
           deallocate Lxixj(mu,i,*,j) 
           deallocate Lixxj(i,mu,*,j) 
#
     ENDPARDO mu, i, j
#
#    ------------------------------------------------------------------------
#    
     execute server_barrier
#
     ENDPROC TRAN_TRAN3 
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
     PROC TRAN_TRAN4 
#
#    ------------------------------------------------------------------------
#
     PARDO p, i, i1
#
           allocate Lxipi(*,i,p,i1) 
#
           DO mu 
#
              REQUEST Vxipi(mu,i,p,i1) i1 
              REQUEST Vxipi(mu,i1,p,i) i 
              Lxipi(mu,i,p,i1)  = Vxipi(mu,i,p,i1) 
              Txipi(mu,i,p,i1)  = Vxipi(mu,i1,p,i) 
              Lxipi(mu,i,p,i1) -= Txipi(mu,i,p,i1) 
#
           ENDDO mu  
#
           DO p1 
#
              Tpipi(p1,i,p,i1) = 0.0  
#
              DO mu  
#
                 T1pipi(p1,i,p,i1) = Lxipi(mu,i,p,i1)*ca(mu,p1)
                 Tpipi(p1,i,p,i1) += T1pipi(p1,i,p,i1)  
#
              ENDDO mu  
#
              PREPARE VSpipi(p1,i,p,i1) = Tpipi(p1,i,p,i1) 
#
           ENDDO p1 
#
           deallocate Lxipi(*,i,p,i1) 
#
     ENDPARDO p, i, i1
#
     PARDO a, i, i1
#
           allocate Lxaii(*,a,i,i1) 
           allocate Lixai(i,*,a,i1) 
#
           DO mu 
#
              REQUEST Vxaii(mu,a,i,i1) i1 
              REQUEST Vixai(i,mu,a,i1) i1 
#
              Lxaii(mu,a,i,i1) = Vxaii(mu,a,i,i1)  
              Lixai(i,mu,a,i1) = Vixai(i,mu,a,i1) 
#
           ENDDO mu 
#
           DO a1 
#
              Taaii(a1,a,i,i1) = 0.0  
#
              DO mu  
#
                 T1aaii(a1,a,i,i1) = Lxaii(mu,a,i,i1)*ca(mu,a1)
                 Taaii(a1,a,i,i1) += T1aaii(a1,a,i,i1)  
#
              ENDDO mu  
#
              PREPARE Vaaii(a1,a,i,i1) = Taaii(a1,a,i,i1)
#
           ENDDO a1 
#
           deallocate Lxaii(*,a,i,i1) 
#
           DO a1 
#
              Tiaai(i,a1,a,i1) = 0.0  
#
              DO mu  
#
                 T1iaai(i,a1,a,i1) = Lixai(i,mu,a,i1)*ca(mu,a1)
                 Tiaai(i,a1,a,i1) += T1iaai(i,a1,a,i1)   
#
              ENDDO mu  
#
              PREPARE Viaai(i,a1,a,i1) = Tiaai(i,a1,a,i1)
#
           ENDDO a1 
#
           deallocate Lixai(i,*,a,i1) 
#
     ENDPARDO a, i, i1
# 
     PARDO a, a1, i
#
           allocate L1xaai(*,a,a1,i) 
#
           DO mu 
#
              REQUEST Vxaai(mu,a,a1,i) i 
#
              L1xaai(mu,a,a1,i)  = Vxaai(mu,a,a1,i)
#
           ENDDO mu 
#
           DO a2  
#
              Taaai(a2,a,a1,i) = 0.0 
#
              DO mu 
#
                 T1aaai(a2,a,a1,i) = L1xaai(mu,a,a1,i)*ca(mu,a2)
                 Taaai(a2,a,a1,i) += T1aaai(a2,a,a1,i)  
#
              ENDDO mu 
#
              T1aaai(a1,a,a2,i)           = Taaai(a2,a,a1,i) 
              T1aaai(a1,a,a2,i)          *= -1.0  
              PREPARE Vaaai (a2,a,a1,i)  += Taaai (a2,a,a1,i)
              PREPARE VSaaai(a2,a,a1,i)  += Taaai (a2,a,a1,i)
              PREPARE VSaaai(a1,a,a2,i)  += T1aaai(a1,a,a2,i)
#
           ENDDO a2  
#
           deallocate L1xaai(*,a,a1,i) 
#
     ENDPARDO a, a1, i
# 
     PARDO q, j, j1
#
           allocate Lxjqj(*,j,q,j1) 
#
           DO mu  
#
              REQUEST Vxjqj(mu,j,q,j1) j1 
              REQUEST Vxjqj(mu,j1,q,j) j1 
              Lxjqj(mu,j,q,j1)  = Vxjqj(mu,j,q,j1) 
              Txjqj(mu,j,q,j1)  = Vxjqj(mu,j1,q,j) 
              Lxjqj(mu,j,q,j1) -= Txjqj(mu,j,q,j1) 
#
           ENDDO mu  
#
           DO q1 
#
              Tqjqj(q1,j,q,j1) = 0.0 
#
              DO mu  
#
                 T1qjqj(q1,j,q,j1)      = Lxjqj(mu,j,q,j1)*ca(mu,q1)
                 Tqjqj(q1,j,q,j1)      += T1qjqj(q1,j,q,j1) 
#
              ENDDO mu  
#
              PREPARE VSqjqj(q1,j,q,j1) = Tqjqj(q1,j,q,j1)
#
           ENDDO q1 
#
           deallocate Lxjqj(*,j,q,j1) 
#
     ENDPARDO q, j, j1
#
     PARDO b, j, j1
#
           allocate Lxbjj(*,b,j,j1) 
           allocate Ljxbj(j,*,b,j1) 
#
           DO mu 
#
              REQUEST Vxbjj(mu,b,j,j1) j1 
              REQUEST Vjxbj(j,mu,b,j1) j1 
#
              Lxbjj(mu,b,j,j1) = Vxbjj(mu,b,j,j1) 
              Ljxbj(j,mu,b,j1) = Vjxbj(j,mu,b,j1) 
#
           ENDDO mu 
#
           DO b1 
#
              Tbbjj(b1,b,j,j1) = 0.0 
#
              DO mu 
#
                 T1bbjj(b1,b,j,j1) = Lxbjj(mu,b,j,j1)*ca(mu,b1)
                 Tbbjj(b1,b,j,j1) += T1bbjj(b1,b,j,j1)  
#
              ENDDO mu  
#
              PREPARE Vbbjj(b1,b,j,j1) = Tbbjj(b1,b,j,j1)
#
           ENDDO b1 
#
           deallocate Lxbjj(*,b,j,j1) 
#
           DO b1 
#
              Tjbbj(j,b1,b,j1) = 0.0 
#
              DO mu  
#
                 T1jbbj(j,b1,b,j1) = Ljxbj(j,mu,b,j1)*ca(mu,b1)
                 Tjbbj(j,b1,b,j1) += T1jbbj(j,b1,b,j1)  
#
              ENDDO mu  
#
              PREPARE Vjbbj(j,b1,b,j1) = Tjbbj(j,b1,b,j1)
#
           ENDDO b1 
#
           deallocate Ljxbj(j,*,b,j1) 
#
     ENDPARDO b, j, j1
#
     PARDO b, i, i1
#
           allocate Lxbii(*,b,i,i1) 
#
           DO mu  
#
              REQUEST Vxbii(mu,b,i,i1) i1 
              Lxbii(mu,b,i,i1) = Vxbii(mu,b,i,i1) 
#
           ENDDO mu  
#
           DO b1 
#
              Tbbii(b1,b,i,i1) = 0.0 
#
              DO mu  
#
                 T1bbii(b1,b,i,i1) = Lxbii(mu,b,i,i1)*ca(mu,b1)
                 Tbbii(b1,b,i,i1) += T1bbii(b1,b,i,i1)  
#
              ENDDO mu  
#
              PREPARE Vbbii(b1,b,i,i1) = Tbbii(b1,b,i,i1)
#
           ENDDO b1 
#
           deallocate Lxbii(*,b,i,i1) 
#
     ENDPARDO b, i, i1
#
     PARDO b, i, i1
#
           allocate Lxbii(*,b,i,i1) 
#
           DO mu 
#
              REQUEST Vxbii(mu,b,i,i1) i1 
              Lxbii(mu,b,i,i1) = Vxbii(mu,b,i,i1)  
#
           ENDDO mu 
#
           DO j 
#
              Tjbii(j,b,i,i1) = 0.0 
#
              DO mu 
#
                 T1jbii(j,b,i,i1) = Lxbii(mu,b,i,i1)*ca(mu,j)
                 Tjbii(j,b,i,i1) += T1jbii(j,b,i,i1)  
#
              ENDDO mu  
#
              PREPARE Vjbii(j,b,i,i1) = Tjbii(j,b,i,i1)
#
           ENDDO j 
#
           deallocate Lxbii(*,b,i,i1) 
#
     ENDPARDO b, i, i1
#
     PARDO b, a, i
#
           allocate Lxbai(*,b,a,i) 
#
           DO mu  
#
              REQUEST Vxbai(mu,b,a,i) i 
              Lxbai(mu,b,a,i) = Vxbai(mu,b,a,i) 
#
           ENDDO mu  
#
           DO b1 
#
              Tbbai(b1,b,a,i) = 0.0 
#
              DO mu  
#
                 T1bbai(b1,b,a,i) = Lxbai(mu,b,a,i)*ca(mu,b1)
                 Tbbai(b1,b,a,i) += T1bbai(b1,b,a,i)  
#
              ENDDO mu  
#
              PREPARE Vbbai(b1,b,a,i) = Tbbai(b1,b,a,i)
#
           ENDDO b1 
#
           deallocate Lxbai(*,b,a,i) 
#
     ENDPARDO b, a, i
#
     PARDO q, i, j
#
           allocate Lxiqj(*,i,q,j) 
#
           DO mu  
#
              REQUEST Vxiqj(mu,i,q,j) j 
              Lxiqj(mu,i,q,j) = Vxiqj(mu,i,q,j) 
#
           ENDDO mu  
#
           DO p 
#
              Tpiqj(p,i,q,j) = 0.0 
#
              DO mu  
#
                 T1piqj(p,i,q,j) = Lxiqj(mu,i,q,j)*ca(mu,p)
                 Tpiqj(p,i,q,j) += T1piqj(p,i,q,j)  
#
              ENDDO mu  
#
              PREPARE Vpiqj(p,i,q,j) = Tpiqj(p,i,q,j)
#
           ENDDO p 
#
           deallocate Lxiqj(*,i,q,j) 
#
     ENDPARDO q, i, j
#
     PARDO a, j, j1
#
           allocate Lxajj(*,a,j,j1) 
#
           DO mu  
#
              REQUEST Vxajj(mu,a,j,j1) j1 
              Lxajj(mu,a,j,j1) = Vxajj(mu,a,j,j1)  
#
           ENDDO mu  
#
           DO a1 
#
              Taajj(a1,a,j,j1) = 0.0 
#
              DO mu  
#
                 T1aajj(a1,a,j,j1) = Lxajj(mu,a,j,j1)*ca(mu,a1)
                 Taajj(a1,a,j,j1) += T1aajj(a1,a,j,j1)  
#
              ENDDO mu  
#
              PREPARE Vaajj(a1,a,j,j1) = Taajj(a1,a,j,j1)
#
           ENDDO a1 
#
           deallocate Lxajj(*,a,j,j1) 
#
     ENDPARDO a, j, j1
#
     PARDO b, i, j
#
           allocate Lixbj(i,*,b,j) 
#
           DO mu 
#
              REQUEST Vixbj(i,mu,b,j) j 
              Lixbj(i,mu,b,j) = Vixbj(i,mu,b,j) 
#
           ENDDO mu 
#
           DO a 
#
              Tiabj(i,a,b,j) = 0.0 
#
              DO mu 
#
                 T1iabj(i,a,b,j) = Lixbj(i,mu,b,j)*ca(mu,a)
                 Tiabj(i,a,b,j) += T1iabj(i,a,b,j)  
#
              ENDDO mu 
#
              PREPARE Viabj(i,a,b,j) += Tiabj(i,a,b,j)
#
           ENDDO a 
#
           deallocate Lixbj(i,*,b,j) 
#
     ENDPARDO b, i, j
#
     PARDO a, b, j
#
           allocate Lxabj(*,a,b,j) 
#
           DO mu  
#
              REQUEST Vxabj(mu,a,b,j) j 
              Lxabj(mu,a,b,j) = Vxabj(mu,a,b,j) 
#
           ENDDO mu  
#
           DO a1 
#
              Taabj(a1,a,b,j) = 0.0 
#
              DO mu  
#
                 T1aabj(a1,a,b,j) = Lxabj(mu,a,b,j)*ca(mu,a1)
                 Taabj(a1,a,b,j) += T1aabj(a1,a,b,j)  
#
              ENDDO mu  
#
              PREPARE Vaabj(a1,a,b,j) = Taabj(a1,a,b,j)
#
           ENDDO a1 
#
           deallocate Lxabj(*,a,b,j) 
#
     ENDPARDO a, b, j
#
#    ------------------------------------------------------------------------
#
     ENDPROC TRAN_TRAN4 
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------ 
#
     PROC TRAN_UHF 
# 
#        CALL COMP_INTEGRALS # --> compute integrals and put into served array 
         CALL TRAN_TRAN2     # --> performs the first two stages of the 
                             #     two-electron integral transformation.  
         CALL TRAN_TRAN3     # --> performs the third stage   
                             #     two-electron integral transformation.  
         CALL TRAN_TRAN4     # --> performs the fourth stage of the  
                             #     two-electron integral transformation.  
#
     ENDPROC TRAN_UHF 
#
#    ------------------------------------------------------------------------ 
#
#    ------------------------------------------------------------------------
#
#    DEFINE PROCEDURES
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
      PROC HBAR_AB
#     ------------
#
#     alpha-alpha spin component first. 
#     --------------------------------- 
#
      PARDO a, a1 
#
            tpp(a,a1) = fock_a(a,a1)       
#
            DO i 
               t1pp(a,a1) = St1a(a,i)*fock_a(i,a1) 
               tpp(a,a1) -= t1pp(a,a1) 
            ENDDO i 
#
            LHBAR_aa(a,a1) += tpp(a,a1) 
#
      ENDPARDO a, a1 
#
      PARDO a, a1, a2, i  
#
            REQUEST              VSaaai(a1,a,a2,i) i  
            t1pp(a,a1)         = VSaaai(a1,a,a2,i)*St1a(a2,i) 
#
            LHBAR_aa(a,a1)                 += t1pp(a,a1) 
#
            DO i1  
                t3iaai(i1,a2,a,i)         = VSaaai(a1,a,a2,i)*St1a(a1,i1)
                PREPARE NIAAI(i1,a2,a,i) += t3iaai(i1,a2,a,i)
             ENDDO i1  
#
      ENDPARDO a, a1, a2, i  
#
      PARDO a, a1, b, j  
#
            REQUEST              Vaabj(a1,a,b,j) j  
            t1pp(a,a1)         = Vaabj(a1,a,b,j)*St1b(b,j) 
            tppqq(a,a1,j,b)    = Vaabj(a1,a,b,j)
#
            LHBAR_aa(a,a1)                += t1pp(a,a1) 
            PREPARE HBAR_AIBC_aabb(a,a1,j,b) += tppqq(a,a1,j,b) 
#
      ENDPARDO a, a1, b, j  
#
      PARDO a, i1, a2, i  
            REQUEST             T2aa(a,i,a2,i1) i1 
            tai(a2,i1)        = St1a(a2,i1) 
            t1ai(a2,i)        = St1a(a2,i) 
#
            tpppp(a,i,a2,i1)  = T2aa(a,i,a2,i1) 
            t1pppp(a,i,a2,i1) = St1a(a,i)^tai(a2,i1) 
            t2pppp(a,i,a2,i1) = St1a(a,i1)^t1ai(a2,i) 
            tpppp(a,i,a2,i1) += t1pppp(a,i,a2,i1) 
            tpppp(a,i,a2,i1) -= t2pppp(a,i,a2,i1) 
#
            DO a1 
               REQUEST              VSpipi(a2,i1,a1,i) i   
               t1pp(a,a1)         = tpppp(a,i,a2,i1)*VSpipi(a2,i1,a1,i) 
               t1pp(a,a1)        *= -0.5  
               LHBAR_aa(a,a1) += t1pp(a,a1) 
            ENDDO a1 
#
      ENDPARDO a, i1, a2, i  
#
      PARDO a, i, b, j  
#
            REQUEST           T2ab(a,i,b,j) j 
            tppqq(a,i,b,j)  = T2ab(a,i,b,j) 
            t1ppqq(a,i,b,j) = St1a(a,i)^St1b(b,j) 
            tppqq(a,i,b,j) += t1ppqq(a,i,b,j) 
#
            DO a1  
#
               REQUEST              Vpiqj(a1,i,b,j) i   
               t1pp(a,a1)         = tppqq(a,i,b,j)*Vpiqj(a1,i,b,j) 
               t1pp(a,a1)        *= -1.0  
               LHBAR_aa(a,a1) += t1pp(a,a1) 
#
            ENDDO a1  
#
      ENDPARDO a, i, b, j  
#
#     alpha-alpha spin component done. 
#     -------------------------------- 
#
#     beta-beta spin component next. 
#     ------------------------------ 
#
#     beta-beta spin component done. 
#     ------------------------------ 

      execute server_barrier 
      DO a 
      DO a1 
         PUT HBAR_aa(a,a1) += LHBAR_aa(a,a1) 
      ENDDO a1 
      ENDDO a 
      execute server_barrier 
      DO a 
      DO a1 
         GET HBAR_aa(a,a1) 
         LHBAR_aa(a,a1) = HBAR_aa(a,a1) 
      ENDDO a1 
      ENDDO a 
#
      ENDPROC HBAR_AB
#     ---------------
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
      PROC HBAR_IJ
#     ------------
#
#     alpha-alpha spin component first. 
#     --------------------------------- 
#
      PARDO i, i1 
#
            tpp(i1,i) = fock_a(i1,i) 
#
            DO a 
               t1pp(i1,i) = fock_a(i1,a)*St1a(a,i) 
               tpp(i1,i) += t1pp(i1,i) 
            ENDDO a 
#
            DO a 
            DO i2 
               REQUEST      VSpipi(a,i2,i,i1) i1 
               t1pp(i1,i) = VSpipi(a,i2,i,i1)*St1a(a,i2)  
               tpp(i1,i) += t1pp(i1,i) 
            ENDDO i2 
            ENDDO a 
#
            DO b 
            DO j 
               REQUEST      Vpiqj(i,i1,b,j) i1 
               t1pp(i1,i) = Vpiqj(i,i1,b,j)*St1b(b,j)  
               tpp(i1,i) += t1pp(i1,i) 
            ENDDO j 
            ENDDO b 
#
            DO a 
            DO a1 
            DO i2 
               REQUEST             T2aa(a,i,a1,i2) i2 
               REQUEST             VSpipi(a,i1,a1,i2) i2  
#
               tpp(a1,i2)        = St1a(a1,i2)
               t1pp(a1,i)        = St1a(a1,i) 
#
               tpppp(a,i,a1,i2)  = T2aa(a,i,a1,i2)
               t1pppp(a,i,a1,i2) = St1a(a,i)^tpp(a1,i2) 
               t2pppp(a,i,a1,i2) = St1a(a,i2)^t1pp(a1,i) 
               tpppp(a,i,a1,i2) += t1pppp(a,i,a1,i2) 
               tpppp(a,i,a1,i2) -= t2pppp(a,i,a1,i2) 
#
               t1pp(i1,i)        = tpppp(a,i,a1,i2)*VSpipi(a,i1,a1,i2) 
               t1pp(i1,i)       *= 0.5 
               tpp(i1,i)        += t1pp(i1,i) 
            ENDDO i2 
            ENDDO a1 
            ENDDO a 
#
            DO a 
            DO b 
            DO j 
               REQUEST           T2ab(a,i,b,j) j 
               REQUEST           Vpiqj(a,i1,b,j) j  
#
               tppqq(a,i,b,j)  = T2ab(a,i,b,j)
               t1ppqq(a,i,b,j) = St1a(a,i)^St1b(b,j) 
               tppqq(a,i,b,j) += t1ppqq(a,i,b,j) 
#
               t1pp(i1,i)      = tppqq(a,i,b,j)*Vpiqj(a,i1,b,j) 
               tpp(i1,i)      += t1pp(i1,i) 
            ENDDO j 
            ENDDO b 
            ENDDO a 
#
            LHBAR_ii(i1,i) = tpp(i1,i) 
#
      ENDPARDO i, i1 
#
#     done alpha-alpha spin component. 
#     -------------------------------- 
#
      execute server_barrier 
      DO i 
      DO i1 
         PUT HBAR_ii(i,i1) += LHBAR_ii(i,i1) 
      ENDDO i1 
      ENDDO i 
      execute server_barrier 
      DO i 
      DO i1 
         GET              HBAR_ii(i,i1) 
         LHBAR_ii(i,i1) = HBAR_ii(i,i1)  
      ENDDO i1 
      ENDDO i 
#
#     done beta-beta spin component. 
#     ------------------------------ 
#
      ENDPROC HBAR_IJ
#     ---------------
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
      PROC HBAR_IB
#     ------------
#
#     alpha-alpha spin component first. 
#     --------------------------------- 
#
      PARDO i, a 
#
            tpp(i,a) = fock_a(i,a) 
#
            DO a1 
            DO i1 
               REQUEST     VSpipi(a,i,a1,i1) i1 
               t1pp(i,a) = VSpipi(a,i,a1,i1)*St1a(a1,i1) 
               tpp(i,a) += t1pp(i,a) 
            ENDDO i1 
            ENDDO a1 
#
            DO b 
            DO j 
               REQUEST     Vpiqj(a,i,b,j) j 
               t1pp(i,a) = Vpiqj(a,i,b,j)*St1b(b,j) 
               tpp(i,a) += t1pp(i,a) 
            ENDDO j 
            ENDDO b 
#
            LHBAR_ia(i,a) = tpp(i,a) 
#
      ENDPARDO i, a 
#
#     done alpha-alpha spin component. 
#     -------------------------------- 
#
#     beta-beta spin component next. 
#     ------------------------------ 
#
      PARDO j, b 
#
            tqq(j,b) = fock_a(j,b) 
#
            DO b1 
            DO j1 
               REQUEST     VSqjqj(b,j,b1,j1) j1 
               t1qq(j,b) = VSqjqj(b,j,b1,j1)*St1b(b1,j1) 
               tqq(j,b) += t1qq(j,b) 
            ENDDO j1 
            ENDDO b1 
#
            DO a 
            DO i 
               REQUEST     Vpiqj(a,i,b,j) j 
               t1qq(j,b) = Vpiqj(a,i,b,j)*St1a(a,i) 
               tqq(j,b) += t1qq(j,b) 
            ENDDO i 
            ENDDO a 
#
            LHBAR_jb(j,b) = tqq(j,b) 
#
      ENDPARDO j, b 
#
#     done alpha-alpha spin component. 
#     -------------------------------- 

      execute server_barrier 
      DO a 
      DO i 
         PUT HBAR_ia(i,a) += LHBAR_ia(i,a) 
      ENDDO i 
      ENDDO a 
      DO b 
      DO j 
         PUT HBAR_jb(j,b) += LHBAR_jb(j,b) 
      ENDDO j 
      ENDDO b 
      execute server_barrier 
      DO a 
      DO i 
         GET HBAR_ia(i,a) 
         LHBAR_ia(i,a) = HBAR_ia(i,a)  
      ENDDO i 
      ENDDO a 
      DO b 
      DO j 
         GET HBAR_jb(j,b) 
         LHBAR_jb(j,b) = HBAR_jb(j,b)  
      ENDDO j 
      ENDDO b 
#
      ENDPROC HBAR_IB
#     ---------------
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
      PROC HBAR_IJKL  
#     --------------
#
#     (alpha,alpha,alpha,alpha) spin component. 
#     ----------------------------------------- 
#
      PARDO i, i2, i1, i3 
#
            REQUEST             VSpipi(i,i1,i2,i3) i3 
            tpppp(i,i1,i2,i3) = VSpipi(i,i1,i2,i3) 
#
            DO a
               REQUEST              VSpipi(i1,i,a,i2) i2  
               t1pppp(i,i1,i2,i3) = VSpipi(i1,i,a,i2)*St1a(a,i3) 
               tpppp(i,i1,i2,i3) += t1pppp(i,i1,i2,i3) 
            ENDDO a
#
            DO a
               REQUEST              VSpipi(i3,i,a,i2) i2  
               t1pppp(i,i1,i2,i3) = VSpipi(i3,i,a,i2)*St1a(a,i1) 
               tpppp(i,i1,i2,i3) -= t1pppp(i,i1,i2,i3) 
            ENDDO a
#
            DO a 
            DO a1 
               REQUEST              VSpipi(a,i,a1,i2) i2 
               REQUEST              T2aa(a,i1,a1,i3) i3 
#
               tpp(a1,i3)         = St1a(a1,i3) 
               t1pp(a1,i1)        = St1a(a1,i1) 
#
               t1pppp(a,i1,a1,i3)  = T2aa(a,i1,a1,i3) 
               t2pppp(a,i1,a1,i3) = St1a(a,i1)^tpp(a1,i3)  
               t3pppp(a,i1,a1,i3) = St1a(a,i3)^t1pp(a1,i1)  
               t1pppp(a,i1,a1,i3) += t2pppp(a,i1,a1,i3) 
               t1pppp(a,i1,a1,i3) -= t3pppp(a,i1,a1,i3) 
#
               t4pppp(i,i1,i2,i3) = VSpipi(a,i,a1,i2)*t1pppp(a,i1,a1,i3) 
               t4pppp(i,i1,i2,i3) *= 0.5 
               tpppp(i,i1,i2,i3)  += t4pppp(i,i1,i2,i3) 
            ENDDO a1 
            ENDDO a 
#
            PREPARE HBAR_iiii(i,i1,i2,i3) = tpppp(i,i1,i2,i3) 
#
      ENDPARDO i, i2, i1, i3 
#
#     done (alpha,alpha,alpha,alpha) spin component. 
#     ---------------------------------------------- 
#
#     (beta,beta,beta,beta) spin component. 
#     ------------------------------------- 
#
#     done (beta,beta,beta,beta) spin component. 
#     ------------------------------------------ 
#
#     (alpha,alpha,beta,beta) spin component. 
#     --------------------------------------- 
#
      PARDO i, i1, j2, j3 
#
            REQUEST             Vpiqj(i,i1,j2,j3) j3 
            tppqq(i,i1,j2,j3) = Vpiqj(i,i1,j2,j3) 
#
            DO b
               REQUEST              Vpiqj(i1,i,b,j2) j2  
               t1ppqq(i,i1,j2,j3) = Vpiqj(i1,i,b,j2)*St1b(b,j3) 
               tppqq(i,i1,j2,j3) += t1ppqq(i,i1,j2,j3) 
            ENDDO b
#
            DO a
               REQUEST              Vpiqj(a,i,j2,j3) j2  
               t1ppqq(i,i1,j2,j3) = Vpiqj(a,i,j2,j3)*St1a(a,i1) 
               tppqq(i,i1,j2,j3) += t1ppqq(i,i1,j2,j3) 
            ENDDO a
#
            DO a 
            DO b 
               REQUEST             Vpiqj(a,i,b,j2) j2 
               REQUEST             T2ab(a,i1,b,j3) j3 
#
               t1ppqq(a,i1,b,j3)  = T2ab(a,i1,b,j3) 
               t2ppqq(a,i1,b,j3)  = St1a(a,i1)^St1b(b,j3)  
               t1ppqq(a,i1,b,j3) += t2ppqq(a,i1,b,j3) 
#
               t3ppqq(i,i1,j2,j3) = Vpiqj(a,i,b,j2)*t1ppqq(a,i1,b,j3) 
               tppqq(i,i1,j2,j3) += t3ppqq(i,i1,j2,j3) 
            ENDDO b 
            ENDDO a 
#
            PREPARE HBAR_iijj(i,i1,j2,j3) = tppqq(i,i1,j2,j3) 
#
      ENDPARDO i, i1, j2, j3 
#
#     done (alpha,alpha,beta,beta) spin component. 
#     -------------------------------------------- 
#
      ENDPROC HBAR_IJKL 
#     -----------------
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
#     -----------------
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
      PROC HBAR_AIBC   
#     --------------
#
#     There are four spin cases to compute:
#     1. H^{ai}_{bc) --> HBAR_AIBC_aaaa  
#     2. H^{AI}_{BC) --> HBAR_AIBC_bbbb  
#     3. H^{Ai}_{Bc) --> HBAR_AIBC_bbaa  
#     4. H^{aI}_{bC) --> HBAR_AIBC_aabb  
#
#     Note that since I 'always' store arrays in (11|22) form the 
#     notation, although valid, is slightly confusing. The 
#     storage pattern is therefore array(a,b,i,c).   
#
#    ------------------------------------------------------------------------
#
#     AAAA spin combination. 
#     ---------------------- 
#
#     BBBB spin combination. 
#     ---------------------- 
#
#     AABB spin combination. 
#     ---------------------- 
#
      PARDO i1, a1, b2, j 
#
            REQUEST Vpiqj(a1,i1,b2,j) j 
#
            DO a 
               t1ppqq(a,a1,j,b2)                  = Vpiqj(a1,i1,b2,j)*St1a(a,i1) 
               t1ppqq(a,a1,j,b2)                 *= -1.0  
               PREPARE HBAR_AIBC_aabb(a,a1,j,b2) += t1ppqq(a,a1,j,b2) 
            ENDDO a 
#
      ENDPARDO i1, a1, b2, j 
#
#     BBAA spin combination. 
#     ---------------------- 
#
      ENDPROC HBAR_AIBC   
#     -----------------
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
      PROC HBAR_JKIA   
#     --------------
#
#     There are four spin cases to compute:
#     1. H^{jk}_{ia) --> HBAR_JKIA_aaaa  
#     2. H^{JK}_{IA) --> HBAR_JKIA_bbbb  
#     3. H^{Jk}_{Ia) --> HBAR_JKIA_bbaa  
#     4. H^{jK}_{iA) --> HBAR_JKIA_aabb  
#
#     Note that since I 'always' store arrays in (11|22) form the 
#     notation, although valid, is slightly confusing. The 
#     storage pattern is therefore array(a,b,i,c).   
#
#    ------------------------------------------------------------------------
#
#     AAAA spin combination. 
#     ---------------------- 
#
      PARDO i, i1, i2, a 
#
            REQUEST            VSpipi(i,i1,a,i2) i  
            tpppp(i,i1,a,i2) = VSpipi(i,i1,a,i2) 
#
            DO a1 
               REQUEST             VSpipi(a1,i1,a,i2) a  
               t1pppp(i,i1,a,i2) = VSpipi(a1,i1,a,i2)*St1a(a1,i) 
               tpppp(i,i1,a,i2) += t1pppp(i,i1,a,i2) 
            ENDDO a1 
#
            t1pppp(i1,i,i2,a)                 = tpppp(i,i1,a,i2) 
            PREPARE HBAR_JKIA_aaaa(i1,i,i2,a) = t1pppp(i1,i,i2,a) 
#
      ENDPARDO i, i1, i2, a 
#
#     BBBB spin combination. 
#     ---------------------- 
#
#     AABB spin combination. 
#     ---------------------- 
#
      PARDO i, i1, j2, b 
#
            REQUEST            Vpiqj(i,i1,b,j2) i  
            tppqq(i,i1,b,j2) = Vpiqj(i,i1,b,j2) 
#
            DO a1 
               REQUEST             Vpiqj(a1,i1,b,j2) b  
               t1ppqq(i,i1,b,j2) = Vpiqj(a1,i1,b,j2)*St1a(a1,i) 
               tppqq(i,i1,b,j2) += t1ppqq(i,i1,b,j2) 
            ENDDO a1 
#
            t1ppqq(i1,i,j2,b)                 = tppqq(i,i1,b,j2) 
            PREPARE HBAR_JKIA_aabb(i1,i,j2,b) = t1ppqq(i1,i,j2,b) 
#
      ENDPARDO i, i1, j2, b 
#
#     BBAA spin combination. 
#     ---------------------- 
#
      ENDPROC HBAR_JKIA   
#     -----------------
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
      PROC HBAR_IAJK   
#     --------------
#
#     There are four spin cases to compute:
#     1. H^{ia)_{jk} --> HBAR_IAJK_aaaa  
#     1. H^{IA)_{JK} --> HBAR_IAJK_bbbb  
#     1. H^{Ia)_{Jk} --> HBAR_IAJK_bbaa  
#     1. H^{iA)_{jK} --> HBAR_IAJK_aabb  
#
#     Note that since I 'always' store arrays in (11|22) form the 
#     notation, although valid, is slightly confusing. The 
#     storage pattern is therefore array(a,b,i,c).   
#
#    ------------------------------------------------------------------------
#
#     Form the two-particle intermediates needed. 
#     ------------------------------------------- 
#
      PARDO i1, a1, a, i
#
            REQUEST             Viaai(i1,a1,a,i) i # +
            REQUEST             Vaaii(a,a1,i1,i) i # -
            Tiaai(i1,a1,a,i)  = Vaaii(a,a1,i1,i)
            Tiaai(i1,a1,a,i) -= Viaai(i1,a1,a,i)
            Tiaai(i1,a1,a,i) *= -1.0
#
            DO i2
            DO a2
               REQUEST               T2aa(a,i2,a2,i) i
               REQUEST               VSpipi(a1,i1,a2,i2) i2 # +
#
               T1iaai(i1,a1,a,i)   = VSpipi(a1,i1,a2,i2)*T2aa(a,i2,a2,i)
               Tiaai(i1,a1,a,i)   -= T1iaai(i1,a1,a,i)
            ENDDO a2
            ENDDO i2
#
            DO j
            DO b
               REQUEST             T2ab(a,i,b,j) j
               REQUEST             Vpiqj(a1,i1,b,j)  j # +
#
               T1iaai(i1,a1,a,i) = Vpiqj(a1,i1,b,j)*T2ab(a,i,b,j)
               Tiaai(i1,a1,a,i) += T1iaai(i1,a1,a,i)
            ENDDO b
            ENDDO j
#
            PREPARE WHIAAI(i1,a1,a,i) = Tiaai(i1,a1,a,i)
#
      ENDPARDO i1, a1, a, i
#
      PARDO j1, b1, b, j
#
            REQUEST             Vjbbj(j1,b1,b,j) j # +
            REQUEST             Vbbjj(b,b1,j1,j) j # -
            Tjbbj(j1,b1,b,j)  = Vbbjj(b,b1,j1,j)
            Tjbbj(j1,b1,b,j) -= Vjbbj(j1,b1,b,j)
            Tjbbj(j1,b1,b,j) *= -1.0
#
            DO j2
            DO b2
               REQUEST             T2bb(b,j2,b2,j) j
               REQUEST             VSqjqj(b1,j1,b2,j2) j2 # +
#
               T1jbbj(j1,b1,b,j) = VSqjqj(b1,j1,b2,j2)*T2bb(b,j2,b2,j)
               Tjbbj(j1,b1,b,j) -= T1jbbj(j1,b1,b,j)
            ENDDO b2
            ENDDO j2
#
            DO i
            DO a
               REQUEST             T2ab(a,i,b,j) j
               REQUEST             Vpiqj(a,i,b1,j1)  j1 # +
#
               T1jbbj(j1,b1,b,j) = Vpiqj(a,i,b1,j1)*T2ab(a,i,b,j)
               Tjbbj(j1,b1,b,j) += T1jbbj(j1,b1,b,j)
            ENDDO a
            ENDDO i
#
            PREPARE WHJBBJ(j1,b1,b,j) = Tjbbj(j1,b1,b,j)
#
      ENDPARDO j1, b1, b, j 
#
      PARDO i, i1, b, b1
#
            REQUEST             Vbbii(b,b1,i,i1) i1
            Tiibb(i,i1,b,b1)  = Vbbii(b,b1,i,i1)
            Tiibb(i,i1,b,b1) *= -1.0
#
            DO a
            DO j
               REQUEST             T2ab(a,i1,b,j) j
               REQUEST             Vpiqj(a,i,b1,j)    j
#
               T1iibb(i,i1,b,b1) = T2ab(a,i1,b,j)*Vpiqj(a,i,b1,j)
               Tiibb(i,i1,b,b1) += T1iibb(i,i1,b,b1)
            ENDDO j
            ENDDO a
#
            PREPARE WHIIBB(i,i1,b,b1) = Tiibb(i,i1,b,b1)
#
      ENDPARDO i, i1, b, b1 
#
      PARDO j1, j, a, a1
#
            REQUEST             Vaajj(a,a1,j1,j) j
            Tjjaa(j1,j,a,a1)  = Vaajj(a,a1,j1,j)
            Tjjaa(j1,j,a,a1) *= -1.0
#
            DO b
            DO i
               REQUEST             T2ab(a,i,b,j) j
               REQUEST             Vpiqj(a1,i,b,j1)  j1
#
               T1jjaa(j1,j,a,a1) = T2ab(a,i,b,j)*Vpiqj(a1,i,b,j1)
               Tjjaa(j1,j,a,a1) += T1jjaa(j1,j,a,a1)
            ENDDO i
            ENDDO b
#
            PREPARE WHJJAA(j1,j,a,a1) = Tjjaa(j1,j,a,a1)
#
      ENDPARDO j1, j, a, a1 
#
      PARDO i, a, b, j
#
            REQUEST          Viabj(i,a,b,j) j
            Tiabj(i,a,b,j) = Viabj(i,a,b,j)
#
            DO a1
            DO i1
               REQUEST             T2ab(a1,i1,b,j) j
               REQUEST             VSpipi(a,i,a1,i1)   i1 # +
#
               T1iabj(i,a,b,j)   = VSpipi(a,i,a1,i1)*T2ab(a1,i1,b,j)
               Tiabj(i,a,b,j)   += T1iabj(i,a,b,j)
            ENDDO i1
            ENDDO a1
#
            DO b1
            DO j1
               REQUEST           T2bb(b1,j1,b,j) j
               REQUEST           Vpiqj(a,i,b1,j1)    j1 # +
#
               T1iabj(i,a,b,j) = Vpiqj(a,i,b1,j1)*T2bb(b1,j1,b,j)
               Tiabj(i,a,b,j) += T1iabj(i,a,b,j)
            ENDDO j1
            ENDDO b1
#
            PREPARE WHIABJ(i,a,b,j) = Tiabj(i,a,b,j)
#
      ENDPARDO i, a, b, j 
#
      PARDO j, b, a, i
#
            REQUEST          Viabj(i,a,b,j) j
            Tjbai(j,b,a,i) = Viabj(i,a,b,j)
#
            DO b1
            DO j1
               REQUEST           T2ab(a,i,b1,j1) j1
               REQUEST           VSqjqj(b,j,b1,j1)   j1 # +
#
               T1jbai(j,b,a,i) = VSqjqj(b,j,b1,j1)*T2ab(a,i,b1,j1)
               Tjbai(j,b,a,i) += T1jbai(j,b,a,i)
            ENDDO j1
            ENDDO b1
#
            DO a1
            DO i1
               REQUEST           T2aa(a1,i1,a,i) i
               REQUEST           Vpiqj(a1,i1,b,j)    j # +
#
               T1jbai(j,b,a,i) = Vpiqj(a1,i1,b,j)*T2aa(a1,i1,a,i)
               Tjbai(j,b,a,i) += T1jbai(j,b,a,i)
            ENDDO i1
            ENDDO a1
#
            PREPARE WHJBAI(j,b,a,i) = Tjbai(j,b,a,i)
#
      ENDPARDO j, b, a, i 
#
      execute server_barrier 
#
#     AAAA spin combination. 
#     ---------------------- 
#
      PARDO a, i, i1, i2
#
            REQUEST             VSpipi(i,i1,a,i2) i2
            Tiiai(i,i1,a,i2)  = VSpipi(i,i1,a,i2)
#
            DO i3
               REQUEST             HBAR_iiii(i,i1,i3,i2) i2
               T1iiai(i,i1,a,i2) = HBAR_iiii(i,i1,i3,i2)*St1a(a,i3)
               Tiiai(i,i1,a,i2) -= T1iiai(i,i1,a,i2)
            ENDDO i3
#
            PREPARE HBAR_IAJK_aaaa(i,i1,a,i2) += Tiiai(i,i1,a,i2)
#
      ENDPARDO a, i, i1, i2
#
      PARDO i, i1, a, i2
#
            Tiiai(i,i1,a,i2)  = 0.0  
            TSiiai(i,i2,a,i1) = 0.0
#
            DO a1
#
               REQUEST              T2aa(a,i1,a1,i2) i2
               REQUEST              WHIAAI(i,a1,a,i2) i2
#
               T1iiai(i,i1,a,i2)  = T2aa(a,i1,a1,i2)*LHBAR_ia(i,a1)
               Tiiai(i,i1,a,i2)  -= T1iiai(i,i1,a,i2)
#
               T1iiai(i,i1,a,i2)  = WHIAAI(i,a1,a,i2)*St1a(a1,i1)
               T2iiai(i,i2,a,i1)  = T1iiai(i,i1,a,i2)
#
               Tiiai(i,i1,a,i2)  += T1iiai(i,i1,a,i2)
               TSiiai(i,i2,a,i1) -= T2iiai(i,i2,a,i1)
#
            ENDDO a1
#
            PREPARE HBAR_IAJK_aaaa(i,i1,a,i2) += Tiiai(i,i1,a,i2)
            PREPARE HBAR_IAJK_aaaa(i,i2,a,i1) += TSiiai(i,i2,a,i1)
#
      ENDPARDO i, i1, a, i2
#
      PARDO i, a, a1, a2
#
            REQUEST VSaaai(a2,a,a1,i) i # +
#
            DO i1
               t1pp(a2,i1) = St1a(a2,i1) 
               DO i2
#
                  REQUEST               T2aa(a1,i1,a2,i2) i2
                  tpp(a2,i2)          = St1a(a2,i2) 
#
                  tpppp(a1,i1,a2,i2)  = T2aa(a1,i1,a2,i2) 
                  t1pppp(a1,i1,a2,i2) = St1a(a1,i1)^tpp(a2,i2) 
                  t2pppp(a1,i1,a2,i2) = St1a(a1,i2)^t1pp(a2,i1) 
                  tpppp(a1,i1,a2,i2) += t1pppp(a1,i1,a2,i2) 
                  tpppp(a1,i1,a2,i2) -= t2pppp(a1,i1,a2,i2) 
#
                  T1iiai(i,i1,a,i2)   = tpppp(a1,i1,a2,i2)*VSaaai(a2,a,a1,i)
                  T1iiai(i,i1,a,i2)  *= 0.5
                  PREPARE HBAR_IAJK_aaaa(i,i1,a,i2) += T1iiai(i,i1,a,i2)
#
               ENDDO i2
            ENDDO i1
#
      ENDPARDO i, a, a1, a2
#
      PARDO i, i1, a, i2
#
            Tiiai(i,i1,a,i2)  = 0.0  
            TSiiai(i,i2,a,i1) = 0.0
#
            DO a1
#
               DO i3
#
                  REQUEST               T2aa(a,i2,a1,i3) i3
                  REQUEST               VSpipi(i1,i,a1,i3)   i3 # +
#
                  T1iiai(i,i1,a,i2)   = VSpipi(i1,i,a1,i3)*T2aa(a,i2,a1,i3)
                  T2iiai(i,i2,a,i1)   = T1iiai(i,i1,a,i2)
                  Tiiai(i,i1,a,i2)   += T1iiai(i,i1,a,i2)
                  TSiiai(i,i2,a,i1)  -= T2iiai(i,i2,a,i1)
#
               ENDDO i3
#
            ENDDO a1
#
            PREPARE HBAR_IAJK_aaaa(i,i1,a,i2) += Tiiai(i,i1,a,i2)
            PREPARE HBAR_IAJK_aaaa(i,i2,a,i1) += TSiiai(i,i2,a,i1)
#
      ENDPARDO i, i1, a, i2
#
      PARDO i, i1, a, i2
#
            Tiiai(i,i1,a,i2)  = 0.0  
            TSiiai(i,i2,a,i1) = 0.0
#
            DO b
            DO j
#
               REQUEST              T2ab(a,i2,b,j) j
               REQUEST              Vpiqj(i1,i,b,j)    j # +
#
               T1iiai(i,i1,a,i2)  = Vpiqj(i1,i,b,j)*T2ab(a,i2,b,j)
               Tiiai(i,i1,a,i2)  += T1iiai(i,i1,a,i2)
#
               T2iiai(i,i2,a,i1)  = T1iiai(i,i1,a,i2)
               TSiiai(i,i2,a,i1) -= T2iiai(i,i2,a,i1)
#
            ENDDO j
            ENDDO b
#
            PREPARE HBAR_IAJK_aaaa(i,i1,a,i2) += Tiiai(i,i1,a,i2)
            PREPARE HBAR_IAJK_aaaa(i,i2,a,i1) += TSiiai(i,i2,a,i1)
#
      ENDPARDO i, i1, a, i2
#
#     AABB spin combination. 
#     ---------------------- 
#
      PARDO i, i1, b, j
#
            REQUEST           Vpiqj(i,i1,b,j) j
            Tiibj(i,i1,b,j) = Vpiqj(i,i1,b,j)
#
            DO a
#
               REQUEST            T2ab(a,i1,b,j) j
               REQUEST            WHIABJ(i,a,b,j) j
#
               T1iibj(i,i1,b,j) = T2ab(a,i1,b,j)*LHBAR_ia(i,a)
               Tiibj(i,i1,b,j) += T1iibj(i,i1,b,j)
#
               T1iibj(i,i1,b,j) = WHIABJ(i,a,b,j)*St1a(a,i1)
               Tiibj(i,i1,b,j) += T1iibj(i,i1,b,j)
#
               DO b1
#
                  REQUEST             T2ab(a,i1,b1,j) j
                  REQUEST             Vbbai(b1,b,a,i)   i
#
                  tppqq(a,i1,b1,j)  = T2ab(a,i1,b1,j) 
                  t1ppqq(a,i1,b1,j) = St1a(a,i1)^St1b(b1,j) 
                  tppqq(a,i1,b1,j) += t1ppqq(a,i1,b1,j) 
#
                  T1iibj(i,i1,b,j)  = Vbbai(b1,b,a,i)*tppqq(a,i1,b1,j)
                  Tiibj(i,i1,b,j)  += T1iibj(i,i1,b,j)
#
               ENDDO b1
#
               DO i2
#
                  REQUEST            T2ab(a,i2,b,j) j
                  REQUEST            VSpipi(i1,i,a,i2)  i2 # +
#
                  T1iibj(i,i1,b,j) = VSpipi(i1,i,a,i2)*T2ab(a,i2,b,j)
                  Tiibj(i,i1,b,j) += T1iibj(i,i1,b,j)
#
               ENDDO i2
#
               DO j1
#
                  REQUEST            T2ab(a,i1,b,j1) j1
                  REQUEST            Vpiqj(a,i,j,j1)     j1 # +
#
                  T1iibj(i,i1,b,j) = Vpiqj(a,i,j,j1)*T2ab(a,i1,b,j1)
                  Tiibj(i,i1,b,j) -= T1iibj(i,i1,b,j)
#
               ENDDO j1
#
            ENDDO a
#
            DO j1
#
               REQUEST            HBAR_iijj(i,i1,j1,j) j
#
               T1iibj(i,i1,b,j) = HBAR_iijj(i,i1,j1,j)*St1b(b,j1)
               Tiibj(i,i1,b,j) -= T1iibj(i,i1,b,j)
#
            ENDDO j1
#
            DO b1
#
               REQUEST            WHIIBB(i,i1,b,b1) b1
               T1iibj(i,i1,b,j) = WHIIBB(i,i1,b,b1)*St1b(b1,j)
               Tiibj(i,i1,b,j) -= T1iibj(i,i1,b,j)
#
               DO j2
#
                  REQUEST            T2bb(b1,j2,b,j) j
                  REQUEST            Vpiqj(i1,i,b1,j2)   j2 # +
#
                  T1iibj(i,i1,b,j) = Vpiqj(i1,i,b1,j2)*T2bb(b1,j2,b,j)
                  Tiibj(i,i1,b,j) += T1iibj(i,i1,b,j)
#
               ENDDO j2
#
            ENDDO b1
#
            PREPARE HBAR_IAJK_aabb(i,i1,b,j) = Tiibj(i,i1,b,j)
#
      ENDPARDO i, i1, b, j
#
#     BBAA spin combination. 
#     ---------------------- 
#
#     BBBB spin combination. 
#     ---------------------- 
#
      execute server_barrier 
#
      ENDPROC HBAR_IAJK   
#     -----------------
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
      PROC HBAR_AJIB     
#     --------------
#
#     There are four spin cases to compute:
#     1. H^{aj)_{ib} --> HBAR_AJIB_aaaa  
#     2. H^{AJ)_{IB} --> HBAR_AJIB_bbbb  
#     3. H^{aJ)_{iB} --> HBAR_AJIB_aabb  
#     4. H^{Aj)_{Ib} --> HBAR_AJIB_bbaa  
#     5. H^{Aj)_{iB} --> HBAR_AJIB_iibb   
#     6. H^{aJ)_{Ib} --> HBAR_AJIB_jjaa   
#
#     Note that since I 'always' store arrays in (11|22) form the 
#     notation, although valid, is slightly confusing. The 
#     storage pattern is therefore array(a,b,i,c).   
#
#    ------------------------------------------------------------------------
#
#     AAAA spin combination. 
#     ---------------------- 
#
      PARDO i1, a1, a, i
#
            REQUEST                              Viaai(i1,a1,a,i) i 
            REQUEST                              Vaaii(a,a1,i1,i) i 
            Tiaai(i1,a1,a,i)                   = Vaaii(a,a1,i1,i)
            Tiaai(i1,a1,a,i)                  -= Viaai(i1,a1,a,i)
            Tiaai(i1,a1,a,i)                  *= -1.0
            PREPARE HBAR_AJIB_aaaa(i1,a1,a,i) += Tiaai(i1,a1,a,i)
#
      ENDPARDO i1, a1, a, i
#
      PARDO i, i1, a1, i2  
#
            REQUEST VSpipi(a1,i1,i,i2) i
#
            DO a
               T1iaai(i1,a1,a,i)                  = VSpipi(a1,i1,i,i2)*St1a(a,i2)
               T1iaai(i1,a1,a,i)                 *= -1.0  
               PREPARE HBAR_AJIB_aaaa(i1,a1,a,i) += T1iaai(i1,a1,a,i)
            ENDDO a
#
      ENDPARDO i, i1, a1, i2
#
      PARDO i1, a1, a, a2  
#
            REQUEST  VSaaai(a2,a,a1,i1) i1
#
            DO i 
               T2iaai(i,a,a1,i1)                  = VSaaai(a2,a,a1,i1)*St1a(a2,i)
               T1iaai(i1,a1,a,i)                  = T2iaai(i,a,a1,i1)
               PREPARE HBAR_AJIB_aaaa(i1,a1,a,i) += T1iaai(i1,a1,a,i)
            ENDDO i
#
      ENDPARDO i1, a1, a, a2  
#
      PARDO i, a, a2, i2  
#
            REQUEST               T2aa(a2,i,a,i2) a2 
            tai(a,i2)           = St1a(a,i2)
            T1aiai(a2,i,a,i2)   = St1a(a2,i)^tai(a,i2)
            T1aiai(a2,i,a,i2)  += T2aa(a2,i,a,i2)
#
            DO a1 
            DO i1
#
               REQUEST                              VSpipi(a2,i2,a1,i1) a2 
               Taiai(a1,i2,a2,i1)                 = VSpipi(a2,i2,a1,i1)
               T1iaai(i1,a1,a,i)                  = T1aiai(a2,i,a,i2)*Taiai(a1,i2,a2,i1)
               T1iaai(i1,a1,a,i)                 *= -1.0  
               PREPARE HBAR_AJIB_aaaa(i1,a1,a,i) += T1iaai(i1,a1,a,i)
#
            ENDDO i1
            ENDDO a1
#
      ENDPARDO i, a, a2, i2
#
      PARDO i1, a1, b, j
#
            REQUEST Vpiqj(a1,i1,b,j) j 
#
            DO a
            DO i
#
               REQUEST                              T2ab(a,i,b,j) j 
               T1iaai(i1,a1,a,i)                  = Vpiqj(a1,i1,b,j)*T2ab(a,i,b,j)
               PREPARE HBAR_AJIB_aaaa(i1,a1,a,i) += T1iaai(i1,a1,a,i)
#
            ENDDO i
            ENDDO a
#
      ENDPARDO i1, a1, b, j
#
#     BBBB spin combination. 
#     ---------------------- 
#
#     AABB spin combination. 
#     ---------------------- 
#
      PARDO i, a, b, j
#
            REQUEST                           Viabj(i,a,b,j) j
            Tiabj(i,a,b,j)                  = Viabj(i,a,b,j)
            PREPARE HBAR_AJIB_aabb(i,a,b,j)+= Tiabj(i,a,b,j)
#
      ENDPARDO i, a, b, j 
#
      PARDO i, a, b, b1  
#
            REQUEST Vbbai(b1,b,a,i) i 
#
            DO j
#
               Tjbai(j,b,a,i)                   = Vbbai(b1,b,a,i)*St1b(b1,j)
               T2jbai(j,b,a,i)                  = Tjbai(j,b,a,i)
               Tiabj(i,a,b,j)                   = Tjbai(j,b,a,i)  
               PREPARE NJBAI(j,b,a,i)          += T2jbai(j,b,a,i)
               PREPARE HBAR_AJIB_aabb(i,a,b,j) += Tiabj(i,a,b,j)
#
            ENDDO j
#
      ENDPARDO i, a, b, b1  
#
      PARDO b, i, a, j
#
            Tiabj(i,a,b,j)  = 0.0  
#
            DO j1
#
               REQUEST           Vpiqj(a,i,j,j1) j 
               T1iabj(i,a,b,j) = Vpiqj(a,i,j,j1)*St1b(b,j1)
               Tiabj(i,a,b,j) -= T1iabj(i,a,b,j)
#
            ENDDO j1
#
            PREPARE HBAR_AJIB_aabb(i,a,b,j) += Tiabj(i,a,b,j)
#
      ENDPARDO b, i, a, j 
#
      PARDO j, b, b1, j1
#
            REQUEST              T2bb(b1,j,b,j1) b 
#
            tbj(b,j1)          = St1b(b,j1)
            T2bjbj(b1,j,b,j1)  = St1b(b1,j)^tbj(b,j1)
            T2bjbj(b1,j,b,j1) += T2bb(b1,j,b,j1)
#
            DO i
            DO a
#
               REQUEST                            Vpiqj(a,i,b1,j1) a 
               Tiabj(i,a,b,j)                   = T2bjbj(b1,j,b,j1)*Vpiqj(a,i,b1,j1)
               Tiabj(i,a,b,j)                  *= -1.0  
               PREPARE HBAR_AJIB_aabb(i,a,b,j) += Tiabj(i,a,b,j)
#
            ENDDO a
            ENDDO i
#
      ENDPARDO j, b, b1, j1 
#
      PARDO i1, a1, b, j
#
            REQUEST T2ab(a1,i1,b,j) a1 
#
            DO a
            DO i
#
               REQUEST                            VSpipi(a1,i1,a,i) a1 
               Tiabj(i,a,b,j)                   = T2ab(a1,i1,b,j)*VSpipi(a1,i1,a,i)
               PREPARE HBAR_AJIB_aabb(i,a,b,j) += Tiabj(i,a,b,j)
#
            ENDDO i
            ENDDO a
#
      ENDPARDO i1, a1, b, j 
#
#     BBAA spin combination. 
#     ---------------------- 
#
#     ABAB spin combination. 
#     ---------------------- 
#
      PARDO i1, b1, b, i
#
            REQUEST                              Vbbii(b,b1,i1,i) i 
            Tiibb(i1,i,b,b1)                   = Vbbii(b,b1,i1,i)
            Tiibb(i1,i,b,b1)                  *= -1.0
            PREPARE HBAR_AJIB_iibb(i1,i,b,b1) += Tiibb(i1,i,b,b1)
#
      ENDPARDO i1, b1, b, i
#
      PARDO b1, b, a1, i1  
#
            REQUEST Vbbai(b1,b,a1,i1) i1 
#
            DO i
               T1iibb(i1,i,b,b1)                  = Vbbai(b1,b,a1,i1)*St1a(a1,i)
               T2iibb(i1,i,b,b1)                  = T1iibb(i1,i,b,b1)  
               T2iibb(i1,i,b,b1)                 *= -1.0 
               PREPARE NIIBB(i1,i,b,b1)          += T1iibb(i1,i,b,b1)
               PREPARE HBAR_AJIB_iibb(i1,i,b,b1) += T2iibb(i1,i,b,b1)
            ENDDO i
#
      ENDPARDO b1, b, a1, i1  
#
      PARDO i1, b1, b, i
#
            Tiibb(i1,i,b,b1) = 0.0 
#
            DO j1
               REQUEST             Vpiqj(i,i1,b1,j1) i 
               T1iibb(i1,i,b,b1) = Vpiqj(i,i1,b1,j1)*St1b(b,j1)
               Tiibb(i1,i,b,b1) += T1iibb(i1,i,b,b1) 
            ENDDO j1
#
            PREPARE HBAR_AJIB_iibb(i1,i,b,b1) += Tiibb(i1,i,b,b1)
#
      ENDPARDO i1, b1, b, i
#
      PARDO i, b, j1, a1  
#
            REQUEST              T2ab(a1,i,b,j1) j1 
            Taibj(a1,i,b,j1)   = St1a(a1,i)^St1b(b,j1)
            T1aibj(a1,i,b,j1)  = T2ab(a1,i,b,j1)
            T1aibj(a1,i,b,j1) += Taibj(a1,i,b,j1)
#
            DO i1
            DO b1
#
               REQUEST                              Vpiqj(a1,i1,b1,j1) j1 
               T1iibb(i1,i,b,b1)                  = T1aibj(a1,i,b,j1)*Vpiqj(a1,i1,b1,j1)
               PREPARE HBAR_AJIB_iibb(i1,i,b,b1) += T1iibb(i1,i,b,b1)
#
            ENDDO b1
            ENDDO i1
#
      ENDPARDO i, b, j1, a1  
#
#     BABA spin combination. 
#     ---------------------- 
#
      PARDO j1, a1, a, b1  
#
            REQUEST Vaabj(a1,a,b1,j1) a 
#
            DO j
               T2jjaa(j1,j,a,a1)                  = Vaabj(a1,a,b1,j1)*St1b(b1,j)
               PREPARE NJJAA(j1,j,a,a1)          += T2jjaa(j1,j,a,a1)
            ENDDO j
#
      ENDPARDO j1, a1, a, b1  
#
      ENDPROC HBAR_AJIB     
#     -----------------
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
      PROC HBAR_ABCI    
#     --------------
#
#     There are four spin cases to compute:
#     1. H^{ab)_{ci} --> HBAR_ABCI_aaaa  
#     2. H^{AB)_{CI} --> HBAR_ABCI_bbbb  
#     3. H^{aB)_{cI} --> HBAR_ABCI_aabb  
#     4. H^{Ab)_{Ci} --> HBAR_ABCI_bbaa  
#
#     Note that since I 'always' store arrays in (11|22) form the 
#     notation, although valid, is slightly confusing. The 
#     storage pattern is therefore array(a,b,i,c).   
#
#    ------------------------------------------------------------------------
#
#     AAAA spin component. 
#     -------------------- 
#
#     BBBB spin component. 
#     -------------------- 
#
#     AABB spin component. 
#     -------------------- 
#
      PARDO a, a1, b, j 
#
            REQUEST                             Vaabj(a,a1,b,j) a  
            PREPARE HBAR_ABCI_aabb(a,a1,b,j) += Vaabj(a,a1,b,j) 
#
      ENDPARDO a, a1, b, j 
#
      PARDO a, a1, a3, i2
#
            REQUEST VSaaai(a,a1,a3,i2) a 
#
            DO b
            DO j
#
               REQUEST                             T2ab(a3,i2,b,j) j
               Tppqq(a1,a,b,j)                   = VSaaai(a,a1,a3,i2)*T2ab(a3,i2,b,j)
               PREPARE HBAR_ABCI_aabb(a1,a,b,j) += Tppqq(a1,a,b,j)
#
            ENDDO j
            ENDDO b
#
      ENDPARDO a, a1, a3, i2
#
      PARDO a, a1, b, j
#
            REQUEST Vaabj(a,a1,b,j) j
#
            DO b1
            DO j1
#
               REQUEST                               T2bb(b1,j1,b,j) j
               Tppqq(a1,a,b1,j1)                   = Vaabj(a,a1,b,j)*T2bb(b1,j1,b,j)
               PREPARE HBAR_ABCI_aabb(a1,a,b1,j1) += Tppqq(a1,a,b1,j1)
#
            ENDDO j1
            ENDDO b1
#
      ENDPARDO a, a1, b, j
#
      PARDO a1, a, j, b
#
            Tppqq(a1,a,b,j) = 0.0
#
            DO i
#
               REQUEST            T2ab(a1,i,b,j) j
               REQUEST            WHIABJ(i,a,b,j) j
               REQUEST            NJBAI(j,b,a,i) i
#
               T1ppqq(a1,a,b,j) = T2ab(a1,i,b,j)*LHBAR_ia(i,a)
               Tppqq(a1,a,b,j) -= T1ppqq(a1,a,b,j)
#
               T2ppqq(a1,a,b,j) = WHIABJ(i,a,b,j)*St1a(a1,i)
               Tppqq(a1,a,b,j) -= T2ppqq(a1,a,b,j)
#
               T3ppqq(a1,a,b,j) = NJBAI(j,b,a,i)*St1a(a1,i)
               Tppqq(a1,a,b,j) -= T3ppqq(a1,a,b,j)
#
            ENDDO i
#
            PREPARE HBAR_ABCI_aabb(a1,a,b,j) += Tppqq(a1,a,b,j)
#
      ENDPARDO a1, a, j, b
#
      PARDO a, a1, j, j1
#
            REQUEST             WHJJAA(j1,j,a1,a) a
            REQUEST             NJJAA(j1,j,a1,a) a
            tqqpp(j1,j,a1,a)  = WHJJAA(j1,j,a1,a) 
            tqqpp(j1,j,a1,a) -= NJJAA(j1,j,a1,a) 
#
            DO b
               Tppqq(a1,a,b,j)                   = tqqpp(j1,j,a1,a)*St1b(b,j1)
               PREPARE HBAR_ABCI_aabb(a1,a,b,j) += Tppqq(a1,a,b,j)
            ENDDO b
#
      ENDPARDO a, a1, j, j1
#
      PARDO a1, b, j1, i 
#
            REQUEST              T2ab(a1,i,b,j1) j1
            t1ppqq(a1,i,b,j1)  = St1a(a1,i)^St1b(b,j1)  
            t1ppqq(a1,i,b,j1) += T2ab(a1,i,b,j1)  
            t0pqqp(a1,b,j1,i) = t1ppqq(a1,i,b,j1)

            DO a
            DO j
#   
               REQUEST                             HBAR_JKIA_aabb(j1,j,i,a) j1
#####          Tppqq(a1,a,b,j)                   = t1ppqq(a1,i,b,j1)*Vpiqj(a,i,j,j1)
####           Tppqq(a1,a,b,j)                   = t1ppqq(a1,i,b,j1)*HBAR_JKIA_aabb(j1,j,i,a)
               tqpqp(j1,i,j,a)   = HBAR_JKIA_aabb(j1,j,i,a)
               Tppqq(a1,a,b,j) = t0pqqp(a1,b,j1,i)*tqpqp(j1,i,j,a) 
               PREPARE HBAR_ABCI_aabb(a1,a,b,j) += Tppqq(a1,a,b,j)
#
            ENDDO j 
            ENDDO a 
#
      ENDPARDO a1, b, j1, i 
#
      PARDO a, b1, b, i
#
            REQUEST Vbbai(b,b1,a,i) a  
#
            DO j
            DO a1
               REQUEST                              T2ab(a1,i,b,j) j
               Tppqq(a1,a,b1,j)                   = T2ab(a1,i,b,j)*Vbbai(b,b1,a,i)
               Tppqq(a1,a,b1,j)                  *= -1.0
               PREPARE HBAR_ABCI_aabb(a1,a,b1,j) += Tppqq(a1,a,b1,j)
            ENDDO a1
            ENDDO j
#
      ENDPARDO a, b1, b, i
#
# debug
# debug
#
#     Done AABB spin component. 
#     ------------------------- 
#
#     BBAA spin component. 
#     -------------------- 
#
#     Done AABB spin component. 
#     ------------------------- 
#
      execute server_barrier
#
      ENDPROC HBAR_ABCI    
#
      PROC AO4VIR
#     ----------- 
#
      create Mxj
      create Mxi
#
      execute sip_barrier
#
      PARDO j,sigma
#
            t1xj(sigma,j)=0.0
#
            do b
               txj(sigma,j)=St1b(b,j)*ca(sigma,b)
               t1xj(sigma,j)+=txj(sigma,j)
            enddo b
# 
            put Mxj(sigma,j)=t1xj(sigma,j)
#
      ENDPARDO j, sigma
#
      PARDO i, sigma
#
            t1xi(sigma,i)=0.0
#
            do a
               txi(sigma,i)=St1a(a,i)*ca(sigma,a)
               t1xi(sigma,i)+=txi(sigma,i)
            enddo a
#
            put Mxi(sigma,i)=t1xi(sigma,i)
#
      ENDPARDO i, sigma
#
      execute sip_barrier
#
#    Contract AOINT with half back transformed Amplitudes
#    ----------------------------------------------------
#
      PARDO mu,lambda,nu
#
      allocate Lxxxj(mu,lambda,nu,*)
      allocate Lxxxi(mu,lambda,nu,*)
#
      DO sigma
#
         compute_integrals aoint(mu,lambda,nu,sigma)
#
         DO j
#
            get Mxj(sigma,j)
#
            tmxxxj(mu,lambda,nu,j)=aoint(mu,lambda,nu,sigma)*Mxj(sigma,j)
            Lxxxj(mu,lambda,nu,j)+=tmxxxj(mu,lambda,nu,j)
#
         ENDDO j
####
         DO i
#
            get Mxi(sigma,i)
#
            tmxxxi(mu,lambda,nu,i)=aoint(mu,lambda,nu,sigma)*Mxi(sigma,i)
            Lxxxi(mu,lambda,nu,i)+=tmxxxi(mu,lambda,nu,i)
#
         ENDDO i
####
      enddo sigma
#
      DO j
         prepare Mxxxj(mu,lambda,nu,j)=Lxxxj(mu,lambda,nu,j)
      ENDDO j
      DO i
         prepare Mxxxi(mu,lambda,nu,i)=Lxxxi(mu,lambda,nu,i)
      ENDDO i
#
      deallocate Lxxxi(mu,lambda,nu,*)
      deallocate Lxxxj(mu,lambda,nu,*)
#
      ENDPARDO mu,lambda,nu
#
      execute server_barrier
#
#  2ND STAGE OF TRANSFORMATION
#  --------------------------- 
#
      PARDO mu, nu, j 
#
            allocate Lxxbj(mu,nu,*,j)
#
            DO lambda  
#
               request Mxxxj(mu,nu,lambda,j) j
#
               DO b
#
                  tmxxbj(mu,nu,b,j)=Mxxxj(mu,nu,lambda,j)*ca(lambda,b)
                  lxxbj(mu,nu,b,j)+=tmxxbj(mu,nu,b,j)
#
               ENDDO b
            ENDDO lambda  
#
            DO b
               prepare Mxxbj(mu,nu,b,j)=lxxbj(mu,nu,b,j)
            ENDDO b
#
            deallocate Lxxbj(mu,nu,*,j)
#
      ENDPARDO mu, nu, j 
#
      PARDO mu, nu, i 
#
            allocate Lxxai(mu,nu,*,i)
#
            DO lambda  
#
               request Mxxxi(mu,nu,lambda,i) i
#
               DO a
#
                  tmxxai(mu,nu,a,i)=Mxxxi(mu,nu,lambda,i)*ca(lambda,a)
                  lxxai(mu,nu,a,i)+=tmxxai(mu,nu,a,i)
#
               ENDDO a
            ENDDO lambda  
#
            DO a
               prepare Mxxai(mu,nu,a,i)=lxxai(mu,nu,a,i)
            ENDDO a
#
            deallocate Lxxai(mu,nu,*,i)
#
      ENDPARDO mu, nu, i 
#
      execute server_barrier
#
#  END 2ND STAGE OF TRANSFORMATION
#  ------------------------------- 
#
      pardo mu, b, j
#
         allocate Lxabj(mu,*,b,j)
#
         do lambda
#
            request Mxxbj(mu,lambda,b,j) j
#
            do a
#
               tmxabj(mu,a,b,j)=Mxxbj(mu,lambda,b,j)*ca(lambda,a)
               lxabj(mu,a,b,j)+=tmxabj(mu,a,b,j)
#
            enddo a
#
         enddo lambda
#
         do a
            prepare Mxabj(mu,a,b,j)=lxabj(mu,a,b,j)
         enddo a
#
         deallocate Lxabj(mu,*,b,j)
#
      endpardo mu, b, j
#
      pardo mu, a, i
#
            allocate Lxbai(mu,*,a,i)
#
            do lambda
#
               request Mxxai(mu,lambda,a,i) i
#
               do b
#
                  tmxbai(mu,b,a,i)=Mxxai(mu,lambda,a,i)*ca(lambda,b)
                  lxbai(mu,b,a,i)+=tmxbai(mu,b,a,i)
#
               enddo b
#
            enddo lambda
#
            do b
               prepare Mxbai(mu,b,a,i)=lxbai(mu,b,a,i)
            enddo b
#
            deallocate Lxbai(mu,*,a,i)
#
      endpardo mu, a, i
#
      pardo mu, a, i
#
            allocate Lxaai(mu,*,a,i)
#
            do lambda
#
               request Mxxai(mu,lambda,a,i) i
#
               do a1
#
                  tmxaai(mu,a1,a,i)=Mxxai(mu,lambda,a,i)*ca(lambda,a1)
                  lxaai(mu,a1,a,i)+=tmxaai(mu,a1,a,i)
#
               enddo a1
#
            enddo lambda
#
            do a1
               prepare Mxaai(mu,a1,a,i)=lxaai(mu,a1,a,i)
            enddo a1
#
            deallocate Lxaai(mu,*,a,i)
#
      endpardo mu, a, i
#
      pardo mu, b, j
#
            allocate Lxbbj(mu,*,b,j)
#
            do lambda
#
               request Mxxbj(mu,lambda,b,j) j
#
               do b1
#
                  tmxbbj(mu,b1,b,j)=Mxxbj(mu,lambda,b,j)*ca(lambda,b1)
                  lxbbj(mu,b1,b,j)+=tmxbbj(mu,b1,b,j)
#
               enddo b1
#
            enddo lambda
#
            do b1
               prepare Mxbbj(mu,b1,b,j)=lxbbj(mu,b1,b,j)
            enddo b1
#
            deallocate Lxbbj(mu,*,b,j)
#
      endpardo mu, b, j
#
      execute server_barrier
#
#  END 3RD STAGE OF TRANSFORMATION
#  ------------------------------- 
#
      pardo a, b, j
#
         allocate Laabj(*,a,b,j)
#
         do mu
#
            request Mxabj(mu,a,b,j) j
#
            do a1
#
               tmaabj(a1,a,b,j)=Mxabj(mu,a,b,j)*ca(mu,a1)
               Laabj(a1,a,b,j)+=tmaabj(a1,a,b,j)
#
            enddo a1
#
         enddo mu
#
         do a1
            prepare HBAR_ABCI_aabb(a1,a,b,j)+=Laabj(a1,a,b,j)
         enddo a1
#
         deallocate Laabj(*,a,b,j)
#
      endpardo a, b, j
#
#    ALPHA-ALPHA spin combination
#
      ENDPROC AO4VIR
#     -----------------
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
#    BEGIN MAIN HBAR PROGRAM 
#
#    ------------------------------------------------------------------------
#
     PROC HBAR 
#    --------- 
#
     execute sip_barrier 
     allocate LHBAR_ii(*,*) 
     allocate LHBAR_ia(*,*) 
     allocate LHBAR_jb(*,*) 
     allocate LHBAR_aa(*,*) 
     execute server_barrier 
#
     CALL HBAR_AB # COMPARES WITH ACES  
     CALL HBAR_IJ # COMPARES WITH ACES  
     CALL HBAR_IB # COMPARES WITH ACES 
     execute sip_barrier 
     delete HBAR_ii 
    #delete HBAR_ia 
    #delete HBAR_jb 
# 
     CALL HBAR_IJKL 
     CALL HBAR_JKIA 
     execute server_barrier 
     CALL HBAR_IAJK
#
     CALL HBAR_AIBC 
     CALL HBAR_AJIB 
     execute server_barrier
     CALL HBAR_ABCI 
#
     call AO4VIR
     execute server_barrier

     PARDO a, a1, a2, i 
           REQUEST                             HBAR_AIBC_aabb(a,a1,i,a2) a 
           REQUEST                             HBAR_AIBC_aabb(a,a2,i,a1) a 
           tpppp(a,a1,i,a2)                  = HBAR_AIBC_aabb(a,a1,i,a2) 
           t1pppp(a,a1,i,a2)                 = HBAR_AIBC_aabb(a,a2,i,a1) 
           tpppp(a,a1,i,a2)                 -= t1pppp(a,a1,i,a2) 
           PREPARE HBAR_AIBC_aaaa(a,a1,i,a2) = tpppp(a,a1,i,a2) 
     ENDPARDO a, a1, a2, i 

     PARDO a, a1, a2, i 
           REQUEST                             HBAR_ABCI_aabb(a,a1,a2,i) a 
           REQUEST                             HBAR_ABCI_aabb(a2,a1,a,i) a 
           tpppp(a,a1,a2,i)                  = HBAR_ABCI_aabb(a,a1,a2,i) 
           t1pppp(a,a1,a2,i)                 = HBAR_ABCI_aabb(a2,a1,a,i) 
           tpppp(a,a1,a2,i)                 -= t1pppp(a,a1,a2,i) 
           PREPARE HBAR_ABCI_aaaa(a,a1,a2,i) = tpppp(a,a1,a2,i) 
     ENDPARDO a, a1, a2, i 
#
     ENDPROC HBAR 
#    ------------ 
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
      PROC READ_AMP
#     -------------
#
      execute list_to_blocks REE

      execute list_to_blocks R1A_VECS
      execute list_to_blocks R2AA_VECS
      execute list_to_blocks R2AB_VECS

      execute list_to_blocks HBAR_ia
      execute list_to_blocks HBAR_jb

      execute list_to_blocks t1a
      execute list_to_blocks t1b
      execute list_to_blocks T2aa
      execute list_to_blocks T2ab
      execute list_to_blocks T2bb

      execute list_to_blocks A1a
      execute list_to_blocks A2aa
      execute list_to_blocks A2ab
#
     #execute list_to_blocks VSpipi(p,i,p1,i1)
     #execute list_to_blocks Vpiqj(p,i,q ,j )

     #execute list_to_blocks Vaaii
     #execute list_to_blocks Viaai
     #execute list_to_blocks Vaaai

      execute server_barrier
      execute read_list_to_blocks
      allocate St1a(*,*) 
      allocate St1b(*,*) 
      execute server_barrier
#
# Watson
#
      DELETE  HBAR_ia
      DELETE  HBAR_jb

      PARDO  a, i
      DO kroot

         GET  R1A_VECS (a,i,kroot)

         IF  kroot == 1
             tai (a,i) = R1A_VECS (a,i,kroot)
             PUT  VSTART1A1 (a,i) = tai (a,i)
             PUT  VSTART1B1 (a,i) = tai (a,i)
         ENDIF

         IF  kroot == 2
             tai (a,i) = R1A_VECS (a,i,kroot)
             PUT  VSTART1A2 (a,i) = tai (a,i)
             PUT  VSTART1B2 (a,i) = tai (a,i)
         ENDIF

         IF  kroot == 3
             tai (a,i) = R1A_VECS (a,i,kroot)
             PUT  VSTART1A3 (a,i) = tai (a,i)
             PUT  VSTART1B3 (a,i) = tai (a,i)
         ENDIF

         IF  kroot == 4
             tai (a,i) = R1A_VECS (a,i,kroot)
             PUT  VSTART1A4 (a,i) = tai (a,i)
             PUT  VSTART1B4 (a,i) = tai (a,i)
         ENDIF

         IF  kroot == 5
             tai (a,i) = R1A_VECS (a,i,kroot)
             PUT  VSTART1A5 (a,i) = tai (a,i)
             PUT  VSTART1B5 (a,i) = tai (a,i)
         ENDIF

         IF  kroot == 6
             tai (a,i) = R1A_VECS (a,i,kroot)
             PUT  VSTART1A6 (a,i) = tai (a,i)
             PUT  VSTART1B6 (a,i) = tai (a,i)
         ENDIF

         IF  kroot == 7
             tai (a,i) = R1A_VECS (a,i,kroot)
             PUT  VSTART1A7 (a,i) = tai (a,i)
             PUT  VSTART1B7 (a,i) = tai (a,i)
         ENDIF

         IF  kroot == 8
             tai (a,i) = R1A_VECS (a,i,kroot)
             PUT  VSTART1A8 (a,i) = tai (a,i)
             PUT  VSTART1B8 (a,i) = tai (a,i)
         ENDIF

         IF  kroot == 9
             tai (a,i) = R1A_VECS (a,i,kroot)
             PUT  VSTART1A9 (a,i) = tai (a,i)
             PUT  VSTART1B9 (a,i) = tai (a,i)
         ENDIF

         IF  kroot == 10
             tai (a,i) = R1A_VECS (a,i,kroot)
             PUT  VSTART1A10 (a,i) = tai (a,i)
             PUT  VSTART1B10 (a,i) = tai (a,i)
         ENDIF

         IF  kroot == 11
             tai (a,i) = R1A_VECS (a,i,kroot)
             PUT  VSTART1A11 (a,i) = tai (a,i)
             PUT  VSTART1B11 (a,i) = tai (a,i)
         ENDIF

         IF  kroot == 12
             tai (a,i) = R1A_VECS (a,i,kroot)
             PUT  VSTART1A12 (a,i) = tai (a,i)
             PUT  VSTART1B12 (a,i) = tai (a,i)
         ENDIF

      ENDDO kroot
      ENDPARDO  a, i

      PARDO  a, i, a1, i1
         DO kroot
            IF kroot == 1
               REQUEST  R2AA_VECS (a,i,a1,i1,kroot) kroot
               taiai (a,i,a1,i1) = R2AA_VECS (a,i,a1,i1,kroot)
               PREPARE  VCE2AA   (a,i,a1,i1) = taiai (a,i,a1,i1)
               PREPARE  VCACT2AA (a,i,a1,i1) = taiai (a,i,a1,i1)
            ENDIF
         ENDDO kroot

      ENDPARDO  a, i, a1, i1

      PARDO  a, i, b, j
         DO kroot
            if kroot == 1
               REQUEST  R2AB_VECS (a,i,b,j,kroot) kroot
               taibj (a,i,b,j) = R2AB_VECS (a,i,b,j,kroot)
               PREPARE  VCE2AB   (a,i,b,j) = taibj (a,i,b,j)
               PREPARE  VCACT2AB (a,i,b,j) = taibj (a,i,b,j)
            ENDIF
         ENDDO kroot
      ENDPARDO  a, i, b, j

     #execute print_scalar etemp 
     #execute get_my_rank rank
     #execute print_scalar etemp 
     #if rank == 0.0 
         execute print_scalar etemp 
         DO a
         DO i 
            GET         t1a(a,i) 
            St1a(a,i) = t1a(a,i)
         ENDDO i 
         ENDDO a 
         DO b 
         DO j
            GET         t1b(b,j)
            St1b(b,j) = t1b(b,j)      
         ENDDO j 
         ENDDO b 
     #endif # rank
      execute server_barrier
     #execute print_scalar etemp 
     #execute broadcast_array St1a
     #execute broadcast_array St1b  
     #execute print_scalar etemp 

      execute sip_barrier
      CREATE  HBAR_ia
      CREATE  HBAR_jb
#
      ENDPROC READ_AMP
#     ---------------
#
# ---------------------------------------------------------------------------- 
#
#-------------------------------------------------------------------------
#
#     --------------------
      PROC  LEFT_FACTORIZE
#     --------------------
#
#
     PARDO i1, b, i, j
           T1pqpq(i1,b,i,j)         = 0.0
           PREPARE Njjai(i1,b,i,j) = T1pqpq(i1,b,i,j)
           PREPARE Niibj(i1,b,i,j) = T1pqpq(i1,b,i,j)
     ENDPARDO i1, b, i, j

     PARDO i, i1, i2, a
           T1pppp(i1,a,i,i2)        = 0.0
           prepare Niiai(i1,a,i,i2) = T1pppp(i1,a,i,i2)
     ENDPARDO i, i1, i2, a

     PARDO i, i1, j, j1
           tiijj(i,i1,j,j1) = 0.0
           put Niijj(i,i1,j,j1) = tiijj(i,i1,j,j1)
     ENDPARDO i, i1, j, j1

     PARDO i, i1, i2, i3
           tiiii(i,i1,i2,i3) = 0.0
           PUT Niiii(i,i1,i2,i3) = tiiii(i,i1,i2,i3)
     ENDPARDO i, i1, i2, i3

     EXECUTE  SIP_BARRIER
     EXECUTE  SERVER_BARRIER
#
#    Form Half back transformed cluster arrays  
#    -----------------------------------------
#
     PARDO a1, i1, i
#
           allocate LLaiai(*,i,a1,i1)
#
           DO a
              REQUEST              VCACT2AA(a,i,a1,i1) i1
              LLaiai(a,i,a1,i1)  = VCACT2AA(a, i,a1,i1)
              LLaiai(a,i,a1,i1) *= 2.0
           ENDDO a
#
           DO lambda
              Zaa(lambda,i,a1,i1) = 0.0
              DO a
                 Txiai(lambda,i,a1,i1) = LLaiai(a,i,a1,i1)*ca(lambda,a)
                 Zaa(lambda,i,a1,i1)  += Txiai(lambda,i,a1,i1)
              ENDDO a
              PREPARE T1AO_aa(lambda,i,a1,i1) = Zaa(lambda,i,a1,i1)
           ENDDO lambda
#
           deallocate LLaiai(*,i,a1,i1)
#
     ENDPARDO a1, i1, i
#
     PARDO b, j, i
#
           allocate LLaibj(*,i,b,j)
#
           DO a
              REQUEST           VCACT2AB(a,i,b,j) j
              LLaibj(a,i,b,j) = VCACT2AB(a,i,b,j)
           ENDDO a
#
           DO lambda
              Zab(lambda,i,b,j) = 0.0
              DO a
                 Txibj(lambda,i,b,j) = LLaibj(a,i,b,j)*ca(lambda,a)
                 Zab(lambda,i,b,j)  += Txibj(lambda,i,b,j)
              ENDDO a
              PREPARE T1AO_ab(lambda,i,b,j) = Zab(lambda,i,b,j)
           ENDDO lambda

           deallocate LLaibj(*,i,b,j)

     ENDPARDO b, j, i
#
#
#                 cb  ij
#     Form F   = t   l
#           ab    ij  ca
#
#
#       ALPHA
#       -----
#
#          Alpha - Alpha part
#
#
      PARDO  i, i1, a1, a2

         REQUEST              VCACT2AA (a2,i,a1,i1) i
         tpppp (i1,a2,i,a1) = VCACT2AA (a2,i,a1,i1)

         DO a
            REQUEST          T2AA (a,i1,a2,i) a
            taa    (a,a1)  = T2AA (a,i1,a2,i) * tpppp (i1,a2,i,a1)
            taa    (a,a1) *= 0.5
            LFae_a (a,a1) -= taa (a,a1)
         ENDDO a

      ENDPARDO  i, i1, a1, a2
#
#
#          Alpha - Beta part
#
#
      PARDO  i, j, a1, b

         REQUEST            VCACT2AB (a1,i,b,j) j
         tpppp (i,b,j,a1) = VCACT2AB (a1,i,b,j)

         DO a
            REQUEST          T2AB (a,i,b,j) a
            taa    (a,a1)  = T2AB (a,i,b,j) * tpppp (i,b,j,a1)
            LFae_a (a,a1) -= taa (a,a1)
         ENDDO a

      ENDPARDO  i, j, a1, b
#
#
#                 ab  ij
#     Form F   = t   l
#           ij    ij  ab
#
#
#       ALPHA
#       -----
#
#          Alpha - Alpha part
#
#
      PARDO  i1, i2, a, a1

         REQUEST             VCACT2AA (a,i2,a1,i1) i1
         DO i
            REQUEST             T2AA (a,i2,a1,i) i
            tpppp (i,a,i2,a1) = T2AA (a,i2,a1,i)

            tii    (i,i1)  = tpppp (i,a,i2,a1) * VCACT2AA (a,i2,a1,i1)
            tii    (i,i1) *= 0.5
            LFmi_a (i,i1) += tii (i,i1)
         ENDDO i

      ENDPARDO  i1, i2, a, a1
#
#
#          Alpha - Beta part
#
#
      PARDO  i1, j, a, b

         REQUEST            VCACT2AB (a,i1,b,j) j
         tpppp (a,b,j,i1) = VCACT2AB (a,i1,b,j)

         DO i
            REQUEST            T2AB (a,i,b,j) i
            tiabj  (i,a,b,j) = T2AB (a,i,b,j)
            tii    (i,i1)    = tiabj (i,a,b,j) * tpppp (a,b,j,i1)
            LFmi_a (i,i1)   += tii (i,i1)
         ENDDO i

      ENDPARDO  i1, j, a, b
#
#
#       BETA 
#       ----
#
#          Beta - Beta part
#
#
      PARDO  j1, j2, b, b1

         REQUEST  VCACT2AA (b,j2,b1,j1) j1
         DO j
            REQUEST              T2BB (b,j2,b1,j) j
            tqqqq  (j,b,j2,b1) = T2BB (b,j2,b1,j)
            tjj    (j,j1)      = tqqqq (j,b,j2,b1) * VCACT2AA (b,j2,b1,j1)
            tjj    (j,j1)     *= 0.5
            LFmi_b (j,j1)     += tjj (j,j1)
         ENDDO j

      ENDPARDO  j1, j2, b, b1
#     
#
#          Beta - Alpha part
#
#
      PARDO  i, j1, a, b

         REQUEST  VCACT2AB (a,i,b,j1) j1
         DO j
            REQUEST            T2AB (a,i,b,j) i
            tqppq  (j,a,i,b) = T2AB (a,i,b,j)
            tjj    (j,j1)    = tqppq (j,a,i,b) * VCACT2AB (a,i,b,j1)
            LFmi_b (j,j1)   += tjj (j,j1)
         ENDDO j

      ENDPARDO  i, j1, a, b
#
#
#                     -               -
#           ij    ij |  1   cd    c d  |
#     Form N   = l   | --- t   + t t   |
#           kl    cd |  2   kl    k l  |
#                     -               -
#
#       ALPHA - ALPHA
#       -------------
#
      PARDO  i2, i3, a, a1

         ALLOCATE l2aiai (a,i2,a1,i3)
         REQUEST  T2AA   (a,i2,a1,i3) i3

         tai    (a,i2)        = ST1A (a,i2)
         t1ai   (a,i3)        = ST1A (a,i3)
         t1aiai (a,i2,a1,i3)  = tai  (a,i2) ^ ST1A (a1,i3)
         t2aiai (a,i2,a1,i3)  = t1ai (a,i3) ^ ST1A (a1,i2)
         t1aiai (a,i2,a1,i3) -= t2aiai (a,i2,a1,i3)

         l2aiai  (a,i2,a1,i3)  = T2AA (a,i2,a1,i3)
         l2aiai  (a,i2,a1,i3) += t1aiai (a,i2,a1,i3)
         l2aiai  (a,i2,a1,i3) *= 0.5

         DO i
         DO i1
            REQUEST              VCACT2AA (a,i,a1,i1) i1
            tiiii (i2,i,i3,i1) = VCACT2AA (a,i,a1,i1) * l2aiai (a,i2,a1,i3)
            PUT  Niiii (i2,i,i3,i1) += tiiii (i2,i,i3,i1)
         ENDDO i1
         ENDDO i

         DEALLOCATE l2aiai (a,i2,a1,i3)

      ENDPARDO  i2, i3, a, a1

#      EXECUTE  SIP_BARRIER
#      EXECUTE  SERVER_BARRIER
#      EXECUTE  PRINT_SCALAR  ZERO
#      PARDO  i, i1, i2, i3
#         GET                  Niiii (i,i1,i2,i3)
#         tiiii (i,i1,i2,i3) = Niiii (i,i1,i2,i3)
#         EXECUTE  DUMP_AMP  tiiii
#      ENDPARDO  i, i1, i2, i3
#
#
#       ALPHA - BETA
#       ------------
#        
      PARDO  i2, j1, a, b

         REQUEST  T2AB (a,i2,b,j1) j1
         GET      T1A  (a,i2)
         GET      T1B  (b,j1)

         tai   (a,i2)        = T1A  (a,i2)
         taibj (a,i2,b,j1)   = tai  (a,i2) ^ T1B (b,j1)
         taibj (a,i2,b,j1)  += T2AB (a,i2,b,j1)

         DO i
         DO j
            REQUEST             VCACT2AB (a,i,b,j) j
            tiijj (i,i2,j,j1) = VCACT2AB (a,i,b,j) * taibj (a,i2,b,j1)
            PUT  Niijj (i,i2,j,j1) += tiijj (i,i2,j,j1)
         ENDDO j
         ENDDO i

      ENDPARDO  i2, j1, a, b
#     
#
#
#           ck    d  ij
#     Form N   = t  l
#           ij    k  cd
#
#
#       ALPHA - ALPHA
#       -------------  
#
      PARDO  i, i1, i2, a

         DO a1
            REQUEST  VCACT2AA (a,i,a1,i1) a1
            GET      T1A      (a1,i2)

            tpppp (i,a,i1,i2) = T1A (a1,i2) * VCACT2AA (a,i,a1,i1)
            PREPARE  Niiai (i,a,i1,i2) += tpppp (i,a,i1,i2)
         ENDDO a1

      ENDPARDO  i, i1, i2, a

#      EXECUTE  SIP_BARRIER
#      EXECUTE  SERVER_BARRIER
#      EXECUTE  PRINT_SCALAR  ZERO
#      PARDO  i, i1, i2, a
#         REQUEST  Niiai (i,a,i1,i2) i2
#         tpppp (i,a,i1,i2) = Niiai (i,a,i1,i2)
#         EXECUTE  C2AA_PRINT  tpppp  ZERO
#      ENDPARDO  i, i1, i2, a
#      EXECUTE  SIP_BARRIER
#      EXECUTE  SERVER_BARRIER
#
#
#       ALPHA - BETA
#       ------------  
#
      PARDO  a, i, b, j

         REQUEST  VCACT2AB (a,i,b,j) j
         tpppp (j,a,i,b) = VCACT2AB (a,i,b,j)

         DO j1
            GET  T1B (b,j1)
            tpqpq (j,a,i,j1) = tpppp (j,a,i,b) * T1B (b,j1)
            PREPARE  Njjai (j,a,i,j1) += tpqpq (j,a,i,j1)
         ENDDO j1

      ENDPARDO  a, i, b, j

#      PARDO  i, j, j1, a
#
#         DO b
#            GET               T1B      (b,j1)
#            REQUEST           VCACT2AB (a,i,b,j) b
#
#            tqppq (j,a,i,j1) = VCACT2AB (a,i,b,j) * T1B (b,j1)
#            PREPARE  Njjai (j,a,i,j1) += tqppq (j,a,i,j1)
#         ENDDO b
#      ENDPARDO  i, j, j1, a

      PARDO  i, j, b, a

         REQUEST  VCACT2AB (a,i,b,j) j

         DO i2
            GET                T1A (a,i2)
            tpqpq (i,b,i2,j) = T1A (a,i2) * VCACT2AB (a,i,b,j)
            PREPARE  Niibj (i,b,i2,j) += tpqpq (i,b,i2,j)
         ENDDO i2

      ENDPARDO  i, j, b, a

#      EXECUTE  SERVER_BARRIER
#      EXECUTE  PRINT_SCALAR  ZERO
#      PARDO  j, a, i, j1
#         REQUEST            Njjai (j,a,i,j1) j1
#         tpppp (j,a,i,j1) = Njjai (j,a,i,j1)
#         EXECUTE  C2AB_PRINT  tpppp  ZERO
#      ENDPARDO  j, a, i, j1
#      EXECUTE  SERVER_BARRIER
#      EXECUTE  PRINT_SCALAR  ZERO
#      PARDO  i2, b, i, j
#         REQUEST            Niibj (i2,b,i,j) j
#         tpppp (i2,b,i,j) = Niibj (i2,b,i,j)
#         EXECUTE  C2AB_PRINT  tpppp  ZERO
#      ENDPARDO  i2, b, i, j
#      EXECUTE  SERVER_BARRIER
#
#
#
#          Done computing the intermediates!
#
#
      DO i
      DO i1
         tii(i,i1)        = LFmi_a(i,i1)
         PUT Fmi_a(i,i1) += tii(i,i1)
      ENDDO i1
      ENDDO i
      DO j
      DO j1
         tjj(j,j1)        = LFmi_b(j,j1)
         PUT Fmi_b(j,j1) += tjj(j,j1)
      ENDDO j1
      ENDDO j
      DO a
      DO a1
         taa(a,a1)        = LFae_a(a,a1)
         PUT Fae_a(a,a1) += taa(a,a1)
      ENDDO a1
      ENDDO a
      execute sip_barrier
      execute server_barrier
      DO a
      DO a1
         GET            Fae_a(a,a1)
         taa(a,a1)    = Fae_a(a,a1)
         LFae_a(a,a1) = taa(a,a1) # Fae_a(a,a1) 
      ENDDO a1
      ENDDO a
      DO i
      DO i1
         GET            Fmi_a(i,i1)
         tii(i,i1)    = Fmi_a(i,i1)
         LFmi_a(i,i1) = tii(i,i1) # Fmi_a(i,i1) 
      ENDDO i1
      ENDDO i
      DO j
      DO j1
         GET            Fmi_b(j,j1)
         tjj(j,j1)    = Fmi_b(j,j1)
         LFmi_b(j,j1) = tjj(j,j1) # Fmi_b(j,j1) 
      ENDDO j1
      ENDDO j
      EXECUTE SIP_BARRIER
#
#
#     -----------------------
      ENDPROC  LEFT_FACTORIZE
#-------------------------------------------------------------------------



#-------------------------------------------------------------------------
#
#     --------------
      PROC  L1_PRINT
#     --------------
#
#
#          Barriers and print!
#
#
      EXECUTE  SIP_BARRIER
      EXECUTE  SERVER_BARRIER
      EXECUTE  PRINT_SCALAR  ZERO
      PARDO  a, i
         GET         VCHACT1A (a,i)
         tai (a,i) = VCHACT1A (a,i)
         EXECUTE  DUMP_AMP  tai
      ENDPARDO  a, i
      EXECUTE  SIP_BARRIER
      EXECUTE  SERVER_BARRIER
#
#
#          ...ready!
#
#
#     -----------------
      ENDPROC  L1_PRINT
#-------------------------------------------------------------------------



#-------------------------------------------------------------------------
#
#     ----------------
      PROC  L2AA_PRINT
#     ----------------
#
#
#          Barriers and print!
#
#
      EXECUTE  PRINT_SCALAR  ZERO
      EXECUTE  SERVER_BARRIER
      PARDO  a, i, a1, i1

         REQUEST              VCHACT2AA (a,i,a1,i1) i1
         taiai (a,i,a1,i1)  = VCHACT2AA (a,i,a1,i1)
         EXECUTE  DUMP_AMP  taiai

      ENDPARDO  a, i, a1, i1
      EXECUTE  SERVER_BARRIER
#
#
#          ...ready!
#
#
#     -------------------
      ENDPROC  L2AA_PRINT
#-------------------------------------------------------------------------



#-------------------------------------------------------------------------
#
#     ----------------
      PROC  L2AB_PRINT
#     ----------------
#   
#
#          Barriers and print!
#
#
      EXECUTE  PRINT_SCALAR  ZERO
      EXECUTE  SERVER_BARRIER
      PARDO  a, i, b, j

         REQUEST              VCHACT2AB (a,i,b,j) j
         taibj (a,i,b,j)   =  VCHACT2AB (a,i,b,j)
         EXECUTE  DUMP_AMP  taibj

      ENDPARDO  a, i, b, j
      EXECUTE  SERVER_BARRIER
#
#
#          ...ready!
#
#     
#     -------------------
      ENDPROC  L2AB_PRINT
#-------------------------------------------------------------------------



#-------------------------------------------------------------------------
#
#     ----------------
      PROC  L2AB_CHECK
#     ----------------
#   
#
#          Barriers and print!
#
#
#             _      _                      _
#           i,j    a,b             _ __   i,j
#          G   __ l   __  +  (a,i1|b,j1) N   __
#           i1,j1  i1,j1                  i1,j1
#
#
      ZERO = 0.0
#
#
#          ...ready!
#
#     
#     -------------------
      ENDPROC  L2AB_CHECK
#-------------------------------------------------------------------------



#    ------------------------------------------------------------------------ 
#
     PROC AOLADDER_NEW  
#
#    ------------------------------------------------------------------------ 
    #execute server_barrier 
#
     PARDO lambda, i, i1  
#
           allocate Lxiai(lambda,i,*,i1) 
#
           DO a1 
              REQUEST                 T1AO_aa(lambda,i,a1,i1) i1  
              Lxiai(lambda,i,a1,i1) = T1AO_aa(lambda,i,a1,i1) 
           ENDDO a1 
#
           DO sigma 
              ZZaa(lambda,i,sigma,i1)  = 0.0 
              PREPARE T2AO_aa(lambda,i,sigma,i1) = ZZaa(lambda,i,sigma,i1)
              DO a1 
                 Txixi(lambda,i,sigma,i1) = Lxiai(lambda,i,a1,i1)*ca(sigma,a1)
                 ZZaa(lambda,i,sigma,i1) += Txixi(lambda,i,sigma,i1)  
              ENDDO a1 
              PREPARE TAO_aa(lambda,i,sigma,i1) = ZZaa(lambda,i,sigma,i1)
           ENDDO sigma 
#
           deallocate Lxiai(lambda,i,*,i1) 
#
     ENDPARDO lambda, i, i1   
#
     PARDO lambda, i, j  
#
           allocate Lxibj(lambda,i,*,j) 
#
           DO b 
              REQUEST               T1AO_ab(lambda,i,b,j) j  
              Lxibj(lambda,i,b,j) = T1AO_ab(lambda,i,b,j) 
           ENDDO b 
#
           DO sigma 
              ZZab(lambda,i,sigma,j)  = 0.0 
              PREPARE T2AO_ab(lambda,i,sigma,j) = ZZab(lambda,i,sigma,j)
              DO b 
                 Txixj(lambda,i,sigma,j) = Lxibj(lambda,i,b,j)*ca(sigma,b)
                 ZZab(lambda,i,sigma,j) += Txixj(lambda,i,sigma,j)  
              ENDDO b 
              PREPARE TAO_ab(lambda,i,sigma,j) = ZZab(lambda,i,sigma,j)
           ENDDO sigma 
#
           deallocate Lxibj(lambda,i,*,j) 
#
     ENDPARDO lambda, i, j   
#
     execute server_barrier   
#
#    Contract AOINT with half back transformed Amplitudes 
#    ----------------------------------------------------    
#
     PARDO mu, nu, lambda, sigma
#
           compute_integrals aoint(lambda,mu,sigma,nu)
#
           DO i
           DO i1
              if i < i1 
                 REQUEST                        TAO_aa(lambda,i,sigma,i1) i1
                 Yaa(mu,i,nu,i1)              = aoint(lambda,mu,sigma,nu)*TAO_aa(lambda,i,sigma,i1)
                 Y1aa(nu,i1,mu,i)             = Yaa(mu,i,nu,i1)  
                 PREPARE T2AO_aa(mu,i,nu,i1) += Yaa(mu,i,nu,i1)
                 PREPARE T2AO_aa(nu,i1,mu,i) += Y1aa(nu,i1,mu,i)
              endif 
              if i == i1 
                 REQUEST                        TAO_aa(lambda,i,sigma,i1) i1
                 Yaa(mu,i,nu,i1)              = aoint(lambda,mu,sigma,nu)*TAO_aa(lambda,i,sigma,i1)
                 PREPARE T2AO_aa(mu,i,nu,i1) += Yaa(mu,i,nu,i1)
              endif 
           ENDDO i1
           ENDDO i
#
           DO i
           DO i1
              if i < i1 
                 REQUEST                        TAO_ab(lambda,i,sigma,i1) i1
                 Yaa(mu,i,nu,i1)              = aoint(lambda,mu,sigma,nu)*TAO_ab(lambda,i,sigma,i1)
                 Y1aa(nu,i1,mu,i)             = Yaa(mu,i,nu,i1)  
                 PREPARE T2AO_ab(mu,i,nu,i1) += Yaa(mu,i,nu,i1)
                 PREPARE T2AO_ab(nu,i1,mu,i) += Y1aa(nu,i1,mu,i)
              endif 
              if i == i1 
                 REQUEST                        TAO_ab(lambda,i,sigma,i1) i1
                 Yaa(mu,i,nu,i1)              = aoint(lambda,mu,sigma,nu)*TAO_ab(lambda,i,sigma,i1)
                 PREPARE T2AO_ab(mu,i,nu,i1) += Yaa(mu,i,nu,i1)
              endif 
           ENDDO i1
           ENDDO i
#
     ENDPARDO mu, nu, lambda, sigma
#
     execute server_barrier  
#
#    Perform final transformation 
#    ---------------------------- 
#
     PARDO nu, i, i1
           allocate LLaa(*,i,nu,i1)
           DO mu
              REQUEST T2AO_aa(mu,i,nu,i1) i1
              DO a
                 Taixi(a,i,nu,i1) = T2AO_aa(mu,i,nu,i1)*ca(mu,a)
                 LLaa(a,i,nu,i1) += Taixi(a,i,nu,i1)
              ENDDO a
           ENDDO mu
           DO a
              LLaa(a,i,nu,i1) *= 0.5
              DO a1
                 Taiai(a,i,a1,i1)             = LLaa(a,i,nu,i1)*ca(nu,a1)
                 PREPARE VCHACT2AA(a,i,a1,i1) += Taiai(a,i,a1,i1) 
              ENDDO a1
           ENDDO a
           deallocate LLaa(*,i,nu,i1)
     ENDPARDO nu, i, i1
#
     PARDO nu, i, j
           allocate LLab(*,i,nu,j)
           DO mu
              REQUEST T2AO_ab(mu,i,nu,j) j
              DO a
                 Taixj(a,i,nu,j) = T2AO_ab(mu,i,nu,j)*ca(mu,a)
                 LLab(a,i,nu,j) += Taixj(a,i,nu,j)
              ENDDO a
           ENDDO mu
           DO a
              DO b
                 Taibj(a,i,b,j)             = LLab(a,i,nu,j)*ca(nu,b)
                 PREPARE VCHACT2AB(a,i,b,j) += Taibj(a,i,b,j) 
              ENDDO b
           ENDDO a
           deallocate LLab(*,i,nu,j)
     ENDPARDO nu, i, j
#
#    ------------------------------------------------------------------------ 
#
     ENDPROC AOLADDER_NEW  
#    -------------------- 
#
#    ------------------------------------------------------------------------ 



#-------------------------------------------------------------------------
#
#     ----------------
      PROC  L2AB_WORKS
#     ----------------
#   
#
#          Begin the LISTT2IN in ACES2
#
#
      PARDO  a, i, b, j

         ALLOCATE  laibj (a,i,b,j)

         DO i1
            GET                 VCACT1A (a,i1)
            REQUEST             HBAR_JKIA_aabb (i,i1,j,b) i1
            tpppp (i1,i,b,j)  = HBAR_JKIA_aabb (i,i1,j,b)
            taibj (a,i,b,j)   = VCACT1A (a,i1) * tpppp (i1,i,b,j)
            laibj (a,i,b,j)  -= taibj (a,i,b,j)
         ENDDO i1

         DO j1
            GET                 VCACT1A (b,j1)
            REQUEST             HBAR_JKIA_aabb (j,j1,i,a) j1
            tpppp (a,i,j1,j)  = HBAR_JKIA_aabb (j,j1,i,a)
            taibj (a,i,b,j)   = tpppp (a,i,j1,j) * VCACT1A (b,j1)
            laibj (a,i,b,j)  -= taibj (a,i,b,j)
         ENDDO j1

         PREPARE  VCHACT2AB (a,i,b,j) += laibj (a,i,b,j)

         DEALLOCATE  laibj (a,i,b,j)

      ENDPARDO  a, i, b, j
#
      PARDO  a, i, b, j

         ALLOCATE  laibj (a,i,b,j)

         DO a1
            GET                 VCACT1A (a1,i)
            REQUEST             HBAR_AIBC_aabb (a1,a,j,b) a1
            taabj (a,a1,b,j)  = HBAR_AIBC_aabb (a1,a,j,b)
            taibj (a,i,b,j)   = taabj (a,a1,b,j) * VCACT1A (a1,i)
            laibj (a,i,b,j)  += taibj (a,i,b,j)
         ENDDO a1

         DO b1
            GET                 VCACT1A (b1,j)
            REQUEST             HBAR_AIBC_aabb (b1,b,i,a) b1
            tpppp (a,i,b,b1)  = HBAR_AIBC_aabb (b1,b,i,a)
            taibj (a,i,b,j)   = tpppp (a,i,b,b1) * VCACT1A (b1,j)
            laibj (a,i,b,j)  += taibj (a,i,b,j)
         ENDDO b1

         PREPARE  VCHACT2AB (a,i,b,j) += laibj (a,i,b,j)

         DEALLOCATE  laibj (a,i,b,j)

      ENDPARDO  a, i, b ,j
#
#
#      This ends the DT1 IN T2 PORTION
#
#
      PARDO  a, i, b, j1

         ALLOCATE  laibj (a,i,b,*)

         DO i1
            REQUEST  VCACT2AB (a,i1,b,j1) i1
            REQUEST  Vpiqj    (a,i1,b,j1) i1
            DO j
               REQUEST  HBAR_iijj (i,i1,j,j1) j
               GET      Niijj     (i,i1,j,j1)

               taibj (a,i,b,j)  = HBAR_iijj (i,i1,j,j1) * VCACT2AB (a,i1,b,j1)
               laibj (a,i,b,j) += taibj (a,i,b,j)

               taibj (a,i,b,j)  = Vpiqj (a,i1,b,j1) * Niijj (i,i1,j,j1)
               laibj (a,i,b,j) += taibj (a,i,b,j)
            ENDDO j
         ENDDO i1

         DO j
            PREPARE  VCHACT2AB (a,i,b,j) += laibj (a,i,b,j)
         ENDDO j

         DEALLOCATE  laibj (a,i,b,*)

      ENDPARDO  a, i, b, j1
#
#      This ends after W1LAD in ACESII
#
#
      PARDO  a, i, b, b1

         ALLOCATE  laibj  (a,i,b,*)

         DO i1
            REQUEST             Vbbai (b1,b,a,i1) i1
            tpqpq (a,i1,b,b1) = Vbbai (b1,b,a,i1)
            DO j
               REQUEST             Niibj (i,b1,i1,j) j
               tpppp (i1,i,b1,j) = Niibj (i,b1,i1,j)
               taibj (a,i,b,j)   = tpqpq (a,i1,b,b1) * tpppp (i1,i,b1,j)
               laibj (a,i,b,j)  -= taibj (a,i,b,j)
            ENDDO j
         ENDDO i1

         DO j
            PREPARE  VCHACT2AB (a,i,b,j) += laibj (a,i,b,j)
         ENDDO j

         DO j
            tpppp (b,j,a,i)               = laibj (a,i,b,j)
            PREPARE  VCHACT2AB (b,j,a,i) += tpppp (b,j,a,i)
         ENDDO j

         DEALLOCATE  laibj  (a,i,b,*)

      ENDPARDO  a, i, b, b1
#
#      This ends the l1w1, but I symmetrized the l1w1, so I'll
#      check an unsymmetrized version later
#
#
#
#          BEGIN  LISTT2RS from ACES2
#
#
      PARDO  a, i, b

        ALLOCATE  laibj (a,i,b,*)

        DO j1
           REQUEST  VCACT2AB (a,i,b,j1) j1
           REQUEST  Vpiqj    (a,i,b,j1) j1
           DO j
              t1aibj (a,i,b,j)  = VCACT2AB (a,i,b,j1) * LHBAR_ii (j,j1)
              laibj  (a,i,b,j) -= t1aibj (a,i,b,j)

              taibj  (a,i,b,j)  = Vpiqj (a,i,b,j1) * LFmi_b (j1,j)
              laibj  (a,i,b,j) -= taibj (a,i,b,j)
           ENDDO j
        ENDDO j1

        DO j
           PREPARE  VCHACT2AB (a,i,b,j) += laibj (a,i,b,j)
        ENDDO j

        DEALLOCATE  laibj (a,i,b,*)

      ENDPARDO  a, i, b
#
      PARDO  a, j, b

        ALLOCATE  laibj (a,*,b,j)

        DO i1
           REQUEST  VCACT2AB (a,i1,b,j) j
           REQUEST  Vpiqj    (a,i1,b,j) j
           DO i
              t1aibj (a,i,b,j)  = VCACT2AB (a,i1,b,j) * LHBAR_ii (i,i1)
              laibj  (a,i,b,j) -= t1aibj (a,i,b,j)

              taibj  (a,i,b,j)  = Vpiqj (a,i1,b,j) * LFmi_b (i1,i)
              laibj  (a,i,b,j) -= taibj (a,i,b,j)
           ENDDO i
        ENDDO i1 

        DO i
           PREPARE  VCHACT2AB (a,i,b,j) += laibj (a,i,b,j)
        ENDDO i

        DEALLOCATE  laibj (a,*,b,j)

      ENDPARDO  a, j, b
#
# XXXXXXXXXX 

      PARDO  a, i, j

         ALLOCATE  laibj (a,i,*,j)

         DO b1
            REQUEST  VCACT2AB (a,i,b1,j) j
            REQUEST  Vpiqj    (a,i,b1,j) j
            DO b
               t1aibj (a,i,b,j)  = LHBAR_aa (b1,b) * VCACT2AB (a,i,b1,j)
               laibj  (a,i,b,j) += t1aibj (a,i,b,j)

               taibj  (a,i,b,j)  = Vpiqj  (a,i,b1,j) * LFae_a (b1,b)
               laibj  (a,i,b,j) += taibj  (a,i,b,j)
            ENDDO b
         ENDDO b1

         DO b
            PREPARE  VCHACT2AB (a,i,b,j) += laibj (a,i,b,j)
         ENDDO b

         DEALLOCATE  laibj (a,i,*,j)

      ENDPARDO  a, i, j
#

      PARDO  b, i, j

         ALLOCATE  laibj (*,i,b,j)

         DO a1
            REQUEST  VCACT2AB (a1,i,b,j) j
            REQUEST  Vpiqj    (a1,i,b,j) j
            DO a
               t1aibj (a,i,b,j)  = LHBAR_aa (a1,a) * VCACT2AB (a1,i,b,j)
               laibj  (a,i,b,j) += t1aibj (a,i,b,j)

               taibj  (a,i,b,j)  = Vpiqj  (a1,i,b,j) * LFae_a (a1,a)
               laibj  (a,i,b,j) += taibj  (a,i,b,j)
            ENDDO a
         ENDDO a1

         DO a
            lbjai (b,j,a,i) = laibj (a,i,b,j)
            PREPARE  VCHACT2AB (a,i,b,j) += laibj (a,i,b,j)
         ENDDO a

         DEALLOCATE  laibj (*,i,b,j)

      ENDPARDO  b, i, j
#
#
#      This ends the DFT2INT2 and the Three body term!
#
#
# THIS NEEDS TO BE OPTIMIZED!
#
#

      PARDO  a, i, b, j

         GET         VCACT1A  (a,i)
         tbj (b,j) = LHBAR_jb (j,b)

         taibj (a,i,b,j)  = VCACT1A (a,i) ^ tbj (b,j)
         tbjai (b,j,a,i)  = taibj (a,i,b,j)

         PREPARE  VCHACT2AB (a,i,b,j) += taibj (a,i,b,j)
         PREPARE  VCHACT2AB (b,j,a,i) += tbjai (b,j,a,i)

      ENDPARDO  a, i, b, j
#
# VFLVFLVFL ???? 
#
     PARDO j, b, i1, a1
#
           REQUEST VCACT2AB(a1,i1,b,j) j
           REQUEST HBAR_AJIB_aabb(j,b,a1,i1) i1
           tpppp (a1,i1,b,j) = HBAR_AJIB_aabb (j,b,a1,i1)
#
           DO i
           DO a

            if a < b
              REQUEST                       VCACT2AA(a,i,a1,i1) i1
              REQUEST                       HBAR_AJIB_aaaa(i,a,a1,i1) i
              T1aibj(a,i,b,j)             = HBAR_AJIB_aaaa(i,a,a1,i1)*VCACT2AB(a1,i1,b,j)
              T2aibj(a,i,b,j)             = VCACT2AA(a,i,a1,i1) * tpppp (a1,i1,b,j)
              Taibj(a,i,b,j)              = T1aibj(a,i,b,j)
              Taibj(a,i,b,j)             += T2aibj(a,i,b,j)
              T3aibj(b,j,a,i)             = Taibj(a,i,b,j)
              PREPARE VCHACT2AB(a,i,b,j) += Taibj(a,i,b,j)
              PREPARE VCHACT2AB(b,j,a,i) += T3aibj(b,j,a,i)

            endif

            if a == b
              REQUEST                       VCACT2AA(a,i,a1,i1) i1
              REQUEST                       HBAR_AJIB_aaaa(i,a,a1,i1) i
              tpppp (a1,i1,b,j)           = HBAR_AJIB_aabb (j,b,a1,i1)
              T1aibj(a,i,b,j)             = HBAR_AJIB_aaaa(i,a,a1,i1)*VCACT2AB(a1,i1,b,j)
              T2aibj(a,i,b,j)             = VCACT2AA (a,i,a1,i1) * tpppp (a1,i1,b,j)
              Taibj(a,i,b,j)              = T1aibj(a,i,b,j)
              Taibj(a,i,b,j)             += T2aibj(a,i,b,j)
              PREPARE VCHACT2AB(a,i,b,j) += Taibj(a,i,b,j)

            endif

           ENDDO a
           ENDDO i
#
     ENDPARDO j, b, i1, a1

     PARDO i, a, j1, b1
#
           REQUEST VCACT2AB(a,i,b1,j1) j1
           REQUEST HBAR_AJIB_aabb(i,a,b1,j1) j1
#
           DO j
           DO b

            if a < b
              REQUEST                       VCACT2AA(b,j,b1,j1) j1
              REQUEST                       HBAR_AJIB_aaaa(j,b,b1,j1) j
              tpppp (b1,j1,b,j)           = HBAR_AJIB_aaaa(j,b,b1,j1)
              T1aibj(a,i,b,j)             = VCACT2AB(a,i,b1,j1) * tpppp (b1,j1,b,j)
              T2aibj(a,i,b,j)             = HBAR_AJIB_aabb(i,a,b1,j1)*VCACT2AA(b,j,b1,j1)
              Taibj(a,i,b,j)              = T1aibj(a,i,b,j)
              Taibj(a,i,b,j)             += T2aibj(a,i,b,j)
              T3aibj(b,j,a,i)             = Taibj(a,i,b,j)
              PREPARE VCHACT2AB(a,i,b,j) += Taibj(a,i,b,j)
              PREPARE VCHACT2AB(b,j,a,i) += T3aibj(b,j,a,i)

            endif

            if a == b
              REQUEST                       VCACT2AA(b,j,b1,j1) j1
              REQUEST                       HBAR_AJIB_aaaa(j,b,b1,j1) j
              tpppp (b1,j1,b,j)           = HBAR_AJIB_aaaa(j,b,b1,j1)
              T1aibj(a,i,b,j)             = VCACT2AB(a,i,b1,j1) * tpppp (b1,j1,b,j)
              T2aibj(a,i,b,j)             = HBAR_AJIB_aabb(i,a,b1,j1)*VCACT2AA(b,j,b1,j1)
              Taibj(a,i,b,j)              = T1aibj(a,i,b,j)
              Taibj(a,i,b,j)             += T2aibj(a,i,b,j)
              PREPARE VCHACT2AB(a,i,b,j) += Taibj(a,i,b,j)

            endif

           enddo b
           enddo j
#
     ENDPARDO i, a, j1, b1

#
     PARDO j, a, a1, j1
#
           REQUEST HBAR_AJIB_iibb(j,j1,a1,a) j1
#
           DO i
           DO b

            if a < b
              REQUEST                       VCACT2AB(a1,i,b,j1) j1
              Taibj(a,i,b,j)              = HBAR_AJIB_iibb(j,j1,a1,a)*VCACT2AB(a1,i,b,j1)
              T1aibj(b,j,a,i)             = Taibj(a,i,b,j)
              PREPARE VCHACT2AB(a,i,b,j) += Taibj(a,i,b,j)
              PREPARE VCHACT2AB(b,j,a,i) += T1aibj(b,j,a,i)

            endif

            if a == b
              REQUEST                       VCACT2AB(a1,i,b,j1) j1
              Taibj(a,i,b,j)              = HBAR_AJIB_iibb(j,j1,a1,a)*VCACT2AB(a1,i,b,j1)
              PREPARE VCHACT2AB(a,i,b,j) += Taibj(a,i,b,j)

            endif

           ENDDO b
           ENDDO i
#
     ENDPARDO j, a, a1, j1

     PARDO i, b, i1, b1
#
           REQUEST HBAR_AJIB_iibb(i,i1,b1,b) i1
#
           DO j
           DO a

            if a < b
              REQUEST                       VCACT2AB(a,i1,b1,j) j
              Taibj(a,i,b,j)              = HBAR_AJIB_iibb(i,i1,b1,b)*VCACT2AB(a,i1,b1,j)
              T1aibj(b,j,a,i)             = taibj(a,i,b,j)
              PREPARE VCHACT2AB(a,i,b,j) += Taibj(a,i,b,j)
              PREPARE VCHACT2AB(b,j,a,i) += T1aibj(b,j,a,i)

            endif

            if a == b
              REQUEST                       VCACT2AB(a,i1,b1,j) j
              Taibj(a,i,b,j)              = HBAR_AJIB_iibb(i,i1,b1,b)*VCACT2AB(a,i1,b1,j)
              PREPARE VCHACT2AB(a,i,b,j) += Taibj(a,i,b,j)

            endif

           ENDDO a
           ENDDO j
#
     ENDPARDO i, b, i1, b1

#     -------------------
      ENDPROC  L2AB_WORKS
#-------------------------------------------------------------------------



#-------------------------------------------------------------------------
#
#     ----------------
      PROC  L2AA_WORKS
#     ----------------
#   
#        
#
      PARDO  a, i, i1, i2
      
         REQUEST             HBAR_JKIA_aaaa (i1,i2,i,a) i2
         tpppp (a,i,i2,i1) = HBAR_JKIA_aaaa (i1,i2,i,a)

         DO a1
            GET  VCACT1A (a1,i2)
            taiai  (a,i,a1,i1)  = tpppp (a,i,i2,i1) * VCACT1A (a1,i2)
            t1aiai (a1,i,a,i1)  = taiai (a,i,a1,i1)
            taiai  (a,i,a1,i1) *= -1.0
            
            PREPARE  VCHACT2AA (a,i,a1,i1) += taiai  (a,i,a1,i1)
            PREPARE  VCHACT2AA (a1,i,a,i1) += t1aiai (a1,i,a,i1)
         ENDDO a1  

      ENDPARDO  a, i, i1, i2

      PARDO  a, a1, a2, i
      WHERE a < a1

         REQUEST             HBAR_AIBC_aaaa (a2,a1,i,a) a
         tpppp (a,i,a1,a2) = HBAR_AIBC_aaaa (a2,a1,i,a)

         DO i1
            GET  VCACT1A (a2,i1)
            taiai  (a,i,a1,i1)  = tpppp (a,i,a1,a2) * VCACT1A (a2,i1)
            PUT  D2aa (a,i,a1,i1) += taiai (a,i,a1,i1)
         ENDDO i1
         
      ENDPARDO  a, a1, a2, i
            
      PARDO  a, a1, a2, i
      WHERE a == a1
         
         REQUEST             HBAR_AIBC_aaaa (a2,a1,i,a) a
         tpppp (a,i,a1,a2) = HBAR_AIBC_aaaa (a2,a1,i,a)
      
         DO i1
            GET  VCACT1A (a2,i1)

            taiai  (a,i,a1,i1)  = tpppp (a,i,a1,a2) * VCACT1A (a2,i1)
            t1aiai (a,i1,a1,i)  = taiai (a,i,a1,i1)
            t1aiai (a,i1,a1,i) *= -1.0

            PREPARE  VCHACT2AA (a,i,a1,i1) += taiai  (a,i,a1,i1)
            PREPARE  VCHACT2AA (a,i1,a1,i) += t1aiai (a,i1,a1,i)
         ENDDO i1

      ENDPARDO  a, a1, a2, i

      PARDO  a, a1, i2, i3

         WHERE i2 < i3

            REQUEST  VCACT2AA (a,i2,a1,i3) i3
            REQUEST  VSpipi   (a,i2,a1,i3) i3

            DO i
            DO i1
               REQUEST  HBAR_iiii (i,i2,i1,i3) i1
               GET      Niiii     (i2,i,i3,i1)

               taiai  (a,i,a1,i1)  = HBAR_iiii (i,i2,i1,i3) * VCACT2AA (a,i2,a1,i3)
               taiai  (a,i,a1,i1) *= 0.25
               t1aiai (a,i,a1,i1)  = taiai (a,i,a1,i1)

               taiai  (a,i,a1,i1)  = VSpipi (a,i2,a1,i3) * Niiii (i2,i,i3,i1)
               taiai  (a,i,a1,i1) *= 0.25
               t1aiai (a,i,a1,i1) += taiai (a,i,a1,i1)

               PUT  D2aa (a,i,a1,i1) += t1aiai (a,i,a1,i1)
            ENDDO i1
            ENDDO i

      ENDPARDO  a, a1, i2, i3

      PARDO  a, a1, i2, i3

         WHERE i2 == i3

            REQUEST  VCACT2AA (a,i2,a1,i3) i3
            REQUEST  VSpipi   (a,i2,a1,i3) i3

            DO i
            DO i1
               REQUEST  HBAR_iiii (i,i2,i1,i3) i1
               GET      Niiii     (i2,i,i3,i1)
               
               taiai  (a,i,a1,i1)  = HBAR_iiii (i,i2,i1,i3) * VCACT2AA (a,i2,a1,i3)
               taiai  (a,i,a1,i1) *= 0.125 
               t1aiai (a,i,a1,i1)  = taiai (a,i,a1,i1)
               
               taiai  (a,i,a1,i1)  = VSpipi (a,i2,a1,i3) * Niiii (i2,i,i3,i1)
               taiai  (a,i,a1,i1) *= 0.125 
               t1aiai (a,i,a1,i1) += taiai (a,i,a1,i1)
               
               PUT  D2aa (a,i,a1,i1) += t1aiai (a,i,a1,i1)
            ENDDO i1
            ENDDO i
      
      ENDPARDO  a, a1, i2, i3

      PARDO  a, i, a1, a2

         ALLOCATE  llaiai (a,i,a1,*)

         DO i2
            REQUEST  VSaaai (a1,a2,a,i2) i2
            tpppp (a,a2,a1,i2) = VSaaai (a1,a2,a,i2)
            DO i1
               REQUEST  Niiai (i1,a2,i,i2) i1
               t1pppp (a2,i,i2,i1) = Niiai (i1,a2,i,i2)
               taiai (a,i,a1,i1)  = tpppp (a,a2,a1,i2) * t1pppp (a2,i,i2,i1)
               llaiai (a,i,a1,i1) -= taiai (a,i,a1,i1)
            ENDDO i1
         ENDDO i2
         
         DO i1
            PREPARE  VCHACT2AA (a,i,a1,i1) += llaiai (a,i,a1,i1)
         ENDDO i1
         
         DEALLOCATE  llaiai (a,i,a1,*)
      
      ENDPARDO  a, i, a1, a2
#   
#        
#          Diagram computation!
#
#
      PARDO  a, i, a1, i2

         REQUEST  VCACT2AA (a,i,a1,i2) i2
         REQUEST  VSpipi   (a,i,a1,i2) i2

         DO i1
            t1aiai (a,i,a1,i1)  = VCACT2AA (a,i,a1,i2) * LHBAR_ii (i1,i2)
            taiai  (a,i,a1,i1)  = t1aiai (a,i,a1,i1)

            t1aiai (a,i,a1,i1)  = VSpipi (a,i,a1,i2) * LFmi_a (i2,i1)
            taiai  (a,i,a1,i1) += t1aiai (a,i,a1,i1)

            taiai  (a,i,a1,i1) *= -0.50
            PUT  D2aa (a,i,a1,i1) += taiai (a,i,a1,i1)
         ENDDO i1

      ENDPARDO  a, i, a1, i2

      PARDO  a, i, a2, i1

         REQUEST  VCACT2AA (a,i,a2,i1) i1
         REQUEST  VSpipi   (a,i,a2,i1) i1
         
         DO a1
            t1aiai (a,i,a1,i1)  = VCACT2AA (a,i,a2,i1) * LHBAR_aa (a2,a1)
            taiai  (a,i,a1,i1)  = t1aiai (a,i,a1,i1)
            
            t1aiai (a,i,a1,i1)  = VSpipi (a,i,a2,i1) * LFae_a (a2,a1)
            taiai  (a,i,a1,i1) += t1aiai (a,i,a1,i1)
            
            taiai  (a,i,a1,i1) *=  0.50
            PUT  D2aa (a,i,a1,i1) += taiai (a,i,a1,i1)
         ENDDO a1
      
      ENDPARDO  a, i, a2, i1

      PARDO  a1, i1, a2, i2   

         REQUEST                HBAR_AJIB_aaaa (i1,a1,a2,i2) i2
         t1aiai (a2,i2,a1,i1) = HBAR_AJIB_aaaa (i1,a1,a2,i2)
               
         DO i
         DO a
            REQUEST             VCACT2AA (a,i,a2,i2) a
            taiai (a,i,a1,i1) = VCACT2AA (a,i,a2,i2) * t1aiai (a2,i2,a1,i1)
            PUT  D2aa (a,i,a1,i1) += taiai (a,i,a1,i1)
         ENDDO a
         ENDDO i

      ENDPARDO  a1, i1, a2, i2

      PARDO  a1, i1, b, j

         REQUEST             HBAR_AJIB_aabb (i1,a1,b,j) j
         tbjai (b,j,a1,i1) = HBAR_AJIB_aabb (i1,a1,b,j)

         DO i
         DO a
            REQUEST             VCACT2AB (a,i,b,j) a
            taiai (a,i,a1,i1) = VCACT2AB (a,i,b,j) * tbjai (b,j,a1,i1)
            PUT  D2aa (a,i,a1,i1) += taiai (a,i,a1,i1)
         ENDDO a
         ENDDO i

      ENDPARDO  a1, i1, b, j

      PARDO  a, i, a1, i1
               
         GET         VCACT1A  (a,i)
         tai (a1,i1) = LHBAR_ia (i1,a1)
               
         taiai (a,i,a1,i1) = VCACT1A (a,i) ^ tai (a1,i1)

         PUT  D2aa (a,i,a1,i1) += taiai (a,i,a1,i1)

      ENDPARDO  a, i, a1, i1
#
#
#          ...ready!
#
#     
#     -------------------
      ENDPROC  L2AA_WORKS
#-------------------------------------------------------------------------



#-------------------------------------------------------------------------
#
#     ------------
      PROC  L1ANEW
#     ------------
#
#
#           j  bi
#          l  G
#           b  ja
#
#
#               Alpha - Alpha part CHECK
#
#
      PARDO  i, i1, a, a1

         REQUEST             HBAR_AJIB_aaaa (i,a,a1,i1) a1
         GET                 VCACT1A        (a1,i1)
         taiai (a,i,a1,i1) = HBAR_AJIB_aaaa (i,a,a1,i1)

         tai (a,i)  = taiai (a,i,a1,i1) * VCACT1A (a1,i1)
         PUT  VCHACT1A (a,i) += tai (a,i)

      ENDPARDO  i, i1, a, a1
#
#
#               Alpha - Beta part CHECK
#
#
      PARDO  a, i, b, j

         REQUEST           HBAR_AJIB_aabb (i,a,b,j) b
         GET               VCACT1A        (b,j)
         taibj (a,i,b,j) = HBAR_AJIB_aabb (i,a,b,j)

         tai (a,i)  = taibj (a,i,b,j) * VCACT1A (b,j)
         PUT  VCHACT1A (a,i) += tai (a,i)

      ENDPARDO  a, i, b, j
#
#
#          _    i   _    a
#          H   l  - H   l    CHECK
#           ba  b    ij  j
#
#
      PARDO  a, a1, i

         GET         VCACT1A (a1,i)
         tai (a,i) = LHBAR_aa (a1,a) * VCACT1A (a1,i)
         PUT  VCHACT1A (a,i) += tai (a,i)

      ENDPARDO  a, a1, i

      PARDO  i, i1, a

         GET          VCACT1A (a,i1)
         tai (a,i)  = VCACT1A (a,i1) * LHBAR_ii (i,i1)
         tai (a,i) *= -1.0
         PUT  VCHACT1A (a,i) += tai (a,i)

      ENDPARDO  i, i1, a
#     
#     
#           1   cb  ij
#          --- G   l    CHECK
#           2   aj  cb
#
#
#               Alpha - Alpha part
#     
#
      PARDO  i1, a1, a2

         ALLOCATE  l1aaai (*,a2,a1,i1)

         DO a
            REQUEST               HBAR_ABCI_aaaa (a2,a,a1,i1) a
            l1aaai (a,a2,a1,i1) = HBAR_ABCI_aaaa (a2,a,a1,i1)
         ENDDO a

         DO i
            REQUEST              VCACT2AA (a2,i,a1,i1) i
            taaii (a2,a1,i1,i) = VCACT2AA (a2,i,a1,i1)
            DO a
               tai (a,i)  = l1aaai (a,a2,a1,i1) * taaii (a2,a1,i1,i)
               tai (a,i) *= 0.5
               PUT  VCHACT1A (a,i) += tai (a,i)
            ENDDO a
         ENDDO i

         DEALLOCATE  l1aaai (*,a2,a1,i1)

      ENDPARDO  i1, a1, a2
#
#
#               Alpha - Beta part CHECK
#
#
      PARDO  a1, b, j

         ALLOCATE  l1aabj (*,a1,b,j)

         DO a
            REQUEST             HBAR_ABCI_aabb (a1,a,b,j) a
            l1aabj (a,a1,b,j) = HBAR_ABCI_aabb (a1,a,b,j)
         ENDDO a

         DO i
            REQUEST            VCACT2AB (a1,i,b,j) i
            tpppp (a1,b,j,i) = VCACT2AB (a1,i,b,j)
            DO a
               tai (a,i)  = l1aabj (a,a1,b,j) * tpppp (a1,b,j,i)
               PUT  VCHACT1A (a,i) += tai (a,i)
            ENDDO a
         ENDDO i

         DEALLOCATE  l1aabj (*,a1,b,j)

      ENDPARDO  a1, b, j
#           
#        
#          -1   ib  jk
#          --- G   l
#           2   jk  ab
#        
#
#               Alpha - Alpha part  CHECK
#
#
      PARDO  i1, i2, a1

         ALLOCATE  l1aiai (*,i2,a1,i1)

         DO a
            REQUEST              VCACT2AA (a,i2,a1,i1) a
            l1aiai (a,i2,a1,i1) = VCACT2AA (a,i2,a1,i1)
         ENDDO a

         DO i
            REQUEST              HBAR_IAJK_aaaa (i,i2,a1,i1) i
            tpppp (i2,a1,i1,i) = HBAR_IAJK_aaaa (i,i2,a1,i1)
            DO a
               tai (a,i)  = l1aiai (a,i2,a1,i1) * tpppp (i2,a1,i1,i)
               tai (a,i) *= -0.5
               PUT  VCHACT1A (a,i) += tai (a,i)
            ENDDO a
         ENDDO i

         DEALLOCATE  l1aiai (*,i2,a1,i1)

      ENDPARDO  i1, i2, a1
#
#
#               Alpha - Beta part  CHECK
#
#
      PARDO  i1, j, b

         ALLOCATE  l2aibj (*,i1,b,j)

         DO a
            REQUEST  VCACT2AB (a,i1,b,j) a
            l2aibj (a,i1,b,j) = VCACT2AB (a,i1,b,j)
         ENDDO a

         DO i
            REQUEST            HBAR_IAJK_aabb (i,i1,b,j) i
            tpppp (i1,b,j,i) = HBAR_IAJK_aabb (i,i1,b,j)
            DO a
               tai (a,i)  = l2aibj (a,i1,b,j) * tpppp (i1,b,j,i)
               tai (a,i) *= -1.0
               PUT  VCHACT1A (a,i) += tai (a,i)
            ENDDO a
         ENDDO i

         DEALLOCATE  l2aibj (*,i1,b,j)

      ENDPARDO  i1, j, b
#           
#        
#          -1   bc  li  jk     li
#          --- t   G   l   =  G   F
#           2   jl  ka  bc     ka  ji
#        
#
#               Alpha - Alpha part
#
#
      PARDO  i, i1, i2, a

         REQUEST  HBAR_JKIA_aaaa (i1,i2,i,a) a
         tpppp (a,i,i1,i2) = HBAR_JKIA_aaaa (i1,i2,i,a)

         tai (a,i)  = tpppp (a,i,i1,i2) * LFmi_a (i1,i2)
         tai (a,i) *= -1.0
         PUT  VCHACT1A (a,i) += tai (a,i)

      ENDPARDO  i, i1, i2, a
#
#
#               Alpha - Beta part
#
#
      PARDO  a, i, j, j1

         REQUEST  HBAR_JKIA_aabb (j,j1,i,a) a
         tppqq (a,i,j,j1) = HBAR_JKIA_aabb (j,j1,i,a)

         tai (a,i)  = tppqq (a,i,j,j1) * LFmi_b (j,j1)
         tai (a,i) *= -1.0
         PUT  VCHACT1A (a,i) += tai (a,i)

      ENDPARDO  a, i, j, j1
#           
#        
#           1   bd  ci  jk     ci
#          --- t   G   l   =  G   F
#           2   jk  da  bc     da  dc
#        
#
#               Alpha - Alpha part
#
#
      PARDO  i, a, a1, a2

         REQUEST             HBAR_AIBC_aaaa (a1,a2,i,a) a
         tpppp (a,i,a2,a1) = HBAR_AIBC_aaaa (a1,a2,i,a)

         tai (a,i)  = tpppp (a,i,a2,a1) * LFae_a (a2,a1)
         tai (a,i) *= -1.0
         PUT  VCHACT1A (a,i) += tai (a,i)

      ENDPARDO  i, a, a1, a2
#
#
#               Alpha - Beta part
#
#
      PARDO  i, a, b, b1

         REQUEST            HBAR_AIBC_aabb (b1,b,i,a) a
         tppqq (a,i,b1,b) = HBAR_AIBC_aabb (b1,b,i,a)

         tai (a,i)  = tppqq (a,i,b1,b) * LFae_a (b,b1)
         tai (a,i) *= -1.0
         PUT  VCHACT1A (a,i) += tai (a,i)

      ENDPARDO  i, a, b, b1
#
#
#          ...ready!
#
#
#     ---------------
      ENDPROC  L1ANEW
#-------------------------------------------------------------------------



#-------------------------------------------------------------------------
#
#     --------------
      PROC  L2AB_OPT
#     --------------
#
#
#
#              _                 _
#           a1,j  a1   _      a1,b         _ _
#          G   _ l   + H     l   _ - (i,a1|j,b) F
#           a ,b  i     a1,a  i ,j               a,a1
#
#
#
      PARDO  a1, b, j

         ALLOCATE  l1aabj (*,a1,b,j)

         DO a
            REQUEST             HBAR_AIBC_aabb (a1,a,j,b) a
            taabj  (a,a1,b,j) = HBAR_AIBC_aabb (a1,a,j,b)
            l1aabj (a,a1,b,j) = taabj (a,a1,b,j)
         ENDDO a

         DO i
            GET      VCACT1A  (a1,i)
            DO a
               taibj (a,i,b,j) = l1aabj (a,a1,b,j) * VCACT1A (a1,i) # Check!
               PREPARE  VCHACT2AB (a,i,b,j) += taibj (a,i,b,j)
            ENDDO a
         ENDDO i

         DEALLOCATE  l1aabj (*,a1,b,j)

      ENDPARDO  a1, b, j

      PARDO  a1, b, j

         DO i
            REQUEST  VCACT2AB (a1,i,b,j) j
            REQUEST  Vpiqj    (a1,i,b,j) j
            GET      VCACT1A  (a1,i)
            DO a
               t1aibj (a,i,b,j)  = LHBAR_aa (a1,a) * VCACT2AB (a1,i,b,j) # Check
               taibj  (a,i,b,j)  = t1aibj (a,i,b,j)

               t2aibj (a,i,b,j)  = Vpiqj (a1,i,b,j) * LFae_a (a1,a) # Check
               taibj  (a,i,b,j) += t2aibj (a,i,b,j)

               PREPARE  VCHACT2AB (a,i,b,j) += taibj (a,i,b,j)
            ENDDO a
         ENDDO i

      ENDPARDO  a1, b, j
#
#
#           __    __            __          
#           b1,i  b1   _      a,b1        _ __
#          G_    l_  + H__ _ l   _ - (i,a|j,b1) F_ __
#           b ,a  j     b1,b  i, j               b,b1
#
#
#
      PARDO  b1, a, i

         ALLOCATE  laibb (a,i,*,b1)

         DO b
            REQUEST            HBAR_AIBC_aabb (b1,b,i,a) b
            laibb (a,i,b,b1) = HBAR_AIBC_aabb (b1,b,i,a)
         ENDDO b

         DO j
            REQUEST  VCACT2AB (a,i,b1,j) j
            REQUEST  Vpiqj    (a,i,b1,j) j
            GET      VCACT1A  (b1,j)
            DO b
               t1aibj (a,i,b,j)  = laibb (a,i,b,b1) * VCACT1A (b1,j) # Check!
               taibj  (a,i,b,j)  = t1aibj (a,i,b,j)

               t1aibj (a,i,b,j)  = VCACT2AB (a,i,b1,j) * LHBAR_aa (b1,b)
               taibj  (a,i,b,j) += t1aibj (a,i,b,j)

               t1aibj (a,i,b,j)  = Vpiqj (a,i,b1,j) * LFae_a (b1,b)
               taibj  (a,i,b,j) += t1aibj (a,i,b,j)

               PREPARE  VCHACT2AB (a,i,b,j) += taibj (a,i,b,j)
            ENDDO b
         ENDDO j

         DEALLOCATE  laibb (a,i,*,b1)

      ENDPARDO  b1, a, i
#     
#
#              _                 _           
#           i ,j  a    _      a ,b         _ _
#         -G   _ l   - H     l   _ - (i1,a|j,b) F
#           i1,b  i1    i,i1  i1,j               i,i1
#
#
#
      PARDO  i1, b, j

         ALLOCATE  liibj (i1,*,b,j)

         DO i
            REQUEST            HBAR_JKIA_aabb (i,i1,j,b) i
            liibj (i1,i,b,j) = HBAR_JKIA_aabb (i,i1,j,b)
         ENDDO i

         DO a
            REQUEST  VCACT2AB (a,i1,b,j) j
            REQUEST  Vpiqj    (a,i1,b,j) j
            GET      VCACT1A  (a,i1)
            DO i
               t1aibj (a,i,b,j)  = VCACT1A (a,i1) * liibj (i1,i,b,j) # Check!
               taibj  (a,i,b,j)  = t1aibj (a,i,b,j)

               t1aibj (a,i,b,j)  = Vpiqj (a,i1,b,j) * LFmi_a (i1,i) # Check
               taibj  (a,i,b,j) += t1aibj (a,i,b,j)

               t1aibj (a,i,b,j)  = LHBAR_ii (i,i1) * VCACT2AB (a,i1,b,j)
               taibj  (a,i,b,j) += t1aibj (a,i,b,j)

               taibj (a,i,b,j) *= -1.0
               PREPARE  VCHACT2AB (a,i,b,j) += taibj (a,i,b,j)
            ENDDO i
         ENDDO a

         DEALLOCATE  liibj (i1,*,b,j)

      ENDPARDO  i1, b, j
#     
#
#           _     _             _           
#           j ,i  b    _      a,b         __ _
#         -G__   l__ - H_ __ l  __ - (i,a|j1,b) F_ __
#           j1,a  j1    j,j1  i,j1               j,j1
#
#
#
      PARDO  a, i, j1

         ALLOCATE  laijj (a,i,j1,*)

         DO j
            REQUEST  HBAR_JKIA_aabb (j,j1,i,a) j
            laijj (a,i,j1,j) = HBAR_JKIA_aabb (j,j1,i,a)
         ENDDO j

         DO b
            REQUEST  VCACT2AB (a,i,b,j1) j1
            REQUEST  Vpiqj    (a,i,b,j1) j1
            GET      VCACT1A  (b,j1)
            DO j
               t1aibj (a,i,b,j)  = laijj (a,i,j1,j) * VCACT1A (b,j1) # Check!
               taibj  (a,i,b,j)  = t1aibj (a,i,b,j)

               t1aibj (a,i,b,j)  = Vpiqj (a,i,b,j1) * LFmi_b (j1,j)
               taibj  (a,i,b,j) += t1aibj (a,i,b,j)

               t1aibj (a,i,b,j)  = VCACT2AB (a,i,b,j1) * LHBAR_ii (j,j1)
               taibj  (a,i,b,j) += t1aibj (a,i,b,j)

               taibj (a,i,b,j) *= -1.0
               PREPARE  VCHACT2AB (a,i,b,j) += taibj (a,i,b,j)
            ENDDO j
         ENDDO b

         DEALLOCATE  laijj (a,i,j1,*)

      ENDPARDO  a, i, j1
#
#                    _       _
#           a1,i  a1,b    a1,j  a,a1
#          G     l   _ + G   _ l
#           i1,a  i1,j    i1,b  i,i1
#
#
      PARDO  a, i, b, a1

         ALLOCATE  laibj (a,i,b,*)

         DO i1
            REQUEST             HBAR_AJIB_aaaa (i,a,a1,i1) i1
            REQUEST             VCACT2AA       (a,i,a1,i1) i1
            taiai (a,i,a1,i1) = HBAR_AJIB_aaaa (i,a,a1,i1)
            DO j
               REQUEST              HBAR_AJIB_aabb (j,b,a1,i1) j
               REQUEST              VCACT2AB       (a1,i1,b,j) j
               t1aibj (a1,i1,b,j) = HBAR_AJIB_aabb (j,b,a1,i1)

               t2aibj (a,i,b,j)  = VCACT2AA (a,i,a1,i1) * t1aibj (a1,i1,b,j)
               taibj  (a,i,b,j)  = t2aibj (a,i,b,j)

               t2aibj (a,i,b,j)  = taiai (a,i,a1,i1) * VCACT2AB (a1,i1,b,j)
               taibj  (a,i,b,j) += t2aibj (a,i,b,j)

               laibj (a,i,b,j) += taibj (a,i,b,j)
            ENDDO j
         ENDDO i1

         DO j
            PREPARE  VCHACT2AB (a,i,b,j) += laibj (a,i,b,j)
         ENDDO j

         DEALLOCATE  laibj (a,i,b,*)

      ENDPARDO  a, i, b, a1
#
#           __ _    __    __    _ __
#           b1,j  a,b1    b1,i  b,b1
#          G__ _ l  __ + G__   l_ __
#           j1,b  i,j1    j1,a  j,j1
#        
#
      PARDO  a, j, b, b1

         ALLOCATE  laibj (a,*,b,j)

         DO j1
            REQUEST  HBAR_AJIB_aaaa (j,b,b1,j1) j1
            REQUEST  VCACT2AA       (b,j,b1,j1) j1
            tbjbj  (b1,j1,b,j) = VCACT2AA (b,j,b1,j1)
            t1bjbj (b1,j1,b,j) = HBAR_AJIB_aaaa (j,b,b1,j1)
            DO i
               REQUEST  HBAR_AJIB_aabb (i,a,b1,j1) i
               REQUEST  VCACT2AB       (a,i,b1,j1) i

               t1aibj (a,i,b,j)  = HBAR_AJIB_aabb (i,a,b1,j1) * tbjbj (b1,j1,b,j)
               taibj  (a,i,b,j)  = t1aibj (a,i,b,j)

               t1aibj (a,i,b,j)  = VCACT2AB (a,i,b1,j1) * t1bjbj (b1,j1,b,j)
               taibj  (a,i,b,j) += t1aibj (a,i,b,j)

               laibj (a,i,b,j) += taibj (a,i,b,j)
            ENDDO i
         ENDDO j1

         DO i
            PREPARE  VCHACT2AB (a,i,b,j) += laibj (a,i,b,j)
         ENDDO i

         DEALLOCATE  laibj (a,*,b,j)

      ENDPARDO  a, j, b, b1
#
#             __    __                   __
#           i,b1  a,b1         _ __   i1,b1
#         -G   _ l   _ - (a,i1|b,b1) N  _
#           i1,b  i1,j                i,j
#        
#
      PARDO  a, i, b, b1

         ALLOCATE  laibj  (a,i,b,*)
         ALLOCATE  lbjai  (b,*,a,i)

         DO i1
            REQUEST             Vbbai          (b1,b,a,i1) i1
            tpqpq (a,b,i1,b1) = Vbbai          (b1,b,a,i1)
            DO j
               REQUEST             Niibj (i,b1,i1,j) j
               tpppp (i1,b1,i,j) = Niibj (i,b1,i1,j)

               t1aibj (a,i,b,j)  = tpqpq (a,b,i1,b1) * tpppp (i1,b1,i,j)
               t1aibj (a,i,b,j) *= -1.0
               taibj  (a,i,b,j) += t1aibj (a,i,b,j)

               laibj  (a,i,b,j) += taibj (a,i,b,j)
            ENDDO j
         ENDDO i1

         DO j
            lbjai (b,j,a,i)  = laibj (a,i,b,j)
            PREPARE  VCHACT2AB (a,i,b,j) += laibj (a,i,b,j)
            PREPARE  VCHACT2AB (b,j,a,i) += lbjai (b,j,a,i)
         ENDDO j

         DEALLOCATE  laibj  (a,i,b,*)
         DEALLOCATE  lbjai  (b,*,a,i)

      ENDPARDO  a, i, b, b1

      PARDO  a, i, b, b1

         ALLOCATE  laibj (a,i,b,*)

         DO i1
            REQUEST             HBAR_AJIB_iibb (i,i1,b1,b) i1
            DO j
               REQUEST              VCACT2AB (a,i1,b1,j) j

               t1aibj (a,i,b,j)  = HBAR_AJIB_iibb (i,i1,b1,b) * VCACT2AB (a,i1,b1,j)
               taibj  (a,i,b,j)  = t1aibj (a,i,b,j)

               laibj (a,i,b,j) += taibj (a,i,b,j)
            ENDDO j
         ENDDO i1

         DO j
            PREPARE  VCHACT2AB (a,i,b,j) += laibj (a,i,b,j)
         ENDDO j

         DEALLOCATE  laibj (a,i,b,*)

      ENDPARDO  a, i, b, b1
#
#           _        __                __   
#           j,a1  a1,b1         _ __   j1,a1
#         -G__   l  __  - (a1,a|b,j1) N_  
#           j1,a  i,j1                 j,i
#        
#
      PARDO  a, j, b, a1

         ALLOCATE  laibj (a,*,b,j)

         DO j1
            REQUEST             HBAR_AJIB_iibb (j,j1,a1,a) j1
            DO i
               REQUEST              VCACT2AB (a1,i,b,j1) i

               t1aibj (a,i,b,j)  = HBAR_AJIB_iibb (j,j1,a1,a) * VCACT2AB (a1,i,b,j1)
               taibj  (a,i,b,j)  = t1aibj (a,i,b,j)

               laibj (a,i,b,j) += taibj (a,i,b,j)
            ENDDO i
         ENDDO j1

         DO i
            PREPARE  VCHACT2AB (a,i,b,j) += laibj (a,i,b,j)
         ENDDO i

         DEALLOCATE  laibj (a,*,b,j)

      ENDPARDO  a, j, b, a1
#
#
#             _      _                      _
#           i,j    a,b             _ __   i,j
#          G   __ l   __  +  (a,i1|b,j1) N   __
#           i1,j1  i1,j1                  i1,j1
#
#
      PARDO  a, i, b, j1

         ALLOCATE  laibj (a,i,b,*)

         DO i1
            REQUEST  VCACT2AB (a,i1,b,j1) i1
            REQUEST  Vpiqj    (a,i1,b,j1) i1
            DO j
               REQUEST  HBAR_iijj (i,i1,j,j1) j
               GET      Niijj     (i,i1,j,j1)

               taibj (a,i,b,j)  = HBAR_iijj (i,i1,j,j1) * VCACT2AB (a,i1,b,j1) # Check!
               laibj (a,i,b,j) += taibj (a,i,b,j)

               taibj (a,i,b,j)  = Vpiqj (a,i1,b,j1) * Niijj (i,i1,j,j1) # Check!
               laibj (a,i,b,j) += taibj (a,i,b,j)
            ENDDO j
         ENDDO i1

         DO j
            PREPARE  VCHACT2AB (a,i,b,j) += laibj (a,i,b,j)
         ENDDO j

         DEALLOCATE  laibj (a,i,b,*)

      ENDPARDO  a, i, b, j1
#
#
#          _   b   _   a
#          H  l_ + H__l
#           ia j    jb i
#
#
      PARDO  a, i, b, j

         GET         VCACT1A  (b,j)
         GET         VCACT1A  (a,i)
         tai (a,i) = LHBAR_ia (i,a)
         tbj (b,j) = LHBAR_jb (j,b)

         taibj  (a,i,b,j)  = tai (a,i) ^ VCACT1A (b,j)
         t1aibj (a,i,b,j)  = VCACT1A (a,i) ^ tbj (b,j)
         taibj  (a,i,b,j) += t1aibj (a,i,b,j)

         PREPARE  VCHACT2AB (a,i,b,j) += taibj (a,i,b,j)

      ENDPARDO  a, i, b, j
#
#
#          ...ready!
#
#
#     -----------------
      ENDPROC  L2AB_OPT
#-------------------------------------------------------------------------



#-------------------------------------------------------------------------
#
#     --------------
      PROC  L2AA_OPT
#     --------------
#
#
#           1   i ,i1  i2,i3     1                i ,i1
#          --- G      l       + --- (a,i2|a1,i3) N
#           2   i2,i3  a ,a1     2                i2,i3
#
#
      PARDO  a, a1, i2, i3

         WHERE i2 < i3

            REQUEST  VCACT2AA (a,i2,a1,i3) i3
            REQUEST  VSpipi   (a,i2,a1,i3) i3

            DO i
            DO i1
               REQUEST  HBAR_iiii (i,i2,i1,i3) i1
               GET      Niiii     (i,i2,i1,i3)

               taiai  (a,i,a1,i1)  = HBAR_iiii (i,i2,i1,i3) * VCACT2AA (a,i2,a1,i3)
               taiai  (a,i,a1,i1) *= 0.25
               t1aiai (a,i,a1,i1)  = taiai (a,i,a1,i1)

               taiai  (a,i,a1,i1)  = VSpipi (a,i2,a1,i3) * Niiii (i,i2,i1,i3)
               taiai  (a,i,a1,i1) *= 0.25
               t1aiai (a,i,a1,i1) += taiai (a,i,a1,i1)

               PUT  D2aa (a,i,a1,i1) += t1aiai (a,i,a1,i1)
            ENDDO i1
            ENDDO i

      ENDPARDO  a, a1, i2, i3

      PARDO  a, a1, i2, i3

         WHERE i2 == i3

            REQUEST  VCACT2AA (a,i2,a1,i3) i3
            REQUEST  VSpipi   (a,i2,a1,i3) i3

            DO i
            DO i1
               REQUEST  HBAR_iiii (i,i2,i1,i3) i1
               GET      Niiii     (i,i2,i1,i3)

               taiai  (a,i,a1,i1)  = HBAR_iiii (i,i2,i1,i3) * VCACT2AA (a,i2,a1,i3)
               taiai  (a,i,a1,i1) *= 0.125
               t1aiai (a,i,a1,i1)  = taiai (a,i,a1,i1)

               taiai  (a,i,a1,i1)  = VSpipi (a,i2,a1,i3) * Niiii (i,i2,i1,i3)
               taiai  (a,i,a1,i1) *= 0.125
               t1aiai (a,i,a1,i1) += taiai (a,i,a1,i1)

               PUT  D2aa (a,i,a1,i1) += t1aiai (a,i,a1,i1)
            ENDDO i1
            ENDDO i

      ENDPARDO  a, a1, i2, i3
#
#
#                        -                          -
#                       |  a2,i1  i,i2    b,i1  i,j  |
#          P(i,i1|a,a1) | G      l     + G     l     |
#                       |  i2,a1  a,a2    j,a1  a,b  |
#                        -                          -
#
#
      PARDO  a1, i1, a2, i2

         REQUEST                HBAR_AJIB_aaaa (i1,a1,a2,i2) i2
         t1aiai (a2,i2,a1,i1) = HBAR_AJIB_aaaa (i1,a1,a2,i2)

         DO i
         DO a
            REQUEST             VCACT2AA (a,i,a2,i2) a
            taiai (a,i,a1,i1) = VCACT2AA (a,i,a2,i2) * t1aiai (a2,i2,a1,i1)
            PUT  D2aa (a,i,a1,i1) += taiai (a,i,a1,i1)
         ENDDO a
         ENDDO i

      ENDPARDO  a1, i1, a2, i2

      PARDO  a1, i1, b, j

         REQUEST             HBAR_AJIB_aabb (i1,a1,b,j) j
         tbjai (b,j,a1,i1) = HBAR_AJIB_aabb (i1,a1,b,j)

         DO i
         DO a
            REQUEST             VCACT2AB (a,i,b,j) a
            taiai (a,i,a1,i1) = VCACT2AB (a,i,b,j) * tbjai (b,j,a1,i1)
            PUT  D2aa (a,i,a1,i1) += taiai (a,i,a1,i1)
         ENDDO a
         ENDDO i

      ENDPARDO  a1, i1, b, j
#
#
#                   -                                             -
#                  |  a2,i  i1          i,i2                       |
#          P(i,i1) | G     l  - H      l     - (a,i|a1,i2) F       |
#                  |  a1,a  a2   i1,i2  a,a1                i2,i1  |
#                   -                                             -
#
#
      PARDO  a, a1, a2, i
      WHERE a < a1

         REQUEST             HBAR_AIBC_aaaa (a2,a1,i,a) a
         tpppp (a,i,a1,a2) = HBAR_AIBC_aaaa (a2,a1,i,a)

         DO i1
            GET  VCACT1A (a2,i1)
            taiai  (a,i,a1,i1)  = tpppp (a,i,a1,a2) * VCACT1A (a2,i1)
            PUT  D2aa (a,i,a1,i1) += taiai (a,i,a1,i1)
         ENDDO i1

      ENDPARDO  a, a1, a2, i

      PARDO  a, a1, a2, i
      WHERE a == a1

         REQUEST             HBAR_AIBC_aaaa (a2,a1,i,a) a
         tpppp (a,i,a1,a2) = HBAR_AIBC_aaaa (a2,a1,i,a)

         DO i1
            GET  VCACT1A (a2,i1)

            taiai  (a,i,a1,i1)  = tpppp (a,i,a1,a2) * VCACT1A (a2,i1)
            t1aiai (a,i1,a1,i)  = taiai (a,i,a1,i1)
            t1aiai (a,i1,a1,i) *= -1.0

            PREPARE  VCHACT2AA (a,i,a1,i1) += taiai  (a,i,a1,i1)
            PREPARE  VCHACT2AA (a,i1,a1,i) += t1aiai (a,i1,a1,i)
         ENDDO i1

      ENDPARDO  a, a1, a2, i

      PARDO  a, i, a1, i2

         REQUEST  VCACT2AA (a,i,a1,i2) i2
         REQUEST  VSpipi   (a,i,a1,i2) i2

         DO i1
            t1aiai (a,i,a1,i1)  = VCACT2AA (a,i,a1,i2) * LHBAR_ii (i1,i2)
            taiai  (a,i,a1,i1)  = t1aiai (a,i,a1,i1)

            t1aiai (a,i,a1,i1)  = VSpipi (a,i,a1,i2) * LFmi_a (i2,i1)
            taiai  (a,i,a1,i1) += t1aiai (a,i,a1,i1)

            taiai  (a,i,a1,i1) *= -0.50
            PUT  D2aa (a,i,a1,i1) += taiai (a,i,a1,i1)
         ENDDO i1

      ENDPARDO  a, i, a1, i2
#
#
#                   -                                             -
#                  |  i1,i  i2          i,i1                       |
#          P(a,a1) |-G     l  + H      l     - (a,i|a2,i1) F       |
#                  |  i2,a  a1   a2,a1  a,a2                a2,a1  |
#                   -                                             -
#
#
      PARDO  a, i, i1, i2

         REQUEST             HBAR_JKIA_aaaa (i1,i2,i,a) i2
         tpppp (a,i,i2,i1) = HBAR_JKIA_aaaa (i1,i2,i,a)

         DO a1
            GET  VCACT1A (a1,i2)
            taiai  (a,i,a1,i1)  = tpppp (a,i,i2,i1) * VCACT1A (a1,i2)
            t1aiai (a1,i,a,i1)  = taiai (a,i,a1,i1)
            taiai  (a,i,a1,i1) *= -1.0

            PREPARE  VCHACT2AA (a,i,a1,i1) += taiai  (a,i,a1,i1)
            PREPARE  VCHACT2AA (a1,i,a,i1) += t1aiai (a1,i,a,i1)
         ENDDO a1

      ENDPARDO  a, i, i1, i2

      PARDO  a, i, a2, i1

         REQUEST  VCACT2AA (a,i,a2,i1) i1
         REQUEST  VSpipi   (a,i,a2,i1) i1

         DO a1
            t1aiai (a,i,a1,i1)  = VCACT2AA (a,i,a2,i1) * LHBAR_aa (a2,a1)
            taiai  (a,i,a1,i1)  = t1aiai (a,i,a1,i1)

            t1aiai (a,i,a1,i1)  = VSpipi (a,i,a2,i1) * LFae_a (a2,a1)
            taiai  (a,i,a1,i1) += t1aiai (a,i,a1,i1)

            taiai  (a,i,a1,i1) *=  0.50
            PUT  D2aa (a,i,a1,i1) += taiai (a,i,a1,i1)
         ENDDO a1

      ENDPARDO  a, i, a2, i1
#
#
#                          a2,i2
#          - (a,i2|a1,a2) N
#                          i1,i 
#
#
      PARDO  a, i, a1, a2

         ALLOCATE  llaiai (a,i,a1,*)

         DO i2
            REQUEST  VSaaai (a1,a2,a,i2) i2
            tpppp (a,a2,a1,i2) = VSaaai (a1,a2,a,i2)
            DO i1
               REQUEST  Niiai (i1,a2,i,i2) i1
               t1pppp (a2,i,i2,i1) = Niiai (i1,a2,i,i2)
               taiai (a,i,a1,i1)  = tpppp (a,a2,a1,i2) * t1pppp (a2,i,i2,i1)
               llaiai (a,i,a1,i1) -= taiai (a,i,a1,i1)
            ENDDO i1
         ENDDO i2

         DO i1
            PREPARE  VCHACT2AA (a,i,a1,i1) += llaiai (a,i,a1,i1)
         ENDDO i1

         DEALLOCATE  llaiai (a,i,a1,*)

      ENDPARDO  a, i, a1, a2
#
#
#                       _   i
#          P(i,i1|a,a1) H  l
#                        ia a1
#
#
      PARDO  a, i, a1, i1

         GET         VCACT1A  (a1,i1)
         tai (a,i) = LHBAR_ia (i,a)

         taiai (a,i,a1,i1) = tai (a,i) ^ VCACT1A (a1,i1)

         PUT  D2aa (a,i,a1,i1) += taiai (a,i,a1,i1)

      ENDPARDO  a, i, a1, i1
#
#
#          ...ready!
#
#
#     -----------------
      ENDPROC  L2AA_OPT
#-------------------------------------------------------------------------


#-------------------------------------------------------------------------
#
     PROC UPDATE
#    ----------- 
#
     PARDO a, a1, i, i1
           REQUEST            VCHACT2AA(a,i,a1,i1) i1
           Taiai(a,i,a1,i1) = VCHACT2AA(a,i,a1,i1)
 
            DO k20 
               if k20 == spdim 
                  t2aiaiS(a,i,a1,i1,k20)        = Taiai(a,i,a1,i1) 
                  PREPARE VCH2AA(a,i,a1,i1,k20) = t2aiaiS(a,i,a1,i1,k20) 
               endif 
            ENDDO k20 
 
     ENDPARDO a, a1, i, i1
#
     PARDO a, b, i, j
#
           REQUEST          VCHACT2AB(a,i,b,j) j
           Taibj(a,i,b,j) = VCHACT2AB(a,i,b,j)
#
            DO k20 
               if k20 == spdim 
                  t2aibjS(a,i,b,j,k20)        = Taibj(a,i,b,j) 
                  PREPARE VCH2AB(a,i,b,j,k20) = t2aibjS(a,i,b,j,k20) 
               endif 
            ENDDO k20 
#
     ENDPARDO a, b, i, j
#
#    one particle amplitudes
#
     PARDO a, i 
#
           GET        VCHACT1A(a,i)
           tai(a,i) = VCHACT1A(a,i)
#
            DO k20 
               if k20 == spdim 
                  t2aiS(a,i,k20)     = tai(a,i) 
                  PUT VCH1A(a,i,k20) = t2aiS(a,i,k20) 
               endif 
            ENDDO k20 
#
     ENDPARDO a, i 
#
     ENDPROC UPDATE
#    --------------
#
# ---------------------------------------------------------------------------- 
#
#
     PROC VCHACT_ZERO
#    ---------------
#
          PARDO a, i
                tai(a,i) = 0.0
                PUT VCHACT1A(a,i) = tai(a,i)
          ENDPARDO a, i
#
          PARDO a, a1, i, i1
                Taiai(a,i,a1,i1) = 0.0
                PREPARE VCHACT2AA(a,i,a1,i1) = Taiai(a,i,a1,i1)
          ENDPARDO a, a1, i, i1
#
          PARDO a, b, i, j
                Taibj(a,i,b,j) = 0.0
                PREPARE VCHACT2AB(a,i,b,j) = Taibj(a,i,b,j)
          ENDPARDO a, b, i, j
#
     ENDPROC VCHACT_ZERO
#    ------------------- 
#
# ---------------------------------------------------------------------------- 
#
      PROC ConstrA_a 
#     -------------- 
#
      PARDO a, i  
            DO k20 
            IF k20 == spdim  
               GET         VCH1A(a,i,k20)  
               t1ai(a,i) = VCH1A(a,i,k20) 
               DO k21 
               if k21 <= spdim  
                  DO j20 
                     IF j20 == k21 
                        GET                VC1A(a,i,k21) 
                        tai(a,i)         = VC1A(a,i,k21) 
                        etemp            = tai(a,i)*t1ai(a,i)
                        etemp           *= 2.0  
                        t20(j20,k20)     = etemp 
                        Lax(j20,k20) += t20(j20,k20) 
                     endif # j20 == k21 
                  ENDDO j20 
               endif 
               ENDDO k21 
            endif 
            ENDDO k20 
      ENDPARDO a, i  
#
      PARDO a, i  
            DO k21 
            IF k21 == spdim  
                  DO j20 
                     IF j20 == k21 
                        GET          VC1A(a,i,k21) 
                        tai(a,i)   = VC1A(a,i,k21) 
                        DO k20 
                          if k20 < spdim  
                             GET                VCH1A(a,i,k20)  
                             t1ai(a,i)        = VCH1A(a,i,k20) 
                             etemp            = tai(a,i)*t1ai(a,i)
                             etemp           *= 2.0  
                             t20(j20,k20)     = etemp 
                             Lax(j20,k20) += t20(j20,k20) 
                          endif 
                        ENDDO k20 
                     endif # j20 == k21 
                  ENDDO j20 
            endif 
            ENDDO k21 
      ENDPARDO a, i  
#
      ENDPROC ConstrA_a 
#     ----------------- 

# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
      PROC ConstrA_aa 
#     --------------- 
#
      PARDO a, i, a1, i1 
         WHERE a < a1 
         WHERE i < i1 
            DO k20 
            IF k20 == spdim  
               request             VCH2AA(a,i,a1,i1,k20) i1 
               t1aiai(a,i,a1,i1) = VCH2AA(a,i,a1,i1,k20) 
               DO k21 
               if k21 <= spdim  
                  DO j20 
                     IF j20 == k21 
                        request             VC2AA(a,i,a1,i1,k21) i1
                        taiai(a,i,a1,i1)  = VC2AA(a,i,a1,i1,k21) 
                        etemp             = taiai(a,i,a1,i1)*t1aiai(a,i,a1,i1)
                        etemp            *= 2.0  
                        t20(j20,k20)      = etemp 
                        Lax(j20,k20)  += t20(j20,k20) 
                     endif # j20 == k21 
                  ENDDO j20 
               endif 
               ENDDO k21 
            endif 
            ENDDO k20 
      ENDPARDO a, i, a1, i1 
#
      PARDO a, i, a1, i1 
         WHERE a <  a1 
         WHERE i == i1 
            DO k20 
            IF k20 == spdim  
               request             VCH2AA(a,i,a1,i1,k20) i1 
               t1aiai(a,i,a1,i1) = VCH2AA(a,i,a1,i1,k20) 
               DO k21 
               if k21 <= spdim  
                  DO j20 
                     IF j20 == k21 
                        request             VC2AA(a,i,a1,i1,k21) i1
                        taiai(a,i,a1,i1)  = VC2AA(a,i,a1,i1,k21) 
                        etemp             = taiai(a,i,a1,i1)*t1aiai(a,i,a1,i1)
                        t20(j20,k20)      = etemp 
                        Lax(j20,k20)  += t20(j20,k20) 
                     endif # j20 == k21 
                  ENDDO j20 
               endif 
               ENDDO k21 
            endif 
            ENDDO k20 
      ENDPARDO a, i, a1, i1 
#
      PARDO a, i, a1, i1 
         WHERE a == a1 
         WHERE i <  i1 
            DO k20 
            IF k20 == spdim  
               request             VCH2AA(a,i,a1,i1,k20) i1 
               t1aiai(a,i,a1,i1) = VCH2AA(a,i,a1,i1,k20) 
               DO k21 
               if k21 <= spdim  
                  DO j20 
                     IF j20 == k21 
                        request             VC2AA(a,i,a1,i1,k21) i1
                        taiai(a,i,a1,i1)  = VC2AA(a,i,a1,i1,k21) 
                        etemp             = taiai(a,i,a1,i1)*t1aiai(a,i,a1,i1)
                        t20(j20,k20)      = etemp 
                        Lax(j20,k20)  += t20(j20,k20) 
                     endif # j20 == k21 
                  ENDDO j20 
               endif 
               ENDDO k21 
            endif 
            ENDDO k20 
      ENDPARDO a, i, a1, i1 
#
      PARDO a, i, a1, i1 
         WHERE a == a1 
         WHERE i == i1 
            DO k20 
            IF k20 == spdim  
               request             VCH2AA(a,i,a1,i1,k20) i1 
               t1aiai(a,i,a1,i1) = VCH2AA(a,i,a1,i1,k20) 
               DO k21 
               if k21 <= spdim  
                  DO j20 
                     IF j20 == k21 
                        request             VC2AA(a,i,a1,i1,k21) i1
                        taiai(a,i,a1,i1)  = VC2AA(a,i,a1,i1,k21) 
                        etemp             = taiai(a,i,a1,i1)*t1aiai(a,i,a1,i1)
                        etemp            *= 0.5
                        t20(j20,k20)      = etemp 
                        Lax(j20,k20)  += t20(j20,k20) 
                     endif # j20 == k21 
                  ENDDO j20 
               endif 
               ENDDO k21 
            endif 
            ENDDO k20 
      ENDPARDO a, i, a1, i1 
#
      PARDO a, i, a1, i1 
         WHERE a < a1 
         WHERE i < i1 
            DO k21 
            IF k21 == spdim  
                  DO j20 
                     IF j20 == k21 
                        request             VC2AA(a,i,a1,i1,k21) i1
                        taiai(a,i,a1,i1)  = VC2AA(a,i,a1,i1,k21) 
                        DO k20 
                          if k20 < spdim  
                             request             VCH2AA(a,i,a1,i1,k20) i1 
                             t1aiai(a,i,a1,i1) = VCH2AA(a,i,a1,i1,k20) 
                             etemp             = taiai(a,i,a1,i1)*t1aiai(a,i,a1,i1)
                             etemp            *= 2.0  
                             t20(j20,k20)      = etemp 
                             Lax(j20,k20)  += t20(j20,k20) 
                          endif 
                        ENDDO k20 
                     endif # j20 == k21 
                  ENDDO j20 
            endif 
            ENDDO k21 
      ENDPARDO a, i, a1, i1 
#
      PARDO a, i, a1, i1 
         WHERE a == a1 
         WHERE i <  i1 
            DO k21 
            IF k21 == spdim  
                  DO j20 
                     IF j20 == k21 
                        request             VC2AA(a,i,a1,i1,k21) i1
                        taiai(a,i,a1,i1)  = VC2AA(a,i,a1,i1,k21) 
                        DO k20 
                          if k20 < spdim  
                             request             VCH2AA(a,i,a1,i1,k20) i1 
                             t1aiai(a,i,a1,i1) = VCH2AA(a,i,a1,i1,k20) 
                             etemp             = taiai(a,i,a1,i1)*t1aiai(a,i,a1,i1)
                             t20(j20,k20)      = etemp 
                             Lax(j20,k20)  += t20(j20,k20) 
                          endif 
                        ENDDO k20 
                     endif # j20 == k21 
                  ENDDO j20 
            endif 
            ENDDO k21 
      ENDPARDO a, i, a1, i1 
#
      PARDO a, i, a1, i1 
         WHERE a <  a1 
         WHERE i == i1 
            DO k21 
            IF k21 == spdim  
                  DO j20 
                     IF j20 == k21 
                        request             VC2AA(a,i,a1,i1,k21) i1
                        taiai(a,i,a1,i1)  = VC2AA(a,i,a1,i1,k21) 
                        DO k20 
                          if k20 < spdim  
                             request             VCH2AA(a,i,a1,i1,k20) i1 
                             t1aiai(a,i,a1,i1) = VCH2AA(a,i,a1,i1,k20) 
                             etemp             = taiai(a,i,a1,i1)*t1aiai(a,i,a1,i1)
                             t20(j20,k20)      = etemp 
                             Lax(j20,k20)  += t20(j20,k20) 
                          endif 
                        ENDDO k20 
                     endif # j20 == k21 
                  ENDDO j20 
            endif 
            ENDDO k21 
      ENDPARDO a, i, a1, i1 
#
      PARDO a, i, a1, i1 
         WHERE a == a1 
         WHERE i == i1 
            DO k21 
            IF k21 == spdim  
                  DO j20 
                     IF j20 == k21 
                        request             VC2AA(a,i,a1,i1,k21) i1
                        taiai(a,i,a1,i1)  = VC2AA(a,i,a1,i1,k21) 
                        DO k20 
                          if k20 < spdim  
                             request             VCH2AA(a,i,a1,i1,k20) i1 
                             t1aiai(a,i,a1,i1) = VCH2AA(a,i,a1,i1,k20) 
                             etemp             = taiai(a,i,a1,i1)*t1aiai(a,i,a1,i1)
                             etemp            *= 0.5
                             t20(j20,k20)      = etemp 
                             Lax(j20,k20)  += t20(j20,k20) 
                          endif 
                        ENDDO k20 
                     endif # j20 == k21 
                  ENDDO j20 
            endif 
            ENDDO k21 
      ENDPARDO a, i, a1, i1 
#
      ENDPROC ConstrA_aa 
#     ------------------ 

# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
      PROC ConstrA_ab 
#     --------------- 
#
      PARDO a, i, b1, j1 
            DO k20 
            IF k20 == spdim  
               request             VCH2AB(a,i,b1,j1,k20) j1 
               t1aibj(a,i,b1,j1) = VCH2AB(a,i,b1,j1,k20) 
               DO k21 
               if k21 <= spdim  
                  DO j20 
                     IF j20 == k21 
                        request             VC2AB(a,i,b1,j1,k21) j1
                        taibj(a,i,b1,j1)  = VC2AB(a,i,b1,j1,k21) 
                        etemp             = taibj(a,i,b1,j1)*t1aibj(a,i,b1,j1)
                        t20(j20,k20)      = etemp 
                        Lax(j20,k20)  += t20(j20,k20) 
                     endif # j20 == k21 
                  ENDDO j20 
               endif 
               ENDDO k21 
            endif 
            ENDDO k20 
      ENDPARDO a, i, b1, j1 
#
      PARDO a, i, b1, j1 
            DO k21 
            IF k21 == spdim  
                  DO j20 
                     IF j20 == k21 
                        request             VC2AB(a,i,b1,j1,k21) j1
                        taibj(a,i,b1,j1)  = VC2AB(a,i,b1,j1,k21) 
                        DO k20 
                          if k20 < spdim  
                             request             VCH2AB(a,i,b1,j1,k20) j1 
                             t1aibj(a,i,b1,j1) = VCH2AB(a,i,b1,j1,k20) 
                             etemp             = taibj(a,i,b1,j1)*t1aibj(a,i,b1,j1)
                             t20(j20,k20)      = etemp 
                             Lax(j20,k20)  += t20(j20,k20) 
                          endif 
                        ENDDO k20 
                     endif # j20 == k21 
                  ENDDO j20 
            endif 
            ENDDO k21 
      ENDPARDO a, i, b1, j1 
#
      ENDPROC ConstrA_ab 
#     ------------------ 

# ---------------------------------------------------------------------------- 
#
# ----------------------------------------------------------------------------- 
#
      PROC Aconstr_tr 
#     --------------- 
#
      do spdim 
      if spdim < 13 
#
      create ax 
      allocate Lax(*,*)
      execute load_balance_on  
      execute sip_barrier 
      CALL ConstrA_aa 
     #CALL ConstrA_bb 
      CALL ConstrA_ab 
      CALL ConstrA_a 
     #CALL ConstrA_b 
      execute server_barrier 
      execute load_balance_off  
      DO kindex20                        
      DO jindex20
           #t20(jindex20,kindex20) = Lax(jindex20,kindex20)
            PUT ax(jindex20,kindex20) += Lax(jindex20,kindex20)
      ENDDO jindex20
      ENDDO kindex20 
      execute server_barrier 
#
       DO kindex20
       DO jindex20
          if kindex20 == spdim  
          if jindex20 <= spdim  
             GET                         ax(jindex20,kindex20) 
             sMAT20(jindex20,kindex20) = ax(jindex20,kindex20) 
          endif 
          endif 
          if kindex20 <= spdim  
          if jindex20 == spdim  
             GET                         ax(jindex20,kindex20) 
             sMAT20(jindex20,kindex20) = ax(jindex20,kindex20) 
          endif 
          endif 
       ENDDO jindex20
       ENDDO kindex20
       execute sip_barrier 
#
       if spdim == 2
          DO kindex20
          DO jindex20
          DO kindex2
          DO jindex2
             if kindex20 == kindex2 
             if jindex20 == jindex2 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp2(jindex2,kindex2)    = etemp3 
                sMAT2(jindex2,kindex2) = atemp2(jindex2,kindex2)   
             endif 
             endif 
          ENDDO jindex2
          ENDDO kindex2
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 3
          DO kindex20
          DO jindex20
          DO kindex3
          DO jindex3
             if kindex20 == kindex3 
             if jindex20 == jindex3 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp3(jindex3,kindex3)    = etemp3 
                sMAT3(jindex3,kindex3) = atemp3(jindex3,kindex3)   
             endif 
             endif 
          ENDDO jindex3
          ENDDO kindex3
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 4
          DO kindex20
          DO jindex20
          DO kindex4
          DO jindex4
             if kindex20 == kindex4 
             if jindex20 == jindex4 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp4(jindex4,kindex4)    = etemp3 
                sMAT4(jindex4,kindex4) = atemp4(jindex4,kindex4)   
             endif 
             endif 
          ENDDO jindex4
          ENDDO kindex4
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 5
          DO kindex20
          DO jindex20
          DO kindex5
          DO jindex5
             if kindex20 == kindex5 
             if jindex20 == jindex5 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp5(jindex5,kindex5)    = etemp3 
                sMAT5(jindex5,kindex5) = atemp5(jindex5,kindex5)   
             endif 
             endif 
          ENDDO jindex5
          ENDDO kindex5
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 6
          DO kindex20
          DO jindex20
          DO kindex6
          DO jindex6
             if kindex20 == kindex6 
             if jindex20 == jindex6 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp6(jindex6,kindex6)    = etemp3 
                sMAT6(jindex6,kindex6) = atemp6(jindex6,kindex6)   
             endif 
             endif 
          ENDDO jindex6
          ENDDO kindex6
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 7
          DO kindex20
          DO jindex20
          DO kindex7
          DO jindex7
             if kindex20 == kindex7 
             if jindex20 == jindex7 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp7(jindex7,kindex7)    = etemp3 
                sMAT7(jindex7,kindex7) = atemp7(jindex7,kindex7)   
             endif 
             endif 
          ENDDO jindex7
          ENDDO kindex7
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 8
          DO kindex20
          DO jindex20
          DO kindex8
          DO jindex8
             if kindex20 == kindex8 
             if jindex20 == jindex8 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp8(jindex8,kindex8)    = etemp3 
                sMAT8(jindex8,kindex8) = atemp8(jindex8,kindex8)   
             endif 
             endif 
          ENDDO jindex8
          ENDDO kindex8
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 9
          DO kindex20
          DO jindex20
          DO kindex9
          DO jindex9
             if kindex20 == kindex9 
             if jindex20 == jindex9 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp9(jindex9,kindex9)    = etemp3 
                sMAT9(jindex9,kindex9) = atemp9(jindex9,kindex9)   
             endif 
             endif 
          ENDDO jindex9
          ENDDO kindex9
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 10  
          DO kindex20
          DO jindex20
          DO kindex10 
          DO jindex10 
             if kindex20 == kindex10  
             if jindex20 == jindex10 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp10(jindex10,kindex10)    = etemp3 
                sMAT10(jindex10,kindex10) = atemp10(jindex10,kindex10)   
             endif 
             endif 
          ENDDO jindex10 
          ENDDO kindex10 
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 11  
          DO kindex20
          DO jindex20
          DO kindex11 
          DO jindex11 
             if kindex20 == kindex11  
             if jindex20 == jindex11 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp11(jindex11,kindex11)    = etemp3 
                sMAT11(jindex11,kindex11) = atemp11(jindex11,kindex11)   
             endif 
             endif 
          ENDDO jindex11 
          ENDDO kindex11 
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 12  
          DO kindex20
          DO jindex20
          DO kindex12 
          DO jindex12 
             if kindex20 == kindex12  
             if jindex20 == jindex12 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp12(jindex12,kindex12)    = etemp3 
                sMAT12(jindex12,kindex12) = atemp12(jindex12,kindex12)   
             endif 
             endif 
          ENDDO jindex12 
          ENDDO kindex12 
          ENDDO jindex20
          ENDDO kindex20
       endif
#
      execute sip_barrier 
      deallocate Lax(*,*)
      delete ax 
#
      endif # spdim < 13 
      enddo spdim 
#
     ENDPROC Aconstr_tr 
#    ------------------ 
#
# ----------------------------------------------------------------------------- 
#
# ----------------------------------------------------------------------------- 
#
      PROC Aconstr
#     ------------ 
#
      create ax 
      allocate Lax(*,*)
      execute load_balance_on  
      execute sip_barrier 
      CALL ConstrA_aa 
     #CALL ConstrA_bb 
      CALL ConstrA_ab 
      CALL ConstrA_a 
     #CALL ConstrA_b 
      execute server_barrier 
      execute load_balance_off  
      DO kindex20
      DO jindex20
           #t20(jindex20,kindex20) = Lax(jindex20,kindex20)
            PUT ax(jindex20,kindex20) += Lax(jindex20,kindex20)
      ENDDO jindex20
      ENDDO kindex20

      execute sip_barrier
#
       DO kindex20
       DO jindex20
          if kindex20 == spdim  
          if jindex20 <= spdim  
             GET                         ax(jindex20,kindex20) 
             sMAT20(jindex20,kindex20) = ax(jindex20,kindex20) 
          endif 
          endif 
          if kindex20 <= spdim  
          if jindex20 == spdim  
             GET                         ax(jindex20,kindex20) 
             sMAT20(jindex20,kindex20) = ax(jindex20,kindex20) 
          endif 
          endif 
       ENDDO jindex20
       ENDDO kindex20
       execute sip_barrier 
#
       if spdim == 2
          DO kindex20
          DO jindex20
          DO kindex2
          DO jindex2
             if kindex20 == kindex2 
             if jindex20 == jindex2 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp2(jindex2,kindex2)    = etemp3 
                sMAT2(jindex2,kindex2) = atemp2(jindex2,kindex2)   
             endif 
             endif 
          ENDDO jindex2
          ENDDO kindex2
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 3
          DO kindex20
          DO jindex20
          DO kindex3
          DO jindex3
             if kindex20 == kindex3 
             if jindex20 == jindex3 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp3(jindex3,kindex3)    = etemp3 
                sMAT3(jindex3,kindex3) = atemp3(jindex3,kindex3)   
             endif 
             endif 
          ENDDO jindex3
          ENDDO kindex3
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 4
          DO kindex20
          DO jindex20
          DO kindex4
          DO jindex4
             if kindex20 == kindex4 
             if jindex20 == jindex4 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp4(jindex4,kindex4)    = etemp3 
                sMAT4(jindex4,kindex4) = atemp4(jindex4,kindex4)   
             endif 
             endif 
          ENDDO jindex4
          ENDDO kindex4
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 5
          DO kindex20
          DO jindex20
          DO kindex5
          DO jindex5
             if kindex20 == kindex5 
             if jindex20 == jindex5 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp5(jindex5,kindex5)    = etemp3 
                sMAT5(jindex5,kindex5) = atemp5(jindex5,kindex5)   
             endif 
             endif 
          ENDDO jindex5
          ENDDO kindex5
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 6
          DO kindex20
          DO jindex20
          DO kindex6
          DO jindex6
             if kindex20 == kindex6 
             if jindex20 == jindex6 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp6(jindex6,kindex6)    = etemp3 
                sMAT6(jindex6,kindex6) = atemp6(jindex6,kindex6)   
             endif 
             endif 
          ENDDO jindex6
          ENDDO kindex6
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 7
          DO kindex20
          DO jindex20
          DO kindex7
          DO jindex7
             if kindex20 == kindex7 
             if jindex20 == jindex7 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp7(jindex7,kindex7)    = etemp3 
                sMAT7(jindex7,kindex7) = atemp7(jindex7,kindex7)   
             endif 
             endif 
          ENDDO jindex7
          ENDDO kindex7
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 8
          DO kindex20
          DO jindex20
          DO kindex8
          DO jindex8
             if kindex20 == kindex8 
             if jindex20 == jindex8 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp8(jindex8,kindex8)    = etemp3 
                sMAT8(jindex8,kindex8) = atemp8(jindex8,kindex8)   
             endif 
             endif 
          ENDDO jindex8
          ENDDO kindex8
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 9
          DO kindex20
          DO jindex20
          DO kindex9
          DO jindex9
             if kindex20 == kindex9 
             if jindex20 == jindex9 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp9(jindex9,kindex9)    = etemp3 
                sMAT9(jindex9,kindex9) = atemp9(jindex9,kindex9)   
             endif 
             endif 
          ENDDO jindex9
          ENDDO kindex9
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 10  
          DO kindex20
          DO jindex20
          DO kindex10 
          DO jindex10 
             if kindex20 == kindex10  
             if jindex20 == jindex10 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp10(jindex10,kindex10)    = etemp3 
                sMAT10(jindex10,kindex10) = atemp10(jindex10,kindex10)   
             endif 
             endif 
          ENDDO jindex10 
          ENDDO kindex10 
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 11  
          DO kindex20
          DO jindex20
          DO kindex11 
          DO jindex11 
             if kindex20 == kindex11  
             if jindex20 == jindex11 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp11(jindex11,kindex11)    = etemp3 
                sMAT11(jindex11,kindex11) = atemp11(jindex11,kindex11)   
             endif 
             endif 
          ENDDO jindex11 
          ENDDO kindex11 
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 12  
          DO kindex20
          DO jindex20
          DO kindex12 
          DO jindex12 
             if kindex20 == kindex12  
             if jindex20 == jindex12 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp12(jindex12,kindex12)    = etemp3 
                sMAT12(jindex12,kindex12) = atemp12(jindex12,kindex12)   
             endif 
             endif 
          ENDDO jindex12 
          ENDDO kindex12 
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 13  
          DO kindex20
          DO jindex20
          DO kindex13 
          DO jindex13 
             if kindex20 == kindex13  
             if jindex20 == jindex13 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp13(jindex13,kindex13)    = etemp3 
                sMAT13(jindex13,kindex13) = atemp13(jindex13,kindex13)   
             endif 
             endif 
          ENDDO jindex13 
          ENDDO kindex13 
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 14  
          DO kindex20
          DO jindex20
          DO kindex14 
          DO jindex14 
             if kindex20 == kindex14  
             if jindex20 == jindex14 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp14(jindex14,kindex14)    = etemp3 
                sMAT14(jindex14,kindex14) = atemp14(jindex14,kindex14)   
             endif 
             endif 
          ENDDO jindex14 
          ENDDO kindex14 
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 15  
          DO kindex20
          DO jindex20
          DO kindex15 
          DO jindex15 
             if kindex20 == kindex15  
             if jindex20 == jindex15 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp15(jindex15,kindex15)    = etemp3 
                sMAT15(jindex15,kindex15) = atemp15(jindex15,kindex15)   
             endif 
             endif 
          ENDDO jindex15 
          ENDDO kindex15 
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 16  
          DO kindex20
          DO jindex20
          DO kindex16 
          DO jindex16 
             if kindex20 == kindex16  
             if jindex20 == jindex16 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp16(jindex16,kindex16)    = etemp3 
                sMAT16(jindex16,kindex16) = atemp16(jindex16,kindex16)   
             endif 
             endif 
          ENDDO jindex16 
          ENDDO kindex16 
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 17  
          DO kindex20
          DO jindex20
          DO kindex17 
          DO jindex17 
             if kindex20 == kindex17  
             if jindex20 == jindex17 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp17(jindex17,kindex17)    = etemp3 
                sMAT17(jindex17,kindex17) = atemp17(jindex17,kindex17)   
             endif 
             endif 
          ENDDO jindex17 
          ENDDO kindex17 
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 18  
          DO kindex20
          DO jindex20
          DO kindex18 
          DO jindex18 
             if kindex20 == kindex18  
             if jindex20 == jindex18 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp18(jindex18,kindex18)    = etemp3 
                sMAT18(jindex18,kindex18) = atemp18(jindex18,kindex18)   
             endif 
             endif 
          ENDDO jindex18 
          ENDDO kindex18 
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 19  
          DO kindex20
          DO jindex20
          DO kindex19 
          DO jindex19 
             if kindex20 == kindex19  
             if jindex20 == jindex19 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp19(jindex19,kindex19)    = etemp3 
                sMAT19(jindex19,kindex19) = atemp19(jindex19,kindex19)   
             endif 
             endif 
          ENDDO jindex19 
          ENDDO kindex19 
          ENDDO jindex20
          ENDDO kindex20
       endif
#
      execute sip_barrier 
      deallocate Lax(*,*)
      delete ax 
#
     ENDPROC Aconstr
#    --------------- 
#
# ---------------------------------------------------------------------------------- 
#
     PROC startvec2
#    -------------- 
#
     allocate lai(*,*)
#
     sqr=2.0
     exponent=0.5
     execute square_root sqr exponent
     etemp=1.0/sqr
#
     PARDO a, i
#
     lai(a,i)=0.0
     execute place_one lai etemp
     tai(a,i)=lai(a,i)
     put VSTART1A1(a,i)=tai(a,i)
     put VSTART1A2(a,i)=tai(a,i)
#
     ENDPARDO a, i
#
     deallocate lai(*,*)
#
     allocate lbj(*,*)
#
     etemp*=-1.0
#
     PARDO b, j
#
     lbj(b,j)=0.0
     execute place_one lbj etemp
     tbj(b,j)=lbj(b,j)
     put VSTART1B1(b,j)=tbj(b,j)
#
     ENDPARDO b, j
#
     deallocate lbj(*,*)
#
#
     allocate lbj(*,*)
#
     etemp*=-1.0
#
     PARDO b, j
#
     lbj(b,j)=0.0
     execute place_one lbj etemp
     tbj(b,j)=lbj(b,j)
     put VSTART1B2(b,j)=tbj(b,j)
#
     ENDPARDO b, j
#
     deallocate lbj(*,*)
#
     allocate lai(*,*)
#
     sqr=2.0
     exponent=0.5
     execute square_root sqr exponent
     etemp=1.0/sqr
#
     PARDO a, i
#
     lai(a,i)=0.0
     execute place_one2 lai etemp
     tai(a,i)=lai(a,i)
     put VSTART1A3(a,i)=tai(a,i)
     put VSTART1A4(a,i)=tai(a,i)
#
     ENDPARDO a, i
#
     deallocate lai(*,*)
#
     allocate lbj(*,*)
#
     etemp*=-1.0
#
     PARDO b, j
#
     lbj(b,j)=0.0
     execute place_one2 lbj etemp
     tbj(b,j)=lbj(b,j)
     put VSTART1B3(b,j)=tbj(b,j)
#
     ENDPARDO b, j
#
     deallocate lbj(*,*)
#
#
     allocate lbj(*,*)
#
     etemp*=-1.0
#
     PARDO b, j
#
     lbj(b,j)=0.0
     execute place_one2 lbj etemp
     tbj(b,j)=lbj(b,j)
     put VSTART1B4(b,j)=tbj(b,j)
#
     ENDPARDO b, j
#
     deallocate lbj(*,*)
#
#
#
#
#
     allocate lai(*,*)
#
     sqr=2.0
     exponent=0.5
     execute square_root sqr exponent
     etemp=1.0/sqr
#
     PARDO a, i
#
     lai(a,i)=0.0
     execute place_one3 lai etemp
     tai(a,i)=lai(a,i)
     put VSTART1A5(a,i)=tai(a,i)
     put VSTART1A6(a,i)=tai(a,i)
#
     ENDPARDO a, i
#
     deallocate lai(*,*)
#
     allocate lbj(*,*)
#
     etemp*=-1.0
#
     PARDO b, j
#
     lbj(b,j)=0.0
     execute place_one3 lbj etemp
     tbj(b,j)=lbj(b,j)
     put VSTART1B5(b,j)=tbj(b,j)
#
     ENDPARDO b, j
#
     deallocate lbj(*,*)
#
#
     allocate lbj(*,*)
#
     etemp*=-1.0
#
     PARDO b, j
#
     lbj(b,j)=0.0
     execute place_one3 lbj etemp
     tbj(b,j)=lbj(b,j)
     put VSTART1B6(b,j)=tbj(b,j)
#
     ENDPARDO b, j
#
     deallocate lbj(*,*)
#
#
#
#
#
     allocate lai(*,*)
#
     sqr=2.0
     exponent=0.5
     execute square_root sqr exponent
     etemp=1.0/sqr
#
     PARDO a, i
#
     lai(a,i)=0.0
     execute place_one4 lai etemp
     tai(a,i)=lai(a,i)
     put VSTART1A7(a,i)=tai(a,i)
     put VSTART1A8(a,i)=tai(a,i)
#
     ENDPARDO a, i
#
     deallocate lai(*,*)
#
     allocate lbj(*,*)
#
     etemp*=-1.0
#
     PARDO b, j
#
     lbj(b,j)=0.0
     execute place_one4 lbj etemp
     tbj(b,j)=lbj(b,j)
     put VSTART1B7(b,j)=tbj(b,j)
#
     ENDPARDO b, j
#
     deallocate lbj(*,*)
#
#
     allocate lbj(*,*)
#
     etemp*=-1.0
#
     PARDO b, j
#
     lbj(b,j)=0.0
     execute place_one4 lbj etemp
     tbj(b,j)=lbj(b,j)
     put VSTART1B8(b,j)=tbj(b,j)
#
     ENDPARDO b, j
#
     deallocate lbj(*,*)
#
#
#
#
#
     allocate lai(*,*)
#
     sqr=2.0
     exponent=0.5
     execute square_root sqr exponent
     etemp=1.0/sqr
#
     PARDO a, i
#
     lai(a,i)=0.0
     execute place_one5 lai etemp
     tai(a,i)=lai(a,i)
     put VSTART1A9(a,i)=tai(a,i)
     put VSTART1A10(a,i)=tai(a,i)
#
     ENDPARDO a, i
#
     deallocate lai(*,*)
#
     allocate lbj(*,*)
#
     etemp*=-1.0
#
     PARDO b, j
#
     lbj(b,j)=0.0
     execute place_one5 lbj etemp
     tbj(b,j)=lbj(b,j)
     put VSTART1B9(b,j)=tbj(b,j)
#
     ENDPARDO b, j
#
     deallocate lbj(*,*)
#
#
     allocate lbj(*,*)
#
     etemp*=-1.0
#
     PARDO b, j
#
     lbj(b,j)=0.0
     execute place_one5 lbj etemp
     tbj(b,j)=lbj(b,j)
     put VSTART1B10(b,j)=tbj(b,j)
#
     ENDPARDO b, j
#
     deallocate lbj(*,*)
#
#
#
#
#
     allocate lai(*,*)
#
     sqr=2.0
     exponent=0.5
     execute square_root sqr exponent
     etemp=1.0/sqr
#
     PARDO a, i
#
     lai(a,i)=0.0
     execute place_one6 lai etemp
     tai(a,i)=lai(a,i)
     put VSTART1A11(a,i)=tai(a,i)
     put VSTART1A12(a,i)=tai(a,i)
#
     ENDPARDO a, i
#
     deallocate lai(*,*)
#
     allocate lbj(*,*)
#
     etemp*=-1.0
#
     PARDO b, j
#
     lbj(b,j)=0.0
     execute place_one6 lbj etemp
     tbj(b,j)=lbj(b,j)
     put VSTART1B11(b,j)=tbj(b,j)
#
     ENDPARDO b, j
#
     deallocate lbj(*,*)
#
#
     allocate lbj(*,*)
#
     etemp*=-1.0
#
     PARDO b, j
#
     lbj(b,j)=0.0
     execute place_one6 lbj etemp
     tbj(b,j)=lbj(b,j)
     put VSTART1B12(b,j)=tbj(b,j)
#
     ENDPARDO b, j
#
     deallocate lbj(*,*)
#
#
     ENDPROC startvec2
#    ----------------- 
#
# ----------------------------------------------------------------------
#
     PROC startvec
#    ------------- 
#
      etemp1=0.0
      etemp2=0.0
#
      square=0.0
#
     sum1=0.0
     PARDO a, i
    #get HBAR_ia(i,a)
     tai(a,i)=LHBAR_ia(i,a)
     t2ai(a,i)=tai(a,i)
     etemp=tai(a,i)*t2ai(a,i)
     sum1+=etemp
#
     ENDPARDO a, i
#
     sum2=0.0
     PARDO b, j
    #get HBAR_jb(j,b)
     tbj(b,j)=LHBAR_jb(j,b)
     t2bj(b,j)=tbj(b,j)
     etemp=tbj(b,j)*t2bj(b,j)
     sum2+=etemp
#
     ENDPARDO b, j
#
       EXECUTE SIP_BARRIER
#
      collective etemp1+=sum1
      collective etemp2+=sum2
#
      square+=etemp1
      square+=etemp2
#
       EXECUTE SIP_BARRIER
       EXECUTE SERVER_BARRIER
#
       exponent=0.5
       execute square_root square exponent
       mult=1.0/square
#
#
#
#
     PARDO a, i
#
    #get HBAR_ia(i,a)
     tai(a,i)=LHBAR_ia(i,a)
     tai(a,i)*=mult
     PUT VSTART1A1(a,i) = tai(a,i)
     PUT VSTART1A2(a,i) = tai(a,i)
#
     ENDPARDO a, i
#
#
     PARDO b, j
#
    #get HBAR_jb(j,b)
     tbj(b,j)=LHBAR_jb(j,b)
     tbj(b,j)*=mult
     PUT VSTART1B2(b,j) = tbj(b,j)
     tbj(b,j)*=-1.0
     PUT VSTART1B1(b,j) = tbj(b,j)
#
     ENDPARDO b, j
#
     execute sip_barrier
     execute server_barrier
#
      etemp1=0.0
      etemp2=0.0
#
      square=0.0
#
     sum1=0.0
     PARDO a, i
    #get T1a(a,i)
     tai(a,i)=ST1a(a,i)
     t2ai(a,i)=tai(a,i)
     etemp=tai(a,i)*t2ai(a,i)
     sum1+=etemp
#
     ENDPARDO a, i
#
#
     sum2=0.0
     PARDO b, j
    #get T1B(b,j)
     tbj(b,j)=ST1A(b,j)
     t2bj(b,j)=tbj(b,j)
     etemp=tbj(b,j)*t2bj(b,j)
     sum2+=etemp
#
     ENDPARDO b, j
#
       EXECUTE SIP_BARRIER
#
      collective etemp1+=sum1
      collective etemp2+=sum2
#
      square+=etemp1
      square+=etemp2
#
       EXECUTE SIP_BARRIER
       EXECUTE SERVER_BARRIER
#
       exponent=0.5
       execute square_root square exponent
       mult=1.0/square
#
     PARDO a, i
#
    #GET T1a(a,i)
     tai(a,i)=ST1a(a,i)
     tai(a,i)*=mult
#     PUT VSTART1A2(a,i) = tai(a,i)
#     PUT VSTART1A1(a,i) = tai(a,i)
#
     ENDPARDO a, i
#
#
     PARDO b, j
#
    #GET T1b(b,j)
     tbj(b,j) = ST1b(b,j)
     tbj(b,j)*=mult
#     PUT VSTART1B1(b,j) = tbj(b,j)
#     tbj(b,j)*=-1.0
#     PUT VSTART1B2(b,j) = tbj(b,j)
#
     ENDPARDO b, j
#
     execute sip_barrier
     execute server_barrier
#
     ENDPROC startvec
#
     PROC copy_starttoev
#    ------------------- 
#
     PARDO a, i
#
           GET                VSTART1A1(a,i)
           tai(a,i)         = VSTART1A1(a,i)
           PUT VCE1A(a,i)   = tai(a,i)
           PUT VCACT1A(a,i) = tai(a,i)
#
     ENDPARDO a, i
#
     PARDO a, i
#
     DO k21 
        if k21 == 1 
           GET                VSTART1A1(a,i)
           tai(a,i)         = VSTART1A1(a,i)
           taiS(a,i,k21)     = tai(a,i)  
           PUT VC1A(a,i,k21) = taiS(a,i,k21) 
        endif 
        if k21 > 1 
           taiS(a,i,k21)     = 0.0   
           PUT VC1A(a,i,k21) = taiS(a,i,k21) 
        endif 
     ENDDO k21 
#
     ENDPARDO a, i
#
#
#
#      Watson: took out the following because the R vectors are read in.
#
#
#     PARDO a, a1, i, i1
#
#           Taiai(a,i,a1,i1)            = 0.0
#           PREPARE VCE2AA(a,i,a1,i1)   = Taiai(a,i,a1,i1)
#           PREPARE VCACT2AA(a,i,a1,i1) = Taiai(a,i,a1,i1)
#
#     ENDPARDO a, a1, i, i1
#
#     PARDO a, b, i, j
#
#           Taibj(a,i,b,j)            = 0.0
#           PREPARE VCE2AB(a,i,b,j)   = Taibj(a,i,b,j)
#           PREPARE VCACT2AB(a,i,b,j) = Taibj(a,i,b,j)
#
#     ENDPARDO a, b, i, j
#
#
#      Watson: modified the following to put the R vector in as a first guess.
#              and zero out the L2 vectors.
#
#
     PARDO a, a1, i, i1
           REQUEST  VCACT2AA (a,i,a1,i1) i1
           DO k21
              if k21 == 1
                 taiaiS(a,i,a1,i1,k21) = VCACT2AA (a,i,a1,i1)
              endif
              if k21 != 1
                 taiaiS(a,i,a1,i1,k21) = 0.0
              endif
              PREPARE VC2AA(a,i,a1,i1,k21) = taiaiS(a,i,a1,i1,k21)
           ENDDO k21
     ENDPARDO a, a1, i, i1

     PARDO a, b, i, j
           REQUEST  VCACT2AB (a,i,b,j) j
           DO k21 
              if k21 == 1
                 taibjS(a,i,b,j,k21) = VCACT2AB (a,i,b,j)
              endif
              if k21 != 1 
                 taibjS(a,i,b,j,k21) = 0.0 
              endif
              PREPARE VC2AB(a,i,b,j,k21) = taibjS(a,i,b,j,k21)
           ENDDO k21 
     ENDPARDO a, b, i, j
#
#
#      ..Watson: Begin
#           - Zero out arrays used in later calcs.
#
     PARDO  i, a, i1, a1
        tiaia (i,a,i1,a1) = 0.0
        DO kroot
           PREPARE  L2AA_VECS (i,a,i1,a1,kroot) = tiaia (i,a,i1,a1)
        ENDDO kroot
     ENDPARDO  i, a, i1, a1

     PARDO  i, a, j, b
        tiajb (i,a,j,b) = 0.0
        DO kroot
           PREPARE  L2AB_VECS (i,a,j,b,kroot) = tiajb (i,a,j,b)
        ENDDO kroot
     ENDPARDO  i, a, j, b
#
#      ...Watson: END
#
#
     execute server_barrier
     ENDPROC copy_starttoev
#    ----------------------
#
# -----------------------------------------------------------------------------
#
     PROC copy_toVCactual_tr
#    ----------------------- 
#
     PARDO a, i 
           DO k21
              if k21 == 21
                 GET        VC1A(a,i,k21)
                 tai(a,i) = VC1A(a,i,k21)
                 PUT VCACT1A(a,i) = Tai(a,i)
                 DO j21 
                    if j21 == 13 
                       taiS(a,i,j21)     = Tai(a,i)
                       PUT VC1A(a,i,j21) = taiS(a,i,j21) 
                    endif 
                 ENDDO j21 
              endif
           ENDDO k21 
     ENDPARDO a, i 
#
     PARDO a, i, a1, i1
           DO k21
              if k21 == 21
                 REQUEST                        VC2AA(a,i,a1,i1,k21) i1
                 Taiai(a,i,a1,i1)             = VC2AA(a,i,a1,i1,k21)
                 PREPARE VTEMP2AA1(a,i,a1,i1) = taiai(a,i,a1,i1)
              endif # k21 == 21
           ENDDO k21
     ENDPARDO a, i, a1, i1
#
     PARDO a, i, b1, j1
           DO k21
              if k21 == 21
                 REQUEST                        VC2AB(a,i,b1,j1,k21) j1
                 Taibj(a,i,b1,j1)             = VC2AB(a,i,b1,j1,k21)
                 PREPARE VTEMP2AB1(a,i,b1,j1) = taibj(a,i,b1,j1)
              endif # k21 == 21
           ENDDO k21
     ENDPARDO a, i, b1, j1
#
     execute server_barrier
#
     PARDO a, a1, i, i1
           REQUEST                       VTEMP2AA1(a,i,a1,i1) i1
           Taiai(a,i,a1,i1)            = VTEMP2AA1(a,i,a1,i1)
           PREPARE VCACT2AA(a,i,a1,i1) = Taiai(a,i,a1,i1)
           DO k21
              if k21 == 13
                 taiaiS(a,i,a1,i1,k21)        = Taiai(a,i,a1,i1)
                 PREPARE VC2AA(a,i,a1,i1,k21) = taiaiS(a,i,a1,i1,k21)
              endif
           ENDDO k21
     ENDPARDO a, a1, i, i1
#
     PARDO a, b, i, j
           REQUEST                     VTEMP2AB1(a,i,b,j) j
           Taibj(a,i,b,j)            = VTEMP2AB1(a,i,b,j)
           PREPARE VCACT2AB(a,i,b,j) = Taibj(a,i,b,j)
           DO k21
              if k21 == 13
                 taibjS(a,i,b,j,k21)        = taibj(a,i,b,j)
                 PREPARE VC2AB(a,i,b,j,k21) = taibjS(a,i,b,j,k21)
              endif
           ENDDO k21
     ENDPARDO a, b, i, j
#
     ENDPROC copy_toVCactual_tr
#    -------------------------- 
#
# -----------------------------------------------------------------------------
#
     PROC copy_toVCactual
#    -------------------- 
#
     PARDO a, i
           DO k21
              if k21 == spdim
                 GET                VC1A(a,i,k21)
                 tai(a,i)         = VC1A(a,i,k21)
                 PUT VCACT1A(a,i) = tai(a,i)
              endif
           ENDDO k21
     ENDPARDO a, i
#
     PARDO a, i, a1, i1 
           DO k21 
              if k21 == spdim 
                 REQUEST                       VC2AA(a,i,a1,i1,k21) a 
                 taiai(a,i,a1,i1)            = VC2AA(a,i,a1,i1,k21) 
                 PREPARE VCACT2AA(a,i,a1,i1) = taiai(a,i,a1,i1)  
              endif 
           ENDDO k21 
     ENDPARDO a, i, a1, i1 
#
     PARDO a, i, b, j 
           DO k21 
              if k21 == spdim 
                 REQUEST                     VC2AB(a,i,b,j,k21) a 
                 taibj(a,i,b,j)            = VC2AB(a,i,b,j,k21) 
                 PREPARE VCACT2AB(a,i,b,j) = taibj(a,i,b,j)  
              endif 
           ENDDO k21 
     ENDPARDO a, i, b, j 
#
     execute server_barrier
#
     ENDPROC copy_toVCactual
#
# ------------------------------------------------------------------------ 
#
     PROC SYMMETRHC_A
#    ---------------- 
#
     PARDO a, a1, i, i1
           Taiai(a,i,a1,i1)              = 0.0
          #PREPARE VCE2AA(a,i,a1,i1)    = Taiai(a,i,a1,i1)
           PREPARE VTEMP2AA1(a,i,a1,i1)    = Taiai(a,i,a1,i1)
           PREPARE VCHACT2AA(a,i,a1,i1) = Taiai(a,i,a1,i1)
     ENDPARDO  a, a1, i, i1
#
     execute server_barrier
#
     PARDO a, a1, i, i1
           DO k20 
              if k20 == spdim 
                 REQUEST            VCH2AA(a,i,a1,i1,k20) a 
                 taiai(a,i,a1,i1) = VCH2AA(a,i,a1,i1,k20)  
#
                 R3aiai(a1,i,a,i1) = 0.0
                 Raiai(a,i,a1,i1)  = 0.0
#
                 if a == a1
#   
                    Raiai(a,i,a1,i1)    =Taiai(a,i,a1,i1)
                    execute symm_force_a Raiai
#
                 endif
#
                 if a < a1
#
                    Raiai(a,i,a1,i1)   = Taiai(a,i,a1,i1)
                    R3aiai(a1,i,a,i1)  = Taiai(a,i,a1,i1)
                    R3aiai(a1,i,a,i1) *= -1.0
#
                 endif
#
                 PREPARE VTEMP2AA1(a,i,a1,i1) += Raiai(a,i,a1,i1)
                 PREPARE VTEMP2AA1(a1,i,a,i1) += R3aiai(a1,i,a,i1)
              endif 
#
           ENDDO k20 
#
     ENDPARDO  a, a1, i, i1
#
     execute server_barrier
#
     PARDO a, a1, i, i1
#
           REQUEST            VTEMP2AA1(a,i,a1,i1) i1
           Taiai(a,i,a1,i1) = VTEMP2AA1(a,i,a1,i1)
#
           R2aiai(a,i1,a1,i)= 0.0
           Raiai(a,i,a1,i1) = 0.0
#
           if i == i1
#
              Raiai(a,i,a1,i1)=Taiai(a,i,a1,i1)
              execute symm_force_i Raiai
#
           endif
#
           if i < i1
#
              Raiai(a,i,a1,i1)   = Taiai(a,i,a1,i1)
              R2aiai(a,i1,a1,i)  = Taiai(a,i,a1,i1)
              R2aiai(a,i1,a1,i) *= -1.0
#
           endif
#
           PREPARE VCHACT2AA(a,i,a1,i1) += Raiai(a,i,a1,i1)
           PREPARE VCHACT2AA(a,i1,a1,i) += R2aiai(a,i1,a1,i)
#
     ENDPARDO  a, a1, i, i1
#
     execute server_barrier
#
     ENDPROC SYMMETRHC_A
#    ------------------- 
#
     PROC SYMMETRHC_B
#    ----------------
#
     PARDO a, a1, i, i1
           REQUEST            VCHACT2AA(a,i,a1,i1) i1
           Taiai(a,i,a1,i1) = VCHACT2AA(a,i,a1,i1)
#
           DO k20 
              if k20 == spdim 
                 t2aiaiS(a,i,a1,i1,k20)        = Taiai(a,i,a1,i1) 
                 PREPARE VCH2AA(a,i,a1,i1,k20) = t2aiaiS(a,i,a1,i1,k20)
              endif  
           ENDDO k20 
#
     ENDPARDO  a, a1, i, i1
#
     ENDPROC SYMMETRHC_B
#    -------------------
#
#-------------------------------------------------------------------------



#-------------------------------------------------------------------------
#
#   --------------
     PROC  HCmult
#   -------------- 
#
#
      ALLOCATE  LFmi_a(*,*)
      ALLOCATE  LFmi_b(*,*)
      ALLOCATE  LFae_a(*,*)

      CREATE  Fmi_a
      CREATE  Fmi_b
      CREATE  Fae_a

      CREATE  D2AA

      EXECUTE SERVER_BARRIER

      CALL  VCHACT_ZERO

      CALL  LEFT_FACTORIZE
      EXECUTE SERVER_BARRIER

      CALL  AOLADDER_NEW
      CALL  L2AB_WORKS
      CALL  L2AA_WORKS
      CALL  L1ANEW
      EXECUTE  SIP_BARRIER
      EXECUTE  SERVER_BARRIER
#
#
#          Some contributions were put in to D2dd, so prepare them
#          in to VCHACT2 now with appropriate permutations!
#
#
      PARDO  a, i, a1, i1

         GET                   D2aa (a,i,a1,i1)
         t2aiai (a1,i1,a,i)  = D2aa (a,i,a1,i1)
         t3aiai (a1,i,a,i1)  = D2aa (a,i,a1,i1)
         t4aiai (a,i1,a1,i)  = D2aa (a,i,a1,i1)
         t3aiai (a1,i,a,i1) *= -1.0
         t4aiai (a,i1,a1,i) *= -1.0

         PREPARE  VCHACT2AA (a,i,a1,i1) += D2aa   (a,i,a1,i1)
         PREPARE  VCHACT2AA (a1,i1,a,i) += T2aiai (a1,i1,a,i)
         PREPARE  VCHACT2AA (a1,i,a,i1) += T3aiai (a1,i,a,i1)
         PREPARE  VCHACT2AA (a,i1,a1,i) += T4aiai (a,i1,a1,i)

      ENDPARDO  a, i, a1, i1

      EXECUTE  SERVER_BARRIER

    #PARDO  a, i, b, j
    #       REQUEST VCHACT2AB(a,i,b,j) a 
    #       REQUEST VCHACT2AB(b,j,a,i) a 
    #       tpppp(a,i,b,j) = VCHACT2AB(b,j,a,i) 
    #       tpppp(a,i,b,j)-= VCHACT2AB(a,i,b,j) 
    #       execute dump_block tpppp 
    #ENDPARDO  a, i, b, j

     #CALL  L2AA_PRINT
     #CALL  L2AB_PRINT
     #CALL  L1_PRINT

     #CALL  R2ABLIN_NEW
     #CALL  R2AALIN_NEW
     #CALL  R1ANEW

      CALL  UPDATE

      EXECUTE SERVER_BARRIER

      CALL  SYMMETRHC_A
      CALL  SYMMETRHC_B

      EXECUTE  SERVER_BARRIER
      EXECUTE  SIP_BARRIER

      DELETE  D2AA
      DELETE  Fae_a
      DELETE  Fmi_a
      DELETE  Fmi_b

      DEALLOCATE  LFae_a (*,*)
      DEALLOCATE  LFmi_a (*,*)
      DEALLOCATE  LFmi_b (*,*)

      EXECUTE  SERVER_BARRIER
      PARDO a, i, b, j 
         REQUEST VCHACT2AB (a,i,b,j) j
         REQUEST VCHACT2AB (b,j,a,i) j
         tpppp(a,i,b,j) = VCHACT2AB (b,j,a,i)
         tpppp(a,i,b,j)+= VCHACT2AB (a,i,b,j)
         tpppp(a,i,b,j)*= 0.5  
         PREPARE diag_aibj(a,i,b,j) = tpppp(a,i,b,j) 
      ENDPARDO a, i, b, j 
      EXECUTE  SERVER_BARRIER
      PARDO a, i, b, j 
         REQUEST diag_aibj(a,i,b,j) a 
         PREPARE  VCHACT2AB (a,i,b,j) = diag_aibj (a,i,b,j)
      ENDPARDO a, i, b, j 
      EXECUTE  SERVER_BARRIER

     ENDPROC HCmult
#-------------------------------------------------------------------------



#-------------------------------------------------------------------------
#
     PROC Adiag
#
     Aeig1=0.0
     Aeig2=0.0
     Aeig3=0.0
     Aeig4=0.0
     Aeig5=0.0
     Aeig6=0.0
     Aeig7=0.0
     Aeig8=0.0
     Aeig9=0.0
     Aeig10=0.0
     Aeig11=0.0
     Aeig12=0.0
     Aeig13=0.0
     Aeig14=0.0
     Aeig15=0.0
     Aeig16=0.0
     Aeig17=0.0
     Aeig18=0.0
     Aeig19=0.0
     Aeig20=0.0
#
#    FIRST ITERATION
#
     if spdim == 1
#
    #Aeig1=a1_1
#
     do jindex20 
     do kindex20 
         if jindex20 == 1 
         if kindex20 == 1 
            t20(kindex20,jindex20) = sMAT20(kindex20,jindex20) 
            execute return_sval t20  Aeig1
         endif 
         endif 
     enddo kindex20 
     enddo jindex20 
#
     endif
#
#======================================================
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#--start of script generated part of the code
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#======================================================
#    --------------2th iteration-----------------
     if spdim == 2
#
     execute eig_nonsymm Smat2 SVEV2
#
     do jindex2
     do kindex2
        tcoef2(kindex2,jindex2)=Smat2(kindex2,jindex2)
        if kindex2 == 1
        if jindex2 == 1
           execute return_sval tcoef2  Aeig1
        endif
        endif
        if kindex2 == 2
        if jindex2 == 2
           execute return_sval tcoef2  Aeig2
        endif
        endif
#
     enddo kindex2
     enddo jindex2
#
     endif
#
#
#    --------------end 2th iteration-----------------
#
#
#    --------------3th iteration-----------------
     if spdim == 3
#
     execute eig_nonsymm Smat3 SVEV3
#
     do jindex3
     do kindex3
#
     tcoef3(kindex3,jindex3)=Smat3(kindex3,jindex3)
#
     if kindex3 == 1
     if jindex3 == 1
     execute return_sval tcoef3  Aeig1
     endif
     endif
     if kindex3 == 2
     if jindex3 == 2
     execute return_sval tcoef3  Aeig2
     endif
     endif
     if kindex3 == 3
     if jindex3 == 3
     execute return_sval tcoef3  Aeig3
     endif
     endif
#
     enddo kindex3
     enddo jindex3
#
     endif
#
#
#    --------------end 3th iteration-----------------
#
#
#    --------------4th iteration-----------------
     if spdim == 4
#
     execute eig_nonsymm Smat4 SVEV4
#
     do jindex4
     do kindex4
#
     tcoef4(kindex4,jindex4)=Smat4(kindex4,jindex4)
#
     if kindex4 == 1
     if jindex4 == 1
     execute return_sval tcoef4  Aeig1
     endif
     endif
     if kindex4 == 2
     if jindex4 == 2
     execute return_sval tcoef4  Aeig2
     endif
     endif
     if kindex4 == 3
     if jindex4 == 3
     execute return_sval tcoef4  Aeig3
     endif
     endif
     if kindex4 == 4
     if jindex4 == 4
     execute return_sval tcoef4  Aeig4
     endif
     endif
#
     enddo kindex4
     enddo jindex4
#
     endif
#
#
#    --------------end 4th iteration-----------------
#
#
#    --------------5th iteration-----------------
     if spdim == 5
#
     execute eig_nonsymm Smat5 SVEV5
#
     do jindex5
     do kindex5
#
     tcoef5(kindex5,jindex5)=Smat5(kindex5,jindex5)
#
     if kindex5 == 1
     if jindex5 == 1
     execute return_sval tcoef5  Aeig1
     endif
     endif
     if kindex5 == 2
     if jindex5 == 2
     execute return_sval tcoef5  Aeig2
     endif
     endif
     if kindex5 == 3
     if jindex5 == 3
     execute return_sval tcoef5  Aeig3
     endif
     endif
     if kindex5 == 4
     if jindex5 == 4
     execute return_sval tcoef5  Aeig4
     endif
     endif
     if kindex5 == 5
     if jindex5 == 5
     execute return_sval tcoef5  Aeig5
     endif
     endif
#
     enddo kindex5
     enddo jindex5
#
     endif
#
#
#    --------------end 5th iteration-----------------
#
#
#    --------------6th iteration-----------------
     if spdim == 6
#
     execute eig_nonsymm Smat6 SVEV6
#
     do jindex6
     do kindex6
#
     tcoef6(kindex6,jindex6)=Smat6(kindex6,jindex6)
#
     if kindex6 == 1
     if jindex6 == 1
     execute return_sval tcoef6  Aeig1
     endif
     endif
     if kindex6 == 2
     if jindex6 == 2
     execute return_sval tcoef6  Aeig2
     endif
     endif
     if kindex6 == 3
     if jindex6 == 3
     execute return_sval tcoef6  Aeig3
     endif
     endif
     if kindex6 == 4
     if jindex6 == 4
     execute return_sval tcoef6  Aeig4
     endif
     endif
     if kindex6 == 5
     if jindex6 == 5
     execute return_sval tcoef6  Aeig5
     endif
     endif
     if kindex6 == 6
     if jindex6 == 6
     execute return_sval tcoef6  Aeig6
     endif
     endif
#
     enddo kindex6
     enddo jindex6
#
     endif
#
#
#    --------------end 6th iteration-----------------
#
#
#    --------------7th iteration-----------------
     if spdim == 7
#
     execute eig_nonsymm Smat7 SVEV7
#
     do jindex7
     do kindex7
#
     tcoef7(kindex7,jindex7)=Smat7(kindex7,jindex7)
#
     if kindex7 == 1
     if jindex7 == 1
     execute return_sval tcoef7  Aeig1
     endif
     endif
     if kindex7 == 2
     if jindex7 == 2
     execute return_sval tcoef7  Aeig2
     endif
     endif
     if kindex7 == 3
     if jindex7 == 3
     execute return_sval tcoef7  Aeig3
     endif
     endif
     if kindex7 == 4
     if jindex7 == 4
     execute return_sval tcoef7  Aeig4
     endif
     endif
     if kindex7 == 5
     if jindex7 == 5
     execute return_sval tcoef7  Aeig5
     endif
     endif
     if kindex7 == 6
     if jindex7 == 6
     execute return_sval tcoef7  Aeig6
     endif
     endif
     if kindex7 == 7
     if jindex7 == 7
     execute return_sval tcoef7  Aeig7
     endif
     endif
#
     enddo kindex7
     enddo jindex7
#
     endif
#
#
#    --------------end 7th iteration-----------------
#
#
#    --------------8th iteration-----------------
     if spdim == 8
#
     execute eig_nonsymm Smat8 SVEV8
#
     do jindex8
     do kindex8
#
     tcoef8(kindex8,jindex8)=Smat8(kindex8,jindex8)
#
     if kindex8 == 1
     if jindex8 == 1
     execute return_sval tcoef8  Aeig1
     endif
     endif
     if kindex8 == 2
     if jindex8 == 2
     execute return_sval tcoef8  Aeig2
     endif
     endif
     if kindex8 == 3
     if jindex8 == 3
     execute return_sval tcoef8  Aeig3
     endif
     endif
     if kindex8 == 4
     if jindex8 == 4
     execute return_sval tcoef8  Aeig4
     endif
     endif
     if kindex8 == 5
     if jindex8 == 5
     execute return_sval tcoef8  Aeig5
     endif
     endif
     if kindex8 == 6
     if jindex8 == 6
     execute return_sval tcoef8  Aeig6
     endif
     endif
     if kindex8 == 7
     if jindex8 == 7
     execute return_sval tcoef8  Aeig7
     endif
     endif
     if kindex8 == 8
     if jindex8 == 8
     execute return_sval tcoef8  Aeig8
     endif
     endif
#
     enddo kindex8
     enddo jindex8
#
     endif
#
#
#    --------------end 8th iteration-----------------
#
#
#    --------------9th iteration-----------------
     if spdim == 9
#
     execute eig_nonsymm Smat9 SVEV9
#
     do jindex9
     do kindex9
#
     tcoef9(kindex9,jindex9)=Smat9(kindex9,jindex9)
#
     if kindex9 == 1
     if jindex9 == 1
     execute return_sval tcoef9  Aeig1
     endif
     endif
     if kindex9 == 2
     if jindex9 == 2
     execute return_sval tcoef9  Aeig2
     endif
     endif
     if kindex9 == 3
     if jindex9 == 3
     execute return_sval tcoef9  Aeig3
     endif
     endif
     if kindex9 == 4
     if jindex9 == 4
     execute return_sval tcoef9  Aeig4
     endif
     endif
     if kindex9 == 5
     if jindex9 == 5
     execute return_sval tcoef9  Aeig5
     endif
     endif
     if kindex9 == 6
     if jindex9 == 6
     execute return_sval tcoef9  Aeig6
     endif
     endif
     if kindex9 == 7
     if jindex9 == 7
     execute return_sval tcoef9  Aeig7
     endif
     endif
     if kindex9 == 8
     if jindex9 == 8
     execute return_sval tcoef9  Aeig8
     endif
     endif
     if kindex9 == 9
     if jindex9 == 9
     execute return_sval tcoef9  Aeig9
     endif
     endif
#
     enddo kindex9
     enddo jindex9
#
     endif
#
#
#    --------------end 9th iteration-----------------
#
#
#    --------------10th iteration-----------------
     if spdim == 10
#
     execute eig_nonsymm Smat10 SVEV10
#
     do jindex10
     do kindex10
#
     tcoef10(kindex10,jindex10)=Smat10(kindex10,jindex10)
#
     if kindex10 == 1
     if jindex10 == 1
     execute return_sval tcoef10  Aeig1
     endif
     endif
     if kindex10 == 2
     if jindex10 == 2
     execute return_sval tcoef10  Aeig2
     endif
     endif
     if kindex10 == 3
     if jindex10 == 3
     execute return_sval tcoef10  Aeig3
     endif
     endif
     if kindex10 == 4
     if jindex10 == 4
     execute return_sval tcoef10  Aeig4
     endif
     endif
     if kindex10 == 5
     if jindex10 == 5
     execute return_sval tcoef10  Aeig5
     endif
     endif
     if kindex10 == 6
     if jindex10 == 6
     execute return_sval tcoef10  Aeig6
     endif
     endif
     if kindex10 == 7
     if jindex10 == 7
     execute return_sval tcoef10  Aeig7
     endif
     endif
     if kindex10 == 8
     if jindex10 == 8
     execute return_sval tcoef10  Aeig8
     endif
     endif
     if kindex10 == 9
     if jindex10 == 9
     execute return_sval tcoef10  Aeig9
     endif
     endif
     if kindex10 == 10
     if jindex10 == 10
     execute return_sval tcoef10  Aeig10
     endif
     endif
#
     enddo kindex10
     enddo jindex10
#
     endif
#
#
#    --------------end 10th iteration-----------------
#
#
#    --------------11th iteration-----------------
     if spdim == 11
#
     execute eig_nonsymm Smat11 SVEV11
#
     do jindex11
     do kindex11
#
     tcoef11(kindex11,jindex11)=Smat11(kindex11,jindex11)
#
     if kindex11 == 1
     if jindex11 == 1
     execute return_sval tcoef11  Aeig1
     endif
     endif
     if kindex11 == 2
     if jindex11 == 2
     execute return_sval tcoef11  Aeig2
     endif
     endif
     if kindex11 == 3
     if jindex11 == 3
     execute return_sval tcoef11  Aeig3
     endif
     endif
     if kindex11 == 4
     if jindex11 == 4
     execute return_sval tcoef11  Aeig4
     endif
     endif
     if kindex11 == 5
     if jindex11 == 5
     execute return_sval tcoef11  Aeig5
     endif
     endif
     if kindex11 == 6
     if jindex11 == 6
     execute return_sval tcoef11  Aeig6
     endif
     endif
     if kindex11 == 7
     if jindex11 == 7
     execute return_sval tcoef11  Aeig7
     endif
     endif
     if kindex11 == 8
     if jindex11 == 8
     execute return_sval tcoef11  Aeig8
     endif
     endif
     if kindex11 == 9
     if jindex11 == 9
     execute return_sval tcoef11  Aeig9
     endif
     endif
     if kindex11 == 10
     if jindex11 == 10
     execute return_sval tcoef11  Aeig10
     endif
     endif
     if kindex11 == 11
     if jindex11 == 11
     execute return_sval tcoef11  Aeig11
     endif
     endif
#
     enddo kindex11
     enddo jindex11
#
     endif
#
#
#    --------------end 11th iteration-----------------
#
#
#    --------------12th iteration-----------------
     if spdim == 12
#
     execute eig_nonsymm Smat12 SVEV12
#
     do jindex12
     do kindex12
#
     tcoef12(kindex12,jindex12)=Smat12(kindex12,jindex12)
#
     if kindex12 == 1
     if jindex12 == 1
     execute return_sval tcoef12  Aeig1
     endif
     endif
     if kindex12 == 2
     if jindex12 == 2
     execute return_sval tcoef12  Aeig2
     endif
     endif
     if kindex12 == 3
     if jindex12 == 3
     execute return_sval tcoef12  Aeig3
     endif
     endif
     if kindex12 == 4
     if jindex12 == 4
     execute return_sval tcoef12  Aeig4
     endif
     endif
     if kindex12 == 5
     if jindex12 == 5
     execute return_sval tcoef12  Aeig5
     endif
     endif
     if kindex12 == 6
     if jindex12 == 6
     execute return_sval tcoef12  Aeig6
     endif
     endif
     if kindex12 == 7
     if jindex12 == 7
     execute return_sval tcoef12  Aeig7
     endif
     endif
     if kindex12 == 8
     if jindex12 == 8
     execute return_sval tcoef12  Aeig8
     endif
     endif
     if kindex12 == 9
     if jindex12 == 9
     execute return_sval tcoef12  Aeig9
     endif
     endif
     if kindex12 == 10
     if jindex12 == 10
     execute return_sval tcoef12  Aeig10
     endif
     endif
     if kindex12 == 11
     if jindex12 == 11
     execute return_sval tcoef12  Aeig11
     endif
     endif
     if kindex12 == 12
     if jindex12 == 12
     execute return_sval tcoef12  Aeig12
     endif
     endif
#
     enddo kindex12
     enddo jindex12
#
     endif
#
#
#    --------------end 12th iteration-----------------
#
#
#    --------------13th iteration-----------------
     if spdim == 13
#
     execute eig_nonsymm Smat13 SVEV13
#
     do jindex13
     do kindex13
#
     tcoef13(kindex13,jindex13)=Smat13(kindex13,jindex13)
#
     if kindex13 == 1
     if jindex13 == 1
     execute return_sval tcoef13  Aeig1
     endif
     endif
     if kindex13 == 2
     if jindex13 == 2
     execute return_sval tcoef13  Aeig2
     endif
     endif
     if kindex13 == 3
     if jindex13 == 3
     execute return_sval tcoef13  Aeig3
     endif
     endif
     if kindex13 == 4
     if jindex13 == 4
     execute return_sval tcoef13  Aeig4
     endif
     endif
     if kindex13 == 5
     if jindex13 == 5
     execute return_sval tcoef13  Aeig5
     endif
     endif
     if kindex13 == 6
     if jindex13 == 6
     execute return_sval tcoef13  Aeig6
     endif
     endif
     if kindex13 == 7
     if jindex13 == 7
     execute return_sval tcoef13  Aeig7
     endif
     endif
     if kindex13 == 8
     if jindex13 == 8
     execute return_sval tcoef13  Aeig8
     endif
     endif
     if kindex13 == 9
     if jindex13 == 9
     execute return_sval tcoef13  Aeig9
     endif
     endif
     if kindex13 == 10
     if jindex13 == 10
     execute return_sval tcoef13  Aeig10
     endif
     endif
     if kindex13 == 11
     if jindex13 == 11
     execute return_sval tcoef13  Aeig11
     endif
     endif
     if kindex13 == 12
     if jindex13 == 12
     execute return_sval tcoef13  Aeig12
     endif
     endif
     if kindex13 == 13
     if jindex13 == 13
     execute return_sval tcoef13  Aeig13
     endif
     endif
#
     enddo kindex13
     enddo jindex13
#
     endif
#
#
#    --------------end 13th iteration-----------------
#
#
#    --------------14th iteration-----------------
     if spdim == 14
#
     execute eig_nonsymm Smat14 SVEV14
#
     do jindex14
     do kindex14
#
     tcoef14(kindex14,jindex14)=Smat14(kindex14,jindex14)
#
     if kindex14 == 1
     if jindex14 == 1
     execute return_sval tcoef14  Aeig1
     endif
     endif
     if kindex14 == 2
     if jindex14 == 2
     execute return_sval tcoef14  Aeig2
     endif
     endif
     if kindex14 == 3
     if jindex14 == 3
     execute return_sval tcoef14  Aeig3
     endif
     endif
     if kindex14 == 4
     if jindex14 == 4
     execute return_sval tcoef14  Aeig4
     endif
     endif
     if kindex14 == 5
     if jindex14 == 5
     execute return_sval tcoef14  Aeig5
     endif
     endif
     if kindex14 == 6
     if jindex14 == 6
     execute return_sval tcoef14  Aeig6
     endif
     endif
     if kindex14 == 7
     if jindex14 == 7
     execute return_sval tcoef14  Aeig7
     endif
     endif
     if kindex14 == 8
     if jindex14 == 8
     execute return_sval tcoef14  Aeig8
     endif
     endif
     if kindex14 == 9
     if jindex14 == 9
     execute return_sval tcoef14  Aeig9
     endif
     endif
     if kindex14 == 10
     if jindex14 == 10
     execute return_sval tcoef14  Aeig10
     endif
     endif
     if kindex14 == 11
     if jindex14 == 11
     execute return_sval tcoef14  Aeig11
     endif
     endif
     if kindex14 == 12
     if jindex14 == 12
     execute return_sval tcoef14  Aeig12
     endif
     endif
     if kindex14 == 13
     if jindex14 == 13
     execute return_sval tcoef14  Aeig13
     endif
     endif
     if kindex14 == 14
     if jindex14 == 14
     execute return_sval tcoef14  Aeig14
     endif
     endif
#
     enddo kindex14
     enddo jindex14
#
     endif
#
#
#    --------------end 14th iteration-----------------
#
#
#    --------------15th iteration-----------------
     if spdim == 15
#
     execute eig_nonsymm Smat15 SVEV15
#
     do jindex15
     do kindex15
#
     tcoef15(kindex15,jindex15)=Smat15(kindex15,jindex15)
#
     if kindex15 == 1
     if jindex15 == 1
     execute return_sval tcoef15  Aeig1
     endif
     endif
     if kindex15 == 2
     if jindex15 == 2
     execute return_sval tcoef15  Aeig2
     endif
     endif
     if kindex15 == 3
     if jindex15 == 3
     execute return_sval tcoef15  Aeig3
     endif
     endif
     if kindex15 == 4
     if jindex15 == 4
     execute return_sval tcoef15  Aeig4
     endif
     endif
     if kindex15 == 5
     if jindex15 == 5
     execute return_sval tcoef15  Aeig5
     endif
     endif
     if kindex15 == 6
     if jindex15 == 6
     execute return_sval tcoef15  Aeig6
     endif
     endif
     if kindex15 == 7
     if jindex15 == 7
     execute return_sval tcoef15  Aeig7
     endif
     endif
     if kindex15 == 8
     if jindex15 == 8
     execute return_sval tcoef15  Aeig8
     endif
     endif
     if kindex15 == 9
     if jindex15 == 9
     execute return_sval tcoef15  Aeig9
     endif
     endif
     if kindex15 == 10
     if jindex15 == 10
     execute return_sval tcoef15  Aeig10
     endif
     endif
     if kindex15 == 11
     if jindex15 == 11
     execute return_sval tcoef15  Aeig11
     endif
     endif
     if kindex15 == 12
     if jindex15 == 12
     execute return_sval tcoef15  Aeig12
     endif
     endif
     if kindex15 == 13
     if jindex15 == 13
     execute return_sval tcoef15  Aeig13
     endif
     endif
     if kindex15 == 14
     if jindex15 == 14
     execute return_sval tcoef15  Aeig14
     endif
     endif
     if kindex15 == 15
     if jindex15 == 15
     execute return_sval tcoef15  Aeig15
     endif
     endif
#
     enddo kindex15
     enddo jindex15
#
     endif
#
#
#    --------------end 15th iteration-----------------
#
#
#    --------------16th iteration-----------------
     if spdim == 16
#
     execute eig_nonsymm Smat16 SVEV16
#
     do jindex16
     do kindex16
#
     tcoef16(kindex16,jindex16)=Smat16(kindex16,jindex16)
#
     if kindex16 == 1
     if jindex16 == 1
     execute return_sval tcoef16  Aeig1
     endif
     endif
     if kindex16 == 2
     if jindex16 == 2
     execute return_sval tcoef16  Aeig2
     endif
     endif
     if kindex16 == 3
     if jindex16 == 3
     execute return_sval tcoef16  Aeig3
     endif
     endif
     if kindex16 == 4
     if jindex16 == 4
     execute return_sval tcoef16  Aeig4
     endif
     endif
     if kindex16 == 5
     if jindex16 == 5
     execute return_sval tcoef16  Aeig5
     endif
     endif
     if kindex16 == 6
     if jindex16 == 6
     execute return_sval tcoef16  Aeig6
     endif
     endif
     if kindex16 == 7
     if jindex16 == 7
     execute return_sval tcoef16  Aeig7
     endif
     endif
     if kindex16 == 8
     if jindex16 == 8
     execute return_sval tcoef16  Aeig8
     endif
     endif
     if kindex16 == 9
     if jindex16 == 9
     execute return_sval tcoef16  Aeig9
     endif
     endif
     if kindex16 == 10
     if jindex16 == 10
     execute return_sval tcoef16  Aeig10
     endif
     endif
     if kindex16 == 11
     if jindex16 == 11
     execute return_sval tcoef16  Aeig11
     endif
     endif
     if kindex16 == 12
     if jindex16 == 12
     execute return_sval tcoef16  Aeig12
     endif
     endif
     if kindex16 == 13
     if jindex16 == 13
     execute return_sval tcoef16  Aeig13
     endif
     endif
     if kindex16 == 14
     if jindex16 == 14
     execute return_sval tcoef16  Aeig14
     endif
     endif
     if kindex16 == 15
     if jindex16 == 15
     execute return_sval tcoef16  Aeig15
     endif
     endif
     if kindex16 == 16
     if jindex16 == 16
     execute return_sval tcoef16  Aeig16
     endif
     endif
#
     enddo kindex16
     enddo jindex16
#
     endif
#
#
#    --------------end 16th iteration-----------------
#
#
#    --------------17th iteration-----------------
     if spdim == 17
#
     execute eig_nonsymm Smat17 SVEV17
#
     do jindex17
     do kindex17
#
     tcoef17(kindex17,jindex17)=Smat17(kindex17,jindex17)
#
     if kindex17 == 1
     if jindex17 == 1
     execute return_sval tcoef17  Aeig1
     endif
     endif
     if kindex17 == 2
     if jindex17 == 2
     execute return_sval tcoef17  Aeig2
     endif
     endif
     if kindex17 == 3
     if jindex17 == 3
     execute return_sval tcoef17  Aeig3
     endif
     endif
     if kindex17 == 4
     if jindex17 == 4
     execute return_sval tcoef17  Aeig4
     endif
     endif
     if kindex17 == 5
     if jindex17 == 5
     execute return_sval tcoef17  Aeig5
     endif
     endif
     if kindex17 == 6
     if jindex17 == 6
     execute return_sval tcoef17  Aeig6
     endif
     endif
     if kindex17 == 7
     if jindex17 == 7
     execute return_sval tcoef17  Aeig7
     endif
     endif
     if kindex17 == 8
     if jindex17 == 8
     execute return_sval tcoef17  Aeig8
     endif
     endif
     if kindex17 == 9
     if jindex17 == 9
     execute return_sval tcoef17  Aeig9
     endif
     endif
     if kindex17 == 10
     if jindex17 == 10
     execute return_sval tcoef17  Aeig10
     endif
     endif
     if kindex17 == 11
     if jindex17 == 11
     execute return_sval tcoef17  Aeig11
     endif
     endif
     if kindex17 == 12
     if jindex17 == 12
     execute return_sval tcoef17  Aeig12
     endif
     endif
     if kindex17 == 13
     if jindex17 == 13
     execute return_sval tcoef17  Aeig13
     endif
     endif
     if kindex17 == 14
     if jindex17 == 14
     execute return_sval tcoef17  Aeig14
     endif
     endif
     if kindex17 == 15
     if jindex17 == 15
     execute return_sval tcoef17  Aeig15
     endif
     endif
     if kindex17 == 16
     if jindex17 == 16
     execute return_sval tcoef17  Aeig16
     endif
     endif
     if kindex17 == 17
     if jindex17 == 17
     execute return_sval tcoef17  Aeig17
     endif
     endif
#
     enddo kindex17
     enddo jindex17
#
     endif
#
#
#    --------------end 17th iteration-----------------
#
#
#    --------------18th iteration-----------------
     if spdim == 18
#
     execute eig_nonsymm Smat18 SVEV18
#
     do jindex18
     do kindex18
#
     tcoef18(kindex18,jindex18)=Smat18(kindex18,jindex18)
#
     if kindex18 == 1
     if jindex18 == 1
     execute return_sval tcoef18  Aeig1
     endif
     endif
     if kindex18 == 2
     if jindex18 == 2
     execute return_sval tcoef18  Aeig2
     endif
     endif
     if kindex18 == 3
     if jindex18 == 3
     execute return_sval tcoef18  Aeig3
     endif
     endif
     if kindex18 == 4
     if jindex18 == 4
     execute return_sval tcoef18  Aeig4
     endif
     endif
     if kindex18 == 5
     if jindex18 == 5
     execute return_sval tcoef18  Aeig5
     endif
     endif
     if kindex18 == 6
     if jindex18 == 6
     execute return_sval tcoef18  Aeig6
     endif
     endif
     if kindex18 == 7
     if jindex18 == 7
     execute return_sval tcoef18  Aeig7
     endif
     endif
     if kindex18 == 8
     if jindex18 == 8
     execute return_sval tcoef18  Aeig8
     endif
     endif
     if kindex18 == 9
     if jindex18 == 9
     execute return_sval tcoef18  Aeig9
     endif
     endif
     if kindex18 == 10
     if jindex18 == 10
     execute return_sval tcoef18  Aeig10
     endif
     endif
     if kindex18 == 11
     if jindex18 == 11
     execute return_sval tcoef18  Aeig11
     endif
     endif
     if kindex18 == 12
     if jindex18 == 12
     execute return_sval tcoef18  Aeig12
     endif
     endif
     if kindex18 == 13
     if jindex18 == 13
     execute return_sval tcoef18  Aeig13
     endif
     endif
     if kindex18 == 14
     if jindex18 == 14
     execute return_sval tcoef18  Aeig14
     endif
     endif
     if kindex18 == 15
     if jindex18 == 15
     execute return_sval tcoef18  Aeig15
     endif
     endif
     if kindex18 == 16
     if jindex18 == 16
     execute return_sval tcoef18  Aeig16
     endif
     endif
     if kindex18 == 17
     if jindex18 == 17
     execute return_sval tcoef18  Aeig17
     endif
     endif
     if kindex18 == 18
     if jindex18 == 18
     execute return_sval tcoef18  Aeig18
     endif
     endif
#
     enddo kindex18
     enddo jindex18
#
     endif
#
#
#    --------------end 18th iteration-----------------
#
#
#    --------------19th iteration-----------------
     if spdim == 19
#
     execute eig_nonsymm Smat19 SVEV19
#
     do jindex19
     do kindex19
#
     tcoef19(kindex19,jindex19)=Smat19(kindex19,jindex19)
#
     if kindex19 == 1
     if jindex19 == 1
     execute return_sval tcoef19  Aeig1
     endif
     endif
     if kindex19 == 2
     if jindex19 == 2
     execute return_sval tcoef19  Aeig2
     endif
     endif
     if kindex19 == 3
     if jindex19 == 3
     execute return_sval tcoef19  Aeig3
     endif
     endif
     if kindex19 == 4
     if jindex19 == 4
     execute return_sval tcoef19  Aeig4
     endif
     endif
     if kindex19 == 5
     if jindex19 == 5
     execute return_sval tcoef19  Aeig5
     endif
     endif
     if kindex19 == 6
     if jindex19 == 6
     execute return_sval tcoef19  Aeig6
     endif
     endif
     if kindex19 == 7
     if jindex19 == 7
     execute return_sval tcoef19  Aeig7
     endif
     endif
     if kindex19 == 8
     if jindex19 == 8
     execute return_sval tcoef19  Aeig8
     endif
     endif
     if kindex19 == 9
     if jindex19 == 9
     execute return_sval tcoef19  Aeig9
     endif
     endif
     if kindex19 == 10
     if jindex19 == 10
     execute return_sval tcoef19  Aeig10
     endif
     endif
     if kindex19 == 11
     if jindex19 == 11
     execute return_sval tcoef19  Aeig11
     endif
     endif
     if kindex19 == 12
     if jindex19 == 12
     execute return_sval tcoef19  Aeig12
     endif
     endif
     if kindex19 == 13
     if jindex19 == 13
     execute return_sval tcoef19  Aeig13
     endif
     endif
     if kindex19 == 14
     if jindex19 == 14
     execute return_sval tcoef19  Aeig14
     endif
     endif
     if kindex19 == 15
     if jindex19 == 15
     execute return_sval tcoef19  Aeig15
     endif
     endif
     if kindex19 == 16
     if jindex19 == 16
     execute return_sval tcoef19  Aeig16
     endif
     endif
     if kindex19 == 17
     if jindex19 == 17
     execute return_sval tcoef19  Aeig17
     endif
     endif
     if kindex19 == 18
     if jindex19 == 18
     execute return_sval tcoef19  Aeig18
     endif
     endif
     if kindex19 == 19
     if jindex19 == 19
     execute return_sval tcoef19  Aeig19
     endif
     endif
#
     enddo kindex19
     enddo jindex19
#
     endif
#
#
#    --------------end 19th iteration-----------------
#
#
#    --------------20th iteration-----------------
     if spdim == 20
#
     execute eig_nonsymm Smat20 SVEV20
#
     do jindex20
     do kindex20
#
     tcoef20(kindex20,jindex20)=Smat20(kindex20,jindex20)
#
     if kindex20 == 1
     if jindex20 == 1
     execute return_sval tcoef20  Aeig1
     endif
     endif
     if kindex20 == 2
     if jindex20 == 2
     execute return_sval tcoef20  Aeig2
     endif
     endif
     if kindex20 == 3
     if jindex20 == 3
     execute return_sval tcoef20  Aeig3
     endif
     endif
     if kindex20 == 4
     if jindex20 == 4
     execute return_sval tcoef20  Aeig4
     endif
     endif
     if kindex20 == 5
     if jindex20 == 5
     execute return_sval tcoef20  Aeig5
     endif
     endif
     if kindex20 == 6
     if jindex20 == 6
     execute return_sval tcoef20  Aeig6
     endif
     endif
     if kindex20 == 7
     if jindex20 == 7
     execute return_sval tcoef20  Aeig7
     endif
     endif
     if kindex20 == 8
     if jindex20 == 8
     execute return_sval tcoef20  Aeig8
     endif
     endif
     if kindex20 == 9
     if jindex20 == 9
     execute return_sval tcoef20  Aeig9
     endif
     endif
     if kindex20 == 10
     if jindex20 == 10
     execute return_sval tcoef20  Aeig10
     endif
     endif
     if kindex20 == 11
     if jindex20 == 11
     execute return_sval tcoef20  Aeig11
     endif
     endif
     if kindex20 == 12
     if jindex20 == 12
     execute return_sval tcoef20  Aeig12
     endif
     endif
     if kindex20 == 13
     if jindex20 == 13
     execute return_sval tcoef20  Aeig13
     endif
     endif
     if kindex20 == 14
     if jindex20 == 14
     execute return_sval tcoef20  Aeig14
     endif
     endif
     if kindex20 == 15
     if jindex20 == 15
     execute return_sval tcoef20  Aeig15
     endif
     endif
     if kindex20 == 16
     if jindex20 == 16
     execute return_sval tcoef20  Aeig16
     endif
     endif
     if kindex20 == 17
     if jindex20 == 17
     execute return_sval tcoef20  Aeig17
     endif
     endif
     if kindex20 == 18
     if jindex20 == 18
     execute return_sval tcoef20  Aeig18
     endif
     endif
     if kindex20 == 19
     if jindex20 == 19
     execute return_sval tcoef20  Aeig19
     endif
     endif
     if kindex20 == 20
     if jindex20 == 20
     execute return_sval tcoef20  Aeig20
     endif
     endif
#
     enddo kindex20
     enddo jindex20
#
     endif
#
#    --------------end 20th iteration-----------------
#
#======================================================
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#--end of script generated part of the code
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#======================================================
#
     ENDPROC Adiag
#
#
     PROC SELVEC
#
     if spdim==1 
#
     do jindex20 
     do kindex20 
         if jindex20 == 1 
         if kindex20 == 1 
            t20(kindex20,jindex20) = sMAT20(kindex20,jindex20) 
            execute return_sval t20  omega  
         endif 
         endif 
     enddo kindex20 
     enddo jindex20 
#
     imax=1.0
#
     endif
#
#    SECOND AND FURTHER ITERATIONS
#
     if spdim >= 2
#
      Aeigvm1=0.0
      Aeigvm2=0.0
      Aeigvm3=0.0
      Aeigvm4=0.0
      Aeigvm5=0.0
      Aeigvm6=0.0
      Aeigvm7=0.0
      Aeigvm8=0.0
      Aeigvm9=0.0
      Aeigvm10=0.0
      Aeigvm11=0.0
      Aeigvm12=0.0
      Aeigvm13=0.0
      Aeigvm14=0.0
      Aeigvm15=0.0
      Aeigvm16=0.0
      Aeigvm17=0.0
      Aeigvm18=0.0
      Aeigvm19=0.0
      Aeigvm20=0.0
#
#======================================================
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#--start of script generated part of the code
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#======================================================
#----------find the lowest eigenvalue not being the previous root------
#
      xmax=1000.0
      ncount=0.0

      do spdim20
#
      ncount+=1.0
#
     if ncount > nsp
     exit
     endif
#
     if spdim20 == 1
     aeigtemp=Aeig1
     endif
     if spdim20 == 2
     aeigtemp=Aeig2
     endif
     if spdim20 == 3
     aeigtemp=Aeig3
     endif
     if spdim20 == 4
     aeigtemp=Aeig4
     endif
     if spdim20 == 5
     aeigtemp=Aeig5
     endif
     if spdim20 == 6
     aeigtemp=Aeig6
     endif
     if spdim20 == 7
     aeigtemp=Aeig7
     endif
     if spdim20 == 8
     aeigtemp=Aeig8
     endif
     if spdim20 == 9
     aeigtemp=Aeig9
     endif
     if spdim20 == 10
     aeigtemp=Aeig10
     endif
     if spdim20 == 11
     aeigtemp=Aeig11
     endif
     if spdim20 == 12
     aeigtemp=Aeig12
     endif
     if spdim20 == 13
     aeigtemp=Aeig13
     endif
     if spdim20 == 14
     aeigtemp=Aeig14
     endif
     if spdim20 == 15
     aeigtemp=Aeig15
     endif
     if spdim20 == 16
     aeigtemp=Aeig16
     endif
     if spdim20 == 17
     aeigtemp=Aeig17
     endif
     if spdim20 == 18
     aeigtemp=Aeig18
     endif
     if spdim20 == 19
     aeigtemp=Aeig19
     endif
     if spdim20 == 20
     aeigtemp=Aeig20
     endif
#
       aeigtemp2=aeigtemp
       if aeigtemp2 < 0.0
         aeigtemp2*=-1.0
       endif
       if aeigtemp2 < eomthresh
         aeigtemp=1111.0
       endif
#
       aeigtemp2=aeigtemp
#
       do jindex12
#
     if jindex12 == 1
     xtemp=root1-aeigtemp
     if xtemp<0.0
     xtemp*=-1.0
     endif
     if xtemp < eomthresh
     aeigtemp2=1001.0
     endif
     endif
#
     if jindex12 == 2
     xtemp=root2-aeigtemp
     if xtemp<0.0
     xtemp*=-1.0
     endif
     if xtemp < eomthresh
     aeigtemp2=1001.0
     endif
     endif
#
     if jindex12 == 3
     xtemp=root3-aeigtemp
     if xtemp<0.0
     xtemp*=-1.0
     endif
     if xtemp < eomthresh
     aeigtemp2=1001.0
     endif
     endif
#
     if jindex12 == 4
     xtemp=root4-aeigtemp
     if xtemp<0.0
     xtemp*=-1.0
     endif
     if xtemp < eomthresh
     aeigtemp2=1001.0
     endif
     endif
#
     if jindex12 == 5
     xtemp=root5-aeigtemp
     if xtemp<0.0
     xtemp*=-1.0
     endif
     if xtemp < eomthresh
     aeigtemp2=1001.0
     endif
     endif
#
     if jindex12 == 6
     xtemp=root6-aeigtemp
     if xtemp<0.0
     xtemp*=-1.0
     endif
     if xtemp < eomthresh
     aeigtemp2=1001.0
     endif
     endif
#
     if jindex12 == 7
     xtemp=root7-aeigtemp
     if xtemp<0.0
     xtemp*=-1.0
     endif
     if xtemp < eomthresh
     aeigtemp2=1001.0
     endif
     endif
#
     if jindex12 == 8
     xtemp=root8-aeigtemp
     if xtemp<0.0
     xtemp*=-1.0
     endif
     if xtemp < eomthresh
     aeigtemp2=1001.0
     endif
     endif
#
     if jindex12 == 9
     xtemp=root9-aeigtemp
     if xtemp<0.0
     xtemp*=-1.0
     endif
     if xtemp < eomthresh
     aeigtemp2=1001.0
     endif
     endif
#
     if jindex12 == 10
     xtemp=root10-aeigtemp
     if xtemp<0.0
     xtemp*=-1.0
     endif
     if xtemp < eomthresh
     aeigtemp2=1001.0
     endif
     endif
#
     if jindex12 == 11
     xtemp=root11-aeigtemp
     if xtemp<0.0
     xtemp*=-1.0
     endif
     if xtemp < eomthresh
     aeigtemp2=1001.0
     endif
     endif
#
     if jindex12 == 12
     xtemp=root12-aeigtemp
     if xtemp<0.0
     xtemp*=-1.0
     endif
     if xtemp < eomthresh
     aeigtemp2=1001.0
     endif
     endif
#
#
      enddo jindex12
#
      aeigtemp=aeigtemp2

     if aeigtemp < xmax
     xmax=aeigtemp
     imax=ncount
     endif

      enddo spdim20
#
#
#----------get the chosen eigenvector------------
      ncount=0.0
#
      do spdim20
#
      ncount+=1.0
#
      if imax == ncount
#
      if spdim20 == 1
      omega=Aeig1
      endif
#
      if spdim20 == 2
      omega=Aeig2
      endif
#
      if spdim20 == 3
      omega=Aeig3
      endif
#
      if spdim20 == 4
      omega=Aeig4
      endif
#
      if spdim20 == 5
      omega=Aeig5
      endif
#
      if spdim20 == 6
      omega=Aeig6
      endif
#
      if spdim20 == 7
      omega=Aeig7
      endif
#
      if spdim20 == 8
      omega=Aeig8
      endif
#
      if spdim20 == 9
      omega=Aeig9
      endif
#
      if spdim20 == 10
      omega=Aeig10
      endif
#
      if spdim20 == 11
      omega=Aeig11
      endif
#
      if spdim20 == 12
      omega=Aeig12
      endif
#
      if spdim20 == 13
      omega=Aeig13
      endif
#
      if spdim20 == 14
      omega=Aeig14
      endif
#
      if spdim20 == 15
      omega=Aeig15
      endif
#
      if spdim20 == 16
      omega=Aeig16
      endif
#
      if spdim20 == 17
      omega=Aeig17
      endif
#
      if spdim20 == 18
      omega=Aeig18
      endif
#
      if spdim20 == 19
      omega=Aeig19
      endif
#
      if spdim20 == 20
      omega=Aeig20
      endif
#
#
#    --------------2th iteration-----------------
     if spdim == 2
#
     do jindex2
     do kindex2
#
     tcoef2(kindex2,jindex2)=Svev2(kindex2,jindex2)
#
     if jindex2 == spdim20
#
     if kindex2 == 1
     execute return_sval tcoef2  Aeigvm1
     endif
     if kindex2 == 2
     execute return_sval tcoef2  Aeigvm2
     endif
#
     endif
#
     enddo kindex2
     enddo jindex2
#
     endif
#
#
#    --------------end 2th iteration-----------------
#
#
#    --------------3th iteration-----------------
     if spdim == 3
#
     do jindex3
     do kindex3
#
     tcoef3(kindex3,jindex3)=Svev3(kindex3,jindex3)
#
     if jindex3 == spdim20
#
     if kindex3 == 1
     execute return_sval tcoef3  Aeigvm1
     endif
     if kindex3 == 2
     execute return_sval tcoef3  Aeigvm2
     endif
     if kindex3 == 3
     execute return_sval tcoef3  Aeigvm3
     endif
#
     endif
#
     enddo kindex3
     enddo jindex3
#
     endif
#
#
#    --------------end 3th iteration-----------------
#
#
#    --------------4th iteration-----------------
     if spdim == 4
#
     do jindex4
     do kindex4
#
     tcoef4(kindex4,jindex4)=Svev4(kindex4,jindex4)
#
     if jindex4 == spdim20
#
     if kindex4 == 1
     execute return_sval tcoef4  Aeigvm1
     endif
     if kindex4 == 2
     execute return_sval tcoef4  Aeigvm2
     endif
     if kindex4 == 3
     execute return_sval tcoef4  Aeigvm3
     endif
     if kindex4 == 4
     execute return_sval tcoef4  Aeigvm4
     endif
#
     endif
#
     enddo kindex4
     enddo jindex4
#
     endif
#
#
#    --------------end 4th iteration-----------------
#
#
#    --------------5th iteration-----------------
     if spdim == 5
#
     do jindex5
     do kindex5
#
     tcoef5(kindex5,jindex5)=Svev5(kindex5,jindex5)
#
     if jindex5 == spdim20
#
     if kindex5 == 1
     execute return_sval tcoef5  Aeigvm1
     endif
     if kindex5 == 2
     execute return_sval tcoef5  Aeigvm2
     endif
     if kindex5 == 3
     execute return_sval tcoef5  Aeigvm3
     endif
     if kindex5 == 4
     execute return_sval tcoef5  Aeigvm4
     endif
     if kindex5 == 5
     execute return_sval tcoef5  Aeigvm5
     endif
#
     endif
#
     enddo kindex5
     enddo jindex5
#
     endif
#
#
#    --------------end 5th iteration-----------------
#
#
#    --------------6th iteration-----------------
     if spdim == 6
#
     do jindex6
     do kindex6
#
     tcoef6(kindex6,jindex6)=Svev6(kindex6,jindex6)
#
     if jindex6 == spdim20
#
     if kindex6 == 1
     execute return_sval tcoef6  Aeigvm1
     endif
     if kindex6 == 2
     execute return_sval tcoef6  Aeigvm2
     endif
     if kindex6 == 3
     execute return_sval tcoef6  Aeigvm3
     endif
     if kindex6 == 4
     execute return_sval tcoef6  Aeigvm4
     endif
     if kindex6 == 5
     execute return_sval tcoef6  Aeigvm5
     endif
     if kindex6 == 6
     execute return_sval tcoef6  Aeigvm6
     endif
#
     endif
#
     enddo kindex6
     enddo jindex6
#
     endif
#
#
#    --------------end 6th iteration-----------------
#
#
#    --------------7th iteration-----------------
     if spdim == 7
#
     do jindex7
     do kindex7
#
     tcoef7(kindex7,jindex7)=Svev7(kindex7,jindex7)
#
     if jindex7 == spdim20
#
     if kindex7 == 1
     execute return_sval tcoef7  Aeigvm1
     endif
     if kindex7 == 2
     execute return_sval tcoef7  Aeigvm2
     endif
     if kindex7 == 3
     execute return_sval tcoef7  Aeigvm3
     endif
     if kindex7 == 4
     execute return_sval tcoef7  Aeigvm4
     endif
     if kindex7 == 5
     execute return_sval tcoef7  Aeigvm5
     endif
     if kindex7 == 6
     execute return_sval tcoef7  Aeigvm6
     endif
     if kindex7 == 7
     execute return_sval tcoef7  Aeigvm7
     endif
#
     endif
#
     enddo kindex7
     enddo jindex7
#
     endif
#
#
#    --------------end 7th iteration-----------------
#
#
#    --------------8th iteration-----------------
     if spdim == 8
#
     do jindex8
     do kindex8
#
     tcoef8(kindex8,jindex8)=Svev8(kindex8,jindex8)
#
     if jindex8 == spdim20
#
     if kindex8 == 1
     execute return_sval tcoef8  Aeigvm1
     endif
     if kindex8 == 2
     execute return_sval tcoef8  Aeigvm2
     endif
     if kindex8 == 3
     execute return_sval tcoef8  Aeigvm3
     endif
     if kindex8 == 4
     execute return_sval tcoef8  Aeigvm4
     endif
     if kindex8 == 5
     execute return_sval tcoef8  Aeigvm5
     endif
     if kindex8 == 6
     execute return_sval tcoef8  Aeigvm6
     endif
     if kindex8 == 7
     execute return_sval tcoef8  Aeigvm7
     endif
     if kindex8 == 8
     execute return_sval tcoef8  Aeigvm8
     endif
#
     endif
#
     enddo kindex8
     enddo jindex8
#
     endif
#
#
#    --------------end 8th iteration-----------------
#
#
#    --------------9th iteration-----------------
     if spdim == 9
#
     do jindex9
     do kindex9
#
     tcoef9(kindex9,jindex9)=Svev9(kindex9,jindex9)
#
     if jindex9 == spdim20
#
     if kindex9 == 1
     execute return_sval tcoef9  Aeigvm1
     endif
     if kindex9 == 2
     execute return_sval tcoef9  Aeigvm2
     endif
     if kindex9 == 3
     execute return_sval tcoef9  Aeigvm3
     endif
     if kindex9 == 4
     execute return_sval tcoef9  Aeigvm4
     endif
     if kindex9 == 5
     execute return_sval tcoef9  Aeigvm5
     endif
     if kindex9 == 6
     execute return_sval tcoef9  Aeigvm6
     endif
     if kindex9 == 7
     execute return_sval tcoef9  Aeigvm7
     endif
     if kindex9 == 8
     execute return_sval tcoef9  Aeigvm8
     endif
     if kindex9 == 9
     execute return_sval tcoef9  Aeigvm9
     endif
#
     endif
#
     enddo kindex9
     enddo jindex9
#
     endif
#
#
#    --------------end 9th iteration-----------------
#
#
#    --------------10th iteration-----------------
     if spdim == 10
#
     do jindex10
     do kindex10
#
     tcoef10(kindex10,jindex10)=Svev10(kindex10,jindex10)
#
     if jindex10 == spdim20
#
     if kindex10 == 1
     execute return_sval tcoef10  Aeigvm1
     endif
     if kindex10 == 2
     execute return_sval tcoef10  Aeigvm2
     endif
     if kindex10 == 3
     execute return_sval tcoef10  Aeigvm3
     endif
     if kindex10 == 4
     execute return_sval tcoef10  Aeigvm4
     endif
     if kindex10 == 5
     execute return_sval tcoef10  Aeigvm5
     endif
     if kindex10 == 6
     execute return_sval tcoef10  Aeigvm6
     endif
     if kindex10 == 7
     execute return_sval tcoef10  Aeigvm7
     endif
     if kindex10 == 8
     execute return_sval tcoef10  Aeigvm8
     endif
     if kindex10 == 9
     execute return_sval tcoef10  Aeigvm9
     endif
     if kindex10 == 10
     execute return_sval tcoef10  Aeigvm10
     endif
#
     endif
#
     enddo kindex10
     enddo jindex10
#
     endif
#
#
#    --------------end 10th iteration-----------------
#
#
#    --------------11th iteration-----------------
     if spdim == 11
#
     do jindex11
     do kindex11
#
     tcoef11(kindex11,jindex11)=Svev11(kindex11,jindex11)
#
     if jindex11 == spdim20
#
     if kindex11 == 1
     execute return_sval tcoef11  Aeigvm1
     endif
     if kindex11 == 2
     execute return_sval tcoef11  Aeigvm2
     endif
     if kindex11 == 3
     execute return_sval tcoef11  Aeigvm3
     endif
     if kindex11 == 4
     execute return_sval tcoef11  Aeigvm4
     endif
     if kindex11 == 5
     execute return_sval tcoef11  Aeigvm5
     endif
     if kindex11 == 6
     execute return_sval tcoef11  Aeigvm6
     endif
     if kindex11 == 7
     execute return_sval tcoef11  Aeigvm7
     endif
     if kindex11 == 8
     execute return_sval tcoef11  Aeigvm8
     endif
     if kindex11 == 9
     execute return_sval tcoef11  Aeigvm9
     endif
     if kindex11 == 10
     execute return_sval tcoef11  Aeigvm10
     endif
     if kindex11 == 11
     execute return_sval tcoef11  Aeigvm11
     endif
#
     endif
#
     enddo kindex11
     enddo jindex11
#
     endif
#
#
#    --------------end 11th iteration-----------------
#
#
#    --------------12th iteration-----------------
     if spdim == 12
#
     do jindex12
     do kindex12
#
     tcoef12(kindex12,jindex12)=Svev12(kindex12,jindex12)
#
     if jindex12 == spdim20
#
     if kindex12 == 1
     execute return_sval tcoef12  Aeigvm1
     endif
     if kindex12 == 2
     execute return_sval tcoef12  Aeigvm2
     endif
     if kindex12 == 3
     execute return_sval tcoef12  Aeigvm3
     endif
     if kindex12 == 4
     execute return_sval tcoef12  Aeigvm4
     endif
     if kindex12 == 5
     execute return_sval tcoef12  Aeigvm5
     endif
     if kindex12 == 6
     execute return_sval tcoef12  Aeigvm6
     endif
     if kindex12 == 7
     execute return_sval tcoef12  Aeigvm7
     endif
     if kindex12 == 8
     execute return_sval tcoef12  Aeigvm8
     endif
     if kindex12 == 9
     execute return_sval tcoef12  Aeigvm9
     endif
     if kindex12 == 10
     execute return_sval tcoef12  Aeigvm10
     endif
     if kindex12 == 11
     execute return_sval tcoef12  Aeigvm11
     endif
     if kindex12 == 12
     execute return_sval tcoef12  Aeigvm12
     endif
#
     endif
#
     enddo kindex12
     enddo jindex12
#
     endif
#
#
#    --------------end 12th iteration-----------------
#
#
#    --------------13th iteration-----------------
     if spdim == 13
#
     do jindex13
     do kindex13
#
     tcoef13(kindex13,jindex13)=Svev13(kindex13,jindex13)
#
     if jindex13 == spdim20
#
     if kindex13 == 1
     execute return_sval tcoef13  Aeigvm1
     endif
     if kindex13 == 2
     execute return_sval tcoef13  Aeigvm2
     endif
     if kindex13 == 3
     execute return_sval tcoef13  Aeigvm3
     endif
     if kindex13 == 4
     execute return_sval tcoef13  Aeigvm4
     endif
     if kindex13 == 5
     execute return_sval tcoef13  Aeigvm5
     endif
     if kindex13 == 6
     execute return_sval tcoef13  Aeigvm6
     endif
     if kindex13 == 7
     execute return_sval tcoef13  Aeigvm7
     endif
     if kindex13 == 8
     execute return_sval tcoef13  Aeigvm8
     endif
     if kindex13 == 9
     execute return_sval tcoef13  Aeigvm9
     endif
     if kindex13 == 10
     execute return_sval tcoef13  Aeigvm10
     endif
     if kindex13 == 11
     execute return_sval tcoef13  Aeigvm11
     endif
     if kindex13 == 12
     execute return_sval tcoef13  Aeigvm12
     endif
     if kindex13 == 13
     execute return_sval tcoef13  Aeigvm13
     endif
#
     endif
#
     enddo kindex13
     enddo jindex13
#
     endif
#
#
#    --------------end 13th iteration-----------------
#
#
#    --------------14th iteration-----------------
     if spdim == 14
#
     do jindex14
     do kindex14
#
     tcoef14(kindex14,jindex14)=Svev14(kindex14,jindex14)
#
     if jindex14 == spdim20
#
     if kindex14 == 1
     execute return_sval tcoef14  Aeigvm1
     endif
     if kindex14 == 2
     execute return_sval tcoef14  Aeigvm2
     endif
     if kindex14 == 3
     execute return_sval tcoef14  Aeigvm3
     endif
     if kindex14 == 4
     execute return_sval tcoef14  Aeigvm4
     endif
     if kindex14 == 5
     execute return_sval tcoef14  Aeigvm5
     endif
     if kindex14 == 6
     execute return_sval tcoef14  Aeigvm6
     endif
     if kindex14 == 7
     execute return_sval tcoef14  Aeigvm7
     endif
     if kindex14 == 8
     execute return_sval tcoef14  Aeigvm8
     endif
     if kindex14 == 9
     execute return_sval tcoef14  Aeigvm9
     endif
     if kindex14 == 10
     execute return_sval tcoef14  Aeigvm10
     endif
     if kindex14 == 11
     execute return_sval tcoef14  Aeigvm11
     endif
     if kindex14 == 12
     execute return_sval tcoef14  Aeigvm12
     endif
     if kindex14 == 13
     execute return_sval tcoef14  Aeigvm13
     endif
     if kindex14 == 14
     execute return_sval tcoef14  Aeigvm14
     endif
#
     endif
#
     enddo kindex14
     enddo jindex14
#
     endif
#
#
#    --------------end 14th iteration-----------------
#
#
#    --------------15th iteration-----------------
     if spdim == 15
#
     do jindex15
     do kindex15
#
     tcoef15(kindex15,jindex15)=Svev15(kindex15,jindex15)
#
     if jindex15 == spdim20
#
     if kindex15 == 1
     execute return_sval tcoef15  Aeigvm1
     endif
     if kindex15 == 2
     execute return_sval tcoef15  Aeigvm2
     endif
     if kindex15 == 3
     execute return_sval tcoef15  Aeigvm3
     endif
     if kindex15 == 4
     execute return_sval tcoef15  Aeigvm4
     endif
     if kindex15 == 5
     execute return_sval tcoef15  Aeigvm5
     endif
     if kindex15 == 6
     execute return_sval tcoef15  Aeigvm6
     endif
     if kindex15 == 7
     execute return_sval tcoef15  Aeigvm7
     endif
     if kindex15 == 8
     execute return_sval tcoef15  Aeigvm8
     endif
     if kindex15 == 9
     execute return_sval tcoef15  Aeigvm9
     endif
     if kindex15 == 10
     execute return_sval tcoef15  Aeigvm10
     endif
     if kindex15 == 11
     execute return_sval tcoef15  Aeigvm11
     endif
     if kindex15 == 12
     execute return_sval tcoef15  Aeigvm12
     endif
     if kindex15 == 13
     execute return_sval tcoef15  Aeigvm13
     endif
     if kindex15 == 14
     execute return_sval tcoef15  Aeigvm14
     endif
     if kindex15 == 15
     execute return_sval tcoef15  Aeigvm15
     endif
#
     endif
#
     enddo kindex15
     enddo jindex15
#
     endif
#
#
#    --------------end 15th iteration-----------------
#
#
#    --------------16th iteration-----------------
     if spdim == 16
#
     do jindex16
     do kindex16
#
     tcoef16(kindex16,jindex16)=Svev16(kindex16,jindex16)
#
     if jindex16 == spdim20
#
     if kindex16 == 1
     execute return_sval tcoef16  Aeigvm1
     endif
     if kindex16 == 2
     execute return_sval tcoef16  Aeigvm2
     endif
     if kindex16 == 3
     execute return_sval tcoef16  Aeigvm3
     endif
     if kindex16 == 4
     execute return_sval tcoef16  Aeigvm4
     endif
     if kindex16 == 5
     execute return_sval tcoef16  Aeigvm5
     endif
     if kindex16 == 6
     execute return_sval tcoef16  Aeigvm6
     endif
     if kindex16 == 7
     execute return_sval tcoef16  Aeigvm7
     endif
     if kindex16 == 8
     execute return_sval tcoef16  Aeigvm8
     endif
     if kindex16 == 9
     execute return_sval tcoef16  Aeigvm9
     endif
     if kindex16 == 10
     execute return_sval tcoef16  Aeigvm10
     endif
     if kindex16 == 11
     execute return_sval tcoef16  Aeigvm11
     endif
     if kindex16 == 12
     execute return_sval tcoef16  Aeigvm12
     endif
     if kindex16 == 13
     execute return_sval tcoef16  Aeigvm13
     endif
     if kindex16 == 14
     execute return_sval tcoef16  Aeigvm14
     endif
     if kindex16 == 15
     execute return_sval tcoef16  Aeigvm15
     endif
     if kindex16 == 16
     execute return_sval tcoef16  Aeigvm16
     endif
#
     endif
#
     enddo kindex16
     enddo jindex16
#
     endif
#
#
#    --------------end 16th iteration-----------------
#
#
#    --------------17th iteration-----------------
     if spdim == 17
#
     do jindex17
     do kindex17
#
     tcoef17(kindex17,jindex17)=Svev17(kindex17,jindex17)
#
     if jindex17 == spdim20
#
     if kindex17 == 1
     execute return_sval tcoef17  Aeigvm1
     endif
     if kindex17 == 2
     execute return_sval tcoef17  Aeigvm2
     endif
     if kindex17 == 3
     execute return_sval tcoef17  Aeigvm3
     endif
     if kindex17 == 4
     execute return_sval tcoef17  Aeigvm4
     endif
     if kindex17 == 5
     execute return_sval tcoef17  Aeigvm5
     endif
     if kindex17 == 6
     execute return_sval tcoef17  Aeigvm6
     endif
     if kindex17 == 7
     execute return_sval tcoef17  Aeigvm7
     endif
     if kindex17 == 8
     execute return_sval tcoef17  Aeigvm8
     endif
     if kindex17 == 9
     execute return_sval tcoef17  Aeigvm9
     endif
     if kindex17 == 10
     execute return_sval tcoef17  Aeigvm10
     endif
     if kindex17 == 11
     execute return_sval tcoef17  Aeigvm11
     endif
     if kindex17 == 12
     execute return_sval tcoef17  Aeigvm12
     endif
     if kindex17 == 13
     execute return_sval tcoef17  Aeigvm13
     endif
     if kindex17 == 14
     execute return_sval tcoef17  Aeigvm14
     endif
     if kindex17 == 15
     execute return_sval tcoef17  Aeigvm15
     endif
     if kindex17 == 16
     execute return_sval tcoef17  Aeigvm16
     endif
     if kindex17 == 17
     execute return_sval tcoef17  Aeigvm17
     endif
#
     endif
#
     enddo kindex17
     enddo jindex17
#
     endif
#
#
#    --------------end 17th iteration-----------------
#
#
#    --------------18th iteration-----------------
     if spdim == 18
#
     do jindex18
     do kindex18
#
     tcoef18(kindex18,jindex18)=Svev18(kindex18,jindex18)
#
     if jindex18 == spdim20
#
     if kindex18 == 1
     execute return_sval tcoef18  Aeigvm1
     endif
     if kindex18 == 2
     execute return_sval tcoef18  Aeigvm2
     endif
     if kindex18 == 3
     execute return_sval tcoef18  Aeigvm3
     endif
     if kindex18 == 4
     execute return_sval tcoef18  Aeigvm4
     endif
     if kindex18 == 5
     execute return_sval tcoef18  Aeigvm5
     endif
     if kindex18 == 6
     execute return_sval tcoef18  Aeigvm6
     endif
     if kindex18 == 7
     execute return_sval tcoef18  Aeigvm7
     endif
     if kindex18 == 8
     execute return_sval tcoef18  Aeigvm8
     endif
     if kindex18 == 9
     execute return_sval tcoef18  Aeigvm9
     endif
     if kindex18 == 10
     execute return_sval tcoef18  Aeigvm10
     endif
     if kindex18 == 11
     execute return_sval tcoef18  Aeigvm11
     endif
     if kindex18 == 12
     execute return_sval tcoef18  Aeigvm12
     endif
     if kindex18 == 13
     execute return_sval tcoef18  Aeigvm13
     endif
     if kindex18 == 14
     execute return_sval tcoef18  Aeigvm14
     endif
     if kindex18 == 15
     execute return_sval tcoef18  Aeigvm15
     endif
     if kindex18 == 16
     execute return_sval tcoef18  Aeigvm16
     endif
     if kindex18 == 17
     execute return_sval tcoef18  Aeigvm17
     endif
     if kindex18 == 18
     execute return_sval tcoef18  Aeigvm18
     endif
#
     endif
#
     enddo kindex18
     enddo jindex18
#
     endif
#
#
#    --------------end 18th iteration-----------------
#
#
#    --------------19th iteration-----------------
     if spdim == 19
#
     do jindex19
     do kindex19
#
     tcoef19(kindex19,jindex19)=Svev19(kindex19,jindex19)
#
     if jindex19 == spdim20
#
     if kindex19 == 1
     execute return_sval tcoef19  Aeigvm1
     endif
     if kindex19 == 2
     execute return_sval tcoef19  Aeigvm2
     endif
     if kindex19 == 3
     execute return_sval tcoef19  Aeigvm3
     endif
     if kindex19 == 4
     execute return_sval tcoef19  Aeigvm4
     endif
     if kindex19 == 5
     execute return_sval tcoef19  Aeigvm5
     endif
     if kindex19 == 6
     execute return_sval tcoef19  Aeigvm6
     endif
     if kindex19 == 7
     execute return_sval tcoef19  Aeigvm7
     endif
     if kindex19 == 8
     execute return_sval tcoef19  Aeigvm8
     endif
     if kindex19 == 9
     execute return_sval tcoef19  Aeigvm9
     endif
     if kindex19 == 10
     execute return_sval tcoef19  Aeigvm10
     endif
     if kindex19 == 11
     execute return_sval tcoef19  Aeigvm11
     endif
     if kindex19 == 12
     execute return_sval tcoef19  Aeigvm12
     endif
     if kindex19 == 13
     execute return_sval tcoef19  Aeigvm13
     endif
     if kindex19 == 14
     execute return_sval tcoef19  Aeigvm14
     endif
     if kindex19 == 15
     execute return_sval tcoef19  Aeigvm15
     endif
     if kindex19 == 16
     execute return_sval tcoef19  Aeigvm16
     endif
     if kindex19 == 17
     execute return_sval tcoef19  Aeigvm17
     endif
     if kindex19 == 18
     execute return_sval tcoef19  Aeigvm18
     endif
     if kindex19 == 19
     execute return_sval tcoef19  Aeigvm19
     endif
#
     endif
#
     enddo kindex19
     enddo jindex19
#
     endif
#
#
#    --------------end 19th iteration-----------------
#
#
#    --------------20th iteration-----------------
     if spdim == 20
#
     do jindex20
     do kindex20
#
     tcoef20(kindex20,jindex20)=Svev20(kindex20,jindex20)
#
     if jindex20 == spdim20
#
     if kindex20 == 1
     execute return_sval tcoef20  Aeigvm1
     endif
     if kindex20 == 2
     execute return_sval tcoef20  Aeigvm2
     endif
     if kindex20 == 3
     execute return_sval tcoef20  Aeigvm3
     endif
     if kindex20 == 4
     execute return_sval tcoef20  Aeigvm4
     endif
     if kindex20 == 5
     execute return_sval tcoef20  Aeigvm5
     endif
     if kindex20 == 6
     execute return_sval tcoef20  Aeigvm6
     endif
     if kindex20 == 7
     execute return_sval tcoef20  Aeigvm7
     endif
     if kindex20 == 8
     execute return_sval tcoef20  Aeigvm8
     endif
     if kindex20 == 9
     execute return_sval tcoef20  Aeigvm9
     endif
     if kindex20 == 10
     execute return_sval tcoef20  Aeigvm10
     endif
     if kindex20 == 11
     execute return_sval tcoef20  Aeigvm11
     endif
     if kindex20 == 12
     execute return_sval tcoef20  Aeigvm12
     endif
     if kindex20 == 13
     execute return_sval tcoef20  Aeigvm13
     endif
     if kindex20 == 14
     execute return_sval tcoef20  Aeigvm14
     endif
     if kindex20 == 15
     execute return_sval tcoef20  Aeigvm15
     endif
     if kindex20 == 16
     execute return_sval tcoef20  Aeigvm16
     endif
     if kindex20 == 17
     execute return_sval tcoef20  Aeigvm17
     endif
     if kindex20 == 18
     execute return_sval tcoef20  Aeigvm18
     endif
     if kindex20 == 19
     execute return_sval tcoef20  Aeigvm19
     endif
     if kindex20 == 20
     execute return_sval tcoef20  Aeigvm20
     endif
#
     endif
#
     enddo kindex20
     enddo jindex20
#
     endif
#
#
#    --------------end 20th iteration-----------------
#
#
#
      endif
#
      enddo spdim20
#======================================================
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#--end of script generated part of the code
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#======================================================
#
     endif
#
     ENDPROC SELVEC
#
# -----------------------------------------------------------------------------
#
     PROC RESID_ALL
#    -------------- 
#
     omegam=omega
     omegam*=-1.0
#
# ----------------------------------------------------------------- 
      DO k20  
         if k20 == 1 
            Aeig(k20,k20) = Aeigvm1 
         endif 
         if k20 == 2 
            Aeig(k20,k20) = Aeigvm2 
         endif 
         if k20 == 3 
            Aeig(k20,k20) = Aeigvm3 
         endif 
         if k20 == 4 
            Aeig(k20,k20) = Aeigvm4 
         endif 
         if k20 == 5 
            Aeig(k20,k20) = Aeigvm5 
         endif 
         if k20 == 6 
            Aeig(k20,k20) = Aeigvm6 
         endif 
         if k20 == 7 
            Aeig(k20,k20) = Aeigvm7 
         endif 
         if k20 == 8 
            Aeig(k20,k20) = Aeigvm8 
         endif 
         if k20 == 9 
            Aeig(k20,k20) = Aeigvm9 
         endif 
         if k20 == 10
            Aeig(k20,k20) = Aeigvm10
         endif 
         if k20 == 11
            Aeig(k20,k20) = Aeigvm11
         endif 
         if k20 == 12
            Aeig(k20,k20) = Aeigvm12
         endif 
         if k20 == 13
            Aeig(k20,k20) = Aeigvm13
         endif 
         if k20 == 14
            Aeig(k20,k20) = Aeigvm14
         endif 
         if k20 == 15
            Aeig(k20,k20) = Aeigvm15
         endif 
         if k20 == 16
            Aeig(k20,k20) = Aeigvm16
         endif 
         if k20 == 17
            Aeig(k20,k20) = Aeigvm17
         endif 
         if k20 == 18
            Aeig(k20,k20) = Aeigvm18
         endif 
         if k20 == 19
            Aeig(k20,k20) = Aeigvm19
         endif 
         if k20 == 20
            Aeig(k20,k20) = Aeigvm20
         endif 
      ENDDO k20  
#
      execute sip_barrier 
#
# -----------------------------------------------------------------
#
      PARDO a, i, b, j
            REQUEST             VCONV2AB(a,i,b,j) b
            t1aibj(a,i,b,j) = 0.0
            t2aibj(a,i,b,j) = 0.0
            if spdim >  1
               DO k21
                  if k21   <= spdim
                     REQUEST VC2AB(a,i,b,j,k21) b
                     DO k20
                        if k20 == k21
                          t20(k20,k20)      = Aeig(k20,k20)
                          execute return_sval t20 xtemp
                          t3aibj(a,i,b,j) = VC2AB(a,i,b,j,k21)
                          t3aibj(a,i,b,j) *= xtemp
                          t1aibj(a,i,b,j) += t3aibj(a,i,b,j)
                        endif
                     ENDDO k20
                  endif
               ENDDO k21
            endif
            if spdim >  1
               DO k20
                  if k20   <= spdim
                     REQUEST             VCH2AB(a,i,b,j,k20) b
                     t20(k20,k20)      = Aeig(k20,k20)
                     execute return_sval t20 xtemp
                     t3aibj(a,i,b,j) = VCH2AB(a,i,b,j,k20)
                     t3aibj(a,i,b,j) *= xtemp
                     t2aibj(a,i,b,j) += t3aibj(a,i,b,j)
                  endif
               ENDDO k20
            endif
#
            if spdim == 1
               REQUEST            VCACT2AB(a,i,b,j) j
               REQUEST            VCHACT2AB(a,i,b,j) j
               t1aibj(a,i,b,j) += VCACT2AB(a,i,b,j)
               t2aibj(a,i,b,j) += VCHACT2AB(a,i,b,j)
            endif
            t4aibj(a,i,b,j)       = t1aibj(a,i,b,j) 
#
            t1aibj(a,i,b,j)      *= omegam
            t1aibj(a,i,b,j)      += t2aibj(a,i,b,j)
#
            t3aibj(a,i,b,j)         = VCONV2AB(a,i,b,j)
            t3aibj(a,i,b,j)        *= -1.0
            t2aibj(a,i,b,j)         = omega
            t3aibj(a,i,b,j)        += t2aibj(a,i,b,j)
            execute apply_den4 t1aibj t3aibj
#
            PREPARE VCE2AB(a,i,b,j)    = t4aibj(a,i,b,j)
            PREPARE VTEMP2AB1(a,i,b,j) = t1aibj(a,i,b,j)
#
      ENDPARDO a, i, b, j
#
# ----------------------------------------------------------------- 
#
      PARDO a, i, a1, i1
            REQUEST             VCONV2AA(a,i,a1,i1) a 
            t1aiai(a,i,a1,i1) = 0.0  
            t2aiai(a,i,a1,i1) = 0.0  
            if spdim >  1 
               DO k21 
                  if k21   <= spdim 
                     REQUEST VC2AA(a,i,a1,i1,k21) a 
                     DO k20 
                        if k20 == k21 
                          t20(k20,k20)      = Aeig(k20,k20) 
                          execute return_sval t20 xtemp 
                          t3aiai(a,i,a1,i1) = VC2AA(a,i,a1,i1,k21) 
                          t3aiai(a,i,a1,i1) *= xtemp  
                          t1aiai(a,i,a1,i1) += t3aiai(a,i,a1,i1) 
                        endif 
                     ENDDO k20 
                  endif 
               ENDDO k21 
            endif 
            if spdim >  1 
               DO k20 
                  if k20   <= spdim 
                     REQUEST             VCH2AA(a,i,a1,i1,k20) a 
                     t20(k20,k20)      = Aeig(k20,k20) 
                     execute return_sval t20 xtemp 
                     t3aiai(a,i,a1,i1) = VCH2AA(a,i,a1,i1,k20) 
                     t3aiai(a,i,a1,i1) *= xtemp  
                     t2aiai(a,i,a1,i1) += t3aiai(a,i,a1,i1) 
                  endif 
               ENDDO k20 
            endif 
#
            if spdim == 1
               REQUEST              VCACT2AA(a,i,a1,i1) i1
               REQUEST              VCHACT2AA(a,i,a1,i1) i1
               t1aiai(a,i,a1,i1) += VCACT2AA(a,i,a1,i1)
               t2aiai(a,i,a1,i1) += VCHACT2AA(a,i,a1,i1)
            endif
            t4aiai(a,i,a1,i1)       = t1aiai(a,i,a1,i1) 
#
            t1aiai(a,i,a1,i1)      *= omegam
            t1aiai(a,i,a1,i1)      += t2aiai(a,i,a1,i1)
#
            t3aiai(a,i,a1,i1)       = VCONV2AA(a,i,a1,i1)
            t3aiai(a,i,a1,i1)      *= -1.0
            t2aiai(a,i,a1,i1)       = omega
            t3aiai(a,i,a1,i1)      += t2aiai(a,i,a1,i1)
            execute apply_den4_nodiag t1aiai t3aiai
#
            PREPARE VCE2AA(a,i,a1,i1)    = t4aiai(a,i,a1,i1)
            PREPARE VTEMP2AA1(a,i,a1,i1) = t1aiai(a,i,a1,i1) 
#
      ENDPARDO a, i, a1, i1
#
# ----------------------------------------------------------------- 
#
      PARDO a, i 
            GET VCONV1A(a,i)
            t1ai(a,i) = 0.0  
            t2ai(a,i) = 0.0  
            if spdim >  1 
               DO k21 
                  if k21   <= spdim 
                     GET VC1A(a,i,k21)  
                     DO k20 
                        if k20 == k21 
                          t20(k20,k20)      = Aeig(k20,k20) 
                          execute return_sval t20 xtemp 
                          t3ai(a,i) = VC1A(a,i,k21) 
                          t3ai(a,i) *= xtemp  
                          t1ai(a,i) += t3ai(a,i) 
                        endif 
                     ENDDO k20 
                  endif 
               ENDDO k21 
            endif 
            if spdim >  1 
               DO k20 
                  if k20   <= spdim 
                     GET             VCH1A(a,i,k20) 
                     t20(k20,k20)      = Aeig(k20,k20) 
                     execute return_sval t20 xtemp 
                     t3ai(a,i) = VCH1A(a,i,k20) 
                     t3ai(a,i) *= xtemp  
                     t2ai(a,i) += t3ai(a,i) 
                  endif 
               ENDDO k20 
            endif 
#
            if spdim == 1
               get VCACT1A(a,i)
               get VCHACT1A(a,i)
               t1ai(a,i) += VCACT1A(a,i)
               t2ai(a,i) += VCHACT1A(a,i)
            endif
#
            PUT VCE1A(a,i) = t1ai(a,i)
#
            t1ai(a,i)      *= omegam
            t1ai(a,i)      += t2ai(a,i)
#
            t3ai(a,i)       = VCONV1A(a,i)
            t3ai(a,i)      *= -1.0
            t2ai(a,i)       = omega
            t3ai(a,i)      += t2ai(a,i)
            execute apply_den2 t1ai t3ai
#
            DO j21 
               if j21 > spdim  
                  taiS(a,i,j21)         = t1ai(a,i)
                  PUT VC1A(a,i,j21) = taiS(a,i,j21)
                  exit
               ENDIF 
            ENDDO j21 
#
      ENDPARDO a, i 
#
# ----------------------------------------------------------------- 
#
      execute server_barrier
#
# -----------------------------------------------------------------
#
      DO j21 
         if j21 > spdim # k20 
#
            PARDO a, i, a1, i1
#
                  REQUEST             VTEMP2AA1(a,i,a1,i1) a 
                  t1aiai(a,i,a1,i1) = VTEMP2AA1(a,i,a1,i1) 
                  taiaiS(a,i,a1,i1,j21)        = t1aiai(a,i,a1,i1)
                  PREPARE VC2AA(a,i,a1,i1,j21) = taiaiS(a,i,a1,i1,j21)
#
            ENDPARDO a, i, a1, i1
#
            PARDO a, i, b, j
#
                  REQUEST                      VTEMP2AB1(a,i,b,j) b
                  t1aibj(a,i,b,j)            = VTEMP2AB1(a,i,b,j)
                  taibjS(a,i,b,j,j21)        = t1aibj(a,i,b,j)
                  PREPARE VC2AB(a,i,b,j,j21) = taibjS(a,i,b,j,j21)
#
            ENDPARDO a, i, b, j
#
            exit
         ENDIF
      ENDDO j21
#
# -----------------------------------------------------------------
#
      execute server_barrier
#
     ENDPROC RESID_ALL
#    ----------------- 
#
# ----------------------------------------------------------------------
#
     PROC SQUAREVCACT_NEW
#    -------------------- 
#
     etemp1=0.0
     etemp2=0.0
     etemp3=0.0
     etemp4=0.0
     etemp5=0.0
     sum1 = 0.0 
     sum2 = 0.0 
     sum3 = 0.0 
     sum4 = 0.0
     sum5 = 0.0
     square=0.0
     execute sip_barrier 
#
     PARDO a, b, i, j
           DO k21
              if k21 > spdim
                 REQUEST           VC2AB(a,i,b,j,k21) b
                 taibj(a,i,b,j)  = VC2AB(a,i,b,j,k21)
                 t1aibj(a,i,b,j) = taibj(a,i,b,j)
                 etemp           = taibj(a,i,b,j)*t1aibj(a,i,b,j)
                 sum5           += etemp
                 exit
              endif
           ENDDO k21
     ENDPARDO a, b, i, j
#
     PARDO a, a1, i, i1
           DO k21 
              if k21 > spdim  
                 REQUEST             VC2AA(a,i,a1,i1,k21) a 
                 taiai(a,i,a1,i1)  = VC2AA(a,i,a1,i1,k21) 
                 t1aiai(a,i,a1,i1) = taiai(a,i,a1,i1)
                 etemp             = taiai(a,i,a1,i1)*t1aiai(a,i,a1,i1)
                 etemp            *= 0.5
                 sum3             += etemp
                 exit 
              endif 
           ENDDO k21 
     ENDPARDO a, a1, i, i1
#
     PARDO a, i
           DO k21 
              if k21 > spdim  
                 GET         VC1A(a,i,k21)  
                 tai(a,i)  = VC1A(a,i,k21) 
                 t1ai(a,i) = tai(a,i)
                 etemp     = tai(a,i)*t1ai(a,i)
                 etemp    *= 2.0  
                 sum1     += etemp
                 exit 
              endif 
           ENDDO k21 
     ENDPARDO a, i 
#
     EXECUTE SERVER_BARRIER
#
     collective etemp1+=sum1
     collective etemp2+=sum2
     collective etemp3+=sum3
     collective etemp4+=sum4
     collective etemp5+=sum5
#
     square+=etemp1
     square+=etemp2
     square+=etemp3
     square+=etemp4
     square+=etemp5

     execute print_scalar etemp1 
     execute print_scalar etemp2 
     execute print_scalar etemp3 
     execute print_scalar etemp4 
     execute print_scalar etemp5 
#
       EXECUTE SIP_BARRIER
       EXECUTE SERVER_BARRIER
#
     ENDPROC SQUAREVCACT_NEW
#    ----------------------- 
#
# ----------------------------------------------------------------------
#
     PROC SCALEVCACT_NEW
#    ------------------- 
#
     DO k21 
        if k21 > spdim # k20 
#
           PARDO a, a1, i, i1
                 REQUEST                        VC2AA(a,i,a1,i1,k21) a 
                 taiai(a,i,a1,i1)             = VC2AA(a,i,a1,i1,k21) 
                 taiai(a,i,a1,i1)            *= mult
                 PREPARE VCHACT2AA(a,i,a1,i1) = taiai(a,i,a1,i1)
           ENDPARDO a, a1, i, i1
#
           PARDO a, b, i, j
                 REQUEST                      VC2AB(a,i,b,j,k21) a 
                 taibj(a,i,b,j)             = VC2AB(a,i,b,j,k21) 
                 taibj(a,i,b,j)            *= mult
                 PREPARE VCHACT2AB(a,i,b,j) = taibj(a,i,b,j)
           ENDPARDO a, b, i, j
#
           PARDO a, i 
                 GET                 VC1A(a,i,k21)  
                 tai(a,i)          = VC1A(a,i,k21) 
                 tai(a,i)         *= mult
                 PUT VCHACT1A(a,i) = tai(a,i)
           ENDPARDO a, i
#
           exit 
        endif 
     ENDDO k21 
#
     execute server_barrier
#
     ENDPROC SCALEVCACT_NEW
#
# ------------------------------------------------------------------------------- 
#
     PROC SCALEVCACT_3
#    ----------------- 
#
     PARDO a, i 
           GET         VCACT1A(a,i) 
           tai(a,i)  = VCACT1A(a,i)
           tai(a,i) *= mult
#
          #DO k20
          #   IF k20 == spdim
                 DO k21
                    IF k21 > spdim  
                       taiS(a,i,k21)      = tai(a,i)
                       PUT VC1A(a,i,k21) = taiS(a,i,k21)
                       exit
                    ENDIF
                 ENDDO k21
          #      ENDIF
          #ENDDO k20
#
     ENDPARDO a, i
#
     PARDO a, a1, i, i1
           REQUEST             VCACT2AA(a,i,a1,i1) i1
           taiai(a,i,a1,i1)  = VCACT2AA(a,i,a1,i1)
           taiai(a,i,a1,i1) *= mult
#
          #DO k20
          #   IF k20 == spdim
                 DO k21
                    IF k21 > spdim  
                       taiaiS(a,i,a1,i1,k21)        = taiai(a,i,a1,i1)
                       PREPARE VC2AA(a,i,a1,i1,k21) = taiaiS(a,i,a1,i1,k21)
                       exit
                    ENDIF
                 ENDDO k21
          #      ENDIF
          #ENDDO k20
#
     ENDPARDO a, a1, i, i1
#
     PARDO a, b, i, j
           REQUEST           VCACT2AB(a,i,b,j) j
           taibj(a,i,b,j)  = VCACT2AB(a,i,b,j)
           taibj(a,i,b,j) *= mult
#
          #DO k20
          #   IF k20 == spdim
                 DO k21
                    IF k21 > spdim  
                       taibjS(a,i,b,j,k21)        = taibj(a,i,b,j)
                       PREPARE VC2AB(a,i,b,j,k21) = taibjS(a,i,b,j,k21)
                       exit
                    ENDIF
                 ENDDO k21
          #      ENDIF
          #ENDDO k20
#
     ENDPARDO a, b, i, j
#
     execute server_barrier
#
     ENDPROC SCALEVCACT_3
#    -------------------- 
#
# ------------------------------------------------------------------------------- 
#
     PROC ORTCOEFS
#    ------------- 
#
      allocate Lorth(*,*) 
      execute server_barrier 
#
      PARDO a, i, b1, j1  
            REQUEST VCHACT2AB(a,i,b1,j1) a 
            DO k21 
               if k21 <= spdim 
                  REQUEST              VC2AB(a,i,b1,j1,k21) a 
                  taibj(a,i,b1,j1)   = VC2AB(a,i,b1,j1,k21) 
                  etemp              = VCHACT2AB(a,i,b1,j1)*taibj(a,i,b1,j1) 
                  etemp             *= -1.0  
                  t1(k21,k21)        = etemp 
                  Lorth(k21,k21) += t1(k21,k21)  
               endif 
            ENDDO k21 
      ENDPARDO a, i, b1, j1  
#
      PARDO a, i, a1, i1  
        WHERE a <= a1 
        WHERE i <= i1 
            REQUEST VCHACT2AA(a,i,a1,i1) a 
            lfact = -0.5  
            if a < a1 
               lfact*= 2.0 
            endif 
            if i < i1 
               lfact*= 2.0 
            endif 
            DO k21 
               if k21 <= spdim 
                  REQUEST              VC2AA(a,i,a1,i1,k21) a 
                  taiai(a,i,a1,i1)   = VC2AA(a,i,a1,i1,k21) 
                  etemp              = VCHACT2AA(a,i,a1,i1)*taiai(a,i,a1,i1) 
                  etemp             *= lfact   
                  t1(k21,k21)        = etemp 
                  Lorth(k21,k21) += t1(k21,k21)  
               endif 
            ENDDO k21 
      ENDPARDO a, i, a1, i1  
#
      PARDO a, i 
            GET VCHACT1A(a,i)
            DO k21 
               if k21 <= spdim 
                  GET                  VC1A(a,i,k21)
                  tai(a,i)           = VC1A(a,i,k21) 
                  etemp              = VCHACT1A(a,i)*tai(a,i) 
                  etemp             *= -2.0 
                  t1(k21,k21)        = etemp 
                  Lorth(k21,k21) += t1(k21,k21)  
               endif 
            ENDDO k21 
      ENDPARDO a, i 
#
      execute server_barrier 
#
      DO k21 
      DO j21 
         if k21 == j21 
         PUT orth(k21,j21) += Lorth(k21,j21) 
         endif 
      ENDDO j21 
      ENDDO k21 
      execute sip_barrier 
      execute server_barrier 
#
      DO k21 
      DO j21 
         if k21 == j21 
         GET orth(k21,j21) 
         Lorth(k21,j21) = orth(k21,j21) 
         endif 
      ENDDO j21 
      ENDDO k21 
      execute sip_barrier 
      execute server_barrier 
#
      ENDPROC ORTCOEFS
#     ---------------- 
#
     PROC VECCONSTR_NEW
#    ------------------ 
#
     etemp1=0.0
     etemp2=0.0
     etemp3=0.0
     etemp4=0.0
     etemp5=0.0
#
     square=0.0
#
     sum1=0.0
     sum2=0.0
     sum3=0.0
     sum4=0.0
     sum5=0.0
     execute sip_barrier 
#
      PARDO a, i, a1, i1
            request            VCHACT2AA(a,i,a1,i1) i1
            taiai(a,i,a1,i1) = VCHACT2AA(a,i,a1,i1)
            DO k21 
               if k21 <= spdim 
                  request             VC2AA(a,i,a1,i1,k21) i1
                 #GET                 orth(k21,k21) 
                  t1aiai(a,i,a1,i1) = VC2AA(a,i,a1,i1,k21)
#
                  t1(k21,k21)       = Lorth(k21,k21) 
                  execute return_sval t1 fact 
                  t1aiai(a,i,a1,i1)*= fact  
                  taiai(a,i,a1,i1) += t1aiai(a,i,a1,i1)
#
               endif 
            ENDDO k21 
#
            etemp                       = taiai(a,i,a1,i1)*taiai(a,i,a1,i1)
            etemp                      *= 0.5
            sum3                       += etemp
#
            PREPARE VCACT2AA(a,i,a1,i1) = taiai(a,i,a1,i1)
      ENDPARDO a, i, a1, i1
#
      PARDO a, i, b1, j1
            request            VCHACT2AB(a,i,b1,j1) j1
            taibj(a,i,b1,j1) = VCHACT2AB(a,i,b1,j1)
            DO k21 
               if k21 <= spdim 
                  request             VC2AB(a,i,b1,j1,k21) j1
                 #GET         orth(k21,k21) 
                  t1aibj(a,i,b1,j1) = VC2AB(a,i,b1,j1,k21)
#
                  t1(k21,k21)       = Lorth(k21,k21) 
                  execute return_sval t1 fact 
                  t1aibj(a,i,b1,j1)*= fact  
                  taibj(a,i,b1,j1) += t1aibj(a,i,b1,j1)
#
               endif 
            ENDDO k21 
#
            etemp                       = taibj(a,i,b1,j1)*taibj(a,i,b1,j1)
            sum5                       += etemp
#
            PREPARE VCACT2AB(a,i,b1,j1) = taibj(a,i,b1,j1)
      ENDPARDO a, i, b1, j1
#
      PARDO a, i 
            GET        VCHACT1A(a,i) 
            tai(a,i) = VCHACT1A(a,i)
            DO k21 
               if k21 <= spdim 
                  GET         VC1A(a,i,k21) 
                 #GET         orth(k21,k21) 
                  t1ai(a,i) = VC1A(a,i,k21)
#
                  t1(k21,k21)       = Lorth(k21,k21) 
                  execute return_sval t1 fact 
                  t1ai(a,i)*= fact  
                  tai(a,i) += t1ai(a,i)
#
               endif 
            ENDDO k21 
#
            PUT VCACT1A(a,i) = tai(a,i)
#
            t2ai(a,i)        = tai(a,i)
            etemp            = tai(a,i)*t2ai(a,i)
            etemp           *= 2.0  
            sum1            += etemp
      ENDPARDO a, i 
#
      execute server_barrier
      deallocate Lorth(*,*) 
#
      collective etemp1+=sum1
      collective etemp2+=sum2
      collective etemp3+=sum3
      collective etemp4+=sum4
      collective etemp5+=sum5
#
      square+=etemp1
      square+=etemp2
      square+=etemp3
      square+=etemp4
      square+=etemp5
#
      execute server_barrier
#
     ENDPROC VECCONSTR_NEW
#    --------------------- 
#
     PROC REZYDUUM
#    ------------- 
#
#   ------copy vector to VCactual
#
##     call copy_toVCactual_2
#
#   ---------------normalize vector-----------     
##     call SQUAREVCACT
     call SQUAREVCACT_NEW
#
     exponent = 0.5 
     execute norm_fac square exponent
     residuum=exponent
     mult=square
#
     ENDPROC REZYDUUM
#
# ---------------------------------------------------------------------- 
#
     PROC ORTHOGON
#    ------------- 
#
        create orth 
        execute sip_barrier 
        call ORTCOEFS
        call VECCONSTR_NEW # ***VFL***  
#
        exponent = 0.5 
        execute norm_fac square exponent
        mult = square
#
        call SCALEVCACT_3
        execute sip_barrier 
        delete orth 
#
     ENDPROC ORTHOGON
#    ---------------- 
#
# ---------------------------------------------------------------------- 
#
     PROC CONVER
#    ----------- 
#
      create Faa
      create Fab
#
      execute sip_barrier
#
     PARDO a, a1, i, i1
           taiai(a,i,a1,i1)            = 0.0
           prepare VCONV2AA(a,i,a1,i1) = taiai(a,i,a1,i1)
     ENDPARDO a, a1, i, i1
#
     PARDO a, b, i, j
           taibj(a,i,b,j)            = 0.0 
           prepare VCONV2AB(a,i,b,j) = taibj(a,i,b,j)
     ENDPARDO a, b, i, j
#
     PARDO mu, nu, lambda, sigma 
#
           compute_integrals aoint(mu,nu,lambda,sigma) 
#
           DO a 
              Txxxp(mu,nu,lambda,a) = aoint(mu,nu,lambda,sigma)*ca(sigma,a) 
              DO a1 
                 if a == a1 
                    Txxpp(mu,nu,a1,a) = Txxxp(mu,nu,lambda,a)*ca(lambda,a1) 
                    PREPARE Vxxaa(mu,nu,a1,a) += Txxpp(mu,nu,a1,a) 
                 endif 
              ENDDO a1 
           ENDDO a 
#
           DO b 
              Txxxq(mu,nu,lambda,b) = aoint(mu,nu,lambda,sigma)*ca(sigma,b) 
              DO b1 
                 if b == b1 
                    Txxqq(mu,nu,b1,b) = Txxxq(mu,nu,lambda,b)*ca(lambda,b1) 
                    PREPARE Gxxbb(mu,nu,b1,b) += Txxqq(mu,nu,b1,b) 
                 endif 
              ENDDO b1 
           ENDDO b 
#
     ENDPARDO mu, nu, lambda, sigma 
#
     PARDO mu, nu, lambda, sigma 
#
           compute_integrals            aoint(mu,sigma,lambda,nu) 
           txxxx(mu,nu,lambda,sigma)  = aoint(mu,sigma,lambda,nu) 
           txxxx(mu,nu,lambda,sigma) *= -1.0  
#
           DO a 
              Txxxp(mu,nu,lambda,a) = txxxx(mu,nu,lambda,sigma)*ca(sigma,a) 
              DO a1 
                 if a == a1 
                    Txxpp(mu,nu,a1,a) = Txxxp(mu,nu,lambda,a)*ca(lambda,a1) 
                    PREPARE Vxxaa(mu,nu,a1,a) += Txxpp(mu,nu,a1,a) 
                 endif 
              ENDDO a1 
           ENDDO a 
#
     ENDPARDO mu, nu, lambda, sigma 
#
     execute server_barrier
#
     PARDO mu, nu, a, a1 
           WHERE a == a1 
           REQUEST Vxxaa(mu,nu,a1,a) a            
              DO a2 
                 Txppp(mu,a2,a1,a) = Vxxaa(mu,nu,a1,a)*ca(nu,a2) 
                 DO a3 
                    if a2 == a3 
                       Tpppp(a3,a2,a1,a) = Txppp(mu,a2,a1,a)*ca(mu,a3) 
                       PREPARE Vaaaa(a3,a2,a1,a) += Tpppp(a3,a2,a1,a) 
                    endif 
                 ENDDO a3 
              ENDDO a2 
     ENDPARDO mu, nu, a, a1 
#
     PARDO mu, nu, b, b1 
           WHERE b == b1 
           REQUEST Gxxbb(mu,nu,b1,b) b            
              DO a2 
                 Txpqq(mu,a2,b1,b) = Gxxbb(mu,nu,b1,b)*ca(nu,a2) 
                 DO a3 
                    if a2 == a3 
                       Tppqq(a3,a2,b1,b) = Txpqq(mu,a2,b1,b)*ca(mu,a3) 
                       PREPARE Vaabb(a3,a2,b1,b) += Tppqq(a3,a2,b1,b) 
                    endif 
                 ENDDO a3 
              ENDDO a2 
     ENDPARDO mu, nu, b, b1 
#
     execute server_barrier
#
# -----prepare f_aa diagonal = Sdaa
#
     PARDO a, a1, a2, a3   
        WHERE a  == a1 
        WHERE a2 == a3 
#
           REQUEST              Vaaaa(a,a1,a2,a3) a
           Tpppp(a,a1,a2,a3)  = Vaaaa(a,a1,a2,a3)
           execute return_diagonal4 Tpppp
           taa(a3,a1)         = 1.0
           t1aa(a,a2)         = Tpppp(a,a1,a2,a3)*taa(a3,a1)
#
           PUT Faa(a,a2)     += t1aa(a,a2)
#
     ENDPARDO a, a1, a2, a3  
#
     PARDO a, a1, b2, b3   
        WHERE a  == a1 
        WHERE b2 == b3 
#
           REQUEST              Vaabb(a,a1,b2,b3) a
           Tppqq(a,a1,b2,b3)  = Vaabb(a,a1,b2,b3)
           execute return_diagonal4 Tppqq
           tba(b3,a1)         = 1.0
           tab(a,b2)          = Tppqq(a,a1,b2,b3)*tba(b3,a1)
#
           PUT Fab(a,b2)     += tab(a,b2)
#
     ENDPARDO a, a1, b2, b3  
#
     PARDO a, a1
      WHERE a==a1 
#
           taa(a,a1)      = LHBAR_aa(a,a1)
           execute return_diagonal4 taa 
           put DDaa(a,a1) = taa(a,a1)
#
     ENDPARDO a, a1
#
# -----prepare f_ii diagonal = Sdii
#
     PARDO i, i1
      WHERE i==i1 
#
           tii(i1,i)      = LHBAR_ii(i1,i)
           execute return_diagonal4 tii 
           put DDii(i1,i) = tii(i1,i)
#
     ENDPARDO i, i1
#
# -----prepare f_jj diagonal = DDjj
#
     PARDO j, j1
      WHERE j==j1 
#
        tjj(j1,j)      = LHBAR_ii(j1,j)
        execute return_diagonal4 tjj 
        put DDjj(j1,j) = tjj(j1,j)
#
     ENDPARDO j, j1
#
     execute sip_barrier
#
# -----prepare Hbar_aiai diagonal
#
     PARDO a, i
#
        tai(a,i)=0.0
#
        do a1
        do i1
#
           REQUEST            HBAR_AJIB_aaaa(i1,a1,a,i) i
           Taaii(a,a1,i,i1) = HBAR_AJIB_aaaa(i1,a1,a,i)
           execute return_diagonal4 Taaii
           tia(i1,a1)       = 1.0
           t1ai(a,i)        = Taaii(a,a1,i,i1)*tia(i1,a1)
           tai(a,i)        += t1ai(a,i)
#
        enddo i1
        enddo a1
#
        PUT VCONV1A(a,i) = tai(a,i)
#
     ENDPARDO a, i
#
# -----prepare Hbar_bjbj diagonal
#
     execute sip_barrier
     execute server_barrier
#
     PARDO a, a1, i, i1
#
           get                            VCONV1A(a,i1)
           get                            VCONV1A(a1,i)
           tia(i1,a)                    = 1.0
           t1ia(i,a1)                   = 1.0
           tai(a,i1)                    = VCONV1A(a,i1)
           t2ai(a1,i)                   = VCONV1A(a1,i)
           t1aiai(a,i,a1,i1)            = tai(a,i1)^t1ia(i,a1)
           t2aiai(a,i,a1,i1)            = t2ai(a1,i)^tia(i1,a)
#
           prepare VCONV2AA(a,i,a1,i1) += t1aiai(a,i,a1,i1)
           prepare VCONV2AA(a,i,a1,i1) += t2aiai(a,i,a1,i1)
#
     ENDPARDO a, a1, i, i1
#
     execute sip_barrier
     execute server_barrier
#
# -------------------------------------------------------------------------------------
# Start of correction ??? 
# -------------------------------------------------------------------------------------
#
# -----prepare Hbar_aiai diagonal
#
     PARDO a, i
#
           tai(a,i)=0.0
#
           do a1
           do i1
#
              REQUEST            HBAR_AJIB_aaaa(i1,a1,a,i) i
              Taaii(a,a1,i,i1) = HBAR_AJIB_aaaa(i1,a1,a,i)
              execute return_diagonal4 Taaii
              tia(i1,a1)       = 1.0
              t1ai(a,i)        = Taaii(a,a1,i,i1)*tia(i1,a1)
              tai(a,i)        += t1ai(a,i)
#
           enddo i1
           enddo a1
#
           PUT VCONV1A(a,i) = tai(a,i)
#
     ENDPARDO a, i
#
# -----prepare Hbar_bjbj diagonal
#
     execute sip_barrier
     execute server_barrier
#
# ---------compute T(a,i)=F(a,a)-f(i,i)-v(a,i,a,i)
#
     PARDO a, i
#
           tai(a,i)=0.0
#
           do a1
#
              get         DDaa(a,a1)
              tia(i,a1) = 1.0
              taa(a1,a) = DDaa(a,a1)
#
              t2ai(a,i) = tia(i,a1)*taa(a1,a)
              tai(a,i) += t2ai(a,i)
#
           enddo a1
#
           do i1
#
              get          DDii(i1,i)
              t2ia(i1,a) = 1.0
              tii(i,i1)  = DDii(i1,i)
#
              t2ai(a,i)  = tii(i,i1)*t2ia(i1,a)
              t2ai(a,i) *= -1.0
              tai(a,i)  += t2ai(a,i)
#
           enddo i1
#
           PUT VCONV1A(a,i) += tai(a,i)
#
     ENDPARDO a, i
#
# ---------compute T(b,j)=F(b,b)-f(j,j)
#
     execute sip_barrier
     execute server_barrier
#
     PARDO a, a1, i, i1
#
           get                 VCONV1A(a,i)
           get                 VCONV1A(a1,i1)
           tia(i,a)          = 1.0
           t1ia(i1,a1)       = 1.0
           tai(a,i)          = VCONV1A(a,i)
           t2ai(a1,i1)       = VCONV1A(a1,i1)
           t1aiai(a,i,a1,i1) = tai(a,i)^t1ia(i1,a1)
           t2aiai(a,i,a1,i1) = t2ai(a1,i1)^tia(i,a)
#
           taiai(a,i,a1,i1)  = t1aiai(a,i,a1,i1)
           taiai(a,i,a1,i1) += t2aiai(a,i,a1,i1)
#
           do i2
           do i3
#
              request             HBAR_iiii(i,i2,i1,i3) i
              tiiii(i,i2,i1,i3) = HBAR_iiii(i,i2,i1,i3)
              execute return_diagonal4 Tiiii
              t1aiai(a,i2,a1,i3)=1.0
              t2aiai(a,i,a1,i1) = Tiiii(i,i2,i1,i3)*t1aiai(a,i2,a1,i3)
              taiai(a,i,a1,i1) += t2aiai(a,i,a1,i1)
#
           enddo i3
           enddo i2
#
           get                 Faa(a,a1)
           tii(i,i1)         = 1.0
           t1aiai(a,i,a1,i1) = Faa(a,a1)^tii(i,i1)
           taiai(a,i,a1,i1) += t1aiai(a,i,a1,i1)
#
           prepare VCONV2AA(a,i,a1,i1) += taiai(a,i,a1,i1)
#
     ENDPARDO a, a1, i, i1
#
# alpha/beta contribution 
# ----------------------- 
#
     PARDO a, i, b, j
#
           get               VCONV1A(b,j)
           get               VCONV1A(a,i)
           t1ai(a,i)       = 1.0
           t1bj(b,j)       = 1.0
#
           tbj(b,j)        = VCONV1A(b,j)
           tai(a,i)        = VCONV1A(a,i)
           t1aibj(a,i,b,j) = t1ai(a,i)^tbj(b,j)
           t2aibj(a,i,b,j) = tai(a,i)^t1bj(b,j)
#
           taibj(a,i,b,j)  = 0.0  
           taibj(a,i,b,j)  = t1aibj(a,i,b,j)
           taibj(a,i,b,j) += t2aibj(a,i,b,j)
#
           do i1
           do j1
#
              request                   HBAR_iijj(i,i1,j,j1) j1
              Tiijj(i,i1,j,j1)        = HBAR_iijj(i,i1,j,j1)
              execute return_diagonal4  Tiijj
              t2aibj(a,i1,b,j1)       = 1.0
              t1aibj(a,i,b,j)         = Tiijj(i,i1,j,j1)*t2aibj(a,i1,b,j1)
              taibj(a,i,b,j)         += t1aibj(a,i,b,j)
#
           enddo j1
           enddo i1
#
           get Fab(a,b)
           tij(i,j)=1.0
           t1aibj(a,i,b,j)=Fab(a,b)^tij(i,j)
           taibj(a,i,b,j)+=t1aibj(a,i,b,j)
#
           do i1
           do b1
#
              request HBAR_AJIB_iibb(i1,i,b,b1) b1
              Tiibb(i1,i,b,b1)=HBAR_AJIB_iibb(i1,i,b,b1)
              execute return_diagonal4 Tiibb
              t2aibj(a,i1,b1,j)=1.0
              t1aibj(a,i,b,j)=Tiibb(i1,i,b,b1)*t2aibj(a,i1,b1,j)
              taibj(a,i,b,j)+=t1aibj(a,i,b,j)
#
           enddo b1
           enddo i1
#
           do j1
           do a1
#
              request HBAR_AJIB_iibb(j1,j,a,a1) a1
              Tjjaa(j1,j,a,a1)=HBAR_AJIB_iibb(j1,j,a,a1)
              execute return_diagonal4 Tjjaa
              t2aibj(a1,i,b,j1)=1.0
              t1aibj(a,i,b,j)=Tjjaa(j1,j,a,a1)*t2aibj(a1,i,b,j1)
              taibj(a,i,b,j)+=t1aibj(a,i,b,j)
#
           enddo a1
           enddo j1
#
           PREPARE VCONV2AB(a,i,b,j) = taibj(a,i,b,j)
#
     ENDPARDO a, i, b, j
#
     execute server_barrier

      delete Faa
      delete Fab
#
     ENDPROC CONVER
#    -------------- 
#
#======================================================
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#--start of script generated part of the code
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#======================================================
#
       PROC AEIGCANC
#
#
        if spdim20 == 1
        Aeig1 = 1000000.0
        endif
        if spdim20 == 2
        Aeig2 = 1000000.0
        endif
        if spdim20 == 3
        Aeig3 = 1000000.0
        endif
        if spdim20 == 4
        Aeig4 = 1000000.0
        endif
        if spdim20 == 5
        Aeig5 = 1000000.0
        endif
        if spdim20 == 6
        Aeig6 = 1000000.0
        endif
        if spdim20 == 7
        Aeig7 = 1000000.0
        endif
        if spdim20 == 8
        Aeig8 = 1000000.0
        endif
        if spdim20 == 9
        Aeig9 = 1000000.0
        endif
        if spdim20 == 10
        Aeig10 = 1000000.0
        endif
        if spdim20 == 11
        Aeig11 = 1000000.0
        endif
        if spdim20 == 12
        Aeig12 = 1000000.0
        endif
        if spdim20 == 13
        Aeig13 = 1000000.0
        endif
        if spdim20 == 14
        Aeig14 = 1000000.0
        endif
        if spdim20 == 15
        Aeig15 = 1000000.0
        endif
        if spdim20 == 16
        Aeig16 = 1000000.0
        endif
        if spdim20 == 17
        Aeig17 = 1000000.0
        endif
        if spdim20 == 18
        Aeig18 = 1000000.0
        endif
        if spdim20 == 19
        Aeig19 = 1000000.0
        endif
        if spdim20 == 20
        Aeig20 = 1000000.0
        endif
#
#
       ENDPROC AEIGCANC
#
#
       PROC AEIGCANCX
#
#
        if egvmax == 1.0
        Aeig1 = 1000000.0
        endif
        if egvmax == 2.0
        Aeig2 = 1000000.0
        endif
        if egvmax == 3.0
        Aeig3 = 1000000.0
        endif
        if egvmax == 4.0
        Aeig4 = 1000000.0
        endif
        if egvmax == 5.0
        Aeig5 = 1000000.0
        endif
        if egvmax == 6.0
        Aeig6 = 1000000.0
        endif
        if egvmax == 7.0
        Aeig7 = 1000000.0
        endif
        if egvmax == 8.0
        Aeig8 = 1000000.0
        endif
        if egvmax == 9.0
        Aeig9 = 1000000.0
        endif
        if egvmax == 10.0
        Aeig10 = 1000000.0
        endif
        if egvmax == 11.0
        Aeig11 = 1000000.0
        endif
        if egvmax == 12.0
        Aeig12 = 1000000.0
        endif
        if egvmax == 13.0
        Aeig13 = 1000000.0
        endif
        if egvmax == 14.0
        Aeig14 = 1000000.0
        endif
        if egvmax == 15.0
        Aeig15 = 1000000.0
        endif
        if egvmax == 16.0
        Aeig16 = 1000000.0
        endif
        if egvmax == 17.0
        Aeig17 = 1000000.0
        endif
        if egvmax == 18.0
        Aeig18 = 1000000.0
        endif
        if egvmax == 19.0
        Aeig19 = 1000000.0
        endif
        if egvmax == 20.0
        Aeig20 = 1000000.0
        endif
#
#
       ENDPROC AEIGCANCX
#
#
       PROC DRAWVEC1
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     do jindex20
     do kindex20
#
        if jindex20 == spdim20
#
        if kindex20 == 1
        execute return_sval Lvev20  V1_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V1_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V1_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V1_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V1_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V1_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V1_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V1_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V1_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V1_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V1_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V1_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V1_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V1_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V1_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V1_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V1_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V1_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V1_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V1_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
#
       ENDPROC DRAWVEC1
#
#
       PROC DRAWVEC2
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     do jindex20
     do kindex20
#
        if jindex20 == spdim20
#
        if kindex20 == 1
        execute return_sval Lvev20  V2_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V2_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V2_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V2_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V2_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V2_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V2_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V2_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V2_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V2_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V2_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V2_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V2_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V2_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V2_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V2_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V2_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V2_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V2_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V2_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
#
       ENDPROC DRAWVEC2
#
#
       PROC DRAWVEC3
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     do jindex20
     do kindex20
#
        if jindex20 == spdim20
#
        if kindex20 == 1
        execute return_sval Lvev20  V3_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V3_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V3_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V3_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V3_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V3_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V3_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V3_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V3_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V3_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V3_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V3_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V3_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V3_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V3_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V3_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V3_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V3_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V3_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V3_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
#
       ENDPROC DRAWVEC3
#
#
       PROC DRAWVEC4
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     do jindex20
     do kindex20
#
        if jindex20 == spdim20
#
        if kindex20 == 1
        execute return_sval Lvev20  V4_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V4_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V4_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V4_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V4_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V4_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V4_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V4_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V4_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V4_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V4_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V4_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V4_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V4_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V4_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V4_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V4_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V4_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V4_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V4_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
#
       ENDPROC DRAWVEC4
#
#
       PROC DRAWVEC5
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     do jindex20
     do kindex20
#
        if jindex20 == spdim20
#
        if kindex20 == 1
        execute return_sval Lvev20  V5_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V5_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V5_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V5_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V5_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V5_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V5_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V5_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V5_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V5_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V5_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V5_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V5_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V5_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V5_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V5_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V5_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V5_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V5_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V5_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
#
       ENDPROC DRAWVEC5
#
#
       PROC DRAWVEC6
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     do jindex20
     do kindex20
#
        if jindex20 == spdim20
#
        if kindex20 == 1
        execute return_sval Lvev20  V6_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V6_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V6_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V6_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V6_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V6_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V6_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V6_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V6_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V6_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V6_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V6_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V6_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V6_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V6_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V6_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V6_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V6_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V6_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V6_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
#
       ENDPROC DRAWVEC6
#
#
       PROC DRAWVEC7
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     do jindex20
     do kindex20
#
        if jindex20 == spdim20
#
        if kindex20 == 1
        execute return_sval Lvev20  V7_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V7_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V7_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V7_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V7_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V7_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V7_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V7_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V7_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V7_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V7_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V7_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V7_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V7_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V7_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V7_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V7_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V7_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V7_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V7_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
#
       ENDPROC DRAWVEC7
#
#
       PROC DRAWVEC8
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     do jindex20
     do kindex20
#
        if jindex20 == spdim20
#
        if kindex20 == 1
        execute return_sval Lvev20  V8_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V8_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V8_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V8_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V8_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V8_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V8_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V8_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V8_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V8_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V8_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V8_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V8_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V8_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V8_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V8_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V8_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V8_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V8_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V8_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
#
       ENDPROC DRAWVEC8
#
#
       PROC DRAWVEC9
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     do jindex20
     do kindex20
#
        if jindex20 == spdim20
#
        if kindex20 == 1
        execute return_sval Lvev20  V9_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V9_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V9_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V9_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V9_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V9_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V9_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V9_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V9_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V9_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V9_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V9_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V9_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V9_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V9_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V9_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V9_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V9_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V9_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V9_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
#
       ENDPROC DRAWVEC9
#
#
       PROC DRAWVEC10
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     do jindex20
     do kindex20
#
        if jindex20 == spdim20
#
        if kindex20 == 1
        execute return_sval Lvev20  V10_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V10_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V10_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V10_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V10_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V10_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V10_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V10_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V10_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V10_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V10_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V10_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V10_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V10_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V10_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V10_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V10_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V10_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V10_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V10_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
#
       ENDPROC DRAWVEC10
#
#
       PROC DRAWVEC11
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     do jindex20
     do kindex20
#
        if jindex20 == spdim20
#
        if kindex20 == 1
        execute return_sval Lvev20  V11_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V11_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V11_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V11_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V11_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V11_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V11_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V11_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V11_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V11_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V11_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V11_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V11_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V11_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V11_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V11_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V11_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V11_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V11_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V11_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
#
       ENDPROC DRAWVEC11
#
#
       PROC DRAWVEC12
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     do jindex20
     do kindex20
#
        if jindex20 == spdim20
#
        if kindex20 == 1
        execute return_sval Lvev20  V12_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V12_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V12_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V12_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V12_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V12_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V12_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V12_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V12_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V12_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V12_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V12_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V12_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V12_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V12_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V12_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V12_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V12_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V12_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V12_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
#
       ENDPROC DRAWVEC12
#
#
#
       PROC DRAWVECX1
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     xcount=0.0
     do jindex20
#
     xcount+=1.0
#
     do kindex20
#
        if xcount == egvmax
#
        if kindex20 == 1
        execute return_sval Lvev20  V1_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V1_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V1_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V1_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V1_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V1_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V1_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V1_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V1_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V1_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V1_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V1_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V1_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V1_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V1_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V1_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V1_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V1_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V1_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V1_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
#
       ENDPROC DRAWVECX1
#
#
       PROC DRAWVECX2
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     xcount=0.0
     do jindex20
#
     xcount+=1.0
#
     do kindex20
#
        if xcount == egvmax
#
        if kindex20 == 1
        execute return_sval Lvev20  V2_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V2_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V2_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V2_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V2_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V2_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V2_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V2_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V2_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V2_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V2_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V2_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V2_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V2_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V2_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V2_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V2_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V2_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V2_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V2_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
#
       ENDPROC DRAWVECX2
#
#
       PROC DRAWVECX3
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     xcount=0.0
     do jindex20
#
     xcount+=1.0
#
     do kindex20
#
        if xcount == egvmax
#
        if kindex20 == 1
        execute return_sval Lvev20  V3_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V3_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V3_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V3_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V3_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V3_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V3_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V3_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V3_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V3_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V3_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V3_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V3_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V3_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V3_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V3_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V3_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V3_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V3_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V3_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
#
       ENDPROC DRAWVECX3
#
#
       PROC DRAWVECX4
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     xcount=0.0
     do jindex20
#
     xcount+=1.0
#
     do kindex20
#
        if xcount == egvmax
#
        if kindex20 == 1
        execute return_sval Lvev20  V4_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V4_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V4_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V4_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V4_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V4_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V4_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V4_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V4_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V4_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V4_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V4_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V4_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V4_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V4_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V4_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V4_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V4_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V4_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V4_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
#
       ENDPROC DRAWVECX4
#
#
       PROC DRAWVECX5
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     xcount=0.0
     do jindex20
#
     xcount+=1.0
#
     do kindex20
#
        if xcount == egvmax
#
        if kindex20 == 1
        execute return_sval Lvev20  V5_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V5_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V5_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V5_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V5_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V5_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V5_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V5_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V5_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V5_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V5_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V5_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V5_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V5_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V5_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V5_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V5_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V5_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V5_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V5_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
#
       ENDPROC DRAWVECX5
#
#
       PROC DRAWVECX6
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     xcount=0.0
     do jindex20
#
     xcount+=1.0
#
     do kindex20
#
        if xcount == egvmax
#
        if kindex20 == 1
        execute return_sval Lvev20  V6_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V6_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V6_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V6_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V6_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V6_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V6_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V6_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V6_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V6_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V6_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V6_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V6_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V6_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V6_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V6_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V6_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V6_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V6_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V6_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
#
       ENDPROC DRAWVECX6
#
#
       PROC DRAWVECX7
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     xcount=0.0
     do jindex20
#
     xcount+=1.0
#
     do kindex20
#
        if xcount == egvmax
#
        if kindex20 == 1
        execute return_sval Lvev20  V7_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V7_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V7_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V7_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V7_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V7_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V7_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V7_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V7_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V7_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V7_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V7_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V7_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V7_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V7_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V7_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V7_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V7_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V7_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V7_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
#
       ENDPROC DRAWVECX7
#
#
       PROC DRAWVECX8
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     xcount=0.0
     do jindex20
#
     xcount+=1.0
#
     do kindex20
#
        if xcount == egvmax
#
        if kindex20 == 1
        execute return_sval Lvev20  V8_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V8_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V8_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V8_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V8_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V8_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V8_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V8_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V8_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V8_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V8_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V8_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V8_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V8_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V8_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V8_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V8_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V8_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V8_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V8_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
#
       ENDPROC DRAWVECX8
#
#
       PROC DRAWVECX9
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     xcount=0.0
     do jindex20
#
     xcount+=1.0
#
     do kindex20
#
        if xcount == egvmax
#
        if kindex20 == 1
        execute return_sval Lvev20  V9_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V9_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V9_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V9_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V9_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V9_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V9_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V9_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V9_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V9_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V9_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V9_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V9_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V9_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V9_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V9_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V9_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V9_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V9_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V9_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
#
       ENDPROC DRAWVECX9
#
#
       PROC DRAWVECX10
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     xcount=0.0
     do jindex20
#
     xcount+=1.0
#
     do kindex20
#
        if xcount == egvmax
#
        if kindex20 == 1
        execute return_sval Lvev20  V10_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V10_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V10_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V10_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V10_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V10_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V10_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V10_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V10_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V10_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V10_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V10_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V10_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V10_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V10_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V10_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V10_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V10_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V10_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V10_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
#
       ENDPROC DRAWVECX10
#
#
       PROC DRAWVECX11
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     xcount=0.0
     do jindex20
#
     xcount+=1.0
#
     do kindex20
#
        if xcount == egvmax
#
        if kindex20 == 1
        execute return_sval Lvev20  V11_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V11_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V11_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V11_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V11_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V11_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V11_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V11_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V11_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V11_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V11_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V11_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V11_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V11_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V11_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V11_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V11_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V11_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V11_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V11_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
#
       ENDPROC DRAWVECX11
#
#
       PROC DRAWVECX12
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     xcount=0.0
     do jindex20
#
     xcount+=1.0
#
     do kindex20
#
        if xcount == egvmax
#
        if kindex20 == 1
        execute return_sval Lvev20  V12_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V12_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V12_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V12_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V12_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V12_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V12_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V12_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V12_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V12_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V12_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V12_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V12_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V12_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V12_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V12_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V12_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V12_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V12_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V12_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
#
       ENDPROC DRAWVECX12
#
#
#
       PROC FNDVECS
#
     lcount=0.0
     icount=1.0
#
#
# ----------------find current one -----------
#
     do spdim2
#
     if icount == imax
#
     lcount+=1.0
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     MYvev(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     do jindex20
     do kindex20
#
        if jindex20 == spdim2
#
        if kindex20 == 1
        execute return_sval Lvev20  V1_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V1_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V1_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V1_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V1_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V1_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V1_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V1_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V1_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V1_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V1_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V1_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V1_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V1_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V1_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V1_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V1_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V1_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V1_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V1_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
        if spdim2 == 1
        Aeig1 = 1000000.0
        endif
        if spdim2 == 2
        Aeig2 = 1000000.0
        endif
        if spdim2 == 3
        Aeig3 = 1000000.0
        endif
        if spdim2 == 4
        Aeig4 = 1000000.0
        endif
        if spdim2 == 5
        Aeig5 = 1000000.0
        endif
        if spdim2 == 6
        Aeig6 = 1000000.0
        endif
        if spdim2 == 7
        Aeig7 = 1000000.0
        endif
        if spdim2 == 8
        Aeig8 = 1000000.0
        endif
        if spdim2 == 9
        Aeig9 = 1000000.0
        endif
        if spdim2 == 10
        Aeig10 = 1000000.0
        endif
        if spdim2 == 11
        Aeig11 = 1000000.0
        endif
        if spdim2 == 12
        Aeig12 = 1000000.0
        endif
        if spdim2 == 13
        Aeig13 = 1000000.0
        endif
        if spdim2 == 14
        Aeig14 = 1000000.0
        endif
        if spdim2 == 15
        Aeig15 = 1000000.0
        endif
        if spdim2 == 16
        Aeig16 = 1000000.0
        endif
        if spdim2 == 17
        Aeig17 = 1000000.0
        endif
        if spdim2 == 18
        Aeig18 = 1000000.0
        endif
        if spdim2 == 19
        Aeig19 = 1000000.0
        endif
        if spdim2 == 20
        Aeig20 = 1000000.0
        endif
#
     exit
#
     endif
#
     icount+=1.0
#
     enddo spdim2
#
#
#
# ----------cancel eigenvalues below threshold---
#
        do spdim20
#
      if spdim20 == 1
#
      aeigtemp=Aeig1
#
      if aeigtemp < 0.0
      aeigtemp*=-1.0
      endif
#
      if aeigtemp < eomthresh
      Aeig1 = 12345.6
      endif
#
      endif
#
      if spdim20 == 2
#
      aeigtemp=Aeig2
#
      if aeigtemp < 0.0
      aeigtemp*=-1.0
      endif
#
      if aeigtemp < eomthresh
      Aeig2 = 12345.6
      endif
#
      endif
#
      if spdim20 == 3
#
      aeigtemp=Aeig3
#
      if aeigtemp < 0.0
      aeigtemp*=-1.0
      endif
#
      if aeigtemp < eomthresh
      Aeig3 = 12345.6
      endif
#
      endif
#
      if spdim20 == 4
#
      aeigtemp=Aeig4
#
      if aeigtemp < 0.0
      aeigtemp*=-1.0
      endif
#
      if aeigtemp < eomthresh
      Aeig4 = 12345.6
      endif
#
      endif
#
      if spdim20 == 5
#
      aeigtemp=Aeig5
#
      if aeigtemp < 0.0
      aeigtemp*=-1.0
      endif
#
      if aeigtemp < eomthresh
      Aeig5 = 12345.6
      endif
#
      endif
#
      if spdim20 == 6
#
      aeigtemp=Aeig6
#
      if aeigtemp < 0.0
      aeigtemp*=-1.0
      endif
#
      if aeigtemp < eomthresh
      Aeig6 = 12345.6
      endif
#
      endif
#
      if spdim20 == 7
#
      aeigtemp=Aeig7
#
      if aeigtemp < 0.0
      aeigtemp*=-1.0
      endif
#
      if aeigtemp < eomthresh
      Aeig7 = 12345.6
      endif
#
      endif
#
      if spdim20 == 8
#
      aeigtemp=Aeig8
#
      if aeigtemp < 0.0
      aeigtemp*=-1.0
      endif
#
      if aeigtemp < eomthresh
      Aeig8 = 12345.6
      endif
#
      endif
#
      if spdim20 == 9
#
      aeigtemp=Aeig9
#
      if aeigtemp < 0.0
      aeigtemp*=-1.0
      endif
#
      if aeigtemp < eomthresh
      Aeig9 = 12345.6
      endif
#
      endif
#
      if spdim20 == 10
#
      aeigtemp=Aeig10
#
      if aeigtemp < 0.0
      aeigtemp*=-1.0
      endif
#
      if aeigtemp < eomthresh
      Aeig10 = 12345.6
      endif
#
      endif
#
      if spdim20 == 11
#
      aeigtemp=Aeig11
#
      if aeigtemp < 0.0
      aeigtemp*=-1.0
      endif
#
      if aeigtemp < eomthresh
      Aeig11 = 12345.6
      endif
#
      endif
#
      if spdim20 == 12
#
      aeigtemp=Aeig12
#
      if aeigtemp < 0.0
      aeigtemp*=-1.0
      endif
#
      if aeigtemp < eomthresh
      Aeig12 = 12345.6
      endif
#
      endif
#
      if spdim20 == 13
#
      aeigtemp=Aeig13
#
      if aeigtemp < 0.0
      aeigtemp*=-1.0
      endif
#
      if aeigtemp < eomthresh
      Aeig13 = 12345.6
      endif
#
      endif
#
      if spdim20 == 14
#
      aeigtemp=Aeig14
#
      if aeigtemp < 0.0
      aeigtemp*=-1.0
      endif
#
      if aeigtemp < eomthresh
      Aeig14 = 12345.6
      endif
#
      endif
#
      if spdim20 == 15
#
      aeigtemp=Aeig15
#
      if aeigtemp < 0.0
      aeigtemp*=-1.0
      endif
#
      if aeigtemp < eomthresh
      Aeig15 = 12345.6
      endif
#
      endif
#
      if spdim20 == 16
#
      aeigtemp=Aeig16
#
      if aeigtemp < 0.0
      aeigtemp*=-1.0
      endif
#
      if aeigtemp < eomthresh
      Aeig16 = 12345.6
      endif
#
      endif
#
      if spdim20 == 17
#
      aeigtemp=Aeig17
#
      if aeigtemp < 0.0
      aeigtemp*=-1.0
      endif
#
      if aeigtemp < eomthresh
      Aeig17 = 12345.6
      endif
#
      endif
#
      if spdim20 == 18
#
      aeigtemp=Aeig18
#
      if aeigtemp < 0.0
      aeigtemp*=-1.0
      endif
#
      if aeigtemp < eomthresh
      Aeig18 = 12345.6
      endif
#
      endif
#
      if spdim20 == 19
#
      aeigtemp=Aeig19
#
      if aeigtemp < 0.0
      aeigtemp*=-1.0
      endif
#
      if aeigtemp < eomthresh
      Aeig19 = 12345.6
      endif
#
      endif
#
      if spdim20 == 20
#
      aeigtemp=Aeig20
#
      if aeigtemp < 0.0
      aeigtemp*=-1.0
      endif
#
      if aeigtemp < eomthresh
      Aeig20 = 12345.6
      endif
#
      endif
#
        enddo spdim20
#
# ----------------find previous roots -----------
#
#
        if root1 < 1000.0
#
        lcount+=1.0
#
        do spdim20
#
      if spdim20 == 1
#
      ediff = root1 - Aeig1
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC2
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 2
#
      ediff = root1 - Aeig2
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC2
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 3
#
      ediff = root1 - Aeig3
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC2
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 4
#
      ediff = root1 - Aeig4
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC2
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 5
#
      ediff = root1 - Aeig5
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC2
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 6
#
      ediff = root1 - Aeig6
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC2
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 7
#
      ediff = root1 - Aeig7
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC2
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 8
#
      ediff = root1 - Aeig8
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC2
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 9
#
      ediff = root1 - Aeig9
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC2
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 10
#
      ediff = root1 - Aeig10
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC2
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 11
#
      ediff = root1 - Aeig11
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC2
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 12
#
      ediff = root1 - Aeig12
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC2
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 13
#
      ediff = root1 - Aeig13
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC2
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 14
#
      ediff = root1 - Aeig14
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC2
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 15
#
      ediff = root1 - Aeig15
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC2
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 16
#
      ediff = root1 - Aeig16
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC2
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 17
#
      ediff = root1 - Aeig17
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC2
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 18
#
      ediff = root1 - Aeig18
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC2
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 19
#
      ediff = root1 - Aeig19
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC2
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 20
#
      ediff = root1 - Aeig20
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC2
#
      call AEIGCANC
#
#
      endif
#
      endif
#
        enddo spdim20
#
      endif
#
#
        if root2 < 1000.0
#
        lcount+=1.0
#
        do spdim20
#
      if spdim20 == 1
#
      ediff = root2 - Aeig1
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC3
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 2
#
      ediff = root2 - Aeig2
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC3
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 3
#
      ediff = root2 - Aeig3
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC3
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 4
#
      ediff = root2 - Aeig4
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC3
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 5
#
      ediff = root2 - Aeig5
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC3
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 6
#
      ediff = root2 - Aeig6
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC3
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 7
#
      ediff = root2 - Aeig7
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC3
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 8
#
      ediff = root2 - Aeig8
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC3
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 9
#
      ediff = root2 - Aeig9
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC3
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 10
#
      ediff = root2 - Aeig10
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC3
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 11
#
      ediff = root2 - Aeig11
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC3
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 12
#
      ediff = root2 - Aeig12
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC3
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 13
#
      ediff = root2 - Aeig13
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC3
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 14
#
      ediff = root2 - Aeig14
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC3
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 15
#
      ediff = root2 - Aeig15
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC3
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 16
#
      ediff = root2 - Aeig16
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC3
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 17
#
      ediff = root2 - Aeig17
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC3
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 18
#
      ediff = root2 - Aeig18
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC3
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 19
#
      ediff = root2 - Aeig19
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC3
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 20
#
      ediff = root2 - Aeig20
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC3
#
      call AEIGCANC
#
#
      endif
#
      endif
#
        enddo spdim20
#
      endif
#
#
        if root3 < 1000.0
#
        lcount+=1.0
#
        do spdim20
#
      if spdim20 == 1
#
      ediff = root3 - Aeig1
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC4
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 2
#
      ediff = root3 - Aeig2
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC4
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 3
#
      ediff = root3 - Aeig3
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC4
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 4
#
      ediff = root3 - Aeig4
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC4
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 5
#
      ediff = root3 - Aeig5
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC4
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 6
#
      ediff = root3 - Aeig6
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC4
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 7
#
      ediff = root3 - Aeig7
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC4
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 8
#
      ediff = root3 - Aeig8
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC4
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 9
#
      ediff = root3 - Aeig9
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC4
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 10
#
      ediff = root3 - Aeig10
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC4
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 11
#
      ediff = root3 - Aeig11
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC4
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 12
#
      ediff = root3 - Aeig12
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC4
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 13
#
      ediff = root3 - Aeig13
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC4
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 14
#
      ediff = root3 - Aeig14
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC4
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 15
#
      ediff = root3 - Aeig15
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC4
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 16
#
      ediff = root3 - Aeig16
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC4
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 17
#
      ediff = root3 - Aeig17
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC4
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 18
#
      ediff = root3 - Aeig18
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC4
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 19
#
      ediff = root3 - Aeig19
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC4
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 20
#
      ediff = root3 - Aeig20
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC4
#
      call AEIGCANC
#
#
      endif
#
      endif
#
        enddo spdim20
#
      endif
#
#
        if root4 < 1000.0
#
        lcount+=1.0
#
        do spdim20
#
      if spdim20 == 1
#
      ediff = root4 - Aeig1
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC5
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 2
#
      ediff = root4 - Aeig2
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC5
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 3
#
      ediff = root4 - Aeig3
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC5
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 4
#
      ediff = root4 - Aeig4
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC5
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 5
#
      ediff = root4 - Aeig5
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC5
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 6
#
      ediff = root4 - Aeig6
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC5
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 7
#
      ediff = root4 - Aeig7
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC5
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 8
#
      ediff = root4 - Aeig8
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC5
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 9
#
      ediff = root4 - Aeig9
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC5
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 10
#
      ediff = root4 - Aeig10
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC5
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 11
#
      ediff = root4 - Aeig11
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC5
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 12
#
      ediff = root4 - Aeig12
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC5
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 13
#
      ediff = root4 - Aeig13
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC5
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 14
#
      ediff = root4 - Aeig14
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC5
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 15
#
      ediff = root4 - Aeig15
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC5
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 16
#
      ediff = root4 - Aeig16
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC5
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 17
#
      ediff = root4 - Aeig17
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC5
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 18
#
      ediff = root4 - Aeig18
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC5
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 19
#
      ediff = root4 - Aeig19
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC5
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 20
#
      ediff = root4 - Aeig20
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC5
#
      call AEIGCANC
#
#
      endif
#
      endif
#
        enddo spdim20
#
      endif
#
#
        if root5 < 1000.0
#
        lcount+=1.0
#
        do spdim20
#
      if spdim20 == 1
#
      ediff = root5 - Aeig1
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC6
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 2
#
      ediff = root5 - Aeig2
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC6
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 3
#
      ediff = root5 - Aeig3
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC6
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 4
#
      ediff = root5 - Aeig4
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC6
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 5
#
      ediff = root5 - Aeig5
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC6
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 6
#
      ediff = root5 - Aeig6
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC6
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 7
#
      ediff = root5 - Aeig7
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC6
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 8
#
      ediff = root5 - Aeig8
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC6
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 9
#
      ediff = root5 - Aeig9
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC6
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 10
#
      ediff = root5 - Aeig10
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC6
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 11
#
      ediff = root5 - Aeig11
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC6
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 12
#
      ediff = root5 - Aeig12
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC6
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 13
#
      ediff = root5 - Aeig13
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC6
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 14
#
      ediff = root5 - Aeig14
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC6
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 15
#
      ediff = root5 - Aeig15
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC6
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 16
#
      ediff = root5 - Aeig16
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC6
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 17
#
      ediff = root5 - Aeig17
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC6
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 18
#
      ediff = root5 - Aeig18
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC6
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 19
#
      ediff = root5 - Aeig19
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC6
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 20
#
      ediff = root5 - Aeig20
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC6
#
      call AEIGCANC
#
#
      endif
#
      endif
#
        enddo spdim20
#
      endif
#
#
        if root6 < 1000.0
#
        lcount+=1.0
#
        do spdim20
#
      if spdim20 == 1
#
      ediff = root6 - Aeig1
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC7
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 2
#
      ediff = root6 - Aeig2
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC7
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 3
#
      ediff = root6 - Aeig3
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC7
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 4
#
      ediff = root6 - Aeig4
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC7
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 5
#
      ediff = root6 - Aeig5
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC7
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 6
#
      ediff = root6 - Aeig6
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC7
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 7
#
      ediff = root6 - Aeig7
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC7
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 8
#
      ediff = root6 - Aeig8
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC7
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 9
#
      ediff = root6 - Aeig9
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC7
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 10
#
      ediff = root6 - Aeig10
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC7
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 11
#
      ediff = root6 - Aeig11
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC7
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 12
#
      ediff = root6 - Aeig12
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC7
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 13
#
      ediff = root6 - Aeig13
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC7
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 14
#
      ediff = root6 - Aeig14
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC7
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 15
#
      ediff = root6 - Aeig15
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC7
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 16
#
      ediff = root6 - Aeig16
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC7
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 17
#
      ediff = root6 - Aeig17
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC7
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 18
#
      ediff = root6 - Aeig18
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC7
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 19
#
      ediff = root6 - Aeig19
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC7
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 20
#
      ediff = root6 - Aeig20
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC7
#
      call AEIGCANC
#
#
      endif
#
      endif
#
        enddo spdim20
#
      endif
#
#
        if root7 < 1000.0
#
        lcount+=1.0
#
        do spdim20
#
      if spdim20 == 1
#
      ediff = root7 - Aeig1
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC8
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 2
#
      ediff = root7 - Aeig2
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC8
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 3
#
      ediff = root7 - Aeig3
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC8
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 4
#
      ediff = root7 - Aeig4
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC8
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 5
#
      ediff = root7 - Aeig5
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC8
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 6
#
      ediff = root7 - Aeig6
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC8
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 7
#
      ediff = root7 - Aeig7
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC8
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 8
#
      ediff = root7 - Aeig8
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC8
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 9
#
      ediff = root7 - Aeig9
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC8
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 10
#
      ediff = root7 - Aeig10
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC8
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 11
#
      ediff = root7 - Aeig11
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC8
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 12
#
      ediff = root7 - Aeig12
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC8
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 13
#
      ediff = root7 - Aeig13
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC8
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 14
#
      ediff = root7 - Aeig14
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC8
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 15
#
      ediff = root7 - Aeig15
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC8
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 16
#
      ediff = root7 - Aeig16
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC8
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 17
#
      ediff = root7 - Aeig17
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC8
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 18
#
      ediff = root7 - Aeig18
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC8
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 19
#
      ediff = root7 - Aeig19
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC8
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 20
#
      ediff = root7 - Aeig20
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC8
#
      call AEIGCANC
#
#
      endif
#
      endif
#
        enddo spdim20
#
      endif
#
#
        if root8 < 1000.0
#
        lcount+=1.0
#
        do spdim20
#
      if spdim20 == 1
#
      ediff = root8 - Aeig1
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC9
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 2
#
      ediff = root8 - Aeig2
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC9
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 3
#
      ediff = root8 - Aeig3
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC9
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 4
#
      ediff = root8 - Aeig4
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC9
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 5
#
      ediff = root8 - Aeig5
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC9
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 6
#
      ediff = root8 - Aeig6
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC9
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 7
#
      ediff = root8 - Aeig7
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC9
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 8
#
      ediff = root8 - Aeig8
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC9
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 9
#
      ediff = root8 - Aeig9
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC9
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 10
#
      ediff = root8 - Aeig10
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC9
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 11
#
      ediff = root8 - Aeig11
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC9
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 12
#
      ediff = root8 - Aeig12
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC9
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 13
#
      ediff = root8 - Aeig13
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC9
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 14
#
      ediff = root8 - Aeig14
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC9
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 15
#
      ediff = root8 - Aeig15
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC9
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 16
#
      ediff = root8 - Aeig16
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC9
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 17
#
      ediff = root8 - Aeig17
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC9
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 18
#
      ediff = root8 - Aeig18
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC9
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 19
#
      ediff = root8 - Aeig19
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC9
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 20
#
      ediff = root8 - Aeig20
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC9
#
      call AEIGCANC
#
#
      endif
#
      endif
#
        enddo spdim20
#
      endif
#
#
        if root9 < 1000.0
#
        lcount+=1.0
#
        do spdim20
#
      if spdim20 == 1
#
      ediff = root9 - Aeig1
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC10
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 2
#
      ediff = root9 - Aeig2
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC10
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 3
#
      ediff = root9 - Aeig3
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC10
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 4
#
      ediff = root9 - Aeig4
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC10
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 5
#
      ediff = root9 - Aeig5
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC10
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 6
#
      ediff = root9 - Aeig6
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC10
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 7
#
      ediff = root9 - Aeig7
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC10
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 8
#
      ediff = root9 - Aeig8
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC10
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 9
#
      ediff = root9 - Aeig9
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC10
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 10
#
      ediff = root9 - Aeig10
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC10
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 11
#
      ediff = root9 - Aeig11
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC10
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 12
#
      ediff = root9 - Aeig12
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC10
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 13
#
      ediff = root9 - Aeig13
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC10
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 14
#
      ediff = root9 - Aeig14
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC10
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 15
#
      ediff = root9 - Aeig15
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC10
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 16
#
      ediff = root9 - Aeig16
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC10
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 17
#
      ediff = root9 - Aeig17
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC10
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 18
#
      ediff = root9 - Aeig18
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC10
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 19
#
      ediff = root9 - Aeig19
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC10
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 20
#
      ediff = root9 - Aeig20
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC10
#
      call AEIGCANC
#
#
      endif
#
      endif
#
        enddo spdim20
#
      endif
#
#
        if root10 < 1000.0
#
        lcount+=1.0
#
        do spdim20
#
      if spdim20 == 1
#
      ediff = root10 - Aeig1
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC11
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 2
#
      ediff = root10 - Aeig2
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC11
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 3
#
      ediff = root10 - Aeig3
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC11
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 4
#
      ediff = root10 - Aeig4
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC11
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 5
#
      ediff = root10 - Aeig5
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC11
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 6
#
      ediff = root10 - Aeig6
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC11
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 7
#
      ediff = root10 - Aeig7
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC11
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 8
#
      ediff = root10 - Aeig8
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC11
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 9
#
      ediff = root10 - Aeig9
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC11
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 10
#
      ediff = root10 - Aeig10
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC11
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 11
#
      ediff = root10 - Aeig11
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC11
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 12
#
      ediff = root10 - Aeig12
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC11
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 13
#
      ediff = root10 - Aeig13
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC11
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 14
#
      ediff = root10 - Aeig14
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC11
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 15
#
      ediff = root10 - Aeig15
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC11
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 16
#
      ediff = root10 - Aeig16
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC11
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 17
#
      ediff = root10 - Aeig17
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC11
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 18
#
      ediff = root10 - Aeig18
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC11
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 19
#
      ediff = root10 - Aeig19
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC11
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 20
#
      ediff = root10 - Aeig20
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC11
#
      call AEIGCANC
#
#
      endif
#
      endif
#
        enddo spdim20
#
      endif
#
#
        if root11 < 1000.0
#
        lcount+=1.0
#
        do spdim20
#
      if spdim20 == 1
#
      ediff = root11 - Aeig1
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC12
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 2
#
      ediff = root11 - Aeig2
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC12
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 3
#
      ediff = root11 - Aeig3
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC12
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 4
#
      ediff = root11 - Aeig4
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC12
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 5
#
      ediff = root11 - Aeig5
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC12
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 6
#
      ediff = root11 - Aeig6
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC12
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 7
#
      ediff = root11 - Aeig7
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC12
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 8
#
      ediff = root11 - Aeig8
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC12
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 9
#
      ediff = root11 - Aeig9
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC12
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 10
#
      ediff = root11 - Aeig10
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC12
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 11
#
      ediff = root11 - Aeig11
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC12
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 12
#
      ediff = root11 - Aeig12
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC12
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 13
#
      ediff = root11 - Aeig13
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC12
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 14
#
      ediff = root11 - Aeig14
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC12
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 15
#
      ediff = root11 - Aeig15
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC12
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 16
#
      ediff = root11 - Aeig16
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC12
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 17
#
      ediff = root11 - Aeig17
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC12
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 18
#
      ediff = root11 - Aeig18
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC12
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 19
#
      ediff = root11 - Aeig19
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC12
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 20
#
      ediff = root11 - Aeig20
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC12
#
      call AEIGCANC
#
#
      endif
#
      endif
#
        enddo spdim20
#
      endif
#
#
# ----------------find close to current -----------
#
     do spdim2
#
     lcount+=1.0
#
     if lcount > 12.0
     exit
     endif
#
      emax=100000.0
#
      icount=0.0
#
      do spdim20
#
      icount+=1.0
#
      if spdim20 == 1
      ediff=omega-Aeig1
      endif
      if spdim20 == 2
      ediff=omega-Aeig2
      endif
      if spdim20 == 3
      ediff=omega-Aeig3
      endif
      if spdim20 == 4
      ediff=omega-Aeig4
      endif
      if spdim20 == 5
      ediff=omega-Aeig5
      endif
      if spdim20 == 6
      ediff=omega-Aeig6
      endif
      if spdim20 == 7
      ediff=omega-Aeig7
      endif
      if spdim20 == 8
      ediff=omega-Aeig8
      endif
      if spdim20 == 9
      ediff=omega-Aeig9
      endif
      if spdim20 == 10
      ediff=omega-Aeig10
      endif
      if spdim20 == 11
      ediff=omega-Aeig11
      endif
      if spdim20 == 12
      ediff=omega-Aeig12
      endif
      if spdim20 == 13
      ediff=omega-Aeig13
      endif
      if spdim20 == 14
      ediff=omega-Aeig14
      endif
      if spdim20 == 15
      ediff=omega-Aeig15
      endif
      if spdim20 == 16
      ediff=omega-Aeig16
      endif
      if spdim20 == 17
      ediff=omega-Aeig17
      endif
      if spdim20 == 18
      ediff=omega-Aeig18
      endif
      if spdim20 == 19
      ediff=omega-Aeig19
      endif
      if spdim20 == 20
      ediff=omega-Aeig20
      endif
#
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < emax
      emax=ediff
      egvmax=icount
      endif
#
      enddo spdim20
#
#
      if egvmax == 1.0
#
      if lcount == 2.0
      call DRAWVECX2
      endif
      if lcount == 3.0
      call DRAWVECX3
      endif
      if lcount == 4.0
      call DRAWVECX4
      endif
      if lcount == 5.0
      call DRAWVECX5
      endif
      if lcount == 6.0
      call DRAWVECX6
      endif
      if lcount == 7.0
      call DRAWVECX7
      endif
      if lcount == 8.0
      call DRAWVECX8
      endif
      if lcount == 9.0
      call DRAWVECX9
      endif
      if lcount == 10.0
      call DRAWVECX10
      endif
      if lcount == 11.0
      call DRAWVECX11
      endif
      if lcount == 12.0
      call DRAWVECX12
      endif
      call AEIGCANCX
#
      endif
#
      if egvmax == 2.0
#
      if lcount == 2.0
      call DRAWVECX2
      endif
      if lcount == 3.0
      call DRAWVECX3
      endif
      if lcount == 4.0
      call DRAWVECX4
      endif
      if lcount == 5.0
      call DRAWVECX5
      endif
      if lcount == 6.0
      call DRAWVECX6
      endif
      if lcount == 7.0
      call DRAWVECX7
      endif
      if lcount == 8.0
      call DRAWVECX8
      endif
      if lcount == 9.0
      call DRAWVECX9
      endif
      if lcount == 10.0
      call DRAWVECX10
      endif
      if lcount == 11.0
      call DRAWVECX11
      endif
      if lcount == 12.0
      call DRAWVECX12
      endif
      call AEIGCANCX
#
      endif
#
      if egvmax == 3.0
#
      if lcount == 2.0
      call DRAWVECX2
      endif
      if lcount == 3.0
      call DRAWVECX3
      endif
      if lcount == 4.0
      call DRAWVECX4
      endif
      if lcount == 5.0
      call DRAWVECX5
      endif
      if lcount == 6.0
      call DRAWVECX6
      endif
      if lcount == 7.0
      call DRAWVECX7
      endif
      if lcount == 8.0
      call DRAWVECX8
      endif
      if lcount == 9.0
      call DRAWVECX9
      endif
      if lcount == 10.0
      call DRAWVECX10
      endif
      if lcount == 11.0
      call DRAWVECX11
      endif
      if lcount == 12.0
      call DRAWVECX12
      endif
      call AEIGCANCX
#
      endif
#
      if egvmax == 4.0
#
      if lcount == 2.0
      call DRAWVECX2
      endif
      if lcount == 3.0
      call DRAWVECX3
      endif
      if lcount == 4.0
      call DRAWVECX4
      endif
      if lcount == 5.0
      call DRAWVECX5
      endif
      if lcount == 6.0
      call DRAWVECX6
      endif
      if lcount == 7.0
      call DRAWVECX7
      endif
      if lcount == 8.0
      call DRAWVECX8
      endif
      if lcount == 9.0
      call DRAWVECX9
      endif
      if lcount == 10.0
      call DRAWVECX10
      endif
      if lcount == 11.0
      call DRAWVECX11
      endif
      if lcount == 12.0
      call DRAWVECX12
      endif
      call AEIGCANCX
#
      endif
#
      if egvmax == 5.0
#
      if lcount == 2.0
      call DRAWVECX2
      endif
      if lcount == 3.0
      call DRAWVECX3
      endif
      if lcount == 4.0
      call DRAWVECX4
      endif
      if lcount == 5.0
      call DRAWVECX5
      endif
      if lcount == 6.0
      call DRAWVECX6
      endif
      if lcount == 7.0
      call DRAWVECX7
      endif
      if lcount == 8.0
      call DRAWVECX8
      endif
      if lcount == 9.0
      call DRAWVECX9
      endif
      if lcount == 10.0
      call DRAWVECX10
      endif
      if lcount == 11.0
      call DRAWVECX11
      endif
      if lcount == 12.0
      call DRAWVECX12
      endif
      call AEIGCANCX
#
      endif
#
      if egvmax == 6.0
#
      if lcount == 2.0
      call DRAWVECX2
      endif
      if lcount == 3.0
      call DRAWVECX3
      endif
      if lcount == 4.0
      call DRAWVECX4
      endif
      if lcount == 5.0
      call DRAWVECX5
      endif
      if lcount == 6.0
      call DRAWVECX6
      endif
      if lcount == 7.0
      call DRAWVECX7
      endif
      if lcount == 8.0
      call DRAWVECX8
      endif
      if lcount == 9.0
      call DRAWVECX9
      endif
      if lcount == 10.0
      call DRAWVECX10
      endif
      if lcount == 11.0
      call DRAWVECX11
      endif
      if lcount == 12.0
      call DRAWVECX12
      endif
      call AEIGCANCX
#
      endif
#
      if egvmax == 7.0
#
      if lcount == 2.0
      call DRAWVECX2
      endif
      if lcount == 3.0
      call DRAWVECX3
      endif
      if lcount == 4.0
      call DRAWVECX4
      endif
      if lcount == 5.0
      call DRAWVECX5
      endif
      if lcount == 6.0
      call DRAWVECX6
      endif
      if lcount == 7.0
      call DRAWVECX7
      endif
      if lcount == 8.0
      call DRAWVECX8
      endif
      if lcount == 9.0
      call DRAWVECX9
      endif
      if lcount == 10.0
      call DRAWVECX10
      endif
      if lcount == 11.0
      call DRAWVECX11
      endif
      if lcount == 12.0
      call DRAWVECX12
      endif
      call AEIGCANCX
#
      endif
#
      if egvmax == 8.0
#
      if lcount == 2.0
      call DRAWVECX2
      endif
      if lcount == 3.0
      call DRAWVECX3
      endif
      if lcount == 4.0
      call DRAWVECX4
      endif
      if lcount == 5.0
      call DRAWVECX5
      endif
      if lcount == 6.0
      call DRAWVECX6
      endif
      if lcount == 7.0
      call DRAWVECX7
      endif
      if lcount == 8.0
      call DRAWVECX8
      endif
      if lcount == 9.0
      call DRAWVECX9
      endif
      if lcount == 10.0
      call DRAWVECX10
      endif
      if lcount == 11.0
      call DRAWVECX11
      endif
      if lcount == 12.0
      call DRAWVECX12
      endif
      call AEIGCANCX
#
      endif
#
      if egvmax == 9.0
#
      if lcount == 2.0
      call DRAWVECX2
      endif
      if lcount == 3.0
      call DRAWVECX3
      endif
      if lcount == 4.0
      call DRAWVECX4
      endif
      if lcount == 5.0
      call DRAWVECX5
      endif
      if lcount == 6.0
      call DRAWVECX6
      endif
      if lcount == 7.0
      call DRAWVECX7
      endif
      if lcount == 8.0
      call DRAWVECX8
      endif
      if lcount == 9.0
      call DRAWVECX9
      endif
      if lcount == 10.0
      call DRAWVECX10
      endif
      if lcount == 11.0
      call DRAWVECX11
      endif
      if lcount == 12.0
      call DRAWVECX12
      endif
      call AEIGCANCX
#
      endif
#
      if egvmax == 10.0
#
      if lcount == 2.0
      call DRAWVECX2
      endif
      if lcount == 3.0
      call DRAWVECX3
      endif
      if lcount == 4.0
      call DRAWVECX4
      endif
      if lcount == 5.0
      call DRAWVECX5
      endif
      if lcount == 6.0
      call DRAWVECX6
      endif
      if lcount == 7.0
      call DRAWVECX7
      endif
      if lcount == 8.0
      call DRAWVECX8
      endif
      if lcount == 9.0
      call DRAWVECX9
      endif
      if lcount == 10.0
      call DRAWVECX10
      endif
      if lcount == 11.0
      call DRAWVECX11
      endif
      if lcount == 12.0
      call DRAWVECX12
      endif
      call AEIGCANCX
#
      endif
#
      if egvmax == 11.0
#
      if lcount == 2.0
      call DRAWVECX2
      endif
      if lcount == 3.0
      call DRAWVECX3
      endif
      if lcount == 4.0
      call DRAWVECX4
      endif
      if lcount == 5.0
      call DRAWVECX5
      endif
      if lcount == 6.0
      call DRAWVECX6
      endif
      if lcount == 7.0
      call DRAWVECX7
      endif
      if lcount == 8.0
      call DRAWVECX8
      endif
      if lcount == 9.0
      call DRAWVECX9
      endif
      if lcount == 10.0
      call DRAWVECX10
      endif
      if lcount == 11.0
      call DRAWVECX11
      endif
      if lcount == 12.0
      call DRAWVECX12
      endif
      call AEIGCANCX
#
      endif
#
      if egvmax == 12.0
#
      if lcount == 2.0
      call DRAWVECX2
      endif
      if lcount == 3.0
      call DRAWVECX3
      endif
      if lcount == 4.0
      call DRAWVECX4
      endif
      if lcount == 5.0
      call DRAWVECX5
      endif
      if lcount == 6.0
      call DRAWVECX6
      endif
      if lcount == 7.0
      call DRAWVECX7
      endif
      if lcount == 8.0
      call DRAWVECX8
      endif
      if lcount == 9.0
      call DRAWVECX9
      endif
      if lcount == 10.0
      call DRAWVECX10
      endif
      if lcount == 11.0
      call DRAWVECX11
      endif
      if lcount == 12.0
      call DRAWVECX12
      endif
      call AEIGCANCX
#
      endif
#
      if egvmax == 13.0
#
      if lcount == 2.0
      call DRAWVECX2
      endif
      if lcount == 3.0
      call DRAWVECX3
      endif
      if lcount == 4.0
      call DRAWVECX4
      endif
      if lcount == 5.0
      call DRAWVECX5
      endif
      if lcount == 6.0
      call DRAWVECX6
      endif
      if lcount == 7.0
      call DRAWVECX7
      endif
      if lcount == 8.0
      call DRAWVECX8
      endif
      if lcount == 9.0
      call DRAWVECX9
      endif
      if lcount == 10.0
      call DRAWVECX10
      endif
      if lcount == 11.0
      call DRAWVECX11
      endif
      if lcount == 12.0
      call DRAWVECX12
      endif
      call AEIGCANCX
#
      endif
#
      if egvmax == 14.0
#
      if lcount == 2.0
      call DRAWVECX2
      endif
      if lcount == 3.0
      call DRAWVECX3
      endif
      if lcount == 4.0
      call DRAWVECX4
      endif
      if lcount == 5.0
      call DRAWVECX5
      endif
      if lcount == 6.0
      call DRAWVECX6
      endif
      if lcount == 7.0
      call DRAWVECX7
      endif
      if lcount == 8.0
      call DRAWVECX8
      endif
      if lcount == 9.0
      call DRAWVECX9
      endif
      if lcount == 10.0
      call DRAWVECX10
      endif
      if lcount == 11.0
      call DRAWVECX11
      endif
      if lcount == 12.0
      call DRAWVECX12
      endif
      call AEIGCANCX
#
      endif
#
      if egvmax == 15.0
#
      if lcount == 2.0
      call DRAWVECX2
      endif
      if lcount == 3.0
      call DRAWVECX3
      endif
      if lcount == 4.0
      call DRAWVECX4
      endif
      if lcount == 5.0
      call DRAWVECX5
      endif
      if lcount == 6.0
      call DRAWVECX6
      endif
      if lcount == 7.0
      call DRAWVECX7
      endif
      if lcount == 8.0
      call DRAWVECX8
      endif
      if lcount == 9.0
      call DRAWVECX9
      endif
      if lcount == 10.0
      call DRAWVECX10
      endif
      if lcount == 11.0
      call DRAWVECX11
      endif
      if lcount == 12.0
      call DRAWVECX12
      endif
      call AEIGCANCX
#
      endif
#
      if egvmax == 16.0
#
      if lcount == 2.0
      call DRAWVECX2
      endif
      if lcount == 3.0
      call DRAWVECX3
      endif
      if lcount == 4.0
      call DRAWVECX4
      endif
      if lcount == 5.0
      call DRAWVECX5
      endif
      if lcount == 6.0
      call DRAWVECX6
      endif
      if lcount == 7.0
      call DRAWVECX7
      endif
      if lcount == 8.0
      call DRAWVECX8
      endif
      if lcount == 9.0
      call DRAWVECX9
      endif
      if lcount == 10.0
      call DRAWVECX10
      endif
      if lcount == 11.0
      call DRAWVECX11
      endif
      if lcount == 12.0
      call DRAWVECX12
      endif
      call AEIGCANCX
#
      endif
#
      if egvmax == 17.0
#
      if lcount == 2.0
      call DRAWVECX2
      endif
      if lcount == 3.0
      call DRAWVECX3
      endif
      if lcount == 4.0
      call DRAWVECX4
      endif
      if lcount == 5.0
      call DRAWVECX5
      endif
      if lcount == 6.0
      call DRAWVECX6
      endif
      if lcount == 7.0
      call DRAWVECX7
      endif
      if lcount == 8.0
      call DRAWVECX8
      endif
      if lcount == 9.0
      call DRAWVECX9
      endif
      if lcount == 10.0
      call DRAWVECX10
      endif
      if lcount == 11.0
      call DRAWVECX11
      endif
      if lcount == 12.0
      call DRAWVECX12
      endif
      call AEIGCANCX
#
      endif
#
      if egvmax == 18.0
#
      if lcount == 2.0
      call DRAWVECX2
      endif
      if lcount == 3.0
      call DRAWVECX3
      endif
      if lcount == 4.0
      call DRAWVECX4
      endif
      if lcount == 5.0
      call DRAWVECX5
      endif
      if lcount == 6.0
      call DRAWVECX6
      endif
      if lcount == 7.0
      call DRAWVECX7
      endif
      if lcount == 8.0
      call DRAWVECX8
      endif
      if lcount == 9.0
      call DRAWVECX9
      endif
      if lcount == 10.0
      call DRAWVECX10
      endif
      if lcount == 11.0
      call DRAWVECX11
      endif
      if lcount == 12.0
      call DRAWVECX12
      endif
      call AEIGCANCX
#
      endif
#
      if egvmax == 19.0
#
      if lcount == 2.0
      call DRAWVECX2
      endif
      if lcount == 3.0
      call DRAWVECX3
      endif
      if lcount == 4.0
      call DRAWVECX4
      endif
      if lcount == 5.0
      call DRAWVECX5
      endif
      if lcount == 6.0
      call DRAWVECX6
      endif
      if lcount == 7.0
      call DRAWVECX7
      endif
      if lcount == 8.0
      call DRAWVECX8
      endif
      if lcount == 9.0
      call DRAWVECX9
      endif
      if lcount == 10.0
      call DRAWVECX10
      endif
      if lcount == 11.0
      call DRAWVECX11
      endif
      if lcount == 12.0
      call DRAWVECX12
      endif
      call AEIGCANCX
#
      endif
#
      if egvmax == 20.0
#
      if lcount == 2.0
      call DRAWVECX2
      endif
      if lcount == 3.0
      call DRAWVECX3
      endif
      if lcount == 4.0
      call DRAWVECX4
      endif
      if lcount == 5.0
      call DRAWVECX5
      endif
      if lcount == 6.0
      call DRAWVECX6
      endif
      if lcount == 7.0
      call DRAWVECX7
      endif
      if lcount == 8.0
      call DRAWVECX8
      endif
      if lcount == 9.0
      call DRAWVECX9
      endif
      if lcount == 10.0
      call DRAWVECX10
      endif
      if lcount == 11.0
      call DRAWVECX11
      endif
      if lcount == 12.0
      call DRAWVECX12
      endif
      call AEIGCANCX
#
      endif
#
     enddo spdim2
#
#
     ENDPROC FNDVECS
#======================================================
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#--end of script generated part of the code
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#======================================================
#
     PROC GSCHMIDT
#
#
#------2 vectors -------------------------------
#
     etemp2_1=V2_1
     etemp2_2=V2_2
     etemp2_3=V2_3
     etemp2_4=V2_4
     etemp2_5=V2_5
     etemp2_6=V2_6
     etemp2_7=V2_7
     etemp2_8=V2_8
     etemp2_9=V2_9
     etemp2_10=V2_10
     etemp2_11=V2_11
     etemp2_12=V2_12
     etemp2_13=V2_13
     etemp2_14=V2_14
     etemp2_15=V2_15
     etemp2_16=V2_16
     etemp2_17=V2_17
     etemp2_18=V2_18
     etemp2_19=V2_19
     etemp2_20=V2_20
#
     sqr=0.0
     etemp=V1_1*etemp2_1
     sqr+=etemp
     etemp=V1_2*etemp2_2
     sqr+=etemp
     etemp=V1_3*etemp2_3
     sqr+=etemp
     etemp=V1_4*etemp2_4
     sqr+=etemp
     etemp=V1_5*etemp2_5
     sqr+=etemp
     etemp=V1_6*etemp2_6
     sqr+=etemp
     etemp=V1_7*etemp2_7
     sqr+=etemp
     etemp=V1_8*etemp2_8
     sqr+=etemp
     etemp=V1_9*etemp2_9
     sqr+=etemp
     etemp=V1_10*etemp2_10
     sqr+=etemp
     etemp=V1_11*etemp2_11
     sqr+=etemp
     etemp=V1_12*etemp2_12
     sqr+=etemp
     etemp=V1_13*etemp2_13
     sqr+=etemp
     etemp=V1_14*etemp2_14
     sqr+=etemp
     etemp=V1_15*etemp2_15
     sqr+=etemp
     etemp=V1_16*etemp2_16
     sqr+=etemp
     etemp=V1_17*etemp2_17
     sqr+=etemp
     etemp=V1_18*etemp2_18
     sqr+=etemp
     etemp=V1_19*etemp2_19
     sqr+=etemp
     etemp=V1_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V1_1*sqr
     Vtemp_2=V1_2*sqr
     Vtemp_3=V1_3*sqr
     Vtemp_4=V1_4*sqr
     Vtemp_5=V1_5*sqr
     Vtemp_6=V1_6*sqr
     Vtemp_7=V1_7*sqr
     Vtemp_8=V1_8*sqr
     Vtemp_9=V1_9*sqr
     Vtemp_10=V1_10*sqr
     Vtemp_11=V1_11*sqr
     Vtemp_12=V1_12*sqr
     Vtemp_13=V1_13*sqr
     Vtemp_14=V1_14*sqr
     Vtemp_15=V1_15*sqr
     Vtemp_16=V1_16*sqr
     Vtemp_17=V1_17*sqr
     Vtemp_18=V1_18*sqr
     Vtemp_19=V1_19*sqr
     Vtemp_20=V1_20*sqr
#
     V2_1+=Vtemp_1
     V2_2+=Vtemp_2
     V2_3+=Vtemp_3
     V2_4+=Vtemp_4
     V2_5+=Vtemp_5
     V2_6+=Vtemp_6
     V2_7+=Vtemp_7
     V2_8+=Vtemp_8
     V2_9+=Vtemp_9
     V2_10+=Vtemp_10
     V2_11+=Vtemp_11
     V2_12+=Vtemp_12
     V2_13+=Vtemp_13
     V2_14+=Vtemp_14
     V2_15+=Vtemp_15
     V2_16+=Vtemp_16
     V2_17+=Vtemp_17
     V2_18+=Vtemp_18
     V2_19+=Vtemp_19
     V2_20+=Vtemp_20
#
#
     Vtemp_1=V2_1
     Vtemp_2=V2_2
     Vtemp_3=V2_3
     Vtemp_4=V2_4
     Vtemp_5=V2_5
     Vtemp_6=V2_6
     Vtemp_7=V2_7
     Vtemp_8=V2_8
     Vtemp_9=V2_9
     Vtemp_10=V2_10
     Vtemp_11=V2_11
     Vtemp_12=V2_12
     Vtemp_13=V2_13
     Vtemp_14=V2_14
     Vtemp_15=V2_15
     Vtemp_16=V2_16
     Vtemp_17=V2_17
     Vtemp_18=V2_18
     Vtemp_19=V2_19
     Vtemp_20=V2_20
#
     sqr=0.0
#
     etemp=V2_1*Vtemp_1
     sqr+=etemp
     etemp=V2_2*Vtemp_2
     sqr+=etemp
     etemp=V2_3*Vtemp_3
     sqr+=etemp
     etemp=V2_4*Vtemp_4
     sqr+=etemp
     etemp=V2_5*Vtemp_5
     sqr+=etemp
     etemp=V2_6*Vtemp_6
     sqr+=etemp
     etemp=V2_7*Vtemp_7
     sqr+=etemp
     etemp=V2_8*Vtemp_8
     sqr+=etemp
     etemp=V2_9*Vtemp_9
     sqr+=etemp
     etemp=V2_10*Vtemp_10
     sqr+=etemp
     etemp=V2_11*Vtemp_11
     sqr+=etemp
     etemp=V2_12*Vtemp_12
     sqr+=etemp
     etemp=V2_13*Vtemp_13
     sqr+=etemp
     etemp=V2_14*Vtemp_14
     sqr+=etemp
     etemp=V2_15*Vtemp_15
     sqr+=etemp
     etemp=V2_16*Vtemp_16
     sqr+=etemp
     etemp=V2_17*Vtemp_17
     sqr+=etemp
     etemp=V2_18*Vtemp_18
     sqr+=etemp
     etemp=V2_19*Vtemp_19
     sqr+=etemp
     etemp=V2_20*Vtemp_20
     sqr+=etemp
#
#       exponent=0.5
#       execute square_root sqr exponent
#       sqr2=1.0/sqr
     execute norm_fac sqr exponent
     sqr2=sqr
#
     V2_1*=sqr2
     V2_2*=sqr2
     V2_3*=sqr2
     V2_4*=sqr2
     V2_5*=sqr2
     V2_6*=sqr2
     V2_7*=sqr2
     V2_8*=sqr2
     V2_9*=sqr2
     V2_10*=sqr2
     V2_11*=sqr2
     V2_12*=sqr2
     V2_13*=sqr2
     V2_14*=sqr2
     V2_15*=sqr2
     V2_16*=sqr2
     V2_17*=sqr2
     V2_18*=sqr2
     V2_19*=sqr2
     V2_20*=sqr2
#
#------3 vectors -------------------------------
#
     etemp2_1=V3_1
     etemp2_2=V3_2
     etemp2_3=V3_3
     etemp2_4=V3_4
     etemp2_5=V3_5
     etemp2_6=V3_6
     etemp2_7=V3_7
     etemp2_8=V3_8
     etemp2_9=V3_9
     etemp2_10=V3_10
     etemp2_11=V3_11
     etemp2_12=V3_12
     etemp2_13=V3_13
     etemp2_14=V3_14
     etemp2_15=V3_15
     etemp2_16=V3_16
     etemp2_17=V3_17
     etemp2_18=V3_18
     etemp2_19=V3_19
     etemp2_20=V3_20
#
     sqr=0.0
     etemp=V1_1*etemp2_1
     sqr+=etemp
     etemp=V1_2*etemp2_2
     sqr+=etemp
     etemp=V1_3*etemp2_3
     sqr+=etemp
     etemp=V1_4*etemp2_4
     sqr+=etemp
     etemp=V1_5*etemp2_5
     sqr+=etemp
     etemp=V1_6*etemp2_6
     sqr+=etemp
     etemp=V1_7*etemp2_7
     sqr+=etemp
     etemp=V1_8*etemp2_8
     sqr+=etemp
     etemp=V1_9*etemp2_9
     sqr+=etemp
     etemp=V1_10*etemp2_10
     sqr+=etemp
     etemp=V1_11*etemp2_11
     sqr+=etemp
     etemp=V1_12*etemp2_12
     sqr+=etemp
     etemp=V1_13*etemp2_13
     sqr+=etemp
     etemp=V1_14*etemp2_14
     sqr+=etemp
     etemp=V1_15*etemp2_15
     sqr+=etemp
     etemp=V1_16*etemp2_16
     sqr+=etemp
     etemp=V1_17*etemp2_17
     sqr+=etemp
     etemp=V1_18*etemp2_18
     sqr+=etemp
     etemp=V1_19*etemp2_19
     sqr+=etemp
     etemp=V1_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V1_1*sqr
     Vtemp_2=V1_2*sqr
     Vtemp_3=V1_3*sqr
     Vtemp_4=V1_4*sqr
     Vtemp_5=V1_5*sqr
     Vtemp_6=V1_6*sqr
     Vtemp_7=V1_7*sqr
     Vtemp_8=V1_8*sqr
     Vtemp_9=V1_9*sqr
     Vtemp_10=V1_10*sqr
     Vtemp_11=V1_11*sqr
     Vtemp_12=V1_12*sqr
     Vtemp_13=V1_13*sqr
     Vtemp_14=V1_14*sqr
     Vtemp_15=V1_15*sqr
     Vtemp_16=V1_16*sqr
     Vtemp_17=V1_17*sqr
     Vtemp_18=V1_18*sqr
     Vtemp_19=V1_19*sqr
     Vtemp_20=V1_20*sqr
#
     V3_1+=Vtemp_1
     V3_2+=Vtemp_2
     V3_3+=Vtemp_3
     V3_4+=Vtemp_4
     V3_5+=Vtemp_5
     V3_6+=Vtemp_6
     V3_7+=Vtemp_7
     V3_8+=Vtemp_8
     V3_9+=Vtemp_9
     V3_10+=Vtemp_10
     V3_11+=Vtemp_11
     V3_12+=Vtemp_12
     V3_13+=Vtemp_13
     V3_14+=Vtemp_14
     V3_15+=Vtemp_15
     V3_16+=Vtemp_16
     V3_17+=Vtemp_17
     V3_18+=Vtemp_18
     V3_19+=Vtemp_19
     V3_20+=Vtemp_20
#
#
     etemp2_1=V3_1
     etemp2_2=V3_2
     etemp2_3=V3_3
     etemp2_4=V3_4
     etemp2_5=V3_5
     etemp2_6=V3_6
     etemp2_7=V3_7
     etemp2_8=V3_8
     etemp2_9=V3_9
     etemp2_10=V3_10
     etemp2_11=V3_11
     etemp2_12=V3_12
     etemp2_13=V3_13
     etemp2_14=V3_14
     etemp2_15=V3_15
     etemp2_16=V3_16
     etemp2_17=V3_17
     etemp2_18=V3_18
     etemp2_19=V3_19
     etemp2_20=V3_20
#
     sqr=0.0
     etemp=V2_1*etemp2_1
     sqr+=etemp
     etemp=V2_2*etemp2_2
     sqr+=etemp
     etemp=V2_3*etemp2_3
     sqr+=etemp
     etemp=V2_4*etemp2_4
     sqr+=etemp
     etemp=V2_5*etemp2_5
     sqr+=etemp
     etemp=V2_6*etemp2_6
     sqr+=etemp
     etemp=V2_7*etemp2_7
     sqr+=etemp
     etemp=V2_8*etemp2_8
     sqr+=etemp
     etemp=V2_9*etemp2_9
     sqr+=etemp
     etemp=V2_10*etemp2_10
     sqr+=etemp
     etemp=V2_11*etemp2_11
     sqr+=etemp
     etemp=V2_12*etemp2_12
     sqr+=etemp
     etemp=V2_13*etemp2_13
     sqr+=etemp
     etemp=V2_14*etemp2_14
     sqr+=etemp
     etemp=V2_15*etemp2_15
     sqr+=etemp
     etemp=V2_16*etemp2_16
     sqr+=etemp
     etemp=V2_17*etemp2_17
     sqr+=etemp
     etemp=V2_18*etemp2_18
     sqr+=etemp
     etemp=V2_19*etemp2_19
     sqr+=etemp
     etemp=V2_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V2_1*sqr
     Vtemp_2=V2_2*sqr
     Vtemp_3=V2_3*sqr
     Vtemp_4=V2_4*sqr
     Vtemp_5=V2_5*sqr
     Vtemp_6=V2_6*sqr
     Vtemp_7=V2_7*sqr
     Vtemp_8=V2_8*sqr
     Vtemp_9=V2_9*sqr
     Vtemp_10=V2_10*sqr
     Vtemp_11=V2_11*sqr
     Vtemp_12=V2_12*sqr
     Vtemp_13=V2_13*sqr
     Vtemp_14=V2_14*sqr
     Vtemp_15=V2_15*sqr
     Vtemp_16=V2_16*sqr
     Vtemp_17=V2_17*sqr
     Vtemp_18=V2_18*sqr
     Vtemp_19=V2_19*sqr
     Vtemp_20=V2_20*sqr
#
     V3_1+=Vtemp_1
     V3_2+=Vtemp_2
     V3_3+=Vtemp_3
     V3_4+=Vtemp_4
     V3_5+=Vtemp_5
     V3_6+=Vtemp_6
     V3_7+=Vtemp_7
     V3_8+=Vtemp_8
     V3_9+=Vtemp_9
     V3_10+=Vtemp_10
     V3_11+=Vtemp_11
     V3_12+=Vtemp_12
     V3_13+=Vtemp_13
     V3_14+=Vtemp_14
     V3_15+=Vtemp_15
     V3_16+=Vtemp_16
     V3_17+=Vtemp_17
     V3_18+=Vtemp_18
     V3_19+=Vtemp_19
     V3_20+=Vtemp_20
#
#
     Vtemp_1=V3_1
     Vtemp_2=V3_2
     Vtemp_3=V3_3
     Vtemp_4=V3_4
     Vtemp_5=V3_5
     Vtemp_6=V3_6
     Vtemp_7=V3_7
     Vtemp_8=V3_8
     Vtemp_9=V3_9
     Vtemp_10=V3_10
     Vtemp_11=V3_11
     Vtemp_12=V3_12
     Vtemp_13=V3_13
     Vtemp_14=V3_14
     Vtemp_15=V3_15
     Vtemp_16=V3_16
     Vtemp_17=V3_17
     Vtemp_18=V3_18
     Vtemp_19=V3_19
     Vtemp_20=V3_20
#
     sqr=0.0
#
     etemp=V3_1*Vtemp_1
     sqr+=etemp
     etemp=V3_2*Vtemp_2
     sqr+=etemp
     etemp=V3_3*Vtemp_3
     sqr+=etemp
     etemp=V3_4*Vtemp_4
     sqr+=etemp
     etemp=V3_5*Vtemp_5
     sqr+=etemp
     etemp=V3_6*Vtemp_6
     sqr+=etemp
     etemp=V3_7*Vtemp_7
     sqr+=etemp
     etemp=V3_8*Vtemp_8
     sqr+=etemp
     etemp=V3_9*Vtemp_9
     sqr+=etemp
     etemp=V3_10*Vtemp_10
     sqr+=etemp
     etemp=V3_11*Vtemp_11
     sqr+=etemp
     etemp=V3_12*Vtemp_12
     sqr+=etemp
     etemp=V3_13*Vtemp_13
     sqr+=etemp
     etemp=V3_14*Vtemp_14
     sqr+=etemp
     etemp=V3_15*Vtemp_15
     sqr+=etemp
     etemp=V3_16*Vtemp_16
     sqr+=etemp
     etemp=V3_17*Vtemp_17
     sqr+=etemp
     etemp=V3_18*Vtemp_18
     sqr+=etemp
     etemp=V3_19*Vtemp_19
     sqr+=etemp
     etemp=V3_20*Vtemp_20
     sqr+=etemp
#
       exponent=0.5
#       execute square_root sqr exponent
#       sqr2=1.0/sqr
     execute norm_fac sqr exponent
     sqr2=sqr
#
     V3_1*=sqr2
     V3_2*=sqr2
     V3_3*=sqr2
     V3_4*=sqr2
     V3_5*=sqr2
     V3_6*=sqr2
     V3_7*=sqr2
     V3_8*=sqr2
     V3_9*=sqr2
     V3_10*=sqr2
     V3_11*=sqr2
     V3_12*=sqr2
     V3_13*=sqr2
     V3_14*=sqr2
     V3_15*=sqr2
     V3_16*=sqr2
     V3_17*=sqr2
     V3_18*=sqr2
     V3_19*=sqr2
     V3_20*=sqr2
#
#------4 vectors -------------------------------
#
     etemp2_1=V4_1
     etemp2_2=V4_2
     etemp2_3=V4_3
     etemp2_4=V4_4
     etemp2_5=V4_5
     etemp2_6=V4_6
     etemp2_7=V4_7
     etemp2_8=V4_8
     etemp2_9=V4_9
     etemp2_10=V4_10
     etemp2_11=V4_11
     etemp2_12=V4_12
     etemp2_13=V4_13
     etemp2_14=V4_14
     etemp2_15=V4_15
     etemp2_16=V4_16
     etemp2_17=V4_17
     etemp2_18=V4_18
     etemp2_19=V4_19
     etemp2_20=V4_20
#
     sqr=0.0
     etemp=V1_1*etemp2_1
     sqr+=etemp
     etemp=V1_2*etemp2_2
     sqr+=etemp
     etemp=V1_3*etemp2_3
     sqr+=etemp
     etemp=V1_4*etemp2_4
     sqr+=etemp
     etemp=V1_5*etemp2_5
     sqr+=etemp
     etemp=V1_6*etemp2_6
     sqr+=etemp
     etemp=V1_7*etemp2_7
     sqr+=etemp
     etemp=V1_8*etemp2_8
     sqr+=etemp
     etemp=V1_9*etemp2_9
     sqr+=etemp
     etemp=V1_10*etemp2_10
     sqr+=etemp
     etemp=V1_11*etemp2_11
     sqr+=etemp
     etemp=V1_12*etemp2_12
     sqr+=etemp
     etemp=V1_13*etemp2_13
     sqr+=etemp
     etemp=V1_14*etemp2_14
     sqr+=etemp
     etemp=V1_15*etemp2_15
     sqr+=etemp
     etemp=V1_16*etemp2_16
     sqr+=etemp
     etemp=V1_17*etemp2_17
     sqr+=etemp
     etemp=V1_18*etemp2_18
     sqr+=etemp
     etemp=V1_19*etemp2_19
     sqr+=etemp
     etemp=V1_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V1_1*sqr
     Vtemp_2=V1_2*sqr
     Vtemp_3=V1_3*sqr
     Vtemp_4=V1_4*sqr
     Vtemp_5=V1_5*sqr
     Vtemp_6=V1_6*sqr
     Vtemp_7=V1_7*sqr
     Vtemp_8=V1_8*sqr
     Vtemp_9=V1_9*sqr
     Vtemp_10=V1_10*sqr
     Vtemp_11=V1_11*sqr
     Vtemp_12=V1_12*sqr
     Vtemp_13=V1_13*sqr
     Vtemp_14=V1_14*sqr
     Vtemp_15=V1_15*sqr
     Vtemp_16=V1_16*sqr
     Vtemp_17=V1_17*sqr
     Vtemp_18=V1_18*sqr
     Vtemp_19=V1_19*sqr
     Vtemp_20=V1_20*sqr
#
     V4_1+=Vtemp_1
     V4_2+=Vtemp_2
     V4_3+=Vtemp_3
     V4_4+=Vtemp_4
     V4_5+=Vtemp_5
     V4_6+=Vtemp_6
     V4_7+=Vtemp_7
     V4_8+=Vtemp_8
     V4_9+=Vtemp_9
     V4_10+=Vtemp_10
     V4_11+=Vtemp_11
     V4_12+=Vtemp_12
     V4_13+=Vtemp_13
     V4_14+=Vtemp_14
     V4_15+=Vtemp_15
     V4_16+=Vtemp_16
     V4_17+=Vtemp_17
     V4_18+=Vtemp_18
     V4_19+=Vtemp_19
     V4_20+=Vtemp_20
#
#
     etemp2_1=V4_1
     etemp2_2=V4_2
     etemp2_3=V4_3
     etemp2_4=V4_4
     etemp2_5=V4_5
     etemp2_6=V4_6
     etemp2_7=V4_7
     etemp2_8=V4_8
     etemp2_9=V4_9
     etemp2_10=V4_10
     etemp2_11=V4_11
     etemp2_12=V4_12
     etemp2_13=V4_13
     etemp2_14=V4_14
     etemp2_15=V4_15
     etemp2_16=V4_16
     etemp2_17=V4_17
     etemp2_18=V4_18
     etemp2_19=V4_19
     etemp2_20=V4_20
#
     sqr=0.0
     etemp=V2_1*etemp2_1
     sqr+=etemp
     etemp=V2_2*etemp2_2
     sqr+=etemp
     etemp=V2_3*etemp2_3
     sqr+=etemp
     etemp=V2_4*etemp2_4
     sqr+=etemp
     etemp=V2_5*etemp2_5
     sqr+=etemp
     etemp=V2_6*etemp2_6
     sqr+=etemp
     etemp=V2_7*etemp2_7
     sqr+=etemp
     etemp=V2_8*etemp2_8
     sqr+=etemp
     etemp=V2_9*etemp2_9
     sqr+=etemp
     etemp=V2_10*etemp2_10
     sqr+=etemp
     etemp=V2_11*etemp2_11
     sqr+=etemp
     etemp=V2_12*etemp2_12
     sqr+=etemp
     etemp=V2_13*etemp2_13
     sqr+=etemp
     etemp=V2_14*etemp2_14
     sqr+=etemp
     etemp=V2_15*etemp2_15
     sqr+=etemp
     etemp=V2_16*etemp2_16
     sqr+=etemp
     etemp=V2_17*etemp2_17
     sqr+=etemp
     etemp=V2_18*etemp2_18
     sqr+=etemp
     etemp=V2_19*etemp2_19
     sqr+=etemp
     etemp=V2_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V2_1*sqr
     Vtemp_2=V2_2*sqr
     Vtemp_3=V2_3*sqr
     Vtemp_4=V2_4*sqr
     Vtemp_5=V2_5*sqr
     Vtemp_6=V2_6*sqr
     Vtemp_7=V2_7*sqr
     Vtemp_8=V2_8*sqr
     Vtemp_9=V2_9*sqr
     Vtemp_10=V2_10*sqr
     Vtemp_11=V2_11*sqr
     Vtemp_12=V2_12*sqr
     Vtemp_13=V2_13*sqr
     Vtemp_14=V2_14*sqr
     Vtemp_15=V2_15*sqr
     Vtemp_16=V2_16*sqr
     Vtemp_17=V2_17*sqr
     Vtemp_18=V2_18*sqr
     Vtemp_19=V2_19*sqr
     Vtemp_20=V2_20*sqr
#
     V4_1+=Vtemp_1
     V4_2+=Vtemp_2
     V4_3+=Vtemp_3
     V4_4+=Vtemp_4
     V4_5+=Vtemp_5
     V4_6+=Vtemp_6
     V4_7+=Vtemp_7
     V4_8+=Vtemp_8
     V4_9+=Vtemp_9
     V4_10+=Vtemp_10
     V4_11+=Vtemp_11
     V4_12+=Vtemp_12
     V4_13+=Vtemp_13
     V4_14+=Vtemp_14
     V4_15+=Vtemp_15
     V4_16+=Vtemp_16
     V4_17+=Vtemp_17
     V4_18+=Vtemp_18
     V4_19+=Vtemp_19
     V4_20+=Vtemp_20
#
#
     etemp2_1=V4_1
     etemp2_2=V4_2
     etemp2_3=V4_3
     etemp2_4=V4_4
     etemp2_5=V4_5
     etemp2_6=V4_6
     etemp2_7=V4_7
     etemp2_8=V4_8
     etemp2_9=V4_9
     etemp2_10=V4_10
     etemp2_11=V4_11
     etemp2_12=V4_12
     etemp2_13=V4_13
     etemp2_14=V4_14
     etemp2_15=V4_15
     etemp2_16=V4_16
     etemp2_17=V4_17
     etemp2_18=V4_18
     etemp2_19=V4_19
     etemp2_20=V4_20
#
     sqr=0.0
     etemp=V3_1*etemp2_1
     sqr+=etemp
     etemp=V3_2*etemp2_2
     sqr+=etemp
     etemp=V3_3*etemp2_3
     sqr+=etemp
     etemp=V3_4*etemp2_4
     sqr+=etemp
     etemp=V3_5*etemp2_5
     sqr+=etemp
     etemp=V3_6*etemp2_6
     sqr+=etemp
     etemp=V3_7*etemp2_7
     sqr+=etemp
     etemp=V3_8*etemp2_8
     sqr+=etemp
     etemp=V3_9*etemp2_9
     sqr+=etemp
     etemp=V3_10*etemp2_10
     sqr+=etemp
     etemp=V3_11*etemp2_11
     sqr+=etemp
     etemp=V3_12*etemp2_12
     sqr+=etemp
     etemp=V3_13*etemp2_13
     sqr+=etemp
     etemp=V3_14*etemp2_14
     sqr+=etemp
     etemp=V3_15*etemp2_15
     sqr+=etemp
     etemp=V3_16*etemp2_16
     sqr+=etemp
     etemp=V3_17*etemp2_17
     sqr+=etemp
     etemp=V3_18*etemp2_18
     sqr+=etemp
     etemp=V3_19*etemp2_19
     sqr+=etemp
     etemp=V3_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V3_1*sqr
     Vtemp_2=V3_2*sqr
     Vtemp_3=V3_3*sqr
     Vtemp_4=V3_4*sqr
     Vtemp_5=V3_5*sqr
     Vtemp_6=V3_6*sqr
     Vtemp_7=V3_7*sqr
     Vtemp_8=V3_8*sqr
     Vtemp_9=V3_9*sqr
     Vtemp_10=V3_10*sqr
     Vtemp_11=V3_11*sqr
     Vtemp_12=V3_12*sqr
     Vtemp_13=V3_13*sqr
     Vtemp_14=V3_14*sqr
     Vtemp_15=V3_15*sqr
     Vtemp_16=V3_16*sqr
     Vtemp_17=V3_17*sqr
     Vtemp_18=V3_18*sqr
     Vtemp_19=V3_19*sqr
     Vtemp_20=V3_20*sqr
#
     V4_1+=Vtemp_1
     V4_2+=Vtemp_2
     V4_3+=Vtemp_3
     V4_4+=Vtemp_4
     V4_5+=Vtemp_5
     V4_6+=Vtemp_6
     V4_7+=Vtemp_7
     V4_8+=Vtemp_8
     V4_9+=Vtemp_9
     V4_10+=Vtemp_10
     V4_11+=Vtemp_11
     V4_12+=Vtemp_12
     V4_13+=Vtemp_13
     V4_14+=Vtemp_14
     V4_15+=Vtemp_15
     V4_16+=Vtemp_16
     V4_17+=Vtemp_17
     V4_18+=Vtemp_18
     V4_19+=Vtemp_19
     V4_20+=Vtemp_20
#
#
     Vtemp_1=V4_1
     Vtemp_2=V4_2
     Vtemp_3=V4_3
     Vtemp_4=V4_4
     Vtemp_5=V4_5
     Vtemp_6=V4_6
     Vtemp_7=V4_7
     Vtemp_8=V4_8
     Vtemp_9=V4_9
     Vtemp_10=V4_10
     Vtemp_11=V4_11
     Vtemp_12=V4_12
     Vtemp_13=V4_13
     Vtemp_14=V4_14
     Vtemp_15=V4_15
     Vtemp_16=V4_16
     Vtemp_17=V4_17
     Vtemp_18=V4_18
     Vtemp_19=V4_19
     Vtemp_20=V4_20
#
     sqr=0.0
#
     etemp=V4_1*Vtemp_1
     sqr+=etemp
     etemp=V4_2*Vtemp_2
     sqr+=etemp
     etemp=V4_3*Vtemp_3
     sqr+=etemp
     etemp=V4_4*Vtemp_4
     sqr+=etemp
     etemp=V4_5*Vtemp_5
     sqr+=etemp
     etemp=V4_6*Vtemp_6
     sqr+=etemp
     etemp=V4_7*Vtemp_7
     sqr+=etemp
     etemp=V4_8*Vtemp_8
     sqr+=etemp
     etemp=V4_9*Vtemp_9
     sqr+=etemp
     etemp=V4_10*Vtemp_10
     sqr+=etemp
     etemp=V4_11*Vtemp_11
     sqr+=etemp
     etemp=V4_12*Vtemp_12
     sqr+=etemp
     etemp=V4_13*Vtemp_13
     sqr+=etemp
     etemp=V4_14*Vtemp_14
     sqr+=etemp
     etemp=V4_15*Vtemp_15
     sqr+=etemp
     etemp=V4_16*Vtemp_16
     sqr+=etemp
     etemp=V4_17*Vtemp_17
     sqr+=etemp
     etemp=V4_18*Vtemp_18
     sqr+=etemp
     etemp=V4_19*Vtemp_19
     sqr+=etemp
     etemp=V4_20*Vtemp_20
     sqr+=etemp
#
       exponent=0.5
#       execute square_root sqr exponent
#       sqr2=1.0/sqr
     execute norm_fac sqr exponent
     sqr2=sqr
#
     V4_1*=sqr2
     V4_2*=sqr2
     V4_3*=sqr2
     V4_4*=sqr2
     V4_5*=sqr2
     V4_6*=sqr2
     V4_7*=sqr2
     V4_8*=sqr2
     V4_9*=sqr2
     V4_10*=sqr2
     V4_11*=sqr2
     V4_12*=sqr2
     V4_13*=sqr2
     V4_14*=sqr2
     V4_15*=sqr2
     V4_16*=sqr2
     V4_17*=sqr2
     V4_18*=sqr2
     V4_19*=sqr2
     V4_20*=sqr2
#
#------5 vectors -------------------------------
#
     etemp2_1=V5_1
     etemp2_2=V5_2
     etemp2_3=V5_3
     etemp2_4=V5_4
     etemp2_5=V5_5
     etemp2_6=V5_6
     etemp2_7=V5_7
     etemp2_8=V5_8
     etemp2_9=V5_9
     etemp2_10=V5_10
     etemp2_11=V5_11
     etemp2_12=V5_12
     etemp2_13=V5_13
     etemp2_14=V5_14
     etemp2_15=V5_15
     etemp2_16=V5_16
     etemp2_17=V5_17
     etemp2_18=V5_18
     etemp2_19=V5_19
     etemp2_20=V5_20
#
     sqr=0.0
     etemp=V1_1*etemp2_1
     sqr+=etemp
     etemp=V1_2*etemp2_2
     sqr+=etemp
     etemp=V1_3*etemp2_3
     sqr+=etemp
     etemp=V1_4*etemp2_4
     sqr+=etemp
     etemp=V1_5*etemp2_5
     sqr+=etemp
     etemp=V1_6*etemp2_6
     sqr+=etemp
     etemp=V1_7*etemp2_7
     sqr+=etemp
     etemp=V1_8*etemp2_8
     sqr+=etemp
     etemp=V1_9*etemp2_9
     sqr+=etemp
     etemp=V1_10*etemp2_10
     sqr+=etemp
     etemp=V1_11*etemp2_11
     sqr+=etemp
     etemp=V1_12*etemp2_12
     sqr+=etemp
     etemp=V1_13*etemp2_13
     sqr+=etemp
     etemp=V1_14*etemp2_14
     sqr+=etemp
     etemp=V1_15*etemp2_15
     sqr+=etemp
     etemp=V1_16*etemp2_16
     sqr+=etemp
     etemp=V1_17*etemp2_17
     sqr+=etemp
     etemp=V1_18*etemp2_18
     sqr+=etemp
     etemp=V1_19*etemp2_19
     sqr+=etemp
     etemp=V1_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V1_1*sqr
     Vtemp_2=V1_2*sqr
     Vtemp_3=V1_3*sqr
     Vtemp_4=V1_4*sqr
     Vtemp_5=V1_5*sqr
     Vtemp_6=V1_6*sqr
     Vtemp_7=V1_7*sqr
     Vtemp_8=V1_8*sqr
     Vtemp_9=V1_9*sqr
     Vtemp_10=V1_10*sqr
     Vtemp_11=V1_11*sqr
     Vtemp_12=V1_12*sqr
     Vtemp_13=V1_13*sqr
     Vtemp_14=V1_14*sqr
     Vtemp_15=V1_15*sqr
     Vtemp_16=V1_16*sqr
     Vtemp_17=V1_17*sqr
     Vtemp_18=V1_18*sqr
     Vtemp_19=V1_19*sqr
     Vtemp_20=V1_20*sqr
#
     V5_1+=Vtemp_1
     V5_2+=Vtemp_2
     V5_3+=Vtemp_3
     V5_4+=Vtemp_4
     V5_5+=Vtemp_5
     V5_6+=Vtemp_6
     V5_7+=Vtemp_7
     V5_8+=Vtemp_8
     V5_9+=Vtemp_9
     V5_10+=Vtemp_10
     V5_11+=Vtemp_11
     V5_12+=Vtemp_12
     V5_13+=Vtemp_13
     V5_14+=Vtemp_14
     V5_15+=Vtemp_15
     V5_16+=Vtemp_16
     V5_17+=Vtemp_17
     V5_18+=Vtemp_18
     V5_19+=Vtemp_19
     V5_20+=Vtemp_20
#
#
     etemp2_1=V5_1
     etemp2_2=V5_2
     etemp2_3=V5_3
     etemp2_4=V5_4
     etemp2_5=V5_5
     etemp2_6=V5_6
     etemp2_7=V5_7
     etemp2_8=V5_8
     etemp2_9=V5_9
     etemp2_10=V5_10
     etemp2_11=V5_11
     etemp2_12=V5_12
     etemp2_13=V5_13
     etemp2_14=V5_14
     etemp2_15=V5_15
     etemp2_16=V5_16
     etemp2_17=V5_17
     etemp2_18=V5_18
     etemp2_19=V5_19
     etemp2_20=V5_20
#
     sqr=0.0
     etemp=V2_1*etemp2_1
     sqr+=etemp
     etemp=V2_2*etemp2_2
     sqr+=etemp
     etemp=V2_3*etemp2_3
     sqr+=etemp
     etemp=V2_4*etemp2_4
     sqr+=etemp
     etemp=V2_5*etemp2_5
     sqr+=etemp
     etemp=V2_6*etemp2_6
     sqr+=etemp
     etemp=V2_7*etemp2_7
     sqr+=etemp
     etemp=V2_8*etemp2_8
     sqr+=etemp
     etemp=V2_9*etemp2_9
     sqr+=etemp
     etemp=V2_10*etemp2_10
     sqr+=etemp
     etemp=V2_11*etemp2_11
     sqr+=etemp
     etemp=V2_12*etemp2_12
     sqr+=etemp
     etemp=V2_13*etemp2_13
     sqr+=etemp
     etemp=V2_14*etemp2_14
     sqr+=etemp
     etemp=V2_15*etemp2_15
     sqr+=etemp
     etemp=V2_16*etemp2_16
     sqr+=etemp
     etemp=V2_17*etemp2_17
     sqr+=etemp
     etemp=V2_18*etemp2_18
     sqr+=etemp
     etemp=V2_19*etemp2_19
     sqr+=etemp
     etemp=V2_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V2_1*sqr
     Vtemp_2=V2_2*sqr
     Vtemp_3=V2_3*sqr
     Vtemp_4=V2_4*sqr
     Vtemp_5=V2_5*sqr
     Vtemp_6=V2_6*sqr
     Vtemp_7=V2_7*sqr
     Vtemp_8=V2_8*sqr
     Vtemp_9=V2_9*sqr
     Vtemp_10=V2_10*sqr
     Vtemp_11=V2_11*sqr
     Vtemp_12=V2_12*sqr
     Vtemp_13=V2_13*sqr
     Vtemp_14=V2_14*sqr
     Vtemp_15=V2_15*sqr
     Vtemp_16=V2_16*sqr
     Vtemp_17=V2_17*sqr
     Vtemp_18=V2_18*sqr
     Vtemp_19=V2_19*sqr
     Vtemp_20=V2_20*sqr
#
     V5_1+=Vtemp_1
     V5_2+=Vtemp_2
     V5_3+=Vtemp_3
     V5_4+=Vtemp_4
     V5_5+=Vtemp_5
     V5_6+=Vtemp_6
     V5_7+=Vtemp_7
     V5_8+=Vtemp_8
     V5_9+=Vtemp_9
     V5_10+=Vtemp_10
     V5_11+=Vtemp_11
     V5_12+=Vtemp_12
     V5_13+=Vtemp_13
     V5_14+=Vtemp_14
     V5_15+=Vtemp_15
     V5_16+=Vtemp_16
     V5_17+=Vtemp_17
     V5_18+=Vtemp_18
     V5_19+=Vtemp_19
     V5_20+=Vtemp_20
#
#
     etemp2_1=V5_1
     etemp2_2=V5_2
     etemp2_3=V5_3
     etemp2_4=V5_4
     etemp2_5=V5_5
     etemp2_6=V5_6
     etemp2_7=V5_7
     etemp2_8=V5_8
     etemp2_9=V5_9
     etemp2_10=V5_10
     etemp2_11=V5_11
     etemp2_12=V5_12
     etemp2_13=V5_13
     etemp2_14=V5_14
     etemp2_15=V5_15
     etemp2_16=V5_16
     etemp2_17=V5_17
     etemp2_18=V5_18
     etemp2_19=V5_19
     etemp2_20=V5_20
#
     sqr=0.0
     etemp=V3_1*etemp2_1
     sqr+=etemp
     etemp=V3_2*etemp2_2
     sqr+=etemp
     etemp=V3_3*etemp2_3
     sqr+=etemp
     etemp=V3_4*etemp2_4
     sqr+=etemp
     etemp=V3_5*etemp2_5
     sqr+=etemp
     etemp=V3_6*etemp2_6
     sqr+=etemp
     etemp=V3_7*etemp2_7
     sqr+=etemp
     etemp=V3_8*etemp2_8
     sqr+=etemp
     etemp=V3_9*etemp2_9
     sqr+=etemp
     etemp=V3_10*etemp2_10
     sqr+=etemp
     etemp=V3_11*etemp2_11
     sqr+=etemp
     etemp=V3_12*etemp2_12
     sqr+=etemp
     etemp=V3_13*etemp2_13
     sqr+=etemp
     etemp=V3_14*etemp2_14
     sqr+=etemp
     etemp=V3_15*etemp2_15
     sqr+=etemp
     etemp=V3_16*etemp2_16
     sqr+=etemp
     etemp=V3_17*etemp2_17
     sqr+=etemp
     etemp=V3_18*etemp2_18
     sqr+=etemp
     etemp=V3_19*etemp2_19
     sqr+=etemp
     etemp=V3_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V3_1*sqr
     Vtemp_2=V3_2*sqr
     Vtemp_3=V3_3*sqr
     Vtemp_4=V3_4*sqr
     Vtemp_5=V3_5*sqr
     Vtemp_6=V3_6*sqr
     Vtemp_7=V3_7*sqr
     Vtemp_8=V3_8*sqr
     Vtemp_9=V3_9*sqr
     Vtemp_10=V3_10*sqr
     Vtemp_11=V3_11*sqr
     Vtemp_12=V3_12*sqr
     Vtemp_13=V3_13*sqr
     Vtemp_14=V3_14*sqr
     Vtemp_15=V3_15*sqr
     Vtemp_16=V3_16*sqr
     Vtemp_17=V3_17*sqr
     Vtemp_18=V3_18*sqr
     Vtemp_19=V3_19*sqr
     Vtemp_20=V3_20*sqr
#
     V5_1+=Vtemp_1
     V5_2+=Vtemp_2
     V5_3+=Vtemp_3
     V5_4+=Vtemp_4
     V5_5+=Vtemp_5
     V5_6+=Vtemp_6
     V5_7+=Vtemp_7
     V5_8+=Vtemp_8
     V5_9+=Vtemp_9
     V5_10+=Vtemp_10
     V5_11+=Vtemp_11
     V5_12+=Vtemp_12
     V5_13+=Vtemp_13
     V5_14+=Vtemp_14
     V5_15+=Vtemp_15
     V5_16+=Vtemp_16
     V5_17+=Vtemp_17
     V5_18+=Vtemp_18
     V5_19+=Vtemp_19
     V5_20+=Vtemp_20
#
#
     etemp2_1=V5_1
     etemp2_2=V5_2
     etemp2_3=V5_3
     etemp2_4=V5_4
     etemp2_5=V5_5
     etemp2_6=V5_6
     etemp2_7=V5_7
     etemp2_8=V5_8
     etemp2_9=V5_9
     etemp2_10=V5_10
     etemp2_11=V5_11
     etemp2_12=V5_12
     etemp2_13=V5_13
     etemp2_14=V5_14
     etemp2_15=V5_15
     etemp2_16=V5_16
     etemp2_17=V5_17
     etemp2_18=V5_18
     etemp2_19=V5_19
     etemp2_20=V5_20
#
     sqr=0.0
     etemp=V4_1*etemp2_1
     sqr+=etemp
     etemp=V4_2*etemp2_2
     sqr+=etemp
     etemp=V4_3*etemp2_3
     sqr+=etemp
     etemp=V4_4*etemp2_4
     sqr+=etemp
     etemp=V4_5*etemp2_5
     sqr+=etemp
     etemp=V4_6*etemp2_6
     sqr+=etemp
     etemp=V4_7*etemp2_7
     sqr+=etemp
     etemp=V4_8*etemp2_8
     sqr+=etemp
     etemp=V4_9*etemp2_9
     sqr+=etemp
     etemp=V4_10*etemp2_10
     sqr+=etemp
     etemp=V4_11*etemp2_11
     sqr+=etemp
     etemp=V4_12*etemp2_12
     sqr+=etemp
     etemp=V4_13*etemp2_13
     sqr+=etemp
     etemp=V4_14*etemp2_14
     sqr+=etemp
     etemp=V4_15*etemp2_15
     sqr+=etemp
     etemp=V4_16*etemp2_16
     sqr+=etemp
     etemp=V4_17*etemp2_17
     sqr+=etemp
     etemp=V4_18*etemp2_18
     sqr+=etemp
     etemp=V4_19*etemp2_19
     sqr+=etemp
     etemp=V4_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V4_1*sqr
     Vtemp_2=V4_2*sqr
     Vtemp_3=V4_3*sqr
     Vtemp_4=V4_4*sqr
     Vtemp_5=V4_5*sqr
     Vtemp_6=V4_6*sqr
     Vtemp_7=V4_7*sqr
     Vtemp_8=V4_8*sqr
     Vtemp_9=V4_9*sqr
     Vtemp_10=V4_10*sqr
     Vtemp_11=V4_11*sqr
     Vtemp_12=V4_12*sqr
     Vtemp_13=V4_13*sqr
     Vtemp_14=V4_14*sqr
     Vtemp_15=V4_15*sqr
     Vtemp_16=V4_16*sqr
     Vtemp_17=V4_17*sqr
     Vtemp_18=V4_18*sqr
     Vtemp_19=V4_19*sqr
     Vtemp_20=V4_20*sqr
#
     V5_1+=Vtemp_1
     V5_2+=Vtemp_2
     V5_3+=Vtemp_3
     V5_4+=Vtemp_4
     V5_5+=Vtemp_5
     V5_6+=Vtemp_6
     V5_7+=Vtemp_7
     V5_8+=Vtemp_8
     V5_9+=Vtemp_9
     V5_10+=Vtemp_10
     V5_11+=Vtemp_11
     V5_12+=Vtemp_12
     V5_13+=Vtemp_13
     V5_14+=Vtemp_14
     V5_15+=Vtemp_15
     V5_16+=Vtemp_16
     V5_17+=Vtemp_17
     V5_18+=Vtemp_18
     V5_19+=Vtemp_19
     V5_20+=Vtemp_20
#
#
     Vtemp_1=V5_1
     Vtemp_2=V5_2
     Vtemp_3=V5_3
     Vtemp_4=V5_4
     Vtemp_5=V5_5
     Vtemp_6=V5_6
     Vtemp_7=V5_7
     Vtemp_8=V5_8
     Vtemp_9=V5_9
     Vtemp_10=V5_10
     Vtemp_11=V5_11
     Vtemp_12=V5_12
     Vtemp_13=V5_13
     Vtemp_14=V5_14
     Vtemp_15=V5_15
     Vtemp_16=V5_16
     Vtemp_17=V5_17
     Vtemp_18=V5_18
     Vtemp_19=V5_19
     Vtemp_20=V5_20
#
     sqr=0.0
#
     etemp=V5_1*Vtemp_1
     sqr+=etemp
     etemp=V5_2*Vtemp_2
     sqr+=etemp
     etemp=V5_3*Vtemp_3
     sqr+=etemp
     etemp=V5_4*Vtemp_4
     sqr+=etemp
     etemp=V5_5*Vtemp_5
     sqr+=etemp
     etemp=V5_6*Vtemp_6
     sqr+=etemp
     etemp=V5_7*Vtemp_7
     sqr+=etemp
     etemp=V5_8*Vtemp_8
     sqr+=etemp
     etemp=V5_9*Vtemp_9
     sqr+=etemp
     etemp=V5_10*Vtemp_10
     sqr+=etemp
     etemp=V5_11*Vtemp_11
     sqr+=etemp
     etemp=V5_12*Vtemp_12
     sqr+=etemp
     etemp=V5_13*Vtemp_13
     sqr+=etemp
     etemp=V5_14*Vtemp_14
     sqr+=etemp
     etemp=V5_15*Vtemp_15
     sqr+=etemp
     etemp=V5_16*Vtemp_16
     sqr+=etemp
     etemp=V5_17*Vtemp_17
     sqr+=etemp
     etemp=V5_18*Vtemp_18
     sqr+=etemp
     etemp=V5_19*Vtemp_19
     sqr+=etemp
     etemp=V5_20*Vtemp_20
     sqr+=etemp
#
       exponent=0.5
#       execute square_root sqr exponent
#       sqr2=1.0/sqr
     execute norm_fac sqr exponent
     sqr2=sqr
#
     V5_1*=sqr2
     V5_2*=sqr2
     V5_3*=sqr2
     V5_4*=sqr2
     V5_5*=sqr2
     V5_6*=sqr2
     V5_7*=sqr2
     V5_8*=sqr2
     V5_9*=sqr2
     V5_10*=sqr2
     V5_11*=sqr2
     V5_12*=sqr2
     V5_13*=sqr2
     V5_14*=sqr2
     V5_15*=sqr2
     V5_16*=sqr2
     V5_17*=sqr2
     V5_18*=sqr2
     V5_19*=sqr2
     V5_20*=sqr2
#
#------6 vectors -------------------------------
#
     etemp2_1=V6_1
     etemp2_2=V6_2
     etemp2_3=V6_3
     etemp2_4=V6_4
     etemp2_5=V6_5
     etemp2_6=V6_6
     etemp2_7=V6_7
     etemp2_8=V6_8
     etemp2_9=V6_9
     etemp2_10=V6_10
     etemp2_11=V6_11
     etemp2_12=V6_12
     etemp2_13=V6_13
     etemp2_14=V6_14
     etemp2_15=V6_15
     etemp2_16=V6_16
     etemp2_17=V6_17
     etemp2_18=V6_18
     etemp2_19=V6_19
     etemp2_20=V6_20
#
     sqr=0.0
     etemp=V1_1*etemp2_1
     sqr+=etemp
     etemp=V1_2*etemp2_2
     sqr+=etemp
     etemp=V1_3*etemp2_3
     sqr+=etemp
     etemp=V1_4*etemp2_4
     sqr+=etemp
     etemp=V1_5*etemp2_5
     sqr+=etemp
     etemp=V1_6*etemp2_6
     sqr+=etemp
     etemp=V1_7*etemp2_7
     sqr+=etemp
     etemp=V1_8*etemp2_8
     sqr+=etemp
     etemp=V1_9*etemp2_9
     sqr+=etemp
     etemp=V1_10*etemp2_10
     sqr+=etemp
     etemp=V1_11*etemp2_11
     sqr+=etemp
     etemp=V1_12*etemp2_12
     sqr+=etemp
     etemp=V1_13*etemp2_13
     sqr+=etemp
     etemp=V1_14*etemp2_14
     sqr+=etemp
     etemp=V1_15*etemp2_15
     sqr+=etemp
     etemp=V1_16*etemp2_16
     sqr+=etemp
     etemp=V1_17*etemp2_17
     sqr+=etemp
     etemp=V1_18*etemp2_18
     sqr+=etemp
     etemp=V1_19*etemp2_19
     sqr+=etemp
     etemp=V1_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V1_1*sqr
     Vtemp_2=V1_2*sqr
     Vtemp_3=V1_3*sqr
     Vtemp_4=V1_4*sqr
     Vtemp_5=V1_5*sqr
     Vtemp_6=V1_6*sqr
     Vtemp_7=V1_7*sqr
     Vtemp_8=V1_8*sqr
     Vtemp_9=V1_9*sqr
     Vtemp_10=V1_10*sqr
     Vtemp_11=V1_11*sqr
     Vtemp_12=V1_12*sqr
     Vtemp_13=V1_13*sqr
     Vtemp_14=V1_14*sqr
     Vtemp_15=V1_15*sqr
     Vtemp_16=V1_16*sqr
     Vtemp_17=V1_17*sqr
     Vtemp_18=V1_18*sqr
     Vtemp_19=V1_19*sqr
     Vtemp_20=V1_20*sqr
#
     V6_1+=Vtemp_1
     V6_2+=Vtemp_2
     V6_3+=Vtemp_3
     V6_4+=Vtemp_4
     V6_5+=Vtemp_5
     V6_6+=Vtemp_6
     V6_7+=Vtemp_7
     V6_8+=Vtemp_8
     V6_9+=Vtemp_9
     V6_10+=Vtemp_10
     V6_11+=Vtemp_11
     V6_12+=Vtemp_12
     V6_13+=Vtemp_13
     V6_14+=Vtemp_14
     V6_15+=Vtemp_15
     V6_16+=Vtemp_16
     V6_17+=Vtemp_17
     V6_18+=Vtemp_18
     V6_19+=Vtemp_19
     V6_20+=Vtemp_20
#
#
     etemp2_1=V6_1
     etemp2_2=V6_2
     etemp2_3=V6_3
     etemp2_4=V6_4
     etemp2_5=V6_5
     etemp2_6=V6_6
     etemp2_7=V6_7
     etemp2_8=V6_8
     etemp2_9=V6_9
     etemp2_10=V6_10
     etemp2_11=V6_11
     etemp2_12=V6_12
     etemp2_13=V6_13
     etemp2_14=V6_14
     etemp2_15=V6_15
     etemp2_16=V6_16
     etemp2_17=V6_17
     etemp2_18=V6_18
     etemp2_19=V6_19
     etemp2_20=V6_20
#
     sqr=0.0
     etemp=V2_1*etemp2_1
     sqr+=etemp
     etemp=V2_2*etemp2_2
     sqr+=etemp
     etemp=V2_3*etemp2_3
     sqr+=etemp
     etemp=V2_4*etemp2_4
     sqr+=etemp
     etemp=V2_5*etemp2_5
     sqr+=etemp
     etemp=V2_6*etemp2_6
     sqr+=etemp
     etemp=V2_7*etemp2_7
     sqr+=etemp
     etemp=V2_8*etemp2_8
     sqr+=etemp
     etemp=V2_9*etemp2_9
     sqr+=etemp
     etemp=V2_10*etemp2_10
     sqr+=etemp
     etemp=V2_11*etemp2_11
     sqr+=etemp
     etemp=V2_12*etemp2_12
     sqr+=etemp
     etemp=V2_13*etemp2_13
     sqr+=etemp
     etemp=V2_14*etemp2_14
     sqr+=etemp
     etemp=V2_15*etemp2_15
     sqr+=etemp
     etemp=V2_16*etemp2_16
     sqr+=etemp
     etemp=V2_17*etemp2_17
     sqr+=etemp
     etemp=V2_18*etemp2_18
     sqr+=etemp
     etemp=V2_19*etemp2_19
     sqr+=etemp
     etemp=V2_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V2_1*sqr
     Vtemp_2=V2_2*sqr
     Vtemp_3=V2_3*sqr
     Vtemp_4=V2_4*sqr
     Vtemp_5=V2_5*sqr
     Vtemp_6=V2_6*sqr
     Vtemp_7=V2_7*sqr
     Vtemp_8=V2_8*sqr
     Vtemp_9=V2_9*sqr
     Vtemp_10=V2_10*sqr
     Vtemp_11=V2_11*sqr
     Vtemp_12=V2_12*sqr
     Vtemp_13=V2_13*sqr
     Vtemp_14=V2_14*sqr
     Vtemp_15=V2_15*sqr
     Vtemp_16=V2_16*sqr
     Vtemp_17=V2_17*sqr
     Vtemp_18=V2_18*sqr
     Vtemp_19=V2_19*sqr
     Vtemp_20=V2_20*sqr
#
     V6_1+=Vtemp_1
     V6_2+=Vtemp_2
     V6_3+=Vtemp_3
     V6_4+=Vtemp_4
     V6_5+=Vtemp_5
     V6_6+=Vtemp_6
     V6_7+=Vtemp_7
     V6_8+=Vtemp_8
     V6_9+=Vtemp_9
     V6_10+=Vtemp_10
     V6_11+=Vtemp_11
     V6_12+=Vtemp_12
     V6_13+=Vtemp_13
     V6_14+=Vtemp_14
     V6_15+=Vtemp_15
     V6_16+=Vtemp_16
     V6_17+=Vtemp_17
     V6_18+=Vtemp_18
     V6_19+=Vtemp_19
     V6_20+=Vtemp_20
#
#
     etemp2_1=V6_1
     etemp2_2=V6_2
     etemp2_3=V6_3
     etemp2_4=V6_4
     etemp2_5=V6_5
     etemp2_6=V6_6
     etemp2_7=V6_7
     etemp2_8=V6_8
     etemp2_9=V6_9
     etemp2_10=V6_10
     etemp2_11=V6_11
     etemp2_12=V6_12
     etemp2_13=V6_13
     etemp2_14=V6_14
     etemp2_15=V6_15
     etemp2_16=V6_16
     etemp2_17=V6_17
     etemp2_18=V6_18
     etemp2_19=V6_19
     etemp2_20=V6_20
#
     sqr=0.0
     etemp=V3_1*etemp2_1
     sqr+=etemp
     etemp=V3_2*etemp2_2
     sqr+=etemp
     etemp=V3_3*etemp2_3
     sqr+=etemp
     etemp=V3_4*etemp2_4
     sqr+=etemp
     etemp=V3_5*etemp2_5
     sqr+=etemp
     etemp=V3_6*etemp2_6
     sqr+=etemp
     etemp=V3_7*etemp2_7
     sqr+=etemp
     etemp=V3_8*etemp2_8
     sqr+=etemp
     etemp=V3_9*etemp2_9
     sqr+=etemp
     etemp=V3_10*etemp2_10
     sqr+=etemp
     etemp=V3_11*etemp2_11
     sqr+=etemp
     etemp=V3_12*etemp2_12
     sqr+=etemp
     etemp=V3_13*etemp2_13
     sqr+=etemp
     etemp=V3_14*etemp2_14
     sqr+=etemp
     etemp=V3_15*etemp2_15
     sqr+=etemp
     etemp=V3_16*etemp2_16
     sqr+=etemp
     etemp=V3_17*etemp2_17
     sqr+=etemp
     etemp=V3_18*etemp2_18
     sqr+=etemp
     etemp=V3_19*etemp2_19
     sqr+=etemp
     etemp=V3_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V3_1*sqr
     Vtemp_2=V3_2*sqr
     Vtemp_3=V3_3*sqr
     Vtemp_4=V3_4*sqr
     Vtemp_5=V3_5*sqr
     Vtemp_6=V3_6*sqr
     Vtemp_7=V3_7*sqr
     Vtemp_8=V3_8*sqr
     Vtemp_9=V3_9*sqr
     Vtemp_10=V3_10*sqr
     Vtemp_11=V3_11*sqr
     Vtemp_12=V3_12*sqr
     Vtemp_13=V3_13*sqr
     Vtemp_14=V3_14*sqr
     Vtemp_15=V3_15*sqr
     Vtemp_16=V3_16*sqr
     Vtemp_17=V3_17*sqr
     Vtemp_18=V3_18*sqr
     Vtemp_19=V3_19*sqr
     Vtemp_20=V3_20*sqr
#
     V6_1+=Vtemp_1
     V6_2+=Vtemp_2
     V6_3+=Vtemp_3
     V6_4+=Vtemp_4
     V6_5+=Vtemp_5
     V6_6+=Vtemp_6
     V6_7+=Vtemp_7
     V6_8+=Vtemp_8
     V6_9+=Vtemp_9
     V6_10+=Vtemp_10
     V6_11+=Vtemp_11
     V6_12+=Vtemp_12
     V6_13+=Vtemp_13
     V6_14+=Vtemp_14
     V6_15+=Vtemp_15
     V6_16+=Vtemp_16
     V6_17+=Vtemp_17
     V6_18+=Vtemp_18
     V6_19+=Vtemp_19
     V6_20+=Vtemp_20
#
#
     etemp2_1=V6_1
     etemp2_2=V6_2
     etemp2_3=V6_3
     etemp2_4=V6_4
     etemp2_5=V6_5
     etemp2_6=V6_6
     etemp2_7=V6_7
     etemp2_8=V6_8
     etemp2_9=V6_9
     etemp2_10=V6_10
     etemp2_11=V6_11
     etemp2_12=V6_12
     etemp2_13=V6_13
     etemp2_14=V6_14
     etemp2_15=V6_15
     etemp2_16=V6_16
     etemp2_17=V6_17
     etemp2_18=V6_18
     etemp2_19=V6_19
     etemp2_20=V6_20
#
     sqr=0.0
     etemp=V4_1*etemp2_1
     sqr+=etemp
     etemp=V4_2*etemp2_2
     sqr+=etemp
     etemp=V4_3*etemp2_3
     sqr+=etemp
     etemp=V4_4*etemp2_4
     sqr+=etemp
     etemp=V4_5*etemp2_5
     sqr+=etemp
     etemp=V4_6*etemp2_6
     sqr+=etemp
     etemp=V4_7*etemp2_7
     sqr+=etemp
     etemp=V4_8*etemp2_8
     sqr+=etemp
     etemp=V4_9*etemp2_9
     sqr+=etemp
     etemp=V4_10*etemp2_10
     sqr+=etemp
     etemp=V4_11*etemp2_11
     sqr+=etemp
     etemp=V4_12*etemp2_12
     sqr+=etemp
     etemp=V4_13*etemp2_13
     sqr+=etemp
     etemp=V4_14*etemp2_14
     sqr+=etemp
     etemp=V4_15*etemp2_15
     sqr+=etemp
     etemp=V4_16*etemp2_16
     sqr+=etemp
     etemp=V4_17*etemp2_17
     sqr+=etemp
     etemp=V4_18*etemp2_18
     sqr+=etemp
     etemp=V4_19*etemp2_19
     sqr+=etemp
     etemp=V4_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V4_1*sqr
     Vtemp_2=V4_2*sqr
     Vtemp_3=V4_3*sqr
     Vtemp_4=V4_4*sqr
     Vtemp_5=V4_5*sqr
     Vtemp_6=V4_6*sqr
     Vtemp_7=V4_7*sqr
     Vtemp_8=V4_8*sqr
     Vtemp_9=V4_9*sqr
     Vtemp_10=V4_10*sqr
     Vtemp_11=V4_11*sqr
     Vtemp_12=V4_12*sqr
     Vtemp_13=V4_13*sqr
     Vtemp_14=V4_14*sqr
     Vtemp_15=V4_15*sqr
     Vtemp_16=V4_16*sqr
     Vtemp_17=V4_17*sqr
     Vtemp_18=V4_18*sqr
     Vtemp_19=V4_19*sqr
     Vtemp_20=V4_20*sqr
#
     V6_1+=Vtemp_1
     V6_2+=Vtemp_2
     V6_3+=Vtemp_3
     V6_4+=Vtemp_4
     V6_5+=Vtemp_5
     V6_6+=Vtemp_6
     V6_7+=Vtemp_7
     V6_8+=Vtemp_8
     V6_9+=Vtemp_9
     V6_10+=Vtemp_10
     V6_11+=Vtemp_11
     V6_12+=Vtemp_12
     V6_13+=Vtemp_13
     V6_14+=Vtemp_14
     V6_15+=Vtemp_15
     V6_16+=Vtemp_16
     V6_17+=Vtemp_17
     V6_18+=Vtemp_18
     V6_19+=Vtemp_19
     V6_20+=Vtemp_20
#
#
     etemp2_1=V6_1
     etemp2_2=V6_2
     etemp2_3=V6_3
     etemp2_4=V6_4
     etemp2_5=V6_5
     etemp2_6=V6_6
     etemp2_7=V6_7
     etemp2_8=V6_8
     etemp2_9=V6_9
     etemp2_10=V6_10
     etemp2_11=V6_11
     etemp2_12=V6_12
     etemp2_13=V6_13
     etemp2_14=V6_14
     etemp2_15=V6_15
     etemp2_16=V6_16
     etemp2_17=V6_17
     etemp2_18=V6_18
     etemp2_19=V6_19
     etemp2_20=V6_20
#
     sqr=0.0
     etemp=V5_1*etemp2_1
     sqr+=etemp
     etemp=V5_2*etemp2_2
     sqr+=etemp
     etemp=V5_3*etemp2_3
     sqr+=etemp
     etemp=V5_4*etemp2_4
     sqr+=etemp
     etemp=V5_5*etemp2_5
     sqr+=etemp
     etemp=V5_6*etemp2_6
     sqr+=etemp
     etemp=V5_7*etemp2_7
     sqr+=etemp
     etemp=V5_8*etemp2_8
     sqr+=etemp
     etemp=V5_9*etemp2_9
     sqr+=etemp
     etemp=V5_10*etemp2_10
     sqr+=etemp
     etemp=V5_11*etemp2_11
     sqr+=etemp
     etemp=V5_12*etemp2_12
     sqr+=etemp
     etemp=V5_13*etemp2_13
     sqr+=etemp
     etemp=V5_14*etemp2_14
     sqr+=etemp
     etemp=V5_15*etemp2_15
     sqr+=etemp
     etemp=V5_16*etemp2_16
     sqr+=etemp
     etemp=V5_17*etemp2_17
     sqr+=etemp
     etemp=V5_18*etemp2_18
     sqr+=etemp
     etemp=V5_19*etemp2_19
     sqr+=etemp
     etemp=V5_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V5_1*sqr
     Vtemp_2=V5_2*sqr
     Vtemp_3=V5_3*sqr
     Vtemp_4=V5_4*sqr
     Vtemp_5=V5_5*sqr
     Vtemp_6=V5_6*sqr
     Vtemp_7=V5_7*sqr
     Vtemp_8=V5_8*sqr
     Vtemp_9=V5_9*sqr
     Vtemp_10=V5_10*sqr
     Vtemp_11=V5_11*sqr
     Vtemp_12=V5_12*sqr
     Vtemp_13=V5_13*sqr
     Vtemp_14=V5_14*sqr
     Vtemp_15=V5_15*sqr
     Vtemp_16=V5_16*sqr
     Vtemp_17=V5_17*sqr
     Vtemp_18=V5_18*sqr
     Vtemp_19=V5_19*sqr
     Vtemp_20=V5_20*sqr
#
     V6_1+=Vtemp_1
     V6_2+=Vtemp_2
     V6_3+=Vtemp_3
     V6_4+=Vtemp_4
     V6_5+=Vtemp_5
     V6_6+=Vtemp_6
     V6_7+=Vtemp_7
     V6_8+=Vtemp_8
     V6_9+=Vtemp_9
     V6_10+=Vtemp_10
     V6_11+=Vtemp_11
     V6_12+=Vtemp_12
     V6_13+=Vtemp_13
     V6_14+=Vtemp_14
     V6_15+=Vtemp_15
     V6_16+=Vtemp_16
     V6_17+=Vtemp_17
     V6_18+=Vtemp_18
     V6_19+=Vtemp_19
     V6_20+=Vtemp_20
#
#
     Vtemp_1=V6_1
     Vtemp_2=V6_2
     Vtemp_3=V6_3
     Vtemp_4=V6_4
     Vtemp_5=V6_5
     Vtemp_6=V6_6
     Vtemp_7=V6_7
     Vtemp_8=V6_8
     Vtemp_9=V6_9
     Vtemp_10=V6_10
     Vtemp_11=V6_11
     Vtemp_12=V6_12
     Vtemp_13=V6_13
     Vtemp_14=V6_14
     Vtemp_15=V6_15
     Vtemp_16=V6_16
     Vtemp_17=V6_17
     Vtemp_18=V6_18
     Vtemp_19=V6_19
     Vtemp_20=V6_20
#
     sqr=0.0
#
     etemp=V6_1*Vtemp_1
     sqr+=etemp
     etemp=V6_2*Vtemp_2
     sqr+=etemp
     etemp=V6_3*Vtemp_3
     sqr+=etemp
     etemp=V6_4*Vtemp_4
     sqr+=etemp
     etemp=V6_5*Vtemp_5
     sqr+=etemp
     etemp=V6_6*Vtemp_6
     sqr+=etemp
     etemp=V6_7*Vtemp_7
     sqr+=etemp
     etemp=V6_8*Vtemp_8
     sqr+=etemp
     etemp=V6_9*Vtemp_9
     sqr+=etemp
     etemp=V6_10*Vtemp_10
     sqr+=etemp
     etemp=V6_11*Vtemp_11
     sqr+=etemp
     etemp=V6_12*Vtemp_12
     sqr+=etemp
     etemp=V6_13*Vtemp_13
     sqr+=etemp
     etemp=V6_14*Vtemp_14
     sqr+=etemp
     etemp=V6_15*Vtemp_15
     sqr+=etemp
     etemp=V6_16*Vtemp_16
     sqr+=etemp
     etemp=V6_17*Vtemp_17
     sqr+=etemp
     etemp=V6_18*Vtemp_18
     sqr+=etemp
     etemp=V6_19*Vtemp_19
     sqr+=etemp
     etemp=V6_20*Vtemp_20
     sqr+=etemp
#
       exponent=0.5
#       execute square_root sqr exponent
#       sqr2=1.0/sqr
     execute norm_fac sqr exponent
     sqr2=sqr
#
     V6_1*=sqr2
     V6_2*=sqr2
     V6_3*=sqr2
     V6_4*=sqr2
     V6_5*=sqr2
     V6_6*=sqr2
     V6_7*=sqr2
     V6_8*=sqr2
     V6_9*=sqr2
     V6_10*=sqr2
     V6_11*=sqr2
     V6_12*=sqr2
     V6_13*=sqr2
     V6_14*=sqr2
     V6_15*=sqr2
     V6_16*=sqr2
     V6_17*=sqr2
     V6_18*=sqr2
     V6_19*=sqr2
     V6_20*=sqr2
#
#------7 vectors -------------------------------
#
     etemp2_1=V7_1
     etemp2_2=V7_2
     etemp2_3=V7_3
     etemp2_4=V7_4
     etemp2_5=V7_5
     etemp2_6=V7_6
     etemp2_7=V7_7
     etemp2_8=V7_8
     etemp2_9=V7_9
     etemp2_10=V7_10
     etemp2_11=V7_11
     etemp2_12=V7_12
     etemp2_13=V7_13
     etemp2_14=V7_14
     etemp2_15=V7_15
     etemp2_16=V7_16
     etemp2_17=V7_17
     etemp2_18=V7_18
     etemp2_19=V7_19
     etemp2_20=V7_20
#
     sqr=0.0
     etemp=V1_1*etemp2_1
     sqr+=etemp
     etemp=V1_2*etemp2_2
     sqr+=etemp
     etemp=V1_3*etemp2_3
     sqr+=etemp
     etemp=V1_4*etemp2_4
     sqr+=etemp
     etemp=V1_5*etemp2_5
     sqr+=etemp
     etemp=V1_6*etemp2_6
     sqr+=etemp
     etemp=V1_7*etemp2_7
     sqr+=etemp
     etemp=V1_8*etemp2_8
     sqr+=etemp
     etemp=V1_9*etemp2_9
     sqr+=etemp
     etemp=V1_10*etemp2_10
     sqr+=etemp
     etemp=V1_11*etemp2_11
     sqr+=etemp
     etemp=V1_12*etemp2_12
     sqr+=etemp
     etemp=V1_13*etemp2_13
     sqr+=etemp
     etemp=V1_14*etemp2_14
     sqr+=etemp
     etemp=V1_15*etemp2_15
     sqr+=etemp
     etemp=V1_16*etemp2_16
     sqr+=etemp
     etemp=V1_17*etemp2_17
     sqr+=etemp
     etemp=V1_18*etemp2_18
     sqr+=etemp
     etemp=V1_19*etemp2_19
     sqr+=etemp
     etemp=V1_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V1_1*sqr
     Vtemp_2=V1_2*sqr
     Vtemp_3=V1_3*sqr
     Vtemp_4=V1_4*sqr
     Vtemp_5=V1_5*sqr
     Vtemp_6=V1_6*sqr
     Vtemp_7=V1_7*sqr
     Vtemp_8=V1_8*sqr
     Vtemp_9=V1_9*sqr
     Vtemp_10=V1_10*sqr
     Vtemp_11=V1_11*sqr
     Vtemp_12=V1_12*sqr
     Vtemp_13=V1_13*sqr
     Vtemp_14=V1_14*sqr
     Vtemp_15=V1_15*sqr
     Vtemp_16=V1_16*sqr
     Vtemp_17=V1_17*sqr
     Vtemp_18=V1_18*sqr
     Vtemp_19=V1_19*sqr
     Vtemp_20=V1_20*sqr
#
     V7_1+=Vtemp_1
     V7_2+=Vtemp_2
     V7_3+=Vtemp_3
     V7_4+=Vtemp_4
     V7_5+=Vtemp_5
     V7_6+=Vtemp_6
     V7_7+=Vtemp_7
     V7_8+=Vtemp_8
     V7_9+=Vtemp_9
     V7_10+=Vtemp_10
     V7_11+=Vtemp_11
     V7_12+=Vtemp_12
     V7_13+=Vtemp_13
     V7_14+=Vtemp_14
     V7_15+=Vtemp_15
     V7_16+=Vtemp_16
     V7_17+=Vtemp_17
     V7_18+=Vtemp_18
     V7_19+=Vtemp_19
     V7_20+=Vtemp_20
#
#
     etemp2_1=V7_1
     etemp2_2=V7_2
     etemp2_3=V7_3
     etemp2_4=V7_4
     etemp2_5=V7_5
     etemp2_6=V7_6
     etemp2_7=V7_7
     etemp2_8=V7_8
     etemp2_9=V7_9
     etemp2_10=V7_10
     etemp2_11=V7_11
     etemp2_12=V7_12
     etemp2_13=V7_13
     etemp2_14=V7_14
     etemp2_15=V7_15
     etemp2_16=V7_16
     etemp2_17=V7_17
     etemp2_18=V7_18
     etemp2_19=V7_19
     etemp2_20=V7_20
#
     sqr=0.0
     etemp=V2_1*etemp2_1
     sqr+=etemp
     etemp=V2_2*etemp2_2
     sqr+=etemp
     etemp=V2_3*etemp2_3
     sqr+=etemp
     etemp=V2_4*etemp2_4
     sqr+=etemp
     etemp=V2_5*etemp2_5
     sqr+=etemp
     etemp=V2_6*etemp2_6
     sqr+=etemp
     etemp=V2_7*etemp2_7
     sqr+=etemp
     etemp=V2_8*etemp2_8
     sqr+=etemp
     etemp=V2_9*etemp2_9
     sqr+=etemp
     etemp=V2_10*etemp2_10
     sqr+=etemp
     etemp=V2_11*etemp2_11
     sqr+=etemp
     etemp=V2_12*etemp2_12
     sqr+=etemp
     etemp=V2_13*etemp2_13
     sqr+=etemp
     etemp=V2_14*etemp2_14
     sqr+=etemp
     etemp=V2_15*etemp2_15
     sqr+=etemp
     etemp=V2_16*etemp2_16
     sqr+=etemp
     etemp=V2_17*etemp2_17
     sqr+=etemp
     etemp=V2_18*etemp2_18
     sqr+=etemp
     etemp=V2_19*etemp2_19
     sqr+=etemp
     etemp=V2_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V2_1*sqr
     Vtemp_2=V2_2*sqr
     Vtemp_3=V2_3*sqr
     Vtemp_4=V2_4*sqr
     Vtemp_5=V2_5*sqr
     Vtemp_6=V2_6*sqr
     Vtemp_7=V2_7*sqr
     Vtemp_8=V2_8*sqr
     Vtemp_9=V2_9*sqr
     Vtemp_10=V2_10*sqr
     Vtemp_11=V2_11*sqr
     Vtemp_12=V2_12*sqr
     Vtemp_13=V2_13*sqr
     Vtemp_14=V2_14*sqr
     Vtemp_15=V2_15*sqr
     Vtemp_16=V2_16*sqr
     Vtemp_17=V2_17*sqr
     Vtemp_18=V2_18*sqr
     Vtemp_19=V2_19*sqr
     Vtemp_20=V2_20*sqr
#
     V7_1+=Vtemp_1
     V7_2+=Vtemp_2
     V7_3+=Vtemp_3
     V7_4+=Vtemp_4
     V7_5+=Vtemp_5
     V7_6+=Vtemp_6
     V7_7+=Vtemp_7
     V7_8+=Vtemp_8
     V7_9+=Vtemp_9
     V7_10+=Vtemp_10
     V7_11+=Vtemp_11
     V7_12+=Vtemp_12
     V7_13+=Vtemp_13
     V7_14+=Vtemp_14
     V7_15+=Vtemp_15
     V7_16+=Vtemp_16
     V7_17+=Vtemp_17
     V7_18+=Vtemp_18
     V7_19+=Vtemp_19
     V7_20+=Vtemp_20
#
#
     etemp2_1=V7_1
     etemp2_2=V7_2
     etemp2_3=V7_3
     etemp2_4=V7_4
     etemp2_5=V7_5
     etemp2_6=V7_6
     etemp2_7=V7_7
     etemp2_8=V7_8
     etemp2_9=V7_9
     etemp2_10=V7_10
     etemp2_11=V7_11
     etemp2_12=V7_12
     etemp2_13=V7_13
     etemp2_14=V7_14
     etemp2_15=V7_15
     etemp2_16=V7_16
     etemp2_17=V7_17
     etemp2_18=V7_18
     etemp2_19=V7_19
     etemp2_20=V7_20
#
     sqr=0.0
     etemp=V3_1*etemp2_1
     sqr+=etemp
     etemp=V3_2*etemp2_2
     sqr+=etemp
     etemp=V3_3*etemp2_3
     sqr+=etemp
     etemp=V3_4*etemp2_4
     sqr+=etemp
     etemp=V3_5*etemp2_5
     sqr+=etemp
     etemp=V3_6*etemp2_6
     sqr+=etemp
     etemp=V3_7*etemp2_7
     sqr+=etemp
     etemp=V3_8*etemp2_8
     sqr+=etemp
     etemp=V3_9*etemp2_9
     sqr+=etemp
     etemp=V3_10*etemp2_10
     sqr+=etemp
     etemp=V3_11*etemp2_11
     sqr+=etemp
     etemp=V3_12*etemp2_12
     sqr+=etemp
     etemp=V3_13*etemp2_13
     sqr+=etemp
     etemp=V3_14*etemp2_14
     sqr+=etemp
     etemp=V3_15*etemp2_15
     sqr+=etemp
     etemp=V3_16*etemp2_16
     sqr+=etemp
     etemp=V3_17*etemp2_17
     sqr+=etemp
     etemp=V3_18*etemp2_18
     sqr+=etemp
     etemp=V3_19*etemp2_19
     sqr+=etemp
     etemp=V3_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V3_1*sqr
     Vtemp_2=V3_2*sqr
     Vtemp_3=V3_3*sqr
     Vtemp_4=V3_4*sqr
     Vtemp_5=V3_5*sqr
     Vtemp_6=V3_6*sqr
     Vtemp_7=V3_7*sqr
     Vtemp_8=V3_8*sqr
     Vtemp_9=V3_9*sqr
     Vtemp_10=V3_10*sqr
     Vtemp_11=V3_11*sqr
     Vtemp_12=V3_12*sqr
     Vtemp_13=V3_13*sqr
     Vtemp_14=V3_14*sqr
     Vtemp_15=V3_15*sqr
     Vtemp_16=V3_16*sqr
     Vtemp_17=V3_17*sqr
     Vtemp_18=V3_18*sqr
     Vtemp_19=V3_19*sqr
     Vtemp_20=V3_20*sqr
#
     V7_1+=Vtemp_1
     V7_2+=Vtemp_2
     V7_3+=Vtemp_3
     V7_4+=Vtemp_4
     V7_5+=Vtemp_5
     V7_6+=Vtemp_6
     V7_7+=Vtemp_7
     V7_8+=Vtemp_8
     V7_9+=Vtemp_9
     V7_10+=Vtemp_10
     V7_11+=Vtemp_11
     V7_12+=Vtemp_12
     V7_13+=Vtemp_13
     V7_14+=Vtemp_14
     V7_15+=Vtemp_15
     V7_16+=Vtemp_16
     V7_17+=Vtemp_17
     V7_18+=Vtemp_18
     V7_19+=Vtemp_19
     V7_20+=Vtemp_20
#
#
     etemp2_1=V7_1
     etemp2_2=V7_2
     etemp2_3=V7_3
     etemp2_4=V7_4
     etemp2_5=V7_5
     etemp2_6=V7_6
     etemp2_7=V7_7
     etemp2_8=V7_8
     etemp2_9=V7_9
     etemp2_10=V7_10
     etemp2_11=V7_11
     etemp2_12=V7_12
     etemp2_13=V7_13
     etemp2_14=V7_14
     etemp2_15=V7_15
     etemp2_16=V7_16
     etemp2_17=V7_17
     etemp2_18=V7_18
     etemp2_19=V7_19
     etemp2_20=V7_20
#
     sqr=0.0
     etemp=V4_1*etemp2_1
     sqr+=etemp
     etemp=V4_2*etemp2_2
     sqr+=etemp
     etemp=V4_3*etemp2_3
     sqr+=etemp
     etemp=V4_4*etemp2_4
     sqr+=etemp
     etemp=V4_5*etemp2_5
     sqr+=etemp
     etemp=V4_6*etemp2_6
     sqr+=etemp
     etemp=V4_7*etemp2_7
     sqr+=etemp
     etemp=V4_8*etemp2_8
     sqr+=etemp
     etemp=V4_9*etemp2_9
     sqr+=etemp
     etemp=V4_10*etemp2_10
     sqr+=etemp
     etemp=V4_11*etemp2_11
     sqr+=etemp
     etemp=V4_12*etemp2_12
     sqr+=etemp
     etemp=V4_13*etemp2_13
     sqr+=etemp
     etemp=V4_14*etemp2_14
     sqr+=etemp
     etemp=V4_15*etemp2_15
     sqr+=etemp
     etemp=V4_16*etemp2_16
     sqr+=etemp
     etemp=V4_17*etemp2_17
     sqr+=etemp
     etemp=V4_18*etemp2_18
     sqr+=etemp
     etemp=V4_19*etemp2_19
     sqr+=etemp
     etemp=V4_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V4_1*sqr
     Vtemp_2=V4_2*sqr
     Vtemp_3=V4_3*sqr
     Vtemp_4=V4_4*sqr
     Vtemp_5=V4_5*sqr
     Vtemp_6=V4_6*sqr
     Vtemp_7=V4_7*sqr
     Vtemp_8=V4_8*sqr
     Vtemp_9=V4_9*sqr
     Vtemp_10=V4_10*sqr
     Vtemp_11=V4_11*sqr
     Vtemp_12=V4_12*sqr
     Vtemp_13=V4_13*sqr
     Vtemp_14=V4_14*sqr
     Vtemp_15=V4_15*sqr
     Vtemp_16=V4_16*sqr
     Vtemp_17=V4_17*sqr
     Vtemp_18=V4_18*sqr
     Vtemp_19=V4_19*sqr
     Vtemp_20=V4_20*sqr
#
     V7_1+=Vtemp_1
     V7_2+=Vtemp_2
     V7_3+=Vtemp_3
     V7_4+=Vtemp_4
     V7_5+=Vtemp_5
     V7_6+=Vtemp_6
     V7_7+=Vtemp_7
     V7_8+=Vtemp_8
     V7_9+=Vtemp_9
     V7_10+=Vtemp_10
     V7_11+=Vtemp_11
     V7_12+=Vtemp_12
     V7_13+=Vtemp_13
     V7_14+=Vtemp_14
     V7_15+=Vtemp_15
     V7_16+=Vtemp_16
     V7_17+=Vtemp_17
     V7_18+=Vtemp_18
     V7_19+=Vtemp_19
     V7_20+=Vtemp_20
#
#
     etemp2_1=V7_1
     etemp2_2=V7_2
     etemp2_3=V7_3
     etemp2_4=V7_4
     etemp2_5=V7_5
     etemp2_6=V7_6
     etemp2_7=V7_7
     etemp2_8=V7_8
     etemp2_9=V7_9
     etemp2_10=V7_10
     etemp2_11=V7_11
     etemp2_12=V7_12
     etemp2_13=V7_13
     etemp2_14=V7_14
     etemp2_15=V7_15
     etemp2_16=V7_16
     etemp2_17=V7_17
     etemp2_18=V7_18
     etemp2_19=V7_19
     etemp2_20=V7_20
#
     sqr=0.0
     etemp=V5_1*etemp2_1
     sqr+=etemp
     etemp=V5_2*etemp2_2
     sqr+=etemp
     etemp=V5_3*etemp2_3
     sqr+=etemp
     etemp=V5_4*etemp2_4
     sqr+=etemp
     etemp=V5_5*etemp2_5
     sqr+=etemp
     etemp=V5_6*etemp2_6
     sqr+=etemp
     etemp=V5_7*etemp2_7
     sqr+=etemp
     etemp=V5_8*etemp2_8
     sqr+=etemp
     etemp=V5_9*etemp2_9
     sqr+=etemp
     etemp=V5_10*etemp2_10
     sqr+=etemp
     etemp=V5_11*etemp2_11
     sqr+=etemp
     etemp=V5_12*etemp2_12
     sqr+=etemp
     etemp=V5_13*etemp2_13
     sqr+=etemp
     etemp=V5_14*etemp2_14
     sqr+=etemp
     etemp=V5_15*etemp2_15
     sqr+=etemp
     etemp=V5_16*etemp2_16
     sqr+=etemp
     etemp=V5_17*etemp2_17
     sqr+=etemp
     etemp=V5_18*etemp2_18
     sqr+=etemp
     etemp=V5_19*etemp2_19
     sqr+=etemp
     etemp=V5_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V5_1*sqr
     Vtemp_2=V5_2*sqr
     Vtemp_3=V5_3*sqr
     Vtemp_4=V5_4*sqr
     Vtemp_5=V5_5*sqr
     Vtemp_6=V5_6*sqr
     Vtemp_7=V5_7*sqr
     Vtemp_8=V5_8*sqr
     Vtemp_9=V5_9*sqr
     Vtemp_10=V5_10*sqr
     Vtemp_11=V5_11*sqr
     Vtemp_12=V5_12*sqr
     Vtemp_13=V5_13*sqr
     Vtemp_14=V5_14*sqr
     Vtemp_15=V5_15*sqr
     Vtemp_16=V5_16*sqr
     Vtemp_17=V5_17*sqr
     Vtemp_18=V5_18*sqr
     Vtemp_19=V5_19*sqr
     Vtemp_20=V5_20*sqr
#
     V7_1+=Vtemp_1
     V7_2+=Vtemp_2
     V7_3+=Vtemp_3
     V7_4+=Vtemp_4
     V7_5+=Vtemp_5
     V7_6+=Vtemp_6
     V7_7+=Vtemp_7
     V7_8+=Vtemp_8
     V7_9+=Vtemp_9
     V7_10+=Vtemp_10
     V7_11+=Vtemp_11
     V7_12+=Vtemp_12
     V7_13+=Vtemp_13
     V7_14+=Vtemp_14
     V7_15+=Vtemp_15
     V7_16+=Vtemp_16
     V7_17+=Vtemp_17
     V7_18+=Vtemp_18
     V7_19+=Vtemp_19
     V7_20+=Vtemp_20
#
#
     etemp2_1=V7_1
     etemp2_2=V7_2
     etemp2_3=V7_3
     etemp2_4=V7_4
     etemp2_5=V7_5
     etemp2_6=V7_6
     etemp2_7=V7_7
     etemp2_8=V7_8
     etemp2_9=V7_9
     etemp2_10=V7_10
     etemp2_11=V7_11
     etemp2_12=V7_12
     etemp2_13=V7_13
     etemp2_14=V7_14
     etemp2_15=V7_15
     etemp2_16=V7_16
     etemp2_17=V7_17
     etemp2_18=V7_18
     etemp2_19=V7_19
     etemp2_20=V7_20
#
     sqr=0.0
     etemp=V6_1*etemp2_1
     sqr+=etemp
     etemp=V6_2*etemp2_2
     sqr+=etemp
     etemp=V6_3*etemp2_3
     sqr+=etemp
     etemp=V6_4*etemp2_4
     sqr+=etemp
     etemp=V6_5*etemp2_5
     sqr+=etemp
     etemp=V6_6*etemp2_6
     sqr+=etemp
     etemp=V6_7*etemp2_7
     sqr+=etemp
     etemp=V6_8*etemp2_8
     sqr+=etemp
     etemp=V6_9*etemp2_9
     sqr+=etemp
     etemp=V6_10*etemp2_10
     sqr+=etemp
     etemp=V6_11*etemp2_11
     sqr+=etemp
     etemp=V6_12*etemp2_12
     sqr+=etemp
     etemp=V6_13*etemp2_13
     sqr+=etemp
     etemp=V6_14*etemp2_14
     sqr+=etemp
     etemp=V6_15*etemp2_15
     sqr+=etemp
     etemp=V6_16*etemp2_16
     sqr+=etemp
     etemp=V6_17*etemp2_17
     sqr+=etemp
     etemp=V6_18*etemp2_18
     sqr+=etemp
     etemp=V6_19*etemp2_19
     sqr+=etemp
     etemp=V6_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V6_1*sqr
     Vtemp_2=V6_2*sqr
     Vtemp_3=V6_3*sqr
     Vtemp_4=V6_4*sqr
     Vtemp_5=V6_5*sqr
     Vtemp_6=V6_6*sqr
     Vtemp_7=V6_7*sqr
     Vtemp_8=V6_8*sqr
     Vtemp_9=V6_9*sqr
     Vtemp_10=V6_10*sqr
     Vtemp_11=V6_11*sqr
     Vtemp_12=V6_12*sqr
     Vtemp_13=V6_13*sqr
     Vtemp_14=V6_14*sqr
     Vtemp_15=V6_15*sqr
     Vtemp_16=V6_16*sqr
     Vtemp_17=V6_17*sqr
     Vtemp_18=V6_18*sqr
     Vtemp_19=V6_19*sqr
     Vtemp_20=V6_20*sqr
#
     V7_1+=Vtemp_1
     V7_2+=Vtemp_2
     V7_3+=Vtemp_3
     V7_4+=Vtemp_4
     V7_5+=Vtemp_5
     V7_6+=Vtemp_6
     V7_7+=Vtemp_7
     V7_8+=Vtemp_8
     V7_9+=Vtemp_9
     V7_10+=Vtemp_10
     V7_11+=Vtemp_11
     V7_12+=Vtemp_12
     V7_13+=Vtemp_13
     V7_14+=Vtemp_14
     V7_15+=Vtemp_15
     V7_16+=Vtemp_16
     V7_17+=Vtemp_17
     V7_18+=Vtemp_18
     V7_19+=Vtemp_19
     V7_20+=Vtemp_20
#
#
     Vtemp_1=V7_1
     Vtemp_2=V7_2
     Vtemp_3=V7_3
     Vtemp_4=V7_4
     Vtemp_5=V7_5
     Vtemp_6=V7_6
     Vtemp_7=V7_7
     Vtemp_8=V7_8
     Vtemp_9=V7_9
     Vtemp_10=V7_10
     Vtemp_11=V7_11
     Vtemp_12=V7_12
     Vtemp_13=V7_13
     Vtemp_14=V7_14
     Vtemp_15=V7_15
     Vtemp_16=V7_16
     Vtemp_17=V7_17
     Vtemp_18=V7_18
     Vtemp_19=V7_19
     Vtemp_20=V7_20
#
     sqr=0.0
#
     etemp=V7_1*Vtemp_1
     sqr+=etemp
     etemp=V7_2*Vtemp_2
     sqr+=etemp
     etemp=V7_3*Vtemp_3
     sqr+=etemp
     etemp=V7_4*Vtemp_4
     sqr+=etemp
     etemp=V7_5*Vtemp_5
     sqr+=etemp
     etemp=V7_6*Vtemp_6
     sqr+=etemp
     etemp=V7_7*Vtemp_7
     sqr+=etemp
     etemp=V7_8*Vtemp_8
     sqr+=etemp
     etemp=V7_9*Vtemp_9
     sqr+=etemp
     etemp=V7_10*Vtemp_10
     sqr+=etemp
     etemp=V7_11*Vtemp_11
     sqr+=etemp
     etemp=V7_12*Vtemp_12
     sqr+=etemp
     etemp=V7_13*Vtemp_13
     sqr+=etemp
     etemp=V7_14*Vtemp_14
     sqr+=etemp
     etemp=V7_15*Vtemp_15
     sqr+=etemp
     etemp=V7_16*Vtemp_16
     sqr+=etemp
     etemp=V7_17*Vtemp_17
     sqr+=etemp
     etemp=V7_18*Vtemp_18
     sqr+=etemp
     etemp=V7_19*Vtemp_19
     sqr+=etemp
     etemp=V7_20*Vtemp_20
     sqr+=etemp
#
       exponent=0.5
#       execute square_root sqr exponent
#       sqr2=1.0/sqr
     execute norm_fac sqr exponent
     sqr2=sqr
#
     V7_1*=sqr2
     V7_2*=sqr2
     V7_3*=sqr2
     V7_4*=sqr2
     V7_5*=sqr2
     V7_6*=sqr2
     V7_7*=sqr2
     V7_8*=sqr2
     V7_9*=sqr2
     V7_10*=sqr2
     V7_11*=sqr2
     V7_12*=sqr2
     V7_13*=sqr2
     V7_14*=sqr2
     V7_15*=sqr2
     V7_16*=sqr2
     V7_17*=sqr2
     V7_18*=sqr2
     V7_19*=sqr2
     V7_20*=sqr2
#
#------8 vectors -------------------------------
#
     etemp2_1=V8_1
     etemp2_2=V8_2
     etemp2_3=V8_3
     etemp2_4=V8_4
     etemp2_5=V8_5
     etemp2_6=V8_6
     etemp2_7=V8_7
     etemp2_8=V8_8
     etemp2_9=V8_9
     etemp2_10=V8_10
     etemp2_11=V8_11
     etemp2_12=V8_12
     etemp2_13=V8_13
     etemp2_14=V8_14
     etemp2_15=V8_15
     etemp2_16=V8_16
     etemp2_17=V8_17
     etemp2_18=V8_18
     etemp2_19=V8_19
     etemp2_20=V8_20
#
     sqr=0.0
     etemp=V1_1*etemp2_1
     sqr+=etemp
     etemp=V1_2*etemp2_2
     sqr+=etemp
     etemp=V1_3*etemp2_3
     sqr+=etemp
     etemp=V1_4*etemp2_4
     sqr+=etemp
     etemp=V1_5*etemp2_5
     sqr+=etemp
     etemp=V1_6*etemp2_6
     sqr+=etemp
     etemp=V1_7*etemp2_7
     sqr+=etemp
     etemp=V1_8*etemp2_8
     sqr+=etemp
     etemp=V1_9*etemp2_9
     sqr+=etemp
     etemp=V1_10*etemp2_10
     sqr+=etemp
     etemp=V1_11*etemp2_11
     sqr+=etemp
     etemp=V1_12*etemp2_12
     sqr+=etemp
     etemp=V1_13*etemp2_13
     sqr+=etemp
     etemp=V1_14*etemp2_14
     sqr+=etemp
     etemp=V1_15*etemp2_15
     sqr+=etemp
     etemp=V1_16*etemp2_16
     sqr+=etemp
     etemp=V1_17*etemp2_17
     sqr+=etemp
     etemp=V1_18*etemp2_18
     sqr+=etemp
     etemp=V1_19*etemp2_19
     sqr+=etemp
     etemp=V1_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V1_1*sqr
     Vtemp_2=V1_2*sqr
     Vtemp_3=V1_3*sqr
     Vtemp_4=V1_4*sqr
     Vtemp_5=V1_5*sqr
     Vtemp_6=V1_6*sqr
     Vtemp_7=V1_7*sqr
     Vtemp_8=V1_8*sqr
     Vtemp_9=V1_9*sqr
     Vtemp_10=V1_10*sqr
     Vtemp_11=V1_11*sqr
     Vtemp_12=V1_12*sqr
     Vtemp_13=V1_13*sqr
     Vtemp_14=V1_14*sqr
     Vtemp_15=V1_15*sqr
     Vtemp_16=V1_16*sqr
     Vtemp_17=V1_17*sqr
     Vtemp_18=V1_18*sqr
     Vtemp_19=V1_19*sqr
     Vtemp_20=V1_20*sqr
#
     V8_1+=Vtemp_1
     V8_2+=Vtemp_2
     V8_3+=Vtemp_3
     V8_4+=Vtemp_4
     V8_5+=Vtemp_5
     V8_6+=Vtemp_6
     V8_7+=Vtemp_7
     V8_8+=Vtemp_8
     V8_9+=Vtemp_9
     V8_10+=Vtemp_10
     V8_11+=Vtemp_11
     V8_12+=Vtemp_12
     V8_13+=Vtemp_13
     V8_14+=Vtemp_14
     V8_15+=Vtemp_15
     V8_16+=Vtemp_16
     V8_17+=Vtemp_17
     V8_18+=Vtemp_18
     V8_19+=Vtemp_19
     V8_20+=Vtemp_20
#
#
     etemp2_1=V8_1
     etemp2_2=V8_2
     etemp2_3=V8_3
     etemp2_4=V8_4
     etemp2_5=V8_5
     etemp2_6=V8_6
     etemp2_7=V8_7
     etemp2_8=V8_8
     etemp2_9=V8_9
     etemp2_10=V8_10
     etemp2_11=V8_11
     etemp2_12=V8_12
     etemp2_13=V8_13
     etemp2_14=V8_14
     etemp2_15=V8_15
     etemp2_16=V8_16
     etemp2_17=V8_17
     etemp2_18=V8_18
     etemp2_19=V8_19
     etemp2_20=V8_20
#
     sqr=0.0
     etemp=V2_1*etemp2_1
     sqr+=etemp
     etemp=V2_2*etemp2_2
     sqr+=etemp
     etemp=V2_3*etemp2_3
     sqr+=etemp
     etemp=V2_4*etemp2_4
     sqr+=etemp
     etemp=V2_5*etemp2_5
     sqr+=etemp
     etemp=V2_6*etemp2_6
     sqr+=etemp
     etemp=V2_7*etemp2_7
     sqr+=etemp
     etemp=V2_8*etemp2_8
     sqr+=etemp
     etemp=V2_9*etemp2_9
     sqr+=etemp
     etemp=V2_10*etemp2_10
     sqr+=etemp
     etemp=V2_11*etemp2_11
     sqr+=etemp
     etemp=V2_12*etemp2_12
     sqr+=etemp
     etemp=V2_13*etemp2_13
     sqr+=etemp
     etemp=V2_14*etemp2_14
     sqr+=etemp
     etemp=V2_15*etemp2_15
     sqr+=etemp
     etemp=V2_16*etemp2_16
     sqr+=etemp
     etemp=V2_17*etemp2_17
     sqr+=etemp
     etemp=V2_18*etemp2_18
     sqr+=etemp
     etemp=V2_19*etemp2_19
     sqr+=etemp
     etemp=V2_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V2_1*sqr
     Vtemp_2=V2_2*sqr
     Vtemp_3=V2_3*sqr
     Vtemp_4=V2_4*sqr
     Vtemp_5=V2_5*sqr
     Vtemp_6=V2_6*sqr
     Vtemp_7=V2_7*sqr
     Vtemp_8=V2_8*sqr
     Vtemp_9=V2_9*sqr
     Vtemp_10=V2_10*sqr
     Vtemp_11=V2_11*sqr
     Vtemp_12=V2_12*sqr
     Vtemp_13=V2_13*sqr
     Vtemp_14=V2_14*sqr
     Vtemp_15=V2_15*sqr
     Vtemp_16=V2_16*sqr
     Vtemp_17=V2_17*sqr
     Vtemp_18=V2_18*sqr
     Vtemp_19=V2_19*sqr
     Vtemp_20=V2_20*sqr
#
     V8_1+=Vtemp_1
     V8_2+=Vtemp_2
     V8_3+=Vtemp_3
     V8_4+=Vtemp_4
     V8_5+=Vtemp_5
     V8_6+=Vtemp_6
     V8_7+=Vtemp_7
     V8_8+=Vtemp_8
     V8_9+=Vtemp_9
     V8_10+=Vtemp_10
     V8_11+=Vtemp_11
     V8_12+=Vtemp_12
     V8_13+=Vtemp_13
     V8_14+=Vtemp_14
     V8_15+=Vtemp_15
     V8_16+=Vtemp_16
     V8_17+=Vtemp_17
     V8_18+=Vtemp_18
     V8_19+=Vtemp_19
     V8_20+=Vtemp_20
#
#
     etemp2_1=V8_1
     etemp2_2=V8_2
     etemp2_3=V8_3
     etemp2_4=V8_4
     etemp2_5=V8_5
     etemp2_6=V8_6
     etemp2_7=V8_7
     etemp2_8=V8_8
     etemp2_9=V8_9
     etemp2_10=V8_10
     etemp2_11=V8_11
     etemp2_12=V8_12
     etemp2_13=V8_13
     etemp2_14=V8_14
     etemp2_15=V8_15
     etemp2_16=V8_16
     etemp2_17=V8_17
     etemp2_18=V8_18
     etemp2_19=V8_19
     etemp2_20=V8_20
#
     sqr=0.0
     etemp=V3_1*etemp2_1
     sqr+=etemp
     etemp=V3_2*etemp2_2
     sqr+=etemp
     etemp=V3_3*etemp2_3
     sqr+=etemp
     etemp=V3_4*etemp2_4
     sqr+=etemp
     etemp=V3_5*etemp2_5
     sqr+=etemp
     etemp=V3_6*etemp2_6
     sqr+=etemp
     etemp=V3_7*etemp2_7
     sqr+=etemp
     etemp=V3_8*etemp2_8
     sqr+=etemp
     etemp=V3_9*etemp2_9
     sqr+=etemp
     etemp=V3_10*etemp2_10
     sqr+=etemp
     etemp=V3_11*etemp2_11
     sqr+=etemp
     etemp=V3_12*etemp2_12
     sqr+=etemp
     etemp=V3_13*etemp2_13
     sqr+=etemp
     etemp=V3_14*etemp2_14
     sqr+=etemp
     etemp=V3_15*etemp2_15
     sqr+=etemp
     etemp=V3_16*etemp2_16
     sqr+=etemp
     etemp=V3_17*etemp2_17
     sqr+=etemp
     etemp=V3_18*etemp2_18
     sqr+=etemp
     etemp=V3_19*etemp2_19
     sqr+=etemp
     etemp=V3_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V3_1*sqr
     Vtemp_2=V3_2*sqr
     Vtemp_3=V3_3*sqr
     Vtemp_4=V3_4*sqr
     Vtemp_5=V3_5*sqr
     Vtemp_6=V3_6*sqr
     Vtemp_7=V3_7*sqr
     Vtemp_8=V3_8*sqr
     Vtemp_9=V3_9*sqr
     Vtemp_10=V3_10*sqr
     Vtemp_11=V3_11*sqr
     Vtemp_12=V3_12*sqr
     Vtemp_13=V3_13*sqr
     Vtemp_14=V3_14*sqr
     Vtemp_15=V3_15*sqr
     Vtemp_16=V3_16*sqr
     Vtemp_17=V3_17*sqr
     Vtemp_18=V3_18*sqr
     Vtemp_19=V3_19*sqr
     Vtemp_20=V3_20*sqr
#
     V8_1+=Vtemp_1
     V8_2+=Vtemp_2
     V8_3+=Vtemp_3
     V8_4+=Vtemp_4
     V8_5+=Vtemp_5
     V8_6+=Vtemp_6
     V8_7+=Vtemp_7
     V8_8+=Vtemp_8
     V8_9+=Vtemp_9
     V8_10+=Vtemp_10
     V8_11+=Vtemp_11
     V8_12+=Vtemp_12
     V8_13+=Vtemp_13
     V8_14+=Vtemp_14
     V8_15+=Vtemp_15
     V8_16+=Vtemp_16
     V8_17+=Vtemp_17
     V8_18+=Vtemp_18
     V8_19+=Vtemp_19
     V8_20+=Vtemp_20
#
#
     etemp2_1=V8_1
     etemp2_2=V8_2
     etemp2_3=V8_3
     etemp2_4=V8_4
     etemp2_5=V8_5
     etemp2_6=V8_6
     etemp2_7=V8_7
     etemp2_8=V8_8
     etemp2_9=V8_9
     etemp2_10=V8_10
     etemp2_11=V8_11
     etemp2_12=V8_12
     etemp2_13=V8_13
     etemp2_14=V8_14
     etemp2_15=V8_15
     etemp2_16=V8_16
     etemp2_17=V8_17
     etemp2_18=V8_18
     etemp2_19=V8_19
     etemp2_20=V8_20
#
     sqr=0.0
     etemp=V4_1*etemp2_1
     sqr+=etemp
     etemp=V4_2*etemp2_2
     sqr+=etemp
     etemp=V4_3*etemp2_3
     sqr+=etemp
     etemp=V4_4*etemp2_4
     sqr+=etemp
     etemp=V4_5*etemp2_5
     sqr+=etemp
     etemp=V4_6*etemp2_6
     sqr+=etemp
     etemp=V4_7*etemp2_7
     sqr+=etemp
     etemp=V4_8*etemp2_8
     sqr+=etemp
     etemp=V4_9*etemp2_9
     sqr+=etemp
     etemp=V4_10*etemp2_10
     sqr+=etemp
     etemp=V4_11*etemp2_11
     sqr+=etemp
     etemp=V4_12*etemp2_12
     sqr+=etemp
     etemp=V4_13*etemp2_13
     sqr+=etemp
     etemp=V4_14*etemp2_14
     sqr+=etemp
     etemp=V4_15*etemp2_15
     sqr+=etemp
     etemp=V4_16*etemp2_16
     sqr+=etemp
     etemp=V4_17*etemp2_17
     sqr+=etemp
     etemp=V4_18*etemp2_18
     sqr+=etemp
     etemp=V4_19*etemp2_19
     sqr+=etemp
     etemp=V4_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V4_1*sqr
     Vtemp_2=V4_2*sqr
     Vtemp_3=V4_3*sqr
     Vtemp_4=V4_4*sqr
     Vtemp_5=V4_5*sqr
     Vtemp_6=V4_6*sqr
     Vtemp_7=V4_7*sqr
     Vtemp_8=V4_8*sqr
     Vtemp_9=V4_9*sqr
     Vtemp_10=V4_10*sqr
     Vtemp_11=V4_11*sqr
     Vtemp_12=V4_12*sqr
     Vtemp_13=V4_13*sqr
     Vtemp_14=V4_14*sqr
     Vtemp_15=V4_15*sqr
     Vtemp_16=V4_16*sqr
     Vtemp_17=V4_17*sqr
     Vtemp_18=V4_18*sqr
     Vtemp_19=V4_19*sqr
     Vtemp_20=V4_20*sqr
#
     V8_1+=Vtemp_1
     V8_2+=Vtemp_2
     V8_3+=Vtemp_3
     V8_4+=Vtemp_4
     V8_5+=Vtemp_5
     V8_6+=Vtemp_6
     V8_7+=Vtemp_7
     V8_8+=Vtemp_8
     V8_9+=Vtemp_9
     V8_10+=Vtemp_10
     V8_11+=Vtemp_11
     V8_12+=Vtemp_12
     V8_13+=Vtemp_13
     V8_14+=Vtemp_14
     V8_15+=Vtemp_15
     V8_16+=Vtemp_16
     V8_17+=Vtemp_17
     V8_18+=Vtemp_18
     V8_19+=Vtemp_19
     V8_20+=Vtemp_20
#
#
     etemp2_1=V8_1
     etemp2_2=V8_2
     etemp2_3=V8_3
     etemp2_4=V8_4
     etemp2_5=V8_5
     etemp2_6=V8_6
     etemp2_7=V8_7
     etemp2_8=V8_8
     etemp2_9=V8_9
     etemp2_10=V8_10
     etemp2_11=V8_11
     etemp2_12=V8_12
     etemp2_13=V8_13
     etemp2_14=V8_14
     etemp2_15=V8_15
     etemp2_16=V8_16
     etemp2_17=V8_17
     etemp2_18=V8_18
     etemp2_19=V8_19
     etemp2_20=V8_20
#
     sqr=0.0
     etemp=V5_1*etemp2_1
     sqr+=etemp
     etemp=V5_2*etemp2_2
     sqr+=etemp
     etemp=V5_3*etemp2_3
     sqr+=etemp
     etemp=V5_4*etemp2_4
     sqr+=etemp
     etemp=V5_5*etemp2_5
     sqr+=etemp
     etemp=V5_6*etemp2_6
     sqr+=etemp
     etemp=V5_7*etemp2_7
     sqr+=etemp
     etemp=V5_8*etemp2_8
     sqr+=etemp
     etemp=V5_9*etemp2_9
     sqr+=etemp
     etemp=V5_10*etemp2_10
     sqr+=etemp
     etemp=V5_11*etemp2_11
     sqr+=etemp
     etemp=V5_12*etemp2_12
     sqr+=etemp
     etemp=V5_13*etemp2_13
     sqr+=etemp
     etemp=V5_14*etemp2_14
     sqr+=etemp
     etemp=V5_15*etemp2_15
     sqr+=etemp
     etemp=V5_16*etemp2_16
     sqr+=etemp
     etemp=V5_17*etemp2_17
     sqr+=etemp
     etemp=V5_18*etemp2_18
     sqr+=etemp
     etemp=V5_19*etemp2_19
     sqr+=etemp
     etemp=V5_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V5_1*sqr
     Vtemp_2=V5_2*sqr
     Vtemp_3=V5_3*sqr
     Vtemp_4=V5_4*sqr
     Vtemp_5=V5_5*sqr
     Vtemp_6=V5_6*sqr
     Vtemp_7=V5_7*sqr
     Vtemp_8=V5_8*sqr
     Vtemp_9=V5_9*sqr
     Vtemp_10=V5_10*sqr
     Vtemp_11=V5_11*sqr
     Vtemp_12=V5_12*sqr
     Vtemp_13=V5_13*sqr
     Vtemp_14=V5_14*sqr
     Vtemp_15=V5_15*sqr
     Vtemp_16=V5_16*sqr
     Vtemp_17=V5_17*sqr
     Vtemp_18=V5_18*sqr
     Vtemp_19=V5_19*sqr
     Vtemp_20=V5_20*sqr
#
     V8_1+=Vtemp_1
     V8_2+=Vtemp_2
     V8_3+=Vtemp_3
     V8_4+=Vtemp_4
     V8_5+=Vtemp_5
     V8_6+=Vtemp_6
     V8_7+=Vtemp_7
     V8_8+=Vtemp_8
     V8_9+=Vtemp_9
     V8_10+=Vtemp_10
     V8_11+=Vtemp_11
     V8_12+=Vtemp_12
     V8_13+=Vtemp_13
     V8_14+=Vtemp_14
     V8_15+=Vtemp_15
     V8_16+=Vtemp_16
     V8_17+=Vtemp_17
     V8_18+=Vtemp_18
     V8_19+=Vtemp_19
     V8_20+=Vtemp_20
#
#
     etemp2_1=V8_1
     etemp2_2=V8_2
     etemp2_3=V8_3
     etemp2_4=V8_4
     etemp2_5=V8_5
     etemp2_6=V8_6
     etemp2_7=V8_7
     etemp2_8=V8_8
     etemp2_9=V8_9
     etemp2_10=V8_10
     etemp2_11=V8_11
     etemp2_12=V8_12
     etemp2_13=V8_13
     etemp2_14=V8_14
     etemp2_15=V8_15
     etemp2_16=V8_16
     etemp2_17=V8_17
     etemp2_18=V8_18
     etemp2_19=V8_19
     etemp2_20=V8_20
#
     sqr=0.0
     etemp=V6_1*etemp2_1
     sqr+=etemp
     etemp=V6_2*etemp2_2
     sqr+=etemp
     etemp=V6_3*etemp2_3
     sqr+=etemp
     etemp=V6_4*etemp2_4
     sqr+=etemp
     etemp=V6_5*etemp2_5
     sqr+=etemp
     etemp=V6_6*etemp2_6
     sqr+=etemp
     etemp=V6_7*etemp2_7
     sqr+=etemp
     etemp=V6_8*etemp2_8
     sqr+=etemp
     etemp=V6_9*etemp2_9
     sqr+=etemp
     etemp=V6_10*etemp2_10
     sqr+=etemp
     etemp=V6_11*etemp2_11
     sqr+=etemp
     etemp=V6_12*etemp2_12
     sqr+=etemp
     etemp=V6_13*etemp2_13
     sqr+=etemp
     etemp=V6_14*etemp2_14
     sqr+=etemp
     etemp=V6_15*etemp2_15
     sqr+=etemp
     etemp=V6_16*etemp2_16
     sqr+=etemp
     etemp=V6_17*etemp2_17
     sqr+=etemp
     etemp=V6_18*etemp2_18
     sqr+=etemp
     etemp=V6_19*etemp2_19
     sqr+=etemp
     etemp=V6_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V6_1*sqr
     Vtemp_2=V6_2*sqr
     Vtemp_3=V6_3*sqr
     Vtemp_4=V6_4*sqr
     Vtemp_5=V6_5*sqr
     Vtemp_6=V6_6*sqr
     Vtemp_7=V6_7*sqr
     Vtemp_8=V6_8*sqr
     Vtemp_9=V6_9*sqr
     Vtemp_10=V6_10*sqr
     Vtemp_11=V6_11*sqr
     Vtemp_12=V6_12*sqr
     Vtemp_13=V6_13*sqr
     Vtemp_14=V6_14*sqr
     Vtemp_15=V6_15*sqr
     Vtemp_16=V6_16*sqr
     Vtemp_17=V6_17*sqr
     Vtemp_18=V6_18*sqr
     Vtemp_19=V6_19*sqr
     Vtemp_20=V6_20*sqr
#
     V8_1+=Vtemp_1
     V8_2+=Vtemp_2
     V8_3+=Vtemp_3
     V8_4+=Vtemp_4
     V8_5+=Vtemp_5
     V8_6+=Vtemp_6
     V8_7+=Vtemp_7
     V8_8+=Vtemp_8
     V8_9+=Vtemp_9
     V8_10+=Vtemp_10
     V8_11+=Vtemp_11
     V8_12+=Vtemp_12
     V8_13+=Vtemp_13
     V8_14+=Vtemp_14
     V8_15+=Vtemp_15
     V8_16+=Vtemp_16
     V8_17+=Vtemp_17
     V8_18+=Vtemp_18
     V8_19+=Vtemp_19
     V8_20+=Vtemp_20
#
#
     etemp2_1=V8_1
     etemp2_2=V8_2
     etemp2_3=V8_3
     etemp2_4=V8_4
     etemp2_5=V8_5
     etemp2_6=V8_6
     etemp2_7=V8_7
     etemp2_8=V8_8
     etemp2_9=V8_9
     etemp2_10=V8_10
     etemp2_11=V8_11
     etemp2_12=V8_12
     etemp2_13=V8_13
     etemp2_14=V8_14
     etemp2_15=V8_15
     etemp2_16=V8_16
     etemp2_17=V8_17
     etemp2_18=V8_18
     etemp2_19=V8_19
     etemp2_20=V8_20
#
     sqr=0.0
     etemp=V7_1*etemp2_1
     sqr+=etemp
     etemp=V7_2*etemp2_2
     sqr+=etemp
     etemp=V7_3*etemp2_3
     sqr+=etemp
     etemp=V7_4*etemp2_4
     sqr+=etemp
     etemp=V7_5*etemp2_5
     sqr+=etemp
     etemp=V7_6*etemp2_6
     sqr+=etemp
     etemp=V7_7*etemp2_7
     sqr+=etemp
     etemp=V7_8*etemp2_8
     sqr+=etemp
     etemp=V7_9*etemp2_9
     sqr+=etemp
     etemp=V7_10*etemp2_10
     sqr+=etemp
     etemp=V7_11*etemp2_11
     sqr+=etemp
     etemp=V7_12*etemp2_12
     sqr+=etemp
     etemp=V7_13*etemp2_13
     sqr+=etemp
     etemp=V7_14*etemp2_14
     sqr+=etemp
     etemp=V7_15*etemp2_15
     sqr+=etemp
     etemp=V7_16*etemp2_16
     sqr+=etemp
     etemp=V7_17*etemp2_17
     sqr+=etemp
     etemp=V7_18*etemp2_18
     sqr+=etemp
     etemp=V7_19*etemp2_19
     sqr+=etemp
     etemp=V7_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V7_1*sqr
     Vtemp_2=V7_2*sqr
     Vtemp_3=V7_3*sqr
     Vtemp_4=V7_4*sqr
     Vtemp_5=V7_5*sqr
     Vtemp_6=V7_6*sqr
     Vtemp_7=V7_7*sqr
     Vtemp_8=V7_8*sqr
     Vtemp_9=V7_9*sqr
     Vtemp_10=V7_10*sqr
     Vtemp_11=V7_11*sqr
     Vtemp_12=V7_12*sqr
     Vtemp_13=V7_13*sqr
     Vtemp_14=V7_14*sqr
     Vtemp_15=V7_15*sqr
     Vtemp_16=V7_16*sqr
     Vtemp_17=V7_17*sqr
     Vtemp_18=V7_18*sqr
     Vtemp_19=V7_19*sqr
     Vtemp_20=V7_20*sqr
#
     V8_1+=Vtemp_1
     V8_2+=Vtemp_2
     V8_3+=Vtemp_3
     V8_4+=Vtemp_4
     V8_5+=Vtemp_5
     V8_6+=Vtemp_6
     V8_7+=Vtemp_7
     V8_8+=Vtemp_8
     V8_9+=Vtemp_9
     V8_10+=Vtemp_10
     V8_11+=Vtemp_11
     V8_12+=Vtemp_12
     V8_13+=Vtemp_13
     V8_14+=Vtemp_14
     V8_15+=Vtemp_15
     V8_16+=Vtemp_16
     V8_17+=Vtemp_17
     V8_18+=Vtemp_18
     V8_19+=Vtemp_19
     V8_20+=Vtemp_20
#
#
     Vtemp_1=V8_1
     Vtemp_2=V8_2
     Vtemp_3=V8_3
     Vtemp_4=V8_4
     Vtemp_5=V8_5
     Vtemp_6=V8_6
     Vtemp_7=V8_7
     Vtemp_8=V8_8
     Vtemp_9=V8_9
     Vtemp_10=V8_10
     Vtemp_11=V8_11
     Vtemp_12=V8_12
     Vtemp_13=V8_13
     Vtemp_14=V8_14
     Vtemp_15=V8_15
     Vtemp_16=V8_16
     Vtemp_17=V8_17
     Vtemp_18=V8_18
     Vtemp_19=V8_19
     Vtemp_20=V8_20
#
     sqr=0.0
#
     etemp=V8_1*Vtemp_1
     sqr+=etemp
     etemp=V8_2*Vtemp_2
     sqr+=etemp
     etemp=V8_3*Vtemp_3
     sqr+=etemp
     etemp=V8_4*Vtemp_4
     sqr+=etemp
     etemp=V8_5*Vtemp_5
     sqr+=etemp
     etemp=V8_6*Vtemp_6
     sqr+=etemp
     etemp=V8_7*Vtemp_7
     sqr+=etemp
     etemp=V8_8*Vtemp_8
     sqr+=etemp
     etemp=V8_9*Vtemp_9
     sqr+=etemp
     etemp=V8_10*Vtemp_10
     sqr+=etemp
     etemp=V8_11*Vtemp_11
     sqr+=etemp
     etemp=V8_12*Vtemp_12
     sqr+=etemp
     etemp=V8_13*Vtemp_13
     sqr+=etemp
     etemp=V8_14*Vtemp_14
     sqr+=etemp
     etemp=V8_15*Vtemp_15
     sqr+=etemp
     etemp=V8_16*Vtemp_16
     sqr+=etemp
     etemp=V8_17*Vtemp_17
     sqr+=etemp
     etemp=V8_18*Vtemp_18
     sqr+=etemp
     etemp=V8_19*Vtemp_19
     sqr+=etemp
     etemp=V8_20*Vtemp_20
     sqr+=etemp
#
       exponent=0.5
#       execute square_root sqr exponent
#       sqr2=1.0/sqr
     execute norm_fac sqr exponent
     sqr2=sqr
#
     V8_1*=sqr2
     V8_2*=sqr2
     V8_3*=sqr2
     V8_4*=sqr2
     V8_5*=sqr2
     V8_6*=sqr2
     V8_7*=sqr2
     V8_8*=sqr2
     V8_9*=sqr2
     V8_10*=sqr2
     V8_11*=sqr2
     V8_12*=sqr2
     V8_13*=sqr2
     V8_14*=sqr2
     V8_15*=sqr2
     V8_16*=sqr2
     V8_17*=sqr2
     V8_18*=sqr2
     V8_19*=sqr2
     V8_20*=sqr2
#
#------9 vectors -------------------------------
#
     etemp2_1=V9_1
     etemp2_2=V9_2
     etemp2_3=V9_3
     etemp2_4=V9_4
     etemp2_5=V9_5
     etemp2_6=V9_6
     etemp2_7=V9_7
     etemp2_8=V9_8
     etemp2_9=V9_9
     etemp2_10=V9_10
     etemp2_11=V9_11
     etemp2_12=V9_12
     etemp2_13=V9_13
     etemp2_14=V9_14
     etemp2_15=V9_15
     etemp2_16=V9_16
     etemp2_17=V9_17
     etemp2_18=V9_18
     etemp2_19=V9_19
     etemp2_20=V9_20
#
     sqr=0.0
     etemp=V1_1*etemp2_1
     sqr+=etemp
     etemp=V1_2*etemp2_2
     sqr+=etemp
     etemp=V1_3*etemp2_3
     sqr+=etemp
     etemp=V1_4*etemp2_4
     sqr+=etemp
     etemp=V1_5*etemp2_5
     sqr+=etemp
     etemp=V1_6*etemp2_6
     sqr+=etemp
     etemp=V1_7*etemp2_7
     sqr+=etemp
     etemp=V1_8*etemp2_8
     sqr+=etemp
     etemp=V1_9*etemp2_9
     sqr+=etemp
     etemp=V1_10*etemp2_10
     sqr+=etemp
     etemp=V1_11*etemp2_11
     sqr+=etemp
     etemp=V1_12*etemp2_12
     sqr+=etemp
     etemp=V1_13*etemp2_13
     sqr+=etemp
     etemp=V1_14*etemp2_14
     sqr+=etemp
     etemp=V1_15*etemp2_15
     sqr+=etemp
     etemp=V1_16*etemp2_16
     sqr+=etemp
     etemp=V1_17*etemp2_17
     sqr+=etemp
     etemp=V1_18*etemp2_18
     sqr+=etemp
     etemp=V1_19*etemp2_19
     sqr+=etemp
     etemp=V1_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V1_1*sqr
     Vtemp_2=V1_2*sqr
     Vtemp_3=V1_3*sqr
     Vtemp_4=V1_4*sqr
     Vtemp_5=V1_5*sqr
     Vtemp_6=V1_6*sqr
     Vtemp_7=V1_7*sqr
     Vtemp_8=V1_8*sqr
     Vtemp_9=V1_9*sqr
     Vtemp_10=V1_10*sqr
     Vtemp_11=V1_11*sqr
     Vtemp_12=V1_12*sqr
     Vtemp_13=V1_13*sqr
     Vtemp_14=V1_14*sqr
     Vtemp_15=V1_15*sqr
     Vtemp_16=V1_16*sqr
     Vtemp_17=V1_17*sqr
     Vtemp_18=V1_18*sqr
     Vtemp_19=V1_19*sqr
     Vtemp_20=V1_20*sqr
#
     V9_1+=Vtemp_1
     V9_2+=Vtemp_2
     V9_3+=Vtemp_3
     V9_4+=Vtemp_4
     V9_5+=Vtemp_5
     V9_6+=Vtemp_6
     V9_7+=Vtemp_7
     V9_8+=Vtemp_8
     V9_9+=Vtemp_9
     V9_10+=Vtemp_10
     V9_11+=Vtemp_11
     V9_12+=Vtemp_12
     V9_13+=Vtemp_13
     V9_14+=Vtemp_14
     V9_15+=Vtemp_15
     V9_16+=Vtemp_16
     V9_17+=Vtemp_17
     V9_18+=Vtemp_18
     V9_19+=Vtemp_19
     V9_20+=Vtemp_20
#
#
     etemp2_1=V9_1
     etemp2_2=V9_2
     etemp2_3=V9_3
     etemp2_4=V9_4
     etemp2_5=V9_5
     etemp2_6=V9_6
     etemp2_7=V9_7
     etemp2_8=V9_8
     etemp2_9=V9_9
     etemp2_10=V9_10
     etemp2_11=V9_11
     etemp2_12=V9_12
     etemp2_13=V9_13
     etemp2_14=V9_14
     etemp2_15=V9_15
     etemp2_16=V9_16
     etemp2_17=V9_17
     etemp2_18=V9_18
     etemp2_19=V9_19
     etemp2_20=V9_20
#
     sqr=0.0
     etemp=V2_1*etemp2_1
     sqr+=etemp
     etemp=V2_2*etemp2_2
     sqr+=etemp
     etemp=V2_3*etemp2_3
     sqr+=etemp
     etemp=V2_4*etemp2_4
     sqr+=etemp
     etemp=V2_5*etemp2_5
     sqr+=etemp
     etemp=V2_6*etemp2_6
     sqr+=etemp
     etemp=V2_7*etemp2_7
     sqr+=etemp
     etemp=V2_8*etemp2_8
     sqr+=etemp
     etemp=V2_9*etemp2_9
     sqr+=etemp
     etemp=V2_10*etemp2_10
     sqr+=etemp
     etemp=V2_11*etemp2_11
     sqr+=etemp
     etemp=V2_12*etemp2_12
     sqr+=etemp
     etemp=V2_13*etemp2_13
     sqr+=etemp
     etemp=V2_14*etemp2_14
     sqr+=etemp
     etemp=V2_15*etemp2_15
     sqr+=etemp
     etemp=V2_16*etemp2_16
     sqr+=etemp
     etemp=V2_17*etemp2_17
     sqr+=etemp
     etemp=V2_18*etemp2_18
     sqr+=etemp
     etemp=V2_19*etemp2_19
     sqr+=etemp
     etemp=V2_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V2_1*sqr
     Vtemp_2=V2_2*sqr
     Vtemp_3=V2_3*sqr
     Vtemp_4=V2_4*sqr
     Vtemp_5=V2_5*sqr
     Vtemp_6=V2_6*sqr
     Vtemp_7=V2_7*sqr
     Vtemp_8=V2_8*sqr
     Vtemp_9=V2_9*sqr
     Vtemp_10=V2_10*sqr
     Vtemp_11=V2_11*sqr
     Vtemp_12=V2_12*sqr
     Vtemp_13=V2_13*sqr
     Vtemp_14=V2_14*sqr
     Vtemp_15=V2_15*sqr
     Vtemp_16=V2_16*sqr
     Vtemp_17=V2_17*sqr
     Vtemp_18=V2_18*sqr
     Vtemp_19=V2_19*sqr
     Vtemp_20=V2_20*sqr
#
     V9_1+=Vtemp_1
     V9_2+=Vtemp_2
     V9_3+=Vtemp_3
     V9_4+=Vtemp_4
     V9_5+=Vtemp_5
     V9_6+=Vtemp_6
     V9_7+=Vtemp_7
     V9_8+=Vtemp_8
     V9_9+=Vtemp_9
     V9_10+=Vtemp_10
     V9_11+=Vtemp_11
     V9_12+=Vtemp_12
     V9_13+=Vtemp_13
     V9_14+=Vtemp_14
     V9_15+=Vtemp_15
     V9_16+=Vtemp_16
     V9_17+=Vtemp_17
     V9_18+=Vtemp_18
     V9_19+=Vtemp_19
     V9_20+=Vtemp_20
#
#
     etemp2_1=V9_1
     etemp2_2=V9_2
     etemp2_3=V9_3
     etemp2_4=V9_4
     etemp2_5=V9_5
     etemp2_6=V9_6
     etemp2_7=V9_7
     etemp2_8=V9_8
     etemp2_9=V9_9
     etemp2_10=V9_10
     etemp2_11=V9_11
     etemp2_12=V9_12
     etemp2_13=V9_13
     etemp2_14=V9_14
     etemp2_15=V9_15
     etemp2_16=V9_16
     etemp2_17=V9_17
     etemp2_18=V9_18
     etemp2_19=V9_19
     etemp2_20=V9_20
#
     sqr=0.0
     etemp=V3_1*etemp2_1
     sqr+=etemp
     etemp=V3_2*etemp2_2
     sqr+=etemp
     etemp=V3_3*etemp2_3
     sqr+=etemp
     etemp=V3_4*etemp2_4
     sqr+=etemp
     etemp=V3_5*etemp2_5
     sqr+=etemp
     etemp=V3_6*etemp2_6
     sqr+=etemp
     etemp=V3_7*etemp2_7
     sqr+=etemp
     etemp=V3_8*etemp2_8
     sqr+=etemp
     etemp=V3_9*etemp2_9
     sqr+=etemp
     etemp=V3_10*etemp2_10
     sqr+=etemp
     etemp=V3_11*etemp2_11
     sqr+=etemp
     etemp=V3_12*etemp2_12
     sqr+=etemp
     etemp=V3_13*etemp2_13
     sqr+=etemp
     etemp=V3_14*etemp2_14
     sqr+=etemp
     etemp=V3_15*etemp2_15
     sqr+=etemp
     etemp=V3_16*etemp2_16
     sqr+=etemp
     etemp=V3_17*etemp2_17
     sqr+=etemp
     etemp=V3_18*etemp2_18
     sqr+=etemp
     etemp=V3_19*etemp2_19
     sqr+=etemp
     etemp=V3_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V3_1*sqr
     Vtemp_2=V3_2*sqr
     Vtemp_3=V3_3*sqr
     Vtemp_4=V3_4*sqr
     Vtemp_5=V3_5*sqr
     Vtemp_6=V3_6*sqr
     Vtemp_7=V3_7*sqr
     Vtemp_8=V3_8*sqr
     Vtemp_9=V3_9*sqr
     Vtemp_10=V3_10*sqr
     Vtemp_11=V3_11*sqr
     Vtemp_12=V3_12*sqr
     Vtemp_13=V3_13*sqr
     Vtemp_14=V3_14*sqr
     Vtemp_15=V3_15*sqr
     Vtemp_16=V3_16*sqr
     Vtemp_17=V3_17*sqr
     Vtemp_18=V3_18*sqr
     Vtemp_19=V3_19*sqr
     Vtemp_20=V3_20*sqr
#
     V9_1+=Vtemp_1
     V9_2+=Vtemp_2
     V9_3+=Vtemp_3
     V9_4+=Vtemp_4
     V9_5+=Vtemp_5
     V9_6+=Vtemp_6
     V9_7+=Vtemp_7
     V9_8+=Vtemp_8
     V9_9+=Vtemp_9
     V9_10+=Vtemp_10
     V9_11+=Vtemp_11
     V9_12+=Vtemp_12
     V9_13+=Vtemp_13
     V9_14+=Vtemp_14
     V9_15+=Vtemp_15
     V9_16+=Vtemp_16
     V9_17+=Vtemp_17
     V9_18+=Vtemp_18
     V9_19+=Vtemp_19
     V9_20+=Vtemp_20
#
#
     etemp2_1=V9_1
     etemp2_2=V9_2
     etemp2_3=V9_3
     etemp2_4=V9_4
     etemp2_5=V9_5
     etemp2_6=V9_6
     etemp2_7=V9_7
     etemp2_8=V9_8
     etemp2_9=V9_9
     etemp2_10=V9_10
     etemp2_11=V9_11
     etemp2_12=V9_12
     etemp2_13=V9_13
     etemp2_14=V9_14
     etemp2_15=V9_15
     etemp2_16=V9_16
     etemp2_17=V9_17
     etemp2_18=V9_18
     etemp2_19=V9_19
     etemp2_20=V9_20
#
     sqr=0.0
     etemp=V4_1*etemp2_1
     sqr+=etemp
     etemp=V4_2*etemp2_2
     sqr+=etemp
     etemp=V4_3*etemp2_3
     sqr+=etemp
     etemp=V4_4*etemp2_4
     sqr+=etemp
     etemp=V4_5*etemp2_5
     sqr+=etemp
     etemp=V4_6*etemp2_6
     sqr+=etemp
     etemp=V4_7*etemp2_7
     sqr+=etemp
     etemp=V4_8*etemp2_8
     sqr+=etemp
     etemp=V4_9*etemp2_9
     sqr+=etemp
     etemp=V4_10*etemp2_10
     sqr+=etemp
     etemp=V4_11*etemp2_11
     sqr+=etemp
     etemp=V4_12*etemp2_12
     sqr+=etemp
     etemp=V4_13*etemp2_13
     sqr+=etemp
     etemp=V4_14*etemp2_14
     sqr+=etemp
     etemp=V4_15*etemp2_15
     sqr+=etemp
     etemp=V4_16*etemp2_16
     sqr+=etemp
     etemp=V4_17*etemp2_17
     sqr+=etemp
     etemp=V4_18*etemp2_18
     sqr+=etemp
     etemp=V4_19*etemp2_19
     sqr+=etemp
     etemp=V4_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V4_1*sqr
     Vtemp_2=V4_2*sqr
     Vtemp_3=V4_3*sqr
     Vtemp_4=V4_4*sqr
     Vtemp_5=V4_5*sqr
     Vtemp_6=V4_6*sqr
     Vtemp_7=V4_7*sqr
     Vtemp_8=V4_8*sqr
     Vtemp_9=V4_9*sqr
     Vtemp_10=V4_10*sqr
     Vtemp_11=V4_11*sqr
     Vtemp_12=V4_12*sqr
     Vtemp_13=V4_13*sqr
     Vtemp_14=V4_14*sqr
     Vtemp_15=V4_15*sqr
     Vtemp_16=V4_16*sqr
     Vtemp_17=V4_17*sqr
     Vtemp_18=V4_18*sqr
     Vtemp_19=V4_19*sqr
     Vtemp_20=V4_20*sqr
#
     V9_1+=Vtemp_1
     V9_2+=Vtemp_2
     V9_3+=Vtemp_3
     V9_4+=Vtemp_4
     V9_5+=Vtemp_5
     V9_6+=Vtemp_6
     V9_7+=Vtemp_7
     V9_8+=Vtemp_8
     V9_9+=Vtemp_9
     V9_10+=Vtemp_10
     V9_11+=Vtemp_11
     V9_12+=Vtemp_12
     V9_13+=Vtemp_13
     V9_14+=Vtemp_14
     V9_15+=Vtemp_15
     V9_16+=Vtemp_16
     V9_17+=Vtemp_17
     V9_18+=Vtemp_18
     V9_19+=Vtemp_19
     V9_20+=Vtemp_20
#
#
     etemp2_1=V9_1
     etemp2_2=V9_2
     etemp2_3=V9_3
     etemp2_4=V9_4
     etemp2_5=V9_5
     etemp2_6=V9_6
     etemp2_7=V9_7
     etemp2_8=V9_8
     etemp2_9=V9_9
     etemp2_10=V9_10
     etemp2_11=V9_11
     etemp2_12=V9_12
     etemp2_13=V9_13
     etemp2_14=V9_14
     etemp2_15=V9_15
     etemp2_16=V9_16
     etemp2_17=V9_17
     etemp2_18=V9_18
     etemp2_19=V9_19
     etemp2_20=V9_20
#
     sqr=0.0
     etemp=V5_1*etemp2_1
     sqr+=etemp
     etemp=V5_2*etemp2_2
     sqr+=etemp
     etemp=V5_3*etemp2_3
     sqr+=etemp
     etemp=V5_4*etemp2_4
     sqr+=etemp
     etemp=V5_5*etemp2_5
     sqr+=etemp
     etemp=V5_6*etemp2_6
     sqr+=etemp
     etemp=V5_7*etemp2_7
     sqr+=etemp
     etemp=V5_8*etemp2_8
     sqr+=etemp
     etemp=V5_9*etemp2_9
     sqr+=etemp
     etemp=V5_10*etemp2_10
     sqr+=etemp
     etemp=V5_11*etemp2_11
     sqr+=etemp
     etemp=V5_12*etemp2_12
     sqr+=etemp
     etemp=V5_13*etemp2_13
     sqr+=etemp
     etemp=V5_14*etemp2_14
     sqr+=etemp
     etemp=V5_15*etemp2_15
     sqr+=etemp
     etemp=V5_16*etemp2_16
     sqr+=etemp
     etemp=V5_17*etemp2_17
     sqr+=etemp
     etemp=V5_18*etemp2_18
     sqr+=etemp
     etemp=V5_19*etemp2_19
     sqr+=etemp
     etemp=V5_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V5_1*sqr
     Vtemp_2=V5_2*sqr
     Vtemp_3=V5_3*sqr
     Vtemp_4=V5_4*sqr
     Vtemp_5=V5_5*sqr
     Vtemp_6=V5_6*sqr
     Vtemp_7=V5_7*sqr
     Vtemp_8=V5_8*sqr
     Vtemp_9=V5_9*sqr
     Vtemp_10=V5_10*sqr
     Vtemp_11=V5_11*sqr
     Vtemp_12=V5_12*sqr
     Vtemp_13=V5_13*sqr
     Vtemp_14=V5_14*sqr
     Vtemp_15=V5_15*sqr
     Vtemp_16=V5_16*sqr
     Vtemp_17=V5_17*sqr
     Vtemp_18=V5_18*sqr
     Vtemp_19=V5_19*sqr
     Vtemp_20=V5_20*sqr
#
     V9_1+=Vtemp_1
     V9_2+=Vtemp_2
     V9_3+=Vtemp_3
     V9_4+=Vtemp_4
     V9_5+=Vtemp_5
     V9_6+=Vtemp_6
     V9_7+=Vtemp_7
     V9_8+=Vtemp_8
     V9_9+=Vtemp_9
     V9_10+=Vtemp_10
     V9_11+=Vtemp_11
     V9_12+=Vtemp_12
     V9_13+=Vtemp_13
     V9_14+=Vtemp_14
     V9_15+=Vtemp_15
     V9_16+=Vtemp_16
     V9_17+=Vtemp_17
     V9_18+=Vtemp_18
     V9_19+=Vtemp_19
     V9_20+=Vtemp_20
#
#
     etemp2_1=V9_1
     etemp2_2=V9_2
     etemp2_3=V9_3
     etemp2_4=V9_4
     etemp2_5=V9_5
     etemp2_6=V9_6
     etemp2_7=V9_7
     etemp2_8=V9_8
     etemp2_9=V9_9
     etemp2_10=V9_10
     etemp2_11=V9_11
     etemp2_12=V9_12
     etemp2_13=V9_13
     etemp2_14=V9_14
     etemp2_15=V9_15
     etemp2_16=V9_16
     etemp2_17=V9_17
     etemp2_18=V9_18
     etemp2_19=V9_19
     etemp2_20=V9_20
#
     sqr=0.0
     etemp=V6_1*etemp2_1
     sqr+=etemp
     etemp=V6_2*etemp2_2
     sqr+=etemp
     etemp=V6_3*etemp2_3
     sqr+=etemp
     etemp=V6_4*etemp2_4
     sqr+=etemp
     etemp=V6_5*etemp2_5
     sqr+=etemp
     etemp=V6_6*etemp2_6
     sqr+=etemp
     etemp=V6_7*etemp2_7
     sqr+=etemp
     etemp=V6_8*etemp2_8
     sqr+=etemp
     etemp=V6_9*etemp2_9
     sqr+=etemp
     etemp=V6_10*etemp2_10
     sqr+=etemp
     etemp=V6_11*etemp2_11
     sqr+=etemp
     etemp=V6_12*etemp2_12
     sqr+=etemp
     etemp=V6_13*etemp2_13
     sqr+=etemp
     etemp=V6_14*etemp2_14
     sqr+=etemp
     etemp=V6_15*etemp2_15
     sqr+=etemp
     etemp=V6_16*etemp2_16
     sqr+=etemp
     etemp=V6_17*etemp2_17
     sqr+=etemp
     etemp=V6_18*etemp2_18
     sqr+=etemp
     etemp=V6_19*etemp2_19
     sqr+=etemp
     etemp=V6_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V6_1*sqr
     Vtemp_2=V6_2*sqr
     Vtemp_3=V6_3*sqr
     Vtemp_4=V6_4*sqr
     Vtemp_5=V6_5*sqr
     Vtemp_6=V6_6*sqr
     Vtemp_7=V6_7*sqr
     Vtemp_8=V6_8*sqr
     Vtemp_9=V6_9*sqr
     Vtemp_10=V6_10*sqr
     Vtemp_11=V6_11*sqr
     Vtemp_12=V6_12*sqr
     Vtemp_13=V6_13*sqr
     Vtemp_14=V6_14*sqr
     Vtemp_15=V6_15*sqr
     Vtemp_16=V6_16*sqr
     Vtemp_17=V6_17*sqr
     Vtemp_18=V6_18*sqr
     Vtemp_19=V6_19*sqr
     Vtemp_20=V6_20*sqr
#
     V9_1+=Vtemp_1
     V9_2+=Vtemp_2
     V9_3+=Vtemp_3
     V9_4+=Vtemp_4
     V9_5+=Vtemp_5
     V9_6+=Vtemp_6
     V9_7+=Vtemp_7
     V9_8+=Vtemp_8
     V9_9+=Vtemp_9
     V9_10+=Vtemp_10
     V9_11+=Vtemp_11
     V9_12+=Vtemp_12
     V9_13+=Vtemp_13
     V9_14+=Vtemp_14
     V9_15+=Vtemp_15
     V9_16+=Vtemp_16
     V9_17+=Vtemp_17
     V9_18+=Vtemp_18
     V9_19+=Vtemp_19
     V9_20+=Vtemp_20
#
#
     etemp2_1=V9_1
     etemp2_2=V9_2
     etemp2_3=V9_3
     etemp2_4=V9_4
     etemp2_5=V9_5
     etemp2_6=V9_6
     etemp2_7=V9_7
     etemp2_8=V9_8
     etemp2_9=V9_9
     etemp2_10=V9_10
     etemp2_11=V9_11
     etemp2_12=V9_12
     etemp2_13=V9_13
     etemp2_14=V9_14
     etemp2_15=V9_15
     etemp2_16=V9_16
     etemp2_17=V9_17
     etemp2_18=V9_18
     etemp2_19=V9_19
     etemp2_20=V9_20
#
     sqr=0.0
     etemp=V7_1*etemp2_1
     sqr+=etemp
     etemp=V7_2*etemp2_2
     sqr+=etemp
     etemp=V7_3*etemp2_3
     sqr+=etemp
     etemp=V7_4*etemp2_4
     sqr+=etemp
     etemp=V7_5*etemp2_5
     sqr+=etemp
     etemp=V7_6*etemp2_6
     sqr+=etemp
     etemp=V7_7*etemp2_7
     sqr+=etemp
     etemp=V7_8*etemp2_8
     sqr+=etemp
     etemp=V7_9*etemp2_9
     sqr+=etemp
     etemp=V7_10*etemp2_10
     sqr+=etemp
     etemp=V7_11*etemp2_11
     sqr+=etemp
     etemp=V7_12*etemp2_12
     sqr+=etemp
     etemp=V7_13*etemp2_13
     sqr+=etemp
     etemp=V7_14*etemp2_14
     sqr+=etemp
     etemp=V7_15*etemp2_15
     sqr+=etemp
     etemp=V7_16*etemp2_16
     sqr+=etemp
     etemp=V7_17*etemp2_17
     sqr+=etemp
     etemp=V7_18*etemp2_18
     sqr+=etemp
     etemp=V7_19*etemp2_19
     sqr+=etemp
     etemp=V7_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V7_1*sqr
     Vtemp_2=V7_2*sqr
     Vtemp_3=V7_3*sqr
     Vtemp_4=V7_4*sqr
     Vtemp_5=V7_5*sqr
     Vtemp_6=V7_6*sqr
     Vtemp_7=V7_7*sqr
     Vtemp_8=V7_8*sqr
     Vtemp_9=V7_9*sqr
     Vtemp_10=V7_10*sqr
     Vtemp_11=V7_11*sqr
     Vtemp_12=V7_12*sqr
     Vtemp_13=V7_13*sqr
     Vtemp_14=V7_14*sqr
     Vtemp_15=V7_15*sqr
     Vtemp_16=V7_16*sqr
     Vtemp_17=V7_17*sqr
     Vtemp_18=V7_18*sqr
     Vtemp_19=V7_19*sqr
     Vtemp_20=V7_20*sqr
#
     V9_1+=Vtemp_1
     V9_2+=Vtemp_2
     V9_3+=Vtemp_3
     V9_4+=Vtemp_4
     V9_5+=Vtemp_5
     V9_6+=Vtemp_6
     V9_7+=Vtemp_7
     V9_8+=Vtemp_8
     V9_9+=Vtemp_9
     V9_10+=Vtemp_10
     V9_11+=Vtemp_11
     V9_12+=Vtemp_12
     V9_13+=Vtemp_13
     V9_14+=Vtemp_14
     V9_15+=Vtemp_15
     V9_16+=Vtemp_16
     V9_17+=Vtemp_17
     V9_18+=Vtemp_18
     V9_19+=Vtemp_19
     V9_20+=Vtemp_20
#
#
     etemp2_1=V9_1
     etemp2_2=V9_2
     etemp2_3=V9_3
     etemp2_4=V9_4
     etemp2_5=V9_5
     etemp2_6=V9_6
     etemp2_7=V9_7
     etemp2_8=V9_8
     etemp2_9=V9_9
     etemp2_10=V9_10
     etemp2_11=V9_11
     etemp2_12=V9_12
     etemp2_13=V9_13
     etemp2_14=V9_14
     etemp2_15=V9_15
     etemp2_16=V9_16
     etemp2_17=V9_17
     etemp2_18=V9_18
     etemp2_19=V9_19
     etemp2_20=V9_20
#
     sqr=0.0
     etemp=V8_1*etemp2_1
     sqr+=etemp
     etemp=V8_2*etemp2_2
     sqr+=etemp
     etemp=V8_3*etemp2_3
     sqr+=etemp
     etemp=V8_4*etemp2_4
     sqr+=etemp
     etemp=V8_5*etemp2_5
     sqr+=etemp
     etemp=V8_6*etemp2_6
     sqr+=etemp
     etemp=V8_7*etemp2_7
     sqr+=etemp
     etemp=V8_8*etemp2_8
     sqr+=etemp
     etemp=V8_9*etemp2_9
     sqr+=etemp
     etemp=V8_10*etemp2_10
     sqr+=etemp
     etemp=V8_11*etemp2_11
     sqr+=etemp
     etemp=V8_12*etemp2_12
     sqr+=etemp
     etemp=V8_13*etemp2_13
     sqr+=etemp
     etemp=V8_14*etemp2_14
     sqr+=etemp
     etemp=V8_15*etemp2_15
     sqr+=etemp
     etemp=V8_16*etemp2_16
     sqr+=etemp
     etemp=V8_17*etemp2_17
     sqr+=etemp
     etemp=V8_18*etemp2_18
     sqr+=etemp
     etemp=V8_19*etemp2_19
     sqr+=etemp
     etemp=V8_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V8_1*sqr
     Vtemp_2=V8_2*sqr
     Vtemp_3=V8_3*sqr
     Vtemp_4=V8_4*sqr
     Vtemp_5=V8_5*sqr
     Vtemp_6=V8_6*sqr
     Vtemp_7=V8_7*sqr
     Vtemp_8=V8_8*sqr
     Vtemp_9=V8_9*sqr
     Vtemp_10=V8_10*sqr
     Vtemp_11=V8_11*sqr
     Vtemp_12=V8_12*sqr
     Vtemp_13=V8_13*sqr
     Vtemp_14=V8_14*sqr
     Vtemp_15=V8_15*sqr
     Vtemp_16=V8_16*sqr
     Vtemp_17=V8_17*sqr
     Vtemp_18=V8_18*sqr
     Vtemp_19=V8_19*sqr
     Vtemp_20=V8_20*sqr
#
     V9_1+=Vtemp_1
     V9_2+=Vtemp_2
     V9_3+=Vtemp_3
     V9_4+=Vtemp_4
     V9_5+=Vtemp_5
     V9_6+=Vtemp_6
     V9_7+=Vtemp_7
     V9_8+=Vtemp_8
     V9_9+=Vtemp_9
     V9_10+=Vtemp_10
     V9_11+=Vtemp_11
     V9_12+=Vtemp_12
     V9_13+=Vtemp_13
     V9_14+=Vtemp_14
     V9_15+=Vtemp_15
     V9_16+=Vtemp_16
     V9_17+=Vtemp_17
     V9_18+=Vtemp_18
     V9_19+=Vtemp_19
     V9_20+=Vtemp_20
#
#
     Vtemp_1=V9_1
     Vtemp_2=V9_2
     Vtemp_3=V9_3
     Vtemp_4=V9_4
     Vtemp_5=V9_5
     Vtemp_6=V9_6
     Vtemp_7=V9_7
     Vtemp_8=V9_8
     Vtemp_9=V9_9
     Vtemp_10=V9_10
     Vtemp_11=V9_11
     Vtemp_12=V9_12
     Vtemp_13=V9_13
     Vtemp_14=V9_14
     Vtemp_15=V9_15
     Vtemp_16=V9_16
     Vtemp_17=V9_17
     Vtemp_18=V9_18
     Vtemp_19=V9_19
     Vtemp_20=V9_20
#
     sqr=0.0
#
     etemp=V9_1*Vtemp_1
     sqr+=etemp
     etemp=V9_2*Vtemp_2
     sqr+=etemp
     etemp=V9_3*Vtemp_3
     sqr+=etemp
     etemp=V9_4*Vtemp_4
     sqr+=etemp
     etemp=V9_5*Vtemp_5
     sqr+=etemp
     etemp=V9_6*Vtemp_6
     sqr+=etemp
     etemp=V9_7*Vtemp_7
     sqr+=etemp
     etemp=V9_8*Vtemp_8
     sqr+=etemp
     etemp=V9_9*Vtemp_9
     sqr+=etemp
     etemp=V9_10*Vtemp_10
     sqr+=etemp
     etemp=V9_11*Vtemp_11
     sqr+=etemp
     etemp=V9_12*Vtemp_12
     sqr+=etemp
     etemp=V9_13*Vtemp_13
     sqr+=etemp
     etemp=V9_14*Vtemp_14
     sqr+=etemp
     etemp=V9_15*Vtemp_15
     sqr+=etemp
     etemp=V9_16*Vtemp_16
     sqr+=etemp
     etemp=V9_17*Vtemp_17
     sqr+=etemp
     etemp=V9_18*Vtemp_18
     sqr+=etemp
     etemp=V9_19*Vtemp_19
     sqr+=etemp
     etemp=V9_20*Vtemp_20
     sqr+=etemp
#
       exponent=0.5
#       execute square_root sqr exponent
#       sqr2=1.0/sqr
     execute norm_fac sqr exponent
     sqr2=sqr
#
     V9_1*=sqr2
     V9_2*=sqr2
     V9_3*=sqr2
     V9_4*=sqr2
     V9_5*=sqr2
     V9_6*=sqr2
     V9_7*=sqr2
     V9_8*=sqr2
     V9_9*=sqr2
     V9_10*=sqr2
     V9_11*=sqr2
     V9_12*=sqr2
     V9_13*=sqr2
     V9_14*=sqr2
     V9_15*=sqr2
     V9_16*=sqr2
     V9_17*=sqr2
     V9_18*=sqr2
     V9_19*=sqr2
     V9_20*=sqr2
#
#------10 vectors -------------------------------
#
     etemp2_1=V10_1
     etemp2_2=V10_2
     etemp2_3=V10_3
     etemp2_4=V10_4
     etemp2_5=V10_5
     etemp2_6=V10_6
     etemp2_7=V10_7
     etemp2_8=V10_8
     etemp2_9=V10_9
     etemp2_10=V10_10
     etemp2_11=V10_11
     etemp2_12=V10_12
     etemp2_13=V10_13
     etemp2_14=V10_14
     etemp2_15=V10_15
     etemp2_16=V10_16
     etemp2_17=V10_17
     etemp2_18=V10_18
     etemp2_19=V10_19
     etemp2_20=V10_20
#
     sqr=0.0
     etemp=V1_1*etemp2_1
     sqr+=etemp
     etemp=V1_2*etemp2_2
     sqr+=etemp
     etemp=V1_3*etemp2_3
     sqr+=etemp
     etemp=V1_4*etemp2_4
     sqr+=etemp
     etemp=V1_5*etemp2_5
     sqr+=etemp
     etemp=V1_6*etemp2_6
     sqr+=etemp
     etemp=V1_7*etemp2_7
     sqr+=etemp
     etemp=V1_8*etemp2_8
     sqr+=etemp
     etemp=V1_9*etemp2_9
     sqr+=etemp
     etemp=V1_10*etemp2_10
     sqr+=etemp
     etemp=V1_11*etemp2_11
     sqr+=etemp
     etemp=V1_12*etemp2_12
     sqr+=etemp
     etemp=V1_13*etemp2_13
     sqr+=etemp
     etemp=V1_14*etemp2_14
     sqr+=etemp
     etemp=V1_15*etemp2_15
     sqr+=etemp
     etemp=V1_16*etemp2_16
     sqr+=etemp
     etemp=V1_17*etemp2_17
     sqr+=etemp
     etemp=V1_18*etemp2_18
     sqr+=etemp
     etemp=V1_19*etemp2_19
     sqr+=etemp
     etemp=V1_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V1_1*sqr
     Vtemp_2=V1_2*sqr
     Vtemp_3=V1_3*sqr
     Vtemp_4=V1_4*sqr
     Vtemp_5=V1_5*sqr
     Vtemp_6=V1_6*sqr
     Vtemp_7=V1_7*sqr
     Vtemp_8=V1_8*sqr
     Vtemp_9=V1_9*sqr
     Vtemp_10=V1_10*sqr
     Vtemp_11=V1_11*sqr
     Vtemp_12=V1_12*sqr
     Vtemp_13=V1_13*sqr
     Vtemp_14=V1_14*sqr
     Vtemp_15=V1_15*sqr
     Vtemp_16=V1_16*sqr
     Vtemp_17=V1_17*sqr
     Vtemp_18=V1_18*sqr
     Vtemp_19=V1_19*sqr
     Vtemp_20=V1_20*sqr
#
     V10_1+=Vtemp_1
     V10_2+=Vtemp_2
     V10_3+=Vtemp_3
     V10_4+=Vtemp_4
     V10_5+=Vtemp_5
     V10_6+=Vtemp_6
     V10_7+=Vtemp_7
     V10_8+=Vtemp_8
     V10_9+=Vtemp_9
     V10_10+=Vtemp_10
     V10_11+=Vtemp_11
     V10_12+=Vtemp_12
     V10_13+=Vtemp_13
     V10_14+=Vtemp_14
     V10_15+=Vtemp_15
     V10_16+=Vtemp_16
     V10_17+=Vtemp_17
     V10_18+=Vtemp_18
     V10_19+=Vtemp_19
     V10_20+=Vtemp_20
#
#
     etemp2_1=V10_1
     etemp2_2=V10_2
     etemp2_3=V10_3
     etemp2_4=V10_4
     etemp2_5=V10_5
     etemp2_6=V10_6
     etemp2_7=V10_7
     etemp2_8=V10_8
     etemp2_9=V10_9
     etemp2_10=V10_10
     etemp2_11=V10_11
     etemp2_12=V10_12
     etemp2_13=V10_13
     etemp2_14=V10_14
     etemp2_15=V10_15
     etemp2_16=V10_16
     etemp2_17=V10_17
     etemp2_18=V10_18
     etemp2_19=V10_19
     etemp2_20=V10_20
#
     sqr=0.0
     etemp=V2_1*etemp2_1
     sqr+=etemp
     etemp=V2_2*etemp2_2
     sqr+=etemp
     etemp=V2_3*etemp2_3
     sqr+=etemp
     etemp=V2_4*etemp2_4
     sqr+=etemp
     etemp=V2_5*etemp2_5
     sqr+=etemp
     etemp=V2_6*etemp2_6
     sqr+=etemp
     etemp=V2_7*etemp2_7
     sqr+=etemp
     etemp=V2_8*etemp2_8
     sqr+=etemp
     etemp=V2_9*etemp2_9
     sqr+=etemp
     etemp=V2_10*etemp2_10
     sqr+=etemp
     etemp=V2_11*etemp2_11
     sqr+=etemp
     etemp=V2_12*etemp2_12
     sqr+=etemp
     etemp=V2_13*etemp2_13
     sqr+=etemp
     etemp=V2_14*etemp2_14
     sqr+=etemp
     etemp=V2_15*etemp2_15
     sqr+=etemp
     etemp=V2_16*etemp2_16
     sqr+=etemp
     etemp=V2_17*etemp2_17
     sqr+=etemp
     etemp=V2_18*etemp2_18
     sqr+=etemp
     etemp=V2_19*etemp2_19
     sqr+=etemp
     etemp=V2_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V2_1*sqr
     Vtemp_2=V2_2*sqr
     Vtemp_3=V2_3*sqr
     Vtemp_4=V2_4*sqr
     Vtemp_5=V2_5*sqr
     Vtemp_6=V2_6*sqr
     Vtemp_7=V2_7*sqr
     Vtemp_8=V2_8*sqr
     Vtemp_9=V2_9*sqr
     Vtemp_10=V2_10*sqr
     Vtemp_11=V2_11*sqr
     Vtemp_12=V2_12*sqr
     Vtemp_13=V2_13*sqr
     Vtemp_14=V2_14*sqr
     Vtemp_15=V2_15*sqr
     Vtemp_16=V2_16*sqr
     Vtemp_17=V2_17*sqr
     Vtemp_18=V2_18*sqr
     Vtemp_19=V2_19*sqr
     Vtemp_20=V2_20*sqr
#
     V10_1+=Vtemp_1
     V10_2+=Vtemp_2
     V10_3+=Vtemp_3
     V10_4+=Vtemp_4
     V10_5+=Vtemp_5
     V10_6+=Vtemp_6
     V10_7+=Vtemp_7
     V10_8+=Vtemp_8
     V10_9+=Vtemp_9
     V10_10+=Vtemp_10
     V10_11+=Vtemp_11
     V10_12+=Vtemp_12
     V10_13+=Vtemp_13
     V10_14+=Vtemp_14
     V10_15+=Vtemp_15
     V10_16+=Vtemp_16
     V10_17+=Vtemp_17
     V10_18+=Vtemp_18
     V10_19+=Vtemp_19
     V10_20+=Vtemp_20
#
#
     etemp2_1=V10_1
     etemp2_2=V10_2
     etemp2_3=V10_3
     etemp2_4=V10_4
     etemp2_5=V10_5
     etemp2_6=V10_6
     etemp2_7=V10_7
     etemp2_8=V10_8
     etemp2_9=V10_9
     etemp2_10=V10_10
     etemp2_11=V10_11
     etemp2_12=V10_12
     etemp2_13=V10_13
     etemp2_14=V10_14
     etemp2_15=V10_15
     etemp2_16=V10_16
     etemp2_17=V10_17
     etemp2_18=V10_18
     etemp2_19=V10_19
     etemp2_20=V10_20
#
     sqr=0.0
     etemp=V3_1*etemp2_1
     sqr+=etemp
     etemp=V3_2*etemp2_2
     sqr+=etemp
     etemp=V3_3*etemp2_3
     sqr+=etemp
     etemp=V3_4*etemp2_4
     sqr+=etemp
     etemp=V3_5*etemp2_5
     sqr+=etemp
     etemp=V3_6*etemp2_6
     sqr+=etemp
     etemp=V3_7*etemp2_7
     sqr+=etemp
     etemp=V3_8*etemp2_8
     sqr+=etemp
     etemp=V3_9*etemp2_9
     sqr+=etemp
     etemp=V3_10*etemp2_10
     sqr+=etemp
     etemp=V3_11*etemp2_11
     sqr+=etemp
     etemp=V3_12*etemp2_12
     sqr+=etemp
     etemp=V3_13*etemp2_13
     sqr+=etemp
     etemp=V3_14*etemp2_14
     sqr+=etemp
     etemp=V3_15*etemp2_15
     sqr+=etemp
     etemp=V3_16*etemp2_16
     sqr+=etemp
     etemp=V3_17*etemp2_17
     sqr+=etemp
     etemp=V3_18*etemp2_18
     sqr+=etemp
     etemp=V3_19*etemp2_19
     sqr+=etemp
     etemp=V3_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V3_1*sqr
     Vtemp_2=V3_2*sqr
     Vtemp_3=V3_3*sqr
     Vtemp_4=V3_4*sqr
     Vtemp_5=V3_5*sqr
     Vtemp_6=V3_6*sqr
     Vtemp_7=V3_7*sqr
     Vtemp_8=V3_8*sqr
     Vtemp_9=V3_9*sqr
     Vtemp_10=V3_10*sqr
     Vtemp_11=V3_11*sqr
     Vtemp_12=V3_12*sqr
     Vtemp_13=V3_13*sqr
     Vtemp_14=V3_14*sqr
     Vtemp_15=V3_15*sqr
     Vtemp_16=V3_16*sqr
     Vtemp_17=V3_17*sqr
     Vtemp_18=V3_18*sqr
     Vtemp_19=V3_19*sqr
     Vtemp_20=V3_20*sqr
#
     V10_1+=Vtemp_1
     V10_2+=Vtemp_2
     V10_3+=Vtemp_3
     V10_4+=Vtemp_4
     V10_5+=Vtemp_5
     V10_6+=Vtemp_6
     V10_7+=Vtemp_7
     V10_8+=Vtemp_8
     V10_9+=Vtemp_9
     V10_10+=Vtemp_10
     V10_11+=Vtemp_11
     V10_12+=Vtemp_12
     V10_13+=Vtemp_13
     V10_14+=Vtemp_14
     V10_15+=Vtemp_15
     V10_16+=Vtemp_16
     V10_17+=Vtemp_17
     V10_18+=Vtemp_18
     V10_19+=Vtemp_19
     V10_20+=Vtemp_20
#
#
     etemp2_1=V10_1
     etemp2_2=V10_2
     etemp2_3=V10_3
     etemp2_4=V10_4
     etemp2_5=V10_5
     etemp2_6=V10_6
     etemp2_7=V10_7
     etemp2_8=V10_8
     etemp2_9=V10_9
     etemp2_10=V10_10
     etemp2_11=V10_11
     etemp2_12=V10_12
     etemp2_13=V10_13
     etemp2_14=V10_14
     etemp2_15=V10_15
     etemp2_16=V10_16
     etemp2_17=V10_17
     etemp2_18=V10_18
     etemp2_19=V10_19
     etemp2_20=V10_20
#
     sqr=0.0
     etemp=V4_1*etemp2_1
     sqr+=etemp
     etemp=V4_2*etemp2_2
     sqr+=etemp
     etemp=V4_3*etemp2_3
     sqr+=etemp
     etemp=V4_4*etemp2_4
     sqr+=etemp
     etemp=V4_5*etemp2_5
     sqr+=etemp
     etemp=V4_6*etemp2_6
     sqr+=etemp
     etemp=V4_7*etemp2_7
     sqr+=etemp
     etemp=V4_8*etemp2_8
     sqr+=etemp
     etemp=V4_9*etemp2_9
     sqr+=etemp
     etemp=V4_10*etemp2_10
     sqr+=etemp
     etemp=V4_11*etemp2_11
     sqr+=etemp
     etemp=V4_12*etemp2_12
     sqr+=etemp
     etemp=V4_13*etemp2_13
     sqr+=etemp
     etemp=V4_14*etemp2_14
     sqr+=etemp
     etemp=V4_15*etemp2_15
     sqr+=etemp
     etemp=V4_16*etemp2_16
     sqr+=etemp
     etemp=V4_17*etemp2_17
     sqr+=etemp
     etemp=V4_18*etemp2_18
     sqr+=etemp
     etemp=V4_19*etemp2_19
     sqr+=etemp
     etemp=V4_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V4_1*sqr
     Vtemp_2=V4_2*sqr
     Vtemp_3=V4_3*sqr
     Vtemp_4=V4_4*sqr
     Vtemp_5=V4_5*sqr
     Vtemp_6=V4_6*sqr
     Vtemp_7=V4_7*sqr
     Vtemp_8=V4_8*sqr
     Vtemp_9=V4_9*sqr
     Vtemp_10=V4_10*sqr
     Vtemp_11=V4_11*sqr
     Vtemp_12=V4_12*sqr
     Vtemp_13=V4_13*sqr
     Vtemp_14=V4_14*sqr
     Vtemp_15=V4_15*sqr
     Vtemp_16=V4_16*sqr
     Vtemp_17=V4_17*sqr
     Vtemp_18=V4_18*sqr
     Vtemp_19=V4_19*sqr
     Vtemp_20=V4_20*sqr
#
     V10_1+=Vtemp_1
     V10_2+=Vtemp_2
     V10_3+=Vtemp_3
     V10_4+=Vtemp_4
     V10_5+=Vtemp_5
     V10_6+=Vtemp_6
     V10_7+=Vtemp_7
     V10_8+=Vtemp_8
     V10_9+=Vtemp_9
     V10_10+=Vtemp_10
     V10_11+=Vtemp_11
     V10_12+=Vtemp_12
     V10_13+=Vtemp_13
     V10_14+=Vtemp_14
     V10_15+=Vtemp_15
     V10_16+=Vtemp_16
     V10_17+=Vtemp_17
     V10_18+=Vtemp_18
     V10_19+=Vtemp_19
     V10_20+=Vtemp_20
#
#
     etemp2_1=V10_1
     etemp2_2=V10_2
     etemp2_3=V10_3
     etemp2_4=V10_4
     etemp2_5=V10_5
     etemp2_6=V10_6
     etemp2_7=V10_7
     etemp2_8=V10_8
     etemp2_9=V10_9
     etemp2_10=V10_10
     etemp2_11=V10_11
     etemp2_12=V10_12
     etemp2_13=V10_13
     etemp2_14=V10_14
     etemp2_15=V10_15
     etemp2_16=V10_16
     etemp2_17=V10_17
     etemp2_18=V10_18
     etemp2_19=V10_19
     etemp2_20=V10_20
#
     sqr=0.0
     etemp=V5_1*etemp2_1
     sqr+=etemp
     etemp=V5_2*etemp2_2
     sqr+=etemp
     etemp=V5_3*etemp2_3
     sqr+=etemp
     etemp=V5_4*etemp2_4
     sqr+=etemp
     etemp=V5_5*etemp2_5
     sqr+=etemp
     etemp=V5_6*etemp2_6
     sqr+=etemp
     etemp=V5_7*etemp2_7
     sqr+=etemp
     etemp=V5_8*etemp2_8
     sqr+=etemp
     etemp=V5_9*etemp2_9
     sqr+=etemp
     etemp=V5_10*etemp2_10
     sqr+=etemp
     etemp=V5_11*etemp2_11
     sqr+=etemp
     etemp=V5_12*etemp2_12
     sqr+=etemp
     etemp=V5_13*etemp2_13
     sqr+=etemp
     etemp=V5_14*etemp2_14
     sqr+=etemp
     etemp=V5_15*etemp2_15
     sqr+=etemp
     etemp=V5_16*etemp2_16
     sqr+=etemp
     etemp=V5_17*etemp2_17
     sqr+=etemp
     etemp=V5_18*etemp2_18
     sqr+=etemp
     etemp=V5_19*etemp2_19
     sqr+=etemp
     etemp=V5_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V5_1*sqr
     Vtemp_2=V5_2*sqr
     Vtemp_3=V5_3*sqr
     Vtemp_4=V5_4*sqr
     Vtemp_5=V5_5*sqr
     Vtemp_6=V5_6*sqr
     Vtemp_7=V5_7*sqr
     Vtemp_8=V5_8*sqr
     Vtemp_9=V5_9*sqr
     Vtemp_10=V5_10*sqr
     Vtemp_11=V5_11*sqr
     Vtemp_12=V5_12*sqr
     Vtemp_13=V5_13*sqr
     Vtemp_14=V5_14*sqr
     Vtemp_15=V5_15*sqr
     Vtemp_16=V5_16*sqr
     Vtemp_17=V5_17*sqr
     Vtemp_18=V5_18*sqr
     Vtemp_19=V5_19*sqr
     Vtemp_20=V5_20*sqr
#
     V10_1+=Vtemp_1
     V10_2+=Vtemp_2
     V10_3+=Vtemp_3
     V10_4+=Vtemp_4
     V10_5+=Vtemp_5
     V10_6+=Vtemp_6
     V10_7+=Vtemp_7
     V10_8+=Vtemp_8
     V10_9+=Vtemp_9
     V10_10+=Vtemp_10
     V10_11+=Vtemp_11
     V10_12+=Vtemp_12
     V10_13+=Vtemp_13
     V10_14+=Vtemp_14
     V10_15+=Vtemp_15
     V10_16+=Vtemp_16
     V10_17+=Vtemp_17
     V10_18+=Vtemp_18
     V10_19+=Vtemp_19
     V10_20+=Vtemp_20
#
#
     etemp2_1=V10_1
     etemp2_2=V10_2
     etemp2_3=V10_3
     etemp2_4=V10_4
     etemp2_5=V10_5
     etemp2_6=V10_6
     etemp2_7=V10_7
     etemp2_8=V10_8
     etemp2_9=V10_9
     etemp2_10=V10_10
     etemp2_11=V10_11
     etemp2_12=V10_12
     etemp2_13=V10_13
     etemp2_14=V10_14
     etemp2_15=V10_15
     etemp2_16=V10_16
     etemp2_17=V10_17
     etemp2_18=V10_18
     etemp2_19=V10_19
     etemp2_20=V10_20
#
     sqr=0.0
     etemp=V6_1*etemp2_1
     sqr+=etemp
     etemp=V6_2*etemp2_2
     sqr+=etemp
     etemp=V6_3*etemp2_3
     sqr+=etemp
     etemp=V6_4*etemp2_4
     sqr+=etemp
     etemp=V6_5*etemp2_5
     sqr+=etemp
     etemp=V6_6*etemp2_6
     sqr+=etemp
     etemp=V6_7*etemp2_7
     sqr+=etemp
     etemp=V6_8*etemp2_8
     sqr+=etemp
     etemp=V6_9*etemp2_9
     sqr+=etemp
     etemp=V6_10*etemp2_10
     sqr+=etemp
     etemp=V6_11*etemp2_11
     sqr+=etemp
     etemp=V6_12*etemp2_12
     sqr+=etemp
     etemp=V6_13*etemp2_13
     sqr+=etemp
     etemp=V6_14*etemp2_14
     sqr+=etemp
     etemp=V6_15*etemp2_15
     sqr+=etemp
     etemp=V6_16*etemp2_16
     sqr+=etemp
     etemp=V6_17*etemp2_17
     sqr+=etemp
     etemp=V6_18*etemp2_18
     sqr+=etemp
     etemp=V6_19*etemp2_19
     sqr+=etemp
     etemp=V6_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V6_1*sqr
     Vtemp_2=V6_2*sqr
     Vtemp_3=V6_3*sqr
     Vtemp_4=V6_4*sqr
     Vtemp_5=V6_5*sqr
     Vtemp_6=V6_6*sqr
     Vtemp_7=V6_7*sqr
     Vtemp_8=V6_8*sqr
     Vtemp_9=V6_9*sqr
     Vtemp_10=V6_10*sqr
     Vtemp_11=V6_11*sqr
     Vtemp_12=V6_12*sqr
     Vtemp_13=V6_13*sqr
     Vtemp_14=V6_14*sqr
     Vtemp_15=V6_15*sqr
     Vtemp_16=V6_16*sqr
     Vtemp_17=V6_17*sqr
     Vtemp_18=V6_18*sqr
     Vtemp_19=V6_19*sqr
     Vtemp_20=V6_20*sqr
#
     V10_1+=Vtemp_1
     V10_2+=Vtemp_2
     V10_3+=Vtemp_3
     V10_4+=Vtemp_4
     V10_5+=Vtemp_5
     V10_6+=Vtemp_6
     V10_7+=Vtemp_7
     V10_8+=Vtemp_8
     V10_9+=Vtemp_9
     V10_10+=Vtemp_10
     V10_11+=Vtemp_11
     V10_12+=Vtemp_12
     V10_13+=Vtemp_13
     V10_14+=Vtemp_14
     V10_15+=Vtemp_15
     V10_16+=Vtemp_16
     V10_17+=Vtemp_17
     V10_18+=Vtemp_18
     V10_19+=Vtemp_19
     V10_20+=Vtemp_20
#
#
     etemp2_1=V10_1
     etemp2_2=V10_2
     etemp2_3=V10_3
     etemp2_4=V10_4
     etemp2_5=V10_5
     etemp2_6=V10_6
     etemp2_7=V10_7
     etemp2_8=V10_8
     etemp2_9=V10_9
     etemp2_10=V10_10
     etemp2_11=V10_11
     etemp2_12=V10_12
     etemp2_13=V10_13
     etemp2_14=V10_14
     etemp2_15=V10_15
     etemp2_16=V10_16
     etemp2_17=V10_17
     etemp2_18=V10_18
     etemp2_19=V10_19
     etemp2_20=V10_20
#
     sqr=0.0
     etemp=V7_1*etemp2_1
     sqr+=etemp
     etemp=V7_2*etemp2_2
     sqr+=etemp
     etemp=V7_3*etemp2_3
     sqr+=etemp
     etemp=V7_4*etemp2_4
     sqr+=etemp
     etemp=V7_5*etemp2_5
     sqr+=etemp
     etemp=V7_6*etemp2_6
     sqr+=etemp
     etemp=V7_7*etemp2_7
     sqr+=etemp
     etemp=V7_8*etemp2_8
     sqr+=etemp
     etemp=V7_9*etemp2_9
     sqr+=etemp
     etemp=V7_10*etemp2_10
     sqr+=etemp
     etemp=V7_11*etemp2_11
     sqr+=etemp
     etemp=V7_12*etemp2_12
     sqr+=etemp
     etemp=V7_13*etemp2_13
     sqr+=etemp
     etemp=V7_14*etemp2_14
     sqr+=etemp
     etemp=V7_15*etemp2_15
     sqr+=etemp
     etemp=V7_16*etemp2_16
     sqr+=etemp
     etemp=V7_17*etemp2_17
     sqr+=etemp
     etemp=V7_18*etemp2_18
     sqr+=etemp
     etemp=V7_19*etemp2_19
     sqr+=etemp
     etemp=V7_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V7_1*sqr
     Vtemp_2=V7_2*sqr
     Vtemp_3=V7_3*sqr
     Vtemp_4=V7_4*sqr
     Vtemp_5=V7_5*sqr
     Vtemp_6=V7_6*sqr
     Vtemp_7=V7_7*sqr
     Vtemp_8=V7_8*sqr
     Vtemp_9=V7_9*sqr
     Vtemp_10=V7_10*sqr
     Vtemp_11=V7_11*sqr
     Vtemp_12=V7_12*sqr
     Vtemp_13=V7_13*sqr
     Vtemp_14=V7_14*sqr
     Vtemp_15=V7_15*sqr
     Vtemp_16=V7_16*sqr
     Vtemp_17=V7_17*sqr
     Vtemp_18=V7_18*sqr
     Vtemp_19=V7_19*sqr
     Vtemp_20=V7_20*sqr
#
     V10_1+=Vtemp_1
     V10_2+=Vtemp_2
     V10_3+=Vtemp_3
     V10_4+=Vtemp_4
     V10_5+=Vtemp_5
     V10_6+=Vtemp_6
     V10_7+=Vtemp_7
     V10_8+=Vtemp_8
     V10_9+=Vtemp_9
     V10_10+=Vtemp_10
     V10_11+=Vtemp_11
     V10_12+=Vtemp_12
     V10_13+=Vtemp_13
     V10_14+=Vtemp_14
     V10_15+=Vtemp_15
     V10_16+=Vtemp_16
     V10_17+=Vtemp_17
     V10_18+=Vtemp_18
     V10_19+=Vtemp_19
     V10_20+=Vtemp_20
#
#
     etemp2_1=V10_1
     etemp2_2=V10_2
     etemp2_3=V10_3
     etemp2_4=V10_4
     etemp2_5=V10_5
     etemp2_6=V10_6
     etemp2_7=V10_7
     etemp2_8=V10_8
     etemp2_9=V10_9
     etemp2_10=V10_10
     etemp2_11=V10_11
     etemp2_12=V10_12
     etemp2_13=V10_13
     etemp2_14=V10_14
     etemp2_15=V10_15
     etemp2_16=V10_16
     etemp2_17=V10_17
     etemp2_18=V10_18
     etemp2_19=V10_19
     etemp2_20=V10_20
#
     sqr=0.0
     etemp=V8_1*etemp2_1
     sqr+=etemp
     etemp=V8_2*etemp2_2
     sqr+=etemp
     etemp=V8_3*etemp2_3
     sqr+=etemp
     etemp=V8_4*etemp2_4
     sqr+=etemp
     etemp=V8_5*etemp2_5
     sqr+=etemp
     etemp=V8_6*etemp2_6
     sqr+=etemp
     etemp=V8_7*etemp2_7
     sqr+=etemp
     etemp=V8_8*etemp2_8
     sqr+=etemp
     etemp=V8_9*etemp2_9
     sqr+=etemp
     etemp=V8_10*etemp2_10
     sqr+=etemp
     etemp=V8_11*etemp2_11
     sqr+=etemp
     etemp=V8_12*etemp2_12
     sqr+=etemp
     etemp=V8_13*etemp2_13
     sqr+=etemp
     etemp=V8_14*etemp2_14
     sqr+=etemp
     etemp=V8_15*etemp2_15
     sqr+=etemp
     etemp=V8_16*etemp2_16
     sqr+=etemp
     etemp=V8_17*etemp2_17
     sqr+=etemp
     etemp=V8_18*etemp2_18
     sqr+=etemp
     etemp=V8_19*etemp2_19
     sqr+=etemp
     etemp=V8_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V8_1*sqr
     Vtemp_2=V8_2*sqr
     Vtemp_3=V8_3*sqr
     Vtemp_4=V8_4*sqr
     Vtemp_5=V8_5*sqr
     Vtemp_6=V8_6*sqr
     Vtemp_7=V8_7*sqr
     Vtemp_8=V8_8*sqr
     Vtemp_9=V8_9*sqr
     Vtemp_10=V8_10*sqr
     Vtemp_11=V8_11*sqr
     Vtemp_12=V8_12*sqr
     Vtemp_13=V8_13*sqr
     Vtemp_14=V8_14*sqr
     Vtemp_15=V8_15*sqr
     Vtemp_16=V8_16*sqr
     Vtemp_17=V8_17*sqr
     Vtemp_18=V8_18*sqr
     Vtemp_19=V8_19*sqr
     Vtemp_20=V8_20*sqr
#
     V10_1+=Vtemp_1
     V10_2+=Vtemp_2
     V10_3+=Vtemp_3
     V10_4+=Vtemp_4
     V10_5+=Vtemp_5
     V10_6+=Vtemp_6
     V10_7+=Vtemp_7
     V10_8+=Vtemp_8
     V10_9+=Vtemp_9
     V10_10+=Vtemp_10
     V10_11+=Vtemp_11
     V10_12+=Vtemp_12
     V10_13+=Vtemp_13
     V10_14+=Vtemp_14
     V10_15+=Vtemp_15
     V10_16+=Vtemp_16
     V10_17+=Vtemp_17
     V10_18+=Vtemp_18
     V10_19+=Vtemp_19
     V10_20+=Vtemp_20
#
#
     etemp2_1=V10_1
     etemp2_2=V10_2
     etemp2_3=V10_3
     etemp2_4=V10_4
     etemp2_5=V10_5
     etemp2_6=V10_6
     etemp2_7=V10_7
     etemp2_8=V10_8
     etemp2_9=V10_9
     etemp2_10=V10_10
     etemp2_11=V10_11
     etemp2_12=V10_12
     etemp2_13=V10_13
     etemp2_14=V10_14
     etemp2_15=V10_15
     etemp2_16=V10_16
     etemp2_17=V10_17
     etemp2_18=V10_18
     etemp2_19=V10_19
     etemp2_20=V10_20
#
     sqr=0.0
     etemp=V9_1*etemp2_1
     sqr+=etemp
     etemp=V9_2*etemp2_2
     sqr+=etemp
     etemp=V9_3*etemp2_3
     sqr+=etemp
     etemp=V9_4*etemp2_4
     sqr+=etemp
     etemp=V9_5*etemp2_5
     sqr+=etemp
     etemp=V9_6*etemp2_6
     sqr+=etemp
     etemp=V9_7*etemp2_7
     sqr+=etemp
     etemp=V9_8*etemp2_8
     sqr+=etemp
     etemp=V9_9*etemp2_9
     sqr+=etemp
     etemp=V9_10*etemp2_10
     sqr+=etemp
     etemp=V9_11*etemp2_11
     sqr+=etemp
     etemp=V9_12*etemp2_12
     sqr+=etemp
     etemp=V9_13*etemp2_13
     sqr+=etemp
     etemp=V9_14*etemp2_14
     sqr+=etemp
     etemp=V9_15*etemp2_15
     sqr+=etemp
     etemp=V9_16*etemp2_16
     sqr+=etemp
     etemp=V9_17*etemp2_17
     sqr+=etemp
     etemp=V9_18*etemp2_18
     sqr+=etemp
     etemp=V9_19*etemp2_19
     sqr+=etemp
     etemp=V9_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V9_1*sqr
     Vtemp_2=V9_2*sqr
     Vtemp_3=V9_3*sqr
     Vtemp_4=V9_4*sqr
     Vtemp_5=V9_5*sqr
     Vtemp_6=V9_6*sqr
     Vtemp_7=V9_7*sqr
     Vtemp_8=V9_8*sqr
     Vtemp_9=V9_9*sqr
     Vtemp_10=V9_10*sqr
     Vtemp_11=V9_11*sqr
     Vtemp_12=V9_12*sqr
     Vtemp_13=V9_13*sqr
     Vtemp_14=V9_14*sqr
     Vtemp_15=V9_15*sqr
     Vtemp_16=V9_16*sqr
     Vtemp_17=V9_17*sqr
     Vtemp_18=V9_18*sqr
     Vtemp_19=V9_19*sqr
     Vtemp_20=V9_20*sqr
#
     V10_1+=Vtemp_1
     V10_2+=Vtemp_2
     V10_3+=Vtemp_3
     V10_4+=Vtemp_4
     V10_5+=Vtemp_5
     V10_6+=Vtemp_6
     V10_7+=Vtemp_7
     V10_8+=Vtemp_8
     V10_9+=Vtemp_9
     V10_10+=Vtemp_10
     V10_11+=Vtemp_11
     V10_12+=Vtemp_12
     V10_13+=Vtemp_13
     V10_14+=Vtemp_14
     V10_15+=Vtemp_15
     V10_16+=Vtemp_16
     V10_17+=Vtemp_17
     V10_18+=Vtemp_18
     V10_19+=Vtemp_19
     V10_20+=Vtemp_20
#
#
     Vtemp_1=V10_1
     Vtemp_2=V10_2
     Vtemp_3=V10_3
     Vtemp_4=V10_4
     Vtemp_5=V10_5
     Vtemp_6=V10_6
     Vtemp_7=V10_7
     Vtemp_8=V10_8
     Vtemp_9=V10_9
     Vtemp_10=V10_10
     Vtemp_11=V10_11
     Vtemp_12=V10_12
     Vtemp_13=V10_13
     Vtemp_14=V10_14
     Vtemp_15=V10_15
     Vtemp_16=V10_16
     Vtemp_17=V10_17
     Vtemp_18=V10_18
     Vtemp_19=V10_19
     Vtemp_20=V10_20
#
     sqr=0.0
#
     etemp=V10_1*Vtemp_1
     sqr+=etemp
     etemp=V10_2*Vtemp_2
     sqr+=etemp
     etemp=V10_3*Vtemp_3
     sqr+=etemp
     etemp=V10_4*Vtemp_4
     sqr+=etemp
     etemp=V10_5*Vtemp_5
     sqr+=etemp
     etemp=V10_6*Vtemp_6
     sqr+=etemp
     etemp=V10_7*Vtemp_7
     sqr+=etemp
     etemp=V10_8*Vtemp_8
     sqr+=etemp
     etemp=V10_9*Vtemp_9
     sqr+=etemp
     etemp=V10_10*Vtemp_10
     sqr+=etemp
     etemp=V10_11*Vtemp_11
     sqr+=etemp
     etemp=V10_12*Vtemp_12
     sqr+=etemp
     etemp=V10_13*Vtemp_13
     sqr+=etemp
     etemp=V10_14*Vtemp_14
     sqr+=etemp
     etemp=V10_15*Vtemp_15
     sqr+=etemp
     etemp=V10_16*Vtemp_16
     sqr+=etemp
     etemp=V10_17*Vtemp_17
     sqr+=etemp
     etemp=V10_18*Vtemp_18
     sqr+=etemp
     etemp=V10_19*Vtemp_19
     sqr+=etemp
     etemp=V10_20*Vtemp_20
     sqr+=etemp
#
       exponent=0.5
#       execute square_root sqr exponent
#       sqr2=1.0/sqr
     execute norm_fac sqr exponent
     sqr2=sqr
#
     V10_1*=sqr2
     V10_2*=sqr2
     V10_3*=sqr2
     V10_4*=sqr2
     V10_5*=sqr2
     V10_6*=sqr2
     V10_7*=sqr2
     V10_8*=sqr2
     V10_9*=sqr2
     V10_10*=sqr2
     V10_11*=sqr2
     V10_12*=sqr2
     V10_13*=sqr2
     V10_14*=sqr2
     V10_15*=sqr2
     V10_16*=sqr2
     V10_17*=sqr2
     V10_18*=sqr2
     V10_19*=sqr2
     V10_20*=sqr2
#
#------11 vectors -------------------------------
#
     etemp2_1=V11_1
     etemp2_2=V11_2
     etemp2_3=V11_3
     etemp2_4=V11_4
     etemp2_5=V11_5
     etemp2_6=V11_6
     etemp2_7=V11_7
     etemp2_8=V11_8
     etemp2_9=V11_9
     etemp2_10=V11_10
     etemp2_11=V11_11
     etemp2_12=V11_12
     etemp2_13=V11_13
     etemp2_14=V11_14
     etemp2_15=V11_15
     etemp2_16=V11_16
     etemp2_17=V11_17
     etemp2_18=V11_18
     etemp2_19=V11_19
     etemp2_20=V11_20
#
     sqr=0.0
     etemp=V1_1*etemp2_1
     sqr+=etemp
     etemp=V1_2*etemp2_2
     sqr+=etemp
     etemp=V1_3*etemp2_3
     sqr+=etemp
     etemp=V1_4*etemp2_4
     sqr+=etemp
     etemp=V1_5*etemp2_5
     sqr+=etemp
     etemp=V1_6*etemp2_6
     sqr+=etemp
     etemp=V1_7*etemp2_7
     sqr+=etemp
     etemp=V1_8*etemp2_8
     sqr+=etemp
     etemp=V1_9*etemp2_9
     sqr+=etemp
     etemp=V1_10*etemp2_10
     sqr+=etemp
     etemp=V1_11*etemp2_11
     sqr+=etemp
     etemp=V1_12*etemp2_12
     sqr+=etemp
     etemp=V1_13*etemp2_13
     sqr+=etemp
     etemp=V1_14*etemp2_14
     sqr+=etemp
     etemp=V1_15*etemp2_15
     sqr+=etemp
     etemp=V1_16*etemp2_16
     sqr+=etemp
     etemp=V1_17*etemp2_17
     sqr+=etemp
     etemp=V1_18*etemp2_18
     sqr+=etemp
     etemp=V1_19*etemp2_19
     sqr+=etemp
     etemp=V1_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V1_1*sqr
     Vtemp_2=V1_2*sqr
     Vtemp_3=V1_3*sqr
     Vtemp_4=V1_4*sqr
     Vtemp_5=V1_5*sqr
     Vtemp_6=V1_6*sqr
     Vtemp_7=V1_7*sqr
     Vtemp_8=V1_8*sqr
     Vtemp_9=V1_9*sqr
     Vtemp_10=V1_10*sqr
     Vtemp_11=V1_11*sqr
     Vtemp_12=V1_12*sqr
     Vtemp_13=V1_13*sqr
     Vtemp_14=V1_14*sqr
     Vtemp_15=V1_15*sqr
     Vtemp_16=V1_16*sqr
     Vtemp_17=V1_17*sqr
     Vtemp_18=V1_18*sqr
     Vtemp_19=V1_19*sqr
     Vtemp_20=V1_20*sqr
#
     V11_1+=Vtemp_1
     V11_2+=Vtemp_2
     V11_3+=Vtemp_3
     V11_4+=Vtemp_4
     V11_5+=Vtemp_5
     V11_6+=Vtemp_6
     V11_7+=Vtemp_7
     V11_8+=Vtemp_8
     V11_9+=Vtemp_9
     V11_10+=Vtemp_10
     V11_11+=Vtemp_11
     V11_12+=Vtemp_12
     V11_13+=Vtemp_13
     V11_14+=Vtemp_14
     V11_15+=Vtemp_15
     V11_16+=Vtemp_16
     V11_17+=Vtemp_17
     V11_18+=Vtemp_18
     V11_19+=Vtemp_19
     V11_20+=Vtemp_20
#
#
     etemp2_1=V11_1
     etemp2_2=V11_2
     etemp2_3=V11_3
     etemp2_4=V11_4
     etemp2_5=V11_5
     etemp2_6=V11_6
     etemp2_7=V11_7
     etemp2_8=V11_8
     etemp2_9=V11_9
     etemp2_10=V11_10
     etemp2_11=V11_11
     etemp2_12=V11_12
     etemp2_13=V11_13
     etemp2_14=V11_14
     etemp2_15=V11_15
     etemp2_16=V11_16
     etemp2_17=V11_17
     etemp2_18=V11_18
     etemp2_19=V11_19
     etemp2_20=V11_20
#
     sqr=0.0
     etemp=V2_1*etemp2_1
     sqr+=etemp
     etemp=V2_2*etemp2_2
     sqr+=etemp
     etemp=V2_3*etemp2_3
     sqr+=etemp
     etemp=V2_4*etemp2_4
     sqr+=etemp
     etemp=V2_5*etemp2_5
     sqr+=etemp
     etemp=V2_6*etemp2_6
     sqr+=etemp
     etemp=V2_7*etemp2_7
     sqr+=etemp
     etemp=V2_8*etemp2_8
     sqr+=etemp
     etemp=V2_9*etemp2_9
     sqr+=etemp
     etemp=V2_10*etemp2_10
     sqr+=etemp
     etemp=V2_11*etemp2_11
     sqr+=etemp
     etemp=V2_12*etemp2_12
     sqr+=etemp
     etemp=V2_13*etemp2_13
     sqr+=etemp
     etemp=V2_14*etemp2_14
     sqr+=etemp
     etemp=V2_15*etemp2_15
     sqr+=etemp
     etemp=V2_16*etemp2_16
     sqr+=etemp
     etemp=V2_17*etemp2_17
     sqr+=etemp
     etemp=V2_18*etemp2_18
     sqr+=etemp
     etemp=V2_19*etemp2_19
     sqr+=etemp
     etemp=V2_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V2_1*sqr
     Vtemp_2=V2_2*sqr
     Vtemp_3=V2_3*sqr
     Vtemp_4=V2_4*sqr
     Vtemp_5=V2_5*sqr
     Vtemp_6=V2_6*sqr
     Vtemp_7=V2_7*sqr
     Vtemp_8=V2_8*sqr
     Vtemp_9=V2_9*sqr
     Vtemp_10=V2_10*sqr
     Vtemp_11=V2_11*sqr
     Vtemp_12=V2_12*sqr
     Vtemp_13=V2_13*sqr
     Vtemp_14=V2_14*sqr
     Vtemp_15=V2_15*sqr
     Vtemp_16=V2_16*sqr
     Vtemp_17=V2_17*sqr
     Vtemp_18=V2_18*sqr
     Vtemp_19=V2_19*sqr
     Vtemp_20=V2_20*sqr
#
     V11_1+=Vtemp_1
     V11_2+=Vtemp_2
     V11_3+=Vtemp_3
     V11_4+=Vtemp_4
     V11_5+=Vtemp_5
     V11_6+=Vtemp_6
     V11_7+=Vtemp_7
     V11_8+=Vtemp_8
     V11_9+=Vtemp_9
     V11_10+=Vtemp_10
     V11_11+=Vtemp_11
     V11_12+=Vtemp_12
     V11_13+=Vtemp_13
     V11_14+=Vtemp_14
     V11_15+=Vtemp_15
     V11_16+=Vtemp_16
     V11_17+=Vtemp_17
     V11_18+=Vtemp_18
     V11_19+=Vtemp_19
     V11_20+=Vtemp_20
#
#
     etemp2_1=V11_1
     etemp2_2=V11_2
     etemp2_3=V11_3
     etemp2_4=V11_4
     etemp2_5=V11_5
     etemp2_6=V11_6
     etemp2_7=V11_7
     etemp2_8=V11_8
     etemp2_9=V11_9
     etemp2_10=V11_10
     etemp2_11=V11_11
     etemp2_12=V11_12
     etemp2_13=V11_13
     etemp2_14=V11_14
     etemp2_15=V11_15
     etemp2_16=V11_16
     etemp2_17=V11_17
     etemp2_18=V11_18
     etemp2_19=V11_19
     etemp2_20=V11_20
#
     sqr=0.0
     etemp=V3_1*etemp2_1
     sqr+=etemp
     etemp=V3_2*etemp2_2
     sqr+=etemp
     etemp=V3_3*etemp2_3
     sqr+=etemp
     etemp=V3_4*etemp2_4
     sqr+=etemp
     etemp=V3_5*etemp2_5
     sqr+=etemp
     etemp=V3_6*etemp2_6
     sqr+=etemp
     etemp=V3_7*etemp2_7
     sqr+=etemp
     etemp=V3_8*etemp2_8
     sqr+=etemp
     etemp=V3_9*etemp2_9
     sqr+=etemp
     etemp=V3_10*etemp2_10
     sqr+=etemp
     etemp=V3_11*etemp2_11
     sqr+=etemp
     etemp=V3_12*etemp2_12
     sqr+=etemp
     etemp=V3_13*etemp2_13
     sqr+=etemp
     etemp=V3_14*etemp2_14
     sqr+=etemp
     etemp=V3_15*etemp2_15
     sqr+=etemp
     etemp=V3_16*etemp2_16
     sqr+=etemp
     etemp=V3_17*etemp2_17
     sqr+=etemp
     etemp=V3_18*etemp2_18
     sqr+=etemp
     etemp=V3_19*etemp2_19
     sqr+=etemp
     etemp=V3_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V3_1*sqr
     Vtemp_2=V3_2*sqr
     Vtemp_3=V3_3*sqr
     Vtemp_4=V3_4*sqr
     Vtemp_5=V3_5*sqr
     Vtemp_6=V3_6*sqr
     Vtemp_7=V3_7*sqr
     Vtemp_8=V3_8*sqr
     Vtemp_9=V3_9*sqr
     Vtemp_10=V3_10*sqr
     Vtemp_11=V3_11*sqr
     Vtemp_12=V3_12*sqr
     Vtemp_13=V3_13*sqr
     Vtemp_14=V3_14*sqr
     Vtemp_15=V3_15*sqr
     Vtemp_16=V3_16*sqr
     Vtemp_17=V3_17*sqr
     Vtemp_18=V3_18*sqr
     Vtemp_19=V3_19*sqr
     Vtemp_20=V3_20*sqr
#
     V11_1+=Vtemp_1
     V11_2+=Vtemp_2
     V11_3+=Vtemp_3
     V11_4+=Vtemp_4
     V11_5+=Vtemp_5
     V11_6+=Vtemp_6
     V11_7+=Vtemp_7
     V11_8+=Vtemp_8
     V11_9+=Vtemp_9
     V11_10+=Vtemp_10
     V11_11+=Vtemp_11
     V11_12+=Vtemp_12
     V11_13+=Vtemp_13
     V11_14+=Vtemp_14
     V11_15+=Vtemp_15
     V11_16+=Vtemp_16
     V11_17+=Vtemp_17
     V11_18+=Vtemp_18
     V11_19+=Vtemp_19
     V11_20+=Vtemp_20
#
#
     etemp2_1=V11_1
     etemp2_2=V11_2
     etemp2_3=V11_3
     etemp2_4=V11_4
     etemp2_5=V11_5
     etemp2_6=V11_6
     etemp2_7=V11_7
     etemp2_8=V11_8
     etemp2_9=V11_9
     etemp2_10=V11_10
     etemp2_11=V11_11
     etemp2_12=V11_12
     etemp2_13=V11_13
     etemp2_14=V11_14
     etemp2_15=V11_15
     etemp2_16=V11_16
     etemp2_17=V11_17
     etemp2_18=V11_18
     etemp2_19=V11_19
     etemp2_20=V11_20
#
     sqr=0.0
     etemp=V4_1*etemp2_1
     sqr+=etemp
     etemp=V4_2*etemp2_2
     sqr+=etemp
     etemp=V4_3*etemp2_3
     sqr+=etemp
     etemp=V4_4*etemp2_4
     sqr+=etemp
     etemp=V4_5*etemp2_5
     sqr+=etemp
     etemp=V4_6*etemp2_6
     sqr+=etemp
     etemp=V4_7*etemp2_7
     sqr+=etemp
     etemp=V4_8*etemp2_8
     sqr+=etemp
     etemp=V4_9*etemp2_9
     sqr+=etemp
     etemp=V4_10*etemp2_10
     sqr+=etemp
     etemp=V4_11*etemp2_11
     sqr+=etemp
     etemp=V4_12*etemp2_12
     sqr+=etemp
     etemp=V4_13*etemp2_13
     sqr+=etemp
     etemp=V4_14*etemp2_14
     sqr+=etemp
     etemp=V4_15*etemp2_15
     sqr+=etemp
     etemp=V4_16*etemp2_16
     sqr+=etemp
     etemp=V4_17*etemp2_17
     sqr+=etemp
     etemp=V4_18*etemp2_18
     sqr+=etemp
     etemp=V4_19*etemp2_19
     sqr+=etemp
     etemp=V4_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V4_1*sqr
     Vtemp_2=V4_2*sqr
     Vtemp_3=V4_3*sqr
     Vtemp_4=V4_4*sqr
     Vtemp_5=V4_5*sqr
     Vtemp_6=V4_6*sqr
     Vtemp_7=V4_7*sqr
     Vtemp_8=V4_8*sqr
     Vtemp_9=V4_9*sqr
     Vtemp_10=V4_10*sqr
     Vtemp_11=V4_11*sqr
     Vtemp_12=V4_12*sqr
     Vtemp_13=V4_13*sqr
     Vtemp_14=V4_14*sqr
     Vtemp_15=V4_15*sqr
     Vtemp_16=V4_16*sqr
     Vtemp_17=V4_17*sqr
     Vtemp_18=V4_18*sqr
     Vtemp_19=V4_19*sqr
     Vtemp_20=V4_20*sqr
#
     V11_1+=Vtemp_1
     V11_2+=Vtemp_2
     V11_3+=Vtemp_3
     V11_4+=Vtemp_4
     V11_5+=Vtemp_5
     V11_6+=Vtemp_6
     V11_7+=Vtemp_7
     V11_8+=Vtemp_8
     V11_9+=Vtemp_9
     V11_10+=Vtemp_10
     V11_11+=Vtemp_11
     V11_12+=Vtemp_12
     V11_13+=Vtemp_13
     V11_14+=Vtemp_14
     V11_15+=Vtemp_15
     V11_16+=Vtemp_16
     V11_17+=Vtemp_17
     V11_18+=Vtemp_18
     V11_19+=Vtemp_19
     V11_20+=Vtemp_20
#
#
     etemp2_1=V11_1
     etemp2_2=V11_2
     etemp2_3=V11_3
     etemp2_4=V11_4
     etemp2_5=V11_5
     etemp2_6=V11_6
     etemp2_7=V11_7
     etemp2_8=V11_8
     etemp2_9=V11_9
     etemp2_10=V11_10
     etemp2_11=V11_11
     etemp2_12=V11_12
     etemp2_13=V11_13
     etemp2_14=V11_14
     etemp2_15=V11_15
     etemp2_16=V11_16
     etemp2_17=V11_17
     etemp2_18=V11_18
     etemp2_19=V11_19
     etemp2_20=V11_20
#
     sqr=0.0
     etemp=V5_1*etemp2_1
     sqr+=etemp
     etemp=V5_2*etemp2_2
     sqr+=etemp
     etemp=V5_3*etemp2_3
     sqr+=etemp
     etemp=V5_4*etemp2_4
     sqr+=etemp
     etemp=V5_5*etemp2_5
     sqr+=etemp
     etemp=V5_6*etemp2_6
     sqr+=etemp
     etemp=V5_7*etemp2_7
     sqr+=etemp
     etemp=V5_8*etemp2_8
     sqr+=etemp
     etemp=V5_9*etemp2_9
     sqr+=etemp
     etemp=V5_10*etemp2_10
     sqr+=etemp
     etemp=V5_11*etemp2_11
     sqr+=etemp
     etemp=V5_12*etemp2_12
     sqr+=etemp
     etemp=V5_13*etemp2_13
     sqr+=etemp
     etemp=V5_14*etemp2_14
     sqr+=etemp
     etemp=V5_15*etemp2_15
     sqr+=etemp
     etemp=V5_16*etemp2_16
     sqr+=etemp
     etemp=V5_17*etemp2_17
     sqr+=etemp
     etemp=V5_18*etemp2_18
     sqr+=etemp
     etemp=V5_19*etemp2_19
     sqr+=etemp
     etemp=V5_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V5_1*sqr
     Vtemp_2=V5_2*sqr
     Vtemp_3=V5_3*sqr
     Vtemp_4=V5_4*sqr
     Vtemp_5=V5_5*sqr
     Vtemp_6=V5_6*sqr
     Vtemp_7=V5_7*sqr
     Vtemp_8=V5_8*sqr
     Vtemp_9=V5_9*sqr
     Vtemp_10=V5_10*sqr
     Vtemp_11=V5_11*sqr
     Vtemp_12=V5_12*sqr
     Vtemp_13=V5_13*sqr
     Vtemp_14=V5_14*sqr
     Vtemp_15=V5_15*sqr
     Vtemp_16=V5_16*sqr
     Vtemp_17=V5_17*sqr
     Vtemp_18=V5_18*sqr
     Vtemp_19=V5_19*sqr
     Vtemp_20=V5_20*sqr
#
     V11_1+=Vtemp_1
     V11_2+=Vtemp_2
     V11_3+=Vtemp_3
     V11_4+=Vtemp_4
     V11_5+=Vtemp_5
     V11_6+=Vtemp_6
     V11_7+=Vtemp_7
     V11_8+=Vtemp_8
     V11_9+=Vtemp_9
     V11_10+=Vtemp_10
     V11_11+=Vtemp_11
     V11_12+=Vtemp_12
     V11_13+=Vtemp_13
     V11_14+=Vtemp_14
     V11_15+=Vtemp_15
     V11_16+=Vtemp_16
     V11_17+=Vtemp_17
     V11_18+=Vtemp_18
     V11_19+=Vtemp_19
     V11_20+=Vtemp_20
#
#
     etemp2_1=V11_1
     etemp2_2=V11_2
     etemp2_3=V11_3
     etemp2_4=V11_4
     etemp2_5=V11_5
     etemp2_6=V11_6
     etemp2_7=V11_7
     etemp2_8=V11_8
     etemp2_9=V11_9
     etemp2_10=V11_10
     etemp2_11=V11_11
     etemp2_12=V11_12
     etemp2_13=V11_13
     etemp2_14=V11_14
     etemp2_15=V11_15
     etemp2_16=V11_16
     etemp2_17=V11_17
     etemp2_18=V11_18
     etemp2_19=V11_19
     etemp2_20=V11_20
#
     sqr=0.0
     etemp=V6_1*etemp2_1
     sqr+=etemp
     etemp=V6_2*etemp2_2
     sqr+=etemp
     etemp=V6_3*etemp2_3
     sqr+=etemp
     etemp=V6_4*etemp2_4
     sqr+=etemp
     etemp=V6_5*etemp2_5
     sqr+=etemp
     etemp=V6_6*etemp2_6
     sqr+=etemp
     etemp=V6_7*etemp2_7
     sqr+=etemp
     etemp=V6_8*etemp2_8
     sqr+=etemp
     etemp=V6_9*etemp2_9
     sqr+=etemp
     etemp=V6_10*etemp2_10
     sqr+=etemp
     etemp=V6_11*etemp2_11
     sqr+=etemp
     etemp=V6_12*etemp2_12
     sqr+=etemp
     etemp=V6_13*etemp2_13
     sqr+=etemp
     etemp=V6_14*etemp2_14
     sqr+=etemp
     etemp=V6_15*etemp2_15
     sqr+=etemp
     etemp=V6_16*etemp2_16
     sqr+=etemp
     etemp=V6_17*etemp2_17
     sqr+=etemp
     etemp=V6_18*etemp2_18
     sqr+=etemp
     etemp=V6_19*etemp2_19
     sqr+=etemp
     etemp=V6_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V6_1*sqr
     Vtemp_2=V6_2*sqr
     Vtemp_3=V6_3*sqr
     Vtemp_4=V6_4*sqr
     Vtemp_5=V6_5*sqr
     Vtemp_6=V6_6*sqr
     Vtemp_7=V6_7*sqr
     Vtemp_8=V6_8*sqr
     Vtemp_9=V6_9*sqr
     Vtemp_10=V6_10*sqr
     Vtemp_11=V6_11*sqr
     Vtemp_12=V6_12*sqr
     Vtemp_13=V6_13*sqr
     Vtemp_14=V6_14*sqr
     Vtemp_15=V6_15*sqr
     Vtemp_16=V6_16*sqr
     Vtemp_17=V6_17*sqr
     Vtemp_18=V6_18*sqr
     Vtemp_19=V6_19*sqr
     Vtemp_20=V6_20*sqr
#
     V11_1+=Vtemp_1
     V11_2+=Vtemp_2
     V11_3+=Vtemp_3
     V11_4+=Vtemp_4
     V11_5+=Vtemp_5
     V11_6+=Vtemp_6
     V11_7+=Vtemp_7
     V11_8+=Vtemp_8
     V11_9+=Vtemp_9
     V11_10+=Vtemp_10
     V11_11+=Vtemp_11
     V11_12+=Vtemp_12
     V11_13+=Vtemp_13
     V11_14+=Vtemp_14
     V11_15+=Vtemp_15
     V11_16+=Vtemp_16
     V11_17+=Vtemp_17
     V11_18+=Vtemp_18
     V11_19+=Vtemp_19
     V11_20+=Vtemp_20
#
#
     etemp2_1=V11_1
     etemp2_2=V11_2
     etemp2_3=V11_3
     etemp2_4=V11_4
     etemp2_5=V11_5
     etemp2_6=V11_6
     etemp2_7=V11_7
     etemp2_8=V11_8
     etemp2_9=V11_9
     etemp2_10=V11_10
     etemp2_11=V11_11
     etemp2_12=V11_12
     etemp2_13=V11_13
     etemp2_14=V11_14
     etemp2_15=V11_15
     etemp2_16=V11_16
     etemp2_17=V11_17
     etemp2_18=V11_18
     etemp2_19=V11_19
     etemp2_20=V11_20
#
     sqr=0.0
     etemp=V7_1*etemp2_1
     sqr+=etemp
     etemp=V7_2*etemp2_2
     sqr+=etemp
     etemp=V7_3*etemp2_3
     sqr+=etemp
     etemp=V7_4*etemp2_4
     sqr+=etemp
     etemp=V7_5*etemp2_5
     sqr+=etemp
     etemp=V7_6*etemp2_6
     sqr+=etemp
     etemp=V7_7*etemp2_7
     sqr+=etemp
     etemp=V7_8*etemp2_8
     sqr+=etemp
     etemp=V7_9*etemp2_9
     sqr+=etemp
     etemp=V7_10*etemp2_10
     sqr+=etemp
     etemp=V7_11*etemp2_11
     sqr+=etemp
     etemp=V7_12*etemp2_12
     sqr+=etemp
     etemp=V7_13*etemp2_13
     sqr+=etemp
     etemp=V7_14*etemp2_14
     sqr+=etemp
     etemp=V7_15*etemp2_15
     sqr+=etemp
     etemp=V7_16*etemp2_16
     sqr+=etemp
     etemp=V7_17*etemp2_17
     sqr+=etemp
     etemp=V7_18*etemp2_18
     sqr+=etemp
     etemp=V7_19*etemp2_19
     sqr+=etemp
     etemp=V7_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V7_1*sqr
     Vtemp_2=V7_2*sqr
     Vtemp_3=V7_3*sqr
     Vtemp_4=V7_4*sqr
     Vtemp_5=V7_5*sqr
     Vtemp_6=V7_6*sqr
     Vtemp_7=V7_7*sqr
     Vtemp_8=V7_8*sqr
     Vtemp_9=V7_9*sqr
     Vtemp_10=V7_10*sqr
     Vtemp_11=V7_11*sqr
     Vtemp_12=V7_12*sqr
     Vtemp_13=V7_13*sqr
     Vtemp_14=V7_14*sqr
     Vtemp_15=V7_15*sqr
     Vtemp_16=V7_16*sqr
     Vtemp_17=V7_17*sqr
     Vtemp_18=V7_18*sqr
     Vtemp_19=V7_19*sqr
     Vtemp_20=V7_20*sqr
#
     V11_1+=Vtemp_1
     V11_2+=Vtemp_2
     V11_3+=Vtemp_3
     V11_4+=Vtemp_4
     V11_5+=Vtemp_5
     V11_6+=Vtemp_6
     V11_7+=Vtemp_7
     V11_8+=Vtemp_8
     V11_9+=Vtemp_9
     V11_10+=Vtemp_10
     V11_11+=Vtemp_11
     V11_12+=Vtemp_12
     V11_13+=Vtemp_13
     V11_14+=Vtemp_14
     V11_15+=Vtemp_15
     V11_16+=Vtemp_16
     V11_17+=Vtemp_17
     V11_18+=Vtemp_18
     V11_19+=Vtemp_19
     V11_20+=Vtemp_20
#
#
     etemp2_1=V11_1
     etemp2_2=V11_2
     etemp2_3=V11_3
     etemp2_4=V11_4
     etemp2_5=V11_5
     etemp2_6=V11_6
     etemp2_7=V11_7
     etemp2_8=V11_8
     etemp2_9=V11_9
     etemp2_10=V11_10
     etemp2_11=V11_11
     etemp2_12=V11_12
     etemp2_13=V11_13
     etemp2_14=V11_14
     etemp2_15=V11_15
     etemp2_16=V11_16
     etemp2_17=V11_17
     etemp2_18=V11_18
     etemp2_19=V11_19
     etemp2_20=V11_20
#
     sqr=0.0
     etemp=V8_1*etemp2_1
     sqr+=etemp
     etemp=V8_2*etemp2_2
     sqr+=etemp
     etemp=V8_3*etemp2_3
     sqr+=etemp
     etemp=V8_4*etemp2_4
     sqr+=etemp
     etemp=V8_5*etemp2_5
     sqr+=etemp
     etemp=V8_6*etemp2_6
     sqr+=etemp
     etemp=V8_7*etemp2_7
     sqr+=etemp
     etemp=V8_8*etemp2_8
     sqr+=etemp
     etemp=V8_9*etemp2_9
     sqr+=etemp
     etemp=V8_10*etemp2_10
     sqr+=etemp
     etemp=V8_11*etemp2_11
     sqr+=etemp
     etemp=V8_12*etemp2_12
     sqr+=etemp
     etemp=V8_13*etemp2_13
     sqr+=etemp
     etemp=V8_14*etemp2_14
     sqr+=etemp
     etemp=V8_15*etemp2_15
     sqr+=etemp
     etemp=V8_16*etemp2_16
     sqr+=etemp
     etemp=V8_17*etemp2_17
     sqr+=etemp
     etemp=V8_18*etemp2_18
     sqr+=etemp
     etemp=V8_19*etemp2_19
     sqr+=etemp
     etemp=V8_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V8_1*sqr
     Vtemp_2=V8_2*sqr
     Vtemp_3=V8_3*sqr
     Vtemp_4=V8_4*sqr
     Vtemp_5=V8_5*sqr
     Vtemp_6=V8_6*sqr
     Vtemp_7=V8_7*sqr
     Vtemp_8=V8_8*sqr
     Vtemp_9=V8_9*sqr
     Vtemp_10=V8_10*sqr
     Vtemp_11=V8_11*sqr
     Vtemp_12=V8_12*sqr
     Vtemp_13=V8_13*sqr
     Vtemp_14=V8_14*sqr
     Vtemp_15=V8_15*sqr
     Vtemp_16=V8_16*sqr
     Vtemp_17=V8_17*sqr
     Vtemp_18=V8_18*sqr
     Vtemp_19=V8_19*sqr
     Vtemp_20=V8_20*sqr
#
     V11_1+=Vtemp_1
     V11_2+=Vtemp_2
     V11_3+=Vtemp_3
     V11_4+=Vtemp_4
     V11_5+=Vtemp_5
     V11_6+=Vtemp_6
     V11_7+=Vtemp_7
     V11_8+=Vtemp_8
     V11_9+=Vtemp_9
     V11_10+=Vtemp_10
     V11_11+=Vtemp_11
     V11_12+=Vtemp_12
     V11_13+=Vtemp_13
     V11_14+=Vtemp_14
     V11_15+=Vtemp_15
     V11_16+=Vtemp_16
     V11_17+=Vtemp_17
     V11_18+=Vtemp_18
     V11_19+=Vtemp_19
     V11_20+=Vtemp_20
#
#
     etemp2_1=V11_1
     etemp2_2=V11_2
     etemp2_3=V11_3
     etemp2_4=V11_4
     etemp2_5=V11_5
     etemp2_6=V11_6
     etemp2_7=V11_7
     etemp2_8=V11_8
     etemp2_9=V11_9
     etemp2_10=V11_10
     etemp2_11=V11_11
     etemp2_12=V11_12
     etemp2_13=V11_13
     etemp2_14=V11_14
     etemp2_15=V11_15
     etemp2_16=V11_16
     etemp2_17=V11_17
     etemp2_18=V11_18
     etemp2_19=V11_19
     etemp2_20=V11_20
#
     sqr=0.0
     etemp=V9_1*etemp2_1
     sqr+=etemp
     etemp=V9_2*etemp2_2
     sqr+=etemp
     etemp=V9_3*etemp2_3
     sqr+=etemp
     etemp=V9_4*etemp2_4
     sqr+=etemp
     etemp=V9_5*etemp2_5
     sqr+=etemp
     etemp=V9_6*etemp2_6
     sqr+=etemp
     etemp=V9_7*etemp2_7
     sqr+=etemp
     etemp=V9_8*etemp2_8
     sqr+=etemp
     etemp=V9_9*etemp2_9
     sqr+=etemp
     etemp=V9_10*etemp2_10
     sqr+=etemp
     etemp=V9_11*etemp2_11
     sqr+=etemp
     etemp=V9_12*etemp2_12
     sqr+=etemp
     etemp=V9_13*etemp2_13
     sqr+=etemp
     etemp=V9_14*etemp2_14
     sqr+=etemp
     etemp=V9_15*etemp2_15
     sqr+=etemp
     etemp=V9_16*etemp2_16
     sqr+=etemp
     etemp=V9_17*etemp2_17
     sqr+=etemp
     etemp=V9_18*etemp2_18
     sqr+=etemp
     etemp=V9_19*etemp2_19
     sqr+=etemp
     etemp=V9_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V9_1*sqr
     Vtemp_2=V9_2*sqr
     Vtemp_3=V9_3*sqr
     Vtemp_4=V9_4*sqr
     Vtemp_5=V9_5*sqr
     Vtemp_6=V9_6*sqr
     Vtemp_7=V9_7*sqr
     Vtemp_8=V9_8*sqr
     Vtemp_9=V9_9*sqr
     Vtemp_10=V9_10*sqr
     Vtemp_11=V9_11*sqr
     Vtemp_12=V9_12*sqr
     Vtemp_13=V9_13*sqr
     Vtemp_14=V9_14*sqr
     Vtemp_15=V9_15*sqr
     Vtemp_16=V9_16*sqr
     Vtemp_17=V9_17*sqr
     Vtemp_18=V9_18*sqr
     Vtemp_19=V9_19*sqr
     Vtemp_20=V9_20*sqr
#
     V11_1+=Vtemp_1
     V11_2+=Vtemp_2
     V11_3+=Vtemp_3
     V11_4+=Vtemp_4
     V11_5+=Vtemp_5
     V11_6+=Vtemp_6
     V11_7+=Vtemp_7
     V11_8+=Vtemp_8
     V11_9+=Vtemp_9
     V11_10+=Vtemp_10
     V11_11+=Vtemp_11
     V11_12+=Vtemp_12
     V11_13+=Vtemp_13
     V11_14+=Vtemp_14
     V11_15+=Vtemp_15
     V11_16+=Vtemp_16
     V11_17+=Vtemp_17
     V11_18+=Vtemp_18
     V11_19+=Vtemp_19
     V11_20+=Vtemp_20
#
#
     etemp2_1=V11_1
     etemp2_2=V11_2
     etemp2_3=V11_3
     etemp2_4=V11_4
     etemp2_5=V11_5
     etemp2_6=V11_6
     etemp2_7=V11_7
     etemp2_8=V11_8
     etemp2_9=V11_9
     etemp2_10=V11_10
     etemp2_11=V11_11
     etemp2_12=V11_12
     etemp2_13=V11_13
     etemp2_14=V11_14
     etemp2_15=V11_15
     etemp2_16=V11_16
     etemp2_17=V11_17
     etemp2_18=V11_18
     etemp2_19=V11_19
     etemp2_20=V11_20
#
     sqr=0.0
     etemp=V10_1*etemp2_1
     sqr+=etemp
     etemp=V10_2*etemp2_2
     sqr+=etemp
     etemp=V10_3*etemp2_3
     sqr+=etemp
     etemp=V10_4*etemp2_4
     sqr+=etemp
     etemp=V10_5*etemp2_5
     sqr+=etemp
     etemp=V10_6*etemp2_6
     sqr+=etemp
     etemp=V10_7*etemp2_7
     sqr+=etemp
     etemp=V10_8*etemp2_8
     sqr+=etemp
     etemp=V10_9*etemp2_9
     sqr+=etemp
     etemp=V10_10*etemp2_10
     sqr+=etemp
     etemp=V10_11*etemp2_11
     sqr+=etemp
     etemp=V10_12*etemp2_12
     sqr+=etemp
     etemp=V10_13*etemp2_13
     sqr+=etemp
     etemp=V10_14*etemp2_14
     sqr+=etemp
     etemp=V10_15*etemp2_15
     sqr+=etemp
     etemp=V10_16*etemp2_16
     sqr+=etemp
     etemp=V10_17*etemp2_17
     sqr+=etemp
     etemp=V10_18*etemp2_18
     sqr+=etemp
     etemp=V10_19*etemp2_19
     sqr+=etemp
     etemp=V10_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V10_1*sqr
     Vtemp_2=V10_2*sqr
     Vtemp_3=V10_3*sqr
     Vtemp_4=V10_4*sqr
     Vtemp_5=V10_5*sqr
     Vtemp_6=V10_6*sqr
     Vtemp_7=V10_7*sqr
     Vtemp_8=V10_8*sqr
     Vtemp_9=V10_9*sqr
     Vtemp_10=V10_10*sqr
     Vtemp_11=V10_11*sqr
     Vtemp_12=V10_12*sqr
     Vtemp_13=V10_13*sqr
     Vtemp_14=V10_14*sqr
     Vtemp_15=V10_15*sqr
     Vtemp_16=V10_16*sqr
     Vtemp_17=V10_17*sqr
     Vtemp_18=V10_18*sqr
     Vtemp_19=V10_19*sqr
     Vtemp_20=V10_20*sqr
#
     V11_1+=Vtemp_1
     V11_2+=Vtemp_2
     V11_3+=Vtemp_3
     V11_4+=Vtemp_4
     V11_5+=Vtemp_5
     V11_6+=Vtemp_6
     V11_7+=Vtemp_7
     V11_8+=Vtemp_8
     V11_9+=Vtemp_9
     V11_10+=Vtemp_10
     V11_11+=Vtemp_11
     V11_12+=Vtemp_12
     V11_13+=Vtemp_13
     V11_14+=Vtemp_14
     V11_15+=Vtemp_15
     V11_16+=Vtemp_16
     V11_17+=Vtemp_17
     V11_18+=Vtemp_18
     V11_19+=Vtemp_19
     V11_20+=Vtemp_20
#
#
     Vtemp_1=V11_1
     Vtemp_2=V11_2
     Vtemp_3=V11_3
     Vtemp_4=V11_4
     Vtemp_5=V11_5
     Vtemp_6=V11_6
     Vtemp_7=V11_7
     Vtemp_8=V11_8
     Vtemp_9=V11_9
     Vtemp_10=V11_10
     Vtemp_11=V11_11
     Vtemp_12=V11_12
     Vtemp_13=V11_13
     Vtemp_14=V11_14
     Vtemp_15=V11_15
     Vtemp_16=V11_16
     Vtemp_17=V11_17
     Vtemp_18=V11_18
     Vtemp_19=V11_19
     Vtemp_20=V11_20
#
     sqr=0.0
#
     etemp=V11_1*Vtemp_1
     sqr+=etemp
     etemp=V11_2*Vtemp_2
     sqr+=etemp
     etemp=V11_3*Vtemp_3
     sqr+=etemp
     etemp=V11_4*Vtemp_4
     sqr+=etemp
     etemp=V11_5*Vtemp_5
     sqr+=etemp
     etemp=V11_6*Vtemp_6
     sqr+=etemp
     etemp=V11_7*Vtemp_7
     sqr+=etemp
     etemp=V11_8*Vtemp_8
     sqr+=etemp
     etemp=V11_9*Vtemp_9
     sqr+=etemp
     etemp=V11_10*Vtemp_10
     sqr+=etemp
     etemp=V11_11*Vtemp_11
     sqr+=etemp
     etemp=V11_12*Vtemp_12
     sqr+=etemp
     etemp=V11_13*Vtemp_13
     sqr+=etemp
     etemp=V11_14*Vtemp_14
     sqr+=etemp
     etemp=V11_15*Vtemp_15
     sqr+=etemp
     etemp=V11_16*Vtemp_16
     sqr+=etemp
     etemp=V11_17*Vtemp_17
     sqr+=etemp
     etemp=V11_18*Vtemp_18
     sqr+=etemp
     etemp=V11_19*Vtemp_19
     sqr+=etemp
     etemp=V11_20*Vtemp_20
     sqr+=etemp
#
       exponent=0.5
#       execute square_root sqr exponent
#       sqr2=1.0/sqr
     execute norm_fac sqr exponent
     sqr2=sqr
#
     V11_1*=sqr2
     V11_2*=sqr2
     V11_3*=sqr2
     V11_4*=sqr2
     V11_5*=sqr2
     V11_6*=sqr2
     V11_7*=sqr2
     V11_8*=sqr2
     V11_9*=sqr2
     V11_10*=sqr2
     V11_11*=sqr2
     V11_12*=sqr2
     V11_13*=sqr2
     V11_14*=sqr2
     V11_15*=sqr2
     V11_16*=sqr2
     V11_17*=sqr2
     V11_18*=sqr2
     V11_19*=sqr2
     V11_20*=sqr2
#
#------12 vectors -------------------------------
#
     etemp2_1=V12_1
     etemp2_2=V12_2
     etemp2_3=V12_3
     etemp2_4=V12_4
     etemp2_5=V12_5
     etemp2_6=V12_6
     etemp2_7=V12_7
     etemp2_8=V12_8
     etemp2_9=V12_9
     etemp2_10=V12_10
     etemp2_11=V12_11
     etemp2_12=V12_12
     etemp2_13=V12_13
     etemp2_14=V12_14
     etemp2_15=V12_15
     etemp2_16=V12_16
     etemp2_17=V12_17
     etemp2_18=V12_18
     etemp2_19=V12_19
     etemp2_20=V12_20
#
     sqr=0.0
     etemp=V1_1*etemp2_1
     sqr+=etemp
     etemp=V1_2*etemp2_2
     sqr+=etemp
     etemp=V1_3*etemp2_3
     sqr+=etemp
     etemp=V1_4*etemp2_4
     sqr+=etemp
     etemp=V1_5*etemp2_5
     sqr+=etemp
     etemp=V1_6*etemp2_6
     sqr+=etemp
     etemp=V1_7*etemp2_7
     sqr+=etemp
     etemp=V1_8*etemp2_8
     sqr+=etemp
     etemp=V1_9*etemp2_9
     sqr+=etemp
     etemp=V1_10*etemp2_10
     sqr+=etemp
     etemp=V1_11*etemp2_11
     sqr+=etemp
     etemp=V1_12*etemp2_12
     sqr+=etemp
     etemp=V1_13*etemp2_13
     sqr+=etemp
     etemp=V1_14*etemp2_14
     sqr+=etemp
     etemp=V1_15*etemp2_15
     sqr+=etemp
     etemp=V1_16*etemp2_16
     sqr+=etemp
     etemp=V1_17*etemp2_17
     sqr+=etemp
     etemp=V1_18*etemp2_18
     sqr+=etemp
     etemp=V1_19*etemp2_19
     sqr+=etemp
     etemp=V1_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V1_1*sqr
     Vtemp_2=V1_2*sqr
     Vtemp_3=V1_3*sqr
     Vtemp_4=V1_4*sqr
     Vtemp_5=V1_5*sqr
     Vtemp_6=V1_6*sqr
     Vtemp_7=V1_7*sqr
     Vtemp_8=V1_8*sqr
     Vtemp_9=V1_9*sqr
     Vtemp_10=V1_10*sqr
     Vtemp_11=V1_11*sqr
     Vtemp_12=V1_12*sqr
     Vtemp_13=V1_13*sqr
     Vtemp_14=V1_14*sqr
     Vtemp_15=V1_15*sqr
     Vtemp_16=V1_16*sqr
     Vtemp_17=V1_17*sqr
     Vtemp_18=V1_18*sqr
     Vtemp_19=V1_19*sqr
     Vtemp_20=V1_20*sqr
#
     V12_1+=Vtemp_1
     V12_2+=Vtemp_2
     V12_3+=Vtemp_3
     V12_4+=Vtemp_4
     V12_5+=Vtemp_5
     V12_6+=Vtemp_6
     V12_7+=Vtemp_7
     V12_8+=Vtemp_8
     V12_9+=Vtemp_9
     V12_10+=Vtemp_10
     V12_11+=Vtemp_11
     V12_12+=Vtemp_12
     V12_13+=Vtemp_13
     V12_14+=Vtemp_14
     V12_15+=Vtemp_15
     V12_16+=Vtemp_16
     V12_17+=Vtemp_17
     V12_18+=Vtemp_18
     V12_19+=Vtemp_19
     V12_20+=Vtemp_20
#
#
     etemp2_1=V12_1
     etemp2_2=V12_2
     etemp2_3=V12_3
     etemp2_4=V12_4
     etemp2_5=V12_5
     etemp2_6=V12_6
     etemp2_7=V12_7
     etemp2_8=V12_8
     etemp2_9=V12_9
     etemp2_10=V12_10
     etemp2_11=V12_11
     etemp2_12=V12_12
     etemp2_13=V12_13
     etemp2_14=V12_14
     etemp2_15=V12_15
     etemp2_16=V12_16
     etemp2_17=V12_17
     etemp2_18=V12_18
     etemp2_19=V12_19
     etemp2_20=V12_20
#
     sqr=0.0
     etemp=V2_1*etemp2_1
     sqr+=etemp
     etemp=V2_2*etemp2_2
     sqr+=etemp
     etemp=V2_3*etemp2_3
     sqr+=etemp
     etemp=V2_4*etemp2_4
     sqr+=etemp
     etemp=V2_5*etemp2_5
     sqr+=etemp
     etemp=V2_6*etemp2_6
     sqr+=etemp
     etemp=V2_7*etemp2_7
     sqr+=etemp
     etemp=V2_8*etemp2_8
     sqr+=etemp
     etemp=V2_9*etemp2_9
     sqr+=etemp
     etemp=V2_10*etemp2_10
     sqr+=etemp
     etemp=V2_11*etemp2_11
     sqr+=etemp
     etemp=V2_12*etemp2_12
     sqr+=etemp
     etemp=V2_13*etemp2_13
     sqr+=etemp
     etemp=V2_14*etemp2_14
     sqr+=etemp
     etemp=V2_15*etemp2_15
     sqr+=etemp
     etemp=V2_16*etemp2_16
     sqr+=etemp
     etemp=V2_17*etemp2_17
     sqr+=etemp
     etemp=V2_18*etemp2_18
     sqr+=etemp
     etemp=V2_19*etemp2_19
     sqr+=etemp
     etemp=V2_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V2_1*sqr
     Vtemp_2=V2_2*sqr
     Vtemp_3=V2_3*sqr
     Vtemp_4=V2_4*sqr
     Vtemp_5=V2_5*sqr
     Vtemp_6=V2_6*sqr
     Vtemp_7=V2_7*sqr
     Vtemp_8=V2_8*sqr
     Vtemp_9=V2_9*sqr
     Vtemp_10=V2_10*sqr
     Vtemp_11=V2_11*sqr
     Vtemp_12=V2_12*sqr
     Vtemp_13=V2_13*sqr
     Vtemp_14=V2_14*sqr
     Vtemp_15=V2_15*sqr
     Vtemp_16=V2_16*sqr
     Vtemp_17=V2_17*sqr
     Vtemp_18=V2_18*sqr
     Vtemp_19=V2_19*sqr
     Vtemp_20=V2_20*sqr
#
     V12_1+=Vtemp_1
     V12_2+=Vtemp_2
     V12_3+=Vtemp_3
     V12_4+=Vtemp_4
     V12_5+=Vtemp_5
     V12_6+=Vtemp_6
     V12_7+=Vtemp_7
     V12_8+=Vtemp_8
     V12_9+=Vtemp_9
     V12_10+=Vtemp_10
     V12_11+=Vtemp_11
     V12_12+=Vtemp_12
     V12_13+=Vtemp_13
     V12_14+=Vtemp_14
     V12_15+=Vtemp_15
     V12_16+=Vtemp_16
     V12_17+=Vtemp_17
     V12_18+=Vtemp_18
     V12_19+=Vtemp_19
     V12_20+=Vtemp_20
#
#
     etemp2_1=V12_1
     etemp2_2=V12_2
     etemp2_3=V12_3
     etemp2_4=V12_4
     etemp2_5=V12_5
     etemp2_6=V12_6
     etemp2_7=V12_7
     etemp2_8=V12_8
     etemp2_9=V12_9
     etemp2_10=V12_10
     etemp2_11=V12_11
     etemp2_12=V12_12
     etemp2_13=V12_13
     etemp2_14=V12_14
     etemp2_15=V12_15
     etemp2_16=V12_16
     etemp2_17=V12_17
     etemp2_18=V12_18
     etemp2_19=V12_19
     etemp2_20=V12_20
#
     sqr=0.0
     etemp=V3_1*etemp2_1
     sqr+=etemp
     etemp=V3_2*etemp2_2
     sqr+=etemp
     etemp=V3_3*etemp2_3
     sqr+=etemp
     etemp=V3_4*etemp2_4
     sqr+=etemp
     etemp=V3_5*etemp2_5
     sqr+=etemp
     etemp=V3_6*etemp2_6
     sqr+=etemp
     etemp=V3_7*etemp2_7
     sqr+=etemp
     etemp=V3_8*etemp2_8
     sqr+=etemp
     etemp=V3_9*etemp2_9
     sqr+=etemp
     etemp=V3_10*etemp2_10
     sqr+=etemp
     etemp=V3_11*etemp2_11
     sqr+=etemp
     etemp=V3_12*etemp2_12
     sqr+=etemp
     etemp=V3_13*etemp2_13
     sqr+=etemp
     etemp=V3_14*etemp2_14
     sqr+=etemp
     etemp=V3_15*etemp2_15
     sqr+=etemp
     etemp=V3_16*etemp2_16
     sqr+=etemp
     etemp=V3_17*etemp2_17
     sqr+=etemp
     etemp=V3_18*etemp2_18
     sqr+=etemp
     etemp=V3_19*etemp2_19
     sqr+=etemp
     etemp=V3_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V3_1*sqr
     Vtemp_2=V3_2*sqr
     Vtemp_3=V3_3*sqr
     Vtemp_4=V3_4*sqr
     Vtemp_5=V3_5*sqr
     Vtemp_6=V3_6*sqr
     Vtemp_7=V3_7*sqr
     Vtemp_8=V3_8*sqr
     Vtemp_9=V3_9*sqr
     Vtemp_10=V3_10*sqr
     Vtemp_11=V3_11*sqr
     Vtemp_12=V3_12*sqr
     Vtemp_13=V3_13*sqr
     Vtemp_14=V3_14*sqr
     Vtemp_15=V3_15*sqr
     Vtemp_16=V3_16*sqr
     Vtemp_17=V3_17*sqr
     Vtemp_18=V3_18*sqr
     Vtemp_19=V3_19*sqr
     Vtemp_20=V3_20*sqr
#
     V12_1+=Vtemp_1
     V12_2+=Vtemp_2
     V12_3+=Vtemp_3
     V12_4+=Vtemp_4
     V12_5+=Vtemp_5
     V12_6+=Vtemp_6
     V12_7+=Vtemp_7
     V12_8+=Vtemp_8
     V12_9+=Vtemp_9
     V12_10+=Vtemp_10
     V12_11+=Vtemp_11
     V12_12+=Vtemp_12
     V12_13+=Vtemp_13
     V12_14+=Vtemp_14
     V12_15+=Vtemp_15
     V12_16+=Vtemp_16
     V12_17+=Vtemp_17
     V12_18+=Vtemp_18
     V12_19+=Vtemp_19
     V12_20+=Vtemp_20
#
#
     etemp2_1=V12_1
     etemp2_2=V12_2
     etemp2_3=V12_3
     etemp2_4=V12_4
     etemp2_5=V12_5
     etemp2_6=V12_6
     etemp2_7=V12_7
     etemp2_8=V12_8
     etemp2_9=V12_9
     etemp2_10=V12_10
     etemp2_11=V12_11
     etemp2_12=V12_12
     etemp2_13=V12_13
     etemp2_14=V12_14
     etemp2_15=V12_15
     etemp2_16=V12_16
     etemp2_17=V12_17
     etemp2_18=V12_18
     etemp2_19=V12_19
     etemp2_20=V12_20
#
     sqr=0.0
     etemp=V4_1*etemp2_1
     sqr+=etemp
     etemp=V4_2*etemp2_2
     sqr+=etemp
     etemp=V4_3*etemp2_3
     sqr+=etemp
     etemp=V4_4*etemp2_4
     sqr+=etemp
     etemp=V4_5*etemp2_5
     sqr+=etemp
     etemp=V4_6*etemp2_6
     sqr+=etemp
     etemp=V4_7*etemp2_7
     sqr+=etemp
     etemp=V4_8*etemp2_8
     sqr+=etemp
     etemp=V4_9*etemp2_9
     sqr+=etemp
     etemp=V4_10*etemp2_10
     sqr+=etemp
     etemp=V4_11*etemp2_11
     sqr+=etemp
     etemp=V4_12*etemp2_12
     sqr+=etemp
     etemp=V4_13*etemp2_13
     sqr+=etemp
     etemp=V4_14*etemp2_14
     sqr+=etemp
     etemp=V4_15*etemp2_15
     sqr+=etemp
     etemp=V4_16*etemp2_16
     sqr+=etemp
     etemp=V4_17*etemp2_17
     sqr+=etemp
     etemp=V4_18*etemp2_18
     sqr+=etemp
     etemp=V4_19*etemp2_19
     sqr+=etemp
     etemp=V4_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V4_1*sqr
     Vtemp_2=V4_2*sqr
     Vtemp_3=V4_3*sqr
     Vtemp_4=V4_4*sqr
     Vtemp_5=V4_5*sqr
     Vtemp_6=V4_6*sqr
     Vtemp_7=V4_7*sqr
     Vtemp_8=V4_8*sqr
     Vtemp_9=V4_9*sqr
     Vtemp_10=V4_10*sqr
     Vtemp_11=V4_11*sqr
     Vtemp_12=V4_12*sqr
     Vtemp_13=V4_13*sqr
     Vtemp_14=V4_14*sqr
     Vtemp_15=V4_15*sqr
     Vtemp_16=V4_16*sqr
     Vtemp_17=V4_17*sqr
     Vtemp_18=V4_18*sqr
     Vtemp_19=V4_19*sqr
     Vtemp_20=V4_20*sqr
#
     V12_1+=Vtemp_1
     V12_2+=Vtemp_2
     V12_3+=Vtemp_3
     V12_4+=Vtemp_4
     V12_5+=Vtemp_5
     V12_6+=Vtemp_6
     V12_7+=Vtemp_7
     V12_8+=Vtemp_8
     V12_9+=Vtemp_9
     V12_10+=Vtemp_10
     V12_11+=Vtemp_11
     V12_12+=Vtemp_12
     V12_13+=Vtemp_13
     V12_14+=Vtemp_14
     V12_15+=Vtemp_15
     V12_16+=Vtemp_16
     V12_17+=Vtemp_17
     V12_18+=Vtemp_18
     V12_19+=Vtemp_19
     V12_20+=Vtemp_20
#
#
     etemp2_1=V12_1
     etemp2_2=V12_2
     etemp2_3=V12_3
     etemp2_4=V12_4
     etemp2_5=V12_5
     etemp2_6=V12_6
     etemp2_7=V12_7
     etemp2_8=V12_8
     etemp2_9=V12_9
     etemp2_10=V12_10
     etemp2_11=V12_11
     etemp2_12=V12_12
     etemp2_13=V12_13
     etemp2_14=V12_14
     etemp2_15=V12_15
     etemp2_16=V12_16
     etemp2_17=V12_17
     etemp2_18=V12_18
     etemp2_19=V12_19
     etemp2_20=V12_20
#
     sqr=0.0
     etemp=V5_1*etemp2_1
     sqr+=etemp
     etemp=V5_2*etemp2_2
     sqr+=etemp
     etemp=V5_3*etemp2_3
     sqr+=etemp
     etemp=V5_4*etemp2_4
     sqr+=etemp
     etemp=V5_5*etemp2_5
     sqr+=etemp
     etemp=V5_6*etemp2_6
     sqr+=etemp
     etemp=V5_7*etemp2_7
     sqr+=etemp
     etemp=V5_8*etemp2_8
     sqr+=etemp
     etemp=V5_9*etemp2_9
     sqr+=etemp
     etemp=V5_10*etemp2_10
     sqr+=etemp
     etemp=V5_11*etemp2_11
     sqr+=etemp
     etemp=V5_12*etemp2_12
     sqr+=etemp
     etemp=V5_13*etemp2_13
     sqr+=etemp
     etemp=V5_14*etemp2_14
     sqr+=etemp
     etemp=V5_15*etemp2_15
     sqr+=etemp
     etemp=V5_16*etemp2_16
     sqr+=etemp
     etemp=V5_17*etemp2_17
     sqr+=etemp
     etemp=V5_18*etemp2_18
     sqr+=etemp
     etemp=V5_19*etemp2_19
     sqr+=etemp
     etemp=V5_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V5_1*sqr
     Vtemp_2=V5_2*sqr
     Vtemp_3=V5_3*sqr
     Vtemp_4=V5_4*sqr
     Vtemp_5=V5_5*sqr
     Vtemp_6=V5_6*sqr
     Vtemp_7=V5_7*sqr
     Vtemp_8=V5_8*sqr
     Vtemp_9=V5_9*sqr
     Vtemp_10=V5_10*sqr
     Vtemp_11=V5_11*sqr
     Vtemp_12=V5_12*sqr
     Vtemp_13=V5_13*sqr
     Vtemp_14=V5_14*sqr
     Vtemp_15=V5_15*sqr
     Vtemp_16=V5_16*sqr
     Vtemp_17=V5_17*sqr
     Vtemp_18=V5_18*sqr
     Vtemp_19=V5_19*sqr
     Vtemp_20=V5_20*sqr
#
     V12_1+=Vtemp_1
     V12_2+=Vtemp_2
     V12_3+=Vtemp_3
     V12_4+=Vtemp_4
     V12_5+=Vtemp_5
     V12_6+=Vtemp_6
     V12_7+=Vtemp_7
     V12_8+=Vtemp_8
     V12_9+=Vtemp_9
     V12_10+=Vtemp_10
     V12_11+=Vtemp_11
     V12_12+=Vtemp_12
     V12_13+=Vtemp_13
     V12_14+=Vtemp_14
     V12_15+=Vtemp_15
     V12_16+=Vtemp_16
     V12_17+=Vtemp_17
     V12_18+=Vtemp_18
     V12_19+=Vtemp_19
     V12_20+=Vtemp_20
#
#
     etemp2_1=V12_1
     etemp2_2=V12_2
     etemp2_3=V12_3
     etemp2_4=V12_4
     etemp2_5=V12_5
     etemp2_6=V12_6
     etemp2_7=V12_7
     etemp2_8=V12_8
     etemp2_9=V12_9
     etemp2_10=V12_10
     etemp2_11=V12_11
     etemp2_12=V12_12
     etemp2_13=V12_13
     etemp2_14=V12_14
     etemp2_15=V12_15
     etemp2_16=V12_16
     etemp2_17=V12_17
     etemp2_18=V12_18
     etemp2_19=V12_19
     etemp2_20=V12_20
#
     sqr=0.0
     etemp=V6_1*etemp2_1
     sqr+=etemp
     etemp=V6_2*etemp2_2
     sqr+=etemp
     etemp=V6_3*etemp2_3
     sqr+=etemp
     etemp=V6_4*etemp2_4
     sqr+=etemp
     etemp=V6_5*etemp2_5
     sqr+=etemp
     etemp=V6_6*etemp2_6
     sqr+=etemp
     etemp=V6_7*etemp2_7
     sqr+=etemp
     etemp=V6_8*etemp2_8
     sqr+=etemp
     etemp=V6_9*etemp2_9
     sqr+=etemp
     etemp=V6_10*etemp2_10
     sqr+=etemp
     etemp=V6_11*etemp2_11
     sqr+=etemp
     etemp=V6_12*etemp2_12
     sqr+=etemp
     etemp=V6_13*etemp2_13
     sqr+=etemp
     etemp=V6_14*etemp2_14
     sqr+=etemp
     etemp=V6_15*etemp2_15
     sqr+=etemp
     etemp=V6_16*etemp2_16
     sqr+=etemp
     etemp=V6_17*etemp2_17
     sqr+=etemp
     etemp=V6_18*etemp2_18
     sqr+=etemp
     etemp=V6_19*etemp2_19
     sqr+=etemp
     etemp=V6_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V6_1*sqr
     Vtemp_2=V6_2*sqr
     Vtemp_3=V6_3*sqr
     Vtemp_4=V6_4*sqr
     Vtemp_5=V6_5*sqr
     Vtemp_6=V6_6*sqr
     Vtemp_7=V6_7*sqr
     Vtemp_8=V6_8*sqr
     Vtemp_9=V6_9*sqr
     Vtemp_10=V6_10*sqr
     Vtemp_11=V6_11*sqr
     Vtemp_12=V6_12*sqr
     Vtemp_13=V6_13*sqr
     Vtemp_14=V6_14*sqr
     Vtemp_15=V6_15*sqr
     Vtemp_16=V6_16*sqr
     Vtemp_17=V6_17*sqr
     Vtemp_18=V6_18*sqr
     Vtemp_19=V6_19*sqr
     Vtemp_20=V6_20*sqr
#
     V12_1+=Vtemp_1
     V12_2+=Vtemp_2
     V12_3+=Vtemp_3
     V12_4+=Vtemp_4
     V12_5+=Vtemp_5
     V12_6+=Vtemp_6
     V12_7+=Vtemp_7
     V12_8+=Vtemp_8
     V12_9+=Vtemp_9
     V12_10+=Vtemp_10
     V12_11+=Vtemp_11
     V12_12+=Vtemp_12
     V12_13+=Vtemp_13
     V12_14+=Vtemp_14
     V12_15+=Vtemp_15
     V12_16+=Vtemp_16
     V12_17+=Vtemp_17
     V12_18+=Vtemp_18
     V12_19+=Vtemp_19
     V12_20+=Vtemp_20
#
#
     etemp2_1=V12_1
     etemp2_2=V12_2
     etemp2_3=V12_3
     etemp2_4=V12_4
     etemp2_5=V12_5
     etemp2_6=V12_6
     etemp2_7=V12_7
     etemp2_8=V12_8
     etemp2_9=V12_9
     etemp2_10=V12_10
     etemp2_11=V12_11
     etemp2_12=V12_12
     etemp2_13=V12_13
     etemp2_14=V12_14
     etemp2_15=V12_15
     etemp2_16=V12_16
     etemp2_17=V12_17
     etemp2_18=V12_18
     etemp2_19=V12_19
     etemp2_20=V12_20
#
     sqr=0.0
     etemp=V7_1*etemp2_1
     sqr+=etemp
     etemp=V7_2*etemp2_2
     sqr+=etemp
     etemp=V7_3*etemp2_3
     sqr+=etemp
     etemp=V7_4*etemp2_4
     sqr+=etemp
     etemp=V7_5*etemp2_5
     sqr+=etemp
     etemp=V7_6*etemp2_6
     sqr+=etemp
     etemp=V7_7*etemp2_7
     sqr+=etemp
     etemp=V7_8*etemp2_8
     sqr+=etemp
     etemp=V7_9*etemp2_9
     sqr+=etemp
     etemp=V7_10*etemp2_10
     sqr+=etemp
     etemp=V7_11*etemp2_11
     sqr+=etemp
     etemp=V7_12*etemp2_12
     sqr+=etemp
     etemp=V7_13*etemp2_13
     sqr+=etemp
     etemp=V7_14*etemp2_14
     sqr+=etemp
     etemp=V7_15*etemp2_15
     sqr+=etemp
     etemp=V7_16*etemp2_16
     sqr+=etemp
     etemp=V7_17*etemp2_17
     sqr+=etemp
     etemp=V7_18*etemp2_18
     sqr+=etemp
     etemp=V7_19*etemp2_19
     sqr+=etemp
     etemp=V7_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V7_1*sqr
     Vtemp_2=V7_2*sqr
     Vtemp_3=V7_3*sqr
     Vtemp_4=V7_4*sqr
     Vtemp_5=V7_5*sqr
     Vtemp_6=V7_6*sqr
     Vtemp_7=V7_7*sqr
     Vtemp_8=V7_8*sqr
     Vtemp_9=V7_9*sqr
     Vtemp_10=V7_10*sqr
     Vtemp_11=V7_11*sqr
     Vtemp_12=V7_12*sqr
     Vtemp_13=V7_13*sqr
     Vtemp_14=V7_14*sqr
     Vtemp_15=V7_15*sqr
     Vtemp_16=V7_16*sqr
     Vtemp_17=V7_17*sqr
     Vtemp_18=V7_18*sqr
     Vtemp_19=V7_19*sqr
     Vtemp_20=V7_20*sqr
#
     V12_1+=Vtemp_1
     V12_2+=Vtemp_2
     V12_3+=Vtemp_3
     V12_4+=Vtemp_4
     V12_5+=Vtemp_5
     V12_6+=Vtemp_6
     V12_7+=Vtemp_7
     V12_8+=Vtemp_8
     V12_9+=Vtemp_9
     V12_10+=Vtemp_10
     V12_11+=Vtemp_11
     V12_12+=Vtemp_12
     V12_13+=Vtemp_13
     V12_14+=Vtemp_14
     V12_15+=Vtemp_15
     V12_16+=Vtemp_16
     V12_17+=Vtemp_17
     V12_18+=Vtemp_18
     V12_19+=Vtemp_19
     V12_20+=Vtemp_20
#
#
     etemp2_1=V12_1
     etemp2_2=V12_2
     etemp2_3=V12_3
     etemp2_4=V12_4
     etemp2_5=V12_5
     etemp2_6=V12_6
     etemp2_7=V12_7
     etemp2_8=V12_8
     etemp2_9=V12_9
     etemp2_10=V12_10
     etemp2_11=V12_11
     etemp2_12=V12_12
     etemp2_13=V12_13
     etemp2_14=V12_14
     etemp2_15=V12_15
     etemp2_16=V12_16
     etemp2_17=V12_17
     etemp2_18=V12_18
     etemp2_19=V12_19
     etemp2_20=V12_20
#
     sqr=0.0
     etemp=V8_1*etemp2_1
     sqr+=etemp
     etemp=V8_2*etemp2_2
     sqr+=etemp
     etemp=V8_3*etemp2_3
     sqr+=etemp
     etemp=V8_4*etemp2_4
     sqr+=etemp
     etemp=V8_5*etemp2_5
     sqr+=etemp
     etemp=V8_6*etemp2_6
     sqr+=etemp
     etemp=V8_7*etemp2_7
     sqr+=etemp
     etemp=V8_8*etemp2_8
     sqr+=etemp
     etemp=V8_9*etemp2_9
     sqr+=etemp
     etemp=V8_10*etemp2_10
     sqr+=etemp
     etemp=V8_11*etemp2_11
     sqr+=etemp
     etemp=V8_12*etemp2_12
     sqr+=etemp
     etemp=V8_13*etemp2_13
     sqr+=etemp
     etemp=V8_14*etemp2_14
     sqr+=etemp
     etemp=V8_15*etemp2_15
     sqr+=etemp
     etemp=V8_16*etemp2_16
     sqr+=etemp
     etemp=V8_17*etemp2_17
     sqr+=etemp
     etemp=V8_18*etemp2_18
     sqr+=etemp
     etemp=V8_19*etemp2_19
     sqr+=etemp
     etemp=V8_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V8_1*sqr
     Vtemp_2=V8_2*sqr
     Vtemp_3=V8_3*sqr
     Vtemp_4=V8_4*sqr
     Vtemp_5=V8_5*sqr
     Vtemp_6=V8_6*sqr
     Vtemp_7=V8_7*sqr
     Vtemp_8=V8_8*sqr
     Vtemp_9=V8_9*sqr
     Vtemp_10=V8_10*sqr
     Vtemp_11=V8_11*sqr
     Vtemp_12=V8_12*sqr
     Vtemp_13=V8_13*sqr
     Vtemp_14=V8_14*sqr
     Vtemp_15=V8_15*sqr
     Vtemp_16=V8_16*sqr
     Vtemp_17=V8_17*sqr
     Vtemp_18=V8_18*sqr
     Vtemp_19=V8_19*sqr
     Vtemp_20=V8_20*sqr
#
     V12_1+=Vtemp_1
     V12_2+=Vtemp_2
     V12_3+=Vtemp_3
     V12_4+=Vtemp_4
     V12_5+=Vtemp_5
     V12_6+=Vtemp_6
     V12_7+=Vtemp_7
     V12_8+=Vtemp_8
     V12_9+=Vtemp_9
     V12_10+=Vtemp_10
     V12_11+=Vtemp_11
     V12_12+=Vtemp_12
     V12_13+=Vtemp_13
     V12_14+=Vtemp_14
     V12_15+=Vtemp_15
     V12_16+=Vtemp_16
     V12_17+=Vtemp_17
     V12_18+=Vtemp_18
     V12_19+=Vtemp_19
     V12_20+=Vtemp_20
#
#
     etemp2_1=V12_1
     etemp2_2=V12_2
     etemp2_3=V12_3
     etemp2_4=V12_4
     etemp2_5=V12_5
     etemp2_6=V12_6
     etemp2_7=V12_7
     etemp2_8=V12_8
     etemp2_9=V12_9
     etemp2_10=V12_10
     etemp2_11=V12_11
     etemp2_12=V12_12
     etemp2_13=V12_13
     etemp2_14=V12_14
     etemp2_15=V12_15
     etemp2_16=V12_16
     etemp2_17=V12_17
     etemp2_18=V12_18
     etemp2_19=V12_19
     etemp2_20=V12_20
#
     sqr=0.0
     etemp=V9_1*etemp2_1
     sqr+=etemp
     etemp=V9_2*etemp2_2
     sqr+=etemp
     etemp=V9_3*etemp2_3
     sqr+=etemp
     etemp=V9_4*etemp2_4
     sqr+=etemp
     etemp=V9_5*etemp2_5
     sqr+=etemp
     etemp=V9_6*etemp2_6
     sqr+=etemp
     etemp=V9_7*etemp2_7
     sqr+=etemp
     etemp=V9_8*etemp2_8
     sqr+=etemp
     etemp=V9_9*etemp2_9
     sqr+=etemp
     etemp=V9_10*etemp2_10
     sqr+=etemp
     etemp=V9_11*etemp2_11
     sqr+=etemp
     etemp=V9_12*etemp2_12
     sqr+=etemp
     etemp=V9_13*etemp2_13
     sqr+=etemp
     etemp=V9_14*etemp2_14
     sqr+=etemp
     etemp=V9_15*etemp2_15
     sqr+=etemp
     etemp=V9_16*etemp2_16
     sqr+=etemp
     etemp=V9_17*etemp2_17
     sqr+=etemp
     etemp=V9_18*etemp2_18
     sqr+=etemp
     etemp=V9_19*etemp2_19
     sqr+=etemp
     etemp=V9_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V9_1*sqr
     Vtemp_2=V9_2*sqr
     Vtemp_3=V9_3*sqr
     Vtemp_4=V9_4*sqr
     Vtemp_5=V9_5*sqr
     Vtemp_6=V9_6*sqr
     Vtemp_7=V9_7*sqr
     Vtemp_8=V9_8*sqr
     Vtemp_9=V9_9*sqr
     Vtemp_10=V9_10*sqr
     Vtemp_11=V9_11*sqr
     Vtemp_12=V9_12*sqr
     Vtemp_13=V9_13*sqr
     Vtemp_14=V9_14*sqr
     Vtemp_15=V9_15*sqr
     Vtemp_16=V9_16*sqr
     Vtemp_17=V9_17*sqr
     Vtemp_18=V9_18*sqr
     Vtemp_19=V9_19*sqr
     Vtemp_20=V9_20*sqr
#
     V12_1+=Vtemp_1
     V12_2+=Vtemp_2
     V12_3+=Vtemp_3
     V12_4+=Vtemp_4
     V12_5+=Vtemp_5
     V12_6+=Vtemp_6
     V12_7+=Vtemp_7
     V12_8+=Vtemp_8
     V12_9+=Vtemp_9
     V12_10+=Vtemp_10
     V12_11+=Vtemp_11
     V12_12+=Vtemp_12
     V12_13+=Vtemp_13
     V12_14+=Vtemp_14
     V12_15+=Vtemp_15
     V12_16+=Vtemp_16
     V12_17+=Vtemp_17
     V12_18+=Vtemp_18
     V12_19+=Vtemp_19
     V12_20+=Vtemp_20
#
#
     etemp2_1=V12_1
     etemp2_2=V12_2
     etemp2_3=V12_3
     etemp2_4=V12_4
     etemp2_5=V12_5
     etemp2_6=V12_6
     etemp2_7=V12_7
     etemp2_8=V12_8
     etemp2_9=V12_9
     etemp2_10=V12_10
     etemp2_11=V12_11
     etemp2_12=V12_12
     etemp2_13=V12_13
     etemp2_14=V12_14
     etemp2_15=V12_15
     etemp2_16=V12_16
     etemp2_17=V12_17
     etemp2_18=V12_18
     etemp2_19=V12_19
     etemp2_20=V12_20
#
     sqr=0.0
     etemp=V10_1*etemp2_1
     sqr+=etemp
     etemp=V10_2*etemp2_2
     sqr+=etemp
     etemp=V10_3*etemp2_3
     sqr+=etemp
     etemp=V10_4*etemp2_4
     sqr+=etemp
     etemp=V10_5*etemp2_5
     sqr+=etemp
     etemp=V10_6*etemp2_6
     sqr+=etemp
     etemp=V10_7*etemp2_7
     sqr+=etemp
     etemp=V10_8*etemp2_8
     sqr+=etemp
     etemp=V10_9*etemp2_9
     sqr+=etemp
     etemp=V10_10*etemp2_10
     sqr+=etemp
     etemp=V10_11*etemp2_11
     sqr+=etemp
     etemp=V10_12*etemp2_12
     sqr+=etemp
     etemp=V10_13*etemp2_13
     sqr+=etemp
     etemp=V10_14*etemp2_14
     sqr+=etemp
     etemp=V10_15*etemp2_15
     sqr+=etemp
     etemp=V10_16*etemp2_16
     sqr+=etemp
     etemp=V10_17*etemp2_17
     sqr+=etemp
     etemp=V10_18*etemp2_18
     sqr+=etemp
     etemp=V10_19*etemp2_19
     sqr+=etemp
     etemp=V10_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V10_1*sqr
     Vtemp_2=V10_2*sqr
     Vtemp_3=V10_3*sqr
     Vtemp_4=V10_4*sqr
     Vtemp_5=V10_5*sqr
     Vtemp_6=V10_6*sqr
     Vtemp_7=V10_7*sqr
     Vtemp_8=V10_8*sqr
     Vtemp_9=V10_9*sqr
     Vtemp_10=V10_10*sqr
     Vtemp_11=V10_11*sqr
     Vtemp_12=V10_12*sqr
     Vtemp_13=V10_13*sqr
     Vtemp_14=V10_14*sqr
     Vtemp_15=V10_15*sqr
     Vtemp_16=V10_16*sqr
     Vtemp_17=V10_17*sqr
     Vtemp_18=V10_18*sqr
     Vtemp_19=V10_19*sqr
     Vtemp_20=V10_20*sqr
#
     V12_1+=Vtemp_1
     V12_2+=Vtemp_2
     V12_3+=Vtemp_3
     V12_4+=Vtemp_4
     V12_5+=Vtemp_5
     V12_6+=Vtemp_6
     V12_7+=Vtemp_7
     V12_8+=Vtemp_8
     V12_9+=Vtemp_9
     V12_10+=Vtemp_10
     V12_11+=Vtemp_11
     V12_12+=Vtemp_12
     V12_13+=Vtemp_13
     V12_14+=Vtemp_14
     V12_15+=Vtemp_15
     V12_16+=Vtemp_16
     V12_17+=Vtemp_17
     V12_18+=Vtemp_18
     V12_19+=Vtemp_19
     V12_20+=Vtemp_20
#
#
     etemp2_1=V12_1
     etemp2_2=V12_2
     etemp2_3=V12_3
     etemp2_4=V12_4
     etemp2_5=V12_5
     etemp2_6=V12_6
     etemp2_7=V12_7
     etemp2_8=V12_8
     etemp2_9=V12_9
     etemp2_10=V12_10
     etemp2_11=V12_11
     etemp2_12=V12_12
     etemp2_13=V12_13
     etemp2_14=V12_14
     etemp2_15=V12_15
     etemp2_16=V12_16
     etemp2_17=V12_17
     etemp2_18=V12_18
     etemp2_19=V12_19
     etemp2_20=V12_20
#
     sqr=0.0
     etemp=V11_1*etemp2_1
     sqr+=etemp
     etemp=V11_2*etemp2_2
     sqr+=etemp
     etemp=V11_3*etemp2_3
     sqr+=etemp
     etemp=V11_4*etemp2_4
     sqr+=etemp
     etemp=V11_5*etemp2_5
     sqr+=etemp
     etemp=V11_6*etemp2_6
     sqr+=etemp
     etemp=V11_7*etemp2_7
     sqr+=etemp
     etemp=V11_8*etemp2_8
     sqr+=etemp
     etemp=V11_9*etemp2_9
     sqr+=etemp
     etemp=V11_10*etemp2_10
     sqr+=etemp
     etemp=V11_11*etemp2_11
     sqr+=etemp
     etemp=V11_12*etemp2_12
     sqr+=etemp
     etemp=V11_13*etemp2_13
     sqr+=etemp
     etemp=V11_14*etemp2_14
     sqr+=etemp
     etemp=V11_15*etemp2_15
     sqr+=etemp
     etemp=V11_16*etemp2_16
     sqr+=etemp
     etemp=V11_17*etemp2_17
     sqr+=etemp
     etemp=V11_18*etemp2_18
     sqr+=etemp
     etemp=V11_19*etemp2_19
     sqr+=etemp
     etemp=V11_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V11_1*sqr
     Vtemp_2=V11_2*sqr
     Vtemp_3=V11_3*sqr
     Vtemp_4=V11_4*sqr
     Vtemp_5=V11_5*sqr
     Vtemp_6=V11_6*sqr
     Vtemp_7=V11_7*sqr
     Vtemp_8=V11_8*sqr
     Vtemp_9=V11_9*sqr
     Vtemp_10=V11_10*sqr
     Vtemp_11=V11_11*sqr
     Vtemp_12=V11_12*sqr
     Vtemp_13=V11_13*sqr
     Vtemp_14=V11_14*sqr
     Vtemp_15=V11_15*sqr
     Vtemp_16=V11_16*sqr
     Vtemp_17=V11_17*sqr
     Vtemp_18=V11_18*sqr
     Vtemp_19=V11_19*sqr
     Vtemp_20=V11_20*sqr
#
     V12_1+=Vtemp_1
     V12_2+=Vtemp_2
     V12_3+=Vtemp_3
     V12_4+=Vtemp_4
     V12_5+=Vtemp_5
     V12_6+=Vtemp_6
     V12_7+=Vtemp_7
     V12_8+=Vtemp_8
     V12_9+=Vtemp_9
     V12_10+=Vtemp_10
     V12_11+=Vtemp_11
     V12_12+=Vtemp_12
     V12_13+=Vtemp_13
     V12_14+=Vtemp_14
     V12_15+=Vtemp_15
     V12_16+=Vtemp_16
     V12_17+=Vtemp_17
     V12_18+=Vtemp_18
     V12_19+=Vtemp_19
     V12_20+=Vtemp_20
#
#
     Vtemp_1=V12_1
     Vtemp_2=V12_2
     Vtemp_3=V12_3
     Vtemp_4=V12_4
     Vtemp_5=V12_5
     Vtemp_6=V12_6
     Vtemp_7=V12_7
     Vtemp_8=V12_8
     Vtemp_9=V12_9
     Vtemp_10=V12_10
     Vtemp_11=V12_11
     Vtemp_12=V12_12
     Vtemp_13=V12_13
     Vtemp_14=V12_14
     Vtemp_15=V12_15
     Vtemp_16=V12_16
     Vtemp_17=V12_17
     Vtemp_18=V12_18
     Vtemp_19=V12_19
     Vtemp_20=V12_20
#
     sqr=0.0
#
     etemp=V12_1*Vtemp_1
     sqr+=etemp
     etemp=V12_2*Vtemp_2
     sqr+=etemp
     etemp=V12_3*Vtemp_3
     sqr+=etemp
     etemp=V12_4*Vtemp_4
     sqr+=etemp
     etemp=V12_5*Vtemp_5
     sqr+=etemp
     etemp=V12_6*Vtemp_6
     sqr+=etemp
     etemp=V12_7*Vtemp_7
     sqr+=etemp
     etemp=V12_8*Vtemp_8
     sqr+=etemp
     etemp=V12_9*Vtemp_9
     sqr+=etemp
     etemp=V12_10*Vtemp_10
     sqr+=etemp
     etemp=V12_11*Vtemp_11
     sqr+=etemp
     etemp=V12_12*Vtemp_12
     sqr+=etemp
     etemp=V12_13*Vtemp_13
     sqr+=etemp
     etemp=V12_14*Vtemp_14
     sqr+=etemp
     etemp=V12_15*Vtemp_15
     sqr+=etemp
     etemp=V12_16*Vtemp_16
     sqr+=etemp
     etemp=V12_17*Vtemp_17
     sqr+=etemp
     etemp=V12_18*Vtemp_18
     sqr+=etemp
     etemp=V12_19*Vtemp_19
     sqr+=etemp
     etemp=V12_20*Vtemp_20
     sqr+=etemp
#
       exponent=0.5
#       execute square_root sqr exponent
#       sqr2=1.0/sqr
     execute norm_fac sqr exponent
     sqr2=sqr
#
     V12_1*=sqr2
     V12_2*=sqr2
     V12_3*=sqr2
     V12_4*=sqr2
     V12_5*=sqr2
     V12_6*=sqr2
     V12_7*=sqr2
     V12_8*=sqr2
     V12_9*=sqr2
     V12_10*=sqr2
     V12_11*=sqr2
     V12_12*=sqr2
     V12_13*=sqr2
     V12_14*=sqr2
     V12_15*=sqr2
     V12_16*=sqr2
     V12_17*=sqr2
     V12_18*=sqr2
     V12_19*=sqr2
     V12_20*=sqr2
#
     DO k20 
     DO j20 
#
        if j20 == 1 
           if k20 == 1 
              MYvev(k20,j20) = V1_1  
           endif 
           if k20 == 2 
              MYvev(k20,j20) = V2_1  
           endif 
           if k20 == 3 
              MYvev(k20,j20) = V3_1  
           endif 
           if k20 == 4 
              MYvev(k20,j20) = V4_1  
           endif 
           if k20 == 5 
              MYvev(k20,j20) = V5_1  
           endif 
           if k20 == 6 
              MYvev(k20,j20) = V6_1  
           endif 
           if k20 == 7 
              MYvev(k20,j20) = V7_1  
           endif 
           if k20 == 8 
              MYvev(k20,j20) = V8_1  
           endif 
           if k20 == 9 
              MYvev(k20,j20) = V9_1  
           endif 
           if k20 == 10
              MYvev(k20,j20) = V10_1  
           endif 
           if k20 == 11
              MYvev(k20,j20) = V11_1  
           endif 
           if k20 == 12
              MYvev(k20,j20) = V12_1  
           endif 
        endif 
#
#
        if j20 == 2 
           if k20 == 1 
              MYvev(k20,j20) = V1_2  
           endif 
           if k20 == 2 
              MYvev(k20,j20) = V2_2  
           endif 
           if k20 == 3 
              MYvev(k20,j20) = V3_2  
           endif 
           if k20 == 4 
              MYvev(k20,j20) = V4_2  
           endif 
           if k20 == 5 
              MYvev(k20,j20) = V5_2  
           endif 
           if k20 == 6 
              MYvev(k20,j20) = V6_2  
           endif 
           if k20 == 7 
              MYvev(k20,j20) = V7_2  
           endif 
           if k20 == 8 
              MYvev(k20,j20) = V8_2  
           endif 
           if k20 == 9 
              MYvev(k20,j20) = V9_2  
           endif 
           if k20 == 10
              MYvev(k20,j20) = V10_2  
           endif 
           if k20 == 11
              MYvev(k20,j20) = V11_2  
           endif 
           if k20 == 12
              MYvev(k20,j20) = V12_2  
           endif 
        endif 
#
#
        if j20 == 3 
           if k20 == 1 
              MYvev(k20,j20) = V1_3  
           endif 
           if k20 == 2 
              MYvev(k20,j20) = V2_3  
           endif 
           if k20 == 3 
              MYvev(k20,j20) = V3_3  
           endif 
           if k20 == 4 
              MYvev(k20,j20) = V4_3  
           endif 
           if k20 == 5 
              MYvev(k20,j20) = V5_3  
           endif 
           if k20 == 6 
              MYvev(k20,j20) = V6_3  
           endif 
           if k20 == 7 
              MYvev(k20,j20) = V7_3  
           endif 
           if k20 == 8 
              MYvev(k20,j20) = V8_3  
           endif 
           if k20 == 9 
              MYvev(k20,j20) = V9_3  
           endif 
           if k20 == 10
              MYvev(k20,j20) = V10_3  
           endif 
           if k20 == 11
              MYvev(k20,j20) = V11_3  
           endif 
           if k20 == 12
              MYvev(k20,j20) = V12_3  
           endif 
        endif 
#
#
        if j20 == 4 
           if k20 == 1 
              MYvev(k20,j20) = V1_4  
           endif 
           if k20 == 2 
              MYvev(k20,j20) = V2_4  
           endif 
           if k20 == 3 
              MYvev(k20,j20) = V3_4  
           endif 
           if k20 == 4 
              MYvev(k20,j20) = V4_4  
           endif 
           if k20 == 5 
              MYvev(k20,j20) = V5_4  
           endif 
           if k20 == 6 
              MYvev(k20,j20) = V6_4  
           endif 
           if k20 == 7 
              MYvev(k20,j20) = V7_4  
           endif 
           if k20 == 8 
              MYvev(k20,j20) = V8_4  
           endif 
           if k20 == 9 
              MYvev(k20,j20) = V9_4  
           endif 
           if k20 == 10
              MYvev(k20,j20) = V10_4  
           endif 
           if k20 == 11
              MYvev(k20,j20) = V11_4  
           endif 
           if k20 == 12
              MYvev(k20,j20) = V12_4  
           endif 
        endif 
#
#
        if j20 == 5 
           if k20 == 1 
              MYvev(k20,j20) = V1_5  
           endif 
           if k20 == 2 
              MYvev(k20,j20) = V2_5  
           endif 
           if k20 == 3 
              MYvev(k20,j20) = V3_5  
           endif 
           if k20 == 4 
              MYvev(k20,j20) = V4_5  
           endif 
           if k20 == 5 
              MYvev(k20,j20) = V5_5  
           endif 
           if k20 == 6 
              MYvev(k20,j20) = V6_5  
           endif 
           if k20 == 7 
              MYvev(k20,j20) = V7_5  
           endif 
           if k20 == 8 
              MYvev(k20,j20) = V8_5  
           endif 
           if k20 == 9 
              MYvev(k20,j20) = V9_5  
           endif 
           if k20 == 10
              MYvev(k20,j20) = V10_5  
           endif 
           if k20 == 11
              MYvev(k20,j20) = V11_5  
           endif 
           if k20 == 12
              MYvev(k20,j20) = V12_5  
           endif 
        endif 
#
#
        if j20 == 6 
           if k20 == 1 
              MYvev(k20,j20) = V1_6  
           endif 
           if k20 == 2 
              MYvev(k20,j20) = V2_6  
           endif 
           if k20 == 3 
              MYvev(k20,j20) = V3_6  
           endif 
           if k20 == 4 
              MYvev(k20,j20) = V4_6  
           endif 
           if k20 == 5 
              MYvev(k20,j20) = V5_6  
           endif 
           if k20 == 6 
              MYvev(k20,j20) = V6_6  
           endif 
           if k20 == 7 
              MYvev(k20,j20) = V7_6  
           endif 
           if k20 == 8 
              MYvev(k20,j20) = V8_6  
           endif 
           if k20 == 9 
              MYvev(k20,j20) = V9_6  
           endif 
           if k20 == 10
              MYvev(k20,j20) = V10_6  
           endif 
           if k20 == 11
              MYvev(k20,j20) = V11_6  
           endif 
           if k20 == 12
              MYvev(k20,j20) = V12_6  
           endif 
        endif 
#
#
        if j20 == 7 
           if k20 == 1 
              MYvev(k20,j20) = V1_7  
           endif 
           if k20 == 2 
              MYvev(k20,j20) = V2_7  
           endif 
           if k20 == 3 
              MYvev(k20,j20) = V3_7  
           endif 
           if k20 == 4 
              MYvev(k20,j20) = V4_7  
           endif 
           if k20 == 5 
              MYvev(k20,j20) = V5_7  
           endif 
           if k20 == 6 
              MYvev(k20,j20) = V6_7  
           endif 
           if k20 == 7 
              MYvev(k20,j20) = V7_7  
           endif 
           if k20 == 8 
              MYvev(k20,j20) = V8_7  
           endif 
           if k20 == 9 
              MYvev(k20,j20) = V9_7  
           endif 
           if k20 == 10
              MYvev(k20,j20) = V10_7  
           endif 
           if k20 == 11
              MYvev(k20,j20) = V11_7  
           endif 
           if k20 == 12
              MYvev(k20,j20) = V12_7  
           endif 
        endif 
#
#
        if j20 == 8 
           if k20 == 1 
              MYvev(k20,j20) = V1_8  
           endif 
           if k20 == 2 
              MYvev(k20,j20) = V2_8  
           endif 
           if k20 == 3 
              MYvev(k20,j20) = V3_8  
           endif 
           if k20 == 4 
              MYvev(k20,j20) = V4_8  
           endif 
           if k20 == 5 
              MYvev(k20,j20) = V5_8  
           endif 
           if k20 == 6 
              MYvev(k20,j20) = V6_8  
           endif 
           if k20 == 7 
              MYvev(k20,j20) = V7_8  
           endif 
           if k20 == 8 
              MYvev(k20,j20) = V8_8  
           endif 
           if k20 == 9 
              MYvev(k20,j20) = V9_8  
           endif 
           if k20 == 10
              MYvev(k20,j20) = V10_8  
           endif 
           if k20 == 11
              MYvev(k20,j20) = V11_8  
           endif 
           if k20 == 12
              MYvev(k20,j20) = V12_8  
           endif 
        endif 
#
#
        if j20 == 9 
           if k20 == 1 
              MYvev(k20,j20) = V1_9  
           endif 
           if k20 == 2 
              MYvev(k20,j20) = V2_9  
           endif 
           if k20 == 3 
              MYvev(k20,j20) = V3_9  
           endif 
           if k20 == 4 
              MYvev(k20,j20) = V4_9  
           endif 
           if k20 == 5 
              MYvev(k20,j20) = V5_9  
           endif 
           if k20 == 6 
              MYvev(k20,j20) = V6_9  
           endif 
           if k20 == 7 
              MYvev(k20,j20) = V7_9  
           endif 
           if k20 == 8 
              MYvev(k20,j20) = V8_9  
           endif 
           if k20 == 9 
              MYvev(k20,j20) = V9_9  
           endif 
           if k20 == 10
              MYvev(k20,j20) = V10_9  
           endif 
           if k20 == 11
              MYvev(k20,j20) = V11_9  
           endif 
           if k20 == 12
              MYvev(k20,j20) = V12_9  
           endif 
        endif 
#
#
        if j20 == 10
           if k20 == 1 
              MYvev(k20,j20) = V1_10 
           endif 
           if k20 == 2 
              MYvev(k20,j20) = V2_10 
           endif 
           if k20 == 3 
              MYvev(k20,j20) = V3_10 
           endif 
           if k20 == 4 
              MYvev(k20,j20) = V4_10 
           endif 
           if k20 == 5 
              MYvev(k20,j20) = V5_10 
           endif 
           if k20 == 6 
              MYvev(k20,j20) = V6_10 
           endif 
           if k20 == 7 
              MYvev(k20,j20) = V7_10 
           endif 
           if k20 == 8 
              MYvev(k20,j20) = V8_10 
           endif 
           if k20 == 9 
              MYvev(k20,j20) = V9_10 
           endif 
           if k20 == 10
              MYvev(k20,j20) = V10_10 
           endif 
           if k20 == 11
              MYvev(k20,j20) = V11_10 
           endif 
           if k20 == 12
              MYvev(k20,j20) = V12_10 
           endif 
        endif 
#
#
        if j20 == 11
           if k20 == 1 
              MYvev(k20,j20) = V1_11 
           endif 
           if k20 == 2 
              MYvev(k20,j20) = V2_11 
           endif 
           if k20 == 3 
              MYvev(k20,j20) = V3_11 
           endif 
           if k20 == 4 
              MYvev(k20,j20) = V4_11 
           endif 
           if k20 == 5 
              MYvev(k20,j20) = V5_11 
           endif 
           if k20 == 6 
              MYvev(k20,j20) = V6_11 
           endif 
           if k20 == 7 
              MYvev(k20,j20) = V7_11 
           endif 
           if k20 == 8 
              MYvev(k20,j20) = V8_11 
           endif 
           if k20 == 9 
              MYvev(k20,j20) = V9_11 
           endif 
           if k20 == 10
              MYvev(k20,j20) = V10_11 
           endif 
           if k20 == 11
              MYvev(k20,j20) = V11_11 
           endif 
           if k20 == 12
              MYvev(k20,j20) = V12_11 
           endif 
        endif 
#
#
        if j20 == 12
           if k20 == 1 
              MYvev(k20,j20) = V1_12 
           endif 
           if k20 == 2 
              MYvev(k20,j20) = V2_12 
           endif 
           if k20 == 3 
              MYvev(k20,j20) = V3_12 
           endif 
           if k20 == 4 
              MYvev(k20,j20) = V4_12 
           endif 
           if k20 == 5 
              MYvev(k20,j20) = V5_12 
           endif 
           if k20 == 6 
              MYvev(k20,j20) = V6_12 
           endif 
           if k20 == 7 
              MYvev(k20,j20) = V7_12 
           endif 
           if k20 == 8 
              MYvev(k20,j20) = V8_12 
           endif 
           if k20 == 9 
              MYvev(k20,j20) = V9_12 
           endif 
           if k20 == 10
              MYvev(k20,j20) = V10_12 
           endif 
           if k20 == 11
              MYvev(k20,j20) = V11_12 
           endif 
           if k20 == 12
              MYvev(k20,j20) = V12_12 
           endif 
        endif 
#
#
        if j20 == 13
           if k20 == 1 
              MYvev(k20,j20) = V1_13 
           endif 
           if k20 == 2 
              MYvev(k20,j20) = V2_13 
           endif 
           if k20 == 3 
              MYvev(k20,j20) = V3_13 
           endif 
           if k20 == 4 
              MYvev(k20,j20) = V4_13 
           endif 
           if k20 == 5 
              MYvev(k20,j20) = V5_13 
           endif 
           if k20 == 6 
              MYvev(k20,j20) = V6_13 
           endif 
           if k20 == 7 
              MYvev(k20,j20) = V7_13 
           endif 
           if k20 == 8 
              MYvev(k20,j20) = V8_13 
           endif 
           if k20 == 9 
              MYvev(k20,j20) = V9_13 
           endif 
           if k20 == 10
              MYvev(k20,j20) = V10_13 
           endif 
           if k20 == 11
              MYvev(k20,j20) = V11_13 
           endif 
           if k20 == 12
              MYvev(k20,j20) = V12_13 
           endif 
        endif 
#
#
        if j20 == 14
           if k20 == 1 
              MYvev(k20,j20) = V1_14 
           endif 
           if k20 == 2 
              MYvev(k20,j20) = V2_14 
           endif 
           if k20 == 3 
              MYvev(k20,j20) = V3_14 
           endif 
           if k20 == 4 
              MYvev(k20,j20) = V4_14 
           endif 
           if k20 == 5 
              MYvev(k20,j20) = V5_14 
           endif 
           if k20 == 6 
              MYvev(k20,j20) = V6_14 
           endif 
           if k20 == 7 
              MYvev(k20,j20) = V7_14 
           endif 
           if k20 == 8 
              MYvev(k20,j20) = V8_14 
           endif 
           if k20 == 9 
              MYvev(k20,j20) = V9_14 
           endif 
           if k20 == 10
              MYvev(k20,j20) = V10_14 
           endif 
           if k20 == 11
              MYvev(k20,j20) = V11_14 
           endif 
           if k20 == 12
              MYvev(k20,j20) = V12_14 
           endif 
        endif 
#
#
        if j20 == 15
           if k20 == 1 
              MYvev(k20,j20) = V1_15 
           endif 
           if k20 == 2 
              MYvev(k20,j20) = V2_15 
           endif 
           if k20 == 3 
              MYvev(k20,j20) = V3_15 
           endif 
           if k20 == 4 
              MYvev(k20,j20) = V4_15 
           endif 
           if k20 == 5 
              MYvev(k20,j20) = V5_15 
           endif 
           if k20 == 6 
              MYvev(k20,j20) = V6_15 
           endif 
           if k20 == 7 
              MYvev(k20,j20) = V7_15 
           endif 
           if k20 == 8 
              MYvev(k20,j20) = V8_15 
           endif 
           if k20 == 9 
              MYvev(k20,j20) = V9_15 
           endif 
           if k20 == 10
              MYvev(k20,j20) = V10_15 
           endif 
           if k20 == 11
              MYvev(k20,j20) = V11_15 
           endif 
           if k20 == 12
              MYvev(k20,j20) = V12_15 
           endif 
        endif 
#
#
        if j20 == 16
           if k20 == 1 
              MYvev(k20,j20) = V1_16 
           endif 
           if k20 == 2 
              MYvev(k20,j20) = V2_16 
           endif 
           if k20 == 3 
              MYvev(k20,j20) = V3_16 
           endif 
           if k20 == 4 
              MYvev(k20,j20) = V4_16 
           endif 
           if k20 == 5 
              MYvev(k20,j20) = V5_16 
           endif 
           if k20 == 6 
              MYvev(k20,j20) = V6_16 
           endif 
           if k20 == 7 
              MYvev(k20,j20) = V7_16 
           endif 
           if k20 == 8 
              MYvev(k20,j20) = V8_16 
           endif 
           if k20 == 9 
              MYvev(k20,j20) = V9_16 
           endif 
           if k20 == 10
              MYvev(k20,j20) = V10_16 
           endif 
           if k20 == 11
              MYvev(k20,j20) = V11_16 
           endif 
           if k20 == 12
              MYvev(k20,j20) = V12_16 
           endif 
        endif 
#
#
        if j20 == 17
           if k20 == 1 
              MYvev(k20,j20) = V1_17 
           endif 
           if k20 == 2 
              MYvev(k20,j20) = V2_17 
           endif 
           if k20 == 3 
              MYvev(k20,j20) = V3_17 
           endif 
           if k20 == 4 
              MYvev(k20,j20) = V4_17 
           endif 
           if k20 == 5 
              MYvev(k20,j20) = V5_17 
           endif 
           if k20 == 6 
              MYvev(k20,j20) = V6_17 
           endif 
           if k20 == 7 
              MYvev(k20,j20) = V7_17 
           endif 
           if k20 == 8 
              MYvev(k20,j20) = V8_17 
           endif 
           if k20 == 9 
              MYvev(k20,j20) = V9_17 
           endif 
           if k20 == 10
              MYvev(k20,j20) = V10_17 
           endif 
           if k20 == 11
              MYvev(k20,j20) = V11_17 
           endif 
           if k20 == 12
              MYvev(k20,j20) = V12_17 
           endif 
        endif 
#
#
        if j20 == 18
           if k20 == 1 
              MYvev(k20,j20) = V1_18 
           endif 
           if k20 == 2 
              MYvev(k20,j20) = V2_18 
           endif 
           if k20 == 3 
              MYvev(k20,j20) = V3_18 
           endif 
           if k20 == 4 
              MYvev(k20,j20) = V4_18 
           endif 
           if k20 == 5 
              MYvev(k20,j20) = V5_18 
           endif 
           if k20 == 6 
              MYvev(k20,j20) = V6_18 
           endif 
           if k20 == 7 
              MYvev(k20,j20) = V7_18 
           endif 
           if k20 == 8 
              MYvev(k20,j20) = V8_18 
           endif 
           if k20 == 9 
              MYvev(k20,j20) = V9_18 
           endif 
           if k20 == 10
              MYvev(k20,j20) = V10_18 
           endif 
           if k20 == 11
              MYvev(k20,j20) = V11_18 
           endif 
           if k20 == 12
              MYvev(k20,j20) = V12_18 
           endif 
        endif 
#
#
        if j20 == 19
           if k20 == 1 
              MYvev(k20,j20) = V1_19 
           endif 
           if k20 == 2 
              MYvev(k20,j20) = V2_19 
           endif 
           if k20 == 3 
              MYvev(k20,j20) = V3_19 
           endif 
           if k20 == 4 
              MYvev(k20,j20) = V4_19 
           endif 
           if k20 == 5 
              MYvev(k20,j20) = V5_19 
           endif 
           if k20 == 6 
              MYvev(k20,j20) = V6_19 
           endif 
           if k20 == 7 
              MYvev(k20,j20) = V7_19 
           endif 
           if k20 == 8 
              MYvev(k20,j20) = V8_19 
           endif 
           if k20 == 9 
              MYvev(k20,j20) = V9_19 
           endif 
           if k20 == 10
              MYvev(k20,j20) = V10_19 
           endif 
           if k20 == 11
              MYvev(k20,j20) = V11_19 
           endif 
           if k20 == 12
              MYvev(k20,j20) = V12_19 
           endif 
        endif 
#
#
        if j20 == 20
           if k20 == 1 
              MYvev(k20,j20) = V1_20 
           endif 
           if k20 == 2 
              MYvev(k20,j20) = V2_20 
           endif 
           if k20 == 3 
              MYvev(k20,j20) = V3_20 
           endif 
           if k20 == 4 
              MYvev(k20,j20) = V4_20 
           endif 
           if k20 == 5 
              MYvev(k20,j20) = V5_20 
           endif 
           if k20 == 6 
              MYvev(k20,j20) = V6_20 
           endif 
           if k20 == 7 
              MYvev(k20,j20) = V7_20 
           endif 
           if k20 == 8 
              MYvev(k20,j20) = V8_20 
           endif 
           if k20 == 9 
              MYvev(k20,j20) = V9_20 
           endif 
           if k20 == 10
              MYvev(k20,j20) = V10_20 
           endif 
           if k20 == 11
              MYvev(k20,j20) = V11_20 
           endif 
           if k20 == 12
              MYvev(k20,j20) = V12_20 
           endif 
        endif 
#
     ENDDO j20 
     ENDDO k20 
#
     ENDPROC GSCHMIDT
#======================================================
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#--end of script generated part of the code
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#======================================================
#
      PROC TRANSFORM
#     -------------- 
#
      PARDO a, i, a1, i1 
            DO j20 
               if j20 <= 12 
                  taiai(a,i,a1,i1) = 0.0 
                  DO k21 
                     if k21 <= 20 
                        REQUEST             VC2AA(a,i,a1,i1,k21) a 
                        t1aiai(a,i,a1,i1) = VC2AA(a,i,a1,i1,k21) 
                        do k20 
                           if k20 == k21 
                              t20(j20,k20)      = MYvev(j20,k20) 
                              execute return_sval t20 fact 
                           endif 
                        enddo k20 
                        t1aiai(a,i,a1,i1)*= fact 
                        taiai(a,i,a1,i1) += t1aiai(a,i,a1,i1) 
                     endif # k21 <= 20 
                  ENDDO k21 
                  t2aiaiS(a,i,a1,i1,j20)          = taiai(a,i,a1,i1) 
                  PREPARE VTEMP2AA(a,i,a1,i1,j20) = t2aiaiS(a,i,a1,i1,j20) 
               endif # j20 <= 12 
            ENDDO j20 
      ENDPARDO a, i, a1, i1 
#
      PARDO a, i, b1, j1 
            DO j20 
               if j20 <= 12 
                  taibj(a,i,b1,j1) = 0.0 
                  DO k21 
                     if k21 <= 20 
                        REQUEST             VC2AB(a,i,b1,j1,k21) a 
                        t1aibj(a,i,b1,j1) = VC2AB(a,i,b1,j1,k21) 
                        do k20 
                           if k20 == k21 
                              t20(j20,k20)      = MYvev(j20,k20) 
                              execute return_sval t20 fact 
                           endif 
                        enddo k20 
                        t1aibj(a,i,b1,j1)*= fact 
                        taibj(a,i,b1,j1) += t1aibj(a,i,b1,j1) 
                     endif # k21 <= 20 
                  ENDDO k21 
                  t2aibjS(a,i,b1,j1,j20)          = taibj(a,i,b1,j1) 
                  PREPARE VTEMP2AB(a,i,b1,j1,j20) = t2aibjS(a,i,b1,j1,j20) 
               endif # j20 <= 12 
            ENDDO j20 
      ENDPARDO a, i, b1, j1 
#
      PARDO a, i  
            DO j20 
               if j20 <= 12 
                  tai(a,i) = 0.0 
                  DO k21 
                     if k21 <= 20 
                        GET         VC1A(a,i,k21) 
                        t1ai(a,i) = VC1A(a,i,k21) 
                        do k20 
                           if k20 == k21 
                              t20(j20,k20)      = MYvev(j20,k20) 
                              execute return_sval t20 fact 
                           endif 
                        enddo k20 
                        t1ai(a,i)*= fact 
                        tai(a,i) += t1ai(a,i) 
                     endif # k21 <= 20 
                  ENDDO k21 
                  t2aiS(a,i,j20)       = tai(a,i) 
                  PUT VTEMP1A(a,i,j20) = t2aiS(a,i,j20)
               endif # j20 <= 12 
            ENDDO j20 
      ENDPARDO a, i  
#
      execute server_barrier
#
#   rewrite temporary vectors into the usual ones
#
      PARDO a, i  
            DO k20 
               if k20 <= 12 
                  GET        VTEMP1A(a,i,k20) 
                  tai(a,i) = VTEMP1A(a,i,k20) 
                  do k21 
                     if k21 == k20 
                        tais(a,i,k21)         = tai(a,i)  
                        PUT VC1A(a,i,k21) = taiS(a,i,k21)  
                     endif # k21 == k20 
                  enddo k21 
               endif # k20 <= 12 
            ENDDO k20 
      ENDPARDO a, i  
#
      PARDO a, i, a1, i1 
            DO k20 
               if k20 <= 12 
                  request            VTEMP2AA(a,i,a1,i1,k20) i1
                  taiai(a,i,a1,i1) = VTEMP2AA(a,i,a1,i1,k20) 
                  do k21 
                     if k21 == k20 
                        taiais(a,i,a1,i1,k21)        = taiai(a,i,a1,i1)  
                        prepare VC2AA(a,i,a1,i1,k21) = taiaiS(a,i,a1,i1,k21)  
                     endif # k21 == k20 
                  enddo k21 
               endif # k20 <= 12 
            ENDDO k20 
      ENDPARDO a, i, a1, i1 
#
      PARDO a, i, b1, j1 
            DO k20 
               if k20 <= 12 
                  request            VTEMP2AB(a,i,b1,j1,k20) j1
                  taibj(a,i,b1,j1) = VTEMP2AB(a,i,b1,j1,k20) 
                  do k21 
                     if k21 == k20 
                        taibjs(a,i,b1,j1,k21)        = taibj(a,i,b1,j1)  
                        prepare VC2AB(a,i,b1,j1,k21) = taibjS(a,i,b1,j1,k21)  
                     endif # k21 == k20 
                  enddo k21 
               endif # k20 <= 12
            ENDDO k20
      ENDPARDO a, i, b1, j1 
#
      ENDPROC TRANSFORM
#     ----------------- 
#
      PROC TRANSFORM_HC
#     ----------------- 
#
      PARDO a, i, a1, i1 
            DO j20 
               if j20 <= 12 
                  taiai(a,i,a1,i1) = 0.0 
                  DO k20 
                     REQUEST             VCH2AA(a,i,a1,i1,k20) a 
                     t1aiai(a,i,a1,i1) = VCH2AA(a,i,a1,i1,k20) 

                     t20(j20,k20)      = MYvev(j20,k20) 
                     execute return_sval t20 fact 

                     t1aiai(a,i,a1,i1)*= fact 
                     taiai(a,i,a1,i1) += t1aiai(a,i,a1,i1) 
                  ENDDO k20 
                  t2aiaiS(a,i,a1,i1,j20)          = taiai(a,i,a1,i1) 
                  PREPARE VTEMP2AA(a,i,a1,i1,j20) = t2aiaiS(a,i,a1,i1,j20) 
               endif # j20 <= 12 
            ENDDO j20 
      ENDPARDO a, i, a1, i1 
#
      PARDO a, i, b1, j1 
            DO j20 
               if j20 <= 12 
                  taibj(a,i,b1,j1) = 0.0 
                  DO k20 
                     REQUEST             VCH2AB(a,i,b1,j1,k20) a 
                     t1aibj(a,i,b1,j1) = VCH2AB(a,i,b1,j1,k20) 

                     t20(j20,k20)      = MYvev(j20,k20) 
                     execute return_sval t20 fact 

                     t1aibj(a,i,b1,j1)*= fact 
                     taibj(a,i,b1,j1) += t1aibj(a,i,b1,j1) 
                  ENDDO k20 
                  t2aibjS(a,i,b1,j1,j20)          = taibj(a,i,b1,j1) 
                  PREPARE VTEMP2AB(a,i,b1,j1,j20) = t2aibjS(a,i,b1,j1,j20) 
               endif # j20 <= 12 
            ENDDO j20 
      ENDPARDO a, i, b1, j1 
#
      PARDO a, i  
            DO j20 
               if j20 <= 12 
                  tai(a,i) = 0.0 
                  DO k20 
                     GET                  VCH1A(a,i,k20) 
                     t1ai(a,i)          = VCH1A(a,i,k20) 

                     t20(j20,k20)       = MYvev(j20,k20) 
                     execute return_sval t20 fact 

                     t1ai(a,i)         *= fact 
                     tai(a,i)          += t1ai(a,i) 
                  ENDDO k20 
                  t2aiS(a,i,j20)       = tai(a,i) 
                  PUT VTEMP1A(a,i,j20) = t2aiS(a,i,j20) 
               endif # j20 <= 12 
            ENDDO j20 
      ENDPARDO a, i  
#
      execute server_barrier
#
#   rewrite temporary vectors into the usual ones
#
      PARDO a, i, a1, i1 
            DO k20 
               if k20 <= 12 
                  request                         VTEMP2AA(a,i,a1,i1,k20) i1
                  prepare VCH2AA(a,i,a1,i1,k20) = VTEMP2AA(a,i,a1,i1,k20)  
               endif # k20 <= 12 
            ENDDO k20 
      ENDPARDO a, i, a1, i1 
#
      PARDO a, i, b1, j1 
            DO k20 
               if k20 <= 12 
                  request                         VTEMP2AB(a,i,b1,j1,k20) j1
                  prepare VCH2AB(a,i,b1,j1,k20) = VTEMP2AB(a,i,b1,j1,k20)  
               endif # k20 <= 12
            ENDDO k20
      ENDPARDO a, i, b1, j1 
#
      PARDO a, i  
            DO k20 
               if k20 <= 12 
                  GET                  VTEMP1A(a,i,k20) 
                  tai(a,i)           = VTEMP1A(a,i,k20) 
                  t2ais(a,i,k20)     = tai(a,i)  
                  PUT VCH1A(a,i,k20) = t2aiS(a,i,k20)  
               endif # k20 <= 12 
            ENDDO k20 
      ENDPARDO a, i  
#
      ENDPROC TRANSFORM_HC
#     -------------------- 
#
     PROC TRUNCATE
#    ------------- 
#
      call FNDVECS
#
      call GSCHMIDT
#
      execute server_barrier
#
      call TRANSFORM
      execute server_barrier
#
      call TRANSFORM_HC
      execute server_barrier
#
      CALL Aconstr_tr 
      execute server_barrier
#
      call copy_toVCactual_tr
#
      execute server_barrier
#
     ENDPROC TRUNCATE
#    ---------------- 
#
      PROC cre_arrays
#
      #create VEV
       create VCE1A
       create VCONV1A
       create VCACT1A
       create VCHACT1A
      #create Fae_a
      #create Fmi_a
      #create Fmi_b
      #create Fia_a
      #create Fia_b
       create DDii
       create DDaa
       create DDjj
#
       EXECUTE SIP_BARRIER
#
      ENDPROC cre_arrays
#     ------------------ 
#
      PROC start_copy
#     --------------- 
#
      PARDO a, i
            if iroot == 2.0
               get VSTART1A2(a,i)
               tai(a,i)=VSTART1A2(a,i)
            endif
            if iroot == 3.0
               get VSTART1A3(a,i)
               tai(a,i)=VSTART1A3(a,i)
            endif
            if iroot == 4.0
               get VSTART1A4(a,i)
               tai(a,i)=VSTART1A4(a,i)
            endif
            if iroot == 5.0
               get VSTART1A5(a,i)
               tai(a,i)=VSTART1A5(a,i)
            endif
            if iroot == 6.0
               get VSTART1A6(a,i)
               tai(a,i)=VSTART1A6(a,i)
            endif
            if iroot == 7.0
               get VSTART1A7(a,i)
               tai(a,i)=VSTART1A7(a,i)
            endif
            if iroot == 8.0
               get VSTART1A8(a,i)
               tai(a,i)=VSTART1A8(a,i)
            endif
            if iroot == 9.0
               get VSTART1A9(a,i)
               tai(a,i)=VSTART1A9(a,i)
            endif
            if iroot == 10.0
               get VSTART1A10(a,i)
               tai(a,i)=VSTART1A10(a,i)
            endif
            if iroot == 11.0
               get VSTART1A11(a,i)
               tai(a,i)=VSTART1A11(a,i)
            endif
            if iroot == 12.0
               get VSTART1A12(a,i)
               tai(a,i)=VSTART1A12(a,i)
            endif

           #GET VCE1A(a,i)  #  Watson, We want the R vector as guess
           #tai(a,i) = VCE1A(a,i) 
#
            PUT VCHACT1A(a,i)=tai(a,i)
            PUT VCE1A(a,i)=tai(a,i)
#
      ENDPARDO a, i
#
#
#
#      Watson modified
#
#
      rootcount = 0
      PARDO a, i, a1, i1
      DO kroot
         rootcount += 1
         IF iroot == rootcount
            REQUEST  R2AA_VECS (a,i,a1,i1,kroot) kroot
            taiai (a,i,a1,i1) = R2AA_VECS (a,i,a1,i1,kroot)
            PREPARE VCHACT2AA(a,i,a1,i1)=taiai(a,i,a1,i1)
            PREPARE VCE2AA(a,i,a1,i1)=taiai(a,i,a1,i1)
            EXIT
         ENDIF
      ENDDO kroot
      ENDPARDO a, i, a1, i1

      rootcount = 0
      PARDO a, i, b, j
      DO kroot
         rootcount += 1
         IF iroot == rootcount
            REQUEST            R2AB_VECS (a,i,b,j,kroot) kroot
            taibj  (a,i,b,j) = R2AB_VECS (a,i,b,j,kroot)
            PREPARE VCHACT2AB(a,i,b,j)=taibj(a,i,b,j)
            PREPARE VCE2AB(a,i,b,j)=taibj(a,i,b,j)
            EXIT
         ENDIF
      ENDDO kroot
      ENDPARDO a, i, b, j
#
#      PARDO a, i, a1, i1
#            taiai(a,i,a1,i1)=0.0
#            PREPARE VCHACT2AA(a,i,a1,i1)=taiai(a,i,a1,i1)
#            PREPARE VCE2AA(a,i,a1,i1)=taiai(a,i,a1,i1)
#      ENDPARDO a, i, a1, i1
##
#      PARDO a, i, b, j
#            taibj(a,i,b,j)=0.0
#            PREPARE VCHACT2AB(a,i,b,j)=taibj(a,i,b,j)
#            PREPARE VCE2AB(a,i,b,j)=taibj(a,i,b,j)
#      ENDPARDO a, i, b, j
#
      execute server_barrier
#
      ENDPROC start_copy
#     ------------------ 
#
      PROC start_copy_tr
#     ------------------
#
      PARDO a, i
            if iroot == 2.0
               get VSTART1A2(a,i)
               tai(a,i)=VSTART1A2(a,i)
            endif
            if iroot == 3.0
               get VSTART1A3(a,i)
               tai(a,i)=VSTART1A3(a,i)
            endif
            if iroot == 4.0
               get VSTART1A4(a,i)
               tai(a,i)=VSTART1A4(a,i)
            endif
            if iroot == 5.0
               get VSTART1A5(a,i)
               tai(a,i)=VSTART1A5(a,i)
            endif
            if iroot == 6.0
               get VSTART1A6(a,i)
               tai(a,i)=VSTART1A6(a,i)
            endif
            if iroot == 7.0
               get VSTART1A7(a,i)
               tai(a,i)=VSTART1A7(a,i)
            endif
            if iroot == 8.0
               get VSTART1A8(a,i)
               tai(a,i)=VSTART1A8(a,i)
            endif
            if iroot == 9.0
               get VSTART1A9(a,i)
               tai(a,i)=VSTART1A9(a,i)
            endif
            if iroot == 10.0
               get VSTART1A10(a,i)
               tai(a,i)=VSTART1A10(a,i)
            endif
            if iroot == 11.0
               get VSTART1A11(a,i)
               tai(a,i)=VSTART1A11(a,i)
            endif
            if iroot == 12.0
               get VSTART1A12(a,i)
               tai(a,i)=VSTART1A12(a,i)
            endif
#
            PUT VCACT1A(a,i)=tai(a,i)
#
      ENDPARDO a, i
#
#
      rootcount = 0
      PARDO a, i, a1, i1
      DO kroot
         rootcount += 1
         IF iroot == rootcount
            REQUEST  R2AA_VECS (a,i,a1,i1,kroot) kroot
            taiai (a,i,a1,i1) = R2AA_VECS (a,i,a1,i1,kroot)
            PREPARE VCACT2AA(a,i,a1,i1)=taiai(a,i,a1,i1)
            EXIT
         ENDIF
      ENDDO kroot
      ENDPARDO a, i, a1, i1

      rootcount = 0
      PARDO a, i, b, j
      DO kroot
         rootcount += 1
         IF iroot == rootcount
            REQUEST            R2AB_VECS (a,i,b,j,kroot) kroot
            taibj  (a,i,b,j) = R2AB_VECS (a,i,b,j,kroot)
            PREPARE VCACT2AB(a,i,b,j)=taibj(a,i,b,j)
            EXIT
         ENDIF
      ENDDO kroot
      ENDPARDO a, i, b, j
#
#      PARDO a, i, a1, i1
#            taiai(a,i,a1,i1)=0.0
#            PREPARE VCACT2AA(a,i,a1,i1)=taiai(a,i,a1,i1)
#      ENDPARDO a, i, a1, i1
#
#      PARDO a, i, b, j
#            taibj(a,i,b,j)=0.0
#            PREPARE VCACT2AB(a,i,b,j)=taibj(a,i,b,j)
#      ENDPARDO a, i, b, j
#
      ENDPROC start_copy_tr
#     ---------------------
#
#======================================================
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#--end of script generated part of the code
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#======================================================
#
#
#------------------------------------------------------------------------
#
#     -----------------
      PROC  PRINT_XI_AB
#     --------------
#
#
      EXECUTE  SERVER_BARRIER
      EXECUTE  PRINT_SCALAR  ZERO
      PARDO  a, i, a1, i1
         REQUEST             XI2_AB (a,i,a1,i1) a
         taiai (a,i,a1,i1) = XI2_AB (a,i,a1,i1)
         EXECUTE  DUMP_AMP  taiai
      ENDPARDO  a, i, a1, i1
      EXECUTE  SERVER_BARRIER
#
#
#     ...ready!
#
#
      ENDPROC  PRINT_XI_AB
#------------------------------------------------------------------------



#------------------------------------------------------------------------
#
#     -----------------
      PROC  PRINT_XI_AA
#     --------------
#
#
      EXECUTE  SERVER_BARRIER
      EXECUTE  PRINT_SCALAR  ZERO
      PARDO  a, i, a1, i1
         REQUEST             XI2_AA (a,i,a1,i1) a
         taiai (a,i,a1,i1) = XI2_AA (a,i,a1,i1)
         EXECUTE  DUMP_AMP  taiai
      ENDPARDO  a, i, a1, i1
      EXECUTE  SERVER_BARRIER
#
#
#     ...ready!
#
#
      ENDPROC  PRINT_XI_AA
#------------------------------------------------------------------------
#
#
#
#------------------------------------------------------------------------
#
#     ----------------
      PROC  PRINT_XI_A
#     ----------------
#
#
      EXECUTE  SERVER_BARRIER
      EXECUTE  PRINT_SCALAR  ZERO
      PARDO  a, i
         GET         XI1_A (a,i)
         tai (a,i) = XI1_A (a,i)
         EXECUTE  DUMP_AMP  tai
      ENDPARDO  a, i
      EXECUTE  SERVER_BARRIER
#
#
#     ...ready!
#
#
      ENDPROC  PRINT_XI_A
#------------------------------------------------------------------------
#
#
#
#
#          Watson, beginning the gradient code.
#
#                 1) Calculate Xi
#                 2) Calculate Z
#
#                               _
#                    Xi = <0| L H |q><q|R|p>
#
#                                      _      -1
#                    Z  = -<0|Xi|p><p| H-E  |p>
#                                         0
#
#------------------------------------------------------------------------
#
#     ----------------------
      PROC  XI_INTERMEDIATES
#     ----------------------
#
#
#
     PARDO i1, b, i, j
           T1pqpq(i1,b,i,j)         = 0.0
           PREPARE Njjai(i1,b,i,j) = T1pqpq(i1,b,i,j)
           PREPARE Niibj(i1,b,i,j) = T1pqpq(i1,b,i,j)
     ENDPARDO i1, b, i, j

     PARDO i, i1, i2, a
           T1pppp(i1,a,i,i2)        = 0.0
           prepare Niiai(i1,a,i,i2) = T1pppp(i1,a,i,i2)
     ENDPARDO i, i1, i2, a

     PARDO i, i1, j, j1
           tiijj(i,i1,j,j1) = 0.0
           put Niijj(i,i1,j,j1) = tiijj(i,i1,j,j1)
     ENDPARDO i, i1, j, j1

     PARDO i, i1, i2, i3
           tiiii(i,i1,i2,i3) = 0.0
           PUT Niiii(i,i1,i2,i3) = tiiii(i,i1,i2,i3)
     ENDPARDO i, i1, i2, i3

      CREATE  R2L2_iijj
      CREATE  R2L2_iiii
      CREATE  R2G2_iijj
      CREATE  R2G2_iiii
      ALLOCATE  LR1W_ai  (*,*)
      ALLOCATE  LR1W_ii  (*,*)
      ALLOCATE  LR1W_aa  (*,*)
      ALLOCATE  LR1L2_ai (*,*)
      ALLOCATE  LR2L1_ai (*,*)
      ALLOCATE  LR2W2_ai (*,*)
      ALLOCATE  LR2W2_aa (*,*)
      ALLOCATE  LR2W2_ii (*,*)
      ALLOCATE  LR2L2_aa (*,*)
      ALLOCATE  LR2L2_ii (*,*)
      EXECUTE  SERVER_BARRIER
#
#
#     Ring intermediates (L2 * T2  AND  L2 * R2)
#
#     The L2R2 is used in computing XI.  L2T2 is computed as well
#     and is only used in the density.
#
#
      PARDO  a, a2, i2, a1
         ALLOCATE  Laiai (a2,i2,a1,*)
         DO i1
            REQUEST                L2AA (i1,a1,i2,a2) i1
            Laiai (a2,i2,a1,i1)  = L2AA (i1,a1,i2,a2)
           #Laiai (a2,i2,a1,i1) *= LRNORM
         ENDDO i1
         DO i
            REQUEST  R2AA (a,i,a2,i2) i
            REQUEST  T2AA (a,i,a2,i2) i
            DO i1
               taiai  (a,i,a1,i1) = R2AA (a,i,a2,i2) * Laiai (a2,i2,a1,i1)
               t1aiai (a,i,a1,i1) = T2AA (a,i,a2,i2) * Laiai (a2,i2,a1,i1)

               tiaia  (i,a1,i1,a) = taiai  (a,i,a1,i1)
               t1iaia (i,a1,i1,a) = t1aiai (a,i,a1,i1)

               PREPARE  L2R2_aaaa (i,a1,i1,a) += tiaia  (i,a1,i1,a)
               PREPARE  L2T2_aaaa (i,a1,i1,a) += t1iaia (i,a1,i1,a)
            ENDDO i1
         ENDDO i
         DEALLOCATE  Laiai (a2,i2,a1,*)
      ENDPARDO  a, a2, i2, a1

      PARDO  a, b2, j2, a1
         ALLOCATE  Lbjai (b2,j2,a1,*)
         DO i1
            REQUEST                L2AB (i1,a1,j2,b2) i1
            Lbjai (b2,j2,a1,i1)  = L2AB (i1,a1,j2,b2)
           #Lbjai (b2,j2,a1,i1) *= LRNORM
         ENDDO i1
         DO i
            REQUEST  R2AB (a,i,b2,j2) i
            REQUEST  T2AB (a,i,b2,j2) i
            DO i1
               taiai  (a,i,a1,i1) = R2AB (a,i,b2,j2) * Lbjai (b2,j2,a1,i1)
               t1aiai (a,i,a1,i1) = T2AB (a,i,b2,j2) * Lbjai (b2,j2,a1,i1)

               tiaia  (i,a1,i1,a) = taiai  (a,i,a1,i1)
               t1iaia (i,a1,i1,a) = t1aiai (a,i,a1,i1)

               PREPARE  L2R2_aaaa (i,a1,i1,a) += tiaia  (i,a1,i1,a)
               PREPARE  L2T2_aaaa (i,a1,i1,a) += t1iaia (i,a1,i1,a)
            ENDDO i1
         ENDDO i
         DEALLOCATE  Lbjai (b2,j2,a1,*)
      ENDPARDO  a, b2, j2, a1

      PARDO  a, a2, i2, b1
         ALLOCATE  Laibj (a2,i2,b1,*)
         DO j1
            REQUEST                L2AB (i2,a2,j1,b1) j1
            Laibj (a2,i2,b1,j1)  = L2AB (i2,a2,j1,b1)
           #Laibj (a2,i2,b1,j1) *= LRNORM
         ENDDO j1
         DO i
            REQUEST  R2AA (a,i,a2,i2) i
            REQUEST  T2AA (a,i,a2,i2) i
            DO j1
               taibj  (a,i,b1,j1) = R2AA (a,i,a2,i2) * Laibj (a2,i2,b1,j1)
               t1aibj (a,i,b1,j1) = T2AA (a,i,a2,i2) * Laibj (a2,i2,b1,j1)

               tpqqp  (i,b1,j1,a) = taibj  (a,i,b1,j1)
               t1pqqp (i,b1,j1,a) = t1aibj (a,i,b1,j1)

               PREPARE  L2R2_abba (i,b1,j1,a) += tpqqp  (i,b1,j1,a)
               PREPARE  L2T2_abba (i,b1,j1,a) += t1pqqp (i,b1,j1,a)
            ENDDO j1
         ENDDO i
         DEALLOCATE  Laibj (a2,i2,b1,*)
      ENDPARDO  a, a2, i2, b1

      PARDO  a, b2, j2, b1
         ALLOCATE  Lbjbj (b2,j2,b1,*)
         DO j1
            REQUEST                L2AA (j2,b2,j1,b1) j1
            Lbjbj (b2,j2,b1,j1)  = L2AA (j2,b2,j1,b1)
           #Lbjbj (b2,j2,b1,j1) *= LRNORM
         ENDDO j1
         DO i
            REQUEST  R2AB (a,i,b2,j2) i
            REQUEST  T2AB (a,i,b2,j2) i
            DO j1
               taibj  (a,i,b1,j1) = R2AB (a,i,b2,j2) * Lbjbj (b2,j2,b1,j1)
               t1aibj (a,i,b1,j1) = T2AB (a,i,b2,j2) * Lbjbj (b2,j2,b1,j1)

               tpqqp  (i,b1,j1,a) = taibj  (a,i,b1,j1)
               t1pqqp (i,b1,j1,a) = t1aibj (a,i,b1,j1)

               PREPARE  L2R2_abba (i,b1,j1,a) += tpqqp  (i,b1,j1,a)
               PREPARE  L2T2_abba (i,b1,j1,a) += t1pqqp (i,b1,j1,a)
            ENDDO j1
         ENDDO i
         DEALLOCATE  Lbjbj (b2,j2,b1,*)
      ENDPARDO  a, b2, j2, b1

      PARDO  b, a2, j2, b1
         ALLOCATE  Lajib (a2,j2,*,b1)
         DO i1
            REQUEST                L2AB (i1,a2,j2,b1) i1
            Lajib (a2,j2,i1,b1)  = L2AB (i1,a2,j2,b1)
           #Lajib (a2,j2,i1,b1) *= LRNORM
         ENDDO i1
         DO i
            REQUEST              R2AB (a2,i,b,j2) i
            REQUEST              T2AB (a2,i,b,j2) i
            tpqpq  (i,b,a2,j2) = R2AB (a2,i,b,j2)
            t1pqpq (i,b,a2,j2) = T2AB (a2,i,b,j2)
            DO i1
               tibib  (i,b,i1,b1) = tpqpq  (i,b,a2,j2) * Lajib (a2,j2,i1,b1)
               t1ibib (i,b,i1,b1) = t1pqpq (i,b,a2,j2) * Lajib (a2,j2,i1,b1)

               PREPARE  L2R2_abab (i,b,i1,b1) += tibib  (i,b,i1,b1)
               PREPARE  L2T2_abab (i,b,i1,b1) += t1ibib (i,b,i1,b1)
            ENDDO i1
         ENDDO i
         DEALLOCATE  Lajib (a2,j2,*,b1)
      ENDPARDO  b, a2, j2, b1
#
#
#
#
#
      PARDO  a1, a3, i3, a2
         ALLOCATE  Liiaa (*,i3,a2,a3)
         DO i2
            REQUEST               R2AA (a2,i2,a3,i3) i2
            Liiaa (i2,i3,a2,a3) = R2AA (a2,i2,a3,i3)
         ENDDO i2
         DO i
            REQUEST              HBAR_AIBC_aaaa (a1,a2,i,a3) i
            tpppp (a2,a3,a1,i) = HBAR_AIBC_aaaa (a1,a2,i,a3)
            DO i2
               tiiai (i2,i3,a1,i)  = Liiaa (i2,i3,a2,a3) * tpppp (a2,a3,a1,i)
               tiiai (i2,i3,a1,i) *= -0.5
               tiaii (i2,a1,i3,i)  = tiiai (i2,i3,a1,i)
               PREPARE  Niiai (i2,a1,i3,i) += tiaii (i2,a1,i3,i)
            ENDDO i2
         ENDDO i
         DEALLOCATE  Liiaa (*,i3,a2,a3)
      ENDPARDO  a1, a3, i3, a2

      PARDO  b1, a3, i3, b2
         ALLOCATE Lqqpp (*,i3,b2,a3)
         DO j2
            REQUEST               R2AB (a3,i3,b2,j2) j2
            Lqqpp (j2,i3,b2,a3) = R2AB (a3,i3,b2,j2)
         ENDDO j2
         DO i
            REQUEST              HBAR_AIBC_aabb (b1,b2,i,a3) i
            tqpqp (b2,a3,b1,i) = HBAR_AIBC_aabb (b1,b2,i,a3)
            DO j2
               tjibi (j2,i3,b1,i)  = Lqqpp (j2,i3,b2,a3) * tqpqp (b2,a3,b1,i)
               tibij (i,b1,i3,j2)  = tjibi (j2,i3,b1,i)
               tibij (i,b1,i3,j2) *= -1.0
               PREPARE  Niibj (i,b1,i3,j2) += tibij (i,b1,i3,j2)
            ENDDO j2
         ENDDO i
         DEALLOCATE  Lqqpp (*,i3,b2,a3)
      ENDPARDO  b1, a3, i3, b2
#
#
#
#
#
      PARDO  a2, i2, a1, a3
         REQUEST               HBAR_AIBC_aaaa (a3,a1,i2,a2) a3
         tpppp (a1,a3,a2,i2) = HBAR_AIBC_aaaa (a3,a1,i2,a2)
         GET  R1A (a2,i2)
         taa (a1,a3)  = tpppp (a1,a3,a2,i2) * R1A (a2,i2)
         LR1W_aa (a1,a3) += taa (a1,a3)
      ENDPARDO  a2, i2, a1, a3

      PARDO  b2, j2, a1, a3
         REQUEST               HBAR_AIBC_aabb (a3,a1,j2,b2) a3
         tppqq (a1,a3,b2,j2) = HBAR_AIBC_aabb (a3,a1,j2,b2)
         GET  R1A (b2,j2)
         taa (a1,a3)  = tppqq (a1,a3,b2,j2) * R1A (b2,j2)
         LR1W_aa (a1,a3) += taa (a1,a3)
      ENDPARDO  b2, j2, a1, a3
#
#
#
#
#
      PARDO  i2, a2, a3, i
         ALLOCATE  Laiai  (a2,i,a3,*)
         ALLOCATE  L1aiai (a2,i,a3,*)
         DO i1
            REQUEST               L2AA   (i,a2,i1,a3) i1
            REQUEST               VSpipi (a2,i,a3,i1) i1
            Laiai  (a2,i,a3,i1) = L2AA   (i,a2,i1,a3)
            L1aiai (a2,i,a3,i1) = VSpipi (a2,i,a3,i1)
         ENDDO i1
         DO i3
            REQUEST               R2AA (a2,i2,a3,i3) i3
            taiai (a2,i2,a3,i3) = R2AA (a2,i2,a3,i3)
            DO i1
               tppqq  (i2,i,i3,i1)  = R2AA  (a2,i2,a3,i3) * Laiai (a2,i,a3,i1)
               t1ppqq (i2,i,i3,i1)  = taiai (a2,i2,a3,i3) * L1aiai (a2,i,a3,i1)
               PUT  R2L2_iiii (i2,i,i3,i1) += tppqq  (i2,i,i3,i1)
               PUT  R2G2_iiii (i2,i,i3,i1) += t1ppqq (i2,i,i3,i1)
            ENDDO i1
         ENDDO i3
         DEALLOCATE  Laiai  (a2,i,a3,*)
         DEALLOCATE  L1aiai (a2,i,a3,*)
      ENDPARDO  i2, a2, a3, i

      PARDO  i2, a2, b2, i
         ALLOCATE  Laibj  (a2,i,b2,*)
         ALLOCATE  L1aibj (a2,i,b2,*)
         DO j
            REQUEST              L2AB  (i,a2,j,b2) j
            REQUEST              Vpiqj (a2,i,b2,j) j
            Laibj  (a2,i,b2,j) = L2AB  (i,a2,j,b2)
            L1aibj (a2,i,b2,j) = Vpiqj (a2,i,b2,j)
         ENDDO j
         DO j2
            REQUEST               R2AB (a2,i2,b2,j2) j2
            taibj (a2,i2,b2,j2) = R2AB (a2,i2,b2,j2)
            DO j
               tppqq  (i2,i,j2,j)  = R2AB  (a2,i2,b2,j2) * Laibj  (a2,i,b2,j)
               t1ppqq (i2,i,j2,j)  = taibj (a2,i2,b2,j2) * L1aibj (a2,i,b2,j)
               PUT  R2L2_iijj (i2,i,j2,j) += tppqq  (i2,i,j2,j)
               PUT  R2G2_iijj (i2,i,j2,j) += t1ppqq (i2,i,j2,j)
            ENDDO j
         ENDDO j2
         DEALLOCATE  Laibj  (a2,i,b2,*)
         DEALLOCATE  L1aibj (a2,i,b2,*)
      ENDPARDO  i2, a2, b2, i
#
#
#
#
#
      PARDO  a2, i2, a1, i1
         REQUEST       VSpipi (a1,i1,a2,i2) a1
         GET           R1A (a2,i2)
         tpp (a1,i1) = VSpipi (a2,i2,a1,i1) * R1A (a2,i2)
         LR1W_ai (a1,i1) += tpp (a1,i1)
      ENDPARDO  a2, i2, a1, i1

      PARDO  b2, j2, a1, i1
         REQUEST       Vpiqj (a1,i1,b2,j2) a1
         GET           R1A (b2,j2)
         tpp (a1,i1) = Vpiqj (a1,i1,b2,j2) * R1A (b2,j2)
         LR1W_ai (a1,i1) += tpp (a1,i1)
      ENDPARDO  b2, j2, a1, i1
#
#
#
#
#
      PARDO  a2, i2, i1, i3
         REQUEST  HBAR_JKIA_aaaa (i1,i3,i2,a2) i1
         GET  R1A (a2,i2)
         tia (i2,a2) = R1A (a2,i2)
         tii (i1,i3) = HBAR_JKIA_aaaa (i1,i3,i2,a2) * tia (i2,a2)
         LR1W_ii (i1,i3) += tii (i1,i3)
      ENDPARDO  a2, i2, i1, i3

      PARDO  b2, j2, i1, i3
         REQUEST  HBAR_JKIA_aabb (i1,i3,j2,b2) i1
         GET  R1A (b2,j2)
         tia (j2,b2) = R1A (b2,j2)
         tii (i1,i3) = HBAR_JKIA_aabb (i1,i3,j2,b2) * tia (j2,b2)
         LR1W_ii (i1,i3) += tii (i1,i3)
      ENDPARDO  b2, j2, i1, i3
#
#
#
#
#
      PARDO  i, a, i2, a2
         REQUEST             L2AA (i,a,i2,a2) i
         REQUEST             R2AA (a,i,a2,i2) i
         GET                 R1A  (a2,i2)
         GET                 L1A  (i2,a2)
         taiai (a,i,a2,i2) = L2AA (i,a,i2,a2)
         tpp  (a2,i2)      = L1A  (i2,a2)
         tai  (a,i)        = taiai (a,i,a2,i2) * R1A (a2,i2)
         t1ai (a,i)        = R2AA  (a,i,a2,i2) * tpp (a2,i2)
         LR1L2_ai (a,i) += tai  (a,i)
         LR2L1_ai (a,i) += t1ai (a,i)
      ENDPARDO  i, a, i2, a2

      PARDO  i, a, j2, b2
         REQUEST              L2AB (i,a,j2,b2) i
         REQUEST              R2AB (a,i,b2,j2) i
         taibj (a,i,b2,j2)  = L2AB (i,a,j2,b2)

         GET                  R1A (b2,j2)
         GET                  L1A (j2,b2)
         t2pp (b2,j2)       = L1A (j2,b2)

         tai  (a,i)         = taibj (a,i,b2,j2) * R1A  (b2,j2)
         t1ai (a,i)         = R2AB  (a,i,b2,j2) * t2pp (b2,j2)

         LR1L2_ai (a,i)   += tai  (a,i)
         LR2L1_ai (a,i)   += t1ai (a,i)
      ENDPARDO  i, a, j2, b2
#
#
#
#
#
      PARDO  a2, a3, i2
         ALLOCATE  Laiai (a2,i2,a3,*)
         DO i1
            REQUEST               R2AA (a2,i2,a3,i1) i1
            Laiai (a2,i2,a3,i1) = R2AA (a2,i2,a3,i1)
         ENDDO i1
         DO a1
            REQUEST               HBAR_AIBC_aaaa (a1,a3,i2,a2) a1
            tpppp (a1,a2,i2,a3) = HBAR_AIBC_aaaa (a1,a3,i2,a2)
            DO i1
               tai (a1,i1)  = tpppp (a1,a2,i2,a3) * Laiai (a2,i2,a3,i1)
               tai (a1,i1) *= 0.5
               LR2W2_ai (a1,i1) += tai (a1,i1)
            ENDDO i1
         ENDDO a1
         DEALLOCATE  Laiai (a2,i2,a3,*)
      ENDPARDO  a2, a3, i2

      PARDO  b2, a3, j2
         ALLOCATE  Laiai (b2,j2,a3,*)
         DO i1
            REQUEST               R2AB (a3,i1,b2,j2) i1
            Laiai (b2,j2,a3,i1) = R2AB (a3,i1,b2,j2)
         ENDDO i1
         DO a1
            REQUEST               HBAR_AIBC_aabb (a1,a3,j2,b2) a1
            tpppp (a1,b2,j2,a3) = HBAR_AIBC_aabb (a1,a3,j2,b2)
            DO i1
               tai (a1,i1)  = tpppp (a1,b2,j2,a3) * Laiai (b2,j2,a3,i1)
               LR2W2_ai (a1,i1) += tai (a1,i1)
            ENDDO i1
         ENDDO a1
         DEALLOCATE  Laiai (b2,j2,a3,*)
      ENDPARDO  b2, a3, j2

      PARDO  a3, i3, i2
         ALLOCATE  Liaii (i2,a3,i3,*)
         DO i1
            REQUEST               HBAR_JKIA_aaaa (i2,i1,i3,a3) i1
            Liaii (i2,a3,i3,i1) = HBAR_JKIA_aaaa (i2,i1,i3,a3)
         ENDDO i1
         DO a1
            REQUEST               R2AA (a1,i2,a3,i3) a1
            taiai (a1,i2,a3,i3) = R2AA (a1,i2,a3,i3)
            DO i1
               tai (a1,i1)  = taiai (a1,i2,a3,i3) * Liaii (i2,a3,i3,i1)
               tai (a1,i1) *= -0.5
               LR2W2_ai (a1,i1) += tai (a1,i1)
            ENDDO i1
         ENDDO a1
         DEALLOCATE  Liaii (i2,a3,i3,*)
      ENDPARDO  a3, i3, i2

      PARDO  b3, j3, i2
         ALLOCATE  Liaii (i2,b3,j3,*)
         DO i1
            REQUEST               HBAR_JKIA_aabb (i2,i1,j3,b3) i1
            Liaii (i2,b3,j3,i1) = HBAR_JKIA_aabb (i2,i1,j3,b3)
         ENDDO i1
         DO a1
            REQUEST               R2AB (a1,i2,b3,j3) a1
            taibj (a1,i2,b3,j3) = R2AB (a1,i2,b3,j3)
            DO i1
               tai (a1,i1)  = taibj (a1,i2,b3,j3) * Liaii (i2,b3,j3,i1)
               tai (a1,i1) *= -1.0
               LR2W2_ai (a1,i1) += tai (a1,i1)
            ENDDO i1
         ENDDO a1
         DEALLOCATE  Liaii (i2,b3,j3,*)
      ENDPARDO  b3, j3, i2
#
#
#     R2 * L2 --> R2L2_aa
#     R2 * W2 --> R2W2_aa
#
#
      PARDO  a3, i2, i3
         ALLOCATE  Liaia (i3,a3,i2,*)
         DO a2
            REQUEST               R2AA (a2,i2,a3,i3) a2
            Liaia (i3,a3,i2,a2) = R2AA (a2,i2,a3,i3)
         ENDDO a2
         DO a
            REQUEST              VSpipi (a,i2,a3,i3) a
            REQUEST              L2AA   (i2,a,i3,a3) a
            taiai (a,i3,a3,i2) = L2AA   (i2,a,i3,a3)
            tpppp (a,i3,a3,i2) = VSpipi (a,i2,a3,i3)
            DO a2
               taa (a,a2)  = tpppp (a,i3,a3,i2) * Liaia (i3,a3,i2,a2)
               tpp (a,a2)  = taiai (a,i3,a3,i2) * Liaia (i3,a3,i2,a2)
               taa (a,a2) *= -0.5
               tpp (a,a2) *= -0.5
               LR2W2_aa (a,a2) += taa (a,a2)
               LR2L2_aa (a,a2) += tpp (a,a2)
            ENDDO a2
         ENDDO a
         DEALLOCATE  Liaia (i3,a3,i2,*)
      ENDPARDO  a3, i2, i3

      PARDO  b3, i2, j3
         ALLOCATE  Liaia (j3,b3,i2,*)
         DO a2
            REQUEST               R2AB (a2,i2,b3,j3) a2
            Liaia (j3,b3,i2,a2) = R2AB (a2,i2,b3,j3)
         ENDDO a2
         DO a
            REQUEST              Vpiqj (a,i2,b3,j3) a
            REQUEST              L2AB  (i2,a,j3,b3) a
            taiai (a,j3,b3,i2) = L2AB  (i2,a,j3,b3)
            tpppp (a,j3,b3,i2) = Vpiqj (a,i2,b3,j3)
            DO a2
               taa (a,a2)  = tpppp (a,j3,b3,i2) * Liaia (j3,b3,i2,a2)
               tpp (a,a2)  = taiai (a,j3,b3,i2) * Liaia (j3,b3,i2,a2)
               taa (a,a2) *= -1.0
               tpp (a,a2) *= -1.0
               LR2W2_aa (a,a2) += taa (a,a2)
               LR2L2_aa (a,a2) += tpp (a,a2)
            ENDDO a2
         ENDDO a
         DEALLOCATE  Liaia (j3,b3,i2,*)
      ENDPARDO  b3, i2, j3

      PARDO  i3, a2, a3
         ALLOCATE  Liaia (*,a2,i3,a3)
         DO i2
            REQUEST                R2AA (a2,i2,a3,i3) i2
            Liaia (i2,a2,i3,a3)  = R2AA (a2,i2,a3,i3)
            Liaia (i2,a2,i3,a3) *= 0.5
         ENDDO i2
         DO i
            REQUEST              VSpipi (a2,i,a3,i3) i
            REQUEST              L2AA   (i,a2,i3,a3) i
            taiai (a2,i3,a3,i) = VSpipi (a2,i,a3,i3)
            tpppp (a2,i3,a3,i) = L2AA   (i,a2,i3,a3)
            DO i2
               tii (i2,i)  = Liaia (i2,a2,i3,a3) * taiai (a2,i3,a3,i)
               tpp (i2,i)  = Liaia (i2,a2,i3,a3) * tpppp (a2,i3,a3,i)
               LR2W2_ii (i2,i) += tii (i2,i)
               LR2L2_ii (i2,i) += tpp (i2,i)
            ENDDO i2
         ENDDO i
         DEALLOCATE  Liaia (*,a2,i3,a3)
      ENDPARDO  i3, a2, a3

      PARDO  j3, a2, b3
         ALLOCATE  Liaia (*,a2,j3,b3)
         DO i2
            REQUEST                R2AB (a2,i2,b3,j3) i2
            Liaia (i2,a2,j3,b3)  = R2AB (a2,i2,b3,j3)
         ENDDO i2
         DO i
            REQUEST              Vpiqj (a2,i,b3,j3) i
            REQUEST              L2AB  (i,a2,j3,b3) i
            taiai (a2,j3,b3,i) = Vpiqj (a2,i,b3,j3)
            tpppp (a2,j3,b3,i) = L2AB  (i,a2,j3,b3)
            DO i2
               tii (i2,i)  = Liaia (i2,a2,j3,b3) * taiai (a2,j3,b3,i)
               tpp (i2,i)  = Liaia (i2,a2,j3,b3) * tpppp (a2,j3,b3,i)
               LR2W2_ii (i2,i) += tii (i2,i)
               LR2L2_ii (i2,i) += tpp (i2,i)
            ENDDO i2
         ENDDO i
         DEALLOCATE  Liaia (*,b2,j3,a3)
      ENDPARDO  j3, a2, b3
#
#
#          Done computing the intermediates!
#          Put them fully into the local arrays!
#
#
      CREATE  DIS_VO1
      CREATE  DIS_VO2
      CREATE  DIS_VO3
      CREATE  DIS_VO4
      CREATE  DIS_OO1
      CREATE  DIS_OO2
      CREATE  DIS_OO3
      CREATE  DIS_VV1
      CREATE  DIS_VV2
      CREATE  DIS_VV3
      EXECUTE  SIP_BARRIER

      DO i1
      DO a
         tpp  (a,i1) = LR1W_ai  (a,i1)
         t1pp (a,i1) = LR1L2_ai (a,i1)
         t2pp (a,i1) = LR2L1_ai (a,i1)
         t3pp (a,i1) = LR2W2_ai (a,i1)
         PUT  DIS_VO1 (a,i1) = tpp  (a,i1)
         PUT  DIS_VO2 (a,i1) = t1pp (a,i1)
         PUT  DIS_VO3 (a,i1) = t2pp (a,i1)
         PUT  DIS_VO4 (a,i1) = t3pp (a,i1)
      ENDDO a
      ENDDO i1

      DO i1
      DO i
         tpp  (i,i1) = LR1W_ii  (i,i1)
         t1pp (i,i1) = LR2W2_ii (i,i1)
         t2pp (i,i1) = LR2L2_ii (i,i1)
         PUT  DIS_OO1 (i,i1) = tpp  (i,i1)
         PUT  DIS_OO2 (i,i1) = t1pp (i,i1)
         PUT  DIS_OO3 (i,i1) = t2pp (i,i1)
      ENDDO i
      ENDDO i1

      DO a1
      DO a
         tpp  (a,a1) = LR1W_aa  (a,a1)
         t1pp (a,a1) = LR2W2_aa (a,a1)
         t2pp (a,a1) = LR2W2_aa (a,a1)
         PUT  DIS_VV1 (a,a1) = tpp  (a,a1)
         PUT  DIS_VV2 (a,a1) = t1pp (a,a1)
         PUT  DIS_VV3 (a,a1) = t2pp (a,a1)
      ENDDO a
      ENDDO a1

      EXECUTE  SIP_BARRIER

      DO i1
      DO a
         GET  DIS_VO1 (a,i1)
         GET  DIS_VO2 (a,i1)
         GET  DIS_VO3 (a,i1)
         GET  DIS_VO4 (a,i1)
         LR1W_ai  (a,i1) = DIS_VO1 (a,i1)
         LR1L2_ai (a,i1) = DIS_VO2 (a,i1)
         LR2L1_ai (a,i1) = DIS_VO3 (a,i1)
         LR2W2_ai (a,i1) = DIS_VO4 (a,i1)
      ENDDO a
      ENDDO i1

      DO i1
      DO i
            GET  DIS_OO1 (i,i1)
            GET  DIS_OO2 (i,i1)
            GET  DIS_OO3 (i,i1)
            LR1W_ii  (i,i1) = DIS_OO1 (i,i1)
            LR2W2_ii (i,i1) = DIS_OO2 (i,i1)
            LR2L2_ii (i,i1) = DIS_OO3 (i,i1)
      ENDDO i
      ENDDO i1

      DO a1
      DO a
         GET  DIS_VV1 (a,a1)
         GET  DIS_VV2 (a,a1)
         GET  DIS_VV3 (a,a1)
         LR1W_aa  (a,a1) = DIS_VV1 (a,a1)
         LR2W2_aa (a,a1) = DIS_VV2 (a,a1)
         LR2W2_aa (a,a1) = DIS_VV3 (a,a1)
      ENDDO a 
      ENDDO a1

      EXECUTE  SERVER_BARRIER

      DELETE  DIS_VO1
      DELETE  DIS_VO2
      DELETE  DIS_VO3
      DELETE  DIS_VO4
      DELETE  DIS_OO1
      DELETE  DIS_OO2
      DELETE  DIS_OO3
      DELETE  DIS_VV1
      DELETE  DIS_VV2
      DELETE  DIS_VV3
#
#
#     ...ready!
#
#
      ENDPROC  XI_INTERMEDIATES
#------------------------------------------------------------------------



#------------------------------------------------------------------------
#
#     --------------
      PROC  HEAVY_XI
#     --------------
#
#
#       ij               im  ef  jn
#      X   = P(ij)P(ab) l   r   g         1 in R2 L2 G
#       ab               ae  mn  bf
#
#
      PARDO  a, a2, i2, a1
         ALLOCATE  Laiai (a2,i2,a1,*)
         DO i1
            REQUEST               VSpipi (a2,i2,a1,i1) i1
            Laiai (a2,i2,a1,i1) = VSpipi (a2,i2,a1,i1)
         ENDDO i1
         DO i
            REQUEST             L2R2_aaaa (i2,a,i,a2) i
            tpppp (a,i,a2,i2) = L2R2_aaaa (i2,a,i,a2)
            DO i1
               taiai (a,i,a1,i1) = tpppp (a,i,a2,i2) * Laiai (a2,i2,a1,i1)
               PUT  D2aa (a,i,a1,i1) += taiai (a,i,a1,i1)
            ENDDO i1
         ENDDO i
         DEALLOCATE  Laiai (a2,i2,a1,*)
      ENDPARDO  a, a2, i2, a1

      PARDO  a, b2, j2, a1
         ALLOCATE  Lbjai (b2,j2,a1,*)
         DO i1
            REQUEST               Vpiqj (a1,i1,b2,j2) i1
            Lbjai (b2,j2,a1,i1) = Vpiqj (a1,i1,b2,j2)
         ENDDO i1
         DO i
            REQUEST             L2R2_abba (j2,a,i,b2) i
            tppqq (a,i,b2,j2) = L2R2_abba (j2,a,i,b2)
            DO i1
               taiai (a,i,a1,i1) = tppqq (a,i,b2,j2) * Lbjai (b2,j2,a1,i1)
               PUT D2aa (a,i,a1,i1) += taiai (a,i,a1,i1)
            ENDDO i1
         ENDDO i
         DEALLOCATE  Lbjai (b2,j2,a1,*)
      ENDPARDO  a, b2, j2, a1

      PARDO  b, a1, i1, a
         ALLOCATE  Laiai  (a,*,a1,i1)
         ALLOCATE  L1aiai (a,*,a1,i1)
         DO i
            REQUEST              VSpipi    (a,i,a1,i1) i
            REQUEST              L2R2_aaaa (i1,a,i,a1) i
            Laiai  (a,i,a1,i1) = VSpipi    (a,i,a1,i1)
            L1aiai (a,i,a1,i1) = L2R2_aaaa (i1,a,i,a1)
         ENDDO i
         DO j
            REQUEST  L2R2_abba (i1,b,j,a1) j
            REQUEST  Vpiqj     (a1,i1,b,j) j
            t1ppqq (a1,i1,b,j) = L2R2_abba (i1,b,j,a1)
            DO i
               taibj (a,i,b,j)  = Laiai  (a,i,a1,i1) * t1ppqq (a1,i1,b,j)
               tppqq (a,i,b,j)  = L1aiai (a,i,a1,i1) * Vpiqj  (a1,i1,b,j)
               taibj (a,i,b,j) += tppqq (a,i,b,j)
               PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
            ENDDO i
         ENDDO j
         DEALLOCATE  Laiai  (a,*,a1,i1)
         DEALLOCATE  L1aiai (a,*,a1,i1)
      ENDPARDO  b, a1, i1, a

      PARDO  b, a, b1, j1
         ALLOCATE  Laibj  (a,*,b1,j1)
         ALLOCATE  L1aibj (a,*,b1,j1)
         DO i
            REQUEST              Vpiqj     (a,i,b1,j1) i
            REQUEST              L2R2_abba (j1,a,i,b1) i
            Laibj  (a,i,b1,j1) = Vpiqj     (a,i,b1,j1)
            L1aibj (a,i,b1,j1) = L2R2_abba (j1,a,i,b1)
         ENDDO i
         DO j
            REQUEST  L2R2_aaaa (j1,b,j,b1) j
            REQUEST  VSpipi    (b1,j1,b,j) j
            tqqqq (b1,j1,b,j) = L2R2_aaaa (j1,b,j,b1)
            DO i 
               taibj (a,i,b,j)  = Laibj  (a,i,b1,j1) * tqqqq  (b1,j1,b,j)
               tppqq (a,i,b,j)  = L1aibj (a,i,b1,j1) * VSpipi (b1,j1,b,j)
               taibj (a,i,b,j) += tppqq (a,i,b,j)
               PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
            ENDDO i
         ENDDO j
         DEALLOCATE  Laibj  (a,*,b1,j1)
         DEALLOCATE  L1aibj (a,*,b1,j1)
      ENDPARDO  b, a, b1, j1

      PARDO  b, a1, j1, a
         ALLOCATE  Laajj (a,a1,j1,*)
         DO j
            REQUEST             L2R2_abab (j1,a1,j,a) j
            Laajj (a,a1,j1,j) = L2R2_abab (j1,a1,j,a)
         ENDDO j
         DO i
            REQUEST             Vpiqj (a1,i,b,j1) i
            tiajb (i,a1,j1,b) = Vpiqj (a1,i,b,j1)
            DO j
               tppqq (i,a,j,b)  = tiajb (i,a1,j1,b) * Laajj (a,a1,j1,j)
               taibj (a,i,b,j)  = tppqq (i,a,j,b)
               PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
            ENDDO j
         ENDDO i
         DEALLOCATE  Laajj (a,a1,j1,*)
      ENDPARDO  b, a1, j1, a

      PARDO  a, b1, i1, b
         ALLOCATE  Liibb (*,i1,b1,b)
         DO i
            REQUEST             L2R2_abab (i1,b1,i,b) i
            Liibb (i,i1,b1,b) = L2R2_abab (i1,b1,i,b)
         ENDDO i
         DO j
            REQUEST  Vpiqj (a,i1,b1,j) j
            DO i
               taibj (a,i,b,j) = Vpiqj (a,i1,b1,j) * Liibb (i,i1,b1,b)
               PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
            ENDDO i
         ENDDO j
         DEALLOCATE  Liibb (*,i1,b1,b)
      ENDPARDO  a, b1, i1, b
#
#
#       ij          im  e  fj
#      X   = P(ij) l   r  G       1 in R1 L2 G
#       ab          fe  m  ab
#     
#        
      PARDO  a2, a, i1, a1
         REQUEST              HBAR_AIBC_aaaa (a2,a,i1,a1) a2
         tpppp (a,a2,a1,i1) = HBAR_AIBC_aaaa (a2,a,i1,a1)
         DO i
            taiai  (a,i,a1,i1)  = LR1L2_ai (a2,i) * tpppp (a,a2,a1,i1)
            t1aiai (a,i1,a1,i)  = taiai (a,i,a1,i1)
            t1aiai (a,i1,a1,i) *= -1.0
            PREPARE  XI2_AA (a,i,a1,i1) += taiai  (a,i,a1,i1)
            PREPARE  XI2_AA (a,i1,a1,i) += t1aiai (a,i1,a1,i)
         ENDDO i
      ENDPARDO  a2, a, i1, a1

      PARDO  a2, a, j, b     
         REQUEST            HBAR_AIBC_aabb (a2,a,j,b) a2
         tppqq (a,a2,b,j) = HBAR_AIBC_aabb (a2,a,j,b)
         DO i
            tia (i,a2) = LR1L2_ai (a2,i) 
            taibj (a,i,b,j)  = tia (i,a2) * tppqq (a,a2,b,j)
            PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
         ENDDO i
      ENDPARDO  a2, a, j, b
      
      PARDO  b2, a, i, b
         REQUEST            HBAR_AIBC_aabb (b2,b,i,a) b2
         tppqq (a,i,b,b2) = HBAR_AIBC_aabb (b2,b,i,a)
         DO j
            taibj (a,i,b,j) = tppqq (a,i,b,b2) * LR1L2_ai (b2,j)
            PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
         ENDDO j
      ENDPARDO  b2, a, i, b
#
#
#       i    im  ef  gn
#      X  = l   r   G     Using R2L2 ring intermediate
#       a    ge  mn  af
#
#
      PARDO  a2, a, i1, a1
         REQUEST              HBAR_AIBC_aaaa (a2,a,i1,a1) a2
         tpppp (a,a1,i1,a2) = HBAR_AIBC_aaaa (a2,a,i1,a1)
         DO i
            REQUEST  L2R2_aaaa (i1,a2,i,a1) i
            tai (a,i) = tpppp (a,a1,i1,a2) * L2R2_aaaa (i1,a2,i,a1)
            PUT  XI1_A (a,i) += tai (a,i)
         ENDDO i
      ENDPARDO  a2, a, i1, a1

      PARDO  a2, a, j1, b1
         REQUEST              HBAR_AIBC_aabb (a2,a,j1,b1) a2
         tpqqp (a,b1,j1,a2) = HBAR_AIBC_aabb (a2,a,j1,b1)
         DO i
            REQUEST  L2R2_abba (j1,a2,i,b1) i
            tai (a,i) = tpqqp (a,b1,j1,a2) * L2R2_abba (j1,a2,i,b1)
            PUT  XI1_A (a,i) += tai (a,i)
         ENDDO i
      ENDPARDO  a2, a, j1, b1

      PARDO  b2, b1, i1, a
         REQUEST              HBAR_AIBC_aabb (b2,b1,i1,a) b2
         tppqq (a,i1,b1,b2) = HBAR_AIBC_aabb (b2,b1,i1,a)
         DO i
            REQUEST              L2R2_abab (i1,b1,i,b2) i
            tpqqp (i1,b1,b2,i) = L2R2_abab (i1,b1,i,b2)
            tai (a,i)  = tppqq (a,i1,b1,b2) * tpqqp (i1,b1,b2,i)
            tai (a,i) *= -1.0
            PUT  XI1_A (a,i) += tai (a,i)
         ENDDO i
      ENDPARDO  b2, b1, i1, a
#
#
#       i        mn  eg  fi
#      X  = 1/2 l   r   G
#       a        ef  mn  ga
#
#
      PARDO  a1, a2, i, a
         REQUEST             HBAR_AIBC_aaaa (a1,a2,i,a) a1
         tpppp (a,i,a1,a2) = HBAR_AIBC_aaaa (a1,a2,i,a)
         tai (a,i) = tpppp (a,i,a1,a2) * LR2L2_aa (a1,a2)
         tai (a,i) *= -1.0
         PUT  XI1_A (a,i) += tai (a,i)
      ENDPARDO  a1, a2, i, a

      PARDO  b1, b2, i, a
         REQUEST             HBAR_AIBC_aabb (b1,b2,i,a) b1
         tppqq (a,i,b1,b2) = HBAR_AIBC_aabb (b1,b2,i,a)
         tai (a,i) = tppqq (a,i,b1,b2) * LR2L2_aa (b1,b2)
         tai (a,i) *= -1.0
         PUT  XI1_A (a,i) += tai (a,i)
      ENDPARDO  b1, b2, i, a
#
#
#       ij               im    f  ej    e  nj
#      X   = P(ij)P(ab) l   ( r  G   + r  G   )      7 and 8 in R1 L2 G
#       ab               ae    m  fb    n  mb
#
#      Hideous ring contractions...
#
#          There already exists 3 served arrays R2L2_xxxx.  To get the following
#          to scale (if it does not scale), we could make R1G_xxxx ring intermediates.
#
#          The reason I do no do this is because forming R1G_xxxx is N^5.
#          This creates an N^6 request, however, where the REQUEST is 2 DO loops in.
#
#
      PARDO i2, i1, a1, a2
         t1aiai (a2,i2,a1,i1) = 0.0
         DO a3
            REQUEST                HBAR_AIBC_aaaa (a2,a3,i1,a1) a3
            GET                    R1A (a3,i2)
            tpppp (a2,a3,a1,i1)  = HBAR_AIBC_aaaa (a2,a3,i1,a1) 
            taiai (a2,i2,a1,i1)  = tpppp (a2,a3,a1,i1) * R1A (a3,i2)
            t1aiai (a2,i2,a1,i1) += taiai (a2,i2,a1,i1)
         ENDDO a3

         DO i3
            REQUEST                HBAR_JKIA_aaaa (i3,i2,i1,a1) i3
            GET                    R1A (a2,i3)
            tai (a2,i3)          = R1A (a2,i3)
            tpppp (i3,i2,a1,i1)  = HBAR_JKIA_aaaa (i3,i2,i1,a1)
            taiai (a2,i2,a1,i1)  = R1A (a2,i3) * tpppp (i3,i2,a1,i1)
            t1aiai (a2,i2,a1,i1) -= taiai (a2,i2,a1,i1)
         ENDDO i3

         DO i
         DO a
            REQUEST               L2AA (i,a,i2,a2) a
            t2pppp (a,i,a2,i2)  = L2AA (i,a,i2,a2) 
            t1pppp (a,i,a1,i1)  = t2pppp (a,i,a2,i2) * t1aiai (a2,i2,a1,i1)

            PUT  D2aa (a,i,a1,i1) += t1pppp (a,i,a1,i1)
         ENDDO a
         ENDDO i
      ENDPARDO  i2, i1, a1, a2

      PARDO j2, i1, a1, b2
         t1aiai (b2,j2,a1,i1) = 0.0
         DO b3
            REQUEST                HBAR_AIBC_aabb (b2,b3,i1,a1) b3
            GET                    R1A (b3,j2)
            tpppp (b2,b3,a1,i1)  = HBAR_AIBC_aabb (b2,b3,i1,a1)
            taiai (b2,j2,a1,i1)  = tpppp (b2,b3,a1,i1) * R1A (b3,j2)
            t1aiai (b2,j2,a1,i1) += taiai (b2,j2,a1,i1)
         ENDDO b3

         DO j3
            REQUEST                HBAR_JKIA_aabb (j3,j2,i1,a1) j3
            GET                    R1A (b2,j3)
            tai (b2,j3)          = R1A (b2,j3)
            tpppp (j3,j2,a1,i1)  = HBAR_JKIA_aabb (j3,j2,i1,a1)
            taiai (b2,j2,a1,i1)  = R1A (b2,j3) * tpppp (j3,j2,a1,i1)
            t1aiai (b2,j2,a1,i1) -= taiai (b2,j2,a1,i1)
         ENDDO j3

         DO i
         DO a
            REQUEST               L2AB (i,a,j2,b2) a
            tpppp  (a,i,b2,j2)  = L2AB (i,a,j2,b2)
            taiai  (a,i,a1,i1)  = tpppp (a,i,b2,j2) * t1aiai (b2,j2,a1,i1)

            PUT  D2aa (a,i,a1,i1) += taiai (a,i,a1,i1)
         ENDDO a
         ENDDO i
      ENDPARDO  j2, i1, a1, b2

      PARDO  i1, b, j, a1
         tppqq (a1,i1,b,j) = 0.0
         DO a2
            REQUEST               HBAR_AIBC_aabb (a1,a2,j,b) a2
            GET                   R1A (a2,i1)
            t1ppqq (a1,a2,b,j)  = HBAR_AIBC_aabb (a1,a2,j,b)
            t1aibj (a1,i1,b,j)  = R1A (a2,i1) * t1ppqq (a1,a2,b,j)
            tppqq  (a1,i1,b,j) += t1aibj (a1,i1,b,j)
         ENDDO a2
         DO i2
            REQUEST               HBAR_JKIA_aabb (i2,i1,j,b) i2
            GET                   R1A (a1,i2)
            t1ppqq (i2,i1,b,j)  = HBAR_JKIA_aabb (i2,i1,j,b)
            t1aibj (a1,i1,b,j)  = R1A (a1,i2) * t1ppqq (i2,i1,b,j)
            tppqq  (a1,i1,b,j) -= t1aibj (a1,i1,b,j)
         ENDDO i2

         DO a
         DO i
            REQUEST              L2AA (i,a,i1,a1) i
            taiai (a,i,a1,i1)  = L2AA (i,a,i1,a1)
            taibj (a,i,b,j)    = taiai (a,i,a1,i1) * tppqq (a1,i1,b,j)
            PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
         ENDDO i
         ENDDO a
      ENDPARDO  i1, b, j, a1

      PARDO  j1, b, j, b1
         tbjbj (b1,j1,b,j) = 0.0
         DO b2
            REQUEST               HBAR_AIBC_aaaa (b1,b2,j,b) b2
            GET                   R1A (b2,j1)
            t1qqqq (b1,b2,b,j)  = HBAR_AIBC_aaaa (b1,b2,j,b)
            tqqqq  (b1,j1,b,j)  = R1A (b2,j1) * t1qqqq (b1,b2,b,j)
            tbjbj  (b1,j1,b,j) += tqqqq (b1,j1,b,j)
         ENDDO b2
         DO j2
            REQUEST               HBAR_JKIA_aaaa (j2,j1,j,b) j2
            GET                   R1A (b1,j2)
            t1qqqq (j2,j1,b,j)  = HBAR_JKIA_aaaa (j2,j1,j,b)
            tqqqq  (b1,j1,b,j)  = R1A (b1,j2) * t1qqqq (j2,j1,b,j)
            tbjbj  (b1,j1,b,j) -= tqqqq (b1,j1,b,j)
         ENDDO j2
         DO a
         DO i
            REQUEST               L2AB (i,a,j1,b1) i
            t1aibj (a,i,b1,j1)  = L2AB (i,a,j1,b1)
            taibj  (a,i,b,j)    = t1aibj (a,i,b1,j1) * tbjbj (b1,j1,b,j)
            PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
         ENDDO i
         ENDDO a
      ENDPARDO  j1, b, j, b1

      PARDO  i1, a, i, a1
         taiai (a,i,a1,i1) = 0.0
         DO a2
            REQUEST               HBAR_AIBC_aaaa (a1,a2,i,a) a2
            GET                   R1A (a2,i1)
            tpppp  (a,i,a1,a2)  = HBAR_AIBC_aaaa (a1,a2,i,a)
            t1aiai (a,i,a1,i1)  = tpppp (a,i,a1,a2) * R1A (a2,i1)
            taiai  (a,i,a1,i1) += t1aiai (a,i,a1,i1)
         ENDDO a2
         DO i2
            REQUEST               HBAR_JKIA_aaaa (i2,i1,i,a) i2
            GET                   R1A (a1,i2)
            tpppp  (a,i,i2,i1)  = HBAR_JKIA_aaaa (i2,i1,i,a)
            t1aiai (a,i,a1,i1)  = tpppp (a,i,i2,i1) * R1A (a1,i2)
            taiai  (a,i,a1,i1) -= t1aiai (a,i,a1,i1)
         ENDDO i2
         DO b
         DO j
            REQUEST              L2AB (i1,a1,j,b) j
            tppqq (a1,i1,b,j)  = L2AB (i1,a1,j,b)
            taibj (a,i,b,j)    = taiai (a,i,a1,i1) * tppqq (a1,i1,b,j)
            PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
         ENDDO j
         ENDDO b
      ENDPARDO  i1, a, i, a1

      PARDO  j1, a, i, b1
         t1aibj (a,i,b1,j1) = 0.0
         DO b2
            REQUEST               HBAR_AIBC_aabb (b1,b2,i,a) b2
            GET                   R1A (b2,j1)
            tppqq  (a,i,b1,b2)  = HBAR_AIBC_aabb (b1,b2,i,a)
            t1ppqq (a,i,b1,j1)  = tppqq (a,i,b1,b2) * R1A (b2,j1)
            t1aibj (a,i,b1,j1) += t1ppqq (a,i,b1,j1)
         ENDDO b2
         DO j2
            REQUEST               HBAR_JKIA_aabb (j2,j1,i,a) j2
            GET                   R1A (b1,j2)
            tppqq  (a,i,j2,j1)  = HBAR_JKIA_aabb (j2,j1,i,a)
            t1ppqq (a,i,b1,j1)  = tppqq (a,i,j2,j1) * R1A (b1,j2)
            t1aibj (a,i,b1,j1) -= t1ppqq (a,i,b1,j1)
         ENDDO j2
         DO b
         DO j
            REQUEST              L2AA (j1,b1,j,b) j
            tbjbj (b1,j1,b,j)  = L2AA (j1,b1,j,b)
            taibj (a,i,b,j)    = t1aibj (a,i,b1,j1) * tbjbj (b1,j1,b,j)
            PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
         ENDDO j
         ENDDO b
      ENDPARDO  j1, a, i, b1

      PARDO  i1, i, b, b1
         tiibb (i,i1,b1,b) = 0.0
         DO a2
            REQUEST               HBAR_AIBC_aabb (b1,b,i,a2) a2
            GET                   R1A (a2,i1)
            tppqq  (i,a2,b1,b)  = HBAR_AIBC_aabb (b1,b,i,a2)
            t1ppqq (i,i1,b1,b)  = R1A (a2,i1) * tppqq (i,a2,b1,b)
            tiibb  (i,i1,b1,b) -= t1ppqq (i,i1,b1,b)
         ENDDO a2
         DO j2
            REQUEST               HBAR_JKIA_aabb (i,i1,j2,b) j2
            GET                   R1A (b1,j2)
            tppqq  (i,i1,j2,b)  = HBAR_JKIA_aabb (i,i1,j2,b)
            t1ppqq (i,i1,b1,b)  = tppqq (i,i1,j2,b) * R1A (b1,j2)
            tiibb  (i,i1,b1,b) += t1ppqq (i,i1,b1,b)
         ENDDO j2
         DO a
         DO j
            REQUEST               L2AB (i1,a,j,b1) j
            t1aibj (a,i1,b1,j)  = L2AB (i1,a,j,b1)
            taibj  (a,i,b,j)    = t1aibj (a,i1,b1,j) * tiibb (i,i1,b1,b)
            PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
         ENDDO j
         ENDDO a
      ENDPARDO  i1, i, b, b1

      PARDO  j1, j, a, a1
         taajj (a,a1,j,j1) = 0.0
         DO b2
            REQUEST               HBAR_AIBC_aabb (a1,a,j,b2) b2
            GET                   R1A (b2,j1)
            t1ppqq (a,a1,b2,j)  = HBAR_AIBC_aabb (a1,a,j,b2)
            tppqq  (a,a1,j1,j)  = t1ppqq (a,a1,b2,j) * R1A (b2,j1)
            taajj  (a,a1,j1,j) -= tppqq (a,a1,j1,j)
         ENDDO b2
         DO i2
            REQUEST               HBAR_JKIA_aabb (j,j1,i2,a) i2
            GET                   R1A (a1,i2)
            t1ppqq (a,i2,j1,j)  = HBAR_JKIA_aabb (j,j1,i2,a)
            tppqq  (a,a1,j1,j)  = R1A (a1,i2) * t1ppqq (a,i2,j1,j)
            taajj  (a,a1,j1,j) += tppqq (a,a1,j1,j)
         ENDDO i2
         DO b
         DO i
            REQUEST             L2AB (i,a1,j1,b) i
            tiajb  (i,a,j,b)  = L2AB (i,a1,j1,b) * taajj (a,a1,j1,j)
            taibj  (a,i,b,j)  = tiajb (i,a,j,b)
            PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
         ENDDO i
         ENDDO b
      ENDPARDO  j1, j, a, a1
#
#
#                        -                            -
#       ij              |   mn  ef  in    in  ef  mj   |
#      X   = -1/2 P(ij) |  l   r   G   + l   r   G     |   5 and 7 in R2 L2 G
#       ab              |   ab  mn  ef    ef  mn  ab   |
#                        -                            -
#
#
      PARDO  a, i1, a1, i2
         REQUEST  L2AA   (i2,a,i1,a1) i2
         REQUEST  VSpipi (a,i2,a1,i1) a
         t1aiai (a,i2,a1,i1) = L2AA (i2,a,i1,a1)
         DO i
            tpppp  (a,i,a1,i1)  = t1aiai (a,i2,a1,i1) * LR2W2_ii (i2,i)
            t1pppp (a,i,a1,i1)  = VSpipi (a,i2,a1,i1) * LR2L2_ii (i2,i)
            tpppp  (a,i,a1,i1) += t1pppp (a,i,a1,i1)

            taiai (a,i1,a1,i)  = tpppp (a,i,a1,i1)
            tpppp (a,i,a1,i1) *= -1.0

            PREPARE  XI2_AA (a,i,a1,i1) += tpppp (a,i,a1,i1)
            PREPARE  XI2_AA (a,i1,a1,i) += taiai (a,i1,a1,i)
         ENDDO i
      ENDPARDO  a, i1, a1, i2

      PARDO  i2, a, j, b
         REQUEST  L2AB  (i2,a,j,b) i2
         REQUEST  Vpiqj (a,i2,b,j) i2
         DO i
            tii (i,i2) = LR2W2_ii (i2,i)
            tiajb  (i,a,j,b)  = tii (i,i2) * L2AB (i2,a,j,b)
            t1aibj (a,i,b,j)  = LR2L2_ii (i2,i) * Vpiqj (a,i2,b,j)
            taibj  (a,i,b,j)  = tiajb (i,a,j,b)
            taibj  (a,i,b,j) += t1aibj (a,i,b,j)
            taibj  (a,i,b,j) *= -1.0
            PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
         ENDDO i
      ENDPARDO  i2, a, j, b

      PARDO  i, a, j2, b
         REQUEST             Vpiqj (a,i,b,j2) j2
         REQUEST             L2AB  (i,a,j2,b) j2
         tppqq (a,i,b,j2)  = L2AB  (i,a,j2,b)
         DO j
            taibj  (a,i,b,j)  = tppqq (a,i,b,j2) * LR2W2_ii (j2,j)
            t1aibj (a,i,b,j)  = Vpiqj (a,i,b,j2) * LR2L2_ii (j2,j)
            taibj  (a,i,b,j) += t1aibj (a,i,b,j)
            taibj  (a,i,b,j) *= -1.0
            PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
         ENDDO j
      ENDPARDO  i, a, j2, b
#
#
#                        -                            -
#       ij              |   ij  ef  mn    mn  ef  ij   |
#      X   = -1/2 P(ab) |  l   r   G   + l   r   G     |   4 and 6 in R2 L2 G
#       ab              |   fb  mn  ea    ea  mn  fb   |
#                        -                            -
#
#
      PARDO  i, i1, a1, a2
         REQUEST               L2AA   (i,a2,i1,a1) i
         REQUEST               VSpipi (a2,i,a1,i1) i
         t1aiai (a2,i,a1,i1) = L2AA (i,a2,i1,a1)
         DO a
            tpppp  (a,i,a1,i1)  = LR2W2_aa (a,a2) * t1aiai (a2,i,a1,i1)
            t1pppp (a,i,a1,i1)  = LR2L2_aa (a,a2) * VSpipi (a2,i,a1,i1)
            tpppp  (a,i,a1,i1) += t1pppp (a,i,a1,i1)

            taiai  (a1,i,a,i1)  = tpppp (a,i,a1,i1)
            taiai  (a1,i,a,i1) *= -1.0

            PREPARE  XI2_AA (a,i,a1,i1) += tpppp (a,i,a1,i1)
            PREPARE  XI2_AA (a1,i,a,i1) += taiai (a1,i,a,i1)
         ENDDO a
      ENDPARDO  i, i1, a1, a2

      PARDO  i, a2, j, b
         REQUEST             L2AB  (i,a2,j,b) i
         REQUEST             Vpiqj (a2,i,b,j) i
         tppqq (a2,i,b,j)  = L2AB  (i,a2,j,b)
         DO a
            taibj  (a,i,b,j)  = LR2W2_aa (a,a2) * tppqq (a2,i,b,j)
            t1aibj (a,i,b,j)  = LR2L2_aa (a,a2) * Vpiqj (a2,i,b,j)
            taibj  (a,i,b,j) += t1aibj (a,i,b,j)
            PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
         ENDDO a
      ENDPARDO  i, a2, j, b

      PARDO  i, a, j, b2
         REQUEST  L2AB  (i,a,j,b2) b2
         REQUEST  Vpiqj (a,i,b2,j) b2
         DO b
            tbb (b2,b) = LR2W2_aa (b,b2)
            tiajb  (i,a,j,b)  = L2AB (i,a,j,b2) * tbb (b2,b)
            t1aibj (a,i,b,j)  = Vpiqj (a,i,b2,j) * LR2L2_aa (b,b2)
            taibj  (a,i,b,j)  = tiajb (i,a,j,b)
            taibj  (a,i,b,j) += t1aibj (a,i,b,j)
            PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
         ENDDO b
      ENDPARDO  i, a, j, b2
#           
#           
#       ij          ij  e  fm
#      X   = P(ab) l   r  g        5 in R1 L2 G
#       ab          af  m  be
#
#     
      PARDO  i, a, i1, a3
         REQUEST              L2AA (i,a,i1,a3) i
         taiai (a,i,a3,i1)  = L2AA (i,a,i1,a3)
         DO a1
            tpppp  (a,i,a1,i1)  = taiai (a,i,a3,i1) * LR1W_aa (a1,a3)
            t1pppp (a1,i,a,i1)  = tpppp (a,i,a1,i1)
            t1pppp (a1,i,a,i1) *= -1.0
            PREPARE  XI2_AA (a,i,a1,i1) += tpppp  (a,i,a1,i1)
            PREPARE  XI2_AA (a1,i,a,i1) += t1pppp (a1,i,a,i1)
         ENDDO a1
      ENDPARDO  i, a, i1, a3

      PARDO  b2, i, a, j    
         REQUEST            L2AB (i,a,j,b2) b2
         tppqq (a,i,b2,j) = L2AB (i,a,j,b2)
         DO b
            tbb (b2,b) = LR1W_aa (b,b2)
            taibj (a,i,b,j)  = tppqq (a,i,b2,j) * tbb (b2,b)
            PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
         ENDDO b
      ENDPARDO  b2, i, a, j
      
      PARDO  a2, i, j, b    
         REQUEST            L2AB (i,a2,j,b) a2
         tppqq (a2,i,b,j) = L2AB (i,a2,j,b)
         DO a
            taibj (a,i,b,j)  = LR1W_aa (a,a2) * tppqq (a2,i,b,j)
            PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
         ENDDO a
      ENDPARDO  a2, i, j, b
#
#
#       ij           in  e   jm
#      X   = -P(ij) l   r   G        6 in R1 L2 G
#       ab           ab  m   ne            
#              
#              
      PARDO  i, a, i3, a1
         REQUEST  L2AA (i,a,i3,a1) i
         taiai (a,i,a1,i3)  = L2AA (i,a,i3,a1)
         taiai (a,i,a1,i3) *= -1.0
         DO i1
            tpppp  (a,i,a1,i1) = taiai (a,i,a1,i3) * LR1W_ii (i1,i3)
            t1pppp (a,i1,a1,i) = tpppp (a,i,a1,i1)
            t1pppp (a,i1,a1,i) *= -1.0
            PREPARE  XI2_AA (a,i,a1,i1) += tpppp  (a,i,a1,i1)
            PREPARE  XI2_AA (a,i1,a1,i) += t1pppp (a,i1,a1,i)
         ENDDO i1
      ENDPARDO  i, a, i3, a1

      PARDO  j2, b, i, a
         REQUEST             L2AB (i,a,j2,b) j2
         tppqq (a,i,b,j2)  = L2AB (i,a,j2,b)
         DO j  
            tjj (j2,j) = LR1W_ii (j,j2)
            taibj (a,i,b,j)  = tppqq (a,i,b,j2) * tjj (j2,j)
            taibj (a,i,b,j) *= -1.0
            PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
         ENDDO j
      ENDPARDO  j2, b, i, a
            
      PARDO  i2, a, j, b
         REQUEST             L2AB (i2,a,j,b) i2
         tppqq (a,i2,b,j)  = L2AB (i2,a,j,b)
         DO i  
            taibj (a,i,b,j)  = LR1W_ii (i,i2) * tppqq (a,i2,b,j)
            taibj (a,i,b,j) *= -1.0
            PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
         ENDDO i
      ENDPARDO  i2, a, j, b
#
#
#       i    mo  ef  ni
#      X  = l   r   G     Using R2L2 ring intermediate
#       a    ea  mn  fo
#
#
      PARDO  a2, i1, a, i2
         REQUEST              L2R2_aaaa (i1,a,i2,a2) i1
         taiai (a,i2,a2,i1) = L2R2_aaaa (i1,a,i2,a2)
         DO i
            REQUEST              HBAR_JKIA_aaaa (i,i2,i1,a2) i
            tpppp (i2,a2,i1,i) = HBAR_JKIA_aaaa (i,i2,i1,a2)
            tai (a,i)  = taiai (a,i2,a2,i1) * tpppp (i2,a2,i1,i)
            tai (a,i) *= -1.0
            PUT  XI1_A (a,i) += tai (a,i)
         ENDDO i
      ENDPARDO  a2, i1, a, i2

      PARDO  b2, j1, a, i2
         REQUEST              L2R2_abba (j1,a,i2,b2) b2
         taibj (a,i2,b2,j1) = L2R2_abba (j1,a,i2,b2)
         DO i
            REQUEST              HBAR_JKIA_aabb (i,i2,j1,b2) i
            tpqqp (i2,b2,j1,i) = HBAR_JKIA_aabb (i,i2,j1,b2)
            tai (a,i)  = taibj (a,i2,b2,j1) * tpqqp (i2,b2,j1,i)
            tai (a,i) *= -1.0
            PUT  XI1_A (a,i) += tai (a,i)
         ENDDO i
      ENDPARDO  b2, j1, a ,i2

      PARDO  a, a2, j2, j1
         REQUEST              L2R2_abab (j1,a2,j2,a) a
         tppqq (a,a2,j1,j2) = L2R2_abab (j1,a2,j2,a)
         DO i
            REQUEST              HBAR_JKIA_aabb (j1,j2,i,a2) i
            tpqqp (a2,j1,j2,i) = HBAR_JKIA_aabb (j1,j2,i,a2)
            tai (a,i) = tppqq (a,a2,j1,j2) * tpqqp (a2,j1,j2,i)
            PUT  XI1_A (a,i) += tai (a,i)
         ENDDO i
      ENDPARDO  a, a2, j2, j1
#
#
#       i         mn  fg  ei
#      X  = -1/4 l   r   G
#       a         ea  mn  fg
#
#
      PARDO  i2, a1, i3, a
         REQUEST              L2AA (i2,a1,i3,a) i2
         taiai (a,i2,a1,i3) = L2AA (i2,a1,i3,a)
         DO i
            REQUEST  Niiai (i2,a1,i3,i) i
            tai (a,i)  = taiai (a,i2,a1,i3) * Niiai (i2,a1,i3,i)
            tai (a,i) *= 0.5
            PUT  XI1_A (a,i) += tai (a,i)
         ENDDO i
      ENDPARDO  i2, a1, i3, a

      PARDO  i3, j2, b1, a
         REQUEST              L2AB (i3,a,j2,b1) j2
         tpqqp (a,b1,j2,i3) = L2AB (i3,a,j2,b1)
         DO i
            REQUEST  Niibj (i,b1,i3,j2) i
            tqqpp (b1,j2,i3,i) = Niibj (i,b1,i3,j2)
            tai (a,i)  = tpqqp (a,b1,j2,i3) * tqqpp (b1,j2,i3,i)
            PUT  XI1_A (a,i) += tai (a,i)
         ENDDO i
      ENDPARDO  i3, j2, b1, a
#
#
#       ij    ij               i  e  mj
#      X   = G   + P(ij)P(ab) l  r  g          0 and 1 in L R G
#       ab    ab               a  m  eb                    1 1
#
#
#
      PARDO  a, i, b ,j
         REQUEST      Vpiqj (a,i,b,j) j
         GET          L1A (i,a)
         GET          L1A (j,b)
         tai (a,i)  = L1A (i,a)
         tbj (b,j)  = L1A (j,b)
         tpppp  (a,i,b,j)  = Vpiqj (a,i,b,j)
         tpppp  (a,i,b,j) *= INVNORM
         taiai  (a,i,b,j)  = tai (a,i) ^ LR1W_ai (b,j)
         t1aiai (a,i,b,j)  = LR1W_ai (a,i) ^ tbj (b,j)
         taiai  (a,i,b,j) += t1aiai (a,i,b,j)
         taiai  (a,i,b,j) += tpppp  (a,i,b,j)
         PREPARE  XI2_AB (a,i,b,j) += taiai (a,i,b,j)
      ENDPARDO  a, i, b, j
#
#
#       ij               mj  e  i    ij   e  m    ef  mn
#      X   = P(ij)P(ab) l   r  f  + l  ( r  f  + r   G   )   0, 11, and 12 in L2 R1 G
#       ab               eb  m  a    ab   m  e    mn  ef
#
#
      PARDO  a, i, a1, i1   
         GET  L1A (i,a)
         tai  (a,i)  = LHBAR_ia (i,a)
         t1ai (a,i)  = L1A     (i,a)
         
         tpppp  (a,i,a1,i1) = t1ai (a,i) ^ LR1W_ai  (a1,i1)
         taiai  (a,i,a1,i1) = tai  (a,i) ^ LR1L2_ai (a1,i1)
         taiai  (a,i,a1,i1) += tpppp (a,i,a1,i1)
            
         PUT  D2aa (a,i,a1,i1) += taiai (a,i,a1,i1)
      ENDPARDO  a, i, a1, i1

      PARDO  a, i, a1, i1
         REQUEST              L2AA   (i,a,i1,a1) i
         REQUEST              VSpipi (a,i,a1,i1) a
         taiai (a,i,a1,i1)  = L2AA   (i,a,i1,a1) 
         taiai (a,i,a1,i1) *= IRHBAR
         tpppp (a,i,a1,i1)  = VSpipi (a,i,a1,i1)
         tpppp (a,i,a1,i1) *= INVNORM
         taiai (a,i,a1,i1) += tpppp  (a,i,a1,i1)
         
         PREPARE  XI2_AA (a,i,a1,i1) += taiai (a,i,a1,i1)
      ENDPARDO  a, i, a1, i1

      PARDO  a, i, b, j
         REQUEST             L2AB (i,a,j,b) i
         t1aibj (a,i,b,j)  = L2AB (i,a,j,b)
         t1aibj (a,i,b,j) *= IRHBAR

         tai  (a,i) = LHBAR_ia (i,a)
         tbj  (b,j) = LHBAR_ia (j,b)

         taibj (a,i,b,j)  = tai (a,i) ^ LR1L2_ai (b,j)
         tppqq (a,i,b,j)  = LR1L2_ai (a,i) ^ tbj (b,j)
         taibj (a,i,b,j) += tppqq  (a,i,b,j)
         taibj (a,i,b,j) += t1aibj (a,i,b,j)
         PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
      ENDPARDO  a, i, b, j
#
#
#       i         io  eg  fm        io  ef  mn
#      X  =  1/2 l   r   G   - 1/2 l   r   G
#       a         ef  mo  ge        ef  mn  eo
#
#
      PARDO  a, i, a1, i1
         REQUEST             L2AA (i,a,i1,a1) i
         taiai (a,i,a1,i1) = L2AA (i,a,i1,a1)
         tai (a,i)  = taiai (a,i,a1,i1) * LR2W2_ai (a1,i1)
         PUT  XI1_A (a,i) += tai (a,i)
      ENDPARDO  a, i, a1, i1

      PARDO  a, i, b1, j1
         REQUEST             L2AB (i,a,j1,b1) i
         taibj (a,i,b1,j1) = L2AB (i,a,j1,b1)
         tai (a,i)  = taibj (a,i,b1,j1) * LR2W2_ai (b1,j1)
         PUT  XI1_A (a,i) += tai (a,i)
      ENDPARDO  a, i, b1, j1
#     
#
#       i    m  ef  in
#      X  = l  r   G
#       a    e  mn  af
#
#
      PARDO  a, i, a2, i2     
         REQUEST     VSpipi (a,i,a2,i2) a
         tpp (a,i) = VSpipi (a,i,a2,i2) * LR2L1_ai (a2,i2)
         PUT  XI1_A (a,i) += tpp (a,i)
      ENDPARDO  a, i, a2, i2
            
      PARDO  a, i, b2, j2
         REQUEST     Vpiqj (a,i,b2,j2) a
         tai (a,i) = Vpiqj (a,i,b2,j2) * LR2L1_ai (b2,j2)
         PUT  XI1_A (a,i) += tai (a,i)
      ENDPARDO  a, i, b2, j2
#     
#
#       i    in  ef  m
#      X  = l   r   f
#       a    af  mn  e
#
#
      PARDO  a, i, a1, i1
         REQUEST  L2R2_aaaa (i1,a,i,a1) a
         tai (a,i) = LHBAR_ia (i1,a1) * L2R2_aaaa (i1,a,i,a1)
         PUT  XI1_A (a,i) += tai (a,i)
      ENDPARDO  a, i, a1, i1

      PARDO  a, i, b1, j1
         REQUEST  L2R2_abba (j1,a,i,b1) a
         tai (a,i) = LHBAR_ia (j1,b1) * L2R2_abba (j1,a,i,b1)
         PUT  XI1_A (a,i) += tai (a,i)
      ENDPARDO  a, i, b1, j1
#     
#
#       ij           mn  e  ij
#      X   = -P(ab) l   r  g        2 in R1 L2 G
#       ab           ea  m  nb
#
#
      PARDO  i2, i, a1, i1
         REQUEST              HBAR_JKIA_aaaa (i,i2,i1,a1) i2
         tpppp (i2,i,a1,i1) = HBAR_JKIA_aaaa (i,i2,i1,a1)
         DO a
            taiai  (a,i,a1,i1)  = LR1L2_ai (a,i2) * tpppp (i2,i,a1,i1)
            t1aiai (a1,i,a,i1)  = taiai (a,i,a1,i1)
            taiai  (a,i,a1,i1) *= -1.0
            PREPARE  XI2_AA (a,i,a1,i1) += taiai  (a,i,a1,i1)
            PREPARE  XI2_AA (a1,i,a,i1) += t1aiai (a,i,a1,i1)
         ENDDO a
      ENDPARDO  i2, i, a1, i1

      PARDO  i2, i, b, j
         REQUEST            HBAR_JKIA_aabb (i,i2,j,b) i2
         tppqq (i2,i,b,j) = HBAR_JKIA_aabb (i,i2,j,b) 
         DO a
            taibj (a,i,b,j)  = LR1L2_ai (a,i2) * tppqq (i2,i,b,j)
            taibj (a,i,b,j) *= -1.0
            PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
         ENDDO a
      ENDPARDO  i2, i, b, j
      
      PARDO  j2, j, a, i
         REQUEST            HBAR_JKIA_aabb (j,j2,i,a) j2
         tppqq (a,i,j2,j) = HBAR_JKIA_aabb (j,j2,i,a) 
         DO b
            tjb (j2,b) = LR1L2_ai (b,j2)
            taibj (a,i,b,j)  = tppqq (a,i,j2,j) * tjb (j2,b)
            taibj (a,i,b,j) *= -1.0
            PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
         ENDDO b
      ENDPARDO  j2, j, a, i
#
#
#       ij        ij  ef  mn         mn  ef  ij
#      X   = 1/4 l   r   g    + 1/4 l   r   G       2 and 3 in R2 L2 G
#       ab        ef  mn  ab         ab  mn  ef
#
#     
      PARDO  a, i, i2, i3
         ALLOCATE  Liiii  (i2,i,i3,*)
         ALLOCATE  L1iiii (i2,i,i3,*)
         DO i1
            GET                   R2L2_iiii (i2,i,i3,i1)
            GET                   R2G2_iiii (i2,i,i3,i1)
            Liiii  (i2,i,i3,i1) = R2L2_iiii (i2,i,i3,i1)
            L1iiii (i2,i,i3,i1) = R2G2_iiii (i2,i,i3,i1)
         ENDDO i1
         DO a1
            REQUEST              VSpipi (a,i2,a1,i3) a1
            REQUEST              L2AA   (i2,a,i3,a1) a1
            tpppp (a,i2,a1,i3) = L2AA   (i2,a,i3,a1)
            DO i1
               taiai  (a,i,a1,i1)  = VSpipi (a,i2,a1,i3) * Liiii  (i2,i,i3,i1)
               t1aiai (a,i,a1,i1)  = tpppp  (a,i2,a1,i3) * L1iiii (i2,i,i3,i1)
               taiai  (a,i,a1,i1) += t1aiai (a,i,a1,i1)
               taiai  (a,i,a1,i1) *= 0.25
               PREPARE  XI2_AA (a,i,a1,i1) += taiai (a,i,a1,i1)
            ENDDO i1
         ENDDO a1
         DEALLOCATE  Liiii  (i2,i,i3,*)
         DEALLOCATE  L1iiii (i2,i,i3,*)
      ENDPARDO  a, i, i2, i3

      PARDO  a, i, i2, j2
         ALLOCATE  Liijj  (i2,i,j2,*)
         ALLOCATE  L1iijj (i2,i,j2,*)
         DO j
            GET  R2L2_iijj (i2,i,j2,j)
            GET  R2G2_iijj (i2,i,j2,j)
            Liijj  (i2,i,j2,j) = R2L2_iijj (i2,i,j2,j)
            L1iijj (i2,i,j2,j) = R2G2_iijj (i2,i,j2,j)
         ENDDO j
         DO b
            REQUEST             Vpiqj (a,i2,b,j2) b
            REQUEST             L2AB  (i2,a,j2,b) b
            tppqq (a,i2,b,j2) = L2AB  (i2,a,j2,b)
            DO j
               taibj  (a,i,b,j)  = Vpiqj (a,i2,b,j2) * Liijj  (i2,i,j2,j)
               t1aibj (a,i,b,j)  = tppqq (a,i2,b,j2) * L1iijj (i2,i,j2,j)
               taibj  (a,i,b,j) += t1aibj (a,i,b,j)
               PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
            ENDDO j
         ENDDO b
         DEALLOCATE  Liijj  (i2,i,j2,*)
         DEALLOCATE  L1iijj (i2,i,j2,*)
      ENDPARDO  a, i, i2, j2
#
#
#       i         io  ef  mn
#      X  = -1/4 l   r   G
#       a         ef  mn  oa
#
#

      PARDO  i1, i2, i3, a
         REQUEST              HBAR_JKIA_aaaa (i1,i2,i3,a) i1
         tpppp (a,i3,i2,i1) = HBAR_JKIA_aaaa (i1,i2,i3,a)
         DO i
            GET                  R2L2_iiii (i1,i2,i3,i)
            tiiii (i3,i2,i1,i) = R2L2_iiii (i1,i2,i3,i)
            tai (a,i)  = tpppp (a,i3,i2,i1) * tiiii (i3,i2,i1,i)
            tai (a,i) *= 0.25
            PUT  XI1_A (a,i) += tai (a,i)
         ENDDO i
      ENDPARDO  i1, i2, i3, a

      PARDO  j1, j2, i3, a
         REQUEST              HBAR_JKIA_aabb (j1,j2,i3,a) j1
         tppqq (a,i3,j2,j1) = HBAR_JKIA_aabb (j1,j2,i3,a)
         DO i
            GET                  R2L2_iijj (i3,i,j1,j2)
            tpqqp (i3,j2,j1,i) = R2L2_iijj (i3,i,j1,j2)
            tai (a,i) = tppqq (a,i3,j2,j1) * tpqqp (i3,j2,j1,i)
            PUT  XI1_A (a,i) += tai (a,i)
         ENDDO i
      ENDPARDO  j1, j2, i3, a
#
#
#       i         mn  ef  oi
#      X  = -1/2 l   r   G
#       a         ef  mo  na
#
#
      PARDO  i2, i1, i, a
         REQUEST             HBAR_JKIA_aaaa (i2,i1,i,a) i2
         tpppp (a,i,i2,i1) = HBAR_JKIA_aaaa (i2,i1,i,a)
         tai (a,i) = tpppp (a,i,i2,i1) * LR2L2_ii (i2,i1)
         tai (a,i) *= -1.0
         PUT  XI1_A (a,i) += tai (a,i)
      ENDPARDO  i2, i1, i, a
            
      PARDO  j2, j1, i, a
         REQUEST             HBAR_JKIA_aabb (j2,j1,i,a) j2
         tppqq (a,i,j2,j1) = HBAR_JKIA_aabb (j2,j1,i,a)
         tai (a,i) = tppqq (a,i,j2,j1) * LR2L2_ii (j2,j1)
         tai (a,i) *= -1.0
         PUT  XI1_A (a,i) += tai (a,i)
      ENDPARDO  j2, j1, i, a
#
#
#     ...ready!
#
#
      ENDPROC  HEAVY_XI
#------------------------------------------------------------------------



#------------------------------------------------------------------------
#
#     --------------
      PROC  LIGHT_XI
#     --------------
#
#
#
#       ij           m  e  ij          ij  e  m
#      X   = -P(ab) l  r  g   - P(ab) l   r  f       3 in L1R1G, 10 in R1L2G
#       ab           a  m  eb          eb  m  a
#
#
      PARDO  a1, i, a2  # Could use R1L1 Intermediate, artificial N^5 step
         ALLOCATE  Laa  (a2,*)
         ALLOCATE  L1aa (a2,*)
         DO i2
            GET  R1A (a2,i2)
            DO a
               GET  L1A (i2,a)
               tpp  (a2,a)  = R1A (a2,i2) * L1A (i2,a)
               taa  (a2,a)  = R1A (a2,i2) * LHBAR_ia (i2,a)
               Laa  (a2,a) -= tpp (a2,a)
               L1aa (a2,a) -= taa (a2,a)
            ENDDO a
         ENDDO i2
         DO i1
            REQUEST              VSpipi (a2,i,a1,i1) a1
            REQUEST              L2AA   (i,a2,i1,a1) a1
            tpppp (a2,i,a1,i1) = L2AA   (i,a2,i1,a1)
            DO a
               taiai  (a,i,a1,i1)  = Laa  (a2,a) * VSpipi (a2,i,a1,i1)
               t2aiai (a,i,a1,i1)  = L1aa (a2,a) * tpppp  (a2,i,a1,i1)
               taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

               t1aiai (a1,i,a,i1)  = taiai (a,i,a1,i1)
               t1aiai (a1,i,a,i1) *= -1.0

               PREPARE  XI2_AA (a,i,a1,i1) += taiai  (a,i,a1,i1)
               PREPARE  XI2_AA (a1,i,a,i1) += t1aiai (a1,i,a,i1)
            ENDDO a
         ENDDO i1
         DEALLOCATE  Laa  (a2,*)
         DEALLOCATE  L1aa (a2,*)
      ENDPARDO  a1, i, a2

      PARDO  b, i, a2  # Could use R1L1 Intermediate, artificial N^5 step
         ALLOCATE  Laa  (a2,*)
         ALLOCATE  L1aa (a2,*)
         DO i2
            GET  R1A (a2,i2)
            DO a
               GET  L1A (i2,a)
               tpp  (a2,a)  = R1A (a2,i2) * L1A (i2,a)
               taa  (a2,a)  = R1A (a2,i2) * LHBAR_ia (i2,a)
               Laa  (a2,a) -= tpp (a2,a)
               L1aa (a2,a) -= taa (a2,a)
            ENDDO a
         ENDDO i2
         DO j
            REQUEST            Vpiqj (a2,i,b,j) b
            REQUEST            L2AB  (i,a2,j,b) b
            tppqq (a2,i,b,j) = L2AB  (i,a2,j,b)
            DO a
               taibj  (a,i,b,j)  = Laa  (a2,a) * Vpiqj (a2,i,b,j)
               t1aibj (a,i,b,j)  = L1aa (a2,a) * tppqq (a2,i,b,j)
               taibj  (a,i,b,j) += t1aibj (a,i,b,j)
               PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
            ENDDO a
         ENDDO j
         DEALLOCATE  Laa (a2,*)
         DEALLOCATE  L1aa (a2,*)
      ENDPARDO  b, i, a2

      PARDO  a, j, b2  # Could use R1L1 Intermediate, artificial N^5 step
         ALLOCATE  Lbb  (b2,*)
         ALLOCATE  L1bb (b2,*)
         DO j2
            GET  R1A (b2,j2)
            DO b
               GET  L1A (j2,b)
               tqq  (b2,b)  = R1A (b2,j2) * L1A (j2,b)
               tbb  (b2,b)  = R1A (b2,j2) * LHBAR_ia (j2,b)
               Lbb  (b2,b) -= tqq (b2,b)
               L1bb (b2,b) -= tbb (b2,b)
            ENDDO b
         ENDDO j2
         DO i
            REQUEST            Vpiqj (a,i,b2,j) a
            REQUEST            L2AB  (i,a,j,b2) a
            tppqq (a,i,b2,j) = L2AB  (i,a,j,b2)
            DO b
               taibj  (a,i,b,j)  = Vpiqj (a,i,b2,j) * Lbb  (b2,b)
               t1aibj (a,i,b,j)  = tppqq (a,i,b2,j) * L1bb (b2,b)
               taibj  (a,i,b,j) += t1aibj (a,i,b,j)
               PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
            ENDDO b
         ENDDO i
         DEALLOCATE  Lbb  (b2,*)
         DEALLOCATE  L1bb (b2,*)
      ENDPARDO  a, j, b2
#
#
#       ij           i  e  mj          mj  e  i
#      X   = -P(ij) l  r  g   - P(ij) l   r  f      2 in L1R1G, 9 in R1L2G
#       ab           e  m  ab          ab  m  e
#
#
      PARDO  a, a1, i2  # Could use L1 R1 Intermediate, artificial N^5 step
         ALLOCATE  Lii  (*,i2)
         ALLOCATE  L1ii (*,i2)
         DO a2
            GET  R1A (a2,i2)
            DO i
               GET  L1A (i,a2)
               tpp  (i,i2)  = L1A (i,a2) * R1A (a2,i2)
               tii  (i,i2)  = LHBAR_ia (i,a2) * R1A (a2,i2)
               Lii  (i,i2) -= tpp (i,i2)
               L1ii (i,i2) -= tii (i,i2)
            ENDDO i
         ENDDO a2
         DO i1
            REQUEST              VSpipi (a,i2,a1,i1) a
            REQUEST              L2AA   (i2,a,i1,a1) a
            tpppp (a,i2,a1,i1) = L2AA   (i2,a,i1,a1)
            DO i
               taiai  (a,i,a1,i1)  = VSpipi (a,i2,a1,i1) * Lii  (i,i2)
               t2aiai (a,i,a1,i1)  = tpppp  (a,i2,a1,i1) * L1ii (i,i2)
               taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

               t1aiai (a,i1,a1,i)  = taiai (a,i,a1,i1)
               t1aiai (a,i1,a1,i) *= -1.0

               PREPARE  XI2_AA (a,i,a1,i1) += taiai  (a,i,a1,i1)
               PREPARE  XI2_AA (a,i1,a1,i) += t1aiai (a,i1,a1,i)
            ENDDO i
         ENDDO i1
         DEALLOCATE  Lii  (*,i2)
         DEALLOCATE  L1ii (*,i2)
      ENDPARDO  a, a1, i2

      PARDO  a, b, i2  # Could use L1 R1 Intermediate, artificial N^5 step
         ALLOCATE  Lii  (*,i2)
         ALLOCATE  L1ii (*,i2)
         DO a2
            GET  R1A (a2,i2)
            DO i
               GET  L1A (i,a2)
               tpp  (i,i2)  = L1A (i,a2) * R1A (a2,i2)
               tii  (i,i2)  = LHBAR_ia (i,a2) * R1A (a2,i2)
               Lii  (i,i2) -= tpp (i,i2)
               L1ii (i,i2) -= tii (i,i2)
            ENDDO i
         ENDDO a2
         DO j
            REQUEST            Vpiqj (a,i2,b,j) j
            REQUEST            L2AB  (i2,a,j,b) j
            tppqq (a,i2,b,j) = L2AB  (i2,a,j,b)
            DO i
               taibj  (a,i,b,j)  = Lii  (i,i2) * Vpiqj (a,i2,b,j)
               t1aibj (a,i,b,j)  = L1ii (i,i2) * tppqq (a,i2,b,j)
               taibj  (a,i,b,j) += t1aibj (a,i,b,j)
               PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
            ENDDO i
         ENDDO j
         DEALLOCATE  Lii  (*,i2)
         DEALLOCATE  L1ii (*,i2)
      ENDPARDO  a, b, i2

      PARDO  a, b, j2  # Could use L1 R1 Intermediate, artificial N^5 step
         ALLOCATE  Ljj  (*,j2)
         ALLOCATE  L1jj (*,j2)
         DO b2
            GET  R1A (b2,j2)
            DO j
               GET  L1A (j,b2)
               tpp  (j,j2)  = L1A (j,b2) * R1A (b2,j2)
               tjj  (j,j2)  = LHBAR_ia (j,b2) * R1A (b2,j2)
               Ljj  (j,j2) -= tpp (j,j2)
               L1jj (j,j2) -= tjj (j,j2)
            ENDDO j
         ENDDO b2
         DO i
            REQUEST            Vpiqj (a,i,b,j2) i
            REQUEST            L2AB  (i,a,j2,b) i
            tppqq (a,i,b,j2) = L2AB  (i,a,j2,b)
            DO j
               taibj  (a,i,b,j)  = Vpiqj (a,i,b,j2) * Ljj  (j,j2)
               t1aibj (a,i,b,j)  = tppqq (a,i,b,j2) * L1jj (j,j2)
               taibj  (a,i,b,j) += t1aibj (a,i,b,j)
               PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
            ENDDO j
         ENDDO i
         DEALLOCATE  Ljj  (*,j2)
         DEALLOCATE  L1jj (*,j2)
      ENDPARDO  a, b, j2
#
#
#       i         i  ef  mn
#      X  = -1/2 l  r   G
#       a         e  mn  af
#
#
      
      PARDO  a, i, a2  
         GET           L1A (i,a2)
         tai (a2,i)  = L1A (i,a2)
         tpp (a,i)   = LR2W2_aa (a,a2) * tai (a2,i)
         PUT  XI1_A (a,i) += tpp (a,i)
      ENDPARDO  a, i, a2
#     
#
#       i         mn  ef  i
#      X  = -1/2 l  r    f
#       a         af  mn  e
#
#     
      PARDO  a2, a, i
         tpp (a2,i) = LHBAR_ia (i,a2)
         tai (a,i)  = LR2L2_aa (a,a2) * tpp (a2,i)
         PUT  XI1_A (a,i) += tai (a,i)
      ENDPARDO  a2, a, i
#
#
#       ij    ij  e  fm
#      X   = l   r  g        3 in L2 R1 G
#       ab    ef  m  ba
#
#
      PARDO  i2, i, a2    # Could use Niiai Intermediate
         ALLOCATE  Laiii (a2,i,i2,*)
         DO i1
            DO a3
               REQUEST                L2AA  (i,a2,i1,a3) a3
               GET                    R1A   (a3,i2)
               t1pppp (a2,i,a3,i1)  = L2AA  (i,a2,i1,a3)
               tpppp  (a2,i,i2,i1)  = t1pppp (a2,i,a3,i1) * R1A (a3,i2)
               Laiii  (a2,i,i2,i1) -= tpppp (a2,i,i2,i1)
            ENDDO a3
         ENDDO i1
         DO a
         DO a1
            REQUEST               HBAR_AIBC_aaaa (a2,a,i2,a1) a1
            tpppp  (a,a2,a1,i2) = HBAR_AIBC_aaaa (a2,a,i2,a1)
            DO i1
               t1aiai (a,i,a1,i1) = tpppp (a,a2,a1,i2) * Laiii (a2,i,i2,i1)
               PREPARE  XI2_AA (a,i,a1,i1) += t1aiai (a,i,a1,i1)
            ENDDO i1
         ENDDO a1
         ENDDO a
         DEALLOCATE  Laiii (a2,i,i2,*)
      ENDPARDO  i2, i, a2

      PARDO  j2, i, a2    # Could use Njjai Intermediate
         ALLOCATE  Laijj (a2,i,j2,*)
         DO j
            DO b3
               REQUEST               L2AB (i,a2,j,b3) b3
               GET                   R1A  (b3,j2)
               tppqq  (a2,i,b3,j)  = L2AB (i,a2,j,b3)
               t1ppqq (a2,i,j2,j)  = tppqq (a2,i,b3,j) * R1A (b3,j2)
               Laijj  (a2,i,j2,j) -= t1ppqq (a2,i,j2,j)
            ENDDO b3
         ENDDO j
         DO a
         DO b
            REQUEST             HBAR_AIBC_aabb (a2,a,j2,b) b
            tppqq (a,a2,b,j2) = HBAR_AIBC_aabb (a2,a,j2,b)
            DO j
               taibj (a,i,b,j)  = tppqq (a,a2,b,j2) * Laijj (a2,i,j2,j)
               PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
            ENDDO j
         ENDDO b
         ENDDO a
         DEALLOCATE  Laijj (a2,i,j2,*)
      ENDPARDO  j2, i, a2

      PARDO  i2, j, b2  # Could use Niibj Intermediate
         ALLOCATE  Liibj (i2,*,b2,j)
         DO i
            DO a3
               REQUEST               L2AB (i,a3,j,b2) a3
               GET                   R1A  (a3,i2)
               tia (i2,a3)         = R1A  (a3,i2)
               tppqq  (a3,i,b2,j)  = L2AB (i,a3,j,b2)
               t1ppqq (i2,i,b2,j)  = tia (i2,a3) * tppqq (a3,i,b2,j)
               Liibj  (i2,i,b2,j) -= t1ppqq (i2,i,b2,j)
            ENDDO a3
         ENDDO i
         DO b
         DO a
            REQUEST             HBAR_AIBC_aabb (b2,b,i2,a) a
            tppqq (a,i2,b,b2) = HBAR_AIBC_aabb (b2,b,i2,a)
            DO i
               taibj (a,i,b,j)  = tppqq (a,i2,b,b2) * Liibj (i2,i,b2,j)
               PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
            ENDDO i
         ENDDO a
         ENDDO b
         DEALLOCATE  Liibj (i2,*,b2,j)
      ENDPARDO  i2, j, b2
#
#
#       i         m  ef  in
#      X  = -1/2 l  r   G
#       a         a  mn  ef
#
#
      PARDO  i, i2, a
         GET           L1A (i2,a)
         tai (a,i2)  = L1A (i2,a)
         tai (a,i2) *= -1.0
         tpp (a,i)   = tai (a,i2) * LR2W2_ii (i2,i)
         PUT  XI1_A (a,i) += tpp (a,i)
      ENDPARDO  i, i2, a
#
#
#       i         in  ef  m
#      X  = -1/2 l  r    f
#       a         ef  mn  a
#
#
      PARDO  i2, a, i
         tpp (a,i2) = LHBAR_ia (i2,a)
         tai (a,i)  = tpp (a,i2) * LR2L2_ii (i2,i)
         tai (a,i) *= -1.0
         PUT  XI1_A (a,i) += tai (a,i)
      ENDPARDO  i2, a, i
#
#
#       ij    mn  e  ij
#      X   = l   r  g      PREPARE too far in?  4 in R1 L2 G
#       ab    ab  m  en
#
#
      PARDO  i2, i, i3
         ALLOCATE  Liiii (i,i3,*,i2)
         DO i1
            DO a2
               REQUEST  HBAR_JKIA_aaaa (i,i3,i1,a2) a2
               GET      R1A (a2,i2)
               tiiii (i,i3,i1,i2)  = HBAR_JKIA_aaaa (i,i3,i1,a2) * R1A (a2,i2)
               Liiii (i,i3,i1,i2) -= tiiii (i,i3,i1,i2)
            ENDDO a2
         ENDDO i1
         DO a
         DO a1
            REQUEST              L2AA (i2,a,i3,a1) a1
            tpppp (a,i3,a1,i2) = L2AA (i2,a,i3,a1)
            DO i1
               taiai (a,i,a1,i1)  = tpppp (a,i3,a1,i2) * Liiii (i,i3,i1,i2)
               PREPARE  XI2_AA (a,i,a1,i1) += taiai (a,i,a1,i1)
            ENDDO i1
         ENDDO a1
         ENDDO a
         DEALLOCATE  Liiii (i,i3,*,i2)
      ENDPARDO  i2, i, i3

      PARDO  i, i2, j2
         ALLOCATE  Liijj (i,i2,*,j2)
         DO j
            DO a2
               REQUEST               HBAR_JKIA_aabb (j,j2,i,a2) a2
               GET                   R1A (a2,i2)
               tpppp  (i,a2,j,j2)  = HBAR_JKIA_aabb (j,j2,i,a2)
               t1pppp (i,i2,j,j2)  = R1A (a2,i2) * tpppp (i,a2,j,j2)
               Liijj  (i,i2,j,j2) += t1pppp (i,i2,j,j2)
            ENDDO a2
            DO b2
               REQUEST               HBAR_JKIA_aabb (i,i2,j,b2) b2
               GET                   R1A (b2,j2)
               t1pppp (i,i2,j,j2)  = HBAR_JKIA_aabb (i,i2,j,b2) * R1A (b2,j2)
               Liijj  (i,i2,j,j2) += t1pppp (i,i2,j,j2)
            ENDDO b2
         ENDDO j 
         DO b
         DO a
            REQUEST             L2AB (i2,a,j2,b) b
            tppqq (a,i2,b,j2) = L2AB (i2,a,j2,b)
            DO j
               taibj (a,i,b,j)  = tppqq (a,i2,b,j2) * Liijj (i,i2,j,j2)
               PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
            ENDDO j
         ENDDO a
         ENDDO b
         DEALLOCATE  Liijj (i,i2,*,j2)
      ENDPARDO  i, i2, j2
#        
#
#       i        i  ef  mn        i  mn  ef
#      X  = 1/4 l  r   G   + 1/4 f  l   r
#       a        a  mn  ef        a  ef  mn
#
#
      PARDO  a, i
         GET          L1A      (i,a)
         tai (a,i)  = LHBAR_ia (i,a)
         tpp (a,i)  = L1A (i,a)

         tai (a,i) *= IL2R2
         tpp (a,i) *= IG2R2
         tai (a,i) += tpp (a,i)
         PUT  XI1_A (a,i) += tai (a,i)
      ENDPARDO  a, i
#
#
#     ...ready!
#
#
      ENDPROC  LIGHT_XI
#------------------------------------------------------------------------



#------------------------------------------------------------------------
#
#     ----------------
      PROC  CALC_XI
#     ----------------
#
#
#
      INVNORM = 1.0 / LRNORM

      CREATE  D2aa
      CREATE  XI1_A

      CALL  XI_INTERMEDIATES

      CALL  HEAVY_XI
      CALL  LIGHT_XI

      EXECUTE  SIP_BARRIER
#     
#
#          Some contributions were put in to D2dd, so prepare them
#          in to VCHACT2 now with appropriate permutations!
#
#
      PARDO  a, i, a1, i1
      
         GET                   D2aa (a,i,a1,i1)
         t2aiai (a1,i1,a,i)  = D2aa (a,i,a1,i1)
         t3aiai (a1,i,a,i1)  = D2aa (a,i,a1,i1)
         t4aiai (a,i1,a1,i)  = D2aa (a,i,a1,i1)
         t3aiai (a1,i,a,i1) *= -1.0 
         t4aiai (a,i1,a1,i) *= -1.0
         
         PREPARE  XI2_AA (a,i,a1,i1) += D2aa   (a,i,a1,i1)
         PREPARE  XI2_AA (a1,i1,a,i) += T2aiai (a1,i1,a,i)
         PREPARE  XI2_AA (a1,i,a,i1) += T3aiai (a1,i,a,i1)
         PREPARE  XI2_AA (a,i1,a1,i) += T4aiai (a,i1,a1,i)

      ENDPARDO  a, i, a1, i1

      EXECUTE  SERVER_BARRIER
#
#
#          Free up all unnecessary memory used in CALC_XI!
#
#
      DELETE  D2aa
      DELETE  R2L2_iijj
      DELETE  R2L2_iiii
      DELETE  R2G2_iijj
      DELETE  R2G2_iiii
      DEALLOCATE  LR1W_ai  (*,*)
      DEALLOCATE  LR1W_ii  (*,*)
      DEALLOCATE  LR1W_aa  (*,*)
      DEALLOCATE  LR1L2_ai (*,*)
      DEALLOCATE  LR2L1_ai (*,*)
      DEALLOCATE  LR2W2_ai (*,*)
      DEALLOCATE  LR2W2_aa (*,*)
      DEALLOCATE  LR2W2_ii (*,*)
      DEALLOCATE  LR2L2_aa (*,*)
      DEALLOCATE  LR2L2_ii (*,*)

     #CALL  PRINT_XI_AB
     #CALL  PRINT_XI_AA
     #CALL  PRINT_XI_A
#
#
#     ...ready!
#
#
      ENDPROC  CALC_XI
#------------------------------------------------------------------------



#------------------------------------------------------------------------
#
#     ------------------
      PROC  ZERO_DSCALAR
#     ------------------
#
#
#
#    The scalars used (overlap of error arrays and coeffients) in the DIIS 
#    expansion are zero'd out. 
#
#      Zero out scalars.
#      -----------------
#
       b11 = 0.0
       b12 = 0.0
       b13 = 0.0
       b14 = 0.0
       b15 = 0.0
       b16 = 0.0
       b17 = 0.0
       b18 = 0.0
       b19 = 0.0
       b110 = 0.0
#
       b22 = 0.0
       b23 = 0.0
       b24 = 0.0
       b25 = 0.0
       b26 = 0.0
       b27 = 0.0
       b28 = 0.0
       b29 = 0.0
       b210 = 0.0
#
       b33 = 0.0
       b34 = 0.0
       b35 = 0.0
       b36 = 0.0
       b37 = 0.0
       b38 = 0.0
       b39 = 0.0
       b310 = 0.0
#
       b44 = 0.0
       b45 = 0.0
       b46 = 0.0
       b47 = 0.0
       b48 = 0.0
       b49 = 0.0
       b410 = 0.0
#
       b55 = 0.0
       b56 = 0.0
       b57 = 0.0
       b58 = 0.0
       b59 = 0.0
       b510 = 0.0
#
       b66 = 0.0
       b67 = 0.0
       b68 = 0.0
       b69 = 0.0
       b610 = 0.0
#
       b77 = 0.0
       b78 = 0.0
       b79 = 0.0
       b710 = 0.0
#
       b88 = 0.0
       b89 = 0.0
       b810 = 0.0
#      
       b99 = 0.0
       b910 = 0.0
#      
       b1010 = 0.0
#      
       Tb11 = 0.0
       Tb12 = 0.0
       Tb13 = 0.0
       Tb14 = 0.0
       Tb15 = 0.0
       Tb16 = 0.0
       Tb17 = 0.0
       Tb18 = 0.0
       Tb19 = 0.0
       Tb110 = 0.0
#      
       Tb22 = 0.0
       Tb23 = 0.0
       Tb24 = 0.0
       Tb25 = 0.0
       Tb26 = 0.0
       Tb27 = 0.0
       Tb28 = 0.0
       Tb29 = 0.0
       Tb210 = 0.0
#      
       Tb33 = 0.0
       Tb34 = 0.0
       Tb35 = 0.0
       Tb36 = 0.0
       Tb37 = 0.0
       Tb38 = 0.0
       Tb39 = 0.0
       Tb310 = 0.0
#
       Tb44 = 0.0
       Tb45 = 0.0
       Tb46 = 0.0
       Tb47 = 0.0
       Tb48 = 0.0
       Tb49 = 0.0
       Tb410 = 0.0
#
       Tb55 = 0.0
       Tb56 = 0.0
       Tb57 = 0.0
       Tb58 = 0.0
       Tb59 = 0.0
       Tb510 = 0.0
#
       Tb66 = 0.0
       Tb67 = 0.0
       Tb68 = 0.0
       Tb69 = 0.0
       Tb610 = 0.0
#
       Tb77 = 0.0
       Tb78 = 0.0
       Tb79 = 0.0
       Tb710 = 0.0
#
       Tb88 = 0.0
       Tb89 = 0.0
       Tb810 = 0.0
#      
       Tb99 = 0.0
       Tb910 = 0.0
#      
       Tb1010 = 0.0
#      
       c1 = 0.0
       c2 = 0.0
       c3 = 0.0
       c4 = 0.0
       c5 = 0.0
       c6 = 0.0
       c7 = 0.0
       c8 = 0.0
       c9 = 0.0
       c10 = 0.0
#      
       execute sip_barrier
#
#
#     ...ready!
#
#
      ENDPROC  ZERO_DSCALAR
#------------------------------------------------------------------------



#------------------------------------------------------------------------
#
#     ----------------
      PROC  SETUP_DIIS
#     ----------------
#
#
#    Put the matrix elements of B into the sip 'B' matrix. 
#      
       execute diis_setup Tb11
       execute diis_setup Tb12
       execute diis_setup Tb13
       execute diis_setup Tb14
       execute diis_setup Tb15
       execute diis_setup Tb16
       execute diis_setup Tb17
       execute diis_setup Tb18
       execute diis_setup Tb19
       execute diis_setup Tb110
       
       execute diis_setup Tb22
       execute diis_setup Tb23
       execute diis_setup Tb24
       execute diis_setup Tb25
       execute diis_setup Tb26
       execute diis_setup Tb27
       execute diis_setup Tb28
       execute diis_setup Tb29
       execute diis_setup Tb210
       
       execute diis_setup Tb33
       execute diis_setup Tb34
       execute diis_setup Tb35
       execute diis_setup Tb36
       execute diis_setup Tb37
       execute diis_setup Tb38
       execute diis_setup Tb39
       execute diis_setup Tb310

       execute diis_setup Tb44
       execute diis_setup Tb45
       execute diis_setup Tb46
       execute diis_setup Tb47
       execute diis_setup Tb48
       execute diis_setup Tb49
       execute diis_setup Tb410

       execute diis_setup Tb55
       execute diis_setup Tb56
       execute diis_setup Tb57
       execute diis_setup Tb58
       execute diis_setup Tb59
       execute diis_setup Tb510

       execute diis_setup Tb66
       execute diis_setup Tb67
       execute diis_setup Tb68
       execute diis_setup Tb69
       execute diis_setup Tb610

       execute diis_setup Tb77
       execute diis_setup Tb78
       execute diis_setup Tb79
       execute diis_setup Tb710

       execute diis_setup Tb88
       execute diis_setup Tb89
       execute diis_setup Tb810

       execute diis_setup Tb99
       execute diis_setup Tb910
       
       execute diis_setup Tb1010
#      
       execute sip_barrier
#
#
#     ...ready!
#
#
      ENDPROC  SETUP_DIIS
#------------------------------------------------------------------------


#
# ---------------------------------------------------------------------------------
#
     PROC DIIS1  
#    ---------- 
#
#    Zero out scalars.
#    ----------------- 
#
     CALL ZERO_DSCALAR 
#
#    Determine the 'B-matrix'. 
#    ------------------------- 
#
#    Compute contributions due to T2aiai amplitudes. 
#    ----------------------------------------------- 
#
#
     PARDO a, i, a1, i1
#
#          REQUEST/GET amplitude data from all 2 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1aiai(a,i,a1,i1) a # ziter-1 amplitudes
           REQUEST e2aiai(a,i,a1,i1) a # ziter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,2
#             ---------
#
              etemp = e1aiai(a,i,a1,i1)*e1aiai(a,i,a1,i1)
              b11  += etemp
#
              etemp = e1aiai(a,i,a1,i1)*e2aiai(a,i,a1,i1)
              b12  += etemp
#
#             b1x x=2,2
#             ---------
#
              etemp = e2aiai(a,i,a1,i1)*e2aiai(a,i,a1,i1)
              b22  += etemp
#
     ENDPARDO a, i, a1, i1
#
#    Compute contributions due to T2aibj amplitudes.
#    -----------------------------------------------
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 2 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1aibj(a,i,b,j) a # ziter-1 amplitudes
           REQUEST e2aibj(a,i,b,j) a # ziter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,2
#             ---------
#
              etemp = e1aibj(a,i,b,j)*e1aibj(a,i,b,j)
              etemp *= 2.0
              b11  += etemp
#
              etemp = e1aibj(a,i,b,j)*e2aibj(a,i,b,j)
              etemp *= 2.0
              b12  += etemp
#
#             b1x x=2,2
#             ---------
#
              etemp = e2aibj(a,i,b,j)*e2aibj(a,i,b,j)
              etemp *= 2.0
              b22  += etemp
#
     ENDPARDO a, i, b, j
#
#    Compute contributions due to T1ai amplitudes. 
#    --------------------------------------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 2 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET e1ai(a,i)    # ziter-1 amplitudes  
           GET e2ai(a,i)    # ziter-0 amplitudes  
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#             b1x x=1,2 
#             --------- 
#
              etemp = e1ai(a,i)*e1ai(a,i) 
              etemp *= 4.0
              b11  += etemp            
#
              etemp = e1ai(a,i)*e2ai(a,i) 
              etemp *= 4.0
              b12  += etemp            
#
#             b1x x=2,2 
#             --------- 
#
              etemp = e2ai(a,i)*e2ai(a,i) 
              etemp *= 4.0
              b22  += etemp            
#
     ENDPARDO a, i 
#
     execute sip_barrier
     execute server_barrier 
#
#    Collectively sum B-matrix elements. 
#    -----------------------------------
#
     collective Tb11 += b11 
     collective Tb12 += b12 
     collective Tb22 += b22 
#
#    Now the unique elements of the 'B-matrix' have been computed, the array is filled out
#    in the setup_diis. 
#    --------------------------------------------------------------------------------------
#
#    Put the elements of the 'B-matrix', which have been computed as scalars into the  
#    R-matrix. 
#    -------------------------------------------------------------------------------- 
#
     CALL SETUP_DIIS 
#
     execute compute_diis # --> New instruction  
#
     c1 = Tb11 
     c2 = Tb22 
     execute print_scalar c1 
     execute print_scalar c2 
#
#    Done computing the c-vector. 
#    ---------------------------- 
#
#    Form the updated amplitudes using the c-vector. 
#    -----------------------------------------------  
#
#    Form T2old_aa. 
#    -------------- 
#
     PARDO a, i, a1, i1
#
#          REQUEST/GET amplitude data from all 2 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST d0aiai(a,i,a1,i1) a # ziter-2 amplitudes
           REQUEST d1aiai(a,i,a1,i1) a # ziter-1 amplitudes
#
           REQUEST e1aiai(a,i,a1,i1) a # ziter-1 amplitudes
           REQUEST e2aiai(a,i,a1,i1) a # ziter-0 amplitudes

           REQUEST             VCONV2AA (a,i,a1,i1) a # Diagonal HBAR elements
           tpppp (a,i,a1,i1) = VCONV2AA (a,i,a1,i1)
#
#          Evaluate the DIIS approximant 
#          -----------------------------
#
           taiai  (a,i,a1,i1)  = e1aiai (a,i,a1,i1)
           taiai  (a,i,a1,i1) *= c1

           t2aiai (a,i,a1,i1)  = e2aiai (a,i,a1,i1)
           t2aiai (a,i,a1,i1) *= c2
           taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)
           taiai  (a,i,a1,i1) *=  0.75 # To match ACESII
           EXECUTE  APPLY_DEN4_NODIAG  taiai  tpppp
#
#
#          Add to the associated residual vectors
#
#
           t2aiai (a,i,a1,i1)  = d0aiai (a,i,a1,i1)
           t2aiai (a,i,a1,i1) *= c1
           taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

           t2aiai (a,i,a1,i1)  = d1aiai (a,i,a1,i1)
           t2aiai (a,i,a1,i1) *= c2
           taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

           PREPARE  VCACT2AA (a,i,a1,i1) = taiai (a,i,a1,i1)

     ENDPARDO a, i, a1, i1
#
#    Form T2old_ab. 
#    -------------- 
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 2 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST D0aibj(a,i,b,j) a # ziter-2 amplitudes
           REQUEST D1aibj(a,i,b,j) a # ziter-1 amplitudes
#
           REQUEST e1aibj(a,i,b,j) a # ziter-1 amplitudes
           REQUEST e2aibj(a,i,b,j) a # ziter-0 amplitudes

           REQUEST           VCONV2AB (a,i,b,j) a
           tppqq (a,i,b,j) = VCONV2AB (a,i,b,j)
#
#          Evaluate the DIIS approximant 
#          -----------------------------
#    
           taibj  (a,i,b,j)  = e1aibj (a,i,b,j)
           taibj  (a,i,b,j) *= c1

           t2aibj (a,i,b,j)  = e2aibj (a,i,b,j)
           t2aibj (a,i,b,j) *= c2
           taibj  (a,i,b,j) += t2aibj (a,i,b,j)
           taibj  (a,i,b,j) *=  0.75 # To match ACESII
           EXECUTE  APPLY_DEN4  taibj  tppqq
#
#
#          Add to the associated residual vectors
#
#
           t2aibj (a,i,b,j)  = d0aibj (a,i,b,j)
           t2aibj (a,i,b,j) *= c1
           taibj  (a,i,b,j) += t2aibj (a,i,b,j)

           t2aibj (a,i,b,j)  = d1aibj (a,i,b,j)
           t2aibj (a,i,b,j) *= c2
           taibj  (a,i,b,j) += t2aibj (a,i,b,j)

           PREPARE  VCACT2AB (a,i,b,j) = taibj (a,i,b,j)

     ENDPARDO a, i, b, j
#
#    Form tai_old. 
#    ------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 2 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET D0ai(a,i)     # ziter-2 amplitudes  
           GET D1ai(a,i)     # ziter-1 amplitudes  
#
           GET e1ai(a,i)     # ziter-1 amplitudes  
           GET e2ai(a,i)     # ziter-0 amplitudes  

           GET         VCONV1A (a,i)
           tpp (a,i) = VCONV1A (a,i)
#
#          Evaluate the DIIS approximant 
#          -----------------------------
#    
           tai  (a,i)  = e1ai (a,i)
           tai  (a,i) *= c1

           t2ai (a,i)  = e2ai (a,i)
           t2ai (a,i) *= c2
           tai  (a,i) += t2ai (a,i)
           tai  (a,i) *=  0.75 # To match ACESII
           EXECUTE  APPLY_DEN2  tai  tpp
#
#
#          Add to the associated residual vectors
#
#
           t2ai (a,i)  = d0ai (a,i)
           t2ai (a,i) *= c1
           tai  (a,i) += t2ai (a,i)

           t2ai (a,i)  = d1ai (a,i)
           t2ai (a,i) *= c2
           tai  (a,i) += t2ai (a,i)

           PUT  VCACT1A (a,i) = tai (a,i)
#
     ENDPARDO a, i  
#
     execute sip_barrier 
     execute server_barrier 
#
     ENDPROC DIIS1  
#    ------------- 
#
# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
#
     PROC DIIS2  
#    ---------- 
#
#    Zero out scalars.
#    ----------------- 
#
     CALL ZERO_DSCALAR 
#
#    Determine the 'B-matrix'. 
#    ------------------------- 
#
#    Compute contributions due to T2aiai amplitudes. 
#    ----------------------------------------------- 
#
#
     PARDO a, i, a1, i1
#
#          REQUEST/GET amplitude data from all 3 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1aiai(a,i,a1,i1) a # ziter-2 amplitudes
           REQUEST e2aiai(a,i,a1,i1) a # ziter-1 amplitudes
           REQUEST e3aiai(a,i,a1,i1) a # ziter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,3
#             ---------
#
              etemp = e1aiai(a,i,a1,i1)*e1aiai(a,i,a1,i1)
              b11  += etemp
#
              etemp = e1aiai(a,i,a1,i1)*e2aiai(a,i,a1,i1)
              b12  += etemp
#
              etemp = e1aiai(a,i,a1,i1)*e3aiai(a,i,a1,i1)
              b13  += etemp
#
#             b1x x=2,3
#             ---------
#
              etemp = e2aiai(a,i,a1,i1)*e2aiai(a,i,a1,i1)
              b22  += etemp
#
              etemp = e2aiai(a,i,a1,i1)*e3aiai(a,i,a1,i1)
              b23  += etemp
#
#             b1x x=3,3
#             ---------
#
              etemp = e3aiai(a,i,a1,i1)*e3aiai(a,i,a1,i1)
              b33  += etemp
#
     ENDPARDO a, i, a1, i1
#
#    Compute contributions due to T2aibj amplitudes.
#    -----------------------------------------------
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 3 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1aibj(a,i,b,j) a # ziter-2 amplitudes
           REQUEST e2aibj(a,i,b,j) a # ziter-1 amplitudes
           REQUEST e3aibj(a,i,b,j) a # ziter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,3
#             ---------
#
              etemp = e1aibj(a,i,b,j)*e1aibj(a,i,b,j)
              etemp *= 2.0
              b11  += etemp
#
              etemp = e1aibj(a,i,b,j)*e2aibj(a,i,b,j)
              etemp *= 2.0
              b12  += etemp
#
              etemp = e1aibj(a,i,b,j)*e3aibj(a,i,b,j)
              etemp *= 2.0
              b13  += etemp
#
#             b1x x=2,3
#             ---------
#
              etemp = e2aibj(a,i,b,j)*e2aibj(a,i,b,j)
              etemp *= 2.0
              b22  += etemp
#
              etemp = e2aibj(a,i,b,j)*e3aibj(a,i,b,j)
              etemp *= 2.0
              b23  += etemp
#
#             b1x x=3,3
#             ---------
#
              etemp = e3aibj(a,i,b,j)*e3aibj(a,i,b,j)
              etemp *= 2.0
              b33  += etemp
#
     ENDPARDO a, i, b, j
#
#    Compute contributions due to T1ai amplitudes. 
#    --------------------------------------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 4 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET e1ai(a,i)    # ziter-2 amplitudes  
           GET e2ai(a,i)    # ziter-1 amplitudes  
           GET e3ai(a,i)    # ziter-0 amplitudes  
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#             b1x x=1,3 
#             --------- 
#
              etemp = e1ai(a,i)*e1ai(a,i) 
              etemp *= 4.0
              b11  += etemp            
#
              etemp = e1ai(a,i)*e2ai(a,i) 
              etemp *= 4.0
              b12  += etemp            
#
              etemp = e1ai(a,i)*e3ai(a,i) 
              etemp *= 4.0
              b13  += etemp            
#
#             b1x x=2,3 
#             --------- 
#
              etemp = e2ai(a,i)*e2ai(a,i) 
              etemp *= 4.0
              b22  += etemp            
#
              etemp = e2ai(a,i)*e3ai(a,i) 
              etemp *= 4.0
              b23  += etemp            
#
#             b1x x=3,3 
#             --------- 
#
              etemp = e3ai(a,i)*e3ai(a,i) 
              etemp *= 4.0
              b33  += etemp            
#
     ENDPARDO a, i 
#
#    Collectively sum B-matrix elements. 
#    -----------------------------------
#
     collective Tb11 += b11 
     collective Tb12 += b12 
     collective Tb13 += b13 
     collective Tb22 += b22 
     collective Tb23 += b23 
     collective Tb33 += b33 
#
#    Now the unique elements of the 'B-matrix' have been computed and the array filled out. 
#    --------------------------------------------------------------------------------------
#
#    Put the elements of the 'B-matrix', which have been computed as scalars into the  
#    R-matrix. 
#    -------------------------------------------------------------------------------- 
#
     CALL SETUP_DIIS 
#
     execute compute_diis # --> New instruction  
#
     c1 = Tb11 
     c2 = Tb22 
     c3 = Tb33 
     execute print_scalar c1 
     execute print_scalar c2 
     execute print_scalar c3 
#
#    Done computing the c-vector. 
#    ---------------------------- 
#
#    Form the updated amplitudes using the c-vector. 
#    -----------------------------------------------  
#
#    Form T2old_aa. 
#    -------------- 
#
     PARDO a, i, a1, i1
#
#          REQUEST/GET amplitude data from all 3 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST d0aiai(a,i,a1,i1) a # ziter-3 amplitudes
           REQUEST d1aiai(a,i,a1,i1) a # ziter-2 amplitudes
           REQUEST d2aiai(a,i,a1,i1) a # ziter-1 amplitudes
#
           REQUEST e1aiai(a,i,a1,i1) a # ziter-2 amplitudes
           REQUEST e2aiai(a,i,a1,i1) a # ziter-1 amplitudes
           REQUEST e3aiai(a,i,a1,i1) a # ziter-0 amplitudes

           REQUEST             VCONV2AA (a,i,a1,i1) a # Diagonal HBAR elements
           tpppp (a,i,a1,i1) = VCONV2AA (a,i,a1,i1)
#
#          Evaluate the DIIS approximant 
#          -----------------------------
#
           taiai  (a,i,a1,i1)  = e1aiai (a,i,a1,i1)
           taiai  (a,i,a1,i1) *= c1

           t2aiai (a,i,a1,i1)  = e2aiai (a,i,a1,i1)
           t2aiai (a,i,a1,i1) *= c2
           taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

           t2aiai (a,i,a1,i1)  = e3aiai (a,i,a1,i1)
           t2aiai (a,i,a1,i1) *= c3     
           taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

           taiai  (a,i,a1,i1) *=  0.75 # To match ACESII
           EXECUTE  APPLY_DEN4_NODIAG  taiai  tpppp
#
#
#          Add to the associated residual vectors
#
#
           t2aiai (a,i,a1,i1)  = d0aiai (a,i,a1,i1)
           t2aiai (a,i,a1,i1) *= c1
           taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

           t2aiai (a,i,a1,i1)  = d1aiai (a,i,a1,i1)
           t2aiai (a,i,a1,i1) *= c2
           taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

           t2aiai (a,i,a1,i1)  = d2aiai (a,i,a1,i1)
           t2aiai (a,i,a1,i1) *= c3
           taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

           PREPARE  VCACT2AA (a,i,a1,i1) = taiai (a,i,a1,i1)

     ENDPARDO a, i, a1, i1
#
#    Form T2old_ab. 
#    -------------- 
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 3 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST D0aibj(a,i,b,j) a # ziter-3 amplitudes
           REQUEST D1aibj(a,i,b,j) a # ziter-2 amplitudes
           REQUEST D2aibj(a,i,b,j) a # ziter-1 amplitudes
#
           REQUEST e1aibj(a,i,b,j) a # ziter-2 amplitudes
           REQUEST e2aibj(a,i,b,j) a # ziter-1 amplitudes
           REQUEST e3aibj(a,i,b,j) a # ziter-0 amplitudes

           REQUEST           VCONV2AB (a,i,b,j) a
           tppqq (a,i,b,j) = VCONV2AB (a,i,b,j) 
#          
#          Evaluate the DIIS approximant 
#          -----------------------------
#    
           taibj  (a,i,b,j)  = e1aibj (a,i,b,j)
           taibj  (a,i,b,j) *= c1
           
           t2aibj (a,i,b,j)  = e2aibj (a,i,b,j)
           t2aibj (a,i,b,j) *= c2
           taibj  (a,i,b,j) += t2aibj (a,i,b,j)

           t2aibj (a,i,b,j)  = e3aibj (a,i,b,j)
           t2aibj (a,i,b,j) *= c3
           taibj  (a,i,b,j) += t2aibj (a,i,b,j)

           taibj  (a,i,b,j) *=  0.75 # To match ACESII
           EXECUTE  APPLY_DEN4  taibj  tppqq
#
#
#          Add to the associated residual vectors
#
#
           t2aibj (a,i,b,j)  = d0aibj (a,i,b,j)
           t2aibj (a,i,b,j) *= c1
           taibj  (a,i,b,j) += t2aibj (a,i,b,j)

           t2aibj (a,i,b,j)  = d1aibj (a,i,b,j)
           t2aibj (a,i,b,j) *= c2
           taibj  (a,i,b,j) += t2aibj (a,i,b,j)

           t2aibj (a,i,b,j)  = d2aibj (a,i,b,j)
           t2aibj (a,i,b,j) *= c3
           taibj  (a,i,b,j) += t2aibj (a,i,b,j)

           PREPARE  VCACT2AB (a,i,b,j) = taibj (a,i,b,j)

     ENDPARDO a, i, b, j
#
#    Form tai_old. 
#    ------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 3 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET D0ai(a,i)     # ziter-3 amplitudes  
           GET D1ai(a,i)     # ziter-2 amplitudes  
           GET D2ai(a,i)     # ziter-1 amplitudes  
#
           GET e1ai(a,i)     # ziter-2 amplitudes  
           GET e2ai(a,i)     # ziter-1 amplitudes  
           GET e3ai(a,i)     # ziter-0 amplitudes  

           GET         VCONV1A (a,i)
           tpp (a,i) = VCONV1A (a,i)
#
#          Evaluate the DIIS approximant 
#          -----------------------------
#    
           tai  (a,i)  = e1ai (a,i)
           tai  (a,i) *= c1

           t2ai (a,i)  = e2ai (a,i)
           t2ai (a,i) *= c2
           tai  (a,i) += t2ai (a,i)

           t2ai (a,i)  = e3ai (a,i)
           t2ai (a,i) *= c3
           tai  (a,i) += t2ai (a,i)

           tai  (a,i) *=  0.75 # To match ACESII
           EXECUTE  APPLY_DEN2  tai  tpp
#
#
#          Add to the associated residual vectors
#
#    
           t2ai (a,i)  = d0ai (a,i)
           t2ai (a,i) *= c1
           tai  (a,i) += t2ai (a,i)

           t2ai (a,i)  = d1ai (a,i)
           t2ai (a,i) *= c2  
           tai  (a,i) += t2ai (a,i)

           t2ai (a,i)  = d2ai (a,i)
           t2ai (a,i) *= c3
           tai  (a,i) += t2ai (a,i)
           
           PUT  VCACT1A (a,i) = tai (a,i)
#
     ENDPARDO a, i  
#
     execute sip_barrier 
     execute server_barrier 
#
     ENDPROC DIIS2  
#    ------------- 
#
# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
#
     PROC DIIS3  
#    ---------- 
#
#    Zero out scalars.
#    ----------------- 
#
     CALL ZERO_DSCALAR 
#
#    Determine the 'B-matrix'. 
#    ------------------------- 
#
#    Compute contributions due to T2aiai amplitudes. 
#    ----------------------------------------------- 
#
#
     PARDO a, i, a1, i1
#
#          REQUEST/GET amplitude data from all 4 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1aiai(a,i,a1,i1) a # ziter-3 amplitudes
           REQUEST e2aiai(a,i,a1,i1) a # ziter-2 amplitudes
           REQUEST e3aiai(a,i,a1,i1) a # ziter-1 amplitudes
           REQUEST e4aiai(a,i,a1,i1) a # ziter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,4
#             ---------
#
              etemp = e1aiai(a,i,a1,i1)*e1aiai(a,i,a1,i1)
              b11  += etemp
#
              etemp = e1aiai(a,i,a1,i1)*e2aiai(a,i,a1,i1)
              b12  += etemp
#
              etemp = e1aiai(a,i,a1,i1)*e3aiai(a,i,a1,i1)
              b13  += etemp
#
              etemp = e1aiai(a,i,a1,i1)*e4aiai(a,i,a1,i1)
              b14  += etemp
#
#             b1x x=2,4
#             ---------
#
              etemp = e2aiai(a,i,a1,i1)*e2aiai(a,i,a1,i1)
              b22  += etemp
#
              etemp = e2aiai(a,i,a1,i1)*e3aiai(a,i,a1,i1)
              b23  += etemp
#
              etemp = e2aiai(a,i,a1,i1)*e4aiai(a,i,a1,i1)
              b24  += etemp
#
#             b1x x=3,4
#             ---------
#
              etemp = e3aiai(a,i,a1,i1)*e3aiai(a,i,a1,i1)
              b33  += etemp
#
              etemp = e3aiai(a,i,a1,i1)*e4aiai(a,i,a1,i1)
              b34  += etemp
#
#             b1x x=4,4
#             ---------
#
              etemp = e4aiai(a,i,a1,i1)*e4aiai(a,i,a1,i1)
              b44  += etemp
#
     ENDPARDO a, i, a1, i1
#
#    Compute contributions due to T2aibj amplitudes.
#    -----------------------------------------------
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 4 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1aibj(a,i,b,j) a # ziter-3 amplitudes
           REQUEST e2aibj(a,i,b,j) a # ziter-2 amplitudes
           REQUEST e3aibj(a,i,b,j) a # ziter-1 amplitudes
           REQUEST e4aibj(a,i,b,j) a # ziter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,4
#             ---------
#
              etemp = e1aibj(a,i,b,j)*e1aibj(a,i,b,j)
              etemp *= 2.0
              b11  += etemp
#
              etemp = e1aibj(a,i,b,j)*e2aibj(a,i,b,j)
              etemp *= 2.0
              b12  += etemp
#
              etemp = e1aibj(a,i,b,j)*e3aibj(a,i,b,j)
              etemp *= 2.0
              b13  += etemp
#
              etemp = e1aibj(a,i,b,j)*e4aibj(a,i,b,j)
              etemp *= 2.0
              b14  += etemp
#
#             b1x x=2,4
#             ---------
#
              etemp = e2aibj(a,i,b,j)*e2aibj(a,i,b,j)
              etemp *= 2.0
              b22  += etemp
#
              etemp = e2aibj(a,i,b,j)*e3aibj(a,i,b,j)
              etemp *= 2.0
              b23  += etemp
#
              etemp = e2aibj(a,i,b,j)*e4aibj(a,i,b,j)
              etemp *= 2.0
              b24  += etemp
#
#             b1x x=3,4
#             ---------
#
              etemp = e3aibj(a,i,b,j)*e3aibj(a,i,b,j)
              etemp *= 2.0
              b33  += etemp
#
              etemp = e3aibj(a,i,b,j)*e4aibj(a,i,b,j)
              etemp *= 2.0
              b34  += etemp
#
#             b1x x=4,4
#             ---------
#
              etemp = e4aibj(a,i,b,j)*e4aibj(a,i,b,j)
              etemp *= 2.0
              b44  += etemp
#
     ENDPARDO a, i, b, j
#
#    Compute contributions due to T1ai amplitudes. 
#    --------------------------------------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 4 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET e1ai(a,i)    # ziter-3 amplitudes  
           GET e2ai(a,i)    # ziter-2 amplitudes  
           GET e3ai(a,i)    # ziter-1 amplitudes  
           GET e4ai(a,i)    # ziter-0 amplitudes  
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#             b1x x=1,4 
#             --------- 
#
              etemp = e1ai(a,i)*e1ai(a,i) 
              etemp *= 4.0
              b11  += etemp            
#
              etemp = e1ai(a,i)*e2ai(a,i) 
              etemp *= 4.0
              b12  += etemp            
#
              etemp = e1ai(a,i)*e3ai(a,i) 
              etemp *= 4.0
              b13  += etemp            
#
              etemp = e1ai(a,i)*e4ai(a,i) 
              etemp *= 4.0
              b14  += etemp            
#
#             b1x x=2,4 
#             --------- 
#
              etemp = e2ai(a,i)*e2ai(a,i) 
              etemp *= 4.0
              b22  += etemp            
#
              etemp = e2ai(a,i)*e3ai(a,i) 
              etemp *= 4.0
              b23  += etemp            
#
              etemp = e2ai(a,i)*e4ai(a,i) 
              etemp *= 4.0
              b24  += etemp            
#
#             b1x x=3,4 
#             --------- 
#
              etemp = e3ai(a,i)*e3ai(a,i) 
              etemp *= 4.0
              b33  += etemp            
#
              etemp = e3ai(a,i)*e4ai(a,i) 
              etemp *= 4.0
              b34  += etemp            
#
#             b1x x=4,4 
#             --------- 
#
              etemp = e4ai(a,i)*e4ai(a,i) 
              etemp *= 4.0
              b44  += etemp            
#
     ENDPARDO a, i 
#
     execute sip_barrier
     execute server_barrier 
#
#    Collectively sum B-matrix elements. 
#    -----------------------------------
#
     collective Tb11 += b11 
     collective Tb12 += b12 
     collective Tb13 += b13 
     collective Tb14 += b14 
     collective Tb22 += b22 
     collective Tb23 += b23 
     collective Tb24 += b24 
     collective Tb33 += b33 
     collective Tb34 += b34 
     collective Tb44 += b44 
#
#    Now the unique elements of the 'B-matrix' have been computed and the array filled out. 
#    --------------------------------------------------------------------------------------
#
#    Put the elements of the 'B-matrix', which have been computed as scalars into the  
#    R-matrix. 
#    -------------------------------------------------------------------------------- 
#
     CALL SETUP_DIIS 
#
     execute compute_diis # --> New instruction  
#
     c1 = Tb11 
     c2 = Tb22 
     c3 = Tb33 
     c4 = Tb44 
     execute print_scalar c1 
     execute print_scalar c2 
     execute print_scalar c3 
     execute print_scalar c4 
#
#    Done computing the c-vector. 
#    ---------------------------- 
#
#    Form the updated amplitudes using the c-vector. 
#    -----------------------------------------------  
#
#    Form T2old_aa. 
#    -------------- 
#
     PARDO a, i, a1, i1
#
#          REQUEST/GET amplitude data from all 4 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST d0aiai(a,i,a1,i1) a # ziter-4 amplitudes
           REQUEST d1aiai(a,i,a1,i1) a # ziter-3 amplitudes
           REQUEST d2aiai(a,i,a1,i1) a # ziter-2 amplitudes
           REQUEST d3aiai(a,i,a1,i1) a # ziter-1 amplitudes
#
           REQUEST e1aiai(a,i,a1,i1) a # ziter-3 amplitudes
           REQUEST e2aiai(a,i,a1,i1) a # ziter-2 amplitudes
           REQUEST e3aiai(a,i,a1,i1) a # ziter-1 amplitudes
           REQUEST e4aiai(a,i,a1,i1) a # ziter-0 amplitudes

           REQUEST             VCONV2AA (a,i,a1,i1) a # Diagonal HBAR elements
           tpppp (a,i,a1,i1) = VCONV2AA (a,i,a1,i1)
#
#          Evaluate the DIIS approximant 
#          -----------------------------
#
           taiai  (a,i,a1,i1)  = e1aiai (a,i,a1,i1)
           taiai  (a,i,a1,i1) *= c1

           t2aiai (a,i,a1,i1)  = e2aiai (a,i,a1,i1)
           t2aiai (a,i,a1,i1) *= c2
           taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

           t2aiai (a,i,a1,i1)  = e3aiai (a,i,a1,i1)
           t2aiai (a,i,a1,i1) *= c3     
           taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

           t2aiai (a,i,a1,i1)  = e4aiai (a,i,a1,i1)
           t2aiai (a,i,a1,i1) *= c4     
           taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

           taiai  (a,i,a1,i1) *=  0.75 # To match ACESII
           EXECUTE  APPLY_DEN4_NODIAG  taiai  tpppp
#
#
#          Add to the associated residual vectors
#
#
           t2aiai (a,i,a1,i1)  = d0aiai (a,i,a1,i1)
           t2aiai (a,i,a1,i1) *= c1
           taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

           t2aiai (a,i,a1,i1)  = d1aiai (a,i,a1,i1)
           t2aiai (a,i,a1,i1) *= c2
           taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

           t2aiai (a,i,a1,i1)  = d2aiai (a,i,a1,i1)
           t2aiai (a,i,a1,i1) *= c3
           taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

           t2aiai (a,i,a1,i1)  = d3aiai (a,i,a1,i1)
           t2aiai (a,i,a1,i1) *= c4
           taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

           PREPARE  VCACT2AA (a,i,a1,i1) = taiai (a,i,a1,i1)
#
     ENDPARDO a, i, a1, i1
#
#    Form T2old_ab. 
#    -------------- 
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 4 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST D0aibj(a,i,b,j) a # ziter-4 amplitudes
           REQUEST D1aibj(a,i,b,j) a # ziter-3 amplitudes
           REQUEST D2aibj(a,i,b,j) a # ziter-2 amplitudes
           REQUEST D3aibj(a,i,b,j) a # ziter-1 amplitudes
#
           REQUEST e1aibj(a,i,b,j) a # ziter-3 amplitudes
           REQUEST e2aibj(a,i,b,j) a # ziter-2 amplitudes
           REQUEST e3aibj(a,i,b,j) a # ziter-1 amplitudes
           REQUEST e4aibj(a,i,b,j) a # ziter-0 amplitudes

           REQUEST           VCONV2AB (a,i,b,j) a
           tppqq (a,i,b,j) = VCONV2AB (a,i,b,j) 
#          
#          Evaluate the DIIS approximant 
#          -----------------------------
#    
           taibj  (a,i,b,j)  = e1aibj (a,i,b,j)
           taibj  (a,i,b,j) *= c1
           
           t2aibj (a,i,b,j)  = e2aibj (a,i,b,j)
           t2aibj (a,i,b,j) *= c2
           taibj  (a,i,b,j) += t2aibj (a,i,b,j)

           t2aibj (a,i,b,j)  = e3aibj (a,i,b,j)
           t2aibj (a,i,b,j) *= c3
           taibj  (a,i,b,j) += t2aibj (a,i,b,j)

           t2aibj (a,i,b,j)  = e4aibj (a,i,b,j)
           t2aibj (a,i,b,j) *= c4
           taibj  (a,i,b,j) += t2aibj (a,i,b,j)

           taibj  (a,i,b,j) *=  0.75 # To match ACESII
           EXECUTE  APPLY_DEN4  taibj  tppqq
#
#
#          Add to the associated residual vectors
#
#
           t2aibj (a,i,b,j)  = d0aibj (a,i,b,j)
           t2aibj (a,i,b,j) *= c1
           taibj  (a,i,b,j) += t2aibj (a,i,b,j)

           t2aibj (a,i,b,j)  = d1aibj (a,i,b,j)
           t2aibj (a,i,b,j) *= c2
           taibj  (a,i,b,j) += t2aibj (a,i,b,j)

           t2aibj (a,i,b,j)  = d2aibj (a,i,b,j)
           t2aibj (a,i,b,j) *= c3
           taibj  (a,i,b,j) += t2aibj (a,i,b,j)

           t2aibj (a,i,b,j)  = d3aibj (a,i,b,j)
           t2aibj (a,i,b,j) *= c4
           taibj  (a,i,b,j) += t2aibj (a,i,b,j)

           PREPARE  VCACT2AB (a,i,b,j) = taibj (a,i,b,j)
#
     ENDPARDO a, i, b, j
#
#    Form tai_old. 
#    ------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 4 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET D0ai(a,i)     # ziter-4 amplitudes  
           GET D1ai(a,i)     # ziter-3 amplitudes  
           GET D2ai(a,i)     # ziter-2 amplitudes  
           GET D3ai(a,i)     # ziter-1 amplitudes  
#
           GET e1ai(a,i)     # ziter-3 amplitudes  
           GET e2ai(a,i)     # ziter-2 amplitudes  
           GET e3ai(a,i)     # ziter-1 amplitudes  
           GET e4ai(a,i)     # ziter-0 amplitudes  

           GET         VCONV1A (a,i)
           tpp (a,i) = VCONV1A (a,i)
#
#          Evaluate the DIIS approximant 
#          -----------------------------
#    
           tai  (a,i)  = e1ai (a,i)
           tai  (a,i) *= c1

           t2ai (a,i)  = e2ai (a,i)
           t2ai (a,i) *= c2
           tai  (a,i) += t2ai (a,i)

           t2ai (a,i)  = e3ai (a,i)
           t2ai (a,i) *= c3
           tai  (a,i) += t2ai (a,i)

           t2ai (a,i)  = e4ai (a,i)
           t2ai (a,i) *= c4
           tai  (a,i) += t2ai (a,i)

           tai  (a,i) *=  0.75 # To match ACESII
           EXECUTE  APPLY_DEN2  tai  tpp
#
#
#          Add to the associated residual vectors
#
#    
           t2ai (a,i)  = d0ai (a,i)
           t2ai (a,i) *= c1
           tai  (a,i) += t2ai (a,i)

           t2ai (a,i)  = d1ai (a,i)
           t2ai (a,i) *= c2  
           tai  (a,i) += t2ai (a,i)

           t2ai (a,i)  = d2ai (a,i)
           t2ai (a,i) *= c3
           tai  (a,i) += t2ai (a,i)
           
           t2ai (a,i)  = d3ai (a,i)
           t2ai (a,i) *= c4
           tai  (a,i) += t2ai (a,i)

           PUT  VCACT1A (a,i) = tai (a,i)
#
     ENDPARDO a, i  
#
     execute sip_barrier 
     execute server_barrier 
#
     ENDPROC DIIS3  
#    ------------- 
#
# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
#
     PROC DIIS4  
#    ---------- 
#
#    Zero out scalars.
#    ----------------- 
#
     CALL ZERO_DSCALAR 
#
#    Determine the 'B-matrix'. 
#    ------------------------- 
#
#    Compute contributions due to T2aiai amplitudes. 
#    ----------------------------------------------- 
#
#
     PARDO a, i, a1, i1
#
#          REQUEST/GET amplitude data from all 5 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1aiai(a,i,a1,i1) a # ziter-4 amplitudes
           REQUEST e2aiai(a,i,a1,i1) a # ziter-3 amplitudes
           REQUEST e3aiai(a,i,a1,i1) a # ziter-2 amplitudes
           REQUEST e4aiai(a,i,a1,i1) a # ziter-1 amplitudes
           REQUEST e5aiai(a,i,a1,i1) a # ziter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,5
#             ---------
#
              etemp = e1aiai(a,i,a1,i1)*e1aiai(a,i,a1,i1)
              b11  += etemp
#
              etemp = e1aiai(a,i,a1,i1)*e2aiai(a,i,a1,i1)
              b12  += etemp
#
              etemp = e1aiai(a,i,a1,i1)*e3aiai(a,i,a1,i1)
              b13  += etemp
#
              etemp = e1aiai(a,i,a1,i1)*e4aiai(a,i,a1,i1)
              b14  += etemp
#
              etemp = e1aiai(a,i,a1,i1)*e5aiai(a,i,a1,i1)
              b15  += etemp
#
#             b1x x=2,5
#             ---------
#
              etemp = e2aiai(a,i,a1,i1)*e2aiai(a,i,a1,i1)
              b22  += etemp
#
              etemp = e2aiai(a,i,a1,i1)*e3aiai(a,i,a1,i1)
              b23  += etemp
#
              etemp = e2aiai(a,i,a1,i1)*e4aiai(a,i,a1,i1)
              b24  += etemp
#
              etemp = e2aiai(a,i,a1,i1)*e5aiai(a,i,a1,i1)
              b25  += etemp
#
#             b1x x=3,5
#             ---------
#
              etemp = e3aiai(a,i,a1,i1)*e3aiai(a,i,a1,i1)
              b33  += etemp
#
              etemp = e3aiai(a,i,a1,i1)*e4aiai(a,i,a1,i1)
              b34  += etemp
#
              etemp = e3aiai(a,i,a1,i1)*e5aiai(a,i,a1,i1)
              b35  += etemp
#
#             b1x x=4,5
#             ---------
#
              etemp = e4aiai(a,i,a1,i1)*e4aiai(a,i,a1,i1)
              b44  += etemp
#
              etemp = e4aiai(a,i,a1,i1)*e5aiai(a,i,a1,i1)
              b45  += etemp
#
#             b1x x=5,5
#             ---------
#
              etemp = e5aiai(a,i,a1,i1)*e5aiai(a,i,a1,i1)
              b55  += etemp
#
     ENDPARDO a, i, a1, i1
#
#    Compute contributions due to T2aibj amplitudes.
#    -----------------------------------------------
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 5 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1aibj(a,i,b,j) a # ziter-4 amplitudes
           REQUEST e2aibj(a,i,b,j) a # ziter-3 amplitudes
           REQUEST e3aibj(a,i,b,j) a # ziter-2 amplitudes
           REQUEST e4aibj(a,i,b,j) a # ziter-1 amplitudes
           REQUEST e5aibj(a,i,b,j) a # ziter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,5
#             ---------
#
              etemp = e1aibj(a,i,b,j)*e1aibj(a,i,b,j)
              etemp *= 2.0
              b11  += etemp
#
              etemp = e1aibj(a,i,b,j)*e2aibj(a,i,b,j)
              etemp *= 2.0
              b12  += etemp
#
              etemp = e1aibj(a,i,b,j)*e3aibj(a,i,b,j)
              etemp *= 2.0
              b13  += etemp
#
              etemp = e1aibj(a,i,b,j)*e4aibj(a,i,b,j)
              etemp *= 2.0
              b14  += etemp
#
              etemp = e1aibj(a,i,b,j)*e5aibj(a,i,b,j)
              etemp *= 2.0
              b15  += etemp
#
#             b1x x=2,5
#             ---------
#
              etemp = e2aibj(a,i,b,j)*e2aibj(a,i,b,j)
              etemp *= 2.0
              b22  += etemp
#
              etemp = e2aibj(a,i,b,j)*e3aibj(a,i,b,j)
              etemp *= 2.0
              b23  += etemp
#
              etemp = e2aibj(a,i,b,j)*e4aibj(a,i,b,j)
              etemp *= 2.0
              b24  += etemp
#
              etemp = e2aibj(a,i,b,j)*e5aibj(a,i,b,j)
              etemp *= 2.0
              b25  += etemp
#
#             b1x x=3,5
#             ---------
#
              etemp = e3aibj(a,i,b,j)*e3aibj(a,i,b,j)
              etemp *= 2.0
              b33  += etemp
#
              etemp = e3aibj(a,i,b,j)*e4aibj(a,i,b,j)
              etemp *= 2.0
              b34  += etemp
#
              etemp = e3aibj(a,i,b,j)*e5aibj(a,i,b,j)
              etemp *= 2.0
              b35  += etemp
#
#             b1x x=4,5
#             ---------
#
              etemp = e4aibj(a,i,b,j)*e4aibj(a,i,b,j)
              etemp *= 2.0
              b44  += etemp
#
              etemp = e4aibj(a,i,b,j)*e5aibj(a,i,b,j)
              etemp *= 2.0
              b45  += etemp
#
#             b1x x=5,5
#             ---------
#
              etemp = e5aibj(a,i,b,j)*e5aibj(a,i,b,j)
              etemp *= 2.0
              b55  += etemp
#
     ENDPARDO a, i, b, j
#
#    Compute contributions due to T1ai amplitudes. 
#    --------------------------------------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 5 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET e1ai(a,i)    # ziter-4 amplitudes  
           GET e2ai(a,i)    # ziter-3 amplitudes  
           GET e3ai(a,i)    # ziter-2 amplitudes  
           GET e4ai(a,i)    # ziter-1 amplitudes  
           GET e5ai(a,i)    # ziter-0 amplitudes  
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#             b1x x=1,5 
#             --------- 
#
              etemp = e1ai(a,i)*e1ai(a,i) 
              etemp *= 4.0
              b11  += etemp            
#
              etemp = e1ai(a,i)*e2ai(a,i) 
              etemp *= 4.0
              b12  += etemp            
#
              etemp = e1ai(a,i)*e3ai(a,i) 
              etemp *= 4.0
              b13  += etemp            
#
              etemp = e1ai(a,i)*e4ai(a,i) 
              etemp *= 4.0
              b14  += etemp            
#
              etemp = e1ai(a,i)*e5ai(a,i) 
              etemp *= 4.0
              b15  += etemp            
#
#             b1x x=2,5 
#             --------- 
#
              etemp = e2ai(a,i)*e2ai(a,i) 
              etemp *= 4.0
              b22  += etemp            
#
              etemp = e2ai(a,i)*e3ai(a,i) 
              etemp *= 4.0
              b23  += etemp            
#
              etemp = e2ai(a,i)*e4ai(a,i) 
              etemp *= 4.0
              b24  += etemp            
#
              etemp = e2ai(a,i)*e5ai(a,i) 
              etemp *= 4.0
              b25  += etemp            
#
#             b1x x=3,5 
#             --------- 
#
              etemp = e3ai(a,i)*e3ai(a,i) 
              etemp *= 4.0
              b33  += etemp            
#
              etemp = e3ai(a,i)*e4ai(a,i) 
              etemp *= 4.0
              b34  += etemp            
#
              etemp = e3ai(a,i)*e5ai(a,i) 
              etemp *= 4.0
              b35  += etemp            
#
#             b1x x=4,5 
#             --------- 
#
              etemp = e4ai(a,i)*e4ai(a,i) 
              etemp *= 4.0
              b44  += etemp            
#
              etemp = e4ai(a,i)*e5ai(a,i) 
              etemp *= 4.0
              b45  += etemp            
#
#             b1x x=5,5 
#             --------- 
#
              etemp = e5ai(a,i)*e5ai(a,i) 
              etemp *= 4.0
              b55  += etemp            
#
     ENDPARDO a, i 
#
     execute sip_barrier
     execute server_barrier 
#
#    Collectively sum B-matrix elements. 
#    -----------------------------------
#
     collective Tb11 += b11 
     collective Tb12 += b12 
     collective Tb13 += b13 
     collective Tb14 += b14 
     collective Tb15 += b15 
     collective Tb22 += b22 
     collective Tb23 += b23 
     collective Tb24 += b24 
     collective Tb25 += b25 
     collective Tb33 += b33 
     collective Tb34 += b34 
     collective Tb35 += b35 
     collective Tb44 += b44 
     collective Tb45 += b45 
     collective Tb55 += b55 
#
#    Now the unique elements of the 'B-matrix' have been computed and the array filled out. 
#    --------------------------------------------------------------------------------------
#
#    Put the elements of the 'B-matrix', which have been computed as scalars into the  
#    R-matrix. 
#    -------------------------------------------------------------------------------- 
#
     CALL SETUP_DIIS 
#
     execute compute_diis # --> New instruction  
#
     c1 = Tb11 
     c2 = Tb22 
     c3 = Tb33 
     c4 = Tb44 
     c5 = Tb55 
     execute print_scalar c1 
     execute print_scalar c2 
     execute print_scalar c3 
     execute print_scalar c4 
     execute print_scalar c5 
#
#    Done computing the c-vector. 
#    ---------------------------- 
#
#    Form the updated amplitudes using the c-vector. 
#    -----------------------------------------------  
#
#    Form T2old_aa. 
#    -------------- 
#
     PARDO a, i, a1, i1
#
#          REQUEST/GET amplitude data from all 5 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST d0aiai(a,i,a1,i1) a # ziter-5 amplitudes
           REQUEST d1aiai(a,i,a1,i1) a # ziter-4 amplitudes
           REQUEST d2aiai(a,i,a1,i1) a # ziter-3 amplitudes
           REQUEST d3aiai(a,i,a1,i1) a # ziter-2 amplitudes
           REQUEST d4aiai(a,i,a1,i1) a # ziter-1 amplitudes
#
           REQUEST e1aiai(a,i,a1,i1) a # ziter-4 amplitudes
           REQUEST e2aiai(a,i,a1,i1) a # ziter-3 amplitudes
           REQUEST e3aiai(a,i,a1,i1) a # ziter-2 amplitudes
           REQUEST e4aiai(a,i,a1,i1) a # ziter-1 amplitudes
           REQUEST e5aiai(a,i,a1,i1) a # ziter-0 amplitudes

           REQUEST             VCONV2AA (a,i,a1,i1) a # Diagonal HBAR elements
           tpppp (a,i,a1,i1) = VCONV2AA (a,i,a1,i1)
#
#          Evaluate the DIIS approximant 
#          -----------------------------
#
           taiai  (a,i,a1,i1)  = e1aiai (a,i,a1,i1)
           taiai  (a,i,a1,i1) *= c1

           t2aiai (a,i,a1,i1)  = e2aiai (a,i,a1,i1)
           t2aiai (a,i,a1,i1) *= c2
           taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

           t2aiai (a,i,a1,i1)  = e3aiai (a,i,a1,i1)
           t2aiai (a,i,a1,i1) *= c3     
           taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

           t2aiai (a,i,a1,i1)  = e4aiai (a,i,a1,i1)
           t2aiai (a,i,a1,i1) *= c4     
           taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

           t2aiai (a,i,a1,i1)  = e5aiai (a,i,a1,i1)
           t2aiai (a,i,a1,i1) *= c5     
           taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

           taiai  (a,i,a1,i1) *=  0.75 # To match ACESII
           EXECUTE  APPLY_DEN4_NODIAG  taiai  tpppp
#
#
#          Add to the associated residual vectors
#
#
           t2aiai (a,i,a1,i1)  = d0aiai (a,i,a1,i1)
           t2aiai (a,i,a1,i1) *= c1
           taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

           t2aiai (a,i,a1,i1)  = d1aiai (a,i,a1,i1)
           t2aiai (a,i,a1,i1) *= c2
           taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

           t2aiai (a,i,a1,i1)  = d2aiai (a,i,a1,i1)
           t2aiai (a,i,a1,i1) *= c3
           taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

           t2aiai (a,i,a1,i1)  = d3aiai (a,i,a1,i1)
           t2aiai (a,i,a1,i1) *= c4
           taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

           t2aiai (a,i,a1,i1)  = d4aiai (a,i,a1,i1)
           t2aiai (a,i,a1,i1) *= c5
           taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

           PREPARE  VCACT2AA (a,i,a1,i1) = taiai (a,i,a1,i1)
#
     ENDPARDO a, i, a1, i1
#
#    Form T2old_ab. 
#    -------------- 
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 5 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST D0aibj(a,i,b,j) a # ziter-5 amplitudes
           REQUEST D1aibj(a,i,b,j) a # ziter-4 amplitudes
           REQUEST D2aibj(a,i,b,j) a # ziter-3 amplitudes
           REQUEST D3aibj(a,i,b,j) a # ziter-2 amplitudes
           REQUEST D4aibj(a,i,b,j) a # ziter-1 amplitudes
#
           REQUEST e1aibj(a,i,b,j) a # ziter-4 amplitudes
           REQUEST e2aibj(a,i,b,j) a # ziter-3 amplitudes
           REQUEST e3aibj(a,i,b,j) a # ziter-2 amplitudes
           REQUEST e4aibj(a,i,b,j) a # ziter-1 amplitudes
           REQUEST e5aibj(a,i,b,j) a # ziter-0 amplitudes

           REQUEST           VCONV2AB (a,i,b,j) a
           tppqq (a,i,b,j) = VCONV2AB (a,i,b,j) 
#          
#          Evaluate the DIIS approximant 
#          -----------------------------
#    
           taibj  (a,i,b,j)  = e1aibj (a,i,b,j)
           taibj  (a,i,b,j) *= c1
           
           t2aibj (a,i,b,j)  = e2aibj (a,i,b,j)
           t2aibj (a,i,b,j) *= c2
           taibj  (a,i,b,j) += t2aibj (a,i,b,j)

           t2aibj (a,i,b,j)  = e3aibj (a,i,b,j)
           t2aibj (a,i,b,j) *= c3
           taibj  (a,i,b,j) += t2aibj (a,i,b,j)

           t2aibj (a,i,b,j)  = e4aibj (a,i,b,j)
           t2aibj (a,i,b,j) *= c4
           taibj  (a,i,b,j) += t2aibj (a,i,b,j)

           t2aibj (a,i,b,j)  = e5aibj (a,i,b,j)
           t2aibj (a,i,b,j) *= c5
           taibj  (a,i,b,j) += t2aibj (a,i,b,j)

           taibj  (a,i,b,j) *=  0.75 # To match ACESII
           EXECUTE  APPLY_DEN4  taibj  tppqq
#
#
#          Add to the associated residual vectors
#
#
           t2aibj (a,i,b,j)  = d0aibj (a,i,b,j)
           t2aibj (a,i,b,j) *= c1
           taibj  (a,i,b,j) += t2aibj (a,i,b,j)

           t2aibj (a,i,b,j)  = d1aibj (a,i,b,j)
           t2aibj (a,i,b,j) *= c2
           taibj  (a,i,b,j) += t2aibj (a,i,b,j)

           t2aibj (a,i,b,j)  = d2aibj (a,i,b,j)
           t2aibj (a,i,b,j) *= c3
           taibj  (a,i,b,j) += t2aibj (a,i,b,j)

           t2aibj (a,i,b,j)  = d3aibj (a,i,b,j)
           t2aibj (a,i,b,j) *= c4
           taibj  (a,i,b,j) += t2aibj (a,i,b,j)

           t2aibj (a,i,b,j)  = d4aibj (a,i,b,j)
           t2aibj (a,i,b,j) *= c5
           taibj  (a,i,b,j) += t2aibj (a,i,b,j)

           PREPARE  VCACT2AB (a,i,b,j) = taibj (a,i,b,j)
#
     ENDPARDO a, i, b, j
#
#    Form tai_old. 
#    ------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 5 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET D0ai(a,i)     # ziter-5 amplitudes  
           GET D1ai(a,i)     # ziter-4 amplitudes  
           GET D2ai(a,i)     # ziter-3 amplitudes  
           GET D3ai(a,i)     # ziter-2 amplitudes  
           GET D4ai(a,i)     # ziter-1 amplitudes  
#
           GET e1ai(a,i)     # ziter-4 amplitudes  
           GET e2ai(a,i)     # ziter-3 amplitudes  
           GET e3ai(a,i)     # ziter-2 amplitudes  
           GET e4ai(a,i)     # ziter-1 amplitudes  
           GET e5ai(a,i)     # ziter-0 amplitudes  

           GET         VCONV1A (a,i)
           tpp (a,i) = VCONV1A (a,i)
#
#          Evaluate the DIIS approximant 
#          -----------------------------
#    
           tai  (a,i)  = e1ai (a,i)
           tai  (a,i) *= c1

           t2ai (a,i)  = e2ai (a,i)
           t2ai (a,i) *= c2
           tai  (a,i) += t2ai (a,i)

           t2ai (a,i)  = e3ai (a,i)
           t2ai (a,i) *= c3
           tai  (a,i) += t2ai (a,i)

           t2ai (a,i)  = e4ai (a,i)
           t2ai (a,i) *= c4
           tai  (a,i) += t2ai (a,i)

           t2ai (a,i)  = e5ai (a,i)
           t2ai (a,i) *= c5
           tai  (a,i) += t2ai (a,i)

           tai  (a,i) *=  0.75 # To match ACESII
           EXECUTE  APPLY_DEN2  tai  tpp
#
#
#          Add to the associated residual vectors
#
#    
           t2ai (a,i)  = d0ai (a,i)
           t2ai (a,i) *= c1
           tai  (a,i) += t2ai (a,i)

           t2ai (a,i)  = d1ai (a,i)
           t2ai (a,i) *= c2  
           tai  (a,i) += t2ai (a,i)

           t2ai (a,i)  = d2ai (a,i)
           t2ai (a,i) *= c3
           tai  (a,i) += t2ai (a,i)

           t2ai (a,i)  = d3ai (a,i)
           t2ai (a,i) *= c4
           tai  (a,i) += t2ai (a,i)

           t2ai (a,i)  = d4ai (a,i)
           t2ai (a,i) *= c5
           tai  (a,i) += t2ai (a,i)

           PUT  VCACT1A (a,i) = tai (a,i)
#
     ENDPARDO a, i  
#
     execute sip_barrier 
     execute server_barrier 
#
     ENDPROC DIIS4  
#    ------------- 
#
# ---------------------------------------------------------------------------------
#
     PROC MOVE4
#    ----------
     execute server_barrier
     execute sip_barrier
#
#    0 --> 1
#    ---------------------------------------------------
#
     execute array_copy d1aiai d0aiai
     execute array_copy d1aibj d0aibj
#
#
#    2 --> 1
#    ---------------------------------------------------
#
     execute array_copy e2aiai e1aiai
     execute array_copy e2aibj e1aibj
     execute array_copy d2aiai d1aiai
     execute array_copy d2aibj d1aibj
#
#    3 --> 2
#    ---------------------------------------------------
#
     execute array_copy e3aiai e2aiai
     execute array_copy e3aibj e2aibj
     execute array_copy d3aiai d2aiai
     execute array_copy d3aibj d2aibj
#
#
#    4 --> 3
#    ---------------------------------------------------
#
     execute array_copy e4aiai e3aiai
     execute array_copy e4aibj e3aibj
     execute array_copy d4aiai d3aiai
     execute array_copy d4aibj d3aibj
#
#    5 --> 4
#    ---------------------------------------------------
#
     execute array_copy e5aiai e4aiai
     execute array_copy e5aibj e4aibj
#
     execute sip_barrier
#
     PARDO a, i
           GET d1ai(a,i)
           PUT d0ai(a,i) = d1ai(a,i)
     ENDPARDO a, i
#
     execute sip_barrier
#
     PARDO a, i
           GET e2ai(a,i)
           PUT e1ai(a,i) = e2ai(a,i)
     ENDPARDO a, i
#
     PARDO a, i
           GET d2ai(a,i)
           PUT d1ai(a,i) = d2ai(a,i)
     ENDPARDO a, i
#
     execute sip_barrier
#
     PARDO a, i
           GET e3ai(a,i)
           PUT e2ai(a,i) = e3ai(a,i)
     ENDPARDO a, i
#
     PARDO a, i
           GET d3ai(a,i)
           PUT d2ai(a,i) = d3ai(a,i)
     ENDPARDO a, i
#
     execute sip_barrier
#
     PARDO a, i
           GET e4ai(a,i)
           PUT e3ai(a,i) = e4ai(a,i)
     ENDPARDO a, i
#
     PARDO a, i
           GET d4ai(a,i)
           PUT d3ai(a,i) = d4ai(a,i)
     ENDPARDO a, i
#
     execute sip_barrier
#
     PARDO a, i
           GET e5ai(a,i)
           PUT e4ai(a,i) = e5ai(a,i)
     ENDPARDO a, i
#
     execute server_barrier
#
     ENDPROC MOVE4
#    -------------
#
# ---------------------------------------------------------------------------------
#

#------------------------------------------------------------------------
#
#     ---------------
      PROC  MOVE_ZETA
#     ---------------
#
#
      PARDO  a, a1, i, i1

         REQUEST             VCACT2AA (a,i,a1,i1) a
         taiai (a,i,a1,i1) = VCACT2AA (a,i,a1,i1)

         if ziter == 1
            PREPARE d1aiai(a,i,a1,i1) = taiai(a,i,a1,i1)
         endif
         if ziter == 2
            PREPARE d2aiai(a,i,a1,i1) = Taiai(a,i,a1,i1)
         endif
         if ziter == 3
            PREPARE d3aiai(a,i,a1,i1) = Taiai(a,i,a1,i1)
         endif
         if ziter == 4
            PREPARE d4aiai(a,i,a1,i1) = Taiai(a,i,a1,i1)
         endif
         if ziter >= 5
            PREPARE d4aiai(a,i,a1,i1) = Taiai(a,i,a1,i1)
         endif
      ENDPARDO a, a1, i, i1

      PARDO b, a, j, i

         REQUEST           VCACT2AB (a,i,b,j) b
         taibj (a,i,b,j) = VCACT2AB (a,i,b,j)

         if ziter == 1
            PREPARE d1aibj(a,i,b,j) = taibj(a,i,b,j)
         endif
         if ziter == 2
            PREPARE d2aibj(a,i,b,j) = Taibj(a,i,b,j)
         endif
         if ziter == 3
            PREPARE d3aibj(a,i,b,j) = Taibj(a,i,b,j)
         endif
         if ziter == 4
            PREPARE d4aibj(a,i,b,j) = Taibj(a,i,b,j)
         endif
         if ziter >= 5
            PREPARE d4aibj(a,i,b,j) = Taibj(a,i,b,j)
         endif
      ENDPARDO b, a, j, i

      PARDO a, i

         GET         VCACT1A (a,i)
         tai (a,i) = VCACT1A (a,i)

         if ziter == 1
            PUT d1ai(a,i) = tai(a,i)
         endif
         if ziter == 2
            PUT d2ai(a,i) = Tai(a,i)
         endif
         if ziter == 3
            PUT d3ai(a,i) = Tai(a,i)
         endif
         if ziter == 4
            PUT d4ai(a,i) = Tai(a,i)
         endif
         if ziter >= 5
            PUT d4ai(a,i) = Tai(a,i)
         endif
      ENDPARDO a, i
#
#
#     ...ready!
#
#
      ENDPROC  MOVE_ZETA
#------------------------------------------------------------------------



#------------------------------------------------------------------------
#
#     -----------------
      PROC  UPDATE_ZETA
#     -----------------
#
#
      PARDO  a, i, a1, i1
         REQUEST              VCHACT2AA (a,i,a1,i1) a
         REQUEST              XI2_AA    (a,i,a1,i1) a
         taiai (a,i,a1,i1)  = XI2_AA (a,i,a1,i1)
         taiai (a,i,a1,i1) *= LRNORM
         taiai (a,i,a1,i1) -= VCHACT2AA (a,i,a1,i1)

         etemp  = taiai (a,i,a1,i1) * taiai (a,i,a1,i1)
         etemp *= 0.5
         esum  += etemp

         if ziter == 1
            PREPARE e1aiai(a,i,a1,i1) = Taiai(a,i,a1,i1)
#
#   Generate Jacobi iterate!
#
            REQUEST               VCONV2AA (a,i,a1,i1) a
            t1aiai (a,i,a1,i1)  = VCONV2AA (a,i,a1,i1)
            EXECUTE  APPLY_DEN4_NODIAG  taiai  t1aiai
            PREPARE  VCACT2AA (a,i,a1,i1) += taiai (a,i,a1,i1)
         endif

         if ziter == 2
            PREPARE e2aiai(a,i,a1,i1) = Taiai(a,i,a1,i1)
         endif

         if ziter == 3
            PREPARE e3aiai(a,i,a1,i1) = Taiai(a,i,a1,i1)
         endif

         if ziter == 4
            PREPARE e4aiai(a,i,a1,i1) = Taiai(a,i,a1,i1)
         endif

         if ziter >= 5
            PREPARE e5aiai(a,i,a1,i1) = Taiai(a,i,a1,i1)
         endif
      ENDPARDO a, i, a1, i1

      PARDO  a, i, b, j
         REQUEST            VCHACT2AB (a,i,b,j) a
         REQUEST            XI2_AB    (a,i,b,j) a
         taibj (a,i,b,j)  = XI2_AB    (a,i,b,j)
         taibj (a,i,b,j) *= LRNORM
         taibj (a,i,b,j) -= VCHACT2AB (a,i,b,j)

         etemp  = taibj (a,i,b,j) * taibj (a,i,b,j)
         esum  += etemp

         if ziter == 1
            PREPARE  e1aibj   (a,i,b,j)  = Taibj (a,i,b,j)
#
#   Generate Jacobi iterate!
#
            REQUEST             VCONV2AB (a,i,b,j) a
            t1aibj (a,i,b,j)  = VCONV2AB (a,i,b,j)
            EXECUTE  APPLY_DEN4  taibj  t1aibj
            PREPARE  VCACT2AB (a,i,b,j) += taibj (a,i,b,j)
         endif

         if ziter == 2
            PREPARE e2aibj(a,i,b,j) = Taibj(a,i,b,j)
         endif

         if ziter == 3
            PREPARE e3aibj(a,i,b,j) = Taibj(a,i,b,j)
         endif

         if ziter == 4
            PREPARE e4aibj(a,i,b,j) = Taibj(a,i,b,j)
         endif

         if ziter >= 5
            PREPARE e5aibj(a,i,b,j) = Taibj(a,i,b,j)
         endif
      ENDPARDO  a, i, b, j

      PARDO  a, i
         GET          VCHACT1A (a,i)
         GET          XI1_A    (a,i)
         tai (a,i)  = XI1_A    (a,i)
         tai (a,i) *= LRNORM
         tai (a,i) -= VCHACT1A (a,i)
         etemp  = tai (a,i) * tai (a,i)
         etemp *= 2.0
         esum  += etemp

         if ziter == 1
            PUT  e1ai    (a,i)  = Tai  (a,i)
#
#   Generate Jacobi iterate!
#
            GET          VCONV1A (a,i)
            t1ai (a,i) = VCONV1A (a,i)
            EXECUTE  APPLY_DEN2  tai  t1ai
            PUT  VCACT1A (a,i) += tai (a,i)
         endif

         if ziter == 2
            PUT e2ai(a,i) = Tai(a,i)
         endif

         if ziter == 3
            PUT e3ai(a,i) = Tai(a,i)
         endif

         if ziter == 4
            PUT e4ai(a,i) = Tai(a,i)
         endif

         if ziter >= 5
            PUT e5ai(a,i) = Tai(a,i)
         endif
      ENDPARDO  a, i

      EXECUTE  SERVER_BARRIER

      COLLECTIVE  zerr_jacob += esum
      EXECUTE  SIP_BARRIER
      EXECUTE  SQUARE_ROOT  zerr_jacob  ONEHALF

      EXECUTE  SERVER_BARRIER
#
#
#     ...ready!
#
#
      ENDPROC  UPDATE_ZETA
#------------------------------------------------------------------------



#------------------------------------------------------------------------
#
#     ----------------
      PROC  SOLVE_ZETA
#     ----------------
#
#
#
      CREATE  D0ai
      CREATE  D1ai
      CREATE  D2ai
      CREATE  D3ai
      CREATE  D4ai
      CREATE  D5ai

      CREATE  e1ai
      CREATE  e2ai
      CREATE  e3ai
      CREATE  e4ai
      CREATE  e5ai

      EXECUTE  SIP_BARRIER
#
#          Convergence criteria
#
#
      zcrit = cc_conv
#
#
#                                        -1
#          Generate initial guess XI * Hd
#
#
      PARDO  a, i, a1, i1
         REQUEST               XI2_AA   (a,i,a1,i1) a
         REQUEST               VCONV2AA (a,i,a1,i1) a
         t1aiai (a,i,a1,i1)  = XI2_AA   (a,i,a1,i1)
         t2aiai (a,i,a1,i1)  = VCONV2AA (a,i,a1,i1)
         t1aiai (a,i,a1,i1) *= LRNORM
         EXECUTE  APPLY_DEN4_NODIAG  t1aiai  t2aiai
         PREPARE  VCACT2AA (a,i,a1,i1) = t1aiai (a,i,a1,i1)
         PREPARE  D0aiai   (a,i,a1,i1) = t1aiai (a,i,a1,i1)
      ENDPARDO  a, i, a1, i1

      PARDO  a, i, b1, j1
         REQUEST               XI2_AB   (a,i,b1,j1) a
         REQUEST               VCONV2AB (a,i,b1,j1) a
         t1aibj (a,i,b1,j1)  = XI2_AB   (a,i,b1,j1)
         t2aibj (a,i,b1,j1)  = VCONV2AB (a,i,b1,j1)
         t1aibj (a,i,b1,j1) *= LRNORM
         EXECUTE  APPLY_DEN4  t1aibj  t2aibj
         PREPARE  VCACT2AB (a,i,b1,j1) = t1aibj (a,i,b1,j1)
         PREPARE  D0aibj   (a,i,b1,j1) = t1aibj (a,i,b1,j1)
      ENDPARDO  a, i, b1, j1

      PARDO  a, i
         GET           XI1_A   (a,i)
         GET           VCONV1A (a,i)
         t1ai (a,i)  = XI1_A   (a,i)
         t2ai (a,i)  = VCONV1A (a,i)
         t1ai (a,i) *= LRNORM
         EXECUTE  APPLY_DEN2  t1ai  t2ai
         PUT  VCACT1A (a,i) = t1ai (a,i)
         PUT  D0ai    (a,i) = t1ai (a,i)
      ENDPARDO  a, i

      zold = 0.0
      EXECUTE  SERVER_BARRIER

      DO ziter
#
#
#          Generate new amplitudes!
#
#
         esum = 0.0
         zerr_jacob = 0.0
         zmax_jacob = 0.0

         CALL  HCmult
#
#
#          Update amplitudes!
#
#
         CALL  UPDATE_ZETA
#
#
#          The following DIIS routines are slightly modified from 
#          the normal ones in the Coupled Cluster codes.
#
#
         IF ziter == 2
            CALL  DIIS1
         ENDIF

         IF ziter == 3
            CALL  DIIS2
         ENDIF

         IF ziter == 4
            CALL  DIIS3
         ENDIF

         IF ziter >= 5
            CALL  DIIS4
            CALL  MOVE4
         ENDIF

         CALL  MOVE_ZETA
#
#
#          Check on convergence!
#
#
         IF zerr_jacob < zold
            zdiff = zold - zerr_jacob
            IF zdiff < zcrit
               znorm = 0.0
               esum  = 0.0
               exit # ziter 
            ENDIF
         ENDIF

         IF zerr_jacob > zold
            zdiff = zerr_jacob - zold
            IF zdiff < zcrit
               znorm = 0.0
               esum  = 0.0
               exit # ziter 
            ENDIF
         ENDIF
#
#        Reset zold --> znew
#        
         zold = zerr_jacob
        #EXECUTE  PRINT_SCALAR  zerr_jacob
         EXECUTE  PRINT_SCALAR  zdiff

      ENDDO ziter
#
#
#          Now the Zeta amplitudes are stored in VCACTX (x=1A,2AA,2AB)
#          We're going to prepare them into the Lambda arrays. 
#          Obviously, we're going to lose the Lambda arrays, but
#          we're not going to need them any more.
#
#
      
      etemp1 = 0.0
      EXECUTE  SIP_BARRIER

      PARDO  a, i, a1, i1
         REQUEST  VCACT2AA (a,i,a1,i1) a
         REQUEST  R2AA     (a,i,a1,i1) a
         etemp  = VCACT2AA (a,i,a1,i1) * R2AA (a,i,a1,i1)
         etemp *= 0.5
         esum  += etemp
      ENDPARDO  a, i, a1, i1

      PARDO  a, i, b, j
         REQUEST  VCACT2AB (a,i,b,j) a
         REQUEST  R2AB     (a,i,b,j) a
         etemp  = VCACT2AB (a,i,b,j) * R2AB (a,i,b,j)
         esum  += etemp
      ENDPARDO  a, i, b, j

      PARDO  a, i            
         GET  VCACT1A (a,i)
         GET  R1A     (a,i)
         etemp  = VCACT1A (a,i) * R1A (a,i)
         etemp *= 2.0
         esum  += etemp
      ENDPARDO  a, i

      EXECUTE  SERVER_BARRIER
      COLLECTIVE  etemp1 += esum
      EXECUTE  SIP_BARRIER
      etemp1 *= RNORM
      EXECUTE  PRINT_SCALAR  etemp1

      iphase = 1.0
      IF LRNORM < ZERO    # then L is out of phase with R
         iphase = -1.0 # need to change phase
      ENDIF

      EXECUTE  SIP_BARRIER

      PARDO  a, i, a1, i1
         REQUEST             VCACT2AA (a,i,a1,i1) i1
         tiaia (i,a,i1,a1) = VCACT2AA (a,i,a1,i1)
         etemp  = tiaia (i,a,i1,a1) * tiaia (i,a,i1,a1)
         etemp *= 0.5
         esum  += etemp
         tiaia (i,a,i1,a1) *= iphase
         PREPARE  A2AA (i,a,i1,a1) = tiaia (i,a,i1,a1)

         tiaia (i,a,i1,a1) *= INVNORM
         PREPARE  L2AA (i,a,i1,a1) = tiaia (i,a,i1,a1)
      ENDPARDO  a, i, a1, i1

      PARDO  a, i, b, j
         REQUEST           VCACT2AB (a,i,b,j) j
         tiajb (i,a,j,b) = VCACT2AB (a,i,b,j)
         etemp  = tiajb (i,a,j,b) * tiajb (i,a,j,b)
         esum  += etemp
         tiajb (i,a,j,b) *= iphase
         PREPARE  A2AB (i,a,j,b) = tiajb (i,a,j,b)

         tiajb (i,a,j,b) *= INVNORM
         PREPARE  L2AB (i,a,j,b) = tiajb (i,a,j,b)
      ENDPARDO  a, i, b, j

      PARDO  a, i
         GET         VCACT1A (a,i)
         tia (i,a) = VCACT1A (a,i)
         etemp  = tia (i,a) * tia (i,a)
         etemp *= 2.0
         esum  += etemp
         tia (i,a) *= iphase
         PUT  A1A (i,a) = tia (i,a)

         tia (i,a) *= INVNORM
         PUT  L1A (i,a) = tia (i,a)
         PUT  L1B (i,a) = tia (i,a)
      ENDPARDO  a, i

      EXECUTE  SERVER_BARRIER
      COLLECTIVE znorm += esum
      EXECUTE  SIP_BARRIER

      EXECUTE  SQUARE_ROOT  znorm  ONEHALF
      EXECUTE  PRINT_SCALAR  znorm
#
#
#          Free up some memory!
#
#
      DELETE  D0ai
      DELETE  D1ai
      DELETE  D2ai
      DELETE  D3ai
      DELETE  D4ai
      DELETE  D5ai

      DELETE  e1ai
      DELETE  e2ai
      DELETE  e3ai
      DELETE  e4ai
      DELETE  e5ai
#
#
#     ...ready!
#
#
      ENDPROC  SOLVE_ZETA
#------------------------------------------------------------------------




#------------------------------------------------------------------------

      PROC root_put
#
          if iroot == 2.0
          root1=omega
          endif
#
          if iroot == 3.0
          root2=omega
          endif
#
          if iroot == 4.0
          root3=omega
          endif
#
          if iroot == 5.0
          root4=omega
          endif
#
          if iroot == 6.0
          root5=omega
          endif
#
          if iroot == 7.0
          root6=omega
          endif
#
          if iroot == 8.0
          root7=omega
          endif
#
          if iroot == 9.0
          root8=omega
          endif
#
          if iroot == 10.0
          root9=omega
          endif
#
          if iroot == 11.0
          root10=omega
          endif
#
          if iroot == 12.0
          root11=omega
          endif
#
          if iroot == 13.0
          root12=omega
          endif
#
# Watson
#
          rootcount = 1.0
          DO indone
          DO kindex12
             rootcount += 1.0
             if rootcount == iroot
                tee  (kindex12,indone) = omega
                t1ee (kindex12,indone) = residuum
                PUT  LEE (kindex12,indone) = tee (kindex12,indone)
                PUT  LEE_resid (kindex12,indone) = t1ee (kindex12,indone)
             endif
          ENDDO kindex12
          ENDDO indone

      ENDPROC root_put
#
     PROC PRNTING
#
       execute print_scalar residuum
       execute print_scalar omega
       execute print_scalar ispdim
       execute print_scalar iroot
       execute print_scalar imaxc
       execute print_scalar nsp
#
     ENDPROC PRNTING
#
     PROC SYMMETR_A
#    -------------- 
#
     PARDO a, a1, i, i1
           Taiai(a,i,a1,i1)             = 0.0
           PREPARE VCACT2AA(a,i,a1,i1)  = Taiai(a,i,a1,i1)
           PREPARE VCHACT2AA(a,i,a1,i1) = Taiai(a,i,a1,i1)
     ENDPARDO  a, a1, i, i1
#
     execute server_barrier 
#
     PARDO  a, a1, i, i1
            DO k21 
               IF k21 > spdim  
                  REQUEST            VC2AA(a,i,a1,i1,k21) a 
                  Taiai(a,i,a1,i1) = VC2AA(a,i,a1,i1,k21) 
#
                  R3aiai(a1,i,a,i1) = 0.0
                  Raiai(a,i,a1,i1)  = 0.0
#
                  if a == a1
                     Raiai(a,i,a1,i1)   = Taiai(a,i,a1,i1)
                     execute symm_force_a Raiai
                  endif
#
                  if a < a1
                     Raiai(a,i,a1,i1)   = Taiai(a,i,a1,i1)
                     R3aiai(a1,i,a,i1)  = Taiai(a,i,a1,i1)
                     R3aiai(a1,i,a,i1) *= -1.0
                  endif
#
                  PREPARE VCACT2AA(a,i,a1,i1) += Raiai(a,i,a1,i1)
                  PREPARE VCACT2AA(a1,i,a,i1) += R3aiai(a1,i,a,i1)
                  exit 
#
               ENDIF 
            ENDDO k21 
     ENDPARDO a, a1, i, i1
#
     execute server_barrier
#
     PARDO a, a1, i, i1
#
           REQUEST VCACT2AA(a,i,a1,i1) i1
           Taiai(a,i,a1,i1) = VCACT2AA(a,i,a1,i1)
#
           R2aiai(a,i1,a1,i)=0.0
           Raiai(a,i,a1,i1)=0.0
#
           if i == i1
#
              Raiai(a,i,a1,i1)=Taiai(a,i,a1,i1)
              execute symm_force_i Raiai
#
           endif
#
           if i < i1
#
              Raiai(a,i,a1,i1)=Taiai(a,i,a1,i1)
              R2aiai(a,i1,a1,i)=Taiai(a,i,a1,i1)
              R2aiai(a,i1,a1,i)*=-1.0
#
           endif
#
           PREPARE VCHACT2AA(a,i,a1,i1)+=Raiai(a,i,a1,i1)
           PREPARE VCHACT2AA(a,i1,a1,i)+=R2aiai(a,i1,a1,i)
#
     ENDPARDO  a, a1, i, i1
#
     execute server_barrier
#
     ENDPROC SYMMETR_A
#    ----------------- 
#
     PROC SYMMETR_B
#    -------------- 
#
     PARDO a, a1, i, i1
           REQUEST            VCHACT2AA(a,i,a1,i1) i1
           Taiai(a,i,a1,i1) = VCHACT2AA(a,i,a1,i1)
           DO k21 
              IF k21 > spdim  
                 taiaiS(a,i,a1,i1,k21)        = Taiai(a,i,a1,i1) 
                 PREPARE VC2AA(a,i,a1,i1,k21) = taiaiS(a,i,a1,i1,k21)  
                 exit 
              ENDIF 
            ENDDO k21 
     ENDPARDO a, a1, i, i1
#
     ENDPROC SYMMETR_B
#    ----------------- 
# ----------------------------------------------------------------------
#
     PROC PRINT_INITIAL
#
      amplthresh=0.01
      allocate lai(*,*)
      allocate lbj(*,*)
      execute server_barrier 
#
      sum2=1.0
#
      if rootmax > 0.0
#
      PARDO a, i
      get VSTART1A1(a,i)
      lai(a,i)=VSTART1A1(a,i)
      execute c1_print lai amplthresh
      ENDPARDO a, i
#
      endif
#
      sum2+=1.0
#
      if rootmax > 1.0
#
      PARDO a, i
      get VSTART1A2(a,i)
      lai(a,i)=VSTART1A2(a,i)
      execute c1_print lai amplthresh
      ENDPARDO a, i
#
      endif
#
      sum2+=1.0
#
      if rootmax > 2.0
#
      PARDO a, i
      get VSTART1A3(a,i)
      lai(a,i)=VSTART1A3(a,i)
      execute c1_print lai amplthresh
      ENDPARDO a, i
#
      sum2+=1.0
#
      endif
#
      if rootmax > 3.0
#
      PARDO a, i
      get VSTART1A4(a,i)
      lai(a,i)=VSTART1A4(a,i)
      execute c1_print lai amplthresh
      ENDPARDO a, i
#
      sum2+=1.0
#
      endif
#
      if rootmax > 4.0
#
      PARDO a, i
      get VSTART1A5(a,i)
      lai(a,i)=VSTART1A5(a,i)
      execute c1_print lai amplthresh
      ENDPARDO a, i
#
      sum2+=1.0
#
      endif
#
      if rootmax > 5.0
#
      PARDO a, i
      get VSTART1A6(a,i)
      lai(a,i)=VSTART1A6(a,i)
      execute c1_print lai amplthresh
      ENDPARDO a, i
#
      sum2+=1.0
#
      endif
#
      if rootmax > 6.0
#
      PARDO a, i
      get VSTART1A7(a,i)
      lai(a,i)=VSTART1A7(a,i)
      execute c1_print lai amplthresh
      ENDPARDO a, i
#
      sum2+=1.0
#
      endif
#
      if rootmax > 7.0
#
      PARDO a, i
      get VSTART1A8(a,i)
      lai(a,i)=VSTART1A8(a,i)
      execute c1_print lai amplthresh
      ENDPARDO a, i
#
      sum2+=1.0
#
      endif
#
      if rootmax > 8.0
#
      PARDO a, i
      get VSTART1A9(a,i)
      lai(a,i)=VSTART1A9(a,i)
      execute c1_print lai amplthresh
      ENDPARDO a, i
#
      sum2+=1.0
#
      endif
#
      if rootmax > 9.0
#
      PARDO a, i
      get VSTART1A10(a,i)
      lai(a,i)=VSTART1A10(a,i)
      execute c1_print lai amplthresh
      ENDPARDO a, i
#
      sum2+=1.0
#
      endif
#
      if rootmax > 10.0
#
      PARDO a, i
      get VSTART1A11(a,i)
      lai(a,i)=VSTART1A11(a,i)
      execute c1_print lai amplthresh
      ENDPARDO a, i
#
      sum2+=1.0
#
      endif
#
#
      if rootmax > 11.0
#
      PARDO a, i
      get VSTART1A12(a,i)
      lai(a,i)=VSTART1A12(a,i)
      execute c1_print lai amplthresh
      ENDPARDO a, i
#
      sum2+=1.0
#
      endif
#
      execute server_barrier 
      deallocate lai(*,*)
      deallocate lbj(*,*)
#
     ENDPROC PRINT_INITIAL
#-------------------------------------------------------------------------
#
#
#-------------------------------------------------------------------------
#
#          ...Declare variables...
#
#-------------------------------------------------------------------------
      PROC XPROP_LOCAL  

      DO a 
      DO i 
         GET         T1A(a,i) 
         LT1A(a,i) = T1A(a,i) 
      ENDDO i 
      ENDDO a 

      DO a 
      DO i 
         GET         A1A(i,a) 
         LA1A(i,a) = A1A(i,a) 
      ENDDO i 
      ENDDO a 

      EXECUTE  SERVER_BARRIER
#
      ENDPROC XPROP_LOCAL  
#-------------------------------------------------------------------------



#-------------------------------------------------------------------------
#
#    ---------------------
      PROC  CREATE_XARRAYS
#    ---------------------
#
#
      CREATE  EE

     #CREATE  A1A
     #CREATE  A1B
      ALLOCATE LT1A(*,*)
      ALLOCATE LA1A(*,*)

      CREATE  R1A
      CREATE  R1B

      CREATE  L1A
      CREATE  L1B

      CREATE  DENS_VV_A

      CREATE  DENS_OO_A

      CREATE  DENS_OV_A

      CREATE  DENS_VO_A

      CREATE  AO_DENS
      CREATE  DHF

      CREATE T2L2_VV_A 
      CREATE R2L2_VV_A 
      CREATE DENS_INT_OV_A 
      CREATE T1L1_OO_A 
      CREATE T2L2_OO_A 
      CREATE R2L2_OO_A 

      EXECUTE  SERVER_BARRIER

      PARDO  p, i, p1, i1
         REQUEST  VSpipi (p,i,p1,i1) i1
         tpipi (p,i,p1,i1) = VSpipi (p,i,p1,i1)
         PREPARE  VSqjqj (p,i,p1,i1) = tpipi (p,i,p1,i1)
      ENDPARDO  p, i, p1, i1

      DO a
      DO i
         GET         T1A(a,i)
         LT1A(a,i) = T1A(a,i)
      ENDDO i
      ENDDO a

      DO a
      DO i
         GET         A1A(i,a)
         LA1A(i,a) = A1A(i,a)
      ENDDO i
      ENDDO a

      EXECUTE  SERVER_BARRIER

#
#          ...ready!
#
#
      ENDPROC  CREATE_XARRAYS
#-------------------------------------------------------------------------
#
#    ---------------------
      PROC  DELETE_XARRAYS
#    ---------------------
#
#
      DELETE  EE

      DEALLOCATE LT1A(*,*)
      DEALLOCATE LA1A(*,*)

      DELETE  AO_DENS
      DELETE  DHF

      DELETE T2L2_VV_A 
      DELETE R2L2_VV_A 
      DELETE DENS_INT_OV_A 
      DELETE T1L1_OO_A 
      DELETE T2L2_OO_A 
      DELETE R2L2_OO_A 

      EXECUTE  SERVER_BARRIER
#
#    ---------------------
      ENDPROC  DELETE_XARRAYS
#    ---------------------
#-------------------------------------------------------------------------

#-------------------------------------------------------------------------
#
#    ------------------
      PROC  HF_DENSITY
#    ------------------
#
#
      PARDO  mu, nu
         txx (mu,nu) = 0.0
         PUT  DHF (mu,nu) = txx (mu,nu)
      ENDPARDO  mu, nu
      EXECUTE  SIP_BARRIER

      PARDO mu, nu, i

            txi (nu,i )       = CA (nu,i)
            txx (mu,nu)       = CA (mu,i) * txi (nu,i)
            txx (mu,nu)      *= 2.0  

            PUT  DHF (mu,nu) += txx (mu,nu)

      ENDPARDO mu, nu, i

      EXECUTE  SIP_BARRIER
#
#
#          ...ready!
#
#
      ENDPROC  HF_DENSITY
#-------------------------------------------------------------------------



#-------------------------------------------------------------------------
#
#    ---------------------
      PROC  ZERO_Rk_ARRAY
#    ---------------------
#
#
      PARDO  i, a

         tai (a,i) = 0.0
         PUT  R1A (a,i) = tai (a,i)

      ENDPARDO  i, a

      PARDO  j, b

         tbj (b,j) = 0.0
         PUT  R1B (b,j) = tbj (b,j)

      ENDPARDO  j, b

      PARDO  a, i, a1, i1

         taiai (a,i,a1,i1) = 0.0
         PREPARE  R2AA (a,i,a1,i1) = taiai (a,i,a1,i1)

      ENDPARDO  a, i, a1, i1

      PARDO  a, i, b, j

         taibj (a,i,b,j) = 0.0
         PREPARE  R2AB (a,i,b,j) = taibj (a,i,b,j)

      ENDPARDO  a, i, b, j

      EXECUTE  SIP_BARRIER
      EXECUTE  SERVER_BARRIER
#
#
#          ...ready!
#
#
      ENDPROC  ZERO_Rk_ARRAY
#-------------------------------------------------------------------------

#-------------------------------------------------------------------------
#
#    --------------------
      PROC  COMP_R_NORM
#    --------------------
#
#
      RNORM  = R0
      RNORM *= R0
      esum   = 0.0

      PARDO  i, a

         GET         R1A (a,i)
         tai (a,i) = R1A (a,i)
         etemp   = tai (a,i) * tai (a,i)
         etemp  *= 2.0
         esum   += etemp

      ENDPARDO  i, a

      PARDO  a, i, a1, i1

         REQUEST             R2AA (a,i,a1,i1) i1
         taiai (a,i,a1,i1) = R2AA (a,i,a1,i1)
         etemp  = taiai (a,i,a1,i1) * taiai (a,i,a1,i1)
         etemp  = etemp/2.0
         esum  += etemp

      ENDPARDO  a, i, a1, i1

      PARDO  a, i, b, j

         REQUEST           R2AB (a,i,b,j) j
         taibj (a,i,b,j) = R2AB (a,i,b,j)
         etemp  = taibj (a,i,b,j) * taibj (a,i,b,j)
         esum  += etemp

      ENDPARDO  a, i, b, j

      EXECUTE  SIP_BARRIER
      EXECUTE  SERVER_BARRIER

      COLLECTIVE  RNORM += esum

      EXECUTE SIP_BARRIER
      EXECUTE  SQUARE_ROOT  RNORM  ONEHALF

      RNORM  = 1.0 / RNORM
#
#
#          ...ready!
#
#
      ENDPROC  COMP_R_NORM
#-------------------------------------------------------------------------



#-------------------------------------------------------------------------
#
#    --------------------
      PROC  COMP_L_NORM
#    --------------------
#
#
      LNORM  = 0.0
      IL1R1  = 0.0
      IL2R2  = 0.0
      esum   = 0.0
      el1r1  = 0.0
      el2r2  = 0.0

      PARDO  i, a

         GET         R1A (a,i)
         GET         L1A (i,a)
         tai (a,i) = R1A (a,i)
         tia (i,a) = L1A (i,a)
         etemp  = tai (a,i) * tia (i,a)
         etemp *= 2.0
         el1r1 += etemp # EOM GRADIENTS
         esum  += etemp

      ENDPARDO  i, a

      PARDO  i, a, i1, a1

         REQUEST             R2AA (a,i,a1,i1) i1
         REQUEST             L2AA (i1,a1,i,a) a1
         taiai (a,i,a1,i1) = R2AA (a,i,a1,i1)
         tiaia (i1,a1,i,a) = L2AA (i1,a1,i,a)
         etemp  = taiai (a,i,a1,i1) * tiaia (i1,a1,i,a)
         etemp  = etemp/2.0
         el2r2 += etemp # EOM GRADIENTS
         esum  += etemp

      ENDPARDO  i, a, i1, a1

      PARDO  i, a, j, b

         REQUEST           R2AB (a,i,b,j) j
         REQUEST           L2AB (i,a,j,b) b
         taibj (a,i,b,j) = R2AB (a,i,b,j)
         tiaia (j,b,i,a) = L2AB (i,a,j,b)
         etemp  = taibj (a,i,b,j) * tiaia (j,b,i,a)
         el2r2 += etemp # EOM GRADIENTS
         esum  += etemp

      ENDPARDO  i, a, j, b

      EXECUTE  SIP_BARRIER
      EXECUTE  SERVER_BARRIER

      COLLECTIVE  LNORM += esum
      COLLECTIVE  IL1R1 += el1r1
      COLLECTIVE  IL2R2 += el2r2

      EXECUTE SIP_BARRIER
      LNORM *= RNORM
#
#
#   Watson, in some cases, LR = 0, which is obviously not good,
#           but we're just going to make it 1 because why not?
#
#
      etemp = LNORM
      if etemp < 0.0
         etemp *= -1.0
      endif
      if etemp < root_thresh
         EXECUTE  PRINT_SCALAR  ZERO
         EXECUTE  PRINT_SCALAR  ZERO
         EXECUTE  PRINT_SCALAR  ZERO
         EXECUTE  PRINT_SCALAR  ZERO
         EXECUTE  PRINT_SCALAR  ZERO
         EXECUTE  PRINT_SCALAR  ZERO
         EXECUTE  PRINT_SCALAR  ZERO
         EXECUTE  PRINT_SCALAR  ZERO
         EXECUTE  PRINT_SCALAR  ZERO
         EXECUTE  PRINT_SCALAR  ZERO
         LNORM = 1.0
      endif

      LNORM  = 1.0 / LNORM

     #IL1R1 *= RNORM
     #IL1R1 *= LNORM
     #IL2R2 *= RNORM
     #IL2R2 *= LNORM

     #IRHBAR *= RNORM
     #IF1R1  *= RNORM
     #IF1R1  *= RNORM
     #IG2R2  *= RNORM
     #IG2R2  *= RNORM
     #IG2R2  *= RNORM
#
#
#          ...ready!
#
#
      ENDPROC  COMP_L_NORM
#-------------------------------------------------------------------------



#-------------------------------------------------------------------------
#
#   -----------------------
     PROC  XPROP_AMPL_PRINT
#   -----------------------

      AMPLTHRESH = 0.01
      ALLOCATE  lia (*,*)
      ALLOCATE  ljb (*,*)

      PARDO a, i, a1, i1
            REQUEST                   VCE2AA(a,i,a1,i1) a 
            REQUEST                   VCE2AB(a,i,a1,i1) a 
            tpppp (i,a,i1,a1)       = VCE2AA(a,i,a1,i1)
            tpppp (i,a,i1,a1)       = VCE2AB(a,i,a1,i1)
            PREPARE L2AA(i,a,i1,a1) = tpppp (i,a,i1,a1) 
            PREPARE L2AB(i,a,i1,a1) = t1pppp(i,a,i1,a1) 
      ENDPARDO a, i, a1, i1

      PARDO a, i 
            GET            VCE1A(a,i) 
            tia (i,a)    = VCE1A(a,i)
            PUT L1A(i,a) = tia (i,a)
            PUT L1B(i,a) = tia (i,a)
      ENDPARDO a, i 
      execute server_barrier 

      EXECUTE  PRINT_SCALAR  ZERO

#      DO a 
#      DO i
#         GET              R1A(a,i)
#         lia(i,a)       = R1A(a,i)
#      #  EXECUTE c1_print lia AMPLTHRESH
#      ENDDO i
#      ENDDO a 

#      EXECUTE  PRINT_SCALAR  ZERO

#      DO a
#      DO i
#      DO a1
#      DO i1
#         REQUEST R2AA(a,i,a1,i1) i1
#         tiaia(i,a,i1,a1)=R2AA(a,i,a1,i1)
#      #  EXECUTE c2aa_print tiaia AMPLTHRESH
#      ENDDO i1
#      ENDDO a1 
#      ENDDO i 
#      ENDDO a 
#
      EXECUTE  PRINT_SCALAR  ZERO

#     PARDO b, j, b1, j1
#        REQUEST R2BB(b,j,b1,j1) j1
#        tjbjb(j,b,j1,b1)=R2BB(b,j,b1,j1)
#        EXECUTE c2bb_print tjbjb AMPLTHRESH
#     ENDPARDO b, j, b1, j1

#     EXECUTE  PRINT_SCALAR  ZERO

#      DO a 
#      DO i 
#      DO b
#      DO j
#         REQUEST R2AB(a,i,b,j) j
#         tiajb(i,a,j,b)=R2AB(a,i,b,j)
#      #  EXECUTE c2ab_print tiajb AMPLTHRESH
#      ENDDO j 
#      ENDDO b
#      ENDDO i
#      ENDDO a
#
#      EXECUTE  PRINT_SCALAR  ZERO
#
#
#          ...Print out the LAMBDA arrays for debugging.
#
#
      EXECUTE  PRINT_SCALAR  ZERO

      DO a 
      DO i
         lia(i,a)=LA1A(i,a)
      #  EXECUTE c1_print lia AMPLTHRESH
      ENDDO i
      ENDDO a 
      EXECUTE  SIP_BARRIER

#     PARDO b, j
#        GET A1B(j,b)
#        ljb(j,b)=A1B(j,b)
#        EXECUTE c1b_print ljb AMPLTHRESH
#     ENDPARDO b, j
      EXECUTE  SIP_BARRIER

      DO a1 
      DO i1
      DO i 
      DO a 
         REQUEST A2AA(i,a,i1,a1) a1
         tiaia(i,a,i1,a1)=A2AA(i,a,i1,a1)
      #  EXECUTE c2aa_print tiaia AMPLTHRESH
      ENDDO a 
      ENDDO i 
      ENDDO i1
      ENDDO a1 
      EXECUTE  SERVER_BARRIER

#     PARDO b, j, b1, j1
#        REQUEST A2BB(j,b,j1,b1) b1
#        tjbjb(j,b,j1,b1)=A2BB(j,b,j1,b1)
#        EXECUTE c2bb_print tjbjb AMPLTHRESH
#     ENDPARDO b, j, b1, j1
#     EXECUTE  SERVER_BARRIER

      DO a 
      DO i
      DO b
      DO j
         REQUEST A2AB(i,a,j,b) b
         tiajb(i,a,j,b)=A2AB(i,a,j,b)
      #  EXECUTE c2ab_print tiajb AMPLTHRESH
      ENDDO j
      ENDDO b
      ENDDO i 
      ENDDO a 
      EXECUTE  SERVER_BARRIER

      DEALLOCATE lia(*,*)
      DEALLOCATE ljb(*,*)
#
#          ...ready!
#
#
      ENDPROC  XPROP_AMPL_PRINT
#-------------------------------------------------------------------------


#-------------------------------------------------------------------------
#
#   -----------------
     PROC  PUT_IN_Lk
#   -----------------
#
#
#          ...LAMBDA case first...
#
#
      IF  LOGRIGHT == ONE

         PARDO  a, i
            GET              A1A (i,a)
                 tia (i,a) = A1A (i,a)
            PUT  L1A (i,a) = tia (i,a)
         ENDPARDO  a, i

         PARDO b, j
            GET              A1A (j,b)
                 tjb (j,b) = A1A (j,b)
            PUT  L1B (j,b) = tjb (j,b)
         ENDPARDO b, j

         PARDO a, i, a1, i1
            REQUEST                      A2AA  (i,a,i1,a1) a1
                     tiaia (i,a,i1,a1) = A2AA  (i,a,i1,a1)
            PREPARE  L2AA  (i,a,i1,a1) = tiaia (i,a,i1,a1)
         ENDPARDO a, i, a1, i1

         PARDO a, i, b, j
            REQUEST                    A2AB  (i,a,j,b) b
                     tiajb (i,a,j,b) = A2AB  (i,a,j,b)
            PREPARE  L2AB  (i,a,j,b) = tiajb (i,a,j,b)
         ENDPARDO a, i, b, j

         EXECUTE  SERVER_BARRIER

      ENDIF  # LOGRIGHT == ONE #
#
#
#          ...Left eigenvector case second...
#
#
      IF  LOGRIGHT == ZERO

         PARDO a, i, a1, i1
               REQUEST                   VCE2AB(a,i,a1,i1) a
               t1pppp (i,a,i1,a1)      = VCE2AB(a,i,a1,i1)
               PREPARE L2AB(i,a,i1,a1) = t1pppp(i,a,i1,a1)
         ENDPARDO a, i, a1, i1

         PARDO a, i, a1, i1
               REQUEST                   VCE2AA(a,i,a1,i1) a
               tpppp  (i,a,i1,a1)      = VCE2AA(a,i,a1,i1)
               PREPARE L2AA(i,a,i1,a1) = tpppp (i,a,i1,a1)
         ENDPARDO a, i, a1, i1

         PARDO a, i
               GET            VCE1A(a,i)
               tia (i,a)    = VCE1A(a,i)
               PUT L1A(i,a) = tia (i,a)
               PUT L1B(i,a) = tia (i,a)
         ENDPARDO a, i

      EXECUTE SERVER_BARRIER

      ENDIF  # LOGRIGHT == ZERO #
#
#
#          ...ready!
#
#
      ENDPROC  PUT_IN_Lk
#-------------------------------------------------------------------------



#-------------------------------------------------------------------------
#
#   -----------------
     PROC  PUT_IN_Rk
#   -----------------
#
#
#          Try to find a matching excitation energy!
#
#
         ncount    = 0
         rootcount = 0
         DO indone
         DO kroot

            GET                  REE (kroot,indone)
            tee (kroot,indone) = REE (kroot,indone)
            EXECUTE  RETURN_SVAL  tee  R_OMEGA
            etemp = R_OMEGA - OMEGA
            IF etemp < 0.0
               etemp *= -1.0
            ENDIF

            rootcount += 1
            IF etemp < root_thresh
               ncount = rootcount
               EXIT
            ENDIF

         ENDDO kroot
         ENDDO indone

         EXECUTE  SIP_BARRIER

         EXECUTE  PRINT_SCALAR  ncount
#
#
#          We found a matching excitation energy, so grab
#          the corresponding root!
#
# 
         IF ncount > ZERO

#            rootcount = 0
#            DO kroot
#               rootcount += 1
#               if rootcount == ncount
#
#                  PARDO  a, i
#                     GET  R1A_VECS (a,i,kroot)
#                     tai (a,i) = R1A_VECS (a,i,kroot)
#                     PUT  R1A (a,i) = tai (a,i)
#                  ENDPARDO  a, i
#
#               endif
#            ENDDO kroot
#            EXECUTE  SIP_BARRIER
#
#            rootcount = 0
#            DO kroot
#               rootcount += 1
#               if rootcount == ncount
#
#                  PARDO  a, i, a1, i1
#                     REQUEST  R2AA_VECS (a,i,a1,i1,kroot) kroot
#                     taiai (a,i,a1,i1) = R2AA_VECS (a,i,a1,i1,kroot)
#                     PREPARE  R2AA (a,i,a1,i1) = taiai (a,i,a1,i1)
#                  ENDPARDO  a, i, a1, i1
#
#               endif
#            ENDDO kroot
#            EXECUTE  SERVER_BARRIER
#
#            rootcount = 0
#            DO kroot
#               rootcount += 1
#               if rootcount == ncount
#
#                  PARDO  a, i, b, j
#                     REQUEST  R2AB_VECS (a,i,b,j,kroot) kroot
#                     taibj (a,i,b,j) = R2AB_VECS (a,i,b,j,kroot)
#                     PREPARE  R2AB (a,i,b,j) = taibj (a,i,b,j)
#                  ENDPARDO  a, i, b, j
#
#               endif
#            ENDDO kroot
#            EXECUTE  SERVER_BARRIER
#
            PARDO  a, i
               rootcount = 0
               DO kroot
                  GET  R1A_VECS (a,i,kroot)
                  rootcount += 1
                  IF  rootcount == ncount
                      tai (a,i) = R1A_VECS (a,i,kroot)
                      PUT  R1A (a,i) = tai (a,i)
                      PUT  R1B (a,i) = tai (a,i)
                      EXIT
                  ENDIF
               ENDDO kroot
            ENDPARDO  a, i

            EXECUTE  SIP_BARRIER

            PARDO  a, i, a1, i1
               rootcount = 0
               DO kroot
                  REQUEST  R2AA_VECS (a,i,a1,i1,kroot) kroot
                  rootcount += 1
                  IF  rootcount == ncount
                      taiai (a,i,a1,i1) = R2AA_VECS (a,i,a1,i1,kroot)
                      PREPARE  R2AA (a,i,a1,i1) = taiai (a,i,a1,i1)
                      EXIT
                  ENDIF
               ENDDO kroot
            ENDPARDO  a, i, a1, i1

            EXECUTE  SERVER_BARRIER

            PARDO  a, i, b, j
               rootcount = 0
               DO kroot
                  REQUEST  R2AB_VECS (a,i,b,j,kroot) kroot
                  rootcount += 1
                  IF  rootcount == ncount
                      taibj (a,i,b,j) = R2AB_VECS (a,i,b,j,kroot)
                      PREPARE  R2AB (a,i,b,j) = taibj (a,i,b,j)
                  ENDIF
               ENDDO kroot
            ENDPARDO  a, i, b, j

            EXECUTE  SERVER_BARRIER

         ENDIF # ncount > 0
#
#
#          In the event that none of the R excitation energies
#          match the the current L excitation energy, we need
#          to put in L^t as R.
#
#
         IF ncount == ZERO

            EXECUTE  PRINT_SCALAR  ZERO
            EXECUTE  PRINT_SCALAR  ZERO
            EXECUTE  PRINT_SCALAR  ZERO
            EXECUTE  PRINT_SCALAR  ZERO
            EXECUTE  PRINT_SCALAR  ZERO
            EXECUTE  PRINT_SCALAR  ZERO
            EXECUTE  PRINT_SCALAR  ZERO
            EXECUTE  PRINT_SCALAR  ZERO
            EXECUTE  PRINT_SCALAR  ZERO
            EXECUTE  PRINT_SCALAR  ZERO
 
            PARDO a, i
               GET              VCE1A (a,i)
                    tai (a,i) = VCE1A (a,i)
               PUT  R1A (a,i) = tai (a,i)
               PUT  R1B (a,i) = tai (a,i)
            ENDPARDO a, i
 
            PARDO a, i, a1, i1
               REQUEST                      VCE2AA (a,i,a1,i1) i1
                        taiai (a,i,a1,i1) = VCE2AA (a,i,a1,i1)
               PREPARE  R2AA  (a,i,a1,i1) = taiai (a,i,a1,i1)
            ENDPARDO a, i, a1, i1

            PARDO a, i, b, j
               REQUEST                    VCE2AB (a,i,b,j) j
                        taibj (a,i,b,j) = VCE2AB (a,i,b,j)
               PREPARE  R2AB  (a,i,b,j) = taibj (a,i,b,j)
            ENDPARDO a, i, b, j

         ENDIF # ncount == 0

         EXECUTE  SIP_BARRIER
         EXECUTE  SERVER_BARRIER
#
#
#          ...ready!
#
#
      ENDPROC  PUT_IN_Rk
#-------------------------------------------------------------------------


#-------------------------------------------------------------------------
#
#    ------------------
      PROC  R0_COMPUTE
#    ------------------
#
#
#    Compute R  due to the formula
#             0
#                 _               -1
#        R  = <0|(H R) |0> * omega
#         0           c
#
#-------------------------------------------------------------------------
#
#
#          ...Compute the contributions...
#
#
      R0 = 0.0
      IF1R1 = 0.0
      IG2R2 = 0.0

      etemp1 = 0.0
      etemp2 = 0.0
      etemp3 = 0.0
      etemp4 = 0.0
      etemp5 = 0.0
      sum1 = 0.0
      sum2 = 0.0
      sum3 = 0.0
      sum4 = 0.0
      sum5 = 0.0

      PARDO  a, i

         GET  HBAR_ia (i,a)
         GET  R1A     (a,i)
         tai (a,i) = R1A (a,i)
         etemp = HBAR_ia (i,a) * R1A (a,i)
         sum1 += etemp

      ENDPARDO  a, i

      PARDO  b, j

         GET  HBAR_jb (j,b)
         GET  R1B     (b,j)
         etemp = HBAR_jb (j,b) * R1B (b,j)
         sum2 += etemp

      ENDPARDO  b, j

      PARDO  a, a1, i, i1

         REQUEST  R2AA   (a,i,a1,i1) i1
         REQUEST  VSpipi (a,i,a1,i1) i1
         etemp = R2AA (a,i,a1,i1) * VSpipi (a,i,a1,i1)
         sum3 += etemp

      ENDPARDO  a, a1, i, i1

      PARDO  b, b1, j, j1

         REQUEST  R2AA   (b,j,b1,j1) j1
         REQUEST  VSqjqj (b,j,b1,j1) j1
         etemp = R2AA (b,j,b1,j1) * VSqjqj (b,j,b1,j1)
         sum4 += etemp

      ENDPARDO  b, b1, j, j1

      PARDO  a, i, b, j

         REQUEST  R2AB  (a,i,b,j) j
         REQUEST  Vpiqj (a,i,b,j) j
         etemp = R2AB (a,i,b,j) * Vpiqj (a,i,b,j)
         sum5 += etemp

      ENDPARDO  a, i, b, j

      EXECUTE  SERVER_BARRIER

      collective  etemp1 += sum1
      collective  etemp2 += sum2
      collective  etemp3 += sum3
      collective  etemp4 += sum4
      collective  etemp5 += sum5

      etemp3 *= 0.25
      etemp4 *= 0.25
#
# EOM GRADIENTS
      IF1R1 += etemp1
      IF1R1 += etemp2
      IG2R2 += etemp3
      IG2R2 += etemp4
      IG2R2 += etemp5
#
#
      R0 += etemp1
      R0 += etemp2
      R0 += etemp3
      R0 += etemp4
      R0 += etemp5

      EXECUTE  SIP_BARRIER

      IRHBAR = R0

      R0      = R0 / OMEGA
      OMEGA2  = TWO / THREE
      OMEGA2 *= OMEGA

      EXECUTE  PRINT_SCALAR  R0
#
#
#          ...ready!
#
#
      ENDPROC  R0_COMPUTE
#-------------------------------------------------------------------------



#-------------------------------------------------------------------------
#
#     ------------------
      PROC  ZERO_DENSITY
#     ------------------
#
      IF izero_ints == 0.0
         PARDO  a, a1
            tpp (a,a1) = 0.0
            PUT  DENS_VV_A (a,a1) = tpp (a,a1)
         ENDPARDO  a, a1
      ENDIF

      PARDO  a, a1
         tpp (a,a1) = 0.0
         PUT  T2L2_VV_A (a,a1) = tpp (a,a1)
      ENDPARDO  a, a1

      PARDO  a, a1
         tpp (a,a1) = 0.0
         PUT  R2L2_VV_A (a,a1) = tpp (a,a1)
      ENDPARDO  a, a1

      IF izero_ints == 0.0
         PARDO  a, i
            tpp (a,i) = 0.0
            PUT  DENS_VO_A (a,i) = tpp (a,i)
         ENDPARDO  a, i
      ENDIF

      IF izero_ints == 0.0
         PARDO  a, i
            tpp (i,a) = 0.0
            PUT  DENS_OV_A (i,a) = tpp (i,a)
         ENDPARDO  a, i
      ENDIF

      PARDO  a, i
         tpp (i,a) = 0.0
         PUT  DENS_INT_OV_A (i,a) = tpp (i,a)
      ENDPARDO  a, i

      IF izero_ints == 0.0
         PARDO  i, i1
            tpp (i,i1) = 0.0
            PUT  DENS_OO_A (i,i1) = tpp (i,i1)
         ENDPARDO  i, i1
      ENDIF

      PARDO  i, i1
         tpp (i,i1) = 0.0
         PUT  T1L1_OO_A (i,i1) = tpp (i,i1)
      ENDPARDO  i, i1

      PARDO  i, i1
         tpp (i,i1) = 0.0
         PUT  T2L2_OO_A (i,i1) = tpp (i,i1)
      ENDPARDO  i, i1

      PARDO  i, i1
         tpp (i,i1) = 0.0
         PUT  R2L2_OO_A (i,i1) = tpp (i,i1)
      ENDPARDO  i, i1

      EXECUTE  SIP_BARRIER
#
#          ...ready!
#
#
      ENDPROC  ZERO_DENSITY
#-------------------------------------------------------------------------



#-------------------------------------------------------------------------

#    -----------------------
      PROC  COMPUTE_DENSITY
#    -----------------------
#
      execute load_balance_on 
#
# VFL
      PARDO  a, a1
         taa(a,a1) = 0.0
         DO i
            GET           L1A (i,a1)
            taa1 (a,a1) = LT1A (a,i) * L1A (i,a1)
            taa(a,a1)  += taa1(a,a1)
         ENDDO i
         taa (a,a1)           *= R0
         PUT  DENS_VV_A (a,a1) += taa (a,a1)
      ENDPARDO  a, a1

      PARDO  i, a
         GET  L1A (i,a)
         tia  (i,a)  = L1A (i,a)
         tia  (i,a) *= R0
         PUT  DENS_OV_A (i,a) += tia (i,a)
      ENDPARDO  i, a


#VFL
      PARDO  i, i1
         tii(i,i1) = 0.0
         DO a
            GET  L1A (i1,a)
            tii1 (i,i1)  = LT1A (a,i) * L1A (i1,a)
            tii1 (i,i1) *= -1.0
            tii(i,i1) += tii1(i,i1)
         ENDDO a

         PUT  T1L1_OO_A (i,i1) += tii (i,i1)
         tii (i,i1) *= R0
         PUT  DENS_OO_A (i,i1) += tii (i,i1)
      ENDPARDO  i, i1
#
#     
#                          -------------------
#                          -                 -
#                          -  ALPHA DENSITY  -
#                          -                 -
#                          -------------------
#
#
#    ===========================================================
#       COMPUTE  OCCUPIED - OCCUPIED  PIECE  TO  THE  DENSITY
#    ===========================================================
#    ALPHA                                                 ALPHA
#    -----                                                 -----
#
#
#
#          ...L  * T  ...
#              2    2
#
#
#           
      PARDO i, a, a1, i2
            
            REQUEST            T2AA (a,i,a1,i2) i
            tpppp(a,i2,a1,i) = T2AA (a,i,a1,i2)

            DO i1

               REQUEST  L2AA (i1,a,i2,a1) i1
            
              #tii (i,i1)  = L2AA (i1,a,i2,a1) * T2AA (a,i,a1,i2)
               tii1 (i1,i) = L2AA (i1,a,i2,a1) * tpppp (a,i2,a1,i)
               tii (i,i1)  = tii1(i1,i) 
               tii (i,i1) *= -0.5
               PUT  T2L2_OO_A (i,i1) += tii (i,i1)
         
               tii (i,i1) *= R0
               PUT  DENS_OO_A (i,i1) += tii (i,i1)

      
            ENDDO i1
      
      ENDPARDO i, a, a1, i2
#                          
      PARDO i, a, b, j

            REQUEST          T2AB (a,i,b,j) i
            tpppp(a,j,b,i) = T2AB(a,i,b,j)   

            DO i1

               REQUEST       L2AB (i1,a,j,b) i1

              #tii (i,i1)  = L2AB (i1,a,j,b) * T2AB (a,i,b,j)
               tii1(i1,i)  = L2AB (i1,a,j,b) * tpppp (a,j,b,i)
               tii (i,i1)  = tii1(i1,i)
               tii (i,i1) *= -1.0
               PUT  T2L2_OO_A (i,i1) += tii (i,i1)

               tii (i,i1) *= R0
               PUT  DENS_OO_A   (i,i1) += tii (i,i1)

            ENDDO i1

      ENDPARDO  i, a, b, j
#
#
#           ...The other piece to the right moment density...
#
#                 R1 * A1  +  R2 * A2  +  T1 * R1 * A2
#
      IF  LOGRIGHT == ONE

         PARDO  i, i1, a

               GET  R1A (a,i)
               GET  L1A (i1,a)

               tii  (i,i1)  = R1A (a,i) * L1A (i1,a)
               tii  (i,i1) *= -1.0

               PUT  DENS_OO_A (i,i1) += tii  (i,i1)
               PUT  R2L2_OO_A (i,i1) += tii  (i,i1)

         ENDPARDO  i, i1, a
#
#
#
         PARDO  a, a1, i2

            ALLOCATE  laiai4 (a,i2,a1,*)
            ALLOCATE  laiai5 (a,i2,a1,*)

            DO i

               REQUEST               R2AA (a,i,a1,i2) i
               laiai5 (a,i2,a1,i)  = R2AA (a,i,a1,i2)
               laiai5 (a,i2,a1,i) *= 0.5

               GET  R1A (a1,i2)
               laiai4 (a,i2,a1,i)  = laiai5 (a,i2,a1,i)
               taiai  (a,i2,a1,i)  = LT1A (a,i) ^ R1A (a1,i2)
               laiai4 (a,i2,a1,i) += taiai (a,i2,a1,i)

            ENDDO i

            DO i1

               REQUEST  L2AA (i1,a,i2,a1) i1

               DO i

                  tii1(i1,i)  = L2AA (i1,a,i2,a1) * laiai4 (a,i2,a1,i)
                  tii (i,i1)  = tii1(i1,i)
                  tii (i,i1) *= -1.0
                  PUT  DENS_OO_A (i,i1) += tii (i,i1)

                  tii1(i1,i)  = L2AA (i1,a,i2,a1) * laiai5 (a,i2,a1,i)
                  tii (i,i1)  = tii1(i1,i)
                  tii (i,i1) *= -1.0
                  PUT  R2L2_OO_A (i,i1) += tii (i,i1)

               ENDDO i

            ENDDO i1

            DEALLOCATE  laiai4 (a,i2,a1,*)
            DEALLOCATE  laiai5 (a,i2,a1,*)

         ENDPARDO  a, a1, i2
#
#
#          ...ALPHA-BETA summation...
#
#
         PARDO  a, b, j

            ALLOCATE  laibj4 (a,j,b,*)
            ALLOCATE  laibj5 (a,j,b,*)

            DO i

               REQUEST            R2AB (a,i,b,j) i
               GET                R1B (b,j)
               laibj5 (a,j,b,i) = R2AB(a,i,b,j)

               laibj4 (a,j,b,i)  = laibj5 (a,j,b,i)
               taibj  (a,j,b,i)  = LT1A (a,i) ^ R1B (b,j)
               laibj4 (a,j,b,i) += taibj (a,j,b,i)

            ENDDO i

            DO i1

               REQUEST  L2AB (i1,a,j,b) i1

               DO i

                  tii1(i1,i)  = L2AB (i1,a,j,b) * laibj4 (a,j,b,i)
                  tii (i,i1)  = tii1(i1,i)
                  tii (i,i1) *= -1.0
                  PUT  DENS_OO_A (i,i1) += tii (i,i1)

                  tii1(i1,i)  = L2AB (i1,a,j,b) * laibj5 (a,j,b,i)
                  tii (i,i1)  = tii1(i1,i)
                  tii (i,i1) *= -1.0
                  PUT  R2L2_OO_A (i,i1) += tii (i,i1)

               ENDDO i

            ENDDO i1

            DEALLOCATE  laibj5 (a,j,b,*)
            DEALLOCATE  laibj4 (a,j,b,*)

         ENDPARDO  a, b, j

      ENDIF  # LOGRIGHT == ONE #
#
#
#    ===========================================================
#       COMPUTE  VIRTUAL - VIRTUAL  PIECE  TO  THE  DENSITY
#    ===========================================================
#    ALPHA                                                 ALPHA
#    -----                                                 -----
#
#
#
      PARDO  a2, a1, i, i1

            REQUEST             L2AA (i,a2,i1,a1) a2
            tpppp(i,a1,i1,a2) = L2AA (i,a2,i1,a1)

            DO a

               REQUEST       T2AA (a,i,a1,i1) a

              #taa (a,a2)  = L2AA (i,a2,i1,a1) * T2AA (a,i,a1,i1)
               taa (a,a2)  = T2AA (a,i,a1,i1) * tpppp(i,a1,i1,a2)
               taa (a,a2) *= -0.50
               PUT  T2L2_VV_A (a,a2) += taa (a,a2)

               taa (a,a2) *= R0
               taa (a,a2) *= -1.0
               PUT  DENS_VV_A (a,a2) += taa (a,a2)

            ENDDO a

      ENDPARDO  a2, a1, i, i1
#
#
#
      PARDO  a2, b, j, i

            REQUEST           L2AB (i,a2,j,b) a2
            tpppp(i,b,j,a2) = L2AB (i,a2,j,b)

            DO a

               REQUEST  T2AB (a,i,b,j) a

              #taa (a,a2)  = L2AB (i,a2,j,b) * T2AB (a,i,b,j)
               taa (a,a2)  = T2AB (a,i,b,j) * tpppp(i,b,j,a2)
               taa (a,a2) *= -1.0
               PUT  T2L2_VV_A (a,a2) += taa (a,a2)

               taa (a,a2) *= R0
               taa (a,a2) *= -1.0
               PUT  DENS_VV_A (a,a2) += taa (a,a2)

            ENDDO a

      ENDPARDO  a2, b, j, i
#
#
      IF  LOGRIGHT == ONE

         PARDO  a, a1, i

               GET  R1A (a,i)
               GET  L1A (i,a1)

               taa (a,a1)  = R1A (a,i) * L1A (i,a1)
               PUT  DENS_VV_A (a,a1) += taa (a,a1)

               taa (a,a1) *= -1.0
               PUT  R2L2_VV_A (a,a1) += taa (a,a1)

         ENDPARDO  a, a1, i
#
         PARDO  a1, i, i1

            ALLOCATE  laiai  (*,i,a1,i1)
            ALLOCATE  laiai2 (*,i,a1,i1)

            GET  R1A (a1,i1)

            DO a

               REQUEST               R2AA (a,i,a1,i1) a

               taiai  (a,i,a1,i1)  = LT1A (a,i) ^ R1A (a1,i1)
               laiai  (a,i,a1,i1)  = R2AA (a,i,a1,i1)
               laiai  (a,i,a1,i1) *= 0.5
               laiai2 (a,i,a1,i1)  = laiai (a,i,a1,i1)
               laiai  (a,i,a1,i1) += taiai (a,i,a1,i1)

            ENDDO a

            DO a2

               REQUEST              L2AA (i,a2,i1,a1) a2
               tpppp(i,a1,i1,a2) =  L2AA (i,a2,i1,a1)

               DO a

                 #taa  (a,a2) = L2AA (i,a2,i1,a1) * laiai  (a,i,a1,i1)
                  taa  (a,a2) = laiai  (a,i,a1,i1) * tpppp(i,a1,i1,a2)
                  PUT  DENS_VV_A (a,a2) += taa  (a,a2)

               ENDDO a

               DO a

                 #taa2 (a,a2)  = L2AA (i,a2,i1,a1) * laiai2 (a,i,a1,i1)
                  taa2 (a,a2)  = laiai2 (a,i,a1,i1) * tpppp(i,a1,i1,a2)
                  taa2 (a,a2) *= -1.0
                  PUT  R2L2_VV_A (a,a2) += taa2 (a,a2)

               ENDDO a

            ENDDO a2

            DEALLOCATE  laiai  (*,i,a1,i1)
            DEALLOCATE  laiai2 (*,i,a1,i1)

         ENDPARDO  a1, i, i1
#
#
         PARDO  b, j, i

            ALLOCATE  laibj  (*,i,b,j)
            ALLOCATE  laibj2 (*,i,b,j)

            GET  R1B (b,j)

            DO a

               REQUEST            R2AB (a,i,b,j) a
               laibj2 (a,i,b,j) = R2AB (a,i,b,j)

               laibj (a,i,b,j)  = laibj2 (a,i,b,j)
               taibj (a,i,b,j)  = LT1A (a,i) ^ R1B (b,j)
               laibj (a,i,b,j) += taibj (a,i,b,j)

            ENDDO a

            DO a2

               REQUEST            L2AB (i,a2,j,b) a2
               tpppp(i,b,j,a2) =  L2AB (i,a2,j,b)

               DO a

                 #taa  (a,a2) = L2AB (i,a2,j,b) * laibj  (a,i,b,j)
                  taa  (a,a2) = laibj  (a,i,b,j) * tpppp(i,b,j,a2)
                  PUT  DENS_VV_A (a,a2) += taa  (a,a2)

                 #taa2 (a,a2)  = L2AB (i,a2,j,b) * laibj2 (a,i,b,j)
                  taa2 (a,a2)  = laibj2 (a,i,b,j) * tpppp(i,b,j,a2)
                  taa2 (a,a2) *= -1.0
                  PUT  R2L2_VV_A (a,a2) += taa2 (a,a2)

               ENDDO a

            ENDDO a2

            DEALLOCATE  laibj  (*,i,b,j)
            DEALLOCATE  laibj2 (*,i,b,j)

         ENDPARDO  b, j, i

      ENDIF  # LOGRIGHT == ONE #

#
#
#          ------------------------------------------------
#                          !!! IMPORTANT !!!
#          ------------------------------------------------
#
#           The following Occupied - Virtual code computes
#           both the alpha and beta pieces since one needs
#           both to compute the Virtual - Occupied piece.
#
#          ------------------------------------------------
#          ------------------------------------------------
#
#
#    ===========================================================
#       COMPUTE  OCCUPIED - VIRTUAL  PIECE  TO  THE  DENSITY
#    ===========================================================
#    ALPHA                                                 ALPHA
#    -----                                                 -----
#
#
      IF  LOGRIGHT == ONE

         PARDO  i, a, a1, i1

            REQUEST                     L2AA (i,a,i1,a1) i1
            GET                         R1A  (a1,i1)
            tia (i,a)                 = L2AA (i,a,i1,a1) * R1A (a1,i1)
            PUT  DENS_OV_A     (i,a) += tia (i,a)
            PUT  DENS_INT_OV_A (i,a) += tia (i,a)

         ENDPARDO  i, a, a1, i1

         PARDO  i, a, b, j

            REQUEST                     L2AB (i,a,j,b) j
            GET                         R1B  (b,j)
            tia (i,a)                 = L2AB (i,a,j,b) * R1B (b,j)
            PUT  DENS_OV_A     (i,a) += tia (i,a)
            PUT  DENS_INT_OV_A (i,a) += tia (i,a)

         ENDPARDO i, a, b, j

      ENDIF  # LOGRIGHT == ONE #
#
#
      EXECUTE  SERVER_BARRIER
#
#
#
#    ===========================================================
#       COMPUTE  VIRTUAL - OCCUPIED  PIECE  TO  THE  DENSITY
#    ===========================================================
#    ALPHA                                                 ALPHA
#    -----                                                 -----
#
#
#          ...Evaluate the R0 contribution...
#
#
# VFL 
      PARDO  a, i
         tai1(a,i) = 0.0
         DO i1
            GET  T1L1_OO_A (i,i1)
            GET  T2L2_OO_A (i,i1)

            tii (i,i1)  = T1L1_OO_A (i,i1)
            tii (i,i1) += T2L2_OO_A (i,i1)

            tai (a,i)   = LT1A (a,i1) * tii (i,i1)
            tai1(a,i) += tai(a,i)
         ENDDO i1

         IF GROUNDSTATE == ONE
            tai1 (a,i)  += LT1A (a,i)
         ENDIF

         tai1 (a,i)  *= R0
         PUT  DENS_VO_A (a,i) += tai1 (a,i)

      ENDPARDO  a, i
#
      PARDO  a, a1, i

            GET                     T2L2_VV_A (a,a1)
            tai (a,i)             = T2L2_VV_A (a,a1) * LT1A (a1,i)
            tai (a,i)            *= R0
            PUT  DENS_VO_A (a,i) += tai (a,i)

      ENDPARDO  a, a1, i
#
#
      PARDO  a1, i1

         GET  L1A (i1,a1)

         DO a
            DO i
               REQUEST                 T2AA (a,i,a1,i1) i
               tai  (a,i)            = T2AA (a,i,a1,i1) * L1A (i1,a1)
               tai  (a,i)           *= R0
               PUT  DENS_VO_A (a,i) += tai (a,i)
            ENDDO i
         ENDDO a

      ENDPARDO  a1, i1

      PARDO  b, j

         GET  L1B (j,b)

         DO a
            DO i
               REQUEST                 T2AB (a,i,b,j) i
               tai  (a,i)            = T2AB (a,i,b,j) * L1B (j,b)
               tai  (a,i)           *= R0
               PUT  DENS_VO_A (a,i) += tai (a,i)
            ENDDO i
         ENDDO a

      ENDPARDO  b, j

      IF LOGRIGHT == ONE

       PARDO  a1, i1

            GET  DENS_INT_OV_A (i1,a1)
            tia (i1,a1) = DENS_INT_OV_A (i1,a1)

            DO a
               DO i
                  REQUEST  T2AA (a,i,a1,i1) i
                  tai (a,i) = T2AA (a,i,a1,i1) * tia (i1,a1)
                  PUT  DENS_VO_A (a,i) += tai (a,i)
               ENDDO i
            ENDDO a

         ENDPARDO  a1, i1

         PARDO  b, j

            GET  DENS_INT_OV_A (j,b)
            tjb (j,b) = DENS_INT_OV_A (j,b)

            DO a
               DO i
                  REQUEST  T2AB (a,i,b,j) i
                  tai (a,i)    = T2AB (a,i,b,j) * tjb (j,b)
                  PUT  DENS_VO_A (a,i) += tai (a,i)
               ENDDO i
            ENDDO a

         ENDPARDO  b, j
#
         PARDO  i, i1

            tii(i,i1) = 0.0
            DO a1
               GET           DENS_INT_OV_A (i1,a1)
               tia (i1,a1) = DENS_INT_OV_A (i1,a1)
               tii1 (i,i1) = LT1A (a1,i) * tia (i1,a1)
               tii(i,i1) += tii1(i,i1)
            ENDDO a1

               DO a
                  tai (a,i)             = LT1A (a,i1) * tii (i,i1)
                  tai (a,i)            *= -1.0
                  PUT  DENS_VO_A (a,i) += tai (a,i)
               ENDDO a

         ENDPARDO  i, i1
#
         PARDO  a1, i1

            GET  L1A (i1,a1)

            DO a
               DO i
                  REQUEST                 R2AA (a,i,a1,i1) i
                  tai (a,i)             = R2AA (a,i,a1,i1) * L1A (i1,a1)
                  PUT  DENS_VO_A (a,i) += tai (a,i)
               ENDDO i
            ENDDO a

         ENDPARDO  a1, i1

         PARDO  b, j

            GET  L1B (j,b)

            DO a
               DO i
                  REQUEST                 R2AB (a,i,b,j) i
                  tai (a,i)             = R2AB (a,i,b,j) * L1B (j,b)
                  PUT  DENS_VO_A (a,i) += tai (a,i)
               ENDDO i
            ENDDO a

         ENDPARDO  b, j
#
         PARDO  i, a, a1

               GET  R2L2_VV_A (a,a1)
               GET  T2L2_VV_A (a,a1)
               GET  R1A (a1,i)
               tai  (a,i)  = R2L2_VV_A (a,a1) * LT1A (a1,i)
               tai2 (a,i)  = T2L2_VV_A (a,a1) * R1A (a1,i)
               tai  (a,i) += tai2 (a,i)
               PUT  DENS_VO_A (a,i) += tai (a,i)

         ENDPARDO i, a, a1
#
         PARDO i, a, i1

               GET  R1A (a,i1)
               GET  R2L2_OO_A (i,i1)
               GET  T2L2_OO_A (i,i1)
               tai  (a,i)  = LT1A (a,i1) * R2L2_OO_A (i,i1)
               tai2 (a,i)  = R1A (a,i1) * T2L2_OO_A (i,i1)
               tai  (a,i) += tai2 (a,i)
               PUT  DENS_VO_A (a,i) += tai (a,i)

         ENDPARDO  i, a, i1
#
         IF EXCITESTATE == ZERO
            PARDO  a, i
               GET  R1A (a,i)
               tai (a,i) = R1A (a,i)
               PUT  DENS_VO_A (a,i) += tai (a,i)
            ENDPARDO  a, i
         ENDIF

         IF EXCITESTATE == ONE
            etemp = 1.0 / LRNORM
            PARDO  a, i
               tai (a,i)  = LT1A (a,i)
               tai (a,i) *= etemp
               PUT  DENS_VO_A (a,i) += tai (a,i)
            ENDPARDO  a, i
         ENDIF


      ENDIF  # LOGRIGHT = ONE #
#
      execute load_balance_off 
      EXECUTE  SERVER_BARRIER
#
      ENDPROC  COMPUTE_DENSITY
#-------------------------------------------------------------------------





#-------------------------------------------------------------------------
#
#    ---------------------------
      PROC  BACK_TRANS_COMP_DIP
#    ---------------------------
#
#
#          ...Zero out the necessary arrays...
#
#
      PARDO mu, nu
         txx (mu,nu)          = 0.0
         PUT  AO_DENS (mu,nu) = txx (mu,nu)
      ENDPARDO  mu, nu

      EXECUTE  SIP_BARRIER
#
#
#          ...Do the transformation...
#
#
      IF GROUNDSTATE == ONE                        # Symmetrize
#
#
#      ...Occupied-occupied alpha...
#
#
         PARDO  i, i1
            GET  DENS_OO_A (i,i1)
            GET  DENS_OO_A (i1,i)
            tii (i,i1)  = DENS_OO_A (i1,i)
            tii (i,i1) += DENS_OO_A (i,i1)
            tii (i,i1) *= LRNORM
            tii (i,i1) *= 0.5
            DO mu
               txi  (mu,i1) = tii (i,i1) * CA (mu,i)
               DO nu
                  txx  (mu,nu) = txi (mu,i1) * CA (nu,i1)
                  t1xx (nu,mu) = txx (mu,nu)
                  PUT  AO_DENS (mu,nu) += txx  (mu,nu)
                  PUT  AO_DENS (nu,mu) += t1xx (nu,mu)
               ENDDO nu
            ENDDO mu
         ENDPARDO  i, i1

         PARDO  a, a1
            GET  DENS_VV_A (a,a1)
            GET  DENS_VV_A (a1,a)
            taa (a,a1)  = DENS_VV_A (a1,a)
            taa (a,a1) += DENS_VV_A (a,a1)
            taa (a,a1) *= LRNORM
            taa (a,a1) *= 0.5
            DO mu
               txa  (mu,a1) = taa (a,a1) * CA (mu,a)
               DO nu
                  txx  (mu,nu) = txa (mu,a1) * CA (nu,a1)
                  t1xx (nu,mu) = txx (mu,nu)
                  PUT  AO_DENS (mu,nu) += txx  (mu,nu)
                  PUT  AO_DENS (nu,mu) += t1xx (nu,mu)
               ENDDO nu
            ENDDO mu
         ENDPARDO  a, a1

         PARDO  a, i
            GET  DENS_VO_A (a,i)
            GET  DENS_OV_A (i,a)
            tai (a,i)  = DENS_OV_A (i,a)
            tai (a,i) += DENS_VO_A (a,i)
            tai (a,i) *= LRNORM
            DO mu
               txi (mu,i) = tai (a,i) * CA (mu,a)
               DO nu
                  txx  (mu,nu) = txi (mu,i) * CA (nu,i)
                  t1xx (nu,mu) = txx (mu,nu)
                  PUT  AO_DENS (mu,nu) += txx  (mu,nu)
                  PUT  AO_DENS (nu,mu) += t1xx (nu,mu)
               ENDDO nu
            ENDDO mu
         ENDPARDO  a, i

         PARDO  mu, nu

            GET                     DHF (mu,nu)
            txx (mu,nu)           = DHF (mu,nu)
            PUT  AO_DENS (mu,nu) += txx (mu,nu)

         ENDPARDO  mu, nu

      ENDIF   #  GROUNDSTATE == ONE  #

      IF GROUNDSTATE != ONE

         PARDO  i, i1
            GET  DENS_OO_A (i,i1)
            DO mu
               txi  (mu,i1) = DENS_OO_A (i,i1) * CA (mu,i)
               txi  (mu,i1)*= 2.0  
               txi  (mu,i1)*= LRNORM
               DO nu
                  txx  (mu,nu) = txi (mu,i1) * CA (nu,i1)
                  PUT  AO_DENS (mu,nu) += txx  (mu,nu)
               ENDDO nu
            ENDDO mu
         ENDPARDO  i, i1

         PARDO  a, a1
            GET  DENS_VV_A (a,a1)
            DO mu
               txa  (mu,a1) = DENS_VV_A (a,a1) * CA (mu,a)
               txa  (mu,a1)*= 2.0
               txa  (mu,a1)*= LRNORM
               DO nu
                  txx  (mu,nu) = txa (mu,a1) * CA (nu,a1)
                  PUT  AO_DENS (mu,nu) += txx  (mu,nu)
               ENDDO nu
            ENDDO mu
         ENDPARDO  a, a1

         PARDO  a, i
            GET  DENS_VO_A (a,i)
            DO mu
               txi (mu,i) = DENS_VO_A (a,i) * CA (mu,a)
               txi (mu,i)*= 2.0
               txi (mu,i)*= LRNORM
               DO nu
                  txx  (mu,nu) = txi (mu,i) * CA (nu,i)
                  PUT  AO_DENS (mu,nu) += txx  (mu,nu)
               ENDDO nu
            ENDDO mu
         ENDPARDO  a, i

         PARDO  i, a
            GET  DENS_OV_A   (i,a)
            DO mu
               txa (mu,a) = DENS_OV_A (i,a) * CA (mu,i)
               txa (mu,a)*= 2.0
               txa (mu,a)*= LRNORM
               DO nu
                  txx  (mu,nu) = txa (mu,a) * CA (nu,a)
                  PUT  AO_DENS (mu,nu) += txx  (mu,nu)
               ENDDO nu
            ENDDO mu
         ENDPARDO  i, a

      ENDIF   #  GROUNDSTATE != ONE  #

      EXECUTE  SIP_BARRIER
#
#
#          ...Contract with X, Y, and Z integrals...
#
#
      etemp1 = 0.0
      etemp2 = 0.0
      etemp3 = 0.0

      sum1 = 0.0
      sum2 = 0.0
      sum3 = 0.0

      PARDO  mu, nu

         GET  AO_DENS (mu,nu)

         txx  (mu,nu) = 0.0
         txx2 (mu,nu) = 0.0
         txx3 (mu,nu) = 0.0

         EXECUTE  RETURN_1ST_MOM  txx   ONE
         EXECUTE  RETURN_1ST_MOM  txx2  TWO
         EXECUTE  RETURN_1ST_MOM  txx3  THREE

         etemp = AO_DENS (mu,nu) * txx  (mu,nu)
         sum1 += etemp

         etemp = AO_DENS (mu,nu) * txx2 (mu,nu)
         sum2 += etemp

         etemp = AO_DENS (mu,nu) * txx3 (mu,nu)
         sum3 += etemp

      ENDPARDO  mu, nu

      EXECUTE  SIP_BARRIER

      COLLECTIVE  etemp1 += sum1
      COLLECTIVE  etemp2 += sum2
      COLLECTIVE  etemp3 += sum3

      EXECUTE  SIP_BARRIER

      etemp1 *= -1.0
      etemp2 *= -1.0
      etemp3 *= -1.0

      DIP_MOM_X = etemp1
      DIP_MOM_Y = etemp2
      DIP_MOM_Z = etemp3

      EXECUTE  SIP_BARRIER
#     
#     
#          ...ready!
#
#
      ENDPROC  BACK_TRANS_COMP_DIP
#-------------------------------------------------------------------------


#-------------------------------------------------------------------------
#
#    ------------------------
      PROC  PRINT_OUT_PIECES
#    ------------------------
#
#
#          ...Print the relevant data...
#
#
#
#          ...Alpha Occupied-Occupied...
#
      EXECUTE  PRINT_SCALAR  ZERO

      ALLOCATE  lii (*,*)

      DO  i 
      DO  i1
         GET  DENS_OO_A   (i,i1)
         lii (i,i1) = DENS_OO_A (i,i1)
         EXECUTE  c1_print  lii  AMPLTHRESH
      ENDDO  i1
      ENDDO  i

      DEALLOCATE  lii (*,*)

      EXECUTE  PRINT_SCALAR  ZERO
      EXECUTE  SIP_BARRIER
#
#          ...Alpha Virtual-Virtual...
#
      ALLOCATE  laa (*,*)

      DO  a 
      DO  a1
         GET  DENS_VV_A   (a,a1)
         laa (a,a1) = DENS_VV_A (a,a1)
         EXECUTE  c1_print  laa  AMPLTHRESH
      ENDDO  a1
      ENDDO  a 

      DEALLOCATE  laa (*,*)

      EXECUTE  PRINT_SCALAR  ZERO
      EXECUTE  SIP_BARRIER
#
#          ...Alpha Occupied-Virtual...
#
      ALLOCATE  lia (*,*)

      DO  i 
      DO  a
         GET  DENS_OV_A   (i,a)
         lia (i,a) = DENS_OV_A (i,a)
         EXECUTE  c1_print  lia  AMPLTHRESH
      ENDDO  a
      ENDDO  i

      DEALLOCATE  lia (*,*)

      EXECUTE  PRINT_SCALAR  ZERO
      EXECUTE  SIP_BARRIER
#
#          ...Alpha Virtual-Occupied...
#
      ALLOCATE  lai (*,*)

      DO  a 
      DO  i
         GET  DENS_VO_A   (a,i)
         lai (a,i) = DENS_VO_A (a,i)
         EXECUTE  c1_print  lai  AMPLTHRESH
      ENDDO  i
      ENDDO  a 

      DEALLOCATE  lai (*,*)

      EXECUTE  SIP_BARRIER
#     
#     
#          ...ready!
#
#
      ENDPROC  PRINT_OUT_PIECES
#-------------------------------------------------------------------------


#-------------------------------------------------------------------------
#
#    -----------------------
      PROC  PRINT_XPROP_DATA
#    -----------------------
#
#
#          ...Print the relevant data...
#
#
      DO kindex26

         IF kindex26 == 1
            etemp = 1.0
            TMOM_DATA (kindex26,kindex26) = OMEGA
            EXECUTE PRINT_EOM_DENS_INFO  TMOM_DATA  etemp
         ENDIF

         IF kindex26 == 2
            etemp = 2.0
            TMOM_DATA (kindex26,kindex26) = OSC_STREN
            EXECUTE PRINT_EOM_DENS_INFO  TMOM_DATA  etemp
         ENDIF

         IF kindex26 == 3
            etemp = 3.0
            TMOM_DATA (kindex26,kindex26) = DIP_MOM_X_R
            EXECUTE PRINT_EOM_DENS_INFO  TMOM_DATA  etemp
         ENDIF

         IF kindex26 == 4
            etemp = 4.0
            TMOM_DATA (kindex26,kindex26) = DIP_MOM_X_L
            EXECUTE PRINT_EOM_DENS_INFO  TMOM_DATA  etemp
         ENDIF

         IF kindex26 == 5
            etemp = 5.0
            TMOM_DATA (kindex26,kindex26) = DIP_MOM_X
            EXECUTE PRINT_EOM_DENS_INFO  TMOM_DATA  etemp
         ENDIF

         IF kindex26 == 6
            etemp = 6.0
            TMOM_DATA (kindex26,kindex26) = OSC_STREN_X
            EXECUTE PRINT_EOM_DENS_INFO  TMOM_DATA  etemp
         ENDIF

         IF kindex26 == 7
            etemp = 7.0
            TMOM_DATA (kindex26,kindex26) = DIP_MOM_Y_R
            EXECUTE PRINT_EOM_DENS_INFO  TMOM_DATA  etemp
         ENDIF

         IF kindex26 == 8
            etemp = 8.0
            TMOM_DATA (kindex26,kindex26) = DIP_MOM_Y_L
            EXECUTE PRINT_EOM_DENS_INFO  TMOM_DATA  etemp
         ENDIF

         IF kindex26 == 9
            etemp = 9.0
            TMOM_DATA (kindex26,kindex26) = DIP_MOM_Y
            EXECUTE PRINT_EOM_DENS_INFO  TMOM_DATA  etemp
         ENDIF

         IF kindex26 == 10
            etemp = 10.0
            TMOM_DATA (kindex26,kindex26) = OSC_STREN_Y
            EXECUTE PRINT_EOM_DENS_INFO  TMOM_DATA  etemp
         ENDIF

         IF kindex26 == 11
            etemp = 11.0
            TMOM_DATA (kindex26,kindex26) = DIP_MOM_Z_R
            EXECUTE PRINT_EOM_DENS_INFO  TMOM_DATA  etemp
         ENDIF

         IF kindex26 == 12
            etemp = 12.0
            TMOM_DATA (kindex26,kindex26) = DIP_MOM_Z_L
            EXECUTE PRINT_EOM_DENS_INFO  TMOM_DATA  etemp
         ENDIF

         IF kindex26 == 13
            etemp = 13.0
            TMOM_DATA (kindex26,kindex26) = DIP_MOM_Z
            EXECUTE PRINT_EOM_DENS_INFO  TMOM_DATA  etemp
         ENDIF

         IF kindex26 == 14
            etemp = 14.0
            TMOM_DATA (kindex26,kindex26) = OSC_STREN_Z
            EXECUTE PRINT_EOM_DENS_INFO  TMOM_DATA  etemp
         ENDIF

         IF kindex26 == 15
            etemp = 15.0
            TMOM_DATA (kindex26,kindex26) = POLXX
            EXECUTE PRINT_EOM_DENS_INFO  TMOM_DATA  etemp
         ENDIF

        #IF kindex26 == 16
        #   etemp = 16.0
        #   TMOM_DATA (kindex26,kindex26) = POLTOTXX
        #   EXECUTE PRINT_EOM_DENS_INFO  TMOM_DATA  etemp
        #ENDIF

         IF kindex26 == 17
            etemp = 17.0
            TMOM_DATA (kindex26,kindex26) = POLYY
            EXECUTE PRINT_EOM_DENS_INFO  TMOM_DATA  etemp
         ENDIF

        #IF kindex26 == 18
        #   etemp = 18.0
        #   TMOM_DATA (kindex26,kindex26) = POLTOTYY
        #   EXECUTE PRINT_EOM_DENS_INFO  TMOM_DATA  etemp
        #ENDIF

         IF kindex26 == 19
            etemp = 19.0
            TMOM_DATA (kindex26,kindex26) = POLZZ
            EXECUTE PRINT_EOM_DENS_INFO  TMOM_DATA  etemp
         ENDIF

        #IF kindex26 == 20
        #   etemp = 20.0
        #   TMOM_DATA (kindex26,kindex26) = POLTOTZZ
        #   EXECUTE PRINT_EOM_DENS_INFO  TMOM_DATA  etemp
        #ENDIF

         IF kindex26 == 21
            etemp = 21.0
            TMOM_DATA (kindex26,kindex26) = POLXY
            EXECUTE PRINT_EOM_DENS_INFO  TMOM_DATA  etemp
         ENDIF

        #IF kindex26 == 22
        #   etemp = 22.0
        #   TMOM_DATA (kindex26,kindex26) = POLTOTXY
        #   EXECUTE PRINT_EOM_DENS_INFO  TMOM_DATA  etemp
        #ENDIF

         IF kindex26 == 23
            etemp = 23.0
            TMOM_DATA (kindex26,kindex26) = POLXZ
            EXECUTE PRINT_EOM_DENS_INFO  TMOM_DATA  etemp
         ENDIF

        #IF kindex26 == 24
        #   etemp = 24.0
        #   TMOM_DATA (kindex26,kindex26) = POLTOTXZ
        #   EXECUTE PRINT_EOM_DENS_INFO  TMOM_DATA  etemp
        #ENDIF

         IF kindex26 == 25
            etemp = 25.0
            TMOM_DATA (kindex26,kindex26) = POLYZ
            EXECUTE PRINT_EOM_DENS_INFO  TMOM_DATA  etemp
         ENDIF

        #IF kindex26 == 26
        #   etemp = 26.0
        #   TMOM_DATA (kindex26,kindex26) = POLTOTYZ
        #   EXECUTE PRINT_EOM_DENS_INFO  TMOM_DATA  etemp
        #ENDIF

      ENDDO kindex26
#
      ENDPROC  PRINT_XPROP_DATA
#-------------------------------------------------------------------------



#-------------------------------------------------------------------------
#
#    ----------------------
      PROC  PRINT_MOM_DATA
#    ----------------------
#
#
#             Print the relevant data
#
#

#
#
#          ...ready!
#
#
      ENDPROC  PRINT_MOM_DATA
#-------------------------------------------------------------------------



#-------------------------------------------------------------------------
#
#    -----------------------
      PROC  COMPUTE_MOMENTS
#    -----------------------
#
#
#             Compute the moments!
#
#
      EXECUTE  PRINT_SCALAR  ZERO
      imomcount = 0
      DO indone
      DO secmom
         imomcount += 1

         sum1      = 0.0
         SECONDMOM = 0.0
         PARDO  mu, nu

            txx (mu,nu) = 0.0
            GET  AO_DENS (mu,nu)
            EXECUTE  RETURN_2ND_MOM  txx  imomcount
            etemp  = AO_DENS (mu,nu) * txx (mu,nu)
            sum1  += etemp

         ENDPARDO  mu, nu

         EXECUTE  SIP_BARRIER
         COLLECTIVE  SECONDMOM += sum1
         EXECUTE  SIP_BARRIER

         EXECUTE  PRINT_SCALAR  SECONDMOM

         IF izero_ints == 0.0
            IF GROUNDSTATE == ONE
               GRDSECM (secmom,indone) = SECONDMOM
            ENDIF

            IF EXCITESTATE == ONE
               EXCSECM (secmom,indone) = SECONDMOM
            ENDIF
         ENDIF

      ENDDO secmom
      ENDDO indone
#
#
#          ...ready!
#
#
      ENDPROC  COMPUTE_MOMENTS
#-------------------------------------------------------------------------



#-------------------------------------------------------------------------
#
#    -----------------------
      PROC  WRITE_TO_JOBARC
#    -----------------------
#
#
#             Write to JOBARC
#
#
      DO mu
      DO nu

         GET            AO_DENS (mu,nu)
         txx (mu,nu)  = AO_DENS (mu,nu)
        #EXECUTE  C1_PRINT  txx  ZERO
         DENSITY (mu,nu) = txx (mu,nu)

      ENDDO nu
      ENDDO mu

      proot = iroot - 1.0
      IDENS = proot + inext
      EXECUTE  PRINT_SCALAR  IDENS

      EXECUTE  DENS2JOBARC  DENSITY  IDENS
#
#
#          ...ready!
#
#
      ENDPROC  WRITE_TO_JOBARC
#-------------------------------------------------------------------------



#-------------------------------------------------------------------------
#
#     -------------------
      PROC  SIAL_TEMPLATE
#     -------------------
#
#
      ZERO = 0.0
#
#
#          ...ready!
#
#
      ENDPROC  SIAL_TEMPLATE
#-------------------------------------------------------------------------



#-------------------------------------------------------------------------
#
#     -------------------
      PROC  SIAL_TEMPLATE1
#     -------------------
#
#
      ZERO = 0.0
#
#
#          ...ready!
#
#
      ENDPROC  SIAL_TEMPLATE1
#-------------------------------------------------------------------------



#-------------------------------------------------------------------------
#
#     ---------
      PROC  I11
##     ---------
##
##
#     PARDO a, i, i1, i2  
##
#           REQUEST VSpipi(a,i2,i1,i) i
#           GET Dij_a(i1,i2) 
##
#           Tpppp(a,i,i1,i2)  = VSpipi(a,i2,i1,i) 
#           Tai(a,i)          = Tpppp(a,i,i1,i2)*Dij_a(i1,i2) 
#           Tai(a,i)         *= -1.0  
#           PUT Iai_aa(a,i)  += Tai(a,i) 
##
#     ENDPARDO a, i, i1, i2  
##
#     PARDO a, j, j1, i 
##
#           REQUEST Vpiqj(a,i,j,j1) j1  
#           GET Dij_a(j,j1) 
##
#           Tai(a,i)         = Vpiqj(a,i,j,j1)*Dij_a(j,j1) 
#           PUT Iai_aa(a,i) += Tai(a,i) 
##
#     ENDPARDO a, j, j1, i 
##
#     PARDO a, a1, a2, i 
##
#           REQUEST VSaaai(a,a1,a2,i) i
#           GET Dab_a(a2,a1) 
##
#           Tpppp(a,i,a2,a1)  = VSaaai(a,a1,a2,i) 
#           Tai(a,i)          = Tpppp(a,i,a2,a1)*Dab_a(a2,a1) 
#           Tai(a,i)         *= -1.0   
#           PUT Iai_aa(a,i)  += Tai(a,i) 
##
#     ENDPARDO a, a1, a2, i 
##
#     PARDO a, b, b1, i 
##
#           REQUEST Vaabj(b1,b,a,i) i
#           GET Dab_a(b1,b) 
##
#           Tai(a,i)         = Vaabj(b1,b,a,i)*Dab_a(b1,b) 
#           PUT Iai_aa(a,i) += Tai(a,i) 
##
#     ENDPARDO a, b, b1, i 
##
## Done contribution to Iai_aa 
## --------------------------- 
##
## Compute contribution to Iij_aa 
## ------------------------------ 
##
##     Dab contribution 
##     ---------------- 
##
#      PARDO a, a1, i, i1 
##
#            REQUEST Vaaii(a,a1,i,i1) i1  
#            REQUEST Viaai(i,a1,a,i1) i1  
#            REQUEST Vaaii(a,a1,i1,i) i1  
#            REQUEST Viaai(i1,a1,a,i) i
#            GET Dab_a(a,a1) 
##
#            Tpppp(i,i1,a,a1)  = Vaaii(a,a1,i,i1)  
#            T1pppp(i,i1,a,a1) = Viaai(i,a1,a,i1)  
#            T2pppp(i,i1,a,a1) = Vaaii(a,a1,i1,i)  
#            T3pppp(i,i1,a,a1) = Viaai(i1,a1,a,i) 
##
#            Tpppp(i,i1,a,a1) -= T1pppp(i,i1,a,a1)  
#            Tpppp(i,i1,a,a1) += T2pppp(i,i1,a,a1)  
#            Tpppp(i,i1,a,a1) -= T3pppp(i,i1,a,a1)  
##
#            Tii(i,i1)         = Tpppp(i,i1,a,a1)*Dab_a(a,a1) 
#            Tii(i,i1)        *= -0.5  
#            PUT Iij_aa(i,i1) += Tii(i,i1) 
##
#      ENDPARDO a, a1, i, i1 
##
#      PARDO b, b1, i, i1 
##
#            REQUEST Vaaii(b,b1,i,i1) b1  
#            REQUEST Vaaii(b,b1,i1,i) b1  
#            GET Dab_a(b,b1) 
##
#            Tppqq(i,i1,b,b1)  = Vaaii(b,b1,i,i1)  
#            T2ppqq(i,i1,b,b1) = Vaaii(b,b1,i1,i)  
#            Tppqq(i,i1,b,b1) += T2ppqq(i,i1,b,b1)  
##
#            Tii(i,i1)         = Tppqq(i,i1,b,b1)*Dab_a(b,b1) 
#            Tii(i,i1)        *= -0.5  
#            PUT Iij_aa(i,i1) += Tii(i,i1) 
##
#      ENDPARDO b, b1, i, i1 
##
##     Dij contribution 
##     ---------------- 
##
#      PARDO i2, i3, i, i1 
##
#            REQUEST VSpipi(i2,i3,i,i1) i1  
#            REQUEST VSpipi(i2,i3,i1,i) i
#            GET Dij_a(i2,i3) 
##
#            Tpppp(i,i1,i2,i3)  = VSpipi(i2,i3,i,i1)  
#            T2pppp(i,i1,i2,i3) = VSpipi(i2,i3,i1,i)  
#            Tpppp(i,i1,i2,i3) += T2pppp(i,i1,i2,i3)  
##
#            Tii(i,i1)          = Tpppp(i,i1,i2,i3)*Dij_a(i2,i3) 
#            Tii(i,i1)         *= -0.5  
#            PUT Iij_aa(i,i1)  += Tii(i,i1) 
##
#      ENDPARDO i2, i3, i, i1 
##
#      PARDO j, j1, i, i1 
##
#            REQUEST Vpiqj(i,i1,j,j1) j1  
#            REQUEST Vpiqj(i1,i,j,j1) j1  
#            GET Dij_a(j,j1) 
##
#            Tppqq(i,i1,j,j1)  = Vpiqj(i,i1,j,j1)  
#            T2ppqq(i,i1,j,j1) = Vpiqj(i1,i,j,j1)  
#            Tppqq(i,i1,j,j1) += T2ppqq(i,i1,j,j1)  
##
#            Tii(i,i1)         = Tppqq(i,i1,j,j1)*Dij_a(j,j1) 
#            Tii(i,i1)        *= -0.5  
#            PUT Iij_aa(i,i1) += Tii(i,i1) 
##
#      ENDPARDO j, j1, i, i1 
#
#
#          ...ready!
#
#
      ENDPROC  I11
#-------------------------------------------------------------------------




#-------------------------------------------------------------------------
#
#     --------------
      PROC  IFOCK_PP
#     --------------
#
#
#      PARDO i, i1 
##
#            Tii(i,i1) = 0.0 # Fock_a(i,i1)
##
#            DO i2 
##
#            IF i2 == i 
##
#               GET Dij_a(i1,i2)
##
#               T1ii(i,i1)        = Dij_a(i1,i2)*Fock_a(i2,i)
#               Tii(i,i1)        += T1ii(i,i1)  
##
#            ENDIF # i2 == i 
##
#            ENDDO i2 
##
#            Tii(i,i1)        *= -1.0 
#            PUT Iij_aa(i,i1) += Tii(i,i1)
##
#      ENDPARDO i, i1 
##
#      PARDO a, a1
##
#            DO a2
##
#               IF a2 == a 
##
#                  GET                 Dab_a(a1,a2)
#                  Taa(a,a1)         = Fock_a(a,a2)*Dab_a(a1,a2)
#                  Taa(a,a1)        *= -1.0
#                  PUT Iab_aa(a,a1) += Taa(a,a1)
##
#               ENDIF # a2 == a 
##
#            ENDDO a2
##
#      ENDPARDO a, a1
#
#
#          ...ready!
#
#
      ENDPROC  IFOCK_PP
#-------------------------------------------------------------------------




#-------------------------------------------------------------------------
#
#     ----------
      PROC  DIJA
#     ----------
#
#
      PARDO a, a1, i2 
#
            DO i 
#
               REQUEST T2AA (a,i,a1,i2) i2  
#
               DO i1 
#
                  REQUEST A2AA (i1,a,i2,a1) a1  
#
                  Tii(i,i1)        = T2AA (a,i,a1,i2)*A2AA (i1,a,i2,a1) 
                  Tii(i,i1)       *= -0.25   
                  T1ii(i1,i)       = Tii(i,i1) 
                  PUT Dij_a(i,i1) += Tii(i,i1) 
                  PUT Dij_a(i1,i) += T1ii(i1,i) 
#
               ENDDO i1 
#
            ENDDO i 
#
      ENDPARDO a, a1, i2 
#
      PARDO a, b, j 
#
            DO i 
#
               REQUEST T2AB (a,i,b,j) j 
#
               DO i1 
#
                  REQUEST A2AB (i1,a,j,b) b  
#
                  Tii(i,i1)        = T2AB (a,i,b,j)*A2AB (i1,a,j,b) 
                  Tii(i,i1)       *= -0.5   
                  T1ii(i1,i)       = Tii(i,i1) 
                  PUT Dij_a(i,i1) += Tii(i,i1) 
                  PUT Dij_a(i1,i) += T1ii(i1,i) 
#
               ENDDO i1 
#
            ENDDO i 
#
      ENDPARDO a, b, j 
#
      PARDO a, i, i1  
#
            GET T1A (a,i) 
            GET A1A (i1,a) 
#
            Tii(i,i1)        = A1A (i1,a)*T1A (a,i) 
            Tii(i,i1)       *= -0.5   
            T1ii(i1,i)       = Tii(i,i1) 
            PUT Dij_a(i,i1) += Tii(i,i1) 
            PUT Dij_a(i1,i) += T1ii(i1,i) 
#
      ENDPARDO a, i, i1  
#
#     
#          ...ready!
#           
#           
      ENDPROC  DIJA
#-------------------------------------------------------------------------



#-------------------------------------------------------------------------
#
#     ----------
      PROC  DABA
#     ----------
#
#
      PARDO a, a1, i  
#
            GET T1A (a,i) 
            GET A1A (i,a1) 
#
            Taa(a,a1)        = T1A (a,i)*A1A (i,a1) 
            Taa(a,a1)       *= 0.5 
            T1aa(a1,a)       = Taa(a,a1)  
            PUT Dab_a(a,a1) += Taa(a,a1) 
            PUT Dab_a(a1,a) += T1aa(a1,a) 
#
            DO a2 
            DO i1 
#
               REQUEST T2AA (a,i,a2,i1) i1  
               REQUEST A2AA (i,a1,i1,a2) a2  
#
               Taa(a,a1)        = T2AA (a,i,a2,i1)*A2AA (i,a1,i1,a2)
               Taa(a,a1)       *= 0.25 
               T1aa(a1,a)       = Taa(a,a1)  
               PUT Dab_a(a,a1) += Taa(a,a1) 
               PUT Dab_a(a1,a) += T1aa(a1,a) 
#
            ENDDO i1 
            ENDDO a2 
#
            DO b 
            DO j 
#
               REQUEST T2AB (a,i,b,j) j  
               REQUEST A2AB (i,a1,j,b) j  
#
               Taa(a,a1)        = T2AB (a,i,b,j)*A2AB (i,a1,j,b)
               Taa(a,a1)       *= 0.5 
               T1aa(a1,a)       = Taa(a,a1)  
               PUT Dab_a(a,a1) += Taa(a,a1) 
               PUT Dab_a(a1,a) += T1aa(a1,a) 
#
            ENDDO j 
            ENDDO b 
#
      ENDPARDO a, a1, i  
#
#     
#          ...ready!
#           
#           
      ENDPROC  DABA
#-------------------------------------------------------------------------



#-------------------------------------------------------------------------
#
#     ---------
      PROC  GAE
#     ---------
#
#
      PARDO a, a1
#
            Taa(a,a1) = 0.0
#
            DO i1
            DO i
            DO a2
#
               REQUEST T2AA (a1,i1,a2,i) i
               REQUEST A2AA (i1,a,i,a2)  a2
#
               T1aa(a,a1)  = A2AA (i1,a,i,a2)*T2AA (a1,i1,a2,i)
               T1aa(a,a1) *= 0.5
               Taa(a,a1)  -= T1aa(a,a1)
#
            ENDDO a2
            ENDDO i
            ENDDO i1
#
            DO i
            DO j
            DO b
#
               REQUEST T2AB (a1,i,b,j) j
               REQUEST A2AB (i,a,j,b)  j
#
               T1aa(a,a1) = A2AB (i,a,j,b)*T2AB (a1,i,b,j)
               Taa(a,a1) -= T1aa(a,a1)
#
            ENDDO b
            ENDDO j
            ENDDO i
#
            PUT Gae_a(a,a1) += Taa(a,a1)
#
      ENDPARDO a, a1
#     
#
#          ...ready!
#
#
      ENDPROC  GAE
#-------------------------------------------------------------------------



#-------------------------------------------------------------------------
#
#     ---------
      PROC  GMI
#     ---------
#
#
      PARDO a, a1, i, i1
#
            DO i2
#
               REQUEST T2AA (a,i1,a1,i2) i2
               REQUEST A2AA (i,a,i2,a1)  a1
#              
               Tii(i1,i)        = T2AA (a,i1,a1,i2)*A2AA (i,a,i2,a1)
               Tii(i1,i)       *= 0.5
               PUT Gmi_a(i1,i) += Tii(i1,i)
#           
            ENDDO i2
#     
      ENDPARDO a, a1, i, i1
#     
      PARDO a, b, i, j
#           
            DO i1
#              
               REQUEST T2AB (a,i1,b,j) j
               REQUEST A2AB (i,a,j,b)  j
               Tii(i1,i)        = T2AB (a,i1,b,j)*A2AB (i,a,j,b)
               PUT Gmi_a(i1,i) += Tii(i1,i)
#
            ENDDO i1
#
      ENDPARDO a, b, i, j
#     
#
#          ...ready!
#
#
      ENDPROC  GMI
#-------------------------------------------------------------------------



#-------------------------------------------------------------------------
#
#     ----------------------
      PROC  EOM_TWO_DENS_INT
#     ----------------------
#
#
#     R1 * L2 --> LR1L2_ai
#
#
      PARDO  i2, a2, a, i
         REQUEST             L2AA (i,a,i2,a2) i2
         GET                 R1A  (a2,i2)
         taiai (a,i,a2,i2) = L2AA (i,a,i2,a2)
         tai (a,i)  = taiai (a,i,a2,i2) * R1A (a2,i2)
        #tai (a,i) *= LRNORM
         LR1L2_ai (a,i) += tai (a,i)
         DO i1
            tii (i,i1) = tai (a,i) * LT1A (a,i1)
            L_Z_ii (i,i1) += tii (i,i1)
         ENDDO i1
         DO a1
            taa (a,a1) = tai (a,i) * LT1A (a1,i)
            L_Z_aa (a,a1) += taa (a,a1)
         ENDDO a1
      ENDPARDO  i2, a2, a, i

      PARDO  j2, b2, a, i
         REQUEST             L2AB (i,a,j2,b2) j2
         GET                 R1A  (b2,j2)
         taiai (a,i,b2,j2) = L2AB (i,a,j2,b2)
         tai (a,i)  = taiai (a,i,b2,j2) * R1A (b2,j2)
        #tai (a,i) *= LRNORM
         LR1L2_ai (a,i) += tai (a,i)
         DO i1
            tii (i,i1) = tai (a,i) * LT1A (a,i1)
            L_Z_ii (i,i1) += tii (i,i1)
         ENDDO i1
         DO a1
            taa (a,a1) = tai (a,i) * LT1A (a1,i)
            L_Z_aa (a,a1) += taa (a,a1)
         ENDDO a1
      ENDPARDO  j2, b2, a, i

      PARDO  i, a, i2, a2
         REQUEST             R2AA (a,i,a2,i2) i
         REQUEST             T2AA (a,i,a2,i2) i
         GET                 L1A  (i2,a2)
         t1ai (a,i)        = R2AA  (a,i,a2,i2) * L1A (i2,a2)
         t2ai (a,i)        = T2AA  (a,i,a2,i2) * L1A (i2,a2)
        #t1ai (a,i)       *= LRNORM
        #t2ai (a,i)       *= LRNORM
         LR2L1_ai (a,i) += t1ai (a,i)
         L_Z1_ai  (a,i) += t1ai (a,i)
         L_Z2_ai  (a,i) += t2ai (a,i)
      ENDPARDO  i, a, i2, a2

      PARDO  i, a, j2, b2
         REQUEST              R2AB (a,i,b2,j2) i
         REQUEST              T2AB (a,i,b2,j2) i
         GET                  L1A (j2,b2)
         t1ai (a,i)         = R2AB  (a,i,b2,j2) * L1A  (j2,b2)
         t2ai (a,i)         = T2AB  (a,i,b2,j2) * L1A  (j2,b2)
        #t1ai (a,i)        *= LRNORM
        #t2ai (a,i)        *= LRNORM
         LR2L1_ai (a,i) += t1ai (a,i)
         L_Z1_ai  (a,i) += t1ai (a,i)
         L_Z2_ai  (a,i) += t2ai (a,i)
      ENDPARDO  i, a, j2, b2
#
#
#     R2 * L2 --> R2L2_ii
#     T2 * L2 --> T2L2_ii
#
#
      PARDO  i3, a2, a3
         ALLOCATE  Liaia  (*,a2,i3,a3)
         ALLOCATE  Laaia  (*,a2,i3,a3)
         ALLOCATE  L1aaia (*,a2,i3,a3)
         DO i
            REQUEST               L2AA (i,a2,i3,a3) i
            Liaia (i,a3,i3,a2)  = L2AA (i,a2,i3,a3)
           #Liaia (i,a3,i3,a2) *= LRNORM
            Liaia (i,a3,i3,a2) *= 0.5
            DO a
               GET  R1A (a,i)
               t2pppp (a,a3,i3,a2)  = LT1A (a,i) * Liaia (i,a3,i3,a2)
               t3pppp (a,a3,i3,a2)  = R1A  (a,i) * Liaia (i,a3,i3,a2)
               Laaia  (a,a3,i3,a2) += t2pppp (a,a3,i3,a2)
               L1aaia (a,a3,i3,a2) += t3pppp (a,a3,i3,a2)
            ENDDO a
         ENDDO i
         DO i2
            REQUEST               T2AA (a3,i3,a2,i2) i2
            REQUEST               R2AA (a3,i3,a2,i2) i2
            DO i
               tii (i,i2) = Liaia (i,a3,i3,a2) * T2AA (a3,i3,a2,i2)
               tpp (i,i2) = Liaia (i,a3,i3,a2) * R2AA (a3,i3,a2,i2)
               LT2L2_ii (i,i2) += tii (i,i2)
               LR2L2_ii (i,i2) += tpp (i,i2)
               L_Y_ii   (i,i2) += tii (i,i2)
               L_Z_ii   (i,i2) += tpp (i,i2)
            ENDDO i
            DO a
               tai  (a,i2)  = Laaia  (a,a3,i3,a2) * R2AA (a3,i3,a2,i2)
               t1ai (a,i2)  = L1aaia (a,a3,i3,a2) * T2AA (a3,i3,a2,i2)
               t2ai (a,i2)  = Laaia  (a,a3,i3,a2) * T2AA (a3,i3,a2,i2)
               tai  (a,i2) += t1ai (a,i2)
               L_Z1_ai (a,i2) -= tai  (a,i2)
               L_Z2_ai (a,i2) -= t2ai (a,i2)
            ENDDO a
         ENDDO i2
         DEALLOCATE  L1aaia (*,a2,i3,a3)
         DEALLOCATE  Laaia  (*,a2,i3,a3)
         DEALLOCATE  Liaia  (*,a2,i3,a3)
      ENDPARDO  i3, a2, a3

      PARDO  j3, a2, b3
         ALLOCATE  Liajb  (*,a2,j3,b3)
         ALLOCATE  Laajb  (*,a2,j3,b3)
         ALLOCATE  L1aajb (*,a2,j3,b3)
         DO i
            REQUEST               L2AB (i,a2,j3,b3) i
            Liajb (i,a2,j3,b3)  = L2AB (i,a2,j3,b3)
           #Liajb (i,a2,j3,b3) *= LRNORM
            DO a
               GET  R1A (a,i)
               tppqq  (a,a2,j3,b3)  = LT1A (a,i) * Liajb (i,a2,j3,b3)
               t1ppqq (a,a2,j3,b3)  = R1A  (a,i) * Liajb (i,a2,j3,b3)
               Laajb  (a,a2,j3,b3) += tppqq  (a,a2,j3,b3)
               L1aajb (a,a2,j3,b3) += t1ppqq (a,a2,j3,b3)
            ENDDO a
         ENDDO i
         DO i2
            REQUEST                T2AB (a2,i2,b3,j3) i2
            REQUEST                R2AB (a2,i2,b3,j3) i2
            tpqqp  (a2,j3,b3,i2) = T2AB (a2,i2,b3,j3)
            t1pqqp (a2,j3,b3,i2) = R2AB (a2,i2,b3,j3)
            DO i
               tii (i,i2) = Liajb (i,a2,j3,b3) * tpqqp  (a2,j3,b3,i2)
               tpp (i,i2) = Liajb (i,a2,j3,b3) * t1pqqp (a2,j3,b3,i2)
               LT2L2_ii (i,i2) += tii (i,i2)
               LR2L2_ii (i,i2) += tpp (i,i2)
               L_Y_ii   (i,i2) += tii (i,i2)
               L_Z_ii   (i,i2) += tpp (i,i2)
            ENDDO i
            DO a
               tai  (a,i2)  = Laajb  (a,a2,j3,b3) * t1pqqp (a2,j3,b3,i2)
               t1ai (a,i2)  = L1aajb (a,a2,j3,b3) * tpqqp  (a2,j3,b3,i2)
               t2ai (a,i2)  = Laajb  (a,a2,j3,b3) * tpqqp  (a2,j3,b3,i2)
               tai  (a,i2) += t1ai (a,i2)
               L_Z1_ai (a,i2) -= tai  (a,i2)
               L_Z2_ai (a,i2) -= t2ai (a,i2)
            ENDDO a
         ENDDO i2
         DEALLOCATE  L1aajb (*,a2,j3,a3)
         DEALLOCATE  Laajb  (*,a2,j3,a3)
         DEALLOCATE  Liajb  (*,a2,j3,a3)
      ENDPARDO  j3, a2, b3
#
#
#      Z intermediates for Dijab
#
#
      PARDO  a2, i2, a
         GET  R1A (a,i2)
         GET  L1A (i2,a2)
         taa (a,a2)  = R1A (a,i2) * L1A (i2,a2)
        #taa (a,a2) *= LRNORM
         DO i
            tai (a,i) = taa (a,a2) * LT1A (a2,i)
            L_Z1_ai (a,i) -= tai (a,i)
         ENDDO i
      ENDPARDO  a2, i2, a

      PARDO  a2, i2, i
         GET  R1A (a2,i)
         GET  L1A (i2,a2)
         tii (i2,i)  = L1A (i2,a2) * R1A (a2,i)
        #tii (i2,i) *= LRNORM
         DO a
            tai (a,i) = LT1A (a,i2) * tii (i2,i)
            L_Z1_ai (a,i) -= tai (a,i)
         ENDDO a
      ENDPARDO  a2, i2, i

      PARDO  a2, i2, a
         GET  L1A (i2,a2)
         taa (a,a2)  = LT1A (a,i2) * L1A (i2,a2)
        #taa (a,a2) *= LRNORM
         DO i
            tai (a,i) = taa (a,a2) * LT1A (a2,i)
            L_Z2_ai (a,i) -= tai (a,i)
         ENDDO i
      ENDPARDO  a2, i2, a

      PARDO  a, i
         GET          L1A (i,a)
         tai (a,i)  = L1A (i,a)
         tia (i,a)  = L1A (i,a)
        #tai (a,i) *= LRNORM
        #tia (i,a) *= LRNORM
         DO i2
            GET  R1A (a,i2)
            tii  (i,i2)  = tia (i,a) * LT1A (a,i2)
            t1ii (i,i2)  = tia (i,a) * R1A  (a,i2)
            L_Y_ii (i,i2) += tii  (i,i2)
            L_Z_ii (i,i2) += t1ii (i,i2)
         ENDDO i2
         DO a2
            GET  R1A (a2,i)
            taa  (a,a2) = tai (a,i) * LT1A (a2,i)
            t1aa (a,a2) = tai (a,i) * R1A  (a2,i)
            L_Y_aa (a,a2) += taa  (a,a2)
            L_Z_aa (a,a2) += t1aa (a,a2)
         ENDDO a2
      ENDPARDO  a, i
#
#
#     R2 * L2 --> R2L2_aa
#     T2 * L2 --> T2L2_aa
#
#
      PARDO  a3, i2, i3
         ALLOCATE  Laiai  (*,i2,a3,i3)
         ALLOCATE  Liiai  (*,i2,a3,i3)
         ALLOCATE  L1iiai (*,i2,a3,i3)
         DO a
            REQUEST               L2AA (i2,a,i3,a3) a
            Laiai (a,i2,a3,i3)  = L2AA (i2,a,i3,a3)
           #Laiai (a,i2,a3,i3) *= LRNORM
            Laiai (a,i2,a3,i3) *= -0.5
            DO i
               GET  R1A (a,i)
               tpppp  (i,i2,a3,i3)  = LT1A (a,i) * Laiai (a,i2,a3,i3)
               t1pppp (i,i2,a3,i3)  = R1A  (a,i) * Laiai (a,i2,a3,i3)
               Liiai  (i,i2,a3,i3) += tpppp (i,i2,a3,i3)
               L1iiai (i,i2,a3,i3) += t1pppp (i,i2,a3,i3)
            ENDDO i
         ENDDO a
         DO a2
            REQUEST                R2AA (a3,i3,a2,i2) a2
            REQUEST                T2AA (a3,i3,a2,i2) a2
            tiaia  (i2,a3,i3,a2) = R2AA (a3,i3,a2,i2)
            t1iaia (i2,a3,i3,a2) = T2AA (a3,i3,a2,i2)
            DO a
               taa (a,a2)  = Laiai (a,i2,a3,i3) * t1iaia (i2,a3,i3,a2)
               tpp (a,a2)  = Laiai (a,i2,a3,i3) * tiaia  (i2,a3,i3,a2)
               LT2L2_aa (a,a2) += taa (a,a2)
               LR2L2_aa (a,a2) += tpp (a,a2)
               L_Y_aa   (a,a2) -= taa (a,a2)
               L_Z_aa   (a,a2) -= tpp (a,a2)
            ENDDO a
            DO i
               tai  (a2,i)  = Liiai  (i,i2,a3,i3) * tiaia  (i2,a3,i3,a2)
               t1ai (a2,i)  = L1iiai (i,i2,a3,i3) * t1iaia (i2,a3,i3,a2)
               t2ai (a2,i)  = Liiai  (i,i2,a3,i3) * t1iaia (i2,a3,i3,a2)
               tai  (a2,i) += t1ai (a2,i)
               L_Z1_ai (a2,i) += tai  (a2,i)
               L_Z2_ai (a2,i) += t2ai (a2,i)
            ENDDO i
         ENDDO a2
         DEALLOCATE  L1iiai (*,i2,a3,i3)
         DEALLOCATE  Liiai  (*,i2,a3,i3)
         DEALLOCATE  Laiai  (*,i2,a3,i3)
      ENDPARDO  a3, i2, i3

      PARDO  b3, i2, j3
         ALLOCATE  Laibj  (*,i2,b3,j3)
         ALLOCATE  Liibj  (*,i2,b3,j3)
         ALLOCATE  L1iibj (*,i2,b3,j3)
         DO a
            REQUEST               L2AB (i2,a,j3,b3) a
            Laibj (a,i2,b3,j3)  = L2AB (i2,a,j3,b3)
           #Laibj (a,i2,b3,j3) *= LRNORM
            Laibj (a,i2,b3,j3) *= -1.0
            DO i
               GET  R1A (a,i)
               tppqq  (i,i2,b3,j3)  = LT1A (a,i) * Laibj (a,i2,b3,j3)
               t1ppqq (i,i2,b3,j3)  = R1A  (a,i) * Laibj (a,i2,b3,j3)
               Liibj  (i,i2,b3,j3) += tppqq  (i,i2,b3,j3)
               L1iibj (i,i2,b3,j3) += t1ppqq (i,i2,b3,j3)
            ENDDO i
         ENDDO a
         DO a2
            REQUEST                R2AB  (a2,i2,b3,j3) a2
            REQUEST                T2AB  (a2,i2,b3,j3) a2
            tpqqp  (i2,b3,j3,a2) = R2AB  (a2,i2,b3,j3)
            t1pqqp (i2,b3,j3,a2) = T2AB  (a2,i2,b3,j3)
            DO a
               taa (a,a2)  = Laibj (a,i2,b3,j3) * t1pqqp (i2,b3,j3,a2)
               tpp (a,a2)  = Laibj (a,i2,b3,j3) * tpqqp  (i2,b3,j3,a2)
               LT2L2_aa (a,a2) += taa (a,a2)
               LR2L2_aa (a,a2) += tpp (a,a2)
               L_Y_aa   (a,a2) -= taa (a,a2)
               L_Z_aa   (a,a2) -= tpp (a,a2)
            ENDDO a
            DO i
               tai  (a2,i)  = Liibj  (i,i2,b3,j3) * tpqqp  (i2,b3,j3,a2)
               t1ai (a2,i)  = L1iibj (i,i2,b3,j3) * t1pqqp (i2,b3,j3,a2)
               t2ai (a2,i)  = Liibj  (i,i2,b3,j3) * t1pqqp (i2,b3,j3,a2)
               tai  (a2,i) += t1ai (a2,i)
               L_Z1_ai (a2,i) += tai  (a2,i)
               L_Z2_ai (a2,i) += t2ai (a2,i)
            ENDDO i
         ENDDO a2
         DEALLOCATE  L1iibj (*,i2,b3,j3)
         DEALLOCATE  Liibj  (*,i2,b3,j3)
         DEALLOCATE  Laibj  (*,i2,b3,j3)
      ENDPARDO  b3, i2, j3
#
#
#      Tau intermediates
#
#
      PARDO  a, a1, i, i1
         REQUEST               R2AA (a,i,a1,i1) a
         GET                   R1A  (a,i)
         GET                   R1A  (a1,i1)
         GET                   R1A  (a,i1)
         GET                   R1A  (a1,i)
         t1ai (a1,i)         = R1A  (a1,i)
         t2ai (a,i1)         = R1A  (a,i1) 
         t3ai (a1,i1)        = R1A  (a1,i1)
         
         taiai  (a,i,a1,i1)  = R1A  (a,i)  ^ LT1A (a1,i1)
         t1aiai (a,i,a1,i1)  = LT1A (a,i)  ^ t3ai (a1,i1)
         t2aiai (a,i1,a1,i)  = t2ai (a,i1) ^ LT1A (a1,i)
         t3aiai (a,i1,a1,i)  = LT1A (a,i1) ^ t1ai (a1,i)
         
         taiai  (a,i,a1,i1) += t1aiai (a,i,a1,i1)
         taiai  (a,i,a1,i1) += R2AA   (a,i,a1,i1)
         t2aiai (a,i1,a1,i) += t3aiai (a,i1,a1,i)
         t2aiai (a,i1,a1,i) *= -1.0
         tpppp  (a,i,a1,i1)  = t2aiai (a,i1,a1,i)

         taiai  (a,i,a1,i1) += tpppp (a,i,a1,i1)
         tiiaa  (i,i1,a,a1)  = taiai (a,i,a1,i1)
         PREPARE  RTAU_aa (a,i,a1,i1) += taiai (a,i,a1,i1)

         DO i2
         DO i3
            REQUEST               L2AA (i2,a,i3,a1) i3
            taaii (a,a1,i2,i3)  = L2AA (i2,a,i3,a1)
            tiiii (i,i1,i2,i3)  = tiiaa (i,i1,a,a1) * taaii (a,a1,i2,i3)
           #tiiii (i,i1,i2,i3) *= LRNORM
            tiiii (i,i1,i2,i3) *= 0.5
            PUT  L2RTAU_iiii (i,i1,i2,i3) += tiiii (i,i1,i2,i3)
         ENDDO i3
         ENDDO i2
      ENDPARDO  a, a1, i, i1

      PARDO  a, b1, i, j1
         REQUEST               R2AB (a,i,b1,j1) a
         GET                   R1A  (a,i)
         GET                   R1A  (b1,j1)
         tbj (b1,j1)         = R1A  (b1,j1)

         taiai  (a,i,b1,j1)  = R1A  (a,i)  ^ LT1A (b1,j1)
         t1aiai (a,i,b1,j1)  = LT1A (a,i)  ^ tbj  (b1,j1)
         taiai  (a,i,b1,j1) += t1aiai (a,i,b1,j1)
         taiai  (a,i,b1,j1) += R2AB   (a,i,b1,j1)
         tiiaa  (i,j1,a,b1)  = taiai (a,i,b1,j1)

         PREPARE  RTAU_ab (a,i,b1,j1) += taiai (a,i,b1,j1)

         DO i2
         DO j3
            REQUEST               L2AB (i2,a,j3,b1) j3
            tabij (a,b1,i2,j3)  = L2AB (i2,a,j3,b1)
            tijij (i,j1,i2,j3)  = tiiaa (i,j1,a,b1) * tabij (a,b1,i2,j3)
           #tijij (i,j1,i2,j3) *= LRNORM
            PUT  L2RTAU_ijij (i,j1,i2,j3) += tijij (i,j1,i2,j3)
         ENDDO j3
         ENDDO i2
      ENDPARDO  a, b1, i, j1

      PARDO  a, a1, i, i1
         REQUEST               T2AA (a,i,a1,i1) i1
         tai  (a1,i1)        = LT1A (a1,i1)
         t1ai (a1,i)         = LT1A (a1,i)

         taiai  (a,i,a1,i1)  = LT1A (a,i)  ^ tai  (a1,i1)
         t1aiai (a,i,a1,i1)  = LT1A (a,i1) ^ t1ai (a1,i)
         taiai  (a,i,a1,i1) += T2AA (a,i,a1,i1)
         taiai  (a,i,a1,i1) -= t1aiai(a,i,a1,i1)
         tiiaa  (i,i1,a,a1)  = taiai (a,i,a1,i1)

         PREPARE  TAU_aa (a,i,a1,i1) += taiai (a,i,a1,i1)

         DO i2
         DO i3
            REQUEST               L2AA (i2,a,i3,a1) i3
            taaii (a,a1,i2,i3)  = L2AA (i2,a,i3,a1)
            tiiii (i,i1,i2,i3)  = tiiaa (i,i1,a,a1) * taaii (a,a1,i2,i3)
           #tiiii (i,i1,i2,i3) *= LRNORM
            tiiii (i,i1,i2,i3) *= 0.5
            PUT  L2TTAU_iiii (i,i1,i2,i3) += tiiii (i,i1,i2,i3)
         ENDDO i3
         ENDDO i2
      ENDPARDO  a, a1, i, i1

      PARDO  a, b, i, j
         REQUEST            T2AB (a,i,b,j) j
         tbj (b,j)        = LT1A (b,j)
         taibj (a,i,b,j)  = LT1A (a,i) ^ tbj (b,j)
         taibj (a,i,b,j) += T2AB (a,i,b,j)
         tijab (i,j,a,b)  = taibj (a,i,b,j)

         PREPARE  TAU_ab (a,i,b,j) += taibj (a,i,b,j)
         DO i1
         DO j1
            REQUEST              L2AB (i1,a,j1,b) j1
            tabij (a,b,i1,j1)  = L2AB (i1,a,j1,b)
            tijij (i,j,i1,j1)  = tijab (i,j,a,b) * tabij (a,b,i1,j1)
           #tijij (i,j,i1,j1) *= LRNORM
            PUT  L2TTAU_ijij (i,j,i1,j1) += tijij (i,j,i1,j1)
         ENDDO j1
         ENDDO i1
      ENDPARDO  a, b, i, j

      CREATE  DIS_OO1_A
      CREATE  DIS_OO2_A
      CREATE  DIS_OO3_A
      CREATE  DIS_OO4_A
      CREATE  DIS_VV1_A
      CREATE  DIS_VV2_A
      CREATE  DIS_VV3_A
      CREATE  DIS_VV4_A
      CREATE  DIS_VO1_A
      CREATE  DIS_VO2_A
      CREATE  DIS_VO3_A
      CREATE  DIS_VO4_A
      EXECUTE  SIP_BARRIER

      DO a
      DO a1
         taa  (a,a1) = LR2L2_aa (a,a1)
         t1aa (a,a1) = LT2L2_aa (a,a1)
         taa2 (a,a1) = L_Y_aa   (a,a1)
         t3aa (a,a1) = L_Z_aa   (a,a1)
         PUT  DIS_VV1_A (a,a1) = taa  (a,a1)
         PUT  DIS_VV2_A (a,a1) = t1aa (a,a1)
         PUT  DIS_VV3_A (a,a1) = taa2 (a,a1)
         PUT  DIS_VV4_A (a,a1) = t3aa (a,a1)
      ENDDO a1
      ENDDO a

      DO a
      DO i
         tai  (a,i) = LR1L2_ai (a,i)
         t1ai (a,i) = LR2L1_ai (a,i)
         t2ai (a,i) = L_Z1_ai  (a,i)
         t3ai (a,i) = L_Z2_ai  (a,i)
         PUT  DIS_VO1_A (a,i) = tai  (a,i)
         PUT  DIS_VO2_A (a,i) = t1ai (a,i)
         PUT  DIS_VO3_A (a,i) = t2ai (a,i)
         PUT  DIS_VO4_A (a,i) = t3ai (a,i)
      ENDDO i
      ENDDO a

      DO i
      DO i1
         tii  (i,i1) = LR2L2_ii (i,i1)
         t1ii (i,i1) = LT2L2_ii (i,i1)
         t2ii (i,i1) = L_Y_ii   (i,i1)
         t3ii (i,i1) = L_Z_ii   (i,i1)
         PUT  DIS_OO1_A (i,i1) = tii  (i,i1)
         PUT  DIS_OO2_A (i,i1) = t1ii (i,i1)
         PUT  DIS_OO3_A (i,i1) = t2ii (i,i1)
         PUT  DIS_OO4_A (i,i1) = t3ii (i,i1)
      ENDDO i1
      ENDDO i

      EXECUTE  SIP_BARRIER

      DO a
      DO a1
         GET           DIS_VV1_A (a,a1)
         GET           DIS_VV2_A (a,a1)
         GET           DIS_VV3_A (a,a1)
         GET           DIS_VV4_A (a,a1)
         taa  (a,a1) = DIS_VV1_A (a,a1)
         t1aa (a,a1) = DIS_VV2_A (a,a1)
         taa2 (a,a1) = DIS_VV3_A (a,a1)
         t3aa (a,a1) = DIS_VV4_A (a,a1)
         LR2L2_aa (a,a1) =  taa  (a,a1)
         LT2L2_aa (a,a1) =  t1aa (a,a1)
         L_Y_aa   (a,a1) =  taa2 (a,a1)
         L_Z_aa   (a,a1) =  t3aa (a,a1)
      ENDDO a1
      ENDDO a

      DO a
      DO i
         GET          DIS_VO1_A (a,i)
         GET          DIS_VO2_A (a,i)
         GET          DIS_VO3_A (a,i)
         GET          DIS_VO4_A (a,i)
         tai  (a,i) = DIS_VO1_A (a,i)
         t1ai (a,i) = DIS_VO2_A (a,i)
         t2ai (a,i) = DIS_VO3_A (a,i)
         t3ai (a,i) = DIS_VO4_A (a,i)
         LR1L2_ai (a,i) = tai  (a,i)
         LR2L1_ai (a,i) = t1ai (a,i)
         L_Z1_ai  (a,i) = t2ai (a,i)
         L_Z2_ai  (a,i) = t3ai (a,i)
      ENDDO i
      ENDDO a

      DO i
      DO i1
         GET           DIS_OO1_A (i,i1)
         GET           DIS_OO2_A (i,i1)
         GET           DIS_OO3_A (i,i1)
         GET           DIS_OO4_A (i,i1)
         tii  (i,i1) = DIS_OO1_A (i,i1)
         t1ii (i,i1) = DIS_OO2_A (i,i1)
         t2ii (i,i1) = DIS_OO3_A (i,i1)
         t3ii (i,i1) = DIS_OO4_A (i,i1)
         LR2L2_ii (i,i1) =  tii  (i,i1)
         LT2L2_ii (i,i1) =  t1ii (i,i1)
         L_Y_ii   (i,i1) =  t2ii (i,i1)
         L_Z_ii   (i,i1) =  t3ii (i,i1)
      ENDDO i1
      ENDDO i

      EXECUTE  SIP_BARRIER
      DELETE  DIS_OO1_A
      DELETE  DIS_OO2_A
      DELETE  DIS_OO3_A
      DELETE  DIS_OO4_A
      DELETE  DIS_VV1_A
      DELETE  DIS_VV2_A
      DELETE  DIS_VV3_A
      DELETE  DIS_VV4_A
      DELETE  DIS_VO1_A
      DELETE  DIS_VO2_A
      DELETE  DIS_VO3_A
      DELETE  DIS_VO4_A
#
#
#          ...ready!
#     
#     
      ENDPROC  EOM_TWO_DENS_INT
#-------------------------------------------------------------------------




#-------------------------------------------------------------------------
#
#     ----------------------
      PROC  COMPUTE_GRADIENT
#     ----------------------
#
#
      CREATE  L2RTAU_iiii
      CREATE  L2RTAU_ijij
      CREATE  L2TTAU_iiii
      CREATE  L2TTAU_ijij

      ALLOCATE  LR2L2_ii (*,*)
      ALLOCATE  LT2L2_ii (*,*)
      ALLOCATE  LR2L2_aa (*,*)
      ALLOCATE  LT2L2_aa (*,*)
      ALLOCATE  LR1L2_ai (*,*)
      ALLOCATE  LR2L1_ai (*,*)
      ALLOCATE  L_Z1_ai  (*,*)
      ALLOCATE  L_Z2_ai  (*,*)
      ALLOCATE  L_Y_aa   (*,*)
      ALLOCATE  L_Y_ii   (*,*)
      ALLOCATE  L_Z_aa   (*,*)
      ALLOCATE  L_Z_ii   (*,*)

      CREATE  Gmi_a
      CREATE  Gae_a

      CREATE  Dij_a
      CREATE  Dab_a

      CREATE  DOR_ii
      CREATE  DOR_aa

      CREATE  Iij_aa
      CREATE  Iab_aa
      CREATE  Xai_aa
      CREATE  Iai_aa
      CREATE  Iia_aa
      EXECUTE  SIP_BARRIER

      CALL  GAE
      CALL  GMI
     #CALL  EOM_TWO_DENS_INT
      EXECUTE  SERVER_BARRIER

     #CALL  DABA
     #CALL  DIJA

           CREATE  I3AA
           CREATE  I3AB
           CREATE  Dii
           CREATE  Daa
      execute server_barrier  
#
# Compute contributions to one-particle intermediates from DAB and DIJ 
# Compute the contributions to Iaa and Iii coming from the Fock matrix 
#
        #CALL I11 
        #CALL  IFOCK_PP
#
#
#          ...ready!
#
#
      ENDPROC  COMPUTE_GRADIENT
#-------------------------------------------------------------------------



#-------------------------------------------------------------------------
#                                                                        #
#                      \--------------------------/                      #
#                      |    BEGIN MAIN PROGRAM    |                      #
#                      /--------------------------\                      #
#                                                                        #
#-------------------------------------------------------------------------
#                                                                        #
#     ---------- 
      PROC XPROP 
#     ---------- 
#                                                                        #
      execute load_balance_off 
      ZERO      = 0.0
      ONE       = 1.0
      TWO       = 2.0
      THREE     = 3.0
      ONEHALF   = 0.5
      R0_THRESH = 0.0000001

      ALLOCATE  GRDSECM (*,*)
      ALLOCATE  EXCSECM (*,*)
      ALLOCATE  GRDQUAD (*,*)
      ALLOCATE  EXCQUAD (*,*)
#
#
#
#             Compute pieces for the dipole moment
#
#
#
      CALL  CREATE_XARRAYS  
      CALL  HF_DENSITY

      tmpnuc = 0.0
      DO jatom
         tmpnuc = tmpnuc + 1.0
      ENDDO jatom

      dipnucx = tmpnuc
      dipnucy = dipnucx
      dipnucz = dipnucy

      EXECUTE  NUC_DIPOLE_MOMENT  ONE    dipnucx
      EXECUTE  NUC_DIPOLE_MOMENT  TWO    dipnucy
      EXECUTE  NUC_DIPOLE_MOMENT  THREE  dipnucz

      R0 = 1.0
      CALL  PUT_IN_Rk # Get the corresponding R vector
      CALL  R0_COMPUTE
      OLD_R0 = R0
      CALL  COMP_R_NORM
      LOGRIGHT = ONE
      CALL  PUT_IN_Lk # Put in Lambda
      LOGRIGHT = ZERO

      GROUNDSTATE = ONE # Lambda and R = 0
      R0 = 1.0
      LRNORM = 1.0
      CALL  ZERO_DENSITY
      CALL  COMPUTE_DENSITY
      CALL  BACK_TRANS_COMP_DIP

      proot = iroot - 1.0
      IF proot == 1.0
         inext = 0.0
         CALL  WRITE_TO_JOBARC
      ENDIF
      IF proot > 1.0
         inext += -1.0
      ENDIF

     #CALL  PRINT_OUT_PIECES

      DIP_GRD_X  = DIP_MOM_X
      DIP_GRD_Y  = DIP_MOM_Y
      DIP_GRD_Z  = DIP_MOM_Z
      DIP_GRD_X += dipnucx
      DIP_GRD_Y += dipnucy
      DIP_GRD_Z += dipnucz

      EXECUTE  PRINT_SCALAR  ZERO
      EXECUTE  PRINT_SCALAR  DIP_GRD_X
      EXECUTE  PRINT_SCALAR  DIP_GRD_Y
      EXECUTE  PRINT_SCALAR  DIP_GRD_Z

      CALL  COMPUTE_MOMENTS
      GROUNDSTATE = ZERO
#
#
#
#             Excited states!
#
#
#
      POLTOTXX = 0.0
      POLTOTYY = 0.0
      POLTOTZZ = 0.0
      POLTOTXY = 0.0
      POLTOTXZ = 0.0
      POLTOTYZ = 0.0

        #CALL  XPROP_AMPL_PRINT
#
#
#
#             Set the "logic" to compute the Right Transition
#             Density Matrix.  Then put in LAMBDA arrays, then 
#             compute the Right Density
#
#             Then we back transform the density, and compute
#             the transition moments
#
#             NOTE:  One can print out the Density matrix if they want
#
#
#
         LOGRIGHT = ONE

        #CALL  PUT_IN_Lk                      # This one puts in LAMBDA
         R0 = OLD_R0
         LRNORM = RNORM
         CALL  ZERO_DENSITY
         CALL  COMPUTE_DENSITY
         CALL  BACK_TRANS_COMP_DIP

         inext += 1
         CALL  WRITE_TO_JOBARC

         DIP_MOM_X_R = DIP_MOM_X
         DIP_MOM_Y_R = DIP_MOM_Y
         DIP_MOM_Z_R = DIP_MOM_Z

        #CALL  PRINT_OUT_PIECES
#
#
#
#             Set the "logic" to compute the Left Transition
#             Density Matrix.  Then put in Lk arrays, then 
#             compute the Right Density
#        
#             Then we back transform the density, and compute
#             the transition moments
#
#             NOTE:  One can print out the Density matrix if they want
#
#
         LOGRIGHT = ZERO
         R0       = 1.0

         CALL  PUT_IN_Lk # Put in the current L vector
         CALL  COMP_L_NORM
         EXECUTE  PRINT_SCALAR  RNORM
         EXECUTE  PRINT_SCALAR  LNORM
         LRNORM = LNORM
         CALL  ZERO_DENSITY
         CALL  COMPUTE_DENSITY
         CALL  BACK_TRANS_COMP_DIP

         inext += 1
         CALL  WRITE_TO_JOBARC

         DIP_MOM_X_L = DIP_MOM_X
         DIP_MOM_Y_L = DIP_MOM_Y
         DIP_MOM_Z_L = DIP_MOM_Z

        #CALL  PRINT_OUT_PIECES
#
#
#
#             Compute the excited state dipole moment
#
#
#
         LOGRIGHT    = ONE
         R0          = OLD_R0
         LRNORM      = LNORM * RNORM
#
#
#      Watson, Begin computing the gradient if we need it!
#
#
         EXCITESTATE = ONE
         CALL  ZERO_DENSITY
         CALL  COMPUTE_DENSITY

         GROUNDSTATE = ONE
         CALL  BACK_TRANS_COMP_DIP
         inext += 1
         CALL  WRITE_TO_JOBARC
         GROUNDSTATE = ZERO

        #CALL  PRINT_OUT_PIECES

         DIP_EXC_X  = DIP_MOM_X
         DIP_EXC_Y  = DIP_MOM_Y
         DIP_EXC_Z  = DIP_MOM_Z
         DIP_EXC_X += dipnucx
         DIP_EXC_Y += dipnucy
         DIP_EXC_Z += dipnucz

         EXECUTE  PRINT_SCALAR  ZERO
         EXECUTE  PRINT_SCALAR  DIP_EXC_X
         EXECUTE  PRINT_SCALAR  DIP_EXC_Y
         EXECUTE  PRINT_SCALAR  DIP_EXC_Z

         CALL  COMPUTE_MOMENTS
         EXECUTE  SIP_BARRIER

         IF comp_grad == 0.0
            DELETE  R1A
            DELETE  R1B
            DELETE  L1A
            DELETE  L1B

            DELETE  DENS_VV_A
            DELETE  DENS_OO_A
            DELETE  DENS_OV_A
            DELETE  DENS_VO_A
         ENDIF

         IF comp_grad == 1.0

            #izero_ints = 1.0
            #CALL  ZERO_DENSITY

             CALL  CALC_XI
             CALL  SOLVE_ZETA # overwrites lambda with Zeta!
             EXECUTE  SERVER_BARRIER

             LOGRIGHT = ZERO
             R0 = 1.0
             CALL  COMPUTE_DENSITY
             EXECUTE  SIP_BARRIER
             LOGRIGHT = ONE
             R0 = OLD_R0

             GROUNDSTATE = ONE
             CALL  BACK_TRANS_COMP_DIP

            #CALL  PRINT_OUT_PIECES

             DIP_MOM_X += dipnucx
             DIP_MOM_Y += dipnucy
             DIP_MOM_Z += dipnucz

             EXECUTE  PRINT_SCALAR  ZERO
             EXECUTE  PRINT_SCALAR  DIP_MOM_X
             EXECUTE  PRINT_SCALAR  DIP_MOM_Y
             EXECUTE  PRINT_SCALAR  DIP_MOM_Z

             CALL  COMPUTE_MOMENTS

            #CALL  COMPUTE_GRADIENT

             LOGRIGHT = ZERO
             EXECUTE  PRINT_SCALAR  ZERO
             EXECUTE  PRINT_SCALAR  ZERO
             EXECUTE  PRINT_SCALAR  ZERO
             EXECUTE  PRINT_SCALAR  ZERO
             EXECUTE  PRINT_SCALAR  ZERO
             EXECUTE  PRINT_SCALAR  ZERO
             EXECUTE  PRINT_SCALAR  ZERO
             EXECUTE  PRINT_SCALAR  ZERO
             EXECUTE  PRINT_SCALAR  ZERO
             EXECUTE  PRINT_SCALAR  ZERO
             EXECUTE  SERVER_BARRIER
             CALL  PUT_IN_Lk

             izero_ints = 0.0
             comp_grad  = 0.0 # prevent more gradients
            #exit # EOM iterations
         ENDIF

         EXCITESTATE = ZERO
#
#
#
#             Finally, compute the total transition moments,
#             oscillator strengths, electric polarizabilities,
#             total electric polarizabilities, and second
#             moments.  Then print the data.
#
#
#
         DIP_MOM_X = DIP_MOM_X_R * DIP_MOM_X_L
         DIP_MOM_Y = DIP_MOM_Y_R * DIP_MOM_Y_L
         DIP_MOM_Z = DIP_MOM_Z_R * DIP_MOM_Z_L

         OSC_STREN_X = OMEGA2 * DIP_MOM_X
         OSC_STREN_Y = OMEGA2 * DIP_MOM_Y
         OSC_STREN_Z = OMEGA2 * DIP_MOM_Z

        #OSC_STREN1 = OSC_STREN_X * OSC_STREN_X
        #OSC_STREN2 = OSC_STREN_Y * OSC_STREN_Y
        #OSC_STREN3 = OSC_STREN_Z * OSC_STREN_Z
         OSC_STREN  = OSC_STREN_X
         OSC_STREN += OSC_STREN_Y
         OSC_STREN += OSC_STREN_Z

        #EXECUTE  SQUARE_ROOT   OSC_STREN  ONEHALF

         DIPXY = DIP_MOM_X_R * DIP_MOM_Y_R
         DIPXZ = DIP_MOM_X_R * DIP_MOM_Z_R
         DIPYZ = DIP_MOM_Y_R * DIP_MOM_Z_R

         POLXX = TWO * DIP_MOM_X
         POLYY = TWO * DIP_MOM_Y
         POLZZ = TWO * DIP_MOM_Z
         POLXY = TWO * DIPXY
         POLXZ = TWO * DIPXZ
         POLYZ = TWO * DIPYZ
         POLXX = POLXX / OMEGA
         POLYY = POLYY / OMEGA
         POLZZ = POLZZ / OMEGA
         POLXY = POLXY / OMEGA
         POLXZ = POLXZ / OMEGA
         POLYZ = POLYZ / OMEGA
         POLTOTXX += POLXX
         POLTOTYY += POLYY
         POLTOTZZ += POLZZ
         POLTOTXY += POLXY
         POLTOTXZ += POLXZ
         POLTOTYZ += POLYZ

         CALL  PRINT_XPROP_DATA

      DEALLOCATE  GRDSECM (*,*)
      DEALLOCATE  EXCSECM (*,*)
      DEALLOCATE  GRDQUAD (*,*)
      DEALLOCATE  EXCQUAD (*,*)

      EXECUTE SIP_BARRIER
      CALL  DELETE_XARRAYS
#
#
#
#     ------------- 
      ENDPROC XPROP 
#------------------------------------------------------------------------



#------------------------------------------------------------------------
#
#
     PROC AMPL_PRINT
#    ---------------
#
      amplthresh=0.1
      allocate lai(*,*)
      allocate lbj(*,*)
#
      etemp1=0.0
      etemp2=0.0
      etemp3=0.0
      etemp4=0.0
      etemp5=0.0
#
      sum1=0.0
#
      proot = iroot - 1 
      execute print_scalar proot  
#
      DO i
      DO a
         GET  VCE1A (a,i)
         tai (a,i) = VCE1A (a,i)
         EXECUTE  C1_PRINT  tai  amplthresh
      ENDDO a
      ENDDO i

      DO a
      DO i
      DO a1
      DO i1
         REQUEST  VCE2AA (a,i,a1,i1) i1
         taiai (a,i,a1,i1) = VCE2AA (a,i,a1,i1)
         EXECUTE  C2AA_PRINT  taiai  amplthresh
      ENDDO i1
      ENDDO a1
      ENDDO i
      ENDDO a

      DO a
      DO i
      DO b
      DO j
         REQUEST  VCE2AB (a,i,b,j) j
         taibj (a,i,b,j) = VCE2AB (a,i,b,j)
         EXECUTE  C2AB_PRINT  taibj amplthresh
      ENDDO j
      ENDDO b
      ENDDO i
      ENDDO a

      PARDO a, i
         get VCE1A(a,i)
         tia(i,a)=VCE1A(a,i)
         rootcount = 0
         DO kroot
            rootcount += 1
            if rootcount == proot
               PUT  L1A_VECS (i,a,kroot) = tia (i,a)
            endif #rootcount ==proot
         ENDDO kroot
      ENDPARDO a, i

      PARDO a, i, a1, i1
         request VCE2AA(a,i,a1,i1) i1
         tiaia(i,a,i1,a1)=VCE2AA(a,i,a1,i1)
         rootcount = 0
         DO kroot 
            rootcount += 1
            if rootcount == proot
               PREPARE  L2AA_VECS (i,a,i1,a1,kroot) = tiaia (i,a,i1,a1)
            endif #rootcount ==proot
         ENDDO kroot
      ENDPARDO a, i, a1, i1

      PARDO a, i, b, j
         request VCE2AB(a,i,b,j) j
         tiajb(i,a,j,b)=VCE2AB(a,i,b,j)
         rootcount = 0
         DO kroot 
            rootcount += 1
            if rootcount == proot
               PREPARE  L2AB_VECS (i,a,j,b,kroot) = tiajb(i,a,j,b)
            endif #rootcount ==proot
         ENDDO kroot
      ENDPARDO a, i, b, j

      execute  sip_barrier

      deallocate lai(*,*)
      deallocate lbj(*,*)

      execute server_barrier

# Calculate properties for this root 
      CALL XPROP 
#
     ENDPROC AMPL_PRINT
#
# ----------------------------------------------------------------------
#
#

#
#-------------------------------------------------------------------------
#
#-------------------------------------------------------------------------
#                                                                        #
#                      \--------------------------/                      #
#                      |    BEGIN MAIN PROGRAM    |                      #
#                      /--------------------------\                      #
#                                                                        #
#-------------------------------------------------------------------------
#                                                                        #
#                                                                        #
# Read data from BLOCK_DATA -> to be partially replaced 
#
#
      ZERO = 0.0
      izero_ints= 0.0
      inext = 0.0 # Very important for writing densities
      comp_grad = 1.0 # eventually set to 1.0 when nroot == root_max (root_interest)
      root_thresh=0.0005
      create HBAR_aa
      create HBAR_ii
      create HBAR_ia
      create HBAR_jb
      create VSTART1A1
      create VSTART1A2
      create VSTART1A3
      create VSTART1A4
      create VSTART1A5
      create VSTART1A6
      create VSTART1A7
      create VSTART1A8
      create VSTART1A9
      create VSTART1A10
      create VSTART1A11
      create VSTART1A12
      create VSTART1B1
      create VSTART1B2
      create VSTART1B3
      create VSTART1B4
      create VSTART1B5
      create VSTART1B6
      create VSTART1B7
      create VSTART1B8
      create VSTART1B9
      create VSTART1B10
      create VSTART1B11
      create VSTART1B12
      create Niijj
      create Niiii
#
      create t1a
      create t1b
#
      CREATE  A1A
      CREATE  REE
      CREATE  LEE
      CREATE  LEE_resid
      CREATE  R1A_VECS # Watson added
      CREATE  L1A_VECS # Watson added

      execute server_barrier

       DO indone
       DO kroot
          tee      (kroot,indone) = 0.0
          PUT  LEE (kroot,indone) = tee (kroot,indone)
          PUT  REE (kroot,indone) = tee (kroot,indone)
       ENDDO kroot
       ENDDO indone

       CALL READ_AMP
       CALL TRAN_UHF 
      execute server_barrier
       CALL HBAR 
      execute server_barrier
#
# Create arrays used and zero out some scalars 
# -------------------------------------------- 
#
       call cre_arrays
       create VC1A 
       create VCH1A 
       create VTEMP1A 
#
       root1=100000.0
       root2=100000.0
       root3=100000.0
       root4=100000.0
       root5=100000.0
       root6=100000.0
       root7=100000.0
       root8=100000.0
       root9=100000.0
       root10=100000.0
       root11=100000.0
       root12=100000.0
#
      #eomthresh= 0.0001
      #rootmax=1.0

       rootmax=eom_roots  # Watson Added
       eomthresh=eom_tol  #
       EXECUTE  PRINT_SCALAR  eom_roots
       EXECUTE  PRINT_SCALAR  eom_tol
       maxcycle=100.0
#
       nsp=1.0
       iroot=1.0
       ispdim=1.0
       imaxc=0.0
#
# Print out initial guess 
# ----------------------- 
       call PRINT_INITIAL
#
# Initialize some arrays 
# ---------------------- 
       call copy_starttoev
#
# Diagonalize some arrays used in the AOLADDER term later 
# ------------------------------------------------------- 
      #execute load_balance_off 
       call CONVER
      #execute load_balance_on 
#
# Loop over spdim --> subspace 
# ----------------------------  
       DO spdim
#
          imaxc    += 1.0
          if spdim >= 2
             call copy_toVCactual
             execute server_barrier 
          endif
#
          call HCmult
          execute server_barrier 
#
          call Aconstr
          execute server_barrier 
#
          call Adiag
          execute server_barrier 
#
          call SELVEC
#
          execute sip_barrier
          execute server_barrier
#
          call RESID_ALL
          execute server_barrier 
#
          call SYMMETR_A
          call SYMMETR_B
          execute server_barrier
#
          call REZYDUUM
          execute server_barrier 
#
          call SCALEVCACT_NEW
          execute server_barrier 
#
          if residuum > eomthresh
             call ORTHOGON
            #execute server_barrier 
          endif
#
          if spdim < 20
          if residuum < eomthresh
#
             iroot+=1.0
#
             call root_put
             imaxc=0.0
#
             if iroot > rootmax
                iroot-=1.0
                call prnting
                iroot+=1.0
                call AMPL_PRINT
                exit
             endif
#
             EXECUTE SERVER_BARRIER
#
             call AMPL_PRINT
             call start_copy
#
             EXECUTE SERVER_BARRIER
#
             call ORTHOGON
#
          endif
#
          if residuum > eomthresh
             call prnting
          endif
          if residuum < eomthresh
             iroot+=-1.0
             call prnting
             iroot+=1.0
          endif
#
          endif # spdim < 20  
#
          if spdim == 20
             if residuum < eomthresh
                if iroot == rootmax
                   iroot+=1.0
                   call root_put
                   imaxc=0.0
                   call prnting
                   call AMPL_PRINT
                   exit
                endif
             endif
          endif
#
          nsp+=1.0
          ispdim+=1.0
#
       enddo spdim
#
       if iroot <= rootmax # new
       if iroot < 13.0
#
          call TRUNCATE
#
          if residuum > eomthresh
             nsp+=-1.0
             ispdim-=1.0
             call prnting
             nsp+=1.0
             ispdim+=1.0
          endif
#
          if residuum < eomthresh
#
             nsp+=-1.0
             ispdim-=1.0
             call prnting
             iroot += 1.0
             call AMPL_PRINT
             iroot -= 1.0
             nsp+=1.0
             ispdim+=1.0
             iroot+=1.0
             call root_put
#
             EXECUTE SERVER_BARRIER
#
             call start_copy
#
             EXECUTE SERVER_BARRIER
#
             do spdim
                if spdim == 20
                  call ORTHOGON
                  call start_copy_tr
                  EXECUTE SERVER_BARRIER
                endif
             ENDDO spdim
#
          endif
#
       endif
       endif # new
#
       do eomcycle
#
       if iroot > rootmax
       exit
       endif
#
       ispdim=1.0
       execute sip_barrier 
#
       do spdim
#
       if spdim > 12
#
          if spdim == 13
          if residuum < eomthresh
#
          if eomcycle > 1 #### NEW
#
             iroot+=1.0
#
             call root_put
#
          endif    #### NEW
#
             imaxc=0.0
#
             EXECUTE SERVER_BARRIER
#
             call start_copy
#
             EXECUTE SERVER_BARRIER
#
             call ORTHOGON
#
             call copy_toVCactual
#
          endif
          if imaxc > maxcycle
          if residuum > eomthresh
#
             iroot+=1.0
#
             call root_put
#
             if iroot > 12.0
             exit
             endif
#
             imaxc=0.0
#
             EXECUTE SIP_BARRIER
             EXECUTE SERVER_BARRIER
#
             call start_copy
#
             EXECUTE SIP_BARRIER
             EXECUTE SERVER_BARRIER
#
             call ORTHOGON
#
             call copy_toVCactual
#
          endif
          endif
          endif
#
          imaxc+=1.0
#
          if spdim == 13
          if eomcycle > 1 
          if residuum > eomthresh 
          call copy_toVCactual
          endif
          endif
          endif
#
          if spdim > 13
          call copy_toVCactual
          endif
#
          call HCmult
#
          call Aconstr 
#
          call Adiag
#
          call SELVEC
#
          execute server_barrier
#
          call RESID_ALL
#
          call SYMMETR_A
          call SYMMETR_B
          execute server_barrier
#
          call REZYDUUM
#
          call SCALEVCACT_NEW
#
          if residuum > eomthresh
          if maxcycle >= imaxc
          call ORTHOGON
          endif
          endif
#
          if spdim < 20
#
             if residuum < eomthresh
#
                iroot+=1.0
#
                call root_put
                imaxc=0.0
#
                if iroot > rootmax
                call prnting
                call AMPL_PRINT
                exit
                endif
#
                call AMPL_PRINT
                call start_copy
#
                EXECUTE SERVER_BARRIER
#
                call ORTHOGON
#
             endif
             if imaxc > maxcycle
             if residuum > eomthresh
#
                iroot+=1.0
#
                call root_put
                call AMPL_PRINT
#
                if iroot > 12.0
                exit
                endif
#
                imaxc=0.0
#
                if iroot > rootmax
                call prnting
                exit
                endif
#
                EXECUTE SERVER_BARRIER
#
                call ORTHOGON
#
             endif
             endif
#
             if residuum > eomthresh
             call prnting
             endif
#
             if residuum < eomthresh
                iroot+=-1.0
                call prnting
                iroot+=1.0
             endif
#
          nsp+=1.0
#
          endif
#
          if spdim == 20
          if residuum < eomthresh
          iroot += 1.0
          call AMPL_PRINT
          iroot -= 1.0
          if iroot == rootmax
          iroot+=1.0
          call root_put
          call prnting
          exit
          endif
          endif
          endif
#
       endif
#
       ispdim+=1.0
#
       enddo spdim
#
             if imaxc > maxcycle
             iroot += 1.0
             call AMPL_PRINT
             iroot -= 1.0
             if iroot > 12.0
             exit
             endif
             endif
#
       if iroot > rootmax
       exit
       endif
#
       EXECUTE SIP_BARRIER
       EXECUTE SERVER_BARRIER
#
       call TRUNCATE
#
       call prnting
#
       nsp+=1.0
#
       enddo eomcycle
#
#
#          Print out the excitation energies and the respective residuum
#
#
       DO indone
       DO kindex12
          GET                      LEE       (kindex12,indone)
          GET                      LEE_resid (kindex12,indone)
          tee  (kindex12,indone) = LEE       (kindex12,indone)
          t1ee (kindex12,indone) = LEE_resid (kindex12,indone)

          STATIC_LEE (kindex12,indone) = tee  (kindex12,indone)
          S_ORDER    (kindex12,indone) = t1ee (kindex12,indone)
       ENDDO kindex12
       ENDDO indone

       EXECUTE  EOMROOT_PRINT_NEW  STATIC_LEE  S_ORDER

       CREATE  Dij_a
       CREATE  Dab_a
       CREATE  Dai
       EXECUTE  SIP_BARRIER
       EXECUTE  SERVER_BARRIER

       PARDO  a, a1
          GET            DENS_VV_A (a,a1)
          GET            DENS_VV_A (a1,a)
          taa  (a,a1)  = DENS_VV_A (a1,a)
          taa  (a,a1) += DENS_VV_A (a,a1)
          taa  (a,a1) *= 0.25
          taa  (a,a1) *= LRNORM
          t1aa (a1,a)  = taa (a,a1)
          PUT  Dab_a (a,a1) += taa  (a,a1)
          PUT  Dab_a (a1,a) += t1aa (a1,a)
       ENDPARDO  a, a1
          
       PARDO  a, i
          GET          DENS_VO_A (a,i)
          GET          DENS_OV_A (i,a)
          tai (a,i)  = DENS_OV_A (i,a)
          tai (a,i) += DENS_VO_A (a,i) 
          tai (a,i) *= LRNORM
          tai (a,i) *= 0.5
          PUT  Dai (a,i) += tai (a,i)
       ENDPARDO  a, i

       PARDO  i, i1
          GET            DENS_OO_A (i,i1)
          GET            DENS_OO_A (i1,i)
          tii  (i,i1)  = DENS_OO_A (i1,i)
          tii  (i,i1) += DENS_OO_A (i,i1)
          tii  (i,i1) *= 0.25
          tii  (i,i1) *= LRNORM
          t1ii (i1,i)  = tii (i,i1)
          PUT  Dij_a (i,i1) += tii  (i,i1)
          PUT  Dij_a (i1,i) += t1ii (i1,i)
       ENDPARDO  i, i1

       EXECUTE  SIP_BARRIER

       EXECUTE  BLOCKS_TO_LIST  Dij_a
       EXECUTE  BLOCKS_TO_LIST  Dab_a
       EXECUTE  BLOCKS_TO_LIST  Dai

       EXECUTE  BLOCKS_TO_LIST  REE

       EXECUTE  BLOCKS_TO_LIST  R1A
       EXECUTE  BLOCKS_TO_LIST  R2AA
       EXECUTE  BLOCKS_TO_LIST  R2AB

       EXECUTE  BLOCKS_TO_LIST  HBAR_ia
       EXECUTE  BLOCKS_TO_LIST  HBAR_jb
       EXECUTE  BLOCKS_TO_LIST  HBAR_iiii
       EXECUTE  BLOCKS_TO_LIST  HBAR_iijj
       
       EXECUTE  BLOCKS_TO_LIST  HBAR_ABCI_aaaa
       EXECUTE  BLOCKS_TO_LIST  HBAR_ABCI_aabb
       EXECUTE  BLOCKS_TO_LIST  HBAR_AIBC_aaaa
       EXECUTE  BLOCKS_TO_LIST  HBAR_AIBC_aabb
       
       EXECUTE  BLOCKS_TO_LIST  HBAR_JKIA_aaaa
       EXECUTE  BLOCKS_TO_LIST  HBAR_JKIA_aabb
       EXECUTE  BLOCKS_TO_LIST  HBAR_IAJK_aaaa
       EXECUTE  BLOCKS_TO_LIST  HBAR_IAJK_aabb

       EXECUTE  BLOCKS_TO_LIST  HBAR_AJIB_aaaa
       EXECUTE  BLOCKS_TO_LIST  HBAR_AJIB_aabb
       EXECUTE  BLOCKS_TO_LIST  HBAR_AJIB_iibb

       EXECUTE  BLOCKS_TO_LIST  t1a
       EXECUTE  BLOCKS_TO_LIST  t1b
       EXECUTE  BLOCKS_TO_LIST  t2aa
       EXECUTE  BLOCKS_TO_LIST  t2ab
       EXECUTE  BLOCKS_TO_LIST  t2bb

       EXECUTE  BLOCKS_TO_LIST  A1a
       EXECUTE  BLOCKS_TO_LIST  A2aa
       EXECUTE  BLOCKS_TO_LIST  A2ab

       EXECUTE  BLOCKS_TO_LIST  VSpipi(p,i,p1,i1)
       EXECUTE  BLOCKS_TO_LIST  Vpiqj(p,i,q,j)

       EXECUTE  BLOCKS_TO_LIST  Vaaii
       EXECUTE  BLOCKS_TO_LIST  Viaai
       EXECUTE  BLOCKS_TO_LIST  Vaabj

       EXECUTE  BLOCKS_TO_LIST  L1A
       EXECUTE  BLOCKS_TO_LIST  L2AA
       EXECUTE  BLOCKS_TO_LIST  L2AB

       EXECUTE  SIP_BARRIER
       EXECUTE  SERVER_BARRIER
       EXECUTE  WRITE_BLOCKS_TO_LIST
       EXECUTE  SERVER_BARRIER

       delete VCE1A
       delete VCACT1A
       delete VCHACT1A
       delete VSTART1A1
       delete VSTART1A2
       execute sip_barrier
       ENDSIAL EOMCCSD_UHF_AO

#
