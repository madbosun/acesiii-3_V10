#  Copyright (c) 2003-2010 University of Florida
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  The GNU General Public License is included in this distribution
#  in the file COPYRIGHT.
                    SIAL UHF_HESS_PRELIM
#
# NOTE --> MUST ANTISMMETRIZE INTEGRALS IN TRANSFORMATION AND 
# MODIFY CODE WHICH DOES NOT USE ANTISYMMETRIZED INTEGRALS. 
#
# ---------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------
#
# Final set of of fully transformed integrals INCLUDING the 4-virtual ones.
#
# ---------------------------------------------------------------------------
#
#                          Integral     Type
#                         ------------------------
#                         VSpipi       DISTRIBUTED
#                         Vaaii        DISTRIBUTED
#                         Viaai        DISTRIBUTED
#                         VSaaai       DISTRIBUTED
#                         VSqjqj       DISTRIBUTED
#                         Vbbjj        DISTRIBUTED
#                         Vjbbj        DISTRIBUTED
#                         VSbbbj       DISTRIBUTED
#                         Vbbii        DISTRIBUTED
#                         Vjbii        DISTRIBUTED
#                         Vbbai        DISTRIBUTED
#                         Vpiqj        DISTRIBUTED
#                         Vaajj        DISTRIBUTED
#                         Viabj        DISTRIBUTED
#                         Vaabj        DISTRIBUTED
#
#                         VSaaaa       DISTRIBUTED
#                         VSbbbb       DISTRIBUTED
#                         Vaabb        DISTRIBUTED
#
# ---------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------
#
# Declare indices. 
# ---------------- 
#
     index   kiter  = 1, 500 
     index   iatom  = 1, natoms  
     index   ix     = 1, 3  
     index   icenter= 1, 1  
     index   jatom  = 1, natoms  
     index   jx     = 1, 3  
     index   jcenter= 1, 1  
#
     aoindex mu     = 1, norb
     aoindex nu     = 1, norb
     aoindex lambda = 1, norb
     aoindex sigma  = 1, norb
#
     moaindex i = baocc, eaocc
     moaindex i1= baocc, eaocc
     moaindex i2= baocc, eaocc
     moaindex i3= baocc, eaocc
#
     moaindex a = bavirt, eavirt
     moaindex a1= bavirt, eavirt
     moaindex a2= bavirt, eavirt
     moaindex a3= bavirt, eavirt
#
     mobindex j = bbocc, ebocc
     mobindex j1= bbocc, ebocc
     mobindex j2= bbocc, ebocc
     mobindex j3= bbocc, ebocc
#
     mobindex b = bbvirt, ebvirt
     mobindex b1= bbvirt, ebvirt
     mobindex b2= bbvirt, ebvirt
     mobindex b3= bbvirt, ebvirt
#
     moaindex p = baocc, eavirt
     moaindex p1= baocc, eavirt
     moaindex p2= baocc, eavirt
     moaindex p3= baocc, eavirt
#
     mobindex q = bbocc, ebvirt
     mobindex q1= bbocc, ebvirt
     mobindex q2= bbocc, ebvirt
     mobindex q3= bbocc, ebvirt
#
# Declare served arrays. 
# ----------------------
#
     served saoint(mu,nu,lambda,sigma) 
     static dflags(jatom,jx,jcenter) 
     static dflags2(jatom,jx) 
     temp thess(jatom,jx,iatom,ix) 
#
# Declare distributed arrays. 
# --------------------------- 
#
     distributed Vxxxp(mu,nu,lambda,p) 
     distributed Vxxpp(mu,nu,p1,p) 
     distributed Vxppp(mu,p2,p1,p) 
     distributed Vpppp(p3,p2,p1,p) 
#
     distributed VSpppp(p3,p2,p1,p) 
     distributed VSqqqq(q3,q2,q1,q) 
#
     distributed Vxxxq(mu,nu,lambda,q) 
     distributed Vxxqq(mu,nu,q1,q) 
     distributed Vxqqq(mu,q2,q1,q) 
     distributed Vqqqq(q3,q2,q1,q) 
#
     distributed Vxpqq(mu,p,q1,q) 
     distributed Vppqq(p1,p,q1,q) 
#
     distributed VXxixi(mu,i,nu,i1) 
     distributed VXxixj(mu,i,nu,j) 
     distributed VXxjxj(mu,j,nu,j1) 
     distributed VXxipi(mu,i,a1,i1) 
     distributed VXxiqj(mu,i,b,j) 
     distributed VXxjqj(mu,j,b1,j1) 
     distributed VXpipi(a,i,a1,i1) 
     distributed VXpiqj(a,i,b,j) 
     distributed VXqjqj(b,j,b1,j1) 
#
     distributed Vxixi(mu,i,nu,i1) 
     distributed Vxixj(mu,i,nu,j) 
     distributed Vxjxj(mu,j,nu,j1) 
#
     distributed T1aiai_aa(a,i,a1,i1)#----|  
     distributed T1bjbj_bb(b,j,b1,j1)#    |  
     distributed T1aibj_ab(a,i,b,j)  #    |--> Unperturbed amplitudes   
     distributed T2yaa(a1,i,a2,i1)#-------|  
     distributed T2ybb(b1,j,b2,j1)#       |  
     distributed T2yab(a,i,b,j)#          |--> Perturbed amplitudes   
     distributed t1yaa(a,i)       #       |    
     distributed t1ybb(b,j)#--------------|  
     distributed DTpppi(p,p1,p2,i)#-------|  
     distributed DTqqqj(q,q1,q2,j)#       |--> Transformed 2-el derivative integrals 
     distributed DTppqj(p,p1,q,j)#        |  
     distributed DTqqpi(q,q1,p,i)#--------|  
#
     distributed t2aa_old(a,i,a1,i1)#-----|   
     distributed t2aa_new(a,i,a1,i1)#     |   
     distributed t2bb_old(b,j,b1,j1)#     |   
     distributed t2bb_new(b,j,b1,j1)#     |   
     distributed t2ab_old(a,i,b,j)#       |   
     distributed t2ab_new(a,i,b,j)#       |--> Perturbed amplitudes    
     distributed T2yFullaa(a,i,a1,i1)#    |  
     distributed T2yFullab(a,i,b,j)#      |  
     distributed T2yFullbb(b,j,b1,j1)#    |  
     distributed VXSFullaa(a,i,a1,i1)#    |  
     distributed VXFullab(a,i,b,j)#       |  
     distributed VXSFullbb(b,j,b1,j1)#    |  
     distributed t1aa_old(a,i)#           |   
     distributed t1aa_new(a,i)#           |   
     distributed t1bb_old(b,j)#           |   
     distributed t1bb_new(b,j)#-----------|   
#
     distributed DTxxxi(mu,nu,lambda,i) 
     distributed DTxxxj(mu,nu,lambda,j) 
     distributed DTxxpi(mu,nu,p,i) 
     distributed DTxxqj(mu,nu,q,j) 
     distributed DTxppi(mu,p1,p,i) 
     distributed DTxqqj(mu,q1,q,j) 
     distributed DTxqpi(mu,q,p,i) 
     distributed DTxpqj(mu,p,q,j) 
#
     distributed T2aiai_aa(a,i,a1,i1) 
     distributed T2bjbj_bb(b,j,b1,j1) 
     distributed T2aibj_ab(a,i,b,j) 
     distributed Iiaia(i,a,i1,a1) 
     distributed Ijbjb(j,b,j1,b1) 
     distributed Iiajb(i,a,j,b) 
     distributed Ijbia(j,b,i,a) 
     distributed Iaibj(a,i,b,j) 
     distributed T2ai_a(a,i) 
     distributed T2ai_b(b,j) 
#
     distributed Dij_a(i,i1)#-------------|  
     distributed Dij_b(j,j1)#             | 
     distributed Dab_a(a,a1)#             |  
     distributed Dab_b(b,b1)#             |--> Density   
     distributed Dai_a(a,i) #             |  
     distributed Dai_b(b,j)#--------------|  
     distributed Daiold_a(a,i) 
     distributed Daiold_b(b,j) 
     distributed Iij_a(i,i1) 
     distributed Iij_b(j,j1) 
     distributed Iai_a(a,i) 
     distributed Iai_b(b,j) 
     distributed Iab_a(a,a1) 
     distributed Iab_b(b,b1) 
     distributed Ipq_a(p,p1) 
     distributed Ipq_b(q,q1) 
     distributed Xai_a(a,i) 
     distributed Xai_b(b,j) 
     distributed Ixx_a(mu,nu) 
     distributed Ixx_b(mu,nu) 
     distributed Dxx_a(mu,nu) 
     distributed Dxx_b(mu,nu) 
     distributed Dpq_a(p,p1) 
     distributed Dpq_b(q,q1) 
     distributed Ihf(mu,nu) 
     distributed Ihfa(mu,nu) 
     distributed Ihfb(mu,nu) 
     distributed Dhfa(mu,nu) 
     distributed Dhfb(mu,nu) 
     distributed Dhfmo_a(p,p1) 
     distributed Dhfmo_b(q,q1) 
#
     distributed Uxaa(p,p1) 
     distributed Uyaa(p,p1) 
     distributed Uxbb(q,q1) 
     distributed Uybb(q,q1) 
     distributed Fxaa(p,p1) 
     distributed Fyaa(p,p1) 
     distributed Fxbb(q,q1) 
     distributed Fybb(q,q1) 
     distributed Fxai(a,i) 
     distributed Fxbj(b,j) 
     distributed Fya(p,p1) 
     distributed Fyb(q,q1) 
     distributed Fxa(p,p1) 
     distributed Fxb(q,q1) 
     distributed Sya(p,p1) 
     distributed Syb(q,q1) 
     distributed Sxa(p,p1) 
     distributed Sxb(q,q1) 
     distributed FA(p,p1) 
     distributed FB(q,q1) 
     distributed Qyai(a,i)  
     distributed Qybj(b,j)  
     distributed Qxai(a,i)  
     distributed Qxbj(b,j)  
#
     distributed QAByy(mu,sigma) 
     distributed QAyy(mu,sigma) 
     distributed QByy(mu,sigma) 
     distributed QABxx(mu,sigma) 
     distributed QAxx(mu,sigma) 
     distributed QBxx(mu,sigma) 
     distributed QAB(mu,sigma) 
     distributed QA(mu,sigma) 
     distributed QB(mu,sigma) 
     distributed Uyai(a,i)   
     distributed Uybj(b,j)   
     distributed Uxai(a,i)   
     distributed Uxbj(b,j)   
     distributed Uyaiold(a,i)   
     distributed Uybjold(b,j)   
     distributed Uxaiold(a,i)   
     distributed Uxbjold(b,j)   
     distributed XAB(mu,nu) 
     distributed XA(mu,nu) 
     distributed XB(mu,nu) 
     distributed YAB(mu,nu) 
     distributed YA(mu,nu) 
     distributed YB(mu,nu) 
     distributed Ha(p,p1) 
     distributed Hb(q,q1) 
#
     static Focknd_a(p,p1) 
     static Focknd_b(q,q1) 
     static Fockao_a(mu,nu) 
     static Fockao_b(mu,nu) 
     static Fockmo_a(p,p1) 
     static Fockmo_b(q,q1) 
#
     distributed Y8aa(p,p1) 
     distributed Y8bb(q,q1) 
#    distributed Xa(p,p1) 
#    distributed Xb(q,q1) 
     distributed c_a(mu,p)
     distributed c_b(mu,q) 
     static SFya(p,p1) 
     static SFyb(q,q1) 
     static SFxa(p,p1) 
     static SFxb(q,q1) 
     static epsya(p,p1) 
     static epsyb(q,q1) 
     static epsxa(p,p1) 
     static epsxb(q,q1) 
     distributed cya(mu,p) 
     distributed cyb(mu,q) 
     distributed cxa(mu,p) 
     distributed cxb(mu,q) 
     distributed dhfya(mu,nu) 
     distributed dhfyb(mu,nu) 
     distributed dhfxa(mu,nu) 
     distributed dhfxb(mu,nu) 
     distributed whfya(mu,nu) 
     distributed whfyb(mu,nu) 
     distributed whfa(mu,nu) 
     distributed whfb(mu,nu) 
     distributed D1pp(p,p1) 
     distributed D2pp(p,p1) 
     distributed D1qq(q,q1) 
     distributed D2qq(q,q1) 
#
# Declare arrays used in the transformation of the two-electron integrals. 
# ------------------------------------------------------------------------ 
#
      served Sxixi(mu,i,nu,i1) 
      served Sxixj(mu,i,nu,j) 
      served Sxjxj(mu,j,nu,j1) 
#
      served Vxxxi(mu,nu,lambda,i)
      served Vxxii(mu,nu,i1,i)
      served Vixxi(i1,nu,lambda,i)
      served Vxipi(mu,i,p,i1)
      served Vixai(i,mu,a,i1)
      served Vxaii(mu,a,i,i1)
      served Vxaai(mu,a1,a,i)
      served Vxxai(mu,nu,a,i)
      served Vxxxa(mu,nu,lambda,a) 
      served Vxxaa(mu,nu,a1,a) 
      served Vxaaa(mu,a2,a1,a) 
      distributed VSpipi(p1,i,p,i1)
      distributed Viaai(i,a1,a,i1)
      distributed Vaaii(a,a1,i,i1)
      distributed VSaaai(a2,a,a1,i)
      distributed VSaaaa(a,a1,a2,a3)
#
      served Vxxxj(mu,nu,lambda,j)
      served Vxxjj(mu,nu,j1,j)
      served Vjxxj(j1,nu,lambda,j)
      served Vxjqj(mu,j,q,j1)
      served Vxbjj(mu,b,j,j1)
      served Vxbbj(mu,b1,b,j)
      served Vxxbj(mu,nu,b,j)
      served Vjxbj(j,mu,b,j1)
      served Vxxxb(mu,nu,lambda,b) 
      served Vxxbb(mu,nu,b1,b) 
      served Vxbbb(mu,b2,b1,b) 
      distributed VSqjqj(q1,j,q,j1)
      distributed Vjbbj(j,b1,b,j1)
      distributed Vbbjj(b,b1,j,j1)
      distributed VSbbbj(b2,b,b1,j)
      distributed VSbbbb(b,b1,b2,b3)
#
      served Vxbii(mu,b,i,i1)
      served Vxbai(mu,b,a,i)
      served Vxabb(mu,a,b1,b) 
      distributed Vjbii(j,b,i,i1)
      distributed Vbbii(b,b1,i,i1)
      distributed Vbbai(b,b1,a,i)
#
      served Vxiqj(mu,i,q,j)
      served Vxajj(mu,a,j,j1)
      served Vxabj(mu,a,b,j)
      served Vxxij(mu,nu,i,j)
      served Vixxj(i,mu,nu,j)
      served Vixbj(i,mu,b,j)
      distributed Vpiqj(p,i,q,j)
      distributed Vaajj(a,a1,j,j1)
      distributed Viabj(i,a,b,j)
      distributed Vaabj(a,a1,b,j)
      distributed Vaabb(a,a1,b,b1)
      temp Txjxj(mu,j1,lambda,j)
      temp T1xjxj(mu,j1,lambda,j)
      temp Txxjj(mu,nu,j1,j)
      temp T1xxjj(mu,nu,j1,j)
      temp Tjjxx(j1,nu,lambda,j)
      temp Tjxxj(j1,nu,lambda,j)
      temp T1jxxj(j1,nu,lambda,j)
      temp Txjqj(mu,j,q,j1)
      temp T1xjqj(mu,j,q,j1)
      temp Tqjqj(q1,j,q,j1)
      temp T1qjqj(q1,j,q,j1)
      temp Tjxbj(j,mu,b,j1)
      temp T1jxbj(j,mu,b,j1)
      temp Txbjj(mu,b,j,j1)
      temp T1xbjj(mu,b,j,j1)
      temp Tjbbj(j,b1,b,j1)
      temp T1jbbj(j,b1,b,j1)
      temp Tbbjj(b,b1,j,j1)
      temp T1bbjj(b,b1,j,j1)
      temp Txbbj(mu,b1,b,j)
      temp T1xbbj(mu,b1,b,j)
      temp Tbbbj(b2,b,b1,j)
      temp T1bbbj(b2,b,b1,j)
      temp Txxbj(mu,nu,b,j)
      temp Txixj(mu,i,nu,j)
      temp T1xixj(mu,i,nu,j)
      temp Txiqj(mu,i,q,j)
      temp T1xiqj(mu,i,q,j)
      temp Tpiqj(p,i,q,j)
      temp T1piqj(p,i,q,j)
      temp Tiixx(i,i1,mu,nu)
      temp Tiixb(i,i1,mu,b)
      temp Tiibb(i,i1,b1,b)
      temp Txajj(mu,a,j,j1)
      temp T1xajj(mu,a,j,j1)
      temp Taajj(a,a1,j,j1)
      temp T1aajj(a,a1,j,j1)
      temp Txabj(mu,a,b,j)
      temp T1xabj(mu,a,b,j)
      temp Tixxj(i,mu,nu,j)
      temp Tixbj(i,mu,b,j)
      temp T1ixbj(i,mu,b,j)
      temp Tiabj(i,a,b,j)
      temp T1iabj(i,a,b,j)
      temp Taabj(a,a1,b,j)
      temp T1aabj(a,a1,b,j)
#
      temp Txbii(mu,b,i,i1)
      temp T1xbii(mu,b,i,i1)
      temp Tbbii(b,b1,i,i1)
      temp T1bbii(b,b1,i,i1)
      temp Tjbii(j,b,i,i1)
      temp T1jbii(j,b,i,i1)
      temp Txbai(mu,b,a,i)
      temp T1xbai(mu,b,a,i)
      temp Tbbai(b,b1,a,i)
      temp T1bbai(b,b1,a,i)
#
      temp Taaai(a,a1,a2,i)
      temp T1aaai(a,a1,a2,i)
      temp Txxai(mu,nu,a,i)
      temp Txaai(mu,a,a1,i)
      temp T1xaai(mu,a,a1,i)
      temp Txaii(mu,a,i,i1)
      temp T1xaii(mu,a,i,i1)
      temp Tiaai(i,a,a1,i1)
      temp T1iaai(i,a,a1,i1)
      temp Taaii(a,a1,i,i1)
      temp T1aaii(a,a1,i,i1)
      temp T1xxai(mu,nu,a,i)
      temp Tixai(i,mu,a,i1)
      temp T1ixai(i,mu,a,i1)
      temp Txipi(mu,i,p1,i1)
      temp T1xipi(mu,i,p1,i1)
      temp Tpipi(p,i,p1,i1)
      temp T1pipi(p,i,p1,i1)
      temp T1xxbj(mu,nu,b,j)
#
      temp Txxij(mu,nu,i,j)
      temp T1xxij(mu,nu,i,j)
      temp T1ixxj(i,mu,nu,j)
      temp Txxxi(mu,nu,lambda,i)
      temp T1xxxi(mu,nu,lambda,i)
      temp Txxxj(mu,nu,lambda,j)
      temp T1xxxj(mu,nu,lambda,j)
      temp Txixi(mu,i,nu,i1)
      temp T1xixi(mu,i,nu,i1)
      temp Txxii(mu,nu,i1,i)
      temp T1xxii(mu,nu,i1,i)
      temp Tixxi(i1,mu,nu,i)
      temp T1ixxi(i1,mu,nu,i)
#
      temp Txxxa(mu,nu,lambda,a)
      temp T1xxxa(mu,nu,lambda,a)
      temp Txxaa(mu,nu,a1,a)
      temp T1xxaa(mu,nu,a1,a)
      temp Txaaa(mu,a2,a1,a)
      temp T1xaaa(mu,a2,a1,a)
      temp Taaaa(a3,a2,a1,a)
      temp T1aaaa(a3,a2,a1,a)
#
      temp Txxxb(mu,nu,lambda,b)
      temp T1xxxb(mu,nu,lambda,b)
      temp Txxbb(mu,nu,b1,b)
      temp T1xxbb(mu,nu,b1,b)
      temp Txbbb(mu,b2,b1,b)
      temp T1xbbb(mu,b2,b1,b)
      temp Tbbbb(b3,b2,b1,b)
      temp T1bbbb(b3,b2,b1,b)
#
      temp Txabb(mu,a2,b1,b)
      temp T1xabb(mu,a2,b1,b)
      temp Taabb(a3,a2,b1,b)
      temp T1aabb(a3,a2,b1,b)
#
      temp tiiaa(i,i1,a,a1) 
      temp t1iiaa(i,i1,a,a1) 
      temp taiia(a,i,i1,a1) 
      temp t1aiia(a,i,i1,a1) 
#
      temp tjjbb(j,j1,b,b1) 
      temp t1jjbb(j,j1,b,b1) 
      temp tbjjb(b,j,j1,b1) 
      temp t1bjjb(b,j,j1,b1) 
#
# Declare integral arrays
# ------------------------
#
      served AOINT(mu,nu,lambda,sigma)
      local TAOINT(mu,nu,lambda,sigma)
      local L1xxxi(mu,nu,lambda,i)
      local L2xxxi(mu,lambda,nu,i)
      local L3xxxi(lambda,mu,nu,i)
      local L1xxxj(mu,nu,lambda,j)
      local L2xxxj(mu,lambda,nu,j)
      local L3xxxj(lambda,mu,nu,j)
      local Lxixi(mu,i,nu,i1)
      local Lxxii(mu,nu,i,i1)
      local Lixxi(i,mu,nu,i1)
      local Lxjxj(mu,j,nu,j1)
      local Lxxjj(mu,nu,j,j1)
      local Ljxxj(j,mu,nu,j1)
      local Lxxai(mu,nu,a,i)
      local Lxxbj(mu,nu,b,j)
      local Lxixj(mu,i,nu,j)
      local Lixxj(i,mu,nu,j)
      local Lxipi(mu,i,p,i1)
      local Lxaii(mu,a,i,i1)
      local Lixai(i,mu,a,i1)
      local L1xaai(mu,a,a1,i)
      local L2xaai(mu,a,a2,i)
      local Lxjqj(mu,j,q,j1)
      local Lxbjj(mu,b,j,j1)
      local Ljxbj(j,mu,b,j1)
      local Lxbbj(mu,b,b1,j)
      local Lxbii(mu,b,i,i1)
      local Lxbai(mu,b,a,i)
      local Lxiqj(mu,i,q,j)
      local Lxajj(mu,a,j,j1)
      local Lixbj(i,mu,b,j)
      local Lxabj(mu,a,b,j)
      local L1xbbj(mu,b,b1,j)
      local Lxxxa(mu,nu,lambda,a) 
      local Lxxxb(mu,nu,lambda,b) 
      local Lxxaa(mu,nu,a1,a) 
      local Lxxbb(mu,nu,b1,b) 
      local Lxaaa(mu,a,a1,a2) 
      local Lxbbb(mu,b,b1,b2) 
      local Lxabb(mu,a2,b1,b2) 
      local Laiai(a,i,a1,i1) 
      local Lbjbj(b,j,b1,j1) 
      local Laibj(a,i,b,j) 
#
# Declare temporary arrays. 
# ------------------------- 
#
     temp Txxxp(mu,nu,lambda,p) 
     temp T1xxxp(mu,nu,lambda,p) 
     temp Txxpp(mu,nu,p1,p) 
     temp T1xxpp(mu,nu,p1,p) 
     temp Txppp(mu,p2,p1,p) 
     temp T1xppp(mu,p2,p1,p) 
     temp Tpppp(p3,p2,p1,p) 
     temp T1pppp(p3,p2,p1,p) 
     temp T2pppp(p3,p2,p1,p) 
     temp T3pppp(p3,p2,p1,p) 
#
     temp Txxxq(mu,nu,lambda,q) 
     temp T1xxxq(mu,nu,lambda,q) 
     temp Txxqq(mu,nu,q1,q) 
     temp T1xxqq(mu,nu,q1,q) 
     temp Txqqq(mu,q2,q1,q) 
     temp T1xqqq(mu,q2,q1,q) 
     temp Tqqqq(q3,q2,q1,q) 
     temp T1qqqq(q3,q2,q1,q) 
     temp T2qqqq(q3,q2,q1,q) 
     temp T3qqqq(q3,q2,q1,q) 
#
     temp Txpqq(mu,p,q1,q) 
     temp T1xpqq(mu,p,q1,q) 
     temp Tppqq(p1,p,q1,q) 
     temp T1ppqq(p1,p,q1,q) 
     temp T2ppqq(p1,p,q1,q) 
     temp Tqqpp(q,q1,p,p1) 
     temp T1qqpp(q,q1,p,p1) 
     temp T2qqpp(q,q1,p,p1) 
#
     temp Taiai(a,i,a1,i1) 
     temp T1aiai(a,i,a1,i1) 
     temp T3aiai(a,i,a1,i1) 
     temp T4aiai(a,i,a1,i1) 
     temp Tbjbj(b,j,b1,j1) 
     temp T1bjbj(b,j,b1,j1) 
     temp T3bjbj(b,j,b1,j1) 
     temp T4bjbj(b,j,b1,j1) 
     temp Taibj(a,i,b,j) 
     temp T1aibj(a,i,b,j) 
#
     temp Taiii(a,i,i1,i2)  
     temp T1aiii(a,i,i1,i2) 
     temp Taijj(a,i,j1,j) 
     temp T1aijj(a,i,j1,j) 
     temp Tbjjj(b,j,j2,j1)  
     temp T1bjjj(b,j,j2,j1) 
     temp Tiibj(i1,i,b,j)  
     temp T1iibj(i1,i,b,j) 
#
     temp Txiai(mu,i,a1,i1)
     temp Txjbj(mu,j,b1,j1) 
     temp Txibj(mu,i,b,j) 
     temp Txxxx(mu,lambda,nu,sigma) 
     temp T1xxxx(mu,lambda,nu,sigma) 
     temp Txxpi(mu,nu,p,i) 
     temp Txxqj(mu,nu,q,j) 
     temp Txppi(mu,p1,p,i) 
     temp Txqqj(mu,q1,q,j) 
     temp Txqpi(mu,q,p,i) 
     temp Txpqj(mu,p,q,j) 
     temp Tpppi(p,p1,p2,i) 
     temp Tqqqj(q,q1,q2,j) 
     temp Tppqj(p,p1,q,j) 
     temp Tqqpi(q,q1,p,i) 
#
     temp T1pppi(p,p1,p2,i) 
     temp T1qqqj(q,q1,q2,j) 
     temp T1ppqj(p,p1,q,j) 
     temp T1qqpi(q,q1,p,i) 
#
     temp Tii(i,i1) 
     temp T1ii(i,i1) 
     temp Tjj(j,j1) 
     temp T1jj(j,j1) 
     temp Taa(a,a1) 
     temp T1aa(a,a1) 
     temp Tbb(b,b1) 
     temp T1bb(b,b1) 
     temp Tai(a,i) 
     temp T1ai(a,i) 
     temp Tbj(b,j)
     temp T1bj(b,j)
     temp Tia(i,a) 
     temp T1ia(i,a) 
     temp Tjb(j,b) 
     temp T1jb(j,b) 
     temp Txi(mu,i) 
     temp T1xi(mu,i) 
     temp Txj(mu,j) 
     temp T1xj(mu,j) 
     temp Txx(mu,nu) 
     temp Txa(mu,a) 
     temp Txb(mu,b) 
     temp tpp(p,p1) 
     temp t1pp(p,p1) 
     temp t2pp(p,p1) 
     temp t3pp(p,p1) 
     temp t4pp(p,p1) 
     temp tqq(q,q1) 
     temp t1qq(q,q1) 
     temp t2qq(q,q1) 
     temp t3qq(q,q1) 
     temp tpi(p,i) 
     temp t1pi(p,i) 
     temp tqj(q,j) 
     temp t1qj(q,j) 
#
     temp t1xx(mu,nu) 
     temp tpx(p,mu) 
     temp t1px(p,mu) 
     temp tqx(q,mu) 
     temp t1qx(q,mu) 
     temp txp(mu,p) 
     temp t1xp(mu,p) 
     temp txq(mu,q) 
     temp t1xq(mu,q) 
     temp tax(a,sigma) 
     temp tbx(b,sigma) 
#
# Declare local arrays. 
# --------------------- 

     temp daoint(mu,nu,lambda,sigma)
     temp faoint(mu,nu,lambda,sigma)
     local D2(mu,lambda,nu,sigma)  
     local L1xxxp(mu,nu,lambda,p) 
     local L1xxxq(mu,nu,lambda,q) 
     local Lxxpp(mu,nu,p1,p) 
     local Lxxqq(mu,nu,q1,q) 
     local Lxppp(mu,p2,p1,p) 
     local Lxqqq(mu,q2,q1,q) 
     local Lxpqq(mu,p,q1,q) 
#
     local L1aiai(a,i2,a1,i1) 
     local L1aibj(a,i2,b,j) 
     local L1bjai(b,j2,a,i) 
     local L1bjbj(b,j2,b1,j1) 
     local L2aiai(a2,i,a1,i1) 
     local L2aibj(a1,i,b,j) 
     local L2bjbj(b2,j,b1,j1) 
     local L2bjai(b1,j,a,i) 
     local Dxxxi(mu,lambda,nu,i) 
     local Dxxxj(mu,lambda,nu,j) 
     local Exxpi(mu,lambda,p,i) 
     local Exxqj(mu,lambda,q,j) 
     local Fxppi(mu,p1,p,i) 
     local Fxqpi(mu,q,p,i) 
     local Fxqqj(mu,q1,q,j) 
     local Fxpqj(mu,p,q,j) 
     local Fpppi(p2,p1,p,i) 
     local Fqqqj(q2,q1,q,j) 
     local Fqqpi(q1,q,p,i) 
     local Fppqj(p1,p,q,j) 
#
     distributed zeta_a(p,p1) 
     distributed zeta_b(q,q1) 
     distributed zeta(mu,nu)  
#
# Declare scalars. 
# ---------------- 
#
     scalar eold  
     scalar enew 
     scalar ecrit 
     scalar esum 
     scalar etemp 
     scalar ediff 
     scalar ecorra 
     scalar ecorrb 
     scalar ecorraa 
     scalar ecorrbb 
     scalar ecorrab 
     scalar ecorrT 
     scalar hessxy 
     scalar phessxy 
#
#    ------------------------------------------------------------------------
#
#    Perform the first two stages of the transformation in two N5 steps.
#
     PROC TRAN_TRAN2
#
#    ------------------------------------------------------------------------
#
     PARDO mu, nu, lambda
#
          allocate taoint(mu,nu,lambda,*)
#
          DO sigma
#
             compute_integrals            saoint(mu,nu,lambda,sigma)
             taoint(mu,nu,lambda,sigma) = saoint(mu,nu,lambda,sigma)
#
          ENDDO sigma
#
          DO i
#
             Txxxi(mu,nu,lambda,i) = 0.0
#
              DO sigma
#
                 T1xxxi(mu,nu,lambda,i)  = taoint(mu,nu,lambda,sigma)*ca(sigma,i)
                 Txxxi(mu,nu,lambda,i)  += T1xxxi(mu,nu,lambda,i)
#
              ENDDO sigma
#
              PREPARE Vxxxi(mu,nu,lambda,i)  = Txxxi(mu,nu,lambda,i)
#
          ENDDO i
#
          DO j
#
             Txxxj(mu,nu,lambda,j) = 0.0
#
              DO sigma
#
                 T1xxxj(mu,nu,lambda,j)  = taoint(mu,nu,lambda,sigma)*cb(sigma,j)
                 Txxxj(mu,nu,lambda,j)  += T1xxxj(mu,nu,lambda,j)
#
              ENDDO sigma
#
              PREPARE Vxxxj(mu,nu,lambda,j)  = Txxxj(mu,nu,lambda,j)
#
          ENDDO j
#
          DO a
#
             Txxxa(mu,nu,lambda,a) = 0.0
#
              DO sigma
#
                 T1xxxa(mu,nu,lambda,a)  = taoint(mu,nu,lambda,sigma)*ca(sigma,a)
                 Txxxa(mu,nu,lambda,a)  += T1xxxa(mu,nu,lambda,a)
#
              ENDDO sigma
#
              PREPARE Vxxxa(mu,nu,lambda,a)  = Txxxa(mu,nu,lambda,a)
#
          ENDDO a
#
          DO b
#
             Txxxb(mu,nu,lambda,b) = 0.0
#
              DO sigma
#
                 T1xxxb(mu,nu,lambda,b)  = taoint(mu,nu,lambda,sigma)*cb(sigma,b)
                 Txxxb(mu,nu,lambda,b)  += T1xxxb(mu,nu,lambda,b)
#
              ENDDO sigma
#
              PREPARE Vxxxb(mu,nu,lambda,b)  = Txxxb(mu,nu,lambda,b)
#
          ENDDO b
#
          deallocate taoint(mu,nu,lambda,*)
#
     ENDPARDO mu, nu, lambda
#
     execute server_barrier
#
#    ------------------------------------------------------------------------
#
     PARDO mu, nu, i
#
           allocate L1xxxi(mu,nu,*,i)
           allocate L2xxxi(mu,*,nu,i)
           allocate L3xxxi(*,mu,nu,i)
#
           DO lambda
#
              REQUEST Vxxxi(mu,nu,lambda,i) i
              REQUEST Vxxxi(mu,lambda,nu,i) i
              REQUEST Vxxxi(lambda,mu,nu,i) i
#
              L1xxxi(mu,nu,lambda,i) = Vxxxi(mu,nu,lambda,i)
              L2xxxi(mu,lambda,nu,i) = Vxxxi(mu,lambda,nu,i)
              L3xxxi(lambda,mu,nu,i) = Vxxxi(lambda,mu,nu,i)
#
           ENDDO lambda
#
           DO i1
#
              Txxii(mu,nu,i1,i) = 0.0
              Txixi(mu,i1,nu,i) = 0.0
              Tixxi(i1,mu,nu,i) = 0.0
#
              DO lambda
#
                 T1xxii(mu,nu,i1,i) = L1xxxi(mu,nu,lambda,i)*ca(lambda,i1)
                 Txxii(mu,nu,i1,i) += T1xxii(mu,nu,i1,i)
#
                 T1xixi(mu,i1,nu,i) = L2xxxi(mu,lambda,nu,i)*ca(lambda,i1)
                 Txixi(mu,i1,nu,i) += T1xixi(mu,i1,nu,i)
#
                 T1ixxi(i1,mu,nu,i) = L3xxxi(lambda,mu,nu,i)*ca(lambda,i1)
                 Tixxi(i1,mu,nu,i) += T1ixxi(i1,mu,nu,i)
#
              ENDDO lambda
#
              PREPARE Vxxii(mu,nu,i1,i) = Txxii(mu,nu,i1,i)
              PREPARE Sxixi(mu,i1,nu,i) = Txixi(mu,i1,nu,i)
              PREPARE Vixxi(i1,mu,nu,i) = Tixxi(i1,mu,nu,i)
#
           ENDDO i1
#
           DO a
#
              Txxai(mu,nu,a,i) = 0.0
#
              DO lambda
#
                 T1xxai(mu,nu,a,i) = L1xxxi(mu,nu,lambda,i)*ca(lambda,a)
                 Txxai(mu,nu,a,i) += T1xxai(mu,nu,a,i)
#
              ENDDO lambda
#
              PREPARE Vxxai(mu,nu,a,i) = Txxai(mu,nu,a,i)
#
           ENDDO a
#
           deallocate L1xxxi(mu,nu,*,i)
           deallocate L2xxxi(mu,*,nu,i)
           deallocate L3xxxi(*,mu,nu,i)
#
     ENDPARDO mu, nu, i
#
#    ------------------------------------------------------------------------
#
     PARDO mu, nu, j
#
           allocate L1xxxj(mu,nu,*,j)
           allocate L2xxxj(mu,*,nu,j)
           allocate L3xxxj(*,mu,nu,j)
#
           DO lambda
#
              REQUEST Vxxxj(mu,nu,lambda,j) j
              REQUEST Vxxxj(mu,lambda,nu,j) j
              REQUEST Vxxxj(lambda,mu,nu,j) j
#
              L1xxxj(mu,nu,lambda,j) = Vxxxj(mu,nu,lambda,j)
              L2xxxj(mu,lambda,nu,j) = Vxxxj(mu,lambda,nu,j)
              L3xxxj(lambda,mu,nu,j) = Vxxxj(lambda,mu,nu,j)
#
           ENDDO lambda
#
           DO j1
#
              Txxjj(mu,nu,j1,j) = 0.0
              Txjxj(mu,j1,nu,j) = 0.0
              Tjxxj(j1,mu,nu,j) = 0.0
#
              DO lambda
#
                 T1xxjj(mu,nu,j1,j) = L1xxxj(mu,nu,lambda,j)*cb(lambda,j1)
                 Txxjj(mu,nu,j1,j) += T1xxjj(mu,nu,j1,j)
#
                 T1xjxj(mu,j1,nu,j) = L2xxxj(mu,lambda,nu,j)*cb(lambda,j1)
                 Txjxj(mu,j1,nu,j) += T1xjxj(mu,j1,nu,j)
#
                 T1jxxj(j1,mu,nu,j) = L3xxxj(lambda,mu,nu,j)*cb(lambda,j1)
                 Tjxxj(j1,mu,nu,j) += T1jxxj(j1,mu,nu,j)
#
              ENDDO lambda
#
              PREPARE Vxxjj(mu,nu,j1,j) = Txxjj(mu,nu,j1,j)
              PREPARE Sxjxj(mu,j1,nu,j) = Txjxj(mu,j1,nu,j)
              PREPARE Vjxxj(j1,mu,nu,j) = Tjxxj(j1,mu,nu,j)
#
           ENDDO j1
#
           DO b
#
              Txxbj(mu,nu,b,j) = 0.0
#
              DO lambda
#
                 T1xxbj(mu,nu,b,j) = L1xxxj(mu,nu,lambda,j)*cb(lambda,b)
                 Txxbj(mu,nu,b,j) += T1xxbj(mu,nu,b,j)
#
              ENDDO lambda
#
              PREPARE Vxxbj(mu,nu,b,j) = Txxbj(mu,nu,b,j)
#
           ENDDO b
#
           DO i
#
              Txxij(mu,nu,i,j) = 0.0
              Tixxj(i,mu,nu,j) = 0.0
              Txixj(mu,i,nu,j) = 0.0
#
              DO lambda
#
                 T1xxij(mu,nu,i,j) = L1xxxj(mu,nu,lambda,j)*ca(lambda,i)
                 Txxij(mu,nu,i,j) += T1xxij(mu,nu,i,j)
#
                 T1ixxj(i,mu,nu,j) = L3xxxj(lambda,mu,nu,j)*ca(lambda,i)
                 Tixxj(i,mu,nu,j) += T1ixxj(i,mu,nu,j)
#
                 T1xixj(mu,i,nu,j) = L2xxxj(mu,lambda,nu,j)*ca(lambda,i)
                 Txixj(mu,i,nu,j) += T1xixj(mu,i,nu,j)
#
              ENDDO lambda
#
              PREPARE Vxxij(mu,nu,i,j) = Txxij(mu,nu,i,j)
              PREPARE Sxixj(mu,i,nu,j) = Txixj(mu,i,nu,j)
              PREPARE Vixxj(i,mu,nu,j) = Tixxj(i,mu,nu,j)
#
           ENDDO i
#
           deallocate L1xxxj(mu,nu,*,j)
           deallocate L2xxxj(mu,*,nu,j)
           deallocate L3xxxj(*,mu,nu,j)
#
     ENDPARDO mu, nu, j
#
#    ------------------------------------------------------------------------
#
     PARDO mu, nu, a
#
           allocate Lxxxa(mu,nu,*,a)
#
           DO lambda
#
              REQUEST Vxxxa(mu,nu,lambda,a) a
#
              Lxxxa(mu,nu,lambda,a) = Vxxxa(mu,nu,lambda,a)
#
           ENDDO lambda
#
           DO a1
#
              Txxaa(mu,nu,a1,a) = 0.0
#
              DO lambda
#
                 T1xxaa(mu,nu,a1,a) = Lxxxa(mu,nu,lambda,a)*ca(lambda,a1)
                 Txxaa(mu,nu,a1,a) += T1xxaa(mu,nu,a1,a)
#
              ENDDO lambda
#
              PREPARE Vxxaa(mu,nu,a1,a) = Txxaa(mu,nu,a1,a)
#
           ENDDO a1
#
           deallocate Lxxxa(mu,nu,*,a)
#
     ENDPARDO mu, nu, a
#
#    ------------------------------------------------------------------------
#
    PARDO mu, nu, b
#
           allocate Lxxxb(mu,nu,*,b)
#
           DO lambda
#
              REQUEST Vxxxb(mu,nu,lambda,b) b
#
              Lxxxb(mu,nu,lambda,b) = Vxxxb(mu,nu,lambda,b)
#
           ENDDO lambda
#
           DO b1
#
              Txxbb(mu,nu,b1,b) = 0.0
#
              DO lambda
#
                 T1xxbb(mu,nu,b1,b) = Lxxxb(mu,nu,lambda,b)*cb(lambda,b1)
                 Txxbb(mu,nu,b1,b) += T1xxbb(mu,nu,b1,b)
#
              ENDDO lambda
#
              PREPARE Vxxbb(mu,nu,b1,b) = Txxbb(mu,nu,b1,b)
#
           ENDDO b1
#
           deallocate Lxxxb(mu,nu,*,b)
#
     ENDPARDO mu, nu, b
#
     execute server_barrier
#
#    ------------------------------------------------------------------------
#
     ENDPROC TRAN_TRAN2
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
#    Perform the third N5 stage of the transformation.
#
     PROC TRAN_TRAN3
#
#    ------------------------------------------------------------------------
#
     PARDO mu, i, i1
#
           allocate Lxixi(mu,i,*,i1)
           allocate Lxxii(mu,*,i,i1)
           allocate Lixxi(i,mu,*,i1)
#
           DO nu
#
              REQUEST Sxixi(mu,i,nu,i1) i1
              REQUEST Vxxii(mu,nu,i,i1) i1
              REQUEST Vixxi(i,mu,nu,i1) i1
#
              Lxixi(mu,i,nu,i1) = Sxixi(mu,i,nu,i1)
              Lxxii(mu,nu,i,i1) = Vxxii(mu,nu,i,i1)
              Lixxi(i,mu,nu,i1) = Vixxi(i,mu,nu,i1)
#
           ENDDO nu
#
           DO p
#
              Txipi(mu,i,p,i1) = 0.0
#
              DO nu
#
                 T1xipi(mu,i,p,i1) = Lxixi(mu,i,nu,i1)*ca(nu,p)
                 Txipi(mu,i,p,i1) += T1xipi(mu,i,p,i1)
#
              ENDDO nu
#
              PREPARE Vxipi(mu,i,p,i1) = Txipi(mu,i,p,i1)
#
           ENDDO p
#
           DO a
#
              Txaii(mu,a,i,i1) = 0.0
              Tixai(i,mu,a,i1) = 0.0
#
              DO nu
#
                 T1xaii(mu,a,i,i1) = Lxxii(mu,nu,i,i1)*ca(nu,a)
                 Txaii(mu,a,i,i1) += T1xaii(mu,a,i,i1)
#
                 T1ixai(i,mu,a,i1) = Lixxi(i,mu,nu,i1)*ca(nu,a)
                 Tixai(i,mu,a,i1) += T1ixai(i,mu,a,i1)

              ENDDO nu
#
              PREPARE Vxaii(mu,a,i,i1) = Txaii(mu,a,i,i1)
              PREPARE Vixai(i,mu,a,i1) = Tixai(i,mu,a,i1)
#
           ENDDO a
#
           DO b
#
              Txbii(mu,b,i,i1) = 0.0
#
              DO nu
#
                 T1xbii(mu,b,i,i1) = Lxxii(mu,nu,i,i1)*cb(nu,b)
                 Txbii(mu,b,i,i1) += T1xbii(mu,b,i,i1)
#
              ENDDO nu
#
              PREPARE Vxbii(mu,b,i,i1) = Txbii(mu,b,i,i1)
#
           ENDDO b
#
           deallocate Lxixi(mu,i,*,i1)
           deallocate Lxxii(mu,*,i,i1)
           deallocate Lixxi(i,mu,*,i1)
#
     ENDPARDO mu, i, i1
#
#    ------------------------------------------------------------------------
#
     PARDO mu, a, i
#
           allocate Lxxai(mu,*,a,i)
#
           DO nu
#
              REQUEST Vxxai(mu,nu,a,i) i
              Lxxai(mu,nu,a,i) = Vxxai(mu,nu,a,i)
#
           ENDDO nu
#
           DO a1
#
              Txaai(mu,a1,a,i) = 0.0
#
              DO nu
#
                 T1xaai(mu,a1,a,i) = Lxxai(mu,nu,a,i)*ca(nu,a1)
                 Txaai(mu,a1,a,i) += T1xaai(mu,a1,a,i)
#
              ENDDO nu
#
              PREPARE Vxaai(mu,a1,a,i) = Txaai(mu,a1,a,i)
#
           ENDDO a1
#
           DO b
#
              Txbai(mu,b,a,i) = 0.0
#
              DO nu
#
                 T1xbai(mu,b,a,i) = Lxxai(mu,nu,a,i)*cb(nu,b)
                 Txbai(mu,b,a,i) += T1xbai(mu,b,a,i)
#
              ENDDO nu
#
              PREPARE Vxbai(mu,b,a,i) = Txbai(mu,b,a,i)
#
           ENDDO b
#
           deallocate Lxxai(mu,*,a,i)
#
     ENDPARDO mu, a, i
#
#    ------------------------------------------------------------------------
#
     PARDO mu, j, j1
#
           allocate Lxjxj(mu,j,*,j1)
           allocate Lxxjj(mu,*,j,j1)
           allocate Ljxxj(j,mu,*,j1)
#
           DO nu
#
              REQUEST Sxjxj(mu,j,nu,j1) j1
              REQUEST Vxxjj(mu,nu,j,j1) j1
              REQUEST Vjxxj(j,mu,nu,j1) j1
#
              Lxjxj(mu,j,nu,j1) = Sxjxj(mu,j,nu,j1)
              Lxxjj(mu,nu,j,j1) = Vxxjj(mu,nu,j,j1)
              Ljxxj(j,mu,nu,j1) = Vjxxj(j,mu,nu,j1)
#
           ENDDO nu
#
           DO q
#
              Txjqj(mu,j,q,j1) = 0.0
#
              DO nu
#
                 T1xjqj(mu,j,q,j1) = Lxjxj(mu,j,nu,j1)*cb(nu,q)
                 Txjqj(mu,j,q,j1) += T1xjqj(mu,j,q,j1)
#
              ENDDO nu
#
              PREPARE Vxjqj(mu,j,q,j1) = Txjqj(mu,j,q,j1)
#
           ENDDO q
#
           DO b
#
              Txbjj(mu,b,j,j1) = 0.0
              Tjxbj(j,mu,b,j1) = 0.0
#
              DO nu
#
                 T1xbjj(mu,b,j,j1) = Lxxjj(mu,nu,j,j1)*cb(nu,b)
                 Txbjj(mu,b,j,j1) += T1xbjj(mu,b,j,j1)
#
                 T1jxbj(j,mu,b,j1) = Ljxxj(j,mu,nu,j1)*cb(nu,b)
                 Tjxbj(j,mu,b,j1) += T1jxbj(j,mu,b,j1)

              ENDDO nu
#
              PREPARE Vxbjj(mu,b,j,j1) = Txbjj(mu,b,j,j1)
              PREPARE Vjxbj(j,mu,b,j1) = Tjxbj(j,mu,b,j1)
#
           ENDDO b
#
           DO a
#
              Txajj(mu,a,j,j1) = 0.0
#
              DO nu
#
                 T1xajj(mu,a,j,j1) = Lxxjj(mu,nu,j,j1)*ca(nu,a)
                 Txajj(mu,a,j,j1) += T1xajj(mu,a,j,j1)
#
              ENDDO nu
#
              PREPARE Vxajj(mu,a,j,j1) = Txajj(mu,a,j,j1)
#
           ENDDO a
#
           deallocate Lxjxj(mu,j,*,j1)
           deallocate Lxxjj(mu,*,j,j1)
           deallocate Ljxxj(j,mu,*,j1)
#
     ENDPARDO mu, j, j1
#
#    ------------------------------------------------------------------------
#
     PARDO mu, b, j
#
           allocate Lxxbj(mu,*,b,j)
#
           DO nu
#
              REQUEST Vxxbj(mu,nu,b,j) j
              Lxxbj(mu,nu,b,j) = Vxxbj(mu,nu,b,j)
#
           ENDDO nu
#
           DO b1
#
              Txbbj(mu,b1,b,j) = 0.0
#
              DO nu
#
                 T1xbbj(mu,b1,b,j) = Lxxbj(mu,nu,b,j)*cb(nu,b1)
                 Txbbj(mu,b1,b,j) += T1xbbj(mu,b1,b,j)
#
              ENDDO nu
#
              PREPARE Vxbbj(mu,b1,b,j) = Txbbj(mu,b1,b,j)
#
           ENDDO b1
#
           DO a
#
              Txabj(mu,a,b,j) = 0.0
#
              DO nu
#
                 T1xabj(mu,a,b,j) = Lxxbj(mu,nu,b,j)*ca(nu,a)
                 Txabj(mu,a,b,j) += T1xabj(mu,a,b,j)
#
              ENDDO nu
#
              PREPARE Vxabj(mu,a,b,j) = Txabj(mu,a,b,j)
#
           ENDDO a
#
           deallocate Lxxbj(mu,*,b,j)
#
     ENDPARDO mu, b, j
#
#    ------------------------------------------------------------------------
#
     PARDO mu, i, j
#
           allocate Lxixj(mu,i,*,j)
           allocate Lixxj(i,mu,*,j)
#
           DO nu
#
              REQUEST Sxixj(mu,i,nu,j) j
              REQUEST Vixxj(i,mu,nu,j) j
#
              Lxixj(mu,i,nu,j) = Sxixj(mu,i,nu,j)
              Lixxj(i,mu,nu,j) = Vixxj(i,mu,nu,j)
#
           ENDDO nu
#
           DO q
#
              Txiqj(mu,i,q,j) = 0.0
#
              DO nu
#
                 T1xiqj(mu,i,q,j) = Lxixj(mu,i,nu,j)*cb(nu,q)
                 Txiqj(mu,i,q,j) += T1xiqj(mu,i,q,j)
#
              ENDDO nu
#
              PREPARE Vxiqj(mu,i,q,j) = Txiqj(mu,i,q,j)
#
           ENDDO q
#
           DO b
#
              Tixbj(i,mu,b,j) = 0.0
#
              DO nu
#
                 T1ixbj(i,mu,b,j) = Lixxj(i,mu,nu,j)*cb(nu,b)
                 Tixbj(i,mu,b,j) += T1ixbj(i,mu,b,j)
#
              ENDDO nu
#
              PREPARE Vixbj(i,mu,b,j) = Tixbj(i,mu,b,j)
#
           ENDDO b
#
           deallocate Lxixj(mu,i,*,j)
           deallocate Lixxj(i,mu,*,j)
#
     ENDPARDO mu, i, j
#
#    ------------------------------------------------------------------------
#
     PARDO mu, a, a1
#
           allocate Lxxaa(mu,*,a1,a)
#
           DO nu
#
              REQUEST Vxxaa(mu,nu,a1,a) a
              Lxxaa(mu,nu,a1,a) = Vxxaa(mu,nu,a1,a)
#
           ENDDO nu
#
           DO a2
#
              Txaaa(mu,a2,a1,a) = 0.0
#
              DO nu
#
                 T1xaaa(mu,a2,a1,a) = Lxxaa(mu,nu,a1,a)*ca(nu,a2)
                 Txaaa(mu,a2,a1,a) += T1xaaa(mu,a2,a1,a)
#
              ENDDO nu
#
              PREPARE Vxaaa(mu,a2,a1,a) = Txaaa(mu,a2,a1,a)
#
           ENDDO a2
#
           deallocate Lxxaa(mu,*,a1,a)
#
     ENDPARDO mu, a, a1
#
#    ------------------------------------------------------------------------
#
     PARDO mu, b, b1
#
           allocate Lxxbb(mu,*,b1,b)
#
           DO nu
#
              REQUEST Vxxbb(mu,nu,b1,b) b
              Lxxbb(mu,nu,b1,b) = Vxxbb(mu,nu,b1,b)
#
           ENDDO nu
#
           DO b2
#
              Txbbb(mu,b2,b1,b) = 0.0
#
              DO nu
#
                 T1xbbb(mu,b2,b1,b) = Lxxbb(mu,nu,b1,b)*cb(nu,b2)
                 Txbbb(mu,b2,b1,b) += T1xbbb(mu,b2,b1,b)
#
              ENDDO nu
#
              PREPARE Vxbbb(mu,b2,b1,b) = Txbbb(mu,b2,b1,b)
#
           ENDDO b2
#
           DO a
#
              Txabb(mu,a,b1,b) = 0.0
#
              DO nu
#
                 T1xabb(mu,a,b1,b) = Lxxbb(mu,nu,b1,b)*ca(nu,a)
                 Txabb(mu,a,b1,b) += T1xabb(mu,a,b1,b)
#
              ENDDO nu
#
              PREPARE Vxabb(mu,a,b1,b) = Txabb(mu,a,b1,b)
#
           ENDDO a
#
           deallocate Lxxbb(mu,*,b1,b)
#
     ENDPARDO mu, b, b1
#
#    ------------------------------------------------------------------------
#   
     execute server_barrier
#
     ENDPROC TRAN_TRAN3
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
     PROC TRAN_TRAN4
#
#    ------------------------------------------------------------------------
#
     PARDO p, i, i1
#
           allocate Lxipi(*,i,p,i1) 
#
           DO mu 
#
              REQUEST Vxipi(mu,i,p,i1) i1 
              REQUEST Vxipi(mu,i1,p,i) i
              Lxipi(mu,i,p,i1)  = Vxipi(mu,i,p,i1)
              Txipi(mu,i,p,i1)  = Vxipi(mu,i1,p,i)
              Lxipi(mu,i,p,i1) -= Txipi(mu,i,p,i1)
#
           ENDDO mu
#
           DO p1
#
              Tpipi(p1,i,p,i1) = 0.0
#
              DO mu
#
                 T1pipi(p1,i,p,i1) = Lxipi(mu,i,p,i1)*ca(mu,p1)
                 Tpipi(p1,i,p,i1) += T1pipi(p1,i,p,i1)
#
              ENDDO mu
#
              PUT VSpipi(p1,i,p,i1) = Tpipi(p1,i,p,i1)
#
           ENDDO p1
#
           deallocate Lxipi(*,i,p,i1)
#
     ENDPARDO p, i, i1
#
     PARDO a, i, i1
#
           allocate Lxaii(*,a,i,i1)
           allocate Lixai(i,*,a,i1)
#
           DO mu
#
              REQUEST Vxaii(mu,a,i,i1) i1
              REQUEST Vixai(i,mu,a,i1) i1
#
              Lxaii(mu,a,i,i1) = Vxaii(mu,a,i,i1)
              Lixai(i,mu,a,i1) = Vixai(i,mu,a,i1)
#
           ENDDO mu
#
           DO a1
#
              Taaii(a1,a,i,i1) = 0.0
#
              DO mu
#
                 T1aaii(a1,a,i,i1) = Lxaii(mu,a,i,i1)*ca(mu,a1)
                 Taaii(a1,a,i,i1) += T1aaii(a1,a,i,i1)
#
              ENDDO mu
#
              PUT Vaaii(a1,a,i,i1) = Taaii(a1,a,i,i1)
#
           ENDDO a1
#
           deallocate Lxaii(*,a,i,i1)
#
           DO a1
#
              Tiaai(i,a1,a,i1) = 0.0
#
              DO mu
#
                 T1iaai(i,a1,a,i1) = Lixai(i,mu,a,i1)*ca(mu,a1)
                 Tiaai(i,a1,a,i1) += T1iaai(i,a1,a,i1)
#
              ENDDO mu
#
              PUT Viaai(i,a1,a,i1) = Tiaai(i,a1,a,i1)
#
           ENDDO a1
#
           deallocate Lixai(i,*,a,i1)
#
     ENDPARDO a, i, i1
#
     PARDO a, a1, i
#
           allocate L1xaai(*,a,a1,i)
#
           DO mu
#
              REQUEST Vxaai(mu,a,a1,i) i
#
              L1xaai(mu,a,a1,i)  = Vxaai(mu,a,a1,i)
#
           ENDDO mu
#
           DO a2
#
              Taaai(a2,a,a1,i) = 0.0
#
              DO mu
#
                 T1aaai(a2,a,a1,i) = L1xaai(mu,a,a1,i)*ca(mu,a2)
                 Taaai(a2,a,a1,i) += T1aaai(a2,a,a1,i)
#
              ENDDO mu
#
              T1aaai(a1,a,a2,i)           = Taaai(a2,a,a1,i)
              T1aaai(a1,a,a2,i)          *= -1.0
              PUT VSaaai(a2,a,a1,i)  += Taaai(a2,a,a1,i)
              PUT VSaaai(a1,a,a2,i)  += T1aaai(a1,a,a2,i)
#
           ENDDO a2
#
           deallocate L1xaai(*,a,a1,i)
#
     ENDPARDO a, a1, i
#
     PARDO q, j, j1
#
           allocate Lxjqj(*,j,q,j1)
#
           DO mu
#
              REQUEST Vxjqj(mu,j,q,j1) j1
              REQUEST Vxjqj(mu,j1,q,j) j1
              Lxjqj(mu,j,q,j1)  = Vxjqj(mu,j,q,j1)
              Txjqj(mu,j,q,j1)  = Vxjqj(mu,j1,q,j)
              Lxjqj(mu,j,q,j1) -= Txjqj(mu,j,q,j1)
#
           ENDDO mu
#
           DO q1
#
              Tqjqj(q1,j,q,j1) = 0.0
#
              DO mu
#
                 T1qjqj(q1,j,q,j1)      = Lxjqj(mu,j,q,j1)*cb(mu,q1)
                 Tqjqj(q1,j,q,j1)      += T1qjqj(q1,j,q,j1)
#
              ENDDO mu
#
              PUT VSqjqj(q1,j,q,j1) = Tqjqj(q1,j,q,j1)
#
           ENDDO q1
#
           deallocate Lxjqj(*,j,q,j1)
#
     ENDPARDO q, j, j1
#
     PARDO b, j, j1
#
           allocate Lxbjj(*,b,j,j1)
           allocate Ljxbj(j,*,b,j1)
#
           DO mu
#
              REQUEST Vxbjj(mu,b,j,j1) j1
              REQUEST Vjxbj(j,mu,b,j1) j1
#
              Lxbjj(mu,b,j,j1) = Vxbjj(mu,b,j,j1)
              Ljxbj(j,mu,b,j1) = Vjxbj(j,mu,b,j1)
#
           ENDDO mu
#
           DO b1
#
              Tbbjj(b1,b,j,j1) = 0.0
#
              DO mu
#
                 T1bbjj(b1,b,j,j1) = Lxbjj(mu,b,j,j1)*cb(mu,b1)
                 Tbbjj(b1,b,j,j1) += T1bbjj(b1,b,j,j1)
#
              ENDDO mu
#
              PUT Vbbjj(b1,b,j,j1) = Tbbjj(b1,b,j,j1)
#
           ENDDO b1
#
           deallocate Lxbjj(*,b,j,j1)
#
           DO b1
#
              Tjbbj(j,b1,b,j1) = 0.0
#
              DO mu
#
                 T1jbbj(j,b1,b,j1) = Ljxbj(j,mu,b,j1)*cb(mu,b1)
                 Tjbbj(j,b1,b,j1) += T1jbbj(j,b1,b,j1)
#
              ENDDO mu
#
              PUT Vjbbj(j,b1,b,j1) = Tjbbj(j,b1,b,j1)
#
           ENDDO b1
#
           deallocate Ljxbj(j,*,b,j1)
#
     ENDPARDO b, j, j1
#
     PARDO b, b1, j
#
           allocate L1xbbj(*,b,b1,j)
#
           DO mu
#
              REQUEST Vxbbj(mu,b,b1,j) j
#
              L1xbbj(mu,b,b1,j)  = Vxbbj(mu,b,b1,j)
#
           ENDDO mu
#
           DO b2
#
              Tbbbj(b2,b,b1,j) = 0.0
#
              DO mu
#
                 T1bbbj(b2,b,b1,j) = L1xbbj(mu,b,b1,j)*cb(mu,b2)
                 Tbbbj(b2,b,b1,j) += T1bbbj(b2,b,b1,j)
#
              ENDDO mu
#
              T1bbbj(b1,b,b2,j)           = Tbbbj(b2,b,b1,j)
              T1bbbj(b1,b,b2,j)          *= -1.0
              PUT VSbbbj(b2,b,b1,j)  += Tbbbj(b2,b,b1,j)
              PUT VSbbbj(b1,b,b2,j)  += T1bbbj(b1,b,b2,j)
#
           ENDDO b2
#
           deallocate L1xbbj(*,b,b1,j)
#
     ENDPARDO b, b1, j
#
     PARDO b, i, i1
#
           allocate Lxbii(*,b,i,i1)
#
           DO mu
#
              REQUEST Vxbii(mu,b,i,i1) i1
              Lxbii(mu,b,i,i1) = Vxbii(mu,b,i,i1)
#
           ENDDO mu
#
           DO b1
#
              Tbbii(b1,b,i,i1) = 0.0
#
              DO mu
#
                 T1bbii(b1,b,i,i1) = Lxbii(mu,b,i,i1)*cb(mu,b1)
                 Tbbii(b1,b,i,i1) += T1bbii(b1,b,i,i1)
#
              ENDDO mu
#
              PUT Vbbii(b1,b,i,i1) = Tbbii(b1,b,i,i1)
#
           ENDDO b1
#
           deallocate Lxbii(*,b,i,i1)
#
     ENDPARDO b, i, i1
#
     PARDO b, i, i1
#
           allocate Lxbii(*,b,i,i1)
#
           DO mu
#
              REQUEST Vxbii(mu,b,i,i1) i1
              Lxbii(mu,b,i,i1) = Vxbii(mu,b,i,i1)
#
           ENDDO mu
#
           DO j
#
              Tjbii(j,b,i,i1) = 0.0
#
              DO mu
#
                 T1jbii(j,b,i,i1) = Lxbii(mu,b,i,i1)*cb(mu,j)
                 Tjbii(j,b,i,i1) += T1jbii(j,b,i,i1)
#
              ENDDO mu
#
              PUT Vjbii(j,b,i,i1) = Tjbii(j,b,i,i1)
#
           ENDDO j
#
           deallocate Lxbii(*,b,i,i1)
#
     ENDPARDO b, i, i1
#
     PARDO b, a, i
#
           allocate Lxbai(*,b,a,i)
#
           DO mu
#
              REQUEST Vxbai(mu,b,a,i) i
              Lxbai(mu,b,a,i) = Vxbai(mu,b,a,i)
#
           ENDDO mu
#
           DO b1
#
              Tbbai(b1,b,a,i) = 0.0
#
              DO mu
#
                 T1bbai(b1,b,a,i) = Lxbai(mu,b,a,i)*cb(mu,b1)
                 Tbbai(b1,b,a,i) += T1bbai(b1,b,a,i)
#
              ENDDO mu
#
              PUT Vbbai(b1,b,a,i) = Tbbai(b1,b,a,i)
#
           ENDDO b1
#
           deallocate Lxbai(*,b,a,i)
#
     ENDPARDO b, a, i
#
     PARDO q, i, j
#
           allocate Lxiqj(*,i,q,j)
#
           DO mu
#
              REQUEST Vxiqj(mu,i,q,j) j
              Lxiqj(mu,i,q,j) = Vxiqj(mu,i,q,j)
#
           ENDDO mu
#
           DO p
#
              Tpiqj(p,i,q,j) = 0.0
#
              DO mu
#
                 T1piqj(p,i,q,j) = Lxiqj(mu,i,q,j)*ca(mu,p)
                 Tpiqj(p,i,q,j) += T1piqj(p,i,q,j)
#
              ENDDO mu
#
              PUT Vpiqj(p,i,q,j) = Tpiqj(p,i,q,j)
#
           ENDDO p
#
           deallocate Lxiqj(*,i,q,j)
#
     ENDPARDO q, i, j
#
     PARDO a, j, j1
#
           allocate Lxajj(*,a,j,j1)
#
           DO mu
#
              REQUEST Vxajj(mu,a,j,j1) j1
              Lxajj(mu,a,j,j1) = Vxajj(mu,a,j,j1)
#
           ENDDO mu
#
           DO a1
#
              Taajj(a1,a,j,j1) = 0.0
#
              DO mu
#
                 T1aajj(a1,a,j,j1) = Lxajj(mu,a,j,j1)*ca(mu,a1)
                 Taajj(a1,a,j,j1) += T1aajj(a1,a,j,j1)
#
              ENDDO mu
#
              PUT Vaajj(a1,a,j,j1) = Taajj(a1,a,j,j1)
#
           ENDDO a1
#
           deallocate Lxajj(*,a,j,j1)
#
     ENDPARDO a, j, j1
#
     PARDO b, i, j
#
           allocate Lixbj(i,*,b,j)
#
           DO mu
#
              REQUEST Vixbj(i,mu,b,j) j
              Lixbj(i,mu,b,j) = Vixbj(i,mu,b,j)
#
           ENDDO mu
#
           DO a
#
              Tiabj(i,a,b,j) = 0.0
#
              DO mu
#
                 T1iabj(i,a,b,j) = Lixbj(i,mu,b,j)*ca(mu,a)
                 Tiabj(i,a,b,j) += T1iabj(i,a,b,j)
#
              ENDDO mu
#
              PUT Viabj(i,a,b,j) = Tiabj(i,a,b,j)
#
           ENDDO a
#
           deallocate Lixbj(i,*,b,j)
#
     ENDPARDO b, i, j
#
     PARDO a, b, j
#
           allocate Lxabj(*,a,b,j)
#
           DO mu
#
              REQUEST Vxabj(mu,a,b,j) j
              Lxabj(mu,a,b,j) = Vxabj(mu,a,b,j)
#
           ENDDO mu
#
           DO a1
#
              Taabj(a1,a,b,j) = 0.0
#
              DO mu
#
                 T1aabj(a1,a,b,j) = Lxabj(mu,a,b,j)*ca(mu,a1)
                 Taabj(a1,a,b,j) += T1aabj(a1,a,b,j)
#
              ENDDO mu
#
              PUT Vaabj(a1,a,b,j) = Taabj(a1,a,b,j)
#
           ENDDO a1
#
           deallocate Lxabj(*,a,b,j)
#
     ENDPARDO a, b, j
#
#    ------------------------------------------------------------------------
#
     PARDO a, a1, a2
#
           allocate Lxaaa(*,a,a1,a2)
#
           DO mu
#
              REQUEST Vxaaa(mu,a,a1,a2) a2
#
              Lxaaa(mu,a,a1,a2) = Vxaaa(mu,a,a1,a2)
#
           ENDDO mu
#
           DO a3
#
              Taaaa(a3,a,a1,a2) = 0.0
#
              DO mu
#
                 T1aaaa(a3,a,a1,a2) = Lxaaa(mu,a,a1,a2)*ca(mu,a3)
                 Taaaa(a3,a,a1,a2) += T1aaaa(a3,a,a1,a2)
#
              ENDDO mu
#
              T1aaaa(a1,a,a3,a2)       = Taaaa(a3,a,a1,a2)
              T1aaaa(a1,a,a3,a2)      *= -1.0
              PUT VSaaaa(a3,a,a1,a2)  += Taaaa(a3,a,a1,a2)
              PUT VSaaaa(a1,a,a3,a2)  += T1aaaa(a1,a,a3,a2)
#
           ENDDO a3
#
           deallocate Lxaaa(*,a,a1,a2)
#
     ENDPARDO a, a1, a2
#
#    ------------------------------------------------------------------------
#
     PARDO b, b1, b2
#
           allocate Lxbbb(*,b,b1,b2)
#
           DO mu
#
              REQUEST Vxbbb(mu,b,b1,b2) b2
#
              Lxbbb(mu,b,b1,b2) = Vxbbb(mu,b,b1,b2)
#
           ENDDO mu
#
           DO b3
#
              Tbbbb(b3,b,b1,b2) = 0.0
#
              DO mu
#
                 T1bbbb(b3,b,b1,b2) = Lxbbb(mu,b,b1,b2)*cb(mu,b3)
                 Tbbbb(b3,b,b1,b2) += T1bbbb(b3,b,b1,b2)
#
              ENDDO mu
#
              T1bbbb(b1,b,b3,b2)       = Tbbbb(b3,b,b1,b2)
              T1bbbb(b1,b,b3,b2)      *= -1.0
              PUT VSbbbb(b3,b,b1,b2)  += Tbbbb(b3,b,b1,b2)
              PUT VSbbbb(b1,b,b3,b2)  += T1bbbb(b1,b,b3,b2)
#
           ENDDO b3
#
           deallocate Lxbbb(*,b,b1,b2)
#
     ENDPARDO b, b1, b2
#
#    ------------------------------------------------------------------------
#
     PARDO a2, b1, b2
#
           allocate Lxabb(*,a2,b1,b2)
#
           DO mu
#
              REQUEST Vxabb(mu,a2,b1,b2) b2
#
              Lxabb(mu,a2,b1,b2) = Vxabb(mu,a2,b1,b2)
#
           ENDDO mu
#
           DO a1
#
              Taabb(a1,a2,b1,b2) = 0.0
#
              DO mu
#
                 T1aabb(a1,a2,b1,b2) = Lxabb(mu,a2,b1,b2)*ca(mu,a1)
                 Taabb(a1,a2,b1,b2) += T1aabb(a1,a2,b1,b2)
#
              ENDDO mu
#
              PUT Vaabb(a1,a2,b1,b2)  = Taabb(a1,a2,b1,b2)
#
           ENDDO a1
#
           deallocate Lxabb(*,a2,b1,b2)
#
     ENDPARDO a2, b1, b2
#
#    ------------------------------------------------------------------------
#
     execute server_barrier 
#
     ENDPROC TRAN_TRAN4
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
#    Create the distributed two-particle transformed integral arrays.
#
     PROC CREATE_MOINTS
#
#    ------------------------------------------------------------------------
#
      create VSpipi
      create Vaaii
      create Viaai
      create VSaaai
      create VSqjqj
      create Vbbjj
      create Vjbbj
      create VSbbbj
      create Vbbii
      create Vjbii
      create Vbbai
      create Vpiqj
      create Vaajj
      create Viabj
      create Vaabj
#
      create VSaaaa
      create VSbbbb
      create Vaabb
#
#    ------------------------------------------------------------------------
#
     ENDPROC CREATE_MOINTS
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
     PROC TRAN_UHF
#
         CALL CREATE_MOINTS  # --> create the distributed two-particle
                             #     transformed integral arrays.
         CALL TRAN_TRAN2     # --> performs the first two stages of the
                             #     two-electron integral transformation.
         CALL TRAN_TRAN3     # --> performs the third stage
                             #     two-electron integral transformation.
         CALL TRAN_TRAN4     # --> performs the fourth stage of the
                             #     two-electron integral transformation.
#
     ENDPROC TRAN_UHF
#
#    ------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
#
      PROC UHF_ENERGY
#     --------------------
#
#     'HF' terms
#     ----------
#
      esum    = 0.0
      ecorraa = 0.0
      PARDO a, a1, i, i1
#
            GET VSpipi(a,i,a1,i1)
            GET T1aiai_aa(a,i,a1,i1)
#
            etemp = VSpipi(a,i,a1,i1)*T1aiai_aa(a,i,a1,i1)
            etemp = 0.25*etemp
            esum += etemp
#
      ENDPARDO a, a1, i, i1
#
      execute sip_barrier
      collective ecorraa += esum
      execute print_scalar ecorraa
#
      ecorrbb = 0.0
      esum    = 0.0
      PARDO b, b1, j, j1
#
            GET VSqjqj(b,j,b1,j1)
            GET T1bjbj_bb(b,j,b1,j1)
#
            etemp = VSqjqj(b,j,b1,j1)*T1bjbj_bb(b,j,b1,j1)
            etemp = 0.25*etemp
            esum += etemp
#
      ENDPARDO b, b1, j, j1
      execute sip_barrier
      collective ecorrbb += esum
      execute print_scalar ecorrbb
#
      ecorrab = 0.0
      esum    = 0.0
      PARDO a, b, i, j
#
            GET Vpiqj(a,i,b,j)
            GET T1aibj_ab(a,i,b,j)
#
            etemp = T1aibj_ab(a,i,b,j)*Vpiqj(a,i,b,j)
            esum += etemp
#
      ENDPARDO a, b, i, j
      execute sip_barrier
      collective ecorrab += esum
      execute print_scalar ecorrab
#
      ecorrT  = ecorraa
      ecorrT += ecorrbb
      ecorrT += ecorrab
      execute print_scalar ecorrT
#
      ENDPROC UHF_ENERGY
#     -----------------------
#
# ---------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------
#
      PROC T2AA_REFERANCE
#     -------------------
#
#     Create distributed arrays used in the referance computation. 
#     ------------------------------------------------------------ 
#
      create T1aiai_aa 
#
      execute sip_barrier 
#
#     First initialize the amplitudes.
#     --------------------------------
#
#     T2AA  
#     -----
#
      esum    = 0.0
      ecorraa = 0.0 
      PARDO a, a1, i, i1
#
            GET                         VSpipi(a,i,a1,i1)
            taiai(a,i,a1,i1)          = VSpipi(a,i,a1,i1)
            execute energy_denominator  taiai(a,i,a1,i1)
            etemp                     = taiai(a,i,a1,i1)*VSpipi(a,i,a1,i1) 
            etemp                    *= 0.25 
            esum                     += etemp 
            PUT T1aiai_aa(a,i,a1,i1)  = taiai(a,i,a1,i1)
#
      ENDPARDO a, a1, i, i1
      collective ecorraa += esum
      execute print_scalar ecorraa 
#
      eold = ecorraa 
#
      ENDPROC T2AA_REFERANCE
#     ----------------------
#
# ---------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------
#
      PROC T2BB_REFERANCE
#     -------------------
#
#     Create distributed arrays used in the referance computation. 
#     ------------------------------------------------------------ 
#
      create T1bjbj_bb 
#
      execute sip_barrier 
#
#     First initialize the amplitudes.
#     --------------------------------
#
#     T2BB  
#     -----
#
      esum    = 0.0
      ecorrbb = 0.0 
      PARDO b, b1, j, j1
#
            GET                         VSqjqj(b,j,b1,j1)
            tbjbj(b,j,b1,j1)          = VSqjqj(b,j,b1,j1)
            execute energy_denominator  tbjbj(b,j,b1,j1)
            etemp                     = tbjbj(b,j,b1,j1)*VSqjqj(b,j,b1,j1) 
            etemp                    *= 0.25 
            esum                     += etemp 
            PUT T1bjbj_bb(b,j,b1,j1)  = tbjbj(b,j,b1,j1)
#
      ENDPARDO b, b1, j, j1
      collective ecorrbb += esum
      execute print_scalar ecorrbb 
#
      eold = ecorrbb 
#
      ENDPROC T2BB_REFERANCE
#     ----------------------
#
# ---------------------------------------------------------------------------
#
      PROC T2AB_REFERANCE
#     -------------------
#
#     Create distributed arrays used in the referance computation. 
#     ------------------------------------------------------------ 
#
      create T1aibj_ab 
#
      execute sip_barrier 
#
#     First initialize the amplitudes.
#     --------------------------------
#
#     T2AB  
#     -----
#
      esum    = 0.0
      ecorrab = 0.0 
#
      PARDO a, b, i, j
#
            GET                         Vpiqj(a,i,b,j)
            taibj(a,i,b,j)            = Vpiqj(a,i,b,j)
            execute energy_denominator  taibj(a,i,b,j)
            etemp                     = taibj(a,i,b,j)*Vpiqj(a,i,b,j) 
            esum                     += etemp 
            PUT T1aibj_ab(a,i,b,j)    = taibj(a,i,b,j)
#
      ENDPARDO a, b, i, j
#
      collective ecorrab += esum
      execute print_scalar ecorrab 
#
      ENDPROC T2AB_REFERANCE
#     ----------------------
#
# ---------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
#
#     Computed quantity    Description of quantity
#     --------------------------------------------
#
#     1. Iij_a
#     2. Iij_b
#     3. Iai_a
#     4. Iai_b
#     5. Iab_a
#     6. Iab_b
#     7. Xai_a
#     8. Xai_b
#
      PROC PINTER
#     -----------
#
#     Create distributed arrays. 
#     -------------------------- 
#
      create Iij_a
      create Iij_b
      create Iai_a
      create Iai_b
      create Iab_a
      create Iab_b
      create Ipq_a
      create Ipq_b
      create Xai_a
      create Xai_b
      execute sip_barrier 
#
#     Start Iij_a
#     -----------
#
      PARDO i, i1 
#
            Tii(i,i1) = 0.0  
#
            DO i2 
#
            IF i2 == i 
#
               GET Dij_a(i1,i2)
#
               T1ii(i,i1) = Dij_a(i1,i2)*Fock_a(i2,i)
               Tii(i,i1) -= T1ii(i,i1) 
#
            ENDIF # i2 == i 
#
            ENDDO i2 
#
            PUT Iij_a(i,i1) += Tii(i,i1)
#
      ENDPARDO i, i1 
#
      PARDO a, a1, i1, i2
#
            GET T1aiai_aa(a,i1,a1,i2)
#
            DO i
#
               GET                VSpipi(a,i,a1,i2)
               Tii(i,i1)        = VSpipi(a,i,a1,i2)*T1aiai_aa(a,i1,a1,i2)
               Tii(i,i1)       *= -0.5
               PUT Iij_a(i,i1) += Tii(i,i1)
#
            ENDDO i
#
      ENDPARDO a, a1, i1, i2
#
      PARDO a, b, i1, j
#
            GET T1aibj_ab(a,i1,b,j)
#
            DO i
#
               GET                Vpiqj(a,i,b,j)
               Tii(i,i1)        = Vpiqj(a,i,b,j)*T1aibj_ab(a,i1,b,j)
               Tii(i,i1)       *= -1.0
               PUT Iij_a(i,i1) += Tii(i,i1)
#
            ENDDO i
#
      ENDPARDO a, b, i1, j
#
#     Finish Iij_a
#     ------------
#
#     Start Iij_b
#     -----------
#
      PARDO j, j1 
#
            Tjj(j,j1) = 0.0  
#
            DO j2 
#
            IF j2 == j 
#
               GET Dij_b(j1,j2)
#
               T1jj(j,j1) = Dij_b(j1,j2)*Fock_b(j2,j)
               Tjj(j,j1) -= T1jj(j,j1) 
#
            ENDIF # j2 == j 
#
            ENDDO j2 
#
            PUT Iij_b(j,j1) += Tjj(j,j1)
#
      ENDPARDO j, j1 
#
      PARDO b, b1, j1, j2
#
            GET T1bjbj_bb(b,j1,b1,j2)
#
            DO j
#
               GET                VSqjqj(b,j,b1,j2)
               Tjj(j,j1)        = VSqjqj(b,j,b1,j2)*T1bjbj_bb(b,j1,b1,j2)
               Tjj(j,j1)       *= -0.5
               PUT Iij_b(j,j1) += Tjj(j,j1)
#
            ENDDO j
#
      ENDPARDO b, b1, j1, j2
#
      PARDO b, a, j1, i
#
            GET T1aibj_ab(a,i,b,j1)
#
            DO j
#
               GET                Vpiqj(a,i,b,j)
               Tjj(j,j1)        = Vpiqj(a,i,b,j)*T1aibj_ab(a,i,b,j1)
               Tjj(j,j1)       *= -1.0
               PUT Iij_b(j,j1) += Tjj(j,j1)
#
            ENDDO j
#
      ENDPARDO b, a, j1, i
#
#     Finish Iij_b
#     ------------
#
#     Start Iai_a
#     -----------
#
      PARDO a, a1, i1, i2
#
            GET T1aiai_aa(a,i1,a1,i2)
#
            DO i
#
               GET               VSpipi(a1,i2,i,i1)
               Tai(a,i)        = T1aiai_aa(a,i1,a1,i2)*VSpipi(a1,i2,i,i1)
               Tai(a,i)       *= -0.5
               PUT Iai_a(a,i) += Tai(a,i)
               PUT Ipq_a(a,i) += Tai(a,i)
#
               tia(i,a)        = tai(a,i) 
               PUT Ipq_a(i,a) += tia(i,a) 
#
            ENDDO i
#
      ENDPARDO a, a1, i1, i2
#
      PARDO a, b, i1, j
#
            GET T1aibj_ab(a,i1,b,j)
#
            DO i
#
               GET               Vjbii(j,b,i1,i) # Vppqq(i,i1,b,j)
               Tai(a,i)        = T1aibj_ab(a,i1,b,j)*Vjbii(j,b,i1,i)
               Tai(a,i)       *= -1.0
               PUT Iai_a(a,i) += Tai(a,i)
               PUT Ipq_a(a,i) += Tai(a,i)
#
               tia(i,a)        = tai(a,i) 
               PUT Ipq_a(i,a) += tia(i,a) 
#
            ENDDO i
#
      ENDPARDO a, b, i1, j
#
#     Finish Iai_a
#     ------------
#
#     Start Iai_b
#     -----------
#
      PARDO b, b1, j1, j2
#
            GET T1bjbj_bb(b,j1,b1,j2)
#
            DO j
#
               GET               VSqjqj(b1,j2,j,j1)
               Tbj(b,j)        = T1bjbj_bb(b,j1,b1,j2)*VSqjqj(b1,j2,j,j1)
               Tbj(b,j)       *= -0.5
               PUT Iai_b(b,j) += Tbj(b,j)
               PUT Ipq_b(b,j) += Tbj(b,j)
#
               tjb(j,b)        = tbj(b,j) 
               PUT Ipq_b(j,b) += tjb(j,b) 
#
            ENDDO j
#
      ENDPARDO b, b1, j1, j2
#
      PARDO b, a, j1, i
#
            GET T1aibj_ab(a,i,b,j1)
#
            DO j
#
               GET               Vpiqj(a,i,j,j1)
               Tbj(b,j)        = T1aibj_ab(a,i,b,j1)*Vpiqj(a,i,j,j1)
               Tbj(b,j)       *= -1.0
               PUT Iai_b(b,j) += Tbj(b,j)
               PUT Ipq_b(b,j) += Tbj(b,j)
#
               tjb(j,b)        = tbj(b,j) 
               PUT Ipq_b(j,b) += tjb(j,b) 
#
            ENDDO j
#
      ENDPARDO b, a, j1, i
#
#     Finish Iai_b
#     ------------
#
#     Start Iab_a
#     -----------

       PARDO a, a1, a2
#
             GET Dab_a(a2,a1)
             Taa(a,a1)         = Dab_a(a2,a1)*Fock_a(a2,a)
             Taa(a,a1)        *= -1.0
             PUT Iab_a(a,a1) += Taa(a,a1)
#
       ENDPARDO a, a1, a2 
#
      PARDO a1, a2, i, i1
#
            GET T1aiai_aa(a1,i,a2,i1)
#
            DO a
#
               GET                VSpipi(a,i,a2,i1)
               Taa(a,a1)        = VSpipi(a,i,a2,i1)*T1aiai_aa(a1,i,a2,i1)
               Taa(a,a1)       *= -0.5
               PUT Iab_a(a,a1) += Taa(a,a1)
#
            ENDDO a
#
      ENDPARDO a1, a2, i, i1
#
      PARDO a1, b, i, j
#
            GET T1aibj_ab(a1,i,b,j)
#
            DO a
#
               GET                Vpiqj(a,i,b,j)
               Taa(a,a1)        = Vpiqj(a,i,b,j)*T1aibj_ab(a1,i,b,j)
               Taa(a,a1)       *= -1.0  
               PUT Iab_a(a,a1) += Taa(a,a1)
#
            ENDDO a
#
      ENDPARDO a1, b, i, j
#
#     Finish Iab_a
#     ------------
#
#     Start Iab_b
#     -----------
#
       PARDO b, b1, b2
#
             GET Dab_b(b2,b1)
             Tbb(b,b1)         = Dab_b(b2,b1)*Fock_b(b2,b)
             Tbb(b,b1)        *= -1.0
             PUT Iab_b(b,b1) += Tbb(b,b1)
#
       ENDPARDO b, b1, b2 
#
      PARDO b1, b2, j, j1
#
            GET T1bjbj_bb(b1,j,b2,j1)
#
            DO b
#
               GET                VSqjqj(b,j,b2,j1)
               Tbb(b,b1)        = VSqjqj(b,j,b2,j1)*T1bjbj_bb(b1,j,b2,j1)
               Tbb(b,b1)       *= -0.5
               PUT Iab_b(b,b1) += Tbb(b,b1)
#
            ENDDO b
#
      ENDPARDO b1, b2, j, j1
#
      PARDO b1, a, i, j
#
            GET T1aibj_ab(a,i,b1,j)
#
            DO b
#
               GET                Vpiqj(a,i,b,j)
               Tbb(b,b1)        = Vpiqj(a,i,b,j)*T1aibj_ab(a,i,b1,j)
               Tbb(b,b1)       *= -1.0  
               PUT Iab_b(b,b1) += Tbb(b,b1)
#
            ENDDO b
#
      ENDPARDO b1, a, i, j
#
#     Finish Iab_b
#     ------------
#
      execute sip_barrier # --> Xai depends on Iai !
#
#     Start Xai_a
#     -----------
#
      PARDO a, i
#
            GET        Iai_a(a,i)
            Tai(a,i) = Iai_a(a,i)
#
            DO i1
            DO i2
#
               GET                 VSpipi(a,i,i2,i1)
               GET                 VSpipi(a,i,i1,i2)
               GET                 Dij_a(i2,i1)
#
               Taiii(a,i,i2,i1)  = VSpipi(a,i,i2,i1)
               T1aiii(a,i,i2,i1) = VSpipi(a,i,i1,i2)
               Taiii(a,i,i2,i1) += T1aiii(a,i,i2,i1)
               T1ai(a,i)         = Taiii(a,i,i2,i1)*Dij_a(i2,i1)
               T1ai(a,i)        *= 0.5
               Tai(a,i)         += T1ai(a,i)
#
            ENDDO i2
            ENDDO i1
#
            DO j
            DO j1
#
               GET                Vpiqj(a,i,j1,j)
               GET                Vpiqj(a,i,j,j1)
               GET                Dij_b(j1,j)
#
               Taijj(a,i,j1,j)  = Vpiqj(a,i,j1,j)
               T1aijj(a,i,j1,j) = Vpiqj(a,i,j,j1)
               Taijj(a,i,j1,j) += T1aijj(a,i,j1,j)
               T1ai(a,i)        = Taijj(a,i,j1,j)*Dij_b(j1,j)
               T1ai(a,i)       *= 0.5
               Tai(a,i)        += T1ai(a,i)
#
            ENDDO j1
            ENDDO j
#
            DO a1
            DO a2
#
               GET                 VSaaai(a2,a1,a,i)
               GET                 VSaaai(a1,a2,a,i)
               GET                 Dab_a(a2,a1)
#
               Taaai(a2,a1,a,i)  = VSaaai(a2,a1,a,i)
               T1aaai(a2,a1,a,i) = VSaaai(a1,a2,a,i)
               Taaai(a2,a1,a,i) += T1aaai(a2,a1,a,i)
               T1ai(a,i)         = Taaai(a2,a1,a,i)*Dab_a(a2,a1)
               T1ai(a,i)        *= 0.5
               Tai(a,i)         += T1ai(a,i)
#
            ENDDO a2
            ENDDO a1
#
            DO b
            DO b1
#
               GET                Vbbai(b1,b,a,i) # Vppqq(a,i,b1,b)
               GET                Vbbai(b,b1,a,i) # Vppqq(a,i,b,b1)
               GET                Dab_b(b1,b)
#
               Tbbai(b1,b,a,i)  = Vbbai(b1,b,a,i)
               T1bbai(b1,b,a,i) = Vbbai(b,b1,a,i)
               Tbbai(b1,b,a,i) += T1bbai(b1,b,a,i)
               T1ai(a,i)        = Tbbai(b1,b,a,i)*Dab_b(b1,b)
               T1ai(a,i)       *= 0.5
               Tai(a,i)        += T1ai(a,i)
#
            ENDDO b1
            ENDDO b
#
            DO a1
            DO a2
            DO i1
#
               GET         T1aiai_aa(a1,i1,a2,i)
               GET         VSaaai(a2,a,a1,i1)
#
               T1ai(a,i) = VSaaai(a2,a,a1,i1)*T1aiai_aa(a1,i1,a2,i)
               T1ai(a,i) *= 0.5
               Tai(a,i) += T1ai(a,i)
#
            ENDDO i1
            ENDDO a2
            ENDDO a1
#
            DO b
            DO a1
            DO j
#
               GET          T1aibj_ab(a1,i,b,j)
               GET          Vaabj(a1,a,b,j)
#
               T1ai(a,i)  = Vaabj(a1,a,b,j)*T1aibj_ab(a1,i,b,j)
               Tai(a,i)  += T1ai(a,i)
#
            ENDDO j
            ENDDO a1
            ENDDO b
#
            PUT Xai_a(a,i) = Tai(a,i)
#
      ENDPARDO a, i
#
#     Finish Xai_a
#     ------------
#
#     Start Xai_b
#     -----------
#
      PARDO b, j
#
            GET        Iai_b(b,j)
            Tbj(b,j) = Iai_b(b,j)
#
            DO j1
            DO j2
#
               GET                 VSqjqj(b,j,j2,j1)
               GET                 VSqjqj(b,j,j1,j2)
               GET                 Dij_b(j2,j1)
#
               Tbjjj(b,j,j2,j1)  = VSqjqj(b,j,j2,j1)
               T1bjjj(b,j,j2,j1) = VSqjqj(b,j,j1,j2)
               Tbjjj(b,j,j2,j1) += T1bjjj(b,j,j2,j1)
               T1bj(b,j)         = Tbjjj(b,j,j2,j1)*Dij_b(j2,j1)
               T1bj(b,j)        *= 0.5
               Tbj(b,j)         += T1bj(b,j)
#
            ENDDO j2
            ENDDO j1
#
            DO i
            DO i1
#
               GET                Vpiqj(i1,i,b,j)
               GET                Vpiqj(i,i1,b,j)
               GET                Dij_a(i1,i)
#
               Tiibj(i1,i,b,j)  = Vpiqj(i1,i,b,j)
               T1iibj(i1,i,b,j) = Vpiqj(i,i1,b,j)
               Tiibj(i1,i,b,j) += T1iibj(i1,i,b,j)
               T1bj(b,j)        = Tiibj(i1,i,b,j)*Dij_a(i1,i)
               T1bj(b,j)       *= 0.5
               Tbj(b,j)        += T1bj(b,j)
#
            ENDDO i1
            ENDDO i
#
            DO b1
            DO b2
#
               GET                 VSbbbj(b2,b1,b,j)
               GET                 VSbbbj(b1,b2,b,j)
               GET                 Dab_b(b2,b1)
#
               Tbbbj(b2,b1,b,j)  = VSbbbj(b2,b1,b,j)
               T1bbbj(b2,b1,b,j) = VSbbbj(b1,b2,b,j)
               Tbbbj(b2,b1,b,j) += T1bbbj(b2,b1,b,j)
               T1bj(b,j)         = Tbbbj(b2,b1,b,j)*Dab_b(b2,b1)
               T1bj(b,j)        *= 0.5
               Tbj(b,j)         += T1bj(b,j)
#
            ENDDO b2
            ENDDO b1
#
            DO a
            DO a1
#
               GET                Vaabj(a1,a,b,j)
               GET                Vaabj(a,a1,b,j)
               GET                Dab_a(a1,a)
#
               Taabj(a1,a,b,j)  = Vaabj(a1,a,b,j)
               T1aabj(a1,a,b,j) = Vaabj(a,a1,b,j)
               Taabj(a1,a,b,j) += T1aabj(a1,a,b,j)
               T1bj(b,j)        = Taabj(a1,a,b,j)*Dab_a(a1,a)
               T1bj(b,j)       *= 0.5
               Tbj(b,j)        += T1bj(b,j)
#
            ENDDO a1
            ENDDO a
#
            DO b1
            DO b2
            DO j1
#
               GET         T1bjbj_bb(b1,j1,b2,j)
               GET         VSbbbj(b2,b,b1,j1)
#
               T1bj(b,j) = VSbbbj(b2,b,b1,j1)*T1bjbj_bb(b1,j1,b2,j)
               T1bj(b,j) *= 0.5
               Tbj(b,j) += T1bj(b,j)
#
            ENDDO j1
            ENDDO b2
            ENDDO b1
#
            DO a
            DO b1
            DO i
#
               GET          T1aibj_ab(a,i,b1,j)
               GET          Vbbai(b1,b,a,i) # Vppqq(a,i,b1,b)
#
               T1bj(b,j)  = Vbbai(b1,b,a,i)*T1aibj_ab(a,i,b1,j)
               Tbj(b,j)  += T1bj(b,j)
#
            ENDDO i
            ENDDO b1
            ENDDO a
#
            PUT Xai_b(b,j) = Tbj(b,j)
#
      ENDPARDO b, j
      execute sip_barrier
#
#     Finish Xai_b
#     ------------
#
      ENDPROC PINTER
#     --------------
#
# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------
#
      PROC DENSIJ
#     -----------
#
#     Create distributed denisty arrays. 
#     --------------------------------- 
#
      create Dij_a 
      create Dij_b 
      create Dpq_a 
      create Dpq_b 
#
      execute sip_barrier 
#
# ---------------------------------------------------------------------------
#
#     Start Dij_a
#     -----------
#
      PARDO a, a1, i1
#
            allocate L1aiai(a,*,a1,i1)
#
            DO i2
#
               GET                  T1aiai_aa(a,i2,a1,i1)
               L1aiai(a,i2,a1,i1) = T1aiai_aa(a,i2,a1,i1)
#
            ENDDO i2
#
            DO i
#
               GET T1aiai_aa(a,i,a1,i1)
#
               DO i2
#
                  Tii(i,i2)        = T1aiai_aa(a,i,a1,i1)*L1aiai(a,i2,a1,i1)
                  Tii(i,i2)       *= -0.5
                  PUT Dij_a(i,i2) += Tii(i,i2)
                  PUT Dpq_a(i,i2) += Tii(i,i2)
#
               ENDDO i2
#
            ENDDO i
#
            deallocate L1aiai(a,*,a1,i1)
#
      ENDPARDO a, a1, i1
#
      PARDO a, b, j
#
            allocate L1aibj(a,*,b,j)
#
            DO i2
#
               GET                T1aibj_ab(a,i2,b,j)
               L1aibj(a,i2,b,j) = T1aibj_ab(a,i2,b,j)
#
            ENDDO i2
#
            DO i
#
               GET T1aibj_ab(a,i,b,j)
#
               DO i2
#
                  Tii(i,i2)        = T1aibj_ab(a,i,b,j)*L1aibj(a,i2,b,j)
                  Tii(i,i2)       *= -1.0
                  PUT Dij_a(i,i2) += Tii(i,i2)
                  PUT Dpq_a(i,i2) += Tii(i,i2)
#
               ENDDO i2
#
            ENDDO i
#
            deallocate L1aibj(a,*,b,j)
#
      ENDPARDO a, b, j
#
#     Finish Dij_a
#     ------------
#
#     Start Dij_b
#     -----------
#
      PARDO b, b1, j1
#
            allocate L1bjbj(b,*,b1,j1)
#
            DO j2
#
               GET                  T1bjbj_bb(b,j2,b1,j1)
               L1bjbj(b,j2,b1,j1) = T1bjbj_bb(b,j2,b1,j1)
#
            ENDDO j2
#
            DO j
#
               GET T1bjbj_bb(b,j,b1,j1)
#
               DO j2
#
                  Tjj(j,j2)        = T1bjbj_bb(b,j,b1,j1)*L1bjbj(b,j2,b1,j1)
                  Tjj(j,j2)       *= -0.5
                  PUT Dij_b(j,j2) += Tjj(j,j2)
                  PUT Dpq_b(j,j2) += Tjj(j,j2)
#
               ENDDO j2
#
            ENDDO j
#
            deallocate L1bjbj(b,*,b1,j1)
#
      ENDPARDO b, b1, j1
#
      PARDO b, a, i
#
            allocate L1bjai(b,*,a,i)
#
            DO j2
#
               GET                T1aibj_ab(a,i,b,j2)
               L1bjai(b,j2,a,i) = T1aibj_ab(a,i,b,j2)
#
            ENDDO j2
#
            DO j
#
               GET T1aibj_ab(a,i,b,j)
#
               DO j2
#
                  Tjj(j,j2)        = T1aibj_ab(a,i,b,j)*L1bjai(b,j2,a,i)
                  Tjj(j,j2)       *= -1.0
                  PUT Dij_b(j,j2) += Tjj(j,j2)
                  PUT Dpq_b(j,j2) += Tjj(j,j2)
#
               ENDDO j2
#
            ENDDO j
#
            deallocate L1bjai(b,*,a,i)
#
      ENDPARDO b, a, i
#
#     Finish Dij_b
#     ------------
#
# ---------------------------------------------------------------------------
#
      ENDPROC DENSIJ
#
# ---------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------
#
      PROC DENSAB
#     -----------
#
# ---------------------------------------------------------------------------
#
#     Create distributed denisty arrays. 
#     --------------------------------- 
#
      create Dab_a 
      create Dab_b 
#
      execute sip_barrier 
#
#     Start Dab_a
#     -----------
#
      PARDO i, i1, a1
#
            allocate L2aiai(*,i,a1,i1)
#
            DO a2
#
               GET                  T1aiai_aa(a2,i,a1,i1)
               L2aiai(a2,i,a1,i1) = T1aiai_aa(a2,i,a1,i1)
#
            ENDDO a2
#
            DO a
#
               GET T1aiai_aa(a,i,a1,i1)
#
               DO a2
#
                  Taa(a,a2)        = T1aiai_aa(a,i,a1,i1)*L2aiai(a2,i,a1,i1)
                  Taa(a,a2)       *= 0.5
                  PUT Dab_a(a,a2) += Taa(a,a2)
                  PUT Dpq_a(a,a2) += Taa(a,a2)
#
               ENDDO a2
#
            ENDDO a
#
            deallocate L2aiai(*,i,a1,i1)
#
      ENDPARDO i, i1, a1
#
      PARDO i, j, b
#
            allocate L2aibj(*,i,b,j)
#
            DO a1
#
               GET                T1aibj_ab(a1,i,b,j)
               L2aibj(a1,i,b,j) = T1aibj_ab(a1,i,b,j)
#
            ENDDO a1
#
            DO a
#
               GET T1aibj_ab(a,i,b,j)
#
               DO a1
#
                  Taa(a,a1)        = T1aibj_ab(a,i,b,j)*L2aibj(a1,i,b,j)
                  PUT Dab_a(a,a1) += Taa(a,a1)
                  PUT Dpq_a(a,a1) += Taa(a,a1)
#
               ENDDO a1
#
            ENDDO a
#
            deallocate L2aibj(*,i,b,j)
#
      ENDPARDO i, j, b
#
#     Finish Dab_a
#     ------------
#
#     Start Dab_b
#     -----------
#
      PARDO j, j1, b1
#
            allocate L2bjbj(*,j,b1,j1)
#
            DO b2
#
               GET                  T1bjbj_bb(b2,j,b1,j1)
               L2bjbj(b2,j,b1,j1) = T1bjbj_bb(b2,j,b1,j1)
#
            ENDDO b2
#
            DO b
#
               GET T1bjbj_bb(b,j,b1,j1)
#
               DO b2
#
                  Tbb(b,b2)        = T1bjbj_bb(b,j,b1,j1)*L2bjbj(b2,j,b1,j1)
                  Tbb(b,b2)       *= 0.5
                  PUT Dab_b(b,b2) += Tbb(b,b2)
                  PUT Dpq_b(b,b2) += Tbb(b,b2)
#
               ENDDO b2
#
            ENDDO b
#
            deallocate L2bjbj(*,j,b1,j1)
#
      ENDPARDO j, j1, b1
#
      PARDO i, j, a
#
            allocate L2bjai(*,j,a,i)
#
            DO b1
#
               GET                T1aibj_ab(a,i,b1,j)
               L2bjai(b1,j,a,i) = T1aibj_ab(a,i,b1,j)
#
            ENDDO b1
#
            DO b
#
               GET T1aibj_ab(a,i,b,j)
#
               DO b1
#
                  Tbb(b,b1)        = T1aibj_ab(a,i,b,j)*L2bjai(b1,j,a,i)
                  PUT Dab_b(b,b1) += Tbb(b,b1)
                  PUT Dpq_b(b,b1) += Tbb(b,b1)
#
               ENDDO b1
#
            ENDDO b
#
            deallocate L2bjai(*,j,a,i)
#
      ENDPARDO i, j, a
#
#     Finish Dab_b
#     ------------
#
# ---------------------------------------------------------------------------
#
      ENDPROC DENSAB
#
# ---------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
#
      PROC DENSAI
#     -----------
#
#     Create distributed denisty arrays. 
#     --------------------------------- 
#
      create Dai_a 
      create Dai_b 
      create Daiold_a 
      create Daiold_b 
#
#     Initialize the sum of the squares to 0
#     --------------------------------------
#
      eold  = 0.0
      ecrit = 0.00000000001
      execute sip_barrier
#
      DO kiter
#
         esum = 0.0
         enew = 0.0
#
         PARDO a, i
#
               GET        Xai_a(a,i)
               tai(a,i) = Xai_a(a,i)
#
               DO a1
               DO i1
#
                  GET                 VSpipi(a,i,a1,i1)
                  GET                 Vaaii(a,a1,i1,i)
                  GET                 Viaai(i,a,a1,i1)
#
                  GET                 Daiold_a(a1,i1)
#
                  Taiai(a,i,a1,i1)  = VSpipi(a,i,a1,i1)
                  T3aiai(a,i,a1,i1) = Vaaii(a,a1,i1,i)
                  T4aiai(a,i,a1,i1) = Viaai(i,a,a1,i1)
#
                  Taiai(a,i,a1,i1) -= T3aiai(a,i,a1,i1)
                  Taiai(a,i,a1,i1) += T4aiai(a,i,a1,i1)
#
                  t1ai(a,i)         = Taiai(a,i,a1,i1)*Daiold_a(a1,i1)
                  tai(a,i)         += t1ai(a,i)
#
               ENDDO i1
               ENDDO a1
#
               DO b
               DO j
#
                  GET               Vpiqj(a,i,b,j)
                  GET               Viabj(i,a,b,j)
                  GET               Daiold_b(b,j)
#
                  Taibj(a,i,b,j)  = Vpiqj(a,i,b,j)
                  T1aibj(a,i,b,j) = Viabj(i,a,b,j)
                  Taibj(a,i,b,j) += T1aibj(a,i,b,j)
#
                  t1ai(a,i)       = Taibj(a,i,b,j)*Daiold_b(b,j)
                  tai(a,i)       += t1ai(a,i)
#
               ENDDO j
               ENDDO b
#
               execute energy_denominator tai(a,i)
               PUT Dai_a(a,i)           = tai(a,i)
#
#              Add new contribution to the sum of the squares
#              ----------------------------------------------
#
               etemp = tai(a,i)*tai(a,i)
               esum += etemp
#
         ENDPARDO a, i
#
         PARDO b, j
#
               GET        Xai_b(b,j)
               tbj(b,j) = Xai_b(b,j)
#
               DO b1
               DO j1
#
                  GET                 VSqjqj(b,j,b1,j1)
                  GET                 Vbbjj(b,b1,j1,j)
                  GET                 Vjbbj(j,b,b1,j1)
                  GET                 Daiold_b(b1,j1)
#
                  Tbjbj(b,j,b1,j1)  = VSqjqj(b,j,b1,j1)
                  T3bjbj(b,j,b1,j1) = Vbbjj(b,b1,j1,j)
                  T4bjbj(b,j,b1,j1) = Vjbbj(j,b,b1,j1)
#
                  Tbjbj(b,j,b1,j1) -= T3bjbj(b,j,b1,j1)
                  Tbjbj(b,j,b1,j1) += T4bjbj(b,j,b1,j1)
#
                  t1bj(b,j)         = Tbjbj(b,j,b1,j1)*Daiold_b(b1,j1)
                  tbj(b,j)         += t1bj(b,j)
#
               ENDDO j1
               ENDDO b1
#
               DO a
               DO i
#
                  GET               Vpiqj(a,i,b,j)
                  GET               Viabj(i,a,b,j)
                  GET               Daiold_a(a,i)
#
                  Taibj(a,i,b,j)  = Vpiqj(a,i,b,j)
                  T1aibj(a,i,b,j) = Viabj(i,a,b,j)
                  Taibj(a,i,b,j) += T1aibj(a,i,b,j)
#
                  t1bj(b,j)       = Taibj(a,i,b,j)*Daiold_a(a,i)
                  tbj(b,j)       += t1bj(b,j)
#
               ENDDO i
               ENDDO a
#
               execute energy_denominator tbj(b,j)
               PUT Dai_b(b,j)           = tbj(b,j)
#
#              Add new contribution to the sum of the squares
#              ----------------------------------------------
#
               etemp = tbj(b,j)*tbj(b,j)
               esum += etemp
#
         ENDPARDO b, j
         execute sip_barrier
#
         collective enew += esum
         execute print_scalar enew
#
#        Check on convergence
#        --------------------
#
         IF enew < eold
            ediff = eold - enew
            IF ediff < ecrit
               exit # kiter
            ENDIF
         ENDIF
#
         IF enew > eold
            ediff = enew - eold
            IF ediff < ecrit
               exit # kiter
            ENDIF
         ENDIF
#
#        Reset eold --> enew
#        -------------------
#
         PARDO a, i
               GET Dai_a(a,i)
               PUT Daiold_a(a,i) = Dai_a(a,i)
         ENDPARDO a, i
#
         PARDO b, j
               GET Dai_b(b,j)
               PUT Daiold_b(b,j) = Dai_b(b,j)
         ENDPARDO b, j
#
         eold = enew
#
      ENDDO kiter
#
      execute sip_barrier
      delete Daiold_a 
      delete Daiold_b 
#
      PARDO a, i
            GET Dai_a(a,i)
            tpp(i,a) = Dai_a(a,i)
            PUT Dpq_a(a,i) += Dai_a(a,i)
            PUT Dpq_a(i,a) += tpp(i,a)
      ENDPARDO a, i
#
      PARDO b, j
            GET Dai_b(b,j)
            tqq(j,b) = Dai_b(b,j)
            PUT Dpq_b(b,j) += Dai_b(b,j)
            PUT Dpq_b(j,b) += tqq(j,b)
      ENDPARDO b, j
#
       PARDO a, i, i1
#
             GET Dai_a(a,i1)
             Tai(a,i)         = Dai_a(a,i1)*Fock_a(i1,i)
             Tai(a,i)        *= -1.0
             PUT Iai_a(a,i) += Tai(a,i) 
#
       ENDPARDO a, i, i1 
#
       PARDO b, j, j1
#
             GET Dai_b(b,j1)
             Tbj(b,j)         = Dai_b(b,j1)*Fock_b(j1,j)
             Tbj(b,j)        *= -1.0
             PUT Iai_b(b,j) += Tbj(b,j)
#
       ENDPARDO b, j, j1 
#
      ENDPROC DENSAI
#     --------------
#
# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
#
      PROC FORM_UYAI  
#     --------------
#
#     Create distributed perturbed coefficient arrays. 
#     ------------------------------------------------ 
#
      create Uyai  
      create Uybj  
      create Uyaiold  
      create Uybjold  
#
#     Initialize the sum of the squares to 0
#     --------------------------------------
#
      eold  = 0.0
      ecrit = 0.00000000001
#
      DO kiter
#
         esum = 0.0
         enew = 0.0
#
         PARDO a, i
#
               GET        Qyai(a,i)
               tai(a,i) = Qyai(a,i)
#
               DO a1
               DO i1
#
                  GET                 VSpipi(a,i,a1,i1)
                  GET                 Vaaii(a,a1,i1,i)
                  GET                 Viaai(i,a,a1,i1)
                  GET                 Uyaiold(a1,i1)
#
                  Taiai(a,i,a1,i1)  = VSpipi(a,i,a1,i1)
                  T3aiai(a,i,a1,i1) = Vaaii(a,a1,i1,i)
                  T4aiai(a,i,a1,i1) = Viaai(i,a,a1,i1)
#
                  Taiai(a,i,a1,i1) -= T3aiai(a,i,a1,i1)
                  Taiai(a,i,a1,i1) += T4aiai(a,i,a1,i1)
#
                  t1ai(a,i)         = Taiai(a,i,a1,i1)*Uyaiold(a1,i1)
                  tai(a,i)         += t1ai(a,i)
#
               ENDDO i1
               ENDDO a1
#
               DO b
               DO j
#
                  GET               Vpiqj(a,i,b,j)
                  GET               Viabj(i,a,b,j)
                  GET               Uybjold(b,j)
#
                  Taibj(a,i,b,j)  = Vpiqj(a,i,b,j)
                  T1aibj(a,i,b,j) = Viabj(i,a,b,j)
                  Taibj(a,i,b,j) += T1aibj(a,i,b,j)
#
                  t1ai(a,i)       = Taibj(a,i,b,j)*Uybjold(b,j)
                  tai(a,i)       += t1ai(a,i)
#
               ENDDO j
               ENDDO b
#
               execute energy_denominator tai(a,i)
               PUT Uyai(a,i)           = tai(a,i)
#
#              Add new contribution to the sum of the squares
#              ----------------------------------------------
#
               etemp = tai(a,i)*tai(a,i)
               esum += etemp
#
         ENDPARDO a, i
#
         PARDO b, j
#
               GET        Qybj(b,j)
               tbj(b,j) = Qybj(b,j)
#
               DO b1
               DO j1
#
                  GET                 VSqjqj(b,j,b1,j1)
                  GET                 Vbbjj(b,b1,j1,j)
                  GET                 Vjbbj(j,b,b1,j1)
#
                  GET                 Uybjold(b1,j1)
#
                  Tbjbj(b,j,b1,j1)  = VSqjqj(b,j,b1,j1)
                  T3bjbj(b,j,b1,j1) = Vbbjj(b,b1,j1,j)
                  T4bjbj(b,j,b1,j1) = Vjbbj(j,b,b1,j1)
#
                  Tbjbj(b,j,b1,j1) -= T3bjbj(b,j,b1,j1)
                  Tbjbj(b,j,b1,j1) += T4bjbj(b,j,b1,j1)
#
                  t1bj(b,j)         = Tbjbj(b,j,b1,j1)*Uybjold(b1,j1)
                  tbj(b,j)         += t1bj(b,j)
#
               ENDDO j1
               ENDDO b1
#
               DO a
               DO i
#
                  GET               Vpiqj(a,i,b,j)
                  GET               Viabj(i,a,b,j)
                  GET               Uyaiold(a,i)
#
                  Taibj(a,i,b,j)  = Vpiqj(a,i,b,j)
                  T1aibj(a,i,b,j) = Viabj(i,a,b,j)
                  Taibj(a,i,b,j) += T1aibj(a,i,b,j)
#
                  t1bj(b,j)       = Taibj(a,i,b,j)*Uyaiold(a,i)
                  tbj(b,j)       += t1bj(b,j)
#
               ENDDO i
               ENDDO a
#
               execute energy_denominator tbj(b,j)
               PUT Uybj(b,j)           = tbj(b,j)
#
#              Add new contribution to the sum of the squares
#              ----------------------------------------------
#
               etemp = tbj(b,j)*tbj(b,j)
               esum += etemp
#
         ENDPARDO b, j
         execute sip_barrier
#
         PARDO a, i 
               GET Uyai(a,i) 
               PUT Uyaiold(a,i) = Uyai(a,i) 
         ENDPARDO a, i 
#
         PARDO b, j 
               GET Uybj(b,j) 
               PUT Uybjold(b,j) = Uybj(b,j) 
         ENDPARDO b, j 
#
         collective enew += esum
         execute print_scalar enew 
#
#        Check on convergence
#        --------------------
#
         IF enew < eold
            ediff = eold - enew
            IF ediff < ecrit
               exit # kiter
            ENDIF
         ENDIF
#
         IF enew > eold
            ediff = enew - eold
            IF ediff < ecrit
               exit # kiter
            ENDIF
         ENDIF
#
         IF enew == eold
            exit # kiter
         ENDIF
#
#        Reset eold --> enew
#        -------------------
#
         eold = enew
#
      ENDDO kiter
#
      execute sip_barrier 
#
      PARDO a, i 
            GET              Uyai(a,i)
            GET              Sya(a,i)
#
            PUT Uyaa(a,i)  = Uyai(a,i) 
#
            tai(a,i)       = Uyai(a,i) 
            tai(a,i)      += Sya(a,i) 
            tia(i,a)       = tai(a,i) 
            tia(i,a)      *= -1.0  
#
            PUT Uyaa(i,a)  = tia(i,a) 

      ENDPARDO a, i 
#
      PARDO b, j 
            GET              Uybj(b,j)
            GET              Syb(b,j) 
#
            PUT Uybb(b,j)  = Uybj(b,j) 
#
            tbj(b,j)       = Uybj(b,j) 
            tbj(b,j)      += Syb(b,j) 
            tjb(j,b)       = tbj(b,j) 
            tjb(j,b)      *= -1.0  
#
            PUT Uybb(j,b)  = tjb(j,b) 
#
      ENDPARDO b, j 
#
      execute sip_barrier 
#
      delete Uyai  
      delete Uybj  
      delete Uyaiold  
      delete Uybjold  
#
      ENDPROC FORM_UYAI  
#     -----------------
#
# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------
#
      PROC FORM_UXAI  
#     --------------
#
#     Create distributed perturbed coefficient arrays. 
#     ------------------------------------------------ 
#
      create Uxai  
      create Uxbj  
      create Uxaiold  
      create Uxbjold  
#
#     Initialize the sum of the squares to 0
#     --------------------------------------
#
      eold  = 0.0
      ecrit = 0.00000000001
      execute sip_barrier
#
      DO kiter
#
         esum = 0.0
         enew = 0.0
#
         PARDO a, i
#
               GET        Qxai(a,i)
               tai(a,i) = Qxai(a,i)
#
               DO a1
               DO i1
#
                  GET                 VSpipi(a,i,a1,i1)
                  GET                 Vaaii(a,a1,i1,i)
                  GET                 Viaai(i,a,a1,i1)
#
                  GET                 Uxaiold(a1,i1)
#
                  Taiai(a,i,a1,i1)  = VSpipi(a,i,a1,i1)
                  T3aiai(a,i,a1,i1) = Vaaii(a,a1,i1,i)
                  T4aiai(a,i,a1,i1) = Viaai(i,a,a1,i1)
#
                  Taiai(a,i,a1,i1) -= T3aiai(a,i,a1,i1)
                  Taiai(a,i,a1,i1) += T4aiai(a,i,a1,i1)
#
                  t1ai(a,i)         = Taiai(a,i,a1,i1)*Uxaiold(a1,i1)
                  tai(a,i)         += t1ai(a,i)
#
               ENDDO i1
               ENDDO a1
#
               DO b
               DO j
#
                  GET               Vpiqj(a,i,b,j)
                  GET               Viabj(i,a,b,j)
                  GET               Uxbjold(b,j)
#
                  Taibj(a,i,b,j)  = Vpiqj(a,i,b,j)
                  T1aibj(a,i,b,j) = Viabj(i,a,b,j)
                  Taibj(a,i,b,j) += T1aibj(a,i,b,j)
#
                  t1ai(a,i)       = Taibj(a,i,b,j)*Uxbjold(b,j)
                  tai(a,i)       += t1ai(a,i)
#
               ENDDO j
               ENDDO b
#
               execute energy_denominator tai(a,i)
               PUT Uxai(a,i)           = tai(a,i)
#
#              Add new contribution to the sum of the squares
#              ----------------------------------------------
#
               etemp = tai(a,i)*tai(a,i)
               esum += etemp
#
         ENDPARDO a, i
#
         PARDO b, j
#
               GET        Qxbj(b,j)
               tbj(b,j) = Qxbj(b,j)
#
               DO b1
               DO j1
#
                  GET                 VSqjqj(b,j,b1,j1)
                  GET                 Vbbjj(b,b1,j1,j)
                  GET                 Vjbbj(j,b,b1,j1)
                  GET                 Uxbjold(b1,j1)
#
                  Tbjbj(b,j,b1,j1)  = VSqjqj(b,j,b1,j1)
                  T3bjbj(b,j,b1,j1) = Vbbjj(b,b1,j1,j)
                  T4bjbj(b,j,b1,j1) = Vjbbj(j,b,b1,j1)
#
                  Tbjbj(b,j,b1,j1) -= T3bjbj(b,j,b1,j1)
                  Tbjbj(b,j,b1,j1) += T4bjbj(b,j,b1,j1)
#
                  t1bj(b,j)         = Tbjbj(b,j,b1,j1)*Uxbjold(b1,j1)
                  tbj(b,j)         += t1bj(b,j)
#
               ENDDO j1
               ENDDO b1
#
               DO a
               DO i
#
                  GET               Vpiqj(a,i,b,j)
                  GET               Viabj(i,a,b,j)
                  GET               Uxaiold(a,i)
#
                  Taibj(a,i,b,j)  = Vpiqj(a,i,b,j)
                  T1aibj(a,i,b,j) = Viabj(i,a,b,j)
                  Taibj(a,i,b,j) += T1aibj(a,i,b,j)
#
                  t1bj(b,j)       = Taibj(a,i,b,j)*Uxaiold(a,i)
                  tbj(b,j)       += t1bj(b,j)
#
               ENDDO i
               ENDDO a
#
               execute energy_denominator tbj(b,j)
               PUT Uxbj(b,j)           = tbj(b,j)
#
#              Add new contribution to the sum of the squares
#              ----------------------------------------------
#
               etemp = tbj(b,j)*tbj(b,j)
               esum += etemp
#
         ENDPARDO b, j
         execute sip_barrier
#
         collective enew += esum
         execute print_scalar enew
         execute sip_barrier
#
         PARDO a, i 
               GET Uxai(a,i) 
               PUT Uxaiold(a,i) = Uxai(a,i) 
         ENDPARDO a, i 
#
         PARDO b, j 
               GET Uxbj(b,j) 
               PUT Uxbjold(b,j) = Uxbj(b,j) 
         ENDPARDO b, j 
#
#        Check on convergence
#        --------------------
#
         IF enew < eold
            ediff = eold - enew
            IF ediff < ecrit
               exit # kiter
            ENDIF
         ENDIF
#
         IF enew > eold
            ediff = enew - eold
            IF ediff < ecrit
               exit # kiter
            ENDIF
         ENDIF
#
         IF enew == eold
            exit # kiter
         ENDIF
#
#        Reset eold --> enew
#        -------------------
#
         eold = enew
#
      ENDDO kiter
#
      execute sip_barrier 
#
      PARDO a, i 
            GET              Uxai(a,i)
            GET              Sxa(a,i)
#
            PUT Uxaa(a,i)  = Uxai(a,i) 
#
            tai(a,i)       = Uxai(a,i) 
            tai(a,i)      += Sxa(a,i) 
            tia(i,a)       = tai(a,i) 
            tia(i,a)      *= -1.0  
#
            PUT Uxaa(i,a)  = tia(i,a) 

      ENDPARDO a, i 
#
      PARDO b, j 
            GET              Uxbj(b,j)
            GET              Sxb(b,j) 
#
            PUT Uxbb(b,j)  = Uxbj(b,j) 
#
            tbj(b,j)       = Uxbj(b,j) 
            tbj(b,j)      += Sxb(b,j) 
            tjb(j,b)       = tbj(b,j) 
            tjb(j,b)      *= -1.0  
#
            PUT Uxbb(j,b)  = tjb(j,b) 
#
      ENDPARDO b, j 
#
      execute sip_barrier 
#
      delete Uxai  
      delete Uxbj  
      delete Uxaiold  
      delete Uxbjold  
#
      ENDPROC FORM_UXAI  
#     -----------------
#
# ---------------------------------------------------------------------------------
#
# ----------------------------------------------------------------------  
#
# The two-electron integral deivative <mn|ls>^l is computed
# and transformed to the MO basis for use in constructing
# the Hessian. The transformation is performed in 4 steps as
# is usually done. Since there will always be one occupied index
# in the Hessian computation the 4-types of integrals are computed. 
#
# 1. DTpppi
# 2. DTqqqj
# 3. DTppqj  
# 4. DTqqpi   
#
# Note that the integrals are not antisymmetrized in the transformation. 
#
# ---------------------------------------------------------------------- 
#
      PROC DINT_TRAN 
#     --------------  
#
      create DTxxxi 
      create DTxxxj 
      create Qyai 
      create Qybj 
      create QAyy 
      create QByy 
      create QAByy 
      execute sip_barrier 
#
#     Compute integrals and perform first stage of the transformation. 
#     ---------------------------------------------------------------- 
#
      PARDO mu, nu, lambda
#
            allocate Dxxxi(mu,lambda,nu,*) 
            allocate Dxxxj(mu,lambda,nu,*) 
#
            DO  sigma 
#
                execute                       der2_comp saoint(mu,lambda,nu,sigma) 
                daoint(mu,lambda,nu,sigma)  = saoint(mu,lambda,nu,sigma) 
#
#               Update QAyy, QByy, and QAByy  
#               ----------------------------
#
                GET                   Dhfa(lambda,nu) 
                GET                   Dhfb(lambda,nu) 
                GET                   Dhfa(nu,sigma) 
                GET                   Dhfb(nu,sigma) 
#
                txx(nu,sigma)   = Dhfa(nu,sigma) 
                txx(nu,sigma)  += Dhfb(nu,sigma) 
#
                t1xx(mu,sigma)      = daoint(mu,lambda,nu,sigma)*Dhfa(lambda,nu)
                t1xx(mu,sigma)     *= -1.0  
                PUT QAyy(mu,sigma) += t1xx(mu,sigma) 
#
                t1xx(mu,sigma)      = daoint(mu,lambda,nu,sigma)*Dhfb(lambda,nu)
                t1xx(mu,sigma)     *= -1.0  
                PUT QByy(mu,sigma) += t1xx(mu,sigma) 
#
                t1xx(mu,lambda)         = daoint(mu,lambda,nu,sigma)*txx(nu,sigma)
                PUT QAByy(mu,lambda)   += t1xx(mu,lambda) 
#
                DO i 
#
                   txxxi(mu,lambda,nu,i)  = daoint(mu,lambda,nu,sigma)*ca(sigma,i)
                   Dxxxi(mu,lambda,nu,i) += txxxi(mu,lambda,nu,i) 
#
                ENDDO i 
#
                DO j 
#
                   txxxj(mu,lambda,nu,j)  = daoint(mu,lambda,nu,sigma)*cb(sigma,j)
                   Dxxxj(mu,lambda,nu,j) += txxxj(mu,lambda,nu,j) 
#
                ENDDO j 
#
            ENDDO  sigma 
#
            DO i 
#
               PUT DTxxxi(mu,lambda,nu,i) = Dxxxi(mu,lambda,nu,i) 
#
            ENDDO i 
#
            DO j 
#
               PUT DTxxxj(mu,lambda,nu,j) = Dxxxj(mu,lambda,nu,j) 
#
            ENDDO j 
#
            deallocate Dxxxi(mu,lambda,nu,*) 
            deallocate Dxxxj(mu,lambda,nu,*) 
#
      ENDPARDO mu, nu, lambda
#
      create DTxxpi 
      create DTxxqj 
#
      execute sip_barrier 
#
#     Perform second stage of the transformation. 
#     ------------------------------------------- 
#
      PARDO mu, lambda, i 
#
            allocate Exxpi(mu,lambda,*,i) 
#
            DO nu  
#
               GET DTxxxi(mu,lambda,nu,i) 
#
               DO p 
#
                  txxpi(mu,lambda,p,i)  = DTxxxi(mu,lambda,nu,i)*ca(nu,p) 
                  Exxpi(mu,lambda,p,i) += txxpi(mu,lambda,p,i)  
#
               ENDDO p 
#
            ENDDO nu  
#
            DO p 
#
               PUT DTxxpi(mu,lambda,p,i) = Exxpi(mu,lambda,p,i) 
#
            ENDDO p 
#
            deallocate Exxpi(mu,lambda,*,i) 
#
      ENDPARDO mu, lambda, i 
#
      PARDO mu, lambda, j 
#
            allocate Exxqj(mu,lambda,*,j) 
#
            DO nu  
#
               GET DTxxxj(mu,lambda,nu,j) 
#
               DO q 
#
                  txxqj(mu,lambda,q,j)  = DTxxxj(mu,lambda,nu,j)*cb(nu,q) 
                  Exxqj(mu,lambda,q,j) += txxqj(mu,lambda,q,j)  
#
               ENDDO q 
#
            ENDDO nu  
#
            DO q 
#
               PUT DTxxqj(mu,lambda,q,j) = Exxqj(mu,lambda,q,j) 
#
            ENDDO q 
#
            deallocate Exxqj(mu,lambda,*,j) 
#
      ENDPARDO mu, lambda, j 
#
      create DTxppi 
      create DTxqqj 
      create DTxqpi 
      create DTxpqj 
#
      execute sip_barrier 
#
      delete DTxxxi 
      delete DTxxxj 
#
#     Perform third stage of the transformation. 
#     ------------------------------------------ 
#
      PARDO mu, p, i 
#
            allocate Fxppi(mu,*,p,i) 
            allocate Fxqpi(mu,*,p,i) 
#
            DO nu 
#
               GET DTxxpi(mu,nu,p,i) 
#
               DO p1 
#
                  txppi(mu,p1,p,i) = DTxxpi(mu,nu,p,i)*ca(nu,p1) 
                  Fxppi(mu,p1,p,i) += txppi(mu,p1,p,i)
#
               ENDDO p1 
#
               DO q 
#
                  txqpi(mu,q,p,i) = DTxxpi(mu,nu,p,i)*cb(nu,q) 
                  Fxqpi(mu,q,p,i) += txqpi(mu,q,p,i)
#
               ENDDO q 
#
            ENDDO nu 
#
            DO p1 
#
               PUT DTxppi(mu,p1,p,i) = Fxppi(mu,p1,p,i)  
#
            ENDDO p1 
#
            DO q 
#
               PUT DTxqpi(mu,q,p,i) = Fxqpi(mu,q,p,i)  
#
            ENDDO q 
#
            deallocate Fxppi(mu,*,p,i) 
            deallocate Fxqpi(mu,*,p,i) 
#
      ENDPARDO mu, p, i 
#
      PARDO mu, q, j 
#
            allocate Fxqqj(mu,*,q,j) 
            allocate Fxpqj(mu,*,q,j) 
#
            DO nu 
#
               GET DTxxqj(mu,nu,q,j) 
#
               DO q1 
#
                  txqqj(mu,q1,q,j) = DTxxqj(mu,nu,q,j)*cb(nu,q1) 
                  Fxqqj(mu,q1,q,j) += txqqj(mu,q1,q,j)
#
               ENDDO q1 
#
               DO p 
#
                  txpqj(mu,p,q,j) = DTxxqj(mu,nu,q,j)*ca(nu,p) 
                  Fxpqj(mu,p,q,j) += txpqj(mu,p,q,j)
#
               ENDDO p 
#
            ENDDO nu 
#
            DO q1 
#
               PUT DTxqqj(mu,q1,q,j) = Fxqqj(mu,q1,q,j)  
#
            ENDDO q1 
#
            DO p 
#
               PUT DTxpqj(mu,p,q,j) = Fxpqj(mu,p,q,j)  
#
            ENDDO p 
#
            deallocate Fxqqj(mu,*,q,j) 
            deallocate Fxpqj(mu,*,q,j) 
#
      ENDPARDO mu, q, j 
#
      create DTpppi 
      create DTqqqj 
      create DTqqpi 
      create DTppqj 
#
      execute sip_barrier 
#
      delete DTxxpi 
      delete DTxxqj  
#
#     Perform fourth stage of the transformation. 
#     ------------------------------------------- 
#
      PARDO p, p1, i 
#
            allocate Fpppi(*,p1,p,i) 
#
            DO mu 
#
               GET DTxppi(mu,p1,p,i) 
#
               DO p2 
#
                  tpppi(p2,p1,p,i)  = DTxppi(mu,p1,p,i)*ca(mu,p2) 
                  Fpppi(p2,p1,p,i) += tpppi(p2,p1,p,i) 
#
               ENDDO p2 
#
            ENDDO mu 
#
            DO p2 
#
               PUT DTpppi(p2,p1,p,i) = Fpppi(p2,p1,p,i) 
#
            ENDDO p2 
#
            deallocate Fpppi(*,p1,p,i) 
#
      ENDPARDO p, p1, i 
#
      PARDO p, q, i 
#
            allocate Fqqpi(*,q,p,i) 
#
            DO mu 
#
               GET DTxqpi(mu,q,p,i) 
#
               DO q1 
#
                  tqqpi(q1,q,p,i)  = DTxqpi(mu,q,p,i)*cb(mu,q1) 
                  Fqqpi(q1,q,p,i) += tqqpi(q1,q,p,i) 
#
               ENDDO q1 
#
            ENDDO mu 
#
            DO q1 
#
               PUT DTqqpi(q1,q,p,i) = Fqqpi(q1,q,p,i) 
#
            ENDDO q1 
#
            deallocate Fqqpi(*,q,p,i) 
#
      ENDPARDO p, q, i 
#
      PARDO q, q1, j 
#
            allocate Fqqqj(*,q1,q,j) 
#
            DO mu 
#
               GET DTxqqj(mu,q1,q,j) 
#
               DO q2 
#
                  tqqqj(q2,q1,q,j)  = DTxqqj(mu,q1,q,j)*cb(mu,q2) 
                  Fqqqj(q2,q1,q,j) += tqqqj(q2,q1,q,j) 
#
               ENDDO q2 
#
            ENDDO mu 
#
            DO q2 
#
               PUT DTqqqj(q2,q1,q,j) = Fqqqj(q2,q1,q,j) 
#
            ENDDO q2 
#
            deallocate Fqqqj(*,q1,q,j) 
#
      ENDPARDO q, q1, j 
#
      PARDO q, p, j 
#
            allocate Fppqj(*,p,q,j) 
#
            DO mu 
#
               GET DTxpqj(mu,p,q,j) 
#
               DO p1 
#
                  tppqj(p1,p,q,j)  = DTxpqj(mu,p,q,j)*ca(mu,p1) 
                  Fppqj(p1,p,q,j) += tppqj(p1,p,q,j) 
#
               ENDDO p1 
#
            ENDDO mu 
#
            DO p1 
#
               PUT DTppqj(p1,p,q,j) = Fppqj(p1,p,q,j) 
#
            ENDDO p1 
#
            deallocate Fppqj(*,p,q,j) 
#
      ENDPARDO q, p, j 
#
      create Fya 
      create Fyb 
      execute sip_barrier 
#
      delete DTxppi 
      delete DTxqqj  
      delete DTxpqj 
      delete DTxqpi 
#
#     Finish the contribution to Qyai and Qybj 
#     ---------------------------------------- 
#
      PARDO mu, sigma  
#
            GET QAByy(mu,sigma) 
            GET QAyy(mu,sigma) 
            GET QByy(mu,sigma) 
#
            txx(mu,sigma)   = QAByy(mu,sigma)  
            txx(mu,sigma)  += QAyy(mu,sigma)  
#
            t1xx(mu,sigma)  = QAByy(mu,sigma)  
            t1xx(mu,sigma) += QByy(mu,sigma)  
#
            DO a  
#
               tax(a,sigma) = txx(mu,sigma)*ca(mu,a)  
#
               DO i 
#
                  tai(a,i)       = tax(a,sigma)*ca(sigma,i) 
                  execute dump_block tai(a,i) 
                  PUT Qyai(a,i) += tai(a,i)  
#
               ENDDO i 
#
            ENDDO a  
#
            DO b  
#
               tbx(b,sigma) = t1xx(mu,sigma)*cb(mu,b)  
#
               DO j 
#
                  tbj(b,j)       = tbx(b,sigma)*cb(sigma,j) 
                  PUT Qybj(b,j) += tbj(b,j)  
#
               ENDDO j 
#
            ENDDO b  
#
            DO a
#
               tpx(a,sigma) = ca(mu,a)*txx(mu,sigma)
#
               DO a1 
#
                  tpp(a,a1)       = tpx(a,sigma)*ca(sigma,a1)
                  PUT Fya(a,a1) += tpp(a,a1)
#
               ENDDO a1 
#
            ENDDO a
#
            DO i
#
               tpx(i,sigma) = ca(mu,i)*txx(mu,sigma)
#
               DO i1 
#
                  tpp(i,i1)       = tpx(i,sigma)*ca(sigma,i1)
                  PUT Fya(i,i1) += tpp(i,i1)
#
               ENDDO i1 
#
            ENDDO i
#
            DO b
#
               tqx(b,sigma) = cb(mu,b)*t1xx(mu,sigma)
#
               DO b1  
#
                  tqq(b,b1)       = tqx(b,sigma)*cb(sigma,b1)
                  PUT Fyb(b,b1) += tqq(b,b1)
#
               ENDDO b1  
#
            ENDDO b
#
            DO j
#
               tqx(j,sigma) = cb(mu,j)*t1xx(mu,sigma)
#
               DO j1  
#
                  tqq(j,j1)       = tqx(j,sigma)*cb(sigma,j1)
                  PUT Fyb(j,j1) += tqq(j,j1)
#
               ENDDO j1  
#
            ENDDO j
#
      ENDPARDO mu, sigma  
#
      execute sip_barrier 
#
      ENDPROC DINT_TRAN 
#     -----------------  
#
# ---------------------------------------------------------------------- 
#
# ----------------------------------------------------------------------
#
      PROC T2PERTAA  
#     ------------- 
#
#     Create new and old t2aa arrays. 
#     ------------------------------ 
#
      create t2aa_new 
      execute sip_barrier 
#
#     Initialize amplitudes. 
#     ---------------------- 
#
      eold = 0.0 
      esum = 0.0 
      execute sip_barrier 
#
      PARDO a, a1, i, i1 
#
            GET                      DTpppi(a,i,a1,i1) 
            GET                      DTpppi(a,i1,a1,i) 
            taiai(a,i,a1,i1)       = DTpppi(a,i,a1,i1) 
            t1aiai(a,i,a1,i1)      = DTpppi(a,i1,a1,i) 
            taiai(a,i,a1,i1)      -= t1aiai(a,i,a1,i1) 
            execute energy_denominator taiai(a,i,a1,i1) 
#
            PUT t2aa_new(a,i,a1,i1)= taiai(a,i,a1,i1) 
#
            etemp                  = taiai(a,i,a1,i1)*DTpppi(a,i,a1,i1) 
            esum                  += etemp 
#
      ENDPARDO a, a1, i, i1 
# 
      execute    sip_barrier 
      collective eold += esum 
      execute print_scalar eold 
#
      ENDPROC T2PERTAA  
#     ---------------- 
#
# ----------------------------------------------------------------------
#
# ----------------------------------------------------------------------
#
      PROC T2PERTBB  
#     ------------- 
#
#     Create new and old t2aa arrays. 
#     ------------------------------ 
#
      create t2bb_new 
      execute sip_barrier 
#
#     Initialize amplitudes. 
#     ---------------------- 
#
      eold = 0.0 
      esum = 0.0 
      execute sip_barrier 
#
      PARDO b, b1, j, j1 
#
            GET                      DTqqqj(b,j,b1,j1) 
            GET                      DTqqqj(b,j1,b1,j) 
            tbjbj(b,j,b1,j1)       = DTqqqj(b,j,b1,j1) 
            t1bjbj(b,j,b1,j1)      = DTqqqj(b,j1,b1,j) 
            tbjbj(b,j,b1,j1)      -= t1bjbj(b,j,b1,j1) 
            execute energy_denominator tbjbj(b,j,b1,j1) 
#
            PUT t2bb_new(b,j,b1,j1)= tbjbj(b,j,b1,j1) 
#
            etemp                  = tbjbj(b,j,b1,j1)*DTqqqj(b,j,b1,j1) 
            esum                  += etemp 
#
      ENDPARDO b, b1, j, j1 
# 
      execute    sip_barrier 
      collective eold += esum 
      execute print_scalar eold 
#
      ENDPROC T2PERTBB  
#     ---------------- 
#
# ----------------------------------------------------------------------
#
# ----------------------------------------------------------------------
#
      PROC T2PERTAB  
#     ------------- 
#
#     Create new and old t2aa arrays. 
#     ------------------------------ 
#
      create t2ab_new 
      execute sip_barrier 
#
#     Initialize amplitudes. 
#     ---------------------- 
#
      eold = 0.0 
      esum = 0.0 
      execute sip_barrier 
#
      PARDO a, b, i, j 
#
            GET                      DTppqj(a,i,b,j) 
            taibj(a,i,b,j)         = DTppqj(a,i,b,j) 
            execute energy_denominator taibj(a,i,b,j) 
#
            PUT t2ab_new(a,i,b,j)  = taibj(a,i,b,j) 
#
            etemp                  = taibj(a,i,b,j)*DTppqj(a,i,b,j) 
            esum                  += etemp 
#
      ENDPARDO a, b, i, j 
# 
      execute    sip_barrier 
      collective eold += esum 
      execute print_scalar eold 
#
      ENDPROC T2PERTAB  
#     ---------------- 
#
# ----------------------------------------------------------------------
#
# ----------------------------------------------------------------------
#
      PROC PAMP 
#     --------- 
#
         CALL T2PERTAA  
         CALL T2PERTAB  
         CALL T2PERTBB  
#
      ENDPROC PAMP 
#     ------------ 
#
# ----------------------------------------------------------------------
#
# ----------------------------------------------------------------------  
#
# The two-electron integral deivative <mn|ls>^l is computed
# and transformed to the MO basis for use in constructing
# the Hessian. The transformation is performed in 3 steps as
# as only the vovo integrals are needed. 
#
# 1. VXpipi  
# 1. VXqjqj  
# 1. VXpiqj  
#
# Note that the integrals are not antisymmetrized in the transformation. 
#
# ---------------------------------------------------------------------- 
#
      PROC TRAN_VX_XIXI  
#     ----------------- 
#
      create VXxixi  
      create VXxjxj  
      create VXxixj  
      create Qxai 
      create Qxbj  
      create QAxx
      create QBxx
      create QABxx 
      execute sip_barrier 
#
#     Compute integrals and perform first two stages of the transformation. 
#     --------------------------------------------------------------------- 
#
      PARDO mu, nu, lambda, sigma 
#
             execute der2_comp             saoint(mu,nu,lambda,sigma) 
             daoint(mu,nu,lambda,sigma)  = saoint(mu,nu,lambda,sigma) 
#
#            Update QAxx, QBxx, and QABxx
#            ----------------------------
#
             GET                   Dhfa(lambda,sigma)
             GET                   Dhfb(lambda,sigma)
             GET                   Dhfa(lambda,nu)
             GET                   Dhfb(lambda,nu)
#
             txx(lambda,sigma)   = Dhfa(lambda,sigma)
             txx(lambda,sigma)  += Dhfb(lambda,sigma)
#
             t1xx(mu,sigma)      = daoint(mu,nu,lambda,sigma)*Dhfa(lambda,nu)
             t1xx(mu,sigma)     *= -1.0
             PUT QAxx(mu,sigma) += t1xx(mu,sigma)
#
             t1xx(mu,sigma)      = daoint(mu,nu,lambda,sigma)*Dhfb(lambda,nu)
             t1xx(mu,sigma)     *= -1.0
             PUT QBxx(mu,sigma) += t1xx(mu,sigma)
#
             t1xx(mu,nu)         = daoint(mu,nu,lambda,sigma)*txx(lambda,sigma)
             PUT QABxx(mu,nu)   += t1xx(mu,nu)
#
             DO i 
#
                txxxi(mu,nu,lambda,i) = daoint(mu,nu,lambda,sigma)*ca(sigma,i)
#
                DO i1 
#
                   txixi(mu,i1,lambda,i) = txxxi(mu,nu,lambda,i)*ca(nu,i1) 
                   put VXxixi(mu,i1,lambda,i) += txixi(mu,i1,lambda,i) 
#
                ENDDO i1 
#
             ENDDO i 
#
             DO j 
#
                txxxj(mu,nu,lambda,j)  = daoint(mu,nu,lambda,sigma)*cb(sigma,j)
#
                DO j1 
#
                   txjxj(mu,j1,lambda,j) = txxxj(mu,nu,lambda,j)*cb(nu,j1) 
                   put VXxjxj(mu,j1,lambda,j) += txjxj(mu,j1,lambda,j) 
#
                ENDDO j1 
#
                DO i 
#
                   txixj(mu,i,lambda,j) = txxxj(mu,nu,lambda,j)*ca(nu,i) 
                   put VXxixj(mu,i,lambda,j) += txixj(mu,i,lambda,j) 
#
                ENDDO i 
#
             ENDDO j 
#
      ENDPARDO mu, nu, lambda, sigma 
#
#     Perform third stage of the transformation. 
#     ------------------------------------------ 
#
#     Alpha/Alpha sipn component. 
#     --------------------------- 
#
      create VXxipi 
      execute sip_barrier 
#
      PARDO mu, nu
#
            DO i
            DO i1
#
               GET VXxixi(mu,i,nu,i1)
#
               DO a
                  Txiai(mu,i,a,i1) = VXxixi(mu,i,nu,i1)*ca(nu,a)
                  PUT VXxipi(mu,i,a,i1) += Txiai(mu,i,a,i1)
               ENDDO a
#
            ENDDO i1
            ENDDO i
#
      ENDPARDO mu, nu
#
      create VXpipi
      execute sip_barrier 
      delete VXxixi 
#
      PARDO mu, a
#
            DO i
            DO i1
#
               GET VXxipi(mu,i,a,i1)
#
               DO a1
                  Taiai(a1,i,a,i1) = VXxipi(mu,i,a,i1)*ca(mu,a1)
                  PUT VXpipi(a1,i,a,i1) += Taiai(a1,i,a,i1)
               ENDDO a1
#
            ENDDO i1
            ENDDO i
#
      ENDPARDO mu, a
#
      execute sip_barrier 
      delete VXxipi 
#
#     Beta/Beta sipn component. 
#     ------------------------- 
#
      create VXxjqj 
      execute sip_barrier 
#
      PARDO mu, nu
#
            DO j
            DO j1
#
               GET VXxjxj(mu,j,nu,j1)
#
               DO b
                  Txjbj(mu,j,b,j1) = VXxjxj(mu,j,nu,j1)*cb(nu,b)
                  PUT VXxjqj(mu,j,b,j1) += Txjbj(mu,j,b,j1)
               ENDDO b
#
            ENDDO j1
            ENDDO j
#
      ENDPARDO mu, nu
#
      create VXqjqj
      execute sip_barrier 
      delete VXxjxj 
#
      PARDO mu, b
#
            DO j
            DO j1
#
               GET VXxjqj(mu,j,b,j1)
#
               DO b1
                  Tbjbj(b1,j,b,j1) = VXxjqj(mu,j,b,j1)*cb(mu,b1)
                  PUT VXqjqj(b1,j,b,j1) += Tbjbj(b1,j,b,j1)
               ENDDO b1
#
            ENDDO j1
            ENDDO j
#
      ENDPARDO mu, b
#
      execute sip_barrier 
      delete VXxjqj 
#
#     Alpha/Beta sipn component. 
#     -------------------------- 
#
      create VXxiqj 
      execute sip_barrier 
#
      PARDO mu, nu
#
            DO i
            DO j
#
               GET VXxixj(mu,i,nu,j)
#
               DO b
                  Txibj(mu,i,b,j) = VXxixj(mu,i,nu,j)*cb(nu,b)
                  PUT VXxiqj(mu,i,b,j) += Txibj(mu,i,b,j)
               ENDDO b
#
            ENDDO j
            ENDDO i
#
      ENDPARDO mu, nu
#
      create VXpiqj
      execute sip_barrier 
      delete VXxixj 
#
      PARDO mu, b
#
            DO i
            DO j
#
               GET VXxiqj(mu,i,b,j)
#
               DO a
                  Taibj(a,i,b,j) = VXxiqj(mu,i,b,j)*ca(mu,a)
                  PUT VXpiqj(a,i,b,j) += Taibj(a,i,b,j)
               ENDDO a
#
            ENDDO j
            ENDDO i
#
      ENDPARDO mu, b
#
      create Fxa 
      create Fxb 
      execute sip_barrier 
      delete VXxiqj 
#
#     Finish the contribution to Qxai and Qxbj
#     ----------------------------------------
#
      PARDO mu, sigma
#
            GET QABxx(mu,sigma)
            GET QAxx(mu,sigma)
            GET QBxx(mu,sigma)
#
            txx(mu,sigma)   = QABxx(mu,sigma)
            txx(mu,sigma)  += QAxx(mu,sigma)
#
            t1xx(mu,sigma)  = QABxx(mu,sigma)
            t1xx(mu,sigma) += QBxx(mu,sigma)
#
            DO a
#
               tax(a,sigma) = ca(mu,a)*txx(mu,sigma)
#
               DO i
#
                  tai(a,i)       = tax(a,sigma)*ca(sigma,i)
                  PUT Qxai(a,i) += tai(a,i)
#
               ENDDO i
#
            ENDDO a
#
            DO b
#
               tbx(b,sigma) = cb(mu,b)*t1xx(mu,sigma)
#
               DO j
#
                  tbj(b,j)       = tbx(b,sigma)*cb(sigma,j)
                  PUT Qxbj(b,j) += tbj(b,j)
#
               ENDDO j
#
            ENDDO b
#
            DO i
#
               tpx(i,sigma) = ca(mu,i)*txx(mu,sigma)
#
               DO i1 
#
                  tpp(i,i1)       = tpx(i,sigma)*ca(sigma,i1)
                  PUT Fxa(i,i1) += tpp(i,i1)
#
               ENDDO i1 
#
            ENDDO i
#
            DO a
#
               tpx(a,sigma) = ca(mu,a)*txx(mu,sigma)
#
               DO a1 
#
                  tpp(a,a1)       = tpx(a,sigma)*ca(sigma,a1)
                  PUT Fxa(a,a1) += tpp(a,a1)
#
               ENDDO a1 
#
            ENDDO a
#
            DO b
#
               tqx(b,sigma) = cb(mu,b)*t1xx(mu,sigma)
#
               DO b1  
#
                  tqq(b,b1)       = tqx(b,sigma)*cb(sigma,b1)
                  PUT Fxb(b,b1) += tqq(b,b1)
#
               ENDDO b1  
#
            ENDDO b
#
            DO j
#
               tqx(j,sigma) = cb(mu,j)*t1xx(mu,sigma)
#
               DO j1  
#
                  tqq(j,j1)       = tqx(j,sigma)*cb(sigma,j1)
                  PUT Fxb(j,j1) += tqq(j,j1)
#
               ENDDO j1  
#
            ENDDO j
#
      ENDPARDO mu, sigma
#
#     Complete the HF hessian by including the 'two-electron' piece
#     ------------------------------------------------------------- 
#
      PARDO mu, nu 
#
            GET QABxx(mu,nu) 
            GET QAxx(mu,nu) 
            GET QBxx(mu,nu) 
#
            GET Dhfya(mu,nu)  
            GET Dhfyb(mu,nu)  
#
            txx(mu,nu)  = Dhfya(mu,nu) 
            txx(mu,nu) += Dhfyb(mu,nu) 
#
            etemp = txx(mu,nu)*QABxx(mu,nu) 
            etemp *= 0.5 
    #       hessxy += etemp 
#
            etemp = Dhfya(mu,nu)*QAxx(mu,nu)              
            etemp *= 0.5 
    #       hessxy += etemp 
#
            etemp = Dhfyb(mu,nu)*QBxx(mu,nu)              
            etemp *= 0.5 
    #       hessxy += etemp 
#
      ENDPARDO mu, nu 
#
      execute sip_barrier
#
      ENDPROC TRAN_VX_XIXI  
#     --------------------  
#
# ---------------------------------------------------------------------- 
#
      PROC VY_UY 
#     ---------- 
#
#     Add contributions to derivative MO integrals from derivatives of coefficients. 
#     ------------------------------------------------------------------------------ 
#
      create T2yFullaa 
      create T2yFullab 
      create T2yFullbb 
#
      execute sip_barrier 
#
#     alpha-alpha first 
#     ----------------- 
#
      PARDO a, a1, i, i1 
#
            GET DTpppi(a,i,a1,i1) 
            GET DTpppi(a,i1,a1,i)
#
            tpppp(a,i,a1,i1)  = DTpppi(a,i,a1,i1)  
            t1pppp(a,i,a1,i1) = DTpppi(a,i1,a1,i) 
            tpppp(a,i,a1,i1) -= t1pppp(a,i,a1,i1)
#
            DO a2 
#
               GET VSpipi(a2,i,a1,i1) 
               GET Uyaa(a2,a) 
#
               t1pppp(a,i,a1,i1) = VSpipi(a2,i,a1,i1)*Uyaa(a2,a)
               tpppp(a,i,a1,i1) += t1pppp(a,i,a1,i1)
#
            ENDDO a2 
#
            DO i2  
#
               GET VSpipi(i2,i,a1,i1) 
               GET Uyaa(i2,a) 
#
               t1pppp(a,i,a1,i1) = VSpipi(i2,i,a1,i1)*Uyaa(i2,a)
               tpppp(a,i,a1,i1) += t1pppp(a,i,a1,i1)
#
            ENDDO i2 
#
            DO a2 
#
               GET VSpipi(a,i,a2,i1) 
               GET Uyaa(a2,a1) 
#
               t1pppp(a,i,a1,i1) = VSpipi(a,i,a2,i1)*Uyaa(a2,a1)  
               tpppp(a,i,a1,i1) += t1pppp(a,i,a1,i1)
#
            ENDDO a2 
#
            DO i2 
#
               GET VSpipi(a,i,i2,i1) 
               GET Uyaa(i2,a1) 
#
               t1pppp(a,i,a1,i1) = VSpipi(a,i,i2,i1)*Uyaa(i2,a1)  
               tpppp(a,i,a1,i1) += t1pppp(a,i,a1,i1)
#
            ENDDO i2 
#
            DO a2 
#
               GET VSaaai(a,a2,a1,i1) 
               GET Uyaa(a2,i) 
#
               t1pppp(a,i,a1,i1) = VSaaai(a,a2,a1,i1)*Uyaa(a2,i) 
               tpppp(a,i,a1,i1) += t1pppp(a,i,a1,i1)
#
            ENDDO a2 
#
            DO i2 
#
               GET VSpipi(a,i2,a1,i1) 
               GET Uyaa(i2,i) 
#
               t1pppp(a,i,a1,i1) = VSpipi(a,i2,a1,i1)*Uyaa(i2,i) 
               tpppp(a,i,a1,i1) += t1pppp(a,i,a1,i1)
#
            ENDDO i2 
#
            DO a2 
#
               GET VSaaai(a1,a2,a,i) 
               GET Uyaa(a2,i1)  
#
               t1pppp(a,i,a1,i1) = VSaaai(a1,a2,a,i)*Uyaa(a2,i1) 
               tpppp(a,i,a1,i1) += t1pppp(a,i,a1,i1)
#
            ENDDO a2 
#
            DO i2 
#
               GET VSpipi(a,i,a1,i2) 
               GET Uyaa(i2,i1)  
#
               t1pppp(a,i,a1,i1) = VSpipi(a,i,a1,i2)*Uyaa(i2,i1) 
               tpppp(a,i,a1,i1) += t1pppp(a,i,a1,i1)
#
            ENDDO i2 
#
            PUT T2yFullaa(a,i,a1,i1) = tpppp(a,i,a1,i1)  
#
      ENDPARDO a, a1, i, i1 
#
#     beta-beta spin next  
#     ------------------- 
#
      PARDO b, b1, j, j1 
#
            GET DTqqqj(b,j,b1,j1) 
            GET DTqqqj(b,j1,b1,j) 
#
            tqqqq(b,j,b1,j1)  = DTqqqj(b,j,b1,j1)  
            t1qqqq(b,j,b1,j1) = DTqqqj(b,j1,b1,j)  
            tqqqq(b,j,b1,j1) -= t1qqqq(b,j,b1,j1)
#
            DO b2 
#
               GET VSqjqj(b2,j,b1,j1) 
               GET Uybb(b2,b) 
#
               t1qqqq(b,j,b1,j1) = VSqjqj(b2,j,b1,j1)*Uybb(b2,b)
               tqqqq(b,j,b1,j1) += t1qqqq(b,j,b1,j1)
#
            ENDDO b2 
#
            DO j2  
#
               GET VSqjqj(j2,j,b1,j1) 
               GET Uybb(j2,b) 
#
               t1qqqq(b,j,b1,j1) = VSqjqj(j2,j,b1,j1)*Uybb(j2,b)
               tqqqq(b,j,b1,j1) += t1qqqq(b,j,b1,j1)
#
            ENDDO j2 
#
            DO b2 
#
               GET VSqjqj(b,j,b2,j1) 
               GET Uybb(b2,b1) 
#
               t1qqqq(b,j,b1,j1) = VSqjqj(b,j,b2,j1)*Uybb(b2,b1)  
               tqqqq(b,j,b1,j1) += t1qqqq(b,j,b1,j1)
#
            ENDDO b2 
#
            DO j2 
#
               GET VSqjqj(b,j,j2,j1) 
               GET Uybb(j2,b1) 
#
               t1qqqq(b,j,b1,j1) = VSqjqj(b,j,j2,j1)*Uybb(j2,b1)  
               tqqqq(b,j,b1,j1) += t1qqqq(b,j,b1,j1)
#
            ENDDO j2 
#
            DO b2 
#
               GET VSbbbj(b,b2,b1,j1) 
               GET Uybb(b2,j) 
#
               t1qqqq(b,j,b1,j1) = VSbbbj(b,b2,b1,j1)*Uybb(b2,j) 
               tqqqq(b,j,b1,j1) += t1qqqq(b,j,b1,j1)
#
            ENDDO b2 
#
            DO j2 
#
               GET VSqjqj(b,j2,b1,j1) 
               GET Uybb(j2,j) 
#
               t1qqqq(b,j,b1,j1) = VSqjqj(b,j2,b1,j1)*Uybb(j2,j) 
               tqqqq(b,j,b1,j1) += t1qqqq(b,j,b1,j1)
#
            ENDDO j2 
#
            DO b2 
#
               GET VSbbbj(b1,b2,b,j) 
               GET Uybb(b2,j1)  
#
               t1qqqq(b,j,b1,j1) = VSbbbj(b1,b2,b,j)*Uybb(b2,j1) 
               tqqqq(b,j,b1,j1) += t1qqqq(b,j,b1,j1)
#
            ENDDO b2 
#
            DO j2 
#
               GET VSqjqj(b,j,b1,j2) 
               GET Uybb(j2,j1)  
#
               t1qqqq(b,j,b1,j1) = VSqjqj(b,j,b1,j2)*Uybb(j2,j1) 
               tqqqq(b,j,b1,j1) += t1qqqq(b,j,b1,j1)
#
            ENDDO j2 
#
            PUT T2yFullbb(b,j,b1,j1) = tqqqq(b,j,b1,j1)  
#
      ENDPARDO b, b1, j, j1 
#
#     alpha-beta spin last  
#     --------------------  
#
      PARDO a, b, i, j 
#
            GET              DTppqj(a,i,b,j) 
            tppqq(a,i,b,j) = DTppqj(a,i,b,j)  
#
            DO a2 
#
               GET Vpiqj(a2,i,b,j) 
               GET Uyaa(a2,a) 
#
               t1ppqq(a,i,b,j) = Vpiqj(a2,i,b,j)*Uyaa(a2,a)
               tppqq(a,i,b,j) += t1ppqq(a,i,b,j)
#
            ENDDO a2 
#
            DO i2  
#
               GET Vpiqj(i2,i,b,j) 
               GET Uyaa(i2,a) 
#
               t1ppqq(a,i,b,j) = Vpiqj(i2,i,b,j)*Uyaa(i2,a)
               tppqq(a,i,b,j) += t1ppqq(a,i,b,j)
#
            ENDDO i2 
#
            DO b2 
#
               GET Vpiqj(a,i,b2,j) 
               GET Uybb(b2,b) 
#
               t1ppqq(a,i,b,j) = Vpiqj(a,i,b2,j)*Uybb(b2,b)  
               tppqq(a,i,b,j) += t1ppqq(a,i,b,j)
#
            ENDDO b2 
#
            DO j2 
#
               GET Vpiqj(a,i,j2,j) 
               GET Uybb(j2,b) 
#
               t1ppqq(a,i,b,j) = Vpiqj(a,i,j2,j)*Uybb(j2,b)  
               tppqq(a,i,b,j) += t1ppqq(a,i,b,j)
#
            ENDDO j2 
#
            DO a2 
#
               GET Vaabj(a,a2,b,j) 
               GET Uyaa(a2,i) 
#
               t1ppqq(a,i,b,j) = Vaabj(a,a2,b,j)*Uyaa(a2,i) 
               tppqq(a,i,b,j) += t1ppqq(a,i,b,j)
#
            ENDDO a2 
#
            DO i2 
#
               GET Vpiqj(a,i2,b,j) 
               GET Uyaa(i2,i) 
#
               t1ppqq(a,i,b,j) = Vpiqj(a,i2,b,j)*Uyaa(i2,i) 
               tppqq(a,i,b,j) += t1ppqq(a,i,b,j)
#
            ENDDO i2 
#
            DO b2 
#
               GET Vbbai(b,b2,a,i) 
               GET Uybb(b2,j)  
#
               t1ppqq(a,i,b,j) = Vbbai(b,b2,a,i)*Uybb(b2,j) 
               tppqq(a,i,b,j) += t1ppqq(a,i,b,j)
#
            ENDDO b2 
#
            DO j2 
#
               GET Vpiqj(a,i,b,j2) 
               GET Uybb(j2,j)  
#
               t1ppqq(a,i,b,j) = Vpiqj(a,i,b,j2)*Uybb(j2,j) 
               tppqq(a,i,b,j) += t1ppqq(a,i,b,j)
#
            ENDDO j2 
#
            PUT T2yFullab(a,i,b,j) = tppqq(a,i,b,j) 
#
      ENDPARDO a, b, i, j 
      execute sip_barrier 
#
      ENDPROC VY_UY 
#     ------------- 
#
# ---------------------------------------------------------------------- 
#
      PROC VX_UX 
#     ---------- 
#
#     Add contrubutions to derivative MO integrals from derivatives of coefficients. 
#     ------------------------------------------------------------------------------ 
#
      create VXSFullaa 
      create VXSFullbb 
      create VXFullab 
      execute sip_barrier 
#
#     alpha-alpha first 
#     ----------------- 
#
      PARDO a, a1, i, i1 
#
            GET VXpipi(a,i,a1,i1) 
            GET VXpipi(a,i1,a1,i) 
#
            tpppp(a,i,a1,i1)  = VXpipi(a,i,a1,i1)  
            t1pppp(a,i,a1,i1) = VXpipi(a,i1,a1,i)  
            tpppp(a,i,a1,i1) -= t1pppp(a,i,a1,i1) 
#
            DO a2 
#
               GET VSpipi(a2,i,a1,i1) 
               GET Uxaa(a2,a) 
#
               t1pppp(a,i,a1,i1) = VSpipi(a2,i,a1,i1)*Uxaa(a2,a)
               tpppp(a,i,a1,i1) += t1pppp(a,i,a1,i1)
#
            ENDDO a2 
#
            DO i2  
#
               GET VSpipi(i2,i,a1,i1) 
               GET Uxaa(i2,a) 
#
               t1pppp(a,i,a1,i1) = VSpipi(i2,i,a1,i1)*Uxaa(i2,a)
               tpppp(a,i,a1,i1) += t1pppp(a,i,a1,i1)
#
            ENDDO i2 
#
            DO a2 
#
               GET VSpipi(a,i,a2,i1) 
               GET Uxaa(a2,a1) 
#
               t1pppp(a,i,a1,i1) = VSpipi(a,i,a2,i1)*Uxaa(a2,a1)  
               tpppp(a,i,a1,i1) += t1pppp(a,i,a1,i1)
#
            ENDDO a2 
#
            DO i2 
#
               GET VSpipi(a,i,i2,i1) 
               GET Uxaa(i2,a1) 
#
               t1pppp(a,i,a1,i1) = VSpipi(a,i,i2,i1)*Uxaa(i2,a1)  
               tpppp(a,i,a1,i1) += t1pppp(a,i,a1,i1)
#
            ENDDO i2 
#
            DO a2 
#
               GET VSaaai(a,a2,a1,i1) 
               GET Uxaa(a2,i) 
#
               t1pppp(a,i,a1,i1) = VSaaai(a,a2,a1,i1)*Uxaa(a2,i) 
               tpppp(a,i,a1,i1) += t1pppp(a,i,a1,i1)
#
            ENDDO a2 
#
            DO i2 
#
               GET VSpipi(a,i2,a1,i1) 
               GET Uxaa(i2,i) 
#
               t1pppp(a,i,a1,i1) = VSpipi(a,i2,a1,i1)*Uxaa(i2,i) 
               tpppp(a,i,a1,i1) += t1pppp(a,i,a1,i1)
#
            ENDDO i2 
#
            DO a2 
#
               GET VSaaai(a1,a2,a,i) 
               GET Uxaa(a2,i1)  
#
               t1pppp(a,i,a1,i1) = VSaaai(a1,a2,a,i)*Uxaa(a2,i1) 
               tpppp(a,i,a1,i1) += t1pppp(a,i,a1,i1)
#
            ENDDO a2 
#
            DO i2 
#
               GET VSpipi(a,i,a1,i2) 
               GET Uxaa(i2,i1)  
#
               t1pppp(a,i,a1,i1) = VSpipi(a,i,a1,i2)*Uxaa(i2,i1) 
               tpppp(a,i,a1,i1) += t1pppp(a,i,a1,i1)
#
            ENDDO i2 
#
            PUT VXSFullaa(a,i,a1,i1) = tpppp(a,i,a1,i1)  
#
      ENDPARDO a, a1, i, i1 
#
#     beta-beta spin next  
#     ------------------- 
#
      PARDO b, b1, j, j1 
#
            GET VXqjqj(b,j,b1,j1) 
            GET VXqjqj(b,j1,b1,j) 
#
            tqqqq(b,j,b1,j1)  = VXqjqj(b,j,b1,j1)  
            t1qqqq(b,j,b1,j1) = VXqjqj(b,j1,b1,j)  
            tqqqq(b,j,b1,j1) -= t1qqqq(b,j,b1,j1)  
#
            DO b2 
#
               GET VSqjqj(b2,j,b1,j1) 
               GET Uxbb(b2,b) 
#
               t1qqqq(b,j,b1,j1) = VSqjqj(b2,j,b1,j1)*Uxbb(b2,b)
               tqqqq(b,j,b1,j1) += t1qqqq(b,j,b1,j1)
#
            ENDDO b2 
#
            DO j2  
#
               GET VSqjqj(j2,j,b1,j1) 
               GET Uxbb(j2,b) 
#
               t1qqqq(b,j,b1,j1) = VSqjqj(j2,j,b1,j1)*Uxbb(j2,b)
               tqqqq(b,j,b1,j1) += t1qqqq(b,j,b1,j1)
#
            ENDDO j2 
#
            DO b2 
#
               GET VSqjqj(b,j,b2,j1) 
               GET Uxbb(b2,b1) 
#
               t1qqqq(b,j,b1,j1) = VSqjqj(b,j,b2,j1)*Uxbb(b2,b1)  
               tqqqq(b,j,b1,j1) += t1qqqq(b,j,b1,j1)
#
            ENDDO b2 
#
            DO j2 
#
               GET VSqjqj(b,j,j2,j1) 
               GET Uxbb(j2,b1) 
#
               t1qqqq(b,j,b1,j1) = VSqjqj(b,j,j2,j1)*Uxbb(j2,b1)  
               tqqqq(b,j,b1,j1) += t1qqqq(b,j,b1,j1)
#
            ENDDO j2 
#
            DO b2 
#
               GET VSbbbj(b,b2,b1,j1) 
               GET Uxbb(b2,j) 
#
               t1qqqq(b,j,b1,j1) = VSbbbj(b,b2,b1,j1)*Uxbb(b2,j) 
               tqqqq(b,j,b1,j1) += t1qqqq(b,j,b1,j1)
#
            ENDDO b2 
#
            DO j2 
#
               GET VSqjqj(b,j2,b1,j1) 
               GET Uxbb(j2,j) 
#
               t1qqqq(b,j,b1,j1) = VSqjqj(b,j2,b1,j1)*Uxbb(j2,j) 
               tqqqq(b,j,b1,j1) += t1qqqq(b,j,b1,j1)
#
            ENDDO j2 
#
            DO b2 
#
               GET VSbbbj(b1,b2,b,j) 
               GET Uxbb(b2,j1)  
#
               t1qqqq(b,j,b1,j1) = VSbbbj(b1,b2,b,j)*Uxbb(b2,j1) 
               tqqqq(b,j,b1,j1) += t1qqqq(b,j,b1,j1)
#
            ENDDO b2 
#
            DO j2 
#
               GET VSqjqj(b,j,b1,j2) 
               GET Uxbb(j2,j1)  
#
               t1qqqq(b,j,b1,j1) = VSqjqj(b,j,b1,j2)*Uxbb(j2,j1) 
               tqqqq(b,j,b1,j1) += t1qqqq(b,j,b1,j1)
#
            ENDDO j2 
#
            PUT VXSFullbb(b,j,b1,j1) = tqqqq(b,j,b1,j1)  
#
      ENDPARDO b, b1, j, j1 
#
#     alpha-beta spin last  
#     --------------------  
#
      PARDO a, b, i, j 
#
            GET VXpiqj(a,i,b,j) 
            tppqq(a,i,b,j) = VXpiqj(a,i,b,j)  
#
            DO a2 
#
               GET Vpiqj(a2,i,b,j) 
               GET Uxaa(a2,a) 
#
               t1ppqq(a,i,b,j) = Vpiqj(a2,i,b,j)*Uxaa(a2,a)
               tppqq(a,i,b,j) += t1ppqq(a,i,b,j)
#
            ENDDO a2 
#
            DO i2  
#
               GET Vpiqj(i2,i,b,j) 
               GET Uxaa(i2,a) 
#
               t1ppqq(a,i,b,j) = Vpiqj(i2,i,b,j)*Uxaa(i2,a)
               tppqq(a,i,b,j) += t1ppqq(a,i,b,j)
#
            ENDDO i2 
#
            DO b2 
#
               GET Vpiqj(a,i,b2,j) 
               GET Uxbb(b2,b) 
#
               t1ppqq(a,i,b,j) = Vpiqj(a,i,b2,j)*Uxbb(b2,b)  
               tppqq(a,i,b,j) += t1ppqq(a,i,b,j)
#
            ENDDO b2 
#
            DO j2 
#
               GET Vpiqj(a,i,j2,j) 
               GET Uxbb(j2,b) 
#
               t1ppqq(a,i,b,j) = Vpiqj(a,i,j2,j)*Uxbb(j2,b)  
               tppqq(a,i,b,j) += t1ppqq(a,i,b,j)
#
            ENDDO j2 
#
            DO a2 
#
               GET Vaabj(a,a2,b,j) 
               GET Uxaa(a2,i) 
#
               t1ppqq(a,i,b,j) = Vaabj(a,a2,b,j)*Uxaa(a2,i) 
               tppqq(a,i,b,j) += t1ppqq(a,i,b,j)
#
            ENDDO a2 
#
            DO i2 
#
               GET Vpiqj(a,i2,b,j) 
               GET Uxaa(i2,i) 
#
               t1ppqq(a,i,b,j) = Vpiqj(a,i2,b,j)*Uxaa(i2,i) 
               tppqq(a,i,b,j) += t1ppqq(a,i,b,j)
#
            ENDDO i2 
#
            DO b2 
#
               GET Vbbai(b,b2,a,i) 
               GET Uxbb(b2,j)  
#
               t1ppqq(a,i,b,j) = Vbbai(b,b2,a,i)*Uxbb(b2,j) 
               tppqq(a,i,b,j) += t1ppqq(a,i,b,j)
#
            ENDDO b2 
#
            DO j2 
#
               GET Vpiqj(a,i,b,j2) 
               GET Uxbb(j2,j)  
#
               t1ppqq(a,i,b,j) = Vpiqj(a,i,b,j2)*Uxbb(j2,j) 
               tppqq(a,i,b,j) += t1ppqq(a,i,b,j)
#
            ENDDO j2 
#
            PUT VXFullab(a,i,b,j) = tppqq(a,i,b,j)  
#
      ENDPARDO a, b, i, j 
#
      execute sip_barrier 
#
      ENDPROC VX_UX 
#     ------------- 
#
# ---------------------------------------------------------------------- 
#
      PROC QYAI_H 
#     ----------- 
#
      PARDO mu, nu 
#
            execute fock_der txx(mu,nu) 
#
#           Contributions to Qxai and Qxbj  
#           ------------------------------ 
#
            DO a 
#
               tpx(a,nu) = ca(mu,a)*txx(mu,nu) # *ca(mu,a)  
#
               DO i 
#
                  tpp(a,i)      = tpx(a,nu)*ca(nu,i) 
                  PUT Qyai(a,i) += tpp(a,i) 
#
               ENDDO i  
#
            ENDDO a 
#
            DO b 
#
               tqx(b,nu) = cb(mu,b)*txx(mu,nu) # *cb(mu,b)  
#
               DO j 
#
                  tqq(b,j)      = tqx(b,nu)*cb(nu,j) 
                  PUT Qybj(b,j) += tqq(b,j) 
#
               ENDDO j  
#
            ENDDO b 
#
      ENDPARDO mu, nu 
#
      ENDPROC QYAI_H 
#     -------------- 
#
# ---------------------------------------------------------------------- 
#
      PROC QXAI_H 
#     ----------- 
#
      PARDO mu, nu 
#
            execute fock_der txx(mu,nu) 
#
#           Contributions to Qxai and Qxbj  
#           ------------------------------ 
#
            DO a 
#
               tpx(a,nu) = txx(mu,nu)*ca(mu,a)  
#
               DO i 
#
                  tpp(a,i)      = tpx(a,nu)*ca(nu,i) 
                  PUT Qxai(a,i) += tpp(a,i) 
#
               ENDDO i  
#
            ENDDO a 
#
            DO b 
#
               tqx(b,nu) = txx(mu,nu)*cb(mu,b)  
#
               DO j 
#
                  tqq(b,j)      = tqx(b,nu)*cb(nu,j) 
                  PUT Qxbj(b,j) += tqq(b,j) 
#
               ENDDO j  
#
            ENDDO b 
#
      ENDPARDO mu, nu 
#
      ENDPROC QXAI_H 
#     -------------- 
#
# ---------------------------------------------------------------------------
#
      PROC FINTY_TRAN 
#     --------------- 
#
#     The transformed first-derivative fock matrix is computed. The 
#     perturbation is defined by jatom, jx and jcenter and the 
#     final arrays are Fya and Fyb. 
#
      PARDO mu, nu 
#
            execute fock_der txx(mu,nu) 
#
#           Contributions to Fya and Fyb 
#           ---------------------------- 
#
            DO a 
#
               txp(mu,a) = txx(mu,nu)*ca(nu,a)  
#
               DO a1 
#
                  tpp(a1,a)      = txp(mu,a)*ca(mu,a1) 
                  PUT Fya(a1,a) += tpp(a1,a) 
#
               ENDDO a1  
#
            ENDDO a 
#
            DO i 
#
               txp(mu,i) = txx(mu,nu)*ca(nu,i)  
#
               DO i1 
#
                  tpp(i1,i)      = txp(mu,i)*ca(mu,i1) 
                  PUT Fya(i1,i) += tpp(i1,i) 
#
               ENDDO i1  
#
            ENDDO i 
#
            DO b 
#
               txq(mu,b) = txx(mu,nu)*cb(nu,b)  
#
               DO b1 
#
                  tqq(b1,b)      = txq(mu,b)*cb(mu,b1) 
                  PUT Fyb(b1,b) += tqq(b1,b) 
#
               ENDDO b1  
#
            ENDDO b 
#
            DO j 
#
               txq(mu,j) = txx(mu,nu)*cb(nu,j)  
#
               DO j1 
#
                  tqq(j1,j)      = txq(mu,j)*cb(mu,j1) 
                  PUT Fyb(j1,j) += tqq(j1,j) 
#
               ENDDO j1  
#
            ENDDO j 
#
      ENDPARDO mu, nu 
#
      execute sip_barrier 
#
#     Add contributions from overlap derivatives and two-electron integrals  
#     --------------------------------------------------------------------- 
#
#     alpha-alpha virtual-virtual block 
#     --------------------------------- 
#
      PARDO a, a1 
#
            taa(a,a1) = 0.0 
#
            DO a2 
#
               if a2 == a1 
#
               GET Sya(a,a2) 
               t1aa(a,a1) = Sya(a,a2)*Fock_a(a1,a2) 
               t1aa(a,a1) *= -0.5  
               taa(a,a1) += t1aa(a,a1) 
#
               endif 
#
            ENDDO a2 
#
            DO a2 
#
               if a2 == a 
#
               GET Sya(a2,a1) 
               t1aa(a,a1) = Sya(a2,a1)*Fock_a(a2,a) 
               t1aa(a,a1) *= -0.5  
               taa(a,a1) += t1aa(a,a1) 
#
               endif 
#
            ENDDO a2 
#
            DO i 
            DO i1 
#
               GET Vaaii(a,a1,i,i1) # + 
               GET Viaai(i,a1,a,i1) # - 
               GET Sya(i1,i) 
#
               tpppp(a,a1,i,i1) = Vaaii(a,a1,i,i1) 
               t1pppp(a,a1,i,i1) = Viaai(i,a1,a,i1) 
               tpppp(a,a1,i,i1) -= t1pppp(a,a1,i,i1) 
#
               t1aa(a,a1) = tpppp(a,a1,i,i1)*Sya(i1,i)  
               taa(a,a1) -= t1aa(a,a1) 
#
            ENDDO i1 
            ENDDO i 
#
            DO j 
            DO j1 
#
               GET Vaajj(a,a1,j,j1) # + 
               GET Syb(j1,j) 
#
               t1aa(a,a1) = Vaajj(a,a1,j,j1)*Syb(j1,j)  
               taa(a,a1) -= t1aa(a,a1) 
#
            ENDDO j1 
            ENDDO j 
#
            DO a2 
            DO i 
#
               GET VSaaai(a1,a,a2,i) # + 
               GET VSaaai(a,a1,a2,i) # + 
               GET Uyaa(a2,i) 
#
               tpppp(a,a1,a2,i) = VSaaai(a1,a,a2,i) 
               t1pppp(a,a1,a2,i) = VSaaai(a,a1,a2,i) 
               tpppp(a,a1,a2,i) += t1pppp(a,a1,a2,i) 
#
               t1aa(a,a1) = tpppp(a,a1,a2,i)*Uyaa(a2,i) 
               taa(a,a1) += t1aa(a,a1) 
#
            ENDDO i 
            ENDDO a2 
#
            DO b 
            DO j 
#
               GET Vaabj(a1,a,b,j) # + 
               GET Vaabj(a,a1,b,j) # + 
               GET Uybb(b,j) 
#
               tppqq(a,a1,b,j) = Vaabj(a1,a,b,j) 
               t1ppqq(a,a1,b,j) = Vaabj(a,a1,b,j) 
               tppqq(a,a1,b,j) += t1ppqq(a,a1,b,j) 
#
               t1aa(a,a1) = tppqq(a,a1,b,j)*Uybb(b,j) 
               taa(a,a1) += t1aa(a,a1) 
#
            ENDDO j 
            ENDDO b 
#
            PUT Fya(a,a1) += taa(a,a1)  
#
      ENDPARDO a, a1 
#
#     alpha-alpha occupied-occupied block 
#     ----------------------------------- 
#
      PARDO i, i1 
#
            tii(i,i1) = 0.0 
#
            DO i2 
#
               if i1 == i2 
#
               GET Sya(i,i2) 
               t1ii(i,i1) = Sya(i,i2)*Fock_a(i1,i2) 
               t1ii(i,i1) *= -0.5  
               tii(i,i1) += t1ii(i,i1) 
#
               endif 
#
            ENDDO i2 
#
            DO i2 
#
               if i == i2 
#
               GET Sya(i2,i1) 
               t1ii(i,i1) = Sya(i2,i1)*Fock_a(i2,i) 
               t1ii(i,i1) *= -0.5  
               tii(i,i1) += t1ii(i,i1) 
#
               endif 
#
            ENDDO i2 
#
            DO i2 
            DO i3 
#
               GET VSpipi(i,i1,i2,i3) # + 
               GET Sya(i3,i2) 
#
               t1ii(i,i1) = VSpipi(i,i1,i2,i3)*Sya(i3,i2)  
               tii(i,i1) -= t1ii(i,i1) 
#
            ENDDO i3 
            ENDDO i2
#
            DO j 
            DO j1 
#
               GET Vpiqj(i,i1,j,j1) # + 
               GET Syb(j1,j) 
#
               t1ii(i,i1) = Vpiqj(i,i1,j,j1)*Syb(j1,j)  
               tii(i,i1) -= t1ii(i,i1) 
#
            ENDDO j1 
            ENDDO j 
#
            DO a2 
            DO i2 
#
               GET VSpipi(i1,i,a2,i2) # + 
               GET VSpipi(i,i1,a2,i2) # + 
               GET Uyaa(a2,i2) 
#
               tpppp(i,i1,a2,i2) = VSpipi(i1,i,a2,i2) 
               t1pppp(i,i1,a2,i2) = VSpipi(i,i1,a2,i2) 
               tpppp(i,i1,a2,i2) += t1pppp(i,i1,a2,i2) 
#
               t1ii(i,i1) = tpppp(i,i1,a2,i2)*Uyaa(a2,i2) 
               tii(i,i1) += t1ii(i,i1) 
#
            ENDDO i2 
            ENDDO a2 
#
            DO b 
            DO j 
#
               GET Vpiqj(i1,i,b,j) # + 
               GET Vpiqj(i,i1,b,j) # + 
               GET Uybb(b,j) 
#
               tppqq(i,i1,b,j) = Vpiqj(i1,i,b,j) 
               t1ppqq(i,i1,b,j) = Vpiqj(i,i1,b,j) 
               tppqq(i,i1,b,j) += t1ppqq(i,i1,b,j) 
#
               t1ii(i,i1) = tppqq(i,i1,b,j)*Uybb(b,j) 
               tii(i,i1) += t1ii(i,i1) 
#
            ENDDO j 
            ENDDO b 
#
            PUT Fya(i,i1) += tii(i,i1)  
#
      ENDPARDO i, i1 
#
#     beta-beta virtual-virtual block 
#     --------------------------------- 
#
      PARDO b, b1 
#
            tbb(b,b1) = 0.0 
#
            DO b2 
#
               if b1 == b2 
#
               GET Syb(b,b2) 
               t1bb(b,b1) = Syb(b,b2)*Fock_b(b1,b2) 
               t1bb(b,b1) *= -0.5  
               tbb(b,b1) += t1bb(b,b1) 
#
               endif 
#
            ENDDO b2 
#
            DO b2 
#
               if b2 == b 
#
               GET Syb(b2,b1) 
               t1bb(b,b1) = Syb(b2,b1)*Fock_b(b2,b) 
               t1bb(b,b1) *= -0.5  
               tbb(b,b1) += t1bb(b,b1) 
#
               endif 
#
            ENDDO b2 
#
            DO j 
            DO j1 
#
               GET Vbbjj(b,b1,j,j1) # + 
               GET Vjbbj(j,b1,b,j1) # - 
               GET Syb(j1,j) 
#
               tqqqq(b,b1,j,j1) = Vbbjj(b,b1,j,j1) 
               t1qqqq(b,b1,j,j1) = Vjbbj(j,b1,b,j1) 
               tqqqq(b,b1,j,j1) -= t1qqqq(b,b1,j,j1) 
#
               t1bb(b,b1) = tqqqq(b,b1,j,j1)*Syb(j1,j)  
               tbb(b,b1) -= t1bb(b,b1) 
#
            ENDDO j1 
            ENDDO j 
#
            DO i 
            DO i1 
#
               GET Vbbii(b,b1,i,i1) # + 
               GET Sya(i1,i) 
#
               t1bb(b,b1) = Vbbii(b,b1,i,i1)*Sya(i1,i)  
               tbb(b,b1) -= t1bb(b,b1) 
#
            ENDDO i1 
            ENDDO i 
#
            DO b2 
            DO j 
#
               GET VSbbbj(b1,b,b2,j) # + 
               GET VSbbbj(b,b1,b2,j) # + 
               GET Uybb(b2,j) 
#
               tqqqq(b,b1,b2,j) = VSbbbj(b1,b,b2,j) 
               t1qqqq(b,b1,b2,j) = VSbbbj(b,b1,b2,j) 
               tqqqq(b,b1,b2,j) += t1qqqq(b,b1,b2,j) 
#
               t1bb(b,b1) = tqqqq(b,b1,b2,j)*Uybb(b2,j) 
               tbb(b,b1) += t1bb(b,b1) 
#
            ENDDO j 
            ENDDO b2 
#
            DO a 
            DO i 
#
               GET Vbbai(b1,b,a,i) # + 
               GET Vbbai(b,b1,a,i) # + 
               GET Uyaa(a,i) 
#
               tqqpp(b,b1,a,i) = Vbbai(b1,b,a,i) 
               t1qqpp(b,b1,a,i) = Vbbai(b,b1,a,i) 
               tqqpp(b,b1,a,i) += t1qqpp(b,b1,a,i) 
#
               t1bb(b,b1) = tqqpp(b,b1,a,i)*Uyaa(a,i) 
               tbb(b,b1) += t1bb(b,b1) 
#
            ENDDO i 
            ENDDO a 
#
            PUT Fyb(b,b1) += tbb(b,b1)  
#
      ENDPARDO b, b1 
#
#     beta-beta occupied-occupied block 
#     ----------------------------------- 
#
      PARDO j, j1 
#
            tjj(j,j1) = 0.0 
#
            DO j2 
#
               if j1 == j2 
#
               GET Syb(j,j2) 
               t1jj(j,j1) = Syb(j,j2)*Fock_b(j1,j2) 
               t1jj(j,j1) *= -0.5  
               tjj(j,j1) += t1jj(j,j1) 
#
               endif 
#
            ENDDO j2 
#
            DO j2 
#
               if j2 == j 
#
               GET Syb(j2,j1) 
               t1jj(j,j1) = Syb(j2,j1)*Fock_b(j2,j) 
               t1jj(j,j1) *= -0.5  
               tjj(j,j1) += t1jj(j,j1) 
#
               endif 
#
            ENDDO j2 
#
            DO j2 
            DO j3 
#
               GET VSqjqj(j,j1,j2,j3) # + 
               GET Syb(j3,j2) 
#
               t1jj(j,j1) = VSqjqj(j,j1,j2,j3)*Syb(j3,j2)  
               tjj(j,j1) -= t1jj(j,j1) 
#
            ENDDO j3 
            ENDDO j2
#
            DO i 
            DO i1 
#
               GET Vpiqj(i,i1,j,j1) # + 
               GET Sya(i1,i) 
#
               t1jj(j,j1) = Vpiqj(i,i1,j,j1)*Sya(i1,i)  
               tjj(j,j1) -= t1jj(j,j1) 
#
            ENDDO i1 
            ENDDO i 
#
            DO b2 
            DO j2 
#
               GET VSqjqj(j1,j,b2,j2) # + 
               GET VSqjqj(j,j1,b2,j2) # + 
               GET Uybb(b2,j2) 
#
               tqqqq(j,j1,b2,j2) = VSqjqj(j1,j,b2,j2) 
               t1qqqq(j,j1,b2,j2) = VSqjqj(j,j1,b2,j2) 
               tqqqq(j,j1,b2,j2) += t1qqqq(j,j1,b2,j2) 
#
               t1jj(j,j1) = tqqqq(j,j1,b2,j2)*Uybb(b2,j2) 
               tjj(j,j1) += t1jj(j,j1) 
#
            ENDDO j2 
            ENDDO b2 
#
            DO a 
            DO i 
#
               GET Vpiqj(a,i,j1,j) # + 
               GET Vpiqj(a,i,j,j1) # + 
               GET Uyaa(a,i) 
#
               tqqpp(j,j1,a,i) = Vpiqj(a,i,j1,j) 
               t1qqpp(j,j1,a,i) = Vpiqj(a,i,j,j1) 
               tqqpp(j,j1,a,i) += t1qqpp(j,j1,a,i) 
#
               t1jj(j,j1) = tqqpp(j,j1,a,i)*Uyaa(a,i) 
               tjj(j,j1) += t1jj(j,j1) 
#
            ENDDO i 
            ENDDO a 
#
            PUT Fyb(j,j1) += tjj(j,j1)  
#
      ENDPARDO j, j1 
#
      ENDPROC FINTY_TRAN 
#     ------------------ 
#
# ---------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------
#
      PROC FINTX_TRAN 
#     --------------- 
#
#     The transformed first-derivative fock matrix is computed. The 
#     perturbation is defined by iatom, ix and icenter and the 
#     final arrays are Fxa and Fxb. 
#
      PARDO mu, nu 
#
            execute fock_der txx(mu,nu) 
#
            DO a 
#
               txp(mu,a) = txx(mu,nu)*ca(nu,a)  
#
               DO a1 
#
                  tpp(a1,a)      = txp(mu,a)*ca(mu,a1) 
                  PUT Fxa(a1,a) += tpp(a1,a) 
#
               ENDDO a1  
#
            ENDDO a 
#
            DO i 
#
               txp(mu,i) = txx(mu,nu)*ca(nu,i)  
#
               DO i1 
#
                  tpp(i1,i)      = txp(mu,i)*ca(mu,i1) 
                  PUT Fxa(i1,i) += tpp(i1,i) 
#
               ENDDO i1  
#
            ENDDO i 
#
            DO b 
#
               txq(mu,b) = txx(mu,nu)*cb(nu,b)  
#
               DO b1 
#
                  tqq(b1,b)      = txq(mu,b)*cb(mu,b1) 
                  PUT Fxb(b1,b) += tqq(b1,b) 
#
               ENDDO b1  
#
            ENDDO b 
#
            DO j 
#
               txq(mu,j) = txx(mu,nu)*cb(nu,j)  
#
               DO j1 
#
                  tqq(j1,j)      = txq(mu,j)*cb(mu,j1) 
                  PUT Fxb(j1,j) += tqq(j1,j) 
#
               ENDDO j1  
#
            ENDDO j 
#
#           Compute contributions to the HF hessian. 
#           ---------------------------------------- 
#
            GET            dhfya(mu,nu) 
            GET            dhfyb(mu,nu) 
#
            GET QABxx(mu,nu) 
            GET QAxx(mu,nu) 
            GET QBxx(mu,nu) 

            t1xx(mu,nu)  = txx(mu,nu) 
            t1xx(mu,nu) += QABxx(mu,nu) 
            t1xx(mu,nu) += QAxx(mu,nu) 

            etemp        = t1xx(mu,nu)*dhfya(mu,nu) 
            etemp       *= 0.5 
            hessxy      += etemp 

            t1xx(mu,nu)  = txx(mu,nu) 
            t1xx(mu,nu) += QABxx(mu,nu) 
            t1xx(mu,nu) += QBxx(mu,nu) 

            etemp        = t1xx(mu,nu)*dhfyb(mu,nu) 
            etemp       *= 0.5 
            hessxy      += etemp 
#
      ENDPARDO mu, nu 
#
      execute sip_barrier 
#
#     Add contributions from overlap derivatives and two-electron integrals  
#     --------------------------------------------------------------------- 
#
#     alpha-alpha virtual-virtual block 
#     --------------------------------- 
#
      PARDO a, a1 
#
            taa(a,a1) = 0.0 
#
            DO a2 
#
               GET Sxa(a,a2) 
               t1aa(a,a1) = Sxa(a,a2)*Fock_a(a1,a2) 
               t1aa(a,a1) *= -0.5  
               taa(a,a1) += t1aa(a,a1) 
#
            ENDDO a2 
#
            DO a2 
#
               GET Sxa(a2,a1) 
               t1aa(a,a1) = Sxa(a2,a1)*Fock_a(a2,a) 
               t1aa(a,a1) *= -0.5  
               taa(a,a1) += t1aa(a,a1) 
#
            ENDDO a2 
#
            DO i 
            DO i1 
#
               GET Vaaii(a,a1,i,i1) # + 
               GET Viaai(i,a1,a,i1) # - 
               GET Sxa(i1,i) 
#
               tpppp(a,a1,i,i1) = Vaaii(a,a1,i,i1) 
               t1pppp(a,a1,i,i1) = Viaai(i,a1,a,i1) 
               tpppp(a,a1,i,i1) -= t1pppp(a,a1,i,i1) 
#
               t1aa(a,a1) = tpppp(a,a1,i,i1)*Sxa(i1,i)  
               taa(a,a1) -= t1aa(a,a1) 
#
            ENDDO i1 
            ENDDO i 
#
            DO j 
            DO j1 
#
               GET Vaajj(a,a1,j,j1) # + 
               GET Sxb(j1,j) 
#
               t1aa(a,a1) = Vaajj(a,a1,j,j1)*Sxb(j1,j)  
               taa(a,a1) -= t1aa(a,a1) 
#
            ENDDO j1 
            ENDDO j 
#
            DO a2 
            DO i 
#
               GET VSaaai(a1,a,a2,i) # + 
               GET VSaaai(a,a1,a2,i) # + 
               GET Uxaa(a2,i) 
#
               tpppp(a,a1,a2,i) = VSaaai(a1,a,a2,i) 
               t1pppp(a,a1,a2,i) = VSaaai(a,a1,a2,i) 
               tpppp(a,a1,a2,i) += t1pppp(a,a1,a2,i) 
#
               t1aa(a,a1) = tpppp(a,a1,a2,i)*Uxaa(a2,i) 
               taa(a,a1) += t1aa(a,a1) 
#
            ENDDO i 
            ENDDO a2 
#
            DO b 
            DO j 
#
               GET Vaabj(a1,a,b,j) # + 
               GET Vaabj(a,a1,b,j) # + 
               GET Uxbb(b,j) 
#
               tppqq(a,a1,b,j) = Vaabj(a1,a,b,j) 
               t1ppqq(a,a1,b,j) = Vaabj(a,a1,b,j) 
               tppqq(a,a1,b,j) += t1ppqq(a,a1,b,j) 
#
               t1aa(a,a1) = tppqq(a,a1,b,j)*Uxbb(b,j) 
               taa(a,a1) += t1aa(a,a1) 
#
            ENDDO j 
            ENDDO b 
#
            PUT Fxa(a,a1) += taa(a,a1)  
#
      ENDPARDO a, a1 
#
#     alpha-alpha occupied-occupied block 
#     ----------------------------------- 
#
      PARDO i, i1 
#
            tii(i,i1) = 0.0 
#
            DO i2 
#
               GET Sxa(i,i2) 
               t1ii(i,i1) = Sxa(i,i2)*Fock_a(i1,i2) 
               t1ii(i,i1) *= -0.5  
               tii(i,i1) += t1ii(i,i1) 
#
            ENDDO i2 
#
            DO i2 
#
               GET Sxa(i2,i1) 
               t1ii(i,i1) = Sxa(i2,i1)*Fock_a(i2,i) 
               t1ii(i,i1) *= -0.5  
               tii(i,i1) += t1ii(i,i1) 
#
            ENDDO i2 
#
            DO i2 
            DO i3 
#
               GET VSpipi(i,i1,i2,i3) # + 
               GET Sxa(i3,i2) 
#
               t1ii(i,i1) = VSpipi(i,i1,i2,i3)*Sxa(i3,i2)  
               tii(i,i1) -= t1ii(i,i1) 
#
            ENDDO i3 
            ENDDO i2
#
            DO j 
            DO j1 
#
               GET Vpiqj(i,i1,j,j1) # + 
               GET Sxb(j1,j) 
#
               t1ii(i,i1) = Vpiqj(i,i1,j,j1)*Sxb(j1,j)  
               tii(i,i1) -= t1ii(i,i1) 
#
            ENDDO j1 
            ENDDO j 
#
            DO a2 
            DO i2 
#
               GET VSpipi(i1,i,a2,i2) # + 
               GET VSpipi(i,i1,a2,i2) # + 
               GET Uxaa(a2,i2) 
#
               tpppp(i,i1,a2,i2) = VSpipi(i1,i,a2,i2) 
               t1pppp(i,i1,a2,i2) = VSpipi(i,i1,a2,i2) 
               tpppp(i,i1,a2,i2) += t1pppp(i,i1,a2,i2) 
#
               t1ii(i,i1) = tpppp(i,i1,a2,i2)*Uxaa(a2,i2) 
               tii(i,i1) += t1ii(i,i1) 
#
            ENDDO i2 
            ENDDO a2 
#
            DO b 
            DO j 
#
               GET Vpiqj(i1,i,b,j) # + 
               GET Vpiqj(i,i1,b,j) # + 
               GET Uxbb(b,j) 
#
               tppqq(i,i1,b,j) = Vpiqj(i1,i,b,j) 
               t1ppqq(i,i1,b,j) = Vpiqj(i,i1,b,j) 
               tppqq(i,i1,b,j) += t1ppqq(i,i1,b,j) 
#
               t1ii(i,i1) = tppqq(i,i1,b,j)*Uxbb(b,j) 
               tii(i,i1) += t1ii(i,i1) 
#
            ENDDO j 
            ENDDO b 
#
            PUT Fxa(i,i1) += tii(i,i1)  
#
      ENDPARDO i, i1 
#
#     beta-beta virtual-virtual block 
#     --------------------------------- 
#
      PARDO b, b1 
#
            tbb(b,b1) = 0.0 
#
            DO b2 
#
               GET Sxb(b,b2) 
               t1bb(b,b1) = Sxb(b,b2)*Fock_b(b1,b2) 
               t1bb(b,b1) *= -0.5  
               tbb(b,b1) += t1bb(b,b1) 
#
            ENDDO b2 
#
            DO b2 
#
               GET Sxb(b2,b1) 
               t1bb(b,b1) = Sxb(b2,b1)*Fock_b(b2,b) 
               t1bb(b,b1) *= -0.5  
               tbb(b,b1) += t1bb(b,b1) 
#
            ENDDO b2 
#
            DO j 
            DO j1 
#
               GET Vbbjj(b,b1,j,j1) # + 
               GET Vjbbj(j,b1,b,j1) # - 
               GET Sxb(j1,j) 
#
               tqqqq(b,b1,j,j1) = Vbbjj(b,b1,j,j1) 
               t1qqqq(b,b1,j,j1) = Vjbbj(j,b1,b,j1) 
               tqqqq(b,b1,j,j1) -= t1qqqq(b,b1,j,j1) 
#
               t1bb(b,b1) = tqqqq(b,b1,j,j1)*Sxb(j1,j)  
               tbb(b,b1) -= t1bb(b,b1) 
#
            ENDDO j1 
            ENDDO j 
#
            DO i 
            DO i1 
#
               GET Vbbii(b,b1,i,i1) # + 
               GET Sxa(i1,i) 
#
               t1bb(b,b1) = Vbbii(b,b1,i,i1)*Sxa(i1,i)  
               tbb(b,b1) -= t1bb(b,b1) 
#
            ENDDO i1 
            ENDDO i 
#
            DO b2 
            DO j 
#
               GET VSbbbj(b1,b,b2,j) # + 
               GET VSbbbj(b,b1,b2,j) # + 
               GET Uxbb(b2,j) 
#
               tqqqq(b,b1,b2,j) = VSbbbj(b1,b,b2,j) 
               t1qqqq(b,b1,b2,j) = VSbbbj(b,b1,b2,j) 
               tqqqq(b,b1,b2,j) += t1qqqq(b,b1,b2,j) 
#
               t1bb(b,b1) = tqqqq(b,b1,b2,j)*Uxbb(b2,j) 
               tbb(b,b1) += t1bb(b,b1) 
#
            ENDDO j 
            ENDDO b2 
#
            DO a 
            DO i 
#
               GET Vbbai(b1,b,a,i) # + 
               GET Vbbai(b,b1,a,i) # + 
               GET Uxaa(a,i) 
#
               tqqpp(b,b1,a,i) = Vbbai(b1,b,a,i) 
               t1qqpp(b,b1,a,i) = Vbbai(b,b1,a,i) 
               tqqpp(b,b1,a,i) += t1qqpp(b,b1,a,i) 
#
               t1bb(b,b1) = tqqpp(b,b1,a,i)*Uxaa(a,i) 
               tbb(b,b1) += t1bb(b,b1) 
#
            ENDDO i 
            ENDDO a 
#
            PUT Fxb(b,b1) += tbb(b,b1)  
#
      ENDPARDO b, b1 
#
#     beta-beta occupied-occupied block 
#     ----------------------------------- 
#
      PARDO j, j1 
#
            tjj(j,j1) = 0.0 
#
            DO j2 
#
               GET Sxb(j,j2) 
               t1jj(j,j1) = Sxb(j,j2)*Fock_b(j1,j2) 
               t1jj(j,j1) *= -0.5  
               tjj(j,j1) += t1jj(j,j1) 
#
            ENDDO j2 
#
            DO j2 
#
               GET Sxb(j2,j1) 
               t1jj(j,j1) = Sxb(j2,j1)*Fock_b(j2,j) 
               t1jj(j,j1) *= -0.5  
               tjj(j,j1) += t1jj(j,j1) 
#
            ENDDO j2 
#
            DO j2 
            DO j3 
#
               GET VSqjqj(j,j1,j2,j3) # + 
               GET Sxb(j3,j2) 
#
               t1jj(j,j1) = VSqjqj(j,j1,j2,j3)*Sxb(j3,j2)  
               tjj(j,j1) -= t1jj(j,j1) 
#
            ENDDO j3 
            ENDDO j2
#
            DO i 
            DO i1 
#
               GET Vpiqj(i,i1,j,j1) # + 
               GET Sxa(i1,i) 
#
               t1jj(j,j1) = Vpiqj(i,i1,j,j1)*Sxa(i1,i)  
               tjj(j,j1) -= t1jj(j,j1) 
#
            ENDDO i1 
            ENDDO i 
#
            DO b2 
            DO j2 
#
               GET VSqjqj(j1,j,b2,j2) # + 
               GET VSqjqj(j,j1,b2,j2) # + 
               GET Uxbb(b2,j2) 
#
               tqqqq(j,j1,b2,j2) = VSqjqj(j1,j,b2,j2) 
               t1qqqq(j,j1,b2,j2) = VSqjqj(j,j1,b2,j2) 
               tqqqq(j,j1,b2,j2) += t1qqqq(j,j1,b2,j2) 
#
               t1jj(j,j1) = tqqqq(j,j1,b2,j2)*Uxbb(b2,j2) 
               tjj(j,j1) += t1jj(j,j1) 
#
            ENDDO j2 
            ENDDO b2 
#
            DO a 
            DO i 
#
               GET Vpiqj(a,i,j1,j) # + 
               GET Vpiqj(a,i,j,j1) # + 
               GET Uxaa(a,i) 
#
               tqqpp(j,j1,a,i) = Vpiqj(a,i,j1,j) 
               t1qqpp(j,j1,a,i) = Vpiqj(a,i,j,j1) 
               tqqpp(j,j1,a,i) += t1qqpp(j,j1,a,i) 
#
               t1jj(j,j1) = tqqpp(j,j1,a,i)*Uxaa(a,i) 
               tjj(j,j1) += t1jj(j,j1) 
#
            ENDDO i 
            ENDDO a 
#
            PUT Fxb(j,j1) += tjj(j,j1)  
#
      ENDPARDO j, j1 
#
      ENDPROC FINTX_TRAN 
#     ------------------ 
#
# ---------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------
#
      PROC SINTY_TRAN 
#     --------------- 
#
#     The transformed first-derivative overlap matrix is computed. The 
#     perturbation is defined by jatom, jx and jcenter and the 
#     final arrays are Sya and Syb. 
#
      create Sya 
      create Syb 
#
      execute sip_barrier 
#
      PARDO mu, nu 
#
            txx(mu,nu)  = 0.0 
#
            execute overlap_der txx(mu,nu) 
#
            DO p 
#
               txp(mu,p) = txx(mu,nu)*ca(nu,p)  
#
               DO p1 
#
                  tpp(p1,p)       = txp(mu,p)*ca(mu,p1) 
                  PUT Sya(p1,p)  += tpp(p1,p) 
#
               ENDDO p1  
#
            ENDDO p 
#
            DO q 
#
               txq(mu,q) = txx(mu,nu)*cb(nu,q)  
#
               DO q1 
#
                  tqq(q1,q)       = txq(mu,q)*cb(mu,q1) 
                  PUT Syb(q1,q)  += tqq(q1,q) 
#
               ENDDO q1  
#
            ENDDO q 
#
      ENDPARDO mu, nu 

      execute sip_barrier 
#
      ENDPROC SINTY_TRAN 
#     ------------------ 
#
# ---------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------
#
      PROC SINTX_TRAN 
#     --------------- 
#
#     The transformed first-derivative overlap matrix is computed. The 
#     perturbation is defined by iatom, ix and icenter and the 
#     final arrays are Sxa and Sxb. 
#
      create Sxa 
      create Sxb 
#
      execute sip_barrier 
#
      PARDO mu, nu 
#
            execute overlap_der txx(mu,nu) 
#
#           Compute contributions to HF hessian. 
#           ------------------------------------ 
#
            GET            whfya(mu,nu) 
            GET            whfyb(mu,nu) 
            t1xx(mu,nu)  = whfya(mu,nu) 
            t1xx(mu,nu) += whfyb(mu,nu) 
            etemp        = txx(mu,nu)*t1xx(mu,nu) 
            etemp       *= 0.5 
            hessxy      += etemp 
#
            DO p 
#
               txp(mu,p) = txx(mu,nu)*ca(nu,p)  
#
               DO p1 
#
                  tpp(p1,p)       = txp(mu,p)*ca(mu,p1) 
                  PUT Sxa(p1,p)  += tpp(p1,p) 
#
               ENDDO p1  
#
            ENDDO p 
#
            DO q 
#
               txq(mu,q) = txx(mu,nu)*cb(nu,q)  
#
               DO q1 
#
                  tqq(q1,q)       = txq(mu,q)*cb(mu,q1) 
                  PUT Sxb(q1,q)  += tqq(q1,q) 
#
               ENDDO q1  
#
            ENDDO q 
#
      ENDPARDO mu, nu 
#
      ENDPROC SINTX_TRAN 
#     ------------------ 
#
# ---------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------
#
      PROC PUT_PAMPY 
#     -------------- 
#
#     The perturbed amplitudes computed in PAMP are placed into arrays used 
#     in final construction of the hessian. 
#
#     T2aa_new --> T2yaa 
#     T2ab_new --> T2yab 
#     T2bb_new --> T2ybb 
#
# ---------------------------------------------------------------------------
#
      create T2yaa 
      create T2yab 
      create T2ybb 
#
      execute sip_barrier 
#
      PARDO a, i, a1, i1 
#
            GET T2aa_new(a,i,a1,i1) 
            PUT T2yaa(a,i,a1,i1) = T2aa_new(a,i,a1,i1)  
#
      ENDPARDO a, i, a1, i1 
#
      PARDO a, i, b, j 
#
            GET T2ab_new(a,i,b,j) 
            PUT T2yab(a,i,b,j) = T2ab_new(a,i,b,j)  
#
      ENDPARDO a, i, b, j 
#
      PARDO b, j, b1, j1 
#
            GET T2bb_new(b,j,b1,j1) 
            PUT T2ybb(b,j,b1,j1) = T2bb_new(b,j,b1,j1)  
#
      ENDPARDO b, j, b1, j1 
#
      execute sip_barrier 
#
      delete T2aa_new  
      delete T2ab_new  
      delete T2bb_new 
#
      ENDPROC PUT_PAMPY 
#     ----------------- 
#
# ---------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------
#
      PROC Uy_XX  
#     ----------- 
#
      create Uyaa 
      create Uybb 
      execute sip_barrier 
#
      PARDO mu, nu 
#
            execute overlap_der txx(mu,nu) 
#
            DO a 
#
               txp(mu,a) = txx(mu,nu)*ca(nu,a)  
#
               DO a1 
#
                  tpp(a1,a)       = txp(mu,a)*ca(mu,a1) 
                  tpp(a1,a)      *= -0.5  
                  PUT Uyaa(a1,a) += tpp(a1,a) 
#
               ENDDO a1  
#
            ENDDO a 
#
            DO i 
#
               txp(mu,i) = txx(mu,nu)*ca(nu,i)  
#
               DO i1 
#
                  tpp(i1,i)       = txp(mu,i)*ca(mu,i1) 
                  tpp(i1,i)      *= -0.5  
                  PUT Uyaa(i1,i) += tpp(i1,i) 
#
               ENDDO i1  
#
            ENDDO i 
#
            DO b 
#
               txq(mu,b) = txx(mu,nu)*cb(nu,b)  
#
               DO b1 
#
                  tqq(b1,b)       = txq(mu,b)*cb(mu,b1) 
                  tqq(b1,b)      *= -0.5  
                  PUT Uybb(b1,b) += tqq(b1,b) 
#
               ENDDO b1  
#
            ENDDO b 
#
            DO j 
#
               txq(mu,j) = txx(mu,nu)*cb(nu,j)  
#
               DO j1 
#
                  tqq(j1,j)       = txq(mu,j)*cb(mu,j1) 
                  tqq(j1,j)      *= -0.5  
                  PUT Uybb(j1,j) += tqq(j1,j) 
#
               ENDDO j1  
#
            ENDDO j 
#
      ENDPARDO mu, nu 
#
#     Form the virtual-occupied block of the Q array --> Qyai, Qybj 
#     ------------------------------------------------------------- 
#
#     Qyai first 
#     ---------- 
#
      PARDO a, i 
#
            tai(a,i) = 0.0 # Fya(a,i) 
#
            DO i1 
#
               if i1 == i 
#
               GET Sya(a,i) 
               t1ai(a,i) = Sya(a,i1)*Fock_a(i1,i) 
               tai(a,i) -= t1ai(a,i) 
#
               endif 
#
            ENDDO i1 
#
            DO i1 
            DO i2 
#
               GET VSpipi(a,i,i2,i1) 
               GET Sya(i2,i1) 
               t1ai(a,i) = VSpipi(a,i,i2,i1)*Sya(i2,i1) 
               tai(a,i) -= t1ai(a,i) 
#
            ENDDO i2 
            ENDDO i1 
#
            DO j 
            DO j1 
#
               GET Vpiqj(a,i,j1,j) 
               GET Syb(j1,j) 
               t1ai(a,i) = Vpiqj(a,i,j,j1)*Syb(j1,j) 
               tai(a,i) -= t1ai(a,i) 
#
            ENDDO j1 
            ENDDO j 
#
            PUT Qyai(a,i) += tai(a,i) 
#
      ENDPARDO a, i 
#
#     Qybj next  
#     --------- 
#
      PARDO b, j 
#
            tbj(b,j) = 0.0 # Fyb(b,j) 
#
            DO j1 
#
               if j1 == j 
#
               GET Syb(b,j1) 
               t1bj(b,j) = Syb(b,j1)*Fock_b(j1,j) 
               tbj(b,j) -= t1bj(b,j) 
#
               endif 
#
            ENDDO j1 
#
            DO j1 
            DO j2 
#
               GET VSqjqj(b,j,j2,j1) 
               GET Syb(j1,j2) 
               t1bj(b,j) = VSqjqj(b,j,j2,j1)*Syb(j1,j2) 
               tbj(b,j) -= t1bj(b,j) 
#
            ENDDO j2 
            ENDDO j1 
#
            DO i 
            DO i1 
#
               GET Vpiqj(i1,i,b,j) 
               GET Sya(i,i1) 
               t1bj(b,j) = Vpiqj(i1,i,b,j)*Sya(i,i1) 
               tbj(b,j) -= t1bj(b,j) 
#
            ENDDO i1 
            ENDDO i 
#
            PUT Qybj(b,j) += tbj(b,j) 
#
      ENDPARDO b, j 
#
      ENDPROC Uy_XX  
#     ------------- 
#
# ---------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------
#
      PROC Ux_XX  
#     ----------- 
#
      create Uxaa 
      create Uxbb 
#
      execute sip_barrier 
#
      PARDO mu, nu 
#
            txx(mu,nu) = 0.0 
            execute overlap_der txx(mu,nu) 
#
            DO a 
#
               txp(mu,a) = txx(mu,nu)*ca(nu,a)  
#
               DO a1 
#
                  tpp(a1,a)       = txp(mu,a)*ca(mu,a1) 
                  tpp(a1,a)      *= -0.5  
                  PUT Uxaa(a1,a) += tpp(a1,a) 
#
               ENDDO a1  
#
            ENDDO a 
#
            DO i 
#
               txp(mu,i) = txx(mu,nu)*ca(nu,i)  
#
               DO i1 
#
                  tpp(i1,i)       = txp(mu,i)*ca(mu,i1) 
                  tpp(i1,i)      *= -0.5  
                  PUT Uxaa(i1,i) += tpp(i1,i) 
#
               ENDDO i1  
#
            ENDDO i 
#
            DO j 
#
               txq(mu,j) = txx(mu,nu)*cb(nu,j)  
#
               DO j1 
#
                  tqq(j1,j)       = txq(mu,j)*cb(mu,j1) 
                  tqq(j1,j)      *= -0.5  
                  PUT Uxbb(j1,j) += tqq(j1,j) 
#
               ENDDO j1  
#
            ENDDO j 
#
            DO b 
#
               txq(mu,b) = txx(mu,nu)*cb(nu,b)  
#
               DO b1 
#
                  tqq(b1,b)       = txq(mu,b)*cb(mu,b1) 
                  tqq(b1,b)      *= -0.5  
                  PUT Uxbb(b1,b) += tqq(b1,b) 
#
               ENDDO b1  
#
            ENDDO b 
#
      ENDPARDO mu, nu 
#
#     Form the virtual-occupied block of the Q array --> Qxai, Qxbj
#     -------------------------------------------------------------
#
#     Qxai first
#     ----------
#
      PARDO a, i
#
            GET Fxa(a,i)
            tai(a,i) = 0.0 #Fxa(a,i)
#
            DO i1
#
               GET Sxa(a,i1)
               t1ai(a,i) = Sxa(a,i1)*Fock_a(i,i1)
               tai(a,i) -= t1ai(a,i)
#
            ENDDO i1
#
            DO i1
            DO i2
#
               GET VSpipi(a,i,i2,i1)
               GET Sxa(i1,i2)
               t1ai(a,i) = VSpipi(a,i,i2,i1)*Sxa(i1,i2)
               tai(a,i) -= t1ai(a,i)
#
            ENDDO i2
            ENDDO i1
#
            DO j
            DO j1
#
               GET Vpiqj(a,i,j1,j)
               GET Sxb(j,j1)
               t1ai(a,i) = Vpiqj(a,i,j1,j)*Sxb(j,j1)
               tai(a,i) -= t1ai(a,i)
#
            ENDDO j1
            ENDDO j
#
            PUT Qxai(a,i) += tai(a,i)
#
      ENDPARDO a, i
#
#     Qxbj next
#     ---------
#
      PARDO b, j
#
            GET Fxb(b,j)
            tbj(b,j) = 0.0 #Fxb(b,j)
#
            DO j1
#
               GET Sxb(b,j1)
               t1bj(b,j) = Sxb(b,j1)*Fock_b(j,j1)
               tbj(b,j) -= t1bj(b,j)
#
            ENDDO j1
#
            DO j1
            DO j2
#
               GET VSqjqj(b,j,j2,j1)
               GET Sxb(j1,j2)
               t1bj(b,j) = VSqjqj(b,j,j2,j1)*Sxb(j1,j2)
               tbj(b,j) -= t1bj(b,j)
#
            ENDDO j2
            ENDDO j1
#
            DO i
            DO i1
#
               GET Vpiqj(i1,i,b,j)
               GET Sxa(i,i1)
               t1bj(b,j) = Vpiqj(i1,i,b,j)*Sxa(i,i1)
               tbj(b,j) -= t1bj(b,j)
#
            ENDDO i1
            ENDDO i
#
            PUT Qxbj(b,j) += tbj(b,j)
#
      ENDPARDO b, j
#
      ENDPROC Ux_XX  
#     ------------- 
#
# ---------------------------------------------------------------------------
#
#
# ----------------------------------------------------------------------
#
# Contributions to the Hessian from Eq.9 are computed. 
#
# ----------------------------------------------------------------------
#
      PROC IUU # --> Eq.(9)  
#     --------------------- 
#
#     Alpha contribution.
#     -------------------
#
      PARDO p, p1 
#
           GET Uxaa(p,p1) 
           tpp(p,p1) = 0.0 
#
           DO p2 
#
              GET Uyaa(p,p2) 
              GET Uyaa(p2,p) 
              GET Ipq_a(p1,p2) 
              GET Ipq_a(p2,p1) 
#
              t1pp(p,p1) = Uyaa(p,p2)*Ipq_a(p1,p2) 
              tpp(p,p1) += t1pp(p,p1) 
#
              t1pp(p,p1) = Uyaa(p2,p)*Ipq_a(p1,p2) 
              tpp(p,p1) += t1pp(p,p1) 
#
              t1pp(p,p1) = Uyaa(p2,p)*Ipq_a(p2,p1) 
              tpp(p,p1) += t1pp(p,p1) 
#
           ENDDO p2 
#
           etemp = Uxaa(p,p1)*tpp(p,p1) 
           hessxy -= etemp
#
      ENDPARDO p, p1 
#
#     End Alpha contribution.
#     -----------------------
#
#     Beta contribution.
#     ------------------
#
      PARDO q, q1 
#
           GET Uxbb(q,q1) 
           tqq(q,q1) = 0.0 
#
           DO q2 
#
              GET Uybb(q,q2) 
              GET Uybb(q2,q) 
              GET Ipq_b(q1,q2) 
              GET Ipq_b(q2,q1) 
#
              t1qq(q,q1) = Uybb(q,q2)*Ipq_b(q1,q2) 
              tqq(q,q1) += t1qq(q,q1) 
#
              t1qq(q,q1) = Uybb(q2,q)*Ipq_b(q1,q2) 
              tqq(q,q1) += t1qq(q,q1) 
#
              t1qq(q,q1) = Uybb(q2,q)*Ipq_b(q2,q1) 
              tqq(q,q1) += t1qq(q,q1) 
#
           ENDDO q2 
#
           etemp = Uxbb(q,q1)*tqq(q,q1) 
           hessxy -= etemp
#
      ENDPARDO q, q1 
#
#     End Beta contribution.
#     ----------------------
#
      ENDPROC IUU 
#     ----------- 
#
# ----------------------------------------------------------------------
#
# ----------------------------------------------------------------------
#
      PROC IUUP # --> Eq.(9)
#     ---------------------
#
#     Alpha contribution.
#     -------------------
#
      PARDO p, p1
#
            GET         Ipq_a(p,p1)
            tpp(p,p1) = 0.0
#
            DO p2
#
               GET           Uxaa(p2,p1)
               GET           Uyaa(p,p2)
               GET           Uyaa(p2,p)
#
               t1pp(p2,p)  = Uyaa(p,p2)
               t1pp(p2,p) *= 2.0
               t1pp(p2,p) += Uyaa(p2,p)
#
               t2pp(p,p1)  = Uxaa(p2,p1)*t1pp(p2,p)
               tpp(p,p1)  += t2pp(p,p1)
#
            ENDDO p2
#
            etemp   = Ipq_a(p,p1)*tpp(p,p1)
            hessxy -= etemp
#
      ENDPARDO p, p1
#
#     End Alpha contribution.
#     -----------------------
#
#     Beta contribution.
#     ------------------
#
      PARDO q, q1
#
            GET         Ipq_b(q,q1)
            tqq(q,q1) = 0.0
#
            DO q2
#
               GET           Uxbb(q2,q1)
               GET           Uybb(q,q2)
               GET           Uybb(q2,q)
#
               t1qq(q2,q)  = Uybb(q,q2)
               t1qq(q2,q) *= 2.0
               t1qq(q2,q) += Uybb(q2,q)
#
               t2qq(q,q1)  = Uxbb(q2,q1)*t1qq(q2,q)
               tqq(q,q1)  += t2qq(q,q1)
#
            ENDDO q2
#
            etemp   = Ipq_b(q,q1)*tqq(q,q1)
            hessxy -= etemp
#
      ENDPARDO q, q1
#
#     End Beta contribution.
#     ----------------------
#
      ENDPROC IUUP 
#     -----------
#
# ----------------------------------------------------------------------
#
# ----------------------------------------------------------------------
#
      PROC DUF # --> Eq.(8)  
#     --------------------- 
#
      create Y8aa 
      create Y8bb 
#
      execute sip_barrier 
#
#     First form one-particle intermediates used. 
#     ------------------------------------------- 
#
#     Alpha contribution. 
#     ------------------- 
#
      PARDO p, p1 
#
            GET         Fxa(p,p1) 
            tpp(p,p1) = Fxa(p,p1)
            tpp(p,p1)*= 2.0  
#
            DO p2 
#
               IF p2 == p 
#
               GET          Uxaa(p2,p1) 
               t1pp(p,p1) = Uxaa(p2,p1)*Fock_a(p,p2) 
               tpp(p,p1) -= t1pp(p,p1) 
#
               ENDIF 
#
               IF p2 == p1 
#
               GET          Uxaa(p2,p) 
               t1pp(p,p1) = Uxaa(p2,p)*Fock_a(p2,p1) 
               t1pp(p,p1)*= 2.0  
               tpp(p,p1) -= t1pp(p,p1) 
#
               ENDIF 
#
            ENDDO p2 
#
            PUT Y8aa(p,p1) = tpp(p,p1) 
#
      ENDPARDO p, p1 
#
#     Beta contribution. 
#     ------------------ 
#
      PARDO q, q1 
#
            GET         Fxb(q,q1) 
            tqq(q,q1) = Fxb(q,q1)
            tqq(q,q1)*= 2.0  
#
            DO q2 
#
               IF q2 == q 
#
               GET          Uxbb(q2,q1) 
               t1qq(q,q1) = Uxbb(q2,q1)*Fock_b(q,q2) 
               tqq(q,q1) -= t1qq(q,q1) 
#
               ENDIF 
#
               IF q2 == q1 
#
               GET          Uxbb(q2,q) 
               t1qq(q,q1) = Uxbb(q2,q)*Fock_b(q2,q1) 
               t1qq(q,q1)*= 2.0  
               tqq(q,q1) -= t1qq(q,q1) 
#
               ENDIF 
#
            ENDDO q2 
#
            PUT Y8bb(q,q1) = tqq(q,q1) 
#
      ENDPARDO q, q1 
#
      execute sip_barrier 
#
#     Done form one-particle intermediates used. 
#     ------------------------------------------ 
#
      PARDO p, p1 
#
            GET         Dpq_a(p,p1) 
            tpp(p,p1) = 0.0 
#
            DO p2 
#
               GET          Y8aa(p2,p)
               GET          Uyaa(p2,p1) 
#
               t1pp(p,p1) = Y8aa(p2,p)*Uyaa(p2,p1) 
               tpp(p,p1) += t1pp(p,p1) 
#
            ENDDO p2 
#
            etemp   = Dpq_a(p,p1)*tpp(p,p1)
            hessxy += etemp 
#
      ENDPARDO p, p1 
#
      PARDO q, q1 
#
            GET         Dpq_b(q,q1) 
            tqq(q,q1) = 0.0 
#
            DO q2 
#
               GET          Y8bb(q2,q)
               GET          Uybb(q2,q1) 
#
               t1qq(q,q1) = Y8bb(q2,q)*Uybb(q2,q1) 
               tqq(q,q1) += t1qq(q,q1) 
#
            ENDDO q2 
#
            etemp   = Dpq_b(q,q1)*tqq(q,q1)
            hessxy += etemp 
#
      ENDPARDO q, q1 
#
#     Done Beta contribution. 
#     ----------------------- 
#
      execute sip_barrier 
#
      delete Y8aa 
      delete Y8bb 
#
      ENDPROC DUF # --> Eq.(8)  
#     ----------------------- 
#
# ----------------------------------------------------------------------
#
# ----------------------------------------------------------------------
#
      PROC DT1 # --> Eq.(7)  
#     --------------------- 
#
#     Alpha contribution. 
#     ------------------- 
#
      PARDO a, i 
#
           GET Fxa(a,i) 
           GET t1yaa(a,i) 
#
           etemp = Fxa(a,i)*t1yaa(a,i) 
           hessxy += etemp 
#
      ENDPARDO a, i 
#
#     Beta contribution. 
#     ------------------ 
#
      PARDO b, j 
#
           GET Fxb(b,j) 
           GET t1ybb(b,j) 
#
           etemp = Fxb(b,j)*t1ybb(b,j) 
           hessxy += etemp 
#
      ENDPARDO b, j 
# 
      ENDPROC DT1 # --> Eq.(7)  
#     ------------------------ 
#
# ----------------------------------------------------------------------
#
# ----------------------------------------------------------------------
#
      PROC FTTAB # --> Eq.(6)  
#     ----------------------- 
#
#     Alpha contribution. 
#     ------------------- 
#
      PARDO a, a1 
#
            GET         Fxa(a,a1) 
            taa(a,a1) = 0.0 
#
            DO i 
# 
               DO i1 
               DO a2 
#
                  GET           T1aiai_aa(a,i,a2,i1) 
                  GET           T2yFullaa(a1,i,a2,i1) 
#
                  t1aa(a,a1)  = T1aiai_aa(a,i,a2,i1)*T2yFullaa(a1,i,a2,i1) 
                  t1aa(a,a1) *= 0.5 
                  taa(a,a1)  += t1aa(a,a1)
#
               ENDDO a2 
               ENDDO i1 
# 
               DO j 
               DO b 
#
                  GET          T1aibj_ab(a,i,b,j) 
                  GET          T2yFullab(a1,i,b,j) 
#
                  t1aa(a,a1) = T1aibj_ab(a,i,b,j)*T2yFullab(a1,i,b,j) 
                  taa(a,a1) += t1aa(a,a1)
#
               ENDDO b 
               ENDDO j 
#
            ENDDO i 
# 
            etemp   = Fxa(a,a1)*taa(a,a1) 
            hessxy += etemp 
#
      ENDPARDO a, a1 
#
#     END Alpha contribution. 
#     ----------------------- 
#
#     BETA contribution. 
#     ------------------ 
#
      PARDO b, b1 
#
            GET         Fxb(b,b1) 
            tbb(b,b1) = 0.0 
#
            DO j 
# 
               DO j1 
               DO b2 
#
                  GET           T1bjbj_bb(b,j,b2,j1) 
                  GET           T2yFullbb(b1,j,b2,j1) 
#
                  t1bb(b,b1)  = T1bjbj_bb(b,j,b2,j1)*T2yFullbb(b1,j,b2,j1) 
                  t1bb(b,b1) *= 0.5 
                  tbb(b,b1)  += t1bb(b,b1)
#
               ENDDO b2 
               ENDDO j1 
# 
               DO i 
               DO a 
#
                  GET          T1aibj_ab(a,i,b,j) 
                  GET          T2yFullab(a,i,b1,j) 
#
                  t1bb(b,b1) = T1aibj_ab(a,i,b,j)*T2yFullab(a,i,b1,j) 
                  tbb(b,b1) += t1bb(b,b1)
#
               ENDDO a 
               ENDDO i 
#
            ENDDO j 
# 
            etemp   = Fxb(b,b1)*tbb(b,b1) 
            hessxy += etemp 
#
      ENDPARDO b, b1 
#
#     END Beta contribution. 
#     ---------------------- 
#
      ENDPROC FTTAB # --> Eq.(6)  
#     -------------------------- 
#
# ----------------------------------------------------------------------
#
# ----------------------------------------------------------------------
#
      PROC FTTIJ # --> Eq.(5)  
#     -----------------------  
#
#     Alpha contribution. 
#     ------------------- 
#
      PARDO i, i1 
#
           GET         Fxa(i,i1) 
           tpp(i,i1) = 0.0 
#
           DO a 
#
              DO a1 
              DO i2 
#
                 GET          T1aiai_aa(a,i,a1,i2) 
                 GET          T2yFullaa(a,i1,a1,i2) 
# 
                 t1pp(i,i1) = T1aiai_aa(a,i,a1,i2)*T2yFullaa(a,i1,a1,i2) 
                 t1pp(i,i1)*= 0.5  
                 tpp(i,i1) += t1pp(i,i1) 
#
              ENDDO i2 
              ENDDO a1 
#
              DO b 
              DO j 
#
                 GET          T1aibj_ab(a,i,b,j) 
                 GET          T2yFullab(a,i1,b,j) 
# 
                 t1pp(i,i1) = T1aibj_ab(a,i,b,j)*T2yFullab(a,i1,b,j) 
                 tpp(i,i1) += t1pp(i,i1) 
#
              ENDDO j 
              ENDDO b 
#
           ENDDO a 
#
           etemp   = Fxa(i,i1)*tpp(i,i1)
           hessxy -= etemp 
#
      ENDPARDO i, i1 
#
#     END Alpha contribution. 
#     ----------------------- 
#
#     Beta contribution. 
#     ------------------ 
#
      PARDO j, j1 
#
           GET         Fxb(j,j1) 
           tqq(j,j1) = 0.0 
#
           DO b 
#
              DO b1 
              DO j2 
#
                 GET          T1bjbj_bb(b,j,b1,j2) 
                 GET          T2yFullbb(b,j1,b1,j2) 
# 
                 t1qq(j,j1) = T1bjbj_bb(b,j,b1,j2)*T2yFullbb(b,j1,b1,j2) 
                 t1qq(j,j1)*= 0.5  
                 tqq(j,j1) += t1qq(j,j1) 
#
              ENDDO j2 
              ENDDO b1 
#
              DO a 
              DO i 
#
                 GET          T1aibj_ab(a,i,b,j) 
                 GET          T2yFullab(a,i,b,j1) 
# 
                 t1qq(j,j1) = T1aibj_ab(a,i,b,j)*T2yFullab(a,i,b,j1) 
                 tqq(j,j1) += t1qq(j,j1) 
#
              ENDDO i 
              ENDDO a 
#
           ENDDO b 
#
           etemp   = Fxb(j,j1)*tqq(j,j1)
           hessxy -= etemp 
#
      ENDPARDO j, j1 
#
#     END Beta contribution. 
#     ---------------------- 
#
      ENDPROC FTTIJ # --> Eq.(5)  
#     --------------------------  
#
# ----------------------------------------------------------------------
#
# ----------------------------------------------------------------------
#
# Terms 5-9 of equation 4 are computed. 
# ------------------------------------- 
#
      PROC PART1 
#     ---------- 
#
         CALL IUUP  # --> Eq.(9) # --> Passed  
         CALL DUF   # --> Eq.(8) # --> Passed       
#
         CALL FTTAB # --> Eq.(6) # --> Passed  
         CALL FTTIJ # --> Eq.(5) # --> Passed   
#
      ENDPROC PART1 
#     ------------- 
#
# ----------------------------------------------------------------------
#
# ---------------------------------------------------------------------- 
#
# The contributions to the Hessian which depend on the two-electron
# integral first-derivatives are computed. These are terms 10-14 in
# Eq.(4). 
#
# ---------------------------------------------------------------------- 
#
      PROC PART2  
#     ---------- 
#
#     Term 10. 
#     --------  
#
#     Contribution from Uxxaa. 
#     ------------------------ 
#
      PARDO i, i1 
#
            GET Uxaa(i,i1) 
            tii(i,i1) = 0.0  
#
#           alpha/alpha contribution. 
#           ------------------------- 
#
            DO i2 
            DO a 
            DO a1 
#
               GET                 T1aiai_aa(a,i1,a1,i2) 
               GET                 DTpppi(a,i,a1,i2) # + 
               GET                 DTpppi(a,i2,a1,i) # - 
#
               Tpppi(a,i,a1,i2)  = DTpppi(a,i,a1,i2)  
               T1pppi(a,i,a1,i2) = DTpppi(a,i2,a1,i)  
               Tpppi(a,i,a1,i2) -= T1pppi(a,i,a1,i2)  
#
               t1ii(i,i1)        = Tpppi(a,i,a1,i2)*T1aiai_aa(a,i1,a1,i2) 
               tii(i,i1)        += t1ii(i,i1) 
#
            ENDDO a1 
            ENDDO a 
            ENDDO i2 
#
#           alpha/beta contribution. 
#           ------------------------ 
#
            DO j 
            DO a 
            DO b 
#
               GET          T1aibj_ab(a,i1,b,j) 
               GET          DTppqj(a,i,b,j)  
#
               t1ii(i,i1) = DTppqj(a,i,b,j)*T1aibj_ab(a,i1,b,j) 
               t1ii(i,i1)*= 2.0  
               tii(i,i1) += t1ii(i,i1) 
#
            ENDDO b 
            ENDDO a 
            ENDDO j 
#
            etemp   = Uxaa(i,i1)*tii(i,i1) 
            hessxy += etemp 
#
      ENDPARDO i, i1 
#
#     Contribution from Uxxbb. 
#     ------------------------ 
#
      PARDO j, j1 
#
            GET         Uxbb(j,j1) 
            tjj(j,j1) = 0.0  
#
#           beta/beta contribution. 
#           ----------------------- 
#
            DO j2 
            DO b 
            DO b1 
#
               GET                 T1bjbj_bb(b,j1,b1,j2) 
               GET                 DTqqqj(b,j,b1,j2) # + 
               GET                 DTqqqj(b,j2,b1,j) # - 
#
               Tqqqj(b,j,b1,j2)  = DTqqqj(b,j,b1,j2)  
               T1qqqj(b,j,b1,j2) = DTqqqj(b,j2,b1,j)  
               Tqqqj(b,j,b1,j2) -= T1qqqj(b,j,b1,j2)  
#
               t1jj(j,j1)        = Tqqqj(b,j,b1,j2)*T1bjbj_bb(b,j1,b1,j2) 
               tjj(j,j1)        += t1jj(j,j1) 
#
            ENDDO b1 
            ENDDO b 
            ENDDO j2 
#
#           alpha/beta contribution. 
#           ------------------------ 
#
            DO i 
            DO b 
            DO a 
#
               GET          T1aibj_ab(a,i,b,j1) 
               GET          DTppqj(a,i,b,j)  
#
               t1jj(j,j1) = DTppqj(a,i,b,j)*T1aibj_ab(a,i,b,j1) 
               t1jj(j,j1)*= 2.0  
               tjj(j,j1) += t1jj(j,j1) 
#
            ENDDO a 
            ENDDO b 
            ENDDO i 
#
            etemp   = Uxbb(j,j1)*tjj(j,j1) 
            hessxy += etemp 
#
      ENDPARDO j, j1 
#
#     Term 10 Finished. 
#     ----------------- 
#
#     Term 11. 
#     --------  
#
#     Contribution from Uxai. 
#     ----------------------- 
#
      PARDO a, i 
#
            GET Uxaa(a,i) 
            tai(a,i) = 0.0 
#
#           alpha/alpha contribution. 
#           ------------------------- 
#
            DO a1 
            DO i1 
            DO a2 
#
               GET T1aiai_aa(a1,i,a2,i1) 
               GET DTpppi(a1,a,a2,i1) # + 
               GET DTpppi(a2,a,a1,i1) # - 
#
               Tpppi(a1,a,a2,i1)  = DTpppi(a1,a,a2,i1) 
               T1pppi(a1,a,a2,i1) = DTpppi(a2,a,a1,i1)  
               Tpppi(a1,a,a2,i1) -= T1pppi(a1,a,a2,i1)
#
               t1ai(a,i) = Tpppi(a1,a,a2,i1)*T1aiai_aa(a1,i,a2,i1) 
               tai(a,i) += t1ai(a,i)  
#
            ENDDO a2 
            ENDDO i1 
            ENDDO a1 
#
#           alpha/beta contribution. 
#           ------------------------ 
#
            DO a1 
            DO j 
            DO b 
#
               GET T1aibj_ab(a1,i,b,j) 
               GET DTppqj(a1,a,b,j)  
#
               t1ai(a,i) = DTppqj(a1,a,b,j)*T1aibj_ab(a1,i,b,j) 
               t1ai(a,i)*= 2.0  
               tai(a,i) += t1ai(a,i)  
#
            ENDDO b 
            ENDDO j 
            ENDDO a1 
#
            etemp = tai(a,i)*Uxaa(a,i)  
            hessxy += etemp 
#
      ENDPARDO a, i 
#
#     Contribution from Uxbj. 
#     ----------------------- 
#
      PARDO b, j 
#
            GET Uxbb(b,j) 
            tbj(b,j) = 0.0 
#
#           alpha/alpha contribution. 
#           ------------------------- 
#
            DO b1 
            DO j1 
            DO b2 
#
               GET T1bjbj_bb(b1,j,b2,j1) 
               GET DTqqqj(b1,b,b2,j1) # + 
               GET DTqqqj(b2,b,b1,j1) # - 
#
               Tqqqj(b1,b,b2,j1)  = DTqqqj(b1,b,b2,j1) 
               T1qqqj(b1,b,b2,j1) = DTqqqj(b2,b,b1,j1)  
               Tqqqj(b1,b,b2,j1) -= T1qqqj(b1,b,b2,j1)
#
               t1bj(b,j) = Tqqqj(b1,b,b2,j1)*T1bjbj_bb(b1,j,b2,j1) 
               tbj(b,j) += t1bj(b,j)  
#
            ENDDO b2 
            ENDDO j1 
            ENDDO b1 
#
#           alpha/beta contribution. 
#           ------------------------ 
#
            DO b1 
            DO i 
            DO a 
#
               GET T1aibj_ab(a,i,b1,j) 
               GET DTqqpi(b1,b,a,i)  
#
               t1bj(b,j) = DTqqpi(b1,b,a,i)*T1aibj_ab(a,i,b1,j) 
               t1bj(b,j)*= 2.0  
               tbj(b,j) += t1bj(b,j)  
#
            ENDDO a 
            ENDDO i 
            ENDDO b1 
#
            etemp = tbj(b,j)*Uxbb(b,j)  
            hessxy += etemp 
#
      ENDPARDO b, j 
#
#     Term 11 Finished. 
#     ----------------- 
#
#     Term 12. 
#     -------- 
#
#     Contribution from Uxia. 
#     ----------------------- 
#
      PARDO a, i 
#
            GET Uxaa(i,a) 
            tia(i,a) = 0.0 
#
#           alpha/alpha contribution. 
#           ------------------------- 
#
            DO i1 
            DO i2 
            DO a1 
#
               GET DTpppi(a1,i2,i,i1) # + 
               GET DTpppi(a1,i1,i,i2) # - 
               GET T1aiai_aa(a,i1,a1,i2) 
#
               tpppi(a1,i2,i,i1)  = DTpppi(a1,i2,i,i1) 
               t1pppi(a1,i2,i,i1) = DTpppi(a1,i1,i,i2) 
               tpppi(a1,i2,i,i1) -= t1pppi(a1,i2,i,i1)  
#
               t1ia(i,a) = tpppi(a1,i2,i,i1)*T1aiai_aa(a,i1,a1,i2) 
               tia(i,a) += t1ia(i,a) 
#
            ENDDO a1 
            ENDDO i2 
            ENDDO i1 
#
#           alpha/beta contribution. 
#           ------------------------ 
#
            DO i1 
            DO j 
            DO b 
#
               GET DTqqpi(b,j,i,i1) # + 
               GET T1aibj_ab(a,i1,b,j) 
#
               t1ia(i,a) = DTqqpi(b,j,i,i1)*T1aibj_ab(a,i1,b,j) 
               t1ia(i,a)*= 2.0 
               tia(i,a) += t1ia(i,a) 
#
            ENDDO b 
            ENDDO j 
            ENDDO i1 
#
            etemp = tia(i,a)*Uxaa(i,a) 
            hessxy += etemp 
#
      ENDPARDO a, i 
#
#     Contribution from Uxjb. 
#     ----------------------- 
#
      PARDO b, j 
#
            GET Uxbb(j,b) 
            tjb(j,b) = 0.0 
#
#           beta/beta contribution. 
#           ----------------------- 
#
            DO j1 
            DO j2 
            DO b1 
#
               GET DTqqqj(b1,j2,j,j1) # + 
               GET DTqqqj(b1,j1,j,j2) # - 
               GET T1bjbj_bb(b,j1,b1,j2) 
#
               tqqqj(b1,j2,j,j1)  = DTqqqj(b1,j2,j,j1) 
               t1qqqj(b1,j2,j,j1) = DTqqqj(b1,j1,j,j2) 
               tqqqj(b1,j2,j,j1) -= t1qqqj(b1,j2,j,j1)  
#
               t1jb(j,b) = tqqqj(b1,j2,j,j1)*T1bjbj_bb(b,j1,b1,j2) 
               tjb(j,b) += t1jb(j,b) 
#
            ENDDO b1 
            ENDDO j2 
            ENDDO j1 
#
#           alpha/beta contribution. 
#           ------------------------ 
#
            DO j1 
            DO i 
            DO a 
#
               GET DTqqpi(j,j1,a,i) 
               GET T1aibj_ab(a,i,b,j1) 
#
               t1jb(j,b) = DTqqpi(j,j1,a,i)*T1aibj_ab(a,i,b,j1) 
               t1jb(j,b)*= 2.0 
               tjb(j,b) += t1jb(j,b) 
#
            ENDDO a 
            ENDDO i 
            ENDDO j1 
#
            etemp = tjb(j,b)*Uxbb(j,b) 
            hessxy += etemp 
#
      ENDPARDO b, j 
#
#     Term 12 Finished. 
#     ----------------- 
#
#     Term 13. 
#     -------- 
#
#     Contribution from Uxaa. 
#     ----------------------- 
#
      PARDO a, a1 
#
            GET Uxaa(a,a1) 
            taa(a,a1) = 0.0 
#
#           alpha/alpha contribution. 
#           ------------------------- 
#
            DO i 
            DO i1 
            DO a2 
#
               GET DTpppi(a,i,a2,i1) # + 
               GET DTpppi(a,i1,a2,i) # - 
               GET T1aiai_aa(a1,i,a2,i1) 
#
               Tpppi(a,i,a2,i1)  = DTpppi(a,i,a2,i1) 
               T1pppi(a,i,a2,i1) = DTpppi(a,i1,a2,i) 
               Tpppi(a,i,a2,i1) -= T1pppi(a,i,a2,i1) 
#
               t1aa(a,a1) = Tpppi(a,i,a2,i1)*T1aiai_aa(a1,i,a2,i1) 
               taa(a,a1) += t1aa(a,a1)  
#
            ENDDO a2 
            ENDDO i1 
            ENDDO i 
#
#           alpha/beta contribution. 
#           ------------------------ 
#
            DO i 
            DO j 
            DO b 
#
               GET DTppqj(a,i,b,j) # + 
               GET T1aibj_ab(a1,i,b,j) 
#
               t1aa(a,a1) = DTppqj(a,i,b,j)*T1aibj_ab(a1,i,b,j) 
               t1aa(a,a1)*= 2.0  
               taa(a,a1) += t1aa(a,a1)  
#
            ENDDO b 
            ENDDO j 
            ENDDO i 
#
            etemp = taa(a,a1)*Uxaa(a,a1) 
            hessxy += etemp 
#
      ENDPARDO a, a1 
#
#     Contribution from Uxbb. 
#     ----------------------- 
#
      PARDO b, b1 
#
            GET Uxbb(b,b1) 
            tbb(b,b1) = 0.0 
#
#           beta/beta contribution. 
#           ----------------------- 
#
            DO j 
            DO j1 
            DO b2 
#
               GET DTqqqj(b,j,b2,j1) # + 
               GET DTqqqj(b,j1,b2,j) # - 
               GET T1bjbj_bb(b1,j,b2,j1) 
#
               Tqqqj(b,j,b2,j1)  = DTqqqj(b,j,b2,j1) 
               T1qqqj(b,j,b2,j1) = DTqqqj(b,j1,b2,j) 
               Tqqqj(b,j,b2,j1) -= T1qqqj(b,j,b2,j1) 
#
               t1bb(b,b1) = Tqqqj(b,j,b2,j1)*T1bjbj_bb(b1,j,b2,j1) 
               tbb(b,b1) += t1bb(b,b1)  
#
            ENDDO b2 
            ENDDO j1 
            ENDDO j 
#
#           alpha/beta contribution. 
#           ------------------------ 
#
            DO i 
            DO j 
            DO a 
#
               GET DTppqj(a,i,b,j) # + 
               GET T1aibj_ab(a,i,b1,j) 
#
               t1bb(b,b1) = DTppqj(a,i,b,j)*T1aibj_ab(a,i,b1,j) 
               t1bb(b,b1)*= 2.0  
               tbb(b,b1) += t1bb(b,b1)  
#
            ENDDO a 
            ENDDO j 
            ENDDO i 
#
            etemp = tbb(b,b1)*Uxbb(b,b1) 
            hessxy += etemp 
#
      ENDPARDO b, b1 
#
#     Term 13 Finished. 
#     ----------------- 
#
      ENDPROC PART2  
#     ------------- 
#
# ---------------------------------------------------------------------- 
#
      PROC TERM14 
#     ----------- 
#
#     Term 14. 
#     -------- 
#
#     Contributions from Uxpi. 
#     ----------------------- 
#
      PARDO p, i 
#
           GET Uxaa(p,i) 
           tpi(p,i) = 0.0 
#
#          alpha/alpha contribution. 
#          ------------------------- 
#
           DO p1 
           DO p2 
#
              GET DTpppi(p2,p1,p,i) # + 
              GET DTpppi(p,p1,p2,i) # - 
              GET Dpq_a(p1,p2) 
#
              tpppi(p2,p1,p,i)  = DTpppi(p2,p1,p,i) 
              t1pppi(p2,p1,p,i) = DTpppi(p,p1,p2,i) 
              tpppi(p2,p1,p,i) -= t1pppi(p2,p1,p,i)
#
              t1pi(p,i) = tpppi(p2,p1,p,i)*Dpq_a(p1,p2)
              t1pi(p,i) *= 2.0 
              tpi(p,i) += t1pi(p,i) 
#
           ENDDO p2 
           ENDDO p1 
#
#          alpha/beta contribution. 
#          ------------------------ 
#
           DO q1 
           DO q 
#
              GET DTqqpi(q,q1,p,i) # + 
              GET Dpq_b(q1,q) 
#
              t1pi(p,i) = DTqqpi(q,q1,p,i)*Dpq_b(q1,q)
              t1pi(p,i) *= 2.0 
              tpi(p,i) += t1pi(p,i) 
#
           ENDDO q 
           ENDDO q1 
#
           etemp = tpi(p,i)*Uxaa(p,i) 
           hessxy += etemp 
#
      ENDPARDO p, i 
#
#     Contributions from Uxqj. 
#     ----------------------- 
#
      PARDO q, j 
#
           GET Uxbb(q,j) 
           tqj(q,j) = 0.0 
#
#          beta/beta contribution. 
#          ----------------------- 
#
           DO q1 
           DO q2 
#
              GET DTqqqj(q2,q1,q,j) # + 
              GET DTqqqj(q,q1,q2,j) # - 
              GET Dpq_b(q1,q2) 
#
              tqqqj(q2,q1,q,j)  = DTqqqj(q2,q1,q,j) 
              t1qqqj(q2,q1,q,j) = DTqqqj(q,q1,q2,j) 
              tqqqj(q2,q1,q,j) -= t1qqqj(q2,q1,q,j)
#
              t1qj(q,j) = tqqqj(q2,q1,q,j)*Dpq_b(q1,q2)
              t1qj(q,j) *= 2.0 
              tqj(q,j) += t1qj(q,j) 
#
           ENDDO q2 
           ENDDO q1 
#
#          alpha/beta contribution. 
#          ------------------------ 
#
           DO p1 
           DO p 
#
              GET DTppqj(p,p1,q,j) # + 
              GET Dpq_a(p1,p) 
#
              t1qj(q,j) = DTppqj(p,p1,q,j)*Dpq_a(p1,p)
              t1qj(q,j) *= 2.0 
              tqj(q,j) += t1qj(q,j) 
#
           ENDDO p 
           ENDDO p1 
#
           etemp = tqj(q,j)*Uxbb(q,j) 
           hessxy += etemp 
#
      ENDPARDO q, j 
#
#     Term 14 Finished. 
#     ----------------- 
#
      ENDPROC TERM14   
#     -------------- 
#
# ------------------------------------------------------------
#
# The terms linear in the two-electron integrals are computed
# in the procedure. These are terms 15 of Eq.(4). 
#
# ------------------------------------------------------------
#
      PROC TERM15   
#     ----------- 
#
#     Term 15.
#     --------
#
#     U*U -> alpha/alpha.
#     -------------------
#
#     (p,p1) --> (i,i1) 
#     ----------------- 
#
      PARDO i, i1
#
           tpp(i,i1) = 0.0
#
#          (p2,p3) --> (i2,i3) 
#          ------------------- 
#
           DO i2
           DO i3
#
              GET          VSpipi(i,i1,i2,i3)
              GET          Dpq_a(i2,i3)
#
              t1pp(i,i1) = VSpipi(i,i1,i2,i3)*Dpq_a(i2,i3)
              tpp(i,i1) += t1pp(i,i1)
#
           ENDDO i3
           ENDDO i2
#
#          (p2,p3) --> (i2,a3) 
#          ------------------- 
#
           DO i2
           DO a3
#
              GET          VSpipi(i1,i,a3,i2) 
              GET          Dpq_a(i2,a3)
#
              t1pp(i,i1) = VSpipi(i1,i,a3,i2)*Dpq_a(i2,a3)
              tpp(i,i1) += t1pp(i,i1)
#
           ENDDO a3
           ENDDO i2
#
#          (p2,p3) --> (a2,i3) 
#          ------------------- 
#
           DO a2
           DO i3
#
              GET          VSpipi(i,i1,a2,i3)
              GET          Dpq_a(a2,i3)
#
              t1pp(i,i1) = VSpipi(i,i1,a2,i3)*Dpq_a(a2,i3)
              tpp(i,i1) += t1pp(i,i1)
#
           ENDDO i3
           ENDDO a2
#
#          (p2,p3) --> (a2,a3) 
#          ------------------- 
#
           DO a2
           DO a3
#
              GET                  Vaaii(a2,a3,i,i1) # VSpppp(i,i1,a2,a3)
              GET                  Viaai(i,a3,a2,i1)  
              GET                  Dpq_a(a2,a3)
#
              tiiaa(i,i1,a2,a3)  = Vaaii(a2,a3,i,i1) 
              t1iiaa(i,i1,a2,a3) = Viaai(i,a3,a2,i1) 
              tiiaa(i,i1,a2,a3) -= t1iiaa(i,i1,a2,a3)  
#
              t1pp(i,i1)         = tiiaa(i,i1,a2,a3)*Dpq_a(a2,a3)
              tpp(i,i1)         += t1pp(i,i1)
#
           ENDDO a3
           ENDDO a2
#
#          (q,q1) --> (j,j1) 
#          ----------------- 
#
           DO j
           DO j1
#
              GET          Vpiqj(i,i1,j,j1)
              GET          Dpq_b(j,j1)
#
              t1pp(i,i1) = Vpiqj(i,i1,j,j1)*Dpq_b(j,j1)
              tpp(i,i1) += t1pp(i,i1)
#
           ENDDO j1
           ENDDO j
#
#          (q,q1) --> (j,b1) 
#          ----------------- 
#
           DO j
           DO b1
#
              GET          Vpiqj(i1,i,b1,j) # Vppqq(i,i1,j,b1)
              GET          Dpq_b(j,b1)
#
              t1pp(i,i1) = Vpiqj(i1,i,b1,j)*Dpq_b(j,b1)
              tpp(i,i1) += t1pp(i,i1)
#
           ENDDO b1
           ENDDO j
#
#          (q,q1) --> (b,j1) 
#          ----------------- 
#
           DO b
           DO j1
#
              GET          Vpiqj(i,i1,b,j1)
              GET          Dpq_b(b,j1)
#
              t1pp(i,i1) = Vpiqj(i,i1,b,j1)*Dpq_b(b,j1)
              tpp(i,i1) += t1pp(i,i1)
#
           ENDDO j1
           ENDDO b
#
#          (q,q1) --> (b,b1) 
#          ----------------- 
#
           DO b
           DO b1  
#
              GET          Vbbii(b,b1,i,i1) # Vppqq(i,i1,b,b1)
              GET          Dpq_b(b,b1)
#
              t1pp(i,i1) = Vbbii(b,b1,i,i1)*Dpq_b(b,b1)
              tpp(i,i1) += t1pp(i,i1)
#
           ENDDO b1
           ENDDO b
#
           t1pp(i,i1) = 0.0 
#
           DO i2 
#
              GET           Uxaa(i,i2)
              GET           Uyaa(i1,i2)
#
              t2pp(i,i1)  = Uxaa(i,i2)*Uyaa(i1,i2)
              t1pp(i,i1) += t2pp(i,i1) 
#
           ENDDO i2  
#
           etemp = tpp(i,i1)*t1pp(i,i1) 
           execute print_scalar etemp 
           hessxy += etemp
#
      ENDPARDO i, i1
#
# ---------------------------------------------------------------------------
#
#     (p,p1) --> (i,a1) 
#     ----------------- 
#
      PARDO i, a1
#
           tpp(i,a1) = 0.0
#
#          (p2,p3) --> (i2,i3) 
#          ------------------- 
#
           DO i2
           DO i3
#
              GET          VSpipi(a1,i,i3,i2) # VSpppp(i,a1,i2,i3)
              GET          Dpq_a(i2,i3)
#
              t1pp(i,a1) = VSpipi(a1,i,i3,i2)*Dpq_a(i2,i3)
              tpp(i,a1) += t1pp(i,a1)
#
           ENDDO i3
           ENDDO i2
#
#          (p2,p3) --> (a2,i3) 
#          ------------------- 
#
           DO a2
           DO i3
#
              GET                   Viaai(i,a1,a2,i3)
              GET                   Vaaii(a2,a1,i,i3)
              GET                   Dpq_a(a2,i3)
#
              tiaai(i,a1,a2,i3)   = Viaai(i,a1,a2,i3) 
              t1iaai(i,a1,a2,i3)  = Vaaii(a2,a1,i,i3) 
              tiaai(i,a1,a2,i3)  -= t1iaai(i,a1,a2,i3)  
#
              t1pp(i,a1)          = tiaai(i,a1,a2,i3)*Dpq_a(a2,i3)
              tpp(i,a1)          += t1pp(i,a1)
#
           ENDDO i3
           ENDDO a2
#
#          (p2,p3) --> (i2,a3) 
#          ------------------- 
#
           DO i2
           DO a3
#
              GET          VSpipi(a1,i,a3,i2)
              GET          Dpq_a(i2,a3)
#
              t1pp(i,a1) = VSpipi(a1,i,a3,i2)*Dpq_a(i2,a3)
              tpp(i,a1) += t1pp(i,a1)
#
           ENDDO a3
           ENDDO i2
#
#          (p2,p3) --> (a2,a3) 
#          ------------------- 
#
           DO a2
           DO a3
#
              GET          VSaaai(a3,a2,a1,i) # (i,a1,a2,a3)
              GET          Dpq_a(a2,a3)
#
              t1pp(i,a1) = VSaaai(a3,a2,a1,i)*Dpq_a(a2,a3)
              tpp(i,a1) += t1pp(i,a1)
#
           ENDDO a3
           ENDDO a2
#
#          (q,q1) --> (j,j1) 
#          ----------------- 
#
           DO j
           DO j1
#
              GET          Vpiqj(a1,i,j1,j)
              GET          Dpq_b(j,j1)
#
              t1pp(i,a1) = Vpiqj(a1,i,j1,j)*Dpq_b(j,j1)
              tpp(i,a1) += t1pp(i,a1)
#
           ENDDO j1
           ENDDO j
#
#          (q,q1) --> (j,b1) 
#          ----------------- 
#
           DO j
           DO b1
#
              GET          Vpiqj(a1,i,b1,j)
              GET          Dpq_b(j,b1)
#
              t1pp(i,a1) = Vpiqj(a1,i,b1,j)*Dpq_b(j,b1)
              tpp(i,a1) += t1pp(i,a1)
#
           ENDDO b1
           ENDDO j
#
#          (q,q1) --> (b,j1) 
#          ----------------- 
#
           DO b
           DO j1
#
              GET          Viabj(i,a1,b,j1)
              GET          Dpq_b(b,j1)
#
              t1pp(i,a1) = Viabj(i,a1,b,j1)*Dpq_b(b,j1)
              tpp(i,a1) += t1pp(i,a1)
#
           ENDDO j1
           ENDDO b
#
#          (q,q1) --> (b,b1) 
#          ----------------- 
#
           DO b
           DO b1
#
              GET          Vbbai(b1,b,a1,i) # (i,a1,b,b1)
              GET          Dpq_b(b,b1)
#
              t1pp(i,a1) = Vbbai(b1,b,a1,i)*Dpq_b(b,b1)
              tpp(i,a1) += t1pp(i,a1)
#
           ENDDO b1
           ENDDO b
#
           t1pp(a1,i) = 0.0 
#
           DO i1 
#
              GET           Uxaa(i,i1)
              GET           Uyaa(a1,i1)
#
              t2pp(a1,i)  = Uyaa(a1,i1)*Uxaa(i,i1)
              t1pp(a1,i) += t2pp(a1,i) 
#
           ENDDO i1  
#
           etemp   = t1pp(a1,i)*tpp(i,a1)
           execute print_scalar etemp 
           hessxy += etemp
#
      ENDPARDO i, a1
#
# ---------------------------------------------------------------------------
#
#     (p,p1) --> (a,i1) 
#     ----------------- 
#
      PARDO a, i1
#
           tpp(a,i1) = 0.0
#
#          (p2,p3) --> (i2,i3) 
#          ------------------- 
#
           DO i2
           DO i3
#
              GET          VSpipi(a,i1,i2,i3)
              GET          Dpq_a(i2,i3)
#
              t1pp(a,i1) = VSpipi(a,i1,i2,i3)*Dpq_a(i2,i3)
              tpp(a,i1) += t1pp(a,i1)
#
           ENDDO i3
           ENDDO i2
#
#          (p2,p3) --> (a2,i3) 
#          ------------------- 
#
           DO a2
           DO i3
#
              GET          VSpipi(a,i1,a2,i3)
              GET          Dpq_a(a2,i3)
#
              t1pp(a,i1) = VSpipi(a,i1,a2,i3)*Dpq_a(a2,i3)
              tpp(a,i1) += t1pp(a,i1)
#
           ENDDO i3
           ENDDO a2
#
#          (p2,p3) --> (i2,a3) 
#          ------------------- 
#
           DO i2
           DO a3
#
              GET                  Viaai(i1,a,a3,i2) # VSpppp(a,i1,i2,a3)
              GET                  Vaaii(a,a3,i2,i1) 
              GET                  Dpq_a(i2,a3)
#
              taiia(a,i1,i2,a3)  = Viaai(i1,a,a3,i2) 
              t1aiia(a,i1,i2,a3) = Vaaii(a,a3,i2,i1)
              taiia(a,i1,i2,a3) -= t1aiia(a,i1,i2,a3)  
#             
              t1pp(a,i1)         = taiia(a,i1,i2,a3)*Dpq_a(i2,a3)
              tpp(a,i1)         += t1pp(a,i1)
#
           ENDDO a3
           ENDDO i2
#
#          (p2,p3) --> (a2,a3) 
#          ------------------- 
#
           DO a2
           DO a3
#
              GET          VSaaai(a2,a3,a,i1) # (a,i1,a2,a3)
              GET          Dpq_a(a2,a3)
#
              t1pp(a,i1) = VSaaai(a2,a3,a,i1)*Dpq_a(a2,a3)
              tpp(a,i1) += t1pp(a,i1)
#
           ENDDO a3
           ENDDO a2
#
#          (q,q1) --> (j,j1) 
#          ----------------- 
#
           DO j
           DO j1
#
              GET          Vpiqj(a,i1,j,j1)
              GET          Dpq_b(j,j1)
#
              t1pp(a,i1) = Vpiqj(a,i1,j,j1)*Dpq_b(j,j1)
              tpp(a,i1) += t1pp(a,i1)
#
           ENDDO j1
           ENDDO j
#
#          (q,q1) --> (b,j1) 
#          ----------------- 
#
           DO b
           DO j1
#
              GET          Vpiqj(a,i1,b,j1)
              GET          Dpq_b(b,j1)
#
              t1pp(a,i1) = Vpiqj(a,i1,b,j1)*Dpq_b(b,j1)
              tpp(a,i1) += t1pp(a,i1)
#
           ENDDO j1
           ENDDO b
#
#          (q,q1) --> (j,b1) 
#          ----------------- 
#
           DO j
           DO b1
#
              GET          Viabj(i1,a,b1,j) # Vppqq(a,i1,j,b1)
              GET          Dpq_b(j,b1)
#
              t1pp(a,i1) = Viabj(i1,a,b1,j)*Dpq_b(j,b1)
              tpp(a,i1) += t1pp(a,i1)
#
           ENDDO b1
           ENDDO j
#
#          (q,q1) --> (b,b1) 
#          ----------------- 
#
           DO b
           DO b1
#
              GET          Vbbai(b,b1,a,i1) # (a,i1,b,b1)
              GET          Dpq_b(b,b1)
#
              t1pp(a,i1) = Vbbai(b,b1,a,i1)*Dpq_b(b,b1)
              tpp(a,i1) += t1pp(a,i1)
#
           ENDDO b1
           ENDDO b
#
           t1pp(a,i1) = 0.0 
#
           DO i
#
              GET           Uxaa(a,i)
              GET           Uyaa(i1,i)
#
              t2pp(a,i1)  = Uxaa(a,i)*Uyaa(i1,i)
              t1pp(a,i1) += t2pp(a,i1)  
#
           ENDDO i
#
           etemp   = t1pp(a,i1)*tpp(a,i1) 
           execute print_scalar etemp 
           hessxy += etemp
#
      ENDPARDO a, i1
#
# ---------------------------------------------------------------------------
#
#     (p,p1) --> (a,a1) 
#     ----------------- 
#
      PARDO a, a1
#
           tpp(a,a1) = 0.0
#
#          (p2,p3) --> (i2,i3) 
#          ------------------- 
#
           DO i2
           DO i3
#
              GET                  Vaaii(a,a1,i2,i3) # VSpppp(a,a1,i2,i3)
              GET                  Viaai(i2,a1,a,i3) 
              GET                  Dpq_a(i2,i3)
#
              taaii(a,a1,i2,i3)  = Vaaii(a,a1,i2,i3) 
              t1aaii(a,a1,i2,i3) = Viaai(i2,a1,a,i3) 
              taaii(a,a1,i2,i3) -= t1aaii(a,a1,i2,i3) 
# 
              t1pp(a,a1)         = taaii(a,a1,i2,i3)*Dpq_a(i2,i3)
              tpp(a,a1)         += t1pp(a,a1)
#
           ENDDO i3
           ENDDO i2
#
#          (p2,p3) --> (a2,i3) 
#          ------------------- 
#
           DO a2
           DO i3
#
              GET          VSaaai(a,a1,a2,i3)
              GET          Dpq_a(a2,i3)
#
              t1pp(a,a1) = VSaaai(a,a1,a2,i3)*Dpq_a(a2,i3)
              tpp(a,a1) += t1pp(a,a1)
#
           ENDDO i3
           ENDDO a2
#
#          (p2,p3) --> (i2,a3) 
#          ------------------- 
#
           DO i2
           DO a3
#
              GET          VSaaai(a1,a,a3,i2) # (a,a1,i2,a3)
              GET          Dpq_a(i2,a3)
#
              t1pp(a,a1) = VSaaai(a1,a,a3,i2)*Dpq_a(i2,a3)
              tpp(a,a1) += t1pp(a,a1)
#
           ENDDO a3
           ENDDO i2
#
#          (p2,p3) --> (a2,a3) 
#          ------------------- 
#
           DO a2
           DO a3
#
              GET          VSaaaa(a,a1,a2,a3)
              GET          Dpq_a(a2,a3)
#
              t1pp(a,a1) = VSaaaa(a,a1,a2,a3)*Dpq_a(a2,a3)
              tpp(a,a1) += t1pp(a,a1)
#
           ENDDO a3
           ENDDO a2
#
#          (q,q1) --> (j,j1) 
#          ----------------- 
#
           DO j
           DO j1
#
              GET          Vaajj(a,a1,j,j1)
              GET          Dpq_b(j,j1)
#
              t1pp(a,a1) = Vaajj(a,a1,j,j1)*Dpq_b(j,j1)
              tpp(a,a1) += t1pp(a,a1)
#
           ENDDO j1
           ENDDO j
#
#          (q,q1) --> (b,j1) 
#          ----------------- 
#
           DO b
           DO j1
#
              GET          Vaabj(a,a1,b,j1)
              GET          Dpq_b(b,j1)
#
              t1pp(a,a1) = Vaabj(a,a1,b,j1)*Dpq_b(b,j1)
              tpp(a,a1) += t1pp(a,a1)
#
           ENDDO j1
           ENDDO b
#
#          (q,q1) --> (j,b1) 
#          ----------------- 
#
           DO j
           DO b1
#
              GET          Vaabj(a1,a,b1,j) # (a,a1,j,b1)
              GET          Dpq_b(j,b1)
#
              t1pp(a,a1) = Vaabj(a1,a,b1,j)*Dpq_b(j,b1)
              tpp(a,a1) += t1pp(a,a1)
#
           ENDDO b1
           ENDDO j
#
#          (q,q1) --> (b,b1) 
#          ----------------- 
#
           DO b
           DO b1  
#
              GET          Vaabb(a,a1,b,b1)
              GET          Dpq_b(b,b1)
#
              t1pp(a,a1) = Vaabb(a,a1,b,b1)*Dpq_b(b,b1)
              tpp(a,a1) += t1pp(a,a1)
#
           ENDDO b1
           ENDDO b
#
           t1pp(a,a1) = 0.0 
#
           DO i
#
              GET           Uxaa(a,i)
              GET           Uyaa(a1,i)
#
              t2pp(a,a1)  = Uxaa(a,i)*Uyaa(a1,i)
              t1pp(a,a1) += t2pp(a,a1)  
#
           ENDDO i
# 
           etemp   = tpp(a,a1)*t1pp(a,a1)  
           hessxy += etemp
#
      ENDPARDO a, a1
#
#     U*U -> beta/beta.
#     -------------------
#
#     (q,q1) --> (j,j1) 
#     ----------------- 
#
      PARDO j, j1
#
           tqq(j,j1) = 0.0
#
#          (q2,q3) --> (j2,j3) 
#          ------------------- 
#
           DO j2
           DO j3
#
              GET          VSqjqj(j,j1,j2,j3)
              GET          Dpq_b(j2,j3)
#
              t1qq(j,j1) = VSqjqj(j,j1,j2,j3)*Dpq_b(j2,j3)
              tqq(j,j1) += t1qq(j,j1)
#
           ENDDO j3
           ENDDO j2
#
#          (q2,q3) --> (j2,b3) 
#          ------------------- 
#
           DO j2
           DO b3
#
              GET          VSqjqj(j1,j,b3,j2) # VSqqqq(j,j1,j2,b3)
              GET          Dpq_b(j2,b3)
#
              t1qq(j,j1) = VSqjqj(j1,j,b3,j2)*Dpq_b(j2,b3)
              tqq(j,j1) += t1qq(j,j1)
#
           ENDDO b3
           ENDDO j2
#
#          (q2,q3) --> (b2,j3) 
#          ------------------- 
#
           DO b2
           DO j3
#
              GET          VSqjqj(j,j1,b2,j3)
              GET          Dpq_b(b2,j3)
#
              t1qq(j,j1) = VSqjqj(j,j1,b2,j3)*Dpq_b(b2,j3)
              tqq(j,j1) += t1qq(j,j1)
#
           ENDDO j3
           ENDDO b2
#
#          (q2,q3) --> (b2,b3) 
#          ------------------- 
#
           DO b2
           DO b3
#
              GET                  Vbbjj(b2,b3,j,j1) # VSqqqq(j,j1,b2,b3)
              GET                  Vjbbj(j,b3,b2,j1)  
              GET                  Dpq_b(b2,b3)
#
              tjjbb(j,j1,b2,b3)  = Vbbjj(b2,b3,j,j1) 
              t1jjbb(j,j1,b2,b3) = Vjbbj(j,b3,b2,j1) 
              tjjbb(j,j1,b2,b3) -= t1jjbb(j,j1,b2,b3)  
#
              t1qq(j,j1)         = tjjbb(j,j1,b2,b3)*Dpq_b(b2,b3)
              tqq(j,j1)         += t1qq(j,j1)
#
           ENDDO b3
           ENDDO b2
#
#          (p,p1) --> (i,i1) 
#          ----------------- 
#
           DO i
           DO i1
#
              GET          Vpiqj(i,i1,j,j1)
              GET          Dpq_a(i,i1)
#
              t1qq(j,j1) = Vpiqj(i,i1,j,j1)*Dpq_a(i,i1)
              tqq(j,j1) += t1qq(j,j1)
#
           ENDDO i1
           ENDDO i
#
#          (p,p1) --> (i,a1) 
#          ----------------- 
#
           DO i
           DO a1
#
              GET          Vpiqj(a1,i,j1,j) # Vppqq(j,j1,i,a1)
              GET          Dpq_a(i,a1)
#
              t1qq(j,j1) = Vpiqj(a1,i,j1,j)*Dpq_a(i,a1)
              tqq(j,j1) += t1qq(j,j1)
#
           ENDDO a1
           ENDDO i
#
#          (p,p1) --> (a,i1) 
#          ----------------- 
#
           DO a
           DO i1
#
              GET          Vpiqj(a,i1,j,j1)
              GET          Dpq_a(a,i1)
#
              t1qq(j,j1) = Vpiqj(a,i1,j,j1)*Dpq_a(a,i1)
              tqq(j,j1) += t1qq(j,j1)
#
           ENDDO i1
           ENDDO a
#
#          (p,p1) --> (a,a1) 
#          ----------------- 
#
           DO a
           DO a1  
#
              GET          Vaajj(a,a1,j,j1) # Vppqq(j,j1,a,a1)
              GET          Dpq_a(a,a1)
#
              t1qq(j,j1) = Vaajj(a,a1,j,j1)*Dpq_a(a,a1)
              tqq(j,j1) += t1qq(j,j1)
#
           ENDDO a1
           ENDDO a
#
           t1qq(j,j1) = 0.0 
#
           DO j2 
#
              GET           Uxbb(j,j2)
              GET           Uybb(j1,j2)
#
              t2qq(j,j1)  = Uxbb(j,j2)*Uybb(j1,j2)
              t1qq(j,j1) += t2qq(j,j1)  
#
           ENDDO j2  
#
           etemp   = tqq(j,j1)*t1qq(j,j1)
           hessxy += etemp
#
      ENDPARDO j, j1
#
# ---------------------------------------------------------------------------
#
#     (q,q1) --> (j,b1) 
#     ----------------- 
#
      PARDO j, b1
#
           tqq(j,b1) = 0.0
#
#          (q2,q3) --> (j2,j3) 
#          ------------------- 
#
           DO j2
           DO j3
#
              GET          VSqjqj(b1,j,j3,j2) # VSqqqq(j,b1,j2,j3)
              GET          Dpq_b(j2,j3)
#
              t1qq(j,b1) = VSqjqj(b1,j,j3,j2)*Dpq_b(j2,j3)
              tqq(j,b1) += t1qq(j,b1)
#
           ENDDO j3
           ENDDO j2
#
#          (q2,q3) --> (b2,j3) 
#          ------------------- 
#
           DO b2
           DO j3
#
              GET                  Vjbbj(j,b1,b2,j3)
              GET                  Vbbjj(b2,b1,j,j3)
              GET                  Dpq_b(b2,j3)
#
              tjbbj(j,b1,b2,j3)  = Vjbbj(j,b1,b2,j3) 
              t1jbbj(j,b1,b2,j3) = Vbbjj(b2,b1,j,j3) 
              tjbbj(j,b1,b2,j3) -= t1jbbj(j,b1,b2,j3)  
#
              t1qq(j,b1)         = tjbbj(j,b1,b2,j3)*Dpq_b(b2,j3)
              tqq(j,b1)         += t1qq(j,b1)
#
           ENDDO j3
           ENDDO b2
#
#          (q2,q3) --> (j2,b3) 
#          ------------------- 
#
           DO j2
           DO b3
#
              GET          VSqjqj(b1,j,b3,j2)
              GET          Dpq_b(j2,b3)
#
              t1qq(j,b1) = VSqjqj(b1,j,b3,j2)*Dpq_b(j2,b3)
              tqq(j,b1) += t1qq(j,b1)
#
           ENDDO b3
           ENDDO j2
#
#          (q2,q3) --> (b2,b3) 
#          ------------------- 
#
           DO b2
           DO b3
#
              GET          VSbbbj(b3,b2,b1,j) # (j,b1,b2,b3)
              GET          Dpq_b(b2,b3)
#
              t1qq(j,b1) = VSbbbj(b3,b2,b1,j)*Dpq_b(b2,b3)
              tqq(j,b1) += t1qq(j,b1)
#
           ENDDO b3
           ENDDO b2
#
#          (p,p1) --> (i,i1) 
#          ----------------- 
#
           DO i
           DO i1
#
              GET          Vpiqj(i1,i,b1,j)
              GET          Dpq_a(i,i1)
#
              t1qq(j,b1) = Vpiqj(i1,i,b1,j)*Dpq_a(i,i1)
              tqq(j,b1) += t1qq(j,b1)
#
           ENDDO i1
           ENDDO i
#
#          (p,p1) --> (i,a1) 
#          ----------------- 
#
           DO i
           DO a1
#
              GET          Vpiqj(a1,i,b1,j)
              GET          Dpq_a(i,a1)
#
              t1qq(j,b1) = Vpiqj(a1,i,b1,j)*Dpq_a(i,a1)
              tqq(j,b1) += t1qq(j,b1)
#
           ENDDO a1
           ENDDO i
#
#          (p,p1) --> (a,i1) 
#          ----------------- 
#
           DO a
           DO i1
#
              GET          Viabj(i1,a,b1,j) # (j,b1,a,i1)
              GET          Dpq_a(a,i1)
#
              t1qq(j,b1) = Viabj(i1,a,b1,j)*Dpq_a(a,i1)
              tqq(j,b1) += t1qq(j,b1)
#
           ENDDO i1
           ENDDO a
#
#          (p,p1) --> (a,a1) 
#          ----------------- 
#
           DO a
           DO a1
#
              GET          Vaabj(a1,a,b1,j) # (j,b1,a,a1)
              GET          Dpq_a(a,a1)
#
              t1qq(j,b1) = Vaabj(a1,a,b1,j)*Dpq_a(a,a1)
              tqq(j,b1) += t1qq(j,b1)
#
           ENDDO a1
           ENDDO a
#
           DO j1 
#
              GET           Uxbb(j,j1)
              GET           Uybb(b1,j1)
#
              t1qq(b1,j1) = tqq(j,b1)*Uxbb(j,j1)
              etemp       = t1qq(b1,j1)*Uybb(b1,j1)
              hessxy     += etemp
#
           ENDDO j1  
#
      ENDPARDO j, b1
#
# ---------------------------------------------------------------------------
#
#     (q,q1) --> (b,j1) 
#     ----------------- 
#
      PARDO b, j1
#
           tqq(b,j1) = 0.0
#
#          (q2,q3) --> (j2,j3) 
#          ------------------- 
#
           DO j2
           DO j3
#
              GET          VSqjqj(b,j1,j2,j3)
              GET          Dpq_b(j2,j3)
#
              t1qq(b,j1) = VSqjqj(b,j1,j2,j3)*Dpq_b(j2,j3)
              tqq(b,j1) += t1qq(b,j1)
#
           ENDDO j3
           ENDDO j2
#
#          (q2,q3) --> (b2,j3) 
#          ------------------- 
#
           DO b2
           DO j3
#
              GET          VSqjqj(b,j1,b2,j3)
              GET          Dpq_b(b2,j3)
#
              t1qq(b,j1) = VSqjqj(b,j1,b2,j3)*Dpq_b(b2,j3)
              tqq(b,j1) += t1qq(b,j1)
#
           ENDDO j3
           ENDDO b2
#
#          (q2,q3) --> (j2,b3) 
#          ------------------- 
#
           DO j2
           DO b3
#
              GET                  Vjbbj(j1,b,b3,j2) # VSqqqq(b,j1,j2,b3)
              GET                  Vbbjj(b,b3,j2,j1) 
              GET                  Dpq_b(j2,b3)
#
              tbjjb(b,j1,j2,b3)  = Vjbbj(j1,b,b3,j2) 
              t1bjjb(b,j1,j2,b3) = Vbbjj(b,b3,j2,j1)
              tbjjb(b,j1,j2,b3) -= t1bjjb(b,j1,j2,b3)  
#              
              t1qq(b,j1)         = tbjjb(b,j1,j2,b3)*Dpq_b(j2,b3)
              tqq(b,j1)         += t1qq(b,j1)
#
           ENDDO b3
           ENDDO j2
#
#          (q2,q3) --> (b2,b3) 
#          ------------------- 
#
           DO b2
           DO b3
#
              GET          VSbbbj(b2,b3,b,j1) # (b,j1,b2,b3)
              GET          Dpq_b(b2,b3)
#
              t1qq(b,j1) = VSbbbj(b2,b3,b,j1)*Dpq_b(b2,b3)
              tqq(b,j1) += t1qq(b,j1)
#
           ENDDO b3
           ENDDO b2
#
#          (p,p1) --> (i,i1) 
#          ----------------- 
#
           DO i
           DO i1
#
              GET          Vpiqj(i,i1,b,j1)
              GET          Dpq_a(i,i1)
#
              t1qq(b,j1) = Vpiqj(i,i1,b,j1)*Dpq_a(i,i1)
              tqq(b,j1) += t1qq(b,j1)
#
           ENDDO i1
           ENDDO i
#
#          (p,p1) --> (a,i1) 
#          ----------------- 
#
           DO a
           DO i1
#
              GET          Vpiqj(a,i1,b,j1)
              GET          Dpq_a(a,i1)
#
              t1qq(b,j1) = Vpiqj(a,i1,b,j1)*Dpq_a(a,i1)
              tqq(b,j1) += t1qq(b,j1)
#
           ENDDO i1
           ENDDO a
#
#          (p,p1) --> (i,a1) 
#          ----------------- 
#
           DO i
           DO a1
#
              GET          Viabj(i,a1,b,j1) # Vppqq(b,j1,i,a1)
              GET          Dpq_a(i,a1)
#
              t1qq(b,j1) = Viabj(i,a1,b,j1)*Dpq_a(i,a1)
              tqq(b,j1) += t1qq(b,j1)
#
           ENDDO a1
           ENDDO i
#
#          (p,p1) --> (a,a1) 
#          ----------------- 
#
           DO a
           DO a1
#
              GET          Vaabj(a,a1,b,j1) # (b,j1,a,a1)
              GET          Dpq_a(a,a1)
#
              t1qq(b,j1) = Vaabj(a,a1,b,j1)*Dpq_a(a,a1)
              tqq(b,j1) += t1qq(b,j1)
#
           ENDDO a1
           ENDDO a
#
           DO j
#
              GET          Uxbb(b,j)
              GET          Uybb(j1,j)
#
              t1qq(j1,j) = tqq(b,j1)*Uxbb(b,j)
              etemp      = t1qq(j1,j)*Uybb(j1,j)
              hessxy    += etemp
#
           ENDDO j
#
      ENDPARDO b, j1
#
# ---------------------------------------------------------------------------
#
#     (q,q1) --> (b,b1) 
#     ----------------- 
#
      PARDO b, b1
#
           tqq(b,b1) = 0.0
#
#          (q2,q3) --> (j2,j3) 
#          ------------------- 
#
           DO j2
           DO j3
#
              GET                  Vbbjj(b,b1,j2,j3) # VSqqqq(b,b1,j2,j3)
              GET                  Vjbbj(j2,b1,b,j3) 
              GET                  Dpq_b(j2,j3)
#
              tbbjj(b,b1,j2,j3)  = Vbbjj(b,b1,j2,j3) 
              t1bbjj(b,b1,j2,j3) = Vjbbj(j2,b1,b,j3) 
              tbbjj(b,b1,j2,j3) -= t1bbjj(b,b1,j2,j3) 
# 
              t1qq(b,b1)         = tbbjj(b,b1,j2,j3)*Dpq_b(j2,j3)
              tqq(b,b1)         += t1qq(b,b1)
#
           ENDDO j3
           ENDDO j2
#
#          (q2,q3) --> (b2,j3) 
#          ------------------- 
#
           DO b2
           DO j3
#
              GET          VSbbbj(b,b1,b2,j3)
              GET          Dpq_b(b2,j3)
#
              t1qq(b,b1) = VSbbbj(b,b1,b2,j3)*Dpq_b(b2,j3)
              tqq(b,b1) += t1qq(b,b1)
#
           ENDDO j3
           ENDDO b2
#
#          (q2,q3) --> (j2,b3) 
#          ------------------- 
#
           DO j2
           DO b3
#
              GET          VSbbbj(b1,b,b3,j2) # (b,b1,j2,b3)
              GET          Dpq_b(j2,b3)
#
              t1qq(b,b1) = VSbbbj(b1,b,b3,j2)*Dpq_b(j2,b3)
              tqq(b,b1) += t1qq(b,b1)
#
           ENDDO b3
           ENDDO j2
#
#          (q2,q3) --> (b2,b3) 
#          ------------------- 
#
           DO b2
           DO b3
#
              GET          VSbbbb(b,b1,b2,b3)
              GET          Dpq_b(b2,b3)
#
              t1qq(b,b1) = VSbbbb(b,b1,b2,b3)*Dpq_b(b2,b3)
              tqq(b,b1) += t1qq(b,b1)
#
           ENDDO b3
           ENDDO b2
#
#          (p,p1) --> (i,i1) 
#          ----------------- 
#
           DO i
           DO i1
#
              GET          Vbbii(b,b1,i,i1)
              GET          Dpq_a(i,i1)
#
              t1qq(b,b1) = Vbbii(b,b1,i,i1)*Dpq_a(i,i1)
              tqq(b,b1) += t1qq(b,b1)
#
           ENDDO i1
           ENDDO i
#
#          (p,p1) --> (a,i1) 
#          ----------------- 
#
           DO a
           DO i1
#
              GET          Vbbai(b,b1,a,i1)
              GET          Dpq_a(a,i1)
#
              t1qq(b,b1) = Vbbai(b,b1,a,i1)*Dpq_a(a,i1)
              tqq(b,b1) += t1qq(b,b1)
#
           ENDDO i1
           ENDDO a
#
#          (p,p1) --> (i,a1) 
#          ----------------- 
#
           DO i
           DO a1
#
              GET          Vbbai(b1,b,a1,i) # (b,b1,i,a1)
              GET          Dpq_a(i,a1)
#
              t1qq(b,b1) = Vbbai(b1,b,a1,i)*Dpq_a(i,a1)
              tqq(b,b1) += t1qq(b,b1)
#
           ENDDO a1
           ENDDO i
#
#          (p,p1) --> (a,a1) 
#          ----------------- 
#
           DO a
           DO a1  
#
              GET          Vaabb(a,a1,b,b1)
              GET          Dpq_a(a,a1)
#
              t1qq(b,b1) = Vaabb(a,a1,b,b1)*Dpq_a(a,a1)
              tqq(b,b1) += t1qq(b,b1)
#
           ENDDO a1
           ENDDO a
#
           DO j
#
              GET          Uxbb(b,j)
              GET          Uybb(b1,j)
#
              t1qq(b1,j) = tqq(b,b1)*Uxbb(b,j)
              etemp      = t1qq(b1,j)*Uybb(b1,j)
              hessxy    += etemp
#
           ENDDO j
#
      ENDPARDO b, b1
#
# ---------------------------------------------------------------------------
#
      ENDPROC TERM15   
#     --------------  
#
# ------------------------------------------------------------
#
# ----------------------------------------------------------------------
#
      PROC T2PERVPERT
#     ---------------
#
#     Alpha/alpha contribution first.
#     -------------------------------
#
      PARDO a, a1, i, i1
#
            GET                      VXSFullaa(a,i,a1,i1)
            GET                      T2yFullaa(a,i,a1,i1)
#
            etemp                  = VXSFullaa(a,i,a1,i1)*T2yFullaa(a,i,a1,i1)
            etemp                 *= 0.25
            hessxy                += etemp
#
      ENDPARDO a, a1, i, i1
#
#     Beta/beta contribution.
#     -----------------------
#
      PARDO b, b1, j, j1
#
            GET                      VXSFullbb(b,j,b1,j1)
            GET                      T2yFullbb(b,j,b1,j1)
#
            etemp                  = VXSFullbb(b,j,b1,j1)*T2yFullbb(b,j,b1,j1)
            etemp                 *= 0.25
            hessxy                += etemp
#
      ENDPARDO b, b1, j, j1
#
#     Alpha/beta contribution.
#     ------------------------
#
      PARDO a, b, i, j
#
            GET                      VXFullab(a,i,b,j)
            GET                      T2yFullab(a,i,b,j)
#
            etemp                  = VXFullab(a,i,b,j)*T2yFullab(a,i,b,j)
            hessxy                += etemp
#
      ENDPARDO a, b, i, j
#
      ENDPROC T2PERVPERT
#     ------------------
#
# ---------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
#
      PROC I_TRANS
#     ------------
#
      create Ixx_a 
      create Ixx_b 
      create Ihf 
      execute sip_barrier 
#
#     1. Iij_a
#     --------
#
      PARDO i, i1
#
            GET Ipq_a(i,i1)
#
            DO mu
#
               Txi(mu,i1) = ca(mu,i)*Ipq_a(i,i1)
#
               DO nu
#
                  Txx(mu,nu)        = Txi(mu,i1)*ca(nu,i1)
                  PUT Ixx_a(mu,nu) += Txx(mu,nu)
#
               ENDDO nu
#
            ENDDO mu
#
      ENDPARDO i, i1
#
#     2. Iij_b
#     --------
#
      PARDO j, j1
#
            GET Ipq_b(j,j1)
#
            DO mu
#
               Txj(mu,j1) = cb(mu,j)*Ipq_b(j,j1)
#
               DO nu
#
                  Txx(mu,nu)        = Txj(mu,j1)*cb(nu,j1)
                  PUT Ixx_b(mu,nu) += Txx(mu,nu)
#
               ENDDO nu
#
            ENDDO mu
#
      ENDPARDO j, j1
#
#     3. Iab_a
#     --------
#
      PARDO a, a1
#
            GET Ipq_a(a,a1)
#
            DO mu
#
               Txa(mu,a1) = ca(mu,a)*Ipq_a(a,a1)
#
               DO nu
#
                  Txx(mu,nu)        = Txa(mu,a1)*ca(nu,a1)
                  PUT Ixx_a(mu,nu) += Txx(mu,nu)
#
               ENDDO nu
#
            ENDDO mu
#
      ENDPARDO a, a1
#
#     4. Iab_b
#     --------
#
      PARDO b, b1
#
            GET Ipq_b(b,b1)
#
            DO mu
#
               Txb(mu,b1) = cb(mu,b)*Ipq_b(b,b1)
#
               DO nu
#
                  Txx(mu,nu)        = Txb(mu,b1)*cb(nu,b1)
                  PUT Ixx_b(mu,nu) += Txx(mu,nu)
#
               ENDDO nu
#
            ENDDO mu
#
      ENDPARDO b, b1
#
#     5. Iai_a
#     --------
#
      PARDO a, i
#
#           GET Ipq_a(a,i)
            GET Ipq_a(i,a)
#
            DO mu
#
               Txi(mu,i)  = ca(mu,a)*Ipq_a(i,a)
#              T1xi(mu,i) = ca(mu,a)*Ipq_a(i,a)
#
               DO nu
#
                  Txx(mu,nu)        = Txi(mu,i)*ca(nu,i)
                  PUT Ixx_a(mu,nu) += Txx(mu,nu)
#
                  T1xx(nu,mu)       = Txx(mu,nu) 
                  PUT Ixx_a(nu,mu) += T1xx(nu,mu)
#
#                 Txx(mu,nu)        = T1xi(mu,i)*ca(nu,i)
#                 PUT Ixx_a(mu,nu) += Txx(mu,nu)
#
               ENDDO nu
#
            ENDDO mu
#
      ENDPARDO a, i
#
#     6. Iai_b
#     --------
#
      PARDO b, j
#
#           GET Ipq_b(b,j)
            GET Ipq_b(j,b)
#
            DO mu
#
               Txj(mu,j)  = cb(mu,b)*Ipq_b(j,b)
#              T1xj(mu,j) = cb(mu,b)*Ipq_b(j,b)
#
               DO nu
#
                  Txx(mu,nu)        = Txj(mu,j)*cb(nu,j)
                  PUT Ixx_b(mu,nu) += Txx(mu,nu)
#
                  T1xx(nu,mu)       = Txx(mu,nu) 
                  PUT Ixx_b(nu,mu) += T1xx(nu,mu)
#
#                 Txx(mu,nu)        = T1xj(mu,j)*cb(nu,j)
#                 PUT Ixx_b(mu,nu) += Txx(mu,nu)
#
               ENDDO nu
#
            ENDDO mu
#
      ENDPARDO b, j
#
      ENDPROC I_TRANS
#     ---------------
#
# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
#
      PROC D_TRANS
#     ------------
#
      create Dxx_a 
      create Dxx_b 
      execute sip_barrier 
#
#     1. Dij_a
#     --------
#
      PARDO i, i1
#
            GET Dij_a(i,i1)
#
            DO mu
#
               Txi(mu,i1) = ca(mu,i)*Dij_a(i,i1)
#
               DO nu
#
                  Txx(mu,nu)        = Txi(mu,i1)*ca(nu,i1)
                  PUT Dxx_a(mu,nu) += Txx(mu,nu)
#
               ENDDO nu
#
            ENDDO mu
#
      ENDPARDO i, i1
#
#     2. Dij_b
#     --------
#
      PARDO j, j1
#
            GET Dij_b(j,j1)
#
            DO mu
#
               Txj(mu,j1) = cb(mu,j)*Dij_b(j,j1)
#
               DO nu
#
                  Txx(mu,nu)        = Txj(mu,j1)*cb(nu,j1)
                  PUT Dxx_b(mu,nu) += Txx(mu,nu)
#
               ENDDO nu
#
            ENDDO mu
#
      ENDPARDO j, j1
#
#     3. Dab_a
#     --------
#
      PARDO a, a1
#
            GET Dab_a(a,a1)
#
            DO mu
#
               Txa(mu,a1) = ca(mu,a)*Dab_a(a,a1)
#
               DO nu
#
                  Txx(mu,nu)        = Txa(mu,a1)*ca(nu,a1)
                  PUT Dxx_a(mu,nu) += Txx(mu,nu)
#
               ENDDO nu
#
            ENDDO mu
#
      ENDPARDO a, a1
#
#     4. Dab_b
#     --------
#
      PARDO b, b1
#
            GET Dab_b(b,b1)
#
            DO mu
#
               Txb(mu,b1) = cb(mu,b)*Dab_b(b,b1)
#
               DO nu
#
                  Txx(mu,nu)        = Txb(mu,b1)*cb(nu,b1)
                  PUT Dxx_b(mu,nu) += Txx(mu,nu)
#
               ENDDO nu
#
            ENDDO mu
#
      ENDPARDO b, b1
#
#     5. Dai_a
#     --------
#
      PARDO a, i
#
            GET Dai_a(a,i)
#
            DO mu
#
               Txi(mu,i) = ca(mu,a)*Dai_a(a,i)
#
               DO nu
#
                  Txx(mu,nu)        = Txi(mu,i)*ca(nu,i)
                  PUT Dxx_a(mu,nu) += Txx(mu,nu)
#
                  T1xx(nu,mu)       = Txx(mu,nu)
                  PUT Dxx_a(nu,mu) += T1xx(nu,mu) 
#
               ENDDO nu
#
            ENDDO mu
#
      ENDPARDO a, i
#
#     6. Dai_b
#     --------
#
      PARDO b, j
#
            GET Dai_b(b,j)
#
            DO mu
#
               Txj(mu,j) = cb(mu,b)*Dai_b(b,j)
#
               DO nu
#
                  Txx(mu,nu)        = Txj(mu,j)*cb(nu,j)
                  T1xx(nu,mu)       = Txx(mu,nu)
#
                  PUT Dxx_b(mu,nu) += Txx(mu,nu)
                  PUT Dxx_b(nu,mu) += T1xx(nu,mu) 
#
               ENDDO nu
#
            ENDDO mu
#
      ENDPARDO b, j
#
      ENDPROC D_TRANS
#     ---------------
#
# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
#
      PROC I_HF
#     --------
#
      create Ihfa 
      create Ihfb 
      execute sip_barrier 
#
      PARDO mu, nu, i
#
            Txi(nu,i) = 0.0
#
            DO i1
#
               T1xi(nu,i) = ca(nu,i1)*fock_a(i,i1)
               Txi(nu,i) -= T1xi(nu,i)
#
            ENDDO i1
#
            Txx(mu,nu)      = ca(mu,i)*Txi(nu,i)
            PUT Ihf(mu,nu) += Txx(mu,nu)
            PUT Ihfa(mu,nu) += Txx(mu,nu)
#
      ENDPARDO mu, nu, i
#
      PARDO mu, nu, j
#
            Txj(nu,j) = 0.0
#
            DO j1
#
               T1xj(nu,j) = cb(nu,j1)*fock_b(j,j1)
               Txj(nu,j) -= T1xj(nu,j)
#
            ENDDO j1
#
            Txx(mu,nu)      = cb(mu,j)*Txj(nu,j)
            PUT Ihf(mu,nu) += Txx(mu,nu)
            PUT Ihfb(mu,nu) += Txx(mu,nu)
#
      ENDPARDO mu, nu, j
#
      execute sip_barrier 
#
      ENDPROC I_HF
#     ------------
#
# ---------------------------------------------------------------------------------
#
      PROC HFDENS
#     -----------
#
      create Dhfa 
      create Dhfb 
      execute sip_barrier 
#
      PARDO mu, nu, i
#
            Txi(nu,i)        = ca(nu,i)
            Txx(mu,nu)       = ca(mu,i)*Txi(nu,i)
            PUT Dhfa(mu,nu) += Txx(mu,nu)
#
      ENDPARDO mu, nu, i
#
      PARDO mu, nu, j
#
            Txj(nu,j)        = cb(nu,j)
            Txx(mu,nu)       = cb(mu,j)*Txj(nu,j)
            PUT Dhfb(mu,nu) += Txx(mu,nu)
#
      ENDPARDO mu, nu, j
#
      ENDPROC HFDENS
#     --------------
#
# ---------------------------------------------------------------------------------- 
#
     PROC I11
#    --------
#
      PARDO a, i
#
            Tia(i,a) = 0.0
#
            DO i1
#
               IF i1 == i
#
               GET Dpq_a(a,i1)
#
               T1ia(i,a) = Dpq_a(a,i1)*fock_a(i1,i)
               Tia(i,a) -= T1ia(i,a)
#
               ENDIF # i1 == i
#
            ENDDO i1
#
            PUT Ipq_a(i,a) += Tia(i,a)
#
      ENDPARDO a, i 
#
      PARDO b, j
#
            Tjb(j,b) = 0.0
#
            DO j1
#
               IF j1 == j
#
                  GET Dpq_b(b,j1)
#
                  T1jb(j,b) = Dpq_b(b,j1)*fock_b(j1,j)
                  Tjb(j,b) -= T1jb(j,b)
#
               ENDIF # j1 == j
#
            ENDDO j1
#
            PUT Ipq_b(j,b) += Tjb(j,b)
#
      ENDPARDO b, j
#
# Calculate contribution to Iai_a
# -------------------------------
#
     PARDO a, i, i1, i2
#
           GET VSpipi(a,i2,i1,i) # +
           GET Dij_a(i1,i2)
#
           Tpppp(a,i,i1,i2)  = VSpipi(a,i2,i1,i)
           Tai(a,i)          = Tpppp(a,i,i1,i2)*Dij_a(i1,i2)
           Tai(a,i)         *= -1.0
           Tia(i,a)          = Tai(a,i) 
#          PUT Ipq_a(i,a)   += Tia(i,a)
#
     ENDPARDO a, i, i1, i2
#
     PARDO a, j, j1, i
#
           GET Vpiqj(a,i,j,j1) # -
           GET Dij_b(j,j1)
#
           Tai(a,i)         = Vpiqj(a,i,j,j1)*Dij_b(j,j1)
           Tia(i,a)         = Tai(a,i) 
#          PUT Ipq_a(i,a)  += Tia(i,a)
#
     ENDPARDO a, j, j1, i
#
     PARDO a, a1, a2, i
#
           GET VSaaai(a,a1,a2,i) # +
           GET Dab_a(a2,a1)
#
           Tpppp(a,i,a2,a1)  = VSaaai(a,a1,a2,i)
           Tai(a,i)          = Tpppp(a,i,a2,a1)*Dab_a(a2,a1)
           Tai(a,i)         *= -1.0
           Tia(i,a)         = Tai(a,i) 
#          PUT Ipq_a(i,a)  += Tia(i,a)
#
     ENDPARDO a, a1, a2, i
#
     PARDO a, b, b1, i
#
           GET Vbbai(b1,b,a,i) # -
           GET Dab_b(b1,b)
#
           Tai(a,i)         = Vbbai(b1,b,a,i)*Dab_b(b1,b)
           Tia(i,a)         = Tai(a,i) 
#          PUT Ipq_a(i,a)  += Tia(i,a)
#
     ENDPARDO a, b, b1, i
#
# Done contribution to Iai_a
# ---------------------------
#
# Calculate contribution to Iai_b
# -------------------------------
#
     PARDO b, j1, j2, j
#
           GET VSqjqj(b,j1,j2,j) # +
           GET Dij_b(j1,j2)
#
           Tqqqq(b,j,j1,j2)  = VSqjqj(b,j1,j2,j)
           Tbj(b,j)          = Tqqqq(b,j,j1,j2)*Dij_b(j1,j2)
           Tbj(b,j)         *= -1.0
           Tjb(j,b)          = Tbj(b,j) 
#          PUT Ipq_b(j,b)   += Tjb(j,b)
#
     ENDPARDO b, j1, j2, j
#
     PARDO b, i, i1, j
#
           GET Vpiqj(i1,i,b,j) # -
           GET Dij_a(i,i1)
#
           Tbj(b,j)         = Vpiqj(i1,i,b,j)*Dij_a(i,i1)
           Tjb(j,b)          = Tbj(b,j) 
#          PUT Ipq_b(j,b)   += Tjb(j,b)
#
     ENDPARDO b, i, i1, j
#
     PARDO b, b1, b2, j
#
           GET VSbbbj(b,b1,b2,j) # +
           GET Dab_b(b1,b2)
#
           Tqqqq(b,j,b1,b2)  = VSbbbj(b,b1,b2,j)
           Tbj(b,j)          = Tqqqq(b,j,b1,b2)*Dab_b(b1,b2)
           Tbj(b,j)         *= -1.0
           Tjb(j,b)          = Tbj(b,j) 
#          PUT Ipq_b(j,b)   += Tjb(j,b)
#
     ENDPARDO b, b1, b2, j
#
     PARDO b, a, a1, j
#
           GET Vaabj(a1,a,b,j)
           GET Dab_a(a,a1)
#
           Tbj(b,j)         = Vaabj(a1,a,b,j)*Dab_a(a,a1)
           Tjb(j,b)          = Tbj(b,j) 
#          PUT Ipq_b(j,b)   += Tjb(j,b)
#
     ENDPARDO b, a, a1, j
#
# Done contribution to Iai_b
# ---------------------------
#
# Compute contribution to Iij_a
# -----------------------------
#
#     Dab contribution
#     ----------------
#
      PARDO a, a1, i, i1
#
            GET Vaaii(a,a1,i,i1) # +
            GET Viaai(i,a1,a,i1) # -
            GET Vaaii(a,a1,i1,i) # +
            GET Viaai(i1,a1,a,i) #
            GET Dab_a(a,a1)
#
            Tpppp(i,i1,a,a1)  = Vaaii(a,a1,i,i1)
            T1pppp(i,i1,a,a1) = Viaai(i,a1,a,i1)
            T2pppp(i,i1,a,a1) = Vaaii(a,a1,i1,i)
            T3pppp(i,i1,a,a1) = Viaai(i1,a1,a,i)
#
            Tpppp(i,i1,a,a1) -= T1pppp(i,i1,a,a1)
            Tpppp(i,i1,a,a1) += T2pppp(i,i1,a,a1)
            Tpppp(i,i1,a,a1) -= T3pppp(i,i1,a,a1)
#
            Tii(i,i1)         = Tpppp(i,i1,a,a1)*Dab_a(a,a1)
            Tii(i,i1)        *= -0.5
            PUT Iij_a(i,i1)  += Tii(i,i1)
#
      ENDPARDO a, a1, i, i1
#
      PARDO b, b1, i, i1
#
            GET Vbbii(b,b1,i,i1) # +
            GET Vbbii(b,b1,i1,i) # +
            GET Dab_b(b,b1)
#
            Tppqq(i,i1,b,b1)  = Vbbii(b,b1,i,i1)
            T2ppqq(i,i1,b,b1) = Vbbii(b,b1,i1,i)
            Tppqq(i,i1,b,b1) += T2ppqq(i,i1,b,b1)
#
            Tii(i,i1)         = Tppqq(i,i1,b,b1)*Dab_b(b,b1)
            Tii(i,i1)        *= -0.5
            PUT Iij_a(i,i1)  += Tii(i,i1)
#
      ENDPARDO b, b1, i, i1
#
#     Dij contribution
#     ----------------
#
      PARDO i2, i3, i, i1
#
            GET VSpipi(i2,i3,i,i1) # +
            GET VSpipi(i2,i3,i1,i) # +
            GET Dij_a(i2,i3)
#
            Tpppp(i,i1,i2,i3)  = VSpipi(i2,i3,i,i1)
            T2pppp(i,i1,i2,i3) = VSpipi(i2,i3,i1,i)
            Tpppp(i,i1,i2,i3) += T2pppp(i,i1,i2,i3)
#
            Tii(i,i1)          = Tpppp(i,i1,i2,i3)*Dij_a(i2,i3)
            Tii(i,i1)         *= -0.5
            PUT Iij_a(i,i1)   += Tii(i,i1)
#
      ENDPARDO i2, i3, i, i1
#
      PARDO j, j1, i, i1
#
            GET Vpiqj(i,i1,j,j1) # +
            GET Vpiqj(i1,i,j,j1) # +
            GET Dij_b(j,j1)
#
            Tppqq(i,i1,j,j1)  = Vpiqj(i,i1,j,j1)
            T2ppqq(i,i1,j,j1) = Vpiqj(i1,i,j,j1)
            Tppqq(i,i1,j,j1) += T2ppqq(i,i1,j,j1)
#
            Tii(i,i1)         = Tppqq(i,i1,j,j1)*Dij_b(j,j1)
            Tii(i,i1)        *= -0.5
            PUT Iij_a(i,i1)  += Tii(i,i1)
#
      ENDPARDO j, j1, i, i1
#
# DONE Compute contribution to Iij_a
# -----------------------------------
#
# Compute contribution to Iij_b
# -----------------------------
#
#     Dab contribution
#     ----------------
#
      PARDO b, b1, j, j1
#
            GET Dab_b(b,b1)
            GET Vbbjj(b,b1,j,j1) # +
            GET Vjbbj(j,b1,b,j1) # -
            GET Vbbjj(b,b1,j1,j) # +
            GET Vjbbj(j1,b1,b,j) #
#
            Tqqqq(j,j1,b,b1)  = Vbbjj(b,b1,j,j1)
            T1qqqq(j,j1,b,b1) = Vjbbj(j,b1,b,j1)
            T2qqqq(j,j1,b,b1) = Vbbjj(b,b1,j1,j)
            T3qqqq(j,j1,b,b1) = Vjbbj(j1,b1,b,j)
#
            Tqqqq(j,j1,b,b1) -= T1qqqq(j,j1,b,b1)
            Tqqqq(j,j1,b,b1) += T2qqqq(j,j1,b,b1)
            Tqqqq(j,j1,b,b1) -= T3qqqq(j,j1,b,b1)
#
            Tjj(j,j1)         = Tqqqq(j,j1,b,b1)*Dab_b(b,b1)
            Tjj(j,j1)        *= -0.5
            PUT Iij_b(j,j1)  += Tjj(j,j1)
#
      ENDPARDO b, b1, j, j1
#
      PARDO a, a1, j, j1
#
            GET Dab_a(a,a1)
            GET Vaajj(a,a1,j,j1) # +
            GET Vaajj(a,a1,j1,j) # +
#
            Tqqpp(j,j1,a,a1)  = Vaajj(a,a1,j,j1)
            T2qqpp(j,j1,a,a1) = Vaajj(a,a1,j1,j)
            Tqqpp(j,j1,a,a1) += T2qqpp(j,j1,a,a1)
#
            Tjj(j,j1)         = Tqqpp(j,j1,a,a1)*Dab_a(a,a1)
            Tjj(j,j1)        *= -0.5
            PUT Iij_b(j,j1)  += Tjj(j,j1)
#
      ENDPARDO a, a1, j, j1
#
#     Dij contribution
#     ----------------
#
      PARDO j2, j3, j, j1
#
            GET Dij_b(j2,j3)
            GET VSqjqj(j2,j3,j,j1) # +
            GET VSqjqj(j2,j3,j1,j) # +
#
            Tqqqq(j,j1,j2,j3)  = VSqjqj(j2,j3,j,j1)
            T2qqqq(j,j1,j2,j3) = VSqjqj(j2,j3,j1,j)
            Tqqqq(j,j1,j2,j3) += T2qqqq(j,j1,j2,j3)
            Tjj(j,j1)          = Tqqqq(j,j1,j2,j3)*Dij_b(j2,j3)
            Tjj(j,j1)         *= -0.5
            PUT Iij_b(j,j1)   += Tjj(j,j1)
#
      ENDPARDO j2, j3, j, j1
#
      PARDO j, j1, i, i1
#
            GET Dij_a(i,i1)
            GET Vpiqj(i,i1,j,j1) # +
            GET Vpiqj(i,i1,j1,j) # +
#
            Tppqq(i,i1,j,j1)  = Vpiqj(i,i1,j,j1)
            T2ppqq(i,i1,j,j1) = Vpiqj(i,i1,j1,j)
            Tppqq(i,i1,j,j1) += T2ppqq(i,i1,j,j1)
#
            Tjj(j,j1)         = Tppqq(i,i1,j,j1)*Dij_a(i,i1)
            Tjj(j,j1)        *= -0.5
            PUT Iij_b(j,j1)  += Tjj(j,j1)
#
      ENDPARDO j, j1, i, i1
#
#      virtual-occupied contribution 
#      -----------------------------
#
       PARDO i, i1, a, i2
#
             GET VSpipi(i,i1,a,i2)
             GET Dpq_a(a,i2)
#
             Tii(i,i1) = VSpipi(i,i1,a,i2)*Dpq_a(a,i2)
             Tii(i,i1)        *= -1.0
             PUT Iij_a(i,i1) += Tii(i,i1)
             T1ii(i1,i)        = Tii(i,i1)
             PUT Iij_a(i1,i) += T1ii(i1,i)
#
       ENDPARDO i, i1, a, i2 
#
       PARDO i, i1, b, j
#
             GET Vpiqj(i,i1,b,j)
             GET Dpq_b(b,j)
#
             Tii(i,i1)         = Vpiqj(i,i1,b,j)*Dpq_b(b,j)
             Tii(i,i1)        *= -1.0
             PUT Iij_a(i,i1) += Tii(i,i1)
             T1ii(i1,i)        = Tii(i,i1)
             PUT Iij_a(i1,i) += T1ii(i1,i)
#
       ENDPARDO i, i1, b, j
#
#      virtual-occupied contribution --> Needs checked VFL
#      -----------------------------
       PARDO j, j1, j2, b
#
             GET VSqjqj(j,j1,b,j2)
             GET Dpq_b(b,j2)
#
             Tjj(j,j1)         = VSqjqj(j,j1,b,j2)*Dpq_b(b,j2)
             Tjj(j,j1)        *= -1.0
             PUT Iij_b(j,j1) += Tjj(j,j1)
             T1jj(j1,j)        = Tjj(j,j1)
             PUT Iij_b(j1,j) += T1jj(j1,j)
#
       ENDPARDO j, j1, j2, b
#
       PARDO j, j1, i, a
#
             GET Vpiqj(a,i,j,j1)
             GET Dpq_a(a,i)
#
             Tjj(j,j1)         = Vpiqj(a,i,j,j1)*Dpq_a(a,i)
             Tjj(j,j1)        *= -1.0
             PUT Iij_b(j,j1) += Tjj(j,j1)
             T1jj(j1,j)        = Tjj(j,j1)
             PUT Iij_b(j1,j) += T1jj(j1,j)
#
       ENDPARDO j, j1, i, a
#
       execute sip_barrier 
#
# CHECK VFL --> Make sure occ-occ and virt-virt intermediates are consistent
#
       PARDO i, i1
             GET               Iij_a(i,i1)
             PUT Ipq_a(i,i1) = Iij_a(i,i1)
       ENDPARDO i, i1
#
       PARDO a, a1
             GET               Iab_a(a,a1)
             PUT Ipq_a(a,a1) = Iab_a(a,a1)
       ENDPARDO a, a1
#
       PARDO j, j1
             GET               Iij_b(j,j1)
             PUT Ipq_b(j,j1) = Iij_b(j,j1)
       ENDPARDO j, j1
#
       PARDO b, b1
             GET               Iab_b(b,b1)
             PUT Ipq_b(b,b1) = Iab_b(b,b1)
       ENDPARDO b, b1
#
       PARDO a, i
             GET              Ipq_a(i,a)
             tai(a,i)       = Ipq_a(i,a)
             PUT Ipq_a(a,i) = tai(a,i)
       ENDPARDO a, i
#
       PARDO b, j
             GET              Ipq_b(j,b)
             tbj(b,j)       = Ipq_b(j,b)
             PUT Ipq_b(b,j) = tbj(b,j)
       ENDPARDO b, j
#
       execute sip_barrier 
#
     ENDPROC I11
#    -----------
#
# ---------------------------------------------------------------------------------
#
      PROC SXY_CONT
#     -------------
#
# Contract with the second derivative integrals
# --------------------------------------
#
      PARDO mu, nu
#
            GET             Ihf(mu,nu) 
            GET             Ixx_a(mu,nu)
            GET             Ixx_b(mu,nu)

            Txx(mu,nu)    = Ixx_a(mu,nu)
            Txx(mu,nu)   += Ixx_b(mu,nu)
            Txx(mu,nu)   += Ihf(mu,nu)

            EXECUTE SCONTXY Txx(mu,nu)
# 
      ENDPARDO mu, nu
#
      ENDPROC SXY_CONT
#     ----------------
#
# ---------------------------------------------------------------------------------
#
      PROC DXY_CONT
#     -------------
#
# Contract with the second derivative integrals
# --------------------------------------
#
      PARDO mu, nu
            GET             Dxx_a(mu,nu)
            GET             Dxx_b(mu,nu)
            GET             Dhfa(mu,nu)
            GET             Dhfb(mu,nu)
#
            Txx(mu,nu)    = Dxx_a(mu,nu)
            Txx(mu,nu)   += Dxx_b(mu,nu)
            Txx(mu,nu)   += Dhfa(mu,nu)
            Txx(mu,nu)   += Dhfb(mu,nu)
#
            EXECUTE HCONTXY Txx(mu,nu)
#
      ENDPARDO mu, nu
#
      ENDPROC DXY_CONT
#     ----------------
#
# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
#
      PROC GIJAB_CONT
#     ---------------
#
#     First 'backtransform' G^{ab}_{ij} to G^{mu nu}_{ij}.
#     ----------------------------------------------------
#
      create Vxixi
      create Vxixj
      create Vxjxj
      execute sip_barrier
#
#     alpha/alpha block.
#     ------------------
#
      PARDO a, a1, i, i1
#
            GET T1aiai_aa(a,i,a1,i1)
#
            DO mu
#
               Txiai(mu,i,a1,i1) = T1aiai_aa(a,i,a1,i1)*ca(mu,a)
#
               DO nu
#
                  Txixi(mu,i,nu,i1)      = Txiai(mu,i,a1,i1)*ca(nu,a1)
                  PUT Vxixi(mu,i,nu,i1) += Txixi(mu,i,nu,i1)
#
               ENDDO nu
#
            ENDDO mu
#
      ENDPARDO a, a1, i, i1
#
#     beta/beta block.
#     ----------------
#
      PARDO b, b1, j, j1
#
            GET T1bjbj_bb(b,j,b1,j1)
#
            DO mu
#
               Txjbj(mu,j,b1,j1) = T1bjbj_bb(b,j,b1,j1)*cb(mu,b)
#
               DO nu
#
                  Txjxj(mu,j,nu,j1)      = Txjbj(mu,j,b1,j1)*cb(nu,b1)
                  PUT Vxjxj(mu,j,nu,j1) += Txjxj(mu,j,nu,j1)
#
               ENDDO nu
#
            ENDDO mu
#
      ENDPARDO b, b1, j, j1
#
#     alpha/beta block.
#     -----------------
#
      PARDO a, b, i, j
#
            GET T1aibj_ab(a,i,b,j)
#
            DO mu
#
               Txibj(mu,i,b,j) = T1aibj_ab(a,i,b,j)*ca(mu,a)
#
               DO nu
#
                  Txixj(mu,i,nu,j)      = Txibj(mu,i,b,j)*cb(nu,b)
                  PUT Vxixj(mu,i,nu,j) += Txixj(mu,i,nu,j)
#
               ENDDO nu
#
            ENDDO mu
#
      ENDPARDO a, b, i, j
#
      execute sip_barrier
#
#     Complete backtransformation and 'contract' with second derivative integral.
#     ---------------------------------------------------------------------------
#
        PARDO mu, nu, lambda
#
              allocate D2(mu,lambda,nu,*)
#
              DO i1
#
                 Txxxi(mu,lambda,nu,i1) = 0.0
#
                 DO i
#
                    GET Vxixi(mu,i,nu,i1)
#
                    T1xxxi(mu,lambda,nu,i1) = Vxixi(mu,i,nu,i1)*ca(lambda,i)
                    Txxxi(mu,lambda,nu,i1) += T1xxxi(mu,lambda,nu,i1)
#
                 ENDDO i
#
                 DO sigma
#
                    Txxxx(mu,lambda,nu,sigma) = Txxxi(mu,lambda,nu,i1)*ca(sigma,i1)
                    D2(mu,lambda,nu,sigma)   += Txxxx(mu,lambda,nu,sigma)
#
                 ENDDO sigma
#
              ENDDO i1
#
              DO j1
#
                 Txxxj(mu,lambda,nu,j1) = 0.0
#
                 DO j
#
                    GET Vxjxj(mu,j,nu,j1)
                    T1xxxj(mu,lambda,nu,j1) = Vxjxj(mu,j,nu,j1)*cb(lambda,j)
                    Txxxj(mu,lambda,nu,j1) += T1xxxj(mu,lambda,nu,j1)
#
                 ENDDO j
#
                 DO sigma
#
                    Txxxx(mu,lambda,nu,sigma) = Txxxj(mu,lambda,nu,j1)*cb(sigma,j1)
                    D2(mu,lambda,nu,sigma)   += Txxxx(mu,lambda,nu,sigma)
#
                 ENDDO sigma
#
              ENDDO j1
#
              DO j
#
                 Txxxj(mu,lambda,nu,j) = 0.0
#
                 DO i
#
                    GET Vxixj(mu,i,nu,j)
                    T1xxxj(mu,lambda,nu,j) = Vxixj(mu,i,nu,j)*ca(lambda,i)
                    Txxxj(mu,lambda,nu,j) += T1xxxj(mu,lambda,nu,j)
#
                 ENDDO i
#
                 DO sigma
#
                    Txxxx(mu,lambda,nu,sigma) = Txxxj(mu,lambda,nu,j)*cb(sigma,j)
                    Txxxx(mu,lambda,nu,sigma)*= 2.0
                    D2(mu,lambda,nu,sigma)   += Txxxx(mu,lambda,nu,sigma)
#
                 ENDDO sigma
#
              ENDDO j
#
              DO sigma
#
#                Get 1-particle pieces
#                ---------------------
#
                 GET DHFa(mu,lambda)
                 GET DHFa(nu,sigma)
                 GET DHFa(mu,sigma)
                 GET DHFa(nu,lambda)
#
                 GET DHFb(mu,lambda)
                 GET DHFb(nu,sigma)
                 GET DHFb(mu,sigma)
                 GET DHFb(nu,lambda)
#
                 GET Dxx_a(mu,lambda)
                 GET Dxx_a(nu,sigma)
                 GET Dxx_a(mu,sigma)
                 GET Dxx_a(nu,lambda)
#
                 GET Dxx_b(mu,lambda)
                 GET Dxx_b(nu,sigma)
                 GET Dxx_b(mu,sigma)
                 GET Dxx_b(nu,lambda)
#
#                HF only
#                -------
                 Txx(mu,lambda)             = DHFa(mu,lambda)
                 Txxxx(mu,lambda,nu,sigma)  = Txx(mu,lambda)^DHFa(nu,sigma)
#
                 Txx(mu,lambda)             = DHFb(mu,lambda)
                 T1xxxx(mu,lambda,nu,sigma) = Txx(mu,lambda)^DHFb(nu,sigma)
                 Txxxx(mu,lambda,nu,sigma) += T1xxxx(mu,lambda,nu,sigma)
#
                 Txx(mu,lambda)             = DHFa(mu,lambda)
                 T1xxxx(mu,lambda,nu,sigma) = Txx(mu,lambda)^DHFb(nu,sigma)
                 Txxxx(mu,lambda,nu,sigma) += T1xxxx(mu,lambda,nu,sigma)
#
                 Txx(mu,lambda)             = DHFb(mu,lambda)
                 T1xxxx(mu,lambda,nu,sigma) = Txx(mu,lambda)^DHFa(nu,sigma)
                 Txxxx(mu,lambda,nu,sigma) += T1xxxx(mu,lambda,nu,sigma)
#
                 Txx(mu,sigma)              = DHFa(mu,sigma)
                 T1xxxx(mu,lambda,nu,sigma) = Txx(mu,sigma)^DHFa(nu,lambda)
                 Txxxx(mu,lambda,nu,sigma) -= T1xxxx(mu,lambda,nu,sigma)
#
                 Txx(mu,sigma)              = DHFb(mu,sigma)
                 T1xxxx(mu,lambda,nu,sigma) = Txx(mu,sigma)^DHFb(nu,lambda)
                 Txxxx(mu,lambda,nu,sigma) -= T1xxxx(mu,lambda,nu,sigma)
#
                 Txxxx(mu,lambda,nu,sigma) *= 0.5
#
#                Correlation
#                -----------
                 T1xxxx(mu,lambda,nu,sigma) = Dxx_a(mu,lambda)^DHFA(nu,sigma)
                 Txxxx(mu,lambda,nu,sigma) += T1xxxx(mu,lambda,nu,sigma)
#
                 T1xxxx(mu,lambda,nu,sigma) = Dxx_b(mu,lambda)^DHFB(nu,sigma)
                 Txxxx(mu,lambda,nu,sigma) += T1xxxx(mu,lambda,nu,sigma)
#
                 T1xxxx(mu,lambda,nu,sigma) = Dxx_a(mu,lambda)^DHFB(nu,sigma)
                 Txxxx(mu,lambda,nu,sigma) += T1xxxx(mu,lambda,nu,sigma)
#
                 T1xxxx(mu,lambda,nu,sigma) = Dxx_b(mu,lambda)^DHFA(nu,sigma)
                 Txxxx(mu,lambda,nu,sigma) += T1xxxx(mu,lambda,nu,sigma)

                 T1xxxx(mu,lambda,nu,sigma) = Dxx_a(mu,sigma)^DHFA(nu,lambda)
                 T1xxxx(mu,lambda,nu,sigma)*= 0.5
                 Txxxx(mu,lambda,nu,sigma) -= T1xxxx(mu,lambda,nu,sigma)
#
                 T1xxxx(mu,lambda,nu,sigma) = Dxx_a(nu,lambda)^DHFA(mu,sigma)
                 T1xxxx(mu,lambda,nu,sigma)*= 0.5
                 Txxxx(mu,lambda,nu,sigma) -= T1xxxx(mu,lambda,nu,sigma)
#
                 T1xxxx(mu,lambda,nu,sigma) = Dxx_b(mu,sigma)^DHFB(nu,lambda)
                 T1xxxx(mu,lambda,nu,sigma)*= 0.5
                 Txxxx(mu,lambda,nu,sigma) -= T1xxxx(mu,lambda,nu,sigma)
#
                 T1xxxx(mu,lambda,nu,sigma) = Dxx_b(nu,lambda)^DHFB(mu,sigma)
                 T1xxxx(mu,lambda,nu,sigma)*= 0.5
                 Txxxx(mu,lambda,nu,sigma) -= T1xxxx(mu,lambda,nu,sigma)
#
#                The nonseparable part
#                ----------------------
                 Txxxx(mu,lambda,nu,sigma) += D2(mu,lambda,nu,sigma)
#
#                Compute integral block and contract density with second-derivatives.
#                --------------------------------------------------------------------
                 execute compute_Sderivative_integrals Txxxx(mu,lambda,nu,sigma)
#
              ENDDO sigma  
#
              deallocate D2(mu,lambda,nu,*)
#
        ENDPARDO mu, nu, lambda
#
      ENDPROC GIJAB_CONT
#     ------------------
#
# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------
#
      PROC FSCF_HESS 
#     -------------- 
#
      create cya 
      create cyb 
      create dhfya 
      create dhfyb 
      create whfya 
      create whfyb 
      execute sip_barrier 
#
#     Remove non-diagonal elements of Fya and Fyb --> epsya, epsyb 
#     ------------------------------------------------------------ 
#
      DO i 
      DO i1 
         GET Fya(i,i1)     
         SFya(i,i1) = Fya(i,i1) 
      ENDDO i1 
      ENDDO i 
#
      DO j 
      DO j1 
         GET Fyb(j,j1)     
         SFyb(j,j1) = Fyb(j,j1) 
      ENDDO j1 
      ENDDO j 
#
      execute return_diagonal SFya epsya 
      execute return_diagonal SFyb epsyb 
#
      execute sip_barrier 
#
#     Compute derivatives of coefficients. 
#     ------------------------------------ 
#
      PARDO mu, i 
#
           txp(mu,i) = 0.0 
#
           DO p1 
#
              GET Uyaa(p1,i) 
              t1xp(mu,i) = ca(mu,p1)*Uyaa(p1,i) 
              txp(mu,i) += t1xp(mu,i) 
#
           ENDDO p1 
#
           PUT cya(mu,i) = txp(mu,i) 
#
      ENDPARDO mu, i 
#
      PARDO mu, j 
#
           txq(mu,j) = 0.0 
#
           DO q1 
#
              GET Uybb(q1,j) 
              t1xq(mu,j) = cb(mu,q1)*Uybb(q1,j) 
              txq(mu,j) += t1xq(mu,j) 
#
           ENDDO q1 
#
           PUT cyb(mu,j) = txq(mu,j) 
#
      ENDPARDO mu, j 
#
      execute sip_barrier 
#
#     Form derivatives of HF density. 
#     ------------------------------- 
#
      PARDO mu, nu 
#
#           alpha component. 
#           ---------------- 
#
            txx(mu,nu) = 0.0 
#
            DO i 
#
               GET cya(mu,i) 
               GET cya(nu,i) 
#
               t1xx(mu,nu) = cya(mu,i)*ca(nu,i) 
               txx(mu,nu) += t1xx(mu,nu) 
#
               t1xx(mu,nu) = ca(mu,i)*cya(nu,i) 
               txx(mu,nu) += t1xx(mu,nu) 
#
            ENDDO i 
#
            PUT dhfya(mu,nu) = txx(mu,nu) 
#
#           beta component. 
#           --------------- 
#
            txx(mu,nu) = 0.0 
#
            DO j 
#
               GET cyb(mu,j) 
               GET cyb(nu,j) 
#
               t1xx(mu,nu) = cyb(mu,j)*cb(nu,j) 
               txx(mu,nu) += t1xx(mu,nu) 
#
               t1xx(mu,nu) = cb(mu,j)*cyb(nu,j) 
               txx(mu,nu) += t1xx(mu,nu) 
#
            ENDDO j 
#
            PUT dhfyb(mu,nu) = txx(mu,nu) 
#
      ENDPARDO mu, nu 
#
#     Compute derivatives of weighted HF density. 
#     ------------------------------------------- 
#
      PARDO mu, nu, i  
#
#           piece 1. 
#           -------- 
#
            Txi(nu,i) = 0.0
#
            DO i1
#
               GET          cya(nu,i1) 
               T1xi(nu,i) = cya(nu,i1)*fock_a(i1,i)
               Txi(nu,i) -= T1xi(nu,i)
#
            ENDDO i1
#
            Txx(mu,nu)      = ca(mu,i)*Txi(nu,i)
            PUT whfya(mu,nu) += Txx(mu,nu)
#
      ENDPARDO mu, nu, i  
#
      PARDO mu, nu, i  
#
#           piece 2. 
#           -------- 
#
            Txi(nu,i) = 0.0
#
            DO i1
#
               T1xi(nu,i) = ca(nu,i1)*fock_a(i1,i)
               Txi(nu,i) -= T1xi(nu,i)
#
            ENDDO i1
#
            get               cya(mu,i) 
            Txx(mu,nu)      = cya(mu,i)*Txi(nu,i)
            PUT whfya(mu,nu) += Txx(mu,nu)
#
      ENDPARDO mu, nu, i  
#
      PARDO mu, nu, i  
#
#           piece 3. 
#           -------- 
#
            Txi(nu,i) = 0.0
#
            DO i1
#
               get fya(i1,i) 
               T1xi(nu,i) = ca(nu,i1)*fya(i1,i) # epsya(i1,i)
               Txi(nu,i) -= T1xi(nu,i)
#
            ENDDO i1
#
            Txx(mu,nu)        = ca(mu,i)*Txi(nu,i)
            PUT whfya(mu,nu) += Txx(mu,nu)
#
      ENDPARDO mu, nu, i  
#
      PARDO mu, nu 
#
            DO j 
#
#           piece 1. 
#           -------- 
#
            Txj(nu,j) = 0.0
#
            DO j1
#
               GET          cyb(nu,j1) 
               T1xj(nu,j) = cyb(nu,j1)*fock_b(j1,j)
               Txj(nu,j) -= T1xj(nu,j)
#
            ENDDO j1
#
            Txx(mu,nu)      = cb(mu,j)*Txj(nu,j)
            PUT whfyb(mu,nu) += Txx(mu,nu)
#
            ENDDO j 
#
#           piece 2. 
#           -------- 
#
            DO j 
#
            Txj(nu,j) = 0.0
#
            DO j1
#
               T1xj(nu,j) = cb(nu,j1)*fock_b(j1,j)
               Txj(nu,j) -= T1xj(nu,j)
#
            ENDDO j1
#
            GET               cyb(mu,j) 
            Txx(mu,nu)      = cyb(mu,j)*Txj(nu,j)
            PUT whfyb(mu,nu) += Txx(mu,nu)
#
            ENDDO j 
#
#           piece 3. 
#           -------- 
#
            DO j 
#
            Txj(nu,j) = 0.0
#
            DO j1
#
               get fyb(j1,j) 
               T1xj(nu,j) = cb(nu,j1)*fyb(j1,j) # epsyb(j1,j)
               Txj(nu,j) -= T1xj(nu,j)
#
            ENDDO j1
#
            Txx(mu,nu)      = cb(mu,j)*Txj(nu,j)
            PUT whfyb(mu,nu) += Txx(mu,nu)
#
            ENDDO j 
#
      ENDPARDO mu, nu 
#
      execute sip_barrier 
#
      delete cya 
      delete cyb 
#
      ENDPROC FSCF_HESS 
#     ----------------- 
#
# ---------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------
#
      PROC MYSTERY_TERM 
#
      create zeta_a
      create zeta_b
      create zeta 
      execute sip_barrier 
#
      PARDO a, a1 
#
            taa(a,a1) = 0.0 
#
            DO a2 
#
               if a2 == a1 
#
               GET Dpq_a(a,a2) 
               t1aa(a,a1) = Dpq_a(a,a2)*Fock_a(a1,a2) 
               t1aa(a,a1) *= 0.5  
               taa(a,a1) += t1aa(a,a1) 
#
               endif 
#
            ENDDO a2 
#
            DO a2 
#
               if a2 == a 
#
               GET Dpq_a(a2,a1) 
               t1aa(a,a1) = Dpq_a(a2,a1)*Fock_a(a2,a) 
               t1aa(a,a1) *= 0.5  
               taa(a,a1) += t1aa(a,a1) 
#
               endif 
#
            ENDDO a2 
#
            PUT zeta_a(a,a1) += taa(a,a1) 
#
      ENDPARDO a, a1 
#
      PARDO i, i1 
#
            tpp(i,i1) = 0.0 
#
            DO i2 
#
               if i2 == i1 
#
               GET Dpq_a(i,i2) 
               t1pp(i,i1) = Dpq_a(i,i2)*Fock_a(i1,i2) 
               t1pp(i,i1) *= 0.5  
               tpp(i,i1) += t1pp(i,i1) 
#
               endif 
#
            ENDDO i2 
#
            DO i2 
#
               if i2 == i 
#
               GET Dpq_a(i2,i1) 
               t1pp(i,i1) = Dpq_a(i2,i1)*Fock_a(i2,i) 
               t1pp(i,i1) *= 0.5  
               tpp(i,i1) += t1pp(i,i1) 
#
               endif 
#
            ENDDO i2 
#
            PUT zeta_a(i,i1) += tpp(i,i1) 
#
      ENDPARDO i, i1 
#
      PARDO a, i 
#
            tai(a,i) = 0.0  
#
            DO i1 
#
               if i1 == i 
#
               GET Dpq_a(a,i1) 
               t1ai(a,i) = Dpq_a(a,i1)*Fock_a(i1,i) 
               tai(a,i) += t1ai(a,i) 
#
               endif 
#
            ENDDO i1 
#
            PUT zeta_a(a,i) += tai(a,i) 
            tpp(i,a) = tai(a,i) 
            PUT zeta_a(i,a) += tpp(i,a) 
#
      ENDPARDO a, i 
#
      PARDO b, b1 
#
            tbb(b,b1) = 0.0 
#
            DO b2 
#
               if b2 == b1 
#
               GET Dpq_b(b,b2) 
               t1bb(b,b1) = Dpq_b(b,b2)*Fock_b(b1,b2) 
               t1bb(b,b1) *= 0.5  
               tbb(b,b1) += t1bb(b,b1) 
#
               endif 
#
            ENDDO b2 
#
            DO b2 
#
               if b2 == b 
#
               GET Dpq_b(b2,b1) 
               t1bb(b,b1) = Dpq_b(b2,b1)*Fock_b(b2,b) 
               t1bb(b,b1) *= 0.5  
               tbb(b,b1) += t1bb(b,b1) 
#
               endif 
#
            ENDDO b2 
#
            PUT zeta_b(b,b1) += tbb(b,b1) 
#
      ENDPARDO b, b1 
#
      PARDO j, j1 
#
            tqq(j,j1) = 0.0 
#
            DO j2 
#
               if j2 == j1 
#
               GET Dpq_b(j,j2) 
               t1qq(j,j1) = Dpq_b(j,j2)*Fock_b(j1,j2) 
               t1qq(j,j1) *= 0.5  
               tqq(j,j1) += t1qq(j,j1) 
#
               endif 
#
            ENDDO j2 
#
            DO j2 
#
               if j2 == j 
#
               GET Dpq_b(j2,j1) 
               t1qq(j,j1) = Dpq_b(j2,j1)*Fock_b(j2,j) 
               t1qq(j,j1) *= 0.5  
               tqq(j,j1) += t1qq(j,j1) 
#
               endif 
#
            ENDDO j2 
#
            PUT zeta_b(j,j1) += tqq(j,j1) 
#
      ENDPARDO j, j1 
#
      PARDO b, j 
#
            tbj(b,j) = 0.0  
#
            DO j1 
#
               if j1 == j 
#
               GET Dpq_b(b,j1) 
               t1bj(b,j) = Dpq_b(b,j1)*Fock_b(j1,j) 
               tbj(b,j) += t1bj(b,j) 
#
               endif 
#
            ENDDO j1 
#
            PUT zeta_b(b,j) += tbj(b,j) 
            tqq(j,b) = tbj(b,j) 
            PUT zeta_b(j,b) += tqq(j,b) 
#
      ENDPARDO b, j 
#
#     delete zeta_a 
#     delete zeta_b 
#     delete zeta 
#
#     create zeta_a
#     create zeta_b
#     create zeta 
#     execute sip_barrier 
#
#     Second-piece 
#     ------------ 
#
#     alpha/alpha component 
#     --------------------- 
#
      PARDO a, a1, i, i1  
#
            GET Vaaii(a,a1,i,i1) 
            GET Viaai(i,a1,a,i1) 
            GET Dpq_a(a,a1) 
#
            tpppp(a,a1,i,i1)  = Vaaii(a,a1,i,i1) 
            t1pppp(a,a1,i,i1) = Viaai(i,a1,a,i1) 
            tpppp(a,a1,i,i1) -= t1pppp(a,a1,i,i1) 
#
            tpp(i,i1) = tpppp(a,a1,i,i1)*Dpq_a(a,a1) 
            zeta_a(i,i1) += tpp(i,i1) 
#
      ENDPARDO a, a1, i, i1  
#
      PARDO i2, i3, i, i1  
#
            GET VSpipi(i2,i3,i,i1) 
            GET Dpq_a(i2,i3) 
#
            tpp(i,i1) = VSpipi(i2,i3,i,i1)*Dpq_a(i2,i3) 
            zeta_a(i,i1) += tpp(i,i1) 
#
      ENDPARDO i2, i3, i, i1  
#
      PARDO i2, a, i, i1  
#
            GET VSpipi(a,i2,i1,i) 
            GET Dpq_a(i2,a) 
#
            tpp(i,i1) = VSpipi(a,i2,i1,i)*Dpq_a(i2,a) 
            tpp(i,i1) *= 2.0  
            zeta_a(i,i1) += tpp(i,i1) 
#
      ENDPARDO i2, a, i, i1  
#
#     beta/beta component 
#     ------------------- 
#
      PARDO b, b1, j, j1  
#
            GET Vbbjj(b,b1,j,j1) 
            GET Vjbbj(j,b1,b,j1) 
            GET Dpq_b(b,b1) 
#
            tqqqq(b,b1,j,j1)  = Vbbjj(b,b1,j,j1) 
            t1qqqq(b,b1,j,j1) = Vjbbj(j,b1,b,j1) 
            tqqqq(b,b1,j,j1) -= t1qqqq(b,b1,j,j1) 
#
            tqq(j,j1) = tqqqq(b,b1,j,j1)*Dpq_b(b,b1) 
            zeta_b(j,j1) += tqq(j,j1) 
#
      ENDPARDO b, b1, j, j1  
#
      PARDO j2, j3, j, j1  
#
            GET VSqjqj(j2,j3,j,j1) 
            GET Dpq_b(j2,j3) 
#
            tqq(j,j1) = VSqjqj(j2,j3,j,j1)*Dpq_b(j2,j3) 
            zeta_b(j,j1) += tqq(j,j1) 
#
      ENDPARDO j2, j3, j, j1  
#
      PARDO j2, b, j, j1  
#
            GET VSqjqj(b,j2,j1,j) 
            GET Dpq_b(j2,b) 
#
            tqq(j,j1) = VSqjqj(b,j2,j1,j)*Dpq_b(j2,b) 
            tqq(j,j1) *= 2.0  
            zeta_b(j,j1) += tqq(j,j1) 
#
      ENDPARDO j2, b, j, j1  
#
#     alpha/beta component 
#     -------------------- 
#
      PARDO a, a1, j, j1  
#
            GET Vaajj(a,a1,j,j1) 
            GET Dpq_a(a,a1) 
#
            tqq(j,j1) = Vaajj(a,a1,j,j1)*Dpq_a(a,a1) 
            zeta_b(j,j1) += tqq(j,j1) 
#
      ENDPARDO a, a1, j, j1  
#
      PARDO i2, i3, j, j1  
#
            GET Vpiqj(i2,i3,j,j1) 
            GET Dpq_a(i2,i3) 
#
            tqq(j,j1) = Vpiqj(i2,i3,j,j1)*Dpq_a(i2,i3) 
            zeta_b(j,j1) += tqq(j,j1) 
#
      ENDPARDO i2, i3, j, j1  
#
      PARDO i2, a, j, j1  
#
            GET Vpiqj(a,i2,j1,j) 
            GET Dpq_a(i2,a) 
#
            tqq(j,j1) = Vpiqj(a,i2,j1,j)*Dpq_a(i2,a) 
            tqq(j,j1) *= 2.0  
            zeta_b(j,j1) += tqq(j,j1) 
#
      ENDPARDO i2, a, j, j1  
#
#     beta/alpha component 
#     -------------------- 
#
      PARDO b, b1, i, i1  
#
            GET Vbbii(b,b1,i,i1) 
            GET Dpq_b(b,b1) 
#
            tpp(i,i1) = Vbbii(b,b1,i,i1)*Dpq_b(b,b1) 
            zeta_a(i,i1) += tpp(i,i1) 
#
      ENDPARDO b, b1, i, i1  
#
      PARDO j2, j3, i, i1  
#
            GET Vpiqj(i,i1,j2,j3) 
            GET Dpq_b(j2,j3) 
#
            tpp(i,i1) = Vpiqj(i,i1,j2,j3)*Dpq_b(j2,j3) 
            zeta_a(i,i1) += tpp(i,i1) 
#
      ENDPARDO j2, j3, i, i1  
#
      PARDO j2, b, i, i1  
#
            GET Vpiqj(i,i1,b,j2) 
            GET Dpq_b(j2,b) 
#
            tpp(i,i1) = Vpiqj(i1,i,b,j2)*Dpq_b(j2,b) 
            tpp(i,i1) *= 2.0  
            zeta_a(i,i1) += tpp(i,i1) 
#
      ENDPARDO j2, b, i, i1  
#
#     Done second-piece 
#     ----------------- 
#
#     Done creating zeta --> now backtransform to AO basis 
#     ---------------------------------------------------- 
#
      PARDO p, p1 
#
            GET zeta_a(p,p1) 
#
            DO mu 
#
               txp(mu,p1) = zeta_a(p,p1)*ca(mu,p) 
#
               DO nu 
#
                  txx(mu,nu) = txp(mu,p1)*ca(nu,p1) 
                  PUT zeta(mu,nu) += txx(mu,nu) 
#
               ENDDO nu 
#
            ENDDO mu 
#
      ENDPARDO p, p1 
#
      PARDO q, q1 
#
            GET zeta_b(q,q1) 
#
            DO mu 
#
               txq(mu,q1) = zeta_b(q,q1)*cb(mu,q) 
#
               DO nu 
#
                  txx(mu,nu) = txq(mu,q1)*cb(nu,q1) 
                  PUT zeta(mu,nu) += txx(mu,nu) 
#
               ENDDO nu 
#
            ENDDO mu 
#
      ENDPARDO q, q1 
#
      ENDPROC MYSTERY_TERM 
#
# ---------------------------------------------------------------------------
#
###############################################################################
#
      PROC S1TRANSALT
#     ---------------
#
#     Compute integrals and form Q arrays
#     ----------------------------------------------------------------
#
      create QAB 
      create QA 
      create QB 
      esum = 0.0 
      execute sip_barrier 
      PARDO mu, nu, lambda
#
            DO  sigma
#
                compute_integrals saoint(mu,lambda,nu,sigma)
                daoint(mu,lambda,nu,sigma)  = saoint(mu,lambda,nu,sigma)
#
#               Update QA, QB, and QAB
#               ----------------------------
#
                GET                   Dhfa(lambda,nu)
                GET                   Dhfb(lambda,nu)
                GET                   Dhfa(nu,sigma)
                GET                   Dhfb(nu,sigma)
#
                txx(nu,sigma)   = Dhfa(nu,sigma)
                txx(nu,sigma)  += Dhfb(nu,sigma)
#
                t1xx(mu,sigma)      = daoint(mu,lambda,nu,sigma)*Dhfa(lambda,nu)
                t1xx(mu,sigma)     *= -1.0
                PUT QA(mu,sigma) += t1xx(mu,sigma)
#
                t1xx(mu,sigma)      = daoint(mu,lambda,nu,sigma)*Dhfb(lambda,nu)
                t1xx(mu,sigma)     *= -1.0
                PUT QB(mu,sigma) += t1xx(mu,sigma)
#
                t1xx(mu,lambda)         = daoint(mu,lambda,nu,sigma)*txx(nu,sigma)
                PUT QAB(mu,lambda)   += t1xx(mu,lambda)
#
            ENDDO  sigma
#
      ENDPARDO mu, nu, lambda
#
      execute sip_barrier 
#
      PARDO mu, nu 
#
            get dhfya(mu,nu) 
            get dhfyb(mu,nu) 
            get dhfa(mu,nu) 

            execute return_h1 txx(mu,nu) 
#
            GET QAB(mu,nu)
            GET QA(mu,nu)
            GET QB(mu,nu)

            t1xx(mu,nu)  = txx(mu,nu)
            t1xx(mu,nu) += QAB(mu,nu)
            t1xx(mu,nu) += QA(mu,nu)

            etemp        = t1xx(mu,nu)*dhfya(mu,nu)
            esum      += etemp

            t1xx(mu,nu)  = txx(mu,nu)
            t1xx(mu,nu) += QAB(mu,nu)
            t1xx(mu,nu) += QB(mu,nu)

            etemp        = t1xx(mu,nu)*dhfyb(mu,nu)
            esum      += etemp
#
      ENDPARDO mu, nu
#
      PARDO mu, nu 
#
            execute overlap_der txx(mu,nu) 
            GET whfa(mu,nu) 
            GET whfya(mu,nu) 

            GET whfb(mu,nu) 
            t1xx(mu,nu) = whfa(mu,nu) 
            t1xx(mu,nu)+= whfb(mu,nu) 
#
            etemp = txx(mu,nu)*t1xx(mu,nu) 
            esum      += etemp
#
      ENDPARDO mu, nu
#
      execute sip_barrier 
      delete QAB 
      delete QA 
      delete QB 
      delete whfa 
      delete whfb 
#
      esum = 0.0 
#
      PARDO mu, nu 
#
            execute fock_der txx(mu,nu) 
            GET dhfa(mu,nu) 
            GET dhfb(mu,nu) 
#
            t1xx(mu,nu) = dhfa(mu,nu) 
            t1xx(mu,nu)+= dhfb(mu,nu) 
#
            etemp = txx(mu,nu)*t1xx(mu,nu) 
            esum      += etemp
#
      ENDPARDO mu, nu
#
      execute sip_barrier 
#
      ENDPROC S1TRANSALT
#     ------------------
#
# ---------------------------------------------------------------------- 
#
      PROC TERM16 
#     ----------- 
#
#     Contributions from Taiai. 
#     ------------------------- 
#
      PARDO a, a1, i 
#
            allocate Laiai(a,i,a1,*) 
#
#           (p,q) --> (a2,a3) 
#           ----------------- 
#
            DO a3 
#
               tpppp(a,i,a1,a3) = 0.0 
#
               DO a2  
#
                  GET                 VSaaaa(a,a2,a1,a3)  
                  GET                 Uxaa(a2,i) 
#
                  t1pppp(a,i,a1,a3) = VSaaaa(a,a2,a1,a3)*Uxaa(a2,i) 
                  tpppp(a,i,a1,a3) += t1pppp(a,i,a1,a3)  
#
               ENDDO a2 
#
               DO i1 
#
                  GET                 Uyaa(a3,i1) 
                  taiai(a,i,a1,i1)  = tpppp(a,i,a1,a3)*Uyaa(a3,i1)  
                  Laiai(a,i,a1,i1) += taiai(a,i,a1,i1) 
#
               ENDDO i1 
#
            ENDDO a3 
#
#           (p,q) --> (a2,i3) 
#           ----------------- 
#
            DO i3 
#
               tpppp(a,i,a1,i3) = 0.0 
#
               DO a2  
#
                  GET                 VSaaai(a,a2,a1,i3)  
                  GET                 Uxaa(a2,i) 
#
                  t1pppp(a,i,a1,i3) = VSaaai(a,a2,a1,i3)*Uxaa(a2,i) 
                  tpppp(a,i,a1,i3) += t1pppp(a,i,a1,i3)  
#
               ENDDO a2 
#
               DO i1 
#
                  GET                 Uyaa(i3,i1) 
                  taiai(a,i,a1,i1)  = tpppp(a,i,a1,i3)*Uyaa(i3,i1)  
                  Laiai(a,i,a1,i1) += taiai(a,i,a1,i1) 
#
               ENDDO i1 
#
            ENDDO i3 
#
#           (p,q) --> (i2,a3) 
#           ----------------- 
#
            DO a3 
#
               tpppp(a,i,a1,a3) = 0.0 
#
               DO i2  
#
                  GET                 VSaaai(a1,a3,a,i2)  
                  GET                 Uxaa(i2,i) 
#
                  t1pppp(a,i,a1,a3) = VSaaai(a1,a3,a,i2)*Uxaa(i2,i) 
                  tpppp(a,i,a1,a3) += t1pppp(a,i,a1,a3)  
#
               ENDDO i2 
#
               DO i1 
#
                  GET                 Uyaa(a3,i1) 
                  taiai(a,i,a1,i1)  = tpppp(a,i,a1,a3)*Uyaa(a3,i1)  
                  Laiai(a,i,a1,i1) += taiai(a,i,a1,i1) 
#
               ENDDO i1 
#
            ENDDO a3 
#
#           (p,q) --> (i2,i3) 
#           ----------------- 
#
            DO i3 
#
               tpppp(a,i,a1,i3) = 0.0 
#
               DO i2  
#
                  GET                 VSpipi(a,i2,a1,i3)  
                  GET                 Uxaa(i2,i) 
#
                  t1pppp(a,i,a1,i3) = VSpipi(a,i2,a1,i3)*Uxaa(i2,i) 
                  tpppp(a,i,a1,i3) += t1pppp(a,i,a1,i3)  
#
               ENDDO i2 
#
               DO i1 
#
                  GET                 Uyaa(i3,i1) 
                  taiai(a,i,a1,i1)  = tpppp(a,i,a1,i3)*Uyaa(i3,i1)  
                  Laiai(a,i,a1,i1) += taiai(a,i,a1,i1) 
#
               ENDDO i1 
#
            ENDDO i3 
#
            DO i1 
#
               GET       T1aiai_aa(a,i,a1,i1) 
               etemp   = T1aiai_aa(a,i,a1,i1) *Laiai(a,i,a1,i1) 
               etemp  *=0.5  
               hessxy += etemp 
#
            ENDDO i1 
#
            deallocate Laiai(a,i,a1,*) 
#
      ENDPARDO a, a1, i 
#
#     End contributions from Taiai. 
#     ----------------------------- 
#
#     Contributions from Tbjbj. 
#     ------------------------- 
#
      PARDO b, b1, j 
#
            allocate Lbjbj(b,j,b1,*) 
#
#           (p,q) --> (b2,b3) 
#           ----------------- 
#
            DO b3 
#
               tqqqq(b,j,b1,b3) = 0.0 
#
               DO b2  
#
                  GET                 VSbbbb(b,b2,b1,b3)  
                  GET                 Uxbb(b2,j) 
#
                  t1qqqq(b,j,b1,b3) = VSbbbb(b,b2,b1,b3)*Uxbb(b2,j) 
                  tqqqq(b,j,b1,b3) += t1qqqq(b,j,b1,b3)  
#
               ENDDO b2 
#
               DO j1 
#
                  GET                 Uybb(b3,j1) 
                  tbjbj(b,j,b1,j1)  = tqqqq(b,j,b1,b3)*Uybb(b3,j1)  
                  Lbjbj(b,j,b1,j1) += tbjbj(b,j,b1,j1) 
#
               ENDDO j1 
#
            ENDDO b3 
#
#           (p,q) --> (b2,j3) 
#           ----------------- 
#
            DO j3 
#
               tqqqq(b,j,b1,j3) = 0.0 
#
               DO b2  
#
                  GET                 VSbbbj(b,b2,b1,j3)  
                  GET                 Uxbb(b2,j) 
#
                  t1qqqq(b,j,b1,j3) = VSbbbj(b,b2,b1,j3)*Uxbb(b2,j) 
                  tqqqq(b,j,b1,j3) += t1qqqq(b,j,b1,j3)  
#
               ENDDO b2 
#
               DO j1 
#
                  GET                 Uybb(j3,j1) 
                  tbjbj(b,j,b1,j1)  = tqqqq(b,j,b1,j3)*Uybb(j3,j1)  
                  Lbjbj(b,j,b1,j1) += tbjbj(b,j,b1,j1) 
#
               ENDDO j1 
#
            ENDDO j3 
#
#           (p,q) --> (j2,b3) 
#           ----------------- 
#
            DO b3 
#
               tqqqq(b,j,b1,b3) = 0.0 
#
               DO j2  
#
                  GET                 VSbbbj(b1,b3,b,j2)  
                  GET                 Uxbb(j2,j) 
#
                  t1qqqq(b,j,b1,b3) = VSbbbj(b1,b3,b,j2)*Uxbb(j2,j) 
                  tqqqq(b,j,b1,b3) += t1qqqq(b,j,b1,b3)  
#
               ENDDO j2 
#
               DO j1 
#
                  GET                 Uybb(b3,j1) 
                  tbjbj(b,j,b1,j1)  = tqqqq(b,j,b1,b3)*Uybb(b3,j1)  
                  Lbjbj(b,j,b1,j1) += tbjbj(b,j,b1,j1) 
#
               ENDDO j1 
#
            ENDDO b3 
#
#           (p,q) --> (j2,j3) 
#           ----------------- 
#
            DO j3 
#
               tqqqq(b,j,b1,j3) = 0.0 
#
               DO j2  
#
                  GET                 VSqjqj(b,j2,b1,j3)  
                  GET                 Uxbb(j2,j) 
#
                  t1qqqq(b,j,b1,j3) = VSqjqj(b,j2,b1,j3)*Uxbb(j2,j) 
                  tqqqq(b,j,b1,j3) += t1qqqq(b,j,b1,j3)  
#
               ENDDO j2 
#
               DO j1 
#
                  GET                 Uybb(j3,j1) 
                  tbjbj(b,j,b1,j1)  = tqqqq(b,j,b1,j3)*Uybb(j3,j1)  
                  Lbjbj(b,j,b1,j1) += tbjbj(b,j,b1,j1) 
#
               ENDDO j1 
#
            ENDDO j3 
#
            DO j1 
#
               GET       T1bjbj_bb(b,j,b1,j1) 
               etemp   = T1bjbj_bb(b,j,b1,j1) *Lbjbj(b,j,b1,j1) 
               etemp  *=0.5  
               hessxy += etemp 
#
            ENDDO j1 
#
            deallocate Lbjbj(b,j,b1,*) 
#
      ENDPARDO b, b1, j 
#
#     End contributions from Tbjbj. 
#     ----------------------------- 
#
#     Contributions from Taibj. 
#     ------------------------- 
#
      PARDO a, b, i 
#
            allocate Laibj(a,i,b,*) 
#
#           (p,q) --> (a1,b1) 
#           ----------------- 
#
            DO b1 
#
               tppqq(a,i,b,b1) = 0.0   
#
               DO a1 
# 
                  GET                Vaabb(a,a1,b,b1) 
                  GET                Uxaa(a1,i) 
#
                  t1ppqq(a,i,b,b1) = Vaabb(a,a1,b,b1)*Uxaa(a1,i) 
                  tppqq(a,i,b,b1) += t1ppqq(a,i,b,b1) 
#
               ENDDO a1 
#
               DO j 
#
                  GET               Uybb(b1,j) 
                  taibj(a,i,b,j)  = tppqq(a,i,b,b1)*Uybb(b1,j) 
                  Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
               ENDDO j 
#
            ENDDO b1 
#
#           (p,q) --> (i1,b1) 
#           ----------------- 
#
            DO b1 
#
               tppqq(a,i,b,b1) = 0.0   
#
               DO i1 
# 
                  GET                Vbbai(b,b1,a,i1) 
                  GET                Uxaa(i1,i) 
#
                  t1ppqq(a,i,b,b1) = Vbbai(b,b1,a,i1)*Uxaa(i1,i) 
                  tppqq(a,i,b,b1) += t1ppqq(a,i,b,b1) 
#
               ENDDO i1 
#
               DO j 
#
                  GET               Uybb(b1,j) 
                  taibj(a,i,b,j)  = tppqq(a,i,b,b1)*Uybb(b1,j) 
                  Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
               ENDDO j 
#
            ENDDO b1 
#
#           (p,q) --> (a1,j1) 
#           ----------------- 
#
            DO j1 
#
               tppqq(a,i,b,j1) = 0.0   
#
               DO a1 
# 
                  GET                Vaabj(a,a1,b,j1) 
                  GET                Uxaa(a1,i) 
#
                  t1ppqq(a,i,b,j1) = Vaabj(a,a1,b,j1)*Uxaa(a1,i) 
                  tppqq(a,i,b,j1) += t1ppqq(a,i,b,j1) 
#
               ENDDO a1 
#
               DO j 
#
                  GET               Uybb(j1,j) 
                  taibj(a,i,b,j)  = tppqq(a,i,b,j1)*Uybb(j1,j) 
                  Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
               ENDDO j 
#
            ENDDO j1 
#
#           (p,q) --> (i1,j1) 
#           ----------------- 
#
            DO j1 
#
               tppqq(a,i,b,j1) = 0.0   
#
               DO i1 
# 
                  GET                Vpiqj(a,i1,b,j1) 
                  GET                Uxaa(i1,i) 
#
                  t1ppqq(a,i,b,j1) = Vpiqj(a,i1,b,j1)*Uxaa(i1,i) 
                  tppqq(a,i,b,j1) += t1ppqq(a,i,b,j1) 
#
               ENDDO i1 
#
               DO j 
#
                  GET               Uybb(j1,j) 
                  taibj(a,i,b,j)  = tppqq(a,i,b,j1)*Uybb(j1,j) 
                  Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
               ENDDO j 
#
            ENDDO j1 
#
            DO j 
#
               GET       T1aibj_ab(a,i,b,j) 
               etemp   = T1aibj_ab(a,i,b,j)*Laibj(a,i,b,j) 
               etemp  *=2.0 
               hessxy += etemp 
#
            ENDDO j 
#
            deallocate Laibj(a,i,b,*) 
#
      ENDPARDO a, b, i 
#
      ENDPROC TERM16 
#     -------------- 
#
# ---------------------------------------------------------------------- 
#
# Note the since term17 and term 18 are equivalent up to a permutation 
# which is included later all contributions are multiplied by 2. 
#
      PROC TERM17 
#     ----------- 
#
#     Contributions from Taiai. 
#     ------------------------- 
#
      PARDO a, a1, i1 
#
            allocate Laiai(a,*,a1,i1) 
#
#           (p,q) --> a2,a3 
#           --------------- 
#
            DO a2  
#
               tpppp(a,a2,a1,i1) = 0.0 
#
               DO a3 
#
                  GET                  VSaaai(a3,a2,a1,i1) 
                  GET                  Uyaa(a3,a)  
#
                  t1pppp(a,a2,a1,i1) = VSaaai(a3,a2,a1,i1)*Uyaa(a3,a) 
                  tpppp(a,a2,a1,i1) += t1pppp(a,a2,a1,i1) 
#
               ENDDO a3 
#
               DO i 
#
                  GET                 Uxaa(a2,i) 
                  taiai(a,i,a1,i1)  = tpppp(a,a2,a1,i1)*Uxaa(a2,i) 
                  Laiai(a,i,a1,i1) += taiai(a,i,a1,i1) 
#
               ENDDO i 
#
            ENDDO a2 
#
#           (p,q) --> i2,a3 
#           --------------- 
#
            DO i2  
#
               tpppp(a,i2,a1,i1) = 0.0 
#
               DO a3 
#
                  GET                  VSpipi(a3,i2,a1,i1) 
                  GET                  Uyaa(a3,a)  
#
                  t1pppp(a,i2,a1,i1) = VSpipi(a3,i2,a1,i1)*Uyaa(a3,a) 
                  tpppp(a,i2,a1,i1) += t1pppp(a,i2,a1,i1) 
#
               ENDDO a3 
#
               DO i 
#
                  GET                 Uxaa(i2,i) 
                  taiai(a,i,a1,i1)  = tpppp(a,i2,a1,i1)*Uxaa(i2,i) 
                  Laiai(a,i,a1,i1) += taiai(a,i,a1,i1) 
#
               ENDDO i 
#
            ENDDO i2 
#
#           (p,q) --> a2,i3 
#           --------------- 
#
            DO a2  
#
               tpppp(a,a2,a1,i1) = 0.0 
#
               DO i3 
#
#                 GET                   VSpppp(i3,a2,a1,i1) 
#
                  GET                   Viaai(i3,a2,a1,i1) 
                  GET                   Vaaii(a1,a2,i3,i1) 
                  t2pppp(i3,a2,a1,i1) = Viaai(i3,a2,a1,i1)
                  t3pppp(i3,a2,a1,i1) = Vaaii(a1,a2,i3,i1) 
                  t2pppp(i3,a2,a1,i1)-= t3pppp(i3,a2,a1,i1)  
#
                  GET                   Uyaa(i3,a)  
#
                  t1pppp(a,a2,a1,i1)  = t2pppp(i3,a2,a1,i1)*Uyaa(i3,a) 
                  tpppp(a,a2,a1,i1)  += t1pppp(a,a2,a1,i1) 
#
               ENDDO i3 
#
               DO i 
#
                  GET Uxaa(a2,i) 
                  taiai(a,i,a1,i1)  = tpppp(a,a2,a1,i1)*Uxaa(a2,i) 
                  Laiai(a,i,a1,i1) += taiai(a,i,a1,i1) 
#
               ENDDO i 
#
            ENDDO a2 
#
#           (p,q) --> i2,i3 
#           --------------- 
#
            DO i2  
#
               tpppp(a,i2,a1,i1) = 0.0 
#
               DO i3 
#
                  GET                  VSpipi(i3,i2,a1,i1) 
                  GET                  Uyaa(i3,a)  
#
                  t1pppp(a,i2,a1,i1) = VSpipi(i3,i2,a1,i1)*Uyaa(i3,a) 
                  tpppp(a,i2,a1,i1) += t1pppp(a,i2,a1,i1) 
#
               ENDDO i3 
#
               DO i 
#
                  GET Uxaa(i2,i) 
                  taiai(a,i,a1,i1)  = tpppp(a,i2,a1,i1)*Uxaa(i2,i) 
                  Laiai(a,i,a1,i1) += taiai(a,i,a1,i1) 
#
               ENDDO i 
#
            ENDDO i2 
#
            DO i 
#
               GET       T1aiai_aa(a,i,a1,i1) 
               etemp   = T1aiai_aa(a,i,a1,i1)*Laiai(a,i,a1,i1) 
              #etemp  *=0.5 
               hessxy += etemp 
#
            ENDDO i 
#
            deallocate Laiai(a,*,a1,i1) 
#
      ENDPARDO a, a1, i1 
#
#     Done contributions from Taiai. 
#     ------------------------------ 
#
#     Contributions from Tbjbj. 
#     ------------------------- 
#
      PARDO b, b1, j1 
#
            allocate Lbjbj(b,*,b1,j1) 
#
#           (p,q) --> b2,b3 
#           --------------- 
#
            DO b2  
#
               tqqqq(b,b2,b1,j1) = 0.0 
#
               DO b3 
#
                  GET                  VSbbbj(b3,b2,b1,j1) 
                  GET                  Uybb(b3,b)  
#
                  t1qqqq(b,b2,b1,j1) = VSbbbj(b3,b2,b1,j1)*Uybb(b3,b) 
                  tqqqq(b,b2,b1,j1) += t1qqqq(b,b2,b1,j1) 
#
               ENDDO b3 
#
               DO j 
#
                  GET                 Uxbb(b2,j) 
                  tbjbj(b,j,b1,j1)  = tqqqq(b,b2,b1,j1)*Uxbb(b2,j) 
                  Lbjbj(b,j,b1,j1) += tbjbj(b,j,b1,j1) 
#
               ENDDO j 
#
            ENDDO b2 
#
#           (p,q) --> j2,b3 
#           --------------- 
#
            DO j2  
#
               tqqqq(b,j2,b1,j1) = 0.0 
#
               DO b3 
#
                  GET                  VSqjqj(b3,j2,b1,j1) 
                  GET                  Uybb(b3,b)  
#
                  t1qqqq(b,j2,b1,j1) = VSqjqj(b3,j2,b1,j1)*Uybb(b3,b) 
                  tqqqq(b,j2,b1,j1) += t1qqqq(b,j2,b1,j1) 
#
               ENDDO b3 
#
               DO j 
#
                  GET                 Uxbb(j2,j) 
                  tbjbj(b,j,b1,j1)  = tqqqq(b,j2,b1,j1)*Uxbb(j2,j) 
                  Lbjbj(b,j,b1,j1) += tbjbj(b,j,b1,j1) 
#
               ENDDO j 
#
            ENDDO j2 
#
#           (p,q) --> b2,j3 
#           --------------- 
#
            DO b2  
#
               tqqqq(b,b2,b1,j1) = 0.0 
#
               DO j3 
#
#                 GET                   VSqqqq(j3,b2,b1,j1) 
#
                  GET                   Vjbbj(j3,b2,b1,j1) 
                  GET                   Vbbjj(b1,b2,j3,j1) 
                  t2qqqq(j3,b2,b1,j1) = Vjbbj(j3,b2,b1,j1)
                  t3qqqq(j3,b2,b1,j1) = Vbbjj(b1,b2,j3,j1) 
                  t2qqqq(j3,b2,b1,j1)-= t3qqqq(j3,b2,b1,j1)  
#
                  GET                   Uybb(j3,b)  
#
                  t1qqqq(b,b2,b1,j1) = t2qqqq(j3,b2,b1,j1)*Uybb(j3,b) 
                  tqqqq(b,b2,b1,j1) += t1qqqq(b,b2,b1,j1) 
#
               ENDDO j3 
#
               DO j 
#
                  GET Uxbb(b2,j) 
                  tbjbj(b,j,b1,j1)  = tqqqq(b,b2,b1,j1)*Uxbb(b2,j) 
                  Lbjbj(b,j,b1,j1) += tbjbj(b,j,b1,j1) 
#
               ENDDO j 
#
            ENDDO b2 
#
#           (p,q) --> j2,j3 
#           --------------- 
#
            DO j2  
#
               tqqqq(b,j2,b1,j1) = 0.0 
#
               DO j3 
#
                  GET                  VSqjqj(j3,j2,b1,j1) 
                  GET                  Uybb(j3,b)  
#
                  t1qqqq(b,j2,b1,j1) = VSqjqj(j3,j2,b1,j1)*Uybb(j3,b) 
                  tqqqq(b,j2,b1,j1) += t1qqqq(b,j2,b1,j1) 
#
               ENDDO j3 
#
               DO j 
#
                  GET Uxbb(j2,j) 
                  tbjbj(b,j,b1,j1)  = tqqqq(b,j2,b1,j1)*Uxbb(j2,j) 
                  Lbjbj(b,j,b1,j1) += tbjbj(b,j,b1,j1) 
#
               ENDDO j 
#
            ENDDO j2 
#
            DO j 
#
               GET       T1bjbj_bb(b,j,b1,j1) 
               etemp   = T1bjbj_bb(b,j,b1,j1)*Lbjbj(b,j,b1,j1) 
              #etemp  *=0.5 
               hessxy += etemp 
#
            ENDDO j 
#
            deallocate Lbjbj(b,*,b1,j1) 
#
      ENDPARDO b, b1, j1 
#
#     Done contributions from Tbjbj. 
#     ------------------------------ 
#
#     Contributions from Taibj/Uxaa*Uyaa. 
#     ----------------------------------- 
#
      PARDO a, b, j 
#
            allocate Laibj(a,*,b,j) 
#
#           (p,q) --> (a1,a2) 
#           ----------------- 
#
            DO a1 
#
               tppqq(a,a1,b,j) = 0.0  
#
               DO a2 
#
                  GET                Vaabj(a2,a1,b,j) 
                  GET                Uyaa(a2,a) 
#
                  t1ppqq(a,a1,b,j) = Vaabj(a2,a1,b,j)*Uyaa(a2,a) 
                  tppqq(a,a1,b,j) += t1ppqq(a,a1,b,j)  
#
               ENDDO a2 
#
               DO i 
#
                  GET               Uxaa(a1,i) 
                  taibj(a,i,b,j)  = tppqq(a,a1,b,j)*Uxaa(a1,i) 
                  Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
               ENDDO i 
#
            ENDDO a1 
#
#           (p,q) --> (i1,a2) 
#           ----------------- 
#
            DO i1 
#
               tppqq(a,i1,b,j) = 0.0  
#
               DO a2 
#
                  GET                Vpiqj(a2,i1,b,j) 
                  GET                Uyaa(a2,a) 
#
                  t1ppqq(a,i1,b,j) = Vpiqj(a2,i1,b,j)*Uyaa(a2,a) 
                  tppqq(a,i1,b,j) += t1ppqq(a,i1,b,j)  
#
               ENDDO a2 
#
               DO i 
#
                  GET               Uxaa(i1,i) 
                  taibj(a,i,b,j)  = tppqq(a,i1,b,j)*Uxaa(i1,i) 
                  Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
               ENDDO i 
#
            ENDDO i1 
#
#           (p,q) --> (a1,i2) 
#           ----------------- 
#
            DO a1 
#
               tppqq(a,a1,b,j) = 0.0  
#
               DO i2 
#
                  GET                Viabj(i2,a1,b,j) 
                  GET                Uyaa(i2,a) 
#
                  t1ppqq(a,a1,b,j) = Viabj(i2,a1,b,j)*Uyaa(i2,a) 
                  tppqq(a,a1,b,j) += t1ppqq(a,a1,b,j)  
#
               ENDDO i2 
#
               DO i 
#
                  GET               Uxaa(a1,i) 
                  taibj(a,i,b,j)  = tppqq(a,a1,b,j)*Uxaa(a1,i) 
                  Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
               ENDDO i 
#
            ENDDO a1 
#
#           (p,q) --> (i1,i2) 
#           ----------------- 
#
            DO i1 
#
               tppqq(a,i1,b,j) = 0.0  
#
               DO i2 
#
                  GET                Vpiqj(i2,i1,b,j) 
                  GET                Uyaa(i2,a) 
#
                  t1ppqq(a,i1,b,j) = Vpiqj(i2,i1,b,j)*Uyaa(i2,a) 
                  tppqq(a,i1,b,j) += t1ppqq(a,i1,b,j)  
#
               ENDDO i2 
#
               DO i 
#
                  GET               Uxaa(i1,i) 
                  taibj(a,i,b,j)  = tppqq(a,i1,b,j)*Uxaa(i1,i) 
                  Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
               ENDDO i 
#
            ENDDO i1 
#
            DO i 
#
               GET       T1aibj_ab(a,i,b,j) 
               etemp   = T1aibj_ab(a,i,b,j)*Laibj(a,i,b,j) 
              #etemp  *=0.5 
               hessxy += etemp  
#
            ENDDO i 
#
            deallocate Laibj(a,*,b,j) 
#
      ENDPARDO a, b, j 
#
#     Contributions from Taibj/Uxbb*Uybb. 
#     ----------------------------------- 
#
      PARDO a, b, i 
#
            allocate Laibj(a,i,b,*) 
#
#           (p,q) --> (b1,b2) 
#           ----------------- 
#
            DO b1 
#
               tppqq(a,i,b,b1) = 0.0 
#
               DO b2 
#
                  GET                Vbbai(b2,b1,a,i) 
                  GET                Uybb(b2,b) 
#
                  t1ppqq(a,i,b,b1) = Vbbai(b2,b1,a,i)*Uybb(b2,b) 
                  tppqq(a,i,b,b1) += t1ppqq(a,i,b,b1)  
#
               ENDDO b2 
#
               DO j 
#
                  GET               Uxbb(b1,j) 
                  taibj(a,i,b,j)  = tppqq(a,i,b,b1)*Uxbb(b1,j) 
                  Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
               ENDDO j 
#
            ENDDO b1 
#
#           (p,q) --> (j1,b2) 
#           ----------------- 
#
            DO j1 
#
               tppqq(a,i,b,j1) = 0.0 
#
               DO b2 
#
                  GET                Vpiqj(a,i,b2,j1) 
                  GET                Uybb(b2,b) 
#
                  t1ppqq(a,i,b,j1) = Vpiqj(a,i,b2,j1)*Uybb(b2,b) 
                  tppqq(a,i,b,j1) += t1ppqq(a,i,b,j1)  
#
               ENDDO b2 
#
               DO j 
#
                  GET               Uxbb(j1,j) 
                  taibj(a,i,b,j)  = tppqq(a,i,b,j1)*Uxbb(j1,j) 
                  Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
               ENDDO j 
#
            ENDDO j1 
#
#           (p,q) --> (b1,j2) 
#           ----------------- 
#
            DO b1 
#
               tppqq(a,i,b,b1) = 0.0 
#
               DO j2 
#
                  GET                Viabj(i,a,b1,j2) #j2,b1,a,i) 
                  GET                Uybb(j2,b) 
#
                  t1ppqq(a,i,b,b1) = Viabj(i,a,b1,j2)*Uybb(j2,b) 
                  tppqq(a,i,b,b1) += t1ppqq(a,i,b,b1)  
#
               ENDDO j2 
#
               DO j 
#
                  GET               Uxbb(b1,j) 
                  taibj(a,i,b,j)  = tppqq(a,i,b,b1)*Uxbb(b1,j) 
                  Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
               ENDDO j 
#
            ENDDO b1 
#
#           (p,q) --> (j1,j2) 
#           ----------------- 
#
            DO j1 
#
               tppqq(a,i,b,j1) = 0.0 
#
               DO j2 
#
                  GET                Vpiqj(a,i,j2,j1) 
                  GET                Uybb(j2,b) 
#
                  t1ppqq(a,i,b,j1) = Vpiqj(a,i,j2,j1)*Uybb(j2,b) 
                  tppqq(a,i,b,j1) += t1ppqq(a,i,b,j1)  
#
               ENDDO j2 
#
               DO j 
#
                  GET               Uxbb(j1,j) 
                  taibj(a,i,b,j)  = tppqq(a,i,b,j1)*Uxbb(j1,j) 
                  Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
               ENDDO j 
#
            ENDDO j1 
#
            DO j 
#
               GET       T1aibj_ab(a,i,b,j) 
               etemp   = T1aibj_ab(a,i,b,j)*Laibj(a,i,b,j) 
              #etemp  *=0.5 
               hessxy += etemp 
#
            ENDDO j 
#
            deallocate Laibj(a,i,b,*) 
#
      ENDPARDO a, b, i 
#
#     Contribution from Taibj/Uxii*Uyaa
#     --------------------------------- 
#
      PARDO a, b, i 
#
            allocate Laibj(a,i,b,*) 
#
#           (p,q) --> (b1,a1) 
#           ----------------- 
#
            DO b1 
#
               tppqq(a,i,b,b1) = 0.0 
#    
               DO a1 
#
                  GET                Vbbai(b,b1,a1,i) 
                  GET                Uyaa(a1,a) 
#
                  t1ppqq(a,i,b,b1) = Vbbai(b,b1,a1,i)*Uyaa(a1,a) 
                  tppqq(a,i,b,b1) += t1ppqq(a,i,b,b1) 
#    
               ENDDO a1 
#
               DO j 
#
                  GET               Uxbb(b1,j) 
                  taibj(a,i,b,j)  = tppqq(a,i,b,b1)*Uxbb(b1,j) 
                  Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
               ENDDO j 
#
            ENDDO b1 
#
#           (p,q) --> (b1,i1) 
#           ----------------- 
#
            DO b1 
#
               tppqq(a,i,b,b1) = 0.0 
#    
               DO i1 
#
                  GET                Vbbii(b,b1,i1,i) 
                  GET                Uyaa(i1,a) 
#
                  t1ppqq(a,i,b,b1) = Vbbii(b,b1,i1,i)*Uyaa(i1,a) 
                  tppqq(a,i,b,b1) += t1ppqq(a,i,b,b1) 
#    
               ENDDO i1 
#
               DO j 
#
                  GET               Uxbb(b1,j) 
                  taibj(a,i,b,j)  = tppqq(a,i,b,b1)*Uxbb(b1,j) 
                  Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
               ENDDO j 
#
            ENDDO b1 
#
#           (p,q) --> (j1,a1) 
#           ----------------- 
#
            DO j1 
#
               tppqq(a,i,b,j1) = 0.0 
#    
               DO a1 
#
                  GET                Vpiqj(a1,i,b,j1) 
                  GET                Uyaa(a1,a) 
#
                  t1ppqq(a,i,b,j1) = Vpiqj(a1,i,b,j1)*Uyaa(a1,a) 
                  tppqq(a,i,b,j1) += t1ppqq(a,i,b,j1) 
#    
               ENDDO a1 
#
               DO j 
#
                  GET               Uxbb(j1,j) 
                  taibj(a,i,b,j)  = tppqq(a,i,b,j1)*Uxbb(j1,j) 
                  Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
               ENDDO j 
#
            ENDDO j1 
#
#           (p,q) --> (j1,i1) 
#           ----------------- 
#
            DO j1 
#
               tppqq(a,i,b,j1) = 0.0 
#    
               DO i1 
#
                  GET                Vpiqj(i1,i,b,j1) 
                  GET                Uyaa(i1,a) 
#
                  t1ppqq(a,i,b,j1) = Vpiqj(i1,i,b,j1)*Uyaa(i1,a) 
                  tppqq(a,i,b,j1) += t1ppqq(a,i,b,j1) 
#    
               ENDDO i1 
#
               DO j 
#
                  GET               Uxbb(j1,j) 
                  taibj(a,i,b,j)  = tppqq(a,i,b,j1)*Uxbb(j1,j) 
                  Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
               ENDDO j 
#
            ENDDO j1 
#
            DO j 
#
               GET       T1aibj_ab(a,i,b,j) 
               etemp   = T1aibj_ab(a,i,b,j)*Laibj(a,i,b,j) 
              #etemp  *=0.5 
               hessxy += etemp 
#
            ENDDO j 
#
            deallocate Laibj(a,i,b,*) 
#
      ENDPARDO a, b, i 
#
#     Contribution from Taibj/Uyii*Uxaa
#     --------------------------------- 
#
      PARDO a, b, j 
#
            allocate Laibj(a,*,b,j) 
#
#           (p,q) --> (a1,b1)  
#           ----------------- 
#
            DO a1 
#
               tppqq(a,a1,b,j) = 0.0 
#
               DO b1 
#
                  GET                Vaabj(a,a1,b1,j) 
                  GET                Uybb(b1,b) 
#
                  t1ppqq(a,a1,b,j) = Vaabj(a,a1,b1,j)*Uybb(b1,b)  
                  tppqq(a,a1,b,j) += t1ppqq(a,a1,b,j)  
#
               ENDDO b1 
#
               DO i 
#
                  GET Uxaa(a1,i) 
                  taibj(a,i,b,j)  = tppqq(a,a1,b,j)*Uxaa(a1,i) 
                  Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
               ENDDO i 
#
            ENDDO a1 
#
#           (p,q) --> (i1,b1)  
#           ----------------- 
#
            DO i1 
#
               tppqq(a,i1,b,j) = 0.0 
#
               DO b1 
#
                  GET                Vpiqj(a,i1,b1,j) 
                  GET                Uybb(b1,b) 
#
                  t1ppqq(a,i1,b,j) = Vpiqj(a,i1,b1,j)*Uybb(b1,b)  
                  tppqq(a,i1,b,j) += t1ppqq(a,i1,b,j)  
#
               ENDDO b1 
#
               DO i 
#
                  GET               Uxaa(i1,i) 
                  taibj(a,i,b,j)  = tppqq(a,i1,b,j)*Uxaa(i1,i) 
                  Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
               ENDDO i 
#
            ENDDO i1 
#
#           (p,q) --> (a1,j1)  
#           ----------------- 
#
            DO a1 
#
               tppqq(a,a1,b,j) = 0.0 
#
               DO j1 
#
                  GET                Vaajj(a,a1,j1,j) 
                  GET                Uybb(j1,b) 
#
                  t1ppqq(a,a1,b,j) = Vaajj(a,a1,j1,j)*Uybb(j1,b)  
                  tppqq(a,a1,b,j) += t1ppqq(a,a1,b,j)  
#
               ENDDO j1 
#
               DO i 
#
                  GET               Uxaa(a1,i) 
                  taibj(a,i,b,j)  = tppqq(a,a1,b,j)*Uxaa(a1,i) 
                  Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
               ENDDO i 
#
            ENDDO a1 
#
#           (p,q) --> (i1,j1)  
#           ----------------- 
#
            DO i1 
#
               tppqq(a,i1,b,j) = 0.0 
#
               DO j1 
#
                  GET                Vpiqj(a,i1,j1,j) 
                  GET                Uybb(j1,b) 
#
                  t1ppqq(a,i1,b,j) = Vpiqj(a,i1,j1,j)*Uybb(j1,b)  
                  tppqq(a,i1,b,j) += t1ppqq(a,i1,b,j)  
#
               ENDDO j1 
#
               DO i 
#
                  GET               Uxaa(i1,i) 
                  taibj(a,i,b,j)  = tppqq(a,i1,b,j)*Uxaa(i1,i) 
                  Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
               ENDDO i 
#
            ENDDO i1 
#
            DO i 
#
               GET       T1aibj_ab(a,i,b,j) 
               etemp   = T1aibj_ab(a,i,b,j)*Laibj(a,i,b,j) 
              #etemp  *=0.5 
               hessxy += etemp 
#
            ENDDO i 
#
            deallocate Laibj(a,*,b,j) 
#
      ENDPARDO a, b, j 
#
      ENDPROC TERM17 
#     -------------- 
#
# ---------------------------------------------------------------------- 
#
      PROC TERM18
#     ----------- 
#
#     Contributions from Taiai. 
#     ------------------------- 
#
      PARDO a, a1, i1 
#
            allocate Laiai(a,*,a1,i1) 
#
#           (p,q) --> (a2,a3) 
#           ----------------- 
#
            DO a2 
#
               tpppp(a,a2,a1,i1) = 0.0 
#
               DO a3 
#
                  GET                  VSaaai(a,a2,a3,i1) 
                  GET                  Uyaa(a3,a1) 
#
                  t1pppp(a,a2,a1,i1) = VSaaai(a,a2,a3,i1)*Uyaa(a3,a1) 
                  tpppp(a,a2,a1,i1) += t1pppp(a,a2,a1,i1) 
#
               ENDDO a3 
#
               DO i 
#
                  GET                 Uxaa(a2,i) 
                  taiai(a,i,a1,i1)  = tpppp(a,a2,a1,i1)*Uxaa(a2,i) 
                  Laiai(a,i,a1,i1) += taiai(a,i,a1,i1) 
#
               ENDDO i 
#
            ENDDO a2 
#
#           (p,q) --> (i2,a3) 
#           ----------------- 
#
            DO i2 
#
               tpppp(a,i2,a1,i1) = 0.0 
#
               DO a3 
#
                  GET                  VSpipi(a,i2,a3,i1) 
                  GET                  Uyaa(a3,a1) 
#
                  t1pppp(a,i2,a1,i1) = VSpipi(a,i2,a3,i1)*Uyaa(a3,a1) 
                  tpppp(a,i2,a1,i1) += t1pppp(a,i2,a1,i1) 
#
               ENDDO a3 
#
               DO i 
#
                  GET                 Uxaa(i2,i) 
                  taiai(a,i,a1,i1)  = tpppp(a,i2,a1,i1)*Uxaa(i2,i) 
                  Laiai(a,i,a1,i1) += taiai(a,i,a1,i1) 
#
               ENDDO i 
#
            ENDDO i2 
#
#           (p,q) --> (a2,i3) 
#           ----------------- 
#
            DO a2 
#
               tpppp(a,a2,a1,i1) = 0.0 
#
               DO i3 
#
#                 GET                  VSpppp(a,a2,i3,i1) 
#
                  GET                  Vaaii(a,a2,i3,i1) 
                  GET                  Viaai(i3,a2,a,i1) 
                  t2pppp(a,a2,i3,i1) = Vaaii(a,a2,i3,i1) 
                  t3pppp(a,a2,i3,i1) = Viaai(i3,a2,a,i1) 
                  t2pppp(a,a2,i3,i1)-= t3pppp(a,a2,i3,i1)  
#
                  GET                  Uyaa(i3,a1) 
#
                  t1pppp(a,a2,a1,i1) = t2pppp(a,a2,i3,i1)*Uyaa(i3,a1) 
                  tpppp(a,a2,a1,i1) += t1pppp(a,a2,a1,i1) 
#
               ENDDO i3 
#
               DO i 
#
                  GET                 Uxaa(a2,i) 
                  taiai(a,i,a1,i1)  = tpppp(a,a2,a1,i1)*Uxaa(a2,i) 
                  Laiai(a,i,a1,i1) += taiai(a,i,a1,i1) 
#
               ENDDO i 
#
            ENDDO a2 
#
#           (p,q) --> (i2,i3) 
#           ----------------- 
#
            DO i2 
#
               tpppp(a,i2,a1,i1) = 0.0 
#
               DO i3 
#
                  GET                  VSpipi(a,i2,i3,i1) 
                  GET                  Uyaa(i3,a1) 
#
                  t1pppp(a,i2,a1,i1) = VSpipi(a,i2,i3,i1)*Uyaa(i3,a1) 
                  tpppp(a,i2,a1,i1) += t1pppp(a,i2,a1,i1) 
#
               ENDDO i3 
#
               DO i 
#
                  GET                 Uxaa(i2,i) 
                  taiai(a,i,a1,i1)  = tpppp(a,i2,a1,i1)*Uxaa(i2,i) 
                  Laiai(a,i,a1,i1) += taiai(a,i,a1,i1) 
#
               ENDDO i 
#
            ENDDO i2 
#
            DO i 
#
               GET       T1aiai_aa(a,i,a1,i1) 
               etemp   = T1aiai_aa(a,i,a1,i1)*Laiai(a,i,a1,i1) 
              #etemp  *=0.5 
               hessxy += etemp  
#
            ENDDO i 
#
            deallocate Laiai(a,*,a1,i1) 
#
      ENDPARDO a, a1, i1 
#
#     Done contributions from Taiai. 
#     ------------------------------ 
#
#     Contributions from Tbjbj. 
#     ------------------------- 
#
      PARDO b, b1, j1 
#
            allocate Lbjbj(b,*,b1,j1) 
#
#           (p,q) --> (b2,b3) 
#           ----------------- 
#
            DO b2 
#
               tqqqq(b,b2,b1,j1) = 0.0 
#
               DO b3 
#
                  GET                  VSbbbj(b,b2,b3,j1) 
                  GET                  Uybb(b3,b1) 
#
                  t1qqqq(b,b2,b1,j1) = VSbbbj(b,b2,b3,j1)*Uybb(b3,b1) 
                  tqqqq(b,b2,b1,j1) += t1qqqq(b,b2,b1,j1) 
#
               ENDDO b3 
#
               DO j 
#
                  GET                 Uxbb(b2,j) 
                  tbjbj(b,j,b1,j1)  = tqqqq(b,b2,b1,j1)*Uxbb(b2,j) 
                  Lbjbj(b,j,b1,j1) += tbjbj(b,j,b1,j1) 
#
               ENDDO j 
#
            ENDDO b2 
#
#           (p,q) --> (j2,b3) 
#           ----------------- 
#
            DO j2 
#
               tqqqq(b,j2,b1,j1) = 0.0 
#
               DO b3 
#
                  GET                  VSqjqj(b,j2,b3,j1) 
                  GET                  Uybb(b3,b1) 
#
                  t1qqqq(b,j2,b1,j1) = VSqjqj(b,j2,b3,j1)*Uybb(b3,b1) 
                  tqqqq(b,j2,b1,j1) += t1qqqq(b,j2,b1,j1) 
#
               ENDDO b3 
#
               DO j 
#
                  GET                 Uxbb(j2,j) 
                  tbjbj(b,j,b1,j1)  = tqqqq(b,j2,b1,j1)*Uxbb(j2,j) 
                  Lbjbj(b,j,b1,j1) += tbjbj(b,j,b1,j1) 
#
               ENDDO j 
#
            ENDDO j2 
#
#           (p,q) --> (b2,j3) 
#           ----------------- 
#
            DO b2 
#
               tqqqq(b,b2,b1,j1) = 0.0 
#
               DO j3 
#
#                 GET                  VSqqqq(b,b2,j3,j1) 
#
                  GET                  Vbbjj(b,b2,j3,j1) 
                  GET                  Vjbbj(j3,b2,b,j1) 
                  t2qqqq(b,b2,j3,j1) = Vbbjj(b,b2,j3,j1) 
                  t3qqqq(b,b2,j3,j1) = Vjbbj(j3,b2,b,j1) 
                  t2qqqq(b,b2,j3,j1)-= t3qqqq(b,b2,j3,j1)  
#
                  GET                  Uybb(j3,b1) 
#
                  t1qqqq(b,b2,b1,j1) = t2qqqq(b,b2,j3,j1)*Uybb(j3,b1) 
                  tqqqq(b,b2,b1,j1) += t1qqqq(b,b2,b1,j1) 
#
               ENDDO j3 
#
               DO j 
#
                  GET                 Uxbb(b2,j) 
                  tbjbj(b,j,b1,j1)  = tqqqq(b,b2,b1,j1)*Uxbb(b2,j) 
                  Lbjbj(b,j,b1,j1) += tbjbj(b,j,b1,j1) 
#
               ENDDO j 
#
            ENDDO b2 
#
#           (p,q) --> (j2,j3) 
#           ----------------- 
#
            DO j2 
#
               tqqqq(b,j2,b1,j1) = 0.0 
#
               DO j3 
#
                  GET                  VSqjqj(b,j2,j3,j1) 
                  GET                  Uybb(j3,b1) 
#
                  t1qqqq(b,j2,b1,j1) = VSqjqj(b,j2,j3,j1)*Uybb(j3,b1) 
                  tqqqq(b,j2,b1,j1) += t1qqqq(b,j2,b1,j1) 
#
               ENDDO j3 
#
               DO j 
#
                  GET                 Uxbb(j2,j) 
                  tbjbj(b,j,b1,j1)  = tqqqq(b,j2,b1,j1)*Uxbb(j2,j) 
                  Lbjbj(b,j,b1,j1) += tbjbj(b,j,b1,j1) 
#
               ENDDO j 
#
            ENDDO j2 
#
            DO j 
#
               GET       T1bjbj_bb(b,j,b1,j1) 
               etemp   = T1bjbj_bb(b,j,b1,j1)*Lbjbj(b,j,b1,j1) 
              #etemp  *=0.5 
               hessxy += etemp  
#
            ENDDO j 
#
            deallocate Lbjbj(b,*,b1,j1) 
#
      ENDPARDO b, b1, j1 
#
#     Done contributions from Tbjbj. 
#     ------------------------------ 
#
#     Contributions from Taibj: Part1. 
#     --------------------------------  
#
      PARDO a, b, j 
#
            allocate Laibj(a,*,b,j) 
#
#           (p,q) --> (a1,b1) 
#           ----------------- 
#
            DO a1 
#
               tppqq(a,a1,b,j) = 0.0 
#
               DO b1 
#
                  GET                Vaabj(a,a1,b1,j) 
                  GET                Uybb(b1,b) 
#
                  t1ppqq(a,a1,b,j) = Vaabj(a,a1,b1,j)*Uybb(b1,b) 
                  tppqq(a,a1,b,j) += t1ppqq(a,a1,b,j) 
#
               ENDDO b1 
#
               DO i 
#
                  GET               Uxaa(a1,i) 
                  taibj(a,i,b,j)  = tppqq(a,a1,b,j)*Uxaa(a1,i) 
                  Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
               ENDDO i 
#
            ENDDO a1 
#
#           (p,q) --> (i1,b1) 
#           ----------------- 
#
            DO i1 
#
               tppqq(a,i1,b,j) = 0.0 
#
               DO b1 
#
                  GET                Vpiqj(a,i1,b1,j) 
                  GET                Uybb(b1,b) 
#
                  t1ppqq(a,i1,b,j) = Vpiqj(a,i1,b1,j)*Uybb(b1,b) 
                  tppqq(a,i1,b,j) += t1ppqq(a,i1,b,j) 
#
               ENDDO b1 
#
               DO i 
#
                  GET               Uxaa(i1,i) 
                  taibj(a,i,b,j)  = tppqq(a,i1,b,j)*Uxaa(i1,i) 
                  Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
               ENDDO i 
#
            ENDDO i1 
#
#           (p,q) --> (a1,j1) 
#           ----------------- 
#
            DO a1 
#
               tppqq(a,a1,b,j) = 0.0 
#
               DO j1 
#
                  GET                Vaajj(a,a1,j1,j) 
                  GET                Uybb(j1,b) 
#
                  t1ppqq(a,a1,b,j) = Vaajj(a,a1,j1,j)*Uybb(j1,b) 
                  tppqq(a,a1,b,j) += t1ppqq(a,a1,b,j) 
#
               ENDDO j1 
#
               DO i 
#
                  GET               Uxaa(a1,i) 
                  taibj(a,i,b,j)  = tppqq(a,a1,b,j)*Uxaa(a1,i) 
                  Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
               ENDDO i 
#
            ENDDO a1 
#
#           (p,q) --> (i1,j1) 
#           ----------------- 
#
            DO i1 
#
               tppqq(a,i1,b,j) = 0.0 
#
               DO j1 
#
                  GET                Vpiqj(a,i1,j1,j) 
                  GET                Uybb(j1,b) 
#
                  t1ppqq(a,i1,b,j) = Vpiqj(a,i1,j1,j)*Uybb(j1,b) 
                  tppqq(a,i1,b,j) += t1ppqq(a,i1,b,j) 
#
               ENDDO j1 
#
               DO i 
#
                  GET               Uxaa(i1,i) 
                  taibj(a,i,b,j)  = tppqq(a,i1,b,j)*Uxaa(i1,i) 
                  Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
               ENDDO i 
#
            ENDDO i1 
#
            DO i 
#
               GET       T1aibj_ab(a,i,b,j) 
               etemp   = T1aibj_ab(a,i,b,j)*Laibj(a,i,b,j) 
              #etemp  *=0.5
               hessxy += etemp 
#
            ENDDO i 
#
            deallocate Laibj(a,*,b,j) 
#
      ENDPARDO a, b, j 
#
#     Done contributions from Taibj: Part1. 
#     -------------------------------------  
#
#     Contributions from Taibj: Part2. 
#     --------------------------------  
#
      PARDO a, b, i 
#
            allocate Laibj(a,i,b,*) 
#
#           (p,q) --> (b1,a1) 
#           ----------------- 
#
            DO b1 
#
               tppqq(a,i,b,b1) = 0.0  
#
               DO a1 
#
                  GET                Vbbai(b,b1,a1,i) 
                  GET                Uyaa(a1,a) 
#
                  t1ppqq(a,i,b,b1) = Vbbai(b,b1,a1,i)*Uyaa(a1,a) 
                  tppqq(a,i,b,b1) += t1ppqq(a,i,b,b1)  
#
               ENDDO a1 
#
               DO j 
#
                  GET               Uxbb(b1,j) 
                  taibj(a,i,b,j)  = tppqq(a,i,b,b1)*Uxbb(b1,j) 
                  Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
               ENDDO j 
#
            ENDDO b1 
#
#           (p,q) --> (b1,i1) 
#           ----------------- 
#
            DO b1 
#
               tppqq(a,i,b,b1) = 0.0  
#
               DO i1 
#
                  GET                Vbbii(b,b1,i1,i) 
                  GET                Uyaa(i1,a) 
#
                  t1ppqq(a,i,b,b1) = Vbbii(b,b1,i1,i)*Uyaa(i1,a) 
                  tppqq(a,i,b,b1) += t1ppqq(a,i,b,b1)  
#
               ENDDO i1 
#
               DO j 
#
                  GET               Uxbb(b1,j) 
                  taibj(a,i,b,j)  = tppqq(a,i,b,b1)*Uxbb(b1,j) 
                  Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
               ENDDO j 
#
            ENDDO b1 
#
#           (p,q) --> (j1,a1) 
#           ----------------- 
#
            DO j1 
#
               tppqq(a,i,b,j1) = 0.0  
#
               DO a1 
#
                  GET                Vpiqj(a1,i,b,j1) 
                  GET                Uyaa(a1,a) 
#
                  t1ppqq(a,i,b,j1) = Vpiqj(a1,i,b,j1)*Uyaa(a1,a) 
                  tppqq(a,i,b,j1) += t1ppqq(a,i,b,j1)  
#
               ENDDO a1 
#
               DO j 
#
                  GET               Uxbb(j1,j) 
                  taibj(a,i,b,j)  = tppqq(a,i,b,j1)*Uxbb(j1,j) 
                  Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
               ENDDO j 
#
            ENDDO j1 
#
#           (p,q) --> (j1,i1) 
#           ----------------- 
#
            DO j1 
#
               tppqq(a,i,b,j1) = 0.0  
#
               DO i1 
#
                  GET                Vpiqj(i1,i,b,j1) 
                  GET                Uyaa(i1,a) 
#
                  t1ppqq(a,i,b,j1) = Vpiqj(i1,i,b,j1)*Uyaa(i1,a) 
                  tppqq(a,i,b,j1) += t1ppqq(a,i,b,j1)  
#
               ENDDO i1 
#
               DO j 
#
                  GET               Uxbb(j1,j) 
                  taibj(a,i,b,j)  = tppqq(a,i,b,j1)*Uxbb(j1,j) 
                  Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
               ENDDO j 
#
            ENDDO j1 
#
            DO j 
#
               GET       T1aibj_ab(a,i,b,j) 
               etemp   = T1aibj_ab(a,i,b,j)*Laibj(a,i,b,j) 
              #etemp  *=0.5 
               hessxy += etemp 
#
            ENDDO j 
#
            deallocate Laibj(a,i,b,*) 
#
      ENDPARDO a, b, i 
#
#     Done contributions from Taibj: Part2. 
#     -------------------------------------  
#
#     Contributions from Taibj: Part3. 
#     --------------------------------  
#
      PARDO a, b, i 
#
           allocate Laibj(a,i,b,*) 
#
#          (p,q) --> (b1,b2) 
#          ----------------- 
#
           DO b1 
#
              tppqq(a,i,b,b1) = 0.0 
#
              DO b2 
#
                 GET                Vbbai(b2,b1,a,i) 
                 GET                Uybb(b2,b) 
#
                 t1ppqq(a,i,b,b1) = Vbbai(b2,b1,a,i)*Uybb(b2,b) 
                 tppqq(a,i,b,b1) += t1ppqq(a,i,b,b1)  
#
              ENDDO b2 
#
              DO j 
#
                 GET               Uxbb(b1,j) 
                 taibj(a,i,b,j)  = tppqq(a,i,b,b1)*Uxbb(b1,j) 
                 Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
              ENDDO j 
#
           ENDDO b1 
#
#          (p,q) --> (j1,b2) 
#          ----------------- 
#
           DO j1 
#
              tppqq(a,i,b,j1) = 0.0 
#
              DO b2 
#
                 GET                Vpiqj(a,i,b2,j1) 
                 GET                Uybb(b2,b) 
#
                 t1ppqq(a,i,b,j1) = Vpiqj(a,i,b2,j1)*Uybb(b2,b) 
                 tppqq(a,i,b,j1) += t1ppqq(a,i,b,j1)  
#
              ENDDO b2 
#
              DO j 
#
                 GET               Uxbb(j1,j) 
                 taibj(a,i,b,j)  = tppqq(a,i,b,j1)*Uxbb(j1,j) 
                 Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
              ENDDO j 
#
           ENDDO j1 
#
#          (p,q) --> (b1,j2) 
#          ----------------- 
#
           DO b1 
#
              tppqq(a,i,b,b1) = 0.0 
#
              DO j2 
#
                 GET                Viabj(i,a,b1,j2) #(a,i,j2,b1) 
                 GET                Uybb(j2,b) 
#
                 t1ppqq(a,i,b,b1) = Viabj(i,a,b1,j2)*Uybb(j2,b) 
                 tppqq(a,i,b,b1) += t1ppqq(a,i,b,b1)  
#
              ENDDO j2 
#
              DO j 
#
                 GET               Uxbb(b1,j) 
                 taibj(a,i,b,j)  = tppqq(a,i,b,b1)*Uxbb(b1,j) 
                 Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
              ENDDO j 
#
           ENDDO b1 
#
#          (p,q) --> (j1,j2) 
#          ----------------- 
#
           DO j1 
#
              tppqq(a,i,b,j1) = 0.0 
#
              DO j2 
#
                 GET                Vpiqj(a,i,j2,j1) 
                 GET                Uybb(j2,b) 
#
                 t1ppqq(a,i,b,j1) = Vpiqj(a,i,j2,j1)*Uybb(j2,b) 
                 tppqq(a,i,b,j1) += t1ppqq(a,i,b,j1)  
#
              ENDDO j2 
#
              DO j 
#
                 GET               Uxbb(j1,j) 
                 taibj(a,i,b,j)  = tppqq(a,i,b,j1)*Uxbb(j1,j) 
                 Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
              ENDDO j 
#
           ENDDO j1 
#
           DO j 
#
              GET       T1aibj_ab(a,i,b,j) 
              etemp   = T1aibj_ab(a,i,b,j)*Laibj(a,i,b,j) 
             #etemp  *=0.5
              hessxy += etemp 
#
           ENDDO j 
#
           deallocate Laibj(a,i,b,*) 
#
      ENDPARDO a, b, i 
#
#     Done contributions from Taibj: Part3. 
#     -------------------------------------  
#
#     Contributions from Taibj: Part4. 
#     --------------------------------  
#
      PARDO a, b, j 
#
            allocate Laibj(a,*,b,j) 
#
#           (p,q) --> (a1,a2) 
#           ----------------- 
#
            DO a1 
#
               tppqq(a,a1,b,j) = 0.0  
#
               DO a2 
#
                  GET                Vaabj(a2,a1,b,j) 
                  GET                Uyaa(a2,a) 
#
                  t1ppqq(a,a1,b,j) = Vaabj(a2,a1,b,j)*Uyaa(a2,a) 
                  tppqq(a,a1,b,j) += t1ppqq(a,a1,b,j) 
#
               ENDDO a2 
#
               DO i 
#
                  GET               Uxaa(a1,i) 
                  taibj(a,i,b,j)  = tppqq(a,a1,b,j)*Uxaa(a1,i) 
                  Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
               ENDDO i 
#
            ENDDO a1 
#
#           (p,q) --> (i1,a2) 
#           ----------------- 
#
            DO i1 
#
               tppqq(a,i1,b,j) = 0.0  
#
               DO a2 
#
                  GET                Vpiqj(a2,i1,b,j) 
                  GET                Uyaa(a2,a) 
#
                  t1ppqq(a,i1,b,j) = Vpiqj(a2,i1,b,j)*Uyaa(a2,a) 
                  tppqq(a,i1,b,j) += t1ppqq(a,i1,b,j) 
#
               ENDDO a2 
#
               DO i 
#
                  GET               Uxaa(i1,i) 
                  taibj(a,i,b,j)  = tppqq(a,i1,b,j)*Uxaa(i1,i) 
                  Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
               ENDDO i 
#
            ENDDO i1 
#
#           (p,q) --> (a1,i2) 
#           ----------------- 
#
            DO a1 
#
               tppqq(a,a1,b,j) = 0.0  
#
               DO i2 
#
                  GET                Viabj(i2,a1,b,j) 
                  GET                Uyaa(i2,a) 
#
                  t1ppqq(a,a1,b,j) = Viabj(i2,a1,b,j)*Uyaa(i2,a) 
                  tppqq(a,a1,b,j) += t1ppqq(a,a1,b,j) 
#
               ENDDO i2 
#
               DO i 
#
                  GET               Uxaa(a1,i) 
                  taibj(a,i,b,j)  = tppqq(a,a1,b,j)*Uxaa(a1,i) 
                  Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
               ENDDO i 
#
            ENDDO a1 
#
#           (p,q) --> (i1,i2) 
#           ----------------- 
#
            DO i1 
#
               tppqq(a,i1,b,j) = 0.0  
#
               DO i2 
#
                  GET                Vpiqj(i2,i1,b,j) 
                  GET                Uyaa(i2,a) 
#
                  t1ppqq(a,i1,b,j) = Vpiqj(i2,i1,b,j)*Uyaa(i2,a) 
                  tppqq(a,i1,b,j) += t1ppqq(a,i1,b,j) 
#
               ENDDO i2 
#
               DO i 
#
                  GET               Uxaa(i1,i) 
                  taibj(a,i,b,j)  = tppqq(a,i1,b,j)*Uxaa(i1,i) 
                  Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
               ENDDO i 
#
            ENDDO i1 
#
            DO i 
#
               GET       T1aibj_ab(a,i,b,j) 
               etemp   = T1aibj_ab(a,i,b,j)*Laibj(a,i,b,j)
              #etemp  *=0.5 
               hessxy += etemp 
#
            ENDDO i 
#
            deallocate Laibj(a,*,b,j) 
#
      ENDPARDO a, b, j 
#
      ENDPROC TERM18
#     -------------- 
#
# ---------------------------------------------------------------------- 
#
      PROC TERM21 
#     ----------- 
#
#     Contribution from Taiai. 
#     ------------------------ 
#
      PARDO a, i, i1  
#
            allocate Laiai(a,i,*,i1) 
#
#           (p,q) --> (a2,a3) 
#           ----------------- 
#
            DO a3 
#
               tpppp(a,i,a3,i1) = 0.0 
#
               DO a2 
#
                  GET                 VSpipi(a2,i,a3,i1) 
                  GET                 Uxaa(a2,a) 
#
                  t1pppp(a,i,a3,i1) = VSpipi(a2,i,a3,i1)*Uxaa(a2,a)  
                  tpppp(a,i,a3,i1) += t1pppp(a,i,a3,i1)
#
               ENDDO a2 
#
               DO a1 
#
                  GET                 Uyaa(a3,a1) 
                  taiai(a,i,a1,i1)  = tpppp(a,i,a3,i1)*Uyaa(a3,a1) 
                  Laiai(a,i,a1,i1) += taiai(a,i,a1,i1)   
#
               ENDDO a1 
#
            ENDDO a3 
#
#           (p,q) --> (i2,a3) 
#           ----------------- 
#
            DO a3 
#
               tpppp(a,i,a3,i1) = 0.0 
#
               DO i2 
#
                  GET                 VSpipi(i2,i,a3,i1) 
                  GET                 Uxaa(i2,a) 
#
                  t1pppp(a,i,a3,i1) = VSpipi(i2,i,a3,i1)*Uxaa(i2,a)  
                  tpppp(a,i,a3,i1) += t1pppp(a,i,a3,i1)
#
               ENDDO i2 
#
               DO a1 
#
                  GET                 Uyaa(a3,a1) 
                  taiai(a,i,a1,i1)  = tpppp(a,i,a3,i1)*Uyaa(a3,a1) 
                  Laiai(a,i,a1,i1) += taiai(a,i,a1,i1)   
#
               ENDDO a1 
#
            ENDDO a3 
#
#           (p,q) --> (a2,i3) 
#           ----------------- 
#
            DO i3 
#
               tpppp(a,i,i3,i1) = 0.0 
#
               DO a2 
#
                  GET                 VSpipi(a2,i,i3,i1) 
                  GET                 Uxaa(a2,a) 
#
                  t1pppp(a,i,i3,i1) = VSpipi(a2,i,i3,i1)*Uxaa(a2,a)  
                  tpppp(a,i,i3,i1) += t1pppp(a,i,i3,i1)
#
               ENDDO a2 
#
               DO a1 
#
                  GET                 Uyaa(i3,a1) 
                  taiai(a,i,a1,i1)  = tpppp(a,i,i3,i1)*Uyaa(i3,a1) 
                  Laiai(a,i,a1,i1) += taiai(a,i,a1,i1)   
#
               ENDDO a1 
#
            ENDDO i3 
#
#           (p,q) --> (i2,i3) 
#           ----------------- 
#
            DO i3 
#
               tpppp(a,i,i3,i1) = 0.0 
#
               DO i2 
#
                  GET                 VSpipi(i2,i,i3,i1) 
                  GET                 Uxaa(i2,a) 
#
                  t1pppp(a,i,i3,i1) = VSpipi(i2,i,i3,i1)*Uxaa(i2,a)  
                  tpppp(a,i,i3,i1) += t1pppp(a,i,i3,i1)
#
               ENDDO i2 
#
               DO a1 
#
                  GET                 Uyaa(i3,a1) 
                  taiai(a,i,a1,i1)  = tpppp(a,i,i3,i1)*Uyaa(i3,a1) 
                  Laiai(a,i,a1,i1) += taiai(a,i,a1,i1)   
#
               ENDDO a1 
#
            ENDDO i3 
#
            DO a1 
#
               GET       T1aiai_aa(a,i,a1,i1) 
               etemp   = T1aiai_aa(a,i,a1,i1)*Laiai(a,i,a1,i1) 
               etemp  *=0.5 
               hessxy += etemp 
#
            ENDDO a1 
#
            deallocate Laiai(a,i,*,i1) 
#
      ENDPARDO a, i, i1  
#
#     End contribution from Taiai. 
#     ---------------------------- 
#
#     Contribution from Tbjbj. 
#     ------------------------ 
#
      PARDO b, j, j1  
#
            allocate Lbjbj(b,j,*,j1) 
#
#           (p,q) --> (b2,b3) 
#           ----------------- 
#
            DO b3 
#
               tqqqq(b,j,b3,j1) = 0.0 
#
               DO b2 
#
                  GET                 VSqjqj(b2,j,b3,j1) 
                  GET                 Uxbb(b2,b) 
#
                  t1qqqq(b,j,b3,j1) = VSqjqj(b2,j,b3,j1)*Uxbb(b2,b)  
                  tqqqq(b,j,b3,j1) += t1qqqq(b,j,b3,j1)
#
               ENDDO b2 
#
               DO b1 
#
                  GET                 Uybb(b3,b1) 
                  tbjbj(b,j,b1,j1)  = tqqqq(b,j,b3,j1)*Uybb(b3,b1) 
                  Lbjbj(b,j,b1,j1) += tbjbj(b,j,b1,j1)   
#
               ENDDO b1 
#
            ENDDO b3 
#
#           (p,q) --> (j2,b3) 
#           ----------------- 
#
            DO b3 
#
               tqqqq(b,j,b3,j1) = 0.0 
#
               DO j2 
#
                  GET                 VSqjqj(j2,j,b3,j1) 
                  GET                 Uxbb(j2,b) 
#
                  t1qqqq(b,j,b3,j1) = VSqjqj(j2,j,b3,j1)*Uxbb(j2,b)  
                  tqqqq(b,j,b3,j1) += t1qqqq(b,j,b3,j1)
#
               ENDDO j2 
#
               DO b1 
#
                  GET                 Uybb(b3,b1) 
                  tbjbj(b,j,b1,j1)  = tqqqq(b,j,b3,j1)*Uybb(b3,b1) 
                  Lbjbj(b,j,b1,j1) += tbjbj(b,j,b1,j1)   
#
               ENDDO b1 
#
            ENDDO b3 
#
#           (p,q) --> (b2,j3) 
#           ----------------- 
#
            DO j3 
#
               tqqqq(b,j,j3,j1) = 0.0 
#
               DO b2 
#
                  GET                 VSqjqj(b2,j,j3,j1) 
                  GET                 Uxbb(b2,b) 
#
                  t1qqqq(b,j,j3,j1) = VSqjqj(b2,j,j3,j1)*Uxbb(b2,b)  
                  tqqqq(b,j,j3,j1) += t1qqqq(b,j,j3,j1)
#
               ENDDO b2 
#
               DO b1 
#
                  GET                 Uybb(j3,b1) 
                  tbjbj(b,j,b1,j1)  = tqqqq(b,j,j3,j1)*Uybb(j3,b1) 
                  Lbjbj(b,j,b1,j1) += tbjbj(b,j,b1,j1)   
#
               ENDDO b1 
#
            ENDDO j3 
#
#           (p,q) --> (j2,j3) 
#           ----------------- 
#
            DO j3 
#
               tqqqq(b,j,j3,j1) = 0.0 
#
               DO j2 
#
                  GET                 VSqjqj(j2,j,j3,j1) 
                  GET                 Uxbb(j2,b) 
#
                  t1qqqq(b,j,j3,j1) = VSqjqj(j2,j,j3,j1)*Uxbb(j2,b)  
                  tqqqq(b,j,j3,j1) += t1qqqq(b,j,j3,j1)
#
               ENDDO j2 
#
               DO b1 
#
                  GET                 Uybb(j3,b1) 
                  tbjbj(b,j,b1,j1)  = tqqqq(b,j,j3,j1)*Uybb(j3,b1) 
                  Lbjbj(b,j,b1,j1) += tbjbj(b,j,b1,j1)   
#
               ENDDO b1 
#
            ENDDO j3 
#
            DO b1 
#
               GET       T1bjbj_bb(b,j,b1,j1) 
               etemp   = T1bjbj_bb(b,j,b1,j1)*Lbjbj(b,j,b1,j1) 
               etemp  *=0.5 
               hessxy += etemp 
#
            ENDDO b1 
#
            deallocate Lbjbj(b,j,*,j1) 
#
      ENDPARDO b, j, j1  
#
#     End contribution from Tbjbj. 
#     ---------------------------- 
#
#     Contribution from Taibj. 
#     ------------------------ 
#
      PARDO b, i, j 
#
            allocate Laibj(*,i,b,j) 
#
#           (p,q) --> (a1,b1) 
#           ----------------- 
#
            DO a1 
#
               tppqq(a1,i,b,j) = 0.0 
#
               DO b1 
#
                  GET                Vpiqj(a1,i,b1,j) 
                  GET                Uybb(b1,b) 
#
                  t1ppqq(a1,i,b,j) = Vpiqj(a1,i,b1,j)*Uybb(b1,b) 
                  tppqq(a1,i,b,j) += t1ppqq(a1,i,b,j)  
#
               ENDDO b1 
#
               DO a 
#
                  GET               Uxaa(a1,a) 
                  taibj(a,i,b,j)  = tppqq(a1,i,b,j)*Uxaa(a1,a) 
                  Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
               ENDDO a 
#
            ENDDO a1 
#
#           (p,q) --> (i1,b1) 
#           ----------------- 
#
            DO i1 
#
               tppqq(i1,i,b,j) = 0.0 
#
               DO b1 
#
                  GET                Vpiqj(i1,i,b1,j) 
                  GET                Uybb(b1,b) 
#
                  t1ppqq(i1,i,b,j) = Vpiqj(i1,i,b1,j)*Uybb(b1,b) 
                  tppqq(i1,i,b,j) += t1ppqq(i1,i,b,j)  
#
               ENDDO b1 
#
               DO a 
#
                  GET               Uxaa(i1,a) 
                  taibj(a,i,b,j)  = tppqq(i1,i,b,j)*Uxaa(i1,a) 
                  Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
               ENDDO a 
#
            ENDDO i1 
#
#           (p,q) --> (a1,j1) 
#           ----------------- 
#
            DO a1 
#
               tppqq(a1,i,b,j) = 0.0 
#
               DO j1 
#
                  GET                Vpiqj(a1,i,j1,j) 
                  GET                Uybb(j1,b) 
#
                  t1ppqq(a1,i,b,j) = Vpiqj(a1,i,j1,j)*Uybb(j1,b) 
                  tppqq(a1,i,b,j) += t1ppqq(a1,i,b,j)  
#
               ENDDO j1 
#
               DO a 
#
                  GET               Uxaa(a1,a) 
                  taibj(a,i,b,j)  = tppqq(a1,i,b,j)*Uxaa(a1,a) 
                  Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
               ENDDO a 
#
            ENDDO a1 
#
#           (p,q) --> (i1,j1) 
#           ----------------- 
#
            DO i1 
#
               tppqq(i1,i,b,j) = 0.0 
#
               DO j1 
#
                  GET                Vpiqj(i1,i,j1,j) 
                  GET                Uybb(j1,b) 
#
                  t1ppqq(i1,i,b,j) = Vpiqj(i1,i,j1,j)*Uybb(j1,b) 
                  tppqq(i1,i,b,j) += t1ppqq(i1,i,b,j)  
#
               ENDDO j1 
#
               DO a 
#
                  GET               Uxaa(i1,a) 
                  taibj(a,i,b,j)  = tppqq(i1,i,b,j)*Uxaa(i1,a) 
                  Laibj(a,i,b,j) += taibj(a,i,b,j) 
#
               ENDDO a 
#
            ENDDO i1 
#
            DO a 
#
               GET       T1aibj_ab(a,i,b,j) 
               etemp   = T1aibj_ab(a,i,b,j)*Laibj(a,i,b,j) 
               etemp  *= 2.0 
               hessxy += etemp 
#
            ENDDO a 
#
            deallocate Laibj(*,i,b,j) 
#
      ENDPARDO b, i, j 
#
#     End contribution from Taibj. 
#     ---------------------------- 
#
      ENDPROC TERM21 
#     -------------- 
#
# ---------------------------------------------------------------------- 
#
      PROC TERM16P
#     ------------
#
      PARDO a, b, i, j
#
            tppqq(a,i,b,j) = 0.0
#
#           (p,q) --> (a1,b1)
#           -----------------
#
            DO a1
            DO b1
#
               GET Uxaa(a1,i)
               GET Uybb(b1,j)
               GET Vaabb(a,a1,b,b1)
#
               T2ppqq(a1,i,b1,j) = Uxaa(a1,i)^Uybb(b1,j)
               T1ppqq(a,i,b,j) = T2ppqq(a1,i,b1,j)*Vaabb(a,a1,b,b1)
               tppqq(a,i,b,j) += t1ppqq(a,i,b,j)
#
            ENDDO b1
            ENDDO a1
#
            GET T1aibj_ab(a,i,b,j)
            etemp = T1aibj_ab(a,i,b,j)*tppqq(a,i,b,j)
            etemp *= 0.5
            hessxy += etemp
#
      ENDPARDO a, b, i, j
#
      PARDO a, b, i, j
#
            tppqq(a,i,b,j) = 0.0
#
#           (p,q) --> (i1,b1)
#           -----------------
#
            DO i1
            DO b1
#
               GET Uxaa(i1,i)
               GET Uybb(b1,j)
               GET Vbbai(b,b1,a,i)
#
               T2ppqq(i1,i,b1,j) = Uxaa(i1,i)^Uybb(b1,j)
               T1ppqq(a,i,b,j) = T2ppqq(i1,i,b1,j)*Vbbai(b,b1,a,i1)
               tppqq(a,i,b,j) += t1ppqq(a,i,b,j)
#
            ENDDO b1
            ENDDO i1
#
            GET T1aibj_ab(a,i,b,j)
            etemp = T1aibj_ab(a,i,b,j)*tppqq(a,i,b,j)
            etemp *= 0.5
            hessxy += etemp
#
      ENDPARDO a, b, i, j
#
      PARDO a, b, i, j
#
            tppqq(a,i,b,j) = 0.0
#
#           (p,q) --> (a1,j1)
#           -----------------
#
            DO a1
            DO j1
#
               GET Uxaa(a1,i)
               GET Uybb(j1,j)
               GET Vaabj(a,a1,b,j1)
#
               T2ppqq(a1,i,j1,j) = Uxaa(a1,i)^Uybb(j1,j)
               T1ppqq(a,i,b,j) = T2ppqq(a1,i,j1,j)*Vaabj(a,a1,b,j1)
               tppqq(a,i,b,j) += t1ppqq(a,i,b,j)
#
            ENDDO j1
            ENDDO a1
#
            GET T1aibj_ab(a,i,b,j)
            etemp = T1aibj_ab(a,i,b,j)*tppqq(a,i,b,j)
            etemp *= 0.5
            hessxy += etemp
#
      ENDPARDO a, b, i, j
#
      PARDO a, b, i, j
#
            tppqq(a,i,b,j) = 0.0
#
#           (p,q) --> (i1,j1)
#           -----------------
#
            DO i1
            DO j1
#
               GET Uxaa(i1,i)
               GET Uybb(j1,j)
               GET Vpiqj(a,i1,b,j1)
#
               T2ppqq(i1,i,j1,j) = Uxaa(i1,i)^Uybb(j1,j)
               T1ppqq(a,i,b,j) = T2ppqq(i1,i,j1,j)*Vpiqj(a,i1,b,j1)
               tppqq(a,i,b,j) += t1ppqq(a,i,b,j)
#
            ENDDO j1
            ENDDO i1
#
            GET T1aibj_ab(a,i,b,j)
            etemp = T1aibj_ab(a,i,b,j)*tppqq(a,i,b,j)
            etemp *= 0.5
            hessxy += etemp
#
      ENDPARDO a, b, i, j
#
      ENDPROC TERM16P
#     ---------------
#
      PROC TERM21P 
#     ------------ 
#
      PARDO a, b, i, j 
#
            tppqq(a,i,b,j) = 0.0 
#
#          (p,q) --> (a1,b1) 
#          ----------------- 
#
            DO a1 
            DO b1 
#
               GET Uxaa(a1,a) 
               GET Uybb(b1,b) 
               GET Vpiqj(a1,i,b1,j) 
#
               T2ppqq(a1,a,b1,b) = Uxaa(a1,a)^Uybb(b1,b)
               t1ppqq(a,i,b,j) = t2ppqq(a1,a,b1,b)*Vpiqj(a1,i,b1,j) 
               tppqq(a,i,b,j) += t1ppqq(a,i,b,j) 
#
            ENDDO b1 
            ENDDO a1 
#
            GET T1aibj_ab(a,i,b,j) 
            etemp = T1aibj_ab(a,i,b,j)*tppqq(a,i,b,j) 
            etemp *= -0.5 
            hessxy += etemp 
#
      ENDPARDO a, b, i, j 
#
      PARDO a, b, i, j 
#
            tppqq(a,i,b,j) = 0.0 
#
#          (p,q) --> (a1,j1) 
#          ----------------- 
#
            DO a1 
            DO j1 
#
               GET Uxaa(a1,a) 
               GET Uybb(j1,b) 
               GET Vpiqj(a1,i,j1,j) 
#
               T2ppqq(a1,a,j1,b) = Uxaa(a1,a)^Uybb(j1,b)
               t1ppqq(a,i,b,j) = t2ppqq(a1,a,j1,b)*Vpiqj(a1,i,j1,j) 
               tppqq(a,i,b,j) += t1ppqq(a,i,b,j) 
#
            ENDDO j1 
            ENDDO a1 
#
            GET T1aibj_ab(a,i,b,j) 
            etemp = T1aibj_ab(a,i,b,j)*tppqq(a,i,b,j) 
            etemp *= -0.5 
            hessxy += etemp 
#
      ENDPARDO a, b, i, j 
#
      PARDO a, b, i, j 
#
            tppqq(a,i,b,j) = 0.0 
#
#          (p,q) --> (i1,j1) 
#          ----------------- 
#
            DO i1 
            DO j1 
#
               GET Uxaa(i1,a) 
               GET Uybb(j1,b) 
               GET Vpiqj(i1,i,j1,j) 
#
               T2ppqq(i1,a,j1,b) = Uxaa(i1,a)^Uybb(j1,b)
               t1ppqq(a,i,b,j) = t2ppqq(i1,a,j1,b)*Vpiqj(i1,i,j1,j) 
               tppqq(a,i,b,j) += t1ppqq(a,i,b,j) 
#
            ENDDO j1 
            ENDDO i1 
#
            GET T1aibj_ab(a,i,b,j) 
            etemp = T1aibj_ab(a,i,b,j)*tppqq(a,i,b,j) 
            etemp *= -0.5 
            hessxy += etemp 
#
      ENDPARDO a, b, i, j 
#
      PARDO a, b, i, j 
#
            tppqq(a,i,b,j) = 0.0 
#
#          (p,q) --> (i1,b1) 
#          ----------------- 
#
            DO i1 
            DO b1 
#
               GET Uxaa(i1,a) 
               GET Uybb(b1,b) 
               GET Vpiqj(i1,i,b1,j) 
#
               T2ppqq(i1,a,b1,b) = Uxaa(i1,a)^Uybb(b1,b)
               t1ppqq(a,i,b,j) = t2ppqq(i1,a,b1,b)*Vpiqj(i1,i,b1,j) 
               tppqq(a,i,b,j) += t1ppqq(a,i,b,j) 
#
            ENDDO b1 
            ENDDO i1 
#
            GET T1aibj_ab(a,i,b,j) 
            etemp = T1aibj_ab(a,i,b,j)*tppqq(a,i,b,j) 
            etemp *= -0.5 
            hessxy += etemp 
#
      ENDPARDO a, b, i, j 
#
      ENDPROC TERM21P 
#     --------------- 
#
# ---------------------------------------------------------------------- 
#
# An alternate computation of the derivative of the Fock matrix is 
# performed in this procedure. 
#
# ---------------------------------------------------------------------- 
#
      PROC FDER 
#     --------- 
#
      delete Fxa 
      delete Fxb 
#
      create XAB 
      create XA 
      create XB 
      create YAB 
      create YA 
      create YB 
#
      create Fxa
      create Fxb 
      create Ha 
      create Hb 
      execute sip_barrier 
#
#     Contribution from one-particle Hamiltonian. 
#     ------------------------------------------- 
#
#     Compute h^x_{pq}. 
#     ----------------- 
#
      PARDO mu, nu
#
            execute fock_der txx(mu,nu) 
#
            DO p
#
               txp(mu,p) = txx(mu,nu)*ca(nu,p)
#
               DO p1
#
                  tpp(p1,p)      = txp(mu,p)*ca(mu,p1)
                  PUT Fxa(p1,p) += tpp(p1,p)
#
               ENDDO p1
#
            ENDDO p
#
            DO q
#
               txq(mu,q) = txx(mu,nu)*cb(nu,q)
#
               DO q1
#
                  tqq(q1,q)      = txq(mu,q)*cb(mu,q1)
                  PUT Fxb(q1,q) += tqq(q1,q)
#
               ENDDO q1
#
            ENDDO q
#
      ENDPARDO mu, nu
#
#     Compute U^x_{sp}h_{sq} + U^x_{sq}h_{ps} 
#     --------------------------------------- 
#
      PARDO mu, nu
#
            execute return_h1 txx(mu,nu) 
#
            DO p
#
               txp(mu,p) = txx(mu,nu)*ca(nu,p)
#
               DO p1
#
                  tpp(p1,p)     = txp(mu,p)*ca(mu,p1)
                  PUT Ha(p1,p) += tpp(p1,p)
#
               ENDDO p1
#
            ENDDO p
#
            DO q
#
               txq(mu,q) = txx(mu,nu)*cb(nu,q)
#
               DO q1
#
                  tqq(q1,q)     = txq(mu,q)*cb(mu,q1)
                  PUT Hb(q1,q) += tqq(q1,q)
#
               ENDDO q1
#
            ENDDO q
#
      ENDPARDO mu, nu
#
      execute sip_barrier 
#
      PARDO p, p1 
#
            tpp(p,p1) = 0.0 
#
            DO p2 
#
               GET Uxaa(p2,p) 
               GET Ha(p2,p1) 
#
               t1pp(p,p1) = Uxaa(p2,p)*Ha(p2,p1) 
               tpp(p,p1) += t1pp(p,p1)  
#
               GET Uxaa(p2,p1) 
               GET Ha(p,p2) 
#
               t1pp(p,p1) = Uxaa(p2,p1)*Ha(p,p2)
               tpp(p,p1) += t1pp(p,p1)  
#
            ENDDO p2 
#
            PUT Fxa(p,p1) += tpp(p,p1) 
#
      ENDPARDO p, p1 
#
      PARDO q, q1 
#
            tqq(q,q1) = 0.0 
#
            DO q2 
#
               GET Uxbb(q2,q) 
               GET Hb(q2,q1) 
#
               t1qq(q,q1) = Uxbb(q2,q)*Hb(q2,q1) 
               tqq(q,q1) += t1qq(q,q1)  
#
               GET Uxbb(q2,q1) 
               GET Hb(q,q2) 
#
               t1qq(q,q1) = Uxbb(q2,q1)*Hb(q,q2)
               tqq(q,q1) += t1qq(q,q1)  
#
            ENDDO q2 
#
            PUT Fxb(q,q1) += tqq(q,q1) 
#
      ENDPARDO q, q1 
#
#     Done contribution from one-particle Hamiltonian. 
#     ------------------------------------------------ 
#
#     Contribution from two-particle Hamiltonian. 
#     ------------------------------------------- 
#
      create cxa 
      create cxb 
      create dhfxa 
      create dhfxb 
      execute sip_barrier 
#
#     Compute derivatives of coefficients. 
#     ------------------------------------ 
#
      PARDO mu, i 
#
           txp(mu,i) = 0.0 
#
           DO p1 
#
              GET Uxaa(p1,i) 
              t1xp(mu,i) = ca(mu,p1)*Uxaa(p1,i) 
              txp(mu,i) += t1xp(mu,i) 
#
           ENDDO p1 
#
           PUT cxa(mu,i) = txp(mu,i) 
#
      ENDPARDO mu, i 
#
      PARDO mu, j 
#
           txq(mu,j) = 0.0 
#
           DO q1 
#
              GET Uxbb(q1,j) 
              t1xq(mu,j) = cb(mu,q1)*Uxbb(q1,j) 
              txq(mu,j) += t1xq(mu,j) 
#
           ENDDO q1 
#
           PUT cxb(mu,j) = txq(mu,j) 
#
      ENDPARDO mu, j 
#
      execute sip_barrier 
#
#     Form derivatives of HF density. 
#     ------------------------------- 
#
      PARDO mu, nu 
#
#           alpha component. 
#           ---------------- 
#
            txx(mu,nu) = 0.0 
#
            DO i 
#
               GET cxa(mu,i) 
               GET cxa(nu,i) 
#
               t1xx(mu,nu) = cxa(mu,i)*ca(nu,i) 
               txx(mu,nu) += t1xx(mu,nu) 
#
               t1xx(mu,nu) = ca(mu,i)*cxa(nu,i) 
               txx(mu,nu) += t1xx(mu,nu) 
#
            ENDDO i 
#
            PUT dhfxa(mu,nu) = txx(mu,nu) 
#
#           beta component. 
#           --------------- 
#
            txx(mu,nu) = 0.0 
#
            DO j 
#
               GET cxb(mu,j) 
               GET cxb(nu,j) 
#
               t1xx(mu,nu) = cxb(mu,j)*cb(nu,j) 
               txx(mu,nu) += t1xx(mu,nu) 
#
               t1xx(mu,nu) = cb(mu,j)*cxb(nu,j) 
               txx(mu,nu) += t1xx(mu,nu) 
#
            ENDDO j 
#
            PUT dhfxb(mu,nu) = txx(mu,nu) 
#
      ENDPARDO mu, nu 
#
      execute sip_barrier 
#
      PARDO mu, nu, lambda, sigma 
#
            compute_integrals saoint(mu,lambda,nu,sigma) 
#
            GET Dhfa(nu,sigma) 
            GET Dhfb(nu,sigma) 
            txx(nu,sigma) = Dhfa(nu,sigma) 
            txx(nu,sigma)+= Dhfb(nu,sigma) 
#
            t1xx(mu,lambda) = saoint(mu,lambda,nu,sigma)*txx(nu,sigma) 
#
            DO p 
#
               GET cxa(mu,p) 
               tpx(p,lambda) = t1xx(mu,lambda)*cxa(mu,p) 
#
               DO p1 
#
                  tpp(p,p1) = tpx(p,lambda)*ca(lambda,p1)  
                  PUT Fxa(p,p1) += tpp(p,p1) 
#
               ENDDO p1 
#
            ENDDO p 
#
      ENDPARDO mu, nu, lambda, sigma 
#
      execute sip_barrier 
#
      delete cxa 
      delete cxb 
      delete dhfxa 
      delete dhfxb 
#
      delete XAB 
      delete XA 
      delete XB 
      delete YAB 
      delete YA 
      delete YB 
      delete HA 
      delete HB 
#
      ENDPROC FDER 
#     ------------ 
#
# --------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------
#
      PROC DT2AMP
#     -----------
#
#     Construct the derivative T-amplitudes for the y-perturbation.
#     -------------------------------------------------------------
#
      create T2yFullaa 
      create T2yFullab 
      create T2yFullbb 
#
      execute sip_barrier 
#
#     alpha-alpha first 
#     ----------------- 
#
      PARDO a, a1, i, i1 
#
            GET                 DTpppi(a,i,a1,i1) 
            GET                 DTpppi(a,i1,a1,i)
#
            tpppp(a,i,a1,i1)  = DTpppi(a,i,a1,i1)  
            t1pppp(a,i,a1,i1) = DTpppi(a,i1,a1,i) 
            tpppp(a,i,a1,i1) -= t1pppp(a,i,a1,i1)
#
            DO a2 
#
               GET VSpipi(a2,i,a1,i1) 
               GET Uyaa(a2,a) 
#
               t1pppp(a,i,a1,i1) = VSpipi(a2,i,a1,i1)*Uyaa(a2,a)
               tpppp(a,i,a1,i1) += t1pppp(a,i,a1,i1)
#
            ENDDO a2 
#
            DO i2  
#
               GET VSpipi(i2,i,a1,i1) 
               GET Uyaa(i2,a) 
#
               t1pppp(a,i,a1,i1) = VSpipi(i2,i,a1,i1)*Uyaa(i2,a)
               tpppp(a,i,a1,i1) += t1pppp(a,i,a1,i1)
#
            ENDDO i2 
#
            DO a2 
#
               GET VSpipi(a,i,a2,i1) 
               GET Uyaa(a2,a1) 
#
               t1pppp(a,i,a1,i1) = VSpipi(a,i,a2,i1)*Uyaa(a2,a1)  
               tpppp(a,i,a1,i1) += t1pppp(a,i,a1,i1)
#
            ENDDO a2 
#
            DO i2 
#
               GET VSpipi(a,i,i2,i1) 
               GET Uyaa(i2,a1) 
#
               t1pppp(a,i,a1,i1) = VSpipi(a,i,i2,i1)*Uyaa(i2,a1)  
               tpppp(a,i,a1,i1) += t1pppp(a,i,a1,i1)
#
            ENDDO i2 
#
            DO a2 
#
               GET VSaaai(a,a2,a1,i1) 
               GET Uyaa(a2,i) 
#
               t1pppp(a,i,a1,i1) = VSaaai(a,a2,a1,i1)*Uyaa(a2,i) 
               tpppp(a,i,a1,i1) += t1pppp(a,i,a1,i1)
#
            ENDDO a2 
#
            DO i2 
#
               GET VSpipi(a,i2,a1,i1) 
               GET Uyaa(i2,i) 
#
               t1pppp(a,i,a1,i1) = VSpipi(a,i2,a1,i1)*Uyaa(i2,i) 
               tpppp(a,i,a1,i1) += t1pppp(a,i,a1,i1)
#
            ENDDO i2 
#
            DO a2 
#
               GET VSaaai(a1,a2,a,i) 
               GET Uyaa(a2,i1)  
#
               t1pppp(a,i,a1,i1) = VSaaai(a1,a2,a,i)*Uyaa(a2,i1) 
               tpppp(a,i,a1,i1) += t1pppp(a,i,a1,i1)
#
            ENDDO a2 
#
            DO i2 
#
               GET VSpipi(a,i,a1,i2) 
               GET Uyaa(i2,i1)  
#
               t1pppp(a,i,a1,i1) = VSpipi(a,i,a1,i2)*Uyaa(i2,i1) 
               tpppp(a,i,a1,i1) += t1pppp(a,i,a1,i1)
#
            ENDDO i2 
#
            DO i2
#
               GET T1aiai_aa(a,i2,a1,i1)
               GET Fya(i2,i)
#
               t1pppp(a,i,a1,i1) = T1aiai_aa(a,i2,a1,i1)*Fya(i2,i)
               tpppp(a,i,a1,i1) -= t1pppp(a,i,a1,i1)
#
            ENDDO i2
#
            DO i2
#
               GET T1aiai_aa(a,i,a1,i2)
               GET Fya(i2,i1)
#
               t1pppp(a,i,a1,i1) = T1aiai_aa(a,i,a1,i2)*Fya(i2,i1)
               tpppp(a,i,a1,i1) -= t1pppp(a,i,a1,i1)
#
            ENDDO i2
#
            DO a2
#
               GET T1aiai_aa(a2,i,a1,i1)
               GET Fya(a2,a)
#
               t1pppp(a,i,a1,i1) = T1aiai_aa(a2,i,a1,i1)*Fya(a2,a)
               tpppp(a,i,a1,i1) += t1pppp(a,i,a1,i1)
#
            ENDDO a2
#
            DO a2
#
               GET T1aiai_aa(a,i,a2,i1)
               GET Fya(a2,a1)
#
               t1pppp(a,i,a1,i1) = T1aiai_aa(a,i,a2,i1)*Fya(a2,a1)
               tpppp(a,i,a1,i1) += t1pppp(a,i,a1,i1)
#
            ENDDO a2
#
            execute                    energy_denominator tpppp(a,i,a1,i1)
            PUT T2yFullaa(a,i,a1,i1) = tpppp(a,i,a1,i1)
#
      ENDPARDO a, a1, i, i1 
#
#     beta-beta spin next  
#     ------------------- 
#
      PARDO b, b1, j, j1 
#
            GET DTqqqj(b,j,b1,j1) 
            GET DTqqqj(b,j1,b1,j) 
#
            tqqqq(b,j,b1,j1)  = DTqqqj(b,j,b1,j1)  
            t1qqqq(b,j,b1,j1) = DTqqqj(b,j1,b1,j)  
            tqqqq(b,j,b1,j1) -= t1qqqq(b,j,b1,j1)
#
            DO b2 
#
               GET VSqjqj(b2,j,b1,j1) 
               GET Uybb(b2,b) 
#
               t1qqqq(b,j,b1,j1) = VSqjqj(b2,j,b1,j1)*Uybb(b2,b)
               tqqqq(b,j,b1,j1) += t1qqqq(b,j,b1,j1)
#
            ENDDO b2 
#
            DO j2  
#
               GET VSqjqj(j2,j,b1,j1) 
               GET Uybb(j2,b) 
#
               t1qqqq(b,j,b1,j1) = VSqjqj(j2,j,b1,j1)*Uybb(j2,b)
               tqqqq(b,j,b1,j1) += t1qqqq(b,j,b1,j1)
#
            ENDDO j2 
#
            DO b2 
#
               GET VSqjqj(b,j,b2,j1) 
               GET Uybb(b2,b1) 
#
               t1qqqq(b,j,b1,j1) = VSqjqj(b,j,b2,j1)*Uybb(b2,b1)  
               tqqqq(b,j,b1,j1) += t1qqqq(b,j,b1,j1)
#
            ENDDO b2 
#
            DO j2 
#
               GET VSqjqj(b,j,j2,j1) 
               GET Uybb(j2,b1) 
#
               t1qqqq(b,j,b1,j1) = VSqjqj(b,j,j2,j1)*Uybb(j2,b1)  
               tqqqq(b,j,b1,j1) += t1qqqq(b,j,b1,j1)
#
            ENDDO j2 
#
            DO b2 
#
               GET VSbbbj(b,b2,b1,j1) 
               GET Uybb(b2,j) 
#
               t1qqqq(b,j,b1,j1) = VSbbbj(b,b2,b1,j1)*Uybb(b2,j) 
               tqqqq(b,j,b1,j1) += t1qqqq(b,j,b1,j1)
#
            ENDDO b2 
#
            DO j2 
#
               GET VSqjqj(b,j2,b1,j1) 
               GET Uybb(j2,j) 
#
               t1qqqq(b,j,b1,j1) = VSqjqj(b,j2,b1,j1)*Uybb(j2,j) 
               tqqqq(b,j,b1,j1) += t1qqqq(b,j,b1,j1)
#
            ENDDO j2 
#
            DO b2 
#
               GET VSbbbj(b1,b2,b,j) 
               GET Uybb(b2,j1)  
#
               t1qqqq(b,j,b1,j1) = VSbbbj(b1,b2,b,j)*Uybb(b2,j1) 
               tqqqq(b,j,b1,j1) += t1qqqq(b,j,b1,j1)
#
            ENDDO b2 
#
            DO j2 
#
               GET VSqjqj(b,j,b1,j2) 
               GET Uybb(j2,j1)  
#
               t1qqqq(b,j,b1,j1) = VSqjqj(b,j,b1,j2)*Uybb(j2,j1) 
               tqqqq(b,j,b1,j1) += t1qqqq(b,j,b1,j1)
#
            ENDDO j2 
#
            DO j2
#
               GET T1bjbj_bb(b,j2,b1,j1)
               GET Fyb(j2,j)
#
               t1qqqq(b,j,b1,j1) = T1bjbj_bb(b,j2,b1,j1)*Fyb(j2,j)
               tqqqq(b,j,b1,j1) -= t1qqqq(b,j,b1,j1)
#
            ENDDO j2
#
            DO j2
#
               GET T1bjbj_bb(b,j,b1,j2)
               GET Fyb(j2,j1)
#
               t1qqqq(b,j,b1,j1) = T1bjbj_bb(b,j,b1,j2)*Fyb(j2,j1)
               tqqqq(b,j,b1,j1) -= t1qqqq(b,j,b1,j1)
#
            ENDDO j2
#
            DO b2
#
               GET T1bjbj_bb(b2,j,b1,j1)
               GET Fyb(b2,b)
#
               t1qqqq(b,j,b1,j1) = T1bjbj_bb(b2,j,b1,j1)*Fyb(b2,b)
               tqqqq(b,j,b1,j1) += t1qqqq(b,j,b1,j1)
#
            ENDDO b2
#
            DO b2
#
               GET T1bjbj_bb(b,j,b2,j1)
               GET Fyb(b2,b1)
#
               t1qqqq(b,j,b1,j1) = T1bjbj_bb(b,j,b2,j1)*Fyb(b2,b1)
               tqqqq(b,j,b1,j1) += t1qqqq(b,j,b1,j1)
#
            ENDDO b2
#
            execute                    energy_denominator tqqqq(b,j,b1,j1)
            PUT T2yFullbb(b,j,b1,j1) = tqqqq(b,j,b1,j1)
#
      ENDPARDO b, b1, j, j1 
#
#     alpha-beta spin last  
#     --------------------  
#
      PARDO a, b, i, j 
#
            GET              DTppqj(a,i,b,j) 
            tppqq(a,i,b,j) = DTppqj(a,i,b,j)  
#
            DO a2 
#
               GET Vpiqj(a2,i,b,j) 
               GET Uyaa(a2,a) 
#
               t1ppqq(a,i,b,j) = Vpiqj(a2,i,b,j)*Uyaa(a2,a)
               tppqq(a,i,b,j) += t1ppqq(a,i,b,j)
#
            ENDDO a2 
#
            DO i2  
#
               GET Vpiqj(i2,i,b,j) 
               GET Uyaa(i2,a) 
#
               t1ppqq(a,i,b,j) = Vpiqj(i2,i,b,j)*Uyaa(i2,a)
               tppqq(a,i,b,j) += t1ppqq(a,i,b,j)
#
            ENDDO i2 
#
            DO b2 
#
               GET Vpiqj(a,i,b2,j) 
               GET Uybb(b2,b) 
#
               t1ppqq(a,i,b,j) = Vpiqj(a,i,b2,j)*Uybb(b2,b)  
               tppqq(a,i,b,j) += t1ppqq(a,i,b,j)
#
            ENDDO b2 
#
            DO j2 
#
               GET Vpiqj(a,i,j2,j) 
               GET Uybb(j2,b) 
#
               t1ppqq(a,i,b,j) = Vpiqj(a,i,j2,j)*Uybb(j2,b)  
               tppqq(a,i,b,j) += t1ppqq(a,i,b,j)
#
            ENDDO j2 
#
            DO a2 
#
               GET Vaabj(a,a2,b,j) 
               GET Uyaa(a2,i) 
#
               t1ppqq(a,i,b,j) = Vaabj(a,a2,b,j)*Uyaa(a2,i) 
               tppqq(a,i,b,j) += t1ppqq(a,i,b,j)
#
            ENDDO a2 
#
            DO i2 
#
               GET Vpiqj(a,i2,b,j) 
               GET Uyaa(i2,i) 
#
               t1ppqq(a,i,b,j) = Vpiqj(a,i2,b,j)*Uyaa(i2,i) 
               tppqq(a,i,b,j) += t1ppqq(a,i,b,j)
#
            ENDDO i2 
#
            DO b2 
#
               GET Vbbai(b,b2,a,i) 
               GET Uybb(b2,j)  
#
               t1ppqq(a,i,b,j) = Vbbai(b,b2,a,i)*Uybb(b2,j) 
               tppqq(a,i,b,j) += t1ppqq(a,i,b,j)
#
            ENDDO b2 
#
            DO j2 
#
               GET Vpiqj(a,i,b,j2) 
               GET Uybb(j2,j)  
#
               t1ppqq(a,i,b,j) = Vpiqj(a,i,b,j2)*Uybb(j2,j) 
               tppqq(a,i,b,j) += t1ppqq(a,i,b,j)
#
            ENDDO j2 
#
            DO i1
#
               GET T1aibj_ab(a,i1,b,j)
               GET Fya(i1,i)
#
               t1ppqq(a,i,b,j) = T1aibj_ab(a,i1,b,j)*Fya(i1,i)
               tppqq(a,i,b,j) -= t1ppqq(a,i,b,j)
#
            ENDDO i1
#
            DO j1
#
               GET T1aibj_ab(a,i,b,j1)
               GET Fyb(j1,j)
#
               t1ppqq(a,i,b,j) = T1aibj_ab(a,i,b,j1)*Fyb(j1,j)
               tppqq(a,i,b,j) -= t1ppqq(a,i,b,j)
#
            ENDDO j1
#
            DO a1
#
               GET T1aibj_ab(a1,i,b,j)
               GET Fya(a,a1)
#
               t1ppqq(a,i,b,j) = T1aibj_ab(a1,i,b,j)*Fya(a,a1)
               tppqq(a,i,b,j) += t1ppqq(a,i,b,j)
#
            ENDDO a1
#
            DO b1
#
               GET T1aibj_ab(a,i,b1,j)
               GET Fyb(b,b1)
#
               t1ppqq(a,i,b,j) = T1aibj_ab(a,i,b1,j)*Fyb(b,b1)
               tppqq(a,i,b,j) += t1ppqq(a,i,b,j)
#
            ENDDO b1
#
            execute                  energy_denominator tppqq(a,i,b,j)
            PUT T2yFullab(a,i,b,j) = tppqq(a,i,b,j)
#
      ENDPARDO a, b, i, j
#
      ENDPROC DT2AMP
#     --------------
#
# ---------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------
#
#                  BEGIN  MAIN PROGRAM 
#
# ---------------------------------------------------------------------------
#
# First compute unperturbed quantities
# ------------------------------------
#
#     1. 2-electron integral transformation 
#     2. First order amplitudes T2aiai, T2bjbj, T2aibj   
#     3. Intermediate Ipq/Xai  
#     4. Density Dpq  
#
# 1. Two-electron integral transformation. 
# ---------------------------------------- 
#
      CALL TRAN_UHF
      execute server_barrier
      execute sip_barrier
#
# 2. First order amplitudes T2aiai, T2bjbj, T2aibj, t1ai, t2bj. 
# -------------------------------------------------------------  
#
      ecrit = 0.00000000001 
#
      CALL T2AA_REFERANCE #--> compute the rohf referance amplitudes T2aa  
      CALL T2BB_REFERANCE #--> compute the rohf referance amplitudes T2bb  
      CALL T2AB_REFERANCE #--> compute the rohf referance amplitudes T2bb  
      CALL UHF_ENERGY     #--> compute final total rohf correlation energy 
# 3. Occupied-occupied and virtual-virtual blocks of the density.
# ---------------------------------------------------------------
#
      CALL DENSIJ
      CALL DENSAB
      CALL HFDENS
      execute sip_barrier 
#
# 4. One-particle intermediates Ipq and Xai and virtual-occupied block of the density.
# ------------------------------------------------------------------------------------
#
      CALL PINTER
      CALL DENSAI
      CALL I11 
      execute sip_barrier 
#
# Done compute unperturbed quantities.
# ------------------------------------
#
#     Now consider the contributions from second-derivative integrals.
#     ----------------------------------------------------------------
#
#     Transform the intermediates I to the AO basis.
#     ----------------------------------------------
#
      CALL I_TRANS
      CALL I_HF
#
#     Transform the one-particle density to the AO basis.
#     ---------------------------------------------------
#
      CALL D_TRANS
      execute sip_barrier 
#
#     'Contract' the backtransformed intermediates with S''.
#     ------------------------------------------------------
#
      CALL SXY_CONT   # Passed 
#
#     'Contract' the backtransformed density with H''.
#     ------------------------------------------------
#
      CALL DXY_CONT # --> PROBLEMS 
#
#     'Contract' the backtransformed gamma array with <mu nu|lambda sigma>^x.
#     -----------------------------------------------------------------------
#
      CALL GIJAB_CONT  # Passed 
#
# Loop over unique Hessian elements. The Hessian will be viewed as a two
# dimensional array HESS(x,y). The first loop will be over y the second
# over x. Contribtions from products of first derivatives will be
# considered first.
# ----------------------------------------------------------------------
#
      DO jatom 
#
      DO jx 
#
#        Set flags --> perturbation. 
#        --------------------------- 
#
         execute set_flags2 dflags2(jatom,jx)   
#
#        Compute the perturbed quantities DTpppi, DTqqqj, DTppqi
#        and DTqqpi.
#        --> Transformed first-derivative two-electron integrals.
#        ------------------------------------------------------------
#
         CALL DINT_TRAN 
#
#        Compute the perturbed quantities Fya and Fyb, Sya and Syb.
#        --> Transformed first-derivative one-electron integrals.
#        ------------------------------------------------------------
#
         CALL SINTY_TRAN 
#
#        Compute CHF coefficients. 
#        ------------------------- 
#
         CALL QYAI_H 
         CALL Uy_XX  
         execute sip_barrier 
         CALL FORM_UYAI  
         CALL FINTY_TRAN 
         execute sip_barrier 
#
#        Prepare perturbed arrays used to complete the HF hessian. 
#        --------------------------------------------------------- 
#
         CALL FSCF_HESS 

#        COMPLETE DERIVATIVE TWO-ELECTRON INTEGRALS 
#        ------------------------------------------ 
#
        #CALL VY_UY --> OBSOLETE  
#
#        Compute the perturbed amplitudes --> TPaiai, TPbjbj, TPaibj.
#        ------------------------------------------------------------
#
         CALL PAMP 
#
#        Put perturbed amplitudes into proper arrays to be used in contractions.
#        -----------------------------------------------------------------------
#
         CALL PUT_PAMPY 
#
#        Compute derivatives of T-amplitudes.
#        ------------------------------------
#
         CALL DT2AMP
#
         DO iatom 
#
         DO ix 
#
#           Zero out the hessian element. 
#           ----------------------------- 
#
            hessxy                   = 0.0 
            phessxy                  = 0.0 
            thess(jatom,jx,iatom,ix) = 2.0 
#
#           Set flags --> perturbation. 
#           --------------------------- 
#
            execute set_flags2 dflags2(iatom,ix)   
#
#           Form transformed perturbed two-electron integrals. 
#           -------------------------------------------------- 
#
            CALL TRAN_VX_XIXI 
#
#           Compute the perturbed quantities Fxa and Fxb, Sxa and Sxb.
#           --> Transformed first-derivative one-electron integrals.
#           ----------------------------------------------------------
#
            CALL SINTX_TRAN 
            execute sip_barrier 
#
#           Compute CHF coefficients. 
#           ------------------------- 
#
            CALL QXAI_H 
            execute sip_barrier 
            CALL Ux_XX  
            execute sip_barrier 
            CALL FORM_UXAI  
#
            CALL FINTX_TRAN 
            execute sip_barrier 
#
#           COMPLETE DERIVATIVE TWO-ELECTRON INTEGRALS 
#           ------------------------------------------ 
#
            CALL VX_UX 
#
#           Compute term4. 
#           -------------- 
#
            CALL T2PERVPERT  
#
#           Compute terms 5-9
#           ----------------- 
#
            CALL PART1  
#
#           Compute terms 10-15  
#           -------------------  
#
            CALL TERM14 # --> 
            CALL TERM15 # -->  
            CALL PART2  # -->  
#
#           Compute terms 16-21 
#           ------------------- 
#
            CALL TERM16 # -->  
#
            CALL TERM17 # -->  
#
            CALL TERM18 # -->  
#
            CALL TERM21 # --> 
#
#           Remove x-perturbed distributed arrays. 
#           -------------------------------------- 
#
            execute sip_barrier
            delete Fxa 
            delete Fxb 
            delete Sxa 
            delete Sxb 
            delete Uxaa  
            delete Uxbb  
            delete Qxai 
            delete Qxbj 
#
            delete QAxx
            delete QBxx
            delete QABxx
#
            delete VXpipi
            delete VXpiqj 
            delete VXqjqj 
#
            delete VXSFullaa 
            delete VXSFullbb 
            delete VXFullab 
#
            collective phessxy += hessxy  
            execute print_scalar phessxy 
            thess(jatom,jx,iatom,ix) *= phessxy  
            execute read_hess thess(jatom,jx,iatom,ix) 
#
         ENDDO ix 
#
         ENDDO iatom 
#
#        Remove distributed arrays not used anymore. 
#        ------------------------------------------- 
#
         execute sip_barrier 
#
         delete DTpppi 
         delete DTqqqj  
         delete DTppqj 
         delete DTqqpi 
         delete Fya 
         delete Fyb 
         delete Sya 
         delete Syb 
         delete Uyaa  
         delete Uybb  
         delete Qyai 
         delete Qybj 
         delete dhfya 
         delete dhfyb 
         delete whfya 
         delete whfyb 
#
         delete QAyy 
         delete QByy 
         delete QAByy 
#
         delete T2yaa 
         delete T2yab 
         delete T2ybb 
#
         delete T2yFullaa 
         delete T2yFullab 
         delete T2yFullbb 
#
      ENDDO jx 
#
      ENDDO jatom 
#
#     Print out the final hessian without the nuclear-nuclear contribution. 
#     --------------------------------------------------------------------- 
#
                   ENDSIAL UHF_HESS_PRELIM
#
# ---------------------------------------------------------------------------
#
