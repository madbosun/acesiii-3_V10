#  Copyright (c) 1997-1999, 2003 Massachusetts Institute of Technology
# 
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
#  USA
#
			SIAL EOMCCSD_UHF_AO
# THIS IS THE MOST UP TO DATE DIP(UHF) CODE AS OF OCT22 
#
#***********************************************************
#
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#
# Declare indeces
#
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      index kiter    = 1, cc_iter
#
      aoindex mu     = 1, norb
      aoindex nu     = 1, norb
      aoindex lambda = 1, norb
      aoindex sigma  = 1, norb
#
      moaindex i = baocc, eaocc
      moaindex i1= baocc, eaocc
      moaindex i2= baocc, eaocc
      moaindex i3= baocc, eaocc
#
      moaindex a = bavirt, eavirt
      moaindex a1= bavirt, eavirt
      moaindex a2= bavirt, eavirt
      moaindex a3= bavirt, eavirt
#
      moaindex j = baocc, eaocc
      moaindex j1= baocc, eaocc
      moaindex j2= baocc, eaocc
      moaindex j3= baocc, eaocc
#
      moaindex b = bavirt, eavirt
      moaindex b1= bavirt, eavirt
      moaindex b2= bavirt, eavirt
      moaindex b3= bavirt, eavirt
#
      moaindex p = baocc, eavirt
      moaindex p1= baocc, eavirt
      moaindex p2= baocc, eavirt
      moaindex p3= baocc, eavirt
#
      moaindex q = baocc, eavirt
      moaindex q1= baocc, eavirt
      moaindex q2= baocc, eavirt
      moaindex q3= baocc, eavirt
#
#     eom indeces
#
      index eomcycle = 1, 150
      index spdim = 1, 20 
      index spdim2 = 1, 20 
      index spdim20 = 1, 20 
      index j20 = 1, 20 
      index k20 = 1, 20 
      index j21 = 1, 21 
      index k21 = 1, 21 
      index jindex =1, 20
      index kindex =1, 20
      index jindex2 =1, 2 
      index kindex2 =1, 2 
      index jindex3 =1, 3 
      index kindex3 =1, 3 
      index jindex4 =1, 4 
      index kindex4 =1, 4 
      index jindex5 =1, 5 
      index kindex5 =1, 5 
      index jindex6 =1, 6 
      index kindex6 =1, 6 
      index jindex7 =1, 7 
      index kindex7 =1, 7
      index jindex8 =1, 8
      index kindex8 =1, 8
      index jindex9 =1, 9
      index kindex9 =1, 9
      index jindex10 =1, 10
      index kindex10 =1, 10
      index jindex11 =1, 11
      index kindex11 =1, 11
      index jindex12 =1, 12
      index kindex12 =1, 12
      index jindex13 =1, 13
      index kindex13 =1, 13
      index jindex14 =1, 14
      index kindex14 =1, 14
      index jindex15 =1, 15
      index kindex15 =1, 15
      index jindex16 =1, 16
      index kindex16 =1, 16
      index jindex17 =1, 17
      index kindex17 =1, 17
      index jindex18 =1, 18
      index kindex18 =1, 18
      index jindex19 =1, 19
      index kindex19 =1, 19
      index jindex20 =1, 20
      index kindex20 =1, 20
#
#  convergence correction
#
      index pp = bavirtorb, eavirtorb # norb
      index qq = bbvirtorb, ebvirtorb # norb
      index aa = bavirtorb, eavirtorb # norb
      index aa1= bavirtorb, eavirtorb # norb
      index bb = bbvirtorb, ebvirtorb # norb
      index bb1= bbvirtorb, ebvirtorb # norb
#
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#
# Declare arrays
#
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      distributed FTa(p,p1)  
      distributed FTb(p,p1)  
      served VSpipi(p1,i,p,i1)
      served Viaai(i,a1,a,i1)
      served Vaaii(a,a1,i,i1)
      served VSaaai(a2,a,a1,i)
#
      served VSqjqj(q1,j,q,j1)
      served Vjbbj(j,b,b1,j1)
      served Vbbjj(b,b1,j,j1)
      served VSbbbj(b2,b,b1,j)
#
      served Vpiqj(p,i,q,j)
      served Vaajj(a,a1,j,j1)
      served Viabj(i,a,b,j)
      served Vaabj(a,a1,b,j)
#
      served Vjbii(j,b,i,i1)
      served Vbbii(b,b1,i,i1)
      served Vbbai(b,b1,a,i)
#
#    served arrays used in EOM
#
      served VCONV2AA(a,i,a1,i1)
      served VCONV2BB(b,j,b1,j1)
      served VCONV2AB(a,i,b,j)
#
      served VCE2AA(a,i,a1,i1)
      served VCE2BB(b,j,b1,j1)
      served VCE2AB(a,i,b,j)
#
      served VCACT2AA(a,i,a1,i1)
      served VCACT2BB(b,j,b1,j1)
      served VCACT2AB(a,i,b,j)
      served VCHACT2AA(a,i,a1,i1)
      served VCHACT2BB(b,j,b1,j1)
      served VCHACT2AB(a,i,b,j)
#
# VFL arrays to use simple indeces 
      served VC2AA(a,i,a1,i1,k21) 
      served VCH2AA(a,i,a1,i1,k20) 
      served VTEMP2AA(a,i,a1,i1,k20) 
      served VC2BB(b,j,b1,j1,k21) 
      served VCH2BB(b,j,b1,j1,k20)
      served VTEMP2BB(b,j,b1,j1,k20)
      served VC2AB(a,i,b1,j1,k21) 
      served VCH2AB(a,i,b,j,k20) 
      served VTEMP2AB(a,i,b,j,k20) 
      served VTEMP2AA1(a,i,a1,i1) 
      served VTEMP2AB1(a,i,b1,j1) 
      served VTEMP2BB1(b,j,b1,j1) 

      distributed VC1A(i,i1,k21)  
      distributed VCH1A(i,i1,k20) 
      distributed VTEMP1A(i,i1,k20) 

      distributed VC1B(j,j1,k21)  
      distributed VCH1B(j,j1,k20) 
      distributed VTEMP1B(j,j1,k20) 

      distributed VC1AB(i,j,k21)  
      distributed VCH1AB(i,j,k20) 
      distributed VTEMP1AB(i,j,k20) 

      distributed ax_20(j20,k20)   
      distributed ax_21(j21,k21)   
      distributed ax(j20,k20)   
      static MYvev(kindex20,jindex20)
      static Aeig(kindex20,jindex20)
      temp t1(k21,k21)   
      temp t20(k20,j20)   
      distributed orth(j21,k21) 
      temp taiaiS(a,i,a1,i1,k21)   
      temp t2aiaiS(a,i,a1,i1,k20)   
      temp t3aiaiS(a,i,a1,i1,k20)   
      temp tbjbjS(b,j,b1,j1,k21)        
      temp t2bjbjS(b,j,b1,j1,k20)
      temp t3bjbjS(b,j,b1,j1,k20)
      temp taibjS(a,i,b,j,k21)   
      temp t2aibjS(a,i,b,j,k20)   
      temp t3aibjS(a,i,b,j,k20)   

      temp t22ia(j,i)

      temp  tppqq(p,p1,q,q1)
      temp  t1ppqq(p,p1,q,q1)
      temp  t2ppqq(p,p1,q,q1)
      temp  t3ppqq(p,p1,q,q1)

      temp tiiS(i,i1,k21) 
      temp t2iiS(i,i1,k20) 
      temp t3iiS(i,i1,k20) 

      temp tjjS(j,j1,k21) 
      temp t2jjS(j,j1,k20) 
      temp t3jjS(j,j1,k20) 

      temp tijS(i,j1,k21) 
      temp t2ijS(i,j1,k20) 
      temp t3ijS(i,j1,k20) 

      temp atemp2(jindex2,kindex2) 
      temp atemp3(jindex3,kindex3) 
      temp atemp4(jindex4,kindex4) 
      temp atemp5(jindex5,kindex5) 
      temp atemp6(jindex6,kindex6) 
      temp atemp7(jindex7,kindex7) 
      temp atemp8(jindex8,kindex8) 
      temp atemp9(jindex9,kindex9) 
      temp atemp10(jindex10,kindex10) 
      temp atemp11(jindex11,kindex11) 
      temp atemp12(jindex12,kindex12) 
      temp atemp13(jindex13,kindex13) 
      temp atemp14(jindex14,kindex14) 
      temp atemp15(jindex15,kindex15) 
      temp atemp16(jindex16,kindex16) 
      temp atemp17(jindex17,kindex17) 
      temp atemp18(jindex18,kindex18) 
      temp atemp19(jindex19,kindex19) 
      temp atemp20(jindex20,kindex20) 

      temp tbjai(b,j,a1,i1) 

      scalar kcount 
      scalar fact 
      scalar lfact 
      scalar esum 
      scalar esum1
      scalar rcrit 
      scalar VVV 
#
# END VFL arrays to use simple indeces 
#
      temp tttpp(p,p1)
      temp ttt1pp(p,p1)
      temp t1pp(p,p1)
      temp tqq(q,q1)
      temp tttqq(q,q1)
      temp t1qq(q,q1)
      temp ttt1qq(q,q1)
      temp Tjjai(j1,j,a,i)
      temp T1jjai(j1,j,a,i)
      served Njjai(j1,a,i,j) 
      temp Tiibj(i1,i,b,j)
      temp T1iibj(i1,i,b,j)
      served Niibj(i1,b,i,j) 
      temp Tiiai(i1,i,a,i)
      temp T1iiai(i1,i,a,i)
      served Niiai(i1,a,i,i2) 
      served Njjbj(j2,b,j,j1)   
      temp Tjjbj(j1,j,b,j)
      temp T1jjbj(j1,j,b,j)
      distributed Niijj(i,i1,j,j1)
      distributed Niiii(i,i1,i2,i3)
      distributed Njjjj(j,j1,j2,j3)
#
# AP arrays 
      distributed Xib(i1,b1)
      distributed Xja(j1,a1)
      temp tmpijib(i1,j1,i,b) 
      temp tmpib(i,b) 
      temp tmpja(j,a) 
      temp tpp(p,p1)        
      temp tqqpp(q,q1,p,p2) 
      temp t1qqpp(q,q1,p,p2) 
      temp Tiaai(i1,a1,a,i)  
      temp T1iaai(i1,a1,a,i)  
      temp T2iaai(i1,a1,a,i)  
      temp T1jbbj(j1,b1,b,j)  
      temp T2jbbj(j1,b1,b,j)  
      temp Tiabj(i,a,b,j)
      temp T1iabj(i,a,b,j)
      temp Tjbai(j,b,a,i) 
      temp T1jbai(j,b,a,i) 
      temp TSiiai(i,i2,a,i1) 
      temp TSjjbj(j,j2,b,j1) 
      temp T2iiai(i,i2,a,i1)  
      temp T2jjbj(j,j2,b,j1)  
      served WHIAAI(i1,a1,a,i) 
      served WHJBBJ(j1,b1,b,j) 
      served WHIIBB(i,i1,b,b1) 
      served WHJJAA(j,j1,a,a1) 
      served WHIABJ(i,a,b,j) 
      served WHJBAI(j,b,a,i) 
      temp tmp1_aiai(a,i,a1,i1)    
      temp tmp2_aiai(a,i,a1,i1)    
      temp tmp1_aibj(a,i,a1,i1)    
      temp tmp2_aibj(a,i,a1,i1)    
      served Taup_aa(a,i,a1,i1) 
      served Taup_ab(a,i,a1,i1) 
      temp Tme_a(i,a) 
      distributed Fme_a(i,a) 
     #distributed Fmi_a(i,i1) 
     #distributed Fae_a(a1,a) 
      distributed HBARai(a,i) 
# END AP arrays 
#
#   convergence correction
     static tsa(aa,a1) 
     static t1sa(aa,a1) 
     static tsb(bb,b1) 
     static t1sb(bb,b1) 
     temp psa(aa,a1)
     temp psb(bb,b1) 
# 
      distributed Faa(a,a1)
      distributed Fab(a,b)
      distributed Fbb(b,b1)
#
      distributed FSaa(aa,aa1)
      distributed FSab(aa,bb)
      distributed FSbb(bb,bb1)
#
      local LSaa(aa,aa1)
      local LSab(aa,bb1)
      local LSbb(bb,bb1)
#
      static SSaa(aa,aa1)
      static SSab(aa,bb)
      static SSbb(bb,bb1)
#
      local Sxxa(mu,nu,aa)
      local Sxxb(mu,nu,bb)
#
      distributed IIi(pp,a1)
      distributed IJj(qq,b1)
#
      distributed T1Sxxa(mu,nu,aa)
      distributed T3Sxxa(mu,nu,aa)
      distributed T3ASxxa(mu,nu,aa)
      distributed T1Sxxb(mu,nu,bb)
      distributed T3Sxxb(mu,nu,bb)
      distributed T3ASxxb(mu,nu,bb)
#
      temp txxxx(mu,nu,lambda,sigma) 
      temp t1xxxx(mu,nu,lambda,sigma) 
#
      served Spp(a1,a2)
      served Sqq(b1,b2)
#
      static csa(mu,pp)
      static csb(mu,qq)
#
      static tyypp(a1,a2)
      static t1yypp(a1,a2)
      temp typp(a1,a2)
      temp t1ypp(a1,a2)
      temp t2ypp(a1,a2)
      static tyyqq(b1,b2)
      static t1yyqq(b1,b2)
      temp tyqq(b1,b2)
      temp t1yqq(b1,b2)
      temp t2yqq(b1,b2)
#
      temp PIi(pp,a1)
      temp PJj(qq,b1)
#
      temp txpp(mu,pp)
      temp t1xpp(mu,pp)
      temp txqq(mu,qq)
      temp t1xqq(mu,qq)
      temp txx(mu,nu)
      temp txxa(mu,nu,aa)
      temp txxb(mu,nu,bb)
#
      temp t1xx(lambda,sigma)
      temp tyaaaa(aa,aa1)
      temp tybbbb(bb,bb1)
      temp tyaabb(aa,bb1)
#
      temp tsp(aa,a1)
      temp tpq(a,b1)
      temp tspq(aa,b1)
      temp t1pq(a,b1)
      temp tsq(bb,b1)
#
# VFL arrays 
# ---------- 
#
      served VFLAB(a1,b,i,j)  
      served VFLAA(a2,a1,i,i2) 
      served VFLBB(b2,b1,j,j2) 
      temp Tqppq(q1,p1,p,q)    
      temp T1qppq(q1,p1,p,q)    
      temp tpqpq(p,q,p1,q1)  
      temp T1pqpq(p,q,p1,q1)  
      temp tpppp(p,p1,p2,p3) 
      temp t1pppp(p,p1,p2,p3) 
      temp t2pppp(p,p1,p2,p3) 
      temp t3pppp(p,p1,p2,p3) 
      temp t4pppp(p,p1,p2,p3) 
      temp tqqqq(q,q1,q2,q3) 
      temp t1qqqq(q,q1,q2,q3) 
      temp t2qqqq(q,q1,q2,q3) 
      temp t3qqqq(q,q1,q2,q3) 
      temp t4qqqq(q,q1,q2,q3) 
#
      static Sii(i,i1)
      static Sdii(i,i1)
      static Saa(a,a1)
      static Sdaa(a,a1)
      static Sia(i,a)
      static Sdia(i,a)
      static Sjj(j,j1)
      static Sdjj(j,j1)
      static Sbb(b,b1)
      static Sdbb(b,b1)
      static Smat(kindex,jindex)
      static SVEV(kindex,jindex)
      static Smat2(kindex2,jindex2)
      static SVEV2(kindex2,jindex2)
      static Smat3(kindex3,jindex3)
      static SVEV3(kindex3,jindex3)
      static Smat4(kindex4,jindex4)
      static SVEV4(kindex4,jindex4)
      static Smat5(kindex5,jindex5)
      static SVEV5(kindex5,jindex5)
      static Smat6(kindex6,jindex6)
      static SVEV6(kindex6,jindex6)
      static Smat7(kindex7,jindex7)
      static SVEV7(kindex7,jindex7)
#======================================================
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#--start of script generated part of the code
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#======================================================
      static Smat8(kindex8,jindex8)
      static SVEV8(kindex8,jindex8)
      static Smat9(kindex9,jindex9)
      static SVEV9(kindex9,jindex9)
      static Smat10(kindex10,jindex10)
      static SVEV10(kindex10,jindex10)
      static Smat11(kindex11,jindex11)
      static SVEV11(kindex11,jindex11)
      static Smat12(kindex12,jindex12)
      static SVEV12(kindex12,jindex12)
      static Smat13(kindex13,jindex13)
      static SVEV13(kindex13,jindex13)
      static Smat14(kindex14,jindex14)
      static SVEV14(kindex14,jindex14)
      static Smat15(kindex15,jindex15)
      static SVEV15(kindex15,jindex15)
      static Smat16(kindex16,jindex16)
      static SVEV16(kindex16,jindex16)
      static Smat17(kindex17,jindex17)
      static SVEV17(kindex17,jindex17)
      static Smat18(kindex18,jindex18)
      static SVEV18(kindex18,jindex18)
      static Smat19(kindex19,jindex19)
      static SVEV19(kindex19,jindex19)
      static Smat20(kindex20,jindex20)
      static SVEV20(kindex20,jindex20)
#======================================================
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#--end of script generated part of the code
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#======================================================
#
      temp Tvev2(kindex2,jindex2)
      temp Tvev3(kindex3,jindex3)
      temp Tvev4(kindex4,jindex4)
      temp Tvev5(kindex5,jindex5)
      temp Tvev6(kindex6,jindex6)
      temp Tvev7(kindex7,jindex7)
      temp Tvev8(kindex8,jindex8)
      temp Tvev9(kindex9,jindex9)
      temp Tvev10(kindex10,jindex10)
      temp Tvev11(kindex11,jindex11)
      temp Tvev12(kindex12,jindex12)
      temp Tvev13(kindex13,jindex13)
      temp Tvev14(kindex14,jindex14)
      temp Tvev15(kindex15,jindex15)
      temp Tvev16(kindex16,jindex16)
      temp Tvev17(kindex17,jindex17)
      temp Tvev18(kindex18,jindex18)
      temp Tvev19(kindex19,jindex19)
      temp Tvev20(kindex20,jindex20)
      temp tcoef2(kindex2,jindex2)
      temp tcoef3(kindex3,jindex3)
      temp tcoef4(kindex4,jindex4)
      temp tcoef5(kindex5,jindex5)
      temp tcoef6(kindex6,jindex6)
      temp tcoef7(kindex7,jindex7)
      temp tcoef8(kindex8,jindex8)
      temp tcoef9(kindex9,jindex9)
      temp tcoef10(kindex10,jindex10)
      temp tcoef11(kindex11,jindex11)
      temp tcoef12(kindex12,jindex12)
      temp tcoef13(kindex13,jindex13)
      temp tcoef14(kindex14,jindex14)
      temp tcoef15(kindex15,jindex15)
      temp tcoef16(kindex16,jindex16)
      temp tcoef17(kindex17,jindex17)
      temp tcoef18(kindex18,jindex18)
      temp tcoef19(kindex19,jindex19)
      temp tcoef20(kindex20,jindex20)
#
#
# Arrays needed for AOLADDER contribution
# ---------------------------------------
#
     local LLaa(a,i,nu,i1) 
     local LLbb(b,j,nu,j1) 
     local LLab(a,i,nu,j) 
     temp aoint(mu,lambda,nu,sigma)
     temp Txixj(lambda,i,sigma,j)
     temp Txjxj(lambda,j,sigma,j1)
     temp Txixi(lambda,i,sigma,i1)
     temp Txiai(lambda,i,a1,i1)
     temp Txjbj(lambda,j,b1,j1)
     temp Txibj(lambda,i,b,j)
#
     temp Zaa(lambda,i,a1,i1)
     temp Zbb(lambda,j,b,j1)
     temp Zab(lambda,i,b,j)
     temp ZZaa(lambda,i,sigma,i1)
     temp ZZ1aa(lambda,i,sigma,i1)
     temp ZZbb(lambda,j,sigma,j1)
     temp ZZ1bb(lambda,j,sigma,j1)
     temp ZZab(lambda,i,sigma,j)
#
     temp Yaa(lambda,i,mu,i1)
     temp Ybb(lambda,j,mu,j1)
     temp Yab(lambda,i,mu,j)
     temp Y1aa(lambda,i,mu,i1)
     temp Y1bb(lambda,j,mu,j1)
     temp Y1ab(lambda,i,mu,j)
#
     temp Taixi(a,i,nu,i1)
     temp Tbjxj(b,j,nu,j1)
     temp Taixj(a,i,nu,j)
#
     served TAO_aa(lambda,i,sigma,i1)
     served TAO_bb(lambda,j,sigma,j1)
     served TAO_ab(lambda,i,sigma,j)
     served T1AO_aa(lambda,i,a,i1)
     served T1AO_bb(lambda,j,b,j1)
     served T1AO_ab(lambda,i,b,j)
     served T2AO_aa(lambda,i,sigma,i1)
     served T2AO_bb(lambda,j,sigma,j1)
     served T2AO_ab(lambda,i,sigma,j)
#
      temp  Taibj(a,i,b,j)
      temp  Taiai(a,i,a1,i1)
      temp  T1aiai(a,i,a1,i1)
      temp  T2aiai(a,i,a1,i1)
      temp  T3aiai(a,i,a1,i1)
      temp  T4aiai(a,i,a1,i1)
      temp  Tbjbj(b,j,b1,j1)
      temp  T2bjbj(b,j,b1,j1)
      temp  T3bjbj(b,j,b1,j1)
      temp  T4bjbj(b,j,b1,j1)
      temp  T1bjbj(b,j,b1,j1)
      temp  TSaiai(a,i,a1,i1)
      temp  TSiaai(i,a,a1,i1)
      temp  TS2iaai(i,a,a1,i1)
      temp  TSbjbj(b,j,b1,j1)
      temp  Taaii(a,a2,i,i2)
      temp  Tiibb(i1,i,b,b1)
      temp  T1iibb(i1,i,b,b1)
      temp  T2iibb(i1,i,b,b1)
      temp  Tjjaa(j1,j,a,a1)
      temp  T1jjaa(j1,j,a,a1)
      temp  T2jjaa(j1,j,a,a1)
      temp  T1aaii(a,a2,i,i2)
      temp  Tbbjj(b,b1,j,j1)
      temp  T2bbjj(b,b1,j,j1)
      temp  T1aibj(a,i,b,j)
      temp  T2aibj(a,i,b,j)
      temp  T3aibj(a,i,b,j)
      temp  T4aibj(a,i,b,j)

      temp  Tii(i,i1)
      temp  T1ii(i,i1)
      temp  T2ii(i,i1)
      temp  T3ii(i,i1)
      temp  Tjj(j,j1)
      temp  T1jj(j,j1)
      temp  T2jj(j,j1)
      temp  T3jj(j,j1)
      temp  Tij(i,j1)
      temp  T1ij(i,j1)
      temp  T2ij(i,j1)
      temp  T3ij(i,j1)

      temp  Taa(a,a1)
      temp  Tdaa(a,a1)
      temp  Tbb(b,b1)
      temp  Tiijj(i,i1,j,j1)
      temp  T1iijj(i,i1,j,j1)
      temp  Tiiii(i,i1,i2,i3)
      temp  T1iiii(i,i1,i2,i3)
      temp  Tjjjj(j,j1,j2,j3)
      temp  T1jjjj(j,j1,j2,j3)
      temp  Taajj(a,a1,j,j1)
      temp  T1aajj(a,a1,j,j1)
      temp  Tbbii(b,b1,i,i1)
      temp  T1bbii(b,b1,i,i1)
      temp  R1aiai(a1,i1,a,i)
      temp  R2aiai(a1,i,a,i1)
      temp  R3aiai(a,i1,a1,i)
      temp  R4aiai(a,i1,a1,i)
      temp  R1bjbj(b1,j1,b,j)
      temp  R2bjbj(b1,j,b,j1)
      temp  R3bjbj(b,j1,b1,j)
      temp  R4bjbj(b,j1,b1,j)
      temp  tai(a,i)
      temp  t1ai(a,i)
      temp  t11ai(a,i)
      temp  t1aa(a,a1)
      temp  t11aa(a,a1)
      temp  t1bb(b,b1)
      temp  t11bb(b,b1)
      temp  t111bb(b,b1)
      temp  tia(i,a)
      temp  t2ia(i,j)
      temp  t2jb(j,b)
      temp  t1ia(i,a)
      temp  t2ai(j,i)
      temp  t3ai(j,i)
      temp  tbj(b,j)
      temp  tjb(j,b)
      temp  t1jb(j,b)
      temp  t2bj(b,j)
      temp  t3bj(b,j)
      temp  t1bj(b,j)
      temp  t11bj(b,j)
      temp  Tjbbj(j1,b1,b,j)
      temp  Taaai(a,a2,a1,i)
#
      local L1xixi(mu,i,nu,i1)
      local L1xjxj(mu,j,nu,j1)
      local L1xixj(mu,i,nu,j)
      local Lxibj(lambda,i,b,j)
      local Lxjbj(lambda,j,b1,j1)
      local LLaiai(a,i,a1,i1)
      local LLbjbj(b,j,b1,j1)
      local LLaibj(a,i,b,j)
      local Lxiai(lambda,i,a1,i1)
#
      local Ljbbj(j2,b2,b1,j1)
      local Liaai3(i1,a1,a,i)
      local Liiai(i2,i,a,i1)
      local L2iiai(i,i2,a,i1)
      local L1aibj(a,i,b1,j)
      local Ljjai(a,i,j,j1)
      local Lbjjj(b1,j2,j,j1)
      local Laaai(a,a2,a1,i)
      local Ljjbj(j2,j,b,j1)
      local L2jjbj(j,j2,b,j1)
      local Lbbbj(b,b2,b1,j)
      local Laijj(a,i,j1,j)
      local Liibj(i1,i,b,j)
      local L2iibj(i1,i,b,j)
      local L1iibj(i,i1,b,j)
      local Lbbai(b,b1,a,i)
      local Laabj(a,a1,b,j)
      local Laiai(a1,i,a2,i1)
      local Laiii(a1,i2,i,i1)
      local Laibj(a1,i,b,j)
      local Lbjbj(b1,j,b2,j1)
      local L2bjbj(b,j,b2,j1)
      local L3bjbj(b,j,b2,j2)
      local VAL(jindex,kindex)
      temp VAL1(jindex,kindex)
      local lii(i,i1)
      local lij(i,j1)
      local ljj(j,j1)

      local lia(i,a)
      local ljb(j,b)
      local l2ai(a,i)
      local laa(a,a1)
      local lbb(b,b1)
#
#     eom local arrays
#
      local acoef(spdim,spdim)
      local Lmat(kindex,jindex)
      local LVEV(kindex,jindex)
      local acoef2(kindex2,jindex2)
      local Lmat2(kindex2,jindex2)
      local LVEV2(kindex2,jindex2)
      local acoef3(kindex3,jindex3)
      local Lmat3(kindex3,jindex3)
      local LVEV3(kindex3,jindex3)
      local acoef4(kindex4,jindex4)
      local Lmat4(kindex4,jindex4)
      local LVEV4(kindex4,jindex4)
      local acoef5(kindex5,jindex5)
      local Lmat5(kindex5,jindex5)
      local LVEV5(kindex5,jindex5)
      local acoef6(kindex6,jindex6)
      local Lmat6(kindex6,jindex6)
      local LVEV6(kindex6,jindex6)
      local acoef7(kindex7,jindex7)
      local Lmat7(kindex7,jindex7)
      local LVEV7(kindex7,jindex7)
      local acoef8(kindex8,jindex8)
      local Lmat8(kindex8,jindex8)
      local LVEV8(kindex8,jindex8)
      local acoef9(kindex9,jindex9)
      local Lmat9(kindex9,jindex9)
      local LVEV9(kindex9,jindex9)
#======================================================
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#--start of script generated part of the code
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#======================================================
      local Lmat10(kindex10,jindex10)
      local LVEV10(kindex10,jindex10)
      local acoef10(kindex10,jindex10)
      local Lmat11(kindex11,jindex11)
      local LVEV11(kindex11,jindex11)
      local acoef11(kindex11,jindex11)
      local Lmat12(kindex12,jindex12)
      local LVEV12(kindex12,jindex12)
      local acoef12(kindex12,jindex12)
      local Lmat13(kindex13,jindex13)
      local LVEV13(kindex13,jindex13)
      local acoef13(kindex13,jindex13)
      local Lmat14(kindex14,jindex14)
      local LVEV14(kindex14,jindex14)
      local acoef14(kindex14,jindex14)
      local Lmat15(kindex15,jindex15)
      local LVEV15(kindex15,jindex15)
      local acoef15(kindex15,jindex15)
      local Lmat16(kindex16,jindex16)
      local LVEV16(kindex16,jindex16)
      local acoef16(kindex16,jindex16)
      local Lmat17(kindex17,jindex17)
      local LVEV17(kindex17,jindex17)
      local acoef17(kindex17,jindex17)
      local Lmat18(kindex18,jindex18)
      local LVEV18(kindex18,jindex18)
      local acoef18(kindex18,jindex18)
      local Lmat19(kindex19,jindex19)
      local LVEV19(kindex19,jindex19)
      local acoef19(kindex19,jindex19)
      local Lmat20(kindex20,jindex20)
      local LVEV20(kindex20,jindex20)
      local acoef20(kindex20,jindex20)
#======================================================
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#--end of script generated part of the code
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#======================================================
      local Rai(a,i)
      local Rbj(b,j)
      local Raiai(a,i,a1,i1)
      local Rbjbj(b,j,b1,j1)
      local Raibj(a,i,b,j)
#
      distributed DDaa(a,a1)
      distributed DDii(i,i1)
      distributed DDia(i,a)
      distributed DDbb(b,b1)
      distributed DDjj(j,j1)
      distributed DDjb(j,b)
      distributed VCONV1A(i,i1)
      distributed VCONV1B(j,j1)
      distributed VCONV1AB(i,j1)
      distributed Fae_a(a,a1)
      distributed Fae_b(b,b1)
      distributed Fmi_a(i1,i)
      distributed Fmi_b(j1,j)
      distributed Fia_a(i,a)
      distributed Fia_b(j,b)
      distributed Wmnijab(i,i1,j,j1)
      distributed Wmnijaa(i,i1,i2,i3)
      distributed Wmnijbb(j,j1,j2,j3)
#
#     distributed arrays used in EOM
#
      distributed VCE1A(i,i1)
      distributed VCE1B(j,j1)
      distributed VCE1AB(i,j1)
#
      distributed VCACT1A(i,i1)
      distributed VCACT1B(j,j1)
      distributed VCACT1AB(i,j1)
#
      distributed VCHACT1A(i,i1)
      distributed VCHACT1B(j,j1)
      distributed VCHACT1AB(i,j1)
#
# Triples arrays 
# -------------- 
#
      served V2iiia(i,i1,i2,a,k21) 
      served V2iijb(i,i1,j2,b,k21) 
      served V2jjia(j,j1,i2,a,k21) 
      served V2jjjb(j,j1,j2,b,k21) 
      served V2ijia(i,j1,i2,a,k21) 
      served V2ijjb(i,j1,j2,b,k21) 
#
      served VH2iiia(i,i1,i2,a,k20) 
      served VH2iijb(i,i1,j2,b,k20) 
      served VH2jjia(j,j1,i2,a,k20) 
      served VH2jjjb(j,j1,j2,b,k20) 
      served VH2ijia(i,j1,i2,a,k20) 
      served VH2ijjb(i,j1,j2,b,k20) 
#
      served temp2iiia(i,i1,i2,a,k20) 
      served temp2iijb(i,i1,j2,b,k20) 
      served temp2jjia(j,j1,i2,a,k20) 
      served temp2jjjb(j,j1,j2,b,k20) 
      served temp2ijia(i,j1,i2,a,k20) 
      served temp2ijjb(i,j1,j2,b,k20) 
#
      served temp1iiia(i,i1,i2,a) 
      served temp1iijb(i,i1,j2,b) 
      served temp1jjia(j,j1,i2,a) 
      served temp1jjjb(j,j1,j2,b) 
      served temp1ijia(i,j1,i2,a) 
      served temp1ijjb(i,j1,j2,b) 
#
      served R2iiia(i,i1,i2,a) 
      served R2iijb(i,i1,j,b) 
      served R2jjia(j,j1,i,a) 
      served R2jjjb(j,j1,j2,b) 
      served R2ijia(i,j,i1,a) 
      served R2ijjb(i,j,j1,b) 

      served RSijia(i,j,i1,a) 
#
      served RE2iiia(i,i1,i2,a) 
      served RE2iijb(i,i1,j,b) 
      served RE2jjia(j,j1,i,a) 
      served RE2jjjb(j,j1,j2,b) 
      served RE2ijia(i,j,i1,a) 
      served RE2ijjb(i,j,j1,b) 
#
      served RH2iiia(i,i1,i2,a) 
      served RH2iijb(i,i1,j,b) 
      served RH2jjia(j,j1,i,a) 
      served RH2jjjb(j,j1,j2,b) 
      served RH2ijia(i,j,i1,a) 
      served RH2ijjb(i,j,j1,b) 
#
      served VCONV2iiia(i,i1,i2,a) 
      served VCONV2iijb(i,i1,j2,b) 
      served VCONV2jjjb(j,j1,j2,b) 
      served VCONV2jjia(j,j1,i2,a) 
      served VCONV2ijjb(i,j1,j2,b) 
      served VCONV2ijia(i,j1,i2,a) 
#
      temp tiiia(i,i1,i2,a) 
      temp t1iiia(i,i1,i2,a) 
      temp t2iiia(i,i1,i2,a) 
      temp t3iiia(i,i1,i2,a) 
      temp t4iiia(i,i1,i2,a) 
      temp tjjjb(j,j1,j2,b) 
      temp t1jjjb(j,j1,j2,b) 
      temp t2jjjb(j,j1,j2,b) 
      temp t3jjjb(j,j1,j2,b) 
      temp t4jjjb(j,j1,j2,b) 
      temp tiijb(i,i1,j,b) 
      temp t1iijb(i,i1,j,b) 
      temp t2iijb(i,i1,j,b) 
      temp t3iijb(i,i1,j,b) 
      temp t4iijb(i,i1,j,b) 
      temp tjjia(j,j1,i,a) 
      temp t1jjia(j,j1,i,a) 
      temp t2jjia(j,j1,i,a) 
      temp t3jjia(j,j1,i,a) 
      temp t4jjia(j,j1,i,a) 
      temp tijia(i,j1,i2,a) 
      temp t1ijia(i,j1,i2,a) 
      temp t2ijia(i,j1,i2,a) 
      temp t3ijia(i,j1,i2,a) 
      temp t4ijia(i,j1,i2,a) 
      temp tijjb(i,j1,j,b) 
      temp t1ijjb(i,j1,j,b) 
      temp t2ijjb(i,j1,j,b) 
      temp t3ijjb(i,j1,j,b) 
      temp t4ijjb(i,j1,j,b) 
#
      temp tiiiaS(i,i1,i2,a,j21) 
      temp t1iiiaS(i,i1,i2,a,j21) 
      temp t2iiiaS(i,i1,i2,a,j20) 
      temp tjjjbS(j,j1,j2,b,j21) 
      temp t1jjjbS(j,j1,j2,b,j21) 
      temp t2jjjbS(j,j1,j2,b,j20) 
      temp tiijbS(i,i1,j2,b,j21) 
      temp t1iijbS(i,i1,j2,b,j21) 
      temp t2iijbS(i,i1,j2,b,j20) 
      temp tjjiaS(j,j1,i2,a,j21) 
      temp t1jjiaS(j,j1,i2,a,j21) 
      temp t2jjiaS(j,j1,i2,a,j20) 
      temp tijjbS(i,j1,j2,b,j21) 
      temp t1ijjbS(i,j1,j2,b,j21) 
      temp t2ijjbS(i,j1,j2,b,j20) 
      temp tijiaS(i,j1,i2,a,j21) 
      temp t1ijiaS(i,j1,i2,a,j21) 
      temp t2ijiaS(i,j1,i2,a,j20) 
#
# END Triples arrays 
# ------------------ 
#
      distributed VSTART1A1(i,i1)
      distributed VSTART1A2(i,i1)
      distributed VSTART1A3(i,i1)
      distributed VSTART1A4(i,i1)
      distributed VSTART1A5(i,i1)
      distributed VSTART1A6(i,i1)
      distributed VSTART1A7(i,i1)
      distributed VSTART1A8(i,i1)
      distributed VSTART1A9(i,i1)
      distributed VSTART1A10(i,i1)
      distributed VSTART1A11(i,i1)
      distributed VSTART1A12(i,i1)
#
      distributed VSTART1B1(j,j1)
      distributed VSTART1B2(j,j1)
      distributed VSTART1B3(j,j1)
      distributed VSTART1B4(j,j1)
      distributed VSTART1B5(j,j1)
      distributed VSTART1B6(j,j1)
      distributed VSTART1B7(j,j1)
      distributed VSTART1B8(j,j1)
      distributed VSTART1B9(j,j1)
      distributed VSTART1B10(j,j1)
      distributed VSTART1B11(j,j1)
      distributed VSTART1B12(j,j1)
#
      distributed VSTART1AB1(i,j1)
      distributed VSTART1AB2(i,j1)
      distributed VSTART1AB3(i,j1)
      distributed VSTART1AB4(i,j1)
      distributed VSTART1AB5(i,j1)
      distributed VSTART1AB6(i,j1)
      distributed VSTART1AB7(i,j1)
      distributed VSTART1AB8(i,j1)
      distributed VSTART1AB9(i,j1)
      distributed VSTART1AB10(i,j1)
      distributed VSTART1AB11(i,j1)
      distributed VSTART1AB12(i,j1)
#
# Declare CCSD amplitude arrays
# -----------------------------
#
      served T2aa(a,i,a1,i1)
      served T2ab(a,i,b,j)
      served T2bb(b,j,b1,j1)
      distributed t1a(a,i)
      distributed t1b(b,j)
#  HBAR
      distributed HBAR_aa(a,a1)
      distributed HBAR_bb(b,b1)
      distributed HBAR_ii(i1,i)
      distributed HBAR_jj(j1,j)
      distributed HBAR_ia(i,a)
      distributed HBAR_jb(j,b)
#
      served HBAR_iiii(i,i1,i2,i3)
      served HBAR_jjjj(j,j1,j2,j3)
      served HBAR_iijj(i,i1,j,j1)
#
      served HBAR_ijij(i,j,i1,j1)
#
      served HBAR_AIBC_aaaa(a,a1,i,a2)
      served HBAR_AIBC_bbbb(b,b1,j,b2)
      served HBAR_AIBC_aabb(a,a1,j,b2)
      served HBAR_AIBC_bbaa(b,b1,i,a2)
#
      served HBAR_JKIA_aaaa(i1,i,i2,a)
      served HBAR_JKIA_bbbb(j1,j,j2,b)
      served HBAR_JKIA_aabb(i1,i,j2,b)
      served HBAR_JKIA_bbaa(j1,j,i2,a)
#
      served HBAR_IAJK_aaaa(i,i1,a,i2)
      served HBAR_IAJK_aabb(i,i1,b,j) 
      served HBAR_IAJK_bbaa(j,j1,a,i)
      served HBAR_IAJK_bbbb(j,j1,b,j2)
#
      served HBAR_AJIB_aaaa(i1,a1,a,i)
      served HBAR_AJIB_bbbb(j1,b1,b,j)
      served HBAR_AJIB_aabb(i,a,b,j)
      served HBAR_AJIB_BBAA(j,b,a,i)
      served HBAR_AJIB_iibb(i1,i,b,b1)
      served HBAR_AJIB_jjaa(j1,j,a,a1)
#
      served HBAR_ABCI_aaaa(a,a2,a1,i)
      served HBAR_ABCI_bbbb(b,b1,b2,j)
      served HBAR_ABCI_aabb(a,a1,b,j)
      served HBAR_ABCI_bbaa(b,b1,a,i)
#
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#
# Declare scalars
#
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      scalar maxcycle
      scalar imaxc
      scalar amplthresh
      scalar ncount
      scalar aeigtemp
      scalar aeigtemp2
      scalar rootmax
      scalar evfev
      scalar eomthresh
      scalar sqr
      scalar sqr2
      scalar egvmax
      scalar lcount
      scalar icount
      scalar xcount
      scalar imax
      scalar emax
      scalar energaa
      scalar energbb
      scalar energab
      scalar esuma
      scalar esumb
      scalar esumab
      scalar ecorraa
      scalar ecorrbb
      scalar ecorrab
      scalar ecorrT
      scalar eold
      scalar etemp
      scalar etemp1
      scalar etemp2
      scalar etemp3
      scalar etemp4
      scalar etemp5
      scalar etemp0
      scalar eetemp
      scalar ediff
      scalar xcor
      scalar xcor0
      scalar xcor1
      scalar xcor2
      scalar xcor3
      scalar count_iter
#
#     eom scalars
#
      scalar ispdim
      scalar one
      scalar omega
      scalar omegam
      scalar residuum
      scalar square
      scalar squarert
      scalar mult
      scalar exponent
#
      scalar nsp
      scalar iroot
#
      scalar Aeig1
      scalar Aeig2
      scalar Aeig3
      scalar Aeig4
      scalar Aeig5
      scalar Aeig6
      scalar Aeig7
      scalar Aeig8
      scalar Aeig9
#
      scalar Aeigv1
      scalar Aeigv2
      scalar Aeigv3
      scalar Aeigv4
      scalar Aeigv5
      scalar Aeigv6
      scalar Aeigv7
      scalar Aeigv8
      scalar Aeigv9
#
      scalar Aeigvm1
      scalar Aeigvm2
      scalar Aeigvm3
      scalar Aeigvm4
      scalar Aeigvm5
      scalar Aeigvm6
      scalar Aeigvm7
      scalar Aeigvm8
      scalar Aeigvm9
#
      scalar xmax
#
      scalar xtemp
      scalar xtemp1
#
#======================================================
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#--start of script generated part of the code
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#======================================================
      scalar etemp2_1
      scalar etemp2_2
      scalar etemp2_3
      scalar etemp2_4
      scalar etemp2_5
      scalar etemp2_6
      scalar etemp2_7
      scalar etemp2_8
      scalar etemp2_9
      scalar etemp2_10
      scalar etemp2_11
      scalar etemp2_12
      scalar etemp2_13
      scalar etemp2_14
      scalar etemp2_15
      scalar etemp2_16
      scalar etemp2_17
      scalar etemp2_18
      scalar etemp2_19
      scalar etemp2_20
#
      scalar Vtemp_1
      scalar Vtemp_2
      scalar Vtemp_3
      scalar Vtemp_4
      scalar Vtemp_5
      scalar Vtemp_6
      scalar Vtemp_7
      scalar Vtemp_8
      scalar Vtemp_9
      scalar Vtemp_10
      scalar Vtemp_11
      scalar Vtemp_12
      scalar Vtemp_13
      scalar Vtemp_14
      scalar Vtemp_15
      scalar Vtemp_16
      scalar Vtemp_17
      scalar Vtemp_18
      scalar Vtemp_19
      scalar Vtemp_20
#
      scalar V1_1
      scalar V1_2
      scalar V1_3
      scalar V1_4
      scalar V1_5
      scalar V1_6
      scalar V1_7
      scalar V1_8
      scalar V1_9
      scalar V1_10
      scalar V1_11
      scalar V1_12
      scalar V1_13
      scalar V1_14
      scalar V1_15
      scalar V1_16
      scalar V1_17
      scalar V1_18
      scalar V1_19
      scalar V1_20
      scalar V2_1
      scalar V2_2
      scalar V2_3
      scalar V2_4
      scalar V2_5
      scalar V2_6
      scalar V2_7
      scalar V2_8
      scalar V2_9
      scalar V2_10
      scalar V2_11
      scalar V2_12
      scalar V2_13
      scalar V2_14
      scalar V2_15
      scalar V2_16
      scalar V2_17
      scalar V2_18
      scalar V2_19
      scalar V2_20
      scalar V3_1
      scalar V3_2
      scalar V3_3
      scalar V3_4
      scalar V3_5
      scalar V3_6
      scalar V3_7
      scalar V3_8
      scalar V3_9
      scalar V3_10
      scalar V3_11
      scalar V3_12
      scalar V3_13
      scalar V3_14
      scalar V3_15
      scalar V3_16
      scalar V3_17
      scalar V3_18
      scalar V3_19
      scalar V3_20
      scalar V4_1
      scalar V4_2
      scalar V4_3
      scalar V4_4
      scalar V4_5
      scalar V4_6
      scalar V4_7
      scalar V4_8
      scalar V4_9
      scalar V4_10
      scalar V4_11
      scalar V4_12
      scalar V4_13
      scalar V4_14
      scalar V4_15
      scalar V4_16
      scalar V4_17
      scalar V4_18
      scalar V4_19
      scalar V4_20
      scalar V5_1
      scalar V5_2
      scalar V5_3
      scalar V5_4
      scalar V5_5
      scalar V5_6
      scalar V5_7
      scalar V5_8
      scalar V5_9
      scalar V5_10
      scalar V5_11
      scalar V5_12
      scalar V5_13
      scalar V5_14
      scalar V5_15
      scalar V5_16
      scalar V5_17
      scalar V5_18
      scalar V5_19
      scalar V5_20
      scalar V6_1
      scalar V6_2
      scalar V6_3
      scalar V6_4
      scalar V6_5
      scalar V6_6
      scalar V6_7
      scalar V6_8
      scalar V6_9
      scalar V6_10
      scalar V6_11
      scalar V6_12
      scalar V6_13
      scalar V6_14
      scalar V6_15
      scalar V6_16
      scalar V6_17
      scalar V6_18
      scalar V6_19
      scalar V6_20
      scalar V7_1
      scalar V7_2
      scalar V7_3
      scalar V7_4
      scalar V7_5
      scalar V7_6
      scalar V7_7
      scalar V7_8
      scalar V7_9
      scalar V7_10
      scalar V7_11
      scalar V7_12
      scalar V7_13
      scalar V7_14
      scalar V7_15
      scalar V7_16
      scalar V7_17
      scalar V7_18
      scalar V7_19
      scalar V7_20
      scalar V8_1
      scalar V8_2
      scalar V8_3
      scalar V8_4
      scalar V8_5
      scalar V8_6
      scalar V8_7
      scalar V8_8
      scalar V8_9
      scalar V8_10
      scalar V8_11
      scalar V8_12
      scalar V8_13
      scalar V8_14
      scalar V8_15
      scalar V8_16
      scalar V8_17
      scalar V8_18
      scalar V8_19
      scalar V8_20
      scalar V9_1
      scalar V9_2
      scalar V9_3
      scalar V9_4
      scalar V9_5
      scalar V9_6
      scalar V9_7
      scalar V9_8
      scalar V9_9
      scalar V9_10
      scalar V9_11
      scalar V9_12
      scalar V9_13
      scalar V9_14
      scalar V9_15
      scalar V9_16
      scalar V9_17
      scalar V9_18
      scalar V9_19
      scalar V9_20
      scalar V10_1
      scalar V10_2
      scalar V10_3
      scalar V10_4
      scalar V10_5
      scalar V10_6
      scalar V10_7
      scalar V10_8
      scalar V10_9
      scalar V10_10
      scalar V10_11
      scalar V10_12
      scalar V10_13
      scalar V10_14
      scalar V10_15
      scalar V10_16
      scalar V10_17
      scalar V10_18
      scalar V10_19
      scalar V10_20
      scalar V11_1
      scalar V11_2
      scalar V11_3
      scalar V11_4
      scalar V11_5
      scalar V11_6
      scalar V11_7
      scalar V11_8
      scalar V11_9
      scalar V11_10
      scalar V11_11
      scalar V11_12
      scalar V11_13
      scalar V11_14
      scalar V11_15
      scalar V11_16
      scalar V11_17
      scalar V11_18
      scalar V11_19
      scalar V11_20
      scalar V12_1
      scalar V12_2
      scalar V12_3
      scalar V12_4
      scalar V12_5
      scalar V12_6
      scalar V12_7
      scalar V12_8
      scalar V12_9
      scalar V12_10
      scalar V12_11
      scalar V12_12
      scalar V12_13
      scalar V12_14
      scalar V12_15
      scalar V12_16
      scalar V12_17
      scalar V12_18
      scalar V12_19
      scalar V12_20
#
      scalar root1
      scalar root2
      scalar root3
      scalar root4
      scalar root5
      scalar root6
      scalar root7
      scalar root8
      scalar root9
      scalar root10
      scalar root11
      scalar root12
#
      scalar Aeig10
      scalar Aeigv10
      scalar Aeigvm10
      scalar Aeig11
      scalar Aeigv11
      scalar Aeigvm11
      scalar Aeig12
      scalar Aeigv12
      scalar Aeigvm12
      scalar Aeig13
      scalar Aeigv13
      scalar Aeigvm13
      scalar Aeig14
      scalar Aeigv14
      scalar Aeigvm14
      scalar Aeig15
      scalar Aeigv15
      scalar Aeigvm15
      scalar Aeig16
      scalar Aeigv16
      scalar Aeigvm16
      scalar Aeig17
      scalar Aeigv17
      scalar Aeigvm17
      scalar Aeig18
      scalar Aeigv18
      scalar Aeigvm18
      scalar Aeig19
      scalar Aeigv19
      scalar Aeigvm19
      scalar Aeig20
      scalar Aeigv20
      scalar Aeigvm20
#======================================================
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#--end of script generated part of the code
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#======================================================
#
      scalar sum1
      scalar sum2
      scalar sum3
      scalar sum4
      scalar sum5
#
#    ------------------------------------------------------------------------
#
     PROC READ_2EL
#
#    ------------------------------------------------------------------------
#
     #create FTa 
     #create FTb 
      execute server_barrier
      execute list_to_blocks                VSpipi(p,i,p1,i1)
      execute list_to_blocks                Vaaii
      execute list_to_blocks                Viaai
      execute list_to_blocks                VSaaai
      execute list_to_blocks                VSqjqj(q,j,q1,j1)
      execute list_to_blocks                Vbbjj
      execute list_to_blocks                Vjbbj
      execute list_to_blocks                VSbbbj
      execute list_to_blocks                Vbbii
      execute list_to_blocks                Vjbii
      execute list_to_blocks                Vbbai
      execute list_to_blocks                Vpiqj(p,i,q,j)
      execute list_to_blocks                Vaajj
      execute list_to_blocks                Viabj
      execute list_to_blocks                Vaabj
#
#
#    ------------------------------------------------------------------------
#
     ENDPROC READ_2EL
#
      PROC READ_AMP
#     -------------
#
     #execute list_to_blocks FTa  
     #execute list_to_blocks FTb  
      execute list_to_blocks t1a
      execute list_to_blocks t1b
      execute list_to_blocks T2aa
      execute list_to_blocks T2ab
      execute list_to_blocks T2bb
#
      execute server_barrier
      execute read_list_to_blocks
      execute server_barrier
#
     #DO p 
     #DO p1 
     #   GET FTa(p,p1) 
     #   Fock_a(p,p1) = FTa(p,p1) 
     # # Fock_b(p,p1) = FTa(p,p1) 
     #ENDDO p1
     #ENDDO p 
#
      ENDPROC READ_AMP
#     ---------------
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      PROC READ_HBAR
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#
      execute list_to_blocks HBAR_aa
      execute list_to_blocks HBAR_bb
      execute list_to_blocks HBAR_ii
      execute list_to_blocks HBAR_jj
      execute list_to_blocks HBAR_ia
      execute list_to_blocks HBAR_jb
      execute list_to_blocks HBAR_iiii
      execute list_to_blocks HBAR_jjjj
      execute list_to_blocks HBAR_iijj
#
      execute list_to_blocks HBAR_AIBC_aaaa
      execute list_to_blocks HBAR_AIBC_bbbb
      execute list_to_blocks HBAR_AIBC_aabb
      execute list_to_blocks HBAR_AIBC_bbaa
#
      execute list_to_blocks HBAR_JKIA_aaaa
      execute list_to_blocks HBAR_JKIA_bbbb
      execute list_to_blocks HBAR_JKIA_aabb
      execute list_to_blocks HBAR_JKIA_bbaa
#
      execute list_to_blocks HBAR_IAJK_aaaa
      execute list_to_blocks HBAR_IAJK_aabb
      execute list_to_blocks HBAR_IAJK_bbaa
      execute list_to_blocks HBAR_IAJK_bbbb
#
      execute list_to_blocks HBAR_AJIB_aaaa
      execute list_to_blocks HBAR_AJIB_bbbb
      execute list_to_blocks HBAR_AJIB_aabb
      execute list_to_blocks HBAR_AJIB_BBAA
      execute list_to_blocks HBAR_AJIB_iibb
      execute list_to_blocks HBAR_AJIB_jjaa
#
      execute list_to_blocks HBAR_ABCI_aaaa
      execute list_to_blocks HBAR_ABCI_bbbb
      execute list_to_blocks HBAR_ABCI_aabb
      execute list_to_blocks HBAR_ABCI_bbaa
#
      execute server_barrier
#
      execute read_list_to_blocks
#
      execute sip_barrier
#
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      ENDPROC READ_HBAR
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#
# ---------------------------------------------------------------------------- 
#
#
      PROC R1ABNEW
#     ------------
# P(i/j1)R(i,j1)Hbar(j1,j)
#

      PARDO i, j, j1
            GET                   VCACT1AB(i,j1)
            GET                   HBAR_jj(j1,j)
            t1ij(i,j)           = VCACT1AB(i,j1)*HBAR_jj(j1,j)
            t1ij(i,j)          *= -1.0
            PUT VCHACT1AB(i,j) += t1ij(i,j)
      ENDPARDO i, j, j1
#
      PARDO i, j, i1
            GET                   VCACT1AB(i1,j)
            GET                   HBAR_ii(i1,i)
            t1ij(i,j)           = VCACT1AB(i1,j)*HBAR_ii(i1,i)
            t1ij(i,j)          *= -1.0
            PUT VCHACT1AB(i,j) += t1ij(i,j)
      ENDPARDO i, j, i1
#
# R(i1,j1)Hbar(i1j1,ij)
#

      PARDO i, i1, j, j1 
            GET                    VCACT1AB(i1,j1)
            REQUEST                HBAR_iijj(i1,i,j1,j) j
            tij(i,j)            =  HBAR_iijj(i1,i,j1,j)*VCACT1AB(i1,j1)
            PUT VCHACT1AB(i,j) += tij(i,j)
      ENDPARDO i, i1, j, j1 

#-----Debug printing
#      execute sip_barrier
#      PARDO i,j 
#          GET       VCHACT1AB(i,j)
#          execute dump_amp VCHACT1AB
#      ENDPARDO i, j
#-----End debug printing
#
# R(iji1,a)Hbar(i1,a)
#
      PARDO i, j, i1, a
            REQUEST               R2ijia(i,j,i1,a) a
            GET                   HBAR_ia(i1,a)
            tij(i,j)            = R2ijia(i,j,i1,a)*HBAR_ia(i1,a)
            PUT VCHACT1AB(i,j) += tij(i,j)
      ENDPARDO i, j, i1, a
#
      PARDO i, j, j1, b1
            REQUEST               R2ijjb(j,i,j1,b1) b1
            GET                   HBAR_jb(j1,b1)
            tij(i,j)            = R2ijjb(j,i,j1,b1)*HBAR_jb(j1,b1)
            PUT VCHACT1AB(i,j) += tij(i,j)
      ENDPARDO i, j, j1, b1
#
      ENDPROC R1ABNEW
#     ---------------
#
# ----------------------------------------------------------------------------
#
      PROC R12ABNEW
#     ---------------
#

#
# P(i/j1.i1)R(ij1i1,a)Hbar(j1i1,ja)
#      
      PARDO i, j1, i1, a
            REQUEST R2ijia(i,j1,i1,a) a
            DO j
               REQUEST                HBAR_JKIA_bbaa(j1,j,i1,a) a
               tij(i,j)            =  R2ijia(i,j1,i1,a)*HBAR_JKIA_bbaa(j1,j,i1,a)
               tij(i,j)           *= -1.0
               PUT VCHACT1AB(i,j) += tij(i,j)
            ENDDO j
      ENDPARDO i, j1, i1, a

      PARDO i, j1, j2, b
            REQUEST R2ijjb(j1,i,j2,b) b
            DO j
               REQUEST                HBAR_JKIA_bbbb(j1,j,j2,b) b
               tij(i,j)            =  R2ijjb(j1,i,j2,b)*HBAR_JKIA_bbbb(j1,j,j2,b)
               tij(i,j)           *= -0.5
               PUT VCHACT1AB(i,j) += tij(i,j)
           ENDDO j
      ENDPARDO i, j1, j2, b

      PARDO i1, j, i2, a
            REQUEST R2ijia(i1,j,i2,a) a
            DO i
               REQUEST                HBAR_JKIA_aaaa(i1,i,i2,a) a
               tij(i,j)            =  R2ijia(i1,j,i2,a)*HBAR_JKIA_aaaa(i1,i,i2,a)
               tij(i,j)           *= -0.5 
               PUT VCHACT1AB(i,j) += tij(i,j)
            ENDDO i 
      ENDPARDO i1, j, i2, a

      PARDO i1, j, j1, b
            REQUEST R2ijjb(j,i1,j1,b) b
            DO i
               REQUEST                HBAR_JKIA_aabb(i1,i,j1,b) b
               tij(i,j)            =  R2ijjb(j,i1,j1,b)*HBAR_JKIA_aabb(i1,i,j1,b)
               tij(i,j)           *= -1.0
               PUT VCHACT1AB(i,j) += tij(i,j)
            ENDDO i
      ENDPARDO i1, j, j1, b
#
      execute sip_barrier

      ENDPROC R12ABNEW
#     ---------------
#
      PROC R2ABAINEW
#     -----------  
#
# P(i/j;i/i1) R(i,j1)*Hbar(ja,j1i1)
#
      PARDO j, a, i1, j1
            REQUEST HBAR_IAJK_bbaa(j1,j,a,i1) i1
            DO i
               GET                  VCACT1AB(i,j1)
               tijia(i,j,i1,a)    = VCACT1AB(i,j1)*HBAR_IAJK_bbaa(j1,j,a,i1)
               tijia(i,j,i1,a)   *= -1.0
               PREPARE RH2ijia(i,j,i1,a) += tijia(i,j,i1,a)
            ENDDO i
      ENDPARDO j, a, i1, j1

      PARDO j, a, i, j1
            REQUEST HBAR_IAJK_bbaa(j1,j,a,i) i
            DO i1
               GET                  VCACT1AB(i1,j1)
               tijia(i,j,i1,a)    = VCACT1AB(i1,j1)*HBAR_IAJK_bbaa(j1,j,a,i)
               tijia(i,j,i1,a)   *= 1.0
               PREPARE RH2ijia(i,j,i1,a) += tijia(i,j,i1,a)
            ENDDO i1 
      ENDPARDO j, a, i, j1
      
      PARDO i, a, i1, i2
            REQUEST HBAR_IAJK_aaaa(i1,i,a,i2) i2
            DO j
               GET                  VCACT1AB(i1,j)
               tijia(i,j,i2,a)    = VCACT1AB(i1,j)*HBAR_IAJK_aaaa(i1,i,a,i2)
               tijia(i,j,i2,a)   *= -1.0 
               PREPARE RH2ijia(i,j,i2,a) += tijia(i,j,i2,a)
            ENDDO j  
      ENDPARDO i, a, i1, i2
#
# R(iji1,a1)*Hbar(a,a1)
#
      PARDO i, j, i1, a1
            REQUEST R2ijia(i,j,i1,a1) a1
            DO a
               GET                  Hbar_aa(a,a1) 
               tijia(i,j,i1,a)    = R2ijia(i,j,i1,a1)*Hbar_aa(a,a1)
               PREPARE RH2ijia(i,j,i1,a) += tijia(i,j,i1,a)
            ENDDO a
      ENDPARDO i, j, i1, a1

#-----Debug printing
#      Pardo i, j
#           get VCHACT1AB(i,j)
#           execute dump_amp  VCHACT1AB(i,j)
#      Endpardo a, b1
#     pardo j1,j, a, i
#           request HBAR_IAJK_bbaa(j1,j,a,i)i 
#           execute dump_amp HBAR_IAJK_bbaa(j1,j,a,i)
#             request HBAR_JKIA_bbaa(j,j1,i,a) a
#             execute dump_amp HBAR_JKIA_bbaa(j,j1,i,a) 
#     endpardo j1, j, a, i

#     pardo i1, i, a, i2
#           request HBAR_IAJK_aaaa(i1,i,a,i2) i2
#            execute dump_amp HBAR_IAJK_aaaa(i1,i,a,i2)
#     endpardo i1, i, a, i2
#      
#     pardo j1, j, i1, a
#           request HBAR_JKIA_bbaa(j1,j,i1,a) a
#            execute dump_amp HBAR_JKIA_bbaa(j1,j,i1,a)
#     endpardo  j1, j, i1, a

#     pardo j1, j, i1, a
#           request HBAR_IAJK_bbaa(j1,j,a,i1) i1
#            execute dump_amp HBAR_IAJK_bbaa(j1,j,a,i1) 
#     endpardo  j1, j, i1, a


#-----End debug printing
#

#     ENDPROC R2ABAINEW
#------------
#
# P(i/j;i/i1) R(i,j,i2,a)*Hbar(i2,i1)
#
     PARDO i, j, a, i2
            REQUEST R2ijia(i,j,i2,a) a
            DO i1
               GET                          HBAR_ii(i2,i1)
               tijia(i,j,i1,a)            = R2ijia(i,j,i2,a)*HBAR_ii(i2,i1)
               tijia(i,j,i1,a)           *= -1.0
               PREPARE RH2ijia(i,j,i1,a) += tijia(i,j,i1,a)
            ENDDO i1
     ENDPARDO i, j, a, i2

     PARDO i2, j, a, i1
            REQUEST R2ijia(i2,j,i1,a) a
            DO i
               GET                          HBAR_ii(i2,i)
               tijia(i,j,i1,a)            = R2ijia(i2,j,i1,a)*HBAR_ii(i2,i)
               tijia(i,j,i1,a)           *= -1.0
               PREPARE RH2ijia(i,j,i1,a) += tijia(i,j,i1,a)
            ENDDO i
     ENDPARDO i2, j, a, i1

     PARDO i, j1, i1, a
            REQUEST R2ijia(i,j1,i1,a) a
            DO j
               GET                          HBAR_jj(j1,j)
               tijia(i,j,i1,a)            = R2ijia(i,j1,i1,a)*HBAR_jj(j1,j)
               tijia(i,j,i1,a)           *= -1.0
               PREPARE RH2ijia(i,j,i1,a) += tijia(i,j,i1,a)
            ENDDO j
     ENDPARDO i, j1, i1, a
#
# P(i/j,i/i1) R(i1j1i2,a)*Hbar(i1j1,ij)
#
      PARDO i, j, i1, j1 
            REQUEST            HBAR_iijj(i1,i,j1,j) j
            tpppp(i,j,i1,j1) = HBAR_iijj(i1,i,j1,j) 
            DO i3 
               DO a
                  REQUEST             R2ijia(i1,j1,i3,a) a
                 #tijia(i,j,i3,a)   = R2ijia(i1,j1,i3,a)*HBAR_iijj(i1,i,j1,j)
                  tijia(i,j,i3,a)   = tpppp(i,j,i1,j1)*R2ijia(i1,j1,i3,a)
                  PREPARE RH2ijia(i,j,i3,a) += tijia(i,j,i3,a)
               ENDDO a
            ENDDO i3  
      ENDPARDO i, j, i1, j1 

      PARDO i, j1, i2, a
            REQUEST            R2ijia(i,j1,i2,a) a
            tpppp(i,a,i2,j1) = R2ijia(i,j1,i2,a) 
            DO i1 
               DO J
                  REQUEST              HBAR_iijj(i2,i1,j1,j) j
                  t1pppp(i2,j1,j,i1) = HBAR_iijj(i2,i1,j1,j) 
                 #tijia(i,j,i1,a)   = R2ijia(i,j1,i2,a)*HBAR_iijj(i2,i1,j1,j)
                  t2pppp(i,a,j,i1) = tpppp(i,a,i2,j1)*t1pppp(i2,j1,j,i1) 
                  tijia(i,j,i1,a)  = t2pppp(i,a,j,i1)
                  PREPARE RH2ijia(i,j,i1,a) += tijia(i,j,i1,a)
               ENDDO j
            ENDDO i1
      ENDPARDO i, j1, i2, a

      PARDO i2, j, i3, a
            REQUEST R2ijia(i2,j,i3,a) a
            DO i
               DO i1
                  REQUEST             HBAR_iiii(i2,i,i3,i1) i1
                  tijia(i,j,i1,a)   = R2ijia(i2,j,i3,a)*HBAR_iiii(i2,i,i3,i1)
                  tijia(i,j,i1,a)  *= 0.5  
                  PREPARE RH2ijia(i,j,i1,a) += tijia(i,j,i1,a)
               ENDDO i1
            ENDDO i
      ENDPARDO i2, j, i3, a

    PARDO j, j1, a, a1
            REQUEST            HBAR_AJIB_jjaa(j1,j,a,a1) a1
            tpppp(j1,a1,j,a) = HBAR_AJIB_jjaa(j1,j,a,a1)  
            DO i1  
            DO i
               REQUEST                      R2ijia(i,j1,i1,a1) a1
              #tijia(i,j,i1,a)            = R2ijia(i,j1,i1,a1)*HBAR_AJIB_jjaa(j1,j,a,a1)
               t1pppp(i,i1,j1,a1)         = R2ijia(i,j1,i1,a1) 
               t1ijia(i,i1,j,a)           = t1pppp(i,i1,j1,a1)*tpppp(j1,a1,j,a)
               tijia(i,j,i1,a)            = t1ijia(i,i1,j,a) 
               PREPARE RH2ijia(i,j,i1,a) += tijia(i,j,i1,a)
            ENDDO i
            ENDDO i1  
    ENDPARDO j, j1, a, a1

      ENDPROC R2ABAINEW

# ----------------------------------------------------------------------------- 

      PROC TMP
#
# P(i/i2) R(iji2,a)*Hbar(i2a,a1i1)
#
    PARDO i, j, a1, i2
            REQUEST R2ijia(i,j,i2,a1) a1
            DO a
            DO i1
               REQUEST                      HBAR_AJIB_aaaa(i2,a1,a,i1) i1
               tpppp(i2,a1,i1,a)          = HBAR_AJIB_aaaa(i2,a1,a,i1)
               tijia(i,j,i1,a)            = R2ijia(i,j,i2,a1)*tpppp(i2,a1,i1,a)
               PREPARE RH2ijia(i,j,i1,a) += tijia(i,j,i1,a)
            ENDDO i1
            ENDDO a
    ENDPARDO i, j, a1, i2

    PARDO i2, j, a1, i1
            REQUEST R2ijia(i1,j,i2,a1) a1
            DO a
            DO i
               REQUEST                      HBAR_AJIB_aaaa(i2,a1,a,i) i
              #tijia(i,j,i1,a)            = R2ijia(i1,j,i2,a1)*HBAR_AJIB_aaaa(i2,a1,a,i)
               tpppp(i1,j,a,i)            = R2ijia(i1,j,i2,a1)*HBAR_AJIB_aaaa(i2,a1,a,i)
               tijia(i,j,i1,a)            = tpppp(i1,j,a,i)  
               tijia(i,j,i1,a)           *= -1.0  
               PREPARE RH2ijia(i,j,i1,a) += tijia(i,j,i1,a)
            ENDDO i
            ENDDO a
    ENDPARDO i2, j, a1, i1

    PARDO i, j, j1, b1
            REQUEST            R2ijjb(j,i,j1,b1) b1
            tpppp(i,j,j1,b1) = R2ijjb(j,i,j1,b1)
            DO a
            DO i1
               REQUEST                      HBAR_AJIB_bbaa(j1,b1,a,i1) i1
              #tijia(i,j,i1,a)            = R2ijjb(j,i,j1,b1)*HBAR_AJIB_bbaa(j1,b1,a,i1)
               t1pppp(i,j,a,i1)           = tpppp(i,j,j1,b1)*HBAR_AJIB_bbaa(j1,b1,a,i1)
               tijia(i,j,i1,a)            = t1pppp(i,j,a,i1) 
               PREPARE RH2ijia(i,j,i1,a) += tijia(i,j,i1,a)
            ENDDO i1
            ENDDO a
    ENDPARDO i, j, j1, b1

    PARDO i1, j, j1, b1
            REQUEST R2ijjb(j,i1,j1,b1) b1
            DO a
            DO i
               REQUEST                      HBAR_AJIB_bbaa(j1,b1,a,i) i
               tijia(i,j,i1,a)            = R2ijjb(j,i1,j1,b1)*HBAR_AJIB_bbaa(j1,b1,a,i)
               tijia(i,j,i1,a)           *= -1.0  
               PREPARE RH2ijia(i,j,i1,a) += tijia(i,j,i1,a)
            ENDDO i
            ENDDO a
    ENDPARDO i1, j, j1, b1
#
# Three Body terms computed via XAI intermediate: R(I,j,K,A) =  X(I,f)T2(jK,fA) 
#
      PARDO j, i1, b1, a
             
            REQUEST T2ab(a,i1,b1,j) a 
            Do i
               GET                          Xib(i,b1)
               tijia(i,j,i1,a)            = Xib(i,b1)*T2ab(a,i1,b1,j)
               PREPARE RH2ijia(i,j,i1,a) += tijia(i,j,i1,a)
            ENDDO i 
      ENDPARDO j, i1, b1, a
#
      PARDO j, i, b1, a
             
            REQUEST T2ab(a,i,b1,j) a 
            Do i1
               GET                          Xib(i1,b1)
               tijia(i,j,i1,a)            = Xib(i1,b1)*T2ab(a,i,b1,j)
               tijia(i,j,i1,a)           *= -1.0  
               PREPARE RH2ijia(i,j,i1,a) += tijia(i,j,i1,a)
            ENDDO i1 
      ENDPARDO j, i, b1, a

      PARDO a1, i, a, i1

            REQUEST T2aa(a1,i,a,i1) i1
            Do j
               GET                          Xja(j,a1)
               tijia(i,j,i1,a)            = Xja(j,a1)*T2aa(a1,i,a,i1)
               PREPARE RH2ijia(i,j,i1,a) += tijia(i,j,i1,a)
            ENDDO j
      ENDPARDO a1, i, a, i1
#
    ENDPROC TMP
#   ENDPROC R2ABAINEW
#  ---------------- 
#
   PROC FORMXAI
#  --------------
# Three Body intermediates
#   
      PARDO i2, j1, i, b
         REQUEST              HBAR_JKIA_aabb(i2,i,j1,b) b  
         GET                  VCACT1AB(i2,j1)
         tmpijib(i2,j1,i,b) = HBAR_JKIA_aabb(i2,i,j1,b) 
         tmpib(i,b)         = VCACT1AB(i2,j1)*tmpijib(i2,j1,i,b)
         PUT Xib(i,b)      += tmpib(i,b)
      ENDPARDO i2, j1, i, b
 
      PARDO i, j1, i1, a1
            
            REQUEST R2ijia(i,j1,i1,a1) a1
            
               DO b
                  REQUEST         Vpiqj(a1,i1,b,j1) j1
                  tmpib(i,b)    = R2ijia(i,j1,i1,a1)*Vpiqj(a1,i1,b,j1)
                  tmpib(i,b)   *= -1.0 
                  PUT Xib(i,b) += tmpib(i,b)
               ENDDO b
      ENDPARDO i, j1, i1, a1

      PARDO i, j1, j2, b1

            REQUEST R2ijjb(j1,i,j2,b1) b1

               DO b
                  REQUEST         VSqjqj(b1,j2,b,j1) j1
                  tmpib(i,b)    = R2ijjb(j1,i,j2,b1)*VSqjqj(b1,j2,b,j1)
                  tmpib(i,b)   *= -0.5 
                  PUT Xib(i,b) += tmpib(i,b)
               ENDDO b
      ENDPARDO i, j1, j2, b1
#   
      PARDO j2, i1, j, a
         REQUEST              HBAR_JKIA_aabb(j2,j,i1,a) a  
         GET                  VCACT1AB(i1,j2)
         tmpijib(j2,i1,j,a) = HBAR_JKIA_aabb(j2,j,i1,a) 
         tmpib(j,a)         = VCACT1AB(i1,j2)*tmpijib(j2,i1,j,a)
         PUT Xja(j,a)      += tmpib(j,a)
      ENDPARDO j2, i1, j, a
#   
      PARDO i3, j, i2, a1
            
            REQUEST R2ijia(i2,j,i3,a1) a1
            
               DO a
                  REQUEST       VSpipi(a1,i3,a,i2) a1
                  tmpja(j,a) =  R2ijia(i2,j,i3,a1)*VSpipi(a1,i3,a,i2)
                  tmpja(j,a)   *= -0.5 
                  PUT Xja(j,a) += tmpja(j,a)
               ENDDO a
      ENDPARDO i3, j, i2, a1

      PARDO j1, j, i2, b

            REQUEST R2ijjb(j,i2,j1,b) b

               DO a
                  REQUEST       Vpiqj(a,i2,b,j1) j1
                  tmpja(j,a) =  R2ijjb(j,i2,j1,b)*Vpiqj(a,i2,b,j1)
                  tmpja(j,a)   *= -1.0 
                  PUT Xja(j,a) += tmpja(j,a)
               ENDDO a
      ENDPARDO j1, j, i2, b
#
   ENDPROC FORMXAI
#  --------------
#
# ----------------------------------------------------------------------------
#
     PROC UPDATE
#    ----------- 
#
#    one particle amplitudes
#
     PARDO i, j1, i2, a 
           REQUEST             RH2ijia(i,j1,i2,a) a 
           tijia(i,j1,i2,a)  = RH2ijia(i,j1,i2,a)
           tijia(i,j1,i2,a) *= 1.0  
           PREPARE RH2ijjb(i,j1,i2,a) = tijia(i,j1,i2,a)
     ENDPARDO i, j1, i2, a 
     execute server_barrier 
#
     PARDO i, j1, i2, a 
           REQUEST             RH2ijjb(i,j1,i2,a) a 
           tijia(i,j1,i2,a)  = RH2ijjb(i,j1,i2,a)
           PREPARE RH2ijia(i,j1,i2,a) = tijia(i,j1,i2,a)
     ENDPARDO i, j1, i2, a 
     execute server_barrier 
#
     PARDO i, j1, i2, a 
           REQUEST             RH2ijia(i,j1,i2,a) a 
           tijia(i,j1,i2,a)  = RH2ijia(i,j1,i2,a)
            DO k20
               if k20 == spdim
                  t2ijiaS(i,j1,i2,a,k20)         = tijia(i,j1,i2,a)
                  PREPARE VH2ijia(i,j1,i2,a,k20) = t2ijiaS(i,j1,i2,a,k20)
               endif
            ENDDO k20
     ENDPARDO i, j1, i2, a 
#
     PARDO i, j1, i2, a 
           REQUEST             RH2ijjb(i,j1,i2,a) a 
           tijia(i,j1,i2,a)  = RH2ijjb(i,j1,i2,a)
            DO k20
               if k20 == spdim
                  t2ijiaS(i,j1,i2,a,k20)         = tijia(i,j1,i2,a)
                  PREPARE VH2ijjb(i,j1,i2,a,k20) = t2ijiaS(i,j1,i2,a,k20)
               endif
            ENDDO k20
     ENDPARDO i, j1, i2, a 
#
#
     execute server_barrier 
#
     PARDO i, j1
#
           GET         VCHACT1AB(i,j1)
           tij(i,j1) = VCHACT1AB(i,j1)
#
            DO k20
               if k20 == spdim
                  t2ijS(i,j1,k20)      = tij(i,j1)
                  PUT VCH1AB(i,j1,k20) = t2ijS(i,j1,k20)
               endif
            ENDDO k20
#
     ENDPARDO i, j1
#
     ENDPROC UPDATE
#    --------------
#
# ----------------------------------------------------------------------------
#
#
# ----------------------------------------------------------------------------
#
     PROC UPDATET
#    ----------- 
#
#    one particle amplitudes
#
     PARDO i, j
      IF i < j 
#
           GET          VCHACT1AB(i,j)
           tij(i,j)   = VCHACT1AB(i,j)
           t2ij(i,j) = tij(i,j) 
       #execute return_diagonal4 t2ij  
          #tij(i,j) -= t2ij(i,j) 
           t1ij(j,i)  = tij(i,j) 
           t1ij(j,i) *= -1.0 
           
           PUT VCHACT1A(i,j) = tij(i,j)  
           PUT VCHACT1A(j,i) = t1ij(j,i)  
#
      ENDIF 
      IF i == j 
#
           GET          VCHACT1AB(i,j)
           tij(i,j)   = VCHACT1AB(i,j)
           if i == j 
              execute symm_force_ij tij 
           endif 
#
           PUT VCHACT1A(i,j) = tij(i,j)  
#
      ENDIF 
     ENDPARDO i, j
     execute sip_barrier 
#
     PARDO i, j
#
           GET        VCHACT1A(i,j)
           tij(i,j) = VCHACT1A(i,j)
          #tij(i,j) *= 0.5  
           PUT VCHACT1AB(i,j) = tij(i,j)  
#
     ENDPARDO i, j
#
     PARDO i, j1, i2, a 
           REQUEST             RH2ijia(i,j1,i2,a) a 
           tijia(i,j1,i2,a)  = RH2ijia(i,j1,i2,a)
           tijia(i,j1,i2,a) *= -1.0  
           PREPARE RH2ijjb(i,j1,i2,a) = tijia(i,j1,i2,a)
     ENDPARDO i, j1, i2, a 

     execute server_barrier 
#
    #PARDO i, j1, i2, a 
    #      REQUEST             R2ijjb(i,j1,i2,a) a 
    #      tijia(i,j1,i2,a)  =  R2ijjb(i,j1,i2,a)  
    #      PREPARE R2ijia(i,j1,i2,a) = tijia(i,j1,i2,a)
    #ENDPARDO i, j1, i2, a 
#
     PARDO i, j1, i2, a 
           REQUEST             RH2ijia(i,j1,i2,a) a 
           tijia(i,j1,i2,a)  = RH2ijia(i,j1,i2,a)
            DO k20
               if k20 == spdim
                  t2ijiaS(i,j1,i2,a,k20)         = tijia(i,j1,i2,a)
                  PREPARE VH2ijia(i,j1,i2,a,k20) = t2ijiaS(i,j1,i2,a,k20)
               endif
            ENDDO k20
     ENDPARDO i, j1, i2, a 
#
     PARDO i, j1, i2, a 
           REQUEST             RH2ijjb(i,j1,i2,a) a 
           tijia(i,j1,i2,a)  = RH2ijjb(i,j1,i2,a)
            DO k20
               if k20 == spdim
                  t2ijiaS(i,j1,i2,a,k20)         = tijia(i,j1,i2,a)
                  PREPARE VH2ijjb(i,j1,i2,a,k20) = t2ijiaS(i,j1,i2,a,k20)
               endif
            ENDDO k20
     ENDPARDO i, j1, i2, a 
#
     PARDO i, j1
#
           GET         VCHACT1AB(i,j1)
           tij(i,j1) = VCHACT1AB(i,j1)
#
            DO k20
               if k20 == spdim
                  t2ijS(i,j1,k20)      = tij(i,j1)
                  PUT VCH1AB(i,j1,k20) = t2ijS(i,j1,k20)
               endif
            ENDDO k20
#
     ENDPARDO i, j1
#
     ENDPROC UPDATET 
#    --------------
#
# ----------------------------------------------------------------------------
#
     PROC SADAPT  
#    ------------ 
#
#    one particle amplitudes
#
     PARDO i, j1, i2, a 
           REQUEST             RH2ijia(i,j1,i2,a) a 
           REQUEST             RH2ijia(i2,j1,i,a) a 
           t1ijia(i,j1,i2,a) = RH2ijia(i2,j1,i,a)
           tijia(i,j1,i2,a)  = RH2ijia(i,j1,i2,a)
           PREPARE RH2ijjb(i,j1,i2,a) = tijia(i,j1,i2,a)
     ENDPARDO i, j1, i2, a 

     execute server_barrier 
#
     PARDO i, j1, i2, a 
           REQUEST             RH2ijjb(i,j1,i2,a) a 
           tijia(i,j1,i2,a)  = RH2ijjb(i,j1,i2,a)
           PREPARE RH2ijia(i,j1,i2,a) = tijia(i,j1,i2,a)
            DO k20
               if k20 == spdim
                  t2ijiaS(i,j1,i2,a,k20)         = tijia(i,j1,i2,a)
                  PREPARE VH2ijia(i,j1,i2,a,k20) = t2ijiaS(i,j1,i2,a,k20)
               endif
            ENDDO k20
     ENDPARDO i, j1, i2, a 
     execute server_barrier 
#
     PARDO i, j1, i2, a 
            DO k20
               if k20 == spdim
                  REQUEST VH2ijia(i,j1,i2,a,k20) a
                  tijia(i,j1,i2,a) = VH2ijia(i,j1,i2,a,k20)  
                  PREPARE RH2ijia(i,j1,i2,a) = tijia(i,j1,i2,a)  
               endif
            ENDDO k20
     ENDPARDO i, j1, i2, a 
     execute server_barrier 
#
     ENDPROC SADAPT  
#    --------------
#
# ---------------------------------------------------------------------------- 
#
#
# ---------------------------------------------------------------------------- 
#
     PROC VCHACT_ZERO
#    ---------------
#
     PARDO i, j1, i2, a 
           tijia(i,j1,i2,a) = 0.0
           PREPARE RH2ijia(i,j1,i2,a) = tijia(i,j1,i2,a)
     ENDPARDO i, j1, i2, a 
#
     PARDO i, j1, i2, a 
           tijia(i,j1,i2,a) = 0.0
           PREPARE RH2ijjb(i,j1,i2,a) = tijia(i,j1,i2,a)
     ENDPARDO i, j1, i2, a 
#
     PARDO i, j1
           tij(i,j1) = 0.0
           PUT VCHACT1AB(i,j1) = tij(i,j1)
     ENDPARDO i, j1
#
     PARDO i, j1, i2, a 
           REQUEST R2ijia(i,j1,i2,a) a  
           tijia(i,j1,i2,a) = R2ijia(i,j1,i2,a) 
           tijia(i,j1,i2,a)*= -1.0  
           PREPARE R2ijjb(i,j1,i2,a) = tijia(i,j1,i2,a) 
     ENDPARDO i, j1, i2, a 
#
     ENDPROC VCHACT_ZERO
#    ------------------- 
#
# ---------------------------------------------------------------------------- 
#
      PROC ConstrA_ab 
#     --------------- 
#
      PARDO i1, j  
            DO k20 
            IF k20 == spdim  
               GET         VCH1AB(i1,j,k20)  
               t1ij(i1,j) = VCH1AB(i1,j,k20) 
               DO k21 
               if k21 <= spdim  
                  DO j20 
                     IF j20 == k21 
                        GET                VC1AB(i1,j,k21) 
                        tij(i1,j)         = VC1AB(i1,j,k21) 
                        etemp            = tij(i1,j)*t1ij(i1,j)
                        t20(j20,k20)     = etemp 
                        PUT ax(j20,k20) += t20(j20,k20) 
                     endif # j20 == k21 
                  ENDDO j20 
               endif 
               ENDDO k21 
            endif 
            ENDDO k20 
      ENDPARDO i1, j  
#
      PARDO i1, j  
            DO k21 
            IF k21 == spdim  
                  DO j20 
                     IF j20 == k21 
                        GET          VC1AB(i1,j,k21) 
                        tij(i1,j)   = VC1AB(i1,j,k21) 
                        DO k20 
                          if k20 < spdim  
                             GET                VCH1AB(i1,j,k20)  
                             t1ij(i1,j)        = VCH1AB(i1,j,k20) 
                             etemp            = tij(i1,j)*t1ij(i1,j)
                             t20(j20,k20)     = etemp 
                             PUT ax(j20,k20) += t20(j20,k20) 
                          endif 
                        ENDDO k20 
                     endif # j20 == k21 
                  ENDDO j20 
            endif 
            ENDDO k21 
      ENDPARDO i1, j  
#
      ENDPROC ConstrA_ab 
#     ------------------ 

# ---------------------------------------------------------------------------- 
#
      PROC ConstrA_ijia  
#     ----------------- 
#
      PARDO i, j1, a, i2 
            DO k20 
            IF k20 == spdim  
               request             VH2ijia(i,j1,i2,a,k20) j1 
               t1ijia(i,j1,i2,a) = VH2ijia(i,j1,i2,a,k20) 
               DO k21 
               if k21 <= spdim  
                  DO j20 
                     IF j20 == k21 
                        request             V2ijia(i,j1,i2,a,k21) j1
                        tijia(i,j1,i2,a)  = V2ijia(i,j1,i2,a,k21) 
                        etemp             = tijia(i,j1,i2,a)*t1ijia(i,j1,i2,a)
                        t20(j20,k20)      = etemp 
                        PUT ax(j20,k20)  += t20(j20,k20) 
                     endif # j20 == k21 
                  ENDDO j20 
               endif 
               ENDDO k21 
            endif 
            ENDDO k20 
      ENDPARDO i, j1, a, i2  
#
      PARDO i, j1, i2, a  
            DO k21 
            IF k21 == spdim  
                  DO j20 
                     IF j20 == k21 
                        request             V2ijia(i,j1,i2,a,k21) j1
                        tijia(i,j1,i2,a)  = V2ijia(i,j1,i2,a,k21) 
                        DO k20 
                          if k20 < spdim  
                             request             VH2ijia(i,j1,i2,a,k20) j1 
                             t1ijia(i,j1,i2,a) = VH2ijia(i,j1,i2,a,k20) 
                             etemp             = tijia(i,j1,i2,a)*t1ijia(i,j1,i2,a)
                             t20(j20,k20)      = etemp 
                             PUT ax(j20,k20)  += t20(j20,k20) 
                          endif 
                        ENDDO k20 
                     endif # j20 == k21 
                  ENDDO j20 
            endif 
            ENDDO k21 
      ENDPARDO i, j1, i2, a  
#
      ENDPROC ConstrA_ijia  
#     -------------------- 

# ---------------------------------------------------------------------------- 
#
      PROC ConstrA_ijjb  
#     ----------------- 
#
      PARDO i, j1, a, i2 
            DO k20 
            IF k20 == spdim  
               request             VH2ijjb(i,j1,i2,a,k20) j1 
               t1ijia(i,j1,i2,a) = VH2ijjb(i,j1,i2,a,k20) 
               DO k21 
               if k21 <= spdim  
                  DO j20 
                     IF j20 == k21 
                        request             V2ijjb(i,j1,i2,a,k21) j1
                        tijia(i,j1,i2,a)  = V2ijjb(i,j1,i2,a,k21) 
                        etemp             = tijia(i,j1,i2,a)*t1ijia(i,j1,i2,a)
                        t20(j20,k20)      = etemp 
                        PUT ax(j20,k20)  += t20(j20,k20) 
                     endif # j20 == k21 
                  ENDDO j20 
               endif 
               ENDDO k21 
            endif 
            ENDDO k20 
      ENDPARDO i, j1, a, i2  
#
      PARDO i, j1, i2, a  
            DO k21 
            IF k21 == spdim  
                  DO j20 
                     IF j20 == k21 
                        request             V2ijjb(i,j1,i2,a,k21) j1
                        tijia(i,j1,i2,a)  = V2ijjb(i,j1,i2,a,k21) 
                        DO k20 
                          if k20 < spdim  
                             request             VH2ijjb(i,j1,i2,a,k20) j1 
                             t1ijia(i,j1,i2,a) = VH2ijjb(i,j1,i2,a,k20) 
                             etemp             = tijia(i,j1,i2,a)*t1ijia(i,j1,i2,a)
                             t20(j20,k20)      = etemp 
                             PUT ax(j20,k20)  += t20(j20,k20) 
                          endif 
                        ENDDO k20 
                     endif # j20 == k21 
                  ENDDO j20 
            endif 
            ENDDO k21 
      ENDPARDO i, j1, i2, a  
#
      ENDPROC ConstrA_ijjb  
#     -------------------- 

# ---------------------------------------------------------------------------- 
#
#
# ----------------------------------------------------------------------------- 
#
      PROC Aconstr_tr 
#     --------------- 
#
      do spdim 
      if spdim < 13 
#
      create ax 
      execute sip_barrier 
     #CALL ConstrA_a 
     #CALL ConstrA_b 
     #CALL ConstrA_iiia  
     #CALL ConstrA_jjjb  
     #CALL ConstrA_iijb  
     #CALL ConstrA_jjia  
      CALL ConstrA_ijia  
      CALL ConstrA_ijjb  
      CALL ConstrA_ab 
      execute server_barrier 
#
       DO kindex20
       DO jindex20
          if kindex20 == spdim  
          if jindex20 <= spdim  
             GET                         ax(jindex20,kindex20) 
             sMAT20(jindex20,kindex20) = ax(jindex20,kindex20) 
          endif 
          endif 
          if kindex20 <= spdim  
          if jindex20 == spdim  
             GET                         ax(jindex20,kindex20) 
             sMAT20(jindex20,kindex20) = ax(jindex20,kindex20) 
          endif 
          endif 
       ENDDO jindex20
       ENDDO kindex20
       execute sip_barrier 
#
       if spdim == 2
          DO kindex20
          DO jindex20
          DO kindex2
          DO jindex2
             if kindex20 == kindex2 
             if jindex20 == jindex2 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp2(jindex2,kindex2)    = etemp3 
                sMAT2(jindex2,kindex2) = atemp2(jindex2,kindex2)   
             endif 
             endif 
          ENDDO jindex2
          ENDDO kindex2
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 3
          DO kindex20
          DO jindex20
          DO kindex3
          DO jindex3
             if kindex20 == kindex3 
             if jindex20 == jindex3 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp3(jindex3,kindex3)    = etemp3 
                sMAT3(jindex3,kindex3) = atemp3(jindex3,kindex3)   
             endif 
             endif 
          ENDDO jindex3
          ENDDO kindex3
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 4
          DO kindex20
          DO jindex20
          DO kindex4
          DO jindex4
             if kindex20 == kindex4 
             if jindex20 == jindex4 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp4(jindex4,kindex4)    = etemp3 
                sMAT4(jindex4,kindex4) = atemp4(jindex4,kindex4)   
             endif 
             endif 
          ENDDO jindex4
          ENDDO kindex4
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 5
          DO kindex20
          DO jindex20
          DO kindex5
          DO jindex5
             if kindex20 == kindex5 
             if jindex20 == jindex5 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp5(jindex5,kindex5)    = etemp3 
                sMAT5(jindex5,kindex5) = atemp5(jindex5,kindex5)   
             endif 
             endif 
          ENDDO jindex5
          ENDDO kindex5
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 6
          DO kindex20
          DO jindex20
          DO kindex6
          DO jindex6
             if kindex20 == kindex6 
             if jindex20 == jindex6 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp6(jindex6,kindex6)    = etemp3 
                sMAT6(jindex6,kindex6) = atemp6(jindex6,kindex6)   
             endif 
             endif 
          ENDDO jindex6
          ENDDO kindex6
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 7
          DO kindex20
          DO jindex20
          DO kindex7
          DO jindex7
             if kindex20 == kindex7 
             if jindex20 == jindex7 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp7(jindex7,kindex7)    = etemp3 
                sMAT7(jindex7,kindex7) = atemp7(jindex7,kindex7)   
             endif 
             endif 
          ENDDO jindex7
          ENDDO kindex7
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 8
          DO kindex20
          DO jindex20
          DO kindex8
          DO jindex8
             if kindex20 == kindex8 
             if jindex20 == jindex8 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp8(jindex8,kindex8)    = etemp3 
                sMAT8(jindex8,kindex8) = atemp8(jindex8,kindex8)   
             endif 
             endif 
          ENDDO jindex8
          ENDDO kindex8
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 9
          DO kindex20
          DO jindex20
          DO kindex9
          DO jindex9
             if kindex20 == kindex9 
             if jindex20 == jindex9 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp9(jindex9,kindex9)    = etemp3 
                sMAT9(jindex9,kindex9) = atemp9(jindex9,kindex9)   
             endif 
             endif 
          ENDDO jindex9
          ENDDO kindex9
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 10  
          DO kindex20
          DO jindex20
          DO kindex10 
          DO jindex10 
             if kindex20 == kindex10  
             if jindex20 == jindex10 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp10(jindex10,kindex10)    = etemp3 
                sMAT10(jindex10,kindex10) = atemp10(jindex10,kindex10)   
             endif 
             endif 
          ENDDO jindex10 
          ENDDO kindex10 
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 11  
          DO kindex20
          DO jindex20
          DO kindex11 
          DO jindex11 
             if kindex20 == kindex11  
             if jindex20 == jindex11 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp11(jindex11,kindex11)    = etemp3 
                sMAT11(jindex11,kindex11) = atemp11(jindex11,kindex11)   
             endif 
             endif 
          ENDDO jindex11 
          ENDDO kindex11 
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 12  
          DO kindex20
          DO jindex20
          DO kindex12 
          DO jindex12 
             if kindex20 == kindex12  
             if jindex20 == jindex12 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp12(jindex12,kindex12)    = etemp3 
                sMAT12(jindex12,kindex12) = atemp12(jindex12,kindex12)   
             endif 
             endif 
          ENDDO jindex12 
          ENDDO kindex12 
          ENDDO jindex20
          ENDDO kindex20
       endif
#
      execute sip_barrier 
      delete ax 
#
      endif # spdim < 13 
      enddo spdim 
#
     ENDPROC Aconstr_tr 
#    ------------------ 
#
# ----------------------------------------------------------------------------- 
#
# ----------------------------------------------------------------------------- 
#
      PROC Aconstr
#     ------------ 
#
      create ax 
      execute sip_barrier 
     #CALL ConstrA_a # done
     #CALL ConstrA_b 
     #CALL ConstrA_iiia  
     #CALL ConstrA_jjjb  
     #CALL ConstrA_iijb  
     #CALL ConstrA_jjia  
      CALL ConstrA_ijia  
      CALL ConstrA_ijjb  
      CALL ConstrA_ab 
      execute server_barrier 
#
       DO kindex20
       DO jindex20
          if kindex20 == spdim  
          if jindex20 <= spdim  
             GET                         ax(jindex20,kindex20) 
             sMAT20(jindex20,kindex20) = ax(jindex20,kindex20) 
          endif 
          endif 
          if kindex20 <= spdim  
          if jindex20 == spdim  
             GET                         ax(jindex20,kindex20) 
             sMAT20(jindex20,kindex20) = ax(jindex20,kindex20) 
          endif 
          endif 
       ENDDO jindex20
       ENDDO kindex20
       execute sip_barrier 
#
       if spdim == 2
          DO kindex20
          DO jindex20
          DO kindex2
          DO jindex2
             if kindex20 == kindex2 
             if jindex20 == jindex2 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp2(jindex2,kindex2)    = etemp3 
                sMAT2(jindex2,kindex2) = atemp2(jindex2,kindex2)   
             endif 
             endif 
          ENDDO jindex2
          ENDDO kindex2
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 3
          DO kindex20
          DO jindex20
          DO kindex3
          DO jindex3
             if kindex20 == kindex3 
             if jindex20 == jindex3 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp3(jindex3,kindex3)    = etemp3 
                sMAT3(jindex3,kindex3) = atemp3(jindex3,kindex3)   
             endif 
             endif 
          ENDDO jindex3
          ENDDO kindex3
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 4
          DO kindex20
          DO jindex20
          DO kindex4
          DO jindex4
             if kindex20 == kindex4 
             if jindex20 == jindex4 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp4(jindex4,kindex4)    = etemp3 
                sMAT4(jindex4,kindex4) = atemp4(jindex4,kindex4)   
             endif 
             endif 
          ENDDO jindex4
          ENDDO kindex4
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 5
          DO kindex20
          DO jindex20
          DO kindex5
          DO jindex5
             if kindex20 == kindex5 
             if jindex20 == jindex5 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp5(jindex5,kindex5)    = etemp3 
                sMAT5(jindex5,kindex5) = atemp5(jindex5,kindex5)   
             endif 
             endif 
          ENDDO jindex5
          ENDDO kindex5
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 6
          DO kindex20
          DO jindex20
          DO kindex6
          DO jindex6
             if kindex20 == kindex6 
             if jindex20 == jindex6 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp6(jindex6,kindex6)    = etemp3 
                sMAT6(jindex6,kindex6) = atemp6(jindex6,kindex6)   
             endif 
             endif 
          ENDDO jindex6
          ENDDO kindex6
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 7
          DO kindex20
          DO jindex20
          DO kindex7
          DO jindex7
             if kindex20 == kindex7 
             if jindex20 == jindex7 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp7(jindex7,kindex7)    = etemp3 
                sMAT7(jindex7,kindex7) = atemp7(jindex7,kindex7)   
             endif 
             endif 
          ENDDO jindex7
          ENDDO kindex7
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 8
          DO kindex20
          DO jindex20
          DO kindex8
          DO jindex8
             if kindex20 == kindex8 
             if jindex20 == jindex8 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp8(jindex8,kindex8)    = etemp3 
                sMAT8(jindex8,kindex8) = atemp8(jindex8,kindex8)   
             endif 
             endif 
          ENDDO jindex8
          ENDDO kindex8
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 9
          DO kindex20
          DO jindex20
          DO kindex9
          DO jindex9
             if kindex20 == kindex9 
             if jindex20 == jindex9 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp9(jindex9,kindex9)    = etemp3 
                sMAT9(jindex9,kindex9) = atemp9(jindex9,kindex9)   
             endif 
             endif 
          ENDDO jindex9
          ENDDO kindex9
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 10  
          DO kindex20
          DO jindex20
          DO kindex10 
          DO jindex10 
             if kindex20 == kindex10  
             if jindex20 == jindex10 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp10(jindex10,kindex10)    = etemp3 
                sMAT10(jindex10,kindex10) = atemp10(jindex10,kindex10)   
             endif 
             endif 
          ENDDO jindex10 
          ENDDO kindex10 
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 11  
          DO kindex20
          DO jindex20
          DO kindex11 
          DO jindex11 
             if kindex20 == kindex11  
             if jindex20 == jindex11 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp11(jindex11,kindex11)    = etemp3 
                sMAT11(jindex11,kindex11) = atemp11(jindex11,kindex11)   
             endif 
             endif 
          ENDDO jindex11 
          ENDDO kindex11 
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 12  
          DO kindex20
          DO jindex20
          DO kindex12 
          DO jindex12 
             if kindex20 == kindex12  
             if jindex20 == jindex12 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp12(jindex12,kindex12)    = etemp3 
                sMAT12(jindex12,kindex12) = atemp12(jindex12,kindex12)   
             endif 
             endif 
          ENDDO jindex12 
          ENDDO kindex12 
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 13  
          DO kindex20
          DO jindex20
          DO kindex13 
          DO jindex13 
             if kindex20 == kindex13  
             if jindex20 == jindex13 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp13(jindex13,kindex13)    = etemp3 
                sMAT13(jindex13,kindex13) = atemp13(jindex13,kindex13)   
             endif 
             endif 
          ENDDO jindex13 
          ENDDO kindex13 
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 14  
          DO kindex20
          DO jindex20
          DO kindex14 
          DO jindex14 
             if kindex20 == kindex14  
             if jindex20 == jindex14 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp14(jindex14,kindex14)    = etemp3 
                sMAT14(jindex14,kindex14) = atemp14(jindex14,kindex14)   
             endif 
             endif 
          ENDDO jindex14 
          ENDDO kindex14 
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 15  
          DO kindex20
          DO jindex20
          DO kindex15 
          DO jindex15 
             if kindex20 == kindex15  
             if jindex20 == jindex15 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp15(jindex15,kindex15)    = etemp3 
                sMAT15(jindex15,kindex15) = atemp15(jindex15,kindex15)   
             endif 
             endif 
          ENDDO jindex15 
          ENDDO kindex15 
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 16  
          DO kindex20
          DO jindex20
          DO kindex16 
          DO jindex16 
             if kindex20 == kindex16  
             if jindex20 == jindex16 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp16(jindex16,kindex16)    = etemp3 
                sMAT16(jindex16,kindex16) = atemp16(jindex16,kindex16)   
             endif 
             endif 
          ENDDO jindex16 
          ENDDO kindex16 
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 17  
          DO kindex20
          DO jindex20
          DO kindex17 
          DO jindex17 
             if kindex20 == kindex17  
             if jindex20 == jindex17 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp17(jindex17,kindex17)    = etemp3 
                sMAT17(jindex17,kindex17) = atemp17(jindex17,kindex17)   
             endif 
             endif 
          ENDDO jindex17 
          ENDDO kindex17 
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 18  
          DO kindex20
          DO jindex20
          DO kindex18 
          DO jindex18 
             if kindex20 == kindex18  
             if jindex20 == jindex18 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp18(jindex18,kindex18)    = etemp3 
                sMAT18(jindex18,kindex18) = atemp18(jindex18,kindex18)   
             endif 
             endif 
          ENDDO jindex18 
          ENDDO kindex18 
          ENDDO jindex20
          ENDDO kindex20
       endif
#
       if spdim == 19  
          DO kindex20
          DO jindex20
          DO kindex19 
          DO jindex19 
             if kindex20 == kindex19  
             if jindex20 == jindex19 
                t20(jindex20,kindex20)     = smat20(jindex20,kindex20) 
                execute return_sval    t20 etemp3
                atemp19(jindex19,kindex19)    = etemp3 
                sMAT19(jindex19,kindex19) = atemp19(jindex19,kindex19)   
             endif 
             endif 
          ENDDO jindex19 
          ENDDO kindex19 
          ENDDO jindex20
          ENDDO kindex20
       endif

#
      execute sip_barrier 
      delete ax 
#
     ENDPROC Aconstr
#    --------------- 
#
# ---------------------------------------------------------------------------------- 
#
     PROC startvec2
#    -------------- 
#
#    aa block
#    --------
#
#    ij block
#    --------
#
     allocate lij(*,*)
#
     sqr      = 2.0
    #sqr      = 1.0
     exponent = 0.5
     execute    square_root sqr exponent
     etemp    = 1.0/sqr
#
     PARDO i, j
        lij(i,j)               = 0.0
        execute place_one_dip    lij etemp
        tij(i,j)               = lij(i,j)
        PUT    VSTART1AB1(i,j) = tij(i,j)
     ENDPARDO i, j
#
     PARDO i, j
        lij(i,j)               = 0.0
        etemp = 1.0  
        execute place_one_dip_2  lij etemp
        tij(i,j)               = lij(i,j)
        PUT    VSTART1AB2(i,j) = tij(i,j)
     ENDPARDO i, j
#
     PARDO i, j
        lij(i,j)               = 0.0
        etemp = 1.0  
        execute place_one_dip_3  lij etemp
        tij(i,j)               = lij(i,j)
        PUT    VSTART1AB3(i,j) = tij(i,j)
     ENDPARDO i, j
#
     PARDO i, j
        lij(i,j)               = 0.0
        etemp = 1.0  
        execute place_one_dip_4  lij etemp
        tij(i,j)               = lij(i,j)
        PUT    VSTART1AB4(i,j) = tij(i,j)
     ENDPARDO i, j
#
     PARDO i, j
        lij(i,j)               = 0.0
        etemp = 1.0  
        execute place_one_dip_5  lij etemp
        tij(i,j)               = lij(i,j)
        PUT    VSTART1AB5(i,j) = tij(i,j)
     ENDPARDO i, j
#
     PARDO i, j
        lij(i,j)               = 0.0
        etemp = 1.0  
        execute place_one_dip_6  lij etemp
        tij(i,j)               = lij(i,j)
        PUT    VSTART1AB6(i,j) = tij(i,j)
     ENDPARDO i, j
#
     deallocate lij(*,*)
     execute sip_barrier 
#
     PARDO i, j
        GET    VSTART1AB1(i,j) 
        execute dump_amp VSTART1AB1 
     ENDPARDO i, j
#
     ENDPROC startvec2
#    ----------------- 
#
# ----------------------------------------------------------------------
#
     PROC copy_starttoev
#    ------------------- 
#
     PARDO i, j1, i2, a   
           tijia(i,j1,i2,a)          = 0.0  
           PREPARE RE2ijia(i,j1,i2,a)= tijia(i,j1,i2,a)
           PREPARE R2ijia(i,j1,i2,a) = tijia(i,j1,i2,a)
     ENDPARDO i, j1, i2, a   
#
     PARDO i, j1, i2, a   
           tijia(i,j1,i2,a)          = 0.0  
           PREPARE RE2ijjb(i,j1,i2,a)= tijia(i,j1,i2,a)
           PREPARE R2ijjb(i,j1,i2,a) = tijia(i,j1,i2,a)
     ENDPARDO i, j1, i2, a   
#
     PARDO i, j1, i2, a  
#
        DO k21 
           if k21 == 1 
              tijia(i,j1,i2,a)              = 0.0  
              tijiaS(i,j1,i2,a,k21)         = tijia(i,j1,i2,a)  
              PREPARE V2ijia(i,j1,i2,a,k21) = tijiaS(i,j1,i2,a,k21) 
           endif 
           if k21 > 1 
              tijiaS(i,j1,i2,a,k21)         = 0.0   
              PREPARE V2ijia(i,j1,i2,a,k21) = tijiaS(i,j1,i2,a,k21) 
           endif 
        ENDDO k21 
#
     ENDPARDO i, j1, i2, a   
#
     PARDO i, j1, i2, a  
#
        DO k21 
           if k21 == 1 
              tijia(i,j1,i2,a)              = 0.0  
              tijiaS(i,j1,i2,a,k21)         = tijia(i,j1,i2,a)  
              PREPARE V2ijjb(i,j1,i2,a,k21) = tijiaS(i,j1,i2,a,k21) 
           endif 
           if k21 > 1 
              tijiaS(i,j1,i2,a,k21)         = 0.0   
              PREPARE V2ijjb(i,j1,i2,a,k21) = tijiaS(i,j1,i2,a,k21) 
           endif 
        ENDDO k21 
#
     ENDPARDO i, j1, i2, a   

     PARDO i, j1  
#          
           GET                VSTART1AB1(i,j1)
           tij(i,j1)         = VSTART1AB1(i,j1)
           PUT VCE1AB(i,j1)   = tij(i,j1)
           PUT VCACT1AB(i,j1) = tij(i,j1)
#
     ENDPARDO i, j1
#
     PARDO i, j1 
#
     DO k21 
        if k21 == 1 
           GET                VSTART1AB1(i,j1)
           tij(i,j1)         = VSTART1AB1(i,j1)
           tijS(i,j1,k21)     = tij(i,j1)  
           PUT VC1AB(i,j1,k21) = tijS(i,j1,k21) 
        endif 
        if k21 > 1 
           tijS(i,j1,k21)     = 0.0   
           PUT VC1AB(i,j1,k21) = tijS(i,j1,k21) 
        endif 
     ENDDO k21 
#
     ENDPARDO i, j1  
#
     execute server_barrier
#
     ENDPROC copy_starttoev
#    ----------------------
#
# -----------------------------------------------------------------------------
#
     PROC copy_toVCactual_tr
#    ----------------------- 
#
     PARDO i, j1, i2, a  
           DO k21
              if k21 == 21
                 REQUEST                        V2ijia(i,j1,i2,a,k21) a 
                 tijia(i,j1,i2,a)             = V2ijia(i,j1,i2,a,k21)
                 PREPARE temp1ijia(i,j1,i2,a) = tijia(i,j1,i2,a) 
              endif
           ENDDO k21 
     ENDPARDO i, j1, i2, a  
#
     PARDO i, j1, i2, a  
           DO k21
              if k21 == 21
                 REQUEST                        V2ijjb(i,j1,i2,a,k21) a 
                 tijia(i,j1,i2,a)             = V2ijjb(i,j1,i2,a,k21)
                 PREPARE temp1ijjb(i,j1,i2,a) = tijia(i,j1,i2,a) 
              endif
           ENDDO k21 
     ENDPARDO i, j1, i2, a  
     execute server_barrier 
#
    #PARDO i, j1, i2, a  
    #      DO k21
    #         if k21 == 21
    #            REQUEST                        V2ijia(i2,j1,i,a,k21) a 
    #            t1ijia(i2,j1,i,a)             = V2ijia(i2,j1,i,a,k21)
    #            t1ijia(i2,j1,i,a)            *= -1.0  
    #            tijia(i,j1,i2,a) = t1ijia(i2,j1,i,a) 
    #            PREPARE temp1ijia(i,j1,i2,a)+= tijia(i,j1,i2,a) 
    #         endif
    #      ENDDO k21 
    #ENDPARDO i, j1, i2, a  
#
     PARDO i, j1 
           DO k21
              if k21 == 21
                 GET        VC1AB(i,j1,k21)
                 tij(i,j1) = VC1AB(i,j1,k21)
                 PUT VCACT1AB(i,j1) = Tij(i,j1)
                 DO j21 
                    if j21 == 13 
                       tijS(i,j1,j21)     = Tij(i,j1)
                       PUT VC1AB(i,j1,j21) = tijS(i,j1,j21) 
                    endif 
                 ENDDO j21 
              endif
           ENDDO k21 
     ENDPARDO i, j1 
#
     execute server_barrier
#
     PARDO i, j1, i2, a  
           REQUEST                     temp1ijia(i,j1,i2,a) j1
           Tijia(i,j1,i2,a)          = temp1ijia(i,j1,i2,a)
           PREPARE R2ijia(i,j1,i2,a) = Tijia(i,j1,i2,a)
           DO k21
              if k21 == 13
                 tijiaS(i,j1,i2,a,k21)        = Tijia(i,j1,i2,a)
                 PREPARE V2ijia(i,j1,i2,a,k21) = tijiaS(i,j1,i2,a,k21)
              endif
           ENDDO k21
     ENDPARDO i, j1, i2, a  
#
     PARDO i, j1, i2, a  
           REQUEST                     temp1ijjb(i,j1,i2,a) j1
           Tijia(i,j1,i2,a)          = temp1ijjb(i,j1,i2,a)
           PREPARE R2ijjb(i,j1,i2,a) = Tijia(i,j1,i2,a)
           DO k21
              if k21 == 13
                 tijiaS(i,j1,i2,a,k21)        = Tijia(i,j1,i2,a)
                 PREPARE V2ijjb(i,j1,i2,a,k21) = tijiaS(i,j1,i2,a,k21)
              endif
           ENDDO k21
     ENDPARDO i, j1, i2, a  
#
     ENDPROC copy_toVCactual_tr
#    -------------------------- 
#
# -----------------------------------------------------------------------------
#
     PROC copy_toVCactual
#    -------------------- 
#
     PARDO i, j1, i2, a  
           DO k21
              if k21 == spdim
                 REQUEST                     V2ijia(i,j1,i2,a,k21) a 
                 tijia(i,j1,i2,a)          = V2ijia(i,j1,i2,a,k21)
                 PREPARE R2ijia(i,j1,i2,a) = tijia(i,j1,i2,a)
              endif
           ENDDO k21
     ENDPARDO i, j1, i2, a  
#
     PARDO i, j1, i2, a  
           DO k21
              if k21 == spdim
                 REQUEST                     V2ijjb(i,j1,i2,a,k21) a 
                 tijia(i,j1,i2,a)          = V2ijjb(i,j1,i2,a,k21)
                 PREPARE R2ijjb(i,j1,i2,a) = tijia(i,j1,i2,a)
              endif
           ENDDO k21
     ENDPARDO i, j1, i2, a  
     execute server_barrier 
#
     PARDO i, j1 
           DO k21
              if k21 == spdim
                 GET                VC1AB(i,j1,k21)
                 tij(i,j1)         = VC1AB(i,j1,k21)
                 PUT VCACT1AB(i,j1) = tij(i,j1)
              endif
           ENDDO k21
     ENDPARDO i, j1 
#
     execute server_barrier
#
     ENDPROC copy_toVCactual
#
# ------------------------------------------------------------------------ 
#
     PROC SYMMETRHC_A
#    ---------------- 
#
     PARDO a, a1, i, i1
           Taiai(a,i,a1,i1)              = 0.0
           PREPARE VCE2AA(a,i,a1,i1)    = Taiai(a,i,a1,i1)
           PREPARE VCHACT2AA(a,i,a1,i1) = Taiai(a,i,a1,i1)
     ENDPARDO  a, a1, i, i1
#
     PARDO b, b1, j, j1
           Tbjbj(b,j,b1,j1)             = 0.0
           PREPARE VCE2BB(b,j,b1,j1)    = Tbjbj(b,j,b1,j1)
           PREPARE VCHACT2BB(b,j,b1,j1) = Tbjbj(b,j,b1,j1)
     ENDPARDO b, b1, j, j1
#
     execute server_barrier
#
     PARDO a, a1, i, i1
           DO k20 
              if k20 == spdim 
                 REQUEST            VCH2AA(a,i,a1,i1,k20) a 
                 taiai(a,i,a1,i1) = VCH2AA(a,i,a1,i1,k20)  
#
                 R3aiai(a1,i,a,i1) = 0.0
                 Raiai(a,i,a1,i1)  = 0.0
#
                 if a == a1
#   
                    Raiai(a,i,a1,i1)    =Taiai(a,i,a1,i1)
                    execute symm_force_a Raiai
#
                 endif
#
                 if a < a1
#
                    Raiai(a,i,a1,i1)   = Taiai(a,i,a1,i1)
                    R3aiai(a1,i,a,i1)  = Taiai(a,i,a1,i1)
                    R3aiai(a1,i,a,i1) *= -1.0
#
                 endif
#
                 PREPARE VCE2AA(a,i,a1,i1) += Raiai(a,i,a1,i1)
                 PREPARE VCE2AA(a1,i,a,i1) += R3aiai(a1,i,a,i1)
              endif 
#
           ENDDO k20 
#
     ENDPARDO  a, a1, i, i1
#
     PARDO b, b1, j, j1
           DO k20 
              if k20 == spdim 
                 REQUEST            VCH2BB(b,j,b1,j1,k20) b 
                 tbjbj(b,j,b1,j1) = VCH2BB(b,j,b1,j1,k20)  
#
                 R3bjbj(b1,j,b,j1) = 0.0
                 Rbjbj(b,j,b1,j1)  = 0.0
#
                 if b == b1
#   
                    Rbjbj(b,j,b1,j1)    =Tbjbj(b,j,b1,j1)
                    execute symm_force_a Rbjbj 
#
                 endif
#
                 if b < b1
#
                    Rbjbj(b,j,b1,j1)   = Tbjbj(b,j,b1,j1)
                    R3bjbj(b1,j,b,j1)  = Tbjbj(b,j,b1,j1)
                    R3bjbj(b1,j,b,j1) *= -1.0
#
                 endif
#
                 PREPARE VCE2BB(b,j,b1,j1) += Rbjbj(b,j,b1,j1)
                 PREPARE VCE2BB(b1,j,b,j1) += R3bjbj(b1,j,b,j1)
              endif 
#
           ENDDO k20 
#
     ENDPARDO  b, b1, j, j1
#
     execute server_barrier
#
     PARDO a, a1, i, i1
#
           REQUEST            VCE2AA(a,i,a1,i1) i1
           Taiai(a,i,a1,i1) = VCE2AA(a,i,a1,i1)
#
           R2aiai(a,i1,a1,i)= 0.0
           Raiai(a,i,a1,i1) = 0.0
#
           if i == i1
#
              Raiai(a,i,a1,i1)=Taiai(a,i,a1,i1)
              execute symm_force_i Raiai
#
           endif
#
           if i < i1
#
              Raiai(a,i,a1,i1)   = Taiai(a,i,a1,i1)
              R2aiai(a,i1,a1,i)  = Taiai(a,i,a1,i1)
              R2aiai(a,i1,a1,i) *= -1.0
#
           endif
#
           PREPARE VCHACT2AA(a,i,a1,i1) += Raiai(a,i,a1,i1)
           PREPARE VCHACT2AA(a,i1,a1,i) += R2aiai(a,i1,a1,i)
#
     ENDPARDO  a, a1, i, i1
#
     PARDO  b, b1, j, j1
#
           REQUEST            VCE2BB(b,j,b1,j1) j1
           Tbjbj(b,j,b1,j1) = VCE2BB(b,j,b1,j1)
#
           R2bjbj(b,j1,b1,j)= 0.0
           Rbjbj(b,j,b1,j1) = 0.0
#
           if j == j1
#
              Rbjbj(b,j,b1,j1)=Tbjbj(b,j,b1,j1)
              execute symm_force_i Rbjbj
#
           endif
#
           if j < j1
#
              Rbjbj(b,j,b1,j1)   = Tbjbj(b,j,b1,j1)
              R2bjbj(b,j1,b1,j)  = Tbjbj(b,j,b1,j1)
              R2bjbj(b,j1,b1,j) *= -1.0
#
           endif
#
           PREPARE VCHACT2BB(b,j,b1,j1) += Rbjbj(b,j,b1,j1)
           PREPARE VCHACT2BB(b,j1,b1,j) += R2bjbj(b,j1,b1,j)
#
     ENDPARDO  b, b1, j, j1
#
     execute server_barrier
#
     ENDPROC SYMMETRHC_A
#    ------------------- 
#
     PROC SYMMETRHC_B
#    ----------------
#
     PARDO a, a1, i, i1
           REQUEST            VCHACT2AA(a,i,a1,i1) i1
           Taiai(a,i,a1,i1) = VCHACT2AA(a,i,a1,i1)
#
           DO k20 
              if k20 == spdim 
                 t2aiaiS(a,i,a1,i1,k20)        = Taiai(a,i,a1,i1) 
                 PREPARE VCH2AA(a,i,a1,i1,k20) = t2aiaiS(a,i,a1,i1,k20)
              endif  
           ENDDO k20 
#
     ENDPARDO  a, a1, i, i1
#
     PARDO b, b1, j, j1
           REQUEST            VCHACT2BB(b,j,b1,j1) j1
           Tbjbj(b,j,b1,j1) = VCHACT2BB(b,j,b1,j1)
#
           DO k20 
              if k20 == spdim 
                 t2bjbjS(b,j,b1,j1,k20)        = Tbjbj(b,j,b1,j1) 
                 PREPARE VCH2BB(b,j,b1,j1,k20) = t2bjbjS(b,j,b1,j1,k20)
              endif  
           ENDDO k20 
#
     ENDPARDO  b, b1, j, j1
#
     ENDPROC SYMMETRHC_B
#    -------------------
#
# ------------------------------------------------------------------------------------ 
#
     PROC HCmult
#    ----------- 
#
      create Xib 
      create Xja 
      execute server_barrier
      CALL FORMXAI
      execute server_barrier
#
      call VCHACT_ZERO # done
      execute server_barrier
#
      call R1ABNEW   
      call R12ABNEW   
      call R2ABAINEW
      call TMP 
#
      execute server_barrier
#
     #call UPDATE # done
      call UPDATET # done
#
      execute server_barrier
      delete Xib 
      delete Xja 
#
##      call SYMMETRHC_A
##      call SYMMETRHC_B
##      execute server_barrier
#
     ENDPROC HCmult
#    --------------
#
# ------------------------------------------------------------------------------------------ 
#
     PROC Adiag
#
     Aeig1=0.0
     Aeig2=0.0
     Aeig3=0.0
     Aeig4=0.0
     Aeig5=0.0
     Aeig6=0.0
     Aeig7=0.0
     Aeig8=0.0
     Aeig9=0.0
     Aeig10=0.0
     Aeig11=0.0
     Aeig12=0.0
     Aeig13=0.0
     Aeig14=0.0
     Aeig15=0.0
     Aeig16=0.0
     Aeig17=0.0
     Aeig18=0.0
     Aeig19=0.0
     Aeig20=0.0
#
#    FIRST ITERATION
#
     if spdim == 1
#
    #Aeig1=a1_1
#
     do jindex20 
     do kindex20 
         if jindex20 == 1 
         if kindex20 == 1 
            t20(kindex20,jindex20) = sMAT20(kindex20,jindex20) 
            execute return_sval t20  Aeig1
         endif 
         endif 
     enddo kindex20 
     enddo jindex20 
#
     endif
#
#======================================================
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#--start of script generated part of the code
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#======================================================
#    --------------2th iteration-----------------
     if spdim == 2
#
     execute eig_nonsymm Smat2 SVEV2
#
     do jindex2
     do kindex2
        tcoef2(kindex2,jindex2)=Smat2(kindex2,jindex2)
        if kindex2 == 1
        if jindex2 == 1
           execute return_sval tcoef2  Aeig1
        endif
        endif
        if kindex2 == 2
        if jindex2 == 2
           execute return_sval tcoef2  Aeig2
        endif
        endif
#
     enddo kindex2
     enddo jindex2
#
     endif
#
#
#    --------------end 2th iteration-----------------
#
#
#    --------------3th iteration-----------------
     if spdim == 3
#
     execute eig_nonsymm Smat3 SVEV3
#
     do jindex3
     do kindex3
#
     tcoef3(kindex3,jindex3)=Smat3(kindex3,jindex3)
#
     if kindex3 == 1
     if jindex3 == 1
     execute return_sval tcoef3  Aeig1
     endif
     endif
     if kindex3 == 2
     if jindex3 == 2
     execute return_sval tcoef3  Aeig2
     endif
     endif
     if kindex3 == 3
     if jindex3 == 3
     execute return_sval tcoef3  Aeig3
     endif
     endif
#
     enddo kindex3
     enddo jindex3
#
     endif
#
#
#    --------------end 3th iteration-----------------
#
#
#    --------------4th iteration-----------------
     if spdim == 4
#
     execute eig_nonsymm Smat4 SVEV4
#
     do jindex4
     do kindex4
#
     tcoef4(kindex4,jindex4)=Smat4(kindex4,jindex4)
#
     if kindex4 == 1
     if jindex4 == 1
     execute return_sval tcoef4  Aeig1
     endif
     endif
     if kindex4 == 2
     if jindex4 == 2
     execute return_sval tcoef4  Aeig2
     endif
     endif
     if kindex4 == 3
     if jindex4 == 3
     execute return_sval tcoef4  Aeig3
     endif
     endif
     if kindex4 == 4
     if jindex4 == 4
     execute return_sval tcoef4  Aeig4
     endif
     endif
#
     enddo kindex4
     enddo jindex4
#
     endif
#
#
#    --------------end 4th iteration-----------------
#
#
#    --------------5th iteration-----------------
     if spdim == 5
#
     execute eig_nonsymm Smat5 SVEV5
#
     do jindex5
     do kindex5
#
     tcoef5(kindex5,jindex5)=Smat5(kindex5,jindex5)
#
     if kindex5 == 1
     if jindex5 == 1
     execute return_sval tcoef5  Aeig1
     endif
     endif
     if kindex5 == 2
     if jindex5 == 2
     execute return_sval tcoef5  Aeig2
     endif
     endif
     if kindex5 == 3
     if jindex5 == 3
     execute return_sval tcoef5  Aeig3
     endif
     endif
     if kindex5 == 4
     if jindex5 == 4
     execute return_sval tcoef5  Aeig4
     endif
     endif
     if kindex5 == 5
     if jindex5 == 5
     execute return_sval tcoef5  Aeig5
     endif
     endif
#
     enddo kindex5
     enddo jindex5
#
     endif
#
#
#    --------------end 5th iteration-----------------
#
#
#    --------------6th iteration-----------------
     if spdim == 6
#
     execute eig_nonsymm Smat6 SVEV6
#
     do jindex6
     do kindex6
#
     tcoef6(kindex6,jindex6)=Smat6(kindex6,jindex6)
#
     if kindex6 == 1
     if jindex6 == 1
     execute return_sval tcoef6  Aeig1
     endif
     endif
     if kindex6 == 2
     if jindex6 == 2
     execute return_sval tcoef6  Aeig2
     endif
     endif
     if kindex6 == 3
     if jindex6 == 3
     execute return_sval tcoef6  Aeig3
     endif
     endif
     if kindex6 == 4
     if jindex6 == 4
     execute return_sval tcoef6  Aeig4
     endif
     endif
     if kindex6 == 5
     if jindex6 == 5
     execute return_sval tcoef6  Aeig5
     endif
     endif
     if kindex6 == 6
     if jindex6 == 6
     execute return_sval tcoef6  Aeig6
     endif
     endif
#
     enddo kindex6
     enddo jindex6
#
     endif
#
#
#    --------------end 6th iteration-----------------
#
#
#    --------------7th iteration-----------------
     if spdim == 7
#
     execute eig_nonsymm Smat7 SVEV7
#
     do jindex7
     do kindex7
#
     tcoef7(kindex7,jindex7)=Smat7(kindex7,jindex7)
#
     if kindex7 == 1
     if jindex7 == 1
     execute return_sval tcoef7  Aeig1
     endif
     endif
     if kindex7 == 2
     if jindex7 == 2
     execute return_sval tcoef7  Aeig2
     endif
     endif
     if kindex7 == 3
     if jindex7 == 3
     execute return_sval tcoef7  Aeig3
     endif
     endif
     if kindex7 == 4
     if jindex7 == 4
     execute return_sval tcoef7  Aeig4
     endif
     endif
     if kindex7 == 5
     if jindex7 == 5
     execute return_sval tcoef7  Aeig5
     endif
     endif
     if kindex7 == 6
     if jindex7 == 6
     execute return_sval tcoef7  Aeig6
     endif
     endif
     if kindex7 == 7
     if jindex7 == 7
     execute return_sval tcoef7  Aeig7
     endif
     endif
#
     enddo kindex7
     enddo jindex7
#
     endif
#
#
#    --------------end 7th iteration-----------------
#
#
#    --------------8th iteration-----------------
     if spdim == 8
#
     execute eig_nonsymm Smat8 SVEV8
#
     do jindex8
     do kindex8
#
     tcoef8(kindex8,jindex8)=Smat8(kindex8,jindex8)
#
     if kindex8 == 1
     if jindex8 == 1
     execute return_sval tcoef8  Aeig1
     endif
     endif
     if kindex8 == 2
     if jindex8 == 2
     execute return_sval tcoef8  Aeig2
     endif
     endif
     if kindex8 == 3
     if jindex8 == 3
     execute return_sval tcoef8  Aeig3
     endif
     endif
     if kindex8 == 4
     if jindex8 == 4
     execute return_sval tcoef8  Aeig4
     endif
     endif
     if kindex8 == 5
     if jindex8 == 5
     execute return_sval tcoef8  Aeig5
     endif
     endif
     if kindex8 == 6
     if jindex8 == 6
     execute return_sval tcoef8  Aeig6
     endif
     endif
     if kindex8 == 7
     if jindex8 == 7
     execute return_sval tcoef8  Aeig7
     endif
     endif
     if kindex8 == 8
     if jindex8 == 8
     execute return_sval tcoef8  Aeig8
     endif
     endif
#
     enddo kindex8
     enddo jindex8
#
     endif
#
#
#    --------------end 8th iteration-----------------
#
#
#    --------------9th iteration-----------------
     if spdim == 9
#
     execute eig_nonsymm Smat9 SVEV9
#
     do jindex9
     do kindex9
#
     tcoef9(kindex9,jindex9)=Smat9(kindex9,jindex9)
#
     if kindex9 == 1
     if jindex9 == 1
     execute return_sval tcoef9  Aeig1
     endif
     endif
     if kindex9 == 2
     if jindex9 == 2
     execute return_sval tcoef9  Aeig2
     endif
     endif
     if kindex9 == 3
     if jindex9 == 3
     execute return_sval tcoef9  Aeig3
     endif
     endif
     if kindex9 == 4
     if jindex9 == 4
     execute return_sval tcoef9  Aeig4
     endif
     endif
     if kindex9 == 5
     if jindex9 == 5
     execute return_sval tcoef9  Aeig5
     endif
     endif
     if kindex9 == 6
     if jindex9 == 6
     execute return_sval tcoef9  Aeig6
     endif
     endif
     if kindex9 == 7
     if jindex9 == 7
     execute return_sval tcoef9  Aeig7
     endif
     endif
     if kindex9 == 8
     if jindex9 == 8
     execute return_sval tcoef9  Aeig8
     endif
     endif
     if kindex9 == 9
     if jindex9 == 9
     execute return_sval tcoef9  Aeig9
     endif
     endif
#
     enddo kindex9
     enddo jindex9
#
     endif
#
#
#    --------------end 9th iteration-----------------
#
#
#    --------------10th iteration-----------------
     if spdim == 10
#
     execute eig_nonsymm Smat10 SVEV10
#
     do jindex10
     do kindex10
#
     tcoef10(kindex10,jindex10)=Smat10(kindex10,jindex10)
#
     if kindex10 == 1
     if jindex10 == 1
     execute return_sval tcoef10  Aeig1
     endif
     endif
     if kindex10 == 2
     if jindex10 == 2
     execute return_sval tcoef10  Aeig2
     endif
     endif
     if kindex10 == 3
     if jindex10 == 3
     execute return_sval tcoef10  Aeig3
     endif
     endif
     if kindex10 == 4
     if jindex10 == 4
     execute return_sval tcoef10  Aeig4
     endif
     endif
     if kindex10 == 5
     if jindex10 == 5
     execute return_sval tcoef10  Aeig5
     endif
     endif
     if kindex10 == 6
     if jindex10 == 6
     execute return_sval tcoef10  Aeig6
     endif
     endif
     if kindex10 == 7
     if jindex10 == 7
     execute return_sval tcoef10  Aeig7
     endif
     endif
     if kindex10 == 8
     if jindex10 == 8
     execute return_sval tcoef10  Aeig8
     endif
     endif
     if kindex10 == 9
     if jindex10 == 9
     execute return_sval tcoef10  Aeig9
     endif
     endif
     if kindex10 == 10
     if jindex10 == 10
     execute return_sval tcoef10  Aeig10
     endif
     endif
#
     enddo kindex10
     enddo jindex10
#
     endif
#
#
#    --------------end 10th iteration-----------------
#
#
#    --------------11th iteration-----------------
     if spdim == 11
#
     execute eig_nonsymm Smat11 SVEV11
#
     do jindex11
     do kindex11
#
     tcoef11(kindex11,jindex11)=Smat11(kindex11,jindex11)
#
     if kindex11 == 1
     if jindex11 == 1
     execute return_sval tcoef11  Aeig1
     endif
     endif
     if kindex11 == 2
     if jindex11 == 2
     execute return_sval tcoef11  Aeig2
     endif
     endif
     if kindex11 == 3
     if jindex11 == 3
     execute return_sval tcoef11  Aeig3
     endif
     endif
     if kindex11 == 4
     if jindex11 == 4
     execute return_sval tcoef11  Aeig4
     endif
     endif
     if kindex11 == 5
     if jindex11 == 5
     execute return_sval tcoef11  Aeig5
     endif
     endif
     if kindex11 == 6
     if jindex11 == 6
     execute return_sval tcoef11  Aeig6
     endif
     endif
     if kindex11 == 7
     if jindex11 == 7
     execute return_sval tcoef11  Aeig7
     endif
     endif
     if kindex11 == 8
     if jindex11 == 8
     execute return_sval tcoef11  Aeig8
     endif
     endif
     if kindex11 == 9
     if jindex11 == 9
     execute return_sval tcoef11  Aeig9
     endif
     endif
     if kindex11 == 10
     if jindex11 == 10
     execute return_sval tcoef11  Aeig10
     endif
     endif
     if kindex11 == 11
     if jindex11 == 11
     execute return_sval tcoef11  Aeig11
     endif
     endif
#
     enddo kindex11
     enddo jindex11
#
     endif
#
#
#    --------------end 11th iteration-----------------
#
#
#    --------------12th iteration-----------------
     if spdim == 12
#
     execute eig_nonsymm Smat12 SVEV12
#
     do jindex12
     do kindex12
#
     tcoef12(kindex12,jindex12)=Smat12(kindex12,jindex12)
#
     if kindex12 == 1
     if jindex12 == 1
     execute return_sval tcoef12  Aeig1
     endif
     endif
     if kindex12 == 2
     if jindex12 == 2
     execute return_sval tcoef12  Aeig2
     endif
     endif
     if kindex12 == 3
     if jindex12 == 3
     execute return_sval tcoef12  Aeig3
     endif
     endif
     if kindex12 == 4
     if jindex12 == 4
     execute return_sval tcoef12  Aeig4
     endif
     endif
     if kindex12 == 5
     if jindex12 == 5
     execute return_sval tcoef12  Aeig5
     endif
     endif
     if kindex12 == 6
     if jindex12 == 6
     execute return_sval tcoef12  Aeig6
     endif
     endif
     if kindex12 == 7
     if jindex12 == 7
     execute return_sval tcoef12  Aeig7
     endif
     endif
     if kindex12 == 8
     if jindex12 == 8
     execute return_sval tcoef12  Aeig8
     endif
     endif
     if kindex12 == 9
     if jindex12 == 9
     execute return_sval tcoef12  Aeig9
     endif
     endif
     if kindex12 == 10
     if jindex12 == 10
     execute return_sval tcoef12  Aeig10
     endif
     endif
     if kindex12 == 11
     if jindex12 == 11
     execute return_sval tcoef12  Aeig11
     endif
     endif
     if kindex12 == 12
     if jindex12 == 12
     execute return_sval tcoef12  Aeig12
     endif
     endif
#
     enddo kindex12
     enddo jindex12
#
     endif
#
#
#    --------------end 12th iteration-----------------
#
#
#    --------------13th iteration-----------------
     if spdim == 13
#
     execute eig_nonsymm Smat13 SVEV13
#
     do jindex13
     do kindex13
#
     tcoef13(kindex13,jindex13)=Smat13(kindex13,jindex13)
#
     if kindex13 == 1
     if jindex13 == 1
     execute return_sval tcoef13  Aeig1
     endif
     endif
     if kindex13 == 2
     if jindex13 == 2
     execute return_sval tcoef13  Aeig2
     endif
     endif
     if kindex13 == 3
     if jindex13 == 3
     execute return_sval tcoef13  Aeig3
     endif
     endif
     if kindex13 == 4
     if jindex13 == 4
     execute return_sval tcoef13  Aeig4
     endif
     endif
     if kindex13 == 5
     if jindex13 == 5
     execute return_sval tcoef13  Aeig5
     endif
     endif
     if kindex13 == 6
     if jindex13 == 6
     execute return_sval tcoef13  Aeig6
     endif
     endif
     if kindex13 == 7
     if jindex13 == 7
     execute return_sval tcoef13  Aeig7
     endif
     endif
     if kindex13 == 8
     if jindex13 == 8
     execute return_sval tcoef13  Aeig8
     endif
     endif
     if kindex13 == 9
     if jindex13 == 9
     execute return_sval tcoef13  Aeig9
     endif
     endif
     if kindex13 == 10
     if jindex13 == 10
     execute return_sval tcoef13  Aeig10
     endif
     endif
     if kindex13 == 11
     if jindex13 == 11
     execute return_sval tcoef13  Aeig11
     endif
     endif
     if kindex13 == 12
     if jindex13 == 12
     execute return_sval tcoef13  Aeig12
     endif
     endif
     if kindex13 == 13
     if jindex13 == 13
     execute return_sval tcoef13  Aeig13
     endif
     endif
#
     enddo kindex13
     enddo jindex13
#
     endif
#
#
#    --------------end 13th iteration-----------------
#
#
#    --------------14th iteration-----------------
     if spdim == 14
#
     execute eig_nonsymm Smat14 SVEV14
#
     do jindex14
     do kindex14
#
     tcoef14(kindex14,jindex14)=Smat14(kindex14,jindex14)
#
     if kindex14 == 1
     if jindex14 == 1
     execute return_sval tcoef14  Aeig1
     endif
     endif
     if kindex14 == 2
     if jindex14 == 2
     execute return_sval tcoef14  Aeig2
     endif
     endif
     if kindex14 == 3
     if jindex14 == 3
     execute return_sval tcoef14  Aeig3
     endif
     endif
     if kindex14 == 4
     if jindex14 == 4
     execute return_sval tcoef14  Aeig4
     endif
     endif
     if kindex14 == 5
     if jindex14 == 5
     execute return_sval tcoef14  Aeig5
     endif
     endif
     if kindex14 == 6
     if jindex14 == 6
     execute return_sval tcoef14  Aeig6
     endif
     endif
     if kindex14 == 7
     if jindex14 == 7
     execute return_sval tcoef14  Aeig7
     endif
     endif
     if kindex14 == 8
     if jindex14 == 8
     execute return_sval tcoef14  Aeig8
     endif
     endif
     if kindex14 == 9
     if jindex14 == 9
     execute return_sval tcoef14  Aeig9
     endif
     endif
     if kindex14 == 10
     if jindex14 == 10
     execute return_sval tcoef14  Aeig10
     endif
     endif
     if kindex14 == 11
     if jindex14 == 11
     execute return_sval tcoef14  Aeig11
     endif
     endif
     if kindex14 == 12
     if jindex14 == 12
     execute return_sval tcoef14  Aeig12
     endif
     endif
     if kindex14 == 13
     if jindex14 == 13
     execute return_sval tcoef14  Aeig13
     endif
     endif
     if kindex14 == 14
     if jindex14 == 14
     execute return_sval tcoef14  Aeig14
     endif
     endif
#
     enddo kindex14
     enddo jindex14
#
     endif
#
#
#    --------------end 14th iteration-----------------
#
#
#    --------------15th iteration-----------------
     if spdim == 15
#
     execute eig_nonsymm Smat15 SVEV15
#
     do jindex15
     do kindex15
#
     tcoef15(kindex15,jindex15)=Smat15(kindex15,jindex15)
#
     if kindex15 == 1
     if jindex15 == 1
     execute return_sval tcoef15  Aeig1
     endif
     endif
     if kindex15 == 2
     if jindex15 == 2
     execute return_sval tcoef15  Aeig2
     endif
     endif
     if kindex15 == 3
     if jindex15 == 3
     execute return_sval tcoef15  Aeig3
     endif
     endif
     if kindex15 == 4
     if jindex15 == 4
     execute return_sval tcoef15  Aeig4
     endif
     endif
     if kindex15 == 5
     if jindex15 == 5
     execute return_sval tcoef15  Aeig5
     endif
     endif
     if kindex15 == 6
     if jindex15 == 6
     execute return_sval tcoef15  Aeig6
     endif
     endif
     if kindex15 == 7
     if jindex15 == 7
     execute return_sval tcoef15  Aeig7
     endif
     endif
     if kindex15 == 8
     if jindex15 == 8
     execute return_sval tcoef15  Aeig8
     endif
     endif
     if kindex15 == 9
     if jindex15 == 9
     execute return_sval tcoef15  Aeig9
     endif
     endif
     if kindex15 == 10
     if jindex15 == 10
     execute return_sval tcoef15  Aeig10
     endif
     endif
     if kindex15 == 11
     if jindex15 == 11
     execute return_sval tcoef15  Aeig11
     endif
     endif
     if kindex15 == 12
     if jindex15 == 12
     execute return_sval tcoef15  Aeig12
     endif
     endif
     if kindex15 == 13
     if jindex15 == 13
     execute return_sval tcoef15  Aeig13
     endif
     endif
     if kindex15 == 14
     if jindex15 == 14
     execute return_sval tcoef15  Aeig14
     endif
     endif
     if kindex15 == 15
     if jindex15 == 15
     execute return_sval tcoef15  Aeig15
     endif
     endif
#
     enddo kindex15
     enddo jindex15
#
     endif
#
#
#    --------------end 15th iteration-----------------
#
#
#    --------------16th iteration-----------------
     if spdim == 16
#
     execute eig_nonsymm Smat16 SVEV16
#
     do jindex16
     do kindex16
#
     tcoef16(kindex16,jindex16)=Smat16(kindex16,jindex16)
#
     if kindex16 == 1
     if jindex16 == 1
     execute return_sval tcoef16  Aeig1
     endif
     endif
     if kindex16 == 2
     if jindex16 == 2
     execute return_sval tcoef16  Aeig2
     endif
     endif
     if kindex16 == 3
     if jindex16 == 3
     execute return_sval tcoef16  Aeig3
     endif
     endif
     if kindex16 == 4
     if jindex16 == 4
     execute return_sval tcoef16  Aeig4
     endif
     endif
     if kindex16 == 5
     if jindex16 == 5
     execute return_sval tcoef16  Aeig5
     endif
     endif
     if kindex16 == 6
     if jindex16 == 6
     execute return_sval tcoef16  Aeig6
     endif
     endif
     if kindex16 == 7
     if jindex16 == 7
     execute return_sval tcoef16  Aeig7
     endif
     endif
     if kindex16 == 8
     if jindex16 == 8
     execute return_sval tcoef16  Aeig8
     endif
     endif
     if kindex16 == 9
     if jindex16 == 9
     execute return_sval tcoef16  Aeig9
     endif
     endif
     if kindex16 == 10
     if jindex16 == 10
     execute return_sval tcoef16  Aeig10
     endif
     endif
     if kindex16 == 11
     if jindex16 == 11
     execute return_sval tcoef16  Aeig11
     endif
     endif
     if kindex16 == 12
     if jindex16 == 12
     execute return_sval tcoef16  Aeig12
     endif
     endif
     if kindex16 == 13
     if jindex16 == 13
     execute return_sval tcoef16  Aeig13
     endif
     endif
     if kindex16 == 14
     if jindex16 == 14
     execute return_sval tcoef16  Aeig14
     endif
     endif
     if kindex16 == 15
     if jindex16 == 15
     execute return_sval tcoef16  Aeig15
     endif
     endif
     if kindex16 == 16
     if jindex16 == 16
     execute return_sval tcoef16  Aeig16
     endif
     endif
#
     enddo kindex16
     enddo jindex16
#
     endif
#
#
#    --------------end 16th iteration-----------------
#
#
#    --------------17th iteration-----------------
     if spdim == 17
#
     execute eig_nonsymm Smat17 SVEV17
#
     do jindex17
     do kindex17
#
     tcoef17(kindex17,jindex17)=Smat17(kindex17,jindex17)
#
     if kindex17 == 1
     if jindex17 == 1
     execute return_sval tcoef17  Aeig1
     endif
     endif
     if kindex17 == 2
     if jindex17 == 2
     execute return_sval tcoef17  Aeig2
     endif
     endif
     if kindex17 == 3
     if jindex17 == 3
     execute return_sval tcoef17  Aeig3
     endif
     endif
     if kindex17 == 4
     if jindex17 == 4
     execute return_sval tcoef17  Aeig4
     endif
     endif
     if kindex17 == 5
     if jindex17 == 5
     execute return_sval tcoef17  Aeig5
     endif
     endif
     if kindex17 == 6
     if jindex17 == 6
     execute return_sval tcoef17  Aeig6
     endif
     endif
     if kindex17 == 7
     if jindex17 == 7
     execute return_sval tcoef17  Aeig7
     endif
     endif
     if kindex17 == 8
     if jindex17 == 8
     execute return_sval tcoef17  Aeig8
     endif
     endif
     if kindex17 == 9
     if jindex17 == 9
     execute return_sval tcoef17  Aeig9
     endif
     endif
     if kindex17 == 10
     if jindex17 == 10
     execute return_sval tcoef17  Aeig10
     endif
     endif
     if kindex17 == 11
     if jindex17 == 11
     execute return_sval tcoef17  Aeig11
     endif
     endif
     if kindex17 == 12
     if jindex17 == 12
     execute return_sval tcoef17  Aeig12
     endif
     endif
     if kindex17 == 13
     if jindex17 == 13
     execute return_sval tcoef17  Aeig13
     endif
     endif
     if kindex17 == 14
     if jindex17 == 14
     execute return_sval tcoef17  Aeig14
     endif
     endif
     if kindex17 == 15
     if jindex17 == 15
     execute return_sval tcoef17  Aeig15
     endif
     endif
     if kindex17 == 16
     if jindex17 == 16
     execute return_sval tcoef17  Aeig16
     endif
     endif
     if kindex17 == 17
     if jindex17 == 17
     execute return_sval tcoef17  Aeig17
     endif
     endif
#
     enddo kindex17
     enddo jindex17
#
     endif
#
#
#    --------------end 17th iteration-----------------
#
#
#    --------------18th iteration-----------------
     if spdim == 18
#
     execute eig_nonsymm Smat18 SVEV18
#
     do jindex18
     do kindex18
#
     tcoef18(kindex18,jindex18)=Smat18(kindex18,jindex18)
#
     if kindex18 == 1
     if jindex18 == 1
     execute return_sval tcoef18  Aeig1
     endif
     endif
     if kindex18 == 2
     if jindex18 == 2
     execute return_sval tcoef18  Aeig2
     endif
     endif
     if kindex18 == 3
     if jindex18 == 3
     execute return_sval tcoef18  Aeig3
     endif
     endif
     if kindex18 == 4
     if jindex18 == 4
     execute return_sval tcoef18  Aeig4
     endif
     endif
     if kindex18 == 5
     if jindex18 == 5
     execute return_sval tcoef18  Aeig5
     endif
     endif
     if kindex18 == 6
     if jindex18 == 6
     execute return_sval tcoef18  Aeig6
     endif
     endif
     if kindex18 == 7
     if jindex18 == 7
     execute return_sval tcoef18  Aeig7
     endif
     endif
     if kindex18 == 8
     if jindex18 == 8
     execute return_sval tcoef18  Aeig8
     endif
     endif
     if kindex18 == 9
     if jindex18 == 9
     execute return_sval tcoef18  Aeig9
     endif
     endif
     if kindex18 == 10
     if jindex18 == 10
     execute return_sval tcoef18  Aeig10
     endif
     endif
     if kindex18 == 11
     if jindex18 == 11
     execute return_sval tcoef18  Aeig11
     endif
     endif
     if kindex18 == 12
     if jindex18 == 12
     execute return_sval tcoef18  Aeig12
     endif
     endif
     if kindex18 == 13
     if jindex18 == 13
     execute return_sval tcoef18  Aeig13
     endif
     endif
     if kindex18 == 14
     if jindex18 == 14
     execute return_sval tcoef18  Aeig14
     endif
     endif
     if kindex18 == 15
     if jindex18 == 15
     execute return_sval tcoef18  Aeig15
     endif
     endif
     if kindex18 == 16
     if jindex18 == 16
     execute return_sval tcoef18  Aeig16
     endif
     endif
     if kindex18 == 17
     if jindex18 == 17
     execute return_sval tcoef18  Aeig17
     endif
     endif
     if kindex18 == 18
     if jindex18 == 18
     execute return_sval tcoef18  Aeig18
     endif
     endif
#
     enddo kindex18
     enddo jindex18
#
     endif
#
#
#    --------------end 18th iteration-----------------
#
#
#    --------------19th iteration-----------------
     if spdim == 19
#
     execute eig_nonsymm Smat19 SVEV19
#
     do jindex19
     do kindex19
#
     tcoef19(kindex19,jindex19)=Smat19(kindex19,jindex19)
#
     if kindex19 == 1
     if jindex19 == 1
     execute return_sval tcoef19  Aeig1
     endif
     endif
     if kindex19 == 2
     if jindex19 == 2
     execute return_sval tcoef19  Aeig2
     endif
     endif
     if kindex19 == 3
     if jindex19 == 3
     execute return_sval tcoef19  Aeig3
     endif
     endif
     if kindex19 == 4
     if jindex19 == 4
     execute return_sval tcoef19  Aeig4
     endif
     endif
     if kindex19 == 5
     if jindex19 == 5
     execute return_sval tcoef19  Aeig5
     endif
     endif
     if kindex19 == 6
     if jindex19 == 6
     execute return_sval tcoef19  Aeig6
     endif
     endif
     if kindex19 == 7
     if jindex19 == 7
     execute return_sval tcoef19  Aeig7
     endif
     endif
     if kindex19 == 8
     if jindex19 == 8
     execute return_sval tcoef19  Aeig8
     endif
     endif
     if kindex19 == 9
     if jindex19 == 9
     execute return_sval tcoef19  Aeig9
     endif
     endif
     if kindex19 == 10
     if jindex19 == 10
     execute return_sval tcoef19  Aeig10
     endif
     endif
     if kindex19 == 11
     if jindex19 == 11
     execute return_sval tcoef19  Aeig11
     endif
     endif
     if kindex19 == 12
     if jindex19 == 12
     execute return_sval tcoef19  Aeig12
     endif
     endif
     if kindex19 == 13
     if jindex19 == 13
     execute return_sval tcoef19  Aeig13
     endif
     endif
     if kindex19 == 14
     if jindex19 == 14
     execute return_sval tcoef19  Aeig14
     endif
     endif
     if kindex19 == 15
     if jindex19 == 15
     execute return_sval tcoef19  Aeig15
     endif
     endif
     if kindex19 == 16
     if jindex19 == 16
     execute return_sval tcoef19  Aeig16
     endif
     endif
     if kindex19 == 17
     if jindex19 == 17
     execute return_sval tcoef19  Aeig17
     endif
     endif
     if kindex19 == 18
     if jindex19 == 18
     execute return_sval tcoef19  Aeig18
     endif
     endif
     if kindex19 == 19
     if jindex19 == 19
     execute return_sval tcoef19  Aeig19
     endif
     endif
#
     enddo kindex19
     enddo jindex19
#
     endif
#
#
#    --------------end 19th iteration-----------------
#
#
#    --------------20th iteration-----------------
     if spdim == 20
#
     execute eig_nonsymm Smat20 SVEV20
#
     do jindex20
     do kindex20
#
     tcoef20(kindex20,jindex20)=Smat20(kindex20,jindex20)
#
     if kindex20 == 1
     if jindex20 == 1
     execute return_sval tcoef20  Aeig1
     endif
     endif
     if kindex20 == 2
     if jindex20 == 2
     execute return_sval tcoef20  Aeig2
     endif
     endif
     if kindex20 == 3
     if jindex20 == 3
     execute return_sval tcoef20  Aeig3
     endif
     endif
     if kindex20 == 4
     if jindex20 == 4
     execute return_sval tcoef20  Aeig4
     endif
     endif
     if kindex20 == 5
     if jindex20 == 5
     execute return_sval tcoef20  Aeig5
     endif
     endif
     if kindex20 == 6
     if jindex20 == 6
     execute return_sval tcoef20  Aeig6
     endif
     endif
     if kindex20 == 7
     if jindex20 == 7
     execute return_sval tcoef20  Aeig7
     endif
     endif
     if kindex20 == 8
     if jindex20 == 8
     execute return_sval tcoef20  Aeig8
     endif
     endif
     if kindex20 == 9
     if jindex20 == 9
     execute return_sval tcoef20  Aeig9
     endif
     endif
     if kindex20 == 10
     if jindex20 == 10
     execute return_sval tcoef20  Aeig10
     endif
     endif
     if kindex20 == 11
     if jindex20 == 11
     execute return_sval tcoef20  Aeig11
     endif
     endif
     if kindex20 == 12
     if jindex20 == 12
     execute return_sval tcoef20  Aeig12
     endif
     endif
     if kindex20 == 13
     if jindex20 == 13
     execute return_sval tcoef20  Aeig13
     endif
     endif
     if kindex20 == 14
     if jindex20 == 14
     execute return_sval tcoef20  Aeig14
     endif
     endif
     if kindex20 == 15
     if jindex20 == 15
     execute return_sval tcoef20  Aeig15
     endif
     endif
     if kindex20 == 16
     if jindex20 == 16
     execute return_sval tcoef20  Aeig16
     endif
     endif
     if kindex20 == 17
     if jindex20 == 17
     execute return_sval tcoef20  Aeig17
     endif
     endif
     if kindex20 == 18
     if jindex20 == 18
     execute return_sval tcoef20  Aeig18
     endif
     endif
     if kindex20 == 19
     if jindex20 == 19
     execute return_sval tcoef20  Aeig19
     endif
     endif
     if kindex20 == 20
     if jindex20 == 20
     execute return_sval tcoef20  Aeig20
     endif
     endif
#
     enddo kindex20
     enddo jindex20
#
     endif
#
#    --------------end 20th iteration-----------------
#
#======================================================
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#--end of script generated part of the code
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#======================================================
#
     ENDPROC Adiag
#
#
     PROC SELVEC
#
     if spdim==1 
#
    #omega=a1_1
#
     do jindex20 
     do kindex20 
         if jindex20 == 1 
         if kindex20 == 1 
            t20(kindex20,jindex20) = sMAT20(kindex20,jindex20) 
            execute return_sval t20  omega  
         endif 
         endif 
     enddo kindex20 
     enddo jindex20 
#
     imax=1.0
#
     endif
#
#    SECOND AND FURTHER ITERATIONS
#
     if spdim >= 2
#
      Aeigvm1=0.0
      Aeigvm2=0.0
      Aeigvm3=0.0
      Aeigvm4=0.0
      Aeigvm5=0.0
      Aeigvm6=0.0
      Aeigvm7=0.0
      Aeigvm8=0.0
      Aeigvm9=0.0
      Aeigvm10=0.0
      Aeigvm11=0.0
      Aeigvm12=0.0
      Aeigvm13=0.0
      Aeigvm14=0.0
      Aeigvm15=0.0
      Aeigvm16=0.0
      Aeigvm17=0.0
      Aeigvm18=0.0
      Aeigvm19=0.0
      Aeigvm20=0.0
#
#======================================================
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#--start of script generated part of the code
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#======================================================
#----------find the lowest eigenvalue not being the previous root------
#
      xmax=1000.0
      ncount=0.0
#
      do spdim20
#
      ncount+=1.0
#
     if ncount > nsp
     exit
     endif
#
     if spdim20 == 1
     aeigtemp=Aeig1
     endif
     if spdim20 == 2
     aeigtemp=Aeig2
     endif
     if spdim20 == 3
     aeigtemp=Aeig3
     endif
     if spdim20 == 4
     aeigtemp=Aeig4
     endif
     if spdim20 == 5
     aeigtemp=Aeig5
     endif
     if spdim20 == 6
     aeigtemp=Aeig6
     endif
     if spdim20 == 7
     aeigtemp=Aeig7
     endif
     if spdim20 == 8
     aeigtemp=Aeig8
     endif
     if spdim20 == 9
     aeigtemp=Aeig9
     endif
     if spdim20 == 10
     aeigtemp=Aeig10
     endif
     if spdim20 == 11
     aeigtemp=Aeig11
     endif
     if spdim20 == 12
     aeigtemp=Aeig12
     endif
     if spdim20 == 13
     aeigtemp=Aeig13
     endif
     if spdim20 == 14
     aeigtemp=Aeig14
     endif
     if spdim20 == 15
     aeigtemp=Aeig15
     endif
     if spdim20 == 16
     aeigtemp=Aeig16
     endif
     if spdim20 == 17
     aeigtemp=Aeig17
     endif
     if spdim20 == 18
     aeigtemp=Aeig18
     endif
     if spdim20 == 19
     aeigtemp=Aeig19
     endif
     if spdim20 == 20
     aeigtemp=Aeig20
     endif
#
      aeigtemp2=aeigtemp
      if aeigtemp2 < 0.0
      aeigtemp2*=-1.0
      endif
      if aeigtemp2 < eomthresh
      aeigtemp=1111.0
      endif
#
      aeigtemp2=aeigtemp
#
      do jindex12
#
     if jindex12 == 1
     xtemp=root1-aeigtemp
     if xtemp<0.0
     xtemp*=-1.0
     endif
     if xtemp < eomthresh
     aeigtemp2=1001.0
     endif
     endif
#
     if jindex12 == 2
     xtemp=root2-aeigtemp
     if xtemp<0.0
     xtemp*=-1.0
     endif
     if xtemp < eomthresh
     aeigtemp2=1001.0
     endif
     endif
#
     if jindex12 == 3
     xtemp=root3-aeigtemp
     if xtemp<0.0
     xtemp*=-1.0
     endif
     if xtemp < eomthresh
     aeigtemp2=1001.0
     endif
     endif
#
     if jindex12 == 4
     xtemp=root4-aeigtemp
     if xtemp<0.0
     xtemp*=-1.0
     endif
     if xtemp < eomthresh
     aeigtemp2=1001.0
     endif
     endif
#
     if jindex12 == 5
     xtemp=root5-aeigtemp
     if xtemp<0.0
     xtemp*=-1.0
     endif
     if xtemp < eomthresh
     aeigtemp2=1001.0
     endif
     endif
#
     if jindex12 == 6
     xtemp=root6-aeigtemp
     if xtemp<0.0
     xtemp*=-1.0
     endif
     if xtemp < eomthresh
     aeigtemp2=1001.0
     endif
     endif
#
     if jindex12 == 7
     xtemp=root7-aeigtemp
     if xtemp<0.0
     xtemp*=-1.0
     endif
     if xtemp < eomthresh
     aeigtemp2=1001.0
     endif
     endif
#
     if jindex12 == 8
     xtemp=root8-aeigtemp
     if xtemp<0.0
     xtemp*=-1.0
     endif
     if xtemp < eomthresh
     aeigtemp2=1001.0
     endif
     endif
#
     if jindex12 == 9
     xtemp=root9-aeigtemp
     if xtemp<0.0
     xtemp*=-1.0
     endif
     if xtemp < eomthresh
     aeigtemp2=1001.0
     endif
     endif
#
     if jindex12 == 10
     xtemp=root10-aeigtemp
     if xtemp<0.0
     xtemp*=-1.0
     endif
     if xtemp < eomthresh
     aeigtemp2=1001.0
     endif
     endif
#
     if jindex12 == 11
     xtemp=root11-aeigtemp
     if xtemp<0.0
     xtemp*=-1.0
     endif
     if xtemp < eomthresh
     aeigtemp2=1001.0
     endif
     endif
#
     if jindex12 == 12
     xtemp=root12-aeigtemp
     if xtemp<0.0
     xtemp*=-1.0
     endif
     if xtemp < eomthresh
     aeigtemp2=1001.0
     endif
     endif
#
#
      enddo jindex12
#
      aeigtemp=aeigtemp2
#
     if aeigtemp < xmax
     xmax=aeigtemp
     imax=ncount
     endif
#
      enddo spdim20
#
#
#----------get the chosen eigenvector------------
      ncount=0.0
#
      do spdim20
#
      ncount+=1.0
#
      if imax == ncount
#
      if spdim20 == 1
      omega=Aeig1
      endif
#
      if spdim20 == 2
      omega=Aeig2
      endif
#
      if spdim20 == 3
      omega=Aeig3
      endif
#
      if spdim20 == 4
      omega=Aeig4
      endif
#
      if spdim20 == 5
      omega=Aeig5
      endif
#
      if spdim20 == 6
      omega=Aeig6
      endif
#
      if spdim20 == 7
      omega=Aeig7
      endif
#
      if spdim20 == 8
      omega=Aeig8
      endif
#
      if spdim20 == 9
      omega=Aeig9
      endif
#
      if spdim20 == 10
      omega=Aeig10
      endif
#
      if spdim20 == 11
      omega=Aeig11
      endif
#
      if spdim20 == 12
      omega=Aeig12
      endif
#
      if spdim20 == 13
      omega=Aeig13
      endif
#
      if spdim20 == 14
      omega=Aeig14
      endif
#
      if spdim20 == 15
      omega=Aeig15
      endif
#
      if spdim20 == 16
      omega=Aeig16
      endif
#
      if spdim20 == 17
      omega=Aeig17
      endif
#
      if spdim20 == 18
      omega=Aeig18
      endif
#
      if spdim20 == 19
      omega=Aeig19
      endif
#
      if spdim20 == 20
      omega=Aeig20
      endif
#
#
#    --------------2th iteration-----------------
     if spdim == 2
#
     do jindex2
     do kindex2
#
     tcoef2(kindex2,jindex2)=Svev2(kindex2,jindex2)
#
     if jindex2 == spdim20
#
     if kindex2 == 1
     execute return_sval tcoef2  Aeigvm1
     endif
     if kindex2 == 2
     execute return_sval tcoef2  Aeigvm2
     endif
#
     endif
#
     enddo kindex2
     enddo jindex2
#
     endif
#
#
#    --------------end 2th iteration-----------------
#
#
#    --------------3th iteration-----------------
     if spdim == 3
#
     do jindex3
     do kindex3
#
     tcoef3(kindex3,jindex3)=Svev3(kindex3,jindex3)
#
     if jindex3 == spdim20
#
     if kindex3 == 1
     execute return_sval tcoef3  Aeigvm1
     endif
     if kindex3 == 2
     execute return_sval tcoef3  Aeigvm2
     endif
     if kindex3 == 3
     execute return_sval tcoef3  Aeigvm3
     endif
#
     endif
#
     enddo kindex3
     enddo jindex3
#
     endif
#
#
#    --------------end 3th iteration-----------------
#
#
#    --------------4th iteration-----------------
     if spdim == 4
#
     do jindex4
     do kindex4
#
     tcoef4(kindex4,jindex4)=Svev4(kindex4,jindex4)
#
     if jindex4 == spdim20
#
     if kindex4 == 1
     execute return_sval tcoef4  Aeigvm1
     endif
     if kindex4 == 2
     execute return_sval tcoef4  Aeigvm2
     endif
     if kindex4 == 3
     execute return_sval tcoef4  Aeigvm3
     endif
     if kindex4 == 4
     execute return_sval tcoef4  Aeigvm4
     endif
#
     endif
#
     enddo kindex4
     enddo jindex4
#
     endif
#
#
#    --------------end 4th iteration-----------------
#
#
#    --------------5th iteration-----------------
     if spdim == 5
#
     do jindex5
     do kindex5
#
     tcoef5(kindex5,jindex5)=Svev5(kindex5,jindex5)
#
     if jindex5 == spdim20
#
     if kindex5 == 1
     execute return_sval tcoef5  Aeigvm1
     endif
     if kindex5 == 2
     execute return_sval tcoef5  Aeigvm2
     endif
     if kindex5 == 3
     execute return_sval tcoef5  Aeigvm3
     endif
     if kindex5 == 4
     execute return_sval tcoef5  Aeigvm4
     endif
     if kindex5 == 5
     execute return_sval tcoef5  Aeigvm5
     endif
#
     endif
#
     enddo kindex5
     enddo jindex5
#
     endif
#
#
#    --------------end 5th iteration-----------------
#
#
#    --------------6th iteration-----------------
     if spdim == 6
#
     do jindex6
     do kindex6
#
     tcoef6(kindex6,jindex6)=Svev6(kindex6,jindex6)
#
     if jindex6 == spdim20
#
     if kindex6 == 1
     execute return_sval tcoef6  Aeigvm1
     endif
     if kindex6 == 2
     execute return_sval tcoef6  Aeigvm2
     endif
     if kindex6 == 3
     execute return_sval tcoef6  Aeigvm3
     endif
     if kindex6 == 4
     execute return_sval tcoef6  Aeigvm4
     endif
     if kindex6 == 5
     execute return_sval tcoef6  Aeigvm5
     endif
     if kindex6 == 6
     execute return_sval tcoef6  Aeigvm6
     endif
#
     endif
#
     enddo kindex6
     enddo jindex6
#
     endif
#
#
#    --------------end 6th iteration-----------------
#
#
#    --------------7th iteration-----------------
     if spdim == 7
#
     do jindex7
     do kindex7
#
     tcoef7(kindex7,jindex7)=Svev7(kindex7,jindex7)
#
     if jindex7 == spdim20
#
     if kindex7 == 1
     execute return_sval tcoef7  Aeigvm1
     endif
     if kindex7 == 2
     execute return_sval tcoef7  Aeigvm2
     endif
     if kindex7 == 3
     execute return_sval tcoef7  Aeigvm3
     endif
     if kindex7 == 4
     execute return_sval tcoef7  Aeigvm4
     endif
     if kindex7 == 5
     execute return_sval tcoef7  Aeigvm5
     endif
     if kindex7 == 6
     execute return_sval tcoef7  Aeigvm6
     endif
     if kindex7 == 7
     execute return_sval tcoef7  Aeigvm7
     endif
#
     endif
#
     enddo kindex7
     enddo jindex7
#
     endif
#
#
#    --------------end 7th iteration-----------------
#
#
#    --------------8th iteration-----------------
     if spdim == 8
#
     do jindex8
     do kindex8
#
     tcoef8(kindex8,jindex8)=Svev8(kindex8,jindex8)
#
     if jindex8 == spdim20
#
     if kindex8 == 1
     execute return_sval tcoef8  Aeigvm1
     endif
     if kindex8 == 2
     execute return_sval tcoef8  Aeigvm2
     endif
     if kindex8 == 3
     execute return_sval tcoef8  Aeigvm3
     endif
     if kindex8 == 4
     execute return_sval tcoef8  Aeigvm4
     endif
     if kindex8 == 5
     execute return_sval tcoef8  Aeigvm5
     endif
     if kindex8 == 6
     execute return_sval tcoef8  Aeigvm6
     endif
     if kindex8 == 7
     execute return_sval tcoef8  Aeigvm7
     endif
     if kindex8 == 8
     execute return_sval tcoef8  Aeigvm8
     endif
#
     endif
#
     enddo kindex8
     enddo jindex8
#
     endif
#
#
#    --------------end 8th iteration-----------------
#
#
#    --------------9th iteration-----------------
     if spdim == 9
#
     do jindex9
     do kindex9
#
     tcoef9(kindex9,jindex9)=Svev9(kindex9,jindex9)
#
     if jindex9 == spdim20
#
     if kindex9 == 1
     execute return_sval tcoef9  Aeigvm1
     endif
     if kindex9 == 2
     execute return_sval tcoef9  Aeigvm2
     endif
     if kindex9 == 3
     execute return_sval tcoef9  Aeigvm3
     endif
     if kindex9 == 4
     execute return_sval tcoef9  Aeigvm4
     endif
     if kindex9 == 5
     execute return_sval tcoef9  Aeigvm5
     endif
     if kindex9 == 6
     execute return_sval tcoef9  Aeigvm6
     endif
     if kindex9 == 7
     execute return_sval tcoef9  Aeigvm7
     endif
     if kindex9 == 8
     execute return_sval tcoef9  Aeigvm8
     endif
     if kindex9 == 9
     execute return_sval tcoef9  Aeigvm9
     endif
#
     endif
#
     enddo kindex9
     enddo jindex9
#
     endif
#
#
#    --------------end 9th iteration-----------------
#
#
#    --------------10th iteration-----------------
     if spdim == 10
#
     do jindex10
     do kindex10
#
     tcoef10(kindex10,jindex10)=Svev10(kindex10,jindex10)
#
     if jindex10 == spdim20
#
     if kindex10 == 1
     execute return_sval tcoef10  Aeigvm1
     endif
     if kindex10 == 2
     execute return_sval tcoef10  Aeigvm2
     endif
     if kindex10 == 3
     execute return_sval tcoef10  Aeigvm3
     endif
     if kindex10 == 4
     execute return_sval tcoef10  Aeigvm4
     endif
     if kindex10 == 5
     execute return_sval tcoef10  Aeigvm5
     endif
     if kindex10 == 6
     execute return_sval tcoef10  Aeigvm6
     endif
     if kindex10 == 7
     execute return_sval tcoef10  Aeigvm7
     endif
     if kindex10 == 8
     execute return_sval tcoef10  Aeigvm8
     endif
     if kindex10 == 9
     execute return_sval tcoef10  Aeigvm9
     endif
     if kindex10 == 10
     execute return_sval tcoef10  Aeigvm10
     endif
#
     endif
#
     enddo kindex10
     enddo jindex10
#
     endif
#
#
#    --------------end 10th iteration-----------------
#
#
#    --------------11th iteration-----------------
     if spdim == 11
#
     do jindex11
     do kindex11
#
     tcoef11(kindex11,jindex11)=Svev11(kindex11,jindex11)
#
     if jindex11 == spdim20
#
     if kindex11 == 1
     execute return_sval tcoef11  Aeigvm1
     endif
     if kindex11 == 2
     execute return_sval tcoef11  Aeigvm2
     endif
     if kindex11 == 3
     execute return_sval tcoef11  Aeigvm3
     endif
     if kindex11 == 4
     execute return_sval tcoef11  Aeigvm4
     endif
     if kindex11 == 5
     execute return_sval tcoef11  Aeigvm5
     endif
     if kindex11 == 6
     execute return_sval tcoef11  Aeigvm6
     endif
     if kindex11 == 7
     execute return_sval tcoef11  Aeigvm7
     endif
     if kindex11 == 8
     execute return_sval tcoef11  Aeigvm8
     endif
     if kindex11 == 9
     execute return_sval tcoef11  Aeigvm9
     endif
     if kindex11 == 10
     execute return_sval tcoef11  Aeigvm10
     endif
     if kindex11 == 11
     execute return_sval tcoef11  Aeigvm11
     endif
#
     endif
#
     enddo kindex11
     enddo jindex11
#
     endif
#
#
#    --------------end 11th iteration-----------------
#
#
#    --------------12th iteration-----------------
     if spdim == 12
#
     do jindex12
     do kindex12
#
     tcoef12(kindex12,jindex12)=Svev12(kindex12,jindex12)
#
     if jindex12 == spdim20
#
     if kindex12 == 1
     execute return_sval tcoef12  Aeigvm1
     endif
     if kindex12 == 2
     execute return_sval tcoef12  Aeigvm2
     endif
     if kindex12 == 3
     execute return_sval tcoef12  Aeigvm3
     endif
     if kindex12 == 4
     execute return_sval tcoef12  Aeigvm4
     endif
     if kindex12 == 5
     execute return_sval tcoef12  Aeigvm5
     endif
     if kindex12 == 6
     execute return_sval tcoef12  Aeigvm6
     endif
     if kindex12 == 7
     execute return_sval tcoef12  Aeigvm7
     endif
     if kindex12 == 8
     execute return_sval tcoef12  Aeigvm8
     endif
     if kindex12 == 9
     execute return_sval tcoef12  Aeigvm9
     endif
     if kindex12 == 10
     execute return_sval tcoef12  Aeigvm10
     endif
     if kindex12 == 11
     execute return_sval tcoef12  Aeigvm11
     endif
     if kindex12 == 12
     execute return_sval tcoef12  Aeigvm12
     endif
#
     endif
#
     enddo kindex12
     enddo jindex12
#
     endif
#
#
#    --------------end 12th iteration-----------------
#
#
#    --------------13th iteration-----------------
     if spdim == 13
#
     do jindex13
     do kindex13
#
     tcoef13(kindex13,jindex13)=Svev13(kindex13,jindex13)
#
     if jindex13 == spdim20
#
     if kindex13 == 1
     execute return_sval tcoef13  Aeigvm1
     endif
     if kindex13 == 2
     execute return_sval tcoef13  Aeigvm2
     endif
     if kindex13 == 3
     execute return_sval tcoef13  Aeigvm3
     endif
     if kindex13 == 4
     execute return_sval tcoef13  Aeigvm4
     endif
     if kindex13 == 5
     execute return_sval tcoef13  Aeigvm5
     endif
     if kindex13 == 6
     execute return_sval tcoef13  Aeigvm6
     endif
     if kindex13 == 7
     execute return_sval tcoef13  Aeigvm7
     endif
     if kindex13 == 8
     execute return_sval tcoef13  Aeigvm8
     endif
     if kindex13 == 9
     execute return_sval tcoef13  Aeigvm9
     endif
     if kindex13 == 10
     execute return_sval tcoef13  Aeigvm10
     endif
     if kindex13 == 11
     execute return_sval tcoef13  Aeigvm11
     endif
     if kindex13 == 12
     execute return_sval tcoef13  Aeigvm12
     endif
     if kindex13 == 13
     execute return_sval tcoef13  Aeigvm13
     endif
#
     endif
#
     enddo kindex13
     enddo jindex13
#
     endif
#
#
#    --------------end 13th iteration-----------------
#
#
#    --------------14th iteration-----------------
     if spdim == 14
#
     do jindex14
     do kindex14
#
     tcoef14(kindex14,jindex14)=Svev14(kindex14,jindex14)
#
     if jindex14 == spdim20
#
     if kindex14 == 1
     execute return_sval tcoef14  Aeigvm1
     endif
     if kindex14 == 2
     execute return_sval tcoef14  Aeigvm2
     endif
     if kindex14 == 3
     execute return_sval tcoef14  Aeigvm3
     endif
     if kindex14 == 4
     execute return_sval tcoef14  Aeigvm4
     endif
     if kindex14 == 5
     execute return_sval tcoef14  Aeigvm5
     endif
     if kindex14 == 6
     execute return_sval tcoef14  Aeigvm6
     endif
     if kindex14 == 7
     execute return_sval tcoef14  Aeigvm7
     endif
     if kindex14 == 8
     execute return_sval tcoef14  Aeigvm8
     endif
     if kindex14 == 9
     execute return_sval tcoef14  Aeigvm9
     endif
     if kindex14 == 10
     execute return_sval tcoef14  Aeigvm10
     endif
     if kindex14 == 11
     execute return_sval tcoef14  Aeigvm11
     endif
     if kindex14 == 12
     execute return_sval tcoef14  Aeigvm12
     endif
     if kindex14 == 13
     execute return_sval tcoef14  Aeigvm13
     endif
     if kindex14 == 14
     execute return_sval tcoef14  Aeigvm14
     endif
#
     endif
#
     enddo kindex14
     enddo jindex14
#
     endif
#
#
#    --------------end 14th iteration-----------------
#
#
#    --------------15th iteration-----------------
     if spdim == 15
#
     do jindex15
     do kindex15
#
     tcoef15(kindex15,jindex15)=Svev15(kindex15,jindex15)
#
     if jindex15 == spdim20
#
     if kindex15 == 1
     execute return_sval tcoef15  Aeigvm1
     endif
     if kindex15 == 2
     execute return_sval tcoef15  Aeigvm2
     endif
     if kindex15 == 3
     execute return_sval tcoef15  Aeigvm3
     endif
     if kindex15 == 4
     execute return_sval tcoef15  Aeigvm4
     endif
     if kindex15 == 5
     execute return_sval tcoef15  Aeigvm5
     endif
     if kindex15 == 6
     execute return_sval tcoef15  Aeigvm6
     endif
     if kindex15 == 7
     execute return_sval tcoef15  Aeigvm7
     endif
     if kindex15 == 8
     execute return_sval tcoef15  Aeigvm8
     endif
     if kindex15 == 9
     execute return_sval tcoef15  Aeigvm9
     endif
     if kindex15 == 10
     execute return_sval tcoef15  Aeigvm10
     endif
     if kindex15 == 11
     execute return_sval tcoef15  Aeigvm11
     endif
     if kindex15 == 12
     execute return_sval tcoef15  Aeigvm12
     endif
     if kindex15 == 13
     execute return_sval tcoef15  Aeigvm13
     endif
     if kindex15 == 14
     execute return_sval tcoef15  Aeigvm14
     endif
     if kindex15 == 15
     execute return_sval tcoef15  Aeigvm15
     endif
#
     endif
#
     enddo kindex15
     enddo jindex15
#
     endif
#
#
#    --------------end 15th iteration-----------------
#
#
#    --------------16th iteration-----------------
     if spdim == 16
#
     do jindex16
     do kindex16
#
     tcoef16(kindex16,jindex16)=Svev16(kindex16,jindex16)
#
     if jindex16 == spdim20
#
     if kindex16 == 1
     execute return_sval tcoef16  Aeigvm1
     endif
     if kindex16 == 2
     execute return_sval tcoef16  Aeigvm2
     endif
     if kindex16 == 3
     execute return_sval tcoef16  Aeigvm3
     endif
     if kindex16 == 4
     execute return_sval tcoef16  Aeigvm4
     endif
     if kindex16 == 5
     execute return_sval tcoef16  Aeigvm5
     endif
     if kindex16 == 6
     execute return_sval tcoef16  Aeigvm6
     endif
     if kindex16 == 7
     execute return_sval tcoef16  Aeigvm7
     endif
     if kindex16 == 8
     execute return_sval tcoef16  Aeigvm8
     endif
     if kindex16 == 9
     execute return_sval tcoef16  Aeigvm9
     endif
     if kindex16 == 10
     execute return_sval tcoef16  Aeigvm10
     endif
     if kindex16 == 11
     execute return_sval tcoef16  Aeigvm11
     endif
     if kindex16 == 12
     execute return_sval tcoef16  Aeigvm12
     endif
     if kindex16 == 13
     execute return_sval tcoef16  Aeigvm13
     endif
     if kindex16 == 14
     execute return_sval tcoef16  Aeigvm14
     endif
     if kindex16 == 15
     execute return_sval tcoef16  Aeigvm15
     endif
     if kindex16 == 16
     execute return_sval tcoef16  Aeigvm16
     endif
#
     endif
#
     enddo kindex16
     enddo jindex16
#
     endif
#
#
#    --------------end 16th iteration-----------------
#
#
#    --------------17th iteration-----------------
     if spdim == 17
#
     do jindex17
     do kindex17
#
     tcoef17(kindex17,jindex17)=Svev17(kindex17,jindex17)
#
     if jindex17 == spdim20
#
     if kindex17 == 1
     execute return_sval tcoef17  Aeigvm1
     endif
     if kindex17 == 2
     execute return_sval tcoef17  Aeigvm2
     endif
     if kindex17 == 3
     execute return_sval tcoef17  Aeigvm3
     endif
     if kindex17 == 4
     execute return_sval tcoef17  Aeigvm4
     endif
     if kindex17 == 5
     execute return_sval tcoef17  Aeigvm5
     endif
     if kindex17 == 6
     execute return_sval tcoef17  Aeigvm6
     endif
     if kindex17 == 7
     execute return_sval tcoef17  Aeigvm7
     endif
     if kindex17 == 8
     execute return_sval tcoef17  Aeigvm8
     endif
     if kindex17 == 9
     execute return_sval tcoef17  Aeigvm9
     endif
     if kindex17 == 10
     execute return_sval tcoef17  Aeigvm10
     endif
     if kindex17 == 11
     execute return_sval tcoef17  Aeigvm11
     endif
     if kindex17 == 12
     execute return_sval tcoef17  Aeigvm12
     endif
     if kindex17 == 13
     execute return_sval tcoef17  Aeigvm13
     endif
     if kindex17 == 14
     execute return_sval tcoef17  Aeigvm14
     endif
     if kindex17 == 15
     execute return_sval tcoef17  Aeigvm15
     endif
     if kindex17 == 16
     execute return_sval tcoef17  Aeigvm16
     endif
     if kindex17 == 17
     execute return_sval tcoef17  Aeigvm17
     endif
#
     endif
#
     enddo kindex17
     enddo jindex17
#
     endif
#
#
#    --------------end 17th iteration-----------------
#
#
#    --------------18th iteration-----------------
     if spdim == 18
#
     do jindex18
     do kindex18
#
     tcoef18(kindex18,jindex18)=Svev18(kindex18,jindex18)
#
     if jindex18 == spdim20
#
     if kindex18 == 1
     execute return_sval tcoef18  Aeigvm1
     endif
     if kindex18 == 2
     execute return_sval tcoef18  Aeigvm2
     endif
     if kindex18 == 3
     execute return_sval tcoef18  Aeigvm3
     endif
     if kindex18 == 4
     execute return_sval tcoef18  Aeigvm4
     endif
     if kindex18 == 5
     execute return_sval tcoef18  Aeigvm5
     endif
     if kindex18 == 6
     execute return_sval tcoef18  Aeigvm6
     endif
     if kindex18 == 7
     execute return_sval tcoef18  Aeigvm7
     endif
     if kindex18 == 8
     execute return_sval tcoef18  Aeigvm8
     endif
     if kindex18 == 9
     execute return_sval tcoef18  Aeigvm9
     endif
     if kindex18 == 10
     execute return_sval tcoef18  Aeigvm10
     endif
     if kindex18 == 11
     execute return_sval tcoef18  Aeigvm11
     endif
     if kindex18 == 12
     execute return_sval tcoef18  Aeigvm12
     endif
     if kindex18 == 13
     execute return_sval tcoef18  Aeigvm13
     endif
     if kindex18 == 14
     execute return_sval tcoef18  Aeigvm14
     endif
     if kindex18 == 15
     execute return_sval tcoef18  Aeigvm15
     endif
     if kindex18 == 16
     execute return_sval tcoef18  Aeigvm16
     endif
     if kindex18 == 17
     execute return_sval tcoef18  Aeigvm17
     endif
     if kindex18 == 18
     execute return_sval tcoef18  Aeigvm18
     endif
#
     endif
#
     enddo kindex18
     enddo jindex18
#
     endif
#
#
#    --------------end 18th iteration-----------------
#
#
#    --------------19th iteration-----------------
     if spdim == 19
#
     do jindex19
     do kindex19
#
     tcoef19(kindex19,jindex19)=Svev19(kindex19,jindex19)
#
     if jindex19 == spdim20
#
     if kindex19 == 1
     execute return_sval tcoef19  Aeigvm1
     endif
     if kindex19 == 2
     execute return_sval tcoef19  Aeigvm2
     endif
     if kindex19 == 3
     execute return_sval tcoef19  Aeigvm3
     endif
     if kindex19 == 4
     execute return_sval tcoef19  Aeigvm4
     endif
     if kindex19 == 5
     execute return_sval tcoef19  Aeigvm5
     endif
     if kindex19 == 6
     execute return_sval tcoef19  Aeigvm6
     endif
     if kindex19 == 7
     execute return_sval tcoef19  Aeigvm7
     endif
     if kindex19 == 8
     execute return_sval tcoef19  Aeigvm8
     endif
     if kindex19 == 9
     execute return_sval tcoef19  Aeigvm9
     endif
     if kindex19 == 10
     execute return_sval tcoef19  Aeigvm10
     endif
     if kindex19 == 11
     execute return_sval tcoef19  Aeigvm11
     endif
     if kindex19 == 12
     execute return_sval tcoef19  Aeigvm12
     endif
     if kindex19 == 13
     execute return_sval tcoef19  Aeigvm13
     endif
     if kindex19 == 14
     execute return_sval tcoef19  Aeigvm14
     endif
     if kindex19 == 15
     execute return_sval tcoef19  Aeigvm15
     endif
     if kindex19 == 16
     execute return_sval tcoef19  Aeigvm16
     endif
     if kindex19 == 17
     execute return_sval tcoef19  Aeigvm17
     endif
     if kindex19 == 18
     execute return_sval tcoef19  Aeigvm18
     endif
     if kindex19 == 19
     execute return_sval tcoef19  Aeigvm19
     endif
#
     endif
#
     enddo kindex19
     enddo jindex19
#
     endif
#
#
#    --------------end 19th iteration-----------------
#
#
#    --------------20th iteration-----------------
     if spdim == 20
#
     do jindex20
     do kindex20
#
     tcoef20(kindex20,jindex20)=Svev20(kindex20,jindex20)
#
     if jindex20 == spdim20
#
     if kindex20 == 1
     execute return_sval tcoef20  Aeigvm1
     endif
     if kindex20 == 2
     execute return_sval tcoef20  Aeigvm2
     endif
     if kindex20 == 3
     execute return_sval tcoef20  Aeigvm3
     endif
     if kindex20 == 4
     execute return_sval tcoef20  Aeigvm4
     endif
     if kindex20 == 5
     execute return_sval tcoef20  Aeigvm5
     endif
     if kindex20 == 6
     execute return_sval tcoef20  Aeigvm6
     endif
     if kindex20 == 7
     execute return_sval tcoef20  Aeigvm7
     endif
     if kindex20 == 8
     execute return_sval tcoef20  Aeigvm8
     endif
     if kindex20 == 9
     execute return_sval tcoef20  Aeigvm9
     endif
     if kindex20 == 10
     execute return_sval tcoef20  Aeigvm10
     endif
     if kindex20 == 11
     execute return_sval tcoef20  Aeigvm11
     endif
     if kindex20 == 12
     execute return_sval tcoef20  Aeigvm12
     endif
     if kindex20 == 13
     execute return_sval tcoef20  Aeigvm13
     endif
     if kindex20 == 14
     execute return_sval tcoef20  Aeigvm14
     endif
     if kindex20 == 15
     execute return_sval tcoef20  Aeigvm15
     endif
     if kindex20 == 16
     execute return_sval tcoef20  Aeigvm16
     endif
     if kindex20 == 17
     execute return_sval tcoef20  Aeigvm17
     endif
     if kindex20 == 18
     execute return_sval tcoef20  Aeigvm18
     endif
     if kindex20 == 19
     execute return_sval tcoef20  Aeigvm19
     endif
     if kindex20 == 20
     execute return_sval tcoef20  Aeigvm20
     endif
#
     endif
#
     enddo kindex20
     enddo jindex20
#
     endif
#
#
#    --------------end 20th iteration-----------------
#
#
#
      endif
#
      enddo spdim20
#======================================================
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#--end of script generated part of the code
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#======================================================
#
     endif
#
     ENDPROC SELVEC
#
# -----------------------------------------------------------------------------
#
     PROC RESID_ALL
#    -------------- 
#
     omegam=omega
     omegam*=-1.0
#
# ----------------------------------------------------------------- 
      DO k20  
         if k20 == 1 
            Aeig(k20,k20) = Aeigvm1 
         endif 
         if k20 == 2 
            Aeig(k20,k20) = Aeigvm2 
         endif 
         if k20 == 3 
            Aeig(k20,k20) = Aeigvm3 
         endif 
         if k20 == 4 
            Aeig(k20,k20) = Aeigvm4 
         endif 
         if k20 == 5 
            Aeig(k20,k20) = Aeigvm5 
         endif 
         if k20 == 6 
            Aeig(k20,k20) = Aeigvm6 
         endif 
         if k20 == 7 
            Aeig(k20,k20) = Aeigvm7 
         endif 
         if k20 == 8 
            Aeig(k20,k20) = Aeigvm8 
         endif 
         if k20 == 9 
            Aeig(k20,k20) = Aeigvm9 
         endif 
         if k20 == 10
            Aeig(k20,k20) = Aeigvm10
         endif 
         if k20 == 11
            Aeig(k20,k20) = Aeigvm11
         endif 
         if k20 == 12
            Aeig(k20,k20) = Aeigvm12
         endif 
         if k20 == 13
            Aeig(k20,k20) = Aeigvm13
         endif 
         if k20 == 14
            Aeig(k20,k20) = Aeigvm14
         endif 
         if k20 == 15
            Aeig(k20,k20) = Aeigvm15
         endif 
         if k20 == 16
            Aeig(k20,k20) = Aeigvm16
         endif 
         if k20 == 17
            Aeig(k20,k20) = Aeigvm17
         endif 
         if k20 == 18
            Aeig(k20,k20) = Aeigvm18
         endif 
         if k20 == 19
            Aeig(k20,k20) = Aeigvm19
         endif 
         if k20 == 20
            Aeig(k20,k20) = Aeigvm20
         endif 
      ENDDO k20  
#
      execute server_barrier 
#
# ----------------------------------------------------------------- 
# ij block 
# ----------------------------------------------------------------- 
#
      PARDO i, j1 
            GET VCONV1AB(i,j1)
            t1ij(i,j1) = 0.0  
            t2ij(i,j1) = 0.0  
            if spdim >  1 
               DO k21 
                  if k21   <= spdim 
                     GET VC1AB(i,j1,k21)  
                     DO k20 
                        if k20 == k21 
                          t20(k20,k20)      = Aeig(k20,k20) 
                          execute return_sval t20 xtemp 
                          t3ij(i,j1) = VC1AB(i,j1,k21) 
                          t3ij(i,j1) *= xtemp  
                          t1ij(i,j1) += t3ij(i,j1) 
                        endif 
                     ENDDO k20 
                  endif 
               ENDDO k21 
            endif 
            if spdim >  1 
               DO k20 
                  if k20   <= spdim 
                     GET             VCH1AB(i,j1,k20) 
                     t20(k20,k20)      = Aeig(k20,k20) 
                     execute return_sval t20 xtemp 
                     t3ij(i,j1) = VCH1AB(i,j1,k20) 
                     t3ij(i,j1) *= xtemp  
                     t2ij(i,j1) += t3ij(i,j1) 
                  endif 
               ENDDO k20 
            endif 
#
            if spdim == 1
               get VCACT1AB(i,j1)
               get VCHACT1AB(i,j1)
               t1ij(i,j1) += VCACT1AB(i,j1)
               t2ij(i,j1) += VCHACT1AB(i,j1)
            endif
#
            PUT VCE1AB(i,j1) = t1ij(i,j1)
#
            t1ij(i,j1)      *= omegam
            t1ij(i,j1)      += t2ij(i,j1)
#
            t3ij(i,j1)       = VCONV1AB(i,j1)
            t3ij(i,j1)      *= -1.0
            t2ij(i,j1)       = omega
            t3ij(i,j1)      += t2ij(i,j1)
            execute apply_den2 t1ij t3ij 
#
            DO j21 
               if j21 > spdim  
                  tijS(i,j1,j21)     = t1ij(i,j1)
                  PUT VC1AB(i,j1,j21) = tijS(i,j1,j21)
                  exit
               ENDIF 
            ENDDO j21 
#
      ENDPARDO i, j1 
#
# -----------------------------------------------------------------
# ijia block 
# -----------------------------------------------------------------
#
      PARDO i, j1, a, i2
            REQUEST             VCONV2ijia(i,j1,i2,a) a
            t1ijia(i,j1,i2,a) = 0.0
            t2ijia(i,j1,i2,a) = 0.0
            if spdim >  1
               DO k21
                  if k21   <= spdim
                     REQUEST V2ijia(i,j1,i2,a,k21) a
                     DO k20
                        if k20 == k21
                          t20(k20,k20)      = Aeig(k20,k20)
                          execute return_sval t20 xtemp
                          t3ijia(i,j1,i2,a) = V2ijia(i,j1,i2,a,k21)
                          t3ijia(i,j1,i2,a) *= xtemp
                          t1ijia(i,j1,i2,a) += t3ijia(i,j1,i2,a)
                        endif
                     ENDDO k20
                  endif
               ENDDO k21
            endif
            if spdim >  1
               DO k20
                  if k20   <= spdim
                     REQUEST             VH2ijia(i,j1,i2,a,k20) a
                     t20(k20,k20)      = Aeig(k20,k20)
                     execute return_sval t20 xtemp
                     t3ijia(i,j1,i2,a) = VH2ijia(i,j1,i2,a,k20)
                     t3ijia(i,j1,i2,a) *= xtemp
                     t2ijia(i,j1,i2,a) += t3ijia(i,j1,i2,a)
                  endif
               ENDDO k20
            endif
#
            if spdim == 1
               REQUEST              R2ijia(i,j1,i2,a) j1
               REQUEST              RH2ijia(i,j1,i2,a) j1
               t1ijia(i,j1,i2,a) += R2ijia(i,j1,i2,a)
               t2ijia(i,j1,i2,a) += RH2ijia(i,j1,i2,a)
            endif
            t4ijia(i,j1,i2,a)       = t1ijia(i,j1,i2,a)
#
            t1ijia(i,j1,i2,a)      *= omegam
            t1ijia(i,j1,i2,a)      += t2ijia(i,j1,i2,a)
#
            t3ijia(i,j1,i2,a)       = VCONV2ijia(i,j1,i2,a)
            t3ijia(i,j1,i2,a)      *= -1.0
            t2ijia(i,j1,i2,a)       = omega
            t3ijia(i,j1,i2,a)      += t2ijia(i,j1,i2,a)
            execute apply_den4 t1ijia t3ijia 
#
            PREPARE RE2ijia(i,j1,i2,a)  = t4ijia(i,j1,i2,a)
            PREPARE TEMP1ijia(i,j1,i2,a) = t1ijia(i,j1,i2,a)
#
      ENDPARDO i, j1, a, i2  
#
# -----------------------------------------------------------------
# ijjb block 
# -----------------------------------------------------------------
#
      PARDO i, j1, a, i2
            REQUEST             VCONV2ijjb(i,j1,i2,a) a
            t1ijia(i,j1,i2,a) = 0.0
            t2ijia(i,j1,i2,a) = 0.0
            if spdim >  1
               DO k21
                  if k21   <= spdim
                     REQUEST V2ijjb(i,j1,i2,a,k21) a
                     DO k20
                        if k20 == k21
                          t20(k20,k20)      = Aeig(k20,k20)
                          execute return_sval t20 xtemp
                          t3ijia(i,j1,i2,a) = V2ijjb(i,j1,i2,a,k21)
                          t3ijia(i,j1,i2,a) *= xtemp
                          t1ijia(i,j1,i2,a) += t3ijia(i,j1,i2,a)
                        endif
                     ENDDO k20
                  endif
               ENDDO k21
            endif
            if spdim >  1
               DO k20
                  if k20   <= spdim
                     REQUEST             VH2ijjb(i,j1,i2,a,k20) a
                     t20(k20,k20)      = Aeig(k20,k20)
                     execute return_sval t20 xtemp
                     t3ijia(i,j1,i2,a) = VH2ijjb(i,j1,i2,a,k20)
                     t3ijia(i,j1,i2,a) *= xtemp
                     t2ijia(i,j1,i2,a) += t3ijia(i,j1,i2,a)
                  endif
               ENDDO k20
            endif
#
            if spdim == 1
               REQUEST              R2ijjb(i,j1,i2,a) j1
               REQUEST              RH2ijjb(i,j1,i2,a) j1
               t1ijia(i,j1,i2,a) += R2ijjb(i,j1,i2,a)
               t2ijia(i,j1,i2,a) += RH2ijjb(i,j1,i2,a)
            endif
            t4ijia(i,j1,i2,a)       = t1ijia(i,j1,i2,a)
#
            t1ijia(i,j1,i2,a)      *= omegam
            t1ijia(i,j1,i2,a)      += t2ijia(i,j1,i2,a)
#
            t3ijia(i,j1,i2,a)       = VCONV2ijjb(i,j1,i2,a)
            t3ijia(i,j1,i2,a)      *= -1.0
            t2ijia(i,j1,i2,a)       = omega
            t3ijia(i,j1,i2,a)      += t2ijia(i,j1,i2,a)
            execute apply_den4 t1ijia t3ijia 
#
            PREPARE RE2ijjb(i,j1,i2,a)  = t4ijia(i,j1,i2,a)
            PREPARE TEMP1ijjb(i,j1,i2,a) = t1ijia(i,j1,i2,a)
#
      ENDPARDO i, j1, a, i2  
#
# ----------------------------------------------------------------- 
#
#
# ----------------------------------------------------------------- 
#
      execute server_barrier
#
# -----------------------------------------------------------------
#
#
      PARDO i, j1, i2, a  
      DO j21
         if j21 > spdim # k20
#
                  REQUEST             TEMP1ijia(i,j1,i2,a) a
                  t1ijia(i,j1,i2,a) = TEMP1ijia(i,j1,i2,a)
                  tijiaS(i,j1,i2,a,j21)         = t1ijia(i,j1,i2,a)
                  PREPARE V2ijia(i,j1,i2,a,j21) = tijiaS(i,j1,i2,a,j21)
#
            exit
         ENDIF
      ENDDO j21
      ENDPARDO i, j1, i2, a  
#
      PARDO i, j1, i2, a  
      DO j21
         if j21 > spdim # k20
#
                  REQUEST             TEMP1ijjb(i,j1,i2,a) a
                  t1ijia(i,j1,i2,a) = TEMP1ijjb(i,j1,i2,a)
                  tijiaS(i,j1,i2,a,j21)         = t1ijia(i,j1,i2,a)
                  PREPARE V2ijjb(i,j1,i2,a,j21) = tijiaS(i,j1,i2,a,j21)
#
            exit
         ENDIF
      ENDDO j21
      ENDPARDO i, j1, i2, a  
# -----------------------------------------------------------------
#
      execute server_barrier
#
     ENDPROC RESID_ALL
#    ----------------- 
#
# ----------------------------------------------------------------------
#
     PROC SQUAREVCACT_NEW
#    -------------------- 
#
     etemp1=0.0
     sum1 = 0.0 
     square=0.0
     execute sip_barrier 
#
     PARDO i1, j
           DO k21 
              if k21 > spdim  
                 GET         VC1AB(i1,j,k21)  
                 tij(i1,j)  = VC1AB(i1,j,k21) 
                 t1ij(i1,j) = tij(i1,j)
                 etemp     = tij(i1,j)*t1ij(i1,j)
                 sum1     += etemp
                 exit 
              endif 
           ENDDO k21 
     ENDPARDO i1, j 
#
     PARDO i, j1, i2, a  
           DO k21 
              if k21 > spdim  
                 REQUEST             V2ijia(i,j1,i2,a,k21) a 
                 tijia(i,j1,i2,a)  = V2ijia(i,j1,i2,a,k21) 
                 t1ijia(i,j1,i2,a) = tijia(i,j1,i2,a)
                 etemp             = tijia(i,j1,i2,a)*t1ijia(i,j1,i2,a)
                 sum1     += etemp
                 exit 
              endif 
           ENDDO k21 
     ENDPARDO i, j1, i2, a  
#
     PARDO i, j1, i2, a  
           DO k21 
              if k21 > spdim  
                 REQUEST             V2ijjb(i,j1,i2,a,k21) a 
                 tijia(i,j1,i2,a)  = V2ijjb(i,j1,i2,a,k21) 
                 t1ijia(i,j1,i2,a) = tijia(i,j1,i2,a)
                 etemp             = tijia(i,j1,i2,a)*t1ijia(i,j1,i2,a)
                 sum1     += etemp
                 exit 
              endif 
           ENDDO k21 
     ENDPARDO i, j1, i2, a  
#
     EXECUTE SERVER_BARRIER
#
     collective etemp1+=sum1
#
     square+=etemp1
     execute print_scalar square 
#
     EXECUTE SERVER_BARRIER
#
     ENDPROC SQUAREVCACT_NEW
#    ----------------------- 
#
# ----------------------------------------------------------------------
#
     PROC SCALEVCACT_NEW
#    ------------------- 
#
     DO k21 
        if k21 > spdim # k20 
#
           PARDO i, j1  
                 GET                 VC1AB(i,j1,k21)  
                 tij(i,j1)          = VC1AB(i,j1,k21) 
                 tij(i,j1)         *= mult
                 PUT VCHACT1AB(i,j1) = tij(i,j1)
           ENDPARDO i, j1  
#
           exit 
        endif 
     ENDDO k21 
#
     DO k21 
        if k21 > spdim # k20 
#
           PARDO i, j1, i2, a   
                 REQUEST                      V2ijia(i,j1,i2,a,k21) a  
                 tijia(i,j1,i2,a)           = V2ijia(i,j1,i2,a,k21) 
                 tijia(i,j1,i2,a)          *= mult
                 PREPARE RH2ijia(i,j1,i2,a) = tijia(i,j1,i2,a)
           ENDPARDO i, j1, i2, a   
#
           exit 
        endif 
     ENDDO k21 
#
     DO k21 
        if k21 > spdim # k20 
#
           PARDO i, j1, i2, a   
                 REQUEST                      V2ijjb(i,j1,i2,a,k21) a  
                 tijia(i,j1,i2,a)           = V2ijjb(i,j1,i2,a,k21) 
                 tijia(i,j1,i2,a)          *= mult
                 PREPARE RH2ijjb(i,j1,i2,a) = tijia(i,j1,i2,a)
           ENDPARDO i, j1, i2, a   
#
           exit 
        endif 
     ENDDO k21 
#
     execute server_barrier
#
     ENDPROC SCALEVCACT_NEW
#
# ------------------------------------------------------------------------------- 
#
     PROC SCALEVCACT_3
#    ----------------- 
#
     PARDO i, j1  
           GET         VCACT1AB(i,j1) 
           tij(i,j1)  = VCACT1AB(i,j1)
           tij(i,j1) *= mult
#
            DO k21
               IF k21 > spdim  
                  tijS(i,j1,k21)      = tij(i,j1)
                  PUT VC1AB(i,j1,k21) = tijS(i,j1,k21)
                  exit
               ENDIF
            ENDDO k21
#
     ENDPARDO i, j1  
#
     PARDO i, j1, i2, a   
           REQUEST             R2ijia(i,j1,i2,a) a  
           tijia(i,j1,i2,a)  = R2ijia(i,j1,i2,a)
           tijia(i,j1,i2,a) *= mult
#
            DO k21
               IF k21 > spdim  
                  tijiaS(i,j1,i2,a,k21)         = tijia(i,j1,i2,a)
                  PREPARE V2ijia(i,j1,i2,a,k21) = tijiaS(i,j1,i2,a,k21)  
                  exit
               ENDIF
            ENDDO k21
#
     ENDPARDO i, j1, i2, a   
#
     PARDO i, j1, i2, a   
           REQUEST             R2ijjb(i,j1,i2,a) a  
           tijia(i,j1,i2,a)  = R2ijjb(i,j1,i2,a)
           tijia(i,j1,i2,a) *= mult
#
            DO k21
               IF k21 > spdim  
                  tijiaS(i,j1,i2,a,k21)         = tijia(i,j1,i2,a)
                  PREPARE V2ijjb(i,j1,i2,a,k21) = tijiaS(i,j1,i2,a,k21)  
                  exit
               ENDIF
            ENDDO k21
#
     ENDPARDO i, j1, i2, a   
#
     execute server_barrier
#
     ENDPROC SCALEVCACT_3
#    -------------------- 
#
# ------------------------------------------------------------------------------- 
#
     PROC ORTCOEFS
#    ------------- 
#
      PARDO i, j1 
            GET VCHACT1AB(i,j1)
            DO k21 
               if k21 <= spdim 
                  GET                  VC1AB(i,j1,k21)
                  tij(i,j1)           = VC1AB(i,j1,k21) 
                  etemp              = VCHACT1AB(i,j1)*tij(i,j1) 
                  etemp             *= -1.0 
                  t1(k21,k21)        = etemp 
                  PUT orth(k21,k21) += t1(k21,k21)  
               endif 
            ENDDO k21 
      ENDPARDO i, j1  
#
      PARDO i, j1, i2, a  
            REQUEST RH2ijia(i,j1,i2,a) a 
            DO k21 
               if k21 <= spdim 
                  REQUEST              V2ijia(i,j1,i2,a,k21) a 
                  tijia(i,j1,i2,a)   = V2ijia(i,j1,i2,a,k21) 
                  etemp              = RH2ijia(i,j1,i2,a)*tijia(i,j1,i2,a) 
                  etemp             *= -1.0 
                  t1(k21,k21)        = etemp 
                  PUT orth(k21,k21) += t1(k21,k21)  
               endif 
            ENDDO k21 
      ENDPARDO i, j1, i2, a   
#
      PARDO i, j1, i2, a  
            REQUEST RH2ijjb(i,j1,i2,a) a 
            DO k21 
               if k21 <= spdim 
                  REQUEST              V2ijjb(i,j1,i2,a,k21) a 
                  tijia(i,j1,i2,a)   = V2ijjb(i,j1,i2,a,k21) 
                  etemp              = RH2ijjb(i,j1,i2,a)*tijia(i,j1,i2,a) 
                  etemp             *= -1.0 
                  t1(k21,k21)        = etemp 
                  PUT orth(k21,k21) += t1(k21,k21)  
               endif 
            ENDDO k21 
      ENDPARDO i, j1, i2, a   
#
      ENDPROC ORTCOEFS
#     ---------------- 
#
     PROC VECCONSTR_NEW
#    ------------------ 
#
     sum1=0.0
     etemp1=0.0
     square=0.0
#
     execute server_barrier 
#
      PARDO i, j1, i2, a   
            REQUEST            RH2ijia(i,j1,i2,a) a  
            tijia(i,j1,i2,a) = RH2ijia(i,j1,i2,a)
            DO k21 
               if k21 <= spdim 
                  REQUEST             V2ijia(i,j1,i2,a,k21) a  
                  GET                 orth(k21,k21) 
                  t1ijia(i,j1,i2,a) = V2ijia(i,j1,i2,a,k21)
#
                  t1(k21,k21)       = orth(k21,k21) 
                  execute return_sval t1 fact 
                  t1ijia(i,j1,i2,a)*= fact  
                  tijia(i,j1,i2,a) += t1ijia(i,j1,i2,a)
#
               endif 
            ENDDO k21 

            etemp  =tijia(i,j1,i2,a) * tijia(i,j1,i2,a) 
            sum1  += etemp
#
            PREPARE R2ijia(i,j1,i2,a) = tijia(i,j1,i2,a)
#
      ENDPARDO i, j1, i2, a   
#
      PARDO i, j1, i2, a   
            REQUEST            RH2ijjb(i,j1,i2,a) a  
            tijia(i,j1,i2,a) = RH2ijjb(i,j1,i2,a)
            DO k21 
               if k21 <= spdim 
                  REQUEST             V2ijjb(i,j1,i2,a,k21) a  
                  GET                 orth(k21,k21) 
                  t1ijia(i,j1,i2,a) = V2ijjb(i,j1,i2,a,k21)
#
                  t1(k21,k21)       = orth(k21,k21) 
                  execute return_sval t1 fact 
                  t1ijia(i,j1,i2,a)*= fact  
                  tijia(i,j1,i2,a) += t1ijia(i,j1,i2,a)
#
               endif 
            ENDDO k21 

            etemp  =tijia(i,j1,i2,a) * tijia(i,j1,i2,a) 
            sum1  += etemp
#
            PREPARE R2ijjb(i,j1,i2,a) = tijia(i,j1,i2,a)
#
      ENDPARDO i, j1, i2, a   
#
      PARDO i, j1  
            GET        VCHACT1AB(i,j1) 
            tij(i,j1) = VCHACT1AB(i,j1)
            DO k21 
               if k21 <= spdim 
                  GET         VC1AB(i,j1,k21) 
                  GET         orth(k21,k21) 
                  t1ij(i,j1) = VC1AB(i,j1,k21)
#
                  t1(k21,k21)       = orth(k21,k21) 
                  execute return_sval t1 fact 
                  t1ij(i,j1)*= fact  
                  tij(i,j1) += t1ij(i,j1)
#
               endif 
            ENDDO k21 
#
            PUT VCACT1AB(i,j1) = tij(i,j1)
#
            t2ij(i,j1)       = tij(i,j1)
            etemp            = tij(i,j1)*t2ij(i,j1)
            sum1            += etemp
      ENDPARDO i, j1  
#
      execute server_barrier
#
      collective etemp1+=sum1
#
      square+=etemp1
#
      execute server_barrier
#
     ENDPROC VECCONSTR_NEW
#    --------------------- 
#
# ---------------------------------------------------------------------- 
#
     PROC REZYDUUM
#    ------------- 
#
     call SQUAREVCACT_NEW # done
#
     exponent = 0.5 
     execute norm_fac square exponent
     residuum=exponent
     mult=square
     execute print_scalar residuum
     execute print_scalar mult
#
     ENDPROC REZYDUUM
#
# ---------------------------------------------------------------------- 
#
     PROC ORTHOGON
#    ------------- 
#
        create orth 
        execute sip_barrier 
        call ORTCOEFS # done
        call VECCONSTR_NEW #  done 
#
        exponent = 0.5 
        execute norm_fac square exponent
        mult = square
#
        call SCALEVCACT_3 # done
        execute sip_barrier 
        delete orth 
#
     ENDPROC ORTHOGON
#    ---------------- 
#
# ---------------------------------------------------------------------- 
#
      PROC FORM_IDENTITY 
#     ------------------ 
#
# Form identity arrays IIi and IJj 
# -------------------------------- 
#
     DO aa 
     DO a1 
        tsa(aa,a1) = 1.0 
        t1sa(aa,a1) = 0.0 
        execute return_diagonal tsa t1sa 
        psa(aa,a1) = t1sa(aa,a1) 
        PUT IIi(aa,a1) = psa(aa,a1) 
     ENDDO a1 
     ENDDO aa 
#
     DO bb 
     DO b1 
        tsb(bb,b1) = 1.0 
        t1sb(bb,b1) = 0.0 
        execute return_diagonal tsb t1sb 
        psb(bb,b1) = t1sb(bb,b1) 
        PUT IJj(bb,b1) = psb(bb,b1) 
     ENDDO b1 
     ENDDO bb 
#
     execute sip_barrier
#
# Done Form identity arrays IIi and IJj 
# ------------------------------------- 
#
# Now convert ca(mu,p) and cb(mu,q) --> ca(mu,pp) and cb(mu,qq)  
# ------------------------------------------------------------- 
#
#      PARDO mu, pp 
      DO mu 
      DO pp 
            txpp(mu,pp) = 0.0 
            DO a 
               GET IIi(pp,a) 
               t1xpp(mu,pp) = ca(mu,a)*IIi(pp,a) 
               txpp(mu,pp) += t1xpp(mu,pp) 
            ENDDO a
            csa(mu,pp) = txpp(mu,pp)  
#      ENDPARDO mu, pp 
      ENDDO pp 
      ENDDO mu 
#
#      PARDO mu, qq 
      DO mu 
      DO qq 
            txqq(mu,qq) = 0.0 
            DO b 
               GET IJj(qq,b) 
               t1xqq(mu,qq) = ca(mu,b)*IJj(qq,b) 
               txqq(mu,qq) += t1xqq(mu,qq) 
            ENDDO b
            csb(mu,qq) = txqq(mu,qq)  
#      ENDPARDO mu, qq 
      ENDDO qq 
      ENDDO mu 
#
      ENDPROC FORM_IDENTITY 
#     --------------------- 
#
      PROC FORM_T1 
#     ------------ 
#
      PARDO mu, nu, aa 
            txpp(nu,aa)           = csa(nu,aa) 
            txx(mu,nu)            = csa(mu,aa)*txpp(nu,aa) # csa(nu,aa) 
            txxa(mu,nu,aa)        = txx(mu,nu) 
            PUT T1Sxxa(mu,nu,aa) += txxa(mu,nu,aa)  
      ENDPARDO mu, nu, aa 
#
      PARDO mu, nu, bb 
            txqq(nu,bb)           = csb(nu,bb) 
            txx(mu,nu)            = csb(mu,bb)*txqq(nu,bb) # csb(nu,bb) 
            txxb(mu,nu,bb)        = txx(mu,nu) 
            PUT T1Sxxb(mu,nu,bb) += txxb(mu,nu,bb)  
      ENDPARDO mu, nu, bb 
#
      ENDPROC FORM_T1 
#     --------------- 
#
      PROC FORM_T3 
#     ------------ 
#
      PARDO mu, nu, lambda, sigma 
#
            compute_integrals            aoint(mu,nu,lambda,sigma) 
            txxxx(mu,nu,lambda,sigma)  = aoint(mu,nu,lambda,sigma) 
            compute_integrals            aoint(mu,sigma,lambda,nu) 
            t1xxxx(mu,nu,lambda,sigma) = aoint(mu,sigma,lambda,nu) 
            txxxx(mu,nu,lambda,sigma) -= t1xxxx(mu,nu,lambda,sigma) 
#
            DO aa 
#
               GET                            T1Sxxa(mu,nu,aa) 
               txx(mu,nu)                   = T1Sxxa(mu,nu,aa) 
               t1xx(lambda,sigma)           = aoint(mu,nu,lambda,sigma)*txx(mu,nu) 
               txxa(lambda,sigma,aa)        = t1xx(lambda,sigma) 
               PUT T3Sxxa(lambda,sigma,aa) += txxa(lambda,sigma,aa) 
#
            ENDDO aa 
#
            DO aa 
#
               GET                            T1Sxxa(mu,nu,aa) 
               txx(mu,nu)                   = T1Sxxa(mu,nu,aa) 
               t1xx(lambda,sigma)           = txxxx(mu,nu,lambda,sigma)*txx(mu,nu) 
               txxa(lambda,sigma,aa)        = t1xx(lambda,sigma) 
               PUT T3ASxxa(lambda,sigma,aa) += txxa(lambda,sigma,aa) 
#
            ENDDO aa 
#
            DO bb 
#
               GET                            T1Sxxb(mu,nu,bb) 
               txx(mu,nu)                   = T1Sxxb(mu,nu,bb) 
               t1xx(lambda,sigma)           = aoint(mu,nu,lambda,sigma)*txx(mu,nu) 
               txxb(lambda,sigma,bb)        = t1xx(lambda,sigma) 
               PUT T3Sxxb(lambda,sigma,bb) += txxb(lambda,sigma,bb) 
#
            ENDDO bb 
#
            DO bb 
#
               GET                            T1Sxxb(mu,nu,bb) 
               txx(mu,nu)                   = T1Sxxb(mu,nu,bb) 
               t1xx(lambda,sigma)           = txxxx(mu,nu,lambda,sigma)*txx(mu,nu) 
               txxb(lambda,sigma,bb)        = t1xx(lambda,sigma) 
               PUT T3ASxxb(lambda,sigma,bb) += txxb(lambda,sigma,bb) 
#
            ENDDO bb 
#
      ENDPARDO mu, nu, lambda, sigma 
#
      ENDPROC FORM_T3 
#     --------------- 
#
      PROC FORM_Faa 
#     ------------- 
#
         PARDO aa, mu, nu
            GET          T3ASxxa(mu,nu,aa)
            txx(mu,nu) = T3ASxxa(mu,nu,aa)
            DO aa1
               GET                 T1Sxxa(mu,nu,aa1)
               t1xx(mu,nu)       = T1Sxxa(mu,nu,aa1)
               etemp             = txx(mu,nu)*t1xx(mu,nu)
               tyaaaa(aa,aa1)    = etemp
               PUT FSaa(aa,aa1) +=  tyaaaa(aa,aa1) 
            ENDDO aa1
         ENDPARDO aa, mu, nu
#
         PARDO bb, mu, nu
            GET          T3ASxxb(mu,nu,bb)
            txx(mu,nu) = T3ASxxb(mu,nu,bb)
            DO bb1
               GET                 T1Sxxb(mu,nu,bb1)
               t1xx(mu,nu)       = T1Sxxb(mu,nu,bb1)
               etemp             = txx(mu,nu)*t1xx(mu,nu)
               tybbbb(bb,bb1)    = etemp
               PUT FSbb(bb,bb1) += tybbbb(bb,bb1)  
            ENDDO bb1
         ENDPARDO bb, mu, nu
#
          PARDO aa, mu, nu
            GET          T3Sxxa(mu,nu,aa)
            txx(mu,nu) = T3Sxxa(mu,nu,aa)
            DO bb1
               GET                 T1Sxxb(mu,nu,bb1)
               t1xx(mu,nu)       = T1Sxxb(mu,nu,bb1)
               etemp             = txx(mu,nu)*t1xx(mu,nu)
               tyaabb(aa,bb1)    = etemp
               PUT FSab(aa,bb1) += tyaabb(aa,bb1)  
            ENDDO bb1
         ENDPARDO aa, mu, nu
#
      execute sip_barrier
#
#     Now convert FSxx to segmented indeces
#     -------------------------------------
#
      PARDO a, a1
            typp(a,a1) = 0.0
            DO aa
            DO aa1
               GET          FSaa(aa,aa1)
               GET          IIi(aa,a)
               GET          IIi(aa1,a1)
               tsp(aa,a1) = FSaa(aa,aa1)*IIi(aa1,a1)
               t1ypp(a,a1) = IIi(aa,a)*tsp(aa,a1)
               typp(a,a1) += t1ypp(a,a1)
            ENDDO aa1
            ENDDO aa
            PUT Faa(a,a1) = typp(a,a1)
      ENDPARDO a, a1
#
      execute sip_barrier
#
      PARDO b, b1
            tyqq(b,b1) = 0.0
            DO bb
            DO bb1
               GET          FSbb(bb,bb1)
               GET          IJj(bb,b)
               GET          IJj(bb1,b1)
               tsq(bb,b1) = FSbb(bb,bb1)*IJj(bb1,b1)
               t1yqq(b,b1) = IJj(bb,b)*tsq(bb,b1)
               tyqq(b,b1) += t1yqq(b,b1)
            ENDDO bb1
            ENDDO bb
            PUT Fbb(b,b1) = tyqq(b,b1)
      ENDPARDO b, b1
#
      execute sip_barrier
#
      PARDO a, b1
            tpq(a,b1) = 0.0
            DO aa
            DO bb1
               GET          FSab(aa,bb1)
               GET          IIi(aa,a)
               GET          IJj(bb1,b1)
               tspq(aa,b1) = FSab(aa,bb1)*IJj(bb1,b1)
               t1pq(a,b1) = IIi(aa,a)*tspq(aa,b1)
               tpq(a,b1) += t1pq(a,b1)
            ENDDO bb1
            ENDDO aa
            PUT Fab(a,b1) = tpq(a,b1)
      ENDPARDO a, b1
#
      execute sip_barrier
#
      ENDPROC FORM_Faa
#     -----------------
#
     PROC CONVER
#    ----------- 
#
##      CALL FORM_IDENTITY
##      execute sip_barrier
##      CALL FORM_T1
##      execute sip_barrier
##      CALL FORM_T3
##      execute sip_barrier
##      CALL FORM_Faa
##      execute sip_barrier
#
# -----prepare f_ii diagonal = Sdii
#
     PARDO i, i1
#
     GET HBAR_ii(i1,i)
     Sii(i1,i)=HBAR_ii(i1,i)
     execute return_diagonal Sii Sdii
     tii(i1,i)=Sdii(i1,i)
     put DDii(i1,i)=tii(i1,i)
#
     ENDPARDO i, i1
#
#
# -----prepare f_jj diagonal = DDjj
#
     PARDO j, j1
#
     GET HBAR_jj(j1,j)
     Sjj(j1,j)=HBAR_jj(j1,j)
     execute return_diagonal Sjj Sdjj
     tjj(j1,j)=Sdjj(j1,j)
     put DDjj(j1,j)=tjj(j1,j)
#
     ENDPARDO j, j1
#
     execute sip_barrier
#
# -------------------------------------------------------------------------------------
# Start of correction
# -------------------------------------------------------------------------------------
#
# -----prepare Hbar_aiai diagonal
#
# DIP part
#
     PARDO j, i
#
           tij(i,j)=0.0
#
           do i2
#
              get DDii(i2,i)
              t2ia(i2,j)=1.0
              tii(i,i2)=DDii(i2,i)
#
              t2ij(i,j)=tii(i,i2)*t2ia(i2,j)
              t2ij(i,j)*=-1.0
              tij(i,j)+=t2ij(i,j)
#
           enddo i2
#
           do j2
#
              get DDjj(j2,j)
              t22ia(j2,i)=1.0
              tjj(j,j2)=DDjj(j2,j)
#
              t2ij(i,j)=tjj(j,j2)*t22ia(j2,i)
              t2ij(i,j)*=-1.0
              tij(i,j)+=t2ij(i,j)
#
           enddo j2
#
           do i2
           do j2
#
              request                   HBAR_iijj(i,i2,j,j2) j2
              Tiijj(i,i2,j,j2)        = HBAR_iijj(i,i2,j,j2)
              execute return_diagonal4  Tiijj
              t22ia(j2,i2)       = 1.0
              t2ij(i,j)         = Tiijj(i,i2,j,j2)*t22ia(j2,i2)
              tij(i,j)+=t2ij(i,j)
#
           enddo j2
           enddo i2
#
           PUT VCONV1AB(i,j)=tij(i,j)
#
     ENDPARDO j, i
#
     PARDO i, j, i1, a 
           tijia(i,j,i1,a) = 0.0 
           
           DO a1
              GET                 HBAR_aa(a,a1) 
              tpp(a,a1)         = HBAR_aa(a,a1) 
              execute return_diagonal4 tpp 
              t2ijia(i,j,i1,a1) = 1.0  
              t1ijia(i,j,i1,a)  = t2ijia(i,j,i1,a1)*tpp(a,a1) 
              tijia(i,j,i1,a)  += t1ijia(i,j,i1,a) 
           ENDDO a1 
           
           DO i2
              GET                 HBAR_ii(i2,i1) 
              tpp(i2,i1)        = HBAR_ii(i2,i1) 
              execute return_diagonal4 tpp 
              t2ijia(i,j,i2,a) = 1.0  
              t1ijia(i,j,i1,a) = t2ijia(i,j,i2,a)*tpp(i2,i1) 
              tijia(i,j,i1,a) -= t1ijia(i,j,i1,a) 
           ENDDO i2 
           
           DO i2
              GET                 HBAR_ii(i2,i) 
              tpp(i2,i)         = HBAR_ii(i2,i) 
              execute return_diagonal4 tpp 
              t2ijia(i2,j,i1,a) = 1.0  
              t1ijia(i,j,i1,a) = t2ijia(i2,j,i1,a)*tpp(i2,i) 
              tijia(i,j,i1,a) -= t1ijia(i,j,i1,a) 
           ENDDO i2 
           
           DO i2
              GET                 HBAR_ii(i2,j) 
              tpp(i2,j)         = HBAR_ii(i2,j) 
              execute return_diagonal4 tpp 
              t2ijia(i,i2,i1,a) = 1.0  
              t1ijia(i,j,i1,a) = t2ijia(i,i2,i1,a)*tpp(i2,j) 
              tijia(i,j,i1,a) -= t1ijia(i,j,i1,a) 
           ENDDO i2 
           
           DO i2
           DO i3
              REQUEST             HBAR_iijj(i2,i,i3,j) i  
              tpppp(i2,i,i3,j)  = HBAR_iijj(i2,i,i3,j) 
              execute return_diagonal4 tpppp 
              t2ijia(i2,i3,i1,a) = 1.0  
              t1pppp(i,j,i2,i3)  = tpppp(i2,i,i3,j) 
              t1ijia(i,j,i1,a)   = t1pppp(i,j,i2,i3)*t2ijia(i2,i3,i1,a) 
              tijia(i,j,i1,a)   += t1ijia(i,j,i1,a) 
           ENDDO i3 
           ENDDO i2 
           
           DO i2
           DO i3
              REQUEST              HBAR_iijj(i2,i,i3,i1) i  
              tpppp(i2,i,i3,i1)  = HBAR_iijj(i2,i,i3,i1) 
              execute return_diagonal4 tpppp 
              t2ijia(i2,j,i3,a) = 1.0  
              t1ijia(i,j,i1,a)  = t2ijia(i2,j,i3,a)*tpppp(i2,i,i3,i1) 
              tijia(i,j,i1,a)  += t1ijia(i,j,i1,a) 
           ENDDO i3 
           ENDDO i2 
           
           DO i2
           DO i3
              REQUEST              HBAR_iijj(i2,j,i3,i1) j  
              tpppp(i2,j,i3,i1)  = HBAR_iijj(i2,j,i3,i1) 
              execute return_diagonal4 tpppp 
              t1pppp(i1,j,i2,i3) = tpppp(i2,j,i3,i1) 
              t2ijia(i,i2,i3,a) = 1.0  
              t2pppp(i2,i3,i,a) = t2ijia(i,i2,i3,a) 
              t3pppp(i1,j,i,a) = t1pppp(i1,j,i2,i3)* t2pppp(i2,i3,i,a)
              t1ijia(i,j,i1,a) = t3pppp(i1,j,i,a)
              tijia(i,j,i1,a) += t1ijia(i,j,i1,a) 
           ENDDO i3 
           ENDDO i2 

           DO a1 
           DO i2 
              REQUEST             HBAR_AJIB_jjaa(i2,i1,a,a1) a 
              tpppp(i2,i1,a,a1) = HBAR_AJIB_jjaa(i2,i1,a,a1) 
              execute return_diagonal4 tpppp 
              t1pppp(i2,a1,i1,a) = tpppp(i2,i1,a,a1) 
              t2ijia(i,j,i2,a1) = 1.0  
              t1ijia(i,j,i1,a) = t2ijia(i,j,i2,a1)*t1pppp(i2,a1,i1,a) 
              tijia(i,j,i1,a) += t1ijia(i,j,i1,a) 
           ENDDO i2 
           ENDDO a1 

           DO a1 
           DO i2 
              REQUEST             HBAR_AJIB_jjaa(i2,i,a,a1) a 
              tpppp(i2,i,a,a1) = HBAR_AJIB_jjaa(i2,i,a,a1) 
              execute return_diagonal4 tpppp 
              t2ijia(i2,j,i1,a1) = 1.0  
              t1ijia(i,j,i1,a) = t2ijia(i2,j,i1,a1)*tpppp(i2,i,a,a1) 
              tijia(i,j,i1,a) += t1ijia(i,j,i1,a) 
           ENDDO i2 
           ENDDO a1 

           DO a1 
           DO i2 
              REQUEST            HBAR_AJIB_jjaa(i2,j,a,a1) a 
              tpppp(i2,j,a,a1) = HBAR_AJIB_jjaa(i2,j,a,a1) 
              execute return_diagonal4 tpppp 
              t2ijia(i,i2,i1,a1) = 1.0  
              t1pppp(i,i2,i1,a1) = t2ijia(i,i2,i1,a1)
              t2pppp(i2,j,a1,a)  = tpppp(i2,j,a,a1) 
              t1ijia(i,j,i1,a)   = t1pppp(i,i2,i1,a1)*t2pppp(i2,j,a1,a) 
              tijia(i,j,i1,a)   += t1ijia(i,j,i1,a) 
           ENDDO i2 
           ENDDO a1 
          
           PREPARE VCONV2ijia(i,j,i1,a) = tijia(i,j,i1,a) 
          #tijia(i,j,i1,a) *= -1.0 
           PREPARE VCONV2ijjb(i,j,i1,a) = tijia(i,j,i1,a) 
     ENDPARDO i, j, i1, a 
#
     execute server_barrier
#
     ENDPROC CONVER
#
#======================================================
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#--start of script generated part of the code
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#======================================================
#
       PROC AEIGCANC
#
#
        if spdim20 == 1
        Aeig1 = 1000000.0
        endif
        if spdim20 == 2
        Aeig2 = 1000000.0
        endif
        if spdim20 == 3
        Aeig3 = 1000000.0
        endif
        if spdim20 == 4
        Aeig4 = 1000000.0
        endif
        if spdim20 == 5
        Aeig5 = 1000000.0
        endif
        if spdim20 == 6
        Aeig6 = 1000000.0
        endif
        if spdim20 == 7
        Aeig7 = 1000000.0
        endif
        if spdim20 == 8
        Aeig8 = 1000000.0
        endif
        if spdim20 == 9
        Aeig9 = 1000000.0
        endif
        if spdim20 == 10
        Aeig10 = 1000000.0
        endif
        if spdim20 == 11
        Aeig11 = 1000000.0
        endif
        if spdim20 == 12
        Aeig12 = 1000000.0
        endif
        if spdim20 == 13
        Aeig13 = 1000000.0
        endif
        if spdim20 == 14
        Aeig14 = 1000000.0
        endif
        if spdim20 == 15
        Aeig15 = 1000000.0
        endif
        if spdim20 == 16
        Aeig16 = 1000000.0
        endif
        if spdim20 == 17
        Aeig17 = 1000000.0
        endif
        if spdim20 == 18
        Aeig18 = 1000000.0
        endif
        if spdim20 == 19
        Aeig19 = 1000000.0
        endif
        if spdim20 == 20
        Aeig20 = 1000000.0
        endif
#
#
       ENDPROC AEIGCANC
#
#
       PROC AEIGCANCX
#
#
        if egvmax == 1.0
        Aeig1 = 1000000.0
        endif
        if egvmax == 2.0
        Aeig2 = 1000000.0
        endif
        if egvmax == 3.0
        Aeig3 = 1000000.0
        endif
        if egvmax == 4.0
        Aeig4 = 1000000.0
        endif
        if egvmax == 5.0
        Aeig5 = 1000000.0
        endif
        if egvmax == 6.0
        Aeig6 = 1000000.0
        endif
        if egvmax == 7.0
        Aeig7 = 1000000.0
        endif
        if egvmax == 8.0
        Aeig8 = 1000000.0
        endif
        if egvmax == 9.0
        Aeig9 = 1000000.0
        endif
        if egvmax == 10.0
        Aeig10 = 1000000.0
        endif
        if egvmax == 11.0
        Aeig11 = 1000000.0
        endif
        if egvmax == 12.0
        Aeig12 = 1000000.0
        endif
        if egvmax == 13.0
        Aeig13 = 1000000.0
        endif
        if egvmax == 14.0
        Aeig14 = 1000000.0
        endif
        if egvmax == 15.0
        Aeig15 = 1000000.0
        endif
        if egvmax == 16.0
        Aeig16 = 1000000.0
        endif
        if egvmax == 17.0
        Aeig17 = 1000000.0
        endif
        if egvmax == 18.0
        Aeig18 = 1000000.0
        endif
        if egvmax == 19.0
        Aeig19 = 1000000.0
        endif
        if egvmax == 20.0
        Aeig20 = 1000000.0
        endif
#
#
       ENDPROC AEIGCANCX
#
#
       PROC DRAWVEC1
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     do jindex20
     do kindex20
#
        if jindex20 == spdim20
#
        if kindex20 == 1
        execute return_sval Lvev20  V1_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V1_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V1_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V1_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V1_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V1_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V1_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V1_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V1_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V1_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V1_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V1_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V1_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V1_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V1_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V1_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V1_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V1_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V1_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V1_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
#
       ENDPROC DRAWVEC1
#
#
       PROC DRAWVEC2
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     do jindex20
     do kindex20
#
        if jindex20 == spdim20
#
        if kindex20 == 1
        execute return_sval Lvev20  V2_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V2_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V2_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V2_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V2_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V2_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V2_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V2_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V2_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V2_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V2_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V2_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V2_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V2_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V2_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V2_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V2_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V2_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V2_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V2_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
#
       ENDPROC DRAWVEC2
#
#
       PROC DRAWVEC3
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     do jindex20
     do kindex20
#
        if jindex20 == spdim20
#
        if kindex20 == 1
        execute return_sval Lvev20  V3_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V3_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V3_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V3_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V3_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V3_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V3_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V3_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V3_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V3_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V3_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V3_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V3_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V3_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V3_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V3_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V3_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V3_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V3_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V3_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
#
       ENDPROC DRAWVEC3
#
#
       PROC DRAWVEC4
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     do jindex20
     do kindex20
#
        if jindex20 == spdim20
#
        if kindex20 == 1
        execute return_sval Lvev20  V4_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V4_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V4_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V4_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V4_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V4_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V4_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V4_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V4_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V4_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V4_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V4_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V4_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V4_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V4_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V4_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V4_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V4_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V4_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V4_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
#
       ENDPROC DRAWVEC4
#
#
       PROC DRAWVEC5
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     do jindex20
     do kindex20
#
        if jindex20 == spdim20
#
        if kindex20 == 1
        execute return_sval Lvev20  V5_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V5_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V5_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V5_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V5_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V5_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V5_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V5_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V5_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V5_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V5_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V5_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V5_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V5_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V5_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V5_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V5_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V5_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V5_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V5_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
#
       ENDPROC DRAWVEC5
#
#
       PROC DRAWVEC6
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     do jindex20
     do kindex20
#
        if jindex20 == spdim20
#
        if kindex20 == 1
        execute return_sval Lvev20  V6_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V6_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V6_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V6_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V6_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V6_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V6_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V6_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V6_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V6_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V6_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V6_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V6_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V6_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V6_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V6_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V6_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V6_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V6_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V6_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
#
       ENDPROC DRAWVEC6
#
#
       PROC DRAWVEC7
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     do jindex20
     do kindex20
#
        if jindex20 == spdim20
#
        if kindex20 == 1
        execute return_sval Lvev20  V7_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V7_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V7_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V7_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V7_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V7_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V7_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V7_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V7_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V7_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V7_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V7_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V7_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V7_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V7_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V7_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V7_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V7_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V7_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V7_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
#
       ENDPROC DRAWVEC7
#
#
       PROC DRAWVEC8
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     do jindex20
     do kindex20
#
        if jindex20 == spdim20
#
        if kindex20 == 1
        execute return_sval Lvev20  V8_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V8_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V8_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V8_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V8_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V8_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V8_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V8_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V8_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V8_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V8_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V8_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V8_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V8_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V8_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V8_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V8_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V8_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V8_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V8_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
#
       ENDPROC DRAWVEC8
#
#
       PROC DRAWVEC9
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     do jindex20
     do kindex20
#
        if jindex20 == spdim20
#
        if kindex20 == 1
        execute return_sval Lvev20  V9_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V9_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V9_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V9_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V9_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V9_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V9_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V9_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V9_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V9_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V9_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V9_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V9_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V9_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V9_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V9_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V9_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V9_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V9_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V9_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
#
       ENDPROC DRAWVEC9
#
#
       PROC DRAWVEC10
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     do jindex20
     do kindex20
#
        if jindex20 == spdim20
#
        if kindex20 == 1
        execute return_sval Lvev20  V10_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V10_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V10_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V10_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V10_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V10_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V10_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V10_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V10_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V10_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V10_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V10_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V10_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V10_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V10_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V10_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V10_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V10_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V10_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V10_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
#
       ENDPROC DRAWVEC10
#
#
       PROC DRAWVEC11
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     do jindex20
     do kindex20
#
        if jindex20 == spdim20
#
        if kindex20 == 1
        execute return_sval Lvev20  V11_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V11_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V11_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V11_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V11_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V11_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V11_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V11_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V11_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V11_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V11_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V11_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V11_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V11_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V11_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V11_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V11_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V11_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V11_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V11_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
#
       ENDPROC DRAWVEC11
#
#
       PROC DRAWVEC12
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     do jindex20
     do kindex20
#
        if jindex20 == spdim20
#
        if kindex20 == 1
        execute return_sval Lvev20  V12_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V12_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V12_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V12_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V12_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V12_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V12_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V12_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V12_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V12_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V12_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V12_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V12_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V12_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V12_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V12_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V12_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V12_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V12_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V12_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
#
       ENDPROC DRAWVEC12
#
#
#
       PROC DRAWVECX1
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     xcount=0.0
     do jindex20
#
     xcount+=1.0
#
     do kindex20
#
        if xcount == egvmax
#
        if kindex20 == 1
        execute return_sval Lvev20  V1_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V1_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V1_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V1_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V1_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V1_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V1_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V1_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V1_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V1_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V1_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V1_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V1_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V1_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V1_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V1_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V1_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V1_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V1_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V1_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
#
       ENDPROC DRAWVECX1
#
#
       PROC DRAWVECX2
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     xcount=0.0
     do jindex20
#
     xcount+=1.0
#
     do kindex20
#
        if xcount == egvmax
#
        if kindex20 == 1
        execute return_sval Lvev20  V2_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V2_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V2_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V2_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V2_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V2_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V2_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V2_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V2_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V2_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V2_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V2_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V2_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V2_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V2_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V2_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V2_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V2_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V2_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V2_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
#
       ENDPROC DRAWVECX2
#
#
       PROC DRAWVECX3
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     xcount=0.0
     do jindex20
#
     xcount+=1.0
#
     do kindex20
#
        if xcount == egvmax
#
        if kindex20 == 1
        execute return_sval Lvev20  V3_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V3_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V3_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V3_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V3_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V3_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V3_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V3_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V3_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V3_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V3_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V3_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V3_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V3_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V3_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V3_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V3_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V3_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V3_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V3_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
#
       ENDPROC DRAWVECX3
#
#
       PROC DRAWVECX4
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     xcount=0.0
     do jindex20
#
     xcount+=1.0
#
     do kindex20
#
        if xcount == egvmax
#
        if kindex20 == 1
        execute return_sval Lvev20  V4_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V4_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V4_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V4_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V4_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V4_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V4_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V4_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V4_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V4_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V4_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V4_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V4_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V4_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V4_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V4_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V4_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V4_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V4_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V4_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
#
       ENDPROC DRAWVECX4
#
#
       PROC DRAWVECX5
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     xcount=0.0
     do jindex20
#
     xcount+=1.0
#
     do kindex20
#
        if xcount == egvmax
#
        if kindex20 == 1
        execute return_sval Lvev20  V5_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V5_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V5_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V5_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V5_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V5_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V5_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V5_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V5_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V5_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V5_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V5_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V5_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V5_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V5_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V5_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V5_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V5_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V5_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V5_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
#
       ENDPROC DRAWVECX5
#
#
       PROC DRAWVECX6
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     xcount=0.0
     do jindex20
#
     xcount+=1.0
#
     do kindex20
#
        if xcount == egvmax
#
        if kindex20 == 1
        execute return_sval Lvev20  V6_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V6_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V6_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V6_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V6_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V6_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V6_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V6_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V6_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V6_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V6_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V6_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V6_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V6_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V6_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V6_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V6_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V6_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V6_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V6_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
#
       ENDPROC DRAWVECX6
#
#
       PROC DRAWVECX7
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     xcount=0.0
     do jindex20
#
     xcount+=1.0
#
     do kindex20
#
        if xcount == egvmax
#
        if kindex20 == 1
        execute return_sval Lvev20  V7_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V7_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V7_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V7_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V7_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V7_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V7_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V7_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V7_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V7_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V7_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V7_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V7_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V7_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V7_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V7_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V7_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V7_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V7_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V7_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
#
       ENDPROC DRAWVECX7
#
#
       PROC DRAWVECX8
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     xcount=0.0
     do jindex20
#
     xcount+=1.0
#
     do kindex20
#
        if xcount == egvmax
#
        if kindex20 == 1
        execute return_sval Lvev20  V8_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V8_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V8_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V8_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V8_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V8_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V8_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V8_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V8_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V8_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V8_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V8_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V8_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V8_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V8_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V8_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V8_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V8_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V8_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V8_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
#
       ENDPROC DRAWVECX8
#
#
       PROC DRAWVECX9
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     xcount=0.0
     do jindex20
#
     xcount+=1.0
#
     do kindex20
#
        if xcount == egvmax
#
        if kindex20 == 1
        execute return_sval Lvev20  V9_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V9_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V9_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V9_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V9_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V9_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V9_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V9_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V9_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V9_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V9_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V9_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V9_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V9_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V9_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V9_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V9_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V9_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V9_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V9_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
#
       ENDPROC DRAWVECX9
#
#
       PROC DRAWVECX10
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     xcount=0.0
     do jindex20
#
     xcount+=1.0
#
     do kindex20
#
        if xcount == egvmax
#
        if kindex20 == 1
        execute return_sval Lvev20  V10_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V10_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V10_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V10_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V10_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V10_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V10_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V10_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V10_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V10_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V10_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V10_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V10_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V10_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V10_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V10_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V10_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V10_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V10_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V10_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
#
       ENDPROC DRAWVECX10
#
#
       PROC DRAWVECX11
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     xcount=0.0
     do jindex20
#
     xcount+=1.0
#
     do kindex20
#
        if xcount == egvmax
#
        if kindex20 == 1
        execute return_sval Lvev20  V11_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V11_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V11_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V11_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V11_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V11_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V11_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V11_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V11_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V11_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V11_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V11_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V11_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V11_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V11_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V11_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V11_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V11_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V11_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V11_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
#
       ENDPROC DRAWVECX11
#
#
       PROC DRAWVECX12
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     xcount=0.0
     do jindex20
#
     xcount+=1.0
#
     do kindex20
#
        if xcount == egvmax
#
        if kindex20 == 1
        execute return_sval Lvev20  V12_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V12_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V12_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V12_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V12_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V12_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V12_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V12_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V12_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V12_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V12_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V12_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V12_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V12_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V12_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V12_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V12_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V12_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V12_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V12_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
#
       ENDPROC DRAWVECX12
#
#
#
       PROC FNDVECS
#
     lcount=0.0
     icount=1.0
#
#
# ----------------find current one -----------
#
     do spdim2
#
     if icount == imax
#
     lcount+=1.0
#
     allocate Lvev20(*,*)
#
     do jindex20
     do kindex20
     Lvev20(kindex20,jindex20)=Svev20(kindex20,jindex20)
     MYvev(kindex20,jindex20)=Svev20(kindex20,jindex20)
     enddo kindex20
     enddo jindex20
#
     do jindex20
     do kindex20
#
        if jindex20 == spdim2
#
        if kindex20 == 1
        execute return_sval Lvev20  V1_1
        endif
        if kindex20 == 2
        execute return_sval Lvev20  V1_2
        endif
        if kindex20 == 3
        execute return_sval Lvev20  V1_3
        endif
        if kindex20 == 4
        execute return_sval Lvev20  V1_4
        endif
        if kindex20 == 5
        execute return_sval Lvev20  V1_5
        endif
        if kindex20 == 6
        execute return_sval Lvev20  V1_6
        endif
        if kindex20 == 7
        execute return_sval Lvev20  V1_7
        endif
        if kindex20 == 8
        execute return_sval Lvev20  V1_8
        endif
        if kindex20 == 9
        execute return_sval Lvev20  V1_9
        endif
        if kindex20 == 10
        execute return_sval Lvev20  V1_10
        endif
        if kindex20 == 11
        execute return_sval Lvev20  V1_11
        endif
        if kindex20 == 12
        execute return_sval Lvev20  V1_12
        endif
        if kindex20 == 13
        execute return_sval Lvev20  V1_13
        endif
        if kindex20 == 14
        execute return_sval Lvev20  V1_14
        endif
        if kindex20 == 15
        execute return_sval Lvev20  V1_15
        endif
        if kindex20 == 16
        execute return_sval Lvev20  V1_16
        endif
        if kindex20 == 17
        execute return_sval Lvev20  V1_17
        endif
        if kindex20 == 18
        execute return_sval Lvev20  V1_18
        endif
        if kindex20 == 19
        execute return_sval Lvev20  V1_19
        endif
        if kindex20 == 20
        execute return_sval Lvev20  V1_20
        endif
#
        endif
#
     enddo kindex20
     enddo jindex20
#
     deallocate Lvev20(*,*)
#
        if spdim2 == 1
        Aeig1 = 1000000.0
        endif
        if spdim2 == 2
        Aeig2 = 1000000.0
        endif
        if spdim2 == 3
        Aeig3 = 1000000.0
        endif
        if spdim2 == 4
        Aeig4 = 1000000.0
        endif
        if spdim2 == 5
        Aeig5 = 1000000.0
        endif
        if spdim2 == 6
        Aeig6 = 1000000.0
        endif
        if spdim2 == 7
        Aeig7 = 1000000.0
        endif
        if spdim2 == 8
        Aeig8 = 1000000.0
        endif
        if spdim2 == 9
        Aeig9 = 1000000.0
        endif
        if spdim2 == 10
        Aeig10 = 1000000.0
        endif
        if spdim2 == 11
        Aeig11 = 1000000.0
        endif
        if spdim2 == 12
        Aeig12 = 1000000.0
        endif
        if spdim2 == 13
        Aeig13 = 1000000.0
        endif
        if spdim2 == 14
        Aeig14 = 1000000.0
        endif
        if spdim2 == 15
        Aeig15 = 1000000.0
        endif
        if spdim2 == 16
        Aeig16 = 1000000.0
        endif
        if spdim2 == 17
        Aeig17 = 1000000.0
        endif
        if spdim2 == 18
        Aeig18 = 1000000.0
        endif
        if spdim2 == 19
        Aeig19 = 1000000.0
        endif
        if spdim2 == 20
        Aeig20 = 1000000.0
        endif
#
     exit
#
     endif
#
     icount+=1.0
#
     enddo spdim2
#
#
#
# ----------cancel eigenvalues below threshold---
#
        do spdim20
#
      if spdim20 == 1
#
      aeigtemp=Aeig1
#
      if aeigtemp < 0.0
      aeigtemp*=-1.0
      endif
#
      if aeigtemp < eomthresh
      Aeig1 = 12345.6
      endif
#
      endif
#
      if spdim20 == 2
#
      aeigtemp=Aeig2
#
      if aeigtemp < 0.0
      aeigtemp*=-1.0
      endif
#
      if aeigtemp < eomthresh
      Aeig2 = 12345.6
      endif
#
      endif
#
      if spdim20 == 3
#
      aeigtemp=Aeig3
#
      if aeigtemp < 0.0
      aeigtemp*=-1.0
      endif
#
      if aeigtemp < eomthresh
      Aeig3 = 12345.6
      endif
#
      endif
#
      if spdim20 == 4
#
      aeigtemp=Aeig4
#
      if aeigtemp < 0.0
      aeigtemp*=-1.0
      endif
#
      if aeigtemp < eomthresh
      Aeig4 = 12345.6
      endif
#
      endif
#
      if spdim20 == 5
#
      aeigtemp=Aeig5
#
      if aeigtemp < 0.0
      aeigtemp*=-1.0
      endif
#
      if aeigtemp < eomthresh
      Aeig5 = 12345.6
      endif
#
      endif
#
      if spdim20 == 6
#
      aeigtemp=Aeig6
#
      if aeigtemp < 0.0
      aeigtemp*=-1.0
      endif
#
      if aeigtemp < eomthresh
      Aeig6 = 12345.6
      endif
#
      endif
#
      if spdim20 == 7
#
      aeigtemp=Aeig7
#
      if aeigtemp < 0.0
      aeigtemp*=-1.0
      endif
#
      if aeigtemp < eomthresh
      Aeig7 = 12345.6
      endif
#
      endif
#
      if spdim20 == 8
#
      aeigtemp=Aeig8
#
      if aeigtemp < 0.0
      aeigtemp*=-1.0
      endif
#
      if aeigtemp < eomthresh
      Aeig8 = 12345.6
      endif
#
      endif
#
      if spdim20 == 9
#
      aeigtemp=Aeig9
#
      if aeigtemp < 0.0
      aeigtemp*=-1.0
      endif
#
      if aeigtemp < eomthresh
      Aeig9 = 12345.6
      endif
#
      endif
#
      if spdim20 == 10
#
      aeigtemp=Aeig10
#
      if aeigtemp < 0.0
      aeigtemp*=-1.0
      endif
#
      if aeigtemp < eomthresh
      Aeig10 = 12345.6
      endif
#
      endif
#
      if spdim20 == 11
#
      aeigtemp=Aeig11
#
      if aeigtemp < 0.0
      aeigtemp*=-1.0
      endif
#
      if aeigtemp < eomthresh
      Aeig11 = 12345.6
      endif
#
      endif
#
      if spdim20 == 12
#
      aeigtemp=Aeig12
#
      if aeigtemp < 0.0
      aeigtemp*=-1.0
      endif
#
      if aeigtemp < eomthresh
      Aeig12 = 12345.6
      endif
#
      endif
#
      if spdim20 == 13
#
      aeigtemp=Aeig13
#
      if aeigtemp < 0.0
      aeigtemp*=-1.0
      endif
#
      if aeigtemp < eomthresh
      Aeig13 = 12345.6
      endif
#
      endif
#
      if spdim20 == 14
#
      aeigtemp=Aeig14
#
      if aeigtemp < 0.0
      aeigtemp*=-1.0
      endif
#
      if aeigtemp < eomthresh
      Aeig14 = 12345.6
      endif
#
      endif
#
      if spdim20 == 15
#
      aeigtemp=Aeig15
#
      if aeigtemp < 0.0
      aeigtemp*=-1.0
      endif
#
      if aeigtemp < eomthresh
      Aeig15 = 12345.6
      endif
#
      endif
#
      if spdim20 == 16
#
      aeigtemp=Aeig16
#
      if aeigtemp < 0.0
      aeigtemp*=-1.0
      endif
#
      if aeigtemp < eomthresh
      Aeig16 = 12345.6
      endif
#
      endif
#
      if spdim20 == 17
#
      aeigtemp=Aeig17
#
      if aeigtemp < 0.0
      aeigtemp*=-1.0
      endif
#
      if aeigtemp < eomthresh
      Aeig17 = 12345.6
      endif
#
      endif
#
      if spdim20 == 18
#
      aeigtemp=Aeig18
#
      if aeigtemp < 0.0
      aeigtemp*=-1.0
      endif
#
      if aeigtemp < eomthresh
      Aeig18 = 12345.6
      endif
#
      endif
#
      if spdim20 == 19
#
      aeigtemp=Aeig19
#
      if aeigtemp < 0.0
      aeigtemp*=-1.0
      endif
#
      if aeigtemp < eomthresh
      Aeig19 = 12345.6
      endif
#
      endif
#
      if spdim20 == 20
#
      aeigtemp=Aeig20
#
      if aeigtemp < 0.0
      aeigtemp*=-1.0
      endif
#
      if aeigtemp < eomthresh
      Aeig20 = 12345.6
      endif
#
      endif
#
        enddo spdim20
#
# ----------------find previous roots -----------
#
#
        if root1 < 1000.0
#
        lcount+=1.0
#
        do spdim20
#
      if spdim20 == 1
#
      ediff = root1 - Aeig1
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC2
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 2
#
      ediff = root1 - Aeig2
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC2
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 3
#
      ediff = root1 - Aeig3
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC2
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 4
#
      ediff = root1 - Aeig4
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC2
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 5
#
      ediff = root1 - Aeig5
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC2
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 6
#
      ediff = root1 - Aeig6
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC2
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 7
#
      ediff = root1 - Aeig7
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC2
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 8
#
      ediff = root1 - Aeig8
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC2
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 9
#
      ediff = root1 - Aeig9
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC2
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 10
#
      ediff = root1 - Aeig10
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC2
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 11
#
      ediff = root1 - Aeig11
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC2
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 12
#
      ediff = root1 - Aeig12
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC2
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 13
#
      ediff = root1 - Aeig13
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC2
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 14
#
      ediff = root1 - Aeig14
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC2
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 15
#
      ediff = root1 - Aeig15
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC2
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 16
#
      ediff = root1 - Aeig16
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC2
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 17
#
      ediff = root1 - Aeig17
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC2
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 18
#
      ediff = root1 - Aeig18
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC2
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 19
#
      ediff = root1 - Aeig19
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC2
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 20
#
      ediff = root1 - Aeig20
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC2
#
      call AEIGCANC
#
#
      endif
#
      endif
#
        enddo spdim20
#
      endif
#
#
        if root2 < 1000.0
#
        lcount+=1.0
#
        do spdim20
#
      if spdim20 == 1
#
      ediff = root2 - Aeig1
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC3
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 2
#
      ediff = root2 - Aeig2
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC3
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 3
#
      ediff = root2 - Aeig3
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC3
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 4
#
      ediff = root2 - Aeig4
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC3
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 5
#
      ediff = root2 - Aeig5
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC3
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 6
#
      ediff = root2 - Aeig6
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC3
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 7
#
      ediff = root2 - Aeig7
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC3
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 8
#
      ediff = root2 - Aeig8
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC3
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 9
#
      ediff = root2 - Aeig9
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC3
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 10
#
      ediff = root2 - Aeig10
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC3
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 11
#
      ediff = root2 - Aeig11
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC3
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 12
#
      ediff = root2 - Aeig12
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC3
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 13
#
      ediff = root2 - Aeig13
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC3
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 14
#
      ediff = root2 - Aeig14
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC3
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 15
#
      ediff = root2 - Aeig15
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC3
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 16
#
      ediff = root2 - Aeig16
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC3
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 17
#
      ediff = root2 - Aeig17
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC3
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 18
#
      ediff = root2 - Aeig18
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC3
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 19
#
      ediff = root2 - Aeig19
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC3
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 20
#
      ediff = root2 - Aeig20
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC3
#
      call AEIGCANC
#
#
      endif
#
      endif
#
        enddo spdim20
#
      endif
#
#
        if root3 < 1000.0
#
        lcount+=1.0
#
        do spdim20
#
      if spdim20 == 1
#
      ediff = root3 - Aeig1
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC4
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 2
#
      ediff = root3 - Aeig2
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC4
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 3
#
      ediff = root3 - Aeig3
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC4
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 4
#
      ediff = root3 - Aeig4
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC4
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 5
#
      ediff = root3 - Aeig5
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC4
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 6
#
      ediff = root3 - Aeig6
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC4
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 7
#
      ediff = root3 - Aeig7
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC4
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 8
#
      ediff = root3 - Aeig8
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC4
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 9
#
      ediff = root3 - Aeig9
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC4
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 10
#
      ediff = root3 - Aeig10
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC4
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 11
#
      ediff = root3 - Aeig11
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC4
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 12
#
      ediff = root3 - Aeig12
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC4
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 13
#
      ediff = root3 - Aeig13
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC4
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 14
#
      ediff = root3 - Aeig14
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC4
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 15
#
      ediff = root3 - Aeig15
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC4
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 16
#
      ediff = root3 - Aeig16
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC4
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 17
#
      ediff = root3 - Aeig17
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC4
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 18
#
      ediff = root3 - Aeig18
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC4
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 19
#
      ediff = root3 - Aeig19
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC4
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 20
#
      ediff = root3 - Aeig20
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC4
#
      call AEIGCANC
#
#
      endif
#
      endif
#
        enddo spdim20
#
      endif
#
#
        if root4 < 1000.0
#
        lcount+=1.0
#
        do spdim20
#
      if spdim20 == 1
#
      ediff = root4 - Aeig1
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC5
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 2
#
      ediff = root4 - Aeig2
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC5
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 3
#
      ediff = root4 - Aeig3
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC5
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 4
#
      ediff = root4 - Aeig4
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC5
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 5
#
      ediff = root4 - Aeig5
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC5
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 6
#
      ediff = root4 - Aeig6
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC5
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 7
#
      ediff = root4 - Aeig7
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC5
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 8
#
      ediff = root4 - Aeig8
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC5
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 9
#
      ediff = root4 - Aeig9
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC5
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 10
#
      ediff = root4 - Aeig10
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC5
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 11
#
      ediff = root4 - Aeig11
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC5
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 12
#
      ediff = root4 - Aeig12
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC5
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 13
#
      ediff = root4 - Aeig13
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC5
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 14
#
      ediff = root4 - Aeig14
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC5
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 15
#
      ediff = root4 - Aeig15
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC5
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 16
#
      ediff = root4 - Aeig16
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC5
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 17
#
      ediff = root4 - Aeig17
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC5
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 18
#
      ediff = root4 - Aeig18
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC5
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 19
#
      ediff = root4 - Aeig19
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC5
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 20
#
      ediff = root4 - Aeig20
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC5
#
      call AEIGCANC
#
#
      endif
#
      endif
#
        enddo spdim20
#
      endif
#
#
        if root5 < 1000.0
#
        lcount+=1.0
#
        do spdim20
#
      if spdim20 == 1
#
      ediff = root5 - Aeig1
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC6
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 2
#
      ediff = root5 - Aeig2
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC6
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 3
#
      ediff = root5 - Aeig3
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC6
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 4
#
      ediff = root5 - Aeig4
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC6
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 5
#
      ediff = root5 - Aeig5
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC6
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 6
#
      ediff = root5 - Aeig6
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC6
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 7
#
      ediff = root5 - Aeig7
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC6
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 8
#
      ediff = root5 - Aeig8
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC6
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 9
#
      ediff = root5 - Aeig9
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC6
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 10
#
      ediff = root5 - Aeig10
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC6
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 11
#
      ediff = root5 - Aeig11
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC6
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 12
#
      ediff = root5 - Aeig12
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC6
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 13
#
      ediff = root5 - Aeig13
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC6
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 14
#
      ediff = root5 - Aeig14
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC6
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 15
#
      ediff = root5 - Aeig15
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC6
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 16
#
      ediff = root5 - Aeig16
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC6
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 17
#
      ediff = root5 - Aeig17
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC6
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 18
#
      ediff = root5 - Aeig18
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC6
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 19
#
      ediff = root5 - Aeig19
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC6
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 20
#
      ediff = root5 - Aeig20
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC6
#
      call AEIGCANC
#
#
      endif
#
      endif
#
        enddo spdim20
#
      endif
#
#
        if root6 < 1000.0
#
        lcount+=1.0
#
        do spdim20
#
      if spdim20 == 1
#
      ediff = root6 - Aeig1
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC7
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 2
#
      ediff = root6 - Aeig2
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC7
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 3
#
      ediff = root6 - Aeig3
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC7
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 4
#
      ediff = root6 - Aeig4
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC7
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 5
#
      ediff = root6 - Aeig5
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC7
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 6
#
      ediff = root6 - Aeig6
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC7
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 7
#
      ediff = root6 - Aeig7
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC7
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 8
#
      ediff = root6 - Aeig8
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC7
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 9
#
      ediff = root6 - Aeig9
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC7
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 10
#
      ediff = root6 - Aeig10
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC7
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 11
#
      ediff = root6 - Aeig11
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC7
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 12
#
      ediff = root6 - Aeig12
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC7
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 13
#
      ediff = root6 - Aeig13
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC7
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 14
#
      ediff = root6 - Aeig14
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC7
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 15
#
      ediff = root6 - Aeig15
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC7
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 16
#
      ediff = root6 - Aeig16
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC7
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 17
#
      ediff = root6 - Aeig17
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC7
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 18
#
      ediff = root6 - Aeig18
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC7
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 19
#
      ediff = root6 - Aeig19
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC7
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 20
#
      ediff = root6 - Aeig20
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC7
#
      call AEIGCANC
#
#
      endif
#
      endif
#
        enddo spdim20
#
      endif
#
#
        if root7 < 1000.0
#
        lcount+=1.0
#
        do spdim20
#
      if spdim20 == 1
#
      ediff = root7 - Aeig1
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC8
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 2
#
      ediff = root7 - Aeig2
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC8
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 3
#
      ediff = root7 - Aeig3
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC8
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 4
#
      ediff = root7 - Aeig4
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC8
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 5
#
      ediff = root7 - Aeig5
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC8
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 6
#
      ediff = root7 - Aeig6
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC8
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 7
#
      ediff = root7 - Aeig7
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC8
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 8
#
      ediff = root7 - Aeig8
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC8
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 9
#
      ediff = root7 - Aeig9
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC8
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 10
#
      ediff = root7 - Aeig10
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC8
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 11
#
      ediff = root7 - Aeig11
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC8
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 12
#
      ediff = root7 - Aeig12
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC8
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 13
#
      ediff = root7 - Aeig13
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC8
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 14
#
      ediff = root7 - Aeig14
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC8
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 15
#
      ediff = root7 - Aeig15
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC8
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 16
#
      ediff = root7 - Aeig16
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC8
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 17
#
      ediff = root7 - Aeig17
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC8
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 18
#
      ediff = root7 - Aeig18
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC8
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 19
#
      ediff = root7 - Aeig19
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC8
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 20
#
      ediff = root7 - Aeig20
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC8
#
      call AEIGCANC
#
#
      endif
#
      endif
#
        enddo spdim20
#
      endif
#
#
        if root8 < 1000.0
#
        lcount+=1.0
#
        do spdim20
#
      if spdim20 == 1
#
      ediff = root8 - Aeig1
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC9
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 2
#
      ediff = root8 - Aeig2
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC9
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 3
#
      ediff = root8 - Aeig3
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC9
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 4
#
      ediff = root8 - Aeig4
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC9
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 5
#
      ediff = root8 - Aeig5
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC9
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 6
#
      ediff = root8 - Aeig6
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC9
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 7
#
      ediff = root8 - Aeig7
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC9
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 8
#
      ediff = root8 - Aeig8
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC9
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 9
#
      ediff = root8 - Aeig9
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC9
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 10
#
      ediff = root8 - Aeig10
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC9
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 11
#
      ediff = root8 - Aeig11
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC9
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 12
#
      ediff = root8 - Aeig12
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC9
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 13
#
      ediff = root8 - Aeig13
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC9
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 14
#
      ediff = root8 - Aeig14
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC9
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 15
#
      ediff = root8 - Aeig15
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC9
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 16
#
      ediff = root8 - Aeig16
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC9
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 17
#
      ediff = root8 - Aeig17
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC9
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 18
#
      ediff = root8 - Aeig18
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC9
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 19
#
      ediff = root8 - Aeig19
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC9
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 20
#
      ediff = root8 - Aeig20
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC9
#
      call AEIGCANC
#
#
      endif
#
      endif
#
        enddo spdim20
#
      endif
#
#
        if root9 < 1000.0
#
        lcount+=1.0
#
        do spdim20
#
      if spdim20 == 1
#
      ediff = root9 - Aeig1
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC10
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 2
#
      ediff = root9 - Aeig2
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC10
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 3
#
      ediff = root9 - Aeig3
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC10
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 4
#
      ediff = root9 - Aeig4
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC10
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 5
#
      ediff = root9 - Aeig5
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC10
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 6
#
      ediff = root9 - Aeig6
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC10
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 7
#
      ediff = root9 - Aeig7
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC10
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 8
#
      ediff = root9 - Aeig8
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC10
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 9
#
      ediff = root9 - Aeig9
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC10
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 10
#
      ediff = root9 - Aeig10
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC10
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 11
#
      ediff = root9 - Aeig11
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC10
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 12
#
      ediff = root9 - Aeig12
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC10
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 13
#
      ediff = root9 - Aeig13
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC10
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 14
#
      ediff = root9 - Aeig14
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC10
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 15
#
      ediff = root9 - Aeig15
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC10
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 16
#
      ediff = root9 - Aeig16
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC10
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 17
#
      ediff = root9 - Aeig17
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC10
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 18
#
      ediff = root9 - Aeig18
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC10
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 19
#
      ediff = root9 - Aeig19
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC10
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 20
#
      ediff = root9 - Aeig20
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC10
#
      call AEIGCANC
#
#
      endif
#
      endif
#
        enddo spdim20
#
      endif
#
#
        if root10 < 1000.0
#
        lcount+=1.0
#
        do spdim20
#
      if spdim20 == 1
#
      ediff = root10 - Aeig1
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC11
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 2
#
      ediff = root10 - Aeig2
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC11
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 3
#
      ediff = root10 - Aeig3
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC11
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 4
#
      ediff = root10 - Aeig4
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC11
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 5
#
      ediff = root10 - Aeig5
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC11
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 6
#
      ediff = root10 - Aeig6
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC11
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 7
#
      ediff = root10 - Aeig7
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC11
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 8
#
      ediff = root10 - Aeig8
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC11
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 9
#
      ediff = root10 - Aeig9
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC11
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 10
#
      ediff = root10 - Aeig10
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC11
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 11
#
      ediff = root10 - Aeig11
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC11
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 12
#
      ediff = root10 - Aeig12
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC11
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 13
#
      ediff = root10 - Aeig13
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC11
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 14
#
      ediff = root10 - Aeig14
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC11
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 15
#
      ediff = root10 - Aeig15
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC11
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 16
#
      ediff = root10 - Aeig16
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC11
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 17
#
      ediff = root10 - Aeig17
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC11
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 18
#
      ediff = root10 - Aeig18
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC11
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 19
#
      ediff = root10 - Aeig19
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC11
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 20
#
      ediff = root10 - Aeig20
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC11
#
      call AEIGCANC
#
#
      endif
#
      endif
#
        enddo spdim20
#
      endif
#
#
        if root11 < 1000.0
#
        lcount+=1.0
#
        do spdim20
#
      if spdim20 == 1
#
      ediff = root11 - Aeig1
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC12
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 2
#
      ediff = root11 - Aeig2
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC12
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 3
#
      ediff = root11 - Aeig3
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC12
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 4
#
      ediff = root11 - Aeig4
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC12
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 5
#
      ediff = root11 - Aeig5
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC12
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 6
#
      ediff = root11 - Aeig6
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC12
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 7
#
      ediff = root11 - Aeig7
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC12
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 8
#
      ediff = root11 - Aeig8
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC12
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 9
#
      ediff = root11 - Aeig9
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC12
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 10
#
      ediff = root11 - Aeig10
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC12
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 11
#
      ediff = root11 - Aeig11
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC12
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 12
#
      ediff = root11 - Aeig12
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC12
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 13
#
      ediff = root11 - Aeig13
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC12
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 14
#
      ediff = root11 - Aeig14
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC12
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 15
#
      ediff = root11 - Aeig15
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC12
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 16
#
      ediff = root11 - Aeig16
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC12
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 17
#
      ediff = root11 - Aeig17
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC12
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 18
#
      ediff = root11 - Aeig18
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC12
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 19
#
      ediff = root11 - Aeig19
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC12
#
      call AEIGCANC
#
#
      endif
#
      endif
      if spdim20 == 20
#
      ediff = root11 - Aeig20
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < 0.00001
#
#
      call DRAWVEC12
#
      call AEIGCANC
#
#
      endif
#
      endif
#
        enddo spdim20
#
      endif
#
#
# ----------------find close to current -----------
#
     do spdim2
#
     lcount+=1.0
#
     if lcount > 12.0
     exit
     endif
#
      emax=100000.0
#
      icount=0.0
#
      do spdim20
#
      icount+=1.0
#
      if spdim20 == 1
      ediff=omega-Aeig1
      endif
      if spdim20 == 2
      ediff=omega-Aeig2
      endif
      if spdim20 == 3
      ediff=omega-Aeig3
      endif
      if spdim20 == 4
      ediff=omega-Aeig4
      endif
      if spdim20 == 5
      ediff=omega-Aeig5
      endif
      if spdim20 == 6
      ediff=omega-Aeig6
      endif
      if spdim20 == 7
      ediff=omega-Aeig7
      endif
      if spdim20 == 8
      ediff=omega-Aeig8
      endif
      if spdim20 == 9
      ediff=omega-Aeig9
      endif
      if spdim20 == 10
      ediff=omega-Aeig10
      endif
      if spdim20 == 11
      ediff=omega-Aeig11
      endif
      if spdim20 == 12
      ediff=omega-Aeig12
      endif
      if spdim20 == 13
      ediff=omega-Aeig13
      endif
      if spdim20 == 14
      ediff=omega-Aeig14
      endif
      if spdim20 == 15
      ediff=omega-Aeig15
      endif
      if spdim20 == 16
      ediff=omega-Aeig16
      endif
      if spdim20 == 17
      ediff=omega-Aeig17
      endif
      if spdim20 == 18
      ediff=omega-Aeig18
      endif
      if spdim20 == 19
      ediff=omega-Aeig19
      endif
      if spdim20 == 20
      ediff=omega-Aeig20
      endif
#
      if ediff < 0.0
      ediff*=-1.0
      endif
      if ediff < emax
      emax=ediff
      egvmax=icount
      endif
#
      enddo spdim20
#
#
      if egvmax == 1.0
#
      if lcount == 2.0
      call DRAWVECX2
      endif
      if lcount == 3.0
      call DRAWVECX3
      endif
      if lcount == 4.0
      call DRAWVECX4
      endif
      if lcount == 5.0
      call DRAWVECX5
      endif
      if lcount == 6.0
      call DRAWVECX6
      endif
      if lcount == 7.0
      call DRAWVECX7
      endif
      if lcount == 8.0
      call DRAWVECX8
      endif
      if lcount == 9.0
      call DRAWVECX9
      endif
      if lcount == 10.0
      call DRAWVECX10
      endif
      if lcount == 11.0
      call DRAWVECX11
      endif
      if lcount == 12.0
      call DRAWVECX12
      endif
      call AEIGCANCX
#
      endif
#
      if egvmax == 2.0
#
      if lcount == 2.0
      call DRAWVECX2
      endif
      if lcount == 3.0
      call DRAWVECX3
      endif
      if lcount == 4.0
      call DRAWVECX4
      endif
      if lcount == 5.0
      call DRAWVECX5
      endif
      if lcount == 6.0
      call DRAWVECX6
      endif
      if lcount == 7.0
      call DRAWVECX7
      endif
      if lcount == 8.0
      call DRAWVECX8
      endif
      if lcount == 9.0
      call DRAWVECX9
      endif
      if lcount == 10.0
      call DRAWVECX10
      endif
      if lcount == 11.0
      call DRAWVECX11
      endif
      if lcount == 12.0
      call DRAWVECX12
      endif
      call AEIGCANCX
#
      endif
#
      if egvmax == 3.0
#
      if lcount == 2.0
      call DRAWVECX2
      endif
      if lcount == 3.0
      call DRAWVECX3
      endif
      if lcount == 4.0
      call DRAWVECX4
      endif
      if lcount == 5.0
      call DRAWVECX5
      endif
      if lcount == 6.0
      call DRAWVECX6
      endif
      if lcount == 7.0
      call DRAWVECX7
      endif
      if lcount == 8.0
      call DRAWVECX8
      endif
      if lcount == 9.0
      call DRAWVECX9
      endif
      if lcount == 10.0
      call DRAWVECX10
      endif
      if lcount == 11.0
      call DRAWVECX11
      endif
      if lcount == 12.0
      call DRAWVECX12
      endif
      call AEIGCANCX
#
      endif
#
      if egvmax == 4.0
#
      if lcount == 2.0
      call DRAWVECX2
      endif
      if lcount == 3.0
      call DRAWVECX3
      endif
      if lcount == 4.0
      call DRAWVECX4
      endif
      if lcount == 5.0
      call DRAWVECX5
      endif
      if lcount == 6.0
      call DRAWVECX6
      endif
      if lcount == 7.0
      call DRAWVECX7
      endif
      if lcount == 8.0
      call DRAWVECX8
      endif
      if lcount == 9.0
      call DRAWVECX9
      endif
      if lcount == 10.0
      call DRAWVECX10
      endif
      if lcount == 11.0
      call DRAWVECX11
      endif
      if lcount == 12.0
      call DRAWVECX12
      endif
      call AEIGCANCX
#
      endif
#
      if egvmax == 5.0
#
      if lcount == 2.0
      call DRAWVECX2
      endif
      if lcount == 3.0
      call DRAWVECX3
      endif
      if lcount == 4.0
      call DRAWVECX4
      endif
      if lcount == 5.0
      call DRAWVECX5
      endif
      if lcount == 6.0
      call DRAWVECX6
      endif
      if lcount == 7.0
      call DRAWVECX7
      endif
      if lcount == 8.0
      call DRAWVECX8
      endif
      if lcount == 9.0
      call DRAWVECX9
      endif
      if lcount == 10.0
      call DRAWVECX10
      endif
      if lcount == 11.0
      call DRAWVECX11
      endif
      if lcount == 12.0
      call DRAWVECX12
      endif
      call AEIGCANCX
#
      endif
#
      if egvmax == 6.0
#
      if lcount == 2.0
      call DRAWVECX2
      endif
      if lcount == 3.0
      call DRAWVECX3
      endif
      if lcount == 4.0
      call DRAWVECX4
      endif
      if lcount == 5.0
      call DRAWVECX5
      endif
      if lcount == 6.0
      call DRAWVECX6
      endif
      if lcount == 7.0
      call DRAWVECX7
      endif
      if lcount == 8.0
      call DRAWVECX8
      endif
      if lcount == 9.0
      call DRAWVECX9
      endif
      if lcount == 10.0
      call DRAWVECX10
      endif
      if lcount == 11.0
      call DRAWVECX11
      endif
      if lcount == 12.0
      call DRAWVECX12
      endif
      call AEIGCANCX
#
      endif
#
      if egvmax == 7.0
#
      if lcount == 2.0
      call DRAWVECX2
      endif
      if lcount == 3.0
      call DRAWVECX3
      endif
      if lcount == 4.0
      call DRAWVECX4
      endif
      if lcount == 5.0
      call DRAWVECX5
      endif
      if lcount == 6.0
      call DRAWVECX6
      endif
      if lcount == 7.0
      call DRAWVECX7
      endif
      if lcount == 8.0
      call DRAWVECX8
      endif
      if lcount == 9.0
      call DRAWVECX9
      endif
      if lcount == 10.0
      call DRAWVECX10
      endif
      if lcount == 11.0
      call DRAWVECX11
      endif
      if lcount == 12.0
      call DRAWVECX12
      endif
      call AEIGCANCX
#
      endif
#
      if egvmax == 8.0
#
      if lcount == 2.0
      call DRAWVECX2
      endif
      if lcount == 3.0
      call DRAWVECX3
      endif
      if lcount == 4.0
      call DRAWVECX4
      endif
      if lcount == 5.0
      call DRAWVECX5
      endif
      if lcount == 6.0
      call DRAWVECX6
      endif
      if lcount == 7.0
      call DRAWVECX7
      endif
      if lcount == 8.0
      call DRAWVECX8
      endif
      if lcount == 9.0
      call DRAWVECX9
      endif
      if lcount == 10.0
      call DRAWVECX10
      endif
      if lcount == 11.0
      call DRAWVECX11
      endif
      if lcount == 12.0
      call DRAWVECX12
      endif
      call AEIGCANCX
#
      endif
#
      if egvmax == 9.0
#
      if lcount == 2.0
      call DRAWVECX2
      endif
      if lcount == 3.0
      call DRAWVECX3
      endif
      if lcount == 4.0
      call DRAWVECX4
      endif
      if lcount == 5.0
      call DRAWVECX5
      endif
      if lcount == 6.0
      call DRAWVECX6
      endif
      if lcount == 7.0
      call DRAWVECX7
      endif
      if lcount == 8.0
      call DRAWVECX8
      endif
      if lcount == 9.0
      call DRAWVECX9
      endif
      if lcount == 10.0
      call DRAWVECX10
      endif
      if lcount == 11.0
      call DRAWVECX11
      endif
      if lcount == 12.0
      call DRAWVECX12
      endif
      call AEIGCANCX
#
      endif
#
      if egvmax == 10.0
#
      if lcount == 2.0
      call DRAWVECX2
      endif
      if lcount == 3.0
      call DRAWVECX3
      endif
      if lcount == 4.0
      call DRAWVECX4
      endif
      if lcount == 5.0
      call DRAWVECX5
      endif
      if lcount == 6.0
      call DRAWVECX6
      endif
      if lcount == 7.0
      call DRAWVECX7
      endif
      if lcount == 8.0
      call DRAWVECX8
      endif
      if lcount == 9.0
      call DRAWVECX9
      endif
      if lcount == 10.0
      call DRAWVECX10
      endif
      if lcount == 11.0
      call DRAWVECX11
      endif
      if lcount == 12.0
      call DRAWVECX12
      endif
      call AEIGCANCX
#
      endif
#
      if egvmax == 11.0
#
      if lcount == 2.0
      call DRAWVECX2
      endif
      if lcount == 3.0
      call DRAWVECX3
      endif
      if lcount == 4.0
      call DRAWVECX4
      endif
      if lcount == 5.0
      call DRAWVECX5
      endif
      if lcount == 6.0
      call DRAWVECX6
      endif
      if lcount == 7.0
      call DRAWVECX7
      endif
      if lcount == 8.0
      call DRAWVECX8
      endif
      if lcount == 9.0
      call DRAWVECX9
      endif
      if lcount == 10.0
      call DRAWVECX10
      endif
      if lcount == 11.0
      call DRAWVECX11
      endif
      if lcount == 12.0
      call DRAWVECX12
      endif
      call AEIGCANCX
#
      endif
#
      if egvmax == 12.0
#
      if lcount == 2.0
      call DRAWVECX2
      endif
      if lcount == 3.0
      call DRAWVECX3
      endif
      if lcount == 4.0
      call DRAWVECX4
      endif
      if lcount == 5.0
      call DRAWVECX5
      endif
      if lcount == 6.0
      call DRAWVECX6
      endif
      if lcount == 7.0
      call DRAWVECX7
      endif
      if lcount == 8.0
      call DRAWVECX8
      endif
      if lcount == 9.0
      call DRAWVECX9
      endif
      if lcount == 10.0
      call DRAWVECX10
      endif
      if lcount == 11.0
      call DRAWVECX11
      endif
      if lcount == 12.0
      call DRAWVECX12
      endif
      call AEIGCANCX
#
      endif
#
      if egvmax == 13.0
#
      if lcount == 2.0
      call DRAWVECX2
      endif
      if lcount == 3.0
      call DRAWVECX3
      endif
      if lcount == 4.0
      call DRAWVECX4
      endif
      if lcount == 5.0
      call DRAWVECX5
      endif
      if lcount == 6.0
      call DRAWVECX6
      endif
      if lcount == 7.0
      call DRAWVECX7
      endif
      if lcount == 8.0
      call DRAWVECX8
      endif
      if lcount == 9.0
      call DRAWVECX9
      endif
      if lcount == 10.0
      call DRAWVECX10
      endif
      if lcount == 11.0
      call DRAWVECX11
      endif
      if lcount == 12.0
      call DRAWVECX12
      endif
      call AEIGCANCX
#
      endif
#
      if egvmax == 14.0
#
      if lcount == 2.0
      call DRAWVECX2
      endif
      if lcount == 3.0
      call DRAWVECX3
      endif
      if lcount == 4.0
      call DRAWVECX4
      endif
      if lcount == 5.0
      call DRAWVECX5
      endif
      if lcount == 6.0
      call DRAWVECX6
      endif
      if lcount == 7.0
      call DRAWVECX7
      endif
      if lcount == 8.0
      call DRAWVECX8
      endif
      if lcount == 9.0
      call DRAWVECX9
      endif
      if lcount == 10.0
      call DRAWVECX10
      endif
      if lcount == 11.0
      call DRAWVECX11
      endif
      if lcount == 12.0
      call DRAWVECX12
      endif
      call AEIGCANCX
#
      endif
#
      if egvmax == 15.0
#
      if lcount == 2.0
      call DRAWVECX2
      endif
      if lcount == 3.0
      call DRAWVECX3
      endif
      if lcount == 4.0
      call DRAWVECX4
      endif
      if lcount == 5.0
      call DRAWVECX5
      endif
      if lcount == 6.0
      call DRAWVECX6
      endif
      if lcount == 7.0
      call DRAWVECX7
      endif
      if lcount == 8.0
      call DRAWVECX8
      endif
      if lcount == 9.0
      call DRAWVECX9
      endif
      if lcount == 10.0
      call DRAWVECX10
      endif
      if lcount == 11.0
      call DRAWVECX11
      endif
      if lcount == 12.0
      call DRAWVECX12
      endif
      call AEIGCANCX
#
      endif
#
      if egvmax == 16.0
#
      if lcount == 2.0
      call DRAWVECX2
      endif
      if lcount == 3.0
      call DRAWVECX3
      endif
      if lcount == 4.0
      call DRAWVECX4
      endif
      if lcount == 5.0
      call DRAWVECX5
      endif
      if lcount == 6.0
      call DRAWVECX6
      endif
      if lcount == 7.0
      call DRAWVECX7
      endif
      if lcount == 8.0
      call DRAWVECX8
      endif
      if lcount == 9.0
      call DRAWVECX9
      endif
      if lcount == 10.0
      call DRAWVECX10
      endif
      if lcount == 11.0
      call DRAWVECX11
      endif
      if lcount == 12.0
      call DRAWVECX12
      endif
      call AEIGCANCX
#
      endif
#
      if egvmax == 17.0
#
      if lcount == 2.0
      call DRAWVECX2
      endif
      if lcount == 3.0
      call DRAWVECX3
      endif
      if lcount == 4.0
      call DRAWVECX4
      endif
      if lcount == 5.0
      call DRAWVECX5
      endif
      if lcount == 6.0
      call DRAWVECX6
      endif
      if lcount == 7.0
      call DRAWVECX7
      endif
      if lcount == 8.0
      call DRAWVECX8
      endif
      if lcount == 9.0
      call DRAWVECX9
      endif
      if lcount == 10.0
      call DRAWVECX10
      endif
      if lcount == 11.0
      call DRAWVECX11
      endif
      if lcount == 12.0
      call DRAWVECX12
      endif
      call AEIGCANCX
#
      endif
#
      if egvmax == 18.0
#
      if lcount == 2.0
      call DRAWVECX2
      endif
      if lcount == 3.0
      call DRAWVECX3
      endif
      if lcount == 4.0
      call DRAWVECX4
      endif
      if lcount == 5.0
      call DRAWVECX5
      endif
      if lcount == 6.0
      call DRAWVECX6
      endif
      if lcount == 7.0
      call DRAWVECX7
      endif
      if lcount == 8.0
      call DRAWVECX8
      endif
      if lcount == 9.0
      call DRAWVECX9
      endif
      if lcount == 10.0
      call DRAWVECX10
      endif
      if lcount == 11.0
      call DRAWVECX11
      endif
      if lcount == 12.0
      call DRAWVECX12
      endif
      call AEIGCANCX
#
      endif
#
      if egvmax == 19.0
#
      if lcount == 2.0
      call DRAWVECX2
      endif
      if lcount == 3.0
      call DRAWVECX3
      endif
      if lcount == 4.0
      call DRAWVECX4
      endif
      if lcount == 5.0
      call DRAWVECX5
      endif
      if lcount == 6.0
      call DRAWVECX6
      endif
      if lcount == 7.0
      call DRAWVECX7
      endif
      if lcount == 8.0
      call DRAWVECX8
      endif
      if lcount == 9.0
      call DRAWVECX9
      endif
      if lcount == 10.0
      call DRAWVECX10
      endif
      if lcount == 11.0
      call DRAWVECX11
      endif
      if lcount == 12.0
      call DRAWVECX12
      endif
      call AEIGCANCX
#
      endif
#
      if egvmax == 20.0
#
      if lcount == 2.0
      call DRAWVECX2
      endif
      if lcount == 3.0
      call DRAWVECX3
      endif
      if lcount == 4.0
      call DRAWVECX4
      endif
      if lcount == 5.0
      call DRAWVECX5
      endif
      if lcount == 6.0
      call DRAWVECX6
      endif
      if lcount == 7.0
      call DRAWVECX7
      endif
      if lcount == 8.0
      call DRAWVECX8
      endif
      if lcount == 9.0
      call DRAWVECX9
      endif
      if lcount == 10.0
      call DRAWVECX10
      endif
      if lcount == 11.0
      call DRAWVECX11
      endif
      if lcount == 12.0
      call DRAWVECX12
      endif
      call AEIGCANCX
#
      endif
#
     enddo spdim2
#
#
     ENDPROC FNDVECS
#======================================================
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#--end of script generated part of the code
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#======================================================
#
     PROC GSCHMIDT
#
#
#------2 vectors -------------------------------
#
     etemp2_1=V2_1
     etemp2_2=V2_2
     etemp2_3=V2_3
     etemp2_4=V2_4
     etemp2_5=V2_5
     etemp2_6=V2_6
     etemp2_7=V2_7
     etemp2_8=V2_8
     etemp2_9=V2_9
     etemp2_10=V2_10
     etemp2_11=V2_11
     etemp2_12=V2_12
     etemp2_13=V2_13
     etemp2_14=V2_14
     etemp2_15=V2_15
     etemp2_16=V2_16
     etemp2_17=V2_17
     etemp2_18=V2_18
     etemp2_19=V2_19
     etemp2_20=V2_20
#
     sqr=0.0
     etemp=V1_1*etemp2_1
     sqr+=etemp
     etemp=V1_2*etemp2_2
     sqr+=etemp
     etemp=V1_3*etemp2_3
     sqr+=etemp
     etemp=V1_4*etemp2_4
     sqr+=etemp
     etemp=V1_5*etemp2_5
     sqr+=etemp
     etemp=V1_6*etemp2_6
     sqr+=etemp
     etemp=V1_7*etemp2_7
     sqr+=etemp
     etemp=V1_8*etemp2_8
     sqr+=etemp
     etemp=V1_9*etemp2_9
     sqr+=etemp
     etemp=V1_10*etemp2_10
     sqr+=etemp
     etemp=V1_11*etemp2_11
     sqr+=etemp
     etemp=V1_12*etemp2_12
     sqr+=etemp
     etemp=V1_13*etemp2_13
     sqr+=etemp
     etemp=V1_14*etemp2_14
     sqr+=etemp
     etemp=V1_15*etemp2_15
     sqr+=etemp
     etemp=V1_16*etemp2_16
     sqr+=etemp
     etemp=V1_17*etemp2_17
     sqr+=etemp
     etemp=V1_18*etemp2_18
     sqr+=etemp
     etemp=V1_19*etemp2_19
     sqr+=etemp
     etemp=V1_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V1_1*sqr
     Vtemp_2=V1_2*sqr
     Vtemp_3=V1_3*sqr
     Vtemp_4=V1_4*sqr
     Vtemp_5=V1_5*sqr
     Vtemp_6=V1_6*sqr
     Vtemp_7=V1_7*sqr
     Vtemp_8=V1_8*sqr
     Vtemp_9=V1_9*sqr
     Vtemp_10=V1_10*sqr
     Vtemp_11=V1_11*sqr
     Vtemp_12=V1_12*sqr
     Vtemp_13=V1_13*sqr
     Vtemp_14=V1_14*sqr
     Vtemp_15=V1_15*sqr
     Vtemp_16=V1_16*sqr
     Vtemp_17=V1_17*sqr
     Vtemp_18=V1_18*sqr
     Vtemp_19=V1_19*sqr
     Vtemp_20=V1_20*sqr
#
     V2_1+=Vtemp_1
     V2_2+=Vtemp_2
     V2_3+=Vtemp_3
     V2_4+=Vtemp_4
     V2_5+=Vtemp_5
     V2_6+=Vtemp_6
     V2_7+=Vtemp_7
     V2_8+=Vtemp_8
     V2_9+=Vtemp_9
     V2_10+=Vtemp_10
     V2_11+=Vtemp_11
     V2_12+=Vtemp_12
     V2_13+=Vtemp_13
     V2_14+=Vtemp_14
     V2_15+=Vtemp_15
     V2_16+=Vtemp_16
     V2_17+=Vtemp_17
     V2_18+=Vtemp_18
     V2_19+=Vtemp_19
     V2_20+=Vtemp_20
#
#
     Vtemp_1=V2_1
     Vtemp_2=V2_2
     Vtemp_3=V2_3
     Vtemp_4=V2_4
     Vtemp_5=V2_5
     Vtemp_6=V2_6
     Vtemp_7=V2_7
     Vtemp_8=V2_8
     Vtemp_9=V2_9
     Vtemp_10=V2_10
     Vtemp_11=V2_11
     Vtemp_12=V2_12
     Vtemp_13=V2_13
     Vtemp_14=V2_14
     Vtemp_15=V2_15
     Vtemp_16=V2_16
     Vtemp_17=V2_17
     Vtemp_18=V2_18
     Vtemp_19=V2_19
     Vtemp_20=V2_20
#
     sqr=0.0
#
     etemp=V2_1*Vtemp_1
     sqr+=etemp
     etemp=V2_2*Vtemp_2
     sqr+=etemp
     etemp=V2_3*Vtemp_3
     sqr+=etemp
     etemp=V2_4*Vtemp_4
     sqr+=etemp
     etemp=V2_5*Vtemp_5
     sqr+=etemp
     etemp=V2_6*Vtemp_6
     sqr+=etemp
     etemp=V2_7*Vtemp_7
     sqr+=etemp
     etemp=V2_8*Vtemp_8
     sqr+=etemp
     etemp=V2_9*Vtemp_9
     sqr+=etemp
     etemp=V2_10*Vtemp_10
     sqr+=etemp
     etemp=V2_11*Vtemp_11
     sqr+=etemp
     etemp=V2_12*Vtemp_12
     sqr+=etemp
     etemp=V2_13*Vtemp_13
     sqr+=etemp
     etemp=V2_14*Vtemp_14
     sqr+=etemp
     etemp=V2_15*Vtemp_15
     sqr+=etemp
     etemp=V2_16*Vtemp_16
     sqr+=etemp
     etemp=V2_17*Vtemp_17
     sqr+=etemp
     etemp=V2_18*Vtemp_18
     sqr+=etemp
     etemp=V2_19*Vtemp_19
     sqr+=etemp
     etemp=V2_20*Vtemp_20
     sqr+=etemp
#
#       exponent=0.5
#       execute square_root sqr exponent
#       sqr2=1.0/sqr
     execute norm_fac sqr exponent
     sqr2=sqr
#
     V2_1*=sqr2
     V2_2*=sqr2
     V2_3*=sqr2
     V2_4*=sqr2
     V2_5*=sqr2
     V2_6*=sqr2
     V2_7*=sqr2
     V2_8*=sqr2
     V2_9*=sqr2
     V2_10*=sqr2
     V2_11*=sqr2
     V2_12*=sqr2
     V2_13*=sqr2
     V2_14*=sqr2
     V2_15*=sqr2
     V2_16*=sqr2
     V2_17*=sqr2
     V2_18*=sqr2
     V2_19*=sqr2
     V2_20*=sqr2
#
#------3 vectors -------------------------------
#
     etemp2_1=V3_1
     etemp2_2=V3_2
     etemp2_3=V3_3
     etemp2_4=V3_4
     etemp2_5=V3_5
     etemp2_6=V3_6
     etemp2_7=V3_7
     etemp2_8=V3_8
     etemp2_9=V3_9
     etemp2_10=V3_10
     etemp2_11=V3_11
     etemp2_12=V3_12
     etemp2_13=V3_13
     etemp2_14=V3_14
     etemp2_15=V3_15
     etemp2_16=V3_16
     etemp2_17=V3_17
     etemp2_18=V3_18
     etemp2_19=V3_19
     etemp2_20=V3_20
#
     sqr=0.0
     etemp=V1_1*etemp2_1
     sqr+=etemp
     etemp=V1_2*etemp2_2
     sqr+=etemp
     etemp=V1_3*etemp2_3
     sqr+=etemp
     etemp=V1_4*etemp2_4
     sqr+=etemp
     etemp=V1_5*etemp2_5
     sqr+=etemp
     etemp=V1_6*etemp2_6
     sqr+=etemp
     etemp=V1_7*etemp2_7
     sqr+=etemp
     etemp=V1_8*etemp2_8
     sqr+=etemp
     etemp=V1_9*etemp2_9
     sqr+=etemp
     etemp=V1_10*etemp2_10
     sqr+=etemp
     etemp=V1_11*etemp2_11
     sqr+=etemp
     etemp=V1_12*etemp2_12
     sqr+=etemp
     etemp=V1_13*etemp2_13
     sqr+=etemp
     etemp=V1_14*etemp2_14
     sqr+=etemp
     etemp=V1_15*etemp2_15
     sqr+=etemp
     etemp=V1_16*etemp2_16
     sqr+=etemp
     etemp=V1_17*etemp2_17
     sqr+=etemp
     etemp=V1_18*etemp2_18
     sqr+=etemp
     etemp=V1_19*etemp2_19
     sqr+=etemp
     etemp=V1_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V1_1*sqr
     Vtemp_2=V1_2*sqr
     Vtemp_3=V1_3*sqr
     Vtemp_4=V1_4*sqr
     Vtemp_5=V1_5*sqr
     Vtemp_6=V1_6*sqr
     Vtemp_7=V1_7*sqr
     Vtemp_8=V1_8*sqr
     Vtemp_9=V1_9*sqr
     Vtemp_10=V1_10*sqr
     Vtemp_11=V1_11*sqr
     Vtemp_12=V1_12*sqr
     Vtemp_13=V1_13*sqr
     Vtemp_14=V1_14*sqr
     Vtemp_15=V1_15*sqr
     Vtemp_16=V1_16*sqr
     Vtemp_17=V1_17*sqr
     Vtemp_18=V1_18*sqr
     Vtemp_19=V1_19*sqr
     Vtemp_20=V1_20*sqr
#
     V3_1+=Vtemp_1
     V3_2+=Vtemp_2
     V3_3+=Vtemp_3
     V3_4+=Vtemp_4
     V3_5+=Vtemp_5
     V3_6+=Vtemp_6
     V3_7+=Vtemp_7
     V3_8+=Vtemp_8
     V3_9+=Vtemp_9
     V3_10+=Vtemp_10
     V3_11+=Vtemp_11
     V3_12+=Vtemp_12
     V3_13+=Vtemp_13
     V3_14+=Vtemp_14
     V3_15+=Vtemp_15
     V3_16+=Vtemp_16
     V3_17+=Vtemp_17
     V3_18+=Vtemp_18
     V3_19+=Vtemp_19
     V3_20+=Vtemp_20
#
#
     etemp2_1=V3_1
     etemp2_2=V3_2
     etemp2_3=V3_3
     etemp2_4=V3_4
     etemp2_5=V3_5
     etemp2_6=V3_6
     etemp2_7=V3_7
     etemp2_8=V3_8
     etemp2_9=V3_9
     etemp2_10=V3_10
     etemp2_11=V3_11
     etemp2_12=V3_12
     etemp2_13=V3_13
     etemp2_14=V3_14
     etemp2_15=V3_15
     etemp2_16=V3_16
     etemp2_17=V3_17
     etemp2_18=V3_18
     etemp2_19=V3_19
     etemp2_20=V3_20
#
     sqr=0.0
     etemp=V2_1*etemp2_1
     sqr+=etemp
     etemp=V2_2*etemp2_2
     sqr+=etemp
     etemp=V2_3*etemp2_3
     sqr+=etemp
     etemp=V2_4*etemp2_4
     sqr+=etemp
     etemp=V2_5*etemp2_5
     sqr+=etemp
     etemp=V2_6*etemp2_6
     sqr+=etemp
     etemp=V2_7*etemp2_7
     sqr+=etemp
     etemp=V2_8*etemp2_8
     sqr+=etemp
     etemp=V2_9*etemp2_9
     sqr+=etemp
     etemp=V2_10*etemp2_10
     sqr+=etemp
     etemp=V2_11*etemp2_11
     sqr+=etemp
     etemp=V2_12*etemp2_12
     sqr+=etemp
     etemp=V2_13*etemp2_13
     sqr+=etemp
     etemp=V2_14*etemp2_14
     sqr+=etemp
     etemp=V2_15*etemp2_15
     sqr+=etemp
     etemp=V2_16*etemp2_16
     sqr+=etemp
     etemp=V2_17*etemp2_17
     sqr+=etemp
     etemp=V2_18*etemp2_18
     sqr+=etemp
     etemp=V2_19*etemp2_19
     sqr+=etemp
     etemp=V2_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V2_1*sqr
     Vtemp_2=V2_2*sqr
     Vtemp_3=V2_3*sqr
     Vtemp_4=V2_4*sqr
     Vtemp_5=V2_5*sqr
     Vtemp_6=V2_6*sqr
     Vtemp_7=V2_7*sqr
     Vtemp_8=V2_8*sqr
     Vtemp_9=V2_9*sqr
     Vtemp_10=V2_10*sqr
     Vtemp_11=V2_11*sqr
     Vtemp_12=V2_12*sqr
     Vtemp_13=V2_13*sqr
     Vtemp_14=V2_14*sqr
     Vtemp_15=V2_15*sqr
     Vtemp_16=V2_16*sqr
     Vtemp_17=V2_17*sqr
     Vtemp_18=V2_18*sqr
     Vtemp_19=V2_19*sqr
     Vtemp_20=V2_20*sqr
#
     V3_1+=Vtemp_1
     V3_2+=Vtemp_2
     V3_3+=Vtemp_3
     V3_4+=Vtemp_4
     V3_5+=Vtemp_5
     V3_6+=Vtemp_6
     V3_7+=Vtemp_7
     V3_8+=Vtemp_8
     V3_9+=Vtemp_9
     V3_10+=Vtemp_10
     V3_11+=Vtemp_11
     V3_12+=Vtemp_12
     V3_13+=Vtemp_13
     V3_14+=Vtemp_14
     V3_15+=Vtemp_15
     V3_16+=Vtemp_16
     V3_17+=Vtemp_17
     V3_18+=Vtemp_18
     V3_19+=Vtemp_19
     V3_20+=Vtemp_20
#
#
     Vtemp_1=V3_1
     Vtemp_2=V3_2
     Vtemp_3=V3_3
     Vtemp_4=V3_4
     Vtemp_5=V3_5
     Vtemp_6=V3_6
     Vtemp_7=V3_7
     Vtemp_8=V3_8
     Vtemp_9=V3_9
     Vtemp_10=V3_10
     Vtemp_11=V3_11
     Vtemp_12=V3_12
     Vtemp_13=V3_13
     Vtemp_14=V3_14
     Vtemp_15=V3_15
     Vtemp_16=V3_16
     Vtemp_17=V3_17
     Vtemp_18=V3_18
     Vtemp_19=V3_19
     Vtemp_20=V3_20
#
     sqr=0.0
#
     etemp=V3_1*Vtemp_1
     sqr+=etemp
     etemp=V3_2*Vtemp_2
     sqr+=etemp
     etemp=V3_3*Vtemp_3
     sqr+=etemp
     etemp=V3_4*Vtemp_4
     sqr+=etemp
     etemp=V3_5*Vtemp_5
     sqr+=etemp
     etemp=V3_6*Vtemp_6
     sqr+=etemp
     etemp=V3_7*Vtemp_7
     sqr+=etemp
     etemp=V3_8*Vtemp_8
     sqr+=etemp
     etemp=V3_9*Vtemp_9
     sqr+=etemp
     etemp=V3_10*Vtemp_10
     sqr+=etemp
     etemp=V3_11*Vtemp_11
     sqr+=etemp
     etemp=V3_12*Vtemp_12
     sqr+=etemp
     etemp=V3_13*Vtemp_13
     sqr+=etemp
     etemp=V3_14*Vtemp_14
     sqr+=etemp
     etemp=V3_15*Vtemp_15
     sqr+=etemp
     etemp=V3_16*Vtemp_16
     sqr+=etemp
     etemp=V3_17*Vtemp_17
     sqr+=etemp
     etemp=V3_18*Vtemp_18
     sqr+=etemp
     etemp=V3_19*Vtemp_19
     sqr+=etemp
     etemp=V3_20*Vtemp_20
     sqr+=etemp
#
       exponent=0.5
#       execute square_root sqr exponent
#       sqr2=1.0/sqr
     execute norm_fac sqr exponent
     sqr2=sqr
#
     V3_1*=sqr2
     V3_2*=sqr2
     V3_3*=sqr2
     V3_4*=sqr2
     V3_5*=sqr2
     V3_6*=sqr2
     V3_7*=sqr2
     V3_8*=sqr2
     V3_9*=sqr2
     V3_10*=sqr2
     V3_11*=sqr2
     V3_12*=sqr2
     V3_13*=sqr2
     V3_14*=sqr2
     V3_15*=sqr2
     V3_16*=sqr2
     V3_17*=sqr2
     V3_18*=sqr2
     V3_19*=sqr2
     V3_20*=sqr2
#
#------4 vectors -------------------------------
#
     etemp2_1=V4_1
     etemp2_2=V4_2
     etemp2_3=V4_3
     etemp2_4=V4_4
     etemp2_5=V4_5
     etemp2_6=V4_6
     etemp2_7=V4_7
     etemp2_8=V4_8
     etemp2_9=V4_9
     etemp2_10=V4_10
     etemp2_11=V4_11
     etemp2_12=V4_12
     etemp2_13=V4_13
     etemp2_14=V4_14
     etemp2_15=V4_15
     etemp2_16=V4_16
     etemp2_17=V4_17
     etemp2_18=V4_18
     etemp2_19=V4_19
     etemp2_20=V4_20
#
     sqr=0.0
     etemp=V1_1*etemp2_1
     sqr+=etemp
     etemp=V1_2*etemp2_2
     sqr+=etemp
     etemp=V1_3*etemp2_3
     sqr+=etemp
     etemp=V1_4*etemp2_4
     sqr+=etemp
     etemp=V1_5*etemp2_5
     sqr+=etemp
     etemp=V1_6*etemp2_6
     sqr+=etemp
     etemp=V1_7*etemp2_7
     sqr+=etemp
     etemp=V1_8*etemp2_8
     sqr+=etemp
     etemp=V1_9*etemp2_9
     sqr+=etemp
     etemp=V1_10*etemp2_10
     sqr+=etemp
     etemp=V1_11*etemp2_11
     sqr+=etemp
     etemp=V1_12*etemp2_12
     sqr+=etemp
     etemp=V1_13*etemp2_13
     sqr+=etemp
     etemp=V1_14*etemp2_14
     sqr+=etemp
     etemp=V1_15*etemp2_15
     sqr+=etemp
     etemp=V1_16*etemp2_16
     sqr+=etemp
     etemp=V1_17*etemp2_17
     sqr+=etemp
     etemp=V1_18*etemp2_18
     sqr+=etemp
     etemp=V1_19*etemp2_19
     sqr+=etemp
     etemp=V1_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V1_1*sqr
     Vtemp_2=V1_2*sqr
     Vtemp_3=V1_3*sqr
     Vtemp_4=V1_4*sqr
     Vtemp_5=V1_5*sqr
     Vtemp_6=V1_6*sqr
     Vtemp_7=V1_7*sqr
     Vtemp_8=V1_8*sqr
     Vtemp_9=V1_9*sqr
     Vtemp_10=V1_10*sqr
     Vtemp_11=V1_11*sqr
     Vtemp_12=V1_12*sqr
     Vtemp_13=V1_13*sqr
     Vtemp_14=V1_14*sqr
     Vtemp_15=V1_15*sqr
     Vtemp_16=V1_16*sqr
     Vtemp_17=V1_17*sqr
     Vtemp_18=V1_18*sqr
     Vtemp_19=V1_19*sqr
     Vtemp_20=V1_20*sqr
#
     V4_1+=Vtemp_1
     V4_2+=Vtemp_2
     V4_3+=Vtemp_3
     V4_4+=Vtemp_4
     V4_5+=Vtemp_5
     V4_6+=Vtemp_6
     V4_7+=Vtemp_7
     V4_8+=Vtemp_8
     V4_9+=Vtemp_9
     V4_10+=Vtemp_10
     V4_11+=Vtemp_11
     V4_12+=Vtemp_12
     V4_13+=Vtemp_13
     V4_14+=Vtemp_14
     V4_15+=Vtemp_15
     V4_16+=Vtemp_16
     V4_17+=Vtemp_17
     V4_18+=Vtemp_18
     V4_19+=Vtemp_19
     V4_20+=Vtemp_20
#
#
     etemp2_1=V4_1
     etemp2_2=V4_2
     etemp2_3=V4_3
     etemp2_4=V4_4
     etemp2_5=V4_5
     etemp2_6=V4_6
     etemp2_7=V4_7
     etemp2_8=V4_8
     etemp2_9=V4_9
     etemp2_10=V4_10
     etemp2_11=V4_11
     etemp2_12=V4_12
     etemp2_13=V4_13
     etemp2_14=V4_14
     etemp2_15=V4_15
     etemp2_16=V4_16
     etemp2_17=V4_17
     etemp2_18=V4_18
     etemp2_19=V4_19
     etemp2_20=V4_20
#
     sqr=0.0
     etemp=V2_1*etemp2_1
     sqr+=etemp
     etemp=V2_2*etemp2_2
     sqr+=etemp
     etemp=V2_3*etemp2_3
     sqr+=etemp
     etemp=V2_4*etemp2_4
     sqr+=etemp
     etemp=V2_5*etemp2_5
     sqr+=etemp
     etemp=V2_6*etemp2_6
     sqr+=etemp
     etemp=V2_7*etemp2_7
     sqr+=etemp
     etemp=V2_8*etemp2_8
     sqr+=etemp
     etemp=V2_9*etemp2_9
     sqr+=etemp
     etemp=V2_10*etemp2_10
     sqr+=etemp
     etemp=V2_11*etemp2_11
     sqr+=etemp
     etemp=V2_12*etemp2_12
     sqr+=etemp
     etemp=V2_13*etemp2_13
     sqr+=etemp
     etemp=V2_14*etemp2_14
     sqr+=etemp
     etemp=V2_15*etemp2_15
     sqr+=etemp
     etemp=V2_16*etemp2_16
     sqr+=etemp
     etemp=V2_17*etemp2_17
     sqr+=etemp
     etemp=V2_18*etemp2_18
     sqr+=etemp
     etemp=V2_19*etemp2_19
     sqr+=etemp
     etemp=V2_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V2_1*sqr
     Vtemp_2=V2_2*sqr
     Vtemp_3=V2_3*sqr
     Vtemp_4=V2_4*sqr
     Vtemp_5=V2_5*sqr
     Vtemp_6=V2_6*sqr
     Vtemp_7=V2_7*sqr
     Vtemp_8=V2_8*sqr
     Vtemp_9=V2_9*sqr
     Vtemp_10=V2_10*sqr
     Vtemp_11=V2_11*sqr
     Vtemp_12=V2_12*sqr
     Vtemp_13=V2_13*sqr
     Vtemp_14=V2_14*sqr
     Vtemp_15=V2_15*sqr
     Vtemp_16=V2_16*sqr
     Vtemp_17=V2_17*sqr
     Vtemp_18=V2_18*sqr
     Vtemp_19=V2_19*sqr
     Vtemp_20=V2_20*sqr
#
     V4_1+=Vtemp_1
     V4_2+=Vtemp_2
     V4_3+=Vtemp_3
     V4_4+=Vtemp_4
     V4_5+=Vtemp_5
     V4_6+=Vtemp_6
     V4_7+=Vtemp_7
     V4_8+=Vtemp_8
     V4_9+=Vtemp_9
     V4_10+=Vtemp_10
     V4_11+=Vtemp_11
     V4_12+=Vtemp_12
     V4_13+=Vtemp_13
     V4_14+=Vtemp_14
     V4_15+=Vtemp_15
     V4_16+=Vtemp_16
     V4_17+=Vtemp_17
     V4_18+=Vtemp_18
     V4_19+=Vtemp_19
     V4_20+=Vtemp_20
#
#
     etemp2_1=V4_1
     etemp2_2=V4_2
     etemp2_3=V4_3
     etemp2_4=V4_4
     etemp2_5=V4_5
     etemp2_6=V4_6
     etemp2_7=V4_7
     etemp2_8=V4_8
     etemp2_9=V4_9
     etemp2_10=V4_10
     etemp2_11=V4_11
     etemp2_12=V4_12
     etemp2_13=V4_13
     etemp2_14=V4_14
     etemp2_15=V4_15
     etemp2_16=V4_16
     etemp2_17=V4_17
     etemp2_18=V4_18
     etemp2_19=V4_19
     etemp2_20=V4_20
#
     sqr=0.0
     etemp=V3_1*etemp2_1
     sqr+=etemp
     etemp=V3_2*etemp2_2
     sqr+=etemp
     etemp=V3_3*etemp2_3
     sqr+=etemp
     etemp=V3_4*etemp2_4
     sqr+=etemp
     etemp=V3_5*etemp2_5
     sqr+=etemp
     etemp=V3_6*etemp2_6
     sqr+=etemp
     etemp=V3_7*etemp2_7
     sqr+=etemp
     etemp=V3_8*etemp2_8
     sqr+=etemp
     etemp=V3_9*etemp2_9
     sqr+=etemp
     etemp=V3_10*etemp2_10
     sqr+=etemp
     etemp=V3_11*etemp2_11
     sqr+=etemp
     etemp=V3_12*etemp2_12
     sqr+=etemp
     etemp=V3_13*etemp2_13
     sqr+=etemp
     etemp=V3_14*etemp2_14
     sqr+=etemp
     etemp=V3_15*etemp2_15
     sqr+=etemp
     etemp=V3_16*etemp2_16
     sqr+=etemp
     etemp=V3_17*etemp2_17
     sqr+=etemp
     etemp=V3_18*etemp2_18
     sqr+=etemp
     etemp=V3_19*etemp2_19
     sqr+=etemp
     etemp=V3_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V3_1*sqr
     Vtemp_2=V3_2*sqr
     Vtemp_3=V3_3*sqr
     Vtemp_4=V3_4*sqr
     Vtemp_5=V3_5*sqr
     Vtemp_6=V3_6*sqr
     Vtemp_7=V3_7*sqr
     Vtemp_8=V3_8*sqr
     Vtemp_9=V3_9*sqr
     Vtemp_10=V3_10*sqr
     Vtemp_11=V3_11*sqr
     Vtemp_12=V3_12*sqr
     Vtemp_13=V3_13*sqr
     Vtemp_14=V3_14*sqr
     Vtemp_15=V3_15*sqr
     Vtemp_16=V3_16*sqr
     Vtemp_17=V3_17*sqr
     Vtemp_18=V3_18*sqr
     Vtemp_19=V3_19*sqr
     Vtemp_20=V3_20*sqr
#
     V4_1+=Vtemp_1
     V4_2+=Vtemp_2
     V4_3+=Vtemp_3
     V4_4+=Vtemp_4
     V4_5+=Vtemp_5
     V4_6+=Vtemp_6
     V4_7+=Vtemp_7
     V4_8+=Vtemp_8
     V4_9+=Vtemp_9
     V4_10+=Vtemp_10
     V4_11+=Vtemp_11
     V4_12+=Vtemp_12
     V4_13+=Vtemp_13
     V4_14+=Vtemp_14
     V4_15+=Vtemp_15
     V4_16+=Vtemp_16
     V4_17+=Vtemp_17
     V4_18+=Vtemp_18
     V4_19+=Vtemp_19
     V4_20+=Vtemp_20
#
#
     Vtemp_1=V4_1
     Vtemp_2=V4_2
     Vtemp_3=V4_3
     Vtemp_4=V4_4
     Vtemp_5=V4_5
     Vtemp_6=V4_6
     Vtemp_7=V4_7
     Vtemp_8=V4_8
     Vtemp_9=V4_9
     Vtemp_10=V4_10
     Vtemp_11=V4_11
     Vtemp_12=V4_12
     Vtemp_13=V4_13
     Vtemp_14=V4_14
     Vtemp_15=V4_15
     Vtemp_16=V4_16
     Vtemp_17=V4_17
     Vtemp_18=V4_18
     Vtemp_19=V4_19
     Vtemp_20=V4_20
#
     sqr=0.0
#
     etemp=V4_1*Vtemp_1
     sqr+=etemp
     etemp=V4_2*Vtemp_2
     sqr+=etemp
     etemp=V4_3*Vtemp_3
     sqr+=etemp
     etemp=V4_4*Vtemp_4
     sqr+=etemp
     etemp=V4_5*Vtemp_5
     sqr+=etemp
     etemp=V4_6*Vtemp_6
     sqr+=etemp
     etemp=V4_7*Vtemp_7
     sqr+=etemp
     etemp=V4_8*Vtemp_8
     sqr+=etemp
     etemp=V4_9*Vtemp_9
     sqr+=etemp
     etemp=V4_10*Vtemp_10
     sqr+=etemp
     etemp=V4_11*Vtemp_11
     sqr+=etemp
     etemp=V4_12*Vtemp_12
     sqr+=etemp
     etemp=V4_13*Vtemp_13
     sqr+=etemp
     etemp=V4_14*Vtemp_14
     sqr+=etemp
     etemp=V4_15*Vtemp_15
     sqr+=etemp
     etemp=V4_16*Vtemp_16
     sqr+=etemp
     etemp=V4_17*Vtemp_17
     sqr+=etemp
     etemp=V4_18*Vtemp_18
     sqr+=etemp
     etemp=V4_19*Vtemp_19
     sqr+=etemp
     etemp=V4_20*Vtemp_20
     sqr+=etemp
#
       exponent=0.5
#       execute square_root sqr exponent
#       sqr2=1.0/sqr
     execute norm_fac sqr exponent
     sqr2=sqr
#
     V4_1*=sqr2
     V4_2*=sqr2
     V4_3*=sqr2
     V4_4*=sqr2
     V4_5*=sqr2
     V4_6*=sqr2
     V4_7*=sqr2
     V4_8*=sqr2
     V4_9*=sqr2
     V4_10*=sqr2
     V4_11*=sqr2
     V4_12*=sqr2
     V4_13*=sqr2
     V4_14*=sqr2
     V4_15*=sqr2
     V4_16*=sqr2
     V4_17*=sqr2
     V4_18*=sqr2
     V4_19*=sqr2
     V4_20*=sqr2
#
#------5 vectors -------------------------------
#
     etemp2_1=V5_1
     etemp2_2=V5_2
     etemp2_3=V5_3
     etemp2_4=V5_4
     etemp2_5=V5_5
     etemp2_6=V5_6
     etemp2_7=V5_7
     etemp2_8=V5_8
     etemp2_9=V5_9
     etemp2_10=V5_10
     etemp2_11=V5_11
     etemp2_12=V5_12
     etemp2_13=V5_13
     etemp2_14=V5_14
     etemp2_15=V5_15
     etemp2_16=V5_16
     etemp2_17=V5_17
     etemp2_18=V5_18
     etemp2_19=V5_19
     etemp2_20=V5_20
#
     sqr=0.0
     etemp=V1_1*etemp2_1
     sqr+=etemp
     etemp=V1_2*etemp2_2
     sqr+=etemp
     etemp=V1_3*etemp2_3
     sqr+=etemp
     etemp=V1_4*etemp2_4
     sqr+=etemp
     etemp=V1_5*etemp2_5
     sqr+=etemp
     etemp=V1_6*etemp2_6
     sqr+=etemp
     etemp=V1_7*etemp2_7
     sqr+=etemp
     etemp=V1_8*etemp2_8
     sqr+=etemp
     etemp=V1_9*etemp2_9
     sqr+=etemp
     etemp=V1_10*etemp2_10
     sqr+=etemp
     etemp=V1_11*etemp2_11
     sqr+=etemp
     etemp=V1_12*etemp2_12
     sqr+=etemp
     etemp=V1_13*etemp2_13
     sqr+=etemp
     etemp=V1_14*etemp2_14
     sqr+=etemp
     etemp=V1_15*etemp2_15
     sqr+=etemp
     etemp=V1_16*etemp2_16
     sqr+=etemp
     etemp=V1_17*etemp2_17
     sqr+=etemp
     etemp=V1_18*etemp2_18
     sqr+=etemp
     etemp=V1_19*etemp2_19
     sqr+=etemp
     etemp=V1_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V1_1*sqr
     Vtemp_2=V1_2*sqr
     Vtemp_3=V1_3*sqr
     Vtemp_4=V1_4*sqr
     Vtemp_5=V1_5*sqr
     Vtemp_6=V1_6*sqr
     Vtemp_7=V1_7*sqr
     Vtemp_8=V1_8*sqr
     Vtemp_9=V1_9*sqr
     Vtemp_10=V1_10*sqr
     Vtemp_11=V1_11*sqr
     Vtemp_12=V1_12*sqr
     Vtemp_13=V1_13*sqr
     Vtemp_14=V1_14*sqr
     Vtemp_15=V1_15*sqr
     Vtemp_16=V1_16*sqr
     Vtemp_17=V1_17*sqr
     Vtemp_18=V1_18*sqr
     Vtemp_19=V1_19*sqr
     Vtemp_20=V1_20*sqr
#
     V5_1+=Vtemp_1
     V5_2+=Vtemp_2
     V5_3+=Vtemp_3
     V5_4+=Vtemp_4
     V5_5+=Vtemp_5
     V5_6+=Vtemp_6
     V5_7+=Vtemp_7
     V5_8+=Vtemp_8
     V5_9+=Vtemp_9
     V5_10+=Vtemp_10
     V5_11+=Vtemp_11
     V5_12+=Vtemp_12
     V5_13+=Vtemp_13
     V5_14+=Vtemp_14
     V5_15+=Vtemp_15
     V5_16+=Vtemp_16
     V5_17+=Vtemp_17
     V5_18+=Vtemp_18
     V5_19+=Vtemp_19
     V5_20+=Vtemp_20
#
#
     etemp2_1=V5_1
     etemp2_2=V5_2
     etemp2_3=V5_3
     etemp2_4=V5_4
     etemp2_5=V5_5
     etemp2_6=V5_6
     etemp2_7=V5_7
     etemp2_8=V5_8
     etemp2_9=V5_9
     etemp2_10=V5_10
     etemp2_11=V5_11
     etemp2_12=V5_12
     etemp2_13=V5_13
     etemp2_14=V5_14
     etemp2_15=V5_15
     etemp2_16=V5_16
     etemp2_17=V5_17
     etemp2_18=V5_18
     etemp2_19=V5_19
     etemp2_20=V5_20
#
     sqr=0.0
     etemp=V2_1*etemp2_1
     sqr+=etemp
     etemp=V2_2*etemp2_2
     sqr+=etemp
     etemp=V2_3*etemp2_3
     sqr+=etemp
     etemp=V2_4*etemp2_4
     sqr+=etemp
     etemp=V2_5*etemp2_5
     sqr+=etemp
     etemp=V2_6*etemp2_6
     sqr+=etemp
     etemp=V2_7*etemp2_7
     sqr+=etemp
     etemp=V2_8*etemp2_8
     sqr+=etemp
     etemp=V2_9*etemp2_9
     sqr+=etemp
     etemp=V2_10*etemp2_10
     sqr+=etemp
     etemp=V2_11*etemp2_11
     sqr+=etemp
     etemp=V2_12*etemp2_12
     sqr+=etemp
     etemp=V2_13*etemp2_13
     sqr+=etemp
     etemp=V2_14*etemp2_14
     sqr+=etemp
     etemp=V2_15*etemp2_15
     sqr+=etemp
     etemp=V2_16*etemp2_16
     sqr+=etemp
     etemp=V2_17*etemp2_17
     sqr+=etemp
     etemp=V2_18*etemp2_18
     sqr+=etemp
     etemp=V2_19*etemp2_19
     sqr+=etemp
     etemp=V2_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V2_1*sqr
     Vtemp_2=V2_2*sqr
     Vtemp_3=V2_3*sqr
     Vtemp_4=V2_4*sqr
     Vtemp_5=V2_5*sqr
     Vtemp_6=V2_6*sqr
     Vtemp_7=V2_7*sqr
     Vtemp_8=V2_8*sqr
     Vtemp_9=V2_9*sqr
     Vtemp_10=V2_10*sqr
     Vtemp_11=V2_11*sqr
     Vtemp_12=V2_12*sqr
     Vtemp_13=V2_13*sqr
     Vtemp_14=V2_14*sqr
     Vtemp_15=V2_15*sqr
     Vtemp_16=V2_16*sqr
     Vtemp_17=V2_17*sqr
     Vtemp_18=V2_18*sqr
     Vtemp_19=V2_19*sqr
     Vtemp_20=V2_20*sqr
#
     V5_1+=Vtemp_1
     V5_2+=Vtemp_2
     V5_3+=Vtemp_3
     V5_4+=Vtemp_4
     V5_5+=Vtemp_5
     V5_6+=Vtemp_6
     V5_7+=Vtemp_7
     V5_8+=Vtemp_8
     V5_9+=Vtemp_9
     V5_10+=Vtemp_10
     V5_11+=Vtemp_11
     V5_12+=Vtemp_12
     V5_13+=Vtemp_13
     V5_14+=Vtemp_14
     V5_15+=Vtemp_15
     V5_16+=Vtemp_16
     V5_17+=Vtemp_17
     V5_18+=Vtemp_18
     V5_19+=Vtemp_19
     V5_20+=Vtemp_20
#
#
     etemp2_1=V5_1
     etemp2_2=V5_2
     etemp2_3=V5_3
     etemp2_4=V5_4
     etemp2_5=V5_5
     etemp2_6=V5_6
     etemp2_7=V5_7
     etemp2_8=V5_8
     etemp2_9=V5_9
     etemp2_10=V5_10
     etemp2_11=V5_11
     etemp2_12=V5_12
     etemp2_13=V5_13
     etemp2_14=V5_14
     etemp2_15=V5_15
     etemp2_16=V5_16
     etemp2_17=V5_17
     etemp2_18=V5_18
     etemp2_19=V5_19
     etemp2_20=V5_20
#
     sqr=0.0
     etemp=V3_1*etemp2_1
     sqr+=etemp
     etemp=V3_2*etemp2_2
     sqr+=etemp
     etemp=V3_3*etemp2_3
     sqr+=etemp
     etemp=V3_4*etemp2_4
     sqr+=etemp
     etemp=V3_5*etemp2_5
     sqr+=etemp
     etemp=V3_6*etemp2_6
     sqr+=etemp
     etemp=V3_7*etemp2_7
     sqr+=etemp
     etemp=V3_8*etemp2_8
     sqr+=etemp
     etemp=V3_9*etemp2_9
     sqr+=etemp
     etemp=V3_10*etemp2_10
     sqr+=etemp
     etemp=V3_11*etemp2_11
     sqr+=etemp
     etemp=V3_12*etemp2_12
     sqr+=etemp
     etemp=V3_13*etemp2_13
     sqr+=etemp
     etemp=V3_14*etemp2_14
     sqr+=etemp
     etemp=V3_15*etemp2_15
     sqr+=etemp
     etemp=V3_16*etemp2_16
     sqr+=etemp
     etemp=V3_17*etemp2_17
     sqr+=etemp
     etemp=V3_18*etemp2_18
     sqr+=etemp
     etemp=V3_19*etemp2_19
     sqr+=etemp
     etemp=V3_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V3_1*sqr
     Vtemp_2=V3_2*sqr
     Vtemp_3=V3_3*sqr
     Vtemp_4=V3_4*sqr
     Vtemp_5=V3_5*sqr
     Vtemp_6=V3_6*sqr
     Vtemp_7=V3_7*sqr
     Vtemp_8=V3_8*sqr
     Vtemp_9=V3_9*sqr
     Vtemp_10=V3_10*sqr
     Vtemp_11=V3_11*sqr
     Vtemp_12=V3_12*sqr
     Vtemp_13=V3_13*sqr
     Vtemp_14=V3_14*sqr
     Vtemp_15=V3_15*sqr
     Vtemp_16=V3_16*sqr
     Vtemp_17=V3_17*sqr
     Vtemp_18=V3_18*sqr
     Vtemp_19=V3_19*sqr
     Vtemp_20=V3_20*sqr
#
     V5_1+=Vtemp_1
     V5_2+=Vtemp_2
     V5_3+=Vtemp_3
     V5_4+=Vtemp_4
     V5_5+=Vtemp_5
     V5_6+=Vtemp_6
     V5_7+=Vtemp_7
     V5_8+=Vtemp_8
     V5_9+=Vtemp_9
     V5_10+=Vtemp_10
     V5_11+=Vtemp_11
     V5_12+=Vtemp_12
     V5_13+=Vtemp_13
     V5_14+=Vtemp_14
     V5_15+=Vtemp_15
     V5_16+=Vtemp_16
     V5_17+=Vtemp_17
     V5_18+=Vtemp_18
     V5_19+=Vtemp_19
     V5_20+=Vtemp_20
#
#
     etemp2_1=V5_1
     etemp2_2=V5_2
     etemp2_3=V5_3
     etemp2_4=V5_4
     etemp2_5=V5_5
     etemp2_6=V5_6
     etemp2_7=V5_7
     etemp2_8=V5_8
     etemp2_9=V5_9
     etemp2_10=V5_10
     etemp2_11=V5_11
     etemp2_12=V5_12
     etemp2_13=V5_13
     etemp2_14=V5_14
     etemp2_15=V5_15
     etemp2_16=V5_16
     etemp2_17=V5_17
     etemp2_18=V5_18
     etemp2_19=V5_19
     etemp2_20=V5_20
#
     sqr=0.0
     etemp=V4_1*etemp2_1
     sqr+=etemp
     etemp=V4_2*etemp2_2
     sqr+=etemp
     etemp=V4_3*etemp2_3
     sqr+=etemp
     etemp=V4_4*etemp2_4
     sqr+=etemp
     etemp=V4_5*etemp2_5
     sqr+=etemp
     etemp=V4_6*etemp2_6
     sqr+=etemp
     etemp=V4_7*etemp2_7
     sqr+=etemp
     etemp=V4_8*etemp2_8
     sqr+=etemp
     etemp=V4_9*etemp2_9
     sqr+=etemp
     etemp=V4_10*etemp2_10
     sqr+=etemp
     etemp=V4_11*etemp2_11
     sqr+=etemp
     etemp=V4_12*etemp2_12
     sqr+=etemp
     etemp=V4_13*etemp2_13
     sqr+=etemp
     etemp=V4_14*etemp2_14
     sqr+=etemp
     etemp=V4_15*etemp2_15
     sqr+=etemp
     etemp=V4_16*etemp2_16
     sqr+=etemp
     etemp=V4_17*etemp2_17
     sqr+=etemp
     etemp=V4_18*etemp2_18
     sqr+=etemp
     etemp=V4_19*etemp2_19
     sqr+=etemp
     etemp=V4_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V4_1*sqr
     Vtemp_2=V4_2*sqr
     Vtemp_3=V4_3*sqr
     Vtemp_4=V4_4*sqr
     Vtemp_5=V4_5*sqr
     Vtemp_6=V4_6*sqr
     Vtemp_7=V4_7*sqr
     Vtemp_8=V4_8*sqr
     Vtemp_9=V4_9*sqr
     Vtemp_10=V4_10*sqr
     Vtemp_11=V4_11*sqr
     Vtemp_12=V4_12*sqr
     Vtemp_13=V4_13*sqr
     Vtemp_14=V4_14*sqr
     Vtemp_15=V4_15*sqr
     Vtemp_16=V4_16*sqr
     Vtemp_17=V4_17*sqr
     Vtemp_18=V4_18*sqr
     Vtemp_19=V4_19*sqr
     Vtemp_20=V4_20*sqr
#
     V5_1+=Vtemp_1
     V5_2+=Vtemp_2
     V5_3+=Vtemp_3
     V5_4+=Vtemp_4
     V5_5+=Vtemp_5
     V5_6+=Vtemp_6
     V5_7+=Vtemp_7
     V5_8+=Vtemp_8
     V5_9+=Vtemp_9
     V5_10+=Vtemp_10
     V5_11+=Vtemp_11
     V5_12+=Vtemp_12
     V5_13+=Vtemp_13
     V5_14+=Vtemp_14
     V5_15+=Vtemp_15
     V5_16+=Vtemp_16
     V5_17+=Vtemp_17
     V5_18+=Vtemp_18
     V5_19+=Vtemp_19
     V5_20+=Vtemp_20
#
#
     Vtemp_1=V5_1
     Vtemp_2=V5_2
     Vtemp_3=V5_3
     Vtemp_4=V5_4
     Vtemp_5=V5_5
     Vtemp_6=V5_6
     Vtemp_7=V5_7
     Vtemp_8=V5_8
     Vtemp_9=V5_9
     Vtemp_10=V5_10
     Vtemp_11=V5_11
     Vtemp_12=V5_12
     Vtemp_13=V5_13
     Vtemp_14=V5_14
     Vtemp_15=V5_15
     Vtemp_16=V5_16
     Vtemp_17=V5_17
     Vtemp_18=V5_18
     Vtemp_19=V5_19
     Vtemp_20=V5_20
#
     sqr=0.0
#
     etemp=V5_1*Vtemp_1
     sqr+=etemp
     etemp=V5_2*Vtemp_2
     sqr+=etemp
     etemp=V5_3*Vtemp_3
     sqr+=etemp
     etemp=V5_4*Vtemp_4
     sqr+=etemp
     etemp=V5_5*Vtemp_5
     sqr+=etemp
     etemp=V5_6*Vtemp_6
     sqr+=etemp
     etemp=V5_7*Vtemp_7
     sqr+=etemp
     etemp=V5_8*Vtemp_8
     sqr+=etemp
     etemp=V5_9*Vtemp_9
     sqr+=etemp
     etemp=V5_10*Vtemp_10
     sqr+=etemp
     etemp=V5_11*Vtemp_11
     sqr+=etemp
     etemp=V5_12*Vtemp_12
     sqr+=etemp
     etemp=V5_13*Vtemp_13
     sqr+=etemp
     etemp=V5_14*Vtemp_14
     sqr+=etemp
     etemp=V5_15*Vtemp_15
     sqr+=etemp
     etemp=V5_16*Vtemp_16
     sqr+=etemp
     etemp=V5_17*Vtemp_17
     sqr+=etemp
     etemp=V5_18*Vtemp_18
     sqr+=etemp
     etemp=V5_19*Vtemp_19
     sqr+=etemp
     etemp=V5_20*Vtemp_20
     sqr+=etemp
#
       exponent=0.5
#       execute square_root sqr exponent
#       sqr2=1.0/sqr
     execute norm_fac sqr exponent
     sqr2=sqr
#
     V5_1*=sqr2
     V5_2*=sqr2
     V5_3*=sqr2
     V5_4*=sqr2
     V5_5*=sqr2
     V5_6*=sqr2
     V5_7*=sqr2
     V5_8*=sqr2
     V5_9*=sqr2
     V5_10*=sqr2
     V5_11*=sqr2
     V5_12*=sqr2
     V5_13*=sqr2
     V5_14*=sqr2
     V5_15*=sqr2
     V5_16*=sqr2
     V5_17*=sqr2
     V5_18*=sqr2
     V5_19*=sqr2
     V5_20*=sqr2
#
#------6 vectors -------------------------------
#
     etemp2_1=V6_1
     etemp2_2=V6_2
     etemp2_3=V6_3
     etemp2_4=V6_4
     etemp2_5=V6_5
     etemp2_6=V6_6
     etemp2_7=V6_7
     etemp2_8=V6_8
     etemp2_9=V6_9
     etemp2_10=V6_10
     etemp2_11=V6_11
     etemp2_12=V6_12
     etemp2_13=V6_13
     etemp2_14=V6_14
     etemp2_15=V6_15
     etemp2_16=V6_16
     etemp2_17=V6_17
     etemp2_18=V6_18
     etemp2_19=V6_19
     etemp2_20=V6_20
#
     sqr=0.0
     etemp=V1_1*etemp2_1
     sqr+=etemp
     etemp=V1_2*etemp2_2
     sqr+=etemp
     etemp=V1_3*etemp2_3
     sqr+=etemp
     etemp=V1_4*etemp2_4
     sqr+=etemp
     etemp=V1_5*etemp2_5
     sqr+=etemp
     etemp=V1_6*etemp2_6
     sqr+=etemp
     etemp=V1_7*etemp2_7
     sqr+=etemp
     etemp=V1_8*etemp2_8
     sqr+=etemp
     etemp=V1_9*etemp2_9
     sqr+=etemp
     etemp=V1_10*etemp2_10
     sqr+=etemp
     etemp=V1_11*etemp2_11
     sqr+=etemp
     etemp=V1_12*etemp2_12
     sqr+=etemp
     etemp=V1_13*etemp2_13
     sqr+=etemp
     etemp=V1_14*etemp2_14
     sqr+=etemp
     etemp=V1_15*etemp2_15
     sqr+=etemp
     etemp=V1_16*etemp2_16
     sqr+=etemp
     etemp=V1_17*etemp2_17
     sqr+=etemp
     etemp=V1_18*etemp2_18
     sqr+=etemp
     etemp=V1_19*etemp2_19
     sqr+=etemp
     etemp=V1_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V1_1*sqr
     Vtemp_2=V1_2*sqr
     Vtemp_3=V1_3*sqr
     Vtemp_4=V1_4*sqr
     Vtemp_5=V1_5*sqr
     Vtemp_6=V1_6*sqr
     Vtemp_7=V1_7*sqr
     Vtemp_8=V1_8*sqr
     Vtemp_9=V1_9*sqr
     Vtemp_10=V1_10*sqr
     Vtemp_11=V1_11*sqr
     Vtemp_12=V1_12*sqr
     Vtemp_13=V1_13*sqr
     Vtemp_14=V1_14*sqr
     Vtemp_15=V1_15*sqr
     Vtemp_16=V1_16*sqr
     Vtemp_17=V1_17*sqr
     Vtemp_18=V1_18*sqr
     Vtemp_19=V1_19*sqr
     Vtemp_20=V1_20*sqr
#
     V6_1+=Vtemp_1
     V6_2+=Vtemp_2
     V6_3+=Vtemp_3
     V6_4+=Vtemp_4
     V6_5+=Vtemp_5
     V6_6+=Vtemp_6
     V6_7+=Vtemp_7
     V6_8+=Vtemp_8
     V6_9+=Vtemp_9
     V6_10+=Vtemp_10
     V6_11+=Vtemp_11
     V6_12+=Vtemp_12
     V6_13+=Vtemp_13
     V6_14+=Vtemp_14
     V6_15+=Vtemp_15
     V6_16+=Vtemp_16
     V6_17+=Vtemp_17
     V6_18+=Vtemp_18
     V6_19+=Vtemp_19
     V6_20+=Vtemp_20
#
#
     etemp2_1=V6_1
     etemp2_2=V6_2
     etemp2_3=V6_3
     etemp2_4=V6_4
     etemp2_5=V6_5
     etemp2_6=V6_6
     etemp2_7=V6_7
     etemp2_8=V6_8
     etemp2_9=V6_9
     etemp2_10=V6_10
     etemp2_11=V6_11
     etemp2_12=V6_12
     etemp2_13=V6_13
     etemp2_14=V6_14
     etemp2_15=V6_15
     etemp2_16=V6_16
     etemp2_17=V6_17
     etemp2_18=V6_18
     etemp2_19=V6_19
     etemp2_20=V6_20
#
     sqr=0.0
     etemp=V2_1*etemp2_1
     sqr+=etemp
     etemp=V2_2*etemp2_2
     sqr+=etemp
     etemp=V2_3*etemp2_3
     sqr+=etemp
     etemp=V2_4*etemp2_4
     sqr+=etemp
     etemp=V2_5*etemp2_5
     sqr+=etemp
     etemp=V2_6*etemp2_6
     sqr+=etemp
     etemp=V2_7*etemp2_7
     sqr+=etemp
     etemp=V2_8*etemp2_8
     sqr+=etemp
     etemp=V2_9*etemp2_9
     sqr+=etemp
     etemp=V2_10*etemp2_10
     sqr+=etemp
     etemp=V2_11*etemp2_11
     sqr+=etemp
     etemp=V2_12*etemp2_12
     sqr+=etemp
     etemp=V2_13*etemp2_13
     sqr+=etemp
     etemp=V2_14*etemp2_14
     sqr+=etemp
     etemp=V2_15*etemp2_15
     sqr+=etemp
     etemp=V2_16*etemp2_16
     sqr+=etemp
     etemp=V2_17*etemp2_17
     sqr+=etemp
     etemp=V2_18*etemp2_18
     sqr+=etemp
     etemp=V2_19*etemp2_19
     sqr+=etemp
     etemp=V2_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V2_1*sqr
     Vtemp_2=V2_2*sqr
     Vtemp_3=V2_3*sqr
     Vtemp_4=V2_4*sqr
     Vtemp_5=V2_5*sqr
     Vtemp_6=V2_6*sqr
     Vtemp_7=V2_7*sqr
     Vtemp_8=V2_8*sqr
     Vtemp_9=V2_9*sqr
     Vtemp_10=V2_10*sqr
     Vtemp_11=V2_11*sqr
     Vtemp_12=V2_12*sqr
     Vtemp_13=V2_13*sqr
     Vtemp_14=V2_14*sqr
     Vtemp_15=V2_15*sqr
     Vtemp_16=V2_16*sqr
     Vtemp_17=V2_17*sqr
     Vtemp_18=V2_18*sqr
     Vtemp_19=V2_19*sqr
     Vtemp_20=V2_20*sqr
#
     V6_1+=Vtemp_1
     V6_2+=Vtemp_2
     V6_3+=Vtemp_3
     V6_4+=Vtemp_4
     V6_5+=Vtemp_5
     V6_6+=Vtemp_6
     V6_7+=Vtemp_7
     V6_8+=Vtemp_8
     V6_9+=Vtemp_9
     V6_10+=Vtemp_10
     V6_11+=Vtemp_11
     V6_12+=Vtemp_12
     V6_13+=Vtemp_13
     V6_14+=Vtemp_14
     V6_15+=Vtemp_15
     V6_16+=Vtemp_16
     V6_17+=Vtemp_17
     V6_18+=Vtemp_18
     V6_19+=Vtemp_19
     V6_20+=Vtemp_20
#
#
     etemp2_1=V6_1
     etemp2_2=V6_2
     etemp2_3=V6_3
     etemp2_4=V6_4
     etemp2_5=V6_5
     etemp2_6=V6_6
     etemp2_7=V6_7
     etemp2_8=V6_8
     etemp2_9=V6_9
     etemp2_10=V6_10
     etemp2_11=V6_11
     etemp2_12=V6_12
     etemp2_13=V6_13
     etemp2_14=V6_14
     etemp2_15=V6_15
     etemp2_16=V6_16
     etemp2_17=V6_17
     etemp2_18=V6_18
     etemp2_19=V6_19
     etemp2_20=V6_20
#
     sqr=0.0
     etemp=V3_1*etemp2_1
     sqr+=etemp
     etemp=V3_2*etemp2_2
     sqr+=etemp
     etemp=V3_3*etemp2_3
     sqr+=etemp
     etemp=V3_4*etemp2_4
     sqr+=etemp
     etemp=V3_5*etemp2_5
     sqr+=etemp
     etemp=V3_6*etemp2_6
     sqr+=etemp
     etemp=V3_7*etemp2_7
     sqr+=etemp
     etemp=V3_8*etemp2_8
     sqr+=etemp
     etemp=V3_9*etemp2_9
     sqr+=etemp
     etemp=V3_10*etemp2_10
     sqr+=etemp
     etemp=V3_11*etemp2_11
     sqr+=etemp
     etemp=V3_12*etemp2_12
     sqr+=etemp
     etemp=V3_13*etemp2_13
     sqr+=etemp
     etemp=V3_14*etemp2_14
     sqr+=etemp
     etemp=V3_15*etemp2_15
     sqr+=etemp
     etemp=V3_16*etemp2_16
     sqr+=etemp
     etemp=V3_17*etemp2_17
     sqr+=etemp
     etemp=V3_18*etemp2_18
     sqr+=etemp
     etemp=V3_19*etemp2_19
     sqr+=etemp
     etemp=V3_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V3_1*sqr
     Vtemp_2=V3_2*sqr
     Vtemp_3=V3_3*sqr
     Vtemp_4=V3_4*sqr
     Vtemp_5=V3_5*sqr
     Vtemp_6=V3_6*sqr
     Vtemp_7=V3_7*sqr
     Vtemp_8=V3_8*sqr
     Vtemp_9=V3_9*sqr
     Vtemp_10=V3_10*sqr
     Vtemp_11=V3_11*sqr
     Vtemp_12=V3_12*sqr
     Vtemp_13=V3_13*sqr
     Vtemp_14=V3_14*sqr
     Vtemp_15=V3_15*sqr
     Vtemp_16=V3_16*sqr
     Vtemp_17=V3_17*sqr
     Vtemp_18=V3_18*sqr
     Vtemp_19=V3_19*sqr
     Vtemp_20=V3_20*sqr
#
     V6_1+=Vtemp_1
     V6_2+=Vtemp_2
     V6_3+=Vtemp_3
     V6_4+=Vtemp_4
     V6_5+=Vtemp_5
     V6_6+=Vtemp_6
     V6_7+=Vtemp_7
     V6_8+=Vtemp_8
     V6_9+=Vtemp_9
     V6_10+=Vtemp_10
     V6_11+=Vtemp_11
     V6_12+=Vtemp_12
     V6_13+=Vtemp_13
     V6_14+=Vtemp_14
     V6_15+=Vtemp_15
     V6_16+=Vtemp_16
     V6_17+=Vtemp_17
     V6_18+=Vtemp_18
     V6_19+=Vtemp_19
     V6_20+=Vtemp_20
#
#
     etemp2_1=V6_1
     etemp2_2=V6_2
     etemp2_3=V6_3
     etemp2_4=V6_4
     etemp2_5=V6_5
     etemp2_6=V6_6
     etemp2_7=V6_7
     etemp2_8=V6_8
     etemp2_9=V6_9
     etemp2_10=V6_10
     etemp2_11=V6_11
     etemp2_12=V6_12
     etemp2_13=V6_13
     etemp2_14=V6_14
     etemp2_15=V6_15
     etemp2_16=V6_16
     etemp2_17=V6_17
     etemp2_18=V6_18
     etemp2_19=V6_19
     etemp2_20=V6_20
#
     sqr=0.0
     etemp=V4_1*etemp2_1
     sqr+=etemp
     etemp=V4_2*etemp2_2
     sqr+=etemp
     etemp=V4_3*etemp2_3
     sqr+=etemp
     etemp=V4_4*etemp2_4
     sqr+=etemp
     etemp=V4_5*etemp2_5
     sqr+=etemp
     etemp=V4_6*etemp2_6
     sqr+=etemp
     etemp=V4_7*etemp2_7
     sqr+=etemp
     etemp=V4_8*etemp2_8
     sqr+=etemp
     etemp=V4_9*etemp2_9
     sqr+=etemp
     etemp=V4_10*etemp2_10
     sqr+=etemp
     etemp=V4_11*etemp2_11
     sqr+=etemp
     etemp=V4_12*etemp2_12
     sqr+=etemp
     etemp=V4_13*etemp2_13
     sqr+=etemp
     etemp=V4_14*etemp2_14
     sqr+=etemp
     etemp=V4_15*etemp2_15
     sqr+=etemp
     etemp=V4_16*etemp2_16
     sqr+=etemp
     etemp=V4_17*etemp2_17
     sqr+=etemp
     etemp=V4_18*etemp2_18
     sqr+=etemp
     etemp=V4_19*etemp2_19
     sqr+=etemp
     etemp=V4_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V4_1*sqr
     Vtemp_2=V4_2*sqr
     Vtemp_3=V4_3*sqr
     Vtemp_4=V4_4*sqr
     Vtemp_5=V4_5*sqr
     Vtemp_6=V4_6*sqr
     Vtemp_7=V4_7*sqr
     Vtemp_8=V4_8*sqr
     Vtemp_9=V4_9*sqr
     Vtemp_10=V4_10*sqr
     Vtemp_11=V4_11*sqr
     Vtemp_12=V4_12*sqr
     Vtemp_13=V4_13*sqr
     Vtemp_14=V4_14*sqr
     Vtemp_15=V4_15*sqr
     Vtemp_16=V4_16*sqr
     Vtemp_17=V4_17*sqr
     Vtemp_18=V4_18*sqr
     Vtemp_19=V4_19*sqr
     Vtemp_20=V4_20*sqr
#
     V6_1+=Vtemp_1
     V6_2+=Vtemp_2
     V6_3+=Vtemp_3
     V6_4+=Vtemp_4
     V6_5+=Vtemp_5
     V6_6+=Vtemp_6
     V6_7+=Vtemp_7
     V6_8+=Vtemp_8
     V6_9+=Vtemp_9
     V6_10+=Vtemp_10
     V6_11+=Vtemp_11
     V6_12+=Vtemp_12
     V6_13+=Vtemp_13
     V6_14+=Vtemp_14
     V6_15+=Vtemp_15
     V6_16+=Vtemp_16
     V6_17+=Vtemp_17
     V6_18+=Vtemp_18
     V6_19+=Vtemp_19
     V6_20+=Vtemp_20
#
#
     etemp2_1=V6_1
     etemp2_2=V6_2
     etemp2_3=V6_3
     etemp2_4=V6_4
     etemp2_5=V6_5
     etemp2_6=V6_6
     etemp2_7=V6_7
     etemp2_8=V6_8
     etemp2_9=V6_9
     etemp2_10=V6_10
     etemp2_11=V6_11
     etemp2_12=V6_12
     etemp2_13=V6_13
     etemp2_14=V6_14
     etemp2_15=V6_15
     etemp2_16=V6_16
     etemp2_17=V6_17
     etemp2_18=V6_18
     etemp2_19=V6_19
     etemp2_20=V6_20
#
     sqr=0.0
     etemp=V5_1*etemp2_1
     sqr+=etemp
     etemp=V5_2*etemp2_2
     sqr+=etemp
     etemp=V5_3*etemp2_3
     sqr+=etemp
     etemp=V5_4*etemp2_4
     sqr+=etemp
     etemp=V5_5*etemp2_5
     sqr+=etemp
     etemp=V5_6*etemp2_6
     sqr+=etemp
     etemp=V5_7*etemp2_7
     sqr+=etemp
     etemp=V5_8*etemp2_8
     sqr+=etemp
     etemp=V5_9*etemp2_9
     sqr+=etemp
     etemp=V5_10*etemp2_10
     sqr+=etemp
     etemp=V5_11*etemp2_11
     sqr+=etemp
     etemp=V5_12*etemp2_12
     sqr+=etemp
     etemp=V5_13*etemp2_13
     sqr+=etemp
     etemp=V5_14*etemp2_14
     sqr+=etemp
     etemp=V5_15*etemp2_15
     sqr+=etemp
     etemp=V5_16*etemp2_16
     sqr+=etemp
     etemp=V5_17*etemp2_17
     sqr+=etemp
     etemp=V5_18*etemp2_18
     sqr+=etemp
     etemp=V5_19*etemp2_19
     sqr+=etemp
     etemp=V5_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V5_1*sqr
     Vtemp_2=V5_2*sqr
     Vtemp_3=V5_3*sqr
     Vtemp_4=V5_4*sqr
     Vtemp_5=V5_5*sqr
     Vtemp_6=V5_6*sqr
     Vtemp_7=V5_7*sqr
     Vtemp_8=V5_8*sqr
     Vtemp_9=V5_9*sqr
     Vtemp_10=V5_10*sqr
     Vtemp_11=V5_11*sqr
     Vtemp_12=V5_12*sqr
     Vtemp_13=V5_13*sqr
     Vtemp_14=V5_14*sqr
     Vtemp_15=V5_15*sqr
     Vtemp_16=V5_16*sqr
     Vtemp_17=V5_17*sqr
     Vtemp_18=V5_18*sqr
     Vtemp_19=V5_19*sqr
     Vtemp_20=V5_20*sqr
#
     V6_1+=Vtemp_1
     V6_2+=Vtemp_2
     V6_3+=Vtemp_3
     V6_4+=Vtemp_4
     V6_5+=Vtemp_5
     V6_6+=Vtemp_6
     V6_7+=Vtemp_7
     V6_8+=Vtemp_8
     V6_9+=Vtemp_9
     V6_10+=Vtemp_10
     V6_11+=Vtemp_11
     V6_12+=Vtemp_12
     V6_13+=Vtemp_13
     V6_14+=Vtemp_14
     V6_15+=Vtemp_15
     V6_16+=Vtemp_16
     V6_17+=Vtemp_17
     V6_18+=Vtemp_18
     V6_19+=Vtemp_19
     V6_20+=Vtemp_20
#
#
     Vtemp_1=V6_1
     Vtemp_2=V6_2
     Vtemp_3=V6_3
     Vtemp_4=V6_4
     Vtemp_5=V6_5
     Vtemp_6=V6_6
     Vtemp_7=V6_7
     Vtemp_8=V6_8
     Vtemp_9=V6_9
     Vtemp_10=V6_10
     Vtemp_11=V6_11
     Vtemp_12=V6_12
     Vtemp_13=V6_13
     Vtemp_14=V6_14
     Vtemp_15=V6_15
     Vtemp_16=V6_16
     Vtemp_17=V6_17
     Vtemp_18=V6_18
     Vtemp_19=V6_19
     Vtemp_20=V6_20
#
     sqr=0.0
#
     etemp=V6_1*Vtemp_1
     sqr+=etemp
     etemp=V6_2*Vtemp_2
     sqr+=etemp
     etemp=V6_3*Vtemp_3
     sqr+=etemp
     etemp=V6_4*Vtemp_4
     sqr+=etemp
     etemp=V6_5*Vtemp_5
     sqr+=etemp
     etemp=V6_6*Vtemp_6
     sqr+=etemp
     etemp=V6_7*Vtemp_7
     sqr+=etemp
     etemp=V6_8*Vtemp_8
     sqr+=etemp
     etemp=V6_9*Vtemp_9
     sqr+=etemp
     etemp=V6_10*Vtemp_10
     sqr+=etemp
     etemp=V6_11*Vtemp_11
     sqr+=etemp
     etemp=V6_12*Vtemp_12
     sqr+=etemp
     etemp=V6_13*Vtemp_13
     sqr+=etemp
     etemp=V6_14*Vtemp_14
     sqr+=etemp
     etemp=V6_15*Vtemp_15
     sqr+=etemp
     etemp=V6_16*Vtemp_16
     sqr+=etemp
     etemp=V6_17*Vtemp_17
     sqr+=etemp
     etemp=V6_18*Vtemp_18
     sqr+=etemp
     etemp=V6_19*Vtemp_19
     sqr+=etemp
     etemp=V6_20*Vtemp_20
     sqr+=etemp
#
       exponent=0.5
#       execute square_root sqr exponent
#       sqr2=1.0/sqr
     execute norm_fac sqr exponent
     sqr2=sqr
#
     V6_1*=sqr2
     V6_2*=sqr2
     V6_3*=sqr2
     V6_4*=sqr2
     V6_5*=sqr2
     V6_6*=sqr2
     V6_7*=sqr2
     V6_8*=sqr2
     V6_9*=sqr2
     V6_10*=sqr2
     V6_11*=sqr2
     V6_12*=sqr2
     V6_13*=sqr2
     V6_14*=sqr2
     V6_15*=sqr2
     V6_16*=sqr2
     V6_17*=sqr2
     V6_18*=sqr2
     V6_19*=sqr2
     V6_20*=sqr2
#
#------7 vectors -------------------------------
#
     etemp2_1=V7_1
     etemp2_2=V7_2
     etemp2_3=V7_3
     etemp2_4=V7_4
     etemp2_5=V7_5
     etemp2_6=V7_6
     etemp2_7=V7_7
     etemp2_8=V7_8
     etemp2_9=V7_9
     etemp2_10=V7_10
     etemp2_11=V7_11
     etemp2_12=V7_12
     etemp2_13=V7_13
     etemp2_14=V7_14
     etemp2_15=V7_15
     etemp2_16=V7_16
     etemp2_17=V7_17
     etemp2_18=V7_18
     etemp2_19=V7_19
     etemp2_20=V7_20
#
     sqr=0.0
     etemp=V1_1*etemp2_1
     sqr+=etemp
     etemp=V1_2*etemp2_2
     sqr+=etemp
     etemp=V1_3*etemp2_3
     sqr+=etemp
     etemp=V1_4*etemp2_4
     sqr+=etemp
     etemp=V1_5*etemp2_5
     sqr+=etemp
     etemp=V1_6*etemp2_6
     sqr+=etemp
     etemp=V1_7*etemp2_7
     sqr+=etemp
     etemp=V1_8*etemp2_8
     sqr+=etemp
     etemp=V1_9*etemp2_9
     sqr+=etemp
     etemp=V1_10*etemp2_10
     sqr+=etemp
     etemp=V1_11*etemp2_11
     sqr+=etemp
     etemp=V1_12*etemp2_12
     sqr+=etemp
     etemp=V1_13*etemp2_13
     sqr+=etemp
     etemp=V1_14*etemp2_14
     sqr+=etemp
     etemp=V1_15*etemp2_15
     sqr+=etemp
     etemp=V1_16*etemp2_16
     sqr+=etemp
     etemp=V1_17*etemp2_17
     sqr+=etemp
     etemp=V1_18*etemp2_18
     sqr+=etemp
     etemp=V1_19*etemp2_19
     sqr+=etemp
     etemp=V1_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V1_1*sqr
     Vtemp_2=V1_2*sqr
     Vtemp_3=V1_3*sqr
     Vtemp_4=V1_4*sqr
     Vtemp_5=V1_5*sqr
     Vtemp_6=V1_6*sqr
     Vtemp_7=V1_7*sqr
     Vtemp_8=V1_8*sqr
     Vtemp_9=V1_9*sqr
     Vtemp_10=V1_10*sqr
     Vtemp_11=V1_11*sqr
     Vtemp_12=V1_12*sqr
     Vtemp_13=V1_13*sqr
     Vtemp_14=V1_14*sqr
     Vtemp_15=V1_15*sqr
     Vtemp_16=V1_16*sqr
     Vtemp_17=V1_17*sqr
     Vtemp_18=V1_18*sqr
     Vtemp_19=V1_19*sqr
     Vtemp_20=V1_20*sqr
#
     V7_1+=Vtemp_1
     V7_2+=Vtemp_2
     V7_3+=Vtemp_3
     V7_4+=Vtemp_4
     V7_5+=Vtemp_5
     V7_6+=Vtemp_6
     V7_7+=Vtemp_7
     V7_8+=Vtemp_8
     V7_9+=Vtemp_9
     V7_10+=Vtemp_10
     V7_11+=Vtemp_11
     V7_12+=Vtemp_12
     V7_13+=Vtemp_13
     V7_14+=Vtemp_14
     V7_15+=Vtemp_15
     V7_16+=Vtemp_16
     V7_17+=Vtemp_17
     V7_18+=Vtemp_18
     V7_19+=Vtemp_19
     V7_20+=Vtemp_20
#
#
     etemp2_1=V7_1
     etemp2_2=V7_2
     etemp2_3=V7_3
     etemp2_4=V7_4
     etemp2_5=V7_5
     etemp2_6=V7_6
     etemp2_7=V7_7
     etemp2_8=V7_8
     etemp2_9=V7_9
     etemp2_10=V7_10
     etemp2_11=V7_11
     etemp2_12=V7_12
     etemp2_13=V7_13
     etemp2_14=V7_14
     etemp2_15=V7_15
     etemp2_16=V7_16
     etemp2_17=V7_17
     etemp2_18=V7_18
     etemp2_19=V7_19
     etemp2_20=V7_20
#
     sqr=0.0
     etemp=V2_1*etemp2_1
     sqr+=etemp
     etemp=V2_2*etemp2_2
     sqr+=etemp
     etemp=V2_3*etemp2_3
     sqr+=etemp
     etemp=V2_4*etemp2_4
     sqr+=etemp
     etemp=V2_5*etemp2_5
     sqr+=etemp
     etemp=V2_6*etemp2_6
     sqr+=etemp
     etemp=V2_7*etemp2_7
     sqr+=etemp
     etemp=V2_8*etemp2_8
     sqr+=etemp
     etemp=V2_9*etemp2_9
     sqr+=etemp
     etemp=V2_10*etemp2_10
     sqr+=etemp
     etemp=V2_11*etemp2_11
     sqr+=etemp
     etemp=V2_12*etemp2_12
     sqr+=etemp
     etemp=V2_13*etemp2_13
     sqr+=etemp
     etemp=V2_14*etemp2_14
     sqr+=etemp
     etemp=V2_15*etemp2_15
     sqr+=etemp
     etemp=V2_16*etemp2_16
     sqr+=etemp
     etemp=V2_17*etemp2_17
     sqr+=etemp
     etemp=V2_18*etemp2_18
     sqr+=etemp
     etemp=V2_19*etemp2_19
     sqr+=etemp
     etemp=V2_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V2_1*sqr
     Vtemp_2=V2_2*sqr
     Vtemp_3=V2_3*sqr
     Vtemp_4=V2_4*sqr
     Vtemp_5=V2_5*sqr
     Vtemp_6=V2_6*sqr
     Vtemp_7=V2_7*sqr
     Vtemp_8=V2_8*sqr
     Vtemp_9=V2_9*sqr
     Vtemp_10=V2_10*sqr
     Vtemp_11=V2_11*sqr
     Vtemp_12=V2_12*sqr
     Vtemp_13=V2_13*sqr
     Vtemp_14=V2_14*sqr
     Vtemp_15=V2_15*sqr
     Vtemp_16=V2_16*sqr
     Vtemp_17=V2_17*sqr
     Vtemp_18=V2_18*sqr
     Vtemp_19=V2_19*sqr
     Vtemp_20=V2_20*sqr
#
     V7_1+=Vtemp_1
     V7_2+=Vtemp_2
     V7_3+=Vtemp_3
     V7_4+=Vtemp_4
     V7_5+=Vtemp_5
     V7_6+=Vtemp_6
     V7_7+=Vtemp_7
     V7_8+=Vtemp_8
     V7_9+=Vtemp_9
     V7_10+=Vtemp_10
     V7_11+=Vtemp_11
     V7_12+=Vtemp_12
     V7_13+=Vtemp_13
     V7_14+=Vtemp_14
     V7_15+=Vtemp_15
     V7_16+=Vtemp_16
     V7_17+=Vtemp_17
     V7_18+=Vtemp_18
     V7_19+=Vtemp_19
     V7_20+=Vtemp_20
#
#
     etemp2_1=V7_1
     etemp2_2=V7_2
     etemp2_3=V7_3
     etemp2_4=V7_4
     etemp2_5=V7_5
     etemp2_6=V7_6
     etemp2_7=V7_7
     etemp2_8=V7_8
     etemp2_9=V7_9
     etemp2_10=V7_10
     etemp2_11=V7_11
     etemp2_12=V7_12
     etemp2_13=V7_13
     etemp2_14=V7_14
     etemp2_15=V7_15
     etemp2_16=V7_16
     etemp2_17=V7_17
     etemp2_18=V7_18
     etemp2_19=V7_19
     etemp2_20=V7_20
#
     sqr=0.0
     etemp=V3_1*etemp2_1
     sqr+=etemp
     etemp=V3_2*etemp2_2
     sqr+=etemp
     etemp=V3_3*etemp2_3
     sqr+=etemp
     etemp=V3_4*etemp2_4
     sqr+=etemp
     etemp=V3_5*etemp2_5
     sqr+=etemp
     etemp=V3_6*etemp2_6
     sqr+=etemp
     etemp=V3_7*etemp2_7
     sqr+=etemp
     etemp=V3_8*etemp2_8
     sqr+=etemp
     etemp=V3_9*etemp2_9
     sqr+=etemp
     etemp=V3_10*etemp2_10
     sqr+=etemp
     etemp=V3_11*etemp2_11
     sqr+=etemp
     etemp=V3_12*etemp2_12
     sqr+=etemp
     etemp=V3_13*etemp2_13
     sqr+=etemp
     etemp=V3_14*etemp2_14
     sqr+=etemp
     etemp=V3_15*etemp2_15
     sqr+=etemp
     etemp=V3_16*etemp2_16
     sqr+=etemp
     etemp=V3_17*etemp2_17
     sqr+=etemp
     etemp=V3_18*etemp2_18
     sqr+=etemp
     etemp=V3_19*etemp2_19
     sqr+=etemp
     etemp=V3_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V3_1*sqr
     Vtemp_2=V3_2*sqr
     Vtemp_3=V3_3*sqr
     Vtemp_4=V3_4*sqr
     Vtemp_5=V3_5*sqr
     Vtemp_6=V3_6*sqr
     Vtemp_7=V3_7*sqr
     Vtemp_8=V3_8*sqr
     Vtemp_9=V3_9*sqr
     Vtemp_10=V3_10*sqr
     Vtemp_11=V3_11*sqr
     Vtemp_12=V3_12*sqr
     Vtemp_13=V3_13*sqr
     Vtemp_14=V3_14*sqr
     Vtemp_15=V3_15*sqr
     Vtemp_16=V3_16*sqr
     Vtemp_17=V3_17*sqr
     Vtemp_18=V3_18*sqr
     Vtemp_19=V3_19*sqr
     Vtemp_20=V3_20*sqr
#
     V7_1+=Vtemp_1
     V7_2+=Vtemp_2
     V7_3+=Vtemp_3
     V7_4+=Vtemp_4
     V7_5+=Vtemp_5
     V7_6+=Vtemp_6
     V7_7+=Vtemp_7
     V7_8+=Vtemp_8
     V7_9+=Vtemp_9
     V7_10+=Vtemp_10
     V7_11+=Vtemp_11
     V7_12+=Vtemp_12
     V7_13+=Vtemp_13
     V7_14+=Vtemp_14
     V7_15+=Vtemp_15
     V7_16+=Vtemp_16
     V7_17+=Vtemp_17
     V7_18+=Vtemp_18
     V7_19+=Vtemp_19
     V7_20+=Vtemp_20
#
#
     etemp2_1=V7_1
     etemp2_2=V7_2
     etemp2_3=V7_3
     etemp2_4=V7_4
     etemp2_5=V7_5
     etemp2_6=V7_6
     etemp2_7=V7_7
     etemp2_8=V7_8
     etemp2_9=V7_9
     etemp2_10=V7_10
     etemp2_11=V7_11
     etemp2_12=V7_12
     etemp2_13=V7_13
     etemp2_14=V7_14
     etemp2_15=V7_15
     etemp2_16=V7_16
     etemp2_17=V7_17
     etemp2_18=V7_18
     etemp2_19=V7_19
     etemp2_20=V7_20
#
     sqr=0.0
     etemp=V4_1*etemp2_1
     sqr+=etemp
     etemp=V4_2*etemp2_2
     sqr+=etemp
     etemp=V4_3*etemp2_3
     sqr+=etemp
     etemp=V4_4*etemp2_4
     sqr+=etemp
     etemp=V4_5*etemp2_5
     sqr+=etemp
     etemp=V4_6*etemp2_6
     sqr+=etemp
     etemp=V4_7*etemp2_7
     sqr+=etemp
     etemp=V4_8*etemp2_8
     sqr+=etemp
     etemp=V4_9*etemp2_9
     sqr+=etemp
     etemp=V4_10*etemp2_10
     sqr+=etemp
     etemp=V4_11*etemp2_11
     sqr+=etemp
     etemp=V4_12*etemp2_12
     sqr+=etemp
     etemp=V4_13*etemp2_13
     sqr+=etemp
     etemp=V4_14*etemp2_14
     sqr+=etemp
     etemp=V4_15*etemp2_15
     sqr+=etemp
     etemp=V4_16*etemp2_16
     sqr+=etemp
     etemp=V4_17*etemp2_17
     sqr+=etemp
     etemp=V4_18*etemp2_18
     sqr+=etemp
     etemp=V4_19*etemp2_19
     sqr+=etemp
     etemp=V4_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V4_1*sqr
     Vtemp_2=V4_2*sqr
     Vtemp_3=V4_3*sqr
     Vtemp_4=V4_4*sqr
     Vtemp_5=V4_5*sqr
     Vtemp_6=V4_6*sqr
     Vtemp_7=V4_7*sqr
     Vtemp_8=V4_8*sqr
     Vtemp_9=V4_9*sqr
     Vtemp_10=V4_10*sqr
     Vtemp_11=V4_11*sqr
     Vtemp_12=V4_12*sqr
     Vtemp_13=V4_13*sqr
     Vtemp_14=V4_14*sqr
     Vtemp_15=V4_15*sqr
     Vtemp_16=V4_16*sqr
     Vtemp_17=V4_17*sqr
     Vtemp_18=V4_18*sqr
     Vtemp_19=V4_19*sqr
     Vtemp_20=V4_20*sqr
#
     V7_1+=Vtemp_1
     V7_2+=Vtemp_2
     V7_3+=Vtemp_3
     V7_4+=Vtemp_4
     V7_5+=Vtemp_5
     V7_6+=Vtemp_6
     V7_7+=Vtemp_7
     V7_8+=Vtemp_8
     V7_9+=Vtemp_9
     V7_10+=Vtemp_10
     V7_11+=Vtemp_11
     V7_12+=Vtemp_12
     V7_13+=Vtemp_13
     V7_14+=Vtemp_14
     V7_15+=Vtemp_15
     V7_16+=Vtemp_16
     V7_17+=Vtemp_17
     V7_18+=Vtemp_18
     V7_19+=Vtemp_19
     V7_20+=Vtemp_20
#
#
     etemp2_1=V7_1
     etemp2_2=V7_2
     etemp2_3=V7_3
     etemp2_4=V7_4
     etemp2_5=V7_5
     etemp2_6=V7_6
     etemp2_7=V7_7
     etemp2_8=V7_8
     etemp2_9=V7_9
     etemp2_10=V7_10
     etemp2_11=V7_11
     etemp2_12=V7_12
     etemp2_13=V7_13
     etemp2_14=V7_14
     etemp2_15=V7_15
     etemp2_16=V7_16
     etemp2_17=V7_17
     etemp2_18=V7_18
     etemp2_19=V7_19
     etemp2_20=V7_20
#
     sqr=0.0
     etemp=V5_1*etemp2_1
     sqr+=etemp
     etemp=V5_2*etemp2_2
     sqr+=etemp
     etemp=V5_3*etemp2_3
     sqr+=etemp
     etemp=V5_4*etemp2_4
     sqr+=etemp
     etemp=V5_5*etemp2_5
     sqr+=etemp
     etemp=V5_6*etemp2_6
     sqr+=etemp
     etemp=V5_7*etemp2_7
     sqr+=etemp
     etemp=V5_8*etemp2_8
     sqr+=etemp
     etemp=V5_9*etemp2_9
     sqr+=etemp
     etemp=V5_10*etemp2_10
     sqr+=etemp
     etemp=V5_11*etemp2_11
     sqr+=etemp
     etemp=V5_12*etemp2_12
     sqr+=etemp
     etemp=V5_13*etemp2_13
     sqr+=etemp
     etemp=V5_14*etemp2_14
     sqr+=etemp
     etemp=V5_15*etemp2_15
     sqr+=etemp
     etemp=V5_16*etemp2_16
     sqr+=etemp
     etemp=V5_17*etemp2_17
     sqr+=etemp
     etemp=V5_18*etemp2_18
     sqr+=etemp
     etemp=V5_19*etemp2_19
     sqr+=etemp
     etemp=V5_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V5_1*sqr
     Vtemp_2=V5_2*sqr
     Vtemp_3=V5_3*sqr
     Vtemp_4=V5_4*sqr
     Vtemp_5=V5_5*sqr
     Vtemp_6=V5_6*sqr
     Vtemp_7=V5_7*sqr
     Vtemp_8=V5_8*sqr
     Vtemp_9=V5_9*sqr
     Vtemp_10=V5_10*sqr
     Vtemp_11=V5_11*sqr
     Vtemp_12=V5_12*sqr
     Vtemp_13=V5_13*sqr
     Vtemp_14=V5_14*sqr
     Vtemp_15=V5_15*sqr
     Vtemp_16=V5_16*sqr
     Vtemp_17=V5_17*sqr
     Vtemp_18=V5_18*sqr
     Vtemp_19=V5_19*sqr
     Vtemp_20=V5_20*sqr
#
     V7_1+=Vtemp_1
     V7_2+=Vtemp_2
     V7_3+=Vtemp_3
     V7_4+=Vtemp_4
     V7_5+=Vtemp_5
     V7_6+=Vtemp_6
     V7_7+=Vtemp_7
     V7_8+=Vtemp_8
     V7_9+=Vtemp_9
     V7_10+=Vtemp_10
     V7_11+=Vtemp_11
     V7_12+=Vtemp_12
     V7_13+=Vtemp_13
     V7_14+=Vtemp_14
     V7_15+=Vtemp_15
     V7_16+=Vtemp_16
     V7_17+=Vtemp_17
     V7_18+=Vtemp_18
     V7_19+=Vtemp_19
     V7_20+=Vtemp_20
#
#
     etemp2_1=V7_1
     etemp2_2=V7_2
     etemp2_3=V7_3
     etemp2_4=V7_4
     etemp2_5=V7_5
     etemp2_6=V7_6
     etemp2_7=V7_7
     etemp2_8=V7_8
     etemp2_9=V7_9
     etemp2_10=V7_10
     etemp2_11=V7_11
     etemp2_12=V7_12
     etemp2_13=V7_13
     etemp2_14=V7_14
     etemp2_15=V7_15
     etemp2_16=V7_16
     etemp2_17=V7_17
     etemp2_18=V7_18
     etemp2_19=V7_19
     etemp2_20=V7_20
#
     sqr=0.0
     etemp=V6_1*etemp2_1
     sqr+=etemp
     etemp=V6_2*etemp2_2
     sqr+=etemp
     etemp=V6_3*etemp2_3
     sqr+=etemp
     etemp=V6_4*etemp2_4
     sqr+=etemp
     etemp=V6_5*etemp2_5
     sqr+=etemp
     etemp=V6_6*etemp2_6
     sqr+=etemp
     etemp=V6_7*etemp2_7
     sqr+=etemp
     etemp=V6_8*etemp2_8
     sqr+=etemp
     etemp=V6_9*etemp2_9
     sqr+=etemp
     etemp=V6_10*etemp2_10
     sqr+=etemp
     etemp=V6_11*etemp2_11
     sqr+=etemp
     etemp=V6_12*etemp2_12
     sqr+=etemp
     etemp=V6_13*etemp2_13
     sqr+=etemp
     etemp=V6_14*etemp2_14
     sqr+=etemp
     etemp=V6_15*etemp2_15
     sqr+=etemp
     etemp=V6_16*etemp2_16
     sqr+=etemp
     etemp=V6_17*etemp2_17
     sqr+=etemp
     etemp=V6_18*etemp2_18
     sqr+=etemp
     etemp=V6_19*etemp2_19
     sqr+=etemp
     etemp=V6_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V6_1*sqr
     Vtemp_2=V6_2*sqr
     Vtemp_3=V6_3*sqr
     Vtemp_4=V6_4*sqr
     Vtemp_5=V6_5*sqr
     Vtemp_6=V6_6*sqr
     Vtemp_7=V6_7*sqr
     Vtemp_8=V6_8*sqr
     Vtemp_9=V6_9*sqr
     Vtemp_10=V6_10*sqr
     Vtemp_11=V6_11*sqr
     Vtemp_12=V6_12*sqr
     Vtemp_13=V6_13*sqr
     Vtemp_14=V6_14*sqr
     Vtemp_15=V6_15*sqr
     Vtemp_16=V6_16*sqr
     Vtemp_17=V6_17*sqr
     Vtemp_18=V6_18*sqr
     Vtemp_19=V6_19*sqr
     Vtemp_20=V6_20*sqr
#
     V7_1+=Vtemp_1
     V7_2+=Vtemp_2
     V7_3+=Vtemp_3
     V7_4+=Vtemp_4
     V7_5+=Vtemp_5
     V7_6+=Vtemp_6
     V7_7+=Vtemp_7
     V7_8+=Vtemp_8
     V7_9+=Vtemp_9
     V7_10+=Vtemp_10
     V7_11+=Vtemp_11
     V7_12+=Vtemp_12
     V7_13+=Vtemp_13
     V7_14+=Vtemp_14
     V7_15+=Vtemp_15
     V7_16+=Vtemp_16
     V7_17+=Vtemp_17
     V7_18+=Vtemp_18
     V7_19+=Vtemp_19
     V7_20+=Vtemp_20
#
#
     Vtemp_1=V7_1
     Vtemp_2=V7_2
     Vtemp_3=V7_3
     Vtemp_4=V7_4
     Vtemp_5=V7_5
     Vtemp_6=V7_6
     Vtemp_7=V7_7
     Vtemp_8=V7_8
     Vtemp_9=V7_9
     Vtemp_10=V7_10
     Vtemp_11=V7_11
     Vtemp_12=V7_12
     Vtemp_13=V7_13
     Vtemp_14=V7_14
     Vtemp_15=V7_15
     Vtemp_16=V7_16
     Vtemp_17=V7_17
     Vtemp_18=V7_18
     Vtemp_19=V7_19
     Vtemp_20=V7_20
#
     sqr=0.0
#
     etemp=V7_1*Vtemp_1
     sqr+=etemp
     etemp=V7_2*Vtemp_2
     sqr+=etemp
     etemp=V7_3*Vtemp_3
     sqr+=etemp
     etemp=V7_4*Vtemp_4
     sqr+=etemp
     etemp=V7_5*Vtemp_5
     sqr+=etemp
     etemp=V7_6*Vtemp_6
     sqr+=etemp
     etemp=V7_7*Vtemp_7
     sqr+=etemp
     etemp=V7_8*Vtemp_8
     sqr+=etemp
     etemp=V7_9*Vtemp_9
     sqr+=etemp
     etemp=V7_10*Vtemp_10
     sqr+=etemp
     etemp=V7_11*Vtemp_11
     sqr+=etemp
     etemp=V7_12*Vtemp_12
     sqr+=etemp
     etemp=V7_13*Vtemp_13
     sqr+=etemp
     etemp=V7_14*Vtemp_14
     sqr+=etemp
     etemp=V7_15*Vtemp_15
     sqr+=etemp
     etemp=V7_16*Vtemp_16
     sqr+=etemp
     etemp=V7_17*Vtemp_17
     sqr+=etemp
     etemp=V7_18*Vtemp_18
     sqr+=etemp
     etemp=V7_19*Vtemp_19
     sqr+=etemp
     etemp=V7_20*Vtemp_20
     sqr+=etemp
#
       exponent=0.5
#       execute square_root sqr exponent
#       sqr2=1.0/sqr
     execute norm_fac sqr exponent
     sqr2=sqr
#
     V7_1*=sqr2
     V7_2*=sqr2
     V7_3*=sqr2
     V7_4*=sqr2
     V7_5*=sqr2
     V7_6*=sqr2
     V7_7*=sqr2
     V7_8*=sqr2
     V7_9*=sqr2
     V7_10*=sqr2
     V7_11*=sqr2
     V7_12*=sqr2
     V7_13*=sqr2
     V7_14*=sqr2
     V7_15*=sqr2
     V7_16*=sqr2
     V7_17*=sqr2
     V7_18*=sqr2
     V7_19*=sqr2
     V7_20*=sqr2
#
#------8 vectors -------------------------------
#
     etemp2_1=V8_1
     etemp2_2=V8_2
     etemp2_3=V8_3
     etemp2_4=V8_4
     etemp2_5=V8_5
     etemp2_6=V8_6
     etemp2_7=V8_7
     etemp2_8=V8_8
     etemp2_9=V8_9
     etemp2_10=V8_10
     etemp2_11=V8_11
     etemp2_12=V8_12
     etemp2_13=V8_13
     etemp2_14=V8_14
     etemp2_15=V8_15
     etemp2_16=V8_16
     etemp2_17=V8_17
     etemp2_18=V8_18
     etemp2_19=V8_19
     etemp2_20=V8_20
#
     sqr=0.0
     etemp=V1_1*etemp2_1
     sqr+=etemp
     etemp=V1_2*etemp2_2
     sqr+=etemp
     etemp=V1_3*etemp2_3
     sqr+=etemp
     etemp=V1_4*etemp2_4
     sqr+=etemp
     etemp=V1_5*etemp2_5
     sqr+=etemp
     etemp=V1_6*etemp2_6
     sqr+=etemp
     etemp=V1_7*etemp2_7
     sqr+=etemp
     etemp=V1_8*etemp2_8
     sqr+=etemp
     etemp=V1_9*etemp2_9
     sqr+=etemp
     etemp=V1_10*etemp2_10
     sqr+=etemp
     etemp=V1_11*etemp2_11
     sqr+=etemp
     etemp=V1_12*etemp2_12
     sqr+=etemp
     etemp=V1_13*etemp2_13
     sqr+=etemp
     etemp=V1_14*etemp2_14
     sqr+=etemp
     etemp=V1_15*etemp2_15
     sqr+=etemp
     etemp=V1_16*etemp2_16
     sqr+=etemp
     etemp=V1_17*etemp2_17
     sqr+=etemp
     etemp=V1_18*etemp2_18
     sqr+=etemp
     etemp=V1_19*etemp2_19
     sqr+=etemp
     etemp=V1_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V1_1*sqr
     Vtemp_2=V1_2*sqr
     Vtemp_3=V1_3*sqr
     Vtemp_4=V1_4*sqr
     Vtemp_5=V1_5*sqr
     Vtemp_6=V1_6*sqr
     Vtemp_7=V1_7*sqr
     Vtemp_8=V1_8*sqr
     Vtemp_9=V1_9*sqr
     Vtemp_10=V1_10*sqr
     Vtemp_11=V1_11*sqr
     Vtemp_12=V1_12*sqr
     Vtemp_13=V1_13*sqr
     Vtemp_14=V1_14*sqr
     Vtemp_15=V1_15*sqr
     Vtemp_16=V1_16*sqr
     Vtemp_17=V1_17*sqr
     Vtemp_18=V1_18*sqr
     Vtemp_19=V1_19*sqr
     Vtemp_20=V1_20*sqr
#
     V8_1+=Vtemp_1
     V8_2+=Vtemp_2
     V8_3+=Vtemp_3
     V8_4+=Vtemp_4
     V8_5+=Vtemp_5
     V8_6+=Vtemp_6
     V8_7+=Vtemp_7
     V8_8+=Vtemp_8
     V8_9+=Vtemp_9
     V8_10+=Vtemp_10
     V8_11+=Vtemp_11
     V8_12+=Vtemp_12
     V8_13+=Vtemp_13
     V8_14+=Vtemp_14
     V8_15+=Vtemp_15
     V8_16+=Vtemp_16
     V8_17+=Vtemp_17
     V8_18+=Vtemp_18
     V8_19+=Vtemp_19
     V8_20+=Vtemp_20
#
#
     etemp2_1=V8_1
     etemp2_2=V8_2
     etemp2_3=V8_3
     etemp2_4=V8_4
     etemp2_5=V8_5
     etemp2_6=V8_6
     etemp2_7=V8_7
     etemp2_8=V8_8
     etemp2_9=V8_9
     etemp2_10=V8_10
     etemp2_11=V8_11
     etemp2_12=V8_12
     etemp2_13=V8_13
     etemp2_14=V8_14
     etemp2_15=V8_15
     etemp2_16=V8_16
     etemp2_17=V8_17
     etemp2_18=V8_18
     etemp2_19=V8_19
     etemp2_20=V8_20
#
     sqr=0.0
     etemp=V2_1*etemp2_1
     sqr+=etemp
     etemp=V2_2*etemp2_2
     sqr+=etemp
     etemp=V2_3*etemp2_3
     sqr+=etemp
     etemp=V2_4*etemp2_4
     sqr+=etemp
     etemp=V2_5*etemp2_5
     sqr+=etemp
     etemp=V2_6*etemp2_6
     sqr+=etemp
     etemp=V2_7*etemp2_7
     sqr+=etemp
     etemp=V2_8*etemp2_8
     sqr+=etemp
     etemp=V2_9*etemp2_9
     sqr+=etemp
     etemp=V2_10*etemp2_10
     sqr+=etemp
     etemp=V2_11*etemp2_11
     sqr+=etemp
     etemp=V2_12*etemp2_12
     sqr+=etemp
     etemp=V2_13*etemp2_13
     sqr+=etemp
     etemp=V2_14*etemp2_14
     sqr+=etemp
     etemp=V2_15*etemp2_15
     sqr+=etemp
     etemp=V2_16*etemp2_16
     sqr+=etemp
     etemp=V2_17*etemp2_17
     sqr+=etemp
     etemp=V2_18*etemp2_18
     sqr+=etemp
     etemp=V2_19*etemp2_19
     sqr+=etemp
     etemp=V2_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V2_1*sqr
     Vtemp_2=V2_2*sqr
     Vtemp_3=V2_3*sqr
     Vtemp_4=V2_4*sqr
     Vtemp_5=V2_5*sqr
     Vtemp_6=V2_6*sqr
     Vtemp_7=V2_7*sqr
     Vtemp_8=V2_8*sqr
     Vtemp_9=V2_9*sqr
     Vtemp_10=V2_10*sqr
     Vtemp_11=V2_11*sqr
     Vtemp_12=V2_12*sqr
     Vtemp_13=V2_13*sqr
     Vtemp_14=V2_14*sqr
     Vtemp_15=V2_15*sqr
     Vtemp_16=V2_16*sqr
     Vtemp_17=V2_17*sqr
     Vtemp_18=V2_18*sqr
     Vtemp_19=V2_19*sqr
     Vtemp_20=V2_20*sqr
#
     V8_1+=Vtemp_1
     V8_2+=Vtemp_2
     V8_3+=Vtemp_3
     V8_4+=Vtemp_4
     V8_5+=Vtemp_5
     V8_6+=Vtemp_6
     V8_7+=Vtemp_7
     V8_8+=Vtemp_8
     V8_9+=Vtemp_9
     V8_10+=Vtemp_10
     V8_11+=Vtemp_11
     V8_12+=Vtemp_12
     V8_13+=Vtemp_13
     V8_14+=Vtemp_14
     V8_15+=Vtemp_15
     V8_16+=Vtemp_16
     V8_17+=Vtemp_17
     V8_18+=Vtemp_18
     V8_19+=Vtemp_19
     V8_20+=Vtemp_20
#
#
     etemp2_1=V8_1
     etemp2_2=V8_2
     etemp2_3=V8_3
     etemp2_4=V8_4
     etemp2_5=V8_5
     etemp2_6=V8_6
     etemp2_7=V8_7
     etemp2_8=V8_8
     etemp2_9=V8_9
     etemp2_10=V8_10
     etemp2_11=V8_11
     etemp2_12=V8_12
     etemp2_13=V8_13
     etemp2_14=V8_14
     etemp2_15=V8_15
     etemp2_16=V8_16
     etemp2_17=V8_17
     etemp2_18=V8_18
     etemp2_19=V8_19
     etemp2_20=V8_20
#
     sqr=0.0
     etemp=V3_1*etemp2_1
     sqr+=etemp
     etemp=V3_2*etemp2_2
     sqr+=etemp
     etemp=V3_3*etemp2_3
     sqr+=etemp
     etemp=V3_4*etemp2_4
     sqr+=etemp
     etemp=V3_5*etemp2_5
     sqr+=etemp
     etemp=V3_6*etemp2_6
     sqr+=etemp
     etemp=V3_7*etemp2_7
     sqr+=etemp
     etemp=V3_8*etemp2_8
     sqr+=etemp
     etemp=V3_9*etemp2_9
     sqr+=etemp
     etemp=V3_10*etemp2_10
     sqr+=etemp
     etemp=V3_11*etemp2_11
     sqr+=etemp
     etemp=V3_12*etemp2_12
     sqr+=etemp
     etemp=V3_13*etemp2_13
     sqr+=etemp
     etemp=V3_14*etemp2_14
     sqr+=etemp
     etemp=V3_15*etemp2_15
     sqr+=etemp
     etemp=V3_16*etemp2_16
     sqr+=etemp
     etemp=V3_17*etemp2_17
     sqr+=etemp
     etemp2_12=V8_12
     etemp2_13=V8_13
     etemp2_14=V8_14
     etemp2_15=V8_15
     etemp2_16=V8_16
     etemp2_17=V8_17
     etemp2_18=V8_18
     etemp2_19=V8_19
     etemp2_20=V8_20
#
     sqr=0.0
     etemp=V5_1*etemp2_1
     sqr+=etemp
     etemp=V5_2*etemp2_2
     sqr+=etemp
     etemp=V5_3*etemp2_3
     sqr+=etemp
     etemp=V5_4*etemp2_4
     sqr+=etemp
     etemp=V5_5*etemp2_5
     sqr+=etemp
     etemp=V5_6*etemp2_6
     sqr+=etemp
     etemp=V5_7*etemp2_7
     sqr+=etemp
     etemp=V5_8*etemp2_8
     sqr+=etemp
     etemp=V5_9*etemp2_9
     sqr+=etemp
     etemp=V5_10*etemp2_10
     sqr+=etemp
     etemp=V5_11*etemp2_11
     sqr+=etemp
     etemp=V5_12*etemp2_12
     sqr+=etemp
     etemp=V5_13*etemp2_13
     sqr+=etemp
     etemp=V5_14*etemp2_14
     sqr+=etemp
     etemp=V5_15*etemp2_15
     sqr+=etemp
     etemp=V5_16*etemp2_16
     sqr+=etemp
     etemp=V5_17*etemp2_17
     sqr+=etemp
     etemp=V5_18*etemp2_18
     sqr+=etemp
     etemp=V5_19*etemp2_19
     sqr+=etemp
     etemp=V5_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V5_1*sqr
     Vtemp_2=V5_2*sqr
     Vtemp_3=V5_3*sqr
     Vtemp_4=V5_4*sqr
     Vtemp_5=V5_5*sqr
     Vtemp_6=V5_6*sqr
     Vtemp_7=V5_7*sqr
     Vtemp_8=V5_8*sqr
     Vtemp_9=V5_9*sqr
     Vtemp_10=V5_10*sqr
     Vtemp_11=V5_11*sqr
     Vtemp_12=V5_12*sqr
     Vtemp_13=V5_13*sqr
     Vtemp_14=V5_14*sqr
     Vtemp_15=V5_15*sqr
     Vtemp_16=V5_16*sqr
     Vtemp_17=V5_17*sqr
     Vtemp_18=V5_18*sqr
     Vtemp_19=V5_19*sqr
     Vtemp_20=V5_20*sqr
#
     V8_1+=Vtemp_1
     V8_2+=Vtemp_2
     V8_3+=Vtemp_3
     V8_4+=Vtemp_4
     V8_5+=Vtemp_5
     V8_6+=Vtemp_6
     V8_7+=Vtemp_7
     V8_8+=Vtemp_8
     V8_9+=Vtemp_9
     V8_10+=Vtemp_10
     V8_11+=Vtemp_11
     V8_12+=Vtemp_12
     V8_13+=Vtemp_13
     V8_14+=Vtemp_14
     V8_15+=Vtemp_15
     V8_16+=Vtemp_16
     V8_17+=Vtemp_17
     V8_18+=Vtemp_18
     V8_19+=Vtemp_19
     V8_20+=Vtemp_20
#
#
     etemp2_1=V8_1
     etemp2_2=V8_2
     etemp2_3=V8_3
     etemp2_4=V8_4
     etemp2_5=V8_5
     etemp2_6=V8_6
     etemp2_7=V8_7
     etemp2_8=V8_8
     etemp2_9=V8_9
     etemp2_10=V8_10
     etemp2_11=V8_11
     etemp2_12=V8_12
     etemp2_13=V8_13
     etemp2_14=V8_14
     etemp2_15=V8_15
     etemp2_16=V8_16
     etemp2_17=V8_17
     etemp2_18=V8_18
     etemp2_19=V8_19
     etemp2_20=V8_20
#
     sqr=0.0
     etemp=V6_1*etemp2_1
     sqr+=etemp
     etemp=V6_2*etemp2_2
     sqr+=etemp
     etemp=V6_3*etemp2_3
     sqr+=etemp
     etemp=V6_4*etemp2_4
     sqr+=etemp
     etemp=V6_5*etemp2_5
     sqr+=etemp
     etemp=V6_6*etemp2_6
     sqr+=etemp
     etemp=V6_7*etemp2_7
     sqr+=etemp
     etemp=V6_8*etemp2_8
     sqr+=etemp
     etemp=V6_9*etemp2_9
     sqr+=etemp
     etemp=V6_10*etemp2_10
     sqr+=etemp
     etemp=V6_11*etemp2_11
     sqr+=etemp
     etemp=V6_12*etemp2_12
     sqr+=etemp
     etemp=V6_13*etemp2_13
     sqr+=etemp
     etemp=V6_14*etemp2_14
     sqr+=etemp
     etemp=V6_15*etemp2_15
     sqr+=etemp
     etemp=V6_16*etemp2_16
     sqr+=etemp
     etemp=V6_17*etemp2_17
     sqr+=etemp
     etemp=V6_18*etemp2_18
     sqr+=etemp
     etemp=V6_19*etemp2_19
     sqr+=etemp
     etemp=V6_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V6_1*sqr
     Vtemp_2=V6_2*sqr
     Vtemp_3=V6_3*sqr
     Vtemp_4=V6_4*sqr
     Vtemp_5=V6_5*sqr
     Vtemp_6=V6_6*sqr
     Vtemp_7=V6_7*sqr
     Vtemp_8=V6_8*sqr
     Vtemp_9=V6_9*sqr
     Vtemp_10=V6_10*sqr
     Vtemp_11=V6_11*sqr
     Vtemp_12=V6_12*sqr
     Vtemp_13=V6_13*sqr
     Vtemp_14=V6_14*sqr
     Vtemp_15=V6_15*sqr
     Vtemp_16=V6_16*sqr
     Vtemp_17=V6_17*sqr
     Vtemp_18=V6_18*sqr
     Vtemp_19=V6_19*sqr
     Vtemp_20=V6_20*sqr
#
     V8_1+=Vtemp_1
     V8_2+=Vtemp_2
     V8_3+=Vtemp_3
     V8_4+=Vtemp_4
     V8_5+=Vtemp_5
     V8_6+=Vtemp_6
     V8_7+=Vtemp_7
     V8_8+=Vtemp_8
     V8_9+=Vtemp_9
     V8_10+=Vtemp_10
     V8_11+=Vtemp_11
     V8_12+=Vtemp_12
     V8_13+=Vtemp_13
     V8_14+=Vtemp_14
     V8_15+=Vtemp_15
     V8_16+=Vtemp_16
     V8_17+=Vtemp_17
     V8_18+=Vtemp_18
     V8_19+=Vtemp_19
     V8_20+=Vtemp_20
#
#
     etemp2_1=V8_1
     etemp2_2=V8_2
     etemp2_3=V8_3
     etemp2_4=V8_4
     etemp2_5=V8_5
     etemp2_6=V8_6
     etemp2_7=V8_7
     etemp2_8=V8_8
     etemp2_9=V8_9
     etemp2_10=V8_10
     etemp2_11=V8_11
     etemp2_12=V8_12
     etemp2_13=V8_13
     etemp2_14=V8_14
     etemp2_15=V8_15
     etemp2_16=V8_16
     etemp2_17=V8_17
     etemp2_18=V8_18
     etemp2_19=V8_19
     etemp2_20=V8_20
#
     sqr=0.0
     etemp=V7_1*etemp2_1
     sqr+=etemp
     etemp=V7_2*etemp2_2
     sqr+=etemp
     etemp=V7_3*etemp2_3
     sqr+=etemp
     etemp=V7_4*etemp2_4
     sqr+=etemp
     etemp=V7_5*etemp2_5
     sqr+=etemp
     etemp=V7_6*etemp2_6
     sqr+=etemp
     etemp=V7_7*etemp2_7
     sqr+=etemp
     etemp=V7_8*etemp2_8
     sqr+=etemp
     etemp=V7_9*etemp2_9
     sqr+=etemp
     etemp=V7_10*etemp2_10
     sqr+=etemp
     etemp=V7_11*etemp2_11
     sqr+=etemp
     etemp=V7_12*etemp2_12
     sqr+=etemp
     etemp=V7_13*etemp2_13
     sqr+=etemp
     etemp=V7_14*etemp2_14
     sqr+=etemp
     etemp=V7_15*etemp2_15
     sqr+=etemp
     etemp=V7_16*etemp2_16
     sqr+=etemp
     etemp=V7_17*etemp2_17
     sqr+=etemp
     etemp=V7_18*etemp2_18
     sqr+=etemp
     etemp=V7_19*etemp2_19
     sqr+=etemp
     etemp=V7_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V7_1*sqr
     Vtemp_2=V7_2*sqr
     Vtemp_3=V7_3*sqr
     Vtemp_4=V7_4*sqr
     Vtemp_5=V7_5*sqr
     Vtemp_6=V7_6*sqr
     Vtemp_7=V7_7*sqr
     Vtemp_8=V7_8*sqr
     Vtemp_9=V7_9*sqr
     Vtemp_10=V7_10*sqr
     Vtemp_11=V7_11*sqr
     Vtemp_12=V7_12*sqr
     Vtemp_13=V7_13*sqr
     Vtemp_14=V7_14*sqr
     Vtemp_15=V7_15*sqr
     Vtemp_16=V7_16*sqr
     Vtemp_17=V7_17*sqr
     Vtemp_18=V7_18*sqr
     Vtemp_19=V7_19*sqr
     Vtemp_20=V7_20*sqr
#
     V8_1+=Vtemp_1
     V8_2+=Vtemp_2
     V8_3+=Vtemp_3
     V8_4+=Vtemp_4
     V8_5+=Vtemp_5
     V8_6+=Vtemp_6
     V8_7+=Vtemp_7
     V8_8+=Vtemp_8
     V8_9+=Vtemp_9
     V8_10+=Vtemp_10
     V8_11+=Vtemp_11
     V8_12+=Vtemp_12
     V8_13+=Vtemp_13
     V8_14+=Vtemp_14
     V8_15+=Vtemp_15
     V8_16+=Vtemp_16
     V8_17+=Vtemp_17
     V8_18+=Vtemp_18
     V8_19+=Vtemp_19
     V8_20+=Vtemp_20
#
#
     Vtemp_1=V8_1
     Vtemp_2=V8_2
     Vtemp_3=V8_3
     Vtemp_4=V8_4
     Vtemp_5=V8_5
     Vtemp_6=V8_6
     Vtemp_7=V8_7
     Vtemp_8=V8_8
     Vtemp_9=V8_9
     Vtemp_10=V8_10
     Vtemp_11=V8_11
     Vtemp_12=V8_12
     Vtemp_13=V8_13
     Vtemp_14=V8_14
     Vtemp_15=V8_15
     Vtemp_16=V8_16
     Vtemp_17=V8_17
     Vtemp_18=V8_18
     Vtemp_19=V8_19
     Vtemp_20=V8_20
#
     sqr=0.0
#
     etemp=V8_1*Vtemp_1
     sqr+=etemp
     etemp=V8_2*Vtemp_2
     sqr+=etemp
     etemp=V8_3*Vtemp_3
     sqr+=etemp
     etemp=V8_4*Vtemp_4
     sqr+=etemp
     etemp=V8_5*Vtemp_5
     sqr+=etemp
     etemp=V8_6*Vtemp_6
     sqr+=etemp
     etemp=V8_7*Vtemp_7
     sqr+=etemp
     etemp=V8_8*Vtemp_8
     sqr+=etemp
     etemp=V8_9*Vtemp_9
     sqr+=etemp
     etemp=V8_10*Vtemp_10
     sqr+=etemp
     etemp=V8_11*Vtemp_11
     sqr+=etemp
     etemp=V8_12*Vtemp_12
     sqr+=etemp
     etemp=V8_13*Vtemp_13
     sqr+=etemp
     etemp=V8_14*Vtemp_14
     sqr+=etemp
     etemp=V8_15*Vtemp_15
     sqr+=etemp
     etemp=V8_16*Vtemp_16
     sqr+=etemp
     etemp=V8_17*Vtemp_17
     sqr+=etemp
     etemp=V8_18*Vtemp_18
     sqr+=etemp
     etemp=V8_19*Vtemp_19
     sqr+=etemp
     etemp=V8_20*Vtemp_20
     sqr+=etemp
#
       exponent=0.5
#       execute square_root sqr exponent
#       sqr2=1.0/sqr
     execute norm_fac sqr exponent
     sqr2=sqr
#
     V8_1*=sqr2
     V8_2*=sqr2
     V8_3*=sqr2
     V8_4*=sqr2
     V8_5*=sqr2
     V8_6*=sqr2
     V8_7*=sqr2
     V8_8*=sqr2
     V8_9*=sqr2
     V8_10*=sqr2
     V8_11*=sqr2
     V8_12*=sqr2
     V8_13*=sqr2
     V8_14*=sqr2
     V8_15*=sqr2
     V8_16*=sqr2
     V8_17*=sqr2
     V8_18*=sqr2
     V8_19*=sqr2
     V8_20*=sqr2
#
#------9 vectors -------------------------------
#
     etemp2_1=V9_1
     etemp2_2=V9_2
     etemp2_3=V9_3
     etemp2_4=V9_4
     etemp2_5=V9_5
     etemp2_6=V9_6
     etemp2_7=V9_7
     etemp2_8=V9_8
     etemp2_9=V9_9
     etemp2_10=V9_10
     etemp2_11=V9_11
     etemp2_12=V9_12
     etemp2_13=V9_13
     etemp2_14=V9_14
     etemp2_15=V9_15
     etemp2_16=V9_16
     etemp2_17=V9_17
     etemp2_18=V9_18
     etemp2_19=V9_19
     etemp2_20=V9_20
#
     sqr=0.0
     etemp=V1_1*etemp2_1
     sqr+=etemp
     etemp=V1_2*etemp2_2
     sqr+=etemp
     etemp=V1_3*etemp2_3
     sqr+=etemp
     etemp=V1_4*etemp2_4
     sqr+=etemp
     etemp=V1_5*etemp2_5
     sqr+=etemp
     etemp=V1_6*etemp2_6
     sqr+=etemp
     etemp=V1_7*etemp2_7
     sqr+=etemp
     etemp=V1_8*etemp2_8
     sqr+=etemp
     etemp=V1_9*etemp2_9
     sqr+=etemp
     etemp=V1_10*etemp2_10
     sqr+=etemp
     etemp=V1_11*etemp2_11
     sqr+=etemp
     etemp=V1_12*etemp2_12
     sqr+=etemp
     etemp=V1_13*etemp2_13
     sqr+=etemp
     etemp=V1_14*etemp2_14
     sqr+=etemp
     etemp=V1_15*etemp2_15
     sqr+=etemp
     etemp=V1_16*etemp2_16
     sqr+=etemp
     etemp=V1_17*etemp2_17
     sqr+=etemp
     etemp=V1_18*etemp2_18
     sqr+=etemp
     etemp=V1_19*etemp2_19
     sqr+=etemp
     etemp=V1_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V1_1*sqr
     Vtemp_2=V1_2*sqr
     Vtemp_3=V1_3*sqr
     Vtemp_4=V1_4*sqr
     Vtemp_5=V1_5*sqr
     Vtemp_6=V1_6*sqr
     Vtemp_7=V1_7*sqr
     Vtemp_8=V1_8*sqr
     Vtemp_9=V1_9*sqr
     Vtemp_10=V1_10*sqr
     Vtemp_11=V1_11*sqr
     Vtemp_12=V1_12*sqr
     Vtemp_13=V1_13*sqr
     Vtemp_14=V1_14*sqr
     Vtemp_15=V1_15*sqr
     Vtemp_16=V1_16*sqr
     Vtemp_17=V1_17*sqr
     Vtemp_18=V1_18*sqr
     Vtemp_19=V1_19*sqr
     Vtemp_20=V1_20*sqr
#
     V9_1+=Vtemp_1
     V9_2+=Vtemp_2
     V9_3+=Vtemp_3
     V9_4+=Vtemp_4
     V9_5+=Vtemp_5
     V9_6+=Vtemp_6
     V9_7+=Vtemp_7
     V9_8+=Vtemp_8
     V9_9+=Vtemp_9
     V9_10+=Vtemp_10
     V9_11+=Vtemp_11
     V9_12+=Vtemp_12
     V9_13+=Vtemp_13
     V9_14+=Vtemp_14
     V9_15+=Vtemp_15
     V9_16+=Vtemp_16
     V9_17+=Vtemp_17
     V9_18+=Vtemp_18
     V9_19+=Vtemp_19
     V9_20+=Vtemp_20
#
#
     etemp2_1=V9_1
     etemp2_2=V9_2
     etemp2_3=V9_3
     etemp2_4=V9_4
     etemp2_5=V9_5
     etemp2_6=V9_6
     etemp2_7=V9_7
     etemp2_8=V9_8
     etemp2_9=V9_9
     etemp2_10=V9_10
     etemp2_11=V9_11
     etemp2_12=V9_12
     etemp2_13=V9_13
     etemp2_14=V9_14
     etemp2_15=V9_15
     etemp2_16=V9_16
     etemp2_17=V9_17
     etemp2_18=V9_18
     etemp2_19=V9_19
     etemp2_20=V9_20
#
     sqr=0.0
     etemp=V2_1*etemp2_1
     sqr+=etemp
     etemp=V2_2*etemp2_2
     sqr+=etemp
     etemp=V2_3*etemp2_3
     sqr+=etemp
     etemp=V2_4*etemp2_4
     sqr+=etemp
     etemp=V2_5*etemp2_5
     sqr+=etemp
     etemp=V2_6*etemp2_6
     sqr+=etemp
     etemp=V2_7*etemp2_7
     sqr+=etemp
     etemp=V2_8*etemp2_8
     sqr+=etemp
     etemp=V2_9*etemp2_9
     sqr+=etemp
     etemp=V2_10*etemp2_10
     sqr+=etemp
     etemp=V2_11*etemp2_11
     sqr+=etemp
     etemp=V2_12*etemp2_12
     sqr+=etemp
     etemp=V2_13*etemp2_13
     sqr+=etemp
     etemp=V2_14*etemp2_14
     sqr+=etemp
     etemp=V2_15*etemp2_15
     sqr+=etemp
     etemp=V2_16*etemp2_16
     sqr+=etemp
     etemp=V2_17*etemp2_17
     sqr+=etemp
     etemp=V2_18*etemp2_18
     sqr+=etemp
     etemp=V2_19*etemp2_19
     sqr+=etemp
     etemp=V2_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V2_1*sqr
     Vtemp_2=V2_2*sqr
     Vtemp_3=V2_3*sqr
     Vtemp_4=V2_4*sqr
     Vtemp_5=V2_5*sqr
     Vtemp_6=V2_6*sqr
     Vtemp_7=V2_7*sqr
     Vtemp_8=V2_8*sqr
     Vtemp_9=V2_9*sqr
     Vtemp_10=V2_10*sqr
     Vtemp_11=V2_11*sqr
     Vtemp_12=V2_12*sqr
     Vtemp_13=V2_13*sqr
     Vtemp_14=V2_14*sqr
     Vtemp_15=V2_15*sqr
     Vtemp_16=V2_16*sqr
     Vtemp_17=V2_17*sqr
     Vtemp_18=V2_18*sqr
     Vtemp_19=V2_19*sqr
     Vtemp_20=V2_20*sqr
#
     V9_1+=Vtemp_1
     V9_2+=Vtemp_2
     V9_3+=Vtemp_3
     V9_4+=Vtemp_4
     V9_5+=Vtemp_5
     V9_6+=Vtemp_6
     V9_7+=Vtemp_7
     V9_8+=Vtemp_8
     V9_9+=Vtemp_9
     V9_10+=Vtemp_10
     V9_11+=Vtemp_11
     V9_12+=Vtemp_12
     V9_13+=Vtemp_13
     V9_14+=Vtemp_14
     V9_15+=Vtemp_15
     V9_16+=Vtemp_16
     V9_17+=Vtemp_17
     V9_18+=Vtemp_18
     V9_19+=Vtemp_19
     V9_20+=Vtemp_20
#
#
     etemp2_1=V9_1
     etemp2_2=V9_2
     etemp2_3=V9_3
     etemp2_4=V9_4
     etemp2_5=V9_5
     etemp2_6=V9_6
     etemp2_7=V9_7
     etemp2_8=V9_8
     etemp2_9=V9_9
     etemp2_10=V9_10
     etemp2_11=V9_11
     etemp2_12=V9_12
     etemp2_13=V9_13
     etemp2_14=V9_14
     etemp2_15=V9_15
     etemp2_16=V9_16
     etemp2_17=V9_17
     etemp2_18=V9_18
     etemp2_19=V9_19
     etemp2_20=V9_20
#
     sqr=0.0
     etemp=V3_1*etemp2_1
     sqr+=etemp
     etemp=V3_2*etemp2_2
     sqr+=etemp
     etemp=V3_3*etemp2_3
     sqr+=etemp
     etemp=V3_4*etemp2_4
     sqr+=etemp
     etemp=V3_5*etemp2_5
     sqr+=etemp
     etemp=V3_6*etemp2_6
     sqr+=etemp
     etemp=V3_7*etemp2_7
     sqr+=etemp
     etemp=V3_8*etemp2_8
     sqr+=etemp
     etemp=V3_9*etemp2_9
     sqr+=etemp
     etemp=V3_10*etemp2_10
     sqr+=etemp
     etemp=V3_11*etemp2_11
     sqr+=etemp
     etemp=V3_12*etemp2_12
     sqr+=etemp
     etemp=V3_13*etemp2_13
     sqr+=etemp
     etemp=V3_14*etemp2_14
     sqr+=etemp
     etemp=V3_15*etemp2_15
     sqr+=etemp
     etemp=V3_16*etemp2_16
     sqr+=etemp
     etemp=V3_17*etemp2_17
     sqr+=etemp
     etemp=V3_18*etemp2_18
     sqr+=etemp
     etemp=V3_19*etemp2_19
     sqr+=etemp
     etemp=V3_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V3_1*sqr
     Vtemp_2=V3_2*sqr
     Vtemp_3=V3_3*sqr
     Vtemp_4=V3_4*sqr
     Vtemp_5=V3_5*sqr
     Vtemp_6=V3_6*sqr
     Vtemp_7=V3_7*sqr
     Vtemp_8=V3_8*sqr
     Vtemp_9=V3_9*sqr
     Vtemp_10=V3_10*sqr
     Vtemp_11=V3_11*sqr
     Vtemp_12=V3_12*sqr
     Vtemp_13=V3_13*sqr
     Vtemp_14=V3_14*sqr
     Vtemp_15=V3_15*sqr
     Vtemp_16=V3_16*sqr
     Vtemp_17=V3_17*sqr
     Vtemp_18=V3_18*sqr
     Vtemp_19=V3_19*sqr
     Vtemp_20=V3_20*sqr
#
     V9_1+=Vtemp_1
     V9_2+=Vtemp_2
     V9_3+=Vtemp_3
     V9_4+=Vtemp_4
     V9_5+=Vtemp_5
     V9_6+=Vtemp_6
     V9_7+=Vtemp_7
     V9_8+=Vtemp_8
     V9_9+=Vtemp_9
     V9_10+=Vtemp_10
     V9_11+=Vtemp_11
     V9_12+=Vtemp_12
     V9_13+=Vtemp_13
     V9_14+=Vtemp_14
     V9_15+=Vtemp_15
     V9_16+=Vtemp_16
     V9_17+=Vtemp_17
     V9_18+=Vtemp_18
     V9_19+=Vtemp_19
     V9_20+=Vtemp_20
#
#
     etemp2_1=V9_1
     etemp2_2=V9_2
     etemp2_3=V9_3
     etemp2_4=V9_4
     etemp2_5=V9_5
     etemp2_6=V9_6
     etemp2_7=V9_7
     etemp2_8=V9_8
     etemp2_9=V9_9
     etemp2_10=V9_10
     etemp2_11=V9_11
     etemp2_12=V9_12
     etemp2_13=V9_13
     etemp2_14=V9_14
     etemp2_15=V9_15
     etemp2_16=V9_16
     etemp2_17=V9_17
     etemp2_18=V9_18
     etemp2_19=V9_19
     etemp2_20=V9_20
#
     sqr=0.0
     etemp=V4_1*etemp2_1
     sqr+=etemp
     etemp=V4_2*etemp2_2
     sqr+=etemp
     etemp=V4_3*etemp2_3
     sqr+=etemp
     etemp=V4_4*etemp2_4
     sqr+=etemp
     etemp=V4_5*etemp2_5
     sqr+=etemp
     etemp=V4_6*etemp2_6
     sqr+=etemp
     etemp=V4_7*etemp2_7
     sqr+=etemp
     etemp=V4_8*etemp2_8
     sqr+=etemp
     etemp=V4_9*etemp2_9
     sqr+=etemp
     etemp=V4_10*etemp2_10
     sqr+=etemp
     etemp=V4_11*etemp2_11
     sqr+=etemp
     etemp=V4_12*etemp2_12
     sqr+=etemp
     etemp=V4_13*etemp2_13
     sqr+=etemp
     etemp=V4_14*etemp2_14
     sqr+=etemp
     etemp=V4_15*etemp2_15
     sqr+=etemp
     etemp=V4_16*etemp2_16
     sqr+=etemp
     etemp=V4_17*etemp2_17
     sqr+=etemp
     etemp=V4_18*etemp2_18
     sqr+=etemp
     etemp=V4_19*etemp2_19
     sqr+=etemp
     etemp=V4_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V4_1*sqr
     Vtemp_2=V4_2*sqr
     Vtemp_3=V4_3*sqr
     Vtemp_4=V4_4*sqr
     Vtemp_5=V4_5*sqr
     Vtemp_6=V4_6*sqr
     Vtemp_7=V4_7*sqr
     Vtemp_8=V4_8*sqr
     Vtemp_9=V4_9*sqr
     Vtemp_10=V4_10*sqr
     Vtemp_11=V4_11*sqr
     Vtemp_12=V4_12*sqr
     Vtemp_13=V4_13*sqr
     Vtemp_14=V4_14*sqr
     Vtemp_15=V4_15*sqr
     Vtemp_16=V4_16*sqr
     Vtemp_17=V4_17*sqr
     Vtemp_18=V4_18*sqr
     Vtemp_19=V4_19*sqr
     Vtemp_20=V4_20*sqr
#
     V9_1+=Vtemp_1
     V9_2+=Vtemp_2
     V9_3+=Vtemp_3
     V9_4+=Vtemp_4
     V9_5+=Vtemp_5
     V9_6+=Vtemp_6
     V9_7+=Vtemp_7
     V9_8+=Vtemp_8
     V9_9+=Vtemp_9
     V9_10+=Vtemp_10
     V9_11+=Vtemp_11
     V9_12+=Vtemp_12
     V9_13+=Vtemp_13
     V9_14+=Vtemp_14
     V9_15+=Vtemp_15
     V9_16+=Vtemp_16
     V9_17+=Vtemp_17
     V9_18+=Vtemp_18
     V9_19+=Vtemp_19
     V9_20+=Vtemp_20
#
#
     etemp2_1=V9_1
     etemp2_2=V9_2
     etemp2_3=V9_3
     etemp2_4=V9_4
     etemp2_5=V9_5
     etemp2_6=V9_6
     etemp2_7=V9_7
     etemp2_8=V9_8
     etemp2_9=V9_9
     etemp2_10=V9_10
     etemp2_11=V9_11
     etemp2_12=V9_12
     etemp2_13=V9_13
     etemp2_14=V9_14
     etemp2_15=V9_15
     etemp2_16=V9_16
     etemp2_17=V9_17
     etemp2_18=V9_18
     etemp2_19=V9_19
     etemp2_20=V9_20
#
     sqr=0.0
     etemp=V5_1*etemp2_1
     sqr+=etemp
     etemp=V5_2*etemp2_2
     sqr+=etemp
     etemp=V5_3*etemp2_3
     sqr+=etemp
     etemp=V5_4*etemp2_4
     sqr+=etemp
     etemp=V5_5*etemp2_5
     sqr+=etemp
     etemp=V5_6*etemp2_6
     sqr+=etemp
     etemp=V5_7*etemp2_7
     sqr+=etemp
     etemp=V5_8*etemp2_8
     sqr+=etemp
     etemp=V5_9*etemp2_9
     sqr+=etemp
     etemp=V5_10*etemp2_10
     sqr+=etemp
     etemp=V5_11*etemp2_11
     sqr+=etemp
     etemp=V5_12*etemp2_12
     sqr+=etemp
     etemp=V5_13*etemp2_13
     sqr+=etemp
     etemp=V5_14*etemp2_14
     sqr+=etemp
     etemp=V5_15*etemp2_15
     sqr+=etemp
     etemp=V5_16*etemp2_16
     sqr+=etemp
     etemp=V5_17*etemp2_17
     sqr+=etemp
     etemp=V5_18*etemp2_18
     sqr+=etemp
     etemp=V5_19*etemp2_19
     sqr+=etemp
     etemp=V5_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V5_1*sqr
     Vtemp_2=V5_2*sqr
     Vtemp_3=V5_3*sqr
     Vtemp_4=V5_4*sqr
     Vtemp_5=V5_5*sqr
     Vtemp_6=V5_6*sqr
     Vtemp_7=V5_7*sqr
     Vtemp_8=V5_8*sqr
     Vtemp_9=V5_9*sqr
     Vtemp_10=V5_10*sqr
     Vtemp_11=V5_11*sqr
     Vtemp_12=V5_12*sqr
     Vtemp_13=V5_13*sqr
     Vtemp_14=V5_14*sqr
     Vtemp_15=V5_15*sqr
     Vtemp_16=V5_16*sqr
     Vtemp_17=V5_17*sqr
     Vtemp_18=V5_18*sqr
     Vtemp_19=V5_19*sqr
     Vtemp_20=V5_20*sqr
#
     V9_1+=Vtemp_1
     V9_2+=Vtemp_2
     V9_3+=Vtemp_3
     V9_4+=Vtemp_4
     V9_5+=Vtemp_5
     V9_6+=Vtemp_6
     V9_7+=Vtemp_7
     V9_8+=Vtemp_8
     V9_9+=Vtemp_9
     V9_10+=Vtemp_10
     V9_11+=Vtemp_11
     V9_12+=Vtemp_12
     V9_13+=Vtemp_13
     V9_14+=Vtemp_14
     V9_15+=Vtemp_15
     V9_16+=Vtemp_16
     V9_17+=Vtemp_17
     V9_18+=Vtemp_18
     V9_19+=Vtemp_19
     V9_20+=Vtemp_20
#
#
     etemp2_1=V9_1
     etemp2_2=V9_2
     etemp2_3=V9_3
     etemp2_4=V9_4
     etemp2_5=V9_5
     etemp2_6=V9_6
     etemp2_7=V9_7
     etemp2_8=V9_8
     etemp2_9=V9_9
     etemp2_10=V9_10
     etemp2_11=V9_11
     etemp2_12=V9_12
     etemp2_13=V9_13
     etemp2_14=V9_14
     etemp2_15=V9_15
     etemp2_16=V9_16
     etemp2_17=V9_17
     etemp2_18=V9_18
     etemp2_19=V9_19
     etemp2_20=V9_20
#
     sqr=0.0
     etemp=V6_1*etemp2_1
     sqr+=etemp
     etemp=V6_2*etemp2_2
     sqr+=etemp
     etemp=V6_3*etemp2_3
     sqr+=etemp
     etemp=V6_4*etemp2_4
     sqr+=etemp
     etemp=V6_5*etemp2_5
     sqr+=etemp
     etemp=V6_6*etemp2_6
     sqr+=etemp
     etemp=V6_7*etemp2_7
     sqr+=etemp
     etemp=V6_8*etemp2_8
     sqr+=etemp
     etemp=V6_9*etemp2_9
     sqr+=etemp
     etemp=V6_10*etemp2_10
     sqr+=etemp
     etemp=V6_11*etemp2_11
     sqr+=etemp
     etemp=V6_12*etemp2_12
     sqr+=etemp
     etemp=V6_13*etemp2_13
     sqr+=etemp
     etemp=V6_14*etemp2_14
     sqr+=etemp
     etemp=V6_15*etemp2_15
     sqr+=etemp
     etemp=V6_16*etemp2_16
     sqr+=etemp
     etemp=V6_17*etemp2_17
     sqr+=etemp
     etemp=V6_18*etemp2_18
     sqr+=etemp
     etemp=V6_19*etemp2_19
     sqr+=etemp
     etemp=V6_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V6_1*sqr
     Vtemp_2=V6_2*sqr
     Vtemp_3=V6_3*sqr
     Vtemp_4=V6_4*sqr
     Vtemp_5=V6_5*sqr
     Vtemp_6=V6_6*sqr
     Vtemp_7=V6_7*sqr
     Vtemp_8=V6_8*sqr
     Vtemp_9=V6_9*sqr
     Vtemp_10=V6_10*sqr
     Vtemp_11=V6_11*sqr
     Vtemp_12=V6_12*sqr
     Vtemp_13=V6_13*sqr
     Vtemp_14=V6_14*sqr
     Vtemp_15=V6_15*sqr
     Vtemp_16=V6_16*sqr
     Vtemp_17=V6_17*sqr
     Vtemp_18=V6_18*sqr
     Vtemp_19=V6_19*sqr
     Vtemp_20=V6_20*sqr
#
     V9_1+=Vtemp_1
     V9_2+=Vtemp_2
     V9_3+=Vtemp_3
     V9_4+=Vtemp_4
     V9_5+=Vtemp_5
     V9_6+=Vtemp_6
     V9_7+=Vtemp_7
     V9_8+=Vtemp_8
     V9_9+=Vtemp_9
     V9_10+=Vtemp_10
     V9_11+=Vtemp_11
     V9_12+=Vtemp_12
     V9_13+=Vtemp_13
     V9_14+=Vtemp_14
     V9_15+=Vtemp_15
     V9_16+=Vtemp_16
     V9_17+=Vtemp_17
     V9_18+=Vtemp_18
     V9_19+=Vtemp_19
     V9_20+=Vtemp_20
#
#
     etemp2_1=V9_1
     etemp2_2=V9_2
     etemp2_3=V9_3
     etemp2_4=V9_4
     etemp2_5=V9_5
     etemp2_6=V9_6
     etemp2_7=V9_7
     etemp2_8=V9_8
     etemp2_9=V9_9
     etemp2_10=V9_10
     etemp2_11=V9_11
     etemp2_12=V9_12
     etemp2_13=V9_13
     etemp2_14=V9_14
     etemp2_15=V9_15
     etemp2_16=V9_16
     etemp2_17=V9_17
     etemp2_18=V9_18
     etemp2_19=V9_19
     etemp2_20=V9_20
#
     sqr=0.0
     etemp=V7_1*etemp2_1
     sqr+=etemp
     etemp=V7_2*etemp2_2
     sqr+=etemp
     etemp=V7_3*etemp2_3
     sqr+=etemp
     etemp=V7_4*etemp2_4
     sqr+=etemp
     etemp=V7_5*etemp2_5
     sqr+=etemp
     etemp=V7_6*etemp2_6
     sqr+=etemp
     etemp=V7_7*etemp2_7
     sqr+=etemp
     etemp=V7_8*etemp2_8
     sqr+=etemp
     etemp=V7_9*etemp2_9
     sqr+=etemp
     etemp=V7_10*etemp2_10
     sqr+=etemp
     etemp=V7_11*etemp2_11
     sqr+=etemp
     etemp=V7_12*etemp2_12
     sqr+=etemp
     etemp=V7_13*etemp2_13
     sqr+=etemp
     etemp=V7_14*etemp2_14
     sqr+=etemp
     etemp=V7_15*etemp2_15
     sqr+=etemp
     etemp=V7_16*etemp2_16
     sqr+=etemp
     etemp=V7_17*etemp2_17
     sqr+=etemp
     etemp=V7_18*etemp2_18
     sqr+=etemp
     etemp=V7_19*etemp2_19
     sqr+=etemp
     etemp=V7_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V7_1*sqr
     Vtemp_2=V7_2*sqr
     Vtemp_3=V7_3*sqr
     Vtemp_4=V7_4*sqr
     Vtemp_5=V7_5*sqr
     Vtemp_6=V7_6*sqr
     Vtemp_7=V7_7*sqr
     Vtemp_8=V7_8*sqr
     Vtemp_9=V7_9*sqr
     Vtemp_10=V7_10*sqr
     Vtemp_11=V7_11*sqr
     Vtemp_12=V7_12*sqr
     Vtemp_13=V7_13*sqr
     Vtemp_14=V7_14*sqr
     Vtemp_15=V7_15*sqr
     Vtemp_16=V7_16*sqr
     Vtemp_17=V7_17*sqr
     Vtemp_18=V7_18*sqr
     Vtemp_19=V7_19*sqr
     Vtemp_20=V7_20*sqr
#
     V9_1+=Vtemp_1
     V9_2+=Vtemp_2
     V9_3+=Vtemp_3
     V9_4+=Vtemp_4
     V9_5+=Vtemp_5
     V9_6+=Vtemp_6
     V9_7+=Vtemp_7
     V9_8+=Vtemp_8
     V9_9+=Vtemp_9
     V9_10+=Vtemp_10
     V9_11+=Vtemp_11
     V9_12+=Vtemp_12
     V9_13+=Vtemp_13
     V9_14+=Vtemp_14
     V9_15+=Vtemp_15
     V9_16+=Vtemp_16
     V9_17+=Vtemp_17
     V9_18+=Vtemp_18
     V9_19+=Vtemp_19
     V9_20+=Vtemp_20
#
#
     etemp2_1=V9_1
     etemp2_2=V9_2
     etemp2_3=V9_3
     etemp2_4=V9_4
     etemp2_5=V9_5
     etemp2_6=V9_6
     etemp2_7=V9_7
     etemp2_8=V9_8
     etemp2_9=V9_9
     etemp2_10=V9_10
     etemp2_11=V9_11
     etemp2_12=V9_12
     etemp2_13=V9_13
     etemp2_14=V9_14
     etemp2_15=V9_15
     etemp2_16=V9_16
     etemp2_17=V9_17
     etemp2_18=V9_18
     etemp2_19=V9_19
     etemp2_20=V9_20
#
     sqr=0.0
     etemp=V8_1*etemp2_1
     sqr+=etemp
     etemp=V8_2*etemp2_2
     sqr+=etemp
     etemp=V8_3*etemp2_3
     sqr+=etemp
     etemp=V8_4*etemp2_4
     sqr+=etemp
     etemp=V8_5*etemp2_5
     sqr+=etemp
     etemp=V8_6*etemp2_6
     sqr+=etemp
     etemp=V8_7*etemp2_7
     sqr+=etemp
     etemp=V8_8*etemp2_8
     sqr+=etemp
     etemp=V8_9*etemp2_9
     sqr+=etemp
     etemp=V8_10*etemp2_10
     sqr+=etemp
     etemp=V8_11*etemp2_11
     sqr+=etemp
     etemp=V8_12*etemp2_12
     sqr+=etemp
     etemp=V8_13*etemp2_13
     sqr+=etemp
     etemp=V8_14*etemp2_14
     sqr+=etemp
     etemp=V8_15*etemp2_15
     sqr+=etemp
     etemp=V8_16*etemp2_16
     sqr+=etemp
     etemp=V8_17*etemp2_17
     sqr+=etemp
     etemp=V8_18*etemp2_18
     sqr+=etemp
     etemp=V8_19*etemp2_19
     sqr+=etemp
     etemp=V8_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V8_1*sqr
     Vtemp_2=V8_2*sqr
     Vtemp_3=V8_3*sqr
     Vtemp_4=V8_4*sqr
     Vtemp_5=V8_5*sqr
     Vtemp_6=V8_6*sqr
     Vtemp_7=V8_7*sqr
     Vtemp_8=V8_8*sqr
     Vtemp_9=V8_9*sqr
     Vtemp_10=V8_10*sqr
     Vtemp_11=V8_11*sqr
     Vtemp_12=V8_12*sqr
     Vtemp_13=V8_13*sqr
     Vtemp_14=V8_14*sqr
     Vtemp_15=V8_15*sqr
     Vtemp_16=V8_16*sqr
     Vtemp_17=V8_17*sqr
     Vtemp_18=V8_18*sqr
     Vtemp_19=V8_19*sqr
     Vtemp_20=V8_20*sqr
#
     V9_1+=Vtemp_1
     V9_2+=Vtemp_2
     V9_3+=Vtemp_3
     V9_4+=Vtemp_4
     V9_5+=Vtemp_5
     V9_6+=Vtemp_6
     V9_7+=Vtemp_7
     V9_8+=Vtemp_8
     V9_9+=Vtemp_9
     V9_10+=Vtemp_10
     V9_11+=Vtemp_11
     V9_12+=Vtemp_12
     V9_13+=Vtemp_13
     V9_14+=Vtemp_14
     V9_15+=Vtemp_15
     V9_16+=Vtemp_16
     V9_17+=Vtemp_17
     V9_18+=Vtemp_18
     V9_19+=Vtemp_19
     V9_20+=Vtemp_20
#
#
     Vtemp_1=V9_1
     Vtemp_2=V9_2
     Vtemp_3=V9_3
     Vtemp_4=V9_4
     Vtemp_5=V9_5
     Vtemp_6=V9_6
     Vtemp_7=V9_7
     Vtemp_8=V9_8
     Vtemp_9=V9_9
     Vtemp_10=V9_10
     Vtemp_11=V9_11
     Vtemp_12=V9_12
     Vtemp_13=V9_13
     Vtemp_14=V9_14
     Vtemp_15=V9_15
     Vtemp_16=V9_16
     Vtemp_17=V9_17
     Vtemp_18=V9_18
     Vtemp_19=V9_19
     Vtemp_20=V9_20
#
     sqr=0.0
#
     etemp=V9_1*Vtemp_1
     sqr+=etemp
     etemp=V9_2*Vtemp_2
     sqr+=etemp
     etemp=V9_3*Vtemp_3
     sqr+=etemp
     etemp=V9_4*Vtemp_4
     sqr+=etemp
     etemp=V9_5*Vtemp_5
     sqr+=etemp
     etemp=V9_6*Vtemp_6
     sqr+=etemp
     etemp=V9_7*Vtemp_7
     sqr+=etemp
     etemp=V9_8*Vtemp_8
     sqr+=etemp
     etemp=V9_9*Vtemp_9
     sqr+=etemp
     etemp=V9_10*Vtemp_10
     sqr+=etemp
     etemp=V9_11*Vtemp_11
     sqr+=etemp
     etemp=V9_12*Vtemp_12
     sqr+=etemp
     etemp=V9_13*Vtemp_13
     sqr+=etemp
     etemp=V9_14*Vtemp_14
     sqr+=etemp
     etemp=V9_15*Vtemp_15
     sqr+=etemp
     etemp=V9_16*Vtemp_16
     sqr+=etemp
     etemp=V9_17*Vtemp_17
     sqr+=etemp
     etemp=V9_18*Vtemp_18
     sqr+=etemp
     etemp=V9_19*Vtemp_19
     sqr+=etemp
     etemp=V9_20*Vtemp_20
     sqr+=etemp
#
       exponent=0.5
#       execute square_root sqr exponent
#       sqr2=1.0/sqr
     execute norm_fac sqr exponent
     sqr2=sqr
#
     V9_1*=sqr2
     V9_2*=sqr2
     V9_3*=sqr2
     V9_4*=sqr2
     V9_5*=sqr2
     V9_6*=sqr2
     V9_7*=sqr2
     V9_8*=sqr2
     V9_9*=sqr2
     V9_10*=sqr2
     V9_11*=sqr2
     V9_12*=sqr2
     V9_13*=sqr2
     V9_14*=sqr2
     V9_15*=sqr2
     V9_16*=sqr2
     V9_17*=sqr2
     V9_18*=sqr2
     V9_19*=sqr2
     V9_20*=sqr2
#
#------10 vectors -------------------------------
#
     etemp2_1=V10_1
     etemp2_2=V10_2
     etemp2_3=V10_3
     etemp2_4=V10_4
     etemp2_5=V10_5
     etemp2_6=V10_6
     etemp2_7=V10_7
     etemp2_8=V10_8
     etemp2_9=V10_9
     etemp2_10=V10_10
     etemp2_11=V10_11
     etemp2_12=V10_12
     etemp2_13=V10_13
     etemp2_14=V10_14
     etemp2_15=V10_15
     etemp2_16=V10_16
     etemp2_17=V10_17
     etemp2_18=V10_18
     etemp2_19=V10_19
     etemp2_20=V10_20
#
     sqr=0.0
     etemp=V1_1*etemp2_1
     sqr+=etemp
     etemp=V1_2*etemp2_2
     sqr+=etemp
     etemp=V1_3*etemp2_3
     sqr+=etemp
     etemp=V1_4*etemp2_4
     sqr+=etemp
     etemp=V1_5*etemp2_5
     sqr+=etemp
     etemp=V1_6*etemp2_6
     sqr+=etemp
     etemp=V1_7*etemp2_7
     sqr+=etemp
     etemp=V1_8*etemp2_8
     sqr+=etemp
     etemp=V1_9*etemp2_9
     sqr+=etemp
     etemp=V1_10*etemp2_10
     sqr+=etemp
     etemp=V1_11*etemp2_11
     sqr+=etemp
     etemp=V1_12*etemp2_12
     sqr+=etemp
     etemp=V1_13*etemp2_13
     sqr+=etemp
     etemp=V1_14*etemp2_14
     sqr+=etemp
     etemp=V1_15*etemp2_15
     sqr+=etemp
     etemp=V1_16*etemp2_16
     sqr+=etemp
     etemp=V1_17*etemp2_17
     sqr+=etemp
     etemp=V1_18*etemp2_18
     sqr+=etemp
     etemp=V1_19*etemp2_19
     sqr+=etemp
     etemp=V1_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V1_1*sqr
     Vtemp_2=V1_2*sqr
     Vtemp_3=V1_3*sqr
     Vtemp_4=V1_4*sqr
     Vtemp_5=V1_5*sqr
     Vtemp_6=V1_6*sqr
     Vtemp_7=V1_7*sqr
     Vtemp_8=V1_8*sqr
     Vtemp_9=V1_9*sqr
     Vtemp_10=V1_10*sqr
     Vtemp_11=V1_11*sqr
     Vtemp_12=V1_12*sqr
     Vtemp_13=V1_13*sqr
     Vtemp_14=V1_14*sqr
     Vtemp_15=V1_15*sqr
     Vtemp_16=V1_16*sqr
     Vtemp_17=V1_17*sqr
     Vtemp_18=V1_18*sqr
     Vtemp_19=V1_19*sqr
     Vtemp_20=V1_20*sqr
#
     V10_1+=Vtemp_1
     V10_2+=Vtemp_2
     V10_3+=Vtemp_3
     V10_4+=Vtemp_4
     V10_5+=Vtemp_5
     V10_6+=Vtemp_6
     V10_7+=Vtemp_7
     V10_8+=Vtemp_8
     V10_9+=Vtemp_9
     V10_10+=Vtemp_10
     V10_11+=Vtemp_11
     V10_12+=Vtemp_12
     V10_13+=Vtemp_13
     V10_14+=Vtemp_14
     V10_15+=Vtemp_15
     V10_16+=Vtemp_16
     V10_17+=Vtemp_17
     V10_18+=Vtemp_18
     V10_19+=Vtemp_19
     V10_20+=Vtemp_20
#
#
     etemp2_1=V10_1
     etemp2_2=V10_2
     etemp2_3=V10_3
     etemp2_4=V10_4
     etemp2_5=V10_5
     etemp2_6=V10_6
     etemp2_7=V10_7
     etemp2_8=V10_8
     etemp2_9=V10_9
     etemp2_10=V10_10
     etemp2_11=V10_11
     etemp2_12=V10_12
     etemp2_13=V10_13
     etemp2_14=V10_14
     etemp2_15=V10_15
     etemp2_16=V10_16
     etemp2_17=V10_17
     etemp2_18=V10_18
     etemp2_19=V10_19
     etemp2_20=V10_20
#
     sqr=0.0
     etemp=V2_1*etemp2_1
     sqr+=etemp
     etemp=V2_2*etemp2_2
     sqr+=etemp
     etemp=V2_3*etemp2_3
     sqr+=etemp
     etemp=V2_4*etemp2_4
     sqr+=etemp
     etemp=V2_5*etemp2_5
     sqr+=etemp
     etemp=V2_6*etemp2_6
     sqr+=etemp
     etemp=V2_7*etemp2_7
     sqr+=etemp
     etemp=V2_8*etemp2_8
     sqr+=etemp
     etemp=V2_9*etemp2_9
     sqr+=etemp
     etemp=V2_10*etemp2_10
     sqr+=etemp
     etemp=V2_11*etemp2_11
     sqr+=etemp
     etemp=V2_12*etemp2_12
     sqr+=etemp
     etemp=V2_13*etemp2_13
     sqr+=etemp
     etemp=V2_14*etemp2_14
     sqr+=etemp
     etemp=V2_15*etemp2_15
     sqr+=etemp
     etemp=V2_16*etemp2_16
     sqr+=etemp
     etemp=V2_17*etemp2_17
     sqr+=etemp
     etemp=V2_18*etemp2_18
     sqr+=etemp
     etemp=V2_19*etemp2_19
     sqr+=etemp
     etemp=V2_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V2_1*sqr
     Vtemp_2=V2_2*sqr
     Vtemp_3=V2_3*sqr
     Vtemp_4=V2_4*sqr
     Vtemp_5=V2_5*sqr
     Vtemp_6=V2_6*sqr
     Vtemp_7=V2_7*sqr
     Vtemp_8=V2_8*sqr
     Vtemp_9=V2_9*sqr
     Vtemp_10=V2_10*sqr
     Vtemp_11=V2_11*sqr
     Vtemp_12=V2_12*sqr
     Vtemp_13=V2_13*sqr
     Vtemp_14=V2_14*sqr
     Vtemp_15=V2_15*sqr
     Vtemp_16=V2_16*sqr
     Vtemp_17=V2_17*sqr
     Vtemp_18=V2_18*sqr
     Vtemp_19=V2_19*sqr
     Vtemp_20=V2_20*sqr
#
     V10_1+=Vtemp_1
     V10_2+=Vtemp_2
     V10_3+=Vtemp_3
     V10_4+=Vtemp_4
     V10_5+=Vtemp_5
     V10_6+=Vtemp_6
     V10_7+=Vtemp_7
     V10_8+=Vtemp_8
     V10_9+=Vtemp_9
     V10_10+=Vtemp_10
     V10_11+=Vtemp_11
     V10_12+=Vtemp_12
     V10_13+=Vtemp_13
     V10_14+=Vtemp_14
     V10_15+=Vtemp_15
     V10_16+=Vtemp_16
     V10_17+=Vtemp_17
     V10_18+=Vtemp_18
     V10_19+=Vtemp_19
     V10_20+=Vtemp_20
#
#
     etemp2_1=V10_1
     etemp2_2=V10_2
     etemp2_3=V10_3
     etemp2_4=V10_4
     etemp2_5=V10_5
     etemp2_6=V10_6
     etemp2_7=V10_7
     etemp2_8=V10_8
     etemp2_9=V10_9
     etemp2_10=V10_10
     etemp2_11=V10_11
     etemp2_12=V10_12
     etemp2_13=V10_13
     etemp2_14=V10_14
     etemp2_15=V10_15
     etemp2_16=V10_16
     etemp2_17=V10_17
     etemp2_18=V10_18
     etemp2_19=V10_19
     etemp2_20=V10_20
#
     sqr=0.0
     etemp=V3_1*etemp2_1
     sqr+=etemp
     etemp=V3_2*etemp2_2
     sqr+=etemp
     etemp=V3_3*etemp2_3
     sqr+=etemp
     etemp=V3_4*etemp2_4
     sqr+=etemp
     etemp=V3_5*etemp2_5
     sqr+=etemp
     etemp=V3_6*etemp2_6
     sqr+=etemp
     etemp=V3_7*etemp2_7
     sqr+=etemp
     etemp=V3_8*etemp2_8
     sqr+=etemp
     etemp=V3_9*etemp2_9
     sqr+=etemp
     etemp=V3_10*etemp2_10
     sqr+=etemp
     etemp=V3_11*etemp2_11
     sqr+=etemp
     etemp=V3_12*etemp2_12
     sqr+=etemp
     etemp=V3_13*etemp2_13
     sqr+=etemp
     etemp=V3_14*etemp2_14
     sqr+=etemp
     etemp=V3_15*etemp2_15
     sqr+=etemp
     etemp=V3_16*etemp2_16
     sqr+=etemp
     etemp=V3_17*etemp2_17
     sqr+=etemp
     etemp=V3_18*etemp2_18
     sqr+=etemp
     etemp=V3_19*etemp2_19
     sqr+=etemp
     etemp=V3_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V3_1*sqr
     Vtemp_2=V3_2*sqr
     Vtemp_3=V3_3*sqr
     Vtemp_4=V3_4*sqr
     Vtemp_5=V3_5*sqr
     Vtemp_6=V3_6*sqr
     Vtemp_7=V3_7*sqr
     Vtemp_8=V3_8*sqr
     Vtemp_9=V3_9*sqr
     Vtemp_10=V3_10*sqr
     Vtemp_11=V3_11*sqr
     Vtemp_12=V3_12*sqr
     Vtemp_13=V3_13*sqr
     Vtemp_14=V3_14*sqr
     Vtemp_15=V3_15*sqr
     Vtemp_16=V3_16*sqr
     Vtemp_17=V3_17*sqr
     Vtemp_18=V3_18*sqr
     Vtemp_19=V3_19*sqr
     Vtemp_20=V3_20*sqr
#
     V10_1+=Vtemp_1
     V10_2+=Vtemp_2
     V10_3+=Vtemp_3
     V10_4+=Vtemp_4
     V10_5+=Vtemp_5
     V10_6+=Vtemp_6
     V10_7+=Vtemp_7
     V10_8+=Vtemp_8
     V10_9+=Vtemp_9
     V10_10+=Vtemp_10
     V10_11+=Vtemp_11
     V10_12+=Vtemp_12
     V10_13+=Vtemp_13
     V10_14+=Vtemp_14
     V10_15+=Vtemp_15
     V10_16+=Vtemp_16
     V10_17+=Vtemp_17
     V10_18+=Vtemp_18
     V10_19+=Vtemp_19
     V10_20+=Vtemp_20
#
#
     etemp2_1=V10_1
     etemp2_2=V10_2
     etemp2_3=V10_3
     etemp2_4=V10_4
     etemp2_5=V10_5
     etemp2_6=V10_6
     etemp2_7=V10_7
     etemp2_8=V10_8
     etemp2_9=V10_9
     etemp2_10=V10_10
     etemp2_11=V10_11
     etemp2_12=V10_12
     etemp2_13=V10_13
     etemp2_14=V10_14
     etemp2_15=V10_15
     etemp2_16=V10_16
     etemp2_17=V10_17
     etemp2_18=V10_18
     etemp2_19=V10_19
     etemp2_20=V10_20
#
     sqr=0.0
     etemp=V4_1*etemp2_1
     sqr+=etemp
     etemp=V4_2*etemp2_2
     sqr+=etemp
     etemp=V4_3*etemp2_3
     sqr+=etemp
     etemp=V4_4*etemp2_4
     sqr+=etemp
     etemp=V4_5*etemp2_5
     sqr+=etemp
     etemp=V4_6*etemp2_6
     sqr+=etemp
     etemp=V4_7*etemp2_7
     sqr+=etemp
     etemp=V4_8*etemp2_8
     sqr+=etemp
     etemp=V4_9*etemp2_9
     sqr+=etemp
     etemp=V4_10*etemp2_10
     sqr+=etemp
     etemp=V4_11*etemp2_11
     sqr+=etemp
     etemp=V4_12*etemp2_12
     sqr+=etemp
     etemp=V4_13*etemp2_13
     sqr+=etemp
     etemp=V4_14*etemp2_14
     sqr+=etemp
     etemp=V4_15*etemp2_15
     sqr+=etemp
     etemp=V4_16*etemp2_16
     sqr+=etemp
     etemp=V4_17*etemp2_17
     sqr+=etemp
     etemp=V4_18*etemp2_18
     sqr+=etemp
     etemp=V4_19*etemp2_19
     sqr+=etemp
     etemp=V4_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V4_1*sqr
     Vtemp_2=V4_2*sqr
     Vtemp_3=V4_3*sqr
     Vtemp_4=V4_4*sqr
     Vtemp_5=V4_5*sqr
     Vtemp_6=V4_6*sqr
     Vtemp_7=V4_7*sqr
     Vtemp_8=V4_8*sqr
     Vtemp_9=V4_9*sqr
     Vtemp_10=V4_10*sqr
     Vtemp_11=V4_11*sqr
     Vtemp_12=V4_12*sqr
     Vtemp_13=V4_13*sqr
     Vtemp_14=V4_14*sqr
     Vtemp_15=V4_15*sqr
     Vtemp_16=V4_16*sqr
     Vtemp_17=V4_17*sqr
     Vtemp_18=V4_18*sqr
     Vtemp_19=V4_19*sqr
     Vtemp_20=V4_20*sqr
#
     V10_1+=Vtemp_1
     V10_2+=Vtemp_2
     V10_3+=Vtemp_3
     V10_4+=Vtemp_4
     V10_5+=Vtemp_5
     V10_6+=Vtemp_6
     V10_7+=Vtemp_7
     V10_8+=Vtemp_8
     V10_9+=Vtemp_9
     V10_10+=Vtemp_10
     V10_11+=Vtemp_11
     V10_12+=Vtemp_12
     V10_13+=Vtemp_13
     V10_14+=Vtemp_14
     V10_15+=Vtemp_15
     V10_16+=Vtemp_16
     V10_17+=Vtemp_17
     V10_18+=Vtemp_18
     V10_19+=Vtemp_19
     V10_20+=Vtemp_20
#
#
     etemp2_1=V10_1
     etemp2_2=V10_2
     etemp2_3=V10_3
     etemp2_4=V10_4
     etemp2_5=V10_5
     etemp2_6=V10_6
     etemp2_7=V10_7
     etemp2_8=V10_8
     etemp2_9=V10_9
     etemp2_10=V10_10
     etemp2_11=V10_11
     etemp2_12=V10_12
     etemp2_13=V10_13
     etemp2_14=V10_14
     etemp2_15=V10_15
     etemp2_16=V10_16
     etemp2_17=V10_17
     etemp2_18=V10_18
     etemp2_19=V10_19
     etemp2_20=V10_20
#
     sqr=0.0
     etemp=V5_1*etemp2_1
     sqr+=etemp
     etemp=V5_2*etemp2_2
     sqr+=etemp
     etemp=V5_3*etemp2_3
     sqr+=etemp
     etemp=V5_4*etemp2_4
     sqr+=etemp
     etemp=V5_5*etemp2_5
     sqr+=etemp
     etemp=V5_6*etemp2_6
     sqr+=etemp
     etemp=V5_7*etemp2_7
     sqr+=etemp
     etemp=V5_8*etemp2_8
     sqr+=etemp
     etemp=V5_9*etemp2_9
     sqr+=etemp
     etemp=V5_10*etemp2_10
     sqr+=etemp
     etemp=V5_11*etemp2_11
     sqr+=etemp
     etemp=V5_12*etemp2_12
     sqr+=etemp
     etemp=V5_13*etemp2_13
     sqr+=etemp
     etemp=V5_14*etemp2_14
     sqr+=etemp
     etemp=V5_15*etemp2_15
     sqr+=etemp
     etemp=V5_16*etemp2_16
     sqr+=etemp
     etemp=V5_17*etemp2_17
     sqr+=etemp
     etemp=V5_18*etemp2_18
     sqr+=etemp
     etemp=V5_19*etemp2_19
     sqr+=etemp
     etemp=V5_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V5_1*sqr
     Vtemp_2=V5_2*sqr
     Vtemp_3=V5_3*sqr
     Vtemp_4=V5_4*sqr
     Vtemp_5=V5_5*sqr
     Vtemp_6=V5_6*sqr
     Vtemp_7=V5_7*sqr
     Vtemp_8=V5_8*sqr
     Vtemp_9=V5_9*sqr
     Vtemp_10=V5_10*sqr
     Vtemp_11=V5_11*sqr
     Vtemp_12=V5_12*sqr
     Vtemp_13=V5_13*sqr
     Vtemp_14=V5_14*sqr
     Vtemp_15=V5_15*sqr
     Vtemp_16=V5_16*sqr
     Vtemp_17=V5_17*sqr
     Vtemp_18=V5_18*sqr
     Vtemp_19=V5_19*sqr
     Vtemp_20=V5_20*sqr
#
     V10_1+=Vtemp_1
     V10_2+=Vtemp_2
     V10_3+=Vtemp_3
     V10_4+=Vtemp_4
     V10_5+=Vtemp_5
     V10_6+=Vtemp_6
     V10_7+=Vtemp_7
     V10_8+=Vtemp_8
     V10_9+=Vtemp_9
     V10_10+=Vtemp_10
     V10_11+=Vtemp_11
     V10_12+=Vtemp_12
     V10_13+=Vtemp_13
     V10_14+=Vtemp_14
     V10_15+=Vtemp_15
     V10_16+=Vtemp_16
     V10_17+=Vtemp_17
     V10_18+=Vtemp_18
     V10_19+=Vtemp_19
     V10_20+=Vtemp_20
#
#
     etemp2_1=V10_1
     etemp2_2=V10_2
     etemp2_3=V10_3
     etemp2_4=V10_4
     etemp2_5=V10_5
     etemp2_6=V10_6
     etemp2_7=V10_7
     etemp2_8=V10_8
     etemp2_9=V10_9
     etemp2_10=V10_10
     etemp2_11=V10_11
     etemp2_12=V10_12
     etemp2_13=V10_13
     etemp2_14=V10_14
     etemp2_15=V10_15
     etemp2_16=V10_16
     etemp2_17=V10_17
     etemp2_18=V10_18
     etemp2_19=V10_19
     etemp2_20=V10_20
#
     sqr=0.0
     etemp=V6_1*etemp2_1
     sqr+=etemp
     etemp=V6_2*etemp2_2
     sqr+=etemp
     etemp=V6_3*etemp2_3
     sqr+=etemp
     etemp=V6_4*etemp2_4
     sqr+=etemp
     etemp=V6_5*etemp2_5
     sqr+=etemp
     etemp=V6_6*etemp2_6
     sqr+=etemp
     etemp=V6_7*etemp2_7
     sqr+=etemp
     etemp=V6_8*etemp2_8
     sqr+=etemp
     etemp=V6_9*etemp2_9
     sqr+=etemp
     etemp=V6_10*etemp2_10
     sqr+=etemp
     etemp=V6_11*etemp2_11
     sqr+=etemp
     etemp=V6_12*etemp2_12
     sqr+=etemp
     etemp=V6_13*etemp2_13
     sqr+=etemp
     etemp=V6_14*etemp2_14
     sqr+=etemp
     etemp=V6_15*etemp2_15
     sqr+=etemp
     etemp=V6_16*etemp2_16
     sqr+=etemp
     etemp=V6_17*etemp2_17
     sqr+=etemp
     etemp=V6_18*etemp2_18
     sqr+=etemp
     etemp=V6_19*etemp2_19
     sqr+=etemp
     etemp=V6_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V6_1*sqr
     Vtemp_2=V6_2*sqr
     Vtemp_3=V6_3*sqr
     Vtemp_4=V6_4*sqr
     Vtemp_5=V6_5*sqr
     Vtemp_6=V6_6*sqr
     Vtemp_7=V6_7*sqr
     Vtemp_8=V6_8*sqr
     Vtemp_9=V6_9*sqr
     Vtemp_10=V6_10*sqr
     Vtemp_11=V6_11*sqr
     Vtemp_12=V6_12*sqr
     Vtemp_13=V6_13*sqr
     Vtemp_14=V6_14*sqr
     Vtemp_15=V6_15*sqr
     Vtemp_16=V6_16*sqr
     Vtemp_17=V6_17*sqr
     Vtemp_18=V6_18*sqr
     Vtemp_19=V6_19*sqr
     Vtemp_20=V6_20*sqr
#
     V10_1+=Vtemp_1
     V10_2+=Vtemp_2
     V10_3+=Vtemp_3
     V10_4+=Vtemp_4
     V10_5+=Vtemp_5
     V10_6+=Vtemp_6
     V10_7+=Vtemp_7
     V10_8+=Vtemp_8
     V10_9+=Vtemp_9
     V10_10+=Vtemp_10
     V10_11+=Vtemp_11
     V10_12+=Vtemp_12
     V10_13+=Vtemp_13
     V10_14+=Vtemp_14
     V10_15+=Vtemp_15
     V10_16+=Vtemp_16
     V10_17+=Vtemp_17
     V10_18+=Vtemp_18
     V10_19+=Vtemp_19
     V10_20+=Vtemp_20
#
#
     etemp2_1=V10_1
     etemp2_2=V10_2
     etemp2_3=V10_3
     etemp2_4=V10_4
     etemp2_5=V10_5
     etemp2_6=V10_6
     etemp2_7=V10_7
     etemp2_8=V10_8
     etemp2_9=V10_9
     etemp2_10=V10_10
     etemp2_11=V10_11
     etemp2_12=V10_12
     etemp2_13=V10_13
     etemp2_14=V10_14
     etemp2_15=V10_15
     etemp2_16=V10_16
     etemp2_17=V10_17
     etemp2_18=V10_18
     etemp2_19=V10_19
     etemp2_20=V10_20
#
     sqr=0.0
     etemp=V7_1*etemp2_1
     sqr+=etemp
     etemp=V7_2*etemp2_2
     sqr+=etemp
     etemp=V7_3*etemp2_3
     sqr+=etemp
     etemp=V7_4*etemp2_4
     sqr+=etemp
     etemp=V7_5*etemp2_5
     sqr+=etemp
     etemp=V7_6*etemp2_6
     sqr+=etemp
     etemp=V7_7*etemp2_7
     sqr+=etemp
     etemp=V7_8*etemp2_8
     sqr+=etemp
     etemp=V7_9*etemp2_9
     sqr+=etemp
     etemp=V7_10*etemp2_10
     sqr+=etemp
     etemp=V7_11*etemp2_11
     sqr+=etemp
     etemp=V7_12*etemp2_12
     sqr+=etemp
     etemp=V7_13*etemp2_13
     sqr+=etemp
     etemp=V7_14*etemp2_14
     sqr+=etemp
     etemp=V7_15*etemp2_15
     sqr+=etemp
     etemp=V7_16*etemp2_16
     sqr+=etemp
     etemp=V7_17*etemp2_17
     sqr+=etemp
     etemp=V7_18*etemp2_18
     sqr+=etemp
     etemp=V7_19*etemp2_19
     sqr+=etemp
     etemp=V7_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V7_1*sqr
     Vtemp_2=V7_2*sqr
     Vtemp_3=V7_3*sqr
     Vtemp_4=V7_4*sqr
     Vtemp_5=V7_5*sqr
     Vtemp_6=V7_6*sqr
     Vtemp_7=V7_7*sqr
     Vtemp_8=V7_8*sqr
     Vtemp_9=V7_9*sqr
     Vtemp_10=V7_10*sqr
     Vtemp_11=V7_11*sqr
     Vtemp_12=V7_12*sqr
     Vtemp_13=V7_13*sqr
     Vtemp_14=V7_14*sqr
     Vtemp_15=V7_15*sqr
     Vtemp_16=V7_16*sqr
     Vtemp_17=V7_17*sqr
     Vtemp_18=V7_18*sqr
     Vtemp_19=V7_19*sqr
     Vtemp_20=V7_20*sqr
#
     V10_1+=Vtemp_1
     V10_2+=Vtemp_2
     V10_3+=Vtemp_3
     V10_4+=Vtemp_4
     V10_5+=Vtemp_5
     V10_6+=Vtemp_6
     V10_7+=Vtemp_7
     V10_8+=Vtemp_8
     V10_9+=Vtemp_9
     V10_10+=Vtemp_10
     V10_11+=Vtemp_11
     V10_12+=Vtemp_12
     V10_13+=Vtemp_13
     V10_14+=Vtemp_14
     V10_15+=Vtemp_15
     V10_16+=Vtemp_16
     V10_17+=Vtemp_17
     V10_18+=Vtemp_18
     V10_19+=Vtemp_19
     V10_20+=Vtemp_20
#
#
     etemp2_1=V10_1
     etemp2_2=V10_2
     etemp2_3=V10_3
     etemp2_4=V10_4
     etemp2_5=V10_5
     etemp2_6=V10_6
     etemp2_7=V10_7
     etemp2_8=V10_8
     etemp2_9=V10_9
     etemp2_10=V10_10
     etemp2_11=V10_11
     etemp2_12=V10_12
     etemp2_13=V10_13
     etemp2_14=V10_14
     etemp2_15=V10_15
     etemp2_16=V10_16
     etemp2_17=V10_17
     etemp2_18=V10_18
     etemp2_19=V10_19
     etemp2_20=V10_20
#
     sqr=0.0
     etemp=V8_1*etemp2_1
     sqr+=etemp
     etemp=V8_2*etemp2_2
     sqr+=etemp
     etemp=V8_3*etemp2_3
     sqr+=etemp
     etemp=V8_4*etemp2_4
     sqr+=etemp
     etemp=V8_5*etemp2_5
     sqr+=etemp
     etemp=V8_6*etemp2_6
     sqr+=etemp
     etemp=V8_7*etemp2_7
     sqr+=etemp
     etemp=V8_8*etemp2_8
     sqr+=etemp
     etemp=V8_9*etemp2_9
     sqr+=etemp
     etemp=V8_10*etemp2_10
     sqr+=etemp
     etemp=V8_11*etemp2_11
     sqr+=etemp
     etemp=V8_12*etemp2_12
     sqr+=etemp
     etemp=V8_13*etemp2_13
     sqr+=etemp
     etemp=V8_14*etemp2_14
     sqr+=etemp
     etemp=V8_15*etemp2_15
     sqr+=etemp
     etemp=V8_16*etemp2_16
     sqr+=etemp
     etemp=V8_17*etemp2_17
     sqr+=etemp
     etemp=V8_18*etemp2_18
     sqr+=etemp
     etemp=V8_19*etemp2_19
     sqr+=etemp
     etemp=V8_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V8_1*sqr
     Vtemp_2=V8_2*sqr
     Vtemp_3=V8_3*sqr
     Vtemp_4=V8_4*sqr
     Vtemp_5=V8_5*sqr
     Vtemp_6=V8_6*sqr
     Vtemp_7=V8_7*sqr
     Vtemp_8=V8_8*sqr
     Vtemp_9=V8_9*sqr
     Vtemp_10=V8_10*sqr
     Vtemp_11=V8_11*sqr
     Vtemp_12=V8_12*sqr
     Vtemp_13=V8_13*sqr
     Vtemp_14=V8_14*sqr
     Vtemp_15=V8_15*sqr
     Vtemp_16=V8_16*sqr
     Vtemp_17=V8_17*sqr
     Vtemp_18=V8_18*sqr
     Vtemp_19=V8_19*sqr
     Vtemp_20=V8_20*sqr
#
     V10_1+=Vtemp_1
     V10_2+=Vtemp_2
     V10_3+=Vtemp_3
     V10_4+=Vtemp_4
     V10_5+=Vtemp_5
     V10_6+=Vtemp_6
     V10_7+=Vtemp_7
     V10_8+=Vtemp_8
     V10_9+=Vtemp_9
     V10_10+=Vtemp_10
     V10_11+=Vtemp_11
     V10_12+=Vtemp_12
     V10_13+=Vtemp_13
     V10_14+=Vtemp_14
     V10_15+=Vtemp_15
     V10_16+=Vtemp_16
     V10_17+=Vtemp_17
     V10_18+=Vtemp_18
     V10_19+=Vtemp_19
     V10_20+=Vtemp_20
#
#
     etemp2_1=V10_1
     etemp2_2=V10_2
     etemp2_3=V10_3
     etemp2_4=V10_4
     etemp2_5=V10_5
     etemp2_6=V10_6
     etemp2_7=V10_7
     etemp2_8=V10_8
     etemp2_9=V10_9
     etemp2_10=V10_10
     etemp2_11=V10_11
     etemp2_12=V10_12
     etemp2_13=V10_13
     etemp2_14=V10_14
     etemp2_15=V10_15
     etemp2_16=V10_16
     etemp2_17=V10_17
     etemp2_18=V10_18
     etemp2_19=V10_19
     etemp2_20=V10_20
#
     sqr=0.0
     etemp=V9_1*etemp2_1
     sqr+=etemp
     etemp=V9_2*etemp2_2
     sqr+=etemp
     etemp=V9_3*etemp2_3
     sqr+=etemp
     etemp=V9_4*etemp2_4
     sqr+=etemp
     etemp=V9_5*etemp2_5
     sqr+=etemp
     etemp=V9_6*etemp2_6
     sqr+=etemp
     etemp=V9_7*etemp2_7
     sqr+=etemp
     etemp=V9_8*etemp2_8
     sqr+=etemp
     etemp=V9_9*etemp2_9
     sqr+=etemp
     etemp=V9_10*etemp2_10
     sqr+=etemp
     etemp=V9_11*etemp2_11
     sqr+=etemp
     etemp=V9_12*etemp2_12
     sqr+=etemp
     etemp=V9_13*etemp2_13
     sqr+=etemp
     etemp=V9_14*etemp2_14
     sqr+=etemp
     etemp=V9_15*etemp2_15
     sqr+=etemp
     etemp=V9_16*etemp2_16
     sqr+=etemp
     etemp=V9_17*etemp2_17
     sqr+=etemp
     etemp=V9_18*etemp2_18
     sqr+=etemp
     etemp=V9_19*etemp2_19
     sqr+=etemp
     etemp=V9_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V9_1*sqr
     Vtemp_2=V9_2*sqr
     Vtemp_3=V9_3*sqr
     Vtemp_4=V9_4*sqr
     Vtemp_5=V9_5*sqr
     Vtemp_6=V9_6*sqr
     Vtemp_7=V9_7*sqr
     Vtemp_8=V9_8*sqr
     Vtemp_9=V9_9*sqr
     Vtemp_10=V9_10*sqr
     Vtemp_11=V9_11*sqr
     Vtemp_12=V9_12*sqr
     Vtemp_13=V9_13*sqr
     Vtemp_14=V9_14*sqr
     Vtemp_15=V9_15*sqr
     Vtemp_16=V9_16*sqr
     Vtemp_17=V9_17*sqr
     Vtemp_18=V9_18*sqr
     Vtemp_19=V9_19*sqr
     Vtemp_20=V9_20*sqr
#
     V10_1+=Vtemp_1
     V10_2+=Vtemp_2
     V10_3+=Vtemp_3
     V10_4+=Vtemp_4
     V10_5+=Vtemp_5
     V10_6+=Vtemp_6
     V10_7+=Vtemp_7
     V10_8+=Vtemp_8
     V10_9+=Vtemp_9
     V10_10+=Vtemp_10
     V10_11+=Vtemp_11
     V10_12+=Vtemp_12
     V10_13+=Vtemp_13
     V10_14+=Vtemp_14
     V10_15+=Vtemp_15
     V10_16+=Vtemp_16
     V10_17+=Vtemp_17
     V10_18+=Vtemp_18
     V10_19+=Vtemp_19
     V10_20+=Vtemp_20
#
#
     Vtemp_1=V10_1
     Vtemp_2=V10_2
     Vtemp_3=V10_3
     Vtemp_4=V10_4
     Vtemp_5=V10_5
     Vtemp_6=V10_6
     Vtemp_7=V10_7
     Vtemp_8=V10_8
     Vtemp_9=V10_9
     Vtemp_10=V10_10
     Vtemp_11=V10_11
     Vtemp_12=V10_12
     Vtemp_13=V10_13
     Vtemp_14=V10_14
     Vtemp_15=V10_15
     Vtemp_16=V10_16
     Vtemp_17=V10_17
     Vtemp_18=V10_18
     Vtemp_19=V10_19
     Vtemp_20=V10_20
#
     sqr=0.0
#
     etemp=V10_1*Vtemp_1
     sqr+=etemp
     etemp=V10_2*Vtemp_2
     sqr+=etemp
     etemp=V10_3*Vtemp_3
     sqr+=etemp
     etemp=V10_4*Vtemp_4
     sqr+=etemp
     etemp=V10_5*Vtemp_5
     sqr+=etemp
     etemp=V10_6*Vtemp_6
     sqr+=etemp
     etemp=V10_7*Vtemp_7
     sqr+=etemp
     etemp=V10_8*Vtemp_8
     sqr+=etemp
     etemp=V10_9*Vtemp_9
     sqr+=etemp
     etemp=V10_10*Vtemp_10
     sqr+=etemp
     etemp=V10_11*Vtemp_11
     sqr+=etemp
     etemp=V10_12*Vtemp_12
     sqr+=etemp
     etemp=V10_13*Vtemp_13
     sqr+=etemp
     etemp=V10_14*Vtemp_14
     sqr+=etemp
     etemp=V10_15*Vtemp_15
     sqr+=etemp
     etemp=V10_16*Vtemp_16
     sqr+=etemp
     etemp=V10_17*Vtemp_17
     sqr+=etemp
     etemp=V10_18*Vtemp_18
     sqr+=etemp
     etemp=V10_19*Vtemp_19
     sqr+=etemp
     etemp=V10_20*Vtemp_20
     sqr+=etemp
#
       exponent=0.5
#       execute square_root sqr exponent
#       sqr2=1.0/sqr
     execute norm_fac sqr exponent
     sqr2=sqr
#
     V10_1*=sqr2
     V10_2*=sqr2
     V10_3*=sqr2
     V10_4*=sqr2
     V10_5*=sqr2
     V10_6*=sqr2
     V10_7*=sqr2
     V10_8*=sqr2
     V10_9*=sqr2
     V10_10*=sqr2
     V10_11*=sqr2
     V10_12*=sqr2
     V10_13*=sqr2
     V10_14*=sqr2
     V10_15*=sqr2
     V10_16*=sqr2
     V10_17*=sqr2
     V10_18*=sqr2
     V10_19*=sqr2
     V10_20*=sqr2
#
#------11 vectors -------------------------------
#
     etemp2_1=V11_1
     etemp2_2=V11_2
     etemp2_3=V11_3
     etemp2_4=V11_4
     etemp2_5=V11_5
     etemp2_6=V11_6
     etemp2_7=V11_7
     etemp2_8=V11_8
     etemp2_9=V11_9
     etemp2_10=V11_10
     etemp2_11=V11_11
     etemp2_12=V11_12
     etemp2_13=V11_13
     etemp2_14=V11_14
     etemp2_15=V11_15
     etemp2_16=V11_16
     etemp2_17=V11_17
     etemp2_18=V11_18
     etemp2_19=V11_19
     etemp2_20=V11_20
#
     sqr=0.0
     etemp=V1_1*etemp2_1
     sqr+=etemp
     etemp=V1_2*etemp2_2
     sqr+=etemp
     etemp=V1_3*etemp2_3
     sqr+=etemp
     etemp=V1_4*etemp2_4
     sqr+=etemp
     etemp=V1_5*etemp2_5
     sqr+=etemp
     etemp=V1_6*etemp2_6
     sqr+=etemp
     etemp=V1_7*etemp2_7
     sqr+=etemp
     etemp=V1_8*etemp2_8
     sqr+=etemp
     etemp=V1_9*etemp2_9
     sqr+=etemp
     etemp=V1_10*etemp2_10
     sqr+=etemp
     etemp=V1_11*etemp2_11
     sqr+=etemp
     etemp=V1_12*etemp2_12
     sqr+=etemp
     etemp=V1_13*etemp2_13
     sqr+=etemp
     etemp=V1_14*etemp2_14
     sqr+=etemp
     etemp=V1_15*etemp2_15
     sqr+=etemp
     etemp=V1_16*etemp2_16
     sqr+=etemp
     etemp=V1_17*etemp2_17
     sqr+=etemp
     etemp=V1_18*etemp2_18
     sqr+=etemp
     etemp=V1_19*etemp2_19
     sqr+=etemp
     etemp=V1_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V1_1*sqr
     Vtemp_2=V1_2*sqr
     Vtemp_3=V1_3*sqr
     Vtemp_4=V1_4*sqr
     Vtemp_5=V1_5*sqr
     Vtemp_6=V1_6*sqr
     Vtemp_7=V1_7*sqr
     Vtemp_8=V1_8*sqr
     Vtemp_9=V1_9*sqr
     Vtemp_10=V1_10*sqr
     Vtemp_11=V1_11*sqr
     Vtemp_12=V1_12*sqr
     Vtemp_13=V1_13*sqr
     Vtemp_14=V1_14*sqr
     Vtemp_15=V1_15*sqr
     Vtemp_16=V1_16*sqr
     Vtemp_17=V1_17*sqr
     Vtemp_18=V1_18*sqr
     Vtemp_19=V1_19*sqr
     Vtemp_20=V1_20*sqr
#
     V11_1+=Vtemp_1
     V11_2+=Vtemp_2
     V11_3+=Vtemp_3
     V11_4+=Vtemp_4
     V11_5+=Vtemp_5
     V11_6+=Vtemp_6
     V11_7+=Vtemp_7
     V11_8+=Vtemp_8
     V11_9+=Vtemp_9
     V11_10+=Vtemp_10
     V11_11+=Vtemp_11
     V11_12+=Vtemp_12
     V11_13+=Vtemp_13
     V11_14+=Vtemp_14
     V11_15+=Vtemp_15
     V11_16+=Vtemp_16
     V11_17+=Vtemp_17
     V11_18+=Vtemp_18
     V11_19+=Vtemp_19
     V11_20+=Vtemp_20
#
#
     etemp2_1=V11_1
     etemp2_2=V11_2
     etemp2_3=V11_3
     etemp2_4=V11_4
     etemp2_5=V11_5
     etemp2_6=V11_6
     etemp2_7=V11_7
     etemp2_8=V11_8
     etemp2_9=V11_9
     etemp2_10=V11_10
     etemp2_11=V11_11
     etemp2_12=V11_12
     etemp2_13=V11_13
     etemp2_14=V11_14
     etemp2_15=V11_15
     etemp2_16=V11_16
     etemp2_17=V11_17
     etemp2_18=V11_18
     etemp2_19=V11_19
     etemp2_20=V11_20
#
     sqr=0.0
     etemp=V2_1*etemp2_1
     sqr+=etemp
     etemp=V2_2*etemp2_2
     sqr+=etemp
     etemp=V2_3*etemp2_3
     sqr+=etemp
     etemp=V2_4*etemp2_4
     sqr+=etemp
     etemp=V2_5*etemp2_5
     sqr+=etemp
     etemp=V2_6*etemp2_6
     sqr+=etemp
     etemp=V2_7*etemp2_7
     sqr+=etemp
     etemp=V2_8*etemp2_8
     sqr+=etemp
     etemp=V2_9*etemp2_9
     sqr+=etemp
     etemp=V2_10*etemp2_10
     sqr+=etemp
     etemp=V2_11*etemp2_11
     sqr+=etemp
     etemp=V2_12*etemp2_12
     sqr+=etemp
     etemp=V2_13*etemp2_13
     sqr+=etemp
     etemp=V2_14*etemp2_14
     sqr+=etemp
     etemp=V2_15*etemp2_15
     sqr+=etemp
     etemp=V2_16*etemp2_16
     sqr+=etemp
     etemp=V2_17*etemp2_17
     sqr+=etemp
     etemp=V2_18*etemp2_18
     sqr+=etemp
     etemp=V2_19*etemp2_19
     sqr+=etemp
     etemp=V2_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V2_1*sqr
     Vtemp_2=V2_2*sqr
     Vtemp_3=V2_3*sqr
     Vtemp_4=V2_4*sqr
     Vtemp_5=V2_5*sqr
     Vtemp_6=V2_6*sqr
     Vtemp_7=V2_7*sqr
     Vtemp_8=V2_8*sqr
     Vtemp_9=V2_9*sqr
     Vtemp_10=V2_10*sqr
     Vtemp_11=V2_11*sqr
     Vtemp_12=V2_12*sqr
     Vtemp_13=V2_13*sqr
     Vtemp_14=V2_14*sqr
     Vtemp_15=V2_15*sqr
     Vtemp_16=V2_16*sqr
     Vtemp_17=V2_17*sqr
     Vtemp_18=V2_18*sqr
     Vtemp_19=V2_19*sqr
     Vtemp_20=V2_20*sqr
#
     V11_1+=Vtemp_1
     V11_2+=Vtemp_2
     V11_3+=Vtemp_3
     V11_4+=Vtemp_4
     V11_5+=Vtemp_5
     V11_6+=Vtemp_6
     V11_7+=Vtemp_7
     V11_8+=Vtemp_8
     V11_9+=Vtemp_9
     V11_10+=Vtemp_10
     V11_11+=Vtemp_11
     V11_12+=Vtemp_12
     V11_13+=Vtemp_13
     V11_14+=Vtemp_14
     V11_15+=Vtemp_15
     V11_16+=Vtemp_16
     V11_17+=Vtemp_17
     V11_18+=Vtemp_18
     V11_19+=Vtemp_19
     V11_20+=Vtemp_20
#
#
     etemp2_1=V11_1
     etemp2_2=V11_2
     etemp2_3=V11_3
     etemp2_4=V11_4
     etemp2_5=V11_5
     etemp2_6=V11_6
     etemp2_7=V11_7
     etemp2_8=V11_8
     etemp2_9=V11_9
     etemp2_10=V11_10
     etemp2_11=V11_11
     etemp2_12=V11_12
     etemp2_13=V11_13
     etemp2_14=V11_14
     etemp2_15=V11_15
     etemp2_16=V11_16
     etemp2_17=V11_17
     etemp2_18=V11_18
     etemp2_19=V11_19
     etemp2_20=V11_20
#
     sqr=0.0
     etemp=V3_1*etemp2_1
     sqr+=etemp
     etemp=V3_2*etemp2_2
     sqr+=etemp
     etemp=V3_3*etemp2_3
     sqr+=etemp
     etemp=V3_4*etemp2_4
     sqr+=etemp
     etemp=V3_5*etemp2_5
     sqr+=etemp
     etemp=V3_6*etemp2_6
     sqr+=etemp
     etemp=V3_7*etemp2_7
     sqr+=etemp
     etemp=V3_8*etemp2_8
     sqr+=etemp
     etemp=V3_9*etemp2_9
     sqr+=etemp
     etemp=V3_10*etemp2_10
     sqr+=etemp
     etemp=V3_11*etemp2_11
     sqr+=etemp
     etemp=V3_12*etemp2_12
     sqr+=etemp
     etemp=V3_13*etemp2_13
     sqr+=etemp
     etemp=V3_14*etemp2_14
     sqr+=etemp
     etemp=V3_15*etemp2_15
     sqr+=etemp
     etemp=V3_16*etemp2_16
     sqr+=etemp
     etemp=V3_17*etemp2_17
     sqr+=etemp
     etemp=V3_18*etemp2_18
     sqr+=etemp
     etemp=V3_19*etemp2_19
     sqr+=etemp
     etemp=V3_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V3_1*sqr
     Vtemp_2=V3_2*sqr
     Vtemp_3=V3_3*sqr
     Vtemp_4=V3_4*sqr
     Vtemp_5=V3_5*sqr
     Vtemp_6=V3_6*sqr
     Vtemp_7=V3_7*sqr
     Vtemp_8=V3_8*sqr
     Vtemp_9=V3_9*sqr
     Vtemp_10=V3_10*sqr
     Vtemp_11=V3_11*sqr
     Vtemp_12=V3_12*sqr
     Vtemp_13=V3_13*sqr
     Vtemp_14=V3_14*sqr
     Vtemp_15=V3_15*sqr
     Vtemp_16=V3_16*sqr
     Vtemp_17=V3_17*sqr
     Vtemp_18=V3_18*sqr
     Vtemp_19=V3_19*sqr
     Vtemp_20=V3_20*sqr
#
     V11_1+=Vtemp_1
     V11_2+=Vtemp_2
     V11_3+=Vtemp_3
     V11_4+=Vtemp_4
     V11_5+=Vtemp_5
     V11_6+=Vtemp_6
     V11_7+=Vtemp_7
     V11_8+=Vtemp_8
     V11_9+=Vtemp_9
     V11_10+=Vtemp_10
     V11_11+=Vtemp_11
     V11_12+=Vtemp_12
     V11_13+=Vtemp_13
     V11_14+=Vtemp_14
     V11_15+=Vtemp_15
     V11_16+=Vtemp_16
     V11_17+=Vtemp_17
     V11_18+=Vtemp_18
     V11_19+=Vtemp_19
     V11_20+=Vtemp_20
#
#
     etemp2_1=V11_1
     etemp2_2=V11_2
     etemp2_3=V11_3
     etemp2_4=V11_4
     etemp2_5=V11_5
     etemp2_6=V11_6
     etemp2_7=V11_7
     etemp2_8=V11_8
     etemp2_9=V11_9
     etemp2_10=V11_10
     etemp2_11=V11_11
     etemp2_12=V11_12
     etemp2_13=V11_13
     etemp2_14=V11_14
     etemp2_15=V11_15
     etemp2_16=V11_16
     etemp2_17=V11_17
     etemp2_18=V11_18
     etemp2_19=V11_19
     etemp2_20=V11_20
#
     sqr=0.0
     etemp=V4_1*etemp2_1
     sqr+=etemp
     etemp=V4_2*etemp2_2
     sqr+=etemp
     etemp=V4_3*etemp2_3
     sqr+=etemp
     etemp=V4_4*etemp2_4
     sqr+=etemp
     etemp=V4_5*etemp2_5
     sqr+=etemp
     etemp=V4_6*etemp2_6
     sqr+=etemp
     etemp=V4_7*etemp2_7
     sqr+=etemp
     etemp=V4_8*etemp2_8
     sqr+=etemp
     etemp=V4_9*etemp2_9
     sqr+=etemp
     etemp=V4_10*etemp2_10
     sqr+=etemp
     etemp=V4_11*etemp2_11
     sqr+=etemp
     etemp=V4_12*etemp2_12
     sqr+=etemp
     etemp=V4_13*etemp2_13
     sqr+=etemp
     etemp=V4_14*etemp2_14
     sqr+=etemp
     etemp=V4_15*etemp2_15
     sqr+=etemp
     etemp=V4_16*etemp2_16
     sqr+=etemp
     etemp=V4_17*etemp2_17
     sqr+=etemp
     etemp=V4_18*etemp2_18
     sqr+=etemp
     etemp=V4_19*etemp2_19
     sqr+=etemp
     etemp=V4_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V4_1*sqr
     Vtemp_2=V4_2*sqr
     Vtemp_3=V4_3*sqr
     Vtemp_4=V4_4*sqr
     Vtemp_5=V4_5*sqr
     Vtemp_6=V4_6*sqr
     Vtemp_7=V4_7*sqr
     Vtemp_8=V4_8*sqr
     Vtemp_9=V4_9*sqr
     Vtemp_10=V4_10*sqr
     Vtemp_11=V4_11*sqr
     Vtemp_12=V4_12*sqr
     Vtemp_13=V4_13*sqr
     Vtemp_14=V4_14*sqr
     Vtemp_15=V4_15*sqr
     Vtemp_16=V4_16*sqr
     Vtemp_17=V4_17*sqr
     Vtemp_18=V4_18*sqr
     Vtemp_19=V4_19*sqr
     Vtemp_20=V4_20*sqr
#
     V11_1+=Vtemp_1
     V11_2+=Vtemp_2
     V11_3+=Vtemp_3
     V11_4+=Vtemp_4
     V11_5+=Vtemp_5
     V11_6+=Vtemp_6
     V11_7+=Vtemp_7
     V11_8+=Vtemp_8
     V11_9+=Vtemp_9
     V11_10+=Vtemp_10
     V11_11+=Vtemp_11
     V11_12+=Vtemp_12
     V11_13+=Vtemp_13
     V11_14+=Vtemp_14
     V11_15+=Vtemp_15
     V11_16+=Vtemp_16
     V11_17+=Vtemp_17
     V11_18+=Vtemp_18
     V11_19+=Vtemp_19
     V11_20+=Vtemp_20
#
#
     etemp2_1=V11_1
     etemp2_2=V11_2
     etemp2_3=V11_3
     etemp2_4=V11_4
     etemp2_5=V11_5
     etemp2_6=V11_6
     etemp2_7=V11_7
     etemp2_8=V11_8
     etemp2_9=V11_9
     etemp2_10=V11_10
     etemp2_11=V11_11
     etemp2_12=V11_12
     etemp2_13=V11_13
     etemp2_14=V11_14
     etemp2_15=V11_15
     etemp2_16=V11_16
     etemp2_17=V11_17
     etemp2_18=V11_18
     etemp2_19=V11_19
     etemp2_20=V11_20
#
     sqr=0.0
     etemp=V5_1*etemp2_1
     sqr+=etemp
     etemp=V5_2*etemp2_2
     sqr+=etemp
     etemp=V5_3*etemp2_3
     sqr+=etemp
     etemp=V5_4*etemp2_4
     sqr+=etemp
     etemp=V5_5*etemp2_5
     sqr+=etemp
     etemp=V5_6*etemp2_6
     sqr+=etemp
     etemp=V5_7*etemp2_7
     sqr+=etemp
     etemp=V5_8*etemp2_8
     sqr+=etemp
     etemp=V5_9*etemp2_9
     sqr+=etemp
     etemp=V5_10*etemp2_10
     sqr+=etemp
     etemp=V5_11*etemp2_11
     sqr+=etemp
     etemp=V5_12*etemp2_12
     sqr+=etemp
     etemp=V5_13*etemp2_13
     sqr+=etemp
     etemp=V5_14*etemp2_14
     sqr+=etemp
     etemp=V5_15*etemp2_15
     sqr+=etemp
     etemp=V5_16*etemp2_16
     sqr+=etemp
     etemp=V5_17*etemp2_17
     sqr+=etemp
     etemp=V5_18*etemp2_18
     sqr+=etemp
     etemp=V5_19*etemp2_19
     sqr+=etemp
     etemp=V5_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V5_1*sqr
     Vtemp_2=V5_2*sqr
     Vtemp_3=V5_3*sqr
     Vtemp_4=V5_4*sqr
     Vtemp_5=V5_5*sqr
     Vtemp_6=V5_6*sqr
     Vtemp_7=V5_7*sqr
     Vtemp_8=V5_8*sqr
     Vtemp_9=V5_9*sqr
     Vtemp_10=V5_10*sqr
     Vtemp_11=V5_11*sqr
     Vtemp_12=V5_12*sqr
     Vtemp_13=V5_13*sqr
     Vtemp_14=V5_14*sqr
     Vtemp_15=V5_15*sqr
     Vtemp_16=V5_16*sqr
     Vtemp_17=V5_17*sqr
     Vtemp_18=V5_18*sqr
     Vtemp_19=V5_19*sqr
     Vtemp_20=V5_20*sqr
#
     V11_1+=Vtemp_1
     V11_2+=Vtemp_2
     V11_3+=Vtemp_3
     V11_4+=Vtemp_4
     V11_5+=Vtemp_5
     V11_6+=Vtemp_6
     V11_7+=Vtemp_7
     V11_8+=Vtemp_8
     V11_9+=Vtemp_9
     V11_10+=Vtemp_10
     V11_11+=Vtemp_11
     V11_12+=Vtemp_12
     V11_13+=Vtemp_13
     V11_14+=Vtemp_14
     V11_15+=Vtemp_15
     V11_16+=Vtemp_16
     V11_17+=Vtemp_17
     V11_18+=Vtemp_18
     V11_19+=Vtemp_19
     V11_20+=Vtemp_20
#
#
     etemp2_1=V11_1
     etemp2_2=V11_2
     etemp2_3=V11_3
     etemp2_4=V11_4
     etemp2_5=V11_5
     etemp2_6=V11_6
     etemp2_7=V11_7
     etemp2_8=V11_8
     etemp2_9=V11_9
     etemp2_10=V11_10
     etemp2_11=V11_11
     etemp2_12=V11_12
     etemp2_13=V11_13
     etemp2_14=V11_14
     etemp2_15=V11_15
     etemp2_16=V11_16
     etemp2_17=V11_17
     etemp2_18=V11_18
     etemp2_19=V11_19
     etemp2_20=V11_20
#
     sqr=0.0
     etemp=V6_1*etemp2_1
     sqr+=etemp
     etemp=V6_2*etemp2_2
     sqr+=etemp
     etemp=V6_3*etemp2_3
     sqr+=etemp
     etemp=V6_4*etemp2_4
     sqr+=etemp
     etemp=V6_5*etemp2_5
     sqr+=etemp
     etemp=V6_6*etemp2_6
     sqr+=etemp
     etemp=V6_7*etemp2_7
     sqr+=etemp
     etemp=V6_8*etemp2_8
     sqr+=etemp
     etemp=V6_9*etemp2_9
     sqr+=etemp
     etemp=V6_10*etemp2_10
     sqr+=etemp
     etemp=V6_11*etemp2_11
     sqr+=etemp
     etemp=V6_12*etemp2_12
     sqr+=etemp
     etemp=V6_13*etemp2_13
     sqr+=etemp
     etemp=V6_14*etemp2_14
     sqr+=etemp
     etemp=V6_15*etemp2_15
     sqr+=etemp
     etemp=V6_16*etemp2_16
     sqr+=etemp
     etemp=V6_17*etemp2_17
     sqr+=etemp
     etemp=V6_18*etemp2_18
     sqr+=etemp
     etemp=V6_19*etemp2_19
     sqr+=etemp
     etemp=V6_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V6_1*sqr
     Vtemp_2=V6_2*sqr
     Vtemp_3=V6_3*sqr
     Vtemp_4=V6_4*sqr
     Vtemp_5=V6_5*sqr
     Vtemp_6=V6_6*sqr
     Vtemp_7=V6_7*sqr
     Vtemp_8=V6_8*sqr
     Vtemp_9=V6_9*sqr
     Vtemp_10=V6_10*sqr
     Vtemp_11=V6_11*sqr
     Vtemp_12=V6_12*sqr
     Vtemp_13=V6_13*sqr
     Vtemp_14=V6_14*sqr
     Vtemp_15=V6_15*sqr
     Vtemp_16=V6_16*sqr
     Vtemp_17=V6_17*sqr
     Vtemp_18=V6_18*sqr
     Vtemp_19=V6_19*sqr
     Vtemp_20=V6_20*sqr
#
     V11_1+=Vtemp_1
     V11_2+=Vtemp_2
     V11_3+=Vtemp_3
     V11_4+=Vtemp_4
     V11_5+=Vtemp_5
     V11_6+=Vtemp_6
     V11_7+=Vtemp_7
     V11_8+=Vtemp_8
     V11_9+=Vtemp_9
     V11_10+=Vtemp_10
     V11_11+=Vtemp_11
     V11_12+=Vtemp_12
     V11_13+=Vtemp_13
     V11_14+=Vtemp_14
     V11_15+=Vtemp_15
     V11_16+=Vtemp_16
     V11_17+=Vtemp_17
     V11_18+=Vtemp_18
     V11_19+=Vtemp_19
     V11_20+=Vtemp_20
#
#
     etemp2_1=V11_1
     etemp2_2=V11_2
     etemp2_3=V11_3
     etemp2_4=V11_4
     etemp2_5=V11_5
     etemp2_6=V11_6
     etemp2_7=V11_7
     etemp2_8=V11_8
     etemp2_9=V11_9
     etemp2_10=V11_10
     etemp2_11=V11_11
     etemp2_12=V11_12
     etemp2_13=V11_13
     etemp2_14=V11_14
     etemp2_15=V11_15
     etemp2_16=V11_16
     etemp2_17=V11_17
     etemp2_18=V11_18
     etemp2_19=V11_19
     etemp2_20=V11_20
#
     sqr=0.0
     etemp=V7_1*etemp2_1
     sqr+=etemp
     etemp=V7_2*etemp2_2
     sqr+=etemp
     etemp=V7_3*etemp2_3
     sqr+=etemp
     etemp=V7_4*etemp2_4
     sqr+=etemp
     etemp=V7_5*etemp2_5
     sqr+=etemp
     etemp=V7_6*etemp2_6
     sqr+=etemp
     etemp=V7_7*etemp2_7
     sqr+=etemp
     etemp=V7_8*etemp2_8
     sqr+=etemp
     etemp=V7_9*etemp2_9
     sqr+=etemp
     etemp=V7_10*etemp2_10
     sqr+=etemp
     etemp=V7_11*etemp2_11
     sqr+=etemp
     etemp=V7_12*etemp2_12
     sqr+=etemp
     etemp=V7_13*etemp2_13
     sqr+=etemp
     etemp=V7_14*etemp2_14
     sqr+=etemp
     etemp=V7_15*etemp2_15
     sqr+=etemp
     etemp=V7_16*etemp2_16
     sqr+=etemp
     etemp=V7_17*etemp2_17
     sqr+=etemp
     etemp=V7_18*etemp2_18
     sqr+=etemp
     etemp=V7_19*etemp2_19
     sqr+=etemp
     etemp=V7_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V7_1*sqr
     Vtemp_2=V7_2*sqr
     Vtemp_3=V7_3*sqr
     Vtemp_4=V7_4*sqr
     Vtemp_5=V7_5*sqr
     Vtemp_6=V7_6*sqr
     Vtemp_7=V7_7*sqr
     Vtemp_8=V7_8*sqr
     Vtemp_9=V7_9*sqr
     Vtemp_10=V7_10*sqr
     Vtemp_11=V7_11*sqr
     Vtemp_12=V7_12*sqr
     Vtemp_13=V7_13*sqr
     Vtemp_14=V7_14*sqr
     Vtemp_15=V7_15*sqr
     Vtemp_16=V7_16*sqr
     Vtemp_17=V7_17*sqr
     Vtemp_18=V7_18*sqr
     Vtemp_19=V7_19*sqr
     Vtemp_20=V7_20*sqr
#
     V11_1+=Vtemp_1
     V11_2+=Vtemp_2
     V11_3+=Vtemp_3
     V11_4+=Vtemp_4
     V11_5+=Vtemp_5
     V11_6+=Vtemp_6
     V11_7+=Vtemp_7
     V11_8+=Vtemp_8
     V11_9+=Vtemp_9
     V11_10+=Vtemp_10
     V11_11+=Vtemp_11
     V11_12+=Vtemp_12
     V11_13+=Vtemp_13
     V11_14+=Vtemp_14
     V11_15+=Vtemp_15
     V11_16+=Vtemp_16
     V11_17+=Vtemp_17
     V11_18+=Vtemp_18
     V11_19+=Vtemp_19
     V11_20+=Vtemp_20
#
#
     etemp2_1=V11_1
     etemp2_2=V11_2
     etemp2_3=V11_3
     etemp2_4=V11_4
     etemp2_5=V11_5
     etemp2_6=V11_6
     etemp2_7=V11_7
     etemp2_8=V11_8
     etemp2_9=V11_9
     etemp2_10=V11_10
     etemp2_11=V11_11
     etemp2_12=V11_12
     etemp2_13=V11_13
     etemp2_14=V11_14
     etemp2_15=V11_15
     etemp2_16=V11_16
     etemp2_17=V11_17
     etemp2_18=V11_18
     etemp2_19=V11_19
     etemp2_20=V11_20
#
     sqr=0.0
     etemp=V8_1*etemp2_1
     sqr+=etemp
     etemp=V8_2*etemp2_2
     sqr+=etemp
     etemp=V8_3*etemp2_3
     sqr+=etemp
     etemp=V8_4*etemp2_4
     sqr+=etemp
     etemp=V8_5*etemp2_5
     sqr+=etemp
     etemp=V8_6*etemp2_6
     sqr+=etemp
     etemp=V8_7*etemp2_7
     sqr+=etemp
     etemp=V8_8*etemp2_8
     sqr+=etemp
     etemp=V8_9*etemp2_9
     sqr+=etemp
     etemp=V8_10*etemp2_10
     sqr+=etemp
     etemp=V8_11*etemp2_11
     sqr+=etemp
     etemp=V8_12*etemp2_12
     sqr+=etemp
     etemp=V8_13*etemp2_13
     sqr+=etemp
     etemp=V8_14*etemp2_14
     sqr+=etemp
     etemp=V8_15*etemp2_15
     sqr+=etemp
     etemp=V8_16*etemp2_16
     sqr+=etemp
     etemp=V8_17*etemp2_17
     sqr+=etemp
     etemp=V8_18*etemp2_18
     sqr+=etemp
     etemp=V8_19*etemp2_19
     sqr+=etemp
     etemp=V8_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V8_1*sqr
     Vtemp_2=V8_2*sqr
     Vtemp_3=V8_3*sqr
     Vtemp_4=V8_4*sqr
     Vtemp_5=V8_5*sqr
     Vtemp_6=V8_6*sqr
     Vtemp_7=V8_7*sqr
     Vtemp_8=V8_8*sqr
     Vtemp_9=V8_9*sqr
     Vtemp_10=V8_10*sqr
     Vtemp_11=V8_11*sqr
     Vtemp_12=V8_12*sqr
     Vtemp_13=V8_13*sqr
     Vtemp_14=V8_14*sqr
     Vtemp_15=V8_15*sqr
     Vtemp_16=V8_16*sqr
     Vtemp_17=V8_17*sqr
     Vtemp_18=V8_18*sqr
     Vtemp_19=V8_19*sqr
     Vtemp_20=V8_20*sqr
#
     V11_1+=Vtemp_1
     V11_2+=Vtemp_2
     V11_3+=Vtemp_3
     V11_4+=Vtemp_4
     V11_5+=Vtemp_5
     V11_6+=Vtemp_6
     V11_7+=Vtemp_7
     V11_8+=Vtemp_8
     V11_9+=Vtemp_9
     V11_10+=Vtemp_10
     V11_11+=Vtemp_11
     V11_12+=Vtemp_12
     V11_13+=Vtemp_13
     V11_14+=Vtemp_14
     V11_15+=Vtemp_15
     V11_16+=Vtemp_16
     V11_17+=Vtemp_17
     V11_18+=Vtemp_18
     V11_19+=Vtemp_19
     V11_20+=Vtemp_20
#
#
     etemp2_1=V11_1
     etemp2_2=V11_2
     etemp2_3=V11_3
     etemp2_4=V11_4
     etemp2_5=V11_5
     etemp2_6=V11_6
     etemp2_7=V11_7
     etemp2_8=V11_8
     etemp2_9=V11_9
     etemp2_10=V11_10
     etemp2_11=V11_11
     etemp2_12=V11_12
     etemp2_13=V11_13
     etemp2_14=V11_14
     etemp2_15=V11_15
     etemp2_16=V11_16
     etemp2_17=V11_17
     etemp2_18=V11_18
     etemp2_19=V11_19
     etemp2_20=V11_20
#
     sqr=0.0
     etemp=V9_1*etemp2_1
     sqr+=etemp
     etemp=V9_2*etemp2_2
     sqr+=etemp
     etemp=V9_3*etemp2_3
     sqr+=etemp
     etemp=V9_4*etemp2_4
     sqr+=etemp
     etemp=V9_5*etemp2_5
     sqr+=etemp
     etemp=V9_6*etemp2_6
     sqr+=etemp
     etemp=V9_7*etemp2_7
     sqr+=etemp
     etemp=V9_8*etemp2_8
     sqr+=etemp
     etemp=V9_9*etemp2_9
     sqr+=etemp
     etemp=V9_10*etemp2_10
     sqr+=etemp
     etemp=V9_11*etemp2_11
     sqr+=etemp
     etemp=V9_12*etemp2_12
     sqr+=etemp
     V11_17+=Vtemp_17
     V11_18+=Vtemp_18
     V11_19+=Vtemp_19
     V11_20+=Vtemp_20
#
#
     Vtemp_1=V11_1
     Vtemp_2=V11_2
     Vtemp_3=V11_3
     Vtemp_4=V11_4
     Vtemp_5=V11_5
     Vtemp_6=V11_6
     Vtemp_7=V11_7
     Vtemp_8=V11_8
     Vtemp_9=V11_9
     Vtemp_10=V11_10
     Vtemp_11=V11_11
     Vtemp_12=V11_12
     Vtemp_13=V11_13
     Vtemp_14=V11_14
     Vtemp_15=V11_15
     Vtemp_16=V11_16
     Vtemp_17=V11_17
     Vtemp_18=V11_18
     Vtemp_19=V11_19
     Vtemp_20=V11_20
#
     sqr=0.0
#
     etemp=V11_1*Vtemp_1
     sqr+=etemp
     etemp=V11_2*Vtemp_2
     sqr+=etemp
     etemp=V11_3*Vtemp_3
     sqr+=etemp
     etemp=V11_4*Vtemp_4
     sqr+=etemp
     etemp=V11_5*Vtemp_5
     sqr+=etemp
     etemp=V11_6*Vtemp_6
     sqr+=etemp
     etemp=V11_7*Vtemp_7
     sqr+=etemp
     etemp=V11_8*Vtemp_8
     sqr+=etemp
     etemp=V11_9*Vtemp_9
     sqr+=etemp
     etemp=V11_10*Vtemp_10
     sqr+=etemp
     etemp=V11_11*Vtemp_11
     sqr+=etemp
     etemp=V11_12*Vtemp_12
     sqr+=etemp
     etemp=V11_13*Vtemp_13
     sqr+=etemp
     etemp=V11_14*Vtemp_14
     sqr+=etemp
     etemp=V11_15*Vtemp_15
     sqr+=etemp
     etemp=V11_16*Vtemp_16
     sqr+=etemp
     etemp=V11_17*Vtemp_17
     sqr+=etemp
     etemp=V11_18*Vtemp_18
     sqr+=etemp
     etemp=V11_19*Vtemp_19
     sqr+=etemp
     etemp=V11_20*Vtemp_20
     sqr+=etemp
#
       exponent=0.5
#       execute square_root sqr exponent
#       sqr2=1.0/sqr
     execute norm_fac sqr exponent
     sqr2=sqr
#
     V11_1*=sqr2
     V11_2*=sqr2
     V11_3*=sqr2
     V11_4*=sqr2
     V11_5*=sqr2
     V11_6*=sqr2
     V11_7*=sqr2
     V11_8*=sqr2
     V11_9*=sqr2
     V11_10*=sqr2
     V11_11*=sqr2
     V11_12*=sqr2
     V11_13*=sqr2
     V11_14*=sqr2
     V11_15*=sqr2
     V11_16*=sqr2
     V11_17*=sqr2
     V11_18*=sqr2
     V11_19*=sqr2
     V11_20*=sqr2
#
#------12 vectors -------------------------------
#
     etemp2_1=V12_1
     etemp2_2=V12_2
     etemp2_3=V12_3
     etemp2_4=V12_4
     etemp2_5=V12_5
     etemp2_6=V12_6
     etemp2_7=V12_7
     etemp2_8=V12_8
     etemp2_9=V12_9
     etemp2_10=V12_10
     etemp2_11=V12_11
     etemp2_12=V12_12
     etemp2_13=V12_13
     etemp2_14=V12_14
     etemp2_15=V12_15
     etemp2_16=V12_16
     etemp2_17=V12_17
     etemp2_18=V12_18
     etemp2_19=V12_19
     etemp2_20=V12_20
#
     sqr=0.0
     etemp=V1_1*etemp2_1
     sqr+=etemp
     etemp=V1_2*etemp2_2
     sqr+=etemp
     etemp=V1_3*etemp2_3
     sqr+=etemp
     etemp=V1_4*etemp2_4
     sqr+=etemp
     etemp=V1_5*etemp2_5
     sqr+=etemp
     etemp=V1_6*etemp2_6
     sqr+=etemp
     etemp=V1_7*etemp2_7
     sqr+=etemp
     etemp=V1_8*etemp2_8
     sqr+=etemp
     etemp=V1_9*etemp2_9
     sqr+=etemp
     etemp=V1_10*etemp2_10
     sqr+=etemp
     etemp=V1_11*etemp2_11
     sqr+=etemp
     etemp=V1_12*etemp2_12
     sqr+=etemp
     etemp=V1_13*etemp2_13
     sqr+=etemp
     etemp=V1_14*etemp2_14
     sqr+=etemp
     etemp=V1_15*etemp2_15
     sqr+=etemp
     etemp=V1_16*etemp2_16
     sqr+=etemp
     etemp=V1_17*etemp2_17
     sqr+=etemp
     etemp=V1_18*etemp2_18
     sqr+=etemp
     etemp=V1_19*etemp2_19
     sqr+=etemp
     etemp=V1_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V1_1*sqr
     Vtemp_2=V1_2*sqr
     Vtemp_3=V1_3*sqr
     Vtemp_4=V1_4*sqr
     Vtemp_5=V1_5*sqr
     Vtemp_6=V1_6*sqr
     Vtemp_7=V1_7*sqr
     Vtemp_8=V1_8*sqr
     Vtemp_9=V1_9*sqr
     Vtemp_10=V1_10*sqr
     Vtemp_11=V1_11*sqr
     Vtemp_12=V1_12*sqr
     Vtemp_13=V1_13*sqr
     Vtemp_14=V1_14*sqr
     Vtemp_15=V1_15*sqr
     Vtemp_16=V1_16*sqr
     Vtemp_17=V1_17*sqr
     Vtemp_18=V1_18*sqr
     Vtemp_19=V1_19*sqr
     Vtemp_20=V1_20*sqr
#
     V12_1+=Vtemp_1
     V12_2+=Vtemp_2
     V12_3+=Vtemp_3
     V12_4+=Vtemp_4
     V12_5+=Vtemp_5
     V12_6+=Vtemp_6
     V12_7+=Vtemp_7
     V12_8+=Vtemp_8
     V12_9+=Vtemp_9
     V12_10+=Vtemp_10
     V12_11+=Vtemp_11
     V12_12+=Vtemp_12
     V12_13+=Vtemp_13
     V12_14+=Vtemp_14
     V12_15+=Vtemp_15
     V12_16+=Vtemp_16
     V12_17+=Vtemp_17
     V12_18+=Vtemp_18
     V12_19+=Vtemp_19
     V12_20+=Vtemp_20
#
#
     etemp2_1=V12_1
     etemp2_2=V12_2
     etemp2_3=V12_3
     etemp2_4=V12_4
     etemp2_5=V12_5
     etemp2_6=V12_6
     etemp2_7=V12_7
     etemp2_8=V12_8
     etemp2_9=V12_9
     etemp2_10=V12_10
     etemp2_11=V12_11
     etemp2_12=V12_12
     etemp2_13=V12_13
     etemp2_14=V12_14
     etemp2_15=V12_15
     etemp2_16=V12_16
     etemp2_17=V12_17
     etemp2_18=V12_18
     etemp2_19=V12_19
     etemp2_20=V12_20
#
     sqr=0.0
     etemp=V2_1*etemp2_1
     sqr+=etemp
     etemp=V2_2*etemp2_2
     sqr+=etemp
     etemp=V2_3*etemp2_3
     sqr+=etemp
     etemp=V2_4*etemp2_4
     sqr+=etemp
     etemp=V2_5*etemp2_5
     sqr+=etemp
     etemp=V2_6*etemp2_6
     sqr+=etemp
     etemp=V2_7*etemp2_7
     sqr+=etemp
     etemp=V2_8*etemp2_8
     sqr+=etemp
     etemp=V2_9*etemp2_9
     sqr+=etemp
     etemp=V2_10*etemp2_10
     sqr+=etemp
     etemp=V2_11*etemp2_11
     sqr+=etemp
     etemp=V2_12*etemp2_12
     sqr+=etemp
     etemp=V2_13*etemp2_13
     sqr+=etemp
     etemp=V2_14*etemp2_14
     sqr+=etemp
     etemp=V2_15*etemp2_15
     sqr+=etemp
     etemp=V2_16*etemp2_16
     sqr+=etemp
     etemp=V2_17*etemp2_17
     sqr+=etemp
     etemp=V2_18*etemp2_18
     sqr+=etemp
     etemp=V2_19*etemp2_19
     sqr+=etemp
     etemp=V2_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V2_1*sqr
     Vtemp_2=V2_2*sqr
     Vtemp_3=V2_3*sqr
     Vtemp_4=V2_4*sqr
     Vtemp_5=V2_5*sqr
     Vtemp_6=V2_6*sqr
     Vtemp_7=V2_7*sqr
     Vtemp_8=V2_8*sqr
     Vtemp_9=V2_9*sqr
     Vtemp_10=V2_10*sqr
     Vtemp_11=V2_11*sqr
     Vtemp_12=V2_12*sqr
     Vtemp_13=V2_13*sqr
     Vtemp_14=V2_14*sqr
     Vtemp_15=V2_15*sqr
     Vtemp_16=V2_16*sqr
     Vtemp_17=V2_17*sqr
     Vtemp_18=V2_18*sqr
     Vtemp_19=V2_19*sqr
     Vtemp_20=V2_20*sqr
#
     V12_1+=Vtemp_1
     V12_2+=Vtemp_2
     V12_3+=Vtemp_3
     V12_4+=Vtemp_4
     V12_5+=Vtemp_5
     V12_6+=Vtemp_6
     V12_7+=Vtemp_7
     V12_8+=Vtemp_8
     V12_9+=Vtemp_9
     V12_10+=Vtemp_10
     V12_11+=Vtemp_11
     V12_12+=Vtemp_12
     V12_13+=Vtemp_13
     V12_14+=Vtemp_14
     V12_15+=Vtemp_15
     V12_16+=Vtemp_16
     V12_17+=Vtemp_17
     V12_18+=Vtemp_18
     V12_19+=Vtemp_19
     V12_20+=Vtemp_20
#
#
     etemp2_1=V12_1
     etemp2_2=V12_2
     etemp2_3=V12_3
     etemp2_4=V12_4
     etemp2_5=V12_5
     etemp2_6=V12_6
     etemp2_7=V12_7
     etemp2_8=V12_8
     etemp2_9=V12_9
     etemp2_10=V12_10
     etemp2_11=V12_11
     etemp2_12=V12_12
     etemp2_13=V12_13
     etemp2_14=V12_14
     etemp2_15=V12_15
     etemp2_16=V12_16
     etemp2_17=V12_17
     etemp2_18=V12_18
     etemp2_19=V12_19
     etemp2_20=V12_20
#
     sqr=0.0
     etemp=V3_1*etemp2_1
     sqr+=etemp
     etemp=V3_2*etemp2_2
     sqr+=etemp
     etemp=V3_3*etemp2_3
     sqr+=etemp
     etemp=V3_4*etemp2_4
     sqr+=etemp
     etemp=V3_5*etemp2_5
     sqr+=etemp
     etemp=V3_6*etemp2_6
     sqr+=etemp
     etemp=V3_7*etemp2_7
     sqr+=etemp
     etemp=V3_8*etemp2_8
     sqr+=etemp
     etemp=V3_9*etemp2_9
     sqr+=etemp
     etemp=V3_10*etemp2_10
     sqr+=etemp
     etemp=V3_11*etemp2_11
     sqr+=etemp
     etemp=V3_12*etemp2_12
     sqr+=etemp
     etemp=V3_13*etemp2_13
     sqr+=etemp
     etemp=V3_14*etemp2_14
     sqr+=etemp
     etemp=V3_15*etemp2_15
     sqr+=etemp
     etemp=V3_16*etemp2_16
     sqr+=etemp
     etemp=V3_17*etemp2_17
     sqr+=etemp
     etemp=V3_18*etemp2_18
     sqr+=etemp
     etemp=V3_19*etemp2_19
     sqr+=etemp
     etemp=V3_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V3_1*sqr
     Vtemp_2=V3_2*sqr
     Vtemp_3=V3_3*sqr
     Vtemp_4=V3_4*sqr
     Vtemp_5=V3_5*sqr
     Vtemp_6=V3_6*sqr
     Vtemp_7=V3_7*sqr
     Vtemp_8=V3_8*sqr
     Vtemp_9=V3_9*sqr
     Vtemp_10=V3_10*sqr
     Vtemp_11=V3_11*sqr
     Vtemp_12=V3_12*sqr
     Vtemp_13=V3_13*sqr
     Vtemp_14=V3_14*sqr
     Vtemp_15=V3_15*sqr
     Vtemp_16=V3_16*sqr
     Vtemp_17=V3_17*sqr
     Vtemp_18=V3_18*sqr
     Vtemp_19=V3_19*sqr
     Vtemp_20=V3_20*sqr
#
     V12_1+=Vtemp_1
     V12_2+=Vtemp_2
     V12_3+=Vtemp_3
     V12_4+=Vtemp_4
     V12_5+=Vtemp_5
     V12_6+=Vtemp_6
     V12_7+=Vtemp_7
     V12_8+=Vtemp_8
     V12_9+=Vtemp_9
     V12_10+=Vtemp_10
     V12_11+=Vtemp_11
     V12_12+=Vtemp_12
     V12_13+=Vtemp_13
     V12_14+=Vtemp_14
     V12_15+=Vtemp_15
     V12_16+=Vtemp_16
     V12_17+=Vtemp_17
     V12_18+=Vtemp_18
     V12_19+=Vtemp_19
     V12_20+=Vtemp_20
#
#
     etemp2_1=V12_1
     etemp2_2=V12_2
     etemp2_3=V12_3
     etemp2_4=V12_4
     etemp2_5=V12_5
     etemp2_6=V12_6
     etemp2_7=V12_7
     etemp2_8=V12_8
     etemp2_9=V12_9
     etemp2_10=V12_10
     etemp2_11=V12_11
     etemp2_12=V12_12
     etemp2_13=V12_13
     etemp2_14=V12_14
     etemp2_15=V12_15
     etemp2_16=V12_16
     etemp2_17=V12_17
     etemp2_18=V12_18
     etemp2_19=V12_19
     etemp2_20=V12_20
#
     sqr=0.0
     etemp=V4_1*etemp2_1
     sqr+=etemp
     etemp=V4_2*etemp2_2
     sqr+=etemp
     etemp=V4_3*etemp2_3
     sqr+=etemp
     etemp=V4_4*etemp2_4
     sqr+=etemp
     etemp=V4_5*etemp2_5
     sqr+=etemp
     etemp=V4_6*etemp2_6
     sqr+=etemp
     etemp=V4_7*etemp2_7
     sqr+=etemp
     etemp=V4_8*etemp2_8
     sqr+=etemp
     etemp=V4_9*etemp2_9
     sqr+=etemp
     etemp=V4_10*etemp2_10
     sqr+=etemp
     etemp=V4_11*etemp2_11
     sqr+=etemp
     etemp=V4_12*etemp2_12
     sqr+=etemp
     etemp=V4_13*etemp2_13
     sqr+=etemp
     etemp=V4_14*etemp2_14
     sqr+=etemp
     etemp=V4_15*etemp2_15
     sqr+=etemp
     etemp=V4_16*etemp2_16
     sqr+=etemp
     etemp=V4_17*etemp2_17
     sqr+=etemp
     etemp=V4_18*etemp2_18
     sqr+=etemp
     etemp=V4_19*etemp2_19
     sqr+=etemp
     etemp=V4_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V4_1*sqr
     Vtemp_2=V4_2*sqr
     Vtemp_3=V4_3*sqr
     Vtemp_4=V4_4*sqr
     Vtemp_5=V4_5*sqr
     Vtemp_6=V4_6*sqr
     Vtemp_7=V4_7*sqr
     Vtemp_8=V4_8*sqr
     Vtemp_9=V4_9*sqr
     Vtemp_10=V4_10*sqr
     Vtemp_11=V4_11*sqr
     Vtemp_12=V4_12*sqr
     Vtemp_13=V4_13*sqr
     Vtemp_14=V4_14*sqr
     Vtemp_15=V4_15*sqr
     Vtemp_16=V4_16*sqr
     Vtemp_17=V4_17*sqr
     Vtemp_18=V4_18*sqr
     Vtemp_19=V4_19*sqr
     Vtemp_20=V4_20*sqr
#
     V12_1+=Vtemp_1
     V12_2+=Vtemp_2
     V12_3+=Vtemp_3
     V12_4+=Vtemp_4
     V12_5+=Vtemp_5
     V12_6+=Vtemp_6
     V12_7+=Vtemp_7
     V12_8+=Vtemp_8
     V12_9+=Vtemp_9
     V12_10+=Vtemp_10
     V12_11+=Vtemp_11
     V12_12+=Vtemp_12
     V12_13+=Vtemp_13
     V12_14+=Vtemp_14
     V12_15+=Vtemp_15
     V12_16+=Vtemp_16
     V12_17+=Vtemp_17
     V12_18+=Vtemp_18
     V12_19+=Vtemp_19
     V12_20+=Vtemp_20
#
#
     etemp2_1=V12_1
     etemp2_2=V12_2
     etemp2_3=V12_3
     etemp2_4=V12_4
     etemp2_5=V12_5
     etemp2_6=V12_6
     etemp2_7=V12_7
     etemp2_8=V12_8
     etemp2_9=V12_9
     etemp2_10=V12_10
     etemp2_11=V12_11
     etemp2_12=V12_12
     etemp2_13=V12_13
     etemp2_14=V12_14
     etemp2_15=V12_15
     etemp2_16=V12_16
     etemp2_17=V12_17
     etemp2_18=V12_18
     etemp2_19=V12_19
     etemp2_20=V12_20
#
     sqr=0.0
     etemp=V5_1*etemp2_1
     sqr+=etemp
     etemp=V5_2*etemp2_2
     sqr+=etemp
     etemp=V5_3*etemp2_3
     sqr+=etemp
     etemp=V5_4*etemp2_4
     sqr+=etemp
     etemp=V5_5*etemp2_5
     sqr+=etemp
     etemp=V5_6*etemp2_6
     sqr+=etemp
     etemp=V5_7*etemp2_7
     sqr+=etemp
     etemp=V5_8*etemp2_8
     sqr+=etemp
     etemp=V5_9*etemp2_9
     sqr+=etemp
     etemp=V5_10*etemp2_10
     sqr+=etemp
     etemp=V5_11*etemp2_11
     sqr+=etemp
     etemp=V5_12*etemp2_12
     sqr+=etemp
     etemp=V5_13*etemp2_13
     sqr+=etemp
     etemp=V5_14*etemp2_14
     sqr+=etemp
     etemp=V5_15*etemp2_15
     sqr+=etemp
     etemp=V5_16*etemp2_16
     sqr+=etemp
     etemp=V5_17*etemp2_17
     sqr+=etemp
     etemp=V5_18*etemp2_18
     sqr+=etemp
     etemp=V5_19*etemp2_19
     sqr+=etemp
     etemp=V5_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V5_1*sqr
     Vtemp_2=V5_2*sqr
     Vtemp_3=V5_3*sqr
     Vtemp_4=V5_4*sqr
     Vtemp_5=V5_5*sqr
     Vtemp_6=V5_6*sqr
     Vtemp_7=V5_7*sqr
     Vtemp_8=V5_8*sqr
     Vtemp_9=V5_9*sqr
     Vtemp_10=V5_10*sqr
     Vtemp_11=V5_11*sqr
     Vtemp_12=V5_12*sqr
     Vtemp_13=V5_13*sqr
     Vtemp_14=V5_14*sqr
     Vtemp_15=V5_15*sqr
     Vtemp_16=V5_16*sqr
     Vtemp_17=V5_17*sqr
     Vtemp_18=V5_18*sqr
     Vtemp_19=V5_19*sqr
     Vtemp_20=V5_20*sqr
#
     V12_1+=Vtemp_1
     V12_2+=Vtemp_2
     V12_3+=Vtemp_3
     V12_4+=Vtemp_4
     V12_5+=Vtemp_5
     V12_6+=Vtemp_6
     V12_7+=Vtemp_7
     V12_8+=Vtemp_8
     V12_9+=Vtemp_9
     V12_10+=Vtemp_10
     V12_11+=Vtemp_11
     V12_12+=Vtemp_12
     V12_13+=Vtemp_13
     V12_14+=Vtemp_14
     V12_15+=Vtemp_15
     V12_16+=Vtemp_16
     V12_17+=Vtemp_17
     V12_18+=Vtemp_18
     V12_19+=Vtemp_19
     V12_20+=Vtemp_20
#
#
     etemp2_1=V12_1
     etemp2_2=V12_2
     etemp2_3=V12_3
     etemp2_4=V12_4
     etemp2_5=V12_5
     etemp2_6=V12_6
     etemp2_7=V12_7
     etemp2_8=V12_8
     etemp2_9=V12_9
     etemp2_10=V12_10
     etemp2_11=V12_11
     etemp2_12=V12_12
     etemp2_13=V12_13
     etemp2_14=V12_14
     etemp2_15=V12_15
     etemp2_16=V12_16
     etemp2_17=V12_17
     etemp2_18=V12_18
     etemp2_19=V12_19
     etemp2_20=V12_20
#
     sqr=0.0
     etemp=V6_1*etemp2_1
     sqr+=etemp
     etemp=V6_2*etemp2_2
     sqr+=etemp
     etemp=V6_3*etemp2_3
     sqr+=etemp
     etemp=V6_4*etemp2_4
     sqr+=etemp
     etemp=V6_5*etemp2_5
     sqr+=etemp
     etemp=V6_6*etemp2_6
     sqr+=etemp
     etemp=V6_7*etemp2_7
     sqr+=etemp
     etemp=V6_8*etemp2_8
     sqr+=etemp
     etemp=V6_9*etemp2_9
     sqr+=etemp
     etemp=V6_10*etemp2_10
     sqr+=etemp
     etemp=V6_11*etemp2_11
     sqr+=etemp
     etemp=V6_12*etemp2_12
     sqr+=etemp
     etemp=V6_13*etemp2_13
     sqr+=etemp
     etemp=V6_14*etemp2_14
     sqr+=etemp
     etemp=V6_15*etemp2_15
     sqr+=etemp
     etemp=V6_16*etemp2_16
     sqr+=etemp
     etemp=V6_17*etemp2_17
     sqr+=etemp
     etemp=V6_18*etemp2_18
     sqr+=etemp
     etemp=V6_19*etemp2_19
     sqr+=etemp
     etemp=V6_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V6_1*sqr
     Vtemp_2=V6_2*sqr
     Vtemp_3=V6_3*sqr
     Vtemp_4=V6_4*sqr
     Vtemp_5=V6_5*sqr
     Vtemp_6=V6_6*sqr
     Vtemp_7=V6_7*sqr
     Vtemp_8=V6_8*sqr
     Vtemp_9=V6_9*sqr
     Vtemp_10=V6_10*sqr
     Vtemp_11=V6_11*sqr
     Vtemp_12=V6_12*sqr
     Vtemp_13=V6_13*sqr
     Vtemp_14=V6_14*sqr
     Vtemp_15=V6_15*sqr
     Vtemp_16=V6_16*sqr
     Vtemp_17=V6_17*sqr
     Vtemp_18=V6_18*sqr
     Vtemp_19=V6_19*sqr
     Vtemp_20=V6_20*sqr
#
     V12_1+=Vtemp_1
     V12_2+=Vtemp_2
     V12_3+=Vtemp_3
     V12_4+=Vtemp_4
     V12_5+=Vtemp_5
     V12_6+=Vtemp_6
     V12_7+=Vtemp_7
     V12_8+=Vtemp_8
     V12_9+=Vtemp_9
     V12_10+=Vtemp_10
     V12_11+=Vtemp_11
     V12_12+=Vtemp_12
     V12_13+=Vtemp_13
     V12_14+=Vtemp_14
     V12_15+=Vtemp_15
     V12_16+=Vtemp_16
     V12_17+=Vtemp_17
     V12_18+=Vtemp_18
     V12_19+=Vtemp_19
     V12_20+=Vtemp_20
#
#
     etemp2_1=V12_1
     etemp2_2=V12_2
     etemp2_3=V12_3
     etemp2_4=V12_4
     etemp2_5=V12_5
     etemp2_6=V12_6
     etemp2_7=V12_7
     etemp2_8=V12_8
     etemp2_9=V12_9
     etemp2_10=V12_10
     etemp2_11=V12_11
     etemp2_12=V12_12
     etemp2_13=V12_13
     etemp2_14=V12_14
     etemp2_15=V12_15
     etemp2_16=V12_16
     etemp2_17=V12_17
     etemp2_18=V12_18
     etemp2_19=V12_19
     etemp2_20=V12_20
#
     sqr=0.0
     etemp=V7_1*etemp2_1
     sqr+=etemp
     etemp=V7_2*etemp2_2
     sqr+=etemp
     etemp=V7_3*etemp2_3
     sqr+=etemp
     etemp=V7_4*etemp2_4
     sqr+=etemp
     etemp=V7_5*etemp2_5
     sqr+=etemp
     etemp=V7_6*etemp2_6
     sqr+=etemp
     etemp=V7_7*etemp2_7
     sqr+=etemp
     etemp=V7_8*etemp2_8
     sqr+=etemp
     etemp=V7_9*etemp2_9
     sqr+=etemp
     etemp=V7_10*etemp2_10
     sqr+=etemp
     etemp=V7_11*etemp2_11
     sqr+=etemp
     etemp=V7_12*etemp2_12
     sqr+=etemp
     etemp=V7_13*etemp2_13
     sqr+=etemp
     etemp=V7_14*etemp2_14
     sqr+=etemp
     etemp=V7_15*etemp2_15
     sqr+=etemp
     etemp=V7_16*etemp2_16
     sqr+=etemp
     etemp=V7_17*etemp2_17
     sqr+=etemp
     etemp=V7_18*etemp2_18
     sqr+=etemp
     etemp=V7_19*etemp2_19
     sqr+=etemp
     etemp=V7_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V7_1*sqr
     Vtemp_2=V7_2*sqr
     Vtemp_3=V7_3*sqr
     Vtemp_4=V7_4*sqr
     Vtemp_5=V7_5*sqr
     Vtemp_6=V7_6*sqr
     Vtemp_7=V7_7*sqr
     Vtemp_8=V7_8*sqr
     Vtemp_9=V7_9*sqr
     Vtemp_10=V7_10*sqr
     Vtemp_11=V7_11*sqr
     Vtemp_12=V7_12*sqr
     Vtemp_13=V7_13*sqr
     Vtemp_14=V7_14*sqr
     Vtemp_15=V7_15*sqr
     Vtemp_16=V7_16*sqr
     Vtemp_17=V7_17*sqr
     Vtemp_18=V7_18*sqr
     Vtemp_19=V7_19*sqr
     Vtemp_20=V7_20*sqr
#
     V12_1+=Vtemp_1
     V12_2+=Vtemp_2
     V12_3+=Vtemp_3
     V12_4+=Vtemp_4
     V12_5+=Vtemp_5
     V12_6+=Vtemp_6
     V12_7+=Vtemp_7
     V12_8+=Vtemp_8
     V12_9+=Vtemp_9
     V12_10+=Vtemp_10
     V12_11+=Vtemp_11
     V12_12+=Vtemp_12
     V12_13+=Vtemp_13
     V12_14+=Vtemp_14
     V12_15+=Vtemp_15
     V12_16+=Vtemp_16
     V12_17+=Vtemp_17
     V12_18+=Vtemp_18
     V12_19+=Vtemp_19
     V12_20+=Vtemp_20
#
#
     etemp2_1=V12_1
     etemp2_2=V12_2
     etemp2_3=V12_3
     etemp2_4=V12_4
     etemp2_5=V12_5
     etemp2_6=V12_6
     etemp2_7=V12_7
     etemp2_8=V12_8
     etemp2_9=V12_9
     etemp2_10=V12_10
     etemp2_11=V12_11
     etemp2_12=V12_12
     etemp2_13=V12_13
     etemp2_14=V12_14
     etemp2_15=V12_15
     etemp2_16=V12_16
     etemp2_17=V12_17
     etemp2_18=V12_18
     etemp2_19=V12_19
     etemp2_20=V12_20
#
     sqr=0.0
     etemp=V8_1*etemp2_1
     sqr+=etemp
     etemp=V8_2*etemp2_2
     sqr+=etemp
     etemp=V8_3*etemp2_3
     sqr+=etemp
     etemp=V8_4*etemp2_4
     sqr+=etemp
     etemp=V8_5*etemp2_5
     sqr+=etemp
     etemp=V8_6*etemp2_6
     sqr+=etemp
     etemp=V8_7*etemp2_7
     sqr+=etemp
     etemp=V8_8*etemp2_8
     sqr+=etemp
     etemp=V8_9*etemp2_9
     sqr+=etemp
     etemp=V8_10*etemp2_10
     sqr+=etemp
     etemp=V8_11*etemp2_11
     sqr+=etemp
     etemp=V8_12*etemp2_12
     sqr+=etemp
     etemp=V8_13*etemp2_13
     sqr+=etemp
     etemp=V8_14*etemp2_14
     sqr+=etemp
     etemp=V8_15*etemp2_15
     sqr+=etemp
     etemp=V8_16*etemp2_16
     sqr+=etemp
     etemp=V8_17*etemp2_17
     sqr+=etemp
     etemp=V8_18*etemp2_18
     sqr+=etemp
     etemp=V8_19*etemp2_19
     sqr+=etemp
     etemp=V8_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V8_1*sqr
     Vtemp_2=V8_2*sqr
     Vtemp_3=V8_3*sqr
     Vtemp_4=V8_4*sqr
     Vtemp_5=V8_5*sqr
     Vtemp_6=V8_6*sqr
     Vtemp_7=V8_7*sqr
     Vtemp_8=V8_8*sqr
     Vtemp_9=V8_9*sqr
     Vtemp_10=V8_10*sqr
     Vtemp_11=V8_11*sqr
     Vtemp_12=V8_12*sqr
     Vtemp_13=V8_13*sqr
     Vtemp_14=V8_14*sqr
     Vtemp_15=V8_15*sqr
     Vtemp_16=V8_16*sqr
     Vtemp_17=V8_17*sqr
     Vtemp_18=V8_18*sqr
     Vtemp_19=V8_19*sqr
     Vtemp_20=V8_20*sqr
#
     V12_1+=Vtemp_1
     V12_2+=Vtemp_2
     V12_3+=Vtemp_3
     V12_4+=Vtemp_4
     V12_5+=Vtemp_5
     V12_6+=Vtemp_6
     V12_7+=Vtemp_7
     V12_8+=Vtemp_8
     V12_9+=Vtemp_9
     V12_10+=Vtemp_10
     V12_11+=Vtemp_11
     V12_12+=Vtemp_12
     V12_13+=Vtemp_13
     V12_14+=Vtemp_14
     V12_15+=Vtemp_15
     V12_16+=Vtemp_16
     V12_17+=Vtemp_17
     V12_18+=Vtemp_18
     V12_19+=Vtemp_19
     V12_20+=Vtemp_20
#
#
     etemp2_1=V12_1
     etemp2_2=V12_2
     etemp2_3=V12_3
     etemp2_4=V12_4
     etemp2_5=V12_5
     etemp2_6=V12_6
     etemp2_7=V12_7
     etemp2_8=V12_8
     etemp2_9=V12_9
     etemp2_10=V12_10
     etemp2_11=V12_11
     etemp2_12=V12_12
     etemp2_13=V12_13
     etemp2_14=V12_14
     etemp2_15=V12_15
     etemp2_16=V12_16
     etemp2_17=V12_17
     etemp2_18=V12_18
     etemp2_19=V12_19
     etemp2_20=V12_20
#
     sqr=0.0
     etemp=V9_1*etemp2_1
     sqr+=etemp
     etemp=V9_2*etemp2_2
     sqr+=etemp
     etemp=V9_3*etemp2_3
     sqr+=etemp
     etemp=V9_4*etemp2_4
     sqr+=etemp
     etemp=V9_5*etemp2_5
     sqr+=etemp
     etemp=V9_6*etemp2_6
     sqr+=etemp
     etemp=V9_7*etemp2_7
     sqr+=etemp
     etemp=V9_8*etemp2_8
     sqr+=etemp
     etemp=V9_9*etemp2_9
     sqr+=etemp
     etemp=V9_10*etemp2_10
     sqr+=etemp
     etemp=V9_11*etemp2_11
     sqr+=etemp
     etemp=V9_12*etemp2_12
     sqr+=etemp
     etemp=V9_13*etemp2_13
     sqr+=etemp
     etemp=V9_14*etemp2_14
     sqr+=etemp
     etemp=V9_15*etemp2_15
     sqr+=etemp
     etemp=V9_16*etemp2_16
     sqr+=etemp
     etemp=V9_17*etemp2_17
     sqr+=etemp
     etemp=V9_18*etemp2_18
     sqr+=etemp
     etemp=V9_19*etemp2_19
     sqr+=etemp
     etemp=V9_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V9_1*sqr
     Vtemp_2=V9_2*sqr
     Vtemp_3=V9_3*sqr
     Vtemp_4=V9_4*sqr
     Vtemp_5=V9_5*sqr
     Vtemp_6=V9_6*sqr
     Vtemp_7=V9_7*sqr
     Vtemp_8=V9_8*sqr
     Vtemp_9=V9_9*sqr
     Vtemp_10=V9_10*sqr
     Vtemp_11=V9_11*sqr
     Vtemp_12=V9_12*sqr
     Vtemp_13=V9_13*sqr
     Vtemp_14=V9_14*sqr
     Vtemp_15=V9_15*sqr
     Vtemp_16=V9_16*sqr
     Vtemp_17=V9_17*sqr
     Vtemp_18=V9_18*sqr
     Vtemp_19=V9_19*sqr
     Vtemp_20=V9_20*sqr
#
     V12_1+=Vtemp_1
     V12_2+=Vtemp_2
     V12_3+=Vtemp_3
     V12_4+=Vtemp_4
     V12_5+=Vtemp_5
     V12_6+=Vtemp_6
     V12_7+=Vtemp_7
     V12_8+=Vtemp_8
     V12_9+=Vtemp_9
     V12_10+=Vtemp_10
     V12_11+=Vtemp_11
     V12_12+=Vtemp_12
     V12_13+=Vtemp_13
     V12_14+=Vtemp_14
     V12_15+=Vtemp_15
     V12_16+=Vtemp_16
     V12_17+=Vtemp_17
     V12_18+=Vtemp_18
     V12_19+=Vtemp_19
     V12_20+=Vtemp_20
#
#
     etemp2_1=V12_1
     etemp2_2=V12_2
     etemp2_3=V12_3
     etemp2_4=V12_4
     etemp2_5=V12_5
     etemp2_6=V12_6
     etemp2_7=V12_7
     etemp2_8=V12_8
     etemp2_9=V12_9
     etemp2_10=V12_10
     etemp2_11=V12_11
     etemp2_12=V12_12
     etemp2_13=V12_13
     etemp2_14=V12_14
     etemp2_15=V12_15
     etemp2_16=V12_16
     etemp2_17=V12_17
     etemp2_18=V12_18
     etemp2_19=V12_19
     etemp2_20=V12_20
#
     sqr=0.0
     etemp=V10_1*etemp2_1
     sqr+=etemp
     etemp=V10_2*etemp2_2
     sqr+=etemp
     etemp=V10_3*etemp2_3
     sqr+=etemp
     etemp=V10_4*etemp2_4
     sqr+=etemp
     etemp=V10_5*etemp2_5
     sqr+=etemp
     etemp=V10_6*etemp2_6
     sqr+=etemp
     etemp=V10_7*etemp2_7
     sqr+=etemp
     etemp=V10_8*etemp2_8
     sqr+=etemp
     etemp=V10_9*etemp2_9
     sqr+=etemp
     etemp=V10_10*etemp2_10
     sqr+=etemp
     etemp=V10_11*etemp2_11
     sqr+=etemp
     etemp=V10_12*etemp2_12
     sqr+=etemp
     etemp=V10_13*etemp2_13
     sqr+=etemp
     etemp=V10_14*etemp2_14
     sqr+=etemp
     etemp=V10_15*etemp2_15
     sqr+=etemp
     etemp=V10_16*etemp2_16
     sqr+=etemp
     etemp=V10_17*etemp2_17
     sqr+=etemp
     etemp=V10_18*etemp2_18
     sqr+=etemp
     etemp=V10_19*etemp2_19
     sqr+=etemp
     etemp=V10_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V10_1*sqr
     Vtemp_2=V10_2*sqr
     Vtemp_3=V10_3*sqr
     Vtemp_4=V10_4*sqr
     Vtemp_5=V10_5*sqr
     Vtemp_6=V10_6*sqr
     Vtemp_7=V10_7*sqr
     Vtemp_8=V10_8*sqr
     Vtemp_9=V10_9*sqr
     Vtemp_10=V10_10*sqr
     Vtemp_11=V10_11*sqr
     Vtemp_12=V10_12*sqr
     Vtemp_13=V10_13*sqr
     Vtemp_14=V10_14*sqr
     Vtemp_15=V10_15*sqr
     Vtemp_16=V10_16*sqr
     Vtemp_17=V10_17*sqr
     Vtemp_18=V10_18*sqr
     Vtemp_19=V10_19*sqr
     Vtemp_20=V10_20*sqr
#
     V12_1+=Vtemp_1
     V12_2+=Vtemp_2
     V12_3+=Vtemp_3
     V12_4+=Vtemp_4
     V12_5+=Vtemp_5
     V12_6+=Vtemp_6
     V12_7+=Vtemp_7
     V12_8+=Vtemp_8
     V12_9+=Vtemp_9
     V12_10+=Vtemp_10
     V12_11+=Vtemp_11
     V12_12+=Vtemp_12
     V12_13+=Vtemp_13
     V12_14+=Vtemp_14
     V12_15+=Vtemp_15
     V12_16+=Vtemp_16
     V12_17+=Vtemp_17
     V12_18+=Vtemp_18
     V12_19+=Vtemp_19
     V12_20+=Vtemp_20
#
#
     etemp2_1=V12_1
     etemp2_2=V12_2
     etemp2_3=V12_3
     etemp2_4=V12_4
     etemp2_5=V12_5
     etemp2_6=V12_6
     etemp2_7=V12_7
     etemp2_8=V12_8
     etemp2_9=V12_9
     etemp2_10=V12_10
     etemp2_11=V12_11
     etemp2_12=V12_12
     etemp2_13=V12_13
     etemp2_14=V12_14
     etemp2_15=V12_15
     etemp2_16=V12_16
     etemp2_17=V12_17
     etemp2_18=V12_18
     etemp2_19=V12_19
     etemp2_20=V12_20
#
     sqr=0.0
     etemp=V11_1*etemp2_1
     sqr+=etemp
     etemp=V11_2*etemp2_2
     sqr+=etemp
     etemp=V11_3*etemp2_3
     sqr+=etemp
     etemp=V11_4*etemp2_4
     sqr+=etemp
     etemp=V11_5*etemp2_5
     sqr+=etemp
     etemp=V11_6*etemp2_6
     sqr+=etemp
     etemp=V11_7*etemp2_7
     sqr+=etemp
     etemp=V11_8*etemp2_8
     sqr+=etemp
     etemp=V11_9*etemp2_9
     sqr+=etemp
     etemp=V11_10*etemp2_10
     sqr+=etemp
     etemp=V11_11*etemp2_11
     sqr+=etemp
     etemp=V11_12*etemp2_12
     sqr+=etemp
     etemp=V11_13*etemp2_13
     sqr+=etemp
     etemp=V11_14*etemp2_14
     sqr+=etemp
     etemp=V11_15*etemp2_15
     sqr+=etemp
     etemp=V11_16*etemp2_16
     sqr+=etemp
     etemp=V11_17*etemp2_17
     sqr+=etemp
     etemp=V11_18*etemp2_18
     sqr+=etemp
     etemp=V11_19*etemp2_19
     sqr+=etemp
     etemp=V11_20*etemp2_20
     sqr+=etemp
#
      sqr*=-1.0
#
     Vtemp_1=V11_1*sqr
     Vtemp_2=V11_2*sqr
     Vtemp_3=V11_3*sqr
     Vtemp_4=V11_4*sqr
     Vtemp_5=V11_5*sqr
     Vtemp_6=V11_6*sqr
     Vtemp_7=V11_7*sqr
     Vtemp_8=V11_8*sqr
     Vtemp_9=V11_9*sqr
     Vtemp_10=V11_10*sqr
     Vtemp_11=V11_11*sqr
     Vtemp_12=V11_12*sqr
     Vtemp_13=V11_13*sqr
     Vtemp_14=V11_14*sqr
     Vtemp_15=V11_15*sqr
     Vtemp_16=V11_16*sqr
     Vtemp_17=V11_17*sqr
     Vtemp_18=V11_18*sqr
     Vtemp_19=V11_19*sqr
     Vtemp_20=V11_20*sqr
#
     V12_1+=Vtemp_1
     V12_2+=Vtemp_2
     V12_3+=Vtemp_3
     V12_4+=Vtemp_4
     V12_5+=Vtemp_5
     V12_6+=Vtemp_6
     V12_7+=Vtemp_7
     V12_8+=Vtemp_8
     V12_9+=Vtemp_9
     V12_10+=Vtemp_10
     V12_11+=Vtemp_11
     V12_12+=Vtemp_12
     V12_13+=Vtemp_13
     V12_14+=Vtemp_14
     V12_15+=Vtemp_15
     V12_16+=Vtemp_16
     V12_17+=Vtemp_17
     V12_18+=Vtemp_18
     V12_19+=Vtemp_19
     V12_20+=Vtemp_20
#
#
     Vtemp_1=V12_1
     Vtemp_2=V12_2
     Vtemp_3=V12_3
     Vtemp_4=V12_4
     Vtemp_5=V12_5
     Vtemp_6=V12_6
     Vtemp_7=V12_7
     Vtemp_8=V12_8
     Vtemp_9=V12_9
     Vtemp_10=V12_10
     Vtemp_11=V12_11
     Vtemp_12=V12_12
     Vtemp_13=V12_13
     Vtemp_14=V12_14
     Vtemp_15=V12_15
     Vtemp_16=V12_16
     Vtemp_17=V12_17
     Vtemp_18=V12_18
     Vtemp_19=V12_19
     Vtemp_20=V12_20
#
     sqr=0.0
#
     etemp=V12_1*Vtemp_1
     sqr+=etemp
     etemp=V12_2*Vtemp_2
     sqr+=etemp
     etemp=V12_3*Vtemp_3
     sqr+=etemp
     etemp=V12_4*Vtemp_4
     sqr+=etemp
     etemp=V12_5*Vtemp_5
     sqr+=etemp
     etemp=V12_6*Vtemp_6
     sqr+=etemp
     etemp=V12_7*Vtemp_7
     sqr+=etemp
     etemp=V12_8*Vtemp_8
     sqr+=etemp
     etemp=V12_9*Vtemp_9
     sqr+=etemp
     etemp=V12_10*Vtemp_10
     sqr+=etemp
     etemp=V12_11*Vtemp_11
     sqr+=etemp
     etemp=V12_12*Vtemp_12
     sqr+=etemp
     etemp=V12_13*Vtemp_13
     sqr+=etemp
     etemp=V12_14*Vtemp_14
     sqr+=etemp
     etemp=V12_15*Vtemp_15
     sqr+=etemp
     etemp=V12_16*Vtemp_16
     sqr+=etemp
     etemp=V12_17*Vtemp_17
     sqr+=etemp
     etemp=V12_18*Vtemp_18
     sqr+=etemp
     etemp=V12_19*Vtemp_19
     sqr+=etemp
     etemp=V12_20*Vtemp_20
     sqr+=etemp
#
       exponent=0.5
#       execute square_root sqr exponent
#       sqr2=1.0/sqr
     execute norm_fac sqr exponent
     sqr2=sqr
#
     V12_1*=sqr2
     V12_2*=sqr2
     V12_3*=sqr2
     V12_4*=sqr2
     V12_5*=sqr2
     V12_6*=sqr2
     V12_7*=sqr2
     V12_8*=sqr2
     V12_9*=sqr2
     V12_10*=sqr2
     V12_11*=sqr2
     V12_12*=sqr2
     V12_13*=sqr2
     V12_14*=sqr2
     V12_15*=sqr2
     V12_16*=sqr2
     V12_17*=sqr2
     V12_18*=sqr2
     V12_19*=sqr2
     V12_20*=sqr2
#
     DO k20 
     DO j20 
#
        if j20 == 1 
           if k20 == 1 
              MYvev(k20,j20) = V1_1  
           endif 
           if k20 == 2 
              MYvev(k20,j20) = V2_1  
           endif 
           if k20 == 3 
              MYvev(k20,j20) = V3_1  
           endif 
           if k20 == 4 
              MYvev(k20,j20) = V4_1  
           endif 
           if k20 == 5 
              MYvev(k20,j20) = V5_1  
           endif 
           if k20 == 6 
              MYvev(k20,j20) = V6_1  
           endif 
           if k20 == 7 
              MYvev(k20,j20) = V7_1  
           endif 
           if k20 == 8 
              MYvev(k20,j20) = V8_1  
           endif 
           if k20 == 9 
              MYvev(k20,j20) = V9_1  
           endif 
           if k20 == 10
              MYvev(k20,j20) = V10_1  
           endif 
           if k20 == 11
              MYvev(k20,j20) = V11_1  
           endif 
           if k20 == 12
              MYvev(k20,j20) = V12_1  
           endif 
        endif 
#
#
        if j20 == 2 
           if k20 == 1 
              MYvev(k20,j20) = V1_2  
           endif 
           if k20 == 2 
              MYvev(k20,j20) = V2_2  
           endif 
           if k20 == 3 
              MYvev(k20,j20) = V3_2  
           endif 
           if k20 == 4 
              MYvev(k20,j20) = V4_2  
           endif 
           if k20 == 5 
              MYvev(k20,j20) = V5_2  
           endif 
           if k20 == 6 
              MYvev(k20,j20) = V6_2  
           endif 
           if k20 == 7 
              MYvev(k20,j20) = V7_2  
           endif 
           if k20 == 8 
              MYvev(k20,j20) = V8_2  
           endif 
           if k20 == 9 
              MYvev(k20,j20) = V9_2  
           endif 
           if k20 == 10
              MYvev(k20,j20) = V10_2  
           endif 
           if k20 == 11
              MYvev(k20,j20) = V11_2  
           endif 
           if k20 == 12
              MYvev(k20,j20) = V12_2  
           endif 
        endif 
#
#
        if j20 == 3 
           if k20 == 1 
              MYvev(k20,j20) = V1_3  
           endif 
           if k20 == 2 
              MYvev(k20,j20) = V2_3  
           endif 
           if k20 == 3 
              MYvev(k20,j20) = V3_3  
           endif 
           if k20 == 4 
              MYvev(k20,j20) = V4_3  
           endif 
           if k20 == 5 
              MYvev(k20,j20) = V5_3  
           endif 
           if k20 == 6 
              MYvev(k20,j20) = V6_3  
           endif 
           if k20 == 7 
              MYvev(k20,j20) = V7_3  
           endif 
           if k20 == 8 
              MYvev(k20,j20) = V8_3  
           endif 
           if k20 == 9 
              MYvev(k20,j20) = V9_3  
           endif 
           if k20 == 10
              MYvev(k20,j20) = V10_3  
           endif 
           if k20 == 11
              MYvev(k20,j20) = V11_3  
           endif 
           if k20 == 12
              MYvev(k20,j20) = V12_3  
           endif 
        endif 
#
#
        if j20 == 4 
           if k20 == 1 
              MYvev(k20,j20) = V1_4  
           endif 
           if k20 == 2 
              MYvev(k20,j20) = V2_4  
           endif 
           if k20 == 3 
              MYvev(k20,j20) = V3_4  
           endif 
           if k20 == 4 
              MYvev(k20,j20) = V4_4  
           endif 
           if k20 == 5 
              MYvev(k20,j20) = V5_4  
           endif 
           if k20 == 6 
              MYvev(k20,j20) = V6_4  
           endif 
           if k20 == 7 
              MYvev(k20,j20) = V7_4  
           endif 
           if k20 == 8 
              MYvev(k20,j20) = V8_4  
           endif 
           if k20 == 9 
              MYvev(k20,j20) = V9_4  
           endif 
           if k20 == 10
              MYvev(k20,j20) = V10_4  
           endif 
           if k20 == 11
              MYvev(k20,j20) = V11_4  
           endif 
           if k20 == 12
              MYvev(k20,j20) = V12_4  
           endif 
        endif 
#
#
        if j20 == 5 
           if k20 == 1 
              MYvev(k20,j20) = V1_5  
           endif 
           if k20 == 2 
              MYvev(k20,j20) = V2_5  
           endif 
           if k20 == 3 
              MYvev(k20,j20) = V3_5  
           endif 
           if k20 == 4 
              MYvev(k20,j20) = V4_5  
           endif 
           if k20 == 5 
              MYvev(k20,j20) = V5_5  
           endif 
           if k20 == 6 
              MYvev(k20,j20) = V6_5  
           endif 
           if k20 == 7 
              MYvev(k20,j20) = V7_5  
           endif 
           if k20 == 8 
              MYvev(k20,j20) = V8_5  
           endif 
           if k20 == 9 
              MYvev(k20,j20) = V9_5  
           endif 
           if k20 == 10
              MYvev(k20,j20) = V10_5  
           endif 
           if k20 == 11
              MYvev(k20,j20) = V11_5  
           endif 
           if k20 == 12
              MYvev(k20,j20) = V12_5  
           endif 
        endif 
#
#
        if j20 == 6 
           if k20 == 1 
              MYvev(k20,j20) = V1_6  
           endif 
           if k20 == 2 
              MYvev(k20,j20) = V2_6  
           endif 
           if k20 == 3 
              MYvev(k20,j20) = V3_6  
           endif 
           if k20 == 4 
              MYvev(k20,j20) = V4_6  
           endif 
           if k20 == 5 
              MYvev(k20,j20) = V5_6  
           endif 
           if k20 == 6 
              MYvev(k20,j20) = V6_6  
           endif 
           if k20 == 7 
              MYvev(k20,j20) = V7_6  
           endif 
           if k20 == 8 
              MYvev(k20,j20) = V8_6  
           endif 
           if k20 == 9 
              MYvev(k20,j20) = V9_6  
           endif 
           if k20 == 10
              MYvev(k20,j20) = V10_6  
           endif 
           if k20 == 11
              MYvev(k20,j20) = V11_6  
           endif 
           if k20 == 12
              MYvev(k20,j20) = V12_6  
           endif 
        endif 
#
#
        if j20 == 7 
           if k20 == 1 
              MYvev(k20,j20) = V1_7  
           endif 
           if k20 == 2 
              MYvev(k20,j20) = V2_7  
           endif 
           if k20 == 3 
              MYvev(k20,j20) = V3_7  
           endif 
           if k20 == 4 
              MYvev(k20,j20) = V4_7  
           endif 
           if k20 == 5 
              MYvev(k20,j20) = V5_7  
           endif 
           if k20 == 6 
              MYvev(k20,j20) = V6_7  
           endif 
           if k20 == 7 
              MYvev(k20,j20) = V7_7  
           endif 
           if k20 == 8 
              MYvev(k20,j20) = V8_7  
           endif 
           if k20 == 9 
              MYvev(k20,j20) = V9_7  
           endif 
           if k20 == 10
              MYvev(k20,j20) = V10_7  
           endif 
           if k20 == 11
              MYvev(k20,j20) = V11_7  
           endif 
           if k20 == 12
              MYvev(k20,j20) = V12_7  
           endif 
        endif 
#
#
        if j20 == 8 
           if k20 == 1 
              MYvev(k20,j20) = V1_8  
           endif 
           if k20 == 2 
              MYvev(k20,j20) = V2_8  
           endif 
           if k20 == 3 
              MYvev(k20,j20) = V3_8  
           endif 
           if k20 == 4 
              MYvev(k20,j20) = V4_8  
           endif 
           if k20 == 5 
              MYvev(k20,j20) = V5_8  
           endif 
           if k20 == 6 
              MYvev(k20,j20) = V6_8  
           endif 
           if k20 == 7 
              MYvev(k20,j20) = V7_8  
           endif 
           if k20 == 8 
              MYvev(k20,j20) = V8_8  
           endif 
           if k20 == 9 
              MYvev(k20,j20) = V9_8  
           endif 
           if k20 == 10
              MYvev(k20,j20) = V10_8  
           endif 
           if k20 == 11
              MYvev(k20,j20) = V11_8  
           endif 
           if k20 == 12
              MYvev(k20,j20) = V12_8  
           endif 
        endif 
#
#
        if j20 == 9 
           if k20 == 1 
              MYvev(k20,j20) = V1_9  
           endif 
           if k20 == 2 
              MYvev(k20,j20) = V2_9  
           endif 
           if k20 == 3 
              MYvev(k20,j20) = V3_9  
           endif 
           if k20 == 4 
              MYvev(k20,j20) = V4_9  
           endif 
           if k20 == 5 
              MYvev(k20,j20) = V5_9  
           endif 
           if k20 == 6 
              MYvev(k20,j20) = V6_9  
           endif 
           if k20 == 7 
              MYvev(k20,j20) = V7_9  
           endif 
           if k20 == 8 
              MYvev(k20,j20) = V8_9  
           endif 
           if k20 == 9 
              MYvev(k20,j20) = V9_9  
           endif 
           if k20 == 10
              MYvev(k20,j20) = V10_9  
           endif 
           if k20 == 11
              MYvev(k20,j20) = V11_9  
           endif 
           if k20 == 12
              MYvev(k20,j20) = V12_9  
           endif 
        endif 
#
#
        if j20 == 10
           if k20 == 1 
              MYvev(k20,j20) = V1_10 
           endif 
           if k20 == 2 
              MYvev(k20,j20) = V2_10 
           endif 
           if k20 == 3 
              MYvev(k20,j20) = V3_10 
           endif 
           if k20 == 4 
              MYvev(k20,j20) = V4_10 
           endif 
           if k20 == 5 
              MYvev(k20,j20) = V5_10 
           endif 
           if k20 == 6 
              MYvev(k20,j20) = V6_10 
           endif 
           if k20 == 7 
              MYvev(k20,j20) = V7_10 
           endif 
           if k20 == 8 
              MYvev(k20,j20) = V8_10 
           endif 
           if k20 == 9 
              MYvev(k20,j20) = V9_10 
           endif 
           if k20 == 10
              MYvev(k20,j20) = V10_10 
           endif 
           if k20 == 11
              MYvev(k20,j20) = V11_10 
           endif 
           if k20 == 12
              MYvev(k20,j20) = V12_10 
           endif 
        endif 
#
#
        if j20 == 11
           if k20 == 1 
              MYvev(k20,j20) = V1_11 
           endif 
           if k20 == 2 
              MYvev(k20,j20) = V2_11 
           endif 
           if k20 == 3 
              MYvev(k20,j20) = V3_11 
           endif 
           if k20 == 4 
              MYvev(k20,j20) = V4_11 
           endif 
           if k20 == 5 
              MYvev(k20,j20) = V5_11 
           endif 
           if k20 == 6 
              MYvev(k20,j20) = V6_11 
           endif 
           if k20 == 7 
              MYvev(k20,j20) = V7_11 
           endif 
           if k20 == 8 
              MYvev(k20,j20) = V8_11 
           endif 
           if k20 == 9 
              MYvev(k20,j20) = V9_11 
           endif 
           if k20 == 10
              MYvev(k20,j20) = V10_11 
           endif 
           if k20 == 11
              MYvev(k20,j20) = V11_11 
           endif 
           if k20 == 12
              MYvev(k20,j20) = V12_11 
           endif 
        endif 
#
#
        if j20 == 12
           if k20 == 1 
              MYvev(k20,j20) = V1_12 
           endif 
           if k20 == 2 
              MYvev(k20,j20) = V2_12 
           endif 
           if k20 == 3 
              MYvev(k20,j20) = V3_12 
           endif 
           if k20 == 4 
              MYvev(k20,j20) = V4_12 
           endif 
           if k20 == 5 
              MYvev(k20,j20) = V5_12 
           endif 
           if k20 == 6 
              MYvev(k20,j20) = V6_12 
           endif 
           if k20 == 7 
              MYvev(k20,j20) = V7_12 
           endif 
           if k20 == 8 
              MYvev(k20,j20) = V8_12 
           endif 
           if k20 == 9 
              MYvev(k20,j20) = V9_12 
           endif 
           if k20 == 10
              MYvev(k20,j20) = V10_12 
           endif 
           if k20 == 11
              MYvev(k20,j20) = V11_12 
           endif 
           if k20 == 12
              MYvev(k20,j20) = V12_12 
           endif 
        endif 
#
#
        if j20 == 13
           if k20 == 1 
              MYvev(k20,j20) = V1_13 
           endif 
           if k20 == 2 
              MYvev(k20,j20) = V2_13 
           endif 
           if k20 == 3 
              MYvev(k20,j20) = V3_13 
           endif 
           if k20 == 4 
              MYvev(k20,j20) = V4_13 
           endif 
           if k20 == 5 
              MYvev(k20,j20) = V5_13 
           endif 
           if k20 == 6 
              MYvev(k20,j20) = V6_13 
           endif 
           if k20 == 7 
              MYvev(k20,j20) = V7_13 
           endif 
           if k20 == 8 
              MYvev(k20,j20) = V8_13 
           endif 
           if k20 == 9 
              MYvev(k20,j20) = V9_13 
           endif 
           if k20 == 10
              MYvev(k20,j20) = V10_13 
           endif 
           if k20 == 11
              MYvev(k20,j20) = V11_13 
           endif 
           if k20 == 12
              MYvev(k20,j20) = V12_13 
           endif 
        endif 
#
#
        if j20 == 14
           if k20 == 1 
              MYvev(k20,j20) = V1_14 
           endif 
           if k20 == 2 
              MYvev(k20,j20) = V2_14 
           endif 
           if k20 == 3 
              MYvev(k20,j20) = V3_14 
           endif 
           if k20 == 4 
              MYvev(k20,j20) = V4_14 
           endif 
           if k20 == 5 
              MYvev(k20,j20) = V5_14 
           endif 
           if k20 == 6 
              MYvev(k20,j20) = V6_14 
           endif 
           if k20 == 7 
              MYvev(k20,j20) = V7_14 
           endif 
           if k20 == 8 
              MYvev(k20,j20) = V8_14 
           endif 
           if k20 == 9 
              MYvev(k20,j20) = V9_14 
           endif 
           if k20 == 10
              MYvev(k20,j20) = V10_14 
           endif 
           if k20 == 11
              MYvev(k20,j20) = V11_14 
           endif 
           if k20 == 12
              MYvev(k20,j20) = V12_14 
           endif 
        endif 
#
#
        if j20 == 15
           if k20 == 1 
              MYvev(k20,j20) = V1_15 
           endif 
           if k20 == 2 
              MYvev(k20,j20) = V2_15 
           endif 
           if k20 == 3 
              MYvev(k20,j20) = V3_15 
           endif 
           if k20 == 4 
              MYvev(k20,j20) = V4_15 
           endif 
           if k20 == 5 
              MYvev(k20,j20) = V5_15 
           endif 
           if k20 == 6 
              MYvev(k20,j20) = V6_15 
           endif 
           if k20 == 7 
              MYvev(k20,j20) = V7_15 
           endif 
           if k20 == 8 
              MYvev(k20,j20) = V8_15 
           endif 
           if k20 == 9 
              MYvev(k20,j20) = V9_15 
           endif 
           if k20 == 10
              MYvev(k20,j20) = V10_15 
           endif 
           if k20 == 11
              MYvev(k20,j20) = V11_15 
           endif 
           if k20 == 12
              MYvev(k20,j20) = V12_15 
           endif 
        endif 
#
#
        if j20 == 16
           if k20 == 1 
              MYvev(k20,j20) = V1_16 
           endif 
           if k20 == 2 
              MYvev(k20,j20) = V2_16 
           endif 
           if k20 == 3 
              MYvev(k20,j20) = V3_16 
           endif 
           if k20 == 4 
              MYvev(k20,j20) = V4_16 
           endif 
           if k20 == 5 
              MYvev(k20,j20) = V5_16 
           endif 
           if k20 == 6 
              MYvev(k20,j20) = V6_16 
           endif 
           if k20 == 7 
              MYvev(k20,j20) = V7_16 
           endif 
           if k20 == 8 
              MYvev(k20,j20) = V8_16 
           endif 
           if k20 == 9 
              MYvev(k20,j20) = V9_16 
           endif 
           if k20 == 10
              MYvev(k20,j20) = V10_16 
           endif 
           if k20 == 11
              MYvev(k20,j20) = V11_16 
           endif 
           if k20 == 12
              MYvev(k20,j20) = V12_16 
           endif 
        endif 
#
#
        if j20 == 17
           if k20 == 1 
              MYvev(k20,j20) = V1_17 
           endif 
           if k20 == 2 
              MYvev(k20,j20) = V2_17 
           endif 
           if k20 == 3 
              MYvev(k20,j20) = V3_17 
           endif 
           if k20 == 4 
              MYvev(k20,j20) = V4_17 
           endif 
           if k20 == 5 
              MYvev(k20,j20) = V5_17 
           endif 
           if k20 == 6 
              MYvev(k20,j20) = V6_17 
           endif 
           if k20 == 7 
              MYvev(k20,j20) = V7_17 
           endif 
           if k20 == 8 
              MYvev(k20,j20) = V8_17 
           endif 
           if k20 == 9 
              MYvev(k20,j20) = V9_17 
           endif 
           if k20 == 10
              MYvev(k20,j20) = V10_17 
           endif 
           if k20 == 11
              MYvev(k20,j20) = V11_17 
           endif 
           if k20 == 12
              MYvev(k20,j20) = V12_17 
           endif 
        endif 
#
#
        if j20 == 18
           if k20 == 1 
              MYvev(k20,j20) = V1_18 
           endif 
           if k20 == 2 
              MYvev(k20,j20) = V2_18 
           endif 
           if k20 == 3 
              MYvev(k20,j20) = V3_18 
           endif 
           if k20 == 4 
              MYvev(k20,j20) = V4_18 
           endif 
           if k20 == 5 
              MYvev(k20,j20) = V5_18 
           endif 
           if k20 == 6 
              MYvev(k20,j20) = V6_18 
           endif 
           if k20 == 7 
              MYvev(k20,j20) = V7_18 
           endif 
           if k20 == 8 
              MYvev(k20,j20) = V8_18 
           endif 
           if k20 == 9 
              MYvev(k20,j20) = V9_18 
           endif 
           if k20 == 10
              MYvev(k20,j20) = V10_18 
           endif 
           if k20 == 11
              MYvev(k20,j20) = V11_18 
           endif 
           if k20 == 12
              MYvev(k20,j20) = V12_18 
           endif 
        endif 
#
#
        if j20 == 19
           if k20 == 1 
              MYvev(k20,j20) = V1_19 
           endif 
           if k20 == 2 
              MYvev(k20,j20) = V2_19 
           endif 
           if k20 == 3 
              MYvev(k20,j20) = V3_19 
           endif 
           if k20 == 4 
              MYvev(k20,j20) = V4_19 
           endif 
           if k20 == 5 
              MYvev(k20,j20) = V5_19 
           endif 
           if k20 == 6 
              MYvev(k20,j20) = V6_19 
           endif 
           if k20 == 7 
              MYvev(k20,j20) = V7_19 
           endif 
           if k20 == 8 
              MYvev(k20,j20) = V8_19 
           endif 
           if k20 == 9 
              MYvev(k20,j20) = V9_19 
           endif 
           if k20 == 10
              MYvev(k20,j20) = V10_19 
           endif 
           if k20 == 11
              MYvev(k20,j20) = V11_19 
           endif 
           if k20 == 12
              MYvev(k20,j20) = V12_19 
           endif 
        endif 
#
#
        if j20 == 20
           if k20 == 1 
              MYvev(k20,j20) = V1_20 
           endif 
           if k20 == 2 
              MYvev(k20,j20) = V2_20 
           endif 
           if k20 == 3 
              MYvev(k20,j20) = V3_20 
           endif 
           if k20 == 4 
              MYvev(k20,j20) = V4_20 
           endif 
           if k20 == 5 
              MYvev(k20,j20) = V5_20 
           endif 
           if k20 == 6 
              MYvev(k20,j20) = V6_20 
           endif 
           if k20 == 7 
              MYvev(k20,j20) = V7_20 
           endif 
           if k20 == 8 
              MYvev(k20,j20) = V8_20 
           endif 
           if k20 == 9 
              MYvev(k20,j20) = V9_20 
           endif 
           if k20 == 10
              MYvev(k20,j20) = V10_20 
           endif 
           if k20 == 11
              MYvev(k20,j20) = V11_20 
           endif 
           if k20 == 12
              MYvev(k20,j20) = V12_20 
           endif 
        endif 
#
     ENDDO j20 
     ENDDO k20 
#
     ENDPROC GSCHMIDT
#======================================================
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#--end of script generated part of the code
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#======================================================
#
      PROC TRANSFORM
#     -------------- 
#
      PARDO i, j1, i2, a   
            DO j20 
               if j20 <= 12 
                  tijia(i,j1,i2,a) = 0.0 
                  DO k21 
                     if k21 <= 20 
                        REQUEST             V2ijia(i,j1,i2,a,k21) a  
                        t1ijia(i,j1,i2,a) = V2ijia(i,j1,i2,a,k21) 
                        do k20 
                           if k20 == k21 
                              t20(j20,k20)      = MYvev(j20,k20) 
                              execute return_sval t20 fact 
                           endif 
                        enddo k20 
                        t1ijia(i,j1,i2,a)*= fact 
                        tijia(i,j1,i2,a) += t1ijia(i,j1,i2,a) 
                     endif # k21 <= 20 
                  ENDDO k21 
                  t2ijiaS(i,j1,i2,a,j20)           = tijia(i,j1,i2,a) 
                  PREPARE temp2ijia(i,j1,i2,a,j20) = t2ijiaS(i,j1,i2,a,j20)
               endif # j20 <= 12 
            ENDDO j20 
      ENDPARDO i, j1, i2, a   
#
      PARDO i, j1, i2, a   
            DO j20 
               if j20 <= 12 
                  tijia(i,j1,i2,a) = 0.0 
                  DO k21 
                     if k21 <= 20 
                        REQUEST             V2ijjb(i,j1,i2,a,k21) a  
                        t1ijia(i,j1,i2,a) = V2ijjb(i,j1,i2,a,k21) 
                        do k20 
                           if k20 == k21 
                              t20(j20,k20)      = MYvev(j20,k20) 
                              execute return_sval t20 fact 
                           endif 
                        enddo k20 
                        t1ijia(i,j1,i2,a)*= fact 
                        tijia(i,j1,i2,a) += t1ijia(i,j1,i2,a) 
                     endif # k21 <= 20 
                  ENDDO k21 
                  t2ijiaS(i,j1,i2,a,j20)           = tijia(i,j1,i2,a) 
                  PREPARE temp2ijjb(i,j1,i2,a,j20) = t2ijiaS(i,j1,i2,a,j20)
               endif # j20 <= 12 
            ENDDO j20 
      ENDPARDO i, j1, i2, a   
#
      PARDO i, j1  
            DO j20 
               if j20 <= 12 
                  tij(i,j1) = 0.0 
                  DO k21 
                     if k21 <= 20 
                        GET         VC1AB(i,j1,k21) 
                        t1ij(i,j1) = VC1AB(i,j1,k21) 
                        do k20 
                           if k20 == k21 
                              t20(j20,k20)      = MYvev(j20,k20) 
                              execute return_sval t20 fact 
                           endif 
                        enddo k20 
                        t1ij(i,j1)*= fact 
                        tij(i,j1) += t1ij(i,j1) 
                     endif # k21 <= 20 
                  ENDDO k21 
                  t2ijS(i,j1,j20)       = tij(i,j1) 
                  PUT VTEMP1AB(i,j1,j20) = t2ijS(i,j1,j20)
               endif # j20 <= 12 
            ENDDO j20 
      ENDPARDO i, j1  
#
      execute sip_barrier
      execute server_barrier
#
#   rewrite temporary vectors into the usual ones
#
      PARDO i, j1, i2, a    
            DO k20 
               if k20 <= 12 
                  REQUEST            temp2ijia(i,j1,i2,a,k20) a  
                  tijia(i,j1,i2,a) = temp2ijia(i,j1,i2,a,k20) 
                  do k21 
                     if k21 == k20 
                        tijias(i,j1,i2,a,k21)      = tijia(i,j1,i2,a)  
                        PREPARE V2ijia(i,j1,i2,a,k21) = tijiaS(i,j1,i2,a,k21)  
                     endif # k21 == k20 
                  enddo k21 
               endif # k20 <= 12 
            ENDDO k20 
      ENDPARDO i, j1, i2, a   
#
      PARDO i, j1, i2, a    
            DO k20 
               if k20 <= 12 
                  REQUEST            temp2ijjb(i,j1,i2,a,k20) a  
                  tijia(i,j1,i2,a) = temp2ijjb(i,j1,i2,a,k20) 
                  do k21 
                     if k21 == k20 
                        tijias(i,j1,i2,a,k21)      = tijia(i,j1,i2,a)  
                        PREPARE V2ijjb(i,j1,i2,a,k21) = tijiaS(i,j1,i2,a,k21)  
                     endif # k21 == k20 
                  enddo k21 
               endif # k20 <= 12 
            ENDDO k20 
      ENDPARDO i, j1, i2, a   
#
      PARDO i, j1   
            DO k20 
               if k20 <= 12 
                  GET        VTEMP1AB(i,j1,k20) 
                  tij(i,j1) = VTEMP1AB(i,j1,k20) 
                  do k21 
                     if k21 == k20 
                        tijs(i,j1,k21)     = tij(i,j1)  
                        PUT VC1AB(i,j1,k21) = tijS(i,j1,k21)  
                     endif # k21 == k20 
                  enddo k21 
               endif # k20 <= 12 
            ENDDO k20 
      ENDPARDO i, j1  
#
      ENDPROC TRANSFORM
#     ----------------- 
#
      PROC TRANSFORM_HC
#     ----------------- 
#
      PARDO i, j1, i2, a   
            DO j20 
               if j20 <= 12 
                  tijia(i,j1,i2,a) = 0.0 
                  DO k20 
                     REQUEST               VH2ijia(i,j1,i2,a,k20) a 
                     t1ijia(i,j1,i2,a)   = VH2ijia(i,j1,i2,a,k20) 

                     t20(j20,k20)       = MYvev(j20,k20) 
                     execute return_sval t20 fact 

                     t1ijia(i,j1,i2,a)         *= fact 
                     tijia(i,j1,i2,a)          += t1ijia(i,j1,i2,a) 
                  ENDDO k20 
                  t2ijiaS(i,j1,i2,a,j20)       = tijia(i,j1,i2,a) 
                  PREPARE temp2ijia(i,j1,i2,a,j20) = t2ijiaS(i,j1,i2,a,j20) 
               endif # j20 <= 12 
            ENDDO j20 
      ENDPARDO i, j1, i2, a   
#
      PARDO i, j1, i2, a   
            DO j20 
               if j20 <= 12 
                  tijia(i,j1,i2,a) = 0.0 
                  DO k20 
                     REQUEST               VH2ijjb(i,j1,i2,a,k20) a 
                     t1ijia(i,j1,i2,a)   = VH2ijjb(i,j1,i2,a,k20) 

                     t20(j20,k20)       = MYvev(j20,k20) 
                     execute return_sval t20 fact 

                     t1ijia(i,j1,i2,a)         *= fact 
                     tijia(i,j1,i2,a)          += t1ijia(i,j1,i2,a) 
                  ENDDO k20 
                  t2ijiaS(i,j1,i2,a,j20)       = tijia(i,j1,i2,a) 
                  PREPARE temp2ijjb(i,j1,i2,a,j20) = t2ijiaS(i,j1,i2,a,j20) 
               endif # j20 <= 12 
            ENDDO j20 
      ENDPARDO i, j1, i2, a   
#
      PARDO i, j1  
            DO j20 
               if j20 <= 12 
                  tij(i,j1) = 0.0 
                  DO k20 
                     GET                  VCH1AB(i,j1,k20) 
                     t1ij(i,j1)          = VCH1AB(i,j1,k20) 

                     t20(j20,k20)       = MYvev(j20,k20) 
                     execute return_sval t20 fact 

                     t1ij(i,j1)         *= fact 
                     tij(i,j1)          += t1ij(i,j1) 
                  ENDDO k20 
                  t2ijS(i,j1,j20)       = tij(i,j1) 
                  PUT VTEMP1AB(i,j1,j20) = t2ijS(i,j1,j20) 
               endif # j20 <= 12 
            ENDDO j20 
      ENDPARDO i, j1  
#
      execute sip_barrier
      execute server_barrier
#
#   rewrite temporary vectors into the usual ones
#
      PARDO j, j1, i2, a   
            DO k20 
               if k20 <= 12 
                  REQUEST                     temp2ijia(j,j1,i2,a,k20) a  
                  tjjia(j,j1,i2,a)          = temp2ijia(j,j1,i2,a,k20) 
                  t2jjias(j,j1,i2,a,k20)    = tjjia(j,j1,i2,a)  
                  PREPARE VH2ijia(j,j1,i2,a,k20) = t2jjiaS(j,j1,i2,a,k20)  
               endif # k20 <= 12 
            ENDDO k20 
      ENDPARDO j, j1, i2, a   
#
      PARDO j, j1, i2, a   
            DO k20 
               if k20 <= 12 
                  REQUEST                     temp2ijjb(j,j1,i2,a,k20) a  
                  tjjia(j,j1,i2,a)          = temp2ijjb(j,j1,i2,a,k20) 
                  t2jjias(j,j1,i2,a,k20)    = tjjia(j,j1,i2,a)  
                  PREPARE VH2ijjb(j,j1,i2,a,k20) = t2jjiaS(j,j1,i2,a,k20)  
               endif # k20 <= 12 
            ENDDO k20 
      ENDPARDO j, j1, i2, a   
#
      PARDO i, j1  
            DO k20 
               if k20 <= 12 
                  GET                  VTEMP1AB(i,j1,k20) 
                  tij(i,j1)           = VTEMP1AB(i,j1,k20) 
                  t2ijs(i,j1,k20)     = tij(i,j1)  
                  PUT VCH1AB(i,j1,k20) = t2ijS(i,j1,k20)  
               endif # k20 <= 12 
            ENDDO k20 
      ENDPARDO i, j1  
#
      ENDPROC TRANSFORM_HC
#     -------------------- 
#
     PROC TRUNCATE
#    ------------- 
#
      call FNDVECS # done
#
      call GSCHMIDT # done
#
      execute server_barrier
#
      call TRANSFORM # done
      execute server_barrier
#
      call TRANSFORM_HC # done
      execute server_barrier
#
      CALL Aconstr_tr # done
      execute server_barrier
#
      call copy_toVCactual_tr # done
#
      execute server_barrier
#
     ENDPROC TRUNCATE
#    ---------------- 
#
      PROC cre_arrays
#
      #create VEV
       create VCE1A
       create VCE1B
       create VCE1AB
       create VCONV1A
       create VCONV1B
       create VCONV1AB
       create VCACT1A
       create VCACT1B
       create VCACT1AB
       create VCHACT1A
       create VCHACT1B
       create VCHACT1AB
       create Fae_a
       create Fae_b
       create Fmi_a
       create Fmi_b
       create Fia_a
       create Fia_b
       create DDii
       create DDaa
       create DDjj
       create DDbb
       create Fme_a 
#
       EXECUTE SIP_BARRIER
#
      ENDPROC cre_arrays
#     ------------------ 
#
      PROC start_copy
#     --------------- 
#
      execute server_barrier
#
      PARDO i, j1  
            if iroot == 2.0
               get         VSTART1AB2(i,j1)
               tij(i,j1) = VSTART1AB2(i,j1)
            endif
            if iroot == 3.0
               get         VSTART1AB3(i,j1)
               tij(i,j1) = VSTART1AB3(i,j1)
            endif
            if iroot == 4.0
               get         VSTART1AB4(i,j1)
               tij(i,j1) = VSTART1AB4(i,j1)
            endif
            if iroot == 5.0
               get         VSTART1AB5(i,j1)
               tij(i,j1) = VSTART1AB5(i,j1)
            endif
            if iroot == 6.0
               get         VSTART1AB6(i,j1)
               tij(i,j1) = VSTART1AB6(i,j1)
            endif

            PUT VCHACT1AB(i,j1) = tij(i,j1)
            PUT VCE1AB(i,j1)    = tij(i,j1)
#
      ENDPARDO i, j1  
#
      PARDO i, i1, i2, a 
            tijia(i,i1,i2,a) = 0.0 
            PREPARE RE2ijia(i,i1,i2,a) = tijia(i,i1,i2,a)  
            PREPARE RH2ijia(i,i1,i2,a) = tijia(i,i1,i2,a)
      ENDPARDO i, i1, i2, a 
#
      PARDO i, i1, i2, a 
            tijia(i,i1,i2,a) = 0.0 
            PREPARE RE2ijjb(i,i1,i2,a) = tijia(i,i1,i2,a)  
            PREPARE RH2ijjb(i,i1,i2,a) = tijia(i,i1,i2,a)
      ENDPARDO i, i1, i2, a 
#
      execute server_barrier
#
      ENDPROC start_copy
#     ------------------ 
#
      PROC start_copy_tr
#     ------------------
#
      execute server_barrier
#
      PARDO i, j1 
            if iroot == 2.0
               get         VSTART1AB2(i,j1)
               tij(i,j1) = VSTART1AB2(i,j1)
            endif
            if iroot == 3.0
               get         VSTART1AB3(i,j1)
               tij(i,j1) = VSTART1AB3(i,j1)
            endif
            if iroot == 4.0
               get         VSTART1AB4(i,j1)
               tij(i,j1) = VSTART1AB4(i,j1)
            endif
            if iroot == 5.0
               get         VSTART1AB5(i,j1)
               tij(i,j1) = VSTART1AB5(i,j1)
            endif
            if iroot == 6.0
               get         VSTART1AB6(i,j1)
               tij(i,j1) = VSTART1AB6(i,j1)
            endif
#
            PUT VCACT1AB(i,j1) = tij(i,j1)
#
      ENDPARDO i, j1  
#
      PARDO i, i1, i2, a 
            tijia(i,i1,i2,a) = 0.0 
            PREPARE R2ijia(i,i1,i2,a) = tijia(i,i1,i2,a)
      ENDPARDO i, i1, i2, a 
#
      PARDO i, i1, i2, a 
            tijia(i,i1,i2,a) = 0.0 
            PREPARE R2ijjb(i,i1,i2,a) = tijia(i,i1,i2,a)
      ENDPARDO i, i1, i2, a 
#
      ENDPROC start_copy_tr
#     ---------------------
#
#======================================================
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#--end of script generated part of the code
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#======================================================
      PROC root_put
#
          if iroot == 2.0
          root1=omega
          endif
#
          if iroot == 3.0
          root2=omega
          endif
#
          if iroot == 4.0
          root3=omega
          endif
#
          if iroot == 5.0
          root4=omega
          endif
#
          if iroot == 6.0
          root5=omega
          endif
#
          if iroot == 7.0
          root6=omega
          endif
#
          if iroot == 8.0
          root7=omega
          endif
#
          if iroot == 9.0
          root8=omega
          endif
#
          if iroot == 10.0
          root9=omega
          endif
#
          if iroot == 11.0
          root10=omega
          endif
#
          if iroot == 12.0
          root11=omega
          endif
#
          if iroot == 13.0
          root12=omega
          endif
#
      ENDPROC root_put
#
     PROC PRNTING
#
       execute print_scalar residuum
       execute print_scalar omega
       execute print_scalar ispdim
       execute print_scalar iroot
       execute print_scalar imaxc
       execute print_scalar nsp
#
     ENDPROC PRNTING
#
     PROC SYMMETR_A
#    -------------- 
#
     PARDO a, a1, i, i1
           Taiai(a,i,a1,i1)             = 0.0
           PREPARE VCACT2AA(a,i,a1,i1)  = Taiai(a,i,a1,i1)
           PREPARE VCHACT2AA(a,i,a1,i1) = Taiai(a,i,a1,i1)
     ENDPARDO  a, a1, i, i1
#
     PARDO b, b1, j, j1
           Tbjbj(b,j,b1,j1)             = 0.0
           PREPARE VCACT2BB(b,j,b1,j1)  = Tbjbj(b,j,b1,j1)
           PREPARE VCHACT2BB(b,j,b1,j1) = Tbjbj(b,j,b1,j1)
     ENDPARDO  b, b1, j, j1
#
     execute server_barrier 
#
     PARDO  a, a1, i, i1
            DO k21 
               IF k21 > spdim  
                  REQUEST            VC2AA(a,i,a1,i1,k21) a 
                  Taiai(a,i,a1,i1) = VC2AA(a,i,a1,i1,k21) 
#
                  R3aiai(a1,i,a,i1) = 0.0
                  Raiai(a,i,a1,i1)  = 0.0
#
                  if a == a1
                     Raiai(a,i,a1,i1)   = Taiai(a,i,a1,i1)
                     execute symm_force_a Raiai
                  endif
#
                  if a < a1
                     Raiai(a,i,a1,i1)   = Taiai(a,i,a1,i1)
                     R3aiai(a1,i,a,i1)  = Taiai(a,i,a1,i1)
                     R3aiai(a1,i,a,i1) *= -1.0
                  endif
#
                  PREPARE VCACT2AA(a,i,a1,i1) += Raiai(a,i,a1,i1)
                  PREPARE VCACT2AA(a1,i,a,i1) += R3aiai(a1,i,a,i1)
                  exit 
#
               ENDIF 
            ENDDO k21 
     ENDPARDO a, a1, i, i1
#
     PARDO  b, b1, j, j1
            DO k21 
               IF k21 > spdim  
                  REQUEST            VC2BB(b,j,b1,j1,k21) b 
                  Tbjbj(b,j,b1,j1) = VC2BB(b,j,b1,j1,k21) 
#
                  R3bjbj(b1,j,b,j1) = 0.0
                  Rbjbj(b,j,b1,j1)  = 0.0
#
                  if b == b1
                     Rbjbj(b,j,b1,j1)   = Tbjbj(b,j,b1,j1)
                     execute symm_force_a Rbjbj  
                  endif
#
                  if b < b1
                     Rbjbj(b,j,b1,j1)   = Tbjbj(b,j,b1,j1)
                     R3bjbj(b1,j,b,j1)  = Tbjbj(b,j,b1,j1)
                     R3bjbj(b1,j,b,j1) *= -1.0
                  endif
#
                  PREPARE VCACT2BB(b,j,b1,j1) += Rbjbj(b,j,b1,j1)
                  PREPARE VCACT2BB(b1,j,b,j1) += R3bjbj(b1,j,b,j1)
                  exit 
#
               ENDIF 
            ENDDO k21 
     ENDPARDO b, b1, j, j1
#
     execute server_barrier
#
     PARDO a, a1, i, i1
#
           REQUEST VCACT2AA(a,i,a1,i1) i1
           Taiai(a,i,a1,i1) = VCACT2AA(a,i,a1,i1)
#
           R2aiai(a,i1,a1,i)=0.0
           Raiai(a,i,a1,i1)=0.0
#
           if i == i1
#
              Raiai(a,i,a1,i1)=Taiai(a,i,a1,i1)
              execute symm_force_i Raiai
#
           endif
#
           if i < i1
#
              Raiai(a,i,a1,i1)=Taiai(a,i,a1,i1)
              R2aiai(a,i1,a1,i)=Taiai(a,i,a1,i1)
              R2aiai(a,i1,a1,i)*=-1.0
#
           endif
#
           PREPARE VCHACT2AA(a,i,a1,i1)+=Raiai(a,i,a1,i1)
           PREPARE VCHACT2AA(a,i1,a1,i)+=R2aiai(a,i1,a1,i)
#
     ENDPARDO  a, a1, i, i1
#
     PARDO b, b1, j, j1
#
           REQUEST            VCACT2BB(b,j,b1,j1) j1
           Tbjbj(b,j,b1,j1) = VCACT2BB(b,j,b1,j1)
#
           R2bjbj(b,j1,b1,j)= 0.0
           Rbjbj(b,j,b1,j1) = 0.0
#
           if j == j1
#
              Rbjbj(b,j,b1,j1)=Tbjbj(b,j,b1,j1)
              execute symm_force_i Rbjbj
#
           endif
#
           if j < j1
#
              Rbjbj(b,j,b1,j1)   = Tbjbj(b,j,b1,j1)
              R2bjbj(b,j1,b1,j)  = Tbjbj(b,j,b1,j1)
              R2bjbj(b,j1,b1,j) *= -1.0
#
           endif
#
           PREPARE VCHACT2BB(b,j,b1,j1) += Rbjbj(b,j,b1,j1)
           PREPARE VCHACT2BB(b,j1,b1,j) += R2bjbj(b,j1,b1,j)
#
     ENDPARDO  b, b1, j, j1
#
     execute server_barrier
#
     ENDPROC SYMMETR_A
#    ----------------- 
#
     PROC SYMMETR_B
#    -------------- 
#
     PARDO a, a1, i, i1
           REQUEST            VCHACT2AA(a,i,a1,i1) i1
           Taiai(a,i,a1,i1) = VCHACT2AA(a,i,a1,i1)
           DO k21 
              IF k21 > spdim  
                 taiaiS(a,i,a1,i1,k21)        = Taiai(a,i,a1,i1) 
                 PREPARE VC2AA(a,i,a1,i1,k21) = taiaiS(a,i,a1,i1,k21)  
                 exit 
              ENDIF 
            ENDDO k21 
     ENDPARDO a, a1, i, i1
#
     PARDO b, b1, j, j1
           REQUEST            VCHACT2BB(b,j,b1,j1) j1
           Tbjbj(b,j,b1,j1) = VCHACT2BB(b,j,b1,j1)
           DO k21 
              IF k21 > spdim  
                 tbjbjS(b,j,b1,j1,k21)        = Tbjbj(b,j,b1,j1) 
                 PREPARE VC2BB(b,j,b1,j1,k21) = tbjbjS(b,j,b1,j1,k21)  
                 exit 
              ENDIF 
            ENDDO k21 
     ENDPARDO  b, b1, j, j1
#
     ENDPROC SYMMETR_B
#    ----------------- 
#
     PROC AMPL_PRINT
#    ---------------
#
      amplthresh=0.01
      allocate lij(*,*)
#
      etemp1=0.0
      etemp2=0.0
      etemp3=0.0
      etemp4=0.0
      etemp5=0.0
#
      sum1=0.0
#
      PARDO i, j1  
         GET         VCE1AB(i,j1)
         lij(i,j1) = VCE1AB(i,j1)
         execute c1_print lij amplthresh
         tij(i,j1) = VCE1AB(i,j1)
         etemp     = VCE1AB(i,j1)*tij(i,j1)
         sum1     += etemp
      ENDPARDO i, j1  
#
      execute sip_barrier
#
      collective etemp1+=sum1
#
      deallocate lij(*,*)

      DO a 
      DO i 
      DO i1 
      DO i2 
            REQUEST RE2ijia(i,i1,i2,a) a 
         execute c2aa_print RE2ijia amplthresh
         #  execute dump_amp RE2ijia 
      ENDDO i2 
      ENDDO i1 
      ENDDO i 
      ENDDO a 

      DO a 
      DO i 
      DO i1 
      DO i2 
            REQUEST RE2ijjb(i,i1,i2,a) a 
         execute c2bb_print RE2ijjb amplthresh
         #  execute dump_amp RE2ijjb 
      ENDDO i2 
      ENDDO i1 
      ENDDO i 
      ENDDO a 
#
     ENDPROC AMPL_PRINT
#
# ----------------------------------------------------------------------
#
      PROC HBAR_AB
#     ------------
#
#     alpha-alpha spin component first. 
#     --------------------------------- 
#
      PARDO a, a1 
#
            tpp(a,a1) = fock_a(a,a1)       
#
            DO i 
#
               GET          t1a(a,i) 
               t1pp(a,a1) = t1a(a,i)*fock_a(i,a1) 
               tpp(a,a1) -= t1pp(a,a1) 
#
            ENDDO i 
#
            PUT HBAR_aa(a,a1) += tpp(a,a1) 
#
      ENDPARDO a, a1 
#
      PARDO a, a1, a2, i  
#
            REQUEST              VSaaai(a1,a,a2,i) i  
            GET                  t1a(a2,i) 
            t1pp(a,a1)         = VSaaai(a1,a,a2,i)*t1a(a2,i) 
#
            PUT HBAR_aa(a,a1)                 += t1pp(a,a1) 
#
      ENDPARDO a, a1, a2, i  
#
      PARDO a, a1, b, j  
#
            REQUEST              Vaabj(a1,a,b,j) j  
            GET                  t1b(b,j) 
            t1pp(a,a1)         = Vaabj(a1,a,b,j)*t1b(b,j) 
#
            PUT HBAR_aa(a,a1)                += t1pp(a,a1) 
#
      ENDPARDO a, a1, b, j  
#
      PARDO a, i1, a2, i  
#
            REQUEST             T2aa(a,i,a2,i1) i1 
            GET                 t1a(a,i) 
            GET                 t1a(a2,i1)
            GET                 t1a(a,i1) 
            GET                 t1a(a2,i) 
#
            tai(a2,i1)        = t1a(a2,i1) 
            t1ai(a2,i)        = t1a(a2,i) 
#
            tpppp(a,i,a2,i1)  = T2aa(a,i,a2,i1) 
            t1pppp(a,i,a2,i1) = t1a(a,i)^tai(a2,i1) 
            t2pppp(a,i,a2,i1) = t1a(a,i1)^t1ai(a2,i) 
            tpppp(a,i,a2,i1) += t1pppp(a,i,a2,i1) 
            tpppp(a,i,a2,i1) -= t2pppp(a,i,a2,i1) 
#
            DO a1 
#
               REQUEST              VSpipi(a2,i1,a1,i) i   
               t1pp(a,a1)         = tpppp(a,i,a2,i1)*VSpipi(a2,i1,a1,i) 
               t1pp(a,a1)        *= -0.5  
               PUT HBAR_aa(a,a1) += t1pp(a,a1) 
#
            ENDDO a1 
#
      ENDPARDO a, i1, a2, i  
#
      PARDO a, i, b, j  
#
            REQUEST           T2ab(a,i,b,j) j 
            GET               t1a(a,i) 
            GET               t1b(b,j)
#
            tppqq(a,i,b,j)  = T2ab(a,i,b,j) 
            t1ppqq(a,i,b,j) = t1a(a,i)^t1b(b,j) 
            tppqq(a,i,b,j) += t1ppqq(a,i,b,j) 
#
            DO a1  
#
               REQUEST              Vpiqj(a1,i,b,j) i   
               t1pp(a,a1)         = tppqq(a,i,b,j)*Vpiqj(a1,i,b,j) 
               t1pp(a,a1)        *= -1.0  
               PUT HBAR_aa(a,a1) += t1pp(a,a1) 
#
            ENDDO a1  
#
      ENDPARDO a, i, b, j  
#
#     alpha-alpha spin component done. 
#     -------------------------------- 
#
#     beta-beta spin component next. 
#     ------------------------------ 
#
      PARDO b, b1 
#
            tqq(b,b1) = fock_a(b,b1)       
#
            DO j 
#
               GET          t1b(b,j) 
               t1qq(b,b1) = t1b(b,j)*fock_a(j,b1) 
               tqq(b,b1) -= t1qq(b,b1) 
#
            ENDDO j 
#
            PUT HBAR_bb(b,b1) += tqq(b,b1) 
#
      ENDPARDO b, b1 
#
      PARDO b, b1, b2, j  
#
            REQUEST              VSbbbj(b1,b,b2,j) j  
            GET                  t1b(b2,j) 
            t1qq(b,b1)         = VSbbbj(b1,b,b2,j)*t1b(b2,j) 
#
            PUT HBAR_bb(b,b1)                 += t1qq(b,b1) 
#
      ENDPARDO b, b1, b2, j  
#
      PARDO b, b1, a, i  
#
            REQUEST              Vbbai(b1,b,a,i) i  
            GET                  t1a(a,i) 
            t1qq(b,b1)         = Vbbai(b1,b,a,i)*t1a(a,i) 
#
            PUT HBAR_bb(b,b1)                += t1qq(b,b1) 
#
      ENDPARDO b, b1, a, i  
#
      PARDO b, j, j1, b2  
#
            REQUEST             T2bb(b,j,b2,j1) j1 
            GET                 t1b(b,j) 
            GET                 t1b(b2,j1)
            GET                 t1b(b,j1) 
            GET                 t1b(b2,j) 
#
            tbj(b2,j1)        = t1b(b2,j1) 
            t1bj(b2,j)        = t1b(b2,j) 
#
            tqqqq(b,j,b2,j1)  = T2bb(b,j,b2,j1) 
            t1qqqq(b,j,b2,j1) = t1b(b,j)^tbj(b2,j1) 
            t2qqqq(b,j,b2,j1) = t1b(b,j1)^t1bj(b2,j) 
            tqqqq(b,j,b2,j1) += t1qqqq(b,j,b2,j1) 
            tqqqq(b,j,b2,j1) -= t2qqqq(b,j,b2,j1) 
#
            DO b1 
#
               REQUEST              VSqjqj(b2,j1,b1,j) j   
               t1qq(b,b1)         = tqqqq(b,j,b2,j1)*VSqjqj(b2,j1,b1,j) 
               t1qq(b,b1)        *= -0.5  
               PUT HBAR_bb(b,b1) += t1qq(b,b1) 
#
            ENDDO b1 
#
      ENDPARDO b, j, j1, b2  
#
      PARDO b, j, a, i  
#
            REQUEST           T2ab(a,i,b,j) j 
            GET               t1a(a,i) 
            GET               t1b(b,j)
#
            tppqq(a,i,b,j)  = T2ab(a,i,b,j) 
            t1ppqq(a,i,b,j) = t1a(a,i)^t1b(b,j) 
            tppqq(a,i,b,j) += t1ppqq(a,i,b,j) 
#
            DO b1  
#
               REQUEST              Vpiqj(a,i,b1,j) i   
               t1qq(b,b1)         = tppqq(a,i,b,j)*Vpiqj(a,i,b1,j) 
               t1qq(b,b1)        *= -1.0  
               PUT HBAR_bb(b,b1) += t1qq(b,b1) 
#
            ENDDO b1  
#
      ENDPARDO b, j, a, i  
#
#     beta-beta spin component done. 
#     ------------------------------ 
#
      ENDPROC HBAR_AB
#     ---------------
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
      PROC HBAR_IJ
#     ------------
#
#     alpha-alpha spin component first. 
#     --------------------------------- 
#
      PARDO i, i1 
#
            tpp(i1,i) = fock_a(i1,i) 
#
            DO a 
#
               GET          t1a(a,i) 
               t1pp(i1,i) = fock_a(i1,a)*t1a(a,i) 
               tpp(i1,i) += t1pp(i1,i) 
#
            ENDDO a 
#
            DO a 
            DO i2 
#
               REQUEST      VSpipi(a,i2,i,i1) i1 
               GET          t1a(a,i2) 
#
               t1pp(i1,i) = VSpipi(a,i2,i,i1)*t1a(a,i2)  
               tpp(i1,i) += t1pp(i1,i) 
#
            ENDDO i2 
            ENDDO a 
#
            DO b 
            DO j 
#
               REQUEST      Vpiqj(i,i1,b,j) i1 
               GET          t1b(b,j) 
#
               t1pp(i1,i) = Vpiqj(i,i1,b,j)*t1b(b,j)  
               tpp(i1,i) += t1pp(i1,i) 
#
            ENDDO j 
            ENDDO b 
#
            DO a 
            DO a1 
            DO i2 
#
               REQUEST             T2aa(a,i,a1,i2) i2 
               REQUEST             VSpipi(a,i1,a1,i2) i2  
               GET                 t1a(a,i) 
               GET                 t1a(a1,i2) 
               GET                 t1a(a,i2) 
               GET                 t1a(a1,i) 
#
               tpp(a1,i2)        = t1a(a1,i2)
               t1pp(a1,i)        = t1a(a1,i) 
#
               tpppp(a,i,a1,i2)  = T2aa(a,i,a1,i2)
               t1pppp(a,i,a1,i2) = t1a(a,i)^tpp(a1,i2) 
               t2pppp(a,i,a1,i2) = t1a(a,i2)^t1pp(a1,i) 
               tpppp(a,i,a1,i2) += t1pppp(a,i,a1,i2) 
               tpppp(a,i,a1,i2) -= t2pppp(a,i,a1,i2) 
#
               t1pp(i1,i)        = tpppp(a,i,a1,i2)*VSpipi(a,i1,a1,i2) 
               t1pp(i1,i)       *= 0.5 
               tpp(i1,i)        += t1pp(i1,i) 
#
            ENDDO i2 
            ENDDO a1 
            ENDDO a 
#
            DO a 
            DO b 
            DO j 
#
               REQUEST           T2ab(a,i,b,j) j 
               REQUEST           Vpiqj(a,i1,b,j) j  
               GET               t1a(a,i) 
               GET               t1b(b,j) 
#
               tppqq(a,i,b,j)  = T2ab(a,i,b,j)
               t1ppqq(a,i,b,j) = t1a(a,i)^t1b(b,j) 
               tppqq(a,i,b,j) += t1ppqq(a,i,b,j) 
#
               t1pp(i1,i)      = tppqq(a,i,b,j)*Vpiqj(a,i1,b,j) 
               tpp(i1,i)      += t1pp(i1,i) 
#
            ENDDO j 
            ENDDO b 
            ENDDO a 
#
            PUT HBAR_ii(i1,i) = tpp(i1,i) 
#
      ENDPARDO i, i1 
#
#     done alpha-alpha spin component. 
#     -------------------------------- 
#
#     beta-beta spin component next. 
#     ------------------------------ 
#
      PARDO j, j1 
#
            tqq(j1,j) = fock_a(j1,j) 
#
            DO b 
#
               GET          t1b(b,j) 
               t1qq(j1,j) = fock_a(j1,b)*t1b(b,j) 
               tqq(j1,j) += t1qq(j1,j) 
#
            ENDDO b 
#
            DO b 
            DO j2 
#
               REQUEST      VSqjqj(b,j2,j,j1) j1 
               GET          t1b(b,j2) 
#
               t1qq(j1,j) = VSqjqj(b,j2,j,j1)*t1b(b,j2)  
               tqq(j1,j) += t1qq(j1,j) 
#
            ENDDO j2 
            ENDDO b 
#
            DO a 
            DO i 
#
               REQUEST      Vpiqj(a,i,j,j1) j1 
               GET          t1a(a,i) 
#
               t1qq(j1,j) = Vpiqj(a,i,j,j1)*t1a(a,i)  
               tqq(j1,j) += t1qq(j1,j) 
#
            ENDDO i 
            ENDDO a 
#
            DO b 
            DO b1 
            DO j2 
#
               REQUEST             T2bb(b,j,b1,j2) j2 
               REQUEST             VSqjqj(b,j1,b1,j2) j2  
               GET                 t1b(b,j) 
               GET                 t1b(b1,j2) 
               GET                 t1b(b,j2) 
               GET                 t1b(b1,j) 
#
               tqq(b1,j2)        = t1b(b1,j2)
               t1qq(b1,j)        = t1b(b1,j) 
#
               tqqqq(b,j,b1,j2)  = T2bb(b,j,b1,j2)
               t1qqqq(b,j,b1,j2) = t1b(b,j)^tqq(b1,j2) 
               t2qqqq(b,j,b1,j2) = t1b(b,j2)^t1qq(b1,j) 
               tqqqq(b,j,b1,j2) += t1qqqq(b,j,b1,j2) 
               tqqqq(b,j,b1,j2) -= t2qqqq(b,j,b1,j2) 
#
               t1qq(j1,j)        = tqqqq(b,j,b1,j2)*VSqjqj(b,j1,b1,j2) 
               t1qq(j1,j)       *= 0.5 
               tqq(j1,j)        += t1qq(j1,j) 
#
            ENDDO j2 
            ENDDO b1 
            ENDDO b 
#
            DO a 
            DO b 
            DO i 
#
               REQUEST           T2ab(a,i,b,j) j 
               REQUEST           Vpiqj(a,i,b,j1) j1  
               GET               t1a(a,i) 
               GET               t1b(b,j) 
#
               tppqq(a,i,b,j)  = T2ab(a,i,b,j)
               t1ppqq(a,i,b,j) = t1a(a,i)^t1b(b,j) 
               tppqq(a,i,b,j) += t1ppqq(a,i,b,j) 
#
               t1qq(j1,j)      = tppqq(a,i,b,j)*Vpiqj(a,i,b,j1) 
               tqq(j1,j)      += t1qq(j1,j) 
#
            ENDDO i 
            ENDDO b 
            ENDDO a 
#
            PUT HBAR_jj(j1,j) = tqq(j1,j) 
#
      ENDPARDO j, j1 
#
#     done beta-beta spin component. 
#     ------------------------------ 
#
      ENDPROC HBAR_IJ
#     ---------------
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
      PROC HBAR_IB
#     ------------
#
#     alpha-alpha spin component first. 
#     --------------------------------- 
#
      PARDO i, a 
#
            tpp(i,a) = fock_a(i,a) 
#
            DO a1 
            DO i1 
#
               REQUEST     VSpipi(a,i,a1,i1) i1 
               GET         t1a(a1,i1) 
#
               t1pp(i,a) = VSpipi(a,i,a1,i1)*t1a(a1,i1) 
               tpp(i,a) += t1pp(i,a) 
#
            ENDDO i1 
            ENDDO a1 
#
            DO b 
            DO j 
#
               REQUEST     Vpiqj(a,i,b,j) j 
               GET         t1b(b,j) 
#
               t1pp(i,a) = Vpiqj(a,i,b,j)*t1b(b,j) 
               tpp(i,a) += t1pp(i,a) 
#
            ENDDO j 
            ENDDO b 
#
            PUT HBAR_ia(i,a) = tpp(i,a) 
#
      ENDPARDO i, a 
#
#     done alpha-alpha spin component. 
#     -------------------------------- 
#
#     beta-beta spin component next. 
#     ------------------------------ 
#
      PARDO j, b 
#
            tqq(j,b) = fock_a(j,b) 
#
            DO b1 
            DO j1 
#
               REQUEST     VSqjqj(b,j,b1,j1) j1 
               GET         t1b(b1,j1) 
#
               t1qq(j,b) = VSqjqj(b,j,b1,j1)*t1b(b1,j1) 
               tqq(j,b) += t1qq(j,b) 
#
            ENDDO j1 
            ENDDO b1 
#
            DO a 
            DO i 
#
               REQUEST     Vpiqj(a,i,b,j) j 
               GET         t1a(a,i) 
#
               t1qq(j,b) = Vpiqj(a,i,b,j)*t1a(a,i) 
               tqq(j,b) += t1qq(j,b) 
#
            ENDDO i 
            ENDDO a 
#
            PUT HBAR_jb(j,b) = tqq(j,b) 
#
      ENDPARDO j, b 
#
#     done alpha-alpha spin component. 
#     -------------------------------- 
#
      ENDPROC HBAR_IB
#     ---------------
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
      PROC HBAR_IJKL  
#     --------------
#
#     (alpha,alpha,alpha,alpha) spin component. 
#     ----------------------------------------- 
#
      PARDO i, i2, i1, i3 
#
            REQUEST             VSpipi(i,i1,i2,i3) i3 
            tpppp(i,i1,i2,i3) = VSpipi(i,i1,i2,i3) 
#
            DO a
#
               REQUEST              VSpipi(i1,i,a,i2) i2  
               GET                  t1a(a,i3) 
#
               t1pppp(i,i1,i2,i3) = VSpipi(i1,i,a,i2)*t1a(a,i3) 
               tpppp(i,i1,i2,i3) += t1pppp(i,i1,i2,i3) 
#
            ENDDO a
#
            DO a
#
               REQUEST              VSpipi(i3,i,a,i2) i2  
               GET                  t1a(a,i1) 
#
               t1pppp(i,i1,i2,i3) = VSpipi(i3,i,a,i2)*t1a(a,i1) 
               tpppp(i,i1,i2,i3) -= t1pppp(i,i1,i2,i3) 
#
            ENDDO a
#
            DO a 
            DO a1 
#
               REQUEST              VSpipi(a,i,a1,i2) i2 
               REQUEST              T2aa(a,i1,a1,i3) i3 
               GET                  t1a(a,i1) 
               GET                  t1a(a1,i3) 
               GET                  t1a(a,i3) 
               GET                  t1a(a1,i1) 
#
               tpp(a1,i3)         = t1a(a1,i3) 
               t1pp(a1,i1)        = t1a(a1,i1) 
#
               t1pppp(a,i1,a1,i3)  = T2aa(a,i1,a1,i3) 
               t2pppp(a,i1,a1,i3) = t1a(a,i1)^tpp(a1,i3)  
               t3pppp(a,i1,a1,i3) = t1a(a,i3)^t1pp(a1,i1)  
               t1pppp(a,i1,a1,i3) += t2pppp(a,i1,a1,i3) 
               t1pppp(a,i1,a1,i3) -= t3pppp(a,i1,a1,i3) 
#
               t4pppp(i,i1,i2,i3) = VSpipi(a,i,a1,i2)*t1pppp(a,i1,a1,i3) 
               t4pppp(i,i1,i2,i3) *= 0.5 
               tpppp(i,i1,i2,i3)  += t4pppp(i,i1,i2,i3) 
#
            ENDDO a1 
            ENDDO a 
#
            PREPARE HBAR_iiii(i,i1,i2,i3) = tpppp(i,i1,i2,i3) 
#
      ENDPARDO i, i2, i1, i3 
#
#     done (alpha,alpha,alpha,alpha) spin component. 
#     ---------------------------------------------- 
#
#     (beta,beta,beta,beta) spin component. 
#     ------------------------------------- 
#
      PARDO j, j2, j1, j3 
#
            REQUEST             VSqjqj(j,j1,j2,j3) j3 
            tqqqq(j,j1,j2,j3) = VSqjqj(j,j1,j2,j3) 
#
            DO b
#
               REQUEST              VSqjqj(j1,j,b,j2) j2  
               GET                  t1b(b,j3) 
#
               t1qqqq(j,j1,j2,j3) = VSqjqj(j1,j,b,j2)*t1b(b,j3) 
               tqqqq(j,j1,j2,j3) += t1qqqq(j,j1,j2,j3) 
#
            ENDDO b
#
            DO b
#
               REQUEST              VSqjqj(j3,j,b,j2) j2  
               GET                  t1b(b,j1) 
#
               t1qqqq(j,j1,j2,j3) = VSqjqj(j3,j,b,j2)*t1b(b,j1) 
               tqqqq(j,j1,j2,j3) -= t1qqqq(j,j1,j2,j3) 
#
            ENDDO b
#
            DO b 
            DO b1 
#
               REQUEST              VSqjqj(b,j,b1,j2) j2 
               REQUEST              T2bb(b,j1,b1,j3) j3 
               GET                  t1b(b,j1) 
               GET                  t1b(b1,j3) 
               GET                  t1b(b,j3) 
               GET                  t1b(b1,j1) 
#
               tqq(b1,j3)         = t1b(b1,j3) 
               t1qq(b1,j1)        = t1b(b1,j1) 
#
               t1qqqq(b,j1,b1,j3)  = T2bb(b,j1,b1,j3) 
               t2qqqq(b,j1,b1,j3) = t1b(b,j1)^tqq(b1,j3)  
               t3qqqq(b,j1,b1,j3) = t1b(b,j3)^t1qq(b1,j1)  
               t1qqqq(b,j1,b1,j3) += t2qqqq(b,j1,b1,j3) 
               t1qqqq(b,j1,b1,j3) -= t3qqqq(b,j1,b1,j3) 
#
               t4qqqq(j,j1,j2,j3) = VSqjqj(b,j,b1,j2)*t1qqqq(b,j1,b1,j3) 
               t4qqqq(j,j1,j2,j3) *= 0.5 
               tqqqq(j,j1,j2,j3) += t4qqqq(j,j1,j2,j3) 
#
            ENDDO b1 
            ENDDO b 
#
            PREPARE HBAR_jjjj(j,j1,j2,j3) = tqqqq(j,j1,j2,j3) 
#
      ENDPARDO j, j2, j1, j3 
#
#     done (beta,beta,beta,beta) spin component. 
#     ------------------------------------------ 
#
#     (alpha,alpha,beta,beta) spin component. 
#     --------------------------------------- 
#
      PARDO i, i1, j2, j3 
#
            REQUEST             Vpiqj(i,i1,j2,j3) j3 
            tppqq(i,i1,j2,j3) = Vpiqj(i,i1,j2,j3) 
#
            DO b
#
               REQUEST              Vpiqj(i1,i,b,j2) j2  
               GET                  t1b(b,j3) 
#
               t1ppqq(i,i1,j2,j3) = Vpiqj(i1,i,b,j2)*t1b(b,j3) 
               tppqq(i,i1,j2,j3) += t1ppqq(i,i1,j2,j3) 
#
            ENDDO b
#
            DO a
#
               REQUEST              Vpiqj(a,i,j2,j3) j2  
               GET                  t1a(a,i1) 
#
               t1ppqq(i,i1,j2,j3) = Vpiqj(a,i,j2,j3)*t1a(a,i1) 
               tppqq(i,i1,j2,j3) += t1ppqq(i,i1,j2,j3) 
#
            ENDDO a
#
            DO a 
            DO b 
#
               REQUEST             Vpiqj(a,i,b,j2) j2 
               REQUEST             T2ab(a,i1,b,j3) j3 
               GET                 t1a(a,i1) 
               GET                 t1b(b,j3) 
#
               t1ppqq(a,i1,b,j3)  = T2ab(a,i1,b,j3) 
               t2ppqq(a,i1,b,j3)  = t1a(a,i1)^t1b(b,j3)  
               t1ppqq(a,i1,b,j3) += t2ppqq(a,i1,b,j3) 
#
               t3ppqq(i,i1,j2,j3) = Vpiqj(a,i,b,j2)*t1ppqq(a,i1,b,j3) 
               tppqq(i,i1,j2,j3) += t3ppqq(i,i1,j2,j3) 
#
            ENDDO b 
            ENDDO a 
#
            PREPARE HBAR_iijj(i,i1,j2,j3) = tppqq(i,i1,j2,j3) 
           #t1ppqq(i1,i,j3,j2) = tppqq(i,i1,j2,j3) 
           #PREPARE HBAR_iijj(i1,i,j3,j2) = t1ppqq(i1,i,j3,j2) 
#
      ENDPARDO i, i1, j2, j3 
#
#     done (alpha,alpha,beta,beta) spin component. 
#     -------------------------------------------- 
#
      ENDPROC HBAR_IJKL 
#     -----------------
#
#    ------------------------------------------------------------------------
#
      PROC HBAR_JKIA   
#     --------------
#
#     There are four spin cases to compute:
#     1. H^{jk}_{ia) --> HBAR_JKIA_aaaa  
#     2. H^{JK}_{IA) --> HBAR_JKIA_bbbb  
#     3. H^{Jk}_{Ia) --> HBAR_JKIA_bbaa  
#     4. H^{jK}_{iA) --> HBAR_JKIA_aabb  
#
#     Note that since I 'always' store arrays in (11|22) form the 
#     notation, although valid, is slightly confusing. The 
#     storage pattern is therefore array(a,b,i,c).   
#
#    ------------------------------------------------------------------------
#
#     AAAA spin combination. 
#     ---------------------- 
#
      PARDO i, i1, i2, a 
#
            REQUEST            VSpipi(i,i1,a,i2) i  
            tpppp(i,i1,a,i2) = VSpipi(i,i1,a,i2) 
#
            DO a1 
#
               REQUEST             VSpipi(a1,i1,a,i2) a  
               GET                 t1a(a1,i) 
#
               t1pppp(i,i1,a,i2) = VSpipi(a1,i1,a,i2)*t1a(a1,i) 
               tpppp(i,i1,a,i2) += t1pppp(i,i1,a,i2) 
#
            ENDDO a1 
#
            t1pppp(i1,i,i2,a)                 = tpppp(i,i1,a,i2) 
            PREPARE HBAR_JKIA_aaaa(i1,i,i2,a) = t1pppp(i1,i,i2,a) 
#
      ENDPARDO i, i1, i2, a 
#
#     BBBB spin combination. 
#     ---------------------- 
#
      PARDO j, j1, j2, b 
#
            REQUEST            VSqjqj(j,j1,b,j2) j  
            tqqqq(j,j1,b,j2) = VSqjqj(j,j1,b,j2) 
#
            DO b1 
#
               REQUEST             VSqjqj(b1,j1,b,j2) b  
               GET                 t1b(b1,j) 
#
               t1qqqq(j,j1,b,j2) = VSqjqj(b1,j1,b,j2)*t1b(b1,j) 
               tqqqq(j,j1,b,j2) += t1qqqq(j,j1,b,j2) 
#
            ENDDO b1 
#
            t1qqqq(j1,j,j2,b)                 = tqqqq(j,j1,b,j2) 
            PREPARE HBAR_JKIA_bbbb(j1,j,j2,b) = t1qqqq(j1,j,j2,b) 
#
      ENDPARDO j, j1, j2, b 
#
#     AABB spin combination. 
#     ---------------------- 
#
      PARDO i, i1, j2, b 
#
            REQUEST            Vpiqj(i,i1,b,j2) i  
            tppqq(i,i1,b,j2) = Vpiqj(i,i1,b,j2) 
#
            DO a1 
#
               REQUEST             Vpiqj(a1,i1,b,j2) b  
               GET                 t1a(a1,i) 
#
               t1ppqq(i,i1,b,j2) = Vpiqj(a1,i1,b,j2)*t1a(a1,i) 
               tppqq(i,i1,b,j2) += t1ppqq(i,i1,b,j2) 
#
            ENDDO a1 
#
            t1ppqq(i1,i,j2,b)                 = tppqq(i,i1,b,j2) 
            PREPARE HBAR_JKIA_aabb(i1,i,j2,b) = t1ppqq(i1,i,j2,b) 
#
      ENDPARDO i, i1, j2, b 
#
#     BBAA spin combination. 
#     ---------------------- 
#
      PARDO j, j1, i2, a 
#
            REQUEST            Vpiqj(a,i2,j,j1) j  
            tqqpp(j,j1,a,i2) = Vpiqj(a,i2,j,j1) 
#
            DO b1 
#
               REQUEST             Vpiqj(a,i2,b1,j1) a  
               GET                 t1b(b1,j) 
#
               t1qqpp(j,j1,a,i2) = Vpiqj(a,i2,b1,j1)*t1b(b1,j) 
               tqqpp(j,j1,a,i2) += t1qqpp(j,j1,a,i2) 
#
            ENDDO b1 
#
            t1qqpp(j1,j,i2,a)                 = tqqpp(j,j1,a,i2) 
            PREPARE HBAR_JKIA_bbaa(j1,j,i2,a) = t1qqpp(j1,j,i2,a) 
#
      ENDPARDO j, j1, i2, a 
#
      ENDPROC HBAR_JKIA   
#     -----------------
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
      PROC HBAR_IAJK   
#     --------------
#
#     There are four spin cases to compute:
#     1. H^{ia)_{jk} --> HBAR_IAJK_aaaa  
#     1. H^{IA)_{JK} --> HBAR_IAJK_bbbb  
#     1. H^{Ia)_{Jk} --> HBAR_IAJK_bbaa  
#     1. H^{iA)_{jK} --> HBAR_IAJK_aabb  
#
#     Note that since I 'always' store arrays in (11|22) form the 
#     notation, although valid, is slightly confusing. The 
#     storage pattern is therefore array(a,b,i,c).   
#
#    ------------------------------------------------------------------------
#
#     Form the two-particle intermediates needed. 
#     ------------------------------------------- 
#
      PARDO i1, a1, a, i
#
            REQUEST             Viaai(i1,a1,a,i) i # +
            REQUEST             Vaaii(a,a1,i1,i) i # -
            Tiaai(i1,a1,a,i)  = Vaaii(a,a1,i1,i)
            Tiaai(i1,a1,a,i) -= Viaai(i1,a1,a,i)
            Tiaai(i1,a1,a,i) *= -1.0
#
            DO i2
            DO a2
#
               REQUEST               T2aa(a,i2,a2,i) i
               REQUEST               VSpipi(a1,i1,a2,i2) i2 # +
#
               T1iaai(i1,a1,a,i)   = VSpipi(a1,i1,a2,i2)*T2aa(a,i2,a2,i)
               Tiaai(i1,a1,a,i)   -= T1iaai(i1,a1,a,i)
#
            ENDDO a2
            ENDDO i2
#
            DO j
            DO b
#
               REQUEST             T2ab(a,i,b,j) j
               REQUEST             Vpiqj(a1,i1,b,j)  j # +
#
               T1iaai(i1,a1,a,i) = Vpiqj(a1,i1,b,j)*T2ab(a,i,b,j)
               Tiaai(i1,a1,a,i) += T1iaai(i1,a1,a,i)
#
            ENDDO b
            ENDDO j
#
            PREPARE WHIAAI(i1,a1,a,i) = Tiaai(i1,a1,a,i)
#
      ENDPARDO i1, a1, a, i
#
      PARDO j1, b1, b, j
#
            REQUEST             Vjbbj(j1,b1,b,j) j # +
            REQUEST             Vbbjj(b,b1,j1,j) j # -
            Tjbbj(j1,b1,b,j)  = Vbbjj(b,b1,j1,j)
            Tjbbj(j1,b1,b,j) -= Vjbbj(j1,b1,b,j)
            Tjbbj(j1,b1,b,j) *= -1.0
#
            DO j2
            DO b2
#
               REQUEST             T2bb(b,j2,b2,j) j
               REQUEST             VSqjqj(b1,j1,b2,j2) j2 # +
#
               T1jbbj(j1,b1,b,j) = VSqjqj(b1,j1,b2,j2)*T2bb(b,j2,b2,j)
               Tjbbj(j1,b1,b,j) -= T1jbbj(j1,b1,b,j)
#
            ENDDO b2
            ENDDO j2
#
            DO i
            DO a
#
               REQUEST             T2ab(a,i,b,j) j
               REQUEST             Vpiqj(a,i,b1,j1)  j1 # +
#
               T1jbbj(j1,b1,b,j) = Vpiqj(a,i,b1,j1)*T2ab(a,i,b,j)
               Tjbbj(j1,b1,b,j) += T1jbbj(j1,b1,b,j)
#
            ENDDO a
            ENDDO i
#
            PREPARE WHJBBJ(j1,b1,b,j) = Tjbbj(j1,b1,b,j)
#
      ENDPARDO j1, b1, b, j 
#
      PARDO i, i1, b, b1
#
            REQUEST             Vbbii(b,b1,i,i1) i1
            Tiibb(i,i1,b,b1)  = Vbbii(b,b1,i,i1)
            Tiibb(i,i1,b,b1) *= -1.0
#
            DO a
            DO j
#
               REQUEST             T2ab(a,i1,b,j) j
               REQUEST             Vpiqj(a,i,b1,j)    j
#
               T1iibb(i,i1,b,b1) = T2ab(a,i1,b,j)*Vpiqj(a,i,b1,j)
               Tiibb(i,i1,b,b1) += T1iibb(i,i1,b,b1)
#
            ENDDO j
            ENDDO a
#
            PREPARE WHIIBB(i,i1,b,b1) = Tiibb(i,i1,b,b1)
#
      ENDPARDO i, i1, b, b1 
#
      PARDO j1, j, a, a1
#
            REQUEST             Vaajj(a,a1,j1,j) j
            Tjjaa(j1,j,a,a1)  = Vaajj(a,a1,j1,j)
            Tjjaa(j1,j,a,a1) *= -1.0
#
            DO b
            DO i
#
               REQUEST             T2ab(a,i,b,j) j
               REQUEST             Vpiqj(a1,i,b,j1)  j1
#
               T1jjaa(j1,j,a,a1) = T2ab(a,i,b,j)*Vpiqj(a1,i,b,j1)
               Tjjaa(j1,j,a,a1) += T1jjaa(j1,j,a,a1)
#
            ENDDO i
            ENDDO b
#
            PREPARE WHJJAA(j1,j,a,a1) = Tjjaa(j1,j,a,a1)
#
      ENDPARDO j1, j, a, a1 
#
      PARDO i, a, b, j
#
            REQUEST          Viabj(i,a,b,j) j
            Tiabj(i,a,b,j) = Viabj(i,a,b,j)
#
            DO a1
            DO i1
#
               REQUEST             T2ab(a1,i1,b,j) j
               REQUEST             VSpipi(a,i,a1,i1)   i1 # +
#
               T1iabj(i,a,b,j)   = VSpipi(a,i,a1,i1)*T2ab(a1,i1,b,j)
               Tiabj(i,a,b,j)   += T1iabj(i,a,b,j)
#
            ENDDO i1
            ENDDO a1
#
            DO b1
            DO j1
#
               REQUEST           T2bb(b1,j1,b,j) j
               REQUEST           Vpiqj(a,i,b1,j1)    j1 # +
#
               T1iabj(i,a,b,j) = Vpiqj(a,i,b1,j1)*T2bb(b1,j1,b,j)
               Tiabj(i,a,b,j) += T1iabj(i,a,b,j)
#
            ENDDO j1
            ENDDO b1
#
            PREPARE WHIABJ(i,a,b,j) = Tiabj(i,a,b,j)
#
      ENDPARDO i, a, b, j 
#
      PARDO j, b, a, i
#
            REQUEST          Viabj(i,a,b,j) j
            Tjbai(j,b,a,i) = Viabj(i,a,b,j)
#
            DO b1
            DO j1
#
               REQUEST           T2ab(a,i,b1,j1) j1
               REQUEST           VSqjqj(b,j,b1,j1)   j1 # +
#
               T1jbai(j,b,a,i) = VSqjqj(b,j,b1,j1)*T2ab(a,i,b1,j1)
               Tjbai(j,b,a,i) += T1jbai(j,b,a,i)
#
            ENDDO j1
            ENDDO b1
#
            DO a1
            DO i1
#
               REQUEST           T2aa(a1,i1,a,i) i
               REQUEST           Vpiqj(a1,i1,b,j)    j # +
#
               T1jbai(j,b,a,i) = Vpiqj(a1,i1,b,j)*T2aa(a1,i1,a,i)
               Tjbai(j,b,a,i) += T1jbai(j,b,a,i)
#
            ENDDO i1
            ENDDO a1
#
            PREPARE WHJBAI(j,b,a,i) = Tjbai(j,b,a,i)
#
      ENDPARDO j, b, a, i 
#
      execute server_barrier 
#
#     AAAA spin combination. 
#     ---------------------- 
#
      PARDO a, i, i1, i2
#
            REQUEST             VSpipi(i,i1,a,i2) i2
            Tiiai(i,i1,a,i2)  = VSpipi(i,i1,a,i2)
#
            DO i3
#
               REQUEST             HBAR_iiii(i,i1,i3,i2) i2
               GET                 t1a(a,i3)
               T1iiai(i,i1,a,i2) = HBAR_iiii(i,i1,i3,i2)*t1a(a,i3)
               Tiiai(i,i1,a,i2) -= T1iiai(i,i1,a,i2)
#
            ENDDO i3
#
            PREPARE HBAR_IAJK_aaaa(i,i1,a,i2) += Tiiai(i,i1,a,i2)
#
      ENDPARDO a, i, i1, i2
#
      PARDO i, i1, a, i2
#
            Tiiai(i,i1,a,i2)  = 0.0  
            TSiiai(i,i2,a,i1) = 0.0
#
            DO a1
#
               REQUEST              T2aa(a,i1,a1,i2) i2
               REQUEST              WHIAAI(i,a1,a,i2) i2
               GET                  HBAR_ia(i,a1)
               GET                  t1a(a1,i1)
#
               T1iiai(i,i1,a,i2)  = T2aa(a,i1,a1,i2)*HBAR_ia(i,a1)
               Tiiai(i,i1,a,i2)  -= T1iiai(i,i1,a,i2)
#
               T1iiai(i,i1,a,i2)  = WHIAAI(i,a1,a,i2)*t1a(a1,i1)
               T2iiai(i,i2,a,i1)  = T1iiai(i,i1,a,i2)
#
               Tiiai(i,i1,a,i2)  += T1iiai(i,i1,a,i2)
               TSiiai(i,i2,a,i1) -= T2iiai(i,i2,a,i1)
#
            ENDDO a1
#
            PREPARE HBAR_IAJK_aaaa(i,i1,a,i2) += Tiiai(i,i1,a,i2)
            PREPARE HBAR_IAJK_aaaa(i,i2,a,i1) += TSiiai(i,i2,a,i1)
#
      ENDPARDO i, i1, a, i2
#
      PARDO i, a, a1, a2
#
            REQUEST VSaaai(a2,a,a1,i) i # +
#
            DO i1
               GET           t1a(a1,i1) 
               GET           t1a(a2,i1) 
               t1pp(a2,i1) = t1a(a2,i1) 
               DO i2
#
                  REQUEST               T2aa(a1,i1,a2,i2) i2
                  GET                   t1a(a2,i2) 
                  GET                   t1a(a1,i2) 
                  tpp(a2,i2)          = t1a(a2,i2) 
#
                  tpppp(a1,i1,a2,i2)  = T2aa(a1,i1,a2,i2) 
                  t1pppp(a1,i1,a2,i2) = t1a(a1,i1)^tpp(a2,i2) 
                  t2pppp(a1,i1,a2,i2) = t1a(a1,i2)^t1pp(a2,i1) 
                  tpppp(a1,i1,a2,i2) += t1pppp(a1,i1,a2,i2) 
                  tpppp(a1,i1,a2,i2) -= t2pppp(a1,i1,a2,i2) 
#
                  T1iiai(i,i1,a,i2)   = tpppp(a1,i1,a2,i2)*VSaaai(a2,a,a1,i)
                  T1iiai(i,i1,a,i2)  *= 0.5
                  PREPARE HBAR_IAJK_aaaa(i,i1,a,i2) += T1iiai(i,i1,a,i2)
#
               ENDDO i2
            ENDDO i1
#
      ENDPARDO i, a, a1, a2
#
      PARDO i, i1, a, i2
#
            Tiiai(i,i1,a,i2)  = 0.0  
            TSiiai(i,i2,a,i1) = 0.0
#
            DO a1
#
               DO i3
#
                  REQUEST               T2aa(a,i2,a1,i3) i3
                  REQUEST               VSpipi(i1,i,a1,i3)   i3 # +
#
                  T1iiai(i,i1,a,i2)   = VSpipi(i1,i,a1,i3)*T2aa(a,i2,a1,i3)
                  T2iiai(i,i2,a,i1)   = T1iiai(i,i1,a,i2)
                  Tiiai(i,i1,a,i2)   += T1iiai(i,i1,a,i2)
                  TSiiai(i,i2,a,i1)  -= T2iiai(i,i2,a,i1)
#
               ENDDO i3
#
            ENDDO a1
#
            PREPARE HBAR_IAJK_aaaa(i,i1,a,i2) += Tiiai(i,i1,a,i2)
            PREPARE HBAR_IAJK_aaaa(i,i2,a,i1) += TSiiai(i,i2,a,i1)
#
      ENDPARDO i, i1, a, i2
#
      PARDO i, i1, a, i2
#
            Tiiai(i,i1,a,i2)  = 0.0  
            TSiiai(i,i2,a,i1) = 0.0
#
            DO b
            DO j
#
               REQUEST              T2ab(a,i2,b,j) j
               REQUEST              Vpiqj(i1,i,b,j)    j # +
#
               T1iiai(i,i1,a,i2)  = Vpiqj(i1,i,b,j)*T2ab(a,i2,b,j)
               Tiiai(i,i1,a,i2)  += T1iiai(i,i1,a,i2)
#
               T2iiai(i,i2,a,i1)  = T1iiai(i,i1,a,i2)
               TSiiai(i,i2,a,i1) -= T2iiai(i,i2,a,i1)
#
            ENDDO j
            ENDDO b
#
            PREPARE HBAR_IAJK_aaaa(i,i1,a,i2) += Tiiai(i,i1,a,i2)
            PREPARE HBAR_IAJK_aaaa(i,i2,a,i1) += TSiiai(i,i2,a,i1)
#
      ENDPARDO i, i1, a, i2
#
#     AABB spin combination. 
#     ---------------------- 
#
      PARDO i, i1, b, j
#
            REQUEST           Vpiqj(i,i1,b,j) j
            Tiibj(i,i1,b,j) = Vpiqj(i,i1,b,j)
#
            DO a
#
               REQUEST            T2ab(a,i1,b,j) j
               REQUEST            WHIABJ(i,a,b,j) j
               GET                HBAR_ia(i,a)
               GET                t1a(a,i1)
#
               T1iibj(i,i1,b,j) = T2ab(a,i1,b,j)*HBAR_ia(i,a)
               Tiibj(i,i1,b,j) += T1iibj(i,i1,b,j)
#
               T1iibj(i,i1,b,j) = WHIABJ(i,a,b,j)*t1a(a,i1)
               Tiibj(i,i1,b,j) += T1iibj(i,i1,b,j)
#
               DO b1
#
                  REQUEST             T2ab(a,i1,b1,j) j
                  REQUEST             Vbbai(b1,b,a,i)   i
                  GET                 t1a(a,i1) 
                  GET                 t1b(b1,j) 
#
                  tppqq(a,i1,b1,j)  = T2ab(a,i1,b1,j) 
                  t1ppqq(a,i1,b1,j) = t1a(a,i1)^t1b(b1,j) 
                  tppqq(a,i1,b1,j) += t1ppqq(a,i1,b1,j) 
#
                  T1iibj(i,i1,b,j)  = Vbbai(b1,b,a,i)*tppqq(a,i1,b1,j)
                  Tiibj(i,i1,b,j)  += T1iibj(i,i1,b,j)
#
               ENDDO b1
#
               DO i2
#
                  REQUEST            T2ab(a,i2,b,j) j
                  REQUEST            VSpipi(i1,i,a,i2)  i2 # +
#
                  T1iibj(i,i1,b,j) = VSpipi(i1,i,a,i2)*T2ab(a,i2,b,j)
                  Tiibj(i,i1,b,j) += T1iibj(i,i1,b,j)
#
               ENDDO i2
#
               DO j1
#
                  REQUEST            T2ab(a,i1,b,j1) j1
                  REQUEST            Vpiqj(a,i,j,j1)     j1 # +
#
                  T1iibj(i,i1,b,j) = Vpiqj(a,i,j,j1)*T2ab(a,i1,b,j1)
                  Tiibj(i,i1,b,j) -= T1iibj(i,i1,b,j)
#
               ENDDO j1
#
            ENDDO a
#
            DO j1
#
               REQUEST            HBAR_iijj(i,i1,j1,j) j
               GET                t1b(b,j1)
#
               T1iibj(i,i1,b,j) = HBAR_iijj(i,i1,j1,j)*t1b(b,j1)
               Tiibj(i,i1,b,j) -= T1iibj(i,i1,b,j)
#
            ENDDO j1
#
            DO b1
#
               REQUEST            WHIIBB(i,i1,b,b1) b1
               GET                t1b(b1,j)
#
               T1iibj(i,i1,b,j) = WHIIBB(i,i1,b,b1)*t1b(b1,j)
               Tiibj(i,i1,b,j) -= T1iibj(i,i1,b,j)
#
               DO j2
#
                  REQUEST            T2bb(b1,j2,b,j) j
                  REQUEST            Vpiqj(i1,i,b1,j2)   j2 # +
#
                  T1iibj(i,i1,b,j) = Vpiqj(i1,i,b1,j2)*T2bb(b1,j2,b,j)
                  Tiibj(i,i1,b,j) += T1iibj(i,i1,b,j)
#
               ENDDO j2
#
            ENDDO b1
#
            PREPARE HBAR_IAJK_aabb(i,i1,b,j) = Tiibj(i,i1,b,j)
#
      ENDPARDO i, i1, b, j
#
#     BBAA spin combination. 
#     ---------------------- 
#
      PARDO j, j1, a, i
#
            REQUEST           Vpiqj(a,i,j,j1) j1
            Tjjai(j,j1,a,i) = Vpiqj(a,i,j,j1)
#
            DO b
#
               REQUEST            T2ab(a,i,b,j1) j1
               REQUEST            WHJBAI(j,b,a,i) i
               GET                HBAR_jb(j,b)
               GET                t1b(b,j1)
#
               T1jjai(j,j1,a,i) = T2ab(a,i,b,j1)*HBAR_jb(j,b)
               Tjjai(j,j1,a,i) += T1jjai(j,j1,a,i)
#
               T1jjai(j,j1,a,i) = WHJBAI(j,b,a,i)*t1b(b,j1)
               Tjjai(j,j1,a,i) += T1jjai(j,j1,a,i)
#
               DO a1
#
                  REQUEST             T2ab(a1,i,b,j1) j1
                  REQUEST             Vaabj(a1,a,b,j)   j
                  GET                 t1a(a1,i) 
                  GET                 t1b(b,j1) 
#
                  tppqq(a1,i,b,j1)  = T2ab(a1,i,b,j1) 
                  t1ppqq(a1,i,b,j1) = t1a(a1,i)^t1b(b,j1) 
                  tppqq(a1,i,b,j1) += t1ppqq(a1,i,b,j1) 
#
                  T1jjai(j,j1,a,i)  = Vaabj(a1,a,b,j)*tppqq(a1,i,b,j1)
                  Tjjai(j,j1,a,i)  += T1jjai(j,j1,a,i)
#
               ENDDO a1
#
               DO j2
#
                  REQUEST            T2ab(a,i,b,j2) j2
                  REQUEST            VSqjqj(j1,j,b,j2)  j2 # +
#
                  T1jjai(j,j1,a,i) = VSqjqj(j1,j,b,j2)*T2ab(a,i,b,j2)
                  Tjjai(j,j1,a,i) += T1jjai(j,j1,a,i)
#
               ENDDO j2
#
               DO i1
#
                  REQUEST            T2ab(a,i1,b,j1) j1
                  REQUEST            Vpiqj(i,i1,b,j)     j # +
#
                  T1jjai(j,j1,a,i) = T2ab(a,i1,b,j1)*Vpiqj(i,i1,b,j)
                  Tjjai(j,j1,a,i) -= T1jjai(j,j1,a,i)
#
               ENDDO i1
#
            ENDDO b
#
       #    DO j1
#
       #       REQUEST            HBAR_iijj(i,i1,j1,j) j
       #       GET                t1b(b,j1)
#
       #       T1iibj(i,i1,b,j) = HBAR_iijj(i,i1,j1,j)*t1b(b,j1)
       #       Tiibj(i,i1,b,j) -= T1iibj(i,i1,b,j)
#
       #    ENDDO j1
#
            DO i1
#
               REQUEST            HBAR_iijj(i1,i,j,j1) j1
               GET                t1a(a,i1)
#
               T1jjai(j,j1,a,i) = HBAR_iijj(i1,i,j,j1)*t1a(a,i1)
               Tjjai(j,j1,a,i) -= T1jjai(j,j1,a,i)
#
            ENDDO i1
#
            DO a1
#
               REQUEST            WHJJAA(j,j1,a,a1) a1
               GET                t1a(a1,i)
#
               T1jjai(j,j1,a,i) = WHJJAA(j,j1,a,a1)*t1a(a1,i)
               Tjjai(j,j1,a,i) -= T1jjai(j,j1,a,i)
#
               DO i1
#
                  REQUEST            T2aa(a1,i1,a,i) i
                  REQUEST            Vpiqj(a1,i1,j1,j)   j # +
#
                  T1jjai(j,j1,a,i) = Vpiqj(a1,i1,j1,j)*T2aa(a1,i1,a,i)
                  Tjjai(j,j1,a,i) += T1jjai(j,j1,a,i)
#
               ENDDO i1
#
            ENDDO a1
#
            PREPARE HBAR_IAJK_bbaa(j,j1,a,i) = Tjjai(j,j1,a,i)
#
      ENDPARDO j, j1, a, i
#
#     BBBB spin combination. 
#     ---------------------- 
#
      PARDO j, j1, b, j2
#
            REQUEST             VSqjqj(j,j1,b,j2) j2 # +
            Tjjbj(j,j1,b,j2)  = VSqjqj(j,j1,b,j2)
            TSjjbj(j,j2,b,j1) = 0.0
#
            DO j3
#
               REQUEST             HBAR_jjjj(j,j1,j3,j2) j2
               GET                 t1b(b,j3)
#
               T1jjbj(j,j1,b,j2) = HBAR_jjjj(j,j1,j3,j2)*t1b(b,j3)
               Tjjbj(j,j1,b,j2) -= T1jjbj(j,j1,b,j2)
#
            ENDDO j3
#
            DO b1
#
               REQUEST              T2bb(b,j1,b1,j2) j2
               REQUEST              WHJBBJ(j,b1,b,j2) j2
               GET                  HBAR_jb(j,b1)
               GET                  t1b(b1,j1)
#
               T1jjbj(j,j1,b,j2)  = T2bb(b,j1,b1,j2)*HBAR_jb(j,b1)
               Tjjbj(j,j1,b,j2)  -= T1jjbj(j,j1,b,j2)
#
               T1jjbj(j,j1,b,j2)  = WHJBBJ(j,b1,b,j2)*t1b(b1,j1)
               T2jjbj(j,j2,b,j1)  = T1jjbj(j,j1,b,j2)
#
               Tjjbj(j,j1,b,j2)  += T1jjbj(j,j1,b,j2)
               TSjjbj(j,j2,b,j1) -= T2jjbj(j,j2,b,j1)
#
               DO b2
#
                  REQUEST               T2bb(b1,j1,b2,j2) j2
                  REQUEST               VSbbbj(b2,b,b1,j)   j # +
                  GET                   t1b(b1,j1) 
                  GET                   t1b(b2,j2) 
                  GET                   t1b(b1,j2) 
                  GET                   t1b(b2,j1) 
#
                  tqq(b2,j2)          = t1b(b2,j2) 
                  t1qq(b2,j1)         = t1b(b2,j1) 
#
                  tqqqq(b1,j1,b2,j2)  = T2bb(b1,j1,b2,j2) 
                  t1qqqq(b1,j1,b2,j2) = t1b(b1,j1)^tqq(b2,j2) 
                  t2qqqq(b1,j1,b2,j2) = t1b(b1,j2)^t1qq(b2,j1) 
                  tqqqq(b1,j1,b2,j2) += t1qqqq(b1,j1,b2,j2) 
                  tqqqq(b1,j1,b2,j2) -= t2qqqq(b1,j1,b2,j2) 
#
                  T1jjbj(j,j1,b,j2)   = tqqqq(b1,j1,b2,j2)*VSbbbj(b2,b,b1,j)
                  T1jjbj(j,j1,b,j2)  *= 0.5
                  Tjjbj(j,j1,b,j2)   += T1jjbj(j,j1,b,j2)
#
               ENDDO b2
#
               DO j3
#
                  REQUEST              T2bb(b,j2,b1,j3) j3
                  REQUEST              VSqjqj(j1,j,b1,j3)   j3 # +
#
                  T1jjbj(j,j1,b,j2)  = VSqjqj(j1,j,b1,j3)*T2bb(b,j2,b1,j3)
                  Tjjbj(j,j1,b,j2)  += T1jjbj(j,j1,b,j2)
#
                  T2jjbj(j,j2,b,j1)  = T1jjbj(j,j1,b,j2)
                  TSjjbj(j,j2,b,j1) -= T2jjbj(j,j2,b,j1)
#
               ENDDO j3
#
            ENDDO b1
#
            DO a
            DO i
#
               REQUEST              T2ab(a,i,b,j2) j2
               REQUEST              Vpiqj(a,i,j1,j)    j # +
#
               T1jjbj(j,j1,b,j2)  = Vpiqj(a,i,j1,j)*T2ab(a,i,b,j2)
               T2jjbj(j,j2,b,j1)  = T1jjbj(j,j1,b,j2)
#
               Tjjbj(j,j1,b,j2)  += T1jjbj(j,j1,b,j2)
               TSjjbj(j,j2,b,j1) -= T2jjbj(j,j2,b,j1)
#
            ENDDO i
            ENDDO a
#
            PREPARE HBAR_IAJK_bbbb(j,j1,b,j2) += Tjjbj(j,j1,b,j2)
            PREPARE HBAR_IAJK_bbbb(j,j2,b,j1) += TSjjbj(j,j2,b,j1)
#
      ENDPARDO j, j1, b, j2 
#
      execute server_barrier 
#
      ENDPROC HBAR_IAJK   
#     -----------------
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
      PROC HBAR_AJIB     
#     --------------
#
#     There are four spin cases to compute:
#     1. H^{aj)_{ib} --> HBAR_AJIB_aaaa  
#     2. H^{AJ)_{IB} --> HBAR_AJIB_bbbb  
#     3. H^{aJ)_{iB} --> HBAR_AJIB_aabb  
#     4. H^{Aj)_{Ib} --> HBAR_AJIB_bbaa  
#     5. H^{Aj)_{iB} --> HBAR_AJIB_iibb   
#     6. H^{aJ)_{Ib} --> HBAR_AJIB_jjaa   
#
#     Note that since I 'always' store arrays in (11|22) form the 
#     notation, although valid, is slightly confusing. The 
#     storage pattern is therefore array(a,b,i,c).   
#
#    ------------------------------------------------------------------------
#
#     AAAA spin combination. 
#     ---------------------- 
#
      PARDO i1, a1, a, i
#
            REQUEST                              Viaai(i1,a1,a,i) i 
            REQUEST                              Vaaii(a,a1,i1,i) i 
            Tiaai(i1,a1,a,i)                   = Vaaii(a,a1,i1,i)
            Tiaai(i1,a1,a,i)                  -= Viaai(i1,a1,a,i)
            Tiaai(i1,a1,a,i)                  *= -1.0
            PREPARE HBAR_AJIB_aaaa(i1,a1,a,i) += Tiaai(i1,a1,a,i)
#
      ENDPARDO i1, a1, a, i
#
      PARDO i, i1, a1, i2  
#
            REQUEST VSpipi(a1,i1,i,i2) i
#
            DO a
#
               GET                                  t1a(a,i2)
               T1iaai(i1,a1,a,i)                  = VSpipi(a1,i1,i,i2)*t1a(a,i2)
               T1iaai(i1,a1,a,i)                 *= -1.0  
               PREPARE HBAR_AJIB_aaaa(i1,a1,a,i) += T1iaai(i1,a1,a,i)
#
            ENDDO a
#
      ENDPARDO i, i1, a1, i2
#
      PARDO i1, a1, a, a2  
#
            REQUEST  VSaaai(a2,a,a1,i1) i1
#
            DO i 
#
               GET                                  t1a(a2,i)
               T2iaai(i,a,a1,i1)                  = VSaaai(a2,a,a1,i1)*t1a(a2,i)
               T1iaai(i1,a1,a,i)                  = T2iaai(i,a,a1,i1)
               PREPARE HBAR_AJIB_aaaa(i1,a1,a,i) += T1iaai(i1,a1,a,i)
#
            ENDDO i
#
      ENDPARDO i1, a1, a, a2  
#
      PARDO i, a, a2, i2  
#
            REQUEST               T2aa(a2,i,a,i2) a2 
            GET                   t1a(a,i2)
            GET                   t1a(a2,i)
            tai(a,i2)           = t1a(a,i2)
            T1aiai(a2,i,a,i2)   = t1a(a2,i)^tai(a,i2)
            T1aiai(a2,i,a,i2)  += T2aa(a2,i,a,i2)
#
            DO a1 
            DO i1
#
               REQUEST                              VSpipi(a2,i2,a1,i1) a2 
               Taiai(a1,i2,a2,i1)                 = VSpipi(a2,i2,a1,i1)
               T1iaai(i1,a1,a,i)                  = T1aiai(a2,i,a,i2)*Taiai(a1,i2,a2,i1)
               T1iaai(i1,a1,a,i)                 *= -1.0  
               PREPARE HBAR_AJIB_aaaa(i1,a1,a,i) += T1iaai(i1,a1,a,i)
#
            ENDDO i1
            ENDDO a1
#
      ENDPARDO i, a, a2, i2
#
      PARDO i1, a1, b, j
#
            REQUEST Vpiqj(a1,i1,b,j) j 
#
            DO a
            DO i
#
               REQUEST                              T2ab(a,i,b,j) j 
               T1iaai(i1,a1,a,i)                  = Vpiqj(a1,i1,b,j)*T2ab(a,i,b,j)
               PREPARE HBAR_AJIB_aaaa(i1,a1,a,i) += T1iaai(i1,a1,a,i)
#
            ENDDO i
            ENDDO a
#
      ENDPARDO i1, a1, b, j
#
#     BBBB spin combination. 
#     ---------------------- 
#
      PARDO j1, b1, b, j
#
            REQUEST                              Vjbbj(j1,b1,b,j) j 
            REQUEST                              Vbbjj(b,b1,j1,j) j 
            Tjbbj(j1,b1,b,j)                   = Vbbjj(b,b1,j1,j)
            Tjbbj(j1,b1,b,j)                  -= Vjbbj(j1,b1,b,j)
            Tjbbj(j1,b1,b,j)                  *= -1.0
            PREPARE HBAR_AJIB_bbbb(j1,b1,b,j) += Tjbbj(j1,b1,b,j)
#
      ENDPARDO j1, b1, b, j 
#
      PARDO j1, b, b1, b2  
#
            REQUEST VSbbbj(b2,b,b1,j1) b 
#
            DO j 
#
               GET                                  t1b(b2,j)
               T2jbbj(j,b,b1,j1)                  = VSbbbj(b2,b,b1,j1)*t1b(b2,j)
               T1jbbj(j1,b1,b,j)                  = T2jbbj(j,b,b1,j1)
               PREPARE HBAR_AJIB_bbbb(j1,b1,b,j) += T1jbbj(j1,b1,b,j)
#
            ENDDO j
#
      ENDPARDO j1, b, b1, b2  
#
      PARDO j, j1, b1, j2
#
            REQUEST VSqjqj(b1,j1,j,j2) j
#
            DO b
#
               GET                                  t1b(b,j2)
               T1jbbj(j1,b1,b,j)                  = VSqjqj(b1,j1,j,j2)*t1b(b,j2)
               T1jbbj(j1,b1,b,j)                 *= -1.0  
               PREPARE HBAR_AJIB_bbbb(j1,b1,b,j) += T1jbbj(j1,b1,b,j)
#
            ENDDO b
#
      ENDPARDO j, j1, b1, j2 
#
      PARDO j, b, b2, j2
#
            REQUEST               T2bb(b2,j,b,j2) j 
            GET                   t1b(b2,j)
            GET                   t1b(b,j2)
            tbj(b2,j)           = t1b(b2,j)
            T1bjbj(b2,j,b,j2)   = t1b(b,j2)^tbj(b2,j)
            T1bjbj(b2,j,b,j2)  += T2bb(b2,j,b,j2)
#
            DO j1
            DO b1
#
               REQUEST                              VSqjqj(b2,j2,b1,j1) j1 
               T1jbbj(j1,b1,b,j)                  = T1bjbj(b2,j,b,j2)*VSqjqj(b2,j2,b1,j1)
               T1jbbj(j1,b1,b,j)                 *= -1.0  
               PREPARE HBAR_AJIB_bbbb(j1,b1,b,j) += T1jbbj(j1,b1,b,j)
#
            ENDDO b1
            ENDDO j1
#
      ENDPARDO j, b, b2, j2 
#
      PARDO j, b, a, i
#
            REQUEST T2ab(a,i,b,j) a 
#
            DO b1  
            DO j1  
#
               REQUEST                              Vpiqj(a,i,b1,j1) a 
               T1jbbj(j1,b1,b,j)                  = Vpiqj(a,i,b1,j1)*T2ab(a,i,b,j)
               PREPARE HBAR_AJIB_bbbb(j1,b1,b,j) += T1jbbj(j1,b1,b,j)
#
            ENDDO j1  
            ENDDO b1  
#
      ENDPARDO j, b, a, i 
#
#     AABB spin combination. 
#     ---------------------- 
#
      PARDO i, a, b, j
#
            REQUEST                           Viabj(i,a,b,j) j
            Tiabj(i,a,b,j)                  = Viabj(i,a,b,j)
            PREPARE HBAR_AJIB_aabb(i,a,b,j)+= Tiabj(i,a,b,j)
#
      ENDPARDO i, a, b, j 
#
      PARDO i, a, b, b1  
#
            REQUEST Vbbai(b1,b,a,i) i 
#
            DO j
#
               GET                                t1b(b1,j)
               Tjbai(j,b,a,i)                   = Vbbai(b1,b,a,i)*t1b(b1,j)
               Tiabj(i,a,b,j)                   = Tjbai(j,b,a,i)  
               PREPARE HBAR_AJIB_aabb(i,a,b,j) += Tiabj(i,a,b,j)
#
            ENDDO j
#
      ENDPARDO i, a, b, b1  
#
      PARDO b, i, a, j
#
            Tiabj(i,a,b,j)  = 0.0  
#
            DO j1
#
               REQUEST           Vpiqj(a,i,j,j1) j 
               GET               t1b(b,j1)
               T1iabj(i,a,b,j) = Vpiqj(a,i,j,j1)*t1b(b,j1)
               Tiabj(i,a,b,j) -= T1iabj(i,a,b,j)
#
            ENDDO j1
#
            PREPARE HBAR_AJIB_aabb(i,a,b,j) += Tiabj(i,a,b,j)
#
      ENDPARDO b, i, a, j 
#
      PARDO j, b, b1, j1
#
            REQUEST              T2bb(b1,j,b,j1) b 
            GET                  t1b(b1,j)
            GET                  t1b(b,j1)
#
            tbj(b,j1)          = t1b(b,j1)
            T2bjbj(b1,j,b,j1)  = t1b(b1,j)^tbj(b,j1)
            T2bjbj(b1,j,b,j1) += T2bb(b1,j,b,j1)
#
            DO i
            DO a
#
               REQUEST                            Vpiqj(a,i,b1,j1) a 
               Tiabj(i,a,b,j)                   = T2bjbj(b1,j,b,j1)*Vpiqj(a,i,b1,j1)
               Tiabj(i,a,b,j)                  *= -1.0  
               PREPARE HBAR_AJIB_aabb(i,a,b,j) += Tiabj(i,a,b,j)
#
            ENDDO a
            ENDDO i
#
      ENDPARDO j, b, b1, j1 
#
      PARDO i1, a1, b, j
#
            REQUEST T2ab(a1,i1,b,j) a1 
#
            DO a
            DO i
#
               REQUEST                            VSpipi(a1,i1,a,i) a1 
               Tiabj(i,a,b,j)                   = T2ab(a1,i1,b,j)*VSpipi(a1,i1,a,i)
               PREPARE HBAR_AJIB_aabb(i,a,b,j) += Tiabj(i,a,b,j)
#
            ENDDO i
            ENDDO a
#
      ENDPARDO i1, a1, b, j 
#
#     BBAA spin combination. 
#     ---------------------- 
#
      PARDO j, b, a, i
#
            REQUEST                            Viabj(i,a,b,j) j 
            Tjbai(j,b,a,i)                   = Viabj(i,a,b,j)
            PREPARE HBAR_AJIB_BBAA(j,b,a,i) += Tjbai(j,b,a,i)
#
      ENDPARDO j, b, a, i 
#
      PARDO j, b, a, a1  
#
            REQUEST Vaabj(a1,a,b,j) j 
#
            DO i 
#
               GET                                t1a(a1,i)
               Tiabj(i,a,b,j)                   = Vaabj(a1,a,b,j)*t1a(a1,i)
               Tjbai(j,b,a,i)                   = Tiabj(i,a,b,j)
               PREPARE HBAR_AJIB_BBAA(j,b,a,i) += Tjbai(j,b,a,i)
#
            ENDDO i
#
      ENDPARDO j, b, a, a1 
#
      PARDO a, j, b, i
#
            Tjbai(j,b,a,i) = 0.0  
#
            DO i1
#
               REQUEST           Vpiqj(i,i1,b,j) b 
               GET               t1a(a,i1)
#
               T1jbai(j,b,a,i) = Vpiqj(i,i1,b,j)*t1a(a,i1)
               Tjbai(j,b,a,i) -= T1jbai(j,b,a,i)
#
            ENDDO i1
#
            PREPARE HBAR_AJIB_BBAA(j,b,a,i) += Tjbai(j,b,a,i)
#
      ENDPARDO a, j, b, i 
#
      PARDO i, a, a1, i1
#
            REQUEST              T2aa(a1,i,a,i1) a1 
            GET                  t1a(a1,i)
            GET                  t1a(a,i1)
#
            tai(a,i1)          = t1a(a,i1)
            T2aiai(a1,i,a,i1)  = t1a(a1,i)^tai(a,i1)
            T2aiai(a1,i,a,i1) += T2aa(a1,i,a,i1)
#
            DO j
            DO b
#
               REQUEST                            Vpiqj(a1,i1,b,j) a1 
               Tjbai(j,b,a,i)                   = Vpiqj(a1,i1,b,j)*T2aiai(a1,i,a,i1)
               Tjbai(j,b,a,i)                  *= -1.0  
               PREPARE HBAR_AJIB_BBAA(j,b,a,i) += Tjbai(j,b,a,i)
#
            ENDDO b
            ENDDO j
#
      ENDPARDO i, a, a1, i1 
#
      PARDO i, a, j1, b1  
#
            REQUEST T2ab(a,i,b1,j1) j1 
#
            DO b
            DO j
#
               REQUEST                            VSqjqj(b1,j1,b,j) j1 
               Tjbai(j,b,a,i)                   = T2ab(a,i,b1,j1)*VSqjqj(b1,j1,b,j)
               PREPARE HBAR_AJIB_BBAA(j,b,a,i) += Tjbai(j,b,a,i)
#
            ENDDO j
            ENDDO b
#
      ENDPARDO i, a, j1, b1  
#
#     ABAB spin combination. 
#     ---------------------- 
#
      PARDO i1, b1, b, i
#
            REQUEST                              Vbbii(b,b1,i1,i) i 
            Tiibb(i1,i,b,b1)                   = Vbbii(b,b1,i1,i)
            Tiibb(i1,i,b,b1)                  *= -1.0
            PREPARE HBAR_AJIB_iibb(i1,i,b,b1) += Tiibb(i1,i,b,b1)
#
      ENDPARDO i1, b1, b, i
#
      PARDO b1, b, a1, i1  
#
            REQUEST Vbbai(b1,b,a1,i1) i1 
#
            DO i
#
               GET                                  t1a(a1,i)
               T1iibb(i1,i,b,b1)                  = Vbbai(b1,b,a1,i1)*t1a(a1,i)
               T2iibb(i1,i,b,b1)                  = T1iibb(i1,i,b,b1)  
               T2iibb(i1,i,b,b1)                 *= -1.0 
               PREPARE HBAR_AJIB_iibb(i1,i,b,b1) += T2iibb(i1,i,b,b1)
#
            ENDDO i
#
      ENDPARDO b1, b, a1, i1  
#
      PARDO i1, b1, b, i
#
            Tiibb(i1,i,b,b1) = 0.0 
#
            DO j1
#
               REQUEST             Vpiqj(i,i1,b1,j1) i 
               GET                 t1b(b,j1)
#
               T1iibb(i1,i,b,b1) = Vpiqj(i,i1,b1,j1)*t1b(b,j1)
               Tiibb(i1,i,b,b1) += T1iibb(i1,i,b,b1) 
#
            ENDDO j1
#
            PREPARE HBAR_AJIB_iibb(i1,i,b,b1) += Tiibb(i1,i,b,b1)
#
      ENDPARDO i1, b1, b, i
#
      PARDO i, b, j1, a1  
#
            REQUEST              T2ab(a1,i,b,j1) j1 
            GET                  t1a(a1,i)
            GET                  t1b(b,j1)
#
            Taibj(a1,i,b,j1)   = t1a(a1,i)^t1b(b,j1)
            T1aibj(a1,i,b,j1)  = T2ab(a1,i,b,j1)
            T1aibj(a1,i,b,j1) += Taibj(a1,i,b,j1)
#
            DO i1
            DO b1
#
               REQUEST                              Vpiqj(a1,i1,b1,j1) j1 
               T1iibb(i1,i,b,b1)                  = T1aibj(a1,i,b,j1)*Vpiqj(a1,i1,b1,j1)
               PREPARE HBAR_AJIB_iibb(i1,i,b,b1) += T1iibb(i1,i,b,b1)
#
            ENDDO b1
            ENDDO i1
#
      ENDPARDO i, b, j1, a1  
#
#     BABA spin combination. 
#     ---------------------- 
#
      PARDO j1, a1, a, j
#
            REQUEST                              Vaajj(a,a1,j1,j) a 
            Tjjaa(j1,j,a,a1)                   = Vaajj(a,a1,j1,j)
            Tjjaa(j1,j,a,a1)                  *= -1.0
            PREPARE HBAR_AJIB_jjaa(j1,j,a,a1) += Tjjaa(j1,j,a,a1)
#
      ENDPARDO j1, a1, a, j
#
      PARDO j1, a1, a, b1  
#
            REQUEST Vaabj(a1,a,b1,j1) a 
#
            DO j
#
               GET                                  t1b(b1,j)
               T1jjaa(j1,j,a,a1)                  = Vaabj(a1,a,b1,j1)*t1b(b1,j)
               T1jjaa(j1,j,a,a1)                 *= -1.0  
               PREPARE HBAR_AJIB_jjaa(j1,j,a,a1) += T1jjaa(j1,j,a,a1)
#
            ENDDO j
#
      ENDPARDO j1, a1, a, b1  
#
      PARDO a, j1, a1, j
#
            Tjjaa(j1,j,a,a1) = 0.0  
#
            DO i1
#
               REQUEST             Vpiqj(a1,i1,j,j1) j 
               GET                 t1a(a,i1)
               T1jjaa(j1,j,a,a1) = Vpiqj(a1,i1,j,j1)*t1a(a,i1)
               Tjjaa(j1,j,a,a1) += T1jjaa(j1,j,a,a1)
#
            ENDDO i1
#
            PREPARE HBAR_AJIB_jjaa(j1,j,a,a1) += Tjjaa(j1,j,a,a1)
#
      ENDPARDO a, j1, a1, j
#
      PARDO j, a, i1, b1  
#
            REQUEST              T2ab(a,i1,b1,j) i1 
            GET                  t1b(b1,j)
            GET                  t1a(a,i1) 
            Taibj(a,i1,b1,j)   = t1b(b1,j)^t1a(a,i1)
            T1aibj(a,i1,b1,j)  = T2ab(a,i1,b1,j)
            T1aibj(a,i1,b1,j) += Taibj(a,i1,b1,j)
#
            DO j1
            DO a1
#
               REQUEST                              Vpiqj(a1,i1,b1,j1) i1 
               T1jjaa(j1,j,a,a1)                  = T1aibj(a,i1,b1,j)*Vpiqj(a1,i1,b1,j1)
               PREPARE HBAR_AJIB_jjaa(j1,j,a,a1) += T1jjaa(j1,j,a,a1)
#
            ENDDO a1
            ENDDO j1
#
      ENDPARDO j, a, i1, b1  
#
      ENDPROC HBAR_AJIB     
#     -----------------
#
#    ------------------------------------------------------------------------ 
# 
#    ------------------------------------------------------------------------ 
#
      PROC TAUAA
#     ----------
#
      PARDO a, i, a1, i1
#
            REQUEST T2aa(a,i,a1,i1) i1
# 
            GET t1a(a,i) 
            GET t1a(a1,i1) 
            GET t1a(a,i1) 
            GET t1a(a1,i) 

            tai(a1,i1)                 = t1a(a1,i1)
            tmp1_aiai(a,i,a1,i1)       = t1a(a,i)^tai(a1,i1)
            t1ai(a1,i)                 = t1a(a1,i)
            tmp2_aiai(a,i,a1,i1)       = t1a(a,i1)^t1ai(a1,i)
            tmp1_aiai(a,i,a1,i1)      -= tmp2_aiai(a,i,a1,i1)
#
            tmp1_aiai(a,i,a1,i1)      *= 0.5
            tmp1_aiai(a,i,a1,i1)      += T2aa(a,i,a1,i1)
            PREPARE Taup_aa(a,i,a1,i1) = tmp1_aiai(a,i,a1,i1)
#
      ENDPARDO a, i, a1, i1
#
      ENDPROC TAUAA
#     ------------- 
# 
#
      PROC TAUAB
#     ----------
#
      PARDO a, i, b, j
#
            REQUEST T2ab(a,i,b,j) j
            GET t1a(a,i) 
            GET t1b(b,j) 
#
            tmp1_aibj(a,i,b,j)       = t1a(a,i)^t1b(b,j)
            tmp2_aibj(a,i,b,j)       = tmp1_aibj(a,i,b,j)
            tmp2_aibj(a,i,b,j)      *= 0.5
#
            tmp2_aibj(a,i,b,j)      += T2ab(a,i,b,j)
            PREPARE Taup_ab(a,i,b,j) = tmp2_aibj(a,i,b,j)
#
      ENDPARDO a, i, b, j
#
      ENDPROC TAUAB
#     ------------- 
#
#
      PROC FMIA
#     ----------
#
      PARDO i1, i, a, i2
#
            REQUEST VSpipi(a,i2,i,i1) i1
            GET t1a(a,i2) 
#
            Tii(i1,i)        = VSpipi(a,i2,i,i1)*t1a(a,i2)
            PUT Fmi_a(i1,i) += Tii(i1,i) 
#
      ENDPARDO i1, i, a, i2
#
      PARDO a, a2, i2
#
            DO i1
               REQUEST VSpipi(a2,i1,a,i2) i2
#
            DO i
#
               REQUEST Taup_aa(a2,i,a,i2) i2
# 
               Tii(i1,i)        = VSpipi(a2,i1,a,i2)*Taup_aa(a2,i,a,i2)
               Tii(i1,i)       *= 0.5
               PUT Fmi_a(i1,i) += Tii(i1,i) 
#
            ENDDO i
#
            ENDDO i1
      ENDPARDO a, a2, i2
#
      PARDO i1, i, b, j
#
            REQUEST Vpiqj(i,i1,b,j) j
            GET t1a(b,j) 
#
            Tii(i1,i)        = Vpiqj(i,i1,b,j)*t1a(b,j)
            PUT Fmi_a(i1,i) += Tii(i1,i) 
#
      ENDPARDO i1, i, b, j
#
      PARDO i1, i, b, j
#
            DO a
#
               REQUEST Vpiqj(a,i1,b,j)  j
               REQUEST Taup_ab(a,i,b,j) j

               Tii(i1,i)        = Taup_ab(a,i,b,j)*Vpiqj(a,i1,b,j)
               PUT Fmi_a(i1,i) += Tii(i1,i) 
#
            ENDDO a
#
      ENDPARDO i1, i, b, j
#
      ENDPROC FMIA
#     -------------
#
      PROC FMEA
#     ----------
#
      PARDO i, a
            Tme_a(i,a) = 0.0
            DO i1
            DO a1
               REQUEST VSpipi(a,i,a1,i1) i1
               GET t1a(a1,i1) 
               Tia(i,a)    = VSpipi(a,i,a1,i1)*t1a(a1,i1)
               Tme_a(i,a) += Tia(i,a)
            ENDDO a1
            ENDDO i1
# 
            DO j
            DO b
               REQUEST Vpiqj(a,i,b,j) j
               GET t1a(b,j) 
               Tia(i,a)    = Vpiqj(a,i,b,j)*t1a(b,j)
               Tme_a(i,a) += Tia(i,a)
            ENDDO b
            ENDDO j
#
            PUT Fme_a(i,a) = Tme_a(i,a)
#
      ENDPARDO i, a
# 
      ENDPROC FMEA
#     -------------
#
      PROC FAEA
#     ----------
#
      PARDO a, a2, i
               DO a1
                  REQUEST            VSaaai(a1,a,a2,i) i
                  GET t1a(a2,i) 
                  Taa(a,a1)        = VSaaai(a1,a,a2,i)*t1a(a2,i)
                  PUT Fae_a(a,a1) += Taa(a,a1)
               ENDDO a1
      ENDPARDO a, a2, i
#
      PARDO a, b, j
            GET t1a(b,j) 
            DO a1
               REQUEST               Vaabj(a1,a,b,j) j
               Taa(a,a1)     = Vaabj(a1,a,b,j)*t1a(b,j)
               PUT Fae_a(a,a1) += Taa(a,a1)
            ENDDO a1
      ENDPARDO a, b, j
#
      PARDO a1, i, b, j
           REQUEST Vpiqj(a1,i,b,j) j
           DO a
              REQUEST         Taup_ab(a,i,b,j) j
              Taa(a,a1)     = Taup_ab(a,i,b,j)*Vpiqj(a1,i,b,j)
              Taa(a,a1)    *= -1.0
              PUT Fae_a(a,a1) += Taa(a,a1)
           ENDDO a
      ENDPARDO a1, i, b, j
#
      PARDO a1, i, a2, i1
           REQUEST             VSpipi(a1,i1,a2,i) i
           DO a
               REQUEST         Taup_aa(a,i,a2,i1) i
               Taa(a,a1)     = Taup_aa(a,i,a2,i1)*VSpipi(a1,i1,a2,i)
               Taa(a,a1)    *= 0.5
               PUT Fae_a(a,a1) += Taa(a,a1)
            ENDDO a
      ENDPARDO a1, i, a2, i1
#
      ENDPROC FAEA
#     ----------
#
#    PROC HBAR_AI 
#    ------------ 
#
#        PARDO a, i
#
#              GET FTa(a,i) 
#              tai(a,i) = FTa(a,i)
#
#              DO i1
#
#                 GET FTa(i1,i) 
#                 GET t1a(a,i1) 
#                 t1ai(a,i) = t1a(a,i1)*FTa(i1,i)
#                 tai(a,i) -= t1ai(a,i)
#
#              ENDDO i1
#
#              DO a1
#
#                 GET FTa(a,a1) 
#                 GET t1a(a1,i) 
#                 t1ai(a,i) = T1a(a1,i)*FTa(a,a1)
#                 tai(a,i) += t1ai(a,i)
#
#              ENDDO a1
#
#              PUT HBARai(a,i) = tai(a,i)
#
#        ENDPARDO a, i
#
#        execute sip_barrier
#
#     PARDO a, i, i1
#
#           GET t1a(a,i1) 
#           GET Fmi_a(i1,i) 
#           t1ai(a,i)   = t1a(a,i1)*Fmi_a(i1,i)
#           t1ai(a,i)  *= -1.0  
#           PUT HBARai(a,i) += t1ai(a,i)
#
#     ENDPARDO a, i, i1
#
#     PARDO a, i, b, j
#
#           REQUEST       T2ab(a,i,b,j) j
#           GET Fme_a(j,b) 
#           t1ai(a,i)   = T2ab(a,i,b,j)*Fme_a(j,b)
#           PUT HBARai(a,i) += t1ai(a,i)
#
#     ENDPARDO a, i, b, j
#
#     PARDO a, i, b, j
#
#           REQUEST       Viabj(i,a,b,j) j
#           GET t1a(b,j) 
#           t1ai(a,i)   = Viabj(i,a,b,j)*t1a(b,j)
#           PUT HBARai(a,i) += t1ai(a,i)
#
#     ENDPARDO a, i, b, j
#
#     PARDO i, a, a1
#
#           GET t1a(a1,i) 
#           GET Fae_a(a,a1) 
#           t1ai(a,i)   = t1a(a1,i)*Fae_a(a,a1)
#           PUT HBARai(a,i) += t1ai(a,i)
#
#     ENDPARDO i, a, a1
#
#     PARDO a, i, a1, i1
#
#           REQUEST       T2aa(a,i,a1,i1) i1
#           GET Fme_a(i1,a1) 
#           t1ai(a,i)   = T2aa(a,i,a1,i1)*Fme_a(i1,a1)
#           PUT HBARai(a,i) += t1ai(a,i)
#
#     ENDPARDO a, i, a1, i1
#
#     PARDO a, i, a1, i1
#
#           REQUEST Vaaii(a,a1,i1,i) i
#           REQUEST Viaai(i1,a1,a,i) i
#           GET t1a(a1,i1) 
#
#           Tpppp(i1,a1,a,i)  = Vaaii(a,a1,i1,i)
#           Tpppp(i1,a1,a,i) -= Viaai(i1,a1,a,i)
#
#           t1ai(a,i)   = Tpppp(i1,a1,a,i)*t1a(a1,i1)
#           t1ai(a,i)  *= -1.0  
#           PUT HBARai(a,i) += t1ai(a,i)
#
#     ENDPARDO a, i, a1, i1
#
#     PARDO a1, a2, i1
#
#           DO i
#              REQUEST              T2aa(a1,i,a2,i1) i1
#           DO a
#              REQUEST VSaaai(a2,a,a1,i1)   i1
#                 tai(a,i)    = VSaaai(a2,a,a1,i1)*T2aa(a1,i,a2,i1)
#                 tai(a,i)   *= -0.5
#                 PUT HBARai(a,i) += tai(a,i)
#           ENDDO a
#           ENDDO i
#     ENDPARDO a1, a2, i1
#
#     PARDO a1, i1, i2
#
#           DO i
#              REQUEST              VSpipi(a1,i2,i,i1) i1
#           DO a
#              REQUEST T2aa(a,i1,a1,i2) i1
#                 tai(a,i)    = VSpipi(a1,i2,i,i1)*T2aa(a,i1,a1,i2)
#                 tai(a,i)   *= -0.5
#                 PUT HBARai(a,i) += tai(a,i)
#           ENDDO a
#           ENDDO i
#     ENDPARDO a1, i1, i2
#
#     PARDO a1, b, j
#
#           DO i
#              REQUEST            T2ab(a1,i,b,j) j
#           DO a
#              REQUEST Vaabj(a1,a,b,j) j
#                 tai(a,i)    = Vaabj(a1,a,b,j)*T2ab(a1,i,b,j)
#                 PUT HBARai(a,i) += tai(a,i)
#           ENDDO a
#           ENDDO i
#     ENDPARDO a1, b, j
#
#     PARDO b, j, i1
#
#           DO i
#              REQUEST            Vpiqj(i,i1,b,j) j
#           DO a
#              REQUEST T2ab(a,i1,b,j) j
#                 tai(a,i)    = Vpiqj(i,i1,b,j)*T2ab(a,i1,b,j)
#                 tai(a,i)   *= -1.0
#                 PUT HBARai(a,i) += tai(a,i)
#           ENDDO a
#           ENDDO i
#     ENDPARDO b, j, i1
#     execute sip_barrier 
#   # PARDO a, i 
#   #    GET HBARai(a,i) 
#   #    execute dump_amp HBARai  
#   # ENDPARDO a, i 
#
#    ENDPROC HBAR_AI 
#    --------------- 
#
#    ------------------------------------------------------------------------
#
#    BEGIN MAIN HBAR PROGRAM 
#
#    ------------------------------------------------------------------------
#
     PROC HBAR 
#    --------- 
#
     execute sip_barrier 
#
     CALL TAUAA
     CALL TAUAB
     execute server_barrier 
     CALL HBAR_AB # COMPARES WITH ACES  
     CALL HBAR_IJ # COMPARES WITH ACES  
     CALL HBAR_IB # COMPARES WITH ACES 
     CALL FAEA 
     CALL FMEA   
     CALL FMIA   
     execute sip_barrier 
    #CALL HBAR_AI  
# 
     CALL HBAR_IJKL # COMPARES WITH ACES  
     CALL HBAR_JKIA # COMPARES WITH ACES   
     execute server_barrier 
     CALL HBAR_IAJK # COMPARES WITH ACES  
#
     CALL HBAR_AJIB # COMPARES WITH ACES      
     execute server_barrier
#
     ENDPROC HBAR 
#    ------------ 
#
# ----------------------------------------------------------------------
#
     PROC compute_hbar
#
#     (alpha,alpha,alpha,alpha) spin component.
#     -----------------------------------------
#
      PARDO i, i2, i1, i3
#
            REQUEST             VSpipi(i,i1,i2,i3) i3
            tpppp(i,i1,i2,i3) = VSpipi(i,i1,i2,i3)
#
            DO a
#
               REQUEST              VSpipi(i1,i,a,i2) i2
               GET                  t1a(a,i3)
#
               t1pppp(i,i1,i2,i3) = VSpipi(i1,i,a,i2)*t1a(a,i3)
               tpppp(i,i1,i2,i3) += t1pppp(i,i1,i2,i3)
#
            ENDDO a
#
            DO a
#
               REQUEST              VSpipi(i3,i,a,i2) i2
               GET                  t1a(a,i1)
#
               t1pppp(i,i1,i2,i3) = VSpipi(i3,i,a,i2)*t1a(a,i1)
               tpppp(i,i1,i2,i3) -= t1pppp(i,i1,i2,i3)
#
            ENDDO a
#
            DO a
            DO a1
#
               REQUEST              VSpipi(a,i,a1,i2) i2
               REQUEST              T2aa(a,i1,a1,i3) i3
               GET                  t1a(a,i1)
               GET                  t1a(a1,i3)
               GET                  t1a(a,i3)
               GET                  t1a(a1,i1)
#
               tpp(a1,i3)         = t1a(a1,i3)
               t1pp(a1,i1)        = t1a(a1,i1)
#
               t1pppp(a,i1,a1,i3)  = T2aa(a,i1,a1,i3)
               t2pppp(a,i1,a1,i3) = t1a(a,i1)^tpp(a1,i3)
               t3pppp(a,i1,a1,i3) = t1a(a,i3)^t1pp(a1,i1)
               t1pppp(a,i1,a1,i3) += t2pppp(a,i1,a1,i3)
               t1pppp(a,i1,a1,i3) -= t3pppp(a,i1,a1,i3)
#
               t4pppp(i,i1,i2,i3) = VSpipi(a,i,a1,i2)*t1pppp(a,i1,a1,i3)
               t4pppp(i,i1,i2,i3) *= 0.5
               tpppp(i,i1,i2,i3)  += t4pppp(i,i1,i2,i3)
#
            ENDDO a1
            ENDDO a
#
            PREPARE HBAR_iiii(i,i1,i2,i3) = tpppp(i,i1,i2,i3)
#
      ENDPARDO i, i2, i1, i3
#
#     done (alpha,alpha,alpha,alpha) spin component.
#     ----------------------------------------------
#
#     (beta,beta,beta,beta) spin component.
#     -------------------------------------
#
      PARDO j, j2, j1, j3
#
            REQUEST             VSqjqj(j,j1,j2,j3) j3
            tqqqq(j,j1,j2,j3) = VSqjqj(j,j1,j2,j3)
#
            DO b
#
               REQUEST              VSqjqj(j1,j,b,j2) j2
               GET                  t1b(b,j3)
#
               t1qqqq(j,j1,j2,j3) = VSqjqj(j1,j,b,j2)*t1b(b,j3)
               tqqqq(j,j1,j2,j3) += t1qqqq(j,j1,j2,j3)
#
            ENDDO b
#
            DO b
#
               REQUEST              VSqjqj(j3,j,b,j2) j2
               GET                  t1b(b,j1)
#
               t1qqqq(j,j1,j2,j3) = VSqjqj(j3,j,b,j2)*t1b(b,j1)
               tqqqq(j,j1,j2,j3) -= t1qqqq(j,j1,j2,j3)
#
            ENDDO b
#
            DO b
            DO b1
#
               REQUEST              VSqjqj(b,j,b1,j2) j2
               REQUEST              T2bb(b,j1,b1,j3) j3
               GET                  t1b(b,j1)
               GET                  t1b(b1,j3)
               GET                  t1b(b,j3)
               GET                  t1b(b1,j1)
#
               tqq(b1,j3)         = t1b(b1,j3)
               t1qq(b1,j1)        = t1b(b1,j1)
#
               t1qqqq(b,j1,b1,j3)  = T2bb(b,j1,b1,j3)
               t2qqqq(b,j1,b1,j3) = t1b(b,j1)^tqq(b1,j3)
               t3qqqq(b,j1,b1,j3) = t1b(b,j3)^t1qq(b1,j1)
               t1qqqq(b,j1,b1,j3) += t2qqqq(b,j1,b1,j3)
               t1qqqq(b,j1,b1,j3) -= t3qqqq(b,j1,b1,j3)
#
               t4qqqq(j,j1,j2,j3) = VSqjqj(b,j,b1,j2)*t1qqqq(b,j1,b1,j3)
               t4qqqq(j,j1,j2,j3) *= 0.5
               tqqqq(j,j1,j2,j3) += t4qqqq(j,j1,j2,j3)
#
            ENDDO b1
            ENDDO b
#
            PREPARE HBAR_jjjj(j,j1,j2,j3) = tqqqq(j,j1,j2,j3)
#
      ENDPARDO j, j2, j1, j3
#
#     done (beta,beta,beta,beta) spin component.
#     ------------------------------------------
#
      PARDO i, i1, j2, j3
#
            REQUEST             Vpiqj(i,i1,j2,j3) j3
            tppqq(i,i1,j2,j3) = Vpiqj(i,i1,j2,j3)
#
            DO b
#
               REQUEST              Vpiqj(i1,i,b,j2) j2
               GET                  t1b(b,j3)
#
               t1ppqq(i,i1,j2,j3) = Vpiqj(i1,i,b,j2)*t1b(b,j3)
               tppqq(i,i1,j2,j3) += t1ppqq(i,i1,j2,j3)
#
            ENDDO b
#
            DO a
#
               REQUEST              Vpiqj(a,i,j2,j3) j2
               GET                  t1a(a,i1)
#
               t1ppqq(i,i1,j2,j3) = Vpiqj(a,i,j2,j3)*t1a(a,i1)
               tppqq(i,i1,j2,j3) += t1ppqq(i,i1,j2,j3)
#
            ENDDO a
#
            DO a
            DO b
#
               REQUEST             Vpiqj(a,i,b,j2) j2
               REQUEST             T2ab(a,i1,b,j3) j3
               GET                 t1a(a,i1)
               GET                 t1b(b,j3)
#
               t1ppqq(a,i1,b,j3)  = T2ab(a,i1,b,j3)
               t2ppqq(a,i1,b,j3)  = t1a(a,i1)^t1b(b,j3)
               t1ppqq(a,i1,b,j3) += t2ppqq(a,i1,b,j3)
#
               t3ppqq(i,i1,j2,j3) = Vpiqj(a,i,b,j2)*t1ppqq(a,i1,b,j3)
               tppqq(i,i1,j2,j3) += t3ppqq(i,i1,j2,j3)
#
            ENDDO b
            ENDDO a
#
            PREPARE HBAR_iijj(i,i1,j2,j3) = tppqq(i,i1,j2,j3)
#
      ENDPARDO i, i1, j2, j3
#
      execute server_barrier
#
#     alpha-alpha spin component first. 
#     --------------------------------- 
#
      PARDO i, i1
#
            tttpp(i1,i) = fock_a(i1,i)
#
            DO a
#
               GET          t1a(a,i)
               ttt1pp(i1,i) = fock_a(i1,a)*t1a(a,i)
               tttpp(i1,i) += ttt1pp(i1,i)
#
            ENDDO a
#
            DO a
            DO i2
#
               REQUEST      VSpipi(a,i2,i,i1) i1
               GET          t1a(a,i2)
#
               ttt1pp(i1,i) = VSpipi(a,i2,i,i1)*t1a(a,i2)
               tttpp(i1,i) += ttt1pp(i1,i)
#
            ENDDO i2
            ENDDO a
#
            DO b
            DO j
#
               REQUEST      Vpiqj(i,i1,b,j) i1
               GET          t1b(b,j)
#
               ttt1pp(i1,i) = Vpiqj(i,i1,b,j)*t1b(b,j)
               tttpp(i1,i) += ttt1pp(i1,i)
#
            ENDDO j
            ENDDO b
#
           DO a
            DO a1
            DO i2
#
               REQUEST             T2aa(a,i,a1,i2) i2
               REQUEST             VSpipi(a,i1,a1,i2) i2
               GET                 t1a(a,i)
               GET                 t1a(a1,i2)
               GET                 t1a(a,i2)
               GET                 t1a(a1,i)
#
               tttpp(a1,i2)        = t1a(a1,i2)
               ttt1pp(a1,i)        = t1a(a1,i)
#
               tpppp(a,i,a1,i2)  = T2aa(a,i,a1,i2)
               t1pppp(a,i,a1,i2) = t1a(a,i)^tttpp(a1,i2)
               t2pppp(a,i,a1,i2) = t1a(a,i2)^ttt1pp(a1,i)
               tpppp(a,i,a1,i2) += t1pppp(a,i,a1,i2)
               tpppp(a,i,a1,i2) -= t2pppp(a,i,a1,i2)
#
               ttt1pp(i1,i)        = tpppp(a,i,a1,i2)*VSpipi(a,i1,a1,i2)
               ttt1pp(i1,i)       *= 0.5
               tttpp(i1,i)        += ttt1pp(i1,i)
#
            ENDDO i2
            ENDDO a1
            ENDDO a
#
            DO a
            DO b
            DO j
#
               REQUEST           T2ab(a,i,b,j) j
               REQUEST           Vpiqj(a,i1,b,j) j
               GET               t1a(a,i)
               GET               t1b(b,j)
#
               tppqq(a,i,b,j)  = T2ab(a,i,b,j)
               t1ppqq(a,i,b,j) = t1a(a,i)^t1b(b,j)
               tppqq(a,i,b,j) += t1ppqq(a,i,b,j)
#
               ttt1pp(i1,i)      = tppqq(a,i,b,j)*Vpiqj(a,i1,b,j)
               tttpp(i1,i)      += ttt1pp(i1,i)
#
            ENDDO j
            ENDDO b
            ENDDO a
#
            PUT HBAR_ii(i1,i) = tttpp(i1,i)
#
      ENDPARDO i, i1
#
#
#     beta-beta spin component next. 
#     ------------------------------ 
#
      PARDO j, j1
#
            tttqq(j1,j) = fock_a(j1,j)
#
            DO b
#
               GET          t1b(b,j)
               ttt1qq(j1,j) = fock_a(j1,b)*t1b(b,j)
               tttqq(j1,j) += ttt1qq(j1,j)
#
            ENDDO b
#
            DO b
            DO j2
#
               REQUEST      VSqjqj(b,j2,j,j1) j1
               GET          t1b(b,j2)
#
               ttt1qq(j1,j) = VSqjqj(b,j2,j,j1)*t1b(b,j2)
               tttqq(j1,j) += ttt1qq(j1,j)
#
            ENDDO j2
            ENDDO b
#
            DO a
            DO i
#
               REQUEST      Vpiqj(a,i,j,j1) j1
               GET          t1a(a,i)
#
               ttt1qq(j1,j) = Vpiqj(a,i,j,j1)*t1a(a,i)
               tttqq(j1,j) += ttt1qq(j1,j)
#
            ENDDO i
            ENDDO a
#
            DO b
            DO b1
            DO j2
#
               REQUEST             T2bb(b,j,b1,j2) j2
               REQUEST             VSqjqj(b,j1,b1,j2) j2
               GET                 t1b(b,j)
               GET                 t1b(b1,j2)
               GET                 t1b(b,j2)
               GET                 t1b(b1,j)
#
               tttqq(b1,j2)        = t1b(b1,j2)
               ttt1qq(b1,j)        = t1b(b1,j)
#
               tqqqq(b,j,b1,j2)  = T2bb(b,j,b1,j2)
               t1qqqq(b,j,b1,j2) = t1b(b,j)^tttqq(b1,j2)
               t2qqqq(b,j,b1,j2) = t1b(b,j2)^ttt1qq(b1,j)
               tqqqq(b,j,b1,j2) += t1qqqq(b,j,b1,j2)
               tqqqq(b,j,b1,j2) -= t2qqqq(b,j,b1,j2)
#
               ttt1qq(j1,j)        = tqqqq(b,j,b1,j2)*VSqjqj(b,j1,b1,j2)
               ttt1qq(j1,j)       *= 0.5
               tttqq(j1,j)        += ttt1qq(j1,j)
#
            ENDDO j2
            ENDDO b1
            ENDDO b
#
            DO a
            DO b
            DO i
#
               REQUEST           T2ab(a,i,b,j) j
               REQUEST           Vpiqj(a,i,b,j1) j1
               GET               t1a(a,i)
               GET               t1b(b,j)
#
               tppqq(a,i,b,j)  = T2ab(a,i,b,j)
               t1ppqq(a,i,b,j) = t1a(a,i)^t1b(b,j)
               tppqq(a,i,b,j) += t1ppqq(a,i,b,j)
#
               ttt1qq(j1,j)      = tppqq(a,i,b,j)*Vpiqj(a,i,b,j1)
               tttqq(j1,j)      += ttt1qq(j1,j)
#
            ENDDO i
            ENDDO b
            ENDDO a
#
            PUT HBAR_jj(j1,j) = tttqq(j1,j)
#
      ENDPARDO j, j1
#
#
#
      execute sip_barrier
      execute server_barrier
#
     ENDPROC compute_hbar
#
#
#    ------------------------------------------------------------------------
#
#
#     BEGIN MAIN PROGRAM
#
# Read data from BLOCK_DATA -> to be partially replaced 
# ----------------------------------------------------- 
#
      VVV = 1.0  

      create HBAR_aa
      create HBAR_bb
      create HBAR_ii
      create HBAR_jj
      create HBAR_ia
      create HBAR_jb
      create HBARai 
      create VSTART1A1
      create VSTART1A2
      create VSTART1A3
      create VSTART1A4
      create VSTART1A5
      create VSTART1A6
      create VSTART1A7
      create VSTART1A8
      create VSTART1A9
      create VSTART1A10
      create VSTART1A11
      create VSTART1A12
      create VSTART1B1
      create VSTART1B2
      create VSTART1B3
      create VSTART1B4
      create VSTART1B5
      create VSTART1B6
      create VSTART1B7
      create VSTART1B8
      create VSTART1B9
      create VSTART1B10
      create VSTART1B11
      create VSTART1B12

      create VSTART1AB1
      create VSTART1AB2
      create VSTART1AB3
      create VSTART1AB4
      create VSTART1AB5
      create VSTART1AB6
      create VSTART1AB7
      create VSTART1AB8
      create VSTART1AB9
      create VSTART1AB10
      create VSTART1AB11
      create VSTART1AB12
      create Niijj
      create Niiii
      create Njjjj
#
      create t1a
      create t1b
#
      execute sip_barrier
      execute server_barrier
       CALL READ_2EL
       CALL READ_AMP
      #CALL READ_HBAR 
#
# Create arrays used and zero out some scalars 
# -------------------------------------------- 
#
       call cre_arrays
       create VC1A 
       create VCH1A 
       create VTEMP1A 
       create VC1B 
       create VCH1B 
       create VTEMP1B 
       create VC1AB 
       create VCH1AB 
       create VTEMP1AB 
#
       root1=100000.0
       root2=100000.0
       root3=100000.0
       root4=100000.0
       root5=100000.0
       root6=100000.0
       root7=100000.0
       root8=100000.0
       root9=100000.0
       root10=100000.0
       root11=100000.0
       root12=100000.0
#
       eomthresh= 0.00001 
       rootmax=1.0
       maxcycle=100.0
#
       nsp=1.0
       iroot=1.0
       ispdim=1.0
       imaxc=0.0
#
# Compute H_ii and H_iijj H-bar elements
#
       execute sip_barrier
       execute server_barrier
#
       call hbar
#
# Print out initial guess 
# ----------------------- 
       call startvec2
       execute sip_barrier
#
# Initialize some arrays 
# ---------------------- 
       call copy_starttoev # done
#
# Diagonalize some arrays used in the AOLADDER term later 
# ------------------------------------------------------- 
       call CONVER # done
#
# Loop over spdim --> subspace 
# ----------------------------  
       DO spdim
#
          imaxc    += 1.0
          if spdim >= 2
             call copy_toVCactual # done
          endif
#
          call HCmult # not done
#
          call Aconstr # done
#
          call Adiag # done
#
          call SELVEC # done
#
          execute server_barrier
#
          call RESID_ALL # done
#
##          call SYMMETR_A
##          call SYMMETR_B
          execute server_barrier
#
          call REZYDUUM # done
#
          call SCALEVCACT_NEW # done
#
          if residuum > eomthresh
             call ORTHOGON # done
          endif
#
          if spdim < 20
          if residuum < eomthresh
#
             iroot+=1.0
#
             call root_put
             imaxc=0.0
#
             if iroot > rootmax
                iroot-=1.0
                call prnting
                iroot+=1.0
                call AMPL_PRINT # not done
                exit
             endif
#
             EXECUTE SERVER_BARRIER
#
             call AMPL_PRINT # not done
             call start_copy # done
#
             EXECUTE SERVER_BARRIER
#
             call ORTHOGON # done
#
          endif
#
          if residuum > eomthresh
             call prnting
          endif
          if residuum < eomthresh
             iroot+=-1.0
             call prnting
             iroot+=1.0
          endif
#
          endif # spdim < 20  
#
          if spdim == 20
             if residuum < eomthresh
                if iroot == rootmax
                   iroot+=1.0
                   call root_put
                   imaxc=0.0
                   call prnting
                   call AMPL_PRINT
                   exit
                endif
             endif
          endif
#
          nsp+=1.0
          ispdim+=1.0
#
       enddo spdim
#
       if iroot <= rootmax # new
       if iroot < 13.0
#
          call TRUNCATE # done
#
          if residuum > eomthresh
             nsp+=-1.0
             ispdim-=1.0
             call prnting
             nsp+=1.0
             ispdim+=1.0
          endif
#
          if residuum < eomthresh
#
             nsp+=-1.0
             ispdim-=1.0
             call prnting
             call AMPL_PRINT
             nsp+=1.0
             ispdim+=1.0
             iroot+=1.0
             call root_put
#
             EXECUTE SERVER_BARRIER
#
             call start_copy # done
#
             EXECUTE SERVER_BARRIER
#
             do spdim
                if spdim == 20
                  call ORTHOGON # done
                  call start_copy_tr # done
                  EXECUTE SERVER_BARRIER
                endif
             ENDDO spdim
#
          endif
#
       endif
       endif # new
#
       do eomcycle
#
       if iroot > rootmax
       exit
       endif
#
       ispdim=1.0
       execute sip_barrier 
#
       do spdim
#
       if spdim > 12
#
          if spdim == 13
          if residuum < eomthresh
#
          if eomcycle > 1 #### NEW
#
             iroot+=1.0
#
             call root_put
#
          endif    #### NEW
#
             imaxc=0.0
#
             EXECUTE SERVER_BARRIER
#
             call start_copy # done
#
             EXECUTE SERVER_BARRIER
#
             call ORTHOGON # done
#
             call copy_toVCactual # done
#
          endif
          if imaxc > maxcycle
          if residuum > eomthresh
#
             iroot+=1.0
#
             call root_put
#
             if iroot > 12.0
             exit
             endif
#
             imaxc=0.0
#
             EXECUTE SIP_BARRIER
             EXECUTE SERVER_BARRIER
#
             call start_copy # done
#
             EXECUTE SIP_BARRIER
             EXECUTE SERVER_BARRIER
#
             call ORTHOGON # done
#
             call copy_toVCactual # done
#
          endif
          endif
          endif
#
          imaxc+=1.0
#
          if spdim == 13
          if eomcycle > 1 
          if residuum > eomthresh 
          call copy_toVCactual # done
          endif
          endif
          endif
#
          if spdim > 13
          call copy_toVCactual # done
          endif
#
          call HCmult
#
          call Aconstr # done
#
          call Adiag # done
#
          call SELVEC # done
#
          execute server_barrier
#
          call RESID_ALL # done
#
##          call SYMMETR_A
##          call SYMMETR_B
          execute server_barrier
#
          call REZYDUUM # done
#
          call SCALEVCACT_NEW # done
#
          if residuum > eomthresh
          if maxcycle >= imaxc
          call ORTHOGON # done
          endif
          endif
#
          if spdim < 20
#
             if residuum < eomthresh
#
                iroot+=1.0
#
                call root_put
                imaxc=0.0
#
                if iroot > rootmax
                call prnting
                call AMPL_PRINT
                exit
                endif
#
                call AMPL_PRINT
                call start_copy
#
                EXECUTE SERVER_BARRIER
#
                call ORTHOGON # done
#
             endif
             if imaxc > maxcycle
             if residuum > eomthresh
#
                iroot+=1.0
#
                call root_put
                call AMPL_PRINT
#
                if iroot > 12.0
                exit
                endif
#
                imaxc=0.0
#
                if iroot > rootmax
                call prnting
                exit
                endif
#
                EXECUTE SERVER_BARRIER
#
                call ORTHOGON # done
#
             endif
             endif
#
             if residuum > eomthresh
             call prnting
             endif
#
             if residuum < eomthresh
                iroot+=-1.0
                call prnting
                iroot+=1.0
             endif
#
          nsp+=1.0
#
          endif
#
          if spdim == 20
          if residuum < eomthresh
          call AMPL_PRINT
          if iroot == rootmax
          iroot+=1.0
          call root_put
          call prnting
          exit
          endif
          endif
          endif
#
       endif
#
       ispdim+=1.0
#
       enddo spdim
#
             if imaxc > maxcycle
             call AMPL_PRINT
             if iroot > 12.0
             exit
             endif
             endif
#
       if iroot > rootmax
       exit
       endif
#
       EXECUTE SIP_BARRIER
       EXECUTE SERVER_BARRIER
#
       call TRUNCATE # done
#
       call prnting
#
       nsp+=1.0
#
       enddo eomcycle
#
# --------- print out the excitation energies------  
#
#
       totenerg += root1
       execute print_scalar totenerg
#
       execute print_scalar root1
       execute print_scalar root2
       execute print_scalar root3
       execute print_scalar root4
       execute print_scalar root5
       execute print_scalar root6
       execute print_scalar root7
       execute print_scalar root8
       execute print_scalar root9
       execute print_scalar root10
       execute print_scalar root11
       execute print_scalar root12
#
       evfev = 27.2113957
       root1*=evfev
       root2*=evfev
       root3*=evfev
       root4*=evfev
       root5*=evfev
       root6*=evfev
       root7*=evfev
       root8*=evfev
       root9*=evfev
       root10*=evfev
       root11*=evfev
       root12*=evfev
#
       execute print_scalar root1
       execute print_scalar root2
       execute print_scalar root3
       execute print_scalar root4
       execute print_scalar root5
       execute print_scalar root6
       execute print_scalar root7
       execute print_scalar root8
       execute print_scalar root9
       execute print_scalar root10
       execute print_scalar root11
       execute print_scalar root12
#
      #delete VEV
       delete VCE1A
       delete VCE1B
       delete VCACT1A
       delete VCACT1B
       delete VCHACT1A
       delete VCHACT1B
       delete VSTART1A1
       delete VSTART1A2
       delete VSTART1B1
       delete VSTART1B2
       execute sip_barrier
       ENDSIAL EOMCCSD_UHF_AO

#
