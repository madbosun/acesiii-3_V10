#  Copyright (c) 2003-2010 University of Florida
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  The GNU General Public License is included in this distribution
#  in the file COPYRIGHT.
                           SIAL LAMBDA_AO3_MOSYMM    
#
# Working version of UHF based lambda code which computes the VVVV 
# integrals on the fly. No VVVV OR VVVO intermediates are stored. 
# The W1MEBJ intermediates are also not stored rather computed on the 
# fly ==> only W2MEBJ, W1IEMN, and W1MINJ are stored. 
# Many changes have been made to improve scalability. 
#
# BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
#
# Declare indeces 
# --------------- 
#
      index kiter    = 1, cc_iter  
#
      aoindex mu     = 1, norb
      aoindex nu     = 1, norb
      aoindex lambda = 1, norb
      aoindex sigma  = 1, norb
#
      moaindex i = baocc, eaocc
      moaindex i1= baocc, eaocc
      moaindex i2= baocc, eaocc
      moaindex i3= baocc, eaocc
      moaindex i4= baocc, eaocc
#
      moaindex a = bavirt, eavirt
      moaindex a1= bavirt, eavirt
      moaindex a2= bavirt, eavirt
      moaindex a3= bavirt, eavirt
      moaindex a4= bavirt, eavirt
#
      mobindex j = bbocc, ebocc
      mobindex j1= bbocc, ebocc
      mobindex j2= bbocc, ebocc
      mobindex j3= bbocc, ebocc
      mobindex j4= bbocc, ebocc
#
      mobindex b = bbvirt, ebvirt
      mobindex b1= bbvirt, ebvirt
      mobindex b2= bbvirt, ebvirt
      mobindex b3= bbvirt, ebvirt
      mobindex b4= bbvirt, ebvirt
#
      moaindex p = baocc, eavirt
      moaindex p1= baocc, eavirt
      moaindex p2= baocc, eavirt
      moaindex p3= baocc, eavirt
#
      mobindex q = bbocc, ebvirt
      mobindex q1= bbocc, ebvirt
      mobindex q2= bbocc, ebvirt
      mobindex q3= bbocc, ebvirt
# 
# Declare static arrays 
# --------------------- 
#
      distributed t1a_old(a,i) 
      distributed t1a_new(a,i) 
      distributed t1b_old(b,j) 
      distributed t1b_new(b,j) 
#
      distributed Fae_a(a,a1) 
      distributed Fae_b(b,b1) 
      distributed Fme_a(i,a) 
      distributed Fme_b(j,b) 
      distributed Fmi_a(i,i1) 
      distributed Fmi_b(j,j1) 
#
      distributed Gae_a(a,a1) 
      distributed Gae_b(b,b1) 
      distributed Gmi_a(i,i1) 
      distributed Gmi_b(j,j1) 
#
# Arrays used in transformation for AO2 algorithm
# -----------------------------------------------
#
      temp Txixi(mu,i1,lambda,i)
      temp Txxii(mu,nu,i1,i)
      temp Tixxi(i1,nu,lambda,i)
      temp Txipi(mu,i,p,i1)
      temp Tpipi(p1,i,p,i1)
      temp T1pipi(p1,i,p,i1)
      temp Tixai(i,mu,a,i1)
      temp Txaii(mu,a,i,i1)
      temp Tiaai(i,a1,a,i1)
      temp Taaii(a,a1,i,i1)
      temp Txaai(mu,a1,a,i)
      temp Taaai(a2,a,a1,i)
      temp Txxai(mu,nu,a,i)
#
      distributed Vxixi(mu,i1,lambda,i)
      distributed Vxxii(mu,nu,i1,i)
      distributed Viixx(i1,i,mu,nu)
      distributed Vixxi(i1,nu,lambda,i)
      distributed Vxipi(mu,i,p,i1)
      distributed VSpipi(p1,i,p,i1)
      distributed Vixai(i,mu,a,i1)
      distributed Vxaii(mu,a,i,i1)
      distributed Viaai(i,a1,a,i1)
      distributed Vaaii(a,a1,i,i1)
      distributed Vxaai(mu,a1,a,i)
      distributed VSaaai(a2,a,a1,i)
      distributed Vxxai(mu,nu,a,i)
#
      temp Txjxj(mu,j1,lambda,j)
      temp Txxjj(mu,nu,j1,j)
      temp Tjjxx(j1,nu,lambda,j)
      temp Tjxxj(j1,nu,lambda,j)
      temp Txjqj(mu,j,q,j1)
      temp Tqjqj(q1,j,q,j1)
      temp T1qjqj(q1,j,q,j1)
      temp Tjxbj(j,mu,b,j1)
      temp Txbjj(mu,b,j,j1)
      temp Tjbbj(j,b1,b,j1)
      temp Tbbjj(b,b1,j,j1)
      temp Txbbj(mu,b1,b,j)
      temp Tbbbj(b2,b,b1,j)
      temp Txxbj(mu,nu,b,j)
#
      distributed Vxjxj(mu,j1,lambda,j)
      distributed Vxxjj(mu,nu,j1,j)
      distributed Vjjxx(j1,nu,lambda,j)
      distributed Vjxxj(j1,nu,lambda,j)
      distributed Vxjqj(mu,j,q,j1)
      distributed VSqjqj(q1,j,q,j1)
      distributed Vjxbj(j,mu,b,j1)
      distributed Vxbjj(mu,b,j,j1)
      distributed Vjbbj(j,b1,b,j1)
      distributed Vbbjj(b,b1,j,j1)
      distributed Vxbbj(mu,b1,b,j)
      distributed VSbbbj(b2,b,b1,j)
      distributed Vxxbj(mu,nu,b,j)
#
      temp Txixj(mu,i,nu,j)
      temp Txiqj(mu,i,q,j)
      temp Tpiqj(p,i,q,j)
      temp Tiixx(i,i1,mu,nu)
      temp Tiixb(i,i1,mu,b)
      temp Tiibb(i,i1,b1,b)
      temp Txajj(mu,a,j,j1)
      temp Taajj(a,a1,j,j1)
      temp Txabj(mu,a,b,j)
      temp Tixxj(i,mu,nu,j)
      temp Tixbj(i,mu,b,j)
      temp Tiabj(i,a,b,j)
      temp Taabj(a,a1,b,j)
#
      distributed Vxixj(mu,i,nu,j)
      distributed Vxiqj(mu,i,q,j)
      distributed Vpiqj(p,i,q,j)
      distributed Viixb(i,i1,mu,b)
      distributed Viibb(i,i1,b1,b)
      distributed Vxajj(mu,a,j,j1)
      distributed Vaajj(a,a1,j,j1)
      distributed Vxabj(mu,a,b,j)
      distributed Vixxj(i,mu,nu,j)
      distributed Vixbj(i,mu,b,j)
      distributed Viabj(i,a,b,j)
      distributed Vaabj(a,a1,b,j)
#
      temp Txbii(mu,b,i,i1)
      temp Tbbii(b,b1,i,i1)
      temp Tjbii(j,b,i,i1)
      temp Txbai(mu,b,a,i)
      temp Tbbai(b,b1,a,i)
#
      distributed Vxbii(mu,b,i,i1)
      distributed Vbbii(b,b1,i,i1)
      distributed Vjbii(j,b,i,i1)
      distributed Vxbai(mu,b,a,i)
      distributed Vbbai(b,b1,a,i)
#
# End Arrays used in transformation for AO2 algorithm
# --------------------------------------------------- 
#
# Declare temporary arrays 
# ------------------------ 
#
      temp Txxxi(mu,nu,lambda,i)
      temp Txxxj(mu,nu,lambda,j)
      temp Txiix(mu,i,i1,nu)
      temp Txjjx(mu,j,j1,nu)
      temp Txijx(mu,i,j,nu)
      temp Txpii(mu,p,i,i1)
      temp Txqii(mu,q,i,i1)
      temp Tppii(p,p1,i,i1)
      temp Tqqii(q,q1,i,i1)
      temp Txpjj(mu,p,j,j1)
      temp Txqjj(mu,q,j,j1)
      temp Tppjj(p,p1,j,j1)
      temp Tqqjj(q,q1,j,j1)
      temp Tixpi(i,mu,p,i1)
      temp Tippi(i,p,p1,i1)
      temp Tjxqj(j,mu,q,j1)
      temp Tjqqj(j,q,q1,j1)
      temp Tixqj(i,mu,q,j)
      temp Tipqj(i,p,q,j)
#
      temp Vblock(i,i1,i2,i3)
      temp Taiai(p,i,p1,i1)
      temp T1aiai(p,i,p1,i1)
      temp T2aiai(p,i,p1,i1)
      temp T3aiai(p,i,p1,i1)
#
      temp  Tiaia(i,a,i1,a1)
      temp T1iaia(i,a,i1,a1)
      temp T2iaia(i,a,i1,a1)
      temp T3iaia(i,a,i1,a1)
      temp T4iaia(i,a,i1,a1)
      temp TXiaia(i,a,i1,a1)
      temp  Tjbjb(j,b,j1,b1)
      temp T1jbjb(j,b,j1,b1)
      temp T2jbjb(j,b,j1,b1)
      temp T3jbjb(j,b,j1,b1)
      temp T4jbjb(j,b,j1,b1)
      temp TXjbjb(j,b,j1,b1)
      temp  Tiajb(i,a,j,b)
      temp  Tjbia(j,b,i,a) 
      temp T1iajb(i,a,j,b)
      temp T2iajb(i,a,j,b)
# 
      temp Tbjbj(q,j,q1,j1)
      temp T1bjbj(q,j,q1,j1)
      temp T2bjbj(q,j,q1,j1)
      temp T3bjbj(q,j,q1,j1)
      temp Taibj(p,i,q,j)
      temp T1aibj(p,i,q,j)
#
      temp Txxxp(mu,nu,lambda,p)
      temp Txxxq(mu,nu,lambda,q)
      temp Txxpp(mu,nu,p1,p)
      temp Txxqq(mu,nu,q1,q)
      temp Txppp(mu,p2,p1,p)
      temp Txqqq(mu,q2,q1,q)
      temp Txpqq(mu,p,q1,q)
      temp Tpppp(p3,p2,p1,p)
      temp T1pppp(p3,p2,p1,p)
      temp T2pppp(p3,p2,p1,p)
      temp TSpppp(p3,p2,p1,p)
      temp Tqqqq(q3,q2,q1,q)
      temp T1qqqq(q3,q2,q1,q)
      temp T2qqqq(q3,q2,q1,q)
      temp TSqqqq(q3,q2,q1,q)
      temp Tppqq(p1,p,q1,q)
      temp T1ppqq(p1,p,q1,q)
      temp Tqqpp(q1,q,p1,p)
      temp T1qqpp(q1,q,p1,p)
      temp T2qqpp(q1,q,p1,p)
      temp Tixxx(i,mu,nu,sigma)
      temp Tipxx(i,p,nu,sigma)
      temp Tipqx(i,p,q,sigma)
      temp Tipqq(i,p,q,q1)
#
      temp tmp1_aiai(a,i,a1,i1) 
      temp tmp2_aiai(a,i,a1,i1) 
      temp tmp1_bjbj(b,j,b1,j1) 
      temp tmp2_bjbj(b,j,b1,j1) 
      temp tmp1_aibj(a,i,b,j) 
#
      temp Tai(a,i) 
      temp T1ai(a,i) 
      temp Tbj(b,j) 
      temp T1bj(b,j) 
#
      temp Taa(a,a1) 
      temp T1aa(a,a1) 
      temp Tbb(b,b1) 
      temp T1bb(b,b1) 
      temp Tae_a(a,a1) 
      temp Tae_b(b,b1) 
#
      temp Tia(i,a) 
      temp T1ia(i,a) 
      temp T2ia(i,a) 
      temp T3ia(i,a) 
      temp T4ia(i,a) 
      temp Tjb(j,b) 
      temp T1jb(j,b) 
      temp T2jb(j,b) 
      temp T3jb(j,b) 
      temp T4jb(j,b) 
      temp Tme_a(i,a) 
      temp Tme_b(j,b) 
#
      temp Tii(i,i1) 
      temp T1ii(i,i1) 
      temp Tjj(j,j1) 
      temp T1jj(j,j1) 
      temp Tmi_a(i,i1) 
      temp Tmi_b(j,j1) 
#
      temp Taiii(a,i,i1,i2) 
      temp T1aiii(a,i,i1,i2) 
#
      temp  Tiiii(i,i1,i2,i3) 
      temp T1iiii(i,i1,i2,i3) 
      temp T2iiii(i,i1,i2,i3) 
      temp TXiiii(i,i1,i2,i3) 
#
      temp  Tjjjj(j,j1,j2,j3) 
      temp T1jjjj(j,j1,j2,j3) 
      temp T2jjjj(j,j1,j2,j3) 
      temp TXjjjj(j,j1,j2,j3) 
      temp  Tbjjj(b,j,j1,j2) 
      temp T1bjjj(b,j,j1,j2) 
#
      temp  Tiijj(i,i1,j2,j3) 
      temp T1iijj(i,i1,j2,j3) 
#
      temp  tmp_aa(a,a1) 
      temp tmp1_aa(a,a1) 
      temp  tmp_ii(i,i1) 
      temp tmp1_ii(i,i1) 
#
      temp  Tiiai(i,i1,a,i2) 
      temp T1iiai(i,i1,a,i2) 
      temp T2iiai(i,i1,a,i2) 
      temp T3iiai(i,i1,a,i2) 
      temp T4iiai(i,i1,a,i2) 
      temp TSiiai(i,i1,a,i2) 
#
      temp  tmp_bb(b,b1) 
      temp tmp1_bb(b,b1) 
      temp  tmp_jj(j,j1) 
      temp tmp1_jj(j,j1) 
#
      temp  Tjjbj(j,j1,b,j2) 
      temp T1jjbj(j,j1,b,j2) 
      temp T2jjbj(j,j1,b,j2) 
      temp T3jjbj(j,j1,b,j2) 
      temp T4jjbj(j,j1,b,j2) 
      temp TSjjbj(j,j1,b,j2) 
# 
      temp T1aaai(a,a1,a2,i)  
      temp T2aaai(a,a1,a2,i)  
      temp Taaaa(a,a1,a2,a3)  
      temp T1aaaa(a,a1,a2,a3)  
      temp T2aaaa(a,a1,a2,a3)  
      temp T3aaaa(a,a1,a2,a3)  
      temp T4aaaa(a,a1,a2,a3)  
#
      temp T1bbbj(b,b1,b2,j)  
      temp T2bbbj(b,b1,b2,j)  
      temp Tbbbb(b,b1,b2,b3)  
      temp T1bbbb(b,b1,b2,b3)  
#
      temp Taabb(a,a1,b,b1)  
      temp T1aabb(a,a1,b,b1)  
#
      temp R1aiai(a,i,a1,i1) 
      temp R2aiai(a,i,a1,i1) 
      temp R3aiai(a,i,a1,i1) 
      temp R4aiai(a,i,a1,i1) 
      temp R1bjbj(b,j,b1,j1) 
      temp R2bjbj(b,j,b1,j1) 
      temp R3bjbj(b,j,b1,j1) 
      temp R4bjbj(b,j,b1,j1) 
      temp R1aibj(a,i,b,j) 
      temp R2aibj(a,i,b,j) 
      temp R3aibj(a,i,b,j) 
      temp R4aibj(a,i,b,j) 
#
      temp T1iaai(i,a,a1,i1) 
      temp T2iaai(i,a,a1,i1) 
      temp T1jbbj(j,b,b1,j1) 
      temp T2jbbj(j,b,b1,j1) 
      temp T1iabj(i,a,b,j) 
      temp T2iabj(i,a,b,j) 
      temp Tjjpp(j,j1,p,p1) 
      temp T1jjpp(j,j1,p,p1) 
      temp T2jjpp(j,j1,p,p1) 
      temp  Tiiqq(i,i1,q,q1) 
      temp T1iiqq(i,i1,q,q1) 
      temp T2iiqq(i,i1,q,q1) 
      temp  Tjjai(j,j1,a,i) 
      temp T1jjai(j,j1,a,i) 
      temp T2jjai(j,j1,a,i) 
      temp  Tiibj(i,i1,b,j) 
      temp T1iibj(i,i1,b,j) 
      temp T2iibj(i,i1,b,j) 
      temp  Tjbai(j,b,a,i)  
      temp T1jbai(j,b,a,i)  
      temp T2jbai(j,b,a,i)  
      temp  Taijj(a,i,j,j1) 
      temp T1aijj(a,i,j,j1) 
      temp Tqqip(a,i,b,b1)  
#
      temp T1iibb(i,i1,b,b1) 
      temp  Tjjaa(j,j1,a,a1) 
      temp T1jjaa(j,j1,a,a1) 
      temp  Tjjii(j,j1,i,i1) 
#
      temp Taibb(a,i,b,b1)
      temp T1aibb(a,i,b,b1)
      temp Tbjaa(b,j,a,a1)
      temp T1bjaa(b,j,a,a1)
      temp T1jbii(j,b,i,i1)
      temp Tiajj(i,a,j,j1)
      temp T1iajj(i,a,j,j1)
      temp  Taiaa(a1,i,a2,a) 
      temp T1aiaa(a1,i,a2,a) 
      temp  Tbjbb(b1,j,b2,b) 
      temp T1bjbb(b1,j,b2,b) 
#
      temp Tijib(i,j,i1,b) 
      temp Tibab(i,b,a,b1) 
      temp Tijab(i,j,a,b) 
      temp Tijaj(i,j2,a1,j1) 
      temp Tajab(a1,j1,a,b) 
#
# Declare distributed arrays 
# -------------------------- 
#
      distributed Iiiii(i,i1,i2,i3)
      distributed Ijjjj(j,j1,j2,j3)
      distributed Iiijj(i,i1,j,j1)
      distributed Xiiia(i,i1,i2,a) 
      distributed Xiibj(i,i1,b,j) 
      distributed Xiajj(i,a,j,j1) 
      distributed Xjjjb(j,j1,j2,b) 
      distributed Xjbii(j,b,i,i1)  
      distributed Xjjai(j,j1,a,i)   
      distributed T2new_aa(a,i,a1,i1)
      distributed T2new_bb(b,j,b1,j1)
      distributed T2new_ab(a,i,b,j)
      distributed T2old_aa(a,i,a1,i1)
      distributed T2old_bb(b,j,b1,j1)
      distributed T2old_ab(a,i,b,j)
      distributed Tau_aa(a,i,a1,i1)
      distributed Tau_bb(b,j,b1,j1)
      distributed Tau_ab(a,i,b,j)
      distributed Taup_aa(a,i,a1,i1)
      distributed Taup_bb(b,j,b1,j1)
      distributed Taup_ab(a,i,b,j)
#
      distributed X1ia(i,a) 
      distributed X2ia(i,a) 
      distributed X3ii(i,i1) 
      distributed Y1aa(a,a1) 
      distributed Y2aa(a,a1) 
      distributed Y3ai(a,i) 
#
# Declare served arrays 
# --------------------- 
#
      served AOINT(mu,nu,lambda,sigma) 
#
# ---------------------------------------
#
     temp TXaiai(a,i,nu,i1)
     temp TYaiai(a,i,a1,i1)
     temp TXbjbj(b,j,nu,j1)
     temp TYbjbj(b,j,b1,j1)
     temp TXaibj(a,i,nu,j)
     temp TYaibj(a,i,b,j)
#
      distributed F1me_a(i,a)
      distributed F1me_b(j,b)
#
      distributed F1ae_a(a,a1)
      distributed F1ae_b(b,b1)
#
      distributed F1mi_a(i,i1)
      distributed F1mi_b(j,j1)
#
      distributed W1minj_aa(i,i1,i2,i3)
      distributed W1minj_bb(j,j1,j2,j3)
      distributed W1minj_ab(i,i1,j,j1)
#
      distributed W2mebj_aa(i,a,a1,i1)
      distributed W2mebj_bb(j,b,b1,j1)
      distributed W2mebj_ab(i,a,b,j)
      distributed W2mebj_ba(j,b,a,i)
      distributed W2mjbe_ab(i,i1,b,b1)
      distributed W2mjbe_ba(j,j1,a,a1)
#
      distributed W1imen_aa(i,i1,a,i2)
      distributed W1imen_bb(j,j1,b,j2)
      distributed W1imen_ab(i,i1,b,j)
      distributed W1imen_ba(j,j1,a,i)
#
      distributed l1a_old(i,a) 
      distributed l1a_new(i,a) 
      distributed l1b_old(j,b) 
      distributed l1b_new(j,b) 
      distributed L2old_aa(i,a,i1,a1) 
      distributed L2new_aa(i,a,i1,a1) 
      distributed L2old_bb(j,b,j1,b1) 
      distributed L2new_bb(j,b,j1,b1) 
      distributed L2old_ab(i,a,j,b) 
      distributed L2new_ab(i,a,j,b) 
#
# Procedure specific arrays used used: 
# ------------------------------------ 
#
# Local arrays: 
# ------------- 
#
      local ZAA(i,mu,i1,a1) 
      local ZAB(i,mu,j,b) 
      local ZBB(j,mu,j1,b1) 
      local Liaix(i,a,i1,nu) 
      local Ljbjx(j,b,j1,nu) 
      local Liajx(i,a,j,nu) 
#
      local Laaaa(a3,a2,a,a1) 
      local Lbbbb(b3,b2,b,b1) 
      local Laabb(a,a1,b,b1) 
      local Lbbaa(b,b1,a,a1) 
      local Liaaa(i,a1,a3,a2) 
      local Ljbbb(j,b1,b3,b2) 
      local Liabb(i,a1,b,b1) 
      local Ljbaa(j,b1,a,a1) 
# 
      local Liiia(i,i2,i1,a2) 
      local Liiii(i,i2,i1,i3) 
      local Ljjjb(j,j2,j1,b2) 
      local Ljjjj(j,j2,j1,j3) 
      local Liijb(i,i1,j,b1) 
      local Liajj(i,a1,j,j1) 
      local Liijj(i,i1,j,j1) 
      local L1iijj(i,i1,j2,j1) 
      local L1iajj(i1,a,j1,j2) 
      local L1iiii(i,i3,i2,i4) 
      local L1iiia(i4,i2,i3,a) 
      local L1jjjj(j,j3,j2,j4) 
      local L1jjjb(j4,j2,j3,b) 
      local L1jjii(j,j1,i2,i1) 
      local L1jbii(j1,b,i1,i2) 
#
      temp Tbbaa(b,b1,a,a1) 
      temp Tjbaa(j,b1,a2,a3) 
      temp Tjbbb(j,b1,b2,b3) 
      temp Tiabb(i,a1,b2,b3) 
      temp Tiaaa(i,a1,a2,a3) 
      temp Tiijb(i,i1,j,b) 
      temp Tixia(i,mu,i1,a1) 
      temp Tixjb(i,mu,j,b) 
      temp Tjxjb(j,mu,j1,b) 
      temp Tixix(i,mu,i1,nu) 
      temp Tixjx(i,mu,j,nu) 
      temp Tjxjx(j,mu,j1,nu) 
      temp Yaa(i,mu,i1,nu) 
      temp Yab(i,mu,j,nu) 
      temp Ybb(j,mu,j1,nu) 
      temp Tiaix(i,a,i1,nu)  
      temp Tiajx(i,a,j1,nu)  
      temp Tjbjx(j,b,j1,nu)  
      temp Tjbix(j,b,i,mu) 
      temp Tiiia(i,i2,i1,a)
      temp Tjjjb(j,j2,j1,b)
      temp Liaia(i,a,i1,a1)  
      temp Ljbjb(j,b,j1,b1)  
      temp Tjibi(j,i,b,i1) 
      temp Tbiba(b,i,b1,a) 
      temp Tjija(j,i,j1,a) 
      temp Tjaba(j,a,b,a1) 
      temp Tjiba(j,i,b,a) 
      temp Taaia(a,a1,i,a2) 
      temp Tbbjb(b,b1,j,b2) 
      temp Viajb(i,a,j,b) 
      temp Vaajb(a,a1,j,b) 
      temp Viabb(i,a,b,b1) 
      temp Tabji(a,b,j,i) 
      temp Tbjai(b,j,a,i) 
      temp T1bjai(b,j,a,i) 
#
# Distributed arrays 
# ------------------ 
# 
      distributed Z2AA(i,mu,i1,nu) 
      distributed Z2AB(i,mu,j1,nu) 
      distributed Z2BB(j,mu,j1,nu) 
      distributed L2AO_aa(i,mu,i1,nu) 
      distributed L2AO_ab(i,mu,j1,nu) 
      distributed L2AO_bb(j,mu,j1,nu) 
#
# Declare scalars 
# --------------- 
#
      scalar etemp
      scalar etemp1 
      scalar esum
      scalar esuma
      scalar esumb
      scalar esumab
      scalar ecorraa
      scalar ecorrbb
      scalar ecorrab
      scalar ecorrT
      scalar ecrit 
      scalar eold 
      scalar ediff 
      scalar mp2_energy
#
# Arrays/Scalars used exclusively in DIIS procedure. 
# -------------------------------------------------- 
#
       served D0iaia(i,a,i1,a1)  
       served D1iaia(i,a,i1,a1)  
       served D2iaia(i,a,i1,a1)  
       served D3iaia(i,a,i1,a1)  
       served D4iaia(i,a,i1,a1)  
       served D5iaia(i,a,i1,a1)  
#
       served D0jbjb(j,b,j1,b1)  
       served D1jbjb(j,b,j1,b1)  
       served D2jbjb(j,b,j1,b1)  
       served D3jbjb(j,b,j1,b1)  
       served D4jbjb(j,b,j1,b1)  
       served D5jbjb(j,b,j1,b1)  
#
       served D0iajb(i,a,j,b)  
       served D1iajb(i,a,j,b)  
       served D2iajb(i,a,j,b)  
       served D3iajb(i,a,j,b)  
       served D4iajb(i,a,j,b)  
       served D5iajb(i,a,j,b)  
#
       distributed D0ia(i,a)  
       distributed D1ia(i,a)  
       distributed D2ia(i,a)  
       distributed D3ia(i,a)  
       distributed D4ia(i,a)  
       distributed D5ia(i,a)  
#
       distributed D0jb(j,b)   
       distributed D1jb(j,b)   
       distributed D2jb(j,b)   
       distributed D3jb(j,b)   
       distributed D4jb(j,b)   
       distributed D5jb(j,b)   
#
       distributed e1ia(i,a)  
       distributed e2ia(i,a)  
       distributed e3ia(i,a)  
       distributed e4ia(i,a)  
       distributed e5ia(i,a)  
#
       distributed e1jb(j,b)   
       distributed e2jb(j,b)   
       distributed e3jb(j,b)   
       distributed e4jb(j,b)   
       distributed e5jb(j,b)   
#
       served e1iaia(i,a,i1,a1)  
       served e2iaia(i,a,i1,a1)  
       served e3iaia(i,a,i1,a1)  
       served e4iaia(i,a,i1,a1)  
       served e5iaia(i,a,i1,a1)  
#
       served e1jbjb(j,b,j1,b1)  
       served e2jbjb(j,b,j1,b1)  
       served e3jbjb(j,b,j1,b1)  
       served e4jbjb(j,b,j1,b1)  
       served e5jbjb(j,b,j1,b1)  
#
       served e1iajb(i,a,j,b)  
       served e2iajb(i,a,j,b)  
       served e3iajb(i,a,j,b)  
       served e4iajb(i,a,j,b)  
       served e5iajb(i,a,j,b)  
#
       scalar b11
       scalar b12
       scalar b13
       scalar b14
       scalar b15
       scalar b16
       scalar b17
       scalar b18
       scalar b19
       scalar b110
#
       scalar b22
       scalar b23
       scalar b24
       scalar b25
       scalar b26
       scalar b27
       scalar b28
       scalar b29
       scalar b210
#
       scalar b33
       scalar b34
       scalar b35
       scalar b36
       scalar b37
       scalar b38
       scalar b39
       scalar b310
       scalar b44
       scalar b45
       scalar b46
       scalar b47
       scalar b48
       scalar b49
       scalar b410
#
       scalar b55
       scalar b56
       scalar b57
       scalar b58
       scalar b59
       scalar b510
#
       scalar b66
       scalar b67
       scalar b68
       scalar b69
       scalar b610
#
       scalar b77
       scalar b78
       scalar b79
       scalar b710
#
       scalar b88
       scalar b89
       scalar b810
#
       scalar b99
       scalar b910
#
       scalar b1010
#
       scalar Tb11
       scalar Tb12
       scalar Tb13
       scalar Tb14
       scalar Tb15
       scalar Tb16
       scalar Tb17
       scalar Tb18
       scalar Tb19
       scalar Tb110
#
       scalar Tb22
       scalar Tb23
       scalar Tb24
       scalar Tb25
       scalar Tb26
       scalar Tb27
       scalar Tb28
       scalar Tb29
       scalar Tb210
#
       scalar Tb33
       scalar Tb34
       scalar Tb35
       scalar Tb36
       scalar Tb37
       scalar Tb38
       scalar Tb39
       scalar Tb310
       scalar Tb44
       scalar Tb45
       scalar Tb46
       scalar Tb47
       scalar Tb48
       scalar Tb49
       scalar Tb410
#
       scalar Tb55
       scalar Tb56
       scalar Tb57
       scalar Tb58
       scalar Tb59
       scalar Tb510
#
       scalar Tb66
       scalar Tb67
       scalar Tb68
       scalar Tb69
       scalar Tb610
#
       scalar Tb77
       scalar Tb78
       scalar Tb79
       scalar Tb710
#
       scalar Tb88
       scalar Tb89
       scalar Tb810
#
       scalar Tb99
       scalar Tb910
#
       scalar Tb1010
#
       scalar c1 
       scalar c2 
       scalar c3 
       scalar c4 
       scalar c5 
       scalar c6 
       scalar c7 
       scalar c8 
       scalar c9 
       scalar c10  
#
#    ------------------------------------------------------------------------
#
     PROC READ_2EL
#
#    ------------------------------------------------------------------------
#
      create VSpipi
      create Vaaii
      create Viaai
      create VSaaai
      create VSqjqj
      create Vbbjj
      create Vjbbj
      create VSbbbj
      create Vbbii
      create Vjbii
      create Vbbai
      create Vpiqj
      create Vaajj
      create Viabj
      create Vaabj
#
      execute server_barrier
      execute list_to_blocks                VSpipi
      execute list_to_blocks                Vaaii
      execute list_to_blocks                Viaai
      execute list_to_blocks                VSaaai
      execute list_to_blocks                VSqjqj
      execute list_to_blocks                Vbbjj
      execute list_to_blocks                Vjbbj
      execute list_to_blocks                VSbbbj
      execute list_to_blocks                Vbbii
      execute list_to_blocks                Vjbii
      execute list_to_blocks                Vbbai
      execute list_to_blocks                Vpiqj
      execute list_to_blocks                Vaajj
      execute list_to_blocks                Viabj
      execute list_to_blocks                Vaabj
#
#    ------------------------------------------------------------------------
#
     ENDPROC READ_2EL
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
     PROC WRITE_2EL
#
#    ------------------------------------------------------------------------
#
      execute server_barrier
      execute blocks_to_list                VSpipi(p,i,p1,i1)
      execute blocks_to_list                Vaaii
      execute blocks_to_list                Viaai
      execute blocks_to_list                VSaaai
      execute blocks_to_list                VSqjqj(q,j,q1,j1)
      execute blocks_to_list                Vbbjj
      execute blocks_to_list                Vjbbj
      execute blocks_to_list                VSbbbj
      execute blocks_to_list                Vbbii
      execute blocks_to_list                Vjbii
      execute blocks_to_list                Vbbai
      execute blocks_to_list                Vpiqj(p,i,q,j)
      execute blocks_to_list                Vaajj
      execute blocks_to_list                Viabj
      execute blocks_to_list                Vaabj
#
#    ------------------------------------------------------------------------
#
     ENDPROC WRITE_2EL
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
      PROC TAUAA 
#     ----------
#
      PARDO a, i, a1, i1 
#
            GET T2old_aa(a,i,a1,i1) 
#
            GET t1a_old(a1,i1) 
            GET t1a_old(a1,i) 
            GET t1a_old(a,i1) 
            GET t1a_old(a,i) 
# 
            tai(a1,i1)            = t1a_old(a1,i1) 
            tmp1_aiai(a,i,a1,i1)  = t1a_old(a,i)^tai(a1,i1)  
            tai(a1,i)             = t1a_old(a1,i) 
            tmp2_aiai(a,i,a1,i1)  = t1a_old(a,i1)^tai(a1,i)  
#
            tmp1_aiai(a,i,a1,i1) += T2old_aa(a,i,a1,i1) 
            tmp1_aiai(a,i,a1,i1) -= tmp2_aiai(a,i,a1,i1)  
            PUT Tau_aa(a,i,a1,i1) = tmp1_aiai(a,i,a1,i1)  
#
      ENDPARDO a, i, a1, i1 
#
      ENDPROC TAUAA 
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
      PROC TAUBB 
#     ----------
#
      PARDO b, j, b1, j1 
#
            GET T2old_bb(b,j,b1,j1) 
            GET t1b_old(b1,j1) 
            GET t1b_old(b1,j) 
            GET t1b_old(b,j1) 
            GET t1b_old(b,j) 
#
            tbj(b1,j1)            = t1b_old(b1,j1) 
            tmp1_bjbj(b,j,b1,j1)  = t1b_old(b,j)^tbj(b1,j1)  
            tbj(b1,j)             = t1b_old(b1,j) 
            tmp2_bjbj(b,j,b1,j1)  = t1b_old(b,j1)^tbj(b1,j)  
#
            tmp1_bjbj(b,j,b1,j1) += T2old_bb(b,j,b1,j1) 
            tmp1_bjbj(b,j,b1,j1) -= tmp2_bjbj(b,j,b1,j1)  
            PUT Tau_bb(b,j,b1,j1) = tmp1_bjbj(b,j,b1,j1)  
#
      ENDPARDO b, j, b1, j1 
#
      ENDPROC TAUBB 
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
      PROC TAUAB 
#     ----------
#
      PARDO a, i, b, j 
#
            GET T2old_ab(a,i,b,j) 
            GET t1a_old(a,i) 
            GET t1b_old(b,j) 
#
            tmp1_aibj(a,i,b,j)  = t1a_old(a,i)^t1b_old(b,j)  
            tmp1_aibj(a,i,b,j) += T2old_ab(a,i,b,j) 
            PUT Tau_ab(a,i,b,j) = tmp1_aibj(a,i,b,j)  
#
      ENDPARDO a, i, b, j 
#
      ENDPROC TAUAB 
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
      PROC TAUPAA 
#     -----------
#
      PARDO a, i, a1, i1 
#
            GET T2old_aa(a,i,a1,i1) 
            GET t1a_old(a1,i1) 
            GET t1a_old(a1,i) 
            GET t1a_old(a,i1) 
            GET t1a_old(a,i) 
#
            tai(a1,i1)             = t1a_old(a1,i1) 
            tmp1_aiai(a,i,a1,i1)   = t1a_old(a,i)^tai(a1,i1)  
            tai(a1,i)              = t1a_old(a1,i) 
            tmp2_aiai(a,i,a1,i1)   = t1a_old(a,i1)^tai(a1,i)  
            tmp1_aiai(a,i,a1,i1)  -= tmp2_aiai(a,i,a1,i1) 
            tmp1_aiai(a,i,a1,i1)  *= 0.5  
            tmp1_aiai(a,i,a1,i1)  += T2old_aa(a,i,a1,i1) 
            PUT Taup_aa(a,i,a1,i1) = tmp1_aiai(a,i,a1,i1)  
#
      ENDPARDO a, i, a1, i1 
#
      ENDPROC TAUPAA 
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
      PROC TAUPBB 
#     -----------
#
      PARDO b, j, b1, j1 
#
            GET T2old_bb(b,j,b1,j1) 
            GET t1b_old(b1,j1) 
            GET t1b_old(b1,j) 
            GET t1b_old(b,j1) 
            GET t1b_old(b,j) 
#
            tbj(b1,j1)             = t1b_old(b1,j1) 
            tmp1_bjbj(b,j,b1,j1)   = t1b_old(b,j)^tbj(b1,j1)  
            tbj(b1,j)              = t1b_old(b1,j) 
            tmp2_bjbj(b,j,b1,j1)   = t1b_old(b,j1)^tbj(b1,j)  
            tmp1_bjbj(b,j,b1,j1)  -= tmp2_bjbj(b,j,b1,j1) 
            tmp1_bjbj(b,j,b1,j1)  *= 0.5  
            tmp1_bjbj(b,j,b1,j1)  += T2old_bb(b,j,b1,j1) 
            PUT Taup_bb(b,j,b1,j1) = tmp1_bjbj(b,j,b1,j1)  
#
      ENDPARDO b, j, b1, j1 
#
      ENDPROC TAUPBB 
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
      PROC TAUPAB 
#     -----------
#
      PARDO a, i, b, j 
#
            GET T2old_ab(a,i,b,j) 
            GET t1a_old(a,i) 
            GET t1b_old(b,j) 
# 
            tmp1_aibj(a,i,b,j)   = t1a_old(a,i)^t1b_old(b,j)  
            tmp1_aibj(a,i,b,j)  *= 0.5  
            tmp1_aibj(a,i,b,j)  += T2old_ab(a,i,b,j) 
            PUT Taup_ab(a,i,b,j) = tmp1_aibj(a,i,b,j)  
#
      ENDPARDO a, i, b, j 
#
      ENDPROC TAUPAB 
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
      PROC TAU 
#
           CALL TAUAA 
           CALL TAUBB 
           CALL TAUAB 
#
      ENDPROC TAU 
#
      PROC TAUP 
#
           CALL TAUPAA 
           CALL TAUPBB 
           CALL TAUPAB 
#
      ENDPROC TAUP 
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
      PROC CREAT1INTER 
#     ---------------- 
#
         CREATE Fme_a
         CREATE Fme_b
#
         CREATE F1ae_a
         CREATE F1ae_b
#
         CREATE F1mi_a
         CREATE F1mi_b
#
         CREATE D0ia
         CREATE D1ia
         CREATE D2ia
         CREATE D3ia
         CREATE D4ia
         CREATE D5ia
#
         CREATE D0jb
         CREATE D1jb
         CREATE D2jb
         CREATE D3jb
         CREATE D4jb
         CREATE D5jb
#
         CREATE e1ia
         CREATE e2ia
         CREATE e3ia
         CREATE e4ia
         CREATE e5ia
#
         CREATE e1jb
         CREATE e2jb
         CREATE e3jb
         CREATE e4jb
         CREATE e5jb
#
      ENDPROC CREAT1INTER 
#     ------------------- 
#
      PROC CREAT2INTER 
#     ---------------- 
#
         CREATE W1minj_aa
         CREATE W1minj_bb
         CREATE W1minj_ab
#
         CREATE W2mebj_aa
         CREATE W2mebj_bb
         CREATE W2mebj_ab
         CREATE W2mebj_ba
         CREATE W2mjbe_ab
         CREATE W2mjbe_ba
#
         CREATE W1imen_aa
         CREATE W1imen_bb
         CREATE W1imen_ab
         CREATE W1imen_ba
#
      ENDPROC CREAT2INTER 
#     ------------------- 
#
      PROC CREATLAMBDAOLD 
#     ------------------- 
#
         CREATE l1a_old
         CREATE l1b_old
         CREATE L2old_aa
         CREATE L2old_bb
         CREATE L2old_ab
#
      ENDPROC CREATLAMBDAOLD  
#     ----------------------  
#
      PROC CREATLAMBDANEW 
#     ------------------- 
#
         CREATE l1a_new
         CREATE l1b_new
         CREATE L2new_aa
         CREATE L2new_bb
         CREATE L2new_ab
#
         CREATE Gae_a 
         CREATE Gae_b 
         CREATE Gmi_a 
         CREATE Gmi_b 
#
      ENDPROC CREATLAMBDANEW  
#     ---------------------- 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
#
      PROC F1AEA
#     ----------
#
      PARDO a, a1 
#
         Tae_a(a,a1) = 0.0
#
         DO i 
#
            GET t1a_old(a,i) 
            GET Fme_a(i,a1) 
#
            Taa(a,a1)    = t1a_old(a,i)*Fme_a(i,a1)  
            Taa(a,a1)   *= 0.5  
            Tae_a(a,a1) -=  Taa(a,a1)  
#
            DO a2 
#
               GET VSaaai(a1,a,a2,i) 
               GET t1a_old(a2,i) 
#
               Taa(a,a1)    = VSaaai(a1,a,a2,i)*t1a_old(a2,i)  
               Tae_a(a,a1) +=  Taa(a,a1)  
#
               DO i1 
#
                  GET Taup_aa(a,i,a2,i1) 
                  GET VSpipi(a1,i1,a2,i) 
#
                  Taa(a,a1)    = Taup_aa(a,i,a2,i1)*VSpipi(a1,i1,a2,i) 
                  Taa(a,a1)   *= 0.5 
                  Tae_a(a,a1) +=  Taa(a,a1)  
#
               ENDDO i1 
#
            ENDDO a2 
#
         ENDDO i 
#
         DO j 
         DO b 
#
            GET Vaabj(a1,a,b,j) 
            GET t1b_old(b,j) 
#
            Taa(a,a1)    = Vaabj(a1,a,b,j)*t1b_old(b,j) 
            Tae_a(a,a1) +=  Taa(a,a1)  
#
            DO i 
#
               GET Taup_ab(a,i,b,j) 
               GET Vpiqj(a1,i,b,j) 
#
               Taa(a,a1)    = Taup_ab(a,i,b,j)*Vpiqj(a1,i,b,j) 
               Tae_a(a,a1) -=  Taa(a,a1)  
#
            ENDDO i 
#
         ENDDO b 
         ENDDO j 
#
         PUT F1ae_a(a,a1) = Tae_a(a,a1) 
#
      ENDPARDO a, a1 
#
      ENDPROC F1AEA
#     -------------
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
#
      PROC F1AEB
#     ----------
#
      PARDO b, b1 
#
         Tae_b(b,b1) = 0.0
#
         DO j 
#
            GET t1b_old(b,j) 
            GET Fme_b(j,b1) 
#
            Tbb(b,b1)    = t1b_old(b,j)*Fme_b(j,b1)  
            Tbb(b,b1)   *= 0.5  
            Tae_b(b,b1) -=  Tbb(b,b1)  
#
            DO b2 
#
               GET VSbbbj(b1,b,b2,j) 
               GET t1b_old(b2,j) 
#
               Tbb(b,b1)    = VSbbbj(b1,b,b2,j)*t1b_old(b2,j) 
               Tae_b(b,b1) +=  Tbb(b,b1)  
#
               DO j1 
#
                  GET Taup_bb(b,j,b2,j1) 
                  GET VSqjqj(b1,j1,b2,j) 
#
                  Tbb(b,b1)    = Taup_bb(b,j,b2,j1)*VSqjqj(b1,j1,b2,j) 
                  Tbb(b,b1)   *= 0.5 
                  Tae_b(b,b1) +=  Tbb(b,b1)  
#
               ENDDO j1 
#
            ENDDO b2 
#
         ENDDO j 
#
         DO i 
         DO a 
#
            GET Vbbai(b1,b,a,i) 
            GET t1a_old(a,i) 
#
            Tbb(b,b1)    = Vbbai(b1,b,a,i)*t1a_old(a,i) 
            Tae_b(b,b1) +=  Tbb(b,b1)  
#
            DO j 
#
               GET Taup_ab(a,i,b,j) 
               GET Vpiqj(a,i,b1,j) 
#
               Tbb(b,b1)    = Taup_ab(a,i,b,j)*Vpiqj(a,i,b1,j) 
               Tae_b(b,b1) -=  Tbb(b,b1)  
#
            ENDDO j 
#
         ENDDO a 
         ENDDO i 
#
         PUT F1ae_b(b,b1) = Tae_b(b,b1) 
#
      ENDPARDO b, b1 
#
      ENDPROC F1AEB
#     -------------
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
#
      PROC F1AE
#     --------
         CALL F1AEA 
         CALL F1AEB 
      ENDPROC F1AE
#     ------------ 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
#
      PROC FMEA
#     ----------
#
      PARDO i, a, i1, a1  
#
            GET VSpipi(a,i,a1,i1) 
            GET t1a_old(a1,i1) 
#
            Tia(i,a)        = VSpipi(a,i,a1,i1)*t1a_old(a1,i1) 
            PUT Fme_a(i,a) += Tia(i,a) 
#
      ENDPARDO i, a, i1, a1  
#
      PARDO i, a, j, b  
#
            GET Vpiqj(a,i,b,j) 
            GET t1b_old(b,j) 
#
            Tia(i,a)        = Vpiqj(a,i,b,j)*t1b_old(b,j) 
            PUT Fme_a(i,a) += Tia(i,a) 
#
      ENDPARDO i, a, j, b  
# 
      ENDPROC FMEA
#     -------------
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
#
      PROC FMEB
#     ----------
#
      PARDO j, b, j1, b1  
#
            GET VSqjqj(b,j,b1,j1) 
            GET t1b_old(b1,j1) 
#
            Tjb(j,b)        = VSqjqj(b,j,b1,j1)*t1b_old(b1,j1) 
            PUT Fme_b(j,b) += Tjb(j,b) 
#
      ENDPARDO j, b, j1, b1  
#
      PARDO j, b, i, a  
# 
            GET Vpiqj(a,i,b,j) 
            GET t1a_old(a,i) 
#
            Tjb(j,b)        = Vpiqj(a,i,b,j)*t1a_old(a,i) 
            PUT Fme_b(j,b) += Tjb(j,b) 
#
      ENDPARDO j, b, i, a  
# 
      ENDPROC FMEB
#     -------------
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
#
      PROC FME
#     ----------
         CALL FMEA
         CALL FMEB
      ENDPROC FME
#     ----------- 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
#
      PROC F1MIA
#     ----------
#
      PARDO i1, i, a  
#
            GET t1a_old(a,i) 
            GET Fme_a(i1,a) 
#
            Tii(i1,i)         = Fme_a(i1,a)*t1a_old(a,i) 
            Tii(i1,i)        *= 0.5 
            PUT F1mi_a(i1,i) += Tii(i1,i) 
#
            DO i2 
#
               GET VSpipi(a,i2,i,i1) 
               GET t1a_old(a,i2) 
#
               Tii(i1,i)         = VSpipi(a,i2,i,i1)*t1a_old(a,i2) 
               PUT F1mi_a(i1,i) += Tii(i1,i) 
#
               DO a2 
#
                  GET VSpipi(a2,i1,a,i2) 
                  GET Taup_aa(a2,i,a,i2) 
#
                  Tii(i1,i)         = VSpipi(a2,i1,a,i2)*Taup_aa(a2,i,a,i2) 
                  Tii(i1,i)        *= 0.5 
                  PUT F1mi_a(i1,i) += Tii(i1,i) 
#
               ENDDO a2 
#
            ENDDO i2 
#
      ENDPARDO i1, i, a  
#
      PARDO i1, i, j, b  
#
            GET Vpiqj(i,i1,b,j) 
            GET t1b_old(b,j) 
#
            Tii(i1,i)         = Vpiqj(i,i1,b,j)*t1b_old(b,j) 
            PUT F1mi_a(i1,i) += Tii(i1,i) 
#
            DO a 
#
               GET Vpiqj(a,i1,b,j) 
               GET Taup_ab(a,i,b,j)
#
               Tii(i1,i)         = Taup_ab(a,i,b,j)*Vpiqj(a,i1,b,j) 
               PUT F1mi_a(i1,i) += Tii(i1,i) 
#
            ENDDO a 
#
      ENDPARDO i1, i, j, b  
#
      ENDPROC F1MIA
#     -------------
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
#
      PROC F1MIB
#     ----------
#
      PARDO j1, j, b  
#
            GET t1b_old(b,j) 
            GET Fme_b(j1,b) 
#
            Tjj(j1,j)         = Fme_b(j1,b)*t1b_old(b,j) 
            Tjj(j1,j)        *= 0.5 
            PUT F1mi_b(j1,j) += Tjj(j1,j) 
#
            DO j2 
#
               GET VSqjqj(b,j2,j,j1) 
               GET t1b_old(b,j2) 
#
               Tjj(j1,j)         = VSqjqj(b,j2,j,j1)*t1b_old(b,j2) 
               PUT F1mi_b(j1,j) += Tjj(j1,j) 
#
               DO b2 
#
                  GET VSqjqj(b2,j1,b,j2) 
                  GET Taup_bb(b2,j,b,j2) 
#
                  Tjj(j1,j)         = VSqjqj(b2,j1,b,j2)*Taup_bb(b2,j,b,j2) 
                  Tjj(j1,j)        *= 0.5 
                  PUT F1mi_b(j1,j) += Tjj(j1,j) 
#
               ENDDO b2 
#
            ENDDO j2 
#
      ENDPARDO j1, j, b  
#
      PARDO j1, j, i, a  
#
            GET Vpiqj(a,i,j,j1) 
            GET t1a_old(a,i) 
#
            Tjj(j1,j)         = Vpiqj(a,i,j,j1)*t1a_old(a,i) 
            PUT F1mi_b(j1,j) += Tjj(j1,j) 
#
            DO b 
#
               GET Vpiqj(a,i,b,j1) 
               GET Taup_ab(a,i,b,j)
#
               Tjj(j1,j)         = Taup_ab(a,i,b,j)*Vpiqj(a,i,b,j1) 
               PUT F1mi_b(j1,j) += Tjj(j1,j) 
#
            ENDDO b 
#
      ENDPARDO j1, j, i, a  
#
      ENDPROC F1MIB
#     -------------
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
#
      PROC F1MI 
#     ----------
         CALL F1MIA 
         CALL F1MIB 
      ENDPROC F1MI 
#     ------------ 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
#
      PROC GAEA
#     --------- 
#
      PARDO a, a1 
#
            Taa(a,a1) = 0.0 
#
            DO i 
#
               DO i1 
               DO a2 
#
                  GET T2old_aa(a1,i1,a2,i) 
                  GET L2old_aa(i1,a,i,a2) 
#
                  T1aa(a,a1)  = L2old_aa(i1,a,i,a2)*T2old_aa(a1,i1,a2,i)  
                  T1aa(a,a1) *= 0.5 
                  Taa(a,a1)  -= T1aa(a,a1) 
#
               ENDDO a2 
               ENDDO i1 
#
               DO j 
               DO b 
#
                  GET T2old_ab(a1,i,b,j) 
                  GET L2old_ab(i,a,j,b) 
#
                  T1aa(a,a1) = L2old_ab(i,a,j,b)*T2old_ab(a1,i,b,j)  
                  Taa(a,a1) -= T1aa(a,a1) 
#
               ENDDO b 
               ENDDO j 
#
            ENDDO i 
# 
            PUT Gae_a(a,a1) += Taa(a,a1) 
#
      ENDPARDO a, a1   
#
      ENDPROC GAEA
#     ------------ 
#
      PROC GAEB
#     --------- 
#
      PARDO b, b1 
#
            Tbb(b,b1) = 0.0 
#
            DO j 
#
               DO j1 
               DO b2 
#
                  GET T2old_bb(b1,j,b2,j1) 
                  GET L2old_bb(j,b,j1,b2) 
#
                  T1bb(b,b1)  = L2old_bb(j,b,j1,b2)*T2old_bb(b1,j,b2,j1)  
                  T1bb(b,b1) *= 0.5 
                  Tbb(b,b1)  -= T1bb(b,b1) 
#
               ENDDO b2 
               ENDDO j1 
#
               DO i 
               DO a 
#
                  GET T2old_ab(a,i,b1,j) 
                  GET L2old_ab(i,a,j,b) 
#
                  T1bb(b,b1) = L2old_ab(i,a,j,b)*T2old_ab(a,i,b1,j)  
                  Tbb(b,b1) -= T1bb(b,b1) 
#
               ENDDO a 
               ENDDO i 
#
            ENDDO j 
# 
            PUT Gae_b(b,b1) += Tbb(b,b1) 
#
      ENDPARDO b, b1 
#
      ENDPROC GAEB
#     ------------ 
#
      PROC GAE 
#     -------- 
         CALL GAEA 
         CALL GAEB 
      ENDPROC GAE 
#     ----------- 
#
      PROC GMIA 
#     --------- 
#
      PARDO i1, i 
#
            Gmi_a(i1,i) = 0.0 
#
      ENDPARDO i1, i 
      execute sip_barrier Gmi_a 
#
      PARDO a, a1, i, i2  
#
            GET L2old_aa(i,a,i2,a1) 
#
            DO i1  
#
               GET T2old_aa(a,i1,a1,i2) 
#
               Tii(i1,i)        = T2old_aa(a,i1,a1,i2)*L2old_aa(i,a,i2,a1)   
               Tii(i1,i)       *= 0.5  
               PUT Gmi_a(i1,i) += Tii(i1,i) 
#               
            ENDDO i1  
#
      ENDPARDO a, a1, i, i2  
#
      PARDO a, b, i, j  
#
            GET L2old_ab(i,a,j,b) 
#
            DO i1 
#
               GET T2old_ab(a,i1,b,j) 
#
               Tii(i1,i)        = T2old_ab(a,i1,b,j)*L2old_ab(i,a,j,b)   
               PUT Gmi_a(i1,i) += Tii(i1,i) 
#               
            ENDDO i1 
#
      ENDPARDO a, b, i, j  
#
      ENDPROC GMIA 
#     ------------ 
#
      PROC GMIB 
#     --------- 
#
      PARDO j1, j 
#
            Gmi_b(j1,j) = 0.0 
#
      ENDPARDO j1, j 
      execute sip_barrier Gmi_b 
#
      PARDO b, b1, j, j2  
#
            GET L2old_bb(j,b,j2,b1) 
#
            DO j1 
#
               GET T2old_bb(b,j1,b1,j2) 
#
               Tjj(j1,j)        = T2old_bb(b,j1,b1,j2)*L2old_bb(j,b,j2,b1)   
               Tjj(j1,j)       *= 0.5  
               PUT Gmi_b(j1,j) += Tjj(j1,j) 
#               
            ENDDO j1 
#
      ENDPARDO b, b1, j, j2  
#
      PARDO b, a, j, i  
#
            GET L2old_ab(i,a,j,b) 
#
            DO j1 
#
               GET T2old_ab(a,i,b,j1) 
#
               Tjj(j1,j)        = T2old_ab(a,i,b,j1)*L2old_ab(i,a,j,b)   
               PUT Gmi_b(j1,j) += Tjj(j1,j) 
#               
            ENDDO j1 
#
      ENDPARDO b, a, j, i  
#
      ENDPROC GMIB 
#     ------------ 
#
      PROC GMI 
#     -------- 
         CALL GMIA 
         CALL GMIB 
      ENDPROC GMI 
#     ----------- 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
# 
      PROC W1minjAA 
#
      PARDO i2, i, i3, i1 
#
            GET VSpipi(i2,i,i3,i1) 
            Tiiii(i2,i,i3,i1)  = VSpipi(i2,i,i3,i1)  
            TXiiii(i2,i1,i3,i) = 0.0  
#
            DO a 
#
               GET VSpipi(a,i3,i,i2) 
               GET t1a_old(a,i1) 
# 
               T1iiii(i2,i,i3,i1)  = VSpipi(a,i3,i,i2)*t1a_old(a,i1) 
               T2iiii(i2,i1,i3,i)  = T1iiii(i2,i,i3,i1) 
#
               Tiiii(i2,i,i3,i1)  += T1iiii(i2,i,i3,i1) 
               TXiiii(i2,i1,i3,i) -= T2iiii(i2,i1,i3,i) 
#
               DO a1
#
                  GET Tau_aa(a,i,a1,i1)
                  GET VSpipi(a,i2,a1,i3)
#
                  T1iiii(i2,i,i3,i1) = VSpipi(a,i2,a1,i3)*Tau_aa(a,i,a1,i1)
                  T1iiii(i2,i,i3,i1)*= 0.5
#
                  Tiiii(i2,i,i3,i1) += T1iiii(i2,i,i3,i1)
#
               ENDDO a1
#
            ENDDO a 
#
            PUT W1minj_aa(i2,i,i3,i1) += Tiiii(i2,i,i3,i1) 
            PUT W1minj_aa(i2,i1,i3,i) += TXiiii(i2,i1,i3,i) 
#
      ENDPARDO i2, i, i3, i1 
#
      ENDPROC W1minjAA 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
# 
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
      PROC W1minjBB 
#
      PARDO j, j1, j2, j3 
#
            GET VSqjqj(j2,j,j3,j1) 
            Tjjjj(j2,j,j3,j1)  = VSqjqj(j2,j,j3,j1) 
            TXjjjj(j2,j1,j3,j) = 0.0  
#
            DO b 
#
               GET VSqjqj(b,j3,j,j2) 
               GET t1b_old(b,j1) 
#
               T1jjjj(j2,j,j3,j1)  = VSqjqj(b,j3,j,j2)*t1b_old(b,j1) 
               T2jjjj(j2,j1,j3,j)  = T1jjjj(j2,j,j3,j1)  
#
               Tjjjj(j2,j,j3,j1)  += T1jjjj(j2,j,j3,j1) 
               TXjjjj(j2,j1,j3,j) -= T2jjjj(j2,j1,j3,j) 
#
               DO b1  
#
                  GET Tau_bb(b,j,b1,j1) 
                  GET VSqjqj(b,j2,b1,j3) 
#
                  T1jjjj(j2,j,j3,j1)  = VSqjqj(b,j2,b1,j3)*Tau_bb(b,j,b1,j1) 
                  T1jjjj(j2,j,j3,j1) *= 0.5 
                  Tjjjj(j2,j,j3,j1)  += T1jjjj(j2,j,j3,j1) 
#
               ENDDO b1 
#
            ENDDO b  
#
            PUT W1minj_bb(j2,j,j3,j1) += Tjjjj(j2,j,j3,j1) 
            PUT W1minj_bb(j2,j1,j3,j) += TXjjjj(j2,j1,j3,j) 
#
      ENDPARDO j, j1, j2, j3 
#
      ENDPROC W1minjBB 
# 
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
# 
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
      PROC W1minjAB 
#
      PARDO i, i1, j, j1 
#
            GET Vpiqj(i1,i,j1,j) 
            Tiijj(i1,i,j1,j) = Vpiqj(i1,i,j1,j) 
#
            DO b  
#
               GET Vpiqj(i,i1,b,j1) 
               GET t1b_old(b,j) 

               T1iijj(i1,i,j1,j) = Vpiqj(i,i1,b,j1)*t1b_old(b,j) 
               Tiijj(i1,i,j1,j) += T1iijj(i1,i,j1,j) 
#
            ENDDO b   
#
            DO a 
#
               GET Vpiqj(a,i1,j,j1) 
               GET t1a_old(a,i) 
# 
               T1iijj(i1,i,j1,j) = Vpiqj(a,i1,j,j1)*t1a_old(a,i) 
               Tiijj(i1,i,j1,j) += T1iijj(i1,i,j1,j) 
#
               DO b  
#
                  GET Tau_ab(a,i,b,j)
                  GET Vpiqj(a,i1,b,j1) 
#
                  T1iijj(i1,i,j1,j) = Tau_ab(a,i,b,j)*Vpiqj(a,i1,b,j1) 
                  Tiijj(i1,i,j1,j) += T1iijj(i1,i,j1,j) 
#
                  IF a == 1 
#
                     GET Vpiqj(i,i1,b,j1) 
                     GET t1b_old(b,j) 

                     T1iijj(i1,i,j1,j) = Vpiqj(i,i1,b,j1)*t1b_old(b,j) 
                     Tiijj(i1,i,j1,j) += T1iijj(i1,i,j1,j) 
#
                  ENDIF # a == 1 
#
               ENDDO b 
#
            ENDDO a 
#
            PUT W1minj_ab(i1,i,j1,j) += Tiijj(i1,i,j1,j)  
#
      ENDPARDO i, i1, j, j1 
#
      ENDPROC W1minjAB 
# 
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
      PROC W1MINJ 
#
           CALL W1minjAA 
           CALL W1minjAB 
           CALL W1minjBB 
#
      ENDPROC W1MINJ 
# 
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
#
# SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS 
#
# In the procedures W1MEBJAA, W1MEBJBB, W1MEBJAB, and W1MEBJBA these  
# intermediates are formed as temporary arrarys. The contribution to the 
# outout arrays is computed directly from these temporary arrays so 
# that the array is never stored.   
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
      PROC W1MEBJAA 
#     -------------
#
      PARDO i1, a1, a, i 
#
            GET Viaai(i1,a1,a,i) 
            GET Vaaii(a,a1,i1,i) 
#
            Tiaai(i1,a1,a,i)  = Vaaii(a,a1,i1,i) 
            Tiaai(i1,a1,a,i) -= Viaai(i1,a1,a,i) 
            Tiaai(i1,a1,a,i) *= -1.0 
#
            DO i2  
#
               GET VSpipi(a1,i1,i,i2) 
               GET t1a_old(a,i2) 
#
               T1iaai(i1,a1,a,i)  = VSpipi(a1,i1,i,i2)*t1a_old(a,i2)  
               Tiaai(i1,a1,a,i)  -= T1iaai(i1,a1,a,i)  
#
            ENDDO i2  
#
            DO a2  
#
               GET VSaaai(a2,a,a1,i1)  
               GET t1a_old(a2,i) 
#
               T2iaai(i,a,a1,i1)  = VSaaai(a2,a,a1,i1)*t1a_old(a2,i) 
               T1iaai(i1,a1,a,i)  = T2iaai(i,a,a1,i1) 
#
               Tiaai(i1,a1,a,i)  += T1iaai(i1,a1,a,i)  
#
               DO i2 
#
                  GET VSpipi(a2,i2,a1,i1) 
                  GET T2old_aa(a2,i,a,i2) 
                  GET t1a_old(a,i2) 
#
                  Taiai(a1,i2,a2,i1)  = VSpipi(a2,i2,a1,i1) 
                  tai(a,i2)           = t1a_old(a,i2) 
                  T1aiai(a2,i,a,i2)   = t1a_old(a2,i)^tai(a,i2) 
                  T1aiai(a2,i,a,i2)  += T2old_aa(a2,i,a,i2) 
                  T1iaai(i1,a1,a,i)   = T1aiai(a2,i,a,i2)*Taiai(a1,i2,a2,i1) 
                  Tiaai(i1,a1,a,i)   -= T1iaai(i1,a1,a,i)  
#
               ENDDO i2  
#
            ENDDO a2  
#
            DO b
            DO j
#
               GET Vpiqj(a1,i1,b,j)
               GET T2old_ab(a,i,b,j)
#
               T1iaai(i1,a1,a,i)  = Vpiqj(a1,i1,b,j)*T2old_ab(a,i,b,j)
               Tiaai(i1,a1,a,i)  += T1iaai(i1,a1,a,i)
#
            ENDDO j
            ENDDO b
#
# Compute contribution to L1a_new  
# ------------------------------- 
#
            GET l1a_old(i,a)
            Tia(i1,a1)          = Tiaai(i1,a1,a,i)*l1a_old(i,a)
            PUT l1a_new(i1,a1) += Tia(i1,a1)
#
# Compute contributions to L2new_aa  
# ---------------------------------  
#
            DO i2
            DO a2
#
               GET L2old_aa(i2,a2,i,a)
#
               T1iaia(i2,a2,i1,a1)        = L2old_aa(i2,a2,i,a)*Tiaai(i1,a1,a,i)
               T2iaia(i2,a1,i1,a2)        = T1iaia(i2,a2,i1,a1)
               T2iaia(i2,a1,i1,a2)       *= -1.0  
               T3iaia(i1,a2,i2,a1)        = T1iaia(i2,a2,i1,a1)
               T3iaia(i1,a2,i2,a1)       *= -1.0  
               T4iaia(i1,a1,i2,a2)        = T1iaia(i2,a2,i1,a1)
#
               PUT L2new_aa(i2,a2,i1,a1) += T1iaia(i2,a2,i1,a1) 
               PUT L2new_aa(i2,a1,i1,a2) += T2iaia(i2,a1,i1,a2) 
               PUT L2new_aa(i1,a2,i2,a1) += T3iaia(i1,a2,i2,a1)  
               PUT L2new_aa(i1,a1,i2,a2) += T4iaia(i1,a1,i2,a2)  
#
            ENDDO a2
            ENDDO i2
#
# Compute contributions to L2new_ab 
# --------------------------------- 
#
            DO j
            DO b
#
               GET L2old_ab(i,a,j,b)
               T1iajb(i1,a1,j,b)      = L2old_ab(i,a,j,b)*Tiaai(i1,a1,a,i)
               PUT L2new_ab(i1,a1,j,b) += T1iajb(i1,a1,j,b)
#
            ENDDO b
            ENDDO j
#
#           PUT W1MEBJ_AA(i1,a1,a,i) += Tiaai(i1,a1,a,i)  
# 
      ENDPARDO i1, a1, a, i 
#
      ENDPROC W1MEBJAA 
#     ----------------
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
      PROC W1MEBJBB 
#     ------------
#
      PARDO j1, b1, b, j 
#
            GET Vjbbj(j1,b1,b,j) 
            GET Vbbjj(b,b1,j1,j) 
#
            Tjbbj(j1,b1,b,j)  = Vbbjj(b,b1,j1,j) 
            Tjbbj(j1,b1,b,j) -= Vjbbj(j1,b1,b,j) 
            Tjbbj(j1,b1,b,j) *= -1.0 
#
            DO b2  
#
               GET VSbbbj(b2,b,b1,j1)  
               GET t1b_old(b2,j) 
#
               T2jbbj(j,b,b1,j1)  = VSbbbj(b2,b,b1,j1)*t1b_old(b2,j) 
               T1jbbj(j1,b1,b,j)  = T2jbbj(j,b,b1,j1) 
#
#              Tjbbb(j1,b1,b,b2)  = VSbbbj(b2,b,b1,j1)  
#              T1jbbj(j1,b1,b,j)  = Tjbbb(j1,b1,b,b2)*t1b_old(b2,j) 
#
               Tjbbj(j1,b1,b,j)  += T1jbbj(j1,b1,b,j)  
#
            ENDDO b2  
#
            DO j2 
#
               GET VSqjqj(b1,j1,j,j2) 
               GET t1b_old(b,j2) 
#
               T1jbbj(j1,b1,b,j)  = VSqjqj(b1,j1,j,j2)*t1b_old(b,j2)  
               Tjbbj(j1,b1,b,j)  -= T1jbbj(j1,b1,b,j)  
#
               DO b2 
#
                  GET VSqjqj(b2,j2,b1,j1) 
                  GET T2old_bb(b2,j,b,j2) 
                  GET t1b_old(b2,j) 
#
                  tbj(b2,j)           = t1b_old(b2,j) 
                  T1bjbj(b2,j,b,j2)   = t1b_old(b,j2)^tbj(b2,j) 
                  T1bjbj(b2,j,b,j2)  += t2old_bb(b2,j,b,j2) 
                  T1jbbj(j1,b1,b,j)   = T1bjbj(b2,j,b,j2)*VSqjqj(b2,j2,b1,j1) 
                  Tjbbj(j1,b1,b,j)   -= T1jbbj(j1,b1,b,j)  
#
               ENDDO b2  
#
            ENDDO j2  
#
            DO a
            DO i
#
               GET Vpiqj(a,i,b1,j1)
               GET T2old_ab(a,i,b,j)
#
               T1jbbj(j1,b1,b,j)  = Vpiqj(a,i,b1,j1)*T2old_ab(a,i,b,j)
               Tjbbj(j1,b1,b,j)  += T1jbbj(j1,b1,b,j)
#
            ENDDO i
            ENDDO a
#
# Compute contribution to L1b_new  
# ------------------------------- 
#
            GET l1b_old(j,b)
#
            Tjb(j1,b1)          = Tjbbj(j1,b1,b,j)*l1b_old(j,b)
            PUT l1b_new(j1,b1) += Tjb(j1,b1)
#
# Compute contributions to L2new_bb  
# ---------------------------------  
#
            DO j2
            DO b2
#
               GET L2old_bb(j2,b2,j,b)
#
               T1jbjb(j2,b2,j1,b1)  = L2old_bb(j2,b2,j,b)*Tjbbj(j1,b1,b,j)
               T2jbjb(j2,b1,j1,b2)  = T1jbjb(j2,b2,j1,b1)
               T2jbjb(j2,b1,j1,b2) *= -1.0  
               T3jbjb(j1,b2,j2,b1)  = T1jbjb(j2,b2,j1,b1)
               T3jbjb(j1,b2,j2,b1) *= -1.0  
               T4jbjb(j1,b1,j2,b2)  = T1jbjb(j2,b2,j1,b1)
#
               PUT L2new_bb(j2,b2,j1,b1) += T1jbjb(j2,b2,j1,b1) 
               PUT L2new_bb(j2,b1,j1,b2) += T2jbjb(j2,b1,j1,b2) 
               PUT L2new_bb(j1,b2,j2,b1) += T3jbjb(j1,b2,j2,b1)  
               PUT L2new_bb(j1,b1,j2,b2) += T4jbjb(j1,b1,j2,b2)  
#
            ENDDO b2
            ENDDO j2
#
# Compute contributions to L2new_ab 
# --------------------------------- 
#
            DO i
            DO a
#
               GET L2old_ab(i,a,j,b)
#
               T1iajb(i,a,j1,b1)        = L2old_ab(i,a,j,b)*Tjbbj(j1,b1,b,j)
               PUT L2new_ab(i,a,j1,b1) += T1iajb(i,a,j1,b1)
#
            ENDDO a
            ENDDO i
#
#           PUT W1MEBJ_BB(j1,b1,b,j) += Tjbbj(j1,b1,b,j)  
#
      ENDPARDO j1, b1, b, j 
#
      ENDPROC W1MEBJBB 
#     ---------------
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
      PROC W1MEBJAB 
#     -------------
#
      PARDO i, a, b, j 
#
            GET Viabj(i,a,b,j) 
            Tiabj(i,a,b,j) = Viabj(i,a,b,j) 
#
            DO b1 
#
               GET Vbbai(b1,b,a,i) 
               GET t1b_old(b1,j) 
#
               Tjbai(j,b,a,i)  = Vbbai(b1,b,a,i)*t1b_old(b1,j) 
               T1iabj(i,a,b,j) = Tjbai(j,b,a,i) 
#
#              Tiabb(i,a,b,b1) = Vbbai(b1,b,a,i) 
#              T1iabj(i,a,b,j) = Tiabb(i,a,b,b1)*t1b_old(b1,j) 
#
               Tiabj(i,a,b,j) += T1iabj(i,a,b,j) 
#
            ENDDO b1 
#
            DO j1 
#
               GET Vpiqj(a,i,j,j1) 
               GET t1b_old(b,j1) 
#
               T1iabj(i,a,b,j) = Vpiqj(a,i,j,j1)*t1b_old(b,j1) 
               Tiabj(i,a,b,j) -= T1iabj(i,a,b,j) 
#
               DO b1 
#
                  GET t2old_bb(b1,j,b,j1)
                  GET Vpiqj(a,i,b1,j1) 
                  GET t1b_old(b1,j) 
# 
                  tbj(b,j1)          = t1b_old(b,j1) 
                  T2bjbj(b1,j,b,j1)  = t1b_old(b1,j)^tbj(b,j1) 
                  T2bjbj(b1,j,b,j1) += T2old_bb(b1,j,b,j1) 
                  T1iabj(i,a,b,j)    = T2bjbj(b1,j,b,j1)*Vpiqj(a,i,b1,j1) 
                  Tiabj(i,a,b,j)    -= T1iabj(i,a,b,j) 
#
               ENDDO b1 
#
            ENDDO j1 
#
            DO a1
            DO i1
#
               GET T2old_ab(a1,i1,b,j) 
               GET VSpipi(a1,i1,a,i)
#
               T1iabj(i,a,b,j) = T2old_ab(a1,i1,b,j)*VSpipi(a1,i1,a,i)
               Tiabj(i,a,b,j) += T1iabj(i,a,b,j)
#
            ENDDO i1
            ENDDO a1
#
# Compute contribution to l1a_new 
# ------------------------------- 
#
            GET l1b_old(j,b)
            T1ia(i,a)                = Tiabj(i,a,b,j)*l1b_old(j,b)
            PUT l1a_new(i,a) += T1ia(i,a) 
#
# Compute contributions to L2new_aa 
# --------------------------------- 
#
            DO i1  
            DO a1  
#
               GET L2old_ab(i1,a1,j,b)
#
               T1iaia(i1,a1,i,a)  = L2old_ab(i1,a1,j,b)*Tiabj(i,a,b,j)
               T2iaia(i1,a,i,a1)  = T1iaia(i1,a1,i,a)
               T2iaia(i1,a,i,a1) *= -1.0  
               T3iaia(i,a1,i1,a)  = T1iaia(i1,a1,i,a)
               T3iaia(i,a1,i1,a) *= -1.0  
               T4iaia(i,a,i1,a1)  = T1iaia(i1,a1,i,a)
#
               PUT L2new_aa(i1,a1,i,a) += T1iaia(i1,a1,i,a) 
               PUT L2new_aa(i1,a,i,a1) += T2iaia(i1,a,i,a1) 
               PUT L2new_aa(i,a1,i1,a) += T3iaia(i,a1,i1,a) 
               PUT L2new_aa(i,a,i1,a1) += T4iaia(i,a,i1,a1) 
#
            ENDDO a1  
            ENDDO i1  
#
# Compute contributions to L2new_ab 
# --------------------------------- 
#
            DO j1
            DO b1
#
               GET L2old_bb(j,b,j1,b1)
#
               T1iajb(i,a,j1,b1)        = L2old_bb(j,b,j1,b1)*Tiabj(i,a,b,j)
               PUT L2new_ab(i,a,j1,b1) += T1iajb(i,a,j1,b1)
#
            ENDDO b1
            ENDDO j1
#
#           PUT W1MEBJ_AB(i,a,b,j) += Tiabj(i,a,b,j)  
#
      ENDPARDO i, a, b, j 
#
      ENDPROC W1MEBJAB 
#     ----------------
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
      PROC W1MEBJBA  
#     -------------
#
      PARDO j, b, a, i  
# 
            GET Viabj(i,a,b,j) 
            Tjbai(j,b,a,i) = Viabj(i,a,b,j) 
#
            DO a1  
#
               GET Vaabj(a1,a,b,j) 
               GET t1a_old(a1,i) 
#
               Tiabj(i,a,b,j)  = Vaabj(a1,a,b,j)*t1a_old(a1,i) 
               T1jbai(j,b,a,i) = Tiabj(i,a,b,j) 
#
#              Tjbaa(j,b,a,a1) = Vaabj(a1,a,b,j)  
#              T1jbai(j,b,a,i) = Tjbaa(j,b,a,a1)*t1a_old(a1,i) 
#
               Tjbai(j,b,a,i) += T1jbai(j,b,a,i) 
#
            ENDDO a1 
#
            DO i1 
#
               GET Vpiqj(i,i1,b,j) 
               GET t1a_old(a,i1) 
#
               T1jbai(j,b,a,i) = Vpiqj(i,i1,b,j)*t1a_old(a,i1) 
               Tjbai(j,b,a,i) -= T1jbai(j,b,a,i) 
#
               DO a1 
#
                  GET T2old_aa(a1,i,a,i1)  
                  GET Vpiqj(a1,i1,b,j) 
                  GET t1a_old(a1,i) 
# 
                  tai(a,i1)          = t1a_old(a,i1) 
                  T2aiai(a1,i,a,i1)  = t1a_old(a1,i)^tai(a,i1) 
                  T2aiai(a1,i,a,i1) += T2old_aa(a1,i,a,i1) 
                  T1jbai(j,b,a,i)    = Vpiqj(a1,i1,b,j)*T2aiai(a1,i,a,i1) 
                  Tjbai(j,b,a,i)    -= T1jbai(j,b,a,i) 
#
               ENDDO a1 
#
            ENDDO i1 
#
            DO b1
            DO j1
#
               GET T2old_ab(a,i,b1,j1)
               GET VSqjqj(b1,j1,b,j)
#
               T1jbai(j,b,a,i) = T2old_ab(a,i,b1,j1)*VSqjqj(b1,j1,b,j)
               Tjbai(j,b,a,i) += T1jbai(j,b,a,i)
#
            ENDDO j1
            ENDDO b1
#
# Compute contribution to l1b_new 
# ------------------------------- 
#
            GET l1a_old(i,a)
#
            T1jb(j,b)         = Tjbai(j,b,a,i)*l1a_old(i,a)
            PUT l1b_new(j,b) += T1jb(j,b) 
#
# Compute contributions to L2new_bb 
# --------------------------------- 
#
            DO j1  
            DO b1  
#
               GET L2old_ab(i,a,j1,b1)
#
               T1jbjb(j1,b1,j,b)  = L2old_ab(i,a,j1,b1)*Tjbai(j,b,a,i)
               T2jbjb(j1,b,j,b1)  = T1jbjb(j1,b1,j,b)
               T2jbjb(j1,b,j,b1) *= -1.0  
               T3jbjb(j,b1,j1,b)  = T1jbjb(j1,b1,j,b)
               T3jbjb(j,b1,j1,b) *= -1.0  
               T4jbjb(j,b,j1,b1)  = T1jbjb(j1,b1,j,b)
#
               PUT L2new_bb(j1,b1,j,b) += T1jbjb(j1,b1,j,b) 
               PUT L2new_bb(j1,b,j,b1) += T2jbjb(j1,b,j,b1) 
               PUT L2new_bb(j,b1,j1,b) += T3jbjb(j,b1,j1,b) 
               PUT L2new_bb(j,b,j1,b1) += T4jbjb(j,b,j1,b1) 
#
            ENDDO b1  
            ENDDO j1  
#
# Compute contributions to L2new_ab 
# --------------------------------- 
#
            DO i1
            DO a1
#
               GET L2old_aa(i,a,i1,a1)
#
               T1iajb(i1,a1,j,b)        = L2old_aa(i,a,i1,a1)*Tjbai(j,b,a,i)  
               PUT L2new_ab(i1,a1,j,b) += T1iajb(i1,a1,j,b)
#
            ENDDO a1
            ENDDO i1
#
#           PUT W1MEBJ_BA(j,b,a,i) += Tjbai(j,b,a,i)  
#
      ENDPARDO j, b, a, i 
#
      ENDPROC W1MEBJBA  
#     ---------------
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# Compute contributions from 'Wmjbe'. This needs to be checked 
#
      PROC W1MJBEab
#     -------------
#
      PARDO i1, b1, b, i 
#
            GET Vbbii(b,b1,i1,i) 
            Tiiqq(i1,i,b,b1) = Vbbii(b,b1,i1,i) 
#
            DO a1 
#
               GET Vbbai(b1,b,a1,i1) 
               GET t1a_old(a1,i) 
#
               T1iiqq(i1,i,b,b1) = Vbbai(b1,b,a1,i1)*t1a_old(a1,i)
               Tiiqq(i1,i,b,b1) += T1iiqq(i1,i,b,b1) 
#
            ENDDO a1  
#
            DO j1 
#
               GET Vpiqj(i,i1,b1,j1) 
               GET t1b_old(b,j1) 
# 
               T1iiqq(i1,i,b,b1) = Vpiqj(i,i1,b1,j1)*t1b_old(b,j1) 
               Tiiqq(i1,i,b,b1) -= T1iiqq(i1,i,b,b1) 
#
               DO a1 
#
                  GET T2old_ab(a1,i,b,j1) 
                  GET Vpiqj(a1,i1,b1,j1) 
                  GET t1a_old(a1,i) 
#
                  Taibj(a1,i,b,j1)   = t1a_old(a1,i)^t1b_old(b,j1) 
                  T1aibj(a1,i,b,j1)  = T2old_ab(a1,i,b,j1)  
                  T1aibj(a1,i,b,j1) += Taibj(a1,i,b,j1)  
                  T1iiqq(i1,i,b,b1)  = T1aibj(a1,i,b,j1)*Vpiqj(a1,i1,b1,j1) 
                  Tiiqq(i1,i,b,b1)  -= T1iiqq(i1,i,b,b1) 
#
               ENDDO a1 
#
            ENDDO j1 
#
            Tiiqq(i1,i,b,b1) *= -1.0 
#
# Compute the contribution to L2new_ab 
# ------------------------------------ 
#
            DO j 
            DO a
#
               GET L2old_ab(i,a,j,b)
#
               T1iajb(i1,a,j,b1)        = Tiiqq(i1,i,b,b1)*L2old_ab(i,a,j,b)
               PUT L2new_ab(i1,a,j,b1) += T1iajb(i1,a,j,b1) # VFL
#
            ENDDO a
            ENDDO j
#
#           PUT W1mjbe_ab(i1,i,b,b1) += Tiiqq(i1,i,b,b1) 
#
      ENDPARDO i1, b1, b, i 
#
      ENDPROC W1MJBEab
#     ---------------
#
      PROC W1MJBEba
#     -------------
#
      PARDO j1, a1, a, j 
#
            GET Vaajj(a,a1,j1,j) 
            Tjjpp(j1,j,a,a1) = Vaajj(a,a1,j1,j) 
#
            DO b1 
#
               GET Vaabj(a1,a,b1,j1) 
               GET t1b_old(b1,j) 
#
               T1jjpp(j1,j,a,a1) = Vaabj(a1,a,b1,j1)*t1b_old(b1,j)
               Tjjpp(j1,j,a,a1) += T1jjpp(j1,j,a,a1) 
#
            ENDDO b1 
#
            DO i1 
#
               GET Vpiqj(a1,i1,j,j1) 
               GET t1a_old(a,i1) 
#
               T1jjpp(j1,j,a,a1) = Vpiqj(a1,i1,j,j1)*t1a_old(a,i1) 
               Tjjpp(j1,j,a,a1) -= T1jjpp(j1,j,a,a1) 
#
               DO b1 
#
                  GET T2old_ab(a,i1,b1,j) 
                  GET Vpiqj(a1,i1,b1,j1) 
                  GET t1b_old(b1,j) 
# 
                  Taibj(a,i1,b1,j)   = t1b_old(b1,j)^t1a_old(a,i1) 
                  T1aibj(a,i1,b1,j)  = T2old_ab(a,i1,b1,j)  
                  T1aibj(a,i1,b1,j) += Taibj(a,i1,b1,j)  
                  T1jjpp(j1,j,a,a1) = T1aibj(a,i1,b1,j)*Vpiqj(a1,i1,b1,j1) 
                  Tjjpp(j1,j,a,a1) -= T1jjpp(j1,j,a,a1) 
#
               ENDDO b1 
#
            ENDDO i1 
#
            Tjjpp(j1,j,a,a1) *= -1.0 
#
# Compute the contribution to L2new_ab 
# ------------------------------------ 
#
            DO i
            DO b
#
               GET L2old_ab(i,a,j,b)
#
               T1iajb(i,a1,j1,b)        = L2old_ab(i,a,j,b)*Tjjpp(j1,j,a,a1)
               PUT L2new_ab(i,a1,j1,b) += T1iajb(i,a1,j1,b)  # VFL
#
            ENDDO b
            ENDDO i
#
#           PUT W1mjbe_ba(j1,j,a,a1) += Tjjpp(j1,j,a,a1) 
#
      ENDPARDO j1, a1, a, j 
#
      ENDPROC W1MJBEba
#     ----------------
#
# SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS 
#
      PROC W1MEBJ 
# 
           CALL W1MEBJAA
           CALL W1MEBJBB
           CALL W1MEBJAB
           CALL W1MEBJBA
           CALL W1MJBEab
           CALL W1MJBEba 
#
      ENDPROC W1MEBJ 
#
# SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS 
#
      PROC W2MEBJAA 
#     ------------- 
#
      PARDO i1, a1, a, i 
#
            GET Viaai(i1,a1,a,i) # +  
            GET Vaaii(a,a1,i1,i) # - 
            Tiaai(i1,a1,a,i)  = Vaaii(a,a1,i1,i)  
            Tiaai(i1,a1,a,i) -= Viaai(i1,a1,a,i)  
            Tiaai(i1,a1,a,i) *= -1.0  
#
            DO i2 
            DO a2 
#
               GET T2old_aa(a,i2,a2,i) 
               GET VSpipi(a1,i1,a2,i2) # + 
#
               T1iaai(i1,a1,a,i)   = VSpipi(a1,i1,a2,i2)*T2old_aa(a,i2,a2,i) 
               Tiaai(i1,a1,a,i)   -= T1iaai(i1,a1,a,i) 
#
            ENDDO a2 
            ENDDO i2 
#
            DO j 
            DO b 
#
               GET T2old_ab(a,i,b,j) 
               GET Vpiqj(a1,i1,b,j) # + 
#
               T1iaai(i1,a1,a,i) = Vpiqj(a1,i1,b,j)*T2old_ab(a,i,b,j) 
               Tiaai(i1,a1,a,i) += T1iaai(i1,a1,a,i) 
#
            ENDDO b 
            ENDDO j 
#
            PUT W2mebj_aa(i1,a1,a,i) += Tiaai(i1,a1,a,i) 
#
      ENDPARDO i1, a1, a, i 
#
      ENDPROC W2MEBJAA 
#     ---------------- 
#
      PROC W2MEBJAB 
#     ------------- 
#
      PARDO i, a, b, j 
#
            GET Viabj(i,a,b,j) 
            Tiabj(i,a,b,j) = Viabj(i,a,b,j) 
#
            DO a1 
            DO i1 
#
               GET T2old_ab(a1,i1,b,j) 
               GET VSpipi(a,i,a1,i1) # +  
#
               T1iabj(i,a,b,j)   = VSpipi(a,i,a1,i1)*T2old_ab(a1,i1,b,j) 
               Tiabj(i,a,b,j)   += T1iabj(i,a,b,j) 
#
            ENDDO i1 
            ENDDO a1 
#
            DO b1 
            DO j1 
#
               GET T2old_bb(b1,j1,b,j) 
               GET Vpiqj(a,i,b1,j1) # +  
#
               T1iabj(i,a,b,j) = Vpiqj(a,i,b1,j1)*T2old_bb(b1,j1,b,j) 
               Tiabj(i,a,b,j) += T1iabj(i,a,b,j) 
#
            ENDDO j1 
            ENDDO b1 
#
            PUT W2mebj_ab(i,a,b,j) += Tiabj(i,a,b,j)  
#
      ENDPARDO i, a, b, j 
#
      ENDPROC W2MEBJAB 
#     ---------------- 
#
      PROC W2MEBJBA 
#     ------------- 
#
      PARDO j, b, a, i 
#
            GET Viabj(i,a,b,j) 
            Tjbai(j,b,a,i) = Viabj(i,a,b,j) 
#
            DO b1 
            DO j1 
#
               GET T2old_ab(a,i,b1,j1) 
               GET VSqjqj(b,j,b1,j1) # +  
#
               T1jbai(j,b,a,i) = VSqjqj(b,j,b1,j1)*T2old_ab(a,i,b1,j1) 
               Tjbai(j,b,a,i) += T1jbai(j,b,a,i) 
#
            ENDDO j1 
            ENDDO b1 
#
            DO a1 
            DO i1 
#
               GET T2old_aa(a1,i1,a,i) 
               GET Vpiqj(a1,i1,b,j) # +  
#
               T1jbai(j,b,a,i) = Vpiqj(a1,i1,b,j)*T2old_aa(a1,i1,a,i) 
               Tjbai(j,b,a,i) += T1jbai(j,b,a,i) 
#
            ENDDO i1 
            ENDDO a1 
#
            PUT W2mebj_ba(j,b,a,i) += Tjbai(j,b,a,i)  
#
      ENDPARDO j, b, a, i 
#
      ENDPROC W2MEBJBA 
#     ---------------- 
#
      PROC W2MEBJBB 
#     ------------- 
#
      PARDO j1, b1, b, j 
#
            GET Vjbbj(j1,b1,b,j) # +  
            GET Vbbjj(b,b1,j1,j) # - 
            Tjbbj(j1,b1,b,j)  = Vbbjj(b,b1,j1,j)  
            Tjbbj(j1,b1,b,j) -= Vjbbj(j1,b1,b,j)  
            Tjbbj(j1,b1,b,j) *= -1.0  
#
            DO j2 
            DO b2 
#
               GET T2old_bb(b,j2,b2,j) 
               GET VSqjqj(b1,j1,b2,j2) # + 
#
               T1jbbj(j1,b1,b,j) = VSqjqj(b1,j1,b2,j2)*T2old_bb(b,j2,b2,j) 
               Tjbbj(j1,b1,b,j) -= T1jbbj(j1,b1,b,j) 
#
            ENDDO b2 
            ENDDO j2 
#
            DO i 
            DO a 
#
               GET T2old_ab(a,i,b,j) 
               GET Vpiqj(a,i,b1,j1) # + 
#
               T1jbbj(j1,b1,b,j) = Vpiqj(a,i,b1,j1)*T2old_ab(a,i,b,j) 
               Tjbbj(j1,b1,b,j) += T1jbbj(j1,b1,b,j) 
#
            ENDDO a 
            ENDDO i 
#
            PUT W2mebj_bb(j1,b1,b,j) += Tjbbj(j1,b1,b,j) 
#
      ENDPARDO j1, b1, b, j 
#
      ENDPROC W2MEBJBB 
#     ---------------- 
#
      PROC W2MJBEAB
#     ------------- 
#
      PARDO i, i1, b, b1 
#
            GET Vbbii(b,b1,i,i1) 
            Tiibb(i,i1,b,b1)  = Vbbii(b,b1,i,i1) 
            Tiibb(i,i1,b,b1) *= -1.0 
#
            DO a  
            DO j  
#
               GET T2old_ab(a,i1,b,j) 
               GET Vpiqj(a,i,b1,j) 
#
               T1iibb(i,i1,b,b1) = T2old_ab(a,i1,b,j)*Vpiqj(a,i,b1,j) 
               Tiibb(i,i1,b,b1) += T1iibb(i,i1,b,b1) 
#
            ENDDO j 
            ENDDO a 
#
            PUT W2mjbe_ab(i,i1,b,b1) += Tiibb(i,i1,b,b1) 
#
      ENDPARDO i, i1, b, b1 
#
      ENDPROC W2MJBEAB
#     ---------------- 
#
#
      PROC W2MJBEBA
#     ------------- 
#
      PARDO j1, j, a, a1 
#
            GET Vaajj(a,a1,j1,j) 
            Tjjaa(j1,j,a,a1)  = Vaajj(a,a1,j1,j) 
            Tjjaa(j1,j,a,a1) *= -1.0 
#
            DO b  
            DO i  
#
               GET T2old_ab(a,i,b,j) 
               GET Vpiqj(a1,i,b,j1) 
#
               T1jjaa(j1,j,a,a1) = T2old_ab(a,i,b,j)*Vpiqj(a1,i,b,j1) 
               Tjjaa(j1,j,a,a1) += T1jjaa(j1,j,a,a1) 
#
            ENDDO i 
            ENDDO b 
#
            PUT W2mjbe_ba(j1,j,a,a1) += Tjjaa(j1,j,a,a1) 
#
      ENDPARDO j1, j, a, a1 
#
      ENDPROC W2MJBEBA
#     ---------------- 
#
      PROC W2MEBJ 
#     ----------- 
           CALL W2MEBJAA
           CALL W2MEBJAB
           CALL W2MEBJBA
           CALL W2MEBJBB
#
           CALL W2MJBEAB 
           CALL W2MJBEBA  
      ENDPROC W2MEBJ 
#     -------------- 
#
      PROC W1IMENAA 
#     ------------- 
#
      PARDO i, i1, a, i2 
#
            GET VSpipi(i,i1,a,i2) # + 
            Tiiai(i,i1,a,i2)  = VSpipi(i,i1,a,i2) 
            TSiiai(i,i2,a,i1) = 0.0  
#
            DO i3 
#
               GET t1a_old(a,i3) 
               GET W1minj_aa(i,i1,i3,i2) 
#   
               T1iiai(i,i1,a,i2) = W1minj_aa(i,i1,i3,i2)*t1a_old(a,i3) 
               Tiiai(i,i1,a,i2) -= T1iiai(i,i1,a,i2) 
#
            ENDDO i3 
#
            DO a1 
#
               GET Fme_a(i,a1) 
               GET T2old_aa(a,i1,a1,i2) 
               GET t1a_old(a1,i1) 
               GET W2mebj_aa(i,a1,a,i2) 
#
               T1iiai(i,i1,a,i2)  = T2old_aa(a,i1,a1,i2)*Fme_a(i,a1) 
               Tiiai(i,i1,a,i2)  -= T1iiai(i,i1,a,i2) 
#
               T1iiai(i,i1,a,i2)  = W2mebj_aa(i,a1,a,i2)*t1a_old(a1,i1)  
               T2iiai(i,i2,a,i1)  = T1iiai(i,i1,a,i2) 
#
               Tiiai(i,i1,a,i2)  += T1iiai(i,i1,a,i2) 
               TSiiai(i,i2,a,i1) -= T2iiai(i,i2,a,i1) 
#
               DO a2 
#
                  GET Tau_aa(a1,i1,a2,i2) 
                  GET VSaaai(a2,a,a1,i) # + 
#
                  T1iiai(i,i1,a,i2)  = Tau_aa(a1,i1,a2,i2)*VSaaai(a2,a,a1,i)
                  T1iiai(i,i1,a,i2) *= 0.5  
                  Tiiai(i,i1,a,i2)  += T1iiai(i,i1,a,i2) 
#
               ENDDO a2 
#
               DO i3 
#
                  GET T2old_aa(a,i2,a1,i3) 
                  GET VSpipi(i1,i,a1,i3) # + 
#
                  T1iiai(i,i1,a,i2)   = VSpipi(i1,i,a1,i3)*T2old_aa(a,i2,a1,i3) 
                  T2iiai(i,i2,a,i1)   = T1iiai(i,i1,a,i2) 
                  Tiiai(i,i1,a,i2)   += T1iiai(i,i1,a,i2) 
                  TSiiai(i,i2,a,i1)  -= T2iiai(i,i2,a,i1) 
#
               ENDDO i3 
#
            ENDDO a1 
#
            DO b 
            DO j 
#
               GET T2old_ab(a,i2,b,j) 
               GET Vpiqj(i1,i,b,j) # + 
#
               T1iiai(i,i1,a,i2)  = Vpiqj(i1,i,b,j)*T2old_ab(a,i2,b,j) 
               Tiiai(i,i1,a,i2)  += T1iiai(i,i1,a,i2) 
#
               T2iiai(i,i2,a,i1)  = T1iiai(i,i1,a,i2) 
               TSiiai(i,i2,a,i1) -= T2iiai(i,i2,a,i1) 
#
            ENDDO j 
            ENDDO b 
#
            PUT W1imen_aa(i,i1,a,i2) += Tiiai(i,i1,a,i2) 
            PUT W1imen_aa(i,i2,a,i1) += TSiiai(i,i2,a,i1) 
#
      ENDPARDO i, i1, a, i2 
#
      ENDPROC W1IMENAA 
#     ---------------- 
#
      PROC W1IMENAB 
#     ------------- 
#
      PARDO i, i1, b, j 
#
            GET Vpiqj(i,i1,b,j) 
            Tiibj(i,i1,b,j) = Vpiqj(i,i1,b,j)  
#
            DO a 
#
               GET Fme_a(i,a) 
               GET T2old_ab(a,i1,b,j) 
               GET t1a_old(a,i1) 
               GET W2mebj_ab(i,a,b,j)  
#
               T1iibj(i,i1,b,j) = T2old_ab(a,i1,b,j)*Fme_a(i,a) 
               Tiibj(i,i1,b,j) += T1iibj(i,i1,b,j) 
#
               T1iibj(i,i1,b,j) = W2mebj_ab(i,a,b,j)*t1a_old(a,i1) 
               Tiibj(i,i1,b,j) += T1iibj(i,i1,b,j) 
#
               DO b1 
#
                  GET Tau_ab(a,i1,b1,j) 
                  GET Vbbai(b1,b,a,i) 
#
                  T1iibj(i,i1,b,j) = Vbbai(b1,b,a,i)*Tau_ab(a,i1,b1,j) 
                  Tiibj(i,i1,b,j) += T1iibj(i,i1,b,j) 
#
               ENDDO b1 
#
               DO i2 
#
                  GET T2old_ab(a,i2,b,j) 
                  GET VSpipi(i1,i,a,i2) # + 
#
                  T1iibj(i,i1,b,j) = VSpipi(i1,i,a,i2)*T2old_ab(a,i2,b,j)  
                  Tiibj(i,i1,b,j) += T1iibj(i,i1,b,j) 
#
               ENDDO i2 
#
               DO j1 
#
                  GET T2old_ab(a,i1,b,j1) 
                  GET Vpiqj(a,i,j,j1) # + 
#
                  T1iibj(i,i1,b,j) = Vpiqj(a,i,j,j1)*T2old_ab(a,i1,b,j1)  
                  Tiibj(i,i1,b,j) -= T1iibj(i,i1,b,j) 
#
               ENDDO j1 
#
            ENDDO a 
#
            DO j1 
#
               GET t1b_old(b,j1) 
               GET W1minj_ab(i,i1,j1,j) 
#
               T1iibj(i,i1,b,j) = W1minj_ab(i,i1,j1,j)*t1b_old(b,j1)  
               Tiibj(i,i1,b,j) -= T1iibj(i,i1,b,j) 
#
            ENDDO j1 
#
            DO b1 
#
               GET t1b_old(b1,j) 
               GET W2mjbe_ab(i,i1,b,b1)  
#
               T1iibj(i,i1,b,j) = W2mjbe_ab(i,i1,b,b1)*t1b_old(b1,j)  
               Tiibj(i,i1,b,j) -= T1iibj(i,i1,b,j) 
#
               DO j2 
#
                  GET T2old_bb(b1,j2,b,j) 
                  GET Vpiqj(i1,i,b1,j2) # + 
#
                  T1iibj(i,i1,b,j) = Vpiqj(i1,i,b1,j2)*T2old_bb(b1,j2,b,j)  
                  Tiibj(i,i1,b,j) += T1iibj(i,i1,b,j) 
#
               ENDDO j2 
#
            ENDDO b1 
#
            PUT W1imen_ab(i,i1,b,j) += Tiibj(i,i1,b,j) 
#
      ENDPARDO i, i1, b, j 
#
      ENDPROC W1IMENAB 
#     ---------------- 
#
      PROC W1IMENBA 
#     ------------- 
#
      PARDO j, j1, a, i 
#
            GET Vpiqj(a,i,j,j1) 
            Tjjai(j,j1,a,i) = Vpiqj(a,i,j,j1)  
#
            DO b 
#
               GET Fme_b(j,b) 
               GET T2old_ab(a,i,b,j1) 
               GET t1b_old(b,j1) 
               GET W2mebj_ba(j,b,a,i)  
#
               T1jjai(j,j1,a,i) = T2old_ab(a,i,b,j1)*Fme_b(j,b) 
               Tjjai(j,j1,a,i) += T1jjai(j,j1,a,i) 
#
               T1jjai(j,j1,a,i) = W2mebj_ba(j,b,a,i)*t1b_old(b,j1) 
               Tjjai(j,j1,a,i) += T1jjai(j,j1,a,i) 
#
               DO a1 
#
                  GET Tau_ab(a1,i,b,j1) 
                  GET Vaabj(a1,a,b,j) 
#
                  T1jjai(j,j1,a,i) = Vaabj(a1,a,b,j)*Tau_ab(a1,i,b,j1) 
                  Tjjai(j,j1,a,i) += T1jjai(j,j1,a,i) 
#
               ENDDO a1 
#
               DO j2 
#
                  GET T2old_ab(a,i,b,j2) 
                  GET VSqjqj(j1,j,b,j2) # + 
#
                  T1jjai(j,j1,a,i) = VSqjqj(j1,j,b,j2)*T2old_ab(a,i,b,j2)  
                  Tjjai(j,j1,a,i) += T1jjai(j,j1,a,i) 
#
               ENDDO j2 
#
               DO i1 
#
                  GET T2old_ab(a,i1,b,j1) 
                  GET Vpiqj(i,i1,b,j) # + 
#
                  T1jjai(j,j1,a,i) = T2old_ab(a,i1,b,j1)*Vpiqj(i,i1,b,j)  
                  Tjjai(j,j1,a,i) -= T1jjai(j,j1,a,i) 
#
               ENDDO i1 
#
            ENDDO b 
#
            DO i1 
#
               GET t1a_old(a,i1) 
               GET W1minj_ab(i1,i,j,j1) 
#
               T1jjai(j,j1,a,i) = W1minj_ab(i1,i,j,j1)*t1a_old(a,i1)  
               Tjjai(j,j1,a,i) -= T1jjai(j,j1,a,i) 
#
            ENDDO i1 
#
            DO a1  
#
               GET t1a_old(a1,i) 
               GET W2mjbe_ba(j,j1,a,a1)  
#
               T1jjai(j,j1,a,i) = W2mjbe_ba(j,j1,a,a1)*t1a_old(a1,i)  
               Tjjai(j,j1,a,i) -= T1jjai(j,j1,a,i) 
#
               DO i1 
#
                  GET T2old_aa(a1,i1,a,i) 
                  GET Vpiqj(a1,i1,j1,j) # + 
#
                  T1jjai(j,j1,a,i) = Vpiqj(a1,i1,j1,j)*T2old_aa(a1,i1,a,i)  
                  Tjjai(j,j1,a,i) += T1jjai(j,j1,a,i) 
#
               ENDDO i1 
#
            ENDDO a1 
#
            PUT W1imen_ba(j,j1,a,i) += Tjjai(j,j1,a,i) 
#
      ENDPARDO j, j1, a, i 
#
      ENDPROC W1IMENBA 
#     ---------------- 
#
      PROC W1IMENBB 
#     ------------- 
#
      PARDO j, j1, b, j2 
#
            GET VSqjqj(j,j1,b,j2) # + 
            Tjjbj(j,j1,b,j2)  = VSqjqj(j,j1,b,j2) 
            TSjjbj(j,j2,b,j1) = 0.0  
#
            DO j3  
#
               GET t1b_old(b,j3) 
#              GET W1imjn_bb(j,j1,j3,j2) 
               GET W1minj_bb(j,j1,j3,j2) 
#   
               T1jjbj(j,j1,b,j2) = W1minj_bb(j,j1,j3,j2)*t1b_old(b,j3) 
               Tjjbj(j,j1,b,j2) -= T1jjbj(j,j1,b,j2) 
#
            ENDDO j3 
#
            DO b1 
#
               GET Fme_b(j,b1) 
               GET T2old_bb(b,j1,b1,j2) 
               GET t1b_old(b1,j1) 
               GET W2mebj_bb(j,b1,b,j2) 
#
               T1jjbj(j,j1,b,j2)  = T2old_bb(b,j1,b1,j2)*Fme_b(j,b1) 
               Tjjbj(j,j1,b,j2)  -= T1jjbj(j,j1,b,j2) 
#
               T1jjbj(j,j1,b,j2)  = W2mebj_bb(j,b1,b,j2)*t1b_old(b1,j1)  
               T2jjbj(j,j2,b,j1)  = T1jjbj(j,j1,b,j2) 
#
               Tjjbj(j,j1,b,j2)  += T1jjbj(j,j1,b,j2) 
               TSjjbj(j,j2,b,j1) -= T2jjbj(j,j2,b,j1) 
#
               DO b2 
#
                  GET Tau_bb(b1,j1,b2,j2) 
                  GET VSbbbj(b2,b,b1,j) # + 
#
                  T1jjbj(j,j1,b,j2)  = Tau_bb(b1,j1,b2,j2)*VSbbbj(b2,b,b1,j)
                  T1jjbj(j,j1,b,j2) *= 0.5  
                  Tjjbj(j,j1,b,j2)  += T1jjbj(j,j1,b,j2) 
#
               ENDDO b2 
#
               DO j3 
#
                  GET T2old_bb(b,j2,b1,j3) 
                  GET VSqjqj(j1,j,b1,j3) # + 
#
                  T1jjbj(j,j1,b,j2)  = VSqjqj(j1,j,b1,j3)*T2old_bb(b,j2,b1,j3) 
                  Tjjbj(j,j1,b,j2)  += T1jjbj(j,j1,b,j2) 
#
                  T2jjbj(j,j2,b,j1)  = T1jjbj(j,j1,b,j2) 
                  TSjjbj(j,j2,b,j1) -= T2jjbj(j,j2,b,j1) 
#
               ENDDO j3 
#
            ENDDO b1 
#
            DO a 
            DO i 
#
               GET T2old_ab(a,i,b,j2) 
               GET Vpiqj(a,i,j1,j) # + 
#
               T1jjbj(j,j1,b,j2)  = Vpiqj(a,i,j1,j)*T2old_ab(a,i,b,j2) 
               T2jjbj(j,j2,b,j1)  = T1jjbj(j,j1,b,j2) 
#
               Tjjbj(j,j1,b,j2)   += T1jjbj(j,j1,b,j2) 
               TSjjbj(j,j2,b,j1)  -= T2jjbj(j,j2,b,j1) 
#
            ENDDO i 
            ENDDO a 
#
            PUT W1imen_bb(j,j1,b,j2) += Tjjbj(j,j1,b,j2) 
            PUT W1imen_bb(j,j2,b,j1) += TSjjbj(j,j2,b,j1) 
#
      ENDPARDO j, j1, b, j2 
#
      ENDPROC W1IMENBB 
#     ---------------- 
#
      PROC W1IMEN 
#     ----------- 
#
         CALL W1IMENAA
         CALL W1IMENAB 
         CALL W1IMENBA 
         CALL W1IMENBB
#
      ENDPROC W1IMEN 
#     -------------- 
#
      PROC W1EAFMAA 
#     ------------- 
#
      PARDO a1, a, a2, i 
#
# Compute (a1,a,a1,i) and (a2,a,a1,i) block of intermediate 
# --------------------------------------------------------- 
#
            GET                 VSaaai(a1,a,a2,i) 
            Tpppp(a1,a,a2,i)  = VSaaai(a1,a,a2,i)  
            TSpppp(a2,a,a1,i) = 0.0  
#
            DO i1 
#
               GET T2old_aa(a1,i,a2,i1) 
               GET W2mebj_aa(i1,a,a2,i) 
               GET t1a_old(a1,i1) 
               GET Fme_a(i1,a) 
#
#              T1pppp(a1,a,a2,i)  = T2old_aa(a1,i,a2,i1)*Fme_a(i1,a)  
#
               T2pppp(a1,i,a2,a)  = T2old_aa(a1,i,a2,i1)*Fme_a(i1,a)  
               T1pppp(a1,a,a2,i)  = T2pppp(a1,i,a2,a) 
#
               Tpppp(a1,a,a2,i)  += T1pppp(a1,a,a2,i) 
#
               T1pppp(a1,a,a2,i)  = W2mebj_aa(i1,a,a2,i)*t1a_old(a1,i1)  
               T2pppp(a2,a,a1,i)  = T1pppp(a1,a,a2,i)  
# 
               Tpppp(a1,a,a2,i)  -= T1pppp(a1,a,a2,i) 
               TSpppp(a2,a,a1,i) += T2pppp(a2,a,a1,i) 
# 
               DO i2 
#
                  GET Tau_aa(a1,i1,a2,i2) 
                  GET VSpipi(a,i1,i,i2) # +  
#
                  T1pppp(a1,a,a2,i)  = Tau_aa(a1,i1,a2,i2)*VSpipi(a,i1,i,i2)  
                  T1pppp(a1,a,a2,i) *= 0.5  
                  Tpppp(a1,a,a2,i)  += T1pppp(a1,a,a2,i) 
#
               ENDDO i2 
#
            ENDDO i1 
#
# Compute contribution to l1a_new 
# ------------------------------- 
#
            DO i1 
#
               GET L2old_aa(i1,a1,i,a2) 
               GET L2old_aa(i1,a2,i,a1) 
#
               T1ia(i1,a)         = L2old_aa(i1,a1,i,a2)*Tpppp(a1,a,a2,i)
               Tia(i1,a)          = L2old_aa(i1,a2,i,a1)*TSpppp(a2,a,a1,i)
               T1ia(i1,a)        += Tia(i1,a)  
               T1ia(i1,a)        *= 0.5
               PUT l1a_new(i1,a) += T1ia(i1,a) 
#
            ENDDO i1 
#
#           PUT W1eafm_aa(a1,a,a2,i) +=  Tpppp(a1,a,a2,i) 
#           PUT W1eafm_aa(a2,a,a1,i) += TSpppp(a2,a,a1,i) 
#
      ENDPARDO a1, a, a2, i 
#
# Finish by including contributions involving integrals with three virtuals. 
# -------------------------------------------------------------------------- 
#
      PARDO a1, a3, i1, i2  
#
            Taiai(a3,i2,a1,i1) = 0.0 
#
            DO i  
            DO a2   
#
               GET T2old_aa(a3,i2,a2,i) 
               GET L2old_aa(i,a2,i1,a1) 
#
               T2aiai(a2,i,a1,i1)  = L2old_aa(i,a2,i1,a1) 
               t1aiai(a3,i2,a1,i1) = T2old_aa(a3,i2,a2,i)*T2aiai(a2,i,a1,i1) 
               taiai(a3,i2,a1,i1) += t1aiai(a3,i2,a1,i1) 
#
            ENDDO a2   
            ENDDO i  
#
            tiaai(i1,a1,a3,i2) = taiai(a3,i2,a1,i1) 
#
            DO a 
#
               GET VSaaai(a,a1,a3,i2) 
#
               Tia(i1,a) = tiaai(i1,a1,a3,i2)*VSaaai(a,a1,a3,i2) 
               PUT l1a_new(i1,a) += Tia(i1,a) 
#
            ENDDO a 
#
      ENDPARDO a1, a3, i1, i2  
#
      PARDO a1, b, i1, j 
#
            Taibj(a1,i1,b,j) = 0.0 
#
            DO a2  
            DO i 
#
               GET T2old_ab(a2,i,b,j) 
               GET L2old_aa(i1,a1,i,a2) 
#
               taiai(a1,i1,a2,i) = L2old_aa(i1,a1,i,a2)  
               t1aibj(a1,i1,b,j) = taiai(a1,i1,a2,i)*T2old_ab(a2,i,b,j)
               Taibj(a1,i1,b,j) += t1aibj(a1,i1,b,j)  
#
            ENDDO i 
            ENDDO a2  
#
            Tiabj(i1,a1,b,j) = Taibj(a1,i1,b,j) 
#
            DO a 
#
               GET Vaabj(a,a1,b,j) 
#
               Tia(i1,a) = Tiabj(i1,a1,b,j)*Vaabj(a,a1,b,j) 
               PUT l1a_new(i1,a) += Tia(i1,a) 
#
            ENDDO a 
#
      ENDPARDO a1, b, i1, j 
#
# Done contributions involving integrals with three virtuals. 
# ----------------------------------------------------------- 
#
      ENDPROC W1EAFMAA 
#     ---------------- 
#
      PROC W1EAFMAB 
#     ------------- 
#
# Compute (a1,a,b,j) block of intermediate 
# ---------------------------------------- 
#
      PARDO a1, j, b, a 
#
            GET Vaabj(a1,a,b,j) 
            Tppqq(a1,a,b,j)  = Vaabj(a1,a,b,j) 
#
            DO i 
#
               GET Fme_a(i,a) 
               GET T2old_ab(a1,i,b,j) 
               GET t1a_old(a1,i) 
               GET W2mebj_ab(i,a,b,j) 
#
               T1ppqq(a1,a,b,j) = T2old_ab(a1,i,b,j)*Fme_a(i,a)
               Tppqq(a1,a,b,j) -= T1ppqq(a1,a,b,j)
#
               T1ppqq(a1,a,b,j) = W2mebj_ab(i,a,b,j)*t1a_old(a1,i) 
               Tppqq(a1,a,b,j) -= T1ppqq(a1,a,b,j)
#
            ENDDO i 
#
            DO j1 
#
               GET W2mjbe_ba(j1,j,a1,a) 
               GET t1b_old(b,j1) 
#
               T1qqpp(b,j,a1,a) = W2mjbe_ba(j1,j,a1,a)*t1b_old(b,j1) 
               T1ppqq(a1,a,b,j) = T1qqpp(b,j,a1,a)  
               Tppqq(a1,a,b,j) += T1ppqq(a1,a,b,j)
#
               DO i 
#
                  GET Tau_ab(a1,i,b,j1) 
                  GET Vpiqj(a,i,j,j1) 
#   
                  T1ppqq(a1,a,b,j) = Tau_ab(a1,i,b,j1)*Vpiqj(a,i,j,j1) 
                  Tppqq(a1,a,b,j) += T1ppqq(a1,a,b,j)
#
               ENDDO i 
#
            ENDDO j1 
#
# Compute contribution to l1a_new 
# ------------------------------- 
#
            DO i
#
               GET L2old_ab(i,a1,j,b) # VFL
#
               T1ia(i,a)         = L2old_ab(i,a1,j,b)*Tppqq(a1,a,b,j)
               PUT l1a_new(i,a) += T1ia(i,a)
#
            ENDDO i
#
#           PUT W1eafm_ab(a1,a,b,j) += Tppqq(a1,a,b,j) 
#
      ENDPARDO a1, j, b, a 
#
# Finish by including contributions involving integrals with three virtuals. 
# -------------------------------------------------------------------------- 
#
      PARDO a1, a2, i, i1 
#
            Taiai(a2,i1,a1,i) = 0.0 
#
            DO b 
            DO j 
#
               GET T2old_ab(a2,i1,b,j) 
               GET L2old_ab(i,a1,j,b) 
#
               Tbjai(b,j,a1,i)    = L2old_ab(i,a1,j,b) 
               T1aiai(a2,i1,a1,i) = T2old_ab(a2,i1,b,j)*Tbjai(b,j,a1,i) 
               Taiai(a2,i1,a1,i) += T1aiai(a2,i1,a1,i) 
#
            ENDDO j 
            ENDDO b 
#
            Tiaai(i,a1,a2,i1) = Taiai(a2,i1,a1,i) 
#
            DO a
#
               GET VSaaai(a,a1,a2,i1) 
#
               Tia(i,a) = Tiaai(i,a1,a2,i1)*VSaaai(a,a1,a2,i1) 
               PUT l1a_new(i,a) += Tia(i,a)
#
            ENDDO a
#
      ENDPARDO a1, a2, i, i1 
#
      PARDO b, b1, i, i1 
#
            Tiibb(i,i1,b1,b) = 0.0  
#
            DO j 
            DO a1 
#
               GET T2old_ab(a1,i1,b1,j) 
               GET L2old_ab(i,a1,j,b) 
#
               T1iibb(i,i1,b1,b) = L2old_ab(i,a1,j,b)*T2old_ab(a1,i1,b1,j) 
               Tiibb(i,i1,b1,b) += T1iibb(i,i1,b1,b) 
#
            ENDDO a1 
            ENDDO j 
#
            DO a 
#
               GET Vbbai(b1,b,a,i1) 
#
               Tia(i,a) = Tiibb(i,i1,b1,b)*Vbbai(b1,b,a,i1) 
               Tia(i,a) *= -1.0  
               PUT l1a_new(i,a) += Tia(i,a)
# 
            ENDDO a 
#
      ENDPARDO b, b1, i, i1 
#
      PARDO a1, i, b1, j1 
#
            Tiabj(i,a1,b1,j1) = 0.0 
#
            DO b 
            DO j 
#
               GET T2old_bb(b,j,b1,j1) 
               GET L2old_ab(i,a1,j,b) 
#
               T1iabj(i,a1,b1,j1) = L2old_ab(i,a1,j,b)*T2old_bb(b,j,b1,j1) 
               Tiabj(i,a1,b1,j1) += T1iabj(i,a1,b1,j1)   
#
            ENDDO j 
            ENDDO b 
#
            DO a 
#
               GET Vaabj(a,a1,b1,j1) 
#
               Tia(i,a) = Tiabj(i,a1,b1,j1) *Vaabj(a,a1,b1,j1) 
               PUT l1a_new(i,a) += Tia(i,a)
#
            ENDDO a 
#
      ENDPARDO a1, i, b1, j1 
#
# Done contributions involving integrals with three virtuals. 
# ----------------------------------------------------------- 
#
      ENDPROC W1EAFMAB 
#     ---------------- 
#
      PROC W1EAFMBA 
#     ------------- 
#
      PARDO b1, i, a, b 
#
# Compute (b1,b,a,i) block of intermediate 
# ---------------------------------------- 
#
            GET Vbbai(b1,b,a,i) 
            Tqqpp(b1,b,a,i)  = Vbbai(b1,b,a,i)  
#
            DO j 
#
               GET W2mebj_ba(j,b,a,i) 
               GET T2old_ab(a,i,b1,j) 
               GET t1b_old(b1,j) 
               GET Fme_b(j,b) 
#
#              T1qqpp(b1,b,a,i) = T2old_ab(a,i,b1,j)*Fme_b(j,b)
#
               Taibb(a,i,b1,b)  = T2old_ab(a,i,b1,j)*Fme_b(j,b) 
               T1qqpp(b1,b,a,i) = Taibb(a,i,b1,b) 
#
               Tqqpp(b1,b,a,i) -= T1qqpp(b1,b,a,i)
#
               T1qqpp(b1,b,a,i) = W2mebj_ba(j,b,a,i)*t1b_old(b1,j) 
               Tqqpp(b1,b,a,i) -= T1qqpp(b1,b,a,i)
#
#              DO b2   
#
#                 GET T2old_ab(a,i,b2,j) 
#                 GET VSbbbj(b,b1,b2,j) 
#
#                  T1qqpp(b1,b,a,i) = VSbbbj(b,b1,b2,j)*T2old_ab(a,i,b2,j) 
#                 Tqqpp(b1,b,a,i)  += T1qqpp(b1,b,a,i)
#
#              ENDDO b2 
#
#              DO a1 
#
#                 GET T2old_ab(a1,i,b1,j) 
#                 GET Vaabj(a1,a,b,j) 
#
#                T1qqpp(b1,b,a,i)  = Vaabj(a1,a,b,j)*T2old_ab(a1,i,b1,j)  
#                 Tqqpp(b1,b,a,i) -= T1qqpp(b1,b,a,i)
#
#              ENDDO a1 
#
               DO i1 
#
                  GET Tau_ab(a,i1,b1,j) 
                  GET Vpiqj(i,i1,b,j) 
#   
                  T1qqpp(b1,b,a,i) = Tau_ab(a,i1,b1,j)*Vpiqj(i,i1,b,j) 
                  Tqqpp(b1,b,a,i) += T1qqpp(b1,b,a,i)
#
               ENDDO i1 
#
            ENDDO j 
#
            DO i1 
#
               GET W2mjbe_ab(i1,i,b1,b) 
               GET t1a_old(a,i1) 
#              T1qqpp(b1,b,a,i)  = W2mjbe_ab(i1,i,b1,b)*t1a_old(a,i1) 
#
               tia(i1,a)         = t1a_old(a,i1)
               T1qqpp(b1,b,i,i1) = W2mjbe_ab(i1,i,b1,b) 
#
               T2qqpp(b1,b,i,a)  = T1qqpp(b1,b,i,i1)*tia(i1,a)  
               T1qqpp(b1,b,a,i)  = T2qqpp(b1,b,i,a) 
               Tqqpp(b1,b,a,i)  += T1qqpp(b1,b,a,i)
#
#              DO a1 
#
#                 GET T2old_aa(a1,i1,a,i) 
#                 GET Vbbai(b,b1,a1,i1)  
#
#                T1qqpp(b1,b,a,i)  = Vbbai(b,b1,a1,i1)*T2old_aa(a1,i1,a,i)  
#                 Tqqpp(b1,b,a,i) += T1qqpp(b1,b,a,i)
#
#              ENDDO a1 
#
            ENDDO i1 
#
# Compute contribution to l1b_new 
# ------------------------------- 
#
            DO j
#
               GET L2old_ab(i,a,j,b1)
#
               T1jb(j,b)         = Tqqpp(b1,b,a,i)*L2old_ab(i,a,j,b1)
               PUT l1b_new(j,b) += T1jb(j,b)
#
            ENDDO j
#
#           PUT W1eafm_ba(b1,b,a,i) += Tqqpp(b1,b,a,i) 
#
      ENDPARDO b1, i, a, b 
#
# Finish by including contributions involving integrals with three virtuals. 
# -------------------------------------------------------------------------- 
#
      PARDO b1, b2, j, j1 
#
            Tbjbj(b2,j1,b1,j) = 0.0 
#
            DO a 
            DO i 
#
               GET T2old_ab(a,i,b2,j1) 
               GET L2old_ab(i,a,j,b1) 
#
               Taibj(a,i,b1,j)    = L2old_ab(i,a,j,b1) 
               T1bjbj(b2,j1,b1,j) = T2old_ab(a,i,b2,j1)*Taibj(a,i,b1,j) 
               Tbjbj(b2,j1,b1,j) += T1bjbj(b2,j1,b1,j) 
#
            ENDDO i 
            ENDDO a 
#
            Tjbbj(j,b1,b2,j1) = Tbjbj(b2,j1,b1,j) 
#
            DO b
#
               GET VSbbbj(b,b1,b2,j1) 
#
               Tjb(j,b) = Tjbbj(j,b1,b2,j1)*VSbbbj(b,b1,b2,j1) 
               PUT l1b_new(j,b) += Tjb(j,b)
#
            ENDDO b
#
      ENDPARDO b1, b2, j, j1 
#
      PARDO a, a1, j, j1 
#
            Tjjaa(j,j1,a1,a) = 0.0  
#
            DO i 
            DO b1 
#
               GET T2old_ab(a1,i,b1,j1) 
               GET L2old_ab(i,a,j,b1) 
#
               T1jjaa(j,j1,a1,a) = L2old_ab(i,a,j,b1)*T2old_ab(a1,i,b1,j1) 
               Tjjaa(j,j1,a1,a) += T1jjaa(j,j1,a1,a) 
#
            ENDDO b1 
            ENDDO i 
#
            DO b 
#
               GET Vaabj(a1,a,b,j1) 
#
               Tjb(j,b) = Tjjaa(j,j1,a1,a)*Vaabj(a1,a,b,j1) 
               Tjb(j,b) *= -1.0  
               PUT l1b_new(j,b) += Tjb(j,b)
# 
            ENDDO b 
#
      ENDPARDO a, a1, j, j1 
#
      PARDO b1, j, a1, i1 
#
            Tjbai(j,b1,a1,i1) = 0.0 
#
            DO a 
            DO i 
#
               GET T2old_aa(a,i,a1,i1) 
               GET L2old_ab(i,a,j,b1) 
#
               T1jbai(j,b1,a1,i1) = L2old_ab(i,a,j,b1)*T2old_aa(a,i,a1,i1) 
               Tjbai(j,b1,a1,i1) += T1jbai(j,b1,a1,i1)   
#
            ENDDO i 
            ENDDO a 
#
            DO b 
#
               GET Vbbai(b,b1,a1,i1) 
#
               Tjb(j,b) = Tjbai(j,b1,a1,i1) *Vbbai(b,b1,a1,i1) 
               PUT l1b_new(j,b) += Tjb(j,b)
#
            ENDDO b 
#
      ENDPARDO b1, j, a1, i1 
#
# Done contributions involving integrals with three virtuals. 
# ----------------------------------------------------------- 
#
#
#
      ENDPROC W1EAFMBA 
#     ---------------- 
#
      PROC W1EAFMBB 
#     ------------- 
#
      PARDO b1, b, b2, j 
#
# Compute (b1,b,b1,j) and (b2,b,b1,j) block of intermediate 
# --------------------------------------------------------- 
#
            GET VSbbbj(b1,b,b2,j)   
#
            Tqqqq(b1,b,b2,j)  = VSbbbj(b1,b,b2,j)  
            TSqqqq(b2,b,b1,j) = 0.0  
#
            DO j1 
#
#              GET T2old_bb(b1,j,b2,j1) 
               GET T2old_bb(b1,j1,b2,j) 
               GET W2mebj_bb(j1,b,b2,j) 
               GET Fme_b(j1,b) 
               GET t1b_old(b1,j1) 
#
               T1qqqq(b1,b,b2,j)  = T2old_bb(b1,j1,b2,j)*Fme_b(j1,b)  
               Tqqqq(b1,b,b2,j)  -= T1qqqq(b1,b,b2,j) 
#
               T1qqqq(b1,b,b2,j)  = W2mebj_bb(j1,b,b2,j)*t1b_old(b1,j1)  
               T2qqqq(b2,b,b1,j)  = T1qqqq(b1,b,b2,j)  
# 
                Tqqqq(b1,b,b2,j) -= T1qqqq(b1,b,b2,j) 
               TSqqqq(b2,b,b1,j) += T2qqqq(b2,b,b1,j) 
# 
               DO j2 
#
                  GET Tau_bb(b1,j1,b2,j2) 
                  GET VSqjqj(b,j1,j,j2) # +  
#
                  T1qqqq(b1,b,b2,j)  = Tau_bb(b1,j1,b2,j2)*VSqjqj(b,j1,j,j2)  
                  T1qqqq(b1,b,b2,j) *= 0.5  
                  Tqqqq(b1,b,b2,j)  += T1qqqq(b1,b,b2,j) 
#
               ENDDO j2 
#
#              DO b3 
#
#                 GET T2old_bb(b2,j,b3,j1) 
#                 GET VSbbbj(b,b1,b3,j1) # +  
#
#                 T1qqqq(b1,b,b2,j)  = VSbbbj(b,b1,b3,j1)*T2old_bb(b2,j,b3,j1)  
#                 T2qqqq(b2,b,b1,j)  = T1qqqq(b1,b,b2,j)  
#
#                  Tqqqq(b1,b,b2,j) += T1qqqq(b1,b,b2,j) 
#                 TSqqqq(b2,b,b1,j) -= T2qqqq(b2,b,b1,j) 
#
#              ENDDO b3 
#
            ENDDO j1 
#
#           DO i 
#           DO a 
#
#              GET T2old_ab(a,i,b2,j) 
#              GET Vbbai(b,b1,a,i) # +  
#
#              T1qqqq(b1,b,b2,j)  = Vbbai(b,b1,a,i)*T2old_ab(a,i,b2,j)  
#              T2qqqq(b2,b,b1,j)  = T1qqqq(b1,b,b2,j)  
#
#               Tqqqq(b1,b,b2,j) += T1qqqq(b1,b,b2,j) 
#              TSqqqq(b2,b,b1,j) -= T2qqqq(b2,b,b1,j) 
#
#           ENDDO a 
#           ENDDO i 
#
# Compute contribution to l1b_new 
# ------------------------------- 
#
            DO j1 
#
               GET L2old_bb(j1,b1,j,b2)
               GET L2old_bb(j1,b2,j,b1)
#
               T1jb(j1,b)         = L2old_bb(j1,b1,j,b2)*Tqqqq(b1,b,b2,j)
               Tjb(j1,b)          = L2old_bb(j1,b2,j,b1)*TSqqqq(b2,b,b1,j)
               T1jb(j1,b)        += Tjb(j1,b)  
               T1jb(j1,b)        *= 0.5
               PUT l1b_new(j1,b) += T1jb(j1,b)
#
            ENDDO j1 
#
#           PUT W1eafm_bb(b1,b,b2,j) +=  Tqqqq(b1,b,b2,j) 
#           PUT W1eafm_bb(b2,b,b1,j) += TSqqqq(b2,b,b1,j) 
#
      ENDPARDO b1, b, b2, j 
#
# Finish by including contributions involving integrals with three virtuals. 
# -------------------------------------------------------------------------- 
#
      PARDO b1, b3, j1, j2  
#
            Tbjbj(b3,j2,b1,j1) = 0.0 
#
            DO j  
            DO b2   
#
               GET T2old_bb(b3,j2,b2,j) 
               GET L2old_bb(j,b2,j1,b1) 
#
               T2bjbj(b2,j,b1,j1)  = L2old_bb(j,b2,j1,b1) 
               t1bjbj(b3,j2,b1,j1) = T2old_bb(b3,j2,b2,j)*T2bjbj(b2,j,b1,j1) 
               tbjbj(b3,j2,b1,j1) += t1bjbj(b3,j2,b1,j1) 
#
            ENDDO b2   
            ENDDO j  
#
            tjbbj(j1,b1,b3,j2) = tbjbj(b3,j2,b1,j1) 
#
            DO b 
#
               GET VSbbbj(b,b1,b3,j2) 
#
               Tjb(j1,b) = tjbbj(j1,b1,b3,j2)*VSbbbj(b,b1,b3,j2) 
               PUT l1b_new(j1,b) += Tjb(j1,b) 
#
            ENDDO b 
#
      ENDPARDO b1, b3, j1, j2  
#
      PARDO b1, a, j1, i 
#
            Tbjai(b1,j1,a,i) = 0.0 
#
            DO b2  
            DO j 
#
               GET T2old_ab(a,i,b2,j) 
               GET L2old_bb(j1,b1,j,b2) 
#
               tbjbj(b1,j1,b2,j) = L2old_bb(j1,b1,j,b2)  
               t1bjai(b1,j1,a,i) = tbjbj(b1,j1,b2,j)*T2old_ab(a,i,b2,j)
               Tbjai(b1,j1,a,i) += t1bjai(b1,j1,a,i)  
#
            ENDDO j 
            ENDDO b2  
#
            Tjbai(j1,b1,a,i) = Tbjai(b1,j1,a,i) 
#
            DO b 
#
               GET Vbbai(b,b1,a,i) 
#
               Tjb(j1,b) = Tjbai(j1,b1,a,i)*Vbbai(b,b1,a,i) 
               PUT l1b_new(j1,b) += Tjb(j1,b) 
#
            ENDDO b 
#
      ENDPARDO b1, a, j1, i 
#
# Done contributions involving integrals with three virtuals. 
# ----------------------------------------------------------- 
#
#
      ENDPROC W1EAFMBB 
#     ---------------- 
#
      PROC W1EAFM 
#     -----------  
# 
         CALL W1EAFMAA
         CALL W1EAFMAB
         CALL W1EAFMBB
         CALL W1EAFMBA
#
      ENDPROC W1EAFM 
#     -------------- 
#
      PROC L1ANEW 
#     ----------- 
# 
      PARDO a, i
#
            GET Fme_a(i,a)
            Tia(i,a) = Fme_a(i,a) #0.0
#
            DO a1
#
               GET l1a_old(i,a1)
               GET F1ae_a(a1,a)
#
               T1ia(i,a) = l1a_old(i,a1)*F1ae_a(a1,a)
               Tia(i,a) += T1ia(i,a)
#
               DO a2
#
                  GET VSaaai(a2,a1,a,i) 
                  GET Gae_a(a1,a2)
#
                  Tiaaa(i,a,a1,a2) = VSaaai(a2,a1,a,i)
                  T1ia(i,a)        = Tiaaa(i,a,a1,a2)*Gae_a(a1,a2)
                  Tia(i,a)        -= T1ia(i,a) 
#
               ENDDO a2
#
            ENDDO a1
#
            DO i1
#
               GET l1a_old(i1,a)
               GET F1mi_a(i,i1)
#
               T1ia(i,a) = l1a_old(i1,a)*F1mi_a(i,i1)
               Tia(i,a) -= T1ia(i,a)
#
               DO i2
#
                  GET Gmi_a(i2,i1)
                  GET VSpipi(a,i,i1,i2) # -
#
                  T1ia(i,a) = VSpipi(a,i,i1,i2)*Gmi_a(i2,i1)
                  Tia(i,a) -= T1ia(i,a)
#
                  DO a1
#
                     GET L2old_aa(i1,a,i2,a1)
                     GET W1imen_aa(i,i1,a1,i2)
#
                     T1ia(i,a)  = W1imen_aa(i,i1,a1,i2)*L2old_aa(i1,a,i2,a1)
                     T1ia(i,a) *= -0.5
                     Tia(i,a) += T1ia(i,a)
#
                  ENDDO a1
#
               ENDDO i2
#
            ENDDO i1
#
            DO j
#
               DO j1
#
                  GET Gmi_b(j1,j)
                  GET Vpiqj(a,i,j,j1) # +
#
                  T1ia(i,a) = Vpiqj(a,i,j,j1)*Gmi_b(j1,j)
                  Tia(i,a) -= T1ia(i,a)
#
               ENDDO j1
#
               DO i1 
               DO b
#
                  GET L2old_ab(i1,a,j,b)
                  GET W1imen_ab(i,i1,b,j)
#
                  T1ia(i,a)  = W1imen_ab(i,i1,b,j)*L2old_ab(i1,a,j,b)
#                 T1ia(i,a) *= 0.5
                  Tia(i,a) -= T1ia(i,a)
#
               ENDDO b
               ENDDO i1
#
            ENDDO j
#
            DO b
            DO b1
#
               GET Vbbai(b1,b,a,i) # +
               GET Gae_b(b,b1)
#
               T1ia(i,a)       = Vbbai(b1,b,a,i)*Gae_b(b,b1)
               Tia(i,a)       -= T1ia(i,a)
#
            ENDDO b1
            ENDDO b
#
            PUT l1a_new(i,a) += Tia(i,a)
#
      ENDPARDO a, i
#
      PARDO a, i, a1, i1
#
            GET VSpipi(a,i,a1,i1) # +
            Taiai(a,i,a1,i1)  = VSpipi(a,i,a1,i1)
#
            T2ia(i1,a1) = 0.0
#
            DO a2
#
               GET Gae_a(a2,a1)
               GET t1a_old(a2,i1)
#
               T3ia(i1,a1)  = Gae_a(a2,a1)*t1a_old(a2,i1)
               T2ia(i1,a1) += T3ia(i1,a1)
#
            ENDDO a2
#
            DO i2
#
               GET Gmi_a(i1,i2)
               GET t1a_old(a1,i2)
#
               T3ia(i1,a1)  = Gmi_a(i1,i2)*t1a_old(a1,i2)
               T2ia(i1,a1) -= T3ia(i1,a1)
#
            ENDDO i2
#
            Tia(i,a)          = Taiai(a,i,a1,i1)*T2ia(i1,a1)
            PUT l1a_new(i,a) += Tia(i,a)
#
      ENDPARDO a, i, a1, i1
#
      PARDO a, b, i, j
#
            GET Vpiqj(a,i,b,j) # +
#
            T2jb(j,b) = 0.0
#
            DO b1
#
               GET Gae_b(b1,b)
               GET t1b_old(b1,j)
#
               T3jb(j,b)  = Gae_b(b1,b)*t1b_old(b1,j)
               T2jb(j,b) += T3jb(j,b)
#
            ENDDO b1
#
            DO j1
#
               GET Gmi_b(j,j1)
               GET t1b_old(b,j1)
#
               T3jb(j,b)  = Gmi_b(j,j1)*t1b_old(b,j1)
               T2jb(j,b) -= T3jb(j,b)
#
            ENDDO j1
#
            Tia(i,a)          = Vpiqj(a,i,b,j)*T2jb(j,b)
            PUT l1a_new(i,a) += Tia(i,a)
#
      ENDPARDO a, b, i, j
#
      ENDPROC L1ANEW 
#     -------------- 
#
      PROC L1BNEW 
#     ----------- 
#
      PARDO b, j
# 
            GET Fme_b(j,b)
            Tjb(j,b) = Fme_b(j,b) #0.0
#
            DO j1
#
               GET l1b_old(j1,b)
               GET F1mi_b(j,j1)
#
               T1jb(j,b) = l1b_old(j1,b)*F1mi_b(j,j1)
               Tjb(j,b) -= T1jb(j,b)
#
               DO j2
#
                  GET Gmi_b(j2,j1)
                  GET VSqjqj(b,j,j1,j2) # +
#
                  T1jb(j,b) = VSqjqj(b,j,j1,j2)*Gmi_b(j2,j1)
                  Tjb(j,b) -= T1jb(j,b)
#
                  DO b1
#
                     GET L2old_bb(j1,b,j2,b1)
                     GET W1imen_bb(j,j1,b1,j2)
#
                     T1jb(j,b)  = W1imen_bb(j,j1,b1,j2)*L2old_bb(j1,b,j2,b1)
                     T1jb(j,b) *= -0.5
                     Tjb(j,b) += T1jb(j,b)
#
                  ENDDO b1
#
               ENDDO j2
#
            ENDDO j1
#
            DO b1
#
               GET l1b_old(j,b1)
               GET F1ae_b(b1,b)
#
               T1jb(j,b) = l1b_old(j,b1)*F1ae_b(b1,b)
               Tjb(j,b) += T1jb(j,b)
#
               DO b2
#
                  GET Gae_b(b1,b2)
                  GET VSbbbj(b2,b1,b,j) # +
#
                  T1jb(j,b) = VSbbbj(b2,b1,b,j)*Gae_b(b1,b2)
                  Tjb(j,b) -= T1jb(j,b)
#
               ENDDO b2
#
            ENDDO b1
#
            DO i
#
               DO i1
#
                  GET Gmi_a(i1,i)
                  GET Vpiqj(i,i1,b,j) # +
#
                  T1jb(j,b) = Vpiqj(i,i1,b,j)*Gmi_a(i1,i)
                  Tjb(j,b) -= T1jb(j,b)
#
               ENDDO i1
#
               DO j1
               DO a
#
                  GET L2old_ab(i,a,j1,b)
                  GET W1imen_ba(j,j1,a,i)
#
                  T1jb(j,b)  = W1imen_ba(j,j1,a,i)*L2old_ab(i,a,j1,b)
                  Tjb(j,b) -= T1jb(j,b)
#
               ENDDO a
               ENDDO j1
#
            ENDDO i
#
            DO a
            DO a1
#
               GET Gae_a(a,a1)
               GET Vaabj(a1,a,b,j) # +
#
               T1jb(j,b) = Vaabj(a1,a,b,j)*Gae_a(a,a1)
               Tjb(j,b) -= T1jb(j,b)
#
            ENDDO a1
            ENDDO a
#
            PUT l1b_new(j,b) += Tjb(j,b)
#
      ENDPARDO b, j
#
      PARDO b, b1, j, j1
#
            GET VSqjqj(b,j,b1,j1) # +
            Tbjbj(b,j1,b1,j) = VSqjqj(b,j,b1,j1)
#
            T2jb(j1,b1) = 0.0
#
            DO b2
#
               GET Gae_b(b2,b1)
               GET t1b_old(b2,j1)
#
               T3jb(j1,b1)  = Gae_b(b2,b1)*t1b_old(b2,j1)
               T2jb(j1,b1) += T3jb(j1,b1)
#
            ENDDO b2
#
            DO j2
#
               GET Gmi_b(j1,j2)
               GET t1b_old(b1,j2)
#
               T3jb(j1,b1)  = Gmi_b(j1,j2)*t1b_old(b1,j2)
               T2jb(j1,b1) -= T3jb(j1,b1)
#
            ENDDO j2
#
            Tjb(j,b) = Tbjbj(b,j1,b1,j)*T2jb(j1,b1)
#
            PUT l1b_new(j,b) += Tjb(j,b)
#
      ENDPARDO b, b1, j, j1
#
      PARDO b, a, j, i
#
            GET Vpiqj(a,i,b,j) # +
            T2ia(i,a) = 0.0
#
            DO a1
#
               GET Gae_a(a1,a)
               GET t1a_old(a1,i)
#
               T3ia(i,a)  = Gae_a(a1,a)*t1a_old(a1,i)
               T2ia(i,a) += T3ia(i,a)
#
            ENDDO a1
#
            DO i1
#
               GET Gmi_a(i,i1)
               GET t1a_old(a,i1)
#
               T3ia(i,a)  = Gmi_a(i,i1)*t1a_old(a,i1)
               T2ia(i,a) -= T3ia(i,a)
#
            ENDDO i1
#
            Tjb(j,b) = Vpiqj(a,i,b,j)*T2ia(i,a)
#
            PUT l1b_new(j,b) += Tjb(j,b)
#
      ENDPARDO b, a, j, i
#
      ENDPROC L1BNEW 
#     -------------- 
#
      PROC L2NEWAA 
#     ------------ 
#
      PARDO a, a1, i, i1
#
            GET VSpipi(a,i,a1,i1) # +
            GET l1a_old(i,a)
            GET Fme_a(i1,a1)
#
            Tiaia(i,a,i1,a1)  = VSpipi(a,i,a1,i1)
            T2iaia(i,a1,i1,a) = 0.0
            T3iaia(i1,a,i,a1) = 0.0
            T4iaia(i1,a1,i,a) = 0.0
#
            DO a2
#
               GET VSaaai(a,a2,a1,i1) 
               GET VSpipi(a,i,a2,i1) 
               GET L2old_aa(i,a,i1,a2)
               GET F1ae_a(a2,a1)
               GET l1a_old(i,a2)
               GET Gae_a(a1,a2)
               Taa(a2,a1)         = Gae_a(a1,a2)
#
               T1iaia(i,a,i1,a1)  = L2old_aa(i,a,i1,a2)*F1ae_a(a2,a1)
               Tiaia(i,a,i1,a1)  += T1iaia(i,a,i1,a1)
#
               TXiaia(i,a1,i1,a)  = T1iaia(i,a,i1,a1)
               T2iaia(i,a1,i1,a) -= TXiaia(i,a1,i1,a)
#
               Taaia(a2,a,i1,a1)  = VSaaai(a,a2,a1,i1) 
               T1iaia(i,a,i1,a1)  = Taaia(a2,a,i1,a1)*l1a_old(i,a2)
               Tiaia(i,a,i1,a1)  += T1iaia(i,a,i1,a1)
#
               TXiaia(i1,a,i,a1)  = T1iaia(i,a,i1,a1)
               T3iaia(i1,a,i,a1) -= TXiaia(i1,a,i,a1)
#
               DO i2
#
                  GET l1a_old(i2,a1)
                  GET t1a_old(a2,i2)

                  T1aa(a2,a1) = t1a_old(a2,i2)*l1a_old(i2,a1)
                  Taa(a2,a1) -= T1aa(a2,a1)
#
               ENDDO i2
#
               TXiaia(i,a,i1,a2)  = VSpipi(a,i,a2,i1) 
               T1iaia(i,a,i1,a1)  = Txiaia(i,a,i1,a2)*Taa(a2,a1)
               Tiaia(i,a,i1,a1)  += T1iaia(i,a,i1,a1)
#
               TXiaia(i,a1,i1,a)  = T1iaia(i,a,i1,a1)
               T2iaia(i,a1,i1,a) -= TXiaia(i,a1,i1,a)
#
            ENDDO a2
#
            DO i2
#
               GET Gmi_a(i2,i1)
               GET L2old_aa(i,a,i2,a1)
               GET F1mi_a(i1,i2)
               GET l1a_old(i2,a)
               GET VSpipi(i2,i,a1,i1) 
               GET VSpipi(a,i,a1,i2) 
#
               T1iaia(i,a,i1,a1)  = L2old_aa(i,a,i2,a1)*F1mi_a(i1,i2)
               T1iaia(i,a,i1,a1) *= -1.0
#
               Tii(i1,i2)         = Gmi_a(i2,i1)
               Tiaia(i,a,i1,a1)  += T1iaia(i,a,i1,a1)
#
               TXiaia(i1,a,i,a1)  = T1iaia(i,a,i1,a1)
               T3iaia(i1,a,i,a1) -= TXiaia(i1,a,i,a1)
#
               T1iaia(i,a,i1,a1)  = VSpipi(i2,i,a1,i1)*l1a_old(i2,a)
               Tiaia(i,a,i1,a1)  -= T1iaia(i,a,i1,a1)
#
               TXiaia(i,a1,i1,a)  = T1iaia(i,a,i1,a1)
               T2iaia(i,a1,i1,a) += TXiaia(i,a1,i1,a)
#
               DO a2
#
                  GET l1a_old(i1,a2)
                  GET t1a_old(a2,i2)
#
                  T1ii(i1,i2) = l1a_old(i1,a2)*t1a_old(a2,i2)
                  Tii(i1,i2) += T1ii(i1,i2)
#
               ENDDO a2
#
               T1iaia(i,a,i1,a1)  = VSpipi(a,i,a1,i2)*Tii(i1,i2)
               Tiaia(i,a,i1,a1)  -= T1iaia(i,a,i1,a1)
#
               TXiaia(i1,a,i,a1)  = T1iaia(i,a,i1,a1)
               T3iaia(i1,a,i,a1) += TXiaia(i1,a,i,a1)
#
               DO i3
#
                  GET L2old_aa(i2,a,i3,a1)
                  GET W1minj_aa(i,i2,i1,i3)
#
                  T1iaia(i,a,i1,a1)  = W1minj_aa(i,i2,i1,i3)*L2old_aa(i2,a,i3,a1)
                  T1iaia(i,a,i1,a1) *= 0.5
                  Tiaia(i,a,i1,a1)  += T1iaia(i,a,i1,a1)
#
               ENDDO i3
#
            ENDDO i2
#
            T1iaia(i,a,i1,a1)  = l1a_old(i,a)^Fme_a(i1,a1)
            Tiaia(i,a,i1,a1)  += T1iaia(i,a,i1,a1)
#
            TXiaia(i,a1,i1,a)  = T1iaia(i,a,i1,a1)
            T2iaia(i,a1,i1,a) -= TXiaia(i,a1,i1,a)
#
            TXiaia(i1,a,i,a1)  = T1iaia(i,a,i1,a1)
            T3iaia(i1,a,i,a1) -= TXiaia(i1,a,i,a1)
#
            TXiaia(i1,a1,i,a)  = T1iaia(i,a,i1,a1)
            T4iaia(i1,a1,i,a) += TXiaia(i1,a1,i,a)
#
            PUT L2new_aa(i,a,i1,a1) +=  Tiaia(i,a,i1,a1)
            PUT L2new_aa(i,a1,i1,a) += T2iaia(i,a1,i1,a)
            PUT L2new_aa(i1,a,i,a1) += T3iaia(i1,a,i,a1)
            PUT L2new_aa(i1,a1,i,a) += T4iaia(i1,a1,i,a)
#
      ENDPARDO a, a1, i, i1
# 
      ENDPROC L2NEWAA 
#     --------------- 
#
      PROC L2NEWAB 
#     ------------ 
#
      PARDO a, i, b, j 
#
            GET Vpiqj(a,i,b,j)
            GET l1a_old(i,a)
            GET Fme_b(j,b)
            GET l1b_old(j,b)
            GET Fme_a(i,a)
#
            Tiajb(i,a,j,b) = Vpiqj(a,i,b,j)
#
            DO b1
#
               GET L2old_ab(i,a,j,b1)
               GET Vbbai(b,b1,a,i)
               GET Vpiqj(a,i,b1,j)
               GET F1ae_b(b1,b)
               GET l1b_old(j,b1)
               GET Gae_b(b,b1)
               Tbb(b1,b)       = Gae_b(b,b1)
#
               T1iajb(i,a,j,b) = L2old_ab(i,a,j,b1)*F1ae_b(b1,b)
               Tiajb(i,a,j,b) += T1iajb(i,a,j,b)
#
#              Viabb(i,a,b1,b) = Vbbai(b,b1,a,i) 
#              T1iajb(i,a,j,b) = Viabb(i,a,b1,b)*l1b_old(j,b1)
#
               Tbjai(b,j,a,i)  = Vbbai(b,b1,a,i)*l1b_old(j,b1)
               T1iajb(i,a,j,b) = Tbjai(b,j,a,i) 
#
               Tiajb(i,a,j,b) += T1iajb(i,a,j,b)
#
               DO j1
#
                  GET l1b_old(j1,b)
                  GET t1b_old(b1,j1)
#
                  T1bb(b1,b) = t1b_old(b1,j1)*l1b_old(j1,b)
                  Tbb(b1,b) -= T1bb(b1,b)
#
               ENDDO j1
#
               Viajb(i,a,j,b1) = Vpiqj(a,i,b1,j)  
               T1iajb(i,a,j,b) = Viajb(i,a,j,b1)*Tbb(b1,b)
               Tiajb(i,a,j,b) += T1iajb(i,a,j,b)
#
            ENDDO b1
#
            DO a1
#
               GET Gae_a(a,a1)
               GET L2old_ab(i,a1,j,b)
               GET F1ae_a(a1,a)
               GET l1a_old(i,a1)
               GET Vaabj(a,a1,b,j)
               GET Vpiqj(a1,i,b,j)
#
               Taa(a1,a)       = Gae_a(a,a1)
               T1iajb(i,a,j,b) = L2old_ab(i,a1,j,b)*F1ae_a(a1,a)
               Tiajb(i,a,j,b) += T1iajb(i,a,j,b)
#
               Vaajb(a1,a,j,b) = Vaabj(a,a1,b,j) 
               T1iajb(i,a,j,b) = Vaajb(a1,a,j,b)*l1a_old(i,a1)
               Tiajb(i,a,j,b) += T1iajb(i,a,j,b)
#
               DO i1
#
                  GET l1a_old(i1,a)
                  GET t1a_old(a1,i1)
#
                  T1aa(a1,a) = t1a_old(a1,i1)*l1a_old(i1,a)
                  Taa(a1,a) -= T1aa(a1,a)
#
               ENDDO i1
#
               Viajb(i,a1,j,b) = Vpiqj(a1,i,b,j) 
               T1iajb(i,a,j,b) = Viajb(i,a1,j,b)*Taa(a1,a)
               Tiajb(i,a,j,b) += T1iajb(i,a,j,b)
#
            ENDDO a1
#
            DO j1
#
               GET Gmi_b(j1,j)
               GET L2old_ab(i,a,j1,b)
               GET F1mi_b(j,j1)
               GET l1b_old(j1,b)
               GET Vpiqj(a,i,j1,j)
#
               Tjj(j,j1)       = Gmi_b(j1,j)
               T1iajb(i,a,j,b) = L2old_ab(i,a,j1,b)*F1mi_b(j,j1)
               Tiajb(i,a,j,b) -= T1iajb(i,a,j,b)
#
               T1iajb(i,a,j,b) = Vpiqj(a,i,j1,j)*l1b_old(j1,b)
               Tiajb(i,a,j,b) -= T1iajb(i,a,j,b)
#
               DO b1
#
                  GET l1b_old(j,b1)
                  GET t1b_old(b1,j1)
#
                  T1jj(j,j1) = l1b_old(j,b1)*t1b_old(b1,j1)
                  Tjj(j,j1) += T1jj(j,j1)
#
               ENDDO b1
#
               GET Vpiqj(a,i,b,j1)
               T1iajb(i,a,j,b) = Vpiqj(a,i,b,j1)*Tjj(j,j1)
               Tiajb(i,a,j,b) -= T1iajb(i,a,j,b)
#
            ENDDO j1
#
            DO i1
#
               GET Gmi_a(i1,i)
               GET L2old_ab(i1,a,j,b)
               GET F1mi_a(i,i1)
               GET l1a_old(i1,a)
               GET Vpiqj(i1,i,b,j)
               GET Vpiqj(a,i1,b,j)
#
               Tii(i,i1)       = Gmi_a(i1,i)
               T1iajb(i,a,j,b) = L2old_ab(i1,a,j,b)*F1mi_a(i,i1)
               Tiajb(i,a,j,b) -= T1iajb(i,a,j,b)
#
               T1iajb(i,a,j,b) = Vpiqj(i1,i,b,j)*l1a_old(i1,a)
               Tiajb(i,a,j,b) -= T1iajb(i,a,j,b)
#
               DO a1
#
                  GET l1a_old(i,a1)
                  GET t1a_old(a1,i1)
#
                  T1ii(i,i1) = l1a_old(i,a1)*t1a_old(a1,i1)
                  Tii(i,i1) += T1ii(i,i1)
#
               ENDDO a1
#
               T1iajb(i,a,j,b) = Vpiqj(a,i1,b,j)*Tii(i,i1)
               Tiajb(i,a,j,b) -= T1iajb(i,a,j,b)
#
               DO j1
#
                  GET L2old_ab(i1,a,j1,b)
                  GET W1minj_ab(i,i1,j,j1)
#
                  T1iajb(i,a,j,b) = L2old_ab(i1,a,j1,b)* W1minj_ab(i,i1,j,j1)
                  Tiajb(i,a,j,b) += T1iajb(i,a,j,b) # VFL
#
               ENDDO j1
#
            ENDDO i1
#
            T1iajb(i,a,j,b) = l1a_old(i,a)^Fme_b(j,b)
            Tiajb(i,a,j,b) += T1iajb(i,a,j,b)
#
            T1iajb(i,a,j,b) = Fme_a(i,a)^l1b_old(j,b)
            Tiajb(i,a,j,b) += T1iajb(i,a,j,b)
#
            PUT L2new_ab(i,a,j,b) += Tiajb(i,a,j,b)
#
      ENDPARDO a, i, b, j 
#
      ENDPROC L2NEWAB 
#     --------------- 
#
      PROC L2NEWBB 
#     ------------ 
#
      PARDO b1, b, j1, j 
#
            GET VSqjqj(b1,j1,b,j) # + 
            GET l1b_old(j1,b1)
            GET Fme_b(j,b)
#
            Tjbjb(j1,b1,j,b)  = VSqjqj(b1,j1,b,j) 
            T2jbjb(j,b1,j1,b) = 0.0  
            T3jbjb(j1,b,j,b1) = 0.0  
            T4jbjb(j,b,j1,b1) = 0.0  
#
            DO b2
#
               GET VSbbbj(b1,b2,b,j) 
               GET VSqjqj(b1,j1,b2,j) 
               GET L2old_bb(j1,b1,j,b2)
               GET Gae_b(b,b2)
               GET F1ae_b(b2,b)
               GET l1b_old(j1,b2)
               Tbb(b2,b)          = Gae_b(b,b2)
#
               T1jbjb(j1,b1,j,b) = L2old_bb(j1,b1,j,b2)*F1ae_b(b2,b)
               Tjbjb(j1,b1,j,b) += T1jbjb(j1,b1,j,b)
#
               TXjbjb(j1,b,j,b1)  = T1jbjb(j1,b1,j,b)
               T3jbjb(j1,b,j,b1) -= TXjbjb(j1,b,j,b1)
#
               Tbbjb(b2,b1,j,b)   = VSbbbj(b1,b2,b,j) 
               T1jbjb(j1,b1,j,b)  = Tbbjb(b2,b1,j,b)*l1b_old(j1,b2)
               Tjbjb(j1,b1,j,b)  += T1jbjb(j1,b1,j,b)
#
               TXjbjb(j,b1,j1,b)  = T1jbjb(j1,b1,j,b)
               T2jbjb(j,b1,j1,b) -= TXjbjb(j,b1,j1,b)
#
               DO j2
#
                  GET l1b_old(j2,b)
                  GET t1b_old(b2,j2)
#
                  T1bb(b2,b) = t1b_old(b2,j2)*l1b_old(j2,b)
                  Tbb(b2,b) -= T1bb(b2,b)
#
               ENDDO j2
#
               TXjbjb(j1,b1,j,b2) = VSqjqj(b1,j1,b2,j) 
               T1jbjb(j1,b1,j,b)  = TXjbjb(j1,b1,j,b2)*Tbb(b2,b)
               Tjbjb(j1,b1,j,b)  += T1jbjb(j1,b1,j,b)
#
               TXjbjb(j1,b,j,b1)  = T1jbjb(j1,b1,j,b)
               T3jbjb(j1,b,j,b1) -= TXjbjb(j1,b,j,b1)
#
            ENDDO b2
#
            DO j2
#
               GET L2old_bb(j1,b1,j2,b)
               GET VSqjqj(j2,j1,b,j) 
               GET VSqjqj(b1,j1,b,j2) 
               GET F1mi_b(j,j2)
               GET Gmi_b(j2,j)
               GET l1b_old(j2,b1)
#
               T1jbjb(j1,b1,j,b)  = L2old_bb(j1,b1,j2,b)*F1mi_b(j,j2)
               T1jbjb(j1,b1,j,b) *= -1.0
               Tjbjb(j1,b1,j,b)  += T1jbjb(j1,b1,j,b)
#
               Tjj(j,j2)          = Gmi_b(j2,j)
               TXjbjb(j,b1,j1,b)  = T1jbjb(j1,b1,j,b)
               T2jbjb(j,b1,j1,b) -= TXjbjb(j,b1,j1,b)
#
               T1jbjb(j1,b1,j,b)  = VSqjqj(j2,j1,b,j)*l1b_old(j2,b1)
               Tjbjb(j1,b1,j,b)  -= T1jbjb(j1,b1,j,b)
#
               TXjbjb(j1,b,j,b1)  = T1jbjb(j1,b1,j,b)
               T3jbjb(j1,b,j,b1) += TXjbjb(j1,b,j,b1)
#
               DO b2
#
                  GET l1b_old(j,b2)
                  GET t1b_old(b2,j2)
#
                  T1jj(j,j2) = l1b_old(j,b2)*t1b_old(b2,j2)
                  Tjj(j,j2) += T1jj(j,j2)
#
               ENDDO b2
#
               T1jbjb(j1,b1,j,b)  = VSqjqj(b1,j1,b,j2)*Tjj(j,j2)
               T1jbjb(j1,b1,j,b) *= -1.0
               Tjbjb(j1,b1,j,b)  += T1jbjb(j1,b1,j,b)
#
               TXjbjb(j,b1,j1,b)  = T1jbjb(j1,b1,j,b)
               T2jbjb(j,b1,j1,b) -= TXjbjb(j,b1,j1,b)
#
               DO j3
#
                  GET L2old_bb(j2,b1,j3,b)
                  GET W1minj_bb(j1,j2,j,j3)
#
                  T1jbjb(j1,b1,j,b)  = L2old_bb(j2,b1,j3,b)*W1minj_bb(j1,j2,j,j3)
                  T1jbjb(j1,b1,j,b) *= 0.5
                  Tjbjb(j1,b1,j,b)  += T1jbjb(j1,b1,j,b)
#
               ENDDO j3
#
            ENDDO j2
#
            T1jbjb(j1,b1,j,b)  = l1b_old(j1,b1)^Fme_b(j,b)
            Tjbjb(j1,b1,j,b)  += T1jbjb(j1,b1,j,b)
#
            TXjbjb(j1,b,j,b1)  = T1jbjb(j1,b1,j,b)
            T3jbjb(j1,b,j,b1) -= TXjbjb(j1,b,j,b1)
#
            TXjbjb(j,b1,j1,b)  = T1jbjb(j1,b1,j,b)
            T2jbjb(j,b1,j1,b) -= TXjbjb(j,b1,j1,b)
#
            TXjbjb(j,b,j1,b1)  = T1jbjb(j1,b1,j,b)
            T4jbjb(j,b,j1,b1) += TXjbjb(j,b,j1,b1)
#
            PUT L2NEW_bb(j1,b1,j,b) +=  Tjbjb(j1,b1,j,b)
            PUT L2NEW_bb(j,b1,j1,b) += T2jbjb(j,b1,j1,b)
            PUT L2NEW_bb(j1,b,j,b1) += T3jbjb(j1,b,j,b1)
            PUT L2NEW_bb(j,b,j1,b1) += T4jbjb(j,b,j1,b1)
#
      ENDPARDO b1, b, j1, j 
# 
      ENDPROC L2NEWBB 
#     --------------- 
#
      PROC CLEANLITER
#     ---------------
#
           delete l1a_new
           delete l1b_new
           delete L2new_aa
           delete L2new_bb
           delete L2new_ab
           delete Gae_a
           delete Gae_b
           delete Gmi_a
           delete Gmi_b
#
      ENDPROC CLEANLITER
#     ------------------ 
#
      PROC UPDATEL2
#     -------------
#
      PARDO a, a1, i, i1
#
            GET                        L2old_aa(i,a,i1,a1)
            GET                        L2new_aa(i,a,i1,a1)
            Tiaia(i,a,i1,a1)         = L2new_aa(i,a,i1,a1)
            T1iaia(i,a,i1,a1)        = L2old_aa(i,a,i1,a1)
            execute energy_denominator Tiaia
            t1iaia(i,a,i1,a1) += tiaia(i,a,i1,a1)
            t1iaia(i,a,i1,a1) *= -1.0
#
            if kiter == 1
               PREPARE e1iaia(i,a,i1,a1) = T1iaia(i,a,i1,a1)
            endif
#
            if kiter == 2
               PREPARE e2iaia(i,a,i1,a1) = T1iaia(i,a,i1,a1)
            endif
#
            if kiter == 3
               PREPARE e3iaia(i,a,i1,a1) = T1iaia(i,a,i1,a1)
            endif
#
            if kiter == 4
               PREPARE e4iaia(i,a,i1,a1) = T1iaia(i,a,i1,a1)
            endif
#
            if kiter >= 5
               PREPARE e5iaia(i,a,i1,a1) = T1iaia(i,a,i1,a1)
            endif
#
      ENDPARDO a, a1, i, i1
#
      PARDO b, b1, j, j1
#
            GET                        L2old_bb(j,b,j1,b1)
            GET                        L2new_bb(j,b,j1,b1)
            Tjbjb(j,b,j1,b1)         = L2new_bb(j,b,j1,b1)
            T1jbjb(j,b,j1,b1)        = L2old_bb(j,b,j1,b1)
            execute energy_denominator Tjbjb
            t1jbjb(j,b,j1,b1) += tjbjb(j,b,j1,b1)
            t1jbjb(j,b,j1,b1) *= -1.0
#
            if kiter == 1
               PREPARE e1jbjb(j,b,j1,b1) = T1jbjb(j,b,j1,b1)
            endif
#
            if kiter == 2
               PREPARE e2jbjb(j,b,j1,b1) = T1jbjb(j,b,j1,b1)
            endif
#
            if kiter == 3
               PREPARE e3jbjb(j,b,j1,b1) = T1jbjb(j,b,j1,b1)
            endif
#
            if kiter == 4
               PREPARE e4jbjb(j,b,j1,b1) = T1jbjb(j,b,j1,b1)
            endif
#
            if kiter >= 5
               PREPARE e5jbjb(j,b,j1,b1) = T1jbjb(j,b,j1,b1)
            endif
#
      ENDPARDO b, b1, j, j1
#
      PARDO b, a, j, i
#
            GET                        L2old_ab(i,a,j,b)
            GET                        L2new_ab(i,a,j,b)
            Tiajb(i,a,j,b)           = L2new_ab(i,a,j,b)
            T1iajb(i,a,j,b)          = L2old_ab(i,a,j,b)
            execute energy_denominator Tiajb
            t1iajb(i,a,j,b)         += tiajb(i,a,j,b)
            t1iajb(i,a,j,b)         *= -1.0
#
            if kiter == 1
               PREPARE e1iajb(i,a,j,b) = T1iajb(i,a,j,b)
            endif
#
            if kiter == 2
               PREPARE e2iajb(i,a,j,b) = T1iajb(i,a,j,b)
            endif
#
            if kiter == 3
               PREPARE e3iajb(i,a,j,b) = T1iajb(i,a,j,b)
            endif
#
            if kiter == 4
               PREPARE e4iajb(i,a,j,b) = T1iajb(i,a,j,b)
            endif
#
            if kiter >= 5
               PREPARE e5iajb(i,a,j,b) = T1iajb(i,a,j,b)
            endif
#
      ENDPARDO b, a, j, i

      execute sip_barrier   # needed due to load-blancing pardo
     
      PARDO a, a1, i, i1
#
            GET                        L2new_aa(i,a,i1,a1)
            Tiaia(i,a,i1,a1)     = -1.0 * L2new_aa(i,a,i1,a1)
            execute energy_denominator Tiaia(i,a,i1,a1)
            PUT L2old_aa(i,a,i1,a1)  = Tiaia(i,a,i1,a1)  
#
      ENDPARDO a, a1, i, i1
#
      PARDO b, b1, j, j1
#
            GET                        L2new_bb(j,b,j1,b1)
            Tjbjb(j,b,j1,b1)     = -1.0 * L2new_bb(j,b,j1,b1)
            execute energy_denominator Tjbjb(j,b,j1,b1)
            PUT L2old_bb(j,b,j1,b1)  = Tjbjb(j,b,j1,b1)  
#
      ENDPARDO b, b1, j, j1
#
#
      PARDO b, a, j, i
#
            GET                        L2new_ab(i,a,j,b)
            Tiajb(i,a,j,b)      = -1.0 * L2new_ab(i,a,j,b)
            execute energy_denominator Tiajb(i,a,j,b)
            PUT L2old_ab(i,a,j,b)    = Tiajb(i,a,j,b)  
#
      ENDPARDO b, a, j, i
#
      ENDPROC UPDATEL2
#     ----------------
#
      PROC UPDATEL1
#     -------------
#
      PARDO a, i 
#
            GET                        l1a_new(i,a)
            GET                        l1a_old(i,a)
            tia(i,a)                 = l1a_new(i,a) 
            t1ia(i,a)                = l1a_old(i,a) 
            execute energy_denominator tia(i,a)
            t1ia(i,a)               += tia(i,a) 
            t1ia(i,a)               *= -1.0
#
            if kiter == 1
               PUT e1ia(i,a) = T1ia(i,a)
            endif
#
            if kiter == 2
               PUT e2ia(i,a) = T1ia(i,a)
            endif
#
            if kiter == 3
               PUT e3ia(i,a) = T1ia(i,a)
            endif
#
            if kiter == 4
               PUT e4ia(i,a) = T1ia(i,a)
            endif
#
            if kiter >= 5
               PUT e5ia(i,a) = T1ia(i,a)
            endif
#
      ENDPARDO a, i 
#
      PARDO b, j 
#
            GET                        l1b_new(j,b)
            GET                        l1b_old(j,b)
            tjb(j,b)                 = l1b_new(j,b) 
            t1jb(j,b)                = l1b_old(j,b) 
            execute energy_denominator tjb(j,b)
            t1jb(j,b)               += tjb(j,b) 
            t1jb(j,b)               *= -1.0
#
            if kiter == 1
               PUT e1jb(j,b) = T1jb(j,b)
            endif
#
            if kiter == 2
               PUT e2jb(j,b) = T1jb(j,b)
            endif
#
            if kiter == 3
               PUT e3jb(j,b) = T1jb(j,b)
            endif
#
            if kiter == 4
               PUT e4jb(j,b) = T1jb(j,b)
            endif
#
            if kiter >= 5
               PUT e5jb(j,b) = T1jb(j,b)
            endif
#
      ENDPARDO b, j 
#
      execute sip_barrier  # needed due to load_balancing pardo
      PARDO a, i
#
            GET                        l1a_new(i,a)
            tia(i,a)           = -1.0 * l1a_new(i,a)
            execute energy_denominator tia(i,a)
            PUT l1a_old(i,a)         = tia(i,a)
#
      ENDPARDO a, i
#
      PARDO b, j
#
            GET                        l1b_new(j,b)
            tjb(j,b)           = -1.0 * l1b_new(j,b)
            execute energy_denominator tjb(j,b)
            PUT l1b_old(j,b)         = tjb(j,b)
#
      ENDPARDO b, j 
#
      ENDPROC UPDATEL1
#     ----------------
#
      PROC MOVEL2 
#     ----------- 
#
      PARDO a, a1, i, i1
#
            GET                L2old_aa(i,a,i1,a1)
            tiaia(i,a,i1,a1) = L2old_aa(i,a,i1,a1)
#
            if kiter == 1
               PREPARE d1iaia(i,a,i1,a1) = tiaia(i,a,i1,a1)
            endif 
#
            if kiter == 2
               PREPARE d2iaia(i,a,i1,a1) = tiaia(i,a,i1,a1)
            endif 
#
            if kiter == 3
               PREPARE d3iaia(i,a,i1,a1) = tiaia(i,a,i1,a1)
            endif 
#
            if kiter == 4
               PREPARE d4iaia(i,a,i1,a1) = tiaia(i,a,i1,a1)
            endif 
#
            if kiter >= 5
               PREPARE d4iaia(i,a,i1,a1) = tiaia(i,a,i1,a1)
            endif 
#
      ENDPARDO a, a1, i, i1
#
      PARDO b, b1, j, j1
#
            GET                L2old_bb(j,b,j1,b1)
            tjbjb(j,b,j1,b1) = L2old_bb(j,b,j1,b1)
#
            if kiter == 1
               PREPARE d1jbjb(j,b,j1,b1) = tjbjb(j,b,j1,b1)
            endif 
#
            if kiter == 2
               PREPARE d2jbjb(j,b,j1,b1) = tjbjb(j,b,j1,b1)
            endif 
#
            if kiter == 3
               PREPARE d3jbjb(j,b,j1,b1) = tjbjb(j,b,j1,b1)
            endif 
#
            if kiter == 4
               PREPARE d4jbjb(j,b,j1,b1) = tjbjb(j,b,j1,b1)
            endif 
#
            if kiter >= 5
               PREPARE d4jbjb(j,b,j1,b1) = tjbjb(j,b,j1,b1)
            endif 
#
      ENDPARDO b, b1, j, j1
#
      PARDO a, b, i, j
#
            GET              L2old_ab(i,a,j,b)
            tiajb(i,a,j,b) = L2old_ab(i,a,j,b)
#
            if kiter == 1
               PREPARE d1iajb(i,a,j,b) = tiajb(i,a,j,b)
            endif 
#
            if kiter == 2
               PREPARE d2iajb(i,a,j,b) = tiajb(i,a,j,b)
            endif 
#
            if kiter == 3
               PREPARE d3iajb(i,a,j,b) = tiajb(i,a,j,b)
            endif 
#
            if kiter == 4
               PREPARE d4iajb(i,a,j,b) = tiajb(i,a,j,b)
            endif 
#
            if kiter >= 5
               PREPARE d4iajb(i,a,j,b) = tiajb(i,a,j,b)
            endif 
#
      ENDPARDO a, b, i, j
#
      ENDPROC MOVEL2 
#     -------------- 
#
      PROC MOVEL1
#     ------------
#
      PARDO a, i
#
            GET        l1a_old(i,a)
            tia(i,a) = l1a_old(i,a)
#
            if kiter == 1
               PUT d1ia(i,a) = tia(i,a)
            endif
#
            if kiter == 2
               PUT d2ia(i,a) = tia(i,a)
            endif
#
            if kiter == 3
               PUT d3ia(i,a) = tia(i,a)
            endif
#
            if kiter == 4
               PUT d4ia(i,a) = tia(i,a)
            endif
#
            if kiter >= 5
               PUT d4ia(i,a) = tia(i,a)
            endif
#
      ENDPARDO a, i
#
      PARDO b, j
#
            GET        l1b_old(j,b)
            tjb(j,b) = l1b_old(j,b)
#
            if kiter == 1
               PUT d1jb(j,b) = tjb(j,b)
            endif
#
            if kiter == 2
               PUT d2jb(j,b) = tjb(j,b)
            endif
#
            if kiter == 3
               PUT d3jb(j,b) = tjb(j,b)
            endif
#
            if kiter == 4
               PUT d4jb(j,b) = tjb(j,b)
            endif
#
            if kiter >= 5
               PUT d4jb(j,b) = tjb(j,b)
            endif
#
      ENDPARDO b, j
#
      ENDPROC MOVEL1
#     --------------
#
#    ------------------------------------------------------------------------
#
     PROC LIGUESS
#
#    ------------------------------------------------------------------------
#
     PARDO a, a1, i, i1
#
           GET T2old_aa(a,i,a1,i1)
           Tiaia(i,a,i1,a1) = T2old_aa(a,i,a1,i1)
           PUT L2old_aa(i,a,i1,a1) = Tiaia(i,a,i1,a1)
           PREPARE D0iaia(i,a,i1,a1) = Tiaia(i,a,i1,a1) 
#
     ENDPARDO a, a1, i, i1
#
     PARDO b, b1, j, j1
#
           GET T2old_bb(b,j,b1,j1)
           Tjbjb(j,b,j1,b1) = T2old_bb(b,j,b1,j1)
           PUT L2old_bb(j,b,j1,b1) = Tjbjb(j,b,j1,b1)
           PREPARE D0jbjb(j,b,j1,b1) = Tjbjb(j,b,j1,b1)
#
     ENDPARDO b, b1, j, j1
#
     PARDO b, a, j, i
#
           GET T2old_ab(a,i,b,j)
           Tiajb(i,a,j,b) = T2old_ab(a,i,b,j)
           PUT L2old_ab(i,a,j,b) = Tiajb(i,a,j,b)
           PREPARE D0iajb(i,a,j,b) = Tiajb(i,a,j,b)
#
     ENDPARDO b, a, j, i
#
     PARDO a, i
#
           GET t1a_old(a,i)
           tia(i,a) = t1a_old(a,i)
           PUT l1a_old(i,a) = tia(i,a)
           PUT D0ia(i,a) = tia(i,a)
#
     ENDPARDO a, i
     PARDO b, j
#
           GET t1b_old(b,j)
           tjb(j,b) = t1b_old(b,j)
           PUT l1b_old(j,b) = tjb(j,b)
           PUT D0jb(j,b) = tjb(j,b)
#
     ENDPARDO b, j 
#
#    ------------------------------------------------------------------------
#
     ENDPROC LIGUESS
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
     PROC LENERGY
#
#    ------------------------------------------------------------------------
#
     esum    = 0.0
     ecorraa = 0.0
     PARDO a, a1, i, i1
#
           GET VSpipi(a,i,a1,i1)
           GET L2new_aa(i,a,i1,a1)
#
           GET l1a_new(i1,a1)
           GET l1a_new(i1,a)
           GET l1a_new(i,a1)
           GET l1a_new(i,a)
#
           tia(i1,a1)         =          l1a_new(i1,a1)
           T2iaia(i,a,i1,a1)  = l1a_new(i,a)^tia(i1,a1)
           tia(i,a1)          =           l1a_new(i,a1)
           T3iaia(i,a,i1,a1)  = l1a_new(i1,a)^tia(i,a1)
           T2iaia(i,a,i1,a1) -= T3iaia(i,a,i1,a1)
           T2iaia(i,a,i1,a1)  = L2new_aa(i,a,i1,a1)
#
           etemp = VSpipi(a,i,a1,i1)*T2iaia(i,a,i1,a1)
           etemp = 0.25*etemp
           esum += etemp
#
     ENDPARDO a, a1, i, i1
#
     execute sip_barrier Vblock
     collective ecorraa += esum
     execute sip_barrier Vblock
     execute print_scalar ecorraa
#
     esum    = 0.0
     ecorrbb = 0.0
     PARDO b, b1, j, j1
#
           GET VSqjqj(b,j,b1,j1)
           GET L2new_bb(j,b,j1,b1)
#
           GET l1b_new(j1,b1)
           GET l1b_new(j1,b)
           GET l1b_new(j,b1)
           GET l1b_new(j,b)
#
           tjb(j1,b1)         =          l1b_new(j1,b1)
           T2jbjb(j,b,j1,b1)  = l1b_new(j,b)^tjb(j1,b1)
           tjb(j,b1)          =           l1b_new(j,b1)
           T3jbjb(j,b,j1,b1)  = l1b_new(j1,b)^tjb(j,b1)
           T2jbjb(j,b,j1,b1) -= T3jbjb(j,b,j1,b1)
           T2jbjb(j,b,j1,b1)  = L2new_bb(j,b,j1,b1)
#
           etemp = VSqjqj(b,j,b1,j1)*T2jbjb(j,b,j1,b1)
           etemp = 0.25*etemp
           esum += etemp
#
     ENDPARDO b, b1, j, j1
#
     execute sip_barrier Vblock
     collective ecorrbb += esum
     execute sip_barrier Vblock
     execute print_scalar ecorrbb
#
     ecorrab = 0.0
     esum    = 0.0
     PARDO a, b, i, j
#
           GET Vpiqj(a,i,b,j)
           GET L2new_ab(i,a,j,b)
           GET l1a_new(i,a)
           GET l1b_new(j,b)
#
           Tiajb(i,a,j,b)  = l1a_new(i,a)^l1b_new(j,b)
           Tiajb(i,a,j,b)  = L2new_ab(i,a,j,b)
#
           etemp = Tiajb(i,a,j,b)*Vpiqj(a,i,b,j)
           esum += etemp
#
     ENDPARDO a, b, i, j
     execute sip_barrier Vblock
     collective ecorrab += esum
     execute sip_barrier Vblock
     execute print_scalar ecorrab
#
     ecorrT  = ecorraa
     ecorrT += ecorrbb
     ecorrT += ecorrab
     execute print_scalar ecorrT 
#
#    ------------------------------------------------------------------------
#
     ENDPROC LENERGY
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
     PROC LOLDENERGY
#
#    ------------------------------------------------------------------------
#
     esuma   = 0.0
     ecorraa = 0.0
     PARDO a, a1, i, i1
#
           GET VSpipi(a,i,a1,i1)
           GET L2old_aa(i,a,i1,a1)
#
           etemp = VSpipi(a,i,a1,i1)*L2old_aa(i,a,i1,a1)
           etemp = 0.25*etemp
           esuma += etemp
#
     ENDPARDO a, a1, i, i1
#
#
     esumb   = 0.0
     ecorrbb = 0.0
     PARDO b, b1, j, j1
#
           GET VSqjqj(b,j,b1,j1)
           GET L2old_bb(j,b,j1,b1)
#
           etemp = VSqjqj(b,j,b1,j1)*L2old_bb(j,b,j1,b1)
           etemp = 0.25*etemp
           esumb += etemp
#
     ENDPARDO b, b1, j, j1
#
     ecorrab = 0.0
     esumab  = 0.0
     PARDO a, b, i, j
#
           GET Vpiqj(a,i,b,j)
           GET L2old_ab(i,a,j,b)
#
           etemp = L2old_ab(i,a,j,b)*Vpiqj(a,i,b,j)
           esumab += etemp
#
     ENDPARDO a, b, i, j

     execute sip_barrier
     collective ecorraa += esuma
     execute print_scalar ecorraa
     collective ecorrbb += esumb
     execute print_scalar ecorrbb
     collective ecorrab += esumab
     execute print_scalar ecorrab
#
     ecorrT  = ecorraa + ecorrbb
     ecorrT += ecorrab
     execute print_scalar ecorrT 
#
#    ------------------------------------------------------------------------
#
     ENDPROC LOLDENERGY
#
#    ------------------------------------------------------------------------
#
# In this superprocedure the contributions to the lambda amplitude
# equations from the W^{ef}_{ab} intermediate are computed. The
# contributions are split into two pieces, those using;
# 
# 1. the V^{ab}_{cd} integrals --> PROC LLADDER  
# 2. not using the V^{ab}_{cd} integrals
#    a. L1 contributions       --> PROC L1WABCD 
#    b. L2 contributions       --> PROC L2WABCD 
#
# ------------------------------------------------------------------------------- 
#
      PROC LLADDER 
#     ------------ 
#
# ------------------------------------------------------------------------------- 
#
#     Compute half back transformed 2-particle lambda arrays 
#     ------------------------------------------------------ 
#
      CREATE Z2AA
      CREATE Z2AB
      CREATE Z2BB
      CREATE L2AO_aa
      CREATE L2AO_ab
      CREATE L2AO_bb
      execute sip_barrier ca 
#
#     AA spin combination 
#     ------------------- 
#
      PARDO a, a1, i, i1  
#
            GET L2old_aa(i1,a1,i,a) # +  
            GET L2old_aa(i1,a,i,a1) # -  
#
            Tiaia(i1,a1,i,a)  = L2old_aa(i1,a1,i,a)  
            T1iaia(i1,a1,i,a) = L2old_aa(i1,a,i,a1)  
            Tiaia(i1,a1,i,a) -= T1iaia(i1,a1,i,a)  
# 
            DO mu 
#
               Tiaix(i1,a1,i,mu) = Tiaia(i1,a1,i,a)*ca(mu,a) 
               Zaa(i,mu,i1,a1)   = Tiaix(i1,a1,i,mu) 
#
               DO nu 
#
                  Tixix(i,mu,i1,nu)     = Zaa(i,mu,i1,a1)*ca(nu,a1) 
                  PUT Z2aa(i,mu,i1,nu) += Tixix(i,mu,i1,nu)  
#
               ENDDO nu 
#
            ENDDO mu 
#
      ENDPARDO a, a1, i, i1  
#
#     BB spin combination 
#     ------------------- 
#
      PARDO b, b1, j, j1  
#
            GET L2old_bb(j1,b1,j,b) # +  
            GET L2old_bb(j1,b,j,b1) # -  
#
            Tjbjb(j1,b1,j,b)  = L2old_bb(j1,b1,j,b)  
            T1jbjb(j1,b1,j,b) = L2old_bb(j1,b,j,b1)  
            Tjbjb(j1,b1,j,b) -= T1jbjb(j1,b1,j,b)  
# 
            DO mu 
#
               Tjbjx(j1,b1,j,mu) = Tjbjb(j1,b1,j,b)*cb(mu,b) 
               Zbb(j,mu,j1,b1)   = Tjbjx(j1,b1,j,mu) 
#
               DO nu 
#
                  Tjxjx(j,mu,j1,nu)     = Zbb(j,mu,j1,b1)*cb(nu,b1) 
                  PUT Z2bb(j,mu,j1,nu) += Tjxjx(j,mu,j1,nu)  
#
               ENDDO nu 
#
            ENDDO mu 
#
      ENDPARDO b, b1, j, j1  
#
#     AB spin combination 
#     ------------------- 
#
      PARDO a, b, i, j  
#
            GET              L2old_ab(i,a,j,b) 
            Tjbia(j,b,i,a) = L2old_ab(i,a,j,b) 
# 
            DO mu 
#
               Tjbix(j,b,i,mu) = Tjbia(j,b,i,a)*ca(mu,a) 
               Zab(i,mu,j,b)   = Tjbix(j,b,i,mu)  
#
               DO nu 
#
                  Tixjx(i,mu,j,nu)     = Zab(i,mu,j,b)*cb(nu,b) 
                  PUT Z2ab(i,mu,j,nu) += Tixjx(i,mu,j,nu)  
#
               ENDDO nu 
#
            ENDDO mu 
#
      ENDPARDO a, b, i, j  
#
      execute sip_barrier 
#
#     Contract half transformed amplitudes with AO integrals 
#     ------------------------------------------------------ 
#     AA spin combination 
#     ------------------- 
# 
      PARDO mu, nu, lambda, sigma
#
            compute_integrals aoint(lambda,mu,sigma,nu)
#
            DO i
            DO i1
#
               GET Z2aa(i,lambda,i1,sigma)
#
               Yaa(i,mu,i1,nu) = aoint(lambda,mu,sigma,nu)*Z2aa(i,lambda,i1,sigma)
               PUT L2AO_aa(i,mu,i1,nu) += Yaa(i,mu,i1,nu)
#
            ENDDO i1
            ENDDO i
#
#     BB spin combination 
#     ------------------- 
#
            DO j
            DO j1
#
               GET Z2bb(j,lambda,j1,sigma)
#
               Ybb(j,mu,j1,nu) = aoint(lambda,mu,sigma,nu)*Z2bb(j,lambda,j1,sigma)
               PUT L2AO_bb(j,mu,j1,nu) += Ybb(j,mu,j1,nu)
#
            ENDDO j1
            ENDDO j
#
#     AB spin combination 
#     ------------------- 
# 
            DO i
            DO j
#
               GET Z2ab(i,lambda,j,sigma)
#
               Yab(i,mu,j,nu) = aoint(lambda,mu,sigma,nu)*Z2ab(i,lambda,j,sigma)
               PUT L2AO_ab(i,mu,j,nu) += Yab(i,mu,j,nu)
#
            ENDDO j
            ENDDO i
# 
      ENDPARDO mu, nu, lambda, sigma
#
#     Perform final two transformations of L2AO  
#     ----------------------------------------- 
# 
      execute sip_barrier ca 
      DELETE Z2AA
      DELETE Z2AB
      DELETE Z2BB
#
#     AA spin combination 
#     ------------------- 
#
      PARDO mu, nu, i, i1
#
            GET L2AO_aa(i,mu,i1,nu)
#
            DO a
#
               Tiaix(i,a,i1,nu)  = L2AO_aa(i,mu,i1,nu)*ca(mu,a)
#
               DO a1
#
                  Tiaia(i,a,i1,a1)  = Tiaix(i,a,i1,nu)*ca(nu,a1)
                  Tiaia(i,a,i1,a1) *= 0.5
#
#                 Update L2new 
#                 ------------ 
                  PUT L2new_aa(i,a,i1,a1) += Tiaia(i,a,i1,a1)
#
                  GET t1a_old(a1,i1) 
                  Tia(i,a) = Tiaia(i,a,i1,a1)*t1a_old(a1,i1) 
#
#                 Update L1new 
#                 ------------ 
                  PUT l1a_new(i,a) += Tia(i,a) 
#
               ENDDO a1
#
            ENDDO a
#
      ENDPARDO mu, nu, i, i1
#
#     BB spin combination 
#     ------------------- 
#
      PARDO mu, nu, j, j1
#
            GET L2AO_bb(j,mu,j1,nu)
#
            DO b
#
               Tjbjx(j,b,j1,nu)  = L2AO_bb(j,mu,j1,nu)*cb(mu,b)
#
               DO b1
#
                  Tjbjb(j,b,j1,b1)  = Tjbjx(j,b,j1,nu)*cb(nu,b1)
                  Tjbjb(j,b,j1,b1) *= 0.5
#
#                 Update L2new 
#                 ------------ 
                  PUT L2new_bb(j,b,j1,b1) += Tjbjb(j,b,j1,b1)
#
                  GET t1b_old(b1,j1) 
                  Tjb(j,b) = Tjbjb(j,b,j1,b1)*t1b_old(b1,j1) 
#
#                 Update L1new 
#                 ------------ 
                  PUT l1b_new(j,b) += Tjb(j,b) 
#
               ENDDO b1
#
            ENDDO b
#
      ENDPARDO mu, nu, j, j1
#
#     AB spin combination 
#     ------------------- 
#
      PARDO mu, nu, i, j
#
            GET L2AO_ab(i,mu,j,nu)
#
            DO a
#
               Tiajx(i,a,j,nu)  = L2AO_ab(i,mu,j,nu)*ca(mu,a)
#
               DO b
#
                  Tiajb(i,a,j,b)  = Tiajx(i,a,j,nu)*cb(nu,b)
#
#                 Update L2new 
#                 ------------ 
                  PUT L2new_ab(i,a,j,b) += Tiajb(i,a,j,b)
#
                  GET t1b_old(b,j) 
                  GET t1a_old(a,i) 
                  Tia(i,a) = Tiajb(i,a,j,b)*t1b_old(b,j) 
                  Tjb(j,b) = Tiajb(i,a,j,b)*t1a_old(a,i) 
#
#                 Update L1new 
#                 ------------ 
                  PUT l1a_new(i,a) += Tia(i,a) 
                  PUT l1b_new(j,b) += Tjb(j,b) 
#
               ENDDO b
#
            ENDDO a
#
      ENDPARDO mu, nu, i, j
#
      execute sip_barrier ca  
      DELETE L2AO_aa
      DELETE L2AO_ab
      DELETE L2AO_bb
#
# ------------------------------------------------------------------------------- 
#
      ENDPROC LLADDER 
#
# ------------------------------------------------------------------------------- 
#
# ------------------------------------------------------------------------------- 
#
      PROC L2WABCDaa  
#
# ------------------------------------------------------------------------------- 
#
#     AA spin combination 
#     ------------------- 
#
      PARDO i, i1, i2, a2 
# 
            Liiia(i,i2,i1,a2) = 0.0  
#
            DO a1  
#
               GET L2old_aa(i,a1,i1,a2) 
               GET L2old_aa(i,a2,i1,a1) 
               GET t1a_old(a1,i2) 
#
               Tiiia(i,i2,i1,a2)  = L2old_aa(i,a1,i1,a2)*t1a_old(a1,i2) 
               Liiia(i,i2,i1,a2) += Tiiia(i,i2,i1,a2)  
#
               Tiiia(i,i2,i1,a2)  = L2old_aa(i,a2,i1,a1)*t1a_old(a1,i2) 
               Liiia(i,i2,i1,a2) -= Tiiia(i,i2,i1,a2)  
#
            ENDDO a1 
#
            DO a   
            DO a1  
#
               GET VSaaai(a1,a2,a,i2) # + 
#
               Liaia(i,a,i1,a1)         = Liiia(i,i2,i1,a2)*VSaaai(a1,a2,a,i2) 
               Liaia(i,a,i1,a1)        *= -0.5  
               PUT L2new_aa(i,a,i1,a1) += Liaia(i,a,i1,a1)  
#
            ENDDO a1  
            ENDDO a   
# 
      ENDPARDO i, i1, i2, a2 
#
      PARDO i, i1, i2, i3  
#
             Liiii(i,i2,i1,i3) = 0.0  
#
             DO a   
             DO a1  
#
               GET Tau_aa(a,i2,a1,i3) 
               GET L2old_aa(i,a,i1,a1) 
#
               Tiiii(i,i2,i1,i3)  = L2old_aa(i,a,i1,a1)*Tau_aa(a,i2,a1,i3) 
               Liiii(i,i2,i1,i3) += Tiiii(i,i2,i1,i3) 
#
             ENDDO a1 
             ENDDO a 
#
             DO a 
             DO a1  
#
               GET VSpipi(a,i2,a1,i3) # +  
#
               Tiaia(i,a,i1,a1)         = Liiii(i,i2,i1,i3)*VSpipi(a,i2,a1,i3) 
               Tiaia(i,a,i1,a1)        *= 0.25  
               PUT L2new_aa(i,a,i1,a1) += Tiaia(i,a,i1,a1) 
#
             ENDDO a1 
             ENDDO a 
#
      ENDPARDO i, i1, i2, i3  
# 
# ------------------------------------------------------------------------------- 
#
      ENDPROC L2WABCDaa  
#
# ------------------------------------------------------------------------------- 
#
# ------------------------------------------------------------------------------- 
#
      PROC L2WABCDbb  
#
# ------------------------------------------------------------------------------- 
#
#     BB spin combination 
#     ------------------- 
#
      PARDO j, j1, j2, b2  
# 
            Ljjjb(j,j2,j1,b2) = 0.0  
#
            DO b1  
#
               GET L2old_bb(j,b1,j1,b2) 
               GET L2old_bb(j,b2,j1,b1) 
               GET t1b_old(b1,j2) 
#
               Tjjjb(j,j2,j1,b2)  = L2old_bb(j,b1,j1,b2)*t1b_old(b1,j2) 
               Ljjjb(j,j2,j1,b2) += Tjjjb(j,j2,j1,b2)  
#
               Tjjjb(j,j2,j1,b2)  = L2old_bb(j,b2,j1,b1)*t1b_old(b1,j2) 
               Ljjjb(j,j2,j1,b2) -= Tjjjb(j,j2,j1,b2)  
#
            ENDDO b1 
#
            DO b  
            DO b1  
#
               GET VSbbbj(b1,b2,b,j2) # + 
#
               Ljbjb(j,b,j1,b1)         = Ljjjb(j,j2,j1,b2)*VSbbbj(b1,b2,b,j2) 
               Ljbjb(j,b,j1,b1)        *= -0.5  
               PUT L2new_bb(j,b,j1,b1) += Ljbjb(j,b,j1,b1)  
#
            ENDDO b1  
            ENDDO b  
# 
      ENDPARDO j, j1, j2, b2  
#
      PARDO j, j1, j2, j3  
#
            Ljjjj(j,j2,j1,j3) = 0.0  
#
            DO b   
            DO b1  
#
               GET Tau_bb(b,j2,b1,j3) 
               GET L2old_bb(j,b,j1,b1) 
#
               Tjjjj(j,j2,j1,j3)  = L2old_bb(j,b,j1,b1)*Tau_bb(b,j2,b1,j3) 
               Ljjjj(j,j2,j1,j3) += Tjjjj(j,j2,j1,j3) 
#
            ENDDO b1 
            ENDDO b  
#
            DO b   
            DO b1  
#
               GET VSqjqj(b,j2,b1,j3) # +  
#
               Tjbjb(j,b,j1,b1)  = Ljjjj(j,j2,j1,j3)*VSqjqj(b,j2,b1,j3) 
               Tjbjb(j,b,j1,b1) *= 0.25  
               PUT L2new_bb(j,b,j1,b1) += Tjbjb(j,b,j1,b1) 
#
            ENDDO b1 
            ENDDO b  
#
      ENDPARDO j, j1, j2, j3  
# 
# ------------------------------------------------------------------------------- 
#
      ENDPROC L2WABCDbb  
#
# ------------------------------------------------------------------------------- 
#
# ------------------------------------------------------------------------------- 
#
      PROC L2WABCDab  
#
# ------------------------------------------------------------------------------- 
#
#     AB spin combination 
#     ------------------- 
#
      PARDO i, i1, j, b1 
#
            Liijb(i,i1,j,b1) = 0.0  
#
            DO a   
#
               GET L2old_ab(i,a,j,b1) 
               GET t1a_old(a,i1) 
#
               Tiijb(i,i1,j,b1)  = L2old_ab(i,a,j,b1)*t1a_old(a,i1)
               Liijb(i,i1,j,b1) += Tiijb(i,i1,j,b1) 
#
            ENDDO a   
#
            DO a  
            DO b  
#
               GET Vbbai(b,b1,a,i1)  
#
               Tiajb(i,a,j,b)         = Vbbai(b,b1,a,i1)*Liijb(i,i1,j,b1) 
               Tiajb(i,a,j,b)        *= -1.0   
               PUT L2new_ab(i,a,j,b) += Tiajb(i,a,j,b) 
#
            ENDDO b  
            ENDDO a  
#
      ENDPARDO i, i1, j, b1 
#
      PARDO j, j1, i, a1 
#
            Liajj(i,a1,j,j1) = 0.0  
#
            DO b  
#
               GET L2old_ab(i,a1,j,b) 
               GET t1b_old(b,j1) 
#
               Tiajj(i,a1,j,j1)  = L2old_ab(i,a1,j,b)*t1b_old(b,j1) 
               Liajj(i,a1,j,j1) += Tiajj(i,a1,j,j1) 
#
            ENDDO b 
# 
            DO a  
            DO b  
#
               GET Vaabj(a,a1,b,j1) 
#
               Tiajb(i,a,j,b)         = Liajj(i,a1,j,j1)*Vaabj(a,a1,b,j1) 
               Tiajb(i,a,j,b)        *= -1.0   
               PUT L2new_ab(i,a,j,b) += Tiajb(i,a,j,b) 
# 
            ENDDO b 
            ENDDO a  
#
      ENDPARDO j, j1, i, a1 
#
      PARDO i, j, i1, j1 
#
            Liijj(i,i1,j,j1) = 0.0  
#
            DO a  
            DO b  
#
               GET Tau_ab(a,i1,b,j1) 
               GET L2old_ab(i,a,j,b) 
#
               Tiijj(i,i1,j,j1)  = L2old_ab(i,a,j,b)*Tau_ab(a,i1,b,j1) 
               Liijj(i,i1,j,j1) += Tiijj(i,i1,j,j1) 
#
            ENDDO b  
            ENDDO a  
#
            DO a  
            DO b  
#
               GET Vpiqj(a,i1,b,j1) # +  
#
               Tiajb(i,a,j,b)         = Liijj(i,i1,j,j1)*Vpiqj(a,i1,b,j1) 
               PUT L2new_ab(i,a,j,b) += Tiajb(i,a,j,b) 
#
            ENDDO b  
            ENDDO a  
#
      ENDPARDO i, j, i1, j1 
# 
# ------------------------------------------------------------------------------- 
#
      ENDPROC L2WABCDab  
#
# ------------------------------------------------------------------------------- 
#
# ------------------------------------------------------------------------------- 
# 
      PROC L1WABCDa 
#     -------------- 
#
#     First piece 
#     ----------- 
#
      create Xiiia
      execute sip_barrier
      PARDO i, i2, a1, a2
#
            GET L2old_aa(i,a1,i2,a2)
            GET L2old_aa(i,a2,i2,a1)
#
            DO i3
#
               GET t1a_old(a1,i3)
#
               tiaia(i,a1,i2,a2)      = L2old_aa(i,a1,i2,a2)
               t1iaia(i,a1,i2,a2)     = L2old_aa(i,a2,i2,a1)
               t1iaia(i,a1,i2,a2)    -= tiaia(i,a1,i2,a2)
#
               tiiia(i,i3,i2,a2)      = t1iaia(i,a1,i2,a2)*t1a_old(a1,i3)
               PUT Xiiia(i,i3,i2,a2) += tiiia(i,i3,i2,a2)
#
            ENDDO i3
#
      ENDPARDO i, i2, a1, a2
      execute sip_barrier
#
      PARDO i, i2, a, a3
#
            GET t1a_old(a3,i2)
            Tiaia(i,a,i2,a3) = 0.0
#
            DO a2
            DO i3
#
               GET Xiiia(i,i3,i2,a2)
               GET VSaaai(a3,a2,a,i3)
#
               T1iaia(i,a,i2,a3) = Xiiia(i,i3,i2,a2)*VSaaai(a3,a2,a,i3)
               Tiaia(i,a,i2,a3) += T1iaia(i,a,i2,a3)
#
            ENDDO i3
            ENDDO a2
#
            tia(i,a)          = Tiaia(i,a,i2,a3)*t1a_old(a3,i2)
            tia(i,a)         *= 0.5
            PUT l1a_new(i,a) += tia(i,a)
#
      ENDPARDO i, i2, a, a3
      execute sip_barrier
      delete Xiiia
#
      PARDO i2, i3, i4 
#
            allocate L1iiii(*,i3,i2,i4) 
            allocate L1iiia(i4,i2,i3,*) 
#
            DO a1 
            DO a2 
#
               GET Tau_aa(a1,i3,a2,i4)
#
               DO i
#
                  GET L2old_aa(i,a1,i2,a2)
#
                  Tiiii(i,i3,i2,i4)   = L2old_aa(i,a1,i2,a2)*Tau_aa(a1,i3,a2,i4)
                  L1iiii(i,i3,i2,i4) += Tiiii(i,i3,i2,i4)
#
               ENDDO i
#
            ENDDO a2 
            ENDDO a1 
#
            DO a3  
#
               GET t1a_old(a3,i2)
#
               DO a
#
                  GET VSpipi(a,i3,a3,i4)
#
                  Tiiia(i4,i2,i3,a)   = VSpipi(a,i3,a3,i4)*t1a_old(a3,i2)
                  L1iiia(i4,i2,i3,a) += Tiiia(i4,i2,i3,a)
#
               ENDDO a
#
            ENDDO a3 
#
            DO i
            DO a
#
               tia(i,a)          = L1iiii(i,i3,i2,i4)*L1iiia(i4,i2,i3,a)
               tia(i,a)         *= 0.25 
               PUT l1a_new(i,a) += tia(i,a)
#
            ENDDO a
            ENDDO i
#
            deallocate L1iiii(*,i3,i2,i4)
            deallocate L1iiia(i4,i2,i3,*)
#
      ENDPARDO i2, i3, i4
#
#     Second piece 
#     ------------ 
#
      create Xiajj 
      create Xiibj 
      execute sip_barrier
      PARDO i, j2, a1, b1  
#
            GET L2old_ab(i,a1,j2,b1)
#
            DO j1  
#
               GET t1b_old(b1,j1)
#
               Tiajj(i,a1,j2,j1)      = L2old_ab(i,a1,j2,b1)*t1b_old(b1,j1)  
               PUT Xiajj(i,a1,j2,j1) += Tiajj(i,a1,j2,j1)  
#
            ENDDO j1  
#
            DO i1  
#
               GET t1a_old(a1,i1)
#
               Tiibj(i1,i,b1,j2)      = L2old_ab(i,a1,j2,b1)*t1a_old(a1,i1)  
               PUT Xiibj(i1,i,b1,j2) += Tiibj(i1,i,b1,j2)  
#
            ENDDO i1  
#
      ENDPARDO i, j2, a1, b1  
      execute sip_barrier
#
      PARDO i, a, j2, b  
#
            GET t1b_old(b,j2)
            Tiabj(i,a,b,j2) = 0.0
#
            DO a1
            DO j1  
#
               GET Xiajj(i,a1,j2,j1)  
               GET Vaabj(a,a1,b,j1)
#
               Tijaj(i,j2,a1,j1) = Xiajj(i,a1,j2,j1) 
               Tajab(a1,j1,a,b)  = Vaabj(a,a1,b,j1) 
#
               Tijab(i,j2,a,b)   = Tijaj(i,j2,a1,j1)*Tajab(a1,j1,a,b) 
               T1iabj(i,a,b,j2)  = Tijab(i,j2,a,b) 
# 
#              T1iabj(i,a,b,j2)  = Xiajj(i,a1,j2,j1)*Vaabj(a,a1,b,j1)  
               Tiabj(i,a,b,j2)  += T1iabj(i,a,b,j2)  
#
            ENDDO j1  
            ENDDO a1
#
            DO b1
            DO i1  
#
               GET Xiibj(i1,i,b1,j2)  
               GET Vbbai(b,b1,a,i1)
#
               Tijib(i,j2,i1,b1) = Xiibj(i1,i,b1,j2) 
               Tibab(i1,b1,a,b)  = Vbbai(b,b1,a,i1)  
#
               Tijab(i,j2,a,b)   = Tijib(i,j2,i1,b1)*Tibab(i1,b1,a,b) 
               T1iabj(i,a,b,j2)  = Tijab(i,j2,a,b) 
#
#              T1iabj(i,a,b,j2)  = Xiibj(i1,i,b1,j2)*Vbbai(b,b1,a,i1)  
               Tiabj(i,a,b,j2)  += T1iabj(i,a,b,j2)  
#
            ENDDO i1  
            ENDDO b1
#
            tia(i,a)          = Tiabj(i,a,b,j2)*t1b_old(b,j2)
            tia(i,a)         *= -1.0  
            PUT l1a_new(i,a) += tia(i,a)
#
      ENDPARDO i, a, j2, b  
      execute sip_barrier
      delete Xiajj  
      delete Xiibj 
#
      PARDO i1, j1, j2  
#
            allocate L1iijj(*,i1,j2,j1) 
            allocate L1iajj(i1,*,j1,j2) 
#
            DO a1 
            DO b1  
#
               GET Tau_ab(a1,i1,b1,j1)
#
               DO i
#
                  GET L2old_ab(i,a1,j2,b1)
#
                  Tiijj(i,i1,j2,j1)   = L2old_ab(i,a1,j2,b1)*Tau_ab(a1,i1,b1,j1)  
                  L1iijj(i,i1,j2,j1) += Tiijj(i,i1,j2,j1)  
#
               ENDDO i
#
            ENDDO b1 
            ENDDO a1 
#
            DO b  
#
               GET t1b_old(b,j2)
#
               DO a
#
                  GET Vpiqj(a,i1,b,j1)
#
                  Tiajj(i1,a,j1,j2)   = Vpiqj(a,i1,b,j1)*t1b_old(b,j2)  
                  L1iajj(i1,a,j1,j2) += Tiajj(i1,a,j1,j2)  
#
               ENDDO a
#
            ENDDO b 
#
            DO i
            DO a
#
               tia(i,a)          = L1iijj(i,i1,j2,j1)*L1iajj(i1,a,j1,j2)  
               PUT l1a_new(i,a) += tia(i,a)
#
            ENDDO a
            ENDDO i
#
            deallocate L1iijj(*,i1,j2,j1) 
            deallocate L1iajj(i1,*,j1,j2) 
#
      ENDPARDO i1, j1, j2  
#
# ------------------------------------------------------------------------------- 
#
      ENDPROC L1WABCDa 
#     -------------- 
#
# ------------------------------------------------------------------------------- 
# 
# ------------------------------------------------------------------------------- 
# 
      PROC L1WABCDb 
#     -------------- 
#
#     First piece 
#     ----------- 
#
      create Xjjjb
      execute sip_barrier
      PARDO j, j2, b1, b2
#
            GET L2old_bb(j,b1,j2,b2)
            GET L2old_bb(j,b2,j2,b1)
#
            DO j3
#
               GET t1b_old(b1,j3)
#
               tjbjb(j,b1,j2,b2)      = L2old_bb(j,b1,j2,b2)
               t1jbjb(j,b1,j2,b2)     = L2old_bb(j,b2,j2,b1)
               t1jbjb(j,b1,j2,b2)    -= tjbjb(j,b1,j2,b2)
#
               tjjjb(j,j3,j2,b2)      = t1jbjb(j,b1,j2,b2)*t1b_old(b1,j3)
               PUT Xjjjb(j,j3,j2,b2) += tjjjb(j,j3,j2,b2)
#
            ENDDO j3
#
      ENDPARDO j, j2, b1, b2
      execute sip_barrier
#
      PARDO j, j2, b, b3
#
            GET t1b_old(b3,j2)
            Tjbjb(j,b,j2,b3) = 0.0
#
            DO b2
            DO j3
#
               GET Xjjjb(j,j3,j2,b2)
               GET VSbbbj(b3,b2,b,j3)
#
               T1jbjb(j,b,j2,b3) = Xjjjb(j,j3,j2,b2)*VSbbbj(b3,b2,b,j3)
               Tjbjb(j,b,j2,b3) += T1jbjb(j,b,j2,b3)
#
            ENDDO j3
            ENDDO b2
#
            tjb(j,b)          = Tjbjb(j,b,j2,b3)*t1b_old(b3,j2)
            tjb(j,b)         *= 0.5
            PUT l1b_new(j,b) += tjb(j,b)
#
      ENDPARDO j, j2, b, b3
      execute sip_barrier
      delete Xjjjb
#
      PARDO j2, j3, j4 
#
            allocate L1jjjj(*,j3,j2,j4) 
            allocate L1jjjb(j4,j2,j3,*) 
#
            DO b1 
            DO b2 
#
               GET Tau_bb(b1,j3,b2,j4)
#
               DO j
#
                  GET L2old_bb(j,b1,j2,b2)
#
                  Tjjjj(j,j3,j2,j4)   = L2old_bb(j,b1,j2,b2)*Tau_bb(b1,j3,b2,j4)
                  L1jjjj(j,j3,j2,j4) += Tjjjj(j,j3,j2,j4)
#
               ENDDO j
#
            ENDDO b2 
            ENDDO b1 
#
            DO b3  
#
               GET t1b_old(b3,j2)
#
               DO b
#
                  GET VSqjqj(b,j3,b3,j4)
#
                  Tjjjb(j4,j2,j3,b)   = VSqjqj(b,j3,b3,j4)*t1b_old(b3,j2)
                  L1jjjb(j4,j2,j3,b) += Tjjjb(j4,j2,j3,b)
#
               ENDDO b
#
            ENDDO b3 
#
            DO j
            DO b
#
               tjb(j,b)          = L1jjjj(j,j3,j2,j4)*L1jjjb(j4,j2,j3,b)
               tjb(j,b)         *= 0.25 
               PUT l1b_new(j,b) += tjb(j,b)
#
            ENDDO b
            ENDDO j
#
            deallocate L1jjjj(*,j3,j2,j4)
            deallocate L1jjjb(j4,j2,j3,*)
#
      ENDPARDO j2, j3, j4
#
#     Second piece 
#     ------------ 
#
      create Xjbii 
      create Xjjai  
      execute sip_barrier
      PARDO j, i2, b1, a1  
#
            GET L2old_ab(i2,a1,j,b1)
#
            DO i1  
#
               GET t1a_old(a1,i1)
#
               Tjbii(j,b1,i2,i1)      = L2old_ab(i2,a1,j,b1)*t1a_old(a1,i1)  
               PUT Xjbii(j,b1,i2,i1) += Tjbii(j,b1,i2,i1)  
#
            ENDDO i1  
#
            DO j1  
#
               GET t1b_old(b1,j1)
#
               Tjjai(j1,j,a1,i2)      = L2old_ab(i2,a1,j,b1)*t1b_old(b1,j1)  
               PUT Xjjai(j1,j,a1,i2) += Tjjai(j1,j,a1,i2)  
#
            ENDDO j1  
#
      ENDPARDO j, i2, b1, a1  
      execute sip_barrier
#
      PARDO j, b, i2, a  
#
            GET t1a_old(a,i2)
            Tjbai(j,b,a,i2) = 0.0
#
            DO b1
            DO i1  
#
               GET Xjbii(j,b1,i2,i1)  
               GET Vbbai(b,b1,a,i1)
#
               Tjibi(j,i2,b1,i1) = Xjbii(j,b1,i2,i1) 
               Tbiba(b1,i1,b,a)  = Vbbai(b,b1,a,i1) 
#
               Tjiba(j,i2,b,a)   = Tjibi(j,i2,b1,i1)*Tbiba(b1,i1,b,a) 
               T1jbai(j,b,a,i2)  = Tjiba(j,i2,b,a) 
# 
#              T1jbai(j,b,a,i2)  = Xjbii(j,b1,i2,i1)*Vbbai(b,b1,a,i1)  
               Tjbai(j,b,a,i2)  += T1jbai(j,b,a,i2)  
#
            ENDDO i1  
            ENDDO b1
#
            DO a1
            DO j1  
#
               GET Xjjai(j1,j,a1,i2)  
               GET Vaabj(a,a1,b,j1)
#
               Tjija(j,i2,j1,a1) = Xjjai(j1,j,a1,i2) 
               Tjaba(j1,a1,b,a)  = Vaabj(a,a1,b,j1)  
#
               Tjiba(j,i2,b,a)   = Tjija(j,i2,j1,a1)*Tjaba(j1,a1,b,a) 
               T1jbai(j,b,a,i2)  = Tjiba(j,i2,b,a) 
#
#              T1jbai(j,b,a,i2)  = Xjjai(j1,j,a1,i2)*Vaabj(a,a1,b,j1)  
               Tjbai(j,b,a,i2)  += T1jbai(j,b,a,i2)  
#
            ENDDO j1  
            ENDDO a1
#
            tjb(j,b)          = Tjbai(j,b,a,i2)*t1a_old(a,i2)
            tjb(j,b)         *= -1.0  
            PUT l1b_new(j,b) += tjb(j,b)
#
      ENDPARDO j, b, i2, a  
      execute sip_barrier
      delete Xjbii  
      delete Xjjai 
#
      PARDO j1, i1, i2  
#
            allocate L1jjii(*,j1,i2,i1) 
            allocate L1jbii(j1,*,i1,i2) 
#
            DO b1 
            DO a1  
#
               GET Tau_ab(a1,i1,b1,j1)
#
               DO j
#
                  GET L2old_ab(i2,a1,j,b1)
#
                  Tjjii(j,j1,i2,i1)   = L2old_ab(i2,a1,j,b1)*Tau_ab(a1,i1,b1,j1)  
                  L1jjii(j,j1,i2,i1) += Tjjii(j,j1,i2,i1)  
#
               ENDDO j
#
            ENDDO a1 
            ENDDO b1 
#
            DO a  
#
               GET t1a_old(a,i2)
#
               DO b
#
                  GET Vpiqj(a,i1,b,j1)
#
                  Tjbii(j1,b,i1,i2)   = Vpiqj(a,i1,b,j1)*t1a_old(a,i2)  
                  L1jbii(j1,b,i1,i2) += Tjbii(j1,b,i1,i2)  
#
               ENDDO b
#
            ENDDO a 
#
            DO j
            DO b
#
               tjb(j,b)          = L1jjii(j,j1,i2,i1)*L1jbii(j1,b,i1,i2)  
               PUT l1b_new(j,b) += tjb(j,b)
#
            ENDDO b
            ENDDO j
#
            deallocate L1jjii(*,j1,i2,i1) 
            deallocate L1jbii(j1,*,i1,i2) 
#
      ENDPARDO j1, i1, i2  
#
# ------------------------------------------------------------------------------- 
#
      ENDPROC L1WABCDb 
#     ---------------- 
#
      PROC VABCD
#     ----------
#
           CALL LLADDER
           CALL L2WABCDaa
           CALL L2WABCDbb
           CALL L2WABCDab
#
           CALL L1WABCDa
           CALL L1WABCDb
#
      ENDPROC VABCD
#     -------------
#
# ---------------------------------------------------------------------------------
#
     PROC ZERO_DSCALAR  
#    ----------------- 
#
#    The scalars used (overlap of error arrays and coeffients) in the DIIS 
#    expansion are zero'd out. 
#
#      Zero out scalars.
#      -----------------
#
       b11 = 0.0
       b12 = 0.0
       b13 = 0.0
       b14 = 0.0
       b15 = 0.0
       b16 = 0.0
       b17 = 0.0
       b18 = 0.0
       b19 = 0.0
       b110 = 0.0
#
       b22 = 0.0
       b23 = 0.0
       b24 = 0.0
       b25 = 0.0
       b26 = 0.0
       b27 = 0.0
       b28 = 0.0
       b29 = 0.0
       b210 = 0.0
#
       b33 = 0.0
       b34 = 0.0
       b35 = 0.0
       b36 = 0.0
       b37 = 0.0
       b38 = 0.0
       b39 = 0.0
       b310 = 0.0
#
       b44 = 0.0
       b45 = 0.0
       b46 = 0.0
       b47 = 0.0
       b48 = 0.0
       b49 = 0.0
       b410 = 0.0
#
       b55 = 0.0
       b56 = 0.0
       b57 = 0.0
       b58 = 0.0
       b59 = 0.0
       b510 = 0.0
#
       b66 = 0.0
       b67 = 0.0
       b68 = 0.0
       b69 = 0.0
       b610 = 0.0
#
       b77 = 0.0
       b78 = 0.0
       b79 = 0.0
       b710 = 0.0
#
       b88 = 0.0
       b89 = 0.0
       b810 = 0.0
#
       b99 = 0.0
       b910 = 0.0
#
       b1010 = 0.0
#
       Tb11 = 0.0
       Tb12 = 0.0
       Tb13 = 0.0
       Tb14 = 0.0
       Tb15 = 0.0
       Tb16 = 0.0
       Tb17 = 0.0
       Tb18 = 0.0
       Tb19 = 0.0
       Tb110 = 0.0
#
       Tb22 = 0.0
       Tb23 = 0.0
       Tb24 = 0.0
       Tb25 = 0.0
       Tb26 = 0.0
       Tb27 = 0.0
       Tb28 = 0.0
       Tb29 = 0.0
       Tb210 = 0.0
#
       Tb33 = 0.0
       Tb34 = 0.0
       Tb35 = 0.0
       Tb36 = 0.0
       Tb37 = 0.0
       Tb38 = 0.0
       Tb39 = 0.0
       Tb310 = 0.0
#
       Tb44 = 0.0
       Tb45 = 0.0
       Tb46 = 0.0
       Tb47 = 0.0
       Tb48 = 0.0
       Tb49 = 0.0
       Tb410 = 0.0
#
       Tb55 = 0.0
       Tb56 = 0.0
       Tb57 = 0.0
       Tb58 = 0.0
       Tb59 = 0.0
       Tb510 = 0.0
#
       Tb66 = 0.0
       Tb67 = 0.0
       Tb68 = 0.0
       Tb69 = 0.0
       Tb610 = 0.0
#
       Tb77 = 0.0
       Tb78 = 0.0
       Tb79 = 0.0
       Tb710 = 0.0
#
       Tb88 = 0.0
       Tb89 = 0.0
       Tb810 = 0.0
#
       Tb99 = 0.0
       Tb910 = 0.0
#
       Tb1010 = 0.0
#
       c1 = 0.0
       c2 = 0.0
       c3 = 0.0
       c4 = 0.0
       c5 = 0.0
       c6 = 0.0
       c7 = 0.0
       c8 = 0.0
       c9 = 0.0
       c10 = 0.0
#
       execute sip_barrier
#
     ENDPROC ZERO_DSCALAR  
#    -------------------- 
#
# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
#
     PROC SETUP_DIIS   
#    --------------- 
#
#    Put the matrix elements of B into the sip 'B' matrix. 
#
       execute diis_setup Tb11
       execute diis_setup Tb12
       execute diis_setup Tb13
       execute diis_setup Tb14
       execute diis_setup Tb15
       execute diis_setup Tb16
       execute diis_setup Tb17
       execute diis_setup Tb18
       execute diis_setup Tb19
       execute diis_setup Tb110

       execute diis_setup Tb22
       execute diis_setup Tb23
       execute diis_setup Tb24
       execute diis_setup Tb25
       execute diis_setup Tb26
       execute diis_setup Tb27
       execute diis_setup Tb28
       execute diis_setup Tb29
       execute diis_setup Tb210

       execute diis_setup Tb33
       execute diis_setup Tb34
       execute diis_setup Tb35
       execute diis_setup Tb36
       execute diis_setup Tb37
       execute diis_setup Tb38
       execute diis_setup Tb39
       execute diis_setup Tb310

       execute diis_setup Tb44
       execute diis_setup Tb45
       execute diis_setup Tb46
       execute diis_setup Tb47
       execute diis_setup Tb48
       execute diis_setup Tb49
       execute diis_setup Tb410

       execute diis_setup Tb55
       execute diis_setup Tb56
       execute diis_setup Tb57
       execute diis_setup Tb58
       execute diis_setup Tb59
       execute diis_setup Tb510

       execute diis_setup Tb66
       execute diis_setup Tb67
       execute diis_setup Tb68
       execute diis_setup Tb69
       execute diis_setup Tb610

       execute diis_setup Tb77
       execute diis_setup Tb78
       execute diis_setup Tb79
       execute diis_setup Tb710

       execute diis_setup Tb88
       execute diis_setup Tb89
       execute diis_setup Tb810

       execute diis_setup Tb99
       execute diis_setup Tb910

       execute diis_setup Tb1010
#
       execute sip_barrier
#
     ENDPROC SETUP_DIIS   
#    ------------------ 
#
# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
#
     PROC DIIS1  
#    ---------- 
#
#    Zero out scalars.
#    ----------------- 
#
     CALL ZERO_DSCALAR 
#
     execute server_barrier 
     execute sip_barrier 
#
#    Determine the 'B-matrix'. 
#    ------------------------- 
#
#    Compute contributions due to L2iaia amplitudes. 
#    ----------------------------------------------- 
#
     PARDO a, i, a1, i1
#
#          REQUEST/GET amplitude data from all 2 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1iaia(i,a,i1,a1) a # kiter-1 amplitudes
           REQUEST e2iaia(i,a,i1,a1) a # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,2
#             ---------
#
              etemp = e1iaia(i,a,i1,a1)*e1iaia(i,a,i1,a1)  
              b11  += etemp
#
              etemp = e1iaia(i,a,i1,a1)*e2iaia(i,a,i1,a1)  
              b12  += etemp
#
#             b1x x=2,2
#             ---------
#
              etemp = e2iaia(i,a,i1,a1)*e2iaia(i,a,i1,a1)  
              b22  += etemp
#
     ENDPARDO a, i, a1, i1
#
#    Compute contributions due to L2jbjb amplitudes.
#    -----------------------------------------------
#
     PARDO b, j, b1, j1
#
#          REQUEST/GET amplitude data from all 2 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1jbjb(j,b,j1,b1) b # kiter-1 amplitudes
           REQUEST e2jbjb(j,b,j1,b1) b # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,2
#             ---------
#
              etemp = e1jbjb(j,b,j1,b1)*e1jbjb(j,b,j1,b1)  
              b11  += etemp
#
              etemp = e1jbjb(j,b,j1,b1)*e2jbjb(j,b,j1,b1)  
              b12  += etemp
#
#             b1x x=2,2
#             ---------
#
              etemp = e2jbjb(j,b,j1,b1)*e2jbjb(j,b,j1,b1)  
              b22  += etemp
#
     ENDPARDO b, j, b1, j1
#
#    Compute contributions due to L2iajb amplitudes.
#    -----------------------------------------------
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 2 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1iajb(i,a,j,b) a # kiter-1 amplitudes
           REQUEST e2iajb(i,a,j,b) a # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,2
#             ---------
#
              etemp = e1iajb(i,a,j,b)*e1iajb(i,a,j,b)  
              etemp *= 4.0
              b11  += etemp
#
              etemp = e1iajb(i,a,j,b)*e2iajb(i,a,j,b)  
              etemp *= 4.0
              b12  += etemp
#
#             b1x x=2,2
#             ---------
#
              etemp = e2iajb(i,a,j,b)*e2iajb(i,a,j,b)  
              etemp *= 4.0
              b22  += etemp
#
     ENDPARDO a, i, b, j
#
#    Compute contributions due to L1ia amplitudes. 
#    --------------------------------------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 2 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET e1ia(i,a)    # kiter-1 amplitudes  
           GET e2ia(i,a)    # kiter-0 amplitudes  
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#             b1x x=1,2 
#             --------- 
#
              etemp = e1ia(i,a)*e1ia(i,a) 
              etemp *= 4.0
              b11  += etemp            
#
              etemp = e1ia(i,a)*e2ia(i,a) 
              etemp *= 4.0
              b12  += etemp            
#
#             b1x x=2,2 
#             --------- 
#
              etemp = e2ia(i,a)*e2ia(i,a) 
              etemp *= 4.0
              b22  += etemp            
#
     ENDPARDO a, i 
#
#    Compute contributions due to L1jb amplitudes. 
#    --------------------------------------------- 
#
     PARDO b, j  
#
#          REQUEST/GET amplitude data from all 2 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET e1jb(j,b)    # kiter-1 amplitudes  
           GET e2jb(j,b)    # kiter-0 amplitudes  
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#             b1x x=1,2 
#             --------- 
#
              etemp = e1jb(j,b)*e1jb(j,b) 
              etemp *= 4.0
              b11  += etemp            
#
              etemp = e1jb(j,b)*e2jb(j,b) 
              etemp *= 4.0
              b12  += etemp            
#
#             b1x x=2,2 
#             --------- 
#
              etemp = e2jb(j,b)*e2jb(j,b) 
              etemp *= 4.0
              b22  += etemp            
#
     ENDPARDO b, j 
#
     execute sip_barrier
     execute server_barrier 
#
#    Collectively sum B-matrix elements. 
#    -----------------------------------
#
     collective Tb11 += b11 
     collective Tb12 += b12 
     collective Tb22 += b22 
     execute print_scalar Tb11
     execute print_scalar Tb12
     execute print_scalar Tb22
#
#    Now the unique elements of the 'B-matrix' have been computed, the array is filled out
#    in the setup_diis. 
#    --------------------------------------------------------------------------------------
#
#    Put the elements of the 'B-matrix', which have been computed as scalars into the  
#    R-matrix. 
#    -------------------------------------------------------------------------------- 
#
     CALL SETUP_DIIS 
#
     execute compute_diis # --> New instruction  
#
     c1 = Tb11 
     c2 = Tb22 
     execute print_scalar c1 
     execute print_scalar c2 
     execute server_barrier 
     execute sip_barrier 
#
#    Done computing the c-vector. 
#    ---------------------------- 
#
#    Form the updated amplitudes using the c-vector. 
#    -----------------------------------------------  
#
#    Form L2old_aa. 
#    -------------- 
#
     PARDO a, i, a1, i1
#
#          REQUEST/GET amplitude data from all 2 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST d0iaia(i,a,i1,a1) a # kiter-2 amplitudes
           REQUEST d1iaia(i,a,i1,a1) a # kiter-1 amplitudes
#
           REQUEST e1iaia(i,a,i1,a1) a # kiter-1 amplitudes
           REQUEST e2iaia(i,a,i1,a1) a # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> T2old_aa.
#          ---------------------------------------------------------
#
           t2iaia(i,a,i1,a1)            = d0iaia(i,a,i1,a1)
           t2iaia(i,a,i1,a1)           += e1iaia(i,a,i1,a1)
           t2iaia(i,a,i1,a1)           *= c1
           tiaia(i,a,i1,a1)             = t2iaia(i,a,i1,a1)
#
           t2iaia(i,a,i1,a1)            = d1iaia(i,a,i1,a1)
           t2iaia(i,a,i1,a1)           += e2iaia(i,a,i1,a1)
           t2iaia(i,a,i1,a1)           *= c2
           tiaia(i,a,i1,a1)            += t2iaia(i,a,i1,a1)
#
           PUT L2old_aa(i,a,i1,a1)      = tiaia(i,a,i1,a1)
#
     ENDPARDO a, i, a1, i1
#
#    Form L2old_bb. 
#    -------------- 
#
     PARDO b, j, b1, j1
#
#          REQUEST/GET amplitude data from all 2 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST D0jbjb(j,b,j1,b1) b # kiter-2 amplitudes
           REQUEST D1jbjb(j,b,j1,b1) b # kiter-1 amplitudes
#
           REQUEST e1jbjb(j,b,j1,b1) b # kiter-1 amplitudes
           REQUEST e2jbjb(j,b,j1,b1) b # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> T2old_bb.
#          ---------------------------------------------------------
#
           t2jbjb(j,b,j1,b1)            = D0jbjb(j,b,j1,b1)  
           t2jbjb(j,b,j1,b1)           += e1jbjb(j,b,j1,b1)
           t2jbjb(j,b,j1,b1)           *= c1
           tjbjb(j,b,j1,b1)             = t2jbjb(j,b,j1,b1)
#
           t2jbjb(j,b,j1,b1)            = D1jbjb(j,b,j1,b1)  
           t2jbjb(j,b,j1,b1)           += e2jbjb(j,b,j1,b1)
           t2jbjb(j,b,j1,b1)           *= c2
           tjbjb(j,b,j1,b1)            += t2jbjb(j,b,j1,b1)
#
           PUT L2old_bb(j,b,j1,b1)      = tjbjb(j,b,j1,b1)
#
     ENDPARDO b, j, b1, j1
#
#    Form L2old_ab. 
#    -------------- 
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 2 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST D0iajb(i,a,j,b) a # kiter-2 amplitudes
           REQUEST D1iajb(i,a,j,b) a # kiter-1 amplitudes
#
           REQUEST e1iajb(i,a,j,b) a # kiter-1 amplitudes
           REQUEST e2iajb(i,a,j,b) a # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> L2old_ab.
#          ---------------------------------------------------------
#
           t2iajb(i,a,j,b)            = d0iajb(i,a,j,b)
           t2iajb(i,a,j,b)           += e1iajb(i,a,j,b)
           t2iajb(i,a,j,b)           *= c1
           tiajb(i,a,j,b)             = t2iajb(i,a,j,b)
#
           t2iajb(i,a,j,b)            = d1iajb(i,a,j,b)
           t2iajb(i,a,j,b)           += e2iajb(i,a,j,b)
           t2iajb(i,a,j,b)           *= c2
           tiajb(i,a,j,b)            += t2iajb(i,a,j,b)
#
           PUT L2old_ab(i,a,j,b)      = tiajb(i,a,j,b)
#
     ENDPARDO a, i, b, j
#
#    Form Lai_old. 
#    ------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 2 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET D0ia(i,a)     # kiter-2 amplitudes  
           GET D1ia(i,a)     # kiter-1 amplitudes  
#
           GET e1ia(i,a)     # kiter-1 amplitudes  
           GET e2ia(i,a)     # kiter-0 amplitudes  
#
#          Compute contributions to updated amplitudes --> lai_old. 
#          --------------------------------------------------------  
# 
           t1ia(i,a)     = d0ia(i,a) 
           t1ia(i,a)    += e1ia(i,a) 
           t1ia(i,a)    *= c1  
           tia(i,a)      = t1ia(i,a) 
# 
           t1ia(i,a)     = d1ia(i,a) 
           t1ia(i,a)    += e2ia(i,a) 
           t1ia(i,a)    *= c2  
           tia(i,a)     += t1ia(i,a) 
#
           PUT L1a_old(i,a) = tia(i,a) 
#
     ENDPARDO a, i  
#
#    Form Lbj_old. 
#    ------------- 
#
     PARDO b, j  
#
#          REQUEST/GET amplitude data from all 2 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET D0jb(j,b)     # kiter-2 amplitudes  
           GET D1jb(j,b)     # kiter-1 amplitudes  
#
           GET e1jb(j,b)     # kiter-1 amplitudes  
           GET e2jb(j,b)     # kiter-0 amplitudes  
#
#          Compute contributions to updated amplitudes --> lbj_old. 
#          --------------------------------------------------------  
# 
           t1jb(j,b)     = d0jb(j,b) 
           t1jb(j,b)    += e1jb(j,b) 
           t1jb(j,b)    *= c1  
           tjb(j,b)      = t1jb(j,b) 
# 
           t1jb(j,b)     = d1jb(j,b) 
           t1jb(j,b)    += e2jb(j,b) 
           t1jb(j,b)    *= c2  
           tjb(j,b)     += t1jb(j,b) 
# 
           PUT l1b_old(j,b) = tjb(j,b) 
# 
     ENDPARDO b, j 
#
     execute server_barrier 
     execute sip_barrier 
#
     ENDPROC DIIS1  
#    ------------- 
#
# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
#
     PROC DIIS2  
#    ---------- 
#
#    Zero out scalars.
#    ----------------- 
#
     CALL ZERO_DSCALAR 
#
     execute server_barrier 
     execute sip_barrier 
#
#    Determine the 'B-matrix'. 
#    ------------------------- 
#
#    Compute contributions due to L2iaia amplitudes. 
#    ----------------------------------------------- 
#
     PARDO a, i, a1, i1
#
#          REQUEST/GET amplitude data from all 2 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1iaia(i,a,i1,a1) a # kiter-2 amplitudes
           REQUEST e2iaia(i,a,i1,a1) a # kiter-1 amplitudes
           REQUEST e3iaia(i,a,i1,a1) a # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,3
#             ---------
#
              etemp = e1iaia(i,a,i1,a1)*e1iaia(i,a,i1,a1)  
              b11  += etemp
#
              etemp = e1iaia(i,a,i1,a1)*e2iaia(i,a,i1,a1)  
              b12  += etemp
#
              etemp = e1iaia(i,a,i1,a1)*e3iaia(i,a,i1,a1)  
              b13  += etemp
#
#             b1x x=2,3
#             ---------
#
              etemp = e2iaia(i,a,i1,a1)*e2iaia(i,a,i1,a1)  
              b22  += etemp
#
              etemp = e2iaia(i,a,i1,a1)*e3iaia(i,a,i1,a1)  
              b23  += etemp
#
#             b1x x=3,3
#             ---------
#
              etemp = e3iaia(i,a,i1,a1)*e3iaia(i,a,i1,a1)  
              b33  += etemp
#
     ENDPARDO a, i, a1, i1
#
#    Compute contributions due to L2jbjb amplitudes.
#    -----------------------------------------------
#
     PARDO b, j, b1, j1
#
#          REQUEST/GET amplitude data from all 2 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1jbjb(j,b,j1,b1) b # kiter-2 amplitudes
           REQUEST e2jbjb(j,b,j1,b1) b # kiter-1 amplitudes
           REQUEST e3jbjb(j,b,j1,b1) b # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,3
#             ---------
#
              etemp = e1jbjb(j,b,j1,b1)*e1jbjb(j,b,j1,b1)  
              b11  += etemp
#
              etemp = e1jbjb(j,b,j1,b1)*e2jbjb(j,b,j1,b1)  
              b12  += etemp
#
              etemp = e1jbjb(j,b,j1,b1)*e3jbjb(j,b,j1,b1)  
              b13  += etemp
#
#             b1x x=2,3
#             ---------
#
              etemp = e2jbjb(j,b,j1,b1)*e2jbjb(j,b,j1,b1)  
              b22  += etemp
#
              etemp = e2jbjb(j,b,j1,b1)*e3jbjb(j,b,j1,b1)  
              b23  += etemp
#
#             b1x x=3,3
#             ---------
#
              etemp = e3jbjb(j,b,j1,b1)*e3jbjb(j,b,j1,b1)  
              b33  += etemp
#
     ENDPARDO b, j, b1, j1
#
#    Compute contributions due to L2iajb amplitudes.
#    -----------------------------------------------
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 2 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1iajb(i,a,j,b) a # kiter-2 amplitudes
           REQUEST e2iajb(i,a,j,b) a # kiter-1 amplitudes
           REQUEST e3iajb(i,a,j,b) a # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,3
#             ---------
#
              etemp = e1iajb(i,a,j,b)*e1iajb(i,a,j,b)  
              etemp *= 4.0
              b11  += etemp
#
              etemp = e1iajb(i,a,j,b)*e2iajb(i,a,j,b)  
              etemp *= 4.0
              b12  += etemp
#
              etemp = e1iajb(i,a,j,b)*e3iajb(i,a,j,b)  
              etemp *= 4.0
              b13  += etemp
#
#             b1x x=2,3
#             ---------
#
              etemp = e2iajb(i,a,j,b)*e2iajb(i,a,j,b)  
              etemp *= 4.0
              b22  += etemp
#
              etemp = e2iajb(i,a,j,b)*e3iajb(i,a,j,b)  
              etemp *= 4.0
              b23  += etemp
#
#             b1x x=3,3
#             ---------
#
              etemp = e3iajb(i,a,j,b)*e3iajb(i,a,j,b)  
              etemp *= 4.0
              b33  += etemp
#
     ENDPARDO a, i, b, j
#
#    Compute contributions due to L1ia amplitudes. 
#    --------------------------------------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 2 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET e1ia(i,a)    # kiter-2 amplitudes  
           GET e2ia(i,a)    # kiter-1 amplitudes  
           GET e3ia(i,a)    # kiter-0 amplitudes  
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#             b1x x=1,3 
#             --------- 
#
              etemp = e1ia(i,a)*e1ia(i,a) 
              etemp *= 4.0
              b11  += etemp            
#
              etemp = e1ia(i,a)*e2ia(i,a) 
              etemp *= 4.0
              b12  += etemp            
#
              etemp = e1ia(i,a)*e3ia(i,a) 
              etemp *= 4.0
              b13  += etemp            
#
#             b1x x=2,3 
#             --------- 
#
              etemp = e2ia(i,a)*e2ia(i,a) 
              etemp *= 4.0
              b22  += etemp            
#
              etemp = e2ia(i,a)*e3ia(i,a) 
              etemp *= 4.0
              b23  += etemp            
#
#             b1x x=3,3 
#             --------- 
#
              etemp = e3ia(i,a)*e3ia(i,a) 
              etemp *= 4.0
              b33  += etemp            
#
     ENDPARDO a, i 
#
#    Compute contributions due to L1jb amplitudes. 
#    --------------------------------------------- 
#
     PARDO b, j  
#
#          REQUEST/GET amplitude data from all 2 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET e1jb(j,b)    # kiter-2 amplitudes  
           GET e2jb(j,b)    # kiter-1 amplitudes  
           GET e3jb(j,b)    # kiter-0 amplitudes  
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#             b1x x=1,3 
#             --------- 
#
              etemp = e1jb(j,b)*e1jb(j,b) 
              etemp *= 4.0
              b11  += etemp            
#
              etemp = e1jb(j,b)*e2jb(j,b) 
              etemp *= 4.0
              b12  += etemp            
#
              etemp = e1jb(j,b)*e3jb(j,b) 
              etemp *= 4.0
              b13  += etemp            
#
#             b1x x=2,3 
#             --------- 
#
              etemp = e2jb(j,b)*e2jb(j,b) 
              etemp *= 4.0
              b22  += etemp            
#
              etemp = e2jb(j,b)*e3jb(j,b) 
              etemp *= 4.0
              b23  += etemp            
#
#             b1x x=3,3 
#             --------- 
#
              etemp = e3jb(j,b)*e3jb(j,b) 
              etemp *= 4.0
              b33  += etemp            
#
     ENDPARDO b, j 
#
     execute sip_barrier
     execute server_barrier 
#
#    Collectively sum B-matrix elements. 
#    -----------------------------------
#
     collective Tb11 += b11 
     collective Tb12 += b12 
     collective Tb13 += b13 
     collective Tb22 += b22 
     collective Tb23 += b23 
     collective Tb33 += b33 
#
#    Now the unique elements of the 'B-matrix' have been computed, the array is filled out
#    in the setup_diis. 
#    --------------------------------------------------------------------------------------
#
#    Put the elements of the 'B-matrix', which have been computed as scalars into the  
#    R-matrix. 
#    -------------------------------------------------------------------------------- 
#
     CALL SETUP_DIIS 
#
     execute compute_diis # --> New instruction  
#
     c1 = Tb11 
     c2 = Tb22 
     c3 = Tb33 
     execute print_scalar c1 
     execute print_scalar c2 
     execute print_scalar c3 
     execute server_barrier 
     execute sip_barrier 
#
#    Done computing the c-vector. 
#    ---------------------------- 
#
#    Form the updated amplitudes using the c-vector. 
#    -----------------------------------------------  
#
#    Form L2old_aa. 
#    -------------- 
#
     PARDO a, i, a1, i1
#
#          REQUEST/GET amplitude data from all 3 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST d0iaia(i,a,i1,a1) a # kiter-3 amplitudes
           REQUEST d1iaia(i,a,i1,a1) a # kiter-2 amplitudes
           REQUEST d2iaia(i,a,i1,a1) a # kiter-1 amplitudes
#
           REQUEST e1iaia(i,a,i1,a1) a # kiter-2 amplitudes
           REQUEST e2iaia(i,a,i1,a1) a # kiter-1 amplitudes
           REQUEST e3iaia(i,a,i1,a1) a # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> T2old_aa.
#          ---------------------------------------------------------
#
           t2iaia(i,a,i1,a1)            = d0iaia(i,a,i1,a1)
           t2iaia(i,a,i1,a1)           += e1iaia(i,a,i1,a1)
           t2iaia(i,a,i1,a1)           *= c1
           tiaia(i,a,i1,a1)             = t2iaia(i,a,i1,a1)
#
           t2iaia(i,a,i1,a1)            = d1iaia(i,a,i1,a1)
           t2iaia(i,a,i1,a1)           += e2iaia(i,a,i1,a1)
           t2iaia(i,a,i1,a1)           *= c2
           tiaia(i,a,i1,a1)            += t2iaia(i,a,i1,a1)
#
           t2iaia(i,a,i1,a1)            = d2iaia(i,a,i1,a1)
           t2iaia(i,a,i1,a1)           += e3iaia(i,a,i1,a1)
           t2iaia(i,a,i1,a1)           *= c3
           tiaia(i,a,i1,a1)            += t2iaia(i,a,i1,a1)
#
           PUT L2old_aa(i,a,i1,a1)      = tiaia(i,a,i1,a1)
#
     ENDPARDO a, i, a1, i1
#
#    Form L2old_bb. 
#    -------------- 
#
     PARDO b, j, b1, j1
#
#          REQUEST/GET amplitude data from all 3 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST D0jbjb(j,b,j1,b1) b # kiter-3 amplitudes
           REQUEST D1jbjb(j,b,j1,b1) b # kiter-2 amplitudes
           REQUEST D2jbjb(j,b,j1,b1) b # kiter-1 amplitudes
#
           REQUEST e1jbjb(j,b,j1,b1) b # kiter-2 amplitudes
           REQUEST e2jbjb(j,b,j1,b1) b # kiter-1 amplitudes
           REQUEST e3jbjb(j,b,j1,b1) b # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> T2old_bb.
#          ---------------------------------------------------------
#
           t2jbjb(j,b,j1,b1)            = D0jbjb(j,b,j1,b1)  
           t2jbjb(j,b,j1,b1)           += e1jbjb(j,b,j1,b1)
           t2jbjb(j,b,j1,b1)           *= c1
           tjbjb(j,b,j1,b1)             = t2jbjb(j,b,j1,b1)
#
           t2jbjb(j,b,j1,b1)            = D1jbjb(j,b,j1,b1)  
           t2jbjb(j,b,j1,b1)           += e2jbjb(j,b,j1,b1)
           t2jbjb(j,b,j1,b1)           *= c2
           tjbjb(j,b,j1,b1)            += t2jbjb(j,b,j1,b1)
#
           t2jbjb(j,b,j1,b1)            = D2jbjb(j,b,j1,b1)  
           t2jbjb(j,b,j1,b1)           += e3jbjb(j,b,j1,b1)
           t2jbjb(j,b,j1,b1)           *= c3
           tjbjb(j,b,j1,b1)            += t2jbjb(j,b,j1,b1)
#
           PUT L2old_bb(j,b,j1,b1)      = tjbjb(j,b,j1,b1)
#
     ENDPARDO b, j, b1, j1
#
#    Form L2old_ab. 
#    -------------- 
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 3 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST D0iajb(i,a,j,b) a # kiter-3 amplitudes
           REQUEST D1iajb(i,a,j,b) a # kiter-2 amplitudes
           REQUEST D2iajb(i,a,j,b) a # kiter-1 amplitudes
#
           REQUEST e1iajb(i,a,j,b) a # kiter-2 amplitudes
           REQUEST e2iajb(i,a,j,b) a # kiter-1 amplitudes
           REQUEST e3iajb(i,a,j,b) a # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> L2old_ab.
#          ---------------------------------------------------------
#
           t2iajb(i,a,j,b)            = d0iajb(i,a,j,b)
           t2iajb(i,a,j,b)           += e1iajb(i,a,j,b)
           t2iajb(i,a,j,b)           *= c1
           tiajb(i,a,j,b)             = t2iajb(i,a,j,b)
#
           t2iajb(i,a,j,b)            = d1iajb(i,a,j,b)
           t2iajb(i,a,j,b)           += e2iajb(i,a,j,b)
           t2iajb(i,a,j,b)           *= c2
           tiajb(i,a,j,b)            += t2iajb(i,a,j,b)
#
           t2iajb(i,a,j,b)            = d2iajb(i,a,j,b)
           t2iajb(i,a,j,b)           += e3iajb(i,a,j,b)
           t2iajb(i,a,j,b)           *= c3
           tiajb(i,a,j,b)            += t2iajb(i,a,j,b)
#
           PUT L2old_ab(i,a,j,b)      = tiajb(i,a,j,b)
#
     ENDPARDO a, i, b, j
#
#    Form Lai_old. 
#    ------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 3 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET D0ia(i,a)     # kiter-3 amplitudes  
           GET D1ia(i,a)     # kiter-2 amplitudes  
           GET D2ia(i,a)     # kiter-1 amplitudes  
#
           GET e1ia(i,a)     # kiter-2 amplitudes  
           GET e2ia(i,a)     # kiter-1 amplitudes  
           GET e3ia(i,a)     # kiter-0 amplitudes  
#
#          Compute contributions to updated amplitudes --> lai_old. 
#          --------------------------------------------------------  
# 
           t1ia(i,a)     = d0ia(i,a) 
           t1ia(i,a)    += e1ia(i,a) 
           t1ia(i,a)    *= c1  
           tia(i,a)      = t1ia(i,a) 
# 
           t1ia(i,a)     = d1ia(i,a) 
           t1ia(i,a)    += e2ia(i,a) 
           t1ia(i,a)    *= c2  
           tia(i,a)     += t1ia(i,a) 
# 
           t1ia(i,a)     = d2ia(i,a) 
           t1ia(i,a)    += e3ia(i,a) 
           t1ia(i,a)    *= c3  
           tia(i,a)     += t1ia(i,a) 
#
           PUT L1a_old(i,a) = tia(i,a) 
#
     ENDPARDO a, i  
#
#    Form Lbj_old. 
#    ------------- 
#
     PARDO b, j  
#
#          REQUEST/GET amplitude data from all 3 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET D0jb(j,b)     # kiter-3 amplitudes  
           GET D1jb(j,b)     # kiter-2 amplitudes  
           GET D2jb(j,b)     # kiter-1 amplitudes  
#
           GET e1jb(j,b)     # kiter-2 amplitudes  
           GET e2jb(j,b)     # kiter-1 amplitudes  
           GET e3jb(j,b)     # kiter-0 amplitudes  
#
#          Compute contributions to updated amplitudes --> lbj_old. 
#          --------------------------------------------------------  
# 
           t1jb(j,b)     = d0jb(j,b) 
           t1jb(j,b)    += e1jb(j,b) 
           t1jb(j,b)    *= c1  
           tjb(j,b)      = t1jb(j,b) 
# 
           t1jb(j,b)     = d1jb(j,b) 
           t1jb(j,b)    += e2jb(j,b) 
           t1jb(j,b)    *= c2  
           tjb(j,b)     += t1jb(j,b) 
# 
           t1jb(j,b)     = d2jb(j,b) 
           t1jb(j,b)    += e3jb(j,b) 
           t1jb(j,b)    *= c3  
           tjb(j,b)     += t1jb(j,b) 
# 
           PUT l1b_old(j,b) = tjb(j,b) 
# 
     ENDPARDO b, j 
#
     execute server_barrier 
     execute sip_barrier 
#
     ENDPROC DIIS2  
#    ------------- 
#
# ---------------------------------------------------------------------------------
#
#
# ---------------------------------------------------------------------------------
#
     PROC DIIS3  
#    ---------- 
#
#    Zero out scalars.
#    ----------------- 
#
     CALL ZERO_DSCALAR 
#
     execute server_barrier 
     execute sip_barrier 
#
#    Determine the 'B-matrix'. 
#    ------------------------- 
#
#    Compute contributions due to L2iaia amplitudes. 
#    ----------------------------------------------- 
#
     PARDO a, i, a1, i1
#
#          REQUEST/GET amplitude data from all 4 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1iaia(i,a,i1,a1) a # kiter-3 amplitudes
           REQUEST e2iaia(i,a,i1,a1) a # kiter-2 amplitudes
           REQUEST e3iaia(i,a,i1,a1) a # kiter-1 amplitudes
           REQUEST e4iaia(i,a,i1,a1) a # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,4
#             ---------
#
              etemp = e1iaia(i,a,i1,a1)*e1iaia(i,a,i1,a1)  
              b11  += etemp
#
              etemp = e1iaia(i,a,i1,a1)*e2iaia(i,a,i1,a1)  
              b12  += etemp
#
              etemp = e1iaia(i,a,i1,a1)*e3iaia(i,a,i1,a1)  
              b13  += etemp
#
              etemp = e1iaia(i,a,i1,a1)*e4iaia(i,a,i1,a1)  
              b14  += etemp
#
#             b1x x=2,4
#             ---------
#
              etemp = e2iaia(i,a,i1,a1)*e2iaia(i,a,i1,a1)  
              b22  += etemp
#
              etemp = e2iaia(i,a,i1,a1)*e3iaia(i,a,i1,a1)  
              b23  += etemp
#
              etemp = e2iaia(i,a,i1,a1)*e4iaia(i,a,i1,a1)  
              b24  += etemp
#
#             b1x x=3,4
#             ---------
#
              etemp = e3iaia(i,a,i1,a1)*e3iaia(i,a,i1,a1)  
              b33  += etemp
#
              etemp = e3iaia(i,a,i1,a1)*e4iaia(i,a,i1,a1)  
              b34  += etemp
#
#             b1x x=4,4
#             ---------
#
              etemp = e4iaia(i,a,i1,a1)*e4iaia(i,a,i1,a1)  
              b44  += etemp
#
     ENDPARDO a, i, a1, i1
#
#    Compute contributions due to L2jbjb amplitudes.
#    -----------------------------------------------
#
     PARDO b, j, b1, j1
#
#          REQUEST/GET amplitude data from all 4 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1jbjb(j,b,j1,b1) b # kiter-3 amplitudes
           REQUEST e2jbjb(j,b,j1,b1) b # kiter-2 amplitudes
           REQUEST e3jbjb(j,b,j1,b1) b # kiter-1 amplitudes
           REQUEST e4jbjb(j,b,j1,b1) b # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,4
#             ---------
#
              etemp = e1jbjb(j,b,j1,b1)*e1jbjb(j,b,j1,b1)  
              b11  += etemp
#
              etemp = e1jbjb(j,b,j1,b1)*e2jbjb(j,b,j1,b1)  
              b12  += etemp
#
              etemp = e1jbjb(j,b,j1,b1)*e3jbjb(j,b,j1,b1)  
              b13  += etemp
#
              etemp = e1jbjb(j,b,j1,b1)*e4jbjb(j,b,j1,b1)  
              b14  += etemp
#
#             b1x x=2,4
#             ---------
#
              etemp = e2jbjb(j,b,j1,b1)*e2jbjb(j,b,j1,b1)  
              b22  += etemp
#
              etemp = e2jbjb(j,b,j1,b1)*e3jbjb(j,b,j1,b1)  
              b23  += etemp
#
              etemp = e2jbjb(j,b,j1,b1)*e4jbjb(j,b,j1,b1)  
              b24  += etemp
#
#             b1x x=3,4
#             ---------
#
              etemp = e3jbjb(j,b,j1,b1)*e3jbjb(j,b,j1,b1)  
              b33  += etemp
#
              etemp = e3jbjb(j,b,j1,b1)*e4jbjb(j,b,j1,b1)  
              b34  += etemp
#
#             b1x x=4,4
#             ---------
#
              etemp = e4jbjb(j,b,j1,b1)*e4jbjb(j,b,j1,b1)  
              b44  += etemp
#
     ENDPARDO b, j, b1, j1
#
#    Compute contributions due to L2iajb amplitudes.
#    -----------------------------------------------
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 4 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1iajb(i,a,j,b) a # kiter-3 amplitudes
           REQUEST e2iajb(i,a,j,b) a # kiter-2 amplitudes
           REQUEST e3iajb(i,a,j,b) a # kiter-1 amplitudes
           REQUEST e4iajb(i,a,j,b) a # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,4
#             ---------
#
              etemp = e1iajb(i,a,j,b)*e1iajb(i,a,j,b)  
              etemp *= 4.0
              b11  += etemp
#
              etemp = e1iajb(i,a,j,b)*e2iajb(i,a,j,b)  
              etemp *= 4.0
              b12  += etemp
#
              etemp = e1iajb(i,a,j,b)*e3iajb(i,a,j,b)  
              etemp *= 4.0
              b13  += etemp
#
              etemp = e1iajb(i,a,j,b)*e4iajb(i,a,j,b)  
              etemp *= 4.0
              b14  += etemp
#
#             b1x x=2,4
#             ---------
#
              etemp = e2iajb(i,a,j,b)*e2iajb(i,a,j,b)  
              etemp *= 4.0
              b22  += etemp
#
              etemp = e2iajb(i,a,j,b)*e3iajb(i,a,j,b)  
              etemp *= 4.0
              b23  += etemp
#
              etemp = e2iajb(i,a,j,b)*e4iajb(i,a,j,b)  
              etemp *= 4.0
              b24  += etemp
#
#             b1x x=3,4
#             ---------
#
              etemp = e3iajb(i,a,j,b)*e3iajb(i,a,j,b)  
              etemp *= 4.0
              b33  += etemp
#
              etemp = e3iajb(i,a,j,b)*e4iajb(i,a,j,b)  
              etemp *= 4.0
              b34  += etemp
#
#             b1x x=4,4
#             ---------
#
              etemp = e4iajb(i,a,j,b)*e4iajb(i,a,j,b)  
              etemp *= 4.0
              b44  += etemp
#
     ENDPARDO a, i, b, j
#
#    Compute contributions due to L1ia amplitudes. 
#    --------------------------------------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 4 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET e1ia(i,a)    # kiter-3 amplitudes  
           GET e2ia(i,a)    # kiter-2 amplitudes  
           GET e3ia(i,a)    # kiter-1 amplitudes  
           GET e4ia(i,a)    # kiter-0 amplitudes  
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#             b1x x=1,4 
#             --------- 
#
              etemp = e1ia(i,a)*e1ia(i,a) 
              etemp *= 4.0
              b11  += etemp            
#
              etemp = e1ia(i,a)*e2ia(i,a) 
              etemp *= 4.0
              b12  += etemp            
#
              etemp = e1ia(i,a)*e3ia(i,a) 
              etemp *= 4.0
              b13  += etemp            
#
              etemp = e1ia(i,a)*e4ia(i,a) 
              etemp *= 4.0
              b14  += etemp            
#
#             b1x x=2,4 
#             --------- 
#
              etemp = e2ia(i,a)*e2ia(i,a) 
              etemp *= 4.0
              b22  += etemp            
#
              etemp = e2ia(i,a)*e3ia(i,a) 
              etemp *= 4.0
              b23  += etemp            
#
              etemp = e2ia(i,a)*e4ia(i,a) 
              etemp *= 4.0
              b24  += etemp            
#
#             b1x x=3,4 
#             --------- 
#
              etemp = e3ia(i,a)*e3ia(i,a) 
              etemp *= 4.0
              b33  += etemp            
#
              etemp = e3ia(i,a)*e4ia(i,a) 
              etemp *= 4.0
              b34  += etemp            
#
#             b1x x=4,4 
#             --------- 
#
              etemp = e4ia(i,a)*e4ia(i,a) 
              etemp *= 4.0
              b44  += etemp            
#
     ENDPARDO a, i 
#
#    Compute contributions due to L1jb amplitudes. 
#    --------------------------------------------- 
#
     PARDO b, j  
#
#          REQUEST/GET amplitude data from all 4 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET e1jb(j,b)    # kiter-3 amplitudes  
           GET e2jb(j,b)    # kiter-2 amplitudes  
           GET e3jb(j,b)    # kiter-1 amplitudes  
           GET e4jb(j,b)    # kiter-0 amplitudes  
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#             b1x x=1,4 
#             --------- 
#
              etemp = e1jb(j,b)*e1jb(j,b) 
              etemp *= 4.0
              b11  += etemp            
#
              etemp = e1jb(j,b)*e2jb(j,b) 
              etemp *= 4.0
              b12  += etemp            
#
              etemp = e1jb(j,b)*e3jb(j,b) 
              etemp *= 4.0
              b13  += etemp            
#
              etemp = e1jb(j,b)*e4jb(j,b) 
              etemp *= 4.0
              b14  += etemp            
#
#             b1x x=2,4 
#             --------- 
#
              etemp = e2jb(j,b)*e2jb(j,b) 
              etemp *= 4.0
              b22  += etemp            
#
              etemp = e2jb(j,b)*e3jb(j,b) 
              etemp *= 4.0
              b23  += etemp            
#
              etemp = e2jb(j,b)*e4jb(j,b) 
              etemp *= 4.0
              b24  += etemp            
#
#             b1x x=3,4 
#             --------- 
#
              etemp = e3jb(j,b)*e3jb(j,b) 
              etemp *= 4.0
              b33  += etemp            
#
              etemp = e3jb(j,b)*e4jb(j,b) 
              etemp *= 4.0
              b34  += etemp            
#
#             b1x x=4,4 
#             --------- 
#
              etemp = e4jb(j,b)*e4jb(j,b) 
              etemp *= 4.0
              b44  += etemp            
#
     ENDPARDO b, j 
#
     execute sip_barrier
     execute server_barrier 
#
#    Collectively sum B-matrix elements. 
#    -----------------------------------
#
     collective Tb11 += b11 
     collective Tb12 += b12 
     collective Tb13 += b13 
     collective Tb14 += b14 
     collective Tb22 += b22 
     collective Tb23 += b23 
     collective Tb24 += b24 
     collective Tb33 += b33 
     collective Tb34 += b34 
     collective Tb44 += b44 
#
#    Now the unique elements of the 'B-matrix' have been computed, the array is filled out
#    in the setup_diis. 
#    --------------------------------------------------------------------------------------
#
#    Put the elements of the 'B-matrix', which have been computed as scalars into the  
#    R-matrix. 
#    -------------------------------------------------------------------------------- 
#
     CALL SETUP_DIIS 
#
     execute compute_diis # --> New instruction  
#
     c1 = Tb11 
     c2 = Tb22 
     c3 = Tb33 
     c4 = Tb44 
     execute print_scalar c1 
     execute print_scalar c2 
     execute print_scalar c3 
     execute print_scalar c4 
     execute server_barrier 
     execute sip_barrier 
#
#    Done computing the c-vector. 
#    ---------------------------- 
#
#    Form the updated amplitudes using the c-vector. 
#    -----------------------------------------------  
#
#    Form L2old_aa. 
#    -------------- 
#
     PARDO a, i, a1, i1
#
#          REQUEST/GET amplitude data from all 4 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST d0iaia(i,a,i1,a1) a # kiter-4 amplitudes
           REQUEST d1iaia(i,a,i1,a1) a # kiter-3 amplitudes
           REQUEST d2iaia(i,a,i1,a1) a # kiter-2 amplitudes
           REQUEST d3iaia(i,a,i1,a1) a # kiter-1 amplitudes
#
           REQUEST e1iaia(i,a,i1,a1) a # kiter-3 amplitudes
           REQUEST e2iaia(i,a,i1,a1) a # kiter-2 amplitudes
           REQUEST e3iaia(i,a,i1,a1) a # kiter-1 amplitudes
           REQUEST e4iaia(i,a,i1,a1) a # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> T2old_aa.
#          ---------------------------------------------------------
#
           t2iaia(i,a,i1,a1)            = d0iaia(i,a,i1,a1)
           t2iaia(i,a,i1,a1)           += e1iaia(i,a,i1,a1)
           t2iaia(i,a,i1,a1)           *= c1
           tiaia(i,a,i1,a1)             = t2iaia(i,a,i1,a1)
#
           t2iaia(i,a,i1,a1)            = d1iaia(i,a,i1,a1)
           t2iaia(i,a,i1,a1)           += e2iaia(i,a,i1,a1)
           t2iaia(i,a,i1,a1)           *= c2
           tiaia(i,a,i1,a1)            += t2iaia(i,a,i1,a1)
#
           t2iaia(i,a,i1,a1)            = d2iaia(i,a,i1,a1)
           t2iaia(i,a,i1,a1)           += e3iaia(i,a,i1,a1)
           t2iaia(i,a,i1,a1)           *= c3
           tiaia(i,a,i1,a1)            += t2iaia(i,a,i1,a1)
#
           t2iaia(i,a,i1,a1)            = d3iaia(i,a,i1,a1)
           t2iaia(i,a,i1,a1)           += e4iaia(i,a,i1,a1)
           t2iaia(i,a,i1,a1)           *= c4
           tiaia(i,a,i1,a1)            += t2iaia(i,a,i1,a1)
#
           PUT L2old_aa(i,a,i1,a1)      = tiaia(i,a,i1,a1)
#
     ENDPARDO a, i, a1, i1
#
#    Form L2old_bb. 
#    -------------- 
#
     PARDO b, j, b1, j1
#
#          REQUEST/GET amplitude data from all 4 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST D0jbjb(j,b,j1,b1) b # kiter-4 amplitudes
           REQUEST D1jbjb(j,b,j1,b1) b # kiter-3 amplitudes
           REQUEST D2jbjb(j,b,j1,b1) b # kiter-2 amplitudes
           REQUEST D3jbjb(j,b,j1,b1) b # kiter-1 amplitudes
#
           REQUEST e1jbjb(j,b,j1,b1) b # kiter-3 amplitudes
           REQUEST e2jbjb(j,b,j1,b1) b # kiter-2 amplitudes
           REQUEST e3jbjb(j,b,j1,b1) b # kiter-1 amplitudes
           REQUEST e4jbjb(j,b,j1,b1) b # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> T2old_bb.
#          ---------------------------------------------------------
#
           t2jbjb(j,b,j1,b1)            = D0jbjb(j,b,j1,b1)  
           t2jbjb(j,b,j1,b1)           += e1jbjb(j,b,j1,b1)
           t2jbjb(j,b,j1,b1)           *= c1
           tjbjb(j,b,j1,b1)             = t2jbjb(j,b,j1,b1)
#
           t2jbjb(j,b,j1,b1)            = D1jbjb(j,b,j1,b1)  
           t2jbjb(j,b,j1,b1)           += e2jbjb(j,b,j1,b1)
           t2jbjb(j,b,j1,b1)           *= c2
           tjbjb(j,b,j1,b1)            += t2jbjb(j,b,j1,b1)
#
           t2jbjb(j,b,j1,b1)            = D2jbjb(j,b,j1,b1)  
           t2jbjb(j,b,j1,b1)           += e3jbjb(j,b,j1,b1)
           t2jbjb(j,b,j1,b1)           *= c3
           tjbjb(j,b,j1,b1)            += t2jbjb(j,b,j1,b1)
#
           t2jbjb(j,b,j1,b1)            = D3jbjb(j,b,j1,b1)  
           t2jbjb(j,b,j1,b1)           += e4jbjb(j,b,j1,b1)
           t2jbjb(j,b,j1,b1)           *= c4
           tjbjb(j,b,j1,b1)            += t2jbjb(j,b,j1,b1)
#
           PUT L2old_bb(j,b,j1,b1)      = tjbjb(j,b,j1,b1)
#
     ENDPARDO b, j, b1, j1
#
#    Form L2old_ab. 
#    -------------- 
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 4 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST D0iajb(i,a,j,b) a # kiter-4 amplitudes
           REQUEST D1iajb(i,a,j,b) a # kiter-3 amplitudes
           REQUEST D2iajb(i,a,j,b) a # kiter-2 amplitudes
           REQUEST D3iajb(i,a,j,b) a # kiter-1 amplitudes
#
           REQUEST e1iajb(i,a,j,b) a # kiter-3 amplitudes
           REQUEST e2iajb(i,a,j,b) a # kiter-2 amplitudes
           REQUEST e3iajb(i,a,j,b) a # kiter-1 amplitudes
           REQUEST e4iajb(i,a,j,b) a # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> L2old_ab.
#          ---------------------------------------------------------
#
           t2iajb(i,a,j,b)            = d0iajb(i,a,j,b)
           t2iajb(i,a,j,b)           += e1iajb(i,a,j,b)
           t2iajb(i,a,j,b)           *= c1
           tiajb(i,a,j,b)             = t2iajb(i,a,j,b)
#
           t2iajb(i,a,j,b)            = d1iajb(i,a,j,b)
           t2iajb(i,a,j,b)           += e2iajb(i,a,j,b)
           t2iajb(i,a,j,b)           *= c2
           tiajb(i,a,j,b)            += t2iajb(i,a,j,b)
#
           t2iajb(i,a,j,b)            = d2iajb(i,a,j,b)
           t2iajb(i,a,j,b)           += e3iajb(i,a,j,b)
           t2iajb(i,a,j,b)           *= c3
           tiajb(i,a,j,b)            += t2iajb(i,a,j,b)
#
           t2iajb(i,a,j,b)            = d3iajb(i,a,j,b)
           t2iajb(i,a,j,b)           += e4iajb(i,a,j,b)
           t2iajb(i,a,j,b)           *= c4
           tiajb(i,a,j,b)            += t2iajb(i,a,j,b)
#
           PUT L2old_ab(i,a,j,b)      = tiajb(i,a,j,b)
#
     ENDPARDO a, i, b, j
#
#    Form Lai_old. 
#    ------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 4 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET D0ia(i,a)     # kiter-4 amplitudes  
           GET D1ia(i,a)     # kiter-3 amplitudes  
           GET D2ia(i,a)     # kiter-2 amplitudes  
           GET D3ia(i,a)     # kiter-1 amplitudes  
#
           GET e1ia(i,a)     # kiter-3 amplitudes  
           GET e2ia(i,a)     # kiter-2 amplitudes  
           GET e3ia(i,a)     # kiter-1 amplitudes  
           GET e4ia(i,a)     # kiter-0 amplitudes  
#
#          Compute contributions to updated amplitudes --> lai_old. 
#          --------------------------------------------------------  
# 
           t1ia(i,a)     = d0ia(i,a) 
           t1ia(i,a)    += e1ia(i,a) 
           t1ia(i,a)    *= c1  
           tia(i,a)      = t1ia(i,a) 
# 
           t1ia(i,a)     = d1ia(i,a) 
           t1ia(i,a)    += e2ia(i,a) 
           t1ia(i,a)    *= c2  
           tia(i,a)     += t1ia(i,a) 
# 
           t1ia(i,a)     = d2ia(i,a) 
           t1ia(i,a)    += e3ia(i,a) 
           t1ia(i,a)    *= c3  
           tia(i,a)     += t1ia(i,a) 
# 
           t1ia(i,a)     = d3ia(i,a) 
           t1ia(i,a)    += e4ia(i,a) 
           t1ia(i,a)    *= c4  
           tia(i,a)     += t1ia(i,a) 
#
           PUT L1a_old(i,a) = tia(i,a) 
#
     ENDPARDO a, i  
#
#    Form Lbj_old. 
#    ------------- 
#
     PARDO b, j  
#
#          REQUEST/GET amplitude data from all 4 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET D0jb(j,b)     # kiter-4 amplitudes  
           GET D1jb(j,b)     # kiter-3 amplitudes  
           GET D2jb(j,b)     # kiter-2 amplitudes  
           GET D3jb(j,b)     # kiter-1 amplitudes  
#
           GET e1jb(j,b)     # kiter-3 amplitudes  
           GET e2jb(j,b)     # kiter-2 amplitudes  
           GET e3jb(j,b)     # kiter-1 amplitudes  
           GET e4jb(j,b)     # kiter-0 amplitudes  
#
#          Compute contributions to updated amplitudes --> lbj_old. 
#          --------------------------------------------------------  
# 
           t1jb(j,b)     = d0jb(j,b) 
           t1jb(j,b)    += e1jb(j,b) 
           t1jb(j,b)    *= c1  
           tjb(j,b)      = t1jb(j,b) 
# 
           t1jb(j,b)     = d1jb(j,b) 
           t1jb(j,b)    += e2jb(j,b) 
           t1jb(j,b)    *= c2  
           tjb(j,b)     += t1jb(j,b) 
# 
           t1jb(j,b)     = d2jb(j,b) 
           t1jb(j,b)    += e3jb(j,b) 
           t1jb(j,b)    *= c3  
           tjb(j,b)     += t1jb(j,b) 
# 
           t1jb(j,b)     = d3jb(j,b) 
           t1jb(j,b)    += e4jb(j,b) 
           t1jb(j,b)    *= c4  
           tjb(j,b)     += t1jb(j,b) 
# 
           PUT l1b_old(j,b) = tjb(j,b) 
# 
     ENDPARDO b, j 
#
     execute server_barrier 
     execute sip_barrier 
#
     ENDPROC DIIS3  
#    ------------- 
#
# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
#
     PROC DIIS4  
#    ---------- 
#
#    Zero out scalars.
#    ----------------- 
#
     CALL ZERO_DSCALAR 
#
     execute server_barrier 
     execute sip_barrier 
#
#    Determine the 'B-matrix'. 
#    ------------------------- 
#
#    Compute contributions due to L2iaia amplitudes. 
#    ----------------------------------------------- 
#
     PARDO a, i, a1, i1
#
#          REQUEST/GET amplitude data from all 5 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1iaia(i,a,i1,a1) a # kiter-4 amplitudes
           REQUEST e2iaia(i,a,i1,a1) a # kiter-3 amplitudes
           REQUEST e3iaia(i,a,i1,a1) a # kiter-2 amplitudes
           REQUEST e4iaia(i,a,i1,a1) a # kiter-1 amplitudes
           REQUEST e5iaia(i,a,i1,a1) a # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,5
#             ---------
#
              etemp = e1iaia(i,a,i1,a1)*e1iaia(i,a,i1,a1)  
              b11  += etemp
#
              etemp = e1iaia(i,a,i1,a1)*e2iaia(i,a,i1,a1)  
              b12  += etemp
#
              etemp = e1iaia(i,a,i1,a1)*e3iaia(i,a,i1,a1)  
              b13  += etemp
#
              etemp = e1iaia(i,a,i1,a1)*e4iaia(i,a,i1,a1)  
              b14  += etemp
#
              etemp = e1iaia(i,a,i1,a1)*e5iaia(i,a,i1,a1)  
              b15  += etemp
#
#             b1x x=2,5
#             ---------
#
              etemp = e2iaia(i,a,i1,a1)*e2iaia(i,a,i1,a1)  
              b22  += etemp
#
              etemp = e2iaia(i,a,i1,a1)*e3iaia(i,a,i1,a1)  
              b23  += etemp
#
              etemp = e2iaia(i,a,i1,a1)*e4iaia(i,a,i1,a1)  
              b24  += etemp
#
              etemp = e2iaia(i,a,i1,a1)*e5iaia(i,a,i1,a1)  
              b25  += etemp
#
#             b1x x=3,5
#             ---------
#
              etemp = e3iaia(i,a,i1,a1)*e3iaia(i,a,i1,a1)  
              b33  += etemp
#
              etemp = e3iaia(i,a,i1,a1)*e4iaia(i,a,i1,a1)  
              b34  += etemp
#
              etemp = e3iaia(i,a,i1,a1)*e5iaia(i,a,i1,a1)  
              b35  += etemp
#
#             b1x x=4,5
#             ---------
#
              etemp = e4iaia(i,a,i1,a1)*e4iaia(i,a,i1,a1)  
              b44  += etemp
#
              etemp = e4iaia(i,a,i1,a1)*e5iaia(i,a,i1,a1)  
              b45  += etemp
#
#             b1x x=5,5
#             ---------
#
              etemp = e5iaia(i,a,i1,a1)*e5iaia(i,a,i1,a1)  
              b55  += etemp
#
     ENDPARDO a, i, a1, i1
#
#    Compute contributions due to L2jbjb amplitudes.
#    -----------------------------------------------
#
     PARDO b, j, b1, j1
#
#          REQUEST/GET amplitude data from all 5 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1jbjb(j,b,j1,b1) b # kiter-4 amplitudes
           REQUEST e2jbjb(j,b,j1,b1) b # kiter-3 amplitudes
           REQUEST e3jbjb(j,b,j1,b1) b # kiter-2 amplitudes
           REQUEST e4jbjb(j,b,j1,b1) b # kiter-1 amplitudes
           REQUEST e5jbjb(j,b,j1,b1) b # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,5
#             ---------
#
              etemp = e1jbjb(j,b,j1,b1)*e1jbjb(j,b,j1,b1)  
              b11  += etemp
#
              etemp = e1jbjb(j,b,j1,b1)*e2jbjb(j,b,j1,b1)  
              b12  += etemp
#
              etemp = e1jbjb(j,b,j1,b1)*e3jbjb(j,b,j1,b1)  
              b13  += etemp
#
              etemp = e1jbjb(j,b,j1,b1)*e4jbjb(j,b,j1,b1)  
              b14  += etemp
#
              etemp = e1jbjb(j,b,j1,b1)*e5jbjb(j,b,j1,b1)  
              b15  += etemp
#
#             b1x x=2,5
#             ---------
#
              etemp = e2jbjb(j,b,j1,b1)*e2jbjb(j,b,j1,b1)  
              b22  += etemp
#
              etemp = e2jbjb(j,b,j1,b1)*e3jbjb(j,b,j1,b1)  
              b23  += etemp
#
              etemp = e2jbjb(j,b,j1,b1)*e4jbjb(j,b,j1,b1)  
              b24  += etemp
#
              etemp = e2jbjb(j,b,j1,b1)*e5jbjb(j,b,j1,b1)  
              b25  += etemp
#
#             b1x x=3,5
#             ---------
#
              etemp = e3jbjb(j,b,j1,b1)*e3jbjb(j,b,j1,b1)  
              b33  += etemp
#
              etemp = e3jbjb(j,b,j1,b1)*e4jbjb(j,b,j1,b1)  
              b34  += etemp
#
              etemp = e3jbjb(j,b,j1,b1)*e5jbjb(j,b,j1,b1)  
              b35  += etemp
#
#             b1x x=4,5
#             ---------
#
              etemp = e4jbjb(j,b,j1,b1)*e4jbjb(j,b,j1,b1)  
              b44  += etemp
#
              etemp = e4jbjb(j,b,j1,b1)*e5jbjb(j,b,j1,b1)  
              b45  += etemp
#
#             b1x x=5,5
#             ---------
#
              etemp = e5jbjb(j,b,j1,b1)*e5jbjb(j,b,j1,b1)  
              b55  += etemp
#
     ENDPARDO b, j, b1, j1
#
#    Compute contributions due to L2iajb amplitudes.
#    -----------------------------------------------
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 5 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1iajb(i,a,j,b) a # kiter-4 amplitudes
           REQUEST e2iajb(i,a,j,b) a # kiter-3 amplitudes
           REQUEST e3iajb(i,a,j,b) a # kiter-2 amplitudes
           REQUEST e4iajb(i,a,j,b) a # kiter-1 amplitudes
           REQUEST e5iajb(i,a,j,b) a # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,5
#             ---------
#
              etemp = e1iajb(i,a,j,b)*e1iajb(i,a,j,b)  
              etemp *= 4.0
              b11  += etemp
#
              etemp = e1iajb(i,a,j,b)*e2iajb(i,a,j,b)  
              etemp *= 4.0
              b12  += etemp
#
              etemp = e1iajb(i,a,j,b)*e3iajb(i,a,j,b)  
              etemp *= 4.0
              b13  += etemp
#
              etemp = e1iajb(i,a,j,b)*e4iajb(i,a,j,b)  
              etemp *= 4.0
              b14  += etemp
#
              etemp = e1iajb(i,a,j,b)*e5iajb(i,a,j,b)  
              etemp *= 4.0
              b15  += etemp
#
#             b1x x=2,5
#             ---------
#
              etemp = e2iajb(i,a,j,b)*e2iajb(i,a,j,b)  
              etemp *= 4.0
              b22  += etemp
#
              etemp = e2iajb(i,a,j,b)*e3iajb(i,a,j,b)  
              etemp *= 4.0
              b23  += etemp
#
              etemp = e2iajb(i,a,j,b)*e4iajb(i,a,j,b)  
              etemp *= 4.0
              b24  += etemp
#
              etemp = e2iajb(i,a,j,b)*e5iajb(i,a,j,b)  
              etemp *= 4.0
              b25  += etemp
#
#             b1x x=3,5
#             ---------
#
              etemp = e3iajb(i,a,j,b)*e3iajb(i,a,j,b)  
              etemp *= 4.0
              b33  += etemp
#
              etemp = e3iajb(i,a,j,b)*e4iajb(i,a,j,b)  
              etemp *= 4.0
              b34  += etemp
#
              etemp = e3iajb(i,a,j,b)*e5iajb(i,a,j,b)  
              etemp *= 4.0
              b35  += etemp
#
#             b1x x=4,5
#             ---------
#
              etemp = e4iajb(i,a,j,b)*e4iajb(i,a,j,b)  
              etemp *= 4.0
              b44  += etemp
#
              etemp = e4iajb(i,a,j,b)*e5iajb(i,a,j,b)  
              etemp *= 4.0
              b45  += etemp
#
#             b1x x=5,5
#             ---------
#
              etemp = e5iajb(i,a,j,b)*e5iajb(i,a,j,b)  
              etemp *= 4.0
              b55  += etemp
#
     ENDPARDO a, i, b, j
#
#    Compute contributions due to L1ia amplitudes. 
#    --------------------------------------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 5 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET e1ia(i,a)    # kiter-4 amplitudes  
           GET e2ia(i,a)    # kiter-3 amplitudes  
           GET e3ia(i,a)    # kiter-2 amplitudes  
           GET e4ia(i,a)    # kiter-1 amplitudes  
           GET e5ia(i,a)    # kiter-0 amplitudes  
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#             b1x x=1,5 
#             --------- 
#
              etemp = e1ia(i,a)*e1ia(i,a) 
              etemp *= 4.0
              b11  += etemp            
#
              etemp = e1ia(i,a)*e2ia(i,a) 
              etemp *= 4.0
              b12  += etemp            
#
              etemp = e1ia(i,a)*e3ia(i,a) 
              etemp *= 4.0
              b13  += etemp            
#
              etemp = e1ia(i,a)*e4ia(i,a) 
              etemp *= 4.0
              b14  += etemp            
#
              etemp = e1ia(i,a)*e5ia(i,a) 
              etemp *= 4.0
              b15  += etemp            
#
#             b1x x=2,5 
#             --------- 
#
              etemp = e2ia(i,a)*e2ia(i,a) 
              etemp *= 4.0
              b22  += etemp            
#
              etemp = e2ia(i,a)*e3ia(i,a) 
              etemp *= 4.0
              b23  += etemp            
#
              etemp = e2ia(i,a)*e4ia(i,a) 
              etemp *= 4.0
              b24  += etemp            
#
              etemp = e2ia(i,a)*e5ia(i,a) 
              etemp *= 4.0
              b25  += etemp            
#
#             b1x x=3,5 
#             --------- 
#
              etemp = e3ia(i,a)*e3ia(i,a) 
              etemp *= 4.0
              b33  += etemp            
#
              etemp = e3ia(i,a)*e4ia(i,a) 
              etemp *= 4.0
              b34  += etemp            
#
              etemp = e3ia(i,a)*e5ia(i,a) 
              etemp *= 4.0
              b35  += etemp            
#
#             b1x x=4,5 
#             --------- 
#
              etemp = e4ia(i,a)*e4ia(i,a) 
              etemp *= 4.0
              b44  += etemp            
#
              etemp = e4ia(i,a)*e5ia(i,a) 
              etemp *= 4.0
              b45  += etemp            
#
#             b1x x=5,5 
#             --------- 
#
              etemp = e5ia(i,a)*e5ia(i,a) 
              etemp *= 4.0
              b55  += etemp            
#
     ENDPARDO a, i 
#
#    Compute contributions due to L1jb amplitudes. 
#    --------------------------------------------- 
#
     PARDO b, j  
#
#          REQUEST/GET amplitude data from all 5 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET e1jb(j,b)    # kiter-4 amplitudes  
           GET e2jb(j,b)    # kiter-3 amplitudes  
           GET e3jb(j,b)    # kiter-2 amplitudes  
           GET e4jb(j,b)    # kiter-1 amplitudes  
           GET e5jb(j,b)    # kiter-0 amplitudes  
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#             b1x x=1,5 
#             --------- 
#
              etemp = e1jb(j,b)*e1jb(j,b) 
              etemp *= 4.0
              b11  += etemp            
#
              etemp = e1jb(j,b)*e2jb(j,b) 
              etemp *= 4.0
              b12  += etemp            
#
              etemp = e1jb(j,b)*e3jb(j,b) 
              etemp *= 4.0
              b13  += etemp            
#
              etemp = e1jb(j,b)*e4jb(j,b) 
              etemp *= 4.0
              b14  += etemp            
#
              etemp = e1jb(j,b)*e5jb(j,b) 
              etemp *= 4.0
              b15  += etemp            
#
#             b1x x=2,5 
#             --------- 
#
              etemp = e2jb(j,b)*e2jb(j,b) 
              etemp *= 4.0
              b22  += etemp            
#
              etemp = e2jb(j,b)*e3jb(j,b) 
              etemp *= 4.0
              b23  += etemp            
#
              etemp = e2jb(j,b)*e4jb(j,b) 
              etemp *= 4.0
              b24  += etemp            
#
              etemp = e2jb(j,b)*e5jb(j,b) 
              etemp *= 4.0
              b25  += etemp            
#
#             b1x x=3,5 
#             --------- 
#
              etemp = e3jb(j,b)*e3jb(j,b) 
              etemp *= 4.0
              b33  += etemp            
#
              etemp = e3jb(j,b)*e4jb(j,b) 
              etemp *= 4.0
              b34  += etemp            
#
              etemp = e3jb(j,b)*e5jb(j,b) 
              etemp *= 4.0
              b35  += etemp            
#
#             b1x x=4,5 
#             --------- 
#
              etemp = e4jb(j,b)*e4jb(j,b) 
              etemp *= 4.0
              b44  += etemp            
#
              etemp = e4jb(j,b)*e5jb(j,b) 
              etemp *= 4.0
              b45  += etemp            
#
#             b1x x=5,5 
#             --------- 
#
              etemp = e5jb(j,b)*e5jb(j,b) 
              etemp *= 4.0
              b55  += etemp            
#
     ENDPARDO b, j 
#
     execute sip_barrier
     execute server_barrier 
#
#    Collectively sum B-matrix elements. 
#    -----------------------------------
#
     collective Tb11 += b11 
     collective Tb12 += b12 
     collective Tb13 += b13 
     collective Tb14 += b14 
     collective Tb15 += b15 
     collective Tb22 += b22 
     collective Tb23 += b23 
     collective Tb24 += b24 
     collective Tb25 += b25 
     collective Tb33 += b33 
     collective Tb34 += b34 
     collective Tb35 += b35 
     collective Tb44 += b44 
     collective Tb45 += b45 
     collective Tb55 += b55 
     execute server_barrier 
#
#    Now the unique elements of the 'B-matrix' have been computed, the array is filled out
#    in the setup_diis. 
#    --------------------------------------------------------------------------------------
#
#    Put the elements of the 'B-matrix', which have been computed as scalars into the  
#    R-matrix. 
#    -------------------------------------------------------------------------------- 
#
     CALL SETUP_DIIS 
#
     execute compute_diis # --> New instruction  
#
     c1 = Tb11 
     c2 = Tb22 
     c3 = Tb33 
     c4 = Tb44 
     c5 = Tb55 
     execute print_scalar c1 
     execute print_scalar c2 
     execute print_scalar c3 
     execute print_scalar c4 
     execute print_scalar c5 
     execute server_barrier 
     execute sip_barrier 
#
#    Done computing the c-vector. 
#    ---------------------------- 
#
#    Form the updated amplitudes using the c-vector. 
#    -----------------------------------------------  
#
#    Form L2old_aa. 
#    -------------- 
#
     PARDO a, i, a1, i1
#
#          REQUEST/GET amplitude data from all 5 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST d0iaia(i,a,i1,a1) a # kiter-5 amplitudes
           REQUEST d1iaia(i,a,i1,a1) a # kiter-4 amplitudes
           REQUEST d2iaia(i,a,i1,a1) a # kiter-3 amplitudes
           REQUEST d3iaia(i,a,i1,a1) a # kiter-2 amplitudes
           REQUEST d4iaia(i,a,i1,a1) a # kiter-1 amplitudes
#
           REQUEST e1iaia(i,a,i1,a1) a # kiter-4 amplitudes
           REQUEST e2iaia(i,a,i1,a1) a # kiter-3 amplitudes
           REQUEST e3iaia(i,a,i1,a1) a # kiter-2 amplitudes
           REQUEST e4iaia(i,a,i1,a1) a # kiter-1 amplitudes
           REQUEST e5iaia(i,a,i1,a1) a # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> T2old_aa.
#          ---------------------------------------------------------
#
           t2iaia(i,a,i1,a1)            = d0iaia(i,a,i1,a1)
           t2iaia(i,a,i1,a1)           += e1iaia(i,a,i1,a1)
           t2iaia(i,a,i1,a1)           *= c1
           tiaia(i,a,i1,a1)             = t2iaia(i,a,i1,a1)
#
           t2iaia(i,a,i1,a1)            = d1iaia(i,a,i1,a1)
           t2iaia(i,a,i1,a1)           += e2iaia(i,a,i1,a1)
           t2iaia(i,a,i1,a1)           *= c2
           tiaia(i,a,i1,a1)            += t2iaia(i,a,i1,a1)
#
           t2iaia(i,a,i1,a1)            = d2iaia(i,a,i1,a1)
           t2iaia(i,a,i1,a1)           += e3iaia(i,a,i1,a1)
           t2iaia(i,a,i1,a1)           *= c3
           tiaia(i,a,i1,a1)            += t2iaia(i,a,i1,a1)
#
           t2iaia(i,a,i1,a1)            = d3iaia(i,a,i1,a1)
           t2iaia(i,a,i1,a1)           += e4iaia(i,a,i1,a1)
           t2iaia(i,a,i1,a1)           *= c4
           tiaia(i,a,i1,a1)            += t2iaia(i,a,i1,a1)
#
           t2iaia(i,a,i1,a1)            = d4iaia(i,a,i1,a1)
           t2iaia(i,a,i1,a1)           += e5iaia(i,a,i1,a1)
           t2iaia(i,a,i1,a1)           *= c5
           tiaia(i,a,i1,a1)            += t2iaia(i,a,i1,a1)
#
           PUT L2old_aa(i,a,i1,a1)      = tiaia(i,a,i1,a1)
#
     ENDPARDO a, i, a1, i1
#
#    Form L2old_bb. 
#    -------------- 
#
     PARDO b, j, b1, j1
#
#          REQUEST/GET amplitude data from all 5 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST D0jbjb(j,b,j1,b1) b # kiter-5 amplitudes
           REQUEST D1jbjb(j,b,j1,b1) b # kiter-4 amplitudes
           REQUEST D2jbjb(j,b,j1,b1) b # kiter-3 amplitudes
           REQUEST D3jbjb(j,b,j1,b1) b # kiter-2 amplitudes
           REQUEST D4jbjb(j,b,j1,b1) b # kiter-1 amplitudes
#
           REQUEST e1jbjb(j,b,j1,b1) b # kiter-4 amplitudes
           REQUEST e2jbjb(j,b,j1,b1) b # kiter-3 amplitudes
           REQUEST e3jbjb(j,b,j1,b1) b # kiter-2 amplitudes
           REQUEST e4jbjb(j,b,j1,b1) b # kiter-1 amplitudes
           REQUEST e5jbjb(j,b,j1,b1) b # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> T2old_bb.
#          ---------------------------------------------------------
#
           t2jbjb(j,b,j1,b1)            = D0jbjb(j,b,j1,b1)  
           t2jbjb(j,b,j1,b1)           += e1jbjb(j,b,j1,b1)
           t2jbjb(j,b,j1,b1)           *= c1
           tjbjb(j,b,j1,b1)             = t2jbjb(j,b,j1,b1)
#
           t2jbjb(j,b,j1,b1)            = D1jbjb(j,b,j1,b1)  
           t2jbjb(j,b,j1,b1)           += e2jbjb(j,b,j1,b1)
           t2jbjb(j,b,j1,b1)           *= c2
           tjbjb(j,b,j1,b1)            += t2jbjb(j,b,j1,b1)
#
           t2jbjb(j,b,j1,b1)            = D2jbjb(j,b,j1,b1)  
           t2jbjb(j,b,j1,b1)           += e3jbjb(j,b,j1,b1)
           t2jbjb(j,b,j1,b1)           *= c3
           tjbjb(j,b,j1,b1)            += t2jbjb(j,b,j1,b1)
#
           t2jbjb(j,b,j1,b1)            = D3jbjb(j,b,j1,b1)  
           t2jbjb(j,b,j1,b1)           += e4jbjb(j,b,j1,b1)
           t2jbjb(j,b,j1,b1)           *= c4
           tjbjb(j,b,j1,b1)            += t2jbjb(j,b,j1,b1)
#
           t2jbjb(j,b,j1,b1)            = D4jbjb(j,b,j1,b1)  
           t2jbjb(j,b,j1,b1)           += e5jbjb(j,b,j1,b1)
           t2jbjb(j,b,j1,b1)           *= c5
           tjbjb(j,b,j1,b1)            += t2jbjb(j,b,j1,b1)
#
           PUT L2old_bb(j,b,j1,b1)      = tjbjb(j,b,j1,b1)
#
     ENDPARDO b, j, b1, j1
#
#    Form L2old_ab. 
#    -------------- 
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 5 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST D0iajb(i,a,j,b) a # kiter-5 amplitudes
           REQUEST D1iajb(i,a,j,b) a # kiter-4 amplitudes
           REQUEST D2iajb(i,a,j,b) a # kiter-3 amplitudes
           REQUEST D3iajb(i,a,j,b) a # kiter-2 amplitudes
           REQUEST D4iajb(i,a,j,b) a # kiter-1 amplitudes
#
           REQUEST e1iajb(i,a,j,b) a # kiter-4 amplitudes
           REQUEST e2iajb(i,a,j,b) a # kiter-3 amplitudes
           REQUEST e3iajb(i,a,j,b) a # kiter-2 amplitudes
           REQUEST e4iajb(i,a,j,b) a # kiter-1 amplitudes
           REQUEST e5iajb(i,a,j,b) a # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> L2old_ab.
#          ---------------------------------------------------------
#
           t2iajb(i,a,j,b)            = d0iajb(i,a,j,b)
           t2iajb(i,a,j,b)           += e1iajb(i,a,j,b)
           t2iajb(i,a,j,b)           *= c1
           tiajb(i,a,j,b)             = t2iajb(i,a,j,b)
#
           t2iajb(i,a,j,b)            = d1iajb(i,a,j,b)
           t2iajb(i,a,j,b)           += e2iajb(i,a,j,b)
           t2iajb(i,a,j,b)           *= c2
           tiajb(i,a,j,b)            += t2iajb(i,a,j,b)
#
           t2iajb(i,a,j,b)            = d2iajb(i,a,j,b)
           t2iajb(i,a,j,b)           += e3iajb(i,a,j,b)
           t2iajb(i,a,j,b)           *= c3
           tiajb(i,a,j,b)            += t2iajb(i,a,j,b)
#
           t2iajb(i,a,j,b)            = d3iajb(i,a,j,b)
           t2iajb(i,a,j,b)           += e4iajb(i,a,j,b)
           t2iajb(i,a,j,b)           *= c4
           tiajb(i,a,j,b)            += t2iajb(i,a,j,b)
#
           t2iajb(i,a,j,b)            = d4iajb(i,a,j,b)
           t2iajb(i,a,j,b)           += e5iajb(i,a,j,b)
           t2iajb(i,a,j,b)           *= c5
           tiajb(i,a,j,b)            += t2iajb(i,a,j,b)
#
           PUT L2old_ab(i,a,j,b)      = tiajb(i,a,j,b)
#
     ENDPARDO a, i, b, j
#
#    Form Lai_old. 
#    ------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 5 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET D0ia(i,a)     # kiter-5 amplitudes  
           GET D1ia(i,a)     # kiter-4 amplitudes  
           GET D2ia(i,a)     # kiter-3 amplitudes  
           GET D3ia(i,a)     # kiter-2 amplitudes  
           GET D4ia(i,a)     # kiter-1 amplitudes  
#
           GET e1ia(i,a)     # kiter-4 amplitudes  
           GET e2ia(i,a)     # kiter-3 amplitudes  
           GET e3ia(i,a)     # kiter-2 amplitudes  
           GET e4ia(i,a)     # kiter-1 amplitudes  
           GET e5ia(i,a)     # kiter-0 amplitudes  
#
#          Compute contributions to updated amplitudes --> lai_old. 
#          --------------------------------------------------------  
# 
           t1ia(i,a)     = d0ia(i,a) 
           t1ia(i,a)    += e1ia(i,a) 
           t1ia(i,a)    *= c1  
           tia(i,a)      = t1ia(i,a) 
# 
           t1ia(i,a)     = d1ia(i,a) 
           t1ia(i,a)    += e2ia(i,a) 
           t1ia(i,a)    *= c2  
           tia(i,a)     += t1ia(i,a) 
# 
           t1ia(i,a)     = d2ia(i,a) 
           t1ia(i,a)    += e3ia(i,a) 
           t1ia(i,a)    *= c3  
           tia(i,a)     += t1ia(i,a) 
# 
           t1ia(i,a)     = d3ia(i,a) 
           t1ia(i,a)    += e4ia(i,a) 
           t1ia(i,a)    *= c4  
           tia(i,a)     += t1ia(i,a) 
# 
           t1ia(i,a)     = d4ia(i,a) 
           t1ia(i,a)    += e5ia(i,a) 
           t1ia(i,a)    *= c5  
           tia(i,a)     += t1ia(i,a) 
#
           PUT L1a_old(i,a) = tia(i,a) 
#
     ENDPARDO a, i  
#
#    Form Lbj_old. 
#    ------------- 
#
     PARDO b, j  
#
#          REQUEST/GET amplitude data from all 5 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET D0jb(j,b)     # kiter-5 amplitudes  
           GET D1jb(j,b)     # kiter-4 amplitudes  
           GET D2jb(j,b)     # kiter-3 amplitudes  
           GET D3jb(j,b)     # kiter-2 amplitudes  
           GET D4jb(j,b)     # kiter-1 amplitudes  
#
           GET e1jb(j,b)     # kiter-4 amplitudes  
           GET e2jb(j,b)     # kiter-3 amplitudes  
           GET e3jb(j,b)     # kiter-2 amplitudes  
           GET e4jb(j,b)     # kiter-1 amplitudes  
           GET e5jb(j,b)     # kiter-0 amplitudes  
#
#          Compute contributions to updated amplitudes --> lbj_old. 
#          --------------------------------------------------------  
# 
           t1jb(j,b)     = d0jb(j,b) 
           t1jb(j,b)    += e1jb(j,b) 
           t1jb(j,b)    *= c1  
           tjb(j,b)      = t1jb(j,b) 
# 
           t1jb(j,b)     = d1jb(j,b) 
           t1jb(j,b)    += e2jb(j,b) 
           t1jb(j,b)    *= c2  
           tjb(j,b)     += t1jb(j,b) 
# 
           t1jb(j,b)     = d2jb(j,b) 
           t1jb(j,b)    += e3jb(j,b) 
           t1jb(j,b)    *= c3  
           tjb(j,b)     += t1jb(j,b) 
# 
           t1jb(j,b)     = d3jb(j,b) 
           t1jb(j,b)    += e4jb(j,b) 
           t1jb(j,b)    *= c4  
           tjb(j,b)     += t1jb(j,b) 
# 
           t1jb(j,b)     = d4jb(j,b) 
           t1jb(j,b)    += e5jb(j,b) 
           t1jb(j,b)    *= c5  
           tjb(j,b)     += t1jb(j,b) 
# 
           PUT l1b_old(j,b) = tjb(j,b) 
# 
     ENDPARDO b, j 
#
     execute server_barrier 
     execute sip_barrier 
#
     ENDPROC DIIS4  
#    ------------- 
#
# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
#
     PROC MOVE4
#    ----------
#
#    1 --> 0
#    ---------------------------------------------------
#
     PARDO a, i, a1, i1
           REQUEST                     d1iaia(i,a,i1,a1) a
           PREPARE d0iaia(i,a,i1,a1) = d1iaia(i,a,i1,a1)
     ENDPARDO a, i, a1, i1
#
     PARDO b, j, b1, j1
           REQUEST                     d1jbjb(j,b,j1,b1) b
           PREPARE d0jbjb(j,b,j1,b1) = d1jbjb(j,b,j1,b1)
     ENDPARDO b, j, b1, j1
#
     PARDO a, i, b, j
           REQUEST                   d1iajb(i,a,j,b) a
           PREPARE d0iajb(i,a,j,b) = d1iajb(i,a,j,b)
     ENDPARDO a, i, b, j
#
     PARDO a, i
           GET d1ia(i,a)
           PUT d0ia(i,a) = d1ia(i,a)
     ENDPARDO a, i
#
     PARDO b, j
           GET d1jb(j,b)
           PUT d0jb(j,b) = d1jb(j,b)
     ENDPARDO b, j
#
     execute server_barrier
     execute sip_barrier
#
#    2 --> 1
#    ---------------------------------------------------
#
     PARDO a, i, a1, i1
           REQUEST                     e2iaia(i,a,i1,a1) a
           PREPARE e1iaia(i,a,i1,a1) = e2iaia(i,a,i1,a1)
     ENDPARDO a, i, a1, i1
#
     PARDO b, j, b1, j1
           REQUEST                     e2jbjb(j,b,j1,b1) b
           PREPARE e1jbjb(j,b,j1,b1) = e2jbjb(j,b,j1,b1)
     ENDPARDO b, j, b1, j1
#
     PARDO a, i, b, j
           REQUEST                   e2iajb(i,a,j,b) a
           PREPARE e1iajb(i,a,j,b) = e2iajb(i,a,j,b)
     ENDPARDO a, i, b, j
#
     PARDO a, i, a1, i1
           REQUEST                     d2iaia(i,a,i1,a1) a
           PREPARE d1iaia(i,a,i1,a1) = d2iaia(i,a,i1,a1)
     ENDPARDO a, i, a1, i1
#
     PARDO b, j, b1, j1
           REQUEST                     d2jbjb(j,b,j1,b1) b
           PREPARE d1jbjb(j,b,j1,b1) = d2jbjb(j,b,j1,b1)
     ENDPARDO b, j, b1, j1
#
     PARDO a, i, b, j
           REQUEST                   d2iajb(i,a,j,b) a
           PREPARE d1iajb(i,a,j,b) = d2iajb(i,a,j,b)
     ENDPARDO a, i, b, j
#
     PARDO a, i
           GET e2ia(i,a)
           PUT e1ia(i,a) = e2ia(i,a)
     ENDPARDO a, i
#
     PARDO b, j
           GET e2jb(j,b)
           PUT e1jb(j,b) = e2jb(j,b)
     ENDPARDO b, j
#
     PARDO a, i
           GET d2ia(i,a)
           PUT d1ia(i,a) = d2ia(i,a)
     ENDPARDO a, i
#
     PARDO b, j
           GET d2jb(j,b)
           PUT d1jb(j,b) = d2jb(j,b)
     ENDPARDO b, j
#
     execute sip_barrier
     execute server_barrier
#
#    3 --> 2
#    ---------------------------------------------------
#
     PARDO a, i, a1, i1
           REQUEST                     e3iaia(i,a,i1,a1) a
           PREPARE e2iaia(i,a,i1,a1) = e3iaia(i,a,i1,a1)
     ENDPARDO a, i, a1, i1
#
     PARDO b, j, b1, j1
           REQUEST                     e3jbjb(j,b,j1,b1) b
           PREPARE e2jbjb(j,b,j1,b1) = e3jbjb(j,b,j1,b1)
     ENDPARDO b, j, b1, j1
#
     PARDO a, i, b, j
           REQUEST                   e3iajb(i,a,j,b) a
           PREPARE e2iajb(i,a,j,b) = e3iajb(i,a,j,b)
     ENDPARDO a, i, b, j
#
     PARDO a, i, a1, i1
           REQUEST                     d3iaia(i,a,i1,a1) a
           PREPARE d2iaia(i,a,i1,a1) = d3iaia(i,a,i1,a1)
     ENDPARDO a, i, a1, i1
#
     PARDO b, j, b1, j1
           REQUEST                     d3jbjb(j,b,j1,b1) b
           PREPARE d2jbjb(j,b,j1,b1) = d3jbjb(j,b,j1,b1)
     ENDPARDO b, j, b1, j1
#
     PARDO a, i, b, j
           REQUEST                   d3iajb(i,a,j,b) a
           PREPARE d2iajb(i,a,j,b) = d3iajb(i,a,j,b)
     ENDPARDO a, i, b, j
#
     PARDO a, i
           GET e3ia(i,a)
           PUT e2ia(i,a) = e3ia(i,a)
     ENDPARDO a, i
#
     PARDO b, j
           GET e3jb(j,b)
           PUT e2jb(j,b) = e3jb(j,b)
     ENDPARDO b, j
#
     PARDO a, i
           GET d3ia(i,a)
           PUT d2ia(i,a) = d3ia(i,a)
     ENDPARDO a, i
#
     PARDO b, j
           GET d3jb(j,b)
           PUT d2jb(j,b) = d3jb(j,b)
     ENDPARDO b, j
#
     execute sip_barrier
     execute server_barrier
#
#    4 --> 3
#    ---------------------------------------------------
#
     PARDO a, i, a1, i1
           REQUEST                     e4iaia(i,a,i1,a1) a
           PREPARE e3iaia(i,a,i1,a1) = e4iaia(i,a,i1,a1)
     ENDPARDO a, i, a1, i1
#
     PARDO b, j, b1, j1
           REQUEST                     e4jbjb(j,b,j1,b1) b
           PREPARE e3jbjb(j,b,j1,b1) = e4jbjb(j,b,j1,b1)
     ENDPARDO b, j, b1, j1
#
     PARDO a, i, b, j
           REQUEST                   e4iajb(i,a,j,b) a
           PREPARE e3iajb(i,a,j,b) = e4iajb(i,a,j,b)
     ENDPARDO a, i, b, j
#
     PARDO a, i, a1, i1
           REQUEST                     d4iaia(i,a,i1,a1) a
           PREPARE d3iaia(i,a,i1,a1) = d4iaia(i,a,i1,a1)
     ENDPARDO a, i, a1, i1
#
     PARDO b, j, b1, j1
           REQUEST                     d4jbjb(j,b,j1,b1) b
           PREPARE d3jbjb(j,b,j1,b1) = d4jbjb(j,b,j1,b1)
     ENDPARDO b, j, b1, j1
#
     PARDO a, i, b, j
           REQUEST                   d4iajb(i,a,j,b) a
           PREPARE d3iajb(i,a,j,b) = d4iajb(i,a,j,b)
     ENDPARDO a, i, b, j
#
     PARDO a, i
           GET e4ia(i,a)
           PUT e3ia(i,a) = e4ia(i,a)
     ENDPARDO a, i
#
     PARDO b, j
           GET e4jb(j,b)
           PUT e3jb(j,b) = e4jb(j,b)
     ENDPARDO b, j
#
     PARDO a, i
           GET d4ia(i,a)
           PUT d3ia(i,a) = d4ia(i,a)
     ENDPARDO a, i
#
     PARDO b, j
           GET d4jb(j,b)
           PUT d3jb(j,b) = d4jb(j,b)
     ENDPARDO b, j
#
     execute sip_barrier
     execute server_barrier
#
#    5 --> 4
#    ---------------------------------------------------
#
     PARDO a, i, a1, i1
           REQUEST                     e5iaia(i,a,i1,a1) a
           PREPARE e4iaia(i,a,i1,a1) = e5iaia(i,a,i1,a1)
     ENDPARDO a, i, a1, i1
#
     PARDO b, j, b1, j1
           REQUEST                     e5jbjb(j,b,j1,b1) b
           PREPARE e4jbjb(j,b,j1,b1) = e5jbjb(j,b,j1,b1)
     ENDPARDO b, j, b1, j1
#
     PARDO a, i, b, j
           REQUEST                   e5iajb(i,a,j,b) a
           PREPARE e4iajb(i,a,j,b) = e5iajb(i,a,j,b)
     ENDPARDO a, i, b, j
#
     PARDO a, i, a1, i1
           GET                         L2old_aa(i,a,i1,a1)
           PREPARE d4iaia(i,a,i1,a1) = L2old_aa(i,a,i1,a1)
     ENDPARDO a, i, a1, i1
#
     PARDO b, j, b1, j1
           GET                         L2old_bb(j,b,j1,b1)
           PREPARE d4jbjb(j,b,j1,b1) = L2old_bb(j,b,j1,b1)
     ENDPARDO b, j, b1, j1
#
     PARDO a, i, b, j
           GET                        L2old_ab(i,a,j,b)
           PREPARE d4iajb(i,a,j,b)  = L2old_ab(i,a,j,b)
     ENDPARDO a, i, b, j
#
     PARDO a, i
           GET e5ia(i,a)
           PUT e4ia(i,a) = e5ia(i,a)
     ENDPARDO a, i
#
     PARDO b, j
           GET e5jb(j,b)
           PUT e4jb(j,b) = e5jb(j,b)
     ENDPARDO b, j
#
     PARDO a, i
           GET l1a_old(i,a)
           PUT d4ia(i,a) = l1a_old(i,a)
     ENDPARDO a, i
#
     PARDO b, j
           GET l1b_old(j,b)
           PUT d4jb(j,b) = l1b_old(j,b)
     ENDPARDO b, j
#
     execute sip_barrier
     execute server_barrier
#
     ENDPROC MOVE4
#    -------------
#
# ---------------------------------------------------------------------------------
#
#
# ------------------------------------------------------------------------------- 
# 
      PROC LMAIN 
#     ---------- 
#
# First compute permanent Intermediates 
# ------------------------------------- 
#
      CALL CREAT1INTER  # creates one-particle intermediate arrays 
#
      CREATE TAUP_aa 
      CREATE TAUP_ab 
      CREATE TAUP_bb 
      execute sip_barrier Fme_a 
      CALL TAUP 
      execute sip_barrier Fme_a 
# 
      CALL FME 
      execute sip_barrier Fme_a 
      CALL F1AE 
      CALL F1MI  
#
      execute sip_barrier Fme_a 
      DELETE TAUP_aa 
      DELETE TAUP_ab 
      DELETE TAUP_bb 
#
      CALL CREAT2INTER  # creates two-particle intermediate arrays 
#
      CREATE TAU_aa 
      CREATE TAU_ab 
      CREATE TAU_bb 
      execute sip_barrier Fme_a 
#
      CALL TAU 
      execute sip_barrier Fme_a 
#
      CALL W1MINJ 
      CALL W2MEBJ   
      execute sip_barrier Fme_a 
      CALL W1IMEN 
#
# Done computing permanent Intermediates 
# -------------------------------------- 
#
# Start Iterations 
# ---------------- 
#
      CALL CREATLAMBDAOLD # creates lambda arrays 
#
      execute sip_barrier 
#
# Create initial guess
# --------------------
#
      CALL LIGUESS
      CALL LOLDENERGY
      eold = ecorrT 
#
      DO kiter 
#
         CALL CREATLAMBDANEW # creates lambda arrays 
         execute sip_barrier 
# 
# Compute temporary intermediates 
# ------------------------------- 
#
         CALL GAE 
         CALL GMI 
         execute sip_barrier 
#
# Compute New L1 and L2 arrays 
# ---------------------------- 
#
         CALL L1ANEW 
         CALL L1BNEW 
         CALL L2NEWAA 
         CALL L2NEWBB 
         CALL L2NEWAB 
         CALL VABCD
         CALL W1EAFM
         CALL W1MEBJ  
         execute sip_barrier Gae_a 
#
# Update arrays 
# ------------- 
#
         CALL UPDATEL1 
         CALL UPDATEL2 
         execute sip_barrier Gae_a 
#
         CALL LOLDENERGY
#
#        Check on convergence
#        --------------------
#
         IF ecorrT < eold
            ediff = eold - ecorrT
            IF ediff < ecrit
               exit # kiter
            ENDIF
         ENDIF
#
         IF ecorrT > eold
            ediff = ecorrT - eold
            IF ediff < ecrit
               exit # kiter
            ENDIF
         ENDIF
#
         if kiter == 2
#
#           Get uptated amplitudes based on DIIS procedure.
#           -----------------------------------------------
#
            CALL DIIS1
#
         endif # kiter == 2
#
         if kiter == 3
#
#           Get uptated amplitudes based on DIIS procedure.
#           -----------------------------------------------
#
            CALL DIIS2
#
         endif # kiter == 3
#
         if kiter == 4
#
#           Get uptated amplitudes based on DIIS procedure.
#           -----------------------------------------------
#
            CALL DIIS3
#
         endif # kiter == 4
#
         if kiter >= 5
#
#           Get uptated amplitudes based on DIIS procedure.
#           -----------------------------------------------
#
            CALL DIIS4
            CALL MOVE4
#
         endif # kiter == 5
#
         CALL MOVEL1  
         CALL MOVEL2  
#
# Clean up temporary arrays 
# ------------------------- 
#
         execute sip_barrier Gae_a 
         CALL CLEANLITER 
         execute sip_barrier Fme_a 
#
#        Reset eold --> enew
#        -------------------
#
         eold = ecorrT
#
      ENDDO kiter
#
      ENDPROC LMAIN 
#     ------------- 
#
# MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM 
#
# PERFORM INITIALIZATION FOR TESTS  
# --------------------------------  
#
      ecrit = cc_conv  
#     CALL TRAN_UHF_P1 # perform full transformation  
#
      CREATE T2old_aa 
      CREATE T2old_ab 
      CREATE T2old_bb 
#
      CREATE t1a_old 
      CREATE t1b_old 
#
# First read in the converged amplitudes
# --------------------------------------
#
      CALL READ_2EL 
#
      execute list_to_blocks t1a_old
      execute list_to_blocks t1b_old
      execute list_to_blocks T2old_aa
      execute list_to_blocks T2old_ab
      execute list_to_blocks T2old_bb
      execute read_list_to_blocks
      execute sip_barrier
#
#     COMPUTE LAMBDA AMPLITUDES
#     ------------------------- 
#
      CALL LMAIN 
#
# Write amplitudes to file
# ------------------------
#
      CALL WRITE_2EL 
#
      execute blocks_to_list t1a_old
      execute blocks_to_list t1b_old
      execute blocks_to_list T2old_aa
      execute blocks_to_list T2old_ab
      execute blocks_to_list T2old_bb
#
      execute blocks_to_list l1a_old
      execute blocks_to_list l1b_old
      execute blocks_to_list L2old_aa
      execute blocks_to_list L2old_ab
      execute blocks_to_list L2old_bb
      execute write_blocks_to_list
      execute sip_barrier
#
                           ENDSIAL LAMBDA_AO3_MOSYMM    
#
# EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE 
#
#
