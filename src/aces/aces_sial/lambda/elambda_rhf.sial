                           SIAL LAMBDA_SV1     
#
# Working version of UHF based lambda code which computes the VVVV 
# integrals on the fly. No VVVV OR VVVO intermediates are stored. 
# The W1MEBJ intermediates are also not stored rather computed on the 
# fly ==> only W2MEBJ, W1IEMN, and W1MINJ are stored. 
# Many changes have been made to improve scalability. 
#
# BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
#
# Declare indeces 
# --------------- 
#
      index kiter    = 1, cc_iter  
#
      aoindex mu     = 1, norb
      aoindex nu     = 1, norb
      aoindex lambda = 1, norb
      aoindex sigma  = 1, norb
#
      moaindex i = baocc, eaocc
      moaindex i1= baocc, eaocc
      moaindex i2= baocc, eaocc
      moaindex i3= baocc, eaocc
      moaindex i4= baocc, eaocc
#
      moaindex a = bavirt, eavirt
      moaindex a1= bavirt, eavirt
      moaindex a2= bavirt, eavirt
      moaindex a3= bavirt, eavirt
      moaindex a4= bavirt, eavirt
#
      moaindex j = baocc, eaocc
      moaindex j1= baocc, eaocc
      moaindex j2= baocc, eaocc
      moaindex j3= baocc, eaocc
      moaindex j4= baocc, eaocc
#
      moaindex b = bavirt, eavirt
      moaindex b1= bavirt, eavirt
      moaindex b2= bavirt, eavirt
      moaindex b3= bavirt, eavirt
      moaindex b4= bavirt, eavirt
#
      moaindex p = baocc, eavirt
      moaindex p1= baocc, eavirt
      moaindex p2= baocc, eavirt
      moaindex p3= baocc, eavirt
#
      moaindex q = baocc, eavirt
      moaindex q1= baocc, eavirt
      moaindex q2= baocc, eavirt
      moaindex q3= baocc, eavirt
#
#  Watson
#
      DISTRIBUTED  VSTART1A1  (a,i)
      DISTRIBUTED  VSTART1B1  (b,j)
      DISTRIBUTED  VSTART1A2  (a,i)
      DISTRIBUTED  VSTART1B2  (b,j)
      DISTRIBUTED  VSTART1A3  (a,i)
      DISTRIBUTED  VSTART1B3  (b,j)
      DISTRIBUTED  VSTART1A4  (a,i)
      DISTRIBUTED  VSTART1B4  (b,j)
      DISTRIBUTED  VSTART1A5  (a,i)
      DISTRIBUTED  VSTART1B5  (b,j)
      DISTRIBUTED  VSTART1A6  (a,i)
      DISTRIBUTED  VSTART1B6  (b,j)
      DISTRIBUTED  VSTART1A7  (a,i)
      DISTRIBUTED  VSTART1B7  (b,j)
      DISTRIBUTED  VSTART1A8  (a,i)
      DISTRIBUTED  VSTART1B8  (b,j)
      DISTRIBUTED  VSTART1A9  (a,i)
      DISTRIBUTED  VSTART1B9  (b,j)
      DISTRIBUTED  VSTART1A10 (a,i)
      DISTRIBUTED  VSTART1B10 (b,j)
      DISTRIBUTED  VSTART1A11 (a,i)
      DISTRIBUTED  VSTART1B11 (b,j)
      DISTRIBUTED  VSTART1A12 (a,i)
      DISTRIBUTED  VSTART1B12 (b,j)
# 
# Declare static arrays 
# --------------------- 
#
      served t1b_old(b,j) # Watson
      distributed t1a_old(a,i) 
      distributed t1a_new(a,i) 
#
      distributed Fae_a(a,a1) 
      distributed Fae_b(b,b1) 
      distributed Fme_a(i,a) 
      distributed Fmi_a(i,i1) 
      distributed Fmi_b(j,j1) 
#
      distributed Gae_a(a,a1) 
      distributed Gmi_a(i,i1) 
      distributed Ibb(b,b1) 
      distributed Ijj(j,j1) 
#
# 'NEW' distributed arrays used in the W1EAFM procedures 
# ------------------------------------------------------ 
#
      distributed DSaaai(a,a1,a2,i) 
      distributed Daabj(a,a1,b,j) 
      distributed D1eafm_aa(a1,a,a2,i) 
      distributed D2eafm_aa(a2,a,a1,i) 
      distributed D1eafm_ab(a1,a,b,j) 
      distributed D3eafm_ab(a1,a,b1,j)
      distributed Dbbai(b,b1,a,i)
#
# Arrays used in transformation for AO2 algorithm
# -----------------------------------------------
#
      temp Txixi(mu,i1,lambda,i)
      temp Txxii(mu,nu,i1,i)
      temp Tixxi(i1,nu,lambda,i)
      temp Txipi(mu,i,p,i1)
      temp Tpipi(p1,i,p,i1)
      temp T1pipi(p1,i,p,i1)
      temp Tixai(i,mu,a,i1)
      temp Txaii(mu,a,i,i1)
      temp Tiaai(i,a1,a,i1)
      temp Taaii(a,a1,i,i1)
      temp Txaai(mu,a1,a,i)
      temp Taaai(a2,a,a1,i)
      temp Txxai(mu,nu,a,i)
#
      served VSpipi(p1,i,p,i1)
      served Viaai(i,a1,a,i1)
      served Vaaii(a,a1,i,i1)
      served VSaaai(a2,a,a1,i)
#
      temp Txjxj(mu,j1,lambda,j)
      temp Txxjj(mu,nu,j1,j)
      temp Tjjxx(j1,nu,lambda,j)
      temp Tjxxj(j1,nu,lambda,j)
      temp Txjqj(mu,j,q,j1)
      temp Tqjqj(q1,j,q,j1)
      temp T1qjqj(q1,j,q,j1)
      temp Tjxbj(j,mu,b,j1)
      temp Txbjj(mu,b,j,j1)
      temp Tjbbj(j,b1,b,j1)
      temp Tbbjj(b,b1,j,j1)
      temp Txbbj(mu,b1,b,j)
      temp Tbbbj(b2,b,b1,j)
      temp Txxbj(mu,nu,b,j)
#
      temp Txixj(mu,i,nu,j)
      temp Txiqj(mu,i,q,j)
      temp Tpiqj(p,i,q,j)
      temp Tiixx(i,i1,mu,nu)
      temp Tiixb(i,i1,mu,b)
      temp Tiibb(i,i1,b1,b)
      temp Txajj(mu,a,j,j1)
      temp Taajj(a,a1,j,j1)
      temp Txabj(mu,a,b,j)
      temp Tixxj(i,mu,nu,j)
      temp Tixbj(i,mu,b,j)
      temp Tiabj(i,a,b,j)
      temp Taabj(a,a1,b,j)
#
      served Vpiqj(p,i,q,j)
      served Vaabj(a,a1,b,j)
#
      temp Txbii(mu,b,i,i1)
      temp Tbbii(b,b1,i,i1)
      temp Tjbii(j,b,i,i1)
      temp Txbai(mu,b,a,i)
      temp Tbbai(b,b1,a,i)
#
# End Arrays used in transformation for AO2 algorithm
# --------------------------------------------------- 
#
# Declare temporary arrays 
# ------------------------ 
#
      temp Txxxi(mu,nu,lambda,i)
      temp Txxxj(mu,nu,lambda,j)
      temp Txiix(mu,i,i1,nu)
      temp Txjjx(mu,j,j1,nu)
      temp Txijx(mu,i,j,nu)
      temp Txpii(mu,p,i,i1)
      temp Txqii(mu,q,i,i1)
      temp Tppii(p,p1,i,i1)
      temp Tqqii(q,q1,i,i1)
      temp Txpjj(mu,p,j,j1)
      temp Txqjj(mu,q,j,j1)
      temp Tppjj(p,p1,j,j1)
      temp Tqqjj(q,q1,j,j1)
      temp Tixpi(i,mu,p,i1)
      temp Tippi(i,p,p1,i1)
      temp Tjxqj(j,mu,q,j1)
      temp Tjqqj(j,q,q1,j1)
      temp Tixqj(i,mu,q,j)
      temp Tipqj(i,p,q,j)
#
      temp Vblock(i,i1,i2,i3)
      temp Taiai(p,i,p1,i1)
      temp T1aiai(p,i,p1,i1)
      temp T2aiai(p,i,p1,i1)
      temp T3aiai(p,i,p1,i1)
#
      temp  Tiaia(i,a,i1,a1)
      temp T1iaia(i,a,i1,a1)
      temp T2iaia(i,a,i1,a1)
      temp T3iaia(i,a,i1,a1)
      temp T4iaia(i,a,i1,a1)
      temp TXiaia(i,a,i1,a1)
      temp  Tjbjb(j,b,j1,b1)
      temp T1jbjb(j,b,j1,b1)
      temp T2jbjb(j,b,j1,b1)
      temp T3jbjb(j,b,j1,b1)
      temp T4jbjb(j,b,j1,b1)
      temp TXjbjb(j,b,j1,b1)
      temp  Tiajb(i,a,j,b)
      temp T1iajb(i,a,j,b)
      temp T2iajb(i,a,j,b)
# 
      temp Tbjbj(q,j,q1,j1)
      temp T1bjbj(q,j,q1,j1)
      temp T2bjbj(q,j,q1,j1)
      temp T3bjbj(q,j,q1,j1)
      temp Taibj(p,i,q,j)
      temp T1aibj(p,i,q,j)
#
      temp Txxxp(mu,nu,lambda,p)
      temp Txxxq(mu,nu,lambda,q)
      temp Txxpp(mu,nu,p1,p)
      temp Txxqq(mu,nu,q1,q)
      temp Txppp(mu,p2,p1,p)
      temp Txqqq(mu,q2,q1,q)
      temp Txpqq(mu,p,q1,q)
      temp Tpppp(p3,p2,p1,p)
      temp T1pppp(p3,p2,p1,p)
      temp T2pppp(p3,p2,p1,p)
      temp TSpppp(p3,p2,p1,p)
      temp Tqqqq(q3,q2,q1,q)
      temp T1qqqq(q3,q2,q1,q)
      temp T2qqqq(q3,q2,q1,q)
      temp TSqqqq(q3,q2,q1,q)
      temp Tppqq(p1,p,q1,q)
      temp T1ppqq(p1,p,q1,q)
      temp Tqqpp(q1,q,p1,p)
      temp T1qqpp(q1,q,p1,p)
      temp Tixxx(i,mu,nu,sigma)
      temp Tipxx(i,p,nu,sigma)
      temp Tipqx(i,p,q,sigma)
      temp Tipqq(i,p,q,q1)
      temp tpqqp(p1,q,q1,p) 
      temp tqppq(q1,p,p1,q) 
#
      temp tmp1_aiai(a,i,a1,i1) 
      temp tmp2_aiai(a,i,a1,i1) 
      temp tmp3_aiai(a,i,a1,i1) 
      temp tmp1_bjbj(b,j,b1,j1) 
      temp tmp2_bjbj(b,j,b1,j1) 
      temp tmp3_bjbj(b,j,b1,j1) 
      temp tmp1_aibj(a,i,b,j) 
      temp tmp2_aibj(a,i,b,j) 
#
      temp Tai(a,i) 
      temp T1ai(a,i) 
      temp Tbj(b,j) 
      temp T1bj(b,j) 
#
      temp Taa(a,a1) 
      temp T1aa(a,a1) 
      temp Tbb(b,b1) 
      temp T1bb(b,b1) 
      temp Tae_a(a,a1) 
      temp Tae_b(b,b1) 
#
      temp Tia(i,a) 
      temp T1ia(i,a) 
      temp T2ia(i,a) 
      temp T3ia(i,a) 
      temp T4ia(i,a) 
      temp Tjb(j,b) 
      temp T1jb(j,b) 
      temp T2jb(j,b) 
      temp T3jb(j,b) 
      temp T4jb(j,b) 
      temp Tme_a(i,a) 
      temp Tme_b(j,b) 
#
      temp Tii(i,i1) 
      temp T1ii(i,i1) 
      temp Tjj(j,j1) 
      temp T1jj(j,j1) 
      temp Tmi_a(i,i1) 
      temp Tmi_b(j,j1) 
#
      temp Taiii(a,i,i1,i2) 
      temp T1aiii(a,i,i1,i2) 
#
      temp  Tiiii(i,i1,i2,i3) 
      temp T1iiii(i,i1,i2,i3) 
      temp T2iiii(i,i1,i2,i3) 
      temp TXiiii(i,i1,i2,i3) 
#
      temp  Tjjjj(j,j1,j2,j3) 
      temp T1jjjj(j,j1,j2,j3) 
      temp T2jjjj(j,j1,j2,j3) 
      temp  Tbjjj(b,j,j1,j2) 
      temp T1bjjj(b,j,j1,j2) 
#
      temp  Tiijj(i,i1,j2,j3) 
      temp T1iijj(i,i1,j2,j3) 
#
      temp  tmp_aa(a,a1) 
      temp tmp1_aa(a,a1) 
      temp  tmp_ii(i,i1) 
      temp tmp1_ii(i,i1) 
#
      temp  Tiiai(i,i1,a,i2) 
      temp T1iiai(i,i1,a,i2) 
      temp T2iiai(i,i1,a,i2) 
      temp T3iiai(i,i1,a,i2) 
      temp T4iiai(i,i1,a,i2) 
      temp TSiiai(i,i1,a,i2) 
#
      temp  tmp_bb(b,b1) 
      temp tmp1_bb(b,b1) 
      temp  tmp_jj(j,j1) 
      temp tmp1_jj(j,j1) 
#
      temp  Tjjbj(j,j1,b,j2) 
      temp T1jjbj(j,j1,b,j2) 
      temp T2jjbj(j,j1,b,j2) 
      temp T3jjbj(j,j1,b,j2) 
      temp T4jjbj(j,j1,b,j2) 
      temp TSjjbj(j,j1,b,j2) 
# 
      temp T1aaai(a,a1,a2,i)  
      temp T2aaai(a,a1,a2,i)  
      temp Taaaa(a,a1,a2,a3)  
      temp T1aaaa(a,a1,a2,a3)  
#
      temp T1bbbj(b,b1,b2,j)  
      temp T2bbbj(b,b1,b2,j)  
      temp Tbbbb(b,b1,b2,b3)  
      temp T1bbbb(b,b1,b2,b3)  
#
      temp Taabb(a,a1,b,b1)  
      temp T1aabb(a,a1,b,b1)  
#
      temp R1aiai(a,i,a1,i1) 
      temp R2aiai(a,i,a1,i1) 
      temp R3aiai(a,i,a1,i1) 
      temp R4aiai(a,i,a1,i1) 
      temp R1bjbj(b,j,b1,j1) 
      temp R2bjbj(b,j,b1,j1) 
      temp R3bjbj(b,j,b1,j1) 
      temp R4bjbj(b,j,b1,j1) 
      temp R1aibj(a,i,b,j) 
      temp R2aibj(a,i,b,j) 
      temp R3aibj(a,i,b,j) 
      temp R4aibj(a,i,b,j) 
#
      temp T1iaai(i,a,a1,i1) 
      temp T2iaai(i,a,a1,i1) 
      temp T1jbbj(j,b,b1,j1) 
      temp T2jbbj(j,b,b1,j1) 
      temp T1iabj(i,a,b,j) 
      temp T2iabj(i,a,b,j) 
      temp Tjjpp(j,j1,p,p1) 
      temp T1jjpp(j,j1,p,p1) 
      temp T2jjpp(j,j1,p,p1) 
      temp  Tiiqq(i,i1,q,q1) 
      temp T1iiqq(i,i1,q,q1) 
      temp T2iiqq(i,i1,q,q1) 
      temp  Tjjai(j,j1,a,i) 
      temp T1jjai(j,j1,a,i) 
      temp T2jjai(j,j1,a,i) 
      temp  Tiibj(i,i1,b,j) 
      temp T1iibj(i,i1,b,j) 
      temp T2iibj(i,i1,b,j) 
      temp  Tjbai(j,b,a,i)  
      temp T1jbai(j,b,a,i)  
      temp T2jbai(j,b,a,i)  
      temp  Taijj(a,i,j,j1) 
      temp T1aijj(a,i,j,j1) 
      temp Tqqip(a,i,b,b1)  
#
      temp T1iibb(i,i1,b,b1) 
      temp  Tjjaa(j,j1,a,a1) 
      temp T1jjaa(j,j1,a,a1) 
      temp  Tjjii(j,j1,i,i1) 
#
      temp Taibb(a,i,b,b1)
      temp T1aibb(a,i,b,b1)
      temp Tbjaa(b,j,a,a1)
      temp T1bjaa(b,j,a,a1)
      temp T1jbii(j,b,i,i1)
      temp Tiajj(i,a,j,j1)
      temp T1iajj(i,a,j,j1)
      temp  Taiaa(a1,i,a2,a) 
      temp T1aiaa(a1,i,a2,a) 
      temp  Tbjbb(b1,j,b2,b) 
      temp T1bjbb(b1,j,b2,b) 
      temp Tjibi(j,i,b,i1) 
      temp Tbiba(b,i,b1,a) 
      temp Tjiba(j,i,b,a) 
#
# Declare distributed arrays 
# -------------------------- 
#
      served T2new_aa(a,i,a1,i1)
      served T2new_ab(a,i,b,j)
      served T2old_aa(a,i,a1,i1)
      served T2old_ab(a,i,b,j)
      served T2old_bb(b,j,b1,j1) # Watson
      served Tau_aa(a,i,a1,i1)
      served Tau_ab(a,i,b,j)
      served Taup_aa(a,i,a1,i1)
      served Taup_ab(a,i,b,j)
#
# Declare served arrays 
# --------------------- 
#
      temp AOINT(mu,nu,lambda,sigma) 
#
# ---------------------------------------
#
      temp TXaiai(a,i,nu,i1)
      temp TYaiai(a,i,a1,i1)
      temp TXbjbj(b,j,nu,j1)
      temp TYbjbj(b,j,b1,j1)
      temp TXaibj(a,i,nu,j)
      temp TYaibj(a,i,b,j)
#
      distributed F1me_a(i,a)
      distributed F1me_b(j,b)
#
      distributed F1ae_a(a,a1)
#
      distributed F1mi_a(i,i1)
#
      distributed W1minj_aa(i,i1,i2,i3)
      distributed W1minj_ab(i,i1,j,j1)
#
      served W2mebj_aa(i,a,a1,i1)
      served W2mebj_ab(i,a,b,j)
      served W2mjbe_ab(i,i1,b,b1)
      served W2mjbe_ba(j,j1,a,a1)
#
      served W1mebj_aa(i,a,a1,i1)
      served W1mebj_ab(i,a,b,j)
      served W1mjbe_ab(i,i1,b,b1)
#
      served W1imen_aa(i,i1,a,i2)
      served W1imen_ab(i,i1,b,j)
#
      served W1eafm_aa(a,a1,a2,i)
      served W1eafm_ab(a1,a,b,j)
#
      distributed l1a_old(i,a) 
      distributed l1a_new(i,a) 
#
      served L2old_aa(i,a,i1,a1) 
      served L2new_aa(i,a,i1,a1) 
      served L2old_ab(i,a,j,b) 
      served L2new_ab(i,a,j,b) 
#
# Procedure specific arrays used used: 
# ------------------------------------ 
#
# Local arrays: 
# ------------- 
#
      local ZAA(i,mu,i1,a1) 
      local ZAB(i,mu,j,b) 
#
      local L1aiai(a,i,a2,i1)
      local L1aibj(a1,i,b,j)
      local L2aiai(a2,i1,a,i2)
      local L3aibj(a,i1,b,j)
      local L3aiai(a1,i1,a2,i)
      local L5aibj(a1,i,b,j)
      local L4aiai(a,i1,a1,i2)
      local L7aibj(a,i1,b,j)
      local Liaia(i1,a,i2,a1)
      local Liajb(i1,a,j,b)
#
      local LLaa(i1,a1,i,a2) 
      local LLab(i,a1,j,b) 
#
      distributed Xiiia(i,i1,i2,a) 
      distributed Xiiii(i,i1,i2,i3) 
      distributed Xiajj(i,a,j,j1) 
      distributed Xiibj(i,i1,b,j) 
      distributed Xjbii(j,b,i,i1) 
      distributed Xjjai(j,j1,a,i) 
      distributed Xiijj(i,i1,j,j1)  
      distributed Xjjii(j,j1,i,i1)  
#
      temp Tbbaa(b,b1,a,a1) 
      temp Tjbaa(j,b1,a2,a3) 
      temp Tjbbb(j,b1,b2,b3) 
      temp Tiabb(i,a1,b2,b3) 
      temp Tiaaa(i,a1,a2,a3) 
      temp Tiijb(i,i1,j,b) 
      temp Tixia(i,mu,i1,a1) 
      temp Tixjb(i,mu,j,b) 
      temp Tjxjb(j,mu,j1,b) 
      temp Tixix(i,mu,i1,nu) 
      temp T1ixix(i,mu,i1,nu) 
      temp Tixjx(i,mu,j,nu) 
      temp Tjxjx(j,mu,j1,nu) 
      temp Yaa(i,mu,i1,nu) 
      temp Yab(i,mu,j,nu) 
      temp Y1ab(i,mu,j,nu) 
      temp Ybb(j,mu,j1,nu) 
      temp Tiaix(i,a,i1,nu)  
      temp Tiajx(i,a,j1,nu)  
      temp Tjbjx(j,b,j1,nu)  
      temp Tiiia(i,i2,i1,a)
      temp Tjjjb(j,j2,j1,b)
      temp Ljbjb(j,b,j1,b1)  
      temp Tbjai(b,j,a,i) 
      temp T1bjai(b,j,a,i) 
      temp Tjbia(j,b,i,a) 
      temp Tjbix(j,b,i,mu) 
      temp Tijaj(i,j,a,j1) 
      temp T1ijaj(i,j,a,j1) 
      temp Tijib(i,j,i1,b)  
      temp Tajab(a,j,a1,b) 
      temp Tijab(i,j,a,b) 
      temp T1ijab(i,j,a,b) 
      temp Tibab(i,b,a,b1) 
      temp Tjija(j,i,j1,a) 
      temp Tjaba(j,a,b,a1) 
#
# Distributed arrays 
# ------------------ 
# 
      served Z2AB(i,mu,j1,nu) 
      served Z2AA(i,mu,j1,nu) 
      served L2AO_ab(i,mu,j1,nu) 
      served L2AO_aa(i,mu,j1,nu) 
      distributed Iiiia(i,i1,i2,a2) 
      distributed Iiiii(i,i1,i2,i3) 
      distributed Iiijb(i,i1,j,b) 
      distributed Iiajj(i,a,j,j1) 
      distributed Iiijj(i,i1,j,j1) 
#
# Declare scalars 
# --------------- 
#
      scalar etemp
      scalar etemp1 
      scalar esum
      scalar esuma
      scalar esumb
      scalar esumab
      scalar ecorraa
      scalar ecorrbb
      scalar ecorrab
      scalar ecorrT
      scalar ecrit 
      scalar eold 
      scalar ediff 
      scalar mp2_energy
#
# Arrays/Scalars used exclusively in DIIS procedure. 
# -------------------------------------------------- 
#
       served D0iaia(i,a,i1,a1)  
       served D1iaia(i,a,i1,a1)  
       served D2iaia(i,a,i1,a1)  
       served D3iaia(i,a,i1,a1)  
       served D4iaia(i,a,i1,a1)  
       served D5iaia(i,a,i1,a1)  
#
       served D0iajb(i,a,j,b)  
       served D1iajb(i,a,j,b)  
       served D2iajb(i,a,j,b)  
       served D3iajb(i,a,j,b)  
       served D4iajb(i,a,j,b)  
       served D5iajb(i,a,j,b)  
#
       distributed D0ia(i,a)  
       distributed D1ia(i,a)  
       distributed D2ia(i,a)  
       distributed D3ia(i,a)  
       distributed D4ia(i,a)  
       distributed D5ia(i,a)  
#
       distributed e1ia(i,a)  
       distributed e2ia(i,a)  
       distributed e3ia(i,a)  
       distributed e4ia(i,a)  
       distributed e5ia(i,a)  
#
       served e1iaia(i,a,i1,a1)  
       served e2iaia(i,a,i1,a1)  
       served e3iaia(i,a,i1,a1)  
       served e4iaia(i,a,i1,a1)  
       served e5iaia(i,a,i1,a1)  
#
       served e1iajb(i,a,j,b)  
       served e2iajb(i,a,j,b)  
       served e3iajb(i,a,j,b)  
       served e4iajb(i,a,j,b)  
       served e5iajb(i,a,j,b)  
#
       scalar b11
       scalar b12
       scalar b13
       scalar b14
       scalar b15
       scalar b16
       scalar b17
       scalar b18
       scalar b19
       scalar b110
#
       scalar b22
       scalar b23
       scalar b24
       scalar b25
       scalar b26
       scalar b27
       scalar b28
       scalar b29
       scalar b210
#
       scalar b33
       scalar b34
       scalar b35
       scalar b36
       scalar b37
       scalar b38
       scalar b39
       scalar b310
       scalar b44
       scalar b45
       scalar b46
       scalar b47
       scalar b48
       scalar b49
       scalar b410
#
       scalar b55
       scalar b56
       scalar b57
       scalar b58
       scalar b59
       scalar b510
#
       scalar b66
       scalar b67
       scalar b68
       scalar b69
       scalar b610
#
       scalar b77
       scalar b78
       scalar b79
       scalar b710
#
       scalar b88
       scalar b89
       scalar b810
#
       scalar b99
       scalar b910
#
       scalar b1010
#
       scalar Tb11
       scalar Tb12
       scalar Tb13
       scalar Tb14
       scalar Tb15
       scalar Tb16
       scalar Tb17
       scalar Tb18
       scalar Tb19
       scalar Tb110
#
       scalar Tb22
       scalar Tb23
       scalar Tb24
       scalar Tb25
       scalar Tb26
       scalar Tb27
       scalar Tb28
       scalar Tb29
       scalar Tb210
#
       scalar Tb33
       scalar Tb34
       scalar Tb35
       scalar Tb36
       scalar Tb37
       scalar Tb38
       scalar Tb39
       scalar Tb310
       scalar Tb44
       scalar Tb45
       scalar Tb46
       scalar Tb47
       scalar Tb48
       scalar Tb49
       scalar Tb410
#
       scalar Tb55
       scalar Tb56
       scalar Tb57
       scalar Tb58
       scalar Tb59
       scalar Tb510
#
       scalar Tb66
       scalar Tb67
       scalar Tb68
       scalar Tb69
       scalar Tb610
#
       scalar Tb77
       scalar Tb78
       scalar Tb79
       scalar Tb710
#
       scalar Tb88
       scalar Tb89
       scalar Tb810
#
       scalar Tb99
       scalar Tb910
#
       scalar Tb1010
#
       scalar c1 
       scalar c2 
       scalar c3 
       scalar c4 
       scalar c5 
       scalar c6 
       scalar c7 
       scalar c8 
       scalar c9 
       scalar c10  
#
#
#    ------------------------------------------------------------------------
#
     PROC READ_2EL
#
#    ------------------------------------------------------------------------
#
      execute server_barrier
#
      EXECUTE  LIST_TO_BLOCKS               VSTART1A1
      EXECUTE  LIST_TO_BLOCKS               VSTART1B1
      EXECUTE  LIST_TO_BLOCKS               VSTART1A2
      EXECUTE  LIST_TO_BLOCKS               VSTART1B2
      EXECUTE  LIST_TO_BLOCKS               VSTART1A3
      EXECUTE  LIST_TO_BLOCKS               VSTART1B3
      EXECUTE  LIST_TO_BLOCKS               VSTART1A4
      EXECUTE  LIST_TO_BLOCKS               VSTART1B4
      EXECUTE  LIST_TO_BLOCKS               VSTART1A5
      EXECUTE  LIST_TO_BLOCKS               VSTART1B5
      EXECUTE  LIST_TO_BLOCKS               VSTART1A6
      EXECUTE  LIST_TO_BLOCKS               VSTART1B6
      EXECUTE  LIST_TO_BLOCKS               VSTART1A7
      EXECUTE  LIST_TO_BLOCKS               VSTART1B7
      EXECUTE  LIST_TO_BLOCKS               VSTART1A8
      EXECUTE  LIST_TO_BLOCKS               VSTART1B8
      EXECUTE  LIST_TO_BLOCKS               VSTART1A9
      EXECUTE  LIST_TO_BLOCKS               VSTART1B9
      EXECUTE  LIST_TO_BLOCKS               VSTART1A10
      EXECUTE  LIST_TO_BLOCKS               VSTART1B10
      EXECUTE  LIST_TO_BLOCKS               VSTART1A11
      EXECUTE  LIST_TO_BLOCKS               VSTART1B11
      EXECUTE  LIST_TO_BLOCKS               VSTART1A12
      EXECUTE  LIST_TO_BLOCKS               VSTART1B12

      execute list_to_blocks                t1a_old
      execute list_to_blocks                t1b_old
      execute list_to_blocks                T2old_aa
      execute list_to_blocks                T2old_ab
      execute list_to_blocks                T2old_bb

      execute list_to_blocks                VSpipi
      execute list_to_blocks                Vpiqj

      execute list_to_blocks                Vaaii
      execute list_to_blocks                Viaai
      execute list_to_blocks                Vaabj

      execute read_list_to_blocks
      execute server_barrier
#
      PARDO a, a1, a2, i
            REQUEST             Vaabj(a,a1,a2,i) a
            REQUEST             Vaabj(a2,a1,a,i) a
            tpppp(a,a1,a2,i)  = Vaabj(a2,a1,a,i)
            tpppp(a,a1,a2,i) *= -1.0
            tpppp(a,a1,a2,i) +=  Vaabj(a,a1,a2,i)
            PREPARE VSaaai(a,a1,a2,i) = tpppp(a,a1,a2,i)
      ENDPARDO a, a1, a2, i

      execute server_barrier
#
#    ------------------------------------------------------------------------
#
     ENDPROC READ_2EL
#
#    ------------------------------------------------------------------------

#    ------------------------------------------------------------------------
#
     PROC WRITE_2EL
#
#    ------------------------------------------------------------------------
#
      execute server_barrier
      execute blocks_to_list                VSpipi(p,i,p1,i1)
      execute blocks_to_list                Vaaii
      execute blocks_to_list                Viaai
      execute blocks_to_list                Vaabj
      execute blocks_to_list                Vpiqj(p,i,q,j)
     #execute blocks_to_list                VSaaai
#
#    ------------------------------------------------------------------------
#
     ENDPROC WRITE_2EL
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------ 
# 
      PROC TAUAA 
#     ----------
#
      PARDO a, i, a1, i1
#
            REQUEST T2old_aa(a,i,a1,i1) i1
            GET t1a_old(a1,i1)
            GET t1a_old(a1,i)
            GET t1a_old(a,i1)
            GET t1a_old(a,i)
#
            tai(a1,i1)                 = t1a_old(a1,i1)
            tmp1_aiai(a,i,a1,i1)       = t1a_old(a,i)^tai(a1,i1)
            tai(a1,i)                  = t1a_old(a1,i)
            tmp2_aiai(a,i,a1,i1)       = t1a_old(a,i1)^tai(a1,i)
            tmp1_aiai(a,i,a1,i1)      -= tmp2_aiai(a,i,a1,i1)
#
            tmp3_aiai(a,i,a1,i1)       = tmp1_aiai(a,i,a1,i1)
            tmp3_aiai(a,i,a1,i1)      += T2old_aa(a,i,a1,i1)
            PREPARE Tau_aa(a,i,a1,i1)  = tmp3_aiai(a,i,a1,i1)
#
            tmp1_aiai(a,i,a1,i1)      *= 0.5
            tmp1_aiai(a,i,a1,i1)      += T2old_aa(a,i,a1,i1)
            PREPARE Taup_aa(a,i,a1,i1) = tmp1_aiai(a,i,a1,i1)
#
      ENDPARDO a, i, a1, i1
#
      ENDPROC TAUAA
#     -------------
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
      PROC TAUAB
#     ----------
#
      PARDO a, i, b, j
#
            REQUEST T2old_ab(a,i,b,j) j
            GET t1a_old(a,i)
            GET t1a_old(b,j)
            tai(b,j) = t1a_old(b,j)
#
            tmp1_aibj(a,i,b,j)       = t1a_old(a,i)^tai(b,j)
            tmp2_aibj(a,i,b,j)       = tmp1_aibj(a,i,b,j)
            tmp2_aibj(a,i,b,j)      *= 0.5
#
            tmp1_aibj(a,i,b,j)      += T2old_ab(a,i,b,j)
            tmp2_aibj(a,i,b,j)      += T2old_ab(a,i,b,j)
            PREPARE Tau_ab(a,i,b,j)  = tmp1_aibj(a,i,b,j)
            PREPARE Taup_ab(a,i,b,j) = tmp2_aibj(a,i,b,j)
#
      ENDPARDO a, i, b, j
#
      ENDPROC TAUAB
#     -------------
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
      PROC TAU
#     -------- 
#
           CALL TAUAA
           CALL TAUAB
#
      ENDPROC TAU
#     ----------- 
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
      PROC CREAT1INTER 
#     ---------------- 
#
         CREATE Fme_a
         CREATE F1ae_a
         CREATE F1mi_a
         CREATE Ibb 
         CREATE Ijj 
#
         CREATE D0ia
         CREATE D1ia
         CREATE D2ia
         CREATE D3ia
         CREATE D4ia
         CREATE D5ia
#
         CREATE e1ia
         CREATE e2ia
         CREATE e3ia
         CREATE e4ia
         CREATE e5ia
#
      ENDPROC CREAT1INTER 
#     ------------------- 
#
      PROC CREATLAMBDAOLD 
#     ------------------- 
#
         CREATE l1a_old
#
      ENDPROC CREATLAMBDAOLD  
#     ----------------------  
#
      PROC CREATLAMBDANEW 
#     ------------------- 
#
         CREATE l1a_new
#
         CREATE Gae_a 
         CREATE Gmi_a 
#
      ENDPROC CREATLAMBDANEW  
#     ---------------------- 
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
      PROC F1AEA
#     ----------
#
#     Local arrays used:
#     ------------------ 
#     local L1aiai(a,i,a2,i1) 
#     local L1aibj(a1,i,b,j) 
#
      PARDO a, a1 # VFL  
#
            Tae_a(a,a1) = 0.0
#
            DO i 
#
               GET t1a_old(a,i) 
               GET Fme_a(i,a1) 
#
               Taa(a,a1)    = t1a_old(a,i)*Fme_a(i,a1)  
               Taa(a,a1)   *= 0.5  
               Tae_a(a,a1) -=  Taa(a,a1)  
#
               DO a2 
#
                  REQUEST VSaaai(a1,a,a2,i) i  
                  GET t1a_old(a2,i) 
#
                  Taa(a,a1)    = VSaaai(a1,a,a2,i)*t1a_old(a2,i)  
                  Tae_a(a,a1) +=  Taa(a,a1)  
#
#                 Initialize W1eafm_aa Intermediate. 
#                 ---------------------------------- 
                  PREPARE W1eafm_aa(a1,a,a2,i) = VSaaai(a1,a,a2,i)
#
               ENDDO a2 
#
            ENDDO i 
#
            DO j 
            DO b 
#
               REQUEST Vaabj(a1,a,b,j) j  
               GET t1a_old(b,j) 
#
               Taa(a,a1)    = Vaabj(a1,a,b,j)*t1a_old(b,j) 
               Tae_a(a,a1) +=  Taa(a,a1)  
#
#              Initialize the W1eafm_ab intermediate. 
#              -------------------------------------- 
               PREPARE W1eafm_ab(a1,a,b,j) = Vaabj(a1,a,b,j) 
#
            ENDDO b 
            ENDDO j 
#
            PUT F1ae_a(a,a1) += Tae_a(a,a1) 
#
      ENDPARDO a, a1 
#
      PARDO i, i1, a2  
#
            allocate L1aiai(*,i,a2,i1) 
#
            DO a 
#
               REQUEST Taup_aa(a,i,a2,i1) i1
               L1aiai(a,i,a2,i1) = Taup_aa(a,i,a2,i1) 
#
            ENDDO a 
#
            DO a1 
#
               REQUEST VSpipi(a1,i1,a2,i) i1 
#
               DO a 
#
                  Taa(a,a1)         = L1aiai(a,i,a2,i1)*VSpipi(a1,i1,a2,i) 
                  Taa(a,a1)        *= 0.5 
                  PUT F1ae_a(a,a1) +=  Taa(a,a1)  
#
               ENDDO a 
#
            ENDDO a1 
#
            deallocate L1aiai(*,i,a2,i1) 
#
      ENDPARDO i, i1, a2  
#
      PARDO i, j, b 
#
            allocate L1aibj(*,i,b,j) 
#
            DO a1 
#
               REQUEST Vpiqj(a1,i,b,j)  j 
               L1aibj(a1,i,b,j) = Vpiqj(a1,i,b,j) 
#
            ENDDO a1 
#
            DO a 
#
               REQUEST Taup_ab(a,i,b,j) j  
#
               DO a1   
#
                  Taa(a,a1)         = Taup_ab(a,i,b,j)*L1aibj(a1,i,b,j) 
                  Taa(a,a1)        *= -1.0  
                  PUT F1ae_a(a,a1) += Taa(a,a1) 
#
               ENDDO a1  
#
            ENDDO a  
#
            deallocate L1aibj(*,i,b,j) 
#
      ENDPARDO i, j, b  
#
      ENDPROC F1AEA
#     -------------
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
      PROC F1AE
#     --------
         CALL F1AEA 
      ENDPROC F1AE
#     ------------ 
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
      PROC FMEA
#     ----------
#
      PARDO i, a, i1, a1  
#
            REQUEST VSpipi(a,i,a1,i1) i1  
            GET t1a_old(a1,i1) 
#
            Tia(i,a)        = VSpipi(a,i,a1,i1)*t1a_old(a1,i1) 
            PUT Fme_a(i,a) += Tia(i,a) 
#
      ENDPARDO i, a, i1, a1  
#
      PARDO i, a, j, b  
#
            REQUEST Vpiqj(a,i,b,j) j  
            GET t1a_old(b,j) 
#
            Tia(i,a)        = Vpiqj(a,i,b,j)*t1a_old(b,j) 
            PUT Fme_a(i,a) += Tia(i,a) 
#
      ENDPARDO i, a, j, b  
# 
      ENDPROC FMEA
#     -------------
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
      PROC FME
#     ----------
         CALL FMEA
      ENDPROC FME
#     ----------- 
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
      PROC F1MIA
#     ----------
#
#     Local arrays used:
#     ------------------ 
#     local L2aiai(a2,i1,a,i2) 
#     local L3aibj(a,i1,b,j) 
#
      PARDO i1, i, a    
#
            GET t1a_old(a,i) 
            GET Fme_a(i1,a) 
#
            Tii(i1,i)         = Fme_a(i1,a)*t1a_old(a,i) 
            Tii(i1,i)        *= 0.5 
            PUT F1mi_a(i1,i) += Tii(i1,i) 
#
            DO i2 
#
               REQUEST VSpipi(a,i2,i,i1) i1  
               GET t1a_old(a,i2) 
#
               Tii(i1,i)         = VSpipi(a,i2,i,i1)*t1a_old(a,i2) 
               PUT F1mi_a(i1,i) += Tii(i1,i) 
#
            ENDDO i2 
#
      ENDPARDO i1, i, a  
#
      PARDO a, a2, i2  
#
            allocate L2aiai(a2,*,a,i2) 
#
            DO i1 
#
               REQUEST              VSpipi(a2,i1,a,i2) i2 
               L2aiai(a2,i1,a,i2) = VSpipi(a2,i1,a,i2) 
#
            ENDDO i1 
#
            DO i 
#
               REQUEST Taup_aa(a2,i,a,i2) i2  
#
               DO i1  
#
                  Tii(i1,i)         = L2aiai(a2,i1,a,i2)*Taup_aa(a2,i,a,i2) 
                  Tii(i1,i)        *= 0.5 
                  PUT F1mi_a(i1,i) += Tii(i1,i) 
#
               ENDDO i1  
#
            ENDDO i 
#
            deallocate L2aiai(a2,*,a,i2) 
#
      ENDPARDO a, a2, i2  
#
      PARDO i1, i, j, b  
#
            REQUEST Vpiqj(i,i1,b,j) j 
            GET     t1a_old(b,j) 
#
            Tii(i1,i)         = Vpiqj(i,i1,b,j)*t1a_old(b,j) 
            PUT F1mi_a(i1,i) += Tii(i1,i) 
#
      ENDPARDO i1, i, j, b  
# 
      PARDO a, b, j   
#
            allocate L3aibj(a,*,b,j) 
#
            DO i1 
# 
               REQUEST            Vpiqj(a,i1,b,j)  j  
               L3aibj(a,i1,b,j) = Vpiqj(a,i1,b,j) 
#
            ENDDO i1 
#
            DO i 
#
               REQUEST Taup_ab(a,i,b,j) j 
#
               DO i1 
#
                  Tii(i1,i)         = Taup_ab(a,i,b,j)*L3aibj(a,i1,b,j) 
                  PUT F1mi_a(i1,i) += Tii(i1,i) 
#
               ENDDO i1 
#
            ENDDO i 
#
            deallocate L3aibj(a,*,b,j) 
#
      ENDPARDO a, b, j  
# 
      ENDPROC F1MIA
#     -------------
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
      PROC F1MI 
#     ----------
         CALL F1MIA 
      ENDPROC F1MI 
#     ------------ 
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
      PROC GAEA
#     --------- 
#
#     local arrays used:
#     ------------------ 
#     local L3aiai(a1,i1,a2,i) 
#     local L5aibj(a1,i,b,j) 
#
      PARDO i, i1, a2 # VFL  
#
            allocate L3aiai(*,i1,a2,i)  
#
            DO a1  
#
               REQUEST              T2old_aa(a1,i1,a2,i) i  
               L3aiai(a1,i1,a2,i) = T2old_aa(a1,i1,a2,i)   
#
            ENDDO a1  
#
            DO a  
#
               REQUEST L2old_aa(i1,a,i,a2)  i  
#
               DO a1  
#
                  T1aa(a,a1)       = L2old_aa(i1,a,i,a2)*L3aiai(a1,i1,a2,i)  
                  T1aa(a,a1)      *= -0.5 
                  PUT Gae_a(a,a1) += T1aa(a,a1) 
#
               ENDDO a1  
#
            ENDDO a  
#
            deallocate L3aiai(*,i1,a2,i)  
#
      ENDPARDO i, i1, a2     
#
      PARDO i, j, b # VFL  
#
            allocate L5aibj(*,i,b,j)  
#
            DO a1 
#
               REQUEST            T2old_ab(a1,i,b,j) j 
               L5aibj(a1,i,b,j) = T2old_ab(a1,i,b,j) 
#
            ENDDO a1 
#
            DO a 
#
               REQUEST L2old_ab(i,a,j,b) j 
#
               DO a1  
#
                  Taa(a,a1)        = L2old_ab(i,a,j,b)*L5aibj(a1,i,b,j)  
                  Taa(a,a1)       *= -1.0  
                  PUT Gae_a(a,a1) += Taa(a,a1) 
#
               ENDDO a1  
#
            ENDDO a 
# 
            deallocate L5aibj(*,i,b,j)  
#
      ENDPARDO i, j, b    
#
      ENDPROC GAEA
#     ------------ 
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
      PROC GAE 
#     -------- 
         CALL GAEA 
      ENDPROC GAE 
#     ----------- 
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
      PROC GMIA 
#     --------- 
#
#     local arrays used: 
#     ------------------ 
#     local L4aiai(a,i1,a1,i2) 
#     local L7aibj(a,i1,b,j) 
#
      PARDO i1, i 
#
            Gmi_a(i1,i) = 0.0 
#
      ENDPARDO i1, i 
      execute sip_barrier Gmi_a 
#
      PARDO a, a1, i2  
#
            allocate L4aiai(a,*,a1,i2) 
#
            DO i1 
#
               REQUEST T2old_aa(a,i1,a1,i2) i2 
               L4aiai(a,i1,a1,i2) = T2old_aa(a,i1,a1,i2) 
#
            ENDDO i1 
#
            DO i 
#
               REQUEST L2old_aa(i,a,i2,a1) a1  
#
               DO i1  
#
                  Tii(i1,i)        = L4aiai(a,i1,a1,i2)*L2old_aa(i,a,i2,a1)   
                  Tii(i1,i)       *= 0.5  
                  PUT Gmi_a(i1,i) += Tii(i1,i) 
#               
               ENDDO i1  
#
            ENDDO i 
#
            deallocate L4aiai(a,*,a1,i2) 
#
      ENDPARDO a, a1, i2  
#
      PARDO a, b, j  
#
            allocate L7aibj(a,*,b,j) 
#
            DO i1 
#
               REQUEST            T2old_ab(a,i1,b,j) j  
               L7aibj(a,i1,b,j) = T2old_ab(a,i1,b,j)  
#
            ENDDO i1 
#
            DO i 
#
               REQUEST L2old_ab(i,a,j,b) b  
#
               DO i1 
#
                  Tii(i1,i)        = L7aibj(a,i1,b,j)*L2old_ab(i,a,j,b)   
                  PUT Gmi_a(i1,i) += Tii(i1,i) 
#               
               ENDDO i1 
#
            ENDDO i 
#
            deallocate L7aibj(a,*,b,j) 
#
      ENDPARDO a, b, j  
#
      ENDPROC GMIA 
#     ------------ 
#
      PROC GMI 
#     -------- 
         CALL GMIA 
      ENDPROC GMI 
#     ----------- 
#
# ----------------------------------------------------------------------------------  
#
# ----------------------------------------------------------------------------------  
# 
      PROC W1minjAA 
#     ------------- 
#
      PARDO i2, i, i3, i1 
#
            REQUEST                      VSpipi(i2,i,i3,i1) i1  
            Tiiii(i2,i,i3,i1)          = VSpipi(i2,i,i3,i1)  
            PUT W1minj_aa(i2,i,i3,i1) += Tiiii(i2,i,i3,i1) 
#
      ENDPARDO i2, i, i3, i1 
#
      PARDO i2, i, i3, i1 
#
            Tiiii(i2,i,i3,i1) = 0.0 
#
            DO a 
#
               REQUEST               VSpipi(a,i3,i,i2)  i2  
               GET                   t1a_old(a,i1) 
               T1iiii(i2,i,i3,i1)  = VSpipi(a,i3,i,i2)*t1a_old(a,i1) 
               Tiiii(i2,i,i3,i1)  += T1iiii(i2,i,i3,i1) 
#
            ENDDO a 
#
            PUT W1minj_aa(i2,i,i3,i1) += Tiiii(i2,i,i3,i1) 
#
      ENDPARDO i2, i, i3, i1 
#
      PARDO i2, i, i3, i1 
#
            Tiiii(i2,i,i3,i1) = 0.0 
#
            DO a 
#
               REQUEST               VSpipi(a,i3,i1,i2) i2  
               GET                   t1a_old(a,i)
               T2iiii(i2,i,i3,i1)  = VSpipi(a,i3,i1,i2)*t1a_old(a,i) 
               Tiiii(i2,i,i3,i1)  -= T2iiii(i2,i,i3,i1) 
#
            ENDDO a 
#
            PUT W1minj_aa(i2,i,i3,i1) += Tiiii(i2,i,i3,i1) 
#
      ENDPARDO i2, i, i3, i1 
#
      PARDO i, i1, a, a1 
#
            REQUEST Tau_aa(a,i,a1,i1) i1 
#
            DO i2  
            DO i3  
#
               REQUEST                      VSpipi(a,i2,a1,i3) i3 
               Tiiii(i2,i,i3,i1)          = VSpipi(a,i2,a1,i3)*Tau_aa(a,i,a1,i1)
               Tiiii(i2,i,i3,i1)         *= 0.5
               PUT W1minj_aa(i2,i,i3,i1) += Tiiii(i2,i,i3,i1) 
#
            ENDDO i3  
            ENDDO i2  
#
      ENDPARDO i, i1, a, a1 
#
      ENDPROC W1minjAA 
#     ---------------- 
#
# ----------------------------------------------------------------------------------  
#
# ----------------------------------------------------------------------------------  
# 
      PROC W1minjAB 
#     ------------- 
#
      PARDO i, i1, j, j1 
#
            REQUEST                     Vpiqj(i1,i,j1,j) j  
            Tiijj(i1,i,j1,j)          = Vpiqj(i1,i,j1,j) 
            PUT W1minj_ab(i1,i,j1,j) += Tiijj(i1,i,j1,j)  
#
      ENDPARDO i, i1, j, j1 
#
      PARDO j, i, i1, j1 
#
            Tiijj(i1,i,j1,j) = 0.0  
#
            DO b  
#
               REQUEST             Vpiqj(i,i1,b,j1) j1  
               GET                 t1a_old(b,j) 
               T1iijj(i1,i,j1,j) = Vpiqj(i,i1,b,j1)*t1a_old(b,j) 
               Tiijj(i1,i,j1,j) += T1iijj(i1,i,j1,j) 
#
            ENDDO b   
#
            PUT W1minj_ab(i1,i,j1,j) += Tiijj(i1,i,j1,j)  
#
      ENDPARDO j, i, i1, j1 
#
      PARDO i, i1, j, j1 
#
            Tiijj(i1,i,j1,j) = 0.0  
#
            DO a 
#
               REQUEST             Vpiqj(a,i1,j,j1) j1  
               GET                 t1a_old(a,i) 
               T1iijj(i1,i,j1,j) = Vpiqj(a,i1,j,j1)*t1a_old(a,i) 
               Tiijj(i1,i,j1,j) += T1iijj(i1,i,j1,j) 
#
            ENDDO a 
#
            PUT W1minj_ab(i1,i,j1,j) += Tiijj(i1,i,j1,j)  
#
      ENDPARDO i, i1, j, j1 
#
      PARDO i, j, a, b  
#
            REQUEST Tau_ab(a,i,b,j) j 
#
            DO i1  
            DO j1  
#
               REQUEST                     Vpiqj(a,i1,b,j1) j1  
               Tiijj(i1,i,j1,j)          = Tau_ab(a,i,b,j)*Vpiqj(a,i1,b,j1) 
               PUT W1minj_ab(i1,i,j1,j) += Tiijj(i1,i,j1,j)  
#
            ENDDO j1  
            ENDDO i1  
#
      ENDPARDO i, j, a, b  
#
      ENDPROC W1minjAB 
#     ---------------- 
#
# ----------------------------------------------------------------------------------  
#
# ----------------------------------------------------------------------------------  
# 
      PROC W1MINJ 
#     ----------- 
#
           create W1minj_aa
           create W1minj_ab
           execute sip_barrier 
#
           CALL W1minjAA 
           CALL W1minjAB 
#
      ENDPROC W1MINJ 
#     -------------- 
#
# ----------------------------------------------------------------------------------  
#
# ----------------------------------------------------------------------------------  
# 
# In the procedures W1MEBJAA, W1MEBJBB, W1MEBJAB, and W1MEBJBA these  
# intermediates are formed as temporary arrarys. The contribution to the 
# outout arrays is computed directly from these temporary arrays so 
# that the array is never stored.   
#
# ----------------------------------------------------------------------------------  
#
      PROC W1MEBJAA_S  
#     ---------------
#
      PARDO i, a, i1, a1  
#
            REQUEST             Viaai(i1,a1,a,i) i 
            REQUEST             Vaaii(a,a1,i1,i) i  
#
            Tiaai(i1,a1,a,i)  = Vaaii(a,a1,i1,i) 
            Tiaai(i1,a1,a,i) -= Viaai(i1,a1,a,i) 
            Tiaai(i1,a1,a,i) *= -1.0 
#
            DO i2  
#
               REQUEST              VSpipi(a1,i1,i,i2) i2  
               GET                  t1a_old(a,i2) 
#
               T1iaai(i1,a1,a,i)  = VSpipi(a1,i1,i,i2)*t1a_old(a,i2)  
               Tiaai(i1,a1,a,i)  -= T1iaai(i1,a1,a,i)  
#
            ENDDO i2  
#
            DO a2  
#
               REQUEST VSaaai(a2,a,a1,i1) i1  
               GET t1a_old(a2,i) 
#
               T1iaai(i1,a1,a,i)  = VSaaai(a2,a,a1,i1)*t1a_old(a2,i) 
               Tiaai(i1,a1,a,i)  += T1iaai(i1,a1,a,i)  
#
               DO i2 
#
                  REQUEST VSpipi(a2,i2,a1,i1) i1  
                  REQUEST T2old_aa(a2,i,a,i2) i2  
                  GET t1a_old(a,i2) 
#
                  Taiai(a1,i2,a2,i1)  = VSpipi(a2,i2,a1,i1) 
                  tai(a,i2)           = t1a_old(a,i2) 
                  T1aiai(a2,i,a,i2)   = t1a_old(a2,i)^tai(a,i2) 
                  T1aiai(a2,i,a,i2)  += T2old_aa(a2,i,a,i2) 
                  T1iaai(i1,a1,a,i)   = T1aiai(a2,i,a,i2)*Taiai(a1,i2,a2,i1) 
                  Tiaai(i1,a1,a,i)   -= T1iaai(i1,a1,a,i)  
#
               ENDDO i2  
#
            ENDDO a2  
#
            DO b
            DO j
#
               REQUEST Vpiqj(a1,i1,b,j) j 
               REQUEST T2old_ab(a,i,b,j) j 
#
               T1iaai(i1,a1,a,i)  = Vpiqj(a1,i1,b,j)*T2old_ab(a,i,b,j)
               Tiaai(i1,a1,a,i)  += T1iaai(i1,a1,a,i)
#
            ENDDO j
            ENDDO b
#
            PREPARE W1MEBJ_AA(i1,a1,a,i) = Tiaai(i1,a1,a,i)  
# 
      ENDPARDO i, a, i1, a1  
#
      ENDPROC W1MEBJAA_S  
#     ------------------
#
      PROC W1MEBJAA 
#     ----------------
# 
      PARDO i1, a1, a, i 
#
            REQUEST            W1MEBJ_AA(i1,a1,a,i) a 
            GET                l1a_old(i,a)
            tiaia(i1,a1,i,a) = W1MEBJ_AA(i1,a1,a,i) 
#
# Compute contributions to L2new_ab 
# --------------------------------- 
#
            DO j
            DO b
#
               REQUEST                        L2old_ab(i,a,j,b) b 
               T1iajb(i1,a1,j,b)            = tiaia(i1,a1,i,a)*L2old_ab(i,a,j,b)
               Tiajb(j,b,i1,a1)             = T1iajb(i1,a1,j,b)   
#
               PREPARE L2new_ab(i1,a1,j,b) += T1iajb(i1,a1,j,b)
               PREPARE L2new_ab(j,b,i1,a1) += Tiajb(j,b,i1,a1)
#
            ENDDO b
            ENDDO j
#
# Compute contribution to L1a_new  
# ------------------------------- 
#
            Tia(i1,a1)          = tiaia(i1,a1,i,a)*l1a_old(i,a)
            PUT l1a_new(i1,a1) += Tia(i1,a1)
#
      ENDPARDO i1, a1, a, i 
#
      ENDPROC W1MEBJAA 
#     ----------------
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
      PROC W1MEBJAB_S 
#     ---------------
#
      PARDO j, i, a, b 
#
            REQUEST          Viaai(i,a,b,j) j  
            Tiabj(i,a,b,j) = Viaai(i,a,b,j) 
#
            DO b1 
#
               REQUEST Vaabj(b1,b,a,i) i  
               GET t1a_old(b1,j) 
#
               T1iabj(i,a,b,j) = Vaabj(b1,b,a,i)*t1a_old(b1,j) 
               Tiabj(i,a,b,j) += T1iabj(i,a,b,j) 
#
            ENDDO b1 
#
            DO j1 
#
               REQUEST Vpiqj(a,i,j,j1) j1  
               GET t1a_old(b,j1) 
#
               T1iabj(i,a,b,j) = Vpiqj(a,i,j,j1)*t1a_old(b,j1) 
               Tiabj(i,a,b,j) -= T1iabj(i,a,b,j) 
#
               DO b1 
#
                  REQUEST t2old_aa(b1,j,b,j1) j1 
                  REQUEST Vpiqj(a,i,b1,j1)    j1  
                  GET t1a_old(b1,j) 
# 
                  tbj(b,j1)          = t1a_old(b,j1) 
                  T2bjbj(b1,j,b,j1)  = t1a_old(b1,j)^tbj(b,j1) 
                  T2bjbj(b1,j,b,j1) += T2old_aa(b1,j,b,j1) 
                  T1iabj(i,a,b,j)    = T2bjbj(b1,j,b,j1)*Vpiqj(a,i,b1,j1) 
                  Tiabj(i,a,b,j)    -= T1iabj(i,a,b,j) 
#
               ENDDO b1 
#
            ENDDO j1 
#
            DO a1
            DO i1
#
               REQUEST T2old_ab(a1,i1,b,j) j  
               REQUEST VSpipi(a1,i1,a,i)   i 
#
               T1iabj(i,a,b,j) = T2old_ab(a1,i1,b,j)*VSpipi(a1,i1,a,i)
               Tiabj(i,a,b,j) += T1iabj(i,a,b,j)
#
            ENDDO i1
            ENDDO a1
#
            PREPARE W1MEBJ_AB(i,a,b,j) = Tiabj(i,a,b,j)  
#
      ENDPARDO j, i, a, b 
#
      ENDPROC W1MEBJAB_S  
#     ------------------
#
#
      PROC W1MEBJAB 
#     ----------------
#
      PARDO i, a, b, j 
#
            REQUEST          W1MEBJ_AB(i,a,b,j) a 
            GET              l1a_old(j,b)
            tiaia(i,a,j,b) = W1MEBJ_AB(i,a,b,j) 
#
# Compute contributions to L2new_ab 
# --------------------------------- 
#
            DO j1
            DO b1
#
               REQUEST                        L2old_aa(j,b,j1,b1) b1 
               T1iajb(i,a,j1,b1)            = tiaia(i,a,j,b)*L2old_aa(j,b,j1,b1)
               Tiajb(j1,b1,i,a)             = T1iajb(i,a,j1,b1)  
#
               PREPARE L2new_ab(i,a,j1,b1) += T1iajb(i,a,j1,b1)
               PREPARE L2new_ab(j1,b1,i,a) += Tiajb(j1,b1,i,a)
#
            ENDDO b1
            ENDDO j1
#
# Compute contribution to l1a_new 
# ------------------------------- 
#
            T1ia(i,a)         = tiaia(i,a,j,b)*l1a_old(j,b)
            PUT l1a_new(i,a) += T1ia(i,a) 
#
      ENDPARDO i, a, b, j 
#
      ENDPROC W1MEBJAB 
#     ----------------
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# Compute contributions from 'Wmjbe'. This needs to be checked 
#
      PROC W1MJBEab_S 
#     ---------------
#
      PARDO i, i1, b1, b 
#
            REQUEST            Vaaii(b,b1,i1,i) i  
            Tiiqq(i1,i,b,b1) = Vaaii(b,b1,i1,i) 
#
            DO a1 
#
               REQUEST Vaabj(b1,b,a1,i1) i1 
               GET t1a_old(a1,i) 
#
               T1iiqq(i1,i,b,b1) = Vaabj(b1,b,a1,i1)*t1a_old(a1,i)
               Tiiqq(i1,i,b,b1) += T1iiqq(i1,i,b,b1) 
#
            ENDDO a1  
#
            DO j1 
#
               REQUEST Vpiqj(i,i1,b1,j1) j1  
               GET t1a_old(b,j1) 
               tai(b,j1) = t1a_old(b,j1) 
# 
               T1iiqq(i1,i,b,b1) = Vpiqj(i,i1,b1,j1)*t1a_old(b,j1) 
               Tiiqq(i1,i,b,b1) -= T1iiqq(i1,i,b,b1) 
#
               DO a1 
#
                  REQUEST T2old_ab(a1,i,b,j1) j1  
                  REQUEST Vpiqj(a1,i1,b1,j1)  j1  
                  GET t1a_old(a1,i) 
#
                  Taibj(a1,i,b,j1)   = t1a_old(a1,i)^tai(b,j1) 
                  T1aibj(a1,i,b,j1)  = T2old_ab(a1,i,b,j1)  
                  T1aibj(a1,i,b,j1) += Taibj(a1,i,b,j1)  
                  T1iiqq(i1,i,b,b1)  = T1aibj(a1,i,b,j1)*Vpiqj(a1,i1,b1,j1) 
                  Tiiqq(i1,i,b,b1)  -= T1iiqq(i1,i,b,b1) 
#
               ENDDO a1 
#
            ENDDO j1 
#
            Tiiqq(i1,i,b,b1)            *= -1.0 
            PREPARE W1mjbe_ab(i1,i,b,b1) = Tiiqq(i1,i,b,b1) 
#
      ENDPARDO i, i1, b1, b 
#
      ENDPROC W1MJBEab_S 
#     --------------------
#
      PROC W1MJBEab
#     -------------
#
      PARDO i1, b1, b, i 
#
            REQUEST W1mjbe_ab(i1,i,b,b1) b 
#
# Compute the contribution to L2new_ab 
# ------------------------------------ 
#
            DO j 
            DO a
#
               REQUEST                        L2old_ab(i,a,j,b) b 
               T1iajb(i1,a,j,b1)            = W1mjbe_ab(i1,i,b,b1)*L2old_ab(i,a,j,b)
               Tiajb(j,b1,i1,a)             = T1iajb(i1,a,j,b1) 
#
               PREPARE L2new_ab(i1,a,j,b1) += T1iajb(i1,a,j,b1) # VFL
               PREPARE L2new_ab(j,b1,i1,a) += Tiajb(j,b1,i1,a) # VFL
#
            ENDDO a
            ENDDO j
#
      ENDPARDO i1, b1, b, i 
#
      ENDPROC W1MJBEab
#     ---------------
#
# ------------------------------------------------------------------------------------  
#
      PROC W1MEBJ_S  
# 
           CALL W1MEBJAA_S 
           CALL W1MEBJAB_S 
           CALL W1MJBEab_S 
#
      ENDPROC W1MEBJ_S  
#
# ------------------------------------------------------------------------------------  
#
# ------------------------------------------------------------------------------------  
#
      PROC W1MEBJ 
# 
           CALL W1MEBJAA
           CALL W1MEBJAB
           CALL W1MJBEab
#
      ENDPROC W1MEBJ 
#
# ------------------------------------------------------------------------------------  
#
# ------------------------------------------------------------------------------------  
#
      PROC W2MEBJAA 
#     ------------- 
#
# First the 'bare' terms put into the arrays to initialize them. 
# -------------------------------------------------------------- 
#
      PARDO i1, a1, a, i 
#
            REQUEST                        Viaai(i1,a1,a,i) i # +  
            REQUEST                        Vaaii(a,a1,i1,i) i # - 
            Tiaai(i1,a1,a,i)             = Vaaii(a,a1,i1,i)  
            Tiaai(i1,a1,a,i)            -= Viaai(i1,a1,a,i)  
            Tiaai(i1,a1,a,i)            *= -1.0  
            PREPARE W2mebj_aa(i1,a1,a,i) = Tiaai(i1,a1,a,i) 
#
      ENDPARDO i1, a1, a, i 
#
      PARDO i, a, b, j 
#
            REQUEST                      Viaai(i,a,b,j) j  
            Tiabj(i,a,b,j)             = Viaai(i,a,b,j) 
            PREPARE W2mebj_ab(i,a,b,j) = Tiabj(i,a,b,j)  
#
      ENDPARDO i, a, b, j 
#
      PARDO i, i1, b, b1 
#
            REQUEST                        Vaaii(b,b1,i,i1) i1  
            Tiibb(i,i1,b,b1)             = Vaaii(b,b1,i,i1) 
            Tiibb(i,i1,b,b1)            *= -1.0 
            PREPARE W2mjbe_ab(i,i1,b,b1) = Tiibb(i,i1,b,b1) 
#
      ENDPARDO i, i1, b, b1 
#
      PARDO j1, j, a, a1 
#
            REQUEST                        Vaaii(a,a1,j1,j) j  
            Tjjaa(j1,j,a,a1)             = Vaaii(a,a1,j1,j) 
            Tjjaa(j1,j,a,a1)            *= -1.0 
            PREPARE W2mjbe_ba(j1,j,a,a1) = Tjjaa(j1,j,a,a1) 
#
      ENDPARDO j1, j, a, a1 
#
      execute server_barrier 
#
# Done initializing intermediates to the 'bare' terms. 
# ---------------------------------------------------- 
#
      PARDO i, a, a2, i2 
#
            REQUEST T2old_aa(a,i2,a2,i) i  
#
            DO i1 
            DO a1 
#
               REQUEST                         VSpipi(a1,i1,a2,i2) i2 # + 
               Tiaai(i1,a1,a,i)              = VSpipi(a1,i1,a2,i2)*T2old_aa(a,i2,a2,i) 
               Tiaai(i1,a1,a,i)             *= -1.0  
               PREPARE W2mebj_aa(i1,a1,a,i) += Tiaai(i1,a1,a,i) 
#
            ENDDO a1 
            ENDDO i1 
#
      ENDPARDO i, a, a2, i2 
#
      PARDO a, i, b, j  
#
            REQUEST T2old_ab(a,i,b,j) j  
#
            DO i1 
            DO a1 
#
               REQUEST                         Vpiqj(a1,i1,b,j) j # + 
               Tiaai(i1,a1,a,i)              = Vpiqj(a1,i1,b,j)*T2old_ab(a,i,b,j) 
               PREPARE W2mebj_aa(i1,a1,a,i) += Tiaai(i1,a1,a,i) 
#
            ENDDO a1 
            ENDDO i1 
#
      ENDPARDO a, i, b, j  
#
      ENDPROC W2MEBJAA 
#     ---------------- 
#
      PROC W2MEBJAB 
#     ------------- 
#
      PARDO b, j, a1, i1  
#
            REQUEST T2old_ab(a1,i1,b,j) j  
#
            DO a 
            DO i 
#
               REQUEST                       VSpipi(a,i,a1,i1) i1 # +  
               Tiabj(i,a,b,j)              = VSpipi(a,i,a1,i1)*T2old_ab(a1,i1,b,j) 
               PREPARE W2mebj_ab(i,a,b,j) += Tiabj(i,a,b,j)  
#
            ENDDO i 
            ENDDO a 
#
      ENDPARDO b, j, a1, i1  
#
      PARDO b, j, b1, j1  
#
            REQUEST T2old_aa(b1,j1,b,j) j  
#
            DO a 
            DO i 
#
               REQUEST                       Vpiqj(a,i,b1,j1)    j1 # +  
               Tiabj(i,a,b,j)              = Vpiqj(a,i,b1,j1)*T2old_aa(b1,j1,b,j) 
               PREPARE W2mebj_ab(i,a,b,j) += Tiabj(i,a,b,j)  
#
            ENDDO i 
            ENDDO a 
#
      ENDPARDO b, j, b1, j1  
#
      ENDPROC W2MEBJAB 
#     ---------------- 
#
      PROC W2MJBEAB
#     ------------- 
#
      PARDO b, i1, a, j  
#
            REQUEST T2old_ab(a,i1,b,j) j  
#
            DO i  
            DO b1  
#
               REQUEST                         Vpiqj(a,i,b1,j) j  
               Tiibb(i,i1,b,b1)              = T2old_ab(a,i1,b,j)*Vpiqj(a,i,b1,j) 
               PREPARE W2mjbe_ab(i,i1,b,b1) += Tiibb(i,i1,b,b1) 
#
            ENDDO b1 
            ENDDO i 
#
      ENDPARDO b, i1, a, j  
#
      ENDPROC W2MJBEAB
#     ---------------- 
#
      PROC W2MJBEBA
#     ------------- 
#
      PARDO a, i, b, j  
#
            REQUEST T2old_ab(a,i,b,j) j  
#
            DO a1  
            DO j1  
#
               REQUEST                         Vpiqj(a1,i,b,j1) j1  
               Tjjaa(j1,j,a,a1)              = T2old_ab(a,i,b,j)*Vpiqj(a1,i,b,j1) 
               PREPARE W2mjbe_ba(j1,j,a,a1) += Tjjaa(j1,j,a,a1) 
#
            ENDDO j1 
            ENDDO a1  
#
      ENDPARDO a, i, b, j  
#
      ENDPROC W2MJBEBA
#     ---------------- 
#
# ------------------------------------------------------------------------------------- 
#
# ------------------------------------------------------------------------------------- 
#
      PROC W2MEBJ 
#     ----------- 
           CALL W2MEBJAA
           CALL W2MEBJAB
#
           CALL W2MJBEAB 
           CALL W2MJBEBA  
      ENDPROC W2MEBJ 
#     -------------- 
#
# ------------------------------------------------------------------------------------- 
#
# ------------------------------------------------------------------------------------- 
#
      PROC W1IMENAA 
#     ------------- 
#
      PARDO i, i1, a, i2 
#
            REQUEST             VSpipi(i,i1,a,i2) i2  
            Tiiai(i,i1,a,i2)  = VSpipi(i,i1,a,i2) 
            TSiiai(i,i2,a,i1) = 0.0  
#
            DO i3 
#
               GET W1minj_aa(i,i1,i3,i2)   
               GET t1a_old(a,i3) 
#   
               T1iiai(i,i1,a,i2) = W1minj_aa(i,i1,i3,i2)*t1a_old(a,i3) 
               Tiiai(i,i1,a,i2) -= T1iiai(i,i1,a,i2) 
#
            ENDDO i3 
#
            DO a1 
#
               REQUEST T2old_aa(a,i1,a1,i2) i2  
               REQUEST W2mebj_aa(i,a1,a,i2) i2  
               GET     Fme_a(i,a1) 
               GET     t1a_old(a1,i1) 
#
               T1iiai(i,i1,a,i2)  = T2old_aa(a,i1,a1,i2)*Fme_a(i,a1) 
               Tiiai(i,i1,a,i2)  -= T1iiai(i,i1,a,i2) 
#
               T1iiai(i,i1,a,i2)  = W2mebj_aa(i,a1,a,i2)*t1a_old(a1,i1)  
               T2iiai(i,i2,a,i1)  = T1iiai(i,i1,a,i2)  
#
               Tiiai(i,i1,a,i2)  += T1iiai(i,i1,a,i2) 
               TSiiai(i,i2,a,i1) -= T2iiai(i,i2,a,i1) 
#
               DO a2 
#
                  REQUEST Tau_aa(a1,i1,a2,i2) i2  
                  REQUEST VSaaai(a2,a,a1,i)   i # + 
#
                  T1iiai(i,i1,a,i2)  = Tau_aa(a1,i1,a2,i2)*VSaaai(a2,a,a1,i)
                  T1iiai(i,i1,a,i2) *= 0.5  
                  Tiiai(i,i1,a,i2)  += T1iiai(i,i1,a,i2) 
#
               ENDDO a2 
#
               DO i3 
#
                  REQUEST T2old_aa(a,i2,a1,i3) i3  
                  REQUEST VSpipi(i1,i,a1,i3)   i3 # + 
#
                  T1iiai(i,i1,a,i2)   = VSpipi(i1,i,a1,i3)*T2old_aa(a,i2,a1,i3) 
                  T2iiai(i,i2,a,i1)   = T1iiai(i,i1,a,i2) 
                  Tiiai(i,i1,a,i2)   += T1iiai(i,i1,a,i2) 
                  TSiiai(i,i2,a,i1)  -= T2iiai(i,i2,a,i1) 
#
               ENDDO i3 
#
            ENDDO a1 
#
            DO b 
            DO j 
#
               REQUEST T2old_ab(a,i2,b,j) j  
               REQUEST Vpiqj(i1,i,b,j)    j # + 
#
               T1iiai(i,i1,a,i2)  = Vpiqj(i1,i,b,j)*T2old_ab(a,i2,b,j) 
               Tiiai(i,i1,a,i2)  += T1iiai(i,i1,a,i2) 
#
               T2iiai(i,i2,a,i1)  = T1iiai(i,i1,a,i2) 
               TSiiai(i,i2,a,i1) -= T2iiai(i,i2,a,i1) 
#
            ENDDO j 
            ENDDO b 
#
            PREPARE W1imen_aa(i,i1,a,i2) += Tiiai(i,i1,a,i2) 
            PREPARE W1imen_aa(i,i2,a,i1) += TSiiai(i,i2,a,i1) 
#
      ENDPARDO i, i1, a, i2 
#
      ENDPROC W1IMENAA 
#     ---------------- 
#
      PROC W1IMENAB 
#     ------------- 
#
      PARDO i, i1, b, j 
#
            REQUEST Vpiqj(i,i1,b,j) j  
            Tiibj(i,i1,b,j) = Vpiqj(i,i1,b,j)  
#
            DO a 
#
               REQUEST T2old_ab(a,i1,b,j) j  
               REQUEST W2mebj_ab(i,a,b,j) j  
               GET Fme_a(i,a) 
               GET t1a_old(a,i1) 
#
               T1iibj(i,i1,b,j) = T2old_ab(a,i1,b,j)*Fme_a(i,a) 
               Tiibj(i,i1,b,j) += T1iibj(i,i1,b,j) 
#
               T1iibj(i,i1,b,j) = W2mebj_ab(i,a,b,j)*t1a_old(a,i1) 
               Tiibj(i,i1,b,j) += T1iibj(i,i1,b,j) 
#
               DO b1 
#
                  REQUEST Tau_ab(a,i1,b1,j) j  
                  REQUEST Vaabj(b1,b,a,i)   i  
#
                  T1iibj(i,i1,b,j) = Vaabj(b1,b,a,i)*Tau_ab(a,i1,b1,j) 
                  Tiibj(i,i1,b,j) += T1iibj(i,i1,b,j) 
#
               ENDDO b1 
#
               DO i2 
#
                  REQUEST T2old_ab(a,i2,b,j) j  
                  REQUEST VSpipi(i1,i,a,i2)  i2 # + 
#
                  T1iibj(i,i1,b,j) = VSpipi(i1,i,a,i2)*T2old_ab(a,i2,b,j)  
                  Tiibj(i,i1,b,j) += T1iibj(i,i1,b,j) 
#
               ENDDO i2 
#
               DO j1 
#
                  REQUEST T2old_ab(a,i1,b,j1) j1  
                  REQUEST Vpiqj(a,i,j,j1)     j1 # + 
#
                  T1iibj(i,i1,b,j) = Vpiqj(a,i,j,j1)*T2old_ab(a,i1,b,j1)  
                  Tiibj(i,i1,b,j) -= T1iibj(i,i1,b,j) 
#
               ENDDO j1 
#
            ENDDO a 
#
            DO j1 
#
               GET W1minj_ab(i,i1,j1,j)   
               GET t1a_old(b,j1) 
#
               T1iibj(i,i1,b,j) = W1minj_ab(i,i1,j1,j)*t1a_old(b,j1)  
               Tiibj(i,i1,b,j) -= T1iibj(i,i1,b,j) 
#
            ENDDO j1 
#
            DO b1 
#
               REQUEST W2mjbe_ab(i,i1,b,b1) b1  
               GET t1a_old(b1,j) 
#
               T1iibj(i,i1,b,j) = W2mjbe_ab(i,i1,b,b1)*t1a_old(b1,j)  
               Tiibj(i,i1,b,j) -= T1iibj(i,i1,b,j) 
#
               DO j2 
#
                  REQUEST T2old_aa(b1,j2,b,j) j  
                  REQUEST Vpiqj(i1,i,b1,j2)   j2 # + 
#
                  T1iibj(i,i1,b,j) = Vpiqj(i1,i,b1,j2)*T2old_aa(b1,j2,b,j)  
                  Tiibj(i,i1,b,j) += T1iibj(i,i1,b,j) 
#
               ENDDO j2 
#
            ENDDO b1 
#
            PREPARE W1imen_ab(i,i1,b,j) = Tiibj(i,i1,b,j) 
#
      ENDPARDO i, i1, b, j 
#
      ENDPROC W1IMENAB 
#     ---------------- 
#
# ------------------------------------------------------------------------------------- 
#
# ------------------------------------------------------------------------------------- 
#
      PROC W1IMEN 
#     ----------- 
#
         CALL W1IMENAA
         CALL W1IMENAB 
#
      ENDPROC W1IMEN 
#     -------------- 
#
# ------------------------------------------------------------------------------------- 
#
# ------------------------------------------------------------------------------------- 
#
      PROC W1EAFMAA_S  
#     --------------- 
#
      PARDO a1, a, a2, i 
#
# Compute (a1,a,a1,i) and (a2,a,a1,i) block of intermediate 
# --------------------------------------------------------- 
#
            Tpppp(a1,a,a2,i)  = 0.0  
            TSpppp(a2,a,a1,i) = 0.0  
#
            DO i1 
#
               REQUEST              T2old_aa(a1,i,a2,i1) i1  
               REQUEST              W2mebj_aa(i1,a,a2,i) i  
               GET                  Fme_a(i1,a) 
               GET                  t1a_old(a1,i1) 
#
               T1pppp(a1,a,a2,i)  = T2old_aa(a1,i,a2,i1)*Fme_a(i1,a)  
               Tpppp(a1,a,a2,i)  += T1pppp(a1,a,a2,i) 
#
               T1pppp(a1,a,a2,i)  = W2mebj_aa(i1,a,a2,i)*t1a_old(a1,i1)  
               T2pppp(a2,a,a1,i)  = T1pppp(a1,a,a2,i)  
# 
               Tpppp(a1,a,a2,i)  -= T1pppp(a1,a,a2,i) 
               TSpppp(a2,a,a1,i) += T2pppp(a2,a,a1,i) 
#
            ENDDO i1 
#
            PREPARE W1eafm_aa(a1,a,a2,i) +=  Tpppp(a1,a,a2,i) 
            PREPARE W1eafm_aa(a2,a,a1,i) += TSpppp(a2,a,a1,i) 
#
      ENDPARDO a1, a, a2, i 
#
      PARDO a1, a2, i1, i2  
#
            REQUEST Tau_aa(a1,i1,a2,i2) i2  
#
            DO a 
            DO i 
#
               REQUEST                         VSpipi(a,i1,i,i2)   i2 # +  
               T1pppp(a1,a,a2,i)             = Tau_aa(a1,i1,a2,i2)*VSpipi(a,i1,i,i2)  
               T1pppp(a1,a,a2,i)            *= 0.5  
               PREPARE W1eafm_aa(a1,a,a2,i) +=  T1pppp(a1,a,a2,i) 
#
            ENDDO i 
            ENDDO a 
#
      ENDPARDO a1, a2, i1, i2  
#
      DO a 
      DO a1 
         create DSaaai(a,a1,*,*) 
         create D1eafm_aa(a1,a,*,*) 
         create D2eafm_aa(*,a,a1,*) 
         create D1eafm_ab(a1,a,*,*) 
         execute sip_barrier 
         PARDO a3, i2 
               REQUEST                  VSaaai(a,a1,a3,i2) i2 
               PUT DSaaai(a,a1,a3,i2) = VSaaai(a,a1,a3,i2) 
         ENDPARDO a3, i2 
         execute sip_barrier 
#
         PARDO a2, i, a3, i2  
               REQUEST                     T2old_aa(a3,i2,a2,i) i 
               GET                         DSaaai(a,a1,a3,i2) 
               T1pppp(a1,a,a2,i)         = DSaaai(a,a1,a3,i2)*T2old_aa(a3,i2,a2,i) 
               PUT D1eafm_aa(a1,a,a2,i) += T1pppp(a1,a,a2,i) 
#
               T2pppp(a2,a,a1,i)         = T1pppp(a1,a,a2,i)  
               T2pppp(a2,a,a1,i)        *= -1.0  
               PUT D2eafm_aa(a2,a,a1,i) += T2pppp(a2,a,a1,i) 
         ENDPARDO a2, i, a3, i2  
#
         PARDO b, j, a3, i2  
               REQUEST                    T2old_ab(a3,i2,b,j) j 
               GET                        DSaaai(a,a1,a3,i2) 
               Tppqq(a1,a,b,j)          = DSaaai(a,a1,a3,i2)*T2old_ab(a3,i2,b,j) 
               PUT D1eafm_ab(a1,a,b,j) += Tppqq(a1,a,b,j)
         ENDPARDO b, j, a3, i2  
         execute sip_barrier 
#
         PARDO a2, i 
               GET                             D1eafm_aa(a1,a,a2,i) 
               GET                             D2eafm_aa(a2,a,a1,i) 
               PREPARE W1eafm_aa(a1,a,a2,i) += D1eafm_aa(a1,a,a2,i)
               PREPARE W1eafm_aa(a2,a,a1,i) += D2eafm_aa(a2,a,a1,i)  
         ENDPARDO a2, i 
#
         PARDO b, j 
               GET                            D1eafm_ab(a1,a,b,j) 
               PREPARE W1eafm_ab(a1,a,b,j) += D1eafm_ab(a1,a,b,j)  
         ENDPARDO b, j 
         execute sip_barrier 
#
         delete DSaaai(a,a1,*,*) 
         delete D1eafm_aa(a1,a,*,*) 
         delete D2eafm_aa(*,a,a1,*) 
         delete D1eafm_ab(a1,a,*,*) 
#
      ENDDO a1 
      ENDDO a 
#
      DO a1  
      DO a  
         create Daabj(a,a1,*,*) 
         create D1eafm_aa(a1,a,*,*) 
         create D1eafm_ab(a1,a,*,*) 
         execute sip_barrier 
         PARDO b, j 
               REQUEST               Vaabj(a,a1,b,j) j 
               PUT Daabj(a,a1,b,j) = Vaabj(a,a1,b,j) 
         ENDPARDO b, j 
         execute sip_barrier 
#
         PARDO a2, i, b, j 
               REQUEST                     T2old_ab(a2,i,b,j) j 
               GET                         Daabj(a,a1,b,j) 
               Tpppp(a1,a,a2,i)          = Daabj(a,a1,b,j)*T2old_ab(a2,i,b,j)
               Tpppp(a1,a,a2,i)         *= 2.0  
               PUT D1eafm_aa(a1,a,a2,i) +=  Tpppp(a1,a,a2,i) 
         ENDPARDO a2, i, b, j 
#
         PARDO b1, j1, b, j  
               REQUEST                      T2old_aa(b1,j1,b,j) j 
               GET                          Daabj(a,a1,b,j) 
               Tppqq(a1,a,b1,j1)          = Daabj(a,a1,b,j)*T2old_aa(b1,j1,b,j)
               PUT D1eafm_ab(a1,a,b1,j1) += Tppqq(a1,a,b1,j1) 
         ENDPARDO b1, j1, b, j  
         execute sip_barrier 
#
         PARDO a2, i 
               GET                             D1eafm_aa(a1,a,a2,i) 
               PREPARE W1eafm_aa(a1,a,a2,i) += D1eafm_aa(a1,a,a2,i) 
         ENDPARDO a2, i 
#
         PARDO b1, j1  
               GET                              D1eafm_ab(a1,a,b1,j1) 
               PREPARE W1eafm_ab(a1,a,b1,j1) += D1eafm_ab(a1,a,b1,j1)  
         ENDPARDO b1, j1  
         execute sip_barrier 
#
         delete Daabj(a,a1,*,*) 
         delete D1eafm_aa(a1,a,*,*) 
         delete D1eafm_ab(a1,a,*,*) 
#
      ENDDO a  
#
      ENDDO a1  
#
      ENDPROC W1EAFMAA_S  
#     --------------- 
#
      PROC W1EAFMAA  
#     ------------- 
#
# Done contributions involving integrals with three virtuals.
# -----------------------------------------------------------
#
      PARDO i, a1, a2   
#
            allocate LLaa(*,a1,i,a2) 
#
            DO i1 
               REQUEST            L2old_aa(i1,a1,i,a2) a2  
               LLaa(i1,a1,i,a2) = L2old_aa(i1,a1,i,a2) 
            ENDDO i1 
#
            DO a 
#
               REQUEST            W1eafm_aa(a1,a,a2,i) a  
               tpppp(a1,i,a2,a) = W1eafm_aa(a1,a,a2,i) 
#
# Compute contribution to l1a_new 
# ------------------------------- 
#
               DO i1 
#
                 #REQUEST              L2old_aa(i1,a1,i,a2) a2  
                  T1ia(i1,a)         = LLaa(i1,a1,i,a2)*tpppp(a1,i,a2,a)  
                  T1ia(i1,a)        *= 0.5
                  PUT l1a_new(i1,a) += T1ia(i1,a) 
#
            ENDDO i1 
#
            ENDDO a 
#
            deallocate LLaa(*,a1,i,a2) 
#
      ENDPARDO i, a1, a2 
#
# Done contributions involving integrals with three virtuals.
# -----------------------------------------------------------
#
      ENDPROC W1EAFMAA 
#     ---------------- 
#
      PROC W1EAFMAB_S 
#     --------------- 
#
# Compute (a1,a,b,j) block of intermediate 
# ---------------------------------------- 
#
      PARDO a, a1, j, b 
#
            Tppqq(a1,a,b,j) = 0.0 
#
            DO i 
#
               REQUEST            T2old_ab(a1,i,b,j) j  
               REQUEST            W2mebj_ab(i,a,b,j) j  
               GET                Fme_a(i,a) 
               GET                t1a_old(a1,i) 
#
               T1ppqq(a1,a,b,j) = T2old_ab(a1,i,b,j)*Fme_a(i,a)
               Tppqq(a1,a,b,j) -= T1ppqq(a1,a,b,j)
#
               T1ppqq(a1,a,b,j) = W2mebj_ab(i,a,b,j)*t1a_old(a1,i) 
               Tppqq(a1,a,b,j) -= T1ppqq(a1,a,b,j)
#
            ENDDO i 
#
            PREPARE W1eafm_ab(a1,a,b,j) += Tppqq(a1,a,b,j) 
#
      ENDPARDO a, a1, j, b 
#
      PARDO a, a1, j, j1  
#
            REQUEST W2mjbe_ba(j1,j,a1,a) a  
#
            DO b 
#
               GET                            t1a_old(b,j1) 
               Tppqq(a1,a,b,j)              = W2mjbe_ba(j1,j,a1,a)*t1a_old(b,j1) 
               PREPARE W1eafm_ab(a1,a,b,j) += Tppqq(a1,a,b,j) 
#
            ENDDO b 
#
      ENDPARDO a, a1, j, j1 
#
      PARDO a1, b, j1, i 
#
            REQUEST Tau_ab(a1,i,b,j1) j1  
#
            DO a 
            DO j 
#   
               REQUEST                        Vpiqj(a,i,j,j1) j1  
               Tppqq(a1,a,b,j)              = Tau_ab(a1,i,b,j1)*Vpiqj(a,i,j,j1) 
               PREPARE W1eafm_ab(a1,a,b,j) += Tppqq(a1,a,b,j) 
#
            ENDDO j 
            ENDDO a 
#
      ENDPARDO a1, b, j1, i 
#
      ENDPROC W1EAFMAB_S 
#     ------------------ 
#
      PROC W1EAFMAB 
#     ------------- 
#
# Compute contribution to l1a_new
# -------------------------------
#
      PARDO a1, j, b  
#
            allocate LLab(*,a1,j,b) 
#
            DO i
               REQUEST          L2old_ab(i,a1,j,b) b
               LLab(i,a1,j,b) = L2old_ab(i,a1,j,b) 
            ENDDO i
#
            DO a 
#
               REQUEST           W1eafm_ab(a1,a,b,j) a  
               tpqqp(a1,j,b,a) = W1eafm_ab(a1,a,b,j) 
#
               DO i
#
                 #REQUEST             L2old_ab(i,a1,j,b) b
                  T1ia(i,a)         = LLab(i,a1,j,b)*tpqqp(a1,j,b,a)  
                  PUT l1a_new(i,a) += T1ia(i,a)
#
               ENDDO i
#
            ENDDO a 
#
            deallocate LLab(*,a1,j,b) 
#
      ENDPARDO a1, j, b 
#
# Done contributions involving integrals with three virtuals.
# -----------------------------------------------------------
#
      ENDPROC W1EAFMAB 
#     ---------------- 
#
      PROC W1EAFMBB_S  
#     --------------- 
#
      DO b1
         create D3eafm_ab(*,*,b1,*)
      DO b
         create Dbbai(b,b1,*,*)
         execute sip_barrier
         PARDO a, i
               REQUEST               Vaabj(b,b1,a,i) i
               PUT Dbbai(b,b1,a,i) = Vaabj(b,b1,a,i)
         ENDPARDO a, i
         execute sip_barrier
#
         PARDO a1, j, a, i
#
               REQUEST                     T2old_ab(a1,i,b,j) j
               GET                         Dbbai(b,b1,a,i)
               Tppqq(a1,a,b1,j)          = T2old_ab(a1,i,b,j)*Dbbai(b,b1,a,i)
               Tppqq(a1,a,b1,j)         *= -1.0
               PUT D3eafm_ab(a1,a,b1,j) += Tppqq(a1,a,b1,j)
#
         ENDPARDO a1, j, a, i
         execute sip_barrier
#
         delete Dbbai(b,b1,*,*)
#
      ENDDO b
#
         PARDO a, a1, j
               GET                             D3eafm_ab(a1,a,b1,j)
               PREPARE W1eafm_ab(a1,a,b1,j) += D3eafm_ab(a1,a,b1,j)
         ENDPARDO a, a1, j
         execute sip_barrier
         delete D3eafm_ab(*,*,b1,*)
#
      ENDDO b1
#
      ENDPROC W1EAFMBB_S  
#     ------------------ 
#
      PROC W1EAFM_S  
#     -------------  
# 
         CALL W1EAFMAA_S 
         CALL W1EAFMAB_S 
         CALL W1EAFMBB_S 
#
      ENDPROC W1EAFM_S 
#     ---------------- 
#
      PROC W1EAFM 
#     -----------  
# 
         CALL W1EAFMAA
         CALL W1EAFMAB
#
      ENDPROC W1EAFM 
#     -------------- 
#
# -------------------------------------------------------------------------------------- 
#
# -------------------------------------------------------------------------------------- 
#
      PROC L1ANEW 
#     ----------- 
#
#     local arrays used: 
#     ------------------ 
#     local Liaia(i1,a,i2,a1) 
#     local Liajb(i1,a,j,b) 
# 
      PARDO a, i  
#
            GET                 Fme_a(i,a)
            Tia(i,a)          = Fme_a(i,a) 
            PUT l1a_new(i,a) += Tia(i,a)
#
      ENDPARDO a, i
# 
      PARDO i, a, a1  
#
            GET                 l1a_old(i,a1)
            GET                 F1ae_a(a1,a)
            Tia(i,a)          = l1a_old(i,a1)*F1ae_a(a1,a)
            PUT l1a_new(i,a) += Tia(i,a)
#
      ENDPARDO i, a, a1  
# 
      PARDO i, a, a1, a2  
#
            REQUEST             VSaaai(a2,a1,a,i) i
            GET                 Gae_a(a1,a2)
            Tia(i,a)          = VSaaai(a2,a1,a,i)*Gae_a(a1,a2)
            Tia(i,a)         *= -1.0  
            PUT l1a_new(i,a) += Tia(i,a)
#
      ENDPARDO i, a, a1, a2  
# 
      PARDO i, a, i1 
#
            GET                 l1a_old(i1,a)
            GET                 F1mi_a(i,i1)
            Tia(i,a)          = l1a_old(i1,a)*F1mi_a(i,i1)
            Tia(i,a)         *= -1.0  
            PUT l1a_new(i,a) += Tia(i,a)
#
      ENDPARDO i, a, i1  
# 
      PARDO a, i, i1, i2   
#
            REQUEST             VSpipi(a,i,i1,i2) i2  
            GET                 Gmi_a(i2,i1)
            Tia(i,a)          = VSpipi(a,i,i1,i2)*Gmi_a(i2,i1)
            Tia(i,a)         *= -1.0  
            PUT l1a_new(i,a) += Tia(i,a)
#
      ENDPARDO a, i, i1, i2 
# 
      PARDO a, i, j, j1   
#
            REQUEST             Vpiqj(a,i,j,j1) j1  
            GET                 Gmi_a(j1,j)
            Tia(i,a)          = Vpiqj(a,i,j,j1)*Gmi_a(j1,j)
            Tia(i,a)         *= -1.0  
            PUT l1a_new(i,a) += Tia(i,a)
#
      ENDPARDO a, i, j, j1 
# 
      PARDO a, i, b, b1  
#
            REQUEST             Vaabj(b1,b,a,i) i
            GET                 Gae_a(b,b1)
            Tia(i,a)          = Vaabj(b1,b,a,i)*Gae_a(b,b1)
            Tia(i,a)         *= -1.0  
            PUT l1a_new(i,a) += Tia(i,a)
#
      ENDPARDO a, i, b, b1 
#
      PARDO i1, a1, i2  
#
            allocate Liaia(i1,*,i2,a1) 
#
            DO a 
#
               REQUEST             L2old_aa(i1,a,i2,a1)  a1
               Liaia(i1,a,i2,a1) = L2old_aa(i1,a,i2,a1) 
#
            ENDDO a 
#
            DO i
#
               REQUEST W1imen_aa(i,i1,a1,i2) i2 
#
               DO a
#
                  Tia(i,a)          = W1imen_aa(i,i1,a1,i2)*Liaia(i1,a,i2,a1)
                  Tia(i,a)         *= -0.5
                  PUT l1a_new(i,a) += Tia(i,a)
#
               ENDDO a
#
            ENDDO i
#
            deallocate Liaia(i1,*,i2,a1) 
#
      ENDPARDO i1, a1, i2  
#
      PARDO j, b, i1  
#
            allocate Liajb(i1,*,j,b) 
#
            DO a 
#
               REQUEST           L2old_ab(i1,a,j,b)  b 
               Liajb(i1,a,j,b) = L2old_ab(i1,a,j,b) 
#
            ENDDO a 
#
            DO i
#
               REQUEST W1imen_ab(i,i1,b,j) b 
#
               DO a
#
                  Tia(i,a)          = W1imen_ab(i,i1,b,j)*Liajb(i1,a,j,b) 
                  Tia(i,a)         *= -1.0
                  PUT l1a_new(i,a) += Tia(i,a)
#
               ENDDO a
#
            ENDDO i
#
            deallocate Liajb(i1,*,j,b) 
#
      ENDPARDO j, b, i1  
#
      PARDO a, i, a1, i1
#
            REQUEST             VSpipi(a,i,a1,i1) i1  
            Taiai(a,i,a1,i1)  = VSpipi(a,i,a1,i1)
#
            T2ia(i1,a1) = 0.0
#
            DO a2
#
               GET Gae_a(a2,a1)
               GET t1a_old(a2,i1)
#
               T3ia(i1,a1)  = Gae_a(a2,a1)*t1a_old(a2,i1)
               T2ia(i1,a1) += T3ia(i1,a1)
#
            ENDDO a2
#
            DO i2
#
               GET Gmi_a(i1,i2)
               GET t1a_old(a1,i2)
#
               T3ia(i1,a1)  = Gmi_a(i1,i2)*t1a_old(a1,i2)
               T2ia(i1,a1) -= T3ia(i1,a1)
#
            ENDDO i2
#
            Tia(i,a)          = Taiai(a,i,a1,i1)*T2ia(i1,a1)
            PUT l1a_new(i,a) += Tia(i,a)
#
      ENDPARDO a, i, a1, i1
#
      PARDO a, b, i, j
#
            REQUEST Vpiqj(a,i,b,j) j
#
            T2jb(j,b) = 0.0
#
            DO b1
#
               GET Gae_a(b1,b)
               GET t1a_old(b1,j)
#
               T3jb(j,b)  = Gae_a(b1,b)*t1a_old(b1,j)
               T2jb(j,b) += T3jb(j,b)
#
            ENDDO b1
#
            DO j1
#
               GET Gmi_a(j,j1)
               GET t1a_old(b,j1)
#
               T3jb(j,b)  = Gmi_a(j,j1)*t1a_old(b,j1)
               T2jb(j,b) -= T3jb(j,b)
#
            ENDDO j1
#
            Tia(i,a)          = Vpiqj(a,i,b,j)*T2jb(j,b)
            PUT l1a_new(i,a) += Tia(i,a)
#
      ENDPARDO a, b, i, j
#
      ENDPROC L1ANEW 
#     -------------- 
#
# ------------------------------------------------------------------------------------ 
#
# ------------------------------------------------------------------------------------ 
#
      PROC L2NEWAB 
#     ------------ 
#
      PARDO i, j, a, b  
#
            REQUEST            Vpiqj(a,i,b,j) j 
            GET                l1a_old(i,a)
            GET                Fme_a(j,b)
            GET                l1a_old(j,b)
            GET                Fme_a(i,a)
#
            Tiajb(i,a,j,b)   = Vpiqj(a,i,b,j)
#
            T1iajb(i,a,j,b)  = l1a_old(i,a)^Fme_a(j,b)
            Tiajb(i,a,j,b)  += T1iajb(i,a,j,b)
#
            T1iajb(i,a,j,b)  = Fme_a(i,a)^l1a_old(j,b)
            Tiajb(i,a,j,b)  += T1iajb(i,a,j,b)
#
            DO i1 
            DO j1
#
               REQUEST           L2old_ab(i1,a,j1,b)  b 
               GET               W1minj_ab(i,i1,j,j1) 
#
               T1iajb(i,a,j,b) = L2old_ab(i1,a,j1,b)*W1minj_ab(i,i1,j,j1)
               Tiajb(i,a,j,b) += T1iajb(i,a,j,b) 
#
            ENDDO j1
            ENDDO i1
#
            PREPARE L2new_ab(i,a,j,b) += Tiajb(i,a,j,b)
#
      ENDPARDO i, j, a, b  
#
      PARDO a, i, b, b1  
#
            REQUEST           Vaabj(b,b1,a,i) i 
            tpppp(i,a,b1,b) = Vaabj(b,b1,a,i) 
#
            DO j
#
               GET                          l1a_old(j,b1)
               Tiajb(i,a,j,b)             = tpppp(i,a,b1,b)*l1a_old(j,b1)
               PREPARE L2new_ab(i,a,j,b) += Tiajb(i,a,j,b)
#
               T1iajb(j,b,i,a)            = Tiajb(i,a,j,b) 
               PREPARE L2new_ab(j,b,i,a) += T1iajb(j,b,i,a)
#
            ENDDO j
#
      ENDPARDO a, i, b, b1 
#
      PARDO j, j1 
#
            GET         Gmi_a(j1,j)
            Tjj(j,j1) = Gmi_a(j1,j) 
#
            DO b1 
#
               GET          l1a_old(j,b1)
               GET          t1a_old(b1,j1)
               T1jj(j,j1) = l1a_old(j,b1)*t1a_old(b1,j1)
               Tjj(j,j1) += T1jj(j,j1)
#
            ENDDO b1
#
            PUT Ijj(j,j1) = Tjj(j,j1) 
#
      ENDPARDO j, j1 
#
      PARDO b, b1 
#
            GET         Gae_a(b,b1) 
            Tbb(b1,b) = Gae_a(b,b1) 
#
            DO j1   
#
               GET          l1a_old(j1,b)
               GET          t1a_old(b1,j1)
               T1bb(b1,b) = t1a_old(b1,j1)*l1a_old(j1,b)
               Tbb(b1,b) -= T1bb(b1,b)  
#
            ENDDO j1   
#
            PUT Ibb(b1,b) = Tbb(b1,b) 
#
      ENDPARDO b, b1   
      execute sip_barrier 
#
      PARDO b, j, a, i  
#
            Tiajb(i,a,j,b) = 0.0  
            Taiai(a,i,b,j) = 0.0 
#
            DO b1
#
               REQUEST           L2old_ab(i,a,j,b1) b1 
               REQUEST           Vpiqj(a,i,b1,j)    j 
               GET               Ibb(b1,b)
               GET               F1ae_a(b1,b)
               GET               l1a_old(j,b1)
#
               T1iajb(i,a,j,b) = L2old_ab(i,a,j,b1)*F1ae_a(b1,b)
               Tiajb(i,a,j,b) += T1iajb(i,a,j,b)
#
               T1aiai(a,i,b,j) = Vpiqj(a,i,b1,j)*Ibb(b1,b)
               Taiai(a,i,b,j) += T1aiai(a,i,b,j)
#
            ENDDO b1
#
            T1iajb(i,a,j,b)            = Taiai(a,i,b,j) 
            Tiajb(i,a,j,b)            += T1iajb(i,a,j,b) 
            PREPARE L2new_ab(i,a,j,b) += Tiajb(i,a,j,b)
#
      ENDPARDO b, j, a, i  
#
#     PARDO a, a1, b, j 
#
#           REQUEST Vaabj(a,a1,b,j) j 
#
#           DO i
#
#              GET                          l1a_old(i,a1)
#              Tiajb(i,a,j,b)             = Vaabj(a,a1,b,j)*l1a_old(i,a1)
#              PREPARE L2new_ab(i,a,j,b) += Tiajb(i,a,j,b)
#
#           ENDDO i
#
#     ENDPARDO a, a1, b, j 
#
      PARDO a, i, b, j 
#
            Tiajb(i,a,j,b) = 0.0  
            Taibj(a,i,b,j) = 0.0  
#
            DO a1
#
               REQUEST           L2old_ab(i,a1,j,b) b 
               REQUEST           Vpiqj(a1,i,b,j) j 
               GET               Ibb(a1,a) # Gae_a(a,a1)
               GET               F1ae_a(a1,a)
#
               T1iajb(i,a,j,b) = L2old_ab(i,a1,j,b)*F1ae_a(a1,a)
               Tiajb(i,a,j,b) += T1iajb(i,a,j,b)
#
               T1aibj(a,i,b,j) = Vpiqj(a1,i,b,j)*Ibb(a1,a) # Taa(a1,a)
               Taibj(a,i,b,j) += T1aibj(a,i,b,j)
#
            ENDDO a1
#
            T1iajb(i,a,j,b)            = Taibj(a,i,b,j) 
            Tiajb(i,a,j,b)            += T1iajb(i,a,j,b) 
            PREPARE L2new_ab(i,a,j,b) += Tiajb(i,a,j,b)
#
      ENDPARDO a, i, b, j 
#
      PARDO j, a, i, b  
#
            Tiajb(i,a,j,b) = 0.0  
            Taibj(a,i,b,j) = 0.0  
#
            DO j1
#
               REQUEST           L2old_ab(i,a,j1,b) b 
               REQUEST           Vpiqj(a,i,j1,j)    j 
               REQUEST           Vpiqj(a,i,b,j1) j1 
               GET               Ijj(j,j1)
               GET               F1mi_a(j,j1)
               GET               l1a_old(j1,b)
#
               T1iajb(i,a,j,b) = L2old_ab(i,a,j1,b)*F1mi_a(j,j1)
               Tiajb(i,a,j,b) -= T1iajb(i,a,j,b)
#
               T1aibj(a,i,b,j) = Vpiqj(a,i,j1,j)*l1a_old(j1,b)
               Taibj(a,i,b,j) -= T1aibj(a,i,b,j)
#
               T1aibj(a,i,b,j) = Vpiqj(a,i,b,j1)*Ijj(j,j1)
               Taibj(a,i,b,j) -= T1aibj(a,i,b,j)
#
            ENDDO j1
#
            T1iajb(i,a,j,b)            = Taibj(a,i,b,j)
            Tiajb(i,a,j,b)            += T1iajb(i,a,j,b) 
            PREPARE L2new_ab(i,a,j,b) += Tiajb(i,a,j,b)
#
      ENDPARDO j, a, i, b  
#
      PARDO i, a, b, j 
#
            Tiajb(i,a,j,b) = 0.0  
#
            DO i1
#
               REQUEST           L2old_ab(i1,a,j,b) b 
               REQUEST           Vpiqj(i1,i,b,j)    j 
               REQUEST           Vpiqj(a,i1,b,j)    j 
               GET               Ijj(i,i1) # Gmi_a(i1,i)
               GET               F1mi_a(i,i1)
               GET               l1a_old(i1,a)
#
              #Tii(i,i1)       = Gmi_a(i1,i)
               T1iajb(i,a,j,b) = L2old_ab(i1,a,j,b)*F1mi_a(i,i1)
               Tiajb(i,a,j,b) -= T1iajb(i,a,j,b)
#
               T1iajb(i,a,j,b) = Vpiqj(i1,i,b,j)*l1a_old(i1,a)
               Tiajb(i,a,j,b) -= T1iajb(i,a,j,b)
#
              #DO a1
#
              #   GET          l1a_old(i,a1)
              #   GET          t1a_old(a1,i1)
#
              #   T1ii(i,i1) = l1a_old(i,a1)*t1a_old(a1,i1)
              #   Tii(i,i1) += T1ii(i,i1)
#
              #ENDDO a1
#
               T1iajb(i,a,j,b) = Vpiqj(a,i1,b,j)*Ijj(i,i1) # Tii(i,i1)
               Tiajb(i,a,j,b) -= T1iajb(i,a,j,b)
 
            ENDDO i1
#
            PREPARE L2new_ab(i,a,j,b) += Tiajb(i,a,j,b)
#
      ENDPARDO i, a, b, j 
#
      ENDPROC L2NEWAB 
#     --------------- 
#
      PROC CLEANLITER
#     ---------------
#
           delete l1a_new
           delete Gae_a
           delete Gmi_a
#
      ENDPROC CLEANLITER
#     ------------------ 
#
#    ------------------------------------------------------------------------
#
      PROC UPDATEL2
#     -------------
#
      PARDO b, a, j, i
#
            REQUEST                    L2old_ab(j,b,i,a) a
            REQUEST                    L2new_ab(j,b,i,a) a
            Tiajb(i,a,j,b)           = L2new_ab(j,b,i,a)
            T1iajb(i,a,j,b)          = L2old_ab(j,b,i,a)
#
            REQUEST                    L2old_ab(i,a,j,b) a
            REQUEST                    L2new_ab(i,a,j,b) a
            Tiajb(i,a,j,b)          += L2new_ab(i,a,j,b)
            T1iajb(i,a,j,b)         += L2old_ab(i,a,j,b)
#
            execute energy_denominator Tiajb
            t1iajb(i,a,j,b)         += tiajb(i,a,j,b)
            t1iajb(i,a,j,b)         *= -0.5
#
            if kiter == 1
               PREPARE e1iajb(i,a,j,b) = T1iajb(i,a,j,b)
            endif
#
            if kiter == 2
               PREPARE e2iajb(i,a,j,b) = T1iajb(i,a,j,b)
            endif
#
            if kiter == 3
               PREPARE e3iajb(i,a,j,b) = T1iajb(i,a,j,b)
            endif
#
            if kiter == 4
               PREPARE e4iajb(i,a,j,b) = T1iajb(i,a,j,b)
            endif
#
            if kiter >= 5
               PREPARE e5iajb(i,a,j,b) = T1iajb(i,a,j,b)
            endif
#
      ENDPARDO b, a, j, i
      execute server_barrier 
#
      PARDO b, a, j, i
#
            REQUEST                    L2new_ab(i,a,j,b) a
            REQUEST                    L2new_ab(j,b,i,a) a
            tiajb(i,a,j,b)           = L2new_ab(j,b,i,a)
            tiajb(i,a,j,b)          += L2new_ab(i,a,j,b)
            tiajb(i,a,j,b)          *= -0.5
            execute energy_denominator tiajb
            PREPARE L2old_ab(i,a,j,b)= tiajb(i,a,j,b)
      ENDPARDO b, a, j, i
#
      ENDPROC UPDATEL2
#     ----------------
#
      PROC UPDATEL1
#     -------------
#
      PARDO a, i 
#
            GET                        l1a_new(i,a)
            GET                        l1a_old(i,a)
            tia(i,a)                 = l1a_new(i,a) 
            t1ia(i,a)                = l1a_old(i,a) 
            execute energy_denominator tia(i,a)
            t1ia(i,a)               += tia(i,a) 
            t1ia(i,a)               *= -1.0
#
            if kiter == 1
               PUT e1ia(i,a) = T1ia(i,a)
            endif
#
            if kiter == 2
               PUT e2ia(i,a) = T1ia(i,a)
            endif
#
            if kiter == 3
               PUT e3ia(i,a) = T1ia(i,a)
            endif
#
            if kiter == 4
               PUT e4ia(i,a) = T1ia(i,a)
            endif
#
            if kiter >= 5
               PUT e5ia(i,a) = T1ia(i,a)
            endif
#
      ENDPARDO a, i 
#
      execute sip_barrier

      PARDO a, i
#
            GET                        l1a_new(i,a)
            tia(i,a)           = -1.0 * l1a_new(i,a)
            execute energy_denominator tia(i,a)
            PUT l1a_old(i,a)         = tia(i,a)
#
      ENDPARDO a, i
#
      ENDPROC UPDATEL1
#     ----------------
#
      PROC MOVEL2 
#     ----------- 
#
      PARDO a, a1, i, i1
#
            REQUEST            L2old_aa(i,a,i1,a1) a 
            tiaia(i,a,i1,a1) = L2old_aa(i,a,i1,a1)
#
            if kiter == 1
               PREPARE d1iaia(i,a,i1,a1) = tiaia(i,a,i1,a1)
            endif 
#
            if kiter == 2
               PREPARE d2iaia(i,a,i1,a1) = tiaia(i,a,i1,a1)
            endif 
#
            if kiter == 3
               PREPARE d3iaia(i,a,i1,a1) = tiaia(i,a,i1,a1)
            endif 
#
            if kiter == 4
               PREPARE d4iaia(i,a,i1,a1) = tiaia(i,a,i1,a1)
            endif 
#
            if kiter >= 5
               PREPARE d4iaia(i,a,i1,a1) = tiaia(i,a,i1,a1)
            endif 
#
      ENDPARDO a, a1, i, i1
#
      PARDO a, b, i, j
#
            REQUEST          L2old_ab(i,a,j,b) a 
            tiajb(i,a,j,b) = L2old_ab(i,a,j,b)
#
            if kiter == 1
               PREPARE d1iajb(i,a,j,b) = tiajb(i,a,j,b)
            endif 
#
            if kiter == 2
               PREPARE d2iajb(i,a,j,b) = tiajb(i,a,j,b)
            endif 
#
            if kiter == 3
               PREPARE d3iajb(i,a,j,b) = tiajb(i,a,j,b)
            endif 
#
            if kiter == 4
               PREPARE d4iajb(i,a,j,b) = tiajb(i,a,j,b)
            endif 
#
            if kiter >= 5
               PREPARE d4iajb(i,a,j,b) = tiajb(i,a,j,b)
            endif 
#
      ENDPARDO a, b, i, j
#
      ENDPROC MOVEL2 
#     -------------- 
#
      PROC MOVEL1
#     ------------
#
      PARDO a, i
#
            GET        l1a_old(i,a)
            tia(i,a) = l1a_old(i,a)
#
            if kiter == 1
               PUT d1ia(i,a) = tia(i,a)
            endif
#
            if kiter == 2
               PUT d2ia(i,a) = tia(i,a)
            endif
#
            if kiter == 3
               PUT d3ia(i,a) = tia(i,a)
            endif
#
            if kiter == 4
               PUT d4ia(i,a) = tia(i,a)
            endif
#
            if kiter >= 5
               PUT d4ia(i,a) = tia(i,a)
            endif
#
      ENDPARDO a, i
#
      ENDPROC MOVEL1
#     --------------
#
#    ------------------------------------------------------------------------
#
     PROC LIGUESS
#
#    ------------------------------------------------------------------------
#
     PARDO a, a1, i, i1
#
           REQUEST T2old_aa(a,i,a1,i1) a 
           Tiaia(i,a,i1,a1) = T2old_aa(a,i,a1,i1)
           PREPARE L2old_aa(i,a,i1,a1) = Tiaia(i,a,i1,a1)
           PREPARE D0iaia(i,a,i1,a1) = Tiaia(i,a,i1,a1) 
#
     ENDPARDO a, a1, i, i1
#
     PARDO b, a, j, i
#
           REQUEST T2old_ab(a,i,b,j) a 
           Tiajb(i,a,j,b) = T2old_ab(a,i,b,j)
           PREPARE L2old_ab(i,a,j,b) = Tiajb(i,a,j,b)
           PREPARE D0iajb(i,a,j,b) = Tiajb(i,a,j,b)
#
     ENDPARDO b, a, j, i
#
     PARDO a, i
#
           GET t1a_old(a,i)
           tia(i,a) = t1a_old(a,i)
           PUT l1a_old(i,a) = tia(i,a)
           PUT D0ia(i,a) = tia(i,a)
#
     ENDPARDO a, i
#
#    ------------------------------------------------------------------------
#
     ENDPROC LIGUESS
#
#    ------------------------------------------------------------------------
#
#
#    ------------------------------------------------------------------------
#
     PROC LENERGY
#
#    ------------------------------------------------------------------------
#
     esum    = 0.0
     ecorraa = 0.0
     PARDO a, a1, i, i1
#
           REQUEST VSpipi(a,i,a1,i1)   i1 
           REQUEST L2new_aa(i,a,i1,a1) a1 
#
           GET l1a_new(i1,a1)
           GET l1a_new(i1,a)
           GET l1a_new(i,a1)
           GET l1a_new(i,a)
#
           tia(i1,a1)         =          l1a_new(i1,a1)
           T2iaia(i,a,i1,a1)  = l1a_new(i,a)^tia(i1,a1)
           tia(i,a1)          =           l1a_new(i,a1)
           T3iaia(i,a,i1,a1)  = l1a_new(i1,a)^tia(i,a1)
           T2iaia(i,a,i1,a1) -= T3iaia(i,a,i1,a1)
           T2iaia(i,a,i1,a1)  = L2new_aa(i,a,i1,a1)
#
           etemp = VSpipi(a,i,a1,i1)*T2iaia(i,a,i1,a1)
           etemp = 0.25*etemp
           esum += etemp
#
     ENDPARDO a, a1, i, i1
#
     execute sip_barrier 
     execute server_barrier 
     collective ecorraa += esum
     execute sip_barrier 
     execute print_scalar ecorraa
#
     esum    = 0.0
     ecorrbb = 0.0
     PARDO b, b1, j, j1
#
           REQUEST VSpipi(b,j,b1,j1)   j1 
           REQUEST L2new_aa(j,b,j1,b1) b1 
#
           GET l1a_new(j1,b1)
           GET l1a_new(j1,b)
           GET l1a_new(j,b1)
           GET l1a_new(j,b)
#
           tjb(j1,b1)         =          l1a_new(j1,b1)
           T2jbjb(j,b,j1,b1)  = l1a_new(j,b)^tjb(j1,b1)
           tjb(j,b1)          =           l1a_new(j,b1)
           T3jbjb(j,b,j1,b1)  = l1a_new(j1,b)^tjb(j,b1)
           T2jbjb(j,b,j1,b1) -= T3jbjb(j,b,j1,b1)
           T2jbjb(j,b,j1,b1)  = L2new_aa(j,b,j1,b1)
#
           etemp = VSpipi(b,j,b1,j1)*T2jbjb(j,b,j1,b1)
           etemp = 0.25*etemp
           esum += etemp
#
     ENDPARDO b, b1, j, j1
#
     execute sip_barrier 
     execute server_barrier 
     collective ecorrbb += esum
     execute sip_barrier 
     execute print_scalar ecorrbb
#
     ecorrab = 0.0
     esum    = 0.0
     PARDO a, b, i, j
#
           REQUEST Vpiqj(a,i,b,j)    j 
           REQUEST L2new_ab(i,a,j,b) b 
           GET l1a_new(i,a)
           GET l1a_new(j,b)
           tia(j,b) = l1a_new(j,b)
#
           Tiajb(i,a,j,b)  = l1a_new(i,a)^tia(j,b)
           Tiajb(i,a,j,b)  = L2new_ab(i,a,j,b)
#
           etemp = Tiajb(i,a,j,b)*Vpiqj(a,i,b,j)
           esum += etemp
#
     ENDPARDO a, b, i, j
     execute sip_barrier 
     execute server_barrier 
     collective ecorrab += esum
     execute sip_barrier 
     execute print_scalar ecorrab
#
     ecorrT  = ecorraa
     ecorrT += ecorrbb
     ecorrT += ecorrab
     execute print_scalar ecorrT 
#
#    ------------------------------------------------------------------------
#
     ENDPROC LENERGY
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
     PROC LOLDENERGY
#
#    ------------------------------------------------------------------------
#
     esuma   = 0.0
     ecorraa = 0.0
     PARDO a, a1, i, i1
#
           REQUEST VSpipi(a,i,a1,i1)   i1 
           REQUEST L2old_aa(i,a,i1,a1) a1 
#
           etemp = VSpipi(a,i,a1,i1)*L2old_aa(i,a,i1,a1)
           etemp = 0.25*etemp
           esuma += etemp
#
     ENDPARDO a, a1, i, i1
#
     esumb    = 0.0
     ecorrbb = 0.0
     PARDO b, b1, j, j1
#
           REQUEST VSpipi(b,j,b1,j1)   j1 
           REQUEST L2old_aa(j,b,j1,b1) b1 
#
           etemp = VSpipi(b,j,b1,j1)*L2old_aa(j,b,j1,b1)
           etemp = 0.25*etemp
           esumb += etemp
#
     ENDPARDO b, b1, j, j1
#
     ecorrab = 0.0
     esumab  = 0.0
     PARDO a, b, i, j
#
           REQUEST Vpiqj(a,i,b,j) j 
           REQUEST L2old_ab(i,a,j,b) b 
#
           etemp = L2old_ab(i,a,j,b)*Vpiqj(a,i,b,j)
           esumab += etemp
#
     ENDPARDO a, b, i, j
#
     execute sip_barrier 
     execute server_barrier 

     collective ecorraa += esuma
     execute print_scalar ecorraa

     collective ecorrbb += esumb
     execute print_scalar ecorrbb

     collective ecorrab += esumab
     execute print_scalar ecorrab
#
     ecorrT  = ecorraa + ecorrbb
     ecorrT += ecorrab
     execute print_scalar ecorrT 
#
#    ------------------------------------------------------------------------
#
     ENDPROC LOLDENERGY
#
#    ------------------------------------------------------------------------
#
# In this superprocedure the contributions to the lambda amplitude
# equations from the W^{ef}_{ab} intermediate are computed. The
# contributions are split into two pieces, those using;
# 
# 1. the V^{ab}_{cd} integrals --> PROC LLADDER  
# 2. not using the V^{ab}_{cd} integrals
#    a. L1 contributions       --> PROC L1WABCD 
#    b. L2 contributions       --> PROC L2WABCD 
#
# ------------------------------------------------------------------------------- 
#
      PROC LLADDER 
#     ------------ 
#
# ------------------------------------------------------------------------------- 
#
#     Compute half back transformed 2-particle lambda arrays 
#     ------------------------------------------------------ 
#
#     AB spin combination 
#     ------------------- 
#
      PARDO a, b, i, j  
#
            REQUEST L2old_ab(i,a,j,b) b
# 
            DO mu 
#
               Zab(i,mu,j,b) = L2old_ab(i,a,j,b)*ca(mu,a) 
#
               DO nu 
#
                  Tixjx(i,mu,j,nu)         = Zab(i,mu,j,b)*ca(nu,b) 
                  PREPARE Z2ab(i,mu,j,nu) += Tixjx(i,mu,j,nu)  
#
               ENDDO nu 
#
            ENDDO mu 
#
      ENDPARDO a, b, i, j  

      execute server_barrier 
#
#     Contract half transformed amplitudes with AO integrals 
#     ------------------------------------------------------ 
# 
      PARDO mu, lambda, sigma
#
            DO nu 
#
            IF mu < nu 
#
               compute_integrals aoint(lambda,mu,sigma,nu)
#
#              AB spin combination 
#              ------------------- 
# 
               DO i
               DO j
#
                  REQUEST                       Z2ab(i,lambda,j,sigma) i 
                  Yab(i,mu,j,nu)              = aoint(lambda,mu,sigma,nu)*Z2ab(i,lambda,j,sigma)
                  Y1ab(j,nu,i,mu)             = Yab(i,mu,j,nu)  
#
                  PREPARE L2AO_ab(i,mu,j,nu) += Yab(i,mu,j,nu)
                  PREPARE L2AO_ab(j,nu,i,mu) += Y1ab(j,nu,i,mu)
#
               ENDDO j
               ENDDO i
#
            ENDIF # mu < nu 
#
            ENDDO nu 
# 
      ENDPARDO mu, lambda, sigma
# 
      PARDO mu, lambda, sigma
#
            DO nu 
#
            IF mu == nu 
#
               compute_integrals aoint(lambda,mu,sigma,nu)
#
#              AB spin combination 
#              ------------------- 
# 
               DO i
               DO j
#
                  REQUEST                       Z2ab(i,lambda,j,sigma) i 
                  Yab(i,mu,j,nu)              = aoint(lambda,mu,sigma,nu)*Z2ab(i,lambda,j,sigma)
                  PREPARE L2AO_ab(i,mu,j,nu) += Yab(i,mu,j,nu)
#
               ENDDO j
               ENDDO i
#
            ENDIF # mu == nu 
#
            ENDDO nu 
# 
      ENDPARDO mu, lambda, sigma
# 
#     Perform final two transformations of L2AO  
#     ----------------------------------------- 
# 
      execute server_barrier  
#
#     AA spin combination 
#     ------------------- 
#
      PARDO mu, nu, i, i1 # VFL 
#
            REQUEST              L2AO_ab(i,mu,i1,nu) i 
            REQUEST              L2AO_ab(i,nu,i1,mu) i 
            tixix(i,mu,i1,nu)  = L2AO_ab(i,mu,i1,nu) 
            t1ixix(i,mu,i1,nu) = L2AO_ab(i,nu,i1,mu) 
            tixix(i,mu,i1,nu) -= t1ixix(i,mu,i1,nu) 
           #tixix(i,mu,i1,nu) *= 2.0  
#
            DO a
#
               Tiaix(i,a,i1,nu)  = tixix(i,mu,i1,nu)*ca(mu,a)
#
               DO a1
#
                  GET        t1a_old(a1,i1) 
                  Tiaia(i,a,i1,a1)  = Tiaix(i,a,i1,nu)*ca(nu,a1)
                 #Tiaia(i,a,i1,a1) *= 0.5
                  Tia(i,a) = Tiaia(i,a,i1,a1)*t1a_old(a1,i1) 
#
#                 Update L1new 
#                 ------------ 
                  PUT l1a_new(i,a) += Tia(i,a) 
#
               ENDDO a1
#
            ENDDO a
#
      ENDPARDO mu, nu, i, i1
#
#     AB spin combination 
#     ------------------- 
#
      PARDO mu, nu, i, j # VFL 
#
            REQUEST L2AO_ab(i,mu,j,nu) i 
#
            DO a
#
               Tiajx(i,a,j,nu)  = L2AO_ab(i,mu,j,nu)*ca(mu,a)
#
               DO b
#
                  Tiajb(i,a,j,b)  = Tiajx(i,a,j,nu)*ca(nu,b)
#
#                 Update L2new 
#                 ------------ 
                  PREPARE L2new_ab(i,a,j,b) += Tiajb(i,a,j,b)
#
                  GET        t1a_old(b,j) 
                  Tia(i,a) = Tiajb(i,a,j,b)*t1a_old(b,j) 
#
#                 Update L1new 
#                 ------------ 
                  PUT l1a_new(i,a) += Tia(i,a) 
#
               ENDDO b
#
            ENDDO a
#
      ENDPARDO mu, nu, i, j
#
      execute server_barrier   
#
# ------------------------------------------------------------------------------- 
#
      ENDPROC LLADDER 
#
# ------------------------------------------------------------------------------- 
#
# ------------------------------------------------------------------------------- 
#
      PROC L2WABCDab  
#
# ------------------------------------------------------------------------------- 
#
#     AB spin combination 
#     ------------------- 
#
      create Iiijb 
      create Iiajj 
      create Iiijj 
      execute sip_barrier 
#
      PARDO i, j, a, b   
#
            REQUEST L2old_ab(i,a,j,b) b  
#
            DO i1  
            DO j1  
#
               REQUEST                 Tau_ab(a,i1,b,j1) j1  
               Tiijj(i,i1,j,j1)      = L2old_ab(i,a,j,b)*Tau_ab(a,i1,b,j1) 
               PUT Iiijj(i,i1,j,j1) += Tiijj(i,i1,j,j1) 
#
            ENDDO j1   
            ENDDO i1 
#
            DO i1   
#
               GET                    t1a_old(a,i1) 
               Tiijb(i,i1,j,b)      = L2old_ab(i,a,j,b)*t1a_old(a,i1)
               PUT Iiijb(i,i1,j,b) += Tiijb(i,i1,j,b) 
#
            ENDDO i1   
#
            DO j1  
#
               GET                    t1a_old(b,j1) 
               Tiajj(i,a,j,j1)      = L2old_ab(i,a,j,b)*t1a_old(b,j1) 
               PUT Iiajj(i,a,j,j1) += Tiajj(i,a,j,j1) 
#
            ENDDO j1 
#
      ENDPARDO i, j, a, b 
#
      execute sip_barrier 
#
      PARDO a, b, i1, b1 
#
            REQUEST Vaabj(b,b1,a,i1) i1  
#
            DO i  
            DO j  
#
               GET                          Iiijb(i,i1,j,b1)
               Tiajb(i,a,j,b)             = Vaabj(b,b1,a,i1)*Iiijb(i,i1,j,b1) 
               Tiajb(i,a,j,b)            *= -1.0   
               PREPARE L2new_ab(i,a,j,b) += Tiajb(i,a,j,b) 
#
            ENDDO j  
            ENDDO i  
#
      ENDPARDO a, b, i1, b1 
#
      PARDO a, b, j1, a1 
#
            REQUEST Vaabj(a,a1,b,j1) j1  
# 
            DO i  
            DO j  
#
               GET                          Iiajj(i,a1,j,j1) 
               Tiajb(i,a,j,b)             = Iiajj(i,a1,j,j1)*Vaabj(a,a1,b,j1) 
               Tiajb(i,a,j,b)            *= -1.0   
               PREPARE L2new_ab(i,a,j,b) += Tiajb(i,a,j,b) 
# 
            ENDDO j 
            ENDDO i  
#
      ENDPARDO a, b, j1, a1 
#
      PARDO a, b, i1, j1 
#
            REQUEST Vpiqj(a,i1,b,j1) j1  
#
            DO i  
            DO j  
#
               GET                          Iiijj(i,i1,j,j1)
               Tiajb(i,a,j,b)             = Iiijj(i,i1,j,j1)*Vpiqj(a,i1,b,j1) 
               PREPARE L2new_ab(i,a,j,b) += Tiajb(i,a,j,b) 
#
            ENDDO j  
            ENDDO i  
#
      ENDPARDO a, b, i1, j1 
#
      execute sip_barrier 
      delete Iiijb 
      delete Iiajj 
      delete Iiijj 
# 
# ------------------------------------------------------------------------------- 
#
      ENDPROC L2WABCDab  
#
# ------------------------------------------------------------------------------- 
#
# ------------------------------------------------------------------------------- 
# 
      PROC L1WABCDa 
#     -------------- 
#
#     First piece
#     -----------
#
      create Xiiia
      execute sip_barrier
      PARDO i, i2, a1, a2
#
            REQUEST                  L2old_aa(i,a1,i2,a2) a2 
            REQUEST                  L2old_aa(i,a2,i2,a1) a2 
            tiaia(i,a1,i2,a2)      = L2old_aa(i,a1,i2,a2)
            t1iaia(i,a1,i2,a2)     = L2old_aa(i,a2,i2,a1)
            t1iaia(i,a1,i2,a2)    -= tiaia(i,a1,i2,a2)
#
            DO i3
#
               GET                      t1a_old(a1,i3)
               tiiia(i,i3,i2,a2)      = t1iaia(i,a1,i2,a2)*t1a_old(a1,i3)
               PUT Xiiia(i,i3,i2,a2) += tiiia(i,i3,i2,a2)
#
            ENDDO i3
#
      ENDPARDO i, i2, a1, a2
      execute sip_barrier
#
      PARDO a, a2, a3, i3 
#
            REQUEST VSaaai(a3,a2,a,i3) i3 
#
            DO i
            DO i2
#
               GET                 Xiiia(i,i3,i2,a2)
               GET                 t1a_old(a3,i2)
#
               Tiaia(i,a,i2,a3)  = Xiiia(i,i3,i2,a2)*VSaaai(a3,a2,a,i3)
               tia(i,a)          = Tiaia(i,a,i2,a3)*t1a_old(a3,i2)
               tia(i,a)         *= 0.5
               PUT l1a_new(i,a) += tia(i,a)
#
            ENDDO i2
            ENDDO i
#
      ENDPARDO a, a2, a3, i3 
      execute sip_barrier
      delete Xiiia
#
# 'Fix' on 9/29/08 
# ---------------- 
#
      create Xiiii  
      create Xiiia  
      execute sip_barrier 
#
      PARDO i, i2, a1, a2  
#
            REQUEST L2old_aa(i,a1,i2,a2) a2 
#
            DO i3  
            DO i4  
#
               REQUEST                  Tau_aa(a1,i3,a2,i4) a1 
               Tiiii(i,i3,i2,i4)      = L2old_aa(i,a1,i2,a2)*Tau_aa(a1,i3,a2,i4)
               PUT Xiiii(i,i3,i2,i4) += Tiiii(i,i3,i2,i4)
#
            ENDDO i4  
            ENDDO i3  
#
      ENDPARDO i, i2, a1, a2  
#
      PARDO i3, a, i4, a3  
#
            REQUEST VSpipi(a,i3,a3,i4) i4 
#
            DO i2  
#
               GET                      t1a_old(a3,i2)
               Tiiia(i4,i2,i3,a)      = VSpipi(a,i3,a3,i4)*t1a_old(a3,i2)
               PUT Xiiia(i4,i2,i3,a) += Tiiia(i4,i2,i3,a)
#
            ENDDO i2  
#
      ENDPARDO i3, a, i4, a3 
      execute sip_barrier 
#
      PARDO a, i2, i3, i4
#
            GET Xiiia(i4,i2,i3,a) 
#
            DO i
#
               GET                 Xiiii(i,i3,i2,i4) 
               tia(i,a)          = Xiiii(i,i3,i2,i4)*Xiiia(i4,i2,i3,a)
               tia(i,a)         *= 0.25
               PUT l1a_new(i,a) += tia(i,a)
#
            ENDDO i
#
      ENDPARDO a, i2, i3, i4
#
#     Second piece
#     ------------
#
      create Xiajj
      create Xiibj
      execute sip_barrier
      delete Xiiia 
      delete Xiiii 
      PARDO i, j2, a1, b1
#
            REQUEST L2old_ab(i,a1,j2,b1) b1 
#
            DO j1
#
               GET t1a_old(b1,j1)
#
               Tiajj(i,a1,j2,j1)      = L2old_ab(i,a1,j2,b1)*t1a_old(b1,j1)
               PUT Xiajj(i,a1,j2,j1) += Tiajj(i,a1,j2,j1)
#
            ENDDO j1
#
            DO i1
#
               GET t1a_old(a1,i1)
#
               Tiibj(i1,i,b1,j2)      = L2old_ab(i,a1,j2,b1)*t1a_old(a1,i1)
               PUT Xiibj(i1,i,b1,j2) += Tiibj(i1,i,b1,j2)
#
            ENDDO i1
#
      ENDPARDO i, j2, a1, b1
      execute sip_barrier
#
      PARDO a, b, a1, j1  
#
#           Actual contribution computed. 
#           ----------------------------- 
#           T1iabj(i,a,b,j2) = -Xiajj(i,a1,j2,j1)*Vaabj(a,a1,b,j1)*t1b_old(b,j2)
#
            REQUEST Vaabj(a,a1,b,j1) j1 
            Tajab(a1,j1,a,b)  = Vaabj(a,a1,b,j1)
#
            DO i
            DO j2
#
               GET                 Xiajj(i,a1,j2,j1)
               GET                 t1a_old(b,j2)
#
               Tijaj(i,j2,a1,j1) = Xiajj(i,a1,j2,j1)
#
               Tijab(i,j2,a,b)   = Tijaj(i,j2,a1,j1)*Tajab(a1,j1,a,b)
               Tiabj(i,a,b,j2)   = Tijab(i,j2,a,b)
#
               tia(i,a)          = Tiabj(i,a,b,j2)*t1a_old(b,j2)
               tia(i,a)         *= -1.0
               PUT l1a_new(i,a) += tia(i,a)
#
            ENDDO j2
            ENDDO i
#
      ENDPARDO a, b, a1, j1 
#
      PARDO a, b, b1, i1  
#
#           Actual term computed. 
#           ---------------------
#           T1iabj(i,a,b,j2) = -Xiibj(i1,i,b1,j2)*Vbbai(b,b1,a,i1)*t1b_old(b,j2)
#
            REQUEST Vaabj(b,b1,a,i1) i1 
            Tibab(i1,b1,a,b)  = Vaabj(b,b1,a,i1)
#
            DO j2  
            DO i
#
               GET                 Xiibj(i1,i,b1,j2)
               GET                 t1a_old(b,j2)
#
               Tijib(i,j2,i1,b1) = Xiibj(i1,i,b1,j2)
#
               Tijab(i,j2,a,b)   = Tijib(i,j2,i1,b1)*Tibab(i1,b1,a,b)
               Tiabj(i,a,b,j2)   = Tijab(i,j2,a,b)
#
               tia(i,a)          = Tiabj(i,a,b,j2)*t1a_old(b,j2)
               tia(i,a)         *= -1.0
               PUT l1a_new(i,a) += tia(i,a)
#
            ENDDO i
            ENDDO j2  
#
      ENDPARDO a, b, b1, i1  
#
      execute sip_barrier
      delete Xiajj
      delete Xiibj
#
# Fix the final abomination 
# ------------------------- 
#
      create Xiijj 
      create Xiajj 
      execute sip_barrier 
#
      PARDO i1, j1, a1, b1  
#
            REQUEST Tau_ab(a1,i1,b1,j1) j1 
#
            DO i
            DO j2  
#
               REQUEST                  L2old_ab(i,a1,j2,b1) b1
               Tiijj(i,i1,j2,j1)      = L2old_ab(i,a1,j2,b1)*Tau_ab(a1,i1,b1,j1)
               PUT Xiijj(i,i1,j2,j1) += Tiijj(i,i1,j2,j1)
#
            ENDDO j2  
            ENDDO i
#
      ENDPARDO i1, j1, a1, b1  
#
      PARDO i1, j1, a, b  
#
            REQUEST Vpiqj(a,i1,b,j1) j1 
#
            DO j2  
#
               GET                      t1a_old(b,j2)
               Tiajj(i1,a,j1,j2)      = Vpiqj(a,i1,b,j1)*t1a_old(b,j2)
               PUT Xiajj(i1,a,j1,j2) += Tiajj(i1,a,j1,j2)
#
            ENDDO j2  
#
      ENDPARDO i1, j1, a, b  
      execute sip_barrier 
#
      PARDO a, i1, j1, j2
#
            GET Xiajj(i1,a,j1,j2) 
#
            DO i
#
               GET                 Xiijj(i,i1,j2,j1) 
               tia(i,a)          = Xiijj(i,i1,j2,j1)*Xiajj(i1,a,j1,j2)
               PUT l1a_new(i,a) += tia(i,a)
#
            ENDDO i
#
      ENDPARDO a, i1, j1, j2
#
      execute sip_barrier 
      delete Xiijj 
      delete Xiajj 
#
# -------------------------------------------------------------------------------
#
# ------------------------------------------------------------------------------- 
#
      ENDPROC L1WABCDa 
#     ---------------- 
#
# ------------------------------------------------------------------------------- 
# 
# -------------------------------------------------------------------------------
#
      PROC VABCD
#     ----------
#
           CALL LLADDER
          #CALL L2WABCDaa
          #CALL L2WABCDbb
           CALL L2WABCDab
#
           CALL L1WABCDa
          #CALL L1WABCDb
#
      ENDPROC VABCD
#     -------------
#
# ------------------------------------------------------------------------------- 
#
     PROC L2ZERO
#
          PARDO a, b, i, j
                Tiajb(i,a,j,b) = 0.0
                PREPARE L2new_ab(i,a,j,b) = Tiajb(i,a,j,b)
          ENDPARDO a, b, i, j
#
#     Zero-out intermediate arrays used in the ladder term 
#     ----------------------------------------------------
#     
          PARDO mu, nu, i, j
                Tixjx(i,mu,j,nu)           = 0.0
                PREPARE Z2ab(i,mu,j,nu)    = Tixjx(i,mu,j,nu)
                PREPARE L2AO_ab(i,mu,j,nu) = Tixjx(i,mu,j,nu)
          ENDPARDO mu, nu, i, j
#
     ENDPROC L2ZERO
#
# ------------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------------
#
     PROC ZERO_DSCALAR  
#    ----------------- 
#
#    The scalars used (overlap of error arrays and coeffients) in the DIIS 
#    expansion are zero'd out. 
#
#      Zero out scalars.
#      -----------------
#
       b11 = 0.0
       b12 = 0.0
       b13 = 0.0
       b14 = 0.0
       b15 = 0.0
       b16 = 0.0
       b17 = 0.0
       b18 = 0.0
       b19 = 0.0
       b110 = 0.0
#
       b22 = 0.0
       b23 = 0.0
       b24 = 0.0
       b25 = 0.0
       b26 = 0.0
       b27 = 0.0
       b28 = 0.0
       b29 = 0.0
       b210 = 0.0
#
       b33 = 0.0
       b34 = 0.0
       b35 = 0.0
       b36 = 0.0
       b37 = 0.0
       b38 = 0.0
       b39 = 0.0
       b310 = 0.0
#
       b44 = 0.0
       b45 = 0.0
       b46 = 0.0
       b47 = 0.0
       b48 = 0.0
       b49 = 0.0
       b410 = 0.0
#
       b55 = 0.0
       b56 = 0.0
       b57 = 0.0
       b58 = 0.0
       b59 = 0.0
       b510 = 0.0
#
       b66 = 0.0
       b67 = 0.0
       b68 = 0.0
       b69 = 0.0
       b610 = 0.0
#
       b77 = 0.0
       b78 = 0.0
       b79 = 0.0
       b710 = 0.0
#
       b88 = 0.0
       b89 = 0.0
       b810 = 0.0
#
       b99 = 0.0
       b910 = 0.0
#
       b1010 = 0.0
#
       Tb11 = 0.0
       Tb12 = 0.0
       Tb13 = 0.0
       Tb14 = 0.0
       Tb15 = 0.0
       Tb16 = 0.0
       Tb17 = 0.0
       Tb18 = 0.0
       Tb19 = 0.0
       Tb110 = 0.0
#
       Tb22 = 0.0
       Tb23 = 0.0
       Tb24 = 0.0
       Tb25 = 0.0
       Tb26 = 0.0
       Tb27 = 0.0
       Tb28 = 0.0
       Tb29 = 0.0
       Tb210 = 0.0
#
       Tb33 = 0.0
       Tb34 = 0.0
       Tb35 = 0.0
       Tb36 = 0.0
       Tb37 = 0.0
       Tb38 = 0.0
       Tb39 = 0.0
       Tb310 = 0.0
#
       Tb44 = 0.0
       Tb45 = 0.0
       Tb46 = 0.0
       Tb47 = 0.0
       Tb48 = 0.0
       Tb49 = 0.0
       Tb410 = 0.0
#
       Tb55 = 0.0
       Tb56 = 0.0
       Tb57 = 0.0
       Tb58 = 0.0
       Tb59 = 0.0
       Tb510 = 0.0
#
       Tb66 = 0.0
       Tb67 = 0.0
       Tb68 = 0.0
       Tb69 = 0.0
       Tb610 = 0.0
#
       Tb77 = 0.0
       Tb78 = 0.0
       Tb79 = 0.0
       Tb710 = 0.0
#
       Tb88 = 0.0
       Tb89 = 0.0
       Tb810 = 0.0
#
       Tb99 = 0.0
       Tb910 = 0.0
#
       Tb1010 = 0.0
#
       c1 = 0.0
       c2 = 0.0
       c3 = 0.0
       c4 = 0.0
       c5 = 0.0
       c6 = 0.0
       c7 = 0.0
       c8 = 0.0
       c9 = 0.0
       c10 = 0.0
#
       execute sip_barrier
#
     ENDPROC ZERO_DSCALAR  
#    -------------------- 
#
# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
#
     PROC SETUP_DIIS   
#    --------------- 
#
#    Put the matrix elements of B into the sip 'B' matrix. 
#
       execute diis_setup Tb11
       execute diis_setup Tb12
       execute diis_setup Tb13
       execute diis_setup Tb14
       execute diis_setup Tb15
       execute diis_setup Tb16
       execute diis_setup Tb17
       execute diis_setup Tb18
       execute diis_setup Tb19
       execute diis_setup Tb110

       execute diis_setup Tb22
       execute diis_setup Tb23
       execute diis_setup Tb24
       execute diis_setup Tb25
       execute diis_setup Tb26
       execute diis_setup Tb27
       execute diis_setup Tb28
       execute diis_setup Tb29
       execute diis_setup Tb210

       execute diis_setup Tb33
       execute diis_setup Tb34
       execute diis_setup Tb35
       execute diis_setup Tb36
       execute diis_setup Tb37
       execute diis_setup Tb38
       execute diis_setup Tb39
       execute diis_setup Tb310

       execute diis_setup Tb44
       execute diis_setup Tb45
       execute diis_setup Tb46
       execute diis_setup Tb47
       execute diis_setup Tb48
       execute diis_setup Tb49
       execute diis_setup Tb410

       execute diis_setup Tb55
       execute diis_setup Tb56
       execute diis_setup Tb57
       execute diis_setup Tb58
       execute diis_setup Tb59
       execute diis_setup Tb510

       execute diis_setup Tb66
       execute diis_setup Tb67
       execute diis_setup Tb68
       execute diis_setup Tb69
       execute diis_setup Tb610

       execute diis_setup Tb77
       execute diis_setup Tb78
       execute diis_setup Tb79
       execute diis_setup Tb710

       execute diis_setup Tb88
       execute diis_setup Tb89
       execute diis_setup Tb810

       execute diis_setup Tb99
       execute diis_setup Tb910

       execute diis_setup Tb1010
#
       execute sip_barrier
#
     ENDPROC SETUP_DIIS   
#    ------------------ 
#
# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
#
     PROC DIIS1  
#    ---------- 
#
#    Zero out scalars.
#    ----------------- 
#
     CALL ZERO_DSCALAR 
#
     execute server_barrier 
     execute sip_barrier 
#
#    Determine the 'B-matrix'. 
#    ------------------------- 
#
#    Compute contributions due to L2iajb amplitudes.
#    -----------------------------------------------
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 2 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1iajb(i,a,j,b) a # kiter-1 amplitudes
           REQUEST e2iajb(i,a,j,b) a # kiter-0 amplitudes
#
           REQUEST e1iajb(j,a,i,b) a # kiter-1 amplitudes
           REQUEST e2iajb(j,a,i,b) a # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,2
#             ---------
#
              etemp = e1iajb(i,a,j,b)*e1iajb(i,a,j,b)  
              etemp *= 4.0
              b11  += etemp
#
              etemp = e1iajb(i,a,j,b)*e2iajb(i,a,j,b)  
              etemp *= 4.0
              b12  += etemp
#
#             b1x x=2,2
#             ---------
#
              etemp = e2iajb(i,a,j,b)*e2iajb(i,a,j,b)  
              etemp *= 4.0
              b22  += etemp
#
#             b1x x=1,2
#             ---------
#
              tiajb(i,a,j,b) = e1iajb(j,a,i,b) 
              etemp = tiajb(i,a,j,b)*e1iajb(i,a,j,b)  
              etemp *= -2.0
              b11  += etemp
#
              etemp = e1iajb(j,a,i,b)*e2iajb(i,a,j,b)  
              etemp *= -2.0
              b12  += etemp
#
#             b1x x=2,2
#             ---------
#
              tiajb(i,a,j,b) = e2iajb(j,a,i,b) 
              etemp = tiajb(i,a,j,b)*e2iajb(i,a,j,b)  
              etemp *= -2.0
              b22  += etemp
#
     ENDPARDO a, i, b, j
#
#    Compute contributions due to L1ia amplitudes. 
#    --------------------------------------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 2 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET e1ia(i,a)    # kiter-1 amplitudes  
           GET e2ia(i,a)    # kiter-0 amplitudes  
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#             b1x x=1,2 
#             --------- 
#
              etemp = e1ia(i,a)*e1ia(i,a) 
              etemp *= 4.0
              b11  += etemp            
#
              etemp = e1ia(i,a)*e2ia(i,a) 
              etemp *= 4.0
              b12  += etemp            
#
#             b1x x=2,2 
#             --------- 
#
              etemp = e2ia(i,a)*e2ia(i,a) 
              etemp *= 4.0
              b22  += etemp            
#
     ENDPARDO a, i 
#
     execute sip_barrier
     execute server_barrier 
#
#    Collectively sum B-matrix elements. 
#    -----------------------------------
#
     collective Tb11 += b11 
     collective Tb12 += b12 
     collective Tb22 += b22 
#
#    Now the unique elements of the 'B-matrix' have been computed, the array is filled out
#    in the setup_diis. 
#    --------------------------------------------------------------------------------------
#
#    Put the elements of the 'B-matrix', which have been computed as scalars into the  
#    R-matrix. 
#    -------------------------------------------------------------------------------- 
#
     CALL SETUP_DIIS 
#
     execute compute_diis # --> New instruction  
#
     c1 = Tb11 
     c2 = Tb22 
     execute print_scalar c1 
     execute print_scalar c2 
     execute server_barrier 
     execute sip_barrier 
#
#    Done computing the c-vector. 
#    ---------------------------- 
#
#    Form the updated amplitudes using the c-vector. 
#    -----------------------------------------------  
#
#    Form L2old_ab. 
#    -------------- 
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 2 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST D0iajb(i,a,j,b) a # kiter-2 amplitudes
           REQUEST D1iajb(i,a,j,b) a # kiter-1 amplitudes
#
           REQUEST e1iajb(i,a,j,b) a # kiter-1 amplitudes
           REQUEST e2iajb(i,a,j,b) a # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> L2old_ab.
#          ---------------------------------------------------------
#
           t2iajb(i,a,j,b)            = d0iajb(i,a,j,b)
           t2iajb(i,a,j,b)           += e1iajb(i,a,j,b)
           t2iajb(i,a,j,b)           *= c1
           tiajb(i,a,j,b)             = t2iajb(i,a,j,b)
#
           t2iajb(i,a,j,b)            = d1iajb(i,a,j,b)
           t2iajb(i,a,j,b)           += e2iajb(i,a,j,b)
           t2iajb(i,a,j,b)           *= c2
           tiajb(i,a,j,b)            += t2iajb(i,a,j,b)
#
           PREPARE L2old_ab(i,a,j,b)      = tiajb(i,a,j,b)
#
     ENDPARDO a, i, b, j
#
#    Form Lai_old. 
#    ------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 2 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET D0ia(i,a)     # kiter-2 amplitudes  
           GET D1ia(i,a)     # kiter-1 amplitudes  
#
           GET e1ia(i,a)     # kiter-1 amplitudes  
           GET e2ia(i,a)     # kiter-0 amplitudes  
#
#          Compute contributions to updated amplitudes --> lai_old. 
#          --------------------------------------------------------  
# 
           t1ia(i,a)     = d0ia(i,a) 
           t1ia(i,a)    += e1ia(i,a) 
           t1ia(i,a)    *= c1  
           tia(i,a)      = t1ia(i,a) 
# 
           t1ia(i,a)     = d1ia(i,a) 
           t1ia(i,a)    += e2ia(i,a) 
           t1ia(i,a)    *= c2  
           tia(i,a)     += t1ia(i,a) 
#
           PUT L1a_old(i,a) = tia(i,a) 
#
     ENDPARDO a, i  
#
     execute server_barrier 
     execute sip_barrier 
#
     ENDPROC DIIS1  
#    ------------- 
#
# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
#
     PROC DIIS2  
#    ---------- 
#
#    Zero out scalars.
#    ----------------- 
#
     CALL ZERO_DSCALAR 
#
     execute server_barrier 
     execute sip_barrier 
#
#    Determine the 'B-matrix'. 
#    ------------------------- 
#
#    Compute contributions due to L2iajb amplitudes.
#    -----------------------------------------------
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 2 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1iajb(i,a,j,b) a # kiter-2 amplitudes
           REQUEST e2iajb(i,a,j,b) a # kiter-1 amplitudes
           REQUEST e3iajb(i,a,j,b) a # kiter-0 amplitudes
#
           REQUEST e1iajb(j,a,i,b) a # kiter-2 amplitudes
           REQUEST e2iajb(j,a,i,b) a # kiter-1 amplitudes
           REQUEST e3iajb(j,a,i,b) a # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,3
#             ---------
#
              etemp = e1iajb(i,a,j,b)*e1iajb(i,a,j,b)  
              etemp *= 4.0
              b11  += etemp
#
              etemp = e1iajb(i,a,j,b)*e2iajb(i,a,j,b)  
              etemp *= 4.0
              b12  += etemp
#
              etemp = e1iajb(i,a,j,b)*e3iajb(i,a,j,b)  
              etemp *= 4.0
              b13  += etemp
#
#             b1x x=2,3
#             ---------
#
              etemp = e2iajb(i,a,j,b)*e2iajb(i,a,j,b)  
              etemp *= 4.0
              b22  += etemp
#
              etemp = e2iajb(i,a,j,b)*e3iajb(i,a,j,b)  
              etemp *= 4.0
              b23  += etemp
#
#             b1x x=3,3
#             ---------
#
              etemp = e3iajb(i,a,j,b)*e3iajb(i,a,j,b)  
              etemp *= 4.0
              b33  += etemp
#
#             b1x x=1,3
#             ---------
#
              tiajb(i,a,j,b) = e1iajb(j,a,i,b) 
              etemp = tiajb(i,a,j,b)*e1iajb(i,a,j,b)  
              etemp *= -2.0
              b11  += etemp
#
              etemp = e1iajb(j,a,i,b)*e2iajb(i,a,j,b)  
              etemp *= -2.0
              b12  += etemp
#
              etemp = e1iajb(j,a,i,b)*e3iajb(i,a,j,b)  
              etemp *= -2.0
              b13  += etemp
#
#             b1x x=2,3
#             ---------
#
              tiajb(i,a,j,b) = e2iajb(j,a,i,b) 
              etemp = tiajb(i,a,j,b)*e2iajb(i,a,j,b)  
              etemp *= -2.0
              b22  += etemp
#
              etemp = e2iajb(j,a,i,b)*e3iajb(i,a,j,b)  
              etemp *= -2.0
              b23  += etemp
#
#             b1x x=3,3
#             ---------
#
              tiajb(i,a,j,b) = e3iajb(j,a,i,b) 
              etemp = tiajb(i,a,j,b)*e3iajb(i,a,j,b)  
              etemp *= -2.0
              b33  += etemp
#
     ENDPARDO a, i, b, j
#
#    Compute contributions due to L1ia amplitudes. 
#    --------------------------------------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 2 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET e1ia(i,a)    # kiter-2 amplitudes  
           GET e2ia(i,a)    # kiter-1 amplitudes  
           GET e3ia(i,a)    # kiter-0 amplitudes  
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#             b1x x=1,3 
#             --------- 
#
              etemp = e1ia(i,a)*e1ia(i,a) 
              etemp *= 4.0
              b11  += etemp            
#
              etemp = e1ia(i,a)*e2ia(i,a) 
              etemp *= 4.0
              b12  += etemp            
#
              etemp = e1ia(i,a)*e3ia(i,a) 
              etemp *= 4.0
              b13  += etemp            
#
#             b1x x=2,3 
#             --------- 
#
              etemp = e2ia(i,a)*e2ia(i,a) 
              etemp *= 4.0
              b22  += etemp            
#
              etemp = e2ia(i,a)*e3ia(i,a) 
              etemp *= 4.0
              b23  += etemp            
#
#             b1x x=3,3 
#             --------- 
#
              etemp = e3ia(i,a)*e3ia(i,a) 
              etemp *= 4.0
              b33  += etemp            
#
     ENDPARDO a, i 
#
     execute sip_barrier
     execute server_barrier 
#
#    Collectively sum B-matrix elements. 
#    -----------------------------------
#
     collective Tb11 += b11 
     collective Tb12 += b12 
     collective Tb13 += b13 
     collective Tb22 += b22 
     collective Tb23 += b23 
     collective Tb33 += b33 
#
#    Now the unique elements of the 'B-matrix' have been computed, the array is filled out
#    in the setup_diis. 
#    --------------------------------------------------------------------------------------
#
#    Put the elements of the 'B-matrix', which have been computed as scalars into the  
#    R-matrix. 
#    -------------------------------------------------------------------------------- 
#
     CALL SETUP_DIIS 
#
     execute compute_diis # --> New instruction  
#
     c1 = Tb11 
     c2 = Tb22 
     c3 = Tb33 
     execute print_scalar c1 
     execute print_scalar c2 
     execute print_scalar c3 
     execute server_barrier 
     execute sip_barrier 
#
#    Done computing the c-vector. 
#    ---------------------------- 
#
#    Form the updated amplitudes using the c-vector. 
#    -----------------------------------------------  
#
#    Form L2old_aa. 
#    -------------- 
#
#    Form L2old_ab. 
#    -------------- 
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 3 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST D0iajb(i,a,j,b) a # kiter-3 amplitudes
           REQUEST D1iajb(i,a,j,b) a # kiter-2 amplitudes
           REQUEST D2iajb(i,a,j,b) a # kiter-1 amplitudes
#
           REQUEST e1iajb(i,a,j,b) a # kiter-2 amplitudes
           REQUEST e2iajb(i,a,j,b) a # kiter-1 amplitudes
           REQUEST e3iajb(i,a,j,b) a # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> L2old_ab.
#          ---------------------------------------------------------
#
           t2iajb(i,a,j,b)            = d0iajb(i,a,j,b)
           t2iajb(i,a,j,b)           += e1iajb(i,a,j,b)
           t2iajb(i,a,j,b)           *= c1
           tiajb(i,a,j,b)             = t2iajb(i,a,j,b)
#
           t2iajb(i,a,j,b)            = d1iajb(i,a,j,b)
           t2iajb(i,a,j,b)           += e2iajb(i,a,j,b)
           t2iajb(i,a,j,b)           *= c2
           tiajb(i,a,j,b)            += t2iajb(i,a,j,b)
#
           t2iajb(i,a,j,b)            = d2iajb(i,a,j,b)
           t2iajb(i,a,j,b)           += e3iajb(i,a,j,b)
           t2iajb(i,a,j,b)           *= c3
           tiajb(i,a,j,b)            += t2iajb(i,a,j,b)
#
           PREPARE L2old_ab(i,a,j,b)      = tiajb(i,a,j,b)
#
     ENDPARDO a, i, b, j
#
#    Form Lai_old. 
#    ------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 3 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET D0ia(i,a)     # kiter-3 amplitudes  
           GET D1ia(i,a)     # kiter-2 amplitudes  
           GET D2ia(i,a)     # kiter-1 amplitudes  
#
           GET e1ia(i,a)     # kiter-2 amplitudes  
           GET e2ia(i,a)     # kiter-1 amplitudes  
           GET e3ia(i,a)     # kiter-0 amplitudes  
#
#          Compute contributions to updated amplitudes --> lai_old. 
#          --------------------------------------------------------  
# 
           t1ia(i,a)     = d0ia(i,a) 
           t1ia(i,a)    += e1ia(i,a) 
           t1ia(i,a)    *= c1  
           tia(i,a)      = t1ia(i,a) 
# 
           t1ia(i,a)     = d1ia(i,a) 
           t1ia(i,a)    += e2ia(i,a) 
           t1ia(i,a)    *= c2  
           tia(i,a)     += t1ia(i,a) 
# 
           t1ia(i,a)     = d2ia(i,a) 
           t1ia(i,a)    += e3ia(i,a) 
           t1ia(i,a)    *= c3  
           tia(i,a)     += t1ia(i,a) 
#
           PUT L1a_old(i,a) = tia(i,a) 
#
     ENDPARDO a, i  
#
     execute server_barrier 
     execute sip_barrier 
#
     ENDPROC DIIS2  
#    ------------- 
#
# ---------------------------------------------------------------------------------
#
#
# ---------------------------------------------------------------------------------
#
     PROC DIIS3  
#    ---------- 
#
#    Zero out scalars.
#    ----------------- 
#
     CALL ZERO_DSCALAR 
#
     execute server_barrier 
     execute sip_barrier 
#
#    Determine the 'B-matrix'. 
#    ------------------------- 
#
#    Compute contributions due to L2iajb amplitudes.
#    -----------------------------------------------
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 4 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1iajb(i,a,j,b) a # kiter-3 amplitudes
           REQUEST e2iajb(i,a,j,b) a # kiter-2 amplitudes
           REQUEST e3iajb(i,a,j,b) a # kiter-1 amplitudes
           REQUEST e4iajb(i,a,j,b) a # kiter-0 amplitudes
#
           REQUEST e1iajb(j,a,i,b) a # kiter-3 amplitudes
           REQUEST e2iajb(j,a,i,b) a # kiter-2 amplitudes
           REQUEST e3iajb(j,a,i,b) a # kiter-1 amplitudes
           REQUEST e4iajb(j,a,i,b) a # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,4
#             ---------
#
              etemp = e1iajb(i,a,j,b)*e1iajb(i,a,j,b)  
              etemp *= 4.0
              b11  += etemp
#
              etemp = e1iajb(i,a,j,b)*e2iajb(i,a,j,b)  
              etemp *= 4.0
              b12  += etemp
#
              etemp = e1iajb(i,a,j,b)*e3iajb(i,a,j,b)  
              etemp *= 4.0
              b13  += etemp
#
              etemp = e1iajb(i,a,j,b)*e4iajb(i,a,j,b)  
              etemp *= 4.0
              b14  += etemp
#
#             b1x x=2,4
#             ---------
#
              etemp = e2iajb(i,a,j,b)*e2iajb(i,a,j,b)  
              etemp *= 4.0
              b22  += etemp
#
              etemp = e2iajb(i,a,j,b)*e3iajb(i,a,j,b)  
              etemp *= 4.0
              b23  += etemp
#
              etemp = e2iajb(i,a,j,b)*e4iajb(i,a,j,b)  
              etemp *= 4.0
              b24  += etemp
#
#             b1x x=3,4
#             ---------
#
              etemp = e3iajb(i,a,j,b)*e3iajb(i,a,j,b)  
              etemp *= 4.0
              b33  += etemp
#
              etemp = e3iajb(i,a,j,b)*e4iajb(i,a,j,b)  
              etemp *= 4.0
              b34  += etemp
#
#             b1x x=4,4
#             ---------
#
              etemp = e4iajb(i,a,j,b)*e4iajb(i,a,j,b)  
              etemp *= 4.0
              b44  += etemp
#
#             b1x x=1,4
#             ---------
#
              tiajb(i,a,j,b) = e1iajb(j,a,i,b) 
              etemp = tiajb(i,a,j,b)*e1iajb(i,a,j,b)  
              etemp *= -2.0
              b11  += etemp
#
              etemp = e1iajb(j,a,i,b)*e2iajb(i,a,j,b)  
              etemp *= -2.0
              b12  += etemp
#
              etemp = e1iajb(j,a,i,b)*e3iajb(i,a,j,b)  
              etemp *= -2.0
              b13  += etemp
#
              etemp = e1iajb(j,a,i,b)*e4iajb(i,a,j,b)  
              etemp *= -2.0
              b14  += etemp
#
#             b1x x=2,4
#             ---------
#
              tiajb(i,a,j,b) = e2iajb(j,a,i,b) 
              etemp = tiajb(i,a,j,b)*e2iajb(i,a,j,b)  
              etemp *= -2.0
              b22  += etemp
#
              etemp = e2iajb(j,a,i,b)*e3iajb(i,a,j,b)  
              etemp *= -2.0
              b23  += etemp
#
              etemp = e2iajb(j,a,i,b)*e4iajb(i,a,j,b)  
              etemp *= -2.0
              b24  += etemp
#
#             b1x x=3,4
#             ---------
#
              tiajb(i,a,j,b) = e3iajb(j,a,i,b) 
              etemp = tiajb(i,a,j,b)*e3iajb(i,a,j,b)  
              etemp *= -2.0
              b33  += etemp
#
              etemp = e3iajb(j,a,i,b)*e4iajb(i,a,j,b)  
              etemp *= -2.0
              b34  += etemp
#
#             b1x x=4,4
#             ---------
#
              tiajb(i,a,j,b) = e4iajb(j,a,i,b) 
              etemp = tiajb(i,a,j,b)*e4iajb(i,a,j,b)  
              etemp *= -2.0
              b44  += etemp
#
#
     ENDPARDO a, i, b, j
#
#    Compute contributions due to L1ia amplitudes. 
#    --------------------------------------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 4 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET e1ia(i,a)    # kiter-3 amplitudes  
           GET e2ia(i,a)    # kiter-2 amplitudes  
           GET e3ia(i,a)    # kiter-1 amplitudes  
           GET e4ia(i,a)    # kiter-0 amplitudes  
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#             b1x x=1,4 
#             --------- 
#
              etemp = e1ia(i,a)*e1ia(i,a) 
              etemp *= 4.0
              b11  += etemp            
#
              etemp = e1ia(i,a)*e2ia(i,a) 
              etemp *= 4.0
              b12  += etemp            
#
              etemp = e1ia(i,a)*e3ia(i,a) 
              etemp *= 4.0
              b13  += etemp            
#
              etemp = e1ia(i,a)*e4ia(i,a) 
              etemp *= 4.0
              b14  += etemp            
#
#             b1x x=2,4 
#             --------- 
#
              etemp = e2ia(i,a)*e2ia(i,a) 
              etemp *= 4.0
              b22  += etemp            
#
              etemp = e2ia(i,a)*e3ia(i,a) 
              etemp *= 4.0
              b23  += etemp            
#
              etemp = e2ia(i,a)*e4ia(i,a) 
              etemp *= 4.0
              b24  += etemp            
#
#             b1x x=3,4 
#             --------- 
#
              etemp = e3ia(i,a)*e3ia(i,a) 
              etemp *= 4.0
              b33  += etemp            
#
              etemp = e3ia(i,a)*e4ia(i,a) 
              etemp *= 4.0
              b34  += etemp            
#
#             b1x x=4,4 
#             --------- 
#
              etemp = e4ia(i,a)*e4ia(i,a) 
              etemp *= 4.0
              b44  += etemp            
#
     ENDPARDO a, i 
#
     execute sip_barrier
     execute server_barrier 
#
#    Collectively sum B-matrix elements. 
#    -----------------------------------
#
     collective Tb11 += b11 
     collective Tb12 += b12 
     collective Tb13 += b13 
     collective Tb14 += b14 
     collective Tb22 += b22 
     collective Tb23 += b23 
     collective Tb24 += b24 
     collective Tb33 += b33 
     collective Tb34 += b34 
     collective Tb44 += b44 
#
#    Now the unique elements of the 'B-matrix' have been computed, the array is filled out
#    in the setup_diis. 
#    --------------------------------------------------------------------------------------
#
#    Put the elements of the 'B-matrix', which have been computed as scalars into the  
#    R-matrix. 
#    -------------------------------------------------------------------------------- 
#
     CALL SETUP_DIIS 
#
     execute compute_diis # --> New instruction  
#
     c1 = Tb11 
     c2 = Tb22 
     c3 = Tb33 
     c4 = Tb44 
     execute print_scalar c1 
     execute print_scalar c2 
     execute print_scalar c3 
     execute print_scalar c4 
     execute server_barrier 
     execute sip_barrier 
#
#    Done computing the c-vector. 
#    ---------------------------- 
#
#    Form the updated amplitudes using the c-vector. 
#    -----------------------------------------------  
#
#    Form L2old_ab. 
#    -------------- 
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 4 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST D0iajb(i,a,j,b) a # kiter-4 amplitudes
           REQUEST D1iajb(i,a,j,b) a # kiter-3 amplitudes
           REQUEST D2iajb(i,a,j,b) a # kiter-2 amplitudes
           REQUEST D3iajb(i,a,j,b) a # kiter-1 amplitudes
#
           REQUEST e1iajb(i,a,j,b) a # kiter-3 amplitudes
           REQUEST e2iajb(i,a,j,b) a # kiter-2 amplitudes
           REQUEST e3iajb(i,a,j,b) a # kiter-1 amplitudes
           REQUEST e4iajb(i,a,j,b) a # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> L2old_ab.
#          ---------------------------------------------------------
#
           t2iajb(i,a,j,b)            = d0iajb(i,a,j,b)
           t2iajb(i,a,j,b)           += e1iajb(i,a,j,b)
           t2iajb(i,a,j,b)           *= c1
           tiajb(i,a,j,b)             = t2iajb(i,a,j,b)
#
           t2iajb(i,a,j,b)            = d1iajb(i,a,j,b)
           t2iajb(i,a,j,b)           += e2iajb(i,a,j,b)
           t2iajb(i,a,j,b)           *= c2
           tiajb(i,a,j,b)            += t2iajb(i,a,j,b)
#
           t2iajb(i,a,j,b)            = d2iajb(i,a,j,b)
           t2iajb(i,a,j,b)           += e3iajb(i,a,j,b)
           t2iajb(i,a,j,b)           *= c3
           tiajb(i,a,j,b)            += t2iajb(i,a,j,b)
#
           t2iajb(i,a,j,b)            = d3iajb(i,a,j,b)
           t2iajb(i,a,j,b)           += e4iajb(i,a,j,b)
           t2iajb(i,a,j,b)           *= c4
           tiajb(i,a,j,b)            += t2iajb(i,a,j,b)
#
           PREPARE L2old_ab(i,a,j,b)      = tiajb(i,a,j,b)
#
     ENDPARDO a, i, b, j
#
#    Form Lai_old. 
#    ------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 4 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET D0ia(i,a)     # kiter-4 amplitudes  
           GET D1ia(i,a)     # kiter-3 amplitudes  
           GET D2ia(i,a)     # kiter-2 amplitudes  
           GET D3ia(i,a)     # kiter-1 amplitudes  
#
           GET e1ia(i,a)     # kiter-3 amplitudes  
           GET e2ia(i,a)     # kiter-2 amplitudes  
           GET e3ia(i,a)     # kiter-1 amplitudes  
           GET e4ia(i,a)     # kiter-0 amplitudes  
#
#          Compute contributions to updated amplitudes --> lai_old. 
#          --------------------------------------------------------  
# 
           t1ia(i,a)     = d0ia(i,a) 
           t1ia(i,a)    += e1ia(i,a) 
           t1ia(i,a)    *= c1  
           tia(i,a)      = t1ia(i,a) 
# 
           t1ia(i,a)     = d1ia(i,a) 
           t1ia(i,a)    += e2ia(i,a) 
           t1ia(i,a)    *= c2  
           tia(i,a)     += t1ia(i,a) 
# 
           t1ia(i,a)     = d2ia(i,a) 
           t1ia(i,a)    += e3ia(i,a) 
           t1ia(i,a)    *= c3  
           tia(i,a)     += t1ia(i,a) 
# 
           t1ia(i,a)     = d3ia(i,a) 
           t1ia(i,a)    += e4ia(i,a) 
           t1ia(i,a)    *= c4  
           tia(i,a)     += t1ia(i,a) 
#
           PUT L1a_old(i,a) = tia(i,a) 
#
     ENDPARDO a, i  
#
     execute server_barrier 
     execute sip_barrier 
#
     ENDPROC DIIS3  
#    ------------- 
#
# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
#
     PROC DIIS4  
#    ---------- 
#
#    Zero out scalars.
#    ----------------- 
#
     CALL ZERO_DSCALAR 
#
     execute server_barrier 
     execute sip_barrier 
#
#    Determine the 'B-matrix'. 
#    ------------------------- 
#
#    Compute contributions due to L2iajb amplitudes.
#    -----------------------------------------------
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 5 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1iajb(i,a,j,b) a # kiter-4 amplitudes
           REQUEST e2iajb(i,a,j,b) a # kiter-3 amplitudes
           REQUEST e3iajb(i,a,j,b) a # kiter-2 amplitudes
           REQUEST e4iajb(i,a,j,b) a # kiter-1 amplitudes
           REQUEST e5iajb(i,a,j,b) a # kiter-0 amplitudes
#
           REQUEST e1iajb(j,a,i,b) a # kiter-4 amplitudes
           REQUEST e2iajb(j,a,i,b) a # kiter-3 amplitudes
           REQUEST e3iajb(j,a,i,b) a # kiter-2 amplitudes
           REQUEST e4iajb(j,a,i,b) a # kiter-1 amplitudes
           REQUEST e5iajb(j,a,i,b) a # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,5
#             ---------
#
              etemp = e1iajb(i,a,j,b)*e1iajb(i,a,j,b)  
              etemp *= 4.0
              b11  += etemp
#
              etemp = e1iajb(i,a,j,b)*e2iajb(i,a,j,b)  
              etemp *= 4.0
              b12  += etemp
#
              etemp = e1iajb(i,a,j,b)*e3iajb(i,a,j,b)  
              etemp *= 4.0
              b13  += etemp
#
              etemp = e1iajb(i,a,j,b)*e4iajb(i,a,j,b)  
              etemp *= 4.0
              b14  += etemp
#
              etemp = e1iajb(i,a,j,b)*e5iajb(i,a,j,b)  
              etemp *= 4.0
              b15  += etemp
#
#             b1x x=2,5
#             ---------
#
              etemp = e2iajb(i,a,j,b)*e2iajb(i,a,j,b)  
              etemp *= 4.0
              b22  += etemp
#
              etemp = e2iajb(i,a,j,b)*e3iajb(i,a,j,b)  
              etemp *= 4.0
              b23  += etemp
#
              etemp = e2iajb(i,a,j,b)*e4iajb(i,a,j,b)  
              etemp *= 4.0
              b24  += etemp
#
              etemp = e2iajb(i,a,j,b)*e5iajb(i,a,j,b)  
              etemp *= 4.0
              b25  += etemp
#
#             b1x x=3,5
#             ---------
#
              etemp = e3iajb(i,a,j,b)*e3iajb(i,a,j,b)  
              etemp *= 4.0
              b33  += etemp
#
              etemp = e3iajb(i,a,j,b)*e4iajb(i,a,j,b)  
              etemp *= 4.0
              b34  += etemp
#
              etemp = e3iajb(i,a,j,b)*e5iajb(i,a,j,b)  
              etemp *= 4.0
              b35  += etemp
#
#             b1x x=4,5
#             ---------
#
              etemp = e4iajb(i,a,j,b)*e4iajb(i,a,j,b)  
              etemp *= 4.0
              b44  += etemp
#
              etemp = e4iajb(i,a,j,b)*e5iajb(i,a,j,b)  
              etemp *= 4.0
              b45  += etemp
#
#             b1x x=5,5
#             ---------
#
              etemp = e5iajb(i,a,j,b)*e5iajb(i,a,j,b)  
              etemp *= 4.0
              b55  += etemp
#
#             b1x x=1,5
#             ---------
#
              tiajb(i,a,j,b) = e1iajb(j,a,i,b) 
              etemp = tiajb(i,a,j,b)*e1iajb(i,a,j,b)  
              etemp *= -2.0
              b11  += etemp
#
              etemp = e1iajb(j,a,i,b)*e2iajb(i,a,j,b)  
              etemp *= -2.0
              b12  += etemp
#
              etemp = e1iajb(j,a,i,b)*e3iajb(i,a,j,b)  
              etemp *= -2.0
              b13  += etemp
#
              etemp = e1iajb(j,a,i,b)*e4iajb(i,a,j,b)  
              etemp *= -2.0
              b14  += etemp
#
              etemp = e1iajb(j,a,i,b)*e5iajb(i,a,j,b)  
              etemp *= -2.0
              b15  += etemp
#
#             b1x x=2,5
#             ---------
#
              tiajb(i,a,j,b) = e2iajb(j,a,i,b) 
              etemp = tiajb(i,a,j,b)*e2iajb(i,a,j,b)  
              etemp *= -2.0
              b22  += etemp
#
              etemp = e2iajb(j,a,i,b)*e3iajb(i,a,j,b)  
              etemp *= -2.0
              b23  += etemp
#
              etemp = e2iajb(j,a,i,b)*e4iajb(i,a,j,b)  
              etemp *= -2.0
              b24  += etemp
#
              etemp = e2iajb(j,a,i,b)*e5iajb(i,a,j,b)  
              etemp *= -2.0
              b25  += etemp
#
#             b1x x=3,5
#             ---------
#
              tiajb(i,a,j,b) = e3iajb(j,a,i,b) 
              etemp = tiajb(i,a,j,b)*e3iajb(i,a,j,b)  
              etemp *= -2.0
              b33  += etemp
#
              etemp = e3iajb(j,a,i,b)*e4iajb(i,a,j,b)  
              etemp *= -2.0
              b34  += etemp
#
              etemp = e3iajb(j,a,i,b)*e5iajb(i,a,j,b)  
              etemp *= -2.0
              b35  += etemp
#
#             b1x x=4,5
#             ---------
#
              tiajb(i,a,j,b) = e4iajb(j,a,i,b) 
              etemp = tiajb(i,a,j,b)*e4iajb(i,a,j,b)  
              etemp *= -2.0
              b44  += etemp
#
              etemp = e4iajb(j,a,i,b)*e5iajb(i,a,j,b)  
              etemp *= -2.0
              b45  += etemp
#
#             b1x x=5,5
#             ---------
#
              tiajb(i,a,j,b) = e5iajb(j,a,i,b) 
              etemp = tiajb(i,a,j,b)*e5iajb(i,a,j,b)  
              etemp *= -2.0
#
     ENDPARDO a, i, b, j
#
#    Compute contributions due to L1ia amplitudes. 
#    --------------------------------------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 5 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET e1ia(i,a)    # kiter-4 amplitudes  
           GET e2ia(i,a)    # kiter-3 amplitudes  
           GET e3ia(i,a)    # kiter-2 amplitudes  
           GET e4ia(i,a)    # kiter-1 amplitudes  
           GET e5ia(i,a)    # kiter-0 amplitudes  
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#             b1x x=1,5 
#             --------- 
#
              etemp = e1ia(i,a)*e1ia(i,a) 
              etemp *= 4.0
              b11  += etemp            
#
              etemp = e1ia(i,a)*e2ia(i,a) 
              etemp *= 4.0
              b12  += etemp            
#
              etemp = e1ia(i,a)*e3ia(i,a) 
              etemp *= 4.0
              b13  += etemp            
#
              etemp = e1ia(i,a)*e4ia(i,a) 
              etemp *= 4.0
              b14  += etemp            
#
              etemp = e1ia(i,a)*e5ia(i,a) 
              etemp *= 4.0
              b15  += etemp            
#
#             b1x x=2,5 
#             --------- 
#
              etemp = e2ia(i,a)*e2ia(i,a) 
              etemp *= 4.0
              b22  += etemp            
#
              etemp = e2ia(i,a)*e3ia(i,a) 
              etemp *= 4.0
              b23  += etemp            
#
              etemp = e2ia(i,a)*e4ia(i,a) 
              etemp *= 4.0
              b24  += etemp            
#
              etemp = e2ia(i,a)*e5ia(i,a) 
              etemp *= 4.0
              b25  += etemp            
#
#             b1x x=3,5 
#             --------- 
#
              etemp = e3ia(i,a)*e3ia(i,a) 
              etemp *= 4.0
              b33  += etemp            
#
              etemp = e3ia(i,a)*e4ia(i,a) 
              etemp *= 4.0
              b34  += etemp            
#
              etemp = e3ia(i,a)*e5ia(i,a) 
              etemp *= 4.0
              b35  += etemp            
#
#             b1x x=4,5 
#             --------- 
#
              etemp = e4ia(i,a)*e4ia(i,a) 
              etemp *= 4.0
              b44  += etemp            
#
              etemp = e4ia(i,a)*e5ia(i,a) 
              etemp *= 4.0
              b45  += etemp            
#
#             b1x x=5,5 
#             --------- 
#
              etemp = e5ia(i,a)*e5ia(i,a) 
              etemp *= 4.0
              b55  += etemp            
#
     ENDPARDO a, i 
#
     execute sip_barrier
     execute server_barrier 
#
#    Collectively sum B-matrix elements. 
#    -----------------------------------
#
     collective Tb11 += b11 
     collective Tb12 += b12 
     collective Tb13 += b13 
     collective Tb14 += b14 
     collective Tb15 += b15 
     collective Tb22 += b22 
     collective Tb23 += b23 
     collective Tb24 += b24 
     collective Tb25 += b25 
     collective Tb33 += b33 
     collective Tb34 += b34 
     collective Tb35 += b35 
     collective Tb44 += b44 
     collective Tb45 += b45 
     collective Tb55 += b55 
#
#    Now the unique elements of the 'B-matrix' have been computed, the array is filled out
#    in the setup_diis. 
#    --------------------------------------------------------------------------------------
#
#    Put the elements of the 'B-matrix', which have been computed as scalars into the  
#    R-matrix. 
#    -------------------------------------------------------------------------------- 
#
     CALL SETUP_DIIS 
#
     execute compute_diis # --> New instruction  
#
     c1 = Tb11 
     c2 = Tb22 
     c3 = Tb33 
     c4 = Tb44 
     c5 = Tb55 
     execute print_scalar c1 
     execute print_scalar c2 
     execute print_scalar c3 
     execute print_scalar c4 
     execute print_scalar c5 
     execute server_barrier 
     execute sip_barrier 
#
#    Done computing the c-vector. 
#    ---------------------------- 
#
#    Form the updated amplitudes using the c-vector. 
#    -----------------------------------------------  
#
#    Form L2old_ab. 
#    -------------- 
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 5 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST D0iajb(i,a,j,b) a # kiter-5 amplitudes
           REQUEST D1iajb(i,a,j,b) a # kiter-4 amplitudes
           REQUEST D2iajb(i,a,j,b) a # kiter-3 amplitudes
           REQUEST D3iajb(i,a,j,b) a # kiter-2 amplitudes
           REQUEST D4iajb(i,a,j,b) a # kiter-1 amplitudes
#
           REQUEST e1iajb(i,a,j,b) a # kiter-4 amplitudes
           REQUEST e2iajb(i,a,j,b) a # kiter-3 amplitudes
           REQUEST e3iajb(i,a,j,b) a # kiter-2 amplitudes
           REQUEST e4iajb(i,a,j,b) a # kiter-1 amplitudes
           REQUEST e5iajb(i,a,j,b) a # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> L2old_ab.
#          ---------------------------------------------------------
#
           t2iajb(i,a,j,b)            = d0iajb(i,a,j,b)
           t2iajb(i,a,j,b)           += e1iajb(i,a,j,b)
           t2iajb(i,a,j,b)           *= c1
           tiajb(i,a,j,b)             = t2iajb(i,a,j,b)
#
           t2iajb(i,a,j,b)            = d1iajb(i,a,j,b)
           t2iajb(i,a,j,b)           += e2iajb(i,a,j,b)
           t2iajb(i,a,j,b)           *= c2
           tiajb(i,a,j,b)            += t2iajb(i,a,j,b)
#
           t2iajb(i,a,j,b)            = d2iajb(i,a,j,b)
           t2iajb(i,a,j,b)           += e3iajb(i,a,j,b)
           t2iajb(i,a,j,b)           *= c3
           tiajb(i,a,j,b)            += t2iajb(i,a,j,b)
#
           t2iajb(i,a,j,b)            = d3iajb(i,a,j,b)
           t2iajb(i,a,j,b)           += e4iajb(i,a,j,b)
           t2iajb(i,a,j,b)           *= c4
           tiajb(i,a,j,b)            += t2iajb(i,a,j,b)
#
           t2iajb(i,a,j,b)            = d4iajb(i,a,j,b)
           t2iajb(i,a,j,b)           += e5iajb(i,a,j,b)
           t2iajb(i,a,j,b)           *= c5
           tiajb(i,a,j,b)            += t2iajb(i,a,j,b)
#
           PREPARE L2old_ab(i,a,j,b)      = tiajb(i,a,j,b)
#
     ENDPARDO a, i, b, j
#
#    Form Lai_old. 
#    ------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 5 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET D0ia(i,a)     # kiter-5 amplitudes  
           GET D1ia(i,a)     # kiter-4 amplitudes  
           GET D2ia(i,a)     # kiter-3 amplitudes  
           GET D3ia(i,a)     # kiter-2 amplitudes  
           GET D4ia(i,a)     # kiter-1 amplitudes  
#
           GET e1ia(i,a)     # kiter-4 amplitudes  
           GET e2ia(i,a)     # kiter-3 amplitudes  
           GET e3ia(i,a)     # kiter-2 amplitudes  
           GET e4ia(i,a)     # kiter-1 amplitudes  
           GET e5ia(i,a)     # kiter-0 amplitudes  
#
#          Compute contributions to updated amplitudes --> lai_old. 
#          --------------------------------------------------------  
# 
           t1ia(i,a)     = d0ia(i,a) 
           t1ia(i,a)    += e1ia(i,a) 
           t1ia(i,a)    *= c1  
           tia(i,a)      = t1ia(i,a) 
# 
           t1ia(i,a)     = d1ia(i,a) 
           t1ia(i,a)    += e2ia(i,a) 
           t1ia(i,a)    *= c2  
           tia(i,a)     += t1ia(i,a) 
# 
           t1ia(i,a)     = d2ia(i,a) 
           t1ia(i,a)    += e3ia(i,a) 
           t1ia(i,a)    *= c3  
           tia(i,a)     += t1ia(i,a) 
# 
           t1ia(i,a)     = d3ia(i,a) 
           t1ia(i,a)    += e4ia(i,a) 
           t1ia(i,a)    *= c4  
           tia(i,a)     += t1ia(i,a) 
# 
           t1ia(i,a)     = d4ia(i,a) 
           t1ia(i,a)    += e5ia(i,a) 
           t1ia(i,a)    *= c5  
           tia(i,a)     += t1ia(i,a) 
#
           PUT L1a_old(i,a) = tia(i,a) 
#
     ENDPARDO a, i  
#
     execute server_barrier 
     execute sip_barrier 
#
     ENDPROC DIIS4  
#    ------------- 
#
# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
#
     PROC MOVE4
#    ----------
#
#    1 --> 0
#    ---------------------------------------------------
#
     execute server_barrier
     execute array_copy d1iaia d0iaia
     execute array_copy d1iajb d0iajb
#
#
#    2 --> 1
#    ---------------------------------------------------
#
     execute array_copy e2iaia e1iaia
     execute array_copy e2iajb e1iajb
     execute array_copy d2iaia d1iaia
     execute array_copy d2iajb d1iajb
#
#    3 --> 2
#    ---------------------------------------------------
#
     execute array_copy e3iaia e2iaia
     execute array_copy e3iajb e2iajb
     execute array_copy d3iaia d2iaia
     execute array_copy d3iajb d2iajb
#
#
#    4 --> 3
#    ---------------------------------------------------
#
     execute array_copy e4iaia e3iaia
     execute array_copy e4iajb e3iajb
     execute array_copy d4iaia d3iaia
     execute array_copy d4iajb d3iajb
#
#
#
#    5 --> 4
#    ---------------------------------------------------
#
     execute array_copy e5iaia e4iaia
     execute array_copy e5iajb e4iajb
#
#   Now copy the distributed data.
#
     execute sip_barrier
#
     PARDO a, i
           GET d1ia(i,a)
           PUT d0ia(i,a) = d1ia(i,a)
     ENDPARDO a, i
#
     PARDO a, i
           GET e2ia(i,a)
           PUT e1ia(i,a) = e2ia(i,a)
     ENDPARDO a, i
#
     execute sip_barrier
#
     PARDO a, i
           GET d2ia(i,a)
           PUT d1ia(i,a) = d2ia(i,a)
     ENDPARDO a, i
#
     PARDO a, i
           GET e3ia(i,a)
           PUT e2ia(i,a) = e3ia(i,a)
     ENDPARDO a, i
#
     execute sip_barrier
#
     PARDO a, i
           GET d3ia(i,a)
           PUT d2ia(i,a) = d3ia(i,a)
     ENDPARDO a, i
#
     PARDO a, i
           GET e4ia(i,a)
           PUT e3ia(i,a) = e4ia(i,a)
     ENDPARDO a, i
#
     execute sip_barrier
#
     PARDO a, i
           GET d4ia(i,a)
           PUT d3ia(i,a) = d4ia(i,a)
     ENDPARDO a, i
#
     PARDO a, i
           GET e5ia(i,a)
           PUT e4ia(i,a) = e5ia(i,a)
     ENDPARDO a, i
#
     execute sip_barrier
     execute server_barrier
#
     ENDPROC MOVE4
#    -------------
#
# ---------------------------------------------------------------------------------
#
# 
      PROC LMAIN 
#     ---------- 
#
# Create one-particle intermediate arrays 
# --------------------------------------- 
      CALL CREAT1INTER  
#
# Compute Tau and Taup arrays 
# --------------------------- 
      CALL TAU 
      execute server_barrier  
#
# Compute permanent Intermediates 
# ------------------------------------- 
# 
      CALL FME 
      execute sip_barrier 
      CALL F1AE 
      CALL F1MI  
      execute sip_barrier 
#
      CALL W1MINJ 
      CALL W2MEBJ   
      execute server_barrier 
      execute sip_barrier 
#
      CALL W1IMEN 
      CALL W1MEBJ_S  
      CALL W1EAFM_S  
#
# Done computing permanent Intermediates 
# -------------------------------------- 
#
# Start Iterations 
# ---------------- 
#
      CALL CREATLAMBDAOLD # creates one-particle lambda arrays 
      execute sip_barrier 
#
# Create initial guess
# --------------------
#
      CALL LIGUESS
      execute server_barrier 

      PARDO a, a1, i, i1 
            REQUEST                       L2old_ab(i,a,i1,a1) a 
            REQUEST                       L2old_ab(i1,a,i,a1) a 
            tiaia(i,a,i1,a1)            = L2old_ab(i,a,i1,a1) 
            t1iaia(i,a,i1,a1)           = L2old_ab(i1,a,i,a1) 
            tiaia(i,a,i1,a1)           -= t1iaia(i,a,i1,a1)
            PREPARE L2old_aa(i,a,i1,a1) = tiaia(i,a,i1,a1) 
      ENDPARDO a, a1, i, i1 
      execute server_barrier 
#
      CALL LOLDENERGY
      execute server_barrier 
      eold = ecorrT 
#
      DO kiter 

         PARDO a, a1, i, i1 
               REQUEST                       L2old_ab(i,a,i1,a1) a 
               REQUEST                       L2old_ab(i1,a,i,a1) a 
               tiaia(i,a,i1,a1)            = L2old_ab(i,a,i1,a1) 
               t1iaia(i,a,i1,a1)           = L2old_ab(i1,a,i,a1) 
               tiaia(i,a,i1,a1)           -= t1iaia(i,a,i1,a1)
               PREPARE L2old_aa(i,a,i1,a1) = tiaia(i,a,i1,a1) 
         ENDPARDO a, a1, i, i1 
         execute server_barrier 
#
         CALL CREATLAMBDANEW # creates one-particle lambda arrays 
#
# Zero-out new amplitudes 
# ----------------------- 
#
         CALL L2ZERO 
         execute sip_barrier 
         execute server_barrier 
# 
# Compute temporary intermediates 
# ------------------------------- 
#
         CALL GAE 
         CALL GMI 
         execute sip_barrier 
#
# Compute New L1 and L2 arrays 
# ---------------------------- 
#
         CALL L1ANEW 
         CALL L2NEWAB 
         CALL VABCD
         CALL W1EAFM
         CALL W1MEBJ  
         execute sip_barrier 
         execute server_barrier 
#
# Update arrays 
# ------------- 
#
         CALL UPDATEL1 
         CALL UPDATEL2 
         execute sip_barrier 
         execute server_barrier 
#
         CALL LOLDENERGY
#
#        Check on convergence
#        --------------------
#
         IF ecorrT < eold
            ediff = eold - ecorrT
            IF ediff < ecrit
               exit # kiter
            ENDIF
         ENDIF
#
         IF ecorrT > eold
            ediff = ecorrT - eold
            IF ediff < ecrit
               exit # kiter
            ENDIF
         ENDIF

         if kiter == 2
#
#           Get uptated amplitudes based on DIIS procedure.
#           -----------------------------------------------
#
            CALL DIIS1
#
         endif # kiter == 2
#
         if kiter == 3
#
#           Get uptated amplitudes based on DIIS procedure.
#           -----------------------------------------------
#
            CALL DIIS2
#
         endif # kiter == 3
#
         if kiter == 4
#
#           Get uptated amplitudes based on DIIS procedure.
#           -----------------------------------------------
#
            CALL DIIS3
#
         endif # kiter == 4
#
         if kiter >= 5
#
#           Get uptated amplitudes based on DIIS procedure.
#           -----------------------------------------------
#
            CALL DIIS4
            CALL MOVE4
#
         endif # kiter == 5
#
         CALL MOVEL1
         CALL MOVEL2

         execute server_barrier 
         PARDO a, a1, i, i1 
               REQUEST                       L2old_ab(i,a,i1,a1) a 
               REQUEST                       L2old_ab(i1,a,i,a1) a 
               tiaia(i,a,i1,a1)            = L2old_ab(i,a,i1,a1) 
               t1iaia(i,a,i1,a1)           = L2old_ab(i1,a,i,a1) 
               tiaia(i,a,i1,a1)           -= t1iaia(i,a,i1,a1)
               PREPARE L2old_aa(i,a,i1,a1) = tiaia(i,a,i1,a1) 
         ENDPARDO a, a1, i, i1 

         execute server_barrier 
#
# Clean up temporary arrays
# -------------------------
#
         execute sip_barrier Gae_a
         CALL CLEANLITER
         execute sip_barrier Fme_a
#
#        Reset eold --> enew
#        -------------------
#
         eold = ecorrT
#
      ENDDO kiter
#
      ENDPROC LMAIN 
#     ------------- 
#
# MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM 
#
# PERFORM INITIALIZATION FOR TESTS  
# --------------------------------  
#
      ecrit = cc_conv  
#     CALL TRAN_UHF_P1 # perform full transformation  
#
# First read in the converged amplitudes
# --------------------------------------
#
      CREATE  VSTART1A1
      CREATE  VSTART1B1
      CREATE  VSTART1A2
      CREATE  VSTART1B2
      CREATE  VSTART1A3
      CREATE  VSTART1B3
      CREATE  VSTART1A4
      CREATE  VSTART1B4
      CREATE  VSTART1A5
      CREATE  VSTART1B5
      CREATE  VSTART1A6
      CREATE  VSTART1B6
      CREATE  VSTART1A7
      CREATE  VSTART1B7
      CREATE  VSTART1A8
      CREATE  VSTART1B8
      CREATE  VSTART1A9
      CREATE  VSTART1B9
      CREATE  VSTART1A10
      CREATE  VSTART1B10
      CREATE  VSTART1A11
      CREATE  VSTART1B11
      CREATE  VSTART1A12
      CREATE  VSTART1B12 # Watson

      create t1a_old 
      CALL READ_2EL 
#
#     COMPUTE LAMBDA AMPLITUDES
#     ------------------------- 
#
      CALL LMAIN 
#
# Write amplitudes to file
# ------------------------
#
     #CALL WRITE_2EL # Watson comment out

      EXECUTE  BLOCKS_TO_LIST  VSTART1A1
      EXECUTE  BLOCKS_TO_LIST  VSTART1B1
      EXECUTE  BLOCKS_TO_LIST  VSTART1A2
      EXECUTE  BLOCKS_TO_LIST  VSTART1B2
      EXECUTE  BLOCKS_TO_LIST  VSTART1A3
      EXECUTE  BLOCKS_TO_LIST  VSTART1B3
      EXECUTE  BLOCKS_TO_LIST  VSTART1A4
      EXECUTE  BLOCKS_TO_LIST  VSTART1B4
      EXECUTE  BLOCKS_TO_LIST  VSTART1A5
      EXECUTE  BLOCKS_TO_LIST  VSTART1B5
      EXECUTE  BLOCKS_TO_LIST  VSTART1A6
      EXECUTE  BLOCKS_TO_LIST  VSTART1B6
      EXECUTE  BLOCKS_TO_LIST  VSTART1A7
      EXECUTE  BLOCKS_TO_LIST  VSTART1B7
      EXECUTE  BLOCKS_TO_LIST  VSTART1A8
      EXECUTE  BLOCKS_TO_LIST  VSTART1B8
      EXECUTE  BLOCKS_TO_LIST  VSTART1A9
      EXECUTE  BLOCKS_TO_LIST  VSTART1B9
      EXECUTE  BLOCKS_TO_LIST  VSTART1A10
      EXECUTE  BLOCKS_TO_LIST  VSTART1B10
      EXECUTE  BLOCKS_TO_LIST  VSTART1A11
      EXECUTE  BLOCKS_TO_LIST  VSTART1B11
      EXECUTE  BLOCKS_TO_LIST  VSTART1A12
      EXECUTE  BLOCKS_TO_LIST  VSTART1B12
      execute blocks_to_list t1a_old
      execute blocks_to_list t1b_old
      execute blocks_to_list T2old_aa
      execute blocks_to_list T2old_ab
      execute blocks_to_list T2old_bb
#
      execute blocks_to_list l1a_old
      execute blocks_to_list L2old_aa
      execute blocks_to_list L2old_ab
      execute server_barrier
      execute sip_barrier
      execute write_blocks_to_list
      execute sip_barrier
#
                           ENDSIAL LAMBDA_SV1     
#
# EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE 
#
