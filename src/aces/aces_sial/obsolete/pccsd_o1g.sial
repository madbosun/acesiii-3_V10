                           SIAL PCCSD_O1     
#
#----------------------------------------------------------------------------- 
#
# Declare indeces 
# --------------- 
#
      index kiter    = 1, cc_iter   
#
      aoindex mu     = 1, norb 
      aoindex nu     = 1, norb
      aoindex lambda = 1, norb
      aoindex sigma  = 1, norb
#
      moaindex i = baocc, eaocc
      moaindex i1= baocc, eaocc
      moaindex i2= baocc, eaocc
      moaindex i3= baocc, eaocc
#
      moaindex a = bavirt, eavirt
      moaindex a1= bavirt, eavirt
      moaindex a2= bavirt, eavirt
      moaindex a3= bavirt, eavirt
#
      mobindex j = bbocc, ebocc
      mobindex j1= bbocc, ebocc
      mobindex j2= bbocc, ebocc
      mobindex j3= bbocc, ebocc
#
      mobindex b = bbvirt, ebvirt
      mobindex b1= bbvirt, ebvirt
      mobindex b2= bbvirt, ebvirt
      mobindex b3= bbvirt, ebvirt
#
      moaindex p = baocc, eavirt
      moaindex p1= baocc, eavirt
      moaindex p2= baocc, eavirt
      moaindex p3= baocc, eavirt
#
      mobindex q = bbocc, ebvirt
      mobindex q1= bbocc, ebvirt
      mobindex q2= bbocc, ebvirt
      mobindex q3= bbocc, ebvirt
# 
# Declare static arrays 
# --------------------- 
#
      distributed t1a_old(a,i) 
      distributed t1a_new(a,i) 
      distributed t1b_old(b,j) 
      distributed t1b_new(b,j) 
#
      distributed Fae_a(a,a1) 
      distributed Fae_b(b,b1) 
      distributed Fme_a(i,a) 
      distributed Fme_b(j,b) 
      distributed Fmi_a(i,i1) 
      distributed Fmi_b(j,j1) 
#
# Arrays used in transformation for AO2 algorithm
# -----------------------------------------------
#
      temp Txixi(mu,i1,lambda,i)
      temp Txxii(mu,nu,i1,i)
      temp Tixxi(i1,nu,lambda,i)
      temp Txipi(mu,i,p,i1)
      temp Tpipi(p1,i,p,i1)
      temp T1pipi(p1,i,p,i1)
      temp Tixai(i,mu,a,i1)
      temp Txaii(mu,a,i,i1)
      temp Tiaai(i,a1,a,i1)
      temp Taaii(a,a1,i,i1)
      temp Txaai(mu,a1,a,i)
      temp Taaai(a2,a,a1,i)
      temp Txxai(mu,nu,a,i)
#
      served Vxixi(mu,i,nu,i1) 
      served Vxixj(mu,i,nu,j) 
      served Vxjxj(mu,j,nu,j1) 
      served Vxxii(mu,nu,i1,i)
      served Viixx(i1,i,mu,nu)
      served Vixxi(i1,nu,lambda,i)
      served Vxipi(mu,i,p,i1)
      served Vixai(i,mu,a,i1)
      served Vxaii(mu,a,i,i1)
      served Vxxjj(mu,nu,j1,j)
      served Vjjxx(j1,nu,lambda,j)
      served Vjxxj(j1,nu,lambda,j)
      served Vxjqj(mu,j,q,j1)
      served Vjxbj(j,mu,b,j1)
      served Vxbjj(mu,b,j,j1) 
      served Vxiqj(mu,i,q,j)
      served Viixb(i,i1,mu,b)
      served Viibb(i,i1,b1,b)
      served Vxajj(mu,a,j,j1)
      served Vixxj(i,mu,nu,j)
      served Vixbj(i,mu,b,j)
      served Vxbii(mu,b,i,i1)
#
      served VSpipi(p1,i,p,i1)
      served Viaai(i,a1,a,i1) 
      served Vaaii(a,a1,i,i1)
      served VSaaai(a2,a,a1,i)
      served VSaaaa(a,a1,a2,a3)
#
      temp Txjxj(mu,j1,lambda,j)
      temp Txxjj(mu,nu,j1,j)
      temp Tjjxx(j1,nu,lambda,j)
      temp Tjxxj(j1,nu,lambda,j)
      temp Txjqj(mu,j,q,j1)
      temp Tqjqj(q1,j,q,j1)
      temp T1qjqj(q1,j,q,j1)
      temp Tjxbj(j,mu,b,j1)
      temp Txbjj(mu,b,j,j1)
      temp Tjbbj(j,b1,b,j1)
      temp Tbbjj(b,b1,j,j1)
      temp Txbbj(mu,b1,b,j)
      temp Tbbbj(b2,b,b1,j)
      temp Txxbj(mu,nu,b,j)
#
      served VSqjqj(q1,j,q,j1)
      served Vjbbj(j,b1,b,j1)
      served Vbbjj(b,b1,j,j1)
      served VSbbbj(b2,b,b1,j)
      served VSbbbb(b,b1,b2,b3)
#
      temp Txixj(mu,i,nu,j)
      temp Txiqj(mu,i,q,j)
      temp Tpiqj(p,i,q,j)
      temp Tiixx(i,i1,mu,nu)
      temp Tiixb(i,i1,mu,b)
      temp Tiibb(i,i1,b1,b)
      temp Txajj(mu,a,j,j1)
      temp Taajj(a,a1,j,j1)
      temp Txabj(mu,a,b,j)
      temp Tixxj(i,mu,nu,j)
      temp Tixbj(i,mu,b,j)
      temp Tiabj(i,a,b,j)
      temp Taabj(a,a1,b,j)
#
      served Vpiqj(p,i,q,j)
      served Vaajj(a,a1,j,j1)
      served Viabj(i,a,b,j)
      served Vaabj(a,a1,b,j) 
      served Vaabb(a,a1,b,b1) 
#
      temp Txbii(mu,b,i,i1)
      temp Tbbii(b,b1,i,i1)
      temp Tjbii(j,b,i,i1)
      temp Txbai(mu,b,a,i)
      temp Tbbai(b,b1,a,i)
#
      served Vjbii(j,b,i,i1)
      served Vbbii(b,b1,i,i1)
      served Vbbai(b,b1,a,i)
#
      served TAUP_aa(a,i,a1,i1) 
      served TAUP_ab(a,i,b1,j1) 
      served TAUP_bb(b,j,b1,j1) 
#
      local Lxixi(mu,i1,lambda,i) 
      local Lxixj(mu,i,lambda,j) 
      local Lxjxj(mu,j1,lambda,j) 
      local Lxxii(mu,nu,i1,i) 
      local Lxxjj(mu,nu,j1,j) 
      local Lixxi(i1,nu,lambda,i)
      local Lixxj(i,nu,lambda,j)
      local Ljxxj(j1,nu,lambda,j)
      local Lxipi(mu,i,p,i1)
      local Lpipi(p1,i,p,i1)
      local Lxaii(mu,a,i,i1)
      local Laaii(a1,a,i,i1)
      local Lixai(i,mu,a,i1)
      local Liaai(i,a1,a,i1)
#
      local Lxjqj(mu,j,q,j1)
      local Lqjqj(q1,j,q,j1)
      local Lxbjj(mu,b,j,j1)
      local Lbbjj(b1,b,j,j1)
      local Ljxbj(j,mu,b,j1)
      local Ljbbj(j,b1,b,j1)
      local Lxbii(mu,b,i,i1)
      local Lbbii(b1,b,i,i1)
      local Lxajj(mu,a,j,j1)
      local Laajj(a1,a,j,j1)
      local Lixbj(i,mu,b,j)
      local Liabj(i,a,b,j)
      local Liixb(i,i1,mu,b)
      local Liibb(i,i1,b1,b)
      local Lxiqj(mu,i,q,j)
      local Lpiqj(p,i,q,j)
#
      local Lxiai(lambda,i,a1,i1)
      local Lxjbj(lambda,j,b1,j1)
      local Lxibj(lambda,i,b,j)
      local L1xixi(mu,i,nu,i1)
      local L1xjxj(mu,j,nu,j1)
      local L1xixj(mu,i,nu,j)
#
# End Arrays used in transformation for AO2 algorithm
# --------------------------------------------------- 
#
# Arrays needed for AOLADDER contribution
# ---------------------------------------
#
     temp Zaa(lambda,i,a1,i1)
     temp Zbb(lambda,j,b,j1)
     temp Zab(lambda,i,b,j)
     temp ZZaa(lambda,i,sigma,i1)
     temp ZZ1aa(lambda,i,sigma,i1)
     temp ZZbb(lambda,j,sigma,j1)
     temp ZZ1bb(lambda,j,sigma,j1)
     temp ZZab(lambda,i,sigma,j)
#
     temp Yaa(lambda,i,mu,i1)
     temp Y1aa(lambda,i,mu,i1)
     temp Ybb(lambda,j,mu,j1)
     temp Y1bb(lambda,j,mu,j1)
     temp Yab(lambda,i,mu,j)
     temp Y1ab(lambda,i,mu,j)
#
     temp TXaiai(a,i,nu,i1)
     temp Taixi(a,i,nu,i1)
     temp T1aixi(a,i,nu,i1)
     temp TYaiai(a,i,a1,i1)
     temp TY1aiai(a,i,a1,i1)
     temp TXbjbj(b,j,nu,j1)
     temp Tbjxj(b,j,nu,j1)
     temp TYbjbj(b,j,b1,j1)
     temp TY1bjbj(b,j,b1,j1)
     temp TXaibj(a,i,nu,j)
     temp Taixj(a,i,nu,j)
     temp TYaibj(a,i,b,j)
#
     served aoint(mu,nu,lambda,sigma) 
     served TAO_aa(lambda,i,sigma,i1)
     served TAO_bb(lambda,j,sigma,j1)
     served TAO_ab(lambda,i,sigma,j)
     served T1AO_aa(lambda,i,a,i1)
     served T1AO_bb(lambda,j,b,j1)
     served T1AO_ab(lambda,i,b,j)
     served T2AO_aa(lambda,i,sigma,i1)
     served T2AO_bb(lambda,j,sigma,j1)
     served T2AO_ab(lambda,i,sigma,j)
#
     distributed TTxi(mu,i) 
     distributed TTxj(mu,j) 
     served Gxixi(mu,i,nu,i1) 
     served Gxjxj(mu,j,nu,j1) 
     served Gxixj(mu,i,nu,j) 
#
     local Daixj(a,i,nu,j) 
     local D1aixi(a,i,nu,i1) 
     local D2xiai(mu,i,a,i1) 
     local D1bjxj(b,j,nu,j1) 
     local D2xjbj(mu,j,b,j1) 
#
# Declare temporary arrays 
# ------------------------ 
#
      temp Txxxi(mu,nu,lambda,i)
      temp Txixx(mu,i,lambda,sigma)
      temp Txxxj(mu,nu,lambda,j)
      temp Txjxx(mu,j,lambda,sigma)
      temp T1xixi(mu,i,nu,i1)
      temp Txiix(mu,i,i1,nu)
      temp Txjjx(mu,j,j1,nu)
      temp Txijx(mu,i,j,nu)
      temp Txpii(mu,p,i,i1)
      temp Txqii(mu,q,i,i1)
      temp Tppii(p,p1,i,i1)
      temp Tqqii(q,q1,i,i1)
      temp Txpjj(mu,p,j,j1)
      temp Txqjj(mu,q,j,j1)
      temp Tppjj(p,p1,j,j1)
      temp Tqqjj(q,q1,j,j1)
      temp Tixpi(i,mu,p,i1)
      temp Tippi(i,p,p1,i1)
      temp Tjxqj(j,mu,q,j1)
      temp Tjqqj(j,q,q1,j1)
      temp Tixqj(i,mu,q,j)
      temp Tipqj(i,p,q,j)
#
      temp Vblock(i,i1,i2,i3)
      temp Taiai(p,i,p1,i1)
      temp T1aiai(p,i,p1,i1)
      temp T2aiai(p,i,p1,i1)
      temp T3aiai(p,i,p1,i1)
      temp Tbjbj(q,j,q1,j1)
      temp T1bjbj(q,j,q1,j1)
      temp T2bjbj(q,j,q1,j1)
      temp T3bjbj(q,j,q1,j1)
      temp Taibj(p,i,q,j)
      temp T1aibj(p,i,q,j)
      temp T2aibj(p,i,q,j)
#
      temp Txxxp(mu,nu,lambda,i)
      temp Txxxq(mu,nu,lambda,j)
      temp Txxpp(mu,nu,p1,i)
      temp Txxqq(mu,nu,q1,j)
      temp Txppp(mu,p2,p1,i)
      temp Txqpp(mu,q,p1,i)
      temp Txqqq(mu,q2,q1,j)
      temp Txpqq(mu,p,q1,j)
      temp Tpppp(p3,p2,p1,p)
      temp Tqqqq(q3,q2,q1,q)
      temp Tppqq(p1,p,q1,j)
      temp Tqqpp(q1,q,p1,i)
      temp Tixxx(i,mu,nu,sigma) 
      temp Tipxx(i,p,nu,sigma) 
      temp Tipqx(i,p,q,sigma) 
      temp Tipqq(i,p,q,q1) 
      temp Txiai(lambda,i,a1,i1) 
      temp Txjbj(lambda,j,b1,j1) 
      temp Txibj(lambda,i,b1,j1) 
#
      temp tmp1_aiai(a,i,a1,i1) 
      temp tmp2_aiai(a,i,a1,i1) 
      temp tmp3_aiai(a,i,a1,i1) 
      temp tmp1_bjbj(b,j,b1,j1) 
      temp tmp2_bjbj(b,j,b1,j1) 
      temp tmp3_bjbj(b,j,b1,j1) 
      temp tmp1_aibj(a,i,b,j) 
      temp tmp2_aibj(a,i,b,j) 
#
      temp Tai(a,i) 
      temp Txp(mu,p) 
      temp T1xp(mu,p) 
      temp T1ai(a,i) 
      temp T2ai(a,i) 
      temp Tbj(b,j) 
      temp Txq(mu,q) 
      temp T1xq(mu,q) 
      temp T1bj(b,j) 
      temp T2bj(b,j) 
#
      temp Taa(a,a1) 
      temp T1aa(a,a1) 
      temp Tbb(b,b1) 
      temp T1bb(b,b1) 
      temp Tae_a(a,a1) 
      temp Tae_b(b,b1) 
#
      temp Tia(i,a) 
      temp T1ia(i,a) 
      temp Tjb(j,b) 
      temp T1jb(j,b) 
      temp Tme_a(i,a) 
      temp Tme_b(j,b) 
#
      temp Tii(i,i1) 
      temp T1ii(i,i1) 
      temp Tjj(j,j1) 
      temp T1jj(j,j1) 
      temp Tmi_a(i,i1) 
      temp Tmi_b(j,j1) 
#
      temp T1pppp(p,p1,p2,p3) 
      temp T1qqqq(q,q1,q2,q3) 
      temp Taiii(a,i,i1,i2) 
      temp T1aiii(a,i,i1,i2) 
#
      temp  Tiiii(i,i1,i2,i3) 
      temp T1iiii(i,i1,i2,i3) 
#
      temp  Tjjjj(j,j1,j2,j3) 
      temp T1jjjj(j,j1,j2,j3) 
      temp  Tbjjj(b,j,j1,j2) 
      temp T1bjjj(b,j,j1,j2) 
#
      temp  Tiijj(i,i1,j2,j3) 
      temp T1iijj(i,i1,j2,j3) 
#
      temp  tmp_aa(a,a1) 
      temp tmp1_aa(a,a1) 
      temp  tmp_ii(i,i1) 
      temp tmp1_ii(i,i1) 
#
      temp  Tiiai(i,i1,a,i2) 
      temp T1iiai(i,i1,a,i2) 
#
      temp  tmp_bb(b,b1) 
      temp tmp1_bb(b,b1) 
      temp  tmp_jj(j,j1) 
      temp tmp1_jj(j,j1) 
#
      temp  Tjjbj(j,j1,b,j2) 
      temp T1jjbj(j,j1,b,j2) 
# 
      temp T1aaai(a,a1,a2,i)  
      temp T2aaai(a,a1,a2,i)  
      temp Taaaa(a,a1,a2,a3)  
      temp T1aaaa(a,a1,a2,a3)  
      temp T2aaaa(a,a1,a2,a3)  
      temp T3aaaa(a,a1,a2,a3)  
      temp T4aaaa(a,a1,a2,a3)  
#
      temp T1bbbj(b,b1,b2,j)  
      temp T2bbbj(b,b1,b2,j)  
      temp Tbbbb(b,b1,b2,b3)  
      temp T1bbbb(b,b1,b2,b3)  
      temp T2bbbb(b,b1,b2,b3)  
      temp T3bbbb(b,b1,b2,b3)  
      temp T4bbbb(b,b1,b2,b3)  
#
      temp Taabb(a,a1,b,b1)  
      temp T1aabb(a,a1,b,b1)  
      temp Tbbaa(b,b1,a,a1) 
      temp T1bbaa(b,b1,a,a1) 
#
      temp R1aiai(a,i,a1,i1) 
      temp R2aiai(a,i,a1,i1) 
      temp R3aiai(a,i,a1,i1) 
      temp R4aiai(a,i,a1,i1) 
      temp R1bjbj(b,j,b1,j1) 
      temp R2bjbj(b,j,b1,j1) 
      temp R3bjbj(b,j,b1,j1) 
      temp R4bjbj(b,j,b1,j1) 
      temp R1aibj(a,i,b,j) 
      temp R2aibj(a,i,b,j) 
      temp R3aibj(a,i,b,j) 
      temp R4aibj(a,i,b,j) 
#
      temp T1iaai(i,a,a1,i1) 
      temp T2iaai(i,a,a1,i1) 
      temp T1jbbj(j,b,b1,j1) 
      temp T2jbbj(j,b,b1,j1) 
      temp T1iabj(i,a,b,j) 
      temp T2iabj(i,a,b,j) 
      temp Tjjpp(j,j1,p,p1) 
      temp T1jjpp(j,j1,p,p1) 
      temp T2jjpp(j,j1,p,p1) 
      temp  Tiiqq(i,i1,q,q1) 
      temp T1iiqq(i,i1,q,q1) 
      temp T2iiqq(i,i1,q,q1) 
      temp  Tjjai(j,j1,a,i) 
      temp T1jjai(j,j1,a,i) 
      temp T2jjai(j,j1,a,i) 
      temp  Tiibj(i,i1,b,j) 
      temp T1iibj(i,i1,b,j) 
      temp T2iibj(i,i1,b,j) 
      temp  Tjbai(j,b,a,i)  
      temp T1jbai(j,b,a,i)  
      temp T2jbai(j,b,a,i)  
      temp  Taijj(a,i,j,j1) 
      temp T1aijj(a,i,j,j1) 
      temp Tqqip(a,i,b,b1)  
#
# Declare distributed arrays 
# -------------------------- 
#
      served T2new_aa(a,i,a1,i1)
      served T2new_bb(b,j,b1,j1)
      served T2new_ab(a,i,b,j)
      served T2old_aa(a,i,a1,i1)
      served T2old_bb(b,j,b1,j1)
      served T2old_ab(a,i,b,j)
#
      served Wiibb(i1,i,b,b1)    
      served Wjjaa(j1,j,a,a1)      
#
# local arrays used for data storage
# ---------------------------------- 
#
     local Liiai(i2,i,a,i1) 
     local L1iiai(i,i1,a2,i2) 
     local L2iiai(i2,i1,a2,i)  
     local L3iiai(i,i1,a,i2)  
     local L4iiai(i2,i1,a,i)  
     local Laiai(a,i,a2,i1) 
     local L1aiai(a,i,a1,i2) 
     local L2aiai(a1,i1,a2,i) 
     local L3aiai(a2,i1,a,i2) 
     local L4aiai(a1,i,a2,i1) 
     local L5aiai(a,i,a2,i2) 
     local Laaai(a,a2,a1,i) 
#
     local Ljjbj(j2,j,b,j1) 
     local Lbjbj(b,j,b2,j1) 
     local L1bjbj(b,j,b1,j2) 
     local L2bjbj(b1,j1,b2,j) 
     local L3bjbj(b2,j1,b,j2) 
     local L4bjbj(b1,j,b2,j1) 
     local L5bjbj(b,j,b2,j2) 
     local Lbbbj(b,b2,b1,j) 
#
     local Laijj(a,i,j1,j) 
     local Laibj(a,i,b1,j) 
     local L1aibj(a1,i,b,j) 
     local L2aibj(a,i,b,j2) 
     local L3aibj(a,i1,b,j) 
     local L4aibj(a,i,b1,j) 
     local L5aibj(a,i,b,j) 
     local Liibj(i1,i,b,j) 
     local L1iibj(i,i1,b,j) 
     local Lbbai(b,b1,a,i) 
     local Laabj(a,a1,b,j) 
     local LLaiai(a,i,a1,i1) 
     local LLbjbj(b,j,b1,j1) 
     local LLaibj(a,i,b,j) 
#
     local Laiii(a,i,i2,i1)
     local L1aiii(a1,i2,i,i1)
     local Lbjjj(b,j,j2,j1)
     local L1bjjj(b1,j2,j,j1)
     local Ljjai(a,i,j,j1) 
#
# Distributed two-particle arrays 
# ------------------------------- 
#
     distributed Wminj_aa(i2,i,i3,i1) 
     distributed Wminj_bb(j2,j,j3,j1) 
     distributed Wminj_ab(i2,i,j3,j1) 
#
# Arrays used in two-electron transformation
# ------------------------------------------ 

#
# Declare scalars 
# --------------- 
#
      scalar etemp
      scalar esum
      scalar ecorraa
      scalar ecorrbb
      scalar ecorrab
      scalar ecorrT
      scalar enew 
      scalar eold 
      scalar ecrit 
      scalar ediff 
      scalar mp2_energy
#
# Arrays/Scalars used exclusively in DIIS procedure. 
# -------------------------------------------------- 
#
       served D0aiai(a,i,a1,i1)  
       served D1aiai(a,i,a1,i1)  
       served D2aiai(a,i,a1,i1)  
       served D3aiai(a,i,a1,i1)  
       served D4aiai(a,i,a1,i1)  
       served D5aiai(a,i,a1,i1)  
#
       served D0bjbj(b,j,b1,j1)  
       served D1bjbj(b,j,b1,j1)  
       served D2bjbj(b,j,b1,j1)  
       served D3bjbj(b,j,b1,j1)  
       served D4bjbj(b,j,b1,j1)  
       served D5bjbj(b,j,b1,j1)  
#
       served D0aibj(a,i,b,j)  
       served D1aibj(a,i,b,j)  
       served D2aibj(a,i,b,j)  
       served D3aibj(a,i,b,j)  
       served D4aibj(a,i,b,j)  
       served D5aibj(a,i,b,j)  
#
       distributed D0ai(a,i)  
       distributed D1ai(a,i)  
       distributed D2ai(a,i)  
       distributed D3ai(a,i)  
       distributed D4ai(a,i)  
       distributed D5ai(a,i)  
#
       distributed D0bj(b,j)   
       distributed D1bj(b,j)   
       distributed D2bj(b,j)   
       distributed D3bj(b,j)   
       distributed D4bj(b,j)   
       distributed D5bj(b,j)   
#
       distributed e1ai(a,i)  
       distributed e2ai(a,i)  
       distributed e3ai(a,i)  
       distributed e4ai(a,i)  
       distributed e5ai(a,i)  
#
       distributed e1bj(b,j)   
       distributed e2bj(b,j)   
       distributed e3bj(b,j)   
       distributed e4bj(b,j)   
       distributed e5bj(b,j)   
#
       served e1aiai(a,i,a1,i1)  
       served e2aiai(a,i,a1,i1)  
       served e3aiai(a,i,a1,i1)  
       served e4aiai(a,i,a1,i1)  
       served e5aiai(a,i,a1,i1)  
#
       served e1bjbj(b,j,b1,j1)  
       served e2bjbj(b,j,b1,j1)  
       served e3bjbj(b,j,b1,j1)  
       served e4bjbj(b,j,b1,j1)  
       served e5bjbj(b,j,b1,j1)  
#
       served e1aibj(a,i,b,j)  
       served e2aibj(a,i,b,j)  
       served e3aibj(a,i,b,j)  
       served e4aibj(a,i,b,j)  
       served e5aibj(a,i,b,j)  
#
       scalar b11
       scalar b12
       scalar b13
       scalar b14
       scalar b15
       scalar b16
       scalar b17
       scalar b18
       scalar b19
       scalar b110
#
       scalar b22
       scalar b23
       scalar b24
       scalar b25
       scalar b26
       scalar b27
       scalar b28
       scalar b29
       scalar b210
#
       scalar b33
       scalar b34
       scalar b35
       scalar b36
       scalar b37
       scalar b38
       scalar b39
       scalar b310
       scalar b44
       scalar b45
       scalar b46
       scalar b47
       scalar b48
       scalar b49
       scalar b410
#
       scalar b55
       scalar b56
       scalar b57
       scalar b58
       scalar b59
       scalar b510
#
       scalar b66
       scalar b67
       scalar b68
       scalar b69
       scalar b610
#
       scalar b77
       scalar b78
       scalar b79
       scalar b710
#
       scalar b88
       scalar b89
       scalar b810
#
       scalar b99
       scalar b910
#
       scalar b1010
#
       scalar Tb11
       scalar Tb12
       scalar Tb13
       scalar Tb14
       scalar Tb15
       scalar Tb16
       scalar Tb17
       scalar Tb18
       scalar Tb19
       scalar Tb110
#
       scalar Tb22
       scalar Tb23
       scalar Tb24
       scalar Tb25
       scalar Tb26
       scalar Tb27
       scalar Tb28
       scalar Tb29
       scalar Tb210
#
       scalar Tb33
       scalar Tb34
       scalar Tb35
       scalar Tb36
       scalar Tb37
       scalar Tb38
       scalar Tb39
       scalar Tb310
       scalar Tb44
       scalar Tb45
       scalar Tb46
       scalar Tb47
       scalar Tb48
       scalar Tb49
       scalar Tb410
#
       scalar Tb55
       scalar Tb56
       scalar Tb57
       scalar Tb58
       scalar Tb59
       scalar Tb510
#
       scalar Tb66
       scalar Tb67
       scalar Tb68
       scalar Tb69
       scalar Tb610
#
       scalar Tb77
       scalar Tb78
       scalar Tb79
       scalar Tb710
#
       scalar Tb88
       scalar Tb89
       scalar Tb810
#
       scalar Tb99
       scalar Tb910
#
       scalar Tb1010
#
       scalar c1 
       scalar c2 
       scalar c3 
       scalar c4 
       scalar c5 
       scalar c6 
       scalar c7 
       scalar c8 
       scalar c9 
       scalar c10  
#
#
#    ------------------------------------------------------------------------ 
#
     PROC READ_2EL   
# 
#    ------------------------------------------------------------------------ 
#
      execute server_barrier
      execute list_to_blocks                VSpipi
      execute list_to_blocks                Vaaii
      execute list_to_blocks                Viaai
      execute list_to_blocks                VSaaai
      execute list_to_blocks                VSqjqj
      execute list_to_blocks                Vbbjj
      execute list_to_blocks                Vjbbj
      execute list_to_blocks                VSbbbj
      execute list_to_blocks                Vbbii
      execute list_to_blocks                Vjbii
      execute list_to_blocks                Vbbai
      execute list_to_blocks                Vpiqj
      execute list_to_blocks                Vaajj
      execute list_to_blocks                Viabj
      execute list_to_blocks                Vaabj
      execute server_barrier
      execute read_list_to_blocks 
      execute server_barrier
#
#    ------------------------------------------------------------------------ 
#
     ENDPROC READ_2EL   
# 
#    ------------------------------------------------------------------------ 
#
#    ------------------------------------------------------------------------ 
#
     PROC WRITE_2EL   
# 
#    ------------------------------------------------------------------------ 
#
      execute server_barrier
      execute blocks_to_list                VSpipi(p,i,p1,i1) 
      execute blocks_to_list                Vaaii
      execute blocks_to_list                Viaai
      execute blocks_to_list                VSaaai
      execute blocks_to_list                VSqjqj(q,j,q1,j1) 
      execute blocks_to_list                Vbbjj
      execute blocks_to_list                Vjbbj
      execute blocks_to_list                VSbbbj
      execute blocks_to_list                Vbbii
      execute blocks_to_list                Vjbii
      execute blocks_to_list                Vbbai
      execute blocks_to_list                Vpiqj(p,i,q,j) 
      execute blocks_to_list                Vaajj
      execute blocks_to_list                Viabj
      execute blocks_to_list                Vaabj
#
#    ------------------------------------------------------------------------ 
#
     ENDPROC WRITE_2EL   
# 
#    ------------------------------------------------------------------------ 
#
# ---------------------------------------------------------------------------  
#
#    ------------------------------------------------------------------------
#
     PROC TRAN_XXII
#
#    ------------------------------------------------------------------------
#
     execute sip_barrier
#
     PARDO mu, lambda 
#
           allocate Lxixi(mu,*,lambda,*) 
           allocate Lxixj(mu,*,lambda,*) 
           allocate Lxjxj(mu,*,lambda,*) 
#
           DO nu 
           DO sigma 
#
              compute_integrals AOINT(mu,nu,lambda,sigma)
#
              DO i
#
                 Txxxi(mu,nu,lambda,i) = AOINT(mu,nu,lambda,sigma)*ca(sigma,i)
#
                 DO i1
                    Txixi(mu,i1,lambda,i)  = Txxxi(mu,nu,lambda,i)*ca(nu,i1)
                    Lxixi(mu,i1,lambda,i) += Txixi(mu,i1,lambda,i)
                 ENDDO i1
#
              ENDDO i
#
              DO j
#
                 Txxxj(mu,nu,lambda,j) = AOINT(mu,nu,lambda,sigma)*cb(sigma,j)
#
                 DO j1
                    Txjxj(mu,j1,lambda,j)  = Txxxj(mu,nu,lambda,j)*cb(nu,j1)
                    Lxjxj(mu,j1,lambda,j) += Txjxj(mu,j1,lambda,j)
                 ENDDO j1
#
              ENDDO j
#
              DO j
#
                 Txxxj(mu,nu,lambda,j) = AOINT(mu,nu,lambda,sigma)*cb(sigma,j)
#
                 DO i
                    Txixj(mu,i,lambda,j)  = Txxxj(mu,nu,lambda,j)*ca(nu,i)
                    Lxixj(mu,i,lambda,j) += Txixj(mu,i,lambda,j)
                 ENDDO i
#
              ENDDO j
#
           ENDDO sigma 
           ENDDO nu 
#
           DO i 
           DO i1 
#
              PREPARE Vxixi(mu,i1,lambda,i) = Lxixi(mu,i1,lambda,i) 
#
           ENDDO i1 
           ENDDO i 
#
           DO i 
           DO j 
#
              PREPARE Vxixj(mu,i,lambda,j) = Lxixj(mu,i,lambda,j) 
#
           ENDDO j 
           ENDDO i 
#
           DO j 
           DO j1 
#
              PREPARE Vxjxj(mu,j1,lambda,j) = Lxjxj(mu,j1,lambda,j) 
#
           ENDDO j1 
           ENDDO j 
#
           deallocate Lxixi(mu,*,lambda,*) 
           deallocate Lxixj(mu,*,lambda,*) 
           deallocate Lxjxj(mu,*,lambda,*) 
#
     ENDPARDO mu, lambda
#
     execute sip_barrier
     execute server_barrier
#
#    ------------------------------------------------------------------------
#
     PARDO mu, nu 
#
           allocate Lxxii(mu,nu,*,*) 
           allocate Lxxjj(mu,nu,*,*) 
#
           DO lambda 
           DO sigma 
#
              compute_integrals AOINT(mu,nu,lambda,sigma)
#
              DO i
#
                 Txxxi(mu,nu,lambda,i) = AOINT(mu,nu,lambda,sigma)*ca(sigma,i)
#
                 DO i1
                    Txxii(mu,nu,i1,i)  = Txxxi(mu,nu,lambda,i)*ca(lambda,i1)
                    Lxxii(mu,nu,i1,i) += Txxii(mu,nu,i1,i)
                 ENDDO i1
#
              ENDDO i
#
              DO j
#
                 Txxxj(mu,nu,lambda,j) = AOINT(mu,nu,lambda,sigma)*cb(sigma,j)
#
                 DO j1
                    Txxjj(mu,nu,j1,j)  = Txxxj(mu,nu,lambda,j)*cb(lambda,j1)
                    Lxxjj(mu,nu,j1,j) += Txxjj(mu,nu,j1,j)
                 ENDDO j1
#
              ENDDO j
#
           ENDDO sigma 
           ENDDO lambda 
#
           DO i 
           DO i1 
#
              PREPARE Vxxii(mu,nu,i1,i) = Lxxii(mu,nu,i1,i) 
#
           ENDDO i1 
           ENDDO i 
#
           DO j 
           DO j1 
#
              PREPARE Vxxjj(mu,nu,j1,j) = Lxxjj(mu,nu,j1,j) 
#
           ENDDO j1 
           ENDDO j 
#
           deallocate Lxxii(mu,nu,*,*) 
           deallocate Lxxjj(mu,nu,*,*) 
#
     ENDPARDO mu, nu 
#
     execute sip_barrier
     execute server_barrier
#
#    ------------------------------------------------------------------------
#
     PARDO nu, lambda 
#
           allocate Lixxi(*,nu,lambda,*) 
           allocate Lixxj(*,nu,lambda,*) 
           allocate Ljxxj(*,nu,lambda,*) 
#
           DO mu 
           DO sigma 
#
              compute_integrals AOINT(mu,nu,lambda,sigma)
#
              DO i
#
                 Txxxi(mu,nu,lambda,i) = AOINT(mu,nu,lambda,sigma)*ca(sigma,i)
#
                 DO i1
                    Tixxi(i1,nu,lambda,i)  = Txxxi(mu,nu,lambda,i)*ca(mu,i1)
                    Lixxi(i1,nu,lambda,i) += Tixxi(i1,nu,lambda,i)
                 ENDDO i1
#
              ENDDO i
#
              DO j
#
                 Txxxj(mu,nu,lambda,j) = AOINT(mu,nu,lambda,sigma)*cb(sigma,j)
#
                 DO j1
                    Tjxxj(j1,nu,lambda,j)  = Txxxj(mu,nu,lambda,j)*cb(mu,j1)
                    Ljxxj(j1,nu,lambda,j) += Tjxxj(j1,nu,lambda,j)
                 ENDDO j1
#
              ENDDO j
#
              DO j
#
                 Txxxj(mu,nu,lambda,j) = AOINT(mu,nu,lambda,sigma)*cb(sigma,j)
#
                 DO i
                    Tixxj(i,nu,lambda,j)  = Txxxj(mu,nu,lambda,j)*ca(mu,i)
                    Lixxj(i,nu,lambda,j) += Tixxj(i,nu,lambda,j)
                 ENDDO i
#
              ENDDO j
#
           ENDDO sigma 
           ENDDO mu 
#
           DO i 
           DO i1 
#
              PREPARE Vixxi(i1,nu,lambda,i) = Lixxi(i1,nu,lambda,i) 
#
           ENDDO i1 
           ENDDO i 
#
           DO i 
           DO j 
#
              PREPARE Vixxj(i,nu,lambda,j) = Lixxj(i,nu,lambda,j) 
#
           ENDDO j 
           ENDDO i 
#
           DO j 
           DO j1 
#
              PREPARE Vjxxj(j1,nu,lambda,j) = Ljxxj(j1,nu,lambda,j) 
#
           ENDDO j1 
           ENDDO j 
#
           deallocate Lixxi(*,nu,lambda,*) 
           deallocate Lixxj(*,nu,lambda,*) 
           deallocate Ljxxj(*,nu,lambda,*) 
#
     ENDPARDO nu, lambda 
#
     execute sip_barrier
     execute server_barrier
#
#    ------------------------------------------------------------------------
#
     ENDPROC TRAN_XXII
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
     PROC TRAN_PIPI
#
#    ------------------------------------------------------------------------
#
     execute sip_barrier
#
     PARDO mu, i, i1  
#
           allocate Lxipi(mu,i,*,i1) 
#
           DO nu 
#
              REQUEST Vxixi(mu,i,nu,i1) i 
#
              DO p
                 Txipi(mu,i,p,i1)  = Vxixi(mu,i,nu,i1)*ca(nu,p)
                 Lxipi(mu,i,p,i1) += Txipi(mu,i,p,i1)
              ENDDO p
#
           ENDDO nu 
#
           DO p 
#
              PREPARE Vxipi(mu,i,p,i1) = Lxipi(mu,i,p,i1) 
#
           ENDDO p 
#
           deallocate Lxipi(mu,i,*,i1) 
#
     ENDPARDO mu, i, i1
#
     execute sip_barrier
     execute server_barrier
#    discard Vxixi
#
     PARDO p, i, i1
#
           allocate Lpipi(*,i,p,i1) 
#
           DO mu 
#
              REQUEST Vxipi(mu,i,p,i1) i 
              REQUEST Vxipi(mu,i1,p,i) i 
#
              DO p1
#
                 Tpipi(p1,i,p,i1)   = Vxipi(mu,i,p,i1)*ca(mu,p1)
                 T1pipi(p1,i,p,i1)  = Vxipi(mu,i1,p,i)*ca(mu,p1)
                 Tpipi(p1,i,p,i1)  -= T1pipi(p1,i,p,i1)  
#
                 Lpipi(p1,i,p,i1)  += Tpipi(p1,i,p,i1) 
#
              ENDDO p1
#
           ENDDO mu 
#
           DO p1 
#
              PREPARE VSpipi(p1,i,p,i1) = Lpipi(p1,i,p,i1) 
#
           ENDDO p1 
#
           deallocate Lpipi(*,i,p,i1) 
#
     ENDPARDO p, i, i1
#
     execute sip_barrier
     execute server_barrier
#    DISCARD Vxipi
#
#    ------------------------------------------------------------------------
#
     ENDPROC TRAN_PIPI
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
     PROC TRAN_AAII
#
#    ------------------------------------------------------------------------
#
     execute sip_barrier
#
     PARDO mu, i, i1
#
           allocate Lxaii(mu,*,i,i1) 
#
           DO nu 
#
              REQUEST Vxxii(mu,nu,i,i1) i
#
              DO a
                 Txaii(mu,a,i,i1)  = Vxxii(mu,nu,i,i1)*ca(nu,a)
                 Lxaii(mu,a,i,i1) += Txaii(mu,a,i,i1)
              ENDDO a
#
           ENDDO nu 
#
           DO a 
#
              PREPARE Vxaii(mu,a,i,i1) = Lxaii(mu,a,i,i1) 
#
           ENDDO a 
#
           deallocate Lxaii(mu,*,i,i1) 
#
     ENDPARDO mu, i, i1
#
     execute sip_barrier
     execute server_barrier
#
     PARDO a, i, i1
#
           allocate Laaii(*,a,i,i1) 
#
           DO mu 
#
              REQUEST Vxaii(mu,a,i,i1) i
#
              DO a1
#
                 Taaii(a1,a,i,i1)  = Vxaii(mu,a,i,i1)*ca(mu,a1)
                 Laaii(a1,a,i,i1) += Taaii(a1,a,i,i1)
#
              ENDDO a1
#
           ENDDO mu 
#
           DO a1 
#
              PREPARE Vaaii(a1,a,i,i1) = Laaii(a1,a,i,i1) 
#
           ENDDO a1 
#
           deallocate Laaii(*,a,i,i1) 
#
     ENDPARDO a, i, i1
#
     execute sip_barrier
     execute server_barrier
#    DISCARD Vxaii
#
#    ------------------------------------------------------------------------
#
     ENDPROC TRAN_AAII
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
     PROC TRAN_IAAI
#
#    ------------------------------------------------------------------------
#
     execute sip_barrier
#
     PARDO mu, i, i1
#
           allocate Lixai(i,mu,*,i1) 
#
           DO nu 
#
              REQUEST Vixxi(i,mu,nu,i1) i 
#
              DO a
#
                 Tixai(i,mu,a,i1)  = Vixxi(i,mu,nu,i1)*ca(nu,a)
                 Lixai(i,mu,a,i1) += Tixai(i,mu,a,i1)
#
              ENDDO a
#
           ENDDO nu 
#
           DO a 
#
              PREPARE Vixai(i,mu,a,i1) = Lixai(i,mu,a,i1)
#
           ENDDO a 
#
           deallocate Lixai(i,mu,*,i1) 
#
     ENDPARDO mu, i, i1
#
     execute sip_barrier
     execute server_barrier
#    DISCARD Vixxi
#
     PARDO a, i, i1
#
           allocate Liaai(i,*,a,i1) 
#
           DO mu 
#
              REQUEST Vixai(i,mu,a,i1) i 
#
              DO a1
#
                 Tiaai(i,a1,a,i1)  = Vixai(i,mu,a,i1)*ca(mu,a1)
                 Liaai(i,a1,a,i1) += Tiaai(i,a1,a,i1)
#
              ENDDO a1
#
           ENDDO mu 
#
           DO a1 
#
              PREPARE Viaai(i,a1,a,i1) = Liaai(i,a1,a,i1)
#
           ENDDO a1 
#
           deallocate Liaai(i,*,a,i1) 
#
     ENDPARDO a, i, i1
#
     execute sip_barrier
     execute server_barrier
#    DISCARD Vixai
#
#    ------------------------------------------------------------------------
#
     ENDPROC TRAN_IAAI
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
     PROC TRAN_QJQJ
#
#    ------------------------------------------------------------------------
#
     execute sip_barrier
#
     PARDO mu, j, j1
#
           allocate Lxjqj(mu,j,*,j1) 
#
           DO nu 
#
              REQUEST Vxjxj(mu,j,nu,j1) j 
#
              DO q
#
                 Txjqj(mu,j,q,j1)  = Vxjxj(mu,j,nu,j1)*cb(nu,q)
                 Lxjqj(mu,j,q,j1) += Txjqj(mu,j,q,j1)
#
              ENDDO q
#
           ENDDO nu 
#
           DO q 
#
              PREPARE Vxjqj(mu,j,q,j1) = Lxjqj(mu,j,q,j1)
#
           ENDDO q 
#
           deallocate Lxjqj(mu,j,*,j1) 
#
     ENDPARDO mu, j, j1
#
     execute sip_barrier
     execute server_barrier
#    DISCARD Vxjxj
#
     PARDO q, j, j1
#
           allocate Lqjqj(*,j,q,j1) 
#
           DO mu 
#
              REQUEST Vxjqj(mu,j,q,j1) j 
              REQUEST Vxjqj(mu,j1,q,j) j 
#
              DO q1
#
                 Tqjqj(q1,j,q,j1)   = Vxjqj(mu,j,q,j1)*cb(mu,q1)
                 T1qjqj(q1,j,q,j1)  = Vxjqj(mu,j1,q,j)*cb(mu,q1)
                 Tqjqj(q1,j,q,j1)  -= T1qjqj(q1,j,q,j1) 
                 Lqjqj(q1,j,q,j1)  += Tqjqj(q1,j,q,j1)
#
              ENDDO q1
#
           ENDDO mu 
#
           DO q1 
#
              PREPARE VSqjqj(q1,j,q,j1) = Lqjqj(q1,j,q,j1)
#
           ENDDO q1 
#
           deallocate Lqjqj(*,j,q,j1) 
#
     ENDPARDO q, j, j1
#
     execute sip_barrier
     execute server_barrier
#    DISCARD Vxjqj
#
#    ------------------------------------------------------------------------
#
     ENDPROC TRAN_QJQJ
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
     PROC TRAN_BBJJ
#
#    ------------------------------------------------------------------------
#
     execute sip_barrier
#
     PARDO mu, j, j1
#
           allocate Lxbjj(mu,*,j,j1) 
#
           DO nu 
#
              REQUEST Vxxjj(mu,nu,j,j1) j 
#
              DO b
#
                 Txbjj(mu,b,j,j1)  = Vxxjj(mu,nu,j,j1)*cb(nu,b)
                 Lxbjj(mu,b,j,j1) += Txbjj(mu,b,j,j1)
#
              ENDDO b
#
           ENDDO nu 
#
           DO b 
#
              PREPARE Vxbjj(mu,b,j,j1) = Lxbjj(mu,b,j,j1)
#
           ENDDO b 
#
           deallocate Lxbjj(mu,*,j,j1) 
#
     ENDPARDO mu, j, j1
#
     execute sip_barrier
     execute server_barrier
#
     PARDO b, j, j1
#
           allocate Lbbjj(*,b,j,j1) 
#
           DO mu 
#
              REQUEST Vxbjj(mu,b,j,j1) j 
#
              DO b1
#
                 Tbbjj(b1,b,j,j1)  = Vxbjj(mu,b,j,j1)*cb(mu,b1)
                 Lbbjj(b1,b,j,j1) += Tbbjj(b1,b,j,j1)
#
              ENDDO b1
#
           ENDDO mu 
#
           DO b1
#
              PREPARE Vbbjj(b1,b,j,j1) = Lbbjj(b1,b,j,j1)
#
           ENDDO b1
#
           deallocate Lbbjj(*,b,j,j1) 
#
     ENDPARDO b, j, j1
#
     execute sip_barrier
     execute server_barrier
#    DISCARD Vxbjj
#
#    ------------------------------------------------------------------------
#
     ENDPROC TRAN_BBJJ
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
     PROC TRAN_JBBJ
#
#    ------------------------------------------------------------------------
#
     execute sip_barrier
#
     PARDO mu, j, j1
#
           allocate Ljxbj(j,nu,*,j1) 
#
           DO nu 
#
              REQUEST Vjxxj(j,mu,nu,j1) j 
#
              DO b
#
                 Tjxbj(j,mu,b,j1)  = Vjxxj(j,mu,nu,j1)*cb(nu,b)
                 Ljxbj(j,mu,b,j1) += Tjxbj(j,mu,b,j1)
#
              ENDDO b
#
           ENDDO nu 
#
           DO b
#
              PREPARE Vjxbj(j,mu,b,j1) = Ljxbj(j,mu,b,j1)
#
           ENDDO b
#
           deallocate Ljxbj(j,nu,*,j1) 
#
     ENDPARDO mu, j, j1
#
     execute sip_barrier
     execute server_barrier
#    DISCARD Vjxxj
#
     PARDO b, j, j1
#
           allocate Ljbbj(j,*,b,j1) 
#
           DO mu 
#
              REQUEST Vjxbj(j,mu,b,j1) j 
#
              DO b1
#
                 Tjbbj(j,b1,b,j1)  = Vjxbj(j,mu,b,j1)*cb(mu,b1)
                 Ljbbj(j,b1,b,j1) += Tjbbj(j,b1,b,j1)
#
              ENDDO b1
#
           ENDDO mu 
#
           DO b1
#
              PREPARE Vjbbj(j,b1,b,j1) = Ljbbj(j,b1,b,j1)
#
           ENDDO b1
#
           deallocate Ljbbj(j,*,b,j1) 
#
     ENDPARDO b, j, j1
#
     execute sip_barrier
     execute server_barrier
#    DISCARD Vjxbj
#
#    ------------------------------------------------------------------------
#
     ENDPROC TRAN_JBBJ
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
     PROC TRAN_BBII
#
#    ------------------------------------------------------------------------
#
     execute sip_barrier
#
     PARDO mu, i, i1
#
           allocate Lxbii(mu,*,i,i1) 
#
           DO nu 
#
              REQUEST Vxxii(mu,nu,i,i1) i 
#
              DO b
#
                 Txbii(mu,b,i,i1)  = Vxxii(mu,nu,i,i1)*cb(nu,b)
                 Lxbii(mu,b,i,i1) += Txbii(mu,b,i,i1)
#
              ENDDO b
#
           ENDDO nu 
#
           DO b
#
              PREPARE Vxbii(mu,b,i,i1) = Lxbii(mu,b,i,i1)
#
           ENDDO b
#
           deallocate Lxbii(mu,*,i,i1) 
#
     ENDPARDO mu, i, i1
#
     execute sip_barrier
     execute server_barrier
#    DISCARD Vxxii
#
     PARDO b, i, i1
#
           allocate Lbbii(*,b,i,i1) 
#
           DO mu 
#
              REQUEST Vxbii(mu,b,i,i1) i 
#
              DO b1
#
                 Tbbii(b1,b,i,i1)  = Vxbii(mu,b,i,i1)*cb(mu,b1)
                 Lbbii(b1,b,i,i1) += Tbbii(b1,b,i,i1)
#
              ENDDO b1
#
           ENDDO mu 
#
           DO b1
#
              PREPARE Vbbii(b1,b,i,i1) = Lbbii(b1,b,i,i1)
#
           ENDDO b1
#
           deallocate Lbbii(*,b,i,i1) 
#
     ENDPARDO  b, i, i1
#
     execute sip_barrier
     execute server_barrier
#    DISCARD Vxbii
#
#    ------------------------------------------------------------------------
#
     ENDPROC TRAN_BBII
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
     PROC TRAN_AAJJ
#
#    ------------------------------------------------------------------------
#
     execute sip_barrier
#
     PARDO mu, j, j1
#
           allocate Lxajj(mu,*,j,j1) 
#
           DO nu 
#
              REQUEST Vxxjj(mu,nu,j,j1) j 
#
              DO a
#
                 Txajj(mu,a,j,j1)  = Vxxjj(mu,nu,j,j1)*ca(nu,a)
                 Lxajj(mu,a,j,j1) += Txajj(mu,a,j,j1)
#
              ENDDO a
#
           ENDDO nu 
#
           DO a
#
              PREPARE Vxajj(mu,a,j,j1) = Lxajj(mu,a,j,j1)
#
           ENDDO a
#
           deallocate Lxajj(mu,*,j,j1) 
#
     ENDPARDO mu, j, j1
#
     execute sip_barrier
     execute server_barrier
#    DISCARD Vxxjj
#
     PARDO a, j, j1
#
           allocate Laajj(*,a,j,j1) 
#
           DO mu 
#
              REQUEST Vxajj(mu,a,j,j1) j
#
              DO a1
#
                 Taajj(a1,a,j,j1)  = Vxajj(mu,a,j,j1)*ca(mu,a1)
                 Laajj(a1,a,j,j1) += Taajj(a1,a,j,j1)
#
              ENDDO a1
#
           ENDDO mu 
#
           DO a1
#
              PREPARE Vaajj(a1,a,j,j1) = Laajj(a1,a,j,j1)
#
           ENDDO a1
#
           deallocate Laajj(*,a,j,j1) 
#
     ENDPARDO  a, j, j1
#
     execute sip_barrier
     execute server_barrier
#    DISCARD Vxajj
#
#    ------------------------------------------------------------------------
#
     ENDPROC TRAN_AAJJ
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
     PROC TRAN_IABJ
#
#    ------------------------------------------------------------------------
#
     execute sip_barrier
#
     PARDO mu, i, j
#
           allocate Lixbj(i,mu,*,j) 
#
           DO nu 
#
              REQUEST Vixxj(i,mu,nu,j) i
#
              DO b
#
                 Tixbj(i,mu,b,j)  = Vixxj(i,mu,nu,j)*cb(nu,b)
                 Lixbj(i,mu,b,j) += Tixbj(i,mu,b,j)
#
              ENDDO b
#
           ENDDO nu 
#
           DO b
#
              PREPARE Vixbj(i,mu,b,j) = Lixbj(i,mu,b,j)
#
           ENDDO b
#
           deallocate Lixbj(i,mu,*,j) 
#
     ENDPARDO mu, i, j
#
     execute sip_barrier
     execute server_barrier
#    DISCARD Vixxj
#
     PARDO b, i, j
#
           allocate Liabj(i,*,b,j) 
#
           DO mu 
#
              REQUEST Vixbj(i,mu,b,j) i
#
              DO a
#
                 Tiabj(i,a,b,j)  = Vixbj(i,mu,b,j)*ca(mu,a)
                 Liabj(i,a,b,j) += Tiabj(i,a,b,j)
#
              ENDDO a
#
           ENDDO mu 
#
           DO a
#
              PREPARE Viabj(i,a,b,j) = Liabj(i,a,b,j)
#
           ENDDO a
#
           deallocate Liabj(i,*,b,j) 
#
     ENDPARDO b, i, j
#
     execute sip_barrier
     execute server_barrier
#    DISCARD Vixbj
#
#    ------------------------------------------------------------------------
#
     ENDPROC TRAN_IABJ
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
     PROC TRAN_IIBB
#
#    ------------------------------------------------------------------------
#
     execute sip_barrier
#
     PARDO mu, i, i1
#
           allocate Liixb(i,i1,mu,*) 
#
           DO nu 
#
              REQUEST Viixx(i,i1,mu,nu) i 
#
              DO b
#
                 Tiixb(i,i1,mu,b)  = Viixx(i,i1,mu,nu)*cb(nu,b)
                 Liixb(i,i1,mu,b) += Tiixb(i,i1,mu,b)
#
              ENDDO b
#
           ENDDO nu 
#
           DO b
#
              PREPARE Viixb(i,i1,mu,b) = Liixb(i,i1,mu,b)
#
           ENDDO b
#
           deallocate Liixb(i,i1,mu,*) 
#
     ENDPARDO mu, i, i1
#
     execute sip_barrier
     execute server_barrier
#    DISCARD Viixx
#
     PARDO b, i, i1
#
           allocate Liibb(i,i1,*,b) 
#
           DO mu 
#
              REQUEST Viixb(i,i1,mu,b) i
#
              DO b1
#
                 Tiibb(i,i1,b1,b)  = Viixb(i,i1,mu,b)*cb(mu,b1)
                 Liibb(i,i1,b1,b) += Tiibb(i,i1,b1,b)
#
              ENDDO b1
#
           ENDDO mu 
#
           DO b1
#
              PREPARE Viibb(i,i1,b1,b) = Liibb(i,i1,b1,b)
#
           ENDDO b1
#
           deallocate Liibb(i,i1,*,b) 
#
     ENDPARDO b, i, i1
#
     execute sip_barrier
     execute server_barrier
#    DISCARD Viixb
#
#    ------------------------------------------------------------------------
#
     ENDPROC TRAN_IIBB
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
     PROC TRAN_PIQJ
#
#    ------------------------------------------------------------------------
#
     execute sip_barrier
#
     PARDO mu, i, j
#
           allocate Lxiqj(mu,i,*,j) 
#
           DO nu 
#
              REQUEST Vxixj(mu,i,nu,j) i
#
              DO q
#
                 Txiqj(mu,i,q,j)  = Vxixj(mu,i,nu,j)*cb(nu,q)
                 Lxiqj(mu,i,q,j) += Txiqj(mu,i,q,j)
#
              ENDDO q
#
           ENDDO nu 
#
           DO q
#
              PREPARE Vxiqj(mu,i,q,j) = Lxiqj(mu,i,q,j)
#
           ENDDO q
#
           deallocate Lxiqj(mu,i,*,j) 
#
     ENDPARDO mu, i, j
#
     execute sip_barrier
     execute server_barrier
#    DISCARD Vxixj
#
     PARDO q, i, j
#
           allocate Lpiqj(*,i,q,j) 
#
           DO mu 
#
              REQUEST Vxiqj(mu,i,q,j) i 
#
              DO p
#
                 Tpiqj(p,i,q,j)  = Vxiqj(mu,i,q,j)*ca(mu,p)
                 Lpiqj(p,i,q,j) += Tpiqj(p,i,q,j)
#
              ENDDO p
#
           ENDDO mu 
#
           DO p
#
              PREPARE Vpiqj(p,i,q,j) = Lpiqj(p,i,q,j)
#
           ENDDO p
#
           deallocate Lpiqj(*,i,q,j) 
#
     ENDPARDO q, i, j
#
     execute sip_barrier
     execute server_barrier
#    DISCARD Vxiqj
#
#    ------------------------------------------------------------------------
#
     ENDPROC TRAN_PIQJ
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
     PROC TRAN_PPPP
#
#    ------------------------------------------------------------------------
#
          CALL TRAN_XXII
          CALL TRAN_PIPI
          CALL TRAN_AAII
          CALL TRAN_IAAI
#
          CALL TRAN_QJQJ
          CALL TRAN_BBJJ
          CALL TRAN_JBBJ
#
          CALL TRAN_PIQJ
          CALL TRAN_AAJJ
          CALL TRAN_IABJ
#
          CALL TRAN_BBII
#
#    ------------------------------------------------------------------------
#
     ENDPROC TRAN_PPPP
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
#
#    ------------------------------------------------------------------------ 
#
     PROC IGUESS_UHF  
# 
#    ------------------------------------------------------------------------ 
#
     PARDO a, a1, i, i1 
#
           REQUEST                       VSpipi(a,i,a1,i1) i1  
#
           Taiai(a,i,a1,i1)            = VSpipi(a,i,a1,i1)
           execute energy_denominator    Taiai 
           PREPARE T2old_aa(a,i,a1,i1) = Taiai(a,i,a1,i1)  
           PREPARE D0aiai(a,i,a1,i1)   = Taiai(a,i,a1,i1)  
#
     ENDPARDO a, a1, i, i1  
#
     PARDO b, b1, j, j1 
#
           REQUEST                       VSqjqj(b,j,b1,j1) j1  
#
           Tbjbj(b,j,b1,j1)            = VSqjqj(b,j,b1,j1)  
           execute energy_denominator    Tbjbj 
           PREPARE T2old_bb(b,j,b1,j1) = Tbjbj(b,j,b1,j1)  
           PREPARE D0bjbj(b,j,b1,j1)   = Tbjbj(b,j,b1,j1)  
#
     ENDPARDO b, b1, j, j1 
#
     PARDO a, b, i, j 
#
           REQUEST                     Vpiqj(a,i,b,j) j  
#
           Taibj(a,i,b,j)            = Vpiqj(a,i,b,j)
           execute energy_denominator  Taibj 
           PREPARE T2old_ab(a,i,b,j) = Taibj(a,i,b,j)  
           PREPARE D0aibj(a,i,b,j)   = Taibj(a,i,b,j)  
#
     ENDPARDO a, b, i, j 
#
     PARDO a, i
#
           tai(a,i)         = 0.0
           PUT t1a_old(a,i) = tai(a,i)
           PUT D0ai(a,i)    = tai(a,i)
#
     ENDPARDO a, i
#
     PARDO b, j
#
           tbj(b,j)         = 0.0
           PUT t1b_old(b,j) = tbj(b,j)
           PUT D0bj(b,j)    = tbj(b,j)
#
     ENDPARDO b, j
#
#    ------------------------------------------------------------------------ 
# 
     ENDPROC IGUESS_UHF 
# 
#    ------------------------------------------------------------------------ 
#
# ---------------------------------------------------------------------------- 
#
# In the procedure T1ANEW all contributions to the singles amplitude t1a 
# are computed. 
#
      PROC T1ANEW 
#     -----------
#
      PARDO a, i 
#
            tai(a,i) = 0.0 
#
            DO b 
            DO j 
#
               REQUEST     Viabj(i,a,b,j) j  
               GET         t1b_old(b,j) 
#
               t2ai(a,i) = Viabj(i,a,b,j)*t1b_old(b,j) 
               tai(a,i) += t2ai(a,i) 
#
            ENDDO j 
            ENDDO b 
# 
            DO a1 
#
               DO i1 
#
                  REQUEST             Vaaii(a,a1,i1,i) i  
                  REQUEST             Viaai(i1,a1,a,i) i  
                  GET                 t1a_old(a1,i1) 
#
                  Tpppp(i1,a1,a,i)  = Vaaii(a,a1,i1,i)  
                  Tpppp(i1,a1,a,i) -= Viaai(i1,a1,a,i)  
#
                  t2ai(a,i)         = Tpppp(i1,a1,a,i)*t1a_old(a1,i1) 
                  tai(a,i)         -= t2ai(a,i) 
#
               ENDDO i1 
#
            ENDDO a1 
#
            PUT t1a_new(a,i) += tai(a,i) 
#
      ENDPARDO a, i 
#
      PARDO a1, i1, i2  
#
            allocate L1aiii(a1,i2,*,i1) 
#
            DO i 
#
               REQUEST              VSpipi(a1,i2,i,i1) i1 
               L1aiii(a1,i2,i,i1) = VSpipi(a1,i2,i,i1) 
#
            ENDDO i 
#
            DO a 
#
               REQUEST T2old_aa(a,i1,a1,i2) i1 
# 
               DO i 
#
                  tai(a,i)          = L1aiii(a1,i2,i,i1)*T2old_aa(a,i1,a1,i2) 
                  tai(a,i)         *= -0.5 
#
                  PUT t1a_new(a,i) += tai(a,i) 
#
               ENDDO i 
#
            ENDDO a 
#
            deallocate L1aiii(a1,i2,*,i1) 
#
      ENDPARDO a1, i1, i2  
#
      PARDO b, j, i1  
#
            allocate L1iibj(*,i1,b,j) 
#
            DO i 
#
               REQUEST            Vpiqj(i,i1,b,j) j 
               L1iibj(i,i1,b,j) = Vpiqj(i,i1,b,j) 
#
            ENDDO i 
#
            DO a 
#
               REQUEST T2old_ab(a,i1,b,j) j  
#
               DO i 
#
                  tai(a,i)          = L1iibj(i,i1,b,j)*T2old_ab(a,i1,b,j) 
                  tai(a,i)         *= -1.0 
#
                  PUT t1a_new(a,i) += tai(a,i) 
#
               ENDDO i 
#
            ENDDO a 
#
            deallocate L1iibj(*,i1,b,j) 
#
      ENDPARDO b, j, i1  
#
      ENDPROC T1ANEW 
#     --------------
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
# In the procedure T1BNEW all contributions to the singles amplitude t1a 
# are computed. 
#
      PROC T1BNEW 
#     -----------
#
      PARDO b, j 
#
            tbj(b,j) = 0.0 
#
            DO a 
            DO i 
#
               REQUEST     Viabj(i,a,b,j) j  
               GET         t1a_old(a,i) 
#
               t2bj(b,j) = Viabj(i,a,b,j)*t1a_old(a,i) 
               tbj(b,j) += t2bj(b,j) 
#
            ENDDO i 
            ENDDO a 
# 
            DO b1 
#
               DO j1 
#
                  REQUEST             Vbbjj(b,b1,j1,j) j  
                  REQUEST             Vjbbj(j1,b1,b,j) j  
                  GET                 t1b_old(b1,j1) 
#
                  Tqqqq(j1,b1,b,j)  = Vbbjj(b,b1,j1,j)  
                  Tqqqq(j1,b1,b,j) -= Vjbbj(j1,b1,b,j)  
#
                  t2bj(b,j)         = Tqqqq(j1,b1,b,j)*t1b_old(b1,j1) 
                  tbj(b,j)         -= t2bj(b,j) 
#
               ENDDO j1 
#
            ENDDO b1 
#
            PUT t1b_new(b,j) += tbj(b,j) 
#
      ENDPARDO b, j 
#
      PARDO b1, j1, j2  
#
            allocate L1bjjj(b1,j2,*,j1) 
#
            DO j 
#
               REQUEST              VSqjqj(b1,j2,j,j1) j1 
               L1bjjj(b1,j2,j,j1) = VSqjqj(b1,j2,j,j1) 
#
            ENDDO j 
#
            DO b 
#
               REQUEST T2old_bb(b,j1,b1,j2) j1 
# 
               DO j 
#
                  tbj(b,j)          = L1bjjj(b1,j2,j,j1)*T2old_bb(b,j1,b1,j2) 
                  tbj(b,j)         *= -0.5 
#
                  PUT t1b_new(b,j) += tbj(b,j) 
#
               ENDDO j 
#
            ENDDO b 
#
            deallocate L1bjjj(b1,j2,*,j1) 
#
      ENDPARDO b1, j1, j2  
#
      PARDO a, i, j1  
#
            allocate Ljjai(a,i,*,j1) 
#
            DO j 
#
               REQUEST           Vpiqj(a,i,j,j1) j 
               Ljjai(a,i,j,j1) = Vpiqj(a,i,j,j1) 
#
            ENDDO j 
#
            DO b 
#
               REQUEST T2old_ab(a,i,b,j1) j1  
#
               DO j 
#
                  tbj(b,j)          = Ljjai(a,i,j,j1)*T2old_ab(a,i,b,j1)  
                  tbj(b,j)         *= -1.0 
#
                  PUT t1b_new(b,j) += tbj(b,j) 
#
               ENDDO j 
#
            ENDDO b 
#
            deallocate Ljjai(a,i,*,j1)  
#
      ENDPARDO a, i, j1  
#
      ENDPROC T1BNEW 
#     --------------
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
# 
      PROC WminjAA
#     ------------ 
#
      create Wminj_aa 
      execute sip_barrier 
      PARDO i, i1, i2, i3
#
            REQUEST                    VSpipi(i2,i,i3,i1) i1 
            Tiiii(i2,i,i3,i1)        = VSpipi(i2,i,i3,i1)
            PUT Wminj_aa(i2,i,i3,i1) = Tiiii(i2,i,i3,i1) 
#
      ENDPARDO i, i1, i2, i3
      execute sip_barrier 
#
      PARDO a, i, a1, i1  
#
            IF a == a1 
#
               Taiai(a,i,a1,i1) = 0.0
#
               DO i2 
               DO i3 
#
                  REQUEST             T2old_aa(a,i2,a1,i3) i3 
                  GET                 Wminj_aa(i2,i,i3,i1) 
#
                  T1aiai(a,i,a1,i1) = T2old_aa(a,i2,a1,i3)*Wminj_aa(i2,i,i3,i1)
                  Taiai(a,i,a1,i1) += T1aiai(a,i,a1,i1)  
#
               ENDDO i3  
               ENDDO i2  
#
               Taiai(a,i,a1,i1)            *= 0.5
               PREPARE T2new_aa(a,i,a1,i1) += Taiai(a,i,a1,i1)
#
            ENDIF # a == a1 
#
            IF a < a1 
#
               Taiai(a,i,a1,i1) = 0.0
#
               DO i2 
               DO i3 
#
                  REQUEST             T2old_aa(a,i2,a1,i3) i3 
                  GET                 Wminj_aa(i2,i,i3,i1) 
#
                  T1aiai(a,i,a1,i1) = T2old_aa(a,i2,a1,i3)*Wminj_aa(i2,i,i3,i1)
                  Taiai(a,i,a1,i1) += T1aiai(a,i,a1,i1)  
#
               ENDDO i3  
               ENDDO i2  
#
               Taiai(a,i,a1,i1)            *= 0.5
               T1aiai(a1,i1,a,i)            = Taiai(a,i,a1,i1) 
               PREPARE T2new_aa(a,i,a1,i1) += Taiai(a,i,a1,i1)
               PREPARE T2new_aa(a1,i1,a,i) += T1aiai(a1,i1,a,i)
#
            ENDIF # a < a1 
#
      ENDPARDO a, i, a1, i1  
      execute sip_barrier 
      delete Wminj_aa 
#
      ENDPROC WminjAA
#     --------------- 
#
# ---------------------------------------------------------------------------------------  
# 
# ---------------------------------------------------------------------------------------  
#
      PROC WminjBB 
#     ------------ 
#
      create Wminj_bb 
      execute sip_barrier 
      PARDO j, j1, j2, j3
#
            REQUEST                    VSqjqj(j2,j,j3,j1) j1 
            Tjjjj(j2,j,j3,j1)        = VSqjqj(j2,j,j3,j1)
            PUT Wminj_bb(j2,j,j3,j1) = Tjjjj(j2,j,j3,j1) 
#
      ENDPARDO j, j1, j2, j3
      execute sip_barrier 
#
      PARDO b, j, b1, j1  
#
            IF b < b1 
#
               Tbjbj(b,j,b1,j1) = 0.0
#
               DO j2 
               DO j3 
#
                  REQUEST             T2old_bb(b,j2,b1,j3) j3 
                  GET                 Wminj_bb(j2,j,j3,j1) 
#
                  T1bjbj(b,j,b1,j1) = T2old_bb(b,j2,b1,j3)*Wminj_bb(j2,j,j3,j1)
                  Tbjbj(b,j,b1,j1) += T1bjbj(b,j,b1,j1)  
#
               ENDDO j3  
               ENDDO j2  
#
               Tbjbj(b,j,b1,j1)            *= 0.5
               T1bjbj(b1,j1,b,j)            = Tbjbj(b,j,b1,j1) 
               PREPARE T2new_bb(b,j,b1,j1) += Tbjbj(b,j,b1,j1)
               PREPARE T2new_bb(b1,j1,b,j) += T1bjbj(b1,j1,b,j)
#
            ENDIF # b < b1 
#
            IF b == b1 
#
               Tbjbj(b,j,b1,j1) = 0.0
#
               DO j2 
               DO j3 
#
                  REQUEST             T2old_bb(b,j2,b1,j3) j3 
                  GET                 Wminj_bb(j2,j,j3,j1) 
#
                  T1bjbj(b,j,b1,j1) = T2old_bb(b,j2,b1,j3)*Wminj_bb(j2,j,j3,j1)
                  Tbjbj(b,j,b1,j1) += T1bjbj(b,j,b1,j1)  
#
               ENDDO j3  
               ENDDO j2  
#
               Tbjbj(b,j,b1,j1)            *= 0.5
               PREPARE T2new_bb(b,j,b1,j1) += Tbjbj(b,j,b1,j1)
#
            ENDIF # b == b1 
#
      ENDPARDO b, j, b1, j1  
      execute sip_barrier 
      delete Wminj_bb 
#
      ENDPROC WminjBB 
#     --------------- 
#
# ---------------------------------------------------------------------------------------  
# 
# ---------------------------------------------------------------------------------------  
#
      PROC WminjAB 
#     ------------ 
#
      create Wminj_ab 
      execute sip_barrier 
      PARDO i, i1, j, j1 
#
            REQUEST                   Vpiqj(i1,i,j1,j) j  
            Tiijj(i1,i,j1,j)        = Vpiqj(i1,i,j1,j) 
            PUT Wminj_ab(i1,i,j1,j) = Tiijj(i1,i,j1,j) 
#
      ENDPARDO i, i1, j, j1 
      execute sip_barrier 
#
      PARDO a, b, i, j  
#
            Taibj(a,i,b,j) = 0.0 
#
            DO i1    
            DO j1   
#
               REQUEST           T2old_ab(a,i1,b,j1) j1  
               GET               Wminj_ab(i1,i,j1,j) 
#
               T1aibj(a,i,b,j) = T2old_ab(a,i1,b,j1)*Wminj_ab(i1,i,j1,j)  
               Taibj(a,i,b,j) += T1aibj(a,i,b,j)  
#
            ENDDO j1  
            ENDDO i1   
#
            PREPARE T2new_ab(a,i,b,j) += Taibj(a,i,b,j) 
#
      ENDPARDO a, b, i, j  
      execute sip_barrier 
      delete Wminj_ab 
#
      ENDPROC WminjAB 
#     --------------- 
# 
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
      PROC WMINJ 
#
           CALL WminjAA 
           CALL WminjAB 
           CALL WminjBB 
#
      ENDPROC WMINJ 
# 
# ----------------------------------------------------------------------------
#
# ----------------------------------------------------------------------------
#
# In PROCEDURE T2NEWAA the new amplitudes T2new_aa are computed. Contributions 
# involving large two-particle intermediates are computed in the corresponding  
# procedures where these intermediates(temp) are computed. 
#
# Contributions coming from P_(ij)P_(ab)t^e_i t^a_m <mb||ej> are computed 
# elsewhere. 
#
# ----------------------------------------------------------------------------
#
      PROC T2NEWAA    
#     ------------
#
      PARDO a, i, i1
#
#           allocate arrays containing two-particle contracted arrays 
#           --------------------------------------------------------- 
            allocate Liiai(*,i,a,i1) 
#
#           fill in allocated arrays 
#           ------------------------ 
            DO i2 
# 
               REQUEST            VSpipi(i2,i,a,i1) i1 
               Liiai(i2,i,a,i1) = VSpipi(i2,i,a,i1) 
#
            ENDDO i2 
#
#           Start computation 
#           ----------------- 
            DO a1 
#
               REQUEST              VSpipi(a,i,a1,i1) i1
#
               Taiai(a,i,a1,i1)   = VSpipi(a,i,a1,i1)
               TYaiai(a1,i,a,i1)  = 0.0
#
               DO i2
#
                  GET                  t1a_old(a1,i2)
#
                  T1aiai(a1,i,a,i1)  = Liiai(i2,i,a,i1)*t1a_old(a1,i2)
                  T2aiai(a,i,a1,i1)  = T1aiai(a1,i,a,i1)
#
                  Taiai(a,i,a1,i1)  += T2aiai(a,i,a1,i1)
                  TYaiai(a1,i,a,i1) -= T1aiai(a1,i,a,i1)
#
               ENDDO i2
#
               PREPARE T2NEW_aa(a,i,a1,i1) += Taiai(a,i,a1,i1)
               PREPARE T2NEW_aa(a1,i,a,i1) += TYaiai(a1,i,a,i1)
#
            ENDDO a1 
#
#           remove allocated arrays 
#           ----------------------- 
            deallocate Laiai(a,i,*,i1) 
#
      ENDPARDO a, i, i1
#
      ENDPROC T2NEWAA    
#     ---------------
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# In PROCEDURE T2NEWBB the new amplitudes T2new_bb are computed. Contributions 
# involving large two-particle intermediates are computed in the corresponding  
# procedures where these intermediates(temp) are computed. Thus the 
# intermediate Wminj is stored and its contribution computed here.  
#
# Contributions coming from P_(ij)P_(ab)t^e_i t^a_m <mb||ej> are computed 
# elsewhere. 
#
# The new amplitudes T2new_bb are FIRST updated in this procedure and 
# therefore created ate the begining of the procedure. 
#
      PROC T2NEWBB    
#     ------------
#
      PARDO b, j, j1
#
#           allocate arrays containing two-particle contracted arrays 
#           --------------------------------------------------------- 
            allocate Ljjbj(*,j,b,j1) 
#
#           fill in allocated arrays 
#           ------------------------ 
            DO j2 
# 
               REQUEST            VSqjqj(j2,j,b,j1) j1 
               Ljjbj(j2,j,b,j1) = VSqjqj(j2,j,b,j1) 
#
            ENDDO j2 
#
#           Start computation 
#           ----------------- 
            DO b1 
#
               REQUEST              VSqjqj(b,j,b1,j1) j1
#
               Tbjbj(b,j,b1,j1)   = VSqjqj(b,j,b1,j1)
               TYbjbj(b1,j,b,j1)  = 0.0
#
               DO j2
#
                  GET                  t1b_old(b1,j2)
#
                  T1bjbj(b1,j,b,j1)  = Ljjbj(j2,j,b,j1)*t1b_old(b1,j2)
                  T2bjbj(b,j,b1,j1)  = T1bjbj(b1,j,b,j1)
#
                  Tbjbj(b,j,b1,j1)  += T2bjbj(b,j,b1,j1)
                  TYbjbj(b1,j,b,j1) -= T1bjbj(b1,j,b,j1)
#
               ENDDO j2
#
               PREPARE T2NEW_bb(b,j,b1,j1) += Tbjbj(b,j,b1,j1)
               PREPARE T2NEW_bb(b1,j,b,j1) += TYbjbj(b1,j,b,j1)
#
            ENDDO b1 
#
#           remove allocated arrays 
#           ----------------------- 
            deallocate Ljjbj(*,j,b,j1) 
#
      ENDPARDO b, j, j1
#
      ENDPROC T2NEWBB    
#     ---------------
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# In PROCEDURE T2NEWAB the new amplitudes T2new_ab are computed. Contributions 
# involving large two-particle intermediates are computed in the corresponding  
# procedures where these intermediates(temp) are computed. Thus the 
# intermediate Wminj is stored and its contribution computed here.  
#
# Contributions coming from P_(ij)P_(ab)t^e_i t^a_m <mb||ej> are computed 
# elsewhere. 
#
      PROC T2NEWAB    
#     ------------
#
      PARDO a, i, j 
#
            allocate Laijj(a,i,*,j) 
#
            DO j1 
#
               REQUEST           Vpiqj(a,i,j1,j) j 
               Laijj(a,i,j1,j) = Vpiqj(a,i,j1,j) 
#
            ENDDO j1 
#
            DO b 
#
               REQUEST          Vpiqj(a,i,b,j) j 
               Taibj(a,i,b,j) = Vpiqj(a,i,b,j) 
#
               DO j1 
#
                  GET t1b_old(b,j1) 
#
                  T1aibj(a,i,b,j) = Laijj(a,i,j1,j)*t1b_old(b,j1) 
                  Taibj(a,i,b,j) -= T1aibj(a,i,b,j) 
#
               ENDDO j1 
#
               PREPARE T2NEW_AB(a,i,b,j) += Taibj(a,i,b,j)  
#
            ENDDO b 
#
            deallocate Laijj(a,i,*,j) 
#
      ENDPARDO a, i, j 
#
      PARDO i, b, j 
#
            allocate Liibj(*,i,b,j) 
#
            DO i1 
#
               REQUEST           Vpiqj(i1,i,b,j) j 
               Liibj(i1,i,b,j) = Vpiqj(i1,i,b,j) 
#
            ENDDO i1 
#
            DO a 
#
               Taibj(a,i,b,j) = 0.0  
#
               DO i1 
#
                  GET               t1a_old(a,i1) 
#
                  T1aibj(a,i,b,j) = Liibj(i1,i,b,j)*t1a_old(a,i1) 
                  Taibj(a,i,b,j) -= T1aibj(a,i,b,j) 
#
               ENDDO i1 
#
               PREPARE T2NEW_AB(a,i,b,j) += Taibj(a,i,b,j)  
#
            ENDDO a 
#
            deallocate Liibj(*,i,b,j) 
#
      ENDPARDO i, b, j 
#
      ENDPROC T2NEWAB    
#     ---------------
#
#    ------------------------------------------------------------------------ 
#
# This SUPER procedure contains the procedures WAEBFAA, WAEBFBB, and 
# WAEBFAB which compute the contributions to these intermediates excluding  
# the terms containing the 4-virtual integrals. The intermediates are 
# computed as temporary arrays and used to update the amplitudes as they 
# are formed. The AOLADDER contribution is computed seperately.  
#
#    ------------------------------------------------------------------------ 
#
     PROC AOLADDER
#
#    ------------------------------------------------------------------------
#
#    First create and zero-out intermediate arrays
#    ---------------------------------------------
#
     CREATE TTxi 
     CREATE TTxj 
#
     execute sip_barrier 
#
     PARDO mu, nu, i, i1
           Txixi(mu,i,nu,i1)           = 0.0
           PREPARE TAO_aa(mu,i,nu,i1)  = Txixi(mu,i,nu,i1)
           PREPARE T2AO_aa(mu,i,nu,i1) = Txixi(mu,i,nu,i1)
           PREPARE Gxixi(mu,i,nu,i1)   = Txixi(mu,i,nu,i1)
     ENDPARDO mu, nu, i, i1
#
     PARDO mu, nu, j, j1
           Txjxj(mu,j,nu,j1)           = 0.0
           PREPARE TAO_bb(mu,j,nu,j1)  = Txjxj(mu,j,nu,j1)
           PREPARE T2AO_bb(mu,j,nu,j1) = Txjxj(mu,j,nu,j1)
           PREPARE Gxjxj(mu,j,nu,j1)   = Txjxj(mu,j,nu,j1)
     ENDPARDO mu, nu, j, j1
#
     PARDO mu, nu, i, j
           Txixj(mu,i,nu,j)           = 0.0
           PREPARE TAO_ab(mu,i,nu,j)  = Txixj(mu,i,nu,j)
           PREPARE T2AO_ab(mu,i,nu,j) = Txixj(mu,i,nu,j)
           PREPARE Gxixj(mu,i,nu,j)   = Txixj(mu,i,nu,j)
     ENDPARDO mu, nu, i, j
#
     execute server_barrier
#
#    Form Half back transformed cluster arrays
#    -----------------------------------------
#
     PARDO a1, i1, i
#
           allocate LLaiai(*,i,a1,i1)
#
           DO a
#
              REQUEST              T2old_aa(a, i,a1,i1) i1
              REQUEST              T2old_aa(a,i1,a1,i)  i1
              LLaiai(a,i,a1,i1)  = T2old_aa(a, i,a1,i1)
              Taiai(a,i,a1,i1)   = T2old_aa(a,i1,a1,i)
              LLaiai(a,i,a1,i1) -= Taiai(a,i,a1,i1)
#
           ENDDO a
#
           DO lambda
#
              Zaa(lambda,i,a1,i1) = 0.0
#
              DO a
#
                 Txiai(lambda,i,a1,i1) = LLaiai(a,i,a1,i1)*ca(lambda,a)
                 Zaa(lambda,i,a1,i1)  += Txiai(lambda,i,a1,i1)
#
              ENDDO a
#
              PREPARE T1AO_aa(lambda,i,a1,i1) = Zaa(lambda,i,a1,i1)
#
           ENDDO lambda
#
           deallocate LLaiai(*,i,a1,i1)
#
     ENDPARDO a1, i1, i
#
     PARDO b1, j1, j
#
           allocate LLbjbj(*,j,b1,j1)
#
           DO b
#
              REQUEST              T2old_bb(b, j,b1,j1) j1
              REQUEST              T2old_bb(b,j1,b1,j)  j1
              LLbjbj(b,j,b1,j1)  = T2old_bb(b, j,b1,j1)
              Tbjbj(b,j,b1,j1)   = T2old_bb(b,j1,b1,j)
              LLbjbj(b,j,b1,j1) -= Tbjbj(b,j,b1,j1)
#
           ENDDO b
#
           DO lambda
#
              Zbb(lambda,j,b1,j1) = 0.0
#
              DO b
#
                 Txjbj(lambda,j,b1,j1) = LLbjbj(b,j,b1,j1)*cb(lambda,b)
                 Zbb(lambda,j,b1,j1)  += Txjbj(lambda,j,b1,j1)
#
              ENDDO b
#
              PREPARE T1AO_bb(lambda,j,b1,j1) = Zbb(lambda,j,b1,j1)
#
           ENDDO lambda
#
           deallocate LLbjbj(*,j,b1,j1)
#
     ENDPARDO b1, j1, j
#
     PARDO b, j, i
#
           allocate LLaibj(*,i,b,j)
#
           DO a
#
              REQUEST           T2old_ab(a,i,b,j) j
              LLaibj(a,i,b,j) = T2old_ab(a,i,b,j)
#
           ENDDO a
#
           DO lambda
#
              Zab(lambda,i,b,j) = 0.0
#
              DO a
#
                 Txibj(lambda,i,b,j) = LLaibj(a,i,b,j)*ca(lambda,a)
                 Zab(lambda,i,b,j)  += Txibj(lambda,i,b,j)
#
              ENDDO a
#
              PREPARE T1AO_ab(lambda,i,b,j) = Zab(lambda,i,b,j)
#
           ENDDO lambda
#
           deallocate LLaibj(*,i,b,j)
#
     ENDPARDO b, j, i
#
     execute server_barrier
#
     PARDO lambda, i, i1
#
           allocate Lxiai(lambda,i,*,i1)
#
           DO a1
#
              REQUEST                 T1AO_aa(lambda,i,a1,i1) i1
              Lxiai(lambda,i,a1,i1) = T1AO_aa(lambda,i,a1,i1)
#
           ENDDO a1
#
           DO sigma
#
              ZZaa(lambda,i,sigma,i1)  = 0.0
#
              DO a1
#
                 Txixi(lambda,i,sigma,i1) = Lxiai(lambda,i,a1,i1)*ca(sigma,a1)
                 ZZaa(lambda,i,sigma,i1) += Txixi(lambda,i,sigma,i1)
#
              ENDDO a1
#
              PREPARE TAO_aa(lambda,i,sigma,i1) = ZZaa(lambda,i,sigma,i1)
#
           ENDDO sigma
#
           deallocate Lxiai(lambda,i,*,i1)
#
     ENDPARDO lambda, i, i1
#
     PARDO lambda, j, j1
#
           allocate Lxjbj(lambda,j,*,j1)
#
           DO b1
#
              REQUEST                 T1AO_bb(lambda,j,b1,j1) j1
              Lxjbj(lambda,j,b1,j1) = T1AO_bb(lambda,j,b1,j1)
#
           ENDDO b1
#
           DO sigma
#
              ZZbb(lambda,j,sigma,j1)  = 0.0
#
              DO b1
#
                 Txjxj(lambda,j,sigma,j1) = Lxjbj(lambda,j,b1,j1)*cb(sigma,b1)
                 ZZbb(lambda,j,sigma,j1) += Txjxj(lambda,j,sigma,j1)
#
              ENDDO b1
#
              PREPARE TAO_bb(lambda,j,sigma,j1) = ZZbb(lambda,j,sigma,j1)
#
           ENDDO sigma
#
           deallocate Lxjbj(lambda,j,*,j1)
#
     ENDPARDO lambda, j, j1
#
     PARDO lambda, i, j
#
           allocate Lxibj(lambda,i,*,j)
#
           DO b
#
              REQUEST               T1AO_ab(lambda,i,b,j) j
              Lxibj(lambda,i,b,j) = T1AO_ab(lambda,i,b,j)
#
           ENDDO b
#
           DO sigma
#
              ZZab(lambda,i,sigma,j)  = 0.0
#
              DO b
#
                 Txixj(lambda,i,sigma,j) = Lxibj(lambda,i,b,j)*cb(sigma,b)
                 ZZab(lambda,i,sigma,j) += Txixj(lambda,i,sigma,j)
#
              ENDDO b
#
              PREPARE TAO_ab(lambda,i,sigma,j) = ZZab(lambda,i,sigma,j)
#
           ENDDO sigma
#
           deallocate Lxibj(lambda,i,*,j)
#
     ENDPARDO lambda, i, j
#
#    Construct one-particle intermediates used to remove three-virtual contributions. 
#    --------------------------------------------------------------------------------  
#
     PARDO mu, i 
#
           txp(mu,i) = 0.0 
#
           DO a 
#
              GET          T1a_old(a,i) 
              t1xp(mu,i) = ca(mu,a)*T1a_old(a,i) 
              txp(mu,i) += t1xp(mu,i)  
#
           ENDDO a 
#
           PUT TTxi(mu,i) = txp(mu,i) 
#
     ENDPARDO mu, i 
#
     PARDO mu, j 
#
           txq(mu,j) = 0.0 
#
           DO b 
#
              GET          T1b_old(b,j) 
              t1xq(mu,j) = cb(mu,b)*T1b_old(b,j) 
              txq(mu,j) += t1xq(mu,j)  
#
           ENDDO b 
#
           PUT TTxj(mu,j) = txq(mu,j) 
#
     ENDPARDO mu, j 
#
     execute server_barrier
#
#    Contract AOINT with half back transformed Amplitudes
#    ----------------------------------------------------
#
     PARDO mu, nu
#
           allocate L1xixi(mu,*,nu,*)
           allocate L1xjxj(mu,*,nu,*)
           allocate L1xixj(mu,*,nu,*)
#
           DO lambda
           DO sigma
#
              compute_integrals aoint(lambda,mu,sigma,nu)
#
              IF mu <= nu 
#
                 DO i
                 DO i1
#
                    REQUEST               TAO_aa(lambda,i,sigma,i1) i1
                    Yaa(mu,i,nu,i1)     = aoint(lambda,mu,sigma,nu)*TAO_aa(lambda,i,sigma,i1)
                    Y1aa(nu,i1,mu,i)    = Yaa(mu,i,nu,i1)
                    L1xixi(mu,i,nu,i1) += Yaa(mu,i,nu,i1)
#
                 ENDDO i1
                 ENDDO i
#
                 DO j
                 DO j1
#
                    REQUEST               TAO_bb(lambda,j,sigma,j1) j1
                    Ybb(mu,j,nu,j1)     = aoint(lambda,mu,sigma,nu)*TAO_bb(lambda,j,sigma,j1)
                    Y1bb(nu,j1,mu,j)    = Ybb(mu,j,nu,j1)
                    L1xjxj(mu,j,nu,j1) += Ybb(mu,j,nu,j1)
#
                 ENDDO j1
                 ENDDO j
#
              ENDIF # mu <= nu 
#
              DO i
              DO j
#
                 REQUEST              TAO_ab(lambda,i,sigma,j) j
                 Yab(mu,i,nu,j)     = aoint(lambda,mu,sigma,nu)*TAO_ab(lambda,i,sigma,j)
                 L1xixj(mu,i,nu,j) += Yab(mu,i,nu,j)
#
              ENDDO j
              ENDDO i
#
#             Compute G intermediates needed to remove Vpppi from doubles equations. 
#             ---------------------------------------------------------------------- 
#
              DO i 
#
                 GET                        TTxi(nu,i) 
                 txxxi(lambda,mu,sigma,i) = aoint(lambda,mu,sigma,nu)*TTxi(nu,i) 
#
                 DO i1 
#
                    txixi(lambda,i1,sigma,i)          = txxxi(lambda,mu,sigma,i)*ca(mu,i1) 
                    PREPARE Gxixi(lambda,i1,sigma,i) += txixi(lambda,i1,sigma,i) 
#
                 ENDDO i1 
#
                 DO j 
#
                    txixj(sigma,i,lambda,j)          = txxxi(lambda,mu,sigma,i)*cb(mu,j) 
                    PREPARE Gxixj(sigma,i,lambda,j) += txixj(sigma,i,lambda,j) 
#
                 ENDDO j 
#
              ENDDO i 
#
              DO j 
#
                 GET                        TTxj(nu,j) 
                 txxxj(lambda,mu,sigma,j) = aoint(lambda,mu,sigma,nu)*TTxj(nu,j) 
#
                 DO j1 
#
                    txjxj(lambda,j1,sigma,j)          = txxxj(lambda,mu,sigma,j)*cb(mu,j1) 
                    PREPARE Gxjxj(lambda,j1,sigma,j) += txjxj(lambda,j1,sigma,j) 
#
                 ENDDO j1 
#
                 DO i 
#
                    txixj(lambda,i,sigma,j)          = txxxj(lambda,mu,sigma,j)*ca(mu,i) 
                    PREPARE Gxixj(lambda,i,sigma,j) += txixj(lambda,i,sigma,j) 
#
                 ENDDO i 
#
              ENDDO j 
#
           ENDDO sigma
           ENDDO lambda
#
           IF mu < nu 
#
              DO i
              DO i1
#
                 Txixi(nu,i1,mu,i)            = L1xixi(mu,i,nu,i1) 
                 PREPARE T2AO_aa(mu,i,nu,i1) += L1xixi(mu,i,nu,i1)
                 PREPARE T2AO_aa(nu,i1,mu,i) += Txixi(nu,i1,mu,i)
#
              ENDDO i1
              ENDDO i
#
              DO j
              DO j1
#
                 Txjxj(nu,j1,mu,j)            = L1xjxj(mu,j,nu,j1) 
                 PREPARE T2AO_bb(mu,j,nu,j1) += L1xjxj(mu,j,nu,j1)
                 PREPARE T2AO_bb(nu,j1,mu,j) += Txjxj(nu,j1,mu,j)
#
              ENDDO j1
              ENDDO j
#
           ENDIF # mu < nu 
#
           IF mu == nu 
#
              DO i
              DO i1
#
                 PREPARE T2AO_aa(mu,i,nu,i1) += L1xixi(mu,i,nu,i1)
#
              ENDDO i1
              ENDDO i
#
              DO j
              DO j1
#
                 PREPARE T2AO_bb(mu,j,nu,j1) += L1xjxj(mu,j,nu,j1)
#
              ENDDO j1
              ENDDO j
#
           ENDIF # mu == nu 
#
           DO i
           DO j
#
              PREPARE T2AO_ab(mu,i,nu,j) = L1xixj(mu,i,nu,j)
#
           ENDDO j
           ENDDO i
#
           deallocate L1xixi(mu,*,nu,*)
           deallocate L1xjxj(mu,*,nu,*)
           deallocate L1xixj(mu,*,nu,*)
#
     ENDPARDO  mu, nu
#   
     execute sip_barrier 
     execute server_barrier 
#
     PARDO nu, i, i1 
#
           allocate D1aixi(*,i,nu,i1) 
#
           DO mu 
#
              REQUEST Gxixi(mu,i,nu,i1) i  
#
              DO a
#
                 Taixi(a,i,nu,i1)   = Gxixi(mu,i,nu,i1)*ca(mu,a)   
                 D1aixi(a,i,nu,i1) += Taixi(a,i,nu,i1)  
#
              ENDDO a
#
           ENDDO mu 
#
           DO a 
#
              DO a1 
#
                 Taiai(a,i,a1,i1)             = D1aixi(a,i,nu,i1)*ca(nu,a1) 
                 T1aiai(a,i1,a1,i)            = Taiai(a,i,a1,i1)  
                 T1aiai(a,i1,a1,i)           *= -1.0  
#
                 PREPARE T2new_aa(a,i,a1,i1) += Taiai(a,i,a1,i1) 
                 PREPARE T2new_aa(a,i1,a1,i) += T1aiai(a,i1,a1,i) 
#
              ENDDO a1 
#
           ENDDO a
#
           deallocate D1aixi(*,i,nu,i1) 
#
     ENDPARDO nu, i, i1 
#
     PARDO mu, i, i1 
#
           allocate D2xiai(mu,i,*,i1)  
#
           DO nu 
#
              REQUEST Gxixi(mu,i,nu,i1) i  
#
              DO a
#
                 Txiai(mu,i,a,i1)   = Gxixi(mu,i,nu,i1)*ca(nu,a)   
                 D2xiai(mu,i,a,i1) += Txiai(mu,i,a,i1)  
#
              ENDDO a 
#
           ENDDO nu 
#
           DO a 
#
              DO a1 
#
                 Taiai(a,i,a1,i1)             = D2xiai(mu,i,a,i1)*ca(mu,a1) 
                 Taiai(a,i,a1,i1)            *= -1.0  
#
                 T1aiai(a,i1,a1,i)            = Taiai(a,i,a1,i1)  
                 T1aiai(a,i1,a1,i)           *= -1.0  
#
                 PREPARE T2new_aa(a,i,a1,i1) += Taiai(a,i,a1,i1) 
                 PREPARE T2new_aa(a,i1,a1,i) += T1aiai(a,i1,a1,i) 
#
              ENDDO a1 
#
           ENDDO a
#
           deallocate D2xiai(mu,i,*,i1)  
#
     ENDPARDO mu, i, i1 
#
     PARDO nu, j, j1 
#
           allocate D1bjxj(*,j,nu,j1) 
#
           DO mu 
#
              REQUEST Gxjxj(mu,j,nu,j1) j  
#
              DO b
#
                 Tbjxj(b,j,nu,j1)   = Gxjxj(mu,j,nu,j1)*cb(mu,b)   
                 D1bjxj(b,j,nu,j1) += Tbjxj(b,j,nu,j1)  
#
              ENDDO b
#
           ENDDO mu 
#
           DO b 
#
              DO b1 
#
                 Tbjbj(b,j,b1,j1)             = D1bjxj(b,j,nu,j1)*cb(nu,b1) 
                 T1bjbj(b,j1,b1,j)            = Tbjbj(b,j,b1,j1)  
                 T1bjbj(b,j1,b1,j)           *= -1.0  
#
                 PREPARE T2new_bb(b,j,b1,j1) += Tbjbj(b,j,b1,j1) 
                 PREPARE T2new_bb(b,j1,b1,j) += T1bjbj(b,j1,b1,j) 
#
              ENDDO b1 
#
           ENDDO b
#
           deallocate D1bjxj(*,j,nu,j1) 
#
     ENDPARDO nu, j, j1 
#
     PARDO mu, j, j1 
#
           allocate D2xjbj(mu,j,*,j1)  
#
           DO nu 
#
              REQUEST Gxjxj(mu,j,nu,j1) j  
#
              DO b
#
                 Txjbj(mu,j,b,j1)   = Gxjxj(mu,j,nu,j1)*cb(nu,b)   
                 D2xjbj(mu,j,b,j1) += Txjbj(mu,j,b,j1)  
#
              ENDDO b 
#
           ENDDO nu 
#
           DO b 
#
              DO b1 
#
                 Tbjbj(b,j,b1,j1)             = D2xjbj(mu,j,b,j1)*cb(mu,b1) 
                 Tbjbj(b,j,b1,j1)            *= -1.0  
#
                 T1bjbj(b,j1,b1,j)            = Tbjbj(b,j,b1,j1)  
                 T1bjbj(b,j1,b1,j)           *= -1.0  
#
                 PREPARE T2new_bb(b,j,b1,j1) += Tbjbj(b,j,b1,j1) 
                 PREPARE T2new_bb(b,j1,b1,j) += T1bjbj(b,j1,b1,j) 
#
              ENDDO b1 
#
           ENDDO b
#
           deallocate D2xjbj(mu,j,*,j1)  
#
     ENDPARDO mu, j, j1 
#
     PARDO nu, i, j
#
           allocate Daixj(*,i,nu,j)
#
           DO mu
#
              REQUEST Gxixj(mu,i,nu,j) i 
#
              DO a
#
                 Taixj(a,i,nu,j)  = Gxixj(mu,i,nu,j)*ca(mu,a)   
                 Daixj(a,i,nu,j) += Taixj(a,i,nu,j) 
#
              ENDDO a
#
           ENDDO mu 
#
           DO a 
#
              DO b 
#
                 Taibj(a,i,b,j)             = Daixj(a,i,nu,j)*cb(nu,b) 
                 PREPARE T2new_ab(a,i,b,j) += Taibj(a,i,b,j) 
#
              ENDDO b 
#
           ENDDO a
#
           deallocate Daixj(*,i,nu,j) 
#
     ENDPARDO nu, i, j 
#
     execute server_barrier
     execute sip_barrier 
#
#    Perform final transformation
#    ----------------------------
#
     PARDO a, a1, i, i1
#
           IF a < a1 
#
              T1aiai(a,i,a1,i1) = 0.0
#
              DO nu
#
                 TXaiai(a,i,nu,i1) = 0.0
#
                 DO mu
#
                    REQUEST              T2AO_aa(mu,i,nu,i1) i1
                    Taixi(a,i,nu,i1)   = T2AO_aa(mu,i,nu,i1)*ca(mu,a)
                    TXaiai(a,i,nu,i1) += Taixi(a,i,nu,i1)
#
                 ENDDO mu
#
                 TYaiai(a,i,a1,i1)  = TXaiai(a,i,nu,i1)*ca(nu,a1)
                 TYaiai(a,i,a1,i1) *= 0.5
                 T1aiai(a,i,a1,i1) += TYaiai(a,i,a1,i1)
#
              ENDDO nu
#
              Taiai(a1,i1,a,i)             = T1aiai(a,i,a1,i1) 
              PREPARE T2new_aa(a,i,a1,i1) += T1aiai(a,i,a1,i1)
              PREPARE T2new_aa(a1,i1,a,i) += Taiai(a1,i1,a,i)
#
           ENDIF # a < a1 
#
           IF a == a1 
#
              T1aiai(a,i,a1,i1) = 0.0
#
              DO nu
#
                 TXaiai(a,i,nu,i1) = 0.0
#
                 DO mu
#
                    REQUEST              T2AO_aa(mu,i,nu,i1) i1
                    Taixi(a,i,nu,i1)   = T2AO_aa(mu,i,nu,i1)*ca(mu,a)
                    TXaiai(a,i,nu,i1) += Taixi(a,i,nu,i1)
#
                 ENDDO mu
#
                 TYaiai(a,i,a1,i1)  = TXaiai(a,i,nu,i1)*ca(nu,a1)
                 TYaiai(a,i,a1,i1) *= 0.5
                 T1aiai(a,i,a1,i1) += TYaiai(a,i,a1,i1)
#
              ENDDO nu
#
              PREPARE T2new_aa(a,i,a1,i1) += T1aiai(a,i,a1,i1)
#
           ENDIF # a < a1 
#
     ENDPARDO a, a1, i, i1
#
     PARDO b, b1, j, j1
#
           IF b < b1 
#
              T1bjbj(b,j,b1,j1) = 0.0
#
              DO nu
#
                 TXbjbj(b,j,nu,j1) = 0.0
#
                 DO mu
#
                    REQUEST              T2AO_bb(mu,j,nu,j1) j1
                    Tbjxj(b,j,nu,j1)   = T2AO_bb(mu,j,nu,j1)*cb(mu,b)
                    TXbjbj(b,j,nu,j1) += Tbjxj(b,j,nu,j1)
#
                 ENDDO mu
#
                 TYbjbj(b,j,b1,j1)  = TXbjbj(b,j,nu,j1)*cb(nu,b1)
                 TYbjbj(b,j,b1,j1) *= 0.5
                 T1bjbj(b,j,b1,j1) += TYbjbj(b,j,b1,j1)
#
              ENDDO nu
#
              Tbjbj(b1,j1,b,j)             = T1bjbj(b,j,b1,j1) 
              PREPARE T2new_bb(b,j,b1,j1) += T1bjbj(b,j,b1,j1)
              PREPARE T2new_bb(b1,j1,b,j) += Tbjbj(b1,j1,b,j)
#
           ENDIF # b < b1 
#
           IF b == b1 
#
              T1bjbj(b,j,b1,j1) = 0.0
#
              DO nu
#
                 TXbjbj(b,j,nu,j1) = 0.0
#
                 DO mu
#
                    REQUEST              T2AO_bb(mu,j,nu,j1) j1
                    Tbjxj(b,j,nu,j1)   = T2AO_bb(mu,j,nu,j1)*cb(mu,b)
                    TXbjbj(b,j,nu,j1) += Tbjxj(b,j,nu,j1)
#
                 ENDDO mu
#
                 TYbjbj(b,j,b1,j1)  = TXbjbj(b,j,nu,j1)*cb(nu,b1)
                 TYbjbj(b,j,b1,j1) *= 0.5
                 T1bjbj(b,j,b1,j1) += TYbjbj(b,j,b1,j1)
#
              ENDDO nu
#
              PREPARE T2new_bb(b,j,b1,j1) += T1bjbj(b,j,b1,j1)
#
           ENDIF # b == b1 
#
     ENDPARDO b, b1, j, j1
#
     PARDO a, b, i, j
#
           T1aibj(a,i,b,j) = 0.0
#
           DO nu
#
              TXaibj(a,i,nu,j) = 0.0
#
              DO mu
#
                 REQUEST             T2AO_ab(mu,i,nu,j) j
                 Taixj(a,i,nu,j)   = T2AO_ab(mu,i,nu,j)*ca(mu,a)
                 TXaibj(a,i,nu,j) += Taixj(a,i,nu,j)
#
              ENDDO mu
#
              TYaibj(a,i,b,j)  = TXaibj(a,i,nu,j)*cb(nu,b)
              T1aibj(a,i,b,j) += TYaibj(a,i,b,j)
#
           ENDDO nu
#
           PREPARE T2new_ab(a,i,b,j) += T1aibj(a,i,b,j)
#
     ENDPARDO a, b, i, j
#
#    Compute contribution to t1ai coming from VSaaai. 
#    ------------------------------------------------ 
#
     PARDO mu, a 
#
           DO i 
#
              txp(mu,i) = 0.0 
#
              DO nu 
              DO i1 
#
                 REQUEST      T2AO_aa(mu,i,nu,i1) i  
                 t1xp(mu,i) = T2AO_aa(mu,i,nu,i1)*ca(nu,i1) 
                 txp(mu,i) += t1xp(mu,i)  
#
              ENDDO i1 
              ENDDO nu 
#
              tai(a,i)          = txp(mu,i)*ca(mu,a) 
              tai(a,i)         *= 0.5 
              PUT t1a_new(a,i) += tai(a,i) 
#
           ENDDO i 
#
           DO i 
#
              txp(mu,i) = 0.0 
#
              DO nu 
              DO j 
#
                 REQUEST      T2AO_ab(mu,i,nu,j) i  
                 t1xp(mu,i) = T2AO_ab(mu,i,nu,j)*cb(nu,j) 
                 txp(mu,i) += t1xp(mu,i)  
#
              ENDDO j 
              ENDDO nu 
#
              tai(a,i)          = txp(mu,i)*ca(mu,a) 
              PUT t1a_new(a,i) += tai(a,i) 
#
           ENDDO i 
#
     ENDPARDO mu, a 
#
#    Compute contribution to t1bj coming from VSbbbj.  
#    ------------------------------------------------ 
#
     PARDO mu, b 
#
           DO j 
#
              txq(mu,j) = 0.0 
#
              DO nu 
              DO j1 
#
                 REQUEST      T2AO_bb(mu,j,nu,j1) j  
                 t1xq(mu,j) = T2AO_bb(mu,j,nu,j1)*cb(nu,j1) 
                 txq(mu,j) += t1xq(mu,j)  
#
              ENDDO j1 
              ENDDO nu 
#
              tbj(b,j)          = txq(mu,j)*cb(mu,b) 
              tbj(b,j)         *= 0.5 
              PUT t1b_new(b,j) += tbj(b,j) 
#
           ENDDO j 
#
           DO j 
#
              txq(mu,j) = 0.0 
#
              DO nu 
              DO i 
#
                 REQUEST      T2AO_ab(nu,i,mu,j) j  
                 t1xq(mu,j) = T2AO_ab(nu,i,mu,j)*ca(nu,i) 
                 txq(mu,j) += t1xq(mu,j)  
#
              ENDDO i 
              ENDDO nu 
#
              tbj(b,j)          = txq(mu,j)*cb(mu,b) 
              PUT t1b_new(b,j) += tbj(b,j) 
#
           ENDDO j 
#
     ENDPARDO mu, b 
#
     DELETE TTxi 
     DELETE TTxj 
#
#    ------------------------------------------------------------------------
#
     ENDPROC AOLADDER
#
#    ------------------------------------------------------------------------
#
# --------------------------------------------------------------------------- 
#
# In the procedures WMEBJAA, WMEBJBB, WMEBJAB, and WMEBJBA these  
# intermediates are formed as temporary arrarys. The contribution to the 
# outout arrays is computed directly from these temporary arrays so 
# that the array is never stored.   
#
# --------------------------------------------------------------------------- 
#
      PROC WMEBJAA 
#     ------------
#
      PARDO a, i, a1, i1  
#
            REQUEST                      Viaai(i1,a1,a,i) i  
            REQUEST                      Vaaii(a,a1,i1,i) i  
#
            Taiai(a1,i1,a,i)           = Vaaii(a,a1,i1,i) 
            TYaiai(a1,i1,a,i)          = Viaai(i1,a1,a,i) 
            TYaiai(a1,i1,a,i)         -= Taiai(a1,i1,a,i)  
#
            PREPARE TAUP_aa(a1,i1,a,i) = TYaiai(a1,i1,a,i) 
#
      ENDPARDO a, i, a1, i1  
      execute server_barrier 
#
# Contributions to T2new_aa 
# ------------------------- 
#
      PARDO a, i, a2, i2  
#
            R1aiai(a2,i2,a,i) = 0.0 
#
            DO i1 
            DO a1 
#
               REQUEST              TAUP_aa(a1,i1,a,i)    i1 
               REQUEST              T2old_aa(a2,i2,a1,i1) i1  
#
               R2aiai(a2,i2,a,i)  = T2old_aa(a2,i2,a1,i1)*TAUP_aa(a1,i1,a,i) 
               R1aiai(a2,i2,a,i) += R2aiai(a2,i2,a,i) 
#
            ENDDO a1 
            ENDDO i1 
#
            R2aiai(a2,i,a,i2)            = R1aiai(a2,i2,a,i) 
            R2aiai(a2,i,a,i2)           *= -1.0  
            R3aiai(a,i2,a2,i)            = R2aiai(a2,i,a,i2)  
            R4aiai(a,i,a2,i2)            = R1aiai(a2,i2,a,i) 
#
            PREPARE T2new_aa(a2,i2,a,i) += R1aiai(a2,i2,a,i) 
            PREPARE T2new_aa(a2,i,a,i2) += R2aiai(a2,i,a,i2) 
            PREPARE T2new_aa(a,i2,a2,i) += R3aiai(a,i2,a2,i) 
            PREPARE T2new_aa(a,i,a2,i2) += R4aiai(a,i,a2,i2) 
#
      ENDPARDO a, i, a2, i2  
#
# Contributions to T2new_ab 
# ------------------------- 
#
      PARDO a, i, b, j 
#
            R1aibj(a,i,b,j) = 0.0 
#
            DO a1  
            DO i1  
#
               REQUEST            T2old_ab(a1,i1,b,j) j  
               REQUEST            TAUP_aa(a1,i1,a,i)  i 
#
               R2aibj(a,i,b,j)  = TAUP_aa(a1,i1,a,i)*T2old_ab(a1,i1,b,j) 
               R1aibj(a,i,b,j) += R2aibj(a,i,b,j)  
#
            ENDDO i1  
            ENDDO a1  
#
            PREPARE T2new_ab(a,i,b,j) += R1aibj(a,i,b,j)
#
      ENDPARDO a, i, b, j  
#
      ENDPROC WMEBJAA 
#     ---------------
#
# --------------------------------------------------------------------------- 
#
# --------------------------------------------------------------------------- 
#
      PROC WMEBJBB 
#     ------------
#
      PARDO j1, b1, b, j 
#
            REQUEST                      Vjbbj(j1,b1,b,j) j  
            REQUEST                      Vbbjj(b,b1,j1,j) j  
#
            Tbjbj(b1,j1,b,j)           = Vbbjj(b,b1,j1,j) 
            TYbjbj(b1,j1,b,j)          = Vjbbj(j1,b1,b,j) 
            TYbjbj(b1,j1,b,j)         -= Tbjbj(b1,j1,b,j)  
#
            PREPARE TAUP_bb(b1,j1,b,j) = TYbjbj(b1,j1,b,j) 
#
      ENDPARDO j1, b1, b, j 
      execute server_barrier 
#
# Contributions to T2new_bb 
# ------------------------- 
#
      PARDO j2, b2, b, j 
#
            R1bjbj(b2,j2,b,j) = 0.0 
#
            DO j1 
            DO b1 
#
               REQUEST              T2old_bb(b2,j2,b1,j1) j1  
               REQUEST              TAUP_bb(b1,j1,b,j)    j1  
#
               R2bjbj(b2,j2,b,j)  = T2old_bb(b2,j2,b1,j1)*TAUP_bb(b1,j1,b,j) 
               R1bjbj(b2,j2,b,j) += R2bjbj(b2,j2,b,j)  
#
            ENDDO b1
            ENDDO j1 
#
            R2bjbj(b2,j,b,j2)            = R1bjbj(b2,j2,b,j) 
            R2bjbj(b2,j,b,j2)           *= -1.0  
            R3bjbj(b,j2,b2,j)            = R1bjbj(b2,j2,b,j) 
            R3bjbj(b,j2,b2,j)           *= -1.0  
            R4bjbj(b,j,b2,j2)            = R1bjbj(b2,j2,b,j) 
#
            PREPARE T2new_bb(b2,j2,b,j) += R1bjbj(b2,j2,b,j) 
            PREPARE T2new_bb(b2,j,b,j2) += R2bjbj(b2,j,b,j2) 
            PREPARE T2new_bb(b,j2,b2,j) += R3bjbj(b,j2,b2,j) 
            PREPARE T2new_bb(b,j,b2,j2) += R4bjbj(b,j,b2,j2) 
#
      ENDPARDO j2, b2, b, j 
#
# Contributions to T2new_ab 
# ------------------------- 
#
      PARDO a, i, b, j 
#
            R1aibj(a,i,b,j) = 0.0 
#
            DO b1  
            DO j1  
#
               REQUEST            T2old_ab(a,i,b1,j1) j1  
               REQUEST            TAUP_bb(b1,j1,b,j)  j1  
#
               R2aibj(a,i,b,j)  = T2old_ab(a,i,b1,j1)*TAUP_bb(b1,j1,b,j) 
               R1aibj(a,i,b,j) += R2aibj(a,i,b,j)  
#
            ENDDO j1  
            ENDDO b1  
#
            PREPARE T2new_ab(a,i,b,j) += R1aibj(a,i,b,j)
#
      ENDPARDO a, i, b, j 
#
      ENDPROC WMEBJBB 
#     ---------------
#
# --------------------------------------------------------------------------- 
#
      PROC WMEBJAB 
#     ------------
#
# Contribution to T2new_bb 
# ------------------------ 
#
      PARDO b, j, b1, j1  
#
            R1bjbj(b1,j1,b,j) = 0.0 
#
            DO a 
            DO i 
#
               REQUEST T2old_ab(a,i,b1,j1) j1  
               REQUEST Viabj(i,a,b,j)      j  
#
               R2bjbj(b1,j1,b,j)  = T2old_ab(a,i,b1,j1)*Viabj(i,a,b,j) 
               R1bjbj(b1,j1,b,j) += R2bjbj(b1,j1,b,j)  
#
            ENDDO i 
            ENDDO a 
#
            R2bjbj(b1,j,b,j1) = R1bjbj(b1,j1,b,j) 
            R2bjbj(b1,j,b,j1)*= -1.0  
            R3bjbj(b,j1,b1,j) = R1bjbj(b1,j1,b,j) 
            R3bjbj(b,j1,b1,j)*= -1.0  
            R4bjbj(b,j,b1,j1) = R1bjbj(b1,j1,b,j) 
#
            PREPARE T2new_bb(b1,j1,b,j) += R1bjbj(b1,j1,b,j) 
            PREPARE T2new_bb(b1,j,b,j1) += R2bjbj(b1,j,b,j1) 
            PREPARE T2new_bb(b,j1,b1,j) += R3bjbj(b,j1,b1,j) 
            PREPARE T2new_bb(b,j,b1,j1) += R4bjbj(b,j,b1,j1) 
#
      ENDPARDO b, j, b1, j1  
#
# Contribution to T2new_ab 
# ------------------------ 
#
      PARDO i1, a1, b, j 
#
            R1aibj(a1,i1,b,j) = 0.0 
#
            DO i 
            DO a 
#
               REQUEST T2old_aa(a1,i1,a,i) i 
               REQUEST Viabj(i,a,b,j)    j  
#
               R2aibj(a1,i1,b,j)  = T2old_aa(a1,i1,a,i)*Viabj(i,a,b,j)  
               R1aibj(a1,i1,b,j) += R2aibj(a1,i1,b,j)  
#
            ENDDO a 
            ENDDO i 
#
            PREPARE T2new_ab(a1,i1,b,j) += R1aibj(a1,i1,b,j) 
#
      ENDPARDO i1, a1, b, j 
#
      ENDPROC WMEBJAB 
#     ---------------
#
# --------------------------------------------------------------------------- 
#
      PROC WMEBJBA  
#     ------------
#
# Contribution to T2new_aa 
# ------------------------ 
#
      PARDO a, i, a1, i1  
#
            R1aiai(a1,i1,a,i) = 0.0 
#
            DO b 
            DO j 
#
               REQUEST              T2old_ab(a1,i1,b,j) j  
               REQUEST              Viabj(i,a,b,j)      j  
               taibj(a,i,b,j)     = Viabj(i,a,b,j) 
#
               R2aiai(a1,i1,a,i)  = T2old_ab(a1,i1,b,j)*taibj(a,i,b,j) 
               R1aiai(a1,i1,a,i) += R2aiai(a1,i1,a,i)  
#
            ENDDO j 
            ENDDO b 
# 
            R2aiai(a1,i,a,i1)            =  R1aiai(a1,i1,a,i) 
            R2aiai(a1,i,a,i1)           *= -1.0  
            R3aiai(a,i1,a1,i)            =  R1aiai(a1,i1,a,i) 
            R3aiai(a,i1,a1,i)           *= -1.0  
            R4aiai(a,i,a1,i1)            =  R1aiai(a1,i1,a,i) 
#
            PREPARE T2new_aa(a1,i1,a,i) += R1aiai(a1,i1,a,i) 
            PREPARE T2new_aa(a1,i,a,i1) += R2aiai(a1,i,a,i1) 
            PREPARE T2new_aa(a,i1,a1,i) += R3aiai(a,i1,a1,i) 
            PREPARE T2new_aa(a,i,a1,i1) += R4aiai(a,i,a1,i1) 
#
      ENDPARDO a, i, a1, i1  
#
# Contribution to T2new_ab 
# ------------------------ 
#
      PARDO a, i, b1, j1  
#
            R1aibj(a,i,b1,j1) = 0.0 
#
            DO j 
            DO b 
#
               REQUEST              T2old_bb(b1,j1,b,j) j 
               REQUEST              Viabj(i,a,b,j)      j  
#
               R2aibj(a,i,b1,j1)  = T2old_bb(b1,j1,b,j)*Viabj(i,a,b,j)  
               R1aibj(a,i,b1,j1) += R2aibj(a,i,b1,j1)  
#
            ENDDO b 
            ENDDO j 
#
            PREPARE T2new_ab(a,i,b1,j1) += R1aibj(a,i,b1,j1) 
#
      ENDPARDO a, i, b1, j1  
#
      ENDPROC WMEBJBA  
#     ---------------
#
# -------------------------------------------------------------------------------  
#
# Compute contributions from 'Wmjbe'. This needs to be checked 
#
      PROC WMJBEab
#     -------------
#
#  Calculate contribution to the amplitudes 
#  ----------------------------------------  
#
      PARDO a, i, b, j  
#
            Taibj(a,i,b,j) = 0.0 
#
            DO i1  
            DO b1  
#
               REQUEST            T2old_ab(a,i1,b1,j) j  
               REQUEST            Vbbii(b,b1,i1,i)    i 
#
               T1aibj(a,i,b,j)  = T2old_ab(a,i1,b1,j)*Vbbii(b,b1,i1,i) 
               Taibj(a,i,b,j)  -= T1aibj(a,i,b,j)  
#
            ENDDO b1   
            ENDDO i1   
#
            PREPARE T2new_ab(a,i,b,j) += Taibj(a,i,b,j) 
#
      ENDPARDO a, i, b, j  
#
      ENDPROC WMJBEab
#     ---------------
#
      PROC WMJBEba
#     -------------
#
#  Calculate contribution to the amplitudes 
#  ----------------------------------------  
#
      PARDO a, i, b, j  
#
            Taibj(a,i,b,j) = 0.0 
#
            DO a1  
            DO j1  
#
               REQUEST T2old_ab(a1,i,b,j1) j1  
               REQUEST Vaajj(a,a1,j1,j)    j1  
#
               T1aibj(a,i,b,j) = Vaajj(a,a1,j1,j)*T2old_ab(a1,i,b,j1) 
               Taibj(a,i,b,j) -= T1aibj(a,i,b,j)  
#
            ENDDO j1   
            ENDDO a1  
#
            PREPARE T2new_ab(a,i,b,j) += Taibj(a,i,b,j) 
#
      ENDPARDO a, i, b, j  
#
      ENDPROC WMJBEba
#     ---------------
#
# -------------------------------------------------------------------------------  
#
      PROC WMEBJ 
#     ---------- 
# 
           CALL WMEBJAA
           CALL WMEBJBB
           CALL WMEBJAB
           CALL WMEBJBA
           CALL WMJBEab
           CALL WMJBEba 
#
      ENDPROC WMEBJ 
#     ------------- 
#
# -------------------------------------------------------------------------------  
#
     PROC ENERGY_NEW 
#    --------------- 
#
     esum    = 0.0 
     ecorraa = 0.0 
     PARDO a, a1, i, i1 
#
           REQUEST              VSpipi(a,i,a1,i1) i1  
           REQUEST              T2old_aa(a,i,a1,i1) i1  
#
           GET                  t1a_old(a1,i1) 
           GET                  t1a_old(a1,i) 
           GET                  t1a_old(a,i1) 
           GET                  t1a_old(a,i) 
#
           tai(a1,i1)         = t1a_old(a1,i1) 
           T2aiai(a,i,a1,i1)  = t1a_old(a,i)^tai(a1,i1)
           tai(a,i1)          = t1a_old(a,i1) 
           T3aiai(a,i,a1,i1)  = t1a_old(a1,i)^tai(a,i1)
           T2aiai(a,i,a1,i1) -= T3aiai(a,i,a1,i1)
           T2aiai(a,i,a1,i1) += T2old_aa(a,i,a1,i1)
#
           etemp              = VSpipi(a,i,a1,i1)*T2old_aa(a,i,a1,i1) 
           etemp              = 0.25*etemp 
           esum              += etemp 
#
     ENDPARDO a, a1, i, i1  
#
     execute sip_barrier 
     collective ecorraa += esum 
     execute sip_barrier 
     execute print_scalar ecorraa 
#
     ecorrbb = 0.0 
     esum    = 0.0 
     PARDO b, b1, j, j1 
#
           REQUEST              VSqjqj(b,j,b1,j1) j1  
           REQUEST              T2old_bb(b,j,b1,j1) j1  
#
           GET                  t1b_old(b1,j1) 
           GET                  t1b_old(b1,j) 
           GET                  t1b_old(b,j1) 
           GET                  t1b_old(b,j) 
#
           tbj(b1,j1)         = t1b_old(b1,j1) 
           T2bjbj(b,j,b1,j1)  = t1b_old(b,j)^tbj(b1,j1)
           tbj(b,j1)          = t1b_old(b,j1) 
           T3bjbj(b,j,b1,j1)  = t1b_old(b1,j)^tbj(b,j1)
           T2bjbj(b,j,b1,j1) -= T3bjbj(b,j,b1,j1)
           T2bjbj(b,j,b1,j1) += T2old_bb(b,j,b1,j1)
#
           etemp              = VSqjqj(b,j,b1,j1)*T2old_bb(b,j,b1,j1) 
           etemp              = 0.25*etemp 
           esum              += etemp 
#
     ENDPARDO b, b1, j, j1 
     execute sip_barrier 
     collective ecorrbb += esum 
     execute sip_barrier 
     execute print_scalar ecorrbb 
#
     ecorrab = 0.0 
     esum    = 0.0 
     PARDO a, b, i, j 
#
           REQUEST           Vpiqj(a,i,b,j) j  
           REQUEST           T2old_ab(a,i,b,j) j  
           GET               t1a_old(a,i) 
           GET               t1b_old(b,j) 
#
           Taibj(a,i,b,j)  = t1a_old(a,i)^t1b_old(b,j) 
           Taibj(a,i,b,j) += T2old_ab(a,i,b,j)  
#
           etemp           = T2old_ab(a,i,b,j)*Vpiqj(a,i,b,j) 
           esum           += etemp 
#
     ENDPARDO a, b, i, j 
     execute sip_barrier 
     collective ecorrab += esum 
     execute sip_barrier 
     execute print_scalar ecorrab 
#
     ecorrT             = ecorraa 
     ecorrT            += ecorrbb 
     ecorrT            += ecorrab 
     execute print_scalar ecorrT  
# 
#    ------------------------------------------------------------------------ 
# 
     ENDPROC ENERGY_NEW 
# 
#    ------------------------------------------------------------------------ 
# 
     PROC T2NEW_ZERO
#    --------------- 
#
#     Zero out new 1-particle amplitude arrays 
#     ---------------------------------------- 
#
          PARDO a, i 
                tai(a,i)         = 0.0 
                PUT t1a_new(a,i) = tai(a,i) 
          ENDPARDO a, i 
#
          PARDO b, j 
                tbj(b,j)         = 0.0 
                PUT t1b_new(b,j) = tbj(b,j) 
          ENDPARDO b, j 
#
#     Zero out new 2-particle amplitude arrays 
#     ---------------------------------------- 
#
          PARDO a, a1, i, i1 
                Taiai(a,i,a1,i1)            = 0.0
                PREPARE T2new_aa(a,i,a1,i1) = Taiai(a,i,a1,i1) 
          ENDPARDO a, a1, i, i1 
#
          PARDO b, b1, j, j1 
                Tbjbj(b,j,b1,j1)            = 0.0
                PREPARE T2new_bb(b,j,b1,j1) = Tbjbj(b,j,b1,j1) 
          ENDPARDO b, b1, j, j1 
#
          PARDO a, b, i, j 
                Taibj(a,i,b,j)            = 0.0
                PREPARE T2new_ab(a,i,b,j) = Taibj(a,i,b,j) 
          ENDPARDO a, b, i, j 
# 
     ENDPROC T2NEW_ZERO
# 
#    ------------------------------------------------------------------------ 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
      PROC UPDATET2 
#     ------------- 
#
      PARDO a, a1, i, i1 
#
            REQUEST                    T2old_aa(a,i,a1,i1) a
            REQUEST                    T2new_aa(a,i,a1,i1) a
            Taiai(a,i,a1,i1)         = T2new_aa(a,i,a1,i1)
            T1aiai(a,i,a1,i1)        = T2old_aa(a,i,a1,i1)
            execute energy_denominator Taiai
            t1aiai(a,i,a1,i1)       -= taiai(a,i,a1,i1)
            t1aiai(a,i,a1,i1)       *= -1.0
#
            if kiter == 1
               PREPARE e1aiai(a,i,a1,i1) = T1aiai(a,i,a1,i1)
            endif
#
            if kiter == 2
               PREPARE e2aiai(a,i,a1,i1) = T1aiai(a,i,a1,i1)
            endif
#
            if kiter == 3
               PREPARE e3aiai(a,i,a1,i1) = T1aiai(a,i,a1,i1)
            endif
#
            if kiter == 4
               PREPARE e4aiai(a,i,a1,i1) = T1aiai(a,i,a1,i1)
            endif
#
            if kiter >= 5
               PREPARE e5aiai(a,i,a1,i1) = T1aiai(a,i,a1,i1)
            endif
#
      ENDPARDO a, a1, i, i1
      execute server_barrier 
#
      PARDO a, a1, i, i1
#
            REQUEST                       T2new_aa(a,i,a1,i1) a 
            Taiai(a,i,a1,i1)            = T2new_aa(a,i,a1,i1)
            execute energy_denominator    Taiai
            PREPARE T2old_aa(a,i,a1,i1) = Taiai(a,i,a1,i1)
#
      ENDPARDO a, a1, i, i1
#
      PARDO b, b1, j, j1
#
            REQUEST                    T2old_bb(b,j,b1,j1) b 
            REQUEST                    T2new_bb(b,j,b1,j1) b 
            Tbjbj(b,j,b1,j1)         = T2new_bb(b,j,b1,j1)
            T1bjbj(b,j,b1,j1)        = T2old_bb(b,j,b1,j1)
            execute energy_denominator Tbjbj
            T1bjbj(b,j,b1,j1)       -= tbjbj(b,j,b1,j1)
            T1bjbj(b,j,b1,j1)       *= -1.0
#
            if kiter == 1
               PREPARE e1bjbj(b,j,b1,j1) = T1bjbj(b,j,b1,j1)
            endif
#
            if kiter == 2
               PREPARE e2bjbj(b,j,b1,j1) = T1bjbj(b,j,b1,j1)
            endif
#
            if kiter == 3
               PREPARE e3bjbj(b,j,b1,j1) = T1bjbj(b,j,b1,j1)
            endif
#
            if kiter == 4
               PREPARE e4bjbj(b,j,b1,j1) = T1bjbj(b,j,b1,j1)
            endif
#
            if kiter >= 5
               PREPARE e5bjbj(b,j,b1,j1) = T1bjbj(b,j,b1,j1)
            endif
#
      ENDPARDO b, b1, j, j1
      execute server_barrier 
#
      PARDO b, b1, j, j1
#
            REQUEST                       T2new_bb(b,j,b1,j1) b 
            Tbjbj(b,j,b1,j1)            = T2new_bb(b,j,b1,j1)
            execute energy_denominator    Tbjbj
            PREPARE T2old_bb(b,j,b1,j1) = Tbjbj(b,j,b1,j1)
#
      ENDPARDO b, b1, j, j1
#
      PARDO b, a, j, i
#
            REQUEST                    T2old_ab(a,i,b,j) b 
            REQUEST                    T2new_ab(a,i,b,j) b 
            Taibj(a,i,b,j)           = T2new_ab(a,i,b,j)
            T1aibj(a,i,b,j)          = T2old_ab(a,i,b,j)
            execute energy_denominator Taibj
            T1aibj(a,i,b,j)         -= Taibj(a,i,b,j)
            T1aibj(a,i,b,j)         *= -1.0
#
            if kiter == 1
               PREPARE e1aibj(a,i,b,j) = T1aibj(a,i,b,j)
            endif
#
            if kiter == 2
               PREPARE e2aibj(a,i,b,j) = T1aibj(a,i,b,j)
            endif
#
            if kiter == 3
               PREPARE e3aibj(a,i,b,j) = T1aibj(a,i,b,j)
            endif
#
            if kiter == 4
               PREPARE e4aibj(a,i,b,j) = T1aibj(a,i,b,j)
            endif
#
            if kiter >= 5
               PREPARE e5aibj(a,i,b,j) = T1aibj(a,i,b,j)
            endif
#
      ENDPARDO b, a, j, i
      execute server_barrier 
#
      PARDO b, a, j, i
#
            REQUEST                     T2new_ab(a,i,b,j) a
            Taibj(a,i,b,j)            = T2new_ab(a,i,b,j)
            execute energy_denominator  Taibj
            PREPARE T2old_ab(a,i,b,j) = Taibj(a,i,b,j)
#
      ENDPARDO b, a, j, i
#
      ENDPROC UPDATET2 
#     ----------------  
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
      PROC UPDATET1 
#     ------------- 
#
      PARDO a, i 
#
            GET                        t1a_new(a,i) 
            GET                        t1a_old(a,i) 
            tai(a,i)                 = t1a_new(a,i) 
            t1ai(a,i)                = t1a_old(a,i) 
            execute energy_denominator tai 
            PUT t1a_old(a,i)         = tai(a,i) 
            tai(a,i)                -= t1ai(a,i) 
#
            if kiter == 1 
               PUT e1ai(a,i) = Tai(a,i) 
            endif 
#
            if kiter == 2 
               PUT e2ai(a,i) = Tai(a,i) 
            endif 
#
            if kiter == 3 
               PUT e3ai(a,i) = Tai(a,i) 
            endif 
#
            if kiter == 4 
               PUT e4ai(a,i) = Tai(a,i) 
            endif 
#
            if kiter >= 5 
               PUT e5ai(a,i) = Tai(a,i) 
            endif 
#
      ENDPARDO a, i 
      execute sip_barrier 
#
      PARDO b, j 
#
            GET                        t1b_new(b,j) 
            GET                        t1b_old(b,j) 
            tbj(b,j)                 = t1b_new(b,j) 
            t1bj(b,j)                = t1b_old(b,j) 
            execute energy_denominator tbj
            PUT t1b_old(b,j)         = tbj(b,j) 
            tbj(b,j)                -= t1bj(b,j) 
#
            if kiter == 1 
               PUT e1bj(b,j) = Tbj(b,j) 
            endif 
#
            if kiter == 2 
               PUT e2bj(b,j) = Tbj(b,j) 
            endif 
#
            if kiter == 3 
               PUT e3bj(b,j) = Tbj(b,j) 
            endif 
#
            if kiter == 4 
               PUT e4bj(b,j) = Tbj(b,j) 
            endif 
#
            if kiter >= 5 
               PUT e5bj(b,j) = Tbj(b,j) 
            endif 
#
      ENDPARDO b, j 
      execute sip_barrier 
#
      ENDPROC UPDATET1 
#     ----------------  
#
      PROC MOVET2
#     ------------
#
      PARDO a, a1, i, i1
#
            REQUEST            T2old_aa(a,i,a1,i1) a 
            taiai(a,i,a1,i1) = T2old_aa(a,i,a1,i1)
#
            if kiter == 1
               PREPARE d1aiai(a,i,a1,i1) = taiai(a,i,a1,i1)
            endif
#
            if kiter == 2
               PREPARE d2aiai(a,i,a1,i1) = Taiai(a,i,a1,i1)
            endif
#
            if kiter == 3
               PREPARE d3aiai(a,i,a1,i1) = Taiai(a,i,a1,i1)
            endif
#
            if kiter == 4
               PREPARE d4aiai(a,i,a1,i1) = Taiai(a,i,a1,i1)
            endif
#
            if kiter >= 5
               PREPARE d4aiai(a,i,a1,i1) = Taiai(a,i,a1,i1)
            endif
#
      ENDPARDO a, a1, i, i1
#
      PARDO b, b1, j, j1
#
            REQUEST            T2old_bb(b,j,b1,j1) b 
            Tbjbj(b,j,b1,j1) = T2old_bb(b,j,b1,j1)
#
            if kiter == 1
               PREPARE d1bjbj(b,j,b1,j1) = Tbjbj(b,j,b1,j1)
            endif
#
            if kiter == 2
               PREPARE d2bjbj(b,j,b1,j1) = Tbjbj(b,j,b1,j1)
            endif
#
            if kiter == 3
               PREPARE d3bjbj(b,j,b1,j1) = Tbjbj(b,j,b1,j1)
            endif
#
            if kiter == 4
               PREPARE d4bjbj(b,j,b1,j1) = Tbjbj(b,j,b1,j1)
            endif
#
            if kiter >= 5
               PREPARE d4bjbj(b,j,b1,j1) = Tbjbj(b,j,b1,j1)
            endif
#
      ENDPARDO b, b1, j, j1
#
      PARDO b, a, j, i
#
            REQUEST                    T2old_ab(a,i,b,j) a 
            Taibj(a,i,b,j)           = T2old_ab(a,i,b,j)
#
            if kiter == 1
               PREPARE d1aibj(a,i,b,j) = Taibj(a,i,b,j)
            endif
#
            if kiter == 2
               PREPARE d2aibj(a,i,b,j) = Taibj(a,i,b,j)
            endif
#
            if kiter == 3
               PREPARE d3aibj(a,i,b,j) = Taibj(a,i,b,j)
            endif
#
            if kiter == 4
               PREPARE d4aibj(a,i,b,j) = Taibj(a,i,b,j)
            endif
#
            if kiter >= 5
               PREPARE d4aibj(a,i,b,j) = Taibj(a,i,b,j)
            endif
#
      ENDPARDO b, a, j, i
#
      ENDPROC MOVET2
#     ----------------
#
      PROC MOVET1
#     ------------
#
      PARDO a, i 
#
            GET        t1a_old(a,i)
            tai(a,i) = t1a_old(a,i)
#
            if kiter == 1
               PUT d1ai(a,i) = tai(a,i)
            endif
#
            if kiter == 2
               PUT d2ai(a,i) = Tai(a,i)
            endif
#
            if kiter == 3
               PUT d3ai(a,i) = Tai(a,i)
            endif
#
            if kiter == 4
               PUT d4ai(a,i) = Tai(a,i)
            endif
#
            if kiter >= 5
               PUT d4ai(a,i) = Tai(a,i)
            endif
#
      ENDPARDO a, i
#
      PARDO b, j 
#
            GET        t1b_old(b,j)
            tbj(b,j) = t1b_old(b,j)
#
            if kiter == 1
               PUT d1bj(b,j) = tbj(b,j)
            endif
#
            if kiter == 2
               PUT d2bj(b,j) = tbj(b,j)
            endif
#
            if kiter == 3
               PUT d3bj(b,j) = tbj(b,j)
            endif
#
            if kiter == 4
               PUT d4bj(b,j) = tbj(b,j)
            endif
#
            if kiter >= 5
               PUT d4bj(b,j) = tbj(b,j)
            endif
#
      ENDPARDO b, j
#
      ENDPROC MOVET1
#     ----------------
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# ---------------------------------------------------------------------------------
#
     PROC ZERO_DSCALAR  
#    ----------------- 
#
#    The scalars used (overlap of error arrays and coeffients) in the DIIS 
#    expansion are zero'd out. 
#
#      Zero out scalars.
#      -----------------
#
       b11 = 0.0
       b12 = 0.0
       b13 = 0.0
       b14 = 0.0
       b15 = 0.0
       b16 = 0.0
       b17 = 0.0
       b18 = 0.0
       b19 = 0.0
       b110 = 0.0
#
       b22 = 0.0
       b23 = 0.0
       b24 = 0.0
       b25 = 0.0
       b26 = 0.0
       b27 = 0.0
       b28 = 0.0
       b29 = 0.0
       b210 = 0.0
#
       b33 = 0.0
       b34 = 0.0
       b35 = 0.0
       b36 = 0.0
       b37 = 0.0
       b38 = 0.0
       b39 = 0.0
       b310 = 0.0
#
       b44 = 0.0
       b45 = 0.0
       b46 = 0.0
       b47 = 0.0
       b48 = 0.0
       b49 = 0.0
       b410 = 0.0
#
       b55 = 0.0
       b56 = 0.0
       b57 = 0.0
       b58 = 0.0
       b59 = 0.0
       b510 = 0.0
#
       b66 = 0.0
       b67 = 0.0
       b68 = 0.0
       b69 = 0.0
       b610 = 0.0
#
       b77 = 0.0
       b78 = 0.0
       b79 = 0.0
       b710 = 0.0
#
       b88 = 0.0
       b89 = 0.0
       b810 = 0.0
#
       b99 = 0.0
       b910 = 0.0
#
       b1010 = 0.0
#
       Tb11 = 0.0
       Tb12 = 0.0
       Tb13 = 0.0
       Tb14 = 0.0
       Tb15 = 0.0
       Tb16 = 0.0
       Tb17 = 0.0
       Tb18 = 0.0
       Tb19 = 0.0
       Tb110 = 0.0
#
       Tb22 = 0.0
       Tb23 = 0.0
       Tb24 = 0.0
       Tb25 = 0.0
       Tb26 = 0.0
       Tb27 = 0.0
       Tb28 = 0.0
       Tb29 = 0.0
       Tb210 = 0.0
#
       Tb33 = 0.0
       Tb34 = 0.0
       Tb35 = 0.0
       Tb36 = 0.0
       Tb37 = 0.0
       Tb38 = 0.0
       Tb39 = 0.0
       Tb310 = 0.0
#
       Tb44 = 0.0
       Tb45 = 0.0
       Tb46 = 0.0
       Tb47 = 0.0
       Tb48 = 0.0
       Tb49 = 0.0
       Tb410 = 0.0
#
       Tb55 = 0.0
       Tb56 = 0.0
       Tb57 = 0.0
       Tb58 = 0.0
       Tb59 = 0.0
       Tb510 = 0.0
#
       Tb66 = 0.0
       Tb67 = 0.0
       Tb68 = 0.0
       Tb69 = 0.0
       Tb610 = 0.0
#
       Tb77 = 0.0
       Tb78 = 0.0
       Tb79 = 0.0
       Tb710 = 0.0
#
       Tb88 = 0.0
       Tb89 = 0.0
       Tb810 = 0.0
#
       Tb99 = 0.0
       Tb910 = 0.0
#
       Tb1010 = 0.0
#
       c1 = 0.0
       c2 = 0.0
       c3 = 0.0
       c4 = 0.0
       c5 = 0.0
       c6 = 0.0
       c7 = 0.0
       c8 = 0.0
       c9 = 0.0
       c10 = 0.0
#
       execute sip_barrier
#
     ENDPROC ZERO_DSCALAR  
#    -------------------- 
#
# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
#
     PROC SETUP_DIIS   
#    --------------- 
#
#    Put the matrix elements of B into the sip 'B' matrix. 
#
       execute diis_setup Tb11
       execute diis_setup Tb12
       execute diis_setup Tb13
       execute diis_setup Tb14
       execute diis_setup Tb15
       execute diis_setup Tb16
       execute diis_setup Tb17
       execute diis_setup Tb18
       execute diis_setup Tb19
       execute diis_setup Tb110

       execute diis_setup Tb22
       execute diis_setup Tb23
       execute diis_setup Tb24
       execute diis_setup Tb25
       execute diis_setup Tb26
       execute diis_setup Tb27
       execute diis_setup Tb28
       execute diis_setup Tb29
       execute diis_setup Tb210

       execute diis_setup Tb33
       execute diis_setup Tb34
       execute diis_setup Tb35
       execute diis_setup Tb36
       execute diis_setup Tb37
       execute diis_setup Tb38
       execute diis_setup Tb39
       execute diis_setup Tb310

       execute diis_setup Tb44
       execute diis_setup Tb45
       execute diis_setup Tb46
       execute diis_setup Tb47
       execute diis_setup Tb48
       execute diis_setup Tb49
       execute diis_setup Tb410

       execute diis_setup Tb55
       execute diis_setup Tb56
       execute diis_setup Tb57
       execute diis_setup Tb58
       execute diis_setup Tb59
       execute diis_setup Tb510

       execute diis_setup Tb66
       execute diis_setup Tb67
       execute diis_setup Tb68
       execute diis_setup Tb69
       execute diis_setup Tb610

       execute diis_setup Tb77
       execute diis_setup Tb78
       execute diis_setup Tb79
       execute diis_setup Tb710

       execute diis_setup Tb88
       execute diis_setup Tb89
       execute diis_setup Tb810

       execute diis_setup Tb99
       execute diis_setup Tb910

       execute diis_setup Tb1010
#
       execute sip_barrier
#
     ENDPROC SETUP_DIIS   
#    ------------------ 
#
# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
#
     PROC DIIS1  
#    ---------- 
#
#    Zero out scalars.
#    ----------------- 
#
     CALL ZERO_DSCALAR 
#
     execute server_barrier 
     execute sip_barrier 
#
#    Determine the 'B-matrix'. 
#    ------------------------- 
#
#    Compute contributions due to T2aiai amplitudes. 
#    ----------------------------------------------- 
#
#
     PARDO a, i, a1, i1
#
#          REQUEST/GET amplitude data from all 2 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1aiai(a,i,a1,i1) a # kiter-1 amplitudes
           REQUEST e2aiai(a,i,a1,i1) a # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,2
#             ---------
#
              etemp = e1aiai(a,i,a1,i1)*e1aiai(a,i,a1,i1)
              b11  += etemp
#
              etemp = e1aiai(a,i,a1,i1)*e2aiai(a,i,a1,i1)
              b12  += etemp
#
#             b1x x=2,2
#             ---------
#
              etemp = e2aiai(a,i,a1,i1)*e2aiai(a,i,a1,i1)
              b22  += etemp
#
     ENDPARDO a, i, a1, i1
#
#    Compute contributions due to T2bjbj amplitudes.
#    -----------------------------------------------
#
     PARDO b, j, b1, j1
#
#          REQUEST/GET amplitude data from all 2 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1bjbj(b,j,b1,j1) b # kiter-1 amplitudes
           REQUEST e2bjbj(b,j,b1,j1) b # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,2
#             ---------
#
              etemp = e1bjbj(b,j,b1,j1)*e1bjbj(b,j,b1,j1)
              b11  += etemp
#
              etemp = e1bjbj(b,j,b1,j1)*e2bjbj(b,j,b1,j1)
              b12  += etemp
#
#             b1x x=2,2
#             ---------
#
              etemp = e2bjbj(b,j,b1,j1)*e2bjbj(b,j,b1,j1)
              b22  += etemp
#
     ENDPARDO b, j, b1, j1
#
#    Compute contributions due to T2aibj amplitudes.
#    -----------------------------------------------
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 2 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1aibj(a,i,b,j) a # kiter-1 amplitudes
           REQUEST e2aibj(a,i,b,j) a # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,2
#             ---------
#
              etemp = e1aibj(a,i,b,j)*e1aibj(a,i,b,j)
              etemp *= 4.0
              b11  += etemp
#
              etemp = e1aibj(a,i,b,j)*e2aibj(a,i,b,j)
              etemp *= 4.0
              b12  += etemp
#
#             b1x x=2,2
#             ---------
#
              etemp = e2aibj(a,i,b,j)*e2aibj(a,i,b,j)
              etemp *= 4.0
              b22  += etemp
#
     ENDPARDO a, i, b, j
#
#    Compute contributions due to T1ai amplitudes. 
#    --------------------------------------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 2 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET e1ai(a,i)    # kiter-1 amplitudes  
           GET e2ai(a,i)    # kiter-0 amplitudes  
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#             b1x x=1,2 
#             --------- 
#
              etemp = e1ai(a,i)*e1ai(a,i) 
              etemp *= 4.0
              b11  += etemp            
#
              etemp = e1ai(a,i)*e2ai(a,i) 
              etemp *= 4.0
              b12  += etemp            
#
#             b1x x=2,2 
#             --------- 
#
              etemp = e2ai(a,i)*e2ai(a,i) 
              etemp *= 4.0
              b22  += etemp            
#
     ENDPARDO a, i 
#
#    Compute contributions due to T1bj amplitudes. 
#    --------------------------------------------- 
#
     PARDO b, j  
#
#          REQUEST/GET amplitude data from all 2 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET e1bj(b,j)    # kiter-1 amplitudes  
           GET e2bj(b,j)    # kiter-0 amplitudes  
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#             b1x x=1,2 
#             --------- 
#
              etemp = e1bj(b,j)*e1bj(b,j) 
              etemp *= 4.0
              b11  += etemp            
#
              etemp = e1bj(b,j)*e2bj(b,j) 
              etemp *= 4.0
              b12  += etemp            
#
#             b1x x=2,2 
#             --------- 
#
              etemp = e2bj(b,j)*e2bj(b,j) 
              etemp *= 4.0
              b22  += etemp            
#
     ENDPARDO b, j 
#
     execute server_barrier 
#
#    Collectively sum B-matrix elements. 
#    -----------------------------------
#
     collective Tb11 += b11 
     collective Tb12 += b12 
     collective Tb22 += b22 
     execute server_barrier 
#
#    Now the unique elements of the 'B-matrix' have been computed, the array is filled out
#    in the setup_diis. 
#    --------------------------------------------------------------------------------------
#
#    Put the elements of the 'B-matrix', which have been computed as scalars into the  
#    R-matrix. 
#    -------------------------------------------------------------------------------- 
#
     CALL SETUP_DIIS 
#
     execute compute_diis # --> New instruction  
#
     c1 = Tb11 
     c2 = Tb22 
     execute print_scalar c1 
     execute print_scalar c2 
     execute server_barrier 
     execute sip_barrier 
#
#    Done computing the c-vector. 
#    ---------------------------- 
#
#    Form the updated amplitudes using the c-vector. 
#    -----------------------------------------------  
#
#    Form T2old_aa. 
#    -------------- 
#
     PARDO a, i, a1, i1
#
#          REQUEST/GET amplitude data from all 2 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST d0aiai(a,i,a1,i1) a # kiter-2 amplitudes
           REQUEST d1aiai(a,i,a1,i1) a # kiter-1 amplitudes
#
           REQUEST e1aiai(a,i,a1,i1) a # kiter-1 amplitudes
           REQUEST e2aiai(a,i,a1,i1) a # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> T2old_aa.
#          ---------------------------------------------------------
#
           t2aiai(a,i,a1,i1)            = d0aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           += e1aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           *= c1
           taiai(a,i,a1,i1)             = t2aiai(a,i,a1,i1)
#
           t2aiai(a,i,a1,i1)            = d1aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           += e2aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           *= c2
           taiai(a,i,a1,i1)            += t2aiai(a,i,a1,i1)
#
           PREPARE T2old_aa(a,i,a1,i1)      = taiai(a,i,a1,i1)
#
     ENDPARDO a, i, a1, i1
#
#    Form T2old_bb. 
#    -------------- 
#
     PARDO b, j, b1, j1
#
#          REQUEST/GET amplitude data from all 2 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST D0bjbj(b,j,b1,j1) b # kiter-2 amplitudes
           REQUEST D1bjbj(b,j,b1,j1) b # kiter-1 amplitudes
#
           REQUEST e1bjbj(b,j,b1,j1) b # kiter-1 amplitudes
           REQUEST e2bjbj(b,j,b1,j1) b # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> T2old_bb.
#          ---------------------------------------------------------
#
           t2bjbj(b,j,b1,j1)            = d0bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           += e1bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           *= c1
           tbjbj(b,j,b1,j1)             = t2bjbj(b,j,b1,j1)
#
           t2bjbj(b,j,b1,j1)            = d1bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           += e2bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           *= c2
           tbjbj(b,j,b1,j1)            += t2bjbj(b,j,b1,j1)
#
           PREPARE T2old_bb(b,j,b1,j1)      = tbjbj(b,j,b1,j1)
#
     ENDPARDO b, j, b1, j1
#
#    Form T2old_ab. 
#    -------------- 
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 2 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST D0aibj(a,i,b,j) a # kiter-2 amplitudes
           REQUEST D1aibj(a,i,b,j) a # kiter-1 amplitudes
#
           REQUEST e1aibj(a,i,b,j) a # kiter-1 amplitudes
           REQUEST e2aibj(a,i,b,j) a # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> T2old_ab.
#          ---------------------------------------------------------
#
           t2aibj(a,i,b,j)            = d0aibj(a,i,b,j)
           t2aibj(a,i,b,j)           += e1aibj(a,i,b,j)
           t2aibj(a,i,b,j)           *= c1
           taibj(a,i,b,j)             = t2aibj(a,i,b,j)
#
           t2aibj(a,i,b,j)            = d1aibj(a,i,b,j)
           t2aibj(a,i,b,j)           += e2aibj(a,i,b,j)
           t2aibj(a,i,b,j)           *= c2
           taibj(a,i,b,j)            += t2aibj(a,i,b,j)
#
           PREPARE T2old_ab(a,i,b,j)      = taibj(a,i,b,j)
#
     ENDPARDO a, i, b, j
#
#    Form tai_old. 
#    ------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 2 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET D0ai(a,i)     # kiter-2 amplitudes  
           GET D1ai(a,i)     # kiter-1 amplitudes  
#
           GET e1ai(a,i)     # kiter-1 amplitudes  
           GET e2ai(a,i)     # kiter-0 amplitudes  
#
#          Compute contributions to updated amplitudes --> tai_old. 
#          --------------------------------------------------------  
# 
           t1ai(a,i)     = d0ai(a,i) 
           t1ai(a,i)    += e1ai(a,i) 
           t1ai(a,i)    *= c1  
           tai(a,i)      = t1ai(a,i) 
#
           t1ai(a,i)     = d1ai(a,i) 
           t1ai(a,i)    += e2ai(a,i) 
           t1ai(a,i)    *= c2  
           tai(a,i)     += t1ai(a,i) 
# 
           PUT t1a_old(a,i) = tai(a,i) 
#
     ENDPARDO a, i  
#
#    Form tbj_old. 
#    ------------- 
#
     PARDO b, j  
#
#          REQUEST/GET amplitude data from all 2 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET D0bj(b,j)     # kiter-2 amplitudes  
           GET D1bj(b,j)     # kiter-1 amplitudes  
#
           GET e1bj(b,j)     # kiter-1 amplitudes  
           GET e2bj(b,j)     # kiter-0 amplitudes  
#
#          Compute contributions to updated amplitudes --> tbj_old. 
#          --------------------------------------------------------  
# 
           t1bj(b,j)     = d0bj(b,j) 
           t1bj(b,j)    += e1bj(b,j) 
           t1bj(b,j)    *= c1  
           tbj(b,j)      = t1bj(b,j) 
# 
           t1bj(b,j)     = d1bj(b,j) 
           t1bj(b,j)    += e2bj(b,j) 
           t1bj(b,j)    *= c2  
           tbj(b,j)     += t1bj(b,j) 
# 
           PUT t1b_old(b,j) = tbj(b,j) 
# 
     ENDPARDO b, j 
#
     execute server_barrier 
     execute sip_barrier 
#
     ENDPROC DIIS1  
#    ------------- 
#
# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
#
     PROC DIIS2  
#    ---------- 
#
#    Zero out scalars.
#    ----------------- 
#
     CALL ZERO_DSCALAR 
#
     execute server_barrier 
     execute sip_barrier 
#
#    Determine the 'B-matrix'. 
#    ------------------------- 
#
#    Compute contributions due to T2aiai amplitudes. 
#    ----------------------------------------------- 
#
#
     PARDO a, i, a1, i1
#
#          REQUEST/GET amplitude data from all 3 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1aiai(a,i,a1,i1) a # kiter-2 amplitudes
           REQUEST e2aiai(a,i,a1,i1) a # kiter-1 amplitudes
           REQUEST e3aiai(a,i,a1,i1) a # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,3
#             ---------
#
              etemp = e1aiai(a,i,a1,i1)*e1aiai(a,i,a1,i1)
              b11  += etemp
#
              etemp = e1aiai(a,i,a1,i1)*e2aiai(a,i,a1,i1)
              b12  += etemp
#
              etemp = e1aiai(a,i,a1,i1)*e3aiai(a,i,a1,i1)
              b13  += etemp
#
#             b1x x=2,3
#             ---------
#
              etemp = e2aiai(a,i,a1,i1)*e2aiai(a,i,a1,i1)
              b22  += etemp
#
              etemp = e2aiai(a,i,a1,i1)*e3aiai(a,i,a1,i1)
              b23  += etemp
#
#             b1x x=3,3
#             ---------
#
              etemp = e3aiai(a,i,a1,i1)*e3aiai(a,i,a1,i1)
              b33  += etemp
#
     ENDPARDO a, i, a1, i1
#
#    Compute contributions due to T2bjbj amplitudes.
#    -----------------------------------------------
#
     PARDO b, j, b1, j1
#
#          REQUEST/GET amplitude data from all 3 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1bjbj(b,j,b1,j1) b # kiter-2 amplitudes
           REQUEST e2bjbj(b,j,b1,j1) b # kiter-1 amplitudes
           REQUEST e3bjbj(b,j,b1,j1) b # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,3
#             ---------
#
              etemp = e1bjbj(b,j,b1,j1)*e1bjbj(b,j,b1,j1)
              b11  += etemp
#
              etemp = e1bjbj(b,j,b1,j1)*e2bjbj(b,j,b1,j1)
              b12  += etemp
#
              etemp = e1bjbj(b,j,b1,j1)*e3bjbj(b,j,b1,j1)
              b13  += etemp
#
#             b1x x=2,3
#             ---------
#
              etemp = e2bjbj(b,j,b1,j1)*e2bjbj(b,j,b1,j1)
              b22  += etemp
#
              etemp = e2bjbj(b,j,b1,j1)*e3bjbj(b,j,b1,j1)
              b23  += etemp
#
#             b1x x=3,3
#             ---------
#
              etemp = e3bjbj(b,j,b1,j1)*e3bjbj(b,j,b1,j1)
              b33  += etemp
#
     ENDPARDO b, j, b1, j1
#
#    Compute contributions due to T2aibj amplitudes.
#    -----------------------------------------------
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 3 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1aibj(a,i,b,j) a # kiter-2 amplitudes
           REQUEST e2aibj(a,i,b,j) a # kiter-1 amplitudes
           REQUEST e3aibj(a,i,b,j) a # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,3
#             ---------
#
              etemp = e1aibj(a,i,b,j)*e1aibj(a,i,b,j)
              etemp *= 4.0
              b11  += etemp
#
              etemp = e1aibj(a,i,b,j)*e2aibj(a,i,b,j)
              etemp *= 4.0
              b12  += etemp
#
              etemp = e1aibj(a,i,b,j)*e3aibj(a,i,b,j)
              etemp *= 4.0
              b13  += etemp
#
#             b1x x=2,3
#             ---------
#
              etemp = e2aibj(a,i,b,j)*e2aibj(a,i,b,j)
              etemp *= 4.0
              b22  += etemp
#
              etemp = e2aibj(a,i,b,j)*e3aibj(a,i,b,j)
              etemp *= 4.0
              b23  += etemp
#
#             b1x x=3,3
#             ---------
#
              etemp = e3aibj(a,i,b,j)*e3aibj(a,i,b,j)
              etemp *= 4.0
              b33  += etemp
#
     ENDPARDO a, i, b, j
#
#    Compute contributions due to T1ai amplitudes. 
#    --------------------------------------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 4 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET e1ai(a,i)    # kiter-2 amplitudes  
           GET e2ai(a,i)    # kiter-1 amplitudes  
           GET e3ai(a,i)    # kiter-0 amplitudes  
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#             b1x x=1,3 
#             --------- 
#
              etemp = e1ai(a,i)*e1ai(a,i) 
              etemp *= 4.0
              b11  += etemp            
#
              etemp = e1ai(a,i)*e2ai(a,i) 
              etemp *= 4.0
              b12  += etemp            
#
              etemp = e1ai(a,i)*e3ai(a,i) 
              etemp *= 4.0
              b13  += etemp            
#
#             b1x x=2,3 
#             --------- 
#
              etemp = e2ai(a,i)*e2ai(a,i) 
              etemp *= 4.0
              b22  += etemp            
#
              etemp = e2ai(a,i)*e3ai(a,i) 
              etemp *= 4.0
              b23  += etemp            
#
#             b1x x=3,3 
#             --------- 
#
              etemp = e3ai(a,i)*e3ai(a,i) 
              etemp *= 4.0
              b33  += etemp            
#
     ENDPARDO a, i 
#
#    Compute contributions due to T1bj amplitudes. 
#    --------------------------------------------- 
#
     PARDO b, j  
#
#          REQUEST/GET amplitude data from all 3 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET e1bj(b,j)    # kiter-2 amplitudes  
           GET e2bj(b,j)    # kiter-1 amplitudes  
           GET e3bj(b,j)    # kiter-0 amplitudes  
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#             b1x x=1,3 
#             --------- 
#
              etemp = e1bj(b,j)*e1bj(b,j) 
              etemp *= 4.0
              b11  += etemp            
#
              etemp = e1bj(b,j)*e2bj(b,j) 
              etemp *= 4.0
              b12  += etemp            
#
              etemp = e1bj(b,j)*e3bj(b,j) 
              etemp *= 4.0
              b13  += etemp            
#
#             b1x x=2,3 
#             --------- 
#
              etemp = e2bj(b,j)*e2bj(b,j) 
              etemp *= 4.0
              b22  += etemp            
#
              etemp = e2bj(b,j)*e3bj(b,j) 
              etemp *= 4.0
              b23  += etemp            
#
#             b1x x=3,3 
#             --------- 
#
              etemp = e3bj(b,j)*e3bj(b,j) 
              etemp *= 4.0
              b33  += etemp            
#
     ENDPARDO b, j 
#
     execute server_barrier 
#
#    Collectively sum B-matrix elements. 
#    -----------------------------------
#
     collective Tb11 += b11 
     collective Tb12 += b12 
     collective Tb13 += b13 
     collective Tb22 += b22 
     collective Tb23 += b23 
     collective Tb33 += b33 
     execute server_barrier 
#
#    Now the unique elements of the 'B-matrix' have been computed and the array filled out. 
#    --------------------------------------------------------------------------------------
#
#    Put the elements of the 'B-matrix', which have been computed as scalars into the  
#    R-matrix. 
#    -------------------------------------------------------------------------------- 
#
     CALL SETUP_DIIS 
#
     execute compute_diis # --> New instruction  
#
     c1 = Tb11 
     c2 = Tb22 
     c3 = Tb33 
     execute print_scalar c1 
     execute print_scalar c2 
     execute print_scalar c3 
     execute server_barrier 
     execute sip_barrier 
#
#    Done computing the c-vector. 
#    ---------------------------- 
#
#    Form the updated amplitudes using the c-vector. 
#    -----------------------------------------------  
#
#    Form T2old_aa. 
#    -------------- 
#
     PARDO a, i, a1, i1
#
#          REQUEST/GET amplitude data from all 3 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST d0aiai(a,i,a1,i1) a # kiter-3 amplitudes
           REQUEST d1aiai(a,i,a1,i1) a # kiter-2 amplitudes
           REQUEST d2aiai(a,i,a1,i1) a # kiter-1 amplitudes
#
           REQUEST e1aiai(a,i,a1,i1) a # kiter-2 amplitudes
           REQUEST e2aiai(a,i,a1,i1) a # kiter-1 amplitudes
           REQUEST e3aiai(a,i,a1,i1) a # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> T2old_aa.
#          ---------------------------------------------------------
#
           t2aiai(a,i,a1,i1)            = d0aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           += e1aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           *= c1
           taiai(a,i,a1,i1)             = t2aiai(a,i,a1,i1)
#
           t2aiai(a,i,a1,i1)            = d1aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           += e2aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           *= c2
           taiai(a,i,a1,i1)            += t2aiai(a,i,a1,i1)
#
           t2aiai(a,i,a1,i1)            = d2aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           += e3aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           *= c3
           taiai(a,i,a1,i1)            += t2aiai(a,i,a1,i1)
#
           PREPARE T2old_aa(a,i,a1,i1)      = taiai(a,i,a1,i1)
#
     ENDPARDO a, i, a1, i1
#
#    Form T2old_bb. 
#    -------------- 
#
     PARDO b, j, b1, j1
#
#          REQUEST/GET amplitude data from all 3 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST D0bjbj(b,j,b1,j1) b # kiter-3 amplitudes
           REQUEST D1bjbj(b,j,b1,j1) b # kiter-2 amplitudes
           REQUEST D2bjbj(b,j,b1,j1) b # kiter-1 amplitudes
#
           REQUEST e1bjbj(b,j,b1,j1) b # kiter-2 amplitudes
           REQUEST e2bjbj(b,j,b1,j1) b # kiter-1 amplitudes
           REQUEST e3bjbj(b,j,b1,j1) b # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> T2old_bb.
#          ---------------------------------------------------------
#
           t2bjbj(b,j,b1,j1)            = d0bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           += e1bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           *= c1
           tbjbj(b,j,b1,j1)             = t2bjbj(b,j,b1,j1)
#
           t2bjbj(b,j,b1,j1)            = d1bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           += e2bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           *= c2
           tbjbj(b,j,b1,j1)            += t2bjbj(b,j,b1,j1)
#
           t2bjbj(b,j,b1,j1)            = d2bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           += e3bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           *= c3
           tbjbj(b,j,b1,j1)            += t2bjbj(b,j,b1,j1)
#
           PREPARE T2old_bb(b,j,b1,j1)      = tbjbj(b,j,b1,j1)
#
     ENDPARDO b, j, b1, j1
#
#    Form T2old_ab. 
#    -------------- 
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 3 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST D0aibj(a,i,b,j) a # kiter-3 amplitudes
           REQUEST D1aibj(a,i,b,j) a # kiter-2 amplitudes
           REQUEST D2aibj(a,i,b,j) a # kiter-1 amplitudes
#
           REQUEST e1aibj(a,i,b,j) a # kiter-2 amplitudes
           REQUEST e2aibj(a,i,b,j) a # kiter-1 amplitudes
           REQUEST e3aibj(a,i,b,j) a # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> T2old_ab.
#          ---------------------------------------------------------
#
           t2aibj(a,i,b,j)            = d0aibj(a,i,b,j)
           t2aibj(a,i,b,j)           += e1aibj(a,i,b,j)
           t2aibj(a,i,b,j)           *= c1
           taibj(a,i,b,j)             = t2aibj(a,i,b,j)
#
           t2aibj(a,i,b,j)            = d1aibj(a,i,b,j)
           t2aibj(a,i,b,j)           += e2aibj(a,i,b,j)
           t2aibj(a,i,b,j)           *= c2
           taibj(a,i,b,j)            += t2aibj(a,i,b,j)
#
           t2aibj(a,i,b,j)            = d2aibj(a,i,b,j)
           t2aibj(a,i,b,j)           += e3aibj(a,i,b,j)
           t2aibj(a,i,b,j)           *= c3
           taibj(a,i,b,j)            += t2aibj(a,i,b,j)
#
           PREPARE T2old_ab(a,i,b,j)      = taibj(a,i,b,j)
#
     ENDPARDO a, i, b, j
#
#    Form tai_old. 
#    ------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 3 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET D0ai(a,i)     # kiter-3 amplitudes  
           GET D1ai(a,i)     # kiter-2 amplitudes  
           GET D2ai(a,i)     # kiter-1 amplitudes  
#
           GET e1ai(a,i)     # kiter-2 amplitudes  
           GET e2ai(a,i)     # kiter-1 amplitudes  
           GET e3ai(a,i)     # kiter-0 amplitudes  
#
#          Compute contributions to updated amplitudes --> tai_old. 
#          --------------------------------------------------------  
# 
           t1ai(a,i)     = d0ai(a,i) 
           t1ai(a,i)    += e1ai(a,i) 
           t1ai(a,i)    *= c1  
           tai(a,i)      = t1ai(a,i) 
#
           t1ai(a,i)     = d1ai(a,i) 
           t1ai(a,i)    += e2ai(a,i) 
           t1ai(a,i)    *= c2  
           tai(a,i)     += t1ai(a,i) 
#
           t1ai(a,i)     = d2ai(a,i) 
           t1ai(a,i)    += e3ai(a,i) 
           t1ai(a,i)    *= c3  
           tai(a,i)     += t1ai(a,i) 
# 
           PUT t1a_old(a,i) = tai(a,i) 
#
     ENDPARDO a, i  
#
#    Form tbj_old. 
#    ------------- 
#
     PARDO b, j  
#
#          REQUEST/GET amplitude data from all 3 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET D0bj(b,j)     # kiter-3 amplitudes  
           GET D1bj(b,j)     # kiter-2 amplitudes  
           GET D2bj(b,j)     # kiter-1 amplitudes  
#
           GET e1bj(b,j)     # kiter-2 amplitudes  
           GET e2bj(b,j)     # kiter-1 amplitudes  
           GET e3bj(b,j)     # kiter-0 amplitudes  
#
#          Compute contributions to updated amplitudes --> tbj_old. 
#          --------------------------------------------------------  
# 
           t1bj(b,j)     = d0bj(b,j) 
           t1bj(b,j)    += e1bj(b,j) 
           t1bj(b,j)    *= c1  
           tbj(b,j)      = t1bj(b,j) 
# 
           t1bj(b,j)     = d1bj(b,j) 
           t1bj(b,j)    += e2bj(b,j) 
           t1bj(b,j)    *= c2  
           tbj(b,j)     += t1bj(b,j) 
# 
           t1bj(b,j)     = d2bj(b,j) 
           t1bj(b,j)    += e3bj(b,j) 
           t1bj(b,j)    *= c3  
           tbj(b,j)     += t1bj(b,j) 
# 
           PUT t1b_old(b,j) = tbj(b,j) 
# 
     ENDPARDO b, j 
#
     execute server_barrier 
     execute sip_barrier 
#
     ENDPROC DIIS2  
#    ------------- 
#
# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
#
     PROC DIIS3  
#    ---------- 
#
#    Zero out scalars.
#    ----------------- 
#
     CALL ZERO_DSCALAR 
#
     execute server_barrier 
     execute sip_barrier 
#
#    Determine the 'B-matrix'. 
#    ------------------------- 
#
#    Compute contributions due to T2aiai amplitudes. 
#    ----------------------------------------------- 
#
#
     PARDO a, i, a1, i1
#
#          REQUEST/GET amplitude data from all 4 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1aiai(a,i,a1,i1) a # kiter-3 amplitudes
           REQUEST e2aiai(a,i,a1,i1) a # kiter-2 amplitudes
           REQUEST e3aiai(a,i,a1,i1) a # kiter-1 amplitudes
           REQUEST e4aiai(a,i,a1,i1) a # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,4
#             ---------
#
              etemp = e1aiai(a,i,a1,i1)*e1aiai(a,i,a1,i1)
              b11  += etemp
#
              etemp = e1aiai(a,i,a1,i1)*e2aiai(a,i,a1,i1)
              b12  += etemp
#
              etemp = e1aiai(a,i,a1,i1)*e3aiai(a,i,a1,i1)
              b13  += etemp
#
              etemp = e1aiai(a,i,a1,i1)*e4aiai(a,i,a1,i1)
              b14  += etemp
#
#             b1x x=2,4
#             ---------
#
              etemp = e2aiai(a,i,a1,i1)*e2aiai(a,i,a1,i1)
              b22  += etemp
#
              etemp = e2aiai(a,i,a1,i1)*e3aiai(a,i,a1,i1)
              b23  += etemp
#
              etemp = e2aiai(a,i,a1,i1)*e4aiai(a,i,a1,i1)
              b24  += etemp
#
#             b1x x=3,4
#             ---------
#
              etemp = e3aiai(a,i,a1,i1)*e3aiai(a,i,a1,i1)
              b33  += etemp
#
              etemp = e3aiai(a,i,a1,i1)*e4aiai(a,i,a1,i1)
              b34  += etemp
#
#             b1x x=4,4
#             ---------
#
              etemp = e4aiai(a,i,a1,i1)*e4aiai(a,i,a1,i1)
              b44  += etemp
#
     ENDPARDO a, i, a1, i1
#
#    Compute contributions due to T2bjbj amplitudes.
#    -----------------------------------------------
#
     PARDO b, j, b1, j1
#
#          REQUEST/GET amplitude data from all 4 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1bjbj(b,j,b1,j1) b # kiter-3 amplitudes
           REQUEST e2bjbj(b,j,b1,j1) b # kiter-2 amplitudes
           REQUEST e3bjbj(b,j,b1,j1) b # kiter-1 amplitudes
           REQUEST e4bjbj(b,j,b1,j1) b # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,4
#             ---------
#
              etemp = e1bjbj(b,j,b1,j1)*e1bjbj(b,j,b1,j1)
              b11  += etemp
#
              etemp = e1bjbj(b,j,b1,j1)*e2bjbj(b,j,b1,j1)
              b12  += etemp
#
              etemp = e1bjbj(b,j,b1,j1)*e3bjbj(b,j,b1,j1)
              b13  += etemp
#
              etemp = e1bjbj(b,j,b1,j1)*e4bjbj(b,j,b1,j1)
              b14  += etemp
#
#             b1x x=2,4
#             ---------
#
              etemp = e2bjbj(b,j,b1,j1)*e2bjbj(b,j,b1,j1)
              b22  += etemp
#
              etemp = e2bjbj(b,j,b1,j1)*e3bjbj(b,j,b1,j1)
              b23  += etemp
#
              etemp = e2bjbj(b,j,b1,j1)*e4bjbj(b,j,b1,j1)
              b24  += etemp
#
#             b1x x=3,4
#             ---------
#
              etemp = e3bjbj(b,j,b1,j1)*e3bjbj(b,j,b1,j1)
              b33  += etemp
#
              etemp = e3bjbj(b,j,b1,j1)*e4bjbj(b,j,b1,j1)
              b34  += etemp
#
#             b1x x=4,4
#             ---------
#
              etemp = e4bjbj(b,j,b1,j1)*e4bjbj(b,j,b1,j1)
              b44  += etemp
#
     ENDPARDO b, j, b1, j1
#
#    Compute contributions due to T2aibj amplitudes.
#    -----------------------------------------------
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 4 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1aibj(a,i,b,j) a # kiter-3 amplitudes
           REQUEST e2aibj(a,i,b,j) a # kiter-2 amplitudes
           REQUEST e3aibj(a,i,b,j) a # kiter-1 amplitudes
           REQUEST e4aibj(a,i,b,j) a # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,4
#             ---------
#
              etemp = e1aibj(a,i,b,j)*e1aibj(a,i,b,j)
              etemp *= 4.0
              b11  += etemp
#
              etemp = e1aibj(a,i,b,j)*e2aibj(a,i,b,j)
              etemp *= 4.0
              b12  += etemp
#
              etemp = e1aibj(a,i,b,j)*e3aibj(a,i,b,j)
              etemp *= 4.0
              b13  += etemp
#
              etemp = e1aibj(a,i,b,j)*e4aibj(a,i,b,j)
              etemp *= 4.0
              b14  += etemp
#
#             b1x x=2,4
#             ---------
#
              etemp = e2aibj(a,i,b,j)*e2aibj(a,i,b,j)
              etemp *= 4.0
              b22  += etemp
#
              etemp = e2aibj(a,i,b,j)*e3aibj(a,i,b,j)
              etemp *= 4.0
              b23  += etemp
#
              etemp = e2aibj(a,i,b,j)*e4aibj(a,i,b,j)
              etemp *= 4.0
              b24  += etemp
#
#             b1x x=3,4
#             ---------
#
              etemp = e3aibj(a,i,b,j)*e3aibj(a,i,b,j)
              etemp *= 4.0
              b33  += etemp
#
              etemp = e3aibj(a,i,b,j)*e4aibj(a,i,b,j)
              etemp *= 4.0
              b34  += etemp
#
#             b1x x=4,4
#             ---------
#
              etemp = e4aibj(a,i,b,j)*e4aibj(a,i,b,j)
              etemp *= 4.0
              b44  += etemp
#
     ENDPARDO a, i, b, j
#
#    Compute contributions due to T1ai amplitudes. 
#    --------------------------------------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 4 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET e1ai(a,i)    # kiter-3 amplitudes  
           GET e2ai(a,i)    # kiter-2 amplitudes  
           GET e3ai(a,i)    # kiter-1 amplitudes  
           GET e4ai(a,i)    # kiter-0 amplitudes  
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#             b1x x=1,4 
#             --------- 
#
              etemp = e1ai(a,i)*e1ai(a,i) 
              etemp *= 4.0
              b11  += etemp            
#
              etemp = e1ai(a,i)*e2ai(a,i) 
              etemp *= 4.0
              b12  += etemp            
#
              etemp = e1ai(a,i)*e3ai(a,i) 
              etemp *= 4.0
              b13  += etemp            
#
              etemp = e1ai(a,i)*e4ai(a,i) 
              etemp *= 4.0
              b14  += etemp            
#
#             b1x x=2,4 
#             --------- 
#
              etemp = e2ai(a,i)*e2ai(a,i) 
              etemp *= 4.0
              b22  += etemp            
#
              etemp = e2ai(a,i)*e3ai(a,i) 
              etemp *= 4.0
              b23  += etemp            
#
              etemp = e2ai(a,i)*e4ai(a,i) 
              etemp *= 4.0
              b24  += etemp            
#
#             b1x x=3,4 
#             --------- 
#
              etemp = e3ai(a,i)*e3ai(a,i) 
              etemp *= 4.0
              b33  += etemp            
#
              etemp = e3ai(a,i)*e4ai(a,i) 
              etemp *= 4.0
              b34  += etemp            
#
#             b1x x=4,4 
#             --------- 
#
              etemp = e4ai(a,i)*e4ai(a,i) 
              etemp *= 4.0
              b44  += etemp            
#
     ENDPARDO a, i 
#
#    Compute contributions due to T1bj amplitudes. 
#    --------------------------------------------- 
#
     PARDO b, j  
#
#          REQUEST/GET amplitude data from all 4 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET e1bj(b,j)    # kiter-3 amplitudes  
           GET e2bj(b,j)    # kiter-2 amplitudes  
           GET e3bj(b,j)    # kiter-1 amplitudes  
           GET e4bj(b,j)    # kiter-0 amplitudes  
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#             b1x x=1,4 
#             --------- 
#
              etemp = e1bj(b,j)*e1bj(b,j) 
              etemp *= 4.0
              b11  += etemp            
#
              etemp = e1bj(b,j)*e2bj(b,j) 
              etemp *= 4.0
              b12  += etemp            
#
              etemp = e1bj(b,j)*e3bj(b,j) 
              etemp *= 4.0
              b13  += etemp            
#
              etemp = e1bj(b,j)*e4bj(b,j) 
              etemp *= 4.0
              b14  += etemp            
#
#             b1x x=2,4 
#             --------- 
#
              etemp = e2bj(b,j)*e2bj(b,j) 
              etemp *= 4.0
              b22  += etemp            
#
              etemp = e2bj(b,j)*e3bj(b,j) 
              etemp *= 4.0
              b23  += etemp            
#
              etemp = e2bj(b,j)*e4bj(b,j) 
              etemp *= 4.0
              b24  += etemp            
#
#             b1x x=3,4 
#             --------- 
#
              etemp = e3bj(b,j)*e3bj(b,j) 
              etemp *= 4.0
              b33  += etemp            
#
              etemp = e3bj(b,j)*e4bj(b,j) 
              etemp *= 4.0
              b34  += etemp            
#
#             b1x x=4,4 
#             --------- 
#
              etemp = e4bj(b,j)*e4bj(b,j) 
              etemp *= 4.0
              b44  += etemp            
#
     ENDPARDO b, j 
#
     execute server_barrier 
#
#    Collectively sum B-matrix elements. 
#    -----------------------------------
#
     collective Tb11 += b11 
     collective Tb12 += b12 
     collective Tb13 += b13 
     collective Tb14 += b14 
     collective Tb22 += b22 
     collective Tb23 += b23 
     collective Tb24 += b24 
     collective Tb33 += b33 
     collective Tb34 += b34 
     collective Tb44 += b44 
     execute server_barrier 
#
#    Now the unique elements of the 'B-matrix' have been computed and the array filled out. 
#    --------------------------------------------------------------------------------------
#
#    Put the elements of the 'B-matrix', which have been computed as scalars into the  
#    R-matrix. 
#    -------------------------------------------------------------------------------- 
#
     CALL SETUP_DIIS 
#
     execute compute_diis # --> New instruction  
#
     c1 = Tb11 
     c2 = Tb22 
     c3 = Tb33 
     c4 = Tb44 
     execute print_scalar c1 
     execute print_scalar c2 
     execute print_scalar c3 
     execute print_scalar c4 
     execute server_barrier 
     execute sip_barrier 
#
#    Done computing the c-vector. 
#    ---------------------------- 
#
#    Form the updated amplitudes using the c-vector. 
#    -----------------------------------------------  
#
#    Form T2old_aa. 
#    -------------- 
#
     PARDO a, i, a1, i1
#
#          REQUEST/GET amplitude data from all 4 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST d0aiai(a,i,a1,i1) a # kiter-4 amplitudes
           REQUEST d1aiai(a,i,a1,i1) a # kiter-3 amplitudes
           REQUEST d2aiai(a,i,a1,i1) a # kiter-2 amplitudes
           REQUEST d3aiai(a,i,a1,i1) a # kiter-1 amplitudes
#
           REQUEST e1aiai(a,i,a1,i1) a # kiter-3 amplitudes
           REQUEST e2aiai(a,i,a1,i1) a # kiter-2 amplitudes
           REQUEST e3aiai(a,i,a1,i1) a # kiter-1 amplitudes
           REQUEST e4aiai(a,i,a1,i1) a # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> T2old_aa.
#          ---------------------------------------------------------
#
           t2aiai(a,i,a1,i1)            = d0aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           += e1aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           *= c1
           taiai(a,i,a1,i1)             = t2aiai(a,i,a1,i1)
#
           t2aiai(a,i,a1,i1)            = d1aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           += e2aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           *= c2
           taiai(a,i,a1,i1)            += t2aiai(a,i,a1,i1)
#
           t2aiai(a,i,a1,i1)            = d2aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           += e3aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           *= c3
           taiai(a,i,a1,i1)            += t2aiai(a,i,a1,i1)
#
           t2aiai(a,i,a1,i1)            = d3aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           += e4aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           *= c4
           taiai(a,i,a1,i1)            += t2aiai(a,i,a1,i1)
#
           PREPARE T2old_aa(a,i,a1,i1)      = taiai(a,i,a1,i1)
#
     ENDPARDO a, i, a1, i1
#
#    Form T2old_bb. 
#    -------------- 
#
     PARDO b, j, b1, j1
#
#          REQUEST/GET amplitude data from all 4 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST D0bjbj(b,j,b1,j1) b # kiter-4 amplitudes
           REQUEST D1bjbj(b,j,b1,j1) b # kiter-3 amplitudes
           REQUEST D2bjbj(b,j,b1,j1) b # kiter-2 amplitudes
           REQUEST D3bjbj(b,j,b1,j1) b # kiter-1 amplitudes
#
           REQUEST e1bjbj(b,j,b1,j1) b # kiter-3 amplitudes
           REQUEST e2bjbj(b,j,b1,j1) b # kiter-2 amplitudes
           REQUEST e3bjbj(b,j,b1,j1) b # kiter-1 amplitudes
           REQUEST e4bjbj(b,j,b1,j1) b # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> T2old_bb.
#          ---------------------------------------------------------
#
           t2bjbj(b,j,b1,j1)            = d0bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           += e1bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           *= c1
           tbjbj(b,j,b1,j1)             = t2bjbj(b,j,b1,j1)
#
           t2bjbj(b,j,b1,j1)            = d1bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           += e2bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           *= c2
           tbjbj(b,j,b1,j1)            += t2bjbj(b,j,b1,j1)
#
           t2bjbj(b,j,b1,j1)            = d2bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           += e3bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           *= c3
           tbjbj(b,j,b1,j1)            += t2bjbj(b,j,b1,j1)
#
           t2bjbj(b,j,b1,j1)            = d3bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           += e4bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           *= c4
           tbjbj(b,j,b1,j1)            += t2bjbj(b,j,b1,j1)
#
           PREPARE T2old_bb(b,j,b1,j1)      = tbjbj(b,j,b1,j1)
#
     ENDPARDO b, j, b1, j1
#
#    Form T2old_ab. 
#    -------------- 
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 4 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST D0aibj(a,i,b,j) a # kiter-4 amplitudes
           REQUEST D1aibj(a,i,b,j) a # kiter-3 amplitudes
           REQUEST D2aibj(a,i,b,j) a # kiter-2 amplitudes
           REQUEST D3aibj(a,i,b,j) a # kiter-1 amplitudes
#
           REQUEST e1aibj(a,i,b,j) a # kiter-3 amplitudes
           REQUEST e2aibj(a,i,b,j) a # kiter-2 amplitudes
           REQUEST e3aibj(a,i,b,j) a # kiter-1 amplitudes
           REQUEST e4aibj(a,i,b,j) a # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> T2old_ab.
#          ---------------------------------------------------------
#
           t2aibj(a,i,b,j)            = d0aibj(a,i,b,j)
           t2aibj(a,i,b,j)           += e1aibj(a,i,b,j)
           t2aibj(a,i,b,j)           *= c1
           taibj(a,i,b,j)             = t2aibj(a,i,b,j)
#
           t2aibj(a,i,b,j)            = d1aibj(a,i,b,j)
           t2aibj(a,i,b,j)           += e2aibj(a,i,b,j)
           t2aibj(a,i,b,j)           *= c2
           taibj(a,i,b,j)            += t2aibj(a,i,b,j)
#
           t2aibj(a,i,b,j)            = d2aibj(a,i,b,j)
           t2aibj(a,i,b,j)           += e3aibj(a,i,b,j)
           t2aibj(a,i,b,j)           *= c3
           taibj(a,i,b,j)            += t2aibj(a,i,b,j)
#
           t2aibj(a,i,b,j)            = d3aibj(a,i,b,j)
           t2aibj(a,i,b,j)           += e4aibj(a,i,b,j)
           t2aibj(a,i,b,j)           *= c4
           taibj(a,i,b,j)            += t2aibj(a,i,b,j)
#
           PREPARE T2old_ab(a,i,b,j)      = taibj(a,i,b,j)
#
     ENDPARDO a, i, b, j
#
#    Form tai_old. 
#    ------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 4 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET D0ai(a,i)     # kiter-4 amplitudes  
           GET D1ai(a,i)     # kiter-3 amplitudes  
           GET D2ai(a,i)     # kiter-2 amplitudes  
           GET D3ai(a,i)     # kiter-1 amplitudes  
#
           GET e1ai(a,i)     # kiter-3 amplitudes  
           GET e2ai(a,i)     # kiter-2 amplitudes  
           GET e3ai(a,i)     # kiter-1 amplitudes  
           GET e4ai(a,i)     # kiter-0 amplitudes  
#
#          Compute contributions to updated amplitudes --> tai_old. 
#          --------------------------------------------------------  
# 
           t1ai(a,i)     = d0ai(a,i) 
           t1ai(a,i)    += e1ai(a,i) 
           t1ai(a,i)    *= c1  
           tai(a,i)      = t1ai(a,i) 
#
           t1ai(a,i)     = d1ai(a,i) 
           t1ai(a,i)    += e2ai(a,i) 
           t1ai(a,i)    *= c2  
           tai(a,i)     += t1ai(a,i) 
#
           t1ai(a,i)     = d2ai(a,i) 
           t1ai(a,i)    += e3ai(a,i) 
           t1ai(a,i)    *= c3  
           tai(a,i)     += t1ai(a,i) 
#
           t1ai(a,i)     = d3ai(a,i) 
           t1ai(a,i)    += e4ai(a,i) 
           t1ai(a,i)    *= c4  
           tai(a,i)     += t1ai(a,i) 
# 
           PUT t1a_old(a,i) = tai(a,i) 
#
     ENDPARDO a, i  
#
#    Form tbj_old. 
#    ------------- 
#
     PARDO b, j  
#
#          REQUEST/GET amplitude data from all 4 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET D0bj(b,j)     # kiter-4 amplitudes  
           GET D1bj(b,j)     # kiter-3 amplitudes  
           GET D2bj(b,j)     # kiter-2 amplitudes  
           GET D3bj(b,j)     # kiter-1 amplitudes  
#
           GET e1bj(b,j)     # kiter-3 amplitudes  
           GET e2bj(b,j)     # kiter-2 amplitudes  
           GET e3bj(b,j)     # kiter-1 amplitudes  
           GET e4bj(b,j)     # kiter-0 amplitudes  
#
#          Compute contributions to updated amplitudes --> tbj_old. 
#          --------------------------------------------------------  
# 
           t1bj(b,j)     = d0bj(b,j) 
           t1bj(b,j)    += e1bj(b,j) 
           t1bj(b,j)    *= c1  
           tbj(b,j)      = t1bj(b,j) 
# 
           t1bj(b,j)     = d1bj(b,j) 
           t1bj(b,j)    += e2bj(b,j) 
           t1bj(b,j)    *= c2  
           tbj(b,j)     += t1bj(b,j) 
# 
           t1bj(b,j)     = d2bj(b,j) 
           t1bj(b,j)    += e3bj(b,j) 
           t1bj(b,j)    *= c3  
           tbj(b,j)     += t1bj(b,j) 
# 
           t1bj(b,j)     = d3bj(b,j) 
           t1bj(b,j)    += e4bj(b,j) 
           t1bj(b,j)    *= c4  
           tbj(b,j)     += t1bj(b,j) 
# 
           PUT t1b_old(b,j) = tbj(b,j) 
# 
     ENDPARDO b, j 
#
     execute server_barrier 
     execute sip_barrier 
#
     ENDPROC DIIS3  
#    ------------- 
#
# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
#
     PROC DIIS4  
#    ---------- 
#
#    Zero out scalars.
#    ----------------- 
#
     CALL ZERO_DSCALAR 
#
     execute server_barrier 
     execute sip_barrier 
#
#    Determine the 'B-matrix'. 
#    ------------------------- 
#
#    Compute contributions due to T2aiai amplitudes. 
#    ----------------------------------------------- 
#
#
     PARDO a, i, a1, i1
#
#          REQUEST/GET amplitude data from all 5 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1aiai(a,i,a1,i1) a # kiter-4 amplitudes
           REQUEST e2aiai(a,i,a1,i1) a # kiter-3 amplitudes
           REQUEST e3aiai(a,i,a1,i1) a # kiter-2 amplitudes
           REQUEST e4aiai(a,i,a1,i1) a # kiter-1 amplitudes
           REQUEST e5aiai(a,i,a1,i1) a # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,5
#             ---------
#
              etemp = e1aiai(a,i,a1,i1)*e1aiai(a,i,a1,i1)
              b11  += etemp
#
              etemp = e1aiai(a,i,a1,i1)*e2aiai(a,i,a1,i1)
              b12  += etemp
#
              etemp = e1aiai(a,i,a1,i1)*e3aiai(a,i,a1,i1)
              b13  += etemp
#
              etemp = e1aiai(a,i,a1,i1)*e4aiai(a,i,a1,i1)
              b14  += etemp
#
              etemp = e1aiai(a,i,a1,i1)*e5aiai(a,i,a1,i1)
              b15  += etemp
#
#             b1x x=2,5
#             ---------
#
              etemp = e2aiai(a,i,a1,i1)*e2aiai(a,i,a1,i1)
              b22  += etemp
#
              etemp = e2aiai(a,i,a1,i1)*e3aiai(a,i,a1,i1)
              b23  += etemp
#
              etemp = e2aiai(a,i,a1,i1)*e4aiai(a,i,a1,i1)
              b24  += etemp
#
              etemp = e2aiai(a,i,a1,i1)*e5aiai(a,i,a1,i1)
              b25  += etemp
#
#             b1x x=3,5
#             ---------
#
              etemp = e3aiai(a,i,a1,i1)*e3aiai(a,i,a1,i1)
              b33  += etemp
#
              etemp = e3aiai(a,i,a1,i1)*e4aiai(a,i,a1,i1)
              b34  += etemp
#
              etemp = e3aiai(a,i,a1,i1)*e5aiai(a,i,a1,i1)
              b35  += etemp
#
#             b1x x=4,5
#             ---------
#
              etemp = e4aiai(a,i,a1,i1)*e4aiai(a,i,a1,i1)
              b44  += etemp
#
              etemp = e4aiai(a,i,a1,i1)*e5aiai(a,i,a1,i1)
              b45  += etemp
#
#             b1x x=5,5
#             ---------
#
              etemp = e5aiai(a,i,a1,i1)*e5aiai(a,i,a1,i1)
              b55  += etemp
#
     ENDPARDO a, i, a1, i1
#
#    Compute contributions due to T2bjbj amplitudes.
#    -----------------------------------------------
#
     PARDO b, j, b1, j1
#
#          REQUEST/GET amplitude data from all 5 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1bjbj(b,j,b1,j1) b # kiter-4 amplitudes
           REQUEST e2bjbj(b,j,b1,j1) b # kiter-3 amplitudes
           REQUEST e3bjbj(b,j,b1,j1) b # kiter-2 amplitudes
           REQUEST e4bjbj(b,j,b1,j1) b # kiter-1 amplitudes
           REQUEST e5bjbj(b,j,b1,j1) b # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,5
#             ---------
#
              etemp = e1bjbj(b,j,b1,j1)*e1bjbj(b,j,b1,j1)
              b11  += etemp
#
              etemp = e1bjbj(b,j,b1,j1)*e2bjbj(b,j,b1,j1)
              b12  += etemp
#
              etemp = e1bjbj(b,j,b1,j1)*e3bjbj(b,j,b1,j1)
              b13  += etemp
#
              etemp = e1bjbj(b,j,b1,j1)*e4bjbj(b,j,b1,j1)
              b14  += etemp
#
              etemp = e1bjbj(b,j,b1,j1)*e5bjbj(b,j,b1,j1)
              b15  += etemp
#
#             b1x x=2,5
#             ---------
#
              etemp = e2bjbj(b,j,b1,j1)*e2bjbj(b,j,b1,j1)
              b22  += etemp
#
              etemp = e2bjbj(b,j,b1,j1)*e3bjbj(b,j,b1,j1)
              b23  += etemp
#
              etemp = e2bjbj(b,j,b1,j1)*e4bjbj(b,j,b1,j1)
              b24  += etemp
#
              etemp = e2bjbj(b,j,b1,j1)*e5bjbj(b,j,b1,j1)
              b25  += etemp
#
#             b1x x=3,5
#             ---------
#
              etemp = e3bjbj(b,j,b1,j1)*e3bjbj(b,j,b1,j1)
              b33  += etemp
#
              etemp = e3bjbj(b,j,b1,j1)*e4bjbj(b,j,b1,j1)
              b34  += etemp
#
              etemp = e3bjbj(b,j,b1,j1)*e5bjbj(b,j,b1,j1)
              b35  += etemp
#
#             b1x x=4,5
#             ---------
#
              etemp = e4bjbj(b,j,b1,j1)*e4bjbj(b,j,b1,j1)
              b44  += etemp
#
              etemp = e4bjbj(b,j,b1,j1)*e5bjbj(b,j,b1,j1)
              b45  += etemp
#
#             b1x x=5,5
#             ---------
#
              etemp = e5bjbj(b,j,b1,j1)*e5bjbj(b,j,b1,j1)
              b55  += etemp
#
     ENDPARDO b, j, b1, j1
#
#    Compute contributions due to T2aibj amplitudes.
#    -----------------------------------------------
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 5 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1aibj(a,i,b,j) a # kiter-4 amplitudes
           REQUEST e2aibj(a,i,b,j) a # kiter-3 amplitudes
           REQUEST e3aibj(a,i,b,j) a # kiter-2 amplitudes
           REQUEST e4aibj(a,i,b,j) a # kiter-1 amplitudes
           REQUEST e5aibj(a,i,b,j) a # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,5
#             ---------
#
              etemp = e1aibj(a,i,b,j)*e1aibj(a,i,b,j)
              etemp *= 4.0
              b11  += etemp
#
              etemp = e1aibj(a,i,b,j)*e2aibj(a,i,b,j)
              etemp *= 4.0
              b12  += etemp
#
              etemp = e1aibj(a,i,b,j)*e3aibj(a,i,b,j)
              etemp *= 4.0
              b13  += etemp
#
              etemp = e1aibj(a,i,b,j)*e4aibj(a,i,b,j)
              etemp *= 4.0
              b14  += etemp
#
              etemp = e1aibj(a,i,b,j)*e5aibj(a,i,b,j)
              etemp *= 4.0
              b15  += etemp
#
#             b1x x=2,5
#             ---------
#
              etemp = e2aibj(a,i,b,j)*e2aibj(a,i,b,j)
              etemp *= 4.0
              b22  += etemp
#
              etemp = e2aibj(a,i,b,j)*e3aibj(a,i,b,j)
              etemp *= 4.0
              b23  += etemp
#
              etemp = e2aibj(a,i,b,j)*e4aibj(a,i,b,j)
              etemp *= 4.0
              b24  += etemp
#
              etemp = e2aibj(a,i,b,j)*e5aibj(a,i,b,j)
              etemp *= 4.0
              b25  += etemp
#
#             b1x x=3,5
#             ---------
#
              etemp = e3aibj(a,i,b,j)*e3aibj(a,i,b,j)
              etemp *= 4.0
              b33  += etemp
#
              etemp = e3aibj(a,i,b,j)*e4aibj(a,i,b,j)
              etemp *= 4.0
              b34  += etemp
#
              etemp = e3aibj(a,i,b,j)*e5aibj(a,i,b,j)
              etemp *= 4.0
              b35  += etemp
#
#             b1x x=4,5
#             ---------
#
              etemp = e4aibj(a,i,b,j)*e4aibj(a,i,b,j)
              etemp *= 4.0
              b44  += etemp
#
              etemp = e4aibj(a,i,b,j)*e5aibj(a,i,b,j)
              etemp *= 4.0
              b45  += etemp
#
#             b1x x=5,5
#             ---------
#
              etemp = e5aibj(a,i,b,j)*e5aibj(a,i,b,j)
              etemp *= 4.0
              b55  += etemp
#
     ENDPARDO a, i, b, j
#
#    Compute contributions due to T1ai amplitudes. 
#    --------------------------------------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 5 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET e1ai(a,i)    # kiter-4 amplitudes  
           GET e2ai(a,i)    # kiter-3 amplitudes  
           GET e3ai(a,i)    # kiter-2 amplitudes  
           GET e4ai(a,i)    # kiter-1 amplitudes  
           GET e5ai(a,i)    # kiter-0 amplitudes  
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#             b1x x=1,5 
#             --------- 
#
              etemp = e1ai(a,i)*e1ai(a,i) 
              etemp *= 4.0
              b11  += etemp            
#
              etemp = e1ai(a,i)*e2ai(a,i) 
              etemp *= 4.0
              b12  += etemp            
#
              etemp = e1ai(a,i)*e3ai(a,i) 
              etemp *= 4.0
              b13  += etemp            
#
              etemp = e1ai(a,i)*e4ai(a,i) 
              etemp *= 4.0
              b14  += etemp            
#
              etemp = e1ai(a,i)*e5ai(a,i) 
              etemp *= 4.0
              b15  += etemp            
#
#             b1x x=2,5 
#             --------- 
#
              etemp = e2ai(a,i)*e2ai(a,i) 
              etemp *= 4.0
              b22  += etemp            
#
              etemp = e2ai(a,i)*e3ai(a,i) 
              etemp *= 4.0
              b23  += etemp            
#
              etemp = e2ai(a,i)*e4ai(a,i) 
              etemp *= 4.0
              b24  += etemp            
#
              etemp = e2ai(a,i)*e5ai(a,i) 
              etemp *= 4.0
              b25  += etemp            
#
#             b1x x=3,5 
#             --------- 
#
              etemp = e3ai(a,i)*e3ai(a,i) 
              etemp *= 4.0
              b33  += etemp            
#
              etemp = e3ai(a,i)*e4ai(a,i) 
              etemp *= 4.0
              b34  += etemp            
#
              etemp = e3ai(a,i)*e5ai(a,i) 
              etemp *= 4.0
              b35  += etemp            
#
#             b1x x=4,5 
#             --------- 
#
              etemp = e4ai(a,i)*e4ai(a,i) 
              etemp *= 4.0
              b44  += etemp            
#
              etemp = e4ai(a,i)*e5ai(a,i) 
              etemp *= 4.0
              b45  += etemp            
#
#             b1x x=5,5 
#             --------- 
#
              etemp = e5ai(a,i)*e5ai(a,i) 
              etemp *= 4.0
              b55  += etemp            
#
     ENDPARDO a, i 
#
#    Compute contributions due to T1bj amplitudes. 
#    --------------------------------------------- 
#
     PARDO b, j  
#
#          REQUEST/GET amplitude data from all 5 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET e1bj(b,j)    # kiter-4 amplitudes  
           GET e2bj(b,j)    # kiter-3 amplitudes  
           GET e3bj(b,j)    # kiter-2 amplitudes  
           GET e4bj(b,j)    # kiter-1 amplitudes  
           GET e5bj(b,j)    # kiter-0 amplitudes  
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#             b1x x=1,5 
#             --------- 
#
              etemp = e1bj(b,j)*e1bj(b,j) 
              etemp *= 4.0
              b11  += etemp            
#
              etemp = e1bj(b,j)*e2bj(b,j) 
              etemp *= 4.0
              b12  += etemp            
#
              etemp = e1bj(b,j)*e3bj(b,j) 
              etemp *= 4.0
              b13  += etemp            
#
              etemp = e1bj(b,j)*e4bj(b,j) 
              etemp *= 4.0
              b14  += etemp            
#
              etemp = e1bj(b,j)*e5bj(b,j) 
              etemp *= 4.0
              b15  += etemp            
#
#             b1x x=2,5 
#             --------- 
#
              etemp = e2bj(b,j)*e2bj(b,j) 
              etemp *= 4.0
              b22  += etemp            
#
              etemp = e2bj(b,j)*e3bj(b,j) 
              etemp *= 4.0
              b23  += etemp            
#
              etemp = e2bj(b,j)*e4bj(b,j) 
              etemp *= 4.0
              b24  += etemp            
#
              etemp = e2bj(b,j)*e5bj(b,j) 
              etemp *= 4.0
              b25  += etemp            
#
#             b1x x=3,5 
#             --------- 
#
              etemp = e3bj(b,j)*e3bj(b,j) 
              etemp *= 4.0
              b33  += etemp            
#
              etemp = e3bj(b,j)*e4bj(b,j) 
              etemp *= 4.0
              b34  += etemp            
#
              etemp = e3bj(b,j)*e5bj(b,j) 
              etemp *= 4.0
              b35  += etemp            
#
#             b1x x=4,5 
#             --------- 
#
              etemp = e4bj(b,j)*e4bj(b,j) 
              etemp *= 4.0
              b44  += etemp            
#
              etemp = e4bj(b,j)*e5bj(b,j) 
              etemp *= 4.0
              b45  += etemp            
#
#             b1x x=5,5 
#             --------- 
#
              etemp = e5bj(b,j)*e5bj(b,j) 
              etemp *= 4.0
              b55  += etemp            
#
     ENDPARDO b, j 
#
     execute server_barrier 
#
#    Collectively sum B-matrix elements. 
#    -----------------------------------
#
     collective Tb11 += b11 
     collective Tb12 += b12 
     collective Tb13 += b13 
     collective Tb14 += b14 
     collective Tb15 += b15 
     collective Tb22 += b22 
     collective Tb23 += b23 
     collective Tb24 += b24 
     collective Tb25 += b25 
     collective Tb33 += b33 
     collective Tb34 += b34 
     collective Tb35 += b35 
     collective Tb44 += b44 
     collective Tb45 += b45 
     collective Tb55 += b55 
     execute server_barrier 
#
#    Now the unique elements of the 'B-matrix' have been computed and the array filled out. 
#    --------------------------------------------------------------------------------------
#
#    Put the elements of the 'B-matrix', which have been computed as scalars into the  
#    R-matrix. 
#    -------------------------------------------------------------------------------- 
#
     CALL SETUP_DIIS 
#
     execute compute_diis # --> New instruction  
#
     c1 = Tb11 
     c2 = Tb22 
     c3 = Tb33 
     c4 = Tb44 
     c5 = Tb55 
     execute print_scalar c1 
     execute print_scalar c2 
     execute print_scalar c3 
     execute print_scalar c4 
     execute print_scalar c5 
     execute server_barrier 
     execute sip_barrier 
#
#    Done computing the c-vector. 
#    ---------------------------- 
#
#    Form the updated amplitudes using the c-vector. 
#    -----------------------------------------------  
#
#    Form T2old_aa. 
#    -------------- 
#
     PARDO a, i, a1, i1
#
#          REQUEST/GET amplitude data from all 5 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST d0aiai(a,i,a1,i1) a # kiter-5 amplitudes
           REQUEST d1aiai(a,i,a1,i1) a # kiter-4 amplitudes
           REQUEST d2aiai(a,i,a1,i1) a # kiter-3 amplitudes
           REQUEST d3aiai(a,i,a1,i1) a # kiter-2 amplitudes
           REQUEST d4aiai(a,i,a1,i1) a # kiter-1 amplitudes
#
           REQUEST e1aiai(a,i,a1,i1) a # kiter-4 amplitudes
           REQUEST e2aiai(a,i,a1,i1) a # kiter-3 amplitudes
           REQUEST e3aiai(a,i,a1,i1) a # kiter-2 amplitudes
           REQUEST e4aiai(a,i,a1,i1) a # kiter-1 amplitudes
           REQUEST e5aiai(a,i,a1,i1) a # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> T2old_aa.
#          ---------------------------------------------------------
#
           t2aiai(a,i,a1,i1)            = d0aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           += e1aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           *= c1
           taiai(a,i,a1,i1)             = t2aiai(a,i,a1,i1)
#
           t2aiai(a,i,a1,i1)            = d1aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           += e2aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           *= c2
           taiai(a,i,a1,i1)            += t2aiai(a,i,a1,i1)
#
           t2aiai(a,i,a1,i1)            = d2aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           += e3aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           *= c3
           taiai(a,i,a1,i1)            += t2aiai(a,i,a1,i1)
#
           t2aiai(a,i,a1,i1)            = d3aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           += e4aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           *= c4
           taiai(a,i,a1,i1)            += t2aiai(a,i,a1,i1)
#
           t2aiai(a,i,a1,i1)            = d4aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           += e5aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           *= c5
           taiai(a,i,a1,i1)            += t2aiai(a,i,a1,i1)
#
           PREPARE T2old_aa(a,i,a1,i1)      = taiai(a,i,a1,i1)
#
     ENDPARDO a, i, a1, i1
#
#    Form T2old_bb. 
#    -------------- 
#
     PARDO b, j, b1, j1
#
#          REQUEST/GET amplitude data from all 5 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST D0bjbj(b,j,b1,j1) b # kiter-5 amplitudes
           REQUEST D1bjbj(b,j,b1,j1) b # kiter-4 amplitudes
           REQUEST D2bjbj(b,j,b1,j1) b # kiter-3 amplitudes
           REQUEST D3bjbj(b,j,b1,j1) b # kiter-2 amplitudes
           REQUEST D4bjbj(b,j,b1,j1) b # kiter-1 amplitudes
#
           REQUEST e1bjbj(b,j,b1,j1) b # kiter-4 amplitudes
           REQUEST e2bjbj(b,j,b1,j1) b # kiter-3 amplitudes
           REQUEST e3bjbj(b,j,b1,j1) b # kiter-2 amplitudes
           REQUEST e4bjbj(b,j,b1,j1) b # kiter-1 amplitudes
           REQUEST e5bjbj(b,j,b1,j1) b # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> T2old_bb.
#          ---------------------------------------------------------
#
           t2bjbj(b,j,b1,j1)            = d0bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           += e1bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           *= c1
           tbjbj(b,j,b1,j1)             = t2bjbj(b,j,b1,j1)
#
           t2bjbj(b,j,b1,j1)            = d1bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           += e2bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           *= c2
           tbjbj(b,j,b1,j1)            += t2bjbj(b,j,b1,j1)
#
           t2bjbj(b,j,b1,j1)            = d2bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           += e3bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           *= c3
           tbjbj(b,j,b1,j1)            += t2bjbj(b,j,b1,j1)
#
           t2bjbj(b,j,b1,j1)            = d3bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           += e4bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           *= c4
           tbjbj(b,j,b1,j1)            += t2bjbj(b,j,b1,j1)
#
           t2bjbj(b,j,b1,j1)            = d4bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           += e5bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           *= c5
           tbjbj(b,j,b1,j1)            += t2bjbj(b,j,b1,j1)
#
           PREPARE T2old_bb(b,j,b1,j1)      = tbjbj(b,j,b1,j1)
#
     ENDPARDO b, j, b1, j1
#
#    Form T2old_ab. 
#    -------------- 
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 5 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST D0aibj(a,i,b,j) a # kiter-5 amplitudes
           REQUEST D1aibj(a,i,b,j) a # kiter-4 amplitudes
           REQUEST D2aibj(a,i,b,j) a # kiter-3 amplitudes
           REQUEST D3aibj(a,i,b,j) a # kiter-2 amplitudes
           REQUEST D4aibj(a,i,b,j) a # kiter-1 amplitudes
#
           REQUEST e1aibj(a,i,b,j) a # kiter-4 amplitudes
           REQUEST e2aibj(a,i,b,j) a # kiter-3 amplitudes
           REQUEST e3aibj(a,i,b,j) a # kiter-2 amplitudes
           REQUEST e4aibj(a,i,b,j) a # kiter-1 amplitudes
           REQUEST e5aibj(a,i,b,j) a # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> T2old_ab.
#          ---------------------------------------------------------
#
           t2aibj(a,i,b,j)            = d0aibj(a,i,b,j)
           t2aibj(a,i,b,j)           += e1aibj(a,i,b,j)
           t2aibj(a,i,b,j)           *= c1
           taibj(a,i,b,j)             = t2aibj(a,i,b,j)
#
           t2aibj(a,i,b,j)            = d1aibj(a,i,b,j)
           t2aibj(a,i,b,j)           += e2aibj(a,i,b,j)
           t2aibj(a,i,b,j)           *= c2
           taibj(a,i,b,j)            += t2aibj(a,i,b,j)
#
           t2aibj(a,i,b,j)            = d2aibj(a,i,b,j)
           t2aibj(a,i,b,j)           += e3aibj(a,i,b,j)
           t2aibj(a,i,b,j)           *= c3
           taibj(a,i,b,j)            += t2aibj(a,i,b,j)
#
           t2aibj(a,i,b,j)            = d3aibj(a,i,b,j)
           t2aibj(a,i,b,j)           += e4aibj(a,i,b,j)
           t2aibj(a,i,b,j)           *= c4
           taibj(a,i,b,j)            += t2aibj(a,i,b,j)
#
           t2aibj(a,i,b,j)            = d4aibj(a,i,b,j)
           t2aibj(a,i,b,j)           += e5aibj(a,i,b,j)
           t2aibj(a,i,b,j)           *= c5
           taibj(a,i,b,j)            += t2aibj(a,i,b,j)
#
           PREPARE T2old_ab(a,i,b,j)      = taibj(a,i,b,j)
#
     ENDPARDO a, i, b, j
#
#    Form tai_old. 
#    ------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 5 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET D0ai(a,i)     # kiter-5 amplitudes  
           GET D1ai(a,i)     # kiter-4 amplitudes  
           GET D2ai(a,i)     # kiter-3 amplitudes  
           GET D3ai(a,i)     # kiter-2 amplitudes  
           GET D4ai(a,i)     # kiter-1 amplitudes  
#
           GET e1ai(a,i)     # kiter-4 amplitudes  
           GET e2ai(a,i)     # kiter-3 amplitudes  
           GET e3ai(a,i)     # kiter-2 amplitudes  
           GET e4ai(a,i)     # kiter-1 amplitudes  
           GET e5ai(a,i)     # kiter-0 amplitudes  
#
#          Compute contributions to updated amplitudes --> tai_old. 
#          --------------------------------------------------------  
# 
           t1ai(a,i)     = d0ai(a,i) 
           t1ai(a,i)    += e1ai(a,i) 
           t1ai(a,i)    *= c1  
           tai(a,i)      = t1ai(a,i) 
#
           t1ai(a,i)     = d1ai(a,i) 
           t1ai(a,i)    += e2ai(a,i) 
           t1ai(a,i)    *= c2  
           tai(a,i)     += t1ai(a,i) 
#
           t1ai(a,i)     = d2ai(a,i) 
           t1ai(a,i)    += e3ai(a,i) 
           t1ai(a,i)    *= c3  
           tai(a,i)     += t1ai(a,i) 
#
           t1ai(a,i)     = d3ai(a,i) 
           t1ai(a,i)    += e4ai(a,i) 
           t1ai(a,i)    *= c4  
           tai(a,i)     += t1ai(a,i) 
#
           t1ai(a,i)     = d4ai(a,i) 
           t1ai(a,i)    += e5ai(a,i) 
           t1ai(a,i)    *= c5  
           tai(a,i)     += t1ai(a,i) 
# 
           PUT t1a_old(a,i) = tai(a,i) 
#
     ENDPARDO a, i  
#
#    Form tbj_old. 
#    ------------- 
#
     PARDO b, j  
#
#          REQUEST/GET amplitude data from all 5 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET D0bj(b,j)     # kiter-5 amplitudes  
           GET D1bj(b,j)     # kiter-4 amplitudes  
           GET D2bj(b,j)     # kiter-3 amplitudes  
           GET D3bj(b,j)     # kiter-2 amplitudes  
           GET D4bj(b,j)     # kiter-1 amplitudes  
#
           GET e1bj(b,j)     # kiter-4 amplitudes  
           GET e2bj(b,j)     # kiter-3 amplitudes  
           GET e3bj(b,j)     # kiter-2 amplitudes  
           GET e4bj(b,j)     # kiter-1 amplitudes  
           GET e5bj(b,j)     # kiter-0 amplitudes  
#
#          Compute contributions to updated amplitudes --> tbj_old. 
#          --------------------------------------------------------  
# 
           t1bj(b,j)     = d0bj(b,j) 
           t1bj(b,j)    += e1bj(b,j) 
           t1bj(b,j)    *= c1  
           tbj(b,j)      = t1bj(b,j) 
# 
           t1bj(b,j)     = d1bj(b,j) 
           t1bj(b,j)    += e2bj(b,j) 
           t1bj(b,j)    *= c2  
           tbj(b,j)     += t1bj(b,j) 
# 
           t1bj(b,j)     = d2bj(b,j) 
           t1bj(b,j)    += e3bj(b,j) 
           t1bj(b,j)    *= c3  
           tbj(b,j)     += t1bj(b,j) 
# 
           t1bj(b,j)     = d3bj(b,j) 
           t1bj(b,j)    += e4bj(b,j) 
           t1bj(b,j)    *= c4  
           tbj(b,j)     += t1bj(b,j) 
# 
           t1bj(b,j)     = d4bj(b,j) 
           t1bj(b,j)    += e5bj(b,j) 
           t1bj(b,j)    *= c5  
           tbj(b,j)     += t1bj(b,j) 
# 
           PUT t1b_old(b,j) = tbj(b,j) 
# 
     ENDPARDO b, j 
#
     execute server_barrier 
     execute sip_barrier 
#
     ENDPROC DIIS4  
#    ------------- 
#
# ---------------------------------------------------------------------------------
#
     PROC MOVE4
#    ----------
#
#    0 --> 1  
#    ---------------------------------------------------
#
     PARDO a, i, a1, i1
           REQUEST                     d1aiai(a,i,a1,i1) a 
           PREPARE d0aiai(a,i,a1,i1) = d1aiai(a,i,a1,i1)
     ENDPARDO a, i, a1, i1
#
     PARDO b, j, b1, j1
           REQUEST                     d1bjbj(b,j,b1,j1) b 
           PREPARE d0bjbj(b,j,b1,j1) = d1bjbj(b,j,b1,j1)
     ENDPARDO b, j, b1, j1
#
     PARDO a, i, b, j
           REQUEST                   d1aibj(a,i,b,j) a 
           PREPARE d0aibj(a,i,b,j) = d1aibj(a,i,b,j)
     ENDPARDO a, i, b, j
#
     PARDO a, i 
           GET d1ai(a,i) 
           PUT d0ai(a,i) = d1ai(a,i) 
     ENDPARDO a, i 
#
     PARDO b, j 
           GET d1bj(b,j) 
           PUT d0bj(b,j) = d1bj(b,j) 
     ENDPARDO b, j 
#
     execute server_barrier
     execute sip_barrier
#
#    2 --> 1  
#    ---------------------------------------------------
#
     PARDO a, i, a1, i1
           REQUEST                     e2aiai(a,i,a1,i1) a 
           PREPARE e1aiai(a,i,a1,i1) = e2aiai(a,i,a1,i1)
     ENDPARDO a, i, a1, i1
#
     PARDO b, j, b1, j1
           REQUEST                     e2bjbj(b,j,b1,j1) b 
           PREPARE e1bjbj(b,j,b1,j1) = e2bjbj(b,j,b1,j1)
     ENDPARDO b, j, b1, j1
#
     PARDO a, i, b, j
           REQUEST                   e2aibj(a,i,b,j) a 
           PREPARE e1aibj(a,i,b,j) = e2aibj(a,i,b,j)
     ENDPARDO a, i, b, j
#
     PARDO a, i, a1, i1
           REQUEST                     d2aiai(a,i,a1,i1) a 
           PREPARE d1aiai(a,i,a1,i1) = d2aiai(a,i,a1,i1)
     ENDPARDO a, i, a1, i1
#
     PARDO b, j, b1, j1
           REQUEST                     d2bjbj(b,j,b1,j1) b 
           PREPARE d1bjbj(b,j,b1,j1) = d2bjbj(b,j,b1,j1)
     ENDPARDO b, j, b1, j1
#
     PARDO a, i, b, j
           REQUEST                   d2aibj(a,i,b,j) a 
           PREPARE d1aibj(a,i,b,j) = d2aibj(a,i,b,j)
     ENDPARDO a, i, b, j
#
     PARDO a, i 
           GET e2ai(a,i) 
           PUT e1ai(a,i) = e2ai(a,i) 
     ENDPARDO a, i 
#
     PARDO b, j 
           GET e2bj(b,j) 
           PUT e1bj(b,j) = e2bj(b,j) 
     ENDPARDO b, j 
#
     PARDO a, i 
           GET d2ai(a,i) 
           PUT d1ai(a,i) = d2ai(a,i) 
     ENDPARDO a, i 
#
     PARDO b, j 
           GET d2bj(b,j) 
           PUT d1bj(b,j) = d2bj(b,j) 
     ENDPARDO b, j 
#
     execute sip_barrier
     execute server_barrier
#
#    3 --> 2  
#    ---------------------------------------------------
#
     PARDO a, i, a1, i1
           REQUEST                     e3aiai(a,i,a1,i1) a 
           PREPARE e2aiai(a,i,a1,i1) = e3aiai(a,i,a1,i1)
     ENDPARDO a, i, a1, i1
#
     PARDO b, j, b1, j1
           REQUEST                     e3bjbj(b,j,b1,j1) b 
           PREPARE e2bjbj(b,j,b1,j1) = e3bjbj(b,j,b1,j1)
     ENDPARDO b, j, b1, j1
#
     PARDO a, i, b, j
           REQUEST                   e3aibj(a,i,b,j) a 
           PREPARE e2aibj(a,i,b,j) = e3aibj(a,i,b,j)
     ENDPARDO a, i, b, j
#
     PARDO a, i, a1, i1
           REQUEST                     d3aiai(a,i,a1,i1) a 
           PREPARE d2aiai(a,i,a1,i1) = d3aiai(a,i,a1,i1)
     ENDPARDO a, i, a1, i1
#
     PARDO b, j, b1, j1
           REQUEST                     d3bjbj(b,j,b1,j1) b 
           PREPARE d2bjbj(b,j,b1,j1) = d3bjbj(b,j,b1,j1)
     ENDPARDO b, j, b1, j1
#
     PARDO a, i, b, j
           REQUEST                   d3aibj(a,i,b,j) a 
           PREPARE d2aibj(a,i,b,j) = d3aibj(a,i,b,j)
     ENDPARDO a, i, b, j
#
     PARDO a, i 
           GET e3ai(a,i) 
           PUT e2ai(a,i) = e3ai(a,i) 
     ENDPARDO a, i 
#
     PARDO b, j 
           GET e3bj(b,j) 
           PUT e2bj(b,j) = e3bj(b,j) 
     ENDPARDO b, j 
#
     PARDO a, i 
           GET d3ai(a,i) 
           PUT d2ai(a,i) = d3ai(a,i) 
     ENDPARDO a, i 
#
     PARDO b, j 
           GET d3bj(b,j) 
           PUT d2bj(b,j) = d3bj(b,j) 
     ENDPARDO b, j 
#
     execute server_barrier
     execute sip_barrier
#
#    4 --> 3  
#    ---------------------------------------------------
#
     PARDO a, i, a1, i1
           REQUEST                     e4aiai(a,i,a1,i1) a 
           PREPARE e3aiai(a,i,a1,i1) = e4aiai(a,i,a1,i1)
     ENDPARDO a, i, a1, i1
#
     PARDO b, j, b1, j1
           REQUEST                     e4bjbj(b,j,b1,j1) b 
           PREPARE e3bjbj(b,j,b1,j1) = e4bjbj(b,j,b1,j1)
     ENDPARDO b, j, b1, j1
#
     PARDO a, i, b, j
           REQUEST                   e4aibj(a,i,b,j) a 
           PREPARE e3aibj(a,i,b,j) = e4aibj(a,i,b,j)
     ENDPARDO a, i, b, j
#
     PARDO a, i, a1, i1
           REQUEST                     d4aiai(a,i,a1,i1) a 
           PREPARE d3aiai(a,i,a1,i1) = d4aiai(a,i,a1,i1)
     ENDPARDO a, i, a1, i1
#
     PARDO b, j, b1, j1
           REQUEST                     d4bjbj(b,j,b1,j1) b 
           PREPARE d3bjbj(b,j,b1,j1) = d4bjbj(b,j,b1,j1)
     ENDPARDO b, j, b1, j1
#
     PARDO a, i, b, j
           REQUEST                   d4aibj(a,i,b,j) a 
           PREPARE d3aibj(a,i,b,j) = d4aibj(a,i,b,j)
     ENDPARDO a, i, b, j
#
     PARDO a, i 
           GET e4ai(a,i) 
           PUT e3ai(a,i) = e4ai(a,i) 
     ENDPARDO a, i 
#
     PARDO b, j 
           GET e4bj(b,j) 
           PUT e3bj(b,j) = e4bj(b,j) 
     ENDPARDO b, j 
#
     PARDO a, i 
           GET d4ai(a,i) 
           PUT d3ai(a,i) = d4ai(a,i) 
     ENDPARDO a, i 
#
     PARDO b, j 
           GET d4bj(b,j) 
           PUT d3bj(b,j) = d4bj(b,j) 
     ENDPARDO b, j 
#
     execute server_barrier
     execute sip_barrier
#
#    5 --> 4  
#    ---------------------------------------------------
#
     PARDO a, i, a1, i1
           REQUEST                     e5aiai(a,i,a1,i1) a 
           PREPARE e4aiai(a,i,a1,i1) = e5aiai(a,i,a1,i1)
     ENDPARDO a, i, a1, i1
#
     PARDO b, j, b1, j1
           REQUEST                     e5bjbj(b,j,b1,j1) b 
           PREPARE e4bjbj(b,j,b1,j1) = e5bjbj(b,j,b1,j1)
     ENDPARDO b, j, b1, j1
#
     PARDO a, i, b, j
           REQUEST                   e5aibj(a,i,b,j) a 
           PREPARE e4aibj(a,i,b,j) = e5aibj(a,i,b,j)
     ENDPARDO a, i, b, j
#
     PARDO a, i, a1, i1
           REQUEST                    T2new_aa(a,i,a1,i1) a 
           Taiai(a,i,a1,i1)         = T2new_aa(a,i,a1,i1)
           execute energy_denominator Taiai
           PREPARE d4aiai(a,i,a1,i1) = Taiai(a,i,a1,i1)
     ENDPARDO a, i, a1, i1
#
     PARDO b, j, b1, j1
           REQUEST                    T2new_bb(b,j,b1,j1) b 
           Tbjbj(b,j,b1,j1)         = T2new_bb(b,j,b1,j1)
           execute energy_denominator Tbjbj
           PREPARE d4bjbj(b,j,b1,j1) = Tbjbj(b,j,b1,j1)
     ENDPARDO b, j, b1, j1
#
     PARDO a, i, b, j
           REQUEST                  T2new_ab(a,i,b,j) a 
           Taibj(a,i,b,j)         = T2new_ab(a,i,b,j)
           execute energy_denominator Taibj
           PREPARE d4aibj(a,i,b,j) = Taibj(a,i,b,j)
     ENDPARDO a, i, b, j
#
     PARDO a, i 
           GET e5ai(a,i) 
           PUT e4ai(a,i) = e5ai(a,i) 
     ENDPARDO a, i 
#
     PARDO b, j 
           GET e5bj(b,j) 
           PUT e4bj(b,j) = e5bj(b,j) 
     ENDPARDO b, j 
#
     PARDO a, i 
           GET t1a_old(a,i) 
           PUT d4ai(a,i) = t1a_old(a,i) 
     ENDPARDO a, i 
#
     PARDO b, j 
           GET t1b_old(b,j) 
           PUT d4bj(b,j) = t1b_old(b,j) 
     ENDPARDO b, j 
#
     execute server_barrier
     execute sip_barrier
#
     ENDPROC MOVE4
#    -------------
#
# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
# 
# BEGIN MAIN PROGRAM 
# ------------------ 
#
      ecrit = cc_conv  
#
      CREATE t1a_old 
      CREATE t1a_new 
      CREATE t1b_old 
      CREATE t1b_new 
#
      CREATE D0ai
      CREATE D1ai
      CREATE D2ai
      CREATE D3ai
      CREATE D4ai
      CREATE D5ai
#
      CREATE D0bj
      CREATE D1bj
      CREATE D2bj
      CREATE D3bj
      CREATE D4bj
      CREATE D5bj
#
      CREATE e1ai
      CREATE e2ai
      CREATE e3ai
      CREATE e4ai
      CREATE e5ai
#
      CREATE e1bj
      CREATE e2bj
      CREATE e3bj
      CREATE e4bj
      CREATE e5bj 
#
      EXECUTE SERVER_BARRIER  
#
# Perform partial two-electron transformation 
# ------------------------------------------- 
#
      CALL TRAN_PPPP 
#
# Get initial second-order guess 
# ------------------------------ 
#
      CALL IGUESS_UHF
      EXECUTE SIP_BARRIER  
      EXECUTE SERVER_BARRIER  
#
# Calculate the second-order energy 
# --------------------------------- 
#
      CALL ENERGY_NEW 
      EXECUTE SIP_BARRIER  
      EXECUTE SERVER_BARRIER  
#
# Start iterations
# ---------------- 
#
      DO KITER 
#
#        Zero-out the new two-particle amplitude arrays
#        ---------------------------------------------- 
#
         CALL T2NEW_ZERO
         EXECUTE SIP_BARRIER   
         EXECUTE SERVER_BARRIER   
#
#        Calculate new one-particle amplitudes 
#        ------------------------------------- 
#
         CALL T1ANEW 
         CALL T1BNEW 
#
#        Calculate new two-particle amplitudes 
#        ------------------------------------- 
#
         CALL T2NEWAA  
         CALL T2NEWBB  
         CALL T2NEWAB  
         EXECUTE SERVER_BARRIER   
#
         CALL WMINJ 
         CALL AOLADDER # WAEBF  
         CALL WMEBJ 
#
#        Wait for all to finish 
#        ---------------------- 
         EXECUTE SIP_BARRIER   
         EXECUTE SERVER_BARRIER   
#
         CALL UPDATET1 
         CALL UPDATET2 
#
         EXECUTE SIP_BARRIER   
         EXECUTE SERVER_BARRIER   
         CALL ENERGY_NEW 
         EXECUTE SIP_BARRIER  
         EXECUTE SERVER_BARRIER   
#
         if kiter == 2
#
#           Get uptated amplitudes based on DIIS procedure.
#           -----------------------------------------------
#
            CALL DIIS1
#
         endif # kiter == 2
#
         if kiter == 3
#
#           Get uptated amplitudes based on DIIS procedure.
#           -----------------------------------------------
#
            CALL DIIS2
#
         endif # kiter == 3
#
         if kiter == 4
#
#           Get uptated amplitudes based on DIIS procedure.
#           -----------------------------------------------
#
            CALL DIIS3
#
         endif # kiter == 4
#
         if kiter >= 5
#
#           Get uptated amplitudes based on DIIS procedure.
#           -----------------------------------------------
#
            CALL DIIS4
            CALL MOVE4
#
         endif # kiter == 5
#
         CALL MOVET1
         CALL MOVET2
         EXECUTE SIP_BARRIER   
         EXECUTE SERVER_BARRIER   
#
#        Check on convergence 
#        -------------------- 
#
         IF ecorrT < eold 
            ediff = eold - ecorrT 
            IF ediff < ecrit 
               exit # kiter 
            ENDIF
         ENDIF   
#
         IF ecorrT > eold 
            ediff = ecorrT - eold  
            IF ediff < ecrit 
               exit # kiter 
            ENDIF
         ENDIF   
#
#        Reset eold --> enew 
#        ------------------- 
#
         eold = ecorrT 
#
      ENDDO KITER 
#
      totenerg  = ecorrT  
      totenerg += scfeneg  
      scfeneg   = totenerg 
      execute print_scalar totenerg  
#
# Write integrals and first-order amplitudes to file
# --------------------------------------------------
#
#     CALL WRITE_2EL   
#
      execute blocks_to_list                t1a_old
      execute blocks_to_list                t1b_old
      execute blocks_to_list                T2old_aa
      execute blocks_to_list                T2old_ab
      execute blocks_to_list                T2old_bb
#
      execute sip_barrier
      execute server_barrier
      execute write_blocks_to_list 
      execute sip_barrier
      execute server_barrier
#
                           ENDSIAL PCCSD_O1     
#
#----------------------------------------------------------------------------- 
#

