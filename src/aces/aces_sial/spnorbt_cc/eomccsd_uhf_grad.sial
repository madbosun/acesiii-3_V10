#  Copyright (c) 2003-2010 University of Florida
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  The GNU General Public License is included in this distribution
#  in the file COPYRIGHT.
                       SIAL ONE_GRAD_CO       
#
# This SIAL program computes the two particle density 
# matrice but only stores one piece at a time similar to dens6.sial. 
# The one-particle intermediates are computed and stored.  
# The two-particle density matrices have been tested and are CORRECT.  
# The one-particle intermediates have been tested and are CORRECT. 
# Contributions coming from Vabcd --> Iab are computed in AO basis and CHECKED. 
# Contributions coming from Vabcd --> Iai are computed in AO basis and CHECKED. 
#
# This version also computes Dai iteratively in the final step --> Tested and Working 
#
# Iij_aa --> matches aces 
# Iij_bb --> matches aces 
#
# Iab_aa --> matches aces 
# Iab_bb --> matches aces 
#
# Iai_aa --> matches aces 
# Iai_bb --> matches aces 
#
# Iia_aa --> matches aces 
# Iia_bb --> matches aces 
#
# The integral files are split --> IN PROGRESS 
# and 
# antisymmetrized --> IN PROGRESS 
#
# ---------------------------------------
# PROCEDURE                  OPTIMIZATION 
# ---------------------------------------
# DIJKL                      COMPLETE  
# DABCD                      COMPLETE  
# DIBJA                      IN PROGRESS  
# DIJAB                      COMPLETE   
# DIJKA                      PARTIAL  
# DABCI                      PARTIAL  
#
# I11                        COMPLETE 
# IABDIRECT                  COMPLETE 
# IFOCK                      COMPLETE 
# DAI                        COMPLETE 
#
# DAB                        COMPLETE  
# DIJ                        COMPLETE  
# GAE                        COMPLETE --> REDO????   
# GMI                        COMPLETE  
# TAU                        COMPLETE  
# ---------------------------------------
#
# BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
#
# Declare indeces
# ---------------
#
      INDEX  jatom    = 1, natoms
      index kiter    = 1, cc_iter  
      INDEX  ziter    = 1, cc_iter

      aoindex mu     = 1, norb
      aoindex nu     = 1, norb
      aoindex lambda = 1, norb
      aoindex sigma  = 1, norb
#
      moaindex i = baocc, eaocc
      moaindex i1= baocc, eaocc
      moaindex i2= baocc, eaocc
      moaindex i3= baocc, eaocc
      moaindex i4= baocc, eaocc
#
      moaindex a = bavirt, eavirt
      moaindex a1= bavirt, eavirt
      moaindex a2= bavirt, eavirt
      moaindex a3= bavirt, eavirt
      moaindex a4= bavirt, eavirt
#
      mobindex j = bbocc, ebocc
      mobindex j1= bbocc, ebocc
      mobindex j2= bbocc, ebocc
      mobindex j3= bbocc, ebocc
      mobindex j4= bbocc, ebocc
#
      mobindex b = bbvirt, ebvirt
      mobindex b1= bbvirt, ebvirt
      mobindex b2= bbvirt, ebvirt
      mobindex b3= bbvirt, ebvirt
      mobindex b4= bbvirt, ebvirt
#
      moaindex p = baocc, eavirt
      moaindex p1= baocc, eavirt
      moaindex p2= baocc, eavirt
      moaindex p3= baocc, eavirt
#
      mobindex q = bbocc, ebvirt
      mobindex q1= bbocc, ebvirt
      mobindex q2= bbocc, ebvirt
      mobindex q3= bbocc, ebvirt

      INDEX  kindex12 = 1, 12
      INDEX  kindex26 = 1, 26
      INDEX  indone   = 1, 1
      INDEX  kroot    = 1, 12
      INDEX  j20      = 1, 20
      INDEX  j21      = 1, 21
#
#     Intermediate arrays used in Xi and Density
#
      SERVED  L2R2_aaaa (i,a1,i1,a)   #
      SERVED  L2R2_bbbb (j,b1,j1,b)   #
      SERVED  L2R2_abba (i,b1,j1,a)   #  These can be computed on the fly...
      SERVED  L2R2_baab (j,a1,i1,b)   #  So I don't know what is best...
      SERVED  L2R2_abab (i,b1,i1,b)   #  
      SERVED  L2R2_baba (j,a1,j1,a)   #  

      SERVED  L2T2_aaaa (i,a1,i1,a)   #
      SERVED  L2T2_bbbb (j,b1,j1,b)   #
      SERVED  L2T2_abba (i,b1,j1,a)   #  These can be computed on the fly...
      SERVED  L2T2_baab (j,a1,i1,b)   #  So I don't know what is best...
      SERVED  L2T2_abab (i,b1,i1,b)   #  
      SERVED  L2T2_baba (j,a1,j1,a)   #  

      SERVED  RTAU_aa (a,i,a1,i1)
      SERVED  RTAU_bb (b,j,b1,j1)
      SERVED  RTAU_ab (a,i,b,j)

#
#     EOM Arrays
#
#
#     Distributed arrays!
#
#     
      DISTRIBUTED  HBAR_aa (a,a1)
      DISTRIBUTED  HBAR_bb (b,b1)
      DISTRIBUTED  HBAR_ii (i1,i)
      DISTRIBUTED  HBAR_jj (j1,j)
      DISTRIBUTED  HBAR_ia (i,a)
      DISTRIBUTED  HBAR_jb (j,b)
      
      local LHBAR_ii(i1,i)
      local LHBAR_jj(j1,j)
      local LHBAR_ia(i,a)
      local LHBAR_jb(j,b)
      local LHBAR_aa(a,a1)
      local LHBAR_bb(b,b1)
      LOCAL  LR1W_jj (j,j2)
      LOCAL  LR1W_bb  (b1,b2)
      LOCAL  LR1W_bj  (b1,j1)
      LOCAL  LR2W2_bj (b1,j1)
      LOCAL  LR2W2_bb (b1,b2)
      LOCAL  LR2W2_jj (j,j2)
      LOCAL  LFae_b (b,b1)
      LOCAL  L_Z1_bj (b,j)
      LOCAL  L_Z2_bj (b,j)
      LOCAL  L_Z_jj (j,j1)
      LOCAL  L_Z_bb (b,b1)
      LOCAL  L_Y_jj (j,j1)
      LOCAL  L_Y_bb (b,b1)
      LOCAL  LR1L2_bj (b,j1)
      LOCAL  LR2L1_bj (b,j1)
      LOCAL  LR2L2_bb (b,b1)
      LOCAL  LR2L2_jj (j,j1)
      LOCAL  LT2L2_bb (b,b1)
      LOCAL  LT2L2_jj (j,j1)

      LOCAL  LR1W_ii  (i1,i2)
      LOCAL  LR1W_aa  (a1,a2)
      LOCAL  LR1W_ai  (a1,i1)
      LOCAL  LR2W2_ai (a1,i1)
      LOCAL  LR2W2_aa (a1,a2)
      LOCAL  LR2W2_ii (i1,i2)
      LOCAL  LFmi_a (i1,i)
      LOCAL  LFmi_b (j1,j)
      LOCAL  LFae_a (a,a1)
      LOCAL  L_Z1_ai (a,i)
      LOCAL  L_Z2_ai (a,i)
      LOCAL  L_Z_ii (i,i1)
      LOCAL  L_Z_aa (a,a1)
      LOCAL  L_Y_ii (i,i1)
      LOCAL  L_Y_aa (a,a1)
      LOCAL  LR1L2_ai (a,i1)
      LOCAL  LR2L1_ai (a,i1)
      LOCAL  LR2L2_aa (a,a1)
      LOCAL  LR2L2_ii (i,i1)
      LOCAL  LT2L2_aa (a,a1)
      LOCAL  LT2L2_ii (i,i1)


      DISTRIBUTED  Mxj (sigma,j)
      DISTRIBUTED  Mxi (sigma,i)
      
      DISTRIBUTED  Niijj (i,i1,j,j1)
      DISTRIBUTED  Niiii (i,i1,i2,i3)
      DISTRIBUTED  Njjjj (j,j1,j2,j3)
      
      DISTRIBUTED  R2L2_iiii (i2,i,i3,i1)
      DISTRIBUTED  R2L2_jjjj (j2,j,j3,j1)
      DISTRIBUTED  R2L2_iijj (i2,i,j2,j)
      DISTRIBUTED  R2G2_iiii (i2,i,i3,i1)
      DISTRIBUTED  R2G2_jjjj (j2,j,j3,j1)
      DISTRIBUTED  R2G2_iijj (i2,i,j2,j)
#
#     Filler distributed arrays that get created
#     and deleted immediately to put data in local
#     arrays
#     
      TEMP  Raiai (a1,i1,a,i)
      TEMP  R1aiai (a1,i1,a,i)
      TEMP  R2aiai (a1,i,a,i1)
      TEMP  R3aiai (a,i1,a1,i)
      TEMP  R4aiai (a,i1,a1,i)
      TEMP  Rbjbj (b1,j1,b,j)
      TEMP  R1bjbj (b1,j1,b,j)
      TEMP  R2bjbj (b1,j,b,j1)
      TEMP  R3bjbj (b,j1,b1,j)
      TEMP  R4bjbj (b,j1,b1,j)

      TEMP  tba (b,a)
      TEMP  tab (a,b)

      temp tpp(p,p1)
      temp t1pp(p,p1)
      temp t2pp(p,p1)
      temp t3pp(p,p1)
      temp t4pp(p,p1)
      temp tai(a,i)
      temp tai1(a,i)
      temp tai2(a,i)
      temp tai3(a,i)
      temp t1ai(a,i)
      temp t2ai(a,i)
      temp t3ai(a,i)
      temp tqq(q,q1)
      temp t1qq(q,q1)
      temp t2qq(q,q1)
      temp t3qq(q,q1)
      temp t4qq(q,q1)
      temp tbj(b,j)
      temp tbj1(b,j)
      temp tbj2(b,j)
      temp tbj3(b,j)
      temp t1bj(b,j)
      temp t2bj(b,j)
      temp t3bj(b,j)

      TEMP  Tij (i,j)
      TEMP  Tijib (i,j,i1,b)
      TEMP  T1ijib (i,j,i1,b)
      TEMP  Tjija (j,i,j1,a)
      TEMP  T1jija (j,i,j1,a)
      TEMP  Tjaib (j,a,i,b)
      TEMP  T1jaib (j,a,i,b)
      TEMP  T2jaib (j,a,i,b)
      TEMP  Tjabi (j,a,b,i)
      TEMP  T1jabi (j,a,b,i)
      TEMP  Tibja (i,b,j,a)
      TEMP  T1ibja (i,b,j,a)
      TEMP  tibij (i,b,i1,j)
      TEMP  tjaji (j,a,j1,i)
      TEMP  t1jaji (j,a,j1,i)
      TEMP  t1ibij (i,b,i1,j)
      TEMP  Tibaj (i,b,a,j)
      TEMP  T1ibaj (i,b,a,j)
      TEMP  Tjaaj (j,a,a1,j1)

      TEMP  Tajbi (a,j,b,i)
      TEMP  T1ajbi (a,j,b,i)

      temp Tiibj(i,i1,b,j)
      temp tbiaj (b,i3,a3,j2)
      temp T1iibj(i,i1,b,j)
      temp Tjjai(j,j1,a,i)
      temp T1jjai(j,j1,a,i)

      temp  tjbjj (j,b,j1,j2)
      temp  taijj (a,i,j,j1)

      temp T1xaai(mu,a,a1,i)
      temp T1aajj(a1,a,j,j1)
      temp T1piqj(p,i,q,j)  
      temp T1jbii(j,b,i,i1)
      temp T1bbii(b1,b,i,i1)
      temp T1jbbj(j,b1,b,j1)
      temp T1bbjj(b1,b,j,j1)
      temp T1aaii(a1,a,i,i1)
      temp T1ixbj(i,mu,b,j)
      temp T1xabj(mu,a,b,j)
      temp T1xbbj(mu,b1,b,j)
      temp T1xajj(mu,a,j,j1)
      temp T1jxbj(j,mu,b,j1)
      temp T1xbai(mu,b,a,i)
      temp T1xjqj(mu,j,q,j1)



      temp T1ixai(i,mu,a,i1)
      temp T1ixbi(i,mu,b,i1)
      temp T1xbii(mu,b,i,i1)

      temp T1xaii(mu,a,i,i1)
      temp T1xbjj(mu,b,j,j1)
      temp T1jxxj(j1,nu,lambda,j)
      temp T1xxai(mu,nu,a,i)
      temp T1xxbj(mu,nu,b,j)
      temp T1xixj(mu,i,nu,j)
      temp T1xiqj(mu,i,q,j)

      LOCAL  Lxibj (lambda,i,b,j)
      LOCAL  Lxjbj (lambda,j,b1,j1)
      LOCAL  Lxiai (lambda,i,a1,i1)

      LOCAL  Laiai2(a,i,a1,i1)
      LOCAL  Laiai4(a,i,a1,i1)
      LOCAL  Laiai5(a,i,a1,i1)
      LOCAL  L1iiaa (i,i1,a,a1)
      LOCAL  LLbjbj (b,j,b1,j1)
      LOCAL  Lbjbj2 (b,j,b1,j1)
      LOCAL  Lbjbj3 (b,j,b1,j1)
      LOCAL  Lbjbj4 (b,j,b1,j1)
      LOCAL  Lbjbj5 (b,j,b1,j1)
      LOCAL  L1bjbj (b,j,b1,j1)
      LOCAL  Ljjbj (j,j1,b,j)
      LOCAL  L1jjbj (j,j1,b,j)
      LOCAL  Liiai (i,i1,a,i)
      LOCAL  L1iiai (i,i1,a,i)
      LOCAL  Ljjai (j,j1,a,i)
      LOCAL  L1jjai (j,j1,a,i)
      LOCAL  Liibj (i,i1,b,j)
      LOCAL  L1iibj (i,i1,b,j)
      LOCAL  Laajb (a,a1,j,b)
      LOCAL  L1aajb (a,a1,j,b)
      LOCAL  Lbbia (b,b1,i,a)
      LOCAL  L1bbia (b,b1,i,a)
      LOCAL  Libja (i,b,j,a)
      LOCAL  L1ibja (i,b,j,a)
      LOCAL  L2ibja (i,b,j,a)
      LOCAL  Liajb (i,a,j,b)
      LOCAL  Libji (i2,b3,j3,i1)
      LOCAL  Ljaij (j2,a3,i3,j1)
      LOCAL  L1aaia (a,a1,i,a2)
      LOCAL  Laaia  (a,a1,i,a2)
      LOCAL  L1bbjb (b,b1,j,b2)
      LOCAL  Lbbjb  (b,b1,j,b2)
      LOCAL  Liaia  (i,a,i1,a1)
      LOCAL  L1iaia  (i,a,i1,a1)
      LOCAL  Ljbjb (j,b,j1,b1)
      LOCAL  L1jbjb (j,b,j1,b1)

      LOCAL  Laibj (a,i,b,j)
      LOCAL  Laibj4 (a,i,b,j)
      LOCAL  Laibj5 (a,i,b,j)
      LOCAL  L1aibj (a,i,b,j)
      LOCAL  Laibj2 (a,i,b,j)
      LOCAL  Laibj3 (a,i,b,j)
      LOCAL  Lajbi4 (a,j,b,i)
      LOCAL  Lajbi5 (a,j,b,i)
      LOCAL  LLaibj (a,i,b,j)

      LOCAL  Lajib  (a,j,i,b)
      LOCAL  L1ajib  (a,j,i,b)
      LOCAL  LLbjai (b,j,a,i)
      LOCAL  Lijij (i,j,i1,j1)
      LOCAL  L1ijij (i,j,i1,j1)

      LOCAL  LLaiai (a,i,a1,i1)
      LOCAL  L1aiai (a,i,a1,i1)
      LOCAL  L2aiai (a,i,a1,i1)

      LOCAL  Ljjjj  (j2,j,j3,j1)
      LOCAL  L1jjjj (j2,j,j3,j1)
      LOCAL  L2jjjj (j,j1,j2,j3)
      LOCAL  L4jjjj (j,j1,j2,j3)
      LOCAL  L3jjjj (j,j3,j1,j2)

      LOCAL  lii (i,i1)
      LOCAL  l1ii (i,i1)
      LOCAL  ljj (j,j1)
      LOCAL  l1jj (j,j1)

      LOCAL  LLaa (a,i,nu,i1)
      LOCAL  LLbb (b,j,nu,j1)
      LOCAL  LLab (a,i,nu,j)

      LOCAL  Laiii (a1,i2,i,i1)
      LOCAL  Lbjjj (b1,j2,j,j1)
      LOCAL  Laijj (a,i,j1,j)

      LOCAL  Liiii  (i2,i,i3,i1)
      LOCAL  L1iiii (i2,i,i3,i1)
      LOCAL  L2iiii (i,i1,i2,i3)
      LOCAL  L4iiii (i,i1,i2,i3)
      LOCAL  L3iiii (i,i3,i1,i2)

      LOCAL  Liijj  (i2,i,j2,j)
      LOCAL  L1iijj (i2,i,j2,j)
      LOCAL  L2iijj (i,i2,j,j2)

      LOCAL  Liiaa  (i,i1,a,a1)
      LOCAL  Ljjbb  (j,j1,b,b1)
      LOCAL  Ljiba  (j,i,b,a)
      LOCAL  Lppqq  (p,p1,q,q1)
      LOCAL  Lpqpq  (p,q,p1,q1)
      LOCAL  Lqpqp  (q,p,q1,p1)
      LOCAL  Lpqqp  (p,q,q1,p1)
      LOCAL  Lqppq  (q,p,p1,q1)
      LOCAL  Lqqpp  (q,q1,p,p1)

      LOCAL  Liaii (i2,a3,i3,i1)
      LOCAL  Laajj  (a,a1,j1,j)
      LOCAL  Ljaja  (j,a,j1,a1)
      LOCAL  L1jaja  (j,a,j1,a1)
      LOCAL  Liibb  (i,i1,b,b1)
      LOCAL  L1iibb  (i,i1,b,b1)
      LOCAL  L2iibb  (i,i1,b,b1)

      LOCAL  Lijab (i,j1,a2,b3)
      LOCAL  Labij (a,b,i,j)
      LOCAL  Laaii (a,a1,i,i1)

      local Ljaib  (j1,a2,i2,b1)
      local L1jaib  (j1,a2,i2,b1)
      local lbiaj (b,i,a,j)
      local lbiaj1(b,i,a,j)
      local lbiaj2(b,i,a,j)

      local laibb (a,i,b,b1)
      local lbaib (b,a,i,b1)
      local lbaij (b,a,i,j)

      local Lbija (b2,i2,j1,a1)
      local Laabj(a1,a,b,j)
      local Lbbbj(b2,b1,b,j)
      local Lbbai(b1,b,a,i)
      local Lxbjj(mu,b,j,j1)
      local Lxabj(mu,a,b,j)
      local Lixbj(i,mu,b,j) 
      local Lxajj(mu,a,j,j1)
      local Lxiqj(mu,i,q,j)
      local Lxbai(mu,b,a,i)
      local Lxbii(mu,b,i,i1)
      local L1xbbj(mu,b,b1,j)
      local Ljxbj(j,mu,b,j1)

      local Lixai(i,mu,a,i1)
      local Lxjqj(mu,j,q,j1)
      local L1xaai(mu,a,a1,i)
      local Lxxxi(mu,nu,lambda,i)
      local Lxxxj(mu,nu,lambda,j)
      local L1xxxi(mu,nu,lambda,i)
      local L2xxxi(mu,lambda,nu,i)
      local L3xxxi(lambda,mu,nu,i)
      local L1xxxj(mu,nu,lambda,j)
      local L2xxxj(mu,lambda,nu,j)
      local L3xxxj(lambda,mu,nu,j)
      local Lxixi(mu,i,nu,i1)
      local Lxxii(mu,nu,i,i1)
      local Lixxi(i,mu,nu,i1)
      local Lxjxj(mu,j,nu,j1)
      local Lxxjj(mu,nu,j,j1)
      local Ljxxj(j,mu,nu,j1)
      local Lxxai(mu,nu,a,i)
      local Lxxbj(mu,nu,b,j)
      local Lxixj(mu,i,nu,j)
      local Lixxj(i,mu,nu,j)
      local Lxipi(mu,i,p,i1)
      local Lxaii(mu,a,i,i1)

      DISTRIBUTED  DIS_OO1_A (i,i1)
      DISTRIBUTED  DIS_OO2_A (i,i1)
      DISTRIBUTED  DIS_OO3_A (i,i1)
      DISTRIBUTED  DIS_OO4_A (i,i1)
      DISTRIBUTED  DIS_VV1_A (a,a1)
      DISTRIBUTED  DIS_VV2_A (a,a1)
      DISTRIBUTED  DIS_VV3_A (a,a1)
      DISTRIBUTED  DIS_VV4_A (a,a1)
      DISTRIBUTED  DIS_VO1_A (a,i)
      DISTRIBUTED  DIS_VO2_A (a,i)
      DISTRIBUTED  DIS_VO3_A (a,i)
      DISTRIBUTED  DIS_VO4_A (a,i)
      DISTRIBUTED  DIS_OV1_A (i,a)
      DISTRIBUTED  DIS_OV2_A (i,a)
      DISTRIBUTED  DIS_OV3_A (i,a)
      DISTRIBUTED  DIS_OV4_A (i,a)

      DISTRIBUTED  DIS_OO1_B (j,j1)
      DISTRIBUTED  DIS_OO2_B (j,j1)
      DISTRIBUTED  DIS_OO3_B (j,j1)
      DISTRIBUTED  DIS_OO4_B (j,j1)
      DISTRIBUTED  DIS_VV1_B (b,b1)
      DISTRIBUTED  DIS_VV2_B (b,b1)
      DISTRIBUTED  DIS_VV3_B (b,b1)
      DISTRIBUTED  DIS_VV4_B (b,b1)
      DISTRIBUTED  DIS_VO1_B (b,j)
      DISTRIBUTED  DIS_VO2_B (b,j)
      DISTRIBUTED  DIS_VO3_B (b,j)
      DISTRIBUTED  DIS_VO4_B (b,j)
      DISTRIBUTED  DIS_OV1_B (j,b)
      DISTRIBUTED  DIS_OV2_B (j,b)
      DISTRIBUTED  DIS_OV3_B (j,b)
      DISTRIBUTED  DIS_OV4_B (j,b)
#
#     Arrays used in Solve_Zeta
#
      DISTRIBUTED  XI1_A (a,i)
      DISTRIBUTED  XI1_B (b,j)
      DISTRIBUTED  VCHACT1A (a,i)
      DISTRIBUTED  VCHACT1B (b,j)
      DISTRIBUTED  VCACT1A (a,i)
      DISTRIBUTED  VCACT1B (b,j)
      DISTRIBUTED  VCONV1A (a,i)
      DISTRIBUTED  VCONV1B (b,j)
      DISTRIBUTED  VC1A (a,i)
      DISTRIBUTED  VC1B (b,j)
      DISTRIBUTED  VCH1A (a,i)
      DISTRIBUTED  VCH1B (b,j)
      DISTRIBUTED  VTEMP1A (a,i)
      DISTRIBUTED  VTEMP1B (b,j)
      DISTRIBUTED  Faa (a,a1)
      DISTRIBUTED  Fbb (b,b1)
      DISTRIBUTED  Fab (a,b)
      DISTRIBUTED  D2aa (a,i,a1,i1)
      DISTRIBUTED  D2bb (b,j,b1,j1)

      DISTRIBUTED  DDaa (a,a1)
      DISTRIBUTED  DDbb (b,b1)
      DISTRIBUTED  DDii (i,i1)
      DISTRIBUTED  DDia (i,a)
      DISTRIBUTED  DDjj (j,j1)
      DISTRIBUTED  DDjb (j,b)
      DISTRIBUTED  Fae_a (a,a1)
      DISTRIBUTED  Fae_b (b,b1)
      DISTRIBUTED  Fmi_a (i1,i)
      DISTRIBUTED  Fmi_b (j1,j)

      DISTRIBUTED  Wmnijab (i,i1,j,j1)
      DISTRIBUTED  Wmnijaa (i,i1,i2,i3)
      DISTRIBUTED  Wmnijbb (j,j1,j2,j3)

      DISTRIBUTED  BOMB_SHELL (p,p1) # Never create to force an exit; very stupid thing to do

      DISTRIBUTED  R1A_VECS (a,i,kroot)
      DISTRIBUTED  R1B_VECS (b,j,kroot)
      DISTRIBUTED  L1A_VECS (i,a,kroot)
      DISTRIBUTED  L1B_VECS (j,b,kroot)
      DISTRIBUTED  R1A (a,i)
      DISTRIBUTED  R1B (b,j)
      DISTRIBUTED  L1A (i,a)
      DISTRIBUTED  L1B (j,b)

      TEMP         TEE (kroot,indone)
      DISTRIBUTED  REE (kroot,indone)
      DISTRIBUTED  LEE (kroot,indone)
      SERVED  R2AA_VECS (a,i,a1,i1,kroot)
      SERVED  R2AB_VECS (a,i,b ,j ,kroot)
      SERVED  R2BB_VECS (b,j,b1,j1,kroot)
      SERVED  L2AA_VECS (i,a,i1,a1,kroot)
      SERVED  L2AB_VECS (i,a,j ,b ,kroot)
      SERVED  L2BB_VECS (j,b,j1,b1,kroot)

      SERVED  R2AA (a,i,a1,i1)
      SERVED  R2BB (b,j,b1,j1)
      SERVED  R2AB (a,i,b,j)
      SERVED  L2AA (i,a,i1,a1)
      SERVED  L2BB (j,b,j1,b1)
      SERVED  L2AB (i,a,j,b)

#     
#     Hbar arrays
#
#
      served HBAR_iiii(i,i1,i2,i3)
      served HBAR_jjjj(j,j1,j2,j3)
      served HBAR_iijj(i,i1,j,j1)
#
#
      served HBAR_AIBC_aaaa(a,a1,i,a2)
      served HBAR_AIBC_bbbb(b,b1,j,b2)
      served HBAR_AIBC_aabb(a,a1,j,b2)
      served HBAR_AIBC_bbaa(b,b1,i,a2)
#
      served HBAR_JKIA_aaaa(i1,i,i2,a)
      served HBAR_JKIA_bbbb(j1,j,j2,b)
      served HBAR_JKIA_aabb(i1,i,j2,b)
      served HBAR_JKIA_bbaa(j1,j,i2,a)
#
      served HBAR_IAJK_aaaa(i,i1,a,i2)
      served HBAR_IAJK_aabb(i,i1,b,j)
      served HBAR_IAJK_bbaa(j,j1,a,i)
      served HBAR_IAJK_bbbb(j,j1,b,j2)
#
      served HBAR_AJIB_aaaa(i1,a1,a,i)
      served HBAR_AJIB_bbbb(j1,b1,b,j)
      served HBAR_AJIB_aabb(i,a,b,j)
      served HBAR_AJIB_BBAA(j,b,a,i)
      served HBAR_AJIB_iibb(i1,i,b,b1)
      served HBAR_AJIB_jjaa(j1,j,a,a1)
#
      served HBAR_ABCI_aaaa(a,a1,a2,i)
      served HBAR_ABCI_bbbb(b,b1,b2,j)
      served HBAR_ABCI_aabb(a,a1,b,j)
      served HBAR_ABCI_bbaa(b,b1,a,i)

#
#     Hbar intermediates
#
      served WHIAAI(i,a,a1,i1)
      served WHJBBJ(j,b,b1,j1)
      served WHIABJ(i,a,b1,j1)
      served WHJBAI(j,b,a1,i1)
      served WHIIBB(i,i1,b,b1)
      served WHJJAA(j,j1,a,a1)

      served NIAAI(i,a,a1,i1)
      served NJBBJ(j,b,b1,j1)
      served NJBAI(j,b,a,i)
      served NIABJ(i,a,b,j)
      served NJJAA(j1,j,a1,a)
      served NIIBB(i1,i,b1,b)
#
#     Served arrays in Xi and Zeta routines!
#
      SERVED  XI2_AA (a,i,a1,i1)
      SERVED  XI2_BB (b,j,b1,j1)
      SERVED  XI2_AB (a,i,b,j)
      
      SERVED  VCONV2AA(a,i,a1,i1)
      SERVED  VCONV2BB(b,j,b1,j1)
      SERVED  VCONV2AB(a,i,b,j)
      
      SERVED  VCACT2AA(a,i,a1,i1)
      SERVED  VCACT2BB(b,j,b1,j1)
      SERVED  VCACT2AB(a,i,b,j)
      
      SERVED  VCHACT2AA(a,i,a1,i1)
      SERVED  VCHACT2BB(b,j,b1,j1)
      SERVED  VCHACT2AB(a,i,b,j)
      
      SERVED  VC2AA(a,i,a1,i1)
      SERVED  VCH2AA(a,i,a1,i1)
      SERVED  VTEMP2AA(a,i,a1,i1)
      SERVED  VC2BB(b,j,b1,j1)
      SERVED  VCH2BB(b,j,b1,j1)
      SERVED  VTEMP2BB(b,j,b1,j1)
      
      SERVED  VC2AB(a,i,b1,j1)
      SERVED  VCH2AB(a,i,b,j)
      SERVED  VTEMP2AB(a,i,b,j)
      SERVED  VTEMP2AA1(a,i,a1,i1)
      SERVED  VTEMP2BB1(b,j,b1,j1)
      SERVED  VTEMP2AB1(a,i,b1,j1)
#
#     CONVER Procedure
#
      SERVED  Vxxaa (mu,nu,a1,a)
      SERVED  Vxxbb (mu,nu,b1,b)
      SERVED  Gxxaa (mu,nu,a1,a)
      SERVED  Gxxbb (mu,nu,b1,b)
      SERVED  Vaaaa (a3,a2,a1,a)
      SERVED  Vbbbb (b3,b2,b1,b)
      SERVED  Vaabb (a3,a2,b1,b)
      SERVED  Vbbaa (b3,b2,a1,a)
#
#     Integral Transform
#
      SERVED  Vxixj (mu,i,nu,j)
      SERVED  Vxiqj (mu,i,q,j)
      SERVED  Vxajj (mu,a,j,j1)
      SERVED  Vxabj (mu,a,b,j)
      SERVED  Vxxij (mu,nu,i,j)
      SERVED  Vixxj (i,mu,nu,j)
      SERVED  Vixbj (i,mu,b,j)
      SERVED  Vxbii (mu,b,i,i1)
      SERVED  Vxbai (mu,b,a,i)
      SERVED  Vxxxi (mu,nu,lambda,i)
      SERVED  Vxixi (mu,i1,lambda,i)
      SERVED  Vxxii (mu,nu,i1,i)
      SERVED  Vixxi (i1,nu,lambda,i)
      SERVED  Vxipi (mu,i,p,i1)
      SERVED  Vixai (i,mu,a,i1)
      SERVED  Vxaii (mu,a,i,i1)
      SERVED  Vxaai (mu,a1,a,i)
      SERVED  Vxxai (mu,nu,a,i)
      SERVED  Vxxxj (mu,nu,lambda,j)
      SERVED  Vxjxj (mu,j1,lambda,j)
      SERVED  Vxxjj (mu,nu,j1,j)
      SERVED  Vjxxj (j1,nu,lambda,j)
      SERVED  Vxjqj (mu,j,q,j1)
      SERVED  Vjxbj (j,mu,b,j1)
      SERVED  Vxbjj (mu,b,j,j1)
      SERVED  Vxbbj (mu,b1,b,j)
      SERVED  Vxxbj (mu,nu,b,j)

      SERVED  Mxxxj (mu,lambda,nu,j)
      SERVED  Mxxbj (mu,lambda,b,j)
      SERVED  Mxabj (mu,a,b,j)
      SERVED  Mxaai (mu,a1,a,i)
      SERVED  Mxbbj (mu,b1,b,j)
      SERVED  Mxxxi (mu,lambda,nu,i)
      SERVED  Mxxai (mu,lambda,a,i)
      SERVED  Mxbai (mu,b,a,i)
      SERVED  Njjai (j,a1,j3,i2)
      SERVED  Niibj (i1,b,i,j)
      SERVED  Niiai (i1,a,i,i2)
      SERVED  Njjbj (j1,b,j,j2)

      temp dx1(mu,nu,lambda,sigma)
      temp dy1(mu,nu,lambda,sigma)
      temp dz1(mu,nu,lambda,sigma)
      temp dx2(mu,nu,lambda,sigma)
      temp dy2(mu,nu,lambda,sigma)
      temp dz2(mu,nu,lambda,sigma)
      temp dx3(mu,nu,lambda,sigma)
      temp dy3(mu,nu,lambda,sigma)
      temp dz3(mu,nu,lambda,sigma)
      temp dx4(mu,nu,lambda,sigma)
      temp dy4(mu,nu,lambda,sigma)
      temp dz4(mu,nu,lambda,sigma)

#
# Arrays used in transformation for AO2 algorithm
# -----------------------------------------------
#
      temp tmxxxj(mu,lambda,nu,j)
      temp t1mxxxj(mu,lambda,nu,j)
      temp tmxxbj(mu,lambda,b,j)
      temp t1mxxbj(mu,lambda,b,j)
      temp tmxabj(mu,a,b,j)
      temp t1mxabj(mu,a,b,j)
      temp tmaabj(a1,a,b,j)
      temp t1maabj(a1,a,b,j)
#
      temp tmxbbj(mu,b1,b,j)
      temp t1mxbbj(mu,b1,b,j)
      temp tmbbbj(b2,b1,b,j)
      temp t1mbbbj(b2,b1,b,j)
#
      temp tmxaai(mu,a1,a,i)
      temp t1mxaai(mu,a1,a,i)
      temp tmaaai(a2,a1,a,i)
      temp t1maaai(a2,a1,a,i)
#
      temp tmxxxi(mu,lambda,nu,i)
      temp tmxxai(mu,lambda,a,i)
      temp t1mxxai(mu,lambda,a,i)
      temp tmxbai(mu,b,a,i)
      temp t1mxbai(mu,b,a,i)
      temp tmbbai(b1,b,a,i)
      temp t1mbbai(b1,b,a,i)


      temp Txx(mu,nu)
      TEMP  txa  (mu,a)
      TEMP  txb  (mu,b)
      TEMP  t1xx (mu,nu)
      TEMP  txx2 (mu,nu)
      TEMP  txx3 (mu,nu)

      temp Txixi(mu,i1,lambda,i)
      temp Txxii(mu,nu,i1,i)
      temp Tixxi(i1,nu,lambda,i)
      temp T1ixxi(i1,mu,nu,i)

      temp Txipi(mu,i,p,i1)
      temp T1xipi(mu,i,p1,i1)

      temp Tpipi(p1,i,p,i1)
      temp T1pipi(p1,i,p,i1)
      temp Tixai(i,mu,a,i1)
      temp Txaii(mu,a,i,i1)
      temp Taiia(a,i1,i,a1)
      temp T1aiia(a,i1,i,a1)
      temp Taaii(a,a1,i,i1)
      temp Txaai(mu,a1,a,i)
      temp Taaai(a2,a,a1,i)
      temp Tiaaa (i,a,a1,a2)
      temp T1iaaa (i,a,a1,a2)
      temp Txxai(mu,nu,a,i)
      temp Txxxi(mu,nu,lambda,i)
      temp Taixx(a,i,mu,nu) 
      temp tqppq(q,p,p1,q1) 
      temp t1qppq(q,p,p1,q1) 
#
      served VSpipi(p1,i,p,i1)
      served Viaai(i,a1,a,i1)
      served Vaaii(a,a1,i,i1)
      served VSaaai(a2,a,a1,i)
#
      temp Txxxx(mu,nu,lambda,sigma)
      temp Txjxj(mu,j1,lambda,j)
      temp Txxjj(mu,nu,j1,j)
      temp Tjjxx(j1,j,nu,lambda)
      temp Tjxxj(j1,nu,lambda,j)
      temp Txjqj(mu,j,q,j1)
      temp Tqjqj(q1,j,q,j1)
      temp T1qjqj(q1,j,q,j1)
      temp Tjxbj(j,mu,b,j1)
      temp Txbjj(mu,b,j,j1)
      temp Tjbbj(j,b1,b,j1)
      temp T2jbbj(j,b1,b,j1)
      temp T3jbbj(j,b1,b,j1)
      temp Tbbjj(b,b1,j,j1)
      temp Txbbj(mu,b1,b,j)
      temp Tbbbj(b2,b,b1,j)
      temp Tjbbb(j,b,b1,b2)
      temp T1jbbb(j,b,b1,b2)
      temp Txxbj(mu,nu,b,j)
      temp Txxxj(mu,nu,lambda,j)
#
      served VSqjqj(q1,j,q,j1)
      served Vjbbj(j,b1,b,j1)
      served Vbbjj(b,b1,j,j1)
      served VSbbbj(b2,b,b1,j)
#
      temp Txiqj(mu,i,q,j)
      temp Tpiqj(p,i,q,j)
      temp Tiixx(i,i1,mu,nu)
      temp Tiixb(i,i1,mu,b)
      temp Tiibb(i,i1,b1,b)
      temp Txajj(mu,a,j,j1)
      temp Taajj(a,a1,j,j1)
      temp Txabj(mu,a,b,j)
      temp Tixxj(i,mu,nu,j)
      temp Tixbj(i,mu,b,j)
      temp Tiabj(i,a,b,j)
      temp Taabj(a,a1,b,j)
      temp T1xibj(lambda,i,b,j)  
      temp Tpqqp(p,q,q1,p1) 
      temp T1pqqp(p,q,q1,p1) 
      temp T0pqqp(p,q,q1,p1) 
#
      served Vpiqj(p,i,q,j)
      served Vaajj(a,a1,j,j1)
      served Viabj(i,a,b,j)
      served Vaabj(a,a1,b,j)
#
      temp Txbii(mu,b,i,i1)
      temp Tbbii(b,b1,i,i1)
      temp Tjbii(j,b,i,i1)
      temp Txbai(mu,b,a,i)
      temp Tbbai(b,b1,a,i)
#
      served Vjbii(j,b,i,i1)
      served Vbbai(b,b1,a,i)
      served Vbbii(b,b1,i,i1)
#
# End Arrays used in transformation for AO2 algorithm
# ---------------------------------------------------
#
# Declare temporary arrays
# ------------------------
#
      temp T1xxxx(mu,nu,lambda,sigma)
      temp Txxxp(mu,nu,lambda,p)
      temp Txxpp(mu,nu,p1,p)
      temp Txppp(mu,p2,p1,p)
      temp Tpppp(p3,p2,p1,p)
      temp T1pppp(p3,p2,p1,p)
      temp T2pppp(p3,p2,p1,p)
      temp T3pppp(p3,p2,p1,p)
      temp T4pppp(p3,p2,p1,p)
      temp Txxxq(mu,nu,lambda,q)
      temp Txxqq(mu,nu,q1,q)
      temp Txqqq(mu,q2,q1,q)
      temp Tqqqq(q3,q2,q1,q)
      temp T1qqqq(q3,q2,q1,q)
      temp T2qqqq(q3,q2,q1,q)
      temp T3qqqq(q3,q2,q1,q)
      temp T4qqqq(q3,q2,q1,q)
      temp Txpqq(mu,p,q1,q)
      temp Tppqq(p1,p,q1,q)
      temp T1ppqq(p1,p,q1,q)
      temp T2ppqq(p1,p,q1,q)
      temp T3ppqq(p1,p,q1,q)
      temp T4ppqq(p1,p,q1,q)
      TEMP  Tqpqp (q1,p2,q,p)
      TEMP  T1qpqp (q1,p2,q,p)
      TEMP  T2qpqp (q1,p2,q,p)
      TEMP  T3qpqp (q1,p2,q,p)

      temp Tpqpq(p1,q1,p,q)
      temp T1pqpq(p1,q1,p,q)
      temp T2pqpq(p1,q1,p,q)
      temp T3pqpq(p1,q1,p,q)
      temp T4pqpq(p1,q1,p,q)
      temp Tqqpp(q,q1,p,p1)
      temp T1qqpp(q,q1,p,p1)
      temp T2qqpp(q,q1,p,p1)
      temp Txqpp(mu,q,p1,i)
      TEMP  tabji (a,b,j,i)
      TEMP  Taaia (a,a1,i,a2)
      TEMP  T1aaia (a,a1,i,a2)
      TEMP  Taiaa (a,i,a1,a2)
      TEMP  T1aiaa (a,i,a1,a2)
      TEMP  Tbbjb (b,b1,j,b2)
      TEMP  T1bbjb (b,b1,j,b2)
      TEMP  Tbjbb (b,j,b1,b2)
      TEMP  T1bjbb (b,j,b1,b2)
      TEMP  Tipxx (i,p,nu,sigma)
      TEMP  Tipqx (i,p,q,sigma)
      TEMP  Tipqq (i,p,q,q1)

#
# Declare local arrays
# --------------------------
#
      temp Tixxx(i,mu,nu,sigma)
#
# Declare served arrays
# ---------------------
#
      temp AOINT(mu,nu,lambda,sigma)
      temp AOINT1(mu,nu,lambda,sigma)
#
# Declare static arrays
# ---------------------
#
      distributed t1a_old(a,i)
      distributed t1b_old(b,j)
      distributed a1a_old(i,a)
      distributed a1b_old(j,b)

      local St1a(a,i)
      local St1b(b,j)

#
      served T2old_aa(a,i,a1,i1)
      served T2old_bb(b,j,b1,j1)
      served T2old_ab(a,i,b,j)
      served A2old_aa(i,a,i1,a1)
      served A2old_bb(j,b,j1,b1)
      served A2old_ab(i,a,j,b)
#
      served LTau_aa(a,a1,i,i1)  
      served LA2old_aa(i,i1,a,a1)
      served LTau_bb(b,b1,j,j1)  
      served LA2old_bb(j,j1,b,b1)
      served LTau_ab(a,b1,i,j1)  
      served LA2old_ab(i,j1,a,b1)
# 
      served Tau_aa(a,i,a1,i1)
      served Tau_bb(b,j,b1,j1)
      served Tau_ab(a,i,b,j)
#
      distributed Gmi_a(i,i1) 
      distributed Gmi_b(j,j1) 
      distributed Gae_a(a,a1) 
      distributed Gae_b(b,b1) 
#
      served Dijab_aa(i,i1,a,a1)
      served Dijab_ab(i,j,a,b)
      served Dijab_bb(j,j1,b,b1)
      served Dijkl_aa(i2,i,i3,i1)
      served Vijmn_aaaa(i,i2,i1,i3)
      served Dijkl_bb(j,j2,j1,j3)
      served Vijmn_bbbb(j,j2,j1,j3)
      served Dijkl_ab(i,j,i1,j1)
      served Vijmn_abab(i,j,i1,j1)
      served Vibja_aaaa(i,a,i1,a1)
      served Dibja_aaaa(i,a,i1,a1)
      served Vibja_abab(i,b,i1,b1)
      served Dibja_abab(i,b,i1,b1)
      served Vibja_baba(j,a,j1,a1)
      served Dibja_baba(j,a,j1,a1)
      served Vibja_bbbb(j,b,j1,b1)
      served Dibja_bbbb(j,b,j1,b1)
      served Dibja_baab(j,a,i,b)
      served Vibja_baab(j,a,i,b)
      served Dibja_abba(i,b,j,a)
      served Vibja_abba(i,b,j,a) 
      served Dabci_aaaa(a,a2,a1,i)
      served Dabci_abab(a,b,a1,j)
      served Dabci_baba(b,a,b1,i)
      served Dabci_bbbb(b,b2,b1,j)
      served Dijka_aaaa(i,i2,i1,a)
      served Dijka_abab(i,j,i1,b)
      served Dijka_baba(j,i,j1,a)
      served Dijka_bbbb(j,j2,j1,b)

      served Dxaai(mu,a,a1,i)
      served Dxxai(mu,nu,a1,i)
      served Dxxxi(mu,nu,sigma,i)
      served Dxbbj(mu,b,b1,j)
      served Dxxbj(mu,nu,b1,j)
      served Dxxxj(mu,nu,sigma,j)
#
      served Dxbaj(mu,b,a1,j)
      served Dxxaj(mu,nu,a1,j)
      served Dxabi(mu,a,b1,i)
      served Dxxbi(mu,nu,b1,i)
      served Dxiii(mu,i,i1,i2)
      served Dxxii(mu,nu,i1,i2)
      served Dxjjj(mu,j,j1,j2)
      served Dxxjj(mu,nu,j1,j2)
      served Dxjij(mu,j,i1,j2)
      served Dxxij(mu,nu,i1,j2)
      served Diaix(i,a,i1,sigma)
      served Dixix(i,nu,i1,sigma)
      served Dxiix(nu,i,i1,sigma)
      served Dixxx(i,nu,lambda,sigma)
      served Djbjx(j,b,j1,sigma)
      served Djxjx(j,nu,j1,sigma)
      served Dxjjx(nu,j,j1,sigma)
      served Djxxx(j,nu,lambda,sigma)
#
      served Dibix(i,b,i1,sigma)
      served Djajx(j,a,j1,sigma)
      served Dibjx(i,b,j1,sigma)
      served Dixjx(i,nu,j1,sigma)
      served Dixxj(i,nu,sigma,j1)
      served Djaix(j,a,i1,sigma)
      served Djxix(j,nu,i1,sigma)
      served Diiax(i,i1,a,sigma)
      served Diixx(i,i1,lambda,sigma)
      served Djjbx(j,j1,b,sigma)
      served Djjxx(j,j1,lambda,sigma)
      served Dijax(i,j1,a,sigma)
      served Dijxx(i,j1,lambda,sigma)
      served Diiix(i,i1,i2,sigma)
      served Djjjx(j,j1,j2,sigma)
      served Dijix(i,j1,i2,sigma)
      served Djijx(j,i1,j2,sigma)
      served Djixx(j,i1,lambda,sigma)

      temp Tiiix(i,i1,i2,sigma)
      temp Tjjjx(j,j1,j2,sigma)
      temp Tijix(i,j1,i2,sigma)
      temp Tjijx(j,i1,j2,sigma)
      temp Tjixx(j,i1,lambda,sigma)

      temp PXXXX(mu,nu,lambda,sigma)
      temp T3XXXX(mu,nu,lambda,sigma)
      temp P1XXXX(mu,nu,lambda,sigma)
#
      temp T1xxxi(mu,nu,sigma,i)
      temp Txixx(mu,i,lambda,sigma)
      temp T1xixx(mu,i,lambda,sigma)
#
      temp T1xxxj(mu,nu,sigma,j)
      temp Txjxx(mu,j,lambda,sigma)
      temp T1xjxx(mu,j,lambda,sigma)

      temp Tiaix(i,a,i1,sigma)
      temp T1iaix(i,a,i1,sigma)
      temp Tixix(i,nu,i1,sigma)
      temp T1ixix(i,nu,i1,sigma)
      temp T1ixxx(i,nu,lambda,sigma)
      temp Txiix(nu,i,i1,sigma)
      temp T1xiix(nu,i,i1,sigma)

      temp Txiii(mu,i,i1,i2)
      temp T1xiii(mu,i,i1,i2)
      temp T1xxii(mu,nu,i1,i2)
#
      temp Txjjj(mu,j,j1,j2)
      temp T1xjjj(mu,j,j1,j2)
      temp T1xxjj(mu,nu,j1,j2)
#
      temp Txjij(mu,j,i1,j2)
      temp T1xjij(mu,j,i1,j2)
      temp Txxij(mu,nu,i1,j2)
      temp T1xxij(mu,nu,i1,j2)

      temp Tjbjx(j,b,j1,sigma)
      temp T1jbjx(j,b,j1,sigma)
      temp Tjxjx(j,nu,j1,sigma)
      temp T1jxjx(j,nu,j1,sigma)
      temp Tjxxx(j,nu,lambda,sigma)
      temp T1jxxx(j,nu,lambda,sigma)
      temp Txjjx(nu,j,j1,sigma) 
      temp T1xjjx(nu,j,j1,sigma)
#     
      temp Tibix(i,b,i1,sigma)
      temp T1ibix(i,b,i1,sigma)
#     
      temp Tjajx(j,a,j1,sigma)
      temp T1jajx(j,a,j1,sigma)
      
      temp Tibjx(i,b,j1,sigma)
      temp T1ibjx(i,b,j1,sigma)
      temp Tixjx(i,nu,j1,sigma)
      temp T1ixxj(i,nu,sigma,j1)

      temp Tjaix(j,a,i1,sigma)
      temp T1jaix(j,a,i1,sigma)
      temp Tjxix(j,nu,i1,sigma)
#
      temp Tiiax(i,i1,a,sigma)
      temp T1iiax(i,i1,a,sigma)
      temp T1iixx(i,i1,lambda,sigma)
#
      temp Tjjbx(j,j1,b,sigma)
      temp T1jjbx(j,j1,b,sigma)
      temp T1jjxx(j,j1,lambda,sigma)
#
      temp Tijax(i,j1,a,sigma)
      temp T1ijax(i,j1,a,sigma)
      temp Tijxx(i,j1,lambda,sigma)
      temp T1ijxx(i,j1,lambda,sigma)

#
      distributed I3AA(i2,a,i1,i) 
      distributed I3AB(i,a,j,j1) 
      distributed I3BA(j,b,i,i1) 
      distributed I3BB(j,b,j1,j2) 
#
      served TAO_aa(mu,i,nu,i1)  
      served TAO_ab(mu,i,nu,j)  
      served TAO_bb(mu,j,nu,j1)  
      served LAO_aa(i,mu,i1,nu)  
      served LAO_ab(i,mu,j,nu)  
      served LAO_bb(j,mu,j1,nu)  

      SERVED  T1AO_aa (lambda,i,a,i1)
      SERVED  T1AO_bb (lambda,j,b,j1)
      SERVED  T1AO_ab (lambda,i,b,j)

      SERVED  T2AO_aa (lambda,i,sigma,i1)
      SERVED  T2AO_bb (lambda,j,sigma,j1)
      SERVED  T2AO_ab (lambda,i,sigma,j)

      SERVED  T3AO_aa (mu,i,nu,i1)
      SERVED  T3AO_bb (mu,j,nu,j1)
      SERVED  T3AO_ab (mu,i,nu,j)

      SERVED  RTAO_aa (mu,i,nu,i1)   #Watson, eom gradient
      SERVED  RTAO_bb (mu,j,nu,j1)   #Watson, eom gradient
      SERVED  RTAO_ab (mu,i,nu,j)   #Watson, eom gradient

      SERVED  LLAO_aa (i,mu,i1,nu)  #Watson, eom gradient
      SERVED  LLAO_bb (j,mu,j1,nu)  #Watson, eom gradient
      SERVED  LLAO_ab (i,mu,j,nu)  #Watson, eom gradient

      DISTRIBUTED  L2RTAU_iiii (i,i1,i2,i3)
      DISTRIBUTED  L2RTAU_jjjj (j,j1,j2,j3)
      DISTRIBUTED  L2RTAU_ijij (i,j ,i1,j1)
      DISTRIBUTED  L2TTAU_iiii (i,i1,i2,i3)
      DISTRIBUTED  L2TTAU_jjjj (j,j1,j2,j3)
      DISTRIBUTED  L2TTAU_ijij (i,j ,i1,j1)
# 
      distributed Dij_a(i,i1) 
      distributed Dij_b(j,j1) 
      distributed Dab_a(a,a1) 
      distributed Dab_b(b,b1) 
      distributed Dii(i,i1)
      distributed Daa(a1,a)
      distributed Djj(j,j1)
      distributed Dbb(b1,b)
      temp  Dabcd_aa(a,a1,a2,a3)
      temp DXabcd_aa(a2,a3,a,a1)
      temp  Dabcd_bb(b,b1,b2,b3)
      temp DXabcd_bb(b2,b3,b,b1)
      temp  Dabcd_ab(a,b,a1,b1)
      temp DXabcd_ab(a1,b1,a,b)
      distributed Dpq(mu,nu)
      distributed DpqA(mu,nu)
      distributed DpqB(mu,nu)

      DISTRIBUTED  AO_DENS (mu,nu)
      distributed DHF(mu,nu)
      distributed DHFa(mu,nu)
      distributed DHFb(mu,nu)
      distributed Ipq(mu,nu)
      distributed Rbj(b,j) 
      distributed Rai(a,i) 
#
# Define Local arrays 
# ------------------- 
#
      local Laa(a,a1) 
      local L1aa(a1,a) 
      local Lbb(b,b1) 
      local L1bb(b1,b) 
      local Lai(a,i) 
      local L1ai(a1,i) 
      local Lbj(b,j) 
      local L1bj(b1,j) 
      local Lia(i,a) 
      Local Ljb(j,b) 
      local Laaai(a,a1,a2,i)  
      local L3aa(i2,a,i1,i) 
      local Lxaai(mu,a2,a,i) 
      local Lxabi(mu,a,b1,i) 
      local Lxbbj(mu,b2,b,j) 
      local Lxbaj(mu,b,a1,j) 

     local Lxxaj(mu,nu,a1,j)
     local Lxxbi(mu,nu,b,i)

#
#    ------------------------------------------------------------------------
#
# Declare temporary arrays
# ------------------------
#
      TEMP  Tbaja (b,a,j,a1)
      TEMP  T1baja (b,a,j,a1)
      TEMP  Tabib (a,b,i,b1)
      TEMP  T1abib (a,b,i,b1)

      temp Taiai(p,i,p1,i1)
      temp T1aiai(p,i,p1,i1)
      temp T2aiai(p,i,p1,i1)
      temp T3aiai(p,i,p1,i1)
      temp T4aiai(p,i,p1,i1)
      temp Laiai(p,i,p1,i1)
#
      temp  Tiaia(i,a,i1,a1)
      temp T1iaia(i,a,i1,a1)
      temp T2iaia(i,a,i1,a1)
      temp T3iaia(i,a,i1,a1)
      temp TAiaia(i,a,i1,a1)
      temp  Tiaai(i,a,a1,i1)
      temp  T1iaai(i,a,a1,i1)
      temp  T2iaai(i,a,a1,i1)
      temp  T3iaai(i,a,a1,i1)
      temp Tiiai(i1,i2,a2,i)  
      temp T1iiai(i1,i2,a2,i)  
      temp T2iiai(i1,i2,a2,i)  
      temp TSiiai(i,i1,a,i2)
      temp  Tjbjb(j,b,j1,b1)
      temp T1jbjb(j,b,j1,b1)
      temp T2jbjb(j,b,j1,b1)
      temp T3jbjb(j,b,j1,b1)
      temp TAjbjb(j,b,j1,b1)
      temp  Tiajb(i,a,j,b)
      temp T1iajb(i,a,j,b)
      temp T2iajb(i,a,j,b)
      temp TAiajb(i,a,j,b)
      temp  Tibib(i,b,i1,b1)
      temp T1ibib(i,b,i1,b1)
      temp T2ibib(i,b,i1,b1)
      temp TAibib(i,b,i1,b1)
      temp  Tjaja(j,a,j1,a1)
      temp T1jaja(j,a,j1,a1)
      temp T2jaja(j,a,j1,a1)
      temp TAjaja(j,a,j1,a1)
      temp  Taijb(a,i,j,b)   
      temp  Tbjjb(b,j,j1,b1)
      temp T1bjjb(b,j,j1,b1)
      temp Tjjbj(j1,j2,b2,j)  
      temp T1jjbj(j1,j2,b2,j)  
      temp T2jjbj(j1,j2,b2,j)  
      temp TSjjbj(j,j1,b,j2)

#
      temp Tbjbj(q,j,q1,j1)
      temp T1bjbj(q,j,q1,j1)
      temp T2bjbj(q,j,q1,j1)
      temp T3bjbj(q,j,q1,j1)
      temp T4bjbj(q,j,q1,j1)
      temp Lbjbj(q,j,q1,j1)
      local L2bjbj(q,j,q1,j1)
      temp Taibj(p,i,q,j)
      temp T1aibj(p,i,q,j)
      temp T2aibj(p,i,q,j)
      temp T3aibj(p,i,q,j)
#
      temp tmp1_aiai(a,i,a1,i1)
      temp tmp2_aiai(a,i,a1,i1)
      temp tmp1_bjbj(b,j,b1,j1)
      temp tmp2_bjbj(b,j,b1,j1)
      temp tmp1_aibj(a,i,b,j)
#
      temp Tpq(mu,nu)
      temp T1pq(mu,nu)
#
      temp Taa(a,a1)
      temp Taa1(a,a1)
      temp Taa2(a,a1)
      temp Taa3(a,a1)
      temp T1aa(a,a1)
      temp T2aa(a,a1)
      temp T3aa(a,a1)
      temp Tbb(b,b1)
      temp Tbb1(b,b1)
      temp Tbb2(b,b1)
      temp Tbb3(b,b1)
      temp T1bb(b,b1)
      temp T2bb(b,b1)
      temp T3bb(b,b1)
      temp Tae_a(a,a1)
      temp Tae_b(b,b1)
      temp Tia(i,a)
      temp Tia1(i,a)
      temp Tia2(i,a)
      temp Tia3(i,a)
      temp T1ia(i,a)
      temp T2ia(i,a)
      temp T3ia(i,a)
      temp T4ia(i,a)
      temp Tjb(j,b)
      temp Tjb1(j,b)
      temp Tjb2(j,b)
      temp Tjb3(j,b)
      temp T1jb(j,b)
      temp T2jb(j,b)
      temp T3jb(j,b)
      temp T4jb(j,b)
      temp Tme_a(i,a)
      temp Tme_b(j,b)
#
      temp Tii(i,i1)
      temp Tii1(i,i1)
      temp Tii2(i,i1)
      temp Tii3(i,i1)
      temp T1ii(i,i1)
      temp T2ii(i,i1)
      temp T3ii(i,i1)
      temp Tjj(j,j1)
      temp Tjj1(j,j1)
      temp Tjj2(j,j1)
      temp Tjj3(j,j1)
      temp T1jj(j,j1)
      temp T2jj(j,j1)
      temp T3jj(j,j1)
      temp Tmi_a(i,i1)
      temp Tmi_b(j,j1)
#
      served Liaai(i,a,a1,i1) 
      served Ljbbj(j,b,b1,j1) 
      local  Ljbjj (j2,b3,j3,j1)
      local  Ljbia (j3,b3,i2,a2)
      local  L1jbia (j,b2,i3,a3)
      served Liabj(i,a,b,j) 
      temp Lbjai(b,j,a,i) 
      temp Tbjai(b,j,a,i) 
      temp T1bjai(b,j,a,i) 
      served Ljbai(j,b,a,i) 
      temp Tjbai(j,b,a,i) 
      temp T1jbai(j,b,a,i) 
      temp T2jbai(j,b,a,i) 
      temp Taaaa(a,a1,a2,a3) 
      temp T1aaaa(a,a1,a2,a3) 
      temp T2aaaa(a,a1,a2,a3) 
      temp T3aaaa(a,a1,a2,a3) 
      temp Taabb(a,a1,b,b1) 
      temp T1aabb(a,a1,b,b1) 
      temp Tbbbb(b,b1,b2,b3) 
      temp T1bbbb(b,b1,b2,b3) 
      temp T2bbbb(b,b1,b2,b3) 
      temp T3bbbb(b,b1,b2,b3) 
      temp Tiiii(i,i1,i2,i3) 
      temp T1iiii(i,i1,i2,i3) 
      temp Tiijj(i,i1,j,j1) 
      temp T1iijj(i,i1,j,j1) 
      temp Tjjjj(j,j1,j2,j3) 
      temp T1jjjj(j,j1,j2,j3) 
      temp Tiiaa(i,i1,a,a1) 
      temp TAiiaa(i,i1,a,a1) 
      temp T1iiaa(i,i1,a,a1) 
      temp T2iiaa(i,i1,a,a1) 
      temp T3iiaa(i,i1,a,a1) 
      temp T4iiaa(i,i1,a,a1) 
      temp T1iibb(i,i1,b,b1) 
      temp T2iibb(i,i1,b,b1) 
      temp TAiibb(i,i1,b,b1) 
      temp Tjjaa(j,j1,a,a1) 
      temp T1jjaa(j,j1,a,a1) 
      temp T2jjaa(j,j1,a,a1) 
      temp TAjjaa(j,j1,a,a1) 
      temp Tjjbb(j,j1,b,b1) 
      temp TAjjbb(j,j1,b,b1) 
      temp T1jjbb(j,j1,b,b1) 
      temp T2jjbb(j,j1,b,b1) 
      temp T3jjbb(j,j1,b,b1) 
      temp T4jjbb(j,j1,b,b1) 
      temp T1iabj(i,a,b,j) 
      temp T1bjia(b,j,i,a) 
      temp Tiaii(i,a,i1,i2) 
      temp Tiajj(i,a,j,j1) 
      temp T1aaai(a,a1,a2,i) 
      temp T1aabj(a,a1,b,j) 
      temp T1bbai(b,b1,a,i) 
      temp T1bbbj(b,b1,b2,j) 
      temp Tiiia(i,i1,i2,a) 
      temp T1iiia(i,i1,i2,a) 
      temp  Tiijb(i,i1,j,b) 
      temp T1iijb(i,i1,j,b) 
      temp  Tjjia(j,j1,i,a) 
      temp T1jjia(j,j1,i,a) 
      temp  Tjjjb(j,j1,j2,b) 
      temp T1jjjb(j,j1,j2,b) 
      TEMP  tajib (a,j,i,b)
      TEMP  t1ajib (a,j,i,b)
      TEMP  tbija (b,i,j,a)
      TEMP  t1bija (b,i,j,a)

      temp  Tjiba(j,i,b,a) 
      temp  T1jiba(j,i,b,a) 
      temp  T2jiba(j,i,b,a) 
      temp  T3jiba(j,i,b,a) 
      temp  Tijab(i,j,a,b) 
      temp  tjiab (j,i2,a2,b)
      temp T1ijab(i,j,a,b) 
      temp T2ijab(i,j,a,b) 
      temp T3ijab(i,j,a,b) 
      temp T4ijab(i,j,a,b) 
      temp  Tijaj(i,j,a,j1) 
      temp  T1ijaj(i,j,a,j1) 
      temp  Tabab(a,b,a1,b1) 
      temp T1abab(a,b,a1,b1) 
      temp  Tijij(i,j,i1,j1) 
      temp T1ijij(i,j,i1,j1) 
      temp  Tjbia(j,b,i,a) 
      temp T1jbia(j,b,i,a) 
      temp  Tabaj(a,b,a1,j) 
      temp  Tabij(a,b,i,j) 
      temp  Tbaij (b,a,i,j)
      temp  Tijba (i,j,b,a)
      temp  T1abij(a,b,i,j) 
      temp  T2abij(a,b,i,j) 
      temp T1abaj(a,b,a1,j) 
      temp  Tbabi(b,a,b1,i) 
      temp T1babi(b,a,b1,i) 
      temp  Tbibi(b,i1,b1,i) 
      temp  T1bibi(b,i1,b1,i) 
      temp  Lbibi(b,i1,b1,i) 
      temp  Tajaj(a,j1,a1,j)  
      temp  T1ajaj(a,j1,a1,j)  
      temp  Lajaj(a,j1,a1,j) 
      temp  Tbaji(b1,a,j,i1)  
      temp  T1baji(b1,a,j,i1)  
      temp  Tjibi(j,i1,b,i)   
      temp  T1jibi(j,i1,b,i)   
#
      temp Zaa(lambda,i,a1,i1) 
      temp ZZaa(lambda,i,sigma,i1)  
      temp Zbb(lambda,j,b1,j1) 
      temp ZZbb(lambda,j,sigma,j1)  
      temp Zab(lambda,i,b1,j1) 
      temp ZZab(lambda,i,sigma,j1)  
      TEMP  Yaa (lambda,i,mu,i1)
      TEMP  Ybb (lambda,j,mu,j1)
      TEMP  Yab (lambda,i,mu,j)
      TEMP  Y1aa (lambda,i,mu,i1)
      TEMP  Y1bb (lambda,j,mu,j1)
      TEMP  Y1ab (lambda,i,mu,j)
      TEMP  Taixi (a,i,nu,i1)
      TEMP  Tbjxj (b,j,nu,j1)
      TEMP  Taixj (a,i,nu,j)
#
      temp Qaa(i,lambda,i1,a1) 
      temp QQaa(i,lambda,i1,sigma) 
      temp Qbb(j,lambda,j1,b1)
      temp QQbb(j,lambda,j1,sigma) 
      temp  Qab(i,lambda,j,b) 
      temp QQab(i,lambda,j,sigma) 
#
# Intermediate arrays
# -------------------
#
      distributed Iij_aa(i,i1)
      distributed Iij_bb(j,j1)
      distributed Iab_aa(a,a1)
      distributed Iab_bb(b,b1)
      distributed Iai_aa(a,i)
      distributed Iia_aa(i,a)
      distributed Iai_bb(b,j)
      distributed Iia_bb(j,b)
      distributed Xai_aa(a,i)
      distributed Xai_bb(b,j)
#
# Arrays used in 'direct' computations 
# ------------------------------------ 
#
      temp T1xixi(mu,i,nu,i1) 
      served Ixixi(mu,i,nu,i1) 
      served I1xixi(mu,i,nu,i1) 
      SERVED  IRxixi (mu,i,nu,i1)  # Watson, below too gradient
      SERVED  ILxixi (mu,i,nu,i1)
      temp T1xjxj(mu,j,nu,j1) 
      served Ixjxj(mu,j,nu,j1) 
      served I1xjxj(mu,j,nu,j1) 
      SERVED  IRxjxj (mu,j,nu,j1)  # Watson, below too gradient
      SERVED  ILxjxj (mu,j,nu,j1)
      temp Txixj(mu,i,nu,j) 
      served Ixixj(mu,i,nu,j) 
      served I1xixj(mu,i,nu,j) 
      served IRxixj(mu,i,nu,j) 
      served ILxixj(mu,i,nu,j) 
#
      temp  Txiai(lambda,i,a1,i1)  
      temp T1xiai(lambda,i,a1,i1)  
      temp  Txjbj(lambda,j,b1,j1)  
      temp T1xjbj(lambda,j,b1,j1)  
      temp  Txibj(lambda,i,b1,j1)  
      temp Txabi(mu,a,b,i) 
      temp Txbaj(mu,b,a1,j) 
      temp Txxbi(mu,nu,b,i) 
      temp Txxaj(mu,nu,a,j) 
      temp  Txi(mu,i) 
      temp T1xi(mu,i) 
      temp  Txj(mu,j) 
      temp T1xj(mu,j) 
      temp Jxi(mu,i) 
      temp Jxj(mu,j) 
      temp Jxa(mu,a) 
      temp Jxb(mu,b) 
      temp Ixa(mu,a) 
      temp Ixb(mu,b) 
      temp Ixx(mu,nu) 
      temp I1xx(mu,nu) 
#
      served  Iaiai(a,i,a1,i1) 
      served I1aiai(a,i,a1,i1) 
      served IRaiai(a,i,a1,i1) 
      served ILaiai(a,i,a1,i1) 
      served  Ibjbj(b,j,b1,j1) 
      served I1bjbj(b,j,b1,j1) 
      served IRbjbj(b,j,b1,j1) 
      served ILbjbj(b,j,b1,j1) 
      served  Iaibj(a,i,b,j) 
      served I1aibj(a,i,b,j) 
      served IRaibj(a,i,b,j) 
      served ILaibj(a,i,b,j) 
      served  Ixxai(mu,nu,a,i) 
     #served I1xxai(mu,nu,a,i) 
      served  Ixxbj(mu,nu,b,j) 
     #served I1xxbj(mu,nu,b,j) 
      served Ixabi(mu,a,b,i) 
      served Ixxbi(mu,nu,b,i) 
     #served I1xxbi(mu,nu,b,i) 
      served Ixxaj(mu,nu,a,j) 
     #served I1xxaj(mu,nu,a,j) 
      served Ixxxi(mu,nu,lambda,i) 
      served Jxxxi(mu,nu,lambda,i) 
      served Ixxxj(mu,nu,lambda,j) 
      served Jxxxj(mu,nu,lambda,j) 
#
      distributed IIxi(mu,i) 
      distributed IIxj(mu,j) 
      distributed JJxi(mu,i) 
      distributed JJxj(mu,j) 
#
      distributed  Ixi(mu,i) 
      distributed I1xi(mu,i) 
      distributed  Ixj(mu,j) 
      distributed I1xj(mu,j) 
#
# Arrays and scalars  used in iterative computation of Dai 
# -------------------------------------------------------- 
#
      distributed T2L2_VV_A (a,a1)
      distributed R2L2_VV_A (a,a1)
      distributed DENS_INT_OV_A (i,a)
      distributed T1L1_OO_A (i,i1)
      distributed T2L2_OO_A (i,i1)
      distributed R2L2_OO_A (i,i1)
      distributed T2L2_VV_B (b,b1)
      distributed R2L2_VV_B (b,b1)
      distributed DENS_INT_OV_B (j,b)
      distributed T1L1_OO_B (j,j1)
      distributed T2L2_OO_B (j,j1)
      distributed R2L2_OO_B (j,j1)

      DISTRIBUTED  Dai (a,i)
      DISTRIBUTED  Dia (i,a)
      DISTRIBUTED  Dbj (b,j)
      DISTRIBUTED  Djb (j,b)

      distributed Doldai_a(a,i) 
      distributed Dnewai_a(a,i) 
      distributed Doldai_b(b,j) 
      distributed Dnewai_b(b,j) 
#
      distributed D0ai(a,i)
      distributed D1ai(a,i)
      distributed D2ai(a,i)
      distributed D3ai(a,i)
      distributed D4ai(a,i)
      distributed D5ai(a,i)
#
      distributed D0bj(b,j)
      distributed D1bj(b,j)
      distributed D2bj(b,j)
      distributed D3bj(b,j)
      distributed D4bj(b,j)
      distributed D5bj(b,j)
#
      distributed e1ai(a,i)
      distributed e2ai(a,i)
      distributed e3ai(a,i)
      distributed e4ai(a,i)
      distributed e5ai(a,i)
#
      distributed e1bj(b,j)
      distributed e2bj(b,j)
      distributed e3bj(b,j)
      distributed e4bj(b,j)
      distributed e5bj(b,j)
#
       served D0aiai(a,i,a1,i1)
       served D1aiai(a,i,a1,i1)
       served D2aiai(a,i,a1,i1)
       served D3aiai(a,i,a1,i1)
       served D4aiai(a,i,a1,i1)
       served D5aiai(a,i,a1,i1)
#
       served D0bjbj(b,j,b1,j1)
       served D1bjbj(b,j,b1,j1)
       served D2bjbj(b,j,b1,j1)
       served D3bjbj(b,j,b1,j1)
       served D4bjbj(b,j,b1,j1)
       served D5bjbj(b,j,b1,j1)
#
       served D0aibj(a,i,b,j)
       served D1aibj(a,i,b,j)
       served D2aibj(a,i,b,j)
       served D3aibj(a,i,b,j)
       served D4aibj(a,i,b,j)
       served D5aibj(a,i,b,j)

       served Waiai(a,i,a1,i1)
       served e1aiai(a,i,a1,i1)
       served e2aiai(a,i,a1,i1)
       served e3aiai(a,i,a1,i1)
       served e4aiai(a,i,a1,i1)
       served e5aiai(a,i,a1,i1)
#
       served e1bjbj(b,j,b1,j1)
       served e2bjbj(b,j,b1,j1)
       served e3bjbj(b,j,b1,j1)
       served e4bjbj(b,j,b1,j1)
       served e5bjbj(b,j,b1,j1)
#      
       served e1aibj(a,i,b,j)
       served e2aibj(a,i,b,j)
       served e3aibj(a,i,b,j)
       served e4aibj(a,i,b,j)
       served e5aibj(a,i,b,j)
       served e6aibj(a,i,b,j)

       scalar b11
       scalar b12
       scalar b13
       scalar b14
       scalar b15
       scalar b16
       scalar b17
       scalar b18
       scalar b19
       scalar b110
#
       scalar b22
       scalar b23
       scalar b24
       scalar b25
       scalar b26
       scalar b27
       scalar b28
       scalar b29
       scalar b210
#
       scalar b33
       scalar b34
       scalar b35
       scalar b36
       scalar b37
       scalar b38
       scalar b39
       scalar b310
       scalar b44
       scalar b45
       scalar b46
       scalar b47
       scalar b48
       scalar b49
       scalar b410
#
#
       scalar b55
       scalar b56
       scalar b57
       scalar b58
       scalar b59
       scalar b510
#
       scalar b66
       scalar b67
       scalar b68
       scalar b69
       scalar b610
#
       scalar b77
       scalar b78
       scalar b79
       scalar b710
#
       scalar b88
       scalar b89
       scalar b810
#
       scalar b99
       scalar b910
#
       scalar b1010
#
       scalar Tb11
       scalar Tb12
       scalar Tb13
       scalar Tb14
       scalar Tb15
       scalar Tb16
       scalar Tb17
       scalar Tb18
       scalar Tb19
       scalar Tb110
#
       scalar Tb22
       scalar Tb23
       scalar Tb24
       scalar Tb25
       scalar Tb26
       scalar Tb27
       scalar Tb28
       scalar Tb29
       scalar Tb210
#
       scalar Tb33
       scalar Tb34
       scalar Tb35
       scalar Tb36
       scalar Tb37
       scalar Tb38
       scalar Tb39
       scalar Tb310
       scalar Tb44
       scalar Tb45
       scalar Tb46
       scalar Tb47
       scalar Tb48
       scalar Tb49
       scalar Tb410
#
       scalar Tb55
       scalar Tb56
       scalar Tb57
       scalar Tb58
       scalar Tb59
       scalar Tb510
#
       scalar Tb66
       scalar Tb67
       scalar Tb68
       scalar Tb69
       scalar Tb610
#
       scalar Tb77
       scalar Tb78
       scalar Tb79
       scalar Tb710
#
       scalar Tb88
       scalar Tb89
       scalar Tb810
#
       scalar Tb99
       scalar Tb910
#
       scalar Tb1010
#
       scalar c1
       scalar c2
       scalar c3
       scalar c4
       scalar c5
       scalar c6
       scalar c7
       scalar c8
       scalar c9
       scalar c10
#

#
# Define scalar quantities 
# ------------------------ 
#
      SCALAR  ONEHALF
      SCALAR  ZERO
      SCALAR  ONE
      SCALAR  TWO
      SCALAR  THREE
      scalar idebug
      scalar iroot
      scalar ncount
      SCALAR  OMEGA
      SCALAR  L_OMEGA
      SCALAR  OMEGA2
      SCALAR  R0
      SCALAR  LNORM
      SCALAR  RNORM
      SCALAR  LRNORM
      SCALAR  INVNORM
      SCALAR  IL1R1
      SCALAR  IL2R2
      SCALAR  IF1R1
      SCALAR  IRHBAR
      SCALAR  IG2R2
      SCALAR  el1r1
      SCALAR  el2r2
      SCALAR  DIP_MOM_X
      SCALAR  DIP_MOM_Y
      SCALAR  DIP_MOM_Z
      SCALAR  DIP_MOM
      SCALAR  tmpnuc
      SCALAR  dipnuc
      SCALAR  dipnucx
      SCALAR  dipnucy
      SCALAR  dipnucz


      SCALAR  znew
      SCALAR  zerr_jacob
      SCALAR  zdiff
      SCALAR  znorm
      SCALAR  zmax_jacob
      SCALAR  zold
      SCALAR  zcrit
      SCALAR  icount

      SCALAR  energy
      SCALAR  energy_aa
      SCALAR  energy_ab
      SCALAR  energy_ba
      SCALAR  energy_bb
      SCALAR  energy_abba
      SCALAR  energy_baab

      scalar root_thresh
      scalar rootcount
      scalar etemp 
      scalar etemp1
      scalar etemp2
      scalar etemp3
      scalar etemp4
      scalar etemp5
      scalar esum 
      scalar esum1 
      scalar esum2 
      scalar esum3 
      scalar esum4 
      scalar esum5 
      scalar esum6 
      scalar sum 
      scalar sum1 
      scalar sum2 
      scalar sum3 
      scalar sum4 
      scalar sum5 
      scalar etot  
      scalar eacbd 
      scalar eold
      scalar enew 
      scalar ecrit 
      scalar ediff 
#-------------------------------------------------------------------------



#------------------------------------------------------------------------
#
#     --------------
      PROC  TEMPLATE
#     --------------
#
#
      EXECUTE  PRINT_SCALAR  ZERO
      EXECUTE  PRINT_SCALAR  ONE
#
#
#     ...ready!
#
#
      ENDPROC  TEMPLATE
#------------------------------------------------------------------------




#-------------------------------------------------------------------------
#
#    ------------------
      PROC  PRINT_DAIBC
#    ------------------
#
#
      esum1 = 0.0
      esum2 = 0.0
      esum3 = 0.0
      esum4 = 0.0
      energy_aa = 0.0
      energy_bb = 0.0
      energy_ab = 0.0
      energy_ba = 0.0

      EXECUTE  SERVER_BARRIER
      PARDO  a, a2, a1, i
         REQUEST             Dabci_aaaa (a,a2,a1,i) a
         tpppp (a,a2,a1,i) = Dabci_aaaa (a,a2,a1,i)
         etemp = tpppp (a,a2,a1,i) * tpppp (a,a2,a1,i)
         etemp *= 0.5
         esum1 += etemp
        #EXECUTE  DUMP_AMP  tpppp
      ENDPARDO  a, a2, a1, i
      EXECUTE  SERVER_BARRIER
      PARDO  b, b2, b1, j
         REQUEST             Dabci_bbbb (b,b2,b1,j) b
         tqqqq (b,b2,b1,j) = Dabci_bbbb (b,b2,b1,j)
         etemp = tqqqq (b,b2,b1,j) * tqqqq (b,b2,b1,j)
         etemp *= 0.5
         esum2 += etemp
        #EXECUTE  DUMP_AMP  tqqqq
      ENDPARDO  b, b2, b1, j
      EXECUTE  SERVER_BARRIER
      PARDO  a, b2, a1, j
         REQUEST             Dabci_abab (a,b2,a1,j) a
         Tpqpq (a,b2,a1,j) = Dabci_abab (a,b2,a1,j)
         etemp = Tpqpq (a,b2,a1,j) * Tpqpq (a,b2,a1,j)
         esum3 += etemp
        #EXECUTE  DUMP_AMP  Tpqpq
      ENDPARDO  a, b2, a1, j
      EXECUTE  SERVER_BARRIER
      PARDO  b, a2, b1, i
         REQUEST             Dabci_baba (b,a2,b1,i) b
         Tqpqp (b,a2,b1,i) = Dabci_baba (b,a2,b1,i)
         etemp = Tqpqp (b,a2,b1,i) * Tqpqp (b,a2,b1,i)
         esum4 += etemp
        #EXECUTE  DUMP_AMP  Tqpqp
      ENDPARDO  b, a2, b1, i
      EXECUTE  SERVER_BARRIER

      COLLECTIVE  energy_aa += esum1
      COLLECTIVE  energy_bb += esum2
      COLLECTIVE  energy_ab += esum3
      COLLECTIVE  energy_ba += esum4

      EXECUTE  SIP_BARRIER

      energy += energy_aa
      energy += energy_bb
      energy += energy_ab
      energy += energy_ba
      EXECUTE  SIP_BARRIER

      EXECUTE  PRINT_SCALAR  energy_aa
      EXECUTE  PRINT_SCALAR  energy_ab
      EXECUTE  PRINT_SCALAR  energy_bb
      EXECUTE  PRINT_SCALAR  energy_ba
      EXECUTE  PRINT_SCALAR  ZERO
#
#
#          ...ready!
#     
#     
      ENDPROC  PRINT_DAIBC
#-------------------------------------------------------------------------



#-------------------------------------------------------------------------
#
#    ------------------
      PROC  PRINT_DIJKA
#    ------------------
#
#
      esum1 = 0.0
      esum2 = 0.0
      esum3 = 0.0
      esum4 = 0.0
      energy_aa = 0.0
      energy_bb = 0.0
      energy_ab = 0.0
      energy_ba = 0.0

      EXECUTE  SERVER_BARRIER
      PARDO  i, i1, i2, a
         REQUEST             Dijka_aaaa (i,i1,i2,a) i
         tpppp (i,i1,i2,a) = Dijka_aaaa (i,i1,i2,a)
         etemp = tpppp (i,i1,i2,a) * tpppp (i,i1,i2,a)
         etemp *= 0.5
         esum1 += etemp
        #EXECUTE  DUMP_AMP  tpppp
      ENDPARDO  i, i1, i2, a
      EXECUTE  SERVER_BARRIER
      PARDO  j, j1, j2, b    
         REQUEST             Dijka_bbbb (j,j1,j2,b) j
         tqqqq (j,j1,j2,b) = Dijka_bbbb (j,j1,j2,b)
         etemp = tqqqq (j,j1,j2,b) * tqqqq (j,j1,j2,b)
         etemp *= 0.5
         esum2 += etemp
        #EXECUTE  DUMP_AMP  tqqqq
      ENDPARDO  j, j1, j2, b
      EXECUTE  SERVER_BARRIER
      PARDO  i, j1, i2, b
         REQUEST             Dijka_abab (i,j1,i2,b) i
         tpqpq (i,j1,i2,b) = Dijka_abab (i,j1,i2,b)
         etemp = tpqpq (i,j1,i2,b) * tpqpq (i,j1,i2,b)
         esum3 += etemp
        #EXECUTE  DUMP_AMP  tpqpq
      ENDPARDO  i, j1, i2, b
      EXECUTE  SERVER_BARRIER
      PARDO  j, i1, j2, a
         REQUEST             Dijka_baba (j,i1,j2,a) j
         tqpqp (j,i1,j2,a) = Dijka_baba (j,i1,j2,a)
         etemp = tqpqp (j,i1,j2,a) * tqpqp (j,i1,j2,a)
         esum4 += etemp
        #EXECUTE  DUMP_AMP  tqpqp
      ENDPARDO  j, i1, j2, a
      EXECUTE  SERVER_BARRIER

      COLLECTIVE  energy_aa += esum1
      COLLECTIVE  energy_bb += esum2
      COLLECTIVE  energy_ab += esum3
      COLLECTIVE  energy_ba += esum4

      EXECUTE  SIP_BARRIER

      energy += energy_aa
      energy += energy_bb
      energy += energy_ab
      energy += energy_ba
      EXECUTE  SIP_BARRIER

      EXECUTE  PRINT_SCALAR  energy_aa
      EXECUTE  PRINT_SCALAR  energy_ab
      EXECUTE  PRINT_SCALAR  energy_bb
      EXECUTE  PRINT_SCALAR  energy_ba
      EXECUTE  PRINT_SCALAR  ZERO
#
#
#          ...ready!
#     
#     
      ENDPROC  PRINT_DIJKA
#-------------------------------------------------------------------------




#-------------------------------------------------------------------------
#        
#    ------------------
      PROC  PRINT_DIJAB
#    ------------------
#
#
      esum1 = 0.0
      esum2 = 0.0
      esum3 = 0.0
      energy_aa = 0.0
      energy_bb = 0.0
      energy_ab = 0.0

      EXECUTE  SERVER_BARRIER
      PARDO  i, i1, a, a1
         REQUEST              Dijab_aa (i,i1,a,a1) i
         taiai (a,i,a1,i1)  = Dijab_aa (i,i1,a,a1)
         etemp = taiai (a,i,a1,i1) * taiai (a,i,a1,i1)
         etemp *= 0.25
         esum1 += etemp
        #EXECUTE  DUMP_AMP  taiai
      ENDPARDO  i, i1, a, a1
      EXECUTE  SERVER_BARRIER
      PARDO  j, j1, b, b1
         REQUEST              Dijab_bb (j,j1,b,b1) j
         tbjbj (b,j,b1,j1)  = Dijab_bb (j,j1,b,b1)
         etemp = tbjbj (b,j,b1,j1) * tbjbj (b,j,b1,j1)
         etemp *= 0.25
         esum2 += etemp
        #EXECUTE  DUMP_AMP  tbjbj
      ENDPARDO  j, j1, b, b1
      EXECUTE  SERVER_BARRIER
      PARDO  i, j1, a, b1
         REQUEST              Dijab_ab (i,j1,a,b1) i
         taibj (a,i,b1,j1)  = Dijab_ab (i,j1,a,b1)
         etemp = taibj (a,i,b1,j1) * taibj (a,i,b1,j1)
         esum3 += etemp
        #EXECUTE  DUMP_AMP  taibj
      ENDPARDO  i, j1, a, b1
      EXECUTE  SERVER_BARRIER

      COLLECTIVE  energy_aa += esum1
      COLLECTIVE  energy_bb += esum2
      COLLECTIVE  energy_ab += esum3

      EXECUTE  SIP_BARRIER
      energy_aa *= 16.0
      energy_bb *= 16.0
      energy_ab *= 16.0

      energy += energy_aa
      energy += energy_bb
      energy += energy_ab
      EXECUTE  SIP_BARRIER

      EXECUTE  PRINT_SCALAR  energy_aa
      EXECUTE  PRINT_SCALAR  energy_ab
      EXECUTE  PRINT_SCALAR  energy_bb
      EXECUTE  PRINT_SCALAR  ZERO
#
#
#          ...ready!
#     
#     
      ENDPROC  PRINT_DIJAB
#-------------------------------------------------------------------------



#-------------------------------------------------------------------------
#
#    ------------------
      PROC  PRINT_DIJKL
#    ------------------
#
#
      energy = 0.0
      esum1 = 0.0
      esum2 = 0.0
      esum3 = 0.0
      energy_aa = 0.0
      energy_bb = 0.0
      energy_ab = 0.0

      EXECUTE  SERVER_BARRIER
      PARDO  i, i1, i2, i3
         REQUEST               Dijkl_aa (i,i1,i2,i3) i
         tiiii (i,i1,i2,i3)  = Dijkl_aa (i,i1,i2,i3)
         etemp  = tiiii (i,i1,i2,i3) * tiiii (i,i1,i2,i3)
         etemp *= 0.25
         esum1 += etemp
        #EXECUTE  DUMP_AMP  tiiii
      ENDPARDO  i, i1, i2, i3
      EXECUTE  SERVER_BARRIER
      PARDO  j, j1, j2, j3
         REQUEST               Dijkl_bb (j,j1,j2,j3) j
         tjjjj (j,j1,j2,j3)  = Dijkl_bb (j,j1,j2,j3)
         etemp  = tjjjj (j,j1,j2,j3) * tjjjj (j,j1,j2,j3)
         etemp *= 0.25
         esum2 += etemp
        #EXECUTE  DUMP_AMP  tjjjj
      ENDPARDO  j, j1, j2, j3
      EXECUTE  SERVER_BARRIER
      PARDO  i, j1, i2, j3
         REQUEST               Dijkl_ab (i,j1,i2,j3) i
         Tijij (i,j1,i2,j3)  = Dijkl_ab (i,j1,i2,j3)
         etemp  = Tijij (i,j1,i2,j3) * Tijij (i,j1,i2,j3)
         esum3 += etemp
        #EXECUTE  DUMP_AMP  Tijij
      ENDPARDO  i, j1, i2, j3
      EXECUTE  SERVER_BARRIER

      COLLECTIVE  energy_aa += esum1
      COLLECTIVE  energy_bb += esum2
      COLLECTIVE  energy_ab += esum3

      EXECUTE  SIP_BARRIER

      energy  = energy_aa
      energy += energy_bb
      energy += energy_ab
      EXECUTE  SIP_BARRIER

      EXECUTE  PRINT_SCALAR  energy_aa
      EXECUTE  PRINT_SCALAR  energy_ab
      EXECUTE  PRINT_SCALAR  energy_bb
      EXECUTE  PRINT_SCALAR  ZERO
#
#
#          ...ready!
#     
#     
      ENDPROC  PRINT_DIJKL
#-------------------------------------------------------------------------



#-------------------------------------------------------------------------
#
#    ------------------
      PROC  PRINT_DIBJA
#    ------------------
#
#
      esum1 = 0.0
      esum2 = 0.0
      esum3 = 0.0
      esum4 = 0.0
      esum5 = 0.0
      esum6 = 0.0
      energy_aa = 0.0
      energy_bb = 0.0
      energy_ab = 0.0
      energy_ba = 0.0
      energy_abba = 0.0
      energy_baab = 0.0

      EXECUTE  SERVER_BARRIER
      PARDO  i, a, i1, a1
         REQUEST             Dibja_aaaa (i,a,i1,a1) i
         tpppp (i,a,i1,a1) = Dibja_aaaa (i,a,i1,a1)
         etemp = tpppp (i,a,i1,a1) * tpppp (i,a,i1,a1)
         esum1 += etemp
        #EXECUTE  DUMP_AMP  tpppp
      ENDPARDO  i, a, i1, a1
      EXECUTE  SERVER_BARRIER
      PARDO  j, b, j1, b1
         REQUEST             Dibja_bbbb (j,b,j1,b1) j
         tqqqq (j,b,j1,b1) = Dibja_bbbb (j,b,j1,b1)
         etemp = tqqqq (j,b,j1,b1) * tqqqq (j,b,j1,b1)
         esum2 += etemp
        #EXECUTE  DUMP_AMP  tqqqq
      ENDPARDO  j, b, j1, b1
      EXECUTE  SERVER_BARRIER
      PARDO  i, b, i1, b1
         REQUEST             Dibja_abab (i,b,i1,b1) i
         tpqpq (i,b,i1,b1) = Dibja_abab (i,b,i1,b1)
         etemp = tpqpq (i,b,i1,b1) * tpqpq (i,b,i1,b1)
         esum3 += etemp
        #EXECUTE  DUMP_AMP  tpqpq
      ENDPARDO  i, b, i1, b1
      EXECUTE  SERVER_BARRIER
      PARDO  j, a, j1, a1
         REQUEST             Dibja_baba (j,a,j1,a1) j
         tqpqp (j,a,j1,a1) = Dibja_baba (j,a,j1,a1)
         etemp = tqpqp (j,a,j1,a1) * tqpqp (j,a,j1,a1)
         esum4 += etemp
        #EXECUTE  DUMP_AMP  tqpqp
      ENDPARDO  j, a, j1, a1
      EXECUTE  SERVER_BARRIER
      PARDO  i, a, j1, b1
         REQUEST              Dibja_abba (i,b1,j1,a) i
         tqppq (j1,a,i,b1)  = Dibja_abba (i,b1,j1,a)
         etemp = tqppq (j1,a,i,b1) * tqppq (j1,a,i,b1)
         esum5 += etemp
        #EXECUTE  DUMP_AMP  tqppq
      ENDPARDO  i, a, j1, b1
      EXECUTE  SERVER_BARRIER
      PARDO  j, b, i1, a1
         REQUEST              Dibja_baab (j,a1,i1,b) j
         tpqqp (i1,b,j,a1)  = Dibja_baab (j,a1,i1,b)
         etemp = tpqqp (i1,b,j,a1) * tpqqp (i1,b,j,a1)
         esum6 += etemp
        #EXECUTE  DUMP_AMP  tpqqp
      ENDPARDO  j, b, i1, a1
      EXECUTE  SERVER_BARRIER


      COLLECTIVE  energy_aa += esum1
      COLLECTIVE  energy_bb += esum2
      COLLECTIVE  energy_ab += esum3
      COLLECTIVE  energy_ba += esum4
      COLLECTIVE  energy_abba += esum5
      COLLECTIVE  energy_baab += esum6

      EXECUTE  SIP_BARRIER

      energy += energy_aa
      energy += energy_bb
      energy += energy_ab
      energy += energy_ba
      energy += energy_abba
      energy += energy_baab
      EXECUTE  SIP_BARRIER

      EXECUTE  PRINT_SCALAR  energy_aa
      EXECUTE  PRINT_SCALAR  energy_ab
      EXECUTE  PRINT_SCALAR  energy_abba
      EXECUTE  PRINT_SCALAR  energy_bb
      EXECUTE  PRINT_SCALAR  energy_ba
      EXECUTE  PRINT_SCALAR  energy_baab
      EXECUTE  PRINT_SCALAR  ZERO
#
#
#          ...ready!
#     
#     
      ENDPROC  PRINT_DIBJA
#-------------------------------------------------------------------------



#    ------------------------------------------------------------------------
#
#    Perform the first two stages of the transformation in two N5 steps. 
#
     PROC TRAN_TRAN2 
#
#    ------------------------------------------------------------------------
#
     PARDO mu, nu, lambda
#
          allocate Lxxxi(mu,nu,lambda,*)
          allocate Lxxxj(mu,nu,lambda,*)
#
          DO sigma
#
             compute_integrals            aoint(mu,nu,lambda,sigma)
#
#
             DO i   
#
                 T1xxxi(mu,nu,lambda,i)  = aoint(mu,nu,lambda,sigma)*ca(sigma,i)
                 Lxxxi(mu,nu,lambda,i)  += T1xxxi(mu,nu,lambda,i)  
#
             ENDDO i   
#
             DO j   
#
                 T1xxxj(mu,nu,lambda,j)  = aoint(mu,nu,lambda,sigma)*cb(sigma,j)
                 Lxxxj(mu,nu,lambda,j)  += T1xxxj(mu,nu,lambda,j)  
#
             ENDDO j   
#
          ENDDO sigma

          DO i
             PREPARE Vxxxi(mu,nu,lambda,i)  = Lxxxi(mu,nu,lambda,i)
          ENDDO i

          DO j
             PREPARE Vxxxj(mu,nu,lambda,j)  = Lxxxj(mu,nu,lambda,j)
          ENDDO j

          deallocate Lxxxi(mu,nu,lambda,*)
          deallocate Lxxxj(mu,nu,lambda,*)
#
     ENDPARDO mu, nu, lambda 
     execute server_barrier
#
#    ------------------------------------------------------------------------
#
     PARDO mu, nu, i
#
           allocate L1xxxi(mu,nu,*,i)
#
           DO lambda
#
              REQUEST Vxxxi(mu,nu,lambda,i) i
#
              L1xxxi(mu,nu,lambda,i) = Vxxxi(mu,nu,lambda,i)
#
           ENDDO lambda
#
           DO i1
#
              Txxii(mu,nu,i1,i) = 0.0
#
              DO lambda
#
                 T1xxii(mu,nu,i1,i) = L1xxxi(mu,nu,lambda,i)*ca(lambda,i1)
                 Txxii(mu,nu,i1,i) += T1xxii(mu,nu,i1,i)
#
              ENDDO lambda
#
              PREPARE Vxxii(mu,nu,i1,i) = Txxii(mu,nu,i1,i)
#
           ENDDO i1
#
           DO a
#
              Txxai(mu,nu,a,i) = 0.0
#
              DO lambda
#
                 T1xxai(mu,nu,a,i) = L1xxxi(mu,nu,lambda,i)*ca(lambda,a)
                 Txxai(mu,nu,a,i) += T1xxai(mu,nu,a,i)
#
              ENDDO lambda
#
              PREPARE Vxxai(mu,nu,a,i) = Txxai(mu,nu,a,i)
#
           ENDDO a
           deallocate L1xxxi(mu,nu,*,i)
           allocate L2xxxi(mu,*,nu,i)

           DO lambda
              REQUEST Vxxxi(mu,lambda,nu,i) i
              L2xxxi(mu,lambda,nu,i) = Vxxxi(mu,lambda,nu,i)
           ENDDO lambda

           DO i1
              Txixi(mu,i1,nu,i) = 0.0

              DO lambda
                 T1xixi(mu,i1,nu,i) = L2xxxi(mu,lambda,nu,i)*ca(lambda,i1)
                 Txixi(mu,i1,nu,i) += T1xixi(mu,i1,nu,i)
              ENDDO lambda

              PREPARE Vxixi(mu,i1,nu,i) = Txixi(mu,i1,nu,i)
           ENDDO i1

           deallocate L2xxxi(mu,*,nu,i)
           allocate L3xxxi(*,mu,nu,i)

           DO lambda
              REQUEST Vxxxi(lambda,mu,nu,i) i
              L3xxxi(lambda,mu,nu,i) = Vxxxi(lambda,mu,nu,i)
           ENDDO lambda

           DO i1
              Tixxi(i1,mu,nu,i) = 0.0

              DO lambda
                 T1ixxi(i1,mu,nu,i) = L3xxxi(lambda,mu,nu,i)*ca(lambda,i1)
                 Tixxi(i1,mu,nu,i) += T1ixxi(i1,mu,nu,i)
              ENDDO lambda

              PREPARE Vixxi(i1,mu,nu,i) = Tixxi(i1,mu,nu,i)
           ENDDO i1

           deallocate L3xxxi(*,mu,nu,i)
#
     ENDPARDO mu, nu, i
#
#    ------------------------------------------------------------------------
#
     PARDO mu, nu, j
#
           allocate L1xxxj(mu,nu,*,j)
#
           DO lambda
#
              REQUEST Vxxxj(mu,nu,lambda,j) j
#
              L1xxxj(mu,nu,lambda,j) = Vxxxj(mu,nu,lambda,j)
#
           ENDDO lambda
#
           DO j1
#
              Txxjj(mu,nu,j1,j) = 0.0
#
              DO lambda
#
                 T1xxjj(mu,nu,j1,j) = L1xxxj(mu,nu,lambda,j)*cb(lambda,j1)
                 Txxjj(mu,nu,j1,j) += T1xxjj(mu,nu,j1,j)
#
              ENDDO lambda
#
              PREPARE Vxxjj(mu,nu,j1,j) = Txxjj(mu,nu,j1,j)
#
           ENDDO j1
#
           DO b
#
              Txxbj(mu,nu,b,j) = 0.0
#
              DO lambda
#
                 T1xxbj(mu,nu,b,j) = L1xxxj(mu,nu,lambda,j)*cb(lambda,b)
                 Txxbj(mu,nu,b,j) += T1xxbj(mu,nu,b,j)
#
              ENDDO lambda
#
              PREPARE Vxxbj(mu,nu,b,j) = Txxbj(mu,nu,b,j)
#
           ENDDO b
#
           DO i
#
              Txxij(mu,nu,i,j) = 0.0
#
              DO lambda
#
                 T1xxij(mu,nu,i,j) = L1xxxj(mu,nu,lambda,j)*ca(lambda,i)
                 Txxij(mu,nu,i,j) += T1xxij(mu,nu,i,j)
#
              ENDDO lambda
#
              PREPARE Vxxij(mu,nu,i,j) = Txxij(mu,nu,i,j)
#
           ENDDO i
#
           deallocate L1xxxj(mu,nu,*,j)
           allocate L2xxxj(mu,*,nu,j)

           DO lambda
              REQUEST Vxxxj(mu,lambda,nu,j) j
              L2xxxj(mu,lambda,nu,j) = Vxxxj(mu,lambda,nu,j)
           ENDDO lambda

           DO j1
              Txjxj(mu,j1,nu,j) = 0.0

              DO lambda
                 T1xjxj(mu,j1,nu,j) = L2xxxj(mu,lambda,nu,j)*cb(lambda,j1)
                 Txjxj(mu,j1,nu,j) += T1xjxj(mu,j1,nu,j)
              ENDDO lambda

              PREPARE Vxjxj(mu,j1,nu,j) = Txjxj(mu,j1,nu,j)
           ENDDO j1

           DO i
              Txixj(mu,i,nu,j) = 0.0

              DO lambda
                 T1xixj(mu,i,nu,j) = L2xxxj(mu,lambda,nu,j)*ca(lambda,i)
                 Txixj(mu,i,nu,j) += T1xixj(mu,i,nu,j)
              ENDDO lambda

              PREPARE Vxixj(mu,i,nu,j) = Txixj(mu,i,nu,j)
           ENDDO i

           deallocate L2xxxj(mu,*,nu,j)
           allocate L3xxxj(*,mu,nu,j)

           DO lambda
              REQUEST Vxxxj(lambda,mu,nu,j) j
              L3xxxj(lambda,mu,nu,j) = Vxxxj(lambda,mu,nu,j)
           ENDDO lambda

           DO j1
              Tjxxj(j1,mu,nu,j) = 0.0

              DO lambda
                 T1jxxj(j1,mu,nu,j) = L3xxxj(lambda,mu,nu,j)*cb(lambda,j1)
                 Tjxxj(j1,mu,nu,j) += T1jxxj(j1,mu,nu,j)
              ENDDO lambda

              PREPARE Vjxxj(j1,mu,nu,j) = Tjxxj(j1,mu,nu,j)
           ENDDO j1

           DO i
              Tixxj(i,mu,nu,j) = 0.0

              DO lambda
                 T1ixxj(i,mu,nu,j) = L3xxxj(lambda,mu,nu,j)*ca(lambda,i)
                 Tixxj(i,mu,nu,j) += T1ixxj(i,mu,nu,j)
              ENDDO lambda

              PREPARE Vixxj(i,mu,nu,j) = Tixxj(i,mu,nu,j)
           ENDDO i

           deallocate L3xxxj(*,mu,nu,j)
#
     ENDPARDO mu, nu, j
#
     execute server_barrier
#
#    ------------------------------------------------------------------------
#
     ENDPROC TRAN_TRAN2 
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
#    Perform the third N5 stage of the transformation.  
#
     PROC TRAN_TRAN3 
#
#    ------------------------------------------------------------------------
#
     PARDO mu, i, i1
#
           allocate Lxixi(mu,i,*,i1) 
           allocate Lxxii(mu,*,i,i1) 
           allocate Lixxi(i,mu,*,i1) 
#
           DO nu 
#
              REQUEST Vxixi(mu,i,nu,i1) i1 
              REQUEST Vxxii(mu,nu,i,i1) i1 
              REQUEST Vixxi(i,mu,nu,i1) i1 
#
              Lxixi(mu,i,nu,i1) = Vxixi(mu,i,nu,i1) 
              Lxxii(mu,nu,i,i1) = Vxxii(mu,nu,i,i1) 
              Lixxi(i,mu,nu,i1) = Vixxi(i,mu,nu,i1) 
#
           ENDDO nu 
#
           DO p 
#
              Txipi(mu,i,p,i1) = 0.0  
#
              DO nu  
#
                 T1xipi(mu,i,p,i1) = Lxixi(mu,i,nu,i1)*ca(nu,p)
                 Txipi(mu,i,p,i1) += T1xipi(mu,i,p,i1)  
#
              ENDDO nu  
#
              PREPARE Vxipi(mu,i,p,i1) = Txipi(mu,i,p,i1)
#
           ENDDO p 
#
           DO a
#
              Txaii(mu,a,i,i1) = 0.0 
              Tixai(i,mu,a,i1) = 0.0  
#
              DO nu 
#
                 T1xaii(mu,a,i,i1) = Lxxii(mu,nu,i,i1)*ca(nu,a)
                 Txaii(mu,a,i,i1) += T1xaii(mu,a,i,i1)  
#
                 T1ixai(i,mu,a,i1) = Lixxi(i,mu,nu,i1)*ca(nu,a)
                 Tixai(i,mu,a,i1) += T1ixai(i,mu,a,i1)  

              ENDDO nu 
#
              PREPARE Vxaii(mu,a,i,i1) = Txaii(mu,a,i,i1)
              PREPARE Vixai(i,mu,a,i1) = Tixai(i,mu,a,i1)
#
           ENDDO a
#
           DO b 
# 
              Txbii(mu,b,i,i1) = 0.0 
#
              DO nu  
#
                 T1xbii(mu,b,i,i1) = Lxxii(mu,nu,i,i1)*cb(nu,b)
                 Txbii(mu,b,i,i1) += T1xbii(mu,b,i,i1)  
#
              ENDDO nu  
#
              PREPARE Vxbii(mu,b,i,i1) = Txbii(mu,b,i,i1)
#
           ENDDO b 
#
           deallocate Lxixi(mu,i,*,i1) 
           deallocate Lxxii(mu,*,i,i1) 
           deallocate Lixxi(i,mu,*,i1) 
#
     ENDPARDO mu, i, i1
#
#    ------------------------------------------------------------------------
#
     PARDO mu, a, i
#
           allocate Lxxai(mu,*,a,i) 
#
           DO nu 
#
              REQUEST Vxxai(mu,nu,a,i) i 
              Lxxai(mu,nu,a,i) = Vxxai(mu,nu,a,i) 
#
           ENDDO nu 
#
           DO a1 
#
              Txaai(mu,a1,a,i) = 0.0  
#
              DO nu  
#
                 T1xaai(mu,a1,a,i) = Lxxai(mu,nu,a,i)*ca(nu,a1)
                 Txaai(mu,a1,a,i) += T1xaai(mu,a1,a,i)  
#
              ENDDO nu  
#
              PREPARE Vxaai(mu,a1,a,i) = Txaai(mu,a1,a,i)
#
           ENDDO a1 
#
           DO b 
#
              Txbai(mu,b,a,i) = 0.0 
#
              DO nu  
#
                 T1xbai(mu,b,a,i) = Lxxai(mu,nu,a,i)*cb(nu,b)
                 Txbai(mu,b,a,i) += T1xbai(mu,b,a,i)   
#
              ENDDO nu  
#
              PREPARE Vxbai(mu,b,a,i) = Txbai(mu,b,a,i)
#
           ENDDO b 
#
           deallocate Lxxai(mu,*,a,i) 
#
     ENDPARDO mu, a, i
#
#    ------------------------------------------------------------------------
#
     PARDO mu, j, j1
#
           allocate Lxjxj(mu,j,*,j1) 
           allocate Lxxjj(mu,*,j,j1) 
           allocate Ljxxj(j,mu,*,j1) 
#
           DO nu 
#
              REQUEST Vxjxj(mu,j,nu,j1) j1 
              REQUEST Vxxjj(mu,nu,j,j1) j1 
              REQUEST Vjxxj(j,mu,nu,j1) j1 
#
              Lxjxj(mu,j,nu,j1) = Vxjxj(mu,j,nu,j1) 
              Lxxjj(mu,nu,j,j1) = Vxxjj(mu,nu,j,j1) 
              Ljxxj(j,mu,nu,j1) = Vjxxj(j,mu,nu,j1) 
#
           ENDDO nu 
#
           DO q 
#
              Txjqj(mu,j,q,j1) = 0.0  
#
              DO nu  
#
                 T1xjqj(mu,j,q,j1) = Lxjxj(mu,j,nu,j1)*cb(nu,q)
                 Txjqj(mu,j,q,j1) += T1xjqj(mu,j,q,j1)  
#
              ENDDO nu  
#
              PREPARE Vxjqj(mu,j,q,j1) = Txjqj(mu,j,q,j1)
#
           ENDDO q 
#
           DO b
#
              Txbjj(mu,b,j,j1) = 0.0 
              Tjxbj(j,mu,b,j1) = 0.0  
#
              DO nu 
#
                 T1xbjj(mu,b,j,j1) = Lxxjj(mu,nu,j,j1)*cb(nu,b)
                 Txbjj(mu,b,j,j1) += T1xbjj(mu,b,j,j1)  
#
                 T1jxbj(j,mu,b,j1) = Ljxxj(j,mu,nu,j1)*cb(nu,b)
                 Tjxbj(j,mu,b,j1) += T1jxbj(j,mu,b,j1)  

              ENDDO nu 
#
              PREPARE Vxbjj(mu,b,j,j1) = Txbjj(mu,b,j,j1)
              PREPARE Vjxbj(j,mu,b,j1) = Tjxbj(j,mu,b,j1)
#
           ENDDO b
#
           DO a 
#
              Txajj(mu,a,j,j1) = 0.0  
#
              DO nu  
#
                 T1xajj(mu,a,j,j1) = Lxxjj(mu,nu,j,j1)*ca(nu,a)
                 Txajj(mu,a,j,j1) += T1xajj(mu,a,j,j1)  
#
              ENDDO nu  
#
              PREPARE Vxajj(mu,a,j,j1) = Txajj(mu,a,j,j1)
#
           ENDDO a 
#
           deallocate Lxjxj(mu,j,*,j1) 
           deallocate Lxxjj(mu,*,j,j1) 
           deallocate Ljxxj(j,mu,*,j1) 
#
     ENDPARDO mu, j, j1
#
#    ------------------------------------------------------------------------
#
     PARDO mu, b, j
#
           allocate Lxxbj(mu,*,b,j) 
#
           DO nu 
#
              REQUEST Vxxbj(mu,nu,b,j) j 
              Lxxbj(mu,nu,b,j) = Vxxbj(mu,nu,b,j) 
#
           ENDDO nu 
#
           DO b1 
#
              Txbbj(mu,b1,b,j) = 0.0  
#
              DO nu  
#
                 T1xbbj(mu,b1,b,j) = Lxxbj(mu,nu,b,j)*cb(nu,b1)
                 Txbbj(mu,b1,b,j) += T1xbbj(mu,b1,b,j)  
#
              ENDDO nu  
#
              PREPARE Vxbbj(mu,b1,b,j) = Txbbj(mu,b1,b,j)
#
           ENDDO b1 
#
           DO a 
#
              Txabj(mu,a,b,j) = 0.0  
#
              DO nu  
#
                 T1xabj(mu,a,b,j) = Lxxbj(mu,nu,b,j)*ca(nu,a)
                 Txabj(mu,a,b,j) += T1xabj(mu,a,b,j)  
#
              ENDDO nu  
#
              PREPARE Vxabj(mu,a,b,j) = Txabj(mu,a,b,j)
#
           ENDDO a 
#
           deallocate Lxxbj(mu,*,b,j)  
#
     ENDPARDO mu, b, j
#
#    ------------------------------------------------------------------------
#
     PARDO mu, i, j
#
           allocate Lxixj(mu,i,*,j) 
           allocate Lixxj(i,mu,*,j) 
#
           DO nu 
#
              REQUEST Vxixj(mu,i,nu,j) j 
              REQUEST Vixxj(i,mu,nu,j) j 
#
              Lxixj(mu,i,nu,j) = Vxixj(mu,i,nu,j) 
              Lixxj(i,mu,nu,j) = Vixxj(i,mu,nu,j) 
#
           ENDDO nu 
#
           DO q 
#
              Txiqj(mu,i,q,j) = 0.0  
#
              DO nu  
#
                 T1xiqj(mu,i,q,j) = Lxixj(mu,i,nu,j)*cb(nu,q)
                 Txiqj(mu,i,q,j) += T1xiqj(mu,i,q,j)  
#
              ENDDO nu  
#
              PREPARE Vxiqj(mu,i,q,j) = Txiqj(mu,i,q,j)
#
           ENDDO q 
#
           DO b 
#
              Tixbj(i,mu,b,j) = 0.0  
#
              DO nu  
#
                 T1ixbj(i,mu,b,j) = Lixxj(i,mu,nu,j)*cb(nu,b)
                 Tixbj(i,mu,b,j) += T1ixbj(i,mu,b,j)  
#
              ENDDO nu  
#
              PREPARE Vixbj(i,mu,b,j) = Tixbj(i,mu,b,j)
#
           ENDDO b 
#
           deallocate Lxixj(mu,i,*,j) 
           deallocate Lixxj(i,mu,*,j) 
#
     ENDPARDO mu, i, j
#
#    ------------------------------------------------------------------------
#    
     execute server_barrier
#
     ENDPROC TRAN_TRAN3 
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
     PROC TRAN_TRAN4 
#
#    ------------------------------------------------------------------------
#
     PARDO p, i, i1
#
           allocate Lxipi(*,i,p,i1) 
#
           DO mu 
#
              REQUEST Vxipi(mu,i,p,i1) i1 
              REQUEST Vxipi(mu,i1,p,i) i 
              Lxipi(mu,i,p,i1)  = Vxipi(mu,i,p,i1) 
              Txipi(mu,i,p,i1)  = Vxipi(mu,i1,p,i) 
              Lxipi(mu,i,p,i1) -= Txipi(mu,i,p,i1) 
#
           ENDDO mu  
#
           DO p1 
#
              Tpipi(p1,i,p,i1) = 0.0  
#
              DO mu  
#
                 T1pipi(p1,i,p,i1) = Lxipi(mu,i,p,i1)*ca(mu,p1)
                 Tpipi(p1,i,p,i1) += T1pipi(p1,i,p,i1)  
#
              ENDDO mu  
#
              PREPARE VSpipi(p1,i,p,i1) = Tpipi(p1,i,p,i1) 
#
           ENDDO p1 
#
           deallocate Lxipi(*,i,p,i1) 
#
     ENDPARDO p, i, i1
#
     PARDO a, i, i1
#
           allocate Lxaii(*,a,i,i1) 
           allocate Lixai(i,*,a,i1) 
#
           DO mu 
#
              REQUEST Vxaii(mu,a,i,i1) i1 
              REQUEST Vixai(i,mu,a,i1) i1 
#
              Lxaii(mu,a,i,i1) = Vxaii(mu,a,i,i1)  
              Lixai(i,mu,a,i1) = Vixai(i,mu,a,i1) 
#
           ENDDO mu 
#
           DO a1 
#
              Taaii(a1,a,i,i1) = 0.0  
#
              DO mu  
#
                 T1aaii(a1,a,i,i1) = Lxaii(mu,a,i,i1)*ca(mu,a1)
                 Taaii(a1,a,i,i1) += T1aaii(a1,a,i,i1)  
#
              ENDDO mu  
#
              PREPARE Vaaii(a1,a,i,i1) = Taaii(a1,a,i,i1)
#
           ENDDO a1 
#
           deallocate Lxaii(*,a,i,i1) 
#
           DO a1 
#
              Tiaai(i,a1,a,i1) = 0.0  
#
              DO mu  
#
                 T1iaai(i,a1,a,i1) = Lixai(i,mu,a,i1)*ca(mu,a1)
                 Tiaai(i,a1,a,i1) += T1iaai(i,a1,a,i1)   
#
              ENDDO mu  
#
              PREPARE Viaai(i,a1,a,i1) = Tiaai(i,a1,a,i1)
#
           ENDDO a1 
#
           deallocate Lixai(i,*,a,i1) 
#
     ENDPARDO a, i, i1
# 
     PARDO a, a1, i
#
           allocate L1xaai(*,a,a1,i) 
#
           DO mu 
#
              REQUEST Vxaai(mu,a,a1,i) i 
#
              L1xaai(mu,a,a1,i)  = Vxaai(mu,a,a1,i)
#
           ENDDO mu 
#
           DO a2  
#
              Taaai(a2,a,a1,i) = 0.0 
#
              DO mu 
#
                 T1aaai(a2,a,a1,i) = L1xaai(mu,a,a1,i)*ca(mu,a2)
                 Taaai(a2,a,a1,i) += T1aaai(a2,a,a1,i)  
#
              ENDDO mu 
#
              T1aaai(a1,a,a2,i)           = Taaai(a2,a,a1,i) 
              T1aaai(a1,a,a2,i)          *= -1.0  
              PREPARE VSaaai(a2,a,a1,i)  += Taaai(a2,a,a1,i)
              PREPARE VSaaai(a1,a,a2,i)  += T1aaai(a1,a,a2,i)
#
           ENDDO a2  
#
           deallocate L1xaai(*,a,a1,i) 
#
     ENDPARDO a, a1, i
# 
     PARDO q, j, j1
#
           allocate Lxjqj(*,j,q,j1) 
#
           DO mu  
#
              REQUEST Vxjqj(mu,j,q,j1) j1 
              REQUEST Vxjqj(mu,j1,q,j) j1 
              Lxjqj(mu,j,q,j1)  = Vxjqj(mu,j,q,j1) 
              Txjqj(mu,j,q,j1)  = Vxjqj(mu,j1,q,j) 
              Lxjqj(mu,j,q,j1) -= Txjqj(mu,j,q,j1) 
#
           ENDDO mu  
#
           DO q1 
#
              Tqjqj(q1,j,q,j1) = 0.0 
#
              DO mu  
#
                 T1qjqj(q1,j,q,j1)      = Lxjqj(mu,j,q,j1)*cb(mu,q1)
                 Tqjqj(q1,j,q,j1)      += T1qjqj(q1,j,q,j1) 
#
              ENDDO mu  
#
              PREPARE VSqjqj(q1,j,q,j1) = Tqjqj(q1,j,q,j1)
#
           ENDDO q1 
#
           deallocate Lxjqj(*,j,q,j1) 
#
     ENDPARDO q, j, j1
#
     PARDO b, j, j1
#
           allocate Lxbjj(*,b,j,j1) 
           allocate Ljxbj(j,*,b,j1) 
#
           DO mu 
#
              REQUEST Vxbjj(mu,b,j,j1) j1 
              REQUEST Vjxbj(j,mu,b,j1) j1 
#
              Lxbjj(mu,b,j,j1) = Vxbjj(mu,b,j,j1) 
              Ljxbj(j,mu,b,j1) = Vjxbj(j,mu,b,j1) 
#
           ENDDO mu 
#
           DO b1 
#
              Tbbjj(b1,b,j,j1) = 0.0 
#
              DO mu 
#
                 T1bbjj(b1,b,j,j1) = Lxbjj(mu,b,j,j1)*cb(mu,b1)
                 Tbbjj(b1,b,j,j1) += T1bbjj(b1,b,j,j1)  
#
              ENDDO mu  
#
              PREPARE Vbbjj(b1,b,j,j1) = Tbbjj(b1,b,j,j1)
#
           ENDDO b1 
#
           deallocate Lxbjj(*,b,j,j1) 
#
           DO b1 
#
              Tjbbj(j,b1,b,j1) = 0.0 
#
              DO mu  
#
                 T1jbbj(j,b1,b,j1) = Ljxbj(j,mu,b,j1)*cb(mu,b1)
                 Tjbbj(j,b1,b,j1) += T1jbbj(j,b1,b,j1)  
#
              ENDDO mu  
#
              PREPARE Vjbbj(j,b1,b,j1) = Tjbbj(j,b1,b,j1)
#
           ENDDO b1 
#
           deallocate Ljxbj(j,*,b,j1) 
#
     ENDPARDO b, j, j1
#
     PARDO b, b1, j
#
           allocate L1xbbj(*,b,b1,j) 
#
           DO mu 
#
              REQUEST Vxbbj(mu,b,b1,j) j 
#
              L1xbbj(mu,b,b1,j)  = Vxbbj(mu,b,b1,j)
#
           ENDDO mu 
#
           DO b2  
#
              Tbbbj(b2,b,b1,j) = 0.0 
#
              DO mu 
#
                 T1bbbj(b2,b,b1,j) = L1xbbj(mu,b,b1,j)*cb(mu,b2)
                 Tbbbj(b2,b,b1,j) += T1bbbj(b2,b,b1,j)  
#
              ENDDO mu 
#
              T1bbbj(b1,b,b2,j)           = Tbbbj(b2,b,b1,j) 
              T1bbbj(b1,b,b2,j)          *= -1.0  
              PREPARE VSbbbj(b2,b,b1,j)  += Tbbbj(b2,b,b1,j)
              PREPARE VSbbbj(b1,b,b2,j)  += T1bbbj(b1,b,b2,j)
#
           ENDDO b2  
#
           deallocate L1xbbj(*,b,b1,j) 
#
     ENDPARDO b, b1, j
# 
     PARDO b, i, i1
#
           allocate Lxbii(*,b,i,i1) 
#
           DO mu  
#
              REQUEST Vxbii(mu,b,i,i1) i1 
              Lxbii(mu,b,i,i1) = Vxbii(mu,b,i,i1) 
#
           ENDDO mu  
#
           DO b1 
#
              Tbbii(b1,b,i,i1) = 0.0 
#
              DO mu  
#
                 T1bbii(b1,b,i,i1) = Lxbii(mu,b,i,i1)*cb(mu,b1)
                 Tbbii(b1,b,i,i1) += T1bbii(b1,b,i,i1)  
#
              ENDDO mu  
#
              PREPARE Vbbii(b1,b,i,i1) = Tbbii(b1,b,i,i1)
#
           ENDDO b1 
#
           deallocate Lxbii(*,b,i,i1) 
#
     ENDPARDO b, i, i1
#
     PARDO b, i, i1
#
           allocate Lxbii(*,b,i,i1) 
#
           DO mu 
#
              REQUEST Vxbii(mu,b,i,i1) i1 
              Lxbii(mu,b,i,i1) = Vxbii(mu,b,i,i1)  
#
           ENDDO mu 
#
           DO j 
#
              Tjbii(j,b,i,i1) = 0.0 
#
              DO mu 
#
                 T1jbii(j,b,i,i1) = Lxbii(mu,b,i,i1)*cb(mu,j)
                 Tjbii(j,b,i,i1) += T1jbii(j,b,i,i1)  
#
              ENDDO mu  
#
              PREPARE Vjbii(j,b,i,i1) = Tjbii(j,b,i,i1)
#
           ENDDO j 
#
           deallocate Lxbii(*,b,i,i1) 
#
     ENDPARDO b, i, i1
#
     PARDO b, a, i
#
           allocate Lxbai(*,b,a,i) 
#
           DO mu  
#
              REQUEST Vxbai(mu,b,a,i) i 
              Lxbai(mu,b,a,i) = Vxbai(mu,b,a,i) 
#
           ENDDO mu  
#
           DO b1 
#
              Tbbai(b1,b,a,i) = 0.0 
#
              DO mu  
#
                 T1bbai(b1,b,a,i) = Lxbai(mu,b,a,i)*cb(mu,b1)
                 Tbbai(b1,b,a,i) += T1bbai(b1,b,a,i)  
#
              ENDDO mu  
#
              PREPARE Vbbai(b1,b,a,i) = Tbbai(b1,b,a,i)
#
           ENDDO b1 
#
           deallocate Lxbai(*,b,a,i) 
#
     ENDPARDO b, a, i
#
     PARDO q, i, j
#
           allocate Lxiqj(*,i,q,j) 
#
           DO mu  
#
              REQUEST Vxiqj(mu,i,q,j) j 
              Lxiqj(mu,i,q,j) = Vxiqj(mu,i,q,j) 
#
           ENDDO mu  
#
           DO p 
#
              Tpiqj(p,i,q,j) = 0.0 
#
              DO mu  
#
                 T1piqj(p,i,q,j) = Lxiqj(mu,i,q,j)*ca(mu,p)
                 Tpiqj(p,i,q,j) += T1piqj(p,i,q,j)  
#
              ENDDO mu  
#
              PREPARE Vpiqj(p,i,q,j) = Tpiqj(p,i,q,j)
#
           ENDDO p 
#
           deallocate Lxiqj(*,i,q,j) 
#
     ENDPARDO q, i, j
#
     PARDO a, j, j1
#
           allocate Lxajj(*,a,j,j1) 
#
           DO mu  
#
              REQUEST Vxajj(mu,a,j,j1) j1 
              Lxajj(mu,a,j,j1) = Vxajj(mu,a,j,j1)  
#
           ENDDO mu  
#
           DO a1 
#
              Taajj(a1,a,j,j1) = 0.0 
#
              DO mu  
#
                 T1aajj(a1,a,j,j1) = Lxajj(mu,a,j,j1)*ca(mu,a1)
                 Taajj(a1,a,j,j1) += T1aajj(a1,a,j,j1)  
#
              ENDDO mu  
#
              PREPARE Vaajj(a1,a,j,j1) = Taajj(a1,a,j,j1)
#
           ENDDO a1 
#
           deallocate Lxajj(*,a,j,j1) 
#
     ENDPARDO a, j, j1
#
     PARDO b, i, j
#
           allocate Lixbj(i,*,b,j) 
#
           DO mu 
#
              REQUEST Vixbj(i,mu,b,j) j 
              Lixbj(i,mu,b,j) = Vixbj(i,mu,b,j) 
#
           ENDDO mu 
#
           DO a 
#
              Tiabj(i,a,b,j) = 0.0 
#
              DO mu 
#
                 T1iabj(i,a,b,j) = Lixbj(i,mu,b,j)*ca(mu,a)
                 Tiabj(i,a,b,j) += T1iabj(i,a,b,j)  
#
              ENDDO mu 
#
              PREPARE Viabj(i,a,b,j) += Tiabj(i,a,b,j)
#
           ENDDO a 
#
           deallocate Lixbj(i,*,b,j) 
#
     ENDPARDO b, i, j
#
     PARDO a, b, j
#
           allocate Lxabj(*,a,b,j) 
#
           DO mu  
#
              REQUEST Vxabj(mu,a,b,j) j 
              Lxabj(mu,a,b,j) = Vxabj(mu,a,b,j) 
#
           ENDDO mu  
#
           DO a1 
#
              Taabj(a1,a,b,j) = 0.0 
#
              DO mu  
#
                 T1aabj(a1,a,b,j) = Lxabj(mu,a,b,j)*ca(mu,a1)
                 Taabj(a1,a,b,j) += T1aabj(a1,a,b,j)  
#
              ENDDO mu  
#
              PREPARE Vaabj(a1,a,b,j) = Taabj(a1,a,b,j)
#
           ENDDO a1 
#
           deallocate Lxabj(*,a,b,j) 
#
     ENDPARDO a, b, j
#
#    ------------------------------------------------------------------------
#
     ENDPROC TRAN_TRAN4 
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------ 
#
     PROC TRAN_UHF 
# 
#        CALL COMP_INTEGRALS # --> compute integrals and put into served array 
         CALL TRAN_TRAN2     # --> performs the first two stages of the 
                             #     two-electron integral transformation.  
         CALL TRAN_TRAN3     # --> performs the third stage   
                             #     two-electron integral transformation.  
         CALL TRAN_TRAN4     # --> performs the fourth stage of the  
                             #     two-electron integral transformation.  
#
     ENDPROC TRAN_UHF 
#
#    ------------------------------------------------------------------------ 




#
#    ------------------------------------------------------------------------
#
      PROC HBAR_AB
#     ------------
#
#     alpha-alpha spin component first. 
#     --------------------------------- 
#
      PARDO a, a1 
#
            tpp(a,a1) = fock_a(a,a1)       
#
            DO i 
               t1pp(a,a1) = St1a(a,i)*fock_a(i,a1) 
               tpp(a,a1) -= t1pp(a,a1) 
            ENDDO i 
#
            LHBAR_aa(a,a1) += tpp(a,a1) 
#
      ENDPARDO a, a1 
#
      PARDO a, a1, a2, i  
#
            REQUEST              VSaaai(a1,a,a2,i) i  
            t1pp(a,a1)         = VSaaai(a1,a,a2,i)*St1a(a2,i) 
            tpppp(a,a1,i,a2)   = VSaaai(a1,a,a2,i) 
#
            LHBAR_aa(a,a1)                 += t1pp(a,a1) 
            PREPARE HBAR_AIBC_aaaa(a,a1,i,a2) += tpppp(a,a1,i,a2)
#
            DO i1  
                t3iaai(i1,a2,a,i)         = VSaaai(a1,a,a2,i)*St1a(a1,i1)
                PREPARE NIAAI(i1,a2,a,i) += t3iaai(i1,a2,a,i)
             ENDDO i1  
#
      ENDPARDO a, a1, a2, i  
#
      PARDO a, a1, b, j  
#
            REQUEST              Vaabj(a1,a,b,j) j  
            t1pp(a,a1)         = Vaabj(a1,a,b,j)*St1b(b,j) 
            tppqq(a,a1,j,b)    = Vaabj(a1,a,b,j)
#
            LHBAR_aa(a,a1)                += t1pp(a,a1) 
            PREPARE HBAR_AIBC_aabb(a,a1,j,b) += tppqq(a,a1,j,b) 
#
      ENDPARDO a, a1, b, j  
#
      PARDO a, i1, a2, i  
            REQUEST             T2old_aa(a,i,a2,i1) i1 
            tai(a2,i1)        = St1a(a2,i1) 
            t1ai(a2,i)        = St1a(a2,i) 
#
            tpppp(a,i,a2,i1)  = T2old_aa(a,i,a2,i1) 
            t1pppp(a,i,a2,i1) = St1a(a,i)^tai(a2,i1) 
            t2pppp(a,i,a2,i1) = St1a(a,i1)^t1ai(a2,i) 
            tpppp(a,i,a2,i1) += t1pppp(a,i,a2,i1) 
            tpppp(a,i,a2,i1) -= t2pppp(a,i,a2,i1) 
#
            DO a1 
               REQUEST              VSpipi(a2,i1,a1,i) i   
               t1pp(a,a1)         = tpppp(a,i,a2,i1)*VSpipi(a2,i1,a1,i) 
               t1pp(a,a1)        *= -0.5  
               LHBAR_aa(a,a1) += t1pp(a,a1) 
            ENDDO a1 
#
      ENDPARDO a, i1, a2, i  
#
      PARDO a, i, b, j  
#
            REQUEST           T2old_ab(a,i,b,j) j 
            tppqq(a,i,b,j)  = T2old_ab(a,i,b,j) 
            t1ppqq(a,i,b,j) = St1a(a,i)^St1b(b,j) 
            tppqq(a,i,b,j) += t1ppqq(a,i,b,j) 
#
            DO a1  
#
               REQUEST              Vpiqj(a1,i,b,j) i   
               t1pp(a,a1)         = tppqq(a,i,b,j)*Vpiqj(a1,i,b,j) 
               t1pp(a,a1)        *= -1.0  
               LHBAR_aa(a,a1) += t1pp(a,a1) 
#
            ENDDO a1  
#
      ENDPARDO a, i, b, j  
#
#     alpha-alpha spin component done. 
#     -------------------------------- 
#
#     beta-beta spin component next. 
#     ------------------------------ 
#
      PARDO b, b1 
#
            tqq(b,b1) = fock_b(b,b1)       
#
            DO j 
               t1qq(b,b1) = St1b(b,j)*fock_b(j,b1) 
               tqq(b,b1) -= t1qq(b,b1) 
            ENDDO j 
#
            LHBAR_bb(b,b1) += tqq(b,b1) 
#
      ENDPARDO b, b1 
#
      PARDO b, b1, b2, j  
            REQUEST              VSbbbj(b1,b,b2,j) j  
            t1qq(b,b1)         = VSbbbj(b1,b,b2,j)*St1b(b2,j) 
            tqqqq(b,b1,j,b2)   = VSbbbj(b1,b,b2,j)
#
            LHBAR_bb(b,b1)                 += t1qq(b,b1) 
            PREPARE HBAR_AIBC_bbbb(b,b1,j,b2) += tqqqq(b,b1,j,b2) 
      ENDPARDO b, b1, b2, j  
#
      PARDO b, b1, a, i  
            REQUEST              Vbbai(b1,b,a,i) i  
            t1qq(b,b1)         = Vbbai(b1,b,a,i)*St1a(a,i) 
            tqqpp(b,b1,i,a)    = Vbbai(b1,b,a,i)
#
            LHBAR_bb(b,b1)                += t1qq(b,b1) 
            PREPARE HBAR_AIBC_bbaa(b,b1,i,a) += tqqpp(b,b1,i,a) 
      ENDPARDO b, b1, a, i  
#
      PARDO b, j, j1, b2  
#
            REQUEST             T2old_bb(b,j,b2,j1) j1 
            tbj(b2,j1)        = St1b(b2,j1) 
            t1bj(b2,j)        = St1b(b2,j) 
#
            tqqqq(b,j,b2,j1)  = T2old_bb(b,j,b2,j1) 
            t1qqqq(b,j,b2,j1) = St1b(b,j)^tbj(b2,j1) 
            t2qqqq(b,j,b2,j1) = St1b(b,j1)^t1bj(b2,j) 
            tqqqq(b,j,b2,j1) += t1qqqq(b,j,b2,j1) 
            tqqqq(b,j,b2,j1) -= t2qqqq(b,j,b2,j1) 
#
            DO b1 
               REQUEST              VSqjqj(b2,j1,b1,j) j   
               t1qq(b,b1)         = tqqqq(b,j,b2,j1)*VSqjqj(b2,j1,b1,j) 
               t1qq(b,b1)        *= -0.5  
               LHBAR_bb(b,b1) += t1qq(b,b1) 
            ENDDO b1 
#
      ENDPARDO b, j, j1, b2  
#
      PARDO b, j, a, i  
#
            REQUEST           T2old_ab(a,i,b,j) j 
#
            tppqq(a,i,b,j)  = T2old_ab(a,i,b,j) 
            t1ppqq(a,i,b,j) = St1a(a,i)^St1b(b,j) 
            tppqq(a,i,b,j) += t1ppqq(a,i,b,j) 
#
            DO b1  
#
               REQUEST              Vpiqj(a,i,b1,j) i   
               t1qq(b,b1)         = tppqq(a,i,b,j)*Vpiqj(a,i,b1,j) 
               t1qq(b,b1)        *= -1.0  
               LHBAR_bb(b,b1) += t1qq(b,b1) 
#
            ENDDO b1  
#
      ENDPARDO b, j, a, i  
#
#     beta-beta spin component done. 
#     ------------------------------ 

      execute server_barrier 
      DO a 
      DO a1 
         PUT HBAR_aa(a,a1) += LHBAR_aa(a,a1) 
      ENDDO a1 
      ENDDO a 
      DO b 
      DO b1 
         PUT HBAR_bb(b,b1) += LHBAR_bb(b,b1) 
      ENDDO b1 
      ENDDO b 
      execute server_barrier 
      DO a 
      DO a1 
         GET HBAR_aa(a,a1) 
         LHBAR_aa(a,a1) = HBAR_aa(a,a1) 
      ENDDO a1 
      ENDDO a 
      DO b 
      DO b1 
         GET HBAR_bb(b,b1) 
         LHBAR_bb(b,b1) = HBAR_bb(b,b1) 
      ENDDO b1 
      ENDDO b 
#
      ENDPROC HBAR_AB
#     ---------------
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
      PROC HBAR_IJ
#     ------------
#
#     alpha-alpha spin component first. 
#     --------------------------------- 
#
      PARDO i, i1 
#
            tpp(i1,i) = fock_a(i1,i) 
#
            DO a 
               t1pp(i1,i) = fock_a(i1,a)*St1a(a,i) 
               tpp(i1,i) += t1pp(i1,i) 
            ENDDO a 
#
            DO a 
            DO i2 
               REQUEST      VSpipi(a,i2,i,i1) i1 
               t1pp(i1,i) = VSpipi(a,i2,i,i1)*St1a(a,i2)  
               tpp(i1,i) += t1pp(i1,i) 
            ENDDO i2 
            ENDDO a 
#
            DO b 
            DO j 
               REQUEST      Vpiqj(i,i1,b,j) i1 
               t1pp(i1,i) = Vpiqj(i,i1,b,j)*St1b(b,j)  
               tpp(i1,i) += t1pp(i1,i) 
            ENDDO j 
            ENDDO b 
#
            DO a 
            DO a1 
            DO i2 
               REQUEST             T2old_aa(a,i,a1,i2) i2 
               REQUEST             VSpipi(a,i1,a1,i2) i2  
#
               tpp(a1,i2)        = St1a(a1,i2)
               t1pp(a1,i)        = St1a(a1,i) 
#
               tpppp(a,i,a1,i2)  = T2old_aa(a,i,a1,i2)
               t1pppp(a,i,a1,i2) = St1a(a,i)^tpp(a1,i2) 
               t2pppp(a,i,a1,i2) = St1a(a,i2)^t1pp(a1,i) 
               tpppp(a,i,a1,i2) += t1pppp(a,i,a1,i2) 
               tpppp(a,i,a1,i2) -= t2pppp(a,i,a1,i2) 
#
               t1pp(i1,i)        = tpppp(a,i,a1,i2)*VSpipi(a,i1,a1,i2) 
               t1pp(i1,i)       *= 0.5 
               tpp(i1,i)        += t1pp(i1,i) 
            ENDDO i2 
            ENDDO a1 
            ENDDO a 
#
            DO a 
            DO b 
            DO j 
               REQUEST           T2old_ab(a,i,b,j) j 
               REQUEST           Vpiqj(a,i1,b,j) j  
#
               tppqq(a,i,b,j)  = T2old_ab(a,i,b,j)
               t1ppqq(a,i,b,j) = St1a(a,i)^St1b(b,j) 
               tppqq(a,i,b,j) += t1ppqq(a,i,b,j) 
#
               t1pp(i1,i)      = tppqq(a,i,b,j)*Vpiqj(a,i1,b,j) 
               tpp(i1,i)      += t1pp(i1,i) 
            ENDDO j 
            ENDDO b 
            ENDDO a 
#
            LHBAR_ii(i1,i) = tpp(i1,i) 
#
      ENDPARDO i, i1 
#
#     done alpha-alpha spin component. 
#     -------------------------------- 
#
#     beta-beta spin component next. 
#     ------------------------------ 
#
      PARDO j, j1 
#
            tqq(j1,j) = fock_b(j1,j) 
#
            DO b 
               t1qq(j1,j) = fock_b(j1,b)*St1b(b,j) 
               tqq(j1,j) += t1qq(j1,j) 
            ENDDO b 
#
            DO b 
            DO j2 
               REQUEST      VSqjqj(b,j2,j,j1) j1 
               t1qq(j1,j) = VSqjqj(b,j2,j,j1)*St1b(b,j2)  
               tqq(j1,j) += t1qq(j1,j) 
            ENDDO j2 
            ENDDO b 
#
            DO a 
            DO i 
               REQUEST      Vpiqj(a,i,j,j1) j1 
               t1qq(j1,j) = Vpiqj(a,i,j,j1)*St1a(a,i)  
               tqq(j1,j) += t1qq(j1,j) 
            ENDDO i 
            ENDDO a 
#
            DO b 
            DO b1 
            DO j2 
               REQUEST             T2old_bb(b,j,b1,j2) j2 
               REQUEST             VSqjqj(b,j1,b1,j2) j2  
#
               tqq(b1,j2)        = St1b(b1,j2)
               t1qq(b1,j)        = St1b(b1,j) 
#
               tqqqq(b,j,b1,j2)  = T2old_bb(b,j,b1,j2)
               t1qqqq(b,j,b1,j2) = St1b(b,j)^tqq(b1,j2) 
               t2qqqq(b,j,b1,j2) = St1b(b,j2)^t1qq(b1,j) 
               tqqqq(b,j,b1,j2) += t1qqqq(b,j,b1,j2) 
               tqqqq(b,j,b1,j2) -= t2qqqq(b,j,b1,j2) 
#
               t1qq(j1,j)        = tqqqq(b,j,b1,j2)*VSqjqj(b,j1,b1,j2) 
               t1qq(j1,j)       *= 0.5 
               tqq(j1,j)        += t1qq(j1,j) 
            ENDDO j2 
            ENDDO b1 
            ENDDO b 
#
            DO a 
            DO b 
            DO i 
               REQUEST           T2old_ab(a,i,b,j) j 
               REQUEST           Vpiqj(a,i,b,j1) j1  
#
               tppqq(a,i,b,j)  = T2old_ab(a,i,b,j)
               t1ppqq(a,i,b,j) = St1a(a,i)^St1b(b,j) 
               tppqq(a,i,b,j) += t1ppqq(a,i,b,j) 
#
               t1qq(j1,j)      = tppqq(a,i,b,j)*Vpiqj(a,i,b,j1) 
               tqq(j1,j)      += t1qq(j1,j) 
            ENDDO i 
            ENDDO b 
            ENDDO a 
#
            LHBAR_jj(j1,j) = tqq(j1,j) 
#
      ENDPARDO j, j1 
#
      execute server_barrier 
      DO i 
      DO i1 
         PUT HBAR_ii(i,i1) += LHBAR_ii(i,i1) 
      ENDDO i1 
      ENDDO i 
      DO j 
      DO j1 
         PUT HBAR_jj(j,j1) += LHBAR_jj(j,j1) 
      ENDDO j1 
      ENDDO j 
      execute server_barrier 
      DO i 
      DO i1 
         GET              HBAR_ii(i,i1) 
         LHBAR_ii(i,i1) = HBAR_ii(i,i1)  
      ENDDO i1 
      ENDDO i 
      DO j 
      DO j1 
         GET              HBAR_jj(j,j1) 
         LHBAR_jj(j,j1) = HBAR_jj(j,j1)  
      ENDDO j1 
      ENDDO j 
#
#     done beta-beta spin component. 
#     ------------------------------ 
#
      ENDPROC HBAR_IJ
#     ---------------
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
      PROC HBAR_IB
#     ------------
#
#     alpha-alpha spin component first. 
#     --------------------------------- 
#
      PARDO i, a 
#
            tpp(i,a) = fock_a(i,a) 
#
            DO a1 
            DO i1 
               REQUEST     VSpipi(a,i,a1,i1) i1 
               t1pp(i,a) = VSpipi(a,i,a1,i1)*St1a(a1,i1) 
               tpp(i,a) += t1pp(i,a) 
            ENDDO i1 
            ENDDO a1 
#
            DO b 
            DO j 
               REQUEST     Vpiqj(a,i,b,j) j 
               t1pp(i,a) = Vpiqj(a,i,b,j)*St1b(b,j) 
               tpp(i,a) += t1pp(i,a) 
            ENDDO j 
            ENDDO b 
#
            LHBAR_ia(i,a) = tpp(i,a) 
#
      ENDPARDO i, a 
#
#     done alpha-alpha spin component. 
#     -------------------------------- 
#
#     beta-beta spin component next. 
#     ------------------------------ 
#
      PARDO j, b 
#
            tqq(j,b) = fock_b(j,b) 
#
            DO b1 
            DO j1 
               REQUEST     VSqjqj(b,j,b1,j1) j1 
               t1qq(j,b) = VSqjqj(b,j,b1,j1)*St1b(b1,j1) 
               tqq(j,b) += t1qq(j,b) 
            ENDDO j1 
            ENDDO b1 
#
            DO a 
            DO i 
               REQUEST     Vpiqj(a,i,b,j) j 
               t1qq(j,b) = Vpiqj(a,i,b,j)*St1a(a,i) 
               tqq(j,b) += t1qq(j,b) 
            ENDDO i 
            ENDDO a 
#
            LHBAR_jb(j,b) = tqq(j,b) 
#
      ENDPARDO j, b 
#
#     done alpha-alpha spin component. 
#     -------------------------------- 

      execute server_barrier 
      DO a 
      DO i 
         PUT HBAR_ia(i,a) += LHBAR_ia(i,a) 
      ENDDO i 
      ENDDO a 
      DO b 
      DO j 
         PUT HBAR_jb(j,b) += LHBAR_jb(j,b) 
      ENDDO j 
      ENDDO b 
      execute server_barrier 
      DO a 
      DO i 
         GET HBAR_ia(i,a) 
         LHBAR_ia(i,a) = HBAR_ia(i,a)  
      ENDDO i 
      ENDDO a 
      DO b 
      DO j 
         GET HBAR_jb(j,b) 
         LHBAR_jb(j,b) = HBAR_jb(j,b)  
      ENDDO j 
      ENDDO b 
#
      ENDPROC HBAR_IB
#     ---------------
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
      PROC HBAR_IJKL  
#     --------------
#
#     (alpha,alpha,alpha,alpha) spin component. 
#     ----------------------------------------- 
#
      PARDO i, i2, i1, i3 
#
            REQUEST             VSpipi(i,i1,i2,i3) i3 
            tpppp(i,i1,i2,i3) = VSpipi(i,i1,i2,i3) 
#
            DO a
               REQUEST              VSpipi(i1,i,a,i2) i2  
               t1pppp(i,i1,i2,i3) = VSpipi(i1,i,a,i2)*St1a(a,i3) 
               tpppp(i,i1,i2,i3) += t1pppp(i,i1,i2,i3) 
            ENDDO a
#
            DO a
               REQUEST              VSpipi(i3,i,a,i2) i2  
               t1pppp(i,i1,i2,i3) = VSpipi(i3,i,a,i2)*St1a(a,i1) 
               tpppp(i,i1,i2,i3) -= t1pppp(i,i1,i2,i3) 
            ENDDO a
#
            DO a 
            DO a1 
               REQUEST              VSpipi(a,i,a1,i2) i2 
               REQUEST              T2old_aa(a,i1,a1,i3) i3 
#
               tpp(a1,i3)         = St1a(a1,i3) 
               t1pp(a1,i1)        = St1a(a1,i1) 
#
               t1pppp(a,i1,a1,i3)  = T2old_aa(a,i1,a1,i3) 
               t2pppp(a,i1,a1,i3) = St1a(a,i1)^tpp(a1,i3)  
               t3pppp(a,i1,a1,i3) = St1a(a,i3)^t1pp(a1,i1)  
               t1pppp(a,i1,a1,i3) += t2pppp(a,i1,a1,i3) 
               t1pppp(a,i1,a1,i3) -= t3pppp(a,i1,a1,i3) 
#
               t4pppp(i,i1,i2,i3) = VSpipi(a,i,a1,i2)*t1pppp(a,i1,a1,i3) 
               t4pppp(i,i1,i2,i3) *= 0.5 
               tpppp(i,i1,i2,i3)  += t4pppp(i,i1,i2,i3) 
            ENDDO a1 
            ENDDO a 
#
            PREPARE HBAR_iiii(i,i1,i2,i3) = tpppp(i,i1,i2,i3) 
#
      ENDPARDO i, i2, i1, i3 
#
#     done (alpha,alpha,alpha,alpha) spin component. 
#     ---------------------------------------------- 
#
#     (beta,beta,beta,beta) spin component. 
#     ------------------------------------- 
#
      PARDO j, j2, j1, j3 
#
            REQUEST             VSqjqj(j,j1,j2,j3) j3 
            tqqqq(j,j1,j2,j3) = VSqjqj(j,j1,j2,j3) 
#
            DO b
               REQUEST              VSqjqj(j1,j,b,j2) j2  
               t1qqqq(j,j1,j2,j3) = VSqjqj(j1,j,b,j2)*St1b(b,j3) 
               tqqqq(j,j1,j2,j3) += t1qqqq(j,j1,j2,j3) 
            ENDDO b
#
            DO b
               REQUEST              VSqjqj(j3,j,b,j2) j2  
               t1qqqq(j,j1,j2,j3) = VSqjqj(j3,j,b,j2)*St1b(b,j1) 
               tqqqq(j,j1,j2,j3) -= t1qqqq(j,j1,j2,j3) 
            ENDDO b
#
            DO b 
            DO b1 
               REQUEST              VSqjqj(b,j,b1,j2) j2 
               REQUEST              T2old_bb(b,j1,b1,j3) j3 
#
               tqq(b1,j3)         = St1b(b1,j3) 
               t1qq(b1,j1)        = St1b(b1,j1) 
#
               t1qqqq(b,j1,b1,j3)  = T2old_bb(b,j1,b1,j3) 
               t2qqqq(b,j1,b1,j3) = St1b(b,j1)^tqq(b1,j3)  
               t3qqqq(b,j1,b1,j3) = St1b(b,j3)^t1qq(b1,j1)  
               t1qqqq(b,j1,b1,j3) += t2qqqq(b,j1,b1,j3) 
               t1qqqq(b,j1,b1,j3) -= t3qqqq(b,j1,b1,j3) 
#
               t4qqqq(j,j1,j2,j3) = VSqjqj(b,j,b1,j2)*t1qqqq(b,j1,b1,j3) 
               t4qqqq(j,j1,j2,j3) *= 0.5 
               tqqqq(j,j1,j2,j3) += t4qqqq(j,j1,j2,j3) 
            ENDDO b1 
            ENDDO b 
#
            PREPARE HBAR_jjjj(j,j1,j2,j3) = tqqqq(j,j1,j2,j3) 
#
      ENDPARDO j, j2, j1, j3 
#
#     done (beta,beta,beta,beta) spin component. 
#     ------------------------------------------ 
#
#     (alpha,alpha,beta,beta) spin component. 
#     --------------------------------------- 
#
      PARDO i, i1, j2, j3 
#
            REQUEST             Vpiqj(i,i1,j2,j3) j3 
            tppqq(i,i1,j2,j3) = Vpiqj(i,i1,j2,j3) 
#
            DO b
               REQUEST              Vpiqj(i1,i,b,j2) j2  
               t1ppqq(i,i1,j2,j3) = Vpiqj(i1,i,b,j2)*St1b(b,j3) 
               tppqq(i,i1,j2,j3) += t1ppqq(i,i1,j2,j3) 
            ENDDO b
#
            DO a
               REQUEST              Vpiqj(a,i,j2,j3) j2  
               t1ppqq(i,i1,j2,j3) = Vpiqj(a,i,j2,j3)*St1a(a,i1) 
               tppqq(i,i1,j2,j3) += t1ppqq(i,i1,j2,j3) 
            ENDDO a
#
            DO a 
            DO b 
               REQUEST             Vpiqj(a,i,b,j2) j2 
               REQUEST             T2old_ab(a,i1,b,j3) j3 
#
               t1ppqq(a,i1,b,j3)  = T2old_ab(a,i1,b,j3) 
               t2ppqq(a,i1,b,j3)  = St1a(a,i1)^St1b(b,j3)  
               t1ppqq(a,i1,b,j3) += t2ppqq(a,i1,b,j3) 
#
               t3ppqq(i,i1,j2,j3) = Vpiqj(a,i,b,j2)*t1ppqq(a,i1,b,j3) 
               tppqq(i,i1,j2,j3) += t3ppqq(i,i1,j2,j3) 
            ENDDO b 
            ENDDO a 
#
            PREPARE HBAR_iijj(i,i1,j2,j3) = tppqq(i,i1,j2,j3) 
#
      ENDPARDO i, i1, j2, j3 
#
#     done (alpha,alpha,beta,beta) spin component. 
#     -------------------------------------------- 
#
      ENDPROC HBAR_IJKL 
#     -----------------
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
#     -----------------
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
      PROC HBAR_AIBC   
#     --------------
#
#     There are four spin cases to compute:
#     1. H^{ai}_{bc) --> HBAR_AIBC_aaaa  
#     2. H^{AI}_{BC) --> HBAR_AIBC_bbbb  
#     3. H^{Ai}_{Bc) --> HBAR_AIBC_bbaa  
#     4. H^{aI}_{bC) --> HBAR_AIBC_aabb  
#
#     Note that since I 'always' store arrays in (11|22) form the 
#     notation, although valid, is slightly confusing. The 
#     storage pattern is therefore array(a,b,i,c).   
#
#    ------------------------------------------------------------------------
#
#     AAAA spin combination. 
#     ---------------------- 
#
      PARDO i, a1, a2, i1  
#
            REQUEST VSpipi(a1,i1,a2,i) i 
#
            DO a 
               t1pppp(a,a1,i,a2)                  = VSpipi(a1,i1,a2,i)*St1a(a,i1) 
               t1pppp(a,a1,i,a2)                 *= -1.0  
               PREPARE HBAR_AIBC_aaaa(a,a1,i,a2) += t1pppp(a,a1,i,a2) 
            ENDDO a 
#
      ENDPARDO i, a1, a2, i1  
#
#     BBBB spin combination. 
#     ---------------------- 
#
      PARDO j, b1, b2, j1  
#
            REQUEST VSqjqj(b1,j1,b2,j) j 
#
            DO b 
               t1qqqq(b,b1,j,b2)                  = VSqjqj(b1,j1,b2,j)*St1b(b,j1) 
               t1qqqq(b,b1,j,b2)                 *= -1.0  
               PREPARE HBAR_AIBC_bbbb(b,b1,j,b2) += t1qqqq(b,b1,j,b2) 
            ENDDO b 
#
      ENDPARDO j, b1, b2, j1  
#
#     AABB spin combination. 
#     ---------------------- 
#
      PARDO i1, a1, b2, j 
#
            REQUEST Vpiqj(a1,i1,b2,j) j 
#
            DO a 
               t1ppqq(a,a1,j,b2)                  = Vpiqj(a1,i1,b2,j)*St1a(a,i1) 
               t1ppqq(a,a1,j,b2)                 *= -1.0  
               PREPARE HBAR_AIBC_aabb(a,a1,j,b2) += t1ppqq(a,a1,j,b2) 
            ENDDO a 
#
      ENDPARDO i1, a1, b2, j 
#
#     BBAA spin combination. 
#     ---------------------- 
#
      PARDO j1, b1, a2, i 
#
            REQUEST Vpiqj(a2,i,b1,j1) i 
#
            DO b 
               t1qqpp(b,b1,i,a2)                  = Vpiqj(a2,i,b1,j1)*St1b(b,j1) 
               t1qqpp(b,b1,i,a2)                 *= -1.0  
               PREPARE HBAR_AIBC_bbaa(b,b1,i,a2) += t1qqpp(b,b1,i,a2) 
            ENDDO b 
#
      ENDPARDO j1, b1, a2, i 
#
      ENDPROC HBAR_AIBC   
#     -----------------
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
      PROC HBAR_JKIA   
#     --------------
#
#     There are four spin cases to compute:
#     1. H^{jk}_{ia) --> HBAR_JKIA_aaaa  
#     2. H^{JK}_{IA) --> HBAR_JKIA_bbbb  
#     3. H^{Jk}_{Ia) --> HBAR_JKIA_bbaa  
#     4. H^{jK}_{iA) --> HBAR_JKIA_aabb  
#
#     Note that since I 'always' store arrays in (11|22) form the 
#     notation, although valid, is slightly confusing. The 
#     storage pattern is therefore array(a,b,i,c).   
#
#    ------------------------------------------------------------------------
#
#     AAAA spin combination. 
#     ---------------------- 
#
      PARDO i, i1, i2, a 
#
            REQUEST            VSpipi(i,i1,a,i2) i  
            tpppp(i,i1,a,i2) = VSpipi(i,i1,a,i2) 
#
            DO a1 
               REQUEST             VSpipi(a1,i1,a,i2) a  
               t1pppp(i,i1,a,i2) = VSpipi(a1,i1,a,i2)*St1a(a1,i) 
               tpppp(i,i1,a,i2) += t1pppp(i,i1,a,i2) 
            ENDDO a1 
#
            t1pppp(i1,i,i2,a)                 = tpppp(i,i1,a,i2) 
            PREPARE HBAR_JKIA_aaaa(i1,i,i2,a) = t1pppp(i1,i,i2,a) 
#
      ENDPARDO i, i1, i2, a 
#
#     BBBB spin combination. 
#     ---------------------- 
#
      PARDO j, j1, j2, b 
#
            REQUEST            VSqjqj(j,j1,b,j2) j  
            tqqqq(j,j1,b,j2) = VSqjqj(j,j1,b,j2) 
#
            DO b1 
               REQUEST             VSqjqj(b1,j1,b,j2) b  
               t1qqqq(j,j1,b,j2) = VSqjqj(b1,j1,b,j2)*St1b(b1,j) 
               tqqqq(j,j1,b,j2) += t1qqqq(j,j1,b,j2) 
            ENDDO b1 
#
            t1qqqq(j1,j,j2,b)                 = tqqqq(j,j1,b,j2) 
            PREPARE HBAR_JKIA_bbbb(j1,j,j2,b) = t1qqqq(j1,j,j2,b) 
#
      ENDPARDO j, j1, j2, b 
#
#     AABB spin combination. 
#     ---------------------- 
#
      PARDO i, i1, j2, b 
#
            REQUEST            Vpiqj(i,i1,b,j2) i  
            tppqq(i,i1,b,j2) = Vpiqj(i,i1,b,j2) 
#
            DO a1 
               REQUEST             Vpiqj(a1,i1,b,j2) b  
               t1ppqq(i,i1,b,j2) = Vpiqj(a1,i1,b,j2)*St1a(a1,i) 
               tppqq(i,i1,b,j2) += t1ppqq(i,i1,b,j2) 
            ENDDO a1 
#
            t1ppqq(i1,i,j2,b)                 = tppqq(i,i1,b,j2) 
            PREPARE HBAR_JKIA_aabb(i1,i,j2,b) = t1ppqq(i1,i,j2,b) 
#
      ENDPARDO i, i1, j2, b 
#
#     BBAA spin combination. 
#     ---------------------- 
#
      PARDO j, j1, i2, a 
#
            REQUEST            Vpiqj(a,i2,j,j1) j  
            tqqpp(j,j1,a,i2) = Vpiqj(a,i2,j,j1) 
#
            DO b1 
               REQUEST             Vpiqj(a,i2,b1,j1) a  
               t1qqpp(j,j1,a,i2) = Vpiqj(a,i2,b1,j1)*St1b(b1,j) 
               tqqpp(j,j1,a,i2) += t1qqpp(j,j1,a,i2) 
            ENDDO b1 
#
            t1qqpp(j1,j,i2,a)                 = tqqpp(j,j1,a,i2) 
            PREPARE HBAR_JKIA_bbaa(j1,j,i2,a) = t1qqpp(j1,j,i2,a) 
#
      ENDPARDO j, j1, i2, a 
#
      ENDPROC HBAR_JKIA   
#     -----------------
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
      PROC HBAR_IAJK   
#     --------------
#
#     There are four spin cases to compute:
#     1. H^{ia)_{jk} --> HBAR_IAJK_aaaa  
#     1. H^{IA)_{JK} --> HBAR_IAJK_bbbb  
#     1. H^{Ia)_{Jk} --> HBAR_IAJK_bbaa  
#     1. H^{iA)_{jK} --> HBAR_IAJK_aabb  
#
#     Note that since I 'always' store arrays in (11|22) form the 
#     notation, although valid, is slightly confusing. The 
#     storage pattern is therefore array(a,b,i,c).   
#
#    ------------------------------------------------------------------------
#
#     Form the two-particle intermediates needed. 
#     ------------------------------------------- 
#
      PARDO i1, a1, a, i
#
            REQUEST             Viaai(i1,a1,a,i) i # +
            REQUEST             Vaaii(a,a1,i1,i) i # -
            Tiaai(i1,a1,a,i)  = Vaaii(a,a1,i1,i)
            Tiaai(i1,a1,a,i) -= Viaai(i1,a1,a,i)
            Tiaai(i1,a1,a,i) *= -1.0
#
            DO i2
            DO a2
               REQUEST               T2old_aa(a,i2,a2,i) i
               REQUEST               VSpipi(a1,i1,a2,i2) i2 # +
#
               T1iaai(i1,a1,a,i)   = VSpipi(a1,i1,a2,i2)*T2old_aa(a,i2,a2,i)
               Tiaai(i1,a1,a,i)   -= T1iaai(i1,a1,a,i)
            ENDDO a2
            ENDDO i2
#
            DO j
            DO b
               REQUEST             T2old_ab(a,i,b,j) j
               REQUEST             Vpiqj(a1,i1,b,j)  j # +
#
               T1iaai(i1,a1,a,i) = Vpiqj(a1,i1,b,j)*T2old_ab(a,i,b,j)
               Tiaai(i1,a1,a,i) += T1iaai(i1,a1,a,i)
            ENDDO b
            ENDDO j
#
            PREPARE WHIAAI(i1,a1,a,i) = Tiaai(i1,a1,a,i)
#
      ENDPARDO i1, a1, a, i
#
      PARDO j1, b1, b, j
#
            REQUEST             Vjbbj(j1,b1,b,j) j # +
            REQUEST             Vbbjj(b,b1,j1,j) j # -
            Tjbbj(j1,b1,b,j)  = Vbbjj(b,b1,j1,j)
            Tjbbj(j1,b1,b,j) -= Vjbbj(j1,b1,b,j)
            Tjbbj(j1,b1,b,j) *= -1.0
#
            DO j2
            DO b2
               REQUEST             T2old_bb(b,j2,b2,j) j
               REQUEST             VSqjqj(b1,j1,b2,j2) j2 # +
#
               T1jbbj(j1,b1,b,j) = VSqjqj(b1,j1,b2,j2)*T2old_bb(b,j2,b2,j)
               Tjbbj(j1,b1,b,j) -= T1jbbj(j1,b1,b,j)
            ENDDO b2
            ENDDO j2
#
            DO i
            DO a
               REQUEST             T2old_ab(a,i,b,j) j
               REQUEST             Vpiqj(a,i,b1,j1)  j1 # +
#
               T1jbbj(j1,b1,b,j) = Vpiqj(a,i,b1,j1)*T2old_ab(a,i,b,j)
               Tjbbj(j1,b1,b,j) += T1jbbj(j1,b1,b,j)
            ENDDO a
            ENDDO i
#
            PREPARE WHJBBJ(j1,b1,b,j) = Tjbbj(j1,b1,b,j)
#
      ENDPARDO j1, b1, b, j 
#
      PARDO i, i1, b, b1
#
            REQUEST             Vbbii(b,b1,i,i1) i1
            Tiibb(i,i1,b,b1)  = Vbbii(b,b1,i,i1)
            Tiibb(i,i1,b,b1) *= -1.0
#
            DO a
            DO j
               REQUEST             T2old_ab(a,i1,b,j) j
               REQUEST             Vpiqj(a,i,b1,j)    j
#
               T1iibb(i,i1,b,b1) = T2old_ab(a,i1,b,j)*Vpiqj(a,i,b1,j)
               Tiibb(i,i1,b,b1) += T1iibb(i,i1,b,b1)
            ENDDO j
            ENDDO a
#
            PREPARE WHIIBB(i,i1,b,b1) = Tiibb(i,i1,b,b1)
#
      ENDPARDO i, i1, b, b1 
#
      PARDO j1, j, a, a1
#
            REQUEST             Vaajj(a,a1,j1,j) j
            Tjjaa(j1,j,a,a1)  = Vaajj(a,a1,j1,j)
            Tjjaa(j1,j,a,a1) *= -1.0
#
            DO b
            DO i
               REQUEST             T2old_ab(a,i,b,j) j
               REQUEST             Vpiqj(a1,i,b,j1)  j1
#
               T1jjaa(j1,j,a,a1) = T2old_ab(a,i,b,j)*Vpiqj(a1,i,b,j1)
               Tjjaa(j1,j,a,a1) += T1jjaa(j1,j,a,a1)
            ENDDO i
            ENDDO b
#
            PREPARE WHJJAA(j1,j,a,a1) = Tjjaa(j1,j,a,a1)
#
      ENDPARDO j1, j, a, a1 
#
      PARDO i, a, b, j
#
            REQUEST          Viabj(i,a,b,j) j
            Tiabj(i,a,b,j) = Viabj(i,a,b,j)
#
            DO a1
            DO i1
               REQUEST             T2old_ab(a1,i1,b,j) j
               REQUEST             VSpipi(a,i,a1,i1)   i1 # +
#
               T1iabj(i,a,b,j)   = VSpipi(a,i,a1,i1)*T2old_ab(a1,i1,b,j)
               Tiabj(i,a,b,j)   += T1iabj(i,a,b,j)
            ENDDO i1
            ENDDO a1
#
            DO b1
            DO j1
               REQUEST           T2old_bb(b1,j1,b,j) j
               REQUEST           Vpiqj(a,i,b1,j1)    j1 # +
#
               T1iabj(i,a,b,j) = Vpiqj(a,i,b1,j1)*T2old_bb(b1,j1,b,j)
               Tiabj(i,a,b,j) += T1iabj(i,a,b,j)
            ENDDO j1
            ENDDO b1
#
            PREPARE WHIABJ(i,a,b,j) = Tiabj(i,a,b,j)
#
      ENDPARDO i, a, b, j 
#
      PARDO j, b, a, i
#
            REQUEST          Viabj(i,a,b,j) j
            Tjbai(j,b,a,i) = Viabj(i,a,b,j)
#
            DO b1
            DO j1
               REQUEST           T2old_ab(a,i,b1,j1) j1
               REQUEST           VSqjqj(b,j,b1,j1)   j1 # +
#
               T1jbai(j,b,a,i) = VSqjqj(b,j,b1,j1)*T2old_ab(a,i,b1,j1)
               Tjbai(j,b,a,i) += T1jbai(j,b,a,i)
            ENDDO j1
            ENDDO b1
#
            DO a1
            DO i1
               REQUEST           T2old_aa(a1,i1,a,i) i
               REQUEST           Vpiqj(a1,i1,b,j)    j # +
#
               T1jbai(j,b,a,i) = Vpiqj(a1,i1,b,j)*T2old_aa(a1,i1,a,i)
               Tjbai(j,b,a,i) += T1jbai(j,b,a,i)
            ENDDO i1
            ENDDO a1
#
            PREPARE WHJBAI(j,b,a,i) = Tjbai(j,b,a,i)
#
      ENDPARDO j, b, a, i 
#
      execute server_barrier 
#
#     AAAA spin combination. 
#     ---------------------- 
#
      PARDO a, i, i1, i2
#
            REQUEST             VSpipi(i,i1,a,i2) i2
            Tiiai(i,i1,a,i2)  = VSpipi(i,i1,a,i2)
#
            DO i3
               REQUEST             HBAR_iiii(i,i1,i3,i2) i2
               T1iiai(i,i1,a,i2) = HBAR_iiii(i,i1,i3,i2)*St1a(a,i3)
               Tiiai(i,i1,a,i2) -= T1iiai(i,i1,a,i2)
            ENDDO i3
#
            PREPARE HBAR_IAJK_aaaa(i,i1,a,i2) += Tiiai(i,i1,a,i2)
#
      ENDPARDO a, i, i1, i2
#
      PARDO i, i1, a, i2
#
            Tiiai(i,i1,a,i2)  = 0.0  
            TSiiai(i,i2,a,i1) = 0.0
#
            DO a1
#
               REQUEST              T2old_aa(a,i1,a1,i2) i2
               REQUEST              WHIAAI(i,a1,a,i2) i2
#
               T1iiai(i,i1,a,i2)  = T2old_aa(a,i1,a1,i2)*LHBAR_ia(i,a1)
               Tiiai(i,i1,a,i2)  -= T1iiai(i,i1,a,i2)
#
               T1iiai(i,i1,a,i2)  = WHIAAI(i,a1,a,i2)*St1a(a1,i1)
               T2iiai(i,i2,a,i1)  = T1iiai(i,i1,a,i2)
#
               Tiiai(i,i1,a,i2)  += T1iiai(i,i1,a,i2)
               TSiiai(i,i2,a,i1) -= T2iiai(i,i2,a,i1)
#
            ENDDO a1
#
            PREPARE HBAR_IAJK_aaaa(i,i1,a,i2) += Tiiai(i,i1,a,i2)
            PREPARE HBAR_IAJK_aaaa(i,i2,a,i1) += TSiiai(i,i2,a,i1)
#
      ENDPARDO i, i1, a, i2
#
      PARDO i, a, a1, a2
#
            REQUEST VSaaai(a2,a,a1,i) i # +
#
            DO i1
               t1pp(a2,i1) = St1a(a2,i1) 
               DO i2
#
                  REQUEST               T2old_aa(a1,i1,a2,i2) i2
                  tpp(a2,i2)          = St1a(a2,i2) 
#
                  tpppp(a1,i1,a2,i2)  = T2old_aa(a1,i1,a2,i2) 
                  t1pppp(a1,i1,a2,i2) = St1a(a1,i1)^tpp(a2,i2) 
                  t2pppp(a1,i1,a2,i2) = St1a(a1,i2)^t1pp(a2,i1) 
                  tpppp(a1,i1,a2,i2) += t1pppp(a1,i1,a2,i2) 
                  tpppp(a1,i1,a2,i2) -= t2pppp(a1,i1,a2,i2) 
#
                  T1iiai(i,i1,a,i2)   = tpppp(a1,i1,a2,i2)*VSaaai(a2,a,a1,i)
                  T1iiai(i,i1,a,i2)  *= 0.5
                  PREPARE HBAR_IAJK_aaaa(i,i1,a,i2) += T1iiai(i,i1,a,i2)
#
               ENDDO i2
            ENDDO i1
#
      ENDPARDO i, a, a1, a2
#
      PARDO i, i1, a, i2
#
            Tiiai(i,i1,a,i2)  = 0.0  
            TSiiai(i,i2,a,i1) = 0.0
#
            DO a1
#
               DO i3
#
                  REQUEST               T2old_aa(a,i2,a1,i3) i3
                  REQUEST               VSpipi(i1,i,a1,i3)   i3 # +
#
                  T1iiai(i,i1,a,i2)   = VSpipi(i1,i,a1,i3)*T2old_aa(a,i2,a1,i3)
                  T2iiai(i,i2,a,i1)   = T1iiai(i,i1,a,i2)
                  Tiiai(i,i1,a,i2)   += T1iiai(i,i1,a,i2)
                  TSiiai(i,i2,a,i1)  -= T2iiai(i,i2,a,i1)
#
               ENDDO i3
#
            ENDDO a1
#
            PREPARE HBAR_IAJK_aaaa(i,i1,a,i2) += Tiiai(i,i1,a,i2)
            PREPARE HBAR_IAJK_aaaa(i,i2,a,i1) += TSiiai(i,i2,a,i1)
#
      ENDPARDO i, i1, a, i2
#
      PARDO i, i1, a, i2
#
            Tiiai(i,i1,a,i2)  = 0.0  
            TSiiai(i,i2,a,i1) = 0.0
#
            DO b
            DO j
#
               REQUEST              T2old_ab(a,i2,b,j) j
               REQUEST              Vpiqj(i1,i,b,j)    j # +
#
               T1iiai(i,i1,a,i2)  = Vpiqj(i1,i,b,j)*T2old_ab(a,i2,b,j)
               Tiiai(i,i1,a,i2)  += T1iiai(i,i1,a,i2)
#
               T2iiai(i,i2,a,i1)  = T1iiai(i,i1,a,i2)
               TSiiai(i,i2,a,i1) -= T2iiai(i,i2,a,i1)
#
            ENDDO j
            ENDDO b
#
            PREPARE HBAR_IAJK_aaaa(i,i1,a,i2) += Tiiai(i,i1,a,i2)
            PREPARE HBAR_IAJK_aaaa(i,i2,a,i1) += TSiiai(i,i2,a,i1)
#
      ENDPARDO i, i1, a, i2
#
#     AABB spin combination. 
#     ---------------------- 
#
      PARDO i, i1, b, j
#
            REQUEST           Vpiqj(i,i1,b,j) j
            Tiibj(i,i1,b,j) = Vpiqj(i,i1,b,j)
#
            DO a
#
               REQUEST            T2old_ab(a,i1,b,j) j
               REQUEST            WHIABJ(i,a,b,j) j
#
               T1iibj(i,i1,b,j) = T2old_ab(a,i1,b,j)*LHBAR_ia(i,a)
               Tiibj(i,i1,b,j) += T1iibj(i,i1,b,j)
#
               T1iibj(i,i1,b,j) = WHIABJ(i,a,b,j)*St1a(a,i1)
               Tiibj(i,i1,b,j) += T1iibj(i,i1,b,j)
#
               DO b1
#
                  REQUEST             T2old_ab(a,i1,b1,j) j
                  REQUEST             Vbbai(b1,b,a,i)   i
#
                  tppqq(a,i1,b1,j)  = T2old_ab(a,i1,b1,j) 
                  t1ppqq(a,i1,b1,j) = St1a(a,i1)^St1b(b1,j) 
                  tppqq(a,i1,b1,j) += t1ppqq(a,i1,b1,j) 
#
                  T1iibj(i,i1,b,j)  = Vbbai(b1,b,a,i)*tppqq(a,i1,b1,j)
                  Tiibj(i,i1,b,j)  += T1iibj(i,i1,b,j)
#
               ENDDO b1
#
               DO i2
#
                  REQUEST            T2old_ab(a,i2,b,j) j
                  REQUEST            VSpipi(i1,i,a,i2)  i2 # +
#
                  T1iibj(i,i1,b,j) = VSpipi(i1,i,a,i2)*T2old_ab(a,i2,b,j)
                  Tiibj(i,i1,b,j) += T1iibj(i,i1,b,j)
#
               ENDDO i2
#
               DO j1
#
                  REQUEST            T2old_ab(a,i1,b,j1) j1
                  REQUEST            Vpiqj(a,i,j,j1)     j1 # +
#
                  T1iibj(i,i1,b,j) = Vpiqj(a,i,j,j1)*T2old_ab(a,i1,b,j1)
                  Tiibj(i,i1,b,j) -= T1iibj(i,i1,b,j)
#
               ENDDO j1
#
            ENDDO a
#
            DO j1
#
               REQUEST            HBAR_iijj(i,i1,j1,j) j
#
               T1iibj(i,i1,b,j) = HBAR_iijj(i,i1,j1,j)*St1b(b,j1)
               Tiibj(i,i1,b,j) -= T1iibj(i,i1,b,j)
#
            ENDDO j1
#
            DO b1
#
               REQUEST            WHIIBB(i,i1,b,b1) b1
               T1iibj(i,i1,b,j) = WHIIBB(i,i1,b,b1)*St1b(b1,j)
               Tiibj(i,i1,b,j) -= T1iibj(i,i1,b,j)
#
               DO j2
#
                  REQUEST            T2old_bb(b1,j2,b,j) j
                  REQUEST            Vpiqj(i1,i,b1,j2)   j2 # +
#
                  T1iibj(i,i1,b,j) = Vpiqj(i1,i,b1,j2)*T2old_bb(b1,j2,b,j)
                  Tiibj(i,i1,b,j) += T1iibj(i,i1,b,j)
#
               ENDDO j2
#
            ENDDO b1
#
            PREPARE HBAR_IAJK_aabb(i,i1,b,j) = Tiibj(i,i1,b,j)
#
      ENDPARDO i, i1, b, j
#
#     BBAA spin combination. 
#     ---------------------- 
#
      PARDO j, j1, a, i
#
            REQUEST           Vpiqj(a,i,j,j1) j1
            Tjjai(j,j1,a,i) = Vpiqj(a,i,j,j1)
#
            DO b
#
               REQUEST            T2old_ab(a,i,b,j1) j1
               REQUEST            WHJBAI(j,b,a,i) i
#
               T1jjai(j,j1,a,i) = T2old_ab(a,i,b,j1)*LHBAR_jb(j,b)
               Tjjai(j,j1,a,i) += T1jjai(j,j1,a,i)
#
               T1jjai(j,j1,a,i) = WHJBAI(j,b,a,i)*St1b(b,j1)
               Tjjai(j,j1,a,i) += T1jjai(j,j1,a,i)
#
               DO a1
#
                  REQUEST             T2old_ab(a1,i,b,j1) j1
                  REQUEST             Vaabj(a1,a,b,j)   j
#
                  tppqq(a1,i,b,j1)  = T2old_ab(a1,i,b,j1) 
                  t1ppqq(a1,i,b,j1) = St1a(a1,i)^St1b(b,j1) 
                  tppqq(a1,i,b,j1) += t1ppqq(a1,i,b,j1) 
#
                  T1jjai(j,j1,a,i)  = Vaabj(a1,a,b,j)*tppqq(a1,i,b,j1)
                  Tjjai(j,j1,a,i)  += T1jjai(j,j1,a,i)
#
               ENDDO a1
#
               DO j2
#
                  REQUEST            T2old_ab(a,i,b,j2) j2
                  REQUEST            VSqjqj(j1,j,b,j2)  j2 # +
#
                  T1jjai(j,j1,a,i) = VSqjqj(j1,j,b,j2)*T2old_ab(a,i,b,j2)
                  Tjjai(j,j1,a,i) += T1jjai(j,j1,a,i)
#
               ENDDO j2
#
               DO i1
#
                  REQUEST            T2old_ab(a,i1,b,j1) j1
                  REQUEST            Vpiqj(i,i1,b,j)     j # +
#
                  T1jjai(j,j1,a,i) = T2old_ab(a,i1,b,j1)*Vpiqj(i,i1,b,j)
                  Tjjai(j,j1,a,i) -= T1jjai(j,j1,a,i)
#
               ENDDO i1
#
            ENDDO b
#
            DO i1
#
               REQUEST            HBAR_iijj(i1,i,j,j1) j1
#
               T1jjai(j,j1,a,i) = HBAR_iijj(i1,i,j,j1)*St1a(a,i1)
               Tjjai(j,j1,a,i) -= T1jjai(j,j1,a,i)
#
            ENDDO i1
#
            DO a1
#
               REQUEST            WHJJAA(j,j1,a,a1) a1
#
               T1jjai(j,j1,a,i) = WHJJAA(j,j1,a,a1)*St1a(a1,i)
               Tjjai(j,j1,a,i) -= T1jjai(j,j1,a,i)
#
               DO i1
#
                  REQUEST            T2old_aa(a1,i1,a,i) i
                  REQUEST            Vpiqj(a1,i1,j1,j)   j # +
#
                  T1jjai(j,j1,a,i) = Vpiqj(a1,i1,j1,j)*T2old_aa(a1,i1,a,i)
                  Tjjai(j,j1,a,i) += T1jjai(j,j1,a,i)
#
               ENDDO i1
#
            ENDDO a1
#
            PREPARE HBAR_IAJK_bbaa(j,j1,a,i) = Tjjai(j,j1,a,i)
#
      ENDPARDO j, j1, a, i
#
#     BBBB spin combination. 
#     ---------------------- 
#
      PARDO j, j1, b, j2
#
            REQUEST             VSqjqj(j,j1,b,j2) j2 # +
            Tjjbj(j,j1,b,j2)  = VSqjqj(j,j1,b,j2)
            TSjjbj(j,j2,b,j1) = 0.0
#
            DO j3
#
               REQUEST             HBAR_jjjj(j,j1,j3,j2) j2
#
               T1jjbj(j,j1,b,j2) = HBAR_jjjj(j,j1,j3,j2)*St1b(b,j3)
               Tjjbj(j,j1,b,j2) -= T1jjbj(j,j1,b,j2)
#
            ENDDO j3
#
            DO b1
#
               REQUEST              T2old_bb(b,j1,b1,j2) j2
               REQUEST              WHJBBJ(j,b1,b,j2) j2
#
               T1jjbj(j,j1,b,j2)  = T2old_bb(b,j1,b1,j2)*LHBAR_jb(j,b1)
               Tjjbj(j,j1,b,j2)  -= T1jjbj(j,j1,b,j2)
#
               T1jjbj(j,j1,b,j2)  = WHJBBJ(j,b1,b,j2)*St1b(b1,j1)
               T2jjbj(j,j2,b,j1)  = T1jjbj(j,j1,b,j2)
#
               Tjjbj(j,j1,b,j2)  += T1jjbj(j,j1,b,j2)
               TSjjbj(j,j2,b,j1) -= T2jjbj(j,j2,b,j1)
#
               DO b2
#
                  REQUEST               T2old_bb(b1,j1,b2,j2) j2
                  REQUEST               VSbbbj(b2,b,b1,j)   j # +
#
                  tqq(b2,j2)          = St1b(b2,j2) 
                  t1qq(b2,j1)         = St1b(b2,j1) 
#
                  tqqqq(b1,j1,b2,j2)  = T2old_bb(b1,j1,b2,j2) 
                  t1qqqq(b1,j1,b2,j2) = St1b(b1,j1)^tqq(b2,j2) 
                  t2qqqq(b1,j1,b2,j2) = St1b(b1,j2)^t1qq(b2,j1) 
                  tqqqq(b1,j1,b2,j2) += t1qqqq(b1,j1,b2,j2) 
                  tqqqq(b1,j1,b2,j2) -= t2qqqq(b1,j1,b2,j2) 
#
                  T1jjbj(j,j1,b,j2)   = tqqqq(b1,j1,b2,j2)*VSbbbj(b2,b,b1,j)
                  T1jjbj(j,j1,b,j2)  *= 0.5
                  Tjjbj(j,j1,b,j2)   += T1jjbj(j,j1,b,j2)
#
               ENDDO b2
#
               DO j3
#
                  REQUEST              T2old_bb(b,j2,b1,j3) j3
                  REQUEST              VSqjqj(j1,j,b1,j3)   j3 # +
#
                  T1jjbj(j,j1,b,j2)  = VSqjqj(j1,j,b1,j3)*T2old_bb(b,j2,b1,j3)
                  Tjjbj(j,j1,b,j2)  += T1jjbj(j,j1,b,j2)
#
                  T2jjbj(j,j2,b,j1)  = T1jjbj(j,j1,b,j2)
                  TSjjbj(j,j2,b,j1) -= T2jjbj(j,j2,b,j1)
#
               ENDDO j3
#
            ENDDO b1
#
            DO a
            DO i
#
               REQUEST              T2old_ab(a,i,b,j2) j2
               REQUEST              Vpiqj(a,i,j1,j)    j # +
#
               T1jjbj(j,j1,b,j2)  = Vpiqj(a,i,j1,j)*T2old_ab(a,i,b,j2)
               T2jjbj(j,j2,b,j1)  = T1jjbj(j,j1,b,j2)
#
               Tjjbj(j,j1,b,j2)  += T1jjbj(j,j1,b,j2)
               TSjjbj(j,j2,b,j1) -= T2jjbj(j,j2,b,j1)
#
            ENDDO i
            ENDDO a
#
            PREPARE HBAR_IAJK_bbbb(j,j1,b,j2) += Tjjbj(j,j1,b,j2)
            PREPARE HBAR_IAJK_bbbb(j,j2,b,j1) += TSjjbj(j,j2,b,j1)
#
      ENDPARDO j, j1, b, j2 
#
      execute server_barrier 
#
      ENDPROC HBAR_IAJK   
#     -----------------
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
      PROC HBAR_AJIB     
#     --------------
#
#     There are four spin cases to compute:
#     1. H^{aj)_{ib} --> HBAR_AJIB_aaaa  
#     2. H^{AJ)_{IB} --> HBAR_AJIB_bbbb  
#     3. H^{aJ)_{iB} --> HBAR_AJIB_aabb  
#     4. H^{Aj)_{Ib} --> HBAR_AJIB_bbaa  
#     5. H^{Aj)_{iB} --> HBAR_AJIB_iibb   
#     6. H^{aJ)_{Ib} --> HBAR_AJIB_jjaa   
#
#     Note that since I 'always' store arrays in (11|22) form the 
#     notation, although valid, is slightly confusing. The 
#     storage pattern is therefore array(a,b,i,c).   
#
#    ------------------------------------------------------------------------
#
#     AAAA spin combination. 
#     ---------------------- 
#
      PARDO i1, a1, a, i
#
            REQUEST                              Viaai(i1,a1,a,i) i 
            REQUEST                              Vaaii(a,a1,i1,i) i 
            Tiaai(i1,a1,a,i)                   = Vaaii(a,a1,i1,i)
            Tiaai(i1,a1,a,i)                  -= Viaai(i1,a1,a,i)
            Tiaai(i1,a1,a,i)                  *= -1.0
            PREPARE HBAR_AJIB_aaaa(i1,a1,a,i) += Tiaai(i1,a1,a,i)
#
      ENDPARDO i1, a1, a, i
#
      PARDO i, i1, a1, i2  
#
            REQUEST VSpipi(a1,i1,i,i2) i
#
            DO a
               T1iaai(i1,a1,a,i)                  = VSpipi(a1,i1,i,i2)*St1a(a,i2)
               T1iaai(i1,a1,a,i)                 *= -1.0  
               PREPARE HBAR_AJIB_aaaa(i1,a1,a,i) += T1iaai(i1,a1,a,i)
            ENDDO a
#
      ENDPARDO i, i1, a1, i2
#
      PARDO i1, a1, a, a2  
#
            REQUEST  VSaaai(a2,a,a1,i1) i1
#
            DO i 
               T2iaai(i,a,a1,i1)                  = VSaaai(a2,a,a1,i1)*St1a(a2,i)
               T1iaai(i1,a1,a,i)                  = T2iaai(i,a,a1,i1)
               PREPARE HBAR_AJIB_aaaa(i1,a1,a,i) += T1iaai(i1,a1,a,i)
            ENDDO i
#
      ENDPARDO i1, a1, a, a2  
#
      PARDO i, a, a2, i2  
#
            REQUEST               T2old_aa(a2,i,a,i2) a2 
            tai(a,i2)           = St1a(a,i2)
            T1aiai(a2,i,a,i2)   = St1a(a2,i)^tai(a,i2)
            T1aiai(a2,i,a,i2)  += T2old_aa(a2,i,a,i2)
#
            DO a1 
            DO i1
#
               REQUEST                              VSpipi(a2,i2,a1,i1) a2 
               Taiai(a1,i2,a2,i1)                 = VSpipi(a2,i2,a1,i1)
               T1iaai(i1,a1,a,i)                  = T1aiai(a2,i,a,i2)*Taiai(a1,i2,a2,i1)
               T1iaai(i1,a1,a,i)                 *= -1.0  
               PREPARE HBAR_AJIB_aaaa(i1,a1,a,i) += T1iaai(i1,a1,a,i)
#
            ENDDO i1
            ENDDO a1
#
      ENDPARDO i, a, a2, i2
#
      PARDO i1, a1, b, j
#
            REQUEST Vpiqj(a1,i1,b,j) j 
#
            DO a
            DO i
#
               REQUEST                              T2old_ab(a,i,b,j) j 
               T1iaai(i1,a1,a,i)                  = Vpiqj(a1,i1,b,j)*T2old_ab(a,i,b,j)
               PREPARE HBAR_AJIB_aaaa(i1,a1,a,i) += T1iaai(i1,a1,a,i)
#
            ENDDO i
            ENDDO a
#
      ENDPARDO i1, a1, b, j
#
#     BBBB spin combination. 
#     ---------------------- 
#
      PARDO b, b1, j1, b2  
#
            REQUEST VSbbbj(b2,b1,b,j1) j1
#
            DO j
               t3jbbj(j,b,b1,j1)         = VSbbbj(b2,b1,b,j1)*St1b(b2,j)
               PREPARE NJBBJ(j,b,b1,j1) += t3jbbj(j,b,b1,j1) 
            ENDDO j
#
      ENDPARDO b, b1, j1, b2  
#
      PARDO j1, b1, b, j
#
            REQUEST                              Vjbbj(j1,b1,b,j) j 
            REQUEST                              Vbbjj(b,b1,j1,j) j 
            Tjbbj(j1,b1,b,j)                   = Vbbjj(b,b1,j1,j)
            Tjbbj(j1,b1,b,j)                  -= Vjbbj(j1,b1,b,j)
            Tjbbj(j1,b1,b,j)                  *= -1.0
            PREPARE HBAR_AJIB_bbbb(j1,b1,b,j) += Tjbbj(j1,b1,b,j)
#
      ENDPARDO j1, b1, b, j 
#
      PARDO j1, b, b1, b2  
#
            REQUEST VSbbbj(b2,b,b1,j1) b 
#
            DO j 
               T2jbbj(j,b,b1,j1)                  = VSbbbj(b2,b,b1,j1)*St1b(b2,j)
               T1jbbj(j1,b1,b,j)                  = T2jbbj(j,b,b1,j1)
               PREPARE HBAR_AJIB_bbbb(j1,b1,b,j) += T1jbbj(j1,b1,b,j)
            ENDDO j
#
      ENDPARDO j1, b, b1, b2  
#
      PARDO j, j1, b1, j2
#
            REQUEST VSqjqj(b1,j1,j,j2) j
#
            DO b
               T1jbbj(j1,b1,b,j)                  = VSqjqj(b1,j1,j,j2)*St1b(b,j2)
               T1jbbj(j1,b1,b,j)                 *= -1.0  
               PREPARE HBAR_AJIB_bbbb(j1,b1,b,j) += T1jbbj(j1,b1,b,j)
            ENDDO b
#
      ENDPARDO j, j1, b1, j2 
#
      PARDO j, b, b2, j2
#
            REQUEST               T2old_bb(b2,j,b,j2) j 
            tbj(b2,j)           = St1b(b2,j)
            T1bjbj(b2,j,b,j2)   = St1b(b,j2)^tbj(b2,j)
            T1bjbj(b2,j,b,j2)  += T2old_bb(b2,j,b,j2)
#
            DO j1
            DO b1
#
               REQUEST                              VSqjqj(b2,j2,b1,j1) j1 
               T1jbbj(j1,b1,b,j)                  = T1bjbj(b2,j,b,j2)*VSqjqj(b2,j2,b1,j1)
               T1jbbj(j1,b1,b,j)                 *= -1.0  
               PREPARE HBAR_AJIB_bbbb(j1,b1,b,j) += T1jbbj(j1,b1,b,j)
#
            ENDDO b1
            ENDDO j1
#
      ENDPARDO j, b, b2, j2 
#
      PARDO j, b, a, i
#
            REQUEST T2old_ab(a,i,b,j) a 
#
            DO b1  
            DO j1  
#
               REQUEST                              Vpiqj(a,i,b1,j1) a 
               T1jbbj(j1,b1,b,j)                  = Vpiqj(a,i,b1,j1)*T2old_ab(a,i,b,j)
               PREPARE HBAR_AJIB_bbbb(j1,b1,b,j) += T1jbbj(j1,b1,b,j)
#
            ENDDO j1  
            ENDDO b1  
#
      ENDPARDO j, b, a, i 
#
#     AABB spin combination. 
#     ---------------------- 
#
      PARDO i, a, b, j
#
            REQUEST                           Viabj(i,a,b,j) j
            Tiabj(i,a,b,j)                  = Viabj(i,a,b,j)
            PREPARE HBAR_AJIB_aabb(i,a,b,j)+= Tiabj(i,a,b,j)
#
      ENDPARDO i, a, b, j 
#
      PARDO i, a, b, b1  
#
            REQUEST Vbbai(b1,b,a,i) i 
#
            DO j
#
               Tjbai(j,b,a,i)                   = Vbbai(b1,b,a,i)*St1b(b1,j)
               T2jbai(j,b,a,i)                  = Tjbai(j,b,a,i)
               Tiabj(i,a,b,j)                   = Tjbai(j,b,a,i)  
               PREPARE NJBAI(j,b,a,i)          += T2jbai(j,b,a,i)
               PREPARE HBAR_AJIB_aabb(i,a,b,j) += Tiabj(i,a,b,j)
#
            ENDDO j
#
      ENDPARDO i, a, b, b1  
#
      PARDO b, i, a, j
#
            Tiabj(i,a,b,j)  = 0.0  
#
            DO j1
#
               REQUEST           Vpiqj(a,i,j,j1) j 
               T1iabj(i,a,b,j) = Vpiqj(a,i,j,j1)*St1b(b,j1)
               Tiabj(i,a,b,j) -= T1iabj(i,a,b,j)
#
            ENDDO j1
#
            PREPARE HBAR_AJIB_aabb(i,a,b,j) += Tiabj(i,a,b,j)
#
      ENDPARDO b, i, a, j 
#
      PARDO j, b, b1, j1
#
            REQUEST              T2old_bb(b1,j,b,j1) b 
#
            tbj(b,j1)          = St1b(b,j1)
            T2bjbj(b1,j,b,j1)  = St1b(b1,j)^tbj(b,j1)
            T2bjbj(b1,j,b,j1) += T2old_bb(b1,j,b,j1)
#
            DO i
            DO a
#
               REQUEST                            Vpiqj(a,i,b1,j1) a 
               Tiabj(i,a,b,j)                   = T2bjbj(b1,j,b,j1)*Vpiqj(a,i,b1,j1)
               Tiabj(i,a,b,j)                  *= -1.0  
               PREPARE HBAR_AJIB_aabb(i,a,b,j) += Tiabj(i,a,b,j)
#
            ENDDO a
            ENDDO i
#
      ENDPARDO j, b, b1, j1 
#
      PARDO i1, a1, b, j
#
            REQUEST T2old_ab(a1,i1,b,j) a1 
#
            DO a
            DO i
#
               REQUEST                            VSpipi(a1,i1,a,i) a1 
               Tiabj(i,a,b,j)                   = T2old_ab(a1,i1,b,j)*VSpipi(a1,i1,a,i)
               PREPARE HBAR_AJIB_aabb(i,a,b,j) += Tiabj(i,a,b,j)
#
            ENDDO i
            ENDDO a
#
      ENDPARDO i1, a1, b, j 
#
#     BBAA spin combination. 
#     ---------------------- 
#
      PARDO j, b, a, i
#
            REQUEST                            Viabj(i,a,b,j) j 
            Tjbai(j,b,a,i)                   = Viabj(i,a,b,j)
            PREPARE HBAR_AJIB_BBAA(j,b,a,i) += Tjbai(j,b,a,i)
#
      ENDPARDO j, b, a, i 
#
      PARDO j, b, a, a1  
#
            REQUEST Vaabj(a1,a,b,j) j 
#
            DO i 
               Tiabj(i,a,b,j)                   = Vaabj(a1,a,b,j)*St1a(a1,i)
               Tjbai(j,b,a,i)                   = Tiabj(i,a,b,j)
               prepare NIABJ(i,a,b,j)          += tiabj(i,a,b,j)
               PREPARE HBAR_AJIB_BBAA(j,b,a,i) += Tjbai(j,b,a,i)
            ENDDO i
#
      ENDPARDO j, b, a, a1 
#
      PARDO a, j, b, i
#
            Tjbai(j,b,a,i) = 0.0  
#
            DO i1
               REQUEST           Vpiqj(i,i1,b,j) b 
               T1jbai(j,b,a,i) = Vpiqj(i,i1,b,j)*St1a(a,i1)
               Tjbai(j,b,a,i) -= T1jbai(j,b,a,i)
            ENDDO i1
#
            PREPARE HBAR_AJIB_BBAA(j,b,a,i) += Tjbai(j,b,a,i)
#
      ENDPARDO a, j, b, i 
#
      PARDO i, a, a1, i1
#
            REQUEST              T2old_aa(a1,i,a,i1) a1 
            tai(a,i1)          = St1a(a,i1)
            T2aiai(a1,i,a,i1)  = St1a(a1,i)^tai(a,i1)
            T2aiai(a1,i,a,i1) += T2old_aa(a1,i,a,i1)
#
            DO j
            DO b
#
               REQUEST                            Vpiqj(a1,i1,b,j) a1 
               Tjbai(j,b,a,i)                   = Vpiqj(a1,i1,b,j)*T2aiai(a1,i,a,i1)
               Tjbai(j,b,a,i)                  *= -1.0  
               PREPARE HBAR_AJIB_BBAA(j,b,a,i) += Tjbai(j,b,a,i)
#
            ENDDO b
            ENDDO j
#
      ENDPARDO i, a, a1, i1 
#
      PARDO i, a, j1, b1  
#
            REQUEST T2old_ab(a,i,b1,j1) j1 
#
            DO b
            DO j
#
               REQUEST                            VSqjqj(b1,j1,b,j) j1 
               Tjbai(j,b,a,i)                   = T2old_ab(a,i,b1,j1)*VSqjqj(b1,j1,b,j)
               PREPARE HBAR_AJIB_BBAA(j,b,a,i) += Tjbai(j,b,a,i)
#
            ENDDO j
            ENDDO b
#
      ENDPARDO i, a, j1, b1  
#
#     ABAB spin combination. 
#     ---------------------- 
#
      PARDO i1, b1, b, i
#
            REQUEST                              Vbbii(b,b1,i1,i) i 
            Tiibb(i1,i,b,b1)                   = Vbbii(b,b1,i1,i)
            Tiibb(i1,i,b,b1)                  *= -1.0
            PREPARE HBAR_AJIB_iibb(i1,i,b,b1) += Tiibb(i1,i,b,b1)
#
      ENDPARDO i1, b1, b, i
#
      PARDO b1, b, a1, i1  
#
            REQUEST Vbbai(b1,b,a1,i1) i1 
#
            DO i
               T1iibb(i1,i,b,b1)                  = Vbbai(b1,b,a1,i1)*St1a(a1,i)
               T2iibb(i1,i,b,b1)                  = T1iibb(i1,i,b,b1)  
               T2iibb(i1,i,b,b1)                 *= -1.0 
               PREPARE NIIBB(i1,i,b,b1)          += T1iibb(i1,i,b,b1)
               PREPARE HBAR_AJIB_iibb(i1,i,b,b1) += T2iibb(i1,i,b,b1)
            ENDDO i
#
      ENDPARDO b1, b, a1, i1  
#
      PARDO i1, b1, b, i
#
            Tiibb(i1,i,b,b1) = 0.0 
#
            DO j1
               REQUEST             Vpiqj(i,i1,b1,j1) i 
               T1iibb(i1,i,b,b1) = Vpiqj(i,i1,b1,j1)*St1b(b,j1)
               Tiibb(i1,i,b,b1) += T1iibb(i1,i,b,b1) 
            ENDDO j1
#
            PREPARE HBAR_AJIB_iibb(i1,i,b,b1) += Tiibb(i1,i,b,b1)
#
      ENDPARDO i1, b1, b, i
#
      PARDO i, b, j1, a1  
#
            REQUEST              T2old_ab(a1,i,b,j1) j1 
            Taibj(a1,i,b,j1)   = St1a(a1,i)^St1b(b,j1)
            T1aibj(a1,i,b,j1)  = T2old_ab(a1,i,b,j1)
            T1aibj(a1,i,b,j1) += Taibj(a1,i,b,j1)
#
            DO i1
            DO b1
#
               REQUEST                              Vpiqj(a1,i1,b1,j1) j1 
               T1iibb(i1,i,b,b1)                  = T1aibj(a1,i,b,j1)*Vpiqj(a1,i1,b1,j1)
               PREPARE HBAR_AJIB_iibb(i1,i,b,b1) += T1iibb(i1,i,b,b1)
#
            ENDDO b1
            ENDDO i1
#
      ENDPARDO i, b, j1, a1  
#
#     BABA spin combination. 
#     ---------------------- 
#
      PARDO j1, a1, a, j
#
            REQUEST                              Vaajj(a,a1,j1,j) a 
            Tjjaa(j1,j,a,a1)                   = Vaajj(a,a1,j1,j)
            Tjjaa(j1,j,a,a1)                  *= -1.0
            PREPARE HBAR_AJIB_jjaa(j1,j,a,a1) += Tjjaa(j1,j,a,a1)
#
      ENDPARDO j1, a1, a, j
#
      PARDO j1, a1, a, b1  
#
            REQUEST Vaabj(a1,a,b1,j1) a 
#
            DO j
               T1jjaa(j1,j,a,a1)                  = Vaabj(a1,a,b1,j1)*St1b(b1,j)
               T2jjaa(j1,j,a,a1)                  = T1jjaa(j1,j,a,a1)
               T1jjaa(j1,j,a,a1)                 *= -1.0  
               PREPARE NJJAA(j1,j,a,a1)          += T2jjaa(j1,j,a,a1)
               PREPARE HBAR_AJIB_jjaa(j1,j,a,a1) += T1jjaa(j1,j,a,a1)
            ENDDO j
#
      ENDPARDO j1, a1, a, b1  
#
      PARDO a, j1, a1, j
#
            Tjjaa(j1,j,a,a1) = 0.0  
#
            DO i1
               REQUEST             Vpiqj(a1,i1,j,j1) j 
               T1jjaa(j1,j,a,a1) = Vpiqj(a1,i1,j,j1)*St1a(a,i1)
               Tjjaa(j1,j,a,a1) += T1jjaa(j1,j,a,a1)
            ENDDO i1
#
            PREPARE HBAR_AJIB_jjaa(j1,j,a,a1) += Tjjaa(j1,j,a,a1)
#
      ENDPARDO a, j1, a1, j
#
      PARDO j, a, i1, b1  
#
            REQUEST              T2old_ab(a,i1,b1,j) i1 
            Taibj(a,i1,b1,j)   = St1b(b1,j)^St1a(a,i1)
            T1aibj(a,i1,b1,j)  = T2old_ab(a,i1,b1,j)
            T1aibj(a,i1,b1,j) += Taibj(a,i1,b1,j)
#
            DO j1
            DO a1
#
               REQUEST                              Vpiqj(a1,i1,b1,j1) i1 
               T1jjaa(j1,j,a,a1)                  = T1aibj(a,i1,b1,j)*Vpiqj(a1,i1,b1,j1)
               PREPARE HBAR_AJIB_jjaa(j1,j,a,a1) += T1jjaa(j1,j,a,a1)
#
            ENDDO a1
            ENDDO j1
#
      ENDPARDO j, a, i1, b1  
#
      ENDPROC HBAR_AJIB     
#     -----------------
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
      PROC HBAR_ABCI    
#     --------------
#
#     There are four spin cases to compute:
#     1. H^{ab)_{ci} --> HBAR_ABCI_aaaa  
#     2. H^{AB)_{CI} --> HBAR_ABCI_bbbb  
#     3. H^{aB)_{cI} --> HBAR_ABCI_aabb  
#     4. H^{Ab)_{Ci} --> HBAR_ABCI_bbaa  
#
#     Note that since I 'always' store arrays in (11|22) form the 
#     notation, although valid, is slightly confusing. The 
#     storage pattern is therefore array(a,b,i,c).   
#
#    ------------------------------------------------------------------------
#
#     AAAA spin component. 
#     -------------------- 
#
      PARDO a, a2, a1, i 
#
            REQUEST                              VSaaai(a,a1,a2,i) i 
            tpppp(a,a1,a2,i)                   = VSaaai(a,a1,a2,i) 
            PREPARE HBAR_ABCI_aaaa(a,a1,a2,i) += tpppp(a,a1,a2,i) 
#
      ENDPARDO a, a2, a1, i 
#
      PARDO a, a2, i, i1 
#
            REQUEST T2old_aa(a,i1,a2,i) i1 
#
            DO a1 
#
               t1pppp(a,a1,a2,i)                  = T2old_aa(a,i1,a2,i)*LHBAR_ia(i1,a1) 
               t1pppp(a,a1,a2,i)                 *= -1.0  
               PREPARE HBAR_ABCI_aaaa(a,a1,a2,i) += t1pppp(a,a1,a2,i) 
#
            ENDDO a1 
#
      ENDPARDO a, a2, i, i1 
#
      PARDO a, a2, i1, i2  
#
            REQUEST               T2old_aa(a,i1,a2,i2) i2 
            tpp(a2,i2)          = St1a(a2,i2) 
            t1pp(a2,i1)         = St1a(a2,i1) 
#
            t1pppp(a,i1,a2,i2)  = St1a(a,i1)^tpp(a2,i2) 
            t2pppp(a,i1,a2,i2)  = St1a(a,i2)^t1pp(a2,i1) 
            t1pppp(a,i1,a2,i2) += T2old_aa(a,i1,a2,i2)  
            t1pppp(a,i1,a2,i2) -= t2pppp(a,i1,a2,i2) 
#
            DO a1 
            DO i 
#
#               t2pppp(a,a1,a2,i)   = t1pppp(a,i1,a2,i2)*VSpipi(a1,i1,i,i2) 
               REQUEST                              HBAR_JKIA_aaaa(i1,i,i2,a1) a1
               t2pppp(a,a1,a2,i)                  = t1pppp(a,i1,a2,i2)*HBAR_JKIA_aaaa(i1,i,i2,a1)
               t2pppp(a,a1,a2,i)                 *=-0.5 
               PREPARE HBAR_ABCI_aaaa(a,a1,a2,i) += t2pppp(a,a1,a2,i) 
#
            ENDDO i 
            ENDDO a1 
#
      ENDPARDO a, a2, i1, i2  
#
      PARDO i, a2, a1, i1  
#
            REQUEST WHIAAI(i1,a1,a2,i) i 
#
            DO a 
               t1pppp(a,a1,a2,i)                  = WHIAAI(i1,a1,a2,i)*St1a(a,i1) 
               t2pppp(a2,a1,a,i)                  = t1pppp(a,a1,a2,i)  
               t1pppp(a,a1,a2,i)                 *= -1.0  
               PREPARE HBAR_ABCI_aaaa(a,a1,a2,i) += t1pppp(a,a1,a2,i) 
               PREPARE HBAR_ABCI_aaaa(a2,a1,a,i) += t2pppp(a2,a1,a,i) 
            ENDDO a 
#
      ENDPARDO i, a2, a1, i1 
#
      PARDO i, a, a1, i1 
#
            REQUEST  NIAAI(i,a1,a,i1) i1
#
            DO a2 
               t1pppp(a,a1,a2,i)                  = NIAAI(i,a1,a,i1)*St1a(a2,i1)
               t2pppp(a2,a1,a,i)                  = t1pppp(a,a1,a2,i)  
               t2pppp(a2,a1,a,i)                 *= -1.0  
               PREPARE HBAR_ABCI_aaaa(a,a1,a2,i) += t1pppp(a,a1,a2,i) 
               PREPARE HBAR_ABCI_aaaa(a2,a1,a,i) += t2pppp(a2,a1,a,i) 
            ENDDO a2  
#
      ENDPARDO i, a, a1, i1 
#
      PARDO a, a1, a3, i1  
#
            REQUEST  VSaaai(a1,a,a3,i1) i1
#
            DO a2
            DO i
#
               REQUEST                              T2old_aa(a2,i,a3,i1) i1
               t1pppp(a,a1,a2,i)                  = VSaaai(a1,a,a3,i1)*T2old_aa(a2,i,a3,i1)
               t2pppp(a2,a1,a,i)                  = t1pppp(a,a1,a2,i)
               t2pppp(a2,a1,a,i)                 *= -1.0  
               PREPARE HBAR_ABCI_aaaa(a,a1,a2,i) += t1pppp(a,a1,a2,i) 
               PREPARE HBAR_ABCI_aaaa(a2,a1,a,i) += t2pppp(a2,a1,a,i) 
#
            ENDDO i 
            ENDDO a2 
#
      ENDPARDO a, a1, a3, i1  
#
      PARDO a, a1, b, j 
#
            REQUEST Vaabj(a1,a,b,j) j 
#
            DO a2  
            DO i  
#
               REQUEST                              T2old_ab(a2,i,b,j) j 
               t1pppp(a,a1,a2,i)                  = Vaabj(a1,a,b,j)*T2old_ab(a2,i,b,j)  
               t2pppp(a2,a1,a,i)                  = t1pppp(a,a1,a2,i) 
               t2pppp(a2,a1,a,i)                 *= -1.0  
               PREPARE HBAR_ABCI_aaaa(a,a1,a2,i) += t1pppp(a,a1,a2,i) 
               PREPARE HBAR_ABCI_aaaa(a2,a1,a,i) += t2pppp(a2,a1,a,i) 
#
            ENDDO i 
            ENDDO a2  
#
      ENDPARDO a, a1, b, j 
#
#     BBBB spin component. 
#     -------------------- 
#
      PARDO b, b2, b1, j 
#
            REQUEST                              VSbbbj(b,b1,b2,j) j 
            tqqqq(b,b1,b2,j)                   = VSbbbj(b,b1,b2,j) 
            PREPARE HBAR_ABCI_bbbb(b,b1,b2,j) += tqqqq(b,b1,b2,j) 
#
      ENDPARDO b, b2, b1, j 
#
      PARDO j, b, b2, j1 
#
            REQUEST T2old_bb(b,j1,b2,j) j1 
#
            DO b1 
#
               t1qqqq(b,b1,b2,j)                  = T2old_bb(b,j1,b2,j)*LHBAR_jb(j1,b1) 
               t1qqqq(b,b1,b2,j)                 *= -1.0  
               PREPARE HBAR_ABCI_bbbb(b,b1,b2,j) += t1qqqq(b,b1,b2,j) 
#
            ENDDO b1 
#
      ENDPARDO j, b, b2, j1 
#
      PARDO b, b2, j1, j2 
#
            REQUEST               T2old_bb(b,j1,b2,j2) j2 
            tqq(b2,j2)          = St1b(b2,j2) 
            t1qq(b2,j1)         = St1b(b2,j1) 
#
            t1qqqq(b,j1,b2,j2)  = St1b(b,j1)^tqq(b2,j2) 
            t2qqqq(b,j1,b2,j2)  = St1b(b,j2)^t1qq(b2,j1) 
            t1qqqq(b,j1,b2,j2) += T2old_bb(b,j1,b2,j2)  
            t1qqqq(b,j1,b2,j2) -= t2qqqq(b,j1,b2,j2) 
#
            DO b1 
            DO j 
#
#               t2qqqq(b,b1,b2,j)   = t1qqqq(b,j1,b2,j2)*VSqjqj(b1,j1,j,j2) 
               REQUEST                              HBAR_JKIA_bbbb(j1,j,j2,b1) b1
               t2qqqq(b,b1,b2,j)                  = t1qqqq(b,j1,b2,j2)*HBAR_JKIA_bbbb(j1,j,j2,b1)
               t2qqqq(b,b1,b2,j)                 *=-0.5 
               PREPARE HBAR_ABCI_bbbb(b,b1,b2,j) += t2qqqq(b,b1,b2,j) 
#
            ENDDO j 
            ENDDO b1 
#
      ENDPARDO b, b2, j1, j2 
#
      PARDO j, b2, b1, j1 
#
            REQUEST WHJBBJ(j1,b1,b2,j) j 
#
            DO b 
               t1qqqq(b,b1,b2,j)                  = WHJBBJ(j1,b1,b2,j)*St1b(b,j1) 
               t2qqqq(b2,b1,b,j)                  = t1qqqq(b,b1,b2,j)  
               t1qqqq(b,b1,b2,j)                 *= -1.0  
               PREPARE HBAR_ABCI_bbbb(b,b1,b2,j) += t1qqqq(b,b1,b2,j) 
               PREPARE HBAR_ABCI_bbbb(b2,b1,b,j) += t2qqqq(b2,b1,b,j) 
            ENDDO b 
#
      ENDPARDO j, b2, b1, j1 
#
      PARDO j, b , b1, j1 
#
            REQUEST NJBBJ(j,b1,b,j1) j1
#
            DO b2 
               t1qqqq(b,b1,b2,j)                  = NJBBJ(j,b1,b,j1)*St1b(b2,j1)
               t2qqqq(b2,b1,b,j)                  = t1qqqq(b,b1,b2,j) 
               t2qqqq(b2,b1,b,j)                 *= -1.0  
               PREPARE HBAR_ABCI_bbbb(b,b1,b2,j) += t1qqqq(b,b1,b2,j) 
               PREPARE HBAR_ABCI_bbbb(b2,b1,b,j) += t2qqqq(b2,b1,b,j) 
            ENDDO b2 
#
      ENDPARDO j, b, b1, j1 
#
      PARDO b, b1, b3, j1  
#
            REQUEST VSbbbj(b1,b,b3,j1) j1 
#
            DO b2 
            DO j 
#
               REQUEST                              T2old_bb(b2,j,b3,j1) j1 
               t1qqqq(b,b1,b2,j)                  = VSbbbj(b1,b,b3,j1)*T2old_bb(b2,j,b3,j1)  
               t2qqqq(b2,b1,b,j)                  = t1qqqq(b,b1,b2,j) 
               t2qqqq(b2,b1,b,j)                 *= -1.0  
               PREPARE HBAR_ABCI_bbbb(b,b1,b2,j) += t1qqqq(b,b1,b2,j) 
               PREPARE HBAR_ABCI_bbbb(b2,b1,b,j) += t2qqqq(b2,b1,b,j) 
#
            ENDDO j 
            ENDDO b2 
#
      ENDPARDO b, b1, b3, j1 
#
      PARDO b, b1, a, i 
#
            REQUEST  Vbbai(b1,b,a,i) i 
#
            DO b2  
            DO j  
#
               REQUEST                              T2old_ab(a,i,b2,j) j 
               t1qqqq(b,b1,b2,j)                  = Vbbai(b1,b,a,i)*T2old_ab(a,i,b2,j)  
               t2qqqq(b2,b1,b,j)                  = t1qqqq(b,b1,b2,j) 
               t2qqqq(b2,b1,b,j)                 *= -1.0  
               PREPARE HBAR_ABCI_bbbb(b,b1,b2,j) += t1qqqq(b,b1,b2,j) 
               PREPARE HBAR_ABCI_bbbb(b2,b1,b,j) += t2qqqq(b2,b1,b,j) 
#
            ENDDO j 
            ENDDO b2  
#
      ENDPARDO b, b1, a, i 
#
#     AABB spin component. 
#     -------------------- 
#
      PARDO a, a1, b, j 
#
            REQUEST                             Vaabj(a,a1,b,j) a  
            PREPARE HBAR_ABCI_aabb(a,a1,b,j) += Vaabj(a,a1,b,j) 
#
      ENDPARDO a, a1, b, j 
#
      PARDO a, a1, a3, i2
#
            REQUEST VSaaai(a,a1,a3,i2) a 
#
            DO b
            DO j
#
               REQUEST                             T2old_ab(a3,i2,b,j) j
               Tppqq(a1,a,b,j)                   = VSaaai(a,a1,a3,i2)*T2old_ab(a3,i2,b,j)
               PREPARE HBAR_ABCI_aabb(a1,a,b,j) += Tppqq(a1,a,b,j)
#
            ENDDO j
            ENDDO b
#
      ENDPARDO a, a1, a3, i2
#
      PARDO a, a1, b, j
#
            REQUEST Vaabj(a,a1,b,j) j
#
            DO b1
            DO j1
#
               REQUEST                               T2old_bb(b1,j1,b,j) j
               Tppqq(a1,a,b1,j1)                   = Vaabj(a,a1,b,j)*T2old_bb(b1,j1,b,j)
               PREPARE HBAR_ABCI_aabb(a1,a,b1,j1) += Tppqq(a1,a,b1,j1)
#
            ENDDO j1
            ENDDO b1
#
      ENDPARDO a, a1, b, j
#
      PARDO a1, a, j, b
#
            Tppqq(a1,a,b,j) = 0.0
#
            DO i
#
               REQUEST            T2old_ab(a1,i,b,j) j
               REQUEST            WHIABJ(i,a,b,j) j
               REQUEST            NJBAI(j,b,a,i) i
#
               T1ppqq(a1,a,b,j) = T2old_ab(a1,i,b,j)*LHBAR_ia(i,a)
               Tppqq(a1,a,b,j) -= T1ppqq(a1,a,b,j)
#
               T2ppqq(a1,a,b,j) = WHIABJ(i,a,b,j)*St1a(a1,i)
               Tppqq(a1,a,b,j) -= T2ppqq(a1,a,b,j)
#
               T3ppqq(a1,a,b,j) = NJBAI(j,b,a,i)*St1a(a1,i)
               Tppqq(a1,a,b,j) -= T3ppqq(a1,a,b,j)
#
            ENDDO i
#
            PREPARE HBAR_ABCI_aabb(a1,a,b,j) += Tppqq(a1,a,b,j)
#
      ENDPARDO a1, a, j, b
#
      PARDO a, a1, j, j1
#
            REQUEST             WHJJAA(j1,j,a1,a) a
            REQUEST             NJJAA(j1,j,a1,a) a
            tqqpp(j1,j,a1,a)  = WHJJAA(j1,j,a1,a) 
            tqqpp(j1,j,a1,a) -= NJJAA(j1,j,a1,a) 
#
            DO b
               Tppqq(a1,a,b,j)                   = tqqpp(j1,j,a1,a)*St1b(b,j1)
               PREPARE HBAR_ABCI_aabb(a1,a,b,j) += Tppqq(a1,a,b,j)
            ENDDO b
#
      ENDPARDO a, a1, j, j1
#
      PARDO a1, b, j1, i 
#
            REQUEST              T2old_ab(a1,i,b,j1) j1
            t1ppqq(a1,i,b,j1)  = St1a(a1,i)^St1b(b,j1)  
            t1ppqq(a1,i,b,j1) += T2old_ab(a1,i,b,j1)  
            t0pqqp(a1,b,j1,i) = t1ppqq(a1,i,b,j1)

            DO a
            DO j
#   
               REQUEST                             HBAR_JKIA_bbaa(j1,j,i,a) j1
#####          Tppqq(a1,a,b,j)                   = t1ppqq(a1,i,b,j1)*Vpiqj(a,i,j,j1)
####           Tppqq(a1,a,b,j)                   = t1ppqq(a1,i,b,j1)*HBAR_JKIA_bbaa(j1,j,i,a)
               tqpqp(j1,i,j,a)   = HBAR_JKIA_bbaa(j1,j,i,a)
               Tppqq(a1,a,b,j) = t0pqqp(a1,b,j1,i)*tqpqp(j1,i,j,a) 
               PREPARE HBAR_ABCI_aabb(a1,a,b,j) += Tppqq(a1,a,b,j)
#
            ENDDO j 
            ENDDO a 
#
      ENDPARDO a1, b, j1, i 
#
      PARDO a, b1, b, i
#
            REQUEST Vbbai(b,b1,a,i) a  
#
            DO j
            DO a1
               REQUEST                              T2old_ab(a1,i,b,j) j
               Tppqq(a1,a,b1,j)                   = T2old_ab(a1,i,b,j)*Vbbai(b,b1,a,i)
               Tppqq(a1,a,b1,j)                  *= -1.0
               PREPARE HBAR_ABCI_aabb(a1,a,b1,j) += Tppqq(a1,a,b1,j)
            ENDDO a1
            ENDDO j
#
      ENDPARDO a, b1, b, i
#
# debug
# debug
#
#     Done AABB spin component. 
#     ------------------------- 
#
#     BBAA spin component. 
#     -------------------- 
#
      PARDO b, b1, a, i 
            REQUEST                             Vbbai(b,b1,a,i) a  
            PREPARE HBAR_ABCI_bbaa(b,b1,a,i) += Vbbai(b,b1,a,i) 
      ENDPARDO b, b1, a, i 
#
      PARDO b, a1, a, j
#
            REQUEST Vaabj(a,a1,b,j) a  
#
            DO b1
            DO i
#
               REQUEST                         T2old_ab(a,i,b1,j) j
               Tqqpp(b1,b,a1,i)              = T2old_ab(a,i,b1,j)*Vaabj(a,a1,b,j)
               Tqqpp(b1,b,a1,i)             *= -1.0
               PREPARE HBAR_ABCI_bbaa(b1,b,a1,i) += Tqqpp(b1,b,a1,i)
#
            ENDDO i
            ENDDO b1
#
      ENDPARDO b, a1, a, j
#
      PARDO b, b1, a, i
#
            Tqqpp(b1,b,a,i) = 0.0
#
            DO j
#
               REQUEST T2old_ab(a,i,b1,j) j
               REQUEST WHjbai(j,b,a,i) j
               request NIABJ(i,a,b,j) j
#
               T1qqpp(b1,b,a,i) = T2old_ab(a,i,b1,j)*LHBAR_jb(j,b)
               Tqqpp(b1,b,a,i) -= T1qqpp(b1,b,a,i)
#
               T1qqpp(b1,b,a,i) = WHjbai(j,b,a,i)*St1b(b1,j)
               Tqqpp(b1,b,a,i) -= T1qqpp(b1,b,a,i)
#
               T1qqpp(b1,b,a,i) = Niabj(i,a,b,j)*St1b(b1,j)
               Tqqpp(b1,b,a,i) -= T1qqpp(b1,b,a,i)
#
            ENDDO j
#
            PREPARE HBAR_ABCI_bbaa(b1,b,a,i) += Tqqpp(b1,b,a,i)
#
      ENDPARDO b, b1, a, i 
#
      PARDO a, b1, i1, j
#
            REQUEST T2old_ab(a,i1,b1,j) j
            tppqq(a,i1,b1,j)  = St1a(a,i1)^St1b(b1,j) 
            tppqq(a,i1,b1,j) += T2old_ab(a,i1,b1,j) 
#
            DO b
            DO i
#
               REQUEST                        Vpiqj(i,i1,b,j) j
               request   HBAR_JKIA_aabb(i1,i,j,b) b
#               Tqqpp(b1,b,a,i)              = tppqq(a,i1,b1,j)*Vpiqj(i,i1,b,j)
               Tqqpp(b1,b,a,i)              = tppqq(a,i1,b1,j)*HBAR_JKIA_aabb(i1,i,j,b)
               PREPARE HBAR_ABCI_bbaa(b1,b,a,i) += Tqqpp(b1,b,a,i)
#
            ENDDO i
            ENDDO b
#
      ENDPARDO a, b1, i1, j
#
      PARDO i, i1, b, b1
#
            REQUEST WHIIBB(i1,i,b1,b) b
            request NIIBB(i1,i,b1,b) b
#
            DO a
               Tqqpp(b1,b,a,i)           = WHIIBB(i1,i,b1,b)*St1a(a,i1)
               PREPARE HBAR_ABCI_bbaa(b1,b,a,i) += Tqqpp(b1,b,a,i)
               Tqqpp(b1,b,a,i)           = NIIBB(i1,i,b1,b)*St1a(a,i1)
               Tqqpp(b1,b,a,i)          *= -1.0
               PREPARE HBAR_ABCI_bbaa(b1,b,a,i) += Tqqpp(b1,b,a,i)
#
            ENDDO a
#
      ENDPARDO i, i1, b, b1
#
      PARDO b, b1, b3, j2
#
            REQUEST VSbbbj(b,b1,b3,j2) b 
#
            DO a
            DO i
#
               REQUEST                        T2old_ab(a,i,b3,j2) j2
               Tqqpp(b1,b,a,i)              = VSbbbj(b,b1,b3,j2)*T2old_ab(a,i,b3,j2)
               PREPARE HBAR_ABCI_bbaa(b1,b,a,i) += Tqqpp(b1,b,a,i)
#
            ENDDO i
            ENDDO a
#
      ENDPARDO b, b1, b3, j2
#
      PARDO b, b1, a, i
#
            REQUEST Vbbai(b,b1,a,i) a 
#
            DO a1
            DO i1
#
               REQUEST                          T2old_aa(a1,i1,a,i) i1
               Tqqpp(b1,b,a1,i1)              = Vbbai(b,b1,a,i)*T2old_aa(a1,i1,a,i)
               PREPARE HBAR_ABCI_bbaa(b1,b,a1,i1) += Tqqpp(b1,b,a1,i1)
#
            ENDDO i1
            ENDDO a1
#
      ENDPARDO b, b1, a, i
#
#
#     Done AABB spin component. 
#     ------------------------- 
#
      execute server_barrier
#
      ENDPROC HBAR_ABCI    
#
      PROC AO4VIR
#     ----------- 
#
      create Mxj
      create Mxi
#
      execute sip_barrier
#
      PARDO j,sigma
#
            t1xj(sigma,j)=0.0
#
            do b
               txj(sigma,j)=St1b(b,j)*cb(sigma,b)
               t1xj(sigma,j)+=txj(sigma,j)
            enddo b
# 
            put Mxj(sigma,j)=t1xj(sigma,j)
#
      ENDPARDO j, sigma
#
      PARDO i, sigma
#
            t1xi(sigma,i)=0.0
#
            do a
               txi(sigma,i)=St1a(a,i)*ca(sigma,a)
               t1xi(sigma,i)+=txi(sigma,i)
            enddo a
#
            put Mxi(sigma,i)=t1xi(sigma,i)
#
      ENDPARDO i, sigma
#
      execute sip_barrier
#
#    Contract AOINT with half back transformed Amplitudes
#    ----------------------------------------------------
#
      PARDO mu,lambda,nu
#
      allocate Lxxxj(mu,lambda,nu,*)
      allocate Lxxxi(mu,lambda,nu,*)
#
      DO sigma
#
         compute_integrals aoint(mu,lambda,nu,sigma)
#
         DO j
#
            get Mxj(sigma,j)
#
            tmxxxj(mu,lambda,nu,j)=aoint(mu,lambda,nu,sigma)*Mxj(sigma,j)
            Lxxxj(mu,lambda,nu,j)+=tmxxxj(mu,lambda,nu,j)
#
         ENDDO j
####
         DO i
#
            get Mxi(sigma,i)
#
            tmxxxi(mu,lambda,nu,i)=aoint(mu,lambda,nu,sigma)*Mxi(sigma,i)
            Lxxxi(mu,lambda,nu,i)+=tmxxxi(mu,lambda,nu,i)
#
         ENDDO i
####
      enddo sigma
#
      DO j
         prepare Mxxxj(mu,lambda,nu,j)=Lxxxj(mu,lambda,nu,j)
      ENDDO j
      DO i
         prepare Mxxxi(mu,lambda,nu,i)=Lxxxi(mu,lambda,nu,i)
      ENDDO i
#
      deallocate Lxxxi(mu,lambda,nu,*)
      deallocate Lxxxj(mu,lambda,nu,*)
#
      ENDPARDO mu,lambda,nu
#
      execute server_barrier
#
#  2ND STAGE OF TRANSFORMATION
#  --------------------------- 
#
      PARDO mu, nu, j 
#
            allocate Lxxbj(mu,nu,*,j)
#
            DO lambda  
#
               request Mxxxj(mu,nu,lambda,j) j
#
               DO b
#
                  tmxxbj(mu,nu,b,j)=Mxxxj(mu,nu,lambda,j)*cb(lambda,b)
                  lxxbj(mu,nu,b,j)+=tmxxbj(mu,nu,b,j)
#
               ENDDO b
            ENDDO lambda  
#
            DO b
               prepare Mxxbj(mu,nu,b,j)=lxxbj(mu,nu,b,j)
            ENDDO b
#
            deallocate Lxxbj(mu,nu,*,j)
#
      ENDPARDO mu, nu, j 
#
      PARDO mu, nu, i 
#
            allocate Lxxai(mu,nu,*,i)
#
            DO lambda  
#
               request Mxxxi(mu,nu,lambda,i) i
#
               DO a
#
                  tmxxai(mu,nu,a,i)=Mxxxi(mu,nu,lambda,i)*ca(lambda,a)
                  lxxai(mu,nu,a,i)+=tmxxai(mu,nu,a,i)
#
               ENDDO a
            ENDDO lambda  
#
            DO a
               prepare Mxxai(mu,nu,a,i)=lxxai(mu,nu,a,i)
            ENDDO a
#
            deallocate Lxxai(mu,nu,*,i)
#
      ENDPARDO mu, nu, i 
#
      execute server_barrier
#
#  END 2ND STAGE OF TRANSFORMATION
#  ------------------------------- 
#
      pardo mu, b, j
#
         allocate Lxabj(mu,*,b,j)
#
         do lambda
#
            request Mxxbj(mu,lambda,b,j) j
#
            do a
#
               tmxabj(mu,a,b,j)=Mxxbj(mu,lambda,b,j)*ca(lambda,a)
               lxabj(mu,a,b,j)+=tmxabj(mu,a,b,j)
#
            enddo a
#
         enddo lambda
#
         do a
            prepare Mxabj(mu,a,b,j)=lxabj(mu,a,b,j)
         enddo a
#
         deallocate Lxabj(mu,*,b,j)
#
      endpardo mu, b, j
#
      pardo mu, a, i
#
            allocate Lxbai(mu,*,a,i)
#
            do lambda
#
               request Mxxai(mu,lambda,a,i) i
#
               do b
#
                  tmxbai(mu,b,a,i)=Mxxai(mu,lambda,a,i)*cb(lambda,b)
                  lxbai(mu,b,a,i)+=tmxbai(mu,b,a,i)
#
               enddo b
#
            enddo lambda
#
            do b
               prepare Mxbai(mu,b,a,i)=lxbai(mu,b,a,i)
            enddo b
#
            deallocate Lxbai(mu,*,a,i)
#
      endpardo mu, a, i
#
      pardo mu, a, i
#
            allocate Lxaai(mu,*,a,i)
#
            do lambda
#
               request Mxxai(mu,lambda,a,i) i
#
               do a1
#
                  tmxaai(mu,a1,a,i)=Mxxai(mu,lambda,a,i)*ca(lambda,a1)
                  lxaai(mu,a1,a,i)+=tmxaai(mu,a1,a,i)
#
               enddo a1
#
            enddo lambda
#
            do a1
               prepare Mxaai(mu,a1,a,i)=lxaai(mu,a1,a,i)
            enddo a1
#
            deallocate Lxaai(mu,*,a,i)
#
      endpardo mu, a, i
#
      pardo mu, b, j
#
            allocate Lxbbj(mu,*,b,j)
#
            do lambda
#
               request Mxxbj(mu,lambda,b,j) j
#
               do b1
#
                  tmxbbj(mu,b1,b,j)=Mxxbj(mu,lambda,b,j)*cb(lambda,b1)
                  lxbbj(mu,b1,b,j)+=tmxbbj(mu,b1,b,j)
#
               enddo b1
#
            enddo lambda
#
            do b1
               prepare Mxbbj(mu,b1,b,j)=lxbbj(mu,b1,b,j)
            enddo b1
#
            deallocate Lxbbj(mu,*,b,j)
#
      endpardo mu, b, j
#
      execute server_barrier
#
#  END 3RD STAGE OF TRANSFORMATION
#  ------------------------------- 
#
      pardo a, b, j
#
         allocate Laabj(*,a,b,j)
#
         do mu
#
            request Mxabj(mu,a,b,j) j
#
            do a1
#
               tmaabj(a1,a,b,j)=Mxabj(mu,a,b,j)*ca(mu,a1)
               Laabj(a1,a,b,j)+=tmaabj(a1,a,b,j)
#
            enddo a1
#
         enddo mu
#
         do a1
            prepare HBAR_ABCI_aabb(a1,a,b,j)+=Laabj(a1,a,b,j)
         enddo a1
#
         deallocate Laabj(*,a,b,j)
#
      endpardo a, b, j
#
      pardo a, b, i
#
            allocate Lbbai(*,b,a,i)
#
            do mu
#
               request Mxbai(mu,b,a,i) i
#
               do b1
#
                  tmbbai(b1,b,a,i)=Mxbai(mu,b,a,i)*cb(mu,b1)
                  Lbbai(b1,b,a,i)+=tmbbai(b1,b,a,i)
#
               enddo b1
#
            enddo mu
#
            do b1
               prepare HBAR_ABCI_bbaa(b1,b,a,i)+=Lbbai(b1,b,a,i)
            enddo b1
#
            deallocate Lbbai(*,b,a,i)
#
      endpardo a, b, i
#
#    ALPHA-ALPHA spin combination
#
      pardo a1, a, i
#
            allocate Laaai(*,a1,a,i)
#
            do mu
#
               request Mxaai(mu,a1,a,i) i
#
               do a2
#
                  tmaaai(a2,a1,a,i)=Mxaai(mu,a1,a,i)*ca(mu,a2)
                  Laaai(a2,a1,a,i)+=tmaaai(a2,a1,a,i)
#
               enddo a2
#
            enddo mu
#
            do a2
               t1maaai(a,a1,a2,i)=Laaai(a2,a1,a,i)
               t1maaai(a,a1,a2,i)*=-1.0
               prepare HBAR_ABCI_aaaa(a2,a1,a,i)+=Laaai(a2,a1,a,i)
               prepare HBAR_ABCI_aaaa(a,a1,a2,i)+=t1maaai(a,a1,a2,i)
            enddo a2
#
            deallocate Laaai(*,a1,a,i)
#
      endpardo a1, a, i
#
      pardo b1, b, j
#
         allocate Lbbbj(*,b1,b,j)
#
         do mu
#
            request Mxbbj(mu,b1,b,j) j
#
            do b2
#
               tmbbbj(b2,b1,b,j)=Mxbbj(mu,b1,b,j)*cb(mu,b2)
               Lbbbj(b2,b1,b,j)+=tmbbbj(b2,b1,b,j)
#
            enddo b2
#
         enddo mu
#
         do b2
            t1mbbbj(b,b1,b2,j)=Lbbbj(b2,b1,b,j)
            t1mbbbj(b,b1,b2,j)*=-1.0
            prepare HBAR_ABCI_bbbb(b2,b1,b,j)+=Lbbbj(b2,b1,b,j)
            prepare HBAR_ABCI_bbbb(b,b1,b2,j)+=t1mbbbj(b,b1,b2,j)
         enddo b2
#
         deallocate Lbbbj(*,b1,b,j)
#
      endpardo b1, b, j
#
      ENDPROC AO4VIR
#     -----------------
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
#    BEGIN Main HBAR PROGRAM 
#
#    ------------------------------------------------------------------------
#
     PROC HBAR 
#    --------- 
#
     execute sip_barrier 
     allocate LHBAR_ii(*,*) 
     allocate LHBAR_jj(*,*) 
     allocate LHBAR_ia(*,*) 
     allocate LHBAR_jb(*,*) 
     allocate LHBAR_aa(*,*) 
     allocate LHBAR_bb(*,*) 
     execute server_barrier 
#
     CALL HBAR_AB # COMPARES WITH ACES  
     CALL HBAR_IJ # COMPARES WITH ACES  
     CALL HBAR_IB # COMPARES WITH ACES 
     execute sip_barrier 
     delete HBAR_ii 
     delete HBAR_jj 
#     delete HBAR_ia 
#     delete HBAR_jb 
# 
     CALL HBAR_IJKL # COMPARES WITH ACES  
     CALL HBAR_JKIA # COMPARES WITH ACES   
     execute server_barrier 
     CALL HBAR_IAJK # COMPARES WITH ACES  
#
     CALL HBAR_AIBC # COMPARES WITH ACES  
     CALL HBAR_AJIB # COMPARES WITH ACES      
     execute server_barrier
     CALL HBAR_ABCI # COMPARES WITH ACES  
#
     call AO4VIR
#
     ENDPROC HBAR 
#    ------------------------------------------------------------------------




#    ------------------------------------------------------------------------
#
     PROC READ_2EL
#
#    ------------------------------------------------------------------------
#
      allocate St1a(*,*)
      allocate St1b(*,*)

      execute server_barrier
      execute list_to_blocks                ree

      execute list_to_blocks                R1A_VECS
      execute list_to_blocks                R1B_VECS
      execute list_to_blocks                R2AA_VECS(a,i,a1,i1,kroot)
      execute list_to_blocks                R2BB_VECS(b,j,b1,j1,kroot)
      execute list_to_blocks                R2AB_VECS(a,i,b,j,kroot)

      execute list_to_blocks                HBAR_ia
      execute list_to_blocks                HBAR_jb

      execute list_to_blocks                t1a_old
      execute list_to_blocks                t1b_old
      execute list_to_blocks                T2old_aa
      execute list_to_blocks                T2old_ab
      execute list_to_blocks                T2old_bb

      execute list_to_blocks                a1a_old
      execute list_to_blocks                a1b_old
      execute list_to_blocks                A2old_aa
      execute list_to_blocks                A2old_ab
      execute list_to_blocks                A2old_bb

      execute list_to_blocks                lee
      execute list_to_blocks                L1A_VECS
      execute list_to_blocks                L1B_VECS
      execute list_to_blocks                L2AA_VECS(i,a,i1,a1,kroot)
      execute list_to_blocks                L2BB_VECS(j,b,j1,b1,kroot)
      execute list_to_blocks                L2AB_VECS(i,a,j,b,kroot)
      EXECUTE  SERVER_BARRIER
      execute read_list_to_blocks
      execute server_barrier

      DELETE  HBAR_ia
      DELETE  HBAR_jb

         DO a
         DO i
            GET         t1a_old(a,i)
            St1a(a,i) = t1a_old(a,i)
         ENDDO i
         ENDDO a
         DO b
         DO j
            GET         t1b_old(b,j)
            St1b(b,j) = t1b_old(b,j)
         ENDDO j
         ENDDO b

#
#    ------------------------------------------------------------------------
#
     ENDPROC READ_2EL
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------ 
# 
         PROC CREATE1ARRAY 
# 
              CREATE Gmi_a 
              CREATE Gmi_b 
              CREATE Gae_a 
              CREATE Gae_b 

              CREATE Dij_a
              CREATE Dij_b
              CREATE Dab_a
              CREATE Dab_b
#
              CREATE Iij_aa
              CREATE Iij_bb
              CREATE Iab_aa
              CREATE Iab_bb
              CREATE Xai_aa
              CREATE Xai_bb
              CREATE Iai_aa
              CREATE Iia_aa
              CREATE Iai_bb
              CREATE Iia_bb
# 
              CREATE  L2RTAU_iiii
              CREATE  L2RTAU_jjjj
              CREATE  L2RTAU_ijij
              CREATE  L2TTAU_iiii
              CREATE  L2TTAU_jjjj
              CREATE  L2TTAU_ijij

              ALLOCATE  LR2L2_ii (*,*)
              ALLOCATE  LT2L2_ii (*,*)
              ALLOCATE  LR2L2_jj (*,*)
              ALLOCATE  LT2L2_jj (*,*)
              ALLOCATE  LR2L2_aa (*,*)
              ALLOCATE  LT2L2_aa (*,*)
              ALLOCATE  LR2L2_bb (*,*)
              ALLOCATE  LT2L2_bb (*,*)
              ALLOCATE  LR1L2_ai (*,*)
              ALLOCATE  LR2L1_ai (*,*)
              ALLOCATE  LR1L2_bj (*,*)
              ALLOCATE  LR2L1_bj (*,*)
              ALLOCATE  L_Z1_ai  (*,*)
              ALLOCATE  L_Z2_ai  (*,*)
              ALLOCATE  L_Z1_bj  (*,*)
              ALLOCATE  L_Z2_bj  (*,*)
              ALLOCATE  L_Y_aa   (*,*)
              ALLOCATE  L_Y_bb   (*,*)
              ALLOCATE  L_Y_ii   (*,*)
              ALLOCATE  L_Y_jj   (*,*)
              ALLOCATE  L_Z_aa   (*,*)
              ALLOCATE  L_Z_bb   (*,*)
              ALLOCATE  L_Z_ii   (*,*)
              ALLOCATE  L_Z_jj   (*,*)

# Watson, this is really stupid, but I'm trying to get out
#              
#              PARDO i, a1, i1, a
#                 tpppp (i,a1,i1,a) = 0.0
#                 PREPARE  L2R2_aaaa (i,a1,i1,a) = tpppp (i,a1,i1,a)
#                 PREPARE  L2T2_aaaa (i,a1,i1,a) = tpppp (i,a1,i1,a)
#              ENDPARDO  i, a1, i1, a
#              
#              PARDO i, b1, j1, a
#                 PREPARE  L2R2_abba (i,b1,j1,a) = tpppp (i,b1,j1,a)
#                 PREPARE  L2T2_abba (i,b1,j1,a) = tpppp (i,b1,j1,a)
#              ENDPARDO  i, b1, j1, a
#
#              PARDO i, b1, i1, b
#                   tpppp (i,b1,i1,b) = 0.0
#                   PREPARE  L2R2_abab (i,b1,i1,b) = tpppp (i,b1,i1,b)
#                   PREPARE  L2T2_abab (i,b1,i1,b) = tpppp (i,b1,i1,b)
#              ENDPARDO  i, b1, i1, b

         ENDPROC CREATE1ARRAY
# 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
#
      PROC TAUAA
#     ----------
#
      PARDO a, i, a1, i1
#
            REQUEST T2old_aa(a,i,a1,i1) i1 
            GET t1a_old(a1,i1)
            GET t1a_old(a1,i)
            GET t1a_old(a,i1)
            GET t1a_old(a,i)
#
            tai(a1,i1)            = t1a_old(a1,i1)
            tmp1_aiai(a,i,a1,i1)  = t1a_old(a,i)^tai(a1,i1)
            tai(a1,i)             = t1a_old(a1,i)
            tmp2_aiai(a,i,a1,i1)  = t1a_old(a,i1)^tai(a1,i)
            tmp1_aiai(a,i,a1,i1) += T2old_aa(a,i,a1,i1)
            tmp1_aiai(a,i,a1,i1) -= tmp2_aiai(a,i,a1,i1)
            PREPARE Tau_aa(a,i,a1,i1) = tmp1_aiai(a,i,a1,i1)

            tiiaa (i,i1,a,a1) = tmp1_aiai (a,i,a1,i1)
#        
         DO i2
         DO i3 
            REQUEST               L2AA (i2,a,i3,a1) i3
            taaii (a,a1,i2,i3)  = L2AA (i2,a,i3,a1) 
            tiiii (i,i1,i2,i3)  = tiiaa (i,i1,a,a1) * taaii (a,a1,i2,i3)
            tiiii (i,i1,i2,i3) *= 0.5
            PUT  L2TTAU_iiii (i,i1,i2,i3) += tiiii (i,i1,i2,i3)
         ENDDO i3
         ENDDO i2
#
      ENDPARDO a, i, a1, i1
#
      PARDO  a, a1, i, i1
         REQUEST               R2AA    (a,i,a1,i1) a
         GET                   R1A     (a,i)
         GET                   R1A     (a1,i1)
         GET                   R1A     (a,i1)
         GET                   R1A     (a1,i)
         GET                   t1a_old (a1,i1)
         GET                   t1a_old (a,i)
         GET                   t1a_old (a1,i)
         GET                   t1a_old (a,i1)

         t1ai (a1,i)         = R1A  (a1,i)
         t2ai (a,i1)         = R1A  (a,i1)
         t3ai (a1,i1)        = R1A  (a1,i1)

         t1pp (a1,i1)        = t1a_old (a1,i1)
         t2pp (a,i)          = t1a_old (a,i)
         t3pp (a1,i)         = t1a_old (a1,i)
         t4pp (a,i1)         = t1a_old (a,i1)

         taiai  (a,i,a1,i1)  = R1A  (a,i)  ^ t1pp (a1,i1)
         t1aiai (a,i,a1,i1)  = t2pp (a,i)  ^ t3ai (a1,i1)
         t2aiai (a,i1,a1,i)  = t2ai (a,i1) ^ t3pp (a1,i)
         t3aiai (a,i1,a1,i)  = t4pp (a,i1) ^ t1ai (a1,i)

         taiai  (a,i,a1,i1) += t1aiai (a,i,a1,i1)
         taiai  (a,i,a1,i1) += R2AA   (a,i,a1,i1)
         t2aiai (a,i1,a1,i) += t3aiai (a,i1,a1,i)
         t2aiai (a,i1,a1,i) *= -1.0
         tpppp  (a,i,a1,i1)  = t2aiai (a,i1,a1,i)

         taiai  (a,i,a1,i1) += tpppp (a,i,a1,i1)
         tiiaa  (i,i1,a,a1)  = taiai (a,i,a1,i1)
         PREPARE  RTAU_aa (a,i,a1,i1) += taiai (a,i,a1,i1)
         
         DO i2                 
         DO i3                 
            REQUEST               L2AA (i2,a,i3,a1) i3
            taaii (a,a1,i2,i3)  = L2AA (i2,a,i3,a1)
            tiiii (i,i1,i2,i3)  = tiiaa (i,i1,a,a1) * taaii (a,a1,i2,i3)
            tiiii (i,i1,i2,i3) *= 0.5
            PUT  L2RTAU_iiii (i,i1,i2,i3) += tiiii (i,i1,i2,i3)
         ENDDO i3
         ENDDO i2
      ENDPARDO  a, a1, i, i1 

      ENDPROC TAUAA
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
#
      PROC TAUBB
#     ----------
#
      PARDO b, j, b1, j1
#
            REQUEST T2old_bb(b,j,b1,j1) j1 
            GET t1b_old(b1,j1)
            GET t1b_old(b1,j)
            GET t1b_old(b,j1)
            GET t1b_old(b,j)
#
            tbj(b1,j1)            = t1b_old(b1,j1)
            tmp1_bjbj(b,j,b1,j1)  = t1b_old(b,j)^tbj(b1,j1)
            tbj(b1,j)             = t1b_old(b1,j)
            tmp2_bjbj(b,j,b1,j1)  = t1b_old(b,j1)^tbj(b1,j)
            tmp1_bjbj(b,j,b1,j1) += T2old_bb(b,j,b1,j1)
            tmp1_bjbj(b,j,b1,j1) -= tmp2_bjbj(b,j,b1,j1)
            PREPARE Tau_bb(b,j,b1,j1) = tmp1_bjbj(b,j,b1,j1)

            tjjbb (j,j1,b,b1) = tmp1_bjbj (b,j,b1,j1)
#        
         DO j2
         DO j3 
            REQUEST               L2BB (j2,b,j3,b1) j3
            tbbjj (b,b1,j2,j3)  = L2BB (j2,b,j3,b1) 
            tjjjj (j,j1,j2,j3)  = tjjbb (j,j1,b,b1) * tbbjj (b,b1,j2,j3)
            tjjjj (j,j1,j2,j3) *= 0.5
            PUT  L2TTAU_jjjj (j,j1,j2,j3) += tjjjj (j,j1,j2,j3)
         ENDDO j3
         ENDDO j2
#
      ENDPARDO b, j, b1, j1
#
      PARDO  b, b1, j, j1
         REQUEST               R2BB    (b,j,b1,j1) b
         GET                   R1B     (b,j)
         GET                   R1B     (b1,j1)
         GET                   R1B     (b,j1)
         GET                   R1B     (b1,j)
         GET                   t1b_old (b1,j1)
         GET                   t1b_old (b,j)
         GET                   t1b_old (b1,j)
         GET                   t1b_old (b,j1)

         t1bj (b1,j)         = R1B  (b1,j)
         t2bj (b,j1)         = R1B  (b,j1)
         t3bj (b1,j1)        = R1B  (b1,j1)

         t1qq (b1,j1)        = t1b_old (b1,j1)
         t2qq (b,j)          = t1b_old (b,j)
         t3qq (b1,j)         = t1b_old (b1,j)
         t4qq (b,j1)         = t1b_old (b,j1)

         tbjbj  (b,j,b1,j1)  = R1B  (b,j)  ^ t1qq (b1,j1)
         t1bjbj (b,j,b1,j1)  = t2qq (b,j)  ^ t3bj (b1,j1)
         t2bjbj (b,j1,b1,j)  = t2bj (b,j1) ^ t3qq (b1,j)
         t3bjbj (b,j1,b1,j)  = t4qq (b,j1) ^ t1bj (b1,j)

         tbjbj  (b,j,b1,j1) += t1bjbj (b,j,b1,j1)
         tbjbj  (b,j,b1,j1) += R2BB   (b,j,b1,j1)
         t2bjbj (b,j1,b1,j) += t3bjbj (b,j1,b1,j)
         t2bjbj (b,j1,b1,j) *= -1.0
         tqqqq  (b,j,b1,j1)  = t2bjbj (b,j1,b1,j)

         tbjbj  (b,j,b1,j1) += tqqqq (b,j,b1,j1)
         tjjbb  (j,j1,b,b1)  = tbjbj (b,j,b1,j1)
         PREPARE  RTAU_bb (b,j,b1,j1) += tbjbj (b,j,b1,j1)
         
         DO j2                 
         DO j3                 
            REQUEST               L2BB (j2,b,j3,b1) j3
            tbbjj (b,b1,j2,j3)  = L2BB (j2,b,j3,b1)
            tjjjj (j,j1,j2,j3)  = tjjbb (j,j1,b,b1) * tbbjj (b,b1,j2,j3)
            tjjjj (j,j1,j2,j3) *= 0.5
            PUT  L2RTAU_jjjj (j,j1,j2,j3) += tjjjj (j,j1,j2,j3)
         ENDDO j3
         ENDDO j2
      ENDPARDO  b, b1, j, j1 

      ENDPROC TAUBB
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
#
      PROC TAUAB
#     ----------
#
      PARDO a, i, b, j
#
            REQUEST T2old_ab(a,i,b,j) j 
            GET t1a_old(a,i)
            GET t1b_old(b,j)
#
            tmp1_aibj(a,i,b,j)  = t1a_old(a,i)^t1b_old(b,j)
            tmp1_aibj(a,i,b,j) += T2old_ab(a,i,b,j)
            PREPARE Tau_ab(a,i,b,j) = tmp1_aibj(a,i,b,j)
            tijab (i,j,a,b) = tmp1_aibj (a,i,b,j)
#           
            DO i1
            DO j1
               REQUEST              L2AB (i1,a,j1,b) j1
               tabij (a,b,i1,j1)  = L2AB (i1,a,j1,b)
               tijij (i,j,i1,j1)  = tijab (i,j,a,b) * tabij (a,b,i1,j1)
               PUT  L2TTAU_ijij (i,j,i1,j1) += tijij (i,j,i1,j1)
            ENDDO j1
            ENDDO i1
#
      ENDPARDO a, i, b, j
#
      PARDO  a, b1, i, j1
         REQUEST               R2AB (a,i,b1,j1) a
         GET                   R1A  (a,i)
         GET                   R1B  (b1,j1)
         
         GET                   t1a_old (a,i)
         GET                   t1b_old (b1,j1)
         
         tbj (b1,j1)         = R1B     (b1,j1)
         tqq (b1,j1)         = t1b_old (b1,j1)
         
         taibj  (a,i,b1,j1)  = R1A     (a,i)  ^ tqq (b1,j1)
         t1aibj (a,i,b1,j1)  = t1a_old (a,i)  ^ tbj (b1,j1)
         taibj  (a,i,b1,j1) += t1aibj (a,i,b1,j1)
         taibj  (a,i,b1,j1) += R2AB   (a,i,b1,j1)
         tijab  (i,j1,a,b1)  = taibj (a,i,b1,j1)
         
         PREPARE  RTAU_ab (a,i,b1,j1) += taibj (a,i,b1,j1)
         DO i2
         DO j3
            REQUEST               L2AB (i2,a,j3,b1) j3
            tabij (a,b1,i2,j3)  = L2AB (i2,a,j3,b1) 
            tijij (i,j1,i2,j3)  = tijab (i,j1,a,b1) * tabij (a,b1,i2,j3)
            PUT  L2RTAU_ijij (i,j1,i2,j3) += tijij (i,j1,i2,j3)
         ENDDO j3
         ENDDO i2
      ENDPARDO  a, b1, i, j1

      ENDPROC TAUAB
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
#
      PROC TAU
#
           CALL TAUAA
           CALL TAUBB
           CALL TAUAB
#
      ENDPROC TAU
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
#
      PROC GAE
#     ---------
#
      PARDO a, a1
#
            Taa(a,a1) = 0.0
#
            DO i1
            DO i
            DO a2
#
               REQUEST T2old_aa(a1,i1,a2,i) i 
               REQUEST A2old_aa(i1,a,i,a2)  a2 
#
               T1aa(a,a1)  = A2old_aa(i1,a,i,a2)*T2old_aa(a1,i1,a2,i)
               T1aa(a,a1) *= 0.5
               Taa(a,a1)  -= T1aa(a,a1)
#
            ENDDO a2
            ENDDO i
            ENDDO i1
#
            DO i
            DO j
            DO b
#
               REQUEST T2old_ab(a1,i,b,j) j 
               REQUEST A2old_ab(i,a,j,b)  j 
#
               T1aa(a,a1) = A2old_ab(i,a,j,b)*T2old_ab(a1,i,b,j)
               Taa(a,a1) -= T1aa(a,a1)
#
            ENDDO b
            ENDDO j
            ENDDO i
#
            PUT Gae_a(a,a1) += Taa(a,a1)
#
      ENDPARDO a, a1
#
      PARDO b, b1
#
            Tbb(b,b1) = 0.0
#
            DO j
            DO j1
            DO b2
#
               REQUEST T2old_bb(b1,j,b2,j1) j1 
               REQUEST A2old_bb(j,b,j1,b2)  j1 
#
               T1bb(b,b1)  = A2old_bb(j,b,j1,b2)*T2old_bb(b1,j,b2,j1)
               T1bb(b,b1) *= 0.5
               Tbb(b,b1)  -= T1bb(b,b1)
#
            ENDDO b2
            ENDDO j1
            ENDDO j
#
            DO j
            DO i
            DO a
#
               REQUEST T2old_ab(a,i,b1,j) j 
               REQUEST A2old_ab(i,a,j,b)  j 
#
               T1bb(b,b1) = A2old_ab(i,a,j,b)*T2old_ab(a,i,b1,j)
               Tbb(b,b1) -= T1bb(b,b1)
#
            ENDDO a
            ENDDO i
            ENDDO j
#
            PUT Gae_b(b,b1) += Tbb(b,b1)
#
      ENDPARDO b, b1
#
      ENDPROC GAE
#     ------------
#
      PROC GMI
#     ---------
#
      PARDO a, a1, i, i1
#
            DO i2
#
               REQUEST T2old_aa(a,i1,a1,i2) i2 
               REQUEST A2old_aa(i,a,i2,a1)  a1 
#
               Tii(i1,i)        = T2old_aa(a,i1,a1,i2)*A2old_aa(i,a,i2,a1)
               Tii(i1,i)       *= 0.5
               PUT Gmi_a(i1,i) += Tii(i1,i)
#
            ENDDO i2
#
      ENDPARDO a, a1, i, i1
#
      PARDO a, b, i, j
#
            DO i1
#
               REQUEST T2old_ab(a,i1,b,j) j 
               REQUEST A2old_ab(i,a,j,b)  j 
#
               Tii(i1,i)        = T2old_ab(a,i1,b,j)*A2old_ab(i,a,j,b)
               PUT Gmi_a(i1,i) += Tii(i1,i)
#
            ENDDO i1
#
      ENDPARDO a, b, i, j
#
      PARDO b, b1, j, j1
#
            DO j2
#
               REQUEST T2old_bb(b,j1,b1,j2) j2 
               REQUEST A2old_bb(j,b,j2,b1)  j2 
#
               Tjj(j1,j)        = T2old_bb(b,j1,b1,j2)*A2old_bb(j,b,j2,b1)
               Tjj(j1,j)       *= 0.5
               PUT Gmi_b(j1,j) += Tjj(j1,j)
#
            ENDDO j2
#
      ENDPARDO b, b1, j, j1
#
      PARDO b, a, j, i
#
            DO j1
#
               REQUEST T2old_ab(a,i,b,j1) j1 
               REQUEST A2old_ab(i,a,j,b)  b 
#
               Tjj(j1,j)        = T2old_ab(a,i,b,j1)*A2old_ab(i,a,j,b)
               PUT Gmi_b(j1,j) += Tjj(j1,j)
#
            ENDDO j1
#
      ENDPARDO b, a, j, i
#
      ENDPROC GMI
#     ------------
#
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
#
      PROC IAIXX 
#     ---------- 
#
# First form the half back-transformed density array 
# -------------------------------------------------- 
#
      PARDO a2, a, i 
#
            allocate Lxaai(*,a2,a,i) 
#
            DO a1 
#
               REQUEST Dabci_aaaa(a1,a2,a,i) i  
#
               DO mu 
#
                  Txaai(mu,a2,a,i)  = Dabci_aaaa(a1,a2,a,i)*ca(mu,a1) 
                  Lxaai(mu,a2,a,i) += Txaai(mu,a2,a,i) 
#
               ENDDO mu 
#
            ENDDO a1 
#
            DO mu 
#
               DO nu 
#
                  Txxai(mu,nu,a,i)          = Lxaai(mu,a2,a,i)*ca(nu,a2) 
                  PREPARE Ixxai(mu,nu,a,i) += Txxai(mu,nu,a,i) 
#
               ENDDO nu 
#
            ENDDO mu 
#
            deallocate Lxaai(*,a2,a,i) 
#
      ENDPARDO a2, a, i 
#
      PARDO a, b1, i 
#
            allocate Lxabi(*,a,b1,i) 
#
            DO b 
#
               REQUEST Dabci_baba(b,a,b1,i) i  
#
               DO mu 
#
                  Txabi(mu,a,b1,i)  = Dabci_baba(b,a,b1,i)*cb(mu,b) 
                  Lxabi(mu,a,b1,i) += Txabi(mu,a,b1,i) 
#
               ENDDO mu 
#
            ENDDO b 
#
            DO mu 
#
               DO nu 
#
                  Txxbi(mu,nu,b1,i)          = Lxabi(mu,a,b1,i)*ca(nu,a) 
                  PREPARE Ixxbi(mu,nu,b1,i) += Txxbi(mu,nu,b1,i) 
#
               ENDDO nu 
#
            ENDDO mu 
#
            deallocate Lxabi(*,a,b1,i) 
#
      ENDPARDO a, b1, i 
#
      PARDO b2, b, j 
#
            allocate Lxbbj(*,b2,b,j) 
#
            DO b1 
#
               REQUEST Dabci_bbbb(b1,b2,b,j) j  
#
               DO mu 
#
                  Txbbj(mu,b2,b,j)  = Dabci_bbbb(b1,b2,b,j)*cb(mu,b1) 
                  Lxbbj(mu,b2,b,j) += Txbbj(mu,b2,b,j) 
#
               ENDDO mu 
#
            ENDDO b1 
#
            DO mu 
#
               DO nu 
#
                  Txxbj(mu,nu,b,j)          = Lxbbj(mu,b2,b,j)*cb(nu,b2) 
                  PREPARE Ixxbj(mu,nu,b,j) += Txxbj(mu,nu,b,j) 
#
               ENDDO nu 
#
            ENDDO mu 
#
            deallocate Lxbbj(*,b2,b,j) 
#
      ENDPARDO b2, b, j 
#
      PARDO a1, b, j 
#
            allocate Lxbaj(*,b,a1,j) 
#
            DO a 
#
               REQUEST Dabci_abab(a,b,a1,j) j  
#
               DO mu 
#
                  Txbaj(mu,b,a1,j) = Dabci_abab(a,b,a1,j)*ca(mu,a) 
                  Lxbaj(mu,b,a1,j) += Txbaj(mu,b,a1,j) 
#
               ENDDO mu 
#
            ENDDO a 
#
            DO mu 
#
               DO nu 
#
                  Txxaj(mu,nu,a1,j)          = Lxbaj(mu,b,a1,j)*cb(nu,b) 
                  PREPARE Ixxaj(mu,nu,a1,j) += Txxaj(mu,nu,a1,j) 
#
               ENDDO nu 
#
            ENDDO mu 
#
            deallocate Lxbaj(*,b,a1,j) 
#
      ENDPARDO a1, b, j 
      execute server_barrier 
#
      PARDO mu, nu, a, i
            REQUEST Ixxai(mu,nu,a,i) a 
            DO lambda 
               txxxi(mu,nu,lambda,i) = Ixxai(mu,nu,a,i)*ca(lambda,a) 
               PREPARE Ixxxi(mu,nu,lambda,i) += txxxi(mu,nu,lambda,i) 
            ENDDO lambda 
      ENDPARDO mu, nu, a, i
#
      PARDO mu, nu, b, i
            REQUEST Ixxbi(mu,nu,b,i) b 
            DO lambda 
               txxxi(mu,nu,lambda,i) = Ixxbi(mu,nu,b,i)*cb(lambda,b) 
               PREPARE Jxxxi(mu,nu,lambda,i) += txxxi(mu,nu,lambda,i) 
            ENDDO lambda 
      ENDPARDO mu, nu, b, i
#
      PARDO mu, nu, b, j
            REQUEST Ixxbj(mu,nu,b,j) b 
            DO lambda 
               txxxj(mu,nu,lambda,j) = Ixxbj(mu,nu,b,j)*cb(lambda,b) 
               PREPARE Ixxxj(mu,nu,lambda,j) += txxxj(mu,nu,lambda,j) 
            ENDDO lambda 
      ENDPARDO mu, nu, b, j
#
      PARDO mu, nu, a, j
            REQUEST Ixxaj(mu,nu,a,j) a 
            DO lambda 
               txxxj(mu,nu,lambda,j) = Ixxaj(mu,nu,a,j)*ca(lambda,a) 
               PREPARE Jxxxj(mu,nu,lambda,j) += txxxj(mu,nu,lambda,j) 
            ENDDO lambda 
      ENDPARDO mu, nu, a, j
# 
      create IIxi 
      create IIxj 
      create JJxi 
      create JJxj 
      execute server_barrier  
#
# Contract with AO integrals 
# -------------------------- 
#
      PARDO lambda, sigma, mu, nu  
#
            compute_integrals            AOINT(lambda,mu,sigma,nu)
            compute_integrals            AOINT1(sigma,mu,lambda,nu)
            Txxxx(lambda,sigma,mu,nu)  = AOINT(lambda,mu,sigma,nu) 
            T1xxxx(lambda,sigma,mu,nu) = AOINT1(sigma,mu,lambda,nu) 
#
           #DO a 
           #DO i 
#
           #   REQUEST                             Ixxai(mu,nu,a,i) i  
           #   Txxai(lambda,sigma,a,i)           = Txxxx(lambda,sigma,mu,nu)*Ixxai(mu,nu,a,i)
           #   PREPARE I1xxai(lambda,sigma,a,i) += Txxai(lambda,sigma,a,i) 
#
           #ENDDO i 
           #ENDDO a 
#
           #DO b 
           #DO i 
#
           #   REQUEST                             Ixxbi(mu,nu,b,i) i  
           #   Txxbi(lambda,sigma,b,i)           = Txxxx(lambda,sigma,mu,nu)*Ixxbi(mu,nu,b,i)
           #   PREPARE I1xxbi(lambda,sigma,b,i) += Txxbi(lambda,sigma,b,i) 
# 
           #ENDDO i 
           #ENDDO b 
#
            DO i 
               REQUEST Jxxxi(mu,nu,lambda,i) i 
               txi(sigma,i) = Txxxx(lambda,sigma,mu,nu)*Jxxxi(mu,nu,lambda,i)  
               PUT JJxi(sigma,i) += txi(sigma,i) 
            ENDDO i 
#
            DO j 
               REQUEST Jxxxj(mu,nu,lambda,j) j 
               txj(sigma,j) = Txxxx(lambda,sigma,mu,nu)*Jxxxj(mu,nu,lambda,j)  
               PUT JJxj(sigma,j) += txj(sigma,j) 
            ENDDO j 
#
            Txxxx(lambda,sigma,mu,nu) -= T1xxxx(lambda,sigma,mu,nu) 
#
            DO i 
               REQUEST Ixxxi(mu,nu,lambda,i) i 
               txi(sigma,i) = Txxxx(lambda,sigma,mu,nu)*Ixxxi(mu,nu,lambda,i)  
               PUT IIxi(sigma,i) += txi(sigma,i) 
            ENDDO i 
#
            DO j 
               REQUEST Ixxxj(mu,nu,lambda,j) j 
               txj(sigma,j) = Txxxx(lambda,sigma,mu,nu)*Ixxxj(mu,nu,lambda,j)  
               PUT IIxj(sigma,j) += txj(sigma,j) 
            ENDDO j 
#
           #DO a 
           #DO j 
#
           #   REQUEST                             Ixxaj(mu,nu,a,j) j  
           #   Txxaj(lambda,sigma,a,j)           = Txxxx(lambda,sigma,mu,nu)*Ixxaj(mu,nu,a,j)
           #   PREPARE I1xxaj(lambda,sigma,a,j) += Txxaj(lambda,sigma,a,j) 
#
           #ENDDO j 
           #ENDDO a 
#
           #DO b 
           #DO j 
#
           #   REQUEST                             Ixxbj(mu,nu,b,j) j  
           #   Txxbj(lambda,sigma,b,j)           = Txxxx(lambda,sigma,mu,nu)*Ixxbj(mu,nu,b,j)
           #   PREPARE I1xxbj(lambda,sigma,b,j) += Txxbj(lambda,sigma,b,j) 
#
           #ENDDO j 
           #ENDDO b 
#
      ENDPARDO lambda, sigma, mu, nu 
      create Ixi 
      create I1xi 
      execute server_barrier 
#
      PARDO mu, a, i 
            GET IIxi(mu,i) 
            tai(a,i) = IIxi(mu,i)*ca(mu,a)  
            tai(a,i) *= 0.5  
            PUT Iai_aa(a,i) += Tai(a,i) 
      ENDPARDO mu, a, i 
#
      PARDO mu, b, j 
            GET IIxj(mu,j) 
            tbj(b,j) = IIxj(mu,j)*cb(mu,b)  
            tbj(b,j) *= 0.5  
            PUT Iai_bb(b,j) += Tbj(b,j) 
      ENDPARDO mu, b, j 
#
      PARDO mu, a, i 
            GET JJxi(mu,i) 
            tai(a,i) = JJxi(mu,i)*ca(mu,a)  
            PUT Iai_aa(a,i) += Tai(a,i) 
      ENDPARDO mu, a, i 
#
      PARDO mu, b, j 
            GET JJxj(mu,j) 
            tbj(b,j) = JJxj(mu,j)*cb(mu,b)  
            PUT Iai_bb(b,j) += Tbj(b,j) 
      ENDPARDO mu, b, j 
#
# Contract with last two transformation coefficients 
# -------------------------------------------------- 
#
#     PARDO lambda, sigma, a, i 
#
#           REQUEST               I1xxai(lambda,sigma,a,i) i  
#
#           Txi(sigma,i)        = I1xxai(lambda,sigma,a,i)*ca(lambda,a) 
#           T1xi(lambda,i)      = I1xxai(lambda,sigma,a,i)*ca(sigma,a) 
#
#           PUT Ixi(sigma,i)   += Txi(sigma,i) 
#           PUT I1xi(lambda,i) += T1xi(lambda,i) 
#
#     ENDPARDO lambda, sigma, a, i 
#     execute sip_barrier 
#
#     PARDO sigma, a, i 
#
#           GET                Ixi(sigma,i) 
#           Tai(a,i)         = Ixi(sigma,i)*ca(sigma,a) 
#           Tai(a,i)        *= 0.5 
#           PUT Iai_aa(a,i) += Tai(a,i) 
#
#     ENDPARDO sigma, a, i 
#
#     PARDO sigma, a, i 
#
#           GET                I1xi(sigma,i) 
#           Tai(a,i)         = I1xi(sigma,i)*ca(sigma,a) 
#           Tai(a,i)        *= -0.5 
#           PUT Iai_aa(a,i) += Tai(a,i) 
#
#     ENDPARDO sigma, a, i 
      execute sip_barrier 
      delete Ixi  
      delete I1xi  
#
      create Ixi 
      execute sip_barrier 
#
# Contract with last two transformation coefficients 
# -------------------------------------------------- 
#
     #PARDO lambda, sigma, b, i 
#
     #      REQUEST I1xxbi(lambda,sigma,b,i) i  
#
     #      Txi(sigma,i)   = I1xxbi(lambda,sigma,b,i)*cb(lambda,b) 
#
     #      PUT Ixi(sigma,i) += Txi(sigma,i) 
#
     #ENDPARDO lambda, sigma, b, i 
     #execute sip_barrier 
#
     #PARDO sigma, a, i 
#
     #      GET Ixi(sigma,i) 
     #      Tai(a,i)  = Ixi(sigma,i)*ca(sigma,a) 
     #      PUT Iai_aa(a,i) += Tai(a,i) 
#
     #ENDPARDO sigma, a, i 
#
      execute sip_barrier 
      delete Ixi  
#
      create Ixj 
      create I1xj 
      execute server_barrier 
#
# Contract with last two transformation coefficients 
# -------------------------------------------------- 
#
#     PARDO lambda, sigma, b, j 
#
#           REQUEST I1xxbj(lambda,sigma,b,j) j  
#
#           Txj(sigma,j)   = I1xxbj(lambda,sigma,b,j)*cb(lambda,b) 
#           T1xj(lambda,j) = I1xxbj(lambda,sigma,b,j)*cb(sigma,b) 
#
#           PUT Ixj(sigma,j) += Txj(sigma,j) 
#           PUT I1xj(lambda,j) += T1xj(lambda,j) 
#
#     ENDPARDO lambda, sigma, b, j 
#     execute sip_barrier 
#
#     PARDO sigma, b, j 
#
#           GET Ixj(sigma,j) 
#           Tbj(b,j)  = Ixj(sigma,j)*cb(sigma,b) 
#           Tbj(b,j) *= 0.5 
#           PUT Iai_bb(b,j) += Tbj(b,j) 
#
#     ENDPARDO sigma, b, j 
#
#     PARDO sigma, b, j 
#
#           GET I1xj(sigma,j) 
#           Tbj(b,j)  = I1xj(sigma,j)*cb(sigma,b) 
#           Tbj(b,j) *= -0.5 
#           PUT Iai_bb(b,j) += Tbj(b,j) 
#
#     ENDPARDO sigma, b, j 
      execute sip_barrier 
      delete Ixj  
      delete I1xj  
#
      create Ixj  
      execute server_barrier 
#
# Contract with last two transformation coefficients 
# -------------------------------------------------- 
#
#     PARDO lambda, sigma, a, j 
#
#           REQUEST I1xxaj(lambda,sigma,a,j) j  
#
#           Txj(sigma,j)   = I1xxaj(lambda,sigma,a,j)*ca(lambda,a) 
#
#           PUT Ixj(sigma,j) += Txj(sigma,j) 
#
#     ENDPARDO lambda, sigma, a, j 
#     execute sip_barrier 
#
#     PARDO sigma, b, j 
#
#           GET Ixj(sigma,j) 
#           Tbj(b,j)  = Ixj(sigma,j)*cb(sigma,b) 
#           PUT Iai_bb(b,j) += Tbj(b,j) 
#
#     ENDPARDO sigma, b, j 
#
      execute sip_barrier 
      delete Ixj  
      delete IIxi 
      delete IIxj 
      delete JJxi 
      delete JJxj 
#
      ENDPROC IAIXX 
#     -------------- 
#
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
#
#
# --------------------------------------------------------------------------- 
#
# In this PROCEDURE the D^{ij}_{ab} block of the two-particle 
# density matrix is formed. Only the AA spin case is considered.  
#
# --------------------------------------------------------------------------- 
#
# First form one-particle intermediates 
#
# --------------------------------------------------------------------------- 
#
# Dim(i,m) = Gmi_a(i,m) + a1a_old(m,e)*t1a_old(e,i)  
#
# Dea(e,a) = Gae_a(e,a) - a1a_old(m,e)*t1a_old(a,m) 
#
# --------------------------------------------------------------------------- 
#
      PROC DIJAB
#     ------------- 
#
# Terms 1-5 in Eq. 33 
# ------------------- 
#
      PARDO a, a1, i, i1 
#
            REQUEST Tau_aa(a,i,a1,i1)   a1  
            REQUEST A2old_aa(i,a,i1,a1) a1  
#
            Tiiaa(i,i1,a,a1)  = 0.0 #Tau_aa(a,i,a1,i1) 
            T1iiaa(i,i1,a,a1) = A2old_aa(i,a,i1,a1) 
            Tiiaa(i,i1,a,a1) += T1iiaa(i,i1,a,a1) 
            Tiiaa(i,i1,a,a1) *= 0.125  
#
            DO i2  
#
               REQUEST Tau_aa(a,i2,a1,i1) i1  
               REQUEST Tau_aa(a,i2,a1,i)  i  
               GET Dii(i,i2) 
               GET Dii(i1,i2) 
               tii (i1,i2) =  Dii(i1,i2) 
#
               T1iiaa(i,i1,a,a1) = Tau_aa(a,i2,a1,i1)*Dii(i,i2) 
               T1iiaa(i,i1,a,a1)*= -0.125 
               Tiiaa(i,i1,a,a1) += T1iiaa(i,i1,a,a1) 
#
               T1iiaa(i,i1,a,a1) = Tau_aa(a,i2,a1,i)*tii(i1,i2) 
               T1iiaa(i,i1,a,a1)*= 0.125 
               Tiiaa(i,i1,a,a1) += T1iiaa(i,i1,a,a1) 
#
               DO i3 
#
                  REQUEST Tau_aa(a,i2,a1,i3) i3  
                  REQUEST Vijmn_aaaa(i,i1,i2,i3) i3  
#
                  T2iiaa(i2,i3,a,a1) = Tau_aa(a,i2,a1,i3) 
                  T1iiaa(i,i1,a,a1)  = Vijmn_aaaa(i,i1,i2,i3)*T2iiaa(i2,i3,a,a1)
                  T1iiaa(i,i1,a,a1) *= 0.0625 
                  Tiiaa(i,i1,a,a1)  += T1iiaa(i,i1,a,a1) 
#
               ENDDO i3 
#
            ENDDO i2 
#            
            DO a2 
#
               REQUEST Tau_aa(a2,i,a1,i1) i1  
               REQUEST Tau_aa(a2,i,a,i1) i1  
               GET Daa(a2,a) 
               GET Daa(a2,a1) 
               taa (a2,a1) =  Daa(a2,a1) 
#
               T1iiaa(i,i1,a,a1) = Tau_aa(a2,i,a1,i1)*Daa(a2,a) 
               T1iiaa(i,i1,a,a1)*= 0.125 
               Tiiaa(i,i1,a,a1) += T1iiaa(i,i1,a,a1) 
#
               T1iiaa(i,i1,a,a1) = Tau_aa(a2,i,a,i1)*taa(a2,a1) 
               T1iiaa(i,i1,a,a1)*= -0.125 
               Tiiaa(i,i1,a,a1) += T1iiaa(i,i1,a,a1) 
#
            ENDDO a2 
#            
            PREPARE Dijab_aa(i,i1,a,a1) += Tiiaa(i,i1,a,a1) 
#
      ENDPARDO a, a1, i, i1 
#
# Final term in Eq. 33
# --------------------
#
      PARDO a, a1
#
            allocate L1aa(a1,*)
#
            DO i
#
               GET t1a_old(a1,i)
#
               DO a2
#
                  GET a1a_old(i,a2)
                  Taa(a1,a2)   = t1a_old(a1,i)*a1a_old(i,a2)
                  L1aa(a1,a2) += Taa(a1,a2)
#
               ENDDO a2
#
            ENDDO i
#
            allocate L1ai(a1,*)
#
            DO a2
            DO i
#
               GET t1a_old(a2,i)
               Tai(a1,i)   = L1aa(a1,a2)*t1a_old(a2,i)
               L1ai(a1,i) += Tai(a1,i)
#
            ENDDO i
            ENDDO a2
#
            deallocate L1aa(a1,*)
#
            DO i
#
               GET t1a_old(a,i)
#
               DO i1
#
                  Tiiaa(i,i1,a,a1)         = t1a_old(a,i)^L1ai(a1,i1)
                  Tiiaa(i,i1,a,a1)        *= 0.375
                  PREPARE Dijab_aa(i,i1,a,a1) += Tiiaa(i,i1,a,a1)
#
                  T1iiaa(i,i1,a1,a)        = Tiiaa(i,i1,a,a1)
                  T1iiaa(i,i1,a1,a)       *= -1.0
                  PREPARE Dijab_aa(i,i1,a1,a) += T1iiaa(i,i1,a1,a)
#
                  T1iiaa(i1,i,a,a1)        = Tiiaa(i,i1,a,a1)
                  T1iiaa(i1,i,a,a1)       *= -1.0
                  PREPARE Dijab_aa(i1,i,a,a1) += T1iiaa(i1,i,a,a1)
#
                  T1iiaa(i1,i,a1,a)        = Tiiaa(i,i1,a,a1)
                  PREPARE Dijab_aa(i1,i,a1,a) += T1iiaa(i1,i,a1,a)
#
               ENDDO i1
#
            ENDDO i
#
            deallocate L1ai(a1,*)
#
      ENDPARDO a, a1
#
# Sixth-term in Eq. 33
# --------------------
#
#
      PARDO i1, a1, i2, a2    
#
            REQUEST Liaai(i2,a2,a1,i1) a1 
#
            DO i
#
               GET         t1a_old(a2,i)
               tai(a2,i) = t1a_old(a2,i)
#
               DO a
#
                  REQUEST T2old_aa(a,i2,a2,i) i 
                  GET     t1a_old(a,i2)
#
                  Laiai(a,i2,a2,i)         = t1a_old(a,i2)^tai(a2,i)
                  Laiai(a,i2,a2,i)        *= 2.0
                  Laiai(a,i2,a2,i)        += T2old_aa(a,i2,a2,i)
#
#                 Tiiaa(i,i1,a,a1)         = Laiai(a,i2,a2,i)*Liaai(i2,a2,a1,i1)
#
                  Taiia(a,i,i2,a2)         = Laiai(a,i2,a2,i) 
                  Taiai(a,i,a1,i1)         = Taiia(a,i,i2,a2)*Liaai(i2,a2,a1,i1)  
                  Tiiaa(i,i1,a,a1)         = Taiai(a,i,a1,i1) 

                  Tiiaa(i,i1,a,a1)        *= -0.0625 
                  PREPARE Dijab_aa(i,i1,a,a1) += Tiiaa(i,i1,a,a1)
#
                  T1iiaa(i,i1,a1,a)        = Tiiaa(i,i1,a,a1)
                  T1iiaa(i,i1,a1,a)       *= -1.0
                  PREPARE Dijab_aa(i,i1,a1,a) += T1iiaa(i,i1,a1,a)
#
                  T1iiaa(i1,i,a,a1)        = Tiiaa(i,i1,a,a1)
                  T1iiaa(i1,i,a,a1)       *= -1.0
                  PREPARE Dijab_aa(i1,i,a,a1) += T1iiaa(i1,i,a,a1)
#
                  T1iiaa(i1,i,a1,a)        = Tiiaa(i,i1,a,a1)
                  PREPARE Dijab_aa(i1,i,a1,a) += T1iiaa(i1,i,a1,a)
#
               ENDDO a
#
            ENDDO i
#
      ENDPARDO i1, a1, i2, a2 
#
# Odd spin combination
#
#
      PARDO i1, a1, j, b 
#
            REQUEST Ljbai(j,b,a1,i1) b 
#
            DO i
            DO a
#
               REQUEST                    T2old_ab(a,i,b,j) j 
               Taijb(a,i,j,b)           = T2old_ab(a,i,b,j)
#
#              Tiiaa(i,i1,a,a1)         = Taibj(a,i,b,j)*Ljbai(j,b,a1,i1)
               Taiai(a,i,a1,i1)         = Taijb(a,i,j,b)*Ljbai(j,b,a1,i1) 
               Tiiaa(i,i1,a,a1)         = Taiai(a,i,a1,i1) 
#
               Tiiaa(i,i1,a,a1)        *= 0.0625 
               PREPARE Dijab_aa(i,i1,a,a1) += Tiiaa(i,i1,a,a1)
#
               T1iiaa(i,i1,a1,a)        = Tiiaa(i,i1,a,a1)
               T1iiaa(i,i1,a1,a)       *= -1.0
               PREPARE Dijab_aa(i,i1,a1,a) += T1iiaa(i,i1,a1,a)
#
               T1iiaa(i1,i,a,a1)        = Tiiaa(i,i1,a,a1)
               T1iiaa(i1,i,a,a1)       *= -1.0
               PREPARE Dijab_aa(i1,i,a,a1) += T1iiaa(i1,i,a,a1)
#
               T1iiaa(i1,i,a1,a)        = Tiiaa(i,i1,a,a1)
               PREPARE Dijab_aa(i1,i,a1,a) += T1iiaa(i1,i,a1,a)
#
            ENDDO a
            ENDDO i
#
      ENDPARDO i1, a1, j, b 
#
# Multiply by 2 to match aces 
# --------------------------- 
#
#     PARDO a, a1, i, i1 
#
#           REQUEST Dijab_aa(i,i1,a,a1) a1  
#
#           Tiiaa(i,i1,a,a1)        = 2.0*Dijab_aa(i,i1,a,a1)
#           PREPARE Dijab_aa(i,i1,a,a1) = Tiiaa(i,i1,a,a1) 
#
#     ENDPARDO a, a1, i, i1 
#     execute server_barrier 
#
# --------------------------------------------------------------------------- 
#
#
# --------------------------------------------------------------------------- 
#
#
# --------------------------------------------------------------------------- 
#
# In this PROCEDURE the D^{ij}_{ab} clock of the two-particle 
# density matrix is formed.  
#
# --------------------------------------------------------------------------- 
#
# First form one-particle intermediates 
#
# --------------------------------------------------------------------------- 
#
# Dim(i,m) = Gmi_a(i,m) + a1a_old(m,e)*t1a_old(e,i)  
#
# Dea(e,a) = Gae_a(e,a) - a1a_old(m,e)*t1a_old(a,m) 
#
# --------------------------------------------------------------------------- 
#
#     ------------- 
#
# One-particle intermediates computed in AA/BB blocks  
# ---------------------------------------------------  
#
# Terms 1-5 in Eq. 33 
# ------------------- 
#
      PARDO a, b, i, j 
#
            REQUEST Tau_ab(a,i,b,j)   b  
            REQUEST A2old_ab(i,a,j,b) b  
#
            Tijab(i,j,a,b)  = 0.0 #Tau_ab(a,i,b,j) 
            T1ijab(i,j,a,b) = A2old_ab(i,a,j,b) 
            Tijab(i,j,a,b) += T1ijab(i,j,a,b)  
            Tijab(i,j,a,b) *= 0.125  
#
            DO i1 
#
               REQUEST Tau_ab(a,i1,b,j) j  
               GET Dii(i,i1) 
#
               T1ijab(i,j,a,b) = Tau_ab(a,i1,b,j)*Dii(i,i1) 
               T1ijab(i,j,a,b)*= -0.125 
               Tijab(i,j,a,b) += T1ijab(i,j,a,b) 
#
               DO j1 
#
                  REQUEST Tau_ab(a,i1,b,j1)     j1  
                  REQUEST Vijmn_abab(i,j,i1,j1) j1  
#
                  T2ijab(i1,j1,a,b) = Tau_ab(a,i1,b,j1) 
                  T1ijab(i,j,a,b)   = Vijmn_abab(i,j,i1,j1)*T2ijab(i1,j1,a,b)
                  T1ijab(i,j,a,b)  *= 0.125 
                  Tijab(i,j,a,b)   += T1ijab(i,j,a,b) 
#
               ENDDO j1 
#
            ENDDO i1 
#
            DO j1 
#
               REQUEST Tau_ab(a,i,b,j1) j1  
               GET Djj(j,j1) 
#
               T1ijab(i,j,a,b) = Tau_ab(a,i,b,j1)*Djj(j,j1) 
               T1ijab(i,j,a,b)*= -0.125 
               Tijab(i,j,a,b) += T1ijab(i,j,a,b) 
#
            ENDDO j1 
#            
            DO a1 
#
               REQUEST Tau_ab(a1,i,b,j) j  
               GET Daa(a1,a) 
#
               T1ijab(i,j,a,b) = Tau_ab(a1,i,b,j)*Daa(a1,a) 
               T1ijab(i,j,a,b)*= 0.125 
               Tijab(i,j,a,b) += T1ijab(i,j,a,b) 
#
            ENDDO a1 
#            
            DO b1 
#
               REQUEST Tau_ab(a,i,b1,j) j  
               GET Dbb(b1,b) 
#
               T1ijab(i,j,a,b) = Tau_ab(a,i,b1,j)*Dbb(b1,b) 
               T1ijab(i,j,a,b)*= 0.125 
               Tijab(i,j,a,b) += T1ijab(i,j,a,b) 
#
            ENDDO b1 
#            
            PREPARE Dijab_ab(i,j,a,b) += Tijab(i,j,a,b) 
#
      ENDPARDO a, b, i, j 
#
# Final term in Eq. 33
# --------------------
#
      PARDO a, b
#
            allocate Lbb(b,*)
#
            DO j
#
               GET t1b_old(b,j)
#
               DO b1
#
                  GET a1b_old(j,b1)
                  Tbb(b,b1)  = t1b_old(b,j)*a1b_old(j,b1)
                  Lbb(b,b1) += Tbb(b,b1)
#
               ENDDO b1
#
            ENDDO j
#
            allocate Lbj(b,*)
#
            DO b1
            DO j
#
               GET t1b_old(b1,j)
               Tbj(b,j)  = Lbb(b,b1)*t1b_old(b1,j)
               Lbj(b,j) += Tbj(b,j)
#
            ENDDO j
            ENDDO b1
#
            deallocate Lbb(b,*)
#
            DO i
#
               GET t1a_old(a,i)
#
               DO j
#
                  Tijab(i,j,a,b)  = t1a_old(a,i)^Lbj(b,j)
                  Tijab(i,j,a,b) *= 0.375
                  PREPARE Dijab_ab(i,j,a,b) += Tijab(i,j,a,b)
#
               ENDDO j
#
            ENDDO i
#
            deallocate Lbj(b,*)
#
      ENDPARDO a, b
#
      PARDO a, b
#
            allocate Laa(a,*)
#
            DO i
#
               GET t1a_old(a,i)
#
               DO a1
#
                  GET a1a_old(i,a1)
                  Taa(a,a1)  = t1a_old(a,i)*a1a_old(i,a1)
                  Laa(a,a1) += Taa(a,a1)
#
               ENDDO a1
#
            ENDDO i
#
            allocate Lai(a,*)
#
            DO a1
            DO i
#
               GET t1a_old(a1,i)
               Tai(a,i)  = Laa(a,a1)*t1a_old(a1,i)
               Lai(a,i) += Tai(a,i)
#
            ENDDO i
            ENDDO a1
#
            deallocate Laa(a,*)
#
            DO i
            DO j
#
               GET t1b_old(b,j)
               Tijab(i,j,a,b)         = t1b_old(b,j)^Lai(a,i)
               Tijab(i,j,a,b)        *= 0.375
               PREPARE Dijab_ab(i,j,a,b) += Tijab(i,j,a,b)
#
            ENDDO j
            ENDDO i
#
            deallocate Lai(a,*)
#
      ENDPARDO a, b
#
# Sixth-term in Eq. 33
# --------------------
#
#
      PARDO j, b, i1, a1 
#
            REQUEST Liabj(i1,a1,b,j) b 
#
            DO i
#
               GET         t1a_old(a1,i)
               tai(a1,i) = t1a_old(a1,i)
#
               DO a
#
                  REQUEST T2old_aa(a,i1,a1,i) i 
                  GET     t1a_old(a,i1)
#
                  Laiai(a,i1,a1,i)       = t1a_old(a,i1)^tai(a1,i)
                  Laiai(a,i1,a1,i)      *= 2.0
                  Laiai(a,i1,a1,i)      += T2old_aa(a,i1,a1,i)
#
#                 Tijab(i,j,a,b)         = Laiai(a,i1,a1,i)*Liabj(i1,a1,b,j)
#
                  Taiia(a,i,i1,a1)       = Laiai(a,i1,a1,i) 
                  Taibj(a,i,b,j)         = Taiia(a,i,i1,a1)*Liabj(i1,a1,b,j)  
                  Tijab(i,j,a,b)         = Taibj(a,i,b,j) 
                  Tijab(i,j,a,b)        *= -0.0625 
                  PREPARE Dijab_ab(i,j,a,b) += Tijab(i,j,a,b)
#
               ENDDO a
#
            ENDDO i
#
      ENDPARDO j, b, i1, a1 
#
#
      PARDO j, b, b2, j2
#
            REQUEST Ljbbj(j2,b2,b,j) b 
#
            DO i
            DO a
#
               REQUEST T2old_ab(a,i,b2,j2) j2 
#
#              Tijab(i,j,a,b)         = T2old_ab(a,i,b2,j2)*Ljbbj(j2,b2,b,j)
#
               Tiajb(i,a,j2,b2)       = T2old_ab(a,i,b2,j2) 
               Tiabj(i,a,b,j)         = Tiajb(i,a,j2,b2)*Ljbbj(j2,b2,b,j) 
               Tijab(i,j,a,b)         = Tiabj(i,a,b,j)  
               Tijab(i,j,a,b)        *= 0.0625 
               PREPARE Dijab_ab(i,j,a,b) += Tijab(i,j,a,b)
#
            ENDDO a
            ENDDO i
#
      ENDPARDO j, b, b2, j2
#
      PARDO i, a, j1, b1 
#
            REQUEST Ljbai(j1,b1,a,i) a 
#
            DO j
#
               GET         t1b_old(b1,j)
               tbj(b1,j) = t1b_old(b1,j)
#
               DO b
#
                  REQUEST T2old_bb(b,j1,b1,j) j 
                  GET     t1b_old(b,j1)
#
                  Tbjjb(b,j,j1,b1)       = t1b_old(b,j1)^tbj(b1,j)
                  Tbjjb(b,j,j1,b1)      *= 2.0
                  T1bjjb(b,j,j1,b1)      = T2old_bb(b,j1,b1,j)
                  Tbjjb(b,j,j1,b1)      += T1bjjb(b,j,j1,b1)  
#
#                 Tijab(i,j,a,b)         = Lbjbj(b,j1,b1,j)*Ljbai(j1,b1,a,i)
                  Tbjai(b,j,a,i)         = Tbjjb(b,j,j1,b1)*Ljbai(j1,b1,a,i)
                  Tijab(i,j,a,b)         = Tbjai(b,j,a,i)  
                  Tijab(i,j,a,b)        *= -0.0625 
                  PREPARE Dijab_ab(i,j,a,b) += Tijab(i,j,a,b)
#
               ENDDO b
#
            ENDDO j
#
      ENDPARDO i, a, j1, b1 
#
      PARDO i, a, a2, i2
#
            REQUEST Liaai(i2,a2,a,i) a 
#
            DO j
            DO b
#
               REQUEST T2old_ab(a2,i2,b,j) j 
#
#              Tijab(i,j,a,b)         = T2old_ab(a2,i2,b,j)*Liaai(i2,a2,a,i)
#
               Taiai(a,i,a2,i2)       = Liaai(i2,a2,a,i) 
               Taibj(a,i,b,j)         = Taiai(a,i,a2,i2)*T2old_ab(a2,i2,b,j) 
               Tijab(i,j,a,b)         = Taibj(a,i,b,j) 
               Tijab(i,j,a,b)        *= 0.0625 
               PREPARE Dijab_ab(i,j,a,b) += Tijab(i,j,a,b)
#
            ENDDO b
            ENDDO j
#
      ENDPARDO i, a, a2, i2
#
      PARDO b, b1, i1, i
#
            Lbibi(b,i1,b1,i) = 0.0
#
            DO j
            DO a
#
               REQUEST T2old_ab(a,i,b,j)   j 
               REQUEST A2old_ab(i1,a,j,b1) j 
#
#              Tbibi(b,i1,b1,i)  = T2old_ab(a,i,b,j)*A2old_ab(i1,a,j,b1)
#
               Tibja(i,b,j,a)    = T2old_ab(a,i,b,j)
               Tjaib(j,a,i1,b1)  = A2old_ab(i1,a,j,b1) 
               Tibib(i,b,i1,b1)  = Tibja(i,b,j,a)*Tjaib(j,a,i1,b1)   
               Tbibi(b,i1,b1,i)  = Tibib(i,b,i1,b1) 
               Lbibi(b,i1,b1,i) += Tbibi(b,i1,b1,i)
#
            ENDDO a
            ENDDO j
#
            DO a
            DO j
#
               REQUEST T2old_ab(a,i1,b1,j) j 
               GET t1a_old(a,i1)
               GET t1b_old(b1,j)
#
               Taibj(a,i1,b1,j)       = t1a_old(a,i1)^t1b_old(b1,j)
               Taibj(a,i1,b1,j)      *= 2.0
               Taibj(a,i1,b1,j)      += T2old_ab(a,i1,b1,j)
#
               Tijab(i,j,a,b)         = Taibj(a,i1,b1,j)*Lbibi(b,i1,b1,i)
               Tijab(i,j,a,b)        *= 0.0625 
               PREPARE Dijab_ab(i,j,a,b) += Tijab(i,j,a,b)
#
            ENDDO j
            ENDDO a
#
      ENDPARDO b, b1, i1, i
#
      PARDO a, a1, j1, j
#
            Lajaj(a,j1,a1,j) = 0.0
#
            DO i
            DO b
#
               REQUEST T2old_ab(a,i,b,j) j 
               REQUEST A2old_ab(i,a1,j1,b) b 
#
               Tajaj(a,j1,a1,j)  = T2old_ab(a,i,b,j)*A2old_ab(i,a1,j1,b)
               Lajaj(a,j1,a1,j) += Tajaj(a,j1,a1,j)
#
            ENDDO b
            ENDDO i
#
            DO b
#
               GET t1b_old(b,j1)
#
               DO i
#
                  REQUEST T2old_ab(a1,i,b,j1) j1 
                  GET t1a_old(a1,i)
#
                  Taibj(a1,i,b,j1)       = t1a_old(a1,i)^t1b_old(b,j1)
                  Taibj(a1,i,b,j1)      *= 2.0
                  Taibj(a1,i,b,j1)      += T2old_ab(a1,i,b,j1)
#
                  Tijab(i,j,a,b)         = Taibj(a1,i,b,j1)*Lajaj(a,j1,a1,j)
                  Tijab(i,j,a,b)        *= 0.0625 
                  PREPARE Dijab_ab(i,j,a,b) += Tijab(i,j,a,b)
#
            ENDDO i
#
            ENDDO b
#
      ENDPARDO a, a1, j1, j 
#
# Multiply by 2 to match aces 
# --------------------------- 
#
#     PARDO b, a, j, i 
#
#           REQUEST Dijab_ab(i,j,a,b) b  
#           Tijab(i,j,a,b)        = 2.0*Dijab_ab(i,j,a,b)
#           PREPARE Dijab_ab(i,j,a,b) = Tijab(i,j,a,b) 
#
#     ENDPARDO b, a, j, i 
#     execute server_barrier ca  
# --------------------------------------------------------------------------- 
#
#
# --------------------------------------------------------------------------- 
#
# --------------------------------------------------------------------------- 
#
# In this PROCEDURE the D^{ij}_{ab} block of the two-particle 
# density matrix is formed. Only the BB spin case is considered.  
#
# --------------------------------------------------------------------------- 
#
# First form one-particle intermediates 
#
# --------------------------------------------------------------------------- 
#
# Dim(i,m) = Gmi_b(i,m) + a1b_old(m,e)*t1b_old(e,i)  
#
# Dea(e,a) = Gae_b(e,a) - a1b_old(m,e)*t1b_old(a,m) 
#
# --------------------------------------------------------------------------- 
#
#     ------------- 
#
# Terms 1-5 in Eq. 33 
# ------------------- 
#
      PARDO b, b1, j, j1 
#
            REQUEST Tau_bb(b,j,b1,j1)   b1  
            REQUEST A2old_bb(j,b,j1,b1) b1  
#
            Tjjbb(j,j1,b,b1)  = 0.0 #Tau_bb(b,j,b1,j1) 
            T1jjbb(j,j1,b,b1) = A2old_bb(j,b,j1,b1) 
            Tjjbb(j,j1,b,b1) += T1jjbb(j,j1,b,b1)  
            Tjjbb(j,j1,b,b1) *= 0.125  
#
            DO j2  
#
               REQUEST Tau_bb(b,j2,b1,j1) j2  
               REQUEST Tau_bb(b,j2,b1,j)  j2  
               GET Djj(j,j2) 
               GET Djj(j1,j2) 
#
               T1jjbb(j,j1,b,b1) = Tau_bb(b,j2,b1,j1)*Djj(j,j2) 
               T1jjbb(j,j1,b,b1)*= -0.125 
               Tjjbb(j,j1,b,b1) += T1jjbb(j,j1,b,b1) 
#
               T1jjbb(j,j1,b,b1) = Tau_bb(b,j2,b1,j)*Djj(j1,j2) 
               T1jjbb(j,j1,b,b1)*= 0.125 
               Tjjbb(j,j1,b,b1) += T1jjbb(j,j1,b,b1) 
#
               DO j3 
#
                  REQUEST Tau_bb(b,j2,b1,j3)     j3  
                  REQUEST Vijmn_bbbb(j,j1,j2,j3) j3  
#
#                 T1jjbb(j,j1,b,b1)  = Vijmn_bbbb(j,j1,j2,j3)*Tau_bb(b,j2,b1,j3)

                  T2jjbb(j2,j3,b,b1) = Tau_bb(b,j2,b1,j3) 
                  T1jjbb(j,j1,b,b1)  = Vijmn_bbbb(j,j1,j2,j3)*T2jjbb(j2,j3,b,b1) 
                  T1jjbb(j,j1,b,b1) *= 0.0625 
                  Tjjbb(j,j1,b,b1)  += T1jjbb(j,j1,b,b1) 
#
               ENDDO j3 
#
            ENDDO j2 
#            
            DO b2 
#
               REQUEST Tau_bb(b2,j,b1,j1) j1  
               REQUEST Tau_bb(b2,j,b,j1)  j1  
               GET Dbb(b2,b) 
               GET Dbb(b2,b1) 
#
               T1jjbb(j,j1,b,b1) = Tau_bb(b2,j,b1,j1)*Dbb(b2,b) 
               T1jjbb(j,j1,b,b1)*= 0.125 
               Tjjbb(j,j1,b,b1) += T1jjbb(j,j1,b,b1) 
#
               T1jjbb(j,j1,b,b1) = Tau_bb(b2,j,b,j1)*Dbb(b2,b1) 
               T1jjbb(j,j1,b,b1)*= -0.125 
               Tjjbb(j,j1,b,b1) += T1jjbb(j,j1,b,b1) 
#
            ENDDO b2 
#            
            PREPARE Dijab_bb(j,j1,b,b1) += Tjjbb(j,j1,b,b1) 
#
      ENDPARDO b, b1, j, j1 
#
# Final term in Eq. 33
# --------------------
#
      PARDO b, b1
#
            allocate L1bb(b1,*)
#
            DO j
#
               GET t1b_old(b1,j)
#
               DO b2
#
                  GET a1b_old(j,b2)
                  Tbb(b1,b2)   = t1b_old(b1,j)*a1b_old(j,b2)
                  L1bb(b1,b2) += Tbb(b1,b2)
#
               ENDDO b2
#
            ENDDO j
#
            allocate L1bj(b1,*)
#
            DO b2
            DO j
#
               GET t1b_old(b2,j)
               Tbj(b1,j)   = L1bb(b1,b2)*t1b_old(b2,j)
               L1bj(b1,j) += Tbj(b1,j)
#
            ENDDO j
            ENDDO b2
#
            deallocate L1bb(b1,*)
#
            DO j
#
               GET t1b_old(b,j)
#
               DO j1
#
                  Tjjbb(j,j1,b,b1)         = t1b_old(b,j)^L1bj(b1,j1)
                  Tjjbb(j,j1,b,b1)        *= 0.375
                  PREPARE Dijab_bb(j,j1,b,b1) += Tjjbb(j,j1,b,b1)
#
                  T1jjbb(j,j1,b1,b)        = Tjjbb(j,j1,b,b1)
                  T1jjbb(j,j1,b1,b)       *= -1.0
                  PREPARE Dijab_bb(j,j1,b1,b) += T1jjbb(j,j1,b1,b)
#
                  T1jjbb(j1,j,b,b1)        = Tjjbb(j,j1,b,b1)
                  T1jjbb(j1,j,b,b1)       *= -1.0
                  PREPARE Dijab_bb(j1,j,b,b1) += T1jjbb(j1,j,b,b1)
#
                  T1jjbb(j1,j,b1,b)        = Tjjbb(j,j1,b,b1)
                  PREPARE Dijab_bb(j1,j,b1,b) += T1jjbb(j1,j,b1,b)
#
               ENDDO j1
#
            ENDDO j
#
            deallocate L1bj(b1,*)
#
      ENDPARDO b, b1
#
# Sixth-term in Eq. 33
# --------------------
#
      PARDO j1, b1, b2, j2
#
            REQUEST Ljbbj(j2,b2,b1,j1) b1 
#
            DO j
#
               GET         t1b_old(b2,j)
               tbj(b2,j) = t1b_old(b2,j)
#
               DO b
#
                  REQUEST T2old_bb(b,j2,b2,j) j 
                  GET     t1b_old(b,j2)
#
                  Lbjbj(b,j2,b2,j)         = t1b_old(b,j2)^tbj(b2,j)
                  Lbjbj(b,j2,b2,j)        *= 2.0
                  Lbjbj(b,j2,b2,j)        += T2old_bb(b,j2,b2,j)
#
#                 Tjjbb(j,j1,b,b1)         = Lbjbj(b,j2,b2,j)*Ljbbj(j2,b2,b1,j1)
                  
                  Tjbjb(j,b,j2,b2)         = Lbjbj(b,j2,b2,j) 
                  Tjbbj(j,b,b1,j1)         = Tjbjb(j,b,j2,b2)*Ljbbj(j2,b2,b1,j1)
                  Tjjbb(j,j1,b,b1)         = Tjbbj(j,b,b1,j1) 
#
                  Tjjbb(j,j1,b,b1)        *= -0.0625 
                  PREPARE Dijab_bb(j,j1,b,b1) += Tjjbb(j,j1,b,b1)
#
                  T1jjbb(j,j1,b1,b)        = Tjjbb(j,j1,b,b1)
                  T1jjbb(j,j1,b1,b)       *= -1.0
                  PREPARE Dijab_bb(j,j1,b1,b) += T1jjbb(j,j1,b1,b)
#
                  T1jjbb(j1,j,b,b1)        = Tjjbb(j,j1,b,b1)
                  T1jjbb(j1,j,b,b1)       *= -1.0
                  PREPARE Dijab_bb(j1,j,b,b1) += T1jjbb(j1,j,b,b1)
#
                  T1jjbb(j1,j,b1,b)        = Tjjbb(j,j1,b,b1)
                  PREPARE Dijab_bb(j1,j,b1,b) += T1jjbb(j1,j,b1,b)
#
               ENDDO b
#
            ENDDO j
#
      ENDPARDO j1, b1, b2, j2
#
# Odd spin combination
# --------------------
#
      PARDO j1, b1, i, a 
#
            REQUEST Liabj(i,a,b1,j1) a 
#
            DO j
            DO b
#
               REQUEST T2old_ab(a,i,b,j) j 
#
#              Tjjbb(j,j1,b,b1)         = T2old_ab(a,i,b,j)*Liabj(i,a,b1,j1)

               Tjbia(j,b,i,a)           = T2old_ab(a,i,b,j) 
               Tjbbj(j,b,b1,j1)         = Tjbia(j,b,i,a)*Liabj(i,a,b1,j1)  
               Tjjbb(j,j1,b,b1)         = Tjbbj(j,b,b1,j1) 
               Tjjbb(j,j1,b,b1)        *= 0.0625
               PREPARE Dijab_bb(j,j1,b,b1) += Tjjbb(j,j1,b,b1)
#
               T1jjbb(j,j1,b1,b)        = Tjjbb(j,j1,b,b1)
               T1jjbb(j,j1,b1,b)       *= -1.0
               PREPARE Dijab_bb(j,j1,b1,b) += T1jjbb(j,j1,b1,b)
#
               T1jjbb(j1,j,b,b1)        = Tjjbb(j,j1,b,b1)
               T1jjbb(j1,j,b,b1)       *= -1.0
               PREPARE Dijab_bb(j1,j,b,b1) += T1jjbb(j1,j,b,b1)
#
               T1jjbb(j1,j,b1,b)        = Tjjbb(j,j1,b,b1)
               PREPARE Dijab_bb(j1,j,b1,b) += T1jjbb(j1,j,b1,b)
#
            ENDDO b
            ENDDO j
#
      ENDPARDO j1, b1, i, a 
#
#     PARDO b, b1, j, j1 
#
#           REQUEST Dijab_bb(j,j1,b,b1) b1  
#           Tjjbb(j,j1,b,b1)        = 2.0*Dijab_bb(j,j1,b,b1)
#           PREPARE Dijab_bb(j,j1,b,b1) = Tjjbb(j,j1,b,b1) 
#
#     ENDPARDO b, b1, j, j1 
#     execute server_barrier 
#
# --------------------------------------------------------------------------- 
#
      ENDPROC DIJAB
# --------------------------------------------------------------------------- 
#
#  AP's generous and helpful contribution!
#
#-------------------------------------------------------------------------
#
#     ---------------
      PROC  DIJAB_EOM
#     ---------------
#
#
#       ab    ab               a  b
#      G   = t   + P(ij)P(ab) t  t
#       ij    ij               i  j
#
#   
#       ab               a  b
#      G   = P(ij)P(ab) Z  t
#       ij               i  j
#
#       a             a  e            m  a
#      Z   = (R2 * L2)  t  + (R2 * L2)  t
#       i             e  i            i  m
#
#
# AAAA spin combination
#
      PARDO  a, i, a1, i1
         REQUEST              TAU_aa (a,i,a1,i1) a
         GET                  R1A    (a1,i1)
         GET                  t1a_old(a1,i1)
         tpppp (i,i1,a,a1)  = TAU_aa (a,i,a1,i1)
         tpppp (i,i1,a,a1) *= 0.125 #0.5

         taiai  (a,i,a1,i1)  = L_Z1_ai (a,i) ^ t1a_old (a1,i1)
         t1aiai (a,i,a1,i1)  = L_Z2_ai (a,i) ^ R1A  (a1,i1)
         taiai  (a,i,a1,i1) += t1aiai (a,i,a1,i1)
         taiai  (a,i,a1,i1) *= 0.125 #0.5

         tiiaa  (i,i1,a,a1) = taiai (a,i,a1,i1)
         t1iiaa (i1,i,a1,a) = taiai (a,i,a1,i1)
         t2iiaa (i1,i,a,a1) = taiai (a,i,a1,i1)
         t3iiaa (i,i1,a1,a) = taiai (a,i,a1,i1)

         t2iiaa (i1,i,a,a1) *= -1.0
         t3iiaa (i,i1,a1,a) *= -1.0

         tiiaa (i,i1,a,a1) += tpppp (i,i1,a,a1)

         PREPARE  Dijab_aa (i,i1,a,a1) += tiiaa  (i,i1,a,a1)
         PREPARE  Dijab_aa (i1,i,a1,a) += t1iiaa (i1,i,a1,a)
         PREPARE  Dijab_aa (i1,i,a,a1) += t2iiaa (i1,i,a,a1)
         PREPARE  Dijab_aa (i,i1,a1,a) += t3iiaa (i,i1,a1,a)
      ENDPARDO  a, i, a1, i1

#ABAB spin combination 

      PARDO  a, i, b1, j1
         REQUEST  TAU_ab (a,i,b1,j1) a
         GET  R1B (b1,j1)
         GET  R1A (a,i)
         GET  t1b_old (b1,j1)
         GET  t1a_old (a,i)
         tai (a,i) = R1A (a,i)
         tbj (b1,j1) = t1b_old (b1,j1)

         taibj  (a,i,b1,j1)  = L_Z1_ai (a,i) ^ tbj     (b1,j1)
         t1aibj (a,i,b1,j1)  = t1a_old (a,i) ^ L_Z1_bj (b1,j1)
         t2aibj (a,i,b1,j1)  = L_Z2_ai (a,i) ^ R1B     (b1,j1)
         t3aibj (a,i,b1,j1)  = tai     (a,i) ^ L_Z2_bj (b1,j1)
         taibj  (a,i,b1,j1) += t1aibj (a,i,b1,j1)
         taibj  (a,i,b1,j1) += t2aibj (a,i,b1,j1)
         taibj  (a,i,b1,j1) += t3aibj (a,i,b1,j1)
         taibj  (a,i,b1,j1) += TAU_ab (a,i,b1,j1)

         tijab (i,j1,a,b1)  = taibj (a,i,b1,j1)
         tijab (i,j1,a,b1) *= 0.125 #0.5
         PREPARE  Dijab_ab (i,j1,a,b1) += tijab (i,j1,a,b1)
      ENDPARDO  a, i, b1, j1

#BBBB spin combination

      PARDO  b, j, b1, j1
         REQUEST              TAU_bb (b,j,b1,j1) b
         GET                  R1B    (b1,j1)
         GET                  t1b_old(b1,j1)
         tqqqq (j,j1,b,b1)  = TAU_bb (b,j,b1,j1)
         tqqqq (j,j1,b,b1) *= 0.125 #0.5

         tbjbj  (b,j,b1,j1)  = L_Z1_bj (b,j) ^ t1b_old (b1,j1)
         t1bjbj (b,j,b1,j1)  = L_Z2_bj (b,j) ^ R1B  (b1,j1)
         tbjbj  (b,j,b1,j1) += t1bjbj (b,j,b1,j1)
         tbjbj  (b,j,b1,j1) *= 0.125 #0.5

         tjjbb  (j,j1,b,b1) = tbjbj (b,j,b1,j1)
         t1jjbb (j1,j,b1,b) = tbjbj (b,j,b1,j1)
         t2jjbb (j1,j,b,b1) = tbjbj (b,j,b1,j1)
         t3jjbb (j,j1,b1,b) = tbjbj (b,j,b1,j1)

         t2jjbb (j1,j,b,b1) *= -1.0
         t3jjbb (j,j1,b1,b) *= -1.0

         tjjbb  (j,j1,b,b1) += tqqqq (j,j1,b,b1)

         PREPARE  Dijab_bb (j,j1,b,b1) += tjjbb  (j,j1,b,b1)
         PREPARE  Dijab_bb (j1,j,b1,b) += t1jjbb (j1,j,b1,b)
         PREPARE  Dijab_bb (j1,j,b,b1) += t2jjbb (j1,j,b,b1)
         PREPARE  Dijab_bb (j,j1,b1,b) += t3jjbb (j,j1,b1,b)
      ENDPARDO  b, j, b1, j1

#
#      Here I am inserting an artifical N^5 step.
#      I do this because I want to avoid barriers as much as possible.
#
#      I believe it is justified because the requests are not far in, and
#      there are no "PREPARE +=" but "PUT +=" instead.
#
#
# I Do not understand this.
# -------------------------------------------------------------------
# AAAA and ABAB spin combinations 

      PARDO  a2, a, i
         ALLOCATE  LLaiai (a,i,a2,*)
         ALLOCATE  Lai   (a,i)
         DO i2
            REQUEST      T2old_aa (a,i,a2,i2) i2
            GET  t1a_old (a2,i)
            GET  t1a_old (a,i2)
            tpp  (a2,i) = t1a_old (a2,i)
            t1pp (a,i2) = t1a_old (a,i2)
            tpppp  (a,i2,a2,i)  = t1pp (a,i2) ^ tpp (a2,i)
            tpppp  (a,i2,a2,i) *= -1.0
            t1pppp (a,i,a2,i2)  = tpppp  (a,i2,a2,i)
            t1pppp (a,i,a2,i2) += T2old_aa   (a,i,a2,i2)
            LLaiai  (a,i,a2,i2) += t1pppp (a,i,a2,i2)
         ENDDO i2
         DO i2
            t1ai (a,i)  = LLaiai (a,i,a2,i2) * LR1L2_ai (a2,i2)
            t1ai (a,i) *= 0.5
            Lai  (a,i) += t1ai  (a,i)
         ENDDO i2

         DO a1
         DO i1
            GET t1a_old (a1,i1)
            t2pp (a1,i1) = t1a_old (a1,i1)
            taiai  (a,i,a1,i1)  = Lai (a,i) ^ t2pp (a1,i1)
            taiai  (a,i,a1,i1) *= 0.25 # 1.0
            tiiaa  (i,i1,a,a1)  = taiai (a,i,a1,i1)
            t1iiaa (i1,i,a1,a)  = taiai (a,i,a1,i1)
            t2iiaa (i1,i,a,a1)  = taiai (a,i,a1,i1)
            t3iiaa (i,i1,a1,a)  = taiai (a,i,a1,i1)
         
            t2iiaa (i1,i,a,a1) *= -1.0
            t3iiaa (i,i1,a1,a) *= -1.0
         
            PREPARE  Dijab_aa (i,i1,a,a1) += tiiaa  (i,i1,a,a1)
            PREPARE  Dijab_aa (i1,i,a1,a) += t1iiaa (i1,i,a1,a)
            PREPARE  Dijab_aa (i1,i,a,a1) += t2iiaa (i1,i,a,a1)
            PREPARE  Dijab_aa (i,i1,a1,a) += t3iiaa (i,i1,a1,a)
         ENDDO i1
         ENDDO a1
         DO b1
         DO j1
            GET  t1b_old (b1,j1)
            taibj (a,i,b1,j1)  = Lai (a,i) ^ t1b_old (b1,j1)
            taibj (a,i,b1,j1) *= 0.25 # 1.0
            tijab (i,j1,a,b1)  = taibj (a,i,b1,j1)
            PREPARE  Dijab_ab (i,j1,a,b1) += tijab (i,j1,a,b1)
         ENDDO j1
         ENDDO b1
         DEALLOCATE  Lai   (a,i)
         DEALLOCATE  LLaiai (a,i,a2,*)
      ENDPARDO  a2, a, i

      PARDO  b2, a, i
         tai (a,i) = 0.0
         DO j2
            REQUEST       T2old_ab (a,i,b2,j2) j2
            t1ai (a,i)  = T2old_ab (a,i,b2,j2) * LR1L2_bj (b2,j2)
            t1ai (a,i) *= 0.5
            tai  (a,i) +=  t1ai (a,i)
         ENDDO j2
         DO a1
         DO i1
            GET t1a_old (a1,i1)
            taiai  (a,i,a1,i1)  = tai (a,i) ^ t1a_old (a1,i1)
            taiai  (a,i,a1,i1) *= 0.25 # 1.0
            tiiaa  (i,i1,a,a1)  = taiai (a,i,a1,i1)
            t1iiaa (i1,i,a1,a)  = taiai (a,i,a1,i1)
            t2iiaa (i1,i,a,a1)  = taiai (a,i,a1,i1)
            t3iiaa (i,i1,a1,a)  = taiai (a,i,a1,i1)
         
            t2iiaa (i1,i,a,a1) *= -1.0
            t3iiaa (i,i1,a1,a) *= -1.0
         
            PREPARE  Dijab_aa (i,i1,a,a1) += tiiaa  (i,i1,a,a1)
            PREPARE  Dijab_aa (i1,i,a1,a) += t1iiaa (i1,i,a1,a)
            PREPARE  Dijab_aa (i1,i,a,a1) += t2iiaa (i1,i,a,a1)
            PREPARE  Dijab_aa (i,i1,a1,a) += t3iiaa (i,i1,a1,a)
         ENDDO i1
         ENDDO a1
         DO b1
         DO j1
            GET t1b_old (b1,j1)
            tqq (b1,j1) = t1b_old (b1,j1)
            taibj (a,i,b1,j1)  = tai (a,i) ^ tqq (b1,j1)
            taibj (a,i,b1,j1) *= 0.25 # 1.0
            tijab (i,j1,a,b1)  = taibj (a,i,b1,j1)
            PREPARE  Dijab_ab (i,j1,a,b1) += tijab (i,j1,a,b1)
         ENDDO j1
         ENDDO b1
      ENDPARDO  b2, a, i

      PARDO  b2, b, j
         ALLOCATE  LLbjbj (b,j,b2,*)
         ALLOCATE  Lbj   (b,j)
         DO j2
            REQUEST      T2old_bb (b,j,b2,j2) j2
            GET t1b_old (b2,j)
            GET t1b_old (b,j2)
            tbj (b2,j) = t1b_old (b2,j)
            tqqqq  (b,j2,b2,j)  = t1b_old (b,j2) ^ tbj (b2,j)
            tqqqq  (b,j2,b2,j) *= -1.0
            t1qqqq (b,j,b2,j2)  = tqqqq  (b,j2,b2,j)
            t1qqqq (b,j,b2,j2) += T2old_bb   (b,j,b2,j2)
            LLbjbj  (b,j,b2,j2) += t1qqqq (b,j,b2,j2)
         ENDDO j2
         DO j2
            t1bj (b,j)  = LLbjbj (b,j,b2,j2) * LR1L2_bj (b2,j2)
            t1bj (b,j) *= 0.5
            Lbj  (b,j) += t1bj  (b,j)
         ENDDO j2
         DO a1
         DO i1
            GET t1a_old (a1,i1)
            tpp (a1,i1) = t1a_old (a1,i1)
            tbjai (b,j,a1,i1)  = Lbj (b,j) ^ tpp (a1,i1)
            tbjai (b,j,a1,i1) *= 0.25 # 1.0
            tijab (i1,j,a1,b)  = tbjai (b,j,a1,i1)
            PREPARE  Dijab_ab (i1,j,a1,b) += tijab (i1,j,a1,b)
         ENDDO i1
         ENDDO a1
         DEALLOCATE  Lbj   (b,j)
         DEALLOCATE  LLbjbj (b,j,b2,*)
      ENDPARDO  b2, b, j

      PARDO  a2, b, j
         tbj (b,j) = 0.0
         DO i2
            REQUEST       T2old_ab (a2,i2,b,j) i2
            t1bj (b,j)  = T2old_ab (a2,i2,b,j) * LR1L2_ai (a2,i2)
            t1bj (b,j) *= 0.5
            tbj  (b,j) += t1bj (b,j)
         ENDDO i2
         DO a1
         DO i1
            GET t1a_old (a1,i1)
            tbjai (b,j,a1,i1)  = tbj (b,j) ^ t1a_old (a1,i1)
            tbjai (b,j,a1,i1) *= 0.25 # 1.0
            tijab (i1,j,a1,b)  = tbjai (b,j,a1,i1)
            PREPARE  Dijab_ab (i1,j,a1,b) += tijab (i1,j,a1,b)
         ENDDO i1
         ENDDO a1
      ENDPARDO  a2, b, j


# BBBB spin combination

      PARDO  b2, b, j
         ALLOCATE  LLbjbj (b,j,b2,*)
         ALLOCATE  Lbj   (b,j)
         DO j2
            REQUEST      T2old_bb (b,j,b2,j2) j2
            GET  t1b_old (b2,j)
            GET  t1b_old (b,j2)
            tqq  (b2,j) = t1b_old (b2,j)
            t1qq (b,j2) = t1b_old (b,j2)
            tqqqq  (b,j2,b2,j)  = t1qq (b,j2) ^ tqq (b2,j)
            tqqqq  (b,j2,b2,j) *= -1.0
            t1qqqq (b,j,b2,j2)  = tqqqq  (b,j2,b2,j)
            t1qqqq (b,j,b2,j2) += T2old_bb   (b,j,b2,j2)
            LLbjbj  (b,j,b2,j2) += t1qqqq (b,j,b2,j2)
         ENDDO j2
         DO j2
            t1bj (b,j)  = LLbjbj (b,j,b2,j2) * LR1L2_bj (b2,j2)
            t1bj (b,j) *= 0.5
            Lbj  (b,j) += t1bj  (b,j)
         ENDDO j2

         DO b1
         DO j1
            GET t1b_old (b1,j1)
            t2qq (b1,j1) = t1b_old (b1,j1)
            tbjbj  (b,j,b1,j1)  = Lbj (b,j) ^ t2qq (b1,j1)
            tbjbj  (b,j,b1,j1) *= 0.25 # 1.0
            tjjbb  (j,j1,b,b1)  = tbjbj (b,j,b1,j1)
            t1jjbb (j1,j,b1,b)  = tbjbj (b,j,b1,j1)
            t2jjbb (j1,j,b,b1)  = tbjbj (b,j,b1,j1)
            t3jjbb (j,j1,b1,b)  = tbjbj (b,j,b1,j1)
         
            t2jjbb (j1,j,b,b1) *= -1.0
            t3jjbb (j,j1,b1,b) *= -1.0
         
            PREPARE  Dijab_bb (j,j1,b,b1) += tjjbb  (j,j1,b,b1)
            PREPARE  Dijab_bb (j1,j,b1,b) += t1jjbb (j1,j,b1,b) 
            PREPARE  Dijab_bb (j1,j,b,b1) += t2jjbb (j1,j,b,b1)
            PREPARE  Dijab_bb (j,j1,b1,b) += t3jjbb (j,j1,b1,b) 
         ENDDO j1
         ENDDO b1

         DEALLOCATE  Lbj   (b,j)
         DEALLOCATE  LLbjbj (b,j,b2,*)
      ENDPARDO  b2, b, j

      PARDO  b, a, j
         tbj (b,j) = 0.0
         DO i
            REQUEST       T2old_ab (a,i,b,j) j
            t1bj (b,j)  = T2old_ab (a,i,b,j) * LR1L2_ai (a,i)
            t1bj (b,j) *= 0.5
            tbj  (b,j) +=  t1bj (b,j)
         ENDDO i
         DO b1
         DO j1
            GET t1b_old (b1,j1)
            tbjbj  (b,j,b1,j1)  = tbj (b,j) ^ t1b_old (b1,j1)
            tbjbj  (b,j,b1,j1) *= 0.25 # 1.0
            tjjbb  (j,j1,b,b1)  = tbjbj (b,j,b1,j1)
            t1jjbb (j1,j,b1,b)  = tbjbj (b,j,b1,j1) 
            t2jjbb (j1,j,b,b1)  = tbjbj (b,j,b1,j1)
            t3jjbb (j,j1,b1,b)  = tbjbj (b,j,b1,j1)
         
            t2jjbb (j1,j,b,b1) *= -1.0
            t3jjbb (j,j1,b1,b) *= -1.0
         
            PREPARE  Dijab_bb (j,j1,b,b1) += tjjbb  (j,j1,b,b1)
            PREPARE  Dijab_bb (j1,j,b1,b) += t1jjbb (j1,j,b1,b)
            PREPARE  Dijab_bb (j1,j,b,b1) += t2jjbb (j1,j,b,b1)
            PREPARE  Dijab_bb (j,j1,b1,b) += t3jjbb (j,j1,b1,b)
         ENDDO j1
         ENDDO b1
      ENDPARDO  b, a, j
#
#
#       ab           e  m        ef  mn    ab           a  m        af  mn    eb
#      G   = P(ij) (t  l  + 1/2 t   l   ) r   + P(ab) (t  l  + 1/2 t   l   ) r
#       ij           i  e        in  ef    mj           m  e        mn  ef    ij
#
#
#
#           f  mn  e    e  m        ef  mn    ab           f  mn  a    a  m        af  mn    eb
# + P(ij) (r  l   t  + r  l  + 1/2 r   l   ) t   + P(ab) (r  l   t  + r  l  + 1/2 r   l   ) t
#           n  ef  i    i  e        in  ef    mh           n  ef  m    m  e        mn  ef    ij
#
# AAAA spin combinations
#
      PARDO  a, i2, a1, i1
         REQUEST  T2old_aa (a,i2,a1,i1) a
         REQUEST  R2AA (a,i2,a1,i1) a
         DO i
            taiai  (a,i,a1,i1)  = L_Z_ii (i2,i) * T2old_aa (a,i2,a1,i1)
            t1aiai (a,i,a1,i1)  = L_Y_ii (i2,i) * R2AA (a,i2,a1,i1)
            taiai  (a,i,a1,i1) += t1aiai (a,i,a1,i1)
            taiai  (a,i,a1,i1) *= 0.125 # 0.5
            tiiaa  (i,i1,a,a1)  = taiai  (a,i,a1,i1)
            t1iiaa (i1,i,a,a1)  = taiai  (a,i,a1,i1)
            tiiaa  (i,i1,a,a1) *= -1.0
            PREPARE  Dijab_aa (i,i1,a,a1) += tiiaa  (i,i1,a,a1)
            PREPARE  Dijab_aa (i1,i,a,a1) += t1iiaa (i1,i,a,a1)
         ENDDO i
      ENDPARDO  a, i2, a1, i1

      PARDO  a2, i, a1, i1
         REQUEST  T2old_aa (a2,i,a1,i1) a2
         REQUEST  R2AA (a2,i,a1,i1) a2
         DO a
            taiai  (a,i,a1,i1)  = L_Z_aa (a2,a) * T2old_aa (a2,i,a1,i1)
            t1aiai (a,i,a1,i1)  = L_Y_aa (a2,a) * R2AA (a2,i,a1,i1)
            taiai  (a,i,a1,i1) += t1aiai (a,i,a1,i1)
            taiai  (a,i,a1,i1) *= 0.125 # 0.5
            tiiaa  (i,i1,a,a1)  = taiai (a,i,a1,i1)
            t1iiaa (i,i1,a1,a)  = taiai (a,i,a1,i1)
            tiiaa  (i,i1,a,a1) *= -1.0
            PREPARE  Dijab_aa (i,i1,a,a1) += tiiaa  (i,i1,a,a1)
            PREPARE  Dijab_aa (i,i1,a1,a) += t1iiaa (i,i1,a1,a)
         ENDDO a
      ENDPARDO  a2, i, a1, i1

#ABAB spin combinations

      PARDO  a, i2, b1, j1
         REQUEST  T2old_ab (a,i2,b1,j1) a
         REQUEST  R2AB (a,i2,b1,j1) a
         DO i
            taibj  (a,i,b1,j1)  = L_Z_ii (i2,i) * T2old_ab (a,i2,b1,j1)
            t1aibj (a,i,b1,j1)  = L_Y_ii (i2,i) * R2AB (a,i2,b1,j1)
            taibj  (a,i,b1,j1) += t1aibj (a,i,b1,j1)
            taibj  (a,i,b1,j1) *= -0.125 # 0.5
            tijab  (i,j1,a,b1)  = taibj  (a,i,b1,j1)
           #tijab  (i,j1,a,b1) *= -1.0
            PREPARE  Dijab_ab (i,j1,a,b1) += tijab (i,j1,a,b1)
         ENDDO i
      ENDPARDO  a, i2, b1, j1

      PARDO  a, j2, b1, i
         REQUEST  T2old_ab (a,i,b1,j2) a
         REQUEST  R2AB (a,i,b1,j2) a
         DO j1
            taibj  (a,i,b1,j1)  = T2old_ab (a,i,b1,j2) * L_Z_jj (j2,j1)
            t1aibj (a,i,b1,j1)  = R2AB (a,i,b1,j2) * L_Y_jj (j2,j1)
            taibj  (a,i,b1,j1) += t1aibj (a,i,b1,j1)
            taibj  (a,i,b1,j1) *= -0.125 # 0.5
            tijab  (i,j1,a,b1)  = taibj  (a,i,b1,j1)
           #tijab  (i,j1,a,b1) *= -1.0
            PREPARE  Dijab_ab (i,j1,a,b1) += tijab (i,j1,a,b1)
         ENDDO j1
      ENDPARDO  a, j2, b1, i

      PARDO  a2, i, b1, j1
         REQUEST  T2old_ab (a2,i,b1,j1) a2
         REQUEST  R2AB (a2,i,b1,j1) a2
         DO a
            taibj  (a,i,b1,j1)  = L_Z_aa (a2,a) * T2old_ab (a2,i,b1,j1)
            t1aibj (a,i,b1,j1)  = L_Y_aa (a2,a) * R2AB (a2,i,b1,j1)
            taibj  (a,i,b1,j1) += t1aibj (a,i,b1,j1)
            taibj  (a,i,b1,j1) *= -0.125 # 0.5
            tijab  (i,j1,a,b1)  = taibj (a,i,b1,j1)
           #tijab  (i,j1,a,b1) *= -1.0
            PREPARE  Dijab_ab (i,j1,a,b1) += tijab  (i,j1,a,b1)
         ENDDO a
      ENDPARDO  a2, i, b1, j1

      PARDO  b2, i, a, j1
         REQUEST  T2old_ab (a,i,b2,j1) b2
         REQUEST  R2AB (a,i,b2,j1) b2
         DO b1
            taibj  (a,i,b1,j1)  = T2old_ab (a,i,b2,j1) * L_Z_bb (b2,b1)
            t1aibj (a,i,b1,j1)  = R2AB (a,i,b2,j1) * L_Y_bb (b2,b1)
            taibj  (a,i,b1,j1) += t1aibj (a,i,b1,j1)
            taibj  (a,i,b1,j1) *= -0.125 # 0.5
            tijab  (i,j1,a,b1)  = taibj (a,i,b1,j1)
           #tijab  (i,j1,a,b1) *= -1.0
            PREPARE  Dijab_ab (i,j1,a,b1) += tijab  (i,j1,a,b1)
         ENDDO b1
      ENDPARDO  b2, i, a, j1

#BBBB spin combinations 

      PARDO  b, j2, b1, j1
         REQUEST  T2old_bb (b,j2,b1,j1) b
         REQUEST  R2BB (b,j2,b1,j1) b
         DO j
            tbjbj  (b,j,b1,j1)  = L_Z_jj (j2,j) * T2old_bb (b,j2,b1,j1)
            t1bjbj (b,j,b1,j1)  = L_Y_jj (j2,j) * R2BB (b,j2,b1,j1)
            tbjbj  (b,j,b1,j1) += t1bjbj (b,j,b1,j1)
            tbjbj  (b,j,b1,j1) *= 0.125 # 0.5
            tjjbb  (j,j1,b,b1)  = tbjbj  (b,j,b1,j1)
            t1jjbb (j1,j,b,b1)  = tbjbj  (b,j,b1,j1)
            tjjbb  (j,j1,b,b1) *= -1.0
            PREPARE  Dijab_bb (j,j1,b,b1) += tjjbb  (j,j1,b,b1)
            PREPARE  Dijab_bb (j1,j,b,b1) += t1jjbb (j1,j,b,b1)
         ENDDO j
      ENDPARDO  b, j2, b1, j1

      PARDO  b2, j, b1, j1
         REQUEST  T2old_bb (b2,j,b1,j1) b2
         REQUEST  R2BB (b2,j,b1,j1) b2
         DO b
            tbjbj  (b,j,b1,j1)  = L_Z_bb (b2,b) * T2old_bb (b2,j,b1,j1)
            t1bjbj (b,j,b1,j1)  = L_Y_bb (b2,b) * R2BB (b2,j,b1,j1)
            tbjbj  (b,j,b1,j1) += t1bjbj (b,j,b1,j1)
            tbjbj  (b,j,b1,j1) *= 0.125 # 0.5
            tjjbb  (j,j1,b,b1)  = tbjbj  (b,j,b1,j1)
            t1jjbb (j,j1,b1,b)  = tbjbj  (b,j,b1,j1)
            tjjbb  (j,j1,b,b1) *= -1.0
            PREPARE  Dijab_bb (j,j1,b,b1) += tjjbb  (j,j1,b,b1)
            PREPARE  Dijab_bb (j,j1,b1,b) += t1jjbb (j,j1,b1,b)
         ENDDO b
      ENDPARDO  b2, j, b1, j1
#
#     TPDIJAB4; AAAA spin combination
#
      PARDO  a, i, i2, i3
         ALLOCATE  L2iiii  (i,*,i2,i3)
         ALLOCATE  L4iiii (i,*,i2,i3)
         DO i1
            GET                    L2RTAU_iiii (i,i1,i2,i3)
            GET                    L2TTAU_iiii (i,i1,i2,i3)
            L2iiii (i,i1,i2,i3)  = L2RTAU_iiii (i,i1,i2,i3)
            L4iiii (i,i1,i2,i3)  = L2TTAU_iiii (i,i1,i2,i3)
            L2iiii (i,i1,i2,i3) *= 0.25
            L4iiii (i,i1,i2,i3) *= 0.25
         ENDDO i1
         DO a1
            REQUEST               TAU_aa  (a,i2,a1,i3) a1
            REQUEST               RTAU_aa (a,i2,a1,i3) a1
            tiiaa  (i2,i3,a,a1) = TAU_aa  (a,i2,a1,i3)
            t1iiaa (i2,i3,a,a1) = RTAU_aa (a,i2,a1,i3)
            DO i1
               tpppp  (i,i1,a,a1)  = L2iiii (i,i1,i2,i3) * tiiaa  (i2,i3,a,a1)
               t1pppp (i,i1,a,a1)  = L4iiii (i,i1,i2,i3) * t1iiaa (i2,i3,a,a1)
               tpppp  (i,i1,a,a1) += t1pppp (i,i1,a,a1)
               tpppp  (i,i1,a,a1) *= 0.25 # 1.0
               PREPARE  Dijab_aa (i,i1,a,a1) += tpppp (i,i1,a,a1)
            ENDDO i1
         ENDDO a1
         DEALLOCATE  L2iiii  (i,*,i2,i3)
         DEALLOCATE  L4iiii (i,*,i2,i3)
      ENDPARDO  a, i, i2, i3

#ABAB spin combination

      PARDO  a, i, i2, j3
         ALLOCATE  Lijij  (i,*,i2,j3)
         ALLOCATE  L1ijij (i,*,i2,j3)
         DO j1
            GET                    L2RTAU_ijij (i,j1,i2,j3)
            GET                    L2TTAU_ijij (i,j1,i2,j3)
            Lijij  (i,j1,i2,j3)  = L2RTAU_ijij (i,j1,i2,j3)
            L1ijij (i,j1,i2,j3)  = L2TTAU_ijij (i,j1,i2,j3)
            Lijij  (i,j1,i2,j3) *= 0.5
            L1ijij (i,j1,i2,j3) *= 0.5
         ENDDO j1
         DO b1
            REQUEST               TAU_ab  (a,i2,b1,j3) b1
            REQUEST               RTAU_ab (a,i2,b1,j3) b1
            tijab  (i2,j3,a,b1) = TAU_ab  (a,i2,b1,j3)
            t1ijab (i2,j3,a,b1) = RTAU_ab (a,i2,b1,j3)
            DO j1
               tpqpq  (i,j1,a,b1)  = Lijij  (i,j1,i2,j3) * tijab  (i2,j3,a,b1)
               t1pqpq (i,j1,a,b1)  = L1ijij (i,j1,i2,j3) * t1ijab (i2,j3,a,b1)
               tpqpq  (i,j1,a,b1) += t1pqpq (i,j1,a,b1)
               tpqpq  (i,j1,a,b1) *= 0.25 # 1.0
               PREPARE  Dijab_ab (i,j1,a,b1) += tpqpq (i,j1,a,b1)
            ENDDO j1
         ENDDO b1
         DEALLOCATE  Lijij  (i,*,i2,j3)
         DEALLOCATE  L1ijij (i,*,i2,j3)
      ENDPARDO  a, i, i2, j3

#BBBB spin combination

      PARDO  b, j, j2, j3
         ALLOCATE  L2jjjj  (j,*,j2,j3)
         ALLOCATE  L4jjjj (j,*,j2,j3)
         DO j1
            GET                    L2RTAU_jjjj (j,j1,j2,j3)
            GET                    L2TTAU_jjjj (j,j1,j2,j3)
            L2jjjj (j,j1,j2,j3)  = L2RTAU_jjjj (j,j1,j2,j3)
            L4jjjj (j,j1,j2,j3)  = L2TTAU_jjjj (j,j1,j2,j3)
            L2jjjj (j,j1,j2,j3) *= 0.25
            L4jjjj (j,j1,j2,j3) *= 0.25
         ENDDO j1
         DO b1
            REQUEST               TAU_bb  (b,j2,b1,j3) b1
            REQUEST               RTAU_bb (b,j2,b1,j3) b1
            tjjbb  (j2,j3,b,b1) = TAU_bb  (b,j2,b1,j3)
            t1jjbb (j2,j3,b,b1) = RTAU_bb (b,j2,b1,j3)
            DO j1
               tqqqq  (j,j1,b,b1)  = L2jjjj (j,j1,j2,j3) * tjjbb  (j2,j3,b,b1)
               t1qqqq (j,j1,b,b1)  = L4jjjj (j,j1,j2,j3) * t1jjbb (j2,j3,b,b1)
               tqqqq  (j,j1,b,b1) += t1qqqq (j,j1,b,b1)
               tqqqq  (j,j1,b,b1) *= 0.25 # 1.0
               PREPARE  Dijab_bb (j,j1,b,b1) += tqqqq (j,j1,b,b1)
            ENDDO j1
         ENDDO b1
         DEALLOCATE  L2jjjj (j,*,j2,j3)
         DEALLOCATE  L4jjjj (j,*,j2,j3)
      ENDPARDO  b, j, j2, j3
#
#     TPDIJAB5: AAAA spin combination
#
      PARDO  a1, b2, j2, a
         ALLOCATE  Libja  (*,b2,j2,a)
         ALLOCATE  L1ibja (*,b2,j2,a)
         DO i
            REQUEST               L2R2_abba (i,b2,j2,a) i
            REQUEST               L2T2_abba (i,b2,j2,a) i
            Libja  (i,b2,j2,a)  = L2R2_abba (i,b2,j2,a)
            L1ibja (i,b2,j2,a)  = L2T2_abba (i,b2,j2,a)
            Libja  (i,b2,j2,a) *= 0.25
            L1ibja (i,b2,j2,a) *= 0.25
         ENDDO i
         DO i1
            REQUEST  T2old_ab (a1,i1,b2,j2) i1
            REQUEST  R2AB (a1,i1,b2,j2) i1
            DO i
               tiaia  (i,a1,i1,a)  = T2old_ab (a1,i1,b2,j2) * Libja  (i,b2,j2,a)
               t1iaia (i,a1,i1,a)  = R2AB (a1,i1,b2,j2) * L1ibja (i,b2,j2,a)
               tiaia  (i,a1,i1,a) += t1iaia (i,a1,i1,a)
               tiaia  (i,a1,i1,a) *= 0.25 # 1.0

               t1iiaa (i,i1,a,a1)  = tiaia (i,a1,i1,a)
               t2iiaa (i1,i,a1,a)  = t1iiaa (i,i1,a,a1)
               t3iiaa (i1,i,a,a1)  = t1iiaa (i,i1,a,a1)
               t4iiaa (i,i1,a1,a)  = t1iiaa (i,i1,a,a1)

               t3iiaa (i1,i,a,a1) *= -1.0
               t4iiaa (i,i1,a1,a) *= -1.0

               PREPARE  Dijab_aa (i,i1,a,a1) += t1iiaa (i,i1,a,a1)
               PREPARE  Dijab_aa (i1,i,a1,a) += t2iiaa (i1,i,a1,a)
               PREPARE  Dijab_aa (i1,i,a,a1) += t3iiaa (i1,i,a,a1)
               PREPARE  Dijab_aa (i,i1,a1,a) += t4iiaa (i,i1,a1,a)
            ENDDO i
         ENDDO i1
         DEALLOCATE  Libja  (*,b2,j2,a)
         DEALLOCATE  L1ibja (*,b2,j2,a)
      ENDPARDO  a1, b2, j2, a

      PARDO  b1, a2, i2, b
         ALLOCATE  Ljaib  (*,a2,i2,b)
         ALLOCATE  L1jaib (*,a2,i2,b)
         DO j
            REQUEST               L2R2_baab (j,a2,i2,b) j
            REQUEST               L2T2_baab (j,a2,i2,b) j
            Ljaib  (j,a2,i2,b)  = L2R2_baab (j,a2,i2,b)
            L1jaib (j,a2,i2,b)  = L2T2_baab (j,a2,i2,b)
            Ljaib  (j,a2,i2,b) *= 0.25
            L1jaib (j,a2,i2,b) *= 0.25
         ENDDO j
         DO j1
            REQUEST  T2old_ab (a2,i2,b1,j1) j1
            REQUEST  R2AB (a2,i2,b1,j1) j1
            DO j
               tjbjb  (j,b1,j1,b)  = T2old_ab (a2,i2,b1,j1) * Ljaib  (j,a2,i2,b)
               t1jbjb (j,b1,j1,b)  = R2AB (a2,i2,b1,j1) * L1jaib (j,a2,i2,b)
               tjbjb  (j,b1,j1,b) += t1jbjb (j,b1,j1,b)
               tjbjb  (j,b1,j1,b) *= 0.25 # 1.0

               t1jjbb (j,j1,b,b1)  = tjbjb (j,b1,j1,b)
               t2jjbb (j1,j,b1,b)  = t1jjbb (j,j1,b,b1)
               t3jjbb (j1,j,b,b1)  = t1jjbb (j,j1,b,b1)
               t4jjbb (j,j1,b1,b)  = t1jjbb (j,j1,b,b1)

               t3jjbb (j1,j,b,b1) *= -1.0
               t4jjbb (j,j1,b1,b) *= -1.0

               PREPARE  Dijab_bb (j,j1,b,b1) += t1jjbb (j,j1,b,b1)
               PREPARE  Dijab_bb (j1,j,b1,b) += t2jjbb (j1,j,b1,b)
               PREPARE  Dijab_bb (j1,j,b,b1) += t3jjbb (j1,j,b,b1)
               PREPARE  Dijab_bb (j,j1,b1,b) += t4jjbb (j,j1,b1,b)
            ENDDO j
         ENDDO j1
         DEALLOCATE  Ljaib  (*,a2,i2,b)
         DEALLOCATE  L1jaib (*,a2,i2,b)
      ENDPARDO  b1, a2, i2, b

      PARDO  a1, a2, i2, a
         ALLOCATE  Liaia  (*,a2,i2,a)
         ALLOCATE  L1iaia (*,a2,i2,a)
         DO i
            REQUEST               L2R2_aaaa (i,a2,i2,a) i
            REQUEST               L2T2_aaaa (i,a2,i2,a) i
            Liaia  (i,a2,i2,a)  = L2R2_aaaa (i,a2,i2,a)
            L1iaia (i,a2,i2,a)  = L2T2_aaaa (i,a2,i2,a)
            Liaia  (i,a2,i2,a) *= 0.25
            L1iaia (i,a2,i2,a) *= 0.25
         ENDDO i
         DO i1
            REQUEST        T2old_aa (a1,i1,a2,i2) i1
            REQUEST        R2AA (a1,i1,a2,i2) i1
            GET            R1A  (a1,i2)
            GET            R1A  (a2,i1)
            GET            t1a_old (a1,i2)
            GET            t1a_old (a2,i1)
            tai  (a2,i1) = t1a_old (a2,i1)
            t1ai (a1,i2) = R1A  (a1,i2)
# TAU like
            taiai  (a1,i1,a2,i2)  = tai (a2,i1) ^ t1a_old (a1,i2)
            taiai  (a1,i1,a2,i2) *= -2.0
            taiai  (a1,i1,a2,i2) += T2old_aa   (a1,i1,a2,i2)
# RTAU like
            t1aiai (a1,i1,a2,i2)  = R1A (a2,i1) ^ t1a_old (a1,i2)
            t2pppp (a1,i1,a2,i2)  = tai (a2,i1) ^ t1ai (a1,i2)
            t1aiai (a1,i1,a2,i2) += t2pppp (a1,i1,a2,i2)
            t1aiai (a1,i1,a2,i2) *= -2.0
            t1aiai (a1,i1,a2,i2) += R2AA (a1,i1,a2,i2)
            DO i
               tiaia  (i,a1,i1,a)  = taiai  (a1,i1,a2,i2) * Liaia  (i,a2,i2,a)
               t1iaia (i,a1,i1,a)  = t1aiai (a1,i1,a2,i2) * L1iaia (i,a2,i2,a)
               tiaia  (i,a1,i1,a) += t1iaia (i,a1,i1,a)
               tiaia  (i,a1,i1,a) *= 0.25 # 1.0

               t1iiaa (i,i1,a,a1)  = tiaia (i,a1,i1,a)
               t2iiaa (i1,i,a1,a)  = t1iiaa (i,i1,a,a1)
               t3iiaa (i1,i,a,a1)  = t1iiaa (i,i1,a,a1)
               t4iiaa (i,i1,a1,a)  = t1iiaa (i,i1,a,a1)

               t3iiaa (i1,i,a,a1) *= -1.0
               t4iiaa (i,i1,a1,a) *= -1.0

               PREPARE  Dijab_aa (i,i1,a,a1) += t1iiaa (i,i1,a,a1)
               PREPARE  Dijab_aa (i1,i,a1,a) += t2iiaa (i1,i,a1,a)
               PREPARE  Dijab_aa (i1,i,a,a1) += t3iiaa (i1,i,a,a1)
               PREPARE  Dijab_aa (i,i1,a1,a) += t4iiaa (i,i1,a1,a)
            ENDDO i
         ENDDO i1
         DEALLOCATE  Liaia  (*,a2,i2,a)
         DEALLOCATE  L1iaia (*,a2,i2,a)
      ENDPARDO  a1, a2, i2, a

      PARDO  b1, b2, j2, b
         ALLOCATE  Ljbjb  (*,b2,j2,b)
         ALLOCATE  L1jbjb (*,b2,j2,b)
         DO j
            REQUEST               L2R2_bbbb (j,b2,j2,b) j
            REQUEST               L2T2_bbbb (j,b2,j2,b) j
            Ljbjb  (j,b2,j2,b)  = L2R2_bbbb (j,b2,j2,b)
            L1jbjb (j,b2,j2,b)  = L2T2_bbbb (j,b2,j2,b)
            Ljbjb  (j,b2,j2,b) *= 0.25
            L1jbjb (j,b2,j2,b) *= 0.25
         ENDDO j
         DO j1
            REQUEST        T2old_bb (b1,j1,b2,j2) j1
            REQUEST        R2BB (b1,j1,b2,j2) j1
            GET            R1B  (b1,j2)
            GET            R1B  (b2,j1)
            GET            t1b_old (b1,j2)
            GET            t1b_old (b2,j1)
            tbj  (b2,j1) = t1b_old (b2,j1)
            t1bj (b1,j2) = R1B  (b1,j2)
# TAU ljke
            tbjbj  (b1,j1,b2,j2)  = tbj (b2,j1) ^ t1b_old (b1,j2)
            tbjbj  (b1,j1,b2,j2) *= -2.0
            tbjbj  (b1,j1,b2,j2) += T2old_bb   (b1,j1,b2,j2)
# RTAU ljke
            t1bjbj (b1,j1,b2,j2)  = R1B (b2,j1) ^ t1b_old (b1,j2)
            t2qqqq (b1,j1,b2,j2)  = tbj (b2,j1) ^ t1bj (b1,j2)
            t1bjbj (b1,j1,b2,j2) += t2qqqq (b1,j1,b2,j2)
            t1bjbj (b1,j1,b2,j2) *= -2.0
            t1bjbj (b1,j1,b2,j2) += R2BB (b1,j1,b2,j2)
            DO j
               tjbjb  (j,b1,j1,b)  = tbjbj  (b1,j1,b2,j2) * Ljbjb  (j,b2,j2,b)
               t1jbjb (j,b1,j1,b)  = t1bjbj (b1,j1,b2,j2) * L1jbjb (j,b2,j2,b)
               tjbjb  (j,b1,j1,b) += t1jbjb (j,b1,j1,b)
               tjbjb  (j,b1,j1,b) *= 0.25 # 1.0

               t1jjbb (j,j1,b,b1)  = tjbjb (j,b1,j1,b)
               t2jjbb (j1,j,b1,b)  = t1jjbb (j,j1,b,b1)
               t3jjbb (j1,j,b,b1)  = t1jjbb (j,j1,b,b1)
               t4jjbb (j,j1,b1,b)  = t1jjbb (j,j1,b,b1)

               t3jjbb (j1,j,b,b1) *= -1.0
               t4jjbb (j,j1,b1,b) *= -1.0

               PREPARE  Dijab_bb (j,j1,b,b1) += t1jjbb (j,j1,b,b1)
               PREPARE  Dijab_bb (j1,j,b1,b) += t2jjbb (j1,j,b1,b)
               PREPARE  Dijab_bb (j1,j,b,b1) += t3jjbb (j1,j,b,b1)
               PREPARE  Dijab_bb (j,j1,b1,b) += t4jjbb (j,j1,b1,b)
            ENDDO j
         ENDDO j1
         DEALLOCATE  Ljbjb  (*,b2,j2,b)
         DEALLOCATE  L1jbjb (*,b2,j2,b)
      ENDPARDO  b1, b2, j2, b
#
# ABAB spin combination
#
      PARDO  b1, b2, j2, a 
         ALLOCATE  Libja  (*,b2,j2,a)
         ALLOCATE  L1ibja (*,b2,j2,a)
         DO i
            REQUEST               L2R2_abba (i,b2,j2,a) i
            REQUEST               L2T2_abba (i,b2,j2,a) i
            Libja  (i,b2,j2,a)  = L2R2_abba (i,b2,j2,a)
            L1ibja (i,b2,j2,a)  = L2T2_abba (i,b2,j2,a)
            Libja  (i,b2,j2,a) *= 0.25
            L1ibja (i,b2,j2,a) *= 0.25
         ENDDO i
         DO j1
            REQUEST        T2old_bb (b1,j1,b2,j2) j1
            REQUEST        R2BB (b1,j1,b2,j2) j1
            GET            R1B  (b1,j2)
            GET            R1B  (b2,j1)
            GET            t1b_old (b2,j1)
            GET            t1b_old (b1,j2)
            tbj  (b2,j1) = t1b_old (b2,j1)
            t1bj (b1,j2) = R1B  (b1,j2)
# TAU like  
            tbjbj  (b1,j1,b2,j2)  = tbj (b2,j1) ^ t1b_old (b1,j2)
            tbjbj  (b1,j1,b2,j2) *= -2.0
            tbjbj  (b1,j1,b2,j2) += T2old_bb (b1,j1,b2,j2)
# RTAU like 
            t1bjbj (b1,j1,b2,j2)  = R1B (b2,j1) ^ t1b_old (b1,j2)
            t2qqqq (b1,j1,b2,j2)  = tbj (b2,j1) ^ t1bj (b1,j2)
            t1bjbj (b1,j1,b2,j2) += t2qqqq (b1,j1,b2,j2)
            t1bjbj (b1,j1,b2,j2) *= -2.0
            t1bjbj (b1,j1,b2,j2) += R2BB (b1,j1,b2,j2)
            DO i
               tibja  (i,b1,j1,a)  = tbjbj  (b1,j1,b2,j2) * Libja  (i,b2,j2,a)
               t1ibja (i,b1,j1,a)  = t1bjbj (b1,j1,b2,j2) * L1ibja (i,b2,j2,a)
               tibja  (i,b1,j1,a) += t1ibja (i,b1,j1,a)
               t1ijab (i,j1,a,b1)  = tibja  (i,b1,j1,a)
               t1ijab (i,j1,a,b1) *= 0.25 # 1.0
               PREPARE  Dijab_ab (i,j1,a,b1) += t1ijab (i,j1,a,b1)
            ENDDO i
         ENDDO j1
         DEALLOCATE  Libja  (*,b2,j2,a)
         DEALLOCATE  L1ibja (*,b2,j2,a)
      ENDPARDO  b1, b2, j2, a

      PARDO  b1, a2, i2, a
         ALLOCATE  Liaia  (*,a2,i2,a)
         ALLOCATE  L1iaia (*,a2,i2,a)
         DO i  
            REQUEST               L2R2_aaaa (i,a2,i2,a) i
            REQUEST               L2T2_aaaa (i,a2,i2,a) i
            Liaia  (i,a2,i2,a)  = L2R2_aaaa (i,a2,i2,a)
            L1iaia (i,a2,i2,a)  = L2T2_aaaa (i,a2,i2,a)
            Liaia  (i,a2,i2,a) *= 0.25
            L1iaia (i,a2,i2,a) *= 0.25
         ENDDO i
         DO j1
            REQUEST  T2old_ab (a2,i2,b1,j1) j1
            REQUEST  R2AB (a2,i2,b1,j1) j1
            DO i
               tibja  (i,b1,j1,a)  = Liaia  (i,a2,i2,a) * T2old_ab (a2,i2,b1,j1)
               t1ibja (i,b1,j1,a)  = L1iaia (i,a2,i2,a) * R2AB (a2,i2,b1,j1)
               tibja  (i,b1,j1,a) += t1ibja (i,b1,j1,a)
               t1ijab (i,j1,a,b1)  = tibja  (i,b1,j1,a)
               t1ijab (i,j1,a,b1) *= 0.25 # 1.0
               PREPARE  Dijab_ab (i,j1,a,b1) += t1ijab (i,j1,a,b1)
            ENDDO i
         ENDDO j1
         DEALLOCATE  Liaia  (*,a2,i2,a)
         DEALLOCATE  L1iaia (*,a2,i2,a)
      ENDPARDO  b1, a2, i2, a

      PARDO  a, a2, i2, b1
         ALLOCATE  Ljaib  (*,a2,i2,b1)
         ALLOCATE  L1jaib (*,a2,i2,b1)
         DO j1
            REQUEST                 L2R2_baab (j1,a2,i2,b1) j1
            REQUEST                 L2T2_baab (j1,a2,i2,b1) j1
            Ljaib  (j1,a2,i2,b1)  = L2R2_baab (j1,a2,i2,b1)
            L1jaib (j1,a2,i2,b1)  = L2T2_baab (j1,a2,i2,b1)
            Ljaib  (j1,a2,i2,b1) *= 0.25
            L1jaib (j1,a2,i2,b1) *= 0.25
         ENDDO j1
         DO i
            REQUEST       T2old_aa (a,i,a2,i2) i
            REQUEST       R2AA (a,i,a2,i2) i
            GET           R1A  (a,i2)
            GET           R1A  (a2,i)
            GET           t1a_old (a,i2)
            GET           t1a_old (a2,i)
            tai  (a2,i) = t1a_old (a2,i)
            t1ai (a,i2) = R1A  (a,i2)
# TAU like
            taiai  (a,i,a2,i2)  = tai (a2,i) ^ t1a_old (a,i2)
            taiai  (a,i,a2,i2) *= -2.0
            taiai  (a,i,a2,i2) += T2old_aa  (a,i,a2,i2)
# RTAU like
            t1aiai (a,i,a2,i2)  = R1A (a2,i) ^ t1a_old (a,i2)
            t2pppp (a,i,a2,i2)  = tai (a2,i) ^ t1ai (a,i2)
            t1aiai (a,i,a2,i2) += t2pppp (a,i,a2,i2)
            t1aiai (a,i,a2,i2) *= -2.0
            t1aiai (a,i,a2,i2) += R2AA (a,i,a2,i2)
            DO j1
               tjaib  (j1,a,i,b1)  = taiai  (a,i,a2,i2) * Ljaib  (j1,a2,i2,b1)
               t1jaib (j1,a,i,b1)  = t1aiai (a,i,a2,i2) * L1jaib (j1,a2,i2,b1)
               tjaib  (j1,a,i,b1) += t1jaib (j1,a,i,b1)
               tjaib  (j1,a,i,b1) *= 0.25 # 1.0
               tijab  (i,j1,a,b1)  = tjaib  (j1,a,i,b1)
               PREPARE  Dijab_ab (i,j1,a,b1) += tijab (i,j1,a,b1)
            ENDDO j1
         ENDDO i
         DEALLOCATE  Ljaib  (*,a2,i2,b1)
         DEALLOCATE  L1jaib (*,a2,i2,b1)
      ENDPARDO  a, a2, i2, b1

      PARDO  a, b2, j2, b1
         ALLOCATE  Ljbjb  (*,b2,j2,b1)
         ALLOCATE  L1jbjb (*,b2,j2,b1)
         DO j1
            REQUEST                 L2R2_bbbb (j1,b2,j2,b1) j1
            REQUEST                 L2T2_bbbb (j1,b2,j2,b1) j1
            Ljbjb  (j1,b2,j2,b1)  = L2R2_bbbb (j1,b2,j2,b1)
            L1jbjb (j1,b2,j2,b1)  = L2T2_bbbb (j1,b2,j2,b1)
            Ljbjb  (j1,b2,j2,b1) *= 0.25
            L1jbjb (j1,b2,j2,b1) *= 0.25
         ENDDO j1
         DO i
            REQUEST  T2old_ab (a,i,b2,j2) i
            REQUEST  R2AB (a,i,b2,j2) i
            DO j1
               tjaib  (j1,a,i,b1)  = T2old_ab (a,i,b2,j2) * Ljbjb  (j1,b2,j2,b1)
               t1jaib (j1,a,i,b1)  = R2AB (a,i,b2,j2) * L1jbjb (j1,b2,j2,b1)
               tjaib  (j1,a,i,b1) += t1jaib (j1,a,i,b1)
               tjaib  (j1,a,i,b1) *= 0.25 # 1.0
               tijab  (i,j1,a,b1)  = tjaib  (j1,a,i,b1)
               PREPARE  Dijab_ab (i,j1,a,b1) += tijab (i,j1,a,b1)
            ENDDO j1
         ENDDO i
         DEALLOCATE  Ljbjb  (*,b2,j2,b1)
         DEALLOCATE  L1jbjb (*,b2,j2,b1)
      ENDPARDO  a, b2, j2, b1

      PARDO  a, b2, i2, b1
         ALLOCATE  Liibb  (*,i2,b2,b1)
         ALLOCATE  L1iibb (*,i2,b2,b1)
         DO i
            REQUEST                L2R2_abab (i,b1,i2,b2) i
            REQUEST                L2T2_abab (i,b1,i2,b2) i
            Liibb  (i,i2,b2,b1)  = L2R2_abab (i,b1,i2,b2)
            L1iibb (i,i2,b2,b1)  = L2T2_abab (i,b1,i2,b2)
            Liibb  (i,i2,b2,b1) *= 0.25
            L1iibb (i,i2,b2,b1) *= 0.25
         ENDDO i
         DO j1 
            REQUEST        T2old_ab (a,i2,b2,j1) j1
            REQUEST        R2AB (a,i2,b2,j1) j1
            GET            R1A  (a,i2)
            GET            R1B  (b2,j1)
            GET            t1a_old (a,i2)
            GET            t1b_old (b2,j1)
            tbj  (b2,j1) = t1b_old (b2,j1)
            t1ai (a,i2)  = R1A  (a,i2)
# TAU like
            taibj  (a,i2,b2,j1)  = t1a_old (a,i2) ^ tbj (b2,j1)
            taibj  (a,i2,b2,j1) *= 2.0
            taibj  (a,i2,b2,j1) += T2old_ab   (a,i2,b2,j1)
# RTAU like
            t1aibj (a,i2,b2,j1)  = t1a_old (a,i2) ^ R1B (b2,j1)
            t2ppqq (a,i2,b2,j1)  = t1ai (a,i2) ^ tbj (b2,j1)
            t1aibj (a,i2,b2,j1) += t2ppqq (a,i2,b2,j1)
            t1aibj (a,i2,b2,j1) *= 2.0
            t1aibj (a,i2,b2,j1) += R2AB (a,i2,b2,j1)
            DO i
               tiajb  (i,a,j1,b1)  = taibj  (a,i2,b2,j1) * Liibb  (i,i2,b2,b1)
               t1iajb (i,a,j1,b1)  = t1aibj (a,i2,b2,j1) * L1iibb (i,i2,b2,b1)
               tiajb  (i,a,j1,b1) += t1iajb (i,a,j1,b1)
               tiajb  (i,a,j1,b1) *= 0.25 # 1.0
               t1ijab (i,j1,a,b1)  = tiajb (i,a,j1,b1)
               PREPARE  Dijab_ab (i,j1,a,b1) += t1ijab (i,j1,a,b1)
            ENDDO i
         ENDDO j1
         DEALLOCATE  Liibb  (*,i2,b2,b1)
         DEALLOCATE  L1iibb (*,i2,b2,b1)
      ENDPARDO  a, b2, i2, b1

      PARDO  b1, a2, j2, a
         ALLOCATE  Ljaja  (*,a2,j2,a)
         ALLOCATE  L1jaja (*,a2,j2,a)
         DO j1
            REQUEST                L2R2_baba (j1,a,j2,a2) j1
            REQUEST                L2T2_baba (j1,a,j2,a2) j1
            Ljaja  (j1,a2,j2,a)  = L2R2_baba (j1,a,j2,a2)
            L1jaja (j1,a2,j2,a)  = L2T2_baba (j1,a,j2,a2)
            Ljaja  (j1,a2,j2,a) *= 0.25
            L1jaja (j1,a2,j2,a) *= 0.25
         ENDDO j1
         DO i
            REQUEST        T2old_ab (a2,i,b1,j2) i
            REQUEST        R2AB (a2,i,b1,j2) i
            GET            R1A  (a2,i)
            GET            R1B  (b1,j2)
            GET            t1a_old (a2,i)
            GET            t1b_old (b1,j2)
            tbj  (b1,j2) = t1b_old (b1,j2)
            t1ai (a2,i)  = R1A  (a2,i)
# TAU like
            taibj  (a2,i,b1,j2)  = t1a_old (a2,i) ^ tbj (b1,j2)
            taibj  (a2,i,b1,j2) *= 2.0
            taibj  (a2,i,b1,j2) += T2old_ab (a2,i,b1,j2)
# RTAU like
            t1aibj (a2,i,b1,j2)  = t1a_old (a2,i) ^ R1B (b1,j2)
            t2ppqq (a2,i,b1,j2)  = t1ai (a2,i) ^ tbj (b1,j2)
            t1aibj (a2,i,b1,j2) += t2ppqq (a2,i,b1,j2)
            t1aibj (a2,i,b1,j2) *= 2.0
            t1aibj (a2,i,b1,j2) += R2AB (a2,i,b1,j2)
            DO j1
               tqpqp  (j1,i,b1,a)  = taibj  (a2,i,b1,j2) * Ljaja  (j1,a2,j2,a)
               t1qpqp (j1,i,b1,a)  = t1aibj (a2,i,b1,j2) * L1jaja (j1,a2,j2,a)
               tqpqp  (j1,i,b1,a) += t1qpqp (j1,i,b1,a)
               tqpqp  (j1,i,b1,a) *= 0.25 # 1.0
               t1ijab (i,j1,a,b1)  = tqpqp  (j1,i,b1,a)
               PREPARE  Dijab_ab (i,j1,a,b1) += t1ijab (i,j1,a,b1)
            ENDDO j1
         ENDDO i
         DEALLOCATE  Ljaja  (*,a2,j2,a)
         DEALLOCATE  L1jaja (*,a2,j2,a)
      ENDPARDO  b1, a2, j2, a
#
# BBBB spin combination
#
#
#
#          ...ready!
#     
#     
      ENDPROC  DIJAB_EOM
#-------------------------------------------------------------------------




# -----------------------------------------------------------------------------
#
# Expression programmed: Equivalent to gamma2.  
#
# D^{ab}_{cd} = 1/16 P_+(ab,cd) \Tau^{ab}_{ij} \lambda^{ij}_{cd} 
# 4* D is stored to be consistent with acess 
#
# -----------------------------------------------------------------------------
#
      PROC DABCD
#     ------------- 
#
      PARDO a, a2, a1, a3 
#
            Dabcd_aa(a,a1,a2,a3)  = 0.0  
            DXabcd_aa(a2,a3,a,a1) = 0.0  
#
            DO i 
            DO i1 
#
              #REQUEST Tau_aa(a,i,a1,i1)    i1  
              #REQUEST A2old_aa(i,a2,i1,a3) a3  
              #Taaii(a,a1,i,i1)  = Tau_aa(a,i,a1,i1)
              #Tiiaa(i,i1,a2,a3) = A2old_aa(i,a2,i1,a3) 
#             #Taaaa(a,a1,a2,a3)      = Tau_aa(a,i,a1,i1)*A2old_aa(i,a2,i1,a3)
              #Taaaa(a,a1,a2,a3)      = Taaii(a,a1,i,i1)*Tiiaa(i,i1,a2,a3)
#
               REQUEST                  LTau_aa(a,a1,i,i1) a 
               REQUEST                  LA2old_aa(i,i1,a2,a3) a2 
#
               REQUEST                  RTAU_aa(a,i,a1,i1) a
               REQUEST                  L2AA   (i,a2,i1,a3) a2

               Taaaa(a,a1,a2,a3)      = LTau_aa(a,a1,i,i1)*LA2old_aa(i,i1,a2,a3)
               Tpppp(a,a1,a2,a3)     = RTAU_aa (a,i,a1,i1) * L2AA (i,a2,i1,a3)
               Taaaa(a,a1,a2,a3)    += Tpppp(a,a1,a2,a3)

               Taaaa(a,a1,a2,a3)     *= 0.25
               T1aaaa(a2,a3,a,a1)     = Taaaa(a,a1,a2,a3)
#
                Dabcd_aa(a,a1,a2,a3) += Taaaa(a,a1,a2,a3)
               DXabcd_aa(a2,a3,a,a1) += T1aaaa(a2,a3,a,a1) 
#
            ENDDO i1 
            ENDDO i 
#
# Compute contributions to one-particle intermediates 
# --------------------------------------------------- 
#
#           Second-term of Iia_aa 
#           --------------------- 
#
            t2aaaa(a1,a2,a3,a) = Dabcd_aa(a,a1,a2,a3) 
            t3aaaa(a1,a,a3,a2) = DXabcd_aa(a2,a3,a,a1) 
            DO i
#
               REQUEST VSaaai(a3,a1,a2,i) i
               REQUEST VSaaai(a1,a3,a,i)  i  
#
               Tiaaa(i,a1,a2,a3)  = VSaaai(a3,a1,a2,i)
#
              #Tia(i,a)           = Dabcd_aa(a,a1,a2,a3)*Tiaaa(a1,a2,a3,i)
               Tia(i,a)           = Tiaaa(i,a1,a2,a3)*t2aaaa(a1,a2,a3,a)
               Tia(i,a)          *= -0.5  
               PUT Iia_aa(i,a)   += Tia(i,a)
#
               T1iaaa(i,a1,a,a3)   = VSaaai(a1,a3,a,i)
#
              #Tia(i,a2)          = DXabcd_aa(a2,a3,a,a1)*Tiaaa(a3,a,a1,i)
               Tia(i,a2)          = T1iaaa(i,a1,a,a3)*t3aaaa(a1,a,a3,a2)  
               Tia(i,a2)         *=-0.5  
               PUT Iia_aa(i,a2)  += Tia(i,a2)
#
            ENDDO i
#
# Done contributions to one-particle intermediates 
# ------------------------------------------------ 
#
      ENDPARDO a, a2, a1, a3 
#
# -----------------------------------------------------------------------------
#
# Expression programmed: 
#
# D^{AB}_{CD} = 1/16 P_+(AB,CD) \Tau^{AB}_{IJ} \lambda^{IJ}_{CD} 
# 4* D is stored to be consistent with acess 
#
# -----------------------------------------------------------------------------
# 
      PARDO b, b2, b1, b3 
#
            Dabcd_bb(b,b1,b2,b3)  = 0.0  
            DXabcd_bb(b2,b3,b,b1) = 0.0  
#
            DO j 
            DO j1 
#
              #REQUEST Tau_bb(b,j,b1,j1)    j1  
              #REQUEST A2old_bb(j,b2,j1,b3) b3  
              #Tbbjj(b,b1,j,j1)  = Tau_bb(b,j,b1,j1)
              #Tjjbb(j,j1,b2,b3) = A2old_bb(j,b2,j1,b3) 
#             #Tbbbb(b,b1,b2,b3)      = Tau_bb(b,j,b1,j1)*A2old_bb(j,b2,j1,b3)
              #Tbbbb(b,b1,b2,b3)      = Tbbjj(b,b1,j,j1)*Tjjbb(j,j1,b2,b3)
#
               REQUEST                  LTau_bb(b,b1,j,j1) b 
               REQUEST                  LA2old_bb(j,j1,b2,b3) b2 
#
               REQUEST                  RTAU_bb(b,j,b1,j1) b
               REQUEST                  L2BB   (j,b2,j1,b3) b2

               Tbbbb(b,b1,b2,b3)      = LTau_bb(b,b1,j,j1)*LA2old_bb(j,j1,b2,b3)
               Tqqqq(b,b1,b2,b3)     = RTAU_bb (b,j,b1,j1) * L2BB (j,b2,j1,b3)
               Tbbbb(b,b1,b2,b3)    += Tqqqq(b,b1,b2,b3)

               Tbbbb(b,b1,b2,b3)     *= 0.25
               T1bbbb(b2,b3,b,b1)     = Tbbbb(b,b1,b2,b3)
#
                Dabcd_bb(b,b1,b2,b3) += Tbbbb(b,b1,b2,b3)
               DXabcd_bb(b2,b3,b,b1) += T1bbbb(b2,b3,b,b1) 
#
            ENDDO j1 
            ENDDO j 
#
# Compute contributions to one-particle intermediates 
# --------------------------------------------------- 
#
#           Second-term of Iia_bb 
#           --------------------- 
#
            t2bbbb(b1,b2,b3,b) = Dabcd_bb(b,b1,b2,b3) 
            t3bbbb(b1,b,b3,b2) = DXabcd_bb(b2,b3,b,b1) 
            DO j
#
               REQUEST VSbbbj(b3,b1,b2,j) j
               REQUEST VSbbbj(b1,b3,b,j)  j  
#
               Tjbbb(j,b1,b2,b3)  = VSbbbj(b3,b1,b2,j)
#
              #Tjb(j,b)           = Dabcd_bb(b,b1,b2,b3)*Tqqqq(b1,b2,b3,j)
               Tjb(j,b)           = Tjbbb(j,b1,b2,b3)*t2bbbb(b1,b2,b3,b)
               Tjb(j,b)          *= -0.5  
               PUT Iia_bb(j,b)   += Tjb(j,b)
#
               T1jbbb(j,b1,b,b3)   = VSbbbj(b1,b3,b,j)
#
              #Tjb(j,b2)          = DXabcd_bb(b2,b3,b,b1)*Tqqqq(b3,b,b1,j)
               Tjb(j,b2)          = T1jbbb(j,b1,b,b3)*t3bbbb(b1,b,b3,b2)  
               Tjb(j,b2)         *=-0.5  
               PUT Iia_bb(j,b2)  += Tjb(j,b2)
#
            ENDDO j
#
# Done contributions to one-particle intermediates 
# ------------------------------------------------ 
#
      ENDPARDO b, b2, b1, b3 
#
# -----------------------------------------------------------------------------
#
# Expression programmed: 
#
# D^{aB}_{cD} = 1/8 P_+(aB,cD) \Tau^{aB}_{iJ} \lambda^{iJ}_{cD} 
# 4* D is stored to be consistent with acess 
#
# -----------------------------------------------------------------------------
# 
      create Rbj 
      execute sip_barrier 
      PARDO a, a1, b, b1 
#
            Dabcd_ab(a,b,a1,b1)  = 0.0  
            DXabcd_ab(a1,b1,a,b) = 0.0 
#
            DO i 
            DO j 
#
              #REQUEST Tau_ab(a,i,b,j)     j  
              #REQUEST A2old_ab(i,a1,j,b1) b1  
              #Tabij(a,b,i,j)        = Tau_ab(a,i,b,j) 
              #Tijab(i,j,a1,b1)      = A2old_ab(i,a1,j,b1) 
#             #Tabab(a,b,a1,b1)      = Tau_ab(a,i,b,j)*A2old_ab(i,a1,j,b1) 
              #Tabab(a,b,a1,b1)      = Tabij(a,b,i,j)*Tijab(i,j,a1,b1) 
#
               REQUEST LTau_ab(a,b,i,j) a 
               REQUEST LA2old_ab(i,j,a1,b1) i 

               REQUEST RTAU_ab (a,i,b,j) j
               REQUEST L2AB    (i,a1,j,b1) j

               Tabab(a,b,a1,b1)      = LTau_ab(a,b,i,j)*LA2old_ab(i,j,a1,b1)

               Tpqpq(a,b,a1,b1)      = RTAU_ab(a,i,b,j)*L2AB (i,a1,j,b1)

               Tabab(a,b,a1,b1)     += Tpqpq(a,b,a1,b1)

               Tabab(a,b,a1,b1)     *= 0.5  
               T1abab(a1,b1,a,b)     = Tabab(a,b,a1,b1)  
#
                Dabcd_ab(a,b,a1,b1) += Tabab(a,b,a1,b1)  
               DXabcd_ab(a1,b1,a,b) += T1abab(a1,b1,a,b)  
#
            ENDDO j 
            ENDDO i 
#
# Compute contributions to one-particle intermediates 
# --------------------------------------------------- 
#
#           Second-term of Iia_aa 
#           --------------------- 
#
            tqqpp(b,b1,a1,a) = Dabcd_ab(a,b,a1,b1) 
            t1qqpp(b,b1,a,a1)= DXabcd_ab(a1,b1,a,b) 

            DO i
#
               REQUEST Vbbai(b1,b,a1,i) i 
               REQUEST Vbbai(b,b1,a,i)  i 
#
               tpqqp(i,b,b1,a1)  = Vbbai(b1,b,a1,i) 
              #Tia(i,a)          = Dabcd_ab(a,b,a1,b1)*Vbbai(b1,b,a1,i) 
               Tia(i,a)          = tpqqp(i,b,b1,a1)*tqqpp(b,b1,a1,a)  
               Tia(i,a)         *= -1.0
               PUT Iia_aa(i,a)  += Tia(i,a)
#
               tpqqp(i,b,b1,a)   = Vbbai(b,b1,a,i) 
              #Tia(i,a1)         = DXabcd_ab(a1,b1,a,b)*Vbbai(b,b1,a,i)
               Tia(i,a1)         = tpqqp(i,b,b1,a)*t1qqpp(b,b1,a,a1)  
               Tia(i,a1)        *= -1.0
               PUT Iia_aa(i,a1) += Tia(i,a1)
#
            ENDDO i
#
#           Second-term of Iia_bb 
#           --------------------- 
#
            tqppq(b,a1,a,b1)  = Dabcd_ab(a,b,a1,b1) 
            t1qppq(b1,a,a1,b) = Dabcd_ab(a,b,a1,b1) 
#
            DO j
#
               REQUEST Vaabj(a1,a,b1,j) j
               REQUEST Vaabj(a,a1,b,j) j
#
              #Tjb(j,b)          = Dabcd_ab(a,b,a1,b1)*Vaabj(a1,a,b1,j)
               Tbj(b,j)          = tqppq(b,a1,a,b1)*Vaabj(a1,a,b1,j)  
               Tbj(b,j)         *= -1.0
               PUT Rbj(b,j)  += Tbj(b,j)
#
              #Tjb(j,b1)         = DXabcd_ab(a1,b1,a,b)*Vaabj(a,a1,b,j)
               Tbj(b1,j)         = t1qppq(b1,a,a1,b)*Vaabj(a,a1,b,j)
               Tbj(b1,j)        *= -1.0
               PUT Rbj(b1,j)  += Tbj(b1,j)
#
            ENDDO j
#
# Done contributions to one-particle intermediates 
# ------------------------------------------------ 
#
      ENDPARDO a, a1, b, b1 
      execute sip_barrier 
      PARDO b, j 
            GET                Rbj(b,j) 
            tjb(j,b)         = Rbj(b,j) 
            PUT Iia_bb(j,b) += Tjb(j,b) 
      ENDPARDO b, j 
      execute sip_barrier 
      delete Rbj 
#
      ENDPROC DABCD
# ---------------------------------------------------------------------------- 






# ---------------------------------------------------------------------------- 
#
# Expression programmed: 
#
# D^{ij}_{kl} = 1/16 P_+(ij,kl) \lambda^{ij}_{ef} \tau^{ef}_{kl} 
# Note that 4* result is kept to be consistent with aces. 
#
# Equivalent to gamma3 
#
# ---------------------------------------------------------------------------- 
#
      PROC DIJKL
#     -------------- 
#
      PARDO a, a1, i, i1  
#
            REQUEST A2old_aa(i,a,i1,a1) a1  
            Tiiaa(i,i1,a,a1) = A2old_aa(i,a,i1,a1)  
#
            DO i2 
            DO i3 
#
               REQUEST Tau_aa(a,i2,a1,i3) i3  
               Taaii(a,a1,i2,i3) = Tau_aa(a,i2,a1,i3) 
#
#              Tiiii(i,i1,i2,i3)           = A2old_aa(i,a,i1,a1)*Tau_aa(a,i2,a1,i3) 
               Tiiii(i,i1,i2,i3)           = Tiiaa(i,i1,a,a1)*Taaii(a,a1,i2,i3)  
#
               Tiiii(i,i1,i2,i3)          *= 0.25  
               T1iiii(i2,i3,i,i1)          = Tiiii(i,i1,i2,i3) 
               PREPARE Dijkl_aa(i,i1,i2,i3)   += Tiiii(i,i1,i2,i3) 
               PREPARE Dijkl_aa(i2,i3,i,i1)   += T1iiii(i2,i3,i,i1) 
#
               T1iiii(i2,i3,i,i1)         *= 2.0   
               PREPARE Vijmn_aaaa(i2,i3,i,i1) += T1iiii(i2,i3,i,i1)  
#
            ENDDO i3 
            ENDDO i2 
#
      ENDPARDO a, a1, i, i1  
#
# ---------------------------------------------------------------------------- 
#
# Expression programmed: 
#
# D^{IJ}_{KL} = 1/16 P_+(IJ,KL) \lambda^{IJ}_{EF} \tau^{EF}_{KL} 
# Note that 4* result is kept to be consistent with aces. 
#
# ---------------------------------------------------------------------------- 
#
      PARDO b, b1, j, j1   
#
            REQUEST A2old_bb(j,b,j1,b1) b1  
            Tjjbb(j,j1,b,b1) = A2old_bb(j,b,j1,b1) 
#
            DO j2 
            DO j3 
#
               REQUEST Tau_bb(b,j2,b1,j3) j3  
               Tbbjj(b,b1,j2,j3) = Tau_bb(b,j2,b1,j3) 
#
#              Tjjjj(j,j1,j2,j3)           = A2old_bb(j,b,j1,b1)*Tau_bb(b,j2,b1,j3) 
               Tjjjj(j,j1,j2,j3)           = Tjjbb(j,j1,b,b1)*Tbbjj(b,b1,j2,j3)  
#
               Tjjjj(j,j1,j2,j3)          *= 0.25  
               T1jjjj(j2,j3,j,j1)          = Tjjjj(j,j1,j2,j3) 
               PREPARE Dijkl_bb(j,j1,j2,j3)   += Tjjjj(j,j1,j2,j3) 
               PREPARE Dijkl_bb(j2,j3,j,j1)   += T1jjjj(j2,j3,j,j1) 
#
               T1jjjj(j2,j3,j,j1)         *= 2.0   
               PREPARE Vijmn_bbbb(j2,j3,j,j1) += T1jjjj(j2,j3,j,j1) 
#
            ENDDO j3 
            ENDDO j2 
#
      ENDPARDO b, b1, j, j1  
#
# ---------------------------------------------------------------------------- 
#
# Expression programmed: 
#
# D^{iJ}_{kL} = 1/8 P_+(iJ,kL) \lambda^{iJ}_{eF} \tau^{eF}_{kL} 
#
# ---------------------------------------------------------------------------- 
#
      PARDO a, b, i, j  
#
            REQUEST A2old_ab(i,a,j,b) b  
            Tijab(i,j,a,b) = A2old_ab(i,a,j,b) 
#
            DO i1 
            DO j1 
#
               REQUEST Tau_ab(a,i1,b,j1) j1  
               Tabij(a,b,i1,j1) = Tau_ab(a,i1,b,j1) 
#
#              Tijij(i,j,i1,j1)           = A2old_ab(i,a,j,b)*Tau_ab(a,i1,b,j1) 
               Tijij(i,j,i1,j1)           = Tijab(i,j,a,b)*Tabij(a,b,i1,j1)   
#
               Tijij(i,j,i1,j1)          *= 0.5  
               T1ijij(i1,j1,i,j)          = Tijij(i,j,i1,j1) 
               PREPARE Dijkl_ab(i,j,i1,j1)   += Tijij(i,j,i1,j1) 
               PREPARE Dijkl_ab(i1,j1,i,j)   += T1ijij(i1,j1,i,j) 
#
               T1ijij(i1,j1,i,j)         *= 2.0  
               PREPARE Vijmn_abab(i1,j1,i,j) += T1ijij(i1,j1,i,j) 
#
            ENDDO j1 
            ENDDO i1 
#
      ENDPARDO a, b, i, j  

      ENDPROC  DIJKL
#
# Remove density component
# ------------------------ 
#
#----------------------------------------------------------------------------
#
#     --------------
      PROC DIJKL_EOM
#     --------------
#
#
#        kl          ef    e  f    e  f    kl
#     4 G   = 1/2 ( r   + r  t  + t  r  ) l
#        ij          ij    i  j    i  j    ef
#
#
      PARDO  i2, a2, a3, i
         ALLOCATE  Liiaa (i,*,a2,a3)
         DO i1
            REQUEST               L2AA (i,a2,i1,a3) i1
            Liiaa (i,i1,a2,a3)  = L2AA (i,a2,i1,a3)
            Liiaa (i,i1,a2,a3) *= 0.25
         ENDDO i1
         DO i3
            REQUEST                RTAU_aa (a2,i2,a3,i3) i3
            taaii  (a2,a3,i2,i3) = RTAU_aa (a2,i2,a3,i3)
            DO i1
               tiiii  (i,i1,i2,i3)  = Liiaa (i,i1,a2,a3) * taaii (a2,a3,i2,i3)
               t1iiii (i2,i3,i,i1)  = tiiii (i,i1,i2,i3)
               PREPARE  Dijkl_aa (i,i1,i2,i3) += tiiii  (i,i1,i2,i3)
               PREPARE  Dijkl_aa (i2,i3,i,i1) += t1iiii (i2,i3,i,i1)
            ENDDO i1
         ENDDO i3
         DEALLOCATE  Liiaa (i,*,a2,a3)
      ENDPARDO  i2, a2, a3, i

      PARDO  j2, b2, b3, j
         ALLOCATE  Ljjbb (j,*,b2,b3)
         DO j1
            REQUEST               L2BB (j,b2,j1,b3) j1
            Ljjbb (j,j1,b2,b3)  = L2BB (j,b2,j1,b3)
            Ljjbb (j,j1,b2,b3) *= 0.25
         ENDDO j1
         DO j3
            REQUEST                RTAU_bb (b2,j2,b3,j3) j3
            tbbjj  (b2,b3,j2,j3) = RTAU_bb (b2,j2,b3,j3)
            DO j1
               tjjjj  (j,j1,j2,j3)  = Ljjbb (j,j1,b2,b3) * tbbjj (b2,b3,j2,j3)
               t1jjjj (j2,j3,j,j1)  = tjjjj (j,j1,j2,j3)
               PREPARE  Dijkl_bb (j,j1,j2,j3) += tjjjj  (j,j1,j2,j3)
               PREPARE  Dijkl_bb (j2,j3,j,j1) += t1jjjj (j2,j3,j,j1)
            ENDDO j1
         ENDDO j3
         DEALLOCATE  Ljjbb (j,*,b2,b3)
      ENDPARDO  j2, b2, b3, j

      PARDO  j3, a2, b3, i
         ALLOCATE  Lijab (i,*,a2,b3)
         DO j1
            REQUEST               L2AB (i,a2,j1,b3) j1
            Lijab (i,j1,a2,b3)  = L2AB (i,a2,j1,b3) 
            Lijab (i,j1,a2,b3) *= 0.5
         ENDDO j1 
         DO i2
            REQUEST               RTAU_ab (a2,i2,b3,j3) i2
            tabij (a2,b3,i2,j3) = RTAU_ab (a2,i2,b3,j3)
            DO j1
               tijij  (i,j1,i2,j3) = Lijab (i,j1,a2,b3) * tabij (a2,b3,i2,j3)
               t1ijij (i2,j3,i,j1) = tijij (i,j1,i2,j3)
               PREPARE  Dijkl_ab (i,j1,i2,j3) += tijij  (i,j1,i2,j3)
               PREPARE  Dijkl_ab (i2,j3,i,j1) += t1ijij (i2,j3,i,j1)
            ENDDO j1
         ENDDO i2
         DEALLOCATE  Lijab (i,*,a2,b3)
      ENDPARDO  j3, a2, b3, i
#
#
#     ...ready!
#
#
      ENDPROC  DIJKL_EOM
#----------------------------------------------------------------------------




# ---------------------------------------------------------------------------- 
#
# Equivalent to gamma4*4 --> factor of 4 to match aces  
#
# ----------------------------------------------------------------------------
#
      PROC DIBJA
#     -------------- 
#
      PARDO a, a1, i, i1 
#
            GET                              t1a_old(a,i) 
            GET                              a1a_old(i1,a1) 
# 
            Tiaia(i,a1,i1,a)               = t1a_old(a,i)^a1a_old(i1,a1)    
            Tiaia(i,a1,i1,a)              *= 0.5     
            TAiaia(i1,a,i,a1)              = Tiaia(i,a1,i1,a)  
#
            PREPARE Dibja_aaaa(i,a1,i1,a) += Tiaia(i,a1,i1,a)  
            PREPARE Dibja_aaaa(i1,a,i,a1) += TAiaia(i1,a,i,a1)  
#
      ENDPARDO a, a1, i, i1 
#
      PARDO a, i, a2, i2  
#
            REQUEST     T2old_aa(a,i,a2,i2) i2  
            GET         t1a_old(a,i2) 
            GET         t1a_old(a2,i) 
            tai(a,i2) = t1a_old(a,i2) 
#
            DO i1  
#
               DO a1 
#
                  REQUEST                          A2old_aa(i1,a1,i2,a2) a2   
#
                  Tiaai(i2,a2,a,i)               = T2old_aa(a,i,a2,i2) 
                  T1iaai(i1,a1,a,i)              = A2old_aa(i1,a1,i2,a2)*Tiaai(i2,a2,a,i)  
                  Tiaia(i,a1,i1,a)               = T1iaai(i1,a1,a,i)  
                  Tiaia(i,a1,i1,a)              *= 0.5   
                  TAiaia(i1,a,i,a1)              = Tiaia(i,a1,i1,a) 
                  PREPARE Vibja_aaaa(i,a1,i1,a) += Tiaia(i,a1,i1,a) 
                  PREPARE Dibja_aaaa(i,a1,i1,a) += Tiaia(i,a1,i1,a)  
                  PREPARE Dibja_aaaa(i1,a,i,a1) += TAiaia(i1,a,i,a1)  
#
                  T1iaia(i2,a2,i,a)             = t1a_old(a2,i)^tai(a,i2)
#
#                 T1iaia(i,a1,i1,a)             = A2old_aa(i1,a1,i2,a2)*Taiai(a2,i,a,i2) 
                  T3iaia(i1,a1,i,a)             = A2old_aa(i1,a1,i2,a2)*T1iaia(i2,a2,i,a) 
                  Tiaia(i,a1,i1,a)              = T3iaia(i1,a1,i,a)  
                  Tiaia(i,a1,i1,a)             *= -0.5 
                  TAiaia(i1,a,i,a1)             = Tiaia(i,a1,i1,a)  
#
                  PREPARE Dibja_aaaa(i,a1,i1,a) += Tiaia(i,a1,i1,a)  
                  PREPARE Dibja_aaaa(i1,a,i,a1) += TAiaia(i1,a,i,a1)  
#
               ENDDO a1 
            ENDDO i1 
#
      ENDPARDO a, i, a2, i2  
#
      PARDO a, i, b, j  
#
            REQUEST T2old_ab(a,i,b,j)j  
#
            DO i1 
            DO a1 
#
               REQUEST                          A2old_ab(i1,a1,j,b) b   
#
               Tjbia(j,b,i,a)                 = T2old_ab(a,i,b,j) 
               T2iaia(i1,a1,i,a)              = A2old_ab(i1,a1,j,b)*Tjbia(j,b,i,a)  
               Tiaia(i,a1,i1,a)               = T2iaia(i1,a1,i,a) 
               Tiaia(i,a1,i1,a)              *= 0.5   
               TAiaia(i1,a,i,a1)              = Tiaia(i,a1,i1,a)  
#
               PREPARE Vibja_aaaa(i,a1,i1,a) += Tiaia(i,a1,i1,a) 
               PREPARE Dibja_aaaa(i,a1,i1,a) += Tiaia(i,a1,i1,a)  
               PREPARE Dibja_aaaa(i1,a,i,a1) += TAiaia(i1,a,i,a1)  
#
            ENDDO a1  
            ENDDO i1 
#
      ENDPARDO a, i, b, j  



# The D(iB,jA) block of the two-particle density matrix is calculated. 
#
      PARDO i, b1, j, a  
#
            REQUEST T2old_ab(a,i,b1,j) j  
#
            DO i1 
            DO b 
#
               REQUEST                          A2old_ab(i1,a,j,b) j 
#
               Tibib(i1,b1,i,b)               = A2old_ab(i1,a,j,b)*T2old_ab(a,i,b1,j) 
               Tibib(i1,b1,i,b)              *= 0.5   
#
               TAibib(i,b,i1,b1)              = Tibib(i1,b1,i,b)  
#
               PREPARE Vibja_abab(i,b,i1,b1) += TAibib(i,b,i1,b1) 
               PREPARE Dibja_abab(i1,b1,i,b) += Tibib(i1,b1,i,b) 
               PREPARE Dibja_abab(i,b,i1,b1) += TAibib(i,b,i1,b1) 
#
            ENDDO b 
            ENDDO i1 
#
      ENDPARDO i, b1, j, a  
#
      PARDO i1, b, j, a 
#
            REQUEST A2old_ab(i1,a,j,b) j 
#
            DO i 
#
               GET t1a_old(a,i) 
#
               DO b1 
#
                  GET                              t1b_old(b1,j) 
#
                  Taibj(a,i,b1,j)                = t1a_old(a,i)^t1b_old(b1,j)
                  Tibib(i1,b1,i,b)               = A2old_ab(i1,a,j,b)*Taibj(a,i,b1,j) 
                  Tibib(i1,b1,i,b)              *= 0.5   
#
                  T2ibib(i,b,i1,b1)              = Tibib(i1,b1,i,b)  
                  TAibib(i,b,i1,b1)              = T2ibib(i,b,i1,b1)  
#
                  PREPARE Dibja_abab(i1,b1,i,b) += Tibib(i1,b1,i,b) 
                  PREPARE Dibja_abab(i,b,i1,b1) += TAibib(i,b,i1,b1) 
#
               ENDDO b1 
            ENDDO i 
#
      ENDPARDO i1, b, j, a  

#
# The D(Ib,Ja) block of the two-particle density matrix is calculated. 
#
#
      PARDO a, j1, b, i  
#
            REQUEST T2old_ab(a,i,b,j1) j1  
#
            DO j  
            DO a1 
#
               REQUEST                          A2old_ab(i,a1,j,b) b   
#
#              T1jaja(j,a,j1,a1)              = A2old_ab(i,a1,j,b)*T2old_ab(a,i,b,j1) 
               Tjaib(j,a1,i,b)                = A2old_ab(i,a1,j,b) 
               Tibaj(i,b,a,j1)                = T2old_ab(a,i,b,j1) 
               Tjaaj(j,a1,a,j1)               = Tjaib(j,a1,i,b)*Tibaj(i,b,a,j1) 
               Tjaja(j,a,j1,a1)               = Tjaaj(j,a1,a,j1) 
               Tjaja(j,a,j1,a1)              *= 0.5   
#
               TAjaja(j1,a1,j,a)              = Tjaja(j,a,j1,a1)  
#
               PREPARE Vibja_baba(j1,a1,j,a) += TAjaja(j1,a1,j,a) 
               PREPARE Dibja_baba(j,a,j1,a1) += Tjaja(j,a,j1,a1) 
               PREPARE Dibja_baba(j1,a1,j,a) += TAjaja(j1,a1,j,a)  
#
            ENDDO a1  
            ENDDO j  
#
      ENDPARDO a, j1, b, i  
#
      PARDO i, a1, j, b  
#
            REQUEST A2old_ab(i,a1,j,b) b   
#
            DO j1  
#
               GET t1b_old(b,j1) 
#
               DO a 
#
                  GET                             t1a_old(a,i) 
#
                  Tbjai(b,j1,a,i)               = t1b_old(b,j1)^t1a_old(a,i)
                  Tjaja(j,a,j1,a1)              = A2old_ab(i,a1,j,b)*Tbjai(b,j1,a,i) 
                  Tjaja(j,a,j1,a1)             *= 0.5   
#
                  TAjaja(j1,a1,j,a)             = Tjaja(j,a,j1,a1)  
#
                  PREPARE Dibja_baba(j,a,j1,a1) += Tjaja(j,a,j1,a1) 
                  PREPARE Dibja_baba(j1,a1,j,a) += TAjaja(j1,a1,j,a)  
#
               ENDDO a 
#
            ENDDO j1 
#
      ENDPARDO i, a1, j, b  
#
#
      PARDO b, b1, j, j1
#
            GET                              t1b_old(b,j)
            GET                              a1b_old(j1,b1)
#
            Tjbjb(j,b1,j1,b)               = t1b_old(b,j)^a1b_old(j1,b1)
            Tjbjb(j,b1,j1,b)              *= 0.5
            TAjbjb(j1,b,j,b1)              = Tjbjb(j,b1,j1,b)
#
            PREPARE Dibja_bbbb(j,b1,j1,b) += Tjbjb(j,b1,j1,b)
            PREPARE Dibja_bbbb(j1,b,j,b1) += TAjbjb(j1,b,j,b1)
#
      ENDPARDO b, b1, j, j1
#
      PARDO b, j, b2, j2  
#
            REQUEST     T2old_bb(b,j,b2,j2) j2 
            GET         t1b_old(b,j2)
            GET         t1b_old(b2,j)
            tbj(b,j2) = t1b_old(b,j2)
#
            DO j1
            DO b1
#
               REQUEST                          A2old_bb(j1,b1,j2,b2) j2 
#
#              T1jbjb(j,b1,j1,b)              = A2old_bb(j1,b1,j2,b2)*T2old_bb(b,j,b2,j2)
               T1jbjb(j2,b2,j,b)              = T2old_bb(b,j,b2,j2) 
               T2jbjb(j1,b1,j,b)              = A2old_bb(j1,b1,j2,b2)*T1jbjb(j2,b2,j,b)
               T1jbjb(j,b1,j1,b)              = T2jbjb(j1,b1,j,b) 
               T1jbjb(j,b1,j1,b)             *= 0.5
               TAjbjb(j1,b,j,b1)              = T1jbjb(j,b1,j1,b) 
#
               PREPARE Vibja_bbbb(j,b1,j1,b) += T1jbjb(j,b1,j1,b)
               PREPARE Dibja_bbbb(j,b1,j1,b) += T1jbjb(j,b1,j1,b)
               PREPARE Dibja_bbbb(j1,b,j,b1) += TAjbjb(j1,b,j,b1)
#
               T2jbjb(j2,b2,j,b)              = t1b_old(b2,j)^tbj(b,j2)
#              T1jbjb(j,b1,j1,b)              = A2old_bb(j1,b1,j2,b2)*Tbjbj(b2,j,b,j2)
               T3jbjb(j1,b1,j,b)              = A2old_bb(j1,b1,j2,b2)*T2jbjb(j2,b2,j,b)
               T1jbjb(j,b1,j1,b)              = T3jbjb(j1,b1,j,b) 
#
               T1jbjb(j,b1,j1,b)             *= -0.5
               TAjbjb(j1,b,j,b1)              = T1jbjb(j,b1,j1,b)
#
               PREPARE Dibja_bbbb(j,b1,j1,b) += T1jbjb(j,b1,j1,b)
               PREPARE Dibja_bbbb(j1,b,j,b1) += TAjbjb(j1,b,j,b1)
#
            ENDDO b1
            ENDDO j1
#
      ENDPARDO b, j, b2, j2  
#
      PARDO j, b, i, a    
#
            REQUEST T2old_ab(a,i,b,j) j 
#
            DO j1  
            DO b1 
#
               REQUEST                          A2old_ab(i,a,j1,b1) b1 
#
               Tjbia(j,b,i,a)                 = T2old_ab(a,i,b,j)  
               T2jbjb(j,b,j1,b1)              = Tjbia(j,b,i,a)*A2old_ab(i,a,j1,b1)  
               Tjbjb(j,b1,j1,b)               = T2jbjb(j,b,j1,b1) 
               Tjbjb(j,b1,j1,b)              *= 0.5 
               TAjbjb(j1,b,j,b1)              = Tjbjb(j,b1,j1,b)
#
               PREPARE Vibja_bbbb(j,b1,j1,b) += Tjbjb(j,b1,j1,b)
               PREPARE Dibja_bbbb(j,b1,j1,b) += Tjbjb(j,b1,j1,b)
               PREPARE Dibja_bbbb(j1,b,j,b1) += TAjbjb(j1,b,j,b1)
#
            ENDDO b1  
            ENDDO j1  
#
      ENDPARDO j, b, i, a  
#
      PARDO i, a, b, j 
#
            GET a1b_old(j,b) 
            GET t1a_old(a,i) 
            GET a1a_old(i,a) 
            GET t1b_old(b,j) 
#
            Tiajb(i,a,j,b)               = t1a_old(a,i)^a1b_old(j,b) 
            T1iajb(i,a,j,b)              = a1a_old(i,a)^t1b_old(b,j) 
            Tiajb(i,a,j,b)              += T1iajb(i,a,j,b) 
#
            Tiajb(i,a,j,b)              *= 0.5 
            Tibja(i,b,j,a)               = Tiajb(i,a,j,b) 
            PREPARE Dibja_abba(i,b,j,a) += Tibja(i,b,j,a)  
#
      ENDPARDO i, a, b, j 
#
      PARDO a, i, a1, i1  
#
            REQUEST T2old_aa(a,i,a1,i1) i1  
#
            DO j 
            DO b 
#
               REQUEST                        A2old_ab(i1,a1,j,b) i1  
               Tiajb(i,a,j,b)               = T2old_aa(a,i,a1,i1)*A2old_ab(i1,a1,j,b)  
               Tibja(i,b,j,a)               = Tiajb(i,a,j,b) 
               Tibja(i,b,j,a)              *= 0.5 
               PREPARE Vibja_abba(i,b,j,a) += Tibja(i,b,j,a)  
               PREPARE Dibja_abba(i,b,j,a) += Tibja(i,b,j,a)  
#
            ENDDO b 
            ENDDO j 
#
      ENDPARDO a, i, a1, i1  
#
      PARDO b, j, a1, i1  
#
            REQUEST T2old_ab(a1,i1,b,j) j  
            REQUEST A2old_ab(i1,a1,j,b) j  
#
            DO i 
            DO a 
#
               REQUEST A2old_aa(i1,a1,i,a) a  
               GET t1a_old(a1,i) 
               GET t1a_old(a,i1) 
               tai(a,i1) = t1a_old(a,i1) 
#
#              T1iajb(i,a,j,b)          = T2old_ab(a1,i1,b,j)*A2old_aa(i1,a1,i,a)  
               Tiaai(i,a,a1,i1)         = A2old_aa(i1,a1,i,a) 
               Tiabj(i,a,b,j)           = Tiaai(i,a,a1,i1)*T2old_ab(a1,i1,b,j)    
               Tiajb(i,a,j,b)           = Tiabj(i,a,b,j) 
#
               Tiaia(i,a,i1,a1)         = t1a_old(a1,i)^tai(a,i1) 
               T1iajb(i,a,j,b)          = Tiaia(i,a,i1,a1)*A2old_ab(i1,a1,j,b) 
               Tiajb(i,a,j,b)          -= T1iajb(i,a,j,b) 
#
# Multiply by 4(VFL) to match aces 
# -------------------------------- 
#
               Tiajb(i,a,j,b)              *= 0.5 
               Tibja(i,b,j,a)               = Tiajb(i,a,j,b) 
               PREPARE Dibja_abba(i,b,j,a) += Tibja(i,b,j,a)  
#
            ENDDO a 
            ENDDO i 
#
      ENDPARDO b, j, a1, i1  
#
      PARDO a, i, b1, j1  
#
            REQUEST T2old_ab(a,i,b1,j1) j1  
#
            DO j 
            DO b 
#
               REQUEST                        A2old_bb(j1,b1,j,b) j1  
#
               Tiajb(i,a,j,b)               = T2old_ab(a,i,b1,j1)*A2old_bb(j1,b1,j,b)  
               Tiajb(i,a,j,b)              *= 0.5  
#
               Tibja(i,b,j,a)               = Tiajb(i,a,j,b) 
               PREPARE Vibja_abba(i,b,j,a) += Tibja(i,b,j,a)  
#
               Tibja(i,b,j,a)               = Tiajb(i,a,j,b) 
               PREPARE Dibja_abba(i,b,j,a) += Tibja(i,b,j,a)  
#
            ENDDO b 
            ENDDO j  
#
      ENDPARDO a, i, b1, j1  
#
      PARDO b, j, b1, j1  
#
            REQUEST T2old_bb(b,j,b1,j1) j1  
#
            DO i 
            DO a 
#
               REQUEST     A2old_ab(i,a,j1,b1) j1  
               GET         t1b_old(b1,j) 
               GET         t1b_old(b,j1) 
               tbj(b,j1) = t1b_old(b,j1) 
#
#              T1iajb(i,a,j,b)              = T2old_bb(b,j,b1,j1)*A2old_ab(i,a,j1,b1)  
               Tjbjb(j1,b1,j,b)             = T2old_bb(b,j,b1,j1) 
               Tiajb(i,a,j,b)               = A2old_ab(i,a,j1,b1)*Tjbjb(j1,b1,j,b)   
#
               Tjbjb(j,b,j1,b1)             = t1b_old(b1,j)^tbj(b,j1) 
               T1iajb(i,a,j,b)              = Tjbjb(j,b,j1,b1)*A2old_ab(i,a,j1,b1) 
               Tiajb(i,a,j,b)              -= T1iajb(i,a,j,b) 
#
               Tiajb(i,a,j,b)              *= 0.5 
               Tibja(i,b,j,a)               = Tiajb(i,a,j,b) 
               PREPARE Dibja_abba(i,b,j,a) += Tibja(i,b,j,a)  
#
            ENDDO a 
            ENDDO i  
#
# Multiply by 4(VFL) to match aces 
# -------------------------------- 
#
      ENDPARDO b, j, b1, j1  
#
      PARDO j, b, a, i  
#
            GET t1a_old(a,i)
            GET a1b_old(j,b)
            GET t1b_old(b,j)
            GET a1a_old(i,a)
#
            Tjbia(j,b,i,a)               = a1b_old(j,b)^t1a_old(a,i)
            T1jbia(j,b,i,a)              = a1a_old(i,a)^t1b_old(b,j)
            Tjbia(j,b,i,a)              += T1jbia(j,b,i,a)
            Tjbia(j,b,i,a)              *= 0.5
            Tjaib(j,a,i,b)               = Tjbia(j,b,i,a)
            PREPARE Dibja_baab(j,a,i,b) += Tjaib(j,a,i,b)
#
      ENDPARDO j, b, a, i
#
      PARDO j, b, i1, a1   
#
            REQUEST T2old_ab(a1,i1,b,j) i1 
#
            DO i
            DO a
#
               REQUEST                        A2old_aa(i1,a1,i,a) i1
#
               Tjbia(j,b,i,a)               = T2old_ab(a1,i1,b,j)*A2old_aa(i1,a1,i,a)
               Tjbia(j,b,i,a)              *= 0.5
               Tjaib(j,a,i,b)               = Tjbia(j,b,i,a)
#
               PREPARE Vibja_baab(j,a,i,b) += Tjaib(j,a,i,b)
               PREPARE Dibja_baab(j,a,i,b) += Tjaib(j,a,i,b)
#
            ENDDO a
            ENDDO i
#
      ENDPARDO j, b, i1, a1  
#
      PARDO a, i, a1, i1   
#
            REQUEST T2old_aa(a,i,a1,i1) i1
#
            DO j
            DO b
#
               REQUEST     A2old_ab(i1,a1,j,b) i1
               GET         t1a_old(a1,i)
               GET         t1a_old(a,i1)
               tai(a,i1) = t1a_old(a,i1)
#
#old contr     T1jbia(j,b,i,a)              = T2old_aa(a,i,a1,i1)*A2old_ab(i1,a1,j,b)
#
               Taiia(a,i,i1,a1)             = T2old_aa(a,i,a1,i1) 
               Taijb(a,i,j,b)               = Taiia(a,i,i1,a1)*A2old_ab(i1,a1,j,b)
               Tjbia(j,b,i,a)               = Taijb(a,i,j,b)
#
               Tiaia(i,a,i1,a1)             = t1a_old(a1,i)^tai(a,i1)
               T1jbia(j,b,i,a)              = Tiaia(i,a,i1,a1)*A2old_ab(i1,a1,j,b)
               Tjbia(j,b,i,a)              -= T1jbia(j,b,i,a)
#
               Tjbia(j,b,i,a)              *= 0.5
               Tjaib(j,a,i,b)               = Tjbia(j,b,i,a)
               PREPARE Dibja_baab(j,a,i,b) += Tjaib(j,a,i,b)
#
            ENDDO b
            ENDDO j
#
      ENDPARDO a, i, a1, i1 
#
      PARDO j, b, j1, b1   
#
            REQUEST T2old_bb(b,j,b1,j1) j1 
#
            DO i
            DO a
#
               REQUEST                        A2old_ab(i,a,j1,b1) j1 
               Tjbia(j,b,i,a)               = T2old_bb(b,j,b1,j1)*A2old_ab(i,a,j1,b1)
               Tjbia(j,b,i,a)              *= 0.5
               Tjaib(j,a,i,b)               = Tjbia(j,b,i,a)
               PREPARE Vibja_baab(j,a,i,b) += Tjaib(j,a,i,b)
               PREPARE Dibja_baab(j,a,i,b) += Tjaib(j,a,i,b)
#
            ENDDO a
            ENDDO i
#
      ENDPARDO j, b, j1, b1  
#
      PARDO a, i, b1, j1   
#
            REQUEST A2old_ab(i,a,j1,b1) j1 
            REQUEST T2old_ab(a,i,b1,j1) j1 
#
            DO j
            DO b
#
               REQUEST     A2old_bb(j,b,j1,b1) j1 
               GET         t1b_old(b,j1)
               GET         t1b_old(b1,j)
               tbj(b,j1) = t1b_old(b,j1)
#
#              T1jbia(j,b,i,a)              = T2old_ab(a,i,b1,j1)*A2old_bb(j,b,j1,b1)
               Tbjbj(b1,j1,b,j)             = A2old_bb(j,b,j1,b1)
               Taibj(a,i,b,j)               = T2old_ab(a,i,b1,j1)*Tbjbj(b1,j1,b,j)
               Tjbia(j,b,i,a)               = Taibj(a,i,b,j)
#
               Tjbjb(j,b,j1,b1)             = t1b_old(b1,j)^tbj(b,j1)
               T1jbia(j,b,i,a)              = Tjbjb(j,b,j1,b1)*A2old_ab(i,a,j1,b1)
               Tjbia(j,b,i,a)              -= T1jbia(j,b,i,a)
#
               Tjbia(j,b,i,a)              *= 0.5
               Tjaib(j,a,i,b)               = Tjbia(j,b,i,a)
               PREPARE Dibja_baab(j,a,i,b) += Tjaib(j,a,i,b)
#
            ENDDO b
            ENDDO j
#
      ENDPARDO a, i, b1, j1 

      ENDPROC  DIBJA
#
#----------------------------------------------------------------------------
#
#     --------------
      PROC DIBJA_EOM
#     --------------
#
#
#       ja    j  a     jm  e  a    jm  ea
#      G   = l  r  +  l   r  t  + l   r    ; Last term for ABAB and BABA only
#       bi    b  i     be  m  i    be  mi
#
#
# AAAA
#
      PARDO  i, a, a1, i1
         REQUEST  L2R2_aaaa (i,a1,i1,a) i
         GET  t1a_old (a,i)
         GET  R1A (a,i)
         GET  L1A (i1,a1)
         tia (i1,a1) = LR1L2_ai (a1,i1)
         tpppp  (a,i,i1,a1)  = R1A (a,i) ^ L1A (i1,a1)
         t1pppp (a,i,i1,a1)  = t1a_old (a,i) ^ tia (i1,a1)
         tpppp  (a,i,i1,a1) += t1pppp (a,i,i1,a1)

         tiaia  (i,a1,i1,a)  = tpppp (a,i,i1,a1)
         tiaia  (i,a1,i1,a) += L2R2_aaaa (i,a1,i1,a)

         tiaia  (i,a1,i1,a) *= 0.5
         t1iaia (i1,a,i,a1)  = tiaia (i,a1,i1,a)
         PREPARE  Dibja_aaaa (i,a1,i1,a) += tiaia  (i,a1,i1,a)
         PREPARE  Dibja_aaaa (i1,a,i,a1) += t1iaia (i1,a,i,a1)
      ENDPARDO  i, a, a1, i1
#
# BBBB
#
      PARDO  j, b, b1, j1
         REQUEST  L2R2_bbbb (j,b1,j1,b) j
         GET  t1b_old (b,j)
         GET  R1B (b,j)
         GET  L1B (j1,b1)
         tjb (j1,b1) = LR1L2_bj (b1,j1)
         tqqqq  (b,j,j1,b1)  = R1B (b,j) ^ L1B (j1,b1)
         t1qqqq (b,j,j1,b1)  = t1b_old (b,j) ^ tjb (j1,b1)
         tqqqq  (b,j,j1,b1) += t1qqqq (b,j,j1,b1)

         tjbjb  (j,b1,j1,b)  = tqqqq (b,j,j1,b1)
         tjbjb  (j,b1,j1,b) += L2R2_bbbb (j,b1,j1,b)

         tjbjb  (j,b1,j1,b) *= 0.5
         t1jbjb (j1,b,j,b1)  = tjbjb (j,b1,j1,b)
         PREPARE  Dibja_bbbb (j,b1,j1,b) += tjbjb  (j,b1,j1,b)
         PREPARE  Dibja_bbbb (j1,b,j,b1) += t1jbjb (j1,b,j,b1)
      ENDPARDO  j, b, b1, j1
#
# ABBA
#
      PARDO  i, a, b1, j1
         REQUEST  L2R2_abba (i,b1,j1,a) i
         GET  t1a_old (a,i)
         GET  R1A (a,i)
         GET  L1B (j1,b1)
         tjb (j1,b1) = LR1L2_bj (b1,j1)
         tppqq  (a,i,j1,b1)  = R1A (a,i) ^ L1B (j1,b1)
         t1ppqq (a,i,j1,b1)  = t1a_old (a,i) ^ tjb (j1,b1)
         tppqq  (a,i,j1,b1) += t1ppqq (a,i,j1,b1)

         tpqqp  (i,b1,j1,a)  = tppqq (a,i,j1,b1)
         tpqqp  (i,b1,j1,a) += L2R2_abba (i,b1,j1,a)

         tpqqp  (i,b1,j1,a) *= 0.5
         PREPARE  Dibja_abba (i,b1,j1,a) += tpqqp (i,b1,j1,a)
      ENDPARDO  i, a, b1, j1

      PARDO  i, a, b1, j1
         REQUEST  L2R2_baab (j1,a,i,b1) i
         GET  t1b_old (b1,j1)
         GET  R1B (b1,j1)
         GET  L1A (i,a)
         tpp (a,i) = L1A (i,a)
         tppqq  (a,i,b1,j1)  = tpp (a,i) ^ R1B (b1,j1)
         t1ppqq (a,i,b1,j1)  = LR1L2_ai (a,i) ^ t1b_old (b1,j1)
         tppqq  (a,i,b1,j1) += t1ppqq (a,i,b1,j1)

         tqppq  (j1,a,i,b1)  = tppqq (a,i,b1,j1)
         tqppq  (j1,a,i,b1) += L2R2_baab (j1,a,i,b1)
         tpqqp  (i,b1,j1,a)  = tqppq (j1,a,i,b1)

         tpqqp  (i,b1,j1,a) *= 0.5
         PREPARE  Dibja_abba (i,b1,j1,a) += tpqqp (i,b1,j1,a)
      ENDPARDO  i, a, b1, j1
#
# BAAB
#
      PARDO  j, b, a1, i1
         REQUEST  L2R2_baab (j,a1,i1,b) j
         GET  t1b_old (b,j)
         GET  R1B (b,j)
         GET  L1A (i1,a1)
         tia (i1,a1) = LR1L2_ai (a1,i1)
         tqqpp  (b,j,i1,a1)  = R1B (b,j) ^ L1A (i1,a1)
         t1qqpp (b,j,i1,a1)  = t1b_old (b,j) ^ tia (i1,a1)
         tqqpp  (b,j,i1,a1) += t1qqpp (b,j,i1,a1)

         tqppq  (j,a1,i1,b)  = tqqpp (b,j,i1,a1)
         tqppq  (j,a1,i1,b) += L2R2_baab (j,a1,i1,b)

         tqppq  (j,a1,i1,b) *= 0.5
         PREPARE  Dibja_baab (j,a1,i1,b) += tqppq (j,a1,i1,b)
      ENDPARDO  j, b, a1, i1

      PARDO  j, b, a1, i1
         REQUEST  L2R2_abba (i1,b,j,a1) j
         GET  t1a_old (a1,i1)
         GET  R1A (a1,i1)
         GET  L1B (j,b)
         tqq (b,j) = L1B (j,b)
         tqqpp  (b,j,a1,i1)  = tqq (b,j) ^ R1A (a1,i1)
         t1qqpp (b,j,a1,i1)  = LR1L2_bj (b,j) ^ t1a_old (a1,i1)
         tqqpp  (b,j,a1,i1) += t1qqpp (b,j,a1,i1)

         tpqqp  (i1,b,j,a1)  = tqqpp (b,j,a1,i1)
         tpqqp  (i1,b,j,a1) += L2R2_abba (i1,b,j,a1)
         tqppq  (j,a1,i1,b)  = tpqqp (i1,b,j,a1)

         tqppq  (j,a1,i1,b) *= 0.5
         PREPARE  Dibja_baab (j,a1,i1,b) += tqppq (j,a1,i1,b)
      ENDPARDO  j, b, a1, i1
#
# ABAB
#
      PARDO  i, b, i1, b1
         REQUEST               L2R2_abab (i,b1,i1,b) i
         tibib  (i,b,i1,b1)  = L2R2_abab (i,b1,i1,b)
         tibib  (i,b,i1,b1) *= 0.5
         t1ibib (i1,b1,i,b)  = tibib (i,b,i1,b1)
         PREPARE  Dibja_abab (i,b,i1,b1) += tibib  (i,b,i1,b1)
         PREPARE  Dibja_abab (i1,b1,i,b) += t1ibib (i1,b1,i,b)
      ENDPARDO  i, b, i1, b1
#
# BABA
#
      PARDO  j, a, j1, a1
         REQUEST               L2R2_baba (j,a1,j1,a) j
         tjaja  (j,a,j1,a1)  = L2R2_baba (j,a1,j1,a)
         tjaja  (j,a,j1,a1) *= 0.5
         t1jaja (j1,a1,j,a)  = tjaja (j,a,j1,a1)
         PREPARE  Dibja_baba (j,a,j1,a1) += tjaja  (j,a,j1,a1)
         PREPARE  Dibja_baba (j1,a1,j,a) += t1jaja (j1,a1,j,a)
      ENDPARDO  j, a, j1, a1
#
#
#       ja    jm    e  a    e  a
#      G   = l   ( r  t  + t  r  )
#       bi    be    i  m    i  m
#
#
# AAAA
#
      PARDO  i1, a2, i2, a1
         REQUEST                L2AA (i2,a2,i1,a1) i1
         taaii (a2,a1,i1,i2)  = L2AA (i2,a2,i1,a1)
         DO i
            GET  R1A     (a2,i)
            GET  t1a_old (a2,i)
            t1ia (i,a2) = R1A     (a2,i)
            t2ia (i,a2) = t1a_old (a2,i)
            tpppp  (i,a1,i1,i2)  = t1ia (i,a2) * taaii (a2,a1,i1,i2)
            t1pppp (i,a1,i1,i2)  = t2ia (i,a2) * taaii (a2,a1,i1,i2)
            DO a
               GET  R1A (a,i2)
               tiaia  (i,a1,i1,a)  = tpppp  (i,a1,i1,i2) * ST1A (a,i2)
               t1iaia (i,a1,i1,a)  = t1pppp (i,a1,i1,i2) * R1A  (a,i2)
               tiaia  (i,a1,i1,a) += t1iaia (i,a1,i1,a)

               tiaia  (i,a1,i1,a) *= -0.5
               t2iaia (i1,a,i,a1)  = tiaia (i,a1,i1,a)
               PREPARE  Dibja_aaaa (i,a1,i1,a) += tiaia  (i,a1,i1,a)
               PREPARE  Dibja_aaaa (i1,a,i,a1) += t2iaia (i1,a,i,a1)
            ENDDO a
         ENDDO i
      ENDPARDO  i1, a2, i2, a1
#
# BBBB
#
      PARDO  j1, b2, j2, b1
         REQUEST                L2BB (j2,b2,j1,b1) j1
         tbbjj (b2,b1,j1,j2)  = L2BB (j2,b2,j1,b1)
         DO j
            GET  R1B     (b2,j)
            GET  t1b_old (b2,j)
            t1jb (j,b2) = R1B     (b2,j)
            t2jb (j,b2) = t1b_old (b2,j)
            tqqqq  (j,b1,j1,j2)  = t1jb (j,b2) * tbbjj (b2,b1,j1,j2)
            t1qqqq (j,b1,j1,j2)  = t2jb (j,b2) * tbbjj (b2,b1,j1,j2)
            DO b
               GET  R1B (b,j2)
               tjbjb  (j,b1,j1,b)  = tqqqq  (j,b1,j1,j2) * ST1B (b,j2)
               t1jbjb (j,b1,j1,b)  = t1qqqq (j,b1,j1,j2) * R1B  (b,j2)
               tjbjb  (j,b1,j1,b) += t1jbjb (j,b1,j1,b)

               tjbjb  (j,b1,j1,b) *= -0.5
               t2jbjb (j1,b,j,b1)  = tjbjb (j,b1,j1,b)
               PREPARE  Dibja_bbbb (j,b1,j1,b) += tjbjb  (j,b1,j1,b)
               PREPARE  Dibja_bbbb (j1,b,j,b1) += t2jbjb (j1,b,j,b1)
            ENDDO b
         ENDDO j
      ENDPARDO  j1, b2, j2, b1
#
# ABBA
#
      PARDO  j1, a2, i2, b1
         REQUEST                L2AB (i2,a2,j1,b1) j1
         tabji (a2,b1,j1,i2)  = L2AB (i2,a2,j1,b1)
         DO i
            GET  R1A     (a2,i)
            GET  t1a_old (a2,i)
            t1ia (i,a2) = R1A     (a2,i)
            t2ia (i,a2) = t1a_old (a2,i)
            tpqqp  (i,b1,j1,i2)  = t1ia (i,a2) * tabji (a2,b1,j1,i2)
            t1pqqp (i,b1,j1,i2)  = t2ia (i,a2) * tabji (a2,b1,j1,i2)
            DO a
               GET  R1A     (a,i2)
               GET  t1a_old (a,i2)
               tibja  (i,b1,j1,a)  = tpqqp  (i,b1,j1,i2) * t1a_old (a,i2)
               t1ibja (i,b1,j1,a)  = t1pqqp (i,b1,j1,i2) * R1A     (a,i2)
               tibja  (i,b1,j1,a) += t1ibja (i,b1,j1,a)
               tibja  (i,b1,j1,a) *= -0.5
               PREPARE  Dibja_abba (i,b1,j1,a) += tibja (i,b1,j1,a)
            ENDDO a
         ENDDO i
      ENDPARDO  j1, a2, i2, b1

      PARDO  b2, a, j2, i
         REQUEST             L2AB (i,a,j2,b2) b2
         tijba (i,j2,b2,a) = L2AB (i,a,j2,b2)
         DO j1
            GET            R1B     (b2,j1)
            GET            t1b_old (b2,j1)
            t1bj (b2,j1) = R1B     (b2,j1)
            t2bj (b2,j1) = t1b_old (b2,j1)
            tpqqp  (i,j2,j1,a) = tijba (i,j2,b2,a) * t1bj (b2,j1)
            t1pqqp (i,j2,j1,a) = tijba (i,j2,b2,a) * t2bj (b2,j1)
            DO b1
               GET  R1B     (b1,j2)
               GET  t1b_old (b1,j2)
               tibja  (i,b1,j1,a)  = t1b_old (b1,j2) * tpqqp  (i,j2,j1,a)
               t1ibja (i,b1,j1,a)  = R1B     (b1,j2) * t1pqqp (i,j2,j1,a)
               tibja  (i,b1,j1,a) += t1ibja (i,b1,j1,a)
               tibja  (i,b1,j1,a) *= -0.5
               PREPARE  Dibja_abba (i,b1,j1,a) += tibja (i,b1,j1,a)
            ENDDO b1
         ENDDO j1
      ENDPARDO  b2, a, j2, i
#
# BAAB
#
      PARDO  i1, b2, j2, a1
         REQUEST                L2AB (i1,a1,j2,b2) i1
         tbaij (b2,a1,i1,j2)  = L2AB (i1,a1,j2,b2)
         DO j
            GET  R1B     (b2,j)
            GET  t1b_old (b2,j)
            t1jb (j,b2) = R1B     (b2,j)
            t2jb (j,b2) = t1b_old (b2,j)
            tqppq  (j,a1,i1,j2)  = t1jb (j,b2) * tbaij (b2,a1,i1,j2)
            t1qppq (j,a1,i1,j2)  = t2jb (j,b2) * tbaij (b2,a1,i1,j2)
            DO b
               GET  R1B     (b,j2)
               GET  t1b_old (b,j2)
               tjaib  (j,a1,i1,b)  = tqppq  (j,a1,i1,j2) * t1b_old (b,j2)
               t1jaib (j,a1,i1,b)  = t1qppq (j,a1,i1,j2) * R1B     (b,j2)
               tjaib  (j,a1,i1,b) += t1jaib (j,a1,i1,b)
               tjaib  (j,a1,i1,b) *= -0.5
               PREPARE  Dibja_baab (j,a1,i1,b) += tjaib (j,a1,i1,b)
            ENDDO b
         ENDDO j
      ENDPARDO  i1, b2, j2, a1

      PARDO  a2, b, i2, j
         REQUEST             L2AB (i2,a2,j,b) a2
         tjiab (j,i2,a2,b) = L2AB (i2,a2,j,b)
         DO i1
            GET            R1A     (a2,i1)
            GET            t1a_old (a2,i1)
            t1ai (a2,i1) = R1A     (a2,i1)
            t2ai (a2,i1) = t1a_old (a2,i1)
            tqppq  (j,i2,i1,b) = tjiab (j,i2,a2,b) * t1ai (a2,i1)
            t1qppq (j,i2,i1,b) = tjiab (j,i2,a2,b) * t2ai (a2,i1)
            DO a1
               GET  R1A     (a1,i2)
               GET  t1a_old (a1,i2)
               tjaib  (j,a1,i1,b)  = t1A_old (a1,i2) * tqppq  (j,i2,i1,b)
               t1jaib (j,a1,i1,b)  = R1A     (a1,i2) * t1qppq (j,i2,i1,b)
               tjaib  (j,a1,i1,b) += t1jaib (j,a1,i1,b)
               tjaib  (j,a1,i1,b) *= -0.5
               PREPARE  Dibja_baab (j,a1,i1,b) += tjaib (j,a1,i1,b)
            ENDDO a1
         ENDDO i1
      ENDPARDO  a2, b, i2, j
#
# ABAB
#
      PARDO  j2, b, i1, a2    
         REQUEST              L2AB (i1,a2,j2,b) j2
         tabij (a2,b,i1,j2) = L2AB (i1,a2,j2,b)
         DO i
            GET  R1A     (a2,i)
            GET  t1a_old (a2,i)
            t1ia (i,a2) = R1A     (a2,i)
            t2ia (i,a2) = t1a_old (a2,i)
            tibij  (i,b,i1,j2) = t1ia (i,a2) * tabij (a2,b,i1,j2)
            t1ibij (i,b,i1,j2) = t2ia (i,a2) * tabij (a2,b,i1,j2)
            DO b1
               GET  R1B     (b1,j2)
               GET  t1b_old (b1,j2)
               tpqpq  (i,b,i1,b1)  = tibij  (i,b,i1,j2) * t1b_old (b1,j2)
               t1pqpq (i,b,i1,b1)  = t1ibij (i,b,i1,j2) * R1B     (b1,j2)
               tpqpq  (i,b,i1,b1) += t1pqpq (i,b,i1,b1)

               tpqpq  (i,b,i1,b1) *= 0.5
               t2pqpq (i1,b1,i,b)  = tpqpq (i,b,i1,b1)
               PREPARE  Dibja_abab (i,b,i1,b1) += tpqpq  (i,b,i1,b1)
               PREPARE  Dibja_abab (i1,b1,i,b) += t2pqpq (i1,b1,i,b)
            ENDDO b1
         ENDDO i
      ENDPARDO  j2, b, i1, a2
#
# BABA
#
      PARDO  i2, a, j1, b2
         REQUEST              L2AB (i2,a,j1,b2) i2
         tbaji (b2,a,j1,i2) = L2AB (i2,a,j1,b2)
         DO j
            GET  R1B     (b2,j)
            GET  t1b_old (b2,j)
            t1jb (j,b2) = R1B     (b2,j)
            t2jb (j,b2) = t1b_old (b2,j)
            tjaji  (j,a,j1,i2) = t1jb (j,b2) * tbaji (b2,a,j1,i2)
            t1jaji (j,a,j1,i2) = t2jb (j,b2) * tbaji (b2,a,j1,i2)
            DO a1
               GET  R1A     (a1,i2)
               GET  t1a_old (a1,i2)
               tqpqp  (j,a,j1,a1)  = tjaji  (j,a,j1,i2) * t1a_old (a1,i2)
               t1qpqp (j,a,j1,a1)  = t1jaji (j,a,j1,i2) * R1A     (a1,i2)
               tqpqp  (j,a,j1,a1) += t1qpqp (j,a,j1,a1)

               tqpqp  (j,a,j1,a1) *= 0.5
               t2qpqp (j1,a1,j,a)  = tqpqp (j,a,j1,a1)
               PREPARE  Dibja_baba (j,a,j1,a1) += tqpqp  (j,a,j1,a1)
               PREPARE  Dibja_baba (j1,a1,j,a) += t2qpqp (j1,a1,j,a)
            ENDDO a1
         ENDDO j
      ENDPARDO  i2, a, j1, b2
#
#
#     ..ready!
#
#
      ENDPROC  DIBJA_EOM
#----------------------------------------------------------------------------



# ------------------------------------------------------------------------- 
#
# Start the calculation of the D^{ab}_{ci} type contributions to the
# density. Equivalent to Gamma5   
#
# ------------------------------------------------------------------------- 
#
      PROC DABCI
#     ---------------
#
      PARDO a, a1, a2, i 
#              
            Taaai(a,a1,a2,i) = 0.0  
#
            GET Gae_a(a2,a) 
            GET t1a_old(a1,i) 
            GET Gae_a(a2,a1) 
            GET t1a_old(a,i)
#              
            T1aaai(a,a1,a2,i)  = Gae_a(a2,a)^t1a_old(a1,i)
            T1aaai(a,a1,a2,i) *= -0.125 
            Taaai(a,a1,a2,i)  += T1aaai(a,a1,a2,i)
#
            T1aaai(a,a1,a2,i)  = Gae_a(a2,a1)^t1a_old(a,i)
            T1aaai(a,a1,a2,i) *= 0.125
            Taaai(a,a1,a2,i)  += T1aaai(a,a1,a2,i)
#                 
            DO i1
#
               REQUEST Tau_aa(a,i1,a1,i)      i1
               REQUEST A2old_aa(i1,a,i,a1)    i1
               REQUEST Vibja_aaaa(i,a2,i1,a)  i1
               REQUEST Vibja_aaaa(i,a2,i1,a1) i1
               GET a1a_old(i1,a2)
               GET t1a_old(a2,i1)
               GET t1a_old(a1,i1)
               GET t1a_old(a,i1)
#
               T1aaai(a,a1,a2,i)  = Tau_aa(a,i1,a1,i)*a1a_old(i1,a2)
               T1aaai(a,a1,a2,i) *= 0.125
               Taaai(a,a1,a2,i)  += T1aaai(a,a1,a2,i)
#
               T1aaai(a,a1,a2,i)  = A2old_aa(i1,a,i,a1)*t1a_old(a2,i1)
               T1aaai(a,a1,a2,i) *= 0.125
               Taaai(a,a1,a2,i)  += T1aaai(a,a1,a2,i)
#
               T1aaai(a,a1,a2,i)  = Vibja_aaaa(i,a2,i1,a)*t1a_old(a1,i1)
               T1aaai(a,a1,a2,i) *= -0.25
               Taaai(a,a1,a2,i)  += T1aaai(a,a1,a2,i)
#
               T1aaai(a,a1,a2,i)  = Vibja_aaaa(i,a2,i1,a1)*t1a_old(a,i1)
               T1aaai(a,a1,a2,i) *= 0.25
               Taaai(a,a1,a2,i)  += T1aaai(a,a1,a2,i)
#
               DO i2
#
                  GET     I3aa(i1,a2,i2,i)
                  REQUEST Tau_aa(a,i1,a1,i2) i2
#
#                 T1aaai(a,a1,a2,i)  = Tau_aa(a,i1,a1,i2)*I3aa(i1,a2,i2,i)
#
                  Taaii(a,a1,i1,i2)  = Tau_aa(a,i1,a1,i2)
                  Tiiai(i1,i2,a2,i)  = I3aa(i1,a2,i2,i)
                  T1aaai(a,a1,a2,i)  = Taaii(a,a1,i1,i2)*Tiiai(i1,i2,a2,i)
                  T1aaai(a,a1,a2,i) *= -0.0625
                  Taaai(a,a1,a2,i)  += T1aaai(a,a1,a2,i)
#
               ENDDO i2
#
            ENDDO i1

#TWODENS
           #DO mu
           #   Txaai(mu,a1,a2,i)      = Taaai(a,a1,a2,i)*ca(mu,a)
           #   PREPARE Dxaai(mu,a1,a2,i) += Txaai(mu,a1,a2,i)
           #ENDDO mu

#
# Multiply by 4 to match aces 
# --------------------------- 
#
            Taaai(a,a1,a2,i) *= 4.0 

            PREPARE Dabci_aaaa(a,a1,a2,i) += Taaai(a,a1,a2,i) 
# 
#              
      ENDPARDO a, a1, a2, i
#
#
# End computation of one-particle intermediate contributions 
# ---------------------------------------------------------- 
#
      PARDO b, b1, b2, j 
#              
            Tbbbj(b,b1,b2,j) = 0.0  
#
            GET Gae_b(b2,b) 
            GET t1b_old(b1,j) 
            GET Gae_b(b2,b1) 
            GET t1b_old(b,j)
#
            T1bbbj(b,b1,b2,j)  = Gae_b(b2,b)^t1b_old(b1,j)
            T1bbbj(b,b1,b2,j) *= -0.125
            Tbbbj(b,b1,b2,j)  += T1bbbj(b,b1,b2,j)
#
            T1bbbj(b,b1,b2,j)  = Gae_b(b2,b1)^t1b_old(b,j)
            T1bbbj(b,b1,b2,j) *= 0.125
            Tbbbj(b,b1,b2,j)  += T1bbbj(b,b1,b2,j)
#
            DO j1
#
               REQUEST Tau_bb(b,j1,b1,j)      j1
               REQUEST A2old_bb(j1,b,j,b1)    j1
               REQUEST Vibja_bbbb(j,b2,j1,b)  j1
               REQUEST Vibja_bbbb(j,b2,j1,b1) j1
               GET a1b_old(j1,b2)
               GET t1b_old(b2,j1)
               GET t1b_old(b1,j1)
               GET t1b_old(b,j1)
#
               T1bbbj(b,b1,b2,j)  = Tau_bb(b,j1,b1,j)*a1b_old(j1,b2)
               T1bbbj(b,b1,b2,j) *= 0.125
               Tbbbj(b,b1,b2,j)  += T1bbbj(b,b1,b2,j)
#
               T1bbbj(b,b1,b2,j)  = A2old_bb(j1,b,j,b1)*t1b_old(b2,j1)
               T1bbbj(b,b1,b2,j) *= 0.125
               Tbbbj(b,b1,b2,j)  += T1bbbj(b,b1,b2,j)
#
               T1bbbj(b,b1,b2,j)  = Vibja_bbbb(j,b2,j1,b)*t1b_old(b1,j1)
               T1bbbj(b,b1,b2,j) *= -0.25
               Tbbbj(b,b1,b2,j)  += T1bbbj(b,b1,b2,j)
#
               T1bbbj(b,b1,b2,j)  = Vibja_bbbb(j,b2,j1,b1)*t1b_old(b,j1)
               T1bbbj(b,b1,b2,j) *= 0.25
               Tbbbj(b,b1,b2,j)  += T1bbbj(b,b1,b2,j)
#
               DO j2
#           
                  GET     I3bb(j1,b2,j2,j)
                  REQUEST Tau_bb(b,j1,b1,j2) j2 
#
#                 T1bbbj(b,b1,b2,j)  = Tau_bb(b,j1,b1,j2)*I3bb(j1,b2,j2,j)
                  Tbbjj(b,b1,j1,j2)  = Tau_bb(b,j1,b1,j2)
                  Tjjbj(j1,j2,b2,j)  = I3bb(j1,b2,j2,j)
                  T1bbbj(b,b1,b2,j)  = Tbbjj(b,b1,j1,j2)*Tjjbj(j1,j2,b2,j)
                  T1bbbj(b,b1,b2,j) *= -0.0625
                  Tbbbj(b,b1,b2,j)  += T1bbbj(b,b1,b2,j)
#              
               ENDDO j2 
#              
            ENDDO j1 
#              
#TWODENS
           #DO mu
           #   Txbbj(mu,b1,b2,j)      = Tbbbj(b,b1,b2,j)*cb(mu,b)
           #   PREPARE Dxbbj(mu,b1,b2,j) += Txbbj(mu,b1,b2,j)
           #ENDDO mu 
#              
# Multiply by 4 to match aces 
# --------------------------- 
#              
            Tbbbj(b,b1,b2,j) *= 4.0 
               
            PREPARE Dabci_bbbb(b,b1,b2,j) += Tbbbj(b,b1,b2,j) 

      ENDPARDO b, b1, b2, j 
# 
#
      PARDO a, a1, b, j
#
            Tabaj(a,b,a1,j) = 0.0
#
            GET Gae_a(a1,a)
            GET t1b_old(b,j)
#
            T1abaj(a,b,a1,j)  = Gae_a(a1,a)^t1b_old(b,j) 
            T1abaj(a,b,a1,j) *= -0.125 
            Tabaj(a,b,a1,j)  += T1abaj(a,b,a1,j) 
#
            DO i 
#
               REQUEST Tau_ab(a,i,b,j)      i  
               REQUEST A2old_ab(i,a,j,b)    i  
               REQUEST Vibja_baab(j,a1,i,b) i  
               GET a1a_old(i,a1) 
               GET t1a_old(a1,i) 
               GET t1a_old(a,i)
               tai (a,i) = t1a_old (a,i)
#
               T1abaj(a,b,a1,j)  = Tau_ab(a,i,b,j)*a1a_old(i,a1)
               T1abaj(a,b,a1,j) *= 0.125 
               Tabaj(a,b,a1,j)  += T1abaj(a,b,a1,j) 
#
               T1abaj(a,b,a1,j)  = A2old_ab(i,a,j,b)*t1a_old(a1,i)
               T1abaj(a,b,a1,j) *= 0.125
               Tabaj(a,b,a1,j)  += T1abaj(a,b,a1,j)
#
               T1abaj(a,b,a1,j)  = Vibja_baab(j,a1,i,b)*tai(a,i)
               T1abaj(a,b,a1,j) *= 0.25
               Tabaj(a,b,a1,j)  += T1abaj(a,b,a1,j)
#
            ENDDO i
#     
            DO j1 
#
               REQUEST Vibja_baba(j,a1,j1,a) j1
               GET t1b_old(b,j1)
#
               T1abaj(a,b,a1,j)  = Vibja_baba(j,a1,j1,a)*t1b_old(b,j1)
               T1abaj(a,b,a1,j) *= -0.25
               Tabaj(a,b,a1,j)  += T1abaj(a,b,a1,j)
#
               DO i
#
                  GET     I3ab(i,a1,j1,j)
                  REQUEST Tau_ab(a,i,b,j1) i
#
#                 T1abaj(a,b,a1,j)  = Tau_ab(a,i,b,j1)*I3ab(i,a1,j1,j)
#
                  Tabij(a,b,i,j1)   = Tau_ab(a,i,b,j1)
                  Tijaj(i,j1,a1,j)  = I3ab(i,a1,j1,j)
                  T1abaj(a,b,a1,j)  = Tabij(a,b,i,j1)*Tijaj(i,j1,a1,j)
                  T1abaj(a,b,a1,j) *= -0.125
                  Tabaj(a,b,a1,j)  += T1abaj(a,b,a1,j)
#
               ENDDO i
#
            ENDDO j1

#TWODENS
           #DO mu
           #   Txbaj(mu,b,a1,j)      = Tabaj(a,b,a1,j)*ca(mu,a)
           #   PREPARE Dxbaj(mu,b,a1,j) += Txbaj(mu,b,a1,j)
           #ENDDO mu 
#
# Multiply by 4 to match aces 
# --------------------------- 
#
            Tabaj(a,b,a1,j) *= 4.0 
 
            PREPARE Dabci_abab(a,b,a1,j) += Tabaj(a,b,a1,j) 
# 
#              
      ENDPARDO a, a1, b, j
#
#
      PARDO b1, b, a, i
#
            Tbabi(b1,a,b,i) = 0.0
#
            GET Gae_b(b,b1)
            GET t1a_old(a,i)
#
            T1babi(b1,a,b,i)  = Gae_b(b,b1)^t1a_old(a,i)
            T1babi(b1,a,b,i) *= -0.125
            Tbabi(b1,a,b,i)  += T1babi(b1,a,b,i)
#
            DO j
#
               REQUEST Tau_ab(a,i,b1,j)    j
               REQUEST A2old_ab(i,a,j,b1)  j
               REQUEST Vibja_abba(i,b,j,a) j
               GET a1b_old(j,b)
               GET t1b_old(b,j)
               GET t1b_old(b1,j)
               tbj (b1,j) = t1b_old (b1,j)
#
               T1babi(b1,a,b,i)  = Tau_ab(a,i,b1,j)*a1b_old(j,b)
               T1babi(b1,a,b,i) *= 0.125
               Tbabi(b1,a,b,i)  += T1babi(b1,a,b,i)
#
               T1babi(b1,a,b,i)  = A2old_ab(i,a,j,b1)*t1b_old(b,j)
               T1babi(b1,a,b,i) *= 0.125
               Tbabi(b1,a,b,i)  += T1babi(b1,a,b,i)
#
               T1babi(b1,a,b,i)  = Vibja_abba(i,b,j,a)*tbj(b1,j)
               T1babi(b1,a,b,i) *= 0.25
               Tbabi(b1,a,b,i)  += T1babi(b1,a,b,i)
#
            ENDDO j
#
            DO i1
#
               REQUEST Vibja_abab(i,b,i1,b1) b1
               GET t1a_old(a,i1)
#           
               T1babi(b1,a,b,i)  = Vibja_abab(i,b,i1,b1)*t1a_old(a,i1)
               T1babi(b1,a,b,i) *= -0.25
               Tbabi(b1,a,b,i)  += T1babi(b1,a,b,i)
#
               DO j 
#           
                  GET     I3ba(j,b,i1,i)
                  REQUEST Tau_ab(a,i1,b1,j) j
#           
#                 T1babi(b1,a,b,i)  = Tau_ab(a,i1,b1,j)*I3ba(j,b,i1,i)
#              
                  Tbaji(b1,a,j,i1)  = Tau_ab(a,i1,b1,j)
                  Tjibi(j,i1,b,i)   = I3ba(j,b,i1,i)
                  T1babi(b1,a,b,i)  = Tbaji(b1,a,j,i1)*Tjibi(j,i1,b,i)
                  T1babi(b1,a,b,i) *= -0.125
                  Tbabi(b1,a,b,i)  += T1babi(b1,a,b,i)
#
               ENDDO j 
#              
            ENDDO i1 

#TWODENS
           #DO mu
           #   Txabi(mu,a,b,i)      = Tbabi(b1,a,b,i)*cb(mu,b1)
           #   PREPARE Dxabi(mu,a,b,i) += Txabi(mu,a,b,i)
           #ENDDO mu
#
# Multiply by 4 to match aces 
# --------------------------- 
#              
            Tbabi(b1,a,b,i) *= 4.0 
               
            PREPARE Dabci_baba(b1,a,b,i) += Tbabi(b1,a,b,i) 
#              
#
      ENDPARDO b1, b, a, i

      ENDPROC  DABCI
#
#
#-------------------------------------------------------------------------
#
#     ---------------
      PROC  DABCI_EOM
#     ---------------
#
#
#       ab        ab  m       _ab  m
#      D   = 1/2 l   r  + 1/2 r   l  ; Note the transposition of the 1st term
#       ci        mi  c        mi  c
#
#
      PARDO  i2, a, a1, i
         REQUEST               L2AA    (i2,a,i,a1) i2              # DAIBC piece
         REQUEST               RTAU_aa (a,i2,a1,i) i2
         t1aaii (a,a1,i2,i)  = L2AA    (i2,a,i,a1)                 # DAIBC piece
         taaii  (a,a1,i2,i)  = RTAU_aa (a,i2,a1,i)
         t1aaii (a,a1,i2,i) *= 0.5                                 # DAIBC piece
         taaii  (a,a1,i2,i) *= 0.5
         DO a2
            GET  L1A (i2,a2)
            GET  R1A (a2,i2)
            tpppp  (a,a1,a2,i)  = taaii  (a,a1,i2,i) * L1A (i2,a2)
            t1pppp (a,a1,a2,i)  = t1aaii (a,a1,i2,i) * R1A (a2,i2) # DAIBC piece
            tpppp  (a,a1,a2,i) += t1pppp (a,a1,a2,i)
            PREPARE  Dabci_aaaa (a,a1,a2,i) += tpppp (a,a1,a2,i)
         ENDDO a2
      ENDPARDO  i2, a, a1, i

      PARDO  j2, b, b1, j
         REQUEST               L2BB    (j2,b,j,b1) j2              # DAIBC pjece
         REQUEST               RTAU_bb (b,j2,b1,j) j2
         t1bbjj (b,b1,j2,j)  = L2BB    (j2,b,j,b1)                 # DAIBC piece
         tbbjj  (b,b1,j2,j)  = RTAU_bb (b,j2,b1,j)
         t1bbjj (b,b1,j2,j) *= 0.5                                 # DAIBC piece
         tbbjj  (b,b1,j2,j) *= 0.5
         DO b2
            GET  L1B (j2,b2)
            GET  R1B (b2,j2)
            tqqqq  (b,b1,b2,j)  = tbbjj  (b,b1,j2,j) * L1B (j2,b2)
            t1qqqq (b,b1,b2,j)  = t1bbjj (b,b1,j2,j) * R1B (b2,j2) # DAIBC pjece
            tqqqq  (b,b1,b2,j) += t1qqqq (b,b1,b2,j)
            PREPARE  Dabci_bbbb (b,b1,b2,j) += tqqqq (b,b1,b2,j)
         ENDDO b2
      ENDPARDO  j2, b, b1, j

      PARDO  j2, a, b1, i
         REQUEST               L2AB    (i,a,j2,b1) j2              # DAIBC piece
         REQUEST               RTAU_ab (a,i,b1,j2) j2
         t1baji (b1,a,j2,i)  = L2AB    (i,a,j2,b1)                 # DAIBC piece
         tbaji  (b1,a,j2,i)  = RTAU_ab (a,i,b1,j2)
         t1baji (b1,a,j2,i) *= 0.5                                 # DAIBC piece
         tbaji  (b1,a,j2,i) *= 0.5
         DO b
            GET  R1B (b,j2)
            GET  L1B (j2,b)
            tqpqp  (b1,a,b,i)  = t1baji (b1,a,j2,i) * R1B (b,j2)   # DAIBC piece
            t1qpqp (b1,a,b,i)  = tbaji  (b1,a,j2,i) * L1B (j2,b)
            t1qpqp (b1,a,b,i) += tqpqp  (b1,a,b,i)
            PREPARE  Dabci_baba (b1,a,b,i) += t1qpqp (b1,a,b,i)
         ENDDO b
      ENDPARDO  j2, a, b1, i

      PARDO  i2, b, a, j
         REQUEST               L2AB    (i2,a,j,b) i2              # DAIBC piece
         REQUEST               RTAU_ab (a,i2,b,j) i2              
         t1abij (a,b,i2,j)   = L2AB    (i2,a,j,b)                 # DAIBC piece
         tabij  (a,b,i2,j)   = RTAU_ab (a,i2,b,j)                 
         t1abij (a,b,i2,j)  *= 0.5                                # DAIBC piece
         tabij  (a,b,i2,j)  *= 0.5
         DO a1
            GET  R1A (a1,i2)
            GET  L1A (i2,a1)
            tpqpq  (a,b,a1,j)  = t1abij (a,b,i2,j) * R1A (a1,i2)   # DAIBC piece
            t1pqpq (a,b,a1,j)  = tabij  (a,b,i2,j) * L1A (i2,a1)
            t1pqpq (a,b,a1,j) += tpqpq  (a,b,a1,j)
            PREPARE  Dabci_abab (a,b,a1,j) += t1pqpq (a,b,a1,j)
         ENDDO a1
      ENDPARDO  i2, b, a, j
#
#
#
#       ab        mn  e _ab        mn  e _ab
#      G   = 1/2 l   t  r   + 1/2 l   r  t
#       ci        ce  i  mn        ce  i  mn
#
#
      PARDO  i2, a2, i3, i
         tiiai  (i2,i3,a2,i) = 0.0
         t1iiai (i2,i3,a2,i) = 0.0
         DO a3
            REQUEST                L2AA (i2,a2,i3,a3) a3
            GET                    t1a_old (a3,i)
            GET                    R1A  (a3,i)
            tiiaa  (i2,i3,a2,a3) = L2AA (i2,a2,i3,a3)
            t2pppp (i2,i3,a2,i)  = tiiaa (i2,i3,a2,a3) * t1a_old (a3,i)
            t3pppp (i2,i3,a2,i)  = tiiaa (i2,i3,a2,a3) * R1A (a3,i)
            tiiai  (i2,i3,a2,i) += t2pppp (i2,i3,a2,i)
            t1iiai (i2,i3,a2,i) += t3pppp (i2,i3,a2,i)
         ENDDO a3
         DO a
         DO a1
            REQUEST               RTAU_aa (a,i2,a1,i3) a1
            REQUEST               TAU_aa  (a,i2,a1,i3) a1
            taaii  (a,a1,i2,i3) = RTAU_aa (a,i2,a1,i3)
            t1aaii (a,a1,i2,i3) = TAU_aa  (a,i2,a1,i3)
            tpppp  (a,a1,a2,i)  = taaii  (a,a1,i2,i3) * tiiai  (i2,i3,a2,i)
            t1pppp (a,a1,a2,i)  = t1aaii (a,a1,i2,i3) * t1iiai (i2,i3,a2,i)
            tpppp  (a,a1,a2,i) += t1pppp (a,a1,a2,i)
            tpppp  (a,a1,a2,i) *= -0.25
            PREPARE  Dabci_aaaa (a,a1,a2,i) += tpppp (a,a1,a2,i)
         ENDDO a1
         ENDDO a
      ENDPARDO  i2, a2, i3, i

      PARDO  j2, b2, j3, j
         tjjbj  (j2,j3,b2,j) = 0.0
         t1jjbj (j2,j3,b2,j) = 0.0
         DO b3
            REQUEST                L2BB (j2,b2,j3,b3) b3
            GET                    t1b_old (b3,j)
            GET                    R1B  (b3,j)
            tjjbb  (j2,j3,b2,b3) = L2BB (j2,b2,j3,b3)
            t2qqqq (j2,j3,b2,j)  = tjjbb (j2,j3,b2,b3) * t1b_old (b3,j)
            t3qqqq (j2,j3,b2,j)  = tjjbb (j2,j3,b2,b3) * R1B (b3,j)
            tjjbj  (j2,j3,b2,j) += t2qqqq (j2,j3,b2,j)
            t1jjbj (j2,j3,b2,j) += t3qqqq (j2,j3,b2,j)
         ENDDO b3
         DO b
         DO b1
            REQUEST               RTAU_bb (b,j2,b1,j3) b1
            REQUEST               TAU_bb  (b,j2,b1,j3) b1
            tbbjj  (b,b1,j2,j3) = RTAU_bb (b,j2,b1,j3)
            t1bbjj (b,b1,j2,j3) = TAU_bb  (b,j2,b1,j3)
            tqqqq  (b,b1,b2,j)  = tbbjj  (b,b1,j2,j3) * tjjbj  (j2,j3,b2,j)
            t1qqqq (b,b1,b2,j)  = t1bbjj (b,b1,j2,j3) * t1jjbj (j2,j3,b2,j)
            tqqqq  (b,b1,b2,j) += t1qqqq (b,b1,b2,j)
            tqqqq  (b,b1,b2,j) *= -0.25
            PREPARE  Dabci_bbbb (b,b1,b2,j) += tqqqq (b,b1,b2,j)
         ENDDO b1
         ENDDO b
      ENDPARDO  j2, b2, j3, j

      PARDO  i3, j2, b, i
         tjibi  (j2,i3,b,i) = 0.0
         t1jibi (j2,i3,b,i) = 0.0
         DO a3
            REQUEST               L2AB (i3,a3,j2,b) a3
            GET                   t1a_old  (a3,i)
            GET                   R1A      (a3,i)
            tjiba  (j2,i3,b,a3) = L2AB (i3,a3,j2,b)
            t2qpqp (j2,i3,b,i)  = tjiba  (j2,i3,b,a3) * t1a_old (a3,i)
            t3qpqp (j2,i3,b,i)  = tjiba  (j2,i3,b,a3) * R1A     (a3,i)
            tjibi  (j2,i3,b,i) += t2qpqp (j2,i3,b,i)
            t1jibi (j2,i3,b,i) += t3qpqp (j2,i3,b,i)
         ENDDO a3
         DO a
         DO b1
            REQUEST               RTAU_ab (a,i3,b1,j2) b1
            REQUEST               TAU_ab  (a,i3,b1,j2) b1
            tbaji  (b1,a,j2,i3) = RTAU_ab (a,i3,b1,j2)
            t1baji (b1,a,j2,i3) = TAU_ab  (a,i3,b1,j2)
            tqpqp  (b1,a,b,i)  = tbaji  (b1,a,j2,i3) * tjibi  (j2,i3,b,i)
            t1qpqp (b1,a,b,i)  = t1baji (b1,a,j2,i3) * t1jibi (j2,i3,b,i)
            tqpqp  (b1,a,b,i) += t1qpqp (b1,a,b,i)
            tqpqp  (b1,a,b,i) *= -0.5
            PREPARE  Dabci_baba (b1,a,b,i) += tqpqp (b1,a,b,i)
         ENDDO b1
         ENDDO a
      ENDPARDO  i3, j2, b, i

      PARDO  j3, i2, a1, j
         tijaj  (i2,j3,a1,j) = 0.0
         t1ijaj (i2,j3,a1,j) = 0.0
         DO b3
            REQUEST                L2AB (i2,a1,j3,b3) b3
            GET                    t1b_old  (b3,j)
            GET                    R1B      (b3,j)
            tijab  (i2,j3,a1,b3) = L2AB (i2,a1,j3,b3)
            t2pqpq (i2,j3,a1,j)  = tijab  (i2,j3,a1,b3) * t1b_old (b3,j)
            t3pqpq (i2,j3,a1,j)  = tijab  (i2,j3,a1,b3) * R1B     (b3,j)
            tijaj  (i2,j3,a1,j) += t2pqpq (i2,j3,a1,j)
            t1ijaj (i2,j3,a1,j) += t3pqpq (i2,j3,a1,j)
         ENDDO b3
         DO b
         DO a
            REQUEST              RTAU_ab (a,i2,b,j3) a
            REQUEST              TAU_ab  (a,i2,b,j3) a
            tabij  (a,b,i2,j3) = RTAU_ab (a,i2,b,j3)
            t1abij (a,b,i2,j3) = TAU_ab  (a,i2,b,j3)
            tpqpq  (a,b,a1,j)  = tabij  (a,b,i2,j3) * tijaj  (i2,j3,a1,j)
            t1pqpq (a,b,a1,j)  = t1abij (a,b,i2,j3) * t1ijaj (i2,j3,a1,j)
            tpqpq  (a,b,a1,j) += t1pqpq (a,b,a1,j)
            tpqpq  (a,b,a1,j) *= -0.5
            PREPARE  Dabci_abab (a,b,a1,j) += tpqpq (a,b,a1,j)
         ENDDO a
         ENDDO b
      ENDPARDO  j3, i2, a1, j
#
#
#
#       ab                ea  mn    b          ea  mn    b
#      G   = 1/4 P(ab) ( r   l   ) t  + 1/4 ( t   l   ) r
#       ci                mn  ec    i          mn  ec    i
#
#
      PARDO  a, a2, a1, i
         GET  R1A (a1,i)
         GET  t1a_old(a1,i)

         tpppp  (a2,a,a1,i)  = LR2L2_aa (a2,a) ^ t1a_old (a1,i)
         t1pppp (a2,a,a1,i)  = LT2L2_aa (a2,a) ^ R1A  (a1,i)
         tpppp  (a2,a,a1,i) += t1pppp (a2,a,a1,i)

         t2pppp (a,a1,a2,i)  = tpppp  (a2,a,a1,i)
         t3pppp (a1,a,a2,i)  = t2pppp (a,a1,a2,i)
         t2pppp (a,a1,a2,i) *= -0.5
         t3pppp (a1,a,a2,i) *=  0.5
         PREPARE  Dabci_aaaa (a,a1,a2,i) += t2pppp (a,a1,a2,i)
         PREPARE  Dabci_aaaa (a1,a,a2,i) += t3pppp (a1,a,a2,i)
      ENDPARDO  a, a2, a1, i

      PARDO  b, b2, b1, j
         GET  R1B (b1,j)
         GET  t1b_old(b1,j)

         tqqqq  (b2,b,b1,j)  = LR2L2_bb (b2,b) ^ t1b_old (b1,j)
         t1qqqq (b2,b,b1,j)  = LT2L2_bb (b2,b) ^ R1B  (b1,j)
         tqqqq  (b2,b,b1,j) += t1qqqq (b2,b,b1,j)

         t2qqqq (b,b1,b2,j)  = tqqqq  (b2,b,b1,j)
         t3qqqq (b1,b,b2,j)  = t2qqqq (b,b1,b2,j)
         t2qqqq (b,b1,b2,j) *= -0.5
         t3qqqq (b1,b,b2,j) *=  0.5
         PREPARE  Dabci_bbbb (b,b1,b2,j) += t2qqqq (b,b1,b2,j)
         PREPARE  Dabci_bbbb (b1,b,b2,j) += t3qqqq (b1,b,b2,j)
      ENDPARDO  b, b2, b1, j

      PARDO  b1, a, b, i
         GET  R1A (a,i)
         GET  t1a_old(a,i)
         tqqpp  (b,b1,a,i)  = LR2L2_bb (b,b1) ^ t1a_old (a,i)
         t1qqpp (b,b1,a,i)  = LT2L2_bb (b,b1) ^ R1A  (a,i)
         tqqpp  (b,b1,a,i) += t1qqpp (b,b1,a,i)

         tqpqp  (b1,a,b,i)  = tqqpp  (b,b1,a,i)
         tqpqp  (b1,a,b,i) *= -0.5
         PREPARE  Dabci_baba (b1,a,b,i) += tqpqp (b1,a,b,i)
      ENDPARDO  b1, a, b, i

      PARDO  a, b, a1, j
         GET  R1B (b,j)
         GET  t1b_old(b,j)
         tppqq  (a1,a,b,j)  = LR2L2_aa (a1,a) ^ t1b_old (b,j)
         t1ppqq (a1,a,b,j)  = LT2L2_aa (a1,a) ^ R1B  (b,j)
         tppqq  (a1,a,b,j) += t1ppqq (a1,a,b,j)

         tpqpq  (a,b,a1,j)  = tppqq  (a1,a,b,j)
         tpqpq  (a,b,a1,j) *= -0.5
         PREPARE  Dabci_abab (a,b,a1,j) += tpqpq (a,b,a1,j)
      ENDPARDO  a, b, a1, j
#
#
#
#       ab              a    kn  fb          a    kn  fb
#      G   = 1/2 P(ab) t  ( l   r   ) + 1/2 r  ( l   t   )
#       ci              k    cf  ni          k    cf  ni
#
#
#           Note, these rings are used in Dijka and Dibja...
#
#
      PARDO  i2, a2, a1, i
         REQUEST               L2T2_aaaa (i,a2,i2,a1) i2
         REQUEST               L2R2_aaaa (i,a2,i2,a1) i2
         tiaai  (i2,a1,a2,i) = L2R2_aaaa (i,a2,i2,a1)
         t1iaai (i2,a1,a2,i) = L2T2_aaaa (i,a2,i2,a1)
         DO a
            GET  R1A (a,i2)
            GET  t1a_old(a,i2)
            tpppp  (a,a1,a2,i)  = t1a_old (a,i2) * tiaai  (i2,a1,a2,i)
            t1pppp (a,a1,a2,i)  = R1A  (a,i2) * t1iaai (i2,a1,a2,i)
            tpppp  (a,a1,a2,i) += t1pppp (a,a1,a2,i)
            tpppp  (a,a1,a2,i) *= 0.5

            t2pppp (a1,a,a2,i)  = tpppp (a,a1,a2,i)
            t2pppp (a1,a,a2,i) *= -1.0

            PREPARE  Dabci_aaaa (a,a1,a2,i) += tpppp  (a,a1,a2,i)
            PREPARE  Dabci_aaaa (a1,a,a2,i) += t2pppp (a1,a,a2,i)
         ENDDO a
      ENDPARDO  i2, a2, a1, i

      PARDO  j2, b2, b1, j
         REQUEST               L2T2_bbbb (j,b2,j2,b1) j2
         REQUEST               L2R2_bbbb (j,b2,j2,b1) j2
         tjbbj  (j2,b1,b2,j) = L2R2_bbbb (j,b2,j2,b1)
         t1jbbj (j2,b1,b2,j) = L2T2_bbbb (j,b2,j2,b1)
         DO b
            GET  R1B (b,j2)
            GET  t1b_old(b,j2)  
            tqqqq  (b,b1,b2,j)  = t1b_old (b,j2) * tjbbj  (j2,b1,b2,j)
            t1qqqq (b,b1,b2,j)  = R1B  (b,j2) * t1jbbj (j2,b1,b2,j)
            tqqqq  (b,b1,b2,j) += t1qqqq (b,b1,b2,j)
            tqqqq  (b,b1,b2,j) *= 0.5
            
            t2qqqq (b1,b,b2,j)  = tqqqq (b,b1,b2,j)
            t2qqqq (b1,b,b2,j) *= -1.0
            
            PREPARE  Dabci_bbbb (b,b1,b2,j) += tqqqq  (b,b1,b2,j)
            PREPARE  Dabci_bbbb (b1,b,b2,j) += t2qqqq (b1,b,b2,j)
         ENDDO b
      ENDPARDO  j2, b2, b1, j

      PARDO  a, b, j2, i
         REQUEST             L2T2_abba (i,b,j2,a) a
         REQUEST             L2R2_abba (i,b,j2,a) a
         tjabi  (j2,a,b,i) = L2R2_abba (i,b,j2,a)
         t1jabi (j2,a,b,i) = L2T2_abba (i,b,j2,a)
         DO b1
            GET  R1B     (b1,j2)
            GET  t1b_old (b1,j2)
            tqpqp  (b1,a,b,i)  = t1b_old (b1,j2) * tjabi  (j2,a,b,i)
            t1qpqp (b1,a,b,i)  = R1B     (b1,j2) * t1jabi (j2,a,b,i)
            tqpqp  (b1,a,b,i) += t1qpqp (b1,a,b,i)
            tqpqp  (b1,a,b,i) *=  0.5
            PREPARE  Dabci_baba (b1,a,b,i) += tqpqp (b1,a,b,i)
         ENDDO b1
      ENDPARDO  a, b, j2, i

      PARDO  i2, b, b1, i
         REQUEST              L2T2_abab (i,b1,i2,b) i2
         REQUEST              L2R2_abab (i,b1,i2,b) i2
         tbibi  (b1,i2,b,i) = L2R2_abab (i,b1,i2,b)
         t1bibi (b1,i2,b,i) = L2T2_abab (i,b1,i2,b)
         DO a
            GET  R1A (a,i2)
            GET  t1a_old(a,i2)
            tqpqp  (b1,a,b,i)  = t1a_old (a,i2) * tbibi  (b1,i2,b,i)
            t1qpqp (b1,a,b,i)  = R1A     (a,i2) * t1bibi (b1,i2,b,i)
            tqpqp  (b1,a,b,i) += t1qpqp (b1,a,b,i)
            tqpqp  (b1,a,b,i) *= -0.5
            PREPARE  Dabci_baba (b1,a,b,i) += tqpqp (b1,a,b,i)
         ENDDO a
      ENDPARDO  i2, b, b1, i

      PARDO  b, a1, i2, j
         REQUEST             L2T2_baab (j,a1,i2,b) b
         REQUEST             L2R2_baab (j,a1,i2,b) b
         tibaj  (i2,b,a1,j) = L2R2_baab (j,a1,i2,b)
         t1ibaj (i2,b,a1,j) = L2T2_baab (j,a1,i2,b)
         DO a
            GET  R1A     (a,i2)
            GET  t1a_old (a,i2)
            tpqpq  (a,b,a1,j)  = t1a_old (a,i2) * tibaj  (i2,b,a1,j) 
            t1pqpq (a,b,a1,j)  = R1A     (a,i2) * t1ibaj (i2,b,a1,j) 
            tpqpq  (a,b,a1,j) += t1pqpq (a,b,a1,j)
            tpqpq  (a,b,a1,j) *=  0.5
            PREPARE  Dabci_abab (a,b,a1,j) += tpqpq (a,b,a1,j)
         ENDDO a
      ENDPARDO  b, a1, i2, j
      
      PARDO  j2, a1, a, j     
         REQUEST              L2T2_baba (j,a,j2,a1) j2
         REQUEST              L2R2_baba (j,a,j2,a1) j2
         tajaj  (a,j2,a1,j) = L2R2_baba (j,a,j2,a1)
         t1ajaj (a,j2,a1,j) = L2T2_baba (j,a,j2,a1)
         DO b
            GET  R1B (b,j2)
            GET  t1b_old(b,j2) 
            tpqpq  (a,b,a1,j)  = t1b_old (b,j2) * tajaj  (a,j2,a1,j)
            t1pqpq (a,b,a1,j)  = R1B     (b,j2) * t1ajaj (a,j2,a1,j)
            tpqpq  (a,b,a1,j) += t1pqpq (a,b,a1,j)
            tpqpq  (a,b,a1,j) *= -0.5
            PREPARE  Dabci_abab (a,b,a1,j) += tpqpq (a,b,a1,j)
         ENDDO b
      ENDPARDO  j2, a1, a, j
#
#
#
#       ab        e    mn _ab
#      G   = 1/2 r  ( l   t   )
#       ci        m    ec  ni
#
#
      PARDO  i2, a, a1, i
         REQUEST             TAU_aa  (a1,i,a,i2) i2
         taaii (a,a1,i2,i) = TAU_aa  (a1,i,a,i2)
         DO a2
            tpppp (a,a1,a2,i)  = taaii (a,a1,i2,i) * LR1L2_ai (a2,i2)
           #tpppp (a,a1,a2,i) *= 0.25
            tpppp (a,a1,a2,i) *= 0.5
            PREPARE  Dabci_aaaa (a,a1,a2,i) += tpppp (a,a1,a2,i)
         ENDDO a2
      ENDPARDO  i2, a, a1, i

      PARDO  j2, b, b1, j
         REQUEST             TAU_bb  (b1,j,b,j2) j2
         tbbjj (b,b1,j2,j) = TAU_bb  (b1,j,b,j2)
         DO b2
            tqqqq (b,b1,b2,j)  = tbbjj (b,b1,j2,j) * LR1L2_bj (b2,j2)
           #tqqqq (b,b1,b2,j) *= 0.25
            tqqqq (b,b1,b2,j) *= 0.5
            PREPARE  Dabci_bbbb (b,b1,b2,j) += tqqqq (b,b1,b2,j)
         ENDDO b2
      ENDPARDO  j2, b, b1, j

      PARDO  j2, a, b1, i
         REQUEST             TAU_ab (a,i,b1,j2) j2
         tbaji (b1,a,j2,i) = TAU_ab (a,i,b1,j2)
         DO b
            tqpqp (b1,a,b,i)  = LR1L2_bj (b,j2) * tbaji (b1,a,j2,i)
           #tqpqp (b1,a,b,i) *= 0.25
            tqpqp (b1,a,b,i) *= 0.5
            PREPARE  Dabci_baba (b1,a,b,i) += tqpqp (b1,a,b,i)
         ENDDO b
      ENDPARDO  j2, a, b1, i

      PARDO  i2, b, a, j 
         REQUEST            TAU_ab (a,i2,b,j) i2
         tabij (a,b,i2,j) = TAU_ab (a,i2,b,j)
         DO a1
            tpqpq (a,b,a1,j)  = LR1L2_ai (a1,i2) * tabij (a,b,i2,j)
           #tpqpq (a,b,a1,j) *= 0.25
            tpqpq (a,b,a1,j) *= 0.5
            PREPARE  Dabci_abab (a,b,a1,j) += tpqpq (a,b,a1,j)
         ENDDO a1
      ENDPARDO  i2, b, a, j 
#
#
#
#          ...ready!
#
#
      ENDPROC  DABCI_EOM
#-------------------------------------------------------------------------





# Equivalent to gamma6 
#
# ----------------------------------------------------------------------------- 
#
# In this procedure the D(ij,ka) block of the two-particle 
# density matrix is evaluated. Only the AAAA contribution is computed.  
#
# ----------------------------------------------------------------------------- 
#
      PROC DIJKA
#     -------------- 
#
      PARDO i, i1, i2, a 
#
            Tiiia(i,i1,i2,a) = 0.0 
#
            GET Gmi_a(i,i2) 
            GET t1a_old(a,i1) 
            GET Gmi_a(i1,i2) 
            GET t1a_old(a,i) 
#
            T1iiia(i,i1,i2,a)  = Gmi_a(i,i2)^t1a_old(a,i1) 
            T1iiia(i,i1,i2,a) *= -0.125  
            Tiiia(i,i1,i2,a)  += T1iiia(i,i1,i2,a) 
#
            T1iiia(i,i1,i2,a)  = Gmi_a(i1,i2)^t1a_old(a,i) 
            T1iiia(i,i1,i2,a) *= 0.125  
            Tiiia(i,i1,i2,a)  += T1iiia(i,i1,i2,a) 
#
            DO a1 
#
               REQUEST Tau_aa(a1,i,a,i1)   a  
               REQUEST A2old_aa(i,a1,i1,a) a  
               REQUEST Vibja_aaaa(i,a1,i2,a)  a  
               REQUEST Vibja_aaaa(i1,a1,i2,a) a  
               GET t1a_old(a1,i1) 
               GET t1a_old(a1,i) 
               GET t1a_old(a1,i2) 
               GET a1a_old(i2,a1) 
#
               T1iiia(i,i1,i2,a) = Tau_aa(a1,i,a,i1)*a1a_old(i2,a1) 
               T1iiia(i,i1,i2,a)*= -0.125  
               Tiiia(i,i1,i2,a) += T1iiia(i,i1,i2,a) 
#
               T1iiia(i,i1,i2,a) = A2old_aa(i,a1,i1,a)*t1a_old(a1,i2) 
               T1iiia(i,i1,i2,a)*= -0.125  
               Tiiia(i,i1,i2,a) += T1iiia(i,i1,i2,a) 
#
               T1iiia(i,i1,i2,a) = Vibja_aaaa(i,a1,i2,a)*t1a_old(a1,i1) 
               T1iiia(i,i1,i2,a)*= 0.25  
               Tiiia(i,i1,i2,a) += T1iiia(i,i1,i2,a) 
#
               T1iiia(i,i1,i2,a) = Vibja_aaaa(i1,a1,i2,a)*t1a_old(a1,i) 
               T1iiia(i,i1,i2,a)*= -0.25  
               Tiiia(i,i1,i2,a) += T1iiia(i,i1,i2,a) 
#
            ENDDO a1 
#
            DO i3 
# 
               REQUEST Vijmn_aaaa(i,i1,i2,i3) i3  
               GET t1a_old(a,i3) 
# 
               T1iiia(i,i1,i2,a) = Vijmn_aaaa(i,i1,i2,i3)*t1a_old(a,i3) 
               T1iiia(i,i1,i2,a)*= 0.125  
               Tiiia(i,i1,i2,a) += T1iiia(i,i1,i2,a) 
#
            ENDDO i3 
#
#TWODENS
           #DO sigma 
           #   Tiiix(i,i1,i2,sigma)      = Tiiia(i,i1,i2,a)*ca(sigma,a) 
           #   PREPARE Diiix(i,i1,i2,sigma) += Tiiix(i,i1,i2,sigma)
           #ENDDO sigma

#
# Multiply by 4 to match aces 
# --------------------------- 
#
            Tiiia(i,i1,i2,a) *= 4.0 
#
            PREPARE Dijka_aaaa(i,i1,i2,a) += Tiiia(i,i1,i2,a) 
#
      ENDPARDO i, i1, i2, a 
#
#
# ----------------------------------------------------------------------------- 
#
# In this procedure the D(iJ,kA) block of the two-particle 
# density matrix is evaluated. The AB block is computed.  
#
# ----------------------------------------------------------------------------- 
#
      PARDO i, j, i1, b 
#
            Tijib(i,j,i1,b) = 0.0 
#
            GET Gmi_a(i,i1) 
            GET t1b_old(b,j) 
#
            T1ijib(i,j,i1,b) = Gmi_a(i,i1)^t1b_old(b,j) 
            T1ijib(i,j,i1,b)*= -0.125  
            Tijib(i,j,i1,b) += T1ijib(i,j,i1,b) 
#
            DO a 
#
               REQUEST Tau_ab(a,i,b,j)      b  
               REQUEST A2old_ab(i,a,j,b)    b  
               REQUEST Vibja_baab(j,a,i1,b) b  
               GET a1a_old(i1,a) 
               GET t1a_old(a,i1) 
               GET t1a_old(a,i) 
#
               T1ijib(i,j,i1,b) = Tau_ab(a,i,b,j)*a1a_old(i1,a) 
               T1ijib(i,j,i1,b)*= -0.125  
               Tijib(i,j,i1,b) += T1ijib(i,j,i1,b) 
#
               T1ijib(i,j,i1,b) = A2old_ab(i,a,j,b)*t1a_old(a,i1) 
               T1ijib(i,j,i1,b)*= -0.125  
               Tijib(i,j,i1,b) += T1ijib(i,j,i1,b) 
#
               T1ijib(i,j,i1,b) = Vibja_baab(j,a,i1,b)*t1a_old(a,i) 
               T1ijib(i,j,i1,b)*= -0.25  
               Tijib(i,j,i1,b) += T1ijib(i,j,i1,b) 
#
            ENDDO a 
#
            DO j1 
# 
               REQUEST Vijmn_abab(i,j,i1,j1) j1  
               GET t1b_old(b,j1) 
               T1ijib(i,j,i1,b) = Vijmn_abab(i,j,i1,j1)*t1b_old(b,j1) 
               T1ijib(i,j,i1,b)*= 0.125  
               Tijib(i,j,i1,b) += T1ijib(i,j,i1,b) 
#
            ENDDO j1 
#
            DO b1 
#
               REQUEST Vibja_abab(i,b1,i1,b) b  
               GET t1b_old(b1,j) 
               T1ijib(i,j,i1,b) = Vibja_abab(i,b1,i1,b)*t1b_old(b1,j) 
               T1ijib(i,j,i1,b)*= 0.25  
               Tijib(i,j,i1,b) += T1ijib(i,j,i1,b) 
#
            ENDDO b1 
#
# TWODENS
           #DO sigma
           #   Tijix(i,j,i1,sigma)      = Tijib(i,j,i1,b)*cb(sigma,b)
           #   PREPARE Dijix(i,j,i1,sigma) += Tijix(i,j,i1,sigma)
           #ENDDO sigma 

# Multiply by 4 to match aces 
# --------------------------- 
#
            Tijib(i,j,i1,b) *= 4.0 
#
            PREPARE Dijka_abab(i,j,i1,b) += Tijib(i,j,i1,b) 
#
      ENDPARDO i, j, i1, b 
#
#
# ----------------------------------------------------------------------------- 
#
# In this procedure the D(Ij,Ka) block of the two-particle 
# density matrix is evaluated. The BABA block is computed.  
#
# ----------------------------------------------------------------------------- 
#
      PARDO j, i, j1, a 
#
            Tjija(j,i,j1,a) = 0.0 
#
            GET Gmi_b(j,j1) 
            GET t1a_old(a,i) 
#
            T1jija(j,i,j1,a) = Gmi_b(j,j1)^t1a_old(a,i) 
            T1jija(j,i,j1,a)*= -0.125  
            Tjija(j,i,j1,a) += T1jija(j,i,j1,a) 
#
            DO b 
#
               REQUEST Tau_ab(a,i,b,j)   b  
               REQUEST A2old_ab(i,a,j,b) b  
               REQUEST Vibja_abba(i,b,j1,a) a  
               GET t1b_old(b,j) 
               GET t1b_old(b,j1) 
               GET a1b_old(j1,b) 
#
               T1jija(j,i,j1,a) = Tau_ab(a,i,b,j)*a1b_old(j1,b) 
               T1jija(j,i,j1,a)*= -0.125  
               Tjija(j,i,j1,a) += T1jija(j,i,j1,a) 
#
               T1jija(j,i,j1,a) = A2old_ab(i,a,j,b)*t1b_old(b,j1) 
               T1jija(j,i,j1,a)*= -0.125  
               Tjija(j,i,j1,a) += T1jija(j,i,j1,a) 
#
               T1jija(j,i,j1,a) = Vibja_abba(i,b,j1,a)*t1b_old(b,j) 
               T1jija(j,i,j1,a)*= -0.25  
               Tjija(j,i,j1,a) += T1jija(j,i,j1,a) 
#
            ENDDO b 
#
            DO i1 
# 
               REQUEST Vijmn_abab(i,j,i1,j1) j1  
               GET t1a_old(a,i1) 
               T1jija(j,i,j1,a) = Vijmn_abab(i,j,i1,j1)*t1a_old(a,i1) 
               T1jija(j,i,j1,a)*= 0.125  
               Tjija(j,i,j1,a) += T1jija(j,i,j1,a) 
#
            ENDDO i1 
#
            DO a1 
#
               REQUEST Vibja_baba(j,a1,j1,a) a  
               GET t1a_old(a1,i) 
               T1jija(j,i,j1,a) = Vibja_baba(j,a1,j1,a)*t1a_old(a1,i) 
               T1jija(j,i,j1,a)*= 0.25  
               Tjija(j,i,j1,a) += T1jija(j,i,j1,a) 
#
            ENDDO a1 

#TWODENS
           #DO sigma 
           #   Tjijx(j,i,j1,sigma)      = Tjija(j,i,j1,a)*ca(sigma,a)
           #   PREPARE Djijx(j,i,j1,sigma) += Tjijx(j,i,j1,sigma) 
           #ENDDO sigma 

#
# Multiply by 4 to match aces 
# --------------------------- 
#
            Tjija(j,i,j1,a) *= 4.0 
#
            PREPARE Dijka_baba(j,i,j1,a) += Tjija(j,i,j1,a) 
#
      ENDPARDO j, i, j1, a 
# 
# ----------------------------------------------------------------------------- 
#
# In this procedure the D(IJ,KA) block of the two-particle 
# density matrix is evaluated. Only the BBBB contribution is computed.  
#
# ----------------------------------------------------------------------------- 
#
      PARDO j, j1, j2, b 
#
            Tjjjb(j,j1,j2,b) = 0.0 
#
            GET Gmi_b(j,j2) 
            GET t1b_old(b,j1) 
            GET Gmi_b(j1,j2) 
            GET t1b_old(b,j) 
#
            T1jjjb(j,j1,j2,b)  = Gmi_b(j,j2)^t1b_old(b,j1) 
            T1jjjb(j,j1,j2,b) *= -0.125  
            Tjjjb(j,j1,j2,b)  += T1jjjb(j,j1,j2,b) 
#
            T1jjjb(j,j1,j2,b)  = Gmi_b(j1,j2)^t1b_old(b,j) 
            T1jjjb(j,j1,j2,b) *= 0.125  
            Tjjjb(j,j1,j2,b)  += T1jjjb(j,j1,j2,b) 
#
            DO b1 
#
               REQUEST Tau_bb(b1,j,b,j1)   b  
               REQUEST A2old_bb(j,b1,j1,b) b  
               REQUEST Vibja_bbbb(j,b1,j2,b)  b 
               REQUEST Vibja_bbbb(j1,b1,j2,b) b  
               GET t1b_old(b1,j) 
               GET t1b_old(b1,j1) 
               GET t1b_old(b1,j2) 
               GET a1b_old(j2,b1) 
#
               T1jjjb(j,j1,j2,b) = Tau_bb(b1,j,b,j1)*a1b_old(j2,b1) 
               T1jjjb(j,j1,j2,b)*= -0.125  
               Tjjjb(j,j1,j2,b) += T1jjjb(j,j1,j2,b) 
#
               T1jjjb(j,j1,j2,b) = A2old_bb(j,b1,j1,b)*t1b_old(b1,j2) 
               T1jjjb(j,j1,j2,b)*= -0.125  
               Tjjjb(j,j1,j2,b) += T1jjjb(j,j1,j2,b) 
#
               T1jjjb(j,j1,j2,b) = Vibja_bbbb(j,b1,j2,b)*t1b_old(b1,j1) 
               T1jjjb(j,j1,j2,b)*= 0.25  
               Tjjjb(j,j1,j2,b) += T1jjjb(j,j1,j2,b) 
#
               T1jjjb(j,j1,j2,b) = Vibja_bbbb(j1,b1,j2,b)*t1b_old(b1,j) 
               T1jjjb(j,j1,j2,b)*= -0.25  
               Tjjjb(j,j1,j2,b) += T1jjjb(j,j1,j2,b) 
#
            ENDDO b1 
#
            DO j3 
# 
               REQUEST Vijmn_bbbb(j,j1,j2,j3) j3  
               GET t1b_old(b,j3) 
#
               T1jjjb(j,j1,j2,b) = Vijmn_bbbb(j,j1,j2,j3)*t1b_old(b,j3) 
               T1jjjb(j,j1,j2,b)*= 0.125  
               Tjjjb(j,j1,j2,b) += T1jjjb(j,j1,j2,b) 
#
            ENDDO j3 

#TWODENS
           #DO sigma
           #   Tjjjx(j,j1,j2,sigma)      = Tjjjb(j,j1,j2,b)*cb(sigma,b)
           #   PREPARE Djjjx(j,j1,j2,sigma) += Tjjjx(j,j1,j2,sigma)
           #ENDDO sigma

#
# Multiply by 4 to match aces 
# --------------------------- 
#
            Tjjjb(j,j1,j2,b) *= 4.0 
#
            PREPARE Dijka_bbbb(j,j1,j2,b) += Tjjjb(j,j1,j2,b) 
#
      ENDPARDO j, j1, j2, b 

      ENDPROC  DIJKA
#
#-------------------------------------------------------------------------
#
#     ---------------
      PROC  DIJKA_EOM
#     ---------------
#
#
#       ij        ij  e       _ke  e
#      D   = 1/2 l   r  + 1/2 r   l  ; Note the 'transposition' of the 1st term
#       ka        ea  k        ij  a
#
#
      PARDO  a2, i, i1, a
         REQUEST               L2AA    (i,a2,i1,a) a2              # DIAJK piece
         REQUEST               RTAU_aa (a2,i,a,i1) a2
         t1iiaa (i,i1,a2,a)  = L2AA    (i,a2,i1,a)                 # DIAJK piece
         tiiaa  (i,i1,a2,a)  = RTAU_aa (a2,i,a,i1)
         t1iiaa (i,i1,a2,a) *= -0.5                                # DIAJK piece
         tiiaa  (i,i1,a2,a) *= -0.5
         DO i2
            GET  L1A (i2,a2)
            GET  R1A (a2,i2)
            tpppp  (i,i1,i2,a)  = tiiaa  (i,i1,a2,a) * L1A (i2,a2)
            t1pppp (i,i1,i2,a)  = t1iiaa (i,i1,a2,a) * R1A (a2,i2) # DIAJK piece
            tpppp  (i,i1,i2,a) += t1pppp (i,i1,i2,a)
            PREPARE  Dijka_aaaa (i,i1,i2,a) += tpppp (i,i1,i2,a)
         ENDDO i2
      ENDPARDO  a2, i, i1, a

      PARDO  b2, j, j1, b
         REQUEST               L2BB    (j,b2,j1,b) b2              # DIAJK pjece
         REQUEST               RTAU_bb (b2,j,b,j1) b2
         t1jjbb (j,j1,b2,b)  = L2BB    (j,b2,j1,b)                 # DIAJK pjece
         tjjbb  (j,j1,b2,b)  = RTAU_bb (b2,j,b,j1)
         t1jjbb (j,j1,b2,b) *= -0.5                                # DIAJK pjece
         tjjbb  (j,j1,b2,b) *= -0.5
         DO j2
            GET  L1B (j2,b2)
            GET  R1B (b2,j2)
            tqqqq  (j,j1,j2,b)  = tjjbb  (j,j1,b2,b) * L1B (j2,b2) 
            t1qqqq (j,j1,j2,b)  = t1jjbb (j,j1,b2,b) * R1B (b2,j2) # DIAJK pjece
            tqqqq  (j,j1,j2,b) += t1qqqq (j,j1,j2,b) 
            PREPARE  Dijka_bbbb (j,j1,j2,b) += tqqqq (j,j1,j2,b)
         ENDDO j2
      ENDPARDO  b2, j, j1, b

      PARDO  a2, i, j1, b
         REQUEST               L2AB    (i,a2,j1,b) a2              # DIAJK piece
         REQUEST               RTAU_ab (a2,i,b,j1) a2
         t1ijab (i,j1,a2,b)  = L2AB    (i,a2,j1,b)                 # DIAJK piece
         tijab  (i,j1,a2,b)  = RTAU_ab (a2,i,b,j1)
         t1ijab (i,j1,a2,b) *= -0.5                                # DIAJK piece
         tijab  (i,j1,a2,b) *= -0.5
         DO i2
            GET  R1A (a2,i2)                                       # DIAJK piece
            GET  L1A (i2,a2)
            tpqpq  (i,j1,i2,b)  = t1ijab (i,j1,a2,b) * R1A (a2,i2) # DIAJK piece
            t1pqpq (i,j1,i2,b)  = tijab  (i,j1,a2,b) * L1A (i2,a2)
            t1pqpq (i,j1,i2,b) += tpqpq  (i,j1,i2,b)
            PREPARE  Dijka_abab (i,j1,i2,b) += t1pqpq (i,j1,i2,b)
         ENDDO i2
      ENDPARDO  a2, i, j1, b

      PARDO  b2, j, i1, a
         REQUEST               L2AB    (i1,a,j,b2) b2              # DIAJK piece
         REQUEST               RTAU_ab (a,i1,b2,j) b2
         t1jiba (j,i1,b2,a)  = L2AB    (i1,a,j,b2)                 # DIAJK piece
         tjiba  (j,i1,b2,a)  = RTAU_ab (a,i1,b2,j)
         t1jiba (j,i1,b2,a) *= -0.5                                # DIAJK piece
         tjiba  (j,i1,b2,a) *= -0.5
         DO j2
            GET  R1B (b2,j2)                                       # DIAJK piece
            GET  L1B (j2,b2)
            tqpqp  (j,i1,j2,a)  = t1jiba (j,i1,b2,a) * R1B (b2,j2) # DIAJK piece
            t1qpqp (j,i1,j2,a)  = tjiba  (j,i1,b2,a) * L1B (j2,b2)
            t1qpqp (j,i1,j2,a) += tqpqp  (j,i1,j2,a)
            PREPARE  Dijka_baba (j,i1,j2,a) += t1qpqp (j,i1,j2,a)
         ENDDO j2
      ENDPARDO  b2, j, i1, a
#
#
#       ij        km  a _ef        km  a _ef
#      G   = 1/2 l   t  r   + 1/2 l   r  t
#       ka        ef  m  ij        ef  m  ij
#
#
      PARDO  a, a2, i2, a3
         taaia  (a2,a3,i2,a) = 0.0
         t1aaia (a2,a3,i2,a) = 0.0
         DO i3
            REQUEST                L2AA (i2,a2,i3,a3) a3
            GET                    R1A  (a,i3)
            GET                    t1a_old  (a,i3)
            taaii  (a2,a3,i2,i3) = L2AA (i2,a2,i3,a3)
            t2pppp (a2,a3,i2,a)  = taaii (a2,a3,i2,i3) * t1a_old (a,i3)
            t3pppp (a2,a3,i2,a)  = taaii (a2,a3,i2,i3) * R1A  (a,i3)
            taaia  (a2,a3,i2,a) += t2pppp (a2,a3,i2,a)
            t1aaia (a2,a3,i2,a) += t3pppp (a2,a3,i2,a)
         ENDDO i3
         DO i
         DO i1
            REQUEST               RTAU_aa (a2,i,a3,i1) i1
            REQUEST               TAU_aa  (a2,i,a3,i1) i1
            tiiaa  (i,i1,a2,a3) = RTAU_aa (a2,i,a3,i1)
            t1iiaa (i,i1,a2,a3) = TAU_aa  (a2,i,a3,i1)
            tpppp  (i,i1,i2,a)  = tiiaa  (i,i1,a2,a3) * taaia  (a2,a3,i2,a)
            t1pppp (i,i1,i2,a)  = t1iiaa (i,i1,a2,a3) * t1aaia (a2,a3,i2,a)
            tpppp  (i,i1,i2,a) += t1pppp (i,i1,i2,a)
           #tpppp  (i,i1,i2,a) *= -0.25
            tpppp  (i,i1,i2,a) *=  0.25
            PREPARE  Dijka_aaaa (i,i1,i2,a) += tpppp (i,i1,i2,a)
         ENDDO i1
         ENDDO i
      ENDPARDO  a, a2, i2, a3

      PARDO  b, b2, j2, b3
         tbbjb  (b2,b3,j2,b) = 0.0
         t1bbjb (b2,b3,j2,b) = 0.0
         DO j3
            REQUEST                L2BB (j2,b2,j3,b3) b3
            GET                    R1B  (b,j3)
            GET                    t1b_old  (b,j3)
            tbbjj  (b2,b3,j2,j3) = L2BB (j2,b2,j3,b3)
            t2qqqq (b2,b3,j2,b)  = tbbjj (b2,b3,j2,j3) * t1b_old (b,j3)
            t3qqqq (b2,b3,j2,b)  = tbbjj (b2,b3,j2,j3) * R1B  (b,j3)
            tbbjb  (b2,b3,j2,b) += t2qqqq (b2,b3,j2,b)
            t1bbjb (b2,b3,j2,b) += t3qqqq (b2,b3,j2,b)
         ENDDO j3
         DO j
         DO j1
            REQUEST               RTAU_bb (b2,j,b3,j1) j1
            REQUEST               TAU_bb  (b2,j,b3,j1) j1
            tjjbb  (j,j1,b2,b3) = RTAU_bb (b2,j,b3,j1)
            t1jjbb (j,j1,b2,b3) = TAU_bb  (b2,j,b3,j1)
            tqqqq  (j,j1,j2,b)  = tjjbb  (j,j1,b2,b3) * tbbjb  (b2,b3,j2,b)
            t1qqqq (j,j1,j2,b)  = t1jjbb (j,j1,b2,b3) * t1bbjb (b2,b3,j2,b)
            tqqqq  (j,j1,j2,b) += t1qqqq (j,j1,j2,b)
           #tqqqq  (j,j1,j2,b) *= -0.25
            tqqqq  (j,j1,j2,b) *=  0.25
            PREPARE  Dijka_bbbb (j,j1,j2,b) += tqqqq (j,j1,j2,b)
         ENDDO j1
         ENDDO j
      ENDPARDO  b, b2, j2, b3

      PARDO  b, i2, a2, b3
         tabib  (a2,b3,i2,b) = 0.0
         t1abib (a2,b3,i2,b) = 0.0
         DO j3
            REQUEST                L2AB (i2,a2,j3,b3) b3
            GET                    R1B  (b,j3)
            GET                    t1b_old  (b,j3)
            tabij  (a2,b3,i2,j3) = L2AB (i2,a2,j3,b3)
            t2pqpq (a2,b3,i2,b)  = tabij  (a2,b3,i2,j3) * t1b_old (b,j3)
            t3pqpq (a2,b3,i2,b)  = tabij  (a2,b3,i2,j3) * R1B  (b,j3)
            tabib  (a2,b3,i2,b) += t2pqpq (a2,b3,i2,b)
            t1abib (a2,b3,i2,b) += t3pqpq (a2,b3,i2,b)
         ENDDO j3
         DO i
         DO j1
            REQUEST               RTAU_ab (a2,i,b3,j1) j1
            REQUEST               TAU_ab  (a2,i,b3,j1) j1
            tijab  (i,j1,a2,b3) = RTAU_ab (a2,i,b3,j1)
            t1ijab (i,j1,a2,b3) = TAU_ab  (a2,i,b3,j1)
            tpqpq  (i,j1,i2,b)  = tijab  (i,j1,a2,b3) * tabib  (a2,b3,i2,b)
            t1pqpq (i,j1,i2,b)  = t1ijab (i,j1,a2,b3) * t1abib (a2,b3,i2,b)
            tpqpq  (i,j1,i2,b) += t1pqpq (i,j1,i2,b)
           #tpqpq  (i,j1,i2,b) *= -0.5
            tpqpq  (i,j1,i2,b) *=  0.5
            PREPARE  Dijka_abab (i,j1,i2,b) += tpqpq (i,j1,i2,b)
         ENDDO j1
         ENDDO i
      ENDPARDO  b, i2, a2, b3

      PARDO  a, j2, b2, a3
         tbaja  (b2,a3,j2,a) = 0.0
         t1baja (b2,a3,j2,a) = 0.0
         DO i3
            REQUEST                L2AB (i3,a3,j2,b2) i3
            GET                    R1A  (a,i3)
            GET                    t1a_old  (a,i3)
            tbaji  (b2,a3,j2,i3) = L2AB (i3,a3,j2,b2)
            t2qpqp (b2,a3,j2,a)  = tbaji  (b2,a3,j2,i3) * t1a_old (a,i3)
            t3qpqp (b2,a3,j2,a)  = tbaji  (b2,a3,j2,i3) * R1A  (a,i3)
            tbaja  (b2,a3,j2,a) += t2qpqp (b2,a3,j2,a)
            t1baja (b2,a3,j2,a) += t3qpqp (b2,a3,j2,a)
         ENDDO i3
         DO j
         DO i1
            REQUEST               RTAU_ab (a3,i1,b2,j) i1
            REQUEST               TAU_ab  (a3,i1,b2,j) i1
            tjiba  (j,i1,b2,a3) = RTAU_ab (a3,i1,b2,j)
            t1jiba (j,i1,b2,a3) = TAU_ab  (a3,i1,b2,j)
            tqpqp  (j,i1,j2,a)  = tjiba  (j,i1,b2,a3) * tbaja  (b2,a3,j2,a)
            t1qpqp (j,i1,j2,a)  = t1jiba (j,i1,b2,a3) * t1baja (b2,a3,j2,a)
            tqpqp  (j,i1,j2,a) += t1qpqp (j,i1,j2,a)
           #tqpqp  (j,i1,j2,a) *= -0.5
            tqpqp  (j,i1,j2,a) *=  0.5
            PREPARE  Dijka_baba (j,i1,j2,a) += tqpqp (j,i1,j2,a)
         ENDDO i1
         ENDDO j
      ENDPARDO  a, j2, b2, a3
#
#
#       ij                ef  mk    a          ef  mk    a
#      G   = 1/4 P(ij) ( r   l   ) t  + 1/4 ( t   l   ) r
#       ka                im  ef    j          im  ef    j
#
#
      PARDO  i, i2, i1, a
         GET  R1A (a,i1)
         GET  t1a_old (a,i1)

         tpppp  (i,i2,i1,a)  = LR2L2_ii (i2,i) ^ t1a_old (a,i1)
         t1pppp (i,i2,i1,a)  = LT2L2_ii (i2,i) ^ R1A  (a,i1)
         tpppp  (i,i2,i1,a) += t1pppp (i,i2,i1,a)

         t2pppp (i,i1,i2,a)  = tpppp  (i,i2,i1,a)
         t3pppp (i1,i,i2,a)  = t2pppp (i,i1,i2,a)
         t2pppp (i,i1,i2,a) *= -0.5
         t3pppp (i1,i,i2,a) *=  0.5
         PREPARE  Dijka_aaaa (i,i1,i2,a) += t2pppp (i,i1,i2,a)
         PREPARE  Dijka_aaaa (i1,i,i2,a) += t3pppp (i1,i,i2,a)
      ENDPARDO  i, i2, i1, a

      PARDO  j, j2, j1, b
         GET  R1B (b,j1)
         GET  t1b_old (b,j1)

         tqqqq  (j,j2,j1,b)  = LR2L2_jj (j2,j) ^ t1b_old (b,j1)
         t1qqqq (j,j2,j1,b)  = LT2L2_jj (j2,j) ^ R1B  (b,j1)
         tqqqq  (j,j2,j1,b) += t1qqqq (j,j2,j1,b)
         
         t2qqqq (j,j1,j2,b)  = tqqqq  (j,j2,j1,b)
         t3qqqq (j1,j,j2,b)  = t2qqqq (j,j1,j2,b)
         t2qqqq (j,j1,j2,b) *= -0.5
         t3qqqq (j1,j,j2,b) *=  0.5
         PREPARE  Dijka_bbbb (j,j1,j2,b) += t2qqqq (j,j1,j2,b)
         PREPARE  Dijka_bbbb (j1,j,j2,b) += t3qqqq (j1,j,j2,b)
      ENDPARDO  j, j2, j1, b

      PARDO  i, i2, j1, b
         GET  R1B (b,j1)
         GET  t1b_old (b,j1)
         tppqq  (i2,i,b,j1)  = LR2L2_ii (i2,i) ^ t1b_old (b,j1)
         t1ppqq (i2,i,b,j1)  = LT2L2_ii (i2,i) ^ R1B  (b,j1)
         tppqq  (i2,i,b,j1) += t1ppqq (i2,i,b,j1)

         tpqpq  (i,j1,i2,b)  = tppqq  (i2,i,b,j1)
         tpqpq  (i,j1,i2,b) *= -0.5
         PREPARE  Dijka_abab (i,j1,i2,b) += tpqpq (i,j1,i2,b)
      ENDPARDO  i, i2, j1, b

      PARDO  j, j2, i1, a
         GET  R1A (a,i1)
         GET  t1a_old (a,i1)
         tqqpp  (j2,j,a,i1)  = LR2L2_jj (j2,j) ^ t1a_old (a,i1)
         t1qqpp (j2,j,a,i1)  = LT2L2_jj (j2,j) ^ R1A  (a,i1)
         tqqpp  (j2,j,a,i1) += t1qqpp (j2,j,a,i1)

         tqpqp  (j,i1,j2,a)  = tqqpp  (j2,j,a,i1)
         tqpqp  (j,i1,j2,a) *= -0.5
         PREPARE  Dijka_baba (j,i1,j2,a) += tqpqp (j,i1,j2,a)
      ENDPARDO  j, j2, i1, a
#
#
#       ij              d    km  ea          d    km  ea
#      G   = 1/2 P(ij) t  ( l   r   ) + 1/2 r  ( l   t   )
#       ka              i    de  mj          i    de  mj
#
#
#           Note, these rings are used in Dabci and Dibja...
#
#
      PARDO  a2, i2, a, i1
         REQUEST               L2T2_aaaa (i1,a2,i2,a) a2
         REQUEST               L2R2_aaaa (i1,a2,i2,a) a2
         taiia  (a2,i1,i2,a) = L2R2_aaaa (i1,a2,i2,a)
         t1aiia (a2,i1,i2,a) = L2T2_aaaa (i1,a2,i2,a)
         DO i
            GET  R1A (a2,i)
            GET  t1a_old (a2,i)
            tpppp  (i,i1,i2,a)  = t1a_old (a2,i) * taiia  (a2,i1,i2,a)
            t1pppp (i,i1,i2,a)  = R1A  (a2,i) * t1aiia (a2,i1,i2,a)
            tpppp  (i,i1,i2,a) += t1pppp (i,i1,i2,a)
            tpppp  (i,i1,i2,a) *= -0.5

            t2pppp (i1,i,i2,a)  = tpppp (i,i1,i2,a)
            t2pppp (i1,i,i2,a) *= -1.0

            PREPARE  Dijka_aaaa (i,i1,i2,a) += tpppp  (i,i1,i2,a)
            PREPARE  Dijka_aaaa (i1,i,i2,a) += t2pppp (i1,i,i2,a)
         ENDDO i
      ENDPARDO  a2, i2, a, i1

      PARDO  b2, j2, b, j1
         REQUEST               L2T2_bbbb (j1,b2,j2,b) b2
         REQUEST               L2R2_bbbb (j1,b2,j2,b) b2
         tbjjb  (b2,j1,j2,b) = L2R2_bbbb (j1,b2,j2,b)
         t1bjjb (b2,j1,j2,b) = L2T2_bbbb (j1,b2,j2,b)
         DO j
            GET  R1B (b2,j)
            GET  t1b_old (b2,j)
            tqqqq  (j,j1,j2,b)  = t1b_old (b2,j) * tbjjb  (b2,j1,j2,b)
            t1qqqq (j,j1,j2,b)  = R1B  (b2,j) * t1bjjb (b2,j1,j2,b)
            tqqqq  (j,j1,j2,b) += t1qqqq (j,j1,j2,b)
            tqqqq  (j,j1,j2,b) *= -0.5

            t2qqqq (j1,j,j2,b)  = tqqqq (j,j1,j2,b)
            t2qqqq (j1,j,j2,b) *= -1.0

            PREPARE  Dijka_bbbb (j,j1,j2,b) += tqqqq  (j,j1,j2,b)
            PREPARE  Dijka_bbbb (j1,j,j2,b) += t2qqqq (j1,j,j2,b)
         ENDDO j
      ENDPARDO  b2, j2, b, j1

      PARDO  a2, i2, b, j1
         REQUEST               L2T2_baab (j1,a2,i2,b) a2
         REQUEST               L2R2_baab (j1,a2,i2,b) a2
         tajib  (a2,j1,i2,b) = L2R2_baab (j1,a2,i2,b)
         t1ajib (a2,j1,i2,b) = L2T2_baab (j1,a2,i2,b)
         DO i
            GET  R1A (a2,i)
            GET  t1a_old (a2,i)
            tpqpq  (i,j1,i2,b)  = t1a_old (a2,i) * tajib  (a2,j1,i2,b)
            t1pqpq (i,j1,i2,b)  = R1A  (a2,i) * t1ajib (a2,j1,i2,b)
            tpqpq  (i,j1,i2,b) += t1pqpq (i,j1,i2,b)
            tpqpq  (i,j1,i2,b) *= -0.5
            PREPARE  Dijka_abab (i,j1,i2,b) += tpqpq (i,j1,i2,b)
         ENDDO i
      ENDPARDO  a2, i2, b, j1

      PARDO  b2, b, i, i2
         REQUEST              L2T2_abab (i,b,i2,b2) b2
         REQUEST              L2R2_abab (i,b,i2,b2) b2
         tibib  (i,b2,i2,b) = L2R2_abab (i,b,i2,b2)
         t1ibib (i,b2,i2,b) = L2T2_abab (i,b,i2,b2)
         DO j1
            GET  R1B (b2,j1)
            GET  t1b_old (b2,j1)
            tpqpq  (i,j1,i2,b)  = t1b_old (b2,j1) * tibib  (i,b2,i2,b)
            t1pqpq (i,j1,i2,b)  = R1B  (b2,j1) * t1ibib (i,b2,i2,b)
            tpqpq  (i,j1,i2,b) += t1pqpq (i,j1,i2,b)
            tpqpq  (i,j1,i2,b) *=  0.5
            PREPARE  Dijka_abab (i,j1,i2,b) += tpqpq (i,j1,i2,b)
         ENDDO j1
      ENDPARDO  b2, b, i, i2

      PARDO  b2, j2, a, i1
         REQUEST               L2T2_abba (i1,b2,j2,a) b2
         REQUEST               L2R2_abba (i1,b2,j2,a) b2
         tbija  (b2,i1,j2,a) = L2R2_abba (i1,b2,j2,a)
         t1bija (b2,i1,j2,a) = L2T2_abba (i1,b2,j2,a)
         DO j
            GET  R1B (b2,j)
            GET  t1b_old (b2,j)
            tqpqp  (j,i1,j2,a)  = t1b_old (b2,j) * tbija  (b2,i1,j2,a)
            t1qpqp (j,i1,j2,a)  = R1B  (b2,j) * t1bija (b2,i1,j2,a)
            tqpqp  (j,i1,j2,a) += t1qpqp (j,i1,j2,a)
            tqpqp  (j,i1,j2,a) *= -0.5
            PREPARE  Dijka_baba (j,i1,j2,a) += tqpqp (j,i1,j2,a)
         ENDDO j
      ENDPARDO  b2, j2, a, i1

      PARDO  a2, a, j, j2
         REQUEST              L2T2_baba (j,a,j2,a2) a2
         REQUEST              L2R2_baba (j,a,j2,a2) a2
         tjaja  (j,a2,j2,a) = L2R2_baba (j,a,j2,a2)
         t1jaja (j,a2,j2,a) = L2T2_baba (j,a,j2,a2)
         DO i1
            GET  R1A (a2,i1)
            GET  t1a_old (a2,i1)
            tqpqp  (j,i1,j2,a)  = t1a_old (a2,i1) * tjaja  (j,a2,j2,a)
            t1qpqp (j,i1,j2,a)  = R1A  (a2,i1) * t1jaja (j,a2,j2,a)
            tqpqp  (j,i1,j2,a) += t1qpqp (j,i1,j2,a)
            tqpqp  (j,i1,j2,a) *=  0.5
            PREPARE  Dijka_baba (j,i1,j2,a) += tqpqp (j,i1,j2,a)
         ENDDO i1
      ENDPARDO  a2, a, j, j2
#
#
#       ij         f    kn _ea
#      G   = -1/2 r  ( l   t   )
#       ka         n    ef  ij
#
#
      PARDO  a2, i, a, i1
         REQUEST             TAU_aa  (a2,i,a,i1) a2
         tiiaa (i,i1,a2,a) = TAU_aa  (a2,i,a,i1)
         DO i2
            tpppp (i,i1,i2,a)  = tiiaa (i,i1,a2,a) * LR1L2_ai (a2,i2)
           #tpppp (i,i1,i2,a) *= -0.25
            tpppp (i,i1,i2,a) *= -0.5
            PREPARE  Dijka_aaaa (i,i1,i2,a) += tpppp (i,i1,i2,a)
         ENDDO i2
      ENDPARDO  a2, i, a, i1

      PARDO  b2, j, b, j1
         REQUEST             TAU_bb  (b2,j,b,j1) b2
         tjjbb (j,j1,b2,b) = TAU_bb  (b2,j,b,j1) 
         DO j2 
            tqqqq (j,j1,j2,b)  = tjjbb (j,j1,b2,b) * LR1L2_bj (b2,j2)
           #tqqqq (j,j1,j2,b) *= -0.25
            tqqqq (j,j1,j2,b) *= -0.5
            PREPARE  Dijka_bbbb (j,j1,j2,b) += tqqqq (j,j1,j2,b)
         ENDDO j2
      ENDPARDO  b2, j, b, j1

      PARDO  a2, i, b, j1
         REQUEST             TAU_ab (a2,i,b,j1) a2
         tijab (i,j1,a2,b) = TAU_ab (a2,i,b,j1)
         DO i2
            tpqpq (i,j1,i2,b)  = tijab (i,j1,a2,b) * LR1L2_ai (a2,i2)
           #tpqpq (i,j1,i2,b) *= -0.25
            tpqpq (i,j1,i2,b) *= -0.5
            PREPARE  Dijka_abab (i,j1,i2,b) += tpqpq (i,j1,i2,b)
         ENDDO i2
      ENDPARDO  a2, i, b, j1

      PARDO  b2, j, a, i1
         REQUEST             TAU_ab (a,i1,b2,j) b2
         tjiba (j,i1,b2,a) = TAU_ab (a,i1,b2,j)
         DO j2
            tqpqp (j,i1,j2,a)  = tjiba (j,i1,b2,a) * LR1L2_bj (b2,j2)
           #tqpqp (j,i1,j2,a) *= -0.25
            tqpqp (j,i1,j2,a) *= -0.5
            PREPARE  Dijka_baba (j,i1,j2,a) += tqpqp (j,i1,j2,a)
         ENDDO j2
      ENDPARDO  b2, j, a, i1
#
#
#          ...ready!
#     
#     
      ENDPROC  DIJKA_EOM
#-------------------------------------------------------------------------





# ----------------------------------------------------------------------------
#
# In this superprocedure the particle-particle block of the relaxed density 
# matrix is computed. The expressions programmed are: 
# 
# D_{ab} = 1/4 P_+(ab) t^{ae}_{mn} \lambda^{mn}_{be}  
#        + 1/4 P_+(ab) t^{aE}_{mN} \lambda^{mN}_{bE}  
#        + 1/2 P_+(ab) t^{a}_{m} \lambda^{m}_{b} 
#
# D_{AB} = D_{ab} [a<-->A, b<-->B, i<-->I, j<-->J, m<-->M, n<-->N] 
#
      PROC DABA 
#     --------- 
#
      PARDO a, a1, i  
#
            GET t1a_old(a,i) 
            GET a1a_old(i,a1) 
#
            Taa(a,a1)        = t1a_old(a,i)*a1a_old(i,a1) 
            Taa(a,a1)       *= 0.5 
            T1aa(a1,a)       = Taa(a,a1)  
            PUT Dab_a(a,a1) += Taa(a,a1) 
            PUT Dab_a(a1,a) += T1aa(a1,a) 
#
            DO a2 
            DO i1 
#
               REQUEST T2old_aa(a,i,a2,i1) i1  
               REQUEST A2old_aa(i,a1,i1,a2) a2  
#
               Taa(a,a1)        = T2old_aa(a,i,a2,i1)*A2old_aa(i,a1,i1,a2)

               Taa (a,a1) *= -0.5 # Watson
               PUT  T2L2_VV_A (a,a1) += Taa (a,a1) # Watson

              #Taa(a,a1)       *= 0.25 
               Taa(a,a1)       *= -0.5  # Watson

               T1aa(a1,a)       = Taa(a,a1)  
               PUT Dab_a(a,a1) += Taa(a,a1) 
               PUT Dab_a(a1,a) += T1aa(a1,a) 
#
            ENDDO i1 
            ENDDO a2 
#
            DO b 
            DO j 
#
               REQUEST T2old_ab(a,i,b,j) j  
               REQUEST A2old_ab(i,a1,j,b) j  
#
               Taa(a,a1)        = T2old_ab(a,i,b,j)*A2old_ab(i,a1,j,b)

               Taa(a,a1)       *= -1.0
               PUT  T2L2_VV_A (a,a1) += Taa (a,a1) # Watson

               Taa(a,a1)       *= -0.5

               T1aa(a1,a)       = Taa(a,a1)  
               PUT Dab_a(a,a1) += Taa(a,a1) 
               PUT Dab_a(a1,a) += T1aa(a1,a) 
#
            ENDDO j 
            ENDDO b 
#
      ENDPARDO a, a1, i  
#
      ENDPROC DABA 
#     ------------ 
#
      PROC DABB 
#     --------- 
#
      PARDO b1, b, j  
#
            GET t1b_old(b1,j) 
            GET a1b_old(j,b) 
#
            Tbb(b1,b)        = t1b_old(b1,j)*a1b_old(j,b) 
            Tbb(b1,b)       *= 0.5 
            T1bb(b,b1)       = Tbb(b1,b)  
            PUT Dab_b(b1,b) += Tbb(b1,b) 
            PUT Dab_b(b,b1) += T1bb(b,b1) 
#
            DO b2 
            DO j1 
#
               REQUEST T2old_bb(b1,j,b2,j1) j1  
               REQUEST A2old_bb(j,b,j1,b2)  j1  
#
               Tbb(b1,b)        = T2old_bb(b1,j,b2,j1)*A2old_bb(j,b,j1,b2)

               Tbb (b,b1) *= -0.5 # Watson
               PUT  T2L2_VV_B (b,b1) += Tbb (b,b1) # Watson

              #Tbb(b,b1)       *= 0.25 
               Tbb(b,b1)       *= -0.5  # Watson

               T1bb(b,b1)       = Tbb(b1,b)  
               PUT Dab_b(b1,b) += Tbb(b1,b) 
               PUT Dab_b(b,b1) += T1bb(b,b1) 
#
            ENDDO j1 
            ENDDO b2 
#
            DO a 
            DO i 
#
               REQUEST T2old_ab(a,i,b1,j) j  
               REQUEST A2old_ab(i,a,j,b)  j  
#
               Tbb(b1,b)        = T2old_ab(a,i,b1,j)*A2old_ab(i,a,j,b)

               Tbb(b,b1)       *= -1.0
               PUT  T2L2_VV_B (b,b1) += Tbb (b,b1) # Watson

               Tbb(b,b1)       *= -0.5

               T1bb(b,b1)       = Tbb(b1,b)  
               PUT Dab_b(b1,b) += Tbb(b1,b) 
               PUT Dab_b(b,b1) += T1bb(b,b1) 
#
            ENDDO i 
            ENDDO a 
#
      ENDPARDO b1, b, j  
#
      ENDPROC DABB 
#     ------------ 
#
# ----------------------------------------------------------------------------
#
      PROC DAB 
           CALL DABA 
           CALL DABB 
      ENDPROC DAB 
#
# --------------------------------------------------------------------------- 
#
# In this superprocedure the occupied-occupied block of the relaxed
# density matrix is computed. The expressions programmed are:
#
# D_{ij} = -1/4 P_+(ij) t^{ef}_{im} \lambda^{jm}_{ef} 
#          -1/4 P_+(ij) t^{eF}_{iM} \lambda^{jM}_{eF}   
#          -1/2 P_+(ij) t^{e}_{i} \lambda^{j}_{e}   
#
# D_{IJ} = D_{ij} [i<-->I, j<-->J, e<-->E, f<-->F] 
#
# --------------------------------------------------------------------------- 
#
      PROC DIJA 
#     --------- 
#
      PARDO a, a1, i2 
#
            DO i 
#
               REQUEST T2old_aa(a,i,a1,i2) i2  
#
               DO i1 
#
                  REQUEST A2old_aa(i1,a,i2,a1) a1  
#
                  Tii(i,i1)        = T2old_aa(a,i,a1,i2)*A2old_aa(i1,a,i2,a1) 
                  Tii(i,i1)       *= -0.5   
                  PUT  T2L2_OO_A (i,i1) += Tii (i,i1) # Watson
                  
                  Tii(i,i1)       *=  0.5    # Watson
                 #Tii(i,i1)       *= -0.25    # Watson
                  T1ii(i1,i)       = Tii(i,i1) 
                  PUT Dij_a(i,i1) += Tii(i,i1) 
                  PUT Dij_a(i1,i) += T1ii(i1,i) 
#
               ENDDO i1 
#
            ENDDO i 
#
      ENDPARDO a, a1, i2 
#
      PARDO a, b, j 
#
            DO i 
#
               REQUEST T2old_ab(a,i,b,j) j 
#
               DO i1 
#
                  REQUEST A2old_ab(i1,a,j,b) b  
#
                  Tii(i,i1)        = T2old_ab(a,i,b,j)*A2old_ab(i1,a,j,b) 
                  Tii(i,i1)       *= -1.0
                  PUT  T2L2_OO_A (i,i1) += Tii (i,i1) # Watson
                  Tii(i,i1)       *=  0.5   
                  T1ii(i1,i)       = Tii(i,i1) 
                  PUT Dij_a(i,i1) += Tii(i,i1) 
                  PUT Dij_a(i1,i) += T1ii(i1,i) 
#
               ENDDO i1 
#
            ENDDO i 
#
      ENDPARDO a, b, j 
#
      PARDO a, i, i1  
#
            GET t1a_old(a,i) 
            GET a1a_old(i1,a) 
#
            Tii(i,i1)        = a1a_old(i1,a)*t1a_old(a,i) 

            Tii(i,i1)       *= -1.0
            PUT  T1L1_OO_A (i,i1) += Tii (i,i1) # Watson

            Tii(i,i1)       *=  0.5   
            T1ii(i1,i)       = Tii(i,i1) 
            PUT Dij_a(i,i1) += Tii(i,i1) 
            PUT Dij_a(i1,i) += T1ii(i1,i) 
#
      ENDPARDO a, i, i1  
#
      ENDPROC DIJA 
#     ------------ 
#
      PROC DIJB 
#     --------- 
#
      PARDO b, b1, j2 
#
            DO j1 
            DO j 
#
               REQUEST A2old_bb(j,b,j2,b1)  j2  
               REQUEST T2old_bb(b,j1,b1,j2) j2  
#
               Tjj(j1,j)        = T2old_bb(b,j1,b1,j2)*A2old_bb(j,b,j2,b1) 
               Tjj(j,j1)       *= -0.5   
               PUT  T2L2_OO_B (j,j1) += Tjj (j,j1) # Watson
                  
               Tjj(j,j1)       *=  0.5    # Watson
              #Tjj(j,j1)       *= -0.25    # Watson
               T1jj(j,j1)       = Tjj(j1,j) 
               PUT Dij_b(j1,j) += Tjj(j1,j) 
               PUT Dij_b(j,j1) += T1jj(j,j1) 
#
            ENDDO j 
            ENDDO j1 
#
      ENDPARDO b, b1, j2 
#
      PARDO b, a, i 
#
            DO j1 
#
               REQUEST T2old_ab(a,i,b,j1) j1  
#
               DO j 
#
                  REQUEST A2old_ab(i,a,j,b) b  
#
                  Tjj(j1,j)        = T2old_ab(a,i,b,j1)*A2old_ab(i,a,j,b) 
                  Tjj(j,j1)       *= -1.0
                  PUT  T2L2_OO_B (j,j1) += Tjj (j,j1) # Watson
                  Tjj(j,j1)       *=  0.5
                  T1jj(j,j1)       = Tjj(j1,j) 
                  PUT Dij_b(j1,j) += Tjj(j1,j) 
                  PUT Dij_b(j,j1) += T1jj(j,j1) 
#
               ENDDO j 
#
            ENDDO j1 
#
      ENDPARDO b, a, i 
#
      PARDO b, j, j1  
#
            GET t1b_old(b,j1) 
            GET a1b_old(j,b) 
#
            Tjj(j1,j)        = a1b_old(j,b)*t1b_old(b,j1) 


            Tjj(j,j1)       *= -1.0
            PUT  T1L1_OO_B (j,j1) += Tjj (j,j1) # Watson

            Tjj(j,j1)       *=  0.5   
            T1jj(j,j1)       = Tjj(j1,j) 
            PUT Dij_b(j1,j) += Tjj(j1,j) 
            PUT Dij_b(j,j1) += T1jj(j,j1) 
#
      ENDPARDO b, j, j1  
#
      ENDPROC DIJB 
#     ------------ 
#
      PROC DIJ 
#     ----------- 
           CALL DIJA 
           CALL DIJB 
      ENDPROC DIJ 
#     ----------- 



# ----------------------------------------------------------------------------
#
#     ---------
      PROC  DOV
#     ---------
#
      PARDO  i, a
         GET  A1A_old (i,a)
         tai  (a,i)  = A1A_old (i,a)
         tai  (a,i) *= 0.5
         PUT  Dai  (a,i) += tai (a,i)
      ENDPARDO  i, a

      PARDO  j, b
         GET  A1B_old (j,b)
         tbj  (b,j)  = A1B_old (j,b)
         tbj  (b,j) *= 0.5       
         PUT  Dbj  (b,j) += tbj (b,j)
      ENDPARDO  j, b

      PARDO  a, i
         t1ai(a,i) = 0.0
         DO i1
            GET  T1L1_OO_A (i,i1)
            GET  T2L2_OO_A (i,i1)

            tii (i,i1)  = T1L1_OO_A (i,i1)
            tii (i,i1) += T2L2_OO_A (i,i1)

            tai (a,i)   = ST1A (a,i1) * tii (i,i1)
            tai (a,i)  *= 0.5
            t1ai(a,i) += tai(a,i)
         ENDDO i1
         PUT  Dai (a,i) += t1ai (a,i)
      ENDPARDO  a, i

      PARDO  b, j
         t1bj(b,j) = 0.0
         DO j1
            GET  T1L1_OO_B (j,j1)
            GET  T2L2_OO_B (j,j1)

            tjj (j,j1)  = T1L1_OO_B (j,j1)
            tjj (j,j1) += T2L2_OO_B (j,j1)

            tbj (b,j)   = ST1B (b,j1) * tjj (j,j1)
            tbj (b,j)  *= 0.5
            t1bj(b,j) += tbj(b,j)
         ENDDO j1
         PUT  Dbj (b,j) += t1bj (b,j)
      ENDPARDO  b, j

      PARDO  a, a1, i
            GET               T2L2_VV_A (a,a1)
            tai (a,i)       = T2L2_VV_A (a,a1) * ST1A (a1,i)
            tai (a,i)      *= 0.5
            PUT  Dai (a,i) += tai (a,i)
      ENDPARDO  a, a1, i

      PARDO  b, b1, j
            GET               T2L2_VV_B (b,b1)
            tbj (b,j)       = T2L2_VV_B (b,b1) * ST1B (b1,j)
            tbj (b,j)      *= 0.5
            PUT  Dbj (b,j) += tbj (b,j)
      ENDPARDO  b, b1, j

      PARDO  a1, i1
         GET  A1A_old (i1,a1)
         DO a
            DO i
               REQUEST           T2old_aa (a,i,a1,i1) i
               tai  (a,i)      = T2old_aa (a,i,a1,i1) * A1A_old (i1,a1)
               tai  (a,i)     *= 0.5
               PUT  Dai (a,i) += tai (a,i)
            ENDDO i
         ENDDO a
      ENDPARDO  a1, i1

      PARDO  b1, j1
         GET  A1B_old (j1,b1)
         DO b
            DO j
               REQUEST           T2old_bb (b,j,b1,j1) j
               tbj  (b,j)      = T2old_bb (b,j,b1,j1) * A1B_old (j1,b1)
               tbj  (b,j)     *= 0.5
               PUT  Dbj (b,j) += tbj (b,j)
            ENDDO j
         ENDDO b
      ENDPARDO  b1, j1

      PARDO  b, j
         GET  A1B_old (j,b)
         DO a
            DO i
               REQUEST           T2old_ab (a,i,b,j) i
               tai  (a,i)      = T2old_ab (a,i,b,j) * A1B_old (j,b)
               tai  (a,i)     *= 0.5
               PUT  Dai (a,i) += tai (a,i)
            ENDDO i
         ENDDO a
      ENDPARDO  b, j

      PARDO  a, i
         GET  A1A_old (i,a)
         DO b
            DO j
               REQUEST           T2old_ab (a,i,b,j) i
               tbj  (b,j)      = A1A_old (i,a) * T2old_ab (a,i,b,j)
               tbj  (b,j)     *= 0.5
               PUT  Dbj (b,j) += tbj (b,j)
            ENDDO j
         ENDDO b
      ENDPARDO  a, i
#
#
#
#     ...ready!
#
#
      ENDPROC  DOV
# ----------------------------------------------------------------------------





# ----------------------------------------------------------------------------
# 
     PROC I11 
#    -------- 
#
# Calculate contribution to Iai_aa 
# -------------------------------- 
#
     PARDO a, i, i1, i2  
#
           REQUEST VSpipi(a,i2,i1,i) i
           GET Dij_a(i1,i2) 
#
           Tpppp(a,i,i1,i2)  = VSpipi(a,i2,i1,i) 
           Tai(a,i)          = Tpppp(a,i,i1,i2)*Dij_a(i1,i2) 
           Tai(a,i)         *= -1.0  
           PUT Iai_aa(a,i)  += Tai(a,i) 
#
     ENDPARDO a, i, i1, i2  
#
     PARDO a, j, j1, i 
#
           REQUEST Vpiqj(a,i,j,j1) j1  
           GET Dij_b(j,j1) 
#
           Tai(a,i)         = Vpiqj(a,i,j,j1)*Dij_b(j,j1) 
           PUT Iai_aa(a,i) += Tai(a,i) 
#
     ENDPARDO a, j, j1, i 
#
     PARDO a, a1, a2, i 
#
           REQUEST VSaaai(a,a1,a2,i) i
           GET Dab_a(a2,a1) 
#
           Tpppp(a,i,a2,a1)  = VSaaai(a,a1,a2,i) 
           Tai(a,i)          = Tpppp(a,i,a2,a1)*Dab_a(a2,a1) 
           Tai(a,i)         *= -1.0   
           PUT Iai_aa(a,i)  += Tai(a,i) 
#
     ENDPARDO a, a1, a2, i 
#
     PARDO a, b, b1, i 
#
           REQUEST Vbbai(b1,b,a,i) i
           GET Dab_b(b1,b) 
#
           Tai(a,i)         = Vbbai(b1,b,a,i)*Dab_b(b1,b) 
           PUT Iai_aa(a,i) += Tai(a,i) 
#
     ENDPARDO a, b, b1, i 
#
# Done contribution to Iai_aa 
# --------------------------- 
#
# Calculate contribution to Iai_bb 
# -------------------------------- 
#
     PARDO b, j1, j2, j 
#
           REQUEST VSqjqj(b,j1,j2,j) j
           GET Dij_b(j1,j2) 
#
           Tqqqq(b,j,j1,j2)  = VSqjqj(b,j1,j2,j) 
           Tbj(b,j)          = Tqqqq(b,j,j1,j2)*Dij_b(j1,j2) 
           Tbj(b,j)         *= -1.0   
           PUT Iai_bb(b,j)  += Tbj(b,j) 
#
     ENDPARDO b, j1, j2, j 
#
     PARDO b, i, i1, j 
#
           REQUEST Vpiqj(i1,i,b,j) j
           GET Dij_a(i,i1) 
#
           Tbj(b,j)         = Vpiqj(i1,i,b,j)*Dij_a(i,i1) 
           PUT Iai_bb(b,j) += Tbj(b,j) 
#
     ENDPARDO b, i, i1, j 
#
     PARDO b, b1, b2, j 
#
           REQUEST VSbbbj(b,b1,b2,j) j
           GET Dab_b(b1,b2) 
#
           Tqqqq(b,j,b1,b2)  = VSbbbj(b,b1,b2,j) 
           Tbj(b,j)          = Tqqqq(b,j,b1,b2)*Dab_b(b1,b2) 
           Tbj(b,j)         *= -1.0   
           PUT Iai_bb(b,j)  += Tbj(b,j) 
#
     ENDPARDO b, b1, b2, j 
#
     PARDO b, a, a1, j 
#
           REQUEST Vaabj(a1,a,b,j) j  
           GET Dab_a(a,a1) 
#
           Tbj(b,j)         = Vaabj(a1,a,b,j)*Dab_a(a,a1) 
           PUT Iai_bb(b,j) += Tbj(b,j) 
#
     ENDPARDO b, a, a1, j 
#
# Done contribution to Iai_bb 
# --------------------------- 
#
# Compute contribution to Iij_aa 
# ------------------------------ 
#
#     Dab contribution 
#     ---------------- 
#
      PARDO a, a1, i, i1 
#
            REQUEST Vaaii(a,a1,i,i1) i1  
            REQUEST Viaai(i,a1,a,i1) i1  
            REQUEST Vaaii(a,a1,i1,i) i1  
            REQUEST Viaai(i1,a1,a,i) i
            GET Dab_a(a,a1) 
#
            Tpppp(i,i1,a,a1)  = Vaaii(a,a1,i,i1)  
            T1pppp(i,i1,a,a1) = Viaai(i,a1,a,i1)  
            T2pppp(i,i1,a,a1) = Vaaii(a,a1,i1,i)  
            T3pppp(i,i1,a,a1) = Viaai(i1,a1,a,i) 
#
            Tpppp(i,i1,a,a1) -= T1pppp(i,i1,a,a1)  
            Tpppp(i,i1,a,a1) += T2pppp(i,i1,a,a1)  
            Tpppp(i,i1,a,a1) -= T3pppp(i,i1,a,a1)  
#
            Tii(i,i1)         = Tpppp(i,i1,a,a1)*Dab_a(a,a1) 
            Tii(i,i1)        *= -0.5  
            PUT Iij_aa(i,i1) += Tii(i,i1) 
#
      ENDPARDO a, a1, i, i1 
#
      PARDO b, b1, i, i1 
#
            REQUEST Vbbii(b,b1,i,i1) b1  
            REQUEST Vbbii(b,b1,i1,i) b1  
            GET Dab_b(b,b1) 
#
            Tppqq(i,i1,b,b1)  = Vbbii(b,b1,i,i1)  
            T2ppqq(i,i1,b,b1) = Vbbii(b,b1,i1,i)  
            Tppqq(i,i1,b,b1) += T2ppqq(i,i1,b,b1)  
#
            Tii(i,i1)         = Tppqq(i,i1,b,b1)*Dab_b(b,b1) 
            Tii(i,i1)        *= -0.5  
            PUT Iij_aa(i,i1) += Tii(i,i1) 
#
      ENDPARDO b, b1, i, i1 
#
#     Dij contribution 
#     ---------------- 
#
      PARDO i2, i3, i, i1 
#
            REQUEST VSpipi(i2,i3,i,i1) i1  
            REQUEST VSpipi(i2,i3,i1,i) i
            GET Dij_a(i2,i3) 
#
            Tpppp(i,i1,i2,i3)  = VSpipi(i2,i3,i,i1)  
            T2pppp(i,i1,i2,i3) = VSpipi(i2,i3,i1,i)  
            Tpppp(i,i1,i2,i3) += T2pppp(i,i1,i2,i3)  
#
            Tii(i,i1)          = Tpppp(i,i1,i2,i3)*Dij_a(i2,i3) 
            Tii(i,i1)         *= -0.5  
            PUT Iij_aa(i,i1)  += Tii(i,i1) 
#
      ENDPARDO i2, i3, i, i1 
#
      PARDO j, j1, i, i1 
#
            REQUEST Vpiqj(i,i1,j,j1) j1  
            REQUEST Vpiqj(i1,i,j,j1) j1  
            GET Dij_b(j,j1) 
#
            Tppqq(i,i1,j,j1)  = Vpiqj(i,i1,j,j1)  
            T2ppqq(i,i1,j,j1) = Vpiqj(i1,i,j,j1)  
            Tppqq(i,i1,j,j1) += T2ppqq(i,i1,j,j1)  
#
            Tii(i,i1)         = Tppqq(i,i1,j,j1)*Dij_b(j,j1) 
            Tii(i,i1)        *= -0.5  
            PUT Iij_aa(i,i1) += Tii(i,i1) 
#
      ENDPARDO j, j1, i, i1 
# 
# DONE Compute contribution to Iij_aa 
# ----------------------------------- 
#
# Compute contribution to Iij_bb 
# ------------------------------ 
#
#     Dab contribution 
#     ---------------- 
#
      PARDO b, b1, j, j1 
#
            REQUEST Vbbjj(b,b1,j,j1) j1  
            REQUEST Vjbbj(j,b1,b,j1) j1  
            REQUEST Vbbjj(b,b1,j1,j) j1  
            REQUEST Vjbbj(j1,b1,b,j) j
            GET Dab_b(b,b1) 
#
            Tqqqq(j,j1,b,b1)  = Vbbjj(b,b1,j,j1)  
            T1qqqq(j,j1,b,b1) = Vjbbj(j,b1,b,j1)  
            T2qqqq(j,j1,b,b1) = Vbbjj(b,b1,j1,j)  
            T3qqqq(j,j1,b,b1) = Vjbbj(j1,b1,b,j) 
#
            Tqqqq(j,j1,b,b1) -= T1qqqq(j,j1,b,b1)  
            Tqqqq(j,j1,b,b1) += T2qqqq(j,j1,b,b1)  
            Tqqqq(j,j1,b,b1) -= T3qqqq(j,j1,b,b1)  
#
            Tjj(j,j1)         = Tqqqq(j,j1,b,b1)*Dab_b(b,b1) 
            Tjj(j,j1)        *= -0.5  
            PUT Iij_bb(j,j1) += Tjj(j,j1) 
#
      ENDPARDO b, b1, j, j1 
#
      PARDO a, a1, j, j1 
#
            REQUEST Vaajj(a,a1,j,j1) j1  
            REQUEST Vaajj(a,a1,j1,j) j1  
            GET Dab_a(a,a1) 
#
            Tqqpp(j,j1,a,a1)  = Vaajj(a,a1,j,j1)  
            T2qqpp(j,j1,a,a1) = Vaajj(a,a1,j1,j)  
            Tqqpp(j,j1,a,a1) += T2qqpp(j,j1,a,a1)  
#
            Tjj(j,j1)         = Tqqpp(j,j1,a,a1)*Dab_a(a,a1) 
            Tjj(j,j1)        *= -0.5  
            PUT Iij_bb(j,j1) += Tjj(j,j1) 
#
      ENDPARDO a, a1, j, j1 
#
#     Dij contribution 
#     ---------------- 
#
      PARDO j2, j3, j, j1 
#
            REQUEST VSqjqj(j2,j3,j,j1) j1  
            REQUEST VSqjqj(j2,j3,j1,j) j
            GET Dij_b(j2,j3) 
#
            Tqqqq(j,j1,j2,j3)  = VSqjqj(j2,j3,j,j1)  
            T2qqqq(j,j1,j2,j3) = VSqjqj(j2,j3,j1,j)  
            Tqqqq(j,j1,j2,j3) += T2qqqq(j,j1,j2,j3)  
            Tjj(j,j1)          = Tqqqq(j,j1,j2,j3)*Dij_b(j2,j3) 
            Tjj(j,j1)         *= -0.5  
            PUT Iij_bb(j,j1)  += Tjj(j,j1) 
#
      ENDPARDO j2, j3, j, j1 
#
      PARDO j, j1, i, i1 
#
            REQUEST Vpiqj(i,i1,j,j1) j1  
            REQUEST Vpiqj(i,i1,j1,j) j1  
            GET Dij_a(i,i1) 
#
            Tppqq(i,i1,j,j1)  = Vpiqj(i,i1,j,j1)  
            T2ppqq(i,i1,j,j1) = Vpiqj(i,i1,j1,j)  
            Tppqq(i,i1,j,j1) += T2ppqq(i,i1,j,j1)  
#
            Tjj(j,j1)         = Tppqq(i,i1,j,j1)*Dij_a(i,i1) 
            Tjj(j,j1)        *= -0.5  
            PUT Iij_bb(j,j1) += Tjj(j,j1) 
#
      ENDPARDO j, j1, i, i1 
# 
     ENDPROC I11 
#    ----------- 
#
# This procedure computes the contributions to the intermediate
# Iij_a which contain the Fock matrix. First-term of equation 43
# and computed in dfini.f.
#
# Equation programmed:
#
#     I(i,j) = - f(i,m) D(j,m)
#
      PROC FOCKIIJA
#     -------------
#
      PARDO i, i1 
#
            Tii(i,i1) = Fock_a(i,i1)
#
            DO i2 
#
            IF i2 == i 
#
               GET Dij_a(i1,i2)
#
               T1ii(i,i1)        = Dij_a(i1,i2)*Fock_a(i2,i)
               Tii(i,i1)        += T1ii(i,i1)  
#
            ENDIF # i2 == i 
#
            ENDDO i2 
#
            Tii(i,i1)        *= -1.0 
            PUT Iij_aa(i,i1) += Tii(i,i1)
#
      ENDPARDO i, i1 
#
# Also subtract out Dai contribution Eq. 56 
# ----------------------------------------- 
#
      PARDO i, i1, a, i2 
#
            REQUEST VSpipi(a,i2,i,i1) i1  
            REQUEST VSpipi(i1,i,a,i2) i2  
            GET Doldai_a(a,i2) 
#
            Tpppp(i,i1,a,i2)  = VSpipi(a,i2,i,i1) 
            T2pppp(i,i1,a,i2) = VSpipi(i1,i,a,i2)  
            Tpppp(i,i1,a,i2) += T2pppp(i,i1,a,i2)  
#
            Tii(i,i1)         = Tpppp(i,i1,a,i2)*Doldai_a(a,i2)
            Tii(i,i1)        *= -1.0 
            PUT Iij_aa(i,i1) += Tii(i,i1)
# 
      ENDPARDO i, i1, a, i2 
#
      PARDO i, i1, b, j 
#
            REQUEST Vpiqj(i,i1,b,j) j 
            REQUEST Vpiqj(i1,i,b,j) j   
            GET Doldai_b(b,j) 
#
            Tppqq(i,i1,b,j)   = Vpiqj(i,i1,b,j)  
            T2ppqq(i,i1,b,j)  = Vpiqj(i1,i,b,j)  
            Tppqq(i,i1,b,j)  += T2ppqq(i,i1,b,j)  
#
            Tii(i,i1)         = Tppqq(i,i1,b,j)*Doldai_b(b,j)
            Tii(i,i1)        *= -1.0 
#
            PUT Iij_aa(i,i1) += Tii(i,i1)
# 
      ENDPARDO i, i1, b, j 
#
      ENDPROC FOCKIIJA
#     ----------------
#
# This procedure computes the contributions to the intermediate
# Iij_b which contain the Fock matrix. First-term of equation 43
# and computed in dfini.f.
#
# Equation programmed:
#
#     I(I,J) = - f(I,M) D(J,M)
#
      PROC FOCKIIJB
#     -------------
#
      PARDO j, j1 
#
            Tjj(j,j1) = Fock_b(j,j1)
#
            DO j2 
#
            IF j2 == j 
#
               GET Dij_b(j1,j2)
#
               T1jj(j,j1)        = Dij_b(j1,j2)*Fock_b(j2,j)
               Tjj(j,j1)        += T1jj(j,j1)  
#
            ENDIF # j2 == j1  
#
            ENDDO j2 
#
            Tjj(j,j1)        *= -1.0  
            PUT Iij_bb(j,j1) += Tjj(j,j1)
#
      ENDPARDO j, j1 
#
# Also subtract out Dai contribution Eq. 56 
# ----------------------------------------- 
#
      PARDO j, j1, b, j2 
#
            REQUEST VSqjqj(b,j2,j,j1) j1  
            REQUEST VSqjqj(j1,j,b,j2) j2  
            GET Doldai_b(b,j2) 
#
            Tqqqq(j,j1,b,j2)  = VSqjqj(b,j2,j,j1) 
            T2qqqq(j,j1,b,j2) = VSqjqj(j1,j,b,j2)  
            Tqqqq(j,j1,b,j2) += T2qqqq(j,j1,b,j2)  
            Tjj(j,j1)         = Tqqqq(j,j1,b,j2)*Doldai_b(b,j2)
            Tjj(j,j1)        *= -1.0 
            PUT Iij_bb(j,j1) += Tjj(j,j1)
# 
      ENDPARDO j, j1, b, j2 
#
      PARDO j, j1, a, i 
#
            REQUEST Vpiqj(a,i,j,j1) j1  
            REQUEST Vpiqj(a,i,j1,j) j1  
            GET Doldai_a(a,i) 
#
            Tqqpp(j,j1,a,i)   = Vpiqj(a,i,j,j1)  
            T2qqpp(j,j1,a,i)  = Vpiqj(a,i,j1,j)  
            Tqqpp(j,j1,a,i)  += T2qqpp(j,j1,a,i)  
#
            Tjj(j,j1)         = Tqqpp(j,j1,a,i)*Doldai_a(a,i)
            Tjj(j,j1)        *= -1.0 
            PUT Iij_bb(j,j1) += Tjj(j,j1)
# 
      ENDPARDO j, j1, a, i 

      ENDPROC FOCKIIJB
#     ----------------
#
# This procedure computes the contributions to the intermediate
# Iab_a which contain the Fock matrix. First-term of equation 43
# and computed in dfini.f.
#
# Equation programmed:
#
#     I(a,b) = - f(a,e) D(b,e)
#
      PROC FOCKIABA
#     -------------
#
      PARDO a, a1
#
            DO a2
#
               IF a2 == a 
#
                  GET Dab_a(a1,a2)
                  Taa(a,a1)         = Fock_a(a,a2)*Dab_a(a1,a2)
                  Taa(a,a1)        *= -1.0
                  PUT Iab_aa(a,a1) += Taa(a,a1)
#
               ENDIF # a2 == a 
#
            ENDDO a2
#
      ENDPARDO a, a1
#
      ENDPROC FOCKIABA
#     ----------------
#
# This procedure computes the contributions to the intermediate
# Iab_b which contain the Fock matrix. First-term of equarion 43
# and computed in dfini.f.
#
# Equation programmed:
#
#     I(A,B) = - f(A,E) D(B,E)
#
      PROC FOCKIABB
#     -------------
#
      PARDO b, b1
#
            DO b2
#
               IF b2 == b 
#
                  GET Dab_b(b1,b2)
#
                  Tbb(b,b1)         = Fock_b(b,b2)*Dab_b(b1,b2)
                  Tbb(b,b1)        *= -1.0
                  PUT Iab_bb(b,b1) += Tbb(b,b1)
#
               ENDIF # b2 == b 
#
            ENDDO b2
#
      ENDPARDO b, b1 
#
      PARDO a, i 
#
            Tia(i,a) = 0.0 
#
            DO i1 
#
               IF i1 == i 
#
               GET Doldai_a(a,i1) 
#
               T1ia(i,a) = Doldai_a(a,i1)*fock_a(i1,i) 
               Tia(i,a) -= T1ia(i,a) 
#
               ENDIF # i1 == i 
#
            ENDDO i1 
#
            PUT Iia_aa(i,a) += Tia(i,a) 
#
      ENDPARDO a, i 
#
      PARDO b, j
#
            Tjb(j,b) = 0.0 
#
            DO j1 
#
               IF j1 == j 
#
                  GET Doldai_b(b,j1) 
#
                  T1jb(j,b) = Doldai_b(b,j1)*fock_b(j1,j) 
                  Tjb(j,b) -= T1jb(j,b) 
#
               ENDIF # j1 == j 
#
            ENDDO j1  
#
            PUT Iia_bb(j,b) += Tjb(j,b) 
#
      ENDPARDO b, j  
#
      ENDPROC FOCKIABB
#     ----------------
#
      PROC IFOCK
#     ----------
           CALL FOCKIIJA
           CALL FOCKIIJB
           CALL FOCKIABA
           CALL FOCKIABB
      ENDPROC IFOCK
#     -------------
# 
# @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
#
# Contributions depending in Vabcd are computed in this procedure 
# 'directly'. Since these integrals are not stored the terms:
# Iab_aa(2) and Iab_bb(2), and Iai_aa(6) and Iai_bb(6) must be 
# computed differently than earlier. 
#
     PROC IABAA1 
#    ----------- 
#
#    Form Half back transformed cluster array
#    ----------------------------------------
#
     PARDO a, a1, i, i1
#
           REQUEST Tau_aa(a,i,a1,i1) i1 
#
           DO lambda
#
              Zaa(lambda,i,a1,i1) = Tau_aa(a,i,a1,i1)*ca(lambda,a)
#
              DO sigma
#
                 ZZaa(lambda,i,sigma,i1)        = Zaa(lambda,i,a1,i1)*ca(sigma,a1)
                 PREPARE TAO_aa(lambda,i,sigma,i1) += ZZaa(lambda,i,sigma,i1)
#
              ENDDO sigma
#
           ENDDO lambda
#
     ENDPARDO a, a1, i, i1

# Watson, EOM gradient

     PARDO a, a1, i, i1
#
           REQUEST RTau_aa(a,i,a1,i1) i1
#
           DO lambda
#
              Zaa(lambda,i,a1,i1) = RTau_aa(a,i,a1,i1)*ca(lambda,a)
#
              DO sigma
#                
                 ZZaa(lambda,i,sigma,i1)        = Zaa(lambda,i,a1,i1)*ca(sigma,a1)
                 PREPARE RTAO_aa(lambda,i,sigma,i1) += ZZaa(lambda,i,sigma,i1)
#             
              ENDDO sigma
#          
           ENDDO lambda
#    
     ENDPARDO a, a1, i, i1

#
#    Form Half back transformed lambda array
#    ---------------------------------------
#
     PARDO a, a1, i, i1
#
           REQUEST A2old_aa(i,a,i1,a1) a1 
#
           DO lambda
#
              Qaa(i,lambda,i1,a1) = A2old_aa(i,a,i1,a1)*ca(lambda,a)
#
              DO sigma
#
                 QQaa(i,lambda,i1,sigma)        = Qaa(i,lambda,i1,a1)*ca(sigma,a1)
                 PREPARE LAO_aa(i,lambda,i1,sigma) += QQaa(i,lambda,i1,sigma)
#
              ENDDO sigma
#
           ENDDO lambda
#
     ENDPARDO a, a1, i, i1

     PARDO a, a1, i, i1
#
           REQUEST L2AA (i,a,i1,a1) a1
#
           DO lambda
#
              Qaa(i,lambda,i1,a1) = L2AA (i,a,i1,a1)*ca(lambda,a)
#
              DO sigma
#
                 QQaa(i,lambda,i1,sigma)        = Qaa(i,lambda,i1,a1)*ca(sigma,a1)
                 PREPARE LLAO_aa(i,lambda,i1,sigma) += QQaa(i,lambda,i1,sigma)
#
              ENDDO sigma
#
           ENDDO lambda
#
     ENDPARDO a, a1, i, i1

     execute server_barrier 
#
#    Contract Half back transformed arrays with AO integrals 
#    --> Txixi and T1xixi 
#    ------------------------------------------------------- 
#
     PARDO lambda, sigma, mu, nu  
#
           compute_integrals aoint(mu,lambda,nu,sigma) 
#
           DO i 
           DO i1 
#
              REQUEST Tao_aa(mu,i,nu,i1) i1  
              REQUEST Lao_aa(i,mu,i1,nu) i1 
#
              Txixi(lambda,i,sigma,i1)      = Tao_aa(mu,i,nu,i1)*aoint(mu,lambda,nu,sigma) 
              PREPARE Ixixi(lambda,i,sigma,i1) += Txixi(lambda,i,sigma,i1) 
#
              T1xixi(lambda,i,sigma,i1) = Lao_aa(i,mu,i1,nu)*aoint(mu,lambda,nu,sigma) 
              PREPARE I1xixi(lambda,i,sigma,i1) += T1xixi(lambda,i,sigma,i1) 
#
           ENDDO i1 
           ENDDO i 
#
     ENDPARDO lambda, sigma, mu, nu  

     PARDO lambda, sigma, mu, nu
#
           compute_integrals aoint(mu,lambda,nu,sigma)
#
           DO i
           DO i1
#
              REQUEST RTao_aa(mu,i,nu,i1) i1
              REQUEST LLao_aa(i,mu,i1,nu) i1
#
              Txixi(lambda,i,sigma,i1)      = RTao_aa(mu,i,nu,i1)*aoint(mu,lambda,nu,sigma)
              PREPARE IRxixi(lambda,i,sigma,i1) += Txixi(lambda,i,sigma,i1)
#
              T1xixi(lambda,i,sigma,i1) = LLao_aa(i,mu,i1,nu)*aoint(mu,lambda,nu,sigma)
              PREPARE ILxixi(lambda,i,sigma,i1) += T1xixi(lambda,i,sigma,i1)
#
           ENDDO i1
           ENDDO i
#
     ENDPARDO lambda, sigma, mu, nu

     execute server_barrier 
#
#    Transform I and I1 
#    ------------------ 
#
     PARDO lambda, sigma, i, i1 
#
           REQUEST Ixixi(lambda,i,sigma,i1)  i1  
           REQUEST I1xixi(lambda,i,sigma,i1) i1  
#
           DO a1 
#
              Txiai(lambda,i,a1,i1)  =  Ixixi(lambda,i,sigma,i1)*ca(sigma,a1) 
              T1xiai(lambda,i,a1,i1) = I1xixi(lambda,i,sigma,i1)*ca(sigma,a1) 
#
              DO a 
#
                 Taiai(a,i,a1,i1)       =  Txiai(lambda,i,a1,i1)*ca(lambda,a)  
                 T1aiai(a,i,a1,i1)      = T1xiai(lambda,i,a1,i1)*ca(lambda,a)  
#
                 PREPARE Iaiai(a,i,a1,i1)  += Taiai(a,i,a1,i1) 
                 PREPARE I1aiai(a,i,a1,i1) += T1aiai(a,i,a1,i1) 
#
                 T2aiai(a1,i,a,i1)      =  Taiai(a,i,a1,i1) 
                 T3aiai(a1,i,a,i1)      = T1aiai(a,i,a1,i1) 
#
                 T2aiai(a1,i,a,i1)     *= -1.0  
                 T3aiai(a1,i,a,i1)     *= -1.0  
#
                 PREPARE Iaiai(a1,i,a,i1)  += T2aiai(a1,i,a,i1) 
                 PREPARE I1aiai(a1,i,a,i1) += T3aiai(a1,i,a,i1) 
#
              ENDDO a 
#
           ENDDO a1 
#
     ENDPARDO lambda, sigma, i, i1 

     PARDO lambda, sigma, i, i1
#
           REQUEST IRxixi(lambda,i,sigma,i1)  i1
           REQUEST ILxixi(lambda,i,sigma,i1) i1
#
           DO a1
#
              Txiai(lambda,i,a1,i1)  = IRxixi(lambda,i,sigma,i1)*ca(sigma,a1)
              T1xiai(lambda,i,a1,i1) = ILxixi(lambda,i,sigma,i1)*ca(sigma,a1)
#
              DO a
#
                 Taiai(a,i,a1,i1)       =  Txiai(lambda,i,a1,i1)*ca(lambda,a)
                 T1aiai(a,i,a1,i1)      = T1xiai(lambda,i,a1,i1)*ca(lambda,a)
#
                 PREPARE IRaiai(a,i,a1,i1)  += Taiai(a,i,a1,i1)
                 PREPARE ILaiai(a,i,a1,i1) += T1aiai(a,i,a1,i1)
#
                 T2aiai(a1,i,a,i1)      =  Taiai(a,i,a1,i1)
                 T3aiai(a1,i,a,i1)      = T1aiai(a,i,a1,i1)
#
                 T2aiai(a1,i,a,i1)     *= -1.0
                 T3aiai(a1,i,a,i1)     *= -1.0
#                
                 PREPARE IRaiai(a1,i,a,i1)  += T2aiai(a1,i,a,i1)
                 PREPARE ILaiai(a1,i,a,i1) += T3aiai(a1,i,a,i1)
#             
              ENDDO a
#          
           ENDDO a1
#    
     ENDPARDO lambda, sigma, i, i1

     execute server_barrier 
#
#    Perform final contraction 
#    ------------------------- 
#
     PARDO a, a1, a2 
#
           DO i 
           DO i1 
#
              REQUEST  Iaiai(a,i,a2,i1)    a2  
              REQUEST I1aiai(a,i,a2,i1)    a2  
              REQUEST A2old_aa(i,a1,i1,a2) a2  
              REQUEST Tau_aa(a1,i,a2,i1)   a2  
#
              Taa(a,a1)         = Iaiai(a,i,a2,i1)*A2old_aa(i,a1,i1,a2) 
              T1aa(a,a1)        = I1aiai(a,i,a2,i1)*Tau_aa(a1,i,a2,i1) 
              Taa(a,a1)        += T1aa(a,a1) 
              Taa(a,a1)        *= -0.125 
              PUT Iab_aa(a,a1) += Taa(a,a1) 
#
           ENDDO i1 
           ENDDO i 
#
     ENDPARDO a, a1, a2 

     PARDO a, a1, a2
#
           DO i
           DO i1
#
              REQUEST IRaiai(a,i,a2,i1)    a2
              REQUEST ILaiai(a,i,a2,i1)    a2
              REQUEST L2AA (i,a1,i1,a2) a2
              REQUEST RTau_aa(a1,i,a2,i1)   a2
#
              Taa(a,a1)         = IRaiai(a,i,a2,i1)*L2AA(i,a1,i1,a2)
              T1aa(a,a1)        = ILaiai(a,i,a2,i1)*RTau_aa(a1,i,a2,i1)
              Taa(a,a1)        += T1aa(a,a1)
              Taa(a,a1)        *= -0.125
              PUT Iab_aa(a,a1) += Taa(a,a1)
#
           ENDDO i1
           ENDDO i
#
     ENDPARDO a, a1, a2

     execute server_barrier 
#
     ENDPROC IABAA1 
#    -------------- 
#
     PROC IABAA2 
#    ----------- 
#
#    Form Half back transformed cluster array
#    ----------------------------------------
#
     PARDO a, b, i, j
#
           REQUEST Tau_ab(a,i,b,j) j 
#
           DO lambda
#
              Zab(lambda,i,b,j) = Tau_ab(a,i,b,j)*ca(lambda,a)
#
              DO sigma
#
                 ZZab(lambda,i,sigma,j)        = Zab(lambda,i,b,j)*cb(sigma,b)
                 PREPARE TAO_ab(lambda,i,sigma,j) += ZZab(lambda,i,sigma,j)
#
              ENDDO sigma
#
           ENDDO lambda
#
     ENDPARDO a, b, i, j

# Watson, EOM GRADIENT

     PARDO a, b, i, j
#
           REQUEST RTau_ab(a,i,b,j) j
#
           DO lambda
#
              Zab(lambda,i,b,j) = RTau_ab(a,i,b,j)*ca(lambda,a)
#
              DO sigma
#
                 ZZab(lambda,i,sigma,j)        = Zab(lambda,i,b,j)*cb(sigma,b)
                 PREPARE RTAO_ab(lambda,i,sigma,j) += ZZab(lambda,i,sigma,j)
#
              ENDDO sigma
#
           ENDDO lambda
#
     ENDPARDO a, b, i, j

#
#    Form Half back transformed lambda array
#    ---------------------------------------
#
     PARDO a, b, i, j
#
           REQUEST A2old_ab(i,a,j,b) b 
#
           DO lambda
#
              Qab(i,lambda,j,b) = A2old_ab(i,a,j,b)*ca(lambda,a)
#
              DO sigma
#
                 QQab(i,lambda,j,sigma)        = Qab(i,lambda,j,b)*cb(sigma,b)
                 PREPARE LAO_ab(i,lambda,j,sigma) += QQab(i,lambda,j,sigma)
#
              ENDDO sigma
#
           ENDDO lambda
#
     ENDPARDO a, b, i, j

     PARDO a, b, i, j
#          
           REQUEST L2AB(i,a,j,b) b
#          
           DO lambda
#             
              Qab(i,lambda,j,b) = L2AB(i,a,j,b)*ca(lambda,a)
#             
              DO sigma
#                
                 QQab(i,lambda,j,sigma)        = Qab(i,lambda,j,b)*cb(sigma,b)
                 PREPARE LLAO_ab(i,lambda,j,sigma) += QQab(i,lambda,j,sigma)
#             
              ENDDO sigma
#          
           ENDDO lambda
#    
     ENDPARDO a, b, i, j

     execute server_barrier 
#
#    Contract Half back transformed arrays with AO integrals 
#    --> Txixj and T1xixj 
#    ------------------------------------------------------- 
#
     PARDO lambda, sigma, mu, nu  
#
           compute_integrals aoint(mu,lambda,nu,sigma) 
#
           DO i 
           DO j 
#
              REQUEST Tao_ab(mu,i,nu,j) j  
              REQUEST Lao_ab(i,mu,j,nu) j  
#
              Txixj(lambda,i,sigma,j)       = Tao_ab(mu,i,nu,j)*aoint(mu,lambda,nu,sigma) 
              PREPARE Ixixj(lambda,i,sigma,j)  += Txixj(lambda,i,sigma,j) 
#
              Txixj(lambda,i,sigma,j)       = Lao_ab(i,mu,j,nu)*aoint(mu,lambda,nu,sigma) 
              PREPARE I1xixj(lambda,i,sigma,j) += Txixj(lambda,i,sigma,j) 
#
           ENDDO j 
           ENDDO i 
#
     ENDPARDO lambda, sigma, mu, nu  

     PARDO lambda, sigma, mu, nu
#
           compute_integrals aoint(mu,lambda,nu,sigma)
#
           DO i
           DO j
#
              REQUEST RTao_ab(mu,i,nu,j) j
              REQUEST LLao_ab(i,mu,j,nu) j
#
              Txixj(lambda,i,sigma,j)       = RTao_ab(mu,i,nu,j)*aoint(mu,lambda,nu,sigma)
              PREPARE IRxixj(lambda,i,sigma,j)  += Txixj(lambda,i,sigma,j)
#
              Txixj(lambda,i,sigma,j)       = LLao_ab(i,mu,j,nu)*aoint(mu,lambda,nu,sigma)
              PREPARE ILxixj(lambda,i,sigma,j) += Txixj(lambda,i,sigma,j)
#
           ENDDO j
           ENDDO i
#
     ENDPARDO lambda, sigma, mu, nu

     execute server_barrier 
#
#    Transform I and I1 
#    ------------------ 
#
     PARDO lambda, sigma, i, j 
#
           REQUEST Ixixj(lambda,i,sigma,j)  j  
           REQUEST I1xixj(lambda,i,sigma,j) j  
#
           DO b 
#
              Txibj(lambda,i,b,j)     =  Ixixj(lambda,i,sigma,j)*cb(sigma,b) 
              T1xibj(lambda,i,b,j)    = I1xixj(lambda,i,sigma,j)*cb(sigma,b) 
#
              DO a 
#
                 Taibj(a,i,b,j)       =  Txibj(lambda,i,b,j)*ca(lambda,a)  
                 T1aibj(a,i,b,j)      = T1xibj(lambda,i,b,j)*ca(lambda,a)  
#
                 PREPARE Iaibj(a,i,b,j)  += Taibj(a,i,b,j) 
                 PREPARE I1aibj(a,i,b,j) += T1aibj(a,i,b,j) 
#
              ENDDO a 
#
           ENDDO b 
#
     ENDPARDO lambda, sigma, i, j 

     PARDO lambda, sigma, i, j
#
           REQUEST IRxixj(lambda,i,sigma,j)  j
           REQUEST ILxixj(lambda,i,sigma,j) j
#          
           DO b
#             
              Txibj(lambda,i,b,j)     = IRxixj(lambda,i,sigma,j)*cb(sigma,b)
              T1xibj(lambda,i,b,j)    = ILxixj(lambda,i,sigma,j)*cb(sigma,b)
#             
              DO a
#                
                 Taibj(a,i,b,j)       =  Txibj(lambda,i,b,j)*ca(lambda,a)
                 T1aibj(a,i,b,j)      = T1xibj(lambda,i,b,j)*ca(lambda,a)
#                
                 PREPARE IRaibj(a,i,b,j)  += Taibj(a,i,b,j) 
                 PREPARE ILaibj(a,i,b,j) += T1aibj(a,i,b,j)
#             
              ENDDO a
#          
           ENDDO b
#    
     ENDPARDO lambda, sigma, i, j

     execute server_barrier 
#
#    Perform final contraction to Iab_aa  
#    -----------------------------------  
#
     PARDO a, a1, b 
#
           DO i 
           DO j 
#
              REQUEST  Iaibj(a,i,b,j)    b  
              REQUEST I1aibj(a,i,b,j)    b  
              REQUEST A2old_ab(i,a1,j,b) b  
              REQUEST Tau_ab(a1,i,b,j)   b  
#
              Taa(a,a1)         = Iaibj(a,i,b,j)*A2old_ab(i,a1,j,b) 
              T1aa(a,a1)        = I1aibj(a,i,b,j)*Tau_ab(a1,i,b,j) 
              Taa(a,a1)        += T1aa(a,a1) 
              Taa(a,a1)        *= -0.5 
              PUT Iab_aa(a,a1) += Taa(a,a1) 
#
           ENDDO j 
           ENDDO i 
#
     ENDPARDO a, a1, b 

     PARDO a, a1, b
#
           DO i
           DO j
#
              REQUEST IRaibj(a,i,b,j)    b
              REQUEST ILaibj(a,i,b,j)    b
              REQUEST L2AB(i,a1,j,b) b
              REQUEST RTau_ab(a1,i,b,j)   b
#
              Taa(a,a1)         = IRaibj(a,i,b,j)*L2AB(i,a1,j,b)
              T1aa(a,a1)        = ILaibj(a,i,b,j)*RTau_ab(a1,i,b,j)
              Taa(a,a1)        += T1aa(a,a1)
              Taa(a,a1)        *= -0.5
              PUT Iab_aa(a,a1) += Taa(a,a1)
#
           ENDDO j
           ENDDO i
#
     ENDPARDO a, a1, b

#
#    Perform final contraction to Iab_bb  
#    -----------------------------------  
#
     PARDO b, b1, a 
#
           DO i 
           DO j 
#
              REQUEST  Iaibj(a,i,b,j) j  
              REQUEST I1aibj(a,i,b,j) j  
              REQUEST A2old_ab(i,a,j,b1) b1  
              REQUEST Tau_ab(a,i,b1,j)   b1  
#
              Tbb(b,b1)         = Iaibj(a,i,b,j)*A2old_ab(i,a,j,b1) 
              T1bb(b,b1)        = I1aibj(a,i,b,j)*Tau_ab(a,i,b1,j) 
              Tbb(b,b1)        += T1bb(b,b1) 
              Tbb(b,b1)        *= -0.5 
              PUT Iab_bb(b,b1) += Tbb(b,b1) 
#
           ENDDO j 
           ENDDO i 
#
     ENDPARDO b, b1, a 

     PARDO b, b1, a
#
           DO i
           DO j
#
              REQUEST IRaibj(a,i,b,j) j
              REQUEST ILaibj(a,i,b,j) j  
              REQUEST L2AB(i,a,j,b1) b1
              REQUEST RTau_ab(a,i,b1,j)   b1
#             
              Tbb(b,b1)         = IRaibj(a,i,b,j)*L2AB(i,a,j,b1)
              T1bb(b,b1)        = ILaibj(a,i,b,j)*RTau_ab(a,i,b1,j)
              Tbb(b,b1)        += T1bb(b,b1)
              Tbb(b,b1)        *= -0.5 
              PUT Iab_bb(b,b1) += Tbb(b,b1)
#          
           ENDDO j
           ENDDO i
#    
     ENDPARDO b, b1, a 

     execute sip_barrier 
#
     ENDPROC IABAA2 
#    -------------- 
#
     PROC IABBB1 
#    ----------- 
#
#    Form Half back transformed cluster array
#    ----------------------------------------
#
     PARDO b, b1, j, j1
#
           REQUEST Tau_bb(b,j,b1,j1) j1 
#
           DO lambda
#
              Zbb(lambda,j,b1,j1) = Tau_bb(b,j,b1,j1)*cb(lambda,b)
#
              DO sigma
#
                 ZZbb(lambda,j,sigma,j1)        = Zbb(lambda,j,b1,j1)*cb(sigma,b1)
                 PREPARE TAO_bb(lambda,j,sigma,j1) += ZZbb(lambda,j,sigma,j1)
#
              ENDDO sigma
#
           ENDDO lambda
#
     ENDPARDO b, b1, j, j1

     PARDO b, b1, j, j1
#
           REQUEST RTau_bb(b,j,b1,j1) j1
#
           DO lambda
#
              Zbb(lambda,j,b1,j1) = RTau_bb(b,j,b1,j1)*cb(lambda,b)
#
              DO sigma
#
                 ZZbb(lambda,j,sigma,j1)        = Zbb(lambda,j,b1,j1)*cb(sigma,b1)
                 PREPARE RTAO_bb(lambda,j,sigma,j1) += ZZbb(lambda,j,sigma,j1)
#
              ENDDO sigma
#
           ENDDO lambda
#
     ENDPARDO b, b1, j, j1

#
#    Form Half back transformed lambda array
#    ---------------------------------------
#
     PARDO b, b1, j, j1
#
           REQUEST A2old_bb(j,b,j1,b1) b1 
#
           DO lambda
#
              Qbb(j,lambda,j1,b1) = A2old_bb(j,b,j1,b1)*cb(lambda,b)
#
              DO sigma
#
                 QQbb(j,lambda,j1,sigma)        = Qbb(j,lambda,j1,b1)*cb(sigma,b1)
                 PREPARE LAO_bb(j,lambda,j1,sigma) += QQbb(j,lambda,j1,sigma)
#
              ENDDO sigma
#
           ENDDO lambda
#
     ENDPARDO b, b1, j, j1

     PARDO b, b1, j, j1
#
           REQUEST L2BB(j,b,j1,b1) b1
#          
           DO lambda
#             
              Qbb(j,lambda,j1,b1) = L2BB(j,b,j1,b1)*cb(lambda,b)
#             
              DO sigma
#                
                 QQbb(j,lambda,j1,sigma)        = Qbb(j,lambda,j1,b1)*cb(sigma,b1)
                 PREPARE LLAO_bb(j,lambda,j1,sigma) += QQbb(j,lambda,j1,sigma)
#             
              ENDDO sigma
#          
           ENDDO lambda
#    
     ENDPARDO b, b1, j, j1

     execute server_barrier 
#
#    Contract Half back transformed arrays with AO integrals 
#    --> Txjxj and T1xjxj 
#    ------------------------------------------------------- 
#
     PARDO lambda, sigma, mu, nu  
#
           compute_integrals aoint(mu,lambda,nu,sigma) 
#
           DO j 
           DO j1 
#
              REQUEST Tao_bb(mu,j,nu,j1) j1  
              REQUEST Lao_bb(j,mu,j1,nu) j1  
#
              Txjxj(lambda,j,sigma,j1)       = Tao_bb(mu,j,nu,j1)*aoint(mu,lambda,nu,sigma) 
              PREPARE Ixjxj(lambda,j,sigma,j1)  += Txjxj(lambda,j,sigma,j1) 
#
              T1xjxj(lambda,j,sigma,j1)      = Lao_bb(j,mu,j1,nu)*aoint(mu,lambda,nu,sigma) 
              PREPARE I1xjxj(lambda,j,sigma,j1) += T1xjxj(lambda,j,sigma,j1) 
#
           ENDDO j1 
           ENDDO j 
#
     ENDPARDO lambda, sigma, mu, nu  

     PARDO lambda, sigma, mu, nu
#
           compute_integrals aoint(mu,lambda,nu,sigma)
#
           DO j
           DO j1
#
              REQUEST RTao_bb(mu,j,nu,j1) j1
              REQUEST LLao_bb(j,mu,j1,nu) j1
#
              Txjxj(lambda,j,sigma,j1)       = RTao_bb(mu,j,nu,j1)*aoint(mu,lambda,nu,sigma)
              PREPARE IRxjxj(lambda,j,sigma,j1)  += Txjxj(lambda,j,sigma,j1)
#
              T1xjxj(lambda,j,sigma,j1)      = LLao_bb(j,mu,j1,nu)*aoint(mu,lambda,nu,sigma)
              PREPARE ILxjxj(lambda,j,sigma,j1) += T1xjxj(lambda,j,sigma,j1)
#
           ENDDO j1
           ENDDO j
#
     ENDPARDO lambda, sigma, mu, nu

     execute server_barrier 
#
#    Transform I and I1 
#    ------------------ 
#
     PARDO lambda, sigma, j, j1 
#
           REQUEST Ixjxj(lambda,j,sigma,j1)  j1  
           REQUEST I1xjxj(lambda,j,sigma,j1) j1  
#
           DO b1 
#
              Txjbj(lambda,j,b1,j1)  =  Ixjxj(lambda,j,sigma,j1)*cb(sigma,b1) 
              T1xjbj(lambda,j,b1,j1) = I1xjxj(lambda,j,sigma,j1)*cb(sigma,b1) 
#
              DO b 
#
                 Tbjbj(b,j,b1,j1)       =  Txjbj(lambda,j,b1,j1)*cb(lambda,b)  
                 T1bjbj(b,j,b1,j1)      = T1xjbj(lambda,j,b1,j1)*cb(lambda,b)  
#
                 PREPARE Ibjbj(b,j,b1,j1)  += Tbjbj(b,j,b1,j1) 
                 PREPARE I1bjbj(b,j,b1,j1) += T1bjbj(b,j,b1,j1) 
#
                 T2bjbj(b1,j,b,j1)      =  Tbjbj(b,j,b1,j1) 
                 T3bjbj(b1,j,b,j1)      = T1bjbj(b,j,b1,j1) 
#
                 T2bjbj(b1,j,b,j1)     *= -1.0  
                 T3bjbj(b1,j,b,j1)     *= -1.0  
#
                 PREPARE Ibjbj(b1,j,b,j1)  += T2bjbj(b1,j,b,j1) 
                 PREPARE I1bjbj(b1,j,b,j1) += T3bjbj(b1,j,b,j1) 
#
              ENDDO b 
#
           ENDDO b1 
#
     ENDPARDO lambda, sigma, j, j1 

     PARDO lambda, sigma, j, j1
#
           REQUEST IRxjxj(lambda,j,sigma,j1)  j1
           REQUEST ILxjxj(lambda,j,sigma,j1) j1
#
           DO b1
#
              Txjbj(lambda,j,b1,j1)  = IRxjxj(lambda,j,sigma,j1)*cb(sigma,b1)
              T1xjbj(lambda,j,b1,j1) = ILxjxj(lambda,j,sigma,j1)*cb(sigma,b1)
#
              DO b
#
                 Tbjbj(b,j,b1,j1)       =  Txjbj(lambda,j,b1,j1)*cb(lambda,b)
                 T1bjbj(b,j,b1,j1)      = T1xjbj(lambda,j,b1,j1)*cb(lambda,b)
#
                 PREPARE IRbjbj(b,j,b1,j1)  += Tbjbj(b,j,b1,j1)
                 PREPARE ILbjbj(b,j,b1,j1) += T1bjbj(b,j,b1,j1)
#
                 T2bjbj(b1,j,b,j1)      =  Tbjbj(b,j,b1,j1)
                 T3bjbj(b1,j,b,j1)      = T1bjbj(b,j,b1,j1)
#
                 T2bjbj(b1,j,b,j1)     *= -1.0
                 T3bjbj(b1,j,b,j1)     *= -1.0
#
                 PREPARE IRbjbj(b1,j,b,j1)  += T2bjbj(b1,j,b,j1)
                 PREPARE ILbjbj(b1,j,b,j1) += T3bjbj(b1,j,b,j1)
#
              ENDDO b
#
           ENDDO b1
#
     ENDPARDO lambda, sigma, j, j1

     execute server_barrier 
#
#    Perform final contraction 
#    ------------------------- 
#
     PARDO b, b1, b2 
#
           DO j 
           DO j1 
#
              REQUEST  Ibjbj(b,j,b2,j1)    b2  
              REQUEST I1bjbj(b,j,b2,j1)    b2  
              REQUEST A2old_bb(j,b1,j1,b2) b2  
              REQUEST Tau_bb(b1,j,b2,j1)   b2  
#
              Tbb(b,b1)         = Ibjbj(b,j,b2,j1)*A2old_bb(j,b1,j1,b2) 
              T1bb(b,b1)        = I1bjbj(b,j,b2,j1)*Tau_bb(b1,j,b2,j1) 
              Tbb(b,b1)        += T1bb(b,b1) 
              Tbb(b,b1)        *= -0.125 
              PUT Iab_bb(b,b1) += Tbb(b,b1) 
#
           ENDDO j1 
           ENDDO j 
#
     ENDPARDO b, b1, b2 

     PARDO b, b1, b2
#
           DO j
           DO j1
#
              REQUEST IRbjbj(b,j,b2,j1)    b2
              REQUEST ILbjbj(b,j,b2,j1)    b2
              REQUEST L2BB(j,b1,j1,b2) b2
              REQUEST RTau_bb(b1,j,b2,j1)   b2
#
              Tbb(b,b1)         = IRbjbj(b,j,b2,j1)*L2BB(j,b1,j1,b2)
              T1bb(b,b1)        = ILbjbj(b,j,b2,j1)*RTau_bb(b1,j,b2,j1)
              Tbb(b,b1)        += T1bb(b,b1)
              Tbb(b,b1)        *= -0.125
              PUT Iab_bb(b,b1) += Tbb(b,b1)
#
           ENDDO j1
           ENDDO j
#
     ENDPARDO b, b1, b2

     execute sip_barrier 
#
     ENDPROC IABBB1 
#    -------------- 
#
     PROC IABBB2 
#    ----------- 
#
#    Form Half back transformed cluster array
#    ----------------------------------------
#
     PARDO a, b, i, j
#
           REQUEST Tau_ab(a,i,b,j) j 
#
           DO lambda
#
              Zab(lambda,i,b,j) = Tau_ab(a,i,b,j)*ca(lambda,a)
#
              DO sigma
#
                 ZZab(lambda,i,sigma,j)        = Zab(lambda,i,b,j)*cb(sigma,b)
                 PREPARE TAO_ab(lambda,i,sigma,j) += ZZab(lambda,i,sigma,j)
#
              ENDDO sigma
#
           ENDDO lambda
#
     ENDPARDO a, b, i, j
#
#    Form Half back transformed lambda array
#    ---------------------------------------
#
     PARDO a, b, i, j
#
           REQUEST A2old_ab(i,a,j,b) b 
#
           DO lambda
#
              Qab(i,lambda,j,b) = A2old_ab(i,a,j,b)*ca(lambda,a)
#
              DO sigma
#
                 QQab(i,lambda,j,sigma)        = Qab(i,lambda,j,b)*cb(sigma,b)
                 PREPARE LAO_ab(i,lambda,j,sigma) += QQab(i,lambda,j,sigma)
#
              ENDDO sigma
#
           ENDDO lambda
#
     ENDPARDO a, b, i, j
     execute server_barrier 
#
#    Contract Half back transformed arrays with AO integrals 
#    --> Txixj and T1xixj 
#    ------------------------------------------------------- 
#
     PARDO lambda, sigma, mu, nu  
#
           compute_integrals aoint(mu,lambda,nu,sigma) 
#
           DO i 
           DO j 
#
              REQUEST Tao_ab(mu,i,nu,j) j  
              REQUEST Lao_ab(i,mu,j,nu) j  
#
              Txixj(lambda,i,sigma,j)       = Tao_ab(mu,i,nu,j)*aoint(mu,lambda,nu,sigma) 
              PREPARE Ixixj(lambda,i,sigma,j)  += Txixj(lambda,i,sigma,j) 
#
              Txixj(lambda,i,sigma,j)       = Lao_ab(i,mu,j,nu)*aoint(mu,lambda,nu,sigma) 
              PREPARE I1xixj(lambda,i,sigma,j) += Txixj(lambda,i,sigma,j) 
#
           ENDDO j 
           ENDDO i 
#
     ENDPARDO lambda, sigma, mu, nu  
     execute server_barrier 
#
#    Transform I and I1 
#    ------------------ 
#
     PARDO lambda, sigma, i, j 
#
           REQUEST Ixixj(lambda,i,sigma,j)  j  
           REQUEST I1xixj(lambda,i,sigma,j) j  
#
           DO b 
#
              Txibj(lambda,i,b,j)  =  Ixixj(lambda,i,sigma,j)*cb(sigma,b) 
              T1xibj(lambda,i,b,j) = I1xixj(lambda,i,sigma,j)*cb(sigma,b) 
#
              DO a 
#
                 Taibj(a,i,b,j)       =  Txibj(lambda,i,b,j)*ca(lambda,a)  
                 T1aibj(a,i,b,j)      = T1xibj(lambda,i,b,j)*ca(lambda,a)  
#
                 PREPARE Iaibj(a,i,b,j)  += Taibj(a,i,b,j) 
                 PREPARE I1aibj(a,i,b,j) += T1aibj(a,i,b,j) 
#
              ENDDO a 
#
           ENDDO b 
#
     ENDPARDO lambda, sigma, i, j 
     execute server_barrier 
#
#    Perform final contraction 
#    ------------------------- 
#
     PARDO b, b1, a 
#
           DO i 
           DO j 
#
              REQUEST  Iaibj(a,i,b,j)    j  
              REQUEST I1aibj(a,i,b,j)    j 
              REQUEST A2old_ab(i,a,j,b1) b1  
              REQUEST Tau_ab(a,i,b1,j)   b1  
#
              Tbb(b,b1)         = Iaibj(a,i,b,j)*A2old_ab(i,a,j,b1) 
              T1bb(b,b1)        = I1aibj(a,i,b,j)*Tau_ab(a,i,b1,j) 
              Tbb(b,b1)        += T1bb(b,b1) 
              Tbb(b,b1)        *= -0.5 
              PUT Iab_bb(b,b1) += Tbb(b,b1) 
#
           ENDDO j 
           ENDDO i 
#
     ENDPARDO b, b1, a 
     execute sip_barrier 
#
     ENDPROC IABBB2 
#    -------------- 
#
     PROC IABDIRECT 
#    -------------- 
          CALL IABAA1 
          CALL IABAA2 
          CALL IABBB1 
#         CALL IABBB2 --> Not needed, Computation done in IABAA2  
     ENDPROC IABDIRECT 
#    ----------------- 
#
# --------------------------------------------------------------------------------


# ---------------------------------------------------------------------- 
#
     PROC CONVER
#    ----------- 
#
      create Faa
      create Fab
      create Fbb
#
      execute sip_barrier
#
###   CALL FORM_IDENTITY
###   execute sip_barrier
###   CALL FORM_T1
###   execute sip_barrier
###   CALL FORM_T3
###   execute sip_barrier
###   CALL FORM_Faa
###   execute sip_barrier
#
     PARDO a, a1, i, i1
           taiai(a,i,a1,i1)            = 0.0
           prepare VCONV2AA(a,i,a1,i1) = taiai(a,i,a1,i1)
     ENDPARDO a, a1, i, i1
#
     PARDO b, b1, j, j1
           tbjbj(b,j,b1,j1)            = 0.0
           prepare VCONV2BB(b,j,b1,j1) = tbjbj(b,j,b1,j1)
     ENDPARDO b, b1, j, j1
#
     PARDO a, b, i, j
           taibj(a,i,b,j)            = 0.0 
           prepare VCONV2AB(a,i,b,j) = taibj(a,i,b,j)
     ENDPARDO a, b, i, j
#
     PARDO mu, nu, lambda, sigma 
#
           compute_integrals            aoint(mu,nu,lambda,sigma) 
           txxxx(mu,nu,lambda,sigma)  = aoint(mu,nu,lambda,sigma) 
           compute_integrals            aoint(mu,sigma,lambda,nu) 
           t1xxxx(mu,nu,lambda,sigma) = aoint(mu,sigma,lambda,nu) 
           txxxx(mu,nu,lambda,sigma) -= t1xxxx(mu,nu,lambda,sigma) 
#
           DO a 
              Txxxp(mu,nu,lambda,a) = txxxx(mu,nu,lambda,sigma)*ca(sigma,a) 
              DO a1 
                 if a == a1 
                    Txxpp(mu,nu,a1,a) = Txxxp(mu,nu,lambda,a)*ca(lambda,a1) 
                    PREPARE Vxxaa(mu,nu,a1,a) += Txxpp(mu,nu,a1,a) 
                 endif 
              ENDDO a1 
           ENDDO a 
#
           DO b 
              Txxxq(mu,nu,lambda,b) = txxxx(mu,nu,lambda,sigma)*cb(sigma,b) 
              DO b1 
                 if b == b1 
                    Txxqq(mu,nu,b1,b) = Txxxq(mu,nu,lambda,b)*cb(lambda,b1) 
                    PREPARE Vxxbb(mu,nu,b1,b) += Txxqq(mu,nu,b1,b) 
                 endif 
              ENDDO b1 
           ENDDO b 
#
           DO b 
              Txxxq(mu,nu,lambda,b) = aoint(mu,nu,lambda,sigma)*cb(sigma,b) 
              DO b1 
                 if b == b1 
                    Txxqq(mu,nu,b1,b) = Txxxq(mu,nu,lambda,b)*cb(lambda,b1) 
                    PREPARE Gxxbb(mu,nu,b1,b) += Txxqq(mu,nu,b1,b) 
                 endif 
              ENDDO b1 
           ENDDO b 
#
     ENDPARDO mu, nu, lambda, sigma 
     execute server_barrier
#
     PARDO mu, nu, a, a1 
           WHERE a == a1 
           REQUEST Vxxaa(mu,nu,a1,a) a            
              DO a2 
                 Txppp(mu,a2,a1,a) = Vxxaa(mu,nu,a1,a)*ca(nu,a2) 
                 DO a3 
                    if a2 == a3 
                       Tpppp(a3,a2,a1,a) = Txppp(mu,a2,a1,a)*ca(mu,a3) 
                       PREPARE Vaaaa(a3,a2,a1,a) += Tpppp(a3,a2,a1,a) 
                    endif 
                 ENDDO a3 
              ENDDO a2 
     ENDPARDO mu, nu, a, a1 
#
     PARDO mu, nu, b, b1 
           WHERE b == b1 
           REQUEST Vxxbb(mu,nu,b1,b) b            
              DO b2 
                 Txqqq(mu,b2,b1,b) = Vxxbb(mu,nu,b1,b)*cb(nu,b2) 
                 DO b3 
                    if b2 == b3 
                       Tqqqq(b3,b2,b1,b) = Txqqq(mu,b2,b1,b)*cb(mu,b3) 
                       PREPARE Vbbbb(b3,b2,b1,b) += Tqqqq(b3,b2,b1,b) 
                    endif 
                 ENDDO b3 
              ENDDO b2 
     ENDPARDO mu, nu, b, b1 
#
     PARDO mu, nu, b, b1 
           WHERE b == b1 
           REQUEST Gxxbb(mu,nu,b1,b) b            
              DO a2 
                 Txpqq(mu,a2,b1,b) = Gxxbb(mu,nu,b1,b)*ca(nu,a2) 
                 DO a3 
                    if a2 == a3 
                       Tppqq(a3,a2,b1,b) = Txpqq(mu,a2,b1,b)*ca(mu,a3) 
                       PREPARE Vaabb(a3,a2,b1,b) += Tppqq(a3,a2,b1,b) 
                    endif 
                 ENDDO a3 
              ENDDO a2 
     ENDPARDO mu, nu, b, b1 
#
     execute server_barrier
#
# -----prepare f_aa diagonal = Sdaa
#
     PARDO a, a1, a2, a3   
        WHERE a  == a1 
        WHERE a2 == a3 
#
           REQUEST              Vaaaa(a,a1,a2,a3) a
           Tpppp(a,a1,a2,a3)  = Vaaaa(a,a1,a2,a3)
           execute return_diagonal4 Tpppp
           taa(a3,a1)         = 1.0
           t1aa(a,a2)         = Tpppp(a,a1,a2,a3)*taa(a3,a1)
#
           PUT Faa(a,a2)     += t1aa(a,a2)
#
     ENDPARDO a, a1, a2, a3  
#
     PARDO b, b1, b2, b3   
        WHERE b  == b1 
        WHERE b2 == b3 
#
           REQUEST              Vbbbb(b,b1,b2,b3) b
           Tqqqq(b,b1,b2,b3)  = Vbbbb(b,b1,b2,b3)
           execute return_diagonal4 Tqqqq
           tbb(b3,b1)         = 1.0
           t1bb(b,b2)         = Tqqqq(b,b1,b2,b3)*tbb(b3,b1)
#
           PUT Fbb(b,b2)     += t1bb(b,b2)
#
     ENDPARDO b, b1, b2, b3  
#
     PARDO a, a1, b2, b3   
        WHERE a  == a1 
        WHERE b2 == b3 
#
           REQUEST              Vaabb(a,a1,b2,b3) a
           Tppqq(a,a1,b2,b3)  = Vaabb(a,a1,b2,b3)
           execute return_diagonal4 Tppqq
           tba(b3,a1)         = 1.0
           tab(a,b2)          = Tppqq(a,a1,b2,b3)*tba(b3,a1)
#
           PUT Fab(a,b2)     += tab(a,b2)
#
     ENDPARDO a, a1, b2, b3  
#
     PARDO a, a1
      WHERE a==a1 
#
          #Saa(a,a1)      = LHBAR_aa(a,a1)
           taa(a,a1)      = LHBAR_aa(a,a1)
          #execute return_diagonal Saa Sdaa
           execute return_diagonal4 taa 
          #taa(a,a1)      = Sdaa(a,a1)
           put DDaa(a,a1) = taa(a,a1)
#
     ENDPARDO a, a1
#
# -----prepare f_ii diagonal = Sdii
#
     PARDO i, i1
      WHERE i==i1 
#
           tii(i1,i)      = LHBAR_ii(i1,i)
           execute return_diagonal4 tii 
           put DDii(i1,i) = tii(i1,i)
#
     ENDPARDO i, i1
#
# -----prepare f_bb diagonal = DDbb
#
     PARDO b, b1
      WHERE b==b1 
#
       #Sbb(b,b1)      = LHBAR_bb(b,b1)
        tbb(b,b1)      = LHBAR_bb(b,b1)
       #execute return_diagonal Sbb Sdbb
        execute return_diagonal4 tbb 
       #tbb(b,b1)      = Sdbb(b,b1)
        put DDbb(b,b1) = tbb(b,b1)
#
     ENDPARDO b, b1
#
# -----prepare f_jj diagonal = DDjj
#
     PARDO j, j1
      WHERE j==j1 
#
        tjj(j1,j)      = LHBAR_jj(j1,j)
        execute return_diagonal4 tjj 
        put DDjj(j1,j) = tjj(j1,j)
#
     ENDPARDO j, j1
#
     execute sip_barrier
#
# -----prepare Hbar_aiai diagonal
#
     PARDO a, i
#
        tai(a,i)=0.0
#
        do a1
        do i1
#
           REQUEST            HBAR_AJIB_aaaa(i1,a1,a,i) i
           Taaii(a,a1,i,i1) = HBAR_AJIB_aaaa(i1,a1,a,i)
           execute return_diagonal4 Taaii
           tia(i1,a1)       = 1.0
           t1ai(a,i)        = Taaii(a,a1,i,i1)*tia(i1,a1)
           tai(a,i)        += t1ai(a,i)
#
        enddo i1
        enddo a1
#
        PUT VCONV1A(a,i) = tai(a,i)
#
     ENDPARDO a, i
#
# -----prepare Hbar_bjbj diagonal
#
     PARDO b, j
#
        tbj(b,j)=0.0
#
        do b1
        do j1
#
           REQUEST            HBAR_AJIB_bbbb(j1,b1,b,j) j
           Tbbjj(b,b1,j,j1) = HBAR_AJIB_bbbb(j1,b1,b,j)
           execute return_diagonal4 Tbbjj
           tjb(j1,b1)       = 1.0
           t1bj(b,j)        = Tbbjj(b,b1,j,j1)*tjb(j1,b1)
           tbj(b,j)        += t1bj(b,j)
#
        enddo j1
        enddo b1
#
        PUT VCONV1B(b,j) = tbj(b,j)
#
     ENDPARDO b, j
#
     execute server_barrier
#
     PARDO a, a1, i, i1
#
           get                            VCONV1A(a,i1)
           get                            VCONV1A(a1,i)
           tia(i1,a)                    = 1.0
           t1ia(i,a1)                   = 1.0
           tai(a,i1)                    = VCONV1A(a,i1)
           t2ai(a1,i)                   = VCONV1A(a1,i)
           t1aiai(a,i,a1,i1)            = tai(a,i1)^t1ia(i,a1)
           t2aiai(a,i,a1,i1)            = t2ai(a1,i)^tia(i1,a)
#
           prepare VCONV2AA(a,i,a1,i1) += t1aiai(a,i,a1,i1)
           prepare VCONV2AA(a,i,a1,i1) += t2aiai(a,i,a1,i1)
#
     ENDPARDO a, a1, i, i1
#
     PARDO b, b1, j, j1
#
           get                            VCONV1B(b,j1)
           get                            VCONV1B(b1,j)
           tjb(j1,b)                    = 1.0
           t1jb(j,b1)                   = 1.0
           tbj(b,j1)                    = VCONV1B(b,j1)
           t2bj(b1,j)                   = VCONV1B(b1,j)
           t1bjbj(b,j,b1,j1)            = tbj(b,j1)^t1jb(j,b1)
           t2bjbj(b,j,b1,j1)            = t2bj(b1,j)^tjb(j1,b)
#
           prepare VCONV2BB(b,j,b1,j1) += t1bjbj(b,j,b1,j1)
           prepare VCONV2BB(b,j,b1,j1) += t2bjbj(b,j,b1,j1)
#
     ENDPARDO b, b1, j, j1
#
     execute server_barrier
#
# -------------------------------------------------------------------------------------
# Start of correction ??? 
# -------------------------------------------------------------------------------------
#
# -----prepare Hbar_aiai diagonal
#
     PARDO a, i
#
           tai(a,i)=0.0
#
           do a1
           do i1
#
              REQUEST            HBAR_AJIB_aaaa(i1,a1,a,i) i
              Taaii(a,a1,i,i1) = HBAR_AJIB_aaaa(i1,a1,a,i)
              execute return_diagonal4 Taaii
              tia(i1,a1)       = 1.0
              t1ai(a,i)        = Taaii(a,a1,i,i1)*tia(i1,a1)
              tai(a,i)        += t1ai(a,i)
#
           enddo i1
           enddo a1
#
           PUT VCONV1A(a,i) = tai(a,i)
#
     ENDPARDO a, i
#
# -----prepare Hbar_bjbj diagonal
#
     PARDO b, j
#
           tbj(b,j)=0.0
#
           do b1
           do j1
#
              REQUEST            HBAR_AJIB_bbbb(j1,b1,b,j) j
              Tbbjj(b,b1,j,j1) = HBAR_AJIB_bbbb(j1,b1,b,j)
              execute return_diagonal4 Tbbjj
              tjb(j1,b1)       = 1.0
              t1bj(b,j)        = Tbbjj(b,b1,j,j1)*tjb(j1,b1)
              tbj(b,j)        += t1bj(b,j)
#
           enddo j1
           enddo b1
#
           PUT VCONV1B(b,j) = tbj(b,j)
#
     ENDPARDO b, j
#
     execute server_barrier
#
# ---------compute T(a,i)=F(a,a)-f(i,i)-v(a,i,a,i)
#
     PARDO a, i
#
           tai(a,i)=0.0
#
           do a1
#
              get         DDaa(a,a1)
              tia(i,a1) = 1.0
              taa(a1,a) = DDaa(a,a1)
#
              t2ai(a,i) = tia(i,a1)*taa(a1,a)
              tai(a,i) += t2ai(a,i)
#
           enddo a1
#
           do i1
#
              get          DDii(i1,i)
              t2ia(i1,a) = 1.0
              tii(i,i1)  = DDii(i1,i)
#
              t2ai(a,i)  = tii(i,i1)*t2ia(i1,a)
              t2ai(a,i) *= -1.0
              tai(a,i)  += t2ai(a,i)
#
           enddo i1
#
           PUT VCONV1A(a,i) += tai(a,i)
#
     ENDPARDO a, i
#
# ---------compute T(b,j)=F(b,b)-f(j,j)
#
     PARDO b, j
#
           tbj(b,j) = 0.0
#
           do b1
#
              get         DDbb(b,b1)
              tjb(j,b1) = 1.0
              tbb(b1,b) = DDbb(b,b1)
#
              t2bj(b,j) = tjb(j,b1)*tbb(b1,b)
              tbj(b,j) += t2bj(b,j)
#
           enddo b1
#
           do j1
#
              get          DDjj(j1,j)
              t2jb(j1,b) = 1.0
              tjj(j,j1)  = DDjj(j1,j)
#
              t2bj(b,j)  = tjj(j,j1)*t2jb(j1,b)
              t2bj(b,j) *= -1.0
              tbj(b,j)  += t2bj(b,j)
#
           enddo j1
#
           PUT VCONV1B(b,j) += tbj(b,j)
#
     ENDPARDO b, j
#
     execute server_barrier
#
     PARDO a, a1, i, i1
#
           get                 VCONV1A(a,i)
           get                 VCONV1A(a1,i1)
           tia(i,a)          = 1.0
           t1ia(i1,a1)       = 1.0
           tai(a,i)          = VCONV1A(a,i)
           t2ai(a1,i1)       = VCONV1A(a1,i1)
           t1aiai(a,i,a1,i1) = tai(a,i)^t1ia(i1,a1)
           t2aiai(a,i,a1,i1) = t2ai(a1,i1)^tia(i,a)
#
           taiai(a,i,a1,i1)  = t1aiai(a,i,a1,i1)
           taiai(a,i,a1,i1) += t2aiai(a,i,a1,i1)
#
           do i2
           do i3
#
              request             HBAR_iiii(i,i2,i1,i3) i
              tiiii(i,i2,i1,i3) = HBAR_iiii(i,i2,i1,i3)
              execute return_diagonal4 Tiiii
              t1aiai(a,i2,a1,i3)=1.0
              t2aiai(a,i,a1,i1) = Tiiii(i,i2,i1,i3)*t1aiai(a,i2,a1,i3)
              taiai(a,i,a1,i1) += t2aiai(a,i,a1,i1)
#
           enddo i3
           enddo i2
#
           get                 Faa(a,a1)
           tii(i,i1)         = 1.0
           t1aiai(a,i,a1,i1) = Faa(a,a1)^tii(i,i1)
           taiai(a,i,a1,i1) += t1aiai(a,i,a1,i1)
#
           prepare VCONV2AA(a,i,a1,i1) += taiai(a,i,a1,i1)
#
     ENDPARDO a, a1, i, i1
#
     PARDO b, b1, j, j1
#
           get                 VCONV1B(b,j)
           get                 VCONV1B(b1,j1)
           tjb(j,b)          = 1.0
           t1jb(j1,b1)       = 1.0
           tbj(b,j)          = VCONV1B(b,j)
           t2bj(b1,j1)       = VCONV1B(b1,j1)
           t1bjbj(b,j,b1,j1) = tbj(b,j)^t1jb(j1,b1)
           t2bjbj(b,j,b1,j1) = t2bj(b1,j1)^tjb(j,b)
#
           tbjbj(b,j,b1,j1)  = t1bjbj(b,j,b1,j1)
           tbjbj(b,j,b1,j1) += t2bjbj(b,j,b1,j1)
#
           do j2
           do j3
#
              request             HBAR_jjjj(j,j2,j1,j3) j
              tjjjj(j,j2,j1,j3) = HBAR_jjjj(j,j2,j1,j3)
              execute return_diagonal4 Tjjjj
              t1bjbj(b,j2,b1,j3)= 1.0
              t2bjbj(b,j,b1,j1) = Tjjjj(j,j2,j1,j3)*t1bjbj(b,j2,b1,j3)
              tbjbj(b,j,b1,j1) += t2bjbj(b,j,b1,j1)
#
           enddo j3
           enddo j2
#
           get                            Fbb(b,b1)
           tjj(j,j1)                    = 1.0
           t1bjbj(b,j,b1,j1)            = Fbb(b,b1)^tjj(j,j1)
           tbjbj(b,j,b1,j1)            += t1bjbj(b,j,b1,j1)
#
           prepare VCONV2BB(b,j,b1,j1) += tbjbj(b,j,b1,j1)
#
     ENDPARDO b, b1, j, j1
#
# alpha/beta contribution 
# ----------------------- 
#
     PARDO a, i, b, j
#
           get               VCONV1B(b,j)
           get               VCONV1A(a,i)
           t1ai(a,i)       = 1.0
           t1bj(b,j)       = 1.0
#
           tbj(b,j)        = VCONV1B(b,j)
           tai(a,i)        = VCONV1A(a,i)
           t1aibj(a,i,b,j) = t1ai(a,i)^tbj(b,j)
           t2aibj(a,i,b,j) = tai(a,i)^t1bj(b,j)
#
           taibj(a,i,b,j)  = 0.0  
           taibj(a,i,b,j)  = t1aibj(a,i,b,j)
           taibj(a,i,b,j) += t2aibj(a,i,b,j)
#
           do i1
           do j1
#
              request                   HBAR_iijj(i,i1,j,j1) j1
              Tiijj(i,i1,j,j1)        = HBAR_iijj(i,i1,j,j1)
              execute return_diagonal4  Tiijj
              t2aibj(a,i1,b,j1)       = 1.0
              t1aibj(a,i,b,j)         = Tiijj(i,i1,j,j1)*t2aibj(a,i1,b,j1)
              taibj(a,i,b,j)         += t1aibj(a,i,b,j)
#
           enddo j1
           enddo i1
#
           get Fab(a,b)
           tij(i,j)=1.0
           t1aibj(a,i,b,j)=Fab(a,b)^tij(i,j)
           taibj(a,i,b,j)+=t1aibj(a,i,b,j)
#
           do i1
           do b1
#
              request HBAR_AJIB_iibb(i1,i,b,b1) b1
              Tiibb(i1,i,b,b1)=HBAR_AJIB_iibb(i1,i,b,b1)
              execute return_diagonal4 Tiibb
              t2aibj(a,i1,b1,j)=1.0
              t1aibj(a,i,b,j)=Tiibb(i1,i,b,b1)*t2aibj(a,i1,b1,j)
              taibj(a,i,b,j)+=t1aibj(a,i,b,j)
#
           enddo b1
           enddo i1
#
           do j1
           do a1
#
              request HBAR_AJIB_jjaa(j1,j,a,a1) a1
              Tjjaa(j1,j,a,a1)=HBAR_AJIB_jjaa(j1,j,a,a1)
              execute return_diagonal4 Tjjaa
              t2aibj(a1,i,b,j1)=1.0
              t1aibj(a,i,b,j)=Tjjaa(j1,j,a,a1)*t2aibj(a1,i,b,j1)
              taibj(a,i,b,j)+=t1aibj(a,i,b,j)
#
           enddo a1
           enddo j1
#
           PREPARE VCONV2AB(a,i,b,j) = taibj(a,i,b,j)
#
     ENDPARDO a, i, b, j
#
     execute server_barrier
#
      delete Faa
      delete Fab
      delete Fbb
#
     ENDPROC CONVER
#------------------------------------------------------------------------



# ---------------------------------------------------------------------------- 
#    ------------------------------------------------------------------------ 
#
     PROC AOLADDER_NEW  
#
#    ------------------------------------------------------------------------ 
#
#    Form Half back transformed cluster arrays  
#    -----------------------------------------
#
     PARDO a1, i1, i   
#
           allocate LLaiai(*,i,a1,i1) 
#
           DO a  
#
              REQUEST              VCACT2AA(a,i,a1,i1) i1 
              REQUEST              VCACT2AA(a,i1,a1,i)  i1 
              LLaiai(a,i,a1,i1)  = VCACT2AA(a, i,a1,i1) 
              Taiai(a,i,a1,i1)   = VCACT2AA(a,i1,a1,i) 
              LLaiai(a,i,a1,i1) -= Taiai(a,i,a1,i1)  
#
           ENDDO a  
#
           DO lambda   
              Zaa(lambda,i,a1,i1) = 0.0 
              DO a  
                 Txiai(lambda,i,a1,i1) = LLaiai(a,i,a1,i1)*ca(lambda,a)
                 Zaa(lambda,i,a1,i1)  += Txiai(lambda,i,a1,i1) 
              ENDDO a 
              PREPARE T1AO_aa(lambda,i,a1,i1) = Zaa(lambda,i,a1,i1) 
           ENDDO lambda  
#
           deallocate LLaiai(*,i,a1,i1) 
#
     ENDPARDO a1, i1, i   
#
     PARDO b1, j1, j   
#
           allocate LLbjbj(*,j,b1,j1) 
#
           DO b  
#
              REQUEST              VCACT2BB(b, j,b1,j1) j1 
              REQUEST              VCACT2BB(b,j1,b1,j)  j1 
              LLbjbj(b,j,b1,j1)  = VCACT2BB(b, j,b1,j1) 
              Tbjbj(b,j,b1,j1)   = VCACT2BB(b,j1,b1,j) 
              LLbjbj(b,j,b1,j1) -= Tbjbj(b,j,b1,j1)  
#
           ENDDO b  
#
           DO lambda   
              Zbb(lambda,j,b1,j1) = 0.0 
              DO b  
                 Txjbj(lambda,j,b1,j1) = LLbjbj(b,j,b1,j1)*cb(lambda,b)
                 Zbb(lambda,j,b1,j1)  += Txjbj(lambda,j,b1,j1) 
              ENDDO b 
              PREPARE T1AO_bb(lambda,j,b1,j1) = Zbb(lambda,j,b1,j1) 
           ENDDO lambda  
#
           deallocate LLbjbj(*,j,b1,j1) 
#
     ENDPARDO b1, j1, j   
#
     PARDO b, j, i   
#
           allocate LLaibj(*,i,b,j) 
#
           DO a  
#
              REQUEST          VCACT2AB(a,i,b,j) j 
              LLaibj(a,i,b,j) = VCACT2AB(a,i,b,j) 
#
           ENDDO a  
#
           DO lambda   
              Zab(lambda,i,b,j) = 0.0 
              DO a  
                 Txibj(lambda,i,b,j) = LLaibj(a,i,b,j)*ca(lambda,a)
                 Zab(lambda,i,b,j)  += Txibj(lambda,i,b,j) 
              ENDDO a 
              PREPARE T1AO_ab(lambda,i,b,j) = Zab(lambda,i,b,j) 
           ENDDO lambda  
#
           deallocate LLaibj(*,i,b,j) 
#
     ENDPARDO b, j, i   
     execute server_barrier 
#
     PARDO lambda, i, i1  
#
           allocate Lxiai(lambda,i,*,i1) 
#
           DO a1 
#
              REQUEST                 T1AO_aa(lambda,i,a1,i1) i1  
              Lxiai(lambda,i,a1,i1) = T1AO_aa(lambda,i,a1,i1) 
#
           ENDDO a1 
#
           DO sigma 
              ZZaa(lambda,i,sigma,i1)  = 0.0 
              PREPARE T2AO_aa(lambda,i,sigma,i1) = ZZaa(lambda,i,sigma,i1)
              DO a1 
                 Txixi(lambda,i,sigma,i1) = Lxiai(lambda,i,a1,i1)*ca(sigma,a1)
                 ZZaa(lambda,i,sigma,i1) += Txixi(lambda,i,sigma,i1)  
              ENDDO a1 
              PREPARE T3AO_aa(lambda,i,sigma,i1) = ZZaa(lambda,i,sigma,i1)
           ENDDO sigma 
#
           deallocate Lxiai(lambda,i,*,i1) 
#
     ENDPARDO lambda, i, i1   
#
     PARDO lambda, j, j1  
#
           allocate Lxjbj(lambda,j,*,j1) 
#
           DO b1 
#
              REQUEST                 T1AO_bb(lambda,j,b1,j1) j1  
              Lxjbj(lambda,j,b1,j1) = T1AO_bb(lambda,j,b1,j1) 
#
           ENDDO b1 
#
           DO sigma 
              ZZbb(lambda,j,sigma,j1)  = 0.0 
              PREPARE T2AO_bb(lambda,j,sigma,j1) = ZZbb(lambda,j,sigma,j1)
              DO b1 
                 Txjxj(lambda,j,sigma,j1) = Lxjbj(lambda,j,b1,j1)*cb(sigma,b1)
                 ZZbb(lambda,j,sigma,j1) += Txjxj(lambda,j,sigma,j1)  
              ENDDO b1 
              PREPARE T3AO_bb(lambda,j,sigma,j1) = ZZbb(lambda,j,sigma,j1)
           ENDDO sigma 
#
           deallocate Lxjbj(lambda,j,*,j1) 
#
     ENDPARDO lambda, j, j1   
#
     PARDO lambda, i, j  
#
           allocate Lxibj(lambda,i,*,j) 
#
           DO b 
#
              REQUEST               T1AO_ab(lambda,i,b,j) j  
              Lxibj(lambda,i,b,j) = T1AO_ab(lambda,i,b,j) 
#
           ENDDO b 
#
           DO sigma 
              ZZab(lambda,i,sigma,j)  = 0.0 
              PREPARE T2AO_ab(lambda,i,sigma,j) = ZZab(lambda,i,sigma,j)
              DO b 
                 Txixj(lambda,i,sigma,j) = Lxibj(lambda,i,b,j)*cb(sigma,b)
                 ZZab(lambda,i,sigma,j) += Txixj(lambda,i,sigma,j)  
              ENDDO b 
              PREPARE T3AO_ab(lambda,i,sigma,j) = ZZab(lambda,i,sigma,j)
           ENDDO sigma 
#
           deallocate Lxibj(lambda,i,*,j) 
#
     ENDPARDO lambda, i, j   
#
     execute server_barrier   
#
#    Contract AOINT with half back transformed Amplitudes 
#    ----------------------------------------------------    
#
     PARDO mu, nu, lambda, sigma
#
           compute_integrals           aoint(lambda,mu,sigma,nu)
           txxxx(lambda,mu,sigma,nu) = aoint(lambda,mu,sigma,nu) 
#
           DO i
           DO i1
              if i < i1 
                 REQUEST                        T3AO_aa(lambda,i,sigma,i1) i1
                 Yaa(mu,i,nu,i1)              = txxxx(lambda,mu,sigma,nu)*T3AO_aa(lambda,i,sigma,i1)
                 Y1aa(nu,i1,mu,i)             = Yaa(mu,i,nu,i1)  
                 PREPARE T2AO_aa(mu,i,nu,i1) += Yaa(mu,i,nu,i1)
                 PREPARE T2AO_aa(nu,i1,mu,i) += Y1aa(nu,i1,mu,i)
              endif 
              if i == i1 
                 REQUEST                        T3AO_aa(lambda,i,sigma,i1) i1
                 Yaa(mu,i,nu,i1)              = txxxx(lambda,mu,sigma,nu)*T3AO_aa(lambda,i,sigma,i1)
                 PREPARE T2AO_aa(mu,i,nu,i1) += Yaa(mu,i,nu,i1)
              endif 
           ENDDO i1
           ENDDO i
#
           DO j
           DO j1
              if j < j1 
                 REQUEST                        T3AO_bb(lambda,j,sigma,j1) j1
                 Ybb(mu,j,nu,j1)              = txxxx(lambda,mu,sigma,nu)*T3AO_bb(lambda,j,sigma,j1)
                 Y1bb(nu,j1,mu,j)             = Ybb(mu,j,nu,j1)
                 PREPARE T2AO_bb(mu,j,nu,j1) += Ybb(mu,j,nu,j1)
                 PREPARE T2AO_bb(nu,j1,mu,j) += Y1bb(nu,j1,mu,j)
              endif 
              if j == j1 
                 REQUEST                        T3AO_bb(lambda,j,sigma,j1) j1
                 Ybb(mu,j,nu,j1)              = txxxx(lambda,mu,sigma,nu)*T3AO_bb(lambda,j,sigma,j1)
                 PREPARE T2AO_bb(mu,j,nu,j1) += Ybb(mu,j,nu,j1)
              endif 
           ENDDO j1
           ENDDO j
#
           DO i
           DO j
              REQUEST                       T3AO_ab(lambda,i,sigma,j) j
              Yab(mu,i,nu,j)              = txxxx(lambda,mu,sigma,nu)*T3AO_ab(lambda,i,sigma,j)
              PREPARE T2AO_ab(mu,i,nu,j) += Yab(mu,i,nu,j)
           ENDDO j
           ENDDO i
#
     ENDPARDO mu, nu, lambda, sigma
#
     execute server_barrier  
#
#    Perform final transformation 
#    ---------------------------- 
#
     PARDO nu, i, i1
           allocate LLaa(*,i,nu,i1)
           DO mu
              REQUEST T2AO_aa(mu,i,nu,i1) i1
              DO a
                 Taixi(a,i,nu,i1) = T2AO_aa(mu,i,nu,i1)*ca(mu,a)
                 LLaa(a,i,nu,i1) += Taixi(a,i,nu,i1)
              ENDDO a
           ENDDO mu
           DO a
              LLaa(a,i,nu,i1) *= 0.5
              DO a1
                 Taiai(a,i,a1,i1)             = LLaa(a,i,nu,i1)*ca(nu,a1)
                 PREPARE VCHACT2AA(a,i,a1,i1) += Taiai(a,i,a1,i1) 
              ENDDO a1
           ENDDO a
           deallocate LLaa(*,i,nu,i1)
     ENDPARDO nu, i, i1
#
     PARDO nu, j, j1
           allocate LLbb(*,j,nu,j1)
           DO mu
              REQUEST T2AO_bb(mu,j,nu,j1) j1
              DO b
                 Tbjxj(b,j,nu,j1) = T2AO_bb(mu,j,nu,j1)*cb(mu,b)
                 LLbb(b,j,nu,j1) += Tbjxj(b,j,nu,j1)
              ENDDO b
           ENDDO mu
           DO b
              LLbb(b,j,nu,j1) *= 0.5
              DO b1
                 Tbjbj(b,j,b1,j1)             = LLbb(b,j,nu,j1)*cb(nu,b1)
                 PREPARE VCHACT2BB(b,j,b1,j1) += Tbjbj(b,j,b1,j1) 
              ENDDO b1
           ENDDO b
           deallocate LLbb(*,j,nu,j1)
     ENDPARDO nu, j, j1
#
     PARDO nu, i, j
           allocate LLab(*,i,nu,j)
           DO mu
              REQUEST T2AO_ab(mu,i,nu,j) j
              DO a
                 Taixj(a,i,nu,j) = T2AO_ab(mu,i,nu,j)*ca(mu,a)
                 LLab(a,i,nu,j) += Taixj(a,i,nu,j)
              ENDDO a
           ENDDO mu
           DO a
              DO b
                 Taibj(a,i,b,j)             = LLab(a,i,nu,j)*cb(nu,b)
                 PREPARE VCHACT2AB(a,i,b,j) += Taibj(a,i,b,j) 
              ENDDO b
           ENDDO a
           deallocate LLab(*,i,nu,j)
     ENDPARDO nu, i, j
#
#    ------------------------------------------------------------------------ 
#
     ENDPROC AOLADDER_NEW  
#    -------------------- 




# ---------------------------------------------------------------------- 
#
     PROC UPDATE
#    ----------- 
#
     PARDO a, a1, i, i1
           REQUEST            VCHACT2AA(a,i,a1,i1) i1
           Taiai(a,i,a1,i1) = VCHACT2AA(a,i,a1,i1)
#
                  PREPARE VCH2AA(a,i,a1,i1) = taiai(a,i,a1,i1) 
#
     ENDPARDO a, a1, i, i1
#
     PARDO b, b1, j, j1
#
           REQUEST           VCHACT2BB(b,j,b1,j1) j1
           Tbjbj(b,j,b1,j1)= VCHACT2BB(b,j,b1,j1)
#
                  PREPARE VCH2BB(b,j,b1,j1) = tbjbj(b,j,b1,j1) 
#
     ENDPARDO b, b1, j, j1
#
     PARDO a, b, i, j
#
           REQUEST          VCHACT2AB(a,i,b,j) j
           Taibj(a,i,b,j) = VCHACT2AB(a,i,b,j)
#
                  PREPARE VCH2AB(a,i,b,j) = taibj(a,i,b,j)
#
     ENDPARDO a, b, i, j
#
#    one particle amplitudes
#
     PARDO a, i 
#
           GET        VCHACT1A(a,i)
           tai(a,i) = VCHACT1A(a,i)
#
                  PUT VCH1A(a,i) = tai(a,i) 
     ENDPARDO a, i 
#
     PARDO b, j 
#
           GET        VCHACT1B(b,j)
           tbj(b,j) = VCHACT1B(b,j)
#
                  PUT VCH1B(b,j) = tbj(b,j) 
     ENDPARDO b, j 
#
     ENDPROC UPDATE
#    --------------
#
# ---------------------------------------------------------------------------- 
# ---------------------------------------------------------------------------- 
#
#
     PROC VCHACT_ZERO
#    ---------------
#     
          PARDO a, i
                tai(a,i) = 0.0
                PUT VCHACT1A(a,i) = tai(a,i)
          ENDPARDO a, i
#           
          PARDO b, j       
                tbj(b,j) = 0.0
                PUT VCHACT1B(b,j) = tbj(b,j)
          ENDPARDO b, j
#                 
          PARDO a, a1, i, i1
                Taiai(a,i,a1,i1) = 0.0     
                PREPARE VCHACT2AA(a,i,a1,i1) = Taiai(a,i,a1,i1)
          ENDPARDO a, a1, i, i1          
#
          PARDO b, b1, j, j1
                Tbjbj(b,j,b1,j1) = 0.0
                PREPARE VCHACT2BB(b,j,b1,j1) = Tbjbj(b,j,b1,j1)
          ENDPARDO b, b1, j, j1
#
          PARDO a, b, i, j
                Taibj(a,i,b,j) = 0.0
                PREPARE VCHACT2AB(a,i,b,j) = Taibj(a,i,b,j)
          ENDPARDO a, b, i, j
#
     ENDPROC VCHACT_ZERO
#    ------------------- 

# ------------------------------------------------------------------------ 
#
     PROC SYMMETRHC_A
#    ---------------- 
#
     PARDO a, a1, i, i1
           Taiai(a,i,a1,i1)              = 0.0
           PREPARE VTEMP2AA1(a,i,a1,i1)    = Taiai(a,i,a1,i1)
           PREPARE VCHACT2AA(a,i,a1,i1) = Taiai(a,i,a1,i1)
     ENDPARDO  a, a1, i, i1
#
     PARDO b, b1, j, j1
           Tbjbj(b,j,b1,j1)             = 0.0
           PREPARE VTEMP2BB1(b,j,b1,j1) = Tbjbj(b,j,b1,j1)
           PREPARE VCHACT2BB(b,j,b1,j1) = Tbjbj(b,j,b1,j1)
     ENDPARDO b, b1, j, j1
#
     execute server_barrier
#
     PARDO a, a1, i, i1
                 REQUEST            VCH2AA(a,i,a1,i1) a 
                 taiai(a,i,a1,i1) = VCH2AA(a,i,a1,i1)  
#
                 R3aiai(a1,i,a,i1) = 0.0
                 Raiai(a,i,a1,i1)  = 0.0
#
                 if a == a1
#   
                    Raiai(a,i,a1,i1)    =Taiai(a,i,a1,i1)
                    execute symm_force_a Raiai
#
                 endif
#
                 if a < a1
#
                    Raiai(a,i,a1,i1)   = Taiai(a,i,a1,i1)
                    R3aiai(a1,i,a,i1)  = Taiai(a,i,a1,i1)
                    R3aiai(a1,i,a,i1) *= -1.0
#
                 endif
#
                 PREPARE VTEMP2AA1(a,i,a1,i1) += Raiai(a,i,a1,i1)
                 PREPARE VTEMP2AA1(a1,i,a,i1) += R3aiai(a1,i,a,i1)
#
     ENDPARDO  a, a1, i, i1
#
     PARDO b, b1, j, j1
                 REQUEST            VCH2BB(b,j,b1,j1) b 
                 tbjbj(b,j,b1,j1) = VCH2BB(b,j,b1,j1)  
#
                 R3bjbj(b1,j,b,j1) = 0.0
                 Rbjbj(b,j,b1,j1)  = 0.0
#
                 if b == b1
#   
                    Rbjbj(b,j,b1,j1)    =Tbjbj(b,j,b1,j1)
                    execute symm_force_a Rbjbj 
#
                 endif
#
                 if b < b1
#
                    Rbjbj(b,j,b1,j1)   = Tbjbj(b,j,b1,j1)
                    R3bjbj(b1,j,b,j1)  = Tbjbj(b,j,b1,j1)
                    R3bjbj(b1,j,b,j1) *= -1.0
#
                 endif
#
                 PREPARE VTEMP2BB1(b,j,b1,j1) += Rbjbj(b,j,b1,j1)
                 PREPARE VTEMP2BB1(b1,j,b,j1) += R3bjbj(b1,j,b,j1)
     ENDPARDO  b, b1, j, j1
#
     execute server_barrier
#
     PARDO a, a1, i, i1
#
           REQUEST            VTEMP2AA1(a,i,a1,i1) i1
           Taiai(a,i,a1,i1) = VTEMP2AA1(a,i,a1,i1)
#
           R2aiai(a,i1,a1,i)= 0.0
           Raiai(a,i,a1,i1) = 0.0
#
           if i == i1
#
              Raiai(a,i,a1,i1)=Taiai(a,i,a1,i1)
              execute symm_force_i Raiai
#
           endif
#
           if i < i1
#
              Raiai(a,i,a1,i1)   = Taiai(a,i,a1,i1)
              R2aiai(a,i1,a1,i)  = Taiai(a,i,a1,i1)
              R2aiai(a,i1,a1,i) *= -1.0
#
           endif
#
           PREPARE VCHACT2AA(a,i,a1,i1) += Raiai(a,i,a1,i1)
           PREPARE VCHACT2AA(a,i1,a1,i) += R2aiai(a,i1,a1,i)
#
     ENDPARDO  a, a1, i, i1
#
     PARDO  b, b1, j, j1
#
           REQUEST            VTEMP2BB1(b,j,b1,j1) j1
           Tbjbj(b,j,b1,j1) = VTEMP2BB1(b,j,b1,j1)
#
           R2bjbj(b,j1,b1,j)= 0.0
           Rbjbj(b,j,b1,j1) = 0.0
#
           if j == j1
#
              Rbjbj(b,j,b1,j1)=Tbjbj(b,j,b1,j1)
              execute symm_force_i Rbjbj
#
           endif
#
           if j < j1
#
              Rbjbj(b,j,b1,j1)   = Tbjbj(b,j,b1,j1)
              R2bjbj(b,j1,b1,j)  = Tbjbj(b,j,b1,j1)
              R2bjbj(b,j1,b1,j) *= -1.0
#
           endif
#
           PREPARE VCHACT2BB(b,j,b1,j1) += Rbjbj(b,j,b1,j1)
           PREPARE VCHACT2BB(b,j1,b1,j) += R2bjbj(b,j1,b1,j)
#
     ENDPARDO  b, b1, j, j1
#
     execute server_barrier
#
     ENDPROC SYMMETRHC_A
#    ------------------- 
#
     PROC SYMMETRHC_B
#    ----------------
#
     PARDO a, a1, i, i1
           REQUEST            VCHACT2AA(a,i,a1,i1) i1
           Taiai(a,i,a1,i1) = VCHACT2AA(a,i,a1,i1)
#
                 PREPARE VCH2AA(a,i,a1,i1) = taiai(a,i,a1,i1)
     ENDPARDO  a, a1, i, i1
#
     PARDO b, b1, j, j1
           REQUEST            VCHACT2BB(b,j,b1,j1) j1
           Tbjbj(b,j,b1,j1) = VCHACT2BB(b,j,b1,j1)
#
                 PREPARE VCH2BB(b,j,b1,j1) = tbjbj(b,j,b1,j1)
     ENDPARDO  b, b1, j, j1
#
     ENDPROC SYMMETRHC_B
#-------------------------------------------------------------------------

      

#-------------------------------------------------------------------------
#
#     --------------------
      PROC  LEFT_FACTORIZE
#     --------------------
#
#
     PARDO a, i, j, j1 
           Tjaji(j1,a,j,i)         = 0.0 
           PREPARE Njjai(j1,a,j,i) = Tjaji(j1,a,j,i) 
     ENDPARDO a, i, j, j1 

     PARDO i, i1, j, b 
           T1pqpq(i1,b,i,j)        = 0.0 
           PREPARE Niibj(i1,b,i,j) = T1pqpq(i1,b,i,j)
     ENDPARDO i, i1, j, b 

     PARDO i, i1, i2, a 
           T1pppp(i1,a,i,i2)        = 0.0 
           prepare Niiai(i1,a,i,i2) = T1pppp(i1,a,i,i2)
     ENDPARDO i, i1, i2, a 

     PARDO j, j1, j2, b 
           T1qqqq(j1,b,j,j2)        = 0.0 
           prepare Njjbj(j1,b,j,j2) = T1qqqq(j1,b,j,j2)
     ENDPARDO j, j1, j2, b 

     PARDO i, i1, j, j1 
           tiijj(i,i1,j,j1) = 0.0 
           put Niijj(i,i1,j,j1) = tiijj(i,i1,j,j1)
     ENDPARDO i, i1, j, j1 

     PARDO i, i1, i2, i3 
           tiiii(i,i1,i2,i3) = 0.0 
           PUT Niiii(i,i1,i2,i3) = tiiii(i,i1,i2,i3) 
     ENDPARDO i, i1, i2, i3 

     PARDO j, j1, j2, j3 
           tjjjj(j,j1,j2,j3) = 0.0 
           PUT Njjjj(j,j1,j2,j3) = tjjjj(j,j1,j2,j3) 
     ENDPARDO j, j1, j2, j3 

     EXECUTE  SIP_BARRIER
     EXECUTE  SERVER_BARRIER
#
#
#                 cb  ij
#     Form F   = t   l
#           ab    ij  ca
#
#
#       ALPHA
#       -----
#
#          Alpha - Alpha part
#
#
      PARDO  i, i1, a1, a2

         REQUEST              VCACT2AA (a2,i,a1,i1) i
         tpppp (i1,a2,i,a1) = VCACT2AA (a2,i,a1,i1)

         DO a
            REQUEST          T2old_aa (a,i1,a2,i) a
            taa    (a,a1)  = T2old_aa (a,i1,a2,i) * tpppp (i1,a2,i,a1)
            taa    (a,a1) *= 0.5
            LFae_a (a,a1) -= taa (a,a1)
         ENDDO a

      ENDPARDO  i, i1, a1, a2
#
#
#          Alpha - Beta part
#
#
      PARDO  i, j, a1, b

         REQUEST            VCACT2AB (a1,i,b,j) j
         tpqqp (i,b,j,a1) = VCACT2AB (a1,i,b,j)

         DO a
            REQUEST          T2old_ab (a,i,b,j) a
            taa    (a,a1)  = T2old_ab (a,i,b,j) * tpqqp (i,b,j,a1)
            LFae_a (a,a1) -= taa (a,a1)
         ENDDO a

      ENDPARDO  i, j, a1, b
#
#
#       BETA 
#       ----
#
#          Beta - Beta part
#
#
      PARDO  j, j1, b1, b2

         REQUEST              VCACT2BB (b2,j,b1,j1) j1
         tqqqq (j1,b2,j,b1) = VCACT2BB (b2,j,b1,j1)

         DO b
            REQUEST          T2old_bb (b,j1,b2,j) b
            tbb    (b,b1)  = T2old_bb (b,j1,b2,j) * tqqqq (j1,b2,j,b1)
            tbb    (b,b1) *= 0.5
            LFae_b (b,b1) -= tbb (b,b1)
         ENDDO b

      ENDPARDO  j, j1, b1, b2
#
#
#          Beta - Alpha part
#
#
      PARDO  i, j, a, b1
      
         REQUEST            VCACT2AB (a,i,b1,j) j
         tppqq (a,i,j,b1) = VCACT2AB (a,i,b1,j) 
         
         DO b
            REQUEST            T2old_ab  (a,i,b,j) b
            tqppq  (b,a,i,j) = T2old_ab  (a,i,b,j)
            tbb    (b,b1)    = tqppq (b,a,i,j) * tppqq (a,i,j,b1)
            LFae_b (b,b1)   -= tbb (b,b1)
         ENDDO b
         
      ENDPARDO  i, j, a, b1
#
#
#                 ab  ij
#     Form F   = t   l
#           ij    ij  ab
#
#
#       ALPHA
#       -----
#
#          Alpha - Alpha part
#
#
      PARDO  i1, i2, a, a1

         REQUEST             VCACT2AA (a,i2,a1,i1) i1
         DO i
            REQUEST             T2old_aa (a,i2,a1,i) i
            tpppp (i,a,i2,a1) = T2old_aa (a,i2,a1,i)

            tii    (i,i1)  = tpppp (i,a,i2,a1) * VCACT2AA (a,i2,a1,i1)
            tii    (i,i1) *= 0.5
            LFmi_a (i,i1) += tii (i,i1)
         ENDDO i

      ENDPARDO  i1, i2, a, a1
#
#
#          Alpha - Beta part
#
#
      PARDO  i1, j, a, b

         REQUEST            VCACT2AB (a,i1,b,j) j
         tpqqp (a,b,j,i1) = VCACT2AB (a,i1,b,j)

         DO i
            REQUEST            T2old_ab (a,i,b,j) i
            tiabj  (i,a,b,j) = T2old_ab (a,i,b,j)
            tii    (i,i1)    = tiabj (i,a,b,j) * tpqqp (a,b,j,i1)
            LFmi_a (i,i1)   += tii (i,i1)
         ENDDO i

      ENDPARDO  i1, j, a, b
#
#
#       BETA 
#       ----
#
#          Beta - Beta part
#
#
      PARDO  j1, j2, b, b1

         REQUEST             VCACT2BB (b,j2,b1,j1) j1
         DO j
            REQUEST             T2old_bb (b,j2,b1,j) j
            tqqqq (j,b,j2,b1) = T2old_bb (b,j2,b1,j)

            tjj    (j,j1)  = tqqqq (j,b,j2,b1) * VCACT2BB (b,j2,b1,j1)
            tjj    (j,j1) *= 0.5
            LFmi_b (j,j1) += tjj (j,j1)
         ENDDO j

      ENDPARDO  j1, j2, b, b1
#     
#
#          Beta - Alpha part
#
#
      PARDO  i, j1, a, b
      
         REQUEST  VCACT2AB (a,i,b,j1) j1
         DO j
            REQUEST            T2old_ab (a,i,b,j) i
            tqppq  (j,a,i,b) = T2old_ab (a,i,b,j)
            tjj    (j,j1)    = tqppq (j,a,i,b) * VCACT2AB (a,i,b,j1)
            LFmi_b (j,j1)   += tjj (j,j1)
         ENDDO j
         
      ENDPARDO  i, j1, a, b
#
#
#                     -               -
#           ij    ij |  1   cd    c d  |
#     Form N   = l   | --- t   + t t   |
#           kl    cd |  2   kl    k l  |
#                     -               -
#
#       ALPHA - ALPHA
#       -------------
#
      PARDO  i2, i3, a, a1

         ALLOCATE l2aiai (a,i2,a1,i3)
         REQUEST  T2old_aa   (a,i2,a1,i3) i3

         tai    (a,i2)        = ST1A (a,i2)
         t1ai   (a,i3)        = ST1A (a,i3)
         t1aiai (a,i2,a1,i3)  = tai  (a,i2) ^ ST1A (a1,i3)
         t2aiai (a,i2,a1,i3)  = t1ai (a,i3) ^ ST1A (a1,i2)
         t1aiai (a,i2,a1,i3) -= t2aiai (a,i2,a1,i3)

         l2aiai  (a,i2,a1,i3)  = T2old_aa (a,i2,a1,i3)
         l2aiai  (a,i2,a1,i3) += t1aiai (a,i2,a1,i3)
         l2aiai  (a,i2,a1,i3) *= 0.5

         DO i
         DO i1
            REQUEST              VCACT2AA (a,i,a1,i1) i1
            tiiii (i2,i,i3,i1) = VCACT2AA (a,i,a1,i1) * l2aiai (a,i2,a1,i3)
            PUT  Niiii (i2,i,i3,i1) += tiiii (i2,i,i3,i1)
         ENDDO i1
         ENDDO i

         DEALLOCATE l2aiai (a,i2,a1,i3)

      ENDPARDO  i2, i3, a, a1

#      EXECUTE  SIP_BARRIER
#      EXECUTE  SERVER_BARRIER
#      EXECUTE  PRINT_SCALAR  ZERO
#      PARDO  i, i1, i2, i3
#         GET  Niiii (i,i1,i2,i3)
#         tiiii (i,i1,i2,i3) = Niiii (i,i1,i2,i3)
#         EXECUTE  C2AA_PRINT  tiiii  ZERO
#      ENDPARDO  i, i1, i2, i3
#
#
#       BETA - BETA
#       -----------
#
      PARDO  j2, j3, b, b1

         ALLOCATE  l2bjbj (b,j2,b1,j3)
         REQUEST   T2old_bb  (b,j2,b1,j3) j3

         tbj    (b,j2)        = ST1B (b,j2)
         t1bj   (b,j3)        = ST1B (b,j3)
         t1bjbj (b,j2,b1,j3)  = tbj  (b,j2) ^ ST1B (b1,j3)
         t2bjbj (b,j2,b1,j3)  = t1bj (b,j3) ^ ST1B (b1,j2)
         t1bjbj (b,j2,b1,j3) -= t1bjbj (b,j2,b1,j3)

         l2bjbj  (b,j2,b1,j3)  = T2old_bb (b,j2,b1,j3)
         l2bjbj  (b,j2,b1,j3) += t1bjbj (b,j2,b1,j3)
         l2bjbj  (b,j2,b1,j3) *= 0.5

         DO j
         DO j1
            REQUEST              VCACT2BB (b,j,b1,j1) j1
            tjjjj (j2,j,j3,j1) = VCACT2BB (b,j,b1,j1) * l2bjbj (b,j2,b1,j3)
            PUT  Njjjj (j2,j,j3,j1) += tjjjj (j2,j,j3,j1)
         ENDDO j1
         ENDDO j

         DEALLOCATE  l2bjbj (b,j2,b1,j3)

      ENDPARDO  j2, j3, b, b1
#
#
#       ALPHA - BETA
#       ------------
#        
      PARDO  i2, j1, a, b
      
         REQUEST  T2old_ab (a,i2,b,j1) j1
         GET      t1a_old  (a,i2)
         GET      t1b_old  (b,j1)

         tai   (a,i2)        = t1a_old  (a,i2)
         taibj (a,i2,b,j1)   = tai  (a,i2) ^ t1b_old (b,j1)
         taibj (a,i2,b,j1)  += T2old_ab (a,i2,b,j1)
         
         DO i
         DO j
            REQUEST             VCACT2AB (a,i,b,j) j
            tiijj (i,i2,j,j1) = VCACT2AB (a,i,b,j) * taibj (a,i2,b,j1)
            PUT  Niijj (i,i2,j,j1) += tiijj (i,i2,j,j1)
         ENDDO j
         ENDDO i
      
      ENDPARDO  i2, j1, a, b
#     
#
#
#           ck    d  ij
#     Form N   = t  l
#           ij    k  cd
#
#
#       ALPHA - ALPHA
#       -------------  
#
      PARDO  i, i1, i2, a

         DO a1
            REQUEST  VCACT2AA (a,i,a1,i1) a1
            GET      t1a_old      (a1,i2)

            tpppp (i,a,i1,i2) = t1a_old (a1,i2) * VCACT2AA (a,i,a1,i1)
            PREPARE  Niiai (i,a,i1,i2) += tpppp (i,a,i1,i2)
         ENDDO a1

      ENDPARDO  i, i1, i2, a
#
#      EXECUTE  SIP_BARRIER
#      EXECUTE  SERVER_BARRIER
#      EXECUTE  PRINT_SCALAR  ZERO
#      PARDO  i, i1, i2, a
#         REQUEST  Niiai (i,a,i1,i2) i2
#         tpppp (i,a,i1,i2) = Niiai (i,a,i1,i2)
#         EXECUTE  C2AA_PRINT  tpppp  ZERO
#      ENDPARDO  i, i1, i2, a
#      EXECUTE  SIP_BARRIER
#      EXECUTE  SERVER_BARRIER
#
#
#       BETA - BETA
#       -----------  
#
      PARDO  j, j1, j2, b

         DO b1
            REQUEST  VCACT2BB (b,j,b1,j1) b1
            GET      t1b_old      (b1,j2)

            tqqqq (j,b,j1,j2) = t1b_old (b1,j2) * VCACT2BB (b,j,b1,j1)
            PREPARE  Njjbj (j,b,j1,j2) += tqqqq (j,b,j1,j2)
         ENDDO b1

      ENDPARDO  j, j1, j2, b
#
#
#       ALPHA - BETA
#       ------------  
#
      PARDO  a, i, b, j

         REQUEST  VCACT2AB (a,i,b,j) j
         tqppq (j,a,i,b) = VCACT2AB (a,i,b,j)
      
         DO j1
            GET  t1b_old (b,j1)
            t1qpqp (j,a,j1,i) = tqppq (j,a,i,b) * t1b_old (b,j1)
            PREPARE  Njjai (j,a,j1,i) += t1qpqp (j,a,j1,i)
         ENDDO j1
            
      ENDPARDO  a, i, b, j 

#      PARDO  i, j, j1, a
#
#         DO b
#            GET               t1b_old      (b,j1)
#            REQUEST           VCACT2AB (a,i,b,j) b
#
#            tqppq (j,a,i,j1) = VCACT2AB (a,i,b,j) * t1b_old (b,j1)
#            PREPARE  Njjai (j,a,i,j1) += tqppq (j,a,i,j1)
#         ENDDO b
#
#      ENDPARDO  i, j, j1, a

      PARDO  i, j, b, a

         REQUEST  VCACT2AB (a,i,b,j) j

         DO i2
            GET                t1a_old (a,i2)
            tpqpq (i,b,i2,j) = t1a_old (a,i2) * VCACT2AB (a,i,b,j)
            PREPARE  Niibj (i,b,i2,j) += tpqpq (i,b,i2,j)
         ENDDO i2

      ENDPARDO  i, j, b, a
#
#
#          Done computing the intermediates!
#
#
      DO i 
      DO i1 
         tii(i,i1)        = LFmi_a(i,i1) 
         PUT Fmi_a(i,i1) += tii(i,i1) 
      ENDDO i1 
      ENDDO i 
      DO j 
      DO j1 
         tjj(j,j1)        = LFmi_b(j,j1) 
         PUT Fmi_b(j,j1) += tjj(j,j1) 
      ENDDO j1 
      ENDDO j 
      DO a 
      DO a1 
         taa(a,a1)        = LFae_a(a,a1) 
         PUT Fae_a(a,a1) += taa(a,a1) 
      ENDDO a1 
      ENDDO a 
      DO b 
      DO b1 
         tbb(b,b1)        = LFae_b(b,b1) 
         PUT Fae_b(b,b1) += tbb(b,b1) 
      ENDDO b1 
      ENDDO b 
      execute server_barrier 
      DO a 
      DO a1 
         GET            Fae_a(a,a1) 
         taa(a,a1)    = Fae_a(a,a1)  
         LFae_a(a,a1) = taa(a,a1) # Fae_a(a,a1) 
      ENDDO a1 
      ENDDO a 
      DO b 
      DO b1 
         GET            Fae_b(b,b1) 
         tbb(b,b1)    = Fae_b(b,b1)  
         LFae_b(b,b1) = tbb(b,b1) # Fae_b(b,b1) 
      ENDDO b1 
      ENDDO b 
      DO i 
      DO i1 
         GET            Fmi_a(i,i1) 
         tii(i,i1)    = Fmi_a(i,i1)    
         LFmi_a(i,i1) = tii(i,i1) # Fmi_a(i,i1) 
      ENDDO i1 
      ENDDO i 
      DO j 
      DO j1 
         GET            Fmi_b(j,j1) 
         tjj(j,j1)    = Fmi_b(j,j1) 
         LFmi_b(j,j1) = tjj(j,j1) # Fmi_b(j,j1) 
      ENDDO j1 
      ENDDO j 
      EXECUTE SIP_BARRIER 
#
#
#     -----------------------
      ENDPROC  LEFT_FACTORIZE
#-------------------------------------------------------------------------



#-------------------------------------------------------------------------
#
#     --------------
      PROC  L1_PRINT
#     --------------
#
#
#          Barriers and print!
#
#
      EXECUTE  SIP_BARRIER
      EXECUTE  SERVER_BARRIER
      EXECUTE  PRINT_SCALAR  ZERO
      PARDO  a, i
         GET         VCHACT1A (a,i)
         tai (a,i) = VCHACT1A (a,i)
         EXECUTE  DUMP_AMP  tai
      ENDPARDO  a, i
      EXECUTE  SIP_BARRIER
      EXECUTE  SERVER_BARRIER
      EXECUTE  PRINT_SCALAR  ZERO
      PARDO  b, j
         GET         VCHACT1B (b,j)
         tbj (b,j) = VCHACT1B (b,j)
         EXECUTE  DUMP_AMP  tbj
      ENDPARDO  b, j
      EXECUTE  SIP_BARRIER
      EXECUTE  SERVER_BARRIER
#     
#
#          ...ready!
#
#
#     -----------------
      ENDPROC  L1_PRINT
#-------------------------------------------------------------------------



#-------------------------------------------------------------------------
#
#     ----------------
      PROC  L2AA_PRINT
#     ----------------
#
#
#          Barriers and print!
#
#
      EXECUTE  PRINT_SCALAR  ZERO
      EXECUTE  SERVER_BARRIER
      PARDO  a, i, a1, i1

         REQUEST              VCHACT2AA (a,i,a1,i1) i1
         taiai (a,i,a1,i1)  = VCHACT2AA (a,i,a1,i1)
         EXECUTE  DUMP_AMP  taiai

      ENDPARDO  a, i, a1, i1
      EXECUTE  SERVER_BARRIER
#
#
#          ...ready!
#
#
#     -------------------
      ENDPROC  L2AA_PRINT
#-------------------------------------------------------------------------



#-------------------------------------------------------------------------
#     
#     ----------------
      PROC  L2BB_PRINT
#     ----------------
#
#
#          Barriers and print!
#     
#     
      EXECUTE  PRINT_SCALAR  ZERO
      EXECUTE  SERVER_BARRIER
      PARDO  b, j, b1, j1     
         
         REQUEST              VCHACT2BB (b,j,b1,j1) j1
         tbjbj (b,j,b1,j1)  = VCHACT2BB (b,j,b1,j1)
         EXECUTE  DUMP_AMP  tbjbj
      
      ENDPARDO  b, j, b1, j1
      EXECUTE  SERVER_BARRIER
#
#
#          ...ready!
#
#     
#     -------------------
      ENDPROC  L2BB_PRINT
#-------------------------------------------------------------------------



#-------------------------------------------------------------------------
#
#     ----------------
      PROC  L2AB_PRINT
#     ----------------
#   
#
#          Barriers and print!
#
#
      EXECUTE  PRINT_SCALAR  ZERO
      EXECUTE  SERVER_BARRIER
      PARDO  a, i, b, j

         REQUEST              VCHACT2AB (a,i,b,j) j 
         taibj (a,i,b,j)   =  VCHACT2AB (a,i,b,j)
         EXECUTE  DUMP_AMP  taibj

      ENDPARDO  a, i, b, j
      EXECUTE  SERVER_BARRIER
#
#
#          ...ready!
#
#     
#     -------------------
      ENDPROC  L2AB_PRINT
#-------------------------------------------------------------------------




#-------------------------------------------------------------------------
#
#     --------------
      PROC  L2AA_OPT
#     --------------
#
#
#           1   i ,i1  i2,i3     1                i ,i1
#          --- G      l       + --- (a,i2|a1,i3) N
#           2   i2,i3  a ,a1     2                i2,i3
#
#
      PARDO  a, a1, i2, i3

         WHERE i2 < i3

            REQUEST  VCACT2AA (a,i2,a1,i3) i3
            REQUEST  VSpipi   (a,i2,a1,i3) i3

            DO i
            DO i1
               REQUEST  HBAR_iiii (i,i2,i1,i3) i1
               GET      Niiii     (i2,i,i3,i1)

               taiai  (a,i,a1,i1)  = HBAR_iiii (i,i2,i1,i3) * VCACT2AA (a,i2,a1,i3)
               taiai  (a,i,a1,i1) *= 0.25
               t1aiai (a,i,a1,i1)  = taiai (a,i,a1,i1)

               taiai  (a,i,a1,i1)  = VSpipi (a,i2,a1,i3) * Niiii (i2,i,i3,i1)
               taiai  (a,i,a1,i1) *= 0.25
               t1aiai (a,i,a1,i1) += taiai (a,i,a1,i1)

               PUT  D2aa (a,i,a1,i1) += t1aiai (a,i,a1,i1)
            ENDDO i1
            ENDDO i

      ENDPARDO  a, a1, i2, i3

      PARDO  a, a1, i2, i3

         WHERE i2 == i3

            REQUEST  VCACT2AA (a,i2,a1,i3) i3
            REQUEST  VSpipi   (a,i2,a1,i3) i3
         
            DO i
            DO i1
               REQUEST  HBAR_iiii (i,i2,i1,i3) i1
               GET      Niiii     (i2,i,i3,i1)
            
               taiai  (a,i,a1,i1)  = HBAR_iiii (i,i2,i1,i3) * VCACT2AA (a,i2,a1,i3)
               taiai  (a,i,a1,i1) *= 0.125
               t1aiai (a,i,a1,i1)  = taiai (a,i,a1,i1)

               taiai  (a,i,a1,i1)  = VSpipi (a,i2,a1,i3) * Niiii (i2,i,i3,i1)
               taiai  (a,i,a1,i1) *= 0.125
               t1aiai (a,i,a1,i1) += taiai (a,i,a1,i1)

               PUT  D2aa (a,i,a1,i1) += t1aiai (a,i,a1,i1) 
            ENDDO i1  
            ENDDO i

      ENDPARDO  a, a1, i2, i3
#
#
#                        -                          -
#                       |  a2,i1  i,i2    b,i1  i,j  |
#          P(i,i1|a,a1) | G      l     + G     l     |
#                       |  i2,a1  a,a2    j,a1  a,b  |
#                        -                          -
#
#
      PARDO  a1, i1, a2, i2

         REQUEST                HBAR_AJIB_aaaa (i1,a1,a2,i2) i2
         t1aiai (a2,i2,a1,i1) = HBAR_AJIB_aaaa (i1,a1,a2,i2)

         DO i
         DO a
            REQUEST             VCACT2AA (a,i,a2,i2) a
            taiai (a,i,a1,i1) = VCACT2AA (a,i,a2,i2) * t1aiai (a2,i2,a1,i1)
            PUT  D2aa (a,i,a1,i1) += taiai (a,i,a1,i1)
         ENDDO a
         ENDDO i

      ENDPARDO  a1, i1, a2, i2

      PARDO  a1, i1, b, j

         REQUEST             HBAR_AJIB_aabb (i1,a1,b,j) j
         tbjai (b,j,a1,i1) = HBAR_AJIB_aabb (i1,a1,b,j)

         DO i
         DO a
            REQUEST             VCACT2AB (a,i,b,j) a
            taiai (a,i,a1,i1) = VCACT2AB (a,i,b,j) * tbjai (b,j,a1,i1)
            PUT  D2aa (a,i,a1,i1) += taiai (a,i,a1,i1)
         ENDDO a
         ENDDO i

      ENDPARDO  a1, i1, b, j
#
#
#                   -                                             -
#                  |  a2,i  i1          i,i2                       |
#          P(i,i1) | G     l  - H      l     - (a,i|a1,i2) F       |
#                  |  a1,a  a2   i1,i2  a,a1                i2,i1  |
#                   -                                             -
#
#
      PARDO  a, a1, a2, i
      WHERE a < a1

         REQUEST             HBAR_AIBC_aaaa (a2,a1,i,a) a
         tpppp (a,i,a1,a2) = HBAR_AIBC_aaaa (a2,a1,i,a)

         DO i1
            GET  VCACT1A (a2,i1)
            taiai  (a,i,a1,i1)  = tpppp (a,i,a1,a2) * VCACT1A (a2,i1)
            PUT  D2aa (a,i,a1,i1) += taiai (a,i,a1,i1)
         ENDDO i1
         
      ENDPARDO  a, a1, a2, i

      PARDO  a, a1, a2, i
      WHERE a == a1

         REQUEST             HBAR_AIBC_aaaa (a2,a1,i,a) a
         tpppp (a,i,a1,a2) = HBAR_AIBC_aaaa (a2,a1,i,a)

         DO i1
            GET  VCACT1A (a2,i1)

            taiai  (a,i,a1,i1)  = tpppp (a,i,a1,a2) * VCACT1A (a2,i1)
            t1aiai (a,i1,a1,i)  = taiai (a,i,a1,i1)
            t1aiai (a,i1,a1,i) *= -1.0

            PREPARE  VCHACT2AA (a,i,a1,i1) += taiai  (a,i,a1,i1)
            PREPARE  VCHACT2AA (a,i1,a1,i) += t1aiai (a,i1,a1,i)
         ENDDO i1

      ENDPARDO  a, a1, a2, i

      PARDO  a, i, a1, i2

         REQUEST  VCACT2AA (a,i,a1,i2) i2
         REQUEST  VSpipi   (a,i,a1,i2) i2

         DO i1
            t1aiai (a,i,a1,i1)  = VCACT2AA (a,i,a1,i2) * LHBAR_ii (i1,i2)
            taiai  (a,i,a1,i1)  = t1aiai (a,i,a1,i1)

            t1aiai (a,i,a1,i1)  = VSpipi (a,i,a1,i2) * LFmi_a (i2,i1)
            taiai  (a,i,a1,i1) += t1aiai (a,i,a1,i1)

            taiai  (a,i,a1,i1) *= -0.50
            PUT  D2aa (a,i,a1,i1) += taiai (a,i,a1,i1)
         ENDDO i1

      ENDPARDO  a, i, a1, i2
#
#
#                   -                                             -
#                  |  i1,i  i2          i,i1                       |
#          P(a,a1) |-G     l  + H      l     - (a,i|a2,i1) F       |
#                  |  i2,a  a1   a2,a1  a,a2                a2,a1  |
#                   -                                             -
#
#
      PARDO  a, i, i1, i2

         REQUEST             HBAR_JKIA_aaaa (i1,i2,i,a) i2
         tpppp (a,i,i2,i1) = HBAR_JKIA_aaaa (i1,i2,i,a)

         DO a1
            GET  VCACT1A (a1,i2)
            taiai  (a,i,a1,i1)  = tpppp (a,i,i2,i1) * VCACT1A (a1,i2)
            t1aiai (a1,i,a,i1)  = taiai (a,i,a1,i1)
            taiai  (a,i,a1,i1) *= -1.0

            PREPARE  VCHACT2AA (a,i,a1,i1) += taiai  (a,i,a1,i1)
            PREPARE  VCHACT2AA (a1,i,a,i1) += t1aiai (a1,i,a,i1)
         ENDDO a1

      ENDPARDO  a, i, i1, i2

      PARDO  a, i, a2, i1

         REQUEST  VCACT2AA (a,i,a2,i1) i1
         REQUEST  VSpipi   (a,i,a2,i1) i1

         DO a1
            t1aiai (a,i,a1,i1)  = VCACT2AA (a,i,a2,i1) * LHBAR_aa (a2,a1)
            taiai  (a,i,a1,i1)  = t1aiai (a,i,a1,i1)

            t1aiai (a,i,a1,i1)  = VSpipi (a,i,a2,i1) * LFae_a (a2,a1)
            taiai  (a,i,a1,i1) += t1aiai (a,i,a1,i1)

            taiai  (a,i,a1,i1) *=  0.50
            PUT  D2aa (a,i,a1,i1) += taiai (a,i,a1,i1)
         ENDDO a1

      ENDPARDO  a, i, a2, i1
#
#
#                          a2,i2
#          - (a,i2|a1,a2) N
#                          i1,i 
#
#
      PARDO  a, i, a1, a2

         ALLOCATE  llaiai (a,i,a1,*)

         DO i2
            REQUEST  VSaaai (a1,a2,a,i2) i2
            tpppp (a,a2,a1,i2) = VSaaai (a1,a2,a,i2)
            DO i1
               REQUEST  Niiai (i1,a2,i,i2) i1
               t1pppp (a2,i,i2,i1) = Niiai (i1,a2,i,i2)
               taiai (a,i,a1,i1)  = tpppp (a,a2,a1,i2) * t1pppp (a2,i,i2,i1)
               llaiai (a,i,a1,i1) -= taiai (a,i,a1,i1)
            ENDDO i1
         ENDDO i2

         DO i1
            PREPARE  VCHACT2AA (a,i,a1,i1) += llaiai (a,i,a1,i1)
         ENDDO i1

         DEALLOCATE  llaiai (a,i,a1,*)

      ENDPARDO  a, i, a1, a2
#
#
#                       _   i
#          P(i,i1|a,a1) H  l
#                        ia a1
#
#
      PARDO  a, i, a1, i1

         GET         VCACT1A  (a,i)
         tai (a1,i1) = LHBAR_ia (i1,a1)

         taiai (a,i,a1,i1) = VCACT1A (a,i) ^ tai (a1,i1)

         PUT  D2aa (a,i,a1,i1) += taiai (a,i,a1,i1)

      ENDPARDO  a, i, a1, i1
#
#
#          ...ready!
#
#
#     -----------------
      ENDPROC  L2AA_OPT
#-------------------------------------------------------------------------



#-------------------------------------------------------------------------
#
#     --------------
      PROC  L2AB_OPT
#     --------------
#
#
#
#              _                 _
#           a1,j  a1   _      a1,b         _ _
#          G   _ l   + H     l   _ - (i,a1|j,b) F
#           a ,b  i     a1,a  i ,j               a,a1
#
#
#
      PARDO  a1, b, j

         ALLOCATE  laabj (*,a1,b,j)

         DO a
            REQUEST            HBAR_AIBC_aabb (a1,a,j,b) a
            laabj (a,a1,b,j) = HBAR_AIBC_aabb (a1,a,j,b)
         ENDDO a

         DO i
            REQUEST  VCACT2AB (a1,i,b,j) j
            REQUEST  Vpiqj    (a1,i,b,j) j
            GET      VCACT1A  (a1,i)
            DO a
               t1aibj (a,i,b,j)  = laabj (a,a1,b,j) * VCACT1A (a1,i)
               taibj  (a,i,b,j)  = t1aibj (a,i,b,j)

               t1aibj (a,i,b,j)  = LHBAR_aa (a1,a) * VCACT2AB (a1,i,b,j)
               taibj  (a,i,b,j) += t1aibj (a,i,b,j)

               t1aibj (a,i,b,j)  = Vpiqj (a1,i,b,j) * LFae_a (a1,a)
               taibj  (a,i,b,j) += t1aibj (a,i,b,j)

               PREPARE  VCHACT2AB (a,i,b,j) += taibj (a,i,b,j)
            ENDDO a
         ENDDO i

         DEALLOCATE  laabj (*,a1,b,j)

      ENDPARDO  a1, b, j
#
#
#           __    __            __          
#           b1,i  b1   _      a,b1        _ __
#          G_    l_  + H__ _ l   _ - (i,a|j,b1) F_ __
#           b ,a  j     b1,b  i, j               b,b1
#
#
#
      PARDO  b1, a, i

         ALLOCATE  laibb (a,i,*,b1)

         DO b
            REQUEST            HBAR_AIBC_bbaa (b1,b,i,a) b
            laibb (a,i,b,b1) = HBAR_AIBC_bbaa (b1,b,i,a)
         ENDDO b

         DO j
            REQUEST  VCACT2AB (a,i,b1,j) j
            REQUEST  Vpiqj    (a,i,b1,j) j
            GET      VCACT1B  (b1,j)
            DO b
               t1aibj (a,i,b,j)  = laibb (a,i,b,b1) * VCACT1B (b1,j)
               taibj  (a,i,b,j)  = t1aibj (a,i,b,j)

               t1aibj (a,i,b,j)  = VCACT2AB (a,i,b1,j) * LHBAR_bb (b1,b)
               taibj  (a,i,b,j) += t1aibj (a,i,b,j)

               t1aibj (a,i,b,j)  = Vpiqj (a,i,b1,j) * LFae_b (b1,b)
               taibj  (a,i,b,j) += t1aibj (a,i,b,j)

               PREPARE  VCHACT2AB (a,i,b,j) += taibj (a,i,b,j)
            ENDDO b
         ENDDO j

         DEALLOCATE  laibb (a,i,*,b1)

      ENDPARDO  b1, a, i
#     
#
#              _                 _           
#           i ,j  a    _      a ,b         _ _
#         -G   _ l   - H     l   _ - (i1,a|j,b) F
#           i1,b  i1    i,i1  i1,j               i,i1
#
#
#
      PARDO  i1, b, j
            
         ALLOCATE  liibj (i1,*,b,j)  

         DO i
            REQUEST            HBAR_JKIA_aabb (i,i1,j,b) i
            liibj (i1,i,b,j) = HBAR_JKIA_aabb (i,i1,j,b)
         ENDDO i

         DO a
            REQUEST  VCACT2AB (a,i1,b,j) j
            REQUEST  Vpiqj    (a,i1,b,j) j
            GET      VCACT1A  (a,i1)
            DO i
               t1aibj (a,i,b,j)  = VCACT1A (a,i1) * liibj (i1,i,b,j)
               taibj  (a,i,b,j)  = t1aibj (a,i,b,j)

               t1aibj (a,i,b,j)  = Vpiqj (a,i1,b,j) * LFmi_a (i1,i)
               taibj  (a,i,b,j) += t1aibj (a,i,b,j)

               t1aibj (a,i,b,j)  = LHBAR_ii (i,i1) * VCACT2AB (a,i1,b,j)
               taibj  (a,i,b,j) += t1aibj (a,i,b,j)

               taibj (a,i,b,j) *= -1.0
               PREPARE  VCHACT2AB (a,i,b,j) += taibj (a,i,b,j)
            ENDDO i
         ENDDO a

         DEALLOCATE  liibj (i1,*,b,j)

      ENDPARDO  i1, b, j
#     
#
#           _     _             _           
#           j ,i  b    _      a,b         __ _
#         -G__   l__ - H_ __ l  __ - (i,a|j1,b) F_ __
#           j1,a  j1    j,j1  i,j1               j,j1
#
#
#
      PARDO  a, i, j1

         ALLOCATE  laijj (a,i,j1,*)

         DO j
            REQUEST  HBAR_JKIA_bbaa (j,j1,i,a) j
            laijj (a,i,j1,j) = HBAR_JKIA_bbaa (j,j1,i,a)
         ENDDO j

         DO b
            REQUEST  VCACT2AB (a,i,b,j1) j1
            REQUEST  Vpiqj    (a,i,b,j1) j1
            GET      VCACT1B  (b,j1)
            DO j
               t1aibj (a,i,b,j)  = laijj (a,i,j1,j) * VCACT1B (b,j1)
               taibj  (a,i,b,j)  = t1aibj (a,i,b,j)

               t1aibj (a,i,b,j)  = Vpiqj (a,i,b,j1) * LFmi_b (j1,j)
               taibj  (a,i,b,j) += t1aibj (a,i,b,j)

               t1aibj (a,i,b,j)  = VCACT2AB (a,i,b,j1) * LHBAR_jj (j,j1)
               taibj  (a,i,b,j) += t1aibj (a,i,b,j)

               taibj (a,i,b,j) *= -1.0
               PREPARE  VCHACT2AB (a,i,b,j) += taibj (a,i,b,j)
            ENDDO j
         ENDDO b

         DEALLOCATE  laijj (a,i,j1,*)

      ENDPARDO  a, i, j1
#
#                    _       _
#           a1,i  a1,b    a1,j  a,a1
#          G     l   _ + G   _ l
#           i1,a  i1,j    i1,b  i,i1
#
#
      PARDO  a, i, b, a1

         ALLOCATE  laibj (a,i,b,*)

         DO i1
            REQUEST             HBAR_AJIB_aaaa (i,a,a1,i1) i1
            REQUEST             VCACT2AA       (a,i,a1,i1) i1
            taiai (a,i,a1,i1) = HBAR_AJIB_aaaa (i,a,a1,i1)
            DO j
               REQUEST              HBAR_AJIB_bbaa (j,b,a1,i1) j
               REQUEST              VCACT2AB       (a1,i1,b,j) j
               t1aibj (a1,i1,b,j) = HBAR_AJIB_bbaa (j,b,a1,i1)

               t2aibj (a,i,b,j)  = VCACT2AA (a,i,a1,i1) * t1aibj (a1,i1,b,j)
               taibj  (a,i,b,j)  = t2aibj (a,i,b,j)

               t2aibj (a,i,b,j)  = taiai (a,i,a1,i1) * VCACT2AB (a1,i1,b,j)
               taibj  (a,i,b,j) += t2aibj (a,i,b,j)

               laibj (a,i,b,j) += taibj (a,i,b,j)
            ENDDO j
         ENDDO i1

         DO j
            PREPARE  VCHACT2AB (a,i,b,j) += laibj (a,i,b,j)
         ENDDO j

         DEALLOCATE  laibj (a,i,b,*)

      ENDPARDO  a, i, b, a1
#
#           __ _    __    __    _ __
#           b1,j  a,b1    b1,i  b,b1
#          G__ _ l  __ + G__   l_ __
#           j1,b  i,j1    j1,a  j,j1
#        
#
      PARDO  a, j, b, b1

         ALLOCATE  laibj (a,*,b,j)

         DO j1
            REQUEST  HBAR_AJIB_bbbb (j,b,b1,j1) j1
            REQUEST  VCACT2BB       (b,j,b1,j1) j1
            tbjbj  (b1,j1,b,j) = VCACT2BB (b,j,b1,j1)
            t1bjbj (b1,j1,b,j) = HBAR_AJIB_bbbb (j,b,b1,j1)
            DO i
               REQUEST  HBAR_AJIB_aabb (i,a,b1,j1) i
               REQUEST  VCACT2AB       (a,i,b1,j1) i

               t1aibj (a,i,b,j)  = HBAR_AJIB_aabb (i,a,b1,j1) * tbjbj (b1,j1,b,j)
               taibj  (a,i,b,j)  = t1aibj (a,i,b,j)

               t1aibj (a,i,b,j)  = VCACT2AB (a,i,b1,j1) * t1bjbj (b1,j1,b,j)
               taibj  (a,i,b,j) += t1aibj (a,i,b,j)

               laibj (a,i,b,j) += taibj (a,i,b,j)
            ENDDO i
         ENDDO j1

         DO i
            PREPARE  VCHACT2AB (a,i,b,j) += laibj (a,i,b,j)
         ENDDO i

         DEALLOCATE  laibj (a,*,b,j) 

      ENDPARDO  a, j, b, b1
#
#             __    __                   __
#           i,b1  a,b1         _ __   i1,b1
#         -G   _ l   _ - (a,i1|b,b1) N  _
#           i1,b  i1,j                i,j
#        
#
      PARDO  a, i, b, b1

         ALLOCATE  laibj (a,i,b,*)

         DO i1
            REQUEST             HBAR_AJIB_iibb (i,i1,b1,b) i1
            REQUEST             Vbbai          (b1,b,a,i1) i1
            tpqpq (a,b,i1,b1) = Vbbai          (b1,b,a,i1)
            DO j
               REQUEST  VCACT2AB (a,i1,b1,j) j
               REQUEST  Niibj    (i,b1,i1,j) j
               tibij (i1,b1,i,j) = Niibj (i,b1,i1,j)
               
               t1aibj (a,i,b,j)  = HBAR_AJIB_iibb (i,i1,b1,b) * VCACT2AB (a,i1,b1,j)
               taibj  (a,i,b,j)  = t1aibj (a,i,b,j)

               t1aibj (a,i,b,j)  = tpqpq (a,b,i1,b1) * tibij (i1,b1,i,j)
               t1aibj (a,i,b,j) *= -1.0
               taibj  (a,i,b,j) += t1aibj (a,i,b,j)

               laibj (a,i,b,j) += taibj (a,i,b,j)
            ENDDO j
         ENDDO i1

         DO j
            PREPARE  VCHACT2AB (a,i,b,j) += laibj (a,i,b,j)
         ENDDO j

         DEALLOCATE  laibj (a,i,b,*)

      ENDPARDO  a, i, b, b1
#
#           _        __                __   
#           j,a1  a1,b1         _ __   j1,a1
#         -G__   l  __  - (a1,a|b,j1) N_  
#           j1,a  i,j1                 j,i
#        
#
      PARDO  a, j, b, a1

         ALLOCATE  laibj (a,*,b,j)

         DO j1
            REQUEST             HBAR_AJIB_jjaa (j,j1,a1,a) j1
            REQUEST             Vaabj          (a1,a,b,j1) j1
            tpqpq (a,b,a1,j1) = Vaabj          (a1,a,b,j1)
            DO i
               REQUEST              VCACT2AB (a1,i,b,j1) i
               REQUEST              Njjai    (j,a1,j1,i) i
               t1pqpq (a1,j1,i,j) = Njjai    (j,a1,j1,i)

               t1aibj (a,i,b,j)  = HBAR_AJIB_jjaa (j,j1,a1,a) * VCACT2AB (a1,i,b,j1)
               taibj  (a,i,b,j)  = t1aibj (a,i,b,j)

               t1aibj (a,i,b,j)  = tpqpq (a,b,a1,j1) * t1pqpq (a1,j1,i,j)
               t1aibj (a,i,b,j) *= -1.0
               taibj  (a,i,b,j) += t1aibj (a,i,b,j)

               laibj (a,i,b,j) += taibj (a,i,b,j)
            ENDDO i
         ENDDO j1

         DO i
            PREPARE  VCHACT2AB (a,i,b,j) += laibj (a,i,b,j)
         ENDDO i

         DEALLOCATE  laibj (a,*,b,j)

      ENDPARDO  a, j, b, a1
#
#
#             _      _                      _
#           i,j    a,b             _ __   i,j
#          G   __ l   __  +  (a,i1|b,j1) N   __
#           i1,j1  i1,j1                  i1,j1
#
#
      PARDO  a, i, b, j1

         ALLOCATE  laibj (a,i,b,*)

         DO i1
            REQUEST  VCACT2AB (a,i1,b,j1) i1
            REQUEST  Vpiqj    (a,i1,b,j1) i1
            DO j
               REQUEST  HBAR_iijj (i,i1,j,j1) j
               GET      Niijj     (i,i1,j,j1)

               taibj (a,i,b,j)  = HBAR_iijj (i,i1,j,j1) * VCACT2AB (a,i1,b,j1)
               laibj (a,i,b,j) += taibj (a,i,b,j)

               taibj (a,i,b,j)  = Vpiqj (a,i1,b,j1) * Niijj (i,i1,j,j1)
               laibj (a,i,b,j) += taibj (a,i,b,j)
            ENDDO j
         ENDDO i1

         DO j
            PREPARE  VCHACT2AB (a,i,b,j) += laibj (a,i,b,j)
         ENDDO j

         DEALLOCATE  laibj (a,i,b,*)

      ENDPARDO  a, i, b, j1
#
#
#          _   b   _   a
#          H  l_ + H__l
#           ia j    jb i
#
#
      PARDO  a, i, b, j

         GET         VCACT1B  (b,j)
         GET         VCACT1A  (a,i)
         tai (a,i) = LHBAR_ia (i,a)
         tbj (b,j) = LHBAR_jb (j,b)

         taibj  (a,i,b,j)  = tai (a,i) ^ VCACT1B (b,j)
         t1aibj (a,i,b,j)  = VCACT1A (a,i) ^ tbj (b,j)
         taibj  (a,i,b,j) += t1aibj (a,i,b,j)

         PREPARE  VCHACT2AB (a,i,b,j) += taibj (a,i,b,j)

      ENDPARDO  a, i, b, j
#
#
#          ...ready!
#
#
#     -----------------
      ENDPROC  L2AB_OPT
#-------------------------------------------------------------------------



#-------------------------------------------------------------------------
#
#     --------------
      PROC  L2BB_OPT
#     --------------
#
#
#           1   i ,i1  i2,i3     1                i ,i1
#          --- G      l       + --- (a,i2|a1,i3) N
#           2   i2,i3  a ,a1     2                i2,i3
#
#
      PARDO  b, b1, j2, j3

         WHERE j2 < j3

            REQUEST  VCACT2BB (b,j2,b1,j3) j3
            REQUEST  VSqjqj   (b,j2,b1,j3) j3

            DO j
            DO j1
               REQUEST  HBAR_jjjj (j,j2,j1,j3) j1
               GET      Njjjj     (j2,j,j3,j1)

               tbjbj  (b,j,b1,j1)  = VCACT2BB (b,j2,b1,j3) * HBAR_jjjj (j,j2,j1,j3)
               tbjbj  (b,j,b1,j1) *= 0.25
               t1bjbj (b,j,b1,j1)  = tbjbj (b,j,b1,j1)

               tbjbj  (b,j,b1,j1)  = VSqjqj (b,j2,b1,j3) * Njjjj (j2,j,j3,j1)
               tbjbj  (b,j,b1,j1) *= 0.25
               t1bjbj (b,j,b1,j1) += tbjbj (b,j,b1,j1)

               PUT  D2bb (b,j,b1,j1) += t1bjbj (b,j,b1,j1)
            ENDDO j1
            ENDDO j

      ENDPARDO  b, b1, j2, j3

      PARDO  b, b1, j2, j3

         WHERE j2 == j3

            REQUEST  VCACT2BB (b,j2,b1,j3) j3
            REQUEST  VSqjqj   (b,j2,b1,j3) j3

            DO j
            DO j1
               REQUEST  HBAR_jjjj (j,j2,j1,j3) j1
               GET      Njjjj     (j2,j,j3,j1) 

               tbjbj  (b,j,b1,j1)  = VCACT2BB (b,j2,b1,j3) * HBAR_jjjj (j,j2,j1,j3)
               tbjbj  (b,j,b1,j1) *= 0.125
               t1bjbj (b,j,b1,j1)  = tbjbj (b,j,b1,j1)

               tbjbj  (b,j,b1,j1)  = VSqjqj (b,j2,b1,j3) * Njjjj (j2,j,j3,j1)
               tbjbj  (b,j,b1,j1) *= 0.125
               t1bjbj (b,j,b1,j1) += tbjbj (b,j,b1,j1)

               PUT  D2bb (b,j,b1,j1) += t1bjbj (b,j,b1,j1)
            ENDDO j1
            ENDDO j
      
      ENDPARDO  b, b1, j2, j3
#
#
#                        -                          -
#                       |  a2,i1  i,i2    b,i1  i,j  |
#          P(i,i1|a,a1) | G      l     + G     l     |
#                       |  i2,a1  a,a2    j,a1  a,b  |
#                        -                          -
#
#
      PARDO  b1, j1, b2, j2

         REQUEST                HBAR_AJIB_bbbb (j1,b1,b2,j2) b2
         t1bjbj (b2,j2,b1,j1) = HBAR_AJIB_bbbb (j1,b1,b2,j2)

         DO j
         DO b
            REQUEST             VCACT2BB (b,j,b2,j2) b
            tbjbj (b,j,b1,j1) = VCACT2BB (b,j,b2,j2) * t1bjbj (b2,j2,b1,j1)
            PUT  D2bb (b,j,b1,j1) += tbjbj (b,j,b1,j1)
         ENDDO b
         ENDDO j

      ENDPARDO  b1, j1, b2, j2

      PARDO  b1, j1, a, i

         REQUEST             HBAR_AJIB_bbaa (j1,b1,a,i) a
         taibj (a,i,b1,j1) = HBAR_AJIB_bbaa (j1,b1,a,i)

         DO j
         DO b
            REQUEST             VCACT2AB (a,i,b,j) a
            tbjai (b,j,a ,i ) = VCACT2AB (a,i,b,j)
            tbjbj (b,j,b1,j1) = tbjai (b,j,a,i) * taibj (a,i,b1,j1)
            PUT  D2bb (b,j,b1,j1) += tbjbj (b,j,b1,j1)
         ENDDO b
         ENDDO j

      ENDPARDO  b1, j1, a, i
#
#
#                   -                                             -
#                  |  a2,i  i1          i,i2                       |
#          P(i,i1) | G     l  - H      l     - (a,i|a1,i2) F       |
#                  |  a1,a  a2   i1,i2  a,a1                i2,i1  |
#                   -                                             -
#
#
      PARDO  b, j, b1, b2
      WHERE b < b1

         REQUEST              HBAR_AIBC_bbbb (b2,b1,j,b) b2
         tqqqq (b,j,b1,b2)  = HBAR_AIBC_bbbb (b2,b1,j,b)

         DO j1
            GET  VCACT1B (b2,j1)
            tbjbj (b,j,b1,j1)  = tqqqq (b,j,b1,b2) * VCACT1B (b2,j1)
            PUT  D2bb (b,j,b1,j1) += tbjbj (b,j,b1,j1)
         ENDDO j1

      ENDPARDO  b, j, b1, b2

      PARDO  b, j, b1, b2
      WHERE b == b1

         REQUEST              HBAR_AIBC_bbbb (b2,b1,j,b) b2
         tqqqq (b,j,b1,b2)  = HBAR_AIBC_bbbb (b2,b1,j,b)
         
         DO j1
            GET  VCACT1B (b2,j1) 
            tbjbj  (b,j,b1,j1)  = tqqqq (b,j,b1,b2) * VCACT1B (b2,j1)
            t1bjbj (b,j1,b1,j)  = tbjbj (b,j,b1,j1)
            t1bjbj (b,j1,b1,j) *= -1.0

            PREPARE  VCHACT2BB (b,j,b1,j1) += tbjbj  (b,j,b1,j1)
            PREPARE  VCHACT2BB (b,j1,b1,j) += t1bjbj (b,j1,b1,j)
         ENDDO j1

      ENDPARDO  b, j, b1, b2

      PARDO  b, j, b1 ,j2

            REQUEST  VCACT2BB (b,j,b1,j2) j2
            REQUEST  VSqjqj   (b,j,b1,j2) j2

            DO j1
               t1bjbj (b,j,b1,j1)  = VCACT2BB (b,j,b1,j2) * LHBAR_jj (j1,j2)
               tbjbj  (b,j,b1,j1)  = t1bjbj (b,j,b1,j1)

               t1bjbj (b,j,b1,j1)  = VSqjqj (b,j,b1,j2) * LFmi_b (j2,j1)
               tbjbj  (b,j,b1,j1) += t1bjbj (b,j,b1,j1)

               tbjbj (b,j,b1,j1) *= -0.5
               PUT  D2bb (b,j,b1,j1) += tbjbj (b,j,b1,j1)
            ENDDO j1

      ENDPARDO  b, j, b1, j2
#
#
#                   -                                             -
#                  |  i1,i  i2          i,i1                       |
#          P(a,a1) |-G     l  + H      l     - (a,i|a2,i1) F       |
#                  |  i2,a  a1   a2,a1  a,a2                a2,a1  |
#                   -                                             -
#
#
      PARDO  b, j, j1, j2

         REQUEST             HBAR_JKIA_bbbb (j1,j2,j,b) j2
         tqqqq (b,j,j2,j1) = HBAR_JKIA_bbbb (j1,j2,j,b)

         DO b1
            GET  VCACT1B (b1,j2)
            tbjbj  (b,j,b1,j1)  = tqqqq (b,j,j2,j1) * VCACT1B (b1,j2)
            t1bjbj (b1,j,b,j1)  = tbjbj (b,j,b1,j1)
            tbjbj  (b,j,b1,j1) *= -1.0

            PREPARE  VCHACT2BB (b,j,b1,j1) += tbjbj  (b,j,b1,j1)
            PREPARE  VCHACT2BB (b1,j,b,j1) += t1bjbj (b1,j,b,j1)
         ENDDO b1

      ENDPARDO  b, j, j1 ,j2

      PARDO  b, j, b2, j1

            REQUEST  VCACT2BB (b,j,b2,j1) b2
            REQUEST  VSqjqj   (b,j,b2,j1) b2

            DO b1
               t1bjbj (b,j,b1,j1)  = VCACT2BB (b,j,b2,j1) * LHBAR_bb (b2,b1)
               tbjbj  (b,j,b1,j1)  = t1bjbj (b,j,b1,j1)

               t1bjbj (b,j,b1,j1)  = VSqjqj (b,j,b2,j1) * LFae_b (b2,b1)
               tbjbj  (b,j,b1,j1) += t1bjbj (b,j,b1,j1)

               tbjbj (b,j,b1,j1) *= 0.50
               PUT  D2bb (b,j,b1,j1) += tbjbj (b,j,b1,j1)
            ENDDO b1

      ENDPARDO  b, j, b2, j1
#
#
#                          a2,i2
#          - (a,i2|a1,a2) N
#                          i1,i 
#
#
      PARDO  b, j, b1, b2

         ALLOCATE  llbjbj (b,j,b1,*)

         DO j2
            REQUEST  VSbbbj (b1,b2,b,j2) j2
            tqqqq (b,b2,b1,j2) = VSbbbj (b1,b2,b,j2)
            DO j1
               REQUEST  Njjbj (j1,b2,j,j2) j1
               tqjqj (b2,j,j2,j1) = Njjbj (j1,b2,j,j2)
               tbjbj (b,j,b1,j1)  = tqqqq (b,b2,b1,j2) * tqjqj (b2,j,j2,j1)
               llbjbj (b,j,b1,j1) -= tbjbj (b,j,b1,j1)
            ENDDO j1
         ENDDO j2

         DO j1
            PREPARE  VCHACT2BB (b,j,b1,j1) += llbjbj (b,j,b1,j1)
         ENDDO j1

         DEALLOCATE  llbjbj (b,j,b1,*)

      ENDPARDO  b, j, b1, b2
#
#
#                       _   i
#          P(i,i1|a,a1) H  l
#                        ia a1
#
#
      PARDO  j, j1, b, b1

         GET                      VCACT1B  (b,j)
         tbj (b1,j1)            = LHBAR_jb (j1,b1)
         tbjbj (b,j,b1,j1)      = VCACT1B (b,j) ^ tbj (b1,j1)
         PUT  D2bb (b,j,b1,j1) += tbjbj (b,j,b1,j1)

      ENDPARDO  j, j1, b, b1
#
#
#          ...ready!
#
#
#     -----------------
      ENDPROC  L2BB_OPT
#-------------------------------------------------------------------------



#-------------------------------------------------------------------------
#
#     ------------
      PROC  L1ANEW
#     ------------
#
#
#           j  bi
#          l  G
#           b  ja
#
#
#
#               Alpha - Alpha part
#
#
      PARDO  i, i1, a, a1

         REQUEST             HBAR_AJIB_aaaa (i,a,a1,i1) a1
         GET                 VCACT1A        (a1,i1)
         taiai (a,i,a1,i1) = HBAR_AJIB_aaaa (i,a,a1,i1)

         tai (a,i)  = taiai (a,i,a1,i1) * VCACT1A (a1,i1)
         PUT  VCHACT1A (a,i) += tai (a,i)

      ENDPARDO  i, i1, a, a1
#
#
#               Alpha - Beta part
#
#
      PARDO  a, i, b, j

         REQUEST           HBAR_AJIB_aabb (i,a,b,j) b
         GET               VCACT1B        (b,j)
         taibj (a,i,b,j) = HBAR_AJIB_aabb (i,a,b,j)

         tai (a,i)  = HBAR_AJIB_aabb (i,a,b,j) * VCACT1B (b,j)
         PUT  VCHACT1A (a,i) += tai (a,i)

      ENDPARDO  a, i, b, j
#
#
#          _    i   _    a
#          H   l  - H   l
#           ba  b    ij  j
#
#
      PARDO  a, a1, i

         GET         VCACT1A (a1,i)
         tai (a,i) = LHBAR_aa (a1,a) * VCACT1A (a1,i)
         PUT  VCHACT1A (a,i) += tai (a,i)

      ENDPARDO  a, a1, i

      PARDO  i, i1, a

         GET          VCACT1A (a,i1)
         tai (a,i)  = VCACT1A (a,i1) * LHBAR_ii (i,i1)
         tai (a,i) *= -1.0
         PUT  VCHACT1A (a,i) += tai (a,i)

      ENDPARDO  i, i1, a
#     
#     
#           1   cb  ij
#          --- G   l
#           2   aj  cb
#
#
#               Alpha - Alpha part
#     
#
      PARDO  i1, a1, a2

         ALLOCATE  laaai (*,a2,a1,i1)
            
         DO a
            REQUEST              HBAR_ABCI_aaaa (a2,a,a1,i1) a
            laaai (a,a2,a1,i1) = HBAR_ABCI_aaaa (a2,a,a1,i1)
         ENDDO a
            
         DO i
            REQUEST              VCACT2AA (a2,i,a1,i1) i
            taaii (a2,a1,i1,i) = VCACT2AA (a2,i,a1,i1)
            DO a
               tai (a,i)  = laaai (a,a2,a1,i1) * taaii (a2,a1,i1,i)
               tai (a,i) *= 0.5
               PUT  VCHACT1A (a,i) += tai (a,i)
            ENDDO a
         ENDDO i

         DEALLOCATE  laaai (*,a2,a1,i1)

      ENDPARDO  i1, a1, a2
#
#
#               Alpha - Beta part
#
#
      PARDO  a1, b, j

         ALLOCATE  laabj (*,a1,b,j)

         DO a
            REQUEST            HBAR_ABCI_aabb (a1,a,b,j) a
            laabj (a,a1,b,j) = HBAR_ABCI_aabb (a1,a,b,j)
         ENDDO a

         DO i
            REQUEST            VCACT2AB (a1,i,b,j) i
            tpqqp (a1,b,j,i) = VCACT2AB (a1,i,b,j)
            DO a
               tai (a,i)  = laabj (a,a1,b,j) * tpqqp (a1,b,j,i)
               PUT  VCHACT1A (a,i) += tai (a,i)
            ENDDO a
         ENDDO i

         DEALLOCATE  laabj (*,a1,b,j)

      ENDPARDO  a1, b, j
#           
#        
#          -1   ib  jk
#          --- G   l
#           2   jk  ab
#        
#
#               Alpha - Alpha part
#
#
      PARDO  i1, i2, a1

         ALLOCATE  llaiai (*,i2,a1,i1)

         DO a
            REQUEST              VCACT2AA (a,i2,a1,i1) a
            llaiai (a,i2,a1,i1) = VCACT2AA (a,i2,a1,i1)
         ENDDO a

         DO i
            REQUEST              HBAR_IAJK_aaaa (i,i2,a1,i1) i
            tpppp (i2,a1,i1,i) = HBAR_IAJK_aaaa (i,i2,a1,i1)
            DO a
               tai (a,i)  = llaiai (a,i2,a1,i1) * tpppp (i2,a1,i1,i)
               tai (a,i) *= -0.5
               PUT  VCHACT1A (a,i) += tai (a,i)
            ENDDO a
         ENDDO i

         DEALLOCATE  llaiai (*,i2,a1,i1)

      ENDPARDO  i1, i2, a1
#
#
#               Alpha - Beta part
#
#
      PARDO  i1, j, b

         ALLOCATE  laibj (*,i1,b,j)

         DO a
            REQUEST  VCACT2AB (a,i1,b,j) a
            laibj (a,i1,b,j) = VCACT2AB (a,i1,b,j)
         ENDDO a

         DO i
            REQUEST            HBAR_IAJK_aabb (i,i1,b,j) i
            tpqqp (i1,b,j,i) = HBAR_IAJK_aabb (i,i1,b,j)
            DO a
               tai (a,i)  = laibj (a,i1,b,j) * tpqqp (i1,b,j,i)
               tai (a,i) *= -1.0
               PUT  VCHACT1A (a,i) += tai (a,i)
            ENDDO a
         ENDDO i

         DEALLOCATE  laibj (*,i1,b,j)

      ENDPARDO  i1, j, b
#           
#        
#          -1   bc  li  jk     li
#          --- t   G   l   =  G   F
#           2   jl  ka  bc     ka  ji
#        
#
#               Alpha - Alpha part
#
#
      PARDO  i, i1, i2, a

         REQUEST  HBAR_JKIA_aaaa (i2,i1,i,a) a
         tpppp (a,i,i1,i2) = HBAR_JKIA_aaaa (i2,i1,i,a)

         tai (a,i)  = tpppp (a,i,i1,i2) * LFmi_a (i2,i1)
         tai (a,i) *= -1.0
         PUT  VCHACT1A (a,i) += tai (a,i)

      ENDPARDO  i, i1, i2, a
#
#
#               Alpha - Beta part
#
#
      PARDO  a, i, j, j1

         REQUEST  HBAR_JKIA_bbaa (j1,j,i,a) a
         tppqq (a,i,j,j1) = HBAR_JKIA_bbaa (j1,j,i,a)

         tai (a,i)  = tppqq (a,i,j,j1) * LFmi_b (j1,j)
         tai (a,i) *= -1.0
         PUT  VCHACT1A (a,i) += tai (a,i)

      ENDPARDO  a, i, j, j1
#           
#        
#           1   bd  ci  jk     ci
#          --- t   G   l   =  G   F
#           2   jk  da  bc     da  dc
#        
#
#               Alpha - Alpha part
#
#
      PARDO  i, a, a1, a2

         REQUEST             HBAR_AIBC_aaaa (a1,a2,i,a) a
         tpppp (a,i,a2,a1) = HBAR_AIBC_aaaa (a1,a2,i,a)

         tai (a,i)  = tpppp (a,i,a2,a1) * LFae_a (a2,a1)
         tai (a,i) *= -1.0
         PUT  VCHACT1A (a,i) += tai (a,i)

      ENDPARDO  i, a, a1, a2
#
#
#               Alpha - Beta part
#
#
      PARDO  i, a, b, b1

         REQUEST            HBAR_AIBC_bbaa (b,b1,i,a) a
         tppqq (a,i,b1,b) = HBAR_AIBC_bbaa (b,b1,i,a)

         tai (a,i)  = tppqq (a,i,b1,b) * LFae_b (b1,b)
         tai (a,i) *= -1.0
         PUT  VCHACT1A (a,i) += tai (a,i)

      ENDPARDO  i, a, b, b1
#
#
#          ...ready!
#
#
#     ---------------
      ENDPROC  L1ANEW
#-------------------------------------------------------------------------



#-------------------------------------------------------------------------
#
#     ------------
      PROC  L1BNEW
#     ------------
#
#
#           j  bi
#          l  G
#           b  ja
#
#
#
#               Beta - Beta part
#
#
      PARDO  j, j1, b, b1

         REQUEST             HBAR_AJIB_bbbb (j,b,b1,j1) b1
         GET                 VCACT1B        (b1,j1)
         tbjbj (b,j,b1,j1) = HBAR_AJIB_bbbb (j,b,b1,j1)

         t1bj (b,j)  = tbjbj (b,j,b1,j1) * VCACT1B (b1,j1)
         PUT  VCHACT1B (b,j) += t1bj (b,j)

      ENDPARDO  j, j1, b, b1
#
#
#               Beta - Alpha part
#
#
      PARDO  a, i, b, j

         REQUEST           HBAR_AJIB_bbaa (j,b,a,i) b
         GET               VCACT1A        (a,i)
         tbjai (b,j,a,i) = HBAR_AJIB_bbaa (j,b,a,i)

         t1bj (b,j)  = tbjai (b,j,a,i) * VCACT1A (a,i)
         PUT  VCHACT1B (b,j) += t1bj (b,j)

      ENDPARDO  a, i, b, j
#
#
#          _    i   _    a
#          H   l  - H   l
#           ba  b    ij  j
#
#
      PARDO  b, b1, j

         GET         VCACT1B (b1,j)
         tbj (b,j) = LHBAR_bb (b1,b) * VCACT1B (b1,j)
         PUT  VCHACT1B (b,j) += tbj (b,j)

      ENDPARDO  b, b1, j

      PARDO  j, j1, b

         GET          VCACT1B (b,j1)
         tbj (b,j)  = VCACT1B (b,j1) * LHBAR_jj (j,j1)
         tbj (b,j) *= -1.0
         PUT  VCHACT1B (b,j) += tbj (b,j)

      ENDPARDO  j, j1, b
#
#
#           1   bc  ij
#          --- G   l
#           2   aj  bc
#
#
#               Beta - Beta part
#
#
      PARDO  j1, b1, b2

         ALLOCATE  lbbbj (*,b2,b1,j1)

         DO b
            REQUEST              HBAR_ABCI_bbbb (b2,b,b1,j1) b
            lbbbj (b,b2,b1,j1) = HBAR_ABCI_bbbb (b2,b,b1,j1)
         ENDDO b

         DO j
            REQUEST              VCACT2BB (b2,j,b1,j1) j
            tbbjj (b2,b1,j1,j) = VCACT2BB (b2,j,b1,j1)
            DO b
               tbj (b,j)  = lbbbj (b,b2,b1,j1) * tbbjj (b2,b1,j1,j)
               tbj (b,j) *= 0.5
               PUT  VCHACT1B (b,j) += tbj (b,j)
            ENDDO b
         ENDDO j

         DEALLOCATE  lbbbj (*,b2,b1,j1)

      ENDPARDO  j1, b1, b2
#
#
#               Beta - Alpha part
#
#
      PARDO  b1, a, i

         ALLOCATE  lbaib (*,a,i,b1)

         DO b
            REQUEST            HBAR_ABCI_bbaa (b1,b,a,i) b
            lbaib (b,a,i,b1) = HBAR_ABCI_bbaa (b1,b,a,i)
         ENDDO b

         DO j
            REQUEST            VCACT2AB (a,i,b1,j) j
            DO b
               tbj (b,j)  = lbaib (b,a,i,b1) * VCACT2AB (a,i,b1,j)
               PUT  VCHACT1B (b,j) += tbj (b,j)
            ENDDO b
         ENDDO j

         DEALLOCATE  lbaib (*,a,i,b1)
      
      ENDPARDO  b1, a, i
#           
#        
#          -1   ib  jk
#          --- G   l
#           2   jk  ab
#        
#
#               Beta - Beta part
#
#
      PARDO  j1, j2, b1

         ALLOCATE  llbjbj (*,j2,b1,j1)

         DO b
            REQUEST              VCACT2BB (b,j2,b1,j1) b
            llbjbj (b,j2,b1,j1) = VCACT2BB (b,j2,b1,j1)
         ENDDO b

         DO j
            REQUEST              HBAR_IAJK_bbbb (j,j2,b1,j1) j
            tjbjj (j2,b1,j1,j) = HBAR_IAJK_bbbb (j,j2,b1,j1)
            DO b
               tbj (b,j)  = llbjbj (b,j2,b1,j1) * tjbjj (j2,b1,j1,j)
               tbj (b,j) *= -0.5
               PUT  VCHACT1B (b,j) += tbj (b,j)
            ENDDO b
         ENDDO j

         DEALLOCATE  llbjbj (*,j2,b1,j1)

      ENDPARDO  j1, j2, b1
#
#
#               Beta - Alpha part
#
#
      PARDO  j1, i, a

         ALLOCATE  lbaij (*,a,i,j1)

         DO b
            REQUEST  VCACT2AB (a,i,b,j1) a
            lbaij (b,a,i,j1) = VCACT2AB (a,i,b,j1)
         ENDDO b

         DO j
            REQUEST            HBAR_IAJK_bbaa (j,j1,a,i) j
            taijj (a,i,j1,j) = HBAR_IAJK_bbaa (j,j1,a,i)
            DO b
               tbj (b,j)  = lbaij (b,a,i,j1) * taijj (a,i,j1,j)
               tbj (b,j) *= -1.0
               PUT  VCHACT1B (b,j) += tbj (b,j)
            ENDDO b
         ENDDO j

         DEALLOCATE  lbaij (*,a,i,j1)

      ENDPARDO  j1, i, a
#           
#        
#           1   bd  ci  jk     ci
#          --- t   G   l   =  G   F
#           2   jk  da  bc     da  dc
#        
#
#               Beta - Beta part
#
#
      PARDO  j, b, b1, b2

         REQUEST             HBAR_AIBC_bbbb (b1,b2,j,b) b
         tqqqq (b,j,b2,b1) = HBAR_AIBC_bbbb (b1,b2,j,b)

         tbj (b,j)  = tqqqq (b,j,b2,b1) * LFae_b (b2,b1)
         tbj (b,j) *= -1.0

         PUT  VCHACT1B (b,j) += tbj (b,j)

      ENDPARDO  j, b, b1, b2
#
#
#               Beta - Alpha part
#
#
      PARDO  j, b, a, a1
      
         REQUEST  HBAR_AIBC_aabb (a,a1,j,b) b
         tqqpp (b,j,a1,a) = HBAR_AIBC_aabb (a,a1,j,b)

         tbj (b,j)  = tqqpp (b,j,a1,a) * LFae_a (a1,a)
         tbj (b,j) *= -1.0

         PUT  VCHACT1B (b,j) += tbj (b,j)
      
      ENDPARDO  j, b, a, a1
#           
#        
#          -1   bc  li  jk      li
#          --- t   G   l   = - G   F
#           2   jl  ka  bc      ka  ji
#        
#
#               Beta - Beta part
#
#
      PARDO  j, j1, j2, b

         REQUEST  HBAR_JKIA_bbbb (j2,j1,j,b) b

         tbj (b,j)  = LFmi_b (j2,j1) * HBAR_JKIA_bbbb (j2,j1,j,b)
         tbj (b,j) *= -1.0

         PUT  VCHACT1B (b,j) += tbj (b,j)

      ENDPARDO  j, j1, j2, b
#
#
#               Beta - Alpha part
#
#
      PARDO  b, j, i, i1

         REQUEST  HBAR_JKIA_aabb (i1,i,j,b) b

         tbj (b,j)  = LFmi_a (i1,i) * HBAR_JKIA_aabb (i1,i,j,b)
         tbj (b,j) *= -1.0

         PUT  VCHACT1B (b,j) += tbj (b,j)

      ENDPARDO  b, j, i, i1
#
#
#          ...ready!
#
#
#     ---------------
      ENDPROC  L1BNEW
#-------------------------------------------------------------------------




#-------------------------------------------------------------------------
#
#   --------------
     PROC  HCmult
#   -------------- 
#
#
      ALLOCATE  LFmi_a(*,*)
      ALLOCATE  LFmi_b(*,*)
      ALLOCATE  LFae_a(*,*)
      ALLOCATE  LFae_b(*,*)

      CREATE  Fmi_a
      CREATE  Fmi_b
      CREATE  Fae_a
      CREATE  Fae_b

      CREATE  D2AA
      CREATE  D2BB

      EXECUTE SERVER_BARRIER
      EXECUTE SIP_BARRIER

      CALL  VCHACT_ZERO

      CALL  LEFT_FACTORIZE
      EXECUTE SERVER_BARRIER

      CALL  L2AB_OPT
      CALL  L2AA_OPT
      CALL  L2BB_OPT

      CALL  L1ANEW
      CALL  L1BNEW

      CALL  AOLADDER_NEW # There is a server barrier in here.
#
#
#          Some contributions were put in to D2dd, so prepare them
#          in to VCHACT2 now with appropriate permutations!
#
#
      PARDO  a, i, a1, i1

         GET                   D2aa (a,i,a1,i1)
         t2aiai (a1,i1,a,i)  = D2aa (a,i,a1,i1)
         t3aiai (a1,i,a,i1)  = D2aa (a,i,a1,i1)
         t4aiai (a,i1,a1,i)  = D2aa (a,i,a1,i1)
         t3aiai (a1,i,a,i1) *= -1.0
         t4aiai (a,i1,a1,i) *= -1.0
      
         PREPARE  VCHACT2AA (a,i,a1,i1) += D2aa   (a,i,a1,i1)
         PREPARE  VCHACT2AA (a1,i1,a,i) += T2aiai (a1,i1,a,i)
         PREPARE  VCHACT2AA (a1,i,a,i1) += T3aiai (a1,i,a,i1)
         PREPARE  VCHACT2AA (a,i1,a1,i) += T4aiai (a,i1,a1,i)
      
      ENDPARDO  a, i, a1, i1

      PARDO  j, j1, b, b1
      
         GET                   D2bb (b,j,b1,j1)
         T2bjbj (b1,j1,b,j)  = D2bb (b,j,b1,j1)
         T3bjbj (b1,j,b,j1)  = D2bb (b,j,b1,j1)
         T4bjbj (b,j1,b1,j)  = D2bb (b,j,b1,j1)
         T3bjbj (b1,j,b,j1) *= -1.0
         T4bjbj (b,j1,b1,j) *= -1.0  

         PREPARE  VCHACT2BB (b,j,b1,j1) += D2bb   (b,j,b1,j1)
         PREPARE  VCHACT2BB (b1,j1,b,j) += T2bjbj (b1,j1,b,j)
         PREPARE  VCHACT2BB (b1,j,b,j1) += T3bjbj (b1,j,b,j1)
         PREPARE  VCHACT2BB (b,j1,b1,j) += T4bjbj (b,j1,b1,j)

      ENDPARDO  j, j1, b, b1

     #CALL  L1_PRINT
     #CALL  L2AA_PRINT         
     #CALL  L2BB_PRINT
     #CALL  L2AB_PRINT
         
      EXECUTE  SIP_BARRIER
      EXECUTE  SERVER_BARRIER

      call UPDATE

      EXECUTE SERVER_BARRIER

      call SYMMETRHC_A
      call SYMMETRHC_B

      EXECUTE SERVER_BARRIER
      EXECUTE SIP_BARRIER

      DELETE  D2AA
      DELETE  D2BB
      DELETE  Fae_a
      DELETE  Fae_b
      DELETE  Fmi_a
      DELETE  Fmi_b

      DEALLOCATE  LFae_a(*,*)
      DEALLOCATE  LFae_b(*,*)
      DEALLOCATE  LFmi_a(*,*)
      DEALLOCATE  LFmi_b(*,*)
#
#
#          ...ready!
#
#
#   -----------------
     ENDPROC  HCmult
#-------------------------------------------------------------------------

      

#------------------------------------------------------------------------
#
#     -----------------------
      PROC  ZERO_DSCALAR
#     -----------------------
#
#
#
#    The scalars used (overlap of error arrays and coeffients) in the DIIS 
#    expansion are zero'd out. 
#
#      Zero out scalars.
#      -----------------
#
       b11 = 0.0
       b12 = 0.0
       b13 = 0.0
       b14 = 0.0
       b15 = 0.0
       b16 = 0.0
       b17 = 0.0
       b18 = 0.0
       b19 = 0.0
       b110 = 0.0
#
       b22 = 0.0
       b23 = 0.0
       b24 = 0.0
       b25 = 0.0
       b26 = 0.0
       b27 = 0.0
       b28 = 0.0
       b29 = 0.0
       b210 = 0.0
#
       b33 = 0.0
       b34 = 0.0
       b35 = 0.0
       b36 = 0.0
       b37 = 0.0
       b38 = 0.0
       b39 = 0.0
       b310 = 0.0
#
       b44 = 0.0
       b45 = 0.0
       b46 = 0.0
       b47 = 0.0
       b48 = 0.0
       b49 = 0.0
       b410 = 0.0
#
       b55 = 0.0
       b56 = 0.0
       b57 = 0.0
       b58 = 0.0
       b59 = 0.0
       b510 = 0.0
#
       b66 = 0.0
       b67 = 0.0
       b68 = 0.0
       b69 = 0.0
       b610 = 0.0
#
       b77 = 0.0
       b78 = 0.0
       b79 = 0.0
       b710 = 0.0
#
       b88 = 0.0
       b89 = 0.0
       b810 = 0.0
#      
       b99 = 0.0
       b910 = 0.0
#      
       b1010 = 0.0
#      
       Tb11 = 0.0
       Tb12 = 0.0
       Tb13 = 0.0
       Tb14 = 0.0
       Tb15 = 0.0
       Tb16 = 0.0
       Tb17 = 0.0
       Tb18 = 0.0
       Tb19 = 0.0
       Tb110 = 0.0
#      
       Tb22 = 0.0
       Tb23 = 0.0
       Tb24 = 0.0
       Tb25 = 0.0
       Tb26 = 0.0
       Tb27 = 0.0
       Tb28 = 0.0
       Tb29 = 0.0
       Tb210 = 0.0
#      
       Tb33 = 0.0
       Tb34 = 0.0
       Tb35 = 0.0
       Tb36 = 0.0
       Tb37 = 0.0
       Tb38 = 0.0
       Tb39 = 0.0
       Tb310 = 0.0
#
       Tb44 = 0.0
       Tb45 = 0.0
       Tb46 = 0.0
       Tb47 = 0.0
       Tb48 = 0.0
       Tb49 = 0.0
       Tb410 = 0.0
#
       Tb55 = 0.0
       Tb56 = 0.0
       Tb57 = 0.0
       Tb58 = 0.0
       Tb59 = 0.0
       Tb510 = 0.0
#
       Tb66 = 0.0
       Tb67 = 0.0
       Tb68 = 0.0
       Tb69 = 0.0
       Tb610 = 0.0
#
       Tb77 = 0.0
       Tb78 = 0.0
       Tb79 = 0.0
       Tb710 = 0.0
#
       Tb88 = 0.0
       Tb89 = 0.0
       Tb810 = 0.0
#      
       Tb99 = 0.0
       Tb910 = 0.0
#      
       Tb1010 = 0.0
#      
       c1 = 0.0
       c2 = 0.0
       c3 = 0.0
       c4 = 0.0
       c5 = 0.0
       c6 = 0.0
       c7 = 0.0
       c8 = 0.0
       c9 = 0.0
       c10 = 0.0
#      
       execute sip_barrier
#
#
#     ...ready!
#
#
      ENDPROC  ZERO_DSCALAR
#------------------------------------------------------------------------



#------------------------------------------------------------------------
#
#     ----------------
      PROC  SETUP_DIIS
#     ----------------
#
#
#    Put the matrix elements of B into the sip 'B' matrix. 
#      
       execute diis_setup Tb11
       execute diis_setup Tb12
       execute diis_setup Tb13
       execute diis_setup Tb14
       execute diis_setup Tb15
       execute diis_setup Tb16
       execute diis_setup Tb17
       execute diis_setup Tb18
       execute diis_setup Tb19
       execute diis_setup Tb110
       
       execute diis_setup Tb22
       execute diis_setup Tb23
       execute diis_setup Tb24
       execute diis_setup Tb25
       execute diis_setup Tb26
       execute diis_setup Tb27
       execute diis_setup Tb28
       execute diis_setup Tb29
       execute diis_setup Tb210
       
       execute diis_setup Tb33
       execute diis_setup Tb34
       execute diis_setup Tb35
       execute diis_setup Tb36
       execute diis_setup Tb37
       execute diis_setup Tb38
       execute diis_setup Tb39
       execute diis_setup Tb310

       execute diis_setup Tb44
       execute diis_setup Tb45
       execute diis_setup Tb46
       execute diis_setup Tb47
       execute diis_setup Tb48
       execute diis_setup Tb49
       execute diis_setup Tb410

       execute diis_setup Tb55
       execute diis_setup Tb56
       execute diis_setup Tb57
       execute diis_setup Tb58
       execute diis_setup Tb59
       execute diis_setup Tb510

       execute diis_setup Tb66
       execute diis_setup Tb67
       execute diis_setup Tb68
       execute diis_setup Tb69
       execute diis_setup Tb610

       execute diis_setup Tb77
       execute diis_setup Tb78
       execute diis_setup Tb79
       execute diis_setup Tb710

       execute diis_setup Tb88
       execute diis_setup Tb89
       execute diis_setup Tb810

       execute diis_setup Tb99
       execute diis_setup Tb910
       
       execute diis_setup Tb1010
#      
       execute sip_barrier
#
#
#     ...ready!
#
#
      ENDPROC  SETUP_DIIS
#------------------------------------------------------------------------


#
# ---------------------------------------------------------------------------------
#
     PROC ZDIIS1  
#    ---------- 
#
#    Zero out scalars.
#    ----------------- 
#
     CALL ZERO_DSCALAR
#
#    Determine the 'B-matrix'. 
#    ------------------------- 
#
#    Compute contributions due to T2aiai amplitudes. 
#    ----------------------------------------------- 
#
#
     PARDO a, i, a1, i1
#
#          REQUEST/GET amplitude data from all 2 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1aiai(a,i,a1,i1) a # ziter-1 amplitudes
           REQUEST e2aiai(a,i,a1,i1) a # ziter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,2
#             ---------
#
              etemp = e1aiai(a,i,a1,i1)*e1aiai(a,i,a1,i1)
              b11  += etemp
#
              etemp = e1aiai(a,i,a1,i1)*e2aiai(a,i,a1,i1)
              b12  += etemp
#
#             b1x x=2,2
#             ---------
#
              etemp = e2aiai(a,i,a1,i1)*e2aiai(a,i,a1,i1)
              b22  += etemp
#
     ENDPARDO a, i, a1, i1

     PARDO b, j, b1, j1
#
#          REQUEST/GET amplitude data from all 2 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1bjbj(b,j,b1,j1) b # ziter-1 amplitudes
           REQUEST e2bjbj(b,j,b1,j1) b # ziter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,2
#             ---------
#
              etemp = e1bjbj(b,j,b1,j1)*e1bjbj(b,j,b1,j1)
              b11  += etemp
#
              etemp = e1bjbj(b,j,b1,j1)*e2bjbj(b,j,b1,j1)
              b12  += etemp
#
#             b1x x=2,2
#             ---------
#
              etemp = e2bjbj(b,j,b1,j1)*e2bjbj(b,j,b1,j1)
              b22  += etemp
#
     ENDPARDO b, j, b1, j1
#
#    Compute contributions due to T2aibj amplitudes.
#    -----------------------------------------------
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 2 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1aibj(a,i,b,j) a # ziter-1 amplitudes
           REQUEST e2aibj(a,i,b,j) a # ziter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,2
#             ---------
#
              etemp = e1aibj(a,i,b,j)*e1aibj(a,i,b,j)
              etemp *= 2.0
              b11  += etemp
#
              etemp = e1aibj(a,i,b,j)*e2aibj(a,i,b,j)
              etemp *= 2.0
              b12  += etemp
#
#             b1x x=2,2
#             ---------
#
              etemp = e2aibj(a,i,b,j)*e2aibj(a,i,b,j)
              etemp *= 2.0
              b22  += etemp
#
     ENDPARDO a, i, b, j
#
#    Compute contributions due to T1ai amplitudes. 
#    --------------------------------------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 2 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET e1ai(a,i)    # ziter-1 amplitudes  
           GET e2ai(a,i)    # ziter-0 amplitudes  
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#             b1x x=1,2 
#             --------- 
#
              etemp = e1ai(a,i)*e1ai(a,i) 
              etemp *= 4.0
              b11  += etemp            
#
              etemp = e1ai(a,i)*e2ai(a,i) 
              etemp *= 4.0
              b12  += etemp            
#
#             b1x x=2,2 
#             --------- 
#
              etemp = e2ai(a,i)*e2ai(a,i) 
              etemp *= 4.0
              b22  += etemp            
#
     ENDPARDO a, i 

     PARDO b, j  
#
#          REQUEST/GET amplitude data from all 2 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET e1bj(b,j)    # ziter-1 amplitudes  
           GET e2bj(b,j)    # ziter-0 amplitudes  
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#             b1x x=1,2 
#             --------- 
#
              etemp = e1bj(b,j)*e1bj(b,j) 
              etemp *= 4.0
              b11  += etemp            
#
              etemp = e1bj(b,j)*e2bj(b,j) 
              etemp *= 4.0
              b12  += etemp            
#
#             b1x x=2,2 
#             --------- 
#
              etemp = e2bj(b,j)*e2bj(b,j) 
              etemp *= 4.0
              b22  += etemp            
#
     ENDPARDO b, j 
#
     execute server_barrier 
#
#    Collectively sum B-matrix elements. 
#    -----------------------------------
#
     collective Tb11 += b11 
     collective Tb12 += b12 
     collective Tb22 += b22 
#
#    Now the unique elements of the 'B-matrix' have been computed, the array is filled out
#    in the setup_diis. 
#    --------------------------------------------------------------------------------------
#
#    Put the elements of the 'B-matrix', which have been computed as scalars into the  
#    R-matrix. 
#    -------------------------------------------------------------------------------- 
#
     CALL SETUP_DIIS 
#
     execute compute_diis # --> New instruction  
#
     c1 = Tb11 
     c2 = Tb22 
     execute print_scalar c1 
     execute print_scalar c2 
#
#    Done computing the c-vector. 
#    ---------------------------- 
#
#    Form the updated amplitudes using the c-vector. 
#    -----------------------------------------------  
#
#    Form T2old_aa. 
#    -------------- 
#
     PARDO a, i, a1, i1
#
#          REQUEST/GET amplitude data from all 2 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST d0aiai(a,i,a1,i1) a # ziter-2 amplitudes
           REQUEST d1aiai(a,i,a1,i1) a # ziter-1 amplitudes
#
           REQUEST e1aiai(a,i,a1,i1) a # ziter-1 amplitudes
           REQUEST e2aiai(a,i,a1,i1) a # ziter-0 amplitudes

           REQUEST             VCONV2AA (a,i,a1,i1) a # Diagonal HBAR elements
           tpppp (a,i,a1,i1) = VCONV2AA (a,i,a1,i1)
#
#          Evaluate the ZDIIS approximant 
#          -----------------------------
#
           taiai  (a,i,a1,i1)  = e1aiai (a,i,a1,i1)
           taiai  (a,i,a1,i1) *= c1

           t2aiai (a,i,a1,i1)  = e2aiai (a,i,a1,i1)
           t2aiai (a,i,a1,i1) *= c2
           taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)
           taiai  (a,i,a1,i1) *=  0.75 # To match ACESII
           EXECUTE  APPLY_DEN4_NODIAG  taiai  tpppp
#
#
#          Add to the associated residual vectors
#
#
           t2aiai (a,i,a1,i1)  = d0aiai (a,i,a1,i1)
           t2aiai (a,i,a1,i1) *= c1
           taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

           t2aiai (a,i,a1,i1)  = d1aiai (a,i,a1,i1)
           t2aiai (a,i,a1,i1) *= c2
           taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

           PREPARE  VCACT2AA (a,i,a1,i1) = taiai (a,i,a1,i1)

     ENDPARDO a, i, a1, i1

     PARDO b, j, b1, j1
#
#          REQUEST/GET amplitude data from all 2 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST d0bjbj(b,j,b1,j1) b # ziter-2 amplitudes
           REQUEST d1bjbj(b,j,b1,j1) b # ziter-1 amplitudes
#
           REQUEST e1bjbj(b,j,b1,j1) b # ziter-1 amplitudes
           REQUEST e2bjbj(b,j,b1,j1) b # ziter-0 amplitudes

           REQUEST             VCONV2BB (b,j,b1,j1) b # Diagonal HBAR elements
           tqqqq (b,j,b1,j1) = VCONV2BB (b,j,b1,j1)
#
#          Evaluate the ZDIIS approximant 
#          -----------------------------
#
           tbjbj  (b,j,b1,j1)  = e1bjbj (b,j,b1,j1)
           tbjbj  (b,j,b1,j1) *= c1

           t2bjbj (b,j,b1,j1)  = e2bjbj (b,j,b1,j1)
           t2bjbj (b,j,b1,j1) *= c2
           tbjbj  (b,j,b1,j1) += t2bjbj (b,j,b1,j1)

           tbjbj  (b,j,b1,j1) *=  0.75 # To match ACESII
           EXECUTE  APPLY_DEN4_NODIAG  tbjbj  tqqqq
#
#
#          Add to the associated residual vectors
#
#
           t2bjbj (b,j,b1,j1)  = d0bjbj (b,j,b1,j1)
           t2bjbj (b,j,b1,j1) *= c1
           tbjbj  (b,j,b1,j1) += t2bjbj (b,j,b1,j1)

           t2bjbj (b,j,b1,j1)  = d1bjbj (b,j,b1,j1)
           t2bjbj (b,j,b1,j1) *= c2
           tbjbj  (b,j,b1,j1) += t2bjbj (b,j,b1,j1)

           PREPARE  VCACT2BB (b,j,b1,j1) = tbjbj (b,j,b1,j1)
#
     ENDPARDO b, j, b1, j1
#
#    Form T2old_ab. 
#    -------------- 
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 2 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST D0aibj(a,i,b,j) a # ziter-2 amplitudes
           REQUEST D1aibj(a,i,b,j) a # ziter-1 amplitudes
#
           REQUEST e1aibj(a,i,b,j) a # ziter-1 amplitudes
           REQUEST e2aibj(a,i,b,j) a # ziter-0 amplitudes

           REQUEST           VCONV2AB (a,i,b,j) a
           tppqq (a,i,b,j) = VCONV2AB (a,i,b,j)
#
#          Evaluate the ZDIIS approximant 
#          -----------------------------
#    
           taibj  (a,i,b,j)  = e1aibj (a,i,b,j)
           taibj  (a,i,b,j) *= c1

           t2aibj (a,i,b,j)  = e2aibj (a,i,b,j)
           t2aibj (a,i,b,j) *= c2
           taibj  (a,i,b,j) += t2aibj (a,i,b,j)
           taibj  (a,i,b,j) *=  0.75 # To match ACESII
           EXECUTE  APPLY_DEN4  taibj  tppqq
#
#
#          Add to the associated residual vectors
#
#
           t2aibj (a,i,b,j)  = d0aibj (a,i,b,j)
           t2aibj (a,i,b,j) *= c1
           taibj  (a,i,b,j) += t2aibj (a,i,b,j)

           t2aibj (a,i,b,j)  = d1aibj (a,i,b,j)
           t2aibj (a,i,b,j) *= c2
           taibj  (a,i,b,j) += t2aibj (a,i,b,j)

           PREPARE  VCACT2AB (a,i,b,j) = taibj (a,i,b,j)

     ENDPARDO a, i, b, j
#
#    Form tai_old. 
#    ------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 2 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET D0ai(a,i)     # ziter-2 amplitudes  
           GET D1ai(a,i)     # ziter-1 amplitudes  
#
           GET e1ai(a,i)     # ziter-1 amplitudes  
           GET e2ai(a,i)     # ziter-0 amplitudes  

           GET         VCONV1A (a,i)
           tpp (a,i) = VCONV1A (a,i)
#
#          Evaluate the ZDIIS approximant 
#          -----------------------------
#    
           tai  (a,i)  = e1ai (a,i)
           tai  (a,i) *= c1

           t2ai (a,i)  = e2ai (a,i)
           t2ai (a,i) *= c2
           tai  (a,i) += t2ai (a,i)
           tai  (a,i) *=  0.75 # To match ACESII
           EXECUTE  APPLY_DEN2  tai  tpp
#
#
#          Add to the associated residual vectors
#
#
           t2ai (a,i)  = d0ai (a,i)
           t2ai (a,i) *= c1
           tai  (a,i) += t2ai (a,i)

           t2ai (a,i)  = d1ai (a,i)
           t2ai (a,i) *= c2
           tai  (a,i) += t2ai (a,i)

           PUT  VCACT1A (a,i) = tai (a,i)
#
     ENDPARDO a, i  

     PARDO b, j  
#
#          REQUEST/GET amplitude data from all 2 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET D0bj(b,j)     # ziter-2 amplitudes  
           GET D1bj(b,j)     # ziter-1 amplitudes  
#
           GET e1bj(b,j)     # ziter-1 amplitudes  
           GET e2bj(b,j)     # ziter-0 amplitudes  

           GET         VCONV1B (b,j)
           tqq (b,j) = VCONV1B (b,j)
#
#          Evaluate the ZDIIS approximant 
#          -----------------------------
#    
           tbj  (b,j)  = e1bj (b,j)
           tbj  (b,j) *= c1

           t2bj (b,j)  = e2bj (b,j)
           t2bj (b,j) *= c2
           tbj  (b,j) += t2bj (b,j)

           tbj  (b,j) *=  0.75 # To match ACESII
           EXECUTE  APPLY_DEN2  tbj  tqq
#
#
#          Add to the associated residual vectors
#
#    
           t2bj (b,j)  = d0bj (b,j)
           t2bj (b,j) *= c1
           tbj  (b,j) += t2bj (b,j)

           t2bj (b,j)  = d1bj (b,j)
           t2bj (b,j) *= c2  
           tbj  (b,j) += t2bj (b,j)

           PUT  VCACT1B (b,j) = tbj (b,j)
#
     ENDPARDO b, j  
#
     execute server_barrier 
#
     ENDPROC ZDIIS1  
#    ------------- 
#
# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
#
     PROC ZDIIS2  
#    ---------- 
#
#    Zero out scalars.
#    ----------------- 
#
     CALL ZERO_DSCALAR
#
#    Determine the 'B-matrix'. 
#    ------------------------- 
#
#    Compute contributions due to T2aiai amplitudes. 
#    ----------------------------------------------- 
#
#
     PARDO a, i, a1, i1
#
#          REQUEST/GET amplitude data from all 3 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1aiai(a,i,a1,i1) a # ziter-2 amplitudes
           REQUEST e2aiai(a,i,a1,i1) a # ziter-1 amplitudes
           REQUEST e3aiai(a,i,a1,i1) a # ziter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,3
#             ---------
#
              etemp = e1aiai(a,i,a1,i1)*e1aiai(a,i,a1,i1)
              b11  += etemp
#
              etemp = e1aiai(a,i,a1,i1)*e2aiai(a,i,a1,i1)
              b12  += etemp
#
              etemp = e1aiai(a,i,a1,i1)*e3aiai(a,i,a1,i1)
              b13  += etemp
#
#             b1x x=2,3
#             ---------
#
              etemp = e2aiai(a,i,a1,i1)*e2aiai(a,i,a1,i1)
              b22  += etemp
#
              etemp = e2aiai(a,i,a1,i1)*e3aiai(a,i,a1,i1)
              b23  += etemp
#
#             b1x x=3,3
#             ---------
#
              etemp = e3aiai(a,i,a1,i1)*e3aiai(a,i,a1,i1)
              b33  += etemp
#
     ENDPARDO a, i, a1, i1

     PARDO b, j, b1, j1
#
#          REQUEST/GET amplitude data from all 3 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1bjbj(b,j,b1,j1) b # ziter-2 amplitudes
           REQUEST e2bjbj(b,j,b1,j1) b # ziter-1 amplitudes
           REQUEST e3bjbj(b,j,b1,j1) b # ziter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,3
#             ---------
#
              etemp = e1bjbj(b,j,b1,j1)*e1bjbj(b,j,b1,j1)
              b11  += etemp
#
              etemp = e1bjbj(b,j,b1,j1)*e2bjbj(b,j,b1,j1)
              b12  += etemp
#
              etemp = e1bjbj(b,j,b1,j1)*e3bjbj(b,j,b1,j1)
              b13  += etemp
#
#             b1x x=2,3
#             ---------
#
              etemp = e2bjbj(b,j,b1,j1)*e2bjbj(b,j,b1,j1)
              b22  += etemp
#
              etemp = e2bjbj(b,j,b1,j1)*e3bjbj(b,j,b1,j1)
              b23  += etemp
#
#             b1x x=3,3
#             ---------
#
              etemp = e3bjbj(b,j,b1,j1)*e3bjbj(b,j,b1,j1)
              b33  += etemp
#
     ENDPARDO b, j, b1, j1
#
#    Compute contributions due to T2aibj amplitudes.
#    -----------------------------------------------
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 3 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1aibj(a,i,b,j) a # ziter-2 amplitudes
           REQUEST e2aibj(a,i,b,j) a # ziter-1 amplitudes
           REQUEST e3aibj(a,i,b,j) a # ziter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,3
#             ---------
#
              etemp = e1aibj(a,i,b,j)*e1aibj(a,i,b,j)
              etemp *= 2.0
              b11  += etemp
#
              etemp = e1aibj(a,i,b,j)*e2aibj(a,i,b,j)
              etemp *= 2.0
              b12  += etemp
#
              etemp = e1aibj(a,i,b,j)*e3aibj(a,i,b,j)
              etemp *= 2.0
              b13  += etemp
#
#             b1x x=2,3
#             ---------
#
              etemp = e2aibj(a,i,b,j)*e2aibj(a,i,b,j)
              etemp *= 2.0
              b22  += etemp
#
              etemp = e2aibj(a,i,b,j)*e3aibj(a,i,b,j)
              etemp *= 2.0
              b23  += etemp
#
#             b1x x=3,3
#             ---------
#
              etemp = e3aibj(a,i,b,j)*e3aibj(a,i,b,j)
              etemp *= 2.0
              b33  += etemp
#
     ENDPARDO a, i, b, j
#
#    Compute contributions due to T1ai amplitudes. 
#    --------------------------------------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 4 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET e1ai(a,i)    # ziter-2 amplitudes  
           GET e2ai(a,i)    # ziter-1 amplitudes  
           GET e3ai(a,i)    # ziter-0 amplitudes  
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#             b1x x=1,3 
#             --------- 
#
              etemp = e1ai(a,i)*e1ai(a,i) 
              etemp *= 4.0
              b11  += etemp            
#
              etemp = e1ai(a,i)*e2ai(a,i) 
              etemp *= 4.0
              b12  += etemp            
#
              etemp = e1ai(a,i)*e3ai(a,i) 
              etemp *= 4.0
              b13  += etemp            
#
#             b1x x=2,3 
#             --------- 
#
              etemp = e2ai(a,i)*e2ai(a,i) 
              etemp *= 4.0
              b22  += etemp            
#
              etemp = e2ai(a,i)*e3ai(a,i) 
              etemp *= 4.0
              b23  += etemp            
#
#             b1x x=3,3 
#             --------- 
#
              etemp = e3ai(a,i)*e3ai(a,i) 
              etemp *= 4.0
              b33  += etemp            
#
     ENDPARDO a, i 

     PARDO b, j  
#
#          REQUEST/GET amplitude data from all 3 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET e1bj(b,j)    # ziter-2 amplitudes  
           GET e2bj(b,j)    # ziter-1 amplitudes  
           GET e3bj(b,j)    # ziter-0 amplitudes  
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#             b1x x=1,3 
#             --------- 
#
              etemp = e1bj(b,j)*e1bj(b,j) 
              etemp *= 4.0
              b11  += etemp            
#
              etemp = e1bj(b,j)*e2bj(b,j) 
              etemp *= 4.0
              b12  += etemp            
#
              etemp = e1bj(b,j)*e3bj(b,j) 
              etemp *= 4.0
              b13  += etemp            
#
#             b1x x=2,3 
#             --------- 
#
              etemp = e2bj(b,j)*e2bj(b,j) 
              etemp *= 4.0
              b22  += etemp            
#
              etemp = e2bj(b,j)*e3bj(b,j) 
              etemp *= 4.0
              b23  += etemp            
#
#             b1x x=3,3 
#             --------- 
#
              etemp = e3bj(b,j)*e3bj(b,j) 
              etemp *= 4.0
              b33  += etemp            
#
     ENDPARDO b, j 

     execute server_barrier
#
#    Collectively sum B-matrix elements. 
#    -----------------------------------
#
     collective Tb11 += b11 
     collective Tb12 += b12 
     collective Tb13 += b13 
     collective Tb22 += b22 
     collective Tb23 += b23 
     collective Tb33 += b33 
#
#    Now the unique elements of the 'B-matrix' have been computed and the array filled out. 
#    --------------------------------------------------------------------------------------
#
#    Put the elements of the 'B-matrix', which have been computed as scalars into the  
#    R-matrix. 
#    -------------------------------------------------------------------------------- 
#
     CALL SETUP_DIIS 
#
     execute compute_diis # --> New instruction  
#
     c1 = Tb11 
     c2 = Tb22 
     c3 = Tb33 
     execute print_scalar c1 
     execute print_scalar c2 
     execute print_scalar c3 
#
#    Done computing the c-vector. 
#    ---------------------------- 
#
#    Form the updated amplitudes using the c-vector. 
#    -----------------------------------------------  
#
#    Form T2old_aa. 
#    -------------- 
#
     PARDO a, i, a1, i1
#
#          REQUEST/GET amplitude data from all 3 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST d0aiai(a,i,a1,i1) a # ziter-3 amplitudes
           REQUEST d1aiai(a,i,a1,i1) a # ziter-2 amplitudes
           REQUEST d2aiai(a,i,a1,i1) a # ziter-1 amplitudes
#
           REQUEST e1aiai(a,i,a1,i1) a # ziter-2 amplitudes
           REQUEST e2aiai(a,i,a1,i1) a # ziter-1 amplitudes
           REQUEST e3aiai(a,i,a1,i1) a # ziter-0 amplitudes

           REQUEST             VCONV2AA (a,i,a1,i1) a # Diagonal HBAR elements
           tpppp (a,i,a1,i1) = VCONV2AA (a,i,a1,i1)
#
#          Evaluate the ZDIIS approximant 
#          -----------------------------
#
           taiai  (a,i,a1,i1)  = e1aiai (a,i,a1,i1)
           taiai  (a,i,a1,i1) *= c1

           t2aiai (a,i,a1,i1)  = e2aiai (a,i,a1,i1)
           t2aiai (a,i,a1,i1) *= c2
           taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

           t2aiai (a,i,a1,i1)  = e3aiai (a,i,a1,i1)
           t2aiai (a,i,a1,i1) *= c3     
           taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

           taiai  (a,i,a1,i1) *=  0.75 # To match ACESII
           EXECUTE  APPLY_DEN4_NODIAG  taiai  tpppp
#
#
#          Add to the associated residual vectors
#
#
           t2aiai (a,i,a1,i1)  = d0aiai (a,i,a1,i1)
           t2aiai (a,i,a1,i1) *= c1
           taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

           t2aiai (a,i,a1,i1)  = d1aiai (a,i,a1,i1)
           t2aiai (a,i,a1,i1) *= c2
           taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

           t2aiai (a,i,a1,i1)  = d2aiai (a,i,a1,i1)
           t2aiai (a,i,a1,i1) *= c3
           taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

           PREPARE  VCACT2AA (a,i,a1,i1) = taiai (a,i,a1,i1)

     ENDPARDO a, i, a1, i1

     PARDO b, j, b1, j1
#
#          REQUEST/GET amplitude data from all 3 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST d0bjbj(b,j,b1,j1) b # ziter-3 amplitudes
           REQUEST d1bjbj(b,j,b1,j1) b # ziter-2 amplitudes
           REQUEST d2bjbj(b,j,b1,j1) b # ziter-1 amplitudes
#
           REQUEST e1bjbj(b,j,b1,j1) b # ziter-2 amplitudes
           REQUEST e2bjbj(b,j,b1,j1) b # ziter-1 amplitudes
           REQUEST e3bjbj(b,j,b1,j1) b # ziter-0 amplitudes

           REQUEST             VCONV2BB (b,j,b1,j1) b # Diagonal HBAR elements
           tqqqq (b,j,b1,j1) = VCONV2BB (b,j,b1,j1)
#
#          Evaluate the ZDIIS approximant 
#          -----------------------------
#
           tbjbj  (b,j,b1,j1)  = e1bjbj (b,j,b1,j1)
           tbjbj  (b,j,b1,j1) *= c1

           t2bjbj (b,j,b1,j1)  = e2bjbj (b,j,b1,j1)
           t2bjbj (b,j,b1,j1) *= c2
           tbjbj  (b,j,b1,j1) += t2bjbj (b,j,b1,j1)

           t2bjbj (b,j,b1,j1)  = e3bjbj (b,j,b1,j1)
           t2bjbj (b,j,b1,j1) *= c3     
           tbjbj  (b,j,b1,j1) += t2bjbj (b,j,b1,j1)

           tbjbj  (b,j,b1,j1) *=  0.75 # To match ACESII
           EXECUTE  APPLY_DEN4_NODIAG  tbjbj  tqqqq
#
#
#          Add to the associated residual vectors
#
#
           t2bjbj (b,j,b1,j1)  = d0bjbj (b,j,b1,j1)
           t2bjbj (b,j,b1,j1) *= c1
           tbjbj  (b,j,b1,j1) += t2bjbj (b,j,b1,j1)

           t2bjbj (b,j,b1,j1)  = d1bjbj (b,j,b1,j1)
           t2bjbj (b,j,b1,j1) *= c2
           tbjbj  (b,j,b1,j1) += t2bjbj (b,j,b1,j1)

           t2bjbj (b,j,b1,j1)  = d2bjbj (b,j,b1,j1)
           t2bjbj (b,j,b1,j1) *= c3
           tbjbj  (b,j,b1,j1) += t2bjbj (b,j,b1,j1)

           PREPARE  VCACT2BB (b,j,b1,j1) = tbjbj (b,j,b1,j1)
#
     ENDPARDO b, j, b1, j1
#
#    Form T2old_ab. 
#    -------------- 
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 3 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST D0aibj(a,i,b,j) a # ziter-3 amplitudes
           REQUEST D1aibj(a,i,b,j) a # ziter-2 amplitudes
           REQUEST D2aibj(a,i,b,j) a # ziter-1 amplitudes
#
           REQUEST e1aibj(a,i,b,j) a # ziter-2 amplitudes
           REQUEST e2aibj(a,i,b,j) a # ziter-1 amplitudes
           REQUEST e3aibj(a,i,b,j) a # ziter-0 amplitudes

           REQUEST           VCONV2AB (a,i,b,j) a
           tppqq (a,i,b,j) = VCONV2AB (a,i,b,j) 
#          
#          Evaluate the ZDIIS approximant 
#          -----------------------------
#    
           taibj  (a,i,b,j)  = e1aibj (a,i,b,j)
           taibj  (a,i,b,j) *= c1
           
           t2aibj (a,i,b,j)  = e2aibj (a,i,b,j)
           t2aibj (a,i,b,j) *= c2
           taibj  (a,i,b,j) += t2aibj (a,i,b,j)

           t2aibj (a,i,b,j)  = e3aibj (a,i,b,j)
           t2aibj (a,i,b,j) *= c3
           taibj  (a,i,b,j) += t2aibj (a,i,b,j)

           taibj  (a,i,b,j) *=  0.75 # To match ACESII
           EXECUTE  APPLY_DEN4  taibj  tppqq
#
#
#          Add to the associated residual vectors
#
#
           t2aibj (a,i,b,j)  = d0aibj (a,i,b,j)
           t2aibj (a,i,b,j) *= c1
           taibj  (a,i,b,j) += t2aibj (a,i,b,j)

           t2aibj (a,i,b,j)  = d1aibj (a,i,b,j)
           t2aibj (a,i,b,j) *= c2
           taibj  (a,i,b,j) += t2aibj (a,i,b,j)

           t2aibj (a,i,b,j)  = d2aibj (a,i,b,j)
           t2aibj (a,i,b,j) *= c3
           taibj  (a,i,b,j) += t2aibj (a,i,b,j)

           PREPARE  VCACT2AB (a,i,b,j) = taibj (a,i,b,j)

     ENDPARDO a, i, b, j
#
#    Form tai_old. 
#    ------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 3 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET D0ai(a,i)     # ziter-3 amplitudes  
           GET D1ai(a,i)     # ziter-2 amplitudes  
           GET D2ai(a,i)     # ziter-1 amplitudes  
#
           GET e1ai(a,i)     # ziter-2 amplitudes  
           GET e2ai(a,i)     # ziter-1 amplitudes  
           GET e3ai(a,i)     # ziter-0 amplitudes  

           GET         VCONV1A (a,i)
           tpp (a,i) = VCONV1A (a,i)
#
#          Evaluate the ZDIIS approximant 
#          -----------------------------
#    
           tai  (a,i)  = e1ai (a,i)
           tai  (a,i) *= c1

           t2ai (a,i)  = e2ai (a,i)
           t2ai (a,i) *= c2
           tai  (a,i) += t2ai (a,i)

           t2ai (a,i)  = e3ai (a,i)
           t2ai (a,i) *= c3
           tai  (a,i) += t2ai (a,i)

           tai  (a,i) *=  0.75 # To match ACESII
           EXECUTE  APPLY_DEN2  tai  tpp
#
#
#          Add to the associated residual vectors
#
#    
           t2ai (a,i)  = d0ai (a,i)
           t2ai (a,i) *= c1
           tai  (a,i) += t2ai (a,i)

           t2ai (a,i)  = d1ai (a,i)
           t2ai (a,i) *= c2  
           tai  (a,i) += t2ai (a,i)

           t2ai (a,i)  = d2ai (a,i)
           t2ai (a,i) *= c3
           tai  (a,i) += t2ai (a,i)
           
           PUT  VCACT1A (a,i) = tai (a,i)
#
     ENDPARDO a, i  

     PARDO b, j  
#
#          REQUEST/GET amplitude data from all 3 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET D0bj(b,j)     # ziter-3 amplitudes  
           GET D1bj(b,j)     # ziter-2 amplitudes  
           GET D2bj(b,j)     # ziter-1 amplitudes  
#
           GET e1bj(b,j)     # ziter-2 amplitudes  
           GET e2bj(b,j)     # ziter-1 amplitudes  
           GET e3bj(b,j)     # ziter-0 amplitudes  

           GET         VCONV1B (b,j)
           tqq (b,j) = VCONV1B (b,j)
#
#          Evaluate the ZDIIS approximant 
#          -----------------------------
#    
           tbj  (b,j)  = e1bj (b,j)
           tbj  (b,j) *= c1

           t2bj (b,j)  = e2bj (b,j)
           t2bj (b,j) *= c2
           tbj  (b,j) += t2bj (b,j)

           t2bj (b,j)  = e3bj (b,j)
           t2bj (b,j) *= c3
           tbj  (b,j) += t2bj (b,j)

           tbj  (b,j) *=  0.75 # To match ACESII
           EXECUTE  APPLY_DEN2  tbj  tqq
#
#
#          Add to the associated residual vectors
#
#    
           t2bj (b,j)  = d0bj (b,j)
           t2bj (b,j) *= c1
           tbj  (b,j) += t2bj (b,j)

           t2bj (b,j)  = d1bj (b,j)
           t2bj (b,j) *= c2  
           tbj  (b,j) += t2bj (b,j)

           t2bj (b,j)  = d2bj (b,j)
           t2bj (b,j) *= c3
           tbj  (b,j) += t2bj (b,j)

           PUT  VCACT1B (b,j) = tbj (b,j)
#
     ENDPARDO b, j  
#
     execute server_barrier 
#
     ENDPROC ZDIIS2  
#    ------------- 
#
# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
#
     PROC ZDIIS3  
#    ---------- 
#
#    Zero out scalars.
#    ----------------- 
#
     CALL ZERO_DSCALAR
#
#    Determine the 'B-matrix'. 
#    ------------------------- 
#
#    Compute contributions due to T2aiai amplitudes. 
#    ----------------------------------------------- 
#
#
     PARDO a, i, a1, i1
#
#          REQUEST/GET amplitude data from all 4 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1aiai(a,i,a1,i1) a # ziter-3 amplitudes
           REQUEST e2aiai(a,i,a1,i1) a # ziter-2 amplitudes
           REQUEST e3aiai(a,i,a1,i1) a # ziter-1 amplitudes
           REQUEST e4aiai(a,i,a1,i1) a # ziter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,4
#             ---------
#
              etemp = e1aiai(a,i,a1,i1)*e1aiai(a,i,a1,i1)
              b11  += etemp
#
              etemp = e1aiai(a,i,a1,i1)*e2aiai(a,i,a1,i1)
              b12  += etemp
#
              etemp = e1aiai(a,i,a1,i1)*e3aiai(a,i,a1,i1)
              b13  += etemp
#
              etemp = e1aiai(a,i,a1,i1)*e4aiai(a,i,a1,i1)
              b14  += etemp
#
#             b1x x=2,4
#             ---------
#
              etemp = e2aiai(a,i,a1,i1)*e2aiai(a,i,a1,i1)
              b22  += etemp
#
              etemp = e2aiai(a,i,a1,i1)*e3aiai(a,i,a1,i1)
              b23  += etemp
#
              etemp = e2aiai(a,i,a1,i1)*e4aiai(a,i,a1,i1)
              b24  += etemp
#
#             b1x x=3,4
#             ---------
#
              etemp = e3aiai(a,i,a1,i1)*e3aiai(a,i,a1,i1)
              b33  += etemp
#
              etemp = e3aiai(a,i,a1,i1)*e4aiai(a,i,a1,i1)
              b34  += etemp
#
#             b1x x=4,4
#             ---------
#
              etemp = e4aiai(a,i,a1,i1)*e4aiai(a,i,a1,i1)
              b44  += etemp
#
     ENDPARDO a, i, a1, i1

     PARDO b, j, b1, j1
#
#          REQUEST/GET amplitude data from all 4 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1bjbj(b,j,b1,j1) b # ziter-3 amplitudes
           REQUEST e2bjbj(b,j,b1,j1) b # ziter-2 amplitudes
           REQUEST e3bjbj(b,j,b1,j1) b # ziter-1 amplitudes
           REQUEST e4bjbj(b,j,b1,j1) b # ziter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,4
#             ---------
#
              etemp = e1bjbj(b,j,b1,j1)*e1bjbj(b,j,b1,j1)
              b11  += etemp
#
              etemp = e1bjbj(b,j,b1,j1)*e2bjbj(b,j,b1,j1)
              b12  += etemp
#
              etemp = e1bjbj(b,j,b1,j1)*e3bjbj(b,j,b1,j1)
              b13  += etemp
#
              etemp = e1bjbj(b,j,b1,j1)*e4bjbj(b,j,b1,j1)
              b14  += etemp
#
#             b1x x=2,4
#             ---------
#
              etemp = e2bjbj(b,j,b1,j1)*e2bjbj(b,j,b1,j1)
              b22  += etemp
#
              etemp = e2bjbj(b,j,b1,j1)*e3bjbj(b,j,b1,j1)
              b23  += etemp
#
              etemp = e2bjbj(b,j,b1,j1)*e4bjbj(b,j,b1,j1)
              b24  += etemp
#
#             b1x x=3,4
#             ---------
#
              etemp = e3bjbj(b,j,b1,j1)*e3bjbj(b,j,b1,j1)
              b33  += etemp
#
              etemp = e3bjbj(b,j,b1,j1)*e4bjbj(b,j,b1,j1)
              b34  += etemp
#
#             b1x x=4,4
#             ---------
#
              etemp = e4bjbj(b,j,b1,j1)*e4bjbj(b,j,b1,j1)
              b44  += etemp
#
     ENDPARDO b, j, b1, j1
#
#    Compute contributions due to T2aibj amplitudes.
#    -----------------------------------------------
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 4 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1aibj(a,i,b,j) a # ziter-3 amplitudes
           REQUEST e2aibj(a,i,b,j) a # ziter-2 amplitudes
           REQUEST e3aibj(a,i,b,j) a # ziter-1 amplitudes
           REQUEST e4aibj(a,i,b,j) a # ziter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,4
#             ---------
#
              etemp = e1aibj(a,i,b,j)*e1aibj(a,i,b,j)
              etemp *= 2.0
              b11  += etemp
#
              etemp = e1aibj(a,i,b,j)*e2aibj(a,i,b,j)
              etemp *= 2.0
              b12  += etemp
#
              etemp = e1aibj(a,i,b,j)*e3aibj(a,i,b,j)
              etemp *= 2.0
              b13  += etemp
#
              etemp = e1aibj(a,i,b,j)*e4aibj(a,i,b,j)
              etemp *= 2.0
              b14  += etemp
#
#             b1x x=2,4
#             ---------
#
              etemp = e2aibj(a,i,b,j)*e2aibj(a,i,b,j)
              etemp *= 2.0
              b22  += etemp
#
              etemp = e2aibj(a,i,b,j)*e3aibj(a,i,b,j)
              etemp *= 2.0
              b23  += etemp
#
              etemp = e2aibj(a,i,b,j)*e4aibj(a,i,b,j)
              etemp *= 2.0
              b24  += etemp
#
#             b1x x=3,4
#             ---------
#
              etemp = e3aibj(a,i,b,j)*e3aibj(a,i,b,j)
              etemp *= 2.0
              b33  += etemp
#
              etemp = e3aibj(a,i,b,j)*e4aibj(a,i,b,j)
              etemp *= 2.0
              b34  += etemp
#
#             b1x x=4,4
#             ---------
#
              etemp = e4aibj(a,i,b,j)*e4aibj(a,i,b,j)
              etemp *= 2.0
              b44  += etemp
#
     ENDPARDO a, i, b, j
#
#    Compute contributions due to T1ai amplitudes. 
#    --------------------------------------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 4 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET e1ai(a,i)    # ziter-3 amplitudes  
           GET e2ai(a,i)    # ziter-2 amplitudes  
           GET e3ai(a,i)    # ziter-1 amplitudes  
           GET e4ai(a,i)    # ziter-0 amplitudes  
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#             b1x x=1,4 
#             --------- 
#
              etemp = e1ai(a,i)*e1ai(a,i) 
              etemp *= 4.0
              b11  += etemp            
#
              etemp = e1ai(a,i)*e2ai(a,i) 
              etemp *= 4.0
              b12  += etemp            
#
              etemp = e1ai(a,i)*e3ai(a,i) 
              etemp *= 4.0
              b13  += etemp            
#
              etemp = e1ai(a,i)*e4ai(a,i) 
              etemp *= 4.0
              b14  += etemp            
#
#             b1x x=2,4 
#             --------- 
#
              etemp = e2ai(a,i)*e2ai(a,i) 
              etemp *= 4.0
              b22  += etemp            
#
              etemp = e2ai(a,i)*e3ai(a,i) 
              etemp *= 4.0
              b23  += etemp            
#
              etemp = e2ai(a,i)*e4ai(a,i) 
              etemp *= 4.0
              b24  += etemp            
#
#             b1x x=3,4 
#             --------- 
#
              etemp = e3ai(a,i)*e3ai(a,i) 
              etemp *= 4.0
              b33  += etemp            
#
              etemp = e3ai(a,i)*e4ai(a,i) 
              etemp *= 4.0
              b34  += etemp            
#
#             b1x x=4,4 
#             --------- 
#
              etemp = e4ai(a,i)*e4ai(a,i) 
              etemp *= 4.0
              b44  += etemp            
#
     ENDPARDO a, i 
#
     PARDO b, j  
#
#          REQUEST/GET amplitude data from all 4 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET e1bj(b,j)    # ziter-3 amplitudes  
           GET e2bj(b,j)    # ziter-2 amplitudes  
           GET e3bj(b,j)    # ziter-1 amplitudes  
           GET e4bj(b,j)    # ziter-0 amplitudes  
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#             b1x x=1,4 
#             --------- 
#
              etemp = e1bj(b,j)*e1bj(b,j) 
              etemp *= 4.0
              b11  += etemp            
#
              etemp = e1bj(b,j)*e2bj(b,j) 
              etemp *= 4.0
              b12  += etemp            
#
              etemp = e1bj(b,j)*e3bj(b,j) 
              etemp *= 4.0
              b13  += etemp            
#
              etemp = e1bj(b,j)*e4bj(b,j) 
              etemp *= 4.0
              b14  += etemp            
#
#             b1x x=2,4 
#             --------- 
#
              etemp = e2bj(b,j)*e2bj(b,j) 
              etemp *= 4.0
              b22  += etemp            
#
              etemp = e2bj(b,j)*e3bj(b,j) 
              etemp *= 4.0
              b23  += etemp            
#
              etemp = e2bj(b,j)*e4bj(b,j) 
              etemp *= 4.0
              b24  += etemp            
#
#             b1x x=3,4 
#             --------- 
#
              etemp = e3bj(b,j)*e3bj(b,j) 
              etemp *= 4.0
              b33  += etemp            
#
              etemp = e3bj(b,j)*e4bj(b,j) 
              etemp *= 4.0
              b34  += etemp            
#
#             b1x x=4,4 
#             --------- 
#
              etemp = e4bj(b,j)*e4bj(b,j) 
              etemp *= 4.0
              b44  += etemp            
#
     ENDPARDO b, j 

     execute server_barrier 
#
#    Collectively sum B-matrix elements. 
#    -----------------------------------
#
     collective Tb11 += b11 
     collective Tb12 += b12 
     collective Tb13 += b13 
     collective Tb14 += b14 
     collective Tb22 += b22 
     collective Tb23 += b23 
     collective Tb24 += b24 
     collective Tb33 += b33 
     collective Tb34 += b34 
     collective Tb44 += b44 
#
#    Now the unique elements of the 'B-matrix' have been computed and the array filled out. 
#    --------------------------------------------------------------------------------------
#
#    Put the elements of the 'B-matrix', which have been computed as scalars into the  
#    R-matrix. 
#    -------------------------------------------------------------------------------- 
#
     CALL SETUP_DIIS 
#
     execute compute_diis # --> New instruction  
#
     c1 = Tb11 
     c2 = Tb22 
     c3 = Tb33 
     c4 = Tb44 
     execute print_scalar c1 
     execute print_scalar c2 
     execute print_scalar c3 
     execute print_scalar c4 
#
#    Done computing the c-vector. 
#    ---------------------------- 
#
#    Form the updated amplitudes using the c-vector. 
#    -----------------------------------------------  
#
#    Form T2old_aa. 
#    -------------- 
#
     PARDO a, i, a1, i1
#
#          REQUEST/GET amplitude data from all 4 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST d0aiai(a,i,a1,i1) a # ziter-4 amplitudes
           REQUEST d1aiai(a,i,a1,i1) a # ziter-3 amplitudes
           REQUEST d2aiai(a,i,a1,i1) a # ziter-2 amplitudes
           REQUEST d3aiai(a,i,a1,i1) a # ziter-1 amplitudes
#
           REQUEST e1aiai(a,i,a1,i1) a # ziter-3 amplitudes
           REQUEST e2aiai(a,i,a1,i1) a # ziter-2 amplitudes
           REQUEST e3aiai(a,i,a1,i1) a # ziter-1 amplitudes
           REQUEST e4aiai(a,i,a1,i1) a # ziter-0 amplitudes

           REQUEST             VCONV2AA (a,i,a1,i1) a # Diagonal HBAR elements
           tpppp (a,i,a1,i1) = VCONV2AA (a,i,a1,i1)
#
#          Evaluate the ZDIIS approximant 
#          -----------------------------
#
           taiai  (a,i,a1,i1)  = e1aiai (a,i,a1,i1)
           taiai  (a,i,a1,i1) *= c1

           t2aiai (a,i,a1,i1)  = e2aiai (a,i,a1,i1)
           t2aiai (a,i,a1,i1) *= c2
           taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

           t2aiai (a,i,a1,i1)  = e3aiai (a,i,a1,i1)
           t2aiai (a,i,a1,i1) *= c3     
           taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

           t2aiai (a,i,a1,i1)  = e4aiai (a,i,a1,i1)
           t2aiai (a,i,a1,i1) *= c4     
           taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

           taiai  (a,i,a1,i1) *=  0.75 # To match ACESII
           EXECUTE  APPLY_DEN4_NODIAG  taiai  tpppp
#
#
#          Add to the associated residual vectors
#
#
           t2aiai (a,i,a1,i1)  = d0aiai (a,i,a1,i1)
           t2aiai (a,i,a1,i1) *= c1
           taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

           t2aiai (a,i,a1,i1)  = d1aiai (a,i,a1,i1)
           t2aiai (a,i,a1,i1) *= c2
           taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

           t2aiai (a,i,a1,i1)  = d2aiai (a,i,a1,i1)
           t2aiai (a,i,a1,i1) *= c3
           taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

           t2aiai (a,i,a1,i1)  = d3aiai (a,i,a1,i1)
           t2aiai (a,i,a1,i1) *= c4
           taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

           PREPARE  VCACT2AA (a,i,a1,i1) = taiai (a,i,a1,i1)
#
     ENDPARDO a, i, a1, i1

     PARDO b, j, b1, j1
#
#          REQUEST/GET amplitude data from all 4 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST d0bjbj(b,j,b1,j1) b # ziter-4 amplitudes
           REQUEST d1bjbj(b,j,b1,j1) b # ziter-3 amplitudes
           REQUEST d2bjbj(b,j,b1,j1) b # ziter-2 amplitudes
           REQUEST d3bjbj(b,j,b1,j1) b # ziter-1 amplitudes
#
           REQUEST e1bjbj(b,j,b1,j1) b # ziter-3 amplitudes
           REQUEST e2bjbj(b,j,b1,j1) b # ziter-2 amplitudes
           REQUEST e3bjbj(b,j,b1,j1) b # ziter-1 amplitudes
           REQUEST e4bjbj(b,j,b1,j1) b # ziter-0 amplitudes

           REQUEST             VCONV2BB (b,j,b1,j1) b # Diagonal HBAR elements
           tqqqq (b,j,b1,j1) = VCONV2BB (b,j,b1,j1)
#
#          Evaluate the ZDIIS approximant 
#          -----------------------------
#
           tbjbj  (b,j,b1,j1)  = e1bjbj (b,j,b1,j1)
           tbjbj  (b,j,b1,j1) *= c1

           t2bjbj (b,j,b1,j1)  = e2bjbj (b,j,b1,j1)
           t2bjbj (b,j,b1,j1) *= c2
           tbjbj  (b,j,b1,j1) += t2bjbj (b,j,b1,j1)

           t2bjbj (b,j,b1,j1)  = e3bjbj (b,j,b1,j1)
           t2bjbj (b,j,b1,j1) *= c3     
           tbjbj  (b,j,b1,j1) += t2bjbj (b,j,b1,j1)

           t2bjbj (b,j,b1,j1)  = e4bjbj (b,j,b1,j1)
           t2bjbj (b,j,b1,j1) *= c4     
           tbjbj  (b,j,b1,j1) += t2bjbj (b,j,b1,j1)

           tbjbj  (b,j,b1,j1) *=  0.75 # To match ACESII
           EXECUTE  APPLY_DEN4_NODIAG  tbjbj  tqqqq
#
#
#          Add to the associated residual vectors
#
#
           t2bjbj (b,j,b1,j1)  = d0bjbj (b,j,b1,j1)
           t2bjbj (b,j,b1,j1) *= c1
           tbjbj  (b,j,b1,j1) += t2bjbj (b,j,b1,j1)

           t2bjbj (b,j,b1,j1)  = d1bjbj (b,j,b1,j1)
           t2bjbj (b,j,b1,j1) *= c2
           tbjbj  (b,j,b1,j1) += t2bjbj (b,j,b1,j1)

           t2bjbj (b,j,b1,j1)  = d2bjbj (b,j,b1,j1)
           t2bjbj (b,j,b1,j1) *= c3
           tbjbj  (b,j,b1,j1) += t2bjbj (b,j,b1,j1)

           t2bjbj (b,j,b1,j1)  = d3bjbj (b,j,b1,j1)
           t2bjbj (b,j,b1,j1) *= c4
           tbjbj  (b,j,b1,j1) += t2bjbj (b,j,b1,j1)

           PREPARE  VCACT2BB (b,j,b1,j1) = tbjbj (b,j,b1,j1)
#
     ENDPARDO b, j, b1, j1
#
#    Form T2old_ab. 
#    -------------- 
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 4 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST D0aibj(a,i,b,j) a # ziter-4 amplitudes
           REQUEST D1aibj(a,i,b,j) a # ziter-3 amplitudes
           REQUEST D2aibj(a,i,b,j) a # ziter-2 amplitudes
           REQUEST D3aibj(a,i,b,j) a # ziter-1 amplitudes
#
           REQUEST e1aibj(a,i,b,j) a # ziter-3 amplitudes
           REQUEST e2aibj(a,i,b,j) a # ziter-2 amplitudes
           REQUEST e3aibj(a,i,b,j) a # ziter-1 amplitudes
           REQUEST e4aibj(a,i,b,j) a # ziter-0 amplitudes

           REQUEST           VCONV2AB (a,i,b,j) a
           tppqq (a,i,b,j) = VCONV2AB (a,i,b,j) 
#          
#          Evaluate the ZDIIS approximant 
#          -----------------------------
#    
           taibj  (a,i,b,j)  = e1aibj (a,i,b,j)
           taibj  (a,i,b,j) *= c1
           
           t2aibj (a,i,b,j)  = e2aibj (a,i,b,j)
           t2aibj (a,i,b,j) *= c2
           taibj  (a,i,b,j) += t2aibj (a,i,b,j)

           t2aibj (a,i,b,j)  = e3aibj (a,i,b,j)
           t2aibj (a,i,b,j) *= c3
           taibj  (a,i,b,j) += t2aibj (a,i,b,j)

           t2aibj (a,i,b,j)  = e4aibj (a,i,b,j)
           t2aibj (a,i,b,j) *= c4
           taibj  (a,i,b,j) += t2aibj (a,i,b,j)

           taibj  (a,i,b,j) *=  0.75 # To match ACESII
           EXECUTE  APPLY_DEN4  taibj  tppqq
#
#
#          Add to the associated residual vectors
#
#
           t2aibj (a,i,b,j)  = d0aibj (a,i,b,j)
           t2aibj (a,i,b,j) *= c1
           taibj  (a,i,b,j) += t2aibj (a,i,b,j)

           t2aibj (a,i,b,j)  = d1aibj (a,i,b,j)
           t2aibj (a,i,b,j) *= c2
           taibj  (a,i,b,j) += t2aibj (a,i,b,j)

           t2aibj (a,i,b,j)  = d2aibj (a,i,b,j)
           t2aibj (a,i,b,j) *= c3
           taibj  (a,i,b,j) += t2aibj (a,i,b,j)

           t2aibj (a,i,b,j)  = d3aibj (a,i,b,j)
           t2aibj (a,i,b,j) *= c4
           taibj  (a,i,b,j) += t2aibj (a,i,b,j)

           PREPARE  VCACT2AB (a,i,b,j) = taibj (a,i,b,j)
#
     ENDPARDO a, i, b, j
#
#    Form tai_old. 
#    ------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 4 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET D0ai(a,i)     # ziter-4 amplitudes  
           GET D1ai(a,i)     # ziter-3 amplitudes  
           GET D2ai(a,i)     # ziter-2 amplitudes  
           GET D3ai(a,i)     # ziter-1 amplitudes  
#
           GET e1ai(a,i)     # ziter-3 amplitudes  
           GET e2ai(a,i)     # ziter-2 amplitudes  
           GET e3ai(a,i)     # ziter-1 amplitudes  
           GET e4ai(a,i)     # ziter-0 amplitudes  

           GET         VCONV1A (a,i)
           tpp (a,i) = VCONV1A (a,i)
#
#          Evaluate the ZDIIS approximant 
#          -----------------------------
#    
           tai  (a,i)  = e1ai (a,i)
           tai  (a,i) *= c1

           t2ai (a,i)  = e2ai (a,i)
           t2ai (a,i) *= c2
           tai  (a,i) += t2ai (a,i)

           t2ai (a,i)  = e3ai (a,i)
           t2ai (a,i) *= c3
           tai  (a,i) += t2ai (a,i)

           t2ai (a,i)  = e4ai (a,i)
           t2ai (a,i) *= c4
           tai  (a,i) += t2ai (a,i)

           tai  (a,i) *=  0.75 # To match ACESII
           EXECUTE  APPLY_DEN2  tai  tpp
#
#
#          Add to the associated residual vectors
#
#    
           t2ai (a,i)  = d0ai (a,i)
           t2ai (a,i) *= c1
           tai  (a,i) += t2ai (a,i)

           t2ai (a,i)  = d1ai (a,i)
           t2ai (a,i) *= c2  
           tai  (a,i) += t2ai (a,i)

           t2ai (a,i)  = d2ai (a,i)
           t2ai (a,i) *= c3
           tai  (a,i) += t2ai (a,i)
           
           t2ai (a,i)  = d3ai (a,i)
           t2ai (a,i) *= c4
           tai  (a,i) += t2ai (a,i)

           PUT  VCACT1A (a,i) = tai (a,i)
#
     ENDPARDO a, i  

     PARDO b, j  
#
#          REQUEST/GET amplitude data from all 4 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET D0bj(b,j)     # ziter-4 amplitudes  
           GET D1bj(b,j)     # ziter-3 amplitudes  
           GET D2bj(b,j)     # ziter-2 amplitudes  
           GET D3bj(b,j)     # ziter-1 amplitudes  
#
           GET e1bj(b,j)     # ziter-3 amplitudes  
           GET e2bj(b,j)     # ziter-2 amplitudes  
           GET e3bj(b,j)     # ziter-1 amplitudes  
           GET e4bj(b,j)     # ziter-0 amplitudes  

           GET         VCONV1B (b,j)
           tqq (b,j) = VCONV1B (b,j)
#
#          Evaluate the ZDIIS approximant 
#          -----------------------------
#    
           tbj  (b,j)  = e1bj (b,j)
           tbj  (b,j) *= c1

           t2bj (b,j)  = e2bj (b,j)
           t2bj (b,j) *= c2
           tbj  (b,j) += t2bj (b,j)

           t2bj (b,j)  = e3bj (b,j)
           t2bj (b,j) *= c3
           tbj  (b,j) += t2bj (b,j)

           t2bj (b,j)  = e4bj (b,j)
           t2bj (b,j) *= c4
           tbj  (b,j) += t2bj (b,j)

           tbj  (b,j) *=  0.75 # To match ACESII
           EXECUTE  APPLY_DEN2  tbj  tqq
#
#
#          Add to the associated residual vectors
#
#    
           t2bj (b,j)  = d0bj (b,j)
           t2bj (b,j) *= c1
           tbj  (b,j) += t2bj (b,j)

           t2bj (b,j)  = d1bj (b,j)
           t2bj (b,j) *= c2  
           tbj  (b,j) += t2bj (b,j)

           t2bj (b,j)  = d2bj (b,j)
           t2bj (b,j) *= c3
           tbj  (b,j) += t2bj (b,j)

           t2bj (b,j)  = d3bj (b,j)
           t2bj (b,j) *= c4
           tbj  (b,j) += t2bj (b,j)

           PUT  VCACT1B (b,j) = tbj (b,j)
#
     ENDPARDO b, j  
#
     execute server_barrier 
#
     ENDPROC ZDIIS3  
#    ------------- 
#
# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
#
     PROC ZDIIS4  
#    ---------- 
#
#    Zero out scalars.
#    ----------------- 
#
     CALL ZERO_DSCALAR
#
#    Determine the 'B-matrix'. 
#    ------------------------- 
#
#    Compute contributions due to T2aiai amplitudes. 
#    ----------------------------------------------- 
#
#
     PARDO a, i, a1, i1
#
#          REQUEST/GET amplitude data from all 5 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1aiai(a,i,a1,i1) a # ziter-4 amplitudes
           REQUEST e2aiai(a,i,a1,i1) a # ziter-3 amplitudes
           REQUEST e3aiai(a,i,a1,i1) a # ziter-2 amplitudes
           REQUEST e4aiai(a,i,a1,i1) a # ziter-1 amplitudes
           REQUEST e5aiai(a,i,a1,i1) a # ziter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,5
#             ---------
#
              etemp = e1aiai(a,i,a1,i1)*e1aiai(a,i,a1,i1)
              b11  += etemp
#
              etemp = e1aiai(a,i,a1,i1)*e2aiai(a,i,a1,i1)
              b12  += etemp
#
              etemp = e1aiai(a,i,a1,i1)*e3aiai(a,i,a1,i1)
              b13  += etemp
#
              etemp = e1aiai(a,i,a1,i1)*e4aiai(a,i,a1,i1)
              b14  += etemp
#
              etemp = e1aiai(a,i,a1,i1)*e5aiai(a,i,a1,i1)
              b15  += etemp
#
#             b1x x=2,5
#             ---------
#
              etemp = e2aiai(a,i,a1,i1)*e2aiai(a,i,a1,i1)
              b22  += etemp
#
              etemp = e2aiai(a,i,a1,i1)*e3aiai(a,i,a1,i1)
              b23  += etemp
#
              etemp = e2aiai(a,i,a1,i1)*e4aiai(a,i,a1,i1)
              b24  += etemp
#
              etemp = e2aiai(a,i,a1,i1)*e5aiai(a,i,a1,i1)
              b25  += etemp
#
#             b1x x=3,5
#             ---------
#
              etemp = e3aiai(a,i,a1,i1)*e3aiai(a,i,a1,i1)
              b33  += etemp
#
              etemp = e3aiai(a,i,a1,i1)*e4aiai(a,i,a1,i1)
              b34  += etemp
#
              etemp = e3aiai(a,i,a1,i1)*e5aiai(a,i,a1,i1)
              b35  += etemp
#
#             b1x x=4,5
#             ---------
#
              etemp = e4aiai(a,i,a1,i1)*e4aiai(a,i,a1,i1)
              b44  += etemp
#
              etemp = e4aiai(a,i,a1,i1)*e5aiai(a,i,a1,i1)
              b45  += etemp
#
#             b1x x=5,5
#             ---------
#
              etemp = e5aiai(a,i,a1,i1)*e5aiai(a,i,a1,i1)
              b55  += etemp
#
     ENDPARDO a, i, a1, i1

     PARDO b, j, b1, j1
#
#          REQUEST/GET amplitude data from all 5 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1bjbj(b,j,b1,j1) b # ziter-4 amplitudes
           REQUEST e2bjbj(b,j,b1,j1) b # ziter-3 amplitudes
           REQUEST e3bjbj(b,j,b1,j1) b # ziter-2 amplitudes
           REQUEST e4bjbj(b,j,b1,j1) b # ziter-1 amplitudes
           REQUEST e5bjbj(b,j,b1,j1) b # ziter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,5
#             ---------
#
              etemp = e1bjbj(b,j,b1,j1)*e1bjbj(b,j,b1,j1)
              b11  += etemp
#
              etemp = e1bjbj(b,j,b1,j1)*e2bjbj(b,j,b1,j1)
              b12  += etemp
#
              etemp = e1bjbj(b,j,b1,j1)*e3bjbj(b,j,b1,j1)
              b13  += etemp
#
              etemp = e1bjbj(b,j,b1,j1)*e4bjbj(b,j,b1,j1)
              b14  += etemp
#
              etemp = e1bjbj(b,j,b1,j1)*e5bjbj(b,j,b1,j1)
              b15  += etemp
#
#             b1x x=2,5
#             ---------
#
              etemp = e2bjbj(b,j,b1,j1)*e2bjbj(b,j,b1,j1)
              b22  += etemp
#
              etemp = e2bjbj(b,j,b1,j1)*e3bjbj(b,j,b1,j1)
              b23  += etemp
#
              etemp = e2bjbj(b,j,b1,j1)*e4bjbj(b,j,b1,j1)
              b24  += etemp
#
              etemp = e2bjbj(b,j,b1,j1)*e5bjbj(b,j,b1,j1)
              b25  += etemp
#
#             b1x x=3,5
#             ---------
#
              etemp = e3bjbj(b,j,b1,j1)*e3bjbj(b,j,b1,j1)
              b33  += etemp
#
              etemp = e3bjbj(b,j,b1,j1)*e4bjbj(b,j,b1,j1)
              b34  += etemp
#
              etemp = e3bjbj(b,j,b1,j1)*e5bjbj(b,j,b1,j1)
              b35  += etemp
#
#             b1x x=4,5
#             ---------
#
              etemp = e4bjbj(b,j,b1,j1)*e4bjbj(b,j,b1,j1)
              b44  += etemp
#
              etemp = e4bjbj(b,j,b1,j1)*e5bjbj(b,j,b1,j1)
              b45  += etemp
#
#             b1x x=5,5
#             ---------
#
              etemp = e5bjbj(b,j,b1,j1)*e5bjbj(b,j,b1,j1)
              b55  += etemp
#
     ENDPARDO b, j, b1, j1
#
#    Compute contributions due to T2aibj amplitudes.
#    -----------------------------------------------
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 5 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1aibj(a,i,b,j) a # ziter-4 amplitudes
           REQUEST e2aibj(a,i,b,j) a # ziter-3 amplitudes
           REQUEST e3aibj(a,i,b,j) a # ziter-2 amplitudes
           REQUEST e4aibj(a,i,b,j) a # ziter-1 amplitudes
           REQUEST e5aibj(a,i,b,j) a # ziter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,5
#             ---------
#
              etemp = e1aibj(a,i,b,j)*e1aibj(a,i,b,j)
              etemp *= 2.0
              b11  += etemp
#
              etemp = e1aibj(a,i,b,j)*e2aibj(a,i,b,j)
              etemp *= 2.0
              b12  += etemp
#
              etemp = e1aibj(a,i,b,j)*e3aibj(a,i,b,j)
              etemp *= 2.0
              b13  += etemp
#
              etemp = e1aibj(a,i,b,j)*e4aibj(a,i,b,j)
              etemp *= 2.0
              b14  += etemp
#
              etemp = e1aibj(a,i,b,j)*e5aibj(a,i,b,j)
              etemp *= 2.0
              b15  += etemp
#
#             b1x x=2,5
#             ---------
#
              etemp = e2aibj(a,i,b,j)*e2aibj(a,i,b,j)
              etemp *= 2.0
              b22  += etemp
#
              etemp = e2aibj(a,i,b,j)*e3aibj(a,i,b,j)
              etemp *= 2.0
              b23  += etemp
#
              etemp = e2aibj(a,i,b,j)*e4aibj(a,i,b,j)
              etemp *= 2.0
              b24  += etemp
#
              etemp = e2aibj(a,i,b,j)*e5aibj(a,i,b,j)
              etemp *= 2.0
              b25  += etemp
#
#             b1x x=3,5
#             ---------
#
              etemp = e3aibj(a,i,b,j)*e3aibj(a,i,b,j)
              etemp *= 2.0
              b33  += etemp
#
              etemp = e3aibj(a,i,b,j)*e4aibj(a,i,b,j)
              etemp *= 2.0
              b34  += etemp
#
              etemp = e3aibj(a,i,b,j)*e5aibj(a,i,b,j)
              etemp *= 2.0
              b35  += etemp
#
#             b1x x=4,5
#             ---------
#
              etemp = e4aibj(a,i,b,j)*e4aibj(a,i,b,j)
              etemp *= 2.0
              b44  += etemp
#
              etemp = e4aibj(a,i,b,j)*e5aibj(a,i,b,j)
              etemp *= 2.0
              b45  += etemp
#
#             b1x x=5,5
#             ---------
#
              etemp = e5aibj(a,i,b,j)*e5aibj(a,i,b,j)
              etemp *= 2.0
              b55  += etemp
#
     ENDPARDO a, i, b, j
#
#    Compute contributions due to T1ai amplitudes. 
#    --------------------------------------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 5 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET e1ai(a,i)    # ziter-4 amplitudes  
           GET e2ai(a,i)    # ziter-3 amplitudes  
           GET e3ai(a,i)    # ziter-2 amplitudes  
           GET e4ai(a,i)    # ziter-1 amplitudes  
           GET e5ai(a,i)    # ziter-0 amplitudes  
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#             b1x x=1,5 
#             --------- 
#
              etemp = e1ai(a,i)*e1ai(a,i) 
              etemp *= 4.0
              b11  += etemp            
#
              etemp = e1ai(a,i)*e2ai(a,i) 
              etemp *= 4.0
              b12  += etemp            
#
              etemp = e1ai(a,i)*e3ai(a,i) 
              etemp *= 4.0
              b13  += etemp            
#
              etemp = e1ai(a,i)*e4ai(a,i) 
              etemp *= 4.0
              b14  += etemp            
#
              etemp = e1ai(a,i)*e5ai(a,i) 
              etemp *= 4.0
              b15  += etemp            
#
#             b1x x=2,5 
#             --------- 
#
              etemp = e2ai(a,i)*e2ai(a,i) 
              etemp *= 4.0
              b22  += etemp            
#
              etemp = e2ai(a,i)*e3ai(a,i) 
              etemp *= 4.0
              b23  += etemp            
#
              etemp = e2ai(a,i)*e4ai(a,i) 
              etemp *= 4.0
              b24  += etemp            
#
              etemp = e2ai(a,i)*e5ai(a,i) 
              etemp *= 4.0
              b25  += etemp            
#
#             b1x x=3,5 
#             --------- 
#
              etemp = e3ai(a,i)*e3ai(a,i) 
              etemp *= 4.0
              b33  += etemp            
#
              etemp = e3ai(a,i)*e4ai(a,i) 
              etemp *= 4.0
              b34  += etemp            
#
              etemp = e3ai(a,i)*e5ai(a,i) 
              etemp *= 4.0
              b35  += etemp            
#
#             b1x x=4,5 
#             --------- 
#
              etemp = e4ai(a,i)*e4ai(a,i) 
              etemp *= 4.0
              b44  += etemp            
#
              etemp = e4ai(a,i)*e5ai(a,i) 
              etemp *= 4.0
              b45  += etemp            
#
#             b1x x=5,5 
#             --------- 
#
              etemp = e5ai(a,i)*e5ai(a,i) 
              etemp *= 4.0
              b55  += etemp            
#
     ENDPARDO a, i 

     PARDO b, j  
#
#          REQUEST/GET amplitude data from all 5 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET e1bj(b,j)    # ziter-4 amplitudes  
           GET e2bj(b,j)    # ziter-3 amplitudes  
           GET e3bj(b,j)    # ziter-2 amplitudes  
           GET e4bj(b,j)    # ziter-1 amplitudes  
           GET e5bj(b,j)    # ziter-0 amplitudes  
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#             b1x x=1,5 
#             --------- 
#
              etemp = e1bj(b,j)*e1bj(b,j) 
              etemp *= 4.0
              b11  += etemp            
#
              etemp = e1bj(b,j)*e2bj(b,j) 
              etemp *= 4.0
              b12  += etemp            
#
              etemp = e1bj(b,j)*e3bj(b,j) 
              etemp *= 4.0
              b13  += etemp            
#
              etemp = e1bj(b,j)*e4bj(b,j) 
              etemp *= 4.0
              b14  += etemp            
#
              etemp = e1bj(b,j)*e5bj(b,j) 
              etemp *= 4.0
              b15  += etemp            
#
#             b1x x=2,5 
#             --------- 
#
              etemp = e2bj(b,j)*e2bj(b,j) 
              etemp *= 4.0
              b22  += etemp            
#
              etemp = e2bj(b,j)*e3bj(b,j) 
              etemp *= 4.0
              b23  += etemp            
#
              etemp = e2bj(b,j)*e4bj(b,j) 
              etemp *= 4.0
              b24  += etemp            
#
              etemp = e2bj(b,j)*e5bj(b,j) 
              etemp *= 4.0
              b25  += etemp            
#
#             b1x x=3,5 
#             --------- 
#
              etemp = e3bj(b,j)*e3bj(b,j) 
              etemp *= 4.0
              b33  += etemp            
#
              etemp = e3bj(b,j)*e4bj(b,j) 
              etemp *= 4.0
              b34  += etemp            
#
              etemp = e3bj(b,j)*e5bj(b,j) 
              etemp *= 4.0
              b35  += etemp            
#
#             b1x x=4,5 
#             --------- 
#
              etemp = e4bj(b,j)*e4bj(b,j) 
              etemp *= 4.0
              b44  += etemp            
#
              etemp = e4bj(b,j)*e5bj(b,j) 
              etemp *= 4.0
              b45  += etemp            
#
#             b1x x=5,5 
#             --------- 
#
              etemp = e5bj(b,j)*e5bj(b,j) 
              etemp *= 4.0
              b55  += etemp            
#
     ENDPARDO b, j 
#
     execute server_barrier 
#
#    Collectively sum B-matrix elements. 
#    -----------------------------------
#
     collective Tb11 += b11 
     collective Tb12 += b12 
     collective Tb13 += b13 
     collective Tb14 += b14 
     collective Tb15 += b15 
     collective Tb22 += b22 
     collective Tb23 += b23 
     collective Tb24 += b24 
     collective Tb25 += b25 
     collective Tb33 += b33 
     collective Tb34 += b34 
     collective Tb35 += b35 
     collective Tb44 += b44 
     collective Tb45 += b45 
     collective Tb55 += b55 
#
#    Now the unique elements of the 'B-matrix' have been computed and the array filled out. 
#    --------------------------------------------------------------------------------------
#
#    Put the elements of the 'B-matrix', which have been computed as scalars into the  
#    R-matrix. 
#    -------------------------------------------------------------------------------- 
#
     CALL SETUP_DIIS 
#
     execute compute_diis # --> New instruction  
#
     c1 = Tb11 
     c2 = Tb22 
     c3 = Tb33 
     c4 = Tb44 
     c5 = Tb55 
     execute print_scalar c1 
     execute print_scalar c2 
     execute print_scalar c3 
     execute print_scalar c4 
     execute print_scalar c5 
#
#    Done computing the c-vector. 
#    ---------------------------- 
#
#    Form the updated amplitudes using the c-vector. 
#    -----------------------------------------------  
#
#    Form T2old_aa. 
#    -------------- 
#
     PARDO a, i, a1, i1
#
#          REQUEST/GET amplitude data from all 5 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST d0aiai(a,i,a1,i1) a # ziter-5 amplitudes
           REQUEST d1aiai(a,i,a1,i1) a # ziter-4 amplitudes
           REQUEST d2aiai(a,i,a1,i1) a # ziter-3 amplitudes
           REQUEST d3aiai(a,i,a1,i1) a # ziter-2 amplitudes
           REQUEST d4aiai(a,i,a1,i1) a # ziter-1 amplitudes
#
           REQUEST e1aiai(a,i,a1,i1) a # ziter-4 amplitudes
           REQUEST e2aiai(a,i,a1,i1) a # ziter-3 amplitudes
           REQUEST e3aiai(a,i,a1,i1) a # ziter-2 amplitudes
           REQUEST e4aiai(a,i,a1,i1) a # ziter-1 amplitudes
           REQUEST e5aiai(a,i,a1,i1) a # ziter-0 amplitudes

           REQUEST             VCONV2AA (a,i,a1,i1) a # Diagonal HBAR elements
           tpppp (a,i,a1,i1) = VCONV2AA (a,i,a1,i1)
#
#          Evaluate the ZDIIS approximant 
#          -----------------------------
#
           taiai  (a,i,a1,i1)  = e1aiai (a,i,a1,i1)
           taiai  (a,i,a1,i1) *= c1

           t2aiai (a,i,a1,i1)  = e2aiai (a,i,a1,i1)
           t2aiai (a,i,a1,i1) *= c2
           taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

           t2aiai (a,i,a1,i1)  = e3aiai (a,i,a1,i1)
           t2aiai (a,i,a1,i1) *= c3     
           taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

           t2aiai (a,i,a1,i1)  = e4aiai (a,i,a1,i1)
           t2aiai (a,i,a1,i1) *= c4     
           taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

           t2aiai (a,i,a1,i1)  = e5aiai (a,i,a1,i1)
           t2aiai (a,i,a1,i1) *= c5     
           taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

           taiai  (a,i,a1,i1) *=  0.75 # To match ACESII
           EXECUTE  APPLY_DEN4_NODIAG  taiai  tpppp
#
#
#          Add to the associated residual vectors
#
#
           t2aiai (a,i,a1,i1)  = d0aiai (a,i,a1,i1)
           t2aiai (a,i,a1,i1) *= c1
           taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

           t2aiai (a,i,a1,i1)  = d1aiai (a,i,a1,i1)
           t2aiai (a,i,a1,i1) *= c2
           taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

           t2aiai (a,i,a1,i1)  = d2aiai (a,i,a1,i1)
           t2aiai (a,i,a1,i1) *= c3
           taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

           t2aiai (a,i,a1,i1)  = d3aiai (a,i,a1,i1)
           t2aiai (a,i,a1,i1) *= c4
           taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

           t2aiai (a,i,a1,i1)  = d4aiai (a,i,a1,i1)
           t2aiai (a,i,a1,i1) *= c5
           taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

           PREPARE  VCACT2AA (a,i,a1,i1) = taiai (a,i,a1,i1)
#
     ENDPARDO a, i, a1, i1

     PARDO b, j, b1, j1
#
#          REQUEST/GET amplitude data from all 5 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST d0bjbj(b,j,b1,j1) b # ziter-5 amplitudes
           REQUEST d1bjbj(b,j,b1,j1) b # ziter-4 amplitudes
           REQUEST d2bjbj(b,j,b1,j1) b # ziter-3 amplitudes
           REQUEST d3bjbj(b,j,b1,j1) b # ziter-2 amplitudes
           REQUEST d4bjbj(b,j,b1,j1) b # ziter-1 amplitudes
#
           REQUEST e1bjbj(b,j,b1,j1) b # ziter-4 amplitudes
           REQUEST e2bjbj(b,j,b1,j1) b # ziter-3 amplitudes
           REQUEST e3bjbj(b,j,b1,j1) b # ziter-2 amplitudes
           REQUEST e4bjbj(b,j,b1,j1) b # ziter-1 amplitudes
           REQUEST e5bjbj(b,j,b1,j1) b # ziter-0 amplitudes

           REQUEST             VCONV2BB (b,j,b1,j1) b # Diagonal HBAR elements
           tqqqq (b,j,b1,j1) = VCONV2BB (b,j,b1,j1)
#
#          Evaluate the ZDIIS approximant 
#          -----------------------------
#
           tbjbj  (b,j,b1,j1)  = e1bjbj (b,j,b1,j1)
           tbjbj  (b,j,b1,j1) *= c1

           t2bjbj (b,j,b1,j1)  = e2bjbj (b,j,b1,j1)
           t2bjbj (b,j,b1,j1) *= c2
           tbjbj  (b,j,b1,j1) += t2bjbj (b,j,b1,j1)

           t2bjbj (b,j,b1,j1)  = e3bjbj (b,j,b1,j1)
           t2bjbj (b,j,b1,j1) *= c3     
           tbjbj  (b,j,b1,j1) += t2bjbj (b,j,b1,j1)

           t2bjbj (b,j,b1,j1)  = e4bjbj (b,j,b1,j1)
           t2bjbj (b,j,b1,j1) *= c4     
           tbjbj  (b,j,b1,j1) += t2bjbj (b,j,b1,j1)

           t2bjbj (b,j,b1,j1)  = e5bjbj (b,j,b1,j1)
           t2bjbj (b,j,b1,j1) *= c5     
           tbjbj  (b,j,b1,j1) += t2bjbj (b,j,b1,j1)

           tbjbj  (b,j,b1,j1) *=  0.75 # To match ACESII
           EXECUTE  APPLY_DEN4_NODIAG  tbjbj  tqqqq
#
#
#          Add to the associated residual vectors
#
#
           t2bjbj (b,j,b1,j1)  = d0bjbj (b,j,b1,j1)
           t2bjbj (b,j,b1,j1) *= c1
           tbjbj  (b,j,b1,j1) += t2bjbj (b,j,b1,j1)

           t2bjbj (b,j,b1,j1)  = d1bjbj (b,j,b1,j1)
           t2bjbj (b,j,b1,j1) *= c2
           tbjbj  (b,j,b1,j1) += t2bjbj (b,j,b1,j1)

           t2bjbj (b,j,b1,j1)  = d2bjbj (b,j,b1,j1)
           t2bjbj (b,j,b1,j1) *= c3
           tbjbj  (b,j,b1,j1) += t2bjbj (b,j,b1,j1)

           t2bjbj (b,j,b1,j1)  = d3bjbj (b,j,b1,j1)
           t2bjbj (b,j,b1,j1) *= c4
           tbjbj  (b,j,b1,j1) += t2bjbj (b,j,b1,j1)

           t2bjbj (b,j,b1,j1)  = d4bjbj (b,j,b1,j1)
           t2bjbj (b,j,b1,j1) *= c5
           tbjbj  (b,j,b1,j1) += t2bjbj (b,j,b1,j1)

           PREPARE  VCACT2BB (b,j,b1,j1) = tbjbj (b,j,b1,j1)
#
     ENDPARDO b, j, b1, j1
#
#    Form T2old_ab. 
#    -------------- 
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 5 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST D0aibj(a,i,b,j) a # ziter-5 amplitudes
           REQUEST D1aibj(a,i,b,j) a # ziter-4 amplitudes
           REQUEST D2aibj(a,i,b,j) a # ziter-3 amplitudes
           REQUEST D3aibj(a,i,b,j) a # ziter-2 amplitudes
           REQUEST D4aibj(a,i,b,j) a # ziter-1 amplitudes
#
           REQUEST e1aibj(a,i,b,j) a # ziter-4 amplitudes
           REQUEST e2aibj(a,i,b,j) a # ziter-3 amplitudes
           REQUEST e3aibj(a,i,b,j) a # ziter-2 amplitudes
           REQUEST e4aibj(a,i,b,j) a # ziter-1 amplitudes
           REQUEST e5aibj(a,i,b,j) a # ziter-0 amplitudes

           REQUEST           VCONV2AB (a,i,b,j) a
           tppqq (a,i,b,j) = VCONV2AB (a,i,b,j) 
#          
#          Evaluate the ZDIIS approximant 
#          -----------------------------
#    
           taibj  (a,i,b,j)  = e1aibj (a,i,b,j)
           taibj  (a,i,b,j) *= c1
           
           t2aibj (a,i,b,j)  = e2aibj (a,i,b,j)
           t2aibj (a,i,b,j) *= c2
           taibj  (a,i,b,j) += t2aibj (a,i,b,j)

           t2aibj (a,i,b,j)  = e3aibj (a,i,b,j)
           t2aibj (a,i,b,j) *= c3
           taibj  (a,i,b,j) += t2aibj (a,i,b,j)

           t2aibj (a,i,b,j)  = e4aibj (a,i,b,j)
           t2aibj (a,i,b,j) *= c4
           taibj  (a,i,b,j) += t2aibj (a,i,b,j)

           t2aibj (a,i,b,j)  = e5aibj (a,i,b,j)
           t2aibj (a,i,b,j) *= c5
           taibj  (a,i,b,j) += t2aibj (a,i,b,j)

           taibj  (a,i,b,j) *=  0.75 # To match ACESII
           EXECUTE  APPLY_DEN4  taibj  tppqq
#
#
#          Add to the associated residual vectors
#
#
           t2aibj (a,i,b,j)  = d0aibj (a,i,b,j)
           t2aibj (a,i,b,j) *= c1
           taibj  (a,i,b,j) += t2aibj (a,i,b,j)

           t2aibj (a,i,b,j)  = d1aibj (a,i,b,j)
           t2aibj (a,i,b,j) *= c2
           taibj  (a,i,b,j) += t2aibj (a,i,b,j)

           t2aibj (a,i,b,j)  = d2aibj (a,i,b,j)
           t2aibj (a,i,b,j) *= c3
           taibj  (a,i,b,j) += t2aibj (a,i,b,j)

           t2aibj (a,i,b,j)  = d3aibj (a,i,b,j)
           t2aibj (a,i,b,j) *= c4
           taibj  (a,i,b,j) += t2aibj (a,i,b,j)

           t2aibj (a,i,b,j)  = d4aibj (a,i,b,j)
           t2aibj (a,i,b,j) *= c5
           taibj  (a,i,b,j) += t2aibj (a,i,b,j)

           PREPARE  VCACT2AB (a,i,b,j) = taibj (a,i,b,j)
#
     ENDPARDO a, i, b, j
#
#    Form tai_old. 
#    ------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 5 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET D0ai(a,i)     # ziter-5 amplitudes  
           GET D1ai(a,i)     # ziter-4 amplitudes  
           GET D2ai(a,i)     # ziter-3 amplitudes  
           GET D3ai(a,i)     # ziter-2 amplitudes  
           GET D4ai(a,i)     # ziter-1 amplitudes  
#
           GET e1ai(a,i)     # ziter-4 amplitudes  
           GET e2ai(a,i)     # ziter-3 amplitudes  
           GET e3ai(a,i)     # ziter-2 amplitudes  
           GET e4ai(a,i)     # ziter-1 amplitudes  
           GET e5ai(a,i)     # ziter-0 amplitudes  

           GET         VCONV1A (a,i)
           tpp (a,i) = VCONV1A (a,i)
#
#          Evaluate the ZDIIS approximant 
#          -----------------------------
#    
           tai  (a,i)  = e1ai (a,i)
           tai  (a,i) *= c1

           t2ai (a,i)  = e2ai (a,i)
           t2ai (a,i) *= c2
           tai  (a,i) += t2ai (a,i)

           t2ai (a,i)  = e3ai (a,i)
           t2ai (a,i) *= c3
           tai  (a,i) += t2ai (a,i)

           t2ai (a,i)  = e4ai (a,i)
           t2ai (a,i) *= c4
           tai  (a,i) += t2ai (a,i)

           t2ai (a,i)  = e5ai (a,i)
           t2ai (a,i) *= c5
           tai  (a,i) += t2ai (a,i)

           tai  (a,i) *=  0.75 # To match ACESII
           EXECUTE  APPLY_DEN2  tai  tpp
#
#
#          Add to the associated residual vectors
#
#    
           t2ai (a,i)  = d0ai (a,i)
           t2ai (a,i) *= c1
           tai  (a,i) += t2ai (a,i)

           t2ai (a,i)  = d1ai (a,i)
           t2ai (a,i) *= c2  
           tai  (a,i) += t2ai (a,i)

           t2ai (a,i)  = d2ai (a,i)
           t2ai (a,i) *= c3
           tai  (a,i) += t2ai (a,i)

           t2ai (a,i)  = d3ai (a,i)
           t2ai (a,i) *= c4
           tai  (a,i) += t2ai (a,i)

           t2ai (a,i)  = d4ai (a,i)
           t2ai (a,i) *= c5
           tai  (a,i) += t2ai (a,i)

           PUT  VCACT1A (a,i) = tai (a,i)
#
     ENDPARDO a, i  
#
     PARDO b, j  
#
#          REQUEST/GET amplitude data from all 5 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET D0bj(b,j)     # ziter-5 amplitudes  
           GET D1bj(b,j)     # ziter-4 amplitudes  
           GET D2bj(b,j)     # ziter-3 amplitudes  
           GET D3bj(b,j)     # ziter-2 amplitudes  
           GET D4bj(b,j)     # ziter-1 amplitudes  
#
           GET e1bj(b,j)     # ziter-4 amplitudes  
           GET e2bj(b,j)     # ziter-3 amplitudes  
           GET e3bj(b,j)     # ziter-2 amplitudes  
           GET e4bj(b,j)     # ziter-1 amplitudes  
           GET e5bj(b,j)     # ziter-0 amplitudes  

           GET         VCONV1B (b,j)
           tqq (b,j) = VCONV1B (b,j)
#
#          Evaluate the ZDIIS approximant 
#          -----------------------------
#    
           tbj  (b,j)  = e1bj (b,j)
           tbj  (b,j) *= c1

           t2bj (b,j)  = e2bj (b,j)
           t2bj (b,j) *= c2
           tbj  (b,j) += t2bj (b,j)

           t2bj (b,j)  = e3bj (b,j)
           t2bj (b,j) *= c3
           tbj  (b,j) += t2bj (b,j)

           t2bj (b,j)  = e4bj (b,j)
           t2bj (b,j) *= c4
           tbj  (b,j) += t2bj (b,j)

           t2bj (b,j)  = e5bj (b,j)
           t2bj (b,j) *= c5
           tbj  (b,j) += t2bj (b,j)

           tbj  (b,j) *=  0.75 # To match ACESII
           EXECUTE  APPLY_DEN2  tbj  tqq
#
#
#          Add to the associated residual vectors
#
#    
           t2bj (b,j)  = d0bj (b,j)
           t2bj (b,j) *= c1
           tbj  (b,j) += t2bj (b,j)

           t2bj (b,j)  = d1bj (b,j)
           t2bj (b,j) *= c2  
           tbj  (b,j) += t2bj (b,j)

           t2bj (b,j)  = d2bj (b,j)
           t2bj (b,j) *= c3
           tbj  (b,j) += t2bj (b,j)

           t2bj (b,j)  = d3bj (b,j)
           t2bj (b,j) *= c4
           tbj  (b,j) += t2bj (b,j)

           t2bj (b,j)  = d4bj (b,j)
           t2bj (b,j) *= c5
           tbj  (b,j) += t2bj (b,j)

           PUT  VCACT1B (b,j) = tbj (b,j)
#
     ENDPARDO b, j  

     execute sip_barrier 
     execute server_barrier 
#
     ENDPROC ZDIIS4  
#    ------------- 
#
# ---------------------------------------------------------------------------------
#
     PROC MOVE4_ZETA
#    ----------
     execute server_barrier
     execute sip_barrier
#
#    0 --> 1
#    ---------------------------------------------------
#
     execute array_copy d1aiai d0aiai
     execute array_copy d1bjbj d0bjbj
     execute array_copy d1aibj d0aibj
#
#
#    2 --> 1
#    ---------------------------------------------------
#
     execute array_copy e2aiai e1aiai
     execute array_copy e2bjbj e1bjbj
     execute array_copy e2aibj e1aibj
     execute array_copy d2aiai d1aiai
     execute array_copy d2bjbj d1bjbj
     execute array_copy d2aibj d1aibj
#
#    3 --> 2
#    ---------------------------------------------------
#
     execute array_copy e3aiai e2aiai
     execute array_copy e3bjbj e2bjbj
     execute array_copy e3aibj e2aibj
     execute array_copy d3aiai d2aiai
     execute array_copy d3bjbj d2bjbj
     execute array_copy d3aibj d2aibj
#
#
#    4 --> 3
#    ---------------------------------------------------
#
     execute array_copy e4aiai e3aiai
     execute array_copy e4bjbj e3bjbj
     execute array_copy e4aibj e3aibj
     execute array_copy d4aiai d3aiai
     execute array_copy d4bjbj d3bjbj
     execute array_copy d4aibj d3aibj
#
#    5 --> 4
#    ---------------------------------------------------
#
     execute array_copy e5aiai e4aiai
     execute array_copy e5bjbj e4bjbj
     execute array_copy e5aibj e4aibj
#
     execute sip_barrier
#
     PARDO a, i
           GET d1ai(a,i)
           PUT d0ai(a,i) = d1ai(a,i)
     ENDPARDO a, i

     PARDO b, j
           GET d1bj(b,j)
           PUT d0bj(b,j) = d1bj(b,j)
     ENDPARDO b, j
#
     execute sip_barrier
#
     PARDO a, i
           GET e2ai(a,i)
           PUT e1ai(a,i) = e2ai(a,i)
     ENDPARDO a, i
#
     PARDO a, i
           GET d2ai(a,i)
           PUT d1ai(a,i) = d2ai(a,i)
     ENDPARDO a, i
#
     PARDO b, j
           GET e2bj(b,j)
           PUT e1bj(b,j) = e2bj(b,j)
     ENDPARDO b, j
#
     PARDO b, j
           GET d2bj(b,j)
           PUT d1bj(b,j) = d2bj(b,j)
     ENDPARDO b, j

     execute sip_barrier
#
     PARDO a, i
           GET e3ai(a,i)
           PUT e2ai(a,i) = e3ai(a,i)
     ENDPARDO a, i
#
     PARDO a, i
           GET d3ai(a,i)
           PUT d2ai(a,i) = d3ai(a,i)
     ENDPARDO a, i
#
     PARDO b, j
           GET e3bj(b,j)
           PUT e2bj(b,j) = e3bj(b,j)
     ENDPARDO b, j
#
     PARDO b, j
           GET d3bj(b,j)
           PUT d2bj(b,j) = d3bj(b,j)
     ENDPARDO b, j

     execute sip_barrier
#
     PARDO a, i
           GET e4ai(a,i)
           PUT e3ai(a,i) = e4ai(a,i)
     ENDPARDO a, i
#
     PARDO a, i
           GET d4ai(a,i)
           PUT d3ai(a,i) = d4ai(a,i)
     ENDPARDO a, i
#
     PARDO b, j
           GET e4bj(b,j) 
           PUT e3bj(b,j) = e4bj(b,j)
     ENDPARDO b, j
#    
     PARDO b, j
           GET d4bj(b,j) 
           PUT d3bj(b,j) = d4bj(b,j)
     ENDPARDO b, j

     execute sip_barrier
#
     PARDO a, i
           GET e5ai(a,i)
           PUT e4ai(a,i) = e5ai(a,i)
     ENDPARDO a, i
#
     PARDO b, j
           GET e5bj(b,j)
           PUT e4bj(b,j) = e5bj(b,j)
     ENDPARDO b, j
#
     execute server_barrier
#
     ENDPROC MOVE4_ZETA
#    -------------
#
# ---------------------------------------------------------------------------------
#

#------------------------------------------------------------------------
#
#     ---------------
      PROC  MOVE_ZETA
#     ---------------
#
#
      PARDO  a, a1, i, i1

         REQUEST             VCACT2AA (a,i,a1,i1) a
         taiai (a,i,a1,i1) = VCACT2AA (a,i,a1,i1)

         if ziter == 1
            PREPARE d1aiai(a,i,a1,i1) = taiai(a,i,a1,i1)
         endif
         if ziter == 2
            PREPARE d2aiai(a,i,a1,i1) = Taiai(a,i,a1,i1)
         endif
         if ziter == 3
            PREPARE d3aiai(a,i,a1,i1) = Taiai(a,i,a1,i1)
         endif
         if ziter == 4
            PREPARE d4aiai(a,i,a1,i1) = Taiai(a,i,a1,i1)
         endif
         if ziter >= 5
            PREPARE d4aiai(a,i,a1,i1) = Taiai(a,i,a1,i1)
         endif
      ENDPARDO a, a1, i, i1

      PARDO  b, b1, j, j1

         REQUEST             VCACT2BB (b,j,b1,j1) b
         tbjbj (b,j,b1,j1) = VCACT2BB (b,j,b1,j1)

         if ziter == 1
            PREPARE d1bjbj(b,j,b1,j1) = tbjbj(b,j,b1,j1)
         endif
         if ziter == 2
            PREPARE d2bjbj(b,j,b1,j1) = Tbjbj(b,j,b1,j1)
         endif
         if ziter == 3
            PREPARE d3bjbj(b,j,b1,j1) = Tbjbj(b,j,b1,j1)
         endif
         if ziter == 4
            PREPARE d4bjbj(b,j,b1,j1) = Tbjbj(b,j,b1,j1)
         endif
         if ziter >= 5
            PREPARE d4bjbj(b,j,b1,j1) = Tbjbj(b,j,b1,j1)
         endif 
      ENDPARDO b, b1, j, j1

      PARDO b, a, j, i

         REQUEST           VCACT2AB (a,i,b,j) b
         taibj (a,i,b,j) = VCACT2AB (a,i,b,j)

         if ziter == 1
            PREPARE d1aibj(a,i,b,j) = taibj(a,i,b,j)
         endif
         if ziter == 2
            PREPARE d2aibj(a,i,b,j) = Taibj(a,i,b,j)
         endif
         if ziter == 3
            PREPARE d3aibj(a,i,b,j) = Taibj(a,i,b,j)
         endif
         if ziter == 4
            PREPARE d4aibj(a,i,b,j) = Taibj(a,i,b,j)
         endif
         if ziter >= 5
            PREPARE d4aibj(a,i,b,j) = Taibj(a,i,b,j)
         endif
      ENDPARDO b, a, j, i

      PARDO a, i

         GET         VCACT1A (a,i)
         tai (a,i) = VCACT1A (a,i)

         if ziter == 1
            PUT d1ai(a,i) = tai(a,i)
         endif
         if ziter == 2
            PUT d2ai(a,i) = Tai(a,i)
         endif
         if ziter == 3
            PUT d3ai(a,i) = Tai(a,i)
         endif
         if ziter == 4
            PUT d4ai(a,i) = Tai(a,i)
         endif
         if ziter >= 5
            PUT d4ai(a,i) = Tai(a,i)
         endif
      ENDPARDO a, i

      PARDO b, j

         GET         VCACT1B (b,j)
         tbj (b,j) = VCACT1B (b,j)

         if ziter == 1
            PUT d1bj(b,j) = tbj(b,j)
         endif
         if ziter == 2
            PUT d2bj(b,j) = Tbj(b,j)
         endif
         if ziter == 3
            PUT d3bj(b,j) = Tbj(b,j)
         endif
         if ziter == 4
            PUT d4bj(b,j) = Tbj(b,j)
         endif
         if ziter >= 5
            PUT d4bj(b,j) = Tbj(b,j)
         endif 
      ENDPARDO b, j

      EXECUTE  SERVER_BARRIER
#
#
#     ...ready!
#
#
      ENDPROC  MOVE_ZETA
#------------------------------------------------------------------------



#------------------------------------------------------------------------
#
#     -----------------
      PROC  UPDATE_ZETA
#     -----------------
#
#
      PARDO  a, i, a1, i1
         REQUEST              VCHACT2AA (a,i,a1,i1) a
         REQUEST              XI2_AA    (a,i,a1,i1) a
         taiai (a,i,a1,i1)  = XI2_AA (a,i,a1,i1)
         taiai (a,i,a1,i1) -= VCHACT2AA (a,i,a1,i1)

         etemp  = taiai (a,i,a1,i1) * taiai (a,i,a1,i1)
         etemp *= 0.25
         esum  += etemp

         if ziter == 1
            PREPARE e1aiai(a,i,a1,i1) = Taiai(a,i,a1,i1)
#
#   Generate Jacobi iterate!
#
            REQUEST               VCONV2AA (a,i,a1,i1) a
            t1aiai (a,i,a1,i1)  = VCONV2AA (a,i,a1,i1)
            EXECUTE  APPLY_DEN4_NODIAG  taiai  t1aiai
            PREPARE  VCACT2AA (a,i,a1,i1) += taiai (a,i,a1,i1)
         endif

         if ziter == 2
            PREPARE e2aiai(a,i,a1,i1) = Taiai(a,i,a1,i1)
         endif

         if ziter == 3
            PREPARE e3aiai(a,i,a1,i1) = Taiai(a,i,a1,i1)
         endif

         if ziter == 4
            PREPARE e4aiai(a,i,a1,i1) = Taiai(a,i,a1,i1)
         endif

         if ziter >= 5
            PREPARE e5aiai(a,i,a1,i1) = Taiai(a,i,a1,i1)
         endif
      ENDPARDO a, i, a1, i1

      PARDO  b, j, b1, j1
         REQUEST              VCHACT2BB (b,j,b1,j1) b
         REQUEST              XI2_BB    (b,j,b1,j1) b
         tbjbj (b,j,b1,j1)  = XI2_BB (b,j,b1,j1)
         tbjbj (b,j,b1,j1) -= VCHACT2BB (b,j,b1,j1)

         etemp  = tbjbj (b,j,b1,j1) * tbjbj (b,j,b1,j1)
         etemp *= 0.25
         esum  += etemp

         if ziter == 1
            PREPARE e1bjbj(b,j,b1,j1) = Tbjbj(b,j,b1,j1)
#
#   Generate Jacobi iterate!
#
            REQUEST               VCONV2BB (b,j,b1,j1) b
            t1bjbj (b,j,b1,j1)  = VCONV2BB (b,j,b1,j1)
            EXECUTE  APPLY_DEN4_NODIAG  tbjbj  t1bjbj
            PREPARE  VCACT2BB (b,j,b1,j1) += tbjbj (b,j,b1,j1)
         endif

         if ziter == 2
            PREPARE e2bjbj(b,j,b1,j1) = Tbjbj(b,j,b1,j1)
         endif

         if ziter == 3
            PREPARE e3bjbj(b,j,b1,j1) = Tbjbj(b,j,b1,j1)
         endif

         if ziter == 4
            PREPARE e4bjbj(b,j,b1,j1) = Tbjbj(b,j,b1,j1)
         endif

         if ziter >= 5
            PREPARE e5bjbj(b,j,b1,j1) = Tbjbj(b,j,b1,j1)
         endif
      ENDPARDO b, j, b1, j1

      PARDO  a, i, b, j
         REQUEST            VCHACT2AB (a,i,b,j) a
         REQUEST            XI2_AB    (a,i,b,j) a
         taibj (a,i,b,j)  = XI2_AB    (a,i,b,j)
         taibj (a,i,b,j) -= VCHACT2AB (a,i,b,j)

         etemp  = taibj (a,i,b,j) * taibj (a,i,b,j)
         esum  += etemp

         if ziter == 1
            PREPARE  e1aibj   (a,i,b,j)  = Taibj (a,i,b,j)
#
#   Generate Jacobi iterate!
#
            REQUEST             VCONV2AB (a,i,b,j) a
            t1aibj (a,i,b,j)  = VCONV2AB (a,i,b,j)
            EXECUTE  APPLY_DEN4  taibj  t1aibj
            PREPARE  VCACT2AB (a,i,b,j) += taibj (a,i,b,j)
         endif

         if ziter == 2
            PREPARE e2aibj(a,i,b,j) = Taibj(a,i,b,j)
         endif

         if ziter == 3
            PREPARE e3aibj(a,i,b,j) = Taibj(a,i,b,j)
         endif

         if ziter == 4
            PREPARE e4aibj(a,i,b,j) = Taibj(a,i,b,j)
         endif

         if ziter >= 5
            PREPARE e5aibj(a,i,b,j) = Taibj(a,i,b,j)
         endif
      ENDPARDO  a, i, b, j

      PARDO  a, i
         GET          VCHACT1A (a,i)
         GET          XI1_A    (a,i)
         tai (a,i)  = XI1_A    (a,i)
         tai (a,i) -= VCHACT1A (a,i)
         etemp  = tai (a,i) * tai (a,i)
         esum  += etemp

         if ziter == 1
            PUT  e1ai    (a,i)  = Tai  (a,i)
#
#   Generate Jacobi iterate!
#
            GET          VCONV1A (a,i)
            t1ai (a,i) = VCONV1A (a,i)
            EXECUTE  APPLY_DEN2  tai  t1ai
            PUT  VCACT1A (a,i) += tai (a,i)
         endif

         if ziter == 2
            PUT e2ai(a,i) = Tai(a,i)
         endif

         if ziter == 3
            PUT e3ai(a,i) = Tai(a,i)
         endif

         if ziter == 4
            PUT e4ai(a,i) = Tai(a,i)
         endif

         if ziter >= 5
            PUT e5ai(a,i) = Tai(a,i)
         endif
      ENDPARDO  a, i

      PARDO  b, j
         GET          VCHACT1B (b,j)
         GET          XI1_B    (b,j)
         tbj (b,j)  = XI1_B    (b,j)
         tbj (b,j) -= VCHACT1B (b,j)
         etemp  = tbj (b,j) * tbj (b,j)
         esum  += etemp

         if ziter == 1
            PUT  e1bj    (b,j)  = Tbj  (b,j)
#
#   Generate Jacobi iterate!
#
            GET          VCONV1B (b,j)
            t1bj (b,j) = VCONV1B (b,j)
            EXECUTE  APPLY_DEN2  tbj  t1bj
            PUT  VCACT1B (b,j) += tbj (b,j)
         endif

         if ziter == 2
            PUT e2bj(b,j) = Tbj(b,j)
         endif

         if ziter == 3
            PUT e3bj(b,j) = Tbj(b,j)
         endif

         if ziter == 4
            PUT e4bj(b,j) = Tbj(b,j)
         endif

         if ziter >= 5
            PUT e5bj(b,j) = Tbj(b,j)
         endif
      ENDPARDO  b, j

      EXECUTE  SERVER_BARRIER

      COLLECTIVE  zerr_jacob += esum
      EXECUTE  SIP_BARRIER
      EXECUTE  SQUARE_ROOT  zerr_jacob  ONEHALF

      EXECUTE  SERVER_BARRIER
#
#
#     ...ready!
#
#
      ENDPROC  UPDATE_ZETA
#------------------------------------------------------------------------



#------------------------------------------------------------------------
#
#     ----------------
      PROC  SOLVE_ZETA
#     ----------------
#
#
#
      CREATE  D0ai
      CREATE  D1ai
      CREATE  D2ai
      CREATE  D3ai
      CREATE  D4ai
      CREATE  D5ai

      CREATE  D0bj
      CREATE  D1bj
      CREATE  D2bj
      CREATE  D3bj
      CREATE  D4bj
      CREATE  D5bj

      CREATE  e1ai
      CREATE  e2ai
      CREATE  e3ai
      CREATE  e4ai
      CREATE  e5ai

      CREATE  e1bj
      CREATE  e2bj
      CREATE  e3bj
      CREATE  e4bj
      CREATE  e5bj

      CALL  CONVER
      EXECUTE  SIP_BARRIER
#
#          Convergence criteria
#
#
      zcrit = eom_tol
      zcrit *= 0.10
#
#
#                                        -1
#          Generate initial guess XI * Hd
#
#
      PARDO  a, i, a1, i1
         REQUEST               XI2_AA   (a,i,a1,i1) a
         REQUEST               VCONV2AA (a,i,a1,i1) a
         t1aiai (a,i,a1,i1)  = XI2_AA   (a,i,a1,i1)
         t2aiai (a,i,a1,i1)  = VCONV2AA (a,i,a1,i1)
         EXECUTE  APPLY_DEN4_NODIAG  t1aiai  t2aiai
         PREPARE  VCACT2AA (a,i,a1,i1) = t1aiai (a,i,a1,i1)
         PREPARE  D0aiai   (a,i,a1,i1) = t1aiai (a,i,a1,i1)
      ENDPARDO  a, i, a1, i1

      PARDO  b, j, b1, j1
         REQUEST               XI2_BB   (b,j,b1,j1) b
         REQUEST               VCONV2BB (b,j,b1,j1) b
         t1bjbj (b,j,b1,j1)  = XI2_BB   (b,j,b1,j1)
         t2bjbj (b,j,b1,j1)  = VCONV2BB (b,j,b1,j1)
         EXECUTE  APPLY_DEN4_NODIAG  t1bjbj  t2bjbj
         PREPARE  VCACT2BB (b,j,b1,j1) = t1bjbj (b,j,b1,j1)
         PREPARE  D0bjbj   (b,j,b1,j1) = t1bjbj (b,j,b1,j1)
      ENDPARDO  b, j, b1, j1

      PARDO  a, i, b1, j1
         REQUEST               XI2_AB   (a,i,b1,j1) a
         REQUEST               VCONV2AB (a,i,b1,j1) a
         t1aibj (a,i,b1,j1)  = XI2_AB   (a,i,b1,j1)
         t2aibj (a,i,b1,j1)  = VCONV2AB (a,i,b1,j1)
         EXECUTE  APPLY_DEN4  t1aibj  t2aibj
         PREPARE  VCACT2AB (a,i,b1,j1) = t1aibj (a,i,b1,j1)
         PREPARE  D0aibj   (a,i,b1,j1) = t1aibj (a,i,b1,j1)
      ENDPARDO  a, i, b1, j1

      PARDO  a, i
         GET           XI1_A   (a,i)
         GET           VCONV1A (a,i)
         t1ai (a,i)  = XI1_A   (a,i)
         t2ai (a,i)  = VCONV1A (a,i)
         EXECUTE  APPLY_DEN2  t1ai  t2ai
         PUT  VCACT1A (a,i) = t1ai (a,i)
         PUT  D0ai    (a,i) = t1ai (a,i)
      ENDPARDO  a, i

      PARDO  b, j
         GET           XI1_B   (b,j)
         GET           VCONV1B (b,j)
         t1bj (b,j)  = XI1_B   (b,j)
         t2bj (b,j)  = VCONV1B (b,j)
         EXECUTE  APPLY_DEN2  t1bj  t2bj
         PUT  VCACT1B (b,j) = t1bj (b,j)
         PUT  D0bj    (b,j) = t1bj (b,j)
      ENDPARDO  b, j

      zold = 0.0
      EXECUTE  SERVER_BARRIER

      icount = 0.0
      DO ziter
         icount += 1.0
         EXECUTE  PRINT_SCALAR  icount
#
#
#          Generate new amplitudes!
#
#
         esum = 0.0
         zerr_jacob = 0.0
         zmax_jacob = 0.0

         CALL  HCmult
#
#
#          Update amplitudes!
#
#
         CALL  UPDATE_ZETA
#
#
#          The following ZDIIS routines are slightly modified from 
#          the normal ones in the Coupled Cluster codes.
#
#
         IF ziter == 2
            CALL  ZDIIS1
         ENDIF

         IF ziter == 3
            CALL  ZDIIS2
         ENDIF

         IF ziter == 4
            CALL  ZDIIS3
         ENDIF

         IF ziter >= 5
            CALL  ZDIIS4
            CALL  MOVE4_ZETA
         ENDIF

         CALL  MOVE_ZETA
#
#
#          Check on convergence!
#
#
         IF zerr_jacob < zold
            zdiff = zold - zerr_jacob
            IF zdiff < zcrit
               znorm = 0.0
               esum  = 0.0
               exit # ziter 
            ENDIF
         ENDIF

         IF zerr_jacob > zold
            zdiff = zerr_jacob - zold
            IF zdiff < zcrit
               znorm = 0.0
               esum  = 0.0
               exit # ziter 
            ENDIF
         ENDIF
#
#        Reset zold --> znew
#        
         zold = zerr_jacob
        #EXECUTE  PRINT_SCALAR  zerr_jacob
         EXECUTE  PRINT_SCALAR  zdiff

      ENDDO ziter
#
#
#          Now the Zeta amplitudes are stored in VCACTX (x=1A,2AA,2AB)
#          We're going to prepare them into the Lambda arrays. 
#
#
      znorm = 0.0
      esum  = 0.0
      EXECUTE  SIP_BARRIER

      PARDO  a, i, a1, i1
         REQUEST             VCACT2AA (a,i,a1,i1) i1
         tiaia (i,a,i1,a1) = VCACT2AA (a,i,a1,i1)
         etemp  = tiaia (i,a,i1,a1) * tiaia (i,a,i1,a1)
         etemp *= 0.25
         esum  += etemp
         tiaia (i,a,i1,a1) *= -1.0
         PREPARE  A2old_aa(i,a,i1,a1) = tiaia (i,a,i1,a1)
      ENDPARDO  a, i, a1, i1
      
      PARDO  b, j, b1, j1    
         REQUEST             VCACT2BB (b,j,b1,j1) j1
         tjbjb (j,b,j1,b1) = VCACT2BB (b,j,b1,j1)
         etemp  = tjbjb (j,b,j1,b1) * tjbjb (j,b,j1,b1)
         etemp *= 0.25
         esum  += etemp
         tjbjb (j,b,j1,b1) *= -1.0
         PREPARE  A2old_bb(j,b,j1,b1) = tjbjb (j,b,j1,b1)
      ENDPARDO  b, j, b1, j1

      PARDO  a, i, b, j    
         REQUEST           VCACT2AB (a,i,b,j) j
         tiajb (i,a,j,b) = VCACT2AB (a,i,b,j)
         etemp  = tiajb (i,a,j,b) * tiajb (i,a,j,b)
         esum  += etemp
         tiajb (i,a,j,b) *= -1.0
         PREPARE  A2old_ab (i,a,j,b) = tiajb (i,a,j,b)
      ENDPARDO  a, i, b, j
      
      PARDO  a, i    
         GET         VCACT1A (a,i)
         tia (i,a) = VCACT1A (a,i)
         etemp  = tia (i,a) * tia (i,a)
         esum  += etemp
         tia (i,a) *= -1.0
         PUT  a1a_old (i,a) = tia (i,a)
      ENDPARDO  a, i

      PARDO  b, j    
         GET         VCACT1B (b,j)
         tjb (j,b) = VCACT1B (b,j)
         etemp  = tjb (j,b) * tjb (j,b)
         esum  += etemp
         tjb (j,b) *= -1.0
         PUT  a1b_old (j,b) = tjb (j,b)
      ENDPARDO  b, j

      EXECUTE  SERVER_BARRIER
      COLLECTIVE znorm += esum
      EXECUTE  SIP_BARRIER

      EXECUTE  SQUARE_ROOT   znorm  ONEHALF
      EXECUTE  PRINT_SCALAR  znorm
#
#
#          Free up some memory!
#
#
      DELETE  D0ai
      DELETE  D1ai
      DELETE  D2ai
      DELETE  D3ai
      DELETE  D4ai
      DELETE  D5ai

      DELETE  D0bj
      DELETE  D1bj
      DELETE  D2bj
      DELETE  D3bj
      DELETE  D4bj
      DELETE  D5bj

      DELETE  e1ai
      DELETE  e2ai
      DELETE  e3ai
      DELETE  e4ai
      DELETE  e5ai

      DELETE  e1bj
      DELETE  e2bj
      DELETE  e3bj
      DELETE  e4bj
      DELETE  e5bj
#
#
#     ...ready!
#
#
      ENDPROC  SOLVE_ZETA
#------------------------------------------------------------------------



# --------------------------------------------------------------------------------
#
         PROC UPDATE_DAI 
#        --------------- 
#
         PARDO a, i 
#
               GET        Dnewai_a(a,i) 
               GET        Doldai_a(a,i) 
               Tai(a,i) = Dnewai_a(a,i) 
               execute energy_denominator Tai(a,i) 
               Tai(a,i) -= Doldai_a(a,i) 
#
               if kiter == 1 
                  PUT e1ai(a,i) = tai(a,i) 
               endif 
#
               if kiter == 2 
                  PUT e2ai(a,i) = tai(a,i) 
               endif 
#
               if kiter == 3 
                  PUT e3ai(a,i) = tai(a,i) 
               endif 
#
               if kiter == 4 
                  PUT e4ai(a,i) = tai(a,i) 
               endif 
#
               if kiter >= 5 
                  PUT e5ai(a,i) = tai(a,i) 
               endif 
#
         ENDPARDO a, i 
#
         PARDO b, j 
#
               GET        Dnewai_b(b,j) 
               GET        Doldai_b(b,j) 
               Tbj(b,j) = Dnewai_b(b,j) 
               execute energy_denominator Tbj(b,j) 
               Tbj(b,j) -= Doldai_b(b,j) 
#
               if kiter == 1 
                  PUT e1bj(b,j) = tbj(b,j) 
               endif 
#
               if kiter == 2 
                  PUT e2bj(b,j) = tbj(b,j) 
               endif 
#
               if kiter == 3 
                  PUT e3bj(b,j) = tbj(b,j) 
               endif 
#
               if kiter == 4 
                  PUT e4bj(b,j) = tbj(b,j) 
               endif 
#
               if kiter >= 5 
                  PUT e5bj(b,j) = tbj(b,j) 
               endif 
#
         ENDPARDO b, j 
#
         ENDPROC UPDATE_DAI 
#        ------------------ 
#
# ----------------------------------------------------------------------------------------
# 
# ----------------------------------------------------------------------------------------
#
      PROC MOVE_DAI 
#     ------------- 
#
      PARDO a, i
#
            GET        Doldai_a(a,i)
            tai(a,i) = Doldai_a(a,i)
#
            if kiter == 1
               PUT d1ai(a,i) = tai(a,i)
            endif
#
            if kiter == 2
               PUT d2ai(a,i) = Tai(a,i)
            endif
#
            if kiter == 3
               PUT d3ai(a,i) = Tai(a,i)
            endif
#
            if kiter == 4
               PUT d4ai(a,i) = Tai(a,i)
            endif
#
            if kiter >= 5
               PUT d4ai(a,i) = Tai(a,i)
            endif
#
      ENDPARDO a, i
#
      PARDO b, j
#
            GET        Doldai_b(b,j)
            tbj(b,j) = Doldai_b(b,j)
#
            if kiter == 1
               PUT d1bj(b,j) = tbj(b,j)
            endif
#
            if kiter == 2
               PUT d2bj(b,j) = tbj(b,j)
            endif
#
            if kiter == 3
               PUT d3bj(b,j) = tbj(b,j)
            endif
#
            if kiter == 4
               PUT d4bj(b,j) = tbj(b,j)
            endif
#
            if kiter >= 5
               PUT d4bj(b,j) = tbj(b,j)
            endif
#
      ENDPARDO b, j
#
      ENDPROC MOVE_DAI 
#     ---------------- 
# 
# ----------------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
#
     PROC DIIS1
#    ----------
#
#    Zero out scalars.
#    -----------------
#
     CALL ZERO_DSCALAR
#
#
#    Determine the 'B-matrix'.
#    -------------------------
#
#    Compute contributions due to Dai amplitudes.
#    --------------------------------------------
#
     PARDO a, i
#
#          REQUEST/GET amplitude data from all 2 previous iterations.
#          ----------------------------------------------------------
#
           GET e1ai(a,i)    # kiter-1 amplitudes
           GET e2ai(a,i)    # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,2
#             ---------
#
              etemp = e1ai(a,i)*e1ai(a,i)
              b11  += etemp
#
              etemp = e1ai(a,i)*e2ai(a,i)
              b12  += etemp
#
#             b1x x=2,2
#             ---------
#
              etemp = e2ai(a,i)*e2ai(a,i)
              b22  += etemp
#
     ENDPARDO a, i
#
#    Compute contributions due to Dbj amplitudes.
#    --------------------------------------------
#
     PARDO b, j
#
#          REQUEST/GET amplitude data from all 2 previous iterations.
#          ----------------------------------------------------------
#
           GET e1bj(b,j)    # kiter-1 amplitudes
           GET e2bj(b,j)    # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,2
#             ---------
#
              etemp = e1bj(b,j)*e1bj(b,j)
              b11  += etemp
#
              etemp = e1bj(b,j)*e2bj(b,j)
              b12  += etemp
#
#             b1x x=2,2
#             ---------
#
              etemp = e2bj(b,j)*e2bj(b,j)
              b22  += etemp
#
     ENDPARDO b, j
#
     execute sip_barrier
#
#    Collectively sum B-matrix elements.
#    -----------------------------------
#
     collective Tb11 += b11
     collective Tb12 += b12
     collective Tb22 += b22
#
#    Now the unique elements of the 'B-matrix' have been computed, the array is filled out
#    in the setup_diis.
#    --------------------------------------------------------------------------------------
#
#    Put the elements of the 'B-matrix', which have been computed as scalars into the
#    R-matrix.
#    --------------------------------------------------------------------------------
#
     CALL SETUP_DIIS
#
     execute compute_diis # --> New instruction
#
     c1 = Tb11
     c2 = Tb22
     execute print_scalar c1
     execute print_scalar c2
#
#    Done computing the c-vector.
#    ----------------------------
#
#    Form Dai_old.
#    -------------
#
     PARDO a, i
#
#          REQUEST/GET amplitude data from all 2 previous iterations.
#          ----------------------------------------------------------
#
           GET D0ai(a,i)     # kiter-2 amplitudes
           GET D1ai(a,i)     # kiter-1 amplitudes
#
           GET e1ai(a,i)     # kiter-1 amplitudes
           GET e2ai(a,i)     # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> tai_old.
#          --------------------------------------------------------
#
           t1ai(a,i)     = d0ai(a,i) + e1ai(a,i)
           t1ai(a,i)    *= c1
           tai(a,i)      = t1ai(a,i)
#
           t1ai(a,i)     = d1ai(a,i) + e2ai(a,i)
           t1ai(a,i)    *= c2
           tai(a,i)     += t1ai(a,i)
#
           PUT Doldai_a(a,i) = tai(a,i)
#
     ENDPARDO a, i
#
#    Form Dbj_old.
#    -------------
#
     PARDO b, j
#
#          REQUEST/GET amplitude data from all 2 previous iterations.
#          ----------------------------------------------------------
#
           GET D0bj(b,j)     # kiter-2 amplitudes
           GET D1bj(b,j)     # kiter-1 amplitudes
#
           GET e1bj(b,j)     # kiter-1 amplitudes
           GET e2bj(b,j)     # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> tbj_old.
#          --------------------------------------------------------
#
           t1bj(b,j)     = d0bj(b,j) + e1bj(b,j)
           t1bj(b,j)    *= c1
           tbj(b,j)      = t1bj(b,j)
#
           t1bj(b,j)     = d1bj(b,j) + e2bj(b,j)
           t1bj(b,j)    *= c2
           tbj(b,j)     += t1bj(b,j)
#
           PUT Doldai_b(b,j) = tbj(b,j)
#
     ENDPARDO b, j
#
     execute sip_barrier
#
     ENDPROC DIIS1
#    -------------
#
# ---------------------------------------------------------------------------------
#
     PROC DIIS2
#    ----------
#
#    Zero out scalars.
#    -----------------
#
     CALL ZERO_DSCALAR
#
#
#    Determine the 'B-matrix'.
#    -------------------------
#
#    Compute contributions due to dai amplitudes.
#    --------------------------------------------
#
     PARDO a, i
#
#          REQUEST/GET amplitude data from all 4 previous iterations.
#          ----------------------------------------------------------
#
           GET e1ai(a,i)    # kiter-2 amplitudes
           GET e2ai(a,i)    # kiter-1 amplitudes
           GET e3ai(a,i)    # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,3
#             ---------
#
              etemp = e1ai(a,i)*e1ai(a,i)
              b11  += etemp
#
              etemp = e1ai(a,i)*e2ai(a,i)
              b12  += etemp
#
              etemp = e1ai(a,i)*e3ai(a,i)
              b13  += etemp
#
#             b1x x=2,3
#             ---------
#
              etemp = e2ai(a,i)*e2ai(a,i)
              b22  += etemp
#
              etemp = e2ai(a,i)*e3ai(a,i)
              b23  += etemp
#
#             b1x x=3,3
#             ---------
#
              etemp = e3ai(a,i)*e3ai(a,i)
              b33  += etemp
#
     ENDPARDO a, i
#
#    Compute contributions due to dbj amplitudes.
#    --------------------------------------------
#
     PARDO b, j
#
#          REQUEST/GET amplitude data from all 3 previous iterations.
#          ----------------------------------------------------------
#
           GET e1bj(b,j)    # kiter-2 amplitudes
           GET e2bj(b,j)    # kiter-1 amplitudes
           GET e3bj(b,j)    # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,3
#             ---------
#
              etemp = e1bj(b,j)*e1bj(b,j)
              b11  += etemp
#
              etemp = e1bj(b,j)*e2bj(b,j)
              b12  += etemp
#
              etemp = e1bj(b,j)*e3bj(b,j)
              b13  += etemp
#
#             b1x x=2,3
#             ---------
#
              etemp = e2bj(b,j)*e2bj(b,j)
              b22  += etemp
#
              etemp = e2bj(b,j)*e3bj(b,j)
              b23  += etemp
#
#             b1x x=3,3
#             ---------
#
              etemp = e3bj(b,j)*e3bj(b,j)
              b33  += etemp
#
     ENDPARDO b, j
#
     execute sip_barrier
#
#    Collectively sum B-matrix elements.
#    -----------------------------------
#
     collective Tb11 += b11
     collective Tb12 += b12
     collective Tb13 += b13
     collective Tb22 += b22
     collective Tb23 += b23
     collective Tb33 += b33
#
#    Now the unique elements of the 'B-matrix' have been computed and the array filled out.
#    --------------------------------------------------------------------------------------
#
#    Put the elements of the 'B-matrix', which have been computed as scalars into the
#    R-matrix.
#    --------------------------------------------------------------------------------

     CALL SETUP_DIIS
#
     execute compute_diis # --> New instruction
#
     c1 = Tb11
     c2 = Tb22
     c3 = Tb33
     execute print_scalar c1
     execute print_scalar c2
     execute print_scalar c3
#
#    Done computing the c-vector.
#    ----------------------------
#
#    Form the updated amplitudes using the c-vector.
#    -----------------------#
#    Form Dai_old.
#    -------------
#
     PARDO a, i
#
#          REQUEST/GET amplitude data from all 3 previous iterations.
#          ----------------------------------------------------------
#
           GET D0ai(a,i)     # kiter-3 amplitudes
           GET D1ai(a,i)     # kiter-2 amplitudes
           GET D2ai(a,i)     # kiter-1 amplitudes
#
           GET e1ai(a,i)     # kiter-2 amplitudes
           GET e2ai(a,i)     # kiter-1 amplitudes
           GET e3ai(a,i)     # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> tai_old.
#          --------------------------------------------------------
#
           t1ai(a,i)     = d0ai(a,i) + e1ai(a,i)
           t1ai(a,i)    *= c1
           tai(a,i)      = t1ai(a,i)
#
           t1ai(a,i)     = d1ai(a,i) + e2ai(a,i)
           t1ai(a,i)    *= c2
           tai(a,i)     += t1ai(a,i)
#
           t1ai(a,i)     = d2ai(a,i) + e3ai(a,i)
           t1ai(a,i)    *= c3
           tai(a,i)     += t1ai(a,i)
#
           PUT Doldai_a(a,i) = tai(a,i)
#
     ENDPARDO a, i
#
#    Form tbj_old.
#    -------------
#
     PARDO b, j
#
#          REQUEST/GET amplitude data from all 3 previous iterations.
#          ----------------------------------------------------------
#
           GET D0bj(b,j)     # kiter-3 amplitudes
           GET D1bj(b,j)     # kiter-2 amplitudes
           GET D2bj(b,j)     # kiter-1 amplitudes
#
           GET e1bj(b,j)     # kiter-2 amplitudes
           GET e2bj(b,j)     # kiter-1 amplitudes
           GET e3bj(b,j)     # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> tbj_old.
#          --------------------------------------------------------
#
           t1bj(b,j)     = d0bj(b,j) + e1bj(b,j)
           t1bj(b,j)    *= c1
           tbj(b,j)      = t1bj(b,j)
#
           t1bj(b,j)     = d1bj(b,j) + e2bj(b,j)
           t1bj(b,j)    *= c2
           tbj(b,j)     += t1bj(b,j)
#
           t1bj(b,j)     = d2bj(b,j) + e3bj(b,j)
           t1bj(b,j)    *= c3
           tbj(b,j)     += t1bj(b,j)
#
           PUT Doldai_b(b,j) = tbj(b,j)
#
     ENDPARDO b, j
#
     execute sip_barrier
#
     ENDPROC DIIS2
#    -------------
#
# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
#
     PROC DIIS3
#    ----------
#
#    Zero out scalars.
#    -----------------
#
     CALL ZERO_DSCALAR
#
#
#    Determine the 'B-matrix'.
#    -------------------------
#
#    Compute contributions due to dai amplitudes.
#    --------------------------------------------
#
     PARDO a, i
#
#          REQUEST/GET amplitude data from all 4 previous iterations.
#          ----------------------------------------------------------
#
           GET e1ai(a,i)    # kiter-3 amplitudes
           GET e2ai(a,i)    # kiter-2 amplitudes
           GET e3ai(a,i)    # kiter-1 amplitudes
           GET e4ai(a,i)    # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,4
#             ---------
#
              etemp = e1ai(a,i)*e1ai(a,i)
              b11  += etemp
#
              etemp = e1ai(a,i)*e2ai(a,i)
              b12  += etemp
#
              etemp = e1ai(a,i)*e3ai(a,i)
              b13  += etemp
#
              etemp = e1ai(a,i)*e4ai(a,i)
              b14  += etemp
#
#             b1x x=2,4
#             ---------
#
              etemp = e2ai(a,i)*e2ai(a,i)
              b22  += etemp
#
              etemp = e2ai(a,i)*e3ai(a,i)
              b23  += etemp
#
              etemp = e2ai(a,i)*e4ai(a,i)
              b24  += etemp
#
#             b1x x=3,4
#             ---------
#
              etemp = e3ai(a,i)*e3ai(a,i)
              b33  += etemp
#
              etemp = e3ai(a,i)*e4ai(a,i)
              b34  += etemp
#
#             b1x x=4,4
#             ---------
#
              etemp = e4ai(a,i)*e4ai(a,i)
              b44  += etemp
#
     ENDPARDO a, i
#
#    Compute contributions due to dbj amplitudes.
#    --------------------------------------------
#
     PARDO b, j
#
#          REQUEST/GET amplitude data from all 3 previous iterations.
#          ----------------------------------------------------------
#
           GET e1bj(b,j)    # kiter-3 amplitudes
           GET e2bj(b,j)    # kiter-2 amplitudes
           GET e3bj(b,j)    # kiter-1 amplitudes
           GET e4bj(b,j)    # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,4
#             ---------
#
              etemp = e1bj(b,j)*e1bj(b,j)
              b11  += etemp
#
              etemp = e1bj(b,j)*e2bj(b,j)
              b12  += etemp
#
              etemp = e1bj(b,j)*e3bj(b,j)
              b13  += etemp
#
              etemp = e1bj(b,j)*e4bj(b,j)
              b14  += etemp
#
#             b1x x=2,4
#             ---------
#
              etemp = e2bj(b,j)*e2bj(b,j)
              b22  += etemp
#
              etemp = e2bj(b,j)*e3bj(b,j)
              b23  += etemp
#
              etemp = e2bj(b,j)*e4bj(b,j)
              b24  += etemp
#
#             b1x x=3,4
#             ---------
#
              etemp = e3bj(b,j)*e3bj(b,j)
              b33  += etemp
#
              etemp = e3bj(b,j)*e4bj(b,j)
              b34  += etemp
#
#             b1x x=4,4
#             ---------
#
              etemp = e4bj(b,j)*e4bj(b,j)
              b44  += etemp
#
     ENDPARDO b, j
#
     execute sip_barrier
#
#    Collectively sum B-matrix elements.
#    -----------------------------------
#
     collective Tb11 += b11
     collective Tb12 += b12
     collective Tb13 += b13
     collective Tb14 += b14
     collective Tb22 += b22
     collective Tb23 += b23
     collective Tb24 += b24
     collective Tb33 += b33
     collective Tb34 += b34
     collective Tb44 += b44
#
#    Now the unique elements of the 'B-matrix' have been computed and the array filled out.
#    --------------------------------------------------------------------------------------
#
#    Put the elements of the 'B-matrix', which have been computed as scalars into the
#    R-matrix.
#    --------------------------------------------------------------------------------

     CALL SETUP_DIIS
#
     execute compute_diis # --> New instruction
#
     c1 = Tb11
     c2 = Tb22
     c3 = Tb33
     c4 = Tb44
     execute print_scalar c1
     execute print_scalar c2
     execute print_scalar c3
     execute print_scalar c4
#
#    Done computing the c-vector.
#    ----------------------------
#
#    Form the updated amplitudes using the c-vector.
#    -----------------------#
#
#    Form Dai_old.
#    -------------
#
     PARDO a, i
#
#          REQUEST/GET amplitude data from all 3 previous iterations.
#          ----------------------------------------------------------
#
           GET D0ai(a,i)     # kiter-4 amplitudes
           GET D1ai(a,i)     # kiter-3 amplitudes
           GET D2ai(a,i)     # kiter-2 amplitudes
           GET D3ai(a,i)     # kiter-1 amplitudes
#
           GET e1ai(a,i)     # kiter-3 amplitudes
           GET e2ai(a,i)     # kiter-2 amplitudes
           GET e3ai(a,i)     # kiter-1 amplitudes
           GET e4ai(a,i)     # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> tai_old.
#          --------------------------------------------------------
#
           t1ai(a,i)     = d0ai(a,i) + e1ai(a,i)
           t1ai(a,i)    *= c1
           tai(a,i)      = t1ai(a,i)
#
           t1ai(a,i)     = d1ai(a,i) + e2ai(a,i)
           t1ai(a,i)    *= c2
           tai(a,i)     += t1ai(a,i)
#
           t1ai(a,i)     = d2ai(a,i) + e3ai(a,i)
           t1ai(a,i)    *= c3
           tai(a,i)     += t1ai(a,i)
#
           t1ai(a,i)     = d3ai(a,i) + e4ai(a,i)
           t1ai(a,i)    *= c4
           tai(a,i)     += t1ai(a,i)
#
           PUT Doldai_a(a,i) = tai(a,i)
#
     ENDPARDO a, i
#
#    Form tbj_old.
#    -------------
#
     PARDO b, j
#
#          REQUEST/GET amplitude data from all 3 previous iterations.
#          ----------------------------------------------------------
#
           GET D0bj(b,j)     # kiter-4 amplitudes
           GET D1bj(b,j)     # kiter-3 amplitudes
           GET D2bj(b,j)     # kiter-2 amplitudes
           GET D3bj(b,j)     # kiter-1 amplitudes
#
           GET e1bj(b,j)     # kiter-3 amplitudes
           GET e2bj(b,j)     # kiter-2 amplitudes
           GET e3bj(b,j)     # kiter-1 amplitudes
           GET e4bj(b,j)     # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> tbj_old.
#          --------------------------------------------------------
#
           t1bj(b,j)     = d0bj(b,j) + e1bj(b,j)
           t1bj(b,j)    *= c1
           tbj(b,j)      = t1bj(b,j)
#
           t1bj(b,j)     = d1bj(b,j) + e2bj(b,j)
           t1bj(b,j)    *= c2
           tbj(b,j)     += t1bj(b,j)
#
           t1bj(b,j)     = d2bj(b,j) + e3bj(b,j)
           t1bj(b,j)    *= c3
           tbj(b,j)     += t1bj(b,j)
#
           t1bj(b,j)     = d3bj(b,j) + e4bj(b,j)
           t1bj(b,j)    *= c4
           tbj(b,j)     += t1bj(b,j)
#
           PUT Doldai_b(b,j) = tbj(b,j)
#
     ENDPARDO b, j
#
     execute sip_barrier
#
     ENDPROC DIIS3
#    -------------
#
# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
#
     PROC DIIS4
#    ----------
#
#    Zero out scalars.
#    -----------------
#
     CALL ZERO_DSCALAR
#
#
#    Determine the 'B-matrix'.
#    -------------------------
#
#    Compute contributions due to dai amplitudes.
#    --------------------------------------------
#
     PARDO a, i
#
#          REQUEST/GET amplitude data from all 4 previous iterations.
#          ----------------------------------------------------------
#
           GET e1ai(a,i)    # kiter-4 amplitudes
           GET e2ai(a,i)    # kiter-3 amplitudes
           GET e3ai(a,i)    # kiter-2 amplitudes
           GET e4ai(a,i)    # kiter-1 amplitudes
           GET e5ai(a,i)    # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,5
#             ---------
#
              etemp = e1ai(a,i)*e1ai(a,i)
              b11  += etemp
#
              etemp = e1ai(a,i)*e2ai(a,i)
              b12  += etemp
#
              etemp = e1ai(a,i)*e3ai(a,i)
              b13  += etemp
#
              etemp = e1ai(a,i)*e4ai(a,i)
              b14  += etemp
#
              etemp = e1ai(a,i)*e5ai(a,i)
              b15  += etemp
#
#             b1x x=2,5
#             ---------
#
              etemp = e2ai(a,i)*e2ai(a,i)
              b22  += etemp
#
              etemp = e2ai(a,i)*e3ai(a,i)
              b23  += etemp
#
              etemp = e2ai(a,i)*e4ai(a,i)
              b24  += etemp
#
              etemp = e2ai(a,i)*e5ai(a,i)
              b25  += etemp
#
#             b1x x=3,5
#             ---------
#
              etemp = e3ai(a,i)*e3ai(a,i)
              b33  += etemp
#
              etemp = e3ai(a,i)*e4ai(a,i)
              b34  += etemp
#
              etemp = e3ai(a,i)*e5ai(a,i)
              b35  += etemp
#
#             b1x x=4,5
#             ---------
#
              etemp = e4ai(a,i)*e4ai(a,i)
              b44  += etemp
#
              etemp = e4ai(a,i)*e5ai(a,i)
              b45  += etemp
#
#             b1x x=5,5
#             ---------
#
              etemp = e5ai(a,i)*e5ai(a,i)
              b55  += etemp
#
     ENDPARDO a, i
#
#    Compute contributions due to dbj amplitudes.
#    --------------------------------------------
#
     PARDO b, j
#
#          REQUEST/GET amplitude data from all 3 previous iterations.
#          ----------------------------------------------------------
#
           GET e1bj(b,j)    # kiter-4 amplitudes
           GET e2bj(b,j)    # kiter-3 amplitudes
           GET e3bj(b,j)    # kiter-2 amplitudes
           GET e4bj(b,j)    # kiter-1 amplitudes
           GET e5bj(b,j)    # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,5
#             ---------
#
              etemp = e1bj(b,j)*e1bj(b,j)
              b11  += etemp
#
              etemp = e1bj(b,j)*e2bj(b,j)
              b12  += etemp
#
              etemp = e1bj(b,j)*e3bj(b,j)
              b13  += etemp
#
              etemp = e1bj(b,j)*e4bj(b,j)
              b14  += etemp
#
              etemp = e1bj(b,j)*e5bj(b,j)
              b15  += etemp
#
#             b1x x=2,5
#             ---------
#
              etemp = e2bj(b,j)*e2bj(b,j)
              b22  += etemp
#
              etemp = e2bj(b,j)*e3bj(b,j)
              b23  += etemp
#
              etemp = e2bj(b,j)*e4bj(b,j)
              b24  += etemp
#
              etemp = e2bj(b,j)*e5bj(b,j)
              b25  += etemp
#
#             b1x x=3,5
#             ---------
#
              etemp = e3bj(b,j)*e3bj(b,j)
              b33  += etemp
#
              etemp = e3bj(b,j)*e4bj(b,j)
              b34  += etemp
#
              etemp = e3bj(b,j)*e5bj(b,j)
              b35  += etemp
#
#             b1x x=4,5
#             ---------
#
              etemp = e4bj(b,j)*e4bj(b,j)
              b44  += etemp
#
              etemp = e4bj(b,j)*e5bj(b,j)
              b45  += etemp
#
#             b1x x=5,5
#             ---------
#
              etemp = e5bj(b,j)*e5bj(b,j)
              b55  += etemp
#
     ENDPARDO b, j
#
     execute sip_barrier
#
#    Collectively sum B-matrix elements.
#    -----------------------------------
#
     collective Tb11 += b11
     collective Tb12 += b12
     collective Tb13 += b13
     collective Tb14 += b14
     collective Tb15 += b15
     collective Tb22 += b22
     collective Tb23 += b23
     collective Tb24 += b24
     collective Tb25 += b25
     collective Tb33 += b33
     collective Tb34 += b34
     collective Tb35 += b35
     collective Tb44 += b44
     collective Tb45 += b45
     collective Tb55 += b55
#
#    Now the unique elements of the 'B-matrix' have been computed and the array filled out.
#    --------------------------------------------------------------------------------------
#
#    Put the elements of the 'B-matrix', which have been computed as scalars into the
#    R-matrix.
#    --------------------------------------------------------------------------------

     CALL SETUP_DIIS
#
     execute compute_diis # --> New instruction
#
     c1 = Tb11
     c2 = Tb22
     c3 = Tb33
     c4 = Tb44
     c5 = Tb55
     execute print_scalar c1
     execute print_scalar c2
     execute print_scalar c3
     execute print_scalar c4
     execute print_scalar c5
#
#    Done computing the c-vector.
#    ----------------------------
#
#    Form the updated amplitudes using the c-vector.
#    -----------------------#
#    Form Dai_old.
#    -------------
#
     PARDO a, i
#
#          REQUEST/GET amplitude data from all 3 previous iterations.
#          ----------------------------------------------------------
#
           GET D0ai(a,i)     # kiter-5 amplitudes
           GET D1ai(a,i)     # kiter-4 amplitudes
           GET D2ai(a,i)     # kiter-3 amplitudes
           GET D3ai(a,i)     # kiter-2 amplitudes
           GET D4ai(a,i)     # kiter-1 amplitudes
#
           GET e1ai(a,i)     # kiter-4 amplitudes
           GET e2ai(a,i)     # kiter-3 amplitudes
           GET e3ai(a,i)     # kiter-2 amplitudes
           GET e4ai(a,i)     # kiter-1 amplitudes
           GET e5ai(a,i)     # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> tai_old.
#          --------------------------------------------------------
#
           t1ai(a,i)     = d0ai(a,i) + e1ai(a,i)
           t1ai(a,i)    *= c1
           tai(a,i)      = t1ai(a,i)
#
           t1ai(a,i)     = d1ai(a,i) + e2ai(a,i)
           t1ai(a,i)    *= c2
           tai(a,i)     += t1ai(a,i)
#
           t1ai(a,i)     = d2ai(a,i) + e3ai(a,i)
           t1ai(a,i)    *= c3
           tai(a,i)     += t1ai(a,i)
#
           t1ai(a,i)     = d3ai(a,i) + e4ai(a,i)
           t1ai(a,i)    *= c4
           tai(a,i)     += t1ai(a,i)
#
           t1ai(a,i)     = d4ai(a,i) + e5ai(a,i)
           t1ai(a,i)    *= c5
           tai(a,i)     += t1ai(a,i)
#
           PUT Doldai_a(a,i) = tai(a,i)
#
     ENDPARDO a, i
#
#    Form tbj_old.
#    -------------
#
     PARDO b, j
#
#          REQUEST/GET amplitude data from all 3 previous iterations.
#          ----------------------------------------------------------
#
           GET D0bj(b,j)     # kiter-5 amplitudes
           GET D1bj(b,j)     # kiter-4 amplitudes
           GET D2bj(b,j)     # kiter-3 amplitudes
           GET D3bj(b,j)     # kiter-2 amplitudes
           GET D4bj(b,j)     # kiter-1 amplitudes
#
           GET e1bj(b,j)     # kiter-4 amplitudes
           GET e2bj(b,j)     # kiter-3 amplitudes
           GET e3bj(b,j)     # kiter-2 amplitudes
           GET e4bj(b,j)     # kiter-1 amplitudes
           GET e5bj(b,j)     # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> tbj_old.
#          --------------------------------------------------------
#
           t1bj(b,j)     = d0bj(b,j)
           t1bj(b,j)    += e1bj(b,j)
           t1bj(b,j)    *= c1
           tbj(b,j)      = t1bj(b,j)
#
           t1bj(b,j)     = d1bj(b,j)
           t1bj(b,j)    += e2bj(b,j)
           t1bj(b,j)    *= c2
           tbj(b,j)     += t1bj(b,j)
#
           t1bj(b,j)     = d2bj(b,j)
           t1bj(b,j)    += e3bj(b,j)
           t1bj(b,j)    *= c3
           tbj(b,j)     += t1bj(b,j)
#
           t1bj(b,j)     = d3bj(b,j)
           t1bj(b,j)    += e4bj(b,j)
           t1bj(b,j)    *= c4
           tbj(b,j)     += t1bj(b,j)
#
           t1bj(b,j)     = d4bj(b,j)
           t1bj(b,j)    += e5bj(b,j)
           t1bj(b,j)    *= c5
           tbj(b,j)     += t1bj(b,j)
#
           PUT Doldai_b(b,j) = tbj(b,j)
#
     ENDPARDO b, j
#
     execute sip_barrier
#
     ENDPROC DIIS4
#    -------------
#
# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
#
     PROC MOVE4
#    ----------
#
#    0 --> 1
#    ---------------------------------------------------
#
     PARDO a, i
           GET d1ai(a,i)
           PUT d0ai(a,i) = d1ai(a,i)
     ENDPARDO a, i
#
     PARDO b, j
           GET d1bj(b,j)
           PUT d0bj(b,j) = d1bj(b,j)
     ENDPARDO b, j
#
     execute sip_barrier 
#
#    2 --> 1
#    ---------------------------------------------------
#
     PARDO a, i
           GET e2ai(a,i)
           PUT e1ai(a,i) = e2ai(a,i)
     ENDPARDO a, i
#
     PARDO b, j
           GET e2bj(b,j)
           PUT e1bj(b,j) = e2bj(b,j)
     ENDPARDO b, j
#
     PARDO a, i
           GET d2ai(a,i)
           PUT d1ai(a,i) = d2ai(a,i)
     ENDPARDO a, i
#
     PARDO b, j
           GET d2bj(b,j)
           PUT d1bj(b,j) = d2bj(b,j)
     ENDPARDO b, j
#
     execute sip_barrier
#
#    3 --> 2
#    ---------------------------------------------------
#
     PARDO a, i
           GET e3ai(a,i)
           PUT e2ai(a,i) = e3ai(a,i)
     ENDPARDO a, i
#
     PARDO b, j
           GET e3bj(b,j)
           PUT e2bj(b,j) = e3bj(b,j)
     ENDPARDO b, j
#
     PARDO a, i
           GET d3ai(a,i)
           PUT d2ai(a,i) = d3ai(a,i)
     ENDPARDO a, i
#
     PARDO b, j
           GET d3bj(b,j)
           PUT d2bj(b,j) = d3bj(b,j)
     ENDPARDO b, j
#
     execute sip_barrier
#
#    4 --> 3
#    ---------------------------------------------------
#
     PARDO a, i
           GET e4ai(a,i)
           PUT e3ai(a,i) = e4ai(a,i)
     ENDPARDO a, i
#
     PARDO b, j
           GET e4bj(b,j)
           PUT e3bj(b,j) = e4bj(b,j)
     ENDPARDO b, j
#
     PARDO a, i
           GET d4ai(a,i)
           PUT d3ai(a,i) = d4ai(a,i)
     ENDPARDO a, i
#
     PARDO b, j
           GET d4bj(b,j)
           PUT d3bj(b,j) = d4bj(b,j)
     ENDPARDO b, j
#
     execute sip_barrier
#
#    5 --> 4
#    ---------------------------------------------------
#
     PARDO a, i
           GET e5ai(a,i)
           PUT e4ai(a,i) = e5ai(a,i)
     ENDPARDO a, i
#
     PARDO b, j
           GET e5bj(b,j)
           PUT e4bj(b,j) = e5bj(b,j)
     ENDPARDO b, j
#
     PARDO a, i
           GET doldai_a(a,i)
           PUT d4ai(a,i) = doldai_a(a,i)
     ENDPARDO a, i
#
     PARDO b, j
           GET doldai_b(b,j)  
           PUT d4bj(b,j) = doldai_b(b,j)
     ENDPARDO b, j
#
     execute sip_barrier
#
     ENDPROC MOVE4
#    -------------
#
# ---------------------------------------------------------------------------------
#
# ----------------------------------------------------------------------------------------
#
# This procedure calculates the virtual-occupied block of the density 
# matrix iteratively. The equation for the AA spin programmed is:
#
# D(a,i)*(e_i-e_a) = X(a,i) - D(c,k)*[ V^{ca}_{ki} - V^{ca}_{ik}  
#                                    + V^{ci}_{ka} - V^{ci}_{ak} ] 
#                           - D(C,K)*[ V^{Ca}_{Ki} + V^{Ci}_{Ka} ] 
#
# ----------------------------------------------------------------------------------------
#
      PROC DAI_SOLVE
#     -------- 
#
# First get initial guess 
# ----------------------- 
#
      create Doldai_a 
      create Dnewai_a 
      create Doldai_b 
      create Dnewai_b 
#
      CREATE D0ai
      CREATE D1ai
      CREATE D2ai
      CREATE D3ai
      CREATE D4ai
#
      CREATE D0bj
      CREATE D1bj
      CREATE D2bj
      CREATE D3bj
      CREATE D4bj
#
      CREATE e1ai
      CREATE e2ai
      CREATE e3ai
      CREATE e4ai
      CREATE e5ai
#
      CREATE e1bj
      CREATE e2bj
      CREATE e3bj
      CREATE e4bj
      CREATE e5bj
      ecrit = cc_conv # Threshold  
#
# Set Xai_aa and Xai_bb  
# ---------------------  
#
      PARDO a, i  
#
            GET Iai_aa(a,i) 
            GET Iia_aa(i,a) 
#
            Tai(a,i)        = Iia_aa(i,a) 
            Tai(a,i)       += Iai_aa(a,i) 
            PUT Xai_aa(a,i) = Tai(a,i)  
#
      ENDPARDO a, i  
#
      PARDO b, j  
#
            GET Iai_bb(b,j) 
            GET Iia_bb(j,b) 
#
            Tbj(b,j)        = Iia_bb(j,b) 
            Tbj(b,j)       += Iai_bb(b,j) 
            PUT Xai_bb(b,j) = Tbj(b,j)  
#
      ENDPARDO b, j  
      execute sip_barrier 
#
# DONE Set Xai_aa and Xai_bb  
# --------------------------  
#
      esum = 0.0 
      eold = 0.0 
      PARDO a, i 
#
            GET Xai_aa(a,i) 
            Tai(a,i) = Xai_aa(a,i) 
            execute energy_denominator Tai(a,i) 
            PUT Doldai_a(a,i) = Tai(a,i) 
            PUT D0ai(a,i) = Tai(a,i) 
#
      ENDPARDO a, i 
#
      PARDO b, j 
#
            GET Xai_bb(b,j) 
            Tbj(b,j) = Xai_bb(b,j) 
            execute energy_denominator Tbj(b,j) 
            PUT Doldai_b(b,j) = Tbj(b,j) 
            PUT D0bj(b,j) = Tbj(b,j) 
#
      ENDPARDO b, j 
      execute sip_barrier 
#
# Start iterations 
# ---------------- 
#
      DO KITER  
#
#        AA-spin first 
#        ------------- 
#
         PARDO a, i 
#
               GET Xai_aa(a,i) 
               Tai(a,i)           = Xai_aa(a,i) 
               PUT Dnewai_a(a,i) += Tai(a,i) 
#
         ENDPARDO a, i 
#
         PARDO a, i, a1, i1 
#
               REQUEST VSpipi(a1,i1,a,i) a # + 
               REQUEST Viaai(i1,a1,a,i)  a # + 
               REQUEST Vaaii(a,a1,i1,i)  a # - 
               GET Doldai_a(a1,i1) 
#
               Tpppp(a,i,a1,i1)   = VSpipi(a1,i1,a,i) 
               T2pppp(a,i,a1,i1)  = Viaai(i1,a1,a,i)   
               T3pppp(a,i,a1,i1)  = Vaaii(a,a1,i1,i)  
#
               Tpppp(a,i,a1,i1)  += T2pppp(a,i,a1,i1) 
               Tpppp(a,i,a1,i1)  -= T3pppp(a,i,a1,i1) 
#
               Tai(a,i)           = Tpppp(a,i,a1,i1)*Doldai_a(a1,i1) 
               PUT Dnewai_a(a,i) += Tai(a,i) 
#
         ENDPARDO a, i, a1, i1 
#
         PARDO a, i, b, j 
#
               REQUEST Vpiqj(a,i,b,j) a # + 
               REQUEST Viabj(i,a,b,j) a # + 
               GET Doldai_b(b,j) 
#
               Tppqq(a,i,b,j)     = Vpiqj(a,i,b,j)  
               T2ppqq(a,i,b,j)    = Viabj(i,a,b,j)  
               Tppqq(a,i,b,j)    += T2ppqq(a,i,b,j) 
#
               Tai(a,i)           = Tppqq(a,i,b,j)*Doldai_b(b,j) 
               PUT Dnewai_a(a,i) += Tai(a,i) 
#
         ENDPARDO a, i, b, j 
#
#        DONE AA-spin 
#        ------------ 
#
#        BB-spin next 
#        ------------ 
#
         PARDO b, j 
#
               GET Xai_bb(b,j) 
               Tbj(b,j)           = Xai_bb(b,j) 
               PUT Dnewai_b(b,j) += Tbj(b,j) 
#
         ENDPARDO b, j 
#
         PARDO b, j, b1, j1 
#
               REQUEST VSqjqj(b1,j1,b,j) b # + 
               REQUEST Vjbbj(j1,b1,b,j)  b # + 
               REQUEST Vbbjj(b,b1,j1,j)  b # - 
               GET Doldai_b(b1,j1) 
#
               Tqqqq(b,j,b1,j1)   = VSqjqj(b1,j1,b,j) 
               T2qqqq(b,j,b1,j1)  = Vjbbj(j1,b1,b,j)   
               T3qqqq(b,j,b1,j1)  = Vbbjj(b,b1,j1,j)  
               Tqqqq(b,j,b1,j1)  += T2qqqq(b,j,b1,j1) 
               Tqqqq(b,j,b1,j1)  -= T3qqqq(b,j,b1,j1) 
#
               Tbj(b,j)           = Tqqqq(b,j,b1,j1)*Doldai_b(b1,j1) 
               PUT Dnewai_b(b,j) += Tbj(b,j) 
#
         ENDPARDO b, j, b1, j1 
#
         PARDO a, i, b, j 
#
               REQUEST Vpiqj(a,i,b,j) a # + 
               REQUEST Viabj(i,a,b,j) a # + 
               GET Doldai_a(a,i) 
#
               Tqqpp(b,j,a,i)     = Vpiqj(a,i,b,j)  
               T2qqpp(b,j,a,i)    = Viabj(i,a,b,j)   
               Tqqpp(b,j,a,i)    += T2qqpp(b,j,a,i) 
#
               Tbj(b,j)           = Tqqpp(b,j,a,i)*Doldai_a(a,i) 
               PUT Dnewai_b(b,j) += Tbj(b,j) 
#
         ENDPARDO a, i, b, j 
#
#        DONE BB-spin 
#        ------------ 
         execute sip_barrier 
#
#        Update error vector for diis
#        ----------------------------
#
         CALL UPDATE_DAI 
         execute sip_barrier 
#
#        Compute 'Energy' 
#        ---------------- 
#
         esum = 0.0 
         PARDO a, i 
#
               GET Dnewai_a(a,i) 
               etemp = Dnewai_a(a,i)*Dnewai_a(a,i)  
               esum += etemp 
               Tai(a,i) = Dnewai_a(a,i) 
               execute energy_denominator Tai(a,i) 
               PUT Doldai_a(a,i) = Tai(a,i) 
#
         ENDPARDO a, i 
#
         PARDO b, j 
#
               GET Dnewai_b(b,j)  
               etemp = Dnewai_b(b,j)*Dnewai_b(b,j) 
               esum += etemp 
               Tbj(b,j) = Dnewai_b(b,j) 
               execute energy_denominator Tbj(b,j) 
               PUT Doldai_b(b,j) = Tbj(b,j) 
#
         ENDPARDO b, j 
         execute sip_barrier 
         collective enew += esum 
         execute print_scalar enew 
         execute print_scalar eold 
#
#        Check on convergence
#        --------------------
#
         IF enew < eold
            ediff = eold - enew 
            IF ediff < ecrit
               exit # kiter
            ENDIF
         ENDIF
#
         IF enew > eold
            ediff = enew - eold
            IF ediff < ecrit
               exit # kiter
            ENDIF
         ENDIF
#
#        Reset eold --> enew
#        -------------------
#
         eold = enew 
#
         if kiter == 2
#
#           Get uptated amplitudes based on DIIS procedure.
#           -----------------------------------------------
#
            CALL DIIS1
#
         endif # kiter == 2
#
         if kiter == 3
#
#           Get uptated amplitudes based on DIIS procedure.
#           -----------------------------------------------
#
            CALL DIIS2
#
         endif # kiter == 3
#
         if kiter == 4
#
#           Get uptated amplitudes based on DIIS procedure.
#           -----------------------------------------------
#
            CALL DIIS3
#
         endif # kiter == 4
#
         if kiter >= 5
#
#           Get uptated amplitudes based on DIIS procedure.
#           -----------------------------------------------
#
            CALL DIIS4
            CALL MOVE4
#
         endif # kiter == 5
#
         CALL MOVE_DAI 
#
#        Zero out Dai 
#        ------------ 
# 
         PARDO a, i 
#
               Tai(a,i) = 0.0 
               PUT Dnewai_a(a,i) = Tai(a,i) 
#
         ENDPARDO a, i 
# 
         PARDO b, j 
#
               Tbj(b,j) = 0.0 
               PUT Dnewai_b(b,j) = Tbj(b,j) 
#
         ENDPARDO b, j 
         execute sip_barrier 
#
      ENDDO KITER  
      execute sip_barrier 
#
      ENDPROC DAI_SOLVE
#     ----------- 
#
# -----------------------------------------------------------------------------
#
#
# -----------------------------------------------------------------------------
#
      PROC I1TRANS
#     ------------
#
# -----------------------------------------------------------------------------
#
#     Transform Iai_aa and Iia_aa
#     ---------------------------
      PARDO a, i
#
            GET Iia_aa(i,a)
#
            DO mu
#
               Jxi(mu,i)  = ca(mu,a)*Iia_aa(i,a)
#
               DO nu
#
                  Ixx(mu,nu) = Jxi(mu,i)*ca(nu,i)
                  I1xx(nu,mu) = Ixx(mu,nu)
                  PUT Ipq(mu,nu) += Ixx(mu,nu)
                  PUT Ipq(nu,mu) += I1xx(nu,mu)
#
               ENDDO nu
#
            ENDDO mu
#
      ENDPARDO a, i
#
#     Transform Iai_bb and Iia_bb
#     ---------------------------
      PARDO b, j
#
            GET Iia_bb(j,b)
#
            DO mu
#
               Jxj(mu,j)  = cb(mu,b)*Iia_bb(j,b)
#
               DO nu
#
                  Ixx(mu,nu) = Jxj(mu,j)*cb(nu,j)
                  I1xx(nu,mu) = Ixx(mu,nu)
                  PUT Ipq(mu,nu) += Ixx(mu,nu)
                  PUT Ipq(nu,mu) += I1xx(nu,mu)
#
               ENDDO nu
#
            ENDDO mu
#
      ENDPARDO b, j
#
#     Transform Iaa_aa
#     ----------------
      PARDO a, a1
#
            GET Iab_aa(a,a1)

#
            DO mu
#
               Ixa(mu,a1)  = ca(mu,a)*Iab_aa(a,a1)
#
               DO nu
#
                  Ixx(mu,nu) = Ixa(mu,a1)*ca(nu,a1)
                  PUT Ipq(mu,nu) += Ixx(mu,nu)
#
               ENDDO nu
#
            ENDDO mu
#
      ENDPARDO a, a1
#
#     Transform Iaa_bb
#     ----------------
      PARDO b, b1
#
            GET Iab_bb(b,b1)
#
            DO mu
#
               Ixb(mu,b1)  = cb(mu,b)*Iab_bb(b,b1)
#
               DO nu
#
                  Ixx(mu,nu) = Ixb(mu,b1)*cb(nu,b1)
                  PUT Ipq(mu,nu) += Ixx(mu,nu)
#
               ENDDO nu
#
            ENDDO mu
#
      ENDPARDO b, b1
#
#     Transform Iij_aa
#     ----------------
      PARDO i, i1
#
            GET Iij_aa(i,i1)
#
            DO mu
#
               Jxi(mu,i1)  = ca(mu,i)*Iij_aa(i,i1)
#
               DO nu
#
                  Ixx(mu,nu) = Jxi(mu,i1)*ca(nu,i1)
                  PUT Ipq(mu,nu) += Ixx(mu,nu)
#
               ENDDO nu
#
            ENDDO mu
#
      ENDPARDO i, i1
#
#     Transform Iij_bb
#     ----------------
      PARDO j, j1
#
            GET Iij_bb(j,j1)
#
            DO mu
#
               Jxj(mu,j1)  = cb(mu,j)*Iij_bb(j,j1)
#
               DO nu
#
                  Ixx(mu,nu) = Jxj(mu,j1)*cb(nu,j1)
                  PUT Ipq(mu,nu) += Ixx(mu,nu)
#
               ENDDO nu
#
            ENDDO mu
#
      ENDPARDO j, j1
#
# -----------------------------------------------------------------------------
#
      ENDPROC I1TRANS
#     ---------------
#
# -----------------------------------------------------------------------------
#
# -----------------------------------------------------------------------------
#
      PROC D1TRANS
#     ------------
#
# -----------------------------------------------------------------------------
#
#     Transform Dai_aa
#     ----------------
      PARDO a, i
#
            GET Doldai_a(a,i)
#
            DO mu
#
               Jxi(mu,i)  = Doldai_a(a,i)*ca(mu,a)
#
               DO nu
#
                  Ixx(mu,nu)      = Jxi(mu,i)*ca(nu,i)
                  I1xx(nu,mu)     = Ixx(mu,nu)
                  PUT Dpq (mu,nu) += Ixx(mu,nu)
                  PUT Dpq (nu,mu) += I1xx(nu,mu)
                  PUT Dpqa(mu,nu) += Ixx(mu,nu)
                  PUT Dpqa(nu,mu) += I1xx(nu,mu)
#
               ENDDO nu
#
            ENDDO mu
#
      ENDPARDO a, i
#
#     Transform Dai_bb
#     ----------------
      PARDO b, j
#
            GET Doldai_b(b,j)
#
            DO mu
#
               Jxj(mu,j)  = Doldai_b(b,j)*cb(mu,b)
#
               DO nu
#
                  Ixx(mu,nu) = Jxj(mu,j)*cb(nu,j)
                  I1xx(nu,mu)     = Ixx(mu,nu)
                  PUT Dpq (mu,nu) += Ixx(mu,nu)
                  PUT Dpq (nu,mu) += I1xx(nu,mu)
                  PUT Dpqb(mu,nu) += Ixx(mu,nu)
                  PUT Dpqb(nu,mu) += I1xx(nu,mu)
#
               ENDDO nu
#
            ENDDO mu
#
      ENDPARDO b, j
#
#     Transform Dab_a
#     ---------------
      PARDO a, a1
#
            GET Dab_a(a,a1)
#
            DO mu
#
               Ixa(mu,a1)  = Dab_a(a,a1)*ca(mu,a)
#
               DO nu
#
                  Ixx(mu,nu) = Ixa(mu,a1)*ca(nu,a1)
                  PUT Dpq(mu,nu) += Ixx(mu,nu)
                  PUT Dpqa(mu,nu) += Ixx(mu,nu)
#
               ENDDO nu
#
            ENDDO mu
#
      ENDPARDO a, a1
#
#     Transform Dab_b
#     ----------------
      PARDO b, b1
#
            GET Dab_b(b,b1)
#
            DO mu
#
               Ixb(mu,b1)  = Dab_b(b,b1)*cb(mu,b)
#
               DO nu
#
                  Ixx(mu,nu) = Ixb(mu,b1)*cb(nu,b1)
                  PUT Dpq(mu,nu) += Ixx(mu,nu)
                  PUT Dpqb(mu,nu) += Ixx(mu,nu)
#
               ENDDO nu
#
            ENDDO mu
#
      ENDPARDO b, b1
#
#     Transform Dij_aa
#     ----------------
      PARDO i, i1
#
            GET Dij_a(i,i1)
#
            DO mu
#
               Jxi(mu,i1)  = Dij_a(i,i1)*ca(mu,i)
#
               DO nu
#
                  Ixx(mu,nu) = Jxi(mu,i1)*ca(nu,i1)
                  PUT Dpq(mu,nu) += Ixx(mu,nu)
                  PUT Dpqa(mu,nu) += Ixx(mu,nu)
#
               ENDDO nu
#
            ENDDO mu
#
      ENDPARDO i, i1
#
#     Transform Dij_bb
#     ----------------
      PARDO j, j1
#
            GET Dij_b(j,j1)
#
            DO mu
#
               Jxj(mu,j1)  = Dij_b(j,j1)*cb(mu,j)
#
               DO nu
#
                  Ixx(mu,nu) = Jxj(mu,j1)*cb(nu,j1)
                  PUT Dpq (mu,nu) += Ixx(mu,nu)
                  PUT Dpqb(mu,nu) += Ixx(mu,nu)
#
               ENDDO nu
#
            ENDDO mu
#
      ENDPARDO j, j1
# -----------------------------------------------------------------------------
#
      ENDPROC D1TRANS
#     ---------------
#
# -----------------------------------------------------------------------------
#
# -----------------------------------------------------------------------------
#
      PROC HFDENS
#     -----------
#
      PARDO mu, nu, i
#
            Txi(nu,i)       = ca(nu,i)
            Tpq(mu,nu)      = ca(mu,i)*Txi(nu,i)
            PUT Dhf (mu,nu) += Tpq(mu,nu)
            PUT Dhfa(mu,nu) += Tpq(mu,nu)
#
      ENDPARDO mu, nu, i
#
      PARDO mu, nu, j
#
            Txj(nu,j)       = cb(nu,j)
            Tpq(mu,nu)      = cb(mu,j)*Txj(nu,j)
            PUT Dhf (mu,nu) += Tpq(mu,nu)
            PUT Dhfb(mu,nu) += Tpq(mu,nu)
#
      ENDPARDO mu, nu, j
#
      ENDPROC HFDENS
#     --------------
#
# -----------------------------------------------------------------------------
#
#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ 



# ----------------------------------------------------------------------------- 
#
#     ------------------------
      PROC  DENS_INTERMEDIATES
#     ------------------------
#
# 
      PARDO i2, a2, a1, i1   
#
            GET a1a_old(i2,a2)
            GET t1a_old(a1,i1)
#
            Tiaai(i2,a2,a1,i1)          = a1a_old(i2,a2)^t1a_old(a1,i1)
            Tiaai(i2,a2,a1,i1)         *= 2.0
            PREPARE Liaai(i2,a2,a1,i1) = Tiaai(i2,a2,a1,i1) 
#
      ENDPARDO i2, a2, a1, i1   
#
      PARDO i2, a2, a, i   
#
            REQUEST A2old_aa(i2,a2,i,a) a 
#
            DO i1  
            DO a1  
#
               REQUEST                       T2old_aa(a,i,a1,i1) i1 
               Tiaai(i2,a2,a1,i1)          = A2old_aa(i2,a2,i,a)*T2old_aa(a,i,a1,i1)
               PREPARE Liaai(i2,a2,a1,i1) += Tiaai(i2,a2,a1,i1) 
#
            ENDDO a1  
            ENDDO i1  
#
      ENDPARDO i2, a2, a, i   
#
      PARDO i2, a2, b, j   
#
            REQUEST A2old_ab(i2,a2,j,b) j 
#
            DO i1  
            DO a1  
#
               REQUEST                       T2old_ab(a1,i1,b,j) j 
               Tiaai(i2,a2,a1,i1)          = A2old_ab(i2,a2,j,b)*T2old_ab(a1,i1,b,j)
               PREPARE Liaai(i2,a2,a1,i1) += Tiaai(i2,a2,a1,i1) 
#
            ENDDO a1  
            ENDDO i1  
#
      ENDPARDO i2, a2, b, j   

      PARDO j2, b2, b, j
#
            GET a1b_old(j2,b2)
            GET t1b_old(b,j)
#
            Tjbbj(j2,b2,b,j)         = a1b_old(j2,b2)^t1b_old(b,j)
            Tjbbj(j2,b2,b,j)        *= 2.0
            PREPARE Ljbbj(j2,b2,b,j) = Tjbbj(j2,b2,b,j) 
#
      ENDPARDO j2, b2, b, j
#
      PARDO j2, b2, b1, j1
#
            REQUEST A2old_bb(j2,b2,j1,b1) j1 
#
            DO j
            DO b
#
               REQUEST                     T2old_bb(b,j,b1,j1) j1 
               Tjbbj(j2,b2,b,j)          = A2old_bb(j2,b2,j1,b1)*T2old_bb(b,j,b1,j1)
               PREPARE Ljbbj(j2,b2,b,j) += Tjbbj(j2,b2,b,j) 
#
            ENDDO b
            ENDDO j
#
      ENDPARDO j2, b2, b1, j1
#
      PARDO j2, b2, a, i
#
            REQUEST A2old_ab(i,a,j2,b2) b2 
#
            DO j
            DO b
#
               REQUEST                     T2old_ab(a,i,b,j) j 
               Tjbbj(j2,b2,b,j)          = A2old_ab(i,a,j2,b2)*T2old_ab(a,i,b,j)
               PREPARE Ljbbj(j2,b2,b,j) += Tjbbj(j2,b2,b,j) 
#
            ENDDO b
            ENDDO j
#
      ENDPARDO j2, b2, a, i
#
      PARDO j, b, a1, i1
#
            GET a1b_old(j,b)
            GET t1a_old(a1,i1)
#
            Tjbai(j,b,a1,i1)         = a1b_old(j,b)^t1a_old(a1,i1)
            Tjbai(j,b,a1,i1)        *= 2.0
            PREPARE Ljbai(j,b,a1,i1) = Tjbai(j,b,a1,i1)  
#
      ENDPARDO j, b, a1, i1
#
      PARDO j, b, a3, i3
#
            REQUEST A2old_ab(i3,a3,j,b) b 
#
            DO i1
            DO a1
#
               REQUEST                     T2old_aa(a3,i3,a1,i1) i1 
               Tjbai(j,b,a1,i1)          = A2old_ab(i3,a3,j,b)*T2old_aa(a3,i3,a1,i1)
               PREPARE Ljbai(j,b,a1,i1) += Tjbai(j,b,a1,i1)
#
            ENDDO a1
            ENDDO i1
#
      ENDPARDO j, b, a3, i3
#
      PARDO j, b, j1, b1
#
            REQUEST A2old_bb(j1,b1,j,b) j1 
#
            DO i1
            DO a1
#
               REQUEST                     T2old_ab(a1,i1,b1,j1) j1 
               Tjbai(j,b,a1,i1)          = A2old_bb(j1,b1,j,b)*T2old_ab(a1,i1,b1,j1)
               PREPARE Ljbai(j,b,a1,i1) += Tjbai(j,b,a1,i1)
#
            ENDDO a1
            ENDDO i1
#
      ENDPARDO j, b, j1, b1
#
      PARDO i1, a1, b, j
#
            GET a1a_old(i1,a1)
            GET t1b_old(b,j)
#
            Tiabj(i1,a1,b,j)         = a1a_old(i1,a1)^t1b_old(b,j)
            Tiabj(i1,a1,b,j)        *= 2.0
            PREPARE Liabj(i1,a1,b,j) = Tiabj(i1,a1,b,j) 
#
      ENDPARDO i1, a1, b, j
#
      PARDO i1, a1, b1, j1 
#
            REQUEST A2old_ab(i1,a1,j1,b1) j1 
#
            DO j
            DO b
#
               REQUEST                     T2old_bb(b,j,b1,j1)   j1 
               Tiabj(i1,a1,b,j)          = A2old_ab(i1,a1,j1,b1)*T2old_bb(b,j,b1,j1)
               PREPARE Liabj(i1,a1,b,j) += Tiabj(i1,a1,b,j) 
#
            ENDDO b
            ENDDO j
#
      ENDPARDO i1, a1, b1, j1
#
      PARDO i1, a1, a, i
#
            REQUEST A2old_aa(i1,a1,i,a) a 
#
            DO j
            DO b
#
               REQUEST                     T2old_ab(a,i,b,j) j 
               Tiabj(i1,a1,b,j)          = A2old_aa(i1,a1,i,a)*T2old_ab(a,i,b,j)
               PREPARE Liabj(i1,a1,b,j) += Tiabj(i1,a1,b,j) 
#
            ENDDO b
            ENDDO j
#
      ENDPARDO i1, a1, a, i
#
#
#
#
      PARDO a, a1, i, i1
           REQUEST                        Tau_aa(a,i,a1,i1) i1
           REQUEST                        A2old_aa(i,a,i1,a1) i1
           tpppp(a,a1,i,i1)             = Tau_aa(a,i,a1,i1)
           t1pppp(i,i1,a,a1)            = A2old_aa(i,a,i1,a1)
           PREPARE LTau_aa(a,a1,i,i1)   = tpppp(a,a1,i,i1)
           PREPARE LA2old_aa(i,i1,a,a1) = t1pppp(i,i1,a,a1)
      ENDPARDO a, a1, i, i1
#
      PARDO b, b1, j, j1
           REQUEST                        Tau_bb(b,j,b1,j1) j1
           REQUEST                        A2old_bb(j,b,j1,b1) j1
           tqqqq(b,b1,j,j1)             = Tau_bb(b,j,b1,j1)
           t1qqqq(j,j1,b,b1)            = A2old_bb(j,b,j1,b1)
           PREPARE LTau_bb(b,b1,j,j1)   = tqqqq(b,b1,j,j1)
           PREPARE LA2old_bb(j,j1,b,b1) = t1qqqq(j,j1,b,b1)
      ENDPARDO b, b1, j, j1
#
      PARDO a, b1, i, j1
           REQUEST                        Tau_ab(a,i,b1,j1) j1
           REQUEST                        A2old_ab(i,a,j1,b1) j1
           tpqpq(a,b1,i,j1)             = Tau_ab(a,i,b1,j1)
           t1pqpq(i,j1,a,b1)            = A2old_ab(i,a,j1,b1)
           PREPARE LTau_ab(a,b1,i,j1)   = tpqpq(a,b1,i,j1)
           PREPARE LA2old_ab(i,j1,a,b1) = t1pqpq(i,j1,a,b1)
      ENDPARDO a, b1, i, j1
#
# Djj 
# ---  
#
      PARDO j, j1 
#
            GET Gmi_b(j,j1) 
            PUT Djj(j,j1) += Gmi_b(j,j1) 
#
      ENDPARDO j, j1 
#
      PARDO j, j1, b       
#
            GET a1b_old(j1,b) 
            GET t1b_old(b,j) 
            Tjj(j,j1)      = a1b_old(j1,b)*t1b_old(b,j)  
            PUT Djj(j,j1) += Tjj(j,j1) 
#
      ENDPARDO j, j1, b       
#
# Dbb 
# --- 
#
      PARDO b1, b 
#
            GET Gae_b(b1,b) 
            PUT Dbb(b1,b) += Gae_b(b1,b) 
#
      ENDPARDO b1, b 
#
      PARDO b1, b, j 
#
            GET a1b_old(j,b1) 
            GET t1b_old(b,j) 
            Tbb(b1,b)      = t1b_old(b,j)*a1b_old(j,b1) 
            Tbb(b1,b)     *= -1.0  
            PUT Dbb(b1,b) += Tbb(b1,b) 
#
      ENDPARDO b1, b, j  
#
#
# Done one-particle intermediates 
# ------------------------------- 
#
# Dii 
# ---  
#
      PARDO i, i1 
#
            GET Gmi_a(i,i1) 
            PUT Dii(i,i1) += Gmi_a(i,i1) 
#
      ENDPARDO i, i1 
#
      PARDO i, i1, a       
#
            GET a1a_old(i1,a) 
            GET t1a_old(a,i) 
            Tii(i,i1)      = a1a_old(i1,a)*t1a_old(a,i) 
            PUT Dii(i,i1) += Tii(i,i1) 
#
      ENDPARDO i, i1, a       
#
# Daa 
# --- 
#
      PARDO a1, a 
#
            GET Gae_a(a1,a) 
            PUT Daa(a1,a) += Gae_a(a1,a) 
#
      ENDPARDO a1, a 
#
      PARDO a1, a, i 
#
            GET a1a_old(i,a1) 
            GET t1a_old(a,i) 
            Taa(a1,a)      = t1a_old(a,i)*a1a_old(i,a1) 
            Taa(a1,a)     *= -1.0  
            PUT Daa(a1,a) += Taa(a1,a) 
#
      ENDPARDO a1, a, i  
#
#
# Done one-particle intermediates 
# ------------------------------- 
#
# Form the intermediate I3aa 
# -------------------------- 
#     
      PARDO a, a1
#
            DO i2
            DO i1
            DO i
#              
               REQUEST A2old_aa(i2,a,i1,a1) a
               GET t1a_old(a1,i)
#              
               Tiaii(i2,a,i1,i) = A2old_aa(i2,a,i1,a1)*t1a_old(a1,i)
               PUT I3aa(i2,a,i1,i) += Tiaii(i2,a,i1,i)
#           
            ENDDO i 
            ENDDO i1
            ENDDO i2
#     
      ENDPARDO a, a1
#
# Form the intermediate I3bb 
# -------------------------- 
#     
      PARDO b, b1
#           
            DO j2
            DO j1
            DO j
#              
               REQUEST A2old_bb(j2,b,j1,b1) b1
               GET t1b_old(b1,j)
#              
               Tjbjj(j2,b,j1,j) = A2old_bb(j2,b,j1,b1)*t1b_old(b1,j)
               PUT I3bb(j2,b,j1,j) += Tjbjj(j2,b,j1,j)
#           
            ENDDO j 
            ENDDO j1
            ENDDO j2
#
      ENDPARDO b, b1

#
# Form the intermediate I3ab 
# -------------------------- 
#
      PARDO a, b1
#
            DO i2
            DO j1
            DO j
#
               REQUEST A2old_ab(i2,a,j1,b1) b1
               GET t1b_old(b1,j)
#
               Tiajj(i2,a,j1,j) = A2old_ab(i2,a,j1,b1)*t1b_old(b1,j)
               PUT I3ab(i2,a,j1,j) += Tiajj(i2,a,j1,j)
#
            ENDDO j
            ENDDO j1
            ENDDO i2
#
      ENDPARDO a, b1

#
# Form the intermediate I3ba 
# -------------------------- 
#
      PARDO b, a1
#
            DO j
            DO i1
            DO i
#           
               REQUEST A2old_ab(i1,a1,j,b) b
               GET t1a_old(a1,i)
#     
               Tjbii(j,b,i1,i) = A2old_ab(i1,a1,j,b)*t1a_old(a1,i)
               PUT I3ba(j,b,i1,i) += Tjbii(j,b,i1,i)
#
            ENDDO i 
            ENDDO i1
            ENDDO j
#
      ENDPARDO b, a1
#     
#
#
#
#
#   ...ready!
#
#
      ENDPROC  DENS_INTERMEDIATES
# ----------------------------------------------------------------------------- 



#-------------------------------------------------------------------------
#           
#     ------------------
      PROC  EOM_DENS_INT
#     ------------------
#     
#
#     Ring intermediates (L2 * T2  AND  L2 * R2)
#
#
#      PARDO  a, a2, i2, a1
#         ALLOCATE  LLaiai (a2,i2,a1,*)
#         DO i1
#            REQUEST                 L2AA (i1,a1,i2,a2) i1
#            LLaiai (a2,i2,a1,i1)  = L2AA (i1,a1,i2,a2)
#         ENDDO i1
#         DO i
#            REQUEST  R2AA (a,i,a2,i2) i
#            REQUEST  T2old_aa (a,i,a2,i2) i
#            DO i1
#               taiai  (a,i,a1,i1) = R2AA (a,i,a2,i2) * LLaiai (a2,i2,a1,i1)
#               t1aiai (a,i,a1,i1) = T2old_aa (a,i,a2,i2) * LLaiai (a2,i2,a1,i1)
#
#               tiaia  (i,a1,i1,a) = taiai  (a,i,a1,i1)
#               t1iaia (i,a1,i1,a) = t1aiai (a,i,a1,i1)
#
#               PREPARE  L2R2_aaaa (i,a1,i1,a) += tiaia  (i,a1,i1,a)
#               PREPARE  L2T2_aaaa (i,a1,i1,a) += t1iaia (i,a1,i1,a)
#            ENDDO i1
#         ENDDO i
#         DEALLOCATE  LLaiai (a2,i2,a1,*)
#      ENDPARDO  a, a2, i2, a1
#
#      PARDO  a, b2, j2, a1
#         ALLOCATE  LLbjai (b2,j2,a1,*)
#         DO i1
#            REQUEST                 L2AB (i1,a1,j2,b2) i1
#            LLbjai (b2,j2,a1,i1)  = L2AB (i1,a1,j2,b2)
#         ENDDO i1
#         DO i
#            REQUEST  R2AB (a,i,b2,j2) i
#            REQUEST  T2old_ab (a,i,b2,j2) i
#            DO i1
#               taiai  (a,i,a1,i1) = R2AB (a,i,b2,j2) * LLbjai (b2,j2,a1,i1)
#               t1aiai (a,i,a1,i1) = T2old_ab (a,i,b2,j2) * LLbjai (b2,j2,a1,i1)
#
#               tiaia  (i,a1,i1,a) = taiai  (a,i,a1,i1)
#               t1iaia (i,a1,i1,a) = t1aiai (a,i,a1,i1)
#
#               PREPARE  L2R2_aaaa (i,a1,i1,a) += tiaia  (i,a1,i1,a)
#               PREPARE  L2T2_aaaa (i,a1,i1,a) += t1iaia (i,a1,i1,a)
#            ENDDO i1
#         ENDDO i
#         DEALLOCATE  LLbjai (b2,j2,a1,*)
#      ENDPARDO  a, b2, j2, a1
#
#      PARDO  a, a2, i2, b1
#         ALLOCATE  Laibj (a2,i2,b1,*)
#         DO j1
#            REQUEST                L2AB (i2,a2,j1,b1) j1
#            Laibj (a2,i2,b1,j1)  = L2AB (i2,a2,j1,b1)
#         ENDDO j1
#         DO i
#            REQUEST  R2AA (a,i,a2,i2) i
#            REQUEST  T2old_aa (a,i,a2,i2) i
#            DO j1
#               taibj  (a,i,b1,j1) = R2AA (a,i,a2,i2) * Laibj (a2,i2,b1,j1)
#               t1aibj (a,i,b1,j1) = T2old_aa (a,i,a2,i2) * Laibj (a2,i2,b1,j1)
#
#               tpqqp  (i,b1,j1,a) = taibj  (a,i,b1,j1)
#               t1pqqp (i,b1,j1,a) = t1aibj (a,i,b1,j1)
#
#               PREPARE  L2R2_abba (i,b1,j1,a) += tpqqp  (i,b1,j1,a)
#               PREPARE  L2T2_abba (i,b1,j1,a) += t1pqqp (i,b1,j1,a)
#            ENDDO j1
#         ENDDO i
#         DEALLOCATE  Laibj (a2,i2,b1,*)
#      ENDPARDO  a, a2, i2, b1
#
#      PARDO  a, b2, j2, b1
#         ALLOCATE  LLbjbj (b2,j2,b1,*)
#         DO j1
#            REQUEST                L2AA (j2,b2,j1,b1) j1
#            LLbjbj (b2,j2,b1,j1)  = L2AA (j2,b2,j1,b1)
#         ENDDO j1
#         DO i
#            REQUEST  R2AB (a,i,b2,j2) i
#            REQUEST  T2old_ab (a,i,b2,j2) i
#            DO j1
#               taibj  (a,i,b1,j1) = R2AB (a,i,b2,j2) * LLbjbj (b2,j2,b1,j1)
#               t1aibj (a,i,b1,j1) = T2old_ab (a,i,b2,j2) * LLbjbj (b2,j2,b1,j1)
#
#               tpqqp  (i,b1,j1,a) = taibj  (a,i,b1,j1)
#               t1pqqp (i,b1,j1,a) = t1aibj (a,i,b1,j1)
#
#               PREPARE  L2R2_abba (i,b1,j1,a) += tpqqp  (i,b1,j1,a)
#               PREPARE  L2T2_abba (i,b1,j1,a) += t1pqqp (i,b1,j1,a)
#            ENDDO j1
#         ENDDO i
#         DEALLOCATE  LLbjbj (b2,j2,b1,*)
#      ENDPARDO  a, b2, j2, b1
#
#      PARDO  b, a2, j2, b1
#         ALLOCATE  Lajib (a2,j2,*,b1)
#         DO i1
#            REQUEST                L2AB (i1,a2,j2,b1) i1
#            Lajib (a2,j2,i1,b1)  = L2AB (i1,a2,j2,b1)
#         ENDDO i1
#         DO i
#            REQUEST              R2AB (a2,i,b,j2) i
#            REQUEST              T2old_ab (a2,i,b,j2) i
#            tpqpq  (i,b,a2,j2) = R2AB (a2,i,b,j2)
#            t1pqpq (i,b,a2,j2) = T2old_ab (a2,i,b,j2)
#            DO i1
#               tibib  (i,b,i1,b1) = tpqpq  (i,b,a2,j2) * Lajib (a2,j2,i1,b1)
#               t1ibib (i,b,i1,b1) = t1pqpq (i,b,a2,j2) * Lajib (a2,j2,i1,b1)
#
#               PREPARE  L2R2_abab (i,b,i1,b1) += tibib  (i,b,i1,b1)
#               PREPARE  L2T2_abab (i,b,i1,b1) += t1ibib (i,b,i1,b1)
#            ENDDO i1
#         ENDDO i
#         DEALLOCATE  Lajib (a2,j2,*,b1)
#      ENDPARDO  b, a2, j2, b1
#
#
#     R1 * L2 --> LR1L2_ai
#
#
      PARDO  i2, a2, a, i
         REQUEST             L2AA (i,a,i2,a2) i2
         GET                 R1A  (a2,i2)
         taiai (a,i,a2,i2) = L2AA (i,a,i2,a2)
         tai (a,i)  = taiai (a,i,a2,i2) * R1A (a2,i2)
         LR1L2_ai (a,i) += tai (a,i)
         DO i1
            GET  t1a_old (a,i1)
            tpp (a,i1) = t1a_old (a,i1)
            tii (i,i1) = tai (a,i) * tpp (a,i1)
            L_Z_ii (i,i1) += tii (i,i1)
         ENDDO i1
         DO a1
            GET  t1a_old (a1,i)
            taa (a,a1) = tai (a,i) * t1a_old (a1,i)
            L_Z_aa (a,a1) += taa (a,a1)
         ENDDO a1
      ENDPARDO  i2, a2, a, i

      PARDO  j2, b2, b, j
         REQUEST             L2BB (j,b,j2,b2) j2
         GET                 R1B  (b2,j2)
         tbjbj (b,j,b2,j2) = L2BB (j,b,j2,b2)
         tbj (b,j)  = tbjbj (b,j,b2,j2) * R1B (b2,j2)
         LR1L2_bj (b,j) += tbj (b,j)
         DO j1
            GET  t1b_old (b,j1)
            tqq (b,j1) = t1b_old (b,j1)
            tjj (j,j1) = tbj (b,j) * tqq (b,j1)
            L_Z_jj (j,j1) += tjj (j,j1)
         ENDDO j1
         DO b1
            GET  t1b_old (b1,j)
            tbb (b,b1) = tbj (b,j) * t1b_old (b1,j)
            L_Z_bb (b,b1) += tbb (b,b1)
         ENDDO b1
      ENDPARDO  j2, b2, b, j

      PARDO  j2, b2, a, i
         REQUEST             L2AB (i,a,j2,b2) j2
         GET                 R1B  (b2,j2)
         taibj (a,i,b2,j2) = L2AB (i,a,j2,b2)
         tai (a,i)  = taibj (a,i,b2,j2) * R1B (b2,j2)
         LR1L2_ai (a,i) += tai (a,i)
         DO i1
            GET  t1a_old (a,i1)
            tpp (a,i1) = t1a_old (a,i1)
            tii (i,i1) = tai (a,i) * tpp (a,i1)
            L_Z_ii (i,i1) += tii (i,i1)
         ENDDO i1
         DO a1
            GET  t1a_old (a1,i)
            taa (a,a1) = tai (a,i) * t1a_old (a1,i)
            L_Z_aa (a,a1) += taa (a,a1)
         ENDDO a1
      ENDPARDO  j2, b2, a, i

      PARDO  i2, a2, b, j
         REQUEST             L2AB (i2,a2,j,b) i2
         GET                 R1A  (a2,i2)
         tbjai (b,j,a2,i2) = L2AB (i2,a2,j,b)
         tbj (b,j)  = tbjai (b,j,a2,i2) * R1A (a2,i2)
         LR1L2_bj (b,j) += tbj (b,j)
         DO j1
            GET  t1b_old (b,j1)
            tqq (b,j1) = t1b_old (b,j1)
            tjj (j,j1) = tbj (b,j) * tqq (b,j1)
            L_Z_jj (j,j1) += tjj (j,j1)
         ENDDO j1
         DO b1
            GET  t1b_old (b1,j)
            tbb (b,b1) = tbj (b,j) * t1b_old (b1,j)
            L_Z_bb (b,b1) += tbb (b,b1)
         ENDDO b1
      ENDPARDO  i2, a2, b, j

      PARDO  i, a, i2, a2
         REQUEST             R2AA (a,i,a2,i2) i
         REQUEST             T2old_aa (a,i,a2,i2) i
         GET                 L1A  (i2,a2)
         t1ai (a,i)        = R2AA  (a,i,a2,i2) * L1A (i2,a2)
         t2ai (a,i)        = T2old_aa  (a,i,a2,i2) * L1A (i2,a2)
         LR2L1_ai (a,i) += t1ai (a,i)
         L_Z1_ai  (a,i) += t1ai (a,i)
         L_Z2_ai  (a,i) += t2ai (a,i)
      ENDPARDO  i, a, i2, a2

      PARDO  i, a, j2, b2
         REQUEST              R2AB (a,i,b2,j2) i
         REQUEST              T2old_ab (a,i,b2,j2) i
         GET                  L1B (j2,b2)
         t1ai (a,i)         = R2AB  (a,i,b2,j2) * L1B  (j2,b2)
         t2ai (a,i)         = T2old_ab  (a,i,b2,j2) * L1B  (j2,b2)
         LR2L1_ai (a,i) += t1ai (a,i)
         L_Z1_ai  (a,i) += t1ai (a,i)
         L_Z2_ai  (a,i) += t2ai (a,i)
      ENDPARDO  i, a, j2, b2

      PARDO  j, b, j2, b2
         REQUEST             R2BB (b,j,b2,j2) j
         REQUEST             T2old_bb (b,j,b2,j2) j
         GET                 L1B  (j2,b2)
         t1bj (b,j)        = R2BB  (b,j,b2,j2) * L1B (j2,b2)
         t2bj (b,j)        = T2old_bb  (b,j,b2,j2) * L1B (j2,b2)
         LR2L1_bj (b,j) += t1bj (b,j)
         L_Z1_bj  (b,j) += t1bj (b,j)
         L_Z2_bj  (b,j) += t2bj (b,j)
      ENDPARDO  j, b, j2, b2

      PARDO  j, b, i2, a2
         REQUEST              R2AB (a2,i2,b,j) j
         REQUEST              T2old_ab (a2,i2,b,j) j
         GET                  L1A (i2,a2)
         t1bj (b,j)         = L1A (i2,a2) * R2AB      (a2,i2,b,j)
         t2bj (b,j)         = L1A (i2,a2) * T2old_ab  (a2,i2,b,j)
         LR2L1_bj (b,j) += t1bj (b,j)
         L_Z1_bj  (b,j) += t1bj (b,j)
         L_Z2_bj  (b,j) += t2bj (b,j)
      ENDPARDO  j, b, i2, a2
#
#
#     R2 * L2 --> R2L2_ii
#     T2 * L2 --> T2L2_ii
#
#
      PARDO  i3, a2, a3
         ALLOCATE  Liaia  (*,a3,i3,a2)
         ALLOCATE  Laaia  (*,a3,i3,a2)
         ALLOCATE  L1aaia (*,a3,i3,a2)
         DO i
            REQUEST               L2AA (i,a2,i3,a3) i
            Liaia (i,a3,i3,a2)  = L2AA (i,a2,i3,a3)
            Liaia (i,a3,i3,a2) *= 0.5
            DO a
               GET  R1A (a,i)
               GET  t1a_old (a,i)
               t2pppp (a,a3,i3,a2)  = t1a_old (a,i) * Liaia (i,a3,i3,a2)
               t3pppp (a,a3,i3,a2)  = R1A  (a,i) * Liaia (i,a3,i3,a2)
               Laaia  (a,a3,i3,a2) += t2pppp (a,a3,i3,a2)
               L1aaia (a,a3,i3,a2) += t3pppp (a,a3,i3,a2)
            ENDDO a
         ENDDO i
         DO i2
            REQUEST               T2old_aa (a3,i3,a2,i2) i2
            REQUEST               R2AA (a3,i3,a2,i2) i2
            DO i
               tii (i,i2) = Liaia (i,a3,i3,a2) * T2old_aa (a3,i3,a2,i2)
               tpp (i,i2) = Liaia (i,a3,i3,a2) * R2AA (a3,i3,a2,i2)
               LT2L2_ii (i,i2) += tii (i,i2)
               LR2L2_ii (i,i2) += tpp (i,i2)
               L_Y_ii   (i,i2) += tii (i,i2)
               L_Z_ii   (i,i2) += tpp (i,i2)
            ENDDO i
            DO a
               tai  (a,i2)  = Laaia  (a,a3,i3,a2) * R2AA (a3,i3,a2,i2)
               t1ai (a,i2)  = L1aaia (a,a3,i3,a2) * T2old_aa (a3,i3,a2,i2)
               t2ai (a,i2)  = Laaia  (a,a3,i3,a2) * T2old_aa (a3,i3,a2,i2)
               tai  (a,i2) += t1ai (a,i2)
               L_Z1_ai (a,i2) -= tai  (a,i2)
               L_Z2_ai (a,i2) -= t2ai (a,i2)
            ENDDO a
         ENDDO i2
         DEALLOCATE  L1aaia (*,a3,i3,a2)
         DEALLOCATE  Laaia  (*,a3,i3,a2)
         DEALLOCATE  Liaia  (*,a3,i3,a2)
      ENDPARDO  i3, a2, a3

      PARDO  j3, b2, b3
         ALLOCATE  Ljbjb  (*,b3,j3,b2)
         ALLOCATE  Lbbjb  (*,b3,j3,b2)
         ALLOCATE  L1bbjb (*,b3,j3,b2)
         DO j
            REQUEST               L2BB (j,b2,j3,b3) j
            Ljbjb (j,b3,j3,b2)  = L2BB (j,b2,j3,b3)
            Ljbjb (j,b3,j3,b2) *= 0.5
            DO b
               GET  R1B (b,j)
               GET  t1b_old (b,j)
               t2qqqq (b,b3,j3,b2)  = t1b_old (b,j) * Ljbjb (j,b3,j3,b2)
               t3qqqq (b,b3,j3,b2)  = R1B  (b,j) * Ljbjb (j,b3,j3,b2)
               Lbbjb  (b,b3,j3,b2) += t2qqqq (b,b3,j3,b2)
               L1bbjb (b,b3,j3,b2) += t3qqqq (b,b3,j3,b2)
            ENDDO b
         ENDDO j
         DO j2
            REQUEST               T2old_bb (b3,j3,b2,j2) j2
            REQUEST               R2BB (b3,j3,b2,j2) j2
            DO j
               tjj (j,j2) = Ljbjb (j,b3,j3,b2) * T2old_bb (b3,j3,b2,j2)
               tqq (j,j2) = Ljbjb (j,b3,j3,b2) * R2BB (b3,j3,b2,j2)
               LT2L2_jj (j,j2) += tjj (j,j2)
               LR2L2_jj (j,j2) += tqq (j,j2)
               L_Y_jj   (j,j2) += tjj (j,j2)
               L_Z_jj   (j,j2) += tqq (j,j2)
            ENDDO j
            DO b
               tbj  (b,j2)  = Lbbjb  (b,b3,j3,b2) * R2BB (b3,j3,b2,j2)
               t1bj (b,j2)  = L1bbjb (b,b3,j3,b2) * T2old_bb (b3,j3,b2,j2)
               t2bj (b,j2)  = Lbbjb  (b,b3,j3,b2) * T2old_bb (b3,j3,b2,j2)
               tbj  (b,j2) += t1bj (b,j2)
               L_Z1_bj (b,j2) -= tbj  (b,j2)
               L_Z2_bj (b,j2) -= t2bj (b,j2)
            ENDDO b
         ENDDO j2
         DEALLOCATE  L1bbjb (*,b3,j3,b2)
         DEALLOCATE  Lbbjb  (*,b3,j3,b2)
         DEALLOCATE  Ljbjb  (*,b3,j3,b2)
      ENDPARDO  j3, b2, b3

      PARDO  j3, a2, b3
         ALLOCATE  Liajb  (*,a2,j3,b3)
         ALLOCATE  Laajb  (*,a2,j3,b3)
         ALLOCATE  L1aajb (*,a2,j3,b3)
         DO i
            REQUEST               L2AB (i,a2,j3,b3) i
            Liajb (i,a2,j3,b3)  = L2AB (i,a2,j3,b3)
            DO a
               GET  R1A (a,i)
               GET  t1a_old (a,i)
               tppqq  (a,a2,j3,b3)  = t1a_old (a,i) * Liajb (i,a2,j3,b3)
               t1ppqq (a,a2,j3,b3)  = R1A  (a,i) * Liajb (i,a2,j3,b3)
               Laajb  (a,a2,j3,b3) += tppqq  (a,a2,j3,b3)
               L1aajb (a,a2,j3,b3) += t1ppqq (a,a2,j3,b3)
            ENDDO a
         ENDDO i
         DO i2
            REQUEST                T2old_ab (a2,i2,b3,j3) i2
            REQUEST                R2AB (a2,i2,b3,j3) i2
            tpqqp  (a2,j3,b3,i2) = T2old_ab (a2,i2,b3,j3)
            t1pqqp (a2,j3,b3,i2) = R2AB (a2,i2,b3,j3)
            DO i
               tii (i,i2) = Liajb (i,a2,j3,b3) * tpqqp  (a2,j3,b3,i2)
               tpp (i,i2) = Liajb (i,a2,j3,b3) * t1pqqp (a2,j3,b3,i2)
               LT2L2_ii (i,i2) += tii (i,i2)
               LR2L2_ii (i,i2) += tpp (i,i2)
               L_Y_ii   (i,i2) += tii (i,i2)
               L_Z_ii   (i,i2) += tpp (i,i2)
            ENDDO i
            DO a
               tai  (a,i2)  = Laajb  (a,a2,j3,b3) * t1pqqp (a2,j3,b3,i2)
               t1ai (a,i2)  = L1aajb (a,a2,j3,b3) * tpqqp  (a2,j3,b3,i2)
               t2ai (a,i2)  = Laajb  (a,a2,j3,b3) * tpqqp  (a2,j3,b3,i2)
               tai  (a,i2) += t1ai (a,i2)
               L_Z1_ai (a,i2) -= tai  (a,i2)
               L_Z2_ai (a,i2) -= t2ai (a,i2)
            ENDDO a
         ENDDO i2
         DEALLOCATE  L1aajb (*,a2,j3,b3)
         DEALLOCATE  Laajb  (*,a2,j3,b3)
         DEALLOCATE  Liajb  (*,a2,j3,b3)
      ENDPARDO  j3, a2, b3

      PARDO  i3, b2, a3
         ALLOCATE  L1jbia  (*,b2,i3,a3)
         ALLOCATE  Lbbia  (*,b2,i3,a3)
         ALLOCATE  L1bbia (*,b2,i3,a3)
         DO j
            REQUEST               L2AB (i3,a3,j,b2) j
            L1jbia (j,b2,i3,a3)  = L2AB (i3,a3,j,b2)
            DO b
               GET  R1B (b,j)
               GET  t1b_old (b,j)
               tqqpp  (b,b2,i3,a3)  = t1b_old (b,j) * L1jbia (j,b2,i3,a3)
               t1qqpp (b,b2,i3,a3)  = R1B  (b,j) * L1jbia (j,b2,i3,a3)
               Lbbia  (b,b2,i3,a3) += tqqpp  (b,b2,i3,a3)
               L1bbia (b,b2,i3,a3) += t1qqpp (b,b2,i3,a3)
            ENDDO b
         ENDDO j
         DO j2
            REQUEST                T2old_ab (a3,i3,b2,j2) j2
            REQUEST                R2AB (a3,i3,b2,j2) j2
            tqppq  (b2,i3,a3,j2) = T2old_ab (a3,i3,b2,j2)
            t1qppq (b2,i3,a3,j2) = R2AB (a3,i3,b2,j2)
            DO j
               tjj (j,j2) = L1jbia (j,b2,i3,a3) * tqppq  (b2,i3,a3,j2)
               tqq (j,j2) = L1jbia (j,b2,i3,a3) * t1qppq (b2,i3,a3,j2)
               LT2L2_jj (j,j2) += tjj (j,j2)
               LR2L2_jj (j,j2) += tqq (j,j2)
               L_Y_jj   (j,j2) += tjj (j,j2)
               L_Z_jj   (j,j2) += tqq (j,j2)
            ENDDO j
            DO b
               tbj  (b,j2)  = Lbbia  (b,b2,i3,a3) * t1qppq (b2,i3,a3,j2)
               t1bj (b,j2)  = L1bbia (b,b2,i3,a3) * tqppq  (b2,i3,a3,j2)
               t2bj (b,j2)  = Lbbia  (b,b2,i3,a3) * tqppq  (b2,i3,a3,j2)
               tbj  (b,j2) += t1bj (b,j2)
               L_Z1_bj (b,j2) -= tbj  (b,j2)
               L_Z2_bj (b,j2) -= t2bj (b,j2)
            ENDDO b
         ENDDO j2
         DEALLOCATE  L1bbia (b,b2,i3,a3)
         DEALLOCATE  Lbbia  (*,b2,i3,a3)
         DEALLOCATE  L1jbia  (*,b2,i3,a3)
      ENDPARDO  i3, b2, a3
#
#
#      Z intermediates for Dijab
#
#
      PARDO  a2, i2, a
         GET  R1A (a,i2)
         GET  L1A (i2,a2)
         taa (a,a2)  = R1A (a,i2) * L1A (i2,a2)
         DO i
            GET  t1a_old (a2,i)
            tai (a,i) = taa (a,a2) * t1a_old (a2,i)
            L_Z1_ai (a,i) -= tai (a,i)
         ENDDO i
      ENDPARDO  a2, i2, a

      PARDO  a2, i2, i
         GET  R1A (a2,i)
         GET  L1A (i2,a2)
         tii (i2,i)  = L1A (i2,a2) * R1A (a2,i)
         DO a
            GET  t1a_old (a,i2)
            tai (a,i) = t1a_old (a,i2) * tii (i2,i)
            L_Z1_ai (a,i) -= tai (a,i)
         ENDDO a
      ENDPARDO  a2, i2, i

      PARDO  a2, i2, a
         GET  L1A (i2,a2)
         GET  t1a_old (a,i2)
         tpp (a,i2) = t1a_old (a,i2)
         taa (a,a2)  = tpp (a,i2) * L1A (i2,a2)
         DO i
            GET  t1a_old (a2,i)
            tai (a,i) = taa (a,a2) * t1a_old (a2,i)
            L_Z2_ai (a,i) -= tai (a,i)
         ENDDO i
      ENDPARDO  a2, i2, a

      PARDO  a, i
         GET          L1A (i,a)
         tai (a,i)  = L1A (i,a)
         tia (i,a)  = L1A (i,a)
         DO i2
            GET  R1A (a,i2)
            GET  t1a_old (a,i2)
            tpp (a,i2) = t1a_old (a,i2)
            tii  (i,i2)  = tia (i,a) * tpp (a,i2)
            t1ii (i,i2)  = tia (i,a) * R1A (a,i2)
            L_Y_ii (i,i2) += tii  (i,i2)
            L_Z_ii (i,i2) += t1ii (i,i2)
         ENDDO i2
         DO a2
            GET  R1A (a2,i)
            GET  t1a_old (a2,i)
            taa  (a,a2) = tai (a,i) * t1a_old (a2,i)
            t1aa (a,a2) = tai (a,i) * R1A  (a2,i)
            L_Y_aa (a,a2) += taa  (a,a2)
            L_Z_aa (a,a2) += t1aa (a,a2)
         ENDDO a2
      ENDPARDO  a, i

      PARDO  b2, j2, b
         GET  R1B (b,j2)
         GET  L1B (j2,b2)
         tbb (b,b2)  = R1B (b,j2) * L1B (j2,b2)
         DO j
            GET  t1b_old (b2,j)
            tbj (b,j) = tbb (b,b2) * t1b_old (b2,j)
            L_Z1_bj (b,j) -= tbj (b,j)
         ENDDO j
      ENDPARDO  b2, j2, b

      PARDO  b2, j2, j
         GET  R1B (b2,j)
         GET  L1B (j2,b2)
         tjj (j2,j)  = L1B (j2,b2) * R1B (b2,j)
         DO b
            GET  t1b_old (b,j2)
            tbj (b,j) = t1b_old (b,j2) * tjj (j2,j)
            L_Z1_bj (b,j) -= tbj (b,j)
         ENDDO b
      ENDPARDO  b2, j2, j

      PARDO  b2, j2, b
         GET  L1B (j2,b2)
         GET  t1b_old (b,j2)
         tqq (b,j2) = t1b_old (b,j2)
         tbb (b,b2)  = tqq (b,j2) * L1B (j2,b2)
         DO j
            GET  t1b_old (b2,j)
            tbj (b,j) = tbb (b,b2) * t1b_old (b2,j)
            L_Z2_bj (b,j) -= tbj (b,j)
         ENDDO j
      ENDPARDO  b2, j2, b

      PARDO  b, j
         GET          L1B (j,b)
         tbj (b,j)  = L1B (j,b)
         tjb (j,b)  = L1B (j,b)
         DO j2
            GET  R1B (b,j2)
            GET  t1b_old (b,j2)
            tqq (b,j2) = t1b_old (b,j2)
            tjj  (j,j2)  = tjb (j,b) * tqq (b,j2)
            t1jj (j,j2)  = tjb (j,b) * R1B (b,j2)
            L_Y_jj (j,j2) += tjj  (j,j2)
            L_Z_jj (j,j2) += t1jj (j,j2)
         ENDDO j2
         DO b2
            GET  R1B (b2,j)
            GET  t1b_old (b2,j)
            tbb  (b,b2) = tbj (b,j) * t1b_old (b2,j)
            t1bb (b,b2) = tbj (b,j) * R1B  (b2,j)
            L_Y_bb (b,b2) += tbb  (b,b2)
            L_Z_bb (b,b2) += t1bb (b,b2)
         ENDDO b2
      ENDPARDO  b, j
#
#
#     R2 * L2 --> R2L2_aa
#     T2 * L2 --> T2L2_aa
#
#
      PARDO  a3, i2, i3
         ALLOCATE  LLaiai  (*,i2,a3,i3)
         ALLOCATE  Liiai  (*,i2,a3,i3)
         ALLOCATE  L1iiai (*,i2,a3,i3)
         DO a
            REQUEST               L2AA (i2,a,i3,a3) a
            LLaiai (a,i2,a3,i3)  = L2AA (i2,a,i3,a3)
            LLaiai (a,i2,a3,i3) *= -0.5
            DO i
               GET  R1A (a,i)
               GET  t1a_old (a,i)
               tpppp  (i,i2,a3,i3)  = t1a_old (a,i) * LLaiai (a,i2,a3,i3)
               t1pppp (i,i2,a3,i3)  = R1A  (a,i) * LLaiai (a,i2,a3,i3)
               Liiai  (i,i2,a3,i3) += tpppp (i,i2,a3,i3)
               L1iiai (i,i2,a3,i3) += t1pppp (i,i2,a3,i3)
            ENDDO i
         ENDDO a
         DO a2
            REQUEST                R2AA (a3,i3,a2,i2) a2
            REQUEST                T2old_aa (a3,i3,a2,i2) a2
            tiaia  (i2,a3,i3,a2) = R2AA (a3,i3,a2,i2)
            t1iaia (i2,a3,i3,a2) = T2old_aa (a3,i3,a2,i2)
            DO a
               taa (a,a2)  = LLaiai (a,i2,a3,i3) * t1iaia (i2,a3,i3,a2)
               tpp (a,a2)  = LLaiai (a,i2,a3,i3) * tiaia  (i2,a3,i3,a2)
               LT2L2_aa (a,a2) += taa (a,a2)
               LR2L2_aa (a,a2) += tpp (a,a2)
               L_Y_aa   (a,a2) -= taa (a,a2)
               L_Z_aa   (a,a2) -= tpp (a,a2)
            ENDDO a
            DO i
               tai  (a2,i)  = Liiai  (i,i2,a3,i3) * tiaia  (i2,a3,i3,a2)
               t1ai (a2,i)  = L1iiai (i,i2,a3,i3) * t1iaia (i2,a3,i3,a2)
               t2ai (a2,i)  = Liiai  (i,i2,a3,i3) * t1iaia (i2,a3,i3,a2)
               tai  (a2,i) += t1ai (a2,i)
               L_Z1_ai (a2,i) += tai  (a2,i)
               L_Z2_ai (a2,i) += t2ai (a2,i)
            ENDDO i
         ENDDO a2
         DEALLOCATE  L1iiai (*,i2,a3,i3)
         DEALLOCATE  Liiai  (*,i2,a3,i3)
         DEALLOCATE  LLaiai  (*,i2,a3,i3)
      ENDPARDO  a3, i2, i3

      PARDO  b3, j2, j3
         ALLOCATE  LLbjbj  (*,j2,b3,j3)
         ALLOCATE  Ljjbj  (*,j2,b3,j3)
         ALLOCATE  L1jjbj (*,j2,b3,j3)
         DO b
            REQUEST               L2BB (j2,b,j3,b3) b
            LLbjbj (b,j2,b3,j3)  = L2BB (j2,b,j3,b3)
            LLbjbj (b,j2,b3,j3) *= -0.5
            DO j
               GET  R1B (b,j)
               GET  t1b_old (b,j)
               tqqqq  (j,j2,b3,j3)  = t1b_old (b,j) * LLbjbj (b,j2,b3,j3)
               t1qqqq (j,j2,b3,j3)  = R1B  (b,j) * LLbjbj (b,j2,b3,j3)
               Ljjbj  (j,j2,b3,j3) += tqqqq (j,j2,b3,j3)
               L1jjbj (j,j2,b3,j3) += t1qqqq (j,j2,b3,j3)
            ENDDO j
         ENDDO b
         DO b2
            REQUEST                R2BB (b3,j3,b2,j2) b2
            REQUEST                T2old_bb (b3,j3,b2,j2) b2
            tjbjb  (j2,b3,j3,b2) = R2BB (b3,j3,b2,j2)
            t1jbjb (j2,b3,j3,b2) = T2old_bb (b3,j3,b2,j2)
            DO b
               tbb (b,b2)  = LLbjbj (b,j2,b3,j3) * t1jbjb (j2,b3,j3,b2)
               tqq (b,b2)  = LLbjbj (b,j2,b3,j3) * tjbjb  (j2,b3,j3,b2)
               LT2L2_bb (b,b2) += tbb (b,b2)
               LR2L2_bb (b,b2) += tqq (b,b2)
               L_Y_bb   (b,b2) -= tbb (b,b2)
               L_Z_bb   (b,b2) -= tqq (b,b2)
            ENDDO b
            DO j
               tbj  (b2,j)  = Ljjbj  (j,j2,b3,j3) * tjbjb  (j2,b3,j3,b2)
               t1bj (b2,j)  = L1jjbj (j,j2,b3,j3) * t1jbjb (j2,b3,j3,b2)
               t2bj (b2,j)  = Ljjbj  (j,j2,b3,j3) * t1jbjb (j2,b3,j3,b2)
               tbj  (b2,j) += t1bj (b2,j)
               L_Z1_bj (b2,j) += tbj  (b2,j)
               L_Z2_bj (b2,j) += t2bj (b2,j)
            ENDDO j
         ENDDO b2
         DEALLOCATE  L1jjbj (*,j2,b3,j3)
         DEALLOCATE  Ljjbj  (*,j2,b3,j3)
         DEALLOCATE  LLbjbj  (*,j2,b3,j3)
      ENDPARDO  b3, j2, j3

      PARDO  b3, i2, j3
         ALLOCATE  Laibj  (*,i2,b3,j3)
         ALLOCATE  Liibj  (*,i2,b3,j3)
         ALLOCATE  L1iibj (*,i2,b3,j3)
         DO a
            REQUEST               L2AB (i2,a,j3,b3) a
            Laibj (a,i2,b3,j3)  = L2AB (i2,a,j3,b3)
            Laibj (a,i2,b3,j3) *= -1.0
            DO i
               GET  R1A (a,i)
               GET  t1a_old (a,i)
               tppqq  (i,i2,b3,j3)  = t1a_old (a,i) * Laibj (a,i2,b3,j3)
               t1ppqq (i,i2,b3,j3)  = R1A  (a,i) * Laibj (a,i2,b3,j3)
               Liibj  (i,i2,b3,j3) += tppqq  (i,i2,b3,j3)
               L1iibj (i,i2,b3,j3) += t1ppqq (i,i2,b3,j3)
            ENDDO i
         ENDDO a
         DO a2
            REQUEST                R2AB  (a2,i2,b3,j3) a2
            REQUEST                T2old_ab  (a2,i2,b3,j3) a2
            tpqqp  (i2,b3,j3,a2) = R2AB  (a2,i2,b3,j3)
            t1pqqp (i2,b3,j3,a2) = T2old_ab  (a2,i2,b3,j3)
            DO a
               taa (a,a2)  = Laibj (a,i2,b3,j3) * t1pqqp (i2,b3,j3,a2)
               tpp (a,a2)  = Laibj (a,i2,b3,j3) * tpqqp  (i2,b3,j3,a2)
               LT2L2_aa (a,a2) += taa (a,a2)
               LR2L2_aa (a,a2) += tpp (a,a2)
               L_Y_aa   (a,a2) -= taa (a,a2)
               L_Z_aa   (a,a2) -= tpp (a,a2)
            ENDDO a
            DO i
               tai  (a2,i)  = Liibj  (i,i2,b3,j3) * tpqqp  (i2,b3,j3,a2)
               t1ai (a2,i)  = L1iibj (i,i2,b3,j3) * t1pqqp (i2,b3,j3,a2)
               t2ai (a2,i)  = Liibj  (i,i2,b3,j3) * t1pqqp (i2,b3,j3,a2)
               tai  (a2,i) += t1ai (a2,i)
               L_Z1_ai (a2,i) += tai  (a2,i)
               L_Z2_ai (a2,i) += t2ai (a2,i)
            ENDDO i
         ENDDO a2
         DEALLOCATE  L1iibj (*,i2,b3,j3)
         DEALLOCATE  Liibj  (*,i2,b3,j3)
         DEALLOCATE  Laibj  (*,i2,b3,j3)
      ENDPARDO  b3, i2, j3

      PARDO  a3, j2, i3
         ALLOCATE  LLbjai  (*,j2,a3,i3)
         ALLOCATE  Ljjai  (*,j2,a3,i3)
         ALLOCATE  L1jjai (*,j2,a3,i3)
         DO b
            REQUEST               L2AB (i3,a3,j2,b) b
            LLbjai (b,j2,a3,i3)  = L2AB (i3,a3,j2,b)
            LLbjai (b,j2,a3,i3) *= -1.0
            DO j
               GET  R1B (b,j)
               GET  t1b_old (b,j)
               tqqpp  (j,j2,a3,i3)  = t1b_old (b,j) * LLbjai (b,j2,a3,i3)
               t1qqpp (j,j2,a3,i3)  = R1B  (b,j) * LLbjai (b,j2,a3,i3)
               Ljjai  (j,j2,a3,i3) += tqqpp  (j,j2,a3,i3)
               L1jjai (j,j2,a3,i3) += t1qqpp (j,j2,a3,i3)
            ENDDO j
         ENDDO b
         DO b2
            REQUEST                R2AB  (a3,i3,b2,j2) b2
            REQUEST                T2old_ab  (a3,i3,b2,j2) b2
            tqppq  (j2,a3,i3,b2) = R2AB  (a3,i3,b2,j2)
            t1qppq (j2,a3,i3,b2) = T2old_ab  (a3,i3,b2,j2)
            DO b
               tbb (b,b2)  = LLbjai (b,j2,a3,i3) * t1qppq (j2,a3,i3,b2)
               tqq (b,b2)  = LLbjai (b,j2,a3,i3) * tqppq  (j2,a3,i3,b2)
               LT2L2_bb (b,b2) += tbb (b,b2)
               LR2L2_bb (b,b2) += tqq (b,b2)
               L_Y_bb   (b,b2) -= tbb (b,b2)
               L_Z_bb   (b,b2) -= tqq (b,b2)
            ENDDO b
            DO j
               tbj  (b2,j)  = Ljjai  (j,j2,a3,i3) * tqppq  (j2,a3,i3,b2)
               t1bj (b2,j)  = L1jjai (j,j2,a3,i3) * t1qppq (j2,a3,i3,b2)
               t2bj (b2,j)  = Ljjai  (j,j2,a3,i3) * t1qppq (j2,a3,i3,b2)
               tbj  (b2,j) += t1bj (b2,j)
               L_Z1_bj (b2,j) += tbj  (b2,j)
               L_Z2_bj (b2,j) += t2bj (b2,j)
            ENDDO j
         ENDDO b2
         DEALLOCATE  L1jjai (*,j2,a3,i3)
         DEALLOCATE  Ljjai  (*,j2,a3,i3)
         DEALLOCATE  LLbjai  (*,j2,a3,i3)
      ENDPARDO  a3, j2, i3

      CREATE  DIS_OO1_A
      CREATE  DIS_OO2_A
      CREATE  DIS_OO3_A
      CREATE  DIS_OO4_A
      CREATE  DIS_OO1_B
      CREATE  DIS_OO2_B
      CREATE  DIS_OO3_B
      CREATE  DIS_OO4_B
      CREATE  DIS_VV1_A
      CREATE  DIS_VV2_A
      CREATE  DIS_VV3_A
      CREATE  DIS_VV4_A
      CREATE  DIS_VV1_B
      CREATE  DIS_VV2_B
      CREATE  DIS_VV3_B
      CREATE  DIS_VV4_B
      CREATE  DIS_VO1_A
      CREATE  DIS_VO2_A
      CREATE  DIS_VO3_A
      CREATE  DIS_VO4_A
      CREATE  DIS_VO1_B
      CREATE  DIS_VO2_B
      CREATE  DIS_VO3_B
      CREATE  DIS_VO4_B
      EXECUTE  SIP_BARRIER

      DO a
      DO a1
         taa  (a,a1) = LR2L2_aa (a,a1)
         t1aa (a,a1) = LT2L2_aa (a,a1)
         taa2 (a,a1) = L_Y_aa   (a,a1)
         t3aa (a,a1) = L_Z_aa   (a,a1)
         PUT  DIS_VV1_A (a,a1) += taa  (a,a1)
         PUT  DIS_VV2_A (a,a1) += t1aa (a,a1)
         PUT  DIS_VV3_A (a,a1) += taa2 (a,a1)
         PUT  DIS_VV4_A (a,a1) += t3aa (a,a1)
      ENDDO a1
      ENDDO a

      DO b
      DO b1
         tbb  (b,b1) = LR2L2_bb (b,b1)
         t1bb (b,b1) = LT2L2_bb (b,b1)
         tbb2 (b,b1) = L_Y_bb   (b,b1)
         t3bb (b,b1) = L_Z_bb   (b,b1)
         PUT  DIS_VV1_B (b,b1) += tbb  (b,b1)
         PUT  DIS_VV2_B (b,b1) += t1bb (b,b1)
         PUT  DIS_VV3_B (b,b1) += tbb2 (b,b1)
         PUT  DIS_VV4_B (b,b1) += t3bb (b,b1)
      ENDDO b1
      ENDDO b

      DO a
      DO i
         tai  (a,i) = LR1L2_ai (a,i)
         t1ai (a,i) = LR2L1_ai (a,i)
         t2ai (a,i) = L_Z1_ai  (a,i)
         t3ai (a,i) = L_Z2_ai  (a,i)
         PUT  DIS_VO1_A (a,i) += tai  (a,i)
         PUT  DIS_VO2_A (a,i) += t1ai (a,i)
         PUT  DIS_VO3_A (a,i) += t2ai (a,i)
         PUT  DIS_VO4_A (a,i) += t3ai (a,i)
      ENDDO i
      ENDDO a

      DO b
      DO j
         tbj  (b,j) = LR1L2_bj (b,j)
         t1bj (b,j) = LR2L1_bj (b,j)
         t2bj (b,j) = L_Z1_bj  (b,j)
         t3bj (b,j) = L_Z2_bj  (b,j)  
         PUT  DIS_VO1_B (b,j) += tbj  (b,j)
         PUT  DIS_VO2_B (b,j) += t1bj (b,j)
         PUT  DIS_VO3_B (b,j) += t2bj (b,j)
         PUT  DIS_VO4_B (b,j) += t3bj (b,j)
      ENDDO j
      ENDDO b

      DO i
      DO i1
         tii  (i,i1) = LR2L2_ii (i,i1)
         t1ii (i,i1) = LT2L2_ii (i,i1)
         t2ii (i,i1) = L_Y_ii   (i,i1)
         t3ii (i,i1) = L_Z_ii   (i,i1)
         PUT  DIS_OO1_A (i,i1) += tii  (i,i1)
         PUT  DIS_OO2_A (i,i1) += t1ii (i,i1)
         PUT  DIS_OO3_A (i,i1) += t2ii (i,i1)
         PUT  DIS_OO4_A (i,i1) += t3ii (i,i1)
      ENDDO i1
      ENDDO i

      DO j
      DO j1
         tjj  (j,j1) = LR2L2_jj (j,j1)
         t1jj (j,j1) = LT2L2_jj (j,j1)
         t2jj (j,j1) = L_Y_jj   (j,j1)
         t3jj (j,j1) = L_Z_jj   (j,j1) 
         PUT  DIS_OO1_B (j,j1) += tjj  (j,j1)
         PUT  DIS_OO2_B (j,j1) += t1jj (j,j1)
         PUT  DIS_OO3_B (j,j1) += t2jj (j,j1)
         PUT  DIS_OO4_B (j,j1) += t3jj (j,j1)
      ENDDO j1
      ENDDO j

      EXECUTE  SIP_BARRIER

      DO a
      DO a1
         GET           DIS_VV1_A (a,a1)
         GET           DIS_VV2_A (a,a1)
         GET           DIS_VV3_A (a,a1)
         GET           DIS_VV4_A (a,a1)
         taa  (a,a1) = DIS_VV1_A (a,a1)
         t1aa (a,a1) = DIS_VV2_A (a,a1)
         taa2 (a,a1) = DIS_VV3_A (a,a1)
         t3aa (a,a1) = DIS_VV4_A (a,a1)
         LR2L2_aa (a,a1) =  taa  (a,a1)
         LT2L2_aa (a,a1) =  t1aa (a,a1)
         L_Y_aa   (a,a1) =  taa2 (a,a1)
         L_Z_aa   (a,a1) =  t3aa (a,a1)
      ENDDO a1
      ENDDO a

      DO b
      DO b1
         GET           DIS_VV1_B (b,b1)
         GET           DIS_VV2_B (b,b1)
         GET           DIS_VV3_B (b,b1)
         GET           DIS_VV4_B (b,b1)
         tbb  (b,b1) = DIS_VV1_B (b,b1)
         t1bb (b,b1) = DIS_VV2_B (b,b1)
         tbb2 (b,b1) = DIS_VV3_B (b,b1)
         t3bb (b,b1) = DIS_VV4_B (b,b1)
         LR2L2_bb (b,b1) =  tbb  (b,b1)
         LT2L2_bb (b,b1) =  t1bb (b,b1)
         L_Y_bb   (b,b1) =  tbb2 (b,b1)
         L_Z_bb   (b,b1) =  t3bb (b,b1)
      ENDDO b1
      ENDDO b

      DO a
      DO i
         GET          DIS_VO1_A (a,i)
         GET          DIS_VO2_A (a,i)
         GET          DIS_VO3_A (a,i)
         GET          DIS_VO4_A (a,i)
         tai  (a,i) = DIS_VO1_A (a,i)
         t1ai (a,i) = DIS_VO2_A (a,i)
         t2ai (a,i) = DIS_VO3_A (a,i)
         t3ai (a,i) = DIS_VO4_A (a,i)
         LR1L2_ai (a,i) = tai  (a,i)
         LR2L1_ai (a,i) = t1ai (a,i)
         L_Z1_ai  (a,i) = t2ai (a,i)
         L_Z2_ai  (a,i) = t3ai (a,i)
      ENDDO i
      ENDDO a

      DO b
      DO j
         GET          DIS_VO1_B (b,j)
         GET          DIS_VO2_B (b,j)
         GET          DIS_VO3_B (b,j)
         GET          DIS_VO4_B (b,j)
         tbj  (b,j) = DIS_VO1_B (b,j)
         t1bj (b,j) = DIS_VO2_B (b,j)
         t2bj (b,j) = DIS_VO3_B (b,j)
         t3bj (b,j) = DIS_VO4_B (b,j)
         LR1L2_bj (b,j) = tbj  (b,j)
         LR2L1_bj (b,j) = t1bj (b,j)
         L_Z1_bj  (b,j) = t2bj (b,j)
         L_Z2_bj  (b,j) = t3bj (b,j)
      ENDDO j
      ENDDO b

      DO i
      DO i1
         GET           DIS_OO1_A (i,i1)
         GET           DIS_OO2_A (i,i1)
         GET           DIS_OO3_A (i,i1)
         GET           DIS_OO4_A (i,i1)
         tii  (i,i1) = DIS_OO1_A (i,i1)
         t1ii (i,i1) = DIS_OO2_A (i,i1)
         t2ii (i,i1) = DIS_OO3_A (i,i1)
         t3ii (i,i1) = DIS_OO4_A (i,i1)
         LR2L2_ii (i,i1) =  tii  (i,i1)
         LT2L2_ii (i,i1) =  t1ii (i,i1)
         L_Y_ii   (i,i1) =  t2ii (i,i1)
         L_Z_ii   (i,i1) =  t3ii (i,i1)
      ENDDO i1
      ENDDO i

      DO j
      DO j1
         GET           DIS_OO1_B (j,j1)
         GET           DIS_OO2_B (j,j1)
         GET           DIS_OO3_B (j,j1)
         GET           DIS_OO4_B (j,j1)
         tjj  (j,j1) = DIS_OO1_B (j,j1)
         t1jj (j,j1) = DIS_OO2_B (j,j1)
         t2jj (j,j1) = DIS_OO3_B (j,j1)
         t3jj (j,j1) = DIS_OO4_B (j,j1)
         LR2L2_jj (j,j1) =  tjj  (j,j1)
         LT2L2_jj (j,j1) =  t1jj (j,j1)
         L_Y_jj   (j,j1) =  t2jj (j,j1)
         L_Z_jj   (j,j1) =  t3jj (j,j1)
      ENDDO j1
      ENDDO j

      EXECUTE  SIP_BARRIER
      DELETE  DIS_OO1_A
      DELETE  DIS_OO2_A
      DELETE  DIS_OO3_A
      DELETE  DIS_OO4_A
      DELETE  DIS_OO1_B
      DELETE  DIS_OO2_B
      DELETE  DIS_OO3_B
      DELETE  DIS_OO4_B
      DELETE  DIS_VV1_A
      DELETE  DIS_VV2_A
      DELETE  DIS_VV3_A
      DELETE  DIS_VV4_A
      DELETE  DIS_VV1_B
      DELETE  DIS_VV2_B
      DELETE  DIS_VV3_B
      DELETE  DIS_VV4_B
      DELETE  DIS_VO1_A
      DELETE  DIS_VO2_A
      DELETE  DIS_VO3_A
      DELETE  DIS_VO4_A
      DELETE  DIS_VO1_B
      DELETE  DIS_VO2_B
      DELETE  DIS_VO3_B
      DELETE  DIS_VO4_B
#
#     
#          ...ready!
#     
#     
      ENDPROC  EOM_DENS_INT
#-------------------------------------------------------------------------





# ----------------------------------------------------------------------------- 
#
#     ---------------------
      PROC  BACK_TRANSFORMS
#     ---------------------
#
#
      PARDO  a, a1, a2, i
         REQUEST  Dabci_aaaa (a,a1,a2,i) a
         DO mu 
            Txaai(mu,a1,a2,i)      = Dabci_aaaa(a,a1,a2,i)*ca(mu,a)
            Txaai(mu,a1,a2,i)     *= 0.25
            PREPARE Dxaai(mu,a1,a2,i) += Txaai(mu,a1,a2,i)  
         ENDDO mu 
      ENDPARDO  a, a1, a2, i

      PARDO  b, b1, b2, j
         REQUEST  Dabci_bbbb (b,b1,b2,j) b
         DO mu
            Txbbj(mu,b1,b2,j)      = Dabci_bbbb(b,b1,b2,j)*cb(mu,b)
            Txbbj(mu,b1,b2,j)     *= 0.25
            PREPARE Dxbbj(mu,b1,b2,j) += Txbbj(mu,b1,b2,j)
         ENDDO mu
      ENDPARDO  b, b1, b2, j

      PARDO  b1, a, b, i
         REQUEST  Dabci_baba (b1,a,b,i) b1
         DO mu
            Txabi(mu,a,b,i)      = Dabci_baba(b1,a,b,i)*cb(mu,b1)
            Txabi(mu,a,b,i)     *= 0.25
            PREPARE Dxabi(mu,a,b,i) += Txabi(mu,a,b,i)
         ENDDO mu
      ENDPARDO  b1, a, b, i

      PARDO  a1, b, a, j
         REQUEST  Dabci_abab (a1,b,a,j) a1
         DO mu
            Txbaj(mu,b,a,j)      = Dabci_abab(a1,b,a,j)*ca(mu,a1)
            Txbaj(mu,b,a,j)     *= 0.25
            PREPARE Dxbaj(mu,b,a,j) += Txbaj(mu,b,a,j)
         ENDDO mu
      ENDPARDO  a1, b, a, j

      PARDO  a, i2, i1, i
         REQUEST  Dijka_aaaa (i,i1,i2,a) a
         DO sigma 
            Tiiix(i,i1,i2,sigma)      = Dijka_aaaa(i,i1,i2,a)*ca(sigma,a)
            Tiiix(i,i1,i2,sigma)     *= 0.25
            PREPARE Diiix(i,i1,i2,sigma) += Tiiix(i,i1,i2,sigma)
         ENDDO sigma
      ENDPARDO  a, i2, i1, i

      PARDO  b, j2, j1, j
         REQUEST  Dijka_bbbb (j,j1,j2,b) b
         DO sigma
            Tjjjx(j,j1,j2,sigma)      = Dijka_bbbb(j,j1,j2,b)*cb(sigma,b)
            Tjjjx(j,j1,j2,sigma)     *= 0.25
            PREPARE Djjjx(j,j1,j2,sigma) += Tjjjx(j,j1,j2,sigma)
         ENDDO sigma
      ENDPARDO  b, j2, j1, j

      PARDO  b, i1, j, i
         REQUEST  Dijka_abab (i,j,i1,b) b
         DO sigma 
            Tijix(i,j,i1,sigma)      = Dijka_abab (i,j,i1,b)*cb(sigma,b) 
            Tijix(i,j,i1,sigma)     *= 0.25
            PREPARE Dijix(i,j,i1,sigma) += Tijix(i,j,i1,sigma) 
         ENDDO sigma 
      ENDPARDO  b, i1, j, i

      PARDO  a, j1, i, j
         REQUEST  Dijka_baba (j,i,j1,a) a
         DO sigma
            Tjijx(j,i,j1,sigma)      = Dijka_baba (j,i,j1,a)*ca(sigma,a)
            Tjijx(j,i,j1,sigma)     *= 0.25
            PREPARE Djijx(j,i,j1,sigma) += Tjijx(j,i,j1,sigma)
         ENDDO sigma
      ENDPARDO  a, j1, i, j

      EXECUTE  SERVER_BARRIER
#
#  DIBJA
#
      PARDO sigma, a1, i, i1
            Tiaix(i,a1,i1,sigma) = 0.0
            DO a
               REQUEST Dibja_aaaa(i,a1,i1,a) a
               T1iaix(i,a1,i1,sigma)  = Dibja_aaaa(i,a1,i1,a)*ca(sigma,a)
               Tiaix(i,a1,i1,sigma)  += T1iaix(i,a1,i1,sigma)
            ENDDO a
            PREPARE Diaix(i,a1,i1,sigma) = Tiaix(i,a1,i1,sigma)
      ENDPARDO sigma, a1, i, i1

      PARDO sigma, b1, i, i1 
            Tibix(i,b1,i1,sigma) = 0.0       
            DO b
               REQUEST Dibja_abab(i,b1,i1,b) b  
               T1ibix(i,b1,i1,sigma) = Dibja_abab(i,b1,i1,b)*cb(sigma,b) 
               Tibix(i,b1,i1,sigma) += T1ibix(i,b1,i1,sigma)  
            ENDDO b 
            PREPARE Dibix(i,b1,i1,sigma) = Tibix(i,b1,i1,sigma) 
      ENDPARDO sigma, b1, i, i1

      PARDO sigma, a1, j, j1
            Tjajx(j,a1,j1,sigma) = 0.0
            DO a
               REQUEST Dibja_baba(j,a1,j1,a) a
               T1jajx(j,a1,j1,sigma) = Dibja_baba(j,a1,j1,a)*ca(sigma,a)
               Tjajx(j,a1,j1,sigma) += T1jajx(j,a1,j1,sigma)
            ENDDO a
            PREPARE Djajx(j,a1,j1,sigma) = Tjajx(j,a1,j1,sigma)
      ENDPARDO sigma, a1, j, j1

      PARDO sigma, b1, j, j1
            Tjbjx(j,b1,j1,sigma) = 0.0
            DO b
               REQUEST Dibja_bbbb(j,b1,j1,b) b
               T1jbjx(j,b1,j1,sigma) = Dibja_bbbb(j,b1,j1,b)*cb(sigma,b)
               Tjbjx(j,b1,j1,sigma) += T1jbjx(j,b1,j1,sigma)
            ENDDO b
            PREPARE Djbjx(j,b1,j1,sigma) = Tjbjx(j,b1,j1,sigma)
      ENDPARDO sigma, b1, j, j1

      PARDO sigma, b1, i, j1
            Tibjx(i,b1,j1,sigma) = 0.0
            DO a
               REQUEST Dibja_abba(i,b1,j1,a) a
               T1ibjx(i,b1,j1,sigma) = Dibja_abba(i,b1,j1,a)*ca(sigma,a)
               Tibjx(i,b1,j1,sigma) += T1ibjx(i,b1,j1,sigma)
            ENDDO a
            PREPARE Dibjx(i,b1,j1,sigma) = Tibjx(i,b1,j1,sigma)
      ENDPARDO sigma, b1, i, j1

      PARDO sigma, a1, j, i1 
            Tjaix(j,a1,i1,sigma) = 0.0  
            DO b 
               REQUEST Dibja_baab(j,a1,i1,b) b
               T1jaix(j,a1,i1,sigma) = Dibja_baab(j,a1,i1,b)*cb(sigma,b)
               Tjaix(j,a1,i1,sigma) += T1jaix(j,a1,i1,sigma)
            ENDDO b 
            PREPARE Djaix(j,a1,i1,sigma) = Tjaix(j,a1,i1,sigma)
      ENDPARDO sigma, a1, j, i1  
#
#
#   DIJKL
#
#
      PARDO mu, i1, i2, i3
            Txiii(mu,i1,i2,i3) = 0.0
            DO i
               REQUEST Dijkl_aa(i,i1,i2,i3) i3
               REQUEST Dijkl_aa(i,i1,i3,i2) i3
#
               Tiiii(i,i1,i2,i3)   = Dijkl_aa(i,i1,i2,i3)
               T1iiii(i,i1,i2,i3)  = Dijkl_aa(i,i1,i3,i2)
               Tiiii(i,i1,i2,i3)  -= T1iiii(i,i1,i2,i3)
#
               T1xiii(mu,i1,i2,i3) = Tiiii(i,i1,i2,i3)*ca(mu,i)
               Txiii(mu,i1,i2,i3) += T1xiii(mu,i1,i2,i3)
            ENDDO i
            PREPARE Dxiii(mu,i1,i2,i3) = Txiii(mu,i1,i2,i3)
      ENDPARDO mu, i1, i2, i3

      PARDO mu, j1, j2, j3
            Txjjj(mu,j1,j2,j3) = 0.0
            DO j
               REQUEST Dijkl_bb(j,j1,j2,j3) j3
               REQUEST Dijkl_bb(j,j1,j3,j2) j3
#
               Tjjjj(j,j1,j2,j3)   = Dijkl_bb(j,j1,j2,j3)
               T1jjjj(j,j1,j2,j3)  = Dijkl_bb(j,j1,j3,j2)
               Tjjjj(j,j1,j2,j3)  -= T1jjjj(j,j1,j2,j3)
#
               T1xjjj(mu,j1,j2,j3) = Tjjjj(j,j1,j2,j3)*cb(mu,j)
               Txjjj(mu,j1,j2,j3) += T1xjjj(mu,j1,j2,j3)
            ENDDO j
            PREPARE Dxjjj(mu,j1,j2,j3) = Txjjj(mu,j1,j2,j3)
      ENDPARDO mu, j1, j2, j3

      PARDO mu, i1, j, j1 
            Txjij(mu,j,i1,j1) = 0.0
            DO i 
               REQUEST Dijkl_ab(i,j,i1,j1) j1  
               T1xjij(mu,j,i1,j1) = Dijkl_ab(i,j,i1,j1)*ca(mu,i)
               Txjij(mu,j,i1,j1) += T1xjij(mu,j,i1,j1)
            ENDDO i 
            PREPARE Dxjij(mu,j,i1,j1) = Txjij(mu,j,i1,j1)
      ENDPARDO mu, i1, j, j1
#
#
#   DIJAB
#
#
      PARDO sigma, a, i, i1
            Tiiax(i,i1,a,sigma) = 0.0
            DO a1
               REQUEST Dijab_aa(i,i1,a,a1) a1
               T1iiax(i,i1,a,sigma) = Dijab_aa(i,i1,a,a1)*ca(sigma,a1)
               Tiiax(i,i1,a,sigma) += T1iiax(i,i1,a,sigma)
            ENDDO a1
            PREPARE Diiax(i,i1,a,sigma) = Tiiax(i,i1,a,sigma)
      ENDPARDO sigma, a, i, i1

      PARDO a, sigma, i, j1
            Tijax(i,j1,a,sigma) = 0.0
            DO b1
               REQUEST Dijab_ab(i,j1,a,b1) b1
               T1ijax(i,j1,a,sigma) = Dijab_ab(i,j1,a,b1)*cb(sigma,b1)
               Tijax(i,j1,a,sigma) += T1ijax(i,j1,a,sigma)
            ENDDO b1
            PREPARE Dijax(i,j1,a,sigma) = Tijax(i,j1,a,sigma)
      ENDPARDO a, sigma, i, j1

      PARDO b, sigma, j, j1
            Tjjbx(j,j1,b,sigma) = 0.0
            DO b1
               REQUEST Dijab_bb(j,j1,b,b1) b1
               T1jjbx(j,j1,b,sigma) = Dijab_bb(j,j1,b,b1)*cb(sigma,b1)
               Tjjbx(j,j1,b,sigma) += T1jjbx(j,j1,b,sigma)
            ENDDO b1
            PREPARE Djjbx(j,j1,b,sigma) = Tjjbx(j,j1,b,sigma)
      ENDPARDO b, sigma, j, j1
#
#
#   DABCI
#
#
      PARDO mu, a1, a2, i 
            REQUEST Dxaai(mu,a1,a2,i) a1
            DO nu 
               Txxai(mu,nu,a2,i)      = Dxaai(mu,a1,a2,i)*ca(nu,a1)
               PREPARE Dxxai(mu,nu,a2,i) += Txxai(mu,nu,a2,i)
               Txxai(mu,nu,a2,i)     *= 4.0 # To match ACESII
               PREPARE Ixxai(mu,nu,a2,i) += Txxai(mu,nu,a2,i)
            ENDDO nu 
      ENDPARDO mu, a1, a2, i

      PARDO mu, b1, b2, j
            REQUEST Dxbbj(mu,b1,b2,j) j
            DO nu
               Txxbj(mu,nu,b2,j)      = Dxbbj(mu,b1,b2,j)*cb(nu,b1)
               PREPARE Dxxbj(mu,nu,b2,j) += Txxbj(mu,nu,b2,j)
               Txxbj(mu,nu,b2,j)     *= 4.0 # To match ACESII
               PREPARE Ixxbj(mu,nu,b2,j) += Txxbj(mu,nu,b2,j)
            ENDDO nu
      ENDPARDO mu, b1, b2, j

      PARDO mu, b, a1, j
            REQUEST Dxbaj(mu,b,a1,j) j  
            DO nu 
               Txxaj(mu,nu,a1,j)      = Dxbaj(mu,b,a1,j)*cb(nu,b)
               PREPARE Dxxaj(mu,nu,a1,j) += Txxaj(mu,nu,a1,j)
               Txxaj(mu,nu,a1,j)     *= 4.0 # To match ACESII
               PREPARE Ixxaj(mu,nu,a1,j) += Txxaj(mu,nu,a1,j)
            ENDDO nu 
      ENDPARDO mu, b, a1, j

      PARDO mu, a, b1, i
            REQUEST Dxabi(mu,a,b1,i) i
            DO nu
               Txxbi(mu,nu,b1,i)      = Dxabi(mu,a,b1,i)*ca(nu,a)
               PREPARE Dxxbi(mu,nu,b1,i) += Txxbi(mu,nu,b1,i)
               Txxbi(mu,nu,b1,i)     *= 4.0 # To match ACESII
               PREPARE Ixxbi(mu,nu,b1,i) += Txxbi(mu,nu,b1,i)
            ENDDO nu
      ENDPARDO mu, a, b1, i
#
#
#   DIJKA
#
#   
      PARDO i, i1, lambda, sigma
            Tiixx(i,i1,lambda,sigma) = 0.0
            DO i2
               REQUEST Diiix(i,i1,i2,sigma) i
               T1iixx(i,i1,lambda,sigma) = Diiix(i,i1,i2,sigma)*ca(lambda,i2)
               Tiixx(i,i1,lambda,sigma) += T1iixx(i,i1,lambda,sigma)
            ENDDO i2
            Tiixx(i,i1,lambda,sigma)         *= 8.0  
            PREPARE Diixx(i,i1,lambda,sigma) += Tiixx(i,i1,lambda,sigma)
      ENDPARDO i, i1, lambda, sigma

      PARDO i, j1, lambda, sigma
            Tijxx(i,j1,lambda,sigma) = 0.0
            DO i2
               REQUEST Dijix(i,j1,i2,sigma) i
               T1ijxx(i,j1,lambda,sigma) = Dijix(i,j1,i2,sigma)*ca(lambda,i2)
               Tijxx(i,j1,lambda,sigma) += T1ijxx(i,j1,lambda,sigma)
            ENDDO i2
            Tijxx(i,j1,lambda,sigma)         *= 8.0
            PREPARE Dijxx(i,j1,lambda,sigma) += Tijxx(i,j1,lambda,sigma)
      ENDPARDO i, j1, lambda, sigma

      PARDO j, i1, lambda, sigma  
            Tijxx(i1,j,sigma,lambda) = 0.0  
            DO j2   
               REQUEST Djijx(j,i1,j2,sigma) j
               T1ijxx(i1,j,sigma,lambda) = Djijx(j,i1,j2,sigma)*cb(lambda,j2)
               Tijxx(i1,j,sigma,lambda) += T1ijxx(i1,j,sigma,lambda)
            ENDDO j2 
            Tijxx(i1,j,sigma,lambda)         *= 8.0
            PREPARE Dijxx(i1,j,sigma,lambda) += Tijxx(i1,j,sigma,lambda)
      ENDPARDO j, i1, lambda, sigma

      PARDO j, j1, lambda, sigma
            Tjjxx(j,j1,lambda,sigma) = 0.0
            DO j2
               REQUEST Djjjx(j,j1,j2,sigma) j
               T1jjxx(j,j1,lambda,sigma) = Djjjx(j,j1,j2,sigma)*cb(lambda,j2)
               Tjjxx(j,j1,lambda,sigma) += T1jjxx(j,j1,lambda,sigma)
            ENDDO j2 
            Tjjxx(j,j1,lambda,sigma)         *= 8.0
            PREPARE Djjxx(j,j1,lambda,sigma) += Tjjxx(j,j1,lambda,sigma)
      ENDPARDO j, j1, lambda, sigma

      EXECUTE  SERVER_BARRIER # SECOND PART
#
#
#   DIBJA
#
#
      PARDO sigma, nu, i, i1
            Txiix(nu,i,i1,sigma) = 0.0
            Tixix(i,nu,i1,sigma) = 0.0
            DO a1
               REQUEST Diaix(i,a1,i1,sigma) a1

               T1ixix(i,nu,i1,sigma) = Diaix(i,a1,i1,sigma)*ca(nu,a1)
               T1xiix(nu,i,i1,sigma) = T1ixix(i,nu,i1,sigma)

               Tixix(i,nu,i1,sigma) += T1ixix(i,nu,i1,sigma)
               Txiix(nu,i,i1,sigma) += T1xiix(nu,i,i1,sigma)
            ENDDO a1
            Txiix(nu,i,i1,sigma) *=  1.0 # 4.0
            Tixix(i,nu,i1,sigma) *= -1.0 #-4.0
            PREPARE Dixix(i,nu,i1,sigma) += Tixix(i,nu,i1,sigma)
            PREPARE Dxiix(nu,i,i1,sigma) += Txiix(nu,i,i1,sigma)
      ENDPARDO sigma, nu, i, i1

      PARDO sigma, nu, i, i1
            Tixix(i,nu,i1,sigma) = 0.0
            DO b1
               REQUEST Dibix(i,b1,i1,sigma) b1
               T1ixix(i,nu,i1,sigma) = Dibix(i,b1,i1,sigma)*cb(nu,b1)
               Tixix(i,nu,i1,sigma) += T1ixix(i,nu,i1,sigma)
            ENDDO b1
            Tixix(i,nu,i1,sigma)         *= -1.0 #-4.0
            PREPARE Dixix(i,nu,i1,sigma) += Tixix(i,nu,i1,sigma)
      ENDPARDO sigma, nu, i, i1

      PARDO sigma, nu, j, j1
            Tjxjx(j,nu,j1,sigma) = 0.0
            DO a1
               REQUEST Djajx(j,a1,j1,sigma) a1
               T1jxjx(j,nu,j1,sigma) = Djajx(j,a1,j1,sigma)*ca(nu,a1)
               Tjxjx(j,nu,j1,sigma) += T1jxjx(j,nu,j1,sigma)  
            ENDDO a1  
            Tjxjx(j,nu,j1,sigma)         *= -1.0 #-4.0
            PREPARE Djxjx(j,nu,j1,sigma) += Tjxjx(j,nu,j1,sigma)
      ENDPARDO sigma, nu, j, j1 

      PARDO sigma, nu, j, j1
            Txjjx(nu,j,j1,sigma) = 0.0
            Tjxjx(j,nu,j1,sigma) = 0.0
            DO b1 
               REQUEST Djbjx(j,b1,j1,sigma) b1
               T1jxjx(j,nu,j1,sigma)      = Djbjx(j,b1,j1,sigma)*cb(nu,b1)
               T1xjjx(nu,j,j1,sigma)      = T1jxjx(j,nu,j1,sigma)
               Tjxjx(j,nu,j1,sigma)      += T1jxjx(j,nu,j1,sigma)
               Txjjx(nu,j,j1,sigma)      += T1xjjx(nu,j,j1,sigma)
            ENDDO b1 
            Txjjx(nu,j,j1,sigma)         *=  1.0 # 4.0
            Tjxjx(j,nu,j1,sigma)         *= -1.0 #-4.0
            PREPARE Djxjx(j,nu,j1,sigma) += Tjxjx(j,nu,j1,sigma)
            PREPARE Dxjjx(nu,j,j1,sigma) += Txjjx(nu,j,j1,sigma)
      ENDPARDO sigma, nu, j, j1

      PARDO sigma, nu, i, j1
            Tixxj(i,nu,sigma,j1) = 0.0
            DO b1 
               REQUEST Dibjx(i,b1,j1,sigma) b1
               T1ixxj(i,nu,sigma,j1) = Dibjx(i,b1,j1,sigma)*cb(nu,b1)
               Tixxj(i,nu,sigma,j1) += T1ixxj(i,nu,sigma,j1)
            ENDDO b1 
            Tixxj(i,nu,sigma,j1)         *= 1.0 # 4.0
            PREPARE Dixxj(i,nu,sigma,j1) += Tixxj(i,nu,sigma,j1)
      ENDPARDO sigma, nu, i, j1 

      PARDO sigma, nu, j, i1
            Tixxj(i1,sigma,nu,j) = 0.0
            DO a1
               REQUEST Djaix(j,a1,i1,sigma) a1
               T1ixxj(i1,sigma,nu,j) = Djaix(j,a1,i1,sigma)*ca(nu,a1)
               Tixxj(i1,sigma,nu,j) += T1ixxj(i1,sigma,nu,j)
            ENDDO a1
            Tixxj(i1,sigma,nu,j)         *= 1.0 # 4.0  
            PREPARE Dixxj(i1,sigma,nu,j) += Tixxj(i1,sigma,nu,j)
      ENDPARDO sigma, nu, j, i1
#
#
#   DIJKL
#
#
      PARDO nu, i2, i3, mu  
            Tiixx(i2,i3,mu,nu) = 0.0
            DO i1  
               REQUEST Dxiii(mu,i1,i2,i3) i3
               T1iixx(i2,i3,mu,nu)  = Dxiii(mu,i1,i2,i3)*ca(nu,i1)
               Tiixx(i2,i3,mu,nu)  += T1iixx(i2,i3,mu,nu)
            ENDDO i1  
            Tiixx(i2,i3,mu,nu)         *= 0.25
            PREPARE Diixx(i2,i3,mu,nu) += Tiixx(i2,i3,mu,nu)
      ENDPARDO nu, i2, i3, mu

      PARDO nu, j2, j3, mu
            Tjjxx(j2,j3,mu,nu) = 0.0  
            DO j1
               REQUEST Dxjjj(mu,j1,j2,j3) j3
               T1jjxx(j2,j3,mu,nu)  = Dxjjj(mu,j1,j2,j3)*cb(nu,j1)
               Tjjxx(j2,j3,mu,nu)  += T1jjxx(j2,j3,mu,nu)
            ENDDO j1  
            Tjjxx(j2,j3,mu,nu)         *= 0.25  
            PREPARE Djjxx(j2,j3,mu,nu) += Tjjxx(j2,j3,mu,nu)
      ENDPARDO nu, j2, j3, mu

      PARDO i1, nu, j1, mu
            Tijxx(i1,j1,mu,nu) = 0.0
            DO j
               REQUEST Dxjij(mu,j,i1,j1) j1
               T1ijxx(i1,j1,mu,nu) = Dxjij(mu,j,i1,j1)*cb(nu,j)
               Tijxx(i1,j1,mu,nu) += T1ijxx(i1,j1,mu,nu)
            ENDDO j
            PREPARE Dijxx(i1,j1,mu,nu) += Tijxx(i1,j1,mu,nu)
      ENDPARDO i1, nu, j1, mu
#
#
#   DIJAB
#
#
      PARDO lambda, sigma, i, i1
            Tiixx(i,i1,lambda,sigma) = 0.0
            DO a
               REQUEST Diiax(i,i1,a,sigma) a
               T1iixx(i,i1,lambda,sigma) = Diiax(i,i1,a,sigma)*ca(lambda,a)
               Tiixx(i,i1,lambda,sigma)  += T1iixx(i,i1,lambda,sigma)
            ENDDO a
            Tiixx(i,i1,lambda,sigma)         *= 4.0
            PREPARE Diixx(i,i1,lambda,sigma) += Tiixx(i,i1,lambda,sigma)
      ENDPARDO lambda, sigma, i, i1

      PARDO lambda, sigma, i, j1
            Tijxx(i,j1,lambda,sigma) = 0.0
            DO a
               REQUEST Dijax(i,j1,a,sigma) a
               T1ijxx(i,j1,lambda,sigma)  = Dijax(i,j1,a,sigma)*ca(lambda,a)
               Tijxx(i,j1,lambda,sigma)  += T1ijxx(i,j1,lambda,sigma)  
            ENDDO a
            Tijxx(i,j1,lambda,sigma)         *= 8.0
            PREPARE Dijxx(i,j1,lambda,sigma) += Tijxx(i,j1,lambda,sigma)
      ENDPARDO lambda, sigma, i, j1

      PARDO lambda, sigma, j, j1
            Tjjxx(j,j1,lambda,sigma) = 0.0
            DO b
               REQUEST Djjbx(j,j1,b,sigma) b
               T1jjxx(j,j1,lambda,sigma)  = Djjbx(j,j1,b,sigma)*cb(lambda,b)
               Tjjxx(j,j1,lambda,sigma)  += T1jjxx(j,j1,lambda,sigma)
            ENDDO b
            Tjjxx(j,j1,lambda,sigma)         *= 4.0
            PREPARE Djjxx(j,j1,lambda,sigma) += Tjjxx(j,j1,lambda,sigma)
      ENDPARDO lambda, sigma, j, j1
#
#
#   DIJKA
#
#
#   DABCI
#
#
      PARDO mu, nu, i
            allocate Lxxai(mu,nu,*,i)
            DO a2
               REQUEST Dxxai(mu,nu,a2,i) i
               Lxxai(mu,nu,a2,i) = Dxxai(mu,nu,a2,i)
            ENDDO a2
            DO lambda
               Txxxi(mu,nu,lambda,i) = 0.0
               DO a2
                  T1xxxi(mu,nu,lambda,i) = Lxxai(mu,nu,a2,i)*ca(lambda,a2)
                  Txxxi(mu,nu,lambda,i) += T1xxxi(mu,nu,lambda,i)
               ENDDO a2
               PREPARE Dxxxi(mu,nu,lambda,i) = Txxxi(mu,nu,lambda,i)
            ENDDO lambda
            deallocate Lxxai(mu,nu,*,i)
      ENDPARDO mu, nu, i

      PARDO mu, nu, j
            allocate Lxxbj(mu,nu,*,j)
            DO b2
               REQUEST Dxxbj(mu,nu,b2,j) j
               Lxxbj(mu,nu,b2,j) = Dxxbj(mu,nu,b2,j) 
            ENDDO b2
            DO lambda 
               Txxxj(mu,nu,lambda,j) = 0.0
               DO b2
                  T1xxxj(mu,nu,lambda,j) = Lxxbj(mu,nu,b2,j)*cb(lambda,b2)
                  Txxxj(mu,nu,lambda,j) += T1xxxj(mu,nu,lambda,j)
               ENDDO b2
               PREPARE Dxxxj(mu,nu,lambda,j) = Txxxj(mu,nu,lambda,j)
            ENDDO lambda 
            deallocate Lxxbj(mu,nu,*,j)
      ENDPARDO mu, nu, j 

      PARDO mu, nu, j
            allocate Lxxaj(mu,nu,*,j)
            DO a1
               REQUEST Dxxaj(mu,nu,a1,j) j  
               Lxxaj(mu,nu,a1,j) = Dxxaj(mu,nu,a1,j)
            ENDDO a1
            DO lambda
               Txxxj(mu,nu,lambda,j) = 0.0
               DO a1
                  T1xxxj(mu,nu,lambda,j) = Lxxaj(mu,nu,a1,j)*ca(lambda,a1)
                  Txxxj(mu,nu,lambda,j) += T1xxxj(mu,nu,lambda,j)
               ENDDO a1
               PREPARE Dxxxj(mu,nu,lambda,j) += Txxxj(mu,nu,lambda,j)
            ENDDO lambda
            deallocate Lxxaj(mu,nu,*,j)
      ENDPARDO mu, nu, j 

      PARDO mu, nu, i
            allocate Lxxbi(mu,nu,*,i)
            DO b
               REQUEST Dxxbi(mu,nu,b,i) i
               Lxxbi(mu,nu,b,i) = Dxxbi(mu,nu,b,i)
            ENDDO b
            DO lambda
               Txxxi(mu,nu,lambda,i) = 0.0
               DO b
                  T1xxxi(mu,nu,lambda,i) = Lxxbi(mu,nu,b,i)*cb(lambda,b)
                  Txxxi(mu,nu,lambda,i) += T1xxxi(mu,nu,lambda,i)
               ENDDO b
               PREPARE Dxxxi(mu,nu,lambda,i) += Txxxi(mu,nu,lambda,i)
            ENDDO lambda
            deallocate Lxxbi(mu,nu,*,i)
      ENDPARDO mu, nu, i

      PARDO mu, nu, a, i
            REQUEST Ixxai(mu,nu,a,i) a
            DO lambda 
               txxxi(mu,nu,lambda,i) = Ixxai(mu,nu,a,i)*ca(lambda,a) 
               PREPARE Ixxxi(mu,nu,lambda,i) += txxxi(mu,nu,lambda,i)
            ENDDO lambda  
      ENDPARDO mu, nu, a, i
#     
      PARDO mu, nu, b, i
            REQUEST Ixxbi(mu,nu,b,i) b
            DO lambda 
               txxxi(mu,nu,lambda,i) = Ixxbi(mu,nu,b,i)*cb(lambda,b) 
               PREPARE Jxxxi(mu,nu,lambda,i) += txxxi(mu,nu,lambda,i)
            ENDDO lambda  
      ENDPARDO mu, nu, b, i
#     
      PARDO mu, nu, b, j
            REQUEST Ixxbj(mu,nu,b,j) b
            DO lambda 
               txxxj(mu,nu,lambda,j) = Ixxbj(mu,nu,b,j)*cb(lambda,b) 
               PREPARE Ixxxj(mu,nu,lambda,j) += txxxj(mu,nu,lambda,j)
            ENDDO lambda  
      ENDPARDO mu, nu, b, j
#     
      PARDO mu, nu, a, j
            REQUEST Ixxaj(mu,nu,a,j) a
            DO lambda 
               txxxj(mu,nu,lambda,j) = Ixxaj(mu,nu,a,j)*ca(lambda,a) 
               PREPARE Jxxxj(mu,nu,lambda,j) += txxxj(mu,nu,lambda,j)
            ENDDO lambda  
      ENDPARDO mu, nu, a, j

      create IIxi
      create IIxj
      create JJxi
      create JJxj 

      EXECUTE  SERVER_BARRIER
#
#
#          Residual Third Parts!
#
#
      PARDO lambda, sigma, mu, nu
#           
            compute_integrals            AOINT(lambda,mu,sigma,nu)
            compute_integrals            AOINT1(sigma,mu,lambda,nu)
            Txxxx(lambda,sigma,mu,nu)  = AOINT(lambda,mu,sigma,nu) 
            T1xxxx(lambda,sigma,mu,nu) = AOINT1(sigma,mu,lambda,nu)
#          
            DO i
               REQUEST Jxxxi(mu,nu,lambda,i) i
               txi(sigma,i) = Txxxx(lambda,sigma,mu,nu)*Jxxxi(mu,nu,lambda,i)
               PUT JJxi(sigma,i) += txi(sigma,i)
            ENDDO i
#
            DO j
               REQUEST Jxxxj(mu,nu,lambda,j) j
               txj(sigma,j) = Txxxx(lambda,sigma,mu,nu)*Jxxxj(mu,nu,lambda,j)
               PUT JJxj(sigma,j) += txj(sigma,j)
            ENDDO j
#
            Txxxx(lambda,sigma,mu,nu) -= T1xxxx(lambda,sigma,mu,nu)
#
            DO i
               REQUEST Ixxxi(mu,nu,lambda,i) i
               txi(sigma,i) = Txxxx(lambda,sigma,mu,nu)*Ixxxi(mu,nu,lambda,i)
               PUT IIxi(sigma,i) += txi(sigma,i)
            ENDDO i
#
            DO j
               REQUEST Ixxxj(mu,nu,lambda,j) j
               txj(sigma,j) = Txxxx(lambda,sigma,mu,nu)*Ixxxj(mu,nu,lambda,j)
               PUT IIxj(sigma,j) += txj(sigma,j)
            ENDDO j
      ENDPARDO lambda, sigma, mu, nu

      execute server_barrier
#              
      PARDO mu, a, i 
            GET IIxi(mu,i) 
            tai(a,i) = IIxi(mu,i)*ca(mu,a)
            tai(a,i) *= 0.5
            PUT Iai_aa(a,i) += Tai(a,i)
      ENDPARDO mu, a, i 
#              
      PARDO mu, b, j 
            GET IIxj(mu,j)
            tbj(b,j) = IIxj(mu,j)*cb(mu,b)
            tbj(b,j) *= 0.5
            PUT Iai_bb(b,j) += Tbj(b,j)
      ENDPARDO mu, b, j
#          
      PARDO mu, a, i 
            GET JJxi(mu,i) 
            tai(a,i) = JJxi(mu,i)*ca(mu,a)
            PUT Iai_aa(a,i) += Tai(a,i)
      ENDPARDO mu, a, i
#
      PARDO mu, b, j
            GET JJxj(mu,j)
            tbj(b,j) = JJxj(mu,j)*cb(mu,b)
            PUT Iai_bb(b,j) += Tbj(b,j)
      ENDPARDO mu, b, j
#
#
#   ..ready!
#
#
      ENDPROC  BACK_TRANSFORMS
# ----------------------------------------------------------------------------- 




# ----------------------------------------------------------------------------- 
#
#     ---------------------
      PROC  I_CONTRIBUTIONS
#     ---------------------
#
#
# Compute contributions to intermediates 
# -------------------------------------- 
#
#     Part of the Second-term of Iij_aa
#     ---------------------------------
#
      PARDO i2, i3, i4, i
#
            REQUEST VSpipi(i3,i,i4,i2) i2  
            Tpppp(i2,i3,i4,i)  = VSpipi(i3,i,i4,i2)
#
            DO i1
#
               REQUEST Dijkl_aa(i1,i2,i3,i4) i4 
#
               Tii(i,i1)         = Dijkl_aa(i1,i2,i3,i4)*Tpppp(i2,i3,i4,i)
               Tii(i,i1)        *= -0.5
               PUT Iij_aa(i,i1) += Tii(i,i1)
#
            ENDDO i1
#
      ENDPARDO i2, i3, i4, i
#
#     Part of the Second-term of Iai_aa
#     ---------------------------------
#
      PARDO a, i2, i3, i1
#
            REQUEST VSpipi(i3,i2,a,i1) i1  
            Tpppp(i3,i1,i2,a)  = VSpipi(i3,i2,a,i1)
#
            DO i
#
               REQUEST Dijkl_aa(i,i3,i1,i2) i2 
#
               Tai(a,i)         = Dijkl_aa(i,i3,i1,i2)*Tpppp(i3,i1,i2,a)
               Tai(a,i)        *= 0.5
               PUT Iai_aa(a,i) += Tai(a,i)
#
            ENDDO i
#
      ENDPARDO a, i2, i3, i1
#
# Done one-particle contributions 
# ------------------------------- 
#
# Compute contributions to intermediates 
# -------------------------------------- 
#
#     Part of the Second-term of Iij_bb
#     ---------------------------------
#
      PARDO j2, j3, j4, j1
#
            REQUEST VSqjqj(j3,j1,j4,j2) j2  
            Tqqqq(j2,j3,j4,j1)  = VSqjqj(j3,j1,j4,j2)
#
            DO j
#
               REQUEST Dijkl_bb(j,j2,j3,j4) j4 
#
               Tjj(j1,j)         = Dijkl_bb(j,j2,j3,j4)*Tqqqq(j2,j3,j4,j1)
               Tjj(j1,j)        *= -0.5
               PUT Iij_bb(j1,j) += Tjj(j1,j)
#
            ENDDO j
#
      ENDPARDO j2, j3, j4, j1
#
#     Part of the Second-term of Iai_bb
#     ---------------------------------
#
      PARDO b, j3, j1, j2
#
            REQUEST VSqjqj(j1,j3,b,j2) j2  
            Tqqqq(j1,j2,j3,b)  = VSqjqj(j1,j3,b,j2)
#
            DO j
#
               REQUEST Dijkl_bb(j,j1,j2,j3) j3 
#
               Tbj(b,j)         = Dijkl_bb(j,j1,j2,j3)*Tqqqq(j1,j2,j3,b)
               Tbj(b,j)        *= 0.5
               PUT Iai_bb(b,j) += Tbj(b,j)
#
            ENDDO j
#
      ENDPARDO b, j3, j1, j2
#
# Done one-particle contributions 
# ------------------------------- 
#
# Remove density component
# ------------------------ 
#
#
# Compute contributions to intermediates 
# -------------------------------------- 
#
# Part of the second-term of Iij_aa
# ---------------------------------
#
      PARDO j1, i2, j, i
#
            REQUEST Vpiqj(i2,i,j,j1) j
#
            DO i1
#
               REQUEST Dijkl_ab(i1,j1,i2,j) j 
#
               Tii(i,i1)         = Dijkl_ab(i1,j1,i2,j)*Vpiqj(i2,i,j,j1) 
               Tii(i,i1)        *= -1.0
               PUT Iij_aa(i,i1) += Tii(i,i1)
#
            ENDDO i1
#
      ENDPARDO j1, i2, j, i
#
# Part of the second-term of Iij_bb
# ---------------------------------
#
      PARDO i, j2, i1, j1
#
            REQUEST Vpiqj(i1,i,j2,j1) j1  
#
            DO j
#
               REQUEST Dijkl_ab(i,j,i1,j2) j2 
#
               Tjj(j1,j)         = Dijkl_ab(i,j,i1,j2)*Vpiqj(i1,i,j2,j1)
               Tjj(j1,j)        *= -1.0
               PUT Iij_bb(j1,j) += Tjj(j1,j)
#
            ENDDO j
#
      ENDPARDO i, j2, i1, j1
#
# Part of the Second-term of Iai_aa
# ---------------------------------
#
      PARDO a, j1, j, i1
#
            REQUEST Vpiqj(a,i1,j,j1) j1 
            Tqpqp(j,i1,j1,a)  = Vpiqj(a,i1,j,j1)
#
            DO i
#
               REQUEST Dijkl_ab(i,j,i1,j1) j1 
#
               Tai(a,i)         = Dijkl_ab(i,j,i1,j1)*Tqpqp(j,i1,j1,a)
               PUT Iai_aa(a,i) += Tai(a,i)
#
            ENDDO i
#
      ENDPARDO a, j1, j, i1
#
# Part of the Second-term of Iai_bb
# ---------------------------------
#
      PARDO b, i1, i, j1
#
            REQUEST Vpiqj(i,i1,b,j1) j1 
            Tpqpq(i,j1,i1,b)  = Vpiqj(i,i1,b,j1)
#
            DO j
#
               REQUEST Dijkl_ab(i,j,i1,j1) j1 
#
               Tbj(b,j)         = Dijkl_ab(i,j,i1,j1)*Tpqpq(i,j1,i1,b)
               PUT Iai_bb(b,j) += Tbj(b,j)
#
            ENDDO j
#
      ENDPARDO b, i1, i, j1
#
# Done one-particle contributions 
# ------------------------------- 
#
# Compute contributions to one-particle intermediates 
# --------------------------------------------------- 
#
#     Third-term of Iij_ii
#     --------------------
#
      PARDO i, a, i2, a1
#
            REQUEST Vaaii(a1,a,i2,i) i
            REQUEST Viaai(i2,a,a1,i) i
#
            Tpppp(a,i2,a1,i)  = Vaaii(a1,a,i2,i)
            T1pppp(a,i2,a1,i) = Viaai(i2,a,a1,i)
            Tpppp(a,i2,a1,i) -= T1pppp(a,i2,a1,i)
#
            DO i1
#
               REQUEST Dibja_aaaa(i1,a,i2,a1) a1 
#
               Tii(i,i1)         = Dibja_aaaa(i1,a,i2,a1)*Tpppp(a,i2,a1,i)
               PUT Iij_aa(i,i1) += Tii(i,i1)
#
            ENDDO i1
#
      ENDPARDO i, a, i2, a1
#
#     Third-term of Iab_aa
#     --------------------
#
      PARDO a, a2, i, i1
#
            REQUEST Vaaii(a2,a,i1,i) i
            REQUEST Viaai(i1,a,a2,i) i
            Tpppp(a2,a,i1,i)  = Vaaii(a2,a,i1,i)
            T1pppp(a2,a,i1,i) = Viaai(i1,a,a2,i)
            Tpppp(a2,a,i1,i) -= T1pppp(a2,a,i1,i)
#
            DO a1
#
               REQUEST Dibja_aaaa(i,a1,i1,a2) a2 
#
               Taa(a,a1)         = Tpppp(a2,a,i1,i)*Dibja_aaaa(i,a1,i1,a2)
               PUT Iab_aa(a,a1) += Taa(a,a1)
#
            ENDDO a1
#
      ENDPARDO a, a2, i, i1
#
#     Fifth-term of Iai_aa
#     --------------------
#
      PARDO a, a1, i1, a2
#
            REQUEST VSaaai(a1,a2,a,i1) i1  
            Tpppp(a1,i1,a2,a)  = VSaaai(a1,a2,a,i1)
#
            DO i
#
               REQUEST Dibja_aaaa(i,a1,i1,a2) a2 
#
               Tai(a,i)         = Dibja_aaaa(i,a1,i1,a2)*Tpppp(a1,i1,a2,a)
               Tai(a,i)        *= -1.0  
               PUT Iai_aa(a,i) += Tai(a,i)
#
            ENDDO i
#
      ENDPARDO a, a1, i1, a2
#
#     Third-term of Iia_aa
#     --------------------
#
      PARDO a, a1, i1, i2
#
            REQUEST Dibja_aaaa(i1,a,i2,a1) a1 
#
            DO i
#
               REQUEST VSpipi(i2,i1,a1,i) i
#
               Tia(i,a)         = Dibja_aaaa(i1,a,i2,a1)*VSpipi(i2,i1,a1,i)
               PUT Iia_aa(i,a) += Tia(i,a)
#
            ENDDO i
#
      ENDPARDO a, a1, i1, i2
#
# Done one-particle intermediate contributions 
# -------------------------------------------- 
#
# Compute contributions to one-particle intermediates 
# ---------------------------------------------------
#
# Third-term of Iij_aa 
# --------------------
#
      PARDO i1, b, i2, b1
#
            REQUEST Dibja_abab(i1,b,i2,b1) b1 
#
            DO i
#
               REQUEST Vbbii(b1,b,i2,i) b  
#
               Tii(i,i1)         = Dibja_abab(i1,b,i2,b1)*Vbbii(b1,b,i2,i)
               PUT Iij_aa(i,i1) += Tii(i,i1)
#
            ENDDO i
#
      ENDPARDO i1, b, i2, b1
#
# Third-term of Iab_bb 
# --------------------
#
      PARDO b1, b2, i, i1
#
            REQUEST Vbbii(b2,b1,i1,i) b1 
#
            DO b
#
               REQUEST Dibja_abab(i,b,i1,b2) b2 
#
               Tbb(b1,b)         = Vbbii(b2,b1,i1,i)*Dibja_abab(i,b,i1,b2)
               PUT Iab_bb(b1,b) += Tbb(b1,b)
#
            ENDDO b
#
      ENDPARDO b1, b2, i, i1
#
# Fifth-term of Iai_aa 
# -------------------- 
#
      PARDO a, b, i1, b1
#
            REQUEST Vbbai(b,b1,a,i1) i1 
            Tqpqp(b,i1,b1,a)  = Vbbai(b,b1,a,i1)
#
            DO i
#
               REQUEST Dibja_abab(i,b,i1,b1) b1 
#
               Tai(a,i)         = Dibja_abab(i,b,i1,b1)*Tqpqp(b,i1,b1,a)
               Tai(a,i)        *= -1.0  
               PUT Iai_aa(a,i) += Tai(a,i)
#
            ENDDO i
#
      ENDPARDO a, b, i1, b1 
#
# Third-term of Iia_bb 
# -------------------- 
#
      PARDO b, b1, i, i1
#
            REQUEST Dibja_abab(i,b,i1,b1) b1 
#
            DO j
#
               REQUEST Vpiqj(i1,i,b1,j) j
#
               Tjb(j,b)         = Dibja_abab(i,b,i1,b1)*Vpiqj(i1,i,b1,j)
               PUT Iia_bb(j,b) += Tjb(j,b)
#
            ENDDO j
#
      ENDPARDO b, b1, i, i1
#
# Done contribution to intermediates 
# ---------------------------------- 
#
#
# Compute contributions to one-particle intermediates 
# ---------------------------------------------------
#
# Third-term of Iij_bb 
# --------------------
#
      PARDO j1, a1, j2, a
#
            REQUEST Vaajj(a,a1,j2,j1) j1  
#
            DO j
#
               REQUEST Dibja_baba(j,a1,j2,a) a 
#
               Tjj(j1,j)         = Dibja_baba(j,a1,j2,a)*Vaajj(a,a1,j2,j1)
               PUT Iij_bb(j1,j) += Tjj(j1,j)
#
            ENDDO j
#
      ENDPARDO j1, a1, j2, a
#
# Third-term of Iab_aa 
# -------------------- 
#
      PARDO a, a2, j, j1
#
            REQUEST Vaajj(a2,a,j1,j) j1  
#
            DO a1
#
               REQUEST Dibja_baba(j,a1,j1,a2) a2 
#
               Taa(a,a1)         = Vaajj(a2,a,j1,j)*Dibja_baba(j,a1,j1,a2)
               PUT Iab_aa(a,a1) += Taa(a,a1)
#
            ENDDO a1
#
      ENDPARDO a, a2, j, j1
#
# Fifth-term of Iai_bb 
# --------------------
#
      PARDO b, a, j1, a1
#
            REQUEST Vaabj(a,a1,b,j1) j1  
            Tpqpq(a,j1,a1,b)  = Vaabj(a,a1,b,j1)
#
            DO j
#
               REQUEST Dibja_baba(j,a,j1,a1) a1 
#
               Tbj(b,j)         = Dibja_baba(j,a,j1,a1)*Tpqpq(a,j1,a1,b)
               Tbj(b,j)        *= -1.0  
               PUT Iai_bb(b,j) += Tbj(b,j)
#
            ENDDO j
#
      ENDPARDO b, a, j1, a1
#
# Third-term of Iia_aa 
# -------------------- 
#
      PARDO a, a1, j, j1
#
            REQUEST Dibja_baba(j,a,j1,a1) a1 
#
            DO i
#
               REQUEST Vpiqj(a1,i,j1,j) j 
#
               Tia(i,a)         = Dibja_baba(j,a,j1,a1)*Vpiqj(a1,i,j1,j)
               PUT Iia_aa(i,a) += Tia(i,a)
#
            ENDDO i
#
      ENDPARDO a, a1, j, j1
#
# Done one-particle intermediates 
# -------------------------------
#
#
# Calculate contribution to one-particle intermediates 
# ---------------------------------------------------- 
#
#     Third-term of Iij_bb 
#     --------------------
#
      PARDO j1, b1, j2, b
#
            REQUEST Vbbjj(b,b1,j2,j1) j1  
            REQUEST Vjbbj(j2,b1,b,j1) j1  
#
            Tqqqq(b1,j2,b,j1)  = Vbbjj(b,b1,j2,j1)
            T1qqqq(b1,j2,b,j1) = Vjbbj(j2,b1,b,j1)
            Tqqqq(b1,j2,b,j1) -= T1qqqq(b1,j2,b,j1)
#
            DO j
#
               REQUEST Dibja_bbbb(j,b1,j2,b) b
#
               Tjj(j1,j)         = Dibja_bbbb(j,b1,j2,b)*Tqqqq(b1,j2,b,j1)
               PUT Iij_bb(j1,j) += Tjj(j1,j)
#
            ENDDO j
#
      ENDPARDO j1, b1, j2, b 
#
#     Third-term of Iab_bb 
#     --------------------
#
      PARDO b1, b2, j, j1
#
            REQUEST Vbbjj(b2,b1,j1,j) j
            REQUEST Vjbbj(j1,b1,b2,j) j
            Tqqqq(b2,b1,j1,j)  = Vbbjj(b2,b1,j1,j)
            T1qqqq(b2,b1,j1,j) = Vjbbj(j1,b1,b2,j)
            Tqqqq(b2,b1,j1,j) -= T1qqqq(b2,b1,j1,j)
#
            DO b
#
               REQUEST Dibja_bbbb(j,b,j1,b2) b2 
#
               Tbb(b1,b)         = Tqqqq(b2,b1,j1,j)*Dibja_bbbb(j,b,j1,b2)
               PUT Iab_bb(b1,b) += Tbb(b1,b)
#
            ENDDO b
#
      ENDPARDO b1, b2, j, j1
#
#     Fifth-term of Iai_bb 
#     --------------------
#
      PARDO b, b1, j1, b2
#
            REQUEST VSbbbj(b1,b2,b,j1) j1  
            Tqqqq(b1,j1,b2,b)  = VSbbbj(b1,b2,b,j1)
#
            DO j
#
               REQUEST Dibja_bbbb(j,b1,j1,b2) b2 
#
               Tbj(b,j)         = Dibja_bbbb(j,b1,j1,b2)*Tqqqq(b1,j1,b2,b)
               Tbj(b,j)        *= -1.0  
               PUT Iai_bb(b,j) += Tbj(b,j)
#
            ENDDO j
#
      ENDPARDO b, b1, j1, b2
#
#     Third-term of Iia_bb 
#     -------------------- 
#
      PARDO b, b1, j1, j2

            REQUEST Dibja_bbbb(j1,b,j2,b1) b1 
#
            DO j
#
               REQUEST VSqjqj(j2,j1,b1,j) j
#
               Tjb(j,b)           = Dibja_bbbb(j1,b,j2,b1)*VSqjqj(j2,j1,b1,j)
               PUT Iia_bb(j,b)   += Tjb(j,b)
#
            ENDDO j
#
      ENDPARDO b, b1, j1, j2
#
# Done one-particle contributions 
# ------------------------------- 
#
#
# Compute contributions to one-particle intermediates 
# --------------------------------------------------- 
#
# Third-term of Iij_aa 
# -------------------- 
#
      PARDO i1, b, j, a
#
            REQUEST Dibja_abba(i1,b,j,a) a 
#
            DO i
#
               REQUEST Viabj(i,a,b,j) j 
#
               Tii(i,i1)         = Dibja_abba(i1,b,j,a)*Viabj(i,a,b,j)
               Tii(i,i1)        *= -1.0  
               PUT Iij_aa(i,i1) += Tii(i,i1)
#
            ENDDO i
#
      ENDPARDO i1, b, j, a
#
# Third-term of Iab_bb 
# -------------------- 
#
      PARDO b1, a, i, j
#
            REQUEST Viabj(i,a,b1,j) j
#
            DO b
#
               REQUEST Dibja_abba(i,b,j,a) a 
#
               Tbb(b1,b)         = Viabj(i,a,b1,j)*Dibja_abba(i,b,j,a)
               Tbb(b1,b)        *= -1.0  
               PUT Iab_bb(b1,b) += Tbb(b1,b)
#
            ENDDO b
#
      ENDPARDO b1, a, i, j
#
# Fifth-term of Iai_aa
# -------------------- 
#
      PARDO a, b, j, a1
#
            REQUEST Vaabj(a,a1,b,j) j
            Tqqpp(b,j,a1,a) = Vaabj(a,a1,b,j)
#
            DO i
#
               REQUEST Dibja_abba(i,b,j,a1) a1 
#
               Tai(a,i)         = Dibja_abba(i,b,j,a1)*Tqqpp(b,j,a1,a)
               PUT Iai_aa(a,i) += Tai(a,i)
#
            ENDDO i
#
      ENDPARDO a, b, j, a1
#
# Third-term of Iia_bb 
# -------------------- 
#
      PARDO b, a, i, j1
#
            REQUEST Dibja_abba(i,b,j1,a) a 
#
            DO j
#
               REQUEST Vpiqj(a,i,j1,j) j
#
               Tjb(j,b)         = Dibja_abba(i,b,j1,a)*Vpiqj(a,i,j1,j)
               Tjb(j,b)        *= -1.0  
               PUT Iia_bb(j,b) += Tjb(j,b)
#
            ENDDO j
#
      ENDPARDO b, a, i, j1
#
# Done one-particle intermediates 
# -------------------------------
#
#
# Compute contributions to one-particle intermediates 
# --------------------------------------------------- 
#
# Third-term of Iij_bb 
# -------------------- 
#
      PARDO j1, a, i, b
#
            REQUEST Viabj(i,a,b,j1) j1 
#
            DO j
#
               REQUEST Dibja_baab(j,a,i,b) b 
#
               Tjj(j1,j)         = Dibja_baab(j,a,i,b)*Viabj(i,a,b,j1)
               Tjj(j1,j)        *= -1.0  
               PUT Iij_bb(j1,j) += Tjj(j1,j)
#
            ENDDO j
#
      ENDPARDO j1, a, i, b
#
# Third-term of Iab_aa 
# --------------------
#
      PARDO a, b, j, i
#
            REQUEST Viabj(i,a,b,j) j
#
            DO a1
#
               REQUEST Dibja_baab(j,a1,i,b) b 
#
               Taa(a,a1)         = Viabj(i,a,b,j)*Dibja_baab(j,a1,i,b)
               Taa(a,a1)        *= -1.0  
               PUT Iab_aa(a,a1) += Taa(a,a1)
#
            ENDDO a1
#
      ENDPARDO a, b, j, i
#
# Fifth-term of Iai_bb 
# --------------------
#
      PARDO b, a, b1, i
#
            REQUEST Vbbai(b,b1,a,i) i 
#
            DO j
#
               REQUEST Dibja_baab(j,a,i,b1) b1 
#
               Tbj(b,j)         = Dibja_baab(j,a,i,b1)*Vbbai(b,b1,a,i)
               PUT Iai_bb(b,j) += Tbj(b,j)
#
            ENDDO j
#
      ENDPARDO b, a, b1, i
#
# Third-term of Iia_aa
# --------------------
#
      PARDO a, b, j, i1
#
            REQUEST Dibja_baab(j,a,i1,b) b 
#
            DO i
#
               REQUEST Vpiqj(i1,i,b,j) j 
#
               Tia(i,a)         = Dibja_baab(j,a,i1,b)*Vpiqj(i1,i,b,j)
               Tia(i,a)        *= -1.0  
               PUT Iia_aa(i,a) += Tia(i,a)
#
            ENDDO i
#
      ENDPARDO a, b, j, i1
#
# Done one-particle intermediate contributions 
# -------------------------------------------- 
#
      PARDO i, a, a2, a1  
#
            REQUEST Dabci_aaaa(a,a1,a2,i) a 
#
# Compute indirect contributions to one-particle intermediates 
# ------------------------------------------------------------ 
#
#           Fourth-term of Iij_aa 
#           ---------------------
#
            DO  i1 
#
               REQUEST              VSaaai(a,a2,a1,i1) i1  
#
               Tpppp(i1,a,a1,a2)  = VSaaai(a,a2,a1,i1)
               Tii(i1,i)          = Tpppp(i1,a,a1,a2)*Dabci_aaaa(a,a1,a2,i)  
               Tii(i1,i)         *= -0.5 
               PUT Iij_aa(i1,i)  += Tii(i1,i)
#
            ENDDO i1  
#
#           Fourth-term of Iia_aa 
#           ---------------------
#
            DO i1  
#
               REQUEST              VSpipi(a,i1,a1,i) i
#
               Tia(i1,a2)         = Dabci_aaaa(a,a1,a2,i)*VSpipi(a,i1,a1,i)
               Tia(i1,a2)        *= -0.5
               PUT Iia_aa(i1,a2) += Tia(i1,a2)
#
            ENDDO i1  
#
#           Fifth-term of Iia_aa 
#           --------------------
#
            DO i1  
#
               REQUEST              Vaaii(a2,a,i,i1) i1  
               REQUEST              Viaai(i,a,a2,i1) i1 
#
               Tpppp(i,a,a2,i1)   = Vaaii(a2,a,i,i1)
               Tpppp(i,a,a2,i1)  -= Viaai(i,a,a2,i1)
               Tia(i1,a1)         = Dabci_aaaa(a,a1,a2,i)*Tpppp(i,a,a2,i1)
               Tia(i1,a1)        *= -1.0  
               PUT Iia_aa(i1,a1) += Tia(i1,a1)
#
            ENDDO i1  
#
#           Fourth-term of Iab_aa 
#           ---------------------
#
            tpppp(a,a1,i,a2) = Dabci_aaaa(a,a1,a2,i) 
            DO a3
#
               REQUEST              VSaaai(a,a3,a1,i) i
              #Taa(a3,a2)         = VSaaai(a,a3,a1,i)*Dabci_aaaa(a,a1,a2,i)
              #Taa(a3,a2)        *= -0.5
#
               Taa(a3,a2)         = VSaaai(a,a3,a1,i)*tpppp(a,a1,i,a2)
               Taa(a3,a2)        *= -0.5
               PUT Iab_aa(a3,a2) += Taa(a3,a2)
#
            ENDDO a3
#
#           Fifth-term of Iab_aa 
#           --------------------
#
            tpppp(a2,a1,i,a) = Dabci_aaaa(a,a1,a2,i) 
            DO a3
#
               REQUEST              VSaaai(a3,a2,a1,i) i
              #Taa(a3,a)          = VSaaai(a3,a2,a1,i)*Dabci_aaaa(a,a1,a2,i)
               Taa(a3,a)          = VSaaai(a3,a2,a1,i)*tpppp(a2,a1,i,a)
               Taa(a3,a)         *= -1.0
               PUT Iab_aa(a3,a)  += Taa(a3,a)
#
            ENDDO a3
#
# Done indirect contributions to one-particle intermediates 
# --------------------------------------------------------- 
# 
      ENDPARDO i, a, a2, a1  
# 
#
# Compute indirect contributions to one-particle intermediates 
# ------------------------------------------------------------ 
#
      PARDO j, b, b2, b1  
#
            REQUEST Dabci_bbbb(b,b1,b2,j) b 
#
#           Fourth-term of Iij_bb 
#           ---------------------
#
            DO  j1 
#
               REQUEST              VSbbbj(b,b2,b1,j1) j1  
#
               Tqqqq(j1,b,b1,b2)  = VSbbbj(b,b2,b1,j1)
               Tjj(j1,j)          = Tqqqq(j1,b,b1,b2)*Dabci_bbbb(b,b1,b2,j)
               Tjj(j1,j)         *= -0.5 
               PUT Iij_bb(j1,j)  += Tjj(j1,j)
#
            ENDDO j1  
#
#           Fourth-term of Iia_bb 
#           ---------------------
#
            DO j1  
#
               REQUEST              VSqjqj(b,j1,b1,j) j
#
               Tjb(j1,b2)         = Dabci_bbbb(b,b1,b2,j)*VSqjqj(b,j1,b1,j)
               Tjb(j1,b2)        *= -0.5
               PUT Iia_bb(j1,b2) += Tjb(j1,b2)
#
            ENDDO j1  
#
#           Fifth-term of Iia_bb 
#           --------------------
#
            DO j1  
#
               REQUEST              Vbbjj(b2,b,j,j1) j1  
               REQUEST              Vjbbj(j,b,b2,j1) j1  
#
               Tqqqq(j,b,b2,j1)   = Vbbjj(b2,b,j,j1)
               Tqqqq(j,b,b2,j1)  -= Vjbbj(j,b,b2,j1)
               Tjb(j1,b1)         = Dabci_bbbb(b,b1,b2,j)*Tqqqq(j,b,b2,j1)
               Tjb(j1,b1)        *= -1.0  
               PUT Iia_bb(j1,b1) += Tjb(j1,b1)
#
            ENDDO j1  
#
#           Fourth-term of Iab_bb 
#           ---------------------
#
            tqqqq(b,b1,j,b2) = Dabci_bbbb(b,b1,b2,j) 
            DO b3
#
               REQUEST              VSbbbj(b,b3,b1,j) j
              #Tbb(b3,b2)         = VSbbbj(b,b3,b1,j)*Dabci_bbbb(b,b1,b2,j)
              #Tbb(b3,b2)        *= -0.5
#
               Tbb(b3,b2)         = VSbbbj(b,b3,b1,j)*tqqqq(b,b1,j,b2)
               Tbb(b3,b2)        *= -0.5
               PUT Iab_bb(b3,b2) += Tbb(b3,b2)
#
            ENDDO b3
#
#           Fifth-term of Iab_bb 
#           --------------------
#
            tqqqq(b2,b1,j,b) = Dabci_bbbb(b,b1,b2,j)  
            DO b3
#
               REQUEST              VSbbbj(b3,b2,b1,j) j
              #Tbb(b3,b)          = VSbbbj(b3,b2,b1,j)*Dabci_bbbb(b,b1,b2,j)
               Tbb(b3,b)          = VSbbbj(b3,b2,b1,j)*tqqqq(b2,b1,j,b)
               Tbb(b3,b)         *= -1.0
               PUT Iab_bb(b3,b)  += Tbb(b3,b)
#
            ENDDO b3
#
# Done indirect contributions to one-particle intermediates 
# --------------------------------------------------------- 
# 
      ENDPARDO j, b, b2, b1  
#
# Done contributions to one-particle intermediates 
# ------------------------------------------------ 
#
      PARDO a, j, a1, b  
#
            REQUEST Dabci_abab(a,b,a1,j) a  
#
# Compute contributions to one-particle intermediates 
# --------------------------------------------------- 
#
#           Fourth-term of Iij_bb 
#           --------------------- 
#
            DO j1  
#
               REQUEST             Vaabj(a,a1,b,j1) j1 
#
               Tjj(j1,j)         = Vaabj(a,a1,b,j1)*Dabci_abab(a,b,a1,j)
               Tjj(j1,j)        *= -1.0
               PUT Iij_bb(j1,j) += Tjj(j1,j)
#
            ENDDO j1  
#
#           Fifth-term of Iab_aa 
#           --------------------  
#
            tpqqp(a1,b,j,a) = Dabci_abab(a,b,a1,j) 
            DO a2
#
               REQUEST             Vaabj(a2,a1,b,j) j
              #Taa(a2,a)         = Vaabj(a2,a1,b,j)*Dabci_abab(a,b,a1,j)
               Taa(a2,a)         = Vaabj(a2,a1,b,j)*tpqqp(a1,b,j,a)
               Taa(a2,a)        *= -1.0
               PUT Iab_aa(a2,a) += Taa(a2,a)
#
            ENDDO a2
#
#           Fifth-term of Iia_aa 
#           -------------------- 
#
            DO i
#
               REQUEST            Viabj(i,a1,b,j) j 
#
               Tia(i,a)         = Viabj(i,a1,b,j)*Dabci_abab(a,b,a1,j)
               Tia(i,a)        *= -1.0  
               PUT Iia_aa(i,a) += Tia(i,a)
#
            ENDDO i
#
      ENDPARDO a, j, a1, b  
#
      PARDO a1, b, a, j 
#
            REQUEST Dabci_abab(a,b,a1,j) a  
#
# Compute contributions to one-particle intermediates 
# --------------------------------------------------- 
#
#           Fourth-term of Iab_aa 
#           --------------------- 
#
            tpqqp(a,b,j,a1) = Dabci_abab(a,b,a1,j) 
            DO a2
#
              #REQUEST              Vaabj(a,a2,b,j) j
              #Taa(a2,a1)         = Vaabj(a,a2,b,j)*Dabci_abab(a,b,a1,j)
               REQUEST              Vaabj(a2,a,b,j) j
               Taa(a2,a1)         = Vaabj(a2,a,b,j)*tpqqp(a,b,j,a1)   
               Taa(a2,a1)        *= -1.0
               PUT Iab_aa(a2,a1) += Taa(a2,a1)
#
            ENDDO a2
#
#           Fifth-term of Iab_bb 
#           --------------------  
#
            tppqq(a,a1,j,b) = Dabci_abab(a,b,a1,j) 
            DO b1  
#
               REQUEST             Vaabj(a,a1,b1,j) j
               tqppq(b1,a,a1,j)  = Vaabj(a,a1,b1,j) 
              #Tbb(b1,b)         = Vaabj(a,a1,b1,j)*Dabci_abab(a,b,a1,j)
               Tbb(b1,b)         = tqppq(b1,a,a1,j)*tppqq(a,a1,j,b)
               Tbb(b1,b)        *= -1.0  
               PUT Iab_bb(b1,b) += Tbb(b1,b)
#
            ENDDO b1  
#
#           Fourth-term of Iia_aa 
#           --------------------- 
#
            DO i
#
               REQUEST             Vpiqj(a,i,b,j) j
               Tia(i,a1)         = Dabci_abab(a,b,a1,j)*Vpiqj(a,i,b,j)
               Tia(i,a1)        *= -1.0
               PUT Iia_aa(i,a1) += Tia(i,a1)
#
            ENDDO i
#
#          Fifth-term of Iia_bb 
#          -------------------- 
#
            DO j1  
#
               REQUEST             Vaajj(a1,a,j,j1) j1  
               Tjb(j1,b)         = Dabci_abab(a,b,a1,j)*Vaajj(a1,a,j,j1)
               Tjb(j1,b)        *= -1.0  
               PUT Iia_bb(j1,b) += Tjb(j1,b)
#
            ENDDO j1  
#
      ENDPARDO a1, b, a, j 
#
# Done one-particle intermediates 
# ------------------------------- 
#
      PARDO b1, i, a, b  
#
            REQUEST Dabci_baba(b1,a,b,i) a 
#
# Compute contributions to one-particle intermediates 
# --------------------------------------------------- 
#
#           Fourth-term of Iij_aa 
#           --------------------- 
#
            DO i1
#
               REQUEST Vbbai(b1,b,a,i1) i1  
#
               Tii(i1,i)         = Vbbai(b1,b,a,i1)*Dabci_baba(b1,a,b,i)
               Tii(i1,i)        *= -1.0
               PUT Iij_aa(i1,i) += Tii(i1,i)
#
            ENDDO i1
#
#           Fifth-term of Iab_bb 
#           -------------------- 
#
            tqppq(b,a,i,b1) = Dabci_baba(b1,a,b,i) 
            DO b2  
#
               REQUEST              Vbbai(b2,b,a,i) i 
              #Tbb(b2,b1)         = Vbbai(b2,b,a,i)*Dabci_baba(b1,a,b,i)
               Tbb(b2,b1)         = Vbbai(b2,b,a,i)*tqppq(b,a,i,b1)  
               Tbb(b2,b1)        *= -1.0  
               PUT Iab_bb(b2,b1) += Tbb(b2,b1)
#
            ENDDO b2  
#
#           Fifth-term of Iia_bb 
#           -------------------- 
#
            DO j
#
               REQUEST Viabj(i,a,b,j) j 
#
               Tjb(j,b1)         = Dabci_baba(b1,a,b,i)*Viabj(i,a,b,j) 
               Tjb(j,b1)        *= -1.0  
               PUT Iia_bb(j,b1) += Tjb(j,b1)
#
            ENDDO j
#
      ENDPARDO b1, i, a, b  
#
      PARDO a, b, i, b1  
#
            REQUEST Dabci_baba(b1,a,b,i) a 
#
#           Fourth-term of Iab_bb 
#           --------------------- 
#
            tqppq(b1,a,i,b) = Dabci_baba(b1,a,b,i) 
            DO b2  
#
              #REQUEST             Vbbai(b1,b2,a,i) i  
              #Tbb(b2,b)         = Vbbai(b1,b2,a,i)*Dabci_baba(b1,a,b,i)
               REQUEST             Vbbai(b2,b1,a,i) i  
               Tbb(b2,b)         = Vbbai(b2,b1,a,i)*tqppq(b1,a,i,b)
               Tbb(b2,b)        *= -1.0
               PUT Iab_bb(b2,b) += Tbb(b2,b)
#
            ENDDO b2  
#
#           Fifth-term of Iab_aa 
#           --------------------
#
            tqqpp(b1,b,i,a) = Dabci_baba(b1,a,b,i) 
            DO a1
#
               REQUEST             Vbbai(b1,b,a1,i) i  
               tpqqp(a1,b1,b,i)  = Vbbai(b1,b,a1,i) 
              #Taa(a1,a)         = Vbbai(b1,b,a1,i)*Dabci_baba(b1,a,b,i)
               Taa(a1,a)         = tpqqp(a1,b1,b,i)*tqqpp(b1,b,i,a)
               Taa(a1,a)        *= -1.0  
               PUT Iab_aa(a1,a) += Taa(a1,a)
#
            ENDDO a1
#
#           Fifth-term of Iia_aa 
#           -------------------- 
#
            DO i1
#
               REQUEST Vbbii(b,b1,i,i1) b1 
#
               Tia(i1,a)         = Dabci_baba(b1,a,b,i)*Vbbii(b,b1,i,i1)
               Tia(i1,a)        *= -1.0  
               PUT Iia_aa(i1,a) += Tia(i1,a)
#
            ENDDO i1
#
#          Fourth-term of Iia_bb 
#          ---------------------
#
            DO j
#
               REQUEST Vpiqj(a,i,b1,j) j
#
               Tjb(j,b)         = Dabci_baba(b1,a,b,i)*Vpiqj(a,i,b1,j)
               Tjb(j,b)        *= -1.0
               PUT Iia_bb(j,b) += Tjb(j,b)
#
            ENDDO j
#
      ENDPARDO a, b, i, b1  
#
# Done contributions to one-particle intermediates 
# ------------------------------------------------ 
#
#
# Compute contributions to one-particle intermediates 
# --------------------------------------------------- 
#
# Fifth-term of Iij_aa 
# -------------------- 
#
      PARDO i2, i3, a, i
#
            REQUEST VSpipi(a,i2,i3,i) i
            Tpppp(i2,i3,a,i)  = VSpipi(a,i2,i3,i)
#
            DO i1
#
               REQUEST Dijka_aaaa(i1,i2,i3,a) a 
#
               Tii(i,i1)         = Dijka_aaaa(i1,i2,i3,a)*Tpppp(i2,i3,a,i)
               Tii(i,i1)        *= -1.0  
               PUT Iij_aa(i,i1) += Tii(i,i1)
#
            ENDDO i1
#
      ENDPARDO i2, i3, a, i
#
# Sixth-term of Iij_aa
# -------------------- 
#
      PARDO i3, i2, a, i
#
            REQUEST VSpipi(a,i2,i,i3) i3  
#
            DO i1
#
               REQUEST Dijka_aaaa(i3,i2,i1,a) a 
#
               Tii(i,i1)         = VSpipi(a,i2,i,i3)*Dijka_aaaa(i3,i2,i1,a)
               Tii(i,i1)        *= -0.5
               PUT Iij_aa(i,i1) += Tii(i,i1)
#
            ENDDO i1
#
      ENDPARDO i3, i2, a, i
#
# Sixth-term of Iab_aa
# --------------------
#
      PARDO a, i2, i, i1
#
            REQUEST VSpipi(a,i1,i2,i) i
            Tpppp(a,i,i1,i2)  = VSpipi(a,i1,i2,i)
#
            DO a1
#
               REQUEST Dijka_aaaa(i,i1,i2,a1) a1 
#
               Taa(a,a1)         = Tpppp(a,i,i1,i2)*Dijka_aaaa(i,i1,i2,a1)
               Taa(a,a1)        *= -0.5
               PUT Iab_aa(a,a1) += Taa(a,a1)
#
            ENDDO a1
#
      ENDPARDO a, i2, i, i1
#
# Third-term of Iai_aa
# --------------------  
#
      PARDO a, a1, i1, i2
#
            REQUEST Viaai(i1,a1,a,i2) i2  
            REQUEST Vaaii(a,a1,i1,i2) i2  
#
            Tpppp(i1,i2,a1,a)  = Viaai(i1,a1,a,i2)
            T1pppp(i1,i2,a1,a) = Vaaii(a,a1,i1,i2)
            Tpppp(i1,i2,a1,a) -= T1pppp(i1,i2,a1,a)
#
            DO i
#
               REQUEST Dijka_aaaa(i,i1,i2,a1) a1 
#
               Tai(a,i)         = Dijka_aaaa(i,i1,i2,a1)*Tpppp(i1,i2,a1,a)
               PUT Iai_aa(a,i) += Tai(a,i)
#
            ENDDO i
#
      ENDPARDO a, a1, i1, i2
#
# Fourth-term of Iai_aa
# --------------------
#
      PARDO a, a1, i1, i2
#
            REQUEST VSpipi(a,i1,a1,i2) i2  
#
            DO i
#
               REQUEST Dijka_aaaa(i1,i2,i,a1) a1 
#
               Tai(a,i)         = VSpipi(a,i1,a1,i2)*Dijka_aaaa(i1,i2,i,a1)
               Tai(a,i)        *= 0.5
               PUT Iai_aa(a,i) += Tai(a,i)
#
            ENDDO i
#
      ENDPARDO a, a1, i1, i2
#
# Sixth-term of Iia_aa 
# --------------------
#
      PARDO a, i3, i1, i2
#
            REQUEST Dijka_aaaa(i1,i2,i3,a) a 
#
            DO i
#
               REQUEST VSpipi(i1,i3,i2,i) i
#
               Tpppp(i,i1,i2,i3)  = VSpipi(i1,i3,i2,i)
               Tia(i,a)           = Tpppp(i,i1,i2,i3)*Dijka_aaaa(i1,i2,i3,a)
               Tia(i,a)          *= -0.5
               PUT Iia_aa(i,a)   += Tia(i,a)
#
            ENDDO i
#
      ENDPARDO a, i3, i1, i2
#
# Done contribution to one-particle intermediates 
# ----------------------------------------------- 
#
#
# Compute contributions to one-particle intermediates 
# --------------------------------------------------- 
#
# Fifth-term of Iij_aa 
# -------------------- 
#
      PARDO j1, i2, b, i
#
            REQUEST Vpiqj(i2,i,b,j1) j1  
#
            DO i1
#
               REQUEST Dijka_abab(i1,j1,i2,b) b
#
               Tii(i,i1)         = Dijka_abab(i1,j1,i2,b)*Vpiqj(i2,i,b,j1)
               Tii(i,i1)        *= -1.0  
               PUT Iij_aa(i,i1) += Tii(i,i1)
#
            ENDDO i1
#
      ENDPARDO j1, i2, b, i
#
# Sixth-term of Iij_aa 
# -------------------- 
#
      PARDO i2, j, b, i
#
            REQUEST Vpiqj(i,i2,b,j) j
#
            DO i1
#
               REQUEST Dijka_abab(i2,j,i1,b) b
#
               Tii(i,i1)         = Vpiqj(i,i2,b,j)*Dijka_abab(i2,j,i1,b)
               Tii(i,i1)        *= -1.0
               PUT Iij_aa(i,i1) += Tii(i,i1)
#
            ENDDO i1
#
      ENDPARDO i2, j, b, i
#
# Fifth-term of Iij_bb 
# -------------------- 
#
      PARDO i, i1, b, j1
#
            REQUEST Vpiqj(i1,i,b,j1) i
#
            DO j
#
               REQUEST Dijka_abab(i,j,i1,b) b 
#
               Tjj(j1,j)         = Dijka_abab(i,j,i1,b)*Vpiqj(i1,i,b,j1)
               Tjj(j1,j)        *= -1.0  
               PUT Iij_bb(j1,j) += Tjj(j1,j)
#
            ENDDO j
#
      ENDPARDO i, i1, b, j1
#
# Sixth-term of Iab_bb 
# -------------------- 
#
      PARDO b1, i1, i, j
#
            REQUEST Vpiqj(i1,i,b1,j) j
#
            DO b
#
               REQUEST Dijka_abab(i,j,i1,b) b
#
               Tbb(b1,b)         = Vpiqj(i1,i,b1,j)*Dijka_abab(i,j,i1,b)
               Tbb(b1,b)        *= -1.0
               PUT Iab_bb(b1,b) += Tbb(b1,b)
#
            ENDDO b
#
      ENDPARDO b1, i1, i, j
#
# Third-term of Iai_aa 
# --------------------
#
      PARDO a, b, j, i1
#
            REQUEST Viabj(i1,a,b,j) j 
            Tqpqp(j,i1,b,a)  = Viabj(i1,a,b,j)
#
            DO i
#
               REQUEST Dijka_abab(i,j,i1,b) b 
#
               Tai(a,i)         = Dijka_abab(i,j,i1,b)*Tqpqp(j,i1,b,a)
               PUT Iai_aa(a,i) += Tai(a,i)
#
            ENDDO i
#
      ENDPARDO a, b, j, i1
#
# Fourth-term of Iai_aa 
# ---------------------
#
      PARDO a, b, i1, j
#
            REQUEST Vpiqj(a,i1,b,j) j
#
            DO i
#
               REQUEST Dijka_abab(i1,j,i,b) b 
#
               Tai(a,i)         = Vpiqj(a,i1,b,j)*Dijka_abab(i1,j,i,b)
               PUT Iai_aa(a,i) += Tai(a,i)
#
            ENDDO i
#
      ENDPARDO a, b, i1, j
#
# Third-term of Iai_bb 
# --------------------
#
      PARDO b, b1, i, i1
#
            REQUEST Vbbii(b,b1,i,i1) b1 
#
            DO j
#
               REQUEST Dijka_abab(i,j,i1,b1) b1
#
               Tbj(b,j)         = Dijka_abab(i,j,i1,b1)*Vbbii(b,b1,i,i1) 
               PUT Iai_bb(b,j) += Tbj(b,j)
#
            ENDDO j
#
      ENDPARDO b, b1, i, i1
#
# Sixth-term of Iia_bb 
# -------------------- 
#
      PARDO b, i1, i, j1
#
            REQUEST Dijka_abab(i,j1,i1,b) b
#
            DO j
#
               REQUEST Vpiqj(i,i1,j1,j) j
#
               Tjb(j,b)         = Dijka_abab(i,j1,i1,b)*Vpiqj(i,i1,j1,j)
               Tjb(j,b)        *= -1.0
               PUT Iia_bb(j,b) += Tjb(j,b)
#
            ENDDO j
#
      ENDPARDO b, i1, i, j1 
#
# Done contributions to one-particle intermediates 
# ------------------------------------------------ 
#
# Compute contributions to one-particle intermediates 
# --------------------------------------------------- 
#
# Fifth-term of Iij_aa 
# -------------------- 
#
      PARDO j1, j, a, i
#
            REQUEST Vpiqj(a,i,j,j1) j1 
#
            DO i1
#
               REQUEST Dijka_baba(j1,i1,j,a) a 
#
               Tii(i,i1)         = Dijka_baba(j1,i1,j,a)*Vpiqj(a,i,j,j1)
               Tii(i,i1)        *= -1.0  
               PUT Iij_aa(i,i1) += Tii(i,i1)
#
            ENDDO i1
#
      ENDPARDO j1, j, a, i
#
# Fifth-term of Iij_bb 
# -------------------- 
#
      PARDO i, j2, a, j1
#
            REQUEST Vpiqj(a,i,j2,j1) j1  
#
            DO j
#
               REQUEST Dijka_baba(j,i,j2,a) a 
#
               Tjj(j1,j)         = Dijka_baba(j,i,j2,a)*Vpiqj(a,i,j2,j1)
               Tjj(j1,j)        *= -1.0  
               PUT Iij_bb(j1,j) += Tjj(j1,j)
#
            ENDDO j
#
      ENDPARDO i, j2, a, j1
#
# Sixth-term of Iij_bb 
# -------------------- 
#
      PARDO j2, i, a, j1
#
            REQUEST Vpiqj(a,i,j1,j2) i
#
            DO j
#
               REQUEST Dijka_baba(j2,i,j,a) a 
               REQUEST Vpiqj(a,i,j1,j2)     j2  
#
               Tjj(j1,j)         = Vpiqj(a,i,j1,j2)*Dijka_baba(j2,i,j,a)
               Tjj(j1,j)        *= -1.0
               PUT Iij_bb(j1,j) += Tjj(j1,j)
#
            ENDDO j
#
      ENDPARDO j2, i, a, j1
#
# Sixth-term of Iab_aa 
# -------------------- 
#
      PARDO a, j1, j, i
#
            REQUEST Vpiqj(a,i,j1,j) j
#
            DO a1
#
               REQUEST Dijka_baba(j,i,j1,a1) a1 
#
               Taa(a,a1)         = Vpiqj(a,i,j1,j)*Dijka_baba(j,i,j1,a1)
               Taa(a,a1)        *= -1.0
               PUT Iab_aa(a,a1) += Taa(a,a1)
#
            ENDDO a1
#
      ENDPARDO a, j1, j, i
#
# Third-term of Iai_aa 
# -------------------- 
#
      PARDO a, a1, j, j1
#
            REQUEST Vaajj(a,a1,j,j1) j1  
            Tqqpp(j,j1,a1,a) = Vaajj(a,a1,j,j1)
#
            DO i
#
               REQUEST Dijka_baba(j,i,j1,a1) a1 
#
               Tai(a,i)         = Dijka_baba(j,i,j1,a1)*Tqqpp(j,j1,a1,a)
               PUT Iai_aa(a,i) += Tai(a,i)
#
            ENDDO i
#
      ENDPARDO a, a1, j, j1
#
# Third-term of Iai_bb 
# -------------------- 
#
      PARDO b, a, i, j1
#
            REQUEST Viabj(i,a,b,j1) j1  
            Tpqpq(i,j1,a,b)  = Viabj(i,a,b,j1)
#
            DO j
#
               REQUEST Dijka_baba(j,i,j1,a) a 
#
               Tbj(b,j)         = Dijka_baba(j,i,j1,a)*Tpqpq(i,j1,a,b)
               PUT Iai_bb(b,j) += Tbj(b,j)
#
            ENDDO j
#
      ENDPARDO b, a, i, j1
#
# Fourth-term of Iai_bb 
# ---------------------
#
      PARDO b, a, j1, i
#
            REQUEST Vpiqj(a,i,b,j1) j1 
#
            DO j
#
               REQUEST Dijka_baba(j1,i,j,a) a 
#
               Tbj(b,j)         = Vpiqj(a,i,b,j1)*Dijka_baba(j1,i,j,a)
               PUT Iai_bb(b,j) += Tbj(b,j)
#
            ENDDO j
#
      ENDPARDO b, a, j1, i
#
# Sixth-term of Iia_aa 
# -------------------- 
#
      PARDO a, j1, j, i1
#
            REQUEST Dijka_baba(j,i1,j1,a) a 
#
            DO i
#
               REQUEST Vpiqj(i1,i,j,j1) j1 
#
               Tia(i,a)         = Dijka_baba(j,i1,j1,a)*Vpiqj(i1,i,j,j1)
               Tia(i,a)        *= -1.0
               PUT Iia_aa(i,a) += Tia(i,a)
#
            ENDDO i
#
      ENDPARDO a, j1, j, i1
#
# Done contributions to one-particle intermediates 
# ------------------------------------------------ 
#
# Compute contribution to one-particle intermediates 
# -------------------------------------------------- 
#
# Fifth-term of Iij_bb 
# --------------------
#
      PARDO j2, j3, b, j1
#
            REQUEST VSqjqj(b,j2,j3,j1) j1  
            Tqqqq(j2,j3,b,j1)  = VSqjqj(b,j2,j3,j1)
#
            DO j
#
               REQUEST Dijka_bbbb(j,j2,j3,b) b 
#
               Tjj(j1,j)         = Dijka_bbbb(j,j2,j3,b)*Tqqqq(j2,j3,b,j1)
               Tjj(j1,j)        *= -1.0  
               PUT Iij_bb(j1,j) += Tjj(j1,j)
#
            ENDDO j
#
      ENDPARDO j2, j3, b, j1
#
#     Sixth-term of Iij_bb 
#     --------------------
#
      PARDO j2, j3, b, j1
#
            REQUEST VSqjqj(b,j3,j1,j2) j2  
#
            DO j
#
               REQUEST Dijka_bbbb(j2,j3,j,b) b 
#
               Tjj(j1,j)         = VSqjqj(b,j3,j1,j2)*Dijka_bbbb(j2,j3,j,b)
               Tjj(j1,j)        *= -0.5
               PUT Iij_bb(j1,j) += Tjj(j1,j)
#
            ENDDO j
#
      ENDPARDO j2, j3, b, j1
#
#     Sixth-term of Iab_bb 
#     --------------------
#
      PARDO b1, j2, j, j1
#
            REQUEST VSqjqj(b1,j1,j2,j) j
            Tqqqq(b1,j,j1,j2)  = VSqjqj(b1,j1,j2,j)
#
            DO b
#
               REQUEST Dijka_bbbb(j,j1,j2,b) b 
#
               Tbb(b1,b)         = Tqqqq(b1,j,j1,j2)*Dijka_bbbb(j,j1,j2,b)
               Tbb(b1,b)        *= -0.5
               PUT Iab_bb(b1,b) += Tbb(b1,b)
#
            ENDDO b
#
      ENDPARDO b1, j2, j, j1
#
# Third-term of Iai_bb 
# --------------------
#
      PARDO b, b1, j1, j2
#
            REQUEST Vjbbj(j1,b1,b,j2) j2  
            REQUEST Vbbjj(b,b1,j1,j2) j2  
            Tqqqq(j1,j2,b1,b)  = Vjbbj(j1,b1,b,j2)
            T1qqqq(j1,j2,b1,b) = Vbbjj(b,b1,j1,j2)
            Tqqqq(j1,j2,b1,b) -= T1qqqq(j1,j2,b1,b)
#
            DO j
#
               REQUEST Dijka_bbbb(j,j1,j2,b1) b1 
#
               Tbj(b,j)         = Dijka_bbbb(j,j1,j2,b1)*Tqqqq(j1,j2,b1,b)
               PUT Iai_bb(b,j) += Tbj(b,j)
#
            ENDDO j
#
      ENDPARDO b, b1, j1, j2
#
# Fourth-term of Iai_bb 
# --------------------- 
#
      PARDO b, b1, j1, j2
#
            REQUEST VSqjqj(b,j1,b1,j2) j2  
#
            DO j
#
               REQUEST Dijka_bbbb(j1,j2,j,b1) b1 
#
               Tbj(b,j)         = VSqjqj(b,j1,b1,j2)*Dijka_bbbb(j1,j2,j,b1)
               Tbj(b,j)        *= 0.5
               PUT Iai_bb(b,j) += Tbj(b,j)
#
            ENDDO j
#
      ENDPARDO b, b1, j1, j2
#
# Sixth-term of Iia_bb 
# --------------------
#
      PARDO b, j3, j1, j2
#
            REQUEST Dijka_bbbb(j1,j2,j3,b) b 
#
            DO j
#
               REQUEST VSqjqj(j1,j3,j2,j) j
#
               Tqqqq(j,j1,j2,j3)  = VSqjqj(j1,j3,j2,j)
               Tjb(j,b)           = Tqqqq(j,j1,j2,j3)*Dijka_bbbb(j1,j2,j3,b)
               Tjb(j,b)          *= -0.5
               PUT Iia_bb(j,b)   += Tjb(j,b)
#
            ENDDO j
#
      ENDPARDO b, j3, j1, j2
#
# Done contributions to one-particle intermediates 
# ------------------------------------------------
#
# Compute contributions to one-particle intermediates 
# ---------------------------------------------------
#
# First-term of Iij_aa 
# --------------------
#
      PARDO i2, a1, a, i
#
           REQUEST VSpipi(a,i2,a1,i) i
           Tpppp(i2,a1,a,i)  = VSpipi(a,i2,a1,i)
#
           DO i1
#
              REQUEST Dijab_aa(i1,i2,a1,a) a 
#
              Tii(i,i1)         = Dijab_aa(i1,i2,a1,a)*Tpppp(i2,a1,a,i)
#             Tii(i,i1)        *= -1.0  
              Tii(i,i1)        *= -2.0  
              PUT Iij_aa(i,i1) += Tii(i,i1)
#
           ENDDO i1
#
      ENDPARDO i2, a1, a, i
#
# First-term of Iab_aa
# --------------------
#
      PARDO a, a2, i, i1
#
            REQUEST VSpipi(a,i,a2,i1) i1  
#
            DO a1
#
               REQUEST Dijab_aa(i,i1,a1,a2) a2 
#
               Taa(a,a1)         = VSpipi(a,i,a2,i1)*Dijab_aa(i,i1,a1,a2)
#              Taa(a,a1)        *= -1.0  
               Taa(a,a1)        *= -2.0  
               PUT Iab_aa(a,a1) += Taa(a,a1)
#
            ENDDO a1
#
      ENDPARDO a, a2, i, i1
#
# First-term of Iai_aa
# --------------------
#
      PARDO a, a1, a2, i1
#
            REQUEST VSaaai(a1,a,a2,i1) i1  
            Tpppp(i1,a1,a2,a)  = VSaaai(a1,a,a2,i1)
#
            DO i
#
               REQUEST Dijab_aa(i,i1,a1,a2) a2 
#
               Tai(a,i)         = Dijab_aa(i,i1,a1,a2)*Tpppp(i1,a1,a2,a)
               Tai(a,i)        *= 2.0  
               PUT Iai_aa(a,i) += Tai(a,i)
#
            ENDDO i
#
      ENDPARDO a, a1, a2, i1
#
# First-term of Iia_aa
# --------------------
# 
      PARDO a, a1, i2, i1
#
            REQUEST Dijab_aa(i2,i1,a,a1) a1 
#
            DO i
#
               REQUEST VSpipi(a1,i1,i,i2) i2  
#
               Tia(i,a)           = VSpipi(a1,i1,i,i2)*Dijab_aa(i2,i1,a,a1)
#              Tia(i,a)          *= -1.0  
               Tia(i,a)          *= -2.0  
               PUT Iia_aa(i,a)   += Tia(i,a)
#
            ENDDO i
#
      ENDPARDO a, a1, i2, i1
#
# Done contributions to one-particle intermediates 
# ------------------------------------------------ 
#
# Compute contributions to one-particle intermediates 
# --------------------------------------------------- 
#
# First-term of Iij_aa 
# --------------------
#
      PARDO j, a, b, i
#
           REQUEST Vpiqj(a,i,b,j) j
#
           DO i1
#
              REQUEST Dijab_ab(i1,j,a,b) b 
#
              Tii(i,i1)         = Dijab_ab(i1,j,a,b)*Vpiqj(a,i,b,j)
              Tii(i,i1)        *= -4.0  
              PUT Iij_aa(i,i1) += Tii(i,i1)
#
           ENDDO i1
#
      ENDPARDO j, a, b, i
#
# First-term of Iij_bb 
# -------------------- 
#
      PARDO i, b, a, j1
#
            REQUEST Vpiqj(a,i,b,j1) j1  
#
            DO j
#
               REQUEST Dijab_ab(i,j,a,b) b 
#
               Tjj(j1,j)         = Dijab_ab(i,j,a,b)*Vpiqj(a,i,b,j1)
               Tjj(j1,j)        *= -4.0  
               PUT Iij_bb(j1,j) += Tjj(j1,j)
#
            ENDDO j
#
      ENDPARDO i, b, a, j1
#
# First-term of Iab_aa
# --------------------
#
      PARDO a, b, i, j
#
            REQUEST Vpiqj(a,i,b,j) j
#
            DO a1
#
               REQUEST Dijab_ab(i,j,a1,b) b 
#
               Taa(a,a1)         = Vpiqj(a,i,b,j)*Dijab_ab(i,j,a1,b)
               Taa(a,a1)        *= -4.0  
               PUT Iab_aa(a,a1) += Taa(a,a1)
#
            ENDDO a1
#
      ENDPARDO a, b, i, j
#
# First-term of Iab_bb
# --------------------
#
      PARDO b1, a, j, i
#
            REQUEST Vpiqj(a,i,b1,j) j
#
            DO b
#
               REQUEST Dijab_ab(i,j,a,b) b 
#
               Tbb(b1,b)         = Vpiqj(a,i,b1,j)*Dijab_ab(i,j,a,b)
               Tbb(b1,b)        *= -4.0  
               PUT Iab_bb(b1,b) += Tbb(b1,b)
#
            ENDDO b
#
      ENDPARDO b1, a, j, i
#
# First-term of Iai_aa 
# -------------------- 
#
      PARDO a, a1, b, j
#
            REQUEST Vaabj(a1,a,b,j) j
            Tqpqp(j,a1,b,a)  = Vaabj(a1,a,b,j)
#
            DO i
#
               REQUEST Dijab_ab(i,j,a1,b) b 
#
               Tai(a,i)         = Dijab_ab(i,j,a1,b)*Tqpqp(j,a1,b,a)
               Tai(a,i)        *= 4.0  
               PUT Iai_aa(a,i) += Tai(a,i)
#
            ENDDO i
#
      ENDPARDO a, a1, b, j
#
# First-term of Iai_bb 
# -------------------- 
#
      PARDO b, b1, a, i
#
            REQUEST Vbbai(b1,b,a,i) i 
            Tpqpq(i,b1,a,b)  = Vbbai(b1,b,a,i)  
#
            DO j
#
               REQUEST Dijab_ab(i,j,a,b1) b1 
#
               Tbj(b,j)         = Dijab_ab(i,j,a,b1)*Tpqpq(i,b1,a,b)
               Tbj(b,j)        *= 4.0 
               PUT Iai_bb(b,j) += Tbj(b,j)
#
            ENDDO j
#
      ENDPARDO b, b1, a, i
#
# First-term of Iia_aa 
# -------------------- 
#
      PARDO a, b, i1, j
#
            REQUEST Dijab_ab(i1,j,a,b) b 
#
            DO i
#
               REQUEST Vpiqj(i,i1,b,j) j
#
               Tia(i,a)         = Vpiqj(i,i1,b,j)*Dijab_ab(i1,j,a,b)
               Tia(i,a)        *= -4.0 
               PUT Iia_aa(i,a) += Tia(i,a)
#
            ENDDO i
#
      ENDPARDO a, b, i1, j
#
# First-term of Iia_bb 
# -------------------- 
#
      PARDO b, a, j1, i
#
            REQUEST Dijab_ab(i,j1,a,b) b 
#
            DO j
#
               REQUEST Vpiqj(a,i,j,j1) j1 
#
               Tjb(j,b)         = Vpiqj(a,i,j,j1)*Dijab_ab(i,j1,a,b)
               Tjb(j,b)        *= -4.0  
               PUT Iia_bb(j,b) += Tjb(j,b)
#
            ENDDO j
#
      ENDPARDO b, a, j1, i
#
# Done contributions to one-particle intermediates 
# ------------------------------------------------ 
#
# Compute contributions to one-particle intermediates 
# --------------------------------------------------- 
#
# First-term of Iij_bb 
# -------------------- 
#
      PARDO b, j2, b1, j1
#
            REQUEST VSqjqj(b1,j2,b,j1) j1  
            Tqqqq(j2,b,b1,j1)  = VSqjqj(b1,j2,b,j1)
#
            DO j
#
               REQUEST Dijab_bb(j,j2,b,b1) b1 
#
               Tjj(j1,j)         = Dijab_bb(j,j2,b,b1)*Tqqqq(j2,b,b1,j1)
#              Tjj(j1,j)        *= -1.0  
               Tjj(j1,j)        *= -2.0  
               PUT Iij_bb(j1,j) += Tjj(j1,j)
#
            ENDDO j
#
      ENDPARDO b, j2, b1, j1
#
# First-term of Iab_bb
# --------------------
#
      PARDO b, b2, j, j1
#
            REQUEST VSqjqj(b,j,b2,j1) j1  
#
            DO b1
#
               REQUEST Dijab_bb(j,j1,b1,b2) b2 
#
               Tbb(b,b1)         = VSqjqj(b,j,b2,j1)*Dijab_bb(j,j1,b1,b2)
#              Tbb(b,b1)        *= -1.0  
               Tbb(b,b1)        *= -2.0  
               PUT Iab_bb(b,b1) += Tbb(b,b1)
#
            ENDDO b1
#
      ENDPARDO b, b2, j, j1
#
# First-term of Iai_bb
# --------------------
#
      PARDO b, b1, b2, j1
#
            REQUEST VSbbbj(b1,b,b2,j1) j1  
            Tqqqq(j1,b1,b2,b)  = VSbbbj(b1,b,b2,j1)
#
            DO j
#
               REQUEST Dijab_bb(j,j1,b1,b2) b2 
#
               Tbj(b,j)         = Dijab_bb(j,j1,b1,b2)*Tqqqq(j1,b1,b2,b)
               Tbj(b,j)        *= 2.0  
               PUT Iai_bb(b,j) += Tbj(b,j)
#
            ENDDO j
#
      ENDPARDO b, b1, b2, j1
#
# First-term of Iia_bb
# --------------------
#
      PARDO b, b1, j1, j2
#
            REQUEST Dijab_bb(j1,j2,b,b1) b1 
#
            DO j
#
               REQUEST VSqjqj(b1,j2,j,j1) j1  
#
               Tjb(j,b)         = VSqjqj(b1,j2,j,j1)*Dijab_bb(j1,j2,b,b1)
#              Tjb(j,b)        *= -1.0  
               Tjb(j,b)        *= -2.0  
               PUT Iia_bb(j,b) += Tjb(j,b)
#
            ENDDO j
#
      ENDPARDO b, b1, j1, j2
#
# Done contributions to one-particle intermediates 
# ------------------------------------------------ 
#
#
#
#   ...ready!
#
#
      ENDPROC  I_CONTRIBUTIONS
# ----------------------------------------------------------------------------- 



# -----------------------------------------------------------------------------
#
# The complete two-particle density martix is fully transformed and 'contracted' 
# with the integral derivatives.  
# --------------------------------------------------- 
#
      PROC PDCONT
#     ----------- 
#
      PARDO mu, nu, lambda, sigma 
#
            Txxxx(mu,nu,lambda,sigma) = 0.0
#
#           Compute the seperable contribution to the density matrix  
#           --------------------------------------------------------  
#
#           Get 1-particle pieces
#           ---------------------
#
            GET DHFa(mu,lambda)
            GET DHFa(nu,sigma)
            GET DHFa(mu,sigma)
            GET DHFa(nu,lambda)
#
            GET DHFb(mu,lambda)
            GET DHFb(nu,sigma)
            GET DHFb(mu,sigma)
            GET DHFb(nu,lambda)
#
            GET DpqA(mu,lambda)
            GET DpqA(nu,sigma)
            GET DpqA(mu,sigma)
            GET DpqA(nu,lambda)
#
            GET DpqB(mu,lambda)
            GET DpqB(nu,sigma)
            GET DpqB(mu,sigma)
            GET DpqB(nu,lambda)
#
#           HF only
#           -------
            Txx(mu,lambda)             = DHFa(mu,lambda)
            T1xxxx(mu,nu,lambda,sigma) = Txx(mu,lambda)^DHFa(nu,sigma)
            Txxxx(mu,nu,lambda,sigma) += T1xxxx(mu,nu,lambda,sigma)
#
            Txx(mu,lambda)             = DHFb(mu,lambda)
            T1xxxx(mu,nu,lambda,sigma) = Txx(mu,lambda)^DHFb(nu,sigma)
            Txxxx(mu,nu,lambda,sigma) += T1xxxx(mu,nu,lambda,sigma)
#
            T1xxxx(mu,nu,lambda,sigma) = DHFa(mu,lambda)^DHFb(nu,sigma)
            Txxxx(mu,nu,lambda,sigma) += T1xxxx(mu,nu,lambda,sigma)
#
            T1xxxx(mu,nu,lambda,sigma) = DHFb(mu,lambda)^DHFa(nu,sigma)
            Txxxx(mu,nu,lambda,sigma) += T1xxxx(mu,nu,lambda,sigma)
#
            Txx(mu,sigma)              = DHFa(mu,sigma)
            T1xxxx(mu,nu,lambda,sigma) = Txx(mu,sigma)^DHFa(nu,lambda)
            Txxxx(mu,nu,lambda,sigma) -= T1xxxx(mu,nu,lambda,sigma)
#
            Txx(mu,sigma)              = DHFb(mu,sigma)
            T1xxxx(mu,nu,lambda,sigma) = Txx(mu,sigma)^DHFb(nu,lambda)
            Txxxx(mu,nu,lambda,sigma) -= T1xxxx(mu,nu,lambda,sigma)
#
            Txxxx(mu,nu,lambda,sigma) *= 0.5
#
#           Correlation
#           -----------
            T1xxxx(mu,nu,lambda,sigma) = DpqA(mu,lambda)^DHFA(nu,sigma)
            Txxxx(mu,nu,lambda,sigma) += T1xxxx(mu,nu,lambda,sigma)
#
            T1xxxx(mu,nu,lambda,sigma) = DpqB(mu,lambda)^DHFB(nu,sigma)
            Txxxx(mu,nu,lambda,sigma) += T1xxxx(mu,nu,lambda,sigma)
#
            T1xxxx(mu,nu,lambda,sigma) = DpqA(mu,lambda)^DHFB(nu,sigma)
            Txxxx(mu,nu,lambda,sigma) += T1xxxx(mu,nu,lambda,sigma)
#
            T1xxxx(mu,nu,lambda,sigma) = DpqB(mu,lambda)^DHFA(nu,sigma)
            Txxxx(mu,nu,lambda,sigma) += T1xxxx(mu,nu,lambda,sigma)

            T1xxxx(mu,nu,lambda,sigma) = DpqA(mu,sigma)^DHFA(nu,lambda)
            T1xxxx(mu,nu,lambda,sigma)*= 0.5
            Txxxx(mu,nu,lambda,sigma) -= T1xxxx(mu,nu,lambda,sigma)
#
            T1xxxx(mu,nu,lambda,sigma) = DpqA(nu,lambda)^DHFA(mu,sigma)
            T1xxxx(mu,nu,lambda,sigma)*= 0.5
            Txxxx(mu,nu,lambda,sigma) -= T1xxxx(mu,nu,lambda,sigma)
#
            T1xxxx(mu,nu,lambda,sigma) = DpqB(mu,sigma)^DHFB(nu,lambda)
            T1xxxx(mu,nu,lambda,sigma)*= 0.5
            Txxxx(mu,nu,lambda,sigma) -= T1xxxx(mu,nu,lambda,sigma)
#
            T1xxxx(mu,nu,lambda,sigma) = DpqB(nu,lambda)^DHFB(mu,sigma)
            T1xxxx(mu,nu,lambda,sigma)*= 0.5
            Txxxx(mu,nu,lambda,sigma) -= T1xxxx(mu,nu,lambda,sigma)
#
#           Fully transform Diixx 
#           --------------------- 
            DO i  
#
               Tixxx(i,nu,lambda,sigma) = 0.0 
#
               DO i1   
                  REQUEST Diixx(i,i1,lambda,sigma) i1  
                  T1ixxx(i,nu,lambda,sigma) = Diixx(i,i1,lambda,sigma)*ca(nu,i1) 
                  Tixxx(i,nu,lambda,sigma) += T1ixxx(i,nu,lambda,sigma)
               ENDDO i1   
#
               T1xxxx(mu,nu,lambda,sigma) = Tixxx(i,nu,lambda,sigma)*ca(mu,i) 
               Txxxx(mu,nu,lambda,sigma) += T1xxxx(mu,nu,lambda,sigma)  
#
            ENDDO i 
#
#           Fully transform Djjxx 
#           --------------------- 
            DO j  
#
               Tjxxx(j,nu,lambda,sigma) = 0.0 
#
               DO j1 
#
                  REQUEST Djjxx(j,j1,lambda,sigma) j1  
                  T1jxxx(j,nu,lambda,sigma) = Djjxx(j,j1,lambda,sigma)*cb(nu,j1) 
                  Tjxxx(j,nu,lambda,sigma) += T1jxxx(j,nu,lambda,sigma) 
#
               ENDDO j1 
#
               T1xxxx(mu,nu,lambda,sigma) = Tjxxx(j,nu,lambda,sigma)*cb(mu,j) 
               Txxxx(mu,nu,lambda,sigma) += T1xxxx(mu,nu,lambda,sigma)  
#
            ENDDO j 
#
#           Fully transform Dijxx 
#           --------------------- 
            DO i  
#
               Tixxx(i,nu,lambda,sigma) = 0.0 
#
               DO j1 
#
                  REQUEST Dijxx(i,j1,lambda,sigma) j1  
                  T1ixxx(i,nu,lambda,sigma) = Dijxx(i,j1,lambda,sigma)*cb(nu,j1) 
                  Tixxx(i,nu,lambda,sigma) += T1ixxx(i,nu,lambda,sigma) 
#
               ENDDO j1  
#
               T1xxxx(mu,nu,lambda,sigma) = Tixxx(i,nu,lambda,sigma)*ca(mu,i) 
               Txxxx(mu,nu,lambda,sigma) += T1xxxx(mu,nu,lambda,sigma)  
#
            ENDDO i 
#
#           Fully transform Dixix 
#           --------------------- 
            DO i 
#
               Tixxx(i,nu,lambda,sigma) = 0.0 
#
               DO i1  
#
                  REQUEST Dixix(i,nu,i1,sigma) i1  
                  T1ixxx(i,nu,lambda,sigma) = Dixix(i,nu,i1,sigma)*ca(lambda,i1) 
                  Tixxx(i,nu,lambda,sigma) += T1ixxx(i,nu,lambda,sigma)
#
               ENDDO i1 
#
               T1xxxx(mu,nu,lambda,sigma) = Tixxx(i,nu,lambda,sigma)*ca(mu,i)  
               Txxxx(mu,nu,lambda,sigma) += T1xxxx(mu,nu,lambda,sigma) 
#
            ENDDO i 
#
#           Fully transform Djxjx 
#           --------------------- 
            DO j 
#
               Tjxxx(j,nu,lambda,sigma) = 0.0 
#
               DO j1  
#
                  REQUEST Djxjx(j,nu,j1,sigma) j1  
                  T1jxxx(j,nu,lambda,sigma) = Djxjx(j,nu,j1,sigma)*cb(lambda,j1) 
                  Tjxxx(j,nu,lambda,sigma) += T1jxxx(j,nu,lambda,sigma)
#
               ENDDO j1 
#
               T1xxxx(mu,nu,lambda,sigma) = Tjxxx(j,nu,lambda,sigma)*cb(mu,j)  
               Txxxx(mu,nu,lambda,sigma) += T1xxxx(mu,nu,lambda,sigma) 
#
            ENDDO j 
#
#           Fully transform Dixxj 
#           --------------------- 
            DO i 
#
               Tixxx(i,nu,lambda,sigma) = 0.0 
#
               DO j1  
#
                  REQUEST Dixxj(i,nu,lambda,j1) j1  
                  T1ixxx(i,nu,lambda,sigma) = Dixxj(i,nu,lambda,j1)*cb(sigma,j1) 
                  Tixxx(i,nu,lambda,sigma) += T1ixxx(i,nu,lambda,sigma)
#
               ENDDO j1 
#
               T1xxxx(mu,nu,lambda,sigma) = Tixxx(i,nu,lambda,sigma)*ca(mu,i)  
               Txxxx(mu,nu,lambda,sigma) += T1xxxx(mu,nu,lambda,sigma) 
#
            ENDDO i 
#
#           Fully transform Dxiix 
#           --------------------- 
            DO i  
#
               Txixx(mu,i,lambda,sigma) = 0.0 
#
               DO i1   
                  REQUEST Dxiix(mu,i,i1,sigma) i1  
                  T1xixx(mu,i,lambda,sigma) = Dxiix(mu,i,i1,sigma)*ca(lambda,i1) 
                  Txixx(mu,i,lambda,sigma) += T1xixx(mu,i,lambda,sigma)
               ENDDO i1   
#
               T1xxxx(mu,nu,lambda,sigma) = Txixx(mu,i,lambda,sigma)*ca(nu,i) 
               Txxxx(mu,nu,lambda,sigma) += T1xxxx(mu,nu,lambda,sigma)  
#
            ENDDO i 
#
#           Fully transform Dxjjx 
#           --------------------- 
            DO j  
#
               Txjxx(mu,j,lambda,sigma) = 0.0 
#
               DO j1   
                  REQUEST Dxjjx(mu,j,j1,sigma) j1  
                  T1xjxx(mu,j,lambda,sigma) = Dxjjx(mu,j,j1,sigma)*cb(lambda,j1) 
                  Txjxx(mu,j,lambda,sigma) += T1xjxx(mu,j,lambda,sigma)
               ENDDO j1   
#
               T1xxxx(mu,nu,lambda,sigma) = Txjxx(mu,j,lambda,sigma)*cb(nu,j) 
               Txxxx(mu,nu,lambda,sigma) += T1xxxx(mu,nu,lambda,sigma)  
#
            ENDDO j 
#
#           Fully transform Dxxxi 
#           --------------------- 
            DO i 
#
               REQUEST Dxxxi(mu,nu,lambda,i) i  
#
               T1xxxx(mu,nu,lambda,sigma)  = Dxxxi(mu,nu,lambda,i)*ca(sigma,i) 
               T1xxxx(mu,nu,lambda,sigma) *= 8.0  
               Txxxx(mu,nu,lambda,sigma)  += T1xxxx(mu,nu,lambda,sigma)  
#
            ENDDO i 
#
#           Fully transform Dxxxj 
#           --------------------- 
            DO j 
#
               REQUEST Dxxxj(mu,nu,lambda,j) j  
#
               T1xxxx(mu,nu,lambda,sigma)  = Dxxxj(mu,nu,lambda,j)*cb(sigma,j) 
               T1xxxx(mu,nu,lambda,sigma) *= 8.0  
               Txxxx(mu,nu,lambda,sigma)  += T1xxxx(mu,nu,lambda,sigma)  
#
            ENDDO j 
#
#           Contract half-transformed amplitudes to form backtransformed Dabcd  
#           ------------------------------------------------------------------ 
#
            PXXXX(mu,nu,lambda,sigma) = 0.0 
#
#           AAAA spin case 
#           -------------- 
            DO i 
            DO i1 
#
               REQUEST TAO_AA(mu,i,nu,i1)        i  
               REQUEST LAO_AA(i,lambda,i1,sigma) i  
               Txxii(mu,nu,i,i1)          = TAO_AA(mu,i,nu,i1)
               Tiixx(i,i1,lambda,sigma)   = LAO_AA(i,lambda,i1,sigma)
#
               T1xxxx(mu,nu,lambda,sigma) = Txxii(mu,nu,i,i1)*Tiixx(i,i1,lambda,sigma)
               PXXXX(mu,nu,lambda,sigma) += T1xxxx(mu,nu,lambda,sigma) 
#
            ENDDO i1 
            ENDDO i 

# Watson, eom gradient

            DO i
            DO i1 
#
               REQUEST RTAO_AA(mu,i,nu,i1)        i
               REQUEST LLAO_AA(i,lambda,i1,sigma) i
               Txxii(mu,nu,i,i1)          = RTAO_AA(mu,i,nu,i1)
               Tiixx(i,i1,lambda,sigma)   = LLAO_AA(i,lambda,i1,sigma)
#
               T1xxxx(mu,nu,lambda,sigma) = Txxii(mu,nu,i,i1)*Tiixx(i,i1,lambda,sigma)
               PXXXX(mu,nu,lambda,sigma) += T1xxxx(mu,nu,lambda,sigma)
#
            ENDDO i1
            ENDDO i
#
#           BBBB spin case 
#           -------------- 
            DO j 
            DO j1 
#
               REQUEST TAO_bb(mu,j,nu,j1)        j1  
               REQUEST LAO_bb(j,lambda,j1,sigma) j1  
               Txxjj(mu,nu,j,j1)          = TAO_BB(mu,j,nu,j1)
               Tjjxx(j,j1,lambda,sigma)   = LAO_BB(j,lambda,j1,sigma)
#
               T1xxxx(mu,nu,lambda,sigma) = Txxjj(mu,nu,j,j1)*Tjjxx(j,j1,lambda,sigma)  
               PXXXX(mu,nu,lambda,sigma) += T1xxxx(mu,nu,lambda,sigma) 
#
            ENDDO j1 
            ENDDO j 

# Watson, eom gradient

            DO j 
            DO j1
#              
               REQUEST RTAO_bb(mu,j,nu,j1)        j1
               REQUEST LLAO_bb(j,lambda,j1,sigma) j1  
               Txxjj(mu,nu,j,j1)          = RTAO_BB(mu,j,nu,j1)
               Tjjxx(j,j1,lambda,sigma)   = LLAO_BB(j,lambda,j1,sigma)
#              
               T1xxxx(mu,nu,lambda,sigma) = Txxjj(mu,nu,j,j1)*Tjjxx(j,j1,lambda,sigma)
               PXXXX(mu,nu,lambda,sigma) += T1xxxx(mu,nu,lambda,sigma)
#           
            ENDDO j1
            ENDDO j

#
#           ABAB spin case 
#           -------------- 
            DO i 
            DO j 
#
               REQUEST TAO_ab(mu,i,nu,j)        j  
               REQUEST LAO_ab(i,lambda,j,sigma) j  
               Txxij(mu,nu,i,j)            = TAO_AB(mu,i,nu,j)
               Tijxx(i,j,lambda,sigma)     = LAO_AB(i,lambda,j,sigma)
#
               T1xxxx(mu,nu,lambda,sigma)  = Txxij(mu,nu,i,j)*Tijxx(i,j,lambda,sigma)  
               T1xxxx(mu,nu,lambda,sigma) *= 4.0  
               PXXXX(mu,nu,lambda,sigma)  += T1xxxx(mu,nu,lambda,sigma) 
#
            ENDDO j 
            ENDDO i 
#
# Watson, eom gradient
            DO i
            DO j
#
               REQUEST RTAO_ab(mu,i,nu,j)        j
               REQUEST LLAO_ab(i,lambda,j,sigma) j
               Txxij(mu,nu,i,j)            = RTAO_AB(mu,i,nu,j)
               Tijxx(i,j,lambda,sigma)     = LLAO_AB(i,lambda,j,sigma)
#
               T1xxxx(mu,nu,lambda,sigma)  = Txxij(mu,nu,i,j)*Tijxx(i,j,lambda,sigma)
               T1xxxx(mu,nu,lambda,sigma) *= 4.0
               PXXXX(mu,nu,lambda,sigma)  += T1xxxx(mu,nu,lambda,sigma)
#
            ENDDO j
            ENDDO i

            Pxxxx(mu,nu,lambda,sigma) *= 0.25  
            Pxxxx(mu,nu,lambda,sigma) += Txxxx(mu,nu,lambda,sigma)  
#
            T1xxxx(mu,lambda,nu,sigma)  = Pxxxx(mu,nu,lambda,sigma) 
#
#           INTEGRAL BLOCK 1 
#           ---------------- 
            execute der_int_setup dx1(mu,lambda,nu,sigma) 
            execute der_int_setup dy1(mu,lambda,nu,sigma) 
            execute der_int_setup dz1(mu,lambda,nu,sigma) 
            execute der_int_setup dx2(mu,lambda,nu,sigma) 
            execute der_int_setup dy2(mu,lambda,nu,sigma) 
            execute der_int_setup dz2(mu,lambda,nu,sigma) 
            execute der_int_setup dx3(mu,lambda,nu,sigma) 
            execute der_int_setup dy3(mu,lambda,nu,sigma) 
            execute der_int_setup dz3(mu,lambda,nu,sigma) 
            execute der_int_setup dx4(mu,lambda,nu,sigma) 
            execute der_int_setup dy4(mu,lambda,nu,sigma) 
            execute der_int_setup dz4(mu,lambda,nu,sigma) 
#
            execute compute_derivative_integrals 
#
            execute DCONT2 T1xxxx(mu,lambda,nu,sigma) 
#
      ENDPARDO mu, nu, lambda, sigma  
      execute server_barrier 
#
      ENDPROC PDCONT 
# -----------------------------------------------------------------------------



#-----------------------------------------------------------------------
#
#     -----------------
      PROC  GET_RL_AMPS
#     -----------------
#
#
#
#
      rootcount = 0.0

      DO indone
      DO kroot

         GET  REE (kroot,indone)
         tee (kroot,indone) = REE (kroot,indone)

         rootcount += 1.0
         IF rootcount == iroot
            EXECUTE  RETURN_SVAL  tee  OMEGA
         ENDIF

      ENDDO kroot
      ENDDO indone

      EXECUTE  SIP_BARRIER

      ncount    = 0.0
      rootcount = 0.0
      DO indone
      DO kroot

         GET                  LEE (kroot,indone)
         tee (kroot,indone) = LEE (kroot,indone)
         EXECUTE  RETURN_SVAL  tee  L_OMEGA
         etemp = L_OMEGA - OMEGA
         IF etemp < 0.0
            etemp *= -1.0
         ENDIF

         rootcount += 1.0
         IF etemp < root_thresh
            ncount = rootcount
            EXIT
         ENDIF

      ENDDO kroot
      ENDDO indone

      EXECUTE  PRINT_SCALAR  OMEGA
      EXECUTE  PRINT_SCALAR  L_OMEGA
      EXECUTE  PRINT_SCALAR  ncount

      EXECUTE  SIP_BARRIER
#
#
#          ...Grab an R  array...
#                      k
#
#     
      PARDO  a, i
         rootcount = 0.0
         DO kroot
            GET  R1A_VECS (a,i,kroot)
            rootcount += 1.0
            IF  rootcount == iroot
                tai (a,i) = R1A_VECS (a,i,kroot)
                PUT  R1A (a,i) = tai (a,i)
            ENDIF             
         ENDDO kroot
      ENDPARDO  a, i
         
      PARDO  b, j
         rootcount = 0.0
         DO kroot
            GET  R1B_VECS (b,j,kroot)
            rootcount += 1.0
            IF  rootcount == iroot
                tbj (b,j) = R1B_VECS (b,j,kroot)
                PUT  R1B (b,j) = tbj (b,j)
            ENDIF
         ENDDO kroot
      ENDPARDO  b, j

      PARDO  a, i, a1, i1
         rootcount = 0.0
         DO kroot
            REQUEST  R2AA_VECS (a,i,a1,i1,kroot) kroot
            rootcount += 1.0
            IF  rootcount == iroot
                taiai (a,i,a1,i1) = R2AA_VECS (a,i,a1,i1,kroot)
                PREPARE  R2AA (a,i,a1,i1) = taiai (a,i,a1,i1)
            ENDIF
         ENDDO kroot
      ENDPARDO  a, i, a1, i1
      
      PARDO  b, j, b1, j1
         rootcount = 0.0
         DO kroot
            REQUEST  R2BB_VECS (b,j,b1,j1,kroot) kroot
            rootcount += 1.0
            IF  rootcount == iroot
                tbjbj (b,j,b1,j1) = R2BB_VECS (b,j,b1,j1,kroot)
                PREPARE  R2BB (b,j,b1,j1) = tbjbj (b,j,b1,j1)
            ENDIF
         ENDDO kroot
      ENDPARDO  b, j, b1, j1

      PARDO  a, i, b, j
         rootcount = 0.0
         DO kroot
            REQUEST  R2AB_VECS (a,i,b,j,kroot) kroot
            rootcount += 1.0
            IF  rootcount == iroot
                taibj (a,i,b,j) = R2AB_VECS (a,i,b,j,kroot)
                PREPARE  R2AB (a,i,b,j) = taibj (a,i,b,j)
            ENDIF
         ENDDO kroot
      ENDPARDO  a, i, b, j
#
#
#          ...Grab the corresponding L  array...
#                                     k
#
#
#
#
#          We found a matching excitation energy, so grab
#          the corresponding root!
#
#
      IF ncount > ZERO

         PARDO  i, a
            rootcount = 0.0
            DO kroot
               GET  L1A_VECS (i,a,kroot)
               rootcount += 1.0
               IF  rootcount == ncount
                   tia (i,a) = L1A_VECS (i,a,kroot)
                   PUT  L1A (i,a) = tia (i,a)
               ENDIF
            ENDDO kroot
         ENDPARDO  i, a

         PARDO  j, b
            rootcount = 0.0
            DO kroot
               GET  L1B_VECS (j,b,kroot)
               rootcount += 1.0
               IF  rootcount == ncount
                   tjb (j,b) = L1B_VECS (j,b,kroot)
                   PUT  L1B (j,b) = tjb (j,b)
               ENDIF
            ENDDO kroot
         ENDPARDO  j, b

         PARDO  i, a, i1, a1
            rootcount = 0.0
            DO kroot
               REQUEST  L2AA_VECS (i,a,i1,a1,kroot) kroot
               rootcount += 1.0
               IF  rootcount == ncount
                   tiaia (i,a,i1,a1) = L2AA_VECS (i,a,i1,a1,kroot)
                   PREPARE  L2AA (i,a,i1,a1) = tiaia (i,a,i1,a1)
               ENDIF
            ENDDO kroot
         ENDPARDO  i, a, i1, a1

         PARDO  j, b, j1, b1
            rootcount = 0.0
            DO kroot
               REQUEST  L2BB_VECS (j,b,j1,b1,kroot) kroot
               rootcount += 1.0
               IF  rootcount == ncount
                   tjbjb (j,b,j1,b1) = L2BB_VECS (j,b,j1,b1,kroot)
                   PREPARE  L2BB (j,b,j1,b1) = tjbjb (j,b,j1,b1)
               ENDIF
            ENDDO kroot
         ENDPARDO  j, b, j1, b1

         PARDO  i, a, j, b
            rootcount = 0.0
            DO kroot
               REQUEST  L2AB_VECS (i,a,j,b,kroot) kroot
               rootcount += 1.0
               IF  rootcount == ncount
                  tiajb (i,a,j,b) = L2AB_VECS (i,a,j,b,kroot)
                  PREPARE  L2AB (i,a,j,b) = tiajb (i,a,j,b)
               ENDIF
            ENDDO kroot
         ENDPARDO  i, a, j, b

      ENDIF # ncount > 0
#                  
#                  
#          In the event that none of the L excitation energies
#          match the the current R excitation energy, we need
#          to bomb!
#                  
#                  
      IF ncount == ZERO
            
         PARDO  p, p1 
            GET  BOMB_SHELL (p,p1) # never created array to force crash
         ENDPARDO  p, p1
            
      ENDIF 
#              
#              
#      ...ready!
#                  
#                  
      ENDPROC  GET_RL_AMPS
#-------------------------------------------------------------------------






#-----------------------------------------------------------------------
#
#     ------------------
      PROC  COMP_LR_NORM
#     ------------------
#
#
#          ...Compute the contributions...
#
#
      R0 = 0.0
      IG2R2  = 0.0
      IL2R2  = 0.0
      el2r2  = 0.0
      esum   = 0.0

      etemp1 = 0.0
      etemp2 = 0.0
      etemp3 = 0.0
      etemp4 = 0.0
      etemp5 = 0.0
      sum1 = 0.0
      sum2 = 0.0
      sum3 = 0.0
      sum4 = 0.0
      sum5 = 0.0

      PARDO  a, i
         GET  HBAR_ia (i,a)
         GET  R1A (a,i)
         etemp = HBAR_ia (i,a) * R1A (a,i)
         sum1 += etemp
      ENDPARDO  a, i

      PARDO  b, j
         GET  HBAR_jb (j,b)
         GET  R1B (b,j)
         etemp = HBAR_jb (j,b) * R1B (b,j)
         sum1 += etemp
      ENDPARDO  b, j

      PARDO  a, a1, i, i1
         REQUEST  R2AA   (a,i,a1,i1) i1
         REQUEST  VSpipi (a,i,a1,i1) i1
         etemp  = R2AA (a,i,a1,i1) * VSpipi (a,i,a1,i1)
         etemp *= 0.25
         sum2  += etemp
      ENDPARDO  a, a1, i, i1

      PARDO  b, b1, j, j1
         REQUEST  R2BB   (b,j,b1,j1) j1
         REQUEST  VSqjqj (b,j,b1,j1) j1
         etemp  = R2BB (b,j,b1,j1) * VSqjqj (b,j,b1,j1)
         etemp *= 0.25
         sum2  += etemp
      ENDPARDO  b, b1, j, j1

      PARDO  a, i, b, j
         REQUEST  R2AB (a,i,b,j) j
         REQUEST  Vpiqj (a,i,b,j) j
         etemp  = R2AB (a,i,b,j) * Vpiqj (a,i,b,j)
         sum2  += etemp
      ENDPARDO  a, i, b, j

      EXECUTE  SERVER_BARRIER
      
      collective  etemp1 += sum1
      collective  etemp2 += sum2
      
      R0 += etemp1
      R0 += etemp2
#     
# EOM GRADIENTS
      IG2R2 += etemp2 

      EXECUTE  SIP_BARRIER

      IRHBAR = R0

      R0      = R0 / OMEGA
      OMEGA2  = TWO / THREE
      OMEGA2 *= OMEGA 
#        
# Right Norm 
#     
      RNORM  = R0
      RNORM *= R0
      esum1  = 0.0

      PARDO  i, a
         GET         R1A (a,i)
         tai (a,i) = R1A (a,i)
         etemp  = tai (a,i) * tai (a,i)
         esum1 += etemp
      ENDPARDO  i, a

      PARDO  j, b
         GET         R1B (b,j)
         tbj (b,j) = R1B (b,j)
         etemp  = tbj (b,j) * tbj (b,j)
         esum1 += etemp
      ENDPARDO  j, b

      PARDO  a, i, a1, i1
         REQUEST             R2AA (a,i,a1,i1) a
         taiai (a,i,a1,i1) = R2AA (a,i,a1,i1)
         etemp  = taiai (a,i,a1,i1) * taiai (a,i,a1,i1)
         etemp *= 0.25
         esum1 += etemp
      ENDPARDO  a, i, a1, i1

      PARDO  b, j, b1, j1
         REQUEST             R2BB (b,j,b1,j1) b
         tbjbj (b,j,b1,j1) = R2BB (b,j,b1,j1)
         etemp  = tbjbj (b,j,b1,j1) * tbjbj (b,j,b1,j1)
         etemp *= 0.25
         esum1 += etemp
      ENDPARDO  b, j, b1, j1

      PARDO  a, i, b, j
         REQUEST           R2AB (a,i,b,j) a
         taibj (a,i,b,j) = R2AB (a,i,b,j)
         etemp  = taibj (a,i,b,j) * taibj (a,i,b,j)
         esum1 += etemp
      ENDPARDO  a, i, b, j

      EXECUTE  SIP_BARRIER
      EXECUTE  SERVER_BARRIER

      COLLECTIVE  RNORM += esum1
      
      EXECUTE SIP_BARRIER
      EXECUTE  SQUARE_ROOT  RNORM  ONEHALF
      
      RNORM  = 1.0 / RNORM
         
#        
# Leftp norm 
#        
      LNORM  = 0.0
      esum1  = 0.0
      
      PARDO  i, a
         GET         R1A (a,i)
         GET         L1A (i,a)
         tai (a,i) = R1A (a,i)
         etemp  = tai (a,i) * L1A (i,a)
         esum1 += etemp
      ENDPARDO  i, a
      
      PARDO  j, b
         GET         R1B (b,j)
         GET         L1B (j,b)
         tbj (b,j) = R1B (b,j)
         etemp  = tbj (b,j) * L1B (j,b)
         esum1 += etemp
      ENDPARDO  j, b

      PARDO  i, a, i1, a1
         REQUEST             R2AA (a,i,a1,i1) i
         REQUEST             L2AA (i,a,i1,a1) i
         taiai (a,i,a1,i1) = R2AA (a,i,a1,i1)
         etemp  = taiai (a,i,a1,i1) * L2AA (i,a,i1,a1)
         etemp *= 0.25
         esum1 += etemp
         el2r2 += etemp
      ENDPARDO  i, a, i1, a1
      
      PARDO  j, b, j1, b1
         REQUEST             R2BB (b,j,b1,j1) j
         REQUEST             L2BB (j,b,j1,b1) j
         tbjbj (b,j,b1,j1) = R2BB (b,j,b1,j1)
         etemp  = tbjbj (b,j,b1,j1) * L2BB (j,b,j1,b1)
         etemp *= 0.25
         esum1 += etemp
         el2r2 += etemp
      ENDPARDO  j, b, j1, b1

      PARDO  i, a, j, b
         REQUEST           R2AB (a,i,b,j) i
         REQUEST           L2AB (i,a,j,b) i
         taibj (a,i,b,j) = R2AB (a,i,b,j)
         etemp  = taibj (a,i,b,j) * L2AB (i,a,j,b)
         esum1 += etemp
         el2r2 += etemp
      ENDPARDO  i, a, j, b

      EXECUTE  SIP_BARRIER
      EXECUTE  SERVER_BARRIER

      COLLECTIVE  LNORM += esum1
      COLLECTIVE  IL2R2 += el2r2

      EXECUTE SIP_BARRIER
      LNORM *= RNORM
      etemp = LNORM
      LNORM = 1.0 / etemp
      LRNORM = LNORM * RNORM
#
      execute print_scalar R0
      execute print_scalar rnorm
      execute print_scalar lnorm
      execute print_scalar lrnorm
      execute print_scalar IL2R2
      execute print_scalar IG2R2
#
#
#      ...ready!
#
#
      ENDPROC  COMP_LR_NORM
#-------------------------------------------------------------------------





#------------------------------------------------------------------------
#
#     -----------------
      PROC  PRINT_XI_AB
#     --------------
#
#
      EXECUTE  SERVER_BARRIER
      EXECUTE  PRINT_SCALAR  ZERO
      PARDO  a, i, b1, j1
         REQUEST             XI2_AB (a,i,b1,j1) a
         taibj (a,i,b1,j1) = XI2_AB (a,i,b1,j1)
         EXECUTE  DUMP_AMP  taibj
      ENDPARDO  a, i, b1, j1
      EXECUTE  SERVER_BARRIER
#
#
#     ...ready!
#
#
      ENDPROC  PRINT_XI_AB
#------------------------------------------------------------------------



#------------------------------------------------------------------------
#
#     -----------------
      PROC  PRINT_XI_AA
#     --------------
#
#
      EXECUTE  SERVER_BARRIER
      EXECUTE  PRINT_SCALAR  ZERO
      PARDO  a, i, a1, i1
         REQUEST             XI2_AA (a,i,a1,i1) a
         taiai (a,i,a1,i1) = XI2_AA (a,i,a1,i1)
         EXECUTE  DUMP_AMP  taiai
      ENDPARDO  a, i, a1, i1
      EXECUTE  SERVER_BARRIER
#
#
#     ...ready!
#
#
      ENDPROC  PRINT_XI_AA
#------------------------------------------------------------------------



#------------------------------------------------------------------------
#
#     -----------------
      PROC  PRINT_XI_BB
#     -----------------
#
#     
      EXECUTE  SERVER_BARRIER
      EXECUTE  PRINT_SCALAR  ZERO
      PARDO  b, j, b1, j1    
         REQUEST             XI2_BB (b,j,b1,j1) b
         tbjbj (b,j,b1,j1) = XI2_BB (b,j,b1,j1)
         EXECUTE  DUMP_AMP  tbjbj
      ENDPARDO  b, j, b1, j1
      EXECUTE  SERVER_BARRIER
#
#
#     ...ready!
#
#     
      ENDPROC  PRINT_XI_BB
#------------------------------------------------------------------------



#------------------------------------------------------------------------
#
#     ----------------
      PROC  PRINT_XI
#     ----------------
#
#
      EXECUTE  SERVER_BARRIER
      EXECUTE  PRINT_SCALAR  ZERO
      PARDO  a, i
         GET         XI1_A (a,i)
         tai (a,i) = XI1_A (a,i)
         EXECUTE  DUMP_AMP  tai
      ENDPARDO  a, i
      EXECUTE  SERVER_BARRIER
      EXECUTE  PRINT_SCALAR  ZERO
      PARDO  b, j
         GET         XI1_B (b,j)
         tbj (b,j) = XI1_B (b,j)
         EXECUTE  DUMP_AMP  tbj
      ENDPARDO  b, j
      EXECUTE  SERVER_BARRIER
#
#
#     ...ready!
#
#
      ENDPROC  PRINT_XI
#------------------------------------------------------------------------
#
#
#
#
#          Watson, beginning the gradient code.
#
#                 1) Calculate Xi
#                 2) Calculate Z
#
#                               _
#                    Xi = <0| L H |q><q|R|p>
#
#                                      _      -1
#                    Z  = -<0|Xi|p><p| H-E  |p>
#                                         0
#
#------------------------------------------------------------------------
#
#     ----------------------
      PROC  XI_INTERMEDIATES
#     ----------------------
#
#
#
     PARDO i1, b, i, j
           T1pqpq(i1,b,i,j)         = 0.0
           PREPARE Niibj(i1,b,i,j) = T1pqpq(i1,b,i,j)
     ENDPARDO i1, b, i, j

     PARDO j1, a, j, i
           T1qpqp(j1,a,j,i)         = 0.0
           PREPARE Njjai(j1,a,j,i) = T1qpqp(j1,a,j,i)
     ENDPARDO j1, a, j, i

     PARDO i, i1, i2, a
           T1pppp(i1,a,i,i2)        = 0.0
           prepare Niiai(i1,a,i,i2) = T1pppp(i1,a,i,i2)
     ENDPARDO i, i1, i2, a

     PARDO j, j1, j2, b
           T1qqqq(j1,b,j,j2)        = 0.0
           prepare Njjbj(j1,b,j,j2) = T1qqqq(j1,b,j,j2)
     ENDPARDO j, j1, j2, b

     PARDO i, i1, j, j1
           tiijj(i,i1,j,j1) = 0.0
           put Niijj(i,i1,j,j1) = tiijj(i,i1,j,j1)
     ENDPARDO i, i1, j, j1

     PARDO i, i1, i2, i3
           tiiii(i,i1,i2,i3) = 0.0
           PUT Niiii(i,i1,i2,i3) = tiiii(i,i1,i2,i3)
     ENDPARDO i, i1, i2, i3

     PARDO j, j1, j2, j3
           tjjjj(j,j1,j2,j3) = 0.0
           PUT Njjjj(j,j1,j2,j3) = tjjjj(j,j1,j2,j3)
     ENDPARDO j, j1, j2, j3

      CREATE  R2L2_iijj
      CREATE  R2L2_iiii
      CREATE  R2L2_jjjj
      CREATE  R2G2_iijj
      CREATE  R2G2_iiii
      CREATE  R2G2_jjjj
      ALLOCATE  LR1W_ai  (*,*)
      ALLOCATE  LR1W_bj  (*,*)
      ALLOCATE  LR1W_ii  (*,*)
      ALLOCATE  LR1W_jj  (*,*)
      ALLOCATE  LR1W_aa  (*,*)
      ALLOCATE  LR1W_bb  (*,*)
      ALLOCATE  LR1L2_ai (*,*)
      ALLOCATE  LR1L2_bj (*,*)
      ALLOCATE  LR2L1_ai (*,*)
      ALLOCATE  LR2L1_bj (*,*)
      ALLOCATE  LR2W2_ai (*,*)
      ALLOCATE  LR2W2_bj (*,*)
      ALLOCATE  LR2W2_aa (*,*)
      ALLOCATE  LR2W2_bb (*,*)
      ALLOCATE  LR2W2_ii (*,*)
      ALLOCATE  LR2W2_jj (*,*)
      ALLOCATE  LR2L2_aa (*,*)
      ALLOCATE  LR2L2_bb (*,*)
      ALLOCATE  LR2L2_ii (*,*)
      ALLOCATE  LR2L2_jj (*,*)
      EXECUTE  SERVER_BARRIER
#
#
#
#
#
      PARDO  a, a2, i2, a1
         ALLOCATE  LLaiai (a2,i2,a1,*)
         DO i1
            REQUEST                 L2AA (i1,a1,i2,a2) i1
            LLaiai (a2,i2,a1,i1)  = L2AA (i1,a1,i2,a2)
         ENDDO i1
         DO i 
            REQUEST  R2AA (a,i,a2,i2) i
            REQUEST  T2old_aa (a,i,a2,i2) i
            DO i1
               taiai  (a,i,a1,i1) = R2AA (a,i,a2,i2) * LLaiai (a2,i2,a1,i1)
               t1aiai (a,i,a1,i1) = T2old_aa (a,i,a2,i2) * LLaiai (a2,i2,a1,i1)
      
               tiaia  (i,a1,i1,a) = taiai  (a,i,a1,i1)
               t1iaia (i,a1,i1,a) = t1aiai (a,i,a1,i1)
      
               PREPARE  L2R2_aaaa (i,a1,i1,a) += tiaia  (i,a1,i1,a)
               PREPARE  L2T2_aaaa (i,a1,i1,a) += t1iaia (i,a1,i1,a)
            ENDDO i1
         ENDDO i
         DEALLOCATE  LLaiai (a2,i2,a1,*)
      ENDPARDO  a, a2, i2, a1
      
      PARDO  a, b2, j2, a1
         ALLOCATE  LLbjai (b2,j2,a1,*)
         DO i1
            REQUEST                L2AB (i1,a1,j2,b2) i1
            LLbjai (b2,j2,a1,i1)  = L2AB (i1,a1,j2,b2)
         ENDDO i1
         DO i
            REQUEST  R2AB (a,i,b2,j2) i
            REQUEST  T2old_ab (a,i,b2,j2) i
            DO i1
               taiai  (a,i,a1,i1) = R2AB (a,i,b2,j2) * LLbjai (b2,j2,a1,i1)
               t1aiai (a,i,a1,i1) = T2old_ab (a,i,b2,j2) * LLbjai (b2,j2,a1,i1)

               tiaia  (i,a1,i1,a) = taiai  (a,i,a1,i1)
               t1iaia (i,a1,i1,a) = t1aiai (a,i,a1,i1)

               PREPARE  L2R2_aaaa (i,a1,i1,a) += tiaia  (i,a1,i1,a)
               PREPARE  L2T2_aaaa (i,a1,i1,a) += t1iaia (i,a1,i1,a)
            ENDDO i1
         ENDDO i
         DEALLOCATE  LLbjai (b2,j2,a1,*)
      ENDPARDO  a, b2, j2, a1

      PARDO  b, b2, j2, b1
         ALLOCATE  LLbjbj (b2,j2,b1,*)
         DO j1
            REQUEST                 L2BB (j1,b1,j2,b2) j1
            LLbjbj (b2,j2,b1,j1)  = L2BB (j1,b1,j2,b2)
         ENDDO j1
         DO j
            REQUEST  R2BB (b,j,b2,j2) j
            REQUEST  T2old_bb (b,j,b2,j2) j
            DO j1
               tbjbj  (b,j,b1,j1) = R2BB (b,j,b2,j2) * LLbjbj (b2,j2,b1,j1)
               t1bjbj (b,j,b1,j1) = T2old_bb (b,j,b2,j2) * LLbjbj (b2,j2,b1,j1)

               tjbjb  (j,b1,j1,b) = tbjbj  (b,j,b1,j1)
               t1jbjb (j,b1,j1,b) = t1bjbj (b,j,b1,j1)

               PREPARE  L2R2_bbbb (j,b1,j1,b) += tjbjb  (j,b1,j1,b)
               PREPARE  L2T2_bbbb (j,b1,j1,b) += t1jbjb (j,b1,j1,b)
            ENDDO j1
         ENDDO j
         DEALLOCATE  LLbjbj (b2,j2,b1,*)
      ENDPARDO  b, b2, j2, b1

      PARDO  b, a2, i2, b1
         ALLOCATE  LLbjai (b1,*,a2,i2)
         DO j1
            REQUEST                L2AB (i2,a2,j1,b1) j1
            LLbjai (b1,j1,a2,i2) = L2AB (i2,a2,j1,b1)
         ENDDO j1
         DO j
            REQUEST  R2AB     (a2,i2,b,j) j
            REQUEST  T2old_ab (a2,i2,b,j) j
            DO j1
               tbjbj  (b1,j1,b,j) = LLbjai (b1,j1,a2,i2) * R2AB     (a2,i2,b,j)
               t1bjbj (b1,j1,b,j) = LLbjai (b1,j1,a2,i2) * T2old_ab (a2,i2,b,j)
               
               tjbjb  (j,b1,j1,b) = tbjbj  (b1,j1,b,j)
               t1jbjb (j,b1,j1,b) = t1bjbj (b1,j1,b,j)
               
               PREPARE  L2R2_bbbb (j,b1,j1,b) += tjbjb  (j,b1,j1,b)
               PREPARE  L2T2_bbbb (j,b1,j1,b) += t1jbjb (j,b1,j1,b)
            ENDDO j1
         ENDDO j
         DEALLOCATE  LLbjai (b1,*,a2,i2)
      ENDPARDO  b, a2, i2, b1

      PARDO  a, a2, i2, b1
         ALLOCATE  Laibj (a2,i2,b1,*)
         DO j1
            REQUEST                L2AB (i2,a2,j1,b1) j1
            Laibj (a2,i2,b1,j1)  = L2AB (i2,a2,j1,b1)
         ENDDO j1
         DO i
            REQUEST  R2AA (a,i,a2,i2) i
            REQUEST  T2old_aa (a,i,a2,i2) i
            DO j1
               taibj  (a,i,b1,j1) = R2AA (a,i,a2,i2) * Laibj (a2,i2,b1,j1)
               t1aibj (a,i,b1,j1) = T2old_aa (a,i,a2,i2) * Laibj (a2,i2,b1,j1)
               
               tpqqp  (i,b1,j1,a) = taibj  (a,i,b1,j1)
               t1pqqp (i,b1,j1,a) = t1aibj (a,i,b1,j1)
               
               PREPARE  L2R2_abba (i,b1,j1,a) += tpqqp  (i,b1,j1,a)
               PREPARE  L2T2_abba (i,b1,j1,a) += t1pqqp (i,b1,j1,a)
            ENDDO j1
         ENDDO i
         DEALLOCATE  Laibj (a2,i2,b1,*)
      ENDPARDO  a, a2, i2, b1

      PARDO  a, b2, j2, b1
         ALLOCATE  LLbjbj (b2,j2,b1,*)
         DO j1
            REQUEST                L2BB (j2,b2,j1,b1) j1
            LLbjbj (b2,j2,b1,j1) = L2BB (j2,b2,j1,b1)
         ENDDO j1
         DO i
            REQUEST  R2AB (a,i,b2,j2) i
            REQUEST  T2old_ab (a,i,b2,j2) i
            DO j1
               taibj  (a,i,b1,j1) = R2AB (a,i,b2,j2) * LLbjbj (b2,j2,b1,j1)
               t1aibj (a,i,b1,j1) = T2old_ab (a,i,b2,j2) * LLbjbj (b2,j2,b1,j1)
               
               tpqqp  (i,b1,j1,a) = taibj  (a,i,b1,j1)
               t1pqqp (i,b1,j1,a) = t1aibj (a,i,b1,j1)
               
               PREPARE  L2R2_abba (i,b1,j1,a) += tpqqp  (i,b1,j1,a)
               PREPARE  L2T2_abba (i,b1,j1,a) += t1pqqp (i,b1,j1,a)
            ENDDO j1
         ENDDO i
         DEALLOCATE  LLbjbj (b2,j2,b1,*)
      ENDPARDO  a, b2, j2, b1

      PARDO  b, b2, j2, a1
         ALLOCATE  LLbjai (b2,j2,a1,*)
         DO i1
            REQUEST                L2AB (i1,a1,j2,b2) i1
            LLbjai (b2,j2,a1,i1)  = L2AB (i1,a1,j2,b2)
         ENDDO i1
         DO j
            REQUEST  R2BB (b,j,b2,j2) j
            REQUEST  T2old_bb (b,j,b2,j2) j
            DO i1
               tbjai  (b,j,a1,i1) = R2BB     (b,j,b2,j2) * LLbjai (b2,j2,a1,i1)
               t1bjai (b,j,a1,i1) = T2old_bb (b,j,b2,j2) * LLbjai (b2,j2,a1,i1)
               
               tqppq  (j,a1,i1,b) = tbjai  (b,j,a1,i1)
               t1qppq (j,a1,i1,b) = t1bjai (b,j,a1,i1)
               
               PREPARE  L2R2_baab (j,a1,i1,b) += tqppq  (j,a1,i1,b)
               PREPARE  L2T2_baab (j,a1,i1,b) += t1qppq (j,a1,i1,b)
            ENDDO i1
         ENDDO j
         DEALLOCATE  LLbjai (b2,j2,a1,*)
      ENDPARDO  b, b2, j2, a1

      PARDO  b, a2, i2, a1
         ALLOCATE  LLaiai (a1,*,a2,i2)
         DO i1
            REQUEST                L2AA (i1,a1,i2,a2) i1
            LLaiai (a1,i1,a2,i2) = L2AA (i1,a1,i2,a2)
         ENDDO i1
         DO j
            REQUEST  R2AB (a2,i2,b,j) j
            REQUEST  T2old_ab (a2,i2,b,j) j
            DO i1
               taibj  (a1,i1,b,j) = LLaiai (a1,i1,a2,i2) * R2AB     (a2,i2,b,j)
               t1aibj (a1,i1,b,j) = LLaiai (a1,i1,a2,i2) * T2old_ab (a2,i2,b,j)
               
               tqppq  (j,a1,i1,b) = taibj  (a1,i1,b,j)
               t1qppq (j,a1,i1,b) = t1aibj (a1,i1,b,j)
               
               PREPARE  L2R2_baab (j,a1,i1,b) += tqppq  (j,a1,i1,b)
               PREPARE  L2T2_baab (j,a1,i1,b) += t1qppq (j,a1,i1,b)
            ENDDO i1
         ENDDO j
         DEALLOCATE  LLaiai (a1,*,a2,i2)
      ENDPARDO  b, a2, i2, a1

      PARDO  b, a2, j2, b1
         ALLOCATE  Lajib (a2,j2,*,b1)
         DO i1
            REQUEST                L2AB (i1,a2,j2,b1) i1
            Lajib (a2,j2,i1,b1)  = L2AB (i1,a2,j2,b1)
         ENDDO i1
         DO i
            REQUEST              R2AB (a2,i,b,j2) i
            REQUEST              T2old_ab (a2,i,b,j2) i
            tpqpq  (i,b,a2,j2) = R2AB (a2,i,b,j2)
            t1pqpq (i,b,a2,j2) = T2old_ab (a2,i,b,j2)
            DO i1
               tibib  (i,b,i1,b1) = tpqpq  (i,b,a2,j2) * Lajib (a2,j2,i1,b1)
               t1ibib (i,b,i1,b1) = t1pqpq (i,b,a2,j2) * Lajib (a2,j2,i1,b1)
               
               PREPARE  L2R2_abab (i,b,i1,b1) += tibib  (i,b,i1,b1)
               PREPARE  L2T2_abab (i,b,i1,b1) += t1ibib (i,b,i1,b1)
            ENDDO i1
         ENDDO i
         DEALLOCATE  Lajib (a2,j2,*,b1)
      ENDPARDO  b, a2, j2, b1

      PARDO  a, b2, i2, a1
         ALLOCATE  Lbija (b2,i2,*,a1)
         DO j1
            REQUEST                L2AB (i2,a1,j1,b2) j1
            Lbija (b2,i2,j1,a1)  = L2AB (i2,a1,j1,b2)
         ENDDO j1
         DO j
            REQUEST              R2AB     (a,i2,b2,j) j
            REQUEST              T2old_ab (a,i2,b2,j) j
            tqpqp  (j,a,b2,i2) = R2AB     (a,i2,b2,j)
            t1qpqp (j,a,b2,i2) = T2old_ab (a,i2,b2,j)
            DO j1
               tjaja  (j,a,j1,a1) = tqpqp  (j,a,b2,i2) * Lbija (b2,i2,j1,a1)
               t1jaja (j,a,j1,a1) = t1qpqp (j,a,b2,i2) * Lbija (b2,i2,j1,a1)

               PREPARE  L2R2_baba (j,a,j1,a1) += tjaja  (j,a,j1,a1)
               PREPARE  L2T2_baba (j,a,j1,a1) += t1jaja (j,a,j1,a1)
            ENDDO j1
         ENDDO j
         DEALLOCATE  Lbija (b2,i2,*,a1)
      ENDPARDO  a, b2, i2, a1
#
#
#
#
#
      PARDO  a1, a3, i3, a2
         ALLOCATE  Liiaa (*,i3,a2,a3)
         DO i2
            REQUEST               R2AA (a2,i2,a3,i3) i2
            Liiaa (i2,i3,a2,a3) = R2AA (a2,i2,a3,i3)
         ENDDO i2
         DO i
            REQUEST              HBAR_AIBC_aaaa (a1,a2,i,a3) i
            tpppp (a2,a3,a1,i) = HBAR_AIBC_aaaa (a1,a2,i,a3)
            DO i2
               tiiai (i2,i3,a1,i)  = Liiaa (i2,i3,a2,a3) * tpppp (a2,a3,a1,i)
               tiiai (i2,i3,a1,i) *= -0.5
               tiaii (i2,a1,i3,i)  = tiiai (i2,i3,a1,i)
               PREPARE  Niiai (i2,a1,i3,i) += tiaii (i2,a1,i3,i)
            ENDDO i2
         ENDDO i
         DEALLOCATE  Liiaa (*,i3,a2,a3)
      ENDPARDO  a1, a3, i3, a2

      PARDO  b1, b3, j3, b2
         ALLOCATE  Ljjbb (*,j3,b2,b3)
         DO j2
            REQUEST               R2BB (b2,j2,b3,j3) j2
            Ljjbb (j2,j3,b2,b3) = R2BB (b2,j2,b3,j3) 
         ENDDO j2 
         DO j
            REQUEST              HBAR_AIBC_bbbb (b1,b2,j,b3) j
            tqqqq (b2,b3,b1,j) = HBAR_AIBC_bbbb (b1,b2,j,b3) 
            DO j2 
               tjjbj (j2,j3,b1,j)  = Ljjbb (j2,j3,b2,b3) * tqqqq (b2,b3,b1,j)
               tjjbj (j2,j3,b1,j) *= -0.5
               tjbjj (j2,b1,j3,j)  = tjjbj (j2,j3,b1,j)
               PREPARE  Njjbj (j2,b1,j3,j) += tjbjj (j2,b1,j3,j)
            ENDDO j2
         ENDDO j
         DEALLOCATE  Ljjbb (*,j3,b2,b3)
      ENDPARDO  b1, b3, j3, b2

      PARDO  b1, a3, i3, b2
         ALLOCATE Lqpqp (*,i3,b2,a3)
         DO j2
            REQUEST               R2AB (a3,i3,b2,j2) j2
            Lqpqp (j2,i3,b2,a3) = R2AB (a3,i3,b2,j2)
         ENDDO j2
         DO i
            REQUEST              HBAR_AIBC_bbaa (b1,b2,i,a3) i
            tqpqp (b2,a3,b1,i) = HBAR_AIBC_bbaa (b1,b2,i,a3)
            DO j2
               tjibi (j2,i3,b1,i)  = Lqpqp (j2,i3,b2,a3) * tqpqp (b2,a3,b1,i)
               tibij (i,b1,i3,j2)  = tjibi (j2,i3,b1,i)
               tibij (i,b1,i3,j2) *= -1.0
               PREPARE  Niibj (i,b1,i3,j2) += tibij (i,b1,i3,j2)
            ENDDO j2
         ENDDO i
         DEALLOCATE  Lqpqp (*,i3,b2,a3)
      ENDPARDO  b1, a3, i3, b2

      PARDO  a1, b3, j3, a2
         ALLOCATE Lpqpq (*,j3,a2,b3)
         DO i2
            REQUEST               R2AB (a2,i2,b3,j3) i2
            Lpqpq (i2,j3,a2,b3) = R2AB (a2,i2,b3,j3)
         ENDDO i2
         DO j
            REQUEST              HBAR_AIBC_aabb (a1,a2,j,b3) j
            tpqpq (a2,b3,a1,j) = HBAR_AIBC_aabb (a1,a2,j,b3)
            DO i2
               tijaj (i2,j3,a1,j)  = Lpqpq (i2,j3,a2,b3) * tpqpq (a2,b3,a1,j)
               tjaji (j,a1,j3,i2)  = tijaj (i2,j3,a1,j)
               tjaji (j,a1,j3,i2) *= -1.0
               PREPARE  Njjai (j,a1,j3,i2) += tjaji (j,a1,j3,i2)
            ENDDO i2
         ENDDO j
         DEALLOCATE  Lpqpq (*,j3,a2,b3)
      ENDPARDO  a1, b3, j3, a2
#
#
#
#
#
      PARDO  a2, i2, a1, a3
         REQUEST               HBAR_AIBC_aaaa (a3,a1,i2,a2) a3
         tpppp (a1,a3,a2,i2) = HBAR_AIBC_aaaa (a3,a1,i2,a2)
         GET  R1A (a2,i2)
         taa (a1,a3)  = tpppp (a1,a3,a2,i2) * R1A (a2,i2)
         LR1W_aa (a1,a3) += taa (a1,a3)
      ENDPARDO  a2, i2, a1, a3

      PARDO  b2, j2, b1, b3
         REQUEST               HBAR_AIBC_bbbb (b3,b1,j2,b2) b3
         tqqqq (b1,b3,b2,j2) = HBAR_AIBC_bbbb (b3,b1,j2,b2)
         GET  R1B (b2,j2)
         tbb (b1,b3)  = tqqqq (b1,b3,b2,j2) * R1B (b2,j2)
         LR1W_bb (b1,b3) += tbb (b1,b3)
      ENDPARDO  b2, j2, b1, b3

      PARDO  b2, j2, a1, a3
         REQUEST               HBAR_AIBC_aabb (a3,a1,j2,b2) a3
         tppqq (a1,a3,b2,j2) = HBAR_AIBC_aabb (a3,a1,j2,b2)
         GET  R1B (b2,j2)
         taa (a1,a3)  = tppqq (a1,a3,b2,j2) * R1B (b2,j2)
         LR1W_aa (a1,a3) += taa (a1,a3)
      ENDPARDO  b2, j2, a1, a3

      PARDO  a2, i2, b1, b3
         REQUEST               HBAR_AIBC_bbaa (b3,b1,i2,a2) a2
         tqqpp (b1,b3,a2,i2) = HBAR_AIBC_bbaa (b3,b1,i2,a2)
         GET  R1A (a2,i2)
         tbb (b1,b3)  = tqqpp (b1,b3,a2,i2) * R1A (a2,i2)
         LR1W_bb (b1,b3) += tbb (b1,b3)
      ENDPARDO  a2, i2, b1, b3
#
#
#
#
#
      PARDO  i2, a2, a3, i
         ALLOCATE  LLaiai  (a2,i,a3,*)
         ALLOCATE  L1aiai (a2,i,a3,*)
         DO i1
            REQUEST               L2AA   (i,a2,i1,a3) i1
            REQUEST               VSpipi (a2,i,a3,i1) i1
            LLaiai  (a2,i,a3,i1) = L2AA   (i,a2,i1,a3)
            L1aiai (a2,i,a3,i1) = VSpipi (a2,i,a3,i1)
         ENDDO i1
         DO i3
            REQUEST               R2AA (a2,i2,a3,i3) i3
            taiai (a2,i2,a3,i3) = R2AA (a2,i2,a3,i3)
            DO i1
               tpppp  (i2,i,i3,i1)  = R2AA  (a2,i2,a3,i3) * LLaiai (a2,i,a3,i1)
               t1pppp (i2,i,i3,i1)  = taiai (a2,i2,a3,i3) * L1aiai (a2,i,a3,i1)
               PUT  R2L2_iiii (i2,i,i3,i1) += tpppp  (i2,i,i3,i1)
               PUT  R2G2_iiii (i2,i,i3,i1) += t1pppp (i2,i,i3,i1)
            ENDDO i1
         ENDDO i3
         DEALLOCATE  LLaiai  (a2,i,a3,*)
         DEALLOCATE  L1aiai (a2,i,a3,*)
      ENDPARDO  i2, a2, a3, i

      PARDO  j2, b2, b3, j
         ALLOCATE  LLbjbj  (b2,j,b3,*)
         ALLOCATE  L1bjbj (b2,j,b3,*)
         DO j1
            REQUEST               L2BB   (j,b2,j1,b3) j1
            REQUEST               VSqjqj (b2,j,b3,j1) j1
            LLbjbj  (b2,j,b3,j1) = L2BB   (j,b2,j1,b3)
            L1bjbj (b2,j,b3,j1) = VSqjqj (b2,j,b3,j1)
         ENDDO j1
         DO j3
            REQUEST               R2BB (b2,j2,b3,j3) j3
            tbjbj (b2,j2,b3,j3) = R2BB (b2,j2,b3,j3)
            DO j1
               tqqqq  (j2,j,j3,j1)  = R2BB  (b2,j2,b3,j3) * LLbjbj (b2,j,b3,j1)
               t1qqqq (j2,j,j3,j1)  = tbjbj (b2,j2,b3,j3) * L1bjbj (b2,j,b3,j1)
               PUT  R2L2_jjjj (j2,j,j3,j1) += tqqqq  (j2,j,j3,j1)
               PUT  R2G2_jjjj (j2,j,j3,j1) += t1qqqq (j2,j,j3,j1)
            ENDDO j1
         ENDDO j3
         DEALLOCATE  LLbjbj  (b2,j,b3,*)
         DEALLOCATE  L1bjbj (b2,j,b3,*)
      ENDPARDO  j2, b2, b3, j

      PARDO  i2, a2, b2, i
         ALLOCATE  Laibj  (a2,i,b2,*)
         ALLOCATE  L1aibj (a2,i,b2,*)
         DO j
            REQUEST              L2AB  (i,a2,j,b2) j
            REQUEST              Vpiqj (a2,i,b2,j) j
            Laibj  (a2,i,b2,j) = L2AB  (i,a2,j,b2)
            L1aibj (a2,i,b2,j) = Vpiqj (a2,i,b2,j)
         ENDDO j
         DO j2
            REQUEST               R2AB (a2,i2,b2,j2) j2
            taibj (a2,i2,b2,j2) = R2AB (a2,i2,b2,j2)
            DO j
               tppqq  (i2,i,j2,j)  = R2AB  (a2,i2,b2,j2) * Laibj  (a2,i,b2,j)
               t1ppqq (i2,i,j2,j)  = taibj (a2,i2,b2,j2) * L1aibj (a2,i,b2,j)
               PUT  R2L2_iijj (i2,i,j2,j) += tppqq  (i2,i,j2,j)
               PUT  R2G2_iijj (i2,i,j2,j) += t1ppqq (i2,i,j2,j)
            ENDDO j
         ENDDO j2
         DEALLOCATE  Laibj  (a2,i,b2,*)
         DEALLOCATE  L1aibj (a2,i,b2,*)
      ENDPARDO  i2, a2, b2, i
#
#
#
#
#
      PARDO  a2, i2, a1, i1
         REQUEST       VSpipi (a1,i1,a2,i2) a1
         GET           R1A (a2,i2)
         tpp (a1,i1) = VSpipi (a1,i1,a2,i2) * R1A (a2,i2)
         LR1W_ai (a1,i1) += tpp (a1,i1)
      ENDPARDO  a2, i2, a1, i1

      PARDO  b2, j2, b1, j1
         REQUEST       VSqjqj (b1,j1,b2,j2) b1
         GET           R1B (b2,j2) 
         tqq (b1,j1) = VSqjqj (b2,j2,b1,j1) * R1B (b2,j2)
         LR1W_bj (b1,j1) += tqq (b1,j1)
      ENDPARDO  b2, j2, b1, j1 

      PARDO  b2, j2, a1, i1
         REQUEST       Vpiqj (a1,i1,b2,j2) a1
         GET           R1B (b2,j2)
         GET           R1A (a1,i1)
         taibj (a1,i1,b2,j2) = Vpiqj (a1,i1,b2,j2)
         tai (a1,i1) = R1A (a1,i1)

         tpp (a1,i1) = Vpiqj (a1,i1,b2,j2) * R1B (b2,j2)
         tqq (b2,j2) = tai (a1,i1) * taibj (a1,i1,b2,j2)
         LR1W_ai (a1,i1) += tpp (a1,i1)
         LR1W_bj (b2,j2) += tqq (b2,j2)
      ENDPARDO  b2, j2, a1, i1
#
#
#
#
#
      PARDO  a2, i2, i1, i3
         REQUEST  HBAR_JKIA_aaaa (i1,i3,i2,a2) i1
         GET  R1A (a2,i2)
         tia (i2,a2) = R1A (a2,i2)
         tii (i1,i3) = HBAR_JKIA_aaaa (i1,i3,i2,a2) * tia (i2,a2)
         LR1W_ii (i1,i3) += tii (i1,i3)
      ENDPARDO  a2, i2, i1, i3

      PARDO  b2, j2, j1, j3
         REQUEST  HBAR_JKIA_bbbb (j1,j3,j2,b2) j1
         GET  R1B (b2,j2)
         tjb (j2,b2) = R1B (b2,j2)
         tjj (j1,j3) = HBAR_JKIA_bbbb (j1,j3,j2,b2) * tjb (j2,b2)
         LR1W_jj (j1,j3) += tjj (j1,j3)
      ENDPARDO  b2, j2, j1, j3

      PARDO  b2, j2, i1, i3
         REQUEST  HBAR_JKIA_aabb (i1,i3,j2,b2) i1
         GET  R1B (b2,j2)
         tjb (j2,b2) = R1B (b2,j2)
         tii (i1,i3) = HBAR_JKIA_aabb (i1,i3,j2,b2) * tjb (j2,b2)
         LR1W_ii (i1,i3) += tii (i1,i3)
      ENDPARDO  b2, j2, i1, i3

      PARDO  j, j2, i3, a3
         REQUEST  HBAR_JKIA_bbaa (j,j2,i3,a3) j
         GET  R1A (a3,i3)
         tia (i3,a3)  = R1A (a3,i3)
         tjj (j,j2) = HBAR_JKIA_bbaa (j,j2,i3,a3) * tia (i3,a3)
         LR1W_jj (j,j2) += tjj (j,j2)
      ENDPARDO  j, j2, i3, a3
#
#
#
#
#
      PARDO  i, a, i2, a2
         REQUEST             L2AA (i,a,i2,a2) i
         REQUEST             R2AA (a,i,a2,i2) i
         GET                 R1A  (a2,i2)
         GET                 L1A  (i2,a2)
         taiai (a,i,a2,i2) = L2AA (i,a,i2,a2)
         tpp  (a2,i2)      = L1A  (i2,a2)
         tai  (a,i)        = taiai (a,i,a2,i2) * R1A (a2,i2)
         t1ai (a,i)        = R2AA  (a,i,a2,i2) * tpp (a2,i2)
         LR1L2_ai (a,i) += tai  (a,i)
         LR2L1_ai (a,i) += t1ai (a,i)
      ENDPARDO  i, a, i2, a2

      PARDO  j, b, j2, b2
         REQUEST             L2BB (j,b,j2,b2) j
         REQUEST             R2BB (b,j,b2,j2) j
         GET                 R1B  (b2,j2)
         GET                 L1B  (j2,b2)
         tbjbj (b,j,b2,j2) = L2BB (j,b,j2,b2)
         tqq  (b2,j2)      = L1B (j2,b2)
         tbj  (b,j)        = tbjbj (b,j,b2,j2) * R1B (b2,j2)
         t1bj (b,j)        = R2BB  (b,j,b2,j2) * tqq (b2,j2)
         LR1L2_bj (b,j) += tbj  (b,j)
         LR2L1_bj (b,j) += t1bj (b,j)
      ENDPARDO  j, b, j2, b2

      PARDO  i, a, j2, b2
         REQUEST              L2AB (i,a,j2,b2) i
         REQUEST              R2AB (a,i,b2,j2) i
         taibj  (a,i,b2,j2) = L2AB  (i,a,j2,b2)
         tppqq  (a,i,b2,j2) = taibj (a,i,b2,j2)
         t1aibj (a,i,b2,j2) = R2AB  (a,i,b2,j2)

         GET                  R1B  (b2,j2)
         GET                  R1A  (a,i)
         GET                  L1B  (j2,b2)
         GET                  L1A  (i,a)
         tpp  (a,i)         = R1A (a,i)
         t1pp (a,i)         = L1A (i,a)
         t2qq (b2,j2)       = L1B (j2,b2)

         tai (a,i)          = taibj (a,i,b2,j2) * R1B (b2,j2)
         tbj (b2,j2)        = tpp (a,i) * tppqq (a,i,b2,j2)
         t1ai (a,i)         = R2AB (a,i,b2,j2) * t2qq (b2,j2)
         t1bj (b2,j2)       = t1pp (a,i) * t1aibj (a,i,b2,j2)

         LR1L2_ai (a,i)   += tai  (a,i)
         LR1L2_bj (b2,j2) += tbj  (b2,j2)
         LR2L1_ai (a,i)   += t1ai (a,i)
         LR2L1_bj (b2,j2) += t1bj (b2,j2)
      ENDPARDO  i, a, j2, b2
#
#
#
#
#
      PARDO  a2, a3, i2
         ALLOCATE  LLaiai (a2,i2,a3,*)
         DO i1
            REQUEST               R2AA (a2,i2,a3,i1) i1
            LLaiai (a2,i2,a3,i1) = R2AA (a2,i2,a3,i1)
         ENDDO i1
         DO a1
            REQUEST               HBAR_AIBC_aaaa (a1,a3,i2,a2) a1
            tpppp (a1,a2,i2,a3) = HBAR_AIBC_aaaa (a1,a3,i2,a2)
            DO i1
               tai (a1,i1)  = tpppp (a1,a2,i2,a3) * LLaiai (a2,i2,a3,i1)
               tai (a1,i1) *= 0.5
               LR2W2_ai (a1,i1) += tai (a1,i1)
            ENDDO i1
         ENDDO a1
         DEALLOCATE  LLaiai (a2,i2,a3,*)
      ENDPARDO  a2, a3, i2

      PARDO  b2, a3, j2
         ALLOCATE  LLbjai (b2,j2,a3,*)
         DO i1
            REQUEST               R2AB (a3,i1,b2,j2) i1
            LLbjai (b2,j2,a3,i1) = R2AB (a3,i1,b2,j2)
         ENDDO i1
         DO a1
            REQUEST               HBAR_AIBC_aabb (a1,a3,j2,b2) a1
            tpqqp (a1,b2,j2,a3) = HBAR_AIBC_aabb (a1,a3,j2,b2)
            DO i1
               tai (a1,i1)  = tpqqp (a1,b2,j2,a3) * LLbjai (b2,j2,a3,i1)
               LR2W2_ai (a1,i1) += tai (a1,i1)
            ENDDO i1
         ENDDO a1
         DEALLOCATE  LLbjai (b2,j2,a3,*)
      ENDPARDO  b2, a3, j2

      PARDO  b2, b3, j2
         ALLOCATE  LLbjbj (b2,j2,b3,*)
         DO j1  
            REQUEST               R2BB (b2,j2,b3,j1) j1
            LLbjbj (b2,j2,b3,j1) = R2BB (b2,j2,b3,j1)
         ENDDO j1
         DO b1
            REQUEST               HBAR_AIBC_bbbb (b1,b3,j2,b2) b1
            tqqqq (b1,b2,j2,b3) = HBAR_AIBC_bbbb (b1,b3,j2,b2)
            DO j1 
               tbj (b1,j1)  = tqqqq (b1,b2,j2,b3) * LLbjbj (b2,j2,b3,j1)
               tbj (b1,j1) *= 0.5
               LR2W2_bj (b1,j1) += tbj (b1,j1)
            ENDDO j1
         ENDDO b1
         DEALLOCATE  LLbjbj (b2,j2,b3,*)
      ENDPARDO  b2, b3, j2

      PARDO  a2, b3, i2
         ALLOCATE  Laibj (a2,i2,b3,*)
         DO j1
            REQUEST               R2AB (a2,i2,b3,j1) j1
            Laibj (a2,i2,b3,j1) = R2AB (a2,i2,b3,j1)
         ENDDO j1
         DO b1
            REQUEST               HBAR_AIBC_bbaa (b1,b3,i2,a2) b1
            tqppq (b1,a2,i2,b3) = HBAR_AIBC_bbaa (b1,b3,i2,a2)
            DO j1
               tbj (b1,j1)  = tqppq (b1,a2,i2,b3) * Laibj (a2,i2,b3,j1)
               LR2W2_bj (b1,j1) += tbj (b1,j1)
            ENDDO j1
         ENDDO b1
         DEALLOCATE  Laibj (a2,i2,b3,*)
      ENDPARDO  a2, b3, i2

      PARDO  a3, i3, i2
         ALLOCATE  Liaii (i2,a3,i3,*)
         DO i1
            REQUEST               HBAR_JKIA_aaaa (i2,i1,i3,a3) i1
            Liaii (i2,a3,i3,i1) = HBAR_JKIA_aaaa (i2,i1,i3,a3)
         ENDDO i1
         DO a1
            REQUEST               R2AA (a1,i2,a3,i3) a1
            taiai (a1,i2,a3,i3) = R2AA (a1,i2,a3,i3)
            DO i1
               tai (a1,i1)  = taiai (a1,i2,a3,i3) * Liaii (i2,a3,i3,i1)
               tai (a1,i1) *= -0.5
               LR2W2_ai (a1,i1) += tai (a1,i1)
            ENDDO i1
         ENDDO a1
         DEALLOCATE  Liaii (i2,a3,i3,*)
      ENDPARDO  a3, i3, i2

      PARDO  b3, j3, i2
         ALLOCATE  Libji (i2,b3,j3,*)
         DO i1
            REQUEST               HBAR_JKIA_aabb (i2,i1,j3,b3) i1
            Libji (i2,b3,j3,i1) = HBAR_JKIA_aabb (i2,i1,j3,b3)
         ENDDO i1
         DO a1
            REQUEST               R2AB (a1,i2,b3,j3) a1
            taibj (a1,i2,b3,j3) = R2AB (a1,i2,b3,j3)
            DO i1
               tai (a1,i1)  = taibj (a1,i2,b3,j3) * Libji (i2,b3,j3,i1)
               tai (a1,i1) *= -1.0
               LR2W2_ai (a1,i1) += tai (a1,i1)
            ENDDO i1
         ENDDO a1
         DEALLOCATE  Libji (i2,b3,j3,*)
      ENDPARDO  b3, j3, i2

      PARDO  b3, j3, j2
         ALLOCATE  Ljbjj (j2,b3,j3,*)
         DO j1
            REQUEST               HBAR_JKIA_bbbb (j2,j1,j3,b3) j1
            Ljbjj (j2,b3,j3,j1) = HBAR_JKIA_bbbb (j2,j1,j3,b3)
         ENDDO j1
         DO b1
            REQUEST               R2BB (b1,j2,b3,j3) b1
            tbjbj (b1,j2,b3,j3) = R2BB (b1,j2,b3,j3)
            DO j1
               tbj (b1,j1)  = tbjbj (b1,j2,b3,j3) * Ljbjj (j2,b3,j3,j1)
               tbj (b1,j1) *= -0.5
               LR2W2_bj (b1,j1) += tbj (b1,j1)
            ENDDO j1
         ENDDO b1
         DEALLOCATE  Ljbjj (j2,b3,j3,*)
      ENDPARDO  b3, j3, j2

      PARDO  a3, i3, j2
         ALLOCATE  Ljaij (j2,a3,i3,*)
         DO j1
            REQUEST               HBAR_JKIA_bbaa (j2,j1,i3,a3) j1
            Ljaij (j2,a3,i3,j1) = HBAR_JKIA_bbaa (j2,j1,i3,a3)
         ENDDO j1
         DO b1
            REQUEST               R2AB (a3,i3,b1,j2) b1
            tqqpp (b1,j2,a3,i3) = R2AB (a3,i3,b1,j2)
            DO j1
               tbj (b1,j1)  = tqqpp (b1,j2,a3,i3) * Ljaij (j2,a3,i3,j1)
               tbj (b1,j1) *= -1.0
               LR2W2_bj (b1,j1) += tbj (b1,j1)
            ENDDO j1
         ENDDO b1
         DEALLOCATE  Ljaij (j2,a3,i3,*)
      ENDPARDO  a3, i3, j2
#
#
#     R2 * L2 --> R2L2_aa
#     R2 * W2 --> R2W2_aa
#
#
      PARDO  a3, i2, i3
         ALLOCATE  Liaia (i3,a3,i2,*)
         DO a2
            REQUEST               R2AA (a2,i2,a3,i3) a2
            Liaia (i3,a3,i2,a2) = R2AA (a2,i2,a3,i3)
         ENDDO a2
         DO a
            REQUEST              VSpipi (a,i2,a3,i3) a
            REQUEST              L2AA   (i2,a,i3,a3) a
            taiai (a,i3,a3,i2) = L2AA   (i2,a,i3,a3)
            tpppp (a,i3,a3,i2) = VSpipi (a,i2,a3,i3)
            DO a2
               taa (a,a2)  = tpppp (a,i3,a3,i2) * Liaia (i3,a3,i2,a2)
               tpp (a,a2)  = taiai (a,i3,a3,i2) * Liaia (i3,a3,i2,a2)
               taa (a,a2) *= -0.5
               tpp (a,a2) *= -0.5
               LR2W2_aa (a,a2) += taa (a,a2)
               LR2L2_aa (a,a2) += tpp (a,a2)
            ENDDO a2
         ENDDO a
         DEALLOCATE  Liaia (i3,a3,i2,*)
      ENDPARDO  a3, i2, i3

      PARDO  b3, i2, j3
         ALLOCATE  Ljbia (j3,b3,i2,*)
         DO a2
            REQUEST               R2AB (a2,i2,b3,j3) a2
            Ljbia (j3,b3,i2,a2) = R2AB (a2,i2,b3,j3)
         ENDDO a2
         DO a
            REQUEST              Vpiqj (a,i2,b3,j3) a
            REQUEST              L2AB  (i2,a,j3,b3) a
            tajbi (a,j3,b3,i2) = L2AB  (i2,a,j3,b3)
            tpqqp (a,j3,b3,i2) = Vpiqj (a,i2,b3,j3)
            DO a2
               taa (a,a2)  = tpqqp (a,j3,b3,i2) * Ljbia (j3,b3,i2,a2)
               tpp (a,a2)  = tajbi (a,j3,b3,i2) * Ljbia (j3,b3,i2,a2)
               taa (a,a2) *= -1.0
               tpp (a,a2) *= -1.0
               LR2W2_aa (a,a2) += taa (a,a2)
               LR2L2_aa (a,a2) += tpp (a,a2)
            ENDDO a2
         ENDDO a
         DEALLOCATE  Ljbia (j3,b3,i2,*)
      ENDPARDO  b3, i2, j3

      PARDO  b3, j2, j3
         ALLOCATE  Ljbjb (j3,b3,j2,*)
         DO b2
            REQUEST               R2BB (b2,j2,b3,j3) b2
            Ljbjb (j3,b3,j2,b2) = R2BB (b2,j2,b3,j3)
         ENDDO b2
         DO b
            REQUEST              VSqjqj (b,j2,b3,j3) b
            REQUEST              L2BB   (j2,b,j3,b3) b
            tbjbj (b,j3,b3,j2) = L2BB   (j2,b,j3,b3)
            tqqqq (b,j3,b3,j2) = VSqjqj (b,j2,b3,j3)
            DO b2
               tbb (b,b2)  = tqqqq (b,j3,b3,j2) * Ljbjb (j3,b3,j2,b2)
               tqq (b,b2)  = tbjbj (b,j3,b3,j2) * Ljbjb (j3,b3,j2,b2)
               tbb (b,b2) *= -0.5
               tqq (b,b2) *= -0.5
               LR2W2_bb (b,b2) += tbb (b,b2)
               LR2L2_bb (b,b2) += tqq (b,b2)
            ENDDO b2
         ENDDO b
         DEALLOCATE  Ljbjb (j3,b3,j2,*)
      ENDPARDO  b3, j2, j3

      PARDO  a3, j2, i3
         ALLOCATE  Liajb (i3,a3,j2,*)
         DO b2
            REQUEST               R2AB (a3,i3,b2,j2) b2
            Liajb (i3,a3,j2,b2) = R2AB (a3,i3,b2,j2)
         ENDDO b2
         DO b
            REQUEST              Vpiqj (a3,i3,b,j2) b
            REQUEST              L2AB  (i3,a3,j2,b) b
            tbiaj (b,i3,a3,j2) = L2AB  (i3,a3,j2,b)
            tqppq (b,i3,a3,j2) = Vpiqj (a3,i3,b,j2)
            DO b2
               tbb (b,b2)  = tqppq (b,i3,a3,j2) * Liajb (i3,a3,j2,b2)
               tqq (b,b2)  = tbiaj (b,i3,a3,j2) * Liajb (i3,a3,j2,b2)
               tbb (b,b2) *= -1.0
               tqq (b,b2) *= -1.0
               LR2W2_bb (b,b2) += tbb (b,b2)
               LR2L2_bb (b,b2) += tqq (b,b2)
            ENDDO b2
         ENDDO b
         DEALLOCATE  Liajb (i3,a3,j2,*)
      ENDPARDO  a3, j2, i3

      PARDO  i3, a2, a3
         ALLOCATE  Liaia (*,a2,i3,a3)
         DO i2
            REQUEST                R2AA (a2,i2,a3,i3) i2
            Liaia (i2,a2,i3,a3)  = R2AA (a2,i2,a3,i3)
            Liaia (i2,a2,i3,a3) *= 0.5
         ENDDO i2
         DO i
            REQUEST              VSpipi (a2,i,a3,i3) i
            REQUEST              L2AA   (i,a2,i3,a3) i
            taiai (a2,i3,a3,i) = VSpipi (a2,i,a3,i3)
            tpppp (a2,i3,a3,i) = L2AA   (i,a2,i3,a3)
            DO i2
               tii (i2,i)  = Liaia (i2,a2,i3,a3) * taiai (a2,i3,a3,i)
               tpp (i2,i)  = Liaia (i2,a2,i3,a3) * tpppp (a2,i3,a3,i)
               LR2W2_ii (i2,i) += tii (i2,i)
               LR2L2_ii (i2,i) += tpp (i2,i)
            ENDDO i2
         ENDDO i
         DEALLOCATE  Liaia (*,a2,i3,a3)
      ENDPARDO  i3, a2, a3

      PARDO  j3, a2, b3
         ALLOCATE  Liajb (*,a2,j3,b3)
         DO i2
            REQUEST                R2AB (a2,i2,b3,j3) i2
            Liajb (i2,a2,j3,b3)  = R2AB (a2,i2,b3,j3)
         ENDDO i2
         DO i
            REQUEST              Vpiqj (a2,i,b3,j3) i
            REQUEST              L2AB  (i,a2,j3,b3) i
            tajbi (a2,j3,b3,i) = Vpiqj (a2,i,b3,j3)
            tpqqp (a2,j3,b3,i) = L2AB  (i,a2,j3,b3)
            DO i2
               tii (i2,i)  = Liajb (i2,a2,j3,b3) * tajbi (a2,j3,b3,i)
               tpp (i2,i)  = Liajb (i2,a2,j3,b3) * tpqqp (a2,j3,b3,i)
               LR2W2_ii (i2,i) += tii (i2,i)
               LR2L2_ii (i2,i) += tpp (i2,i)
            ENDDO i2
         ENDDO i
         DEALLOCATE  Liajb (*,a2,j3,b3)
      ENDPARDO  j3, a2, b3

      PARDO  j3, b2, b3
         ALLOCATE  Ljbjb (*,b2,j3,b3)
         DO j2
            REQUEST                R2BB (b2,j2,b3,j3) j2
            Ljbjb (j2,b2,j3,b3)  = R2BB (b2,j2,b3,j3)
            Ljbjb (j2,b2,j3,b3) *= 0.5
         ENDDO j2
         DO j
            REQUEST              VSqjqj (b2,j,b3,j3) j
            REQUEST              L2BB   (j,b2,j3,b3) j
            tbjbj (b2,j3,b3,j) = VSqjqj (b2,j,b3,j3)
            tqqqq (b2,j3,b3,j) = L2BB   (j,b2,j3,b3)
            DO j2
               tjj (j2,j)  = Ljbjb (j2,b2,j3,b3) * tbjbj (b2,j3,b3,j)
               tqq (j2,j)  = Ljbjb (j2,b2,j3,b3) * tqqqq (b2,j3,b3,j)
               LR2W2_jj (j2,j) += tjj (j2,j)
               LR2L2_jj (j2,j) += tqq (j2,j)
            ENDDO j2
         ENDDO j
         DEALLOCATE  Ljbjb (*,b2,j3,b3)
      ENDPARDO  j3, b2, b3

      PARDO  i3, b2, a3
         ALLOCATE  Ljbia (*,b2,i3,a3)
         DO j2
            REQUEST                R2AB (a3,i3,b2,j2) j2
            Ljbia (j2,b2,i3,a3)  = R2AB (a3,i3,b2,j2)
         ENDDO j2
         DO j
            REQUEST              Vpiqj (a3,i3,b2,j) j
            REQUEST              L2AB  (i3,a3,j,b2) j
            tbiaj (b2,i3,a3,j) = Vpiqj (a3,i3,b2,j)
            tqppq (b2,i3,a3,j) = L2AB  (i3,a3,j,b2)
            DO j2
               tjj (j2,j)  = Ljbia (j2,b2,i3,a3) * tbiaj (b2,i3,a3,j)
               tqq (j2,j)  = Ljbia (j2,b2,i3,a3) * tqppq (b2,i3,a3,j)
               LR2W2_jj (j2,j) += tjj (j2,j)
               LR2L2_jj (j2,j) += tqq (j2,j)
            ENDDO j2
         ENDDO j
         DEALLOCATE  Ljbia (*,b2,i3,a3)
      ENDPARDO  i3, b2, a3
#        
#        
#          Done computing the intermediates!
#          Put them fully into the local arrays!
#     
#

      CREATE  DIS_VO1_A
      CREATE  DIS_VO1_B
      CREATE  DIS_VO2_A
      CREATE  DIS_VO2_B
      CREATE  DIS_VO3_A
      CREATE  DIS_VO3_B
      CREATE  DIS_VO4_A
      CREATE  DIS_VO4_B
      CREATE  DIS_OO1_A
      CREATE  DIS_OO1_B
      CREATE  DIS_OO2_A
      CREATE  DIS_OO2_B
      CREATE  DIS_OO3_A
      CREATE  DIS_OO3_B
      CREATE  DIS_VV1_A
      CREATE  DIS_VV1_B
      CREATE  DIS_VV2_A
      CREATE  DIS_VV2_B
      CREATE  DIS_VV3_A
      CREATE  DIS_VV3_B
      EXECUTE  SIP_BARRIER

      DO i1
      DO a
         tpp  (a,i1) = LR1W_ai  (a,i1)
         t1pp (a,i1) = LR1L2_ai (a,i1)
         t2pp (a,i1) = LR2L1_ai (a,i1)
         t3pp (a,i1) = LR2W2_ai (a,i1)
         PUT  DIS_VO1_A (a,i1) += tpp  (a,i1)
         PUT  DIS_VO2_A (a,i1) += t1pp (a,i1)
         PUT  DIS_VO3_A (a,i1) += t2pp (a,i1)
         PUT  DIS_VO4_A (a,i1) += t3pp (a,i1)
      ENDDO a
      ENDDO i1

      DO j1
      DO b
         tqq  (b,j1) = LR1W_bj  (b,j1)
         t1qq (b,j1) = LR1L2_bj (b,j1)
         t2qq (b,j1) = LR2L1_bj (b,j1)
         t3qq (b,j1) = LR2W2_bj (b,j1)
         PUT  DIS_VO1_B (b,j1) += tqq  (b,j1)
         PUT  DIS_VO2_B (b,j1) += t1qq (b,j1)
         PUT  DIS_VO3_B (b,j1) += t2qq (b,j1)
         PUT  DIS_VO4_B (b,j1) += t3qq (b,j1)
      ENDDO b
      ENDDO j1

      DO i1
      DO i
         tpp  (i,i1) = LR1W_ii  (i,i1)
         t1pp (i,i1) = LR2W2_ii (i,i1)
         t2pp (i,i1) = LR2L2_ii (i,i1)
         PUT  DIS_OO1_A (i,i1) += tpp  (i,i1)
         PUT  DIS_OO2_A (i,i1) += t1pp (i,i1)
         PUT  DIS_OO3_A (i,i1) += t2pp (i,i1)
      ENDDO i
      ENDDO i1

      DO j1
      DO j
         tqq  (j,j1) = LR1W_jj  (j,j1)
         t1qq (j,j1) = LR2W2_jj (j,j1)
         t2qq (j,j1) = LR2L2_jj (j,j1) 
         PUT  DIS_OO1_B (j,j1) += tqq  (j,j1)
         PUT  DIS_OO2_B (j,j1) += t1qq (j,j1)
         PUT  DIS_OO3_B (j,j1) += t2qq (j,j1)
      ENDDO j
      ENDDO j1

      DO a1
      DO a
         tpp  (a,a1) = LR1W_aa  (a,a1)
         t1pp (a,a1) = LR2W2_aa (a,a1)
         t2pp (a,a1) = LR2L2_aa (a,a1)
         PUT  DIS_VV1_A (a,a1) += tpp  (a,a1)
         PUT  DIS_VV2_A (a,a1) += t1pp (a,a1)
         PUT  DIS_VV3_A (a,a1) += t2pp (a,a1)
      ENDDO a
      ENDDO a1

      DO b1 
      DO b  
         tqq  (b,b1) = LR1W_bb  (b,b1)
         t1qq (b,b1) = LR2W2_bb (b,b1)
         t2qq (b,b1) = LR2L2_bb (b,b1)
         PUT  DIS_VV1_B (b,b1) += tqq  (b,b1)
         PUT  DIS_VV2_B (b,b1) += t1qq (b,b1)
         PUT  DIS_VV3_B (b,b1) += t2qq (b,b1)
      ENDDO b 
      ENDDO b1

      EXECUTE  SIP_BARRIER
      
      DO i1
      DO a
         GET  DIS_VO1_A (a,i1)
         GET  DIS_VO2_A (a,i1)
         GET  DIS_VO3_A (a,i1)
         GET  DIS_VO4_A (a,i1)
         LR1W_ai  (a,i1) = DIS_VO1_A (a,i1)
         LR1L2_ai (a,i1) = DIS_VO2_A (a,i1)
         LR2L1_ai (a,i1) = DIS_VO3_A (a,i1)
         LR2W2_ai (a,i1) = DIS_VO4_A (a,i1)
      ENDDO a
      ENDDO i1
      
      DO j1
      DO b
         GET  DIS_VO1_B (b,j1)
         GET  DIS_VO2_B (b,j1)
         GET  DIS_VO3_B (b,j1)
         GET  DIS_VO4_B (b,j1)
         LR1W_bj  (b,j1) = DIS_VO1_B (b,j1)
         LR1L2_bj (b,j1) = DIS_VO2_B (b,j1)
         LR2L1_bj (b,j1) = DIS_VO3_B (b,j1)
         LR2W2_bj (b,j1) = DIS_VO4_B (b,j1)
      ENDDO b
      ENDDO j1

      DO i1
      DO i  
            GET  DIS_OO1_A (i,i1)
            GET  DIS_OO2_A (i,i1)
            GET  DIS_OO3_A (i,i1)
            LR1W_ii  (i,i1) = DIS_OO1_A (i,i1)
            LR2W2_ii (i,i1) = DIS_OO2_A (i,i1)
            LR2L2_ii (i,i1) = DIS_OO3_A (i,i1)
      ENDDO i
      ENDDO i1

      DO j1
      DO j  
            GET  DIS_OO1_B (j,j1)
            GET  DIS_OO2_B (j,j1)
            GET  DIS_OO3_B (j,j1)
            LR1W_jj  (j,j1) = DIS_OO1_B (j,j1)
            LR2W2_jj (j,j1) = DIS_OO2_B (j,j1)
            LR2L2_jj (j,j1) = DIS_OO3_B (j,j1)
      ENDDO j
      ENDDO j1

      DO a1
      DO a
         GET  DIS_VV1_A (a,a1)
         GET  DIS_VV2_A (a,a1)
         GET  DIS_VV3_A (a,a1)
         LR1W_aa  (a,a1) = DIS_VV1_A (a,a1)
         LR2W2_aa (a,a1) = DIS_VV2_A (a,a1)
         LR2L2_aa (a,a1) = DIS_VV3_A (a,a1)
      ENDDO a
      ENDDO a1

      DO b1
      DO b
         GET  DIS_VV1_B (b,b1)
         GET  DIS_VV2_B (b,b1)
         GET  DIS_VV3_B (b,b1)
         LR1W_bb  (b,b1) = DIS_VV1_B (b,b1)
         LR2W2_bb (b,b1) = DIS_VV2_B (b,b1)
         LR2L2_bb (b,b1) = DIS_VV3_B (b,b1)
      ENDDO b
      ENDDO b1

      EXECUTE  SIP_BARRIER
      DELETE  DIS_VO1_A
      DELETE  DIS_VO1_B
      DELETE  DIS_VO2_A
      DELETE  DIS_VO2_B
      DELETE  DIS_VO3_A
      DELETE  DIS_VO3_B
      DELETE  DIS_VO4_A
      DELETE  DIS_VO4_B
      DELETE  DIS_OO1_A
      DELETE  DIS_OO1_B
      DELETE  DIS_OO2_A
      DELETE  DIS_OO2_B
      DELETE  DIS_OO3_A
      DELETE  DIS_OO3_B
      DELETE  DIS_VV1_A
      DELETE  DIS_VV1_B
      DELETE  DIS_VV2_A
      DELETE  DIS_VV2_B
      DELETE  DIS_VV3_A
      DELETE  DIS_VV3_B
#
#
#     ...ready!
#
#
      ENDPROC  XI_INTERMEDIATES
#------------------------------------------------------------------------



#------------------------------------------------------------------------
#
#     --------------
      PROC  HEAVY_XI
#     --------------
#
#
#       ij               im  ef  jn
#      X   = P(ij)P(ab) l   r   g         1 in R2 L2 G
#       ab               ae  mn  bf
#
#
      PARDO  a, a2, i2, a1
         ALLOCATE  LLaiai (a2,i2,a1,*)
         DO i1
            REQUEST               VSpipi (a2,i2,a1,i1) i1
            LLaiai (a2,i2,a1,i1) = VSpipi (a2,i2,a1,i1)
         ENDDO i1
         DO i
            REQUEST             L2R2_aaaa (i2,a,i,a2) i
            tpppp (a,i,a2,i2) = L2R2_aaaa (i2,a,i,a2)
            DO i1
               taiai (a,i,a1,i1) = tpppp (a,i,a2,i2) * LLaiai (a2,i2,a1,i1)
               PUT  D2aa (a,i,a1,i1) += taiai (a,i,a1,i1)
            ENDDO i1
         ENDDO i
         DEALLOCATE  LLaiai (a2,i2,a1,*)
      ENDPARDO  a, a2, i2, a1

      PARDO  b, b2, j2, b1
         ALLOCATE  LLbjbj (b2,j2,b1,*)
         DO j1
            REQUEST               VSqjqj (b2,j2,b1,j1) j1
            LLbjbj (b2,j2,b1,j1) = VSqjqj (b2,j2,b1,j1)
         ENDDO j1
         DO j 
            REQUEST             L2R2_bbbb (j2,b,j,b2) j
            tqqqq (b,j,b2,j2) = L2R2_bbbb (j2,b,j,b2)
            DO j1
               tbjbj (b,j,b1,j1) = tqqqq (b,j,b2,j2) * LLbjbj (b2,j2,b1,j1)
               PUT  D2bb (b,j,b1,j1) += tbjbj (b,j,b1,j1)
            ENDDO j1
         ENDDO j
         DEALLOCATE  LLbjbj (b2,j2,b1,*)
      ENDPARDO  b, b2, j2, b1

      PARDO  a, b2, j2, a1
         ALLOCATE  LLbjai (b2,j2,a1,*)
         DO i1
            REQUEST               Vpiqj (a1,i1,b2,j2) i1
            LLbjai (b2,j2,a1,i1) = Vpiqj (a1,i1,b2,j2)
         ENDDO i1
         DO i
            REQUEST             L2R2_baab (j2,a,i,b2) i
            tppqq (a,i,b2,j2) = L2R2_baab (j2,a,i,b2)
            DO i1
               taiai (a,i,a1,i1) = tppqq (a,i,b2,j2) * LLbjai (b2,j2,a1,i1)
               PUT D2aa (a,i,a1,i1) += taiai (a,i,a1,i1)
            ENDDO i1
         ENDDO i
         DEALLOCATE  LLbjai (b2,j2,a1,*)
      ENDPARDO  a, b2, j2, a1

      PARDO  b, a2, i2, b1
         ALLOCATE  Laibj (a2,i2,b1,*)
         DO j1
            REQUEST               Vpiqj (a2,i2,b1,j1) j1
            Laibj (a2,i2,b1,j1) = Vpiqj (a2,i2,b1,j1)
         ENDDO j1
         DO j
            REQUEST             L2R2_abba (i2,b,j,a2) j
            tqqpp (b,j,a2,i2) = L2R2_abba (i2,b,j,a2)
            DO j1
               tbjbj (b,j,b1,j1) = tqqpp (b,j,a2,i2) * Laibj (a2,i2,b1,j1)
               PUT D2bb (b,j,b1,j1) += tbjbj (b,j,b1,j1)
            ENDDO j1
         ENDDO j
         DEALLOCATE  Laibj (a2,i2,b1,*)
      ENDPARDO  b, a2, i2, b1

      PARDO  b, a1, i1, a
         ALLOCATE  LLaiai  (a,*,a1,i1)
         ALLOCATE  L1aiai (a,*,a1,i1)
         DO i
            REQUEST              VSpipi    (a,i,a1,i1) i
            REQUEST              L2R2_aaaa (i1,a,i,a1) i
            LLaiai  (a,i,a1,i1) = VSpipi    (a,i,a1,i1)
            L1aiai (a,i,a1,i1) = L2R2_aaaa (i1,a,i,a1) 
         ENDDO i
         DO j
            REQUEST  L2R2_abba (i1,b,j,a1) j
            REQUEST  Vpiqj     (a1,i1,b,j) j
            t1ppqq (a1,i1,b,j) = L2R2_abba (i1,b,j,a1)
            DO i
               taibj (a,i,b,j)  = LLaiai  (a,i,a1,i1) * t1ppqq (a1,i1,b,j)
               tppqq (a,i,b,j)  = L1aiai (a,i,a1,i1) * Vpiqj  (a1,i1,b,j)
               taibj (a,i,b,j) += tppqq (a,i,b,j)
               PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
            ENDDO i
         ENDDO j
         DEALLOCATE  LLaiai  (a,*,a1,i1)
         DEALLOCATE  L1aiai (a,*,a1,i1)
      ENDPARDO  b, a1, i1, a

      PARDO  b, a, b1, j1
         ALLOCATE  Laibj  (a,*,b1,j1)
         ALLOCATE  L1aibj (a,*,b1,j1)
         DO i
            REQUEST              Vpiqj     (a,i,b1,j1) i
            REQUEST              L2R2_baab (j1,a,i,b1) i
            Laibj  (a,i,b1,j1) = Vpiqj     (a,i,b1,j1)
            L1aibj (a,i,b1,j1) = L2R2_baab (j1,a,i,b1)
         ENDDO i
         DO j
            REQUEST  L2R2_bbbb (j1,b,j,b1) j
            REQUEST  VSqjqj    (b1,j1,b,j) j
            tqqqq (b1,j1,b,j) = L2R2_bbbb (j1,b,j,b1)
            DO i 
               taibj (a,i,b,j)  = Laibj  (a,i,b1,j1) * tqqqq  (b1,j1,b,j)
               tppqq (a,i,b,j)  = L1aibj (a,i,b1,j1) * VSqjqj (b1,j1,b,j)
               taibj (a,i,b,j) += tppqq (a,i,b,j) 
               PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
            ENDDO i
         ENDDO j
         DEALLOCATE  Laibj  (a,*,b1,j1)
         DEALLOCATE  L1aibj (a,*,b1,j1)
      ENDPARDO  b, a, b1, j1

      PARDO  b, a1, j1, a
         ALLOCATE  Laajj (a,a1,j1,*)
         DO j
            REQUEST             L2R2_baba (j1,a1,j,a) j
            Laajj (a,a1,j1,j) = L2R2_baba (j1,a1,j,a)
         ENDDO j
         DO i
            REQUEST             Vpiqj (a1,i,b,j1) i
            tiajb (i,a1,j1,b) = Vpiqj (a1,i,b,j1)
            DO j
               tppqq (i,a,j,b)  = tiajb (i,a1,j1,b) * Laajj (a,a1,j1,j)
               taibj (a,i,b,j)  = tppqq (i,a,j,b) 
               PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
            ENDDO j
         ENDDO i
         DEALLOCATE  Laajj (a,a1,j1,*)
      ENDPARDO  b, a1, j1, a
      
      PARDO  a, b1, i1, b
         ALLOCATE  Liibb (*,i1,b1,b)
         DO i
            REQUEST             L2R2_abab (i1,b1,i,b) i
            Liibb (i,i1,b1,b) = L2R2_abab (i1,b1,i,b)
         ENDDO i
         DO j
            REQUEST  Vpiqj (a,i1,b1,j) j
            DO i
               taibj (a,i,b,j) = Vpiqj (a,i1,b1,j) * Liibb (i,i1,b1,b)
               PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
            ENDDO i
         ENDDO j
         DEALLOCATE  Liibb (*,i1,b1,b)
      ENDPARDO  a, b1, i1, b
#
#
#       ij          im  e  fj
#      X   = P(ij) l   r  G       1 in R1 L2 G
#       ab          fe  m  ab
#     
#        
      PARDO  a2, a, i1, a1
         REQUEST              HBAR_AIBC_aaaa (a2,a,i1,a1) a2
         tpppp (a,a2,a1,i1) = HBAR_AIBC_aaaa (a2,a,i1,a1)
         DO i
            taiai  (a,i,a1,i1)  = LR1L2_ai (a2,i) * tpppp (a,a2,a1,i1)
            t1aiai (a,i1,a1,i)  = taiai (a,i,a1,i1)
            t1aiai (a,i1,a1,i) *= -1.0
            PREPARE  XI2_AA (a,i,a1,i1) += taiai  (a,i,a1,i1)
            PREPARE  XI2_AA (a,i1,a1,i) += t1aiai (a,i1,a1,i)
         ENDDO i
      ENDPARDO  a2, a, i1, a1

      PARDO  b2, b, j1, b1
         REQUEST              HBAR_AIBC_bbbb (b2,b,j1,b1) b2
         tqqqq (b,b2,b1,j1) = HBAR_AIBC_bbbb (b2,b,j1,b1)
         DO j
            tbjbj  (b,j,b1,j1)  = LR1L2_bj (b2,j) * tqqqq (b,b2,b1,j1)
            t1bjbj (b,j1,b1,j)  = tbjbj (b,j,b1,j1)
            t1bjbj (b,j1,b1,j) *= -1.0
            PREPARE  XI2_BB (b,j,b1,j1) += tbjbj  (b,j,b1,j1)
            PREPARE  XI2_BB (b,j1,b1,j) += t1bjbj (b,j1,b1,j)
         ENDDO j
      ENDPARDO  b2, b, j1, b1

      PARDO  a2, a, j, b     
         REQUEST            HBAR_AIBC_aabb (a2,a,j,b) a2
         tppqq (a,a2,b,j) = HBAR_AIBC_aabb (a2,a,j,b)
         DO i
            tia (i,a2) = LR1L2_ai (a2,i) 
            taibj (a,i,b,j)  = tia (i,a2) * tppqq (a,a2,b,j)
            PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
         ENDDO i
      ENDPARDO  a2, a, j, b
      
      PARDO  b2, a, i, b
         REQUEST            HBAR_AIBC_bbaa (b2,b,i,a) b2
         tppqq (a,i,b,b2) = HBAR_AIBC_bbaa (b2,b,i,a)
         DO j
            taibj (a,i,b,j) = tppqq (a,i,b,b2) * LR1L2_bj (b2,j)
            PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
         ENDDO j
      ENDPARDO  b2, a, i, b
#
#
#       i    im  ef  gn
#      X  = l   r   G     Using R2L2 ring intermediate
#       a    ge  mn  af
#
#
      PARDO  a2, a, i1, a1
         REQUEST              HBAR_AIBC_aaaa (a2,a,i1,a1) a2
         tpppp (a,a1,i1,a2) = HBAR_AIBC_aaaa (a2,a,i1,a1)
         DO i
            REQUEST  L2R2_aaaa (i1,a2,i,a1) i
            tai (a,i) = tpppp (a,a1,i1,a2) * L2R2_aaaa (i1,a2,i,a1)
            PUT  XI1_A (a,i) += tai (a,i)
         ENDDO i
      ENDPARDO  a2, a, i1, a1

      PARDO  b2, b, j1, b1
         REQUEST              HBAR_AIBC_bbbb (b2,b,j1,b1) b2
         tqqqq (b,b1,j1,b2) = HBAR_AIBC_bbbb (b2,b,j1,b1)
         DO j
            REQUEST  L2R2_bbbb (j1,b2,j,b1) j
            tbj (b,j) = tqqqq (b,b1,j1,b2) * L2R2_bbbb (j1,b2,j,b1)
            PUT  XI1_B (b,j) += tbj (b,j)
         ENDDO j
      ENDPARDO  b2, b, j1, b1

      PARDO  a2, a, j1, b1
         REQUEST              HBAR_AIBC_aabb (a2,a,j1,b1) a2
         tpqqp (a,b1,j1,a2) = HBAR_AIBC_aabb (a2,a,j1,b1)
         DO i
            REQUEST  L2R2_baab (j1,a2,i,b1) i
            tai (a,i) = tpqqp (a,b1,j1,a2) * L2R2_baab (j1,a2,i,b1)
            PUT  XI1_A (a,i) += tai (a,i)
         ENDDO i
      ENDPARDO  a2, a, j1, b1

      PARDO  b2, b, i1, a1
         REQUEST              HBAR_AIBC_bbaa (b2,b,i1,a1) b2
         tqppq (b,a1,i1,b2) = HBAR_AIBC_bbaa (b2,b,i1,a1)
         DO j
            REQUEST  L2R2_abba (i1,b2,j,a1) j
            tbj (b,j) = tqppq (b,a1,i1,b2) * L2R2_abba (i1,b2,j,a1)
            PUT  XI1_B (b,j) += tbj (b,j)
         ENDDO j
      ENDPARDO  b2, b, i1, a1

      PARDO  b2, b1, i1, a
         REQUEST              HBAR_AIBC_bbaa (b2,b1,i1,a) b2
         tppqq (a,i1,b1,b2) = HBAR_AIBC_bbaa (b2,b1,i1,a)
         DO i
            REQUEST              L2R2_abab (i1,b1,i,b2) i
            tpqqp (i1,b1,b2,i) = L2R2_abab (i1,b1,i,b2)
            tai (a,i)  = tppqq (a,i1,b1,b2) * tpqqp (i1,b1,b2,i)
            tai (a,i) *= -1.0
            PUT  XI1_A (a,i) += tai (a,i)
         ENDDO i
      ENDPARDO  b2, b1, i1, a

      PARDO  a2, a1, j1, b
         REQUEST              HBAR_AIBC_aabb (a2,a1,j1,b) a2
         tqqpp (b,j1,a1,a2) = HBAR_AIBC_aabb (a2,a1,j1,b)
         DO j
            REQUEST              L2R2_baba (j1,a1,j,a2) j
            tqppq (j1,a1,a2,j) = L2R2_baba (j1,a1,j,a2)
            tbj (b,j)  = tqqpp (b,j1,a1,a2) * tqppq (j1,a1,a2,j)
            tbj (b,j) *= -1.0
            PUT  XI1_B (b,j) += tbj (b,j)
         ENDDO j
      ENDPARDO  a2, a1, j1, b
#
#
#       i        mn  eg  fi
#      X  = 1/2 l   r   G
#       a        ef  mn  ga
#
#
      PARDO  a1, a2, i, a
         REQUEST             HBAR_AIBC_aaaa (a1,a2,i,a) a1
         tpppp (a,i,a1,a2) = HBAR_AIBC_aaaa (a1,a2,i,a)
         tai (a,i) = tpppp (a,i,a1,a2) * LR2L2_aa (a1,a2)
         tai (a,i) *= -1.0
         PUT  XI1_A (a,i) += tai (a,i)
      ENDPARDO  a1, a2, i, a

      PARDO  b1, b2, i, a
         REQUEST             HBAR_AIBC_bbaa (b1,b2,i,a) b1
         tppqq (a,i,b1,b2) = HBAR_AIBC_bbaa (b1,b2,i,a)
         tai (a,i) = tppqq (a,i,b1,b2) * LR2L2_bb (b1,b2)
         tai (a,i) *= -1.0
         PUT  XI1_A (a,i) += tai (a,i)
      ENDPARDO  b1, b2, i, a

      PARDO  b1, b2, j, b    
         REQUEST             HBAR_AIBC_bbbb (b1,b2,j,b) b1
         tqqqq (b,j,b1,b2) = HBAR_AIBC_bbbb (b1,b2,j,b)
         tbj (b,j) = tqqqq (b,j,b1,b2) * LR2L2_bb (b1,b2)
         tbj (b,j) *= -1.0
         PUT  XI1_B (b,j) += tbj (b,j)
      ENDPARDO  b1, b2, j, b
      
      PARDO  a1, a2, j, b    
         REQUEST             HBAR_AIBC_aabb (a1,a2,j,b) a1
         tqqpp (b,j,a1,a2) = HBAR_AIBC_aabb (a1,a2,j,b)
         tbj (b,j) = tqqpp (b,j,a1,a2) * LR2L2_aa (a1,a2)
         tbj (b,j) *= -1.0
         PUT  XI1_B (b,j) += tbj (b,j)
      ENDPARDO  a1, a2, j, b
#
#
#       ij               im    f  ej    e  nj
#      X   = P(ij)P(ab) l   ( r  G   + r  G   )      7 and 8 in R1 L2 G
#       ab               ae    m  fb    n  mb
#
#      Hideous ring contractions...
#
#
      PARDO i2, i1, a1, a2
         t1aiai (a2,i2,a1,i1) = 0.0
         DO a3
            REQUEST                HBAR_AIBC_aaaa (a2,a3,i1,a1) a3
            GET                    R1A (a3,i2)
            tpppp (a2,a3,a1,i1)  = HBAR_AIBC_aaaa (a2,a3,i1,a1) 
            taiai (a2,i2,a1,i1)  = tpppp (a2,a3,a1,i1) * R1A (a3,i2)
            t1aiai (a2,i2,a1,i1) += taiai (a2,i2,a1,i1)
         ENDDO a3

         DO i3
            REQUEST                HBAR_JKIA_aaaa (i3,i2,i1,a1) i3
            GET                    R1A (a2,i3)
            tai (a2,i3)          = R1A (a2,i3)
            tpppp (i3,i2,a1,i1)  = HBAR_JKIA_aaaa (i3,i2,i1,a1)
            taiai (a2,i2,a1,i1)  = R1A (a2,i3) * tpppp (i3,i2,a1,i1)
            t1aiai (a2,i2,a1,i1) -= taiai (a2,i2,a1,i1)
         ENDDO i3

         DO i
         DO a
            REQUEST               L2AA (i,a,i2,a2) a
            t2pppp (a,i,a2,i2)  = L2AA (i,a,i2,a2) 
            t1pppp (a,i,a1,i1)  = t2pppp (a,i,a2,i2) * t1aiai (a2,i2,a1,i1)

            PUT  D2aa (a,i,a1,i1) += t1pppp (a,i,a1,i1)
         ENDDO a
         ENDDO i
      ENDPARDO  i2, i1, a1, a2

      PARDO j2, j1, b1, b2
         t1bjbj (b2,j2,b1,j1) = 0.0
         DO b3
            REQUEST                HBAR_AIBC_bbbb (b2,b3,j1,b1) b3
            GET                    R1B (b3,j2)
            tqqqq (b2,b3,b1,j1)  = HBAR_AIBC_bbbb (b2,b3,j1,b1)
            tbjbj (b2,j2,b1,j1)  = tqqqq (b2,b3,b1,j1) * R1B (b3,j2)
            t1bjbj (b2,j2,b1,j1) += tbjbj (b2,j2,b1,j1)
         ENDDO b3
         
         DO j3
            REQUEST                HBAR_JKIA_bbbb (j3,j2,j1,b1) j3
            GET                    R1B (b2,j3)
            tbj (b2,j3)          = R1B (b2,j3)
            tqqqq (j3,j2,b1,j1)  = HBAR_JKIA_bbbb (j3,j2,j1,b1)
            tbjbj (b2,j2,b1,j1)  = R1B (b2,j3) * tqqqq (j3,j2,b1,j1)
            t1bjbj (b2,j2,b1,j1) -= tbjbj (b2,j2,b1,j1)
         ENDDO j3
         
         DO j
         DO b
            REQUEST               L2BB (j,b,j2,b2) b
            t2qqqq (b,j,b2,j2)  = L2BB (j,b,j2,b2) 
            t1qqqq (b,j,b1,j1)  = t2qqqq (b,j,b2,j2) * t1bjbj (b2,j2,b1,j1)
            
            PUT  D2bb (b,j,b1,j1) += t1qqqq (b,j,b1,j1)
         ENDDO b 
         ENDDO j
      ENDPARDO  j2, j1, b1, b2

      PARDO j2, i1, a1, b2
         t1bjai (b2,j2,a1,i1) = 0.0
         DO b3
            REQUEST                HBAR_AIBC_bbaa (b2,b3,i1,a1) b3
            GET                    R1B (b3,j2)
            tqqpp (b2,b3,a1,i1)  = HBAR_AIBC_bbaa (b2,b3,i1,a1)
            tbjai (b2,j2,a1,i1)  = tqqpp (b2,b3,a1,i1) * R1B (b3,j2)
            t1bjai (b2,j2,a1,i1) += tbjai (b2,j2,a1,i1)
         ENDDO b3

         DO j3
            REQUEST                HBAR_JKIA_bbaa (j3,j2,i1,a1) j3
            GET                    R1B (b2,j3)
            tbj (b2,j3)          = R1B (b2,j3)
            tqqpp (j3,j2,a1,i1)  = HBAR_JKIA_bbaa (j3,j2,i1,a1)
            tbjai (b2,j2,a1,i1)  = tbj (b2,j3) * tqqpp (j3,j2,a1,i1)
            t1bjai (b2,j2,a1,i1) -= tbjai (b2,j2,a1,i1)
         ENDDO j3

         DO i
         DO a
            REQUEST               L2AB (i,a,j2,b2) a
            tppqq  (a,i,b2,j2)  = L2AB (i,a,j2,b2)
            taiai  (a,i,a1,i1)  = tppqq (a,i,b2,j2) * t1bjai (b2,j2,a1,i1)

            PUT  D2aa (a,i,a1,i1) += taiai (a,i,a1,i1)
         ENDDO a
         ENDDO i
      ENDPARDO  j2, i1, a1, b2

      PARDO i2, j1, b1, a2
         t1aibj (a2,i2,b1,j1) = 0.0
         DO a3
            REQUEST                HBAR_AIBC_aabb (a2,a3,j1,b1) a3
            GET                    R1A (a3,i2)
            tppqq (a2,a3,b1,j1)  = HBAR_AIBC_aabb (a2,a3,j1,b1)
            taibj (a2,i2,b1,j1)  = tppqq (a2,a3,b1,j1) * R1A (a3,i2)
            t1aibj (a2,i2,b1,j1) += taibj (a2,i2,b1,j1)
         ENDDO a3

         DO i3
            REQUEST                HBAR_JKIA_aabb (i3,i2,j1,b1) i3
            GET                    R1A (a2,i3)
            tai (a2,i3)          = R1A (a2,i3)
            tppqq (i3,i2,b1,j1)  = HBAR_JKIA_aabb (i3,i2,j1,b1)
            taibj (a2,i2,b1,j1)  = R1A (a2,i3) * tppqq (i3,i2,b1,j1)
            t1aibj (a2,i2,b1,j1) -= taibj (a2,i2,b1,j1)
         ENDDO i3

         DO j
         DO b
            REQUEST               L2AB (i2,a2,j,b) b
            tqqpp  (b,j,a2,i2)  = L2AB (i2,a2,j,b)
            tbjbj  (b,j,b1,j1)  = tqqpp (b,j,a2,i2) * t1aibj (a2,i2,b1,j1)

            PUT  D2bb (b,j,b1,j1) += tbjbj (b,j,b1,j1)
         ENDDO b
         ENDDO j
      ENDPARDO  i2, j1, b1, a2

      PARDO  i1, b, j, a1
         tppqq (a1,i1,b,j) = 0.0
         DO a2
            REQUEST               HBAR_AIBC_aabb (a1,a2,j,b) a2
            GET                   R1A (a2,i1)
            t1ppqq (a1,a2,b,j)  = HBAR_AIBC_aabb (a1,a2,j,b)
            t1aibj (a1,i1,b,j)  = R1A (a2,i1) * t1ppqq (a1,a2,b,j)
            tppqq  (a1,i1,b,j) += t1aibj (a1,i1,b,j)
         ENDDO a2
         DO i2
            REQUEST               HBAR_JKIA_aabb (i2,i1,j,b) i2
            GET                   R1A (a1,i2)
            t1ppqq (i2,i1,b,j)  = HBAR_JKIA_aabb (i2,i1,j,b)
            t1aibj (a1,i1,b,j)  = R1A (a1,i2) * t1ppqq (i2,i1,b,j)
            tppqq  (a1,i1,b,j) -= t1aibj (a1,i1,b,j)
         ENDDO i2

         DO a
         DO i
            REQUEST              L2AA (i,a,i1,a1) i
            taiai (a,i,a1,i1)  = L2AA (i,a,i1,a1)
            taibj (a,i,b,j)    = taiai (a,i,a1,i1) * tppqq (a1,i1,b,j)
            PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
         ENDDO i
         ENDDO a
      ENDPARDO  i1, b, j, a1

      PARDO  j1, b, j, b1
         tbjbj (b1,j1,b,j) = 0.0
         DO b2
            REQUEST               HBAR_AIBC_bbbb (b1,b2,j,b) b2
            GET                   R1B (b2,j1)
            t1qqqq (b1,b2,b,j)  = HBAR_AIBC_bbbb (b1,b2,j,b)
            tqqqq  (b1,j1,b,j)  = R1B (b2,j1) * t1qqqq (b1,b2,b,j)
            tbjbj  (b1,j1,b,j) += tqqqq (b1,j1,b,j)
         ENDDO b2
         DO j2
            REQUEST               HBAR_JKIA_bbbb (j2,j1,j,b) j2
            GET                   R1B (b1,j2)
            t1qqqq (j2,j1,b,j)  = HBAR_JKIA_bbbb (j2,j1,j,b)
            tqqqq  (b1,j1,b,j)  = R1B (b1,j2) * t1qqqq (j2,j1,b,j)
            tbjbj  (b1,j1,b,j) -= tqqqq (b1,j1,b,j)
         ENDDO j2
         DO a
         DO i
            REQUEST               L2AB (i,a,j1,b1) i
            t1aibj (a,i,b1,j1)  = L2AB (i,a,j1,b1)
            taibj  (a,i,b,j)    = t1aibj (a,i,b1,j1) * tbjbj (b1,j1,b,j)
            PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
         ENDDO i
         ENDDO a
      ENDPARDO  j1, b, j, b1

      PARDO  i1, a, i, a1
         taiai (a,i,a1,i1) = 0.0
         DO a2
            REQUEST               HBAR_AIBC_aaaa (a1,a2,i,a) a2
            GET                   R1A (a2,i1)
            tpppp  (a,i,a1,a2)  = HBAR_AIBC_aaaa (a1,a2,i,a)
            t1aiai (a,i,a1,i1)  = tpppp (a,i,a1,a2) * R1A (a2,i1)
            taiai  (a,i,a1,i1) += t1aiai (a,i,a1,i1)
         ENDDO a2
         DO i2
            REQUEST               HBAR_JKIA_aaaa (i2,i1,i,a) i2
            GET                   R1A (a1,i2)
            tpppp  (a,i,i2,i1)  = HBAR_JKIA_aaaa (i2,i1,i,a)
            t1aiai (a,i,a1,i1)  = tpppp (a,i,i2,i1) * R1A (a1,i2)
            taiai  (a,i,a1,i1) -= t1aiai (a,i,a1,i1)
         ENDDO i2
         DO b
         DO j
            REQUEST              L2AB (i1,a1,j,b) j
            tppqq (a1,i1,b,j)  = L2AB (i1,a1,j,b)
            taibj (a,i,b,j)    = taiai (a,i,a1,i1) * tppqq (a1,i1,b,j)
            PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
         ENDDO j
         ENDDO b
      ENDPARDO  i1, a, i, a1

      PARDO  j1, a, i, b1
         t1aibj (a,i,b1,j1) = 0.0
         DO b2
            REQUEST               HBAR_AIBC_bbaa (b1,b2,i,a) b2
            GET                   R1B (b2,j1)
            tppqq  (a,i,b1,b2)  = HBAR_AIBC_bbaa (b1,b2,i,a)
            t1ppqq (a,i,b1,j1)  = tppqq (a,i,b1,b2) * R1B (b2,j1)
            t1aibj (a,i,b1,j1) += t1ppqq (a,i,b1,j1)
         ENDDO b2
         DO j2
            REQUEST               HBAR_JKIA_bbaa (j2,j1,i,a) j2
            GET                   R1B (b1,j2)
            tppqq  (a,i,j2,j1)  = HBAR_JKIA_bbaa (j2,j1,i,a)
            t1ppqq (a,i,b1,j1)  = tppqq (a,i,j2,j1) * R1B (b1,j2)
            t1aibj (a,i,b1,j1) -= t1ppqq (a,i,b1,j1)
         ENDDO j2
         DO b
         DO j
            REQUEST              L2BB (j1,b1,j,b) j
            tbjbj (b1,j1,b,j)  = L2BB (j1,b1,j,b)
            taibj (a,i,b,j)    = t1aibj (a,i,b1,j1) * tbjbj (b1,j1,b,j)
            PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
         ENDDO j
         ENDDO b
      ENDPARDO  j1, a, i, b1

      PARDO  i1, i, b, b1
         tiibb (i,i1,b1,b) = 0.0
         DO a2
            REQUEST               HBAR_AIBC_bbaa (b1,b,i,a2) a2
            GET                   R1A (a2,i1)
            tppqq  (i,a2,b1,b)  = HBAR_AIBC_bbaa (b1,b,i,a2)
            t1ppqq (i,i1,b1,b)  = R1A (a2,i1) * tppqq (i,a2,b1,b)
            tiibb  (i,i1,b1,b) -= t1ppqq (i,i1,b1,b)
         ENDDO a2
         DO j2
            REQUEST               HBAR_JKIA_aabb (i,i1,j2,b) j2
            GET                   R1B (b1,j2)
            tppqq  (i,i1,j2,b)  = HBAR_JKIA_aabb (i,i1,j2,b)
            t1ppqq (i,i1,b1,b)  = tppqq (i,i1,j2,b) * R1B (b1,j2)
            tiibb  (i,i1,b1,b) += t1ppqq (i,i1,b1,b)
         ENDDO j2
         DO a
         DO j
            REQUEST               L2AB (i1,a,j,b1) j
            t1aibj (a,i1,b1,j)  = L2AB (i1,a,j,b1)
            taibj  (a,i,b,j)    = t1aibj (a,i1,b1,j) * tiibb (i,i1,b1,b)
            PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
         ENDDO j
         ENDDO a
      ENDPARDO  i1, i, b, b1

      PARDO  j1, j, a, a1
         taajj (a,a1,j1,j) = 0.0
         DO b2
            REQUEST               HBAR_AIBC_aabb (a1,a,j,b2) b2
            GET                   R1B (b2,j1)
            t1ppqq (a,a1,b2,j)  = HBAR_AIBC_aabb (a1,a,j,b2)
            tppqq  (a,a1,j1,j)  = t1ppqq (a,a1,b2,j) * R1B (b2,j1)
            taajj  (a,a1,j1,j) -= tppqq (a,a1,j1,j)
         ENDDO b2
         DO i2
            REQUEST               HBAR_JKIA_bbaa (j,j1,i2,a) i2
            GET                   R1A (a1,i2)
            t1ppqq (a,i2,j1,j)  = HBAR_JKIA_bbaa (j,j1,i2,a)
            tppqq  (a,a1,j1,j)  = R1A (a1,i2) * t1ppqq (a,i2,j1,j)
            taajj  (a,a1,j1,j) += tppqq (a,a1,j1,j)
         ENDDO i2
         DO b
         DO i
            REQUEST             L2AB (i,a1,j1,b) i
            tiajb  (i,a,j,b)  = L2AB (i,a1,j1,b) * taajj (a,a1,j1,j)
            taibj  (a,i,b,j)  = tiajb (i,a,j,b)
            PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
         ENDDO i
         ENDDO b
      ENDPARDO  j1, j, a, a1
#
#
#                        -                            -
#       ij              |   mn  ef  in    in  ef  mj   |
#      X   = -1/2 P(ij) |  l   r   G   + l   r   G     |   5 and 7 in R2 L2 G
#       ab              |   ab  mn  ef    ef  mn  ab   |
#                        -                            -
#
#
      PARDO  a, i1, a1, i2
         REQUEST  L2AA   (i2,a,i1,a1) i2
         REQUEST  VSpipi (a,i2,a1,i1) a
         t1aiai (a,i2,a1,i1) = L2AA (i2,a,i1,a1)
         DO i
            tpppp  (a,i,a1,i1)  = t1aiai (a,i2,a1,i1) * LR2W2_ii (i2,i)
            t1pppp (a,i,a1,i1)  = VSpipi (a,i2,a1,i1) * LR2L2_ii (i2,i)
            tpppp  (a,i,a1,i1) += t1pppp (a,i,a1,i1)

            taiai (a,i1,a1,i)  = tpppp (a,i,a1,i1)
            tpppp (a,i,a1,i1) *= -1.0

            PREPARE  XI2_AA (a,i,a1,i1) += tpppp (a,i,a1,i1)
            PREPARE  XI2_AA (a,i1,a1,i) += taiai (a,i1,a1,i)
         ENDDO i
      ENDPARDO  a, i1, a1, i2

      PARDO  b, j1, b1, j2
         REQUEST  L2BB   (j2,b,j1,b1) j2
         REQUEST  VSqjqj (b,j2,b1,j1) b
         t1bjbj (b,j2,b1,j1) = L2BB (j2,b,j1,b1)
         DO j
            tqqqq  (b,j,b1,j1)  = t1bjbj (b,j2,b1,j1) * LR2W2_jj (j2,j)
            t1qqqq (b,j,b1,j1)  = VSqjqj (b,j2,b1,j1) * LR2L2_jj (j2,j)
            tqqqq  (b,j,b1,j1) += t1qqqq (b,j,b1,j1)

            tbjbj (b,j1,b1,j)  = tqqqq (b,j,b1,j1)
            tqqqq (b,j,b1,j1) *= -1.0

            PREPARE  XI2_BB (b,j,b1,j1) += tqqqq (b,j,b1,j1)
            PREPARE  XI2_BB (b,j1,b1,j) += tbjbj (b,j1,b1,j)
         ENDDO j
      ENDPARDO  b, j1, b1, j2

      PARDO  i2, a, j, b
         REQUEST  L2AB  (i2,a,j,b) i2
         REQUEST  Vpiqj (a,i2,b,j) i2
         DO i
            tii (i,i2) = LR2W2_ii (i2,i)
            tiajb  (i,a,j,b)  = tii (i,i2) * L2AB (i2,a,j,b)
            t1aibj (a,i,b,j)  = LR2L2_ii (i2,i) * Vpiqj (a,i2,b,j)
            taibj  (a,i,b,j)  = tiajb (i,a,j,b)
            taibj  (a,i,b,j) += t1aibj (a,i,b,j)
            taibj  (a,i,b,j) *= -1.0
            PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
         ENDDO i
      ENDPARDO  i2, a, j, b

      PARDO  i, a, j2, b
         REQUEST             Vpiqj (a,i,b,j2) j2
         REQUEST             L2AB  (i,a,j2,b) j2
         tppqq (a,i,b,j2)  = L2AB  (i,a,j2,b)
         DO j
            taibj  (a,i,b,j)  = tppqq (a,i,b,j2) * LR2W2_jj (j2,j)
            t1aibj (a,i,b,j)  = Vpiqj (a,i,b,j2) * LR2L2_jj (j2,j)
            taibj  (a,i,b,j) += t1aibj (a,i,b,j)
            taibj  (a,i,b,j) *= -1.0
            PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
         ENDDO j
      ENDPARDO  i, a, j2, b
#
#
#                        -                            -
#       ij              |   ij  ef  mn    mn  ef  ij   |
#      X   = -1/2 P(ab) |  l   r   G   + l   r   G     |   4 and 6 in R2 L2 G
#       ab              |   fb  mn  ea    ea  mn  fb   |
#                        -                            -
#
#
      PARDO  i, i1, a1, a2
         REQUEST               L2AA   (i,a2,i1,a1) i
         REQUEST               VSpipi (a2,i,a1,i1) i
         t1aiai (a2,i,a1,i1) = L2AA (i,a2,i1,a1)
         DO a
            tpppp  (a,i,a1,i1)  = LR2W2_aa (a,a2) * t1aiai (a2,i,a1,i1)
            t1pppp (a,i,a1,i1)  = LR2L2_aa (a,a2) * VSpipi (a2,i,a1,i1)
            tpppp  (a,i,a1,i1) += t1pppp (a,i,a1,i1)

            taiai  (a1,i,a,i1)  = tpppp (a,i,a1,i1)
            taiai  (a1,i,a,i1) *= -1.0

            PREPARE  XI2_AA (a,i,a1,i1) += tpppp (a,i,a1,i1)
            PREPARE  XI2_AA (a1,i,a,i1) += taiai (a1,i,a,i1)
         ENDDO a
      ENDPARDO  i, i1, a1, a2

      PARDO  j, j1, b1, b2
         REQUEST               L2BB   (j,b2,j1,b1) j
         REQUEST               VSqjqj (b2,j,b1,j1) j
         t1bjbj (b2,j,b1,j1) = L2BB (j,b2,j1,b1)
         DO b
            tqqqq  (b,j,b1,j1)  = LR2W2_bb (b,b2) * t1bjbj (b2,j,b1,j1)
            t1qqqq (b,j,b1,j1)  = LR2L2_bb (b,b2) * VSqjqj (b2,j,b1,j1)
            tqqqq  (b,j,b1,j1) += t1qqqq (b,j,b1,j1)
         
            tbjbj  (b1,j,b,j1)  = tqqqq (b,j,b1,j1)
            tbjbj  (b1,j,b,j1) *= -1.0

            PREPARE  XI2_BB (b,j,b1,j1) += tqqqq (b,j,b1,j1)
            PREPARE  XI2_BB (b1,j,b,j1) += tbjbj (b1,j,b,j1)
         ENDDO b
      ENDPARDO  j, j1, b1, b2

      PARDO  i, a2, j, b
         REQUEST             L2AB  (i,a2,j,b) i
         REQUEST             Vpiqj (a2,i,b,j) i
         tppqq (a2,i,b,j)  = L2AB  (i,a2,j,b)
         DO a
            taibj  (a,i,b,j)  = LR2W2_aa (a,a2) * tppqq (a2,i,b,j)
            t1aibj (a,i,b,j)  = LR2L2_aa (a,a2) * Vpiqj (a2,i,b,j)
            taibj  (a,i,b,j) += t1aibj (a,i,b,j)
            PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
         ENDDO a
      ENDPARDO  i, a2, j, b

      PARDO  i, a, j, b2
         REQUEST  L2AB  (i,a,j,b2) b2
         REQUEST  Vpiqj (a,i,b2,j) b2
         DO b
            tbb (b2,b) = LR2W2_bb (b,b2)
            tiajb  (i,a,j,b)  = L2AB (i,a,j,b2) * tbb (b2,b)
            t1aibj (a,i,b,j)  = Vpiqj (a,i,b2,j) * LR2L2_bb (b,b2)
            taibj  (a,i,b,j)  = tiajb (i,a,j,b)
            taibj  (a,i,b,j) += t1aibj (a,i,b,j)
            PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
         ENDDO b
      ENDPARDO  i, a, j, b2
#           
#           
#       ij          ij  e  fm
#      X   = P(ab) l   r  g        5 in R1 L2 G
#       ab          af  m  be
#
#     
      PARDO  i, a, i1, a3
         REQUEST              L2AA (i,a,i1,a3) i
         taiai (a,i,a3,i1)  = L2AA (i,a,i1,a3)
         DO a1
            tpppp  (a,i,a1,i1)  = taiai (a,i,a3,i1) * LR1W_aa (a1,a3)
            t1pppp (a1,i,a,i1)  = tpppp (a,i,a1,i1)
            t1pppp (a1,i,a,i1) *= -1.0
            PREPARE  XI2_AA (a,i,a1,i1) += tpppp  (a,i,a1,i1)
            PREPARE  XI2_AA (a1,i,a,i1) += t1pppp (a1,i,a,i1)
         ENDDO a1
      ENDPARDO  i, a, i1, a3

      PARDO  j, b, j1, b3
         REQUEST              L2BB (j,b,j1,b3) j
         tbjbj (b,j,b3,j1)  = L2BB (j,b,j1,b3)
         DO b1
            tqqqq  (b,j,b1,j1)  = tbjbj (b,j,b3,j1) * LR1W_bb (b1,b3)
            t1qqqq (b1,j,b,j1)  = tqqqq (b,j,b1,j1)
            t1qqqq (b1,j,b,j1) *= -1.0
            PREPARE  XI2_BB (b,j,b1,j1) += tqqqq  (b,j,b1,j1)
            PREPARE  XI2_BB (b1,j,b,j1) += t1qqqq (b1,j,b,j1)
         ENDDO b1
      ENDPARDO  j, b, j1, b3

      PARDO  b2, i, a, j    
         REQUEST            L2AB (i,a,j,b2) b2
         tppqq (a,i,b2,j) = L2AB (i,a,j,b2)
         DO b
            tbb (b2,b) = LR1W_bb (b,b2)
            taibj (a,i,b,j)  = tppqq (a,i,b2,j) * tbb (b2,b)
            PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
         ENDDO b
      ENDPARDO  b2, i, a, j
      
      PARDO  a2, i, j, b    
         REQUEST            L2AB (i,a2,j,b) a2
         tppqq (a2,i,b,j) = L2AB (i,a2,j,b)
         DO a
            taibj (a,i,b,j)  = LR1W_aa (a,a2) * tppqq (a2,i,b,j)
            PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
         ENDDO a
      ENDPARDO  a2, i, j, b
#
#
#       ij           in  e   jm
#      X   = -P(ij) l   r   G        6 in R1 L2 G
#       ab           ab  m   ne            
#              
#              
      PARDO  i, a, i3, a1
         REQUEST  L2AA (i,a,i3,a1) i
         taiai (a,i,a1,i3)  = L2AA (i,a,i3,a1)
         taiai (a,i,a1,i3) *= -1.0
         DO i1
            tpppp  (a,i,a1,i1) = taiai (a,i,a1,i3) * LR1W_ii (i1,i3)
            t1pppp (a,i1,a1,i) = tpppp (a,i,a1,i1)
            t1pppp (a,i1,a1,i) *= -1.0
            PREPARE  XI2_AA (a,i,a1,i1) += tpppp  (a,i,a1,i1)
            PREPARE  XI2_AA (a,i1,a1,i) += t1pppp (a,i1,a1,i)
         ENDDO i1
      ENDPARDO  i, a, i3, a1

      PARDO  j, b, j3, b1
         REQUEST  L2BB (j,b,j3,b1) j
         tbjbj (b,j,b1,j3)  = L2BB (j,b,j3,b1)
         tbjbj (b,j,b1,j3) *= -1.0
         DO j1
            tqqqq  (b,j,b1,j1) = tbjbj (b,j,b1,j3) * LR1W_jj (j1,j3)
            t1qqqq (b,j1,b1,j) = tqqqq (b,j,b1,j1)
            t1qqqq (b,j1,b1,j) *= -1.0
            PREPARE  XI2_BB (b,j,b1,j1) += tqqqq  (b,j,b1,j1)
            PREPARE  XI2_BB (b,j1,b1,j) += t1qqqq (b,j1,b1,j)
         ENDDO j1             
      ENDPARDO  j, b, j3, b1

      PARDO  j2, b, i, a
         REQUEST             L2AB (i,a,j2,b) j2
         tppqq (a,i,b,j2)  = L2AB (i,a,j2,b)
         DO j  
            tjj (j2,j) = LR1W_jj (j,j2)
            taibj (a,i,b,j)  = tppqq (a,i,b,j2) * tjj (j2,j)
            taibj (a,i,b,j) *= -1.0
            PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
         ENDDO j
      ENDPARDO  j2, b, i, a
            
      PARDO  i2, a, j, b
         REQUEST             L2AB (i2,a,j,b) i2
         tppqq (a,i2,b,j)  = L2AB (i2,a,j,b)
         DO i  
            taibj (a,i,b,j)  = LR1W_ii (i,i2) * tppqq (a,i2,b,j)
            taibj (a,i,b,j) *= -1.0
            PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
         ENDDO i
      ENDPARDO  i2, a, j, b
#
#
#       i    mo  ef  ni
#      X  = l   r   G     Using R2L2 ring intermediate
#       a    ea  mn  fo
#
#
      PARDO  a2, i1, a, i2
         REQUEST              L2R2_aaaa (i1,a,i2,a2) i1
         taiai (a,i2,a2,i1) = L2R2_aaaa (i1,a,i2,a2)
         DO i
            REQUEST              HBAR_JKIA_aaaa (i,i2,i1,a2) i
            tpppp (i2,a2,i1,i) = HBAR_JKIA_aaaa (i,i2,i1,a2)
            tai (a,i)  = taiai (a,i2,a2,i1) * tpppp (i2,a2,i1,i)
            tai (a,i) *= -1.0
            PUT  XI1_A (a,i) += tai (a,i)
         ENDDO i
      ENDPARDO  a2, i1, a, i2

      PARDO  b2, j1, a, i2
         REQUEST              L2R2_baab (j1,a,i2,b2) b2
         taibj (a,i2,b2,j1) = L2R2_baab (j1,a,i2,b2)
         DO i
            REQUEST              HBAR_JKIA_aabb (i,i2,j1,b2) i
            tpqqp (i2,b2,j1,i) = HBAR_JKIA_aabb (i,i2,j1,b2)
            tai (a,i)  = taibj (a,i2,b2,j1) * tpqqp (i2,b2,j1,i)
            tai (a,i) *= -1.0
            PUT  XI1_A (a,i) += tai (a,i)
         ENDDO i
      ENDPARDO  b2, j1, a ,i2
      
      PARDO  a, a2, j2, j1    
         REQUEST              L2R2_baba (j1,a2,j2,a) a
         tppqq (a,a2,j1,j2) = L2R2_baba (j1,a2,j2,a)
         DO i
            REQUEST              HBAR_JKIA_bbaa (j1,j2,i,a2) i
            tpqqp (a2,j1,j2,i) = HBAR_JKIA_bbaa (j1,j2,i,a2)
            tai (a,i) = tppqq (a,a2,j1,j2) * tpqqp (a2,j1,j2,i)
            PUT  XI1_A (a,i) += tai (a,i)
         ENDDO i
      ENDPARDO  a, a2, j2, j1

      PARDO  b2, j1, b, j2
         REQUEST              L2R2_bbbb (j1,b,j2,b2) j1
         tbjbj (b,j2,b2,j1) = L2R2_bbbb (j1,b,j2,b2)
         DO j
            REQUEST              HBAR_JKIA_bbbb (j,j2,j1,b2) j
            tqqqq (j2,b2,j1,j) = HBAR_JKIA_bbbb (j,j2,j1,b2) 
            tbj (b,j)  = tbjbj (b,j2,b2,j1) * tqqqq (j2,b2,j1,j)
            tbj (b,j) *= -1.0
            PUT  XI1_B (b,j) += tbj (b,j)
         ENDDO j
      ENDPARDO  b2, j1, b, j2

      PARDO  a2, i1, b, j2
         REQUEST              L2R2_abba (i1,b,j2,a2) a2
         tbjai (b,j2,a2,i1) = L2R2_abba (i1,b,j2,a2)
         DO j
            REQUEST              HBAR_JKIA_bbaa (j,j2,i1,a2) j
            tqppq (j2,a2,i1,j) = HBAR_JKIA_bbaa (j,j2,i1,a2)
            tbj (b,j)  = tbjai (b,j2,a2,i1) * tqppq (j2,a2,i1,j)
            tbj (b,j) *= -1.0
            PUT  XI1_B (b,j) += tbj (b,j)
         ENDDO j
      ENDPARDO  a2, i1, b, j2

      PARDO  b, b2, i2, i1
         REQUEST              L2R2_abab (i1,b2,i2,b) b
         tqqpp (b,b2,i1,i2) = L2R2_abab (i1,b2,i2,b)
         DO j
            REQUEST              HBAR_JKIA_aabb (i1,i2,j,b2) j
            tqppq (b2,i1,i2,j) = HBAR_JKIA_aabb (i1,i2,j,b2)
            tbj (b,j) = tqqpp (b,b2,i1,i2) * tqppq (b2,i1,i2,j)
            PUT  XI1_B (b,j) += tbj (b,j)
         ENDDO j
      ENDPARDO  b, b2, i2, i1
#
#
#       i         mn  fg  ei
#      X  = -1/4 l   r   G
#       a         ea  mn  fg
#
#
      PARDO  i2, a1, i3, a
         REQUEST              L2AA (i2,a1,i3,a) i2
         taiai (a,i2,a1,i3) = L2AA (i2,a1,i3,a)
         DO i
            REQUEST  Niiai (i2,a1,i3,i) i
            tai (a,i)  = taiai (a,i2,a1,i3) * Niiai (i2,a1,i3,i)
            tai (a,i) *= 0.5
            PUT  XI1_A (a,i) += tai (a,i)
         ENDDO i
      ENDPARDO  i2, a1, i3, a

      PARDO  i3, j2, b1, a
         REQUEST              L2AB (i3,a,j2,b1) j2
         tpqqp (a,b1,j2,i3) = L2AB (i3,a,j2,b1)
         DO i
            REQUEST  Niibj (i,b1,i3,j2) i
            tqqpp (b1,j2,i3,i) = Niibj (i,b1,i3,j2)
            tai (a,i)  = tpqqp (a,b1,j2,i3) * tqqpp (b1,j2,i3,i)
            PUT  XI1_A (a,i) += tai (a,i)
         ENDDO i
      ENDPARDO  i3, j2, b1, a

      PARDO  j2, b1, j3, b 
         REQUEST              L2BB (j2,b1,j3,b) j2
         tbjbj (b,j2,b1,j3) = L2BB (j2,b1,j3,b)
         DO j
            REQUEST  Njjbj (j2,b1,j3,j) j
            tbj (b,j)  = tbjbj (b,j2,b1,j3) * Njjbj (j2,b1,j3,j)
            tbj (b,j) *= 0.5     
            PUT  XI1_B (b,j) += tbj (b,j)
         ENDDO j
      ENDPARDO  j2, b1, j3, b
            
      PARDO  j3, i2, a1, b
         REQUEST              L2AB (i2,a1,j3,b) j3
         tqppq (b,a1,i2,j3) = L2AB (i2,a1,j3,b)
         DO j
            REQUEST  Njjai (j,a1,j3,i2) j
            tppqq (a1,i2,j3,j) = Njjai (j,a1,j3,i2)
            tbj (b,j)  = tqppq (b,a1,i2,j3) * tppqq (a1,i2,j3,j)
            PUT  XI1_B (b,j) += tbj (b,j)
         ENDDO j
      ENDPARDO  j3, i2, a1, b 
#
#
#       ij    ij               i  e  mj
#      X   = G   + P(ij)P(ab) l  r  g          0 and 1 in L R G
#       ab    ab               a  m  eb                    1 1
#
#
#
      PARDO  a, i, b ,j
         REQUEST      Vpiqj (a,i,b,j) j
         GET          L1A (i,a)
         GET          L1B (j,b)
         tai (a,i)  = L1A (i,a)
         tbj (b,j)  = L1B (j,b)
         tppqq  (a,i,b,j)  = Vpiqj (a,i,b,j)
         taibj  (a,i,b,j)  = tai (a,i) ^ LR1W_bj (b,j)
         t1aibj (a,i,b,j)  = LR1W_ai (a,i) ^ tbj (b,j)
         taibj  (a,i,b,j) += t1aibj (a,i,b,j)
         taibj  (a,i,b,j) += tppqq  (a,i,b,j)
         PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
      ENDPARDO  a, i, b, j
#
#
#       ij               mj  e  i    ij   e  m    ef  mn
#      X   = P(ij)P(ab) l   r  f  + l  ( r  f  + r   G   )   0, 11, and 12 in L2 R1 G
#       ab               eb  m  a    ab   m  e    mn  ef
#
#
      PARDO  a, i, a1, i1   
         GET  L1A (i,a)
         tai  (a,i)  = LHBAR_ia (i,a)
         t1ai (a,i)  = L1A     (i,a)
         
         tpppp  (a,i,a1,i1) = t1ai (a,i) ^ LR1W_ai  (a1,i1)
         taiai  (a,i,a1,i1) = tai  (a,i) ^ LR1L2_ai (a1,i1)
         taiai  (a,i,a1,i1) += tpppp (a,i,a1,i1)
            
         PUT  D2aa (a,i,a1,i1) += taiai (a,i,a1,i1)
      ENDPARDO  a, i, a1, i1

      PARDO  b, j, b1, j1
         GET  L1B (j,b)
         tbj  (b,j)  = LHBAR_jb (j,b)
         t1bj (b,j)  = L1B     (j,b)

         tqqqq  (b,j,b1,j1) = t1bj (b,j) ^ LR1W_bj  (b1,j1)
         tbjbj  (b,j,b1,j1) = tbj  (b,j) ^ LR1L2_bj (b1,j1)
         tbjbj  (b,j,b1,j1) += tqqqq (b,j,b1,j1)

         PUT  D2bb (b,j,b1,j1) += tbjbj (b,j,b1,j1)
      ENDPARDO  b, j, b1, j1

      PARDO  a, i, a1, i1
         REQUEST              L2AA   (i,a,i1,a1) i
         REQUEST              VSpipi (a,i,a1,i1) a
         taiai (a,i,a1,i1)  = L2AA   (i,a,i1,a1) 
         taiai (a,i,a1,i1) *= IRHBAR
         tpppp (a,i,a1,i1)  = VSpipi (a,i,a1,i1)
         taiai (a,i,a1,i1) += tpppp  (a,i,a1,i1)
         
         PREPARE  XI2_AA (a,i,a1,i1) += taiai (a,i,a1,i1)
      ENDPARDO  a, i, a1, i1

      PARDO  b, j, b1, j1
         REQUEST              L2BB   (j,b,j1,b1) j
         REQUEST              VSqjqj (b,j,b1,j1) b
         tbjbj (b,j,b1,j1)  = L2BB   (j,b,j1,b1)
         tbjbj (b,j,b1,j1) *= IRHBAR
         tqqqq (b,j,b1,j1)  = VSqjqj (b,j,b1,j1)
         tbjbj (b,j,b1,j1) += tqqqq  (b,j,b1,j1)

         PREPARE  XI2_BB (b,j,b1,j1) += tbjbj (b,j,b1,j1)
      ENDPARDO  b, j, b1, j1

      PARDO  a, i, b, j
         REQUEST             L2AB (i,a,j,b) i
         t1aibj (a,i,b,j)  = L2AB (i,a,j,b)
         t1aibj (a,i,b,j) *= IRHBAR

         tai  (a,i) = LHBAR_ia (i,a)
         tbj  (b,j) = LHBAR_jb (j,b)

         taibj (a,i,b,j)  = tai (a,i) ^ LR1L2_bj (b,j)
         tppqq (a,i,b,j)  = LR1L2_ai (a,i) ^ tbj (b,j)
         taibj (a,i,b,j) += tppqq  (a,i,b,j)
         taibj (a,i,b,j) += t1aibj (a,i,b,j)
         PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
      ENDPARDO  a, i, b, j
#
#
#       i         io  eg  fm        io  ef  mn
#      X  =  1/2 l   r   G   - 1/2 l   r   G
#       a         ef  mo  ge        ef  mn  eo
#
#
      PARDO  a, i, a1, i1
         REQUEST             L2AA (i,a,i1,a1) i
         taiai (a,i,a1,i1) = L2AA (i,a,i1,a1)
         tai (a,i)  = taiai (a,i,a1,i1) * LR2W2_ai (a1,i1)
         PUT  XI1_A (a,i) += tai (a,i)
      ENDPARDO  a, i, a1, i1

      PARDO  a, i, b1, j1
         REQUEST             L2AB (i,a,j1,b1) i
         taibj (a,i,b1,j1) = L2AB (i,a,j1,b1)
         tai (a,i)  = taibj (a,i,b1,j1) * LR2W2_bj (b1,j1)
         PUT  XI1_A (a,i) += tai (a,i)
      ENDPARDO  a, i, b1, j1

      PARDO  b, j, b1, j1
         REQUEST             L2BB (j,b,j1,b1) j
         tbjbj (b,j,b1,j1) = L2BB (j,b,j1,b1)
         tbj (b,j)  = tbjbj (b,j,b1,j1) * LR2W2_bj (b1,j1)
         PUT  XI1_B (b,j) += tbj (b,j)
      ENDPARDO  b, j, b1, j1

      PARDO  a1, i1, b, j
         REQUEST             L2AB (i1,a1,j,b) j
         tbjai (b,j,a1,i1) = L2AB (i1,a1,j,b)
         tbj (b,j)  = tbjai (b,j,a1,i1) * LR2W2_ai (a1,i1)
         PUT  XI1_B (b,j) += tbj (b,j)
      ENDPARDO  a1, i1, b, j
#     
#
#       i    m  ef  in
#      X  = l  r   G
#       a    e  mn  af
#
#
      PARDO  a, i, a2, i2     
         REQUEST     VSpipi (a,i,a2,i2) a
         tpp (a,i) = VSpipi (a,i,a2,i2) * LR2L1_ai (a2,i2)
         PUT  XI1_A (a,i) += tpp (a,i)
      ENDPARDO  a, i, a2, i2
            
      PARDO  a, i, b2, j2
         REQUEST     Vpiqj (a,i,b2,j2) a
         tai (a,i) = Vpiqj (a,i,b2,j2) * LR2L1_bj (b2,j2)
         PUT  XI1_A (a,i) += tai (a,i)
      ENDPARDO  a, i, b2, j2

      PARDO  b, j, b2, j2
         REQUEST     VSqjqj (b,j,b2,j2) b
         tqq (b,j) = VSqjqj (b,j,b2,j2) * LR2L1_bj (b2,j2)
         PUT  XI1_B (b,j) += tqq (b,j)
      ENDPARDO  b, j, b2, j2

      PARDO  a2, i2, b, j
         REQUEST     Vpiqj (a2,i2,b,j) b
         tbj (b,j) = LR2L1_ai (a2,i2) * Vpiqj (a2,i2,b,j)
         PUT  XI1_B (b,j) += tbj (b,j)
      ENDPARDO  a2, i2, b, j
#     
#
#       i    in  ef  m
#      X  = l   r   f
#       a    af  mn  e
#
#
      PARDO  a, i, a1, i1
         REQUEST  L2R2_aaaa (i1,a,i,a1) a
         tai (a,i) = LHBAR_ia (i1,a1) * L2R2_aaaa (i1,a,i,a1)
         PUT  XI1_A (a,i) += tai (a,i)
      ENDPARDO  a, i, a1, i1

      PARDO  a, i, b1, j1
         REQUEST  L2R2_baab (j1,a,i,b1) a
         tai (a,i) = LHBAR_jb (j1,b1) * L2R2_baab (j1,a,i,b1)
         PUT  XI1_A (a,i) += tai (a,i)
      ENDPARDO  a, i, b1, j1

      PARDO  b, j, b1, j1
         REQUEST  L2R2_bbbb (j1,b,j,b1) b
         tbj (b,j) = LHBAR_jb (j1,b1) * L2R2_bbbb (j1,b,j,b1)
         PUT  XI1_B (b,j) += tbj (b,j)
      ENDPARDO  b, j, b1, j1

      PARDO  b, j, a1, i1
         REQUEST  L2R2_abba (i1,b,j,a1) b
         tbj (b,j) = LHBAR_ia (i1,a1) * L2R2_abba (i1,b,j,a1)
         PUT  XI1_B (b,j) += tbj (b,j)
      ENDPARDO  b, j, a1, i1
#     
#
#       ij           mn  e  ij
#      X   = -P(ab) l   r  g        2 in R1 L2 G
#       ab           ea  m  nb
#
#
      PARDO  i2, i, a1, i1
         REQUEST              HBAR_JKIA_aaaa (i,i2,i1,a1) i2
         tpppp (i2,i,a1,i1) = HBAR_JKIA_aaaa (i,i2,i1,a1)
         DO a
            taiai  (a,i,a1,i1)  = LR1L2_ai (a,i2) * tpppp (i2,i,a1,i1)
            t1aiai (a1,i,a,i1)  = taiai (a,i,a1,i1)
            taiai  (a,i,a1,i1) *= -1.0
            PREPARE  XI2_AA (a,i,a1,i1) += taiai  (a,i,a1,i1)
            PREPARE  XI2_AA (a1,i,a,i1) += t1aiai (a1,i,a,i1)
         ENDDO a
      ENDPARDO  i2, i, a1, i1

      PARDO  j2, j, b1, j1
         REQUEST              HBAR_JKIA_bbbb (j,j2,j1,b1) j2
         tqqqq (j2,j,b1,j1) = HBAR_JKIA_bbbb (j,j2,j1,b1)
         DO b
            tbjbj  (b,j,b1,j1)  = LR1L2_bj (b,j2) * tqqqq (j2,j,b1,j1)
            t1bjbj (b1,j,b,j1)  = tbjbj (b,j,b1,j1)
            tbjbj  (b,j,b1,j1) *= -1.0
            PREPARE  XI2_BB (b,j,b1,j1) += tbjbj  (b,j,b1,j1)
            PREPARE  XI2_BB (b1,j,b,j1) += t1bjbj (b1,j,b,j1)
         ENDDO b
      ENDPARDO  j2, j, b1, j1

      PARDO  i2, i, b, j
         REQUEST            HBAR_JKIA_aabb (i,i2,j,b) i2
         tppqq (i2,i,b,j) = HBAR_JKIA_aabb (i,i2,j,b) 
         DO a
            taibj (a,i,b,j)  = LR1L2_ai (a,i2) * tppqq (i2,i,b,j)
            taibj (a,i,b,j) *= -1.0
            PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
         ENDDO a
      ENDPARDO  i2, i, b, j
      
      PARDO  j2, j, a, i
         REQUEST            HBAR_JKIA_bbaa (j,j2,i,a) j2
         tppqq (a,i,j2,j) = HBAR_JKIA_bbaa (j,j2,i,a) 
         DO b
            tjb (j2,b) = LR1L2_bj (b,j2)
            taibj (a,i,b,j)  = tppqq (a,i,j2,j) * tjb (j2,b)
            taibj (a,i,b,j) *= -1.0
            PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
         ENDDO b
      ENDPARDO  j2, j, a, i
#
#
#       ij        ij  ef  mn         mn  ef  ij
#      X   = 1/4 l   r   g    + 1/4 l   r   G       2 and 3 in R2 L2 G
#       ab        ef  mn  ab         ab  mn  ef
#
#     
      PARDO  a, i, i2, i3
         ALLOCATE  Liiii  (i2,i,i3,*)
         ALLOCATE  L1iiii (i2,i,i3,*)
         DO i1
            GET                   R2L2_iiii (i2,i,i3,i1)
            GET                   R2G2_iiii (i2,i,i3,i1)
            Liiii  (i2,i,i3,i1) = R2L2_iiii (i2,i,i3,i1)
            L1iiii (i2,i,i3,i1) = R2G2_iiii (i2,i,i3,i1)
         ENDDO i1
         DO a1
            REQUEST              VSpipi (a,i2,a1,i3) a1
            REQUEST              L2AA   (i2,a,i3,a1) a1
            tpppp (a,i2,a1,i3) = L2AA   (i2,a,i3,a1)
            DO i1
               taiai  (a,i,a1,i1)  = VSpipi (a,i2,a1,i3) * Liiii  (i2,i,i3,i1)
               t1aiai (a,i,a1,i1)  = tpppp  (a,i2,a1,i3) * L1iiii (i2,i,i3,i1)
               taiai  (a,i,a1,i1) += t1aiai (a,i,a1,i1)
               taiai  (a,i,a1,i1) *= 0.25
               PREPARE  XI2_AA (a,i,a1,i1) += taiai (a,i,a1,i1)
            ENDDO i1
         ENDDO a1
         DEALLOCATE  Liiii  (i2,i,i3,*)
         DEALLOCATE  L1iiii (i2,i,i3,*)
      ENDPARDO  a, i, i2, i3

      PARDO  b, j, j2, j3
         ALLOCATE  Ljjjj  (j2,j,j3,*)
         ALLOCATE  L1jjjj (j2,j,j3,*)
         DO j1
            GET                   R2L2_jjjj (j2,j,j3,j1)
            GET                   R2G2_jjjj (j2,j,j3,j1)
            Ljjjj  (j2,j,j3,j1) = R2L2_jjjj (j2,j,j3,j1)
            L1jjjj (j2,j,j3,j1) = R2G2_jjjj (j2,j,j3,j1)
         ENDDO j1
         DO b1
            REQUEST              VSqjqj (b,j2,b1,j3) b1
            REQUEST              L2BB   (j2,b,j3,b1) b1
            tqqqq (b,j2,b1,j3) = L2BB   (j2,b,j3,b1)
            DO j1
               tbjbj  (b,j,b1,j1)  = VSqjqj (b,j2,b1,j3) * Ljjjj  (j2,j,j3,j1)
               t1bjbj (b,j,b1,j1)  = tqqqq  (b,j2,b1,j3) * L1jjjj (j2,j,j3,j1)
               tbjbj  (b,j,b1,j1) += t1bjbj (b,j,b1,j1)
               tbjbj  (b,j,b1,j1) *= 0.25
               PREPARE  XI2_BB (b,j,b1,j1) += tbjbj (b,j,b1,j1)
            ENDDO j1
         ENDDO b1
         DEALLOCATE  Ljjjj  (j2,j,j3,*)
         DEALLOCATE  L1jjjj (j2,j,j3,*)
      ENDPARDO  b, j, j2, j3

      PARDO  a, i, i2, j2
         ALLOCATE  Liijj  (i2,i,j2,*)
         ALLOCATE  L1iijj (i2,i,j2,*)
         DO j
            GET  R2L2_iijj (i2,i,j2,j)
            GET  R2G2_iijj (i2,i,j2,j)
            Liijj  (i2,i,j2,j) = R2L2_iijj (i2,i,j2,j)
            L1iijj (i2,i,j2,j) = R2G2_iijj (i2,i,j2,j)
         ENDDO j
         DO b
            REQUEST             Vpiqj (a,i2,b,j2) b
            REQUEST             L2AB  (i2,a,j2,b) b
            tppqq (a,i2,b,j2) = L2AB  (i2,a,j2,b)
            DO j
               taibj  (a,i,b,j)  = Vpiqj (a,i2,b,j2) * Liijj  (i2,i,j2,j)
               t1aibj (a,i,b,j)  = tppqq (a,i2,b,j2) * L1iijj (i2,i,j2,j)
               taibj  (a,i,b,j) += t1aibj (a,i,b,j)
               PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
            ENDDO j
         ENDDO b
         DEALLOCATE  Liijj  (i2,i,j2,*)
         DEALLOCATE  L1iijj (i2,i,j2,*)
      ENDPARDO  a, i, i2, j2
#
#
#       i         io  ef  mn
#      X  = -1/4 l   r   G
#       a         ef  mn  oa
#
#

      PARDO  i1, i2, i3, a
         REQUEST              HBAR_JKIA_aaaa (i1,i2,i3,a) i1
         tpppp (a,i3,i2,i1) = HBAR_JKIA_aaaa (i1,i2,i3,a)
         DO i
            GET                  R2L2_iiii (i1,i2,i3,i)
            tiiii (i3,i2,i1,i) = R2L2_iiii (i1,i2,i3,i)
            tai (a,i)  = tpppp (a,i3,i2,i1) * tiiii (i3,i2,i1,i)
            tai (a,i) *= 0.25
            PUT  XI1_A (a,i) += tai (a,i)
         ENDDO i
      ENDPARDO  i1, i2, i3, a

      PARDO  j1, j2, i3, a
         REQUEST              HBAR_JKIA_bbaa (j1,j2,i3,a) j1
         tppqq (a,i3,j2,j1) = HBAR_JKIA_bbaa (j1,j2,i3,a)
         DO i
            GET                  R2L2_iijj (i3,i,j1,j2)
            tpqqp (i3,j2,j1,i) = R2L2_iijj (i3,i,j1,j2)
            tai (a,i) = tppqq (a,i3,j2,j1) * tpqqp (i3,j2,j1,i)
            PUT  XI1_A (a,i) += tai (a,i)
         ENDDO i
      ENDPARDO  j1, j2, i3, a

      PARDO  j1, j2, j3, b
         REQUEST              HBAR_JKIA_bbbb (j1,j2,j3,b) j1
         tqqqq (b,j3,j2,j1) = HBAR_JKIA_bbbb (j1,j2,j3,b)
         DO j
            GET                  R2L2_jjjj (j1,j2,j3,j)
            tjjjj (j3,j2,j1,j) = R2L2_jjjj (j1,j2,j3,j)
            tbj (b,j)  = tqqqq (b,j3,j2,j1) * tjjjj (j3,j2,j1,j)
            tbj (b,j) *= 0.25
            PUT  XI1_B (b,j) += tbj (b,j)
         ENDDO j
      ENDPARDO  j1, j2, j3, b

      PARDO  i1, i2, j3, b
         REQUEST              HBAR_JKIA_aabb (i1,i2,j3,b) i1
         tqqpp (b,j3,i2,i1) = HBAR_JKIA_aabb (i1,i2,j3,b)
         DO j
            GET                  R2L2_iijj (i1,i2,j3,j)
            tqppq (j3,i2,i1,j) = R2L2_iijj (i1,i2,j3,j)
            tbj (b,j) = tqqpp (b,j3,i2,i1) * tqppq (j3,i2,i1,j)
            PUT  XI1_B (b,j) += tbj (b,j)
         ENDDO j
      ENDPARDO  i1, i2, j3, b
#
#
#       i         mn  ef  oi
#      X  = -1/2 l   r   G
#       a         ef  mo  na
#
#
      PARDO  i2, i1, i, a
         REQUEST             HBAR_JKIA_aaaa (i2,i1,i,a) i2
         tpppp (a,i,i2,i1) = HBAR_JKIA_aaaa (i2,i1,i,a)
         tai (a,i) = tpppp (a,i,i2,i1) * LR2L2_ii (i2,i1)
         tai (a,i) *= -1.0
         PUT  XI1_A (a,i) += tai (a,i)
      ENDPARDO  i2, i1, i, a
            
      PARDO  j2, j1, i, a
         REQUEST             HBAR_JKIA_bbaa (j2,j1,i,a) j2
         tppqq (a,i,j2,j1) = HBAR_JKIA_bbaa (j2,j1,i,a)
         tai (a,i) = tppqq (a,i,j2,j1) * LR2L2_jj (j2,j1)
         tai (a,i) *= -1.0
         PUT  XI1_A (a,i) += tai (a,i)
      ENDPARDO  j2, j1, i, a

      PARDO  j2, j1, j, b    
         REQUEST             HBAR_JKIA_bbbb (j2,j1,j,b) j2
         tqqqq (b,j,j2,j1) = HBAR_JKIA_bbbb (j2,j1,j,b)
         tbj (b,j) = tqqqq (b,j,j2,j1) * LR2L2_jj (j2,j1)
         tbj (b,j) *= -1.0
         PUT  XI1_B (b,j) += tbj (b,j)
      ENDPARDO  j2, j1, j, b
             
      PARDO  i2, i1, j, b    
         REQUEST             HBAR_JKIA_aabb (i2,i1,j,b) i2
         tqqpp (b,j,i2,i1) = HBAR_JKIA_aabb (i2,i1,j,b)
         tbj (b,j) = tqqpp (b,j,i2,i1) * LR2L2_ii (i2,i1)
         tbj (b,j) *= -1.0
         PUT  XI1_B (b,j) += tbj (b,j)
      ENDPARDO  i2, i1, j, b
#
#
#     ...ready!
#
#
      ENDPROC  HEAVY_XI
#------------------------------------------------------------------------



#------------------------------------------------------------------------
#
#     --------------
      PROC  LIGHT_XI
#     --------------
#
#
#
#       ij           m  e  ij          ij  e  m
#      X   = -P(ab) l  r  g   - P(ab) l   r  f       3 in L1R1G, 10 in R1L2G
#       ab           a  m  eb          eb  m  a
#
#
      PARDO  a1, i, a2  # Could use R1L1 Intermediate, artificial N^5 step
         ALLOCATE  Laa  (a2,*)
         ALLOCATE  L1aa (a2,*)
         DO i2
            GET  R1A (a2,i2)
            DO a
               GET  L1A (i2,a)
               tpp  (a2,a)  = R1A (a2,i2) * L1A (i2,a)
               taa  (a2,a)  = R1A (a2,i2) * LHBAR_ia (i2,a)
               Laa  (a2,a) -= tpp (a2,a)
               L1aa (a2,a) -= taa (a2,a)
            ENDDO a
         ENDDO i2
         DO i1
            REQUEST              VSpipi (a2,i,a1,i1) a1
            REQUEST              L2AA   (i,a2,i1,a1) a1
            tpppp (a2,i,a1,i1) = L2AA   (i,a2,i1,a1)
            DO a
               taiai  (a,i,a1,i1)  = Laa  (a2,a) * VSpipi (a2,i,a1,i1)
               t2aiai (a,i,a1,i1)  = L1aa (a2,a) * tpppp  (a2,i,a1,i1)
               taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

               t1aiai (a1,i,a,i1)  = taiai (a,i,a1,i1)
               t1aiai (a1,i,a,i1) *= -1.0

               PREPARE  XI2_AA (a,i,a1,i1) += taiai  (a,i,a1,i1)
               PREPARE  XI2_AA (a1,i,a,i1) += t1aiai (a1,i,a,i1)
            ENDDO a
         ENDDO i1
         DEALLOCATE  Laa  (a2,*)
         DEALLOCATE  L1aa (a2,*)
      ENDPARDO  a1, i, a2

      PARDO  b1, j, b2  # Could use R1L1 Intermediate, artificial N^5 step
         ALLOCATE  Lbb  (b2,*)
         ALLOCATE  L1bb (b2,*)
         DO j2
            GET  R1B (b2,j2)
            DO b
               GET  L1B (j2,b)
               tqq  (b2,b)  = R1B (b2,j2) * L1B (j2,b)
               tbb  (b2,b)  = R1B (b2,j2) * LHBAR_jb (j2,b)
               Lbb  (b2,b) -= tqq (b2,b)
               L1bb (b2,b) -= tbb (b2,b)
            ENDDO b 
         ENDDO j2
         DO j1
            REQUEST              VSqjqj (b2,j,b1,j1) b1
            REQUEST              L2BB   (j,b2,j1,b1) b1
            tqqqq (b2,j,b1,j1) = L2BB   (j,b2,j1,b1)
            DO b
               tbjbj  (b,j,b1,j1)  = Lbb  (b2,b) * VSqjqj (b2,j,b1,j1)
               t2bjbj (b,j,b1,j1)  = L1bb (b2,b) * tqqqq  (b2,j,b1,j1)
               tbjbj  (b,j,b1,j1) += t2bjbj (b,j,b1,j1)

               t1bjbj (b1,j,b,j1)  = tbjbj (b,j,b1,j1)
               t1bjbj (b1,j,b,j1) *= -1.0

               PREPARE  XI2_BB (b,j,b1,j1) += tbjbj  (b,j,b1,j1)
               PREPARE  XI2_BB (b1,j,b,j1) += t1bjbj (b1,j,b,j1)
            ENDDO b
         ENDDO j1
         DEALLOCATE  Lbb  (b2,*)
         DEALLOCATE  L1bb (b2,*)
      ENDPARDO  b1, j, b2

      PARDO  b, i, a2  # Could use R1L1 Intermediate, artificial N^5 step
         ALLOCATE  Laa  (a2,*)
         ALLOCATE  L1aa (a2,*)
         DO i2
            GET  R1A (a2,i2)
            DO a
               GET  L1A (i2,a)
               tpp  (a2,a)  = R1A (a2,i2) * L1A (i2,a)
               taa  (a2,a)  = R1A (a2,i2) * LHBAR_ia (i2,a)
               Laa  (a2,a) -= tpp (a2,a)
               L1aa (a2,a) -= taa (a2,a)
            ENDDO a
         ENDDO i2
         DO j
            REQUEST            Vpiqj (a2,i,b,j) b
            REQUEST            L2AB  (i,a2,j,b) b
            tppqq (a2,i,b,j) = L2AB  (i,a2,j,b)
            DO a
               taibj  (a,i,b,j)  = Laa  (a2,a) * Vpiqj (a2,i,b,j)
               t1aibj (a,i,b,j)  = L1aa (a2,a) * tppqq (a2,i,b,j)
               taibj  (a,i,b,j) += t1aibj (a,i,b,j)
               PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
            ENDDO a
         ENDDO j
         DEALLOCATE  Laa (a2,*)
         DEALLOCATE  L1aa (a2,*)
      ENDPARDO  b, i, a2

      PARDO  a, j, b2  # Could use R1L1 Intermediate, artificial N^5 step
         ALLOCATE  Lbb  (b2,*)
         ALLOCATE  L1bb (b2,*)
         DO j2
            GET  R1B (b2,j2)
            DO b
               GET  L1B (j2,b)
               tqq  (b2,b)  = R1B (b2,j2) * L1B (j2,b)
               tbb  (b2,b)  = R1B (b2,j2) * LHBAR_jb (j2,b)
               Lbb  (b2,b) -= tqq (b2,b)
               L1bb (b2,b) -= tbb (b2,b)
            ENDDO b
         ENDDO j2
         DO i
            REQUEST            Vpiqj (a,i,b2,j) a
            REQUEST            L2AB  (i,a,j,b2) a
            tppqq (a,i,b2,j) = L2AB  (i,a,j,b2)
            DO b
               taibj  (a,i,b,j)  = Vpiqj (a,i,b2,j) * Lbb  (b2,b)
               t1aibj (a,i,b,j)  = tppqq (a,i,b2,j) * L1bb (b2,b)
               taibj  (a,i,b,j) += t1aibj (a,i,b,j)
               PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
            ENDDO b
         ENDDO i
         DEALLOCATE  Lbb  (b2,*)
         DEALLOCATE  L1bb (b2,*)
      ENDPARDO  a, j, b2
#
#
#       ij           i  e  mj          mj  e  i
#      X   = -P(ij) l  r  g   - P(ij) l   r  f      2 in L1R1G, 9 in R1L2G
#       ab           e  m  ab          ab  m  e
#
#
      PARDO  a, a1, i2  # Could use L1 R1 Intermediate, artificial N^5 step
         ALLOCATE  Lii  (*,i2)
         ALLOCATE  L1ii (*,i2)
         DO a2
            GET  R1A (a2,i2)
            DO i
               GET  L1A (i,a2)
               tpp  (i,i2)  = L1A (i,a2) * R1A (a2,i2)
               tii  (i,i2)  = LHBAR_ia (i,a2) * R1A (a2,i2)
               Lii  (i,i2) -= tpp (i,i2)
               L1ii (i,i2) -= tii (i,i2)
            ENDDO i
         ENDDO a2
         DO i1
            REQUEST              VSpipi (a,i2,a1,i1) a
            REQUEST              L2AA   (i2,a,i1,a1) a
            tpppp (a,i2,a1,i1) = L2AA   (i2,a,i1,a1)
            DO i
               taiai  (a,i,a1,i1)  = VSpipi (a,i2,a1,i1) * Lii  (i,i2)
               t2aiai (a,i,a1,i1)  = tpppp  (a,i2,a1,i1) * L1ii (i,i2)
               taiai  (a,i,a1,i1) += t2aiai (a,i,a1,i1)

               t1aiai (a,i1,a1,i)  = taiai (a,i,a1,i1)
               t1aiai (a,i1,a1,i) *= -1.0

               PREPARE  XI2_AA (a,i,a1,i1) += taiai  (a,i,a1,i1)
               PREPARE  XI2_AA (a,i1,a1,i) += t1aiai (a,i1,a1,i)
            ENDDO i
         ENDDO i1
         DEALLOCATE  Lii  (*,i2)
         DEALLOCATE  L1ii (*,i2)
      ENDPARDO  a, a1, i2

      PARDO  b, b1, j2  # Could use L1 R1 Intermediate, artificial N^5 step
         ALLOCATE  Ljj  (*,j2)
         ALLOCATE  L1jj (*,j2)
         DO b2
            GET  R1B (b2,j2)
            DO j
               GET  L1B (j,b2)
               tqq  (j,j2)  = L1B (j,b2) * R1B (b2,j2)
               tjj  (j,j2)  = LHBAR_jb (j,b2) * R1B (b2,j2)
               Ljj  (j,j2) -= tqq (j,j2)
               L1jj (j,j2) -= tjj (j,j2)
            ENDDO j
         ENDDO b2
         DO j1
            REQUEST              VSqjqj (b,j2,b1,j1) b
            REQUEST              L2BB   (j2,b,j1,b1) b
            tqqqq (b,j2,b1,j1) = L2BB   (j2,b,j1,b1)
            DO j
               tbjbj  (b,j,b1,j1)  = VSqjqj (b,j2,b1,j1) * Ljj  (j,j2)
               t2bjbj (b,j,b1,j1)  = tqqqq  (b,j2,b1,j1) * L1jj (j,j2)
               tbjbj  (b,j,b1,j1) += t2bjbj (b,j,b1,j1)

               t1bjbj (b,j1,b1,j)  = tbjbj (b,j,b1,j1)
               t1bjbj (b,j1,b1,j) *= -1.0

               PREPARE  XI2_BB (b,j,b1,j1) += tbjbj  (b,j,b1,j1)
               PREPARE  XI2_BB (b,j1,b1,j) += t1bjbj (b,j1,b1,j)
            ENDDO j
         ENDDO j1
         DEALLOCATE  Ljj  (*,j2)
         DEALLOCATE  L1jj (*,j2)
      ENDPARDO  b, b1, j2

      PARDO  a, b, i2  # Could use L1 R1 Intermediate, artificial N^5 step
         ALLOCATE  Lii  (*,i2)
         ALLOCATE  L1ii (*,i2)
         DO a2
            GET  R1A (a2,i2)
            DO i
               GET  L1A (i,a2)
               tpp  (i,i2)  = L1A (i,a2) * R1A (a2,i2)
               tii  (i,i2)  = LHBAR_ia (i,a2) * R1A (a2,i2)
               Lii  (i,i2) -= tpp (i,i2)
               L1ii (i,i2) -= tii (i,i2)
            ENDDO i
         ENDDO a2
         DO j
            REQUEST            Vpiqj (a,i2,b,j) j
            REQUEST            L2AB  (i2,a,j,b) j
            tppqq (a,i2,b,j) = L2AB  (i2,a,j,b)
            DO i
               taibj  (a,i,b,j)  = Lii  (i,i2) * Vpiqj (a,i2,b,j)
               t1aibj (a,i,b,j)  = L1ii (i,i2) * tppqq (a,i2,b,j)
               taibj  (a,i,b,j) += t1aibj (a,i,b,j)
               PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
            ENDDO i
         ENDDO j
         DEALLOCATE  Lii  (*,i2)
         DEALLOCATE  L1ii (*,i2)
      ENDPARDO  a, b, i2

      PARDO  a, b, j2  # Could use L1 R1 Intermediate, artificial N^5 step
         ALLOCATE  Ljj  (*,j2)
         ALLOCATE  L1jj (*,j2)
         DO b2
            GET  R1B (b2,j2)
            DO j
               GET  L1B (j,b2)
               tqq  (j,j2)  = L1B (j,b2) * R1B (b2,j2)
               tjj  (j,j2)  = LHBAR_jb (j,b2) * R1B (b2,j2)
               Ljj  (j,j2) -= tqq (j,j2)
               L1jj (j,j2) -= tjj (j,j2)
            ENDDO j
         ENDDO b2
         DO i
            REQUEST            Vpiqj (a,i,b,j2) i
            REQUEST            L2AB  (i,a,j2,b) i
            tppqq (a,i,b,j2) = L2AB  (i,a,j2,b)
            DO j
               taibj  (a,i,b,j)  = Vpiqj (a,i,b,j2) * Ljj  (j,j2)
               t1aibj (a,i,b,j)  = tppqq (a,i,b,j2) * L1jj (j,j2)
               taibj  (a,i,b,j) += t1aibj (a,i,b,j)
               PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
            ENDDO j
         ENDDO i
         DEALLOCATE  Ljj  (*,j2)
         DEALLOCATE  L1jj (*,j2)
      ENDPARDO  a, b, j2
#
#
#       i         i  ef  mn
#      X  = -1/2 l  r   G
#       a         e  mn  af
#
#
      
      PARDO  a, i, a2  
         GET           L1A (i,a2)
         tai (a2,i)  = L1A (i,a2)
         tpp (a,i)   = LR2W2_aa (a,a2) * tai (a2,i)
         PUT  XI1_A (a,i) += tpp (a,i)
      ENDPARDO  a, i, a2

      PARDO  b, j, b2  
         GET           L1B (j,b2)
         tbj (b2,j)  = L1B (j,b2)
         tqq (b,j)   = LR2W2_bb (b,b2) * tbj (b2,j)
         PUT  XI1_B (b,j) += tqq (b,j)
      ENDPARDO  b, j, b2
#     
#
#       i         mn  ef  i
#      X  = -1/2 l  r    f
#       a         af  mn  e
#
#     
      PARDO  a2, a, i
         tpp (a2,i) = LHBAR_ia (i,a2)
         tai (a,i)  = LR2L2_aa (a,a2) * tpp (a2,i)
         PUT  XI1_A (a,i) += tai (a,i)
      ENDPARDO  a2, a, i

      PARDO  b2, b, j
         tqq (b2,j) = LHBAR_jb (j,b2)
         tbj (b,j)  = LR2L2_bb (b,b2) * tqq (b2,j)
         PUT  XI1_B (b,j) += tbj (b,j)
      ENDPARDO  b2, b, j
#
#
#       ij    ij  e  fm
#      X   = l   r  g        3 in L2 R1 G
#       ab    ef  m  ba
#
#
      PARDO  i2, i, a2    # Could use Niiai Intermediate
         ALLOCATE  Laiii (a2,i,i2,*)
         DO i1
            DO a3
               REQUEST                L2AA  (i,a2,i1,a3) a3
               GET                    R1A   (a3,i2)
               t1pppp (a2,i,a3,i1)  = L2AA  (i,a2,i1,a3)
               tpppp  (a2,i,i2,i1)  = t1pppp (a2,i,a3,i1) * R1A (a3,i2)
               Laiii  (a2,i,i2,i1) -= tpppp (a2,i,i2,i1)
            ENDDO a3
         ENDDO i1
         DO a
         DO a1
            REQUEST               HBAR_AIBC_aaaa (a2,a,i2,a1) a1
            tpppp  (a,a2,a1,i2) = HBAR_AIBC_aaaa (a2,a,i2,a1)
            DO i1
               t1aiai (a,i,a1,i1) = tpppp (a,a2,a1,i2) * Laiii (a2,i,i2,i1)
               PREPARE  XI2_AA (a,i,a1,i1) += t1aiai (a,i,a1,i1)
            ENDDO i1
         ENDDO a1
         ENDDO a
         DEALLOCATE  Laiii (a2,i,i2,*)
      ENDPARDO  i2, i, a2

      PARDO  j2, j, b2    # Could use Niiai Intermediate
         ALLOCATE  Lbjjj (b2,j,j2,*)
         DO j1
            DO b3
               REQUEST                L2BB  (j,b2,j1,b3) b3
               GET                    R1B   (b3,j2)
               t1qqqq (b2,j,b3,j1)  = L2BB  (j,b2,j1,b3)
               tqqqq  (b2,j,j2,j1)  = t1qqqq (b2,j,b3,j1) * R1B (b3,j2)
               Lbjjj  (b2,j,j2,j1) -= tqqqq (b2,j,j2,j1)
            ENDDO b3
         ENDDO j1
         DO b
         DO b1
            REQUEST               HBAR_AIBC_bbbb (b2,b,j2,b1) b1
            tqqqq  (b,b2,b1,j2) = HBAR_AIBC_bbbb (b2,b,j2,b1)
            DO j1
               t1bjbj (b,j,b1,j1) = tqqqq (b,b2,b1,j2) * Lbjjj (b2,j,j2,j1)
               PREPARE  XI2_BB (b,j,b1,j1) += t1bjbj (b,j,b1,j1)
            ENDDO j1
         ENDDO b1
         ENDDO b
         DEALLOCATE  Lbjjj (b2,j,j2,*)
      ENDPARDO  j2, j, b2

      PARDO  j2, i, a2    # Could use Njjai Intermediate
         ALLOCATE  Laijj (a2,i,j2,*)
         DO j
            DO b3
               REQUEST               L2AB (i,a2,j,b3) b3
               GET                   R1B  (b3,j2)
               tppqq  (a2,i,b3,j)  = L2AB (i,a2,j,b3)
               t1ppqq (a2,i,j2,j)  = tppqq (a2,i,b3,j) * R1B (b3,j2)
               Laijj  (a2,i,j2,j) -= t1ppqq (a2,i,j2,j)
            ENDDO b3
         ENDDO j
         DO a
         DO b
            REQUEST             HBAR_AIBC_aabb (a2,a,j2,b) b
            tppqq (a,a2,b,j2) = HBAR_AIBC_aabb (a2,a,j2,b)
            DO j
               taibj (a,i,b,j)  = tppqq (a,a2,b,j2) * Laijj (a2,i,j2,j)
               PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
            ENDDO j
         ENDDO b
         ENDDO a
         DEALLOCATE  Laijj (a2,i,j2,*)
      ENDPARDO  j2, i, a2

      PARDO  i2, j, b2  # Could use Niibj Intermediate
         ALLOCATE  Liibj (i2,*,b2,j)
         DO i
            DO a3
               REQUEST               L2AB (i,a3,j,b2) a3
               GET                   R1A  (a3,i2)
               tia (i2,a3)         = R1A  (a3,i2)
               tppqq  (a3,i,b2,j)  = L2AB (i,a3,j,b2)
               t1ppqq (i2,i,b2,j)  = tia (i2,a3) * tppqq (a3,i,b2,j)
               Liibj  (i2,i,b2,j) -= t1ppqq (i2,i,b2,j)
            ENDDO a3
         ENDDO i
         DO b
         DO a
            REQUEST             HBAR_AIBC_bbaa (b2,b,i2,a) a
            tppqq (a,i2,b,b2) = HBAR_AIBC_bbaa (b2,b,i2,a)
            DO i
               taibj (a,i,b,j)  = tppqq (a,i2,b,b2) * Liibj (i2,i,b2,j)
               PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
            ENDDO i
         ENDDO a
         ENDDO b
         DEALLOCATE  Liibj (i2,*,b2,j)
      ENDPARDO  i2, j, b2
#
#
#       i         m  ef  in
#      X  = -1/2 l  r   G
#       a         a  mn  ef
#
#
      PARDO  i, i2, a
         GET           L1A (i2,a)
         tai (a,i2)  = L1A (i2,a)
         tai (a,i2) *= -1.0
         tpp (a,i)   = tai (a,i2) * LR2W2_ii (i2,i)
         PUT  XI1_A (a,i) += tpp (a,i)
      ENDPARDO  i, i2, a

      PARDO  j, j2, b  
         GET           L1B (j2,b)
         tbj (b,j2)  = L1B (j2,b)
         tbj (b,j2) *= -1.0
         tqq (b,j)   = tbj (b,j2) * LR2W2_jj (j2,j)
         PUT  XI1_B (b,j) += tqq (b,j)
      ENDPARDO  j, j2, b
#
#
#       i         in  ef  m
#      X  = -1/2 l  r    f
#       a         ef  mn  a
#
#
      PARDO  i2, a, i
         tpp (a,i2) = LHBAR_ia (i2,a)
         tai (a,i)  = tpp (a,i2) * LR2L2_ii (i2,i)
         tai (a,i) *= -1.0
         PUT  XI1_A (a,i) += tai (a,i)
      ENDPARDO  i2, a, i

      PARDO  j2, b, j 
         tqq (b,j2) = LHBAR_jb (j2,b)
         tbj (b,j)  = tqq (b,j2) * LR2L2_jj (j2,j)
         tbj (b,j) *= -1.0
         PUT  XI1_B (b,j) += tbj (b,j)
      ENDPARDO  j2, b, j
#
#
#       ij    mn  e  ij
#      X   = l   r  g      PREPARE too far in?  4 in R1 L2 G
#       ab    ab  m  en
#
#
      PARDO  i2, i, i3
         ALLOCATE  L3iiii (i,i3,*,i2)
         DO i1
            DO a2
               REQUEST  HBAR_JKIA_aaaa (i,i3,i1,a2) a2
               GET      R1A (a2,i2)
               tiiii (i,i3,i1,i2)  = HBAR_JKIA_aaaa (i,i3,i1,a2) * R1A (a2,i2)
               L3iiii (i,i3,i1,i2) -= tiiii (i,i3,i1,i2)
            ENDDO a2
         ENDDO i1
         DO a
         DO a1
            REQUEST              L2AA (i2,a,i3,a1) a1
            tpppp (a,i3,a1,i2) = L2AA (i2,a,i3,a1)
            DO i1
               taiai (a,i,a1,i1)  = tpppp (a,i3,a1,i2) * L3iiii (i,i3,i1,i2)
               PREPARE  XI2_AA (a,i,a1,i1) += taiai (a,i,a1,i1)
            ENDDO i1
         ENDDO a1
         ENDDO a
         DEALLOCATE  L3iiii (i,i3,*,i2)
      ENDPARDO  i2, i, i3

      PARDO  j2, j, j3
         ALLOCATE  L3jjjj (j,j3,*,j2)
         DO j1
            DO b2
               REQUEST  HBAR_JKIA_bbbb (j,j3,j1,b2) b2
               GET      R1B (b2,j2)
               tjjjj (j,j3,j1,j2)  = HBAR_JKIA_bbbb (j,j3,j1,b2) * R1B (b2,j2)
               L3jjjj (j,j3,j1,j2) -= tjjjj (j,j3,j1,j2)
            ENDDO b2
         ENDDO j1 
         DO b
         DO b1
            REQUEST              L2BB (j2,b,j3,b1) b1
            tqqqq (b,j3,b1,j2) = L2BB (j2,b,j3,b1) 
            DO j1 
               tbjbj (b,j,b1,j1)  = tqqqq (b,j3,b1,j2) * L3jjjj (j,j3,j1,j2)
               PREPARE  XI2_BB (b,j,b1,j1) += tbjbj (b,j,b1,j1) 
            ENDDO j1
         ENDDO b1 
         ENDDO b
         DEALLOCATE  L3jjjj (j,j3,*,j2)
      ENDPARDO  j2, j, j3

      PARDO  i, i2, j2
         ALLOCATE  L2iijj (i,i2,*,j2)
         DO j
            DO a2
               REQUEST               HBAR_JKIA_bbaa (j,j2,i,a2) a2
               GET                   R1A (a2,i2)
               tppqq  (i,a2,j,j2)  = HBAR_JKIA_bbaa (j,j2,i,a2)
               t1ppqq (i,i2,j,j2)  = R1A (a2,i2) * tppqq (i,a2,j,j2)
               L2iijj  (i,i2,j,j2) += t1ppqq (i,i2,j,j2)
            ENDDO a2
            DO b2
               REQUEST               HBAR_JKIA_aabb (i,i2,j,b2) b2
               GET                   R1B (b2,j2)
               t1ppqq (i,i2,j,j2)  = HBAR_JKIA_aabb (i,i2,j,b2) * R1B (b2,j2)
               L2iijj  (i,i2,j,j2) += t1ppqq (i,i2,j,j2)
            ENDDO b2
         ENDDO j 
         DO b
         DO a
            REQUEST              L2AB (i2,a,j2,b) b
            t1aibj (a,i2,b,j2) = L2AB (i2,a,j2,b)
            DO j
               taibj (a,i,b,j)  = t1aibj (a,i2,b,j2) * L2iijj (i,i2,j,j2)
               PREPARE  XI2_AB (a,i,b,j) += taibj (a,i,b,j)
            ENDDO j
         ENDDO a
         ENDDO b
         DEALLOCATE  L2iijj (i,i2,*,j2)
      ENDPARDO  i, i2, j2
#        
#
#       i        i  ef  mn        i  mn  ef
#      X  = 1/4 l  r   G   + 1/4 f  l   r
#       a        a  mn  ef        a  ef  mn
#
#
      PARDO  a, i
         GET          L1A      (i,a)
         tai (a,i)  = LHBAR_ia (i,a)
         tpp (a,i)  = L1A (i,a)

         tai (a,i) *= IL2R2
         tpp (a,i) *= IG2R2
         tai (a,i) += tpp (a,i)
         PUT  XI1_A (a,i) += tai (a,i)
      ENDPARDO  a, i

      PARDO  b, j
         GET          L1B      (j,b)
         tbj (b,j)  = LHBAR_jb (j,b)
         tqq (b,j)  = L1B (j,b)
      
         tbj (b,j) *= IL2R2
         tqq (b,j) *= IG2R2
         tbj (b,j) += tqq (b,j)
         PUT  XI1_B (b,j) += tbj (b,j)
      ENDPARDO  b, j
#
#
#     ...ready!
#
#
      ENDPROC  LIGHT_XI
#------------------------------------------------------------------------



#------------------------------------------------------------------------
#
#     ----------------
      PROC  CALC_XI
#     ----------------
#
#
#
      CREATE  D2aa
      CREATE  D2bb

      CREATE  XI1_A
      CREATE  XI1_B

      CALL  XI_INTERMEDIATES
      EXECUTE  SERVER_BARRIER

      CALL  HEAVY_XI
      CALL  LIGHT_XI

      EXECUTE  SIP_BARRIER
#     
#
#          Some contributions were put in to D2dd, so prepare them
#          in to VCHACT2 now with appropriate permutations!
#
#
      PARDO  a, i, a1, i1
      
         GET                   D2aa (a,i,a1,i1)
         t2aiai (a1,i1,a,i)  = D2aa (a,i,a1,i1)
         t3aiai (a1,i,a,i1)  = D2aa (a,i,a1,i1)
         t4aiai (a,i1,a1,i)  = D2aa (a,i,a1,i1)
         t3aiai (a1,i,a,i1) *= -1.0 
         t4aiai (a,i1,a1,i) *= -1.0
         
         PREPARE  XI2_AA (a,i,a1,i1) += D2aa   (a,i,a1,i1)
         PREPARE  XI2_AA (a1,i1,a,i) += T2aiai (a1,i1,a,i)
         PREPARE  XI2_AA (a1,i,a,i1) += T3aiai (a1,i,a,i1)
         PREPARE  XI2_AA (a,i1,a1,i) += T4aiai (a,i1,a1,i)

      ENDPARDO  a, i, a1, i1

      PARDO  b, j, b1, j1
      
         GET                   D2bb (b,j,b1,j1)
         t2bjbj (b1,j1,b,j)  = D2bb (b,j,b1,j1)
         t3bjbj (b1,j,b,j1)  = D2bb (b,j,b1,j1)
         t4bjbj (b,j1,b1,j)  = D2bb (b,j,b1,j1)
         t3bjbj (b1,j,b,j1) *= -1.0 
         t4bjbj (b,j1,b1,j) *= -1.0
         
         PREPARE  XI2_BB (b,j,b1,j1) += D2bb   (b,j,b1,j1)
         PREPARE  XI2_BB (b1,j1,b,j) += T2bjbj (b1,j1,b,j)
         PREPARE  XI2_BB (b1,j,b,j1) += T3bjbj (b1,j,b,j1)
         PREPARE  XI2_BB (b,j1,b1,j) += T4bjbj (b,j1,b1,j)
         
      ENDPARDO  b, j, b1, j1

      EXECUTE  SERVER_BARRIER

      DELETE  D2aa
      DELETE  D2bb

      DELETE  R2L2_iijj
      DELETE  R2L2_iiii
      DELETE  R2L2_jjjj
      DELETE  R2G2_iijj
      DELETE  R2G2_iiii
      DELETE  R2G2_jjjj
      DEALLOCATE  LR1W_ai  (*,*)
      DEALLOCATE  LR1W_bj  (*,*)
      DEALLOCATE  LR1W_ii  (*,*)
      DEALLOCATE  LR1W_jj  (*,*)
      DEALLOCATE  LR1W_aa  (*,*)
      DEALLOCATE  LR1W_bb  (*,*)
      DEALLOCATE  LR1L2_ai (*,*)
      DEALLOCATE  LR1L2_bj (*,*)
      DEALLOCATE  LR2L1_ai (*,*)
      DEALLOCATE  LR2L1_bj (*,*)
      DEALLOCATE  LR2W2_ai (*,*)
      DEALLOCATE  LR2W2_bj (*,*)
      DEALLOCATE  LR2W2_aa (*,*)
      DEALLOCATE  LR2W2_bb (*,*)
      DEALLOCATE  LR2W2_ii (*,*)
      DEALLOCATE  LR2W2_jj (*,*)
      DEALLOCATE  LR2L2_aa (*,*)
      DEALLOCATE  LR2L2_bb (*,*)
      DEALLOCATE  LR2L2_ii (*,*)
      DEALLOCATE  LR2L2_jj (*,*)

     #CALL  PRINT_XI_AB
     #CALL  PRINT_XI_AA
     #CALL  PRINT_XI_BB
     #CALL  PRINT_XI
#
#
#     ...ready!
#
#
      ENDPROC  CALC_XI
#------------------------------------------------------------------------





#-------------------------------------------------------------------------

#     -------------
      PROC  DPP_EOM
#     -------------
#
      execute load_balance_on 
#
# VFL 
      PARDO  a, a1

         taa(a,a1) = 0.0 

         DO i
            GET           L1A (i,a1)
            taa1 (a,a1) = St1a (a,i) * L1A (i,a1)
            taa(a,a1)  += taa1(a,a1) 
         ENDDO i

         taa (a,a1)           *= R0
         PUT  DIS_VV1_A (a,a1) += taa (a,a1)
      ENDPARDO  a, a1
#
# VFL 
      PARDO  b, b1

         tbb(b,b1) = 0.0 

         DO j
            GET           L1B (j,b1)
            tbb1 (b,b1) = St1b (b,j) * L1B (j,b1)
            tbb(b,b1)  += tbb1(b,b1) 
         ENDDO j

         tbb (b,b1)           *= R0
         PUT  DIS_VV1_B (b,b1) += tbb (b,b1)
      ENDPARDO  b, b1

      PARDO  i, a
         GET  L1A (i,a)
         tia  (i,a)  = L1A (i,a)
         tia  (i,a) *= R0
         PUT  DIS_OV1_A     (i,a) += tia (i,a)
      ENDPARDO  i, a

      PARDO  j, b
         GET  L1B (j,b) 
         tjb  (j,b)  = L1B (j,b)
         tjb  (j,b) *= R0 
         tjb2 (j,b)  = 0.0
         PUT  DIS_OV1_B     (j,b) += tjb  (j,b)
      ENDPARDO  j, b

         
#VFL 
      PARDO  i, i1
#
         tii(i,i1) = 0.0 

         DO a

            GET  L1A (i1,a)

            tii1 (i,i1)  = St1a (a,i) * L1A (i1,a)
            tii1 (i,i1) *= -1.0
            tii(i,i1) += tii1(i,i1) 

         ENDDO a

            PUT  T1L1_OO_A (i,i1) += tii (i,i1)

            tii (i,i1) *= R0
            PUT  DIS_OO1_A (i,i1) += tii (i,i1)
      ENDPARDO  i, i1

#VFL 
      PARDO  j, j1
#
         tjj(j,j1) = 0.0 

         DO b

            GET  t1b_old (b,j)
            GET  L1B (j1,b)

            tjj1 (j,j1)  = t1b_old (b,j) * L1B (j1,b)
            tjj1 (j,j1) *= -1.0
            tjj(j,j1) += tjj1(j,j1) 

         ENDDO b
 
            PUT  T1L1_OO_B (j,j1) += tjj (j,j1)

            tjj (j,j1) *= R0
            PUT  DIS_OO1_B (j,j1) += tjj (j,j1)
      ENDPARDO  j, j1
#     
#                          -------------------
#                          -                 -
#                          -  ALPHA DENSITY  -
#                          -                 -
#                          -------------------
#
#
#    ===========================================================
#       COMPUTE  OCCUPIED - OCCUPIED  PIECE  TO  THE  DENSITY
#    ===========================================================
#    ALPHA                                                 ALPHA
#    -----                                                 -----
#
#
#
#          ...L  * T  ...
#              2    2
#
#
      PARDO i, a, a1, i2

            REQUEST            T2old_aa (a,i,a1,i2) i
            tpppp(a,i2,a1,i) = T2old_aa (a,i,a1,i2)  
 
            DO i1

               REQUEST  L2AA (i1,a,i2,a1) i1

              #tii (i,i1)  = L2AA (i1,a,i2,a1) * T2old_aa (a,i,a1,i2)
               tii1 (i1,i) = L2AA (i1,a,i2,a1) * tpppp (a,i2,a1,i)
               tii (i,i1)  = tii1(i1,i) 
               tii (i,i1) *= -0.5
               PUT  T2L2_OO_A (i,i1) += tii (i,i1)

               tii (i,i1) *= R0
               PUT  DIS_OO1_A (i,i1) += tii (i,i1)


            ENDDO i1

      ENDPARDO i, a, a1, i2
#
#
#         ...ALPHA-BETA summation...
#
#
      PARDO i, a, b, j

            REQUEST          T2old_ab (a,i,b,j) i
            tpqqp(a,j,b,i) = T2old_ab (a,i,b,j) 

            DO i1

               REQUEST       L2AB (i1,a,j,b) i1

              #tii (i,i1)  = L2AB (i1,a,j,b) * T2old_ab (a,i,b,j)
               tii1(i1,i)  = L2AB (i1,a,j,b) * tpqqp (a,j,b,i)
               tii (i,i1)  = tii1(i1,i) 
               tii (i,i1) *= -1.0
               PUT  T2L2_OO_A (i,i1) += tii (i,i1)

               tii (i,i1) *= R0
               PUT  DIS_OO1_A   (i,i1) += tii (i,i1)

            ENDDO i1

      ENDPARDO  i, a, b, j
#
#
#           ...The other piece to the right moment density...
#
#                 R1 * A1  +  R2 * A2  +  T1 * R1 * A2
#
#      IF  LOGRIGHT == ONE

         PARDO  i, i1, a

               GET  R1A (a,i)
               GET  L1A (i1,a)

               tii  (i,i1)  = R1A (a,i) * L1A (i1,a)
               tii  (i,i1) *= -1.0

               PUT  DIS_OO1_A (i,i1) += tii  (i,i1)
               PUT  R2L2_OO_A (i,i1) += tii  (i,i1)

         ENDPARDO  i, i1, a 
#
#
#
         PARDO  a, a1, i2

            ALLOCATE  laiai4 (a,i2,a1,*)
            ALLOCATE  laiai5 (a,i2,a1,*)

            DO i

               REQUEST               R2AA (a,i,a1,i2) i
               laiai5 (a,i2,a1,i)  = R2AA (a,i,a1,i2)
               laiai5 (a,i2,a1,i) *= 0.5
           
               GET  R1A (a1,i2)
               laiai4 (a,i2,a1,i)  = laiai5 (a,i2,a1,i)
               taiai  (a,i2,a1,i)  = St1a (a,i) ^ R1A (a1,i2)
               laiai4 (a,i2,a1,i) += taiai (a,i2,a1,i)

            ENDDO i

            DO i1

               REQUEST  L2AA (i1,a,i2,a1) i1

               DO i

                  tii1(i1,i)  = L2AA (i1,a,i2,a1) * laiai4 (a,i2,a1,i)
                  tii (i,i1)  = tii1(i1,i)  
                  tii (i,i1) *= -1.0
                  PUT  DIS_OO1_A (i,i1) += tii (i,i1)

                  tii1(i1,i)  = L2AA (i1,a,i2,a1) * laiai5 (a,i2,a1,i)
                  tii (i,i1)  = tii1(i1,i)  
                  tii (i,i1) *= -1.0
                  PUT  R2L2_OO_A (i,i1) += tii (i,i1)

               ENDDO i

            ENDDO i1

            DEALLOCATE  laiai4 (a,i2,a1,*)
            DEALLOCATE  laiai5 (a,i2,a1,*)

         ENDPARDO  a, a1, i2
#
#
#          ...ALPHA-BETA summation...
#
#
         PARDO  a, b, j

            ALLOCATE  lajbi4 (a,j,b,*)
            ALLOCATE  lajbi5 (a,j,b,*)

            DO i
 
               REQUEST            R2AB (a,i,b,j) i
               GET                R1B (b,j)
               lajbi5 (a,j,b,i) = R2AB(a,i,b,j)

               lajbi4 (a,j,b,i)  = lajbi5 (a,j,b,i)
               tpqqp  (a,j,b,i)  = St1a (a,i) ^ R1B (b,j)
               lajbi4 (a,j,b,i) += tpqqp (a,j,b,i)

            ENDDO i

            DO i1

               REQUEST  L2AB (i1,a,j,b) i1

               DO i

                  tii1(i1,i)  = L2AB (i1,a,j,b) * lajbi4 (a,j,b,i)
                  tii (i,i1)  = tii1(i1,i)  
                  tii (i,i1) *= -1.0
                  PUT  DIS_OO1_A (i,i1) += tii (i,i1)

                  tii1(i1,i)  = L2AB (i1,a,j,b) * lajbi5 (a,j,b,i)
                  tii (i,i1)  = tii1(i1,i)  
                  tii (i,i1) *= -1.0
                  PUT  R2L2_OO_A (i,i1) += tii (i,i1)

               ENDDO i

            ENDDO i1

            DEALLOCATE  lajbi5 (a,j,b,*)
            DEALLOCATE  lajbi4 (a,j,b,*)

         ENDPARDO  a, b, j

#      ENDIF  # LOGRIGHT == ONE #
#
#
#
#    ===========================================================
#       COMPUTE  VIRTUAL - VIRTUAL  PIECE  TO  THE  DENSITY
#    ===========================================================
#    ALPHA                                                 ALPHA
#    -----                                                 -----
#
#
#
#
#    ...The following is the T1 * L1 piece...
#
#
#          ...This is the T2 * A2 piece
#
#
      PARDO  a2, a1, i, i1

            REQUEST             L2AA (i,a2,i1,a1) a2
            tpppp(i,a1,i1,a2) = L2AA (i,a2,i1,a1) 

            DO a

               REQUEST       T2old_aa (a,i,a1,i1) a

              #taa (a,a2)  = L2AA (i,a2,i1,a1) * T2old_aa (a,i,a1,i1)
               taa (a,a2)  = T2old_aa (a,i,a1,i1) * tpppp(i,a1,i1,a2)  
               taa (a,a2) *= -0.50
               PUT  T2L2_VV_A (a,a2) += taa (a,a2)

               taa (a,a2) *= R0
               taa (a,a2) *= -1.0
               PUT  DIS_VV1_A (a,a2) += taa (a,a2)

            ENDDO a

      ENDPARDO  a2, a1, i, i1
#
#
#          ...ALPHA-BETA summation...
#
#
      PARDO  a2, b, j, i

            REQUEST           L2AB (i,a2,j,b) a2
            tpqqp(i,b,j,a2) = L2AB (i,a2,j,b) 

            DO a

               REQUEST  T2old_ab (a,i,b,j) a

              #taa (a,a2)  = L2AB (i,a2,j,b) * T2old_ab (a,i,b,j)
               taa (a,a2)  = T2old_ab (a,i,b,j) * tpqqp(i,b,j,a2) 
               taa (a,a2) *= -1.0
               PUT  T2L2_VV_A (a,a2) += taa (a,a2)

               taa (a,a2) *= R0
               taa (a,a2) *= -1.0
               PUT  DIS_VV1_A (a,a2) += taa (a,a2)

            ENDDO a

      ENDPARDO  a2, b, j, i
#
#
#           ...The other piece to the right moment density...
#
#                 R1 * A1  +  R2 * A2  +  T1 * R1 * A2
#
#      IF  LOGRIGHT == ONE

         PARDO  a, a1, i 

               GET  R1A (a,i)
               GET  L1A (i,a1)

               taa (a,a1)  = R1A (a,i) * L1A (i,a1)
               PUT  DIS_VV1_A (a,a1) += taa (a,a1)

               taa (a,a1) *= -1.0
               PUT  R2L2_VV_A (a,a1) += taa (a,a1)

         ENDPARDO  a, a1, i 
#
         PARDO  a1, i, i1

            ALLOCATE  llaiai  (*,i,a1,i1)
            ALLOCATE  laiai2 (*,i,a1,i1)

            GET  R1A (a1,i1)

            DO a

               REQUEST               R2AA (a,i,a1,i1) a

               taiai  (a,i,a1,i1)  = St1a (a,i) ^ R1A (a1,i1)
               llaiai  (a,i,a1,i1)  = R2AA (a,i,a1,i1)
               llaiai  (a,i,a1,i1) *= 0.5
               laiai2 (a,i,a1,i1)  = llaiai (a,i,a1,i1)
               llaiai  (a,i,a1,i1) += taiai (a,i,a1,i1)

            ENDDO a

            DO a2

               REQUEST              L2AA (i,a2,i1,a1) a2
               tpppp(i,a1,i1,a2) =  L2AA (i,a2,i1,a1) 

               DO a

                 #taa  (a,a2) = L2AA (i,a2,i1,a1) * llaiai  (a,i,a1,i1)
                  taa  (a,a2) = llaiai  (a,i,a1,i1) * tpppp(i,a1,i1,a2)  
                  PUT  DIS_VV1_A (a,a2) += taa  (a,a2)

               ENDDO a

               DO a

                 #taa2 (a,a2)  = L2AA (i,a2,i1,a1) * laiai2 (a,i,a1,i1)
                  taa2 (a,a2)  = laiai2 (a,i,a1,i1) * tpppp(i,a1,i1,a2)
                  taa2 (a,a2) *= -1.0
                  PUT  R2L2_VV_A (a,a2) += taa2 (a,a2)

               ENDDO a

            ENDDO a2

            DEALLOCATE  llaiai  (*,i,a1,i1)
            DEALLOCATE  laiai2 (*,i,a1,i1)

         ENDPARDO  a1, i, i1
#
#
#          ...ALPHA-BETA summation...
#
#
         PARDO  b, j, i

            ALLOCATE  laibj  (*,i,b,j)
            ALLOCATE  laibj2 (*,i,b,j)

            GET  R1B (b,j)

            DO a

               REQUEST            R2AB (a,i,b,j) a
               laibj2 (a,i,b,j) = R2AB (a,i,b,j)

               laibj (a,i,b,j)  = laibj2 (a,i,b,j)
               taibj (a,i,b,j)  = St1a (a,i) ^ R1B (b,j)
               laibj (a,i,b,j) += taibj (a,i,b,j)

            ENDDO a

            DO a2

               REQUEST            L2AB (i,a2,j,b) a2
               tpqqp(i,b,j,a2) =  L2AB (i,a2,j,b) 

               DO a

                 #taa  (a,a2) = L2AB (i,a2,j,b) * laibj  (a,i,b,j)
                  taa  (a,a2) = laibj  (a,i,b,j) * tpqqp(i,b,j,a2) 
                  PUT  DIS_VV1_A (a,a2) += taa  (a,a2)

                 #taa2 (a,a2)  = L2AB (i,a2,j,b) * laibj2 (a,i,b,j)
                  taa2 (a,a2)  = laibj2 (a,i,b,j) * tpqqp(i,b,j,a2) 
                  taa2 (a,a2) *= -1.0
                  PUT  R2L2_VV_A (a,a2) += taa2 (a,a2)

               ENDDO a

            ENDDO a2

            DEALLOCATE  laibj  (*,i,b,j)
            DEALLOCATE  laibj2 (*,i,b,j)

         ENDPARDO  b, j, i

#      ENDIF  # LOGRIGHT == ONE #
#
#
#
#          ------------------------------------------------
#                          !!! IMPORTANT !!!
#          ------------------------------------------------
#
#           The following Occupied - Virtual code computes
#           both the alpha and beta pieces since one needs
#           both to compute the Virtual - Occupied piece.
#
#          ------------------------------------------------
#          ------------------------------------------------
#
#
#    ===========================================================
#       COMPUTE  OCCUPIED - VIRTUAL  PIECE  TO  THE  DENSITY
#    ===========================================================
#    ALPHA                                                 ALPHA
#    -----                                                 -----
#
#
#
#
#
#      IF  LOGRIGHT == ONE

         PARDO  i, a, a1, i1

            REQUEST                     L2AA (i,a,i1,a1) i1
            GET                         R1A  (a1,i1)
            tia (i,a)                 = L2AA (i,a,i1,a1) * R1A (a1,i1)
            PUT  DIS_OV1_A     (i,a) += tia (i,a)
            PUT  DENS_INT_OV_A (i,a) += tia (i,a)
    
         ENDPARDO  i, a, a1, i1

         PARDO  i, a, b, j

            REQUEST                     L2AB (i,a,j,b) j
            GET                         R1B  (b,j)
            tia (i,a)                 = L2AB (i,a,j,b) * R1B (b,j)
            PUT  DIS_OV1_A     (i,a) += tia (i,a)
            PUT  DENS_INT_OV_A (i,a) += tia (i,a)

         ENDPARDO i, a, b, j

#      ENDIF  # LOGRIGHT == ONE #
#
#
#
#    ===========================================================
#       COMPUTE  OCCUPIED - VIRTUAL  PIECE  TO  THE  DENSITY
#    ===========================================================
#    BETA                                                   BETA
#    ----                                                   ----
#

#      IF  LOGRIGHT == ONE

         PARDO  j, b

            tjb(j,b) = 0.0 

            DO b1
               DO j1

                  REQUEST                     L2BB (j,b,j1,b1) j1
                  GET                         R1B (b1,j1)
                  tjb1 (j,b)                = L2BB (j,b,j1,b1) * R1B (b1,j1)
                  tjb(j,b)                 += tjb1(j,b) 

               ENDDO j1
            ENDDO b1

            PUT  DIS_OV1_B     (j,b) += tjb (j,b)
            PUT  DENS_INT_OV_B (j,b) += tjb (j,b)

         ENDPARDO  j, b

         PARDO  j, b

            tjb(j,b) = 0.0 

            DO a
               DO i

                  REQUEST      L2AB (i,a,j,b) i
                  GET          R1A (a,i)
                  tjb1 (j,b) = L2AB (i,a,j,b) * R1A (a,i)
                  tjb(j,b)  += tjb1(j,b) 

               ENDDO i
            ENDDO a

            PUT  DIS_OV1_B     (j,b) += tjb (j,b)
            PUT  DENS_INT_OV_B (j,b) += tjb (j,b)

         ENDPARDO  j, b

#      ENDIF  # LOGRIGHT == ONE #

      EXECUTE  SERVER_BARRIER
#
#
#
#    ===========================================================
#       COMPUTE  VIRTUAL - OCCUPIED  PIECE  TO  THE  DENSITY
#    ===========================================================
#    ALPHA                                                 ALPHA
#    -----                                                 -----
#
#
#          ...Evaluate the R0 contribution...
#
#
# VFL 
      PARDO  a, i

         tai1(a,i) = 0.0 

         DO i1 

            GET  T1L1_OO_A (i,i1)
            GET  T2L2_OO_A (i,i1)

            tii (i,i1)  = T1L1_OO_A (i,i1)
            tii (i,i1) += T2L2_OO_A (i,i1)

            tai (a,i)   = St1a (a,i1) * tii (i,i1)

            tai1(a,i) += tai(a,i) 

         ENDDO i1 

        #IF GROUNDSTATE == ONE
        #   tai1 (a,i)  += St1a (a,i)
        #ENDIF

         tai1 (a,i)  *= R0
         PUT  DIS_VO1_A (a,i) = tai1 (a,i)

      ENDPARDO  a, i 

      EXECUTE  SIP_BARRIER
#
#
      PARDO  a, a1, i

            GET                     T2L2_VV_A (a,a1)
            tai (a,i)             = T2L2_VV_A (a,a1) * St1a (a1,i)
            tai (a,i)            *= R0
            PUT  DIS_VO1_A (a,i) += tai (a,i)

      ENDPARDO  a, a1, i
#
#
      PARDO  a1, i1

         GET  L1A (i1,a1)

         DO a
            DO i
               REQUEST                 T2old_aa (a,i,a1,i1) i
               tai  (a,i)            = T2old_aa (a,i,a1,i1) * L1A (i1,a1)
               tai  (a,i)           *= R0
               PUT  DIS_VO1_A (a,i) += tai (a,i)
            ENDDO i
         ENDDO a

      ENDPARDO  a1, i1

      PARDO  b, j

         GET  L1B (j,b)

         DO a
            DO i
               REQUEST                 T2old_ab (a,i,b,j) i
               tai  (a,i)            = T2old_ab (a,i,b,j) * L1B (j,b)
               tai  (a,i)           *= R0
               PUT  DIS_VO1_A (a,i) += tai (a,i)
            ENDDO i
         ENDDO a

      ENDPARDO  b, j
#
#
#      IF LOGRIGHT == ONE

       PARDO  a1, i1

            GET  DENS_INT_OV_A (i1,a1)
            tia (i1,a1) = DENS_INT_OV_A (i1,a1)

            DO a
               DO i
                  REQUEST  T2old_aa (a,i,a1,i1) i
                  tai (a,i) = T2old_aa (a,i,a1,i1) * tia (i1,a1)
                  PUT  DIS_VO1_A (a,i) += tai (a,i)
               ENDDO i
            ENDDO a

         ENDPARDO  a1, i1

         PARDO  b, j
      
            GET  DENS_INT_OV_B (j,b)
            tjb (j,b) = DENS_INT_OV_B (j,b)
   
            DO a
               DO i
                  REQUEST  T2old_ab (a,i,b,j) i
                  tai (a,i)    = T2old_ab (a,i,b,j) * tjb (j,b)
                  PUT  DIS_VO1_A (a,i) += tai (a,i)
               ENDDO i
            ENDDO a
            
         ENDPARDO  b, j
#
         PARDO  i, i1

            tii(i,i1) = 0.0 
            DO a1  
               GET           DENS_INT_OV_A (i1,a1)
               tia (i1,a1) = DENS_INT_OV_A (i1,a1)
               tii1 (i,i1) = St1a (a1,i) * tia (i1,a1)
               tii(i,i1) += tii1(i,i1) 
            ENDDO a1  

               DO a
                  tai (a,i)             = St1a (a,i1) * tii (i,i1)
                  tai (a,i)            *= -1.0
                  PUT  DIS_VO1_A (a,i) += tai (a,i)
               ENDDO a

         ENDPARDO  i, i1
#
         PARDO  a1, i1

            GET  L1A (i1,a1)

            DO a
               DO i
                  REQUEST                 R2AA (a,i,a1,i1) i
                  tai (a,i)             = R2AA (a,i,a1,i1) * L1A (i1,a1)
                  PUT  DIS_VO1_A (a,i) += tai (a,i)
               ENDDO i
            ENDDO a

         ENDPARDO  a1, i1

         PARDO  b, j

            GET  L1B (j,b)

            DO a
               DO i
                  REQUEST                 R2AB (a,i,b,j) i
                  tai (a,i)             = R2AB (a,i,b,j) * L1B (j,b)
                  PUT  DIS_VO1_A (a,i) += tai (a,i)
               ENDDO i
            ENDDO a

         ENDPARDO  b, j
# 
         PARDO  i, a, a1 

               GET  R2L2_VV_A (a,a1)
               GET  T2L2_VV_A (a,a1)
               GET  R1A (a1,i)
               tai  (a,i)  = R2L2_VV_A (a,a1) * St1a (a1,i)
               tai2 (a,i)  = T2L2_VV_A (a,a1) * R1A (a1,i)
               tai  (a,i) += tai2 (a,i)
               PUT  DIS_VO1_A (a,i) += tai (a,i)

         ENDPARDO i, a, a1  
#
         PARDO i, a, i1  

               GET  R1A (a,i1)
               GET  R2L2_OO_A (i,i1)
               GET  T2L2_OO_A (i,i1)
               tai  (a,i)  = St1a (a,i1) * R2L2_OO_A (i,i1)
               tai2 (a,i)  = R1A (a,i1) * T2L2_OO_A (i,i1)
               tai  (a,i) += tai2 (a,i)
               PUT  DIS_VO1_A (a,i) += tai (a,i)

         ENDPARDO  i, a, i1  
#
        #IF EXCITESTATE == ZERO
        #   PARDO  a, i
        #      GET  R1A (a,i)
        #      tai (a,i) = R1A (a,i)
        #      PUT  DIS_VO1_A (a,i) += tai (a,i)
        #   ENDPARDO  a, i
        #ENDIF

        #IF EXCITESTATE == ONE
            PARDO  a, i
               tai (a,i) = St1a (a,i)
               PUT  DIS_VO1_A (a,i) += tai (a,i)
            ENDPARDO  a, i
        #ENDIF


#      ENDIF  # LOGRIGHT = ONE #

      EXECUTE  SIP_BARRIER
#
#
#     
#                          ------------------
#                          -                -
#                          -  BETA DENSITY  -
#                          -                -
#                          ------------------
#     
#
#
#
#    ===========================================================
#       COMPUTE  OCCUPIED - OCCUPIED  PIECE  TO  THE  DENSITY
#    ===========================================================
#    BETA                                                   BETA
#    ----                                                   ----
#
#
#
#
#
      PARDO  j, b, b1, j2

            REQUEST            T2old_bb (b,j,b1,j2) j
            tqqqq(b,j2,b1,j) = T2old_bb (b,j,b1,j2) 
 
            DO j1

               REQUEST  L2BB (j1,b,j2,b1) j1

              #tjj (j,j1)  = L2BB (j1,b,j2,b1) * T2old_bb (b,j,b1,j2)
               tjj1(j1,j)  = L2BB (j1,b,j2,b1) * tqqqq (b,j2,b1,j)
               tjj (j,j1)  = tjj1(j1,j)  
               tjj (j,j1) *= -0.5
               PUT  T2L2_OO_B (j,j1) += tjj (j,j1)

               tjj (j,j1) *= R0
               PUT  DIS_OO1_B (j,j1) += tjj (j,j1)

            ENDDO j1

      ENDPARDO  j, b, b1, j2
#
#
#          ...ALPHA-BETA summation...
#
#
      PARDO  j1, a, b, i

            REQUEST  L2AB (i,a,j1,b) j1
            tqppq(j1,a,i,b) = L2AB (i,a,j1,b) 

            DO j

               REQUEST  T2old_ab (a,i,b,j) j

              #tjj (j,j1)  = L2AB (i,a,j1,b) * T2old_ab (a,i,b,j)
               tjj1(j1,j)  = tqppq (j1,a,i,b) * T2old_ab (a,i,b,j)
               tjj (j,j1)  = tjj1(j1,j)  
               tjj (j,j1) *= -1.0
               PUT  T2L2_OO_B (j,j1) += tjj (j,j1)

               tjj (j,j1) *= R0
               PUT  DIS_OO1_B (j,j1) += tjj (j,j1)

            ENDDO j

      ENDPARDO  j1, a, b, i
#
#
#           ...The other piece to the right moment density...
#
#                 R1 * A1  +  R2 * A2  +  T1 * R1 * A2
#
#      IF  LOGRIGHT == ONE

         PARDO  j, j1

            tjj (j,j1) = 0.0

            DO b

               GET  R1B (b,j)
               GET  L1B (j1,b)

               tjj1 (j,j1)  = R1B (b,j) * L1B (j1,b)
               tjj (j,j1) += tjj1(j,j1) 

            ENDDO b

            tjj (j,j1) *= -1.0
            PUT  DIS_OO1_B (j,j1) += tjj (j,j1)
            PUT  R2L2_OO_B (j,j1) += tjj (j,j1)
   
         ENDPARDO  j, j1
#
         PARDO  b, b1, j2

            ALLOCATE  lbjbj4 (b,j2,b1,*)
            ALLOCATE  lbjbj5 (b,j2,b1,*)

            DO j

               REQUEST               R2BB (b,j,b1,j2) j
               lbjbj5 (b,j2,b1,j)  = R2BB (b,j,b1,j2)
               lbjbj5 (b,j2,b1,j) *= 0.5
           
               GET  t1b_old (b,j)
               GET  R1B (b1,j2)
               lbjbj4 (b,j2,b1,j)  = lbjbj5 (b,j2,b1,j)
               tbjbj  (b,j2,b1,j)  = t1b_old (b,j) ^ R1B (b1,j2)
               lbjbj4 (b,j2,b1,j) += tbjbj (b,j2,b1,j)

            ENDDO j

            DO j1

               REQUEST  L2BB (j1,b,j2,b1) j1

               DO j

                  tjj1(j1,j)  = L2BB (j1,b,j2,b1) * lbjbj4 (b,j2,b1,j)
                  tjj (j,j1)  = tjj1(j1,j)  
                  tjj (j,j1) *= -1.0
                  PUT  DIS_OO1_B (j,j1) += tjj (j,j1)

                  tjj1(j1,j) = L2BB (j1,b,j2,b1) * lbjbj5 (b,j2,b1,j)
                  tjj (j,j1)  = tjj1(j1,j)  
                  tjj (j,j1) *= -1.0
                  PUT  R2L2_OO_B (j,j1) += tjj (j,j1)

               ENDDO j

            ENDDO j1

            DEALLOCATE  lbjbj4 (b,j2,b1,*)
            DEALLOCATE  lbjbj5 (b,j2,b1,*)

         ENDPARDO  b, b1, j2
#
#
#          ...ALPHA-BETA summation...
#
#
         PARDO  a, b, i

            ALLOCATE  laibj2 (a,i,b,*)
            ALLOCATE  laibj3 (a,i,b,*)

            DO j
 
               REQUEST            R2AB (a,i,b,j) j
               laibj3 (a,i,b,j) = R2AB(a,i,b,j)

               GET  t1b_old (b,j)  
               GET  R1A (a,i)
               laibj2 (a,i,b,j)  = laibj3 (a,i,b,j)
               taibj  (a,i,b,j)  = t1b_old (b,j) ^ R1A (a,i)
               laibj2 (a,i,b,j) += taibj (a,i,b,j)

            ENDDO j

            DO j1

               REQUEST            L2AB (i,a,j1,b) j1
               tqppq(j1,a,i,b) =  L2AB (i,a,j1,b) 

               DO j

                 #tjj (j,j1)  = L2AB (i,a,j1,b) * laibj2 (a,i,b,j)
                  tjj1(j1,j)  = tqppq(j1,a,i,b) * laibj2 (a,i,b,j)
                  tjj (j,j1)  = tjj1(j1,j) 
                  tjj (j,j1) *= -1.0
                  PUT  DIS_OO1_B (j,j1) += tjj (j,j1)

                 #tjj (j,j1)  = L2AB (i,a,j1,b) * laibj3 (a,i,b,j)
                  tjj1(j1,j)  = tqppq(j1,a,i,b)  * laibj3 (a,i,b,j)
                  tjj (j,j1)  = tjj1(j1,j) 
                  tjj (j,j1) *= -1.0
                  PUT  R2L2_OO_B (j,j1) += tjj (j,j1)

               ENDDO j

            ENDDO j1

            DEALLOCATE  laibj3 (a,i,b,*)
            DEALLOCATE  laibj2 (a,i,b,*)

         ENDPARDO  a, b, i

#      ENDIF  # LOGRIGHT == ONE #
#
#
#
#    ===========================================================
#       COMPUTE  VIRTUAL - VIRTUAL  PIECE  TO  THE  DENSITY
#    ===========================================================
#    BETA                                                   BETA
#    ----                                                   ----
#
#
#
      PARDO  b1, b2, j, j1

            REQUEST             L2BB (j,b1,j1,b2) b1
            tqqqq(j,b2,j1,b1) = L2BB (j,b1,j1,b2) 

            DO b

               REQUEST       T2old_bb (b,j,b2,j1) b

              #tbb (b,b1)  = L2BB (j,b1,j1,b2) * T2old_bb (b,j,b2,j1)
               tbb (b,b1)  = T2old_bb (b,j,b2,j1) * tqqqq(j,b2,j1,b1) 
               tbb (b,b1) *= -0.50
               PUT  T2L2_VV_B (b,b1) += tbb (b,b1)

               tbb (b,b1) *= R0
               tbb (b,b1) *= -1.0
               PUT  DIS_VV1_B (b,b1) += tbb (b,b1)

            ENDDO b

      ENDPARDO b1, b2, j, j1
#
#
#          ...ALPHA-BETA summation...
#
#
      PARDO  b, a, j, i

            REQUEST  T2old_ab (a,i,b,j) b
           #REQUEST  T2old_ab (b,j,a,i) b
            tqppq(b,i,a,j) = T2old_ab (a,i,b,j) 

            DO b1

               REQUEST  L2AB (i,a,j,b1) b1

              #tbb (b,b1)  = L2AB (i,a,j,b1) * T2old_ab (a,i,b,j)
               tbb (b,b1)  = tqppq(b,i,a,j) * L2AB (i,a,j,b1) 
               tbb (b,b1) *= -1.0
               PUT  T2L2_VV_B (b,b1) += tbb (b,b1)

               tbb (b,b1) *= R0
               tbb (b,b1) *= -1.0
               PUT  DIS_VV1_B (b,b1) += tbb (b,b1)

            ENDDO b1

      ENDPARDO  b, a, j, i
#
#
#           ...The other piece to the right moment density...
#
#                 R1 * A1  +  R2 * A2  +  T1 * R1 * A2
#
#      IF  LOGRIGHT == ONE

         PARDO  b, b1

            tbb (b,b1) = 0.0

            DO j

               GET  R1B (b,j)
               GET  L1B (j,b1)

               tbb1 (b,b1)  = R1B (b,j) * L1B (j,b1)
               tbb(b,b1)   += tbb1(b,b1) 

            ENDDO j

            PUT  DIS_VV1_B (b,b1) += tbb (b,b1)

            tbb (b,b1) *= -1.0
            PUT  R2L2_VV_B (b,b1) += tbb (b,b1)

         ENDPARDO  b, b1
#
#
         PARDO  b1, j, j1

            ALLOCATE  llbjbj  (*,j,b1,j1)
            ALLOCATE  lbjbj2 (*,j,b1,j1)

            GET  R1B (b1,j1)

            DO b

               REQUEST               R2BB (b,j,b1,j1) b
               GET                   t1b_old (b,j)

               tbjbj  (b,j,b1,j1)  = t1b_old (b,j) ^ R1B (b1,j1)
               llbjbj  (b,j,b1,j1)  = R2BB (b,j,b1,j1)
               llbjbj  (b,j,b1,j1) *= 0.5
               lbjbj2 (b,j,b1,j1)  = llbjbj (b,j,b1,j1)
               llbjbj  (b,j,b1,j1) += tbjbj (b,j,b1,j1)

            ENDDO b

            DO b2

               REQUEST             L2BB (j,b2,j1,b1) b2
               tqqqq(j,b1,j1,b2) = L2BB (j,b2,j1,b1) 

               DO b

                 #tbb  (b,b2) = L2BB (j,b2,j1,b1) * llbjbj  (b,j,b1,j1)
                  tbb  (b,b2) = llbjbj  (b,j,b1,j1) * tqqqq(j,b1,j1,b2)  
                  PUT  DIS_VV1_B (b,b2) += tbb (b,b2)

               ENDDO b

               DO b

                 #tbb2 (b,b2)  = L2BB (j,b2,j1,b1) * lbjbj2 (b,j,b1,j1)
                  tbb2 (b,b2)  = lbjbj2 (b,j,b1,j1) * tqqqq(j,b1,j1,b2)
                  tbb2 (b,b2) *= -1.0
                  PUT  R2L2_VV_B (b,b2) += tbb2 (b,b2)

               ENDDO b

            ENDDO b2

            DEALLOCATE  llbjbj  (*,j,b1,j1)
            DEALLOCATE  lbjbj2 (*,j,b1,j1)

         ENDPARDO  b1, j, j1
#
#
#          ...ALPHA-BETA summation...
#
#
         PARDO  a, j, i

            ALLOCATE  lbiaj  (*,i,a,j)
            ALLOCATE  lbiaj2 (*,i,a,j)

            GET  R1A (a,i)

            DO b

               REQUEST            R2AB (a,i,b,j) b
               GET                t1b_old (b,j)
               lbiaj2 (b,i,a,j) = R2AB (a,i,b,j)

               lbiaj (b,i,a,j)  = R2AB (a,i,b,j)
               tqppq (b,i,a,j)  = R1A (a,i) ^ t1b_old (b,j)
               lbiaj (b,i,a,j) += tqppq (b,i,a,j)

            ENDDO b

            DO b2

               REQUEST  L2AB (i,a,j,b2) b2

               DO b

                  tbb  (b,b2) = lbiaj (b,i,a,j) * L2AB (i,a,j,b2) 
                  PUT  DIS_VV1_B (b,b2) += tbb  (b,b2)

                  tbb2 (b,b2)  = lbiaj2 (b,i,a,j) * L2AB (i,a,j,b2)
                  tbb2 (b,b2) *= -1.0
                  PUT  R2L2_VV_B (b,b2) += tbb2 (b,b2)

               ENDDO b

            ENDDO b2

            DEALLOCATE  lbiaj  (*,i,a,j)
            DEALLOCATE  lbiaj2 (*,i,a,j)

         ENDPARDO  a, j, i

#      ENDIF  # LOGRIGHT = ONE #

      EXECUTE  SERVER_BARRIER
#
#
#    ===========================================================
#       COMPUTE  OCCUPIED - VIRTUAL  PIECE  TO  THE  DENSITY
#    ===========================================================
#    BETA                                                   BETA
#    ----                                                   ----
#
#                Remember, this was already computed
#                during the alpha part above.
#    -----------------------------------------------------------
#
#
#
#    ===========================================================
#       COMPUTE  VIRTUAL - OCCUPIED  PIECE  TO  THE  DENSITY
#    ===========================================================
#    BETA                                                   BETA
#    ----                                                   ----
#
#
#          ...Evaluate the R0 contribution...
#
#
#VFL
      PARDO  b, j 

         tbj2(b,j) = 0.0 

         DO j1 

            GET  t1b_old (b,j1)
            GET  T1L1_OO_B (j,j1)
            GET  T2L2_OO_B (j,j1)

            tjj (j,j1)  = T1L1_OO_B (j,j1)
            tjj (j,j1) += T2L2_OO_B (j,j1)

            tbj (b,j)   = t1b_old (b,j1) * tjj (j,j1)

            tbj2(b,j) += tbj(b,j) 

         ENDDO j1 

        #IF GROUNDSTATE == ONE
        #   GET  t1b_old (b,j)
        #   tbj2 (b,j)  += t1b_old (b,j)
        #ENDIF

         tbj2 (b,j)  *= R0

         PUT  DIS_VO1_B (b,j) = tbj2(b,j)

      ENDPARDO  b, j 

      EXECUTE  SIP_BARRIER
#
      PARDO  b, b1, j

            GET  t1b_old (b1,j)
            GET  T2L2_VV_B (b,b1)

            tbj (b,j)  = T2L2_VV_B (b,b1) * t1b_old (b1,j)
            tbj (b,j) *= R0

            PUT  DIS_VO1_B (b,j) += tbj (b,j)

      ENDPARDO  b, b1, j
#
      PARDO  b1, j1

         GET  L1B (j1,b1)

         DO b
            DO j
               REQUEST  T2old_bb (b,j,b1,j1) j
               tbj  (b,j)  = T2old_bb (b,j,b1,j1) * L1B (j1,b1)
               tbj  (b,j) *= R0
               PUT  DIS_VO1_B (b,j) += tbj (b,j)
            ENDDO j
         ENDDO b

      ENDPARDO  b1, j1

      PARDO  i, a

         GET  L1A (i,a)

         DO b
            DO j
               REQUEST  T2old_ab (a,i,b,j) j
               tbj  (b,j)  = T2old_ab (a,i,b,j) * L1A (i,a)
               tbj  (b,j) *= R0
               PUT  DIS_VO1_B (b,j) += tbj (b,j)
            ENDDO j
         ENDDO b

      ENDPARDO  i, a
#
#      IF LOGRIGHT == ONE

         PARDO  b1, j1

            GET            DENS_INT_OV_B (j1,b1)
            tjb  (j1,b1) = DENS_INT_OV_B (j1,b1)
   
            DO b
               DO j
                  REQUEST  T2old_bb (b,j,b1,j1) j
                  tbj (b,j) = T2old_bb (b,j,b1,j1) * tjb (j1,b1)
                  PUT  DIS_VO1_B (b,j) += tbj (b,j)
               ENDDO j
            ENDDO b

         ENDPARDO  b1, j1

         PARDO  a, i

            GET          DENS_INT_OV_A (i,a)
            tia  (i,a) = DENS_INT_OV_A (i,a)

            DO b
               DO j
                  REQUEST  T2old_ab (a,i,b,j) j
                  tbj (b,j)    = T2old_ab (a,i,b,j) * tia (i,a)
                  PUT  DIS_VO1_B (b,j) += tbj (b,j)
               ENDDO j
            ENDDO b

         ENDPARDO  a, i
#
#
#
#
#
         PARDO  b1, j1

            GET            DENS_INT_OV_B (j1,b1)
            tjb  (j1,b1) = DENS_INT_OV_B (j1,b1)

            DO j
               GET  t1b_old (b1,j)
               tjj (j,j1) = t1b_old (b1,j) * tjb (j1,b1)
               DO b
                  GET  t1b_old (b,j1)
                  tbj (b,j)  = t1b_old (b,j1) * tjj (j,j1)
                  tbj (b,j) *= -1.0
                  PUT  DIS_VO1_B (b,j) += tbj (b,j)
               ENDDO b
            ENDDO j

         ENDPARDO  b1, j1
#
#
#
#
#
         PARDO  b1, j1

            GET  L1B (j1,b1)

            DO b
               DO j
                  REQUEST  R2BB (b,j,b1,j1) j
                  tbj (b,j) = R2BB (b,j,b1,j1) * L1B (j1,b1)
                  PUT  DIS_VO1_B (b,j) += tbj (b,j)
               ENDDO j
            ENDDO b

         ENDPARDO  b1, j1
#
#
#
#
#
         PARDO  i, a

            GET  L1A (i,a)

            DO b
               DO j
                  REQUEST  R2AB (a,i,b,j) j
                  tbj (b,j) = R2AB (a,i,b,j) * L1A (i,a)
                  PUT  DIS_VO1_B (b,j) += tbj (b,j)
               ENDDO j
            ENDDO b

         ENDPARDO  i, a
#
#
#
#
#
         PARDO j, b, b1  

               GET  R2L2_VV_B (b,b1)
               GET  T2L2_VV_B (b,b1)
               GET  R1B (b1,j)
               GET  t1b_old (b1,j)
               tbj  (b,j)  = R2L2_VV_B (b,b1) * t1b_old (b1,j)
               tbj2 (b,j)  = T2L2_VV_B (b,b1) * R1B (b1,j)
               tbj  (b,j) += tbj2 (b,j)
#
               PUT  DIS_VO1_B (b,j) += tbj (b,j)

         ENDPARDO j, b, b1  
#
         PARDO  j, b, j1  

               GET  R1B (b,j1)
               GET  t1b_old (b,j1)
               GET  R2L2_OO_B (j,j1)
               GET  T2L2_OO_B (j,j1)
               tbj  (b,j)  = t1b_old (b,j1) * R2L2_OO_B (j,j1)
               tbj2 (b,j)  = R1B (b,j1) * T2L2_OO_B (j,j1)
               tbj  (b,j) += tbj2 (b,j)
               PUT  DIS_VO1_B (b,j) += tbj (b,j)
   
         ENDPARDO j, b, j1  
#
        #IF EXCITESTATE == ZERO
        #   PARDO  b, j
        #      GET  R1B (b,j)
        #      tbj (b,j) = R1B (b,j)
        #      PUT  DIS_VO1_B (b,j) += tbj (b,j)
        #   ENDPARDO  b, j
        #ENDIF

        #IF EXCITESTATE == ONE
            PARDO  b, j
               GET  t1b_old (b,j)
               tbj (b,j) = t1b_old (b,j)
               PUT  DIS_VO1_B (b,j) += tbj (b,j)
            ENDPARDO  b, j
        #ENDIF

#      ENDIF  # LOGRIGHT == ONE #

      EXECUTE  SERVER_BARRIER
#
#
#
#          ...ready!
#
      execute load_balance_off 
      EXECUTE  SERVER_BARRIER
#
      ENDPROC  DPP_EOM
#-------------------------------------------------------------------------






#-------------------------------------------------------------------------
#
#    ---------------------------
      PROC  BACK_TRANS_COMP_DIP
#    ---------------------------
#
#
#          ...Zero out the necessary arrays...
#
#
      tmpnuc = 0.0
      DO jatom
         tmpnuc = tmpnuc + 1.0
      ENDDO jatom
               
      dipnucx = tmpnuc
      dipnucy = dipnucx
      dipnucz = dipnucy
      
      EXECUTE  NUC_DIPOLE_MOMENT  ONE    dipnucx
      EXECUTE  NUC_DIPOLE_MOMENT  TWO    dipnucy
      EXECUTE  NUC_DIPOLE_MOMENT  THREE  dipnucz

      PARDO mu, nu
         txx (mu,nu)          = 0.0
         PUT  AO_DENS (mu,nu) = txx (mu,nu)
      ENDPARDO  mu, nu

      EXECUTE  SIP_BARRIER
#
#
#          ...Do the transformation...
#
#
      PARDO  mu, nu
         GET                     DHF (mu,nu)
         txx (mu,nu)           = DHF (mu,nu)
         PUT  AO_DENS (mu,nu) += txx (mu,nu)
      ENDPARDO  mu, nu

      PARDO  i, i1
         GET  Dij_a (i,i1)
         DO mu 
            txi  (mu,i1) = Dij_a (i,i1) * CA (mu,i)
            DO nu
               txx  (mu,nu) = txi (mu,i1) * CA (nu,i1)
               PUT  AO_DENS (mu,nu) += txx  (mu,nu)
            ENDDO nu
         ENDDO mu
      ENDPARDO  i, i1

      PARDO  j, j1
         GET  Dij_b (j,j1)
         DO mu
            txj  (mu,j1) = Dij_b (j,j1) * CB (mu,j)
            DO nu
               txx  (mu,nu) = txj (mu,j1) * CB (nu,j1)
               PUT  AO_DENS (mu,nu) += txx  (mu,nu)
            ENDDO nu
         ENDDO mu
      ENDPARDO  j, j1

      PARDO  a, a1
         GET  Dab_a (a,a1)
         DO mu
            txa  (mu,a1) = Dab_a (a,a1) * CA (mu,a)
            DO nu
               txx  (mu,nu) = txa (mu,a1) * CA (nu,a1)
               PUT  AO_DENS (mu,nu) += txx  (mu,nu)
            ENDDO nu
         ENDDO mu
      ENDPARDO  a, a1

      PARDO  b, b1
         GET  Dab_b (b,b1)
         DO mu
            txb  (mu,b1) = Dab_b (b,b1) * CB (mu,b)
            DO nu
               txx  (mu,nu) = txb (mu,b1) * CB (nu,b1)
               PUT  AO_DENS (mu,nu) += txx  (mu,nu)
            ENDDO nu
         ENDDO mu
      ENDPARDO  b, b1

      PARDO  a, i
         GET  Dai (a,i)
         DO mu
            txi (mu,i) = Dai (a,i) * CA (mu,a)
            DO nu
               txx  (mu,nu) = txi (mu,i) * CA (nu,i)
               txx2 (nu,mu) = txx (mu,nu)
               PUT  AO_DENS (mu,nu) += txx  (mu,nu)
               PUT  AO_DENS (nu,mu) += txx2 (nu,mu)
            ENDDO nu
         ENDDO mu
      ENDPARDO  a, i

      PARDO  b, j
         GET  Dbj (b,j)
         DO mu
            txj (mu,j) = Dbj (b,j) * CB (mu,b)
            DO nu
               txx  (mu,nu) = txj (mu,j) * CB (nu,j)
               txx2 (nu,mu) = txx (mu,nu)
               PUT  AO_DENS (mu,nu) += txx  (mu,nu)
               PUT  AO_DENS (nu,mu) += txx2 (nu,mu)
            ENDDO nu
         ENDDO mu
      ENDPARDO  b, j
               
      EXECUTE  SIP_BARRIER
#              
#              
#          ...Contract with X, Y, and Z integrals...
#                 
#              
      etemp1 = 0.0
      etemp2 = 0.0 
      etemp3 = 0.0
         
      sum1 = 0.0 
      sum2 = 0.0
      sum3 = 0.0
               
      PARDO  mu, nu
               
         GET  AO_DENS (mu,nu)
                  
         txx  (mu,nu) = 0.0
         txx2 (mu,nu) = 0.0
         txx3 (mu,nu) = 0.0

         EXECUTE  RETURN_1ST_MOM  txx   ONE
         EXECUTE  RETURN_1ST_MOM  txx2  TWO
         EXECUTE  RETURN_1ST_MOM  txx3  THREE
               
         etemp = AO_DENS (mu,nu) * txx  (mu,nu)
         sum1 += etemp
               
         etemp = AO_DENS (mu,nu) * txx2 (mu,nu)
         sum2 += etemp 

         etemp = AO_DENS (mu,nu) * txx3 (mu,nu)
         sum3 += etemp

      ENDPARDO  mu, nu

      EXECUTE  SIP_BARRIER

      COLLECTIVE  etemp1 += sum1
      COLLECTIVE  etemp2 += sum2
      COLLECTIVE  etemp3 += sum3

      EXECUTE  SIP_BARRIER

      etemp1 *= -1.0
      etemp2 *= -1.0
      etemp3 *= -1.0

      DIP_MOM_X = etemp1
      DIP_MOM_Y = etemp2
      DIP_MOM_Z = etemp3

      DIP_MOM_X += dipnucx
      DIP_MOM_Y += dipnucy
      DIP_MOM_Z += dipnucz

      EXECUTE  SIP_BARRIER

      EXECUTE  PRINT_SCALAR  DIP_MOM_X
      EXECUTE  PRINT_SCALAR  DIP_MOM_Y
      EXECUTE  PRINT_SCALAR  DIP_MOM_Z
#     
#     
#          ...ready!
#
#
      ENDPROC  BACK_TRANS_COMP_DIP
#-------------------------------------------------------------------------







#-------------------------------------------------------------------------
#                                                                        #
#                      \--------------------------/                      #
#                      |    BEGIN MAIN PROGRAM    |                      #
#                      /--------------------------\                      #
#                                                                        #
#-------------------------------------------------------------------------
#                                                                        #
#                                                                        #
#                                                                        #
      idebug = -1.0
      iroot = eom_roots      # always get the last vector!
      root_thresh = eom_tol  # tolerance to distinguish roots
      EXECUTE  PRINT_SCALAR  iroot
      EXECUTE  PRINT_SCALAR  root_thresh

      ONEHALF =  0.5
      ZERO    =  0.0
      ONE     =  1.0
      TWO     =  2.0
      THREE   =  3.0

      CREATE R1A_VECS
      CREATE R1B_VECS
      CREATE L1A_VECS
      CREATE L1B_VECS
      CREATE REE
      CREATE LEE
      CREATE R1A
      CREATE R1B
      CREATE L1A
      CREATE L1B
      CREATE Dia
      CREATE Djb
      CREATE t1a_old
      CREATE t1b_old
      CREATE a1a_old
      CREATE a1b_old
      create HBAR_aa
      create HBAR_bb
      create HBAR_ii
      create HBAR_jj
      CREATE HBAR_ia
      CREATE HBAR_jb

#
# Read two-electron transformed integrals 
# --------------------------------------- 
#
      CALL READ_2EL 
      CALL  TRAN_UHF
      EXECUTE  SERVER_BARRIER
      CREATE  HBAR_ia
      CREATE  HBAR_jb

      CALL  GET_RL_AMPS
      EXECUTE  SERVER_BARRIER
      CALL  HBAR

      DELETE  R1A_VECS
      DELETE  R1B_VECS
      DELETE  L1A_VECS
      DELETE  L1B_VECS
     #DESTROY  R2AA_VECS
     #DESTROY  R2AB_VECS
     #DESTROY  L2AA_VECS
     #DESTROY  L2AB_VECS

#
#
#     To make things numerically stable and avoid
#     multiplication by LRNORM everywhere, it is 
#     much easier to normalize L against R!
#
#
      CALL COMP_LR_NORM
      EXECUTE  SERVER_BARRIER
#    
#
#     To make things numerically stable and avoid
#     multiplication by LRNORM everywhere, it is 
#     much easier to normalize L against R!
#
#
      CALL COMP_LR_NORM
      EXECUTE  SERVER_BARRIER
      
      PARDO  a, i, a1, i1
         REQUEST              L2AA (i,a,i1,a1) a
         tiaia (i,a,i1,a1)  = L2AA (i,a,i1,a1) 
         tiaia (i,a,i1,a1) *= LRNORM
         PREPARE  A2old_aa  (i,a,i1,a1) = tiaia (i,a,i1,a1)
      ENDPARDO  a, i, a1, i1

      PARDO  b, j, b1, j1
         REQUEST              L2BB (j,b,j1,b1) b
         tjbjb (j,b,j1,b1)  = L2BB (j,b,j1,b1)
         tjbjb (j,b,j1,b1) *= LRNORM
         PREPARE  A2old_bb  (j,b,j1,b1) = tjbjb (j,b,j1,b1)
      ENDPARDO  b, j, b1, j1

      PARDO  a, i, b, j
         REQUEST            L2AB (i,a,j,b) a
         tiajb (i,a,j,b)  = L2AB (i,a,j,b)
         tiajb (i,a,j,b) *= LRNORM
         PREPARE  A2old_ab  (i,a,j,b) = tiajb (i,a,j,b)
      ENDPARDO  a, i, b, j

      PARDO  a, i
         GET          L1A (i,a)
         tia (i,a)  = L1A (i,a)
         tia (i,a) *= LRNORM
         PUT  a1a_old  (i,a) = tia (i,a)
      ENDPARDO  a, i

      PARDO  b, j
         GET          L1B (j,b)
         tjb (j,b)  = L1B (j,b)
         tjb (j,b) *= LRNORM
         PUT  a1b_old  (j,b) = tjb (j,b)
      ENDPARDO  b, j

      EXECUTE  SERVER_BARRIER

      PARDO  a, i, a1, i1
         REQUEST              A2old_aa (i,a,i1,a1) a
         tiaia (i,a,i1,a1)  = A2old_aa (i,a,i1,a1)
         PREPARE  L2AA (i,a,i1,a1) = tiaia (i,a,i1,a1)
      ENDPARDO  a, i, a1, i1

      PARDO  b, j, b1, j1
         REQUEST              A2old_bb (j,b,j1,b1) b
         tjbjb (j,b,j1,b1)  = A2old_bb (j,b,j1,b1)
         PREPARE  L2BB (j,b,j1,b1) = tjbjb (j,b,j1,b1)
      ENDPARDO  b, j, b1, j1

      PARDO  a, i, b, j
         REQUEST            A2old_ab (i,a,j,b) a
         tiajb (i,a,j,b)  = A2old_ab (i,a,j,b)
         PREPARE  L2AB (i,a,j,b) = tiajb (i,a,j,b)
      ENDPARDO  a, i, b, j

      PARDO  a, i
         GET          a1a_old (i,a)
         tia (i,a)  = a1a_old (i,a)
         PUT  L1A (i,a) = tia (i,a)
      ENDPARDO  a, i

      PARDO  b, j
         GET          a1b_old (j,b)
         tjb (j,b)  = a1b_old (j,b)
         PUT  L1B (j,b) = tjb (j,b)
      ENDPARDO  b, j

      EXECUTE  SERVER_BARRIER
     #DESTROY  L2AA_NORM
     #DESTROY  L2AB_NORM

      CALL  COMP_LR_NORM
      EXECUTE  SERVER_BARRIER
#
#
#     Now with Hbar and MO integrals, we need to
#     compute Xi and then Zeta for the EOM gradients!
#
#
      CREATE  Niijj
      CREATE  Niiii
      CREATE  Njjjj
      CREATE  VCONV1B
      CREATE  VCACT1B
      CREATE  VCHACT1B
      CREATE  VCONV1A
      CREATE  VCACT1A
      CREATE  VCHACT1A
      CREATE  DDii
      CREATE  DDaa
      CREATE  DDjj
      CREATE  DDbb
      CREATE  VC1B
      CREATE  VCH1B
      CREATE  VTEMP1B
      CREATE  VC1A
      CREATE  VCH1A
      CREATE  VTEMP1A

      EXECUTE  SERVER_BARRIER
         
      CALL CALC_XI
      CALL SOLVE_ZETA
      
      EXECUTE  SIP_BARRIER
      DELETE  Niijj
      DELETE  Niiii
      DELETE  Njjjj
      DELETE  VCONV1B
      DELETE  VCACT1B
      DELETE  VCHACT1B
      DELETE  VCONV1A
      DELETE  VCACT1A
      DELETE  VCHACT1A
      DELETE  DDii
      DELETE  DDaa
      DELETE  DDjj
      DELETE  DDbb
      DELETE  VC1B
      DELETE  VCH1B
      DELETE  VTEMP1B
      DELETE  VC1A
      DELETE  VCH1A
      DELETE  VTEMP1A

     #DELETE  Niijj
     #DELETE  Niiii   
     #DELETE  VCONV1A 
     #DELETE  VCACT1A
     #DELETE  VCHACT1A
#
#     
#     Now form the one and two particle density
#     matrices, including relaxed contribution
#     and contract in to the gradient array!
#     
#     
#
# Create single particle intermediates GAE and GMI and DAB, DIJ arrays 
# ------------------------------------------------------------------------------ 
      CREATE  AO_DENS
      CREATE  DHF
      CREATE  DHFa
      CREATE  DHFb
      CREATE  Dai
      CREATE  Dbj
      CREATE  DIS_OO1_A
      CREATE  DIS_OO1_B
      CREATE  DIS_VV1_A
      CREATE  DIS_VV1_B
      CREATE  DIS_OV1_A
      CREATE  DIS_OV1_B
      CREATE  DIS_VO1_A
      CREATE  DIS_VO1_B
      CREATE  T2L2_VV_A
      CREATE  T2L2_VV_B
      CREATE  R2L2_VV_A
      CREATE  R2L2_VV_B
      CREATE  DENS_INT_OV_A
      CREATE  DENS_INT_OV_B
      CREATE  T1L1_OO_A
      CREATE  T1L1_OO_B
      CREATE  T2L2_OO_A
      CREATE  T2L2_OO_B
      CREATE  R2L2_OO_A
      CREATE  R2L2_OO_B

      CALL CREATE1ARRAY 
      EXECUTE SERVER_BARRIER  
#
#
#     Form the single particle density DAB and DIJ   
# 
#
      CALL DPP_EOM

      EXECUTE  SIP_BARRIER
#
#
#     The contributions are symmetrized here!
#
#         - This can be done in the routine though...
#
#
      PARDO  a, a1
         tpp (a,a1) = 0.0
         PUT  T2L2_VV_A (a,a1) = tpp (a,a1)
      ENDPARDO  a, a1

      PARDO  b, b1
         tqq (b,b1) = 0.0
         PUT  T2L2_VV_B (b,b1) = tqq (b,b1)
      ENDPARDO  b, b1 

      PARDO  a, a1
         GET            DIS_VV1_A (a,a1)
         GET            DIS_VV1_A (a1,a)
         taa  (a,a1)  = DIS_VV1_A (a1,a)
         taa  (a,a1) += DIS_VV1_A (a,a1)
         taa  (a,a1) *= 0.25
         t1aa (a1,a)  = taa (a,a1)
         PUT  Dab_a   (a,a1) += taa  (a,a1)
         PUT  Dab_a   (a1,a) += t1aa (a1,a)
      ENDPARDO  a, a1

      PARDO  b, b1
         GET            DIS_VV1_B (b,b1)
         GET            DIS_VV1_B (b1,b)
         tbb  (b,b1)  = DIS_VV1_B (b1,b)
         tbb  (b,b1) += DIS_VV1_B (b,b1)
         tbb  (b,b1) *= 0.25
         t1bb (b1,b)  = tbb (b,b1)
         PUT  Dab_b   (b,b1) += tbb  (b,b1)
         PUT  Dab_b   (b1,b) += t1bb (b1,b)
      ENDPARDO  b, b1

      PARDO  a, i
         GET          DIS_VO1_A (a,i)
         GET          DIS_OV1_A (i,a)
         tai (a,i)  = DIS_OV1_A (i,a)
         tai (a,i) += DIS_VO1_A (a,i)
         tai (a,i) *= 0.5
         PUT  Dai     (a,i) += tai (a,i)
      ENDPARDO  a, i

      PARDO  b, j
         GET          DIS_VO1_B (b,j)
         GET          DIS_OV1_B (j,b)
         tbj (b,j)  = DIS_OV1_B (j,b)
         tbj (b,j) += DIS_VO1_B (b,j)
         tbj (b,j) *= 0.5
         PUT  Dbj     (b,j) += tbj (b,j)
      ENDPARDO  b, j

      PARDO  i, i1
         tpp (i,i1) = 0.0
         PUT  T1L1_OO_A (i,i1) = tpp (i,i1)
         PUT  T2L2_OO_A (i,i1) = tpp (i,i1)
      ENDPARDO  i, i1

      PARDO  j, j1
         tqq (j,j1) = 0.0
         PUT  T1L1_OO_B (j,j1) = tqq (j,j1)
         PUT  T2L2_OO_B (j,j1) = tqq (j,j1)
      ENDPARDO  j, j1

      PARDO  i, i1
         GET            DIS_OO1_A (i,i1)
         GET            DIS_OO1_A (i1,i)
         tii  (i,i1)  = DIS_OO1_A (i1,i)
         tii  (i,i1) += DIS_OO1_A (i,i1)
         tii  (i,i1) *= 0.25
         t1ii (i1,i)  = tii (i,i1)
         PUT  Dij_a   (i,i1) += tii  (i,i1)
         PUT  Dij_a   (i1,i) += t1ii (i1,i)
      ENDPARDO  i, i1

      PARDO  j, j1
         GET            DIS_OO1_B (j,j1)
         GET            DIS_OO1_B (j1,j)
         tjj  (j,j1)  = DIS_OO1_B (j1,j)
         tjj  (j,j1) += DIS_OO1_B (j,j1)
         tjj  (j,j1) *= 0.25
         t1jj (j1,j)  = tjj (j,j1)
         PUT  Dij_b   (j,j1) += tjj  (j,j1)
         PUT  Dij_b   (j1,j) += t1jj (j1,j)
      ENDPARDO  j, j1

      CALL HFDENS

      EXECUTE  SIP_BARRIER
      
      CALL  BACK_TRANS_COMP_DIP
      
      CALL DAB        
      CALL DIJ        
         
      EXECUTE  SIP_BARRIER
      CALL DOV
         
      CALL  BACK_TRANS_COMP_DIP
      EXECUTE  SERVER_BARRIER
      
      CREATE  I3AA
      CREATE  I3BB
      CREATE  I3AB
      CREATE  I3BA
      CREATE  Dii
      CREATE  Daa
      CREATE  Djj
      CREATE  Dbb
#        
#        
#    Form D = (Z + r  L)
#                   0
#        
#        
      etemp = R0
      IF etemp < 0.0  
         etemp *= -1.0
      ENDIF
         
      IF etemp > 0.00000000001
         PARDO a, a1, i, i1
            REQUEST              L2AA (i,a,i1,a1) a
            tiaia (i,a,i1,a1)  = L2AA (i,a,i1,a1)
            tiaia (i,a,i1,a1) *= R0
            PREPARE  A2old_aa (i,a,i1,a1) += tiaia (i,a,i1,a1)
         ENDPARDO  a, a1, i, i1

         PARDO b, b1, j, j1
            REQUEST              L2BB (j,b,j1,b1) b
            tjbjb (j,b,j1,b1)  = L2BB (j,b,j1,b1)
            tjbjb (j,b,j1,b1) *= R0
            PREPARE  A2old_bb (j,b,j1,b1) += tjbjb (j,b,j1,b1)
         ENDPARDO  b, b1, j, j1

         PARDO a, b, i, j
            REQUEST            L2AB (i,a,j,b) a
            tiajb (i,a,j,b)  = L2AB (i,a,j,b)
            tiajb (i,a,j,b) *= R0
            PREPARE  A2old_ab (i,a,j,b) += tiajb (i,a,j,b)
         ENDPARDO  a, b, i, j

         PARDO  a, i
            GET          L1A (i,a)
            tia (i,a)  = L1A (i,a)
            tia (i,a) *= R0
            PUT  A1A_old (i,a) += tia (i,a)
         ENDPARDO  a, i

         PARDO  b, j
            GET          L1B (j,b)
            tjb (j,b)  = L1B (j,b)
            tjb (j,b) *= R0
            PUT  A1B_old (j,b) += tjb (j,b)
         ENDPARDO  b, j
      ENDIF

      EXECUTE  SERVER_BARRIER

      DELETE  DIS_OO1_A
      DELETE  DIS_OO1_B
      DELETE  DIS_VV1_A
      DELETE  DIS_VV1_B
      DELETE  DIS_OV1_A
      DELETE  DIS_OV1_B
      DELETE  DIS_VO1_A
      DELETE  DIS_VO1_B
      DELETE  T2L2_VV_A
      DELETE  T2L2_VV_B
      DELETE  R2L2_VV_A
      DELETE  R2L2_VV_B
      DELETE  DENS_INT_OV_A
      DELETE  DENS_INT_OV_B
      DELETE  T1L1_OO_A
      DELETE  T1L1_OO_B
      DELETE  T2L2_OO_A          
      DELETE  T2L2_OO_B          
      DELETE  R2L2_OO_A
      DELETE  R2L2_OO_B

#
# Form the Tau arrays and single particle intermediates GAE and GMI  
# -----------------------------------------------------------------  
         CALL TAU 
         CALL GAE 
         CALL GMI 
         execute server_barrier 
#
# Compute contributions to one-particle intermediates from DAB and DIJ 
# -------------------------------------------------------------------- 
         CALL I11 

         CALL  DENS_INTERMEDIATES # Watson
         CALL  EOM_DENS_INT
#
# Form DIJKL 
# ---------- 
         CALL DIJKL_EOM # gamma3 
         CALL DIJKL # gamma3 

         EXECUTE  SERVER_BARRIER
#
# Form DABCD 
# ---------- 
         CALL DABCD # gamma2 
#
# Form DIBJA 
# ---------- 
         CALL DIBJA_EOM # gamma4 
         CALL DIBJA # gamma4 

         EXECUTE  SERVER_BARRIER
#
# Form DIJAB  
# ---------- 
         CALL DIJAB_EOM # gamma1 
         CALL DIJAB # gamma1 
#
# Form DIJKA  
# ---------- 
         CALL DIJKA_EOM # gamma6 
         CALL DIJKA # gamma6 
#
# Form DABCI 
# ---------- 
         CALL DABCI_EOM # gamma5 
         CALL DABCI # gamma5 
#
# Compute 'Direct' contributions to Iab coming from Vabcd  
# ------------------------------------------------------- 
         CALL IABDIRECT 
         execute server_barrier  
         DELETE Dii
         DELETE Daa
         DELETE Djj
         DELETE Dbb

         CALL  I_CONTRIBUTIONS
         CALL  BACK_TRANSFORMS
         EXECUTE  SIP_BARRIER

        # CALL TEMPLATE
#
# Finally solve for Dai iteratively 
# --------------------------------- 
         CALL DAI_SOLVE 
         execute sip_barrier  
#
# Compute the contributions to Iai coming from the Fock matrix 
# ------------------------------------------------------------ 
         CALL IFOCK
         execute sip_barrier

         EXECUTE  PRINT_SCALAR  ZERO
         EXECUTE  PRINT_SCALAR  ZERO
         EXECUTE  PRINT_SCALAR  ZERO
         EXECUTE  PRINT_SCALAR  ZERO
           CALL  PRINT_DIJAB # Watson, works!
           EXECUTE  PRINT_SCALAR  ZERO
           CALL  PRINT_DIJKL # Watson, works!
           EXECUTE  PRINT_SCALAR  ZERO
           CALL  PRINT_DIBJA # Watson, works!
           EXECUTE  PRINT_SCALAR  ZERO
           CALL  PRINT_DIJKA # Watson, works!
           EXECUTE  PRINT_SCALAR  ZERO
           CALL  PRINT_DAIBC # Watson, works!
         EXECUTE  PRINT_SCALAR  ZERO
         EXECUTE  PRINT_SCALAR  ZERO
         EXECUTE  PRINT_SCALAR  ZERO
         EXECUTE  PRINT_SCALAR  ZERO

      #CALL PRINTIIJ   # --> symmetric  
      #CALL PRINTIAB   # --> symmetric  
      #CALL PRINTIIA   # --> symmetric  
      #CALL PRINTIAI   # --> symmetric  
#     CALL SQUAREALL 
#
# Backtransform one-particle intermediates and contract with integral derivatives
# -------------------------------------------------------------------------------
         create Ipq
         create Dpq
         create Dpqa
         create Dpqb
         execute sip_barrier
         CALL I1TRANS
#
# Backtransform one-particle density and contract with integral derivatives
# -------------------------------------------------------------------------
         CALL D1TRANS
#
      EXECUTE  SIP_BARRIER

      PARDO mu, nu
            GET Ipq(mu,nu)
            Tpq(mu,nu)  = Ipq(mu,nu)
            EXECUTE SCONT1 Tpq(mu,nu)
      ENDPARDO mu, nu

      PARDO mu, nu
            GET Dpq(mu,nu)
            GET DHF(mu,nu)
            Tpq(mu,nu)  = Dpq(mu,nu)
            Tpq(mu,nu) += DHF(mu,nu)
            EXECUTE HCONT1 Tpq(mu,nu)
      ENDPARDO mu, nu

      EXECUTE  SIP_BARRIER
#
# Two dens
#
      CALL  PDCONT



      etemp = 13.0
      execute print_rel_info etemp ca 
      execute sip_barrier
#
# Compute squares of each density contribution 
# -------------------------------------------- 
#
#     CALL S2IIJ   # --> symmetric  
#     CALL S2IAB   # --> symmetric  
#
#     CALL S2DIJKL # --> symmetric Matches Aces 
#     CALL S2DABCD # --> symmetric Matches Aces  
#     CALL S2DIBJA # --> symmetric Matches Aces  
#
#     CALL S2DIJKA # --> symmetric Matches Aces  
#     CALL S2ABCI  # --> symmetric Matches Aces  
#     CALL S2DIJAB # --> symmetric Matches Aces  
# 
                    ENDSIAL ONE_GRAD_CO       
# 
# ----------------------------------------------------------------------------------------
#
#
