#  Copyright (c) 2003-2010 University of Florida
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  The GNU General Public License is included in this distribution
#  in the file COPYRIGHT.
#
                           SIAL SCF_UHF_DIIS         
#
# ----------------------------------------------------------------------------
#
# The sial program SIAL_UHF performs a UHF based SCF calculation. Davidson 
# damping is performed during the first scf_beg-1 iterations after which the 
# DIIS is turned on with scf_order. At present DIIS is turned on after the 
# third iteration and 6 histories are kept. 
#
# Fock matrix final arrays:
# ------------------------- 
#
# 1. Fpq_a  
# 2. Fpq_b  
#
# Transformation coefficients final arrays:
# ----------------------------------------- 
#
# 1. Ca  
# 2. Cb  
#
# Converged SCF energy:
# --------------------- 
#
# 1. scfeneg 
#
# BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
#
# Declare indeces 
# --------------- 
#
      index   kiter  = 1, scf_iter  
      index   jiter  = 1, scf_iter  
      index   kptr1  = 1, 2
      index   kptr2  = 1, 2
      index   kone   = 1, 1
#
      aoindex mu     = 1, norb
      aoindex nu     = 1, norb
      aoindex lambda = 1, norb
      aoindex sigma  = 1, norb
#
      moaindex i = baocc, eaocc
      moaindex i1= baocc, eaocc
      moaindex i2= baocc, eaocc
      moaindex i3= baocc, eaocc
#
      moaindex a = bavirt, eavirt
      moaindex a1= bavirt, eavirt
      moaindex a2= bavirt, eavirt
      moaindex a3= bavirt, eavirt
#
      mobindex j = bbocc, ebocc
      mobindex j1= bbocc, ebocc
      mobindex j2= bbocc, ebocc
      mobindex j3= bbocc, ebocc
#
      mobindex b = bbvirt, ebvirt
      mobindex b1= bbvirt, ebvirt
      mobindex b2= bbvirt, ebvirt
      mobindex b3= bbvirt, ebvirt
#
      moaindex p = baocc, eavirt
      moaindex p1= baocc, eavirt
      moaindex p2= baocc, eavirt
      moaindex p3= baocc, eavirt
#
      mobindex q = bbocc, ebvirt
      mobindex q1= bbocc, ebvirt
      mobindex q2= bbocc, ebvirt
      mobindex q3= bbocc, ebvirt
# 
# Declare one-particle density arrays 
# ----------------------------------- 
#
      distributed Dhfa(mu,nu) 
      distributed Dhfb(mu,nu) 
      distributed IDhfa(mu,nu) 
      distributed IDhfb(mu,nu) 
      distributed Dhfa_old(mu,nu) 
      distributed Dhfb_old(mu,nu) 
#
      distributed Fpq_a(mu,nu) 
      distributed Fpq_b(mu,nu) 
      distributed FTpq_a(mu,nu) 
      distributed FTpq_b(mu,nu) 
      distributed CBT_a(mu,p) 
      distributed CBT_b(mu,q) 
#
# Arrays needed for FNO generation 
# -------------------------------- 
#
      static SPaa(a,a1) 
      static SPbb(b,b1) 
      static NCa(a1,a)
      static NCb(b1,b)
      static Cpa(mu,p) 
      static Cpb(mu,q) 
      static VFock_a(a1,a) 
      static VFock_b(b1,b) 
      static UFock_a(a1,a)
      static UFock_b(b1,b)
#
      local L0xxxi(mu,nu,lambda,i) 
      local L0xxxj(mu,nu,lambda,j) 
      local Lxipi(mu,i,p,i1) 
      local Lpipi(p1,i,p,i1) 
      local Lxiqj(mu,i,q,j) 
      local Lpiqj(p,i,q,j) 
      local Lxjqj(mu,j,q,j1) 
      local Lqjqj(q1,j,q,j1) 

      temp V0xxxi(mu,nu,lambda,i) 
      temp V0xxxj(mu,nu,lambda,j) 
      temp Txixi(lambda,i,mu,i1) 
      temp Txixj(lambda,i,mu,j1)  
      temp Txjxj(lambda,j,mu,j1)    
      temp Txipi(mu,i,p,i1) 
      temp Tpipi(p1,i,p,i1)  
      temp Txiqj(mu,i,q,j) 
      temp Tpiqj(p,i,q,j)  
      temp Taa(a,a1)     
      temp Tbb(b,b1)     
      temp T1pipi(p,i,p1,i1) 
      temp T2pipi(p,i,p1,i1) 
      temp T1piqj(p,i,q,j) 
      temp T2piqj(p,i,q,j) 
      temp Iaiai(a2,i,a1,i1)  
      temp Iaibj(a2,i,b1,j1)  
      temp Ibjbj(b2,j,b1,j1)  
      temp Txjqj(mu,j,q,j1)  
      temp Tqjqj(q1,j,q,j1)  
      temp T1qjqj(q1,j,q,j1)  
      temp T2qjqj(q1,j,q,j1)  

      served Vxixi(lambda,i,mu,i1) 
      served Vxixj(lambda,i,mu,j1) 
      served Vxjxj(lambda,j,mu,j1) 
      served Vxipi(mu,i,p,i1) 
      served Vxiqj(mu,i,q,j) 
      served VSpipi(p1,i,p,i1) 
      served VSqjqj(q1,j,q,j1) 
      served Vpiqj(p,i,q,j) 
      served ASpipi(a,i,a2,i1) 
      served ASqjqj(b,j,b2,j1) 
      served Apiqj(a,i,b,j) 
      served Vxjqj(mu,j,q,j1)
#
      distributed Pab_aa(a,a1) 
      distributed Pab_bb(b,b1) 
#
# Declare temporary arrays 
# ------------------------ 
#
      temp Txxxx(mu,nu,lambda,sigma) 
      temp TSxxxx(mu,nu,lambda,sigma) 
      temp T1xxxx(mu,nu,lambda,sigma) 
      temp T2xxxx(mu,nu,lambda,sigma) 
      temp T3xxxx(mu,nu,lambda,sigma) 
      temp T4xxxx(mu,nu,lambda,sigma) 
      temp T5xxxx(mu,nu,lambda,sigma) 
      temp Txxxi(mu,nu,lambda,i) 
      temp T1xxxi(mu,nu,lambda,i) 
      temp T2xxxi(mu,nu,lambda,i) 
      temp T3xxxi(mu,nu,lambda,i) 
      temp T4xxxi(mu,nu,lambda,i) 
      temp TAxxxi(mu,nu,lambda,i) 
      temp TBxxxi(mu,nu,lambda,i) 
      temp Txxxj(mu,nu,lambda,j) 
      temp T1xxxj(mu,nu,lambda,j) 
      temp T2xxxj(mu,nu,lambda,j) 
      temp T3xxxj(mu,nu,lambda,j) 
      temp T4xxxj(mu,nu,lambda,j) 
      temp TAxxxj(mu,nu,lambda,j) 
      temp TBxxxj(mu,nu,lambda,j) 
      temp Txixx(mu,i,nu,lambda) 
      temp Txjxx(mu,j,nu,lambda) 
      temp Tixxx(i,mu,nu,lambda) 
      temp Tjxxx(j,mu,nu,lambda) 
      temp Ixi(mu,i) 
      temp I1xi(mu,i) 
      temp Ixj(mu,j) 
      temp I1xj(mu,j) 
      temp Tpq(mu,nu) 
      temp T1pq(mu,nu) 
      temp Txi(mu,i) 
      temp T1xi(mu,i) 
      temp Txj(mu,j) 
      temp T1xj(mu,j) 
      temp Txx(mu,nu) 
      temp TAxx(mu,nu) 
      temp TBxx(mu,nu) 
      temp T1xx(mu,nu) 
      temp T2xx(mu,nu) 
      temp T3xx(mu,nu) 
      temp T4xx(mu,nu) 
      temp T5xx(mu,nu) 
      temp T6xx(mu,nu) 
      temp T7xx(mu,nu) 
      temp T8xx(mu,nu) 
      temp T9xx(mu,nu) 
      temp T10xx(mu,nu) 
      temp T11xx(mu,nu) 
      temp T12xx(mu,nu) 
      temp T13xx(mu,nu) 
      temp T14xx(mu,nu) 
      temp T15xx(mu,nu) 
      temp T16xx(mu,nu) 
      temp T17xx(mu,nu) 
      temp T18xx(mu,nu) 
      temp T19xx(mu,nu) 
      temp T20xx(mu,nu) 
      temp T21xx(mu,nu) 
      temp T22xx(mu,nu) 
      temp Tii(i,i1) 
      temp T1ii(i,i1) 
      temp Tjj(j,j1) 
      temp T1jj(j,j1) 
      temp Txp(mu,p) 
      temp T1xp(mu,p) 
      temp Tpp(p,p1) 
      temp T1pp(p,p1) 
      temp Txq(mu,q) 
      temp T1xq(mu,q) 
      temp Tqq(q,q1) 
      temp T1qq(q,q1) 
#
# Declare served arrays 
# --------------------- 
#
      temp aoint(mu,nu,lambda,sigma)
#
# Declare static arrays 
# --------------------- 
#
      static FSpq_a(mu,nu) 
      static FSpq_b(mu,nu) 
      distributed Qxx(mu,nu) 
      distributed FTa(p,p1) 
      distributed FTb(q,q1) 
      static X1(mu,nu) 
      local LDHFa(mu,nu) 
      local LDHFb(mu,nu) 
      local LFpq_b(mu,nu) 
      local LFpq_a(mu,nu) 
      static pinf(kiter,kptr1)
      temp tpinf(kiter,kptr1)
#
# Arrays used in DIIS procedure 
# ----------------------------- 
#  
      distributed Fai(a,i) 
      distributed F1ai(a,i) 
      distributed F2ai(a,i) 
      distributed F3ai(a,i) 
      distributed F4ai(a,i) 
      distributed F5ai(a,i) 
      distributed F6ai(a,i) 
      distributed F7ai(a,i) 
      distributed F8ai(a,i) 
      distributed F9ai(a,i) 
      distributed F10ai(a,i) 
      distributed Fbj(b,j) 
      distributed F1bj(b,j) 
      distributed F2bj(b,j) 
      distributed F3bj(b,j) 
      distributed F4bj(b,j) 
      distributed F5bj(b,j) 
      distributed F6bj(b,j) 
      distributed F7bj(b,j) 
      distributed F8bj(b,j) 
      distributed F9bj(b,j) 
      distributed F10bj(b,j) 
      temp tai(a,i) 
      temp tbj(b,j) 
      distributed F1a(mu,nu) 
      distributed F2a(mu,nu) 
      distributed F3a(mu,nu) 
      distributed F4a(mu,nu) 
      distributed F5a(mu,nu) 
      distributed F6a(mu,nu) 
      distributed F7a(mu,nu) 
      distributed F8a(mu,nu) 
      distributed F9a(mu,nu) 
      distributed F10a(mu,nu) 
      distributed F1b(mu,nu) 
      distributed F2b(mu,nu) 
      distributed F3b(mu,nu) 
      distributed F4b(mu,nu) 
      distributed F5b(mu,nu) 
      distributed F6b(mu,nu) 
      distributed F7b(mu,nu) 
      distributed F8b(mu,nu) 
      distributed F9b(mu,nu) 
      distributed F10b(mu,nu) 
#
# Scalars used in DIIS procedure 
# ------------------------------ 
#
       scalar b11
       scalar b12
       scalar b13
       scalar b14
       scalar b15
       scalar b16
       scalar b17
       scalar b18
       scalar b19
       scalar b110 
#
       scalar b22
       scalar b23
       scalar b24
       scalar b25
       scalar b26
       scalar b27
       scalar b28
       scalar b29
       scalar b210 
#
       scalar b33
       scalar b34
       scalar b35
       scalar b36
       scalar b37
       scalar b38
       scalar b39
       scalar b310 
#
       scalar b44
       scalar b45
       scalar b46
       scalar b47
       scalar b48
       scalar b49
       scalar b410 
#
       scalar b55
       scalar b56
       scalar b57
       scalar b58
       scalar b59
       scalar b510 
#
       scalar b66 
       scalar b67 
       scalar b68 
       scalar b69 
       scalar b610  
#
       scalar b77 
       scalar b78 
       scalar b79 
       scalar b710  
#
       scalar b88 
       scalar b89 
       scalar b810  
#
       scalar b99 
       scalar b910  
#
       scalar b1010 
#
       scalar c1
       scalar c2
       scalar c3
       scalar c4
       scalar c5
       scalar c6
       scalar c7
       scalar c8
       scalar c9
       scalar c10 
#
       scalar Tb11
       scalar Tb12
       scalar Tb13
       scalar Tb14
       scalar Tb15
       scalar Tb16
       scalar Tb17
       scalar Tb18
       scalar Tb19
       scalar Tb110 
#
       scalar Tb22
       scalar Tb23
       scalar Tb24
       scalar Tb25
       scalar Tb26
       scalar Tb27
       scalar Tb28
       scalar Tb29
       scalar Tb210 
#
       scalar Tb33
       scalar Tb34
       scalar Tb35
       scalar Tb36
       scalar Tb37
       scalar Tb38
       scalar Tb39
       scalar Tb310 
#
       scalar Tb44
       scalar Tb45
       scalar Tb46
       scalar Tb47
       scalar Tb48
       scalar Tb49
       scalar Tb410 
#
       scalar Tb55
       scalar Tb56
       scalar Tb57
       scalar Tb58
       scalar Tb59
       scalar Tb510 
#
       scalar Tb66 
       scalar Tb67 
       scalar Tb68 
       scalar Tb69 
       scalar Tb610  
#
       scalar Tb77 
       scalar Tb78 
       scalar Tb79 
       scalar Tb710  
#
       scalar Tb88 
       scalar Tb89 
       scalar Tb810  
#
       scalar Tb99 
       scalar Tb910  
#
       scalar Tb1010 
#
# Declare scalars 
# --------------- 
#
      scalar e_a     
      scalar e_b     
      scalar escf_a 
      scalar escf_b 
      scalar etemp 
      scalar esum 
      scalar energy 
      scalar energy1 
      scalar energy2 
      scalar ecrit 
      scalar ediff  
#     scalar damp 
      scalar damp1 
      scalar done 
      scalar donea 
      scalar doneb 
      scalar one
      scalar two
      scalar three
      scalar four
      scalar six  
      scalar ncount1 
      scalar rank 
      scalar esuma   
      scalar esumb   
      scalar esumab   
      scalar ecorraa 
      scalar ecorrab 
      scalar ecorrbb 
      scalar ecorrT 
#
# ---------------------------------------------------------------------------- 
#
      PROC IGUESS   
#     ----------- 
#
#     Initialize the Fock matrix to the bare 1-electron hamiltonian.
#     -------------------------------------------------------------- 
#
      PARDO mu, nu 
#
            Txx(mu,nu)       = oed_nai(mu,nu)  
            Txx(mu,nu)      += oed_kin(mu,nu)  
#
            PUT Fpq_a(mu,nu) = Txx(mu,nu) 
            PUT Fpq_b(mu,nu) = Txx(mu,nu) 
#
      ENDPARDO mu, nu 
#
     #execute print_scalar scfeneg
      ENDPROC IGUESS   
#     -------------- 
#
# -----------------------------------------------------------------------------
#
      PROC HFDENS
#     -----------
#
#     The HF density is computed. Davidson damping is incorporated thus
#     knowledge of the previous iteration is needed. 
#     ----------------------------------------------------------------- 
#
      PARDO mu, nu 
#
#           alpha component first 
#           --------------------- 
#
            GET           DHFa_old(mu,nu) 
            GET           DHFb_old(mu,nu) 
            Tpq(mu,nu)  = DHFa_old(mu,nu)   
            Tpq(mu,nu) *= damp  
#
            DO i 
#
               Txi(nu,i)   = ca(nu,i)
               T1pq(mu,nu) = Txi(nu,i)*ca(mu,i)
               Tpq(mu,nu) += T1pq(mu,nu) 
#
            ENDDO i 
#
            Tpq(mu,nu)     *= damp1   
            PUT Dhfa(mu,nu) = Tpq(mu,nu)
#
#           beta component next  
#           ------------------- 
#
            Tpq(mu,nu)  = DHFb_old(mu,nu)   
            Tpq(mu,nu) *= damp  
#
            DO j 
#
               Txj(nu,j)   = cb(nu,j)
               T1pq(mu,nu) = cb(mu,j)*Txj(nu,j)
               Tpq(mu,nu) += T1pq(mu,nu) 
#
            ENDDO j 
#
            Tpq(mu,nu)     *= damp1   
            PUT Dhfb(mu,nu) = Tpq(mu,nu)
#
      ENDPARDO mu, nu 
#
      ENDPROC HFDENS
#     --------------
#
# ---------------------------------------------------------------------------- 
#
# -----------------------------------------------------------------------------
#
      PROC HFIDENS
#     ------------
#
#     Procedure which computes the HF density without Davidson damping. 
#     ----------------------------------------------------------------- 
#
      PARDO mu, nu 
#
#           alpha component 
#           --------------- 
#
            Tpq(mu,nu) = 0.0 
#
            DO i 
#
               Txi(nu,i)   = ca(nu,i)
               T1pq(mu,nu) = Txi(nu,i)*ca(mu,i)
               Tpq(mu,nu) += T1pq(mu,nu) 
#
            ENDDO i 
# 
            PUT Dhfa(mu,nu) = Tpq(mu,nu)
#
#           beta component 
#           -------------- 
#
            Tpq(mu,nu) = 0.0 
#
            DO j 
#
               Txj(nu,j)   = cb(nu,j)
               T1pq(mu,nu) = cb(mu,j)*Txj(nu,j)
               Tpq(mu,nu) += T1pq(mu,nu) 
#
            ENDDO j 
#
            PUT Dhfb(mu,nu) = Tpq(mu,nu)
#
      ENDPARDO mu, nu 
#
      ENDPROC HFIDENS
#     ---------------
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
      PROC SCFENERGY 
#     -------------- 
#
#     The total SCF energy is computed from a know Hartee-Fock density.  
#     ----------------------------------------------------------------- 
#
      esum   = 0.0 
      etemp  = 0.0 
      energy = 0.0 
      energy1= 0.0 
      energy2= 0.0 
      execute sip_barrier 
#
#     One-particle contribution. 
#     -------------------------- 
#
      PARDO mu, nu 
#
            GET DHFa(mu,nu) 
            GET DHFb(mu,nu) 
#
            Txx(mu,nu)   = oed_nai(mu,nu)  
            Txx(mu,nu)  += oed_kin(mu,nu)  
#
            T1xx(mu,nu)  = DHFa(mu,nu) 
            T1xx(mu,nu) += DHFb(mu,nu) 
#          
            etemp = Txx(mu,nu)*T1xx(mu,nu)  
            esum += etemp 
#
      ENDPARDO mu, nu 
      execute sip_barrier 
#
      collective energy1 += esum  
      execute sip_barrier 
     #execute print_scalar energy1 
#
#     Two-particle contribution. 
#     -------------------------- 
#
      esum   = 0.0 
      etemp  = 0.0 
      execute sip_barrier 
      PARDO mu, lambda
#
            DO nu
            DO sigma
#
               GET DHFa(nu,sigma) 
               GET DHFa(nu,lambda) 
               GET DHFa(mu,lambda) 
               GET DHFa(mu,sigma) 
#
               GET DHFb(nu,sigma) 
               GET DHFb(nu,lambda) 
               GET DHFb(mu,lambda) 
               GET DHFb(mu,sigma) 
#
               compute_integrals            AOINT(mu,lambda,nu,sigma)
#
#              ------------------------------------------------------------- 
#
               txx(nu,sigma)              = DHFa(nu,sigma) 
               t1xx(nu,lambda)            = DHFa(nu,lambda) 
#
               Txxxx(mu,nu,lambda,sigma)  = DHFa(mu,lambda)^txx(nu,sigma)   
               T1xxxx(mu,nu,lambda,sigma) = DHFa(mu,sigma)^t1xx(nu,lambda)   
               Txxxx(mu,nu,lambda,sigma) -= T1xxxx(mu,nu,lambda,sigma) 
#
               txx(nu,sigma)              = DHFb(nu,sigma) 
               t1xx(nu,lambda)            = DHFb(nu,lambda) 
#
               T1xxxx(mu,nu,lambda,sigma) = DHFb(mu,lambda)^txx(nu,sigma)   
               Txxxx(mu,nu,lambda,sigma) += T1xxxx(mu,nu,lambda,sigma) 
               T1xxxx(mu,nu,lambda,sigma) = DHFb(mu,sigma)^t1xx(nu,lambda)   
               Txxxx(mu,nu,lambda,sigma) -= T1xxxx(mu,nu,lambda,sigma) 
#
#              ------------------------------------------------------------- 
#
               T1xxxx(mu,nu,lambda,sigma) = DHFa(mu,lambda)^DHFb(nu,sigma)   
               Txxxx(mu,nu,lambda,sigma) += T1xxxx(mu,nu,lambda,sigma) 
#
               T1xxxx(mu,nu,lambda,sigma) = DHFb(mu,lambda)^DHFa(nu,sigma)   
               Txxxx(mu,nu,lambda,sigma) += T1xxxx(mu,nu,lambda,sigma) 
#
#              ------------------------------------------------------------- 
#
               etemp  = AOINT(mu,lambda,nu,sigma)*Txxxx(mu,nu,lambda,sigma) 
               etemp *= 0.5 
               esum  += etemp 
#
            ENDDO sigma
            ENDDO nu
#
       ENDPARDO mu, lambda
       execute sip_barrier 
#
       collective energy2 += esum  
       execute sip_barrier 
      #execute print_scalar energy2 
       energy  = energy1 
       energy += energy2 
      #execute print_scalar energy 
#
       ENDPROC SCFENERGY 
#      ----------------- 
#
# ---------------------------------------------------------------------------- 
#
       PROC FOCK_MATRIX  
#      ----------------- 
#
#      The complete Fock matrix is constructed. Eight fold symmetry of the
#      two-electron integrals is incorporated. 
#      ------------------------------------------------------------------
#
#      Put the density into local arrays 
#      --------------------------------- 
#
       allocate LDHFa(*,*) 
       allocate LDHFb(*,*) 
       allocate LFpq_b(*,*) 
       allocate LFpq_a(*,*) 
       DO mu 
       DO nu 
          GET            DHFa(mu,nu) 
          GET            DHFb(mu,nu) 
          LDHFa(mu,nu) = DHFa(mu,nu) 
          LDHFb(mu,nu) = DHFb(mu,nu) 
          LFpq_a(mu,nu) = 0.0 
          LFpq_b(mu,nu) = 0.0 
       ENDDO nu 
       ENDDO mu 
#
#      Initialize the Fock matrix to the bare 1-electron hamiltonian.
#      -------------------------------------------------------------- 
#
       execute sip_barrier
#
       PARDO mu, nu   
#
             Txx(mu,nu)        = oed_nai(mu,nu)  
             Txx(mu,nu)       += oed_kin(mu,nu)  
#
             PUT Fpq_a(mu,nu) += Txx(mu,nu) 
             PUT Fpq_b(mu,nu) += Txx(mu,nu) 
#
       ENDPARDO mu, nu   
       execute sip_barrier
       execute load_balance_off
       execute sip_barrier
#
#      Add contributions containing two-particle integral contributions.
#      -----------------------------------------------------------------
#
############# CLASS 6  ############
##  Do four-center part (mu nu |la si)->(mu nu |si la ),(nu mu|la si),(nu mu|si la)
##                      (la si |mu nu),(si la |mu nu),(la si |nu mu),(si la |nu mu)
##
        PARDO mu, nu, lambda, sigma
##
                 WHERE mu      < nu
                 WHERE lambda  < sigma
                 WHERE mu     < lambda
                 WHERE nu     != sigma
                 WHERE nu     != lambda
                 WHERE mu     != sigma
##
                    compute_integrals       aoint(mu,nu,lambda,sigma)
##
                    T1xx(lambda,sigma)    = LDHFa(lambda,sigma)
                    T1xx(lambda,sigma)   += LDHFb(lambda,sigma)
                    T4xx(mu,nu)           = LDHFa(mu,nu)
                    T4xx(mu,nu)          += LDHFb(mu,nu)
##
                    T2xx(mu,nu)           = aoint(mu,nu,lambda,sigma)*T1xx(lambda,sigma)
                    T2xx(mu,nu)          *= 2.0
                    LFpq_a(mu,nu)        += T2xx(mu,nu)
                    LFpq_b(mu,nu)        += T2xx(mu,nu)
                    T3xx(nu,mu)           = T2xx(mu,nu)
                    LFpq_a(nu,mu)        += T3xx(nu,mu)
                    LFpq_b(nu,mu)        += T3xx(nu,mu)
##
                    T5xx(lambda,sigma)    = aoint(mu,nu,lambda,sigma)*T4xx(mu,nu)
                    T5xx(lambda,sigma)   *= 2.0
                    LFpq_a(lambda,sigma) += T5xx(lambda,sigma)
                    LFpq_b(lambda,sigma) += T5xx(lambda,sigma)
                    T6xx(sigma,lambda)    = T5xx(lambda,sigma)
                    LFpq_a(sigma,lambda) += T6xx(sigma,lambda)
                    LFpq_b(sigma,lambda) += T6xx(sigma,lambda)
##
                    T7xx(mu,lambda)       = aoint(mu,nu,lambda,sigma)*LDHFa(nu,sigma)
                    LFpq_a(mu,lambda)    -= T7xx(mu,lambda)
                    T8xx(lambda,mu)       = T7xx(mu,lambda)
                    LFpq_a(lambda,mu)    -= T8xx(lambda,mu)
##
                    T9xx(mu,sigma)        = aoint(mu,nu,lambda,sigma)*LDHFa(nu,lambda)
                    LFpq_a(mu,sigma)     -= T9xx(mu,sigma)
                    T10xx(sigma,mu)       = T9xx(mu,sigma)
                    LFpq_a(sigma,mu)     -= T10xx(sigma,mu)
##
                    T11xx(nu,lambda)      = aoint(mu,nu,lambda,sigma)*LDHFa(mu,sigma)
                    LFpq_a(nu,lambda)    -= T11xx(nu,lambda)
                    T12xx(lambda,nu)      = T11xx(nu,lambda)
                    LFpq_a(lambda,nu)    -= T12xx(lambda,nu)
##
                    T13xx(nu,sigma)       = aoint(mu,nu,lambda,sigma)*LDHFa(mu,lambda)
                    LFpq_a(nu,sigma)     -= T13xx(nu,sigma)
                    T14xx(sigma,nu)       = T13xx(nu,sigma)
                    LFpq_a(sigma,nu)     -= T14xx(sigma,nu)
##
                    T15xx(mu,lambda)      = aoint(mu,nu,lambda,sigma)*LDHFb(nu,sigma)
                    LFpq_b(mu,lambda)    -= T15xx(mu,lambda)
                    T16xx(lambda,mu)      = T15xx(mu,lambda)
                    LFpq_b(lambda,mu)    -= T16xx(lambda,mu)
##
                    T17xx(mu,sigma)       = aoint(mu,nu,lambda,sigma)*LDHFb(nu,lambda)
                    LFpq_b(mu,sigma)     -= T17xx(mu,sigma)
                    T18xx(sigma,mu)       = T17xx(mu,sigma)
                    LFpq_b(sigma,mu)     -= T18xx(sigma,mu)
##
                    T19xx(nu,lambda)      = aoint(mu,nu,lambda,sigma)*LDHFb(mu,sigma)
                    LFpq_b(nu,lambda)    -= T19xx(nu,lambda)
                    T20xx(lambda,nu)      = T19xx(nu,lambda)
                    LFpq_b(lambda,nu)    -= T20xx(lambda,nu)

                    T21xx(nu,sigma)       = aoint(mu,nu,lambda,sigma)*LDHFb(mu,lambda)
                    LFpq_b(nu,sigma)     -= T21xx(nu,sigma)
                    T22xx(sigma,nu)       = T21xx(nu,sigma)
                    LFpq_b(sigma,nu)     -= T22xx(sigma,nu)
##
        ENDPARDO mu, nu, lambda, sigma
##
#
############ CLASS 3  ############
#  Do two-center part (mu mu |mu nu)->(mu nu |mu mu ),(mu mu|nu mu),(nu mu|mu mu)
#  Do three-center part (mu mu |nu lambda)->(mu mu |lambda nu ),(nu lambda|mu mu),(lambda nu|mu mu)
#
       PARDO mu, nu, sigma 
#
          WHERE mu == nu
#
             T3xx(mu,nu)    = LDHFa(mu,nu)
             T3xx(mu,nu)   += LDHFb(mu,nu)
#
             DO lambda  
#
                      WHERE lambda  < sigma
#
                         compute_integrals       aoint(mu,nu,lambda,sigma)
#
                         T1xx(lambda,sigma)    = LDHFa(lambda,sigma)
                         T1xx(lambda,sigma)   += LDHFb(lambda,sigma)
#
                         T2xx(mu,nu)           = aoint(mu,nu,lambda,sigma)*T1xx(lambda,sigma)
                         T2xx(mu,nu)          *= 2.0
#
                         T4xx(lambda,sigma)    = aoint(mu,nu,lambda,sigma)*T3xx(mu,nu)
                         T5xx(sigma,lambda)    = T4xx(lambda,sigma)
#
                         T6xx(mu,lambda)       = aoint(mu,nu,lambda,sigma)*LDHFa(nu,sigma)
                        #T6xx(mu,lambda)      *= -1.0
                         T7xx(lambda,mu)       = T6xx(mu,lambda)
#
                         T8xx(mu,sigma)        = aoint(mu,nu,lambda,sigma)*LDHFa(nu,lambda)
                        #T8xx(mu,sigma)       *= -1.0
                         T9xx(sigma,mu)        = T8xx(mu,sigma)
#
                         T10xx(mu,lambda)      = aoint(mu,nu,lambda,sigma)*LDHFb(nu,sigma)
                        #T10xx(mu,lambda)     *= -1.0
                         T11xx(lambda,mu)      = T10xx(mu,lambda)
#
                         T12xx(mu,sigma)       = aoint(mu,nu,lambda,sigma)*LDHFb(nu,lambda)
                        #T12xx(mu,sigma)      *= -1.0
                         T13xx(sigma,mu)       = T12xx(mu,sigma)
#
                         LFpq_a(mu,nu)        += T2xx(mu,nu)
                         LFpq_b(mu,nu)        += T2xx(mu,nu)
#
                         LFpq_a(lambda,sigma) += T4xx(lambda,sigma)
                         LFpq_b(lambda,sigma) += T4xx(lambda,sigma)
#
                         LFpq_a(sigma,lambda) += T5xx(sigma,lambda)
                         LFpq_b(sigma,lambda) += T5xx(sigma,lambda)
#
                         LFpq_a(mu,lambda)    -= T6xx(mu,lambda)
                         LFpq_a(lambda,mu)    -= T7xx(lambda,mu)
#
                         LFpq_a(mu,sigma)     -= T8xx(mu,sigma)
                         LFpq_a(sigma,mu)     -= T9xx(sigma,mu)
#
                         LFpq_b(mu,lambda)    -= T10xx(mu,lambda)
                         LFpq_b(lambda,mu)    -= T11xx(lambda,mu)
#
                         LFpq_b(mu,sigma)     -= T12xx(mu,sigma)
                         LFpq_b(sigma,mu)     -= T13xx(sigma,mu)
#
                ENDDO lambda 
#
       ENDPARDO mu, nu, sigma 
#
############ CLASS 5  ############
###################  CLASS A ##############
#  Do three-center part (mu nu |mu la)->(mu nu |la mu ),(nu mu|mu la),(nu mu|la mu)
#                       (mu la |mu nu),(la mu |mu nu ),(mu la |nu mu),(la mu |nu mu)
#
       PARDO mu, nu, sigma  
                WHERE nu < sigma
                WHERE mu < nu
                   T4xx(mu,nu)  = LDHFa(mu,nu)
                   T4xx(mu,nu) += LDHFb(mu,nu)
             DO lambda 
                WHERE mu==lambda
                WHERE lambda < sigma
#
                   compute_integrals       aoint(mu,nu,lambda,sigma)
#
                   T1xx(lambda,sigma)    = LDHFa(lambda,sigma)
                   T1xx(lambda,sigma)   += LDHFb(lambda,sigma)
#
                   T2xx(mu,nu)           = aoint(mu,nu,lambda,sigma)*T1xx(lambda,sigma)
                   T2xx(mu,nu)          *= 2.0
                   T3xx(nu,mu)           = T2xx(mu,nu)
#
                   T5xx(lambda,sigma)    = aoint(mu,nu,lambda,sigma)*T4xx(mu,nu)
                   T5xx(lambda,sigma)   *= 2.0
                   T6xx(sigma,lambda)    = T5xx(lambda,sigma)
#
#
                   T7xx(mu,lambda)       = aoint(mu,nu,lambda,sigma)*LDHFa(nu,sigma)
                   T7xx(mu,lambda)      *= -1.0
                   T8xx(lambda,mu)       = T7xx(mu,lambda)
#
                   T9xx(mu,sigma)        = aoint(mu,nu,lambda,sigma)*LDHFa(nu,lambda)
                   T9xx(mu,sigma)       *= -1.0
                   T10xx(sigma,mu)       = T9xx(mu,sigma)
#
                   T11xx(nu,lambda)      = aoint(mu,nu,lambda,sigma)*LDHFa(mu,sigma)
                   T11xx(nu,lambda)     *= -1.0
                   T12xx(lambda,nu)      = T11xx(nu,lambda)
#
                   T13xx(nu,sigma)       = aoint(mu,nu,lambda,sigma)*LDHFa(mu,lambda)
                   T13xx(nu,sigma)      *= -1.0
                   T14xx(sigma,nu)       = T13xx(nu,sigma)
#
                   T15xx(mu,lambda)      = aoint(mu,nu,lambda,sigma)*LDHFb(nu,sigma)
                   T15xx(mu,lambda)     *= -1.0
                   T16xx(lambda,mu)      = T15xx(mu,lambda)
#
                   T17xx(mu,sigma)       = aoint(mu,nu,lambda,sigma)*LDHFb(nu,lambda)
                   T17xx(mu,sigma)      *= -1.0
                   T18xx(sigma,mu)       = T17xx(mu,sigma)
#
                   T19xx(nu,lambda)      = aoint(mu,nu,lambda,sigma)*LDHFb(mu,sigma)
                   T19xx(nu,lambda)     *= -1.0
                   T20xx(lambda,nu)      = T19xx(nu,lambda)
#
                   T21xx(nu,sigma)       = aoint(mu,nu,lambda,sigma)*LDHFb(mu,lambda)
                   T21xx(nu,sigma)      *= -1.0
                   T22xx(sigma,nu)       = T21xx(nu,sigma)
#
                   LFpq_a(mu,nu)        += T2xx(mu,nu)
                   LFpq_b(mu,nu)        += T2xx(mu,nu)
                   LFpq_a(nu,mu)        += T3xx(nu,mu)
                   LFpq_b(nu,mu)        += T3xx(nu,mu)
                   LFpq_a(lambda,sigma) += T5xx(lambda,sigma)
                   LFpq_b(lambda,sigma) += T5xx(lambda,sigma)
                   LFpq_a(sigma,lambda) += T6xx(sigma,lambda)
                   LFpq_b(sigma,lambda) += T6xx(sigma,lambda)
                   LFpq_a(mu,lambda)    += T7xx(mu,lambda)
                   LFpq_a(lambda,mu)    += T8xx(lambda,mu)
                   LFpq_a(mu,sigma)     += T9xx(mu,sigma)
                   LFpq_a(sigma,mu)     += T10xx(sigma,mu)
                   LFpq_a(nu,lambda)    += T11xx(nu,lambda)
                   LFpq_a(lambda,nu)    += T12xx(lambda,nu)
                   LFpq_a(nu,sigma)     += T13xx(nu,sigma)
                   LFpq_a(sigma,nu)     += T14xx(sigma,nu)
                   LFpq_b(mu,lambda)    += T15xx(mu,lambda)
                   LFpq_b(lambda,mu)    += T16xx(lambda,mu)
                   LFpq_b(mu,sigma)     += T17xx(mu,sigma)
                   LFpq_b(sigma,mu)     += T18xx(sigma,mu)
                   LFpq_b(nu,lambda)    += T19xx(nu,lambda)
                   LFpq_b(lambda,nu)    += T20xx(lambda,nu)
                   LFpq_b(nu,sigma)     += T21xx(nu,sigma)
                   LFpq_b(sigma,nu)     += T22xx(sigma,nu)
#
             ENDDO lambda  
#
       ENDPARDO mu, nu, sigma  
#
###################  CLASS B ##############
#  Do three-center part (mu nu |mu la)->(mu nu |la mu ),(nu mu|mu la),(nu mu|la mu)
#                       (mu la |mu nu),(la mu |mu nu ),(mu la |nu mu),(la mu |nu mu)
# 
      PARDO mu, nu, lambda
                WHERE nu == lambda
                WHERE mu < nu
                   T4xx(mu,nu)  = LDHFa(mu,nu)
                   T4xx(mu,nu) += LDHFb(mu,nu)
            DO sigma 
                WHERE lambda < sigma
                WHERE mu < sigma
#
                   compute_integrals       aoint(mu,nu,lambda,sigma)
#
                   T1xx(lambda,sigma)    = LDHFa(lambda,sigma)
                   T1xx(lambda,sigma)   += LDHFb(lambda,sigma)
#
                   T2xx(mu,nu)           = aoint(mu,nu,lambda,sigma)*T1xx(lambda,sigma)
                   T2xx(mu,nu)          *= 2.0
                   T3xx(nu,mu)           = T2xx(mu,nu)
#
                   T5xx(lambda,sigma)    = aoint(mu,nu,lambda,sigma)*T4xx(mu,nu)
                   T5xx(lambda,sigma)   *= 2.0
                   T6xx(sigma,lambda)    = T5xx(lambda,sigma)
#
                   T7xx(mu,lambda)       = aoint(mu,nu,lambda,sigma)*LDHFa(nu,sigma)
                   T7xx(mu,lambda)      *= -1.0
                   T8xx(lambda,mu)       = T7xx(mu,lambda)
#
                   T9xx(mu,sigma)        = aoint(mu,nu,lambda,sigma)*LDHFa(nu,lambda)
                   T9xx(mu,sigma)       *= -1.0
                   T10xx(sigma,mu)       = T9xx(mu,sigma)
#
                   T11xx(nu,lambda)      = aoint(mu,nu,lambda,sigma)*LDHFa(mu,sigma)
                   T11xx(nu,lambda)     *= -1.0
                   T12xx(lambda,nu)      = T11xx(nu,lambda)
#
                   T13xx(nu,sigma)       = aoint(mu,nu,lambda,sigma)*LDHFa(mu,lambda)
                   T13xx(nu,sigma)      *= -1.0
                   T14xx(sigma,nu)       = T13xx(nu,sigma)
#
                   T15xx(mu,lambda)      = aoint(mu,nu,lambda,sigma)*LDHFb(nu,sigma)
                   T15xx(mu,lambda)     *= -1.0
                   T16xx(lambda,mu)      = T15xx(mu,lambda)
#
                   T17xx(mu,sigma)       = aoint(mu,nu,lambda,sigma)*LDHFb(nu,lambda)
                   T17xx(mu,sigma)      *= -1.0
                   T18xx(sigma,mu)       = T17xx(mu,sigma)
#
                   T19xx(nu,lambda)      = aoint(mu,nu,lambda,sigma)*LDHFb(mu,sigma)
                   T19xx(nu,lambda)     *= -1.0
                   T20xx(lambda,nu)      = T19xx(nu,lambda)
#
                   T21xx(nu,sigma)       = aoint(mu,nu,lambda,sigma)*LDHFb(mu,lambda)
                   T21xx(nu,sigma)      *= -1.0
                   T22xx(sigma,nu)       = T21xx(nu,sigma)

                   LFpq_a(mu,nu)        += T2xx(mu,nu)
                   LFpq_b(mu,nu)        += T2xx(mu,nu)
                   LFpq_a(nu,mu)        += T3xx(nu,mu)
                   LFpq_b(nu,mu)        += T3xx(nu,mu)
                   LFpq_a(lambda,sigma) += T5xx(lambda,sigma)
                   LFpq_b(lambda,sigma) += T5xx(lambda,sigma)
                   LFpq_a(sigma,lambda) += T6xx(sigma,lambda)
                   LFpq_b(sigma,lambda) += T6xx(sigma,lambda)
                   LFpq_a(mu,lambda)    += T7xx(mu,lambda)
                   LFpq_a(lambda,mu)    += T8xx(lambda,mu)
                   LFpq_a(mu,sigma)     += T9xx(mu,sigma)
                   LFpq_a(sigma,mu)     += T10xx(sigma,mu)
                   LFpq_a(nu,lambda)    += T11xx(nu,lambda)
                   LFpq_a(lambda,nu)    += T12xx(lambda,nu)
                   LFpq_a(nu,sigma)     += T13xx(nu,sigma)
                   LFpq_a(sigma,nu)     += T14xx(sigma,nu)
                   LFpq_b(mu,lambda)    += T15xx(mu,lambda)
                   LFpq_b(lambda,mu)    += T16xx(lambda,mu)
                   LFpq_b(mu,sigma)     += T17xx(mu,sigma)
                   LFpq_b(sigma,mu)     += T18xx(sigma,mu)
                   LFpq_b(nu,lambda)    += T19xx(nu,lambda)
                   LFpq_b(lambda,nu)    += T20xx(lambda,nu)
                   LFpq_b(nu,sigma)     += T21xx(nu,sigma)
                   LFpq_b(sigma,nu)     += T22xx(sigma,nu)
#
             ENDDO sigma 
#
       ENDPARDO mu, nu, lambda
# 
###################  CLASS C ##############
#  Do three-center part (mu nu |mu la)->(mu nu |la mu ),(nu mu|mu la),(nu mu|la mu)
#                       (mu la |mu nu),(la mu |mu nu ),(mu la |nu mu),(la mu |nu mu)
#
       PARDO mu, nu, sigma
                WHERE nu == sigma
                WHERE mu < nu
                   T4xx(mu,nu)    = LDHFa(mu,nu)
                   T4xx(mu,nu)   += LDHFb(mu,nu)
             DO lambda
                WHERE lambda < sigma
                WHERE mu < lambda
#
                   compute_integrals       aoint(mu,nu,lambda,sigma)
#
                   T1xx(lambda,sigma)    = LDHFa(lambda,sigma)
                   T1xx(lambda,sigma)   += LDHFb(lambda,sigma)
#
                   T2xx(mu,nu)           = aoint(mu,nu,lambda,sigma)*T1xx(lambda,sigma)
                   T2xx(mu,nu)          *= 2.0
                   T3xx(nu,mu)           = T2xx(mu,nu)
#
                   T5xx(lambda,sigma)    = aoint(mu,nu,lambda,sigma)*T4xx(mu,nu)
                   T5xx(lambda,sigma)   *= 2.0
                   T6xx(sigma,lambda)    = T5xx(lambda,sigma)
#
                   T7xx(mu,lambda)       = aoint(mu,nu,lambda,sigma)*LDHFa(nu,sigma)
                   T7xx(mu,lambda)      *= -1.0
                   T8xx(lambda,mu)       = T7xx(mu,lambda)
#
                   T9xx(mu,sigma)        = aoint(mu,nu,lambda,sigma)*LDHFa(nu,lambda)
                   T9xx(mu,sigma)       *= -1.0
                   T10xx(sigma,mu)       = T9xx(mu,sigma)
#
                   T11xx(nu,lambda)      = aoint(mu,nu,lambda,sigma)*LDHFa(mu,sigma)
                   T11xx(nu,lambda)     *= -1.0
                   T12xx(lambda,nu)      = T11xx(nu,lambda)
#
                   T13xx(nu,sigma)       = aoint(mu,nu,lambda,sigma)*LDHFa(mu,lambda)
                   T13xx(nu,sigma)      *= -1.0
                   T14xx(sigma,nu)       = T13xx(nu,sigma)
#
                   T15xx(mu,lambda)      = aoint(mu,nu,lambda,sigma)*LDHFb(nu,sigma)
                   T15xx(mu,lambda)     *= -1.0
                   T16xx(lambda,mu)      = T15xx(mu,lambda)
#
                   T17xx(mu,sigma)       = aoint(mu,nu,lambda,sigma)*LDHFb(nu,lambda)
                   T17xx(mu,sigma)      *= -1.0
                   T18xx(sigma,mu)       = T17xx(mu,sigma)
#
                   T19xx(nu,lambda)      = aoint(mu,nu,lambda,sigma)*LDHFb(mu,sigma)
                   T19xx(nu,lambda)     *= -1.0
                   T20xx(lambda,nu)      = T19xx(nu,lambda)
#
                   T21xx(nu,sigma)       = aoint(mu,nu,lambda,sigma)*LDHFb(mu,lambda)
                   T21xx(nu,sigma)      *= -1.0
                   T22xx(sigma,nu)       = T21xx(nu,sigma)

                   LFpq_a(nu,mu)        += T3xx(nu,mu)
                   LFpq_a(mu,nu)        += T2xx(mu,nu)
                   LFpq_b(mu,nu)        += T2xx(mu,nu)
                   LFpq_b(nu,mu)        += T3xx(nu,mu)
                   LFpq_a(lambda,sigma) += T5xx(lambda,sigma)
                   LFpq_b(lambda,sigma) += T5xx(lambda,sigma)
                   LFpq_a(sigma,lambda) += T6xx(sigma,lambda)
                   LFpq_b(sigma,lambda) += T6xx(sigma,lambda)
                   LFpq_a(mu,lambda)    += T7xx(mu,lambda)
                   LFpq_a(lambda,mu)    += T8xx(lambda,mu)
                   LFpq_a(mu,sigma)     += T9xx(mu,sigma)
                   LFpq_a(sigma,mu)     += T10xx(sigma,mu)
                   LFpq_a(nu,lambda)    += T11xx(nu,lambda)
                   LFpq_a(lambda,nu)    += T12xx(lambda,nu)
                   LFpq_a(nu,sigma)     += T13xx(nu,sigma)
                   LFpq_a(sigma,nu)     += T14xx(sigma,nu)
                   LFpq_b(mu,lambda)    += T15xx(mu,lambda)
                   LFpq_b(lambda,mu)    += T16xx(lambda,mu)
                   LFpq_b(mu,sigma)     += T17xx(mu,sigma)
                   LFpq_b(sigma,mu)     += T18xx(sigma,mu)
                   LFpq_b(nu,lambda)    += T19xx(nu,lambda)
                   LFpq_b(lambda,nu)    += T20xx(lambda,nu)
                   LFpq_b(nu,sigma)     += T21xx(nu,sigma)
                   LFpq_b(sigma,nu)     += T22xx(sigma,nu)
#
             ENDDO lambda
#
       ENDPARDO mu, nu, sigma
#
############ CLASS 1  ############
#  Do one-center part (mu mu |mu mu)
#
       PARDO mu, sigma, nu
                WHERE nu == mu
                WHERE sigma == mu
                DO lambda
                   WHERE lambda == mu 
#          
                            compute_integrals     aoint(mu,nu,lambda,sigma)
#
                            T1xx(lambda,sigma)  = LDHFa(lambda,sigma)
                            T1xx(lambda,sigma) += LDHFb(lambda,sigma)
                            T2xx(mu,nu)         = aoint(mu,nu,lambda,sigma)*T1xx(lambda,sigma)
#
                            T3xx(mu,lambda)     = aoint(mu,nu,lambda,sigma)*LDHFa(nu,sigma)
                            T3xx(mu,lambda)    *= -1.0
#
                            T4xx(mu,lambda)     = aoint(mu,nu,lambda,sigma)*LDHFb(nu,sigma)
                            T4xx(mu,lambda)    *= -1.0
#
                            LFpq_a(mu,nu)      += T2xx(mu,nu)
                            LFpq_b(mu,nu)      += T2xx(mu,nu)
                            LFpq_a(mu,lambda)  += T3xx(mu,lambda)
                            LFpq_b(mu,lambda)  += T4xx(mu,lambda)
#
                ENDDO lambda
       ENDPARDO mu, sigma, nu
#
############ CLASS 2  ############
#  Do two-center part (mu mu |nu nu)->(nu nu |mu mu )
#
       PARDO mu, nu, sigma
#
             WHERE mu == nu
#
                T3xx(mu,nu)  = LDHFa(mu,nu)
                T3xx(mu,nu) += LDHFb(mu,nu)
#
                DO lambda
                   WHERE mu     < lambda
                   WHERE lambda == sigma
#
                      compute_integrals aoint(mu,nu,lambda,sigma)
#
                      T1xx(lambda,sigma)    = LDHFa(lambda,sigma)
                      T1xx(lambda,sigma)   += LDHFb(lambda,sigma)
#
                      T2xx(mu,nu)           = aoint(mu,nu,lambda,sigma)*T1xx(lambda,sigma)
#
                      T4xx(lambda,sigma)    = aoint(mu,nu,lambda,sigma)*T3xx(mu,nu)
#
                      T5xx(mu,lambda)       = aoint(mu,nu,lambda,sigma)*LDHFa(nu,sigma)
                      T5xx(mu,lambda)      *= -1.0
                      T6xx(lambda,mu)       = T5xx(mu,lambda)
#
                      T7xx(mu,lambda)       = aoint(mu,nu,lambda,sigma)*LDHFb(nu,sigma)
                      T7xx(mu,lambda)      *= -1.0
                      T8xx(lambda,mu)       = T7xx(mu,lambda)
#
                      LFpq_a(mu,nu)        += T2xx(mu,nu)
                      LFpq_b(mu,nu)        += T2xx(mu,nu)
                      LFpq_a(lambda,sigma) += T4xx(lambda,sigma)
                      LFpq_b(lambda,sigma) += T4xx(lambda,sigma)
                      LFpq_a(mu,lambda)    += T5xx(mu,lambda)
                      LFpq_a(lambda,mu)    += T6xx(lambda,mu)
                      LFpq_b(mu,lambda)    += T7xx(mu,lambda)
                      LFpq_b(lambda,mu)    += T8xx(lambda,mu)
#
             ENDDO lambda
#
       ENDPARDO mu, nu, sigma 
#
############ END CLASS 2  ############
#
############ CLASS 4  ############
#  Do two-center part (mu nu |mu nu)->(mu nu |nu mu ),(nu mu|mu nu),(nu mu|nu mu)
#
       PARDO mu, nu, sigma
                WHERE mu < nu
                WHERE nu == sigma
             DO lambda
#
                WHERE mu == lambda
                WHERE lambda < sigma 
#
                   compute_integrals       aoint(mu,nu,lambda,sigma)
#
                   T1xx(lambda,sigma)    = LDHFa(lambda,sigma)
                   T1xx(lambda,sigma)   += LDHFb(lambda,sigma)
#
                   T2xx(mu,nu)           = aoint(mu,nu,lambda,sigma)*T1xx(lambda,sigma)
                   T2xx(mu,nu)          *= 2.0
                   T3xx(nu,mu)           = T2xx(mu,nu)
#
                   T4xx(mu,lambda)       = aoint(mu,nu,lambda,sigma)*LDHFa(nu,sigma)
                   T4xx(mu,lambda)      *= -1.0
#
                   T5xx(mu,sigma)        = aoint(mu,nu,lambda,sigma)*LDHFa(nu,lambda)
                   T5xx(mu,sigma)       *= -1.0
#
                   T6xx(nu,lambda)       = aoint(mu,nu,lambda,sigma)*LDHFa(mu,sigma)
                   T6xx(nu,lambda)      *= -1.0
#
                   T7xx(nu,sigma)        = aoint(mu,nu,lambda,sigma)*LDHFa(mu,lambda)
                   T7xx(nu,sigma)       *= -1.0
#
                   T8xx(mu,lambda)       = aoint(mu,nu,lambda,sigma)*LDHFb(nu,sigma)
                   T8xx(mu,lambda)      *= -1.0
#
                   T9xx(mu,sigma)        = aoint(mu,nu,lambda,sigma)*LDHFb(nu,lambda)
                   T9xx(mu,sigma)       *= -1.0
#
                   T10xx(nu,lambda)      = aoint(mu,nu,lambda,sigma)*LDHFb(mu,sigma)
                   T10xx(nu,lambda)     *= -1.0
#
                   T11xx(nu,sigma)       = aoint(mu,nu,lambda,sigma)*LDHFb(mu,lambda)
                   T11xx(nu,sigma)      *= -1.0
#
                   LFpq_a(mu,nu)        += T2xx(mu,nu)
                   LFpq_b(mu,nu)        += T2xx(mu,nu)
                   LFpq_a(nu,mu)        += T3xx(nu,mu)
                   LFpq_b(nu,mu)        += T3xx(nu,mu)
                   LFpq_a(mu,lambda)    += T4xx(mu,lambda)
                   LFpq_a(mu,sigma)     += T5xx(mu,sigma)
                   LFpq_a(nu,lambda)    += T6xx(nu,lambda)
                   LFpq_a(nu,sigma)     += T7xx(nu,sigma)
                   LFpq_b(mu,lambda)    += T8xx(mu,lambda)
                   LFpq_b(mu,sigma)     += T9xx(mu,sigma)
                   LFpq_b(nu,lambda)    += T10xx(nu,lambda)
                   LFpq_b(nu,sigma)     += T11xx(nu,sigma)
#
             ENDDO lambda
#
       ENDPARDO mu, nu, sigma 
#
       execute sip_barrier
       execute load_balance_on
#
       DO mu   
       DO nu   
#
          PUT Fpq_a(mu,nu) += LFpq_a(mu,nu) 
          PUT Fpq_b(mu,nu) += LFpq_b(mu,nu) 
#
       ENDDO nu   
       ENDDO mu    
#
       deallocate LDHFa(*,*) 
       deallocate LDHFb(*,*) 
       deallocate LFpq_a(*,*) 
       deallocate LFpq_b(*,*) 
#
       ENDPROC FOCK_MATRIX  
#      ------------------- 
#
# ---------------------------------------------------------------------------- 
#
       PROC HF_ENERGY  
#      -------------- 
#
#      The HF energy is computed from the HF density (DHFa(b)) and the 
#      Fock matrix (Fpq_a(b)). 
#      --------------------------------------------------------------- 
#
       energy = 0.0
       esum = 0.0 
       PARDO mu, nu 
#
             GET Fpq_a(mu,nu)
             GET Fpq_b(mu,nu)
             GET DHFa(mu,nu) 
             GET DHFb(mu,nu) 
#
             Txx(mu,nu)   = oed_nai(mu,nu)  
             Txx(mu,nu)  += oed_kin(mu,nu)  
#
             T1xx(mu,nu)  = Txx(mu,nu) 
             T1xx(mu,nu) += Fpq_a(mu,nu) 
#
             etemp        = T1xx(mu,nu)*DHFa(mu,nu)  
             esum        += etemp 
#
             T1xx(mu,nu)  = Txx(mu,nu) 
             T1xx(mu,nu) += Fpq_b(mu,nu) 
#
             etemp        = T1xx(mu,nu)*DHFb(mu,nu)  
             esum        += etemp 
#
       ENDPARDO mu, nu 
       execute sip_barrier 

       esum *= 0.5 
       collective energy += esum 
       energy += scfeneg 
#
      #execute print_scalar energy 
#
       ENDPROC HF_ENERGY   
#      ----------------- 
#
# ---------------------------------------------------------------------------- 
#
       PROC OVER_HALF 
#      -------------- 
#
#      Diagonalize the overlap matrix, invert and take the square
#      root of the diagonal elements. 
#      -------------------------------------------------------------- 
#
       execute eig_sr_inv oed_ovl x1   
#
#      Form the Q-matrix --> U s**{-1/2) 
#      --------------------------------- 
#
       PARDO mu, nu  
#
          Txx(mu,nu) = 0.0 
#
          DO lambda 
             T1xx(mu,nu) = x1(mu,lambda)*oed_ovl(lambda,nu) 
             Txx(mu,nu) += T1xx(mu,nu) 
          ENDDO lambda  
#
          PUT Qxx(mu,nu) = Txx(mu,nu)  
#
       ENDPARDO mu, nu  
#
      #execute print_scalar scfeneg
       ENDPROC OVER_HALF 
#      ----------------- 
#
# ---------------------------------------------------------------------------- 
#
       PROC FOCK_TRANSPOSE 
#      ------------------- 
#
#      Form the transposed Fock matrix --> Q+ F Q 
#      ------------------------------------------ 
#
       PARDO mu, sigma   
#
             TAxx(mu,sigma) = 0.0 
             TBxx(mu,sigma) = 0.0 
#
             DO lambda 
#
                GET Fpq_a(lambda,sigma) 
                GET Fpq_b(lambda,sigma) 
                GET Qxx(lambda,mu) 
#
                T1xx(mu,sigma)  = Qxx(lambda,mu)*Fpq_a(lambda,sigma)  
                TAxx(mu,sigma) += T1xx(mu,sigma) 
#
                T1xx(mu,sigma)  = Qxx(lambda,mu)*Fpq_b(lambda,sigma)  
                TBxx(mu,sigma) += T1xx(mu,sigma) 
#
             ENDDO lambda 
#
             DO nu 
#
                GET Qxx(sigma,nu) 
#
                T1xx(mu,nu) =        TAxx(mu,sigma)*Qxx(sigma,nu) 
                PUT FTpq_a(mu,nu) += T1xx(mu,nu) 
#
                T2xx(mu,nu)        = TBxx(mu,sigma)*Qxx(sigma,nu) 
                PUT FTpq_b(mu,nu) += T2xx(mu,nu) 
#
             ENDDO nu 
#
       ENDPARDO mu, sigma   
#
       ENDPROC FOCK_TRANSPOSE 
#      ---------------------- 
#
# ---------------------------------------------------------------------------- 
#
       PROC FOCK_DIAG  
#      -------------- 
#
#      First put the transposed Fock arrays into static arrays 
#      ------------------------------------------------------- 
#
       DO mu   
       DO nu  
#
          GET             FTpq_a(mu,nu) 
          GET             FTpq_b(mu,nu)
#
          FSpq_a(mu,nu) = FTpq_a(mu,nu)
          FSpq_b(mu,nu) = FTpq_b(mu,nu)
#
       ENDDO nu  
       ENDDO mu   
#
       execute eig FSpq_a ca
       execute eig FSpq_b Cb  
#
       ENDPROC FOCK_DIAG 
#      ----------------- 
#
# ---------------------------------------------------------------------------- 
#
       PROC C_BTRAN 
#      ------------ 
#
#      Transform the coefficient array back to the original basis 
#      ---------------------------------------------------------- 
#
       PARDO mu, p  
#
          Txp(mu,p) = 0.0 
#
          DO nu 
#
             GET          Qxx(mu,nu) 
#
             T1xp(mu,p) = Qxx(mu,nu)*ca(nu,p)   
             Txp(mu,p) += T1xp(mu,p) 
#
          ENDDO nu 
#
          PUT CBT_a(mu,p) = Txp(mu,p) 
#
       ENDPARDO mu, p  
#
       PARDO mu, q
# 
          Txq(mu,q) = 0.0 
#
          DO nu 
#
             GET          Qxx(mu,nu) 
#
             T1xq(mu,q) = Qxx(mu,nu)*cb(nu,q)   
             Txq(mu,q) += T1xq(mu,q) 
#
          ENDDO nu 
#
          PUT CBT_b(mu,q) = Txq(mu,q) 
#
       ENDPARDO mu, q
       execute sip_barrier 
#
#      Put the transformed coefficients into static arrays 
#      --------------------------------------------------- 
#
       DO mu 
       DO p 
          GET        CBT_a(mu,p) 
          ca(mu,p) = CBT_a(mu,p) 
       ENDDO p 
       ENDDO mu  
#
       DO mu 
       DO q 
          GET        CBT_b(mu,q) 
          cb(mu,q) = CBT_b(mu,q) 
       ENDDO q 
       ENDDO mu  
#
       ENDPROC C_BTRAN 
#      --------------- 
#
# ---------------------------------------------------------------------------- 
#
       PROC HF_DAMP  
#      ------------ 
#
       PARDO mu, nu 
#
             GET DHFa(mu,nu) 
             GET DHFb(mu,nu) 
             GET DHFa_old(mu,nu) 
             GET DHFb_old(mu,nu) 
#
             Txx(mu,nu)   = DHFa(mu,nu) 
             T1xx(mu,nu)  = DHFa_old(mu,nu) 
             T1xx(mu,nu) *= damp  
             Txx(mu,nu)  += T1xx(mu,nu) 
             Txx(mu,nu)  *= damp1 
             PUT DHFa(mu,nu) = Txx(mu,nu)  
#
             Txx(mu,nu)   = DHFb(mu,nu) 
             T1xx(mu,nu)  = DHFb_old(mu,nu) 
             T1xx(mu,nu) *= damp  
             Txx(mu,nu)  += T1xx(mu,nu) 
             Txx(mu,nu)  *= damp1 
             PUT DHFb(mu,nu) = Txx(mu,nu)  
#
       ENDPARDO mu, nu 
#
       ENDPROC HF_DAMP  
#      --------------- 
#
# ---------------------------------------------------------------------------- 
#
       PROC HFDENS_ZERO   
#      ----------------  
#  
#      Zero out the n-1'th density array. 
#      ---------------------------------- 
#
       PARDO mu, nu 
#
             Txx(mu,nu)   = 0.0   
             PUT DHFa_old(mu,nu) = Txx(mu,nu)  
             PUT DHFb_old(mu,nu) = Txx(mu,nu)  
#
       ENDPARDO mu, nu 
#
       ENDPROC HFDENS_ZERO   
#      ------------------- 
#
# ---------------------------------------------------------------------------- 
#
       PROC HFDENS_REPLACE    
#      -------------------   
#
#      Replace the 'old' HF density by the 'new' HF density. 
#      ----------------------------------------------------- 
#
       PARDO mu, nu 
#
             GET DHFa(mu,nu) 
             GET DHFb(mu,nu) 
             PUT DHFa_old(mu,nu) = DHFa(mu,nu)  
             PUT DHFb_old(mu,nu) = DHFb(mu,nu)  
#
       ENDPARDO mu, nu 
#
       ENDPROC HFDENS_REPLACE    
#      ----------------------  
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
       PROC SETUP_DIIS 
#      --------------- 
#
       execute diis_setup Tb11
       execute diis_setup Tb12
       execute diis_setup Tb13
       execute diis_setup Tb14
       execute diis_setup Tb15
       execute diis_setup Tb16
       execute diis_setup Tb17
       execute diis_setup Tb18
       execute diis_setup Tb19
       execute diis_setup Tb110 

       execute diis_setup Tb22
       execute diis_setup Tb23
       execute diis_setup Tb24
       execute diis_setup Tb25
       execute diis_setup Tb26
       execute diis_setup Tb27
       execute diis_setup Tb28
       execute diis_setup Tb29
       execute diis_setup Tb210 

       execute diis_setup Tb33
       execute diis_setup Tb34
       execute diis_setup Tb35
       execute diis_setup Tb36
       execute diis_setup Tb37
       execute diis_setup Tb38
       execute diis_setup Tb39
       execute diis_setup Tb310 

       execute diis_setup Tb44
       execute diis_setup Tb45
       execute diis_setup Tb46
       execute diis_setup Tb47
       execute diis_setup Tb48
       execute diis_setup Tb49
       execute diis_setup Tb410 

       execute diis_setup Tb55
       execute diis_setup Tb56
       execute diis_setup Tb57
       execute diis_setup Tb58
       execute diis_setup Tb59
       execute diis_setup Tb510 

       execute diis_setup Tb66
       execute diis_setup Tb67
       execute diis_setup Tb68
       execute diis_setup Tb69
       execute diis_setup Tb610 

       execute diis_setup Tb77
       execute diis_setup Tb78
       execute diis_setup Tb79
       execute diis_setup Tb710 

       execute diis_setup Tb88
       execute diis_setup Tb89
       execute diis_setup Tb810 

       execute diis_setup Tb99
       execute diis_setup Tb910 

       execute diis_setup Tb1010 
#
       ENDPROC SETUP_DIIS 
#      ------------------ 
#
# ---------------------------------------------------------------------------- 
#
#
# ---------------------------------------------------------------------------- 
#
       PROC GEN_1HISTORY  
#      ------------------  
#
       PARDO a, i 
             tai(a,i)     = 0.0 
             PUT Fai(a,i) = tai(a,i) 
       ENDPARDO a, i 
#
       PARDO b, j 
             tbj(b,j)     = 0.0 
             PUT Fbj(b,j) = tbj(b,j) 
       ENDPARDO b, j 
#
       execute sip_barrier 
#  
       PARDO mu, nu  
#
             GET Fpq_a(mu,nu)  
             GET Fpq_b(mu,nu)  
#
             DO i 
#
                txi(mu,i) = Fpq_a(mu,nu)*ca(nu,i) 
#
                DO a 
#
                   tai(a,i)      = txi(mu,i)*ca(mu,a) 
                   PUT Fai(a,i) += tai(a,i) 
#
                ENDDO a 
#
             ENDDO i 
#
             DO j 
#
                txj(mu,j) = Fpq_b(mu,nu)*cb(nu,j) 
#
                DO b 
#
                   tbj(b,j)      = txj(mu,j)*cb(mu,b) 
                   PUT Fbj(b,j) += tbj(b,j) 
#
                ENDDO b 
#
             ENDDO j 
#
       ENDPARDO mu, nu  
#
       if kiter >= 3 # (scf_beg - scf_order + 1)  
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                GET              Fpq_b(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F1a(mu,nu) = txx(mu,nu)  
                txx(mu,nu)     = Fpq_b(mu,nu) 
                PUT F1b(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       execute sip_barrier 
#
       PARDO a, i 
#
             GET Fai(a,i) 
#
             if kiter >= 3  # (scf_beg - scf_order + 1) 
                PUT F1ai(a,i) = Fai(a,i) 
             endif # kiter  
#
       ENDPARDO a, i 
#
       PARDO b, j 
#
             GET Fbj(b,j) 
#
             if kiter >= 3  # (scf_beg - scf_order + 1) 
                PUT F1bj(b,j) = Fbj(b,j) 
             endif # kiter  
#
       ENDPARDO b, j 
#
       execute sip_barrier 
#
       ENDPROC GEN_1HISTORY  
#      ---------------------  
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
       PROC GEN_2HISTORY  
#      ------------------  
#
       PARDO a, i 
             tai(a,i)     = 0.0 
             PUT Fai(a,i) = tai(a,i) 
       ENDPARDO a, i 
#
       PARDO b, j 
             tbj(b,j)     = 0.0 
             PUT Fbj(b,j) = tbj(b,j) 
       ENDPARDO b, j 
#
       execute sip_barrier 
#  
       PARDO mu, nu  
#
             GET Fpq_a(mu,nu)  
             GET Fpq_b(mu,nu)  
#
             DO i 
#
                txi(mu,i) = Fpq_a(mu,nu)*ca(nu,i) 
#
                DO a 
#
                   tai(a,i)      = txi(mu,i)*ca(mu,a) 
                   PUT Fai(a,i) += tai(a,i) 
#
                ENDDO a 
#
             ENDDO i 
#
             DO j 
#
                txj(mu,j) = Fpq_b(mu,nu)*cb(nu,j) 
#
                DO b 
#
                   tbj(b,j)      = txj(mu,j)*cb(mu,b) 
                   PUT Fbj(b,j) += tbj(b,j) 
#
                ENDDO b 
#
             ENDDO j 
#
       ENDPARDO mu, nu  
#
       if kiter == 3 # (scf_beg - scf_order + 1)  
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                GET              Fpq_b(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F1a(mu,nu) = txx(mu,nu)  
                txx(mu,nu)     = Fpq_b(mu,nu) 
                PUT F1b(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter >= 4 # (scf_beg - scf_order + 2)  
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                GET              Fpq_b(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F2a(mu,nu) = txx(mu,nu)  
                txx(mu,nu)     = Fpq_b(mu,nu) 
                PUT F2b(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       execute sip_barrier 
#
       PARDO a, i 
#
             GET Fai(a,i) 
#
             if kiter == 3  # (scf_beg - scf_order + 1) 
                PUT F1ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter >= 4  # (scf_beg - scf_order + 2) 
                PUT F2ai(a,i) = Fai(a,i) 
             endif # kiter  
#
       ENDPARDO a, i 
#
       PARDO b, j 
#
             GET Fbj(b,j) 
#
             if kiter == 3  # (scf_beg - scf_order + 1) 
                PUT F1bj(b,j) = Fbj(b,j) 
             endif # kiter  
#
             if kiter >= 4  # (scf_beg - scf_order + 2) 
                PUT F2bj(b,j) = Fbj(b,j) 
             endif # kiter  
#
       ENDPARDO b, j 
#
       execute sip_barrier 
#
       ENDPROC GEN_2HISTORY  
#      ---------------------  
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
       PROC GEN_3HISTORY  
#      ------------------  
#
       PARDO a, i 
             tai(a,i)     = 0.0 
             PUT Fai(a,i) = tai(a,i) 
       ENDPARDO a, i 
#
       PARDO b, j 
             tbj(b,j)     = 0.0 
             PUT Fbj(b,j) = tbj(b,j) 
       ENDPARDO b, j 
#
       execute sip_barrier 
#  
       PARDO mu, nu  
#
             GET Fpq_a(mu,nu)  
             GET Fpq_b(mu,nu)  
#
             DO i 
#
                txi(mu,i) = Fpq_a(mu,nu)*ca(nu,i) 
#
                DO a 
#
                   tai(a,i)      = txi(mu,i)*ca(mu,a) 
                   PUT Fai(a,i) += tai(a,i) 
#
                ENDDO a 
#
             ENDDO i 
#
             DO j 
#
                txj(mu,j) = Fpq_b(mu,nu)*cb(nu,j) 
#
                DO b 
#
                   tbj(b,j)      = txj(mu,j)*cb(mu,b) 
                   PUT Fbj(b,j) += tbj(b,j) 
#
                ENDDO b 
#
             ENDDO j 
#
       ENDPARDO mu, nu  
#
       if kiter == 3 # (scf_beg - scf_order + 1)  
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                GET              Fpq_b(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F1a(mu,nu) = txx(mu,nu)  
                txx(mu,nu)     = Fpq_b(mu,nu) 
                PUT F1b(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter == 4 # (scf_beg - scf_order + 2)  
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                GET              Fpq_b(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F2a(mu,nu) = txx(mu,nu)  
                txx(mu,nu)     = Fpq_b(mu,nu) 
                PUT F2b(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter >= 5 # (scf_beg - scf_order + 3)  
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                GET              Fpq_b(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F3a(mu,nu) = txx(mu,nu)  
                txx(mu,nu)     = Fpq_b(mu,nu) 
                PUT F3b(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       execute sip_barrier 
#
       PARDO a, i 
#
             GET Fai(a,i) 
#
             if kiter == 3  # (scf_beg - scf_order + 1) 
                PUT F1ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter == 4  # (scf_beg - scf_order + 2) 
                PUT F2ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter >= 5  # (scf_beg - scf_order + 3) 
                PUT F3ai(a,i) = Fai(a,i) 
             endif # kiter  
#
       ENDPARDO a, i 
#
       PARDO b, j 
#
             GET Fbj(b,j) 
#
             if kiter == 3  # (scf_beg - scf_order + 1) 
                PUT F1bj(b,j) = Fbj(b,j) 
             endif # kiter  
#
             if kiter == 4  # (scf_beg - scf_order + 2) 
                PUT F2bj(b,j) = Fbj(b,j) 
             endif # kiter  
#
             if kiter >= 5  # (scf_beg - scf_order + 3) 
                PUT F3bj(b,j) = Fbj(b,j) 
             endif # kiter  
#
       ENDPARDO b, j 
#
       execute sip_barrier 
#
       ENDPROC GEN_3HISTORY  
#      ---------------------  
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
       PROC GEN_4HISTORY  
#      ------------------  
#
       PARDO a, i 
             tai(a,i)     = 0.0 
             PUT Fai(a,i) = tai(a,i) 
       ENDPARDO a, i 
#
       PARDO b, j 
             tbj(b,j)     = 0.0 
             PUT Fbj(b,j) = tbj(b,j) 
       ENDPARDO b, j 
#
       execute sip_barrier 
#  
       PARDO mu, nu  
#
             GET Fpq_a(mu,nu)  
             GET Fpq_b(mu,nu)  
#
             DO i 
#
                txi(mu,i) = Fpq_a(mu,nu)*ca(nu,i) 
#
                DO a 
#
                   tai(a,i)      = txi(mu,i)*ca(mu,a) 
                   PUT Fai(a,i) += tai(a,i) 
#
                ENDDO a 
#
             ENDDO i 
#
             DO j 
#
                txj(mu,j) = Fpq_b(mu,nu)*cb(nu,j) 
#
                DO b 
#
                   tbj(b,j)      = txj(mu,j)*cb(mu,b) 
                   PUT Fbj(b,j) += tbj(b,j) 
#
                ENDDO b 
#
             ENDDO j 
#
       ENDPARDO mu, nu  
#
       if kiter == 3 # (scf_beg - scf_order + 1)  
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                GET              Fpq_b(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F1a(mu,nu) = txx(mu,nu)  
                txx(mu,nu)     = Fpq_b(mu,nu) 
                PUT F1b(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter == 4 # (scf_beg - scf_order + 2)  
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                GET              Fpq_b(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F2a(mu,nu) = txx(mu,nu)  
                txx(mu,nu)     = Fpq_b(mu,nu) 
                PUT F2b(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter == 5 # (scf_beg - scf_order + 3)  
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                GET              Fpq_b(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F3a(mu,nu) = txx(mu,nu)  
                txx(mu,nu)     = Fpq_b(mu,nu) 
                PUT F3b(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter >= 6 # (scf_beg - scf_order + 4)  
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                GET              Fpq_b(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F4a(mu,nu) = txx(mu,nu)  
                txx(mu,nu)     = Fpq_b(mu,nu) 
                PUT F4b(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       execute sip_barrier 
#
       PARDO a, i 
#
             GET Fai(a,i) 
#
             if kiter == 3  # (scf_beg - scf_order + 1) 
                PUT F1ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter == 4  # (scf_beg - scf_order + 2) 
                PUT F2ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter == 5  # (scf_beg - scf_order + 3) 
                PUT F3ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter >= 6  # (scf_beg - scf_order + 4) 
                PUT F4ai(a,i) = Fai(a,i) 
             endif # kiter  
#
       ENDPARDO a, i 
#
       PARDO b, j 
#
             GET Fbj(b,j) 
#
             if kiter == 3  # (scf_beg - scf_order + 1) 
                PUT F1bj(b,j) = Fbj(b,j) 
             endif # kiter  
#
             if kiter == 4  # (scf_beg - scf_order + 2) 
                PUT F2bj(b,j) = Fbj(b,j) 
             endif # kiter  
#
             if kiter == 5  # (scf_beg - scf_order + 3) 
                PUT F3bj(b,j) = Fbj(b,j) 
             endif # kiter  
#
             if kiter >= 6  # (scf_beg - scf_order + 4) 
                PUT F4bj(b,j) = Fbj(b,j) 
             endif # kiter  
#
       ENDPARDO b, j 
#
       execute sip_barrier 
#
       ENDPROC GEN_4HISTORY  
#      ---------------------  
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
       PROC GEN_5HISTORY  
#      -----------------  
#
       PARDO a, i 
             tai(a,i)     = 0.0 
             PUT Fai(a,i) = tai(a,i) 
       ENDPARDO a, i 
#
       PARDO b, j 
             tbj(b,j)     = 0.0 
             PUT Fbj(b,j) = tbj(b,j) 
       ENDPARDO b, j 
#
       execute sip_barrier 
#  
       PARDO mu, nu  
#
             GET Fpq_a(mu,nu)  
             GET Fpq_b(mu,nu)  
#
             DO i 
#
                txi(mu,i) = Fpq_a(mu,nu)*ca(nu,i) 
#
                DO a 
#
                   tai(a,i)      = txi(mu,i)*ca(mu,a) 
                   PUT Fai(a,i) += tai(a,i) 
#
                ENDDO a 
#
             ENDDO i 
#
             DO j 
#
                txj(mu,j) = Fpq_b(mu,nu)*cb(nu,j) 
#
                DO b 
#
                   tbj(b,j)      = txj(mu,j)*cb(mu,b) 
                   PUT Fbj(b,j) += tbj(b,j) 
#
                ENDDO b 
#
             ENDDO j 
#
       ENDPARDO mu, nu  
#
       if kiter == 3 # (scf_beg - scf_order + 1)  
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                GET              Fpq_b(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F1a(mu,nu) = txx(mu,nu)  
                txx(mu,nu)     = Fpq_b(mu,nu) 
                PUT F1b(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter == 4 # (scf_beg - scf_order + 2)  
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                GET              Fpq_b(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F2a(mu,nu) = txx(mu,nu)  
                txx(mu,nu)     = Fpq_b(mu,nu) 
                PUT F2b(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter == 5 # (scf_beg - scf_order + 3)  
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                GET              Fpq_b(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F3a(mu,nu) = txx(mu,nu)  
                txx(mu,nu)     = Fpq_b(mu,nu) 
                PUT F3b(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter == 6 # (scf_beg - scf_order + 4)  
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                GET              Fpq_b(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F4a(mu,nu) = txx(mu,nu)  
                txx(mu,nu)     = Fpq_b(mu,nu) 
                PUT F4b(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter >= 7 # (scf_beg - scf_order + 5) = scf+beg   
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                GET              Fpq_b(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F5a(mu,nu) = txx(mu,nu)  
                txx(mu,nu)     = Fpq_b(mu,nu) 
                PUT F5b(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       execute sip_barrier 
#
       PARDO a, i 
#
             GET Fai(a,i) 
#
             if kiter == 3  # (scf_beg - scf_order + 1) 
                PUT F1ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter == 4  # (scf_beg - scf_order + 2) 
                PUT F2ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter == 5  # (scf_beg - scf_order + 3) 
                PUT F3ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter == 6  # (scf_beg - scf_order + 4) 
                PUT F4ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter >= 7  # (scf_beg - scf_order + 5) 
                PUT F5ai(a,i) = Fai(a,i) 
             endif # kiter  
#
       ENDPARDO a, i 
#
       PARDO b, j 
#
             GET Fbj(b,j) 
#
             if kiter == 3  # (scf_beg - scf_order + 1) 
                PUT F1bj(b,j) = Fbj(b,j) 
             endif # kiter  
#
             if kiter == 4  # (scf_beg - scf_order + 2) 
                PUT F2bj(b,j) = Fbj(b,j) 
             endif # kiter  
#
             if kiter == 5  # (scf_beg - scf_order + 3) 
                PUT F3bj(b,j) = Fbj(b,j) 
             endif # kiter  
#
             if kiter == 6  # (scf_beg - scf_order + 4) 
                PUT F4bj(b,j) = Fbj(b,j) 
             endif # kiter  
#
             if kiter >= 7  # (scf_beg - scf_order + 5) 
                PUT F5bj(b,j) = Fbj(b,j) 
             endif # kiter  
#
       ENDPARDO b, j 
#
       execute sip_barrier 
#
       ENDPROC GEN_5HISTORY  
#      --------------------  
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
       PROC GEN_6HISTORY  
#      ------------------  
#
       #PARDO a, i 
       #      tai(a,i)     = 0.0 
       #      PUT Fai(a,i) = tai(a,i) 
       #ENDPARDO a, i 
#
       #PARDO b, j 
       #      tbj(b,j)     = 0.0 
       #      PUT Fbj(b,j) = tbj(b,j) 
       #ENDPARDO b, j 
#
       DELETE Fai
       DELETE Fbj
       CREATE Fai
       CREATE Fbj
       execute sip_barrier 
#  
       PARDO mu, nu  
#
             GET Fpq_a(mu,nu)  
             GET Fpq_b(mu,nu)  
#
             DO i 
#
                txi(mu,i) = Fpq_a(mu,nu)*ca(nu,i) 
#
                DO a 
#
                   tai(a,i)      = txi(mu,i)*ca(mu,a) 
                   PUT Fai(a,i) += tai(a,i) 
#
                ENDDO a 
#
             ENDDO i 
#
             DO j 
#
                txj(mu,j) = Fpq_b(mu,nu)*cb(nu,j) 
#
                DO b 
#
                   tbj(b,j)      = txj(mu,j)*cb(mu,b) 
                   PUT Fbj(b,j) += tbj(b,j) 
#
                ENDDO b 
#
             ENDDO j 
#
       ENDPARDO mu, nu  

#
       if kiter == 3 # (scf_beg - scf_order + 1)  
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                GET              Fpq_b(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F1a(mu,nu) = txx(mu,nu)  
                txx(mu,nu)     = Fpq_b(mu,nu) 
                PUT F1b(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter == 4 # (scf_beg - scf_order + 2)  
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                GET              Fpq_b(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F2a(mu,nu) = txx(mu,nu)  
                txx(mu,nu)     = Fpq_b(mu,nu) 
                PUT F2b(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter == 5 # (scf_beg - scf_order + 3)  
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                GET              Fpq_b(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F3a(mu,nu) = txx(mu,nu)  
                txx(mu,nu)     = Fpq_b(mu,nu) 
                PUT F3b(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter == 6 # (scf_beg - scf_order + 4)  
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                GET              Fpq_b(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F4a(mu,nu) = txx(mu,nu)  
                txx(mu,nu)     = Fpq_b(mu,nu) 
                PUT F4b(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter == 7 # (scf_beg - scf_order + 5) = scf+beg   
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                GET              Fpq_b(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F5a(mu,nu) = txx(mu,nu)  
                txx(mu,nu)     = Fpq_b(mu,nu) 
                PUT F5b(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter >= 8 # (scf_beg - scf_order + 6) = scf+beg   
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                GET              Fpq_b(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F6a(mu,nu) = txx(mu,nu)  
                txx(mu,nu)     = Fpq_b(mu,nu) 
                PUT F6b(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       execute sip_barrier 
#
       PARDO a, i 
#
             GET Fai(a,i) 
#
             if kiter == 3  # (scf_beg - scf_order + 1) 
                PUT F1ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter == 4  # (scf_beg - scf_order + 2) 
                PUT F2ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter == 5  # (scf_beg - scf_order + 3) 
                PUT F3ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter == 6  # (scf_beg - scf_order + 4) 
                PUT F4ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter == 7  # (scf_beg - scf_order + 5) 
                PUT F5ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter >= 8  # (scf_beg - scf_order + 6) 
                PUT F6ai(a,i) = Fai(a,i) 
             endif # kiter  
#
       ENDPARDO a, i 
#
       PARDO b, j 
#
             GET Fbj(b,j) 
#
             if kiter == 3  # (scf_beg - scf_order + 1) 
                PUT F1bj(b,j) = Fbj(b,j) 
             endif # kiter  
#
             if kiter == 4  # (scf_beg - scf_order + 2) 
                PUT F2bj(b,j) = Fbj(b,j) 
             endif # kiter  
#
             if kiter == 5  # (scf_beg - scf_order + 3) 
                PUT F3bj(b,j) = Fbj(b,j) 
             endif # kiter  
#
             if kiter == 6  # (scf_beg - scf_order + 4) 
                PUT F4bj(b,j) = Fbj(b,j) 
             endif # kiter  
#
             if kiter == 7  # (scf_beg - scf_order + 5) 
                PUT F5bj(b,j) = Fbj(b,j) 
             endif # kiter  
#
             if kiter >= 8  # (scf_beg - scf_order + 6) 
                PUT F6bj(b,j) = Fbj(b,j) 
             endif # kiter  
#
       ENDPARDO b, j 
#
       execute sip_barrier 
#
       ENDPROC GEN_6HISTORY  
#      ---------------------  
#
# ---------------------------------------------------------------------------- 
#
#
# ---------------------------------------------------------------------------- 
#
       PROC GEN_7HISTORY  
#      ------------------  
#
       PARDO a, i 
             tai(a,i)     = 0.0 
             PUT Fai(a,i) = tai(a,i) 
       ENDPARDO a, i 
#
       PARDO b, j 
             tbj(b,j)     = 0.0 
             PUT Fbj(b,j) = tbj(b,j) 
       ENDPARDO b, j 
#
       execute sip_barrier 
#  
       PARDO mu, nu  
#
             GET Fpq_a(mu,nu)  
             GET Fpq_b(mu,nu)  
#
             DO i 
#
                txi(mu,i) = Fpq_a(mu,nu)*ca(nu,i) 
#
                DO a 
#
                   tai(a,i)      = txi(mu,i)*ca(mu,a) 
                   PUT Fai(a,i) += tai(a,i) 
#
                ENDDO a 
#
             ENDDO i 
#
             DO j 
#
                txj(mu,j) = Fpq_b(mu,nu)*cb(nu,j) 
#
                DO b 
#
                   tbj(b,j)      = txj(mu,j)*cb(mu,b) 
                   PUT Fbj(b,j) += tbj(b,j) 
#
                ENDDO b 
#
             ENDDO j 
#
       ENDPARDO mu, nu  
#
       if kiter == 3 # (scf_beg - scf_order + 1)  
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                GET              Fpq_b(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F1a(mu,nu) = txx(mu,nu)  
                txx(mu,nu)     = Fpq_b(mu,nu) 
                PUT F1b(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter == 4 # (scf_beg - scf_order + 2)  
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                GET              Fpq_b(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F2a(mu,nu) = txx(mu,nu)  
                txx(mu,nu)     = Fpq_b(mu,nu) 
                PUT F2b(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter == 5 # (scf_beg - scf_order + 3)  
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                GET              Fpq_b(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F3a(mu,nu) = txx(mu,nu)  
                txx(mu,nu)     = Fpq_b(mu,nu) 
                PUT F3b(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter == 6 # (scf_beg - scf_order + 4)  
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                GET              Fpq_b(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F4a(mu,nu) = txx(mu,nu)  
                txx(mu,nu)     = Fpq_b(mu,nu) 
                PUT F4b(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter == 7 # (scf_beg - scf_order + 5) = scf+beg   
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                GET              Fpq_b(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F5a(mu,nu) = txx(mu,nu)  
                txx(mu,nu)     = Fpq_b(mu,nu) 
                PUT F5b(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter == 8 # (scf_beg - scf_order + 6) = scf+beg   
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                GET              Fpq_b(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F6a(mu,nu) = txx(mu,nu)  
                txx(mu,nu)     = Fpq_b(mu,nu) 
                PUT F6b(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter >= 9 # (scf_beg - scf_order + 7) = scf+beg   
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                GET              Fpq_b(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F7a(mu,nu) = txx(mu,nu)  
                txx(mu,nu)     = Fpq_b(mu,nu) 
                PUT F7b(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       execute sip_barrier 
#
       PARDO a, i 
#
             GET Fai(a,i) 
#
             if kiter == 3  # (scf_beg - scf_order + 1) 
                PUT F1ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter == 4  # (scf_beg - scf_order + 2) 
                PUT F2ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter == 5  # (scf_beg - scf_order + 3) 
                PUT F3ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter == 6  # (scf_beg - scf_order + 4) 
                PUT F4ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter == 7  # (scf_beg - scf_order + 5) 
                PUT F5ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter == 8  # (scf_beg - scf_order + 6) 
                PUT F6ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter >= 9  # (scf_beg - scf_order + 7) 
                PUT F7ai(a,i) = Fai(a,i) 
             endif # kiter  
#
       ENDPARDO a, i 
#
       PARDO b, j 
#
             GET Fbj(b,j) 
#
             if kiter == 3  # (scf_beg - scf_order + 1) 
                PUT F1bj(b,j) = Fbj(b,j) 
             endif # kiter  
#
             if kiter == 4  # (scf_beg - scf_order + 2) 
                PUT F2bj(b,j) = Fbj(b,j) 
             endif # kiter  
#
             if kiter == 5  # (scf_beg - scf_order + 3) 
                PUT F3bj(b,j) = Fbj(b,j) 
             endif # kiter  
#
             if kiter == 6  # (scf_beg - scf_order + 4) 
                PUT F4bj(b,j) = Fbj(b,j) 
             endif # kiter  
#
             if kiter == 7  # (scf_beg - scf_order + 5) 
                PUT F5bj(b,j) = Fbj(b,j) 
             endif # kiter  
#
             if kiter == 8  # (scf_beg - scf_order + 6) 
                PUT F6bj(b,j) = Fbj(b,j) 
             endif # kiter  
#
             if kiter >= 9  # (scf_beg - scf_order + 7) 
                PUT F7bj(b,j) = Fbj(b,j) 
             endif # kiter  
#
       ENDPARDO b, j 
#
       execute sip_barrier 
#
       ENDPROC GEN_7HISTORY  
#      ---------------------  
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
       PROC GEN_8HISTORY  
#      ------------------  
#
       PARDO a, i 
             tai(a,i)     = 0.0 
             PUT Fai(a,i) = tai(a,i) 
       ENDPARDO a, i 
#
       PARDO b, j 
             tbj(b,j)     = 0.0 
             PUT Fbj(b,j) = tbj(b,j) 
       ENDPARDO b, j 
#
       execute sip_barrier 
#  
       PARDO mu, nu  
#
             GET Fpq_a(mu,nu)  
             GET Fpq_b(mu,nu)  
#
             DO i 
#
                txi(mu,i) = Fpq_a(mu,nu)*ca(nu,i) 
#
                DO a 
#
                   tai(a,i)      = txi(mu,i)*ca(mu,a) 
                   PUT Fai(a,i) += tai(a,i) 
#
                ENDDO a 
#
             ENDDO i 
#
             DO j 
#
                txj(mu,j) = Fpq_b(mu,nu)*cb(nu,j) 
#
                DO b 
#
                   tbj(b,j)      = txj(mu,j)*cb(mu,b) 
                   PUT Fbj(b,j) += tbj(b,j) 
#
                ENDDO b 
#
             ENDDO j 
#
       ENDPARDO mu, nu  
#
       if kiter == 3 # (scf_beg - scf_order + 1)  
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                GET              Fpq_b(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F1a(mu,nu) = txx(mu,nu)  
                txx(mu,nu)     = Fpq_b(mu,nu) 
                PUT F1b(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter == 4 # (scf_beg - scf_order + 2)  
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                GET              Fpq_b(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F2a(mu,nu) = txx(mu,nu)  
                txx(mu,nu)     = Fpq_b(mu,nu) 
                PUT F2b(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter == 5 # (scf_beg - scf_order + 3)  
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                GET              Fpq_b(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F3a(mu,nu) = txx(mu,nu)  
                txx(mu,nu)     = Fpq_b(mu,nu) 
                PUT F3b(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter == 6 # (scf_beg - scf_order + 4)  
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                GET              Fpq_b(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F4a(mu,nu) = txx(mu,nu)  
                txx(mu,nu)     = Fpq_b(mu,nu) 
                PUT F4b(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter == 7 # (scf_beg - scf_order + 5) = scf+beg   
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                GET              Fpq_b(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F5a(mu,nu) = txx(mu,nu)  
                txx(mu,nu)     = Fpq_b(mu,nu) 
                PUT F5b(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter == 8 # (scf_beg - scf_order + 6) = scf+beg   
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                GET              Fpq_b(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F6a(mu,nu) = txx(mu,nu)  
                txx(mu,nu)     = Fpq_b(mu,nu) 
                PUT F6b(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter == 9 # (scf_beg - scf_order + 7) = scf+beg   
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                GET              Fpq_b(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F7a(mu,nu) = txx(mu,nu)  
                txx(mu,nu)     = Fpq_b(mu,nu) 
                PUT F7b(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter >= 10 # (scf_beg - scf_order + 8) = scf+beg   
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                GET              Fpq_b(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F8a(mu,nu) = txx(mu,nu)  
                txx(mu,nu)     = Fpq_b(mu,nu) 
                PUT F8b(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       execute sip_barrier 
#
       PARDO a, i 
#
             GET Fai(a,i) 
#
             if kiter == 3  # (scf_beg - scf_order + 1) 
                PUT F1ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter == 4  # (scf_beg - scf_order + 2) 
                PUT F2ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter == 5  # (scf_beg - scf_order + 3) 
                PUT F3ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter == 6  # (scf_beg - scf_order + 4) 
                PUT F4ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter == 7  # (scf_beg - scf_order + 5) 
                PUT F5ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter == 8  # (scf_beg - scf_order + 6) 
                PUT F6ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter == 9  # (scf_beg - scf_order + 7) 
                PUT F7ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter >= 10  # (scf_beg - scf_order + 8) 
                PUT F8ai(a,i) = Fai(a,i) 
             endif # kiter  
#
       ENDPARDO a, i 
#
       PARDO b, j 
#
             GET Fbj(b,j) 
#
             if kiter == 3  # (scf_beg - scf_order + 1) 
                PUT F1bj(b,j) = Fbj(b,j) 
             endif # kiter  
#
             if kiter == 4  # (scf_beg - scf_order + 2) 
                PUT F2bj(b,j) = Fbj(b,j) 
             endif # kiter  
#
             if kiter == 5  # (scf_beg - scf_order + 3) 
                PUT F3bj(b,j) = Fbj(b,j) 
             endif # kiter  
#
             if kiter == 6  # (scf_beg - scf_order + 4) 
                PUT F4bj(b,j) = Fbj(b,j) 
             endif # kiter  
#
             if kiter == 7  # (scf_beg - scf_order + 5) 
                PUT F5bj(b,j) = Fbj(b,j) 
             endif # kiter  
#
             if kiter == 8  # (scf_beg - scf_order + 6) 
                PUT F6bj(b,j) = Fbj(b,j) 
             endif # kiter  
#
             if kiter == 9  # (scf_beg - scf_order + 7) 
                PUT F7bj(b,j) = Fbj(b,j) 
             endif # kiter  
#
             if kiter >= 10  # (scf_beg - scf_order + 8) 
                PUT F8bj(b,j) = Fbj(b,j) 
             endif # kiter  
#
       ENDPARDO b, j 
#
       execute sip_barrier 
#
       ENDPROC GEN_8HISTORY  
#      ---------------------  
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
       PROC GEN_9HISTORY  
#      ------------------  
#
       PARDO a, i 
             tai(a,i)     = 0.0 
             PUT Fai(a,i) = tai(a,i) 
       ENDPARDO a, i 
#
       PARDO b, j 
             tbj(b,j)     = 0.0 
             PUT Fbj(b,j) = tbj(b,j) 
       ENDPARDO b, j 
#
       execute sip_barrier 
#  
       PARDO mu, nu  
#
             GET Fpq_a(mu,nu)  
             GET Fpq_b(mu,nu)  
#
             DO i 
#
                txi(mu,i) = Fpq_a(mu,nu)*ca(nu,i) 
#
                DO a 
#
                   tai(a,i)      = txi(mu,i)*ca(mu,a) 
                   PUT Fai(a,i) += tai(a,i) 
#
                ENDDO a 
#
             ENDDO i 
#
             DO j 
#
                txj(mu,j) = Fpq_b(mu,nu)*cb(nu,j) 
#
                DO b 
#
                   tbj(b,j)      = txj(mu,j)*cb(mu,b) 
                   PUT Fbj(b,j) += tbj(b,j) 
#
                ENDDO b 
#
             ENDDO j 
#
       ENDPARDO mu, nu  
#
       if kiter == 3 # (scf_beg - scf_order + 1)  
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                GET              Fpq_b(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F1a(mu,nu) = txx(mu,nu)  
                txx(mu,nu)     = Fpq_b(mu,nu) 
                PUT F1b(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter == 4 # (scf_beg - scf_order + 2)  
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                GET              Fpq_b(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F2a(mu,nu) = txx(mu,nu)  
                txx(mu,nu)     = Fpq_b(mu,nu) 
                PUT F2b(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter == 5 # (scf_beg - scf_order + 3)  
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                GET              Fpq_b(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F3a(mu,nu) = txx(mu,nu)  
                txx(mu,nu)     = Fpq_b(mu,nu) 
                PUT F3b(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter == 6 # (scf_beg - scf_order + 4)  
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                GET              Fpq_b(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F4a(mu,nu) = txx(mu,nu)  
                txx(mu,nu)     = Fpq_b(mu,nu) 
                PUT F4b(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter == 7 # (scf_beg - scf_order + 5) = scf+beg   
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                GET              Fpq_b(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F5a(mu,nu) = txx(mu,nu)  
                txx(mu,nu)     = Fpq_b(mu,nu) 
                PUT F5b(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter == 8 # (scf_beg - scf_order + 6) = scf+beg   
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                GET              Fpq_b(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F6a(mu,nu) = txx(mu,nu)  
                txx(mu,nu)     = Fpq_b(mu,nu) 
                PUT F6b(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter == 9 # (scf_beg - scf_order + 7) = scf+beg   
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                GET              Fpq_b(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F7a(mu,nu) = txx(mu,nu)  
                txx(mu,nu)     = Fpq_b(mu,nu) 
                PUT F7b(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter == 10 # (scf_beg - scf_order + 8) = scf+beg   
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                GET              Fpq_b(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F8a(mu,nu) = txx(mu,nu)  
                txx(mu,nu)     = Fpq_b(mu,nu) 
                PUT F8b(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter >= 11 # (scf_beg - scf_order + 9) = scf+beg   
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                GET              Fpq_b(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F9a(mu,nu) = txx(mu,nu)  
                txx(mu,nu)     = Fpq_b(mu,nu) 
                PUT F9b(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       execute sip_barrier 
#
       PARDO a, i 
#
             GET Fai(a,i) 
#
             if kiter == 3  # (scf_beg - scf_order + 1) 
                PUT F1ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter == 4  # (scf_beg - scf_order + 2) 
                PUT F2ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter == 5  # (scf_beg - scf_order + 3) 
                PUT F3ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter == 6  # (scf_beg - scf_order + 4) 
                PUT F4ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter == 7  # (scf_beg - scf_order + 5) 
                PUT F5ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter == 8  # (scf_beg - scf_order + 6) 
                PUT F6ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter == 9  # (scf_beg - scf_order + 7) 
                PUT F7ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter == 10  # (scf_beg - scf_order + 8) 
                PUT F8ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter >= 11  # (scf_beg - scf_order + 9) 
                PUT F9ai(a,i) = Fai(a,i) 
             endif # kiter  
#
       ENDPARDO a, i 
#
       PARDO b, j 
#
             GET Fbj(b,j) 
#
             if kiter == 3  # (scf_beg - scf_order + 1) 
                PUT F1bj(b,j) = Fbj(b,j) 
             endif # kiter  
#
             if kiter == 4  # (scf_beg - scf_order + 2) 
                PUT F2bj(b,j) = Fbj(b,j) 
             endif # kiter  
#
             if kiter == 5  # (scf_beg - scf_order + 3) 
                PUT F3bj(b,j) = Fbj(b,j) 
             endif # kiter  
#
             if kiter == 6  # (scf_beg - scf_order + 4) 
                PUT F4bj(b,j) = Fbj(b,j) 
             endif # kiter  
#
             if kiter == 7  # (scf_beg - scf_order + 5) 
                PUT F5bj(b,j) = Fbj(b,j) 
             endif # kiter  
#
             if kiter == 8  # (scf_beg - scf_order + 6) 
                PUT F6bj(b,j) = Fbj(b,j) 
             endif # kiter  
#
             if kiter == 9  # (scf_beg - scf_order + 7) 
                PUT F7bj(b,j) = Fbj(b,j) 
             endif # kiter  
#
             if kiter == 10  # (scf_beg - scf_order + 8) 
                PUT F8bj(b,j) = Fbj(b,j) 
             endif # kiter  
#
             if kiter >= 11  # (scf_beg - scf_order + 9) 
                PUT F9bj(b,j) = Fbj(b,j) 
             endif # kiter  
#
       ENDPARDO b, j 
#
       execute sip_barrier 
#
       ENDPROC GEN_9HISTORY  
#      ---------------------  
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
       PROC GEN_10HISTORY  
#      ------------------  
#
       PARDO a, i 
             tai(a,i)     = 0.0 
             PUT Fai(a,i) = tai(a,i) 
       ENDPARDO a, i 
#
       PARDO b, j 
             tbj(b,j)     = 0.0 
             PUT Fbj(b,j) = tbj(b,j) 
       ENDPARDO b, j 
#
       execute sip_barrier 
#  
       PARDO mu, nu  
#
             GET Fpq_a(mu,nu)  
             GET Fpq_b(mu,nu)  
#
             DO i 
#
                txi(mu,i) = Fpq_a(mu,nu)*ca(nu,i) 
#
                DO a 
#
                   tai(a,i)      = txi(mu,i)*ca(mu,a) 
                   PUT Fai(a,i) += tai(a,i) 
#
                ENDDO a 
#
             ENDDO i 
#
             DO j 
#
                txj(mu,j) = Fpq_b(mu,nu)*cb(nu,j) 
#
                DO b 
#
                   tbj(b,j)      = txj(mu,j)*cb(mu,b) 
                   PUT Fbj(b,j) += tbj(b,j) 
#
                ENDDO b 
#
             ENDDO j 
#
       ENDPARDO mu, nu  
#
       if kiter == 3 # (scf_beg - scf_order + 1)  
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                GET              Fpq_b(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F1a(mu,nu) = txx(mu,nu)  
                txx(mu,nu)     = Fpq_b(mu,nu) 
                PUT F1b(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter == 4 # (scf_beg - scf_order + 2)  
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                GET              Fpq_b(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F2a(mu,nu) = txx(mu,nu)  
                txx(mu,nu)     = Fpq_b(mu,nu) 
                PUT F2b(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter == 5 # (scf_beg - scf_order + 3)  
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                GET              Fpq_b(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F3a(mu,nu) = txx(mu,nu)  
                txx(mu,nu)     = Fpq_b(mu,nu) 
                PUT F3b(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter == 6 # (scf_beg - scf_order + 4)  
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                GET              Fpq_b(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F4a(mu,nu) = txx(mu,nu)  
                txx(mu,nu)     = Fpq_b(mu,nu) 
                PUT F4b(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter == 7 # (scf_beg - scf_order + 5) = scf+beg   
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                GET              Fpq_b(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F5a(mu,nu) = txx(mu,nu)  
                txx(mu,nu)     = Fpq_b(mu,nu) 
                PUT F5b(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter == 8 # (scf_beg - scf_order + 6) = scf+beg   
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                GET              Fpq_b(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F6a(mu,nu) = txx(mu,nu)  
                txx(mu,nu)     = Fpq_b(mu,nu) 
                PUT F6b(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter == 9 # (scf_beg - scf_order + 7) = scf+beg   
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                GET              Fpq_b(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F7a(mu,nu) = txx(mu,nu)  
                txx(mu,nu)     = Fpq_b(mu,nu) 
                PUT F7b(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter == 10 # (scf_beg - scf_order + 8) = scf+beg   
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                GET              Fpq_b(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F8a(mu,nu) = txx(mu,nu)  
                txx(mu,nu)     = Fpq_b(mu,nu) 
                PUT F8b(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter == 11 # (scf_beg - scf_order + 9) = scf+beg   
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                GET              Fpq_b(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F9a(mu,nu) = txx(mu,nu)  
                txx(mu,nu)     = Fpq_b(mu,nu) 
                PUT F9b(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter >= 12 # (scf_beg - scf_order + 10) = scf+beg   
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                GET              Fpq_b(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F10a(mu,nu) = txx(mu,nu)  
                txx(mu,nu)     = Fpq_b(mu,nu) 
                PUT F10b(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       execute sip_barrier 
#
       PARDO a, i 
#
             GET Fai(a,i) 
#
             if kiter == 3  # (scf_beg - scf_order + 1) 
                PUT F1ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter == 4  # (scf_beg - scf_order + 2) 
                PUT F2ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter == 5  # (scf_beg - scf_order + 3) 
                PUT F3ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter == 6  # (scf_beg - scf_order + 4) 
                PUT F4ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter == 7  # (scf_beg - scf_order + 5) 
                PUT F5ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter == 8  # (scf_beg - scf_order + 6) 
                PUT F6ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter == 9  # (scf_beg - scf_order + 7) 
                PUT F7ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter == 10  # (scf_beg - scf_order + 8) 
                PUT F8ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter == 11  # (scf_beg - scf_order + 9) 
                PUT F9ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter >= 12  # (scf_beg - scf_order + 10) 
                PUT F10ai(a,i) = Fai(a,i) 
             endif # kiter  
#
       ENDPARDO a, i 
#
       PARDO b, j 
#
             GET Fbj(b,j) 
#
             if kiter == 3  # (scf_beg - scf_order + 1) 
                PUT F1bj(b,j) = Fbj(b,j) 
             endif # kiter  
#
             if kiter == 4  # (scf_beg - scf_order + 2) 
                PUT F2bj(b,j) = Fbj(b,j) 
             endif # kiter  
#
             if kiter == 5  # (scf_beg - scf_order + 3) 
                PUT F3bj(b,j) = Fbj(b,j) 
             endif # kiter  
#
             if kiter == 6  # (scf_beg - scf_order + 4) 
                PUT F4bj(b,j) = Fbj(b,j) 
             endif # kiter  
#
             if kiter == 7  # (scf_beg - scf_order + 5) 
                PUT F5bj(b,j) = Fbj(b,j) 
             endif # kiter  
#
             if kiter == 8  # (scf_beg - scf_order + 6) 
                PUT F6bj(b,j) = Fbj(b,j) 
             endif # kiter  
#
             if kiter == 9  # (scf_beg - scf_order + 7) 
                PUT F7bj(b,j) = Fbj(b,j) 
             endif # kiter  
#
             if kiter == 10  # (scf_beg - scf_order + 8) 
                PUT F8bj(b,j) = Fbj(b,j) 
             endif # kiter  
#
             if kiter == 11  # (scf_beg - scf_order + 9) 
                PUT F9bj(b,j) = Fbj(b,j) 
             endif # kiter  
#
             if kiter >= 12  # (scf_beg - scf_order + 10) 
                PUT F10bj(b,j) = Fbj(b,j) 
             endif # kiter  
#
       ENDPARDO b, j 
#
       execute sip_barrier 
#
       ENDPROC GEN_10HISTORY  
#      ---------------------  
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
       PROC ZERO_SCALAR 
#      ---------------- 
#
       b11 = 0.0
       b12 = 0.0
       b13 = 0.0
       b14 = 0.0
       b15 = 0.0
       b16 = 0.0
       b17 = 0.0
       b18 = 0.0
       b19 = 0.0
       b110 = 0.0
#
       b22 = 0.0
       b23 = 0.0
       b24 = 0.0
       b25 = 0.0
       b26 = 0.0
       b27 = 0.0
       b28 = 0.0
       b29 = 0.0
       b210 = 0.0
#
       b33 = 0.0
       b34 = 0.0
       b35 = 0.0
       b36 = 0.0
       b37 = 0.0
       b38 = 0.0
       b39 = 0.0
       b310 = 0.0
#
       b44 = 0.0
       b45 = 0.0
       b46 = 0.0
       b47 = 0.0
       b48 = 0.0
       b49 = 0.0
       b410 = 0.0
#
       b55 = 0.0
       b56 = 0.0
       b57 = 0.0
       b58 = 0.0
       b59 = 0.0
       b510 = 0.0
#
       b66 = 0.0
       b67 = 0.0
       b68 = 0.0
       b69 = 0.0
       b610 = 0.0
#
       b77 = 0.0
       b78 = 0.0
       b79 = 0.0
       b710 = 0.0
#
       b88 = 0.0
       b89 = 0.0
       b810 = 0.0
#
       b99 = 0.0
       b910 = 0.0
#
       b1010 = 0.0
#
       Tb11 = 0.0
       Tb12 = 0.0
       Tb13 = 0.0
       Tb14 = 0.0
       Tb15 = 0.0
       Tb16 = 0.0
       Tb17 = 0.0
       Tb18 = 0.0
       Tb19 = 0.0
       Tb110 = 0.0
#
       Tb22 = 0.0
       Tb23 = 0.0
       Tb24 = 0.0
       Tb25 = 0.0
       Tb26 = 0.0
       Tb27 = 0.0
       Tb28 = 0.0 
       Tb29 = 0.0
       Tb210 = 0.0
#
       Tb33 = 0.0
       Tb34 = 0.0
       Tb35 = 0.0
       Tb36 = 0.0
       Tb37 = 0.0
       Tb38 = 0.0
       Tb39 = 0.0
       Tb310 = 0.0
#
       Tb44 = 0.0
       Tb45 = 0.0
       Tb46 = 0.0
       Tb47 = 0.0
       Tb48 = 0.0
       Tb49 = 0.0
       Tb410 = 0.0
#
       Tb55 = 0.0
       Tb56 = 0.0
       Tb57 = 0.0
       Tb58 = 0.0
       Tb59 = 0.0
       Tb510 = 0.0
#
       Tb66 = 0.0
       Tb67 = 0.0
       Tb68 = 0.0
       Tb69 = 0.0
       Tb610 = 0.0
#
       Tb77 = 0.0
       Tb78 = 0.0
       Tb79 = 0.0
       Tb710 = 0.0
#
       Tb88 = 0.0
       Tb89 = 0.0
       Tb810 = 0.0
#
       Tb99 = 0.0
       Tb910 = 0.0
#
       Tb1010 = 0.0
#
       c1 = 0.0 
       c2 = 0.0 
       c3 = 0.0 
       c4 = 0.0 
       c5 = 0.0 
       c6 = 0.0 
       c7 = 0.0 
       c8 = 0.0 
       c9 = 0.0 
       c10 = 0.0 
#
       ENDPROC ZERO_SCALAR 
#      ------------------- 
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
       PROC DIIS2   
#      -----------  
#
# The DIIS expansion coefficients are computed using the 2 previous iterations.
#
#      Zero out scalars.
#      -----------------
#
       CALL ZERO_SCALAR 
#
       execute sip_barrier 
#
#      Determine the 'B-matrix'. 
#      ------------------------- 
#
#      Contributions from Fai histories. 
#      --------------------------------- 
#
       PARDO a, i 
#
#          GET Fock-matrix data from all 2 previous iterations. 
#          ---------------------------------------------------- 
#
           GET F1ai(a,i) 
           GET F2ai(a,i) 
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#          b1x x=1,2 
#          --------- 
#
           etemp = F1ai(a,i)*F1ai(a,i) 
           b11  += etemp 
#
           etemp = F1ai(a,i)*F2ai(a,i) 
           b12  += etemp 
#
#          b2x x=2,2
#          --------- 
#
           etemp = F2ai(a,i)*F2ai(a,i) 
           b22  += etemp 
#
       ENDPARDO a, i 
#
#      Contributions from Fbj histories. 
#      --------------------------------- 
#
       PARDO b, j 
#
#          GET Fock-matrix data from all 2 previous iterations. 
#          ---------------------------------------------------- 
#
           GET F1bj(b,j) 
           GET F2bj(b,j) 
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#          b1x x=1,2 
#          --------- 
#
           etemp = F1bj(b,j)*F1bj(b,j) 
           b11  += etemp 
#
           etemp = F1bj(b,j)*F2bj(b,j) 
           b12  += etemp 
#
#          b2x x=2,2 
#          ---------- 
#
           etemp = F2bj(b,j)*F2bj(b,j) 
           b22  += etemp 
#
       ENDPARDO b, j 
#
       execute sip_barrier
#
#      Collectively sum B-matrix elements.
#      -----------------------------------
#
       collective Tb11 += b11
       collective Tb12 += b12

       collective Tb22 += b22
#
       execute sip_barrier 
#
#      Now the unique elements of the 'B-matrix' have been computed and the array filled out.
#      --------------------------------------------------------------------------------------
#
#      Put the elements of the 'B-matrix', which have been computed as scalars into the
#      R-matrix.
#      --------------------------------------------------------------------------------
#
       CALL SETUP_DIIS 
#
       execute sip_barrier
       execute compute_diis # --> New instruction
       execute sip_barrier
#
       c1 = Tb11
       c2 = Tb22
#
       etemp  = c1 
       etemp += c2 
#
      #execute print_scalar c1
      #execute print_scalar c2
      #execute print_scalar etemp  
       execute sip_barrier
#
#      Done computing the c-vector.
#      ----------------------------
#
#      Form the update Density matrix using the c-vector. 
#      -----------------------------------------------
#
       PARDO mu, nu 
#
           GET F1a(mu,nu) 
           GET F2a(mu,nu) 
#
           GET F1b(mu,nu) 
           GET F2b(mu,nu) 
#
           t1xx(mu,nu)  = F1a(mu,nu) 
           t1xx(mu,nu) *= c1  
           txx(mu,nu)   = t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F2a(mu,nu) 
           t1xx(mu,nu) *= c2  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           PUT Fpq_a(mu,nu) = txx(mu,nu) 
#
           t1xx(mu,nu)  = F1b(mu,nu) 
           t1xx(mu,nu) *= c1  
           txx(mu,nu)   = t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F2b(mu,nu) 
           t1xx(mu,nu) *= c2  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           PUT Fpq_b(mu,nu) = txx(mu,nu) 
#
       ENDPARDO mu, nu 
#
       execute sip_barrier 
#
       ENDPROC DIIS2    
#      -------------  
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
       PROC MOVE2    
#      ----------  
#
#      Move histories 
#      -------------- 
#
#      2 --> 1 
#      ------- 
#
       PARDO mu, nu 
             GET F2a(mu,nu) 
             PUT F1a(mu,nu) = F2a(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO mu, nu 
             GET F2b(mu,nu) 
             PUT F1b(mu,nu) = F2b(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO a, i 
             GET F2ai(a,i) 
             PUT F1ai(a,i) = F2ai(a,i)  
       ENDPARDO a,i  
#
       PARDO b, j 
             GET F2bj(b,j) 
             PUT F1bj(b,j) = F2bj(b,j)  
       ENDPARDO b, j  
       execute sip_barrier 
#
#      Current --> 2 
#      ------------- 
#
       PARDO mu, nu 
             GET Fpq_a(mu,nu) 
             PUT F2a(mu,nu) = Fpq_a(mu,nu)  
       ENDPARDO mu, nu 
       execute sip_barrier 
#
       PARDO mu, nu 
             GET Fpq_b(mu,nu) 
             PUT F2b(mu,nu) = Fpq_b(mu,nu)  
       ENDPARDO mu, nu 
       execute sip_barrier 
#
       ENDPROC MOVE2    
#      -------------  
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
       PROC DIIS3   
#      -----------  
#
# The DIIS expansion coefficients are computed using the 3 previous iterations.
#
#      Zero out scalars.
#      -----------------
#
       CALL ZERO_SCALAR 
#
       execute sip_barrier 
#
#      Determine the 'B-matrix'. 
#      ------------------------- 
#
#      Contributions from Fai histories. 
#      --------------------------------- 
#
       PARDO a, i 
#
#          GET Fock-matrix data from all 5 previous iterations. 
#          ---------------------------------------------------- 
#
           GET F1ai(a,i) 
           GET F2ai(a,i) 
           GET F3ai(a,i) 
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#          b1x x=1,3 
#          --------- 
#
           etemp = F1ai(a,i)*F1ai(a,i) 
           b11  += etemp 
#
           etemp = F1ai(a,i)*F2ai(a,i) 
           b12  += etemp 
#
           etemp = F1ai(a,i)*F3ai(a,i) 
           b13  += etemp 
#
#          b2x x=2,3
#          --------- 
#
           etemp = F2ai(a,i)*F2ai(a,i) 
           b22  += etemp 
#
           etemp = F2ai(a,i)*F3ai(a,i) 
           b23  += etemp 
#
#          b3x x=3,3 
#          --------- 
#
           etemp = F3ai(a,i)*F3ai(a,i) 
           b33  += etemp 
#
       ENDPARDO a, i 
#
#      Contributions from Fbj histories. 
#      --------------------------------- 
#
       PARDO b, j 
#
#          GET Fock-matrix data from all 5 previous iterations. 
#          ---------------------------------------------------- 
#
           GET F1bj(b,j) 
           GET F2bj(b,j) 
           GET F3bj(b,j) 
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#          b1x x=1,3 
#          --------- 
#
           etemp = F1bj(b,j)*F1bj(b,j) 
           b11  += etemp 
#
           etemp = F1bj(b,j)*F2bj(b,j) 
           b12  += etemp 
#
           etemp = F1bj(b,j)*F3bj(b,j) 
           b13  += etemp 
#
#          b2x x=2,3 
#          ---------- 
#
           etemp = F2bj(b,j)*F2bj(b,j) 
           b22  += etemp 
#
           etemp = F2bj(b,j)*F3bj(b,j) 
           b23  += etemp 
#
#          b3x x=3,3 
#          ---------- 
#
           etemp = F3bj(b,j)*F3bj(b,j) 
           b33  += etemp 
#
       ENDPARDO b, j 
#
       execute sip_barrier
#
#      Collectively sum B-matrix elements.
#      -----------------------------------
#
       collective Tb11 += b11
       collective Tb12 += b12
       collective Tb13 += b13

       collective Tb22 += b22
       collective Tb23 += b23

       collective Tb33 += b33
#
       execute sip_barrier 
#
#      Now the unique elements of the 'B-matrix' have been computed and the array filled out.
#      --------------------------------------------------------------------------------------
#
#      Put the elements of the 'B-matrix', which have been computed as scalars into the
#      R-matrix.
#      --------------------------------------------------------------------------------
#
       CALL SETUP_DIIS 
#
       execute sip_barrier 
       execute compute_diis # --> New instruction
       execute sip_barrier 
#
       c1 = Tb11
       c2 = Tb22
       c3 = Tb33
#
       etemp  = c1 
       etemp += c2 
       etemp += c3 
#
      #execute print_scalar c1
      #execute print_scalar c2
      #execute print_scalar c3
      #execute print_scalar etemp  
       execute sip_barrier
#
#      Done computing the c-vector.
#      ----------------------------
#
#      Form the update Density matrix using the c-vector. 
#      -----------------------------------------------
#
       PARDO mu, nu 
#
           GET F1a(mu,nu) 
           GET F2a(mu,nu) 
           GET F3a(mu,nu) 
#
           GET F1b(mu,nu) 
           GET F2b(mu,nu) 
           GET F3b(mu,nu) 
#
           t1xx(mu,nu)  = F1a(mu,nu) 
           t1xx(mu,nu) *= c1  
           txx(mu,nu)   = t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F2a(mu,nu) 
           t1xx(mu,nu) *= c2  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F3a(mu,nu) 
           t1xx(mu,nu) *= c3  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           PUT Fpq_a(mu,nu) = txx(mu,nu) 
#
           t1xx(mu,nu)  = F1b(mu,nu) 
           t1xx(mu,nu) *= c1  
           txx(mu,nu)   = t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F2b(mu,nu) 
           t1xx(mu,nu) *= c2  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F3b(mu,nu) 
           t1xx(mu,nu) *= c3  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           PUT Fpq_b(mu,nu) = txx(mu,nu) 
#
       ENDPARDO mu, nu 
#
       execute sip_barrier 
#
       ENDPROC DIIS3    
#      -------------  
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
       PROC MOVE3    
#      ----------  
#
#      Move histories 
#      -------------- 
#
#      2 --> 1 
#      ------- 
#
       PARDO mu, nu 
             GET F2a(mu,nu) 
             PUT F1a(mu,nu) = F2a(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO mu, nu 
             GET F2b(mu,nu) 
             PUT F1b(mu,nu) = F2b(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO a, i 
             GET F2ai(a,i) 
             PUT F1ai(a,i) = F2ai(a,i)  
       ENDPARDO a,i  
#
       PARDO b, j 
             GET F2bj(b,j) 
             PUT F1bj(b,j) = F2bj(b,j)  
       ENDPARDO b, j  
       execute sip_barrier 
#
#      3 --> 2 
#      ------- 
#
       PARDO mu, nu 
             GET F3a(mu,nu) 
             PUT F2a(mu,nu) = F3a(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO mu, nu 
             GET F3b(mu,nu) 
             PUT F2b(mu,nu) = F3b(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO a, i 
             GET F3ai(a,i) 
             PUT F2ai(a,i) = F3ai(a,i)  
       ENDPARDO a, i  
#
       PARDO b, j 
             GET F3bj(b,j) 
             PUT F2bj(b,j) = F3bj(b,j)  
       ENDPARDO b, j  
       execute sip_barrier 
#
#      Current --> 3 
#      ------------- 
#
       PARDO mu, nu 
             GET Fpq_a(mu,nu) 
             PUT F3a(mu,nu) = Fpq_a(mu,nu)  
       ENDPARDO mu, nu 
       execute sip_barrier 
#
       PARDO mu, nu 
             GET Fpq_b(mu,nu) 
             PUT F3b(mu,nu) = Fpq_b(mu,nu)  
       ENDPARDO mu, nu 
       execute sip_barrier 
#
       ENDPROC MOVE3    
#      -------------  
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
       PROC DIIS4   
#      -----------  
#
# The DIIS expansion coefficients are computed using the 6 previous iterations.
#
#      Zero out scalars.
#      -----------------
#
       CALL ZERO_SCALAR 
#
       execute sip_barrier 
#
#      Determine the 'B-matrix'. 
#      ------------------------- 
#
#      Contributions from Fai histories. 
#      --------------------------------- 
#
       PARDO a, i 
#
#          GET Fock-matrix data from all 5 previous iterations. 
#          ---------------------------------------------------- 
#
           GET F1ai(a,i) 
           GET F2ai(a,i) 
           GET F3ai(a,i) 
           GET F4ai(a,i) 
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#          b1x x=1,4 
#          --------- 
#
           etemp = F1ai(a,i)*F1ai(a,i) 
           b11  += etemp 
#
           etemp = F1ai(a,i)*F2ai(a,i) 
           b12  += etemp 
#
           etemp = F1ai(a,i)*F3ai(a,i) 
           b13  += etemp 
#
           etemp = F1ai(a,i)*F4ai(a,i) 
           b14  += etemp 
#
#          b2x x=2,4
#          --------- 
#
           etemp = F2ai(a,i)*F2ai(a,i) 
           b22  += etemp 
#
           etemp = F2ai(a,i)*F3ai(a,i) 
           b23  += etemp 
#
           etemp = F2ai(a,i)*F4ai(a,i) 
           b24  += etemp 
#
#          b3x x=3,4 
#          --------- 
#
           etemp = F3ai(a,i)*F3ai(a,i) 
           b33  += etemp 
#
           etemp = F3ai(a,i)*F4ai(a,i) 
           b34  += etemp 
#
#          b4x x=4,4
#          --------- 
#
           etemp = F4ai(a,i)*F4ai(a,i) 
           b44  += etemp 
#
       ENDPARDO a, i 
#
#      Contributions from Fbj histories. 
#      --------------------------------- 
#
       PARDO b, j 
#
#          GET Fock-matrix data from all 5 previous iterations. 
#          ---------------------------------------------------- 
#
           GET F1bj(b,j) 
           GET F2bj(b,j) 
           GET F3bj(b,j) 
           GET F4bj(b,j) 
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#          b1x x=1,4 
#          --------- 
#
           etemp = F1bj(b,j)*F1bj(b,j) 
           b11  += etemp 
#
           etemp = F1bj(b,j)*F2bj(b,j) 
           b12  += etemp 
#
           etemp = F1bj(b,j)*F3bj(b,j) 
           b13  += etemp 
#
           etemp = F1bj(b,j)*F4bj(b,j) 
           b14  += etemp 
#
#          b2x x=2,4 
#          ---------- 
#
           etemp = F2bj(b,j)*F2bj(b,j) 
           b22  += etemp 
#
           etemp = F2bj(b,j)*F3bj(b,j) 
           b23  += etemp 
#
           etemp = F2bj(b,j)*F4bj(b,j) 
           b24  += etemp 
#
#          b3x x=3,4 
#          ---------- 
#
           etemp = F3bj(b,j)*F3bj(b,j) 
           b33  += etemp 
#
           etemp = F3bj(b,j)*F4bj(b,j) 
           b34  += etemp 
#
#          b4x x=4,4 
#          ---------- 
#
           etemp = F4bj(b,j)*F4bj(b,j) 
           b44  += etemp 
#
       ENDPARDO b, j 
#
       execute sip_barrier
#
#      Collectively sum B-matrix elements.
#      -----------------------------------
#
       collective Tb11 += b11
       collective Tb12 += b12
       collective Tb13 += b13
       collective Tb14 += b14

       collective Tb22 += b22
       collective Tb23 += b23
       collective Tb24 += b24

       collective Tb33 += b33
       collective Tb34 += b34

       collective Tb44 += b44
#
       execute sip_barrier 
#
#      Now the unique elements of the 'B-matrix' have been computed and the array filled out.
#      --------------------------------------------------------------------------------------
#
#      Put the elements of the 'B-matrix', which have been computed as scalars into the
#      R-matrix.
#      --------------------------------------------------------------------------------
#
       CALL SETUP_DIIS 
#
       execute compute_diis # --> New instruction
#
       c1 = Tb11
       c2 = Tb22
       c3 = Tb33
       c4 = Tb44
#
       etemp  = c1 
       etemp += c2 
       etemp += c3 
       etemp += c4 
#
      #execute print_scalar c1
      #execute print_scalar c2
      #execute print_scalar c3
      #execute print_scalar c4
      #execute print_scalar etemp  
       execute sip_barrier
#
#      Done computing the c-vector.
#      ----------------------------
#
#      Form the update Density matrix using the c-vector. 
#      -----------------------------------------------
#
       PARDO mu, nu 
#
           GET F1a(mu,nu) 
           GET F2a(mu,nu) 
           GET F3a(mu,nu) 
           GET F4a(mu,nu) 
#
           GET F1b(mu,nu) 
           GET F2b(mu,nu) 
           GET F3b(mu,nu) 
           GET F4b(mu,nu) 
#
           t1xx(mu,nu)  = F1a(mu,nu) 
           t1xx(mu,nu) *= c1  
           txx(mu,nu)   = t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F2a(mu,nu) 
           t1xx(mu,nu) *= c2  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F3a(mu,nu) 
           t1xx(mu,nu) *= c3  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F4a(mu,nu) 
           t1xx(mu,nu) *= c4  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           PUT Fpq_a(mu,nu) = txx(mu,nu) 
#
           t1xx(mu,nu)  = F1b(mu,nu) 
           t1xx(mu,nu) *= c1  
           txx(mu,nu)   = t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F2b(mu,nu) 
           t1xx(mu,nu) *= c2  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F3b(mu,nu) 
           t1xx(mu,nu) *= c3  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F4b(mu,nu) 
           t1xx(mu,nu) *= c4  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           PUT Fpq_b(mu,nu) = txx(mu,nu) 
#
       ENDPARDO mu, nu 
#
       execute sip_barrier 
#
       ENDPROC DIIS4    
#      -------------  
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
       PROC MOVE4    
#      ----------  
#
#      Move histories 
#      -------------- 
#
#      2 --> 1 
#      ------- 
#
       PARDO mu, nu 
             GET F2a(mu,nu) 
             PUT F1a(mu,nu) = F2a(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO mu, nu 
             GET F2b(mu,nu) 
             PUT F1b(mu,nu) = F2b(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO a, i 
             GET F2ai(a,i) 
             PUT F1ai(a,i) = F2ai(a,i)  
       ENDPARDO a,i  
#
       PARDO b, j 
             GET F2bj(b,j) 
             PUT F1bj(b,j) = F2bj(b,j)  
       ENDPARDO b, j  
       execute sip_barrier 
#
#      3 --> 2 
#      ------- 
#
       PARDO mu, nu 
             GET F3a(mu,nu) 
             PUT F2a(mu,nu) = F3a(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO mu, nu 
             GET F3b(mu,nu) 
             PUT F2b(mu,nu) = F3b(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO a, i 
             GET F3ai(a,i) 
             PUT F2ai(a,i) = F3ai(a,i)  
       ENDPARDO a, i  
#
       PARDO b, j 
             GET F3bj(b,j) 
             PUT F2bj(b,j) = F3bj(b,j)  
       ENDPARDO b, j  
       execute sip_barrier 
#
#      4 --> 3 
#      ------- 
#
       PARDO mu, nu 
             GET F4a(mu,nu) 
             PUT F3a(mu,nu) = F4a(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO mu, nu 
             GET F4b(mu,nu) 
             PUT F3b(mu,nu) = F4b(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO a, i 
             GET F4ai(a,i) 
             PUT F3ai(a,i) = F4ai(a,i)  
       ENDPARDO a, i  
#
       PARDO b, j 
             GET F4bj(b,j) 
             PUT F3bj(b,j) = F4bj(b,j)  
       ENDPARDO b, j  
       execute sip_barrier 
#
#      Current --> 4 
#      ------------- 
#
       PARDO mu, nu 
             GET Fpq_a(mu,nu) 
             PUT F4a(mu,nu) = Fpq_a(mu,nu)  
       ENDPARDO mu, nu 
       execute sip_barrier 
#
       PARDO mu, nu 
             GET Fpq_b(mu,nu) 
             PUT F4b(mu,nu) = Fpq_b(mu,nu)  
       ENDPARDO mu, nu 
       execute sip_barrier 
#
       ENDPROC MOVE4    
#      -------------  
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
       PROC DIIS5   
#      ----------  
#
# The DIIS expansion coefficients are computed using the 5 previous iterations.
#
#      Zero out scalars.
#      -----------------
#
       CALL ZERO_SCALAR 
#
       execute sip_barrier 
#
#      Determine the 'B-matrix'. 
#      ------------------------- 
#
#      Contributions from Fai histories. 
#      --------------------------------- 
#
       PARDO a, i 
#
#          GET Fock-matrix data from all 5 previous iterations. 
#          ---------------------------------------------------- 
#
           GET F1ai(a,i) 
           GET F2ai(a,i) 
           GET F3ai(a,i) 
           GET F4ai(a,i) 
           GET F5ai(a,i) 
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#          b1x x=1,5
#          --------- 
#
           etemp = F1ai(a,i)*F1ai(a,i) 
           b11  += etemp 
#
           etemp = F1ai(a,i)*F2ai(a,i) 
           b12  += etemp 
#
           etemp = F1ai(a,i)*F3ai(a,i) 
           b13  += etemp 
#
           etemp = F1ai(a,i)*F4ai(a,i) 
           b14  += etemp 
#
           etemp = F1ai(a,i)*F5ai(a,i) 
           b15  += etemp 
#
#          b2x x=2,5
#          --------- 
#
           etemp = F2ai(a,i)*F2ai(a,i) 
           b22  += etemp 
#
           etemp = F2ai(a,i)*F3ai(a,i) 
           b23  += etemp 
#
           etemp = F2ai(a,i)*F4ai(a,i) 
           b24  += etemp 
#
           etemp = F2ai(a,i)*F5ai(a,i) 
           b25  += etemp 
#
#          b3x x=3,5
#          --------- 
#
           etemp = F3ai(a,i)*F3ai(a,i) 
           b33  += etemp 
#
           etemp = F3ai(a,i)*F4ai(a,i) 
           b34  += etemp 
#
           etemp = F3ai(a,i)*F5ai(a,i) 
           b35  += etemp 
#
#          b4x x=4,5
#          --------- 
#
           etemp = F4ai(a,i)*F4ai(a,i) 
           b44  += etemp 
#
           etemp = F4ai(a,i)*F5ai(a,i) 
           b45  += etemp 
#
#          b5x x=5,5
#          --------- 
#
           etemp = F5ai(a,i)*F5ai(a,i) 
           b55  += etemp 
#
       ENDPARDO a, i 
#
#      Contributions from Fbj histories. 
#      --------------------------------- 
#
       PARDO b, j 
#
#          GET Fock-matrix data from all 5 previous iterations. 
#          ---------------------------------------------------- 
#
           GET F1bj(b,j) 
           GET F2bj(b,j) 
           GET F3bj(b,j) 
           GET F4bj(b,j) 
           GET F5bj(b,j) 
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#          b1x x=1,5
#          --------- 
#
           etemp = F1bj(b,j)*F1bj(b,j) 
           b11  += etemp 
#
           etemp = F1bj(b,j)*F2bj(b,j) 
           b12  += etemp 
#
           etemp = F1bj(b,j)*F3bj(b,j) 
           b13  += etemp 
#
           etemp = F1bj(b,j)*F4bj(b,j) 
           b14  += etemp 
#
           etemp = F1bj(b,j)*F5bj(b,j) 
           b15  += etemp 
#
#          b2x x=2,5
#          --------- 
#
           etemp = F2bj(b,j)*F2bj(b,j) 
           b22  += etemp 
#
           etemp = F2bj(b,j)*F3bj(b,j) 
           b23  += etemp 
#
           etemp = F2bj(b,j)*F4bj(b,j) 
           b24  += etemp 
#
           etemp = F2bj(b,j)*F5bj(b,j) 
           b25  += etemp 
#
#          b3x x=3,5
#          --------- 
#
           etemp = F3bj(b,j)*F3bj(b,j) 
           b33  += etemp 
#
           etemp = F3bj(b,j)*F4bj(b,j) 
           b34  += etemp 
#
           etemp = F3bj(b,j)*F5bj(b,j) 
           b35  += etemp 
#
#          b4x x=4,5
#          --------- 
#
           etemp = F4bj(b,j)*F4bj(b,j) 
           b44  += etemp 
#
           etemp = F4bj(b,j)*F5bj(b,j) 
           b45  += etemp 
#
#          b5x x=5,5
#          --------- 
#
           etemp = F5bj(b,j)*F5bj(b,j) 
           b55  += etemp 
#
       ENDPARDO b, j 
#
       execute sip_barrier
#
#      Collectively sum B-matrix elements.
#      -----------------------------------
#
       collective Tb11 += b11
       collective Tb12 += b12
       collective Tb13 += b13
       collective Tb14 += b14
       collective Tb15 += b15
       collective Tb22 += b22
       collective Tb23 += b23
       collective Tb24 += b24
       collective Tb25 += b25
       collective Tb33 += b33
       collective Tb34 += b34
       collective Tb35 += b35
       collective Tb44 += b44
       collective Tb45 += b45
       collective Tb55 += b55
#
       execute sip_barrier 
#
#
#      Now the unique elements of the 'B-matrix' have been computed and the array filled out.
#      --------------------------------------------------------------------------------------
#
#      Put the elements of the 'B-matrix', which have been computed as scalars into the
#      R-matrix.
#      --------------------------------------------------------------------------------
#
       CALL SETUP_DIIS 
#
       execute compute_diis # --> New instruction
#
       c1 = Tb11
       c2 = Tb22
       c3 = Tb33
       c4 = Tb44
       c5 = Tb55
#
       etemp  = c1 
       etemp += c2 
       etemp += c3 
       etemp += c4 
       etemp += c5 
#
      #execute print_scalar c1
      #execute print_scalar c2
      #execute print_scalar c3
      #execute print_scalar c4
      #execute print_scalar c5
      #execute print_scalar etemp  
       execute sip_barrier
#
#      Done computing the c-vector.
#      ----------------------------
#
#      Form the update Density matrix using the c-vector. 
#      -----------------------------------------------
#
       PARDO mu, nu 
#
           GET F1a(mu,nu) 
           GET F2a(mu,nu) 
           GET F3a(mu,nu) 
           GET F4a(mu,nu) 
           GET F5a(mu,nu) 
#
           GET F1b(mu,nu) 
           GET F2b(mu,nu) 
           GET F3b(mu,nu) 
           GET F4b(mu,nu) 
           GET F5b(mu,nu) 
#
           t1xx(mu,nu)  = F1a(mu,nu) 
           t1xx(mu,nu) *= c1  
           txx(mu,nu)   = t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F2a(mu,nu) 
           t1xx(mu,nu) *= c2  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F3a(mu,nu) 
           t1xx(mu,nu) *= c3  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F4a(mu,nu) 
           t1xx(mu,nu) *= c4  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F5a(mu,nu) 
           t1xx(mu,nu) *= c5  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           PUT Fpq_a(mu,nu) = txx(mu,nu) 
#
           t1xx(mu,nu)  = F1b(mu,nu) 
           t1xx(mu,nu) *= c1  
           txx(mu,nu)   = t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F2b(mu,nu) 
           t1xx(mu,nu) *= c2  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F3b(mu,nu) 
           t1xx(mu,nu) *= c3  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F4b(mu,nu) 
           t1xx(mu,nu) *= c4  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F5b(mu,nu) 
           t1xx(mu,nu) *= c5  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           PUT Fpq_b(mu,nu) = txx(mu,nu) 
#
       ENDPARDO mu, nu 
#
       execute sip_barrier 
#
       ENDPROC DIIS5   
#      -------------  
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
       PROC MOVE5   
#      ----------  
#
#      Move histories 
#      -------------- 
#
#      2 --> 1 
#      ------- 
#
       PARDO mu, nu 
             GET F2a(mu,nu) 
             PUT F1a(mu,nu) = F2a(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO mu, nu 
             GET F2b(mu,nu) 
             PUT F1b(mu,nu) = F2b(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO a, i 
             GET F2ai(a,i) 
             PUT F1ai(a,i) = F2ai(a,i)  
       ENDPARDO a,i  
#
       PARDO b, j 
             GET F2bj(b,j) 
             PUT F1bj(b,j) = F2bj(b,j)  
       ENDPARDO b, j  
       execute sip_barrier 
#
#      3 --> 2 
#      ------- 
#
       PARDO mu, nu 
             GET F3a(mu,nu) 
             PUT F2a(mu,nu) = F3a(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO mu, nu 
             GET F3b(mu,nu) 
             PUT F2b(mu,nu) = F3b(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO a, i 
             GET F3ai(a,i) 
             PUT F2ai(a,i) = F3ai(a,i)  
       ENDPARDO a, i  
#
       PARDO b, j 
             GET F3bj(b,j) 
             PUT F2bj(b,j) = F3bj(b,j)  
       ENDPARDO b, j  
       execute sip_barrier 
#
#      4 --> 3 
#      ------- 
#
       PARDO mu, nu 
             GET F4a(mu,nu) 
             PUT F3a(mu,nu) = F4a(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO mu, nu 
             GET F4b(mu,nu) 
             PUT F3b(mu,nu) = F4b(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO a, i 
             GET F4ai(a,i) 
             PUT F3ai(a,i) = F4ai(a,i)  
       ENDPARDO a, i  
#
       PARDO b, j 
             GET F4bj(b,j) 
             PUT F3bj(b,j) = F4bj(b,j)  
       ENDPARDO b, j  
       execute sip_barrier 
#
#      5 --> 4 
#      ------- 
#
       PARDO mu, nu 
             GET F5a(mu,nu) 
             PUT F4a(mu,nu) = F5a(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO mu, nu 
             GET F5b(mu,nu) 
             PUT F4b(mu,nu) = F5b(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO a, i 
             GET F5ai(a,i) 
             PUT F4ai(a,i) = F5ai(a,i)  
       ENDPARDO a, i  
#
       PARDO b, j 
             GET F5bj(b,j) 
             PUT F4bj(b,j) = F5bj(b,j)  
       ENDPARDO b, j  
       execute sip_barrier 
#
#      Current --> 5 
#      ------------- 
#
       PARDO mu, nu 
             GET Fpq_a(mu,nu) 
             PUT F5a(mu,nu) = Fpq_a(mu,nu)  
       ENDPARDO mu, nu 
       execute sip_barrier 
#
       PARDO mu, nu 
             GET Fpq_b(mu,nu) 
             PUT F5b(mu,nu) = Fpq_b(mu,nu)  
       ENDPARDO mu, nu 
       execute sip_barrier 
#
       ENDPROC MOVE5   
#      -------------  
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
       PROC DIIS6   
#      -----------  
#
# The DIIS expansion coefficients are computed using the 6 previous iterations.
#
#      Zero out scalars.
#      -----------------
#
       CALL ZERO_SCALAR 
#
       execute sip_barrier 
#
#      Determine the 'B-matrix'. 
#      ------------------------- 
#
#      Contributions from Fai histories. 
#      --------------------------------- 
#
       PARDO a, i 
#
#          GET Fock-matrix data from all 5 previous iterations. 
#          ---------------------------------------------------- 
#
           GET F1ai(a,i) 
           GET F2ai(a,i) 
           GET F3ai(a,i) 
           GET F4ai(a,i) 
           GET F5ai(a,i) 
           GET F6ai(a,i) 
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#          b1x x=1,6 
#          --------- 
#
           etemp = F1ai(a,i)*F1ai(a,i) 
           b11  += etemp 
#
           etemp = F1ai(a,i)*F2ai(a,i) 
           b12  += etemp 
#
           etemp = F1ai(a,i)*F3ai(a,i) 
           b13  += etemp 
#
           etemp = F1ai(a,i)*F4ai(a,i) 
           b14  += etemp 
#
           etemp = F1ai(a,i)*F5ai(a,i) 
           b15  += etemp 
#
           etemp = F1ai(a,i)*F6ai(a,i) 
           b16  += etemp 
#
#          b2x x=2,6
#          --------- 
#
           etemp = F2ai(a,i)*F2ai(a,i) 
           b22  += etemp 
#
           etemp = F2ai(a,i)*F3ai(a,i) 
           b23  += etemp 
#
           etemp = F2ai(a,i)*F4ai(a,i) 
           b24  += etemp 
#
           etemp = F2ai(a,i)*F5ai(a,i) 
           b25  += etemp 
#
           etemp = F2ai(a,i)*F6ai(a,i) 
           b26  += etemp 
#
#          b3x x=3,6 
#          --------- 
#
           etemp = F3ai(a,i)*F3ai(a,i) 
           b33  += etemp 
#
           etemp = F3ai(a,i)*F4ai(a,i) 
           b34  += etemp 
#
           etemp = F3ai(a,i)*F5ai(a,i) 
           b35  += etemp 
#
           etemp = F3ai(a,i)*F6ai(a,i) 
           b36  += etemp 
#
#          b4x x=4,6
#          --------- 
#
           etemp = F4ai(a,i)*F4ai(a,i) 
           b44  += etemp 
#
           etemp = F4ai(a,i)*F5ai(a,i) 
           b45  += etemp 
#
           etemp = F4ai(a,i)*F6ai(a,i) 
           b46  += etemp 
#
#          b5x x=5,6 
#          ---------- 
#
           etemp = F5ai(a,i)*F5ai(a,i) 
           b55  += etemp 
#
           etemp = F5ai(a,i)*F6ai(a,i) 
           b56  += etemp 
#
#          b6x x=6,6 
#          ---------- 
#
           etemp = F6ai(a,i)*F6ai(a,i) 
           b66  += etemp 
#
       ENDPARDO a, i 
#
#      Contributions from Fbj histories. 
#      --------------------------------- 
#
       PARDO b, j 
#
#          GET Fock-matrix data from all 5 previous iterations. 
#          ---------------------------------------------------- 
#
           GET F1bj(b,j) 
           GET F2bj(b,j) 
           GET F3bj(b,j) 
           GET F4bj(b,j) 
           GET F5bj(b,j) 
           GET F6bj(b,j) 
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#          b1x x=1,6 
#          --------- 
#
           etemp = F1bj(b,j)*F1bj(b,j) 
           b11  += etemp 
#
           etemp = F1bj(b,j)*F2bj(b,j) 
           b12  += etemp 
#
           etemp = F1bj(b,j)*F3bj(b,j) 
           b13  += etemp 
#
           etemp = F1bj(b,j)*F4bj(b,j) 
           b14  += etemp 
#
           etemp = F1bj(b,j)*F5bj(b,j) 
           b15  += etemp 
#
           etemp = F1bj(b,j)*F6bj(b,j) 
           b16  += etemp 
#
#          b2x x=2,6 
#          ---------- 
#
           etemp = F2bj(b,j)*F2bj(b,j) 
           b22  += etemp 
#
           etemp = F2bj(b,j)*F3bj(b,j) 
           b23  += etemp 
#
           etemp = F2bj(b,j)*F4bj(b,j) 
           b24  += etemp 
#
           etemp = F2bj(b,j)*F5bj(b,j) 
           b25  += etemp 
#
           etemp = F2bj(b,j)*F6bj(b,j) 
           b26  += etemp 
#
#          b3x x=3,6 
#          ---------- 
#
           etemp = F3bj(b,j)*F3bj(b,j) 
           b33  += etemp 
#
           etemp = F3bj(b,j)*F4bj(b,j) 
           b34  += etemp 
#
           etemp = F3bj(b,j)*F5bj(b,j) 
           b35  += etemp 
#
           etemp = F3bj(b,j)*F6bj(b,j) 
           b36  += etemp 
#
#          b4x x=4,6 
#          ---------- 
#
           etemp = F4bj(b,j)*F4bj(b,j) 
           b44  += etemp 
#
           etemp = F4bj(b,j)*F5bj(b,j) 
           b45  += etemp 
#
           etemp = F4bj(b,j)*F6bj(b,j) 
           b46  += etemp 
#
#          b5x x=5,6 
#          --------- 
#
           etemp = F5bj(b,j)*F5bj(b,j) 
           b55  += etemp 
#
           etemp = F5bj(b,j)*F6bj(b,j) 
           b56  += etemp 
#
#          b6x x=6,6 
#          --------- 
#
           etemp = F6bj(b,j)*F6bj(b,j) 
           b66  += etemp 
#
       ENDPARDO b, j 
#
       execute sip_barrier
#
#      Collectively sum B-matrix elements.
#      -----------------------------------
#
       collective Tb11 += b11
       collective Tb12 += b12
       collective Tb13 += b13
       collective Tb14 += b14
       collective Tb15 += b15
       collective Tb16 += b16
       collective Tb22 += b22
       collective Tb23 += b23
       collective Tb24 += b24
       collective Tb25 += b25
       collective Tb26 += b26
       collective Tb33 += b33
       collective Tb34 += b34
       collective Tb35 += b35
       collective Tb36 += b36
       collective Tb44 += b44
       collective Tb45 += b45
       collective Tb46 += b46
       collective Tb55 += b55
       collective Tb56 += b56
       collective Tb66 += b66
#
       execute sip_barrier 
#
#      Now the unique elements of the 'B-matrix' have been computed and the array filled out.
#      --------------------------------------------------------------------------------------
#
#      Put the elements of the 'B-matrix', which have been computed as scalars into the
#      R-matrix.
#      --------------------------------------------------------------------------------
#
       CALL SETUP_DIIS 
#
       execute sip_barrier 
       execute compute_diis # --> New instruction
       execute sip_barrier 
#
       c1 = Tb11
       c2 = Tb22
       c3 = Tb33
       c4 = Tb44
       c5 = Tb55
       c6 = Tb66  
#
      #execute print_scalar c1
      #execute print_scalar c2
      #execute print_scalar c3
      #execute print_scalar c4
      #execute print_scalar c5
      #execute print_scalar c6
       execute sip_barrier
#
#      Done computing the c-vector.
#      ----------------------------
#
#      Form the update Density matrix using the c-vector. 
#      -----------------------------------------------
#
       PARDO mu, nu 
#
           GET F1a(mu,nu) 
           GET F2a(mu,nu) 
           GET F3a(mu,nu) 
           GET F4a(mu,nu) 
           GET F5a(mu,nu) 
           GET F6a(mu,nu) 
#
           GET F1b(mu,nu) 
           GET F2b(mu,nu) 
           GET F3b(mu,nu) 
           GET F4b(mu,nu) 
           GET F5b(mu,nu) 
           GET F6b(mu,nu) 
#
           t1xx(mu,nu)  = F1a(mu,nu) 
           t1xx(mu,nu) *= c1  
           txx(mu,nu)   = t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F2a(mu,nu) 
           t1xx(mu,nu) *= c2  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F3a(mu,nu) 
           t1xx(mu,nu) *= c3  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F4a(mu,nu) 
           t1xx(mu,nu) *= c4  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F5a(mu,nu) 
           t1xx(mu,nu) *= c5  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F6a(mu,nu) 
           t1xx(mu,nu) *= c6  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           PUT Fpq_a(mu,nu) = txx(mu,nu) 
#
           t1xx(mu,nu)  = F1b(mu,nu) 
           t1xx(mu,nu) *= c1  
           txx(mu,nu)   = t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F2b(mu,nu) 
           t1xx(mu,nu) *= c2  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F3b(mu,nu) 
           t1xx(mu,nu) *= c3  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F4b(mu,nu) 
           t1xx(mu,nu) *= c4  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F5b(mu,nu) 
           t1xx(mu,nu) *= c5  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F6b(mu,nu) 
           t1xx(mu,nu) *= c6  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           PUT Fpq_b(mu,nu) = txx(mu,nu) 
#
       ENDPARDO mu, nu 
#
       execute sip_barrier 
#
       ENDPROC DIIS6    
#      -------------  
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
       PROC MOVE6    
#      ----------  
#
#      Move histories 
#      -------------- 
#
#      2 --> 1 
#      ------- 
#
       PARDO mu, nu 
             GET F2a(mu,nu) 
             PUT F1a(mu,nu) = F2a(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO mu, nu 
             GET F2b(mu,nu) 
             PUT F1b(mu,nu) = F2b(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO a, i 
             GET F2ai(a,i) 
             PUT F1ai(a,i) = F2ai(a,i)  
       ENDPARDO a,i  
#
       PARDO b, j 
             GET F2bj(b,j) 
             PUT F1bj(b,j) = F2bj(b,j)  
       ENDPARDO b, j  
       execute sip_barrier 
#
#      3 --> 2 
#      ------- 
#
       PARDO mu, nu 
             GET F3a(mu,nu) 
             PUT F2a(mu,nu) = F3a(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO mu, nu 
             GET F3b(mu,nu) 
             PUT F2b(mu,nu) = F3b(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO a, i 
             GET F3ai(a,i) 
             PUT F2ai(a,i) = F3ai(a,i)  
       ENDPARDO a, i  
#
       PARDO b, j 
             GET F3bj(b,j) 
             PUT F2bj(b,j) = F3bj(b,j)  
       ENDPARDO b, j  
       execute sip_barrier 
#
#      4 --> 3 
#      ------- 
#
       PARDO mu, nu 
             GET F4a(mu,nu) 
             PUT F3a(mu,nu) = F4a(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO mu, nu 
             GET F4b(mu,nu) 
             PUT F3b(mu,nu) = F4b(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO a, i 
             GET F4ai(a,i) 
             PUT F3ai(a,i) = F4ai(a,i)  
       ENDPARDO a, i  
#
       PARDO b, j 
             GET F4bj(b,j) 
             PUT F3bj(b,j) = F4bj(b,j)  
       ENDPARDO b, j  
       execute sip_barrier 
#
#      5 --> 4 
#      ------- 
#
       PARDO mu, nu 
             GET F5a(mu,nu) 
             PUT F4a(mu,nu) = F5a(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO mu, nu 
             GET F5b(mu,nu) 
             PUT F4b(mu,nu) = F5b(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO a, i 
             GET F5ai(a,i) 
             PUT F4ai(a,i) = F5ai(a,i)  
       ENDPARDO a, i  
#
       PARDO b, j 
             GET F5bj(b,j) 
             PUT F4bj(b,j) = F5bj(b,j)  
       ENDPARDO b, j  
       execute sip_barrier 
#
#      6 --> 5 
#      ------- 
#
       PARDO mu, nu 
             GET F6a(mu,nu) 
             PUT F5a(mu,nu) = F6a(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO mu, nu 
             GET F6b(mu,nu) 
             PUT F5b(mu,nu) = F6b(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO a, i 
             GET F6ai(a,i) 
             PUT F5ai(a,i) = F6ai(a,i)  
       ENDPARDO a, i  
#
       PARDO b, j 
             GET F6bj(b,j) 
             PUT F5bj(b,j) = F6bj(b,j)  
       ENDPARDO b, j  
       execute sip_barrier 
#
#      Current --> 6 
#      ------------- 
#
       PARDO mu, nu 
             GET Fpq_a(mu,nu) 
             PUT F6a(mu,nu) = Fpq_a(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO mu, nu 
             GET Fpq_b(mu,nu) 
             PUT F6b(mu,nu) = Fpq_b(mu,nu)  
       ENDPARDO mu, nu 
       execute sip_barrier 
#
       ENDPROC MOVE6    
#      -------------  
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
       PROC DIIS7   
#      -----------  
#
# The DIIS expansion coefficients are computed using the 7 previous iterations.
#
#      Zero out scalars.
#      -----------------
#
       b11 = 0.0
       b12 = 0.0
       b13 = 0.0
       b14 = 0.0
       b15 = 0.0
       b16 = 0.0
       b17 = 0.0
       b18 = 0.0
       b19 = 0.0
       b110 = 0.0
#
       b22 = 0.0
       b23 = 0.0
       b24 = 0.0
       b25 = 0.0
       b26 = 0.0
       b27 = 0.0
       b28 = 0.0
       b29 = 0.0
       b210 = 0.0
#
       b33 = 0.0
       b34 = 0.0
       b35 = 0.0
       b36 = 0.0
       b37 = 0.0
       b38 = 0.0
       b39 = 0.0
       b310 = 0.0
#
       b44 = 0.0
       b45 = 0.0
       b46 = 0.0
       b47 = 0.0
       b48 = 0.0
       b49 = 0.0
       b410 = 0.0
#
       b55 = 0.0
       b56 = 0.0
       b57 = 0.0
       b58 = 0.0
       b59 = 0.0
       b510 = 0.0
#
       b66 = 0.0
       b67 = 0.0
       b68 = 0.0
       b69 = 0.0
       b610 = 0.0
#
       b77 = 0.0
       b78 = 0.0
       b79 = 0.0
       b710 = 0.0
#
       b88 = 0.0
       b89 = 0.0
       b810 = 0.0
#
       b99 = 0.0
       b910 = 0.0
#
       b1010 = 0.0
#
       Tb11 = 0.0
       Tb12 = 0.0
       Tb13 = 0.0
       Tb14 = 0.0
       Tb15 = 0.0
       Tb16 = 0.0
       Tb17 = 0.0
       Tb18 = 0.0
       Tb19 = 0.0
       Tb110 = 0.0
#
       Tb22 = 0.0
       Tb23 = 0.0
       Tb24 = 0.0
       Tb25 = 0.0
       Tb26 = 0.0
       Tb27 = 0.0
       Tb28 = 0.0 
       Tb29 = 0.0
       Tb210 = 0.0
#
       Tb33 = 0.0
       Tb34 = 0.0
       Tb35 = 0.0
       Tb36 = 0.0
       Tb37 = 0.0
       Tb38 = 0.0
       Tb39 = 0.0
       Tb310 = 0.0
#
       Tb44 = 0.0
       Tb45 = 0.0
       Tb46 = 0.0
       Tb47 = 0.0
       Tb48 = 0.0
       Tb49 = 0.0
       Tb410 = 0.0
#
       Tb55 = 0.0
       Tb56 = 0.0
       Tb57 = 0.0
       Tb58 = 0.0
       Tb59 = 0.0
       Tb510 = 0.0
#
       Tb66 = 0.0
       Tb67 = 0.0
       Tb68 = 0.0
       Tb69 = 0.0
       Tb610 = 0.0
#
       Tb77 = 0.0
       Tb78 = 0.0
       Tb79 = 0.0
       Tb710 = 0.0
#
       Tb88 = 0.0
       Tb89 = 0.0
       Tb810 = 0.0
#
       Tb99 = 0.0
       Tb910 = 0.0
#
       Tb1010 = 0.0
#
       c1 = 0.0 
       c2 = 0.0 
       c3 = 0.0 
       c4 = 0.0 
       c5 = 0.0 
       c6 = 0.0 
       c7 = 0.0 
       c8 = 0.0 
       c9 = 0.0 
       c10 = 0.0 
#
       execute sip_barrier 
#
#      Determine the 'B-matrix'. 
#      ------------------------- 
#
#      Contributions from Fai histories. 
#      --------------------------------- 
#
       PARDO a, i 
#
#          GET Fock-matrix data from all 5 previous iterations. 
#          ---------------------------------------------------- 
#
           GET F1ai(a,i) 
           GET F2ai(a,i) 
           GET F3ai(a,i) 
           GET F4ai(a,i) 
           GET F5ai(a,i) 
           GET F6ai(a,i) 
           GET F7ai(a,i) 
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#          b1x x=1,7 
#          --------- 
#
           etemp = F1ai(a,i)*F1ai(a,i) 
           b11  += etemp 
#
           etemp = F1ai(a,i)*F2ai(a,i) 
           b12  += etemp 
#
           etemp = F1ai(a,i)*F3ai(a,i) 
           b13  += etemp 
#
           etemp = F1ai(a,i)*F4ai(a,i) 
           b14  += etemp 
#
           etemp = F1ai(a,i)*F5ai(a,i) 
           b15  += etemp 
#
           etemp = F1ai(a,i)*F6ai(a,i) 
           b16  += etemp 
#
           etemp = F1ai(a,i)*F7ai(a,i) 
           b17  += etemp 
#
#          b2x x=2,7
#          --------- 
#
           etemp = F2ai(a,i)*F2ai(a,i) 
           b22  += etemp 
#
           etemp = F2ai(a,i)*F3ai(a,i) 
           b23  += etemp 
#
           etemp = F2ai(a,i)*F4ai(a,i) 
           b24  += etemp 
#
           etemp = F2ai(a,i)*F5ai(a,i) 
           b25  += etemp 
#
           etemp = F2ai(a,i)*F6ai(a,i) 
           b26  += etemp 
#
           etemp = F2ai(a,i)*F7ai(a,i) 
           b27  += etemp 
#
#          b3x x=3,7 
#          --------- 
#
           etemp = F3ai(a,i)*F3ai(a,i) 
           b33  += etemp 
#
           etemp = F3ai(a,i)*F4ai(a,i) 
           b34  += etemp 
#
           etemp = F3ai(a,i)*F5ai(a,i) 
           b35  += etemp 
#
           etemp = F3ai(a,i)*F6ai(a,i) 
           b36  += etemp 
#
           etemp = F3ai(a,i)*F7ai(a,i) 
           b37  += etemp 
#
#          b4x x=4,7
#          --------- 
#
           etemp = F4ai(a,i)*F4ai(a,i) 
           b44  += etemp 
#
           etemp = F4ai(a,i)*F5ai(a,i) 
#          b45  += etemp 
#
           etemp = F4ai(a,i)*F6ai(a,i) 
           b46  += etemp 
#
           etemp = F4ai(a,i)*F7ai(a,i) 
           b47  += etemp 
#
#          b5x x=5,7 
#          ---------- 
#
           etemp = F5ai(a,i)*F5ai(a,i) 
           b55  += etemp 
#
           etemp = F5ai(a,i)*F6ai(a,i) 
           b56  += etemp 
#
           etemp = F5ai(a,i)*F7ai(a,i) 
           b57  += etemp 
#
#          b6x x=6,7 
#          ---------- 
#
           etemp = F6ai(a,i)*F6ai(a,i) 
           b66  += etemp 
#
           etemp = F6ai(a,i)*F7ai(a,i) 
           b67  += etemp 
#
#          b7x x=7,7 
#          --------- 
#
           etemp = F7ai(a,i)*F7ai(a,i) 
           b77  += etemp 
#
       ENDPARDO a, i 
#
#      Contributions from Fbj histories. 
#      --------------------------------- 
#
       PARDO b, j 
#
#          GET Fock-matrix data from all 5 previous iterations. 
#          ---------------------------------------------------- 
#
           GET F1bj(b,j) 
           GET F2bj(b,j) 
           GET F3bj(b,j) 
           GET F4bj(b,j) 
           GET F5bj(b,j) 
           GET F6bj(b,j) 
           GET F7bj(b,j) 
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#          b1x x=1,7 
#          --------- 
#
           etemp = F1bj(b,j)*F1bj(b,j) 
           b11  += etemp 
#
           etemp = F1bj(b,j)*F2bj(b,j) 
           b12  += etemp 
#
           etemp = F1bj(b,j)*F3bj(b,j) 
           b13  += etemp 
#
           etemp = F1bj(b,j)*F4bj(b,j) 
           b14  += etemp 
#
           etemp = F1bj(b,j)*F5bj(b,j) 
           b15  += etemp 
#
           etemp = F1bj(b,j)*F6bj(b,j) 
           b16  += etemp 
#
           etemp = F1bj(b,j)*F7bj(b,j) 
           b17  += etemp 
#
#          b2x x=2,7 
#          ---------- 
#
           etemp = F2bj(b,j)*F2bj(b,j) 
           b22  += etemp 
#
           etemp = F2bj(b,j)*F3bj(b,j) 
           b23  += etemp 
#
           etemp = F2bj(b,j)*F4bj(b,j) 
           b24  += etemp 
#
           etemp = F2bj(b,j)*F5bj(b,j) 
           b25  += etemp 
#
           etemp = F2bj(b,j)*F6bj(b,j) 
           b26  += etemp 
#
           etemp = F2bj(b,j)*F7bj(b,j) 
           b27  += etemp 
#
#          b3x x=3,7 
#          ---------- 
#
           etemp = F3bj(b,j)*F3bj(b,j) 
           b33  += etemp 
#
           etemp = F3bj(b,j)*F4bj(b,j) 
           b34  += etemp 
#
           etemp = F3bj(b,j)*F5bj(b,j) 
           b35  += etemp 
#
           etemp = F3bj(b,j)*F6bj(b,j) 
           b36  += etemp 
#
           etemp = F3bj(b,j)*F7bj(b,j) 
           b37  += etemp 
#
#          b4x x=4,7 
#          ---------- 
#
           etemp = F4bj(b,j)*F4bj(b,j) 
           b44  += etemp 
#
           etemp = F4bj(b,j)*F5bj(b,j) 
           b45  += etemp 
#
           etemp = F4bj(b,j)*F6bj(b,j) 
           b46  += etemp 
#
           etemp = F4bj(b,j)*F7bj(b,j) 
           b47  += etemp 
#
#          b5x x=5,7 
#          --------- 
#
           etemp = F5bj(b,j)*F5bj(b,j) 
           b55  += etemp 
#
           etemp = F5bj(b,j)*F6bj(b,j) 
           b56  += etemp 
#
           etemp = F5bj(b,j)*F7bj(b,j) 
           b57  += etemp 
#
#          b6x x=6,7 
#          --------- 
#
           etemp = F6bj(b,j)*F6bj(b,j) 
           b66  += etemp 
#
           etemp = F6bj(b,j)*F7bj(b,j) 
           b67  += etemp 
#
#          b7x x=7,7 
#          --------- 
#
           etemp = F7bj(b,j)*F7bj(b,j) 
           b77  += etemp 
#
       ENDPARDO b, j 
#
       execute sip_barrier
#
#      Collectively sum B-matrix elements.
#      -----------------------------------
#
       collective Tb11 += b11
       collective Tb12 += b12
       collective Tb13 += b13
       collective Tb14 += b14
       collective Tb15 += b15
       collective Tb16 += b16
       collective Tb17 += b17

       collective Tb22 += b22
       collective Tb23 += b23
       collective Tb24 += b24
       collective Tb25 += b25
       collective Tb26 += b26
       collective Tb27 += b27

       collective Tb33 += b33
       collective Tb34 += b34
       collective Tb35 += b35
       collective Tb36 += b36
       collective Tb37 += b37

       collective Tb44 += b44
       collective Tb45 += b45
       collective Tb46 += b46
       collective Tb47 += b47

       collective Tb55 += b55
       collective Tb56 += b56
       collective Tb57 += b57

       collective Tb66 += b66
       collective Tb67 += b67

       collective Tb77 += b77
#
       execute sip_barrier 
#
#
#      Now the unique elements of the 'B-matrix' have been computed and the array filled out.
#      --------------------------------------------------------------------------------------
#
#      Put the elements of the 'B-matrix', which have been computed as scalars into the
#      R-matrix.
#      --------------------------------------------------------------------------------
#
       execute diis_setup Tb11
       execute diis_setup Tb12
       execute diis_setup Tb13
       execute diis_setup Tb14
       execute diis_setup Tb15
       execute diis_setup Tb16
       execute diis_setup Tb17
       execute diis_setup Tb18
       execute diis_setup Tb19
       execute diis_setup Tb110 

       execute diis_setup Tb22
       execute diis_setup Tb23
       execute diis_setup Tb24
       execute diis_setup Tb25
       execute diis_setup Tb26
       execute diis_setup Tb27
       execute diis_setup Tb28
       execute diis_setup Tb29
       execute diis_setup Tb210 

       execute diis_setup Tb33
       execute diis_setup Tb34
       execute diis_setup Tb35
       execute diis_setup Tb36
       execute diis_setup Tb37
       execute diis_setup Tb38
       execute diis_setup Tb39
       execute diis_setup Tb310 

       execute diis_setup Tb44
       execute diis_setup Tb45
       execute diis_setup Tb46
       execute diis_setup Tb47
       execute diis_setup Tb48
       execute diis_setup Tb49
       execute diis_setup Tb410 

       execute diis_setup Tb55
       execute diis_setup Tb56
       execute diis_setup Tb57
       execute diis_setup Tb58
       execute diis_setup Tb59
       execute diis_setup Tb510 

       execute diis_setup Tb66
       execute diis_setup Tb67
       execute diis_setup Tb68
       execute diis_setup Tb69
       execute diis_setup Tb610 

       execute diis_setup Tb77
       execute diis_setup Tb78
       execute diis_setup Tb79
       execute diis_setup Tb710 

       execute diis_setup Tb88
       execute diis_setup Tb89
       execute diis_setup Tb810 

       execute diis_setup Tb99
       execute diis_setup Tb910 

       execute diis_setup Tb1010 
#
       execute compute_diis # --> New instruction
#
       c1 = Tb11
       c2 = Tb22
       c3 = Tb33
       c4 = Tb44
       c5 = Tb55
       c6 = Tb66  
       c7 = Tb77
#
       etemp  = c1 
       etemp += c2 
       etemp += c3 
       etemp += c4 
       etemp += c5 
       etemp += c6
       etemp += c7
#
      #execute print_scalar c1
      #execute print_scalar c2
      #execute print_scalar c3
      #execute print_scalar c4
      #execute print_scalar c5
      #execute print_scalar c6
      #execute print_scalar c7
      #execute print_scalar etemp  
       execute sip_barrier
#
#      Done computing the c-vector.
#      ----------------------------
#
#      Form the update Density matrix using the c-vector. 
#      -----------------------------------------------
#
       PARDO mu, nu 
#
           GET F1a(mu,nu) 
           GET F2a(mu,nu) 
           GET F3a(mu,nu) 
           GET F4a(mu,nu) 
           GET F5a(mu,nu) 
           GET F6a(mu,nu) 
           GET F7a(mu,nu) 
#
           GET F1b(mu,nu) 
           GET F2b(mu,nu) 
           GET F3b(mu,nu) 
           GET F4b(mu,nu) 
           GET F5b(mu,nu) 
           GET F6b(mu,nu) 
           GET F7b(mu,nu) 
#
           t1xx(mu,nu)  = F1a(mu,nu) 
           t1xx(mu,nu) *= c1  
           txx(mu,nu)   = t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F2a(mu,nu) 
           t1xx(mu,nu) *= c2  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F3a(mu,nu) 
           t1xx(mu,nu) *= c3  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F4a(mu,nu) 
           t1xx(mu,nu) *= c4  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F5a(mu,nu) 
           t1xx(mu,nu) *= c5  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F6a(mu,nu) 
           t1xx(mu,nu) *= c6  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F7a(mu,nu) 
           t1xx(mu,nu) *= c7  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           Fpq_a(mu,nu) = txx(mu,nu) 
#
           t1xx(mu,nu)  = F1b(mu,nu) 
           t1xx(mu,nu) *= c1  
           txx(mu,nu)   = t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F2b(mu,nu) 
           t1xx(mu,nu) *= c2  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F3b(mu,nu) 
           t1xx(mu,nu) *= c3  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F4b(mu,nu) 
           t1xx(mu,nu) *= c4  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F5b(mu,nu) 
           t1xx(mu,nu) *= c5  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F6b(mu,nu) 
           t1xx(mu,nu) *= c6  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F7b(mu,nu) 
           t1xx(mu,nu) *= c7  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           Fpq_b(mu,nu) = txx(mu,nu) 
#
       ENDPARDO mu, nu 
#
       execute sip_barrier 
#
#      Move histories 
#      -------------- 
#
#      2 --> 1 
#      ------- 
#
       PARDO mu, nu 
             GET F2a(mu,nu) 
             PUT F1a(mu,nu) = F2a(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO mu, nu 
             GET F2b(mu,nu) 
             PUT F1b(mu,nu) = F2b(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO a, i 
             GET F2ai(a,i) 
             PUT F1ai(a,i) = F2ai(a,i)  
       ENDPARDO a,i  
#
       PARDO b, j 
             GET F2bj(b,j) 
             PUT F1bj(b,j) = F2bj(b,j)  
       ENDPARDO b, j  
       execute sip_barrier 
#
#      3 --> 2 
#      ------- 
#
       PARDO mu, nu 
             GET F3a(mu,nu) 
             PUT F2a(mu,nu) = F3a(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO mu, nu 
             GET F3b(mu,nu) 
             PUT F2b(mu,nu) = F3b(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO a, i 
             GET F3ai(a,i) 
             PUT F2ai(a,i) = F3ai(a,i)  
       ENDPARDO a, i  
#
       PARDO b, j 
             GET F3bj(b,j) 
             PUT F2bj(b,j) = F3bj(b,j)  
       ENDPARDO b, j  
       execute sip_barrier 
#
#      4 --> 3 
#      ------- 
#
       PARDO mu, nu 
             GET F4a(mu,nu) 
             PUT F3a(mu,nu) = F4a(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO mu, nu 
             GET F4b(mu,nu) 
             PUT F3b(mu,nu) = F4b(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO a, i 
             GET F4ai(a,i) 
             PUT F3ai(a,i) = F4ai(a,i)  
       ENDPARDO a, i  
#
       PARDO b, j 
             GET F4bj(b,j) 
             PUT F3bj(b,j) = F4bj(b,j)  
       ENDPARDO b, j  
       execute sip_barrier 
#
#      5 --> 4 
#      ------- 
#
       PARDO mu, nu 
             GET F5a(mu,nu) 
             PUT F4a(mu,nu) = F5a(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO mu, nu 
             GET F5b(mu,nu) 
             PUT F4b(mu,nu) = F5b(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO a, i 
             GET F5ai(a,i) 
             PUT F4ai(a,i) = F5ai(a,i)  
       ENDPARDO a, i  
#
       PARDO b, j 
             GET F5bj(b,j) 
             PUT F4bj(b,j) = F5bj(b,j)  
       ENDPARDO b, j  
       execute sip_barrier 
#
#      6 --> 5 
#      ------- 
#
       PARDO mu, nu 
             GET F6a(mu,nu) 
             PUT F5a(mu,nu) = F6a(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO mu, nu 
             GET F6b(mu,nu) 
             PUT F5b(mu,nu) = F6b(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO a, i 
             GET F6ai(a,i) 
             PUT F5ai(a,i) = F6ai(a,i)  
       ENDPARDO a, i  
#
       PARDO b, j 
             GET F6bj(b,j) 
             PUT F5bj(b,j) = F6bj(b,j)  
       ENDPARDO b, j  
       execute sip_barrier 
#
#      7 --> 6 
#      ------- 
#
       PARDO mu, nu 
             GET F7a(mu,nu) 
             PUT F6a(mu,nu) = F7a(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO mu, nu 
             GET F7b(mu,nu) 
             PUT F6b(mu,nu) = F7b(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO a, i 
             GET F7ai(a,i) 
             PUT F6ai(a,i) = F7ai(a,i)  
       ENDPARDO a, i  
#
       PARDO b, j 
             GET F7bj(b,j) 
             PUT F6bj(b,j) = F7bj(b,j)  
       ENDPARDO b, j  
       execute sip_barrier 
#
#      Current --> 7 
#      ------------- 
#
       PARDO mu, nu 
             GET Fpq_a(mu,nu) 
             PUT F7a(mu,nu) = Fpq_a(mu,nu)  
       ENDPARDO mu, nu 
       execute sip_barrier 
#
       PARDO mu, nu 
             GET Fpq_b(mu,nu) 
             PUT F7b(mu,nu) = Fpq_b(mu,nu)  
       ENDPARDO mu, nu 
       execute sip_barrier 
#
       ENDPROC DIIS7    
#      -------------  
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
       PROC DIIS8   
#      -----------  
#
# The DIIS expansion coefficients are computed using the 8 previous iterations.
#
#      Zero out scalars.
#      -----------------
#
       b11 = 0.0
       b12 = 0.0
       b13 = 0.0
       b14 = 0.0
       b15 = 0.0
       b16 = 0.0
       b17 = 0.0
       b18 = 0.0
       b19 = 0.0
       b110 = 0.0
#
       b22 = 0.0
       b23 = 0.0
       b24 = 0.0
       b25 = 0.0
       b26 = 0.0
       b27 = 0.0
       b28 = 0.0
       b29 = 0.0
       b210 = 0.0
#
       b33 = 0.0
       b34 = 0.0
       b35 = 0.0
       b36 = 0.0
       b37 = 0.0
       b38 = 0.0
       b39 = 0.0
       b310 = 0.0
#
       b44 = 0.0
       b45 = 0.0
       b46 = 0.0
       b47 = 0.0
       b48 = 0.0
       b49 = 0.0
       b410 = 0.0
#
       b55 = 0.0
       b56 = 0.0
       b57 = 0.0
       b58 = 0.0
       b59 = 0.0
       b510 = 0.0
#
       b66 = 0.0
       b67 = 0.0
       b68 = 0.0
       b69 = 0.0
       b610 = 0.0
#
       b77 = 0.0
       b78 = 0.0
       b79 = 0.0
       b710 = 0.0
#
       b88 = 0.0
       b89 = 0.0
       b810 = 0.0
#
       b99 = 0.0
       b910 = 0.0
#
       b1010 = 0.0
#
       Tb11 = 0.0
       Tb12 = 0.0
       Tb13 = 0.0
       Tb14 = 0.0
       Tb15 = 0.0
       Tb16 = 0.0
       Tb17 = 0.0
       Tb18 = 0.0
       Tb19 = 0.0
       Tb110 = 0.0
#
       Tb22 = 0.0
       Tb23 = 0.0
       Tb24 = 0.0
       Tb25 = 0.0
       Tb26 = 0.0
       Tb27 = 0.0
       Tb28 = 0.0 
       Tb29 = 0.0
       Tb210 = 0.0
#
       Tb33 = 0.0
       Tb34 = 0.0
       Tb35 = 0.0
       Tb36 = 0.0
       Tb37 = 0.0
       Tb38 = 0.0
       Tb39 = 0.0
       Tb310 = 0.0
#
       Tb44 = 0.0
       Tb45 = 0.0
       Tb46 = 0.0
       Tb47 = 0.0
       Tb48 = 0.0
       Tb49 = 0.0
       Tb410 = 0.0
#
       Tb55 = 0.0
       Tb56 = 0.0
       Tb57 = 0.0
       Tb58 = 0.0
       Tb59 = 0.0
       Tb510 = 0.0
#
       Tb66 = 0.0
       Tb67 = 0.0
       Tb68 = 0.0
       Tb69 = 0.0
       Tb610 = 0.0
#
       Tb77 = 0.0
       Tb78 = 0.0
       Tb79 = 0.0
       Tb710 = 0.0
#
       Tb88 = 0.0
       Tb89 = 0.0
       Tb810 = 0.0
#
       Tb99 = 0.0
       Tb910 = 0.0
#
       Tb1010 = 0.0
#
       c1 = 0.0 
       c2 = 0.0 
       c3 = 0.0 
       c4 = 0.0 
       c5 = 0.0 
       c6 = 0.0 
       c7 = 0.0 
       c8 = 0.0 
       c9 = 0.0 
       c10 = 0.0 
#
       execute sip_barrier 
#
#      Determine the 'B-matrix'. 
#      ------------------------- 
#
#      Contributions from Fai histories. 
#      --------------------------------- 
#
       PARDO a, i 
#
#          GET Fock-matrix data from all 5 previous iterations. 
#          ---------------------------------------------------- 
#
           GET F1ai(a,i) 
           GET F2ai(a,i) 
           GET F3ai(a,i) 
           GET F4ai(a,i) 
           GET F5ai(a,i) 
           GET F6ai(a,i) 
           GET F7ai(a,i) 
           GET F8ai(a,i) 
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#          b1x x=1,8 
#          --------- 
#
           etemp = F1ai(a,i)*F1ai(a,i) 
           b11  += etemp 
#
           etemp = F1ai(a,i)*F2ai(a,i) 
           b12  += etemp 
#
           etemp = F1ai(a,i)*F3ai(a,i) 
           b13  += etemp 
#
           etemp = F1ai(a,i)*F4ai(a,i) 
           b14  += etemp 
#
           etemp = F1ai(a,i)*F5ai(a,i) 
           b15  += etemp 
#
           etemp = F1ai(a,i)*F6ai(a,i) 
           b16  += etemp 
#
           etemp = F1ai(a,i)*F7ai(a,i) 
           b17  += etemp 
#
           etemp = F1ai(a,i)*F8ai(a,i) 
           b18  += etemp 
#
#          b2x x=2,8
#          --------- 
#
           etemp = F2ai(a,i)*F2ai(a,i) 
           b22  += etemp 
#
           etemp = F2ai(a,i)*F3ai(a,i) 
           b23  += etemp 
#
           etemp = F2ai(a,i)*F4ai(a,i) 
           b24  += etemp 
#
           etemp = F2ai(a,i)*F5ai(a,i) 
           b25  += etemp 
#
           etemp = F2ai(a,i)*F6ai(a,i) 
           b26  += etemp 
#
           etemp = F2ai(a,i)*F7ai(a,i) 
           b27  += etemp 
#
           etemp = F2ai(a,i)*F8ai(a,i) 
           b28  += etemp 
#
#          b3x x=3,8 
#          --------- 
#
           etemp = F3ai(a,i)*F3ai(a,i) 
           b33  += etemp 
#
           etemp = F3ai(a,i)*F4ai(a,i) 
           b34  += etemp 
#
           etemp = F3ai(a,i)*F5ai(a,i) 
           b35  += etemp 
#
           etemp = F3ai(a,i)*F6ai(a,i) 
           b36  += etemp 
#
           etemp = F3ai(a,i)*F7ai(a,i) 
           b37  += etemp 
#
           etemp = F3ai(a,i)*F8ai(a,i) 
           b38  += etemp 
#
#          b4x x=4,8
#          --------- 
#
           etemp = F4ai(a,i)*F4ai(a,i) 
           b44  += etemp 
#
           etemp = F4ai(a,i)*F5ai(a,i) 
#          b45  += etemp 
#
           etemp = F4ai(a,i)*F6ai(a,i) 
           b46  += etemp 
#
           etemp = F4ai(a,i)*F7ai(a,i) 
           b47  += etemp 
#
           etemp = F4ai(a,i)*F8ai(a,i) 
           b48  += etemp 
#
#          b5x x=5,8 
#          ---------- 
#
           etemp = F5ai(a,i)*F5ai(a,i) 
           b55  += etemp 
#
           etemp = F5ai(a,i)*F6ai(a,i) 
           b56  += etemp 
#
           etemp = F5ai(a,i)*F7ai(a,i) 
           b57  += etemp 
#
           etemp = F5ai(a,i)*F8ai(a,i) 
           b58  += etemp 
#
#          b6x x=6,8 
#          ---------- 
#
           etemp = F6ai(a,i)*F6ai(a,i) 
           b66  += etemp 
#
           etemp = F6ai(a,i)*F7ai(a,i) 
           b67  += etemp 
#
           etemp = F6ai(a,i)*F8ai(a,i) 
           b68  += etemp 
#
#          b7x x=7,8 
#          --------- 
#
           etemp = F7ai(a,i)*F7ai(a,i) 
           b77  += etemp 
#
           etemp = F7ai(a,i)*F8ai(a,i) 
           b78  += etemp 
#
#          b8x x=8,8
#          ---------- 
#
           etemp = F8ai(a,i)*F8ai(a,i) 
           b88  += etemp 
#
       ENDPARDO a, i 
#
#      Contributions from Fbj histories. 
#      --------------------------------- 
#
       PARDO b, j 
#
#          GET Fock-matrix data from all 5 previous iterations. 
#          ---------------------------------------------------- 
#
           GET F1bj(b,j) 
           GET F2bj(b,j) 
           GET F3bj(b,j) 
           GET F4bj(b,j) 
           GET F5bj(b,j) 
           GET F6bj(b,j) 
           GET F7bj(b,j) 
           GET F8bj(b,j) 
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#          b1x x=1,8 
#          --------- 
#
           etemp = F1bj(b,j)*F1bj(b,j) 
           b11  += etemp 
#
           etemp = F1bj(b,j)*F2bj(b,j) 
           b12  += etemp 
#
           etemp = F1bj(b,j)*F3bj(b,j) 
           b13  += etemp 
#
           etemp = F1bj(b,j)*F4bj(b,j) 
           b14  += etemp 
#
           etemp = F1bj(b,j)*F5bj(b,j) 
           b15  += etemp 
#
           etemp = F1bj(b,j)*F6bj(b,j) 
           b16  += etemp 
#
           etemp = F1bj(b,j)*F7bj(b,j) 
           b17  += etemp 
#
           etemp = F1bj(b,j)*F8bj(b,j) 
           b18  += etemp 
#
#          b2x x=2,8 
#          ---------- 
#
           etemp = F2bj(b,j)*F2bj(b,j) 
           b22  += etemp 
#
           etemp = F2bj(b,j)*F3bj(b,j) 
           b23  += etemp 
#
           etemp = F2bj(b,j)*F4bj(b,j) 
           b24  += etemp 
#
           etemp = F2bj(b,j)*F5bj(b,j) 
           b25  += etemp 
#
           etemp = F2bj(b,j)*F6bj(b,j) 
           b26  += etemp 
#
           etemp = F2bj(b,j)*F7bj(b,j) 
           b27  += etemp 
#
           etemp = F2bj(b,j)*F8bj(b,j) 
           b28  += etemp 
#
#          b3x x=3,8 
#          ---------- 
#
           etemp = F3bj(b,j)*F3bj(b,j) 
           b33  += etemp 
#
           etemp = F3bj(b,j)*F4bj(b,j) 
           b34  += etemp 
#
           etemp = F3bj(b,j)*F5bj(b,j) 
           b35  += etemp 
#
           etemp = F3bj(b,j)*F6bj(b,j) 
           b36  += etemp 
#
           etemp = F3bj(b,j)*F7bj(b,j) 
           b37  += etemp 
#
           etemp = F3bj(b,j)*F8bj(b,j) 
           b38  += etemp 
#
#          b4x x=4,8 
#          ---------- 
#
           etemp = F4bj(b,j)*F4bj(b,j) 
           b44  += etemp 
#
           etemp = F4bj(b,j)*F5bj(b,j) 
           b45  += etemp 
#
           etemp = F4bj(b,j)*F6bj(b,j) 
           b46  += etemp 
#
           etemp = F4bj(b,j)*F7bj(b,j) 
           b47  += etemp 
#
           etemp = F4bj(b,j)*F8bj(b,j) 
           b48  += etemp 
#
#          b5x x=5,8 
#          --------- 
#
           etemp = F5bj(b,j)*F5bj(b,j) 
           b55  += etemp 
#
           etemp = F5bj(b,j)*F6bj(b,j) 
           b56  += etemp 
#
           etemp = F5bj(b,j)*F7bj(b,j) 
           b57  += etemp 
#
           etemp = F5bj(b,j)*F8bj(b,j) 
           b58  += etemp 
#
#          b6x x=6,8 
#          --------- 
#
           etemp = F6bj(b,j)*F6bj(b,j) 
           b66  += etemp 
#
           etemp = F6bj(b,j)*F7bj(b,j) 
           b67  += etemp 
#
           etemp = F6bj(b,j)*F8bj(b,j) 
           b68  += etemp 
#
#          b7x x=7,8 
#          --------- 
#
           etemp = F7bj(b,j)*F7bj(b,j) 
           b77  += etemp 
#
           etemp = F7bj(b,j)*F8bj(b,j) 
           b78  += etemp 
#
#          b8x x=8,8 
#          --------- 
#
           etemp = F8bj(b,j)*F8bj(b,j) 
           b88  += etemp 
#
       ENDPARDO b, j 
#
       execute sip_barrier
#
#      Collectively sum B-matrix elements.
#      -----------------------------------
#
       collective Tb11 += b11
       collective Tb12 += b12
       collective Tb13 += b13
       collective Tb14 += b14
       collective Tb15 += b15
       collective Tb16 += b16
       collective Tb17 += b17
       collective Tb18 += b18

       collective Tb22 += b22
       collective Tb23 += b23
       collective Tb24 += b24
       collective Tb25 += b25
       collective Tb26 += b26
       collective Tb27 += b27
       collective Tb28 += b28

       collective Tb33 += b33
       collective Tb34 += b34
       collective Tb35 += b35
       collective Tb36 += b36
       collective Tb37 += b37
       collective Tb38 += b38

       collective Tb44 += b44
       collective Tb45 += b45
       collective Tb46 += b46
       collective Tb47 += b47
       collective Tb48 += b48

       collective Tb55 += b55
       collective Tb56 += b56
       collective Tb57 += b57
       collective Tb58 += b58

       collective Tb66 += b66
       collective Tb67 += b67
       collective Tb68 += b68

       collective Tb77 += b77
       collective Tb78 += b78

       collective Tb88 += b88
#
       execute sip_barrier 
#
#
#      Now the unique elements of the 'B-matrix' have been computed and the array filled out.
#      --------------------------------------------------------------------------------------
#
#      Put the elements of the 'B-matrix', which have been computed as scalars into the
#      R-matrix.
#      --------------------------------------------------------------------------------
#
       execute diis_setup Tb11
       execute diis_setup Tb12
       execute diis_setup Tb13
       execute diis_setup Tb14
       execute diis_setup Tb15
       execute diis_setup Tb16
       execute diis_setup Tb17
       execute diis_setup Tb18
       execute diis_setup Tb19
       execute diis_setup Tb110 

       execute diis_setup Tb22
       execute diis_setup Tb23
       execute diis_setup Tb24
       execute diis_setup Tb25
       execute diis_setup Tb26
       execute diis_setup Tb27
       execute diis_setup Tb28
       execute diis_setup Tb29
       execute diis_setup Tb210 

       execute diis_setup Tb33
       execute diis_setup Tb34
       execute diis_setup Tb35
       execute diis_setup Tb36
       execute diis_setup Tb37
       execute diis_setup Tb38
       execute diis_setup Tb39
       execute diis_setup Tb310 

       execute diis_setup Tb44
       execute diis_setup Tb45
       execute diis_setup Tb46
       execute diis_setup Tb47
       execute diis_setup Tb48
       execute diis_setup Tb49
       execute diis_setup Tb410 

       execute diis_setup Tb55
       execute diis_setup Tb56
       execute diis_setup Tb57
       execute diis_setup Tb58
       execute diis_setup Tb59
       execute diis_setup Tb510 

       execute diis_setup Tb66
       execute diis_setup Tb67
       execute diis_setup Tb68
       execute diis_setup Tb69
       execute diis_setup Tb610 

       execute diis_setup Tb77
       execute diis_setup Tb78
       execute diis_setup Tb79
       execute diis_setup Tb710 

       execute diis_setup Tb88
       execute diis_setup Tb89
       execute diis_setup Tb810 

       execute diis_setup Tb99
       execute diis_setup Tb910 

       execute diis_setup Tb1010 
#
       execute compute_diis # --> New instruction
#
       c1 = Tb11
       c2 = Tb22
       c3 = Tb33
       c4 = Tb44
       c5 = Tb55
       c6 = Tb66  
       c7 = Tb77
       c8 = Tb88
#
       etemp  = c1 
       etemp += c2 
       etemp += c3 
       etemp += c4 
       etemp += c5 
       etemp += c6
       etemp += c7
       etemp += c8 
#
      #execute print_scalar c1
      #execute print_scalar c2
      #execute print_scalar c3
      #execute print_scalar c4
      #execute print_scalar c5
      #execute print_scalar c6
      #execute print_scalar c7
      #execute print_scalar c8
      #execute print_scalar etemp  
       execute sip_barrier
#
#      Done computing the c-vector.
#      ----------------------------
#
#      Form the update Density matrix using the c-vector. 
#      -----------------------------------------------
#
       PARDO mu, nu 
#
           GET F1a(mu,nu) 
           GET F2a(mu,nu) 
           GET F3a(mu,nu) 
           GET F4a(mu,nu) 
           GET F5a(mu,nu) 
           GET F6a(mu,nu) 
           GET F7a(mu,nu) 
           GET F8a(mu,nu) 
#
           GET F1b(mu,nu) 
           GET F2b(mu,nu) 
           GET F3b(mu,nu) 
           GET F4b(mu,nu) 
           GET F5b(mu,nu) 
           GET F6b(mu,nu) 
           GET F7b(mu,nu) 
           GET F8b(mu,nu) 
#
           t1xx(mu,nu)  = F1a(mu,nu) 
           t1xx(mu,nu) *= c1  
           txx(mu,nu)   = t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F2a(mu,nu) 
           t1xx(mu,nu) *= c2  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F3a(mu,nu) 
           t1xx(mu,nu) *= c3  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F4a(mu,nu) 
           t1xx(mu,nu) *= c4  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F5a(mu,nu) 
           t1xx(mu,nu) *= c5  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F6a(mu,nu) 
           t1xx(mu,nu) *= c6  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F7a(mu,nu) 
           t1xx(mu,nu) *= c7  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F8a(mu,nu) 
           t1xx(mu,nu) *= c8  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           Fpq_a(mu,nu) = txx(mu,nu) 
#
           t1xx(mu,nu)  = F1b(mu,nu) 
           t1xx(mu,nu) *= c1  
           txx(mu,nu)   = t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F2b(mu,nu) 
           t1xx(mu,nu) *= c2  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F3b(mu,nu) 
           t1xx(mu,nu) *= c3  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F4b(mu,nu) 
           t1xx(mu,nu) *= c4  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F5b(mu,nu) 
           t1xx(mu,nu) *= c5  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F6b(mu,nu) 
           t1xx(mu,nu) *= c6  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F7b(mu,nu) 
           t1xx(mu,nu) *= c7  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F8b(mu,nu) 
           t1xx(mu,nu) *= c8  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           Fpq_b(mu,nu) = txx(mu,nu) 
#
       ENDPARDO mu, nu 
#
       execute sip_barrier 
#
#      Move histories 
#      -------------- 
#
#      2 --> 1 
#      ------- 
#
       PARDO mu, nu 
             GET F2a(mu,nu) 
             PUT F1a(mu,nu) = F2a(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO mu, nu 
             GET F2b(mu,nu) 
             PUT F1b(mu,nu) = F2b(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO a, i 
             GET F2ai(a,i) 
             PUT F1ai(a,i) = F2ai(a,i)  
       ENDPARDO a,i  
#
       PARDO b, j 
             GET F2bj(b,j) 
             PUT F1bj(b,j) = F2bj(b,j)  
       ENDPARDO b, j  
       execute sip_barrier 
#
#      3 --> 2 
#      ------- 
#
       PARDO mu, nu 
             GET F3a(mu,nu) 
             PUT F2a(mu,nu) = F3a(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO mu, nu 
             GET F3b(mu,nu) 
             PUT F2b(mu,nu) = F3b(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO a, i 
             GET F3ai(a,i) 
             PUT F2ai(a,i) = F3ai(a,i)  
       ENDPARDO a, i  
#
       PARDO b, j 
             GET F3bj(b,j) 
             PUT F2bj(b,j) = F3bj(b,j)  
       ENDPARDO b, j  
       execute sip_barrier 
#
#      4 --> 3 
#      ------- 
#
       PARDO mu, nu 
             GET F4a(mu,nu) 
             PUT F3a(mu,nu) = F4a(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO mu, nu 
             GET F4b(mu,nu) 
             PUT F3b(mu,nu) = F4b(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO a, i 
             GET F4ai(a,i) 
             PUT F3ai(a,i) = F4ai(a,i)  
       ENDPARDO a, i  
#
       PARDO b, j 
             GET F4bj(b,j) 
             PUT F3bj(b,j) = F4bj(b,j)  
       ENDPARDO b, j  
       execute sip_barrier 
#
#      5 --> 4 
#      ------- 
#
       PARDO mu, nu 
             GET F5a(mu,nu) 
             PUT F4a(mu,nu) = F5a(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO mu, nu 
             GET F5b(mu,nu) 
             PUT F4b(mu,nu) = F5b(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO a, i 
             GET F5ai(a,i) 
             PUT F4ai(a,i) = F5ai(a,i)  
       ENDPARDO a, i  
#
       PARDO b, j 
             GET F5bj(b,j) 
             PUT F4bj(b,j) = F5bj(b,j)  
       ENDPARDO b, j  
       execute sip_barrier 
#
#      6 --> 5 
#      ------- 
#
       PARDO mu, nu 
             GET F6a(mu,nu) 
             PUT F5a(mu,nu) = F6a(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO mu, nu 
             GET F6b(mu,nu) 
             PUT F5b(mu,nu) = F6b(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO a, i 
             GET F6ai(a,i) 
             PUT F5ai(a,i) = F6ai(a,i)  
       ENDPARDO a, i  
#
       PARDO b, j 
             GET F6bj(b,j) 
             PUT F5bj(b,j) = F6bj(b,j)  
       ENDPARDO b, j  
       execute sip_barrier 
#
#      7 --> 6 
#      ------- 
#
       PARDO mu, nu 
             GET F7a(mu,nu) 
             PUT F6a(mu,nu) = F7a(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO mu, nu 
             GET F7b(mu,nu) 
             PUT F6b(mu,nu) = F7b(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO a, i 
             GET F7ai(a,i) 
             PUT F6ai(a,i) = F7ai(a,i)  
       ENDPARDO a, i  
#
       PARDO b, j 
             GET F7bj(b,j) 
             PUT F6bj(b,j) = F7bj(b,j)  
       ENDPARDO b, j  
       execute sip_barrier 
#
#      8 --> 7 
#      ------- 
#
       PARDO mu, nu 
             GET F8a(mu,nu) 
             PUT F7a(mu,nu) = F8a(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO mu, nu 
             GET F8b(mu,nu) 
             PUT F7b(mu,nu) = F8b(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO a, i 
             GET F8ai(a,i) 
             PUT F7ai(a,i) = F8ai(a,i)  
       ENDPARDO a, i  
#
       PARDO b, j 
             GET F8bj(b,j) 
             PUT F7bj(b,j) = F8bj(b,j)  
       ENDPARDO b, j  
       execute sip_barrier 
#
#      Current --> 8 
#      ------------- 
#
       PARDO mu, nu 
             GET Fpq_a(mu,nu) 
             PUT F8a(mu,nu) = Fpq_a(mu,nu)  
       ENDPARDO mu, nu 
       execute sip_barrier 
#
       PARDO mu, nu 
             GET Fpq_b(mu,nu) 
             PUT F8b(mu,nu) = Fpq_b(mu,nu)  
       ENDPARDO mu, nu 
       execute sip_barrier 
#
       ENDPROC DIIS8    
#      -------------  
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
       PROC DIIS9   
#      ----------  
#
# The DIIS expansion coefficients are computed using the 9 previous iterations.
#
#      Zero out scalars.
#      -----------------
#
       b11 = 0.0
       b12 = 0.0
       b13 = 0.0
       b14 = 0.0
       b15 = 0.0
       b16 = 0.0
       b17 = 0.0
       b18 = 0.0
       b19 = 0.0
       b110 = 0.0
#
       b22 = 0.0
       b23 = 0.0
       b24 = 0.0
       b25 = 0.0
       b26 = 0.0
       b27 = 0.0
       b28 = 0.0
       b29 = 0.0
       b210 = 0.0
#
       b33 = 0.0
       b34 = 0.0
       b35 = 0.0
       b36 = 0.0
       b37 = 0.0
       b38 = 0.0
       b39 = 0.0
       b310 = 0.0
#
       b44 = 0.0
       b45 = 0.0
       b46 = 0.0
       b47 = 0.0
       b48 = 0.0
       b49 = 0.0
       b410 = 0.0
#
       b55 = 0.0
       b56 = 0.0
       b57 = 0.0
       b58 = 0.0
       b59 = 0.0
       b510 = 0.0
#
       b66 = 0.0
       b67 = 0.0
       b68 = 0.0
       b69 = 0.0
       b610 = 0.0
#
       b77 = 0.0
       b78 = 0.0
       b79 = 0.0
       b710 = 0.0
#
       b88 = 0.0
       b89 = 0.0
       b810 = 0.0
#
       b99 = 0.0
       b910 = 0.0
#
       b1010 = 0.0
#
       Tb11 = 0.0
       Tb12 = 0.0
       Tb13 = 0.0
       Tb14 = 0.0
       Tb15 = 0.0
       Tb16 = 0.0
       Tb17 = 0.0
       Tb18 = 0.0
       Tb19 = 0.0
       Tb110 = 0.0
#
       Tb22 = 0.0
       Tb23 = 0.0
       Tb24 = 0.0
       Tb25 = 0.0
       Tb26 = 0.0
       Tb27 = 0.0
       Tb28 = 0.0 
       Tb29 = 0.0
       Tb210 = 0.0
#
       Tb33 = 0.0
       Tb34 = 0.0
       Tb35 = 0.0
       Tb36 = 0.0
       Tb37 = 0.0
       Tb38 = 0.0
       Tb39 = 0.0
       Tb310 = 0.0
#
       Tb44 = 0.0
       Tb45 = 0.0
       Tb46 = 0.0
       Tb47 = 0.0
       Tb48 = 0.0
       Tb49 = 0.0
       Tb410 = 0.0
#
       Tb55 = 0.0
       Tb56 = 0.0
       Tb57 = 0.0
       Tb58 = 0.0
       Tb59 = 0.0
       Tb510 = 0.0
#
       Tb66 = 0.0
       Tb67 = 0.0
       Tb68 = 0.0
       Tb69 = 0.0
       Tb610 = 0.0
#
       Tb77 = 0.0
       Tb78 = 0.0
       Tb79 = 0.0
       Tb710 = 0.0
#
       Tb88 = 0.0
       Tb89 = 0.0
       Tb810 = 0.0
#
       Tb99 = 0.0
       Tb910 = 0.0
#
       Tb1010 = 0.0
#
       c1 = 0.0 
       c2 = 0.0 
       c3 = 0.0 
       c4 = 0.0 
       c5 = 0.0 
       c6 = 0.0 
       c7 = 0.0 
       c8 = 0.0 
       c9 = 0.0 
       c10 = 0.0 
#
       execute sip_barrier 
#
#      Determine the 'B-matrix'. 
#      ------------------------- 
#
#      Contributions from Fai histories. 
#      --------------------------------- 
#
       PARDO a, i 
#
#          GET Fock-matrix data from all 5 previous iterations. 
#          ---------------------------------------------------- 
#
           GET F1ai(a,i) 
           GET F2ai(a,i) 
           GET F3ai(a,i) 
           GET F4ai(a,i) 
           GET F5ai(a,i) 
           GET F6ai(a,i) 
           GET F7ai(a,i) 
           GET F8ai(a,i) 
           GET F9ai(a,i) 
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#          b1x x=1,9 
#          --------- 
#
           etemp = F1ai(a,i)*F1ai(a,i) 
           b11  += etemp 
#
           etemp = F1ai(a,i)*F2ai(a,i) 
           b12  += etemp 
#
           etemp = F1ai(a,i)*F3ai(a,i) 
           b13  += etemp 
#
           etemp = F1ai(a,i)*F4ai(a,i) 
           b14  += etemp 
#
           etemp = F1ai(a,i)*F5ai(a,i) 
           b15  += etemp 
#
           etemp = F1ai(a,i)*F6ai(a,i) 
           b16  += etemp 
#
           etemp = F1ai(a,i)*F7ai(a,i) 
           b17  += etemp 
#
           etemp = F1ai(a,i)*F8ai(a,i) 
           b18  += etemp 
#
           etemp = F1ai(a,i)*F9ai(a,i) 
           b19  += etemp 
#
#          b2x x=2,9
#          --------- 
#
           etemp = F2ai(a,i)*F2ai(a,i) 
           b22  += etemp 
#
           etemp = F2ai(a,i)*F3ai(a,i) 
           b23  += etemp 
#
           etemp = F2ai(a,i)*F4ai(a,i) 
           b24  += etemp 
#
           etemp = F2ai(a,i)*F5ai(a,i) 
           b25  += etemp 
#
           etemp = F2ai(a,i)*F6ai(a,i) 
           b26  += etemp 
#
           etemp = F2ai(a,i)*F7ai(a,i) 
           b27  += etemp 
#
           etemp = F2ai(a,i)*F8ai(a,i) 
           b28  += etemp 
#
           etemp = F2ai(a,i)*F9ai(a,i) 
           b29  += etemp 
#
#          b3x x=3,9 
#          --------- 
#
           etemp = F3ai(a,i)*F3ai(a,i) 
           b33  += etemp 
#
           etemp = F3ai(a,i)*F4ai(a,i) 
           b34  += etemp 
#
           etemp = F3ai(a,i)*F5ai(a,i) 
           b35  += etemp 
#
           etemp = F3ai(a,i)*F6ai(a,i) 
           b36  += etemp 
#
           etemp = F3ai(a,i)*F7ai(a,i) 
           b37  += etemp 
#
           etemp = F3ai(a,i)*F8ai(a,i) 
           b38  += etemp 
#
           etemp = F3ai(a,i)*F9ai(a,i) 
           b39  += etemp 
#
#          b4x x=4,9
#          --------- 
#
           etemp = F4ai(a,i)*F4ai(a,i) 
           b44  += etemp 
#
           etemp = F4ai(a,i)*F5ai(a,i) 
#          b45  += etemp 
#
           etemp = F4ai(a,i)*F6ai(a,i) 
           b46  += etemp 
#
           etemp = F4ai(a,i)*F7ai(a,i) 
           b47  += etemp 
#
           etemp = F4ai(a,i)*F8ai(a,i) 
           b48  += etemp 
#
           etemp = F4ai(a,i)*F9ai(a,i) 
           b49  += etemp 
#
#          b5x x=5,9 
#          --------- 
#
           etemp = F5ai(a,i)*F5ai(a,i) 
           b55  += etemp 
#
           etemp = F5ai(a,i)*F6ai(a,i) 
           b56  += etemp 
#
           etemp = F5ai(a,i)*F7ai(a,i) 
           b57  += etemp 
#
           etemp = F5ai(a,i)*F8ai(a,i) 
           b58  += etemp 
#
           etemp = F5ai(a,i)*F9ai(a,i) 
           b59  += etemp 
#
#          b6x x=6,9 
#          --------- 
#
           etemp = F6ai(a,i)*F6ai(a,i) 
           b66  += etemp 
#
           etemp = F6ai(a,i)*F7ai(a,i) 
           b67  += etemp 
#
           etemp = F6ai(a,i)*F8ai(a,i) 
           b68  += etemp 
#
           etemp = F6ai(a,i)*F9ai(a,i) 
           b69  += etemp 
#
#          b7x x=7,9 
#          --------- 
#
           etemp = F7ai(a,i)*F7ai(a,i) 
           b77  += etemp 
#
           etemp = F7ai(a,i)*F8ai(a,i) 
           b78  += etemp 
#
           etemp = F7ai(a,i)*F9ai(a,i) 
           b79  += etemp 
#
#          b8x x=8,9 
#          --------- 
#
           etemp = F8ai(a,i)*F8ai(a,i) 
           b88  += etemp 
#
           etemp = F8ai(a,i)*F9ai(a,i) 
           b89  += etemp 
#
#          b9x x=9,9 
#          --------- 
#
           etemp = F9ai(a,i)*F9ai(a,i) 
           b99  += etemp 
#
       ENDPARDO a, i 
#
#      Contributions from Fbj histories. 
#      --------------------------------- 
#
       PARDO b, j 
#
#          GET Fock-matrix data from all 5 previous iterations. 
#          ---------------------------------------------------- 
#
           GET F1bj(b,j) 
           GET F2bj(b,j) 
           GET F3bj(b,j) 
           GET F4bj(b,j) 
           GET F5bj(b,j) 
           GET F6bj(b,j) 
           GET F7bj(b,j) 
           GET F8bj(b,j) 
           GET F9bj(b,j) 
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#          b1x x=1,9 
#          --------- 
#
           etemp = F1bj(b,j)*F1bj(b,j) 
           b11  += etemp 
#
           etemp = F1bj(b,j)*F2bj(b,j) 
           b12  += etemp 
#
           etemp = F1bj(b,j)*F3bj(b,j) 
           b13  += etemp 
#
           etemp = F1bj(b,j)*F4bj(b,j) 
           b14  += etemp 
#
           etemp = F1bj(b,j)*F5bj(b,j) 
           b15  += etemp 
#
           etemp = F1bj(b,j)*F6bj(b,j) 
           b16  += etemp 
#
           etemp = F1bj(b,j)*F7bj(b,j) 
           b17  += etemp 
#
           etemp = F1bj(b,j)*F8bj(b,j) 
           b18  += etemp 
#
           etemp = F1bj(b,j)*F9bj(b,j) 
           b19  += etemp 
#
#          b2x x=2,9 
#          --------- 
#
           etemp = F2bj(b,j)*F2bj(b,j) 
           b22  += etemp 
#
           etemp = F2bj(b,j)*F3bj(b,j) 
           b23  += etemp 
#
           etemp = F2bj(b,j)*F4bj(b,j) 
           b24  += etemp 
#
           etemp = F2bj(b,j)*F5bj(b,j) 
           b25  += etemp 
#
           etemp = F2bj(b,j)*F6bj(b,j) 
           b26  += etemp 
#
           etemp = F2bj(b,j)*F7bj(b,j) 
           b27  += etemp 
#
           etemp = F2bj(b,j)*F8bj(b,j) 
           b28  += etemp 
#
           etemp = F2bj(b,j)*F9bj(b,j) 
           b29  += etemp 
#
#          b3x x=3,9 
#          --------- 
#
           etemp = F3bj(b,j)*F3bj(b,j) 
           b33  += etemp 
#
           etemp = F3bj(b,j)*F4bj(b,j) 
           b34  += etemp 
#
           etemp = F3bj(b,j)*F5bj(b,j) 
           b35  += etemp 
#
           etemp = F3bj(b,j)*F6bj(b,j) 
           b36  += etemp 
#
           etemp = F3bj(b,j)*F7bj(b,j) 
           b37  += etemp 
#
           etemp = F3bj(b,j)*F8bj(b,j) 
           b38  += etemp 
#
           etemp = F3bj(b,j)*F9bj(b,j) 
           b39  += etemp 
#
#          b4x x=4,9 
#          --------- 
#
           etemp = F4bj(b,j)*F4bj(b,j) 
           b44  += etemp 
#
           etemp = F4bj(b,j)*F5bj(b,j) 
           b45  += etemp 
#
           etemp = F4bj(b,j)*F6bj(b,j) 
           b46  += etemp 
#
           etemp = F4bj(b,j)*F7bj(b,j) 
           b47  += etemp 
#
           etemp = F4bj(b,j)*F8bj(b,j) 
           b48  += etemp 
#
           etemp = F4bj(b,j)*F9bj(b,j) 
           b49  += etemp 
#
#          b5x x=5,9 
#          --------- 
#
           etemp = F5bj(b,j)*F5bj(b,j) 
           b55  += etemp 
#
           etemp = F5bj(b,j)*F6bj(b,j) 
           b56  += etemp 
#
           etemp = F5bj(b,j)*F7bj(b,j) 
           b57  += etemp 
#
           etemp = F5bj(b,j)*F8bj(b,j) 
           b58  += etemp 
#
           etemp = F5bj(b,j)*F9bj(b,j) 
           b59  += etemp 
#
#          b6x x=6,9 
#          --------- 
#
           etemp = F6bj(b,j)*F6bj(b,j) 
           b66  += etemp 
#
           etemp = F6bj(b,j)*F7bj(b,j) 
           b67  += etemp 
#
           etemp = F6bj(b,j)*F8bj(b,j) 
           b68  += etemp 
#
           etemp = F6bj(b,j)*F9bj(b,j) 
           b69  += etemp 
#
#          b7x x=7,9 
#          --------- 
#
           etemp = F7bj(b,j)*F7bj(b,j) 
           b77  += etemp 
#
           etemp = F7bj(b,j)*F8bj(b,j) 
           b78  += etemp 
#
           etemp = F7bj(b,j)*F9bj(b,j) 
           b79  += etemp 
#
#          b8x x=8,9 
#          --------- 
#
           etemp = F8bj(b,j)*F8bj(b,j) 
           b88  += etemp 
#
           etemp = F8bj(b,j)*F9bj(b,j) 
           b89  += etemp 
#
#          b9x x=9,9 
#          --------- 
#
           etemp = F9bj(b,j)*F9bj(b,j) 
           b99  += etemp 
#
       ENDPARDO b, j 
#
       execute sip_barrier
#
#      Collectively sum B-matrix elements.
#      -----------------------------------
#
       collective Tb11 += b11
       collective Tb12 += b12
       collective Tb13 += b13
       collective Tb14 += b14
       collective Tb15 += b15
       collective Tb16 += b16
       collective Tb17 += b17
       collective Tb18 += b18
       collective Tb19 += b19

       collective Tb22 += b22
       collective Tb23 += b23
       collective Tb24 += b24
       collective Tb25 += b25
       collective Tb26 += b26
       collective Tb27 += b27
       collective Tb28 += b28
       collective Tb29 += b29

       collective Tb33 += b33
       collective Tb34 += b34
       collective Tb35 += b35
       collective Tb36 += b36
       collective Tb37 += b37
       collective Tb38 += b38
       collective Tb39 += b39

       collective Tb44 += b44
       collective Tb45 += b45
       collective Tb46 += b46
       collective Tb47 += b47
       collective Tb48 += b48
       collective Tb49 += b49

       collective Tb55 += b55
       collective Tb56 += b56
       collective Tb57 += b57
       collective Tb58 += b58
       collective Tb59 += b59

       collective Tb66 += b66
       collective Tb67 += b67
       collective Tb68 += b68
       collective Tb69 += b69

       collective Tb77 += b77
       collective Tb78 += b78
       collective Tb79 += b79

       collective Tb88 += b88
       collective Tb89 += b89

       collective Tb99 += b99
#
       execute sip_barrier 
#
#      Now the unique elements of the 'B-matrix' have been computed and the array filled out.
#      --------------------------------------------------------------------------------------
#
#      Put the elements of the 'B-matrix', which have been computed as scalars into the
#      R-matrix.
#      --------------------------------------------------------------------------------
#
       execute diis_setup Tb11
       execute diis_setup Tb12
       execute diis_setup Tb13
       execute diis_setup Tb14
       execute diis_setup Tb15
       execute diis_setup Tb16
       execute diis_setup Tb17
       execute diis_setup Tb18
       execute diis_setup Tb19
       execute diis_setup Tb110 

       execute diis_setup Tb22
       execute diis_setup Tb23
       execute diis_setup Tb24
       execute diis_setup Tb25
       execute diis_setup Tb26
       execute diis_setup Tb27
       execute diis_setup Tb28
       execute diis_setup Tb29
       execute diis_setup Tb210 

       execute diis_setup Tb33
       execute diis_setup Tb34
       execute diis_setup Tb35
       execute diis_setup Tb36
       execute diis_setup Tb37
       execute diis_setup Tb38
       execute diis_setup Tb39
       execute diis_setup Tb310 

       execute diis_setup Tb44
       execute diis_setup Tb45
       execute diis_setup Tb46
       execute diis_setup Tb47
       execute diis_setup Tb48
       execute diis_setup Tb49
       execute diis_setup Tb410 

       execute diis_setup Tb55
       execute diis_setup Tb56
       execute diis_setup Tb57
       execute diis_setup Tb58
       execute diis_setup Tb59
       execute diis_setup Tb510 

       execute diis_setup Tb66
       execute diis_setup Tb67
       execute diis_setup Tb68
       execute diis_setup Tb69
       execute diis_setup Tb610 

       execute diis_setup Tb77
       execute diis_setup Tb78
       execute diis_setup Tb79
       execute diis_setup Tb710 

       execute diis_setup Tb88
       execute diis_setup Tb89
       execute diis_setup Tb810 

       execute diis_setup Tb99
       execute diis_setup Tb910 

       execute diis_setup Tb1010 
#
       execute compute_diis # --> New instruction
#
       c1 = Tb11
       c2 = Tb22
       c3 = Tb33
       c4 = Tb44
       c5 = Tb55
       c6 = Tb66  
       c7 = Tb77
       c8 = Tb88
       c9 = Tb99
#
       etemp  = c1 
       etemp += c2 
       etemp += c3 
       etemp += c4 
       etemp += c5 
       etemp += c6
       etemp += c7
       etemp += c8 
       etemp += c9 
#
      #execute print_scalar c1
      #execute print_scalar c2
      #execute print_scalar c3
      #execute print_scalar c4
      #execute print_scalar c5
      #execute print_scalar c6
      #execute print_scalar c7
      #execute print_scalar c8
      #execute print_scalar c9
      #execute print_scalar etemp  
       execute sip_barrier
#
#      Done computing the c-vector.
#      ----------------------------
#
#      Form the update Density matrix using the c-vector. 
#      -----------------------------------------------
#
       PARDO mu, nu 
#
           GET F1a(mu,nu) 
           GET F2a(mu,nu) 
           GET F3a(mu,nu) 
           GET F4a(mu,nu) 
           GET F5a(mu,nu) 
           GET F6a(mu,nu) 
           GET F7a(mu,nu) 
           GET F8a(mu,nu) 
           GET F9a(mu,nu) 
#
           GET F1b(mu,nu) 
           GET F2b(mu,nu) 
           GET F3b(mu,nu) 
           GET F4b(mu,nu) 
           GET F5b(mu,nu) 
           GET F6b(mu,nu) 
           GET F7b(mu,nu) 
           GET F8b(mu,nu) 
           GET F9b(mu,nu) 
#
           t1xx(mu,nu)  = F1a(mu,nu) 
           t1xx(mu,nu) *= c1  
           txx(mu,nu)   = t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F2a(mu,nu) 
           t1xx(mu,nu) *= c2  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F3a(mu,nu) 
           t1xx(mu,nu) *= c3  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F4a(mu,nu) 
           t1xx(mu,nu) *= c4  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F5a(mu,nu) 
           t1xx(mu,nu) *= c5  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F6a(mu,nu) 
           t1xx(mu,nu) *= c6  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F7a(mu,nu) 
           t1xx(mu,nu) *= c7  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F8a(mu,nu) 
           t1xx(mu,nu) *= c8  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F9a(mu,nu) 
           t1xx(mu,nu) *= c9  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           Fpq_a(mu,nu) = txx(mu,nu) 
#
           t1xx(mu,nu)  = F1b(mu,nu) 
           t1xx(mu,nu) *= c1  
           txx(mu,nu)   = t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F2b(mu,nu) 
           t1xx(mu,nu) *= c2  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F3b(mu,nu) 
           t1xx(mu,nu) *= c3  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F4b(mu,nu) 
           t1xx(mu,nu) *= c4  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F5b(mu,nu) 
           t1xx(mu,nu) *= c5  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F6b(mu,nu) 
           t1xx(mu,nu) *= c6  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F7b(mu,nu) 
           t1xx(mu,nu) *= c7  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F8b(mu,nu) 
           t1xx(mu,nu) *= c8  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F9b(mu,nu) 
           t1xx(mu,nu) *= c9  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           Fpq_b(mu,nu) = txx(mu,nu) 
#
       ENDPARDO mu, nu 
#
       execute sip_barrier 
#
#      Move histories 
#      -------------- 
#
#      2 --> 1 
#      ------- 
#
       PARDO mu, nu 
             GET F2a(mu,nu) 
             PUT F1a(mu,nu) = F2a(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO mu, nu 
             GET F2b(mu,nu) 
             PUT F1b(mu,nu) = F2b(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO a, i 
             GET F2ai(a,i) 
             PUT F1ai(a,i) = F2ai(a,i)  
       ENDPARDO a,i  
#
       PARDO b, j 
             GET F2bj(b,j) 
             PUT F1bj(b,j) = F2bj(b,j)  
       ENDPARDO b, j  
       execute sip_barrier 
#
#      3 --> 2 
#      ------- 
#
       PARDO mu, nu 
             GET F3a(mu,nu) 
             PUT F2a(mu,nu) = F3a(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO mu, nu 
             GET F3b(mu,nu) 
             PUT F2b(mu,nu) = F3b(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO a, i 
             GET F3ai(a,i) 
             PUT F2ai(a,i) = F3ai(a,i)  
       ENDPARDO a, i  
#
       PARDO b, j 
             GET F3bj(b,j) 
             PUT F2bj(b,j) = F3bj(b,j)  
       ENDPARDO b, j  
       execute sip_barrier 
#
#      4 --> 3 
#      ------- 
#
       PARDO mu, nu 
             GET F4a(mu,nu) 
             PUT F3a(mu,nu) = F4a(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO mu, nu 
             GET F4b(mu,nu) 
             PUT F3b(mu,nu) = F4b(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO a, i 
             GET F4ai(a,i) 
             PUT F3ai(a,i) = F4ai(a,i)  
       ENDPARDO a, i  
#
       PARDO b, j 
             GET F4bj(b,j) 
             PUT F3bj(b,j) = F4bj(b,j)  
       ENDPARDO b, j  
       execute sip_barrier 
#
#      5 --> 4 
#      ------- 
#
       PARDO mu, nu 
             GET F5a(mu,nu) 
             PUT F4a(mu,nu) = F5a(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO mu, nu 
             GET F5b(mu,nu) 
             PUT F4b(mu,nu) = F5b(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO a, i 
             GET F5ai(a,i) 
             PUT F4ai(a,i) = F5ai(a,i)  
       ENDPARDO a, i  
#
       PARDO b, j 
             GET F5bj(b,j) 
             PUT F4bj(b,j) = F5bj(b,j)  
       ENDPARDO b, j  
       execute sip_barrier 
#
#      6 --> 5 
#      ------- 
#
       PARDO mu, nu 
             GET F6a(mu,nu) 
             PUT F5a(mu,nu) = F6a(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO mu, nu 
             GET F6b(mu,nu) 
             PUT F5b(mu,nu) = F6b(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO a, i 
             GET F6ai(a,i) 
             PUT F5ai(a,i) = F6ai(a,i)  
       ENDPARDO a, i  
#
       PARDO b, j 
             GET F6bj(b,j) 
             PUT F5bj(b,j) = F6bj(b,j)  
       ENDPARDO b, j  
       execute sip_barrier 
#
#      7 --> 6 
#      ------- 
#
       PARDO mu, nu 
             GET F7a(mu,nu) 
             PUT F6a(mu,nu) = F7a(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO mu, nu 
             GET F7b(mu,nu) 
             PUT F6b(mu,nu) = F7b(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO a, i 
             GET F7ai(a,i) 
             PUT F6ai(a,i) = F7ai(a,i)  
       ENDPARDO a, i  
#
       PARDO b, j 
             GET F7bj(b,j) 
             PUT F6bj(b,j) = F7bj(b,j)  
       ENDPARDO b, j  
       execute sip_barrier 
#
#      8 --> 7 
#      ------- 
#
       PARDO mu, nu 
             GET F8a(mu,nu) 
             PUT F7a(mu,nu) = F8a(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO mu, nu 
             GET F8b(mu,nu) 
             PUT F7b(mu,nu) = F8b(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO a, i 
             GET F8ai(a,i) 
             PUT F7ai(a,i) = F8ai(a,i)  
       ENDPARDO a, i  
#
       PARDO b, j 
             GET F8bj(b,j) 
             PUT F7bj(b,j) = F8bj(b,j)  
       ENDPARDO b, j  
       execute sip_barrier 
#
#      9 --> 8 
#      ------- 
#
       PARDO mu, nu 
             GET F9a(mu,nu) 
             PUT F8a(mu,nu) = F9a(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO mu, nu 
             GET F9b(mu,nu) 
             PUT F8b(mu,nu) = F9b(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO a, i 
             GET F9ai(a,i) 
             PUT F8ai(a,i) = F9ai(a,i)  
       ENDPARDO a, i  
#
       PARDO b, j 
             GET F9bj(b,j) 
             PUT F8bj(b,j) = F9bj(b,j)  
       ENDPARDO b, j  
       execute sip_barrier 
#
#      Current --> 9 
#      ------------- 
#
       PARDO mu, nu 
             GET Fpq_a(mu,nu) 
             PUT F9a(mu,nu) = Fpq_a(mu,nu)  
       ENDPARDO mu, nu 
       execute sip_barrier 
#
       PARDO mu, nu 
             GET Fpq_b(mu,nu) 
             PUT F9b(mu,nu) = Fpq_b(mu,nu)  
       ENDPARDO mu, nu 
       execute sip_barrier 
#
       ENDPROC DIIS9    
#      -------------  
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
       PROC DIIS10   
#      -----------  
#
# The DIIS expansion coefficients are computed using the 10 previous iterations.
#
#      Zero out scalars.
#      -----------------
#
       b11 = 0.0
       b12 = 0.0
       b13 = 0.0
       b14 = 0.0
       b15 = 0.0
       b16 = 0.0
       b17 = 0.0
       b18 = 0.0
       b19 = 0.0
       b110 = 0.0
#
       b22 = 0.0
       b23 = 0.0
       b24 = 0.0
       b25 = 0.0
       b26 = 0.0
       b27 = 0.0
       b28 = 0.0
       b29 = 0.0
       b210 = 0.0
#
       b33 = 0.0
       b34 = 0.0
       b35 = 0.0
       b36 = 0.0
       b37 = 0.0
       b38 = 0.0
       b39 = 0.0
       b310 = 0.0
#
       b44 = 0.0
       b45 = 0.0
       b46 = 0.0
       b47 = 0.0
       b48 = 0.0
       b49 = 0.0
       b410 = 0.0
#
       b55 = 0.0
       b56 = 0.0
       b57 = 0.0
       b58 = 0.0
       b59 = 0.0
       b510 = 0.0
#
       b66 = 0.0
       b67 = 0.0
       b68 = 0.0
       b69 = 0.0
       b610 = 0.0
#
       b77 = 0.0
       b78 = 0.0
       b79 = 0.0
       b710 = 0.0
#
       b88 = 0.0
       b89 = 0.0
       b810 = 0.0
#
       b99 = 0.0
       b910 = 0.0
#
       b1010 = 0.0
#
       Tb11 = 0.0
       Tb12 = 0.0
       Tb13 = 0.0
       Tb14 = 0.0
       Tb15 = 0.0
       Tb16 = 0.0
       Tb17 = 0.0
       Tb18 = 0.0
       Tb19 = 0.0
       Tb110 = 0.0
#
       Tb22 = 0.0
       Tb23 = 0.0
       Tb24 = 0.0
       Tb25 = 0.0
       Tb26 = 0.0
       Tb27 = 0.0
       Tb28 = 0.0 
       Tb29 = 0.0
       Tb210 = 0.0
#
       Tb33 = 0.0
       Tb34 = 0.0
       Tb35 = 0.0
       Tb36 = 0.0
       Tb37 = 0.0
       Tb38 = 0.0
       Tb39 = 0.0
       Tb310 = 0.0
#
       Tb44 = 0.0
       Tb45 = 0.0
       Tb46 = 0.0
       Tb47 = 0.0
       Tb48 = 0.0
       Tb49 = 0.0
       Tb410 = 0.0
#
       Tb55 = 0.0
       Tb56 = 0.0
       Tb57 = 0.0
       Tb58 = 0.0
       Tb59 = 0.0
       Tb510 = 0.0
#
       Tb66 = 0.0
       Tb67 = 0.0
       Tb68 = 0.0
       Tb69 = 0.0
       Tb610 = 0.0
#
       Tb77 = 0.0
       Tb78 = 0.0
       Tb79 = 0.0
       Tb710 = 0.0
#
       Tb88 = 0.0
       Tb89 = 0.0
       Tb810 = 0.0
#
       Tb99 = 0.0
       Tb910 = 0.0
#
       Tb1010 = 0.0
#
       c1 = 0.0 
       c2 = 0.0 
       c3 = 0.0 
       c4 = 0.0 
       c5 = 0.0 
       c6 = 0.0 
       c7 = 0.0 
       c8 = 0.0 
       c9 = 0.0 
       c10 = 0.0 
#
       execute sip_barrier 
#
#      Determine the 'B-matrix'. 
#      ------------------------- 
#
#      Contributions from Fai histories. 
#      --------------------------------- 
#
       PARDO a, i 
#
#          GET Fock-matrix data from all 5 previous iterations. 
#          ---------------------------------------------------- 
#
           GET F1ai(a,i) 
           GET F2ai(a,i) 
           GET F3ai(a,i) 
           GET F4ai(a,i) 
           GET F5ai(a,i) 
           GET F6ai(a,i) 
           GET F7ai(a,i) 
           GET F8ai(a,i) 
           GET F9ai(a,i) 
           GET F10ai(a,i) 
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#          b1x x=1,10 
#          ---------- 
#
           etemp = F1ai(a,i)*F1ai(a,i) 
           b11  += etemp 
#
           etemp = F1ai(a,i)*F2ai(a,i) 
           b12  += etemp 
#
           etemp = F1ai(a,i)*F3ai(a,i) 
           b13  += etemp 
#
           etemp = F1ai(a,i)*F4ai(a,i) 
           b14  += etemp 
#
           etemp = F1ai(a,i)*F5ai(a,i) 
           b15  += etemp 
#
           etemp = F1ai(a,i)*F6ai(a,i) 
           b16  += etemp 
#
           etemp = F1ai(a,i)*F7ai(a,i) 
           b17  += etemp 
#
           etemp = F1ai(a,i)*F8ai(a,i) 
           b18  += etemp 
#
           etemp = F1ai(a,i)*F9ai(a,i) 
           b19  += etemp 
#
           etemp = F1ai(a,i)*F10ai(a,i) 
           b110 += etemp 
#
#          b2x x=2,10
#          ---------- 
#
           etemp = F2ai(a,i)*F2ai(a,i) 
           b22  += etemp 
#
           etemp = F2ai(a,i)*F3ai(a,i) 
           b23  += etemp 
#
           etemp = F2ai(a,i)*F4ai(a,i) 
           b24  += etemp 
#
           etemp = F2ai(a,i)*F5ai(a,i) 
           b25  += etemp 
#
           etemp = F2ai(a,i)*F6ai(a,i) 
           b26  += etemp 
#
           etemp = F2ai(a,i)*F7ai(a,i) 
           b27  += etemp 
#
           etemp = F2ai(a,i)*F8ai(a,i) 
           b28  += etemp 
#
           etemp = F2ai(a,i)*F9ai(a,i) 
           b29  += etemp 
#
           etemp = F2ai(a,i)*F10ai(a,i) 
           b210 += etemp 
#
#          b3x x=3,10 
#          ---------- 
#
           etemp = F3ai(a,i)*F3ai(a,i) 
           b33  += etemp 
#
           etemp = F3ai(a,i)*F4ai(a,i) 
           b34  += etemp 
#
           etemp = F3ai(a,i)*F5ai(a,i) 
           b35  += etemp 
#
           etemp = F3ai(a,i)*F6ai(a,i) 
           b36  += etemp 
#
           etemp = F3ai(a,i)*F7ai(a,i) 
           b37  += etemp 
#
           etemp = F3ai(a,i)*F8ai(a,i) 
           b38  += etemp 
#
           etemp = F3ai(a,i)*F9ai(a,i) 
           b39  += etemp 
#
           etemp = F3ai(a,i)*F10ai(a,i) 
           b310 += etemp 
#
#          b4x x=4,10
#          ---------- 
#
           etemp = F4ai(a,i)*F4ai(a,i) 
           b44  += etemp 
#
           etemp = F4ai(a,i)*F5ai(a,i) 
#          b45  += etemp 
#
           etemp = F4ai(a,i)*F6ai(a,i) 
           b46  += etemp 
#
           etemp = F4ai(a,i)*F7ai(a,i) 
           b47  += etemp 
#
           etemp = F4ai(a,i)*F8ai(a,i) 
           b48  += etemp 
#
           etemp = F4ai(a,i)*F9ai(a,i) 
           b49  += etemp 
#
           etemp = F4ai(a,i)*F10ai(a,i) 
           b410 += etemp 
#
#          b5x x=5,10 
#          ---------- 
#
           etemp = F5ai(a,i)*F5ai(a,i) 
           b55  += etemp 
#
           etemp = F5ai(a,i)*F6ai(a,i) 
           b56  += etemp 
#
           etemp = F5ai(a,i)*F7ai(a,i) 
           b57  += etemp 
#
           etemp = F5ai(a,i)*F8ai(a,i) 
           b58  += etemp 
#
           etemp = F5ai(a,i)*F9ai(a,i) 
           b59  += etemp 
#
           etemp = F5ai(a,i)*F10ai(a,i) 
           b510 += etemp 
#
#
#          b6x x=6,10 
#          ---------- 
#
           etemp = F6ai(a,i)*F6ai(a,i) 
           b66  += etemp 
#
           etemp = F6ai(a,i)*F7ai(a,i) 
           b67  += etemp 
#
           etemp = F6ai(a,i)*F8ai(a,i) 
           b68  += etemp 
#
           etemp = F6ai(a,i)*F9ai(a,i) 
           b69  += etemp 
#
           etemp = F6ai(a,i)*F10ai(a,i) 
           b610 += etemp 
#
#          b7x x=7,10 
#          ---------- 
#
           etemp = F7ai(a,i)*F7ai(a,i) 
           b77  += etemp 
#
           etemp = F7ai(a,i)*F8ai(a,i) 
           b78  += etemp 
#
           etemp = F7ai(a,i)*F9ai(a,i) 
           b79  += etemp 
#
           etemp = F7ai(a,i)*F10ai(a,i) 
           b710 += etemp 
#
#          b8x x=8,10 
#          ---------- 
#
           etemp = F8ai(a,i)*F8ai(a,i) 
           b88  += etemp 
#
           etemp = F8ai(a,i)*F9ai(a,i) 
           b89  += etemp 
#
           etemp = F8ai(a,i)*F10ai(a,i) 
           b810 += etemp 
#
#          b9x x=9,10 
#          ---------- 
#
           etemp = F9ai(a,i)*F9ai(a,i) 
           b99  += etemp 
#
           etemp = F9ai(a,i)*F10ai(a,i) 
           b910 += etemp 
#
#          b10x x=10,10 
#          ------------ 
#
           etemp = F10ai(a,i)*F10ai(a,i) 
           b1010 += etemp 
#
       ENDPARDO a, i 
#
#      Contributions from Fbj histories. 
#      --------------------------------- 
#
       PARDO b, j 
#
#          GET Fock-matrix data from all 5 previous iterations. 
#          ---------------------------------------------------- 
#
           GET F1bj(b,j) 
           GET F2bj(b,j) 
           GET F3bj(b,j) 
           GET F4bj(b,j) 
           GET F5bj(b,j) 
           GET F6bj(b,j) 
           GET F7bj(b,j) 
           GET F8bj(b,j) 
           GET F9bj(b,j) 
           GET F10bj(b,j) 
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#          b1x x=1,10 
#          ---------- 
#
           etemp = F1bj(b,j)*F1bj(b,j) 
           b11  += etemp 
#
           etemp = F1bj(b,j)*F2bj(b,j) 
           b12  += etemp 
#
           etemp = F1bj(b,j)*F3bj(b,j) 
           b13  += etemp 
#
           etemp = F1bj(b,j)*F4bj(b,j) 
           b14  += etemp 
#
           etemp = F1bj(b,j)*F5bj(b,j) 
           b15  += etemp 
#
           etemp = F1bj(b,j)*F6bj(b,j) 
           b16  += etemp 
#
           etemp = F1bj(b,j)*F7bj(b,j) 
           b17  += etemp 
#
           etemp = F1bj(b,j)*F8bj(b,j) 
           b18  += etemp 
#
           etemp = F1bj(b,j)*F9bj(b,j) 
           b19  += etemp 
#
           etemp = F1bj(b,j)*F10bj(b,j) 
           b110 += etemp 
#
#          b2x x=2,10 
#          ---------- 
#
           etemp = F2bj(b,j)*F2bj(b,j) 
           b22  += etemp 
#
           etemp = F2bj(b,j)*F3bj(b,j) 
           b23  += etemp 
#
           etemp = F2bj(b,j)*F4bj(b,j) 
           b24  += etemp 
#
           etemp = F2bj(b,j)*F5bj(b,j) 
           b25  += etemp 
#
           etemp = F2bj(b,j)*F6bj(b,j) 
           b26  += etemp 
#
           etemp = F2bj(b,j)*F7bj(b,j) 
           b27  += etemp 
#
           etemp = F2bj(b,j)*F8bj(b,j) 
           b28  += etemp 
#
           etemp = F2bj(b,j)*F9bj(b,j) 
           b29  += etemp 
#
           etemp = F2bj(b,j)*F10bj(b,j) 
           b210 += etemp 
#
#          b3x x=3,10 
#          ---------- 
#
           etemp = F3bj(b,j)*F3bj(b,j) 
           b33  += etemp 
#
           etemp = F3bj(b,j)*F4bj(b,j) 
           b34  += etemp 
#
           etemp = F3bj(b,j)*F5bj(b,j) 
           b35  += etemp 
#
           etemp = F3bj(b,j)*F6bj(b,j) 
           b36  += etemp 
#
           etemp = F3bj(b,j)*F7bj(b,j) 
           b37  += etemp 
#
           etemp = F3bj(b,j)*F8bj(b,j) 
           b38  += etemp 
#
           etemp = F3bj(b,j)*F9bj(b,j) 
           b39  += etemp 
#
           etemp = F3bj(b,j)*F10bj(b,j) 
           b310 += etemp 
#
#          b4x x=4,10 
#          ---------- 
#
           etemp = F4bj(b,j)*F4bj(b,j) 
           b44  += etemp 
#
           etemp = F4bj(b,j)*F5bj(b,j) 
           b45  += etemp 
#
           etemp = F4bj(b,j)*F6bj(b,j) 
           b46  += etemp 
#
           etemp = F4bj(b,j)*F7bj(b,j) 
           b47  += etemp 
#
           etemp = F4bj(b,j)*F8bj(b,j) 
           b48  += etemp 
#
           etemp = F4bj(b,j)*F9bj(b,j) 
           b49  += etemp 
#
           etemp = F4bj(b,j)*F10bj(b,j) 
           b410 += etemp 
#
#          b5x x=5,10 
#          ---------- 
#
           etemp = F5bj(b,j)*F5bj(b,j) 
           b55  += etemp 
#
           etemp = F5bj(b,j)*F6bj(b,j) 
           b56  += etemp 
#
           etemp = F5bj(b,j)*F7bj(b,j) 
           b57  += etemp 
#
           etemp = F5bj(b,j)*F8bj(b,j) 
           b58  += etemp 
#
           etemp = F5bj(b,j)*F9bj(b,j) 
           b59  += etemp 
#
           etemp = F5bj(b,j)*F10bj(b,j) 
           b510 += etemp 
#
#          b6x x=6,10 
#          ---------- 
#
           etemp = F6bj(b,j)*F6bj(b,j) 
           b66  += etemp 
#
           etemp = F6bj(b,j)*F7bj(b,j) 
           b67  += etemp 
#
           etemp = F6bj(b,j)*F8bj(b,j) 
           b68  += etemp 
#
           etemp = F6bj(b,j)*F9bj(b,j) 
           b69  += etemp 
#
           etemp = F6bj(b,j)*F10bj(b,j) 
           b610 += etemp 
#
#          b7x x=7,10 
#          ---------- 
#
           etemp = F7bj(b,j)*F7bj(b,j) 
           b77  += etemp 
#
           etemp = F7bj(b,j)*F8bj(b,j) 
           b78  += etemp 
#
           etemp = F7bj(b,j)*F9bj(b,j) 
           b79  += etemp 
#
           etemp = F7bj(b,j)*F10bj(b,j) 
           b710 += etemp 
#
#          b8x x=8,10 
#          ---------- 
#
           etemp = F8bj(b,j)*F8bj(b,j) 
           b88  += etemp 
#
           etemp = F8bj(b,j)*F9bj(b,j) 
           b89  += etemp 
#
           etemp = F8bj(b,j)*F10bj(b,j) 
           b810 += etemp 
#
#          b9x x=9,10 
#          ---------- 
#
           etemp = F9bj(b,j)*F9bj(b,j) 
           b99  += etemp 
#
           etemp = F9bj(b,j)*F10bj(b,j) 
           b910 += etemp 
#
#          b10x x=10,10 
#          ------------ 
#
           etemp = F10bj(b,j)*F10bj(b,j) 
           b1010 += etemp 
#
       ENDPARDO b, j 
#
       execute sip_barrier
#
#      Collectively sum B-matrix elements.
#      -----------------------------------
#
       collective Tb11 += b11
       collective Tb12 += b12
       collective Tb13 += b13
       collective Tb14 += b14
       collective Tb15 += b15
       collective Tb16 += b16
       collective Tb17 += b17
       collective Tb18 += b18
       collective Tb19 += b19
       collective Tb110 += b110 

       collective Tb22 += b22
       collective Tb23 += b23
       collective Tb24 += b24
       collective Tb25 += b25
       collective Tb26 += b26
       collective Tb27 += b27
       collective Tb28 += b28
       collective Tb29 += b29
       collective Tb210 += b210 

       collective Tb33 += b33
       collective Tb34 += b34
       collective Tb35 += b35
       collective Tb36 += b36
       collective Tb37 += b37
       collective Tb38 += b38
       collective Tb39 += b39
       collective Tb310 += b310 

       collective Tb44 += b44
       collective Tb45 += b45
       collective Tb46 += b46
       collective Tb47 += b47
       collective Tb48 += b48
       collective Tb49 += b49
       collective Tb410 += b410 

       collective Tb55 += b55
       collective Tb56 += b56
       collective Tb57 += b57
       collective Tb58 += b58
       collective Tb59 += b59
       collective Tb510 += b510 

       collective Tb66 += b66
       collective Tb67 += b67
       collective Tb68 += b68
       collective Tb69 += b69
       collective Tb610 += b610 

       collective Tb77 += b77
       collective Tb78 += b78
       collective Tb79 += b79
       collective Tb710 += b710 

       collective Tb88 += b88
       collective Tb89 += b89
       collective Tb810 += b810 

       collective Tb99 += b99
       collective Tb910 += b910 

       collective Tb1010 += b1010 
#
       execute sip_barrier 
#
#
#      Now the unique elements of the 'B-matrix' have been computed and the array filled out.
#      --------------------------------------------------------------------------------------
#
#      Put the elements of the 'B-matrix', which have been computed as scalars into the
#      R-matrix.
#      --------------------------------------------------------------------------------
#
       execute diis_setup Tb11
       execute diis_setup Tb12
       execute diis_setup Tb13
       execute diis_setup Tb14
       execute diis_setup Tb15
       execute diis_setup Tb16
       execute diis_setup Tb17
       execute diis_setup Tb18
       execute diis_setup Tb19
       execute diis_setup Tb110 

       execute diis_setup Tb22
       execute diis_setup Tb23
       execute diis_setup Tb24
       execute diis_setup Tb25
       execute diis_setup Tb26
       execute diis_setup Tb27
       execute diis_setup Tb28
       execute diis_setup Tb29
       execute diis_setup Tb210 

       execute diis_setup Tb33
       execute diis_setup Tb34
       execute diis_setup Tb35
       execute diis_setup Tb36
       execute diis_setup Tb37
       execute diis_setup Tb38
       execute diis_setup Tb39
       execute diis_setup Tb310 

       execute diis_setup Tb44
       execute diis_setup Tb45
       execute diis_setup Tb46
       execute diis_setup Tb47
       execute diis_setup Tb48
       execute diis_setup Tb49
       execute diis_setup Tb410 

       execute diis_setup Tb55
       execute diis_setup Tb56
       execute diis_setup Tb57
       execute diis_setup Tb58
       execute diis_setup Tb59
       execute diis_setup Tb510 

       execute diis_setup Tb66
       execute diis_setup Tb67
       execute diis_setup Tb68
       execute diis_setup Tb69
       execute diis_setup Tb610 

       execute diis_setup Tb77
       execute diis_setup Tb78
       execute diis_setup Tb79
       execute diis_setup Tb710 

       execute diis_setup Tb88
       execute diis_setup Tb89
       execute diis_setup Tb810 

       execute diis_setup Tb99
       execute diis_setup Tb910 

       execute diis_setup Tb1010 
#
       execute compute_diis # --> New instruction
#
       c1 = Tb11
       c2 = Tb22
       c3 = Tb33
       c4 = Tb44
       c5 = Tb55
       c6 = Tb66  
       c7 = Tb77
       c8 = Tb88
       c9 = Tb99
       c10 = Tb1010 
#
       etemp  = c1 
       etemp += c2 
       etemp += c3 
       etemp += c4 
       etemp += c5 
       etemp += c6
       etemp += c7
       etemp += c8 
       etemp += c9 
       etemp += c10 
#
      #execute print_scalar c1
      #execute print_scalar c2
      #execute print_scalar c3
      #execute print_scalar c4
      #execute print_scalar c5
      #execute print_scalar c6
      #execute print_scalar c7
      #execute print_scalar c8
      #execute print_scalar c9
      #execute print_scalar c10  
      #execute print_scalar etemp  
       execute sip_barrier
#
#      Done computing the c-vector.
#      ----------------------------
#
#      Form the update Density matrix using the c-vector. 
#      -----------------------------------------------
#
       PARDO mu, nu 
#
           GET F1a(mu,nu) 
           GET F2a(mu,nu) 
           GET F3a(mu,nu) 
           GET F4a(mu,nu) 
           GET F5a(mu,nu) 
           GET F6a(mu,nu) 
           GET F7a(mu,nu) 
           GET F8a(mu,nu) 
           GET F9a(mu,nu) 
           GET F10a(mu,nu) 
#
           GET F1b(mu,nu) 
           GET F2b(mu,nu) 
           GET F3b(mu,nu) 
           GET F4b(mu,nu) 
           GET F5b(mu,nu) 
           GET F6b(mu,nu) 
           GET F7b(mu,nu) 
           GET F8b(mu,nu) 
           GET F9b(mu,nu) 
           GET F10b(mu,nu) 
#
           t1xx(mu,nu)  = F1a(mu,nu) 
           t1xx(mu,nu) *= c1  
           txx(mu,nu)   = t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F2a(mu,nu) 
           t1xx(mu,nu) *= c2  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F3a(mu,nu) 
           t1xx(mu,nu) *= c3  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F4a(mu,nu) 
           t1xx(mu,nu) *= c4  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F5a(mu,nu) 
           t1xx(mu,nu) *= c5  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F6a(mu,nu) 
           t1xx(mu,nu) *= c6  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F7a(mu,nu) 
           t1xx(mu,nu) *= c7  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F8a(mu,nu) 
           t1xx(mu,nu) *= c8  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F9a(mu,nu) 
           t1xx(mu,nu) *= c9  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F10a(mu,nu) 
           t1xx(mu,nu) *= c10  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           Fpq_a(mu,nu) = txx(mu,nu) 
#
           t1xx(mu,nu)  = F1b(mu,nu) 
           t1xx(mu,nu) *= c1  
           txx(mu,nu)   = t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F2b(mu,nu) 
           t1xx(mu,nu) *= c2  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F3b(mu,nu) 
           t1xx(mu,nu) *= c3  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F4b(mu,nu) 
           t1xx(mu,nu) *= c4  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F5b(mu,nu) 
           t1xx(mu,nu) *= c5  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F6b(mu,nu) 
           t1xx(mu,nu) *= c6  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F7b(mu,nu) 
           t1xx(mu,nu) *= c7  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F8b(mu,nu) 
           t1xx(mu,nu) *= c8  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F9b(mu,nu) 
           t1xx(mu,nu) *= c9  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F10b(mu,nu) 
           t1xx(mu,nu) *= c10  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           Fpq_b(mu,nu) = txx(mu,nu) 
#
       ENDPARDO mu, nu 
#
       execute sip_barrier 
#
#      Move histories 
#      -------------- 
#
#      2 --> 1 
#      ------- 
#
       PARDO mu, nu 
             GET F2a(mu,nu) 
             PUT F1a(mu,nu) = F2a(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO mu, nu 
             GET F2b(mu,nu) 
             PUT F1b(mu,nu) = F2b(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO a, i 
             GET F2ai(a,i) 
             PUT F1ai(a,i) = F2ai(a,i)  
       ENDPARDO a,i  
#
       PARDO b, j 
             GET F2bj(b,j) 
             PUT F1bj(b,j) = F2bj(b,j)  
       ENDPARDO b, j  
       execute sip_barrier 
#
#      3 --> 2 
#      ------- 
#
       PARDO mu, nu 
             GET F3a(mu,nu) 
             PUT F2a(mu,nu) = F3a(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO mu, nu 
             GET F3b(mu,nu) 
             PUT F2b(mu,nu) = F3b(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO a, i 
             GET F3ai(a,i) 
             PUT F2ai(a,i) = F3ai(a,i)  
       ENDPARDO a, i  
#
       PARDO b, j 
             GET F3bj(b,j) 
             PUT F2bj(b,j) = F3bj(b,j)  
       ENDPARDO b, j  
       execute sip_barrier 
#
#      4 --> 3 
#      ------- 
#
       PARDO mu, nu 
             GET F4a(mu,nu) 
             PUT F3a(mu,nu) = F4a(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO mu, nu 
             GET F4b(mu,nu) 
             PUT F3b(mu,nu) = F4b(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO a, i 
             GET F4ai(a,i) 
             PUT F3ai(a,i) = F4ai(a,i)  
       ENDPARDO a, i  
#
       PARDO b, j 
             GET F4bj(b,j) 
             PUT F3bj(b,j) = F4bj(b,j)  
       ENDPARDO b, j  
       execute sip_barrier 
#
#      5 --> 4 
#      ------- 
#
       PARDO mu, nu 
             GET F5a(mu,nu) 
             PUT F4a(mu,nu) = F5a(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO mu, nu 
             GET F5b(mu,nu) 
             PUT F4b(mu,nu) = F5b(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO a, i 
             GET F5ai(a,i) 
             PUT F4ai(a,i) = F5ai(a,i)  
       ENDPARDO a, i  
#
       PARDO b, j 
             GET F5bj(b,j) 
             PUT F4bj(b,j) = F5bj(b,j)  
       ENDPARDO b, j  
       execute sip_barrier 
#
#      6 --> 5 
#      ------- 
#
       PARDO mu, nu 
             GET F6a(mu,nu) 
             PUT F5a(mu,nu) = F6a(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO mu, nu 
             GET F6b(mu,nu) 
             PUT F5b(mu,nu) = F6b(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO a, i 
             GET F6ai(a,i) 
             PUT F5ai(a,i) = F6ai(a,i)  
       ENDPARDO a, i  
#
       PARDO b, j 
             GET F6bj(b,j) 
             PUT F5bj(b,j) = F6bj(b,j)  
       ENDPARDO b, j  
       execute sip_barrier 
#
#      7 --> 6 
#      ------- 
#
       PARDO mu, nu 
             GET F7a(mu,nu) 
             PUT F6a(mu,nu) = F7a(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO mu, nu 
             GET F7b(mu,nu) 
             PUT F6b(mu,nu) = F7b(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO a, i 
             GET F7ai(a,i) 
             PUT F6ai(a,i) = F7ai(a,i)  
       ENDPARDO a, i  
#
       PARDO b, j 
             GET F7bj(b,j) 
             PUT F6bj(b,j) = F7bj(b,j)  
       ENDPARDO b, j  
       execute sip_barrier 
#
#      8 --> 7 
#      ------- 
#
       PARDO mu, nu 
             GET F8a(mu,nu) 
             PUT F7a(mu,nu) = F8a(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO mu, nu 
             GET F8b(mu,nu) 
             PUT F7b(mu,nu) = F8b(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO a, i 
             GET F8ai(a,i) 
             PUT F7ai(a,i) = F8ai(a,i)  
       ENDPARDO a, i  
#
       PARDO b, j 
             GET F8bj(b,j) 
             PUT F7bj(b,j) = F8bj(b,j)  
       ENDPARDO b, j  
       execute sip_barrier 
#
#      9 --> 8 
#      ------- 
#
       PARDO mu, nu 
             GET F9a(mu,nu) 
             PUT F8a(mu,nu) = F9a(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO mu, nu 
             GET F9b(mu,nu) 
             PUT F8b(mu,nu) = F9b(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO a, i 
             GET F9ai(a,i) 
             PUT F8ai(a,i) = F9ai(a,i)  
       ENDPARDO a, i  
#
       PARDO b, j 
             GET F9bj(b,j) 
             PUT F8bj(b,j) = F9bj(b,j)  
       ENDPARDO b, j  
       execute sip_barrier 
#
#      10 --> 9 
#      -------- 
#
       PARDO mu, nu 
             GET F10a(mu,nu) 
             PUT F9a(mu,nu) = F10a(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO mu, nu 
             GET F10b(mu,nu) 
             PUT F9b(mu,nu) = F10b(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO a, i 
             GET F10ai(a,i) 
             PUT F9ai(a,i) = F10ai(a,i)  
       ENDPARDO a, i  
#
       PARDO b, j 
             GET F10bj(b,j) 
             PUT F9bj(b,j) = F10bj(b,j)  
       ENDPARDO b, j  
       execute sip_barrier 
#
#      Current --> 10 
#      -------------- 
#
       PARDO mu, nu 
             GET Fpq_a(mu,nu) 
             PUT F10a(mu,nu) = Fpq_a(mu,nu)  
       ENDPARDO mu, nu 
       execute sip_barrier 
#
       PARDO mu, nu 
             GET Fpq_b(mu,nu) 
             PUT F10b(mu,nu) = Fpq_b(mu,nu)  
       ENDPARDO mu, nu 
       execute sip_barrier 
#
       ENDPROC DIIS10    
#      --------------  
#
# ---------------------------------------------------------------------------- 
#
#    ------------------------------------------------------------------------
#
     PROC TRAN_XXII
#
#    ------------------------------------------------------------------------

     PARDO mu, nu, i, i1 
           txixi(mu,i,nu,i1)         = 0.0 
           PREPARE Vxixi(mu,i,nu,i1) = txixi(mu,i,nu,i1) 
     ENDPARDO mu, nu, i, i1 

     PARDO mu, nu, j, j1 
           txjxj(mu,j,nu,j1)         = 0.0 
           PREPARE Vxjxj(mu,j,nu,j1) = txjxj(mu,j,nu,j1) 
     ENDPARDO mu, nu, j, j1 

     PARDO mu, nu, i, j1 
           txixj(mu,i,nu,j1)         = 0.0 
           PREPARE Vxixj(mu,i,nu,j1) = txixj(mu,i,nu,j1) 
     ENDPARDO mu, nu, i, j1 
#
     execute server_barrier
#
     PARDO mu, nu, lambda
#
           allocate L0xxxi(mu,nu,lambda,*)
           allocate L0xxxj(mu,nu,lambda,*)
#
           DO sigma
#
                 compute_integrals AOINT(mu,nu,lambda,sigma)
#
                 DO i
                    V0xxxi(mu,nu,lambda,i) = AOINT(mu,nu,lambda,sigma)*ca(sigma,i)
                    L0xxxi(mu,nu,lambda,i) += V0xxxi(mu,nu,lambda,i)
                 ENDDO i
#
                 DO j
                    V0xxxj(mu,nu,lambda,j) = AOINT(mu,nu,lambda,sigma)*cb(sigma,j)
                    L0xxxj(mu,nu,lambda,j) += V0xxxj(mu,nu,lambda,j)
                 ENDDO j
#
           ENDDO sigma
#
           DO i
#
              txixx(lambda,i,mu,nu) = L0xxxi(mu,nu,lambda,i)
              DO i1
#
                 Txixi(lambda,i,mu,i1)      = txixx(lambda,i,mu,nu)*ca(nu,i1)
                 prepare Vxixi(lambda,i,mu,i1) += Txixi(lambda,i,mu,i1)
#
              ENDDO i1
#
              DO j1
#
                 Txixj(lambda,i,mu,j1)      = txixx(lambda,i,mu,nu)*cb(nu,j1)
                 prepare Vxixj(lambda,i,mu,j1) += Txixj(lambda,i,mu,j1)
#
              ENDDO j1
#
           ENDDO i
#
           DO j
#
              txjxx(lambda,j,mu,nu) = L0xxxj(mu,nu,lambda,j)
              DO j1
#
                 Txjxj(lambda,j,mu,j1)      = txjxx(lambda,j,mu,nu)*cb(nu,j1)
                 prepare Vxjxj(lambda,j,mu,j1) += Txjxj(lambda,j,mu,j1)
#
              ENDDO j1
#
           ENDDO j
#
           deallocate L0xxxi(mu,nu,lambda,*)
           deallocate L0xxxj(mu,nu,lambda,*)
#
     ENDPARDO mu, nu, lambda
#
     execute server_barrier
#
#    ------------------------------------------------------------------------
#
     ENDPROC TRAN_XXII
#
#    ------------------------------------------------------------------------
#
#
#    ------------------------------------------------------------------------
#
     PROC TRAN_PIPI
#
#    ------------------------------------------------------------------------
#
     execute sip_barrier
#
     PARDO mu, i, i1
#
           allocate Lxipi(mu,i,*,i1)
#
           DO nu
#
              REQUEST Vxixi(mu,i,nu,i1) i
#
              DO p
                 Txipi(mu,i,p,i1)  = Vxixi(mu,i,nu,i1)*ca(nu,p)
                 Lxipi(mu,i,p,i1) += Txipi(mu,i,p,i1)
              ENDDO p
#
           ENDDO nu
#
           DO p
#
              PREPARE Vxipi(mu,i,p,i1) = Lxipi(mu,i,p,i1)
#
           ENDDO p
#
           deallocate Lxipi(mu,i,*,i1)
#
     ENDPARDO mu, i, i1
#
     execute sip_barrier
     execute server_barrier
#
     PARDO p, i, i1
#
           allocate Lpipi(*,i,p,i1)
#
           DO mu
#
              REQUEST            Vxipi(mu,i,p,i1) i
              REQUEST            Vxipi(mu,i1,p,i) i
              Txipi(mu,i,p,i1) = Vxipi(mu,i1,p,i)
              Txipi(mu,i,p,i1)-= Vxipi(mu,i,p,i1)
              Txipi(mu,i,p,i1)*= -1.0
#
              DO p1
#
                #Tpipi(p1,i,p,i1)   = Vxipi(mu,i,p,i1)*ca(mu,p1)
                #T1pipi(p1,i,p,i1)  = Vxipi(mu,i1,p,i)*ca(mu,p1)
                #Tpipi(p1,i,p,i1)  -= T1pipi(p1,i,p,i1)
#
                 Tpipi(p1,i,p,i1)   = Txipi(mu,i,p,i1)*ca(mu,p1)
                 Lpipi(p1,i,p,i1)  += Tpipi(p1,i,p,i1)
#
              ENDDO p1
#
           ENDDO mu
#
           DO p1
#
              PREPARE VSpipi(p1,i,p,i1) = Lpipi(p1,i,p,i1)
#
           ENDDO p1
#
           deallocate Lpipi(*,i,p,i1)
#
     ENDPARDO p, i, i1
#
     execute sip_barrier
     execute server_barrier
#
#    ------------------------------------------------------------------------
#
     ENDPROC TRAN_PIPI
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
     PROC TRAN_QJQJ
#
#    ------------------------------------------------------------------------
#
     execute sip_barrier
#
     PARDO mu, j, j1
#
           allocate Lxjqj(mu,j,*,j1)
#
           DO nu
#
              REQUEST Vxjxj(mu,j,nu,j1) j
#
              DO q
                 Txjqj(mu,j,q,j1)  = Vxjxj(mu,j,nu,j1)*cb(nu,q)
                 Lxjqj(mu,j,q,j1) += Txjqj(mu,j,q,j1)
              ENDDO q
#
           ENDDO nu
#
           DO q
#
              PREPARE Vxjqj(mu,j,q,j1) = Lxjqj(mu,j,q,j1)
#
           ENDDO q
#
           deallocate Lxjqj(mu,j,*,j1)
#
     ENDPARDO mu, j, j1
#
     execute sip_barrier
     execute server_barrier
#
     PARDO q, j, j1
#
           allocate Lqjqj(*,j,q,j1)
#
           DO mu
#
              REQUEST            Vxjqj(mu,j,q,j1) j
              REQUEST            Vxjqj(mu,j1,q,j) j
              Txjqj(mu,j,q,j1) = Vxjqj(mu,j1,q,j)
              Txjqj(mu,j,q,j1)-= Vxjqj(mu,j,q,j1)
              Txjqj(mu,j,q,j1)*= -1.0
#
              DO q1
#
                 Tqjqj(q1,j,q,j1)   = Txjqj(mu,j,q,j1)*cb(mu,q1)
                 Lqjqj(q1,j,q,j1)  += Tqjqj(q1,j,q,j1)
#
              ENDDO q1
#
           ENDDO mu
#
           DO q1
#
              PREPARE VSqjqj(q1,j,q,j1) = Lqjqj(q1,j,q,j1)
#
           ENDDO q1
#
           deallocate Lqjqj(*,j,q,j1)
#
     ENDPARDO q, j, j1
#
     execute sip_barrier
     execute server_barrier
#
#    ------------------------------------------------------------------------
#
     ENDPROC TRAN_QJQJ 
#
#    ------------------------------------------------------------------------
#
#
#    ------------------------------------------------------------------------
#
     PROC TRAN_PIQJ
#
#    ------------------------------------------------------------------------
#
     execute sip_barrier
#
     PARDO mu, i, j
#
           allocate Lxiqj(mu,i,*,j) 
#
           DO nu  
#
              REQUEST Vxixj(mu,i,nu,j) i
#    
              DO q
#
                 Txiqj(mu,i,q,j)  = Vxixj(mu,i,nu,j)*cb(nu,q)
                 Lxiqj(mu,i,q,j) += Txiqj(mu,i,q,j)
#          
              ENDDO q
#          
           ENDDO nu
#             
           DO q
#             
              PREPARE Vxiqj(mu,i,q,j) = Lxiqj(mu,i,q,j)
#                
           ENDDO q
#
           deallocate Lxiqj(mu,i,*,j)
#
     ENDPARDO mu, i, j
#
     execute sip_barrier
     execute server_barrier
#    DISCARD Vxixj
#
     PARDO q, i, j
#
           allocate Lpiqj(*,i,q,j)
#
           DO mu
#
              REQUEST Vxiqj(mu,i,q,j) i
#
              DO p
#
                 Tpiqj(p,i,q,j)  = Vxiqj(mu,i,q,j)*ca(mu,p)
                 Lpiqj(p,i,q,j) += Tpiqj(p,i,q,j)
#
              ENDDO p
#
           ENDDO mu
#
           DO p
#
              PREPARE Vpiqj(p,i,q,j) = Lpiqj(p,i,q,j)
#
           ENDDO p
#
           deallocate Lpiqj(*,i,q,j)
#
     ENDPARDO q, i, j
#
     execute sip_barrier
     execute server_barrier
#    DISCARD Vxiqj
#
#    ------------------------------------------------------------------------
#
     ENDPROC TRAN_PIQJ
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
     PROC MP2_ENERGY 
#
#    ------------------------------------------------------------------------
#
     esuma   = 0.0
     ecorraa = 0.0
     ecorrT = 0.0 
     PARDO a, a1, i, i1
#
           REQUEST VSpipi(a,i,a1,i1) i1
           REQUEST ASpipi(a,i,a1,i1) i1
#
           etemp = VSpipi(a,i,a1,i1)*ASpipi(a,i,a1,i1)
           etemp = 0.25*etemp
           esuma += etemp
#
     ENDPARDO a, a1, i, i1
#
     ecorrbb = 0.0
     esumb   = 0.0
     PARDO b, b1, j, j1
#
           REQUEST VSqjqj(b,j,b1,j1) j1
           REQUEST ASqjqj(b,j,b1,j1) j1
#
           etemp = VSqjqj(b,j,b1,j1)*ASqjqj(b,j,b1,j1)
           etemp = 0.25*etemp
           esumb += etemp
#
     ENDPARDO b, b1, j, j1

     ecorrab = 0.0
     esumab  = 0.0
     PARDO a, b, i, j
#
           REQUEST Vpiqj(a,i,b,j) j
           REQUEST Apiqj(a,i,b,j) j
#
           etemp = Apiqj(a,i,b,j)*Vpiqj(a,i,b,j)
           esumab += etemp
#
     ENDPARDO a, b, i, j

     execute sip_barrier

     collective ecorraa += esuma
     execute print_scalar ecorraa
#
     collective ecorrbb += esumb
     execute print_scalar ecorrbb
#
     collective ecorrab += esumab
     execute print_scalar ecorrab
#
     ecorrT  = ecorraa + ecorrbb
     ecorrT += ecorrab
     execute print_scalar ecorrT


     one = 1.0
     two = 2.0
     six = 6.0

      do kiter
      do kptr1
         etemp = 0.0
         pinf(kiter,kptr1)  = etemp
      enddo kptr1
      enddo kiter

        do jiter
           ncount1 = 0.0
         DO kptr1
            ncount1 += 1.0
            if ncount1 == two
               etemp              = ecorrT  
               etemp             += scfeneg
               tpinf(jiter,kptr1) = etemp
               pinf(jiter,kptr1)  = tpinf(jiter,kptr1)
            endif
         ENDDO kptr1
        enddo jiter

        do jiter
           ncount1 = 0.0
         DO kptr1
            ncount1 += 1.0
            if ncount1 == one
               tpinf(jiter,kptr1) = ecorrT  
               pinf(jiter,kptr1)  = tpinf(jiter,kptr1)
            endif
         ENDDO kptr1
        enddo jiter

        execute print_rel_info six pinf
#
#    ------------------------------------------------------------------------
#
     ENDPROC MP2_ENERGY 
#
# ----------------------------------------------------------------------------
#
      PROC COMP_DENS_AB
#
#     AAAA/AAAA piece
#     ---------------
#
      PARDO a, a2, i, i1
#
            REQUEST            ASpipi(a,i,a2,i1) i
            Tpipi(a,i,a2,i1) = ASpipi(a,i,a2,i1)
#
            DO a1
#
               REQUEST             ASpipi(a1,i,a2,i1) i
               Taa(a,a1)         = Tpipi(a,i,a2,i1)*ASpipi(a1,i,a2,i1)
               Taa(a,a1)        *= 0.5
               PUT Pab_aa(a,a1) += Taa(a,a1)
#
            ENDDO a1
#
      ENDPARDO a, a2, i, i1
#
#     AABB/AABB piece
#     ---------------
#
      PARDO a, b, i, j
#
            REQUEST          Apiqj(a,i,b,j) i
            Tpiqj(a,i,b,j) = Apiqj(a,i,b,j)
#
            DO a1
#
               REQUEST             Apiqj(a1,i,b,j) i
               Taa(a,a1)         = Tpiqj(a,i,b,j)*Apiqj(a1,i,b,j)
               PUT Pab_aa(a,a1) += Taa(a,a1)
#
            ENDDO a1
#
            DO b1
#
               REQUEST             Apiqj(a,i,b1,j) i
               Tbb(b,b1)         = Tpiqj(a,i,b,j)*Apiqj(a,i,b1,j)
               PUT Pab_bb(b,b1) += Tbb(b,b1)
#
            ENDDO b1
#
      ENDPARDO a, b, i, j
#
      PARDO b, b2, j, j1
#
            REQUEST            ASqjqj(b,j,b2,j1) j
            Tqjqj(b,j,b2,j1) = ASqjqj(b,j,b2,j1)
#
            DO b1
#
               REQUEST             ASqjqj(b1,j,b2,j1) j
               Tbb(b,b1)         = Tqjqj(b,j,b2,j1)*ASqjqj(b1,j,b2,j1)
               Tbb(b,b1)        *= 0.5
               PUT Pab_bb(b,b1) += Tbb(b,b1)
#
            ENDDO b1
#
      ENDPARDO b, b2, j, j1
#
      execute sip_barrier
#
       execute get_my_rank rank
       if rank == 0.0 

          DO a
          DO a1
             GET          Pab_aa(a,a1)
             SPaa(a,a1) = Pab_aa(a,a1)
          ENDDO a1
          ENDDO a

          DO b
          DO b1
             GET          Pab_bb(b,b1)
             SPbb(b,b1) = Pab_bb(b,b1)
          ENDDO b1
          ENDDO b

       endif 
#
      ENDPROC COMP_DENS_AB
#
# ----------------------------------------------------------------------------
#
      PROC DIAG_PAB
#     -------------
#
#     Diagonalize the VV density --> NCa(a1,a)
#     ----------------------------------------
#
       execute get_my_rank rank
       if rank == 0.0
#
          execute eig SPaa NCa
          execute form_fno SPaa NCa
#
          execute eig SPbb NCb
          execute form_fnob SPaa NCb
#
          DO mu
          DO a
             Cpa(mu,a) = 0.0
             DO a1
                t1xp(mu,a) = Ca(mu,a1)*NCa(a1,a)
                Cpa(mu,a) += t1xp(mu,a)
             ENDDO a1
            #Cpa(mu,a) = txp(mu,a)
          ENDDO a
          ENDDO mu
#
          DO mu
          DO i
             txp(mu,i) = Ca(mu,i)
             Cpa(mu,i) = txp(mu,i)
          ENDDO i
          ENDDO mu
#
          DO mu
          DO b
             Cpb(mu,b) = 0.0
             DO b1
                t1xq(mu,b) = Cb(mu,b1)*NCb(b1,b)
                Cpb(mu,b) += t1xq(mu,b)
             ENDDO b1
            #Cpb(mu,b) = txq(mu,b)
          ENDDO b
          ENDDO mu
#
          DO mu
          DO j
             txq(mu,j) = Cb(mu,j)
             Cpb(mu,j) = txq(mu,j)
          ENDDO j
          ENDDO mu
#
      endif
#
      execute sip_barrier
      execute broadcast_array CPa
      execute broadcast_array CPb
      execute sip_barrier
#
      PARDO mu, nu
            GET Fpq_a(mu,nu)
            DO a
               Txp(mu,a) = Fpq_a(mu,nu)*cpa(nu,a)
               DO a1
                  Tpp(a1,a) = Txp(mu,a)*cpa(mu,a1)
                  PUT FTa(a1,a) += Tpp(a1,a)
               ENDDO a1
            ENDDO a
      ENDPARDO mu, nu
#
      PARDO mu, nu
            GET Fpq_b(mu,nu)
            DO b
               Txq(mu,b) = Fpq_b(mu,nu)*cpb(nu,b)
               DO b1
                  Tqq(b1,b) = Txq(mu,b)*cpb(mu,b1)
                  PUT FTb(b1,b) += Tqq(b1,b)
               ENDDO b1
            ENDDO b
      ENDPARDO mu, nu

      execute sip_barrier
#
      execute get_my_rank rank
      if rank == 0.0
#
          DO a
          DO a1
             GET             FTa(a1,a)
             VFock_a(a1,a) = FTa(a1,a)
          ENDDO a1
          ENDDO a
#
          execute eig VFock_a UFock_a
#
          DO a
          DO mu
             Ca(mu,a) = 0.0
             DO a1
                t1xp(mu,a) = UFock_a(a1,a)*Cpa(mu,a1)
                Ca(mu,a) += t1xp(mu,a)
             ENDDO a1
            #Ca(mu,a) = txp(mu,a)
          ENDDO mu
          ENDDO a
#
          DO i
          DO mu
             txp(mu,i) = Cpa(mu,i)
             Ca(mu,i) = txp(mu,i)
          ENDDO mu
          ENDDO i
#
          DO b
          DO b1
             GET             FTb(b1,b)
             VFock_b(b1,b) = FTb(b1,b)
          ENDDO b1
          ENDDO b
#
          execute eig VFock_b UFock_b
#
          DO b
          DO mu
             Cb(mu,b) = 0.0
             DO b1
                t1xq(mu,b) = UFock_b(b1,b)*Cpb(mu,b1)
                Cb(mu,b) += t1xq(mu,b)
             ENDDO b1
            #Cb(mu,b) = txq(mu,b)
          ENDDO mu
          ENDDO b
#
          DO j
          DO mu
             txq(mu,j) = Cpb(mu,j)
             Cb(mu,j) = txq(mu,j)
          ENDDO mu
          ENDDO j
#
      endif
#
      execute sip_barrier
      execute broadcast_array Ca
      execute broadcast_array Cb
      execute sip_barrier

      PARDO p, p1
         tpp(p,p1)     = 0.0
         PUT FTa(p,p1) = tpp(p,p1)
      ENDPARDO p, p1

      PARDO q, q1
         tqq(q,q1)     = 0.0
         PUT FTb(q,q1) = tqq(q,q1)
      ENDPARDO q, q1
#
      execute sip_barrier
#
      PARDO mu, nu
            GET Fpq_a(mu,nu)
            DO p
               Txp(mu,p) = Fpq_a(mu,nu)*ca(nu,p)
               DO p1
                  Tpp(p1,p) = Txp(mu,p)*ca(mu,p1)
                  PUT FTa(p1,p) += Tpp(p1,p)
               ENDDO p1
            ENDDO p
      ENDPARDO mu, nu
#
      PARDO mu, nu
            GET Fpq_b(mu,nu)
            DO q
               Txq(mu,q) = Fpq_b(mu,nu)*cb(nu,q)
               DO q1
                  Tqq(q1,q) = Txq(mu,q)*cb(mu,q1)
                  PUT FTb(q1,q) += Tqq(q1,q)
               ENDDO q1
            ENDDO q
      ENDPARDO mu, nu
#
      execute sip_barrier
#
      ENDPROC DIAG_PAB
#     ----------------
#
# ----------------------------------------------------------------------------
#
# ----------------------------------------------------------------------------
#
      PROC FORMA
#     ----------
#
      PARDO a, i, a1, i1
            REQUEST                     VSpipi(a,i,a1,i1) i
            Tpipi(a,i,a1,i1)          = VSpipi(a,i,a1,i1)

            T1pipi(a,i,a1,i1) = 0.0

            DO a2
               IF a2 == a
                  GET FTa(a2,a)
                  Iaiai(a2,i,a1,i1)  = 1.0
                  T2pipi(a,i,a1,i1)  = Iaiai(a2,i,a1,i1)*FTa(a2,a)
                  T1pipi(a,i,a1,i1) -= T2pipi(a,i,a1,i1)
               ENDIF
            ENDDO a2

            DO a2
               IF a2 == a1
                  GET FTa(a2,a1)
                  Iaiai(a,i,a2,i1)   = 1.0
                  T2pipi(a,i,a1,i1)  = Iaiai(a,i,a2,i1)*FTa(a2,a1)
                  T1pipi(a,i,a1,i1) -= T2pipi(a,i,a1,i1)
               ENDIF
            ENDDO a2

            DO i2
               IF i2 == i
                  GET FTa(i2,i)
                  Iaiai(a,i2,a1,i1)  = 1.0
                  T2pipi(a,i,a1,i1)  = Iaiai(a,i2,a1,i1)*FTa(i2,i)
                  T1pipi(a,i,a1,i1) += T2pipi(a,i,a1,i1)
               ENDIF
            ENDDO i2

            DO i2
               IF i2 == i1
                  GET FTa(i2,i1)
                  Iaiai(a,i,a1,i2)   = 1.0
                  T2pipi(a,i,a1,i1)  = Iaiai(a,i,a1,i2)*FTa(i2,i1)
                  T1pipi(a,i,a1,i1) += T2pipi(a,i,a1,i1)
               ENDIF
            ENDDO i2

            execute apply_den4 Tpipi T1pipi
            PREPARE ASpipi(a,i,a1,i1) = Tpipi(a,i,a1,i1)
      ENDPARDO a, i, a1, i1
#
      PARDO a, i, b1, j1
            REQUEST                    Vpiqj(a,i,b1,j1) i
            Tpiqj(a,i,b1,j1)         = Vpiqj(a,i,b1,j1)

            T1piqj(a,i,b1,j1) = 0.0

            DO a2
               IF a2 == a
                  GET FTa(a2,a)
                  Iaibj(a2,i,b1,j1)  = 1.0
                  T2piqj(a,i,b1,j1)  = Iaibj(a2,i,b1,j1)*FTa(a2,a)
                  T1piqj(a,i,b1,j1) -= T2piqj(a,i,b1,j1)
               ENDIF
            ENDDO a2

            DO b2
               IF b2 == b1
                  GET FTb(b2,b1)
                  Iaibj(a,i,b2,j1)   = 1.0
                  T2piqj(a,i,b1,j1)  = Iaibj(a,i,b2,j1)*FTb(b2,b1)
                  T1piqj(a,i,b1,j1) -= T2piqj(a,i,b1,j1)
               ENDIF
            ENDDO b2

            DO i2
               IF i2 == i
                  GET FTa(i2,i)
                  Iaibj(a,i2,b1,j1)  = 1.0
                  T2piqj(a,i,b1,j1)  = Iaibj(a,i2,b1,j1)*FTa(i2,i)
                  T1piqj(a,i,b1,j1) += T2piqj(a,i,b1,j1)
               ENDIF
            ENDDO i2

            DO j2
               IF j2 == j1
                  GET FTb(j2,j1)
                  Iaibj(a,i,b1,j2)   = 1.0
                  T2piqj(a,i,b1,j1)  = Iaibj(a,i,b1,j2)*FTb(j2,j1)
                  T1piqj(a,i,b1,j1) += T2piqj(a,i,b1,j1)
               ENDIF
            ENDDO j2

            execute apply_den4 Tpiqj T1piqj
            PREPARE Apiqj(a,i,b1,j1) = Tpiqj(a,i,b1,j1)
      ENDPARDO a, i, b1, j1
#
      PARDO b, j, b1, j1
            REQUEST                     VSqjqj(b,j,b1,j1) j
            Tqjqj(b,j,b1,j1)          = VSqjqj(b,j,b1,j1)

            T1qjqj(b,j,b1,j1) = 0.0

            DO b2
               IF b2 == b
                  GET FTb(b2,b)
                  Ibjbj(b2,j,b1,j1)  = 1.0
                  T2qjqj(b,j,b1,j1)  = Ibjbj(b2,j,b1,j1)*FTb(b2,b)
                  T1qjqj(b,j,b1,j1) -= T2qjqj(b,j,b1,j1)
               ENDIF
            ENDDO b2

            DO b2
               IF b2 == b1
                  GET FTb(b2,b1)
                  Ibjbj(b,j,b2,j1)   = 1.0
                  T2qjqj(b,j,b1,j1)  = Ibjbj(b,j,b2,j1)*FTb(b2,b1)
                  T1qjqj(b,j,b1,j1) -= T2qjqj(b,j,b1,j1)
               ENDIF
            ENDDO b2

            DO j2
               IF j2 == j
                  GET FTb(j2,j)
                  Ibjbj(b,j2,b1,j1)  = 1.0
                  T2qjqj(b,j,b1,j1)  = Ibjbj(b,j2,b1,j1)*FTb(j2,j)
                  T1qjqj(b,j,b1,j1) += T2qjqj(b,j,b1,j1)
               ENDIF
            ENDDO j2

            DO j2
               IF j2 == j1
                  GET FTb(j2,j1)
                  Ibjbj(b,j,b1,j2)   = 1.0
                  T2qjqj(b,j,b1,j1)  = Ibjbj(b,j,b1,j2)*FTb(j2,j1)
                  T1qjqj(b,j,b1,j1) += T2qjqj(b,j,b1,j1)
               ENDIF
            ENDDO j2

            execute apply_den4 Tqjqj T1qjqj
            PREPARE ASqjqj(b,j,b1,j1) = Tqjqj(b,j,b1,j1)
      ENDPARDO b, j, b1, j1
#
      execute server_barrier
#
      ENDPROC FORMA
#     -------------
#
# ----------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------- 
#
############################################################################## 
#
#                         START OF MAIN PROGRAM 
#
############################################################################## 
#
#     Define a few constants 
#     ---------------------- 
#
      ecrit  = scf_conv # Energy tolerance  
      etemp  = 1.0 
      etemp += damp  
      damp1  = 1.0/etemp         # 1/(1+damp)  
     #execute print_scalar damp 
     #execute print_scalar damp1
      one = 1.0 
      two = 2.0 
      three = 3.0 
      four = 4.0 
#
#     Create the one-particle arrays needed for the computation. 
#     ---------------------------------------------------------- 
#
#     Fock matrix
#     ----------- 
      CREATE Fpq_a  
      CREATE Fpq_b  
#
#     New HF density 
#     -------------- 
#
      CREATE DHFa   
      CREATE DHFb   
#
#     Old HF density 
#     -------------- 
#
      CREATE DHFa_old    
      CREATE DHFb_old    
#
#     Orthonormalizing transformation coefficient
#     ------------------------------------------- 
#
      CREATE Qxx 
      execute sip_barrier 
#
#     Construct the initial guess of the Fock matrix.
#     -----------------------------------------------
#    
      create IDhfa
      create IDhfb
      execute sip_barrier
      execute list_to_blocks IDhfa
      execute list_to_blocks IDhfb
      execute read_list_to_blocks
      execute sip_barrier
      PARDO mu, nu
            GET               IDHFa(mu,nu)
            GET               IDHFb(mu,nu)
            txx(mu,nu)      = IDHFa(mu,nu)
            txx(mu,nu)     += IDHFb(mu,nu)
            txx(mu,nu)     *= 0.5
            PUT DHFa(mu,nu) = txx(mu,nu)
            PUT DHFb(mu,nu) = txx(mu,nu)
      ENDPARDO mu, nu
      execute sip_barrier
      delete IDhfa
      delete IDhfb
      CALL FOCK_MATRIX
     #CALL IGUESS  
#
#     execute sip_barrier 
#     execute list_to_blocks Fpq_a 
#     execute sip_barrier 
#     execute list_to_blocks Fpq_b 
#     execute sip_barrier 
#
      #execute sip_barrier
#
#     Construct the array S**(-1/2) 
#     ----------------------------- 
#
      CALL OVER_HALF 
      #execute sip_barrier
#
#     Construct S^(-1/2) F S^(-1/2) 
#     ----------------------------- 
#
      CREATE FTpq_a  
      CREATE FTpq_b  
      execute sip_barrier 
      CALL FOCK_TRANSPOSE 
      execute sip_barrier 
#
#     Diagonalize the transposed Fock matrix 
#     -------------------------------------- 
#
      CALL FOCK_DIAG 
#
#     Back transform the coefficient array 
#     ------------------------------------ 
#
      CREATE CBT_a 
      CREATE CBT_b 
      execute sip_barrier
      CALL   C_BTRAN 
      execute sip_barrier
#
#     Zero out the 'old' HF density 
#     ----------------------------- 
#
      CALL HFDENS_ZERO 
      execute sip_barrier
#
#     Compute the HF density 
#     ---------------------- 
#
      CALL HFIDENS
      execute sip_barrier
#
#     Damp the HF density 
#     ------------------- 
#
#     CALL HF_DAMP 
#     execute sip_barrier
#
#     Compute the energy 
#     ------------------ 
#
      CALL HF_ENERGY 
      energy1 = energy 
      execute sip_barrier
#
#     Replace 'old' HF density by 'new' HF density 
#     -------------------------------------------- 
#
      CALL HFDENS_REPLACE 
#
#     Create history arrays 
#     --------------------- 
#
      CREATE Fai 
      CREATE F1ai 
      CREATE F2ai 
      CREATE F3ai 
      CREATE F4ai 
      CREATE F5ai 
      CREATE F6ai 
      CREATE Fbj 
      CREATE F1bj 
      CREATE F2bj 
      CREATE F3bj 
      CREATE F4bj 
      CREATE F5bj 
      CREATE F6bj 
#
      CREATE F1a 
      CREATE F2a 
      CREATE F3a 
      CREATE F4a 
      CREATE F5a 
      CREATE F6a 
      CREATE F1b 
      CREATE F2b 
      CREATE F3b 
      CREATE F4b 
      CREATE F5b 
      CREATE F6b 
      execute sip_barrier
#
      DELETE FTpq_a  
      DELETE FTpq_b  
      DELETE Fpq_a  
      DELETE Fpq_b  
      DELETE CBT_a 
      DELETE CBT_b 
#
# Start iterations 
# ---------------- 
#
      DO kiter 
#
#        Create 1-particle arrays 
#        ------------------------ 
#
         CREATE Fpq_a 
         CREATE Fpq_b 
         CREATE CBT_a 
         CREATE CBT_b 
         CREATE FTpq_a  
         CREATE FTpq_b  
         execute sip_barrier
#
#        Construct the new Fock matrix 
#        -----------------------------
#
         CALL FOCK_MATRIX  
         execute sip_barrier 
#
         CALL HF_ENERGY 
         energy2 = energy 
         execute sip_barrier
#
#        Compute the energy 
#        ------------------ 
#
         CALL GEN_6HISTORY 
         execute sip_barrier 
#
         if kiter == 4 # scf_beg  
            damp   = 0.0    
            damp1  = 1.0    
#
#           Perform DIIS if kiter == 4 
#           -------------------------- 
#
            CALL DIIS2 
         endif 
#
         if kiter == 5 # scf_beg  
#
#           Perform DIIS if kiter == 5 
#           -------------------------- 
#
            CALL DIIS3 
         endif 
#
         if kiter == 6 # scf_beg  
#
#           Perform DIIS if kiter == 6 
#           -------------------------- 
#
            CALL DIIS4 
         endif 
#
         if kiter == 7 # scf_beg  
#
#           Perform DIIS if kiter >= 7 
#           -------------------------- 
#
            CALL DIIS5 
         endif 
#
         if kiter >= 8 # scf_beg  
#
#           Perform DIIS if kiter >= 7 
#           -------------------------- 
#
            CALL DIIS6 
            CALL MOVE6 
         endif 
#
         execute sip_barrier
#
#        Transpose the new Fock matrix 
#        -----------------------------
#
         CALL FOCK_TRANSPOSE 
         execute sip_barrier
#
#        Diagonalize the transposed Fock matrix 
#        -------------------------------------- 
#
         CALL FOCK_DIAG 
         execute sip_barrier
#
#        Back transform the coefficient array 
#        ------------------------------------ 
#
         CALL C_BTRAN 
#
         done = 0.0 
         execute sip_barrier
#
#        Check on convergence --> largest HF density difference. 
#        ------------------------------------------------------- 
#
         DO mu 
         DO nu 
#
#           Alpha component 
#           --------------- 
#
            GET           DHFa_old(mu,nu) 
            GET           DHFa(mu,nu) 
#
            Txx(mu,nu)  = DHFa(mu,nu) 
            Txx(mu,nu) -= DHFa_old(mu,nu) 
            execute check_dconf Txx donea  
            if donea > done 
               done = donea 
            endif 
#
#           Beta component 
#           -------------- 
#
            GET           DHFb_old(mu,nu) 
            GET           DHFb(mu,nu) 
#
            Txx(mu,nu)  = DHFb(mu,nu) 
            Txx(mu,nu) -= DHFb_old(mu,nu) 
            execute check_dconf Txx doneb  
            if doneb > done 
               done = doneb 
            endif 
#
         ENDDO nu 
         ENDDO mu 
#
         execute sip_barrier
#
       # execute print_scalar done 

            ncount1 = 0.0
         DO kptr1
            ncount1 = ncount1 + 1.0
            if ncount1 == one
               tpinf(kiter,kptr1) = energy
               pinf(kiter,kptr1)  = tpinf(kiter,kptr1)
            endif
         ENDDO kptr1

            ncount1 = 0.0
         DO kptr1
            ncount1 = ncount1 + 1.0
            if ncount1 == two
               tpinf(kiter,kptr1) = done
               pinf(kiter,kptr1)  = tpinf(kiter,kptr1)
            endif
         ENDDO kptr1
         execute print_rel_info one pinf

#
#        Check on convergence using density difference. 
#        ---------------------------------------------- 
#
         IF kiter > 1 
            IF done < scf_conv 
               DELETE FTpq_a  
               DELETE FTpq_b  
               DELETE CBT_a 
               DELETE CBT_b 
               exit 
            ENDIF 
         ENDIF 
#
#        Replace 'old' HF density by 'new' HF density 
#        -------------------------------------------- 
#
         CALL HFDENS_REPLACE 
         execute sip_barrier
#
#        Check on convergence --> energy criterion.  
#        ------------------------------------------ 
#
        #IF energy2 < energy1  
        #   ediff = energy1 -energy2  
        #   IF ediff < ecrit
        #      exit # kiter
        #   ENDIF
        #ENDIF
#
        #IF energy2 > energy1  
        #   ediff = energy2 - energy1  
        #   IF ediff < ecrit
        #      exit # kiter
        #   ENDIF
        #ENDIF
#
#        Reset eold --> enew
#        -------------------
#
         energy1 = energy2  
#
#        Compute the HF density 
#        ---------------------- 
#
         CALL HFDENS
         execute sip_barrier
#
#        Delete one-particle arrays to be used in the next iteration. 
#        ------------------------------------------------------------ 
#
         if kiter < scf_iter
            DELETE Fpq_a 
            DELETE Fpq_b 
         endif

         DELETE FTpq_a  
         DELETE FTpq_b  
         DELETE CBT_a 
         DELETE CBT_b 
#
      ENDDO kiter 
#
#     Release unneeded memory blocks.
#
      execute sip_barrier
      DELETE DHFA
      DELETE DHFB
      DELETE DHFA_OLD
      DELETE DHFB_OLD
      DELETE F1Ai
      DELETE F2Ai
      DELETE F3Ai
      DELETE F4Ai
      DELETE F5Ai
      DELETE F6Ai
      DELETE F1Bj
      DELETE F2Bj
      DELETE F3Bj
      DELETE F4Bj
      DELETE F5Bj
      DELETE F6Bj
      DELETE F2A
      DELETE F3A
      DELETE F4A
      DELETE F5A
      DELETE F6A
      DELETE F2B
      DELETE F3B
      DELETE F4B
      DELETE F5B
      DELETE F6B

      CREATE FTa 
      CREATE FTb 
      execute sip_barrier 
#
#     Print out summary table 
#     ----------------------- 
      execute print_rel_info two pinf
#
      scfeneg  = energy2
      totenerg = scfeneg

##### execute corder one ca
#
      CALL TRAN_XXII
      CALL TRAN_PIPI
      CALL TRAN_QJQJ
      CALL TRAN_PIQJ
#
#     Create the second-order 'amplitudes'
#     ------------------------------------
#
      PARDO mu, nu
            GET Fpq_a(mu,nu)
            DO p
               Txp(mu,p) = Fpq_a(mu,nu)*ca(nu,p)
               DO p1
                  Tpp(p1,p)      = Txp(mu,p)*ca(mu,p1)
                  PUT FTa(p1,p) += Tpp(p1,p)
               ENDDO p1
            ENDDO p
      ENDPARDO mu, nu
#
      PARDO mu, nu
            GET Fpq_b(mu,nu)
            DO q
               Txq(mu,q) = Fpq_b(mu,nu)*cb(nu,q)
               DO q1
                  Tqq(q1,q)      = Txq(mu,q)*cb(mu,q1)
                  PUT FTb(q1,q) += Tqq(q1,q)
               ENDDO q1
            ENDDO q
      ENDPARDO mu, nu
#
      create Pab_aa
      create Pab_bb
      execute sip_barrier

      DO p
      DO p1
         GET            FTa(p,p1)
         Fock_a(p,p1) = FTa(p,p1)
      ENDDO p1
      ENDDO p

      DO q
      DO q1
         GET            FTb(q,q1)
         Fock_b(q,q1) = FTb(q,q1)
      ENDDO q1
      ENDDO q

      execute print_rel_info three Fock_a
      execute print_rel_info four Fock_b
#
#     Compute the second-order energy 
#     ------------------------------- 

      CALL FORMA
      CALL MP2_ENERGY 

      execute sip_barrier
#
      PARDO p, p1
         tpp(p,p1)     = 0.0
         PUT FTa(p,p1) = tpp(p,p1)
      ENDPARDO p, p1
#
      PARDO q, q1
         tqq(q,q1)     = 0.0
         PUT FTb(q,q1) = tqq(q,q1)
      ENDPARDO q, q1
#
      CALL COMP_DENS_AB
      CALL DIAG_PAB
#
      execute sip_barrier
#
#     Put the final Fock arrays into predefined arrays
#     ------------------------------------------------
#
      execute get_my_rank rank
      if rank == 0.0
         DO p
         DO p1
            GET            FTa(p,p1)
            tpp(p,p1)    = FTa(p,p1)
            Fock_a(p,p1) = tpp(p,p1)
         ENDDO p1
         ENDDO p
      execute print_rel_info three Fock_a
#
         DO q
         DO q1
            GET            FTb(q,q1)
            tqq(q,q1)    = FTb(q,q1)
            Fock_b(q,q1) = tqq(q,q1)
         ENDDO q1
         ENDDO q
      execute print_rel_info four Fock_b
#
      endif

##### Two-electron transformation using FNO's 
#
      CALL TRAN_XXII
      CALL TRAN_PIPI
      CALL TRAN_QJQJ
      CALL TRAN_PIQJ

      CALL FORMA
#
#     Compute the second-order energy 
#     ------------------------------- 
      CALL MP2_ENERGY 
#

      execute sip_barrier

      execute sip_barrier
#
#
                           ENDSIAL SCF_UHF_DIIS         
#
###############################################################################
