#  Copyright (c) 2003-2010 University of Florida
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  The GNU General Public License is included in this distribution
#  in the file COPYRIGHT.
                           SIAL CCSD_RHF_SV1
#
#-------------------------------------------------------------------------------
#
# Declare indeces 
# --------------- 
#
      index kiter    = 1, cc_iter   
      index jiter    = 1, cc_iter   
      index kptr0    = 1, 1
      index kptr1    = 1, 2
      index kstate   = 1, 12
      index jstate   = 1, 12
#
      aoindex mu     = 1, norb 
      aoindex nu     = 1, norb
      aoindex lambda = 1, norb
      aoindex sigma  = 1, norb
#
      moaindex i = baocc, eaocc
      moaindex i1= baocc, eaocc
      moaindex i2= baocc, eaocc
      moaindex i3= baocc, eaocc
#
      moaindex a = bavirt, eavirt
      moaindex a1= bavirt, eavirt
      moaindex a2= bavirt, eavirt
      moaindex a3= bavirt, eavirt
#
      moaindex j = baocc, eaocc
      moaindex j1= baocc, eaocc
      moaindex j2= baocc, eaocc
      moaindex j3= baocc, eaocc
#
      moaindex b = bavirt, eavirt
      moaindex b1= bavirt, eavirt
      moaindex b2= bavirt, eavirt
      moaindex b3= bavirt, eavirt
#
      moaindex p = baocc, eavirt
      moaindex p1= baocc, eavirt
      moaindex p2= baocc, eavirt
      moaindex p3= baocc, eavirt
#
      moaindex q = baocc, eavirt
      moaindex q1= baocc, eavirt
      moaindex q2= baocc, eavirt
      moaindex q3= baocc, eavirt
# 
# Declare static arrays 
# --------------------- 
#
# Arrays used in transformation for AO2 algorithm
# -----------------------------------------------
#
      temp Txixi(mu,i1,lambda,i)
      temp Txxii(mu,nu,i1,i)
      temp Tixxi(i1,nu,lambda,i)
      temp Txipi(mu,i,p,i1)
      temp T1xipi(mu,i,p,i1)
      temp Tpipi(p1,i,p,i1)
      temp T1pipi(p1,i,p,i1)
      temp Tixai(i,mu,a,i1)
      temp Txaii(mu,a,i,i1)
      temp Tiaai(i,a1,a,i1)
      temp Taaii(a,a1,i,i1)
      temp Txaai(mu,a1,a,i)
      temp Taaai(a2,a,a1,i)
      temp Txxai(mu,nu,a,i)
      temp T1xaai(mu,a1,a,i) 
#
      served Viaai(i,a1,a,i1) 
      served Vaaii(a,a1,i,i1)
      served Vaaai(a,a1,a2,i1)
      served Vpiqj(p1,i,p,i1) 
      served VSpiqj(p1,i,p,i1) 
      served VSaaai(a,a1,a2,i1)
#
# End Arrays used in transformation for AO2 algorithm
# --------------------------------------------------- 
#
# Declare temporary arrays 
# ------------------------ 
#
      local Lxxxi(mu,nu,lambda,i)
      local Lxxai(mu,nu,a,i) 
      local Lxaai(mu,a1,a,i) 
      temp T1xxxi(mu,nu,lambda,i)  
      temp T1xixi(mu,i,nu,i1)
      temp Txiix(mu,i,i1,nu)
      temp Txpii(mu,p,i,i1)
      temp Tppii(p,p1,i,i1)
      temp Tixpi(i,mu,p,i1)
      temp Tippi(i,p,p1,i1)
#
      temp Taiai(p,i,p1,i1)
      temp T1aiai(p,i,p1,i1)
      temp T2aiai(p,i,p1,i1)
      temp T3aiai(p,i,p1,i1)
      temp Tiabj(i,a,b,j)
      temp Taibj(p,i,q,j)
      temp T1iibb(i,i1,b,b1)
      temp T1aibj(p,i,q,j)
      temp T2aibj(p,i,q,j)
      temp T3aibj(p,i,q,j)
      temp T4aibj(p,i,q,j)
      temp T5aibj(p,i,q,j)
#
      temp Txxxp(mu,nu,lambda,i)
      temp Txxpp(mu,nu,p1,i)
      temp Txppp(mu,p2,p1,i)
      temp Tpppp(p3,p2,p1,p)
      temp Tixxx(i,mu,nu,sigma) 
      temp Tipxx(i,p,nu,sigma) 
      temp Txiai(lambda,i,a1,i1) 
#
      temp tmp1_aiai(a,i,a1,i1) 
      temp tmp2_aiai(a,i,a1,i1) 
      temp tmp3_aiai(a,i,a1,i1) 
      temp tmp1_aibj(a,i,b,j) 
      temp tmp2_aibj(a,i,b,j) 
#
      temp Taiii(a,i,i1,i2) 
      temp T1aiii(a,i,i1,i2) 
#
      temp  Tiiii(i,i1,i2,i3) 
      temp T1iiii(i,i1,i2,i3) 
#
      temp  Tiiai(i,i1,a,i2) 
      temp T1iiai(i,i1,a,i2) 
#
      temp T1aaai(a,a1,a2,i)  
      temp T2aaai(a,a1,a2,i)  
      temp Taaaa(a,a1,a2,a3)  
      temp T1aaaa(a,a1,a2,a3)  
#
      temp Taabb(a,a1,b,b1)  
      temp T1aabb(a,a1,b,b1)  
#
      temp R1aiai(a,i,a1,i1) 
      temp R2aiai(a,i,a1,i1) 
      temp R3aiai(a,i,a1,i1) 
      temp R4aiai(a,i,a1,i1) 
      temp R1aibj(a,i,b,j) 
      temp R2aibj(a,i,b,j) 
      temp R3aibj(a,i,b,j) 
      temp R4aibj(a,i,b,j) 
#
      temp T1iaai(i,a,a1,i1) 
      temp T2iaai(i,a,a1,i1) 
      temp T1jbbj(j,b,b1,j1) 
      temp T2jbbj(j,b,b1,j1) 
      temp T1iabj(i,a,b,j) 
      temp T2iabj(i,a,b,j) 
      temp Tjjpp(j,j1,p,p1) 
      temp T1jjpp(j,j1,p,p1) 
      temp T2jjpp(j,j1,p,p1) 
      temp  Tiiqq(i,i1,q,q1) 
      temp T1iiqq(i,i1,q,q1) 
      temp T2iiqq(i,i1,q,q1) 
      temp  Tjjai(j,j1,a,i) 
      temp T1jjai(j,j1,a,i) 
      temp T2jjai(j,j1,a,i) 
      temp  Tiibj(i,i1,b,j) 
      temp T1iibj(i,i1,b,j) 
      temp T2iibj(i,i1,b,j) 
      temp  Tjbai(j,b,a,i)  
      temp T1jbai(j,b,a,i)  
      temp T2jbai(j,b,a,i)  
      temp  Taijj(a,i,j,j1) 
      temp T1aijj(a,i,j,j1) 
      temp Tqqip(a,i,b,b1)  
#
      temp Tpp(p,q)
      temp T1pp(p,q)
      temp T2pp(p,q)
#
# Declare distributed arrays 
# -------------------------- 
#
      served T2new_ab(a,i,b,j)
      served T2old_ab(a,i,b,j)
      served T2old_aa(a,i,b,j)
      served cai(a,i)
      served Ctau(a,i,b,j)
      served CT_ab(a,i,b,j)
      served CT_aa(a,i,b,j)
      served Fii(i,j)
      served Faa(a,b)
      served Fai(a,i)
      distributed LSFai(a,i)
#
      served Tau_ab(a,i,b,j)
      served Taup_aa(a,i,a1,i1)
      served Taup_ab(a,i,b,j)
#
      served Wiibb(i1,i,b,b1)    
      served Wjjaa(j1,j,a,a1)      
#
      static cpinf(kstate,kptr1)
      temp ctpinf(kstate,kptr1)
      distributed omegacis(kstate,kptr0)
      temp tomegacis(kstate,kptr0)
      temp t1omegacis(kstate,kptr0)
      scalar eomegacis
      scalar shift
      scalar rank
      scalar maxstate
#
# Declare served arrays 
# --------------------- 
#
      temp AOINT(mu,nu,lambda,sigma) 
#
# Arrays needed for AOLADDER contribution
# ---------------------------------------
#
     temp Zab(lambda,i,b,j)
     temp ZZab(lambda,i,sigma,j)
#
     temp Yab(lambda,i,mu,j)
     temp Y1ab(lambda,i,mu,j)
#
     temp TXaiai(a,i,nu,i1)
     temp Taixi(a,i,nu,i1)   
     temp TYaiai(a,i,a1,i1)
     temp TY1aiai(a,i,a1,i1)
     temp TXbjbj(b,j,nu,j1)
     temp Tbjxj(b,j,nu,j1)
     temp TYbjbj(b,j,b1,j1)
     temp TY1bjbj(b,j,b1,j1)
     temp TXaibj(a,i,nu,j)
     temp TZaibj(a,i,nu,j)
     temp Taixj(a,i,nu,j)
     temp T1aixj(a,i,nu,j)
     temp TYaibj(a,i,b,j)
#
     served TAO_ab(lambda,i,sigma,j)
     served T2AO_ab(lambda,i,sigma,j)
     served TDaixj(a,i,nu,j)
     local LDaixj(a,i,nu,j) 
#
# local arrays used for data storage
# ---------------------------------- 
#
     local Liiai(i2,i,a,i1) 
     local L1iiai(i,i1,a2,i2) 
     local L2iiai(i2,i1,a2,i)  
     local L3iiai(i,i1,a,i2)  
     local L4iiai(i2,i1,a,i)  
     local Laiai(a,i,a2,i1) 
     local L1aiai(a,i,a1,i2) 
     local L2aiai(a1,i1,a2,i) 
     local L3aiai(a2,i1,a,i2) 
     local L4aiai(a1,i,a2,i1) 
     local Laaai(a,a2,a1,i) 
#
     local Laijj(a,i,j1,j) 
     local Laibj(a,i,b1,j) 
     local L1aibj(a1,i,b,j) 
     local L2aibj(a,i,b,j2) 
     local L3aibj(a,i1,b,j) 
     local L4aibj(a,i,b1,j) 
     local Liibj(i1,i,b,j) 
     local L1iibj(i,i1,b,j) 
     local Lbbai(b,b1,a,i) 
     local Laabj(a,a1,b,j) 
     local LLaiai(a,i,a1,i1) 
     local Lxiai(lambda,i,a1,i1) 
     local LLbjbj(b,j,b1,j1) 
     local Lxjbj(lambda,j,b1,j1) 
     local LLaibj(a,i,b,j) 
     local Lxibj(lambda,i,b,j) 
     local L1xixi(mu,i,nu,i1)  
     local L2xixi(nu,i1,mu,i)  
     local L1xjxj(mu,j,nu,j1)  
     local L2xjxj(nu,j1,mu,j)  
     local L1xixj(mu,i,nu,j)  
     local Laiii(a,i,i2,i1) 
     local L1aiii(a1,i2,i,i1) 
     local Lbjjj(b,j,j2,j1) 
     local L1bjjj(b1,j2,j,j1) 
     local Ljjai(a,i,j,j1) 
#
     local LXbbai(b1,b,a1,i1) 
     local LXaabj(a1,a,b1,j1) 
#
# Distributed two-particle arrays 
# ------------------------------- 
#
      served Vxixi(mu,i1,lambda,i)
      served Vxxii(mu,nu,i1,i)
      served Vixxi(i1,nu,lambda,i)
      served Vxxai(mu,nu,a,i)
      served Vxipi(mu,i,p,i1)
      served Vixai(i,mu,a,i1)
      served Vxaii(mu,a,i,i1)
      served Vxaai(mu,a1,a,i)
#
# Declare scalars 
# --------------- 
#
      scalar iroot
      scalar etemp
      scalar exponent  
      scalar esum
      scalar esuma
      scalar esumb
      scalar esumab
      scalar ecorraa
      scalar ecorrbb
      scalar ecorrab
      scalar ecorrT
      scalar enew 
      scalar eold 
      scalar ecrit 
      scalar ediff 
      scalar mp2_energy
      scalar restart
      scalar esum2
      scalar esum3
      scalar ecorr2
      scalar edoubles
      scalar etriples
      scalar ecisd
      scalar ecisdev
      scalar toev
      scalar fev
#
# needed for formatted printing
#
      static pinf(kiter,kptr1)
      temp tpinf(kiter,kptr1)
      scalar one
      scalar two
      scalar ncount1
      scalar ncount2
#
# CIS vectors
# -----------
#
      distributed VSTART1A1(a,i)
      distributed VSTART1A2(a,i)
      distributed VSTART1A3(a,i)
      distributed VSTART1A4(a,i)
      distributed VSTART1A5(a,i)
      distributed VSTART1A6(a,i)
      distributed VSTART1A7(a,i)
      distributed VSTART1A8(a,i)
      distributed VSTART1A9(a,i)
      distributed VSTART1A10(a,i)
      distributed VSTART1A11(a,i)
      distributed VSTART1A12(a,i)
#
      distributed VSTART1B1(b,j)
      distributed VSTART1B2(b,j)
      distributed VSTART1B3(b,j)
      distributed VSTART1B4(b,j)
      distributed VSTART1B5(b,j)
      distributed VSTART1B6(b,j)
      distributed VSTART1B7(b,j)
      distributed VSTART1B8(b,j)
      distributed VSTART1B9(b,j)
      distributed VSTART1B10(b,j)
      distributed VSTART1B11(b,j)
      distributed VSTART1B12(b,j)
#
#    ------------------------------------------------------------------------
     PROC read_data
#
      create VSTART1A1
      create VSTART1A2
      create VSTART1A3
      create VSTART1A4
      create VSTART1A5
      create VSTART1A6
      create VSTART1A7
      create VSTART1A8
      create VSTART1A9
      create VSTART1A10
      create VSTART1A11
      create VSTART1A12
      create VSTART1B1
      create VSTART1B2
      create VSTART1B3
      create VSTART1B4
      create VSTART1B5
      create VSTART1B6
      create VSTART1B7
      create VSTART1B8
      create VSTART1B9
      create VSTART1B10
      create VSTART1B11
      create VSTART1B12
      create omegacis
      execute server_barrier

      execute list_to_blocks VSTART1A1
      execute list_to_blocks VSTART1B1
      execute list_to_blocks VSTART1A2
      execute list_to_blocks VSTART1B2
      execute list_to_blocks VSTART1A3
      execute list_to_blocks VSTART1B3
      execute list_to_blocks VSTART1A4
      execute list_to_blocks VSTART1B4
      execute list_to_blocks VSTART1A5
      execute list_to_blocks VSTART1B5
      execute list_to_blocks VSTART1A6
      execute list_to_blocks VSTART1B6
      execute list_to_blocks VSTART1A7
      execute list_to_blocks VSTART1B7
      execute list_to_blocks VSTART1A8
      execute list_to_blocks VSTART1B8
      execute list_to_blocks VSTART1A9
      execute list_to_blocks VSTART1B9
      execute list_to_blocks VSTART1A10
      execute list_to_blocks VSTART1B10
      execute list_to_blocks VSTART1A11
      execute list_to_blocks VSTART1B11
      execute list_to_blocks VSTART1A12
      execute list_to_blocks VSTART1B12
      execute list_to_blocks omegacis
      execute server_barrier
      execute read_list_to_blocks
      execute server_barrier
#
    ENDPROC read_data
#
     PROC putvec
     ncount1 = 1.0
     execute sip_barrier
     execute print_scalar iroot
#     execute get_my_rank rank
#     if rank == 0.0
         do jstate
         do kptr0
             if ncount1 == iroot
             get omegacis(jstate,kptr0)
             tomegacis(jstate,kptr0) = omegacis(jstate,kptr0)
             t1omegacis(jstate,kptr0) = 1.0
             eomegacis = tomegacis(jstate,kptr0)*t1omegacis(jstate,kptr0)
             eomegacis *= fev
#
             shift = eomegacis
             #shift *= -1.0
             execute print_scalar eomegacis
             endif
             ncount1 += 1.0
         enddo kptr0
         enddo jstate
#      endif
      execute server_barrier
      PARDO a, i
            if iroot == 1.0
               get VSTART1A1(a,i)
               prepare cai(a,i)=VSTART1A1(a,i)
            endif
            if iroot == 2.0
               get VSTART1A2(a,i)
               prepare cai(a,i)=VSTART1A2(a,i)
            endif
            if iroot == 3.0
               get VSTART1A3(a,i)
               prepare cai(a,i)=VSTART1A3(a,i)
            endif
            if iroot == 4.0
               get VSTART1A4(a,i)
               prepare cai(a,i)=VSTART1A4(a,i)
            endif
            if iroot == 5.0
               get VSTART1A5(a,i)
               prepare cai(a,i)=VSTART1A5(a,i)
            endif
            if iroot == 6.0
               get VSTART1A6(a,i)
               prepare cai(a,i)=VSTART1A6(a,i)
            endif
            if iroot == 7.0
               get VSTART1A7(a,i)
               prepare cai(a,i)=VSTART1A7(a,i)
            endif
            if iroot == 8.0
               get VSTART1A8(a,i)
               prepare cai(a,i)=VSTART1A8(a,i)
            endif
            if iroot == 9.0
               get VSTART1A9(a,i)
               prepare cai(a,i)=VSTART1A9(a,i)
            endif
            if iroot == 10.0
               get VSTART1A10(a,i)
               prepare cai(a,i)=VSTART1A10(a,i)
            endif
            if iroot == 11.0
               get VSTART1A11(a,i)
               prepare cai(a,i)=VSTART1A11(a,i)
            endif
            if iroot == 12.0
               get VSTART1A12(a,i)
               prepare cai(a,i)=VSTART1A12(a,i)
            endif
      ENDPARDO a,i
      execute server_barrier
     ENDPROC putvec
#
#    Perform the first two stages of the transformation in two N5 steps.
#
     PROC TRAN_TRAN2
#
#    ------------------------------------------------------------------------
#
     PARDO mu, nu, lambda
#
          allocate Lxxxi(mu,nu,lambda,*)
#     
          DO sigma
#
             compute_integrals            aoint(mu,nu,lambda,sigma)
#
             DO i   
#
                 T1xxxi(mu,nu,lambda,i)  = aoint(mu,nu,lambda,sigma)*ca(sigma,i)
                 Lxxxi(mu,nu,lambda,i)  += T1xxxi(mu,nu,lambda,i)
#    
             ENDDO i
#    
          ENDDO sigma

          DO i
           DO i1
              Txxii(mu,nu,i1,i)          = Lxxxi(mu,nu,lambda,i)*ca(lambda,i1)
              PREPARE Vxxii(mu,nu,i1,i) += Txxii(mu,nu,i1,i)
           ENDDO i1
           ENDDO i

          DO i
           DO i1
              Txixi(mu,i1,lambda,i)      = Lxxxi(mu,nu,lambda,i)*ca(nu,i1)
              PREPARE Vxixi(mu,i1,lambda,i) += Txixi(mu,i1,lambda,i)
           ENDDO i1
           ENDDO i

          DO i
           DO i1
              Tixxi(i1,nu,lambda,i)      = Lxxxi(mu,nu,lambda,i)*ca(mu,i1)
              PREPARE Vixxi(i1,nu,lambda,i) += Tixxi(i1,nu,lambda,i)
           ENDDO i1
           ENDDO i
#    
          DO i
           DO a
              Txxai(mu,nu,a,i)          = Lxxxi(mu,nu,lambda,i)*ca(lambda,a)
              PREPARE Vxxai(mu,nu,a,i) += Txxai(mu,nu,a,i)
           ENDDO a
           ENDDO i
#
          deallocate Lxxxi(mu,nu,lambda,*)
#
     ENDPARDO mu, nu, lambda
     execute server_barrier
#
#    ------------------------------------------------------------------------
#
     ENDPROC TRAN_TRAN2
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
#    Perform the third N5 stage of the transformation.
#
     PROC TRAN_TRAN3
#
#    ------------------------------------------------------------------------
#
     PARDO mu, nu, i, i1
#
           REQUEST Vxixi(mu,i,nu,i1) i1
#
           DO p
#
              Txipi(mu,i,p,i1)          = Vxixi(mu,i,nu,i1)*ca(nu,p)
              PREPARE Vxipi(mu,i,p,i1) += Txipi(mu,i,p,i1)
#
           ENDDO p
#
     ENDPARDO mu, nu, i, i1
#
     PARDO mu, nu, i, i1
#
           REQUEST Vxxii(mu,nu,i,i1) i1
#
           DO a
#
              Txaii(mu,a,i,i1)          = Vxxii(mu,nu,i,i1)*ca(nu,a)
              PREPARE Vxaii(mu,a,i,i1) += Txaii(mu,a,i,i1)
#
           ENDDO a
#
     ENDPARDO mu, nu, i, i1
#
     PARDO mu, nu, i, i1
#
           REQUEST Vixxi(i,mu,nu,i1) i1
#
           DO a
#
              Tixai(i,mu,a,i1)          = Vixxi(i,mu,nu,i1)*ca(nu,a)
              PREPARE Vixai(i,mu,a,i1) += Tixai(i,mu,a,i1)
#
           ENDDO a

     ENDPARDO mu, nu, i, i1
#
     pardo mu,nu,a,i
         request Vxxai(mu,nu,a,i) i
         do a1
             Txaai(mu,a1,a,i) = Vxxai(mu,nu,a,i)*Ca(nu,a1)
             prepare Vxaai(mu,a1,a,i) += Txaai(mu,a1,a,i)
         enddo a1
     endpardo mu,nu,a,i
#
#    ------------------------------------------------------------------------
#
     execute server_barrier
#
     ENDPROC TRAN_TRAN3
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
     PROC TRAN_TRAN4
#
#    ------------------------------------------------------------------------
#
     PARDO mu, p, i, i1
#
           REQUEST             Vxipi(mu,i,p,i1) i1
           REQUEST             Vxipi(mu,i1,p,i) i
           Txipi(mu,i,p,i1)  = Vxipi(mu,i,p,i1)
           T1xipi(mu,i,p,i1) = Vxipi(mu,i1,p,i)
           Txipi(mu,i,p,i1) -= T1xipi(mu,i,p,i1)
#
           DO p1
#
              Tpipi(p1,i,p,i1)          = Vxipi(mu,i,p,i1)*ca(mu,p1)
              PREPARE Vpiqj(p1,i,p,i1) += Tpipi(p1,i,p,i1)
#
           ENDDO p1
#
           DO p1
#
              Tpipi(p1,i,p,i1)          = Txipi(mu,i,p,i1)*ca(mu,p1)
              PREPARE VSpiqj(p1,i,p,i1) += Tpipi(p1,i,p,i1)
#
           ENDDO p1
#
     ENDPARDO mu, p, i, i1
#
     PARDO mu, a, i, i1
#
           REQUEST Vxaii(mu,a,i,i1) i1
           REQUEST Vixai(i,mu,a,i1) i1
#
           DO a1
#
              Taaii(a1,a,i,i1)          = Vxaii(mu,a,i,i1)*ca(mu,a1)
              PREPARE Vaaii(a1,a,i,i1) += Taaii(a1,a,i,i1)
#
           ENDDO a1
#
           DO a1
#
              Tiaai(i,a1,a,i1)          = Vixai(i,mu,a,i1)*ca(mu,a1)
              PREPARE Viaai(i,a1,a,i1) += Tiaai(i,a1,a,i1)
#
           ENDDO a1
#
     ENDPARDO mu, a, i, i1
#
         pardo mu, a, a1, i
             request Vxaai(mu,a,a1,i) i
             do a2
                 Taaai(a2,a,a1,i) = Vxaai(mu,a,a1,i)*Ca(mu,a2)
                 prepare Vaaai(a2,a,a1,i) += Taaai(a2,a,a1,i)
             enddo a2
         endpardo mu, a, a1, i

         execute server_barrier
         pardo a,a1,a2,i
             request Vaaai(a,a1,a2,i) i
             request Vaaai(a2,a1,a,i) i
             Taaai(a,a1,a2,i)  = Vaaai(a,a1,a2,i)
             T1aaai(a,a1,a2,i) = Vaaai(a2,a1,a,i)
             Taaai(a,a1,a2,i) -= T1aaai(a,a1,a2,i)
             prepare VSaaai(a,a1,a2,i) = Taaai(a,a1,a2,i)
         endpardo a,a1,a2,i
         execute server_barrier
#
#    ------------------------------------------------------------------------
#
     ENDPROC TRAN_TRAN4
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
     PROC TRAN_UHF
#
#        CALL COMP_INTEGRALS # --> compute integrals and put into served array
         CALL TRAN_TRAN2     # --> performs the first two stages of the
                             #     two-electron integral transformation.
         CALL TRAN_TRAN3     # --> performs the third stage
                             #     two-electron integral transformation.
         CALL TRAN_TRAN4     # --> performs the fourth stage of the
                             #     two-electron integral transformation.
#
     ENDPROC TRAN_UHF
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------ 
#
     PROC IGUESS_UHF  
# 
#    ------------------------------------------------------------------------ 
#
     PARDO a, b, i, j 
#
           REQUEST                     Vpiqj(a,i,b,j) j  
           REQUEST                     Vpiqj(b,j,a,i) j  
           Taibj(a,i,b,j)            = Vpiqj(b,j,a,i)
           Taibj(a,i,b,j)           += Vpiqj(a,i,b,j)
           execute energy_denominator  Taibj 
           Taibj(a,i,b,j)           *= 0.5  
           PREPARE T2old_ab(a,i,b,j) = Taibj(a,i,b,j)  
#
     ENDPARDO a, b, i, j 
#
#    ------------------------------------------------------------------------ 
# 
     ENDPROC IGUESS_UHF 
# 
#    ------------------------------------------------------------------------ 
#
     PROC ENERGY_NEW 
# 
#    ------------------------------------------------------------------------ 
#
     ecorrab = 0.0 
     esumab  = 0.0 
     execute sip_barrier 
     PARDO a, b, i, j 
#
           REQUEST Vpiqj(a,i,b,j) j  
           REQUEST Vpiqj(a,j,b,i) j  
#
           REQUEST T2old_ab(a,i,b,j) j  
#
           T1aibj(a,i,b,j) = Vpiqj(a,i,b,j)  
           T2aibj(a,i,b,j) = Vpiqj(a,j,b,i)  
           T1aibj(a,i,b,j)*= 2.0  
           T1aibj(a,i,b,j)-= T2aibj(a,i,b,j)  
#
           etemp = T2old_ab(a,i,b,j)*T1aibj(a,i,b,j) 
           esumab += etemp 
#
     ENDPARDO a, b, i, j 

     execute sip_barrier 
#
     collective ecorrab += esumab
     execute print_scalar ecorrab 
     execute sip_barrier 
#
     ecorrT = ecorrab 

      do kiter
      do kptr1
         etemp = 0.0
         pinf(kiter,kptr1)  = etemp
      enddo kptr1
      enddo kiter

        do jiter
           ncount2 = 0.0
         DO kptr1
            ncount2 += 1.0
            if ncount2 == two
               etemp              = ecorrT
               etemp             += scfeneg
               tpinf(jiter,kptr1) = etemp
               pinf(jiter,kptr1)  = tpinf(jiter,kptr1)
            endif
         ENDDO kptr1
        enddo jiter

        do jiter
           ncount2 = 0.0
         DO kptr1
            ncount2 += 1.0
            if ncount2 == one
               tpinf(jiter,kptr1) = ecorrT
               pinf(jiter,kptr1)  = tpinf(jiter,kptr1)
            endif
         ENDDO kptr1
        enddo jiter
         etemp = 6
         execute print_rel_info etemp pinf
# 
#    ------------------------------------------------------------------------ 
# 
     ENDPROC ENERGY_NEW 
#
     proc Caibj
#
     execute server_barrier
     pardo a,i,b,j
         Taiai(a,i,b,j) = 0.0
         prepare Ctau(a,i,b,j)  = Taiai(a,i,b,j)
         prepare CT_ab(a,i,b,j) = Taiai(a,i,b,j)
     endpardo a,i,b,j
     execute server_barrier
     pardo a,i,b,j
         Taiai(a,i,b,j) = 0.0
         do i1
             request Vpiqj(i1,i,b,j) j
             request cai(a,i1) a
             T1aiai(a,i,b,j) = Vpiqj(i1,i,b,j)*cai(a,i1)
             Taiai(a,i,b,j) += T1aiai(a,i,b,j)
         enddo i1
         Taiai(a,i,b,j) *= -1.0
         prepare Ctau(a,i,b,j) += Taiai(a,i,b,j)
     endpardo a,i,b,j
     pardo a,i,b,j
         Taiai(a,i,b,j) = 0.0
         do a1
             request Vaaai(a,a1,b,j) j
             request cai(a1,i) i
             T1aiai(a,i,b,j) = Vaaai(a,a1,b,j)*cai(a1,i)
             Taiai(a,i,b,j) += T1aiai(a,i,b,j)
         enddo a1
         prepare Ctau(a,i,b,j) += Taiai(a,i,b,j)
     endpardo a,i,b,j
     execute server_barrier
     pardo a,i,b,j
         request Ctau(a,i,b,j) j
         request Ctau(b,j,a,i) i
         Taiai(a,i,b,j)  = Ctau(a,i,b,j)
         T1aiai(a,i,b,j) = Ctau(b,j,a,i)
         Taiai(a,i,b,j) += T1aiai(a,i,b,j)
         prepare CT_ab(a,i,b,j) = Taiai(a,i,b,j)
     endpardo a,i,b,j
     execute server_barrier
     esum = 0.0
     ecorr2 = 0.0
     execute server_barrier
     pardo a,i,b,j
         request CT_ab(a,i,b,j) j
         T1aiai(a,i,b,j) = CT_ab(a,i,b,j)
         T2aiai(a,i,b,j) = CT_ab(a,i,b,j)
         etemp = T1aiai(a,i,b,j)*T2aiai(a,i,b,j)
         esum += etemp
     endpardo a,i,b,j
     execute server_barrier
     collective ecorr2 += esum
     execute sip_barrier
     execute print_scalar ecorr2
     execute server_barrier
#
     endproc Caibj
#
#
     proc hbar_ab
     pardo a,i,b,j
#
         Tpp(a,b) = 0.0
         do a1
             request VSpiqj(b,i,a1,j) j
             request T2old_aa(a,i,a1,j) j
             T1pp(a,b) = VSpiqj(b,i,a1,j)*T2old_aa(a,i,a1,j)
             Tpp(a,b) += T1pp(a,b)
         enddo a1
         Tpp(a,b) *= -0.5
         prepare Faa(a,b) += Tpp(a,b)
#
     endpardo a,i,b,j
     pardo a,i,b,j
#
         Tpp(a,b) = 0.0
         do a1
             request Vpiqj(b,i,a1,j) j
             request T2old_ab(a,i,a1,j) j
             T1pp(a,b) = Vpiqj(b,i,a1,j)*T2old_ab(a,i,a1,j)
             Tpp(a,b) += T1pp(a,b)
         enddo a1
         Tpp(a,b) *= -1.0
         prepare Faa(a,b) += Tpp(a,b)
#
     endpardo a,i,b,j
#
     endproc hbar_ab
#
     proc hbar_ij
#
     pardo a,i,b,j
#
         Tpp(i,j) = 0.0
         do i1
             request VSpiqj(a,j,b,i1) i1
             request T2old_aa(a,i,b,i1) i1
             T1pp(i,j) = VSpiqj(a,j,b,i1)*T2old_aa(a,i,b,i1)
             Tpp(i,j) += T1pp(i,j)
         enddo i1
         Tpp(i,j) *= -0.5
         prepare Fii(i,j) += Tpp(i,j)
#
     endpardo a,i,b,j
     pardo a,i,b,j
#
         Tpp(i,j) = 0.0
         do i1
             request Vpiqj(a,j,b,i1) i1
             request T2old_ab(a,i,b,i1) i1
             T1pp(i,j) = Vpiqj(a,j,b,i1)*T2old_ab(a,i,b,i1)
             Tpp(i,j) += T1pp(i,j)
         enddo i1
         Tpp(i,j) *= -1.0
         prepare Fii(i,j) += Tpp(i,j)
#
     endpardo a,i,b,j
#
     endproc hbar_ij
#
     proc hbar_ai
#
#
     pardo a,i
#
         do a1
         do i1
         request VSpiqj(a,i,a1,i1) i1
         request Vpiqj(a,i,a1,i1) i1
         request cai(a1,i1) i1
         T1pp(a,i) = VSpiqj(a,i,a1,i1)*cai(a1,i1)
         T2pp(a,i) = Vpiqj(a,i,a1,i1)*cai(a1,i1)
         T1pp(a,i)+= T2pp(a,i)
#
         put LSFai(a,i) += T1pp(a,i)

         enddo i1
         enddo a1
#
     endpardo a,i
     execute server_barrier
     pardo a,i,a1,i1
#
         request T2old_aa(a,i,a1,i1) i1
         get LSFai(a1,i1)
#
         Tpp(a,i) = T2old_aa(a,i,a1,i1)*LSFai(a1,i1)
#
         prepare Fai(a,i) += Tpp(a,i)
#
     endpardo a,i,a1,i1
     pardo a,i,a1,i1
#
         request T2old_ab(a,i,a1,i1) i1
         get LSFai(a1,i1)
#
         Tpp(a,i) = T2old_ab(a,i,a1,i1)*LSFai(a1,i1)
#
         prepare Fai(a,i) += Tpp(a,i)
#
     endpardo a,i,a1,i1
     execute server_barrier
#
     endproc hbar_ai
#
     proc hbar_prep
         execute server_barrier
         pardo a,i,b,j
             request T2old_ab(a,i,b,j) j
             request T2old_ab(a,j,b,i) i
             Taibj(a,i,b,j)  = T2old_ab(a,i,b,j)
             T1aibj(a,i,b,j) = T2old_ab(a,j,b,i)
             Taibj(a,i,b,j) -= T1aibj(a,i,b,j)
             prepare T2old_aa(a,i,b,j) = Taibj(a,i,b,j)
         endpardo a,i,b,j
         pardo a,b
             Tpp(a,b) = 0.0
             prepare Faa(a,b) = Tpp(a,b)
         endpardo a,b
         pardo i,j
             Tpp(i,j) = 0.0
             prepare Fii(i,j) = Tpp(i,j)
         endpardo i,j
         pardo a,i
             Tpp(a,i) = 0.0
             put LSFai(a,i) = Tpp(a,i)
             prepare Fai(a,i) = Tpp(a,i)
         endpardo a,i
         execute server_barrier
     endproc hbar_prep
#
     proc make_hbar
#
     call hbar_prep
     call hbar_ab
     call hbar_ij
     call hbar_ai
     execute server_barrier
#
     endproc make_hbar
#
     proc cisd_energy
#
     execute server_barrier
     esum2 = 0.0
     esum3 = 0.0
     ecorr2 = 0.0
     edoubles = 0.0
     etriples = 0.0
     ecisd = 0.0
     execute server_barrier
     pardo a,i,b,j
#
         REQUEST CT_ab(a,i,b,j) j  
         REQUEST CT_ab(b,i,a,j) j  
         Taibj(a,i,b,j)  = CT_ab(a,i,b,j)
         T1aibj(a,i,b,j) = CT_ab(b,i,a,j)
         Taibj(a,i,b,j) *= 2.0
         Taibj(a,i,b,j) -= T1aibj(a,i,b,j)
#
         execute energy_ty_denominator Taibj shift
         etemp  = Taibj(a,i,b,j)*CT_ab(a,i,b,j)
         etemp *= 0.5
         esum2 += etemp
#
     endpardo a,i,b,j
#
     pardo a,i
         request cai(a,i) i
         request Fai(a,i) i
         Tpp(a,i) = Fai(a,i)
#
         do b
             request Faa(a,b) a
             request cai(b,i) i
             T1pp(a,i) = Faa(a,b)*cai(b,i)
             Tpp(a,i) += T1pp(a,i)
         enddo b
#
         do j
             request Fii(i,j) i
             request cai(a,j) a
             T1pp(a,i) = Fii(i,j)*cai(a,j)
             Tpp(a,i) += T1pp(a,i)
         enddo j
#
         etemp = cai(a,i)*tpp(a,i)
         esum3+= etemp
#
     endpardo a,i
     execute server_barrier
#
     collective edoubles += esum2
     collective etriples += esum3
     execute server_barrier
     ecisd = edoubles
     ecisd+= etriples
     execute print_scalar edoubles
     execute print_scalar etriples
     execute print_scalar ecisd
#
#     if kstate > 0
     execute server_barrier
     ncount2 = 0.0
     do kptr1
         ncount2 += 1.0
         if ncount2 == one
             etemp = ecisd
             ctpinf(kstate,kptr1) = etemp
             cpinf(kstate,kptr1)  = ctpinf(kstate,kptr1)
         endif
     enddo kptr1
     ncount2 = 0.0
     do kptr1
         ncount2 += 1.0
         if ncount2 == two
             etemp  = eomegacis
             etemp += ecisd
             ctpinf(kstate,kptr1) = etemp
             cpinf(kstate,kptr1)  = ctpinf(kstate,kptr1)
         endif
     enddo kptr1
     etemp = 35
     execute print_rel_info etemp cpinf
#     endif
#
     endproc cisd_energy
#
#    ------------------------------------------------------------------------ 
# 
#    -------------
#
#    proc do_checkpoint

#    execute checkpoint t2old_ab
#    execute checkpoint t1a_old
#    execute checkpoint E1aibj
#    execute checkpoint E2aibj
#    execute checkpoint E3aibj
#    execute checkpoint E4aibj
#    execute checkpoint E5aibj
#    execute checkpoint E1ai
#    execute checkpoint E2ai
#    execute checkpoint E3ai
#    execute checkpoint E4ai
#    execute checkpoint E5ai
#    execute checkpoint D0aibj
#    execute checkpoint D1aibj
#    execute checkpoint D2aibj
#    execute checkpoint D3aibj
#    execute checkpoint D4aibj
#    execute checkpoint D0ai
#    execute checkpoint D1ai
#    execute checkpoint D2ai
#    execute checkpoint D3ai
#    execute checkpoint D4ai
#    execute commit_checkpoint

#    execute get_restart_status restart
#    if restart == 1.0
#       CALL READ_2EL   # Restore data saved as BLOCKDATA 
#    endif

#    endproc do_checkpoint

# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
# 
# BEGIN MAIN PROGRAM 
# ------------------ 
#
      ecrit = cc_conv  
      one = 1.0
      two = 2.0
      toev = 27.2113961
      fev = 0.0367493089
#
     execute print_scalar eom_roots
     execute print_scalar eom_tol
     maxstate = eom_roots
#
     create LSFai
#
# read in CIS data
      call read_data
# perform integral transformation
      EXECUTE SERVER_BARRIER  
      CALL TRAN_UHF 
      EXECUTE SERVER_BARRIER  
      CALL IGUESS_UHF
      EXECUTE SERVER_BARRIER  
      CALL ENERGY_NEW 
      EXECUTE SERVER_BARRIER  
#
      iroot = 1.0
#
      do kstate
      if iroot <= maxstate
#
      call putvec
      call Caibj
      call make_hbar
      execute server_barrier
      call cisd_energy
      execute server_barrier
      iroot += 1.0
#
      endif
      enddo kstate
#
      execute server_barrier
      execute blocks_to_list VSTART1A1
      execute blocks_to_list VSTART1B1
      execute blocks_to_list VSTART1A2
      execute blocks_to_list VSTART1B2
      execute blocks_to_list VSTART1A3
      execute blocks_to_list VSTART1B3
      execute blocks_to_list VSTART1A4
      execute blocks_to_list VSTART1B4
      execute blocks_to_list VSTART1A5
      execute blocks_to_list VSTART1B5
      execute blocks_to_list VSTART1A6
      execute blocks_to_list VSTART1B6
      execute blocks_to_list VSTART1A7
      execute blocks_to_list VSTART1B7
      execute blocks_to_list VSTART1A8
      execute blocks_to_list VSTART1B8
      execute blocks_to_list VSTART1A9
      execute blocks_to_list VSTART1B9
      execute blocks_to_list VSTART1A10
      execute blocks_to_list VSTART1B10
      execute blocks_to_list VSTART1A11
      execute blocks_to_list VSTART1B11
      execute blocks_to_list VSTART1A12
      execute blocks_to_list VSTART1B12
      execute blocks_to_list omegacis
      execute server_barrier
      execute write_blocks_to_list
      execute server_barrier
                           ENDSIAL CCSD_RHF_SV1    
#
