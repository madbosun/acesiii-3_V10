#----------------------------------------------------------------------------------------|
# The purpose of this part is to  generate necessary set of F12-related 3-electron and   |
# 4-electron integrals. Then store corresponding intermediates on the  disc              |
#     Added to ACES3 by Denis Bokhan, Moscow Lomonosov State University,                 |
#                               Russian  Federation                                      |
#----------------------------------------------------------------------------------------|

                           SIAL F12_MULTIINT

# -------------- Definition of the indices--------------------
      aoindex mu     = 1, norb
      aoindex nu     = 1, norb
      moaindex    i  = baocc, eaocc
      moaindex    j  = baocc, eaocc
      moaindex    k  = baocc, eaocc
      moaindex    l  = baocc, eaocc
      moaindex    m  = baocc, eaocc
      moaindex   i1  = baocc, eaocc
      moaindex   i2  = baocc, eaocc
      moaindex   i3  = baocc, eaocc
      moaindex    p  = baocc, eavirt
      moaindex    q  = baocc, eavirt
      moaindex   p1  = baocc, eavirt
      moaindex   p2  = baocc, eavirt
      moaindex   a   = bavirt, eavirt
      moaindex   a1  = bavirt, eavirt
      moaindex   a2  = bavirt, eavirt
      moaindex   a3  = bavirt, eavirt
         index   g   =1, 1000000
         index k4=1,4  
# ---- Definition of the arrays---------------------

#---------Output arrays-----------------------------
       served V_ijkl(i,i1,i2,i3)
       served V_ijka(i1,i2,i,a1)
       served V_ijab(i,a,i1,a1)
       served X12(p,i,p1,i1)
       served KF12(p,i,p1,i1) 
       served K1F12(i,i2,p,i1)
       served KFF12(i1,i2,i3,i)       
       served F12F23(p,i1,i2,i3)
       served KIN3e(i,i1,i2,i3)
       served LAM1(i,a)
       served LAM21(a,i1,a1,i2)
       served LAM22(a,i1,a1,i2)
       served LAM23(a,i1,a1,i2)
       served LAM24(a,i1,a1,i2)
       served T1INT1(a,p)
       served T1INT2(a,i,a1,i1)
       served T2INT2(a,i,p,i1)
       served T2INT21(p,i,a,i1)
       served T2INT3(a,i,p,i1)
       served T2INT31(a,i,p,i1) 
       
#---------Two-electron integrals----------------
      served V0iiii(i,j,k,l)
      served V0aiai(a2,i1,a1,i)
      served V0aaii(a1,a2,i1,i)
      served V0aiii(a1,i1,i2,i)
      served V0piii(p1,i1,i2,i)
      served V0aaai(a1,a2,a3,i)

      served V1aiai(a,i,a1,i1)
      served V1iiii(i,i1,i2,i3)
      served V1aiii(a1,i1,i2,i)

      served V2pipi(p2,i,p1,i1)
      served V2piai(p2,i,a1,i1)
      served V2piii(p1,i,i1,i2)
      served V2iiii(i,i1,i2,i3)
      served V2aiai(a2,i1,a1,i)
      served V2aaii(a1,a2,i1,i)
      served V2aiii(a1,i1,i2,i)
      served V2aaai(a1,a2,a3,i)

      served V3iiii(i,i1,i2,i3)

      served V4aiai(a1,i,a2,i1)
      served V4iiii(i,i1,i2,i3)
#----------------------------------------------


#---------Temporal arrays-----------------------
       temp tV_ijkl(i,i1,i2,i3)
       temp t1V_ijkl(i,i1,i2,i3)
       temp tV_ijka(i1,i2,i,a1)
       temp tV_ijab(i,a,i1,a1)
       temp tX12(p,i,p1,i1)
       temp t1X12(p,i,p1,i1)
       temp tKF12(p,i,p1,i1)
       temp tK1F12(i,i2,p,i1)
       temp tKFF12(i1,i2,i3,i)
       temp t1KFF12(i1,i2,i3,i)
       temp tF12F23(p,i1,i2,i3)
       temp tKIN3e(i,i1,i2,i3)
       temp t1KIN3e(i,i1,i2,i3)
       temp tLAM1(i,a)
       temp tLAM21(a,i1,a1,i2)
       temp tLAM22(a,i1,a1,i2)
       temp tLAM23(a,i1,a1,i2)
       temp tLAM24(a,i1,a1,i2)
       temp tT1INT1(a,p)
       temp tT1INT2(a,i,a1,i1)
       temp tT2INT2(a,i,p,i1)
       temp tT2INT21(p,i,a,i1)
       temp tT2INT3(a,i,p,i1)
       temp tT2INT31(a,i,p,i1)
       temp tmoval(p)
       temp tmoval1(p)         
       temp tmoover(p,p1)
       temp tmpint1(p,p1)
       temp tmpint2(p,p1)  
       temp tmp3center(mu,nu)
       temp tmp3grad(mu,nu) 
       temp tmp3center_imu(mu,i)
       temp tmp3center_pi(p,i)
       temp texch_p(p) 
       temp texch1_p(p) 
#--------Local arrays------------------------------
       local MOVAL(p)  
       local MOVALX(p)
       local MOVALY(p)
       local MOVALZ(p)

       local MOOVER(p,p1)
       local MOOVERX(p,p1)
       local MOOVERY(p,p1)
       local MOOVERZ(p,p1)
       
       local l3center_imu(mu,i)
       local inv_r12_ip(p,i)
       local slater_ip(p,i)
       local slater_sq_ip(p,i)
       local slater_xder_ip(p,i)
       local slater_yder_ip(p,i)
       local slater_zder_ip(p,i)
       local grad_slater_grad_ip(p,i)
       local Exch_p(p)
       local overint1(p,q)
       local overint2(i,p)
       local overint3(i,i1)
       local overint4(p,i)   
       local lX12(p,i,q,j)
       local lKF12(p,i,q,j)
       local lKFF12(i,i1,i2,i3)
       local lKIN3e(i,i1,i2,i3)
#--------Scalar variables----------------------------

       scalar PTW
       scalar Ng
       scalar cnt
       scalar ind
       scalar int1_type
#--------------------------------------------------------------------------------------

      execute list_to_blocks                V0iiii
      execute list_to_blocks                V0aiai
      execute list_to_blocks                V0aaii
      execute list_to_blocks                V0aiii
      execute list_to_blocks                V0piii
      execute list_to_blocks                V0aaai

      execute list_to_blocks                V1iiii
      execute list_to_blocks                V1aiii
      execute list_to_blocks                V1aiai

      execute list_to_blocks                V2iiii
      execute list_to_blocks                V2aiai
      execute list_to_blocks                V2aaii
      execute list_to_blocks                V2aiii
      execute list_to_blocks                V2aaai
      execute list_to_blocks                V2pipi
      execute list_to_blocks                V2piii
      execute list_to_blocks                V2piai

      execute list_to_blocks                V3iiii

      execute list_to_blocks                V4iiii
      execute list_to_blocks                V4aiai

#---Here we read arrays of integrals from the disk---
      execute read_list_to_blocks
#----------------------------------------------------




#--------------------------------------------------------------------------------------

#-----------Step 1 - definition of the number of grid points--------------------------
            Ng = 0.0
            cnt = 0.0
            execute get_grid_size Ng
#---------Loop over the grid points---------------------------------------------------
            DO g 
            cnt += 1.0
#--------Check if g is exceeded the number of grid points------
            IF cnt > Ng
            EXIT 
            ENDIF
#----------Define to which worker belongs current point g--------------------------------
            execute grid_point_range cnt ind
#-----If g belongs to current worker - then do calculation-------------------------------           
                              IF ind == 1.0 
#----------Get the weight of current point g---------------------------------------------
            execute grid_point_weight cnt PTW

#========================================================================================
#========================================================================================
#----Generation of values of molecular orbitals and its derivatibeson the grid-----------
                              allocate MOVAL(*)
                              allocate MOVALX(*)
                              allocate MOVALY(*)
                              allocate MOVALZ(*) 

                               DO p
#-----------------------------Molecular orbitals---------------------------------------   
                                MOVAL(p) = 0.0
                                tmoval(p) = 0.0 
                                execute F12_2center_moobj tmoval cnt                   
                                MOVAL(p) = tmoval(p) 
#-----------------------------Molecular orbitals - X-derivative-----------------------                               
                               MOVALX(p) = 0.0
                               tmoval(p) = 0.0
                               execute F12_2center_mxobj tmoval cnt                 
                               MOVALX(p) = tmoval(p)
#-----------------------------Molecular orbitals - Y-derivative-----------------------
                               MOVALY(p) = 0.0
                               tmoval(p) = 0.0
                               execute F12_2center_myobj tmoval cnt 
                               MOVALY(p) = tmoval(p)
#-----------------------------Molecular orbitals - Z-derivative-----------------------
                               MOVALZ(p) = 0.0
                               tmoval(p) = 0.0
                               execute F12_2center_mzobj tmoval cnt 
                               MOVALZ(p) = tmoval(p)

                               ENDDO p 
#=====================================================================================
#=====================================================================================

                               allocate MOOVER(*,*)
                               allocate MOOVERX(*,*)
                               allocate MOOVERY(*,*)
                               allocate MOOVERZ(*,*)
#------------Preparation of MO overlap arrays-----------------------------------------
                               DO p
                                DO p1
                                 tmoval(p) = MOVAL(p)
                                 tmoval1(p1) =  MOVAL(p1) 
                                 tmoover(p,p1) = tmoval(p)^tmoval1(p1)
                                 tmoover(p,p1) *= PTW
                                 MOOVER(p,p1) = tmoover(p,p1)  
                                ENDDO p1
                               ENDDO p
#-----------------------------------------------------------------------------------
                               DO p
                                DO p1
                                 tmoval(p) = MOVAL(p)
                                 tmoval1(p1) =  MOVALX(p1)
                                 tmoover(p,p1) = tmoval(p)^tmoval1(p1)
                                 tmoover(p,p1) *= PTW
                                 MOOVERX(p,p1) = tmoover(p,p1)
                                ENDDO p1
                               ENDDO p
#-----------------------------------------------------------------------------------
                               DO p
                                DO p1
                                 tmoval(p) = MOVAL(p)
                                 tmoval1(p1) =  MOVALY(p1)
                                 tmoover(p,p1) = tmoval(p)^tmoval1(p1)
                                 tmoover(p,p1) *= PTW
                                 MOOVERY(p,p1) = tmoover(p,p1)
                                ENDDO p1
                               ENDDO p
#-----------------------------------------------------------------------------------
                               DO p
                                DO p1
                                 tmoval(p) = MOVAL(p)
                                 tmoval1(p1) =  MOVALZ(p1)
                                 tmoover(p,p1) = tmoval(p)^tmoval1(p1)
                                 tmoover(p,p1) *= PTW
                                 MOOVERZ(p,p1) = tmoover(p,p1)
                                ENDDO p1
                               ENDDO p
                               
#=====================================================================================
#=====================================================================================
#     Generation of 3-center objects, which are necessary for the calculation        |
#                   of three and four-electron integrals                             |
#=====================================================================================


#-----------Allocate arrays for 3-center objects--------------------------------------
                               allocate inv_r12_ip(*,*)
                               allocate slater_ip(*,*) 
                               allocate slater_sq_ip(*,*)
                               allocate slater_xder_ip(*,*)
                               allocate slater_yder_ip(*,*)
                               allocate slater_zder_ip(*,*)
                               allocate grad_slater_grad_ip(*,*)

#---------------Calculation of 1/r_{1g} integrals----------------------------------------

                       int1_type = 1.0
                       execute int1_setup cnt int1_type   

                               DO mu
                                 allocate l3center_imu(mu,*)  
                                DO nu
                                          tmp3center(mu,nu) = 0.0 
                                          execute f12_1el_gen tmp3center(mu,nu)
                                   DO i
                                   tmp3center_imu(mu,i) = tmp3center(mu,nu)*ca(nu,i)
                                   l3center_imu(mu,i) += tmp3center_imu(mu,i)
                                   ENDDO i 
                                                                
                                ENDDO nu

                                   DO i
                                   DO p 
                                   tmp3center_pi(p,i) = l3center_imu(mu,i)*ca(mu,p)
                                   inv_r12_ip(p,i) += tmp3center_pi(p,i)
                                   ENDDO p
                                   ENDDO i  

                                   deallocate l3center_imu(mu,*)
                               ENDDO mu

#---------------Calculation of f_{1g} integrals------------------------------------------

                       int1_type = 2.0
                       execute int1_setup cnt int1_type


                               DO mu
                                 allocate l3center_imu(mu,*)
                                DO nu
                                          tmp3center(mu,nu) = 0.0
                                          execute f12_1el_gen tmp3center(mu,nu)
                                   DO i
                                   tmp3center_imu(mu,i) = tmp3center(mu,nu)*ca(nu,i)
                                   l3center_imu(mu,i) += tmp3center_imu(mu,i)
                                   ENDDO i

                                ENDDO nu

                                   DO i
                                   DO p
                                   tmp3center_pi(p,i) = l3center_imu(mu,i)*ca(mu,p)
                                   slater_ip(p,i) += tmp3center_pi(p,i)
                                   ENDDO p
                                   ENDDO i

                                   deallocate l3center_imu(mu,*)
                               ENDDO mu


#---------------Calculation of f_{1g}^2 integrals----------------------------------------

                       int1_type = 3.0
                       execute int1_setup cnt int1_type

                               DO mu
                                 allocate l3center_imu(mu,*)
                                DO nu
                                          tmp3center(mu,nu) = 0.0
                                          execute f12_1el_gen tmp3center(mu,nu)
                                   DO i
                                   tmp3center_imu(mu,i) = tmp3center(mu,nu)*ca(nu,i)
                                   l3center_imu(mu,i) += tmp3center_imu(mu,i)
                                   ENDDO i

                                ENDDO nu

                                   DO i
                                   DO p
                                   tmp3center_pi(p,i) = l3center_imu(mu,i)*ca(mu,p)
                                   slater_sq_ip(p,i) += tmp3center_pi(p,i)
                                   ENDDO p
                                   ENDDO i

                                   deallocate l3center_imu(mu,*)
                               ENDDO mu


#---------------Calculation of d f_{1g} / dx integrals-----------------------------------

                       int1_type = 4.0
                       execute int1_setup cnt int1_type


                               DO mu
                                 allocate l3center_imu(mu,*)
                                DO nu
                                          tmp3center(mu,nu) = 0.0
                                          execute f12_1el_gen tmp3center(mu,nu)
                                   DO i
                                   tmp3center_imu(mu,i) = tmp3center(mu,nu)*ca(nu,i)
                                   l3center_imu(mu,i) += tmp3center_imu(mu,i)
                                   ENDDO i

                                ENDDO nu

                                   DO i
                                   DO p
                                   tmp3center_pi(p,i) = l3center_imu(mu,i)*ca(mu,p)
                                   slater_xder_ip(p,i) += tmp3center_pi(p,i)
                                   ENDDO p
                                   ENDDO i

                                   deallocate l3center_imu(mu,*)
                               ENDDO mu


#---------------Calculation of d f_{1g} / dy integrals-----------------------------------

                       int1_type = 5.0
                       execute int1_setup cnt int1_type


                               DO mu
                                 allocate l3center_imu(mu,*)
                                DO nu
                                          tmp3center(mu,nu) = 0.0
                                          execute f12_1el_gen tmp3center(mu,nu)
                                   DO i
                                   tmp3center_imu(mu,i) = tmp3center(mu,nu)*ca(nu,i)
                                   l3center_imu(mu,i) += tmp3center_imu(mu,i)
                                   ENDDO i

                                ENDDO nu

                                   DO i
                                   DO p
                                   tmp3center_pi(p,i) = l3center_imu(mu,i)*ca(mu,p)
                                   slater_yder_ip(p,i) += tmp3center_pi(p,i)
                                   ENDDO p
                                   ENDDO i

                                   deallocate l3center_imu(mu,*)
                               ENDDO mu


#---------------Calculation of d f_{1g} / dz integrals-----------------------------------

                       int1_type = 6.0
                       execute int1_setup cnt int1_type


                               DO mu
                                 allocate l3center_imu(mu,*)
                                DO nu
                                          tmp3center(mu,nu) = 0.0
                                          execute f12_1el_gen tmp3center(mu,nu)
                                   DO i
                                   tmp3center_imu(mu,i) = tmp3center(mu,nu)*ca(nu,i)
                                   l3center_imu(mu,i) += tmp3center_imu(mu,i)
                                   ENDDO i

                                ENDDO nu

                                   DO i
                                   DO p
                                   tmp3center_pi(p,i) = l3center_imu(mu,i)*ca(mu,p)
                                   slater_zder_ip(p,i) += tmp3center_pi(p,i)
                                   ENDDO p
                                   ENDDO i

                                   deallocate l3center_imu(mu,*)
                               ENDDO mu

#---------------Calculation of <chi_{i}|grad f_{1g}|grad chi_{j}> integrals--------------

                               DO mu
                                 allocate l3center_imu(mu,*)
                                DO nu
                                          
                                          tmp3grad(mu,nu) = 0.0

#---------------------X-derivatives---------------------------------------
                       int1_type = 7.0
                       execute int1_setup cnt int1_type

                                tmp3center(mu,nu) = 0.0
                                execute f12_1el_gen tmp3center(mu,nu)
                                tmp3grad(mu,nu) += tmp3center(mu,nu)


#---------------------Y-derivatives---------------------------------------                               
                       int1_type = 8.0
                       execute int1_setup cnt int1_type

                                tmp3center(mu,nu) = 0.0
                                execute f12_1el_gen tmp3center(mu,nu)
                                tmp3grad(mu,nu) += tmp3center(mu,nu)

#---------------------Z-derivatives---------------------------------------
                       int1_type = 9.0
                       execute int1_setup cnt int1_type

                                tmp3center(mu,nu) = 0.0
                                execute f12_1el_gen tmp3center(mu,nu)
                                tmp3grad(mu,nu) += tmp3center(mu,nu)                             
                                
#------------------------------------------------------------------------

                                   DO i
                                   tmp3center_imu(mu,i) = tmp3grad(mu,nu)*ca(nu,i)
                                   l3center_imu(mu,i) += tmp3center_imu(mu,i)
                                   ENDDO i
                              
                                ENDDO nu

                                   DO i
                                   DO p
                                   tmp3center_pi(p,i) = l3center_imu(mu,i)*ca(mu,p)
                                   grad_slater_grad_ip(p,i) += tmp3center_pi(p,i)
                                   ENDDO p
                                   ENDDO i

                                   deallocate l3center_imu(mu,*)
                               ENDDO mu



#-------------Preparation of the exchange operator-----------------------------------------
                               allocate Exch_p(*)

                               DO p
                                    texch_p(p) = 0.0
                                    texch1_p(p) = 0.0
                                    Exch_p(p) = 0.0 
                                    DO m
                                      tmoval(m) = 0.0
                                      tmoval(m) = MOVAL(m)
                                      tmoover(p,m) = 0.0
                                      tmoover(p,m) = inv_r12_ip(p,m)  
                                    texch1_p(p) = tmoover(p,m)*tmoval(m)
                                    texch_p(p) += texch1_p(p)
                                    ENDDO m
                                    Exch_p(p) = texch_p(p)
                               ENDDO p 
#---------------------------------------------------------------------------------------
#  Commutator of non-local exchange and Slater geminal X12 = <pq|[K1+K2,f12]|ij>        |
#              also  KF12 = <ij|(K1+K2)*f12|pq> and K1F12 = <ij|K1*f12|pm>              |
#---------------------------------------------------------------------------------------
                              allocate overint1(*,*)

                               DO i
                                DO p

                                texch_p(p) = 0.0
                                tmoover(i,p) = 0.0
                                tmoval(i) = 0.0 

                                tmoval(i) = MOVAL(i)
                                texch_p(p) = Exch_p(p)
                                
                                tmoover(i,p) = tmoval(i)^texch_p(p)
                                tmoover(i,p) *= PTW
                                overint1(i,p) = tmoover(i,p)
                                ENDDO p
                               ENDDO i


                              allocate overint2(*,*) 
#------------------------Second intermediate----------------------------------------------
                               DO i
                                DO p
                                tmoover(i,p) = 0.0
                                tmoover(i,p) = Exch_p(i)^MOVAL(p)
                                tmoover(i,p) *= PTW
                                overint2(i,p) = tmoover(i,p)
                                ENDDO p
                               ENDDO i
#-----------------------------------------------------------------------------------------
                               DO p
                                DO i 
                                 DO q
                                  DO j

                                   t1X12(p,i,q,j) = 0.0
                                   tKF12(p,i,q,j) = 0.0
#----------------------------------Test---------------------------------------------------
#
#                                   
#--------------------------------------------|                                    
                                  tX12(p,i,q,j) = 0.0
                                  tX12(p,i,q,j) = overint1(i,p)^slater_ip(q,j)
                                  tX12(p,i,q,j) *= -1.0
                                  t1X12(p,i,q,j) += tX12(p,i,q,j)

                                  tX12(p,i,q,j) = 0.0
                                  tX12(p,i,q,j) = overint1(j,q)^slater_ip(p,i)
                                  tX12(p,i,q,j) *= -1.0
                                  t1X12(p,i,q,j) += tX12(p,i,q,j)
#--------------------------------------------| 

                                  tX12(p,i,q,j) = 0.0
                                  tX12(p,i,q,j) = overint2(i,p)^slater_ip(q,j)
                                  t1X12(p,i,q,j) += tX12(p,i,q,j)
                                  tKF12(p,i,q,j)  += tX12(p,i,q,j)

                                  tX12(p,i,q,j) = 0.0
                                  tX12(p,i,q,j) = overint2(j,q)^slater_ip(p,i)
                                  t1X12(p,i,q,j) += tX12(p,i,q,j)
                                  tKF12(p,i,q,j)  += tX12(p,i,q,j)

                                  PREPARE X12(p,i,q,j) += t1X12(p,i,q,j)
                                  PREPARE KF12(p,i,q,j) += tKF12(p,i,q,j) 
#--------------------------------------------|

                                  ENDDO j
                                 ENDDO q
                                ENDDO i
                               ENDDO p
#-----------------------------------------------------------------------------------------
                                DO k
                                 DO i
                                  DO q
                                   DO j
                                   tK1F12(k,i,q,j) = 0.0
                                   tK1F12(k,i,q,j) = overint2(i,k)^slater_ip(q,j)
                                   tK1F12(k,i,q,j) *= -1.0 
                                   PREPARE K1F12(k,i,q,j) += tK1F12(k,i,q,j)
                                   ENDDO j
                                  ENDDO q
                                 ENDDO i
                                ENDDO k
#---------------------------------------------------------------------------------------
#                         KFF12 = <ij|(K1+K2)*f12^{2}|kl>                              |
#          and sum_{M,N} <ijMN| f_{14}*f_{34}/r_{24}|MNkl>                             |  
#---------------------------------------------------------------------------------------
                              allocate overint3(*,*)
                              DO i
                               DO j
                                tmoover(i,j) = 0.0
                                overint3(i,j) = 0.0
#
                                DO m

                                tmpint1(i,m) = 0.0
                                tmpint2(j,m) = 0.0
                                tmpint1(i,m) = slater_ip(i,m)
                                tmpint2(j,m) = slater_ip(j,m)
 
                                tmoover(i,j) = tmpint1(i,m)*tmpint2(j,m)
                                overint3(i,j) += tmoover(i,j)
                                ENDDO m

                               ENDDO j
                              ENDDO i
#---------------------------------------------------------------------------------------
                              DO i
                               DO k
                                DO j
                                 DO l
                                            t1KFF12(i,k,j,l) = 0.0
#------------------------------------------------------|                                             
                                 tKFF12(i,k,j,l) = 0.0
                                 tKFF12(i,k,j,l) = overint1(i,k)^slater_sq_ip(j,l) 
                                 tKFF12(i,k,j,l) *= -1.0
                                 t1KFF12(i,k,j,l) += tKFF12(i,k,j,l) 

                                 tKFF12(i,k,j,l) = 0.0
                                 tKFF12(i,k,j,l) = overint1(j,l)^slater_sq_ip(i,k)
                                 tKFF12(i,k,j,l) *= -1.0
                                 t1KFF12(i,k,j,l) += tKFF12(i,k,j,l)

#------------------------------------------------------|                                 
                                 tKFF12(i,k,j,l) = 0.0
                                 tKFF12(i,k,j,l) = overint3(i,k)^overint1(j,l)
                                 t1KFF12(i,k,j,l) += tKFF12(i,k,j,l)

                                 tKFF12(i,k,j,l) = 0.0
                                 tKFF12(i,k,j,l) = overint3(j,l)^overint1(i,k)
                                 t1KFF12(i,k,j,l) += tKFF12(i,k,j,l) 

                                 t1KFF12(i,k,j,l) *= -1.0 

                                 PREPARE KFF12(i,k,j,l) += t1KFF12(i,k,j,l)

                                 ENDDO l
                                ENDDO j
                               ENDDO k
                              ENDDO i
#----------------------------------------------------------------------------|
#                         sum_{N} <pjN|f12*f23|Nlk>                          |
#----------------------------------------------------------------------------|
                              allocate overint4(*,*)
                              DO p
                               DO j
                                tmoover(p,j) = 0.0 
                                overint4(p,j) = 0.0
                               
                                DO m
                                tmpint1(j,m) = 0.0
                                tmpint2(p,m) = 0.0
                                tmpint1(j,m) = slater_ip(j,m) 
                                tmpint2(p,m) = slater_ip(p,m) 
                                
                                tmoover(p,j) = tmpint1(j,m)*tmpint2(p,m)
                                overint4(p,j) += tmoover(p,j)

                                ENDDO m
                               ENDDO j
                              ENDDO p
#-----------------------------------------------------------------------------
                              DO p
                               DO k
                                DO j
                                 DO l
                                 tF12F23(p,k,j,l) = 0.0
                                 tF12F23(p,k,j,l) = overint4(p,k)^MOOVER(j,l)
                                 PREPARE F12F23(p,k,j,l) += tF12F23(p,k,j,l)
                                 ENDDO l
                                ENDDO j
                               ENDDO k
                              ENDDO p 


                              deallocate overint1(*,*)
                              deallocate overint2(*,*)
                              deallocate overint3(*,*)
                              deallocate overint4(*,*)
#---------------------------------------------------------------------------------------
#       Three - electron integrals for V_ijkl -intermediate                            |
#---------------------------------------------------------------------------------------
                              allocate overint1(*,*)
                              DO i
                               DO j
                                DO m
                                tmoover(i,j) = inv_r12_ip(i,m)*slater_ip(j,m)
                                overint1(i,j) += tmoover(i,j)                                 
                                ENDDO m
                               ENDDO j
                              ENDDO i
#---------------------------------------------------------------------------------------
                              DO i
                               DO k
                                DO j
                                 DO l

                                 tV_ijkl(i,k,j,l) = overint1(i,k)^MOOVER(j,l)
                                 t1V_ijkl(i,k,j,l) = overint1(j,l)^MOOVER(i,k)
                                 tV_ijkl(i,k,j,l) += t1V_ijkl(i,k,j,l)
                                 tV_ijkl(i,k,j,l) *= -1.0 
                                 PREPARE V_ijkl(i,k,j,l) += tV_ijkl(i,k,j,l) 
                                 ENDDO l
                                ENDDO j
                               ENDDO k
                              ENDDO i

                              deallocate overint1(*,*)

#-------------------------------------------------------------------------------|
# Three - electron integrals: kinetic energy contribution to B - intermediate:  |
#         sum_{M} ( <ijM|[T12,f12]f13|kMl> + <ijM|[T12,f12]f23|Mlk> )           |
#-------------------------------------------------------------------------------|
                              allocate overint1(*,*)
                              allocate overint2(*,*)
                              allocate overint3(*,*)
                              allocate overint4(*,*)

#--------------------------------------------------------------------------------
                              DO i
                               DO j
                                tmoover(i,j) = 0.0
                                overint1(i,j) = 0.0 
                                DO m
                                tmpint1(m,i) = 0.0
                                tmpint2(m,i) = 0.0
                                tmpint1(m,i) = grad_slater_grad_ip(m,i)
                                tmpint2(m,j) = slater_ip(m,j)

                                tmoover(i,j) =  tmpint1(m,i)*tmpint2(m,j)
                                overint1(i,j) += tmoover(i,j)

                                ENDDO m
                               ENDDO j
                              ENDDO i
#--------------------------------------------------------------------------------
                              DO i
                               DO j
                                tmoover(i,j) = 0.0
                                overint2(i,j) = 0.0
                                DO m
                                tmpint1(i,m) = 0.0
                                tmpint2(m,i) = 0.0
                                tmpint1(i,m) = slater_xder_ip(i,m)
                                tmpint2(m,j) = slater_ip(m,j)
                                tmoover(i,j) = tmpint1(i,m)*tmpint2(m,j)
                                overint2(i,j) += tmoover(i,j)
                                ENDDO m
                               ENDDO j
                              ENDDO i
#--------------------------------------------------------------------------------
                             DO i
                               DO j
                                tmoover(i,j) = 0.0
                                overint3(i,j) = 0.0
                                DO m
                                tmpint1(i,m) = 0.0
                                tmpint2(m,i) = 0.0
                                tmpint1(i,m) = slater_yder_ip(i,m)
                                tmpint2(m,j) = slater_ip(m,j)
                                tmoover(i,j) = tmpint1(i,m)*tmpint2(m,j)
                                overint3(i,j) += tmoover(i,j)
                                ENDDO m
                               ENDDO j
                              ENDDO i

#--------------------------------------------------------------------------------
                             DO i
                               DO j
                                tmoover(i,j) = 0.0
                                overint4(i,j) = 0.0
                                DO m
                                tmpint1(i,m) = 0.0
                                tmpint2(m,i) = 0.0
                                tmpint1(i,m) = slater_zder_ip(i,m)
                                tmpint2(m,j) = slater_ip(m,j)
                                tmoover(i,j) = tmpint1(i,m)*tmpint2(m,j)
                                overint4(i,j) += tmoover(i,j)
                                ENDDO m
                               ENDDO j
                              ENDDO i

#--------------------------------------------------------------------------------
                             DO i
                               DO k
                                DO j
                                 DO l
                                   t1KIN3e(i,k,j,l) = 0.0 

                                tKIN3e(i,k,j,l) = overint1(j,l)^MOOVER(i,k)
                                tKIN3e(i,k,j,l) *= -1.0
                                t1KIN3e(i,k,j,l) += tKIN3e(i,k,j,l)

                                tKIN3e(i,k,j,l) = overint1(i,k)^MOOVER(j,l)
                                tKIN3e(i,k,j,l) *= -1.0
                                t1KIN3e(i,k,j,l) += tKIN3e(i,k,j,l)

                                tKIN3e(i,k,j,l) = overint2(j,l)^MOOVERX(k,i)
                                t1KIN3e(i,k,j,l) += tKIN3e(i,k,j,l)
                                tKIN3e(i,k,j,l) = overint3(j,l)^MOOVERY(k,i)
                                t1KIN3e(i,k,j,l) += tKIN3e(i,k,j,l)
                                tKIN3e(i,k,j,l) = overint4(j,l)^MOOVERZ(k,i)
                                t1KIN3e(i,k,j,l) += tKIN3e(i,k,j,l)

                                tKIN3e(i,k,j,l) = overint2(i,k)^MOOVERX(l,j)
                                t1KIN3e(i,k,j,l) += tKIN3e(i,k,j,l)
                                tKIN3e(i,k,j,l) = overint3(i,k)^MOOVERY(l,j)
                                t1KIN3e(i,k,j,l) += tKIN3e(i,k,j,l)
                                tKIN3e(i,k,j,l) = overint4(i,k)^MOOVERZ(l,j)
                                t1KIN3e(i,k,j,l) += tKIN3e(i,k,j,l)   

                                PREPARE KIN3e(i,k,j,l) += t1KIN3e(i,k,j,l) 

                                 ENDDO l
                                ENDDO j
                               ENDDO k
                              ENDDO i

#-------------------------------------------------------------------------------                             

                              deallocate overint1(*,*)
                              deallocate overint2(*,*)
                              deallocate overint3(*,*)
                              deallocate overint4(*,*)


 
#=====================================================================================
#=====================================================================================


#-------------------------------------------------------------------------------------
#---Test of superinstruction F12_2center_moobj - integration of molecular orbitals---- 
#                                DO p 
#                                 DO p1
#                                 tmoval(p) = MOVAL(p)
#                                 tmoval1(p1) =  MOVAL(p1) 
#                                 tmoover(p,p1) = tmoval(p)^tmoval1(p1)
#                                 tmoover(p,p1) *= PTW
#                                 PREPARE MOOVER(p,p1) += tmoover(p,p1)
#                                 ENDDO p1
#                                ENDDO p
#-------------------------------------------------------------------------------------
                               deallocate MOVALX(*)
                               deallocate MOVALY(*)
                               deallocate MOVALZ(*)
                               deallocate MOVAL(*)
                               deallocate MOOVER(*,*)
                               deallocate MOOVERX(*,*)
                               deallocate MOOVERY(*,*)
                               deallocate MOOVERZ(*,*)
#---------------Deallocate arrays of 3-center objects------------------------------------
                               deallocate inv_r12_ip(*,*)
                               deallocate slater_ip(*,*)
                               deallocate slater_sq_ip(*,*)
                               deallocate slater_xder_ip(*,*)
                               deallocate slater_yder_ip(*,*)
                               deallocate slater_zder_ip(*,*)
                               deallocate grad_slater_grad_ip(*,*)
                               deallocate Exch_p(*)
#----------------------------------------------------------------------------------------





                              deallocate MOVAL(*)
#----------------------------------------------------------------------------------------
                              ENDIF
            ENDDO g
            execute server_barrier
#-------------Preparation of arrays for writing on disk----------------------------------

#----------------Two-electron integrals--------------------------------------------------

      execute blocks_to_list                V0iiii
      execute blocks_to_list                V0aiai
      execute blocks_to_list                V0aaii
      execute blocks_to_list                V0aiii
      execute blocks_to_list                V0piii
      execute blocks_to_list                V0aaai

      execute blocks_to_list                V1iiii
      execute blocks_to_list                V1aiii
      execute blocks_to_list                V1aiai

      execute blocks_to_list                V2iiii
      execute blocks_to_list                V2aiai
      execute blocks_to_list                V2aaii
      execute blocks_to_list                V2aiii
      execute blocks_to_list                V2aaai
      execute blocks_to_list                V2pipi
      execute blocks_to_list                V2piii
      execute blocks_to_list                V2piai

      execute blocks_to_list                V3iiii


      execute blocks_to_list                V4iiii
      execute blocks_to_list                V4aiai
#------------------------------------------------------------

#------------Three-electron integrals------------------------
      execute blocks_to_list          X12
      execute blocks_to_list          KF12
      execute blocks_to_list          K1F12
      execute blocks_to_list          KFF12
      execute blocks_to_list          F12F23
      execute blocks_to_list          V_ijkl
      execute blocks_to_list          KIN3e

#---Here we write arrays of integrals to the disk---
      execute write_blocks_to_list
#---------------------------------------------------

            execute server_barrier




#                 PARDO i,j,k,l
#                 REQUEST KIN3e(i,j,k,l) i
#                 execute dump_amp KIN3e        
#                 ENDPARDO i,j,k,l

                           ENDSIAL F12_MULTIINT
