#  Copyright (c) 2003-2010 University of Florida
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  The GNU General Public License is included in this distribution
#  in the file COPYRIGHT.
                           SIAL CCSD_UHF_MO_DIST1    
#
# Updated TRANSFORMATION --> ADAPTABLE TO SERVED. Modified from temp6 to 
# use less memory/disk but less efficient.  
#
# T2NEW    --> partially optimized to use permutational symmetry. 
# WAEBF    --> optimized to use permutational symmetry.  
# WMINJ    --> optimized to use permutational symmetry.  
# T2AAXS2 --> optimized to use permutational symmetry. 
# WMEBJ   --> optimized as far as possible 
#
# BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
#
# Declare indeces 
# --------------- 
#
      index kiter    = 1, cc_iter  
#
      aoindex mu     = 1, norb
      aoindex nu     = 1, norb
      aoindex lambda = 1, norb
      aoindex sigma  = 1, norb
#
      moaindex i = baocc, eaocc
      moaindex i1= baocc, eaocc
      moaindex i2= baocc, eaocc
      moaindex i3= baocc, eaocc
#
      moaindex a = bavirt, eavirt
      moaindex a1= bavirt, eavirt
      moaindex a2= bavirt, eavirt
      moaindex a3= bavirt, eavirt
#
      mobindex j = bbocc, ebocc
      mobindex j1= bbocc, ebocc
      mobindex j2= bbocc, ebocc
      mobindex j3= bbocc, ebocc
#
      mobindex b = bbvirt, ebvirt
      mobindex b1= bbvirt, ebvirt
      mobindex b2= bbvirt, ebvirt
      mobindex b3= bbvirt, ebvirt
#
      moaindex p = baocc, eavirt
      moaindex p1= baocc, eavirt
      moaindex p2= baocc, eavirt
      moaindex p3= baocc, eavirt
#
      mobindex q = bbocc, ebvirt
      mobindex q1= bbocc, ebvirt
      mobindex q2= bbocc, ebvirt
      mobindex q3= bbocc, ebvirt
# 
# Declare static arrays 
# --------------------- 
#
      distributed t1a_old(a,i) 
      distributed t1a_new(a,i) 
      distributed t1b_old(b,j) 
      distributed t1b_new(b,j) 
#
      distributed Fae_a(a,a1) 
      distributed Fae_b(b,b1) 
      distributed Fme_a(i,a) 
      distributed Fme_b(j,b) 
      distributed Fmi_a(i,i1) 
      distributed Fmi_b(j,j1) 
#
# Arrays used in transformation for AO2 algorithm
# -----------------------------------------------
#
      temp Txixi(mu,i1,lambda,i)
      temp Txxii(mu,nu,i1,i)
      temp Tixxi(i1,nu,lambda,i)
      temp Txipi(mu,i,p,i1)
      temp Tpipi(p1,i,p,i1)
      temp T1pipi(p1,i,p,i1)
      temp Tixai(i,mu,a,i1)
      temp Txaii(mu,a,i,i1)
      temp Tiaai(i,a1,a,i1)
      temp Taaii(a,a1,i,i1)
      temp Txaai(mu,a1,a,i)
      temp Taaai(a2,a,a1,i)
      temp Txxai(mu,nu,a,i)
#
      distributed Vxixi(mu,i1,lambda,i)
      distributed Vxxii(mu,nu,i1,i)
      distributed Viixx(i1,i,mu,nu)
      distributed Vixxi(i1,nu,lambda,i)
      distributed Vxipi(mu,i,p,i1)
      distributed VSpipi(p1,i,p,i1)
      distributed Vixai(i,mu,a,i1)
      distributed Vxaii(mu,a,i,i1)
      distributed Viaai(i,a1,a,i1)
      distributed Vaaii(a,a1,i,i1)
      distributed Vxaai(mu,a1,a,i)
      distributed VSaaai(a2,a,a1,i)
      distributed Vxxai(mu,nu,a,i)
#
# Arrays used in AAAA transformation 
# ---------------------------------- 
      temp Txxxa(mu,nu,lambda,a)  
      temp Txxaa(mu,nu,a1,a)  
      temp Txaaa(mu,a2,a1,a)  
      temp T1xaaa(mu,a2,a1,a)  
      temp Taaaa(a,a1,a2,a3)
      temp T1aaaa(a,a1,a2,a3)
      temp T2aaaa(a,a1,a2,a3)
      temp T3aaaa(a,a1,a2,a3)
      temp T4aaaa(a,a1,a2,a3)
      distributed Vxxxa(mu,nu,lambda,a)  
      distributed Vxxaa(mu,nu,a1,a)  
      distributed Vxaaa(mu,a2,a1,a)  
      distributed VSaaaa(a,a1,a2,a3)
# ---------------------------------- 
#
# Arrays used in BBBB transformation 
# ---------------------------------- 
      temp Txxxb(mu,nu,lambda,b)  
      temp Txxbb(mu,nu,b1,b)  
      temp Txbbb(mu,b2,b1,b)  
      temp T1xbbb(mu,b2,b1,b)  
      temp Tbbbb(b,b1,b2,b3)
      temp T1bbbb(b,b1,b2,b3)
      temp T2bbbb(b,b1,b2,b3)
      temp T3bbbb(b,b1,b2,b3)
      temp T4bbbb(b,b1,b2,b3)
      distributed Vxxxb(mu,nu,lambda,b)  
      distributed Vxxbb(mu,nu,b1,b)  
      distributed Vxbbb(mu,b2,b1,b)  
      distributed VSbbbb(b,b1,b2,b3)
# ---------------------------------- 
#
# Arrays used in AABB transformation 
# ---------------------------------- 
      temp Txabb(mu,a,b1,b)  
      temp Taabb(a1,a,b2,b3)
      temp Tbbaa(b,b1,a,a1) 
      temp T1bbaa(b,b1,a,a1) 
      distributed Vxabb(mu,a,b1,b)  
      distributed Vaabb(a,a1,b2,b3)
# ---------------------------------- 
#
#
      temp Txjxj(mu,j1,lambda,j)
      temp Txxjj(mu,nu,j1,j)
      temp Tjjxx(j1,nu,lambda,j)
      temp Tjxxj(j1,nu,lambda,j)
      temp Txjqj(mu,j,q,j1)
      temp Tqjqj(q1,j,q,j1)
      temp T1qjqj(q1,j,q,j1)
      temp Tjxbj(j,mu,b,j1)
      temp Txbjj(mu,b,j,j1)
      temp Tjbbj(j,b1,b,j1)
      temp Tbbjj(b,b1,j,j1)
      temp Txbbj(mu,b1,b,j)
      temp Tbbbj(b2,b,b1,j)
      temp Txxbj(mu,nu,b,j)
#
      distributed Vxjxj(mu,j1,lambda,j)
      distributed Vxxjj(mu,nu,j1,j)
      distributed Vjjxx(j1,nu,lambda,j)
      distributed Vjxxj(j1,nu,lambda,j)
      distributed Vxjqj(mu,j,q,j1)
      distributed VSqjqj(q1,j,q,j1)
      distributed Vjxbj(j,mu,b,j1)
      distributed Vxbjj(mu,b,j,j1)
      distributed Vjbbj(j,b1,b,j1)
      distributed Vbbjj(b,b1,j,j1)
      distributed Vxbbj(mu,b1,b,j)
      distributed VSbbbj(b2,b,b1,j)
      distributed Vxxbj(mu,nu,b,j) 
#
      temp Txixj(mu,i,nu,j)
      temp Txiqj(mu,i,q,j)
      temp Tpiqj(p,i,q,j)
      temp Tiixx(i,i1,mu,nu)
      temp Tiixb(i,i1,mu,b)
      temp Tiibb(i,i1,b1,b)
      temp Txajj(mu,a,j,j1)
      temp Taajj(a,a1,j,j1)
      temp Txabj(mu,a,b,j)
      temp Tixxj(i,mu,nu,j)
      temp Tixbj(i,mu,b,j)
      temp Tiabj(i,a,b,j)
      temp Taabj(a,a1,b,j)
#
      distributed Vxixj(mu,i,nu,j)
      distributed Vxiqj(mu,i,q,j)
      distributed Vpiqj(p,i,q,j)
      distributed Viixb(i,i1,mu,b)
      distributed Viibb(i,i1,b1,b)
      distributed Vxajj(mu,a,j,j1)
      distributed Vaajj(a,a1,j,j1)
      distributed Vxabj(mu,a,b,j)
      distributed Vixxj(i,mu,nu,j)
      distributed Vixbj(i,mu,b,j)
      distributed Viabj(i,a,b,j)
      distributed Vaabj(a,a1,b,j) 
#
      temp Txbii(mu,b,i,i1)
      temp Tbbii(b,b1,i,i1)
      temp Tjbii(j,b,i,i1)
      temp Txbai(mu,b,a,i)
      temp Tbbai(b,b1,a,i)
#
      distributed Vxbii(mu,b,i,i1)
      distributed Vbbii(b,b1,i,i1)
      distributed Vjbii(j,b,i,i1)
      distributed Vxbai(mu,b,a,i)
      distributed Vbbai(b,b1,a,i)
#
# End Arrays used in transformation for AO2 algorithm
# --------------------------------------------------- 
#
# Declare temporary arrays 
# ------------------------ 
#
      temp Txxxi(mu,nu,lambda,i)
      temp Txxxj(mu,nu,lambda,j)
      temp T1xixi(mu,i,nu,i1)
      temp Txiix(mu,i,i1,nu)
      temp Txjjx(mu,j,j1,nu)
      temp Txijx(mu,i,j,nu)
      temp Txpii(mu,p,i,i1)
      temp Txqii(mu,q,i,i1)
      temp Tppii(p,p1,i,i1)
      temp Tqqii(q,q1,i,i1)
      temp Txpjj(mu,p,j,j1)
      temp Txqjj(mu,q,j,j1)
      temp Tppjj(p,p1,j,j1)
      temp Tqqjj(q,q1,j,j1)
      temp Tixpi(i,mu,p,i1)
      temp Tippi(i,p,p1,i1)
      temp Tjxqj(j,mu,q,j1)
      temp Tjqqj(j,q,q1,j1)
      temp Tixqj(i,mu,q,j)
      temp Tipqj(i,p,q,j)
#
      temp Vblock(i,i1,i2,i3)
      temp Taiai(p,i,p1,i1)
      temp T1aiai(p,i,p1,i1)
      temp T2aiai(p,i,p1,i1)
      temp T3aiai(p,i,p1,i1)
      temp Tbjbj(q,j,q1,j1)
      temp T1bjbj(q,j,q1,j1)
      temp T2bjbj(q,j,q1,j1)
      temp T3bjbj(q,j,q1,j1)
      temp Taibj(p,i,q,j)
      temp T1aibj(p,i,q,j)
      temp T2aibj(p,i,q,j)
#
      temp Txxxp(mu,nu,lambda,i)
      temp Txxxq(mu,nu,lambda,j)
      temp Txxpp(mu,nu,p1,i)
      temp Txxqq(mu,nu,q1,j)
      temp Txppp(mu,p2,p1,i)
      temp Txqpp(mu,q,p1,i)
      temp Txqqq(mu,q2,q1,j)
      temp Txpqq(mu,p,q1,j)
      temp Tpppp(p3,p2,p1,p)
      temp Tqqqq(q3,q2,q1,q)
      temp Tppqq(p1,p,q1,j)
      temp Tqqpp(q1,q,p1,i)
      temp Tixxx(i,mu,nu,sigma) 
      temp Tipxx(i,p,nu,sigma) 
      temp Tipqx(i,p,q,sigma) 
      temp Tipqq(i,p,q,q1) 
#
      temp tmp1_aiai(a,i,a1,i1) 
      temp tmp2_aiai(a,i,a1,i1) 
      temp tmp1_bjbj(b,j,b1,j1) 
      temp tmp2_bjbj(b,j,b1,j1) 
      temp tmp1_aibj(a,i,b,j) 
#
      temp Tai(a,i) 
      temp T1ai(a,i) 
      temp Tbj(b,j) 
      temp T1bj(b,j) 
#
      temp Taa(a,a1) 
      temp T1aa(a,a1) 
      temp Tbb(b,b1) 
      temp T1bb(b,b1) 
      temp Tae_a(a,a1) 
      temp Tae_b(b,b1) 
#
      temp Tia(i,a) 
      temp T1ia(i,a) 
      temp Tjb(j,b) 
      temp T1jb(j,b) 
      temp Tme_a(i,a) 
      temp Tme_b(j,b) 
#
      temp Tii(i,i1) 
      temp T1ii(i,i1) 
      temp Tjj(j,j1) 
      temp T1jj(j,j1) 
      temp Tmi_a(i,i1) 
      temp Tmi_b(j,j1) 
#
      temp T1pppp(p,p1,p2,p3) 
      temp T1qqqq(q,q1,q2,q3) 
      temp Taiii(a,i,i1,i2) 
      temp T1aiii(a,i,i1,i2) 
#
      temp  Tiiii(i,i1,i2,i3) 
      temp T1iiii(i,i1,i2,i3) 
#
      temp  Tjjjj(j,j1,j2,j3) 
      temp T1jjjj(j,j1,j2,j3) 
      temp  Tbjjj(b,j,j1,j2) 
      temp T1bjjj(b,j,j1,j2) 
#
      temp  Tiijj(i,i1,j2,j3) 
      temp T1iijj(i,i1,j2,j3) 
#
      temp  tmp_aa(a,a1) 
      temp tmp1_aa(a,a1) 
      temp  tmp_ii(i,i1) 
      temp tmp1_ii(i,i1) 
#
      temp  Tiiai(i,i1,a,i2) 
      temp T1iiai(i,i1,a,i2) 
#
      temp  tmp_bb(b,b1) 
      temp tmp1_bb(b,b1) 
      temp  tmp_jj(j,j1) 
      temp tmp1_jj(j,j1) 
#
      temp  Tjjbj(j,j1,b,j2) 
      temp T1jjbj(j,j1,b,j2) 
# 
      temp T1aaai(a,a1,a2,i)  
      temp T2aaai(a,a1,a2,i)  
#
      temp T1bbbj(b,b1,b2,j)  
      temp T2bbbj(b,b1,b2,j)  
#
      temp T1aabb(a,a1,b,b1)  
#
      temp R1aiai(a,i,a1,i1) 
      temp R2aiai(a,i,a1,i1) 
      temp R3aiai(a,i,a1,i1) 
      temp R4aiai(a,i,a1,i1) 
      temp R1bjbj(b,j,b1,j1) 
      temp R2bjbj(b,j,b1,j1) 
      temp R3bjbj(b,j,b1,j1) 
      temp R4bjbj(b,j,b1,j1) 
      temp R1aibj(a,i,b,j) 
      temp R2aibj(a,i,b,j) 
      temp R3aibj(a,i,b,j) 
      temp R4aibj(a,i,b,j) 
#
      temp T1iaai(i,a,a1,i1) 
      temp T2iaai(i,a,a1,i1) 
      temp T1jbbj(j,b,b1,j1) 
      temp T2jbbj(j,b,b1,j1) 
      temp T1iabj(i,a,b,j) 
      temp T2iabj(i,a,b,j) 
      temp Tjjpp(j,j1,p,p1) 
      temp T1jjpp(j,j1,p,p1) 
      temp T2jjpp(j,j1,p,p1) 
      temp  Tiiqq(i,i1,q,q1) 
      temp T1iiqq(i,i1,q,q1) 
      temp T2iiqq(i,i1,q,q1) 
      temp  Tjjai(j,j1,a,i) 
      temp T1jjai(j,j1,a,i) 
      temp T2jjai(j,j1,a,i) 
      temp  Tiibj(i,i1,b,j) 
      temp T1iibj(i,i1,b,j) 
      temp T2iibj(i,i1,b,j) 
      temp  Tjbai(j,b,a,i)  
      temp T1jbai(j,b,a,i)  
      temp T2jbai(j,b,a,i)  
      temp  Taijj(a,i,j,j1) 
      temp T1aijj(a,i,j,j1) 
      temp Tqqip(a,i,b,b1)  
#
# Declare distributed arrays 
# -------------------------- 
#
      distributed Vxxxp(mu,nu,lambda,i)
      distributed Vixxx(i,mu,nu,lambda)
      distributed Vipxx(i,p,nu,lambda)
      distributed Vipqx(i,p,q,lambda)
      distributed Vxxxq(mu,nu,lambda,j)
      distributed Vxxpp(mu,nu,p1,i)
      distributed Vxxqq(mu,nu,q1,j)
      distributed Vxppp(mu,p2,p1,i)
      distributed Vxqpp(mu,q,p1,i)
      distributed Vxqqq(mu,q2,q1,j)
      distributed Vxpqq(mu,p,q1,j)
#
      distributed Wminj_AA(i,i1,i2,i3)
      distributed Wminj_BB(j,j1,j2,j3)
      distributed Wminj_AB(i,i1,j,j1)
      distributed Iiiii(i,i1,i2,i3)
      distributed Ijjjj(j,j1,j2,j3)
      distributed Iiijj(i,i1,j,j1)
      distributed T2new_aa(a,i,a1,i1)
      distributed T2new_bb(b,j,b1,j1)
      distributed T2new_ab(a,i,b,j)
      distributed T2old_aa(a,i,a1,i1)
      distributed T2old_bb(b,j,b1,j1)
      distributed T2old_ab(a,i,b,j)
      distributed Tau_aa(a,i,a1,i1)
      distributed Tau_bb(b,j,b1,j1)
      distributed Tau_ab(a,i,b,j)
      distributed Taup_aa(a,i,a1,i1)
      distributed Taup_bb(b,j,b1,j1)
      distributed Taup_ab(a,i,b,j)
#
# Declare served arrays 
# --------------------- 
#
      served AOINT(mu,nu,lambda,sigma) 
#
     temp TXaiai(a,i,nu,i1)
     temp TYaiai(a,i,a1,i1)
     temp TY1aiai(a,i,a1,i1)
     temp TXbjbj(b,j,nu,j1)
     temp TYbjbj(b,j,b1,j1)
     temp TY1bjbj(b,j,b1,j1)
     temp TXaibj(a,i,nu,j)
     temp TYaibj(a,i,b,j)
#
# Declare scalars 
# --------------- 
#
      scalar etemp
      scalar esum
      scalar esuma
      scalar esumb
      scalar esumab
      scalar ecorraa
      scalar ecorrbb
      scalar ecorrab
      scalar ecorrT
      scalar enew 
      scalar eold 
      scalar ecrit 
      scalar ediff 
      scalar mp2_energy
#
# Arrays/Scalars used exclusively in DIIS procedure. 
# -------------------------------------------------- 
#
       served D0aiai(a,i,a1,i1)  
       served D1aiai(a,i,a1,i1)  
       served D2aiai(a,i,a1,i1)  
       served D3aiai(a,i,a1,i1)  
       served D4aiai(a,i,a1,i1)  
       served D5aiai(a,i,a1,i1)  
#
       served D0bjbj(b,j,b1,j1)  
       served D1bjbj(b,j,b1,j1)  
       served D2bjbj(b,j,b1,j1)  
       served D3bjbj(b,j,b1,j1)  
       served D4bjbj(b,j,b1,j1)  
       served D5bjbj(b,j,b1,j1)  
#
       served D0aibj(a,i,b,j)  
       served D1aibj(a,i,b,j)  
       served D2aibj(a,i,b,j)  
       served D3aibj(a,i,b,j)  
       served D4aibj(a,i,b,j)  
       served D5aibj(a,i,b,j)  
#
       distributed D0ai(a,i)  
       distributed D1ai(a,i)  
       distributed D2ai(a,i)  
       distributed D3ai(a,i)  
       distributed D4ai(a,i)  
       distributed D5ai(a,i)  
#
       distributed D0bj(b,j)   
       distributed D1bj(b,j)   
       distributed D2bj(b,j)   
       distributed D3bj(b,j)   
       distributed D4bj(b,j)   
       distributed D5bj(b,j)   
#
       distributed e1ai(a,i)  
       distributed e2ai(a,i)  
       distributed e3ai(a,i)  
       distributed e4ai(a,i)  
       distributed e5ai(a,i)  
#
       distributed e1bj(b,j)   
       distributed e2bj(b,j)   
       distributed e3bj(b,j)   
       distributed e4bj(b,j)   
       distributed e5bj(b,j)   
#
       served e1aiai(a,i,a1,i1)  
       served e2aiai(a,i,a1,i1)  
       served e3aiai(a,i,a1,i1)  
       served e4aiai(a,i,a1,i1)  
       served e5aiai(a,i,a1,i1)  
#
       served e1bjbj(b,j,b1,j1)  
       served e2bjbj(b,j,b1,j1)  
       served e3bjbj(b,j,b1,j1)  
       served e4bjbj(b,j,b1,j1)  
       served e5bjbj(b,j,b1,j1)  
#
       served e1aibj(a,i,b,j)  
       served e2aibj(a,i,b,j)  
       served e3aibj(a,i,b,j)  
       served e4aibj(a,i,b,j)  
       served e5aibj(a,i,b,j)  
#
       scalar b11
       scalar b12
       scalar b13
       scalar b14
       scalar b15
       scalar b16
       scalar b17
       scalar b18
       scalar b19
       scalar b110
#
       scalar b22
       scalar b23
       scalar b24
       scalar b25
       scalar b26
       scalar b27
       scalar b28
       scalar b29
       scalar b210
#
       scalar b33
       scalar b34
       scalar b35
       scalar b36
       scalar b37
       scalar b38
       scalar b39
       scalar b310
       scalar b44
       scalar b45
       scalar b46
       scalar b47
       scalar b48
       scalar b49
       scalar b410
#
       scalar b55
       scalar b56
       scalar b57
       scalar b58
       scalar b59
       scalar b510
#
       scalar b66
       scalar b67
       scalar b68
       scalar b69
       scalar b610
#
       scalar b77
       scalar b78
       scalar b79
       scalar b710
#
       scalar b88
       scalar b89
       scalar b810
#
       scalar b99
       scalar b910
#
       scalar b1010
#
       scalar Tb11
       scalar Tb12
       scalar Tb13
       scalar Tb14
       scalar Tb15
       scalar Tb16
       scalar Tb17
       scalar Tb18
       scalar Tb19
       scalar Tb110
#
       scalar Tb22
       scalar Tb23
       scalar Tb24
       scalar Tb25
       scalar Tb26
       scalar Tb27
       scalar Tb28
       scalar Tb29
       scalar Tb210
#
       scalar Tb33
       scalar Tb34
       scalar Tb35
       scalar Tb36
       scalar Tb37
       scalar Tb38
       scalar Tb39
       scalar Tb310
       scalar Tb44
       scalar Tb45
       scalar Tb46
       scalar Tb47
       scalar Tb48
       scalar Tb49
       scalar Tb410
#
       scalar Tb55
       scalar Tb56
       scalar Tb57
       scalar Tb58
       scalar Tb59
       scalar Tb510
#
       scalar Tb66
       scalar Tb67
       scalar Tb68
       scalar Tb69
       scalar Tb610
#
       scalar Tb77
       scalar Tb78
       scalar Tb79
       scalar Tb710
#
       scalar Tb88
       scalar Tb89
       scalar Tb810
#
       scalar Tb99
       scalar Tb910
#
       scalar Tb1010
#
       scalar c1 
       scalar c2 
       scalar c3 
       scalar c4 
       scalar c5 
       scalar c6 
       scalar c7 
       scalar c8 
       scalar c9 
       scalar c10  
#
#
#    ------------------------------------------------------------------------
#
     PROC READ_2EL
#
#    ------------------------------------------------------------------------
#
      create VSpipi
      create Vaaii
      create Viaai
      create VSaaai
      create VSqjqj
      create Vbbjj
      create Vjbbj
      create VSbbbj
      create Vbbii
      create Vjbii
      create Vbbai
      create Vpiqj
      create Vaajj
      create Viabj
      create Vaabj
      create VSaaaa 
      create VSbbbb 
      create Vaabb 
#
      execute server_barrier
      execute list_to_blocks                VSpipi
      execute list_to_blocks                Vaaii
      execute list_to_blocks                Viaai
      execute list_to_blocks                VSaaai
      execute list_to_blocks                VSqjqj
      execute list_to_blocks                Vbbjj
      execute list_to_blocks                Vjbbj
      execute list_to_blocks                VSbbbj
      execute list_to_blocks                Vbbii
      execute list_to_blocks                Vjbii
      execute list_to_blocks                Vbbai
      execute list_to_blocks                Vpiqj
      execute list_to_blocks                Vaajj
      execute list_to_blocks                Viabj
      execute list_to_blocks                Vaabj
      execute list_to_blocks                VSaaaa 
      execute list_to_blocks                VSbbbb  
      execute list_to_blocks                Vaabb  
      execute read_list_to_blocks
      execute server_barrier
#
#    ------------------------------------------------------------------------
#
     ENDPROC READ_2EL
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------
#
     PROC WRITE_2EL
#
#    ------------------------------------------------------------------------
#
      execute server_barrier
      execute blocks_to_list                VSpipi(p,i,p1,i1)
      execute blocks_to_list                Vaaii
      execute blocks_to_list                Viaai
      execute blocks_to_list                VSaaai
      execute blocks_to_list                VSqjqj(q,j,q1,j1)
      execute blocks_to_list                Vbbjj
      execute blocks_to_list                Vjbbj
      execute blocks_to_list                VSbbbj
      execute blocks_to_list                Vbbii
      execute blocks_to_list                Vjbii
      execute blocks_to_list                Vbbai
      execute blocks_to_list                Vpiqj(p,i,q,j)
      execute blocks_to_list                Vaajj
      execute blocks_to_list                Viabj
      execute blocks_to_list                Vaabj
      execute blocks_to_list                VSaaaa 
      execute blocks_to_list                VSbbbb  
      execute blocks_to_list                Vaabb  
#
#    ------------------------------------------------------------------------
#
     ENDPROC WRITE_2EL
#
#    ------------------------------------------------------------------------
#
#    ------------------------------------------------------------------------ 
# 
#    ------------------------------------------------------------------------ 
#
     PROC IGUESS_UHF  
# 
#    ------------------------------------------------------------------------ 
#
     PARDO a, a1, i, i1 
#
           GET VSpipi(a,i,a1,i1) 
#
           Taiai(a,i,a1,i1)   = VSpipi(a,i,a1,i1)
           execute energy_denominator Taiai 
           PUT T2old_aa(a,i,a1,i1) = Taiai(a,i,a1,i1)  
           PREPARE D0aiai(a,i,a1,i1) = Taiai(a,i,a1,i1)  
#
     ENDPARDO a, a1, i, i1  
#
     PARDO b, b1, j, j1 
#
           GET VSqjqj(b,j,b1,j1) 
#
           Tbjbj(b,j,b1,j1) = VSqjqj(b,j,b1,j1)  
           execute energy_denominator Tbjbj 
           PUT T2old_bb(b,j,b1,j1) = Tbjbj(b,j,b1,j1)  
           PREPARE D0bjbj(b,j,b1,j1) = Tbjbj(b,j,b1,j1)  
#
     ENDPARDO b, b1, j, j1 
#
     PARDO a, b, i, j 
#
           GET Vpiqj(a,i,b,j) 
#
           Taibj(a,i,b,j) = Vpiqj(a,i,b,j)
#
           execute energy_denominator Taibj 
           PUT T2old_ab(a,i,b,j) = Taibj(a,i,b,j)  
           PREPARE D0aibj(a,i,b,j) = Taibj(a,i,b,j)  
#
#          t1a_old(a,i) = 0.0 
#          t1b_old(b,j) = 0.0 
#
     ENDPARDO a, b, i, j 
#
     PARDO a, i
#
           tai(a,i) = 0.0
           PUT t1a_old(a,i) = tai(a,i)
           PUT D0ai(a,i) = tai(a,i)
#
     ENDPARDO a, i
#
     PARDO b, j
#
           tbj(b,j) = 0.0
           PUT t1b_old(b,j) = tbj(b,j)
           PUT D0bj(b,j) = tbj(b,j)
#
     ENDPARDO b, j
#
#    ------------------------------------------------------------------------ 
# 
     ENDPROC IGUESS_UHF 
# 
#    ------------------------------------------------------------------------ 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
      PROC TAUAA 
#     ----------
#
      PARDO a, i, a1, i1 
#
            GET T2old_aa(a,i,a1,i1) 
            GET t1a_old(a1,i1) 
            GET t1a_old(a1,i) 
            GET t1a_old(a,i1) 
            GET t1a_old(a,i) 
# 
            tai(a1,i1)            = t1a_old(a1,i1) 
            tmp1_aiai(a,i,a1,i1)  = t1a_old(a,i)^tai(a1,i1)  
            tai(a1,i)             = t1a_old(a1,i) 
            tmp2_aiai(a,i,a1,i1)  = t1a_old(a,i1)^tai(a1,i)  
#
            tmp1_aiai(a,i,a1,i1) += T2old_aa(a,i,a1,i1) 
            tmp1_aiai(a,i,a1,i1) -= tmp2_aiai(a,i,a1,i1)  
            PUT Tau_aa(a,i,a1,i1) = tmp1_aiai(a,i,a1,i1)  
#
      ENDPARDO a, i, a1, i1 
#
      ENDPROC TAUAA 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
      PROC TAUBB 
#     ----------
#
      PARDO b, j, b1, j1 
#
            GET T2old_bb(b,j,b1,j1) 
            GET t1b_old(b1,j1) 
            GET t1b_old(b1,j) 
            GET t1b_old(b,j1) 
            GET t1b_old(b,j) 
#
            tbj(b1,j1)            = t1b_old(b1,j1) 
            tmp1_bjbj(b,j,b1,j1)  = t1b_old(b,j)^tbj(b1,j1)  
            tbj(b1,j)             = t1b_old(b1,j) 
            tmp2_bjbj(b,j,b1,j1)  = t1b_old(b,j1)^tbj(b1,j)  
#
            tmp1_bjbj(b,j,b1,j1) += T2old_bb(b,j,b1,j1) 
            tmp1_bjbj(b,j,b1,j1) -= tmp2_bjbj(b,j,b1,j1)  
            PUT Tau_bb(b,j,b1,j1) = tmp1_bjbj(b,j,b1,j1)  
#
      ENDPARDO b, j, b1, j1 
#
      ENDPROC TAUBB 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
      PROC TAUAB 
#     ----------
#
      PARDO a, i, b, j 
#
            GET T2old_ab(a,i,b,j) 
            GET t1a_old(a,i) 
            GET t1b_old(b,j) 
#
            tmp1_aibj(a,i,b,j)  = t1a_old(a,i)^t1b_old(b,j)  
            tmp1_aibj(a,i,b,j) += T2old_ab(a,i,b,j) 
            PUT Tau_ab(a,i,b,j) = tmp1_aibj(a,i,b,j)  
#
      ENDPARDO a, i, b, j 
#
      ENDPROC TAUAB 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
      PROC TAUPAA 
#     -----------
#
      PARDO a, i, a1, i1 
#
            GET T2old_aa(a,i,a1,i1) 
            GET t1a_old(a1,i1) 
            GET t1a_old(a1,i) 
            GET t1a_old(a,i1) 
            GET t1a_old(a,i) 
#
            tai(a1,i1)             = t1a_old(a1,i1) 
            tmp1_aiai(a,i,a1,i1)   = t1a_old(a,i)^tai(a1,i1)  
            tai(a1,i)              = t1a_old(a1,i) 
            tmp2_aiai(a,i,a1,i1)   = t1a_old(a,i1)^tai(a1,i)  
            tmp1_aiai(a,i,a1,i1)  -= tmp2_aiai(a,i,a1,i1) 
            tmp1_aiai(a,i,a1,i1)  *= 0.5  
            tmp1_aiai(a,i,a1,i1)  += T2old_aa(a,i,a1,i1) 
            PUT Taup_aa(a,i,a1,i1) = tmp1_aiai(a,i,a1,i1)  
#
      ENDPARDO a, i, a1, i1 
#
      ENDPROC TAUPAA 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
      PROC TAUPBB 
#     -----------
#
      PARDO b, j, b1, j1 
#
            GET T2old_bb(b,j,b1,j1) 
            GET t1b_old(b1,j1) 
            GET t1b_old(b1,j) 
            GET t1b_old(b,j1) 
            GET t1b_old(b,j) 
#
            tbj(b1,j1)             = t1b_old(b1,j1) 
            tmp1_bjbj(b,j,b1,j1)   = t1b_old(b,j)^tbj(b1,j1)  
            tbj(b1,j)              = t1b_old(b1,j) 
            tmp2_bjbj(b,j,b1,j1)   = t1b_old(b,j1)^tbj(b1,j)  
            tmp1_bjbj(b,j,b1,j1)  -= tmp2_bjbj(b,j,b1,j1) 
            tmp1_bjbj(b,j,b1,j1)  *= 0.5  
            tmp1_bjbj(b,j,b1,j1)  += T2old_bb(b,j,b1,j1) 
            PUT Taup_bb(b,j,b1,j1) = tmp1_bjbj(b,j,b1,j1)  
#
      ENDPARDO b, j, b1, j1 
#
      ENDPROC TAUPBB 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
      PROC TAUPAB 
#     -----------
#
      PARDO a, i, b, j 
#
            GET T2old_ab(a,i,b,j) 
            GET t1a_old(a,i) 
            GET t1b_old(b,j) 
# 
            tmp1_aibj(a,i,b,j)   = t1a_old(a,i)^t1b_old(b,j)  
            tmp1_aibj(a,i,b,j)  *= 0.5  
            tmp1_aibj(a,i,b,j)  += T2old_ab(a,i,b,j) 
            PUT Taup_ab(a,i,b,j) = tmp1_aibj(a,i,b,j)  
#
      ENDPARDO a, i, b, j 
#
      ENDPROC TAUPAB 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
      PROC TAU 
#
           CALL TAUAA 
           CALL TAUBB 
           CALL TAUAB 
#
      ENDPROC TAU 
#
      PROC TAUP
#
           CALL TAUPAA 
           CALL TAUPBB 
           CALL TAUPAB 
#
      ENDPROC TAUP
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
#
      PROC FAEA
#     ----------
#
      PARDO a, a1 
#
         Tae_a(a,a1) = 0.0
#
         DO i 
         DO a2 
#
            GET VSaaai(a1,a,a2,i) 
            GET t1a_old(a2,i) 
#
            Taa(a,a1)   = VSaaai(a1,a,a2,i)*t1a_old(a2,i)  
            Tae_a(a,a1) +=  Taa(a,a1)  
#
            DO i1 
#
               GET Taup_aa(a,i,a2,i1) 
               GET VSpipi(a1,i1,a2,i) 
#
               Taa(a,a1)    = Taup_aa(a,i,a2,i1)*VSpipi(a1,i1,a2,i) 
               Taa(a,a1)   *= 0.5 
               Tae_a(a,a1) +=  Taa(a,a1)  
#
            ENDDO i1 
#
         ENDDO a2 
         ENDDO i 
#
         DO j 
         DO b 
#
            GET Vaabj(a1,a,b,j) 
            GET t1b_old(b,j) 
#
            Taa(a,a1)    = Vaabj(a1,a,b,j)*t1b_old(b,j) 
            Tae_a(a,a1) +=  Taa(a,a1)  
#
            DO i 
#
               GET Taup_ab(a,i,b,j) 
               GET Vpiqj(a1,i,b,j) 
#
               Taa(a,a1)    = Taup_ab(a,i,b,j)*Vpiqj(a1,i,b,j) 
               Tae_a(a,a1) -=  Taa(a,a1)  
#
            ENDDO i 
#
         ENDDO b 
         ENDDO j 
#
         PUT Fae_a(a,a1) = Tae_a(a,a1) 
#
      ENDPARDO a, a1 
#
      ENDPROC FAEA
#     -------------
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
#
      PROC FAEB
#     ----------
#
      PARDO b, b1 
#
         Tae_b(b,b1) = 0.0
#
         DO j 
         DO b2 
#
            GET VSbbbj(b1,b,b2,j) 
            GET t1b_old(b2,j) 
#
            Tbb(b,b1)    = VSbbbj(b1,b,b2,j)*t1b_old(b2,j) 
            Tae_b(b,b1) +=  Tbb(b,b1)  
#
            DO j1 
#
               GET Taup_bb(b,j,b2,j1) 
               GET VSqjqj(b1,j1,b2,j) 
#
               Tbb(b,b1)    = Taup_bb(b,j,b2,j1)*VSqjqj(b1,j1,b2,j) 
               Tbb(b,b1)   *= 0.5 
               Tae_b(b,b1) +=  Tbb(b,b1)  
#
            ENDDO j1 
#
         ENDDO b2 
         ENDDO j 
#
         DO i 
         DO a 
#
            GET Vbbai(b1,b,a,i) 
            GET t1a_old(a,i) 
#
            Tbb(b,b1)    = Vbbai(b1,b,a,i)*t1a_old(a,i) 
            Tae_b(b,b1) += Tbb(b,b1)  
#
            DO j 
#
               GET Taup_ab(a,i,b,j) 
               GET Vpiqj(a,i,b1,j) 
#
               Tbb(b,b1)    = Taup_ab(a,i,b,j)*Vpiqj(a,i,b1,j) 
               Tae_b(b,b1) -=  Tbb(b,b1)  
#
            ENDDO j 
#
         ENDDO a 
         ENDDO i 
#
         PUT Fae_b(b,b1) = Tae_b(b,b1) 
#
      ENDPARDO b, b1 
#
      ENDPROC FAEB
#     -------------
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
#
      PROC FAE
#     --------
         CALL FAEA 
         CALL FAEB 
      ENDPROC FAE
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
#
      PROC FMEA
#     ----------
#
      PARDO i, a 
#
            Tme_a(i,a) = 0.0
# 
            DO i1 
            DO a1 
#
               GET VSpipi(a,i,a1,i1) 
               GET t1a_old(a1,i1) 
#
               Tia(i,a)    = VSpipi(a,i,a1,i1)*t1a_old(a1,i1) 
               Tme_a(i,a) += Tia(i,a) 
#
            ENDDO a1 
            ENDDO i1 
# 
            DO j 
            DO b 
#
               GET Vpiqj(a,i,b,j) 
               GET t1b_old(b,j) 
#
               Tia(i,a)    = Vpiqj(a,i,b,j)*t1b_old(b,j) 
               Tme_a(i,a) += Tia(i,a) 
#
            ENDDO b 
            ENDDO j 
#
            PUT Fme_a(i,a) = Tme_a(i,a) 
#
      ENDPARDO i, a 
# 
      ENDPROC FMEA
#     -------------
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
#
      PROC FMEB
#     ----------
#
      PARDO j, b 
#
            Tme_b(j,b) = 0.0
# 
            DO j1 
            DO b1 
#
               GET VSqjqj(b,j,b1,j1) 
               GET t1b_old(b1,j1) 
#
               Tjb(j,b)   = VSqjqj(b,j,b1,j1)*t1b_old(b1,j1) 
               Tme_b(j,b) += Tjb(j,b) 
#
            ENDDO b1 
            ENDDO j1 
# 
            DO i 
            DO a 
#
               GET Vpiqj(a,i,b,j) 
               GET t1a_old(a,i) 
#
               Tjb(j,b)    = Vpiqj(a,i,b,j)*t1a_old(a,i) 
               Tme_b(j,b) += Tjb(j,b) 
#
            ENDDO a 
            ENDDO i 
#
            PUT Fme_b(j,b) = Tme_b(j,b) 
#
      ENDPARDO j, b 
# 
      ENDPROC FMEB
#     -------------
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
#
      PROC FME
#     ----------
         CALL FMEA
         CALL FMEB
      ENDPROC FME
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
#
      PROC FMIA
#     ----------
#
      PARDO i1, i 
#
         Tmi_a(i1,i)     = 0.0
         PUT Fmi_a(i1,i) = Tmi_a(i1,i) 
#
      ENDPARDO i1, i 
      execute sip_barrier 
#
      PARDO i1, i, a, i2  
#
            GET VSpipi(a,i2,i,i1) 
            GET t1a_old(a,i2) 
#
            Tii(i1,i)        = VSpipi(a,i2,i,i1)*t1a_old(a,i2) 
            Tmi_a(i1,i)      = Tii(i1,i) 
            PUT Fmi_a(i1,i) += Tmi_a(i1,i) 
#
            DO a2  
#
               GET VSpipi(a2,i1,a,i2) 
               GET Taup_aa(a2,i,a,i2) 
#
               Tii(i1,i)        = VSpipi(a2,i1,a,i2)*Taup_aa(a2,i,a,i2) 
               Tii(i1,i)       *= 0.5 
               PUT Fmi_a(i1,i) += Tii(i1,i) 
#
            ENDDO a2  
#
      ENDPARDO i1, i, a, i2  
#
      PARDO i1, i, b, j  
#
            GET Vpiqj(i,i1,b,j) 
            GET t1b_old(b,j) 
#
            Tii(i1,i)        = Vpiqj(i,i1,b,j)*t1b_old(b,j) 
            PUT Fmi_a(i1,i) += Tii(i1,i) 
#
            DO a 
#
               GET Vpiqj(a,i1,b,j) 
               GET Taup_ab(a,i,b,j)
#
               Tii(i1,i)        = Taup_ab(a,i,b,j)*Vpiqj(a,i1,b,j) 
               PUT Fmi_a(i1,i) += Tii(i1,i) 
#
            ENDDO a 
#
      ENDPARDO i1, i, b, j  
#
      ENDPROC FMIA
#     -------------
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
#
      PROC FMIB
#     ----------
#
      PARDO j1, j 
#
         Tmi_b(j1,j)     = 0.0
         PUT Fmi_b(j1,j) = Tmi_b(j1,j) 
#
      ENDPARDO j1, j 
      execute sip_barrier 
#
      PARDO j1, j, b, j2  
#
            GET VSqjqj(b,j2,j,j1) 
            GET t1b_old(b,j2) 
#
            Tjj(j1,j)        = VSqjqj(b,j2,j,j1)*t1b_old(b,j2) 
            Tmi_b(j1,j)      = Tjj(j1,j) 
            PUT Fmi_b(j1,j) += Tmi_b(j1,j) 
#
            DO b2 
#
               GET VSqjqj(b2,j1,b,j2) 
               GET Taup_bb(b2,j,b,j2) 
#
               Tjj(j1,j)          = VSqjqj(b2,j1,b,j2)*Taup_bb(b2,j,b,j2) 
               Tjj(j1,j)         *= 0.5 
               PUT Fmi_b(j1,j)   += Tjj(j1,j) 
#
         ENDDO b2 
#
      ENDPARDO j1, j, b, j2  
#
      PARDO j1, j, a, i  
#
            GET Vpiqj(a,i,j,j1) 
            GET t1a_old(a,i) 
#
            Tjj(j1,j)        = Vpiqj(a,i,j,j1)*t1a_old(a,i) 
            PUT Fmi_b(j1,j) += Tjj(j1,j) 
#
            DO b 
#
               GET Vpiqj(a,i,b,j1) 
               GET Taup_ab(a,i,b,j)
#
               Tjj(j1,j)        = Taup_ab(a,i,b,j)*Vpiqj(a,i,b,j1) 
               PUT Fmi_b(j1,j) += Tjj(j1,j) 
#
            ENDDO b 
#
      ENDPARDO j1, j, a, i  
#
      ENDPROC FMIB
#     -------------
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
#
      PROC FMI 
#     ----------
         CALL FMIA 
         CALL FMIB 
      ENDPROC FMI 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# In the procedure T1ANEW all contributions to the singles amplitude t1a 
# are computed. 
#
      PROC T1ANEW 
#     -----------
#
      PARDO a, i 
#
            tai(a,i) = 0.0 
# 
            DO a1 
#
               GET t1a_old(a1,i) 
               GET Fae_a(a,a1) 
               t1ai(a,i) = t1a_old(a1,i)*Fae_a(a,a1) 
               tai(a,i) += t1ai(a,i) 
#
            ENDDO a1  
#
            DO i1 
#
               GET t1a_old(a,i1) 
               GET Fmi_a(i1,i) 
               t1ai(a,i) = t1a_old(a,i1)*Fmi_a(i1,i)
               tai(a,i) -= t1ai(a,i) 
#
            ENDDO i1  
#
            DO a1 
            DO i1 
#
               GET T2old_aa(a,i,a1,i1) 
               GET Fme_a(i1,a1) 
               t1ai(a,i) = T2old_aa(a,i,a1,i1)*Fme_a(i1,a1)
               tai(a,i) += t1ai(a,i) 
#
            ENDDO i1  
            ENDDO a1  
#
            DO a1 
            DO i1 
#
               GET Vaaii(a,a1,i1,i) 
               GET Viaai(i1,a1,a,i) 
               GET t1a_old(a1,i1) 
#
               Tpppp(i1,a1,a,i)  = Vaaii(a,a1,i1,i)  
               Tpppp(i1,a1,a,i) -= Viaai(i1,a1,a,i)  
#
               t1ai(a,i) = Tpppp(i1,a1,a,i)*t1a_old(a1,i1) 
               tai(a,i) -= t1ai(a,i) 
#
            ENDDO i1 
            ENDDO a1 
#
            DO a1 
            DO a2 
            DO i1 
#
               GET VSaaai(a2,a,a1,i1) 
               GET t2old_aa(a1,i,a2,i1) 
#
               t1ai(a,i)  = VSaaai(a2,a,a1,i1)*t2old_aa(a1,i,a2,i1) 
               t1ai(a,i) *= -0.5 
               tai(a,i)  += t1ai(a,i) 
#
            ENDDO i1 
            ENDDO a2 
            ENDDO a1 
#
            DO a1 
            DO i1 
            DO i2 
#
               GET VSpipi(a1,i2,i,i1) 
               GET t2old_aa(a,i1,a1,i2) 
#
               t1ai(a,i)  = VSpipi(a1,i2,i,i1)*t2old_aa(a,i1,a1,i2) 
               t1ai(a,i) *= -0.5 
               tai(a,i)  += t1ai(a,i) 
#
            ENDDO i2 
            ENDDO i1 
            ENDDO a1 
#
            DO b 
            DO j 
#
               GET T2old_ab(a,i,b,j) 
               GET Fme_b(j,b) 
               t1ai(a,i) = T2old_ab(a,i,b,j)*Fme_b(j,b) 
               tai(a,i) += t1ai(a,i) 
#
            ENDDO j 
            ENDDO b 
#
            DO b 
            DO j 
#
               GET Viabj(i,a,b,j)  
               GET t1b_old(b,j) 
               t1ai(a,i)  = Viabj(i,a,b,j)*t1b_old(b,j) 
               tai(a,i) += t1ai(a,i) 
#
            ENDDO j 
            ENDDO b 
#
            DO a1 
            DO b 
            DO j 
#
               GET Vaabj(a1,a,b,j) 
               GET t2old_ab(a1,i,b,j) 
#
               t1ai(a,i)  = Vaabj(a1,a,b,j)*t2old_ab(a1,i,b,j) 
               tai(a,i)  += t1ai(a,i) 
#
            ENDDO j 
            ENDDO b 
            ENDDO a1 
#
            DO b 
            DO i1 
            DO j 
#
               GET Vpiqj(i,i1,b,j) 
               GET t2old_ab(a,i1,b,j) 
#
               t1ai(a,i)  = Vpiqj(i,i1,b,j)*t2old_ab(a,i1,b,j) 
               t1ai(a,i) *= -1.0 
               tai(a,i)  += t1ai(a,i) 
#
            ENDDO j 
            ENDDO i1 
            ENDDO b 
#
            execute energy_denominator tai(a,i) 
            PUT t1a_new(a,i) = tai(a,i) 
#
      ENDPARDO a, i 
#
      ENDPROC T1ANEW 
#     --------------
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# In the procedure T1BNEW all contributions to the singles amplitude t1b 
# are computed. 
#
      PROC T1BNEW 
#     -----------
#
      PARDO b, j 
#
            tbj(b,j) = 0.0 
# 
            DO b1 
#
               GET t1b_old(b1,j) 
               GET Fae_b(b,b1) 
               t1bj(b,j) = t1b_old(b1,j)*Fae_b(b,b1) 
               tbj(b,j) += t1bj(b,j) 
#
            ENDDO b1  
#
            DO j1 
#
               GET t1b_old(b,j1) 
               GET Fmi_b(j1,j) 
               t1bj(b,j) = t1b_old(b,j1)*Fmi_b(j1,j)
               tbj(b,j) -= t1bj(b,j) 
#
            ENDDO j1  
#
            DO b1 
            DO j1 
#
               GET T2old_bb(b,j,b1,j1) 
               GET Fme_b(j1,b1) 
               t1bj(b,j) = T2old_bb(b,j,b1,j1)*Fme_b(j1,b1)
               tbj(b,j) += t1bj(b,j) 
#
            ENDDO j1  
            ENDDO b1  
#
            DO a 
            DO i 
#
               GET T2old_ab(a,i,b,j) 
               GET Fme_a(i,a) 
               t1bj(b,j) = T2old_ab(a,i,b,j)*Fme_a(i,a) 
               tbj(b,j) += t1bj(b,j) 
#
            ENDDO i 
            ENDDO a 
#
            DO b1 
            DO j1 
#
               GET Vbbjj(b,b1,j1,j) 
               GET Vjbbj(j1,b1,b,j) 
#
               Tqqqq(j1,b1,b,j)  = Vbbjj(b,b1,j1,j)  
               Tqqqq(j1,b1,b,j) -= Vjbbj(j1,b1,b,j)  
#
               GET t1b_old(b1,j1) 
               t1bj(b,j) = Tqqqq(j1,b1,b,j)*t1b_old(b1,j1) 
               tbj(b,j) -= t1bj(b,j) 
#
            ENDDO j1 
            ENDDO b1 
#
            DO a 
            DO i 
#
               GET Viabj(i,a,b,j)  
               GET t1a_old(a,i) 
#
               t1bj(b,j)  = Viabj(i,a,b,j)*t1a_old(a,i) 
               tbj(b,j) += t1bj(b,j) 
#
            ENDDO i 
            ENDDO a 
#
            DO b1 
            DO b2 
            DO j1 
#
               GET VSbbbj(b2,b,b1,j1) 
               GET t2old_bb(b1,j,b2,j1) 
#
               t1bj(b,j)  = VSbbbj(b2,b,b1,j1)*t2old_bb(b1,j,b2,j1) 
               t1bj(b,j) *= -0.5 
               tbj(b,j)  += t1bj(b,j) 
#
            ENDDO j1 
            ENDDO b2 
            ENDDO b1 
#
            DO b1 
            DO a 
            DO i 
#
               GET Vbbai(b1,b,a,i) 
               GET T2old_ab(a,i,b1,j) 
#
               t1bj(b,j)  = Vbbai(b1,b,a,i)*T2old_ab(a,i,b1,j) 
               tbj(b,j)  += t1bj(b,j) 
#
            ENDDO i 
            ENDDO a 
            ENDDO b1 
#
            DO b1 
            DO j1 
            DO j2 
#
               GET VSqjqj(b1,j2,j,j1) 
               GET t2old_bb(b,j1,b1,j2) 
#
               t1bj(b,j)  = VSqjqj(b1,j2,j,j1)*t2old_bb(b,j1,b1,j2) 
               t1bj(b,j) *= -0.5 
               tbj(b,j)  += t1bj(b,j) 
#
            ENDDO j2 
            ENDDO j1 
            ENDDO b1 
#
            DO a 
            DO j1 
            DO i 
#
               GET Vpiqj(a,i,j,j1)  
               GET t2old_ab(a,i,b,j1)  
#
               t1bj(b,j)  =  Vpiqj(a,i,j,j1)*t2old_ab(a,i,b,j1) 
               t1bj(b,j) *= -1.0 
               tbj(b,j)  += t1bj(b,j) 
#
            ENDDO i 
            ENDDO j1 
            ENDDO a 
#
            execute energy_denominator tbj(b,j) 
            PUT t1b_new(b,j) = tbj(b,j) 
#
      ENDPARDO b, j 
#
      ENDPROC T1BNEW 
#     --------------
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
# 
      PROC WminjAA
#
      PARDO i2, i3, i1
#
            DO i
#
               IF i < i1
#
                  GET VSpipi(i2,i,i3,i1)
                  Tiiii(i2,i,i3,i1) = VSpipi(i2,i,i3,i1)
#
                  DO a
#
                     GET VSpipi(a,i3,i,i2)
                     GET VSpipi(a,i3,i1,i2)
                     GET t1a_old(a,i1)
                     GET t1a_old(a,i)
#
                     T1iiii(i2,i,i3,i1) = VSpipi(a,i3,i,i2)*t1a_old(a,i1)
                     Tiiii(i2,i,i3,i1) += T1iiii(i2,i,i3,i1)
#
                     T1iiii(i2,i,i3,i1) = VSpipi(a,i3,i1,i2)*t1a_old(a,i)
                     Tiiii(i2,i,i3,i1) -= T1iiii(i2,i,i3,i1)
#
                     DO a1
#
                        GET Tau_aa(a,i,a1,i1)
                        GET VSpipi(a,i2,a1,i3)
#
                        T1iiii(i2,i,i3,i1) = VSpipi(a,i2,a1,i3)*Tau_aa(a,i,a1,i1)
                        T1iiii(i2,i,i3,i1)*= 0.25
                        Tiiii(i2,i,i3,i1) += T1iiii(i2,i,i3,i1)
#
                     ENDDO a1
#
                  ENDDO a
#
                  DO a
                  DO a1
#
                     GET Tau_aa(a,i2,a1,i3)
#
                     Taiai(a,i,a1,i1)        = Tau_aa(a,i2,a1,i3)*Tiiii(i2,i,i3,i1)
                     Taiai(a,i,a1,i1)       *= 0.5
                     T1aiai(a1,i1,a,i)       = Taiai(a,i,a1,i1)
                     PUT T2new_aa(a,i,a1,i1) += Taiai(a,i,a1,i1)
                     PUT T2new_aa(a1,i1,a,i) += T1aiai(a1,i1,a,i)
#
                  ENDDO a1
                  ENDDO a
#
               ENDIF # i < i1
#
               IF i == i1
#
                  GET VSpipi(i2,i,i3,i1)
                  Tiiii(i2,i,i3,i1) = VSpipi(i2,i,i3,i1)
#
                  DO a
#
                     GET VSpipi(a,i3,i,i2)
                     GET VSpipi(a,i3,i1,i2)
                     GET t1a_old(a,i1)
                     GET t1a_old(a,i)
#
                     T1iiii(i2,i,i3,i1) = VSpipi(a,i3,i,i2)*t1a_old(a,i1)
                     Tiiii(i2,i,i3,i1) += T1iiii(i2,i,i3,i1)
#
                     T1iiii(i2,i,i3,i1) = VSpipi(a,i3,i1,i2)*t1a_old(a,i)
                     Tiiii(i2,i,i3,i1) -= T1iiii(i2,i,i3,i1)
#
                     DO a1
#
                        GET Tau_aa(a,i,a1,i1)
                        GET VSpipi(a,i2,a1,i3)
#
                        T1iiii(i2,i,i3,i1) = VSpipi(a,i2,a1,i3)*Tau_aa(a,i,a1,i1)
                        T1iiii(i2,i,i3,i1)*= 0.25
                        Tiiii(i2,i,i3,i1) += T1iiii(i2,i,i3,i1)
#
                     ENDDO a1
#
                  ENDDO a
#
                  DO a
                  DO a1
#
                     GET Tau_aa(a,i2,a1,i3)
#
                     Taiai(a,i,a1,i1)         = Tau_aa(a,i2,a1,i3)*Tiiii(i2,i,i3,i1)
                     Taiai(a,i,a1,i1)        *= 0.5
                     PUT T2new_aa(a,i,a1,i1) += Taiai(a,i,a1,i1)
#
                  ENDDO a1
                  ENDDO a
#
               ENDIF # i == i1
#
            ENDDO i
#
      ENDPARDO i2, i3, i1
#
      ENDPROC WminjAA
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
# 
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
      PROC WminjBB 
#
      PARDO j1, j2, j3 
#
            DO j 
#
               IF j < j1 
#
                  GET VSqjqj(j2,j,j3,j1) 
                  Tjjjj(j2,j,j3,j1) = VSqjqj(j2,j,j3,j1)  
#
                  DO b 
#
                     GET VSqjqj(b,j3,j,j2) 
                     GET VSqjqj(b,j3,j1,j2) 
                     GET t1b_old(b,j1) 
                     GET t1b_old(b,j) 
#
                     T1jjjj(j2,j,j3,j1) = VSqjqj(b,j3,j,j2)*t1b_old(b,j1) 
                     Tjjjj(j2,j,j3,j1) += T1jjjj(j2,j,j3,j1) 
#
                     T1jjjj(j2,j,j3,j1) = VSqjqj(b,j3,j1,j2)*t1b_old(b,j) 
                     Tjjjj(j2,j,j3,j1) -= T1jjjj(j2,j,j3,j1) 
#
                     DO b1  
#
                        GET Tau_bb(b,j,b1,j1) 
                        GET VSqjqj(b,j2,b1,j3) 
#
                        T1jjjj(j2,j,j3,j1) = VSqjqj(b,j2,b1,j3)*Tau_bb(b,j,b1,j1)
                        T1jjjj(j2,j,j3,j1)*= 0.25 
                        Tjjjj(j2,j,j3,j1) += T1jjjj(j2,j,j3,j1) 
#
                     ENDDO b1 
#
                  ENDDO b 
#
                  DO b 
                  DO b1 
#
                     GET Tau_bb(b,j2,b1,j3)
#
                     Tbjbj(b,j,b1,j1)         = Tau_bb(b,j2,b1,j3)*Tjjjj(j2,j,j3,j1) 
                     Tbjbj(b,j,b1,j1)        *= 0.5 
                     T1bjbj(b1,j1,b,j)        = Tbjbj(b,j,b1,j1)  
                     PUT T2new_bb(b,j,b1,j1) += Tbjbj(b,j,b1,j1) 
                     PUT T2new_bb(b1,j1,b,j) += T1bjbj(b1,j1,b,j)  
#
                  ENDDO b1 
                  ENDDO b 
#
               ENDIF # j < j1 
#
               IF j == j1 
#
                  GET VSqjqj(j2,j,j3,j1) 
                  Tjjjj(j2,j,j3,j1) = VSqjqj(j2,j,j3,j1)  
#
                  DO b 
#
                     GET VSqjqj(b,j3,j,j2) 
                     GET VSqjqj(b,j3,j1,j2) 
                     GET t1b_old(b,j1) 
                     GET t1b_old(b,j) 
#
                     T1jjjj(j2,j,j3,j1) = VSqjqj(b,j3,j,j2)*t1b_old(b,j1) 
                     Tjjjj(j2,j,j3,j1) += T1jjjj(j2,j,j3,j1) 
#
                     T1jjjj(j2,j,j3,j1) = VSqjqj(b,j3,j1,j2)*t1b_old(b,j) 
                     Tjjjj(j2,j,j3,j1) -= T1jjjj(j2,j,j3,j1) 
#
                     DO b1  
#
                        GET Tau_bb(b,j,b1,j1) 
                        GET VSqjqj(b,j2,b1,j3) 
#
                        T1jjjj(j2,j,j3,j1) = VSqjqj(b,j2,b1,j3)*Tau_bb(b,j,b1,j1) 
                        T1jjjj(j2,j,j3,j1)*= 0.25 
                        Tjjjj(j2,j,j3,j1) += T1jjjj(j2,j,j3,j1) 
#
                     ENDDO b1 
#
                  ENDDO b 
#
                  DO b 
                  DO b1 
#
                     GET Tau_bb(b,j2,b1,j3)
#
                     Tbjbj(b,j,b1,j1)         = Tau_bb(b,j2,b1,j3)*Tjjjj(j2,j,j3,j1) 
                     Tbjbj(b,j,b1,j1)        *= 0.5 
                     PUT T2new_bb(b,j,b1,j1) += Tbjbj(b,j,b1,j1) 
#
                  ENDDO b1 
                  ENDDO b 
#
               ENDIF # j == j1 
#
            ENDDO j 
#
      ENDPARDO j1, j2, j3 
#
      ENDPROC WminjBB 
# 
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
# 
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
      PROC WminjAB 
#
      PARDO i, i1, j, j1 
#
            GET Vpiqj(i1,i,j1,j) 
            Tiijj(i1,i,j1,j) = Vpiqj(i1,i,j1,j) 
#
            DO b 
#
               GET Vpiqj(i,i1,b,j1) 
               GET t1b_old(b,j) 
#
               T1iijj(i1,i,j1,j) = Vpiqj(i,i1,b,j1)*t1b_old(b,j) 
               Tiijj(i1,i,j1,j) += T1iijj(i1,i,j1,j) 
#
            ENDDO b 
#
            DO a   
#
               GET Vpiqj(a,i1,j,j1) 
               GET t1a_old(a,i) 
# 
               T1iijj(i1,i,j1,j) = Vpiqj(a,i1,j,j1)*t1a_old(a,i) 
               Tiijj(i1,i,j1,j) += T1iijj(i1,i,j1,j) 
# 
               DO b  
#
                  GET Tau_ab(a,i,b,j)
                  GET Vpiqj(a,i1,b,j1) 
#
                  T1iijj(i1,i,j1,j) = Tau_ab(a,i,b,j)*Vpiqj(a,i1,b,j1) 
                  T1iijj(i1,i,j1,j)*= 0.5 
                  Tiijj(i1,i,j1,j) += T1iijj(i1,i,j1,j) 
#
               ENDDO b 
#
            ENDDO a 
#
            DO a   
            DO b  
#
               GET Tau_ab(a,i1,b,j1) 
#
               Taibj(a,i,b,j)         = Tau_ab(a,i1,b,j1)*Tiijj(i1,i,j1,j)  
               PUT T2new_ab(a,i,b,j) += Taibj(a,i,b,j) 
#
            ENDDO b 
            ENDDO a  
#
      ENDPARDO i, i1, j, j1 
#
      ENDPROC WminjAB 
# 
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
      PROC WMINJ 
#
           CALL WminjAA 
           CALL WminjAB 
           CALL WminjBB 
#
      ENDPROC WMINJ 
# 
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# In PROCEDURE T2NEWAA the new amplitudes T2new_aa are computed. Contributions 
# involving large two-particle intermediates are computed in the corresponding  
# procedures where these intermediates(temp) are computed. Thus the 
# intermediate Wminj is stored and its contribution computed here.  
#
# Contributions coming from P_(ij)P_(ab)t^e_i t^a_m <mb||ej> are computed 
# elsewhere. 
#
# The new amplitudes T2new_aa are FIRST updated in this procedure and 
# therefore created at the begining of the procedure. 
#
      PROC T2NEWAA    
#     ------------
#
      CREATE T2new_aa 
      EXECUTE SIP_BARRIER T2NEW_AA 
#
      PARDO a, i, a1, i1 
#
            GET VSpipi(a,i,a1,i1) 
#
            Taiai(a,i,a1,i1)   = VSpipi(a,i,a1,i1) 
            TYaiai(a1,i,a,i1)  = 0.0 
            TY1aiai(a,i1,a1,i) = 0.0 
#
            DO a2 
#
                GET T2old_aa(a,i,a2,i1) 
                GET Fae_a(a1,a2) 
                tmp_aa(a1,a2) = Fae_a(a1,a2) 
#
                DO i2 
#
                   GET t1a_old(a1,i2) 
                   GET Fme_a(i2,a2) 
                   tmp1_aa(a1,a2)  = t1a_old(a1,i2)*Fme_a(i2,a2) 
                   tmp1_aa(a1,a2) *= -0.5  
                   tmp_aa(a1,a2)  += tmp1_aa(a1,a2) 
#
                ENDDO i2 
#
                T1aiai(a,i,a1,i1) = T2old_aa(a,i,a2,i1)*tmp_aa(a1,a2) 
                T2aiai(a1,i,a,i1) = T1aiai(a,i,a1,i1)  
                Taiai(a,i,a1,i1) += T1aiai(a,i,a1,i1) 
                TYaiai(a1,i,a,i1)-= T2aiai(a1,i,a,i1)  
#
            ENDDO a2 
#
            DO i2 
#
               GET T2old_aa(a,i,a1,i2) 
               GET Fmi_a(i2,i1) 
               tmp_ii(i2,i1) = Fmi_a(i2,i1) 
#
               DO a2 
#
                  GET t1a_old(a2,i1) 
                  GET Fme_a(i2,a2) 
                  tmp1_ii(i2,i1) = t1a_old(a2,i1)*Fme_a(i2,a2) 
                  tmp1_ii(i2,i1) *= 0.5  
                  tmp_ii(i2,i1)  += tmp1_ii(i2,i1) 
#
               ENDDO a2 
#
               T1aiai(a,i,a1,i1)  = T2old_aa(a,i,a1,i2)*tmp_ii(i2,i1)  
               T2aiai(a,i1,a1,i)  = T1aiai(a,i,a1,i1) 
               Taiai(a,i,a1,i1)  -= T1aiai(a,i,a1,i1) 
               TY1aiai(a,i1,a1,i)+= T2aiai(a,i1,a1,i)  
#
            ENDDO i2 
#
            DO a2 
#
               GET VSaaai(a,a2,a1,i1) 
               GET t1a_old(a2,i) 
#
               T1aiai(a,i,a1,i1) = VSaaai(a,a2,a1,i1)*t1a_old(a2,i) 
               T2aiai(a,i1,a1,i) = T1aiai(a,i,a1,i1)  
#
               Taiai(a,i,a1,i1)  += T1aiai(a,i,a1,i1) 
               TY1aiai(a,i1,a1,i)-= T2aiai(a,i1,a1,i) 
#
            ENDDO a2 
#
            DO i2 
#
               GET VSpipi(i2,i,a1,i1) 
               GET t1a_old(a,i2) 
#
               T1aiai(a,i,a1,i1) = VSpipi(i2,i,a1,i1)*t1a_old(a,i2) 
               T2aiai(a1,i,a,i1) = T1aiai(a,i,a1,i1) 
# 
               Taiai(a,i,a1,i1)  -= T1aiai(a,i,a1,i1) 
               TYaiai(a1,i,a,i1) += T2aiai(a1,i,a,i1) 
#
            ENDDO i2 
#
            PUT T2NEW_aa(a,i,a1,i1) += Taiai(a,i,a1,i1) 
            PUT T2NEW_aa(a1,i,a,i1) += TYaiai(a1,i,a,i1) 
            PUT T2NEW_aa(a,i1,a1,i) += TY1aiai(a,i1,a1,i) 
#
      ENDPARDO a, i, a1, i1 
#
      EXECUTE SIP_BARRIER T2NEW_AA 
#
      ENDPROC T2NEWAA    
#     ---------------
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# In PROCEDURE T2NEWBB the new amplitudes T2new_bb are computed. Contributions 
# involving large two-particle intermediates are computed in the corresponding  
# procedures where these intermediates(temp) are computed. Thus the 
# intermediate Wminj is stored and its contribution computed here.  
#
# Contributions coming from P_(ij)P_(ab)t^e_i t^a_m <mb||ej> are computed 
# elsewhere. 
#
# The new amplitudes T2new_aa are FIRST updated in this procedure and 
# therefore created ate the begining of the procedure. 
#
      PROC T2NEWBB    
#     ------------
#
      CREATE T2new_bb 
      EXECUTE SIP_BARRIER T2NEW_BB
#
      PARDO b, j, b1, j1 
#
            GET VSqjqj(b,j,b1,j1) 
#
            Tbjbj(b,j,b1,j1)   = Vsqjqj(b,j,b1,j1) 
            TYbjbj(b1,j,b,j1)  =  0.0 
            TY1bjbj(b,j1,b1,j) =  0.0 
#
            DO b2 
#
               GET VSbbbj(b,b2,b1,j1) 
               GET t1b_old(b2,j) 
               GET T2old_bb(b,j,b2,j1) 
               GET Fae_b(b1,b2) 
               tmp_bb(b1,b2) = Fae_b(b1,b2) 
#
               T1bjbj(b,j,b1,j1)   = VSbbbj(b,b2,b1,j1)*t1b_old(b2,j) 
               T2bjbj(b,j1,b1,j)   = T1bjbj(b,j,b1,j1) 
# 
               Tbjbj(b,j,b1,j1)   += T1bjbj(b,j,b1,j1) 
               TY1bjbj(b,j1,b1,j) -= T2bjbj(b,j1,b1,j)  
#
                DO j2 
#
                   GET t1b_old(b1,j2) 
                   GET Fme_b(j2,b2) 
                   tmp1_bb(b1,b2)  = t1b_old(b1,j2)*Fme_b(j2,b2) 
                   tmp1_bb(b1,b2) *= -0.5  
                   tmp_bb(b1,b2)  += tmp1_bb(b1,b2) 
#
                ENDDO j2 
#
                T1bjbj(b,j,b1,j1)  = T2old_bb(b,j,b2,j1)*tmp_bb(b1,b2) 
                T2bjbj(b1,j,b,j1)  = T1bjbj(b,j,b1,j1) 
# 
                Tbjbj(b,j,b1,j1)  += T1bjbj(b,j,b1,j1) 
                TYbjbj(b1,j,b,j1) -= T2bjbj(b1,j,b,j1) 
#
            ENDDO b2 
#
            DO j2 
#
               GET T2old_bb(b,j,b1,j2) 
               GET Fmi_b(j2,j1) 
               GET VSqjqj(j2,j,b1,j1) 
               GET t1b_old(b,j2) 
               tmp_jj(j2,j1) = Fmi_b(j2,j1) 
#
               T1bjbj(b,j,b1,j1)  = VSqjqj(j2,j,b1,j1)*t1b_old(b,j2) 
               T2bjbj(b1,j,b,j1)  = T1bjbj(b,j,b1,j1) 
#  
               Tbjbj(b,j,b1,j1)  -= T1bjbj(b,j,b1,j1) 
               TYbjbj(b1,j,b,j1) += T2bjbj(b1,j,b,j1) 
#
               DO b2 
#
                  GET t1b_old(b2,j1) 
                  GET Fme_b(j2,b2) 
                  tmp1_jj(j2,j1)  = t1b_old(b2,j1)*Fme_b(j2,b2) 
                  tmp1_jj(j2,j1) *= 0.5  
                  tmp_jj(j2,j1)  += tmp1_jj(j2,j1) 
#
               ENDDO b2 
#
               T1bjbj(b,j,b1,j1)   = T2old_bb(b,j,b1,j2)*tmp_jj(j2,j1)  
               T2bjbj(b,j1,b1,j)   = T1bjbj(b,j,b1,j1)  
#
               Tbjbj(b,j,b1,j1)   -= T1bjbj(b,j,b1,j1) 
               TY1bjbj(b,j1,b1,j) += T2bjbj(b,j1,b1,j) 
#
            ENDDO j2 
#
            PUT T2NEW_bb(b,j,b1,j1) += Tbjbj(b,j,b1,j1)  
            PUT T2NEW_bb(b1,j,b,j1) += TYbjbj(b1,j,b,j1) 
            PUT T2NEW_bb(b,j1,b1,j) += TY1bjbj(b,j1,b1,j) 
#
      ENDPARDO b, j, b1, j1 
#
      EXECUTE SIP_BARRIER T2NEW_BB 
#
      ENDPROC T2NEWBB    
#     ---------------
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# In PROCEDURE T2NEWAB the new amplitudes T2new_ab are computed. Contributions 
# involving large two-particle intermediates are computed in the corresponding  
# procedures where these intermediates(temp) are computed. Thus the 
# intermediate Wminj is stored and its contribution computed here.  
#
# Contributions coming from P_(ij)P_(ab)t^e_i t^a_m <mb||ej> are computed 
# elsewhere. 
#
      PROC T2NEWAB    
#     ------------
#
      CREATE T2new_ab 
      EXECUTE SIP_BARRIER T2NEW_AB 
#
      PARDO a, i, b, j 
#
            GET Vpiqj(a,i,b,j) 
            Taibj(a,i,b,j) = Vpiqj(a,i,b,j) 
#
            DO b1 
#
               GET T2old_ab(a,i,b1,j) 
               GET Fae_b(b,b1) 
               tmp_bb(b,b1) = Fae_b(b,b1)    
#
               DO j1 
#
                  GET t1b_old(b,j1) 
                  GET Fme_b(j1,b1) 
#
                  tmp1_bb(b,b1)  = t1b_old(b,j1)*Fme_b(j1,b1) 
                  tmp1_bb(b,b1) *= 0.5 
                  tmp_bb(b,b1)  -= tmp1_bb(b,b1)  
#
               ENDDO j1 
#
               T1aibj(a,i,b,j) = T2old_ab(a,i,b1,j)*tmp_bb(b,b1)  
               Taibj(a,i,b,j) += T1aibj(a,i,b,j) 
#
            ENDDO b1 
#
            DO a1 
#
               GET T2old_ab(a1,i,b,j) 
               GET Fae_a(a,a1) 
               tmp_aa(a,a1) = Fae_a(a,a1)    
#
               DO i1 
#
                  GET t1a_old(a,i1) 
                  GET Fme_a(i1,a1) 
                  tmp1_aa(a,a1)  = t1a_old(a,i1)*Fme_a(i1,a1) 
                  tmp1_aa(a,a1) *= 0.5 
                  tmp_aa(a,a1)  -= tmp1_aa(a,a1)  
#
               ENDDO i1 
#
               T1aibj(a,i,b,j) = T2old_ab(a1,i,b,j)*tmp_aa(a,a1)  
               Taibj(a,i,b,j) += T1aibj(a,i,b,j) 
#
            ENDDO a1 
#
            DO j2 
#
               GET T2old_ab(a,i,b,j2) 
               GET Fmi_b(j2,j) 
               tmp_jj(j2,j) = Fmi_b(j2,j)  
#
               DO b2 
#
                  GET t1b_old(b2,j) 
                  GET Fme_b(j2,b2) 
                  tmp1_jj(j2,j)  = t1b_old(b2,j)*Fme_b(j2,b2) 
                  tmp1_jj(j2,j) *= 0.5 
                  tmp_jj(j2,j)  += tmp1_jj(j2,j) 
#
               ENDDO b2 
#
               T1aibj(a,i,b,j) = T2old_ab(a,i,b,j2)*tmp_jj(j2,j)  
               Taibj(a,i,b,j) -= T1aibj(a,i,b,j) 
#
            ENDDO j2 
#
            DO i1 
#
               GET T2old_ab(a,i1,b,j)
               GET Fmi_a(i1,i) 
               tmp_ii(i1,i) = Fmi_a(i1,i) 
#
               DO a1 
#
                  GET t1a_old(a1,i) 
                  GET Fme_a(i1,a1) 
#
                  tmp1_ii(i1,i)  = t1a_old(a1,i)*Fme_a(i1,a1) 
                  tmp1_ii(i1,i) *= 0.5 
                  tmp_ii(i1,i)  += tmp1_ii(i1,i) 
#
               ENDDO a1  
#
               T1aibj(a,i,b,j) = T2old_ab(a,i1,b,j)*tmp_ii(i1,i) 
               Taibj(a,i,b,j) -= T1aibj(a,i,b,j) 
#
            ENDDO i1 
#
            DO a1 
#
               GET Vaabj(a,a1,b,j) 
               GET t1a_old(a1,i) 
#
               T1aibj(a,i,b,j) = Vaabj(a,a1,b,j)*t1a_old(a1,i)  
               Taibj(a,i,b,j) += T1aibj(a,i,b,j) 
#
            ENDDO a1 
#
            DO b1 
#
               GET Vbbai(b,b1,a,i) 
               GET t1b_old(b1,j) 
#
               T1aibj(a,i,b,j) = Vbbai(b,b1,a,i)*t1b_old(b1,j)  
               Taibj(a,i,b,j) += T1aibj(a,i,b,j) 
#
            ENDDO b1 
#
            DO i1 
#
               GET Vpiqj(i1,i,b,j) 
               GET t1a_old(a,i1) 
#
               T1aibj(a,i,b,j) = Vpiqj(i1,i,b,j)*t1a_old(a,i1) 
               Taibj(a,i,b,j) -= T1aibj(a,i,b,j) 
#
            ENDDO i1 
#
            DO j1 
#
               GET Vpiqj(a,i,j1,j) 
               GET t1b_old(b,j1) 
#
               T1aibj(a,i,b,j) = Vpiqj(a,i,j1,j)*t1b_old(b,j1) 
               Taibj(a,i,b,j) -= T1aibj(a,i,b,j) 
#
            ENDDO j1 
#
            PUT T2NEW_AB(a,i,b,j) += Taibj(a,i,b,j)  
#
      ENDPARDO a, i, b, j 
#
      EXECUTE SIP_BARRIER T2NEW_AB 
#
      ENDPROC T2NEWAB    
#     ---------------
#
# --------------------------------------------------------------------------- 
#
# --------------------------------------------------------------------------- 
# 
# This SUPER procedure contains the procedures WAEBFAA, WAEBFBB, and 
# WAEBFAB which compute the contributions to these intermediates INCluding  
# the terms containing the 4-virtual integrals. The intermediates are 
# computed as temporary arrays and used to update the amplitudes as they 
# are formed. 
#
# --------------------------------------------------------------------------- 
#
# --------------------------------------------------------------------------- 
#
      PROC WAEBFAA 
#     ------------ 
#
      PARDO a, a1, a2, a3
#
            GET                  VSaaaa(a,a1,a2,a3)
            Taaaa(a,a1,a2,a3)  = VSaaaa(a,a1,a2,a3) 
            T1aaaa(a1,a,a3,a2) = 0.0 
            T2aaaa(a1,a2,a3,a) = 0.0 
#
            DO i
#
               GET VSaaai(a1,a,a3,i)
               GET VSaaai(a1,a2,a3,i)
               GET t1a_old(a2,i)
               GET t1a_old(a,i)
#
               T4aaaa(a1,a,a3,a2)  = VSaaai(a1,a,a3,i)*t1a_old(a2,i)
               T1aaaa(a1,a,a3,a2) -= T4aaaa(a1,a,a3,a2)
#
               T4aaaa(a1,a2,a3,a)  = VSaaai(a1,a2,a3,i)*t1a_old(a,i)
               T2aaaa(a1,a2,a3,a) += T4aaaa(a1,a2,a3,a)
#
            ENDDO i
#
            T4aaaa(a,a1,a2,a3) = T1aaaa(a1,a,a3,a2) 
            Taaaa(a,a1,a2,a3) += T4aaaa(a,a1,a2,a3) 
#
            T4aaaa(a,a1,a2,a3) = T2aaaa(a1,a2,a3,a) 
            Taaaa(a,a1,a2,a3) += T4aaaa(a,a1,a2,a3) 
#
# Compute contribution to the amplitudes
# --------------------------------------
#
            DO i
            DO i2
#
               GET Tau_aa(a1,i,a3,i2)
#
               R1aiai(a,i,a2,i2)        = Taaaa(a,a1,a2,a3)*Tau_aa(a1,i,a3,i2)
               R1aiai(a,i,a2,i2)       *= 0.5
               PUT T2new_aa(a,i,a2,i2) += R1aiai(a,i,a2,i2)
#
            ENDDO i2
            ENDDO i
#
      ENDPARDO a, a1, a2, a3
#
# Contribution including Tau**2 
# ----------------------------- 
#
      PARDO i, i1, i2, i3 
#
            Tiiii(i,i3,i2,i1) = 0.0 
#
            DO a1 
            DO a3 
#
               GET VSpipi(a1,i3,a3,i1) 
               GET Tau_aa(a1,i,a3,i2) 
#
               T1iiii(i,i3,i2,i1) = Tau_aa(a1,i,a3,i2)*VSpipi(a1,i3,a3,i1) 
               Tiiii(i,i3,i2,i1) += T1iiii(i,i3,i2,i1)  
#
            ENDDO a3 
            ENDDO a1 
#
            T1iiii(i,i3,i1,i2)  = Tiiii(i,i3,i2,i1) 
            T1iiii(i,i3,i1,i2) *= 0.125  
#
            DO a 
            DO a2 
#
               GET Tau_aa(a,i3,a2,i1)  
# 
               R1aiai(a,i,a2,i2)        = Tau_aa(a,i3,a2,i1)*T1iiii(i,i3,i1,i2)  
               PUT T2new_aa(a,i,a2,i2) += R1aiai(a,i,a2,i2)  
#
            ENDDO a2 
            ENDDO a 
#
      ENDPARDO i, i1, i2, i3 
#
      ENDPROC WAEBFAA 
#     ----------------
#
# --------------------------------------------------------------------------- 
#
# --------------------------------------------------------------------------- 
#
      PROC WAEBFBB 
#     ------------ 
#
      PARDO b, b1, b2, b3
#
            GET                  VSbbbb(b,b1,b2,b3)
            Tbbbb(b,b1,b2,b3)  = VSbbbb(b,b1,b2,b3) 
            T1bbbb(b1,b,b3,b2) = 0.0 
            T2bbbb(b1,b2,b3,b) = 0.0 
#
            DO j
#
               GET VSbbbj(b1,b,b3,j)
               GET VSbbbj(b1,b2,b3,j)
               GET t1b_old(b2,j)
               GET t1b_old(b,j)
#
               T4bbbb(b1,b,b3,b2)  = VSbbbj(b1,b,b3,j)*t1b_old(b2,j)
               T1bbbb(b1,b,b3,b2) -= T4bbbb(b1,b,b3,b2)
#
               T4bbbb(b1,b2,b3,b)  = VSbbbj(b1,b2,b3,j)*t1b_old(b,j)
               T2bbbb(b1,b2,b3,b) += T4bbbb(b1,b2,b3,b)
#
            ENDDO j
#
            T4bbbb(b,b1,b2,b3) = T1bbbb(b1,b,b3,b2) 
            Tbbbb(b,b1,b2,b3) += T4bbbb(b,b1,b2,b3) 
#
            T4bbbb(b,b1,b2,b3) = T2bbbb(b1,b2,b3,b) 
            Tbbbb(b,b1,b2,b3) += T4bbbb(b,b1,b2,b3) 
#
# Compute contribution to the amplitudes
# --------------------------------------
#
            DO j
            DO j2
#
               GET Tau_bb(b1,j,b3,j2)
#
               R1bjbj(b,j,b2,j2)        = Tbbbb(b,b1,b2,b3)*Tau_bb(b1,j,b3,j2)
               R1bjbj(b,j,b2,j2)       *= 0.5
               PUT T2new_bb(b,j,b2,j2) += R1bjbj(b,j,b2,j2)
#
            ENDDO j2
            ENDDO j
#
      ENDPARDO b, b1, b2, b3
#
# Contribution including Tau**2 
# ----------------------------- 
#
      PARDO j, j1, j2, j3 
#
            Tjjjj(j,j3,j2,j1) = 0.0 
#
            DO b1 
            DO b3 
#
               GET VSqjqj(b1,j3,b3,j1) 
               GET Tau_bb(b1,j,b3,j2) 
#
               T1jjjj(j,j3,j2,j1) = Tau_bb(b1,j,b3,j2)*VSqjqj(b1,j3,b3,j1) 
               Tjjjj(j,j3,j2,j1) += T1jjjj(j,j3,j2,j1)  
#
            ENDDO b3 
            ENDDO b1 
#
            T1jjjj(j,j3,j1,j2)  = Tjjjj(j,j3,j2,j1) 
            T1jjjj(j,j3,j1,j2) *= 0.125  
#
            DO b 
            DO b2 
#
               GET Tau_bb(b,j3,b2,j1)  
# 
               R1bjbj(b,j,b2,j2)        = Tau_bb(b,j3,b2,j1)*T1jjjj(j,j3,j1,j2)  
               PUT T2new_bb(b,j,b2,j2) += R1bjbj(b,j,b2,j2)  
#
            ENDDO b2 
            ENDDO b 
#
      ENDPARDO j, j1, j2, j3 
#
      ENDPROC WAEBFBB 
#     --------------- 
#
# --------------------------------------------------------------------------- 
#
# --------------------------------------------------------------------------- 
#
      PROC WAEBFAB 
#     ------------ 
#
      PARDO a, a1, b, b1
#
            GET                Vaabb(a,a1,b,b1)
            Tbbaa(b1,b,a1,a) = 0.0 
            Taabb(a1,a,b1,b) = 0.0 
#
            DO i
#
               GET Vbbai(b1,b,a1,i)
               GET t1a_old(a,i)
#
               T1bbaa(b1,b,a1,a) = Vbbai(b1,b,a1,i)*t1a_old(a,i)
               Tbbaa(b1,b,a1,a) -= T1bbaa(b1,b,a1,a)
#
            ENDDO i
#
            DO j
#
               GET Vaabj(a1,a,b1,j)
               GET t1b_old(b,j)
#
               T1aabb(a1,a,b1,b) = Vaabj(a1,a,b1,j)*t1b_old(b,j)
               Taabb(a1,a,b1,b) -= T1aabb(a1,a,b1,b)
#
            ENDDO j
#
            T1aabb(a,a1,b,b1) = Taabb(a1,a,b1,b) 
            Taabb(a,a1,b,b1)  = T1aabb(a,a1,b,b1)  
#
            T1aabb(a,a1,b,b1) = Tbbaa(b1,b,a1,a) 
            Taabb(a,a1,b,b1) += T1aabb(a,a1,b,b1)  
#
            Taabb(a,a1,b,b1) += Vaabb(a,a1,b,b1)  
#
            DO i
            DO j
#
               GET Tau_ab(a1,i,b1,j)
#
               R1aibj(a,i,b,j)        = Taabb(a,a1,b,b1)*Tau_ab(a1,i,b1,j)
               PUT T2new_ab(a,i,b,j) += R1aibj(a,i,b,j)
#
            ENDDO j
            ENDDO i
#
      ENDPARDO a, a1, b, b1
#
# Contribution including Tau**2 
# ----------------------------- 
#
      PARDO i, i1, j, j1  
#
            Tiijj(i,i1,j,j1) = 0.0  
#
            DO a1 
            DO b1 
#
               GET Vpiqj(a1,i1,b1,j1) 
               GET Tau_ab(a1,i,b1,j) 
#
               T1iijj(i,i1,j,j1) = Tau_ab(a1,i,b1,j)*Vpiqj(a1,i1,b1,j1) 
               Tiijj(i,i1,j,j1) += T1iijj(i,i1,j,j1)  
#
            ENDDO b1 
            ENDDO a1 
#
            Tiijj(i,i1,j,j1) *= 0.5  
#
            DO a 
            DO b 
#
               GET Tau_ab(a,i1,b,j1)  
# 
               R1aibj(a,i,b,j)        = Tau_ab(a,i1,b,j1)*Tiijj(i,i1,j,j1)  
               PUT T2new_ab(a,i,b,j) += R1aibj(a,i,b,j)  
#
            ENDDO b 
            ENDDO a 
#
      ENDPARDO i, i1, j, j1  
#
      ENDPROC WAEBFAB 
#     --------------- 
#
# --------------------------------------------------------------------------- 
#
# --------------------------------------------------------------------------- 
#
      PROC WAEBF 
#     ---------- 
# 
           CALL WAEBFAA 
           CALL WAEBFAB 
           CALL WAEBFBB 
#
      ENDPROC WAEBF 
#     ------------- 
#
# --------------------------------------------------------------------------- 
#
# --------------------------------------------------------------------------- 
#
# In the procedures WMEBJAA, WMEBJBB, WMEBJAB, and WMEBJBA these  
# intermediates are formed as temporary arrarys. The contribution to the 
# outout arrays is computed directly from these temporary arrays so 
# that the array is never stored.   
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
      PROC WMEBJAA 
#     ------------
#
      PARDO i1, a1, a, i 
#
            GET Viaai(i1,a1,a,i) 
            GET Vaaii(a,a1,i1,i) 
#
            Taiai(a1,i1,a,i)   = Vaaii(a,a1,i1,i) 
            TYaiai(a1,i1,a,i)  = Viaai(i1,a1,a,i) 
            TYaiai(a1,i1,a,i) -= Taiai(a1,i1,a,i)  
#
            DO a2  
#
               GET VSaaai(a2,a,a1,i1)  
               GET t1a_old(a2,i) 
#
               T1aiai(a1,i1,a,i)  = VSaaai(a2,a,a1,i1)*t1a_old(a2,i) 
               TYaiai(a1,i1,a,i) += T1aiai(a1,i1,a,i)  
#
               DO i2 
#
                  GET VSpipi(a1,i1,a2,i2) 
                  GET T2old_aa(a2,i,a,i2) 
                  GET t1a_old(a,i2) 
#
                  tai(a,i2)          = t1a_old(a,i2) 
                  T1aiai(a2,i2,a,i)  = t1a_old(a2,i)^tai(a,i2) 
                  T2aiai(a2,i2,a,i)  = t2old_aa(a2,i,a,i2) 
                  T2aiai(a2,i2,a,i) *= 0.5 
                  T2aiai(a2,i2,a,i) += T1aiai(a2,i2,a,i) 
#
                  T3aiai(a1,i1,a,i)  = VSpipi(a1,i1,a2,i2)*T2aiai(a2,i2,a,i) 
                  TYaiai(a1,i1,a,i) -= T3aiai(a1,i1,a,i)  
#
               ENDDO i2  
#
            ENDDO a2  
#
            DO i2 
#
               GET VSpipi(a1,i1,i,i2) 
               GET t1a_old(a,i2) 
#
               T1aiai(a1,i1,a,i)  = VSpipi(a1,i1,i,i2)*t1a_old(a,i2)  
               TYaiai(a1,i1,a,i) -= T1aiai(a1,i1,a,i)  
#
            ENDDO i2  
#
            DO b
            DO j
#
               GET Vpiqj(a1,i1,b,j)
               GET T2old_ab(a,i,b,j)
#
               T1aiai(a1,i1,a,i)  = Vpiqj(a1,i1,b,j)*T2old_ab(a,i,b,j)
               T1aiai(a1,i1,a,i) *= 0.5
#
               TYaiai(a1,i1,a,i) += T1aiai(a1,i1,a,i)
#
            ENDDO j
            ENDDO b
# 
# Contributions to T2new_aa 
# ------------------------- 
#
            DO i2 
            DO a2 
#
               GET T2old_aa(a2,i2,a1,i1) 
#
               R1aiai(a2,i2,a,i) = T2old_aa(a2,i2,a1,i1)*TYaiai(a1,i1,a,i) 
#
               R2aiai(a2,i,a,i2) = R1aiai(a2,i2,a,i) 
               R2aiai(a2,i,a,i2)*= -1.0  
               R3aiai(a,i2,a2,i) = R2aiai(a2,i,a,i2)  
               R4aiai(a,i,a2,i2) = R1aiai(a2,i2,a,i) 
#
               PUT T2new_aa(a2,i2,a,i) += R1aiai(a2,i2,a,i) 
               PUT T2new_aa(a2,i,a,i2) += R2aiai(a2,i,a,i2) 
               PUT T2new_aa(a,i2,a2,i) += R3aiai(a,i2,a2,i) 
               PUT T2new_aa(a,i,a2,i2) += R4aiai(a,i,a2,i2) 
#
            ENDDO a2
            ENDDO i2 
#
# Contributions to T2new_ab 
# ------------------------- 
#
            Taiai(a,i,a1,i1) = TYaiai(a1,i1,a,i) 
            DO b 
            DO j 
#
               GET T2old_ab(a1,i1,b,j) 
               R1aibj(a,i,b,j) = Taiai(a,i,a1,i1)*T2old_ab(a1,i1,b,j) 
#
               PUT T2new_ab(a,i,b,j) += R1aibj(a,i,b,j)
#
            ENDDO j 
            ENDDO b 
#
      ENDPARDO i1, a1, a, i 
#
      ENDPROC WMEBJAA 
#     ---------------
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
      PROC WMEBJBB 
#     ------------
#
      PARDO j1, b1, b, j 
#
            GET Vjbbj(j1,b1,b,j) 
            GET Vbbjj(b,b1,j1,j) 
#
            Tbjbj(b1,j1,b,j)   = Vbbjj(b,b1,j1,j) 
            TYbjbj(b1,j1,b,j)  = Vjbbj(j1,b1,b,j) 
            TYbjbj(b1,j1,b,j) -= Tbjbj(b1,j1,b,j)  
#
            DO b2  
#
               GET VSbbbj(b2,b,b1,j1)  
               GET t1b_old(b2,j) 
#
               T1bjbj(b1,j1,b,j)  = VSbbbj(b2,b,b1,j1)*t1b_old(b2,j) 
               TYbjbj(b1,j1,b,j) += T1bjbj(b1,j1,b,j)  
#
               DO j2 
#
                  GET VSqjqj(b1,j1,b2,j2) 
                  GET T2old_bb(b2,j,b,j2) 
                  GET t1b_old(b,j2) 
#
                  tbj(b,j2)          = t1b_old(b,j2) 
                  T1bjbj(b2,j2,b,j)  = t1b_old(b2,j)^tbj(b,j2) 
                  T2bjbj(b2,j2,b,j)  = t2old_bb(b2,j,b,j2) 
                  T2bjbj(b2,j2,b,j) *= 0.5 
                  T2bjbj(b2,j2,b,j) += T1bjbj(b2,j2,b,j) 
#
                  T3bjbj(b1,j1,b,j)  = VSqjqj(b1,j1,b2,j2)*T2bjbj(b2,j2,b,j) 
                  TYbjbj(b1,j1,b,j) -= T3bjbj(b1,j1,b,j)  
#
               ENDDO j2  
#
            ENDDO b2  
#
            DO j2 
#
               GET VSqjqj(b1,j1,j,j2) 
               GET t1b_old(b,j2) 
#
               T1bjbj(b1,j1,b,j)  = VSqjqj(b1,j1,j,j2)*t1b_old(b,j2)  
               TYbjbj(b1,j1,b,j) -= T1bjbj(b1,j1,b,j)  
#
            ENDDO j2  
#
            DO a
            DO i
#
               GET Vpiqj(a,i,b1,j1)
               GET T2old_ab(a,i,b,j)
#
               T1bjbj(b1,j1,b,j)  = Vpiqj(a,i,b1,j1)*T2old_ab(a,i,b,j)
               T1bjbj(b1,j1,b,j) *= 0.5
#
               TYbjbj(b1,j1,b,j) += T1bjbj(b1,j1,b,j)
#
            ENDDO i
            ENDDO a
#
# Contributions to T2new_bb 
# ------------------------- 
#
            DO j2 
            DO b2 
#
               GET T2old_bb(b2,j2,b1,j1) 
#
               R1bjbj(b2,j2,b,j) = T2old_bb(b2,j2,b1,j1)*TYbjbj(b1,j1,b,j) 
#
               R2bjbj(b2,j,b,j2) = R1bjbj(b2,j2,b,j) 
               R2bjbj(b2,j,b,j2)*= -1.0  
               R3bjbj(b,j2,b2,j) = R1bjbj(b2,j2,b,j) 
               R3bjbj(b,j2,b2,j)*= -1.0  
               R4bjbj(b,j,b2,j2) = R1bjbj(b2,j2,b,j) 
#
               PUT T2new_bb(b2,j2,b,j) += R1bjbj(b2,j2,b,j) 
               PUT T2new_bb(b2,j,b,j2) += R2bjbj(b2,j,b,j2) 
               PUT T2new_bb(b,j2,b2,j) += R3bjbj(b,j2,b2,j) 
               PUT T2new_bb(b,j,b2,j2) += R4bjbj(b,j,b2,j2) 
#
            ENDDO b2
            ENDDO j2 
#
# Contributions to T2new_ab 
# ------------------------- 
#
            DO a 
            DO i 
#
               GET T2old_ab(a,i,b1,j1) 
               R1aibj(a,i,b,j) = T2old_ab(a,i,b1,j1)*TYbjbj(b1,j1,b,j) 
#
               PUT T2new_ab(a,i,b,j) += R1aibj(a,i,b,j)
#
            ENDDO i 
            ENDDO a 
#
      ENDPARDO j1, b1, b, j 
#
      ENDPROC WMEBJBB 
#     ---------------
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
      PROC WMEBJAB 
#     ------------
#
      PARDO i, a, b, j 
#
            GET Viabj(i,a,b,j) 
            Tiabj(i,a,b,j) = Viabj(i,a,b,j) 
#
            DO j1 
#
               GET Vpiqj(a,i,j,j1) 
               GET t1b_old(b,j1) 
               T1iabj(i,a,b,j) = Vpiqj(a,i,j,j1)*t1b_old(b,j1) 
               Tiabj(i,a,b,j) -= T1iabj(i,a,b,j) 
#
            ENDDO j1 
#
            DO b1 
#
               GET Vbbai(b1,b,a,i) 
               GET t1b_old(b1,j) 
#
               T1iabj(i,a,b,j) = Vbbai(b1,b,a,i)*t1b_old(b1,j) 
               Tiabj(i,a,b,j) += T1iabj(i,a,b,j) 
#
               DO j1 
#
                  GET t2old_bb(b1,j,b,j1)
                  GET Vpiqj(a,i,b1,j1) 
                  GET t1b_old(b,j1) 
# 
                  T1bjbj(b1,j,b,j1)  = 0.5*T2old_bb(b1,j,b,j1) 
                  tbj(b,j1)          = t1b_old(b,j1) 
                  T2bjbj(b1,j,b,j1)  = t1b_old(b1,j)^tbj(b,j1) 
                  T1bjbj(b1,j,b,j1) += T2bjbj(b1,j,b,j1) 
#
                  T1iabj(i,a,b,j) = T1bjbj(b1,j,b,j1)*Vpiqj(a,i,b1,j1) 
#
                  Tiabj(i,a,b,j) -= T1iabj(i,a,b,j) 
#
               ENDDO j1 
#
            ENDDO b1 
#
            DO a1
            DO i1
#
               GET T2old_ab(a1,i1,b,j)
               GET VSpipi(a1,i1,a,i)
#
               T1iabj(i,a,b,j)  = T2old_ab(a1,i1,b,j)*VSpipi(a1,i1,a,i)
               T1iabj(i,a,b,j) *= 0.5
               Tiabj(i,a,b,j)  += T1iabj(i,a,b,j)
#
            ENDDO i1
            ENDDO a1
#
# Contribution to T2new_bb 
# ------------------------ 
#
            DO b1 
            DO j1 
#
               GET T2old_ab(a,i,b1,j1) 
#
               R1bjbj(b1,j1,b,j) = T2old_ab(a,i,b1,j1)*Tiabj(i,a,b,j) 
#
               R2bjbj(b1,j,b,j1) = R1bjbj(b1,j1,b,j) 
               R2bjbj(b1,j,b,j1)*= -1.0  
               R3bjbj(b,j1,b1,j) = R1bjbj(b1,j1,b,j) 
               R3bjbj(b,j1,b1,j)*= -1.0  
               R4bjbj(b,j,b1,j1) = R1bjbj(b1,j1,b,j) 
#
               PUT T2new_bb(b1,j1,b,j) += R1bjbj(b1,j1,b,j) 
               PUT T2new_bb(b1,j,b,j1) += R2bjbj(b1,j,b,j1) 
               PUT T2new_bb(b,j1,b1,j) += R3bjbj(b,j1,b1,j) 
               PUT T2new_bb(b,j,b1,j1) += R4bjbj(b,j,b1,j1) 
#
            ENDDO j1 
            ENDDO b1 
#
# Contribution to T2new_ab 
# ------------------------ 
#
            DO i1 
            DO a1 
#
               GET T2old_aa(a1,i1,a,i)
#
               R1aibj(a1,i1,b,j) = T2old_aa(a1,i1,a,i)*Tiabj(i,a,b,j)  
#
               PUT T2new_ab(a1,i1,b,j) += R1aibj(a1,i1,b,j) 
#
            ENDDO a1 
            ENDDO i1 
#
      ENDPARDO i, a, b, j 
#
      ENDPROC WMEBJAB 
#     ---------------
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
      PROC WMEBJBA  
#     ------------
#
      PARDO j, b, a, i  
# 
            GET Viabj(i,a,b,j) 
            Tjbai(j,b,a,i) = Viabj(i,a,b,j) 
#
            DO i1 
#
               GET Vjbii(j,b,i1,i) 
               GET t1a_old(a,i1) 
#
               T1jbai(j,b,a,i) = Vjbii(j,b,i1,i)*t1a_old(a,i1) 
               Tjbai(j,b,a,i) -= T1jbai(j,b,a,i) 
#
            ENDDO i1 
#
            DO a1 
#
               GET t1a_old(a1,i) 
               GET Vaabj(a1,a,b,j) 
               T1jbai(j,b,a,i) = Vaabj(a1,a,b,j)*t1a_old(a1,i) 
               Tjbai(j,b,a,i) += T1jbai(j,b,a,i) 
#
               DO i1 
#
                  GET T2old_aa(a1,i,a,i1)  
                  GET Vpiqj(a1,i1,b,j) 
                  GET t1a_old(a,i1) 
# 
                  T1aiai(a1,i,a,i1)  = 0.5*t2old_aa(a1,i,a,i1) 
                  tai(a,i1) = t1a_old(a,i1) 
                  T2aiai(a1,i,a,i1)  = t1a_old(a1,i)^tai(a,i1) 
                  T1aiai(a1,i,a,i1) += T2aiai(a1,i,a,i1) 
#
                  T1jbai(j,b,a,i) = Vpiqj(a1,i1,b,j)*T1aiai(a1,i,a,i1) 
#
                  Tjbai(j,b,a,i) -= T1jbai(j,b,a,i) 
#
               ENDDO i1 
#
            ENDDO a1 
#
            DO b1
            DO j1
#
               GET T2old_ab(a,i,b1,j1)
               GET VSqjqj(b1,j1,b,j)
#
               T1jbai(j,b,a,i)  = T2old_ab(a,i,b1,j1)*VSqjqj(b1,j1,b,j)
               T1jbai(j,b,a,i) *= 0.5
#
               Tjbai(j,b,a,i) += T1jbai(j,b,a,i)
#
            ENDDO j1
            ENDDO b1
#
# Contribution to T2new_aa 
# ------------------------ 
#
            DO a1 
            DO i1 
#
               GET T2old_ab(a1,i1,b,j) 
#
               R1aiai(a1,i1,a,i) =  T2old_ab(a1,i1,b,j)*Tjbai(j,b,a,i) 
# 
               R2aiai(a1,i,a,i1) =  R1aiai(a1,i1,a,i) 
               R2aiai(a1,i,a,i1)*= -1.0  
               R3aiai(a,i1,a1,i) =  R1aiai(a1,i1,a,i) 
               R3aiai(a,i1,a1,i)*= -1.0  
               R4aiai(a,i,a1,i1) =  R1aiai(a1,i1,a,i) 
#
               PUT T2new_aa(a1,i1,a,i) += R1aiai(a1,i1,a,i) 
               PUT T2new_aa(a1,i,a,i1) += R2aiai(a1,i,a,i1) 
               PUT T2new_aa(a,i1,a1,i) += R3aiai(a,i1,a1,i) 
               PUT T2new_aa(a,i,a1,i1) += R4aiai(a,i,a1,i1) 
#
            ENDDO i1 
            ENDDO a1 
#
# Contribution to T2new_ab 
# ------------------------ 
#
            DO j1 
            DO b1 
#
               GET T2old_bb(b1,j1,b,j)
#
               R1aibj(a,i,b1,j1) = T2old_bb(b1,j1,b,j)*Tjbai(j,b,a,i)  
#
               PUT T2new_ab(a,i,b1,j1) += R1aibj(a,i,b1,j1) 
#
            ENDDO b1 
            ENDDO j1 
#
      ENDPARDO j, b, a, i 
#
      ENDPROC WMEBJBA  
#     ---------------
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# Compute contributions coming from -t^a_m t^e_i (V^{mb}_{ej)-V^{mb}_{je}) 
#
      PROC T2AAS2 
#     ----------- 
#
      PARDO i1, a2, i2 
#
            DO i 
#
               IF i < i2 
#
                  Tiiai(i,i1,a2,i2) = 0.0 
#
                  DO a1 
#
                     GET Viaai(i1,a1,a2,i2) 
                     GET Vaaii(a2,a1,i1,i2) 
                     GET t1a_old(a1,i) 
#
                     Tpppp(a1,i1,a2,i2)  = Viaai(i1,a1,a2,i2)
                     T1pppp(a1,i1,a2,i2) = Vaaii(a2,a1,i1,i2) 
                     Tpppp(a1,i1,a2,i2) -= T1pppp(a1,i1,a2,i2) 
#
                     T1iiai(i,i1,a2,i2) = Tpppp(a1,i1,a2,i2)*t1a_old(a1,i)   
                     Tiiai(i,i1,a2,i2) -= T1iiai(i,i1,a2,i2)
#
                  ENDDO a1 
#
                  DO a 
#
                     GET t1a_old(a,i1) 
                     Taiai(a,i,a2,i2)  = Tiiai(i,i1,a2,i2)*t1a_old(a,i1) 
                     T1aiai(a2,i2,a,i) = Taiai(a,i,a2,i2) 
                     PUT T2new_aa(a,i,a2,i2) += Taiai(a,i,a2,i2) 
                     PUT T2new_aa(a2,i2,a,i) += T1aiai(a2,i2,a,i)  
#
                  ENDDO a 
#
               ENDIF # i < i2 
#
               IF i == i2 
#
                  Tiiai(i,i1,a2,i2) = 0.0 
#
                  DO a1 
#
                     GET Viaai(i1,a1,a2,i2) 
                     GET Vaaii(a2,a1,i1,i2) 
                     GET t1a_old(a1,i) 
#
                     Tpppp(a1,i1,a2,i2)  = Viaai(i1,a1,a2,i2)
                     T1pppp(a1,i1,a2,i2) = Vaaii(a2,a1,i1,i2) 
                     Tpppp(a1,i1,a2,i2) -= T1pppp(a1,i1,a2,i2) 
#
                     T1iiai(i,i1,a2,i2) = Tpppp(a1,i1,a2,i2)*t1a_old(a1,i)   
                     Tiiai(i,i1,a2,i2) -= T1iiai(i,i1,a2,i2)
#
                  ENDDO a1 
#
                  DO a 
#
                     GET t1a_old(a,i1) 
                     Taiai(a,i,a2,i2)  = Tiiai(i,i1,a2,i2)*t1a_old(a,i1) 
                     PUT T2new_aa(a,i,a2,i2) += Taiai(a,i,a2,i2) 
#
                  ENDDO a 
#
               ENDIF # i == i2 
#
               IF i < i2             
#
                  Tiiai(i2,i1,a2,i) = 0.0 
#
                  DO a1 
#
                     GET Viaai(i1,a1,a2,i) 
                     GET Vaaii(a2,a1,i1,i) 
                     GET t1a_old(a1,i2) 
#
                     Tpppp(a1,i1,a2,i)  = Viaai(i1,a1,a2,i)
                     T1pppp(a1,i1,a2,i) = Vaaii(a2,a1,i1,i) 
                     Tpppp(a1,i1,a2,i) -= T1pppp(a1,i1,a2,i)  
#
                     T1iiai(i2,i1,a2,i) = Tpppp(a1,i1,a2,i)*t1a_old(a1,i2)   
                     Tiiai(i2,i1,a2,i) += T1iiai(i2,i1,a2,i)
#
                  ENDDO a1 
#
                  DO a 
#
                     GET t1a_old(a,i1) 
                     Taiai(a,i,a2,i2)  = Tiiai(i2,i1,a2,i)*t1a_old(a,i1) 
                     T1aiai(a2,i2,a,i) = Taiai(a,i,a2,i2) 
                     PUT T2new_aa(a,i,a2,i2) += Taiai(a,i,a2,i2) 
                     PUT T2new_aa(a2,i2,a,i) += T1aiai(a2,i2,a,i)  
#
                  ENDDO a 
#
               ENDIF # i < i2             
#
               IF i == i2             
#
                  Tiiai(i2,i1,a2,i) = 0.0 
#
                  DO a1 
#
                     GET Viaai(i1,a1,a2,i) 
                     GET Vaaii(a2,a1,i1,i) 
                     GET t1a_old(a1,i2) 
#
                     Tpppp(a1,i1,a2,i)  = Viaai(i1,a1,a2,i)
                     T1pppp(a1,i1,a2,i) = Vaaii(a2,a1,i1,i) 
                     Tpppp(a1,i1,a2,i) -= T1pppp(a1,i1,a2,i)  
#
                     T1iiai(i2,i1,a2,i) = Tpppp(a1,i1,a2,i)*t1a_old(a1,i2)   
                     Tiiai(i2,i1,a2,i) += T1iiai(i2,i1,a2,i)
#
                  ENDDO a1 
#
                  DO a 
#
                     GET t1a_old(a,i1) 
                     Taiai(a,i,a2,i2)  = Tiiai(i2,i1,a2,i)*t1a_old(a,i1) 
                     PUT T2new_aa(a,i,a2,i2) += Taiai(a,i,a2,i2) 
#
                  ENDDO a 
#
               ENDIF # i == i2             
#
            ENDDO i 
#
      ENDPARDO i1, a2, i2 
#
      PARDO i1, a, i2 
#
            DO i 
#
               IF i < i2 
#
                  Tiiai(i,i1,a,i2) = 0.0 
#
                  DO a1 
#
                     GET Viaai(i1,a1,a,i2) 
                     GET Vaaii(a,a1,i1,i2) 
                     GET t1a_old(a1,i) 
#
                     Tpppp(a1,i1,a,i2)  = Viaai(i1,a1,a,i2)
                     T1pppp(a1,i1,a,i2) = Vaaii(a,a1,i1,i2) 
                     Tpppp(a1,i1,a,i2) -= T1pppp(a1,i1,a,i2) 
                     T1iiai(i,i1,a,i2) = Tpppp(a1,i1,a,i2)*t1a_old(a1,i)   
                     Tiiai(i,i1,a,i2) += T1iiai(i,i1,a,i2)
#
                  ENDDO a1 
#
                  DO a2 
#
                     GET t1a_old(a2,i1) 
                     Taiai(a,i,a2,i2)  = Tiiai(i,i1,a,i2)*t1a_old(a2,i1) 
                     T1aiai(a2,i2,a,i) = Taiai(a,i,a2,i2) 
                     PUT T2new_aa(a,i,a2,i2) += Taiai(a,i,a2,i2) 
                     PUT T2new_aa(a2,i2,a,i) += T1aiai(a2,i2,a,i) 
#
                 ENDDO a2 
#
               ENDIF # i < i2 
#
               IF i == i2 
#
                  Tiiai(i,i1,a,i2) = 0.0 
#
                  DO a1 
#
                     GET Viaai(i1,a1,a,i2) 
                     GET Vaaii(a,a1,i1,i2) 
                     GET t1a_old(a1,i) 
#
                     Tpppp(a1,i1,a,i2)  = Viaai(i1,a1,a,i2)
                     T1pppp(a1,i1,a,i2) = Vaaii(a,a1,i1,i2) 
                     Tpppp(a1,i1,a,i2) -= T1pppp(a1,i1,a,i2) 
                     T1iiai(i,i1,a,i2) = Tpppp(a1,i1,a,i2)*t1a_old(a1,i)   
                     Tiiai(i,i1,a,i2) += T1iiai(i,i1,a,i2)
#
                  ENDDO a1 
#
                  DO a2 
#
                     GET t1a_old(a2,i1) 
                     Taiai(a,i,a2,i2) = Tiiai(i,i1,a,i2)*t1a_old(a2,i1) 
                     PUT T2new_aa(a,i,a2,i2) += Taiai(a,i,a2,i2) 
#
                 ENDDO a2 
#
               ENDIF # i == i2 
#
               IF i < i2 
#
                  Tiiai(i2,i1,a,i) = 0.0 
#
                  DO a1 
#
                     GET Viaai(i1,a1,a,i) 
                     GET Vaaii(a,a1,i1,i) 
                     Tpppp(a1,i1,a,i)  = Viaai(i1,a1,a,i)
                     T1pppp(a1,i1,a,i) = Vaaii(a,a1,i1,i) 
                     Tpppp(a1,i1,a,i) -= T1pppp(a1,i1,a,i) 
#
                     GET t1a_old(a1,i2) 
                     T1iiai(i2,i1,a,i) = Tpppp(a1,i1,a,i)*t1a_old(a1,i2)   
                     Tiiai(i2,i1,a,i) += T1iiai(i2,i1,a,i)
#
                  ENDDO a1 
#
                  DO a2 
#
                     GET t1a_old(a2,i1) 
                     Taiai(a,i,a2,i2)  = Tiiai(i2,i1,a,i)*t1a_old(a2,i1) 
                     Taiai(a,i,a2,i2) *= -1.0  
                     T1aiai(a2,i2,a,i) = Taiai(a,i,a2,i2)  
                     PUT T2new_aa(a,i,a2,i2) += Taiai(a,i,a2,i2) 
                     PUT T2new_aa(a2,i2,a,i) += T1aiai(a2,i2,a,i) 
#
                  ENDDO a2 
#
               ENDIF # i < i2 
#
               IF i == i2 
#
                  Tiiai(i2,i1,a,i) = 0.0 
#
                  DO a1 
#
                     GET Viaai(i1,a1,a,i) 
                     GET Vaaii(a,a1,i1,i) 
                     Tpppp(a1,i1,a,i)  = Viaai(i1,a1,a,i)
                     T1pppp(a1,i1,a,i) = Vaaii(a,a1,i1,i) 
                     Tpppp(a1,i1,a,i) -= T1pppp(a1,i1,a,i) 
#
                     GET t1a_old(a1,i2) 
                     T1iiai(i2,i1,a,i) = Tpppp(a1,i1,a,i)*t1a_old(a1,i2)   
                     Tiiai(i2,i1,a,i) += T1iiai(i2,i1,a,i)
#
                  ENDDO a1 
#
                  DO a2 
#
                     GET t1a_old(a2,i1) 
                     Taiai(a,i,a2,i2)  = Tiiai(i2,i1,a,i)*t1a_old(a2,i1) 
                     Taiai(a,i,a2,i2) *= -1.0  
                     PUT T2new_aa(a,i,a2,i2) += Taiai(a,i,a2,i2) 
#
                  ENDDO a2 
#
               ENDIF # i == i2 
#
            ENDDO i 
#
      ENDPARDO i1, a, i2 
#
      ENDPROC T2AAS2 
#     -------------- 
#
      PROC T2BBS2 
#     ----------- 
#
      PARDO j1, b2, j2 
#
            DO j 
#
               IF j < j2 
#
                  Tjjbj(j,j1,b2,j2) = 0.0 
#
                  DO b1 
#
                     GET Vjbbj(j1,b1,b2,j2) 
                     GET Vbbjj(b2,b1,j1,j2) 
                     GET t1b_old(b1,j) 
                     Tqqqq(b1,j1,b2,j2)  = Vjbbj(j1,b1,b2,j2)
                     T1qqqq(b1,j1,b2,j2) = Vbbjj(b2,b1,j1,j2) 
                     Tqqqq(b1,j1,b2,j2) -= T1qqqq(b1,j1,b2,j2)  
#
                     T1jjbj(j,j1,b2,j2) = Tqqqq(b1,j1,b2,j2)*t1b_old(b1,j)   
                     Tjjbj(j,j1,b2,j2) -= T1jjbj(j,j1,b2,j2)
#
                  ENDDO b1 
#
                  DO b 
#
                     GET t1b_old(b,j1) 
                     Tbjbj(b,j,b2,j2)  = Tjjbj(j,j1,b2,j2)*t1b_old(b,j1) 
                     T1bjbj(b2,j2,b,j) = Tbjbj(b,j,b2,j2)  
                     PUT T2new_bb(b,j,b2,j2) += Tbjbj(b,j,b2,j2) 
                     PUT T2new_bb(b2,j2,b,j) += T1bjbj(b2,j2,b,j) 
#
                  ENDDO b 
#
               ENDIF # j < j2 
#
               IF j == j2 
#
                  Tjjbj(j,j1,b2,j2) = 0.0 
#
                  DO b1 
#
                     GET Vjbbj(j1,b1,b2,j2) 
                     GET Vbbjj(b2,b1,j1,j2) 
                     GET t1b_old(b1,j) 
                     Tqqqq(b1,j1,b2,j2)  = Vjbbj(j1,b1,b2,j2)
                     T1qqqq(b1,j1,b2,j2) = Vbbjj(b2,b1,j1,j2) 
                     Tqqqq(b1,j1,b2,j2) -= T1qqqq(b1,j1,b2,j2)  
#
                     T1jjbj(j,j1,b2,j2) = Tqqqq(b1,j1,b2,j2)*t1b_old(b1,j)   
                     Tjjbj(j,j1,b2,j2) -= T1jjbj(j,j1,b2,j2)
#
                  ENDDO b1 
#
                  DO b 
#
                     GET t1b_old(b,j1) 
                     Tbjbj(b,j,b2,j2)  = Tjjbj(j,j1,b2,j2)*t1b_old(b,j1) 
                     PUT T2new_bb(b,j,b2,j2) += Tbjbj(b,j,b2,j2) 
#
                  ENDDO b 
#
               ENDIF # j == j2 
#
               IF j < j2 
#
                  Tjjbj(j2,j1,b2,j) = 0.0 
#
                  DO b1 
#
                     GET Vjbbj(j1,b1,b2,j) 
                     GET Vbbjj(b2,b1,j1,j) 
                     GET t1b_old(b1,j2) 
                     Tqqqq(b2,j1,b1,j)  = Vjbbj(j1,b1,b2,j)
                     T1qqqq(b2,j1,b1,j) = Vbbjj(b2,b1,j1,j) 
                     Tqqqq(b2,j1,b1,j) -= T1qqqq(b2,j1,b1,j)  
#
                     T1jjbj(j2,j1,b2,j) = Tqqqq(b2,j1,b1,j)*t1b_old(b1,j2)   
                     Tjjbj(j2,j1,b2,j) += T1jjbj(j2,j1,b2,j)
#
                  ENDDO b1 
#
                  DO b 
#
                     GET t1b_old(b,j1) 
                     Tbjbj(b,j,b2,j2)  = Tjjbj(j2,j1,b2,j)*t1b_old(b,j1) 
                     T1bjbj(b2,j2,b,j) = Tbjbj(b,j,b2,j2)  
                     PUT T2new_bb(b,j,b2,j2) += Tbjbj(b,j,b2,j2) 
                     PUT T2new_bb(b2,j2,b,j) += T1bjbj(b2,j2,b,j) 
#
                  ENDDO b 
#
               ENDIF # j < j2 
#
               IF j == j2 
#
                  Tjjbj(j2,j1,b2,j) = 0.0 
#
                  DO b1 
#
                     GET Vjbbj(j1,b1,b2,j) 
                     GET Vbbjj(b2,b1,j1,j) 
                     GET t1b_old(b1,j2) 
                     Tqqqq(b2,j1,b1,j)  = Vjbbj(j1,b1,b2,j)
                     T1qqqq(b2,j1,b1,j) = Vbbjj(b2,b1,j1,j) 
                     Tqqqq(b2,j1,b1,j) -= T1qqqq(b2,j1,b1,j)  
#
                     T1jjbj(j2,j1,b2,j) = Tqqqq(b2,j1,b1,j)*t1b_old(b1,j2)   
                     Tjjbj(j2,j1,b2,j) += T1jjbj(j2,j1,b2,j)
#
                  ENDDO b1 
#
                  DO b 
#
                     GET t1b_old(b,j1) 
                     Tbjbj(b,j,b2,j2) = Tjjbj(j2,j1,b2,j)*t1b_old(b,j1) 
                     PUT T2new_bb(b,j,b2,j2) += Tbjbj(b,j,b2,j2) 
#
                  ENDDO b 
#
               ENDIF # j == j2 
#
           ENDDO j 
#
      ENDPARDO j1, b2, j2 
#
      PARDO j1, b, j2 
#
            DO j 
#
               IF j < j2 
#
                  Tjjbj(j,j1,b,j2) = 0.0 
#
                  DO b1 
#
                     GET Vjbbj(j1,b1,b,j2) 
                     GET Vbbjj(b,b1,j1,j2) 
                     GET t1b_old(b1,j) 
#
                     Tqqqq(b1,b,j1,j2)  = Vjbbj(j1,b1,b,j2)
                     T1qqqq(b1,b,j1,j2) = Vbbjj(b,b1,j1,j2) 
                     Tqqqq(b1,b,j1,j2) -= T1qqqq(b1,b,j1,j2)  
#
                     T1jjbj(j,j1,b,j2) = Tqqqq(b1,b,j1,j2)*t1b_old(b1,j)   
                     Tjjbj(j,j1,b,j2) += T1jjbj(j,j1,b,j2)
#
                  ENDDO b1 
#
                  DO b2 
#
                     GET t1b_old(b2,j1) 
                     Tbjbj(b,j,b2,j2)  = Tjjbj(j,j1,b,j2)*t1b_old(b2,j1) 
                     T1bjbj(b2,j2,b,j) = Tbjbj(b,j,b2,j2)  
                     PUT T2new_bb(b,j,b2,j2) += Tbjbj(b,j,b2,j2) 
                     PUT T2new_bb(b2,j2,b,j) += T1bjbj(b2,j2,b,j) 
#
                  ENDDO b2 
#
               ENDIF # j < j2 
#
               IF j == j2 
#
                  Tjjbj(j,j1,b,j2) = 0.0 
#
                  DO b1 
#
                     GET Vjbbj(j1,b1,b,j2) 
                     GET Vbbjj(b,b1,j1,j2) 
                     GET t1b_old(b1,j) 
                     Tqqqq(b1,b,j1,j2)  = Vjbbj(j1,b1,b,j2)
                     T1qqqq(b1,b,j1,j2) = Vbbjj(b,b1,j1,j2) 
                     Tqqqq(b1,b,j1,j2) -= T1qqqq(b1,b,j1,j2)  
#
                     T1jjbj(j,j1,b,j2) = Tqqqq(b1,b,j1,j2)*t1b_old(b1,j)   
                     Tjjbj(j,j1,b,j2) += T1jjbj(j,j1,b,j2)
#
                  ENDDO b1 
#
                  DO b2 
#
                     GET t1b_old(b2,j1) 
                     Tbjbj(b,j,b2,j2)  = Tjjbj(j,j1,b,j2)*t1b_old(b2,j1) 
                     PUT T2new_bb(b,j,b2,j2) += Tbjbj(b,j,b2,j2) 
#
                  ENDDO b2 
#
               ENDIF # j == j2 
#
               IF j < j2 
#
                  Tjjbj(j2,j1,b,j) = 0.0 
#
                  DO b1 
#
                     GET Vjbbj(j1,b1,b,j) 
                     GET Vbbjj(b,b1,j1,j) 
                     GET t1b_old(b1,j2) 
#
                     Tqqqq(b1,j1,b,j)  = Vjbbj(j1,b1,b,j)
                     T1qqqq(b1,j1,b,j) = Vbbjj(b,b1,j1,j) 
                     Tqqqq(b1,j1,b,j) -= T1qqqq(b1,j1,b,j) 
#
                     T1jjbj(j2,j1,b,j) = Tqqqq(b1,j1,b,j)*t1b_old(b1,j2)   
                     Tjjbj(j2,j1,b,j) += T1jjbj(j2,j1,b,j)
#
                  ENDDO b1 
#
                  DO b2 
#
                     GET t1b_old(b2,j1) 
                     Tbjbj(b,j,b2,j2) = Tjjbj(j2,j1,b,j)*t1b_old(b2,j1) 
                     Tbjbj(b,j,b2,j2) *= -1.0 
                     T1bjbj(b2,j2,b,j) = Tbjbj(b,j,b2,j2)  
                     PUT T2new_bb(b,j,b2,j2) += Tbjbj(b,j,b2,j2) 
                     PUT T2new_bb(b2,j2,b,j) += T1bjbj(b2,j2,b,j) 
#
                  ENDDO b2 
#
               ENDIF # j < j2 
#
               IF j == j2 
#
                  Tjjbj(j2,j1,b,j) = 0.0 
#
                  DO b1 
#
                     GET Vjbbj(j1,b1,b,j) 
                     GET Vbbjj(b,b1,j1,j) 
                     GET t1b_old(b1,j2) 
#
                     Tqqqq(b1,j1,b,j)  = Vjbbj(j1,b1,b,j)
                     T1qqqq(b1,j1,b,j) = Vbbjj(b,b1,j1,j) 
                     Tqqqq(b1,j1,b,j) -= T1qqqq(b1,j1,b,j) 
#
                     T1jjbj(j2,j1,b,j) = Tqqqq(b1,j1,b,j)*t1b_old(b1,j2)   
                     Tjjbj(j2,j1,b,j) += T1jjbj(j2,j1,b,j)
#
                  ENDDO b1 
#
                  DO b2 
#
                     GET t1b_old(b2,j1) 
                     Tbjbj(b,j,b2,j2) = Tjjbj(j2,j1,b,j)*t1b_old(b2,j1) 
                     Tbjbj(b,j,b2,j2) *= -1.0 
                     PUT T2new_bb(b,j,b2,j2) += Tbjbj(b,j,b2,j2) 
#
                  ENDDO b2 
#
               ENDIF # j == j2 
#
            ENDDO j 
#
      ENDPARDO j1, b, j2 
#
      ENDPROC T2BBS2 
#     -------------- 
#
      PROC T2ABS2 
#     ----------- 
#
      PARDO i1, i, b, j 
#
           Tiibj(i1,i,b,j) = 0.0 
#
           DO a1 
# 
              GET Viabj(i1,a1,b,j) 
              GET t1a_old(a1,i) 
#
              T1iibj(i1,i,b,j) = Viabj(i1,a1,b,j)*t1a_old(a1,i) 
              Tiibj(i1,i,b,j) += T1iibj(i1,i,b,j) 
#
           ENDDO a1  
#
           DO b1 
#
              GET Vbbii(b,b1,i1,i) 
              GET t1b_old(b1,j) 
#
              T1iibj(i1,i,b,j) = Vbbii(b,b1,i1,i)*t1b_old(b1,j)  
              Tiibj(i1,i,b,j) += T1iibj(i1,i,b,j) 
#
          ENDDO b1  
#
          DO a 
#
             GET t1a_old(a,i1) 
             Taibj(a,i,b,j)  = Tiibj(i1,i,b,j)*t1a_old(a,i1) 
             Taibj(a,i,b,j) *= -1.0 
             PUT T2new_ab(a,i,b,j) += Taibj(a,i,b,j) 
#
          ENDDO a 
#
      ENDPARDO i1, i, b, j 
#
      PARDO j1, i, a, j 
#
            Tjjai(j1,j,a,i) = 0.0 
#
            DO a1 
#
               GET Vaajj(a,a1,j1,j) 
               GET t1a_old(a1,i) 
#
               T1jjai(j1,j,a,i) = Vaajj(a,a1,j1,j)*t1a_old(a1,i) 
               Tjjai(j1,j,a,i) += T1jjai(j1,j,a,i)
#
            ENDDO a1 
#
            DO b1 
# 
               GET Viabj(i,a,b1,j1) 
               GET t1b_old(b1,j) 
#
               T1jjai(j1,j,a,i) = Viabj(i,a,b1,j1)*t1b_old(b1,j) 
               Tjjai(j1,j,a,i) += T1jjai(j1,j,a,i) 
#
            ENDDO b1  
#
            DO b 
#
               GET t1b_old(b,j1) 
               Taibj(a,i,b,j)  = Tjjai(j1,j,a,i)*t1b_old(b,j1) 
               Taibj(a,i,b,j) *= -1.0 
               PUT T2new_ab(a,i,b,j) += Taibj(a,i,b,j) 
#
            ENDDO b 
#
      ENDPARDO j1, i, a, j 
#
      ENDPROC T2ABS2 
#     -------------- 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# Compute contributions from 'Wmjbe'. This needs to be checked 
#
      PROC WMJBEab
#     -------------
#
      PARDO i1, b1, b, i 
#
            GET Vbbii(b,b1,i1,i) 
            Tiiqq(i1,i,b,b1) = Vbbii(b,b1,i1,i) 
#
            DO a1 
#
               GET Vbbai(b1,b,a1,i1) 
               GET t1a_old(a1,i) 
               T1iiqq(i1,i,b,b1) = Vbbai(b1,b,a1,i1)*t1a_old(a1,i)
               Tiiqq(i1,i,b,b1) += T1iiqq(i1,i,b,b1) 
#
            ENDDO a1 
#
            DO j1 
#
               GET Vpiqj(i,i1,b1,j1) 
               GET t1b_old(b,j1) 
# 
               T1iiqq(i1,i,b,b1) = Vpiqj(i,i1,b1,j1)*t1b_old(b,j1) 
               Tiiqq(i1,i,b,b1) -= T1iiqq(i1,i,b,b1) 
# 
               DO a1 
#
                  GET T2old_ab(a1,i,b,j1) 
                  GET Vpiqj(a1,i1,b1,j1) 
                  GET t1a_old(a1,i) 
                  GET t1b_old(b,j1) 
#
                  Taibj(a1,i,b,j1)   = t1a_old(a1,i)^t1b_old(b,j1) 
                  T1aibj(a1,i,b,j1)  = 0.5*T2old_ab(a1,i,b,j1)  
                  T1aibj(a1,i,b,j1) += Taibj(a1,i,b,j1)  
#
                  T1iiqq(i1,i,b,b1) = T1aibj(a1,i,b,j1)*Vpiqj(a1,i1,b1,j1) 
                  Tiiqq(i1,i,b,b1) -= T1iiqq(i1,i,b,b1) 
#
               ENDDO a1 
#
            ENDDO j1 
#
#  Calculate contribution to the amplitudes 
#  ----------------------------------------  
#
            DO a 
            DO j 
#
               GET T2old_ab(a,i1,b1,j) 
#
               Taibj(a,i,b,j)  = T2old_ab(a,i1,b1,j)*Tiiqq(i1,i,b,b1) 
               Taibj(a,i,b,j) *= -1.0  
               PUT T2new_ab(a,i,b,j) += Taibj(a,i,b,j) 
#
            ENDDO j  
            ENDDO a  
#
      ENDPARDO i1, b1, b, i 
#
      ENDPROC WMJBEab
#     ---------------
#
      PROC WMJBEba
#     -------------
#
      PARDO j1, a1, a, j 
#
            GET Vaajj(a,a1,j1,j) 
            Tjjpp(j1,j,a,a1) = Vaajj(a,a1,j1,j) 
#
            DO b1 
#
               GET Vaabj(a1,a,b1,j1) 
               GET t1b_old(b1,j) 
               T1jjpp(j1,j,a,a1) = Vaabj(a1,a,b1,j1)*t1b_old(b1,j)
               Tjjpp(j1,j,a,a1) += T1jjpp(j1,j,a,a1) 
#
            ENDDO b1 
#
            DO i1 
#
               GET Vpiqj(a1,i1,j,j1)  
               GET t1a_old(a,i1) 
               T1jjpp(j1,j,a,a1) = Vpiqj(a1,i1,j,j1)*t1a_old(a,i1) 
               Tjjpp(j1,j,a,a1) -= T1jjpp(j1,j,a,a1) 
#
               DO b1 
#
                  GET T2old_ab(a,i1,b1,j) 
                  GET Vpiqj(a1,i1,b1,j1) 
#
                  GET t1a_old(a,i1) 
                  GET t1b_old(b1,j) 
# 
                  Taibj(a,i1,b1,j)   = t1b_old(b1,j)^t1a_old(a,i1) 
                  T1aibj(a,i1,b1,j)  = 0.5*T2old_ab(a,i1,b1,j)  
                  T1aibj(a,i1,b1,j) += Taibj(a,i1,b1,j)  
#
                  T1jjpp(j1,j,a,a1) = T1aibj(a,i1,b1,j)*Vpiqj(a1,i1,b1,j1) 
                  Tjjpp(j1,j,a,a1) -= T1jjpp(j1,j,a,a1) 
#
               ENDDO b1 
#
            ENDDO i1 
#
#  Calculate contribution to the amplitudes 
#  ----------------------------------------  
#
            DO b 
            DO i 
#
               GET T2old_ab(a1,i,b,j1) 
#
               Taibj(a,i,b,j) = Tjjpp(j1,j,a,a1)*T2old_ab(a1,i,b,j1) 
               Taibj(a,i,b,j) *= -1.0  
               PUT T2new_ab(a,i,b,j) += Taibj(a,i,b,j) 
#
            ENDDO i  
            ENDDO b  
#
      ENDPARDO j1, a1, a, j 
#
      ENDPROC WMJBEba
#     ---------------
#
# SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS 
#
      PROC WMEBJ 
# 
           CALL WMEBJAA
           CALL WMEBJBB
           CALL WMEBJAB
           CALL WMEBJBA
           CALL WMJBEab
           CALL WMJBEba 
           CALL T2AAS2
           CALL T2BBS2
           CALL T2ABS2
#
      ENDPROC WMEBJ 
#
# SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
      PROC UPDATET2 
#     ------------- 
#
      PARDO a, a1, i, i1 
#
            GET                        T2old_aa(a,i,a1,i1)
            GET                        T2new_aa(a,i,a1,i1)
            Taiai(a,i,a1,i1)         = T2new_aa(a,i,a1,i1)
            T1aiai(a,i,a1,i1)        = T2old_aa(a,i,a1,i1)
            execute energy_denominator Taiai
            t1aiai(a,i,a1,i1) -= taiai(a,i,a1,i1)
            t1aiai(a,i,a1,i1) *= -1.0
#
            if kiter == 1
               PREPARE e1aiai(a,i,a1,i1) = T1aiai(a,i,a1,i1)
            endif
#
            if kiter == 2
               PREPARE e2aiai(a,i,a1,i1) = T1aiai(a,i,a1,i1)
            endif
#
            if kiter == 3
               PREPARE e3aiai(a,i,a1,i1) = T1aiai(a,i,a1,i1)
            endif
#
            if kiter == 4
               PREPARE e4aiai(a,i,a1,i1) = T1aiai(a,i,a1,i1)
            endif
#
            if kiter >= 5
               PREPARE e5aiai(a,i,a1,i1) = T1aiai(a,i,a1,i1)
            endif
#
      ENDPARDO a, a1, i, i1
#
      PARDO a, a1, i, i1
#
            GET                        T2new_aa(a,i,a1,i1)
            Taiai(a,i,a1,i1)         = T2new_aa(a,i,a1,i1)
            execute energy_denominator Taiai
            PUT T2old_aa(a,i,a1,i1)  = Taiai(a,i,a1,i1)
#
      ENDPARDO a, a1, i, i1
#
      PARDO b, b1, j, j1
#
            GET                        T2old_bb(b,j,b1,j1)
            GET                        T2new_bb(b,j,b1,j1)
            Tbjbj(b,j,b1,j1)         = T2new_bb(b,j,b1,j1)
            T1bjbj(b,j,b1,j1)        = T2old_bb(b,j,b1,j1)
            execute energy_denominator Tbjbj
            T1bjbj(b,j,b1,j1) -= tbjbj(b,j,b1,j1)
            T1bjbj(b,j,b1,j1) *= -1.0
#
            if kiter == 1
               PREPARE e1bjbj(b,j,b1,j1) = T1bjbj(b,j,b1,j1)
            endif
#
            if kiter == 2
               PREPARE e2bjbj(b,j,b1,j1) = T1bjbj(b,j,b1,j1)
            endif
#
            if kiter == 3
               PREPARE e3bjbj(b,j,b1,j1) = T1bjbj(b,j,b1,j1)
            endif
#
            if kiter == 4
               PREPARE e4bjbj(b,j,b1,j1) = T1bjbj(b,j,b1,j1)
            endif
#
            if kiter >= 5
               PREPARE e5bjbj(b,j,b1,j1) = T1bjbj(b,j,b1,j1)
            endif
#
      ENDPARDO b, b1, j, j1
#
      PARDO b, b1, j, j1
#
            GET                        T2new_bb(b,j,b1,j1)
            Tbjbj(b,j,b1,j1)         = T2new_bb(b,j,b1,j1)
            execute energy_denominator Tbjbj
            PUT T2old_bb(b,j,b1,j1)  = Tbjbj(b,j,b1,j1)
#
      ENDPARDO b, b1, j, j1
#
      PARDO b, a, j, i
#
            GET                        T2old_ab(a,i,b,j)
            GET                        T2new_ab(a,i,b,j)
            Taibj(a,i,b,j)           = T2new_ab(a,i,b,j)
            T1aibj(a,i,b,j)          = T2old_ab(a,i,b,j)
            execute energy_denominator Taibj
            T1aibj(a,i,b,j) -= Taibj(a,i,b,j)
            T1aibj(a,i,b,j) *= -1.0
#
            if kiter == 1
               PREPARE e1aibj(a,i,b,j) = T1aibj(a,i,b,j)
            endif
#
            if kiter == 2
               PREPARE e2aibj(a,i,b,j) = T1aibj(a,i,b,j)
            endif
#
            if kiter == 3
               PREPARE e3aibj(a,i,b,j) = T1aibj(a,i,b,j)
            endif
#
            if kiter == 4
               PREPARE e4aibj(a,i,b,j) = T1aibj(a,i,b,j)
            endif
#
            if kiter >= 5
               PREPARE e5aibj(a,i,b,j) = T1aibj(a,i,b,j)
            endif
#
      ENDPARDO b, a, j, i
#
      PARDO b, a, j, i
#
            GET                        T2new_ab(a,i,b,j)
            Taibj(a,i,b,j)           = T2new_ab(a,i,b,j)
            execute energy_denominator Taibj
            PUT T2old_ab(a,i,b,j)    = Taibj(a,i,b,j)
#
      ENDPARDO b, a, j, i
#
      ENDPROC UPDATET2 
#     ----------------  
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
      PROC UPDATET1 
#     ------------- 
#
      PARDO a, i 
#
            GET                t1a_new(a,i) 
            GET                t1a_old(a,i) 
            tai(a,i)         = t1a_new(a,i) 
            tai(a,i)        -= t1a_old(a,i) 
#
            if kiter == 1 
               PUT e1ai(a,i) = Tai(a,i) 
            endif 
#
            if kiter == 2 
               PUT e2ai(a,i) = Tai(a,i) 
            endif 
#
            if kiter == 3 
               PUT e3ai(a,i) = Tai(a,i) 
            endif 
#
            if kiter == 4 
               PUT e4ai(a,i) = Tai(a,i) 
            endif 
#
            if kiter >= 5 
               PUT e5ai(a,i) = Tai(a,i) 
            endif 
#
      ENDPARDO a, i 
#
      PARDO a, i 
#
            GET t1a_new(a,i) 
            tai(a,i) = t1a_new(a,i) 
            PUT t1a_old(a,i) = t1a_new(a,i) 
#
      ENDPARDO a, i 
#
      PARDO b, j 
#
            GET                t1b_new(b,j) 
            GET                t1b_old(b,j) 
            tbj(b,j)         = t1b_new(b,j) 
            tbj(b,j)        -= t1b_old(b,j) 
#
            if kiter == 1 
               PUT e1bj(b,j) = Tbj(b,j) 
            endif 
#
            if kiter == 2 
               PUT e2bj(b,j) = Tbj(b,j) 
            endif 
#
            if kiter == 3 
               PUT e3bj(b,j) = Tbj(b,j) 
            endif 
#
            if kiter == 4 
               PUT e4bj(b,j) = Tbj(b,j) 
            endif 
#
            if kiter >= 5 
               PUT e5bj(b,j) = Tbj(b,j) 
            endif 
#
      ENDPARDO b, j 
#
      PARDO b, j 
#
            GET t1b_new(b,j) 
            tbj(b,j) = t1b_new(b,j) 
            PUT t1b_old(b,j) = t1b_new(b,j) 
#
      ENDPARDO b, j 
#
      ENDPROC UPDATET1 
#     ----------------  
#
      PROC MOVET2
#     ------------
#
      PARDO a, a1, i, i1
#
            GET                T2old_aa(a,i,a1,i1)
            taiai(a,i,a1,i1) = T2old_aa(a,i,a1,i1)
#
            if kiter == 1
               PREPARE d1aiai(a,i,a1,i1) = taiai(a,i,a1,i1)
            endif
#
            if kiter == 2
               PREPARE d2aiai(a,i,a1,i1) = Taiai(a,i,a1,i1)
            endif
#
            if kiter == 3
               PREPARE d3aiai(a,i,a1,i1) = Taiai(a,i,a1,i1)
            endif
#
            if kiter == 4
               PREPARE d4aiai(a,i,a1,i1) = Taiai(a,i,a1,i1)
            endif
#
            if kiter >= 5
               PREPARE d4aiai(a,i,a1,i1) = Taiai(a,i,a1,i1)
            endif
#
      ENDPARDO a, a1, i, i1
#
      PARDO b, b1, j, j1
#
            GET                T2old_bb(b,j,b1,j1)
            Tbjbj(b,j,b1,j1) = T2old_bb(b,j,b1,j1)
#
            if kiter == 1
               PREPARE d1bjbj(b,j,b1,j1) = Tbjbj(b,j,b1,j1)
            endif
#
            if kiter == 2
               PREPARE d2bjbj(b,j,b1,j1) = Tbjbj(b,j,b1,j1)
            endif
#
            if kiter == 3
               PREPARE d3bjbj(b,j,b1,j1) = Tbjbj(b,j,b1,j1)
            endif
#
            if kiter == 4
               PREPARE d4bjbj(b,j,b1,j1) = Tbjbj(b,j,b1,j1)
            endif
#
            if kiter >= 5
               PREPARE d4bjbj(b,j,b1,j1) = Tbjbj(b,j,b1,j1)
            endif
#
      ENDPARDO b, b1, j, j1
#
      PARDO b, a, j, i
#
            GET                        T2old_ab(a,i,b,j)
            Taibj(a,i,b,j)           = T2old_ab(a,i,b,j)
#
            if kiter == 1
               PREPARE d1aibj(a,i,b,j) = Taibj(a,i,b,j)
            endif
#
            if kiter == 2
               PREPARE d2aibj(a,i,b,j) = Taibj(a,i,b,j)
            endif
#
            if kiter == 3
               PREPARE d3aibj(a,i,b,j) = Taibj(a,i,b,j)
            endif
#
            if kiter == 4
               PREPARE d4aibj(a,i,b,j) = Taibj(a,i,b,j)
            endif
#
            if kiter >= 5
               PREPARE d4aibj(a,i,b,j) = Taibj(a,i,b,j)
            endif
#
      ENDPARDO b, a, j, i
#
      ENDPROC MOVET2
#     ----------------
#
      PROC MOVET1
#     ------------
#
      PARDO a, i 
#
            GET        t1a_old(a,i)
            tai(a,i) = t1a_old(a,i)
#
            if kiter == 1
               PUT d1ai(a,i) = tai(a,i)
            endif
#
            if kiter == 2
               PUT d2ai(a,i) = Tai(a,i)
            endif
#
            if kiter == 3
               PUT d3ai(a,i) = Tai(a,i)
            endif
#
            if kiter == 4
               PUT d4ai(a,i) = Tai(a,i)
            endif
#
            if kiter >= 5
               PUT d4ai(a,i) = Tai(a,i)
            endif
#
      ENDPARDO a, i
#
      PARDO b, j 
#
            GET        t1b_old(b,j)
            tbj(b,j) = t1b_old(b,j)
#
            if kiter == 1
               PUT d1bj(b,j) = tbj(b,j)
            endif
#
            if kiter == 2
               PUT d2bj(b,j) = tbj(b,j)
            endif
#
            if kiter == 3
               PUT d3bj(b,j) = tbj(b,j)
            endif
#
            if kiter == 4
               PUT d4bj(b,j) = tbj(b,j)
            endif
#
            if kiter >= 5
               PUT d4bj(b,j) = tbj(b,j)
            endif
#
      ENDPARDO b, j
#
      ENDPROC MOVET1
#     ----------------
#
# PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP 
#
#    ------------------------------------------------------------------------ 
#
     PROC ENERGY_NEW 
# 
#    ------------------------------------------------------------------------ 
#
     esuma   = 0.0 
     ecorraa = 0.0 
     PARDO a, a1, i, i1 
#
           GET VSpipi(a,i,a1,i1) 
           GET T2old_aa(a,i,a1,i1) 
           etemp = T2old_aa(a,i,a1,i1)*T2old_aa(a,i,a1,i1)
#
           GET t1a_old(a1,i1) 
           GET t1a_old(a1,i) 
           GET t1a_old(a,i1) 
           GET t1a_old(a,i) 
#
           tai(a1,i1)         =          t1a_old(a1,i1) 
           T2aiai(a,i,a1,i1)  = t1a_old(a,i)^tai(a1,i1)
           tai(a,i1)          =           t1a_old(a,i1) 
           T3aiai(a,i,a1,i1)  = t1a_old(a1,i)^tai(a,i1)
           T2aiai(a,i,a1,i1) -= T3aiai(a,i,a1,i1)
           T2aiai(a,i,a1,i1) += T2old_aa(a,i,a1,i1)
#
           etemp = VSpipi(a,i,a1,i1)*T2aiai(a,i,a1,i1) 
           etemp = 0.25*etemp 
           esuma += etemp 
#
     ENDPARDO a, a1, i, i1  
#
     ecorrbb = 0.0 
     esumb   = 0.0 
     PARDO b, b1, j, j1 
#
           GET VSqjqj(b,j,b1,j1) 
           GET T2old_bb(b,j,b1,j1) 
#
           GET t1b_old(b1,j1) 
           GET t1b_old(b1,j) 
           GET t1b_old(b,j1) 
           GET t1b_old(b,j) 
#
           tbj(b1,j1)         =          t1b_old(b1,j1) 
           T2bjbj(b,j,b1,j1)  = t1b_old(b,j)^tbj(b1,j1)
           tbj(b,j1)          =           t1b_old(b,j1) 
           T3bjbj(b,j,b1,j1)  = t1b_old(b1,j)^tbj(b,j1)
           T2bjbj(b,j,b1,j1) -= T3bjbj(b,j,b1,j1)
           T2bjbj(b,j,b1,j1) += T2old_bb(b,j,b1,j1)
#
           etemp = VSqjqj(b,j,b1,j1)*T2bjbj(b,j,b1,j1) 
           etemp = 0.25*etemp 
           esumb += etemp 
#
     ENDPARDO b, b1, j, j1 
     ecorrab = 0.0 
     esumab  = 0.0 
     PARDO a, b, i, j 
#
           GET Vpiqj(a,i,b,j) 
           GET T2old_ab(a,i,b,j) 
           GET t1a_old(a,i) 
           GET t1b_old(b,j) 
#
           Taibj(a,i,b,j)  = t1a_old(a,i)^t1b_old(b,j) 
           Taibj(a,i,b,j) += T2old_ab(a,i,b,j)  
#
           etemp = Taibj(a,i,b,j)*Vpiqj(a,i,b,j) 
           esumab += etemp 
#
     ENDPARDO a, b, i, j 

     execute sip_barrier 

     collective ecorraa += esuma
     execute print_scalar ecorraa 
#
     collective ecorrbb += esumb 
     execute print_scalar ecorrbb 
#
     collective ecorrab += esumab 
     execute print_scalar ecorrab 
#
     ecorrT  = ecorraa + ecorrbb
     ecorrT += ecorrab 
     execute print_scalar ecorrT  
# 
#    ------------------------------------------------------------------------ 
# 
     ENDPROC ENERGY_NEW 
# 
#    ------------------------------------------------------------------------ 
#
# ---------------------------------------------------------------------------------
#
     PROC ZERO_DSCALAR  
#    ----------------- 
#
#    The scalars used (overlap of error arrays and coeffients) in the DIIS 
#    expansion are zero'd out. 
#
#      Zero out scalars.
#      -----------------
#
       b11 = 0.0
       b12 = 0.0
       b13 = 0.0
       b14 = 0.0
       b15 = 0.0
       b16 = 0.0
       b17 = 0.0
       b18 = 0.0
       b19 = 0.0
       b110 = 0.0
#
       b22 = 0.0
       b23 = 0.0
       b24 = 0.0
       b25 = 0.0
       b26 = 0.0
       b27 = 0.0
       b28 = 0.0
       b29 = 0.0
       b210 = 0.0
#
       b33 = 0.0
       b34 = 0.0
       b35 = 0.0
       b36 = 0.0
       b37 = 0.0
       b38 = 0.0
       b39 = 0.0
       b310 = 0.0
#
       b44 = 0.0
       b45 = 0.0
       b46 = 0.0
       b47 = 0.0
       b48 = 0.0
       b49 = 0.0
       b410 = 0.0
#
       b55 = 0.0
       b56 = 0.0
       b57 = 0.0
       b58 = 0.0
       b59 = 0.0
       b510 = 0.0
#
       b66 = 0.0
       b67 = 0.0
       b68 = 0.0
       b69 = 0.0
       b610 = 0.0
#
       b77 = 0.0
       b78 = 0.0
       b79 = 0.0
       b710 = 0.0
#
       b88 = 0.0
       b89 = 0.0
       b810 = 0.0
#
       b99 = 0.0
       b910 = 0.0
#
       b1010 = 0.0
#
       Tb11 = 0.0
       Tb12 = 0.0
       Tb13 = 0.0
       Tb14 = 0.0
       Tb15 = 0.0
       Tb16 = 0.0
       Tb17 = 0.0
       Tb18 = 0.0
       Tb19 = 0.0
       Tb110 = 0.0
#
       Tb22 = 0.0
       Tb23 = 0.0
       Tb24 = 0.0
       Tb25 = 0.0
       Tb26 = 0.0
       Tb27 = 0.0
       Tb28 = 0.0
       Tb29 = 0.0
       Tb210 = 0.0
#
       Tb33 = 0.0
       Tb34 = 0.0
       Tb35 = 0.0
       Tb36 = 0.0
       Tb37 = 0.0
       Tb38 = 0.0
       Tb39 = 0.0
       Tb310 = 0.0
#
       Tb44 = 0.0
       Tb45 = 0.0
       Tb46 = 0.0
       Tb47 = 0.0
       Tb48 = 0.0
       Tb49 = 0.0
       Tb410 = 0.0
#
       Tb55 = 0.0
       Tb56 = 0.0
       Tb57 = 0.0
       Tb58 = 0.0
       Tb59 = 0.0
       Tb510 = 0.0
#
       Tb66 = 0.0
       Tb67 = 0.0
       Tb68 = 0.0
       Tb69 = 0.0
       Tb610 = 0.0
#
       Tb77 = 0.0
       Tb78 = 0.0
       Tb79 = 0.0
       Tb710 = 0.0
#
       Tb88 = 0.0
       Tb89 = 0.0
       Tb810 = 0.0
#
       Tb99 = 0.0
       Tb910 = 0.0
#
       Tb1010 = 0.0
#
       c1 = 0.0
       c2 = 0.0
       c3 = 0.0
       c4 = 0.0
       c5 = 0.0
       c6 = 0.0
       c7 = 0.0
       c8 = 0.0
       c9 = 0.0
       c10 = 0.0
#
       execute sip_barrier
#
     ENDPROC ZERO_DSCALAR  
#    -------------------- 
#
# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
#
     PROC SETUP_DIIS   
#    --------------- 
#
#    Put the matrix elements of B into the sip 'B' matrix. 
#
       execute diis_setup Tb11
       execute diis_setup Tb12
       execute diis_setup Tb13
       execute diis_setup Tb14
       execute diis_setup Tb15
       execute diis_setup Tb16
       execute diis_setup Tb17
       execute diis_setup Tb18
       execute diis_setup Tb19
       execute diis_setup Tb110

       execute diis_setup Tb22
       execute diis_setup Tb23
       execute diis_setup Tb24
       execute diis_setup Tb25
       execute diis_setup Tb26
       execute diis_setup Tb27
       execute diis_setup Tb28
       execute diis_setup Tb29
       execute diis_setup Tb210

       execute diis_setup Tb33
       execute diis_setup Tb34
       execute diis_setup Tb35
       execute diis_setup Tb36
       execute diis_setup Tb37
       execute diis_setup Tb38
       execute diis_setup Tb39
       execute diis_setup Tb310

       execute diis_setup Tb44
       execute diis_setup Tb45
       execute diis_setup Tb46
       execute diis_setup Tb47
       execute diis_setup Tb48
       execute diis_setup Tb49
       execute diis_setup Tb410

       execute diis_setup Tb55
       execute diis_setup Tb56
       execute diis_setup Tb57
       execute diis_setup Tb58
       execute diis_setup Tb59
       execute diis_setup Tb510

       execute diis_setup Tb66
       execute diis_setup Tb67
       execute diis_setup Tb68
       execute diis_setup Tb69
       execute diis_setup Tb610

       execute diis_setup Tb77
       execute diis_setup Tb78
       execute diis_setup Tb79
       execute diis_setup Tb710

       execute diis_setup Tb88
       execute diis_setup Tb89
       execute diis_setup Tb810

       execute diis_setup Tb99
       execute diis_setup Tb910

       execute diis_setup Tb1010
#
       execute sip_barrier
#
     ENDPROC SETUP_DIIS   
#    ------------------ 
#
# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
#
     PROC DIIS1  
#    ---------- 
#
#    Zero out scalars.
#    ----------------- 
#
     CALL ZERO_DSCALAR 
#
     execute sip_barrier 
     execute server_barrier 
#
#    Determine the 'B-matrix'. 
#    ------------------------- 
#
#    Compute contributions due to T2aiai amplitudes. 
#    ----------------------------------------------- 
#
#
     PARDO a, i, a1, i1
#
#          REQUEST/GET amplitude data from all 2 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1aiai(a,i,a1,i1) a # kiter-1 amplitudes
           REQUEST e2aiai(a,i,a1,i1) a # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,2
#             ---------
#
              etemp = e1aiai(a,i,a1,i1)*e1aiai(a,i,a1,i1)
              b11  += etemp
#
              etemp = e1aiai(a,i,a1,i1)*e2aiai(a,i,a1,i1)
              b12  += etemp
#
#             b1x x=2,2
#             ---------
#
              etemp = e2aiai(a,i,a1,i1)*e2aiai(a,i,a1,i1)
              b22  += etemp
#
     ENDPARDO a, i, a1, i1
#
#    Compute contributions due to T2bjbj amplitudes.
#    -----------------------------------------------
#
     PARDO b, j, b1, j1
#
#          REQUEST/GET amplitude data from all 2 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1bjbj(b,j,b1,j1) b # kiter-1 amplitudes
           REQUEST e2bjbj(b,j,b1,j1) b # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,2
#             ---------
#
              etemp = e1bjbj(b,j,b1,j1)*e1bjbj(b,j,b1,j1)
              b11  += etemp
#
              etemp = e1bjbj(b,j,b1,j1)*e2bjbj(b,j,b1,j1)
              b12  += etemp
#
#             b1x x=2,2
#             ---------
#
              etemp = e2bjbj(b,j,b1,j1)*e2bjbj(b,j,b1,j1)
              b22  += etemp
#
     ENDPARDO b, j, b1, j1
#
#    Compute contributions due to T2aibj amplitudes.
#    -----------------------------------------------
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 2 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1aibj(a,i,b,j) a # kiter-1 amplitudes
           REQUEST e2aibj(a,i,b,j) a # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,2
#             ---------
#
              etemp = e1aibj(a,i,b,j)*e1aibj(a,i,b,j)
              etemp *= 4.0
              b11  += etemp
#
              etemp = e1aibj(a,i,b,j)*e2aibj(a,i,b,j)
              etemp *= 4.0
              b12  += etemp
#
#             b1x x=2,2
#             ---------
#
              etemp = e2aibj(a,i,b,j)*e2aibj(a,i,b,j)
              etemp *= 4.0
              b22  += etemp
#
     ENDPARDO a, i, b, j
#
#    Compute contributions due to T1ai amplitudes. 
#    --------------------------------------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 2 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET e1ai(a,i)    # kiter-1 amplitudes  
           GET e2ai(a,i)    # kiter-0 amplitudes  
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#             b1x x=1,2 
#             --------- 
#
              etemp = e1ai(a,i)*e1ai(a,i) 
              etemp *= 4.0
              b11  += etemp            
#
              etemp = e1ai(a,i)*e2ai(a,i) 
              etemp *= 4.0
              b12  += etemp            
#
#             b1x x=2,2 
#             --------- 
#
              etemp = e2ai(a,i)*e2ai(a,i) 
              etemp *= 4.0
              b22  += etemp            
#
     ENDPARDO a, i 
#
#    Compute contributions due to T1bj amplitudes. 
#    --------------------------------------------- 
#
     PARDO b, j  
#
#          REQUEST/GET amplitude data from all 2 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET e1bj(b,j)    # kiter-1 amplitudes  
           GET e2bj(b,j)    # kiter-0 amplitudes  
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#             b1x x=1,2 
#             --------- 
#
              etemp = e1bj(b,j)*e1bj(b,j) 
              etemp *= 4.0
              b11  += etemp            
#
              etemp = e1bj(b,j)*e2bj(b,j) 
              etemp *= 4.0
              b12  += etemp            
#
#             b1x x=2,2 
#             --------- 
#
              etemp = e2bj(b,j)*e2bj(b,j) 
              etemp *= 4.0
              b22  += etemp            
#
     ENDPARDO b, j 
#
     execute sip_barrier
     execute server_barrier 
#
#    Collectively sum B-matrix elements. 
#    -----------------------------------
#
     collective Tb11 += b11 
     collective Tb12 += b12 
     collective Tb22 += b22 
#
#    Now the unique elements of the 'B-matrix' have been computed, the array is filled out
#    in the setup_diis. 
#    --------------------------------------------------------------------------------------
#
#    Put the elements of the 'B-matrix', which have been computed as scalars into the  
#    R-matrix. 
#    -------------------------------------------------------------------------------- 
#
     CALL SETUP_DIIS 
#
     execute compute_diis # --> New instruction  
#
     c1 = Tb11 
     c2 = Tb22 
     execute print_scalar c1 
     execute print_scalar c2 
     execute sip_barrier 
     execute server_barrier 
#
#    Done computing the c-vector. 
#    ---------------------------- 
#
#    Form the updated amplitudes using the c-vector. 
#    -----------------------------------------------  
#
#    Form T2old_aa. 
#    -------------- 
#
     PARDO a, i, a1, i1
#
#          REQUEST/GET amplitude data from all 2 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST d0aiai(a,i,a1,i1) a # kiter-2 amplitudes
           REQUEST d1aiai(a,i,a1,i1) a # kiter-1 amplitudes
#
           REQUEST e1aiai(a,i,a1,i1) a # kiter-1 amplitudes
           REQUEST e2aiai(a,i,a1,i1) a # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> T2old_aa.
#          ---------------------------------------------------------
#
           t2aiai(a,i,a1,i1)            = d0aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           += e1aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           *= c1
           taiai(a,i,a1,i1)             = t2aiai(a,i,a1,i1)
#
           t2aiai(a,i,a1,i1)            = d1aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           += e2aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           *= c2
           taiai(a,i,a1,i1)            += t2aiai(a,i,a1,i1)
#
           PUT T2old_aa(a,i,a1,i1)      = taiai(a,i,a1,i1)
#
     ENDPARDO a, i, a1, i1
#
#    Form T2old_bb. 
#    -------------- 
#
     PARDO b, j, b1, j1
#
#          REQUEST/GET amplitude data from all 2 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST D0bjbj(b,j,b1,j1) b # kiter-2 amplitudes
           REQUEST D1bjbj(b,j,b1,j1) b # kiter-1 amplitudes
#
           REQUEST e1bjbj(b,j,b1,j1) b # kiter-1 amplitudes
           REQUEST e2bjbj(b,j,b1,j1) b # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> T2old_bb.
#          ---------------------------------------------------------
#
           t2bjbj(b,j,b1,j1)            = d0bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           += e1bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           *= c1
           tbjbj(b,j,b1,j1)             = t2bjbj(b,j,b1,j1)
#
           t2bjbj(b,j,b1,j1)            = d1bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           += e2bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           *= c2
           tbjbj(b,j,b1,j1)            += t2bjbj(b,j,b1,j1)
#
           PUT T2old_bb(b,j,b1,j1)      = tbjbj(b,j,b1,j1)
#
     ENDPARDO b, j, b1, j1
#
#    Form T2old_ab. 
#    -------------- 
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 2 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST D0aibj(a,i,b,j) a # kiter-2 amplitudes
           REQUEST D1aibj(a,i,b,j) a # kiter-1 amplitudes
#
           REQUEST e1aibj(a,i,b,j) a # kiter-1 amplitudes
           REQUEST e2aibj(a,i,b,j) a # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> T2old_ab.
#          ---------------------------------------------------------
#
           t2aibj(a,i,b,j)            = d0aibj(a,i,b,j)
           t2aibj(a,i,b,j)           += e1aibj(a,i,b,j)
           t2aibj(a,i,b,j)           *= c1
           taibj(a,i,b,j)             = t2aibj(a,i,b,j)
#
           t2aibj(a,i,b,j)            = d1aibj(a,i,b,j)
           t2aibj(a,i,b,j)           += e2aibj(a,i,b,j)
           t2aibj(a,i,b,j)           *= c2
           taibj(a,i,b,j)            += t2aibj(a,i,b,j)
#
           PUT T2old_ab(a,i,b,j)      = taibj(a,i,b,j)
#
     ENDPARDO a, i, b, j
#
#    Form tai_old. 
#    ------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 2 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET D0ai(a,i)     # kiter-2 amplitudes  
           GET D1ai(a,i)     # kiter-1 amplitudes  
#
           GET e1ai(a,i)     # kiter-1 amplitudes  
           GET e2ai(a,i)     # kiter-0 amplitudes  
#
#          Compute contributions to updated amplitudes --> tai_old. 
#          --------------------------------------------------------  
# 
           t1ai(a,i)     = d0ai(a,i) 
           t1ai(a,i)    += e1ai(a,i) 
           t1ai(a,i)    *= c1  
           tai(a,i)      = t1ai(a,i) 
#
           t1ai(a,i)     = d1ai(a,i) 
           t1ai(a,i)    += e2ai(a,i) 
           t1ai(a,i)    *= c2  
           tai(a,i)     += t1ai(a,i) 
# 
           PUT t1a_old(a,i) = tai(a,i) 
#
     ENDPARDO a, i  
#
#    Form tbj_old. 
#    ------------- 
#
     PARDO b, j  
#
#          REQUEST/GET amplitude data from all 2 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET D0bj(b,j)     # kiter-2 amplitudes  
           GET D1bj(b,j)     # kiter-1 amplitudes  
#
           GET e1bj(b,j)     # kiter-1 amplitudes  
           GET e2bj(b,j)     # kiter-0 amplitudes  
#
#          Compute contributions to updated amplitudes --> tbj_old. 
#          --------------------------------------------------------  
# 
           t1bj(b,j)     = d0bj(b,j) 
           t1bj(b,j)    += e1bj(b,j) 
           t1bj(b,j)    *= c1  
           tbj(b,j)      = t1bj(b,j) 
# 
           t1bj(b,j)     = d1bj(b,j) 
           t1bj(b,j)    += e2bj(b,j) 
           t1bj(b,j)    *= c2  
           tbj(b,j)     += t1bj(b,j) 
# 
           PUT t1b_old(b,j) = tbj(b,j) 
# 
     ENDPARDO b, j 
#
     execute sip_barrier 
     execute server_barrier 
#
     ENDPROC DIIS1  
#    ------------- 
#
# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
#
     PROC DIIS2  
#    ---------- 
#
#    Zero out scalars.
#    ----------------- 
#
     CALL ZERO_DSCALAR 
#
     execute sip_barrier 
     execute server_barrier 
#
#    Determine the 'B-matrix'. 
#    ------------------------- 
#
#    Compute contributions due to T2aiai amplitudes. 
#    ----------------------------------------------- 
#
#
     PARDO a, i, a1, i1
#
#          REQUEST/GET amplitude data from all 3 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1aiai(a,i,a1,i1) a # kiter-2 amplitudes
           REQUEST e2aiai(a,i,a1,i1) a # kiter-1 amplitudes
           REQUEST e3aiai(a,i,a1,i1) a # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,3
#             ---------
#
              etemp = e1aiai(a,i,a1,i1)*e1aiai(a,i,a1,i1)
              b11  += etemp
#
              etemp = e1aiai(a,i,a1,i1)*e2aiai(a,i,a1,i1)
              b12  += etemp
#
              etemp = e1aiai(a,i,a1,i1)*e3aiai(a,i,a1,i1)
              b13  += etemp
#
#             b1x x=2,3
#             ---------
#
              etemp = e2aiai(a,i,a1,i1)*e2aiai(a,i,a1,i1)
              b22  += etemp
#
              etemp = e2aiai(a,i,a1,i1)*e3aiai(a,i,a1,i1)
              b23  += etemp
#
#             b1x x=3,3
#             ---------
#
              etemp = e3aiai(a,i,a1,i1)*e3aiai(a,i,a1,i1)
              b33  += etemp
#
     ENDPARDO a, i, a1, i1
#
#    Compute contributions due to T2bjbj amplitudes.
#    -----------------------------------------------
#
     PARDO b, j, b1, j1
#
#          REQUEST/GET amplitude data from all 3 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1bjbj(b,j,b1,j1) b # kiter-2 amplitudes
           REQUEST e2bjbj(b,j,b1,j1) b # kiter-1 amplitudes
           REQUEST e3bjbj(b,j,b1,j1) b # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,3
#             ---------
#
              etemp = e1bjbj(b,j,b1,j1)*e1bjbj(b,j,b1,j1)
              b11  += etemp
#
              etemp = e1bjbj(b,j,b1,j1)*e2bjbj(b,j,b1,j1)
              b12  += etemp
#
              etemp = e1bjbj(b,j,b1,j1)*e3bjbj(b,j,b1,j1)
              b13  += etemp
#
#             b1x x=2,3
#             ---------
#
              etemp = e2bjbj(b,j,b1,j1)*e2bjbj(b,j,b1,j1)
              b22  += etemp
#
              etemp = e2bjbj(b,j,b1,j1)*e3bjbj(b,j,b1,j1)
              b23  += etemp
#
#             b1x x=3,3
#             ---------
#
              etemp = e3bjbj(b,j,b1,j1)*e3bjbj(b,j,b1,j1)
              b33  += etemp
#
     ENDPARDO b, j, b1, j1
#
#    Compute contributions due to T2aibj amplitudes.
#    -----------------------------------------------
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 3 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1aibj(a,i,b,j) a # kiter-2 amplitudes
           REQUEST e2aibj(a,i,b,j) a # kiter-1 amplitudes
           REQUEST e3aibj(a,i,b,j) a # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,3
#             ---------
#
              etemp = e1aibj(a,i,b,j)*e1aibj(a,i,b,j)
              etemp *= 4.0
              b11  += etemp
#
              etemp = e1aibj(a,i,b,j)*e2aibj(a,i,b,j)
              etemp *= 4.0
              b12  += etemp
#
              etemp = e1aibj(a,i,b,j)*e3aibj(a,i,b,j)
              etemp *= 4.0
              b13  += etemp
#
#             b1x x=2,3
#             ---------
#
              etemp = e2aibj(a,i,b,j)*e2aibj(a,i,b,j)
              etemp *= 4.0
              b22  += etemp
#
              etemp = e2aibj(a,i,b,j)*e3aibj(a,i,b,j)
              etemp *= 4.0
              b23  += etemp
#
#             b1x x=3,3
#             ---------
#
              etemp = e3aibj(a,i,b,j)*e3aibj(a,i,b,j)
              etemp *= 4.0
              b33  += etemp
#
     ENDPARDO a, i, b, j
#
#    Compute contributions due to T1ai amplitudes. 
#    --------------------------------------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 4 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET e1ai(a,i)    # kiter-2 amplitudes  
           GET e2ai(a,i)    # kiter-1 amplitudes  
           GET e3ai(a,i)    # kiter-0 amplitudes  
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#             b1x x=1,3 
#             --------- 
#
              etemp = e1ai(a,i)*e1ai(a,i) 
              etemp *= 4.0
              b11  += etemp            
#
              etemp = e1ai(a,i)*e2ai(a,i) 
              etemp *= 4.0
              b12  += etemp            
#
              etemp = e1ai(a,i)*e3ai(a,i) 
              etemp *= 4.0
              b13  += etemp            
#
#             b1x x=2,3 
#             --------- 
#
              etemp = e2ai(a,i)*e2ai(a,i) 
              etemp *= 4.0
              b22  += etemp            
#
              etemp = e2ai(a,i)*e3ai(a,i) 
              etemp *= 4.0
              b23  += etemp            
#
#             b1x x=3,3 
#             --------- 
#
              etemp = e3ai(a,i)*e3ai(a,i) 
              etemp *= 4.0
              b33  += etemp            
#
     ENDPARDO a, i 
#
#    Compute contributions due to T1bj amplitudes. 
#    --------------------------------------------- 
#
     PARDO b, j  
#
#          REQUEST/GET amplitude data from all 3 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET e1bj(b,j)    # kiter-2 amplitudes  
           GET e2bj(b,j)    # kiter-1 amplitudes  
           GET e3bj(b,j)    # kiter-0 amplitudes  
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#             b1x x=1,3 
#             --------- 
#
              etemp = e1bj(b,j)*e1bj(b,j) 
              etemp *= 4.0
              b11  += etemp            
#
              etemp = e1bj(b,j)*e2bj(b,j) 
              etemp *= 4.0
              b12  += etemp            
#
              etemp = e1bj(b,j)*e3bj(b,j) 
              etemp *= 4.0
              b13  += etemp            
#
#             b1x x=2,3 
#             --------- 
#
              etemp = e2bj(b,j)*e2bj(b,j) 
              etemp *= 4.0
              b22  += etemp            
#
              etemp = e2bj(b,j)*e3bj(b,j) 
              etemp *= 4.0
              b23  += etemp            
#
#             b1x x=3,3 
#             --------- 
#
              etemp = e3bj(b,j)*e3bj(b,j) 
              etemp *= 4.0
              b33  += etemp            
#
     ENDPARDO b, j 
#
     execute sip_barrier
     execute server_barrier 
#
#    Collectively sum B-matrix elements. 
#    -----------------------------------
#
     collective Tb11 += b11 
     collective Tb12 += b12 
     collective Tb13 += b13 
     collective Tb22 += b22 
     collective Tb23 += b23 
     collective Tb33 += b33 
#
#    Now the unique elements of the 'B-matrix' have been computed and the array filled out. 
#    --------------------------------------------------------------------------------------
#
#    Put the elements of the 'B-matrix', which have been computed as scalars into the  
#    R-matrix. 
#    -------------------------------------------------------------------------------- 
#
     CALL SETUP_DIIS 
#
     execute compute_diis # --> New instruction  
#
     c1 = Tb11 
     c2 = Tb22 
     c3 = Tb33 
     execute print_scalar c1 
     execute print_scalar c2 
     execute print_scalar c3 
     execute sip_barrier 
     execute server_barrier 
#
#    Done computing the c-vector. 
#    ---------------------------- 
#
#    Form the updated amplitudes using the c-vector. 
#    -----------------------------------------------  
#
#    Form T2old_aa. 
#    -------------- 
#
     PARDO a, i, a1, i1
#
#          REQUEST/GET amplitude data from all 3 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST d0aiai(a,i,a1,i1) a # kiter-3 amplitudes
           REQUEST d1aiai(a,i,a1,i1) a # kiter-2 amplitudes
           REQUEST d2aiai(a,i,a1,i1) a # kiter-1 amplitudes
#
           REQUEST e1aiai(a,i,a1,i1) a # kiter-2 amplitudes
           REQUEST e2aiai(a,i,a1,i1) a # kiter-1 amplitudes
           REQUEST e3aiai(a,i,a1,i1) a # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> T2old_aa.
#          ---------------------------------------------------------
#
           t2aiai(a,i,a1,i1)            = d0aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           += e1aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           *= c1
           taiai(a,i,a1,i1)             = t2aiai(a,i,a1,i1)
#
           t2aiai(a,i,a1,i1)            = d1aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           += e2aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           *= c2
           taiai(a,i,a1,i1)            += t2aiai(a,i,a1,i1)
#
           t2aiai(a,i,a1,i1)            = d2aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           += e3aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           *= c3
           taiai(a,i,a1,i1)            += t2aiai(a,i,a1,i1)
#
           PUT T2old_aa(a,i,a1,i1)      = taiai(a,i,a1,i1)
#
     ENDPARDO a, i, a1, i1
#
#    Form T2old_bb. 
#    -------------- 
#
     PARDO b, j, b1, j1
#
#          REQUEST/GET amplitude data from all 3 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST D0bjbj(b,j,b1,j1) b # kiter-3 amplitudes
           REQUEST D1bjbj(b,j,b1,j1) b # kiter-2 amplitudes
           REQUEST D2bjbj(b,j,b1,j1) b # kiter-1 amplitudes
#
           REQUEST e1bjbj(b,j,b1,j1) b # kiter-2 amplitudes
           REQUEST e2bjbj(b,j,b1,j1) b # kiter-1 amplitudes
           REQUEST e3bjbj(b,j,b1,j1) b # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> T2old_bb.
#          ---------------------------------------------------------
#
           t2bjbj(b,j,b1,j1)            = d0bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           += e1bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           *= c1
           tbjbj(b,j,b1,j1)             = t2bjbj(b,j,b1,j1)
#
           t2bjbj(b,j,b1,j1)            = d1bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           += e2bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           *= c2
           tbjbj(b,j,b1,j1)            += t2bjbj(b,j,b1,j1)
#
           t2bjbj(b,j,b1,j1)            = d2bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           += e3bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           *= c3
           tbjbj(b,j,b1,j1)            += t2bjbj(b,j,b1,j1)
#
           PUT T2old_bb(b,j,b1,j1)      = tbjbj(b,j,b1,j1)
#
     ENDPARDO b, j, b1, j1
#
#    Form T2old_ab. 
#    -------------- 
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 3 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST D0aibj(a,i,b,j) a # kiter-3 amplitudes
           REQUEST D1aibj(a,i,b,j) a # kiter-2 amplitudes
           REQUEST D2aibj(a,i,b,j) a # kiter-1 amplitudes
#
           REQUEST e1aibj(a,i,b,j) a # kiter-2 amplitudes
           REQUEST e2aibj(a,i,b,j) a # kiter-1 amplitudes
           REQUEST e3aibj(a,i,b,j) a # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> T2old_ab.
#          ---------------------------------------------------------
#
           t2aibj(a,i,b,j)            = d0aibj(a,i,b,j)
           t2aibj(a,i,b,j)           += e1aibj(a,i,b,j)
           t2aibj(a,i,b,j)           *= c1
           taibj(a,i,b,j)             = t2aibj(a,i,b,j)
#
           t2aibj(a,i,b,j)            = d1aibj(a,i,b,j)
           t2aibj(a,i,b,j)           += e2aibj(a,i,b,j)
           t2aibj(a,i,b,j)           *= c2
           taibj(a,i,b,j)            += t2aibj(a,i,b,j)
#
           t2aibj(a,i,b,j)            = d2aibj(a,i,b,j)
           t2aibj(a,i,b,j)           += e3aibj(a,i,b,j)
           t2aibj(a,i,b,j)           *= c3
           taibj(a,i,b,j)            += t2aibj(a,i,b,j)
#
           PUT T2old_ab(a,i,b,j)      = taibj(a,i,b,j)
#
     ENDPARDO a, i, b, j
#
#    Form tai_old. 
#    ------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 3 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET D0ai(a,i)     # kiter-3 amplitudes  
           GET D1ai(a,i)     # kiter-2 amplitudes  
           GET D2ai(a,i)     # kiter-1 amplitudes  
#
           GET e1ai(a,i)     # kiter-2 amplitudes  
           GET e2ai(a,i)     # kiter-1 amplitudes  
           GET e3ai(a,i)     # kiter-0 amplitudes  
#
#          Compute contributions to updated amplitudes --> tai_old. 
#          --------------------------------------------------------  
# 
           t1ai(a,i)     = d0ai(a,i) 
           t1ai(a,i)    += e1ai(a,i) 
           t1ai(a,i)    *= c1  
           tai(a,i)      = t1ai(a,i) 
#
           t1ai(a,i)     = d1ai(a,i) 
           t1ai(a,i)    += e2ai(a,i) 
           t1ai(a,i)    *= c2  
           tai(a,i)     += t1ai(a,i) 
#
           t1ai(a,i)     = d2ai(a,i) 
           t1ai(a,i)    += e3ai(a,i) 
           t1ai(a,i)    *= c3  
           tai(a,i)     += t1ai(a,i) 
# 
           PUT t1a_old(a,i) = tai(a,i) 
#
     ENDPARDO a, i  
#
#    Form tbj_old. 
#    ------------- 
#
     PARDO b, j  
#
#          REQUEST/GET amplitude data from all 3 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET D0bj(b,j)     # kiter-3 amplitudes  
           GET D1bj(b,j)     # kiter-2 amplitudes  
           GET D2bj(b,j)     # kiter-1 amplitudes  
#
           GET e1bj(b,j)     # kiter-2 amplitudes  
           GET e2bj(b,j)     # kiter-1 amplitudes  
           GET e3bj(b,j)     # kiter-0 amplitudes  
#
#          Compute contributions to updated amplitudes --> tbj_old. 
#          --------------------------------------------------------  
# 
           t1bj(b,j)     = d0bj(b,j) 
           t1bj(b,j)    += e1bj(b,j) 
           t1bj(b,j)    *= c1  
           tbj(b,j)      = t1bj(b,j) 
# 
           t1bj(b,j)     = d1bj(b,j) 
           t1bj(b,j)    += e2bj(b,j) 
           t1bj(b,j)    *= c2  
           tbj(b,j)     += t1bj(b,j) 
# 
           t1bj(b,j)     = d2bj(b,j) 
           t1bj(b,j)    += e3bj(b,j) 
           t1bj(b,j)    *= c3  
           tbj(b,j)     += t1bj(b,j) 
# 
           PUT t1b_old(b,j) = tbj(b,j) 
# 
     ENDPARDO b, j 
#
     execute sip_barrier 
     execute server_barrier 
#
     ENDPROC DIIS2  
#    ------------- 
#
# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
#
     PROC DIIS3  
#    ---------- 
#
#    Zero out scalars.
#    ----------------- 
#
     CALL ZERO_DSCALAR 
#
     execute sip_barrier 
     execute server_barrier 
#
#    Determine the 'B-matrix'. 
#    ------------------------- 
#
#    Compute contributions due to T2aiai amplitudes. 
#    ----------------------------------------------- 
#
#
     PARDO a, i, a1, i1
#
#          REQUEST/GET amplitude data from all 4 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1aiai(a,i,a1,i1) a # kiter-3 amplitudes
           REQUEST e2aiai(a,i,a1,i1) a # kiter-2 amplitudes
           REQUEST e3aiai(a,i,a1,i1) a # kiter-1 amplitudes
           REQUEST e4aiai(a,i,a1,i1) a # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,4
#             ---------
#
              etemp = e1aiai(a,i,a1,i1)*e1aiai(a,i,a1,i1)
              b11  += etemp
#
              etemp = e1aiai(a,i,a1,i1)*e2aiai(a,i,a1,i1)
              b12  += etemp
#
              etemp = e1aiai(a,i,a1,i1)*e3aiai(a,i,a1,i1)
              b13  += etemp
#
              etemp = e1aiai(a,i,a1,i1)*e4aiai(a,i,a1,i1)
              b14  += etemp
#
#             b1x x=2,4
#             ---------
#
              etemp = e2aiai(a,i,a1,i1)*e2aiai(a,i,a1,i1)
              b22  += etemp
#
              etemp = e2aiai(a,i,a1,i1)*e3aiai(a,i,a1,i1)
              b23  += etemp
#
              etemp = e2aiai(a,i,a1,i1)*e4aiai(a,i,a1,i1)
              b24  += etemp
#
#             b1x x=3,4
#             ---------
#
              etemp = e3aiai(a,i,a1,i1)*e3aiai(a,i,a1,i1)
              b33  += etemp
#
              etemp = e3aiai(a,i,a1,i1)*e4aiai(a,i,a1,i1)
              b34  += etemp
#
#             b1x x=4,4
#             ---------
#
              etemp = e4aiai(a,i,a1,i1)*e4aiai(a,i,a1,i1)
              b44  += etemp
#
     ENDPARDO a, i, a1, i1
#
#    Compute contributions due to T2bjbj amplitudes.
#    -----------------------------------------------
#
     PARDO b, j, b1, j1
#
#          REQUEST/GET amplitude data from all 4 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1bjbj(b,j,b1,j1) b # kiter-3 amplitudes
           REQUEST e2bjbj(b,j,b1,j1) b # kiter-2 amplitudes
           REQUEST e3bjbj(b,j,b1,j1) b # kiter-1 amplitudes
           REQUEST e4bjbj(b,j,b1,j1) b # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,4
#             ---------
#
              etemp = e1bjbj(b,j,b1,j1)*e1bjbj(b,j,b1,j1)
              b11  += etemp
#
              etemp = e1bjbj(b,j,b1,j1)*e2bjbj(b,j,b1,j1)
              b12  += etemp
#
              etemp = e1bjbj(b,j,b1,j1)*e3bjbj(b,j,b1,j1)
              b13  += etemp
#
              etemp = e1bjbj(b,j,b1,j1)*e4bjbj(b,j,b1,j1)
              b14  += etemp
#
#             b1x x=2,4
#             ---------
#
              etemp = e2bjbj(b,j,b1,j1)*e2bjbj(b,j,b1,j1)
              b22  += etemp
#
              etemp = e2bjbj(b,j,b1,j1)*e3bjbj(b,j,b1,j1)
              b23  += etemp
#
              etemp = e2bjbj(b,j,b1,j1)*e4bjbj(b,j,b1,j1)
              b24  += etemp
#
#             b1x x=3,4
#             ---------
#
              etemp = e3bjbj(b,j,b1,j1)*e3bjbj(b,j,b1,j1)
              b33  += etemp
#
              etemp = e3bjbj(b,j,b1,j1)*e4bjbj(b,j,b1,j1)
              b34  += etemp
#
#             b1x x=4,4
#             ---------
#
              etemp = e4bjbj(b,j,b1,j1)*e4bjbj(b,j,b1,j1)
              b44  += etemp
#
     ENDPARDO b, j, b1, j1
#
#    Compute contributions due to T2aibj amplitudes.
#    -----------------------------------------------
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 4 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1aibj(a,i,b,j) a # kiter-3 amplitudes
           REQUEST e2aibj(a,i,b,j) a # kiter-2 amplitudes
           REQUEST e3aibj(a,i,b,j) a # kiter-1 amplitudes
           REQUEST e4aibj(a,i,b,j) a # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,4
#             ---------
#
              etemp = e1aibj(a,i,b,j)*e1aibj(a,i,b,j)
              etemp *= 4.0
              b11  += etemp
#
              etemp = e1aibj(a,i,b,j)*e2aibj(a,i,b,j)
              etemp *= 4.0
              b12  += etemp
#
              etemp = e1aibj(a,i,b,j)*e3aibj(a,i,b,j)
              etemp *= 4.0
              b13  += etemp
#
              etemp = e1aibj(a,i,b,j)*e4aibj(a,i,b,j)
              etemp *= 4.0
              b14  += etemp
#
#             b1x x=2,4
#             ---------
#
              etemp = e2aibj(a,i,b,j)*e2aibj(a,i,b,j)
              etemp *= 4.0
              b22  += etemp
#
              etemp = e2aibj(a,i,b,j)*e3aibj(a,i,b,j)
              etemp *= 4.0
              b23  += etemp
#
              etemp = e2aibj(a,i,b,j)*e4aibj(a,i,b,j)
              etemp *= 4.0
              b24  += etemp
#
#             b1x x=3,4
#             ---------
#
              etemp = e3aibj(a,i,b,j)*e3aibj(a,i,b,j)
              etemp *= 4.0
              b33  += etemp
#
              etemp = e3aibj(a,i,b,j)*e4aibj(a,i,b,j)
              etemp *= 4.0
              b34  += etemp
#
#             b1x x=4,4
#             ---------
#
              etemp = e4aibj(a,i,b,j)*e4aibj(a,i,b,j)
              etemp *= 4.0
              b44  += etemp
#
     ENDPARDO a, i, b, j
#
#    Compute contributions due to T1ai amplitudes. 
#    --------------------------------------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 4 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET e1ai(a,i)    # kiter-3 amplitudes  
           GET e2ai(a,i)    # kiter-2 amplitudes  
           GET e3ai(a,i)    # kiter-1 amplitudes  
           GET e4ai(a,i)    # kiter-0 amplitudes  
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#             b1x x=1,4 
#             --------- 
#
              etemp = e1ai(a,i)*e1ai(a,i) 
              etemp *= 4.0
              b11  += etemp            
#
              etemp = e1ai(a,i)*e2ai(a,i) 
              etemp *= 4.0
              b12  += etemp            
#
              etemp = e1ai(a,i)*e3ai(a,i) 
              etemp *= 4.0
              b13  += etemp            
#
              etemp = e1ai(a,i)*e4ai(a,i) 
              etemp *= 4.0
              b14  += etemp            
#
#             b1x x=2,4 
#             --------- 
#
              etemp = e2ai(a,i)*e2ai(a,i) 
              etemp *= 4.0
              b22  += etemp            
#
              etemp = e2ai(a,i)*e3ai(a,i) 
              etemp *= 4.0
              b23  += etemp            
#
              etemp = e2ai(a,i)*e4ai(a,i) 
              etemp *= 4.0
              b24  += etemp            
#
#             b1x x=3,4 
#             --------- 
#
              etemp = e3ai(a,i)*e3ai(a,i) 
              etemp *= 4.0
              b33  += etemp            
#
              etemp = e3ai(a,i)*e4ai(a,i) 
              etemp *= 4.0
              b34  += etemp            
#
#             b1x x=4,4 
#             --------- 
#
              etemp = e4ai(a,i)*e4ai(a,i) 
              etemp *= 4.0
              b44  += etemp            
#
     ENDPARDO a, i 
#
#    Compute contributions due to T1bj amplitudes. 
#    --------------------------------------------- 
#
     PARDO b, j  
#
#          REQUEST/GET amplitude data from all 4 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET e1bj(b,j)    # kiter-3 amplitudes  
           GET e2bj(b,j)    # kiter-2 amplitudes  
           GET e3bj(b,j)    # kiter-1 amplitudes  
           GET e4bj(b,j)    # kiter-0 amplitudes  
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#             b1x x=1,4 
#             --------- 
#
              etemp = e1bj(b,j)*e1bj(b,j) 
              etemp *= 4.0
              b11  += etemp            
#
              etemp = e1bj(b,j)*e2bj(b,j) 
              etemp *= 4.0
              b12  += etemp            
#
              etemp = e1bj(b,j)*e3bj(b,j) 
              etemp *= 4.0
              b13  += etemp            
#
              etemp = e1bj(b,j)*e4bj(b,j) 
              etemp *= 4.0
              b14  += etemp            
#
#             b1x x=2,4 
#             --------- 
#
              etemp = e2bj(b,j)*e2bj(b,j) 
              etemp *= 4.0
              b22  += etemp            
#
              etemp = e2bj(b,j)*e3bj(b,j) 
              etemp *= 4.0
              b23  += etemp            
#
              etemp = e2bj(b,j)*e4bj(b,j) 
              etemp *= 4.0
              b24  += etemp            
#
#             b1x x=3,4 
#             --------- 
#
              etemp = e3bj(b,j)*e3bj(b,j) 
              etemp *= 4.0
              b33  += etemp            
#
              etemp = e3bj(b,j)*e4bj(b,j) 
              etemp *= 4.0
              b34  += etemp            
#
#             b1x x=4,4 
#             --------- 
#
              etemp = e4bj(b,j)*e4bj(b,j) 
              etemp *= 4.0
              b44  += etemp            
#
     ENDPARDO b, j 
#
     execute sip_barrier
     execute server_barrier 
#
#    Collectively sum B-matrix elements. 
#    -----------------------------------
#
     collective Tb11 += b11 
     collective Tb12 += b12 
     collective Tb13 += b13 
     collective Tb14 += b14 
     collective Tb22 += b22 
     collective Tb23 += b23 
     collective Tb24 += b24 
     collective Tb33 += b33 
     collective Tb34 += b34 
     collective Tb44 += b44 
#
#    Now the unique elements of the 'B-matrix' have been computed and the array filled out. 
#    --------------------------------------------------------------------------------------
#
#    Put the elements of the 'B-matrix', which have been computed as scalars into the  
#    R-matrix. 
#    -------------------------------------------------------------------------------- 
#
     CALL SETUP_DIIS 
#
     execute compute_diis # --> New instruction  
#
     c1 = Tb11 
     c2 = Tb22 
     c3 = Tb33 
     c4 = Tb44 
     execute print_scalar c1 
     execute print_scalar c2 
     execute print_scalar c3 
     execute print_scalar c4 
     execute sip_barrier 
     execute server_barrier 
#
#    Done computing the c-vector. 
#    ---------------------------- 
#
#    Form the updated amplitudes using the c-vector. 
#    -----------------------------------------------  
#
#    Form T2old_aa. 
#    -------------- 
#
     PARDO a, i, a1, i1
#
#          REQUEST/GET amplitude data from all 4 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST d0aiai(a,i,a1,i1) a # kiter-4 amplitudes
           REQUEST d1aiai(a,i,a1,i1) a # kiter-3 amplitudes
           REQUEST d2aiai(a,i,a1,i1) a # kiter-2 amplitudes
           REQUEST d3aiai(a,i,a1,i1) a # kiter-1 amplitudes
#
           REQUEST e1aiai(a,i,a1,i1) a # kiter-3 amplitudes
           REQUEST e2aiai(a,i,a1,i1) a # kiter-2 amplitudes
           REQUEST e3aiai(a,i,a1,i1) a # kiter-1 amplitudes
           REQUEST e4aiai(a,i,a1,i1) a # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> T2old_aa.
#          ---------------------------------------------------------
#
           t2aiai(a,i,a1,i1)            = d0aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           += e1aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           *= c1
           taiai(a,i,a1,i1)             = t2aiai(a,i,a1,i1)
#
           t2aiai(a,i,a1,i1)            = d1aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           += e2aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           *= c2
           taiai(a,i,a1,i1)            += t2aiai(a,i,a1,i1)
#
           t2aiai(a,i,a1,i1)            = d2aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           += e3aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           *= c3
           taiai(a,i,a1,i1)            += t2aiai(a,i,a1,i1)
#
           t2aiai(a,i,a1,i1)            = d3aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           += e4aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           *= c4
           taiai(a,i,a1,i1)            += t2aiai(a,i,a1,i1)
#
           PUT T2old_aa(a,i,a1,i1)      = taiai(a,i,a1,i1)
#
     ENDPARDO a, i, a1, i1
#
#    Form T2old_bb. 
#    -------------- 
#
     PARDO b, j, b1, j1
#
#          REQUEST/GET amplitude data from all 4 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST D0bjbj(b,j,b1,j1) b # kiter-4 amplitudes
           REQUEST D1bjbj(b,j,b1,j1) b # kiter-3 amplitudes
           REQUEST D2bjbj(b,j,b1,j1) b # kiter-2 amplitudes
           REQUEST D3bjbj(b,j,b1,j1) b # kiter-1 amplitudes
#
           REQUEST e1bjbj(b,j,b1,j1) b # kiter-3 amplitudes
           REQUEST e2bjbj(b,j,b1,j1) b # kiter-2 amplitudes
           REQUEST e3bjbj(b,j,b1,j1) b # kiter-1 amplitudes
           REQUEST e4bjbj(b,j,b1,j1) b # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> T2old_bb.
#          ---------------------------------------------------------
#
           t2bjbj(b,j,b1,j1)            = d0bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           += e1bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           *= c1
           tbjbj(b,j,b1,j1)             = t2bjbj(b,j,b1,j1)
#
           t2bjbj(b,j,b1,j1)            = d1bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           += e2bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           *= c2
           tbjbj(b,j,b1,j1)            += t2bjbj(b,j,b1,j1)
#
           t2bjbj(b,j,b1,j1)            = d2bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           += e3bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           *= c3
           tbjbj(b,j,b1,j1)            += t2bjbj(b,j,b1,j1)
#
           t2bjbj(b,j,b1,j1)            = d3bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           += e4bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           *= c4
           tbjbj(b,j,b1,j1)            += t2bjbj(b,j,b1,j1)
#
           PUT T2old_bb(b,j,b1,j1)      = tbjbj(b,j,b1,j1)
#
     ENDPARDO b, j, b1, j1
#
#    Form T2old_ab. 
#    -------------- 
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 4 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST D0aibj(a,i,b,j) a # kiter-4 amplitudes
           REQUEST D1aibj(a,i,b,j) a # kiter-3 amplitudes
           REQUEST D2aibj(a,i,b,j) a # kiter-2 amplitudes
           REQUEST D3aibj(a,i,b,j) a # kiter-1 amplitudes
#
           REQUEST e1aibj(a,i,b,j) a # kiter-3 amplitudes
           REQUEST e2aibj(a,i,b,j) a # kiter-2 amplitudes
           REQUEST e3aibj(a,i,b,j) a # kiter-1 amplitudes
           REQUEST e4aibj(a,i,b,j) a # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> T2old_ab.
#          ---------------------------------------------------------
#
           t2aibj(a,i,b,j)            = d0aibj(a,i,b,j)
           t2aibj(a,i,b,j)           += e1aibj(a,i,b,j)
           t2aibj(a,i,b,j)           *= c1
           taibj(a,i,b,j)             = t2aibj(a,i,b,j)
#
           t2aibj(a,i,b,j)            = d1aibj(a,i,b,j)
           t2aibj(a,i,b,j)           += e2aibj(a,i,b,j)
           t2aibj(a,i,b,j)           *= c2
           taibj(a,i,b,j)            += t2aibj(a,i,b,j)
#
           t2aibj(a,i,b,j)            = d2aibj(a,i,b,j)
           t2aibj(a,i,b,j)           += e3aibj(a,i,b,j)
           t2aibj(a,i,b,j)           *= c3
           taibj(a,i,b,j)            += t2aibj(a,i,b,j)
#
           t2aibj(a,i,b,j)            = d3aibj(a,i,b,j)
           t2aibj(a,i,b,j)           += e4aibj(a,i,b,j)
           t2aibj(a,i,b,j)           *= c4
           taibj(a,i,b,j)            += t2aibj(a,i,b,j)
#
           PUT T2old_ab(a,i,b,j)      = taibj(a,i,b,j)
#
     ENDPARDO a, i, b, j
#
#    Form tai_old. 
#    ------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 4 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET D0ai(a,i)     # kiter-4 amplitudes  
           GET D1ai(a,i)     # kiter-3 amplitudes  
           GET D2ai(a,i)     # kiter-2 amplitudes  
           GET D3ai(a,i)     # kiter-1 amplitudes  
#
           GET e1ai(a,i)     # kiter-3 amplitudes  
           GET e2ai(a,i)     # kiter-2 amplitudes  
           GET e3ai(a,i)     # kiter-1 amplitudes  
           GET e4ai(a,i)     # kiter-0 amplitudes  
#
#          Compute contributions to updated amplitudes --> tai_old. 
#          --------------------------------------------------------  
# 
           t1ai(a,i)     = d0ai(a,i) 
           t1ai(a,i)    += e1ai(a,i) 
           t1ai(a,i)    *= c1  
           tai(a,i)      = t1ai(a,i) 
#
           t1ai(a,i)     = d1ai(a,i) 
           t1ai(a,i)    += e2ai(a,i) 
           t1ai(a,i)    *= c2  
           tai(a,i)     += t1ai(a,i) 
#
           t1ai(a,i)     = d2ai(a,i) 
           t1ai(a,i)    += e3ai(a,i) 
           t1ai(a,i)    *= c3  
           tai(a,i)     += t1ai(a,i) 
#
           t1ai(a,i)     = d3ai(a,i) 
           t1ai(a,i)    += e4ai(a,i) 
           t1ai(a,i)    *= c4  
           tai(a,i)     += t1ai(a,i) 
# 
           PUT t1a_old(a,i) = tai(a,i) 
#
     ENDPARDO a, i  
#
#    Form tbj_old. 
#    ------------- 
#
     PARDO b, j  
#
#          REQUEST/GET amplitude data from all 4 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET D0bj(b,j)     # kiter-4 amplitudes  
           GET D1bj(b,j)     # kiter-3 amplitudes  
           GET D2bj(b,j)     # kiter-2 amplitudes  
           GET D3bj(b,j)     # kiter-1 amplitudes  
#
           GET e1bj(b,j)     # kiter-3 amplitudes  
           GET e2bj(b,j)     # kiter-2 amplitudes  
           GET e3bj(b,j)     # kiter-1 amplitudes  
           GET e4bj(b,j)     # kiter-0 amplitudes  
#
#          Compute contributions to updated amplitudes --> tbj_old. 
#          --------------------------------------------------------  
# 
           t1bj(b,j)     = d0bj(b,j) 
           t1bj(b,j)    += e1bj(b,j) 
           t1bj(b,j)    *= c1  
           tbj(b,j)      = t1bj(b,j) 
# 
           t1bj(b,j)     = d1bj(b,j) 
           t1bj(b,j)    += e2bj(b,j) 
           t1bj(b,j)    *= c2  
           tbj(b,j)     += t1bj(b,j) 
# 
           t1bj(b,j)     = d2bj(b,j) 
           t1bj(b,j)    += e3bj(b,j) 
           t1bj(b,j)    *= c3  
           tbj(b,j)     += t1bj(b,j) 
# 
           t1bj(b,j)     = d3bj(b,j) 
           t1bj(b,j)    += e4bj(b,j) 
           t1bj(b,j)    *= c4  
           tbj(b,j)     += t1bj(b,j) 
# 
           PUT t1b_old(b,j) = tbj(b,j) 
# 
     ENDPARDO b, j 
#
     execute sip_barrier 
     execute server_barrier 
#
     ENDPROC DIIS3  
#    ------------- 
#
# ---------------------------------------------------------------------------------
#
# ---------------------------------------------------------------------------------
#
     PROC DIIS4  
#    ---------- 
#
#    Zero out scalars.
#    ----------------- 
#
     CALL ZERO_DSCALAR 
#
     execute sip_barrier 
     execute server_barrier 
#
#    Determine the 'B-matrix'. 
#    ------------------------- 
#
#    Compute contributions due to T2aiai amplitudes. 
#    ----------------------------------------------- 
#
#
     PARDO a, i, a1, i1
#
#          REQUEST/GET amplitude data from all 5 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1aiai(a,i,a1,i1) a # kiter-4 amplitudes
           REQUEST e2aiai(a,i,a1,i1) a # kiter-3 amplitudes
           REQUEST e3aiai(a,i,a1,i1) a # kiter-2 amplitudes
           REQUEST e4aiai(a,i,a1,i1) a # kiter-1 amplitudes
           REQUEST e5aiai(a,i,a1,i1) a # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,5
#             ---------
#
              etemp = e1aiai(a,i,a1,i1)*e1aiai(a,i,a1,i1)
              b11  += etemp
#
              etemp = e1aiai(a,i,a1,i1)*e2aiai(a,i,a1,i1)
              b12  += etemp
#
              etemp = e1aiai(a,i,a1,i1)*e3aiai(a,i,a1,i1)
              b13  += etemp
#
              etemp = e1aiai(a,i,a1,i1)*e4aiai(a,i,a1,i1)
              b14  += etemp
#
              etemp = e1aiai(a,i,a1,i1)*e5aiai(a,i,a1,i1)
              b15  += etemp
#
#             b1x x=2,5
#             ---------
#
              etemp = e2aiai(a,i,a1,i1)*e2aiai(a,i,a1,i1)
              b22  += etemp
#
              etemp = e2aiai(a,i,a1,i1)*e3aiai(a,i,a1,i1)
              b23  += etemp
#
              etemp = e2aiai(a,i,a1,i1)*e4aiai(a,i,a1,i1)
              b24  += etemp
#
              etemp = e2aiai(a,i,a1,i1)*e5aiai(a,i,a1,i1)
              b25  += etemp
#
#             b1x x=3,5
#             ---------
#
              etemp = e3aiai(a,i,a1,i1)*e3aiai(a,i,a1,i1)
              b33  += etemp
#
              etemp = e3aiai(a,i,a1,i1)*e4aiai(a,i,a1,i1)
              b34  += etemp
#
              etemp = e3aiai(a,i,a1,i1)*e5aiai(a,i,a1,i1)
              b35  += etemp
#
#             b1x x=4,5
#             ---------
#
              etemp = e4aiai(a,i,a1,i1)*e4aiai(a,i,a1,i1)
              b44  += etemp
#
              etemp = e4aiai(a,i,a1,i1)*e5aiai(a,i,a1,i1)
              b45  += etemp
#
#             b1x x=5,5
#             ---------
#
              etemp = e5aiai(a,i,a1,i1)*e5aiai(a,i,a1,i1)
              b55  += etemp
#
     ENDPARDO a, i, a1, i1
#
#    Compute contributions due to T2bjbj amplitudes.
#    -----------------------------------------------
#
     PARDO b, j, b1, j1
#
#          REQUEST/GET amplitude data from all 5 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1bjbj(b,j,b1,j1) b # kiter-4 amplitudes
           REQUEST e2bjbj(b,j,b1,j1) b # kiter-3 amplitudes
           REQUEST e3bjbj(b,j,b1,j1) b # kiter-2 amplitudes
           REQUEST e4bjbj(b,j,b1,j1) b # kiter-1 amplitudes
           REQUEST e5bjbj(b,j,b1,j1) b # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,5
#             ---------
#
              etemp = e1bjbj(b,j,b1,j1)*e1bjbj(b,j,b1,j1)
              b11  += etemp
#
              etemp = e1bjbj(b,j,b1,j1)*e2bjbj(b,j,b1,j1)
              b12  += etemp
#
              etemp = e1bjbj(b,j,b1,j1)*e3bjbj(b,j,b1,j1)
              b13  += etemp
#
              etemp = e1bjbj(b,j,b1,j1)*e4bjbj(b,j,b1,j1)
              b14  += etemp
#
              etemp = e1bjbj(b,j,b1,j1)*e5bjbj(b,j,b1,j1)
              b15  += etemp
#
#             b1x x=2,5
#             ---------
#
              etemp = e2bjbj(b,j,b1,j1)*e2bjbj(b,j,b1,j1)
              b22  += etemp
#
              etemp = e2bjbj(b,j,b1,j1)*e3bjbj(b,j,b1,j1)
              b23  += etemp
#
              etemp = e2bjbj(b,j,b1,j1)*e4bjbj(b,j,b1,j1)
              b24  += etemp
#
              etemp = e2bjbj(b,j,b1,j1)*e5bjbj(b,j,b1,j1)
              b25  += etemp
#
#             b1x x=3,5
#             ---------
#
              etemp = e3bjbj(b,j,b1,j1)*e3bjbj(b,j,b1,j1)
              b33  += etemp
#
              etemp = e3bjbj(b,j,b1,j1)*e4bjbj(b,j,b1,j1)
              b34  += etemp
#
              etemp = e3bjbj(b,j,b1,j1)*e5bjbj(b,j,b1,j1)
              b35  += etemp
#
#             b1x x=4,5
#             ---------
#
              etemp = e4bjbj(b,j,b1,j1)*e4bjbj(b,j,b1,j1)
              b44  += etemp
#
              etemp = e4bjbj(b,j,b1,j1)*e5bjbj(b,j,b1,j1)
              b45  += etemp
#
#             b1x x=5,5
#             ---------
#
              etemp = e5bjbj(b,j,b1,j1)*e5bjbj(b,j,b1,j1)
              b55  += etemp
#
     ENDPARDO b, j, b1, j1
#
#    Compute contributions due to T2aibj amplitudes.
#    -----------------------------------------------
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 5 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST e1aibj(a,i,b,j) a # kiter-4 amplitudes
           REQUEST e2aibj(a,i,b,j) a # kiter-3 amplitudes
           REQUEST e3aibj(a,i,b,j) a # kiter-2 amplitudes
           REQUEST e4aibj(a,i,b,j) a # kiter-1 amplitudes
           REQUEST e5aibj(a,i,b,j) a # kiter-0 amplitudes
#
#          Compute contributions to the 'B-matrix'.
#          ----------------------------------------
#
#             b1x x=1,5
#             ---------
#
              etemp = e1aibj(a,i,b,j)*e1aibj(a,i,b,j)
              etemp *= 4.0
              b11  += etemp
#
              etemp = e1aibj(a,i,b,j)*e2aibj(a,i,b,j)
              etemp *= 4.0
              b12  += etemp
#
              etemp = e1aibj(a,i,b,j)*e3aibj(a,i,b,j)
              etemp *= 4.0
              b13  += etemp
#
              etemp = e1aibj(a,i,b,j)*e4aibj(a,i,b,j)
              etemp *= 4.0
              b14  += etemp
#
              etemp = e1aibj(a,i,b,j)*e5aibj(a,i,b,j)
              etemp *= 4.0
              b15  += etemp
#
#             b1x x=2,5
#             ---------
#
              etemp = e2aibj(a,i,b,j)*e2aibj(a,i,b,j)
              etemp *= 4.0
              b22  += etemp
#
              etemp = e2aibj(a,i,b,j)*e3aibj(a,i,b,j)
              etemp *= 4.0
              b23  += etemp
#
              etemp = e2aibj(a,i,b,j)*e4aibj(a,i,b,j)
              etemp *= 4.0
              b24  += etemp
#
              etemp = e2aibj(a,i,b,j)*e5aibj(a,i,b,j)
              etemp *= 4.0
              b25  += etemp
#
#             b1x x=3,5
#             ---------
#
              etemp = e3aibj(a,i,b,j)*e3aibj(a,i,b,j)
              etemp *= 4.0
              b33  += etemp
#
              etemp = e3aibj(a,i,b,j)*e4aibj(a,i,b,j)
              etemp *= 4.0
              b34  += etemp
#
              etemp = e3aibj(a,i,b,j)*e5aibj(a,i,b,j)
              etemp *= 4.0
              b35  += etemp
#
#             b1x x=4,5
#             ---------
#
              etemp = e4aibj(a,i,b,j)*e4aibj(a,i,b,j)
              etemp *= 4.0
              b44  += etemp
#
              etemp = e4aibj(a,i,b,j)*e5aibj(a,i,b,j)
              etemp *= 4.0
              b45  += etemp
#
#             b1x x=5,5
#             ---------
#
              etemp = e5aibj(a,i,b,j)*e5aibj(a,i,b,j)
              etemp *= 4.0
              b55  += etemp
#
     ENDPARDO a, i, b, j
#
#    Compute contributions due to T1ai amplitudes. 
#    --------------------------------------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 5 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET e1ai(a,i)    # kiter-4 amplitudes  
           GET e2ai(a,i)    # kiter-3 amplitudes  
           GET e3ai(a,i)    # kiter-2 amplitudes  
           GET e4ai(a,i)    # kiter-1 amplitudes  
           GET e5ai(a,i)    # kiter-0 amplitudes  
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#             b1x x=1,5 
#             --------- 
#
              etemp = e1ai(a,i)*e1ai(a,i) 
              etemp *= 4.0
              b11  += etemp            
#
              etemp = e1ai(a,i)*e2ai(a,i) 
              etemp *= 4.0
              b12  += etemp            
#
              etemp = e1ai(a,i)*e3ai(a,i) 
              etemp *= 4.0
              b13  += etemp            
#
              etemp = e1ai(a,i)*e4ai(a,i) 
              etemp *= 4.0
              b14  += etemp            
#
              etemp = e1ai(a,i)*e5ai(a,i) 
              etemp *= 4.0
              b15  += etemp            
#
#             b1x x=2,5 
#             --------- 
#
              etemp = e2ai(a,i)*e2ai(a,i) 
              etemp *= 4.0
              b22  += etemp            
#
              etemp = e2ai(a,i)*e3ai(a,i) 
              etemp *= 4.0
              b23  += etemp            
#
              etemp = e2ai(a,i)*e4ai(a,i) 
              etemp *= 4.0
              b24  += etemp            
#
              etemp = e2ai(a,i)*e5ai(a,i) 
              etemp *= 4.0
              b25  += etemp            
#
#             b1x x=3,5 
#             --------- 
#
              etemp = e3ai(a,i)*e3ai(a,i) 
              etemp *= 4.0
              b33  += etemp            
#
              etemp = e3ai(a,i)*e4ai(a,i) 
              etemp *= 4.0
              b34  += etemp            
#
              etemp = e3ai(a,i)*e5ai(a,i) 
              etemp *= 4.0
              b35  += etemp            
#
#             b1x x=4,5 
#             --------- 
#
              etemp = e4ai(a,i)*e4ai(a,i) 
              etemp *= 4.0
              b44  += etemp            
#
              etemp = e4ai(a,i)*e5ai(a,i) 
              etemp *= 4.0
              b45  += etemp            
#
#             b1x x=5,5 
#             --------- 
#
              etemp = e5ai(a,i)*e5ai(a,i) 
              etemp *= 4.0
              b55  += etemp            
#
     ENDPARDO a, i 
#
#    Compute contributions due to T1bj amplitudes. 
#    --------------------------------------------- 
#
     PARDO b, j  
#
#          REQUEST/GET amplitude data from all 5 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET e1bj(b,j)    # kiter-4 amplitudes  
           GET e2bj(b,j)    # kiter-3 amplitudes  
           GET e3bj(b,j)    # kiter-2 amplitudes  
           GET e4bj(b,j)    # kiter-1 amplitudes  
           GET e5bj(b,j)    # kiter-0 amplitudes  
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#             b1x x=1,5 
#             --------- 
#
              etemp = e1bj(b,j)*e1bj(b,j) 
              etemp *= 4.0
              b11  += etemp            
#
              etemp = e1bj(b,j)*e2bj(b,j) 
              etemp *= 4.0
              b12  += etemp            
#
              etemp = e1bj(b,j)*e3bj(b,j) 
              etemp *= 4.0
              b13  += etemp            
#
              etemp = e1bj(b,j)*e4bj(b,j) 
              etemp *= 4.0
              b14  += etemp            
#
              etemp = e1bj(b,j)*e5bj(b,j) 
              etemp *= 4.0
              b15  += etemp            
#
#             b1x x=2,5 
#             --------- 
#
              etemp = e2bj(b,j)*e2bj(b,j) 
              etemp *= 4.0
              b22  += etemp            
#
              etemp = e2bj(b,j)*e3bj(b,j) 
              etemp *= 4.0
              b23  += etemp            
#
              etemp = e2bj(b,j)*e4bj(b,j) 
              etemp *= 4.0
              b24  += etemp            
#
              etemp = e2bj(b,j)*e5bj(b,j) 
              etemp *= 4.0
              b25  += etemp            
#
#             b1x x=3,5 
#             --------- 
#
              etemp = e3bj(b,j)*e3bj(b,j) 
              etemp *= 4.0
              b33  += etemp            
#
              etemp = e3bj(b,j)*e4bj(b,j) 
              etemp *= 4.0
              b34  += etemp            
#
              etemp = e3bj(b,j)*e5bj(b,j) 
              etemp *= 4.0
              b35  += etemp            
#
#             b1x x=4,5 
#             --------- 
#
              etemp = e4bj(b,j)*e4bj(b,j) 
              etemp *= 4.0
              b44  += etemp            
#
              etemp = e4bj(b,j)*e5bj(b,j) 
              etemp *= 4.0
              b45  += etemp            
#
#             b1x x=5,5 
#             --------- 
#
              etemp = e5bj(b,j)*e5bj(b,j) 
              etemp *= 4.0
              b55  += etemp            
#
     ENDPARDO b, j 
#
     execute sip_barrier
     execute server_barrier 
#
#    Collectively sum B-matrix elements. 
#    -----------------------------------
#
     collective Tb11 += b11 
     collective Tb12 += b12 
     collective Tb13 += b13 
     collective Tb14 += b14 
     collective Tb15 += b15 
     collective Tb22 += b22 
     collective Tb23 += b23 
     collective Tb24 += b24 
     collective Tb25 += b25 
     collective Tb33 += b33 
     collective Tb34 += b34 
     collective Tb35 += b35 
     collective Tb44 += b44 
     collective Tb45 += b45 
     collective Tb55 += b55 
#
#    Now the unique elements of the 'B-matrix' have been computed and the array filled out. 
#    --------------------------------------------------------------------------------------
#
#    Put the elements of the 'B-matrix', which have been computed as scalars into the  
#    R-matrix. 
#    -------------------------------------------------------------------------------- 
#
     CALL SETUP_DIIS 
#
     execute compute_diis # --> New instruction  
#
     c1 = Tb11 
     c2 = Tb22 
     c3 = Tb33 
     c4 = Tb44 
     c5 = Tb55 
     execute print_scalar c1 
     execute print_scalar c2 
     execute print_scalar c3 
     execute print_scalar c4 
     execute print_scalar c5 
     execute sip_barrier 
     execute server_barrier 
#
#    Done computing the c-vector. 
#    ---------------------------- 
#
#    Form the updated amplitudes using the c-vector. 
#    -----------------------------------------------  
#
#    Form T2old_aa. 
#    -------------- 
#
     PARDO a, i, a1, i1
#
#          REQUEST/GET amplitude data from all 5 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST d0aiai(a,i,a1,i1) a # kiter-5 amplitudes
           REQUEST d1aiai(a,i,a1,i1) a # kiter-4 amplitudes
           REQUEST d2aiai(a,i,a1,i1) a # kiter-3 amplitudes
           REQUEST d3aiai(a,i,a1,i1) a # kiter-2 amplitudes
           REQUEST d4aiai(a,i,a1,i1) a # kiter-1 amplitudes
#
           REQUEST e1aiai(a,i,a1,i1) a # kiter-4 amplitudes
           REQUEST e2aiai(a,i,a1,i1) a # kiter-3 amplitudes
           REQUEST e3aiai(a,i,a1,i1) a # kiter-2 amplitudes
           REQUEST e4aiai(a,i,a1,i1) a # kiter-1 amplitudes
           REQUEST e5aiai(a,i,a1,i1) a # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> T2old_aa.
#          ---------------------------------------------------------
#
           t2aiai(a,i,a1,i1)            = d0aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           += e1aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           *= c1
           taiai(a,i,a1,i1)             = t2aiai(a,i,a1,i1)
#
           t2aiai(a,i,a1,i1)            = d1aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           += e2aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           *= c2
           taiai(a,i,a1,i1)            += t2aiai(a,i,a1,i1)
#
           t2aiai(a,i,a1,i1)            = d2aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           += e3aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           *= c3
           taiai(a,i,a1,i1)            += t2aiai(a,i,a1,i1)
#
           t2aiai(a,i,a1,i1)            = d3aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           += e4aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           *= c4
           taiai(a,i,a1,i1)            += t2aiai(a,i,a1,i1)
#
           t2aiai(a,i,a1,i1)            = d4aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           += e5aiai(a,i,a1,i1)
           t2aiai(a,i,a1,i1)           *= c5
           taiai(a,i,a1,i1)            += t2aiai(a,i,a1,i1)
#
           PUT T2old_aa(a,i,a1,i1)      = taiai(a,i,a1,i1)
#
     ENDPARDO a, i, a1, i1
#
#    Form T2old_bb. 
#    -------------- 
#
     PARDO b, j, b1, j1
#
#          REQUEST/GET amplitude data from all 5 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST D0bjbj(b,j,b1,j1) b # kiter-5 amplitudes
           REQUEST D1bjbj(b,j,b1,j1) b # kiter-4 amplitudes
           REQUEST D2bjbj(b,j,b1,j1) b # kiter-3 amplitudes
           REQUEST D3bjbj(b,j,b1,j1) b # kiter-2 amplitudes
           REQUEST D4bjbj(b,j,b1,j1) b # kiter-1 amplitudes
#
           REQUEST e1bjbj(b,j,b1,j1) b # kiter-4 amplitudes
           REQUEST e2bjbj(b,j,b1,j1) b # kiter-3 amplitudes
           REQUEST e3bjbj(b,j,b1,j1) b # kiter-2 amplitudes
           REQUEST e4bjbj(b,j,b1,j1) b # kiter-1 amplitudes
           REQUEST e5bjbj(b,j,b1,j1) b # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> T2old_bb.
#          ---------------------------------------------------------
#
           t2bjbj(b,j,b1,j1)            = d0bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           += e1bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           *= c1
           tbjbj(b,j,b1,j1)             = t2bjbj(b,j,b1,j1)
#
           t2bjbj(b,j,b1,j1)            = d1bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           += e2bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           *= c2
           tbjbj(b,j,b1,j1)            += t2bjbj(b,j,b1,j1)
#
           t2bjbj(b,j,b1,j1)            = d2bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           += e3bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           *= c3
           tbjbj(b,j,b1,j1)            += t2bjbj(b,j,b1,j1)
#
           t2bjbj(b,j,b1,j1)            = d3bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           += e4bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           *= c4
           tbjbj(b,j,b1,j1)            += t2bjbj(b,j,b1,j1)
#
           t2bjbj(b,j,b1,j1)            = d4bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           += e5bjbj(b,j,b1,j1)
           t2bjbj(b,j,b1,j1)           *= c5
           tbjbj(b,j,b1,j1)            += t2bjbj(b,j,b1,j1)
#
           PUT T2old_bb(b,j,b1,j1)      = tbjbj(b,j,b1,j1)
#
     ENDPARDO b, j, b1, j1
#
#    Form T2old_ab. 
#    -------------- 
#
     PARDO a, i, b, j
#
#          REQUEST/GET amplitude data from all 5 previous iterations.
#          ----------------------------------------------------------
#
           REQUEST D0aibj(a,i,b,j) a # kiter-5 amplitudes
           REQUEST D1aibj(a,i,b,j) a # kiter-4 amplitudes
           REQUEST D2aibj(a,i,b,j) a # kiter-3 amplitudes
           REQUEST D3aibj(a,i,b,j) a # kiter-2 amplitudes
           REQUEST D4aibj(a,i,b,j) a # kiter-1 amplitudes
#
           REQUEST e1aibj(a,i,b,j) a # kiter-4 amplitudes
           REQUEST e2aibj(a,i,b,j) a # kiter-3 amplitudes
           REQUEST e3aibj(a,i,b,j) a # kiter-2 amplitudes
           REQUEST e4aibj(a,i,b,j) a # kiter-1 amplitudes
           REQUEST e5aibj(a,i,b,j) a # kiter-0 amplitudes
#
#          Compute contributions to updated amplitudes --> T2old_ab.
#          ---------------------------------------------------------
#
           t2aibj(a,i,b,j)            = d0aibj(a,i,b,j)
           t2aibj(a,i,b,j)           += e1aibj(a,i,b,j)
           t2aibj(a,i,b,j)           *= c1
           taibj(a,i,b,j)             = t2aibj(a,i,b,j)
#
           t2aibj(a,i,b,j)            = d1aibj(a,i,b,j)
           t2aibj(a,i,b,j)           += e2aibj(a,i,b,j)
           t2aibj(a,i,b,j)           *= c2
           taibj(a,i,b,j)            += t2aibj(a,i,b,j)
#
           t2aibj(a,i,b,j)            = d2aibj(a,i,b,j)
           t2aibj(a,i,b,j)           += e3aibj(a,i,b,j)
           t2aibj(a,i,b,j)           *= c3
           taibj(a,i,b,j)            += t2aibj(a,i,b,j)
#
           t2aibj(a,i,b,j)            = d3aibj(a,i,b,j)
           t2aibj(a,i,b,j)           += e4aibj(a,i,b,j)
           t2aibj(a,i,b,j)           *= c4
           taibj(a,i,b,j)            += t2aibj(a,i,b,j)
#
           t2aibj(a,i,b,j)            = d4aibj(a,i,b,j)
           t2aibj(a,i,b,j)           += e5aibj(a,i,b,j)
           t2aibj(a,i,b,j)           *= c5
           taibj(a,i,b,j)            += t2aibj(a,i,b,j)
#
           PUT T2old_ab(a,i,b,j)      = taibj(a,i,b,j)
#
     ENDPARDO a, i, b, j
#
#    Form tai_old. 
#    ------------- 
#
     PARDO a, i  
#
#          REQUEST/GET amplitude data from all 5 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET D0ai(a,i)     # kiter-5 amplitudes  
           GET D1ai(a,i)     # kiter-4 amplitudes  
           GET D2ai(a,i)     # kiter-3 amplitudes  
           GET D3ai(a,i)     # kiter-2 amplitudes  
           GET D4ai(a,i)     # kiter-1 amplitudes  
#
           GET e1ai(a,i)     # kiter-4 amplitudes  
           GET e2ai(a,i)     # kiter-3 amplitudes  
           GET e3ai(a,i)     # kiter-2 amplitudes  
           GET e4ai(a,i)     # kiter-1 amplitudes  
           GET e5ai(a,i)     # kiter-0 amplitudes  
#
#          Compute contributions to updated amplitudes --> tai_old. 
#          --------------------------------------------------------  
# 
           t1ai(a,i)     = d0ai(a,i) 
           t1ai(a,i)    += e1ai(a,i) 
           t1ai(a,i)    *= c1  
           tai(a,i)      = t1ai(a,i) 
#
           t1ai(a,i)     = d1ai(a,i) 
           t1ai(a,i)    += e2ai(a,i) 
           t1ai(a,i)    *= c2  
           tai(a,i)     += t1ai(a,i) 
#
           t1ai(a,i)     = d2ai(a,i) 
           t1ai(a,i)    += e3ai(a,i) 
           t1ai(a,i)    *= c3  
           tai(a,i)     += t1ai(a,i) 
#
           t1ai(a,i)     = d3ai(a,i) 
           t1ai(a,i)    += e4ai(a,i) 
           t1ai(a,i)    *= c4  
           tai(a,i)     += t1ai(a,i) 
#
           t1ai(a,i)     = d4ai(a,i) 
           t1ai(a,i)    += e5ai(a,i) 
           t1ai(a,i)    *= c5  
           tai(a,i)     += t1ai(a,i) 
# 
           PUT t1a_old(a,i) = tai(a,i) 
#
     ENDPARDO a, i  
#
#    Form tbj_old. 
#    ------------- 
#
     PARDO b, j  
#
#          REQUEST/GET amplitude data from all 5 previous iterations. 
#          ---------------------------------------------------------- 
#
           GET D0bj(b,j)     # kiter-5 amplitudes  
           GET D1bj(b,j)     # kiter-4 amplitudes  
           GET D2bj(b,j)     # kiter-3 amplitudes  
           GET D3bj(b,j)     # kiter-2 amplitudes  
           GET D4bj(b,j)     # kiter-1 amplitudes  
#
           GET e1bj(b,j)     # kiter-4 amplitudes  
           GET e2bj(b,j)     # kiter-3 amplitudes  
           GET e3bj(b,j)     # kiter-2 amplitudes  
           GET e4bj(b,j)     # kiter-1 amplitudes  
           GET e5bj(b,j)     # kiter-0 amplitudes  
#
#          Compute contributions to updated amplitudes --> tbj_old. 
#          --------------------------------------------------------  
# 
           t1bj(b,j)     = d0bj(b,j) 
           t1bj(b,j)    += e1bj(b,j) 
           t1bj(b,j)    *= c1  
           tbj(b,j)      = t1bj(b,j) 
# 
           t1bj(b,j)     = d1bj(b,j) 
           t1bj(b,j)    += e2bj(b,j) 
           t1bj(b,j)    *= c2  
           tbj(b,j)     += t1bj(b,j) 
# 
           t1bj(b,j)     = d2bj(b,j) 
           t1bj(b,j)    += e3bj(b,j) 
           t1bj(b,j)    *= c3  
           tbj(b,j)     += t1bj(b,j) 
# 
           t1bj(b,j)     = d3bj(b,j) 
           t1bj(b,j)    += e4bj(b,j) 
           t1bj(b,j)    *= c4  
           tbj(b,j)     += t1bj(b,j) 
# 
           t1bj(b,j)     = d4bj(b,j) 
           t1bj(b,j)    += e5bj(b,j) 
           t1bj(b,j)    *= c5  
           tbj(b,j)     += t1bj(b,j) 
# 
           PUT t1b_old(b,j) = tbj(b,j) 
# 
     ENDPARDO b, j 
#
     execute sip_barrier 
     execute server_barrier 
#
     ENDPROC DIIS4  
#    ------------- 
#
# ---------------------------------------------------------------------------------
#
     PROC MOVE4
#    ----------
#
#    0 --> 1  
#    ---------------------------------------------------
#
     PARDO a, i, a1, i1
           REQUEST                     d1aiai(a,i,a1,i1) a 
           PREPARE d0aiai(a,i,a1,i1) = d1aiai(a,i,a1,i1)
     ENDPARDO a, i, a1, i1
#
     PARDO b, j, b1, j1
           REQUEST                     d1bjbj(b,j,b1,j1) b 
           PREPARE d0bjbj(b,j,b1,j1) = d1bjbj(b,j,b1,j1)
     ENDPARDO b, j, b1, j1
#
     PARDO a, i, b, j
           REQUEST                   d1aibj(a,i,b,j) a 
           PREPARE d0aibj(a,i,b,j) = d1aibj(a,i,b,j)
     ENDPARDO a, i, b, j
#
     PARDO a, i 
           GET d1ai(a,i) 
           PUT d0ai(a,i) = d1ai(a,i) 
     ENDPARDO a, i 
#
     PARDO b, j 
           GET d1bj(b,j) 
           PUT d0bj(b,j) = d1bj(b,j) 
     ENDPARDO b, j 
#
     execute server_barrier
     execute sip_barrier
#
#    2 --> 1  
#    ---------------------------------------------------
#
     PARDO a, i, a1, i1
           REQUEST                     e2aiai(a,i,a1,i1) a 
           PREPARE e1aiai(a,i,a1,i1) = e2aiai(a,i,a1,i1)
     ENDPARDO a, i, a1, i1
#
     PARDO b, j, b1, j1
           REQUEST                     e2bjbj(b,j,b1,j1) b 
           PREPARE e1bjbj(b,j,b1,j1) = e2bjbj(b,j,b1,j1)
     ENDPARDO b, j, b1, j1
#
     PARDO a, i, b, j
           REQUEST                   e2aibj(a,i,b,j) a 
           PREPARE e1aibj(a,i,b,j) = e2aibj(a,i,b,j)
     ENDPARDO a, i, b, j
#
     PARDO a, i, a1, i1
           REQUEST                     d2aiai(a,i,a1,i1) a 
           PREPARE d1aiai(a,i,a1,i1) = d2aiai(a,i,a1,i1)
     ENDPARDO a, i, a1, i1
#
     PARDO b, j, b1, j1
           REQUEST                     d2bjbj(b,j,b1,j1) b 
           PREPARE d1bjbj(b,j,b1,j1) = d2bjbj(b,j,b1,j1)
     ENDPARDO b, j, b1, j1
#
     PARDO a, i, b, j
           REQUEST                   d2aibj(a,i,b,j) a 
           PREPARE d1aibj(a,i,b,j) = d2aibj(a,i,b,j)
     ENDPARDO a, i, b, j
#
     PARDO a, i 
           GET e2ai(a,i) 
           PUT e1ai(a,i) = e2ai(a,i) 
     ENDPARDO a, i 
#
     PARDO b, j 
           GET e2bj(b,j) 
           PUT e1bj(b,j) = e2bj(b,j) 
     ENDPARDO b, j 
#
     PARDO a, i 
           GET d2ai(a,i) 
           PUT d1ai(a,i) = d2ai(a,i) 
     ENDPARDO a, i 
#
     PARDO b, j 
           GET d2bj(b,j) 
           PUT d1bj(b,j) = d2bj(b,j) 
     ENDPARDO b, j 
#
     execute sip_barrier
     execute server_barrier
#
#    3 --> 2  
#    ---------------------------------------------------
#
     PARDO a, i, a1, i1
           REQUEST                     e3aiai(a,i,a1,i1) a 
           PREPARE e2aiai(a,i,a1,i1) = e3aiai(a,i,a1,i1)
     ENDPARDO a, i, a1, i1
#
     PARDO b, j, b1, j1
           REQUEST                     e3bjbj(b,j,b1,j1) b 
           PREPARE e2bjbj(b,j,b1,j1) = e3bjbj(b,j,b1,j1)
     ENDPARDO b, j, b1, j1
#
     PARDO a, i, b, j
           REQUEST                   e3aibj(a,i,b,j) a 
           PREPARE e2aibj(a,i,b,j) = e3aibj(a,i,b,j)
     ENDPARDO a, i, b, j
#
     PARDO a, i, a1, i1
           REQUEST                     d3aiai(a,i,a1,i1) a 
           PREPARE d2aiai(a,i,a1,i1) = d3aiai(a,i,a1,i1)
     ENDPARDO a, i, a1, i1
#
     PARDO b, j, b1, j1
           REQUEST                     d3bjbj(b,j,b1,j1) b 
           PREPARE d2bjbj(b,j,b1,j1) = d3bjbj(b,j,b1,j1)
     ENDPARDO b, j, b1, j1
#
     PARDO a, i, b, j
           REQUEST                   d3aibj(a,i,b,j) a 
           PREPARE d2aibj(a,i,b,j) = d3aibj(a,i,b,j)
     ENDPARDO a, i, b, j
#
     PARDO a, i 
           GET e3ai(a,i) 
           PUT e2ai(a,i) = e3ai(a,i) 
     ENDPARDO a, i 
#
     PARDO b, j 
           GET e3bj(b,j) 
           PUT e2bj(b,j) = e3bj(b,j) 
     ENDPARDO b, j 
#
     PARDO a, i 
           GET d3ai(a,i) 
           PUT d2ai(a,i) = d3ai(a,i) 
     ENDPARDO a, i 
#
     PARDO b, j 
           GET d3bj(b,j) 
           PUT d2bj(b,j) = d3bj(b,j) 
     ENDPARDO b, j 
#
     execute server_barrier
     execute sip_barrier
#
#    4 --> 3  
#    ---------------------------------------------------
#
     PARDO a, i, a1, i1
           REQUEST                     e4aiai(a,i,a1,i1) a 
           PREPARE e3aiai(a,i,a1,i1) = e4aiai(a,i,a1,i1)
     ENDPARDO a, i, a1, i1
#
     PARDO b, j, b1, j1
           REQUEST                     e4bjbj(b,j,b1,j1) b 
           PREPARE e3bjbj(b,j,b1,j1) = e4bjbj(b,j,b1,j1)
     ENDPARDO b, j, b1, j1
#
     PARDO a, i, b, j
           REQUEST                   e4aibj(a,i,b,j) a 
           PREPARE e3aibj(a,i,b,j) = e4aibj(a,i,b,j)
     ENDPARDO a, i, b, j
#
     PARDO a, i, a1, i1
           REQUEST                     d4aiai(a,i,a1,i1) a 
           PREPARE d3aiai(a,i,a1,i1) = d4aiai(a,i,a1,i1)
     ENDPARDO a, i, a1, i1
#
     PARDO b, j, b1, j1
           REQUEST                     d4bjbj(b,j,b1,j1) b 
           PREPARE d3bjbj(b,j,b1,j1) = d4bjbj(b,j,b1,j1)
     ENDPARDO b, j, b1, j1
#
     PARDO a, i, b, j
           REQUEST                   d4aibj(a,i,b,j) a 
           PREPARE d3aibj(a,i,b,j) = d4aibj(a,i,b,j)
     ENDPARDO a, i, b, j
#
     PARDO a, i 
           GET e4ai(a,i) 
           PUT e3ai(a,i) = e4ai(a,i) 
     ENDPARDO a, i 
#
     PARDO b, j 
           GET e4bj(b,j) 
           PUT e3bj(b,j) = e4bj(b,j) 
     ENDPARDO b, j 
#
     PARDO a, i 
           GET d4ai(a,i) 
           PUT d3ai(a,i) = d4ai(a,i) 
     ENDPARDO a, i 
#
     PARDO b, j 
           GET d4bj(b,j) 
           PUT d3bj(b,j) = d4bj(b,j) 
     ENDPARDO b, j 
#
     execute server_barrier
     execute sip_barrier
#
#    5 --> 4  
#    ---------------------------------------------------
#
     PARDO a, i, a1, i1
           REQUEST                     e5aiai(a,i,a1,i1) a 
           PREPARE e4aiai(a,i,a1,i1) = e5aiai(a,i,a1,i1)
     ENDPARDO a, i, a1, i1
#
     PARDO b, j, b1, j1
           REQUEST                     e5bjbj(b,j,b1,j1) b 
           PREPARE e4bjbj(b,j,b1,j1) = e5bjbj(b,j,b1,j1)
     ENDPARDO b, j, b1, j1
#
     PARDO a, i, b, j
           REQUEST                   e5aibj(a,i,b,j) a 
           PREPARE e4aibj(a,i,b,j) = e5aibj(a,i,b,j)
     ENDPARDO a, i, b, j
#
     PARDO a, i, a1, i1
           GET                        T2new_aa(a,i,a1,i1)
           Taiai(a,i,a1,i1)         = T2new_aa(a,i,a1,i1)
           execute energy_denominator Taiai
           PREPARE d4aiai(a,i,a1,i1) = Taiai(a,i,a1,i1)
     ENDPARDO a, i, a1, i1
#
     PARDO b, j, b1, j1
           GET                        T2new_bb(b,j,b1,j1)
           Tbjbj(b,j,b1,j1)         = T2new_bb(b,j,b1,j1)
           execute energy_denominator Tbjbj
           PREPARE d4bjbj(b,j,b1,j1) = Tbjbj(b,j,b1,j1)
     ENDPARDO b, j, b1, j1
#
     PARDO a, i, b, j
           GET                      T2new_ab(a,i,b,j)
           Taibj(a,i,b,j)         = T2new_ab(a,i,b,j)
           execute energy_denominator Taibj
           PREPARE d4aibj(a,i,b,j) = Taibj(a,i,b,j)
     ENDPARDO a, i, b, j
#
     PARDO a, i 
           GET e5ai(a,i) 
           PUT e4ai(a,i) = e5ai(a,i) 
     ENDPARDO a, i 
#
     PARDO b, j 
           GET e5bj(b,j) 
           PUT e4bj(b,j) = e5bj(b,j) 
     ENDPARDO b, j 
#
     PARDO a, i 
           GET t1a_old(a,i) 
           PUT d4ai(a,i) = t1a_old(a,i) 
     ENDPARDO a, i 
#
     PARDO b, j 
           GET t1b_old(b,j) 
           PUT d4bj(b,j) = t1b_old(b,j) 
     ENDPARDO b, j 
#
     execute server_barrier
     execute sip_barrier
#
     ENDPROC MOVE4
#    -------------
#
# ---------------------------------------------------------------------------------
#
#
# SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS 
#
# MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM 
#
# BEGIN MAIN PROGRAM 
# ------------------ 
#
      ecrit = cc_conv  
#     CALL TRAN_UHF_P1 # perform partial transformation
#
# Read transformed integrals from lists
# -------------------------------------
#
      CALL READ_2EL
#
      CREATE T2old_aa 
      CREATE T2old_ab 
      CREATE T2old_bb 
#
      CREATE t1a_old 
      CREATE t1a_new 
      CREATE t1b_old 
      CREATE t1b_new 
#
      CREATE D0ai
      CREATE D1ai
      CREATE D2ai
      CREATE D3ai
      CREATE D4ai
      CREATE D5ai
#
      CREATE D0bj
      CREATE D1bj
      CREATE D2bj
      CREATE D3bj
      CREATE D4bj
      CREATE D5bj
#
      CREATE e1ai
      CREATE e2ai
      CREATE e3ai
      CREATE e4ai
      CREATE e5ai
#
      CREATE e1bj
      CREATE e2bj
      CREATE e3bj
      CREATE e4bj
      CREATE e5bj
#
      EXECUTE SIP_BARRIER 
#
      CALL IGUESS_UHF  # get initial second-order guess 
      EXECUTE SIP_BARRIER T2old_aa 
#
      DO KITER 
#
#        Form Tau and Taup 
#        ----------------- 
#
         EXECUTE SIP_BARRIER T2old_aa 
#
#        Form one-particle intermediates 
#        ------------------------------- 
         CREATE TAUP_aa 
         CREATE TAUP_ab 
         CREATE TAUP_bb 
         EXECUTE SIP_BARRIER ca 
         CALL TAUP  
         EXECUTE SIP_BARRIER ca 
         CREATE Fae_a 
         CREATE Fae_b 
         CREATE Fme_a
         CREATE Fme_b
         CREATE Fmi_a 
         CREATE Fmi_b 
         EXECUTE SIP_BARRIER ca 
# 
         CALL FAE  
         CALL FMI 
         CALL FME 
         EXECUTE SIP_BARRIER fae_a   
         DELETE TAUP_aa 
         DELETE TAUP_ab 
         DELETE TAUP_bb 
#
#        Calculate new one-particle amplitudes 
#        ------------------------------------- 
#
         CREATE TAU_aa 
         CREATE TAU_ab 
         CREATE TAU_bb 
#        ZERO T1new here VFL 
         EXECUTE SIP_BARRIER TAU_aa 
         CALL TAU  
#
         CALL T1ANEW 
         CALL T1BNEW 
#
         CALL T2NEWAA  
         CALL T2NEWBB  
         CALL T2NEWAB  
         EXECUTE SIP_BARRIER TAU_aa 
#
         DELETE Fae_a 
         DELETE Fae_b 
         DELETE Fme_a
         DELETE Fme_b
         DELETE Fmi_a 
         DELETE Fmi_b 
#
#        Calculate new two-particle amplitudes 
#        ------------------------------------- 
#
         CALL WMINJ # Small distributed two-particle array  
         CALL WAEBF  
         CALL WMEBJ 
         EXECUTE SIP_BARRIER ca  
         CALL UPDATET1 
         CALL UPDATET2 
#
         EXECUTE SIP_BARRIER ca  
         CALL ENERGY_NEW 
         EXECUTE SIP_BARRIER ca 
#
         if kiter == 2
#
#           Get uptated amplitudes based on DIIS procedure.
#           -----------------------------------------------
#
            CALL DIIS1
#
         endif # kiter == 2
#
         if kiter == 3
#
#           Get uptated amplitudes based on DIIS procedure.
#           -----------------------------------------------
#
            CALL DIIS2
#
         endif # kiter == 3
#
         if kiter == 4
#
#           Get uptated amplitudes based on DIIS procedure.
#           -----------------------------------------------
#
            CALL DIIS3
#
         endif # kiter == 4
#
         if kiter >= 5
#
#           Get uptated amplitudes based on DIIS procedure.
#           -----------------------------------------------
#
            CALL DIIS4
            CALL MOVE4
#
         endif # kiter == 5
#
         DELETE TAU_aa 
         DELETE TAU_ab 
         DELETE TAU_bb 
#
         DELETE T2new_aa 
         DELETE T2new_bb 
         DELETE T2new_ab 
#
         CALL MOVET1
         CALL MOVET2
#
#        Check on convergence 
#        -------------------- 
#
         IF ecorrT < eold 
            ediff = eold - ecorrT 
            IF ediff < ecrit 
               exit # kiter 
            ENDIF
         ENDIF   
#
         IF ecorrT > eold 
            ediff = ecorrT - eold  
            IF ediff < ecrit 
               exit # kiter 
            ENDIF
         ENDIF   
#
#        Reset eold --> enew 
#        ------------------- 
#
         eold = ecorrT 
#
      ENDDO KITER 
#
      totenerg  = ecorrT  
      totenerg += scfeneg  
      execute print_scalar totenerg  
#
# Write amplitudes to file
# ------------------------
#
      CALL WRITE_2EL 
#
      execute sip_barrier
      execute blocks_to_list t1a_old
      execute blocks_to_list t1b_old
      execute blocks_to_list T2old_aa
      execute blocks_to_list T2old_ab
      execute blocks_to_list T2old_bb
      execute write_blocks_to_list
      execute sip_barrier
#
                           ENDSIAL CCSD_UHF_MO_DIST1    
#
# ---------------------------------------------------------------------------------
#
