#  Copyright (c) 2003-2010 University of Florida
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  The GNU General Public License is included in this distribution
#  in the file COPYRIGHT.
      SIAL CCSDPT_RHF_AAB    

# Make index definitions 
#
      Index   i      = 1, naocc   
      Index   j      = 1, naocc   
      Index   k      = 1, naocc   
      Index   ib     = 1, naocc 
      Index   jb     = 1, naocc 
      Index   kb     = 1, naocc 
      index pp   = subb, sube   
#
      aoindex mu     = 1, norb 
      aoindex nu     = 1, norb 
      aoindex lambda = 1, norb 
      aoindex sigma  = 1, norb 
#
      moaindex i1= baocc, eaocc
      moaindex i2= baocc, eaocc
      moaindex i3= baocc, eaocc
      moaindex k1= baocc, eaocc
#
      moaindex a = bavirt, eavirt
      moaindex a1= bavirt, eavirt
      moaindex a2= bavirt, eavirt
      moaindex a3= bavirt, eavirt 
#
      moaindex j1= baocc, eaocc
      moaindex j2= baocc, eaocc
      moaindex j3= baocc, eaocc
#
      moaindex b = bavirt, eavirt
      moaindex b1= bavirt, eavirt
      moaindex b2= bavirt, eavirt
      moaindex b3= bavirt, eavirt 
#
      moaindex p = baocc, eavirt  
      moaindex p1= baocc, eavirt  
      moaindex p2= baocc, eavirt  
      moaindex p3= baocc, eavirt  
#
      moaindex q = baocc, eavirt  
      moaindex q1= baocc, eavirt  
      moaindex q2= baocc, eavirt  
      moaindex q3= baocc, eavirt  
#
# VFL TESTS 
      temp  tpps(p,p1,k) 
      temp t1pps(p,p1,k) 
      temp t2pps(p,p1,k) 
      temp t3ppqs(a,a1,b,k)  
      temp  tpqs(p,q,kb) 
      temp t1pqs(p,q,kb) 
      temp t2pqs(p,q,kb) 
      temp t3pqs(p,q,kb) 
#
# Declare served arrays which are read from disk  
# 
      served Vaaai(a1,a2,a3,i1)
      served VSaaai(a1,a2,a3,i1)
      distributed Xaaai(a1,a2,a3,pp)
      distributed XSaaai(a1,a2,a3,pp)
      served YSaaai(a1,a2,a3,i)
      served Yaaai(a1,a2,a3,i)
      served VSpipi(p,i1,p1,i2)
      served Vaaii(a,a1,i1,i2)
      served Viaai(i1,a,a1,i2)
      served Vpiqj(p,i1,q,j2)
      served Vaiai(a,i1,a1,i2) 
#
      served T2aiai(a,i1,a1,i2)
      served T2aibj(a,i1,b,j1) 
#
      distributed XSaiii(a,i,i1,j)  
      distributed XSbjjj(b,ib,j1,jb)  
      distributed XaIjJ(a,i,j1,jb)  
      distributed XiIbJ(i1,i,b,jb)  
#
# Declare distributed arrays 
# 
      distributed Paaai(a,a1,a2) 
      distributed Paaaj(a,a1,a2) 
      distributed Paaak(a,a1,a2,k) 
      distributed Pbbbi(b,b1,b2)  
      distributed Pbbbj(b,b1,b2)  
      distributed Pbbbk(b,b1,b2)  
      distributed Pbbai(b,b1,a) 
      distributed Pbbaj(b,b1,a) 
      distributed Paabk(a,a1,b) 
      distributed Paabi(a,a1,b) 
      distributed Paabj(a,a1,b) 
      distributed Pbbak(b,b1,a) 
#
      temp Paiii(a,i,i1,j)   
      temp P1aiii(a,i,i1,j)   
      temp P2aiii(a,i,i1,j)   
      temp P3aiii(a,i,i1,j)   
      temp P4aiii(a,i,i1,j)   
      temp Pbjjj(b,ib,j1,jb)   
      temp PaIjJ(a,i,j1,jb) 
      temp P1aIjJ(a,i,j1,jb) 
      temp PiIbJ(i1,i,b,jb) 
      temp P1iIbJ(i1,i,b,jb) 
#
      distributed XSaI_ij(i1,a) 
      distributed XSaI_ji(i1,a) 
      distributed XSaI_ik(i1,a,k1) 
      distributed XSaI_ki(i1,a,k1) 
      distributed XSaI_kj(i1,a,k1) 
      distributed XaI_ik(j1,a,k1)  
      distributed XaI_jk(j1,a,k1)  
      distributed XiI_ik(i1,b,k1)   
      distributed XiI_jk(i1,b,k1)   
     #static SaI_ik(j1,a)  
     #static SaI_jk(j1,a)  
     #static SiI_ik(i1,b)   
     #static SiI_jk(i1,b)   
      static SSaI_ji(i1,a) 
      distributed S3(a,a1) 
#
      temp taaai(a,a1,a2,i1) 
#
      temp XaJbK(a,j,b,kb) 
      temp X1aJbK(a,j,b,kb) 
      temp X2aJbK(a,j,b,kb) 
      temp XaIbK(a,i,b,kb) 
      temp X1aIbK(a,i,b,kb) 
      temp X2aIbK(a,i,b,kb) 
      temp XaJaI(a,j,a1,i) 
      temp X1aJaI(a,j,a1,i) 
      temp YaibK(a,i1,b,kb) 
      temp Y1aibK(a,i1,b,kb) 
      temp XaIbj(a,i,b,j1) 
      temp X1aIbj(a,i,b,j1) 
      temp XaJbj(a,j,b,j1) 
      temp X1aJbj(a,j,b,j1) 
      temp XaiaI(a,i1,a1,i) 
      temp XaiaJ(a,i1,a1,j) 
#
      distributed DbjbS(b,j1,b1) 
      distributed D1bjbS(b,j1,b1) 
      distributed D2bjbS(b,j1,b1) 
      distributed EaibS(a,i1,b) 
      distributed E1aibS(a,i1,b) 
      distributed EabjS(a,b,j1) 
#
      distributed Y3ijk(a,a1,a2) 
      distributed D3aab(a,a1,b2,k1) 
      temp DSaab(a,a1,b2) 
      served S3aab(a,a1,b,k1) 
      served SS3aab(a,a1,b,k1) 
      local L3aab(a,a1,b,k1)  
      local LL3aab(a,a1,b,k1)  
      distributed D3ijk(a,a1,a2,k1) 
      distributed DD3ijk(a,a1,a2,k1) 
      local L3aaa(a,a1,a2,k1)  
#
      distributed sai(a,i) 
      distributed Dai(a,i1) 
      distributed sbj(b,kb) 
      temp txai(a,i) 
      distributed txbj(b,kb) 
      served t1a_old(a,i1) 
      served t1b_old(b,j1) 
      distributed t1ai(a,i) 
      distributed t1bj(b,jb) 
#
      distributed l1a_old(i1,a)
      served L2iaia(i1,a,i2,a1)
      served L2iajb(i1,a,j1,b)
      served L2aiai(a,i1,a1,i2)
      served L2aibj(a,i1,a1,i2)
      served Sl1a(a,i1) 
#
# Declare temporary arrays 
#
      temp taiai(a,i1,a1,i2) 
#
      temp xa(a) 
      temp xb(b) 
      temp xai(a,i) 
      temp xbj(b,kb) 
      temp Pai(a,i) 
      temp Pbj(b,kb) 
      temp tpp(p,p1) 
      temp t1pp(p,p1) 
      temp tqp(q,p) 
      temp tqq(q,q1) 
#
      temp tppp(p,p1,p2) 
      temp t1ppp(p,p1,p2) 
      temp t2ppp(p,p1,p2) 
      temp t4ppp(p,p1,p2) 
      temp t3ppp(p,p1,p2) 
      temp s3ppp(p,p1,p2) 
      temp t5ppp(p,p1,p2) 
      temp taaaiii(a,a1,a2,i,j,k) 
      temp t1aaaiii(a,a1,a2,i,j,k) 
#
      temp tpppp(p,p1,p2,p3) 
      temp t1pppp(p,p1,p2,p3) 
      temp t2pppp(p,p1,p2,p3) 
      temp t3pppp(p,p1,p2,p3) 
      temp t4pppp(p,p1,p2,p3) 
      temp t5pppp(p,p1,p2,p3) 
      temp s3pppp(a,a1,a2,k1)  

      temp tppps(p,p1,p2,i) 
      temp t1ppps(p,p1,p2,i) 
      temp t2ppps(p,p1,p2,j) 
      temp t3ppps(p,p1,p2,j) 
      temp t4ppps(p,p1,p2,i) 
      temp tpsps(p,j,p2,i) 
      temp t1psps(p,j,p2,i) 
      temp t2psps(p,j,p2,i) 
      temp t3psbj(a,j,b,j1) 
#
      temp tppqq(p,p1,p2,p3) 
      temp t1ppqq(p,p1,p2,p3) 
      temp t2ppqq(p,p1,p2,p3) 
      temp t3ppqq(p,p1,p2,p3) 
#
      temp tpsqq(a,i,b,j1) 
      temp t1psqq(a,j,b,j1) 
      temp t2psqq(a,i,j1,k1) 
      temp t4psqq(a,j,b,k1)
      temp t5psqq(a,j,j1,k1) 
      temp t6psqq(i1,j,b,k1) 
      temp t7psqq(a1,j,b,k1)
      temp t8psqq(a,i,b,k1) 
############################## 
      temp t2psbj(a,j,b,j1) 
      temp t3psqq(a,i,b,k1) 
      temp t4psjk(a,i,j1,k1) 
      temp t5psbk(i1,i,b,k1) 
      temp t5asbk(a,j,b,k1) 
#
      temp xpspp(a1,j,a2,k1)
      temp x2pspp(a,i,a2,k1)
      temp zpspp(a,i,a1,k1)
      temp z1pspp(a,i,i1,k1)
      temp zppps(a,k1,i1,i)
      temp z2ppps(a,k1,i1,j) 
      temp x3pspp(a,j,a1,k1) 
#
      temp tpsqs(a,i,b,kb) 
      temp t1psqs(a,j,b,kb) 
#
      temp tqSqS(b,jb,b1,ib) 
      temp t1qSqS(b,jb,b1,ib) 
#
      temp tqqps(b,b1,a,i) 
      temp t1qqpi(b,b1,a,i) 
      temp tppqs(p,p1,q,kb) 
      temp t1ppqs(p,p1,q,kb) 
      temp t2ppqs(p,p1,q,kb) 
      temp tpqqs(a,b,j1,k)    
#
      temp tpqqj(a,b,b1,ib)
#
      temp tppq(p,p1,q) 
      temp t1ppq(p,p1,q) 
      temp t2ppq(p,p1,q) 
      temp t3ppq(p,p1,q) 
      temp t4ppq(p,p1,q) 
      temp t4qqp(q,q1,p,ib,jb,k) 

      temp tqqp(q,q1,p) 
      temp sqqp(q,q1,p) 
      temp t1qqp(q,q1,p) 
      temp t2qqp(q,q1,p) 
      temp t3qqp(q,q1,p) 
      temp tqpp(q,p,p1) 
      temp t1qpp(q,p,p1) 
      temp t2qpp(q,p,p1) 
      temp tqpq(q,p,q1)      
      temp t1qpq(q,p,q1)      
      temp tpqp(p,q,p1)  
      temp t1pqp(p,q,p1)  
      temp tpqq(p,q,q1)  
      temp t1pqq(p,q,q1)  
      temp t2pqq(p,q,q1)  
#
      temp tpppi(p,p1,p2,i) 
      temp tppii(p,p1,i,j) 
      temp tpipi(p,i,p1,j) 
      temp Y1pipi(p,i,p1,j) 
      temp Y2pipi(p,i,p1,j) 
      temp Y3pipi(p,i,p1,j) 
      temp Y4pipi(p,i,p1,j) 
      temp Y5pipi(p,i,p1,j) 
      temp Y6pipi(p,i,p1,j) 
      temp Y7pipi(p,i,p1,j) 
      temp Y8pipi(p,i,p1,j) 
      temp Y9pipi(p,i,p1,j) 
      temp t2pipi(p,i,p1,j) 
#
      temp t1pipi(p,i1,p1,i) 
      temp X1pipi(p,i1,p1,i) 
      temp X2pipi(p,i1,p1,i) 
      temp X3pipi(p,i1,p1,i) 
      temp X4pipi(p,i1,p1,i) 
      temp X5pipi(p,i1,p1,i) 
      temp X6pipi(p,i1,p1,i) 
      temp X7pipi(p,i1,p1,i) 
      temp X8pipi(p,i1,p1,i) 
      temp X9pipi(p,i1,p1,i) 
      temp t1ppii(p,p1,i1,i) 
      temp t2aiii(a,i1,j,i)   
#
      temp tppqj(p,p1,q,ib) 
      temp tqqpi(q,q1,p,i) 
      temp tqppj(b,a,a1,kb) 
#
      temp tqqjj(q,q1,ib,jb) 
      temp tqjqj(q,ib,q1,jb) 

      temp taab(a,a1,b1)
      temp t1aab(a,a1,b1)
      temp tbba(b,b1,a2)
      temp t1bba(b,b1,a2)
      temp tpi(p,i) 
      temp tpj(p,j) 
      temp tpk(p,k) 
      temp tqi(q,ib) 
      temp tqj(q,jb) 
      temp tqk(q,kb) 
      temp tpqpi(a,b,a1,i)
      temp tqpqj(b,a,b1,ib) 
      temp t1jaij(j1,a,j,kb) 
      
      temp taiaiai(a,i,a1,j,a2,k) 
#
# Arrays used in Tbbbjjj computation
#
      temp Tbbbjjj(b,b1,b2,ib,jb,kb) 
      temp tbjbjbj(b,ib,b1,jb,b2,kb)   
      temp t1bbbjjj(b,b1,b2,ib,jb,kb) 
      temp t2bbbjjj(b,b1,b2,jb,ib,kb) 
      temp t3bbbjjj(b,b1,b2,kb,jb,ib) 
      temp t4bbbjjj(b1,b,b2,ib,jb,kb) 
      temp t5bbbjjj(b2,b1,b,ib,jb,kb) 
      temp t6bbbjjj(b1,b,b2,jb,ib,kb) 
      temp t7bbbjjj(b1,b,b2,kb,jb,ib) 
      temp t8bbbjjj(b2,b1,b,jb,ib,kb) 
      temp t9bbbjjj(b2,b1,b,kb,jb,ib) 
      temp t2bjjj(b,j1,kb,jb)  
      temp t1qjqj(b1,j1,b2,ib) 
      temp X1qjqj(b1,j1,b2,ib) 
      temp X2qjqj(b1,j1,b2,ib) 
      temp X3qjqj(b1,j1,b2,ib) 
      temp X4qjqj(b1,j1,b2,ib) 
      temp X5qjqj(b1,j1,b2,ib) 
      temp X6qjqj(b1,j1,b2,ib) 
      temp X7qjqj(b1,j1,b2,ib) 
      temp X8qjqj(b1,j1,b2,ib) 
      temp X9qjqj(b1,j1,b2,ib) 
      temp t1qqjj(b1,b2,j1,ib)
#
# Arrays used in Taabiij computation
#
      temp Dabij(a,b1,j,kb)  
      temp P2aibj(a,j,b,kb) 
      temp P4aibj(a,j,b,kb) 
      temp P5aibj(a,j,b,kb) 
      temp P6aibj(a,j,b,kb) 
      temp P3aibj(a,i,b,jb) 
      temp Tpq(p,q) 
      temp T1pq(p,q) 
      temp tppqi(a,a1,b,i)
      temp tqppi(b,a,a1,i)   
      temp tpqqi(a,b1,b,k)   
      temp P1bbai(b,b1,a1,i) 
      temp t1aibj(a1,i,b,j1) 
      temp taijj(a,j,j1,kb) 
      temp t1ajij(a,j1,j,kb) 
      temp tabji(a1,b,j1,i) 
      temp t1ppqj(a1,a2,b,kb) 
      temp t2ppqj(a1,a2,b,kb) 
      temp taibj(a1,i,b,kb) 
      temp t4aibj(a1,i,b,kb) 
      temp t3aibj(a1,i1,b,kb) 
      temp tpiqj(i1,j,b,kb) 
      temp tbijj(b,i1,j,kb) 
#
      temp t1aabiij(a,a1,b,i,j,kb) 
      temp t2aabiij(a,a1,b,j,i,kb) 
      temp t3aabiij(a1,a,b,i,j,kb) 
      temp t4aabiij(a1,a,b,j,i,kb) 
      temp taiaibj(a,i,a1,j,b,kb) 
      temp taabjii(a,a1,b,kb,i,j) 
      temp t1aabjii(a,a1,b,kb,i,j) 
#
      temp Taabiij(a,a1,b,i,j,kb) 
      temp Taaboij(a,a1,b,k1,i,j) 
      temp taaaoii(a,a1,a2,k1,i,j) 
      temp Tbaajii(b,a,a1,kb,i,j) 
#
# Arrays used in the Tbbajji computation. 
# --------------------------------------- 
#
      temp P1aibj(a,i,b1,ib) 
      temp P2iibj(i1,k,b,jb) 
      temp P1aabj(a,a2,b1,ib)
      temp P1bjbj(b,jb,b2,ib)
      temp P2bjbj(b,jb,b2,ib)
      temp P3bjbj(b,jb,b2,ib)
      temp P4bjbj(b,jb,b2,ib)
      temp P5bjbj(b,jb,b2,ib)
      temp P6bjbj(b,jb,b2,ib)
      temp P7bjbj(b,jb,b2,ib)
      temp P8bjbj(b,jb,b2,ib)
      temp P9bjbj(b,jb,b2,ib)
      temp P1bbbj(b,b2,b1,ib) 
      temp P2bjjj(b,jb,j1,ib) 
      temp P2aijj(a,k,j1,jb) 
#
      temp t2pqij(a2,b,k,jb) 
      temp tqqaj(b,b1,a,ib)  
      temp t2bbji(b,b2,jb,ib)
      temp tqqai(b,b1,a,k) 
      temp t2abij(a,b2,k,jb) 
      temp t2ajij(a,j1,k,jb) 
#
      temp t1bbajji(b,b1,a,ib,jb,k) 
      temp t2bbajji(b,b1,a,jb,ib,k) 
      temp t3bbajji(b1,b,a,ib,jb,k) 
      temp t4bbajji(b1,b,a,jb,ib,k) 
      temp tbjbjai(b,ib,b1,jb,a,k)
      temp tbbaijj(b,b1,a,k,ib,jb) 
      temp tbiji(b,i1,jb,k) 
      temp tbjjj(b,j1,jb,ib) 
#
      temp Tbbajji(b,b1,a,ib,jb,k) 
      temp tqqa(b,b1,a) 
#
# Arrays used in the sai computation 
# ----------------------------------- 
#
      temp P1aiai(a1,j,a2,k) 
      temp P2aiai(a1,j,a2,k) 
      temp P3aiai(a1,j,a2,k) 
      temp P4aiai(a1,j,a2,k) 
      temp P5aiai(a1,j,a2,k) 
      temp P6aiai(a1,j,a2,k) 
      temp P7aiai(a1,j,a2,k) 
      temp P8aiai(a1,j,a2,k) 
      temp P9aiai(a1,j,a2,k) 
      temp t1pppi(a,a1,a2,i) 
      temp t2ppii(a1,a2,j,k) 
#
      temp Tabbijj(a,b1,b2,i,jb,kb) 
      temp taibjbj(a,i,b1,jb,b2,kb) 
      temp t1abbijj(a,b1,b2,i,jb,kb) 
      temp t1pqqi(a,b1,b2,i) 
      temp t2qqjj(b1,b2,jb,kb) 
      temp t1ppqi(a,a1,b2,i) 
#
# Arrays used in the sbj computation 
# ----------------------------------- 
#
      temp t1qppj(b,a1,a,ib) 
      temp tqqpj(b,b1,a,ib) 
      temp tpqij(p,q,i,jb) 
      temp tqpij(q,p,k,jb) 
      temp tpqji(i1,b,jb,k) 
#
      temp t1baajii(b,a1,a,ib,j,k) 
#
# Distributed arrays to partially hold amplitudes 
# ------------------------------------------------ 
#
      distributed DaiaS(a,i1,a1) 
      distributed D1aiaS(a,i1,a1) 
      distributed D2aiaS(a,i1,a1,k1) 
#
      distributed DaSbj(a,b,j1) 
      distributed D1aSbj(a,b,j1) 
      distributed DaibS(a,i1,b,k1) 
#
      distributed LDaiaS(a,i1,a1) 
      distributed LD1aiaS(a,i1,a1) 
      distributed LD2aiaS(a,i1,a1,k1) 
#
      distributed LDaSbj(a,b,j1) 
      distributed LD1aSbj(a,b,j1) 
      distributed LDaibS(a,i1,b,k1) 
#
      distributed Dab(a,b,k1) 
      distributed LDab(a,b,k1) 
      static Sab(a,b) 
      distributed D1ab(a,b,k1) 
      distributed LD1ab(a,b,k1) 
      static S1ab(a,b) 
      distributed D2ab(b,a,k1) 
      distributed LD2ab(b,a,k1) 
      static S2ab(a,b) 
      distributed Daa(a,a1) 
      distributed LDaa(a,a1) 
      static Saa(a,a1) 
      static LSaa(a,a1) 
      distributed D1aa(a,a1,k1) 
      distributed D2aa(a,a1,k1) 
      distributed D2bb(b,b1) 
#
# Arrays used to form identity
# ----------------------------
#
      temp PIi(i,i1)
      served Sii(i2,i1)
      distributed IIi(i,i1)
      static tii(i1,i2)
      static t1ii(i1,i2)
#
      temp PJj(ib,j1)
      served Sjj(j2,j1)
      distributed IJj(ib,j1)
      static tjj(j1,j2)
      static t1jj(j1,j2)
#
# Declare scalars 
#
      scalar fact 
      scalar etemp 
      scalar etemp1
      scalar etemp2
      scalar etemp3
      scalar etemp4
      scalar etemp5
      scalar etempa
      scalar esum 
      scalar esum1
      scalar esum2
      scalar esum3
      scalar esum4
      scalar esum5
      scalar esum6
      scalar esuma  
      scalar ecorrT 
      scalar ecorraaa 
      scalar ecorraab 
      scalar ecorrbba 
      scalar ecorrbbb 
      scalar ecorrsa 
      scalar ecorrsb 
      scalar icount 
#
# --------------------------------------------------------------------------
#
     PROC READ_BLOCKDATA  
#    -------------------  
#
#   Read BLOCKDATA file.
#
      CREATE l1a_old
      execute sip_barrier
      execute server_barrier
      execute list_to_blocks                VSpipi(p,i1,p1,i2)
      execute list_to_blocks                Vaaii
      execute list_to_blocks                Viaai
      execute list_to_blocks                Vaaai
      execute list_to_blocks                Vpiqj(p,i1,q,j2)

      execute list_to_blocks                t1a_old
      execute list_to_blocks                T2aiai
      execute list_to_blocks                T2aibj

      execute list_to_blocks                l1a_old
      execute list_to_blocks                L2iaia
      execute list_to_blocks                L2iajb

      execute server_barrier
      execute read_list_to_blocks
      execute server_barrier
      execute sip_barrier
#
#   Antisymmetrize Vaaai
#
      PARDO a, a1, a2, i1
            REQUEST                      Vaaai(a,a1,a2,i1) a
            REQUEST                      Vaaai(a2,a1,a,i1) a
            taaai(a,a1,a2,i1)          = Vaaai(a2,a1,a,i1)
            taaai(a,a1,a2,i1)         -= Vaaai(a,a1,a2,i1)
            taaai(a,a1,a2,i1)         *= -1.0
            PREPARE VSaaai(a,a1,a2,i1) = taaai(a,a1,a2,i1)
      ENDPARDO a, a1, a2, i1
#
      PARDO a, i1, a1, i2
            REQUEST                      L2iaia(i1,a,i2,a1) a
            taiai(a,i1,a1,i2)          = L2iaia(i1,a,i2,a1)
            PREPARE L2aiai(a,i1,a1,i2) = taiai(a,i1,a1,i2)
      ENDPARDO a, i1, a1, i2
#
      PARDO a, i1, a1, i2
            REQUEST                      L2iajb(i1,a,i2,a1) a
            taiai(a,i1,a1,i2)          = L2iajb(i1,a,i2,a1)
            PREPARE L2aibj(a,i1,a1,i2) = taiai(a,i1,a1,i2)
      ENDPARDO a, i1, a1, i2
#
      PARDO a, i1
            GET                  l1a_old(i1,a)
            tpp(a,i1)          = l1a_old(i1,a)
            PREPARE Sl1a(a,i1) = tpp(a,i1)
      ENDPARDO a, i1
#
     #PARDO a, i1, a1, i2
     #      REQUEST                   T2aiai(a,i1,a1,i2) a
     #      REQUEST                   T2aibj(a,i1,a1,i2) a
     #      taiai(a,i1,a1,i2)          = T2aiai(a,i1,a1,i2)
     #      PREPARE L2aiai(a,i1,a1,i2) = taiai(a,i1,a1,i2)
     #      taiai(a,i1,a1,i2)          = T2aibj(a,i1,a1,i2)
     #      PREPARE L2aibj(a,i1,a1,i2) = taiai(a,i1,a1,i2)
     #ENDPARDO a, i1, a1, i2
#
     #PARDO a, i1
     #      REQUEST t1a_old(a,i1) a
     #      tpp(a,i1) = t1a_old(a,i1)
     #      PREPARE Sl1a(a,i1) = tpp(a,i1)
     #ENDPARDO a, i1
#
      etemp = 0.0 
      etemp1= 0.0 
      etemp2= 0.0 
      etemp3= 0.0 
      etemp4= 0.0 
      etemp5= 0.0 
      esuma = 0.0
      esum  = 0.0 
      esum1 = 0.0 
      esum2 = 0.0 
      esum3 = 0.0 
      esum4 = 0.0 
      esum5 = 0.0 
      esum6 = 0.0 
#
      execute server_barrier 
#
     ENDPROC READ_BLOCKDATA  
#    ----------------------  
#
# --------------------------------------------------------------------------
#
     PROC PDATA  
#    ---------- 
#
#    Put the vOoO integrals into a distributed array 
#    ----------------------------------------------- 
#
     create t1ai 
     create t1bj 
     execute sip_barrier 
#
#    PREPARE Vaaai type arrays into XaaaI ones 
#    ----------------------------------------- 
#
     PARDO k, a, a1, a2 
           tppps(a,a1,a2,k) = 0.0
           DO i1
              REQUEST             VSaaai(a,a1,a2,i1) a
              GET                 IIi(k,i1)
              t1pppi(a,a1,a2,k) = VSaaai(a,a1,a2,i1)*IIi(k,i1)
              tppps(a,a1,a2,k) += t1pppi(a,a1,a2,k)
           ENDDO i1
           PREPARE YSaaaI(a,a1,a2,k) = tppps(a,a1,a2,k) 
#
     ENDPARDO k, a, a1, a2 
#
     PARDO kb, a, a1, b 
           tppqs(a,a1,b,kb) = 0.0
           DO j1
              REQUEST            Vaaai(a,a1,b,j1) b
              GET                IJj(kb,j1)
              t1ppqj(a,a1,b,kb)= Vaaai(a,a1,b,j1)*IJj(kb,j1)
              tppqs(a,a1,b,kb)+= t1ppqj(a,a1,b,kb)
           ENDDO j1
           PREPARE YaaaI(a,a1,b,kb) = tppqs(a,a1,b,kb) 
#
     ENDPARDO kb, a, a1, b 
#
#    Put the singles amplitudes into a distributed array t1aI/t1bJ 
#    ------------------------------------------------------------- 
#
     PARDO a, i 
           PREQUEST tpi(a,i) = t1a_old(a,i1)  
           PUT t1ai(a,i)     = tpi(a,i) 
     ENDPARDO a, i 
#
     execute sip_barrier 
     execute server_barrier 
#
# --------------------------------------------------------------------------
#
     ENDPROC PDATA  
#    ------------- 
#
# --------------------------------------------------------------------------
#
# --------------------------------------------------------------------------
#
     PROC T4AAB 
#    ---------- 
#
     create DaiaS 
     create DaSbj 
     create Dab 
     create DaibS 
     create Daa 
     create D1ab 
     create D2ab 
     create D1aiaS 
     create D1aSbj 
#
     create LDaiaS 
     create LDaSbj 
     create LDab 
     create LDaibS 
     create LDaa 
     create LD1ab 
     create LD2ab 
     create LD1aiaS 
     create LD1aSbj 

     create Pbbai 
     create Pbbaj 
     create Paaai 
     create Paaaj 
#
     create XSai_ji 
     create XaI_ik
     create XaI_jk
     create XiI_ik
     create XiI_jk
#
     create Dai 
     create S3 
#
     esum2 = 0.0 
     execute sip_barrier 
#
#    alpha/alpha/beta/ block.
#    ------------------------
#
     PARDO k1, a, b, i2 
           REQUEST                T2aibj(a,i2,b,k1) a  
           PUT DaibS(a,i2,b,k1) = T2aibj(a,i2,b,k1) 
     ENDPARDO k1, a, b, i2 
#
     PARDO k1, a, b, i2 
           REQUEST                 L2aibj(a,i2,b,k1) a  
           PUT LDaibS(a,i2,b,k1) = L2aibj(a,i2,b,k1) 
     ENDPARDO k1, a, b, i2 
     execute server_barrier 
#
     DO i # segment size of 1  
#
        execute sip_barrier 
        execute server_barrier 
#
        IF i >= itrips
        IF i <= itripe 
#
        icount = icount + 1
        execute print_scalar icount 
#
        PARDO a, a1, a2
              REQUEST              YSaaai(a,a1,a2,i) a  
              tppp(a,a1,a2)      = YSaaai(a,a1,a2,i)
              PUT Paaai(a,a1,a2) = tppp(a,a1,a2)
        ENDPARDO a, a1, a2 
#
        PARDO b, b1, a 
              REQUEST             Yaaai(b,b1,a,i) a 
              tqqp(b,b1,a)      = Yaaai(b,b1,a,i)
              PUT Pbbai(b,b1,a) = tqqp(b,b1,a)
        ENDPARDO b, b1, a 
#
# Set T intermediates 
# ------------------- 
#
        PARDO a, a1, i1 
              PREQUEST t1ppps(a,i1,a1,i) = T2aiai(a,i1,a1,i2) 
              t1ppp(a,i1,a1)             = t1ppps(a,i1,a1,i) 
              PUT DaiaS(a,i1,a1)         = t1ppp(a,i1,a1) 
        ENDPARDO a, a1, i1 
#
        PARDO a, b, j1 
              PREQUEST tpsqq(a,i,b,j1) = T2aibj(a,i1,b,j1) 
              tabji(a,b,j1,i)          = tpsqq(a,i,b,j1)  
              tpqq(a,b,j1)             = tabji(a,b,j1,i) 
              PUT DaSbj(a,b,j1)        = tpqq(a,b,j1) 
        ENDPARDO a, b, j1 
#
        PARDO k1, a, b 
              PREQUEST t1psqq(a,i,b,k1) = T2aibj(a,i1,b,k1) 
              tppps(b,a,k1,i)           = t1psqq(a,i,b,k1) 
              tppp(b,a,k1)              = tppps(b,a,k1,i) 
              PUT Dab(b,a,k1)           = tppp(b,a,k1) 
        ENDPARDO k1, a, b 
        execute server_barrier 
#
# Set L intermediates 
# ------------------- 
#
        PARDO a, a1, i1 
              PREQUEST t4ppps(a,i1,a1,i) = L2aiai(a,i1,a1,i2) 
              t1ppp(a,i1,a1)             = t4ppps(a,i1,a1,i) 
              PUT LDaiaS(a,i1,a1)         = t1ppp(a,i1,a1) 
        ENDPARDO a, a1, i1 
#
        PARDO a, b, j1 
              PREQUEST t2psbj(a,i,b,j1) = L2aibj(a,i1,b,j1) 
              tabji(a,b,j1,i)          = t2psbj(a,i,b,j1)  
              tpqq(a,b,j1)             = tabji(a,b,j1,i) 
              PUT LDaSbj(a,b,j1)        = tpqq(a,b,j1) 
        ENDPARDO a, b, j1 
#
        PARDO k1, a, b 
              PREQUEST t3psqq(a,i,b,k1) = L2aibj(a,i1,b,k1) 
              tppps(b,a,k1,i)           = t3psqq(a,i,b,k1) 
              tppp(b,a,k1)              = tppps(b,a,k1,i) 
              PUT LDab(b,a,k1)           = tppp(b,a,k1) 
        ENDPARDO k1, a, b 
        execute server_barrier 
#
        PARDO k1, a, j1 
              PREQUEST t4psjk(a,i,j1,k1) = Vpiqj(a,i2,j1,k1) 
              tppps(j1,a,k1,i)          = t4psjk(a,i,j1,k1) 
              tppp(j1,a,k1)             = tppps(j1,a,k1,i) 
              PUT XaI_ik(j1,a,k1)       = tppp(j1,a,k1)  
        ENDPARDO k1, a, j1 
#
        PARDO k1, b, i1  
              PREQUEST t5psbk(i1,i,b,k1) = Vpiqj(i1,i2,b,k1) 
              tppps(i1,b,k1,i)          = t5psbk(i1,i,b,k1) 
              tppp(i1,b,k1)             = tppps(i1,b,k1,i) 
              PUT XiI_ik(i1,b,k1)       = tppp(i1,b,k1)
        ENDPARDO k1, b, i1 
#
        DO j # segment size of 1  
#
        IF j >= i 
#
           execute server_barrier 
#
           PARDO a, a1, a2
                 REQUEST              YSaaai(a,a1,a2,j) a  
                 tppp(a,a1,a2)      = YSaaai(a,a1,a2,j)
                 PUT Paaaj(a,a1,a2) = tppp(a,a1,a2)
           ENDPARDO a, a1, a2 
#
           PARDO b, b1, a 
                 REQUEST             Yaaai(b,b1,a,j) a 
                 tqqp(b,b1,a)      = Yaaai(b,b1,a,j)
                 PUT Pbbaj(b,b1,a) = tqqp(b,b1,a)
           ENDPARDO b, b1, a 
#
# Set T intermediates 
# ------------------- 
#
           PARDO a, a1  
                 PREQUEST tpsps(a,j,a1,i) = T2aiai(a,i1,a1,i2) 
                 tppii(a,a1,j,i)          = tpsps(a,j,a1,i) 
                 tpp(a,a1)                = tppii(a,a1,j,i) 
                 t1pp(a1,a)               = tpp(a,a1) 
                 PUT Daa(a1,a)            = t1pp(a1,a) 
           ENDPARDO a, a1  
           PARDO a, a1, i1 
                 PREQUEST t2ppps(a,i1,a1,j) = T2aiai(a,i1,a1,i2) 
                 t2ppp(a,i1,a1)             = t2ppps(a,i1,a1,j) 
                 PUT D1aiaS(a,i1,a1)        = t2ppp(a,i1,a1) 
           ENDPARDO a, a1, i1 
           PARDO a, b, j1 
                 PREQUEST t1psqq(a,j,b,j1) = T2aibj(a,i1,b,j1) 
                 tabji(a,b,j1,j)           = t1psqq(a,j,b,j1)  
                 t1pqq(a,b,j1)             = tabji(a,b,j1,j) 
                 PUT D1aSbj(a,b,j1)        = t1pqq(a,b,j1) 
           ENDPARDO a, b, j1 
           execute server_barrier 
#
# Set L intermediates 
# ------------------- 
#
           PARDO a, a1  
                 PREQUEST t1psps(a,j,a1,i) = L2aiai(a,i1,a1,i2) 
                 tppii(a,a1,j,i)          = t1psps(a,j,a1,i) 
                 tpp(a,a1)                = tppii(a,a1,j,i) 
                 t1pp(a1,a)               = tpp(a,a1) 
                 PUT LDaa(a1,a)            = t1pp(a1,a) 
           ENDPARDO a, a1  
           PARDO a, a1, i1 
                 PREQUEST t3ppps(a,i1,a1,j) = L2aiai(a,i1,a1,i2) 
                 t2ppp(a,i1,a1)             = t3ppps(a,i1,a1,j) 
                 PUT LD1aiaS(a,i1,a1)        = t2ppp(a,i1,a1) 
           ENDPARDO a, a1, i1 
           PARDO a, b, j1 
                 PREQUEST t3psbj(a,j,b,j1) = L2aibj(a,i1,b,j1) 
                 tabji(a,b,j1,j)           = t3psbj(a,j,b,j1)  
                 t1pqq(a,b,j1)             = tabji(a,b,j1,j) 
                 PUT LD1aSbj(a,b,j1)        = t1pqq(a,b,j1) 
           ENDPARDO a, b, j1 
        execute server_barrier 
#
# Zero out the amplitude array 
# ---------------------------- 
#
          #PARDO k1, a, a1, b
          #      tppqq(a,a1,b,k1)         = 0.0 
          #      PREPARE S3aab(a,a1,b,k1) = tppqq(a,a1,b,k1)  
          #ENDPARDO k1, a, a1, b 
#
           PARDO k1, a, b 
                 PREQUEST t4psqq(a,j,b,k1) = T2aibj(a,i1,b,k1) 
                 tppps(a,b,k1,j)           = t4psqq(a,j,b,k1) 
                 tppp(a,b,k1)              = tppps(a,b,k1,j) 
                 t1ppp(b,a,k1)             = tppp(a,b,k1) 
                 PUT D1ab(a,b,k1)          = tppp(a,b,k1) 
                 PUT D2ab(b,a,k1)          = t1ppp(b,a,k1) 
           ENDPARDO k1, a, b 
#
           PARDO k1, a, b 
                 PREQUEST t5asbk(a,j,b,k1) = L2aibj(a,i1,b,k1) 
                 tppps(a,b,k1,j)           = t5asbk(a,j,b,k1) 
                 tppp(a,b,k1)              = tppps(a,b,k1,j) 
                 t1ppp(b,a,k1)             = tppp(a,b,k1) 
                 PUT LD1ab(a,b,k1)          = tppp(a,b,k1) 
                 PUT LD2ab(b,a,k1)          = t1ppp(b,a,k1) 
           ENDPARDO k1, a, b 
#
#          Put 'slices' of VSpipi(a,i2,i1,i3) into 2-d arrays 
#          -------------------------------------------------- 
#
           PARDO a, i1  
                 PREQUEST P4aIiI(a,j,i1,i) = VSpipi(a,i2,i1,i3) 
                 Tppii(a,i1,j,i)           = P4aiii(a,j,i1,i)
                 tpp(a,i1)                 = Tppii(a,i1,j,i)
                 t1pp(i1,a)                = tpp(a,i1)  
                 PUT XSaI_ji(i1,a)         = t1pp(i1,a) 
           ENDPARDO a, i1  
#
           PARDO k1, a, j1 
                 PREQUEST t5psqq(a,j,j1,k1) = Vpiqj(a,i2,j1,k1) 
                 tppps(j1,a,k1,j)           = t5psqq(a,j,j1,k1) 
                 tppp(j1,a,k1)              = tppps(j1,a,k1,j)  
                 PUT XaI_jk(j1,a,k1)        = tppp(j1,a,k1)  
           ENDPARDO k1, a, j1 
#
           PARDO k1, b, i1  
                 PREQUEST t6psqq(i1,j,b,k1) = Vpiqj(i1,i2,b,k1) 
                 tppps(i1,b,k1,j)           = t6psqq(i1,j,b,k1) 
                 tppp(i1,b,k1)              = tppps(i1,b,k1,j) 
                 PUT XiI_jk(i1,b,k1)        = tppp(i1,b,k1)
           ENDPARDO k1, b, i1 
#
           execute sip_barrier  
          #execute server_barrier  
#
# Put distributed 2-d arrays int static arrays: Looks clumsy and stupid but is effective 
# -------------------------------------------------------------------------------------- 
           DO a 
           DO a1 
              GET         Daa(a,a1) 
              Saa(a,a1) = Daa(a,a1) 
           ENDDO a1 
           ENDDO a 
#
           DO a 
           DO a1 
              GET         LDaa(a,a1) 
              LSaa(a,a1) = LDaa(a,a1) 
           ENDDO a1 
           ENDDO a 
# 
           DO a 
           DO i1 
              GET            XSaI_ji(i1,a)         
              SSaI_ji(i1,a) = XSaI_ji(i1,a) 
           ENDDO i1 
           ENDDO a 
           execute sip_barrier  
# 
# Start the actual calculation 
# ---------------------------- 
#
#          Compute contributions to triples amplitudes 
#          ------------------------------------------- 
#
           PARDO k1, b, a1 
#
                 allocate L3aab(*,a1,b,k1) 
                 allocate LL3aab(*,a1,b,k1) 
#
                 DO a2
#
                    REQUEST Vaaai(a2,a1,b,k1) b 
#
                    DO a 
#
                       IF a <= a1
#
                          t1ppqq(a,a1,b,k1)  = Vaaai(a2,a1,b,k1)*Saa(a2,a)  
                          L3aab(a,a1,b,k1) -= t1ppqq(a,a1,b,k1)
#
                          t1ppqq(a,a1,b,k1)  = Vaaai(a2,a1,b,k1)*LSaa(a2,a)  
                          LL3aab(a,a1,b,k1) -= t1ppqq(a,a1,b,k1)
#
                       ENDIF
#
                    ENDDO a 
#
                 ENDDO a2   
#
                 DO b1 
#
                    GET              Pbbaj(b1,b,a1)
                    GET              Pbbai(b1,b,a1)
                    tppp(b1,a1,b)  = Pbbaj(b1,b,a1) 
                    t1ppp(b1,a1,b) = Pbbai(b1,b,a1) 
#
                    DO a 
#
                       IF a <= a1
#
                          GET Dab(b1,a,k1) 
                          GET D2ab(b1,a,k1) 
#
                          tppqq(a,a1,b,k1)    = tppp(b1,a1,b)*Dab(b1,a,k1)  
                          t3ppqq(a,a1,b,k1)   = t1ppp(b1,a1,b)*D2ab(b1,a,k1) 
                          tppqq(a,a1,b,k1)   -= t3ppqq(a,a1,b,k1)  
                          L3aab(a,a1,b,k1)  += tppqq(a,a1,b,k1)
#   
                       ENDIF
#
                       IF a <= a1
#
                          GET LDab(b1,a,k1) 
                          GET LD2ab(b1,a,k1) 
#
                          tppqq(a,a1,b,k1)    = tppp(b1,a1,b)*LDab(b1,a,k1)  
                          t3ppqq(a,a1,b,k1)   = t1ppp(b1,a1,b)*LD2ab(b1,a,k1) 
                          tppqq(a,a1,b,k1)   -= t3ppqq(a,a1,b,k1)  
                          LL3aab(a,a1,b,k1)  += tppqq(a,a1,b,k1)
#   
                       ENDIF
#
                    ENDDO a 
#
                 ENDDO b1 
#
                 DO a 
                    IF a <= a1
                       tppqq(a,a1,b,k1)       = L3aab(a,a1,b,k1) 
                       PREPARE S3aab(a,a1,b,k1) += tppqq(a,a1,b,k1) 
                    ENDIF 
                 ENDDO a  
#
                 DO a 
                    IF a <= a1
                       tppqq(a,a1,b,k1)       = LL3aab(a,a1,b,k1) 
                       PREPARE SS3aab(a,a1,b,k1) += tppqq(a,a1,b,k1) 
                    ENDIF 
                 ENDDO a  
#
                 deallocate L3aab(*,a1,b,k1) 
                 deallocate LL3aab(*,a1,b,k1) 
#
           ENDPARDO k1, b, a1 
#
           PARDO k1, a, b
#
                 allocate L3aab(a,*,b,k1) 
                 allocate LL3aab(a,*,b,k1) 
#
                 DO a2 
#
                    REQUEST Vaaai(a,a2,b,k1) a 
#
                    DO a1 
#
                       IF a <= a1 
#   
                          t1ppqq(a,a1,b,k1)  = Vaaai(a,a2,b,k1)*Saa(a2,a1)
                          L3aab(a,a1,b,k1) += t1ppqq(a,a1,b,k1)
#
                       ENDIF 
#
                       IF a <= a1 
#   
                          t1ppqq(a,a1,b,k1)  = Vaaai(a,a2,b,k1)*LSaa(a2,a1)
                          LL3aab(a,a1,b,k1) += t1ppqq(a,a1,b,k1)
#
                       ENDIF 
#
                    ENDDO a1 
#
                 ENDDO a2 
#
                 DO b1  
#
                    GET             Pbbai(b1,b,a)
                    GET             Pbbaj(b1,b,a)
                    tppp(a,b1,b)  = Pbbai(b1,b,a) 
                    t1ppp(a,b1,b) = Pbbaj(b1,b,a) 
#
                    DO a1 
#
                       IF a <= a1 
#
                          GET D2ab(b1,a1,k1) 
                          GET Dab(b1,a1,k1) 
#
                          tppqq(a,a1,b,k1)   = tppp(a,b1,b)*D2ab(b1,a1,k1) 
                          t1ppqq(a,a1,b,k1)  = t1ppp(a,b1,b)*Dab(b1,a1,k1) 
                          tppqq(a,a1,b,k1)  -= t1ppqq(a,a1,b,k1)  
                          L3aab(a,a1,b,k1) += tppqq(a,a1,b,k1)
#
                       ENDIF
#
                    ENDDO a1 
#
                    DO a1 
#
                       IF a <= a1 
#
                          GET LD2ab(b1,a1,k1) 
                          GET LDab(b1,a1,k1) 
#
                          tppqq(a,a1,b,k1)   = tppp(a,b1,b)*LD2ab(b1,a1,k1) 
                          t1ppqq(a,a1,b,k1)  = t1ppp(a,b1,b)*LDab(b1,a1,k1) 
                          tppqq(a,a1,b,k1)  -= t1ppqq(a,a1,b,k1)  
                          LL3aab(a,a1,b,k1) += tppqq(a,a1,b,k1)
#
                       ENDIF
#
                    ENDDO a1 
#
                 ENDDO b1  
#
                 DO a1  
                    IF a <= a1
                       tppqq(a,a1,b,k1)       = L3aab(a,a1,b,k1) 
                       PREPARE S3aab(a,a1,b,k1) += tppqq(a,a1,b,k1) 
                    ENDIF 
                 ENDDO a1  
#
                 DO a1  
                    IF a <= a1
                       tppqq(a,a1,b,k1)       = LL3aab(a,a1,b,k1) 
                       PREPARE SS3aab(a,a1,b,k1) += tppqq(a,a1,b,k1) 
                    ENDIF 
                 ENDDO a1  
#
                 deallocate L3aab(a,*,b,k1) 
                 deallocate LL3aab(a,*,b,k1) 
#
           ENDPARDO k1, a, b 
#
           PARDO k1, a, a1
#
                 allocate L3aab(a,a1,*,k1) 
                 allocate LL3aab(a,a1,*,k1) 
#
                 DO a2
#
                    IF a <= a1 
#
                       GET              Paaaj(a,a2,a1)
                       GET              Paaai(a,a2,a1)
                       tppp(a,a1,a2)  = Paaaj(a,a2,a1)  
                       t1ppp(a,a1,a2) = Paaai(a,a2,a1)  
#
                       DO b 
#
                          GET D1ab(a2,b,k1)
                          GET Dab(b,a2,k1) 
# 
                          tppq(a2,b,k1)      = Dab(b,a2,k1) 
                          tppqq(a,a1,b,k1)   = tppp(a,a1,a2)*tppq(a2,b,k1)
                          t1ppqq(a,a1,b,k1)  = t1ppp(a,a1,a2)*D1ab(a2,b,k1)
                          tppqq(a,a1,b,k1)  -= t1ppqq(a,a1,b,k1) 
                          L3aab(a,a1,b,k1) += tppqq(a,a1,b,k1)
#
                       ENDDO b
#
                       DO b 
#
                          GET LD1ab(a2,b,k1)
                          GET LDab(b,a2,k1) 
# 
                          tppq(a2,b,k1)      = LDab(b,a2,k1) 
                          tppqq(a,a1,b,k1)   = tppp(a,a1,a2)*tppq(a2,b,k1)
                          t1ppqq(a,a1,b,k1)  = t1ppp(a,a1,a2)*LD1ab(a2,b,k1)
                          tppqq(a,a1,b,k1)  -= t1ppqq(a,a1,b,k1) 
                          LL3aab(a,a1,b,k1) += tppqq(a,a1,b,k1)
#
                       ENDDO b
#
                    ENDIF
#
                 ENDDO a2
#
                 DO b  
                    IF a <= a1
                       tppqq(a,a1,b,k1)       = L3aab(a,a1,b,k1) 
                       PREPARE S3aab(a,a1,b,k1) += tppqq(a,a1,b,k1) 
                    ENDIF 
                 ENDDO b  
#
                 DO b  
                    IF a <= a1
                       tppqq(a,a1,b,k1)       = LL3aab(a,a1,b,k1) 
                       PREPARE SS3aab(a,a1,b,k1) += tppqq(a,a1,b,k1) 
                    ENDIF 
                 ENDDO b  
                 deallocate L3aab(a,a1,*,k1) 
                 deallocate LL3aab(a,a1,*,k1) 
#
           ENDPARDO k1, a, a1   
#
# Done contributions from Paaai terms 
# ----------------------------------- 
#
           PARDO k1, b, a
#
                 allocate L3aab(a,*,b,k1) 
                 allocate LL3aab(a,*,b,k1) 
#
                 DO j1 
#
                    GET             DaSbj(a,b,j1)
                    GET             D1aSbj(a,b,j1)
                    tppp(a,j1,b)  = DaSbj(a,b,j1) 
                    t1ppp(a,j1,b) = D1aSbj(a,b,j1) 
# 
                    DO a1
#
                       IF a <= a1 
#
                          GET              Xai_jk(j1,a1,k1)
                          GET              Xai_ik(j1,a1,k1)
                          tppqq(a,a1,b,k1)   = tppp(a,j1,b)*Xai_jk(j1,a1,k1)
                          t1ppqq(a,a1,b,k1)  = t1ppp(a,j1,b)*Xai_ik(j1,a1,k1)
                          t1ppqq(a,a1,b,k1) -= tppqq(a,a1,b,k1) 
                          L3aab(a,a1,b,k1) += t1ppqq(a,a1,b,k1)
#
                       ENDIF
#
                    ENDDO a1
#
                 ENDDO j1 
#
                 DO j1 
#
                    GET             LDaSbj(a,b,j1)
                    GET             LD1aSbj(a,b,j1)
                    tppp(a,j1,b)  = LDaSbj(a,b,j1) 
                    t1ppp(a,j1,b) = LD1aSbj(a,b,j1) 
# 
                    DO a1
#
                       IF a <= a1 
#
                          GET              Xai_jk(j1,a1,k1)
                          GET              Xai_ik(j1,a1,k1)
                          tppqq(a,a1,b,k1)   = tppp(a,j1,b)*Xai_jk(j1,a1,k1)
                          t1ppqq(a,a1,b,k1)  = t1ppp(a,j1,b)*Xai_ik(j1,a1,k1)
                          t1ppqq(a,a1,b,k1) -= tppqq(a,a1,b,k1) 
                          LL3aab(a,a1,b,k1) += t1ppqq(a,a1,b,k1)
#
                       ENDIF
#
                    ENDDO a1
#
                 ENDDO j1 
#
                 DO i1 
#
                    GET DaibS(a,i1,b,k1) 
#
                    DO a1 
#                   
                       IF a <= a1
#
                         #GET              XSaI_ji(i1,a1)
                          t1ppqq(a,a1,b,k1)  = DaibS(a,i1,b,k1)*SSaI_ji(i1,a1)
                          L3aab(a,a1,b,k1) -= t1ppqq(a,a1,b,k1)
#
                       ENDIF
#
                    ENDDO a1
#
                 ENDDO i1 
#
                 DO i1 
#
                    GET LDaibS(a,i1,b,k1) 
#
                    DO a1 
#                   
                       IF a <= a1
#
                         #GET              XSaI_ji(i1,a1)
                          t1ppqq(a,a1,b,k1)  = LDaibS(a,i1,b,k1)*SSaI_ji(i1,a1)
                          LL3aab(a,a1,b,k1) -= t1ppqq(a,a1,b,k1)
#
                       ENDIF
#
                    ENDDO a1
#
                 ENDDO i1 
#
                 DO a1   
                    IF a <= a1
                       tppqq(a,a1,b,k1)       = L3aab(a,a1,b,k1) 
                       PREPARE S3aab(a,a1,b,k1) += tppqq(a,a1,b,k1) 
                    ENDIF 
                 ENDDO a1   
#
                 DO a1   
                    IF a <= a1
                       tppqq(a,a1,b,k1)       = LL3aab(a,a1,b,k1) 
                       PREPARE SS3aab(a,a1,b,k1) += tppqq(a,a1,b,k1) 
                    ENDIF 
                 ENDDO a1   
                 deallocate L3aab(a,*,b,k1) 
                 deallocate LL3aab(a,*,b,k1) 
#
           ENDPARDO k1, b, a 
#
           PARDO k1, a1, a
#
                 IF a <= a1 
#
                    allocate L3aab(a,a1,*,k1) 
                    allocate LL3aab(a,a1,*,k1) 
#
                    DO i1 
#
                       GET              D1aiaS(a,i1,a1)
                       GET              DaiaS(a,i1,a1)
                       tppp(a,a1,i1)  = D1aiaS(a,i1,a1) 
                       t1ppp(a,a1,i1) = DaiaS(a,i1,a1) 
#
                       DO b
#
                          GET              XiI_ik(i1,b,k1)
                          GET              XiI_jk(i1,b,k1)
                          tppqq(a,a1,b,k1)   = tppp(a,a1,i1)*XiI_ik(i1,b,k1)
                          t1ppqq(a,a1,b,k1)  = t1ppp(a,a1,i1)*XiI_jk(i1,b,k1)
                          t1ppqq(a,a1,b,k1) -= tppqq(a,a1,b,k1)  
                          L3aab(a,a1,b,k1) += t1ppqq(a,a1,b,k1)
#
                       ENDDO b
#
                    ENDDO i1 
#
                    DO i1 
#
                       GET              LD1aiaS(a,i1,a1)
                       GET              LDaiaS(a,i1,a1)
                       tppp(a,a1,i1)  = LD1aiaS(a,i1,a1) 
                       t1ppp(a,a1,i1) = LDaiaS(a,i1,a1) 
#
                       DO b
#
                          GET              XiI_ik(i1,b,k1)
                          GET              XiI_jk(i1,b,k1)
                          tppqq(a,a1,b,k1)   = tppp(a,a1,i1)*XiI_ik(i1,b,k1)
                          t1ppqq(a,a1,b,k1)  = t1ppp(a,a1,i1)*XiI_jk(i1,b,k1)
                          t1ppqq(a,a1,b,k1) -= tppqq(a,a1,b,k1)  
                          LL3aab(a,a1,b,k1) += t1ppqq(a,a1,b,k1)
#
                       ENDDO b
#
                    ENDDO i1 
#
                    DO b   
                       IF a <= a1
                          tppqq(a,a1,b,k1)       = L3aab(a,a1,b,k1) 
                          PREPARE S3aab(a,a1,b,k1) += tppqq(a,a1,b,k1) 
                       ENDIF 
                    ENDDO b   
#
                    DO b   
                       IF a <= a1
                          tppqq(a,a1,b,k1)       = LL3aab(a,a1,b,k1) 
                          PREPARE SS3aab(a,a1,b,k1) += tppqq(a,a1,b,k1) 
                       ENDIF 
                    ENDDO b   
                    deallocate L3aab(a,*,b,k1) 
                    deallocate LL3aab(a,*,b,k1) 
#
                 ENDIF
#
           ENDPARDO k1, a1, a 
#
           PARDO k1, b, a1  
#
                 allocate L3aab(*,a1,b,k1) 
                 allocate LL3aab(*,a1,b,k1) 
#
                 DO i1 
#
                    GET             DaibS(a1,i1,b,k1) 
                    tppqq(i1,a1,b,k1) = DaibS(a1,i1,b,k1)  
#
                    DO a
#
                       IF a <= a1
#
                         #GET              XSaI_ji(i1,a)
                          t3ppqq(a,a1,b,k1)  = tppqq(i1,a1,b,k1)*SSaI_ji(i1,a)
                          L3aab(a,a1,b,k1) += t3ppqq(a,a1,b,k1)
#
                       ENDIF
#
                    ENDDO a
#
                 ENDDO i1 
#
                 DO i1 
#
                    GET             LDaibS(a1,i1,b,k1) 
                    tppqq(i1,a1,b,k1) = LDaibS(a1,i1,b,k1)  
#
                    DO a
#
                       IF a <= a1
#
                         #GET              XSaI_ji(i1,a)
                          t3ppqq(a,a1,b,k1)  = tppqq(i1,a1,b,k1)*SSaI_ji(i1,a)
                          LL3aab(a,a1,b,k1) += t3ppqq(a,a1,b,k1)
#
                       ENDIF
#
                    ENDDO a
#
                 ENDDO i1 
#
                 DO a   
                    IF a <= a1
                       tppqq(a,a1,b,k1)       = L3aab(a,a1,b,k1) 
                       PREPARE S3aab(a,a1,b,k1) += tppqq(a,a1,b,k1) 
                    ENDIF 
                 ENDDO a   
#
                 DO a   
                    IF a <= a1
                       tppqq(a,a1,b,k1)       = LL3aab(a,a1,b,k1) 
                       PREPARE SS3aab(a,a1,b,k1) += tppqq(a,a1,b,k1) 
                    ENDIF 
                 ENDDO a   
                 deallocate L3aab(*,a1,b,k1) 
                 deallocate LL3aab(*,a1,b,k1) 
#
           ENDPARDO k1, b, a1 
#
           PARDO k1, b, a1
#
                 allocate L3aab(*,a1,b,k1) 
                 allocate LL3aab(*,a1,b,k1) 
#
                 DO j1 
#
                    GET              DaSbj(a1,b,j1)
                    GET              D1aSbj(a1,b,j1)
                    tppp(j1,a1,b)  = DaSbj(a1,b,j1) 
                    t1ppp(j1,a1,b) = D1aSbj(a1,b,j1) 
#
                    DO a
#
                       IF a <= a1
#
                          GET              Xai_jk(j1,a,k1)
                          GET              Xai_ik(j1,a,k1)
                          tppqq(a,a1,b,k1)   = tppp(j1,a1,b)*Xai_jk(j1,a,k1)
                          t1ppqq(a,a1,b,k1)  = t1ppp(j1,a1,b)*Xai_ik(j1,a,k1)
                          tppqq(a,a1,b,k1)  -= t1ppqq(a,a1,b,k1)  
                          L3aab(a,a1,b,k1) += tppqq(a,a1,b,k1)
#
                       ENDIF
#
                    ENDDO a
#
                 ENDDO j1 
#
                 DO j1 
#
                    GET              LDaSbj(a1,b,j1)
                    GET              LD1aSbj(a1,b,j1)
                    tppp(j1,a1,b)  = LDaSbj(a1,b,j1) 
                    t1ppp(j1,a1,b) = LD1aSbj(a1,b,j1) 
#
                    DO a
#
                       IF a <= a1
#
                          GET              Xai_jk(j1,a,k1)
                          GET              Xai_ik(j1,a,k1)
                          tppqq(a,a1,b,k1)   = tppp(j1,a1,b)*Xai_jk(j1,a,k1)
                          t1ppqq(a,a1,b,k1)  = t1ppp(j1,a1,b)*Xai_ik(j1,a,k1)
                          tppqq(a,a1,b,k1)  -= t1ppqq(a,a1,b,k1)  
                          LL3aab(a,a1,b,k1) += tppqq(a,a1,b,k1)
#
                       ENDIF
#
                    ENDDO a
#
                 ENDDO j1 
#
                 DO a   
                    IF a <= a1
                       tppqq(a,a1,b,k1)       = L3aab(a,a1,b,k1) 
                       PREPARE S3aab(a,a1,b,k1) += tppqq(a,a1,b,k1) 
                    ENDIF 
                 ENDDO a   
#
                 DO a   
                    IF a <= a1
                       tppqq(a,a1,b,k1)       = LL3aab(a,a1,b,k1) 
                       PREPARE SS3aab(a,a1,b,k1) += tppqq(a,a1,b,k1) 
                    ENDIF 
                 ENDDO a   
                 deallocate L3aab(*,a1,b,k1) 
                 deallocate LL3aab(*,a1,b,k1) 
#
           ENDPARDO k1, b, a1 
#
           execute server_barrier 
#
           PARDO a, a1
#
                 PREQUEST P3aiai(a,i,a1,j) = VSpipi(a,i1,a1,i2)
                 tppii(a,a1,i,j)           = P3aiai(a,i,a1,j)
                 tpp(a,a1)                 = tppii(a,a1,i,j)
                 PUT S3(a,a1)              = tpp(a,a1) 
#
           ENDPARDO a, a1
#
        DO k1 
           create D3aab(*,*,*,k1) 
           execute sip_barrier  
#
# Symmetrize the distributed amplitude array 
# ------------------------------------------ 
#
           PARDO a, a1, b 
#
# Compute contribution to the energy and the one-particle intermediates 
# --------------------------------------------------------------------- 
#
                 IF a < a1 
#
                    REQUEST         S3aab(a,a1,b,k1) a 
                    REQUEST         SS3aab(a,a1,b,k1) a 
#
                    Taaboij(a,a1,b,k1,i,j)    = S3aab(a,a1,b,k1)  
                    execute energy_tdenominator Taaboij(a,a1,b,k1,i,j)  
#
# Compute contribution to energy
# ------------------------------ 

                    t1ppqq(a,a1,b,k1) = Taaboij(a,a1,b,k1,i,j) 
                    etemp             = SS3aab(a,a1,b,k1)*t1ppqq(a,a1,b,k1) 
                   #etemp             = etemp/2.0 
                    esum2            += etemp 
#
                    PUT D3aab(a,a1,b,k1) = t1ppqq(a,a1,b,k1)
                    tppqq(a1,a,b,k1)      = t1ppqq(a,a1,b,k1) 
                    tppqq(a1,a,b,k1)     *= -1.0  
                    PUT D3aab(a1,a,b,k1) = tppqq(a1,a,b,k1)
#
                 ENDIF # a < a1 
#
                 IF a == a1 
#
                    REQUEST         S3aab(a,a1,b,k1) a 
                    REQUEST         SS3aab(a,a1,b,k1) a 
#
                    Taaboij(a,a1,b,k1,i,j)    = S3aab(a,a1,b,k1) 
                    execute energy_tdenominator Taaboij(a,a1,b,k1,i,j)  
#
# Compute contribution to energy
# ------------------------------ 

                    t1ppqq(a,a1,b,k1)     = Taaboij(a,a1,b,k1,i,j) 
                    etemp             = SS3aab(a,a1,b,k1)*t1ppqq(a,a1,b,k1) 
                    etemp             = etemp/2.0 
                    esum2            += etemp 
#
                    PUT D3aab(a,a1,b,k1) = t1ppqq(a,a1,b,k1)
#
                 ENDIF # a == a1 
#
           ENDPARDO a, a1, b
#
           execute sip_barrier 
           execute server_barrier 
#
#    Form contribution to sai
#    ------------------------
#
#          PERM 1
#          ------
#
           PARDO a1, b
#
                 PREQUEST t7psqq(a1,j,b,k1) = Vpiqj(a1,i1,b,k1)
                 t2ppps(a1,b,k1,j)          = t7psqq(a1,j,b,k1)
                 tppp(a1,b,k1)              = t2ppps(a1,b,k1,j)
                 tppps(a1,b,k1,i)           = tppp(a1,b,k1) 
#
                 DO a
#
                    GET                         D3aab(a,a1,b,k1)
                    xai(a,i)                  = D3aab(a,a1,b,k1)*tppps(a1,b,k1,i)
                    xai(a,i)                 *= 4.0
                    PUT sai(a,i)             += xai(a,i)
#
                 ENDDO a
#
           ENDPARDO a1, b
#
#          PERM 2
#          ------
#
           PARDO a, b
#
                 PREQUEST t8psqq(a,i,b,k1) = Vpiqj(a,i1,b,k1)
                 t2ppps(a,b,k1,i)          = t8psqq(a,i,b,k1)
                 tppp(a,b,k1)               = t2ppps(a,b,k1,i)
                 tppps(a,b,k1,j)            = tppp(a,b,k1) 
#
                 DO a1
#
                    GET                         D3aab(a,a1,b,k1)
                    xai(a1,j)                 = D3aab(a,a1,b,k1)*tppps(a,b,k1,j)
                    xai(a1,j)                *= 4.0
                    PUT sai(a1,j)            += xai(a1,j)
#
                 ENDDO a1
#
           ENDPARDO a, b
# 
#          PERM 3
#          ------
#
           PARDO b, a, a1
#
                 GET                         D3aab(a,a1,b,k1)
                 GET                         S3(a,a1) 
                 t1pp(b,k1)                = D3aab(a,a1,b,k1)*S3(a,a1)
                 t1pp(b,k1)               *= 2.0
                 PUT Dai(b,k1)            += t1pp(b,k1)
#
                 tppqq(a,a1,b,k1)         = 0.0 
                 PREPARE S3aab(a,a1,b,k1) = tppqq(a,a1,b,k1)  
                 PREPARE SS3aab(a,a1,b,k1) = tppqq(a,a1,b,k1)  
#
           ENDPARDO b, a, a1
#
           execute sip_barrier  
           execute server_barrier  
           delete D3aab(*,*,*,k1) 
        ENDDO k1
#
        ENDIF # i>=j 
        ENDDO j # segment size of 1  
#
        ENDIF # i <= itripe
        ENDIF # i >= itrips
#
     ENDDO i # segment size of 1  
#
     execute server_barrier 
     execute sip_barrier
     collective ecorraab += esum2 
     execute print_scalar ecorraab 

     esum = 0.0 
     esum = ecorraab 
#
     delete DaiaS 
     delete DaSbj 
     delete Dab 
     delete DaibS 
     delete Daa 
     delete D1ab 
     delete D1aiaS 
     delete D1aSbj 
#
     delete XiI_ik
     delete XiI_jk
     delete XSai_ji 
     delete XaI_ik
     delete XaI_jk
     execute sip_barrier 
     execute server_barrier 
#
#    alpha/alpha/beta/ block.
#
     ENDPROC T4AAB 
#    ------------- 
#
# --------------------------------------------------------------------------
#
#
# --------------------------------------------------------------------------
#
     PROC ST5 
#    -------- 
#
# Compute contribution to the energy from sai 
# -------------------------------------------  
#
     esum = 0.0 
     execute sip_barrier 
     PARDO a, i 
#
	   PREQUEST Pai(a,i) = Sl1a(a,i1) 
	   GET                 sai(a,i) 
	   etemp             = Pai(a,i)*sai(a,i) 
	   etemp            *= 0.25
	   esum             += etemp  
#
     ENDPARDO a, i 
#
     PARDO a, i1  
#
	   REQUEST             Sl1a(a,i1) a  
	   GET                 Dai(a,i1) 
	   etemp             = Sl1a(a,i1)*Dai(a,i1) 
	   etemp            *= 0.25
	   esum             += etemp  
#
     ENDPARDO a, i1 
#
     execute sip_barrier 
     collective ecorrsa += esum 
     execute sip_barrier 
     execute print_scalar ecorrsa  
     execute server_barrier 
#
     ENDPROC ST5 
#    ----------- 
#
# --------------------------------------------------------------------------
#
# --------------------------------------------------------------------------
#
     PROC FORM_IDENTITY
#    ------------------
#
     create IIi
     create IJj
#
# Form identity arrays
# --------------------
#
     DO i1
     DO i2
           tii(i1,i2) = 1.0
           t1ii(i1,i2) = 0.0
           execute return_diagonal tii t1ii
           tpp(i1,i2) = t1ii(i1,i2)
           PREPARE Sii(i1,i2) = tpp(i1,i2)
     ENDDO i2
     ENDDO i1
#
     DO j1
     DO j2
           tjj(j1,j2) = 1.0
           t1jj(j1,j2) = 0.0
           execute return_diagonal tjj t1jj
           tqq(j1,j2) = t1jj(j1,j2)
           PREPARE Sjj(j1,j2) = tqq(j1,j2)
     ENDDO j2
     ENDDO j1
     execute sip_barrier
     execute server_barrier
#
     PARDO i1, i
#
           PREQUEST PIi(i,i1) = Sii(i2,i1)
           PUT IIi(i,i1) = PIi(i,i1)
#
     ENDPARDO i1, i
#
     PARDO j1, jb
#
           PREQUEST PJj(jb,j1) = Sjj(j2,j1)
           PUT IJj(jb,j1) = PJj(jb,j1)
#
     ENDPARDO j1, jb
     execute sip_barrier
#
     ENDPROC FORM_IDENTITY
#    ---------------------
#
# MAIN PROGRAM 
#
# --------------------------------------------------------------------------
#
# Compute E^{[4]}_T contribution only and form sai and sbj  
# -------------------------------------------------------- 
#
     create sai  
     create sbj  
     execute sip_barrier 
     execute load_balance_off 
#
     CALL READ_BLOCKDATA  
     CALL FORM_IDENTITY 
     execute print_scalar etemp 
     CALL PDATA 
     execute print_scalar etemp 
    #CALL T4AAA 
     CALL T4AAB 
     CALL ST5  
#
# Sum the total energy contribution and add to etot. 
# -------------------------------------------------- 
#
     ecorrT  = ecorraab 
     ecorrT += ecorrsa 
     ecorrT *= 2.0 
     execute print_scalar ecorrT 

    #totenerg += ecorraaa 
    #totenerg += ecorraab 
    #totenerg += ecorrsa 
     totenerg += ecorrT 
#
     execute sip_barrier
#
     ENDSIAL CCSDPT_RHF_AAB    
#
#
#
