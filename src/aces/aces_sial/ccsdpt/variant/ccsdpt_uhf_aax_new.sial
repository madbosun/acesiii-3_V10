#  Copyright (c) 2003-2010 University of Florida
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  The GNU General Public License is included in this distribution
#  in the file COPYRIGHT.
      SIAL CCSDPT_UHF_AAX    

# Make index definitions 
#
      Index   i      = 1, naocc   
      Index   j      = 1, naocc   
      Index   k      = 1, naocc   
      Index   ib     = 1, nbocc 
      Index   jb     = 1, nbocc 
      Index   kb     = 1, nbocc 
      index pp   = subb, sube   
#
      aoindex mu     = 1, norb 
      aoindex nu     = 1, norb 
      aoindex lambda = 1, norb 
      aoindex sigma  = 1, norb 
#
      moaindex i1= baocc, eaocc
      moaindex i2= baocc, eaocc
      moaindex i3= baocc, eaocc
      moaindex k1= baocc, eaocc
#
      moaindex a = bavirt, eavirt
      moaindex a1= bavirt, eavirt
      moaindex a2= bavirt, eavirt
      moaindex a3= bavirt, eavirt 
#
      mobindex j1= bbocc, ebocc
      mobindex j2= bbocc, ebocc
      mobindex j3= bbocc, ebocc
      mobindex m1= bbocc, ebocc
#
      mobindex b = bbvirt, ebvirt
      mobindex b1= bbvirt, ebvirt
      mobindex b2= bbvirt, ebvirt
      mobindex b3= bbvirt, ebvirt 
#
      moaindex p = baocc, eavirt  
      moaindex p1= baocc, eavirt  
      moaindex p2= baocc, eavirt  
      moaindex p3= baocc, eavirt  
#
      mobindex q = bbocc, ebvirt  
      mobindex q1= bbocc, ebvirt  
      mobindex q2= bbocc, ebvirt  
      mobindex q3= bbocc, ebvirt  
#
# Declare served arrays which are read from disk  
# 
      served Vaaai(a1,a2,a3,i1)
      served Vbbai(b,b2,a,i1) 
      served Vaabj(a,a1,b,j1) 
      served VSaaai(a1,a2,a3,i1)
      served VSbbbj(b,b1,b2,j1) 
      distributed XaabJ(a1,a2,b3,pp)
      distributed XSaaai(a1,a2,a3,pp)
      served YSaaai(a1,a2,a3,i)
      served Yaabj(a1,a2,b3,ib)
      served VSpipi(p,i1,p1,i2)
      served Vaaii(a,a1,i1,i2)
      served Viaai(i1,a,a1,i2)
      served Vpiqj(p,i1,q,j2)
#
      served VSqjqj(q,j1,q2,j2)
      served Vbbjj(b,b1,j1,j2)
      served Vjbbj(j1,b,b1,j2)
      served Vbbii(b,b1,i1,i2)
      served Vjbii(j1,b,i1,i2)
      served Vaajj(a,a1,j1,j2)
      served Viabj(i1,a,b,j1)
#
      served T2aiai(a,i1,a1,i2)
      served T2aibj(a,i1,b,j1) 
      served T2bjbj(b,j1,b1,j2) 
#
      distributed XSaiii(a,i,i1,j)  
      distributed XSbjjj(b,ib,j1,jb)  
      distributed XaIjJ(a,i,j1,jb)  
      distributed XiIbJ(i1,i,b,jb)  
#
      distributed Xbbai(b,b1,a,pp) 
      served Ybbai(b,b1,a,i) 
#
# Declare distributed arrays 
# 
      distributed Paaai(a,a1,a2) 
      distributed Paaaj(a,a1,a2) 
      distributed Paaak(a,a1,a2) 
      distributed Pbbbi(b,b1,b2)  
      distributed Pbbbj(b,b1,b2)  
      distributed Pbbbk(b,b1,b2)  
      distributed Pbbai(b,b1,a) 
      distributed Pbbaj(b,b1,a) 
      distributed Paabk(a,a1,b) 
      distributed Paabi(a,a1,b) 
      distributed Paabj(a,a1,b) 
      distributed Pbbak(b,b1,a) 
#
      temp Paiii(a,i,i1,j)   
      temp P1aiii(a,i,i1,j)   
      temp P2aiii(a,i,i1,j)   
      temp P3aiii(a,i,i1,j)   
      temp P4aiii(a,i,i1,j)   
      temp Pbjjj(b,ib,j1,jb)   
      temp PaIjJ(a,i,j1,jb) 
      temp P1aIjJ(a,i,j1,jb) 
      temp PiIbJ(i1,i,b,jb) 
      temp P1iIbJ(i1,i,b,jb) 
#
      distributed XSaI_ij(i1,a) 
      distributed XSaI_ji(i1,a) 
      distributed XSaI_ik(i1,a,k1) 
      distributed XSaI_ki(i1,a,k1) 
      distributed XSaI_kj(i1,a,k1) 
      distributed XaI_ik(j1,a,m1)  
      distributed XaI_jk(j1,a,m1)  
      distributed XiI_ik(i1,b,m1)   
      distributed XiI_jk(i1,b,m1)   
      static SaI_ik(j1,a)  
      static SaI_jk(j1,a)  
      static SiI_ik(i1,b)   
      static SiI_jk(i1,b)   
      static SSaI_ji(i1,a) 
#
      temp taaai(a,a1,a2,i1) 
#
      temp XaJbK(a,j,b,kb) 
      temp X1aJbK(a,j,b,kb) 
      temp X2aJbK(a,j,b,kb) 
      temp XaIbK(a,i,b,kb) 
      temp X1aIbK(a,i,b,kb) 
      temp X2aIbK(a,i,b,kb) 
      temp XaJaI(a,j,a1,i) 
      temp X1aJaI(a,j,a1,i) 
      temp YaibK(a,i1,b,kb) 
      temp Y1aibK(a,i1,b,kb) 
      temp XaIbj(a,i,b,j1) 
      temp X1aIbj(a,i,b,j1) 
      temp XaJbj(a,j,b,j1) 
      temp X1aJbj(a,j,b,j1) 
      temp XaiaI(a,i1,a1,i) 
      temp XaiaJ(a,i1,a1,j) 
#
      distributed DbjbS(b,j1,b1) 
      distributed D1bjbS(b,j1,b1) 
      distributed D2bjbS(b,j1,b1) 
      distributed EaibS(a,i1,b) 
      distributed E1aibS(a,i1,b) 
      distributed EabjS(a,b,j1) 
#
      distributed Y3ijk(a,a1,a2) 
      distributed D3aab(a,a1,b2,m1) 
      served S3aab(a,a1,b,m1) 
      local L3aab(a,a1,b,m1)  
      served S3ijk(a,a1,a2,k1) 
      local L3aaa(a,a1,a2,k1)  
#
      distributed sai(a,i) 
      distributed sbj(b,kb) 
      distributed Dai(a,k1) 
      distributed Dbj(b,m1) 
      distributed S3(a1,a)    
      temp txai(a,i) 
      distributed txbj(b,kb) 
      served t1a_old(a,i1) 
      served t1b_old(b,j1) 
      distributed t1ai(a,i) 
      distributed t1bj(b,jb) 
#
# Declare temporary arrays 
#
      temp xa(a) 
      temp xb(b) 
      temp xai(a,i) 
      temp xbj(b,kb) 
      temp Pai(a,i) 
      temp Pbj(b,kb) 
      temp tpp(p,p1) 
      temp t1pp(p,p1) 
      temp tqp(q,p) 
      temp t1qp(q,p) 
      temp tqq(q,q1) 
      temp t1qq(q,q1) 
#
      temp tppp(p,p1,p2) 
      temp t1ppp(p,p1,p2) 
      temp t2ppp(p,p1,p2) 
      temp t4ppp(p,p1,p2) 
      temp t3ppp(p,p1,p2) 
      temp s3ppp(p,p1,p2) 
      temp t5ppp(p,p1,p2) 
      temp taaaiii(a,a1,a2,i,j,k) 
      temp t1aaaiii(a,a1,a2,i,j,k) 
#
      temp xppp(p,p1,p2) 
      temp x1ppp(p,p1,p2) 
      temp x2ppp(p,p1,p2) 
#
      temp t0pppp(p,p1,p2,k1) 
      temp tpppp(p,p1,p2,k1) 
      temp t1pppp(p,p1,p2,k1) 
      temp t2pppp(p,p1,p2,k1) 
      temp t3pppp(p,p1,p2,k1) 
      temp t4pppp(p,p1,p2,k1) 
      temp t5pppp(p,p1,p2,k1) 
#
      temp tppps(p,p1,p2,i) 
      temp t1ppps(p,p1,p2,i) 
      temp t2ppps(p,p1,p2,j) 
      temp t3ppps(p,p1,p2,k) 
      temp tpsps(p,j,p2,i) 
      temp t1psps(p,j,p2,i) 
      temp t2psps(p,j,p2,i) 
#
      temp tpsqq(a,i,b,j1) 
      temp t1psqq(a,j,b,j1) 
      temp t2psqq(a,i,j1,m1) 
      temp t3psqq(i1,i,b,m1)
      temp t4psqq(a,j,b,m1) 
      temp t5psqq(a,j,j1,m1) 
      temp t6psqq(i1,j,b,m1) 
#
      temp tpsqs(a,i,b,kb) 
      temp t1psqs(a,j,b,kb) 
#
      temp tqSqS(b,jb,b1,ib) 
      temp t1qSqS(b,jb,b1,ib) 
#
      temp tqqps(b,b1,a,i) 
      temp t1qqpi(b,b1,a,i) 
      temp tppqs(p,p1,q,kb) 
      temp t1ppqs(p,p1,q,kb) 
      temp tpqqs(p,q,q1,k)    
#
      temp tpqqj(a,b,b1,ib)
#
      temp tppq(p,p1,q) 
      temp t1ppq(p,p1,q) 
      temp t2ppq(p,p1,q) 
      temp t3ppq(p,p1,q) 
      temp t4ppq(p,p1,q) 
      temp t4qqp(q,q1,p,ib,jb,k) 

      temp tqqp(q,q1,p) 
      temp sqqp(q,q1,p) 
      temp t1qqp(q,q1,p) 
      temp t2qqp(q,q1,p) 
      temp t3qqp(q,q1,p) 
      temp tqpp(q,p,p1) 
      temp t1qpp(q,p,p1) 
      temp t2qpp(q,p,p1) 
      temp tqpq(q,p,q1)      
      temp t1qpq(q,p,q1)      
      temp tpqp(p,q,p1)  
      temp t1pqp(p,q,p1)  
      temp tpqq(p,q,q1)  
      temp t1pqq(p,q,q1)  
      temp t2pqq(p,q,q1)  
#
      temp tpppi(p,p1,p2,i) 
      temp tppii(p,p1,i,j) 
      temp tpipi(p,i,p1,j) 
      temp Y1pipi(p,i,p1,j) 
      temp Y2pipi(p,i,p1,j) 
      temp Y3pipi(p,i,p1,j) 
      temp Y4pipi(p,i,p1,j) 
      temp Y5pipi(p,i,p1,j) 
      temp Y6pipi(p,i,p1,j) 
      temp Y7pipi(p,i,p1,j) 
      temp Y8pipi(p,i,p1,j) 
      temp Y9pipi(p,i,p1,j) 
      temp t2pipi(p,i,p1,j) 
#
      temp t1pipi(p,i1,p1,i) 
      temp X1pipi(p,i1,p1,i) 
      temp X2pipi(p,i1,p1,i) 
      temp X3pipi(p,i1,p1,i) 
      temp X4pipi(p,i1,p1,i) 
      temp X5pipi(p,i1,p1,i) 
      temp X6pipi(p,i1,p1,i) 
      temp X7pipi(p,i1,p1,i) 
      temp X8pipi(p,i1,p1,i) 
      temp X9pipi(p,i1,p1,i) 
      temp t1ppii(p,p1,i1,i) 
      temp t2aiii(a,i1,j,i)   
#
      temp tppqj(p,p1,q,ib) 
      temp tqqpi(q,q1,p,i) 
      temp tqppj(b,a,a1,kb) 
#
      temp tqqjj(q,q1,ib,jb) 
      temp tqjqj(q,ib,q1,jb) 

      temp taab(a,a1,b1)
      temp t1aab(a,a1,b1)
      temp tbba(b,b1,a2)
      temp t1bba(b,b1,a2)
      temp tpi(p,i) 
      temp tpj(p,j) 
      temp tpk(p,k) 
      temp tqi(q,ib) 
      temp tqj(q,jb) 
      temp tqk(q,kb) 
      temp tpqpi(a,b,a1,i)
      temp tqpqj(b,a,b1,ib) 
      temp t1jaij(j1,a,j,kb) 
      
      temp taiaiai(a,i,a1,j,a2,k) 
#
# Arrays used in Tbbbjjj computation
#
      temp Tbbbjjj(b,b1,b2,ib,jb,kb) 
      temp tbjbjbj(b,ib,b1,jb,b2,kb)   
      temp t1bbbjjj(b,b1,b2,ib,jb,kb) 
      temp t2bbbjjj(b,b1,b2,jb,ib,kb) 
      temp t3bbbjjj(b,b1,b2,kb,jb,ib) 
      temp t4bbbjjj(b1,b,b2,ib,jb,kb) 
      temp t5bbbjjj(b2,b1,b,ib,jb,kb) 
      temp t6bbbjjj(b1,b,b2,jb,ib,kb) 
      temp t7bbbjjj(b1,b,b2,kb,jb,ib) 
      temp t8bbbjjj(b2,b1,b,jb,ib,kb) 
      temp t9bbbjjj(b2,b1,b,kb,jb,ib) 
      temp t2bjjj(b,j1,kb,jb)  
      temp t1qjqj(b1,j1,b2,ib) 
      temp X1qjqj(b1,j1,b2,ib) 
      temp X2qjqj(b1,j1,b2,ib) 
      temp X3qjqj(b1,j1,b2,ib) 
      temp X4qjqj(b1,j1,b2,ib) 
      temp X5qjqj(b1,j1,b2,ib) 
      temp X6qjqj(b1,j1,b2,ib) 
      temp X7qjqj(b1,j1,b2,ib) 
      temp X8qjqj(b1,j1,b2,ib) 
      temp X9qjqj(b1,j1,b2,ib) 
      temp t1qqjj(b1,b2,j1,ib)
#
# Arrays used in Taabiij computation
#
      temp Dabij(a,b1,j,kb)  
      temp P2aibj(a,j,b,kb) 
      temp P4aibj(a,j,b,kb) 
      temp P5aibj(a,j,b,kb) 
      temp P6aibj(a,j,b,kb) 
      temp P3aibj(a,i,b,jb) 
      temp Tpq(p,q) 
      temp T1pq(p,q) 
      temp tppqi(a,a1,b,i)
      temp tqppi(b,a,a1,i)   
      temp tpqqi(a,b1,b,k)   
      temp P1bbai(b,b1,a1,i) 
      temp t1aibj(a1,i,b,j1) 
      temp taijj(a,j,j1,kb) 
      temp t1ajij(a,j1,j,kb) 
      temp tabji(a1,b,j1,i) 
      temp t1ppqj(a1,a2,b,kb) 
      temp t2ppqj(a1,a2,b,kb) 
      temp taibj(a1,i,b,kb) 
      temp t4aibj(a1,i,b,kb) 
      temp t3aibj(a1,i1,b,kb) 
      temp tpiqj(i1,j,b,kb) 
      temp tbijj(b,i1,j,kb) 
#
      temp t1aabiij(a,a1,b,i,j,kb) 
      temp t2aabiij(a,a1,b,j,i,kb) 
      temp t3aabiij(a1,a,b,i,j,kb) 
      temp t4aabiij(a1,a,b,j,i,kb) 
      temp taiaibj(a,i,a1,j,b,kb) 
      temp taabjii(a,a1,b,kb,i,j) 
      temp t1aabjii(a,a1,b,kb,i,j) 
#
      temp Taabiij(a,a1,b,i,j,kb) 
      temp Tbaajii(b,a,a1,kb,i,j) 
#
# Arrays used in the Tbbajji computation. 
# --------------------------------------- 
#
      temp P1aibj(a,i,b1,ib) 
      temp P2iibj(i1,k,b,jb) 
      temp P1aabj(a,a2,b1,ib)
      temp P1bjbj(b,jb,b2,ib)
      temp P2bjbj(b,jb,b2,ib)
      temp P3bjbj(b,jb,b2,ib)
      temp P4bjbj(b,jb,b2,ib)
      temp P5bjbj(b,jb,b2,ib)
      temp P6bjbj(b,jb,b2,ib)
      temp P7bjbj(b,jb,b2,ib)
      temp P8bjbj(b,jb,b2,ib)
      temp P9bjbj(b,jb,b2,ib)
      temp P1bbbj(b,b2,b1,ib) 
      temp P2bjjj(b,jb,j1,ib) 
      temp P2aijj(a,k,j1,jb) 
#
      temp t2pqij(a2,b,k,jb) 
      temp tqqaj(b,b1,a,ib)  
      temp t2bbji(b,b2,jb,ib)
      temp tqqai(b,b1,a,k) 
      temp t2abij(a,b2,k,jb) 
      temp t2ajij(a,j1,k,jb) 
#
      temp t1bbajji(b,b1,a,ib,jb,k) 
      temp t2bbajji(b,b1,a,jb,ib,k) 
      temp t3bbajji(b1,b,a,ib,jb,k) 
      temp t4bbajji(b1,b,a,jb,ib,k) 
      temp tbjbjai(b,ib,b1,jb,a,k)
      temp tbbaijj(b,b1,a,k,ib,jb) 
      temp tbiji(b,i1,jb,k) 
      temp tbjjj(b,j1,jb,ib) 
#
      temp Tbbajji(b,b1,a,ib,jb,k) 
      temp tqqa(b,b1,a) 
#
# Arrays used in the sai computation 
# ----------------------------------- 
#
      temp P1aiai(a1,j,a2,k) 
      temp P2aiai(a1,j,a2,k) 
      temp P3aiai(a1,j,a2,k) 
      temp P4aiai(a1,j,a2,k) 
      temp P5aiai(a1,j,a2,k) 
      temp P6aiai(a1,j,a2,k) 
      temp P7aiai(a1,j,a2,k) 
      temp P8aiai(a1,j,a2,k) 
      temp P9aiai(a1,j,a2,k) 
      temp t1pppi(a,a1,a2,i) 
      temp t2ppii(a1,a2,j,k) 
#
      temp Tabbijj(a,b1,b2,i,jb,kb) 
      temp taibjbj(a,i,b1,jb,b2,kb) 
      temp t1abbijj(a,b1,b2,i,jb,kb) 
      temp t1pqqi(a,b1,b2,i) 
      temp t2qqjj(b1,b2,jb,kb) 
      temp t1ppqi(a,a1,b2,i) 
#
# Arrays used in the sbj computation 
# ----------------------------------- 
#
      temp t1qppj(b,a1,a,ib) 
      temp tqqpj(b,b1,a,ib) 
      temp tpqij(p,q,i,jb) 
      temp tqpij(q,p,k,jb) 
      temp tpqji(i1,b,jb,k) 
#
      temp t1baajii(b,a1,a,ib,j,k) 
#
# Distributed arrays to partially hold amplitudes 
# ------------------------------------------------ 
#
      distributed DaiaS(a,i1,a1) 
      distributed D1aiaS(a,i1,a1) 
      distributed D2aiaS(a,i1,a1,k1) 
#
      distributed DaSbj(a,b,j1) 
      distributed D1aSbj(a,b,j1) 
      distributed DaibS(a,i1,b,m1) 
#
      distributed Dab(b,a,m1) 
      static Sab(b,a) 
      distributed D1ab(a,b,m1) 
      static S1ab(b,a) 
      distributed D2ab(b,a,m1) 
      static S2ab(b,a) 
      distributed Daa(a,a1) 
      static Saa(a,a1) 
      distributed D1aa(a,a1,k1) 
      distributed D2aa(a,a1,k1) 
      distributed D2bb(b,b1) 
#
# Arrays used to form identity
# ----------------------------
#
      temp PIi(i,i1)
      served Sii(i2,i1)
      distributed IIi(i,i1)
      static tii(i1,i2)
      static t1ii(i1,i2)
#
      temp PJj(ib,j1)
      served Sjj(j2,j1)
      distributed IJj(ib,j1)
      static tjj(j1,j2)
      static t1jj(j1,j2)
#
# 'NEW' arrays 
# ------------- 
# 
      temp zpspp(a,i,a1,k1) 
      temp z1pspp(a,i,i1,k1) 
      temp zppps(a,k1,i1,i) 
      temp x3pspp(a,j,a1,k1)
      temp z2ppps(a,k1,i1,j)
      distributed D3ijk(a,a1,a2,k1)
      distributed DD3ijk(a,a1,a2,k1)
      temp s3pppp(a,a1,a2,k1)  
      temp taaaoii(a,a1,a2,k1,i,j)  
      temp xpspp(a1,j,a2,k1)
      temp x2pspp(a,i,a2,k1)
     #distributed XbbaI(b,b1,a,pp) 
     #served YbbaI(b,b1,a,k) 
      temp tqpqs(q,p,q1,i)   
      temp tppqq(p,p1,q,q1) 
      temp t1ppqq(p,p1,q,q1) 
      temp t2ppqq(p,p1,q,q1) 
      temp t3ppqq(p,p1,q,q1) 
      temp tqppq(q,p,p1,q1)     
      temp t1qppq(q,p,p1,q1)     
      temp Tbaaoij(b,a,a1,m1,i,j)  
      temp t7psqq(a1,j,b,m1) 
      temp t8psqq(a,i,b,m1)
      temp t2pqqs(a1,b,m1,j) 
#
# Declare scalars 
#
      scalar fact 
      scalar etemp 
      scalar etemp1
      scalar etemp2
      scalar etemp3
      scalar etemp4
      scalar etemp5
      scalar etempa
      scalar esum 
      scalar esum1
      scalar esum2
      scalar esum3
      scalar esum4
      scalar esum5
      scalar esum6
      scalar esuma  
      scalar ecorrT 
      scalar ecorraaa 
      scalar ecorraab 
      scalar ecorrbba 
      scalar ecorrbbb 
      scalar ecorrsa 
      scalar ecorrsb 
#
# --------------------------------------------------------------------------
#
     PROC READ_BLOCKDATA  
#    -------------------  
#
#   Read BLOCKDATA file.
#
      execute sip_barrier
      execute server_barrier
      execute list_to_blocks                VSpipi(p,i1,p1,i2)
      execute list_to_blocks                Vaaii
      execute list_to_blocks                Viaai
      execute list_to_blocks                VSaaai
      execute list_to_blocks                VSqjqj(q,j1,q1,j2)
      execute list_to_blocks                Vbbjj
      execute list_to_blocks                Vjbbj
      execute list_to_blocks                VSbbbj
      execute list_to_blocks                Vbbii
      execute list_to_blocks                Vjbii
      execute list_to_blocks                Vbbai
      execute list_to_blocks                Vpiqj(p,i1,q,j2)
      execute list_to_blocks                Vaajj
      execute list_to_blocks                Viabj
      execute list_to_blocks                Vaabj

      execute list_to_blocks                t1a_old
      execute list_to_blocks                t1b_old
      execute list_to_blocks                T2aiai
      execute list_to_blocks                T2aibj
      execute list_to_blocks                T2bjbj
#
      execute read_list_to_blocks  
      execute server_barrier
      execute sip_barrier
#
      etemp = 0.0 
      etemp1= 0.0 
      etemp2= 0.0 
      etemp3= 0.0 
      etemp4= 0.0 
      etemp5= 0.0 
      esuma = 0.0
      esum  = 0.0 
      esum1 = 0.0 
      esum2 = 0.0 
      esum3 = 0.0 
      esum4 = 0.0 
      esum5 = 0.0 
      esum6 = 0.0 
#
     ENDPROC READ_BLOCKDATA  
#    ----------------------  
#
# --------------------------------------------------------------------------
#
     PROC PDATA  
#    ---------- 
#
#    Put the vOoO integrals into a distributed array 
#    ----------------------------------------------- 
#
     create t1ai 
     create t1bj 
     execute sip_barrier 
#
#    PREPARE Vaaai type arrays into XaaaI ones 
#    ----------------------------------------- 
#
     IF subb > 0 
     IF sube > 0 
        CREATE XSaaaI#(*,*,*,I) 
        CREATE XaabJ #(*,*,*,I)    
        CREATE XbbaI 
     ENDIF 
     ENDIF 
     execute sip_barrier 
#
     PARDO k, a, a1, a2 
           tppps(a,a1,a2,k) = 0.0
           DO i1
              REQUEST             VSaaai(a,a1,a2,i1) a
              GET                 IIi(k,i1)
              t1pppi(a,a1,a2,k) = VSaaai(a,a1,a2,i1)*IIi(k,i1)
              tppps(a,a1,a2,k) += t1pppi(a,a1,a2,k)
           ENDDO i1
#
           IF k >= subb  
           IF k <= sube  
              PUT     XSaaaI(a,a1,a2,k) = tppps(a,a1,a2,k)
           ENDIF 
           ENDIF 
           IF k < subb  
              PREPARE YSaaaI(a,a1,a2,k) = tppps(a,a1,a2,k) 
           ENDIF 
           IF k > sube  
              PREPARE YSaaaI(a,a1,a2,k) = tppps(a,a1,a2,k) 
           ENDIF 
     ENDPARDO k, a, a1, a2 
#
     PARDO k, b, b1, a
           tqqps(b,b1,a,k) = 0.0
           DO i1
              REQUEST            Vbbai(b,b1,a,i1) a
              GET                IIi(k,i1)
              t1qqpi(b,b1,a,k) = Vbbai(b,b1,a,i1)*IIi(k,i1)
              tqqps(b,b1,a,k) += t1qqpi(b,b1,a,k)
           ENDDO i1
           IF k >= subb
           IF k <= sube
              PUT XbbaI(b,b1,a,k) = tqqps(b,b1,a,k)
           ENDIF
           ENDIF
           IF k < subb
              PREPARE YbbaI(b,b1,a,k) = tqqps(b,b1,a,k)
           ENDIF
           IF k > sube
              PREPARE YbbaI(b,b1,a,k) = tqqps(b,b1,a,k)
           ENDIF
     ENDPARDO k, b, b1, a
#
     PARDO kb, a, a1, b 
           tppqs(a,a1,b,kb) = 0.0
           DO j1
              REQUEST            Vaabj(a,a1,b,j1) b
              GET                IJj(kb,j1)
              t1ppqj(a,a1,b,kb)= Vaabj(a,a1,b,j1)*IJj(kb,j1)
              tppqs(a,a1,b,kb)+= t1ppqj(a,a1,b,kb)
           ENDDO j1
#
           IF kb >= subb  
           IF kb <= sube  
              PUT XaabJ(a,a1,b,kb) = tppqs(a,a1,b,kb)
           ENDIF 
           ENDIF 
           IF kb < subb  
              PREPARE YaabJ(a,a1,b,kb) = tppqs(a,a1,b,kb) 
           ENDIF 
           IF kb > sube  
              PREPARE YaabJ(a,a1,b,kb) = tppqs(a,a1,b,kb) 
           ENDIF 
     ENDPARDO kb, a, a1, b 
#
#    Put the singles amplitudes into a distributed array t1aI/t1bJ 
#    ------------------------------------------------------------- 
#
     PARDO a, i 
           PREQUEST tpi(a,i) = t1a_old(a,i1)  
           PUT t1ai(a,i)     = tpi(a,i) 
     ENDPARDO a, i 
#
     execute sip_barrier 
     execute server_barrier 
#
# --------------------------------------------------------------------------
#
     ENDPROC PDATA  
#    ------------- 
#
# --------------------------------------------------------------------------
#
# --------------------------------------------------------------------------
#
     PROC T4AAA 
#    ---------- 
#
     create DaiaS
     create Daa
     create D1aiaS
     create Paaai
     create Paaaj
     create D2aiaS
     create D1aa
     create D2aa
     create Y3ijk
#
     create XSai_ij
     create XSai_ik
     create XSai_ki
     create XSai_kj
#
     create Dai
     create S3 
#
     esum1 = 0.0
     execute sip_barrier
#
     PARDO k1, a, a1, i1
           REQUEST                  T2aiai(a,i1,a1,k1) a
           PUT D2aiaS(a,i1,a1,k1) = T2aiai(a,i1,a1,k1)
     ENDPARDO k1, a, a1, i1
#
     DO i # segment size of 1
#
        IF i >= itrips
        IF i <= itripe 
#
        execute sip_barrier
        execute server_barrier
#
        PARDO a, a1, a2
              IF i >= subb
              IF i <= sube
                 GET                  XSaaai(a,a1,a2,i)
                 tppp(a,a1,a2)      = XSaaai(a,a1,a2,i)
              ENDIF
              ENDIF
              IF i < subb
                 REQUEST              YSaaai(a,a1,a2,i) a
                 tppp(a,a1,a2)      = YSaaai(a,a1,a2,i)
              ENDIF
              IF i > sube
                 REQUEST              YSaaai(a,a1,a2,i) a
                 tppp(a,a1,a2)      = YSaaai(a,a1,a2,i)
              ENDIF
              PUT Paaai(a,a1,a2) = tppp(a,a1,a2)
        ENDPARDO a, a1, a2
#
        PARDO a, a1, i1
              PREQUEST t1ppps(a,i1,a1,i) = T2aiai(a,i1,a1,i2)
              t1ppp(a,i1,a1)             = t1ppps(a,i1,a1,i)
              PUT DaiaS(a,i1,a1)         = t1ppp(a,i1,a1)
        ENDPARDO a, a1, i1
#
        PARDO k1, a, a1
              PREQUEST zpspp(a,i,a1,k1) = T2aiai(a,i1,a1,k1)
              tppps(a,a1,k1,i)           = zpspp(a,i,a1,k1)
              tppp(a,a1,k1)              = tppps(a,a1,k1,i)
              t1ppp(a1,a,k1)             = tppp(a,a1,k1)
              PUT D1aa(a1,a,k1)          = t1ppp(a1,a,k1)
        ENDPARDO k1, a, a1
#
        PARDO k1, a, i1
              PREQUEST z1pspp(a,i,i1,k1) = VSpipi(a,i2,i1,k1)
              Tppps(a,i1,k1,i)           = z1pspp(a,i,i1,k1)
              tppp(a,i1,k1)              = Tppps(a,i1,k1,i)
              t1ppp(i1,a,k1)             = tppp(a,i1,k1)
              PUT XSaI_ik(i1,a,k1)       = t1ppp(i1,a,k1)
        ENDPARDO k1, a, i1
#
        PARDO k1, a, i1
              PREQUEST zppps(a,k1,i1,i) = VSpipi(a,k1,i1,i3)
              Tppps(a,i1,k1,i)          = zppps(a,k1,i1,i)
              tppp(a,i1,k1)              = Tppps(a,i1,k1,i)
              t1ppp(i1,a,k1)             = tppp(a,i1,k1)
              PUT XSaI_ki(i1,a,k1)       = t1ppp(i1,a,k1)
        ENDPARDO k1, a, i1
#
        DO j # segment size of 1
#
        IF j >= i
#
        execute server_barrier
#
        PARDO a, a1, a2
              IF j >= subb
              IF j <= sube
                 GET                  XSaaai(a,a1,a2,j)
                 tppp(a,a1,a2)      = XSaaai(a,a1,a2,j)
              ENDIF
              ENDIF
              IF j < subb
                 REQUEST              YSaaai(a,a1,a2,j) a
                 tppp(a,a1,a2)      = YSaaai(a,a1,a2,j)
              ENDIF
              IF j > sube
                 REQUEST              YSaaai(a,a1,a2,j) a
                 tppp(a,a1,a2)      = YSaaai(a,a1,a2,j)
              ENDIF
              PUT Paaaj(a,a1,a2) = tppp(a,a1,a2)
        ENDPARDO a, a1, a2
#
        PARDO a, a1
              PREQUEST tpsps(a,j,a1,i) = T2aiai(a,i1,a1,i2)
              tppii(a,a1,j,i)          = tpsps(a,j,a1,i)
              tpp(a,a1)                = tppii(a,a1,j,i)
              t1pp(a1,a)               = tpp(a,a1)
              PUT Daa(a1,a)            = t1pp(a1,a)
        ENDPARDO a, a1
#
        PARDO a, a1, i1
              PREQUEST t2ppps(a,i1,a1,j) = T2aiai(a,i1,a1,i2)
              t2ppp(a,i1,a1)             = t2ppps(a,i1,a1,j)
              PUT D1aiaS(a,i1,a1)        = t2ppp(a,i1,a1)
        ENDPARDO a, a1, i1
#
#       Put 'slices' of VSpipi(a,i2,i1,i3) into 2-d arrays
#       --------------------------------------------------
#
        PARDO a, i1
              PREQUEST PaIiI(a,i,i1,j) = VSpipi(a,i2,i1,i3)
              Tppii(a,i1,i,j)          = Paiii(a,i,i1,j)
              tpp(a,i1)                = Tppii(a,i1,i,j)
              t1pp(i1,a)               = tpp(a,i1)
              PUT XSaI_ij(i1,a)        = t1pp(i1,a)
        ENDPARDO a, i1
#
           PARDO k1, a, a1
                 PREQUEST x3pspp(a,j,a1,k1) = T2aiai(a,i1,a1,k1)
                 tppps(a,a1,k1,j)           = x3pspp(a,j,a1,k1)
                 tppp(a,a1,k1)              = tppps(a,a1,k1,j)
                 t1ppp(a1,a,k1)             = tppp(a,a1,k1)
                 PUT D2aa(a1,a,k1)          = t1ppp(a1,a,k1)
           ENDPARDO k1, a, a1
#
#          Put 'slices' of VSpipi(a,i2,i1,i3) into 2-d arrays
#          --------------------------------------------------
#
           PARDO k1, a, i1
                 PREQUEST z2ppps(a,k1,i1,j) = VSpipi(a,k1,i1,i3)
                 Tppps(a,i1,k1,j)          = z2ppps(a,k1,i1,j)
                 tppp(a,i1,k1)              = Tppps(a,i1,k1,j)
                 t1ppp(i1,a,k1)             = tppp(a,i1,k1)
                 PUT XSaI_kj(i1,a,k1)       = t1ppp(i1,a,k1)
           ENDPARDO k1, a, i1
#
           execute sip_barrier
           execute server_barrier
#
#          Compute contributions to amplitude array
#          ----------------------------------------
#
           PARDO k1, a1, a2
#
                 IF a1 <= a2
#
                    allocate L3aaa(*,a1,a2,k1)
#
                    DO a3
#
                       REQUEST               VSaaai(a1,a3,a2,k1) k1
                       GET                   Paaaj(a1,a3,a2)
                       GET                   Paaai(a1,a3,a2)
                       t0pppp(a3,a1,a2,k1) = VSaaai(a1,a3,a2,k1)
                       tppp(a3,a1,a2)      = Paaaj(a1,a3,a2)
                       t2ppp(a3,a1,a2)     = Paaai(a1,a3,a2)
#
                       DO a
#
                          IF a <= a1
#
                             GET                   D1aa(a3,a,k1)
                             GET                   D2aa(a3,a,k1)
                             GET                   Daa(a3,a)
#
                             tpppp(a,a1,a2,k1)   = t2ppp(a3,a1,a2)*D2aa(a3,a,k1)
                             t1pppp(a,a1,a2,k1)  = tppp(a3,a1,a2)*D1aa(a3,a,k1)
                             tpppp(a,a1,a2,k1)  -= t1pppp(a,a1,a2,k1)
                             t2pppp(a,a1,a2,k1)  = t0pppp(a3,a1,a2,k1)*Daa(a3,a)
                             tpppp(a,a1,a2,k1)  -= t2pppp(a,a1,a2,k1)
#
                             L3aaa(a,a1,a2,k1)  += tpppp(a,a1,a2,k1)
#
                          ENDIF
#
                       ENDDO a
#
                    ENDDO a3
#
                    DO a
                       IF a <= a1
                          tpppp(a,a1,a2,k1)          = L3aaa(a,a1,a2,k1)
                          PREPARE S3ijk(a,a1,a2,k1) += tpppp(a,a1,a2,k1)
                       ENDIF
                    ENDDO a
                    deallocate L3aaa(*,a1,a2,k1)
#
                 ENDIF
#
           ENDPARDO k1, a1, a2
#
           PARDO k1, a, a2
#
                 allocate L3aaa(a,*,a2,k1)
#
                 DO a3
#
                    REQUEST VSaaai(a,a3,a2,k1) k1
                    GET     Paaai(a,a3,a2)
                    GET     Paaaj(a,a3,a2)
#
                    DO a1
#
                       IF a <= a1
                       IF a1 <= a2
#
                          GET                  Daa(a3,a1)
                          GET                  D1aa(a3,a1,k1)
                          GET                  D2aa(a3,a1,k1)
#
                          tpppp(a,a1,a2,k1)  = VSaaai(a,a3,a2,k1)*Daa(a3,a1)
                          t1pppp(a,a1,a2,k1) = Paaaj(a,a3,a2)*D1aa(a3,a1,k1)
                          tpppp(a,a1,a2,k1) += t1pppp(a,a1,a2,k1)
                          t2pppp(a,a1,a2,k1) = Paaai(a,a3,a2)*D2aa(a3,a1,k1)
                          tpppp(a,a1,a2,k1) -= t2pppp(a,a1,a2,k1)
#
                          L3aaa(a,a1,a2,k1) += tpppp(a,a1,a2,k1)
#
                       ENDIF
                       ENDIF
#
                    ENDDO a1
#
                 ENDDO a3
#
                 DO a1
                    IF a <= a1
                       tpppp(a,a1,a2,k1)          = L3aaa(a,a1,a2,k1)
                       PREPARE S3ijk(a,a1,a2,k1) += tpppp(a,a1,a2,k1)
                    ENDIF
                 ENDDO a1
#
                 deallocate L3aaa(a,*,a2,k1)
#
           ENDPARDO k1, a, a2
#
           PARDO k1, a, a1
#
                 IF a <= a1
#
                    allocate L3aaa(a,a1,*,k1)
#
                    DO a3
#
                       REQUEST              VSaaai(a1,a3,a,k1) k1
                       GET                  Paaaj(a1,a3,a)
                       GET                  Paaai(a1,a3,a)
                       t0pppp(a,a1,a3,k1) = VSaaai(a1,a3,a,k1)
                       tppp(a,a1,a3)      = Paaaj(a1,a3,a)
                       t2ppp(a,a1,a3)     = Paaai(a1,a3,a)
#
                       DO a2
#
                          IF a1 <= a2
#
                             GET                   D1aa(a3,a2,k1)
                             GET                   D2aa(a3,a2,k1)
                             GET                   Daa(a3,a2)
#
                             tpppp(a,a1,a2,k1)    = tppp(a,a1,a3)*D1aa(a3,a2,k1)
                             t1pppp(a,a1,a2,k1)   = t0pppp(a,a1,a3,k1)*Daa(a3,a2)
                             tpppp(a,a1,a2,k1)   += t1pppp(a,a1,a2,k1)
                             t2pppp(a,a1,a2,k1)   = t2ppp(a,a1,a3)*D2aa(a3,a2,k1)
                             tpppp(a,a1,a2,k1)   -= t2pppp(a,a1,a2,k1)
#
                             L3aaa(a,a1,a2,k1)   += tpppp(a,a1,a2,k1)
#
                          ENDIF
#
                       ENDDO a2
#
                    ENDDO a3
#
                    DO a2
                       IF a <= a1
                          tpppp(a,a1,a2,k1)          = L3aaa(a,a1,a2,k1)
                          PREPARE S3ijk(a,a1,a2,k1) += tpppp(a,a1,a2,k1)
                       ENDIF
                    ENDDO a2
#
                    deallocate L3aaa(a,a1,*,k1)
#
                 ENDIF
#
#
           ENDPARDO k1, a, a1
#
# End contributions from terms containing Paaai
# ---------------------------------------------
#
           PARDO k1, a1, a2
#
                 IF a1 <= a2
#
                    allocate L3aaa(*,a1,a2,k1)
#
                    DO i1
#
                       GET                   DaiaS(a1,i1,a2)
                       GET                   D1aiaS(a1,i1,a2)
                       GET                   D2aiaS(a1,i1,a2,k1)
                       tppp(i1,a1,a2)      = DaiaS(a1,i1,a2)
                       t1ppp(i1,a1,a2)     = D1aiaS(a1,i1,a2)
                       t0pppp(i1,a1,a2,k1) = D2aiaS(a1,i1,a2,k1)
#
                       DO a
#
                          IF a <= a1
#
                             GET                  XSai_kj(i1,a,k1)
                             GET                  XSai_ki(i1,a,k1)
                             GET                  XSai_ij(i1,a)
#
                             tpppp(a,a1,a2,k1)  = tppp(i1,a1,a2)*XSai_kj(i1,a,k1)
                             t1pppp(a,a1,a2,k1) = t1ppp(i1,a1,a2)*XSai_ki(i1,a,k1)
                             t2pppp(a,a1,a2,k1) = t0pppp(i1,a1,a2,k1)*XSai_ij(i1,a)
                             tpppp(a,a1,a2,k1) -= t1pppp(a,a1,a2,k1)
                             tpppp(a,a1,a2,k1) -= t2pppp(a,a1,a2,k1)
                             L3aaa(a,a1,a2,k1) += tpppp(a,a1,a2,k1)
#
                          ENDIF
#
                        ENDDO a
#
                    ENDDO i1
#
                    DO a
                       IF a <= a1
                          tpppp(a,a1,a2,k1)          = L3aaa(a,a1,a2,k1)
                          PREPARE S3ijk(a,a1,a2,k1) += tpppp(a,a1,a2,k1)
                       ENDIF
                    ENDDO a
#
                    deallocate L3aaa(*,a1,a2,k1)
#
                 ENDIF
#
           ENDPARDO k1, a1, a2
#
           PARDO k1, a, a2
#
                 allocate L3aaa(a,*,a2,k1)
#
                 DO i1
#
                    GET DaiaS(a,i1,a2)
                    GET D1aiaS(a,i1,a2)
                    GET D2aiaS(a,i1,a2,k1)
#
                    DO a1
#
                       IF a <= a1
                       IF a1 <= a2
#
                          GET                   XSai_kj(i1,a1,k1)
                          GET                   XSai_ki(i1,a1,k1)
                          GET                   XSai_ij(i1,a1)
#
                          tpppp(a,a1,a2,k1)   = DaiaS(a,i1,a2)*XSai_kj(i1,a1,k1)
                          t1pppp(a,a1,a2,k1)  = D1aiaS(a,i1,a2)*XSai_ki(i1,a1,k1)
                          t2pppp(a,a1,a2,k1)  = D2aiaS(a,i1,a2,k1)*XSai_ij(i1,a1)
                          t2pppp(a,a1,a2,k1) += t1pppp(a,a1,a2,k1)
                          t2pppp(a,a1,a2,k1) -= tpppp(a,a1,a2,k1)
#
                          L3aaa(a,a1,a2,k1)  += t2pppp(a,a1,a2,k1)
#
                       ENDIF
                       ENDIF
#
                    ENDDO a1
#
                 ENDDO i1
#
                 DO a1
                    IF a <= a1
                       tpppp(a,a1,a2,k1)          = L3aaa(a,a1,a2,k1)
                       PREPARE S3ijk(a,a1,a2,k1) += tpppp(a,a1,a2,k1)
                    ENDIF
                 ENDDO a1
#
                 deallocate L3aaa(*,a1,a2,k1)
#
           ENDPARDO k1, a, a2
#
           PARDO k1, a, a1
#
                 IF a <= a1
#
                 allocate L3aaa(a,a1,*,k1)
#
                 DO i1
#
                    GET                  DaiaS(a1,i1,a)
                    GET                  D1aiaS(a1,i1,a)
                    GET                  D2aiaS(a1,i1,a,k1)
                    tppp(a,a1,i1)      = DaiaS(a1,i1,a)
                    t1ppp(a,a1,i1)     = D1aiaS(a1,i1,a)
                    t0pppp(a,a1,i1,k1) = D2aiaS(a1,i1,a,k1)
#
                    DO a2
#
                       IF a1 <= a2
#
                          GET                   XSai_kj(i1,a2,k1)
                          GET                   XSai_ki(i1,a2,k1)
                          GET                   XSai_ij(i1,a2)
#
                          tpppp(a,a1,a2,k1)   = tppp(a,a1,i1)*XSai_kj(i1,a2,k1)
                          t1pppp(a,a1,a2,k1)  = t1ppp(a,a1,i1)*XSai_ki(i1,a2,k1)
                          t2pppp(a,a1,a2,k1)  = t0pppp(a,a1,i1,k1)*XSai_ij(i1,a2)
                          t2pppp(a,a1,a2,k1) += t1pppp(a,a1,a2,k1)
                          t2pppp(a,a1,a2,k1) -= tpppp(a,a1,a2,k1)
#
                          L3aaa(a,a1,a2,k1) += t2pppp(a,a1,a2,k1)
#
                       ENDIF
#
                    ENDDO a2
#
                 ENDDO i1
#
                 DO a2
                    IF a <= a1
                       tpppp(a,a1,a2,k1)          = L3aaa(a,a1,a2,k1)
                       PREPARE S3ijk(a,a1,a2,k1) += tpppp(a,a1,a2,k1)
                    ENDIF
                 ENDDO a2
#
                 deallocate L3aaa(a,a1,*,k1)
#
                 ENDIF
#
           ENDPARDO k1, a, a1
#
          #execute sip_barrier
           execute server_barrier # VFL
#
# Create the S3 array for the s_1 computetion(perm 3)
# ---------------------------------------------------
#
        PARDO a, a1
#
              PREQUEST P3aiai(a1,j,a,i) = VSpipi(a1,i3,a,i2)
              t2ppii(a1,a,j,i)          = P3aiai(a1,j,a,i)
              tpp(a1,a)                 = t2ppii(a1,a,j,i)
              PUT S3(a1,a)              = tpp(a1,a)
#
        ENDPARDO a, a1 
#
# Antisymmetrize the amplitude array
# ----------------------------------
#
        DO k1
#
           create D3ijk(*,*,*,k1)
           create DD3ijk(*,*,*,k1)
           execute sip_barrier
#
           PARDO a, a1, a2
#
                 IF a <= a1
                 IF a1 <= a2
#
#                   Complete and symmetrize distributed array
#                   -----------------------------------------
#
                    REQUEST                   S3ijk(a,a1,a2,k1) a
                    s3pppp(a,a1,a2,k1)      = S3ijk(a,a1,a2,k1)
#
                    t1pppp(a1,a,a2,k1)      = s3pppp(a,a1,a2,k1)
                    t2pppp(a2,a1,a,k1)      = s3pppp(a,a1,a2,k1)
                    t3pppp(a,a2,a1,k1)      = s3pppp(a,a1,a2,k1)
                    t4pppp(a1,a2,a,k1)      = s3pppp(a,a1,a2,k1)
                    t5pppp(a2,a,a1,k1)      = s3pppp(a,a1,a2,k1)
                    t1pppp(a1,a,a2,k1)     *= -1.0
                    t2pppp(a2,a1,a,k1)     *= -1.0
                    t3pppp(a,a2,a1,k1)     *= -1.0

                    PUT D3ijk(a,a1,a2,k1) = s3pppp(a,a1,a2,k1)
                    PUT D3ijk(a1,a,a2,k1) = t1pppp(a1,a,a2,k1)
                    PUT D3ijk(a2,a1,a,k1) = t2pppp(a2,a1,a,k1)
                    PUT D3ijk(a,a2,a1,k1) = t3pppp(a,a2,a1,k1)
                    PUT D3ijk(a1,a2,a,k1) = t4pppp(a1,a2,a,k1)
                    PUT D3ijk(a2,a,a1,k1) = t5pppp(a2,a,a1,k1)
#
                 ENDIF
                 ENDIF
#
           ENDPARDO a, a1, a2
#
           execute sip_barrier # VFL
           execute server_barrier # VFL 
#
# Compute the contribution to energy and one-particle intermediates
# -----------------------------------------------------------------
#
           PARDO a, a1, a2
#
                 GET                         D3ijk(a,a1,a2,k1)
                 taaaoii(a,a1,a2,k1,i,j)    = D3ijk(a,a1,a2,k1)
                 execute energy_tdenominator taaaoii(a,a1,a2,k1,i,j)
#
# Form contribution to the energy
# -------------------------------
#
                 t1pppp(a,a1,a2,k1)    = taaaoii(a,a1,a2,k1,i,j)
                 etemp                 = D3ijk(a,a1,a2,k1)*t1pppp(a,a1,a2,k1)
                 etemp                 = etemp/18.0
                 esum1                += etemp
#
                 PUT DD3ijk(a,a1,a2,k1) = t1pppp(a,a1,a2,k1)
#
           ENDPARDO a, a1, a2
#
           execute sip_barrier # VFL
#
# Form Contribution to Sai
# ------------------------
#
# Perm 1
# -------
#
           PARDO a1, a2
#
                 PREQUEST xpspp(a1,j,a2,k1) = VSpipi(a1,i1,a2,k1)
                 t2ppps(a1,a2,k1,j)         = xpspp(a1,j,a2,k1)
                 tppp(a1,a2,k1)             = t2ppps(a1,a2,k1,j)
                 tppps(a1,a2,k1,i)          = tppp(a1,a2,k1)
#
                 DO a
#
                    GET                         DD3ijk(a,a1,a2,k1)
                    xai(a,i)                  = DD3ijk(a,a1,a2,k1)*tppps(a1,a2,k1,i)
                    xai(a,i)                 *= 0.6666666666666666666666667
                    PUT sai(a,i)             += xai(a,i)
#
                 ENDDO a
#
           ENDPARDO a1, a2
#
# Perm 2
# -------
#
           PARDO a, a2
#
                 PREQUEST x2pspp(a,i,a2,k1) = VSpipi(a,i1,a2,k1)
                 t2ppps(a,a2,k1,i)          = x2pspp(a,i,a2,k1)
                 tppp(a,a2,k1)              = t2ppps(a,a2,k1,i)
                 tppps(a,a2,k1,j)           = tppp(a,a2,k1)
#
                 DO a1
#
                    GET                         DD3ijk(a,a1,a2,k1)
                   #t1pppp(a1,a,a2,k1)        = tpppp(a,a1,a2,k1)
                    xai(a1,j)                 = DD3ijk(a,a1,a2,k1)*tppps(a,a2,k1,j) # VFL
                    xai(a1,j)                *= 0.6666666666666666666666667
                    PUT sai(a1,j)            += xai(a1,j)
#
                 ENDDO a1
#
           ENDPARDO a, a2
#
# Perm 3
# -------
#
           PARDO a2, a1, a
#
                 GET                  DD3ijk(a,a1,a2,k1)
                 GET                  S3(a1,a)
                #t1pppp(a2,k1,a1,a) = DD3ijk(a,a1,a2,k1) # VFL
                 t1pp(a2,k1)        = DD3ijk(a,a1,a2,k1)*S3(a1,a) # VFL
                 t1pp(a2,k1)       *= 0.6666666666666666666666667
                 PUT Dai(a2,k1)    += t1pp(a2,k1)
#
                 t2pppp(a,a1,a2,k1)        = 0.0
                 PREPARE S3ijk(a,a1,a2,k1) = t2pppp(a,a1,a2,k1)
#
           ENDPARDO a2, a1, a 
# 
           execute sip_barrier # VFL
           execute server_barrier
           delete D3ijk(*,*,*,k1)
           delete DD3ijk(*,*,*,k1)
#
        ENDDO k1
#
        ENDIF # i>=j
        ENDDO j # segment size of 1
#
        ENDIF # i <= itripe
        ENDIF # i >= itrips 
#
     ENDDO i # segment size of 1
#
#    DONE alpha/alpha/alpha/ block.
#    ------------------------------
#
     execute sip_barrier
     collective ecorraaa += esum1
     execute print_scalar ecorraaa
#
     delete Y3ijk
#
     delete DaiaS
     delete Daa
     delete D1aiaS
     delete D2aiaS
     delete D1aa
     delete D2aa
#
     delete XSai_ij
     delete XSai_ik
     delete XSai_ki
     delete XSai_kj
     execute sip_barrier
     execute sip_barrier
     execute server_barrier
#
     ENDPROC T4AAA 
#    ------------- 
#
# --------------------------------------------------------------------------
#
# --------------------------------------------------------------------------
#
     PROC T4AAB 
#    ---------- 
#
     create DaiaS
     create DaSbj
     create Dab
     create DaibS
     create Pbbai
     create Pbbaj
    #create Paaai
    #create Paaaj
     create Daa
     create D1ab
     create D2ab
     create D1aiaS
     create D1aSbj
#
     create XSai_ji
     create XaI_ik
     create XaI_jk
     create XiI_ik
     create XiI_jk
#
    #create Dai
     create Dbj 
    #create S3
#
     execute sip_barrier
     esum2 = 0.0
     execute sip_barrier
#
#    alpha/alpha/beta/ block.
#    ------------------------
#
     PARDO m1, a, b, i2
           REQUEST                T2aibj(a,i2,b,m1) a
           PUT DaibS(a,i2,b,m1) = T2aibj(a,i2,b,m1)
     ENDPARDO m1, a, b, i2
#
     DO i # segment size of 1
#
        IF i >= itrips
        IF i <= itripe 
#
        execute sip_barrier
        execute server_barrier
#
        PARDO a, a1, a2
              IF i >= subb
              IF i <= sube
                 GET                  XSaaai(a,a1,a2,i)
                 tppp(a,a1,a2)      = XSaaai(a,a1,a2,i)
              ENDIF
              ENDIF
              IF i < subb
                 REQUEST              YSaaai(a,a1,a2,i) a
                 tppp(a,a1,a2)      = YSaaai(a,a1,a2,i)
              ENDIF
              IF i > sube
                 REQUEST              YSaaai(a,a1,a2,i) a
                 tppp(a,a1,a2)      = YSaaai(a,a1,a2,i)
              ENDIF
              PUT Paaai(a,a1,a2) = tppp(a,a1,a2)
        ENDPARDO a, a1, a2
#
        PARDO b, b1, a
              IF i >= subb
              IF i <= sube
                 GET                 Xbbai(b,b1,a,i)
                 tqqp(b,b1,a)      = Xbbai(b,b1,a,i)
              ENDIF
              ENDIF
              IF i < subb
                 REQUEST             Ybbai(b,b1,a,i) a
                 tqqp(b,b1,a)      = Ybbai(b,b1,a,i)
              ENDIF
              IF i > sube
                 REQUEST             Ybbai(b,b1,a,i) a
                 tqqp(b,b1,a)      = Ybbai(b,b1,a,i)
              ENDIF
              PUT Pbbai(b,b1,a) = tqqp(b,b1,a)
        ENDPARDO b, b1, a
#
        PARDO a, a1, i1
              PREQUEST t1ppps(a,i1,a1,i) = T2aiai(a,i1,a1,i2)
              t1ppp(a,i1,a1)             = t1ppps(a,i1,a1,i)
              PUT DaiaS(a,i1,a1)         = t1ppp(a,i1,a1)
        ENDPARDO a, a1, i1
#
        PARDO a, b, j1
              PREQUEST tpsqq(a,i,b,j1) = T2aibj(a,i1,b,j1)
              tabji(a,b,j1,i)          = tpsqq(a,i,b,j1)
              tpqq(a,b,j1)             = tabji(a,b,j1,i)
              PUT DaSbj(a,b,j1)        = tpqq(a,b,j1)
        ENDPARDO a, b, j1
#
        PARDO m1, a, b
              PREQUEST t1psqq(a,i,b,m1) = T2aibj(a,i1,b,m1)
              tqpqs(b,a,m1,i)           = t1psqq(a,i,b,m1)
              tqpq(b,a,m1)              = tqpqs(b,a,m1,i)
              PUT Dab(b,a,m1)           = tqpq(b,a,m1)
        ENDPARDO m1, a, b
#
        PARDO m1, a, j1
              PREQUEST t2psqq(a,i,j1,m1) = Vpiqj(a,i2,j1,m1)
              tqpqs(j1,a,m1,i)          = t2psqq(a,i,j1,m1)
              tqpq(j1,a,m1)             = tqpqs(j1,a,m1,i)
              PUT XaI_ik(j1,a,m1)       = tqpq(j1,a,m1)
        ENDPARDO m1, a, j1
#
        PARDO m1, b, i1
              PREQUEST t3psqq(i1,i,b,m1) = Vpiqj(i1,i2,b,m1)
              tpqqs(i1,b,m1,i)          = t3psqq(i1,i,b,m1)
              tpqq(i1,b,m1)             = tpqqs(i1,b,m1,i)
              PUT XiI_ik(i1,b,m1)       = tpqq(i1,b,m1)
        ENDPARDO m1, b, i1
#
        DO j # segment size of 1
#
        IF j >= i
#
           execute server_barrier
#
           PARDO a, a1, a2
                 IF j >= subb
                 IF j <= sube
                    GET                  XSaaai(a,a1,a2,j)
                    tppp(a,a1,a2)      = XSaaai(a,a1,a2,j)
                 ENDIF
                 ENDIF
                 IF j < subb
                    REQUEST              YSaaai(a,a1,a2,j) a
                    tppp(a,a1,a2)      = YSaaai(a,a1,a2,j)
                 ENDIF
                 IF j > sube
                    REQUEST              YSaaai(a,a1,a2,j) a
                    tppp(a,a1,a2)      = YSaaai(a,a1,a2,j)
                 ENDIF
                 PUT Paaaj(a,a1,a2) = tppp(a,a1,a2)
           ENDPARDO a, a1, a2
#
           PARDO b, b1, a
                 IF j >= subb
                 IF j <= sube
                    GET                 Xbbai(b,b1,a,j)
                    tqqp(b,b1,a)      = Xbbai(b,b1,a,j)
                 ENDIF
                 ENDIF
                 IF j < subb
                    REQUEST             Ybbai(b,b1,a,j) a
                    tqqp(b,b1,a)      = Ybbai(b,b1,a,j)
                 ENDIF
                 IF j > sube
                    REQUEST             Ybbai(b,b1,a,j) a
                    tqqp(b,b1,a)      = Ybbai(b,b1,a,j)
                 ENDIF
                 PUT Pbbaj(b,b1,a) = tqqp(b,b1,a)
           ENDPARDO b, b1, a
#
           PARDO a, a1
                 PREQUEST tpsps(a,j,a1,i) = T2aiai(a,i1,a1,i2)
                 tppii(a,a1,j,i)          = tpsps(a,j,a1,i)
                 tpp(a,a1)                = tppii(a,a1,j,i)
                 t1pp(a1,a)               = tpp(a,a1)
                 PUT Daa(a1,a)            = t1pp(a1,a)
           ENDPARDO a, a1
           PARDO a, a1, i1
                 PREQUEST t2ppps(a,i1,a1,j) = T2aiai(a,i1,a1,i2)
                 t2ppp(a,i1,a1)             = t2ppps(a,i1,a1,j)
                 PUT D1aiaS(a,i1,a1)        = t2ppp(a,i1,a1)
           ENDPARDO a, a1, i1
           PARDO a, b, j1
                 PREQUEST t1psqq(a,j,b,j1) = T2aibj(a,i1,b,j1)
                 tabji(a,b,j1,j)           = t1psqq(a,j,b,j1)
                 t1pqq(a,b,j1)             = tabji(a,b,j1,j)
                 PUT D1aSbj(a,b,j1)        = t1pqq(a,b,j1)
           ENDPARDO a, b, j1
#
# Zero out the amplitude array
# ----------------------------
#
           PARDO m1, a, b
                 PREQUEST t4psqq(a,j,b,m1) = T2aibj(a,i1,b,m1)
                 tpqqs(a,b,m1,j)           = t4psqq(a,j,b,m1)
                 tpqq(a,b,m1)              = tpqqs(a,b,m1,j)
                 t1qpq(b,a,m1)             = tpqq(a,b,m1)
                 PUT D1ab(a,b,m1)          = tpqq(a,b,m1)
                 PUT D2ab(b,a,m1)          = t1qpq(b,a,m1)
           ENDPARDO m1, a, b
#
#          Put 'slices' of VSpipi(a,i2,i1,i3) into 2-d arrays
#          --------------------------------------------------
#
           PARDO a, i1
                 PREQUEST P4aIiI(a,j,i1,i) = VSpipi(a,i2,i1,i3)
                 Tppii(a,i1,j,i)           = P4aiii(a,j,i1,i)
                 tpp(a,i1)                 = Tppii(a,i1,j,i)
                 t1pp(i1,a)                = tpp(a,i1)
                 PUT XSaI_ji(i1,a)         = t1pp(i1,a)
           ENDPARDO a, i1
#
           PARDO m1, a, j1
                 PREQUEST t5psqq(a,j,j1,m1) = Vpiqj(a,i2,j1,m1)
                 tqpqs(j1,a,m1,j)           = t5psqq(a,j,j1,m1)
                 tqpq(j1,a,m1)              = tqpqs(j1,a,m1,j)
                 PUT XaI_jk(j1,a,m1)        = tqpq(j1,a,m1)
           ENDPARDO m1, a, j1
#
           PARDO m1, b, i1
                 PREQUEST t6psqq(i1,j,b,m1) = Vpiqj(i1,i2,b,m1)
                 tpqqs(i1,b,m1,j)           = t6psqq(i1,j,b,m1)
                 tpqq(i1,b,m1)              = tpqqs(i1,b,m1,j)
                 PUT XiI_jk(i1,b,m1)        = tpqq(i1,b,m1)
           ENDPARDO m1, b, i1
#
           execute sip_barrier
          #execute server_barrier
#
# Put distributed 2-d arrays int static arrays: Looks clumsy and stupid but is effective
# --------------------------------------------------------------------------------------
           DO a
           DO a1
              GET         Daa(a,a1)
              Saa(a,a1) = Daa(a,a1)
           ENDDO a1
           ENDDO a
#
           DO a
           DO i1
              GET            XSaI_ji(i1,a)
              SSaI_ji(i1,a) = XSaI_ji(i1,a)
           ENDDO i1
           ENDDO a
#
# Start the actual calculation
# ----------------------------
#
#          Compute contributions to triples amplitudes 
#          ------------------------------------------- 
#
           PARDO m1, b, a1 
#
                 allocate L3aab(*,a1,b,m1) 
#
                 DO a2
#
                    REQUEST Vaabj(a2,a1,b,m1) m1 
#
                    DO a 
#
                       IF a <= a1
#
                          t1ppqq(a,a1,b,m1)  = Vaabj(a2,a1,b,m1)*Saa(a2,a)  
                          L3aab(a,a1,b,m1) -= t1ppqq(a,a1,b,m1)
#
                       ENDIF
#
                    ENDDO a 
#
                 ENDDO a2   
#
                 DO b1 
#
                    GET              Pbbaj(b1,b,a1)
                    GET              Pbbai(b1,b,a1)
                    tqpq(b1,a1,b)  = Pbbaj(b1,b,a1) 
                    t1qpq(b1,a1,b) = Pbbai(b1,b,a1) 
#
                    DO a 
#
                       IF a <= a1
#
                          GET Dab(b1,a,m1) 
                          GET D2ab(b1,a,m1)
#
                          tppqq(a,a1,b,m1)    = tqpq(b1,a1,b)*Dab(b1,a,m1)  
                          t3ppqq(a,a1,b,m1)   = t1qpq(b1,a1,b)*D2ab(b1,a,m1) 
                          tppqq(a,a1,b,m1)   -= t3ppqq(a,a1,b,m1)  
                          L3aab(a,a1,b,m1)  += tppqq(a,a1,b,m1)
#   
                       ENDIF
#
                    ENDDO a 
#
                 ENDDO b1 
#
                 DO a 
                    IF a <= a1
                       tppqq(a,a1,b,m1)       = L3aab(a,a1,b,m1) 
                       PREPARE S3aab(a,a1,b,m1) += tppqq(a,a1,b,m1) 
                    ENDIF 
                 ENDDO a  
#
                 deallocate L3aab(*,a1,b,m1) 
#
           ENDPARDO m1, b, a1 
#
           PARDO m1, a, b
#
                 allocate L3aab(a,*,b,m1)
#
                 DO a2
#
                    REQUEST Vaabj(a,a2,b,m1) a
#
                    DO a1
#
                       IF a <= a1
#
                          t1ppqq(a,a1,b,m1)  = Vaabj(a,a2,b,m1)*Saa(a2,a1)
                          L3aab(a,a1,b,m1) += t1ppqq(a,a1,b,m1)
#
                       ENDIF
#
                    ENDDO a1
#
                 ENDDO a2
#
                 DO b1
#
                    GET             Pbbai(b1,b,a)
                    GET             Pbbaj(b1,b,a)
                    tpqq(a,b1,b)  = Pbbai(b1,b,a)
                    t1pqq(a,b1,b) = Pbbaj(b1,b,a)
#
                    DO a1
#
                       IF a <= a1
#
                          GET D2ab(b1,a1,m1)
                          GET Dab(b1,a1,m1)
#
                          tppqq(a,a1,b,m1)   = tpqq(a,b1,b)*D2ab(b1,a1,m1)
                          t1ppqq(a,a1,b,m1)  = t1pqq(a,b1,b)*Dab(b1,a1,m1)
                          tppqq(a,a1,b,m1)  -= t1ppqq(a,a1,b,m1)
                          L3aab(a,a1,b,m1) += tppqq(a,a1,b,m1)
#
                       ENDIF
#
                    ENDDO a1
#
                 ENDDO b1
#
                 DO a1
                    IF a <= a1
                       tppqq(a,a1,b,m1)       = L3aab(a,a1,b,m1)
                       PREPARE S3aab(a,a1,b,m1) += tppqq(a,a1,b,m1)
                    ENDIF
                 ENDDO a1
                 deallocate L3aab(a,*,b,m1)
#
           ENDPARDO m1, a, b 
#
           PARDO m1, a, a1
#
                 allocate L3aab(a,a1,*,m1)
#
                 DO a2
#
                    IF a <= a1
#
                       GET              Paaaj(a,a2,a1)
                       GET              Paaai(a,a2,a1)
                       tppp(a,a1,a2)  = Paaaj(a,a2,a1)
                       t1ppp(a,a1,a2) = Paaai(a,a2,a1)
#
                       DO b
#
                          GET D1ab(a2,b,m1)
                          GET Dab(b,a2,m1)
#
                          tpqq(a2,b,m1)      = Dab(b,a2,m1)
                          tppqq(a,a1,b,m1)   = tppp(a,a1,a2)*tpqq(a2,b,m1)
                          t1ppqq(a,a1,b,m1)  = t1ppp(a,a1,a2)*D1ab(a2,b,m1)
                          tppqq(a,a1,b,m1)  -= t1ppqq(a,a1,b,m1)
                          L3aab(a,a1,b,m1) += tppqq(a,a1,b,m1)
#
                       ENDDO b
#
                    ENDIF
#
                 ENDDO a2
#
                 DO b
                    IF a <= a1
                       tppqq(a,a1,b,m1)       = L3aab(a,a1,b,m1)
                       PREPARE S3aab(a,a1,b,m1) += tppqq(a,a1,b,m1)
                    ENDIF
                 ENDDO b
                 deallocate L3aab(a,a1,*,m1)
#
           ENDPARDO m1, a, a1 
#
# Done contributions from Paaai terms 
# ----------------------------------- 
#
           PARDO m1, b, a
#
                 allocate L3aab(a,*,b,m1)
#
                 DO j1
#
                    GET             DaSbj(a,b,j1)
                    GET             D1aSbj(a,b,j1)
                    tpqq(a,j1,b)  = DaSbj(a,b,j1)
                    t1pqq(a,j1,b) = D1aSbj(a,b,j1)
#
                    DO a1
#
                       IF a <= a1
#
                          GET              Xai_jk(j1,a1,m1)
                          GET              Xai_ik(j1,a1,m1)
                          tppqq(a,a1,b,m1)   = tpqq(a,j1,b)*Xai_jk(j1,a1,m1)
                          t1ppqq(a,a1,b,m1)  = t1pqq(a,j1,b)*Xai_ik(j1,a1,m1)
                          t1ppqq(a,a1,b,m1) -= tppqq(a,a1,b,m1)
                          L3aab(a,a1,b,m1) += t1ppqq(a,a1,b,m1)
#
                       ENDIF
#
                    ENDDO a1
#
                 ENDDO j1
#
                 DO i1
#
                    GET DaibS(a,i1,b,m1)
#
                    DO a1
#
                       IF a <= a1
#
                         #GET              XSaI_ji(i1,a1)
                          t1ppqq(a,a1,b,m1)  = DaibS(a,i1,b,m1)*SSaI_ji(i1,a1)
                          L3aab(a,a1,b,m1) -= t1ppqq(a,a1,b,m1)
#
                       ENDIF
#
                    ENDDO a1
#
                 ENDDO i1
#
                 DO a1
                    IF a <= a1
                       tppqq(a,a1,b,m1)       = L3aab(a,a1,b,m1)
                       PREPARE S3aab(a,a1,b,m1) += tppqq(a,a1,b,m1)
                    ENDIF
                 ENDDO a1
                 deallocate L3aab(a,*,b,m1)
#
           ENDPARDO m1, b, a 
# 
           PARDO m1, a1, a
#
                 IF a <= a1
#
                    allocate L3aab(a,a1,*,m1)
#
                    DO i1
#
                       GET              D1aiaS(a,i1,a1)
                       GET              DaiaS(a,i1,a1)
                       tppp(a,a1,i1)  = D1aiaS(a,i1,a1)
                       t1ppp(a,a1,i1) = DaiaS(a,i1,a1)
#
                       DO b
#
                          GET              XiI_ik(i1,b,m1)
                          GET              XiI_jk(i1,b,m1)
                          tppqq(a,a1,b,m1)   = tppp(a,a1,i1)*XiI_ik(i1,b,m1)
                          t1ppqq(a,a1,b,m1)  = t1ppp(a,a1,i1)*XiI_jk(i1,b,m1)
                          t1ppqq(a,a1,b,m1) -= tppqq(a,a1,b,m1)
                          L3aab(a,a1,b,m1) += t1ppqq(a,a1,b,m1)
#
                       ENDDO b
#
                    ENDDO i1
#
                    DO b
                       IF a <= a1
                          tppqq(a,a1,b,m1)       = L3aab(a,a1,b,m1)
                          PREPARE S3aab(a,a1,b,m1) += tppqq(a,a1,b,m1)
                       ENDIF
                    ENDDO b
                    deallocate L3aab(a,*,b,m1)
#
                 ENDIF
#
           ENDPARDO m1, a1, a
#
           PARDO m1, b, a1
#
                 allocate L3aab(*,a1,b,m1)
#
                 DO i1
#
                    GET             DaibS(a1,i1,b,m1)
                    tppqq(i1,a1,b,m1) = DaibS(a1,i1,b,m1)
#
                    DO a
#
                       IF a <= a1
#
                         #GET              XSaI_ji(i1,a)
                          t3ppqq(a,a1,b,m1)  = tppqq(i1,a1,b,m1)*SSaI_ji(i1,a)
                          L3aab(a,a1,b,m1) += t3ppqq(a,a1,b,m1)
#
                       ENDIF
#
                    ENDDO a
#
                 ENDDO i1
#
                 DO a
                    IF a <= a1
                       tppqq(a,a1,b,m1)       = L3aab(a,a1,b,m1)
                       PREPARE S3aab(a,a1,b,m1) += tppqq(a,a1,b,m1)
                    ENDIF
                 ENDDO a
                 deallocate L3aab(*,a1,b,m1)
#
           ENDPARDO m1, b, a1 
#
           PARDO m1, b, a1
#
                 allocate L3aab(*,a1,b,m1)
#
                 DO j1
#
                    GET              DaSbj(a1,b,j1)
                    GET              D1aSbj(a1,b,j1)
                    tqpq(j1,a1,b)  = DaSbj(a1,b,j1)
                    t1qpq(j1,a1,b) = D1aSbj(a1,b,j1)
#
                    DO a
#
                       IF a <= a1
#
                          GET              Xai_jk(j1,a,m1)
                          GET              Xai_ik(j1,a,m1)
                          tppqq(a,a1,b,m1)   = tqpq(j1,a1,b)*Xai_jk(j1,a,m1)
                          t1ppqq(a,a1,b,m1)  = t1qpq(j1,a1,b)*Xai_ik(j1,a,m1)
                          tppqq(a,a1,b,m1)  -= t1ppqq(a,a1,b,m1)
                          L3aab(a,a1,b,m1) += tppqq(a,a1,b,m1)
#
                       ENDIF
#
                    ENDDO a
#
                 ENDDO j1
#
                 DO a
                    IF a <= a1
                       tppqq(a,a1,b,m1)       = L3aab(a,a1,b,m1)
                       PREPARE S3aab(a,a1,b,m1) += tppqq(a,a1,b,m1)
                    ENDIF
                 ENDDO a
                 deallocate L3aab(*,a1,b,m1)
#
           ENDPARDO m1, b, a1 
#
           execute server_barrier 
#
           PARDO a, a1
#
                 PREQUEST P3aiai(a,i,a1,j) = VSpipi(a,i1,a1,i2)
                 tppii(a,a1,i,j)           = P3aiai(a,i,a1,j)
                 tpp(a,a1)                 = tppii(a,a1,i,j)
                 PUT S3(a,a1)              = tpp(a,a1)
#
           ENDPARDO a, a1 
# 
        DO m1
           create D3aab(*,*,*,m1)
           execute sip_barrier
#
# Symmetrize the distributed amplitude array
# ------------------------------------------
#
           PARDO a, a1, b
#
# Compute contribution to the energy and the one-particle intermediates
# ---------------------------------------------------------------------
#
                 IF a < a1
#
                    REQUEST                     S3aab(a,a1,b,m1) a
                    tqppq(b,a,a1,m1)          = S3aab(a,a1,b,m1) 
#
                    Tbaaoij(b,a,a1,m1,i,j)    = tqppq(b,a,a1,m1)  
                    execute energy_tdenominator Tbaaoij(b,a,a1,m1,i,j)
#
# Compute contribution to energy
# ------------------------------

                    t1qppq(b,a,a1,m1) = Tbaaoij(b,a,a1,m1,i,j)
                    t1ppqq(a,a1,b,m1) = t1qppq(b,a,a1,m1) 
                    etemp             = S3aab(a,a1,b,m1)*t1ppqq(a,a1,b,m1)
                   #etemp             = etemp/2.0
                    esum2            += etemp
#
                    PUT D3aab(a,a1,b,m1) = t1ppqq(a,a1,b,m1)
                    tppqq(a1,a,b,m1)      = t1ppqq(a,a1,b,m1)
                    tppqq(a1,a,b,m1)     *= -1.0
                    PUT D3aab(a1,a,b,m1) = tppqq(a1,a,b,m1)
#
                 ENDIF # a < a1
#
                 IF a == a1
#
                    REQUEST                     S3aab(a,a1,b,m1) a
                    tqppq(b,a,a1,m1)          = S3aab(a,a1,b,m1) 
#
                    Tbaaoij(b,a,a1,m1,i,j)    = tqppq(b,a,a1,m1)  
                    execute energy_tdenominator Tbaaoij(b,a,a1,m1,i,j)
#
# Compute contribution to energy
# ------------------------------

                    t1qppq(b,a,a1,m1) = Tbaaoij(b,a,a1,m1,i,j)
                    t1ppqq(a,a1,b,m1) = t1qppq(b,a,a1,m1) 
                    etemp             = S3aab(a,a1,b,m1)*t1ppqq(a,a1,b,m1)
                    etemp             = etemp/2.0
                    esum2            += etemp
#
                    PUT D3aab(a,a1,b,m1) = t1ppqq(a,a1,b,m1)
#
                 ENDIF # a == a1
#
           ENDPARDO a, a1, b
#
           execute sip_barrier
           execute server_barrier
#
#    Form contribution to sai
#    ------------------------
#
#          PERM 1
#          ------
#
           PARDO a1, b
#
                 PREQUEST t7psqq(a1,j,b,m1) = Vpiqj(a1,i1,b,m1)
                 t2pqqs(a1,b,m1,j)          = t7psqq(a1,j,b,m1)
                 tpqq(a1,b,m1)              = t2pqqs(a1,b,m1,j)
                 tpqqs(a1,b,m1,i)           = tpqq(a1,b,m1)
#
                 DO a
#
                    GET                         D3aab(a,a1,b,m1)
                    xai(a,i)                  = D3aab(a,a1,b,m1)*tpqqs(a1,b,m1,i)
                    xai(a,i)                 *= 4.0
                    PUT sai(a,i)             += xai(a,i)
#
                 ENDDO a
#
           ENDPARDO a1, b
#
#          PERM 2
#          ------
#
           PARDO a, b
#
                 PREQUEST t8psqq(a,i,b,m1) = Vpiqj(a,i1,b,m1)
                 t2pqqs(a,b,m1,i)          = t8psqq(a,i,b,m1)
                 tpqq(a,b,m1)               = t2pqqs(a,b,m1,i)
                 tpqqs(a,b,m1,j)            = tpqq(a,b,m1)
#
                 DO a1
#
                    GET                         D3aab(a,a1,b,m1)
                    xai(a1,j)                 = D3aab(a,a1,b,m1)*tpqqs(a,b,m1,j)
                    xai(a1,j)                *= 4.0
                    PUT sai(a1,j)            += xai(a1,j)
#
                 ENDDO a1
#
           ENDPARDO a, b
#
#          PERM 3
#          ------
#
           PARDO b, a, a1
#
                 GET                         D3aab(a,a1,b,m1)
                 GET                         S3(a,a1)
                 t1qq(b,m1)                = D3aab(a,a1,b,m1)*S3(a,a1)
                 t1qq(b,m1)               *= 2.0
                 PUT Dbj(b,m1)            += t1qq(b,m1)
#
                 tppqq(a,a1,b,m1)         = 0.0
                 PREPARE S3aab(a,a1,b,m1) = tppqq(a,a1,b,m1)
#
           ENDPARDO b, a, a1
#
           execute sip_barrier
           execute server_barrier
           delete D3aab(*,*,*,m1)
        ENDDO m1
#
        ENDIF # i>=j
        ENDDO j # segment size of 1
#
        ENDIF # i <= itripe 
        ENDIF # i >= itrips
#
     ENDDO i # segment size of 1
#
     execute server_barrier
     execute sip_barrier
     collective ecorraab += esum2
     execute print_scalar ecorraab

     esum = 0.0
     esum = ecorraab
#
     delete DaiaS
     delete DaSbj
     delete Dab
     delete DaibS
     delete Daa
     delete D1ab
     delete D1aiaS
     delete D1aSbj
#
     delete XiI_ik
     delete XiI_jk
     delete XSai_ji
     delete XaI_ik
     delete XaI_jk
     execute sip_barrier
     execute server_barrier
#
#    alpha/alpha/beta/ block.
#
     ENDPROC T4AAB 
#    ------------- 
#
# --------------------------------------------------------------------------
#
     PROC ST5 
#    -------- 
#
# Compute contribution to the energy from sai 
# -------------------------------------------  
#
     esum = 0.0 
     execute sip_barrier 
     PARDO a, i 
#
	   PREQUEST Pai(a,i) = t1a_old(a,i1) 
	   GET                 sai(a,i) 
	   etemp             = Pai(a,i)*sai(a,i) 
	   etemp            *= 0.25
	   esum             += etemp  
#
     ENDPARDO a, i 
#
     PARDO a, i1  
#
	   REQUEST             t1a_old(a,i1) a  
	   GET                 Dai(a,i1) 
	   etemp             = t1a_old(a,i1)*Dai(a,i1)  
	   etemp            *= 0.25
	   esum             += etemp  
#
     ENDPARDO a, i1  
#
     execute sip_barrier 
     collective ecorrsa += esum 
     execute sip_barrier 
     execute print_scalar ecorrsa  
     execute server_barrier 
#
# Compute contribution to the energy from sbj
# -------------------------------------------
#
     esum = 0.0
     execute sip_barrier 
     PARDO b, m1  
#
           REQUEST  t1b_old(b,m1) b 
           GET      Dbj(b,m1)
           etemp  = t1b_old(b,m1)*Dbj(b,m1)  
           etemp *= 0.25
           esum  += etemp
#
     ENDPARDO b, m1  
#
     execute sip_barrier
     collective ecorrsb += esum
     execute sip_barrier
     execute print_scalar ecorrsb
     execute server_barrier 
#
     ENDPROC ST5 
#    ----------- 
#
# --------------------------------------------------------------------------
#
# --------------------------------------------------------------------------
#
     PROC FORM_IDENTITY
#    ------------------
#
     create IIi
     create IJj
#
# Form identity arrays
# --------------------
#
     DO i1
     DO i2
           tii(i1,i2) = 1.0
           t1ii(i1,i2) = 0.0
           execute return_diagonal tii t1ii
           tpp(i1,i2) = t1ii(i1,i2)
           PREPARE Sii(i1,i2) = tpp(i1,i2)
     ENDDO i2
     ENDDO i1
#
     DO j1
     DO j2
           tjj(j1,j2) = 1.0
           t1jj(j1,j2) = 0.0
           execute return_diagonal tjj t1jj
           tqq(j1,j2) = t1jj(j1,j2)
           PREPARE Sjj(j1,j2) = tqq(j1,j2)
     ENDDO j2
     ENDDO j1
     execute sip_barrier
     execute server_barrier
#
     PARDO i1, i
#
           PREQUEST PIi(i,i1) = Sii(i2,i1)
           PUT IIi(i,i1) = PIi(i,i1)
#
     ENDPARDO i1, i
#
     PARDO j1, jb
#
           PREQUEST PJj(jb,j1) = Sjj(j2,j1)
           PUT IJj(jb,j1) = PJj(jb,j1)
#
     ENDPARDO j1, jb
     execute sip_barrier
#
     ENDPROC FORM_IDENTITY
#    ---------------------
#
# MAIN PROGRAM 
#
# --------------------------------------------------------------------------
#
# Compute E^{[4]}_T contribution only and form sai and sbj  
# -------------------------------------------------------- 
#
     create sai  
     create sbj  
     execute sip_barrier 
#
     CALL READ_BLOCKDATA  
     CALL FORM_IDENTITY 
     execute print_scalar etemp 
     CALL PDATA 
     execute print_scalar etemp 
     CALL T4AAA 
     CALL T4AAB 
     CALL ST5  
#
# Sum the total energy contribution and add to etot. 
# -------------------------------------------------- 
#
     ecorrT  = ecorraaa  
     ecorrT += ecorraab 
     ecorrT += ecorrsa 
     ecorrT += ecorrsb 
     execute print_scalar ecorrT 

    #totenerg += ecorraaa 
    #totenerg += ecorraab 
    #totenerg += ecorrsa 
     totenerg += ecorrT 
#
     execute sip_barrier
#
     ENDSIAL CCSDPT_UHF_AAX    
#
#
#
