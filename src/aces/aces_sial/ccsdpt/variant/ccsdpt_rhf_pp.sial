#  Copyright (c) 2003-2010 University of Florida
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  The GNU General Public License is included in this distribution
#  in the file COPYRIGHT.
      SIAL CCSDPT_RHF_PP   

# Make index definitions 
#
      Index   i      = 1, naocc   
      Index   j      = 1, naocc   
      Index   k      = 1, naocc   
      Index   ib     = 1, naocc 
      Index   jb     = 1, naocc 
      Index   kb     = 1, naocc 
      index pp   = subb, sube   
#
      aoindex mu     = 1, norb 
      aoindex nu     = 1, norb 
      aoindex lambda = 1, norb 
      aoindex sigma  = 1, norb 
#
      moaindex i1= baocc, eaocc
      moaindex i2= baocc, eaocc
      moaindex i3= baocc, eaocc
#
      moaindex a = bavirt, eavirt
      moaindex a1= bavirt, eavirt
      moaindex a2= bavirt, eavirt
      moaindex a3= bavirt, eavirt 
#
      moaindex j1= baocc, eaocc
      moaindex j2= baocc, eaocc
      moaindex j3= baocc, eaocc
#
      moaindex b = bavirt, eavirt
      moaindex b1= bavirt, eavirt
      moaindex b2= bavirt, eavirt
      moaindex b3= bavirt, eavirt 
#
      moaindex p = baocc, eavirt  
      moaindex p1= baocc, eavirt  
      moaindex p2= baocc, eavirt  
      moaindex p3= baocc, eavirt  
#
      moaindex q = baocc, eavirt  
      moaindex q1= baocc, eavirt  
      moaindex q2= baocc, eavirt  
      moaindex q3= baocc, eavirt  
#
# Declare served arrays which are read from disk  
# 
      served Vaaai(a1,a2,a3,i1)
      served VSaaai(a1,a2,a3,i1)
      distributed Xaaai(a1,a2,a3,pp)
      distributed XSaaai(a1,a2,a3,pp)
      served YSaaai(a1,a2,a3,i)
      served Yaaai(a1,a2,a3,i)
      served VSpipi(p,i1,p1,i2)
      served Vaaii(a,a1,i1,i2)
      served Viaai(i1,a,a1,i2)
      served Vpiqj(p,i1,q,j2)
      served Vaiai(a,i1,a1,i2) 
#
      served T2aiai(a,i1,a1,i2)
      served T2aibj(a,i1,b,j1) 
#
      distributed XSaiii(a,i,i1,j)  
      distributed XSbjjj(b,ib,j1,jb)  
      distributed XaIjJ(a,i,j1,jb)  
      distributed XiIbJ(i1,i,b,jb)  
#
# Declare distributed arrays 
# 
      distributed Paaai(a,a1,a2) 
      distributed Paaaj(a,a1,a2) 
      distributed Paaak(a,a1,a2) 
      distributed Pbbbi(b,b1,b2)  
      distributed Pbbbj(b,b1,b2)  
      distributed Pbbbk(b,b1,b2)  
      distributed Pbbai(b,b1,a) 
      distributed Pbbaj(b,b1,a) 
      distributed Paabk(a,a1,b) 
      distributed Paabi(a,a1,b) 
      distributed Paabj(a,a1,b) 
      distributed Pbbak(b,b1,a) 
#
      temp Paiii(a,i,i1,j)   
      temp P1aiii(a,i,i1,j)   
      temp P2aiii(a,i,i1,j)   
      temp P3aiii(a,i,i1,j)   
      temp P4aiii(a,i,i1,j)   
      temp Pbjjj(b,ib,j1,jb)   
      temp PaIjJ(a,i,j1,jb) 
      temp P1aIjJ(a,i,j1,jb) 
      temp PiIbJ(i1,i,b,jb) 
      temp P1iIbJ(i1,i,b,jb) 
#
      distributed XSaI_ij(i1,a) 
      distributed XSaI_ji(i1,a) 
      distributed XSaI_ik(i1,a) 
      distributed XSaI_ki(i1,a) 
      distributed XSaI_kj(i1,a) 
      distributed XaI_ik(j1,a)  
      distributed XaI_jk(j1,a)  
      distributed XiI_ik(i1,b)   
      distributed XiI_jk(i1,b)   
#
      temp taaai(a,a1,a2,i1) 
#
      temp XaJbK(a,j,b,kb) 
      temp X1aJbK(a,j,b,kb) 
      temp X2aJbK(a,j,b,kb) 
      temp XaIbK(a,i,b,kb) 
      temp X1aIbK(a,i,b,kb) 
      temp X2aIbK(a,i,b,kb) 
      temp XaJaI(a,j,a1,i) 
      temp X1aJaI(a,j,a1,i) 
      temp YaibK(a,i1,b,kb) 
      temp Y1aibK(a,i1,b,kb) 
      temp XaIbj(a,i,b,j1) 
      temp X1aIbj(a,i,b,j1) 
      temp XaJbj(a,j,b,j1) 
      temp X1aJbj(a,j,b,j1) 
      temp XaiaI(a,i1,a1,i) 
      temp XaiaJ(a,i1,a1,j) 
#
      distributed DbjbS(b,j1,b1) 
      distributed D1bjbS(b,j1,b1) 
      distributed D2bjbS(b,j1,b1) 
      distributed EaibS(a,i1,b) 
      distributed E1aibS(a,i1,b) 
      distributed EabjS(a,b,j1) 
#
      distributed Y3ijk(a,a1,a2) 
      distributed Y3aab(a,a1,b2) 
#
      distributed sai(a,i) 
      distributed sbj(b,kb) 
      temp txai(a,i) 
      distributed txbj(b,kb) 
      served t1a_old(a,i1) 
      served t1b_old(b,j1) 
      distributed t1ai(a,i) 
      distributed t1bj(b,jb) 
#
# Declare temporary arrays 
#
      temp xa(a) 
      temp xb(b) 
      temp xai(a,i) 
      temp xbj(b,kb) 
      temp Pai(a,i) 
      temp Pbj(b,kb) 
      temp tpp(p,p1) 
      temp t1pp(p,p1) 
      temp tqp(q,p) 
      temp tqq(q,q1) 
#
      temp tppp(p,p1,p2) 
      temp t1ppp(p,p1,p2) 
      temp t2ppp(p,p1,p2) 
      temp t4ppp(p,p1,p2) 
      temp t3ppp(p,p1,p2) 
      temp s3ppp(p,p1,p2) 
      temp t5ppp(p,p1,p2) 
      temp taaaiii(a,a1,a2,i,j,k) 
      temp t1aaaiii(a,a1,a2,i,j,k) 
#
      temp tpppp(p,p1,p2,i) 
      temp tppps(p,p1,p2,i) 
      temp t1ppps(p,p1,p2,i) 
      temp t2ppps(p,p1,p2,j) 
      temp t3ppps(p,p1,p2,k) 
      temp tpsps(p,j,p2,i) 
      temp t1psps(p,j,p2,i) 
      temp t2psps(p,j,p2,i) 
#
      temp tpsqq(a,i,b,j1) 
      temp t1psqq(a,j,b,j1) 
#
      temp tpsqs(a,i,b,kb) 
      temp t1psqs(a,j,b,kb) 
#
      temp tqSqS(b,jb,b1,ib) 
      temp t1qSqS(b,jb,b1,ib) 
#
      temp tqqps(b,b1,a,i) 
      temp t1qqpi(b,b1,a,i) 
      temp tppqs(p,p1,q,kb) 
      temp t1ppqs(p,p1,q,kb) 
      temp tpqqs(a,b,j1,k)    
#
      temp tpqqj(a,b,b1,ib)
#
      temp tppq(p,p1,q) 
      temp t1ppq(p,p1,q) 
      temp t2ppq(p,p1,q) 
      temp t3ppq(p,p1,q) 
      temp t4ppq(p,p1,q) 
      temp t4qqp(q,q1,p,ib,jb,k) 

      temp tqqp(q,q1,p) 
      temp sqqp(q,q1,p) 
      temp t1qqp(q,q1,p) 
      temp t2qqp(q,q1,p) 
      temp t3qqp(q,q1,p) 
      temp tqpp(q,p,p1) 
      temp t1qpp(q,p,p1) 
      temp t2qpp(q,p,p1) 
      temp tqpq(q,p,q1)      
      temp t1qpq(q,p,q1)      
      temp tpqp(p,q,p1)  
      temp t1pqp(p,q,p1)  
      temp tpqq(p,q,q1)  
      temp t1pqq(p,q,q1)  
      temp t2pqq(p,q,q1)  
#
      temp tpppi(p,p1,p2,i) 
      temp tppii(p,p1,i,j) 
      temp tpipi(p,i,p1,j) 
      temp Y1pipi(p,i,p1,j) 
      temp Y2pipi(p,i,p1,j) 
      temp Y3pipi(p,i,p1,j) 
      temp Y4pipi(p,i,p1,j) 
      temp Y5pipi(p,i,p1,j) 
      temp Y6pipi(p,i,p1,j) 
      temp Y7pipi(p,i,p1,j) 
      temp Y8pipi(p,i,p1,j) 
      temp Y9pipi(p,i,p1,j) 
      temp t2pipi(p,i,p1,j) 
#
      temp t1pipi(p,i1,p1,i) 
      temp X1pipi(p,i1,p1,i) 
      temp X2pipi(p,i1,p1,i) 
      temp X3pipi(p,i1,p1,i) 
      temp X4pipi(p,i1,p1,i) 
      temp X5pipi(p,i1,p1,i) 
      temp X6pipi(p,i1,p1,i) 
      temp X7pipi(p,i1,p1,i) 
      temp X8pipi(p,i1,p1,i) 
      temp X9pipi(p,i1,p1,i) 
      temp t1ppii(p,p1,i1,i) 
      temp t2aiii(a,i1,j,i)   
#
      temp tppqj(p,p1,q,ib) 
      temp tqqpi(q,q1,p,i) 
      temp tqppj(b,a,a1,kb) 
#
      temp tqqjj(q,q1,ib,jb) 
      temp tqjqj(q,ib,q1,jb) 

      temp taab(a,a1,b1)
      temp t1aab(a,a1,b1)
      temp tbba(b,b1,a2)
      temp t1bba(b,b1,a2)
      temp tpi(p,i) 
      temp tpj(p,j) 
      temp tpk(p,k) 
      temp tqi(q,ib) 
      temp tqj(q,jb) 
      temp tqk(q,kb) 
      temp tpqpi(a,b,a1,i)
      temp tqpqj(b,a,b1,ib) 
      temp t1jaij(j1,a,j,kb) 
      
      temp taiaiai(a,i,a1,j,a2,k) 
#
# Arrays used in Tbbbjjj computation
#
      temp Tbbbjjj(b,b1,b2,ib,jb,kb) 
      temp tbjbjbj(b,ib,b1,jb,b2,kb)   
      temp t1bbbjjj(b,b1,b2,ib,jb,kb) 
      temp t2bbbjjj(b,b1,b2,jb,ib,kb) 
      temp t3bbbjjj(b,b1,b2,kb,jb,ib) 
      temp t4bbbjjj(b1,b,b2,ib,jb,kb) 
      temp t5bbbjjj(b2,b1,b,ib,jb,kb) 
      temp t6bbbjjj(b1,b,b2,jb,ib,kb) 
      temp t7bbbjjj(b1,b,b2,kb,jb,ib) 
      temp t8bbbjjj(b2,b1,b,jb,ib,kb) 
      temp t9bbbjjj(b2,b1,b,kb,jb,ib) 
      temp t2bjjj(b,j1,kb,jb)  
      temp t1qjqj(b1,j1,b2,ib) 
      temp X1qjqj(b1,j1,b2,ib) 
      temp X2qjqj(b1,j1,b2,ib) 
      temp X3qjqj(b1,j1,b2,ib) 
      temp X4qjqj(b1,j1,b2,ib) 
      temp X5qjqj(b1,j1,b2,ib) 
      temp X6qjqj(b1,j1,b2,ib) 
      temp X7qjqj(b1,j1,b2,ib) 
      temp X8qjqj(b1,j1,b2,ib) 
      temp X9qjqj(b1,j1,b2,ib) 
      temp t1qqjj(b1,b2,j1,ib)
#
# Arrays used in Taabiij computation
#
      temp Dabij(a,b1,j,kb)  
      temp P2aibj(a,j,b,kb) 
      temp P4aibj(a,j,b,kb) 
      temp P5aibj(a,j,b,kb) 
      temp P6aibj(a,j,b,kb) 
      temp P3aibj(a,i,b,jb) 
      temp Tpq(p,q) 
      temp T1pq(p,q) 
      temp tppqi(a,a1,b,i)
      temp tqppi(b,a,a1,i)   
      temp tpqqi(a,b1,b,k)   
      temp P1bbai(b,b1,a1,i) 
      temp t1aibj(a1,i,b,j1) 
      temp taijj(a,j,j1,kb) 
      temp t1ajij(a,j1,j,kb) 
      temp tabji(a1,b,j1,i) 
      temp t1ppqj(a1,a2,b,kb) 
      temp t2ppqj(a1,a2,b,kb) 
      temp taibj(a1,i,b,kb) 
      temp t4aibj(a1,i,b,kb) 
      temp t3aibj(a1,i1,b,kb) 
      temp tpiqj(i1,j,b,kb) 
      temp tbijj(b,i1,j,kb) 
#
      temp t1aabiij(a,a1,b,i,j,kb) 
      temp t2aabiij(a,a1,b,j,i,kb) 
      temp t3aabiij(a1,a,b,i,j,kb) 
      temp t4aabiij(a1,a,b,j,i,kb) 
      temp taiaibj(a,i,a1,j,b,kb) 
      temp taabjii(a,a1,b,kb,i,j) 
      temp t1aabjii(a,a1,b,kb,i,j) 
#
      temp Taabiij(a,a1,b,i,j,kb) 
      temp Tbaajii(b,a,a1,kb,i,j) 
#
# Arrays used in the Tbbajji computation. 
# --------------------------------------- 
#
      temp P1aibj(a,i,b1,ib) 
      temp P2iibj(i1,k,b,jb) 
      temp P1aabj(a,a2,b1,ib)
      temp P1bjbj(b,jb,b2,ib)
      temp P2bjbj(b,jb,b2,ib)
      temp P3bjbj(b,jb,b2,ib)
      temp P4bjbj(b,jb,b2,ib)
      temp P5bjbj(b,jb,b2,ib)
      temp P6bjbj(b,jb,b2,ib)
      temp P7bjbj(b,jb,b2,ib)
      temp P8bjbj(b,jb,b2,ib)
      temp P9bjbj(b,jb,b2,ib)
      temp P1bbbj(b,b2,b1,ib) 
      temp P2bjjj(b,jb,j1,ib) 
      temp P2aijj(a,k,j1,jb) 
#
      temp t2pqij(a2,b,k,jb) 
      temp tqqaj(b,b1,a,ib)  
      temp t2bbji(b,b2,jb,ib)
      temp tqqai(b,b1,a,k) 
      temp t2abij(a,b2,k,jb) 
      temp t2ajij(a,j1,k,jb) 
#
      temp t1bbajji(b,b1,a,ib,jb,k) 
      temp t2bbajji(b,b1,a,jb,ib,k) 
      temp t3bbajji(b1,b,a,ib,jb,k) 
      temp t4bbajji(b1,b,a,jb,ib,k) 
      temp tbjbjai(b,ib,b1,jb,a,k)
      temp tbbaijj(b,b1,a,k,ib,jb) 
      temp tbiji(b,i1,jb,k) 
      temp tbjjj(b,j1,jb,ib) 
#
      temp Tbbajji(b,b1,a,ib,jb,k) 
      temp tqqa(b,b1,a) 
#
# Arrays used in the sai computation 
# ----------------------------------- 
#
      temp P1aiai(a1,j,a2,k) 
      temp P2aiai(a1,j,a2,k) 
      temp P3aiai(a1,j,a2,k) 
      temp P4aiai(a1,j,a2,k) 
      temp P5aiai(a1,j,a2,k) 
      temp P6aiai(a1,j,a2,k) 
      temp P7aiai(a1,j,a2,k) 
      temp P8aiai(a1,j,a2,k) 
      temp P9aiai(a1,j,a2,k) 
      temp t1pppi(a,a1,a2,i) 
      temp t2ppii(a1,a2,j,k) 
#
      temp Tabbijj(a,b1,b2,i,jb,kb) 
      temp taibjbj(a,i,b1,jb,b2,kb) 
      temp t1abbijj(a,b1,b2,i,jb,kb) 
      temp t1pqqi(a,b1,b2,i) 
      temp t2qqjj(b1,b2,jb,kb) 
      temp t1ppqi(a,a1,b2,i) 
#
# Arrays used in the sbj computation 
# ----------------------------------- 
#
      temp t1qppj(b,a1,a,ib) 
      temp tqqpj(b,b1,a,ib) 
      temp tpqij(p,q,i,jb) 
      temp tqpij(q,p,k,jb) 
      temp tpqji(i1,b,jb,k) 
#
      temp t1baajii(b,a1,a,ib,j,k) 
#
# Distributed arrays to partially hold amplitudes 
# ------------------------------------------------ 
#
      distributed DaiaS(a,i1,a1) 
      distributed D1aiaS(a,i1,a1) 
      distributed D2aiaS(a,i1,a1) 
#
      distributed DaSbj(a,b,j1) 
      distributed D1aSbj(a,b,j1) 
      distributed DaibS(a,i1,b) 
#
      distributed Dab(a,b) 
      distributed D1ab(a,b) 
      distributed Daa(a,a1) 
      distributed D1aa(a,a1) 
      distributed D2aa(a,a1) 
      distributed Eab(a,b) 
      distributed E1ab(a,b) 
      distributed Dbb(b,b1) 
      distributed D1bb(b,b1) 
      distributed D2bb(b,b1) 
#
# Arrays used to form identity
# ----------------------------
#
      temp PIi(i,i1)
      served Sii(i2,i1)
      distributed IIi(i,i1)
      static tii(i1,i2)
      static t1ii(i1,i2)
#
      temp PJj(ib,j1)
      served Sjj(j2,j1)
      distributed IJj(ib,j1)
      static tjj(j1,j2)
      static t1jj(j1,j2)
#
# Declare scalars 
#
      scalar fact 
      scalar etemp 
      scalar etemp1
      scalar etemp2
      scalar etemp3
      scalar etemp4
      scalar etemp5
      scalar etempa
      scalar esum 
      scalar esum1
      scalar esum2
      scalar esum3
      scalar esum4
      scalar esum5
      scalar esum6
      scalar esuma  
      scalar ecorrT 
      scalar ecorraaa 
      scalar ecorraab 
      scalar ecorrbba 
      scalar ecorrbbb 
      scalar ecorrsa 
      scalar ecorrsb 
#
# --------------------------------------------------------------------------
#
     PROC READ_BLOCKDATA  
#    -------------------  
#
#   Read BLOCKDATA file.
#
      execute sip_barrier
      execute server_barrier
      execute list_to_blocks                VSpipi(p,i1,p1,i2)
      execute list_to_blocks                Vaaii
      execute list_to_blocks                Viaai
      execute list_to_blocks                Vaaai
      execute list_to_blocks                Vpiqj(p,i1,q,j2)

      execute list_to_blocks                t1a_old
      execute list_to_blocks                T2aiai
      execute list_to_blocks                T2aibj
      execute read_list_to_blocks
      execute server_barrier
      execute sip_barrier
#
#   Antisymmetrize Vaaai
#
      PARDO a, a1, a2, i1
            REQUEST                      Vaaai(a,a1,a2,i1) a
            REQUEST                      Vaaai(a2,a1,a,i1) a
            taaai(a,a1,a2,i1)          = Vaaai(a2,a1,a,i1)
            taaai(a,a1,a2,i1)         -= Vaaai(a,a1,a2,i1)
            taaai(a,a1,a2,i1)         *= -1.0
            PREPARE VSaaai(a,a1,a2,i1) = taaai(a,a1,a2,i1)
      ENDPARDO a, a1, a2, i1
#
      etemp = 0.0 
      etemp1= 0.0 
      etemp2= 0.0 
      etemp3= 0.0 
      etemp4= 0.0 
      etemp5= 0.0 
      esuma = 0.0
      esum  = 0.0 
      esum1 = 0.0 
      esum2 = 0.0 
      esum3 = 0.0 
      esum4 = 0.0 
      esum5 = 0.0 
      esum6 = 0.0 
#
     ENDPROC READ_BLOCKDATA  
#    ----------------------  
#
# --------------------------------------------------------------------------
#
     PROC PDATA  
#    ---------- 
#
#    Put the vOoO integrals into a distributed array 
#    ----------------------------------------------- 
#
    #create XSaIiI 
    #create XaIjJ
    #create XiIbJ
     create t1ai 
     create t1bj 
     execute sip_barrier 
    #PARDO a, i1, i, j 
    #      PREQUEST PaIiI(a,i,i1,j) = VSpipi(a,i2,i1,i3) 
    #      PUT XSaIiI(a,i,i1,j)     = Paiii(a,i,i1,j)
    #ENDPARDO a, i1, i, j 
#
    #PARDO a, j1, i, jb
    #      PREQUEST PaIjJ(a,i,j1,jb) = Vpiqj(a,i2,j1,j3) 
    #      PUT XaIjJ(a,i,j1,jb)      = Paijj(a,i,j1,jb)
    #ENDPARDO a, j1, i, jb
#
    #PARDO b, i1, i, jb  
    #      PREQUEST PiIbJ(i1,i,b,jb) = Vpiqj(i1,i2,b,j3) 
    #      PUT XiIbJ(i1,i,b,jb)      = PiIbJ(i1,i,b,jb)
    #ENDPARDO b, i1, i, jb
#
#    PREPARE Vaaai type arrays into XaaaI ones 
#    ----------------------------------------- 
#
     IF subb > 0 
     IF sube > 0 
        CREATE XSaaaI#(*,*,*,I) 
        CREATE Xaaai #(*,*,*,I)    
     ENDIF 
     ENDIF 
     execute sip_barrier 
#
     PARDO k, a, a1, a2 
           tppps(a,a1,a2,k) = 0.0
           DO i1
              REQUEST             VSaaai(a,a1,a2,i1) a
              GET                 IIi(k,i1)
              t1pppi(a,a1,a2,k) = VSaaai(a,a1,a2,i1)*IIi(k,i1)
              tppps(a,a1,a2,k) += t1pppi(a,a1,a2,k)
           ENDDO i1
#
           IF k >= subb  
           IF k <= sube  
              PUT     XSaaaI(a,a1,a2,k) = tppps(a,a1,a2,k)
           ENDIF 
           ENDIF 
           IF k < subb  
              PREPARE YSaaaI(a,a1,a2,k) = tppps(a,a1,a2,k) 
           ENDIF 
           IF k > sube  
              PREPARE YSaaaI(a,a1,a2,k) = tppps(a,a1,a2,k) 
           ENDIF 
     ENDPARDO k, a, a1, a2 
#
     PARDO kb, a, a1, b 
           tppqs(a,a1,b,kb) = 0.0
           DO j1
              REQUEST            Vaaai(a,a1,b,j1) b
              GET                IJj(kb,j1)
              t1ppqj(a,a1,b,kb)= Vaaai(a,a1,b,j1)*IJj(kb,j1)
              tppqs(a,a1,b,kb)+= t1ppqj(a,a1,b,kb)
           ENDDO j1
#
           IF kb >= subb  
           IF kb <= sube  
              PUT XaaaI(a,a1,b,kb) = tppqs(a,a1,b,kb)
           ENDIF 
           ENDIF 
           IF kb < subb  
              PREPARE YaaaI(a,a1,b,kb) = tppqs(a,a1,b,kb) 
           ENDIF 
           IF kb > sube  
              PREPARE YaaaI(a,a1,b,kb) = tppqs(a,a1,b,kb) 
           ENDIF 
     ENDPARDO kb, a, a1, b 
#
#    Put the singles amplitudes into a distributed array t1aI/t1bJ 
#    ------------------------------------------------------------- 
#
     PARDO a, i 
           PREQUEST tpi(a,i) = t1a_old(a,i1)  
           PUT t1ai(a,i)     = tpi(a,i) 
     ENDPARDO a, i 
#
     execute sip_barrier 
     execute server_barrier 
#
# --------------------------------------------------------------------------
#
     ENDPROC PDATA  
#    ------------- 
#
# --------------------------------------------------------------------------
#
# --------------------------------------------------------------------------
#
     PROC T4AAA 
#    ---------- 
#
     create DaiaS 
     create Daa 
     create D1aiaS 
     CREATE Y3ijk 
     create Paaai 
     create Paaaj 
     create Paaak 
     create D2aiaS 
     create D1aa 
     create D2aa 
#
     create XSai_ij 
     create XSai_ik 
     create XSai_ki 
     create XSai_kj 
#
     esum1 = 0.0 
     execute sip_barrier 
#
     DO i # segment size of 1  
#
        execute sip_barrier 
        execute server_barrier 
#
        PARDO a, a1, a2
              IF i >= subb  
              IF i <= sube  
                 GET                  XSaaai(a,a1,a2,i) 
                 tppp(a,a1,a2)      = XSaaai(a,a1,a2,i)
              ENDIF 
              ENDIF 
              IF i < subb  
                 REQUEST              YSaaai(a,a1,a2,i) a  
                 tppp(a,a1,a2)      = YSaaai(a,a1,a2,i)
              ENDIF 
              IF i > sube  
                 REQUEST              YSaaai(a,a1,a2,i) a  
                 tppp(a,a1,a2)      = YSaaai(a,a1,a2,i)
              ENDIF 
              PUT Paaai(a,a1,a2) = tppp(a,a1,a2)
        ENDPARDO a, a1, a2 
#
        PARDO a, a1, i1 
              PREQUEST t1ppps(a,i1,a1,i) = T2aiai(a,i1,a1,i2) 
              t1ppp(a,i1,a1)             = t1ppps(a,i1,a1,i) 
              PUT DaiaS(a,i1,a1)         = t1ppp(a,i1,a1) 
        ENDPARDO a, a1, i1 
#
        DO j # segment size of 1  
#
        IF j >= i 
#
        execute server_barrier  
#
        PARDO a, a1, a2
              IF j >= subb  
              IF j <= sube  
                 GET                  XSaaai(a,a1,a2,j) 
                 tppp(a,a1,a2)      = XSaaai(a,a1,a2,j)
              ENDIF 
              ENDIF 
              IF j < subb  
                 REQUEST              YSaaai(a,a1,a2,j) a  
                 tppp(a,a1,a2)      = YSaaai(a,a1,a2,j)
              ENDIF 
              IF j > sube  
                 REQUEST              YSaaai(a,a1,a2,j) a  
                 tppp(a,a1,a2)      = YSaaai(a,a1,a2,j)
              ENDIF 
              PUT Paaaj(a,a1,a2) = tppp(a,a1,a2)
        ENDPARDO a, a1, a2 
#
        PARDO a, a1  
              PREQUEST tpsps(a,j,a1,i) = T2aiai(a,i1,a1,i2) 
              tppii(a,a1,j,i)          = tpsps(a,j,a1,i) 
              tpp(a,a1)                = tppii(a,a1,j,i) 
              t1pp(a1,a)               = tpp(a,a1) 
              PUT Daa(a1,a)            = t1pp(a1,a) 
        ENDPARDO a, a1  
        PARDO a, a1, i1 
              PREQUEST t2ppps(a,i1,a1,j) = T2aiai(a,i1,a1,i2) 
              t2ppp(a,i1,a1)             = t2ppps(a,i1,a1,j) 
              PUT D1aiaS(a,i1,a1)        = t2ppp(a,i1,a1) 
        ENDPARDO a, a1, i1 
#
#       Put 'slices' of VSpipi(a,i2,i1,i3) into 2-d arrays 
#       -------------------------------------------------- 
#
        PARDO a, i1  
              PREQUEST PaIiI(a,i,i1,j) = VSpipi(a,i2,i1,i3) 
              Tppii(a,i1,i,j)          = Paiii(a,i,i1,j)
              tpp(a,i1)                = Tppii(a,i1,i,j)
              t1pp(i1,a)               = tpp(a,i1) 
              PUT XSaI_ij(i1,a)        = t1pp(i1,a) 
        ENDPARDO a, i1  
#
#    alpha/alpha/alpha/ block. 
#    ------------------------- 
#
	DO k # segment size of 1  
#
        IF k >=j 
        IF k >= itrips # istart
        IF k <= itripe # iend
#
           execute server_barrier  
#
           PARDO a, a1, a2
                 IF k >= subb  
                 IF k <= sube  
                    GET                  XSaaai(a,a1,a2,k) 
                    tppp(a,a1,a2)      = XSaaai(a,a1,a2,k)
                 ENDIF 
                 ENDIF 
                 IF k < subb  
                    REQUEST              YSaaai(a,a1,a2,k) a  
                    tppp(a,a1,a2)      = YSaaai(a,a1,a2,k)
                 ENDIF 
                 IF k > sube  
                    REQUEST              YSaaai(a,a1,a2,k) a  
                    tppp(a,a1,a2)      = YSaaai(a,a1,a2,k)
                 ENDIF 
                 PUT Paaak(a,a1,a2) = tppp(a,a1,a2)
                 t1ppp(a,a1,a2)     = 0.0 
                 PUT Y3ijk(a,a1,a2) = t1ppp(a,a1,a2) 
           ENDPARDO a, a1, a2 
#
           PARDO a, a1, i1 
                 PREQUEST t3ppps(a,i1,a1,k) = T2aiai(a,i1,a1,i2) 
                 t3ppp(a,i1,a1)             = t3ppps(a,i1,a1,k) 
                 PUT D2aiaS(a,i1,a1)        = t3ppp(a,i1,a1) 
           ENDPARDO a, a1, i1 
           PARDO a, a1  
                 PREQUEST t1psps(a,i,a1,k) = T2aiai(a,i1,a1,i2) 
                 tppii(a,a1,i,k)           = t1psps(a,i,a1,k) 
                 tpp(a,a1)                 = tppii(a,a1,i,k) 
                 t1pp(a1,a)                = tpp(a,a1) 
                 PUT D1aa(a1,a)            = t1pp(a1,a) 
           ENDPARDO a, a1  
           PARDO a, a1  
                 PREQUEST t2psps(a,j,a1,k) = T2aiai(a,i1,a1,i2) 
                 tppii(a,a1,j,k)           = t2psps(a,j,a1,k) 
                 tpp(a,a1)                 = tppii(a,a1,j,k) 
                 t1pp(a1,a)                = tpp(a,a1) 
                 PUT D2aa(a1,a)            = t1pp(a1,a) 
           ENDPARDO a, a1  
#
#          Put 'slices' of VSpipi(a,i2,i1,i3) into 2-d arrays 
#          -------------------------------------------------- 
#
           PARDO a, i1  
                 PREQUEST P1aIiI(a,i,i1,k) = VSpipi(a,i2,i1,i3) 
                 Tppii(a,i1,i, k)          = P1aiii(a,i,i1,k)
                 tpp(a,i1)                 = Tppii(a,i1,i,k)
                 t1pp(i1,a)                = tpp(a,i1) 
                 PUT XSaI_ik(i1,a)         = t1pp(i1,a) 
           ENDPARDO a, i1  
#
           PARDO a, i1  
                 PREQUEST P2aIiI(a,k,i1,i) = VSpipi(a,i2,i1,i3) 
                 Tppii(a,i1,k, i)          = P2aiii(a,k,i1,i)
                 tpp(a,i1)                 = Tppii(a,i1,k,i)
                 t1pp(i1,a)                = tpp(a,i1) 
                 PUT XSaI_ki(i1,a)         = t1pp(i1,a) 
           ENDPARDO a, i1  
#
           PARDO a, i1  
                 PREQUEST P3aIiI(a,k,i1,j) = VSpipi(a,i2,i1,i3) 
                 Tppii(a,i1,k, j)          = P3aiii(a,k,i1,j)
                 tpp(a,i1)                 = Tppii(a,i1,k,j)
                 t1pp(i1,a)                = tpp(a,i1) 
                 PUT XSaI_kj(i1,a)         = t1pp(i1,a) 
           ENDPARDO a, i1  
           execute sip_barrier  
           execute server_barrier  
#
#          Compute contributions to amplitude array 
#          ---------------------------------------- 
#
           PARDO a, a1, a2  
#
                 IF a <= a1 
                 IF a1 <= a2 
#
#                (1) Contractions giving the (a1,a,a2) permutation 
#                -------------------------------------------------
#
                    tppp(a1,a,a2) = 0.0 
#
                    DO i1 
#
                       GET                D1aiaS(a1,i1,a2) 
                       GET                XSai_ki(i1,a) 
#
                       t1ppp(a1,a,a2)   = D1aiaS(a1,i1,a2)*XSai_ki(i1,a)  
                       tppp(a1,a,a2)   += t1ppp(a1,a,a2) 
#
                    ENDDO i1  
#
                    DO i1 
#
                       GET                D2aiaS(a1,i1,a2)  
                       GET                XSai_ij(i1,a) 
# 
                       t1ppp(a1,a,a2)   = D2aiaS(a1,i1,a2)*XSai_ij(i1,a)  
                       tppp(a1,a,a2)   += t1ppp(a1,a,a2) 
#
                    ENDDO i1  
#
                    DO a3 
#
                       GET                Paaaj(a1,a3,a2) 
                       GET                D1aa(a3,a) 
#
                       t1ppp(a1,a,a2)   = Paaaj(a1,a3,a2)*D1aa(a3,a)   
                       tppp(a1,a,a2)   += t1ppp(a1,a,a2)  
#
                    ENDDO a3 
#
                    DO a3 
#
                       GET                Paaak(a1,a3,a2) 
                       GET                Daa(a3,a)  
#
                       t1ppp(a1,a,a2)   = Paaak(a1,a3,a2)*Daa(a3,a)   
                       tppp(a1,a,a2)   += t1ppp(a1,a,a2) 
#
                    ENDDO a3 
#
                    tppp(a1,a,a2)      *= -1.0 
                    t1ppp(a,a1,a2)      = tppp(a1,a,a2) 
                    PUT Y3ijk(a,a1,a2) += t1ppp(a,a1,a2) 
#
                 ENDIF 
                 ENDIF 
#
           ENDPARDO a, a1, a2   
#
           PARDO a, a1, a2  
#
                 IF a <= a1 
                 IF a1 <= a2 
#
#                   (2) Contractions giving the (a,a1,a2) permutation 
#                   ------------------------------------------------
#
                    tppp(a1,a,a2) = 0.0 
#
                    DO i1 
#
                       GET                 DaiaS(a1,i1,a2) 
                       GET                 XSai_kj(i1,a) 
# 
                       t1ppp(a1,a,a2)    = DaiaS(a1,i1,a2)*XSai_kj(i1,a)  
                       tppp(a1,a,a2)    += t1ppp(a1,a,a2) 
#
                    ENDDO i1  
#
                    DO a3 
#
                       GET                   Paaai(a1,a3,a2) 
                       GET                   D2aa(a3,a) 

                       t1ppp(a1,a,a2)      = Paaai(a1,a3,a2)*D2aa(a3,a) # VFL   
                       tppp(a1,a,a2)      += t1ppp(a1,a,a2) 
#
                    ENDDO a3 
#
                    t1ppp(a,a1,a2)      = tppp(a1,a,a2) 
                    PUT Y3ijk(a,a1,a2) += t1ppp(a,a1,a2) 
#
                 ENDIF 
                 ENDIF 
#
           ENDPARDO a, a1, a2   
#
           PARDO a1, a, a2  
#
                 IF a <= a1 
                 IF a1 <= a2 
#
#                   (2) Contractions giving the (a,a1,a2) permutation 
#                   ------------------------------------------------
#
                    tppp(a,a1,a2) = 0.0 
#
                    DO i1 
#
                       GET                DaiaS(a,i1,a2) 
                       GET                XSai_kj(i1,a1) 
#
                       t1ppp(a,a1,a2)   = DaiaS(a,i1,a2)*XSai_kj(i1,a1)  
                       tppp(a,a1,a2)   += t1ppp(a,a1,a2) 
#
                    ENDDO i1  
#
                    DO a3 
#
                       GET                 Paaai(a,a3,a2) 
                       GET                 D2aa(a3,a1) 
#
                       t1ppp(a,a1,a2)    = Paaai(a,a3,a2)*D2aa(a3,a1)   
                       tppp(a,a1,a2)    += t1ppp(a,a1,a2) 
#
                    ENDDO a3 
#
                    tppp(a,a1,a2)      *= -1.0 
                    PUT Y3ijk(a,a1,a2) += tppp(a,a1,a2) 
#
                 ENDIF 
                 ENDIF 
#
           ENDPARDO a1, a, a2   
#
           PARDO a1, a, a2  
#
                 IF a <= a1 
                 IF a1 <= a2 
#
#                   (3) Contractions giving the (a1,a2,a) permutation 
#                   ------------------------------------------------
#
                    tppp(a,a1,a2) = 0.0 
#
                    DO a3
#
                       GET                 Paaak(a,a3,a2) 
                       GET                 Daa(a3,a1)
#
                       t1ppp(a,a1,a2)    = Paaak(a,a3,a2)*Daa(a3,a1)
                       tppp(a,a1,a2)    += t1ppp(a,a1,a2)
#
                    ENDDO a3
#
                    DO a3
#
                       GET               Paaaj(a,a3,a2) 
                       GET               D1aa(a3,a1)
#
                       t1ppp(a,a1,a2)  = Paaaj(a,a3,a2)*D1aa(a3,a1)
                       tppp(a,a1,a2)  += t1ppp(a,a1,a2)
#
                    ENDDO a3
#
                    DO i1 
#
                       GET                D1aiaS(a,i1,a2) 
                       GET                XSai_ki(i1,a1) 
#
                       t1ppp(a,a1,a2)   = D1aiaS(a,i1,a2)*XSai_ki(i1,a1)  
                       tppp(a,a1,a2)   += t1ppp(a,a1,a2) 
#
                    ENDDO i1 
#
                    DO i1 
#
                       GET                D2aiaS(a,i1,a2) 
                       GET                XSai_ij(i1,a1) 
#
                       t1ppp(a,a1,a2)   = D2aiaS(a,i1,a2)*XSai_ij(i1,a1)  
                       tppp(a,a1,a2)   += t1ppp(a,a1,a2) 
#
                    ENDDO i1 
#
                    PUT Y3ijk(a,a1,a2) += tppp(a,a1,a2) 
#
                 ENDIF 
                 ENDIF 
#
           ENDPARDO a1, a, a2   
#
           PARDO a2, a, a1  
#
                 IF a <= a1 
                 IF a1 <= a2 
#
#                   (3) Contractions giving the (a1,a2,a) permutation 
#                   ------------------------------------------------
#
                    tppp(a1,a2,a) = 0.0 
#
                    DO i1 
#
                       GET                DaiaS(a1,i1,a) 
                       GET                XSai_kj(i1,a2) 
#
                       t1ppp(a1,a2,a)   = DaiaS(a1,i1,a)*XSai_kj(i1,a2)  
                       tppp(a1,a2,a)   += t1ppp(a1,a2,a) 
#
                    ENDDO i1  
#
                    DO a3 
#
                       GET                 Paaai(a1,a3,a) 
                       GET                 D2aa(a3,a2) 
#
                       t1ppp(a1,a2,a)    = Paaai(a1,a3,a)*D2aa(a3,a2)   
                       tppp(a1,a2,a)    += t1ppp(a1,a2,a) 
#
                    ENDDO a3  
#
                    tppp(a1,a2,a)      *= -1.0  
                    t1ppp(a,a1,a2)      = tppp(a1,a2,a) 
                    PUT Y3ijk(a,a1,a2) += t1ppp(a,a1,a2) 
#
                 ENDIF 
                 ENDIF 
#
           ENDPARDO a2, a, a1   
#
           PARDO a2, a, a1  
#
                 IF a <= a1 
                 IF a1 <= a2 
#
#                   (3) Contractions giving the (a1,a2,a) permutation 
#                   ------------------------------------------------
#
                    tppp(a1,a2,a) = 0.0 
#
                    DO i1 
#
                       GET                D1aiaS(a1,i1,a) 
                       GET                XSai_ki(i1,a2) 
#
                       t1ppp(a1,a2,a)   = D1aiaS(a1,i1,a)*XSai_ki(i1,a2)  
                       tppp(a1,a2,a)   += t1ppp(a1,a2,a) 
#
                    ENDDO i1 
#
                    DO i1 
#
                       GET                D2aiaS(a1,i1,a) 
                       GET                XSai_ij(i1,a2) 
#
                       t1ppp(a1,a2,a)   = D2aiaS(a1,i1,a)*XSai_ij(i1,a2)  
                       tppp(a1,a2,a)   += t1ppp(a1,a2,a) 
#
                    ENDDO i1 
#
                    DO a3 
#
                       GET                Paaaj(a1,a3,a) 
                       GET                D1aa(a3,a2) 
#
                       t1ppp(a1,a2,a)   = Paaaj(a1,a3,a)*D1aa(a3,a2)   
                       tppp(a1,a2,a)   += t1ppp(a1,a2,a) 
#
                    ENDDO a3 
#
                    DO a3 
#
                       GET                Paaak(a1,a3,a) 
                       GET                Daa(a3,a2) 
#
                       t1ppp(a1,a2,a)   = Paaak(a1,a3,a)*Daa(a3,a2)   
                       tppp(a1,a2,a)   += t1ppp(a1,a2,a)  
#
                    ENDDO a3 
#
                    t1ppp(a,a1,a2)      = tppp(a1,a2,a)  
                    PUT Y3ijk(a,a1,a2) += t1ppp(a,a1,a2) 
#
                 ENDIF 
                 ENDIF 
#
           ENDPARDO a2, a, a1   
#
           execute sip_barrier 
#
           PARDO a, a1, a2  
#
                 IF a <= a1 
                 IF a1 <= a2 
#
#                   Complete and symmetrize distributed array 
#                   ----------------------------------------- 
#
                    GET                   Y3ijk(a,a1,a2) 
                    s3ppp(a,a1,a2)      = Y3ijk(a,a1,a2) 
#
                    t1ppp(a1,a,a2)      = s3ppp(a,a1,a2) 
                    t2ppp(a2,a1,a)      = s3ppp(a,a1,a2) 
                    t3ppp(a,a2,a1)      = s3ppp(a,a1,a2) 
                    t4ppp(a1,a2,a)      = s3ppp(a,a1,a2) 
                    t5ppp(a2,a,a1)      = s3ppp(a,a1,a2) 
                    t1ppp(a1,a,a2)     *= -1.0 
                    t2ppp(a2,a1,a)     *= -1.0 
                    t3ppp(a,a2,a1)     *= -1.0  

                    PUT Y3ijk(a,a1,a2) = s3ppp(a,a1,a2)  
                    PUT Y3ijk(a1,a,a2) = t1ppp(a1,a,a2)  
                    PUT Y3ijk(a2,a1,a) = t2ppp(a2,a1,a)  
                    PUT Y3ijk(a,a2,a1) = t3ppp(a,a2,a1)  
                    PUT Y3ijk(a1,a2,a) = t4ppp(a1,a2,a)  
                    PUT Y3ijk(a2,a,a1) = t5ppp(a2,a,a1)  
#
                 ENDIF 
                 ENDIF 
#
           ENDPARDO a, a1, a2   
#
           execute sip_barrier 
#
# Compute the contribution to energy and one-particle intermediates 
# -----------------------------------------------------------------  
#
           PARDO a, a1, a2 
#
                 GET                         Y3ijk(a,a1,a2) 
                 taaaiii(a,a1,a2,i,j,k)    = Y3ijk(a,a1,a2)
                 execute energy_tdenominator taaaiii(a,a1,a2,i,j,k) 
#
# Form contribution to the energy 
# ------------------------------- 
#
                 t1ppp(a,a1,a2)           = taaaiii(a,a1,a2,i,j,k) 
                 etemp                    = Y3ijk(a,a1,a2)*t1ppp(a,a1,a2)
                 etemp                    = etemp/6.0  
                 esum1                   += etemp 
#
           ENDPARDO a, a1, a2 
#
# Form Contribution to Sai
# ------------------------
#
# Perm 1
# -------
#
           PARDO a1, a2 
#
                 PREQUEST P1aiai(a1,j,a2,k) = VSpipi(a1,i1,a2,i2)
                 t2ppii(a1,a2,j,k)          = P1aiai(a1,j,a2,k)
                 tpp(a1,a2)                 = t2ppii(a1,a2,j,k)
#
                 DO a 
#
                    GET                         Y3ijk(a,a1,a2) 
                    taaaiii(a,a1,a2,i,j,k)    = Y3ijk(a,a1,a2)
                    execute energy_tdenominator taaaiii(a,a1,a2,i,j,k) 
                    t1pppi(a,a1,a2,i)         = taaaiii(a,a1,a2,i,j,k)
                    xai(a,i)                  = t1pppi(a,a1,a2,i)*tpp(a1,a2)
                    xai(a,i)                 *= 2.0
                    PUT sai(a,i)             += xai(a,i)
#
                 ENDDO a 
#
           ENDPARDO a1, a2 
#
# Perm 2
# -------
#
           PARDO a, a2 
#
                 PREQUEST P2aiai(a,i,a2,k) = VSpipi(a,i1,a2,i3)
                 t2ppii(a,a2,i,k)          = P2aiai(a,i,a2,k)
                 tpp(a,a2)                 = t2ppii(a,a2,i,k)
#
                 DO a1 
#
                    GET                         Y3ijk(a,a1,a2) 
                    taaaiii(a,a1,a2,i,j,k)    = Y3ijk(a,a1,a2)
                    execute energy_tdenominator taaaiii(a,a1,a2,i,j,k) 
                    t1aaaiii(a1,a,a2,j,i,k)   = taaaiii(a,a1,a2,i,j,k)  
                    t1pppi(a1,a,a2,j)         = t1aaaiii(a1,a,a2,j,i,k)
                    xai(a1,j)                 = t1pppi(a1,a,a2,j)*tpp(a,a2)
                    xai(a1,j)                *= 2.0
                    PUT sai(a1,j)            += xai(a1,j)
#
                 ENDDO a1 
#
           ENDPARDO a, a2 
#
# Perm 3
# -------
#
           PARDO a, a1  
#
                 PREQUEST P3aiai(a1,j,a,i) = VSpipi(a1,i3,a,i2)
                 t2ppii(a1,a,j,i)          = P3aiai(a1,j,a,i)
                 tpp(a1,a)                 = t2ppii(a1,a,j,i)
#
                 DO a2 
#
                    GET                         Y3ijk(a,a1,a2) 
                    taaaiii(a,a1,a2,i,j,k)    = Y3ijk(a,a1,a2)
                    execute energy_tdenominator taaaiii(a,a1,a2,i,j,k) 
                    t1aaaiii(a2,a1,a,k,j,i)   = taaaiii(a,a1,a2,i,j,k)  
                    t1pppi(a2,a1,a,k)         = t1aaaiii(a2,a1,a,k,j,i)
                    xai(a2,k)                 = t1pppi(a2,a1,a,k)*tpp(a1,a)
                    xai(a2,k)                *= 2.0
                    PUT sai(a2,k)            += xai(a2,k)
#
                 ENDDO a2 
#
           ENDPARDO a, a1 
           execute sip_barrier
           execute server_barrier
#
        ENDIF 
        ENDIF 
        ENDIF # k >=j 
        ENDDO k # segment size of 1  
#
#    DONE alpha/alpha/alpha/ block. 
#    ------------------------------ 
#
        ENDIF # i>=j 
        ENDDO j # segment size of 1  
#
     ENDDO i # segment size of 1  
#
     execute sip_barrier
     collective ecorraaa += esum1 
     execute print_scalar ecorraaa 
#
     delete DaiaS 
     delete Daa 
     delete D1aiaS 
     delete Y3ijk 
     delete D2aiaS 
     delete D1aa 
     delete D2aa 
#
     delete XSai_ij 
     delete XSai_ik 
     delete XSai_ki 
     delete XSai_kj 
     execute sip_barrier 
     execute sip_barrier 
     execute server_barrier 
#
     ENDPROC T4AAA 
#    ------------- 
#
# --------------------------------------------------------------------------
#
# --------------------------------------------------------------------------
#
     PROC T4AAB 
#    ---------- 
#
     create DaiaS 
     create DaSbj 
     create Dab 
     create DaibS 
     create Y3aab 
     create Pbbai 
     create Pbbaj 
     create Paabk 
     create Daa 
     create D1ab 
     create D1aiaS 
     create D1aSbj 
#
     create XSai_ji 
     create XaI_ik
     create XaI_jk
     create XiI_ik
     create XiI_jk
     execute sip_barrier 
     esum2 = 0.0 
     execute sip_barrier 
#
#    alpha/alpha/beta/ block.
#    ------------------------
#
     DO i # segment size of 1  
#
        execute sip_barrier 
        execute server_barrier 
#
        PARDO a, a1, a2
              IF i >= subb  
              IF i <= sube  
                 GET                  XSaaai(a,a1,a2,i) 
                 tppp(a,a1,a2)      = XSaaai(a,a1,a2,i)
              ENDIF 
              ENDIF 
              IF i < subb  
                 REQUEST              YSaaai(a,a1,a2,i) a  
                 tppp(a,a1,a2)      = YSaaai(a,a1,a2,i)
              ENDIF 
              IF i > sube  
                 REQUEST              YSaaai(a,a1,a2,i) a  
                 tppp(a,a1,a2)      = YSaaai(a,a1,a2,i)
              ENDIF 
              PUT Paaai(a,a1,a2) = tppp(a,a1,a2)
        ENDPARDO a, a1, a2 
#
        PARDO b, b1, a 
              IF i >= subb  
              IF i <= sube  
                 GET                 Xaaai(b,b1,a,i) 
                 tqqp(b,b1,a)      = Xaaai(b,b1,a,i)
              ENDIF 
              ENDIF 
              IF i < subb  
                 REQUEST             Yaaai(b,b1,a,i) a 
                 tqqp(b,b1,a)      = Yaaai(b,b1,a,i)
              ENDIF 
              IF i > sube  
                 REQUEST             Yaaai(b,b1,a,i) a 
                 tqqp(b,b1,a)      = Yaaai(b,b1,a,i)
              ENDIF 
              PUT Pbbai(b,b1,a) = tqqp(b,b1,a)
        ENDPARDO b, b1, a 
#
        PARDO a, a1, i1 
              PREQUEST t1ppps(a,i1,a1,i) = T2aiai(a,i1,a1,i2) 
              t1ppp(a,i1,a1)             = t1ppps(a,i1,a1,i) 
              PUT DaiaS(a,i1,a1)         = t1ppp(a,i1,a1) 
        ENDPARDO a, a1, i1 
        PARDO a, b, j1 
              PREQUEST tpsqq(a,i,b,j1) = T2aibj(a,i1,b,j1) 
              tabji(a,b,j1,i)          = tpsqq(a,i,b,j1)  
              tpqq(a,b,j1)             = tabji(a,b,j1,i) 
              PUT DaSbj(a,b,j1)        = tpqq(a,b,j1) 
        ENDPARDO a, b, j1 
#
        DO j # segment size of 1  
#
        IF j >= i 
#
           execute server_barrier 
#
           PARDO a, a1, a2
                 IF j >= subb  
                 IF j <= sube  
                    GET                  XSaaai(a,a1,a2,j) 
                    tppp(a,a1,a2)      = XSaaai(a,a1,a2,j)
                 ENDIF 
                 ENDIF 
                 IF j < subb  
                    REQUEST              YSaaai(a,a1,a2,j) a  
                    tppp(a,a1,a2)      = YSaaai(a,a1,a2,j)
                 ENDIF 
                 IF j > sube  
                    REQUEST              YSaaai(a,a1,a2,j) a  
                    tppp(a,a1,a2)      = YSaaai(a,a1,a2,j)
                 ENDIF 
                 PUT Paaaj(a,a1,a2) = tppp(a,a1,a2)
           ENDPARDO a, a1, a2 
#
           PARDO b, b1, a 
                 IF j >= subb  
                 IF j <= sube  
                    GET                 Xaaai(b,b1,a,j) 
                    tqqp(b,b1,a)      = Xaaai(b,b1,a,j)
                 ENDIF 
                 ENDIF 
                 IF j < subb  
                    REQUEST             Yaaai(b,b1,a,j) a 
                    tqqp(b,b1,a)      = Yaaai(b,b1,a,j)
                 ENDIF 
                 IF j > sube  
                    REQUEST             Yaaai(b,b1,a,j) a 
                    tqqp(b,b1,a)      = Yaaai(b,b1,a,j)
                 ENDIF 
                 PUT Pbbaj(b,b1,a) = tqqp(b,b1,a)
           ENDPARDO b, b1, a 
#
           PARDO a, a1  
                 PREQUEST tpsps(a,j,a1,i) = T2aiai(a,i1,a1,i2) 
                 tppii(a,a1,j,i)          = tpsps(a,j,a1,i) 
                 tpp(a,a1)                = tppii(a,a1,j,i) 
                 t1pp(a1,a)               = tpp(a,a1) 
                 PUT Daa(a1,a)            = t1pp(a1,a) 
           ENDPARDO a, a1  
           PARDO a, a1, i1 
                 PREQUEST t2ppps(a,i1,a1,j) = T2aiai(a,i1,a1,i2) 
                 t2ppp(a,i1,a1)             = t2ppps(a,i1,a1,j) 
                 PUT D1aiaS(a,i1,a1)        = t2ppp(a,i1,a1) 
           ENDPARDO a, a1, i1 
           PARDO a, b, j1 
                 PREQUEST t1psqq(a,j,b,j1) = T2aibj(a,i1,b,j1) 
                 tabji(a,b,j1,j)           = t1psqq(a,j,b,j1)  
                 t1pqq(a,b,j1)             = tabji(a,b,j1,j) 
                 PUT D1aSbj(a,b,j1)        = t1pqq(a,b,j1) 
           ENDPARDO a, b, j1 
#
           DO kb  # segment size of 1
           IF kb >= itrips # istart 
           IF kb <= itripe # iend 
#
           execute server_barrier 
#
# Zero out the amplitude array 
# ---------------------------- 
#
           PARDO a, a1, b
                 IF kb >= subb  
                 IF kb <= sube  
                    GET                 Xaaai(a,a1,b,kb) 
                    tppq(a,a1,b)      = Xaaai(a,a1,b,kb)
                 ENDIF 
                 ENDIF 
                 IF kb < subb  
                    REQUEST             Yaaai(a,a1,b,kb) a  
                    tppq(a,a1,b)      = Yaaai(a,a1,b,kb)
                 ENDIF 
                 IF kb > sube  
                    REQUEST             Yaaai(a,a1,b,kb) a  
                    tppq(a,a1,b)      = Yaaai(a,a1,b,kb)
                 ENDIF 
                 PUT Paabk(a,a1,b) = tppq(a,a1,b)
                 tppq(a,a1,b) = 0.0 
                 PUT Y3aab(a,a1,b) = tppq(a,a1,b)  
           ENDPARDO a, a1, b 
#
           PARDO a, b, i2 
                 PREQUEST t1ppqs(a,i2,b,kb) = T2aibj(a,i2,b,j1) 
                 t1ppq(a,i2,b)              = t1ppqs(a,i2,b,kb) 
                 PUT DaibS(a,i2,b)          = t1ppq(a,i2,b) 
           ENDPARDO a, b, i2 
           PARDO a, b 
                 PREQUEST tpsqs(a,i,b,kb)  = T2aibj(a,i1,b,j1) 
                 tpqij(a,b,i,kb)           = tpsqs(a,i,b,kb) 
                 tpq(a,b)                  = tpqij(a,b,i,kb) 
                 t1pp(b,a)                 = tpq(a,b) 
                 PUT Dab(b,a)              = t1pp(b,a) 
           ENDPARDO a, b 
           PARDO a, b 
                 PREQUEST t1psqs(a,j,b,kb) = T2aibj(a,i1,b,j1) 
                 tpqij(a,b,j,kb)           = t1psqs(a,j,b,kb) 
                 tpq(a,b)                  = tpqij(a,b,j,kb) 
                 PUT D1ab(a,b)             = tpq(a,b) 
           ENDPARDO a, b 
#
#          Put 'slices' of VSpipi(a,i2,i1,i3) into 2-d arrays 
#          -------------------------------------------------- 
#
           PARDO a, i1  
                 PREQUEST P4aIiI(a,j,i1,i) = VSpipi(a,i2,i1,i3) 
                 Tppii(a,i1,j,i)           = P4aiii(a,j,i1,i)
                 tpp(a,i1)                 = Tppii(a,i1,j,i)
                 t1pp(i1,a)                = tpp(a,i1)  
                 PUT XSaI_ji(i1,a)         = t1pp(i1,a) 
           ENDPARDO a, i1  
#
           PARDO a, j1 
                 PREQUEST PaIjJ(a,i,j1,kb) = Vpiqj(a,i2,j1,j3) 
                 tpqij(a,j1,i,kb)          = PaIjJ(a,i,j1,kb) 
                 tpq(a,j1)                 = tpqij(a,j1,i,kb) 
                 t1pq(j1,a)                = tpq(a,j1) 
                 PUT XaI_ik(j1,a)          = t1pq(j1,a)  
           ENDPARDO a, j1 
#
           PARDO a, j1 
                 PREQUEST P1aIjJ(a,j,j1,kb) = Vpiqj(a,i2,j1,j3) 
                 tpqij(a,j1,j,kb)          = P1aIjJ(a,j,j1,kb) 
                 tpq(a,j1)                 = tpqij(a,j1,j,kb)  
                 t1pq(j1,a)                = tpq(a,j1) 
                 PUT XaI_jk(j1,a)          = t1pq(j1,a)  
           ENDPARDO a, j1 
#
           PARDO b, i1  
                 PREQUEST PiIbJ(i1,i,b,kb) = Vpiqj(i1,i2,b,j3) 
                 tpqij(i1,b,i,kb)          = PiIbJ(i1,i,b,kb) 
                 tpq(i1,b)                 = tpqij(i1,b,i,kb) 
                 PUT XiI_ik(i1,b)          = tpq(i1,b)
           ENDPARDO b, i1 
#
           PARDO b, i1  
                 PREQUEST P1iIbJ(i1,j,b,kb) = Vpiqj(i1,i2,b,j3) 
                 tpqij(i1,b,j,kb)          = P1iIbJ(i1,j,b,kb) 
                 tpq(i1,b)                 = tpqij(i1,b,j,kb) 
                 PUT XiI_jk(i1,b)          = tpq(i1,b)
           ENDPARDO b, i1 
#
           execute sip_barrier  
           execute server_barrier  
#
#          Compute contributions to triples amplitudes 
#          ------------------------------------------- 
#
           PARDO b, a1, b1 
#
GET Pbbai(b,b1,a1)
#
                 DO a 
#
                    IF a <= a1
#
                       GET               D1ab(a,b1)
                       tqp(b1,a)       = D1ab(a,b1)
                       t1qpp(b,a,a1)   = Pbbai(b,b1,a1)*tqp(b1,a)
                       t1qpp(b,a,a1)  *= -1.0
                       t3ppq(a,a1,b)   = t1qpp(b,a,a1) 
#
# Form the distributed amplitude array
# ------------------------------------
#
                       PUT Y3aab(a,a1,b) += t3ppq(a,a1,b)
#
                    ENDIF
#
                 ENDDO a 
#
           ENDPARDO b, a1, b1
#
           PARDO b, a1, b1
#
                 GET Pbbaj(b,b1,a1)
#
                 DO a 
#
                    IF a <= a1
#
                       GET               Dab(b1,a)
                       t1qpp(b,a,a1)   = Pbbaj(b,b1,a1)*Dab(b1,a)
                       tppq(a,a1,b)    = t1qpp(b,a,a1)
#
# Form the distributed amplitude array
# ------------------------------------
#
                       PUT Y3aab(a,a1,b) += tppq(a,a1,b)
#
                    ENDIF
#
                 ENDDO a 
#
           ENDPARDO b, a1, b1 
#
           PARDO a, b, b1  
#
                 GET Pbbai(b,b1,a)
#
                 DO a1 
#
                    IF a <= a1 
#
                       GET               D1ab(a1,b1)
                       tqp(b1,a1)      = D1ab(a1,b1)
                       t1qpp(b,a1,a)   = Pbbai(b,b1,a)*tqp(b1,a1)
                       tppq(a,a1,b)    = t1qpp(b,a1,a)
#
# Form the distributed amplitude array
# ------------------------------------
#
                       PUT Y3aab(a,a1,b) += tppq(a,a1,b)
#
                    ENDIF
#
                 ENDDO a1 
#
           ENDPARDO a, b, b1  
#
           PARDO a, b, b1 
#
                 GET Pbbaj(b,b1,a)
#
                 DO a1 
#
                    IF a <= a1
#
                       GET               Dab(b1,a1)
                       t1qpp(b,a1,a)   = Pbbaj(b,b1,a)*Dab(b1,a1)
                       t1qpp(b,a1,a)  *= -1.0
                       tppq(a,a1,b)    = t1qpp(b,a1,a)
#
# Form the distributed amplitude array
# ------------------------------------
#
                       PUT Y3aab(a,a1,b) += tppq(a,a1,b)
#
                    ENDIF
#
                 ENDDO a1 
#
           ENDPARDO a, b, b1 
#
           PARDO a, a1, a2
#
                 IF a <= a1 
#
                    GET Paaaj(a,a2,a1)
#
                    DO b 
# 
                       GET             Dab(b,a2)
                       tpp(a2,b)     = Dab(b,a2) 
#
                       t1pqp(a,b,a1) = Paaaj(a,a2,a1)*tpp(a2,b)
                       tppq(a,a1,b)  = t1pqp(a,b,a1)
#
# Form the distributed amplitude array
# ------------------------------------
#
                       PUT Y3aab(a,a1,b) += tppq(a,a1,b)
#
                    ENDDO b 
#
                 ENDIF
#
           ENDPARDO a, a1, a2
#
           PARDO a, a1, a2 
#
                 IF a <= a1 
#
                    GET Paaai(a,a2,a1)
# 
                    DO b
#
                       GET               D1ab(a2,b)
                       t1pqp(a,b,a1)   = Paaai(a,a2,a1)*D1ab(a2,b)
                       tppq(a,a1,b)    = t1pqp(a,b,a1) 
                       tppq(a,a1,b)   *= -1.0  
#
# Form the distributed amplitude array
# ------------------------------------
#
                       PUT Y3aab(a,a1,b) += tppq(a,a1,b)
#
                    ENDDO b
#
                 ENDIF
#
           ENDPARDO a, a1, a2  
#
           PARDO b, a1, a2
#
                 GET Paabk(a1,a2,b)
#
                 DO a 
#
                    IF a <= a1
#
                       GET             Daa(a2,a)
                       tppq(a1,a,b)  = Paabk(a1,a2,b)*Daa(a2,a)
                       tppq(a1,a,b) *= -1.0
                       t1ppq(a,a1,b) = tppq(a1,a,b)  
#
# Form the distributed amplitude array
# ------------------------------------
#
                       PUT Y3aab(a,a1,b) += t1ppq(a,a1,b)
#
                    ENDIF
#
                 ENDDO a 
#
           ENDPARDO b, a1, a2   
#
           PARDO b, a, a2 
#
                 GET Paabk(a,a2,b)
#
                 DO a1 
#
                    IF a <= a1 
#
                       GET                  Daa(a2,a1) 
                       t1ppq(a,a1,b)      = Paabk(a,a2,b)*Daa(a2,a1)
                       PUT Y3aab(a,a1,b) += t1ppq(a,a1,b)
#
                    ENDIF 
#
                 ENDDO a1 
#
           ENDPARDO b, a, a2 
#
           PARDO b, a1, a
#
                 IF a <= a1 
# 
                    tpqp(a,b,a1) = 0.0
#
                    DO j1
#
                       GET                 DaSbj(a,b,j1)
                       GET                 Xai_jk(j1,a1)
#
                       t1pqp(a,b,a1)     = DaSbj(a,b,j1)*Xai_jk(j1,a1)
                       tpqp(a,b,a1)     += t1pqp(a,b,a1)
#
                    ENDDO j1
#
                    DO i1
#
                       GET               D1aiaS(a,i1,a1)
                       GET               XiI_ik(i1,b)
#
                       t1pqp(a,b,a1)   = D1aiaS(a,i1,a1)*XiI_ik(i1,b)
                       tpqp(a,b,a1)   += t1pqp(a,b,a1)
#
                    ENDDO i1
#
                    tpqp(a,b,a1)      *= -1.0
                    tppq(a,a1,b)       = tpqp(a,b,a1) 
#
# Form the distributed amplitude array
# ------------------------------------
#
                    PUT Y3aab(a,a1,b) += tppq(a,a1,b)
#
                 ENDIF
#
           ENDPARDO b, a1, a 
#
           PARDO b, a1, a
#
                 IF a <= a1
#
                    tpqp(a,b,a1) = 0.0
#
                    DO j1
#
                       GET                 D1aSbj(a,b,j1)
                       GET                 Xai_ik(j1,a1)
#
                       t1pqp(a,b,a1)     = D1aSbj(a,b,j1)*Xai_ik(j1,a1)
                       tpqp(a,b,a1)     += t1pqp(a,b,a1)
#
                    ENDDO j1
#
                    DO i1
#
                       GET               DaiaS(a,i1,a1)
                       GET               XiI_jk(i1,b)
#
                       t1pqp(a,b,a1)   = DaiaS(a,i1,a1)*XiI_jk(i1,b)
                       tpqp(a,b,a1)   += t1pqp(a,b,a1)
#
                    ENDDO i1
#
                    tppq(a,a1,b)      = tpqp(a,b,a1) 
#
# Form the distributed amplitude array
# ------------------------------------
#
                    PUT Y3aab(a,a1,b) += tppq(a,a1,b)
#
                 ENDIF
#
           ENDPARDO b, a1, a
#
           PARDO b, a1, a
#
                 IF a <= a1
#
                    tppq(a1,a,b) = 0.0
                    t3ppq(a,a1,b) = 0.0 
#
                    DO i1
#
                       GET                DaibS(a1,i1,b)
                       GET                XSaI_ji(i1,a)
#
                       t1ppq(a1,a,b)    = DaibS(a1,i1,b)*XSaI_ji(i1,a)
                       tppq(a1,a,b)    += t1ppq(a1,a,b)
#
                    ENDDO i1
#
                    t1ppq(a,a1,b)      = tppq(a1,a,b)
                    t3ppq(a,a1,b)     += t1ppq(a,a1,b)
#
#                   (5) Contractions giving the (a,a1,b) permutation
#                   ------------------------------------------------
#
                    tppq(a,a1,b) = 0.0
#
                    DO i1
#
                       GET                DaibS(a,i1,b)
                       GET                XSaI_ji(i1,a1)
#
                       t1ppq(a,a1,b)    = DaibS(a,i1,b)*XSaI_ji(i1,a1)
                       tppq(a,a1,b)    += t1ppq(a,a1,b)
#
                    ENDDO i1
#
                    tppq(a,a1,b)      *= -1.0
                    t3ppq(a,a1,b)     += tppq(a,a1,b)
#
#                   (6) Contractions giving the (a1,b,a) permutation
#                   ------------------------------------------------
#
                    tpqp(a1,b,a) = 0.0
#
                    DO j1
#
                       GET                D1aSbj(a1,b,j1)
                       GET                Xai_ik(j1,a)
#
                       t1pqp(a1,b,a)    = D1aSbj(a1,b,j1)*Xai_ik(j1,a)
                       tpqp(a1,b,a)    += t1pqp(a1,b,a)
#
                    ENDDO j1
#
                    tpqp(a1,b,a)      *= -1.0
#
                    DO j1
#
                       GET                DaSbj(a1,b,j1)
                       GET                Xai_jk(j1,a)
#
                       t1pqp(a1,b,a)    = DaSbj(a1,b,j1)*Xai_jk(j1,a)
                       tpqp(a1,b,a)    += t1pqp(a1,b,a)
#
                    ENDDO j1
#
                    tppq(a,a1,b)       = tpqp(a1,b,a)
                    t3ppq(a,a1,b)     += tppq(a,a1,b)
#
# Form the distributed amplitude array
# ------------------------------------
#
                    PUT Y3aab(a,a1,b) += t3ppq(a,a1,b)
#
                 ENDIF
#
           ENDPARDO b, a1, a
#
           execute sip_barrier 
#
# Symmetrize the distributed amplitude array 
# ------------------------------------------ 
#
           PARDO a, a1, b 
                 IF a <= a1 
                    GET                 Y3aab(a,a1,b) 
                    t2ppq(a1,a,b)     = Y3aab(a,a1,b)
                    t2ppq(a1,a,b)    *= -1.0
                    PUT Y3aab(a1,a,b) = t2ppq(a1,a,b) 
                 ENDIF 
           ENDPARDO a, a1, b 
#
           execute sip_barrier 
#
# Compute contribution to the energy and the one-particle intermediates 
# --------------------------------------------------------------------- 
#
           PARDO a, a1, b 
#
                 GET                         Y3aab(a,a1,b)
                 Taabiij(a,a1,b,i,j,kb)    = Y3aab(a,a1,b) 
                 execute energy_tdenominator Taabiij(a,a1,b,i,j,kb)  
#
# Compute contribution to energy
# ------------------------------ 

                 t1ppq(a,a1,b) = Taabiij(a,a1,b,i,j,kb) 
                 etemp         = Y3aab(a,a1,b)*t1ppq(a,a1,b) 
                 etemp         = etemp/2.0 
                 esum2        += etemp 
#
           ENDPARDO a, a1, b
#
#    Form contribution to sai
#    ------------------------
#
#          PERM 1
#          ------
#
           PARDO a1, b 
#
                 PREQUEST P1aibj(a1,j,b,kb) = Vpiqj(a1,i1,b,j2)
                 t2pqij(a1,b,j,kb)          = P1aibj(a1,j,b,kb)
                 tpq(a1,b)                  = t2pqij(a1,b,j,kb)
#
                 DO a 
#
                    GET                         Y3aab(a,a1,b)
                    Taabiij(a,a1,b,i,j,kb)    = Y3aab(a,a1,b) 
                    execute energy_tdenominator Taabiij(a,a1,b,i,j,kb)  
                    t1ppqi(a,a1,b,i)          = taabiij(a,a1,b,i,j,kb)
                    xai(a,i)                  = t1ppqi(a,a1,b,i)*tpq(a1,b)
                    xai(a,i)                 *= 4.0
                    PUT sai(a,i)             += xai(a,i)
#
                 ENDDO a 
#
           ENDPARDO a1, b
#
#          PERM 2
#          ------
#
           PARDO a, b 
#
                 PREQUEST P2aibj(a,i,b,kb) = Vpiqj(a,i1,b,j2)
                 t2pqij(a,b,i,kb)          = P2aibj(a,i,b,kb)
                 tpq(a,b)                  = t2pqij(a,b,i,kb)
#
                 DO a1 
#
                    GET                         Y3aab(a,a1,b)
                    Taabiij(a,a1,b,i,j,kb)    = Y3aab(a,a1,b) 
                    execute energy_tdenominator Taabiij(a,a1,b,i,j,kb)  
                    T1aabiij(a,a1,b,j,i,kb)   = taabiij(a,a1,b,i,j,kb)  
                    t1ppqi(a,a1,b,j)          = t1aabiij(a,a1,b,j,i,kb)
                    xai(a1,j)                 = t1ppqi(a,a1,b,j)*tpq(a,b)
                    xai(a1,j)                *= 4.0
                    PUT sai(a1,j)            += xai(a1,j)
#
                 ENDDO a1 
#
           ENDPARDO a, b
#
#          PERM 3
#          ------
#
           PARDO a, a1  
#
                 PREQUEST P3aiai(a,i,a1,j) = VSpipi(a,i1,a1,i2)
                 tppii(a,a1,i,j)           = P3aiai(a,i,a1,j)
                 tpp(a,a1)                 = tppii(a,a1,i,j)
#
                 DO b 
#
                    GET                         Y3aab(a,a1,b)
                    Taabiij(a,a1,b,i,j,kb)    = Y3aab(a,a1,b) 
                    execute energy_tdenominator Taabiij(a,a1,b,i,j,kb)  
                    Tbaajii(b,a,a1,kb,i,j)    = taabiij(a,a1,b,i,j,kb) 
                    tqppj(b,a,a1,kb)          = Tbaajii(b,a,a1,kb,i,j)  
#
                    xbj(b,kb)                 = tqppj(b,a,a1,kb)*tpp(a,a1)
                    xbj(b,kb)                *= 2.0  
                    PUT sai(b,kb)            += xbj(b,kb)
#
                 ENDDO b 
#
           ENDPARDO a, a1 
           execute sip_barrier 
#
           ENDIF 
           ENDIF 
           ENDDO kb # segment size of 1
#
        execute sip_barrier 
#
        ENDIF # i>=j 
        ENDDO j # segment size of 1  
#
     ENDDO i # segment size of 1  
#
     execute server_barrier 
     execute sip_barrier
     collective ecorraab += esum2 
     execute print_scalar ecorraab 

     esum = 0.0 
     esum = ecorraaa 
     esum += ecorraab 
     execute print_scalar esum 
#
     delete DaiaS 
     delete DaSbj 
     delete Dab 
     delete DaibS 
     delete Y3aab 
     delete Daa 
     delete D1ab 
     delete D1aiaS 
     delete D1aSbj 
#
     delete XiI_ik
     delete XiI_jk
     delete XSai_ji 
     delete XaI_ik
     delete XaI_jk
     execute sip_barrier 
     execute server_barrier 
#
#    alpha/alpha/beta/ block.
#
     ENDPROC T4AAB 
#    ------------- 
#
# --------------------------------------------------------------------------
#
     PROC ST5 
#    -------- 
#
# Compute contribution to the energy from sai 
# -------------------------------------------  
#
     esum = 0.0 
     execute sip_barrier 
     PARDO a, i 
#
	   PREQUEST Pai(a,i) = t1a_old(a,i1) 
	   GET sai(a,i) 
	   etemp = Pai(a,i)*sai(a,i) 
	   etemp *= 0.25
	   esum += etemp  
#
     ENDPARDO a, i 
#
     execute sip_barrier 
     collective ecorrsa += esum 
     execute sip_barrier 
     execute print_scalar ecorrsa  
     execute server_barrier 
#
     ENDPROC ST5 
#    ----------- 
#
# --------------------------------------------------------------------------
#
# --------------------------------------------------------------------------
#
     PROC FORM_IDENTITY
#    ------------------
#
     create IIi
     create IJj
#
# Form identity arrays
# --------------------
#
     DO i1
     DO i2
           tii(i1,i2) = 1.0
           t1ii(i1,i2) = 0.0
           execute return_diagonal tii t1ii
           tpp(i1,i2) = t1ii(i1,i2)
           PREPARE Sii(i1,i2) = tpp(i1,i2)
     ENDDO i2
     ENDDO i1
#
     DO j1
     DO j2
           tjj(j1,j2) = 1.0
           t1jj(j1,j2) = 0.0
           execute return_diagonal tjj t1jj
           tqq(j1,j2) = t1jj(j1,j2)
           PREPARE Sjj(j1,j2) = tqq(j1,j2)
     ENDDO j2
     ENDDO j1
     execute sip_barrier
     execute server_barrier
#
     PARDO i1, i
#
           PREQUEST PIi(i,i1) = Sii(i2,i1)
           PUT IIi(i,i1) = PIi(i,i1)
#
     ENDPARDO i1, i
#
     PARDO j1, jb
#
           PREQUEST PJj(jb,j1) = Sjj(j2,j1)
           PUT IJj(jb,j1) = PJj(jb,j1)
#
     ENDPARDO j1, jb
     execute sip_barrier
#
     ENDPROC FORM_IDENTITY
#    ---------------------
#
# MAIN PROGRAM 
#
# --------------------------------------------------------------------------
#
# Compute E^{[4]}_T contribution only and form sai and sbj  
# -------------------------------------------------------- 
#
     create sai  
     create sbj  
     execute sip_barrier 
#
     CALL READ_BLOCKDATA  
     CALL FORM_IDENTITY 
     execute print_scalar etemp 
     CALL PDATA 
     execute print_scalar etemp 
     CALL T4AAA 
     CALL T4AAB 
     CALL ST5  
#
# Sum the total energy contribution and add to etot. 
# -------------------------------------------------- 
#
     ecorrT  = ecorraaa  
     ecorrT += ecorraab 
     ecorrT += ecorrsa 
     ecorrT *= 2.0 
     execute print_scalar ecorrT 

    #totenerg += ecorraaa 
    #totenerg += ecorraab 
    #totenerg += ecorrsa 
     totenerg += ecorrT 
#
     execute sip_barrier
#
     ENDSIAL CCSDPT_RHF_PP   
#
#
#
