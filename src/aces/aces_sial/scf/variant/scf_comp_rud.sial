#  Copyright (c) 2003-2010 University of Florida
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  The GNU General Public License is included in this distribution
#  in the file COPYRIGHT.
                           SIAL COMP_RUD         
#
# ----------------------------------------------------------------------------
#
# The sial program SIAL_UHF performs a UHF based SCF calculation. Davidson 
# damping is performed during the first scf_beg-1 iterations after which the 
# DIIS is turned on with scf_order. At present DIIS is turned on after the 
# third iteration and 6 histories are kept. 
#
# Fock matrix final arrays:
# ------------------------- 
#
# 1. Fpq_a  
# 2. Fpq_b  
#
# Transformation coefficients final arrays:
# ----------------------------------------- 
#
# 1. Ca  
# 2. Cb  
#
# Converged SCF energy:
# --------------------- 
#
# 1. scfeneg 
#
# BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
#
# Declare indeces 
# --------------- 
#
      index   kiter  = 1, scf_iter  
#
      aoindex mu     = 1, norb
      aoindex nu     = 1, norb
      aoindex lambda = 1, norb
      aoindex sigma  = 1, norb
      aoindex ii     = 1, norb
      aoindex jj     = 1, norb
#
      moaindex i = baocc, eaocc
      moaindex i1= baocc, eaocc
      moaindex i2= baocc, eaocc
      moaindex i3= baocc, eaocc
#
      moaindex a = bavirt, eavirt
      moaindex a1= bavirt, eavirt
      moaindex a2= bavirt, eavirt
      moaindex a3= bavirt, eavirt
#
      mobindex j = bbocc, ebocc
      mobindex j1= bbocc, ebocc
      mobindex j2= bbocc, ebocc
      mobindex j3= bbocc, ebocc
#
      mobindex b = bbvirt, ebvirt
      mobindex b1= bbvirt, ebvirt
      mobindex b2= bbvirt, ebvirt
      mobindex b3= bbvirt, ebvirt
#
      moaindex p = baocc, eavirt
      moaindex p1= baocc, eavirt
      moaindex p2= baocc, eavirt
      moaindex p3= baocc, eavirt
#
      mobindex q = bbocc, ebvirt
      mobindex q1= bbocc, ebvirt
      mobindex q2= bbocc, ebvirt
      mobindex q3= bbocc, ebvirt
# 
# Declare one-particle density arrays 
# ----------------------------------- 
#
      distributed Dhfa(mu,nu) 
      distributed Dhfb(mu,nu) 
      static SDhfa(mu,nu) 
      static SDhfb(mu,nu) 
      distributed Dhfa_old(mu,nu) 
      distributed Dhfb_old(mu,nu) 
#
      distributed Fpq_a(mu,nu) 
      distributed Fpq_b(mu,nu) 
      static SFpq_a(mu,nu) 
      static SFpq_b(mu,nu) 
      distributed FTpq_a(mu,nu) 
      distributed FTpq_b(mu,nu) 
      distributed CBT_a(mu,p) 
      distributed CBT_b(mu,q) 
# 
# Declare JJMs AAT arrays 
# ----------------------------------- 
#
      distributed OVL(mu,nu) 
#
# Declare temporary arrays 
# ------------------------ 
#
      temp Txxxx(mu,nu,lambda,sigma) 
      temp TSxxxx(mu,nu,lambda,sigma) 
      temp T1xxxx(mu,nu,lambda,sigma) 
      temp T2xxxx(mu,nu,lambda,sigma) 
      temp T3xxxx(mu,nu,lambda,sigma) 
      temp T4xxxx(mu,nu,lambda,sigma) 
      temp T5xxxx(mu,nu,lambda,sigma) 
      temp TAxxxx(mu,ii,lambda,sigma) 
      temp TBxxxx(mu,ii,lambda,jj) 
      temp Txxxi(mu,nu,lambda,i) 
      temp T1xxxi(mu,nu,lambda,i) 
      temp T2xxxi(mu,nu,lambda,i) 
      temp T3xxxi(mu,nu,lambda,i) 
      temp T4xxxi(mu,nu,lambda,i) 
      temp TAxxxi(mu,nu,lambda,i) 
      temp TBxxxi(mu,nu,lambda,i) 
      temp Txxxj(mu,nu,lambda,j) 
      temp T1xxxj(mu,nu,lambda,j) 
      temp T2xxxj(mu,nu,lambda,j) 
      temp T3xxxj(mu,nu,lambda,j) 
      temp T4xxxj(mu,nu,lambda,j) 
      temp TAxxxj(mu,nu,lambda,j) 
      temp TBxxxj(mu,nu,lambda,j) 
      temp Txixx(mu,i,nu,lambda) 
      temp Txjxx(mu,j,nu,lambda) 
      temp Tixxx(i,mu,nu,lambda) 
      temp Tjxxx(j,mu,nu,lambda) 
      temp Ixi(mu,i) 
      temp I1xi(mu,i) 
      temp Ixj(mu,j) 
      temp I1xj(mu,j) 
      temp Tpq(mu,nu) 
      temp T1pq(mu,nu) 
      temp Txi(mu,i) 
      temp T1xi(mu,i) 
      temp Txj(mu,j) 
      temp T1xj(mu,j) 
      temp Txx(mu,nu) 
      temp TAxx(mu,nu) 
      temp TBxx(mu,nu) 
      temp T1xx(mu,nu) 
      temp T2xx(mu,nu) 
      temp Tii(i,i1) 
      temp T1ii(i,i1) 
      temp Tjj(j,j1) 
      temp T1jj(j,j1) 
      temp Txp(mu,p) 
      temp T1xp(mu,p) 
      temp Tpp(p,p1) 
      temp T1pp(p,p1) 
      temp Txq(mu,q) 
      temp T1xq(mu,q) 
      temp Tqq(q,q1) 
      temp T1qq(q,q1) 
#
# Declare served arrays 
# --------------------- 
#
      temp aoint(mu,nu,lambda,sigma)
     #served saoint(mu,mu,lambda,lambda)
#
# Declare static arrays 
# --------------------- 
#
      static FSpq_a(mu,nu) 
      static FSpq_b(mu,nu) 
      distributed Qxx(mu,nu) 
      distributed FTa(p,p1) 
      distributed FTb(q,q1) 
      static X1(mu,nu) 
#
# Arrays used in DIIS procedure 
# ----------------------------- 
#  
      distributed Fai(a,i) 
      distributed F1ai(a,i) 
      distributed F2ai(a,i) 
      distributed F3ai(a,i) 
      distributed F4ai(a,i) 
      distributed F5ai(a,i) 
      distributed F6ai(a,i) 
      distributed F7ai(a,i) 
      distributed F8ai(a,i) 
      distributed F9ai(a,i) 
      distributed F10ai(a,i) 
      distributed Fbj(b,j) 
      distributed F1bj(b,j) 
      distributed F2bj(b,j) 
      distributed F3bj(b,j) 
      distributed F4bj(b,j) 
      distributed F5bj(b,j) 
      distributed F6bj(b,j) 
      distributed F7bj(b,j) 
      distributed F8bj(b,j) 
      distributed F9bj(b,j) 
      distributed F10bj(b,j) 
      temp tai(a,i) 
      temp tbj(b,j) 
      distributed F1a(mu,nu) 
      distributed F2a(mu,nu) 
      distributed F3a(mu,nu) 
      distributed F4a(mu,nu) 
      distributed F5a(mu,nu) 
      distributed F6a(mu,nu) 
      distributed F7a(mu,nu) 
      distributed F8a(mu,nu) 
      distributed F9a(mu,nu) 
      distributed F10a(mu,nu) 
      distributed F1b(mu,nu) 
      distributed F2b(mu,nu) 
      distributed F3b(mu,nu) 
      distributed F4b(mu,nu) 
      distributed F5b(mu,nu) 
      distributed F6b(mu,nu) 
      distributed F7b(mu,nu) 
      distributed F8b(mu,nu) 
      distributed F9b(mu,nu) 
      distributed F10b(mu,nu) 
#
# Scalars used in DIIS procedure 
# ------------------------------ 
#
       scalar b11
       scalar b12
       scalar b13
       scalar b14
       scalar b15
       scalar b16
       scalar b17
       scalar b18
       scalar b19
       scalar b110 
#
       scalar b22
       scalar b23
       scalar b24
       scalar b25
       scalar b26
       scalar b27
       scalar b28
       scalar b29
       scalar b210 
#
       scalar b33
       scalar b34
       scalar b35
       scalar b36
       scalar b37
       scalar b38
       scalar b39
       scalar b310 
#
       scalar b44
       scalar b45
       scalar b46
       scalar b47
       scalar b48
       scalar b49
       scalar b410 
#
       scalar b55
       scalar b56
       scalar b57
       scalar b58
       scalar b59
       scalar b510 
#
       scalar b66 
       scalar b67 
       scalar b68 
       scalar b69 
       scalar b610  
#
       scalar b77 
       scalar b78 
       scalar b79 
       scalar b710  
#
       scalar b88 
       scalar b89 
       scalar b810  
#
       scalar b99 
       scalar b910  
#
       scalar b1010 
#
       scalar c1
       scalar c2
       scalar c3
       scalar c4
       scalar c5
       scalar c6
       scalar c7
       scalar c8
       scalar c9
       scalar c10 
#
       scalar Tb11
       scalar Tb12
       scalar Tb13
       scalar Tb14
       scalar Tb15
       scalar Tb16
       scalar Tb17
       scalar Tb18
       scalar Tb19
       scalar Tb110 
#
       scalar Tb22
       scalar Tb23
       scalar Tb24
       scalar Tb25
       scalar Tb26
       scalar Tb27
       scalar Tb28
       scalar Tb29
       scalar Tb210 
#
       scalar Tb33
       scalar Tb34
       scalar Tb35
       scalar Tb36
       scalar Tb37
       scalar Tb38
       scalar Tb39
       scalar Tb310 
#
       scalar Tb44
       scalar Tb45
       scalar Tb46
       scalar Tb47
       scalar Tb48
       scalar Tb49
       scalar Tb410 
#
       scalar Tb55
       scalar Tb56
       scalar Tb57
       scalar Tb58
       scalar Tb59
       scalar Tb510 
#
       scalar Tb66 
       scalar Tb67 
       scalar Tb68 
       scalar Tb69 
       scalar Tb610  
#
       scalar Tb77 
       scalar Tb78 
       scalar Tb79 
       scalar Tb710  
#
       scalar Tb88 
       scalar Tb89 
       scalar Tb810  
#
       scalar Tb99 
       scalar Tb910  
#
       scalar Tb1010 
#
# Declare scalars 
# --------------- 
#
      scalar e_a     
      scalar e_b     
      scalar escf_a 
      scalar escf_b 
      scalar etemp 
      scalar esum 
      scalar energy 
      scalar energy1 
      scalar energy2 
      scalar ecrit 
      scalar ediff  
#     scalar damp 
      scalar damp1 
#
# ---------------------------------------------------------------------------- 
#
       PROC FOCK1_MATRIX  
#      ----------------- 
#
# Do complete integral computation 
# -------------------------------- 
#
       PARDO mu, nu, lambda, sigma
                IF mu     < nu
                IF lambda < sigma
#
                   execute compute_abcd_batch aoint(mu,nu,lambda,sigma) 
#
                ENDIF 
                ENDIF 
       ENDPARDO mu, nu, lambda, sigma
#
       PARDO mu, nu, lambda, sigma
#
                IF mu     == nu
                IF lambda == sigma 
#
                   execute compute_abcd_batch aoint(mu,nu,lambda,sigma) 
#
                ENDIF 
                ENDIF 
       ENDPARDO mu, nu, lambda, sigma
#
       PARDO mu, nu, lambda, sigma
#
                IF mu     < nu
                IF lambda == sigma 
#
                   execute compute_abcd_batch aoint(mu,nu,lambda,sigma) 
#
                ENDIF 
                ENDIF 
       ENDPARDO mu, nu, lambda, sigma
#
       PARDO mu, nu, lambda, sigma
#
                IF mu     == nu
                IF lambda < sigma 
#
                   execute compute_abcd_batch aoint(mu,nu,lambda,sigma) 
#
                ENDIF 
                ENDIF 
       ENDPARDO mu, nu, lambda, sigma
#
       ENDPROC FOCK1_MATRIX  
#      ------------------- 
#
# ---------------------------------------------------------------------------- 
#
       PROC FOCK2_MATRIX  
#      ------------------- 
#
# ---------------------------------------------------------------------------- 
#
#
############ CLASS 2  ############
#  Do two-center part (mu mu |nu nu)->(nu nu |mu mu )
#
       PARDO mu, nu
#
                IF mu     == nu
             DO lambda 
                IF mu     < lambda
             DO sigma 
                IF lambda == sigma
#
                   execute compute_aabb_batch aoint(mu,nu,lambda,sigma)
#
##################################################################################
# Start Rudenberg 4-center approximation
##################################################################################
#
       DO ii
                IF ii != lambda
                      IF ii != mu
#
                   GET OVL(nu,ii)
                   TAxxxx(mu,ii,lambda,sigma)    =   aoint(mu,nu,lambda,sigma)*OVL(nu,ii)
                   TAxxxx(mu,ii,lambda,sigma)   *=   0.25
         DO  jj
                  IF jj != mu
                    IF ii != jj
                        IF jj != lambda
#
                   GET OVL(sigma,jj)
                   TBxxxx(mu,ii,lambda,jj)       =   TAxxxx(mu,ii,lambda,sigma)*OVL(sigma,jj)
#
                    ENDIF
                  ENDIF
                ENDIF
       ENDDO jj
                    ENDIF
                  ENDIF
#
       ENDDO ii
#
##################################################################################
# End Rudenberg 4-center approximation
##################################################################################
#
                ENDIF
             ENDDO sigma 
                ENDIF
             ENDDO lambda 
                ENDIF
#
       ENDPARDO mu, nu 
       execute print_scalar etemp 
#
       ENDPROC FOCK2_MATRIX  
#      ------------------- 
#
# ---------------------------------------------------------------------------- 
#
############################################################################## 
#
#                         START OF MAIN PROGRAM 
#
############################################################################## 
#
#     Define a few constants 
#     ---------------------- 
#
      ecrit  = scf_conv # Energy tolerance  
      etemp  = 1.0 
      etemp += damp  
      damp1  = 1.0/etemp         # 1/(1+damp)  
      execute print_scalar damp 
      execute print_scalar damp1
#
#     Create the one-particle arrays needed for the computation. 
#     ---------------------------------------------------------- 
#
#     Fock matrix
#     ----------- 
      CREATE Fpq_a  
      CREATE Fpq_b  
#
#     New HF density 
#     -------------- 
#
      CREATE DHFa   
      CREATE DHFb   
#
#     Overlap matrix 
#     -------------- 
#
      CREATE OVL   
#
#     Old HF density 
#     -------------- 
#
      CREATE DHFa_old    
      CREATE DHFb_old    
#
      execute sip_barrier 
      CALL FOCK1_MATRIX 
      CALL FOCK2_MATRIX 
#
      execute sip_barrier
#
                           ENDSIAL COMP_RUD         
#
###############################################################################
#
