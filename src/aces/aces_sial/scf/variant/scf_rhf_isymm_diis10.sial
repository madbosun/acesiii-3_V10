#  Copyright (c) 2003-2010 University of Florida
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  The GNU General Public License is included in this distribution
#  in the file COPYRIGHT.
                           SIAL SCF_RHF_DIIS         
#
# ----------------------------------------------------------------------------
#
# The sial program SIAL_RHF performs an RHF based SCF calculation. Davidson 
# damping is performed during the first scf_beg-1 iterations after which the 
# DIIS is turned on with scf_order. At present DIIS is turned on after the 
# third iteration and 6 histories are kept. 
#
# Fock matrix final arrays:
# ------------------------- 
#
# 1. Fpq_a  
#
# Transformation coefficients final arrays:
# ----------------------------------------- 
#
# 1. Ca  
#
# Converged SCF energy:
# --------------------- 
#
# 1. scfeneg 
#
# BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
#
# Declare indeces 
# --------------- 
#
      index   kiter  = 1, scf_iter  
#
      aoindex mu     = 1, norb
      aoindex nu     = 1, norb
      aoindex lambda = 1, norb
      aoindex sigma  = 1, norb
#
      moaindex i = baocc, eaocc
      moaindex i1= baocc, eaocc
      moaindex i2= baocc, eaocc
      moaindex i3= baocc, eaocc
#
      moaindex a = bavirt, eavirt
      moaindex a1= bavirt, eavirt
      moaindex a2= bavirt, eavirt
      moaindex a3= bavirt, eavirt
#
      moaindex p = baocc, eavirt
      moaindex p1= baocc, eavirt
      moaindex p2= baocc, eavirt
      moaindex p3= baocc, eavirt
#
# Declare one-particle density arrays 
# ----------------------------------- 
#
      distributed Dhfa(mu,nu) 
      distributed Dhfa_old(mu,nu) 
#
      distributed Fpq_a(mu,nu) 
      distributed FTpq_a(mu,nu) 
      distributed CBT_a(mu,p) 
#
# Declare temporary arrays 
# ------------------------ 
#
      temp Txxxx(mu,nu,lambda,sigma) 
      temp TSxxxx(mu,nu,lambda,sigma) 
      temp T1xxxx(mu,nu,lambda,sigma) 
      temp T2xxxx(mu,nu,lambda,sigma) 
      temp T3xxxx(mu,nu,lambda,sigma) 
      temp T4xxxx(mu,nu,lambda,sigma) 
      temp T5xxxx(mu,nu,lambda,sigma) 
      temp Txxxi(mu,nu,lambda,i) 
      temp T1xxxi(mu,nu,lambda,i) 
      temp T2xxxi(mu,nu,lambda,i) 
      temp T3xxxi(mu,nu,lambda,i) 
      temp T4xxxi(mu,nu,lambda,i) 
      temp TAxxxi(mu,nu,lambda,i) 
      temp TBxxxi(mu,nu,lambda,i) 
      temp Txixx(mu,i,nu,lambda) 
      temp Tixxx(i,mu,nu,lambda) 
      temp Ixi(mu,i) 
      temp I1xi(mu,i) 
      temp Tpq(mu,nu) 
      temp T1pq(mu,nu) 
      temp Txi(mu,i) 
      temp T1xi(mu,i) 
      temp Txx(mu,nu) 
      temp TAxx(mu,nu) 
      temp TBxx(mu,nu) 
      temp T1xx(mu,nu) 
      temp T2xx(mu,nu) 
      temp T3xx(mu,nu) 
      temp T4xx(mu,nu) 
      temp T5xx(mu,nu) 
      temp T6xx(mu,nu) 
      temp Tii(i,i1) 
      temp T1ii(i,i1) 
      temp Txp(mu,p) 
      temp T1xp(mu,p) 
      temp Tpp(p,p1) 
      temp T1pp(p,p1) 
#
# Declare served arrays 
# --------------------- 
#
      temp aoint(mu,nu,lambda,sigma)
#
# Declare static arrays 
# --------------------- 
#
      static FSpq_a(mu,nu) 
      distributed Qxx(mu,nu) 
      distributed FTa(p,p1) 
      static X1(mu,nu) 
#
# Arrays used in DIIS procedure 
# ----------------------------- 
#  
      distributed Fai(a,i) 
      distributed F1ai(a,i) 
      distributed F2ai(a,i) 
      distributed F3ai(a,i) 
      distributed F4ai(a,i) 
      distributed F5ai(a,i) 
      distributed F6ai(a,i) 
      distributed F7ai(a,i) 
      distributed F8ai(a,i) 
      distributed F9ai(a,i) 
      distributed F10ai(a,i) 
      temp tai(a,i) 
       temp tai2(a,i)
      distributed F1a(mu,nu) 
      distributed F2a(mu,nu) 
      distributed F3a(mu,nu) 
      distributed F4a(mu,nu) 
      distributed F5a(mu,nu) 
      distributed F6a(mu,nu) 
      distributed F7a(mu,nu) 
      distributed F8a(mu,nu) 
      distributed F9a(mu,nu) 
      distributed F10a(mu,nu) 
#
# Scalars used in DIIS procedure 
# ------------------------------ 
#
       scalar b11
       scalar b12
       scalar b13
       scalar b14
       scalar b15
       scalar b16
       scalar b17
       scalar b18
       scalar b19
       scalar b110 
#
       scalar b22
       scalar b23
       scalar b24
       scalar b25
       scalar b26
       scalar b27
       scalar b28
       scalar b29
       scalar b210 
#
       scalar b33
       scalar b34
       scalar b35
       scalar b36
       scalar b37
       scalar b38
       scalar b39
       scalar b310 
#
       scalar b44
       scalar b45
       scalar b46
       scalar b47
       scalar b48
       scalar b49
       scalar b410 
#
       scalar b55
       scalar b56
       scalar b57
       scalar b58
       scalar b59
       scalar b510 
#
       scalar b66 
       scalar b67 
       scalar b68 
       scalar b69 
       scalar b610  
#
       scalar b77 
       scalar b78 
       scalar b79 
       scalar b710  
#
       scalar b88 
       scalar b89 
       scalar b810  
#
       scalar b99 
       scalar b910  
#
       scalar b1010 
#
       scalar c1
       scalar c2
       scalar c3
       scalar c4
       scalar c5
       scalar c6
       scalar c7
       scalar c8
       scalar c9
       scalar c10 
#
       scalar Tb11
       scalar Tb12
       scalar Tb13
       scalar Tb14
       scalar Tb15
       scalar Tb16
       scalar Tb17
       scalar Tb18
       scalar Tb19
       scalar Tb110 
#
       scalar Tb22
       scalar Tb23
       scalar Tb24
       scalar Tb25
       scalar Tb26
       scalar Tb27
       scalar Tb28
       scalar Tb29
       scalar Tb210 
#
       scalar Tb33
       scalar Tb34
       scalar Tb35
       scalar Tb36
       scalar Tb37
       scalar Tb38
       scalar Tb39
       scalar Tb310 
#
       scalar Tb44
       scalar Tb45
       scalar Tb46
       scalar Tb47
       scalar Tb48
       scalar Tb49
       scalar Tb410 
#
       scalar Tb55
       scalar Tb56
       scalar Tb57
       scalar Tb58
       scalar Tb59
       scalar Tb510 
#
       scalar Tb66 
       scalar Tb67 
       scalar Tb68 
       scalar Tb69 
       scalar Tb610  
#
       scalar Tb77 
       scalar Tb78 
       scalar Tb79 
       scalar Tb710  
#
       scalar Tb88 
       scalar Tb89 
       scalar Tb810  
#
       scalar Tb99 
       scalar Tb910  
#
       scalar Tb1010 
#
# Declare scalars 
# --------------- 
#
      scalar e_a     
      scalar escf_a 
      scalar etemp 
      scalar esum 
      scalar energy 
      scalar energy1 
      scalar energy2 
      scalar ecrit 
      scalar ediff  
#     scalar damp 
      scalar damp1 
      scalar done 
      scalar donea
#
# ---------------------------------------------------------------------------- 
#
      PROC IGUESS   
#     ----------- 
#
#     Initialize the Fock matrix to the bare 1-electron hamiltonian.
#     -------------------------------------------------------------- 
#
      PARDO mu, nu 
#
            Txx(mu,nu)       = oed_nai(mu,nu)  
            Txx(mu,nu)      += oed_kin(mu,nu)  
#
            PUT Fpq_a(mu,nu) = Txx(mu,nu) 
#
      ENDPARDO mu, nu 
#
      ENDPROC IGUESS   
#     -------------- 
#
# -----------------------------------------------------------------------------
#
      PROC HFDENS
#     -----------
#
#     The HF density is computed. Davidson damping is incorporated thus
#     knowledge of the previous iteration is needed. 
#     ----------------------------------------------------------------- 
#
      PARDO mu, nu 
#
#           alpha component first 
#           --------------------- 
#
            GET           DHFa_old(mu,nu) 
            Tpq(mu,nu)  = DHFa_old(mu,nu)   
            Tpq(mu,nu) *= damp  
#
            DO i 
#
               Txi(nu,i)   = ca(nu,i)
               T1pq(mu,nu) = Txi(nu,i)*ca(mu,i)
               T1pq(mu,nu)*= 2.0  
               Tpq(mu,nu) += T1pq(mu,nu) 
#
            ENDDO i 
#
            Tpq(mu,nu)     *= damp1   
            PUT Dhfa(mu,nu) = Tpq(mu,nu)
#
      ENDPARDO mu, nu 
#
      ENDPROC HFDENS
#     --------------
#
# ---------------------------------------------------------------------------- 
#
# -----------------------------------------------------------------------------
#
      PROC HFIDENS
#     ------------
#
#     Procedure which computes the HF density without Davidson damping. 
#     ----------------------------------------------------------------- 
#
      PARDO mu, nu 
#
#           alpha component 
#           --------------- 
#
            Tpq(mu,nu) = 0.0 
#
            DO i 
#
               Txi(nu,i)   = ca(nu,i)
               T1pq(mu,nu) = Txi(nu,i)*ca(mu,i)
               Tpq(mu,nu) += T1pq(mu,nu) 
#
            ENDDO i 
            Tpq(mu,nu) *= 2.0 
# 
            PUT Dhfa(mu,nu) = Tpq(mu,nu)
#
      ENDPARDO mu, nu 
#
      ENDPROC HFIDENS
#     ---------------
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
      PROC SCFENERGY 
#     -------------- 
#
#     The total SCF energy is computed from a know Hartee-Fock density.  
#     ----------------------------------------------------------------- 
#
      esum   = 0.0 
      etemp  = 0.0 
      energy = 0.0 
      energy1= 0.0 
      energy2= 0.0 
      execute sip_barrier 
#
#     One-particle contribution. 
#     -------------------------- 
#
      PARDO mu, nu 
#
            GET DHFa(mu,nu) 
#
            Txx(mu,nu)   = oed_nai(mu,nu)  
            Txx(mu,nu)  += oed_kin(mu,nu)  
            T1xx(mu,nu)  = DHFa(mu,nu) 
#          
            etemp = Txx(mu,nu)*T1xx(mu,nu)  
            esum += etemp 
#
      ENDPARDO mu, nu 
      execute sip_barrier 
#
      collective energy1 += esum  
      energy1 *= 2.0  
      execute sip_barrier 
      execute print_scalar energy1 
#
#     Two-particle contribution. 
#     -------------------------- 
#
      esum   = 0.0 
      etemp  = 0.0 
      execute sip_barrier 
      PARDO mu, lambda
#
            DO nu
            DO sigma
#
               GET DHFa(nu,sigma) 
               GET DHFa(nu,lambda) 
               GET DHFa(mu,lambda) 
               GET DHFa(mu,sigma) 
#
               compute_integrals            AOINT(mu,lambda,nu,sigma)
#
#              ------------------------------------------------------------- 
#
               txx(nu,sigma)              = DHFa(nu,sigma) 
               t1xx(nu,lambda)            = DHFa(nu,lambda) 
#
               Txxxx(mu,nu,lambda,sigma)  = DHFa(mu,lambda)^txx(nu,sigma)   
               Txxxx(mu,nu,lambda,sigma) *= 2.0  
               T1xxxx(mu,nu,lambda,sigma) = DHFa(mu,sigma)^t1xx(nu,lambda)   
               Txxxx(mu,nu,lambda,sigma) -= T1xxxx(mu,nu,lambda,sigma) 
#
#              ------------------------------------------------------------- 
#
               etemp  = AOINT(mu,lambda,nu,sigma)*Txxxx(mu,nu,lambda,sigma) 
               etemp *= 0.5 
               esum  += etemp 
#
            ENDDO sigma
            ENDDO nu
#
       ENDPARDO mu, lambda
       execute sip_barrier 
#
       collective energy2 += esum  
       execute sip_barrier 
       execute print_scalar energy2 
       energy  = energy1 
       energy += energy2 
       execute print_scalar energy 
#
       ENDPROC SCFENERGY 
#      ----------------- 
#
# ---------------------------------------------------------------------------- 
#
       PROC FOCK_MATRIX  
#      ----------------- 
#
#      The complete Fock matrix is constructed. Four fold symmetry of the
#      two-electron integrals is incorporated. 
#      ------------------------------------------------------------------
#
#      Initialize the Fock matrix to the bare 1-electron hamiltonian.
#      -------------------------------------------------------------- 
#
       PARDO mu, nu 
#
             Txx(mu,nu)        = oed_nai(mu,nu)  
             Txx(mu,nu)       += oed_kin(mu,nu)  
#
             PUT Fpq_a(mu,nu) += Txx(mu,nu) 
#
       ENDPARDO mu, nu 
#
#      Add contributions containing two-particle integral contributions.
#      -----------------------------------------------------------------
#
       PARDO mu, nu, lambda, sigma
                IF mu     < nu
                IF lambda < sigma
#
                   compute_integrals aoint(mu,nu,lambda,sigma)
#
#                  alpha and beta components together
#                  ----------------------------------
#
                   GET DHFa(lambda,sigma)
                   GET DHFa(nu,sigma)

                   GET DHFa(sigma,lambda)
                   GET DHFa(mu,sigma)
                   GET DHFa(nu,lambda)
                   GET DHFa(mu,lambda)

                   T1xx(lambda,sigma)    = DHFa(lambda,sigma)
                   Txx(lambda,sigma)     = DHFa(sigma,lambda)
                   T1xx(lambda,sigma)   += Txx(lambda,sigma)
#
                   T2xx(mu,nu)           = aoint(mu,nu,lambda,sigma)*T1xx(lambda,sigma)
#
                   Txx(nu,mu)            = T2xx(mu,nu)
#
                   PUT Fpq_a(mu,nu)     += T2xx(mu,nu)
#
                   PUT Fpq_a(nu,mu)     += Txx(nu,mu)
#
                   T3xx(mu,lambda)       = aoint(mu,nu,lambda,sigma)*DHFa(nu,sigma)
                   T3xx(mu,lambda)      *= -0.5
                   PUT Fpq_a(mu,lambda) += T3xx(mu,lambda)
#
                   T4xx(mu,sigma)        = aoint(mu,nu,lambda,sigma)*DHFa(nu,lambda)
                   T4xx(mu,sigma)       *= -0.5
                   PUT Fpq_a(mu,sigma)  += T4xx(mu,sigma)
#
                   T5xx(nu,lambda)       = aoint(mu,nu,lambda,sigma)*DHFa(mu,sigma)
                   T5xx(nu,lambda)      *= -0.5
                   PUT Fpq_a(nu,lambda) += T5xx(nu,lambda)
#
                   T6xx(nu,sigma)        = aoint(mu,nu,lambda,sigma)*DHFa(mu,lambda)
                   T6xx(nu,sigma)       *= -0.5
                   PUT Fpq_a(nu,sigma)  += T6xx(nu,sigma)
#
                ENDIF
                ENDIF
       ENDPARDO mu, nu, lambda, sigma
#
       PARDO mu, nu, lambda, sigma  
                IF mu     == nu
                IF lambda == sigma
#
                   compute_integrals aoint(mu,nu,lambda,sigma)
#
#                  alpha and beta components together
#                  ----------------------------------
#
                   GET DHFa(lambda,sigma)
                   GET DHFa(nu,sigma)
#
                   T1xx(lambda,sigma)    = DHFa(lambda,sigma)
#
                   T2xx(mu,nu)           = aoint(mu,nu,lambda,sigma)*T1xx(lambda,sigma)
#
                   PUT Fpq_a(mu,nu)     += T2xx(mu,nu)
#
                   T3xx(mu,lambda)       = aoint(mu,nu,lambda,sigma)*DHFa(nu,sigma)
                   T3xx(mu,lambda)      *= -0.5
                   PUT Fpq_a(mu,lambda) += T3xx(mu,lambda)
#
                ENDIF
                ENDIF
       ENDPARDO mu, nu, lambda, sigma
#
       PARDO mu, nu, lambda, sigma            
                IF mu      < nu
                IF lambda == sigma
#
                   compute_integrals aoint(mu,nu,lambda,sigma)
#
#                  alpha and beta components together
#                  ---------------------------------
                   GET DHFa(lambda,sigma)
                   GET DHFa(nu,sigma)

                   GET DHFa(mu,sigma)
#
                   T1xx(lambda,sigma)    = DHFa(lambda,sigma)
#
                   T2xx(mu,nu)           = aoint(mu,nu,lambda,sigma)*T1xx(lambda,sigma)
                   Txx(nu,mu)            = T2xx(mu,nu)
#
                   PUT Fpq_a(mu,nu)     += T2xx(mu,nu)
#
                   PUT Fpq_a(nu,mu)     += Txx(nu,mu)
#
                   T3xx(mu,lambda)       = aoint(mu,nu,lambda,sigma)*DHFa(nu,sigma)
                   T3xx(mu,lambda)      *= -0.5
                   PUT Fpq_a(mu,lambda) += T3xx(mu,lambda)
#
                   T4xx(nu,lambda)       = aoint(mu,nu,lambda,sigma)*DHFa(mu,sigma)
                   T4xx(nu,lambda)      *= -0.5
                   PUT Fpq_a(nu,lambda) += T4xx(nu,lambda)
#
                ENDIF
                ENDIF
       ENDPARDO mu, nu, lambda, sigma              
#
       PARDO mu, nu, lambda, sigma 
                IF mu     == nu
                IF lambda  < sigma
#
                   compute_integrals aoint(mu,nu,lambda,sigma)
#
#                  alpha and beta components together
#                  ----------------------------------
#
                   GET DHFa(lambda,sigma)
                   GET DHFa(nu,sigma)

                   GET DHFa(sigma,lambda)
                   GET DHFa(nu,lambda)
#
                   T1xx(lambda,sigma)    = DHFa(lambda,sigma)
#
                   T2xx(mu,nu)           = aoint(mu,nu,lambda,sigma)*T1xx(lambda,sigma)

#
                   PUT Fpq_a(mu,nu)     += T2xx(mu,nu)
#
                   T1xx(sigma,lambda)    = DHFa(sigma,lambda)
#
                   T3xx(mu,nu)           = aoint(mu,nu,lambda,sigma)*T1xx(sigma,lambda)

                   PUT Fpq_a(mu,nu)     += T3xx(mu,nu)
#
                   T4xx(mu,lambda)       = aoint(mu,nu,lambda,sigma)*DHFa(nu,sigma)
                   T4xx(mu,lambda)      *= -0.5
                   PUT Fpq_a(mu,lambda) += T4xx(mu,lambda)
#
                   T5xx(mu,sigma)        = aoint(mu,nu,lambda,sigma)*DHFa(nu,lambda)
                   T5xx(mu,sigma)       *= -0.5
                   PUT Fpq_a(mu,sigma)  += T5xx(mu,sigma)
#
                ENDIF
                ENDIF
#
       ENDPARDO mu, nu, lambda, sigma
       execute sip_barrier
#
       ENDPROC FOCK_MATRIX  
#      ------------------- 
#
# ---------------------------------------------------------------------------- 
#
       PROC HF_ENERGY  
#      -------------- 
#
#      The HF energy is computed from the HF density (DHFa(b)) and the 
#      Fock matrix (Fpq_a(b)). 
#      --------------------------------------------------------------- 
#
       energy = 0.0
       esum = 0.0 
       PARDO mu, nu 
#
             GET Fpq_a(mu,nu)
             GET DHFa(mu,nu) 
#
             Txx(mu,nu)   = oed_nai(mu,nu)  
             Txx(mu,nu)  += oed_kin(mu,nu)  
#
             T1xx(mu,nu)  = Txx(mu,nu) 
             T1xx(mu,nu) += Fpq_a(mu,nu) 
#
             etemp        = T1xx(mu,nu)*DHFa(mu,nu)  
             esum        += etemp 
#
       ENDPARDO mu, nu 
       esum *= 0.5 
       execute sip_barrier 
       collective energy += esum 
#
       execute print_scalar energy 
#
       ENDPROC HF_ENERGY   
#      ----------------- 
#
# ---------------------------------------------------------------------------- 
#
       PROC OVER_HALF 
#      -------------- 
#
#      Diagonalize the overlap matrix, invert and take the square
#      root of the diagonal elements. 
#      -------------------------------------------------------------- 
#
       execute eig_sr_inv oed_ovl x1   
#
#      Form the Q-matrix --> U s**{-1/2) 
#      --------------------------------- 
#
       PARDO mu, nu  
#
          Txx(mu,nu) = 0.0 
#
          DO lambda 
             T1xx(mu,nu) = x1(mu,lambda)*oed_ovl(lambda,nu) 
             Txx(mu,nu) += T1xx(mu,nu) 
          ENDDO lambda  
#
          PUT Qxx(mu,nu) = Txx(mu,nu)  
#
       ENDPARDO mu, nu  
#
       ENDPROC OVER_HALF 
#      ----------------- 
#
# ---------------------------------------------------------------------------- 
#
       PROC FOCK_TRANSPOSE 
#      ------------------- 
#
#      Form the transposed Fock matrix --> Q+ F Q 
#      ------------------------------------------ 
#
       PARDO mu, sigma   
#
             TAxx(mu,sigma) = 0.0 
#
             DO lambda 
#
                GET Fpq_a(lambda,sigma) 
                GET Qxx(lambda,mu) 
#
                T1xx(mu,sigma)  = Qxx(lambda,mu)*Fpq_a(lambda,sigma)  
                TAxx(mu,sigma) += T1xx(mu,sigma) 
#
             ENDDO lambda 
#
             DO nu 
#
                GET Qxx(sigma,nu) 
#
                T1xx(mu,nu) =        TAxx(mu,sigma)*Qxx(sigma,nu) 
                PUT FTpq_a(mu,nu) += T1xx(mu,nu) 
#
             ENDDO nu 
#
       ENDPARDO mu, sigma   
#
       ENDPROC FOCK_TRANSPOSE 
#      ---------------------- 
#
# ---------------------------------------------------------------------------- 
#
       PROC FOCK_DIAG  
#      -------------- 
#
#      First put the transposed Fock arrays into static arrays 
#      ------------------------------------------------------- 
#
       DO mu   
       DO nu  
#
          GET             FTpq_a(mu,nu) 
          FSpq_a(mu,nu) = FTpq_a(mu,nu) 
#
       ENDDO nu  
       ENDDO mu   
#
       execute eig FSpq_a ca   
#
       ENDPROC FOCK_DIAG 
#      ----------------- 
#
# ---------------------------------------------------------------------------- 
#
       PROC C_BTRAN 
#      ------------ 
#
#      Transform the coefficient array back to the original basis 
#      ---------------------------------------------------------- 
#
       PARDO mu, p  
#
          Txp(mu,p) = 0.0 
#
          DO nu 
#
             GET          Qxx(mu,nu) 
#
             T1xp(mu,p) = Qxx(mu,nu)*ca(nu,p)   
             Txp(mu,p) += T1xp(mu,p) 
#
          ENDDO nu 
#
          PUT CBT_a(mu,p) = Txp(mu,p) 
#
       ENDPARDO mu, p  
#
       execute sip_barrier 
#
#      Put the transformed coefficients into static arrays 
#      --------------------------------------------------- 
#
       DO mu 
       DO p 
          GET        CBT_a(mu,p) 
          ca(mu,p) = CBT_a(mu,p) 
       ENDDO p 
       ENDDO mu  
#
       ENDPROC C_BTRAN 
#      --------------- 
#
# ---------------------------------------------------------------------------- 
#
       PROC HF_DAMP  
#      ------------ 
#
       PARDO mu, nu 
#
             GET DHFa(mu,nu) 
             GET DHFa_old(mu,nu) 
#
             Txx(mu,nu)   = DHFa(mu,nu) 
             T1xx(mu,nu)  = DHFa_old(mu,nu) 
             T1xx(mu,nu) *= damp  
             Txx(mu,nu)  += T1xx(mu,nu) 
             Txx(mu,nu)  *= damp1 
             PUT DHFa(mu,nu) = Txx(mu,nu)  
#
       ENDPARDO mu, nu 
#
       ENDPROC HF_DAMP  
#      --------------- 
#
# ---------------------------------------------------------------------------- 
#
       PROC HFDENS_ZERO   
#      ----------------  
#  
#      Zero out the n-1'th density array. 
#      ---------------------------------- 
#
       PARDO mu, nu 
#
             Txx(mu,nu)   = 0.0   
             PUT DHFa_old(mu,nu) = Txx(mu,nu)  
#
       ENDPARDO mu, nu 
#
       ENDPROC HFDENS_ZERO   
#      ------------------- 
#
# ---------------------------------------------------------------------------- 
#
       PROC HFDENS_REPLACE    
#      -------------------   
#
#      Replace the 'old' HF density by the 'new' HF density. 
#      ----------------------------------------------------- 
#
       PARDO mu, nu 
#
             GET DHFa(mu,nu) 
             PUT DHFa_old(mu,nu) = DHFa(mu,nu)  
#
       ENDPARDO mu, nu 
#
       ENDPROC HFDENS_REPLACE    
#      ----------------------  
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
       PROC SETUP_DIIS 
#      --------------- 
#
       execute diis_setup Tb11
       execute diis_setup Tb12
       execute diis_setup Tb13
       execute diis_setup Tb14
       execute diis_setup Tb15
       execute diis_setup Tb16
       execute diis_setup Tb17
       execute diis_setup Tb18
       execute diis_setup Tb19
       execute diis_setup Tb110 

       execute diis_setup Tb22
       execute diis_setup Tb23
       execute diis_setup Tb24
       execute diis_setup Tb25
       execute diis_setup Tb26
       execute diis_setup Tb27
       execute diis_setup Tb28
       execute diis_setup Tb29
       execute diis_setup Tb210 

       execute diis_setup Tb33
       execute diis_setup Tb34
       execute diis_setup Tb35
       execute diis_setup Tb36
       execute diis_setup Tb37
       execute diis_setup Tb38
       execute diis_setup Tb39
       execute diis_setup Tb310 

       execute diis_setup Tb44
       execute diis_setup Tb45
       execute diis_setup Tb46
       execute diis_setup Tb47
       execute diis_setup Tb48
       execute diis_setup Tb49
       execute diis_setup Tb410 

       execute diis_setup Tb55
       execute diis_setup Tb56
       execute diis_setup Tb57
       execute diis_setup Tb58
       execute diis_setup Tb59
       execute diis_setup Tb510 

       execute diis_setup Tb66
       execute diis_setup Tb67
       execute diis_setup Tb68
       execute diis_setup Tb69
       execute diis_setup Tb610 

       execute diis_setup Tb77
       execute diis_setup Tb78
       execute diis_setup Tb79
       execute diis_setup Tb710 

       execute diis_setup Tb88
       execute diis_setup Tb89
       execute diis_setup Tb810 

       execute diis_setup Tb99
       execute diis_setup Tb910 

       execute diis_setup Tb1010 
#
       ENDPROC SETUP_DIIS 
#      ------------------ 
#
# ---------------------------------------------------------------------------- 
#
#
# ---------------------------------------------------------------------------- 
#
       PROC GEN_1HISTORY  
#      ------------------  
#
       PARDO a, i 
             tai(a,i)     = 0.0 
             PUT Fai(a,i) = tai(a,i) 
       ENDPARDO a, i 
#
       execute sip_barrier 
#  
       PARDO mu, nu  
#
             GET Fpq_a(mu,nu)  
#
             DO i 
#
                txi(mu,i) = Fpq_a(mu,nu)*ca(nu,i) 
#
                DO a 
#
                   tai(a,i)      = txi(mu,i)*ca(mu,a) 
                   PUT Fai(a,i) += tai(a,i) 
#
                ENDDO a 
#
             ENDDO i 
#
       ENDPARDO mu, nu  
#
       if kiter >= 3 # (scf_beg - scf_order + 1)  
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F1a(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       execute sip_barrier 
#
       PARDO a, i 
#
             GET Fai(a,i) 
#
             if kiter >= 3  # (scf_beg - scf_order + 1) 
                PUT F1ai(a,i) = Fai(a,i) 
             endif # kiter  
#
       ENDPARDO a, i 
#
       execute sip_barrier 
#
       ENDPROC GEN_1HISTORY  
#      ---------------------  
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
       PROC GEN_2HISTORY  
#      ------------------  
#
       PARDO a, i 
             tai(a,i)     = 0.0 
             PUT Fai(a,i) = tai(a,i) 
       ENDPARDO a, i 
#
       execute sip_barrier 
#  
       PARDO mu, nu  
#
             GET Fpq_a(mu,nu)  
#
             DO i 
#
                txi(mu,i) = Fpq_a(mu,nu)*ca(nu,i) 
#
                DO a 
#
                   tai(a,i)      = txi(mu,i)*ca(mu,a) 
                   PUT Fai(a,i) += tai(a,i) 
#
                ENDDO a 
#
             ENDDO i 
#
       ENDPARDO mu, nu  
#
       if kiter == 3 # (scf_beg - scf_order + 1)  
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F1a(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter >= 4 # (scf_beg - scf_order + 2)  
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F2a(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       execute sip_barrier 
#
       PARDO a, i 
#
             GET Fai(a,i) 
#
             if kiter == 3  # (scf_beg - scf_order + 1) 
                PUT F1ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter >= 4  # (scf_beg - scf_order + 2) 
                PUT F2ai(a,i) = Fai(a,i) 
             endif # kiter  
#
       ENDPARDO a, i 
#
       execute sip_barrier 
#
       ENDPROC GEN_2HISTORY  
#      ---------------------  
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
       PROC GEN_3HISTORY  
#      ------------------  
#
       PARDO a, i 
             tai(a,i)     = 0.0 
             PUT Fai(a,i) = tai(a,i) 
       ENDPARDO a, i 
#  
       PARDO mu, nu  
#
             GET Fpq_a(mu,nu)  
#
             DO i 
#
                txi(mu,i) = Fpq_a(mu,nu)*ca(nu,i) 
#
                DO a 
#
                   tai(a,i)      = txi(mu,i)*ca(mu,a) 
                   PUT Fai(a,i) += tai(a,i) 
#
                ENDDO a 
#
             ENDDO i 
#
       ENDPARDO mu, nu  
#
       if kiter == 3 # (scf_beg - scf_order + 1)  
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F1a(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter == 4 # (scf_beg - scf_order + 2)  
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F2a(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter >= 5 # (scf_beg - scf_order + 3)  
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F3a(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       execute sip_barrier 
#
       PARDO a, i 
#
             GET Fai(a,i) 
#
             if kiter == 3  # (scf_beg - scf_order + 1) 
                PUT F1ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter == 4  # (scf_beg - scf_order + 2) 
                PUT F2ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter >= 5  # (scf_beg - scf_order + 3) 
                PUT F3ai(a,i) = Fai(a,i) 
             endif # kiter  
#
       ENDPARDO a, i 
#
       execute sip_barrier 
#
       ENDPROC GEN_3HISTORY  
#      ---------------------  
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
       PROC GEN_4HISTORY  
#      ------------------  
#
       PARDO a, i 
             tai(a,i)     = 0.0 
             PUT Fai(a,i) = tai(a,i) 
       ENDPARDO a, i 
#
       execute sip_barrier 
#  
       PARDO mu, nu  
#
             GET Fpq_a(mu,nu)  
#
             DO i 
#
                txi(mu,i) = Fpq_a(mu,nu)*ca(nu,i) 
#
                DO a 
#
                   tai(a,i)      = txi(mu,i)*ca(mu,a) 
                   PUT Fai(a,i) += tai(a,i) 
#
                ENDDO a 
#
             ENDDO i 
#
       ENDPARDO mu, nu  
#
       if kiter == 3 # (scf_beg - scf_order + 1)  
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F1a(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter == 4 # (scf_beg - scf_order + 2)  
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F2a(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter == 5 # (scf_beg - scf_order + 3)  
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F3a(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter >= 6 # (scf_beg - scf_order + 4)  
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F4a(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       execute sip_barrier 
#
       PARDO a, i 
#
             GET Fai(a,i) 
#
             if kiter == 3  # (scf_beg - scf_order + 1) 
                PUT F1ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter == 4  # (scf_beg - scf_order + 2) 
                PUT F2ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter == 5  # (scf_beg - scf_order + 3) 
                PUT F3ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter >= 6  # (scf_beg - scf_order + 4) 
                PUT F4ai(a,i) = Fai(a,i) 
             endif # kiter  
#
       ENDPARDO a, i 
#
       execute sip_barrier 
#
       ENDPROC GEN_4HISTORY  
#      ---------------------  
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
       PROC GEN_5HISTORY  
#      -----------------  
#
       PARDO a, i 
             tai(a,i)     = 0.0 
             PUT Fai(a,i) = tai(a,i) 
       ENDPARDO a, i 
#
       execute sip_barrier 
#  
       PARDO mu, nu  
#
             GET Fpq_a(mu,nu)  
#
             DO i 
#
                txi(mu,i) = Fpq_a(mu,nu)*ca(nu,i) 
#
                DO a 
#
                   tai(a,i)      = txi(mu,i)*ca(mu,a) 
                   PUT Fai(a,i) += tai(a,i) 
#
                ENDDO a 
#
             ENDDO i 
#
       ENDPARDO mu, nu  
#
       if kiter == 3 # (scf_beg - scf_order + 1)  
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F1a(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter == 4 # (scf_beg - scf_order + 2)  
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F2a(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter == 5 # (scf_beg - scf_order + 3)  
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F3a(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter == 6 # (scf_beg - scf_order + 4)  
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F4a(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter >= 7 # (scf_beg - scf_order + 5) = scf+beg   
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F5a(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       execute sip_barrier 
#
       PARDO a, i 
#
             GET Fai(a,i) 
#
             if kiter == 3  # (scf_beg - scf_order + 1) 
                PUT F1ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter == 4  # (scf_beg - scf_order + 2) 
                PUT F2ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter == 5  # (scf_beg - scf_order + 3) 
                PUT F3ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter == 6  # (scf_beg - scf_order + 4) 
                PUT F4ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter >= 7  # (scf_beg - scf_order + 5) 
                PUT F5ai(a,i) = Fai(a,i) 
             endif # kiter  
#
       ENDPARDO a, i 
#
       execute sip_barrier 
#
       ENDPROC GEN_5HISTORY  
#      --------------------  
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
       PROC GEN_6HISTORY  
#      ------------------  
#
       #PARDO a, i 
       #      tai(a,i)     = 0.0 
       #      PUT Fai(a,i) = tai(a,i) 
       #ENDPARDO a, i 
       DELETE Fai
       CREATE Fai
#
       execute sip_barrier 
#  
       PARDO mu, nu  
#
             GET Fpq_a(mu,nu)  
#
             DO i 
#
                txi(mu,i) = Fpq_a(mu,nu)*ca(nu,i) 
#
                DO a 
#
                   tai(a,i)      = txi(mu,i)*ca(mu,a) 
                   PUT Fai(a,i) += tai(a,i) 
#
                ENDDO a 
#
             ENDDO i 
#  
       ENDPARDO mu, nu  
#
       if kiter == 3 # (scf_beg - scf_order + 1)  
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F1a(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter == 4 # (scf_beg - scf_order + 2)  
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F2a(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter == 5 # (scf_beg - scf_order + 3)  
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F3a(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter == 6 # (scf_beg - scf_order + 4)  
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F4a(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter == 7 # (scf_beg - scf_order + 5) = scf+beg   
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F5a(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter >= 8 # (scf_beg - scf_order + 6) = scf+beg   
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F6a(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       execute sip_barrier 
#
       PARDO a, i 
#
             GET Fai(a,i) 
#
             if kiter == 3  # (scf_beg - scf_order + 1) 
                PUT F1ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter == 4  # (scf_beg - scf_order + 2) 
                PUT F2ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter == 5  # (scf_beg - scf_order + 3) 
                PUT F3ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter == 6  # (scf_beg - scf_order + 4) 
                PUT F4ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter == 7  # (scf_beg - scf_order + 5) 
                PUT F5ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter >= 8  # (scf_beg - scf_order + 6) 
                PUT F6ai(a,i) = Fai(a,i) 
             endif # kiter  
#
       ENDPARDO a, i 
#
       execute sip_barrier 
#
       ENDPROC GEN_6HISTORY  
#      ---------------------  
#
# ---------------------------------------------------------------------------- 
#
#
# ---------------------------------------------------------------------------- 
#
       PROC GEN_7HISTORY  
#      ------------------  
#
       PARDO a, i 
             tai(a,i)     = 0.0 
             PUT Fai(a,i) = tai(a,i) 
       ENDPARDO a, i 
#
       execute sip_barrier 
#  
       PARDO mu, nu  
#
             GET Fpq_a(mu,nu)  
#
             DO i 
#
                txi(mu,i) = Fpq_a(mu,nu)*ca(nu,i) 
#
                DO a 
#
                   tai(a,i)      = txi(mu,i)*ca(mu,a) 
                   PUT Fai(a,i) += tai(a,i) 
#
                ENDDO a 
#
             ENDDO i 
#
       ENDPARDO mu, nu  
#
       if kiter == 3 # (scf_beg - scf_order + 1)  
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F1a(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter == 4 # (scf_beg - scf_order + 2)  
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F2a(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter == 5 # (scf_beg - scf_order + 3)  
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F3a(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter == 6 # (scf_beg - scf_order + 4)  
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F4a(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter == 7 # (scf_beg - scf_order + 5) = scf+beg   
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F5a(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter == 8 # (scf_beg - scf_order + 6) = scf+beg   
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F6a(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter >= 9 # (scf_beg - scf_order + 7) = scf+beg   
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F7a(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       execute sip_barrier 
#
       PARDO a, i 
#
             GET Fai(a,i) 
#
             if kiter == 3  # (scf_beg - scf_order + 1) 
                PUT F1ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter == 4  # (scf_beg - scf_order + 2) 
                PUT F2ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter == 5  # (scf_beg - scf_order + 3) 
                PUT F3ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter == 6  # (scf_beg - scf_order + 4) 
                PUT F4ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter == 7  # (scf_beg - scf_order + 5) 
                PUT F5ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter == 8  # (scf_beg - scf_order + 6) 
                PUT F6ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter >= 9  # (scf_beg - scf_order + 7) 
                PUT F7ai(a,i) = Fai(a,i) 
             endif # kiter  
#
       ENDPARDO a, i 
#
       execute sip_barrier 
#
       ENDPROC GEN_7HISTORY  
#      ---------------------  
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
       PROC GEN_8HISTORY  
#      ------------------  
#
       PARDO a, i 
             tai(a,i)     = 0.0 
             PUT Fai(a,i) = tai(a,i) 
       ENDPARDO a, i 
#
       execute sip_barrier 
#  
       PARDO mu, nu  
#
             GET Fpq_a(mu,nu)  
#
             DO i 
#
                txi(mu,i) = Fpq_a(mu,nu)*ca(nu,i) 
#
                DO a 
#
                   tai(a,i)      = txi(mu,i)*ca(mu,a) 
                   PUT Fai(a,i) += tai(a,i) 
#
                ENDDO a 
#
             ENDDO i 
#
       ENDPARDO mu, nu  
#
       if kiter == 3 # (scf_beg - scf_order + 1)  
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F1a(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter == 4 # (scf_beg - scf_order + 2)  
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F2a(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter == 5 # (scf_beg - scf_order + 3)  
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F3a(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter == 6 # (scf_beg - scf_order + 4)  
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F4a(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter == 7 # (scf_beg - scf_order + 5) = scf+beg   
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F5a(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter == 8 # (scf_beg - scf_order + 6) = scf+beg   
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F6a(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter == 9 # (scf_beg - scf_order + 7) = scf+beg   
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F7a(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter >= 10 # (scf_beg - scf_order + 8) = scf+beg   
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F8a(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       execute sip_barrier 
#
       PARDO a, i 
#
             GET Fai(a,i) 
#
             if kiter == 3  # (scf_beg - scf_order + 1) 
                PUT F1ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter == 4  # (scf_beg - scf_order + 2) 
                PUT F2ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter == 5  # (scf_beg - scf_order + 3) 
                PUT F3ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter == 6  # (scf_beg - scf_order + 4) 
                PUT F4ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter == 7  # (scf_beg - scf_order + 5) 
                PUT F5ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter == 8  # (scf_beg - scf_order + 6) 
                PUT F6ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter == 9  # (scf_beg - scf_order + 7) 
                PUT F7ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter >= 10  # (scf_beg - scf_order + 8) 
                PUT F8ai(a,i) = Fai(a,i) 
             endif # kiter  
#
       ENDPARDO a, i 
#
       execute sip_barrier 
#
       ENDPROC GEN_8HISTORY  
#      ---------------------  
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
       PROC GEN_9HISTORY  
#      ------------------  
#
       PARDO a, i 
             tai(a,i)     = 0.0 
             PUT Fai(a,i) = tai(a,i) 
       ENDPARDO a, i 
#
       execute sip_barrier 
#  
       PARDO mu, nu  
#
             GET Fpq_a(mu,nu)  
#
             DO i 
#
                txi(mu,i) = Fpq_a(mu,nu)*ca(nu,i) 
#
                DO a 
#
                   tai(a,i)      = txi(mu,i)*ca(mu,a) 
                   PUT Fai(a,i) += tai(a,i) 
#
                ENDDO a 
#
             ENDDO i 
#
       ENDPARDO mu, nu  
#
       if kiter == 3 # (scf_beg - scf_order + 1)  
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F1a(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter == 4 # (scf_beg - scf_order + 2)  
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F2a(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter == 5 # (scf_beg - scf_order + 3)  
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F3a(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter == 6 # (scf_beg - scf_order + 4)  
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F4a(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter == 7 # (scf_beg - scf_order + 5) = scf+beg   
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F5a(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter == 8 # (scf_beg - scf_order + 6) = scf+beg   
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F6a(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter == 9 # (scf_beg - scf_order + 7) = scf+beg   
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F7a(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter == 10 # (scf_beg - scf_order + 8) = scf+beg   
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F8a(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter >= 11 # (scf_beg - scf_order + 9) = scf+beg   
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F9a(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       execute sip_barrier 
#
       PARDO a, i 
#
             GET Fai(a,i) 
#
             if kiter == 3  # (scf_beg - scf_order + 1) 
                PUT F1ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter == 4  # (scf_beg - scf_order + 2) 
                PUT F2ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter == 5  # (scf_beg - scf_order + 3) 
                PUT F3ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter == 6  # (scf_beg - scf_order + 4) 
                PUT F4ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter == 7  # (scf_beg - scf_order + 5) 
                PUT F5ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter == 8  # (scf_beg - scf_order + 6) 
                PUT F6ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter == 9  # (scf_beg - scf_order + 7) 
                PUT F7ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter == 10  # (scf_beg - scf_order + 8) 
                PUT F8ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter >= 11  # (scf_beg - scf_order + 9) 
                PUT F9ai(a,i) = Fai(a,i) 
             endif # kiter  
#
       ENDPARDO a, i 
#
       execute sip_barrier 
#
       ENDPROC GEN_9HISTORY  
#      ---------------------  
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
       PROC GEN_10HISTORY  
#      ------------------  
#
       PARDO a, i 
             tai(a,i)     = 0.0 
             PUT Fai(a,i) = tai(a,i) 
       ENDPARDO a, i 
#
       execute sip_barrier 
#  
       PARDO mu, nu  
#
             GET Fpq_a(mu,nu)  
#
             DO i 
#
                txi(mu,i) = Fpq_a(mu,nu)*ca(nu,i) 
#
                DO a 
#
                   tai(a,i)      = txi(mu,i)*ca(mu,a) 
                   PUT Fai(a,i) += tai(a,i) 
#
                ENDDO a 
#
             ENDDO i 
#
       ENDPARDO mu, nu  
#
       if kiter == 3 # (scf_beg - scf_order + 1)  
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F1a(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter == 4 # (scf_beg - scf_order + 2)  
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F2a(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter == 5 # (scf_beg - scf_order + 3)  
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F3a(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter == 6 # (scf_beg - scf_order + 4)  
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F4a(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter == 7 # (scf_beg - scf_order + 5) = scf+beg   
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F5a(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter == 8 # (scf_beg - scf_order + 6) = scf+beg   
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F6a(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter == 9 # (scf_beg - scf_order + 7) = scf+beg   
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F7a(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter == 10 # (scf_beg - scf_order + 8) = scf+beg   
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F8a(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter == 11 # (scf_beg - scf_order + 9) = scf+beg   
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F9a(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       if kiter >= 12 # (scf_beg - scf_order + 10) = scf+beg   
          PARDO mu, nu 
                GET              Fpq_a(mu,nu) 
                txx(mu,nu)     = Fpq_a(mu,nu) 
                PUT F10a(mu,nu) = txx(mu,nu)  
          ENDPARDO mu, nu 
       endif # kiter 
#
       execute sip_barrier 
#
       PARDO a, i 
#
             GET Fai(a,i) 
#
             if kiter == 3  # (scf_beg - scf_order + 1) 
                PUT F1ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter == 4  # (scf_beg - scf_order + 2) 
                PUT F2ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter == 5  # (scf_beg - scf_order + 3) 
                PUT F3ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter == 6  # (scf_beg - scf_order + 4) 
                PUT F4ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter == 7  # (scf_beg - scf_order + 5) 
                PUT F5ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter == 8  # (scf_beg - scf_order + 6) 
                PUT F6ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter == 9  # (scf_beg - scf_order + 7) 
                PUT F7ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter == 10  # (scf_beg - scf_order + 8) 
                PUT F8ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter == 11  # (scf_beg - scf_order + 9) 
                PUT F9ai(a,i) = Fai(a,i) 
             endif # kiter  
#
             if kiter >= 12  # (scf_beg - scf_order + 10) 
                PUT F10ai(a,i) = Fai(a,i) 
             endif # kiter  
#
       ENDPARDO a, i 
#
       execute sip_barrier 
#
       ENDPROC GEN_10HISTORY  
#      ---------------------  
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
       PROC ZERO_SCALAR 
#      ---------------- 
#
       b11 = 0.0
       b12 = 0.0
       b13 = 0.0
       b14 = 0.0
       b15 = 0.0
       b16 = 0.0
       b17 = 0.0
       b18 = 0.0
       b19 = 0.0
       b110 = 0.0
#
       b22 = 0.0
       b23 = 0.0
       b24 = 0.0
       b25 = 0.0
       b26 = 0.0
       b27 = 0.0
       b28 = 0.0
       b29 = 0.0
       b210 = 0.0
#
       b33 = 0.0
       b34 = 0.0
       b35 = 0.0
       b36 = 0.0
       b37 = 0.0
       b38 = 0.0
       b39 = 0.0
       b310 = 0.0
#
       b44 = 0.0
       b45 = 0.0
       b46 = 0.0
       b47 = 0.0
       b48 = 0.0
       b49 = 0.0
       b410 = 0.0
#
       b55 = 0.0
       b56 = 0.0
       b57 = 0.0
       b58 = 0.0
       b59 = 0.0
       b510 = 0.0
#
       b66 = 0.0
       b67 = 0.0
       b68 = 0.0
       b69 = 0.0
       b610 = 0.0
#
       b77 = 0.0
       b78 = 0.0
       b79 = 0.0
       b710 = 0.0
#
       b88 = 0.0
       b89 = 0.0
       b810 = 0.0
#
       b99 = 0.0
       b910 = 0.0
#
       b1010 = 0.0
#
       Tb11 = 0.0
       Tb12 = 0.0
       Tb13 = 0.0
       Tb14 = 0.0
       Tb15 = 0.0
       Tb16 = 0.0
       Tb17 = 0.0
       Tb18 = 0.0
       Tb19 = 0.0
       Tb110 = 0.0
#
       Tb22 = 0.0
       Tb23 = 0.0
       Tb24 = 0.0
       Tb25 = 0.0
       Tb26 = 0.0
       Tb27 = 0.0
       Tb28 = 0.0 
       Tb29 = 0.0
       Tb210 = 0.0
#
       Tb33 = 0.0
       Tb34 = 0.0
       Tb35 = 0.0
       Tb36 = 0.0
       Tb37 = 0.0
       Tb38 = 0.0
       Tb39 = 0.0
       Tb310 = 0.0
#
       Tb44 = 0.0
       Tb45 = 0.0
       Tb46 = 0.0
       Tb47 = 0.0
       Tb48 = 0.0
       Tb49 = 0.0
       Tb410 = 0.0
#
       Tb55 = 0.0
       Tb56 = 0.0
       Tb57 = 0.0
       Tb58 = 0.0
       Tb59 = 0.0
       Tb510 = 0.0
#
       Tb66 = 0.0
       Tb67 = 0.0
       Tb68 = 0.0
       Tb69 = 0.0
       Tb610 = 0.0
#
       Tb77 = 0.0
       Tb78 = 0.0
       Tb79 = 0.0
       Tb710 = 0.0
#
       Tb88 = 0.0
       Tb89 = 0.0
       Tb810 = 0.0
#
       Tb99 = 0.0
       Tb910 = 0.0
#
       Tb1010 = 0.0
#
       c1 = 0.0 
       c2 = 0.0 
       c3 = 0.0 
       c4 = 0.0 
       c5 = 0.0 
       c6 = 0.0 
       c7 = 0.0 
       c8 = 0.0 
       c9 = 0.0 
       c10 = 0.0 
#
       ENDPROC ZERO_SCALAR 
#      ------------------- 
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
       PROC DIIS2   
#      -----------  
#
# The DIIS expansion coefficients are computed using the 2 previous iterations.
#
#      Zero out scalars.
#      -----------------
#
       CALL ZERO_SCALAR 
#
       execute sip_barrier 
#
#      Determine the 'B-matrix'. 
#      ------------------------- 
#
#      Contributions from Fai histories. 
#      --------------------------------- 
#
       PARDO a, i 
#
#          GET Fock-matrix data from all 2 previous iterations. 
#          ---------------------------------------------------- 
#
           GET F1ai(a,i) 
           GET F2ai(a,i) 
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#          b1x x=1,2 
#          --------- 
#
           etemp = F1ai(a,i)*F1ai(a,i) 
           b11  += etemp 
#
           etemp = F1ai(a,i)*F2ai(a,i) 
           b12  += etemp 
#
#          b2x x=2,2
#          --------- 
#
           etemp = F2ai(a,i)*F2ai(a,i) 
           b22  += etemp 
#
       ENDPARDO a, i 
#
       execute sip_barrier
#
#      Collectively sum B-matrix elements.
#      -----------------------------------
#
       collective Tb11 += b11
       collective Tb12 += b12

       collective Tb22 += b22
       execute print_scalar Tb11
       execute print_scalar Tb22
       execute print_scalar Tb12
#
       execute sip_barrier 
#
#      Now the unique elements of the 'B-matrix' have been computed and the array filled out.
#      --------------------------------------------------------------------------------------
#
#      Put the elements of the 'B-matrix', which have been computed as scalars into the
#      R-matrix.
#      --------------------------------------------------------------------------------
#
       CALL SETUP_DIIS 
#
       execute sip_barrier
       execute compute_diis # --> New instruction
       execute sip_barrier
#
       c1 = Tb11
       c2 = Tb22
#
       etemp  = c1 
       etemp += c2 
#
       execute print_scalar c1
       execute print_scalar c2
       execute print_scalar etemp  
       execute sip_barrier
#
#      Done computing the c-vector.
#      ----------------------------
#
#      Form the update Density matrix using the c-vector. 
#      -----------------------------------------------
#
       PARDO mu, nu 
#
           GET F1a(mu,nu) 
           GET F2a(mu,nu) 
#
           t1xx(mu,nu)  = F1a(mu,nu) 
           t1xx(mu,nu) *= c1  
           txx(mu,nu)   = t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F2a(mu,nu) 
           t1xx(mu,nu) *= c2  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           PUT Fpq_a(mu,nu) = txx(mu,nu) 
#
       ENDPARDO mu, nu 
#
       execute sip_barrier 
#
       ENDPROC DIIS2    
#      -------------  
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
       PROC MOVE2    
#      ----------  
#
#      Move histories 
#      -------------- 
#
#      2 --> 1 
#      ------- 
#
       PARDO mu, nu 
             GET F2a(mu,nu) 
             PUT F1a(mu,nu) = F2a(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO a, i 
             GET F2ai(a,i) 
             PUT F1ai(a,i) = F2ai(a,i)  
       ENDPARDO a,i  
#
       execute sip_barrier 
#
#      Current --> 2 
#      ------------- 
#
       PARDO mu, nu 
             GET Fpq_a(mu,nu) 
             PUT F2a(mu,nu) = Fpq_a(mu,nu)  
       ENDPARDO mu, nu 
       execute sip_barrier 
#
       ENDPROC MOVE2    
#      -------------  
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
       PROC DIIS3   
#      -----------  
#
# The DIIS expansion coefficients are computed using the 3 previous iterations.
#
#      Zero out scalars.
#      -----------------
#
       CALL ZERO_SCALAR 
#
       execute sip_barrier 
#
#      Determine the 'B-matrix'. 
#      ------------------------- 
#
#      Contributions from Fai histories. 
#      --------------------------------- 
#
       PARDO a, i 
#
#          GET Fock-matrix data from all 5 previous iterations. 
#          ---------------------------------------------------- 
#
           GET F1ai(a,i) 
           GET F2ai(a,i) 
           GET F3ai(a,i) 
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#          b1x x=1,3 
#          --------- 
#
           etemp = F1ai(a,i)*F1ai(a,i) 
           b11  += etemp 
#
           etemp = F1ai(a,i)*F2ai(a,i) 
           b12  += etemp 
#
           etemp = F1ai(a,i)*F3ai(a,i) 
           b13  += etemp 
#
#          b2x x=2,3
#          --------- 
#
           etemp = F2ai(a,i)*F2ai(a,i) 
           b22  += etemp 
#
           etemp = F2ai(a,i)*F3ai(a,i) 
           b23  += etemp 
#
#          b3x x=3,3 
#          --------- 
#
           etemp = F3ai(a,i)*F3ai(a,i) 
           b33  += etemp 
#
       ENDPARDO a, i 
#
       execute sip_barrier
#
#      Collectively sum B-matrix elements.
#      -----------------------------------
#
       collective Tb11 += b11
       collective Tb12 += b12
       collective Tb13 += b13

       collective Tb22 += b22
       collective Tb23 += b23

       collective Tb33 += b33
#
       execute sip_barrier 
#
#      Now the unique elements of the 'B-matrix' have been computed and the array filled out.
#      --------------------------------------------------------------------------------------
#
#      Put the elements of the 'B-matrix', which have been computed as scalars into the
#      R-matrix.
#      --------------------------------------------------------------------------------
#
       CALL SETUP_DIIS 
#
       execute sip_barrier 
       execute compute_diis # --> New instruction
       execute sip_barrier 
#
       c1 = Tb11
       c2 = Tb22
       c3 = Tb33
#
       etemp  = c1 
       etemp += c2 
       etemp += c3 
#
       execute print_scalar c1
       execute print_scalar c2
       execute print_scalar c3
       execute print_scalar etemp  
       execute sip_barrier
#
#      Done computing the c-vector.
#      ----------------------------
#
#      Form the update Density matrix using the c-vector. 
#      -----------------------------------------------
#
       PARDO mu, nu 
#
           GET F1a(mu,nu) 
           GET F2a(mu,nu) 
           GET F3a(mu,nu) 
#
           t1xx(mu,nu)  = F1a(mu,nu) 
           t1xx(mu,nu) *= c1  
           txx(mu,nu)   = t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F2a(mu,nu) 
           t1xx(mu,nu) *= c2  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F3a(mu,nu) 
           t1xx(mu,nu) *= c3  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           PUT Fpq_a(mu,nu) = txx(mu,nu) 
#
       ENDPARDO mu, nu 
#
       execute sip_barrier 
#
       ENDPROC DIIS3    
#      -------------  
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
       PROC MOVE3    
#      ----------  
#
#      Move histories 
#      -------------- 
#
#      2 --> 1 
#      ------- 
#
       PARDO mu, nu 
             GET F2a(mu,nu) 
             PUT F1a(mu,nu) = F2a(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO a, i 
             GET F2ai(a,i) 
             PUT F1ai(a,i) = F2ai(a,i)  
       ENDPARDO a,i  
#
       execute sip_barrier 
#
#      3 --> 2 
#      ------- 
#
       PARDO mu, nu 
             GET F3a(mu,nu) 
             PUT F2a(mu,nu) = F3a(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO a, i 
             GET F3ai(a,i) 
             PUT F2ai(a,i) = F3ai(a,i)  
       ENDPARDO a, i  
#
       execute sip_barrier 
#
#      Current --> 3 
#      ------------- 
#
       PARDO mu, nu 
             GET Fpq_a(mu,nu) 
             PUT F3a(mu,nu) = Fpq_a(mu,nu)  
       ENDPARDO mu, nu 
       execute sip_barrier 
#
       ENDPROC MOVE3    
#      -------------  
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
       PROC DIIS4   
#      -----------  
#
# The DIIS expansion coefficients are computed using the 6 previous iterations.
#
#      Zero out scalars.
#      -----------------
#
       CALL ZERO_SCALAR 
#
       execute sip_barrier 
#
#      Determine the 'B-matrix'. 
#      ------------------------- 
#
#      Contributions from Fai histories. 
#      --------------------------------- 
#
       PARDO a, i 
#
#          GET Fock-matrix data from all 5 previous iterations. 
#          ---------------------------------------------------- 
#
           GET F1ai(a,i) 
           GET F2ai(a,i) 
           GET F3ai(a,i) 
           GET F4ai(a,i) 
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#          b1x x=1,4 
#          --------- 
#
           etemp = F1ai(a,i)*F1ai(a,i) 
           b11  += etemp 
#
           etemp = F1ai(a,i)*F2ai(a,i) 
           b12  += etemp 
#
           etemp = F1ai(a,i)*F3ai(a,i) 
           b13  += etemp 
#
           etemp = F1ai(a,i)*F4ai(a,i) 
           b14  += etemp 
#
#          b2x x=2,4
#          --------- 
#
           etemp = F2ai(a,i)*F2ai(a,i) 
           b22  += etemp 
#
           etemp = F2ai(a,i)*F3ai(a,i) 
           b23  += etemp 
#
           etemp = F2ai(a,i)*F4ai(a,i) 
           b24  += etemp 
#
#          b3x x=3,4 
#          --------- 
#
           etemp = F3ai(a,i)*F3ai(a,i) 
           b33  += etemp 
#
           etemp = F3ai(a,i)*F4ai(a,i) 
           b34  += etemp 
#
#          b4x x=4,4
#          --------- 
#
           etemp = F4ai(a,i)*F4ai(a,i) 
           b44  += etemp 
#
       ENDPARDO a, i 
#
       execute sip_barrier
#
#      Collectively sum B-matrix elements.
#      -----------------------------------
#
       collective Tb11 += b11
       collective Tb12 += b12
       collective Tb13 += b13
       collective Tb14 += b14

       collective Tb22 += b22
       collective Tb23 += b23
       collective Tb24 += b24

       collective Tb33 += b33
       collective Tb34 += b34

       collective Tb44 += b44
#
       execute sip_barrier 
#
#      Now the unique elements of the 'B-matrix' have been computed and the array filled out.
#      --------------------------------------------------------------------------------------
#
#      Put the elements of the 'B-matrix', which have been computed as scalars into the
#      R-matrix.
#      --------------------------------------------------------------------------------
#
       CALL SETUP_DIIS 
#
       execute compute_diis # --> New instruction
#
       c1 = Tb11
       c2 = Tb22
       c3 = Tb33
       c4 = Tb44
#
       etemp  = c1 
       etemp += c2 
       etemp += c3 
       etemp += c4 
#
       execute print_scalar c1
       execute print_scalar c2
       execute print_scalar c3
       execute print_scalar c4
       execute print_scalar etemp  
       execute sip_barrier
#
#      Done computing the c-vector.
#      ----------------------------
#
#      Form the update Density matrix using the c-vector. 
#      -----------------------------------------------
#
       PARDO mu, nu 
#
           GET F1a(mu,nu) 
           GET F2a(mu,nu) 
           GET F3a(mu,nu) 
           GET F4a(mu,nu) 
#
           t1xx(mu,nu)  = F1a(mu,nu) 
           t1xx(mu,nu) *= c1  
           txx(mu,nu)   = t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F2a(mu,nu) 
           t1xx(mu,nu) *= c2  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F3a(mu,nu) 
           t1xx(mu,nu) *= c3  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F4a(mu,nu) 
           t1xx(mu,nu) *= c4  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           PUT Fpq_a(mu,nu) = txx(mu,nu) 
#
       ENDPARDO mu, nu 
#
       execute sip_barrier 
#
       ENDPROC DIIS4    
#      -------------  
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
       PROC MOVE4    
#      ----------  
#
#      Move histories 
#      -------------- 
#
#      2 --> 1 
#      ------- 
#
       PARDO mu, nu 
             GET F2a(mu,nu) 
             PUT F1a(mu,nu) = F2a(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO a, i 
             GET F2ai(a,i) 
             PUT F1ai(a,i) = F2ai(a,i)  
       ENDPARDO a,i  
#
       execute sip_barrier 
#
#      3 --> 2 
#      ------- 
#
       PARDO mu, nu 
             GET F3a(mu,nu) 
             PUT F2a(mu,nu) = F3a(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO a, i 
             GET F3ai(a,i) 
             PUT F2ai(a,i) = F3ai(a,i)  
       ENDPARDO a, i  
#
       execute sip_barrier 
#
#      4 --> 3 
#      ------- 
#
       PARDO mu, nu 
             GET F4a(mu,nu) 
             PUT F3a(mu,nu) = F4a(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO a, i 
             GET F4ai(a,i) 
             PUT F3ai(a,i) = F4ai(a,i)  
       ENDPARDO a, i  
#
       execute sip_barrier 
#
#      Current --> 4 
#      ------------- 
#
       PARDO mu, nu 
             GET Fpq_a(mu,nu) 
             PUT F4a(mu,nu) = Fpq_a(mu,nu)  
       ENDPARDO mu, nu 
       execute sip_barrier 
#
       ENDPROC MOVE4    
#      -------------  
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
       PROC DIIS5   
#      ----------  
#
# The DIIS expansion coefficients are computed using the 5 previous iterations.
#
#      Zero out scalars.
#      -----------------
#
       CALL ZERO_SCALAR 
#
       execute sip_barrier 
#
#      Determine the 'B-matrix'. 
#      ------------------------- 
#
#      Contributions from Fai histories. 
#      --------------------------------- 
#
       PARDO a, i 
#
#          GET Fock-matrix data from all 5 previous iterations. 
#          ---------------------------------------------------- 
#
           GET F1ai(a,i) 
           GET F2ai(a,i) 
           GET F3ai(a,i) 
           GET F4ai(a,i) 
           GET F5ai(a,i) 
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#          b1x x=1,5
#          --------- 
#
           etemp = F1ai(a,i)*F1ai(a,i) 
           b11  += etemp 
#
           etemp = F1ai(a,i)*F2ai(a,i) 
           b12  += etemp 
#
           etemp = F1ai(a,i)*F3ai(a,i) 
           b13  += etemp 
#
           etemp = F1ai(a,i)*F4ai(a,i) 
           b14  += etemp 
#
           etemp = F1ai(a,i)*F5ai(a,i) 
           b15  += etemp 
#
#          b2x x=2,5
#          --------- 
#
           etemp = F2ai(a,i)*F2ai(a,i) 
           b22  += etemp 
#
           etemp = F2ai(a,i)*F3ai(a,i) 
           b23  += etemp 
#
           etemp = F2ai(a,i)*F4ai(a,i) 
           b24  += etemp 
#
           etemp = F2ai(a,i)*F5ai(a,i) 
           b25  += etemp 
#
#          b3x x=3,5
#          --------- 
#
           etemp = F3ai(a,i)*F3ai(a,i) 
           b33  += etemp 
#
           etemp = F3ai(a,i)*F4ai(a,i) 
           b34  += etemp 
#
           etemp = F3ai(a,i)*F5ai(a,i) 
           b35  += etemp 
#
#          b4x x=4,5
#          --------- 
#
           etemp = F4ai(a,i)*F4ai(a,i) 
           b44  += etemp 
#
           etemp = F4ai(a,i)*F5ai(a,i) 
           b45  += etemp 
#
#          b5x x=5,5
#          --------- 
#
           etemp = F5ai(a,i)*F5ai(a,i) 
           b55  += etemp 
#
       ENDPARDO a, i 
#
       execute sip_barrier
#
#      Collectively sum B-matrix elements.
#      -----------------------------------
#
       collective Tb11 += b11
       collective Tb12 += b12
       collective Tb13 += b13
       collective Tb14 += b14
       collective Tb15 += b15
       collective Tb22 += b22
       collective Tb23 += b23
       collective Tb24 += b24
       collective Tb25 += b25
       collective Tb33 += b33
       collective Tb34 += b34
       collective Tb35 += b35
       collective Tb44 += b44
       collective Tb45 += b45
       collective Tb55 += b55
#
       execute sip_barrier 
#
#
#      Now the unique elements of the 'B-matrix' have been computed and the array filled out.
#      --------------------------------------------------------------------------------------
#
#      Put the elements of the 'B-matrix', which have been computed as scalars into the
#      R-matrix.
#      --------------------------------------------------------------------------------
#
       CALL SETUP_DIIS 
#
       execute compute_diis # --> New instruction
#
       c1 = Tb11
       c2 = Tb22
       c3 = Tb33
       c4 = Tb44
       c5 = Tb55
#
       etemp  = c1 
       etemp += c2 
       etemp += c3 
       etemp += c4 
       etemp += c5 
#
       execute print_scalar c1
       execute print_scalar c2
       execute print_scalar c3
       execute print_scalar c4
       execute print_scalar c5
       execute print_scalar etemp  
       execute sip_barrier
#
#      Done computing the c-vector.
#      ----------------------------
#
#      Form the update Density matrix using the c-vector. 
#      -----------------------------------------------
#
       PARDO mu, nu 
#
           GET F1a(mu,nu) 
           GET F2a(mu,nu) 
           GET F3a(mu,nu) 
           GET F4a(mu,nu) 
           GET F5a(mu,nu) 
#
           t1xx(mu,nu)  = F1a(mu,nu) 
           t1xx(mu,nu) *= c1  
           txx(mu,nu)   = t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F2a(mu,nu) 
           t1xx(mu,nu) *= c2  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F3a(mu,nu) 
           t1xx(mu,nu) *= c3  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F4a(mu,nu) 
           t1xx(mu,nu) *= c4  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F5a(mu,nu) 
           t1xx(mu,nu) *= c5  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           PUT Fpq_a(mu,nu) = txx(mu,nu) 
#
       ENDPARDO mu, nu 
#
       execute sip_barrier 
#
       ENDPROC DIIS5   
#      -------------  
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
       PROC MOVE5   
#      ----------  
#
#      Move histories 
#      -------------- 
#
#      2 --> 1 
#      ------- 
#
       PARDO mu, nu 
             GET F2a(mu,nu) 
             PUT F1a(mu,nu) = F2a(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO a, i 
             GET F2ai(a,i) 
             PUT F1ai(a,i) = F2ai(a,i)  
       ENDPARDO a,i  
#
       execute sip_barrier 
#
#      3 --> 2 
#      ------- 
#
       PARDO mu, nu 
             GET F3a(mu,nu) 
             PUT F2a(mu,nu) = F3a(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO a, i 
             GET F3ai(a,i) 
             PUT F2ai(a,i) = F3ai(a,i)  
       ENDPARDO a, i  
#
       execute sip_barrier 
#
#      4 --> 3 
#      ------- 
#
       PARDO mu, nu 
             GET F4a(mu,nu) 
             PUT F3a(mu,nu) = F4a(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO a, i 
             GET F4ai(a,i) 
             PUT F3ai(a,i) = F4ai(a,i)  
       ENDPARDO a, i  
#
       execute sip_barrier 
#
#      5 --> 4 
#      ------- 
#
       PARDO mu, nu 
             GET F5a(mu,nu) 
             PUT F4a(mu,nu) = F5a(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO a, i 
             GET F5ai(a,i) 
             PUT F4ai(a,i) = F5ai(a,i)  
       ENDPARDO a, i  
#
       execute sip_barrier 
#
#      Current --> 5 
#      ------------- 
#
       PARDO mu, nu 
             GET Fpq_a(mu,nu) 
             PUT F5a(mu,nu) = Fpq_a(mu,nu)  
       ENDPARDO mu, nu 
       execute sip_barrier 
#
       ENDPROC MOVE5   
#      -------------  
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
       PROC DIIS6   
#      -----------  
#
# The DIIS expansion coefficients are computed using the 6 previous iterations.
#
#      Zero out scalars.
#      -----------------
#
       CALL ZERO_SCALAR 
#
       execute sip_barrier 
#
#      Determine the 'B-matrix'. 
#      ------------------------- 
#
#      Contributions from Fai histories. 
#      --------------------------------- 
#
       PARDO a, i 
#
#          GET Fock-matrix data from all 5 previous iterations. 
#          ---------------------------------------------------- 
#
           GET F1ai(a,i) 
           GET F2ai(a,i) 
           GET F3ai(a,i) 
           GET F4ai(a,i) 
           GET F5ai(a,i) 
           GET F6ai(a,i) 
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#          b1x x=1,6 
#          --------- 
#
           etemp = F1ai(a,i)*F1ai(a,i) 
           b11  += etemp 
#
           etemp = F1ai(a,i)*F2ai(a,i) 
           b12  += etemp 
#
           etemp = F1ai(a,i)*F3ai(a,i) 
           b13  += etemp 
#
           etemp = F1ai(a,i)*F4ai(a,i) 
           b14  += etemp 
#
           etemp = F1ai(a,i)*F5ai(a,i) 
           b15  += etemp 
#
           etemp = F1ai(a,i)*F6ai(a,i) 
           b16  += etemp 
#
#          b2x x=2,6
#          --------- 
#
           etemp = F2ai(a,i)*F2ai(a,i) 
           b22  += etemp 
#
           etemp = F2ai(a,i)*F3ai(a,i) 
           b23  += etemp 
#
           etemp = F2ai(a,i)*F4ai(a,i) 
           b24  += etemp 
#
           etemp = F2ai(a,i)*F5ai(a,i) 
           b25  += etemp 
#
           etemp = F2ai(a,i)*F6ai(a,i) 
           b26  += etemp 
#
#          b3x x=3,6 
#          --------- 
#
           etemp = F3ai(a,i)*F3ai(a,i) 
           b33  += etemp 
#
           etemp = F3ai(a,i)*F4ai(a,i) 
           b34  += etemp 
#
           etemp = F3ai(a,i)*F5ai(a,i) 
           b35  += etemp 
#
           etemp = F3ai(a,i)*F6ai(a,i) 
           b36  += etemp 
#
#          b4x x=4,6
#          --------- 
#
           etemp = F4ai(a,i)*F4ai(a,i) 
           b44  += etemp 
#
           etemp = F4ai(a,i)*F5ai(a,i) 
           b45  += etemp 
#
           etemp = F4ai(a,i)*F6ai(a,i) 
           b46  += etemp 
#
#          b5x x=5,6 
#          ---------- 
#
           etemp = F5ai(a,i)*F5ai(a,i) 
           b55  += etemp 
#
           etemp = F5ai(a,i)*F6ai(a,i) 
           b56  += etemp 
#
#          b6x x=6,6 
#          ---------- 
#
           etemp = F6ai(a,i)*F6ai(a,i) 
           b66  += etemp 
#
       ENDPARDO a, i 
#
       execute sip_barrier
#
#      Collectively sum B-matrix elements.
#      -----------------------------------
#
       collective Tb11 += b11
       collective Tb12 += b12
       collective Tb13 += b13
       collective Tb14 += b14
       collective Tb15 += b15
       collective Tb16 += b16
       collective Tb22 += b22
       collective Tb23 += b23
       collective Tb24 += b24
       collective Tb25 += b25
       collective Tb26 += b26
       collective Tb33 += b33
       collective Tb34 += b34
       collective Tb35 += b35
       collective Tb36 += b36
       collective Tb44 += b44
       collective Tb45 += b45
       collective Tb46 += b46
       collective Tb55 += b55
       collective Tb56 += b56
       collective Tb66 += b66
#
       execute sip_barrier 
#
#      Now the unique elements of the 'B-matrix' have been computed and the array filled out.
#      --------------------------------------------------------------------------------------
#
#      Put the elements of the 'B-matrix', which have been computed as scalars into the
#      R-matrix.
#      --------------------------------------------------------------------------------
#
       CALL SETUP_DIIS 
#
       execute sip_barrier 
       execute compute_diis # --> New instruction
       execute sip_barrier 
#
       c1 = Tb11
       c2 = Tb22
       c3 = Tb33
       c4 = Tb44
       c5 = Tb55
       c6 = Tb66  
#
       execute print_scalar c1
       execute print_scalar c2
       execute print_scalar c3
       execute print_scalar c4
       execute print_scalar c5
       execute print_scalar c6
       execute sip_barrier
#
#      Done computing the c-vector.
#      ----------------------------
#
#      Form the update Density matrix using the c-vector. 
#      -----------------------------------------------
#
       PARDO mu, nu 
#
           GET F1a(mu,nu) 
           GET F2a(mu,nu) 
           GET F3a(mu,nu) 
           GET F4a(mu,nu) 
           GET F5a(mu,nu) 
           GET F6a(mu,nu) 
#
           t1xx(mu,nu)  = F1a(mu,nu) 
           t1xx(mu,nu) *= c1  
           txx(mu,nu)   = t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F2a(mu,nu) 
           t1xx(mu,nu) *= c2  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F3a(mu,nu) 
           t1xx(mu,nu) *= c3  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F4a(mu,nu) 
           t1xx(mu,nu) *= c4  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F5a(mu,nu) 
           t1xx(mu,nu) *= c5  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F6a(mu,nu) 
           t1xx(mu,nu) *= c6  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           PUT Fpq_a(mu,nu) = txx(mu,nu) 
#
       ENDPARDO mu, nu 
#
       execute sip_barrier 
#
       ENDPROC DIIS6    
#      -------------  
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
       PROC MOVE6    
#      ----------  
#
#      Move histories 
#      -------------- 
#
#      2 --> 1 
#      ------- 
#
       PARDO mu, nu 
             GET F2a(mu,nu) 
             PUT F1a(mu,nu) = F2a(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO a, i 
             GET F2ai(a,i) 
             PUT F1ai(a,i) = F2ai(a,i)  
       ENDPARDO a,i  
#
       execute sip_barrier 
#
#      3 --> 2 
#      ------- 
#
       PARDO mu, nu 
             GET F3a(mu,nu) 
             PUT F2a(mu,nu) = F3a(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO a, i 
             GET F3ai(a,i) 
             PUT F2ai(a,i) = F3ai(a,i)  
       ENDPARDO a, i  
#
       execute sip_barrier 
#
#      4 --> 3 
#      ------- 
#
       PARDO mu, nu 
             GET F4a(mu,nu) 
             PUT F3a(mu,nu) = F4a(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO a, i 
             GET F4ai(a,i) 
             PUT F3ai(a,i) = F4ai(a,i)  
       ENDPARDO a, i  
#
       execute sip_barrier 
#
#      5 --> 4 
#      ------- 
#
       PARDO mu, nu 
             GET F5a(mu,nu) 
             PUT F4a(mu,nu) = F5a(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO a, i 
             GET F5ai(a,i) 
             PUT F4ai(a,i) = F5ai(a,i)  
       ENDPARDO a, i  
#
       execute sip_barrier 
#
#      6 --> 5 
#      ------- 
#
       PARDO mu, nu 
             GET F6a(mu,nu) 
             PUT F5a(mu,nu) = F6a(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO a, i 
             GET F6ai(a,i) 
             PUT F5ai(a,i) = F6ai(a,i)  
       ENDPARDO a, i  
#
       execute sip_barrier 
#
#      Current --> 6 
#      ------------- 
#
       PARDO mu, nu 
             GET Fpq_a(mu,nu) 
             PUT F6a(mu,nu) = Fpq_a(mu,nu)  
       ENDPARDO mu, nu 
#
       execute sip_barrier 
#
       ENDPROC MOVE6    
#      -------------  
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
       PROC DIIS7   
#      -----------  
#
# The DIIS expansion coefficients are computed using the 7 previous iterations.
#
#      Zero out scalars.
#      -----------------
#
       b11 = 0.0
       b12 = 0.0
       b13 = 0.0
       b14 = 0.0
       b15 = 0.0
       b16 = 0.0
       b17 = 0.0
       b18 = 0.0
       b19 = 0.0
       b110 = 0.0
#
       b22 = 0.0
       b23 = 0.0
       b24 = 0.0
       b25 = 0.0
       b26 = 0.0
       b27 = 0.0
       b28 = 0.0
       b29 = 0.0
       b210 = 0.0
#
       b33 = 0.0
       b34 = 0.0
       b35 = 0.0
       b36 = 0.0
       b37 = 0.0
       b38 = 0.0
       b39 = 0.0
       b310 = 0.0
#
       b44 = 0.0
       b45 = 0.0
       b46 = 0.0
       b47 = 0.0
       b48 = 0.0
       b49 = 0.0
       b410 = 0.0
#
       b55 = 0.0
       b56 = 0.0
       b57 = 0.0
       b58 = 0.0
       b59 = 0.0
       b510 = 0.0
#
       b66 = 0.0
       b67 = 0.0
       b68 = 0.0
       b69 = 0.0
       b610 = 0.0
#
       b77 = 0.0
       b78 = 0.0
       b79 = 0.0
       b710 = 0.0
#
       b88 = 0.0
       b89 = 0.0
       b810 = 0.0
#
       b99 = 0.0
       b910 = 0.0
#
       b1010 = 0.0
#
       Tb11 = 0.0
       Tb12 = 0.0
       Tb13 = 0.0
       Tb14 = 0.0
       Tb15 = 0.0
       Tb16 = 0.0
       Tb17 = 0.0
       Tb18 = 0.0
       Tb19 = 0.0
       Tb110 = 0.0
#
       Tb22 = 0.0
       Tb23 = 0.0
       Tb24 = 0.0
       Tb25 = 0.0
       Tb26 = 0.0
       Tb27 = 0.0
       Tb28 = 0.0 
       Tb29 = 0.0
       Tb210 = 0.0
#
       Tb33 = 0.0
       Tb34 = 0.0
       Tb35 = 0.0
       Tb36 = 0.0
       Tb37 = 0.0
       Tb38 = 0.0
       Tb39 = 0.0
       Tb310 = 0.0
#
       Tb44 = 0.0
       Tb45 = 0.0
       Tb46 = 0.0
       Tb47 = 0.0
       Tb48 = 0.0
       Tb49 = 0.0
       Tb410 = 0.0
#
       Tb55 = 0.0
       Tb56 = 0.0
       Tb57 = 0.0
       Tb58 = 0.0
       Tb59 = 0.0
       Tb510 = 0.0
#
       Tb66 = 0.0
       Tb67 = 0.0
       Tb68 = 0.0
       Tb69 = 0.0
       Tb610 = 0.0
#
       Tb77 = 0.0
       Tb78 = 0.0
       Tb79 = 0.0
       Tb710 = 0.0
#
       Tb88 = 0.0
       Tb89 = 0.0
       Tb810 = 0.0
#
       Tb99 = 0.0
       Tb910 = 0.0
#
       Tb1010 = 0.0
#
       c1 = 0.0 
       c2 = 0.0 
       c3 = 0.0 
       c4 = 0.0 
       c5 = 0.0 
       c6 = 0.0 
       c7 = 0.0 
       c8 = 0.0 
       c9 = 0.0 
       c10 = 0.0 
#
       execute sip_barrier 
#
#      Determine the 'B-matrix'. 
#      ------------------------- 
#
#      Contributions from Fai histories. 
#      --------------------------------- 
#
       PARDO a, i 
#
#          GET Fock-matrix data from all 5 previous iterations. 
#          ---------------------------------------------------- 
#
           GET F1ai(a,i) 
           GET F2ai(a,i) 
           GET F3ai(a,i) 
           GET F4ai(a,i) 
           GET F5ai(a,i) 
           GET F6ai(a,i) 
           GET F7ai(a,i) 
#
#          Compute contributions to the 'B-matrix'. 
#          ---------------------------------------- 
#
#          b1x x=1,7 
#          --------- 
#
           etemp = F1ai(a,i)*F1ai(a,i) 
           b11  += etemp 
#
           etemp = F1ai(a,i)*F2ai(a,i) 
           b12  += etemp 
#
           etemp = F1ai(a,i)*F3ai(a,i) 
           b13  += etemp 
#
           etemp = F1ai(a,i)*F4ai(a,i) 
           b14  += etemp 
#
           etemp = F1ai(a,i)*F5ai(a,i) 
           b15  += etemp 
#
           etemp = F1ai(a,i)*F6ai(a,i) 
           b16  += etemp 
#
           etemp = F1ai(a,i)*F7ai(a,i) 
           b17  += etemp 
#
#          b2x x=2,7
#          --------- 
#
           etemp = F2ai(a,i)*F2ai(a,i) 
           b22  += etemp 
#
           etemp = F2ai(a,i)*F3ai(a,i) 
           b23  += etemp 
#
           etemp = F2ai(a,i)*F4ai(a,i) 
           b24  += etemp 
#
           etemp = F2ai(a,i)*F5ai(a,i) 
           b25  += etemp 
#
           etemp = F2ai(a,i)*F6ai(a,i) 
           b26  += etemp 
#
           etemp = F2ai(a,i)*F7ai(a,i) 
           b27  += etemp 
#
#          b3x x=3,7 
#          --------- 
#
           etemp = F3ai(a,i)*F3ai(a,i) 
           b33  += etemp 
#
           etemp = F3ai(a,i)*F4ai(a,i) 
           b34  += etemp 
#
           etemp = F3ai(a,i)*F5ai(a,i) 
           b35  += etemp 
#
           etemp = F3ai(a,i)*F6ai(a,i) 
           b36  += etemp 
#
           etemp = F3ai(a,i)*F7ai(a,i) 
           b37  += etemp 
#
#          b4x x=4,7
#          --------- 
#
           etemp = F4ai(a,i)*F4ai(a,i) 
           b44  += etemp 
#
           etemp = F4ai(a,i)*F5ai(a,i) 
#          b45  += etemp 
#
           etemp = F4ai(a,i)*F6ai(a,i) 
           b46  += etemp 
#
           etemp = F4ai(a,i)*F7ai(a,i) 
           b47  += etemp 
#
#          b5x x=5,7 
#          ---------- 
#
           etemp = F5ai(a,i)*F5ai(a,i) 
           b55  += etemp 
#
           etemp = F5ai(a,i)*F6ai(a,i) 
           b56  += etemp 
#
           etemp = F5ai(a,i)*F7ai(a,i) 
           b57  += etemp 
#
#          b6x x=6,7 
#          ---------- 
#
           etemp = F6ai(a,i)*F6ai(a,i) 
           b66  += etemp 
#
           etemp = F6ai(a,i)*F7ai(a,i) 
           b67  += etemp 
#
#          b7x x=7,7 
#          --------- 
#
           etemp = F7ai(a,i)*F7ai(a,i) 
           b77  += etemp 
#
       ENDPARDO a, i 
#
       execute sip_barrier
#
#      Collectively sum B-matrix elements.
#      -----------------------------------
#
       collective Tb11 += b11
       collective Tb12 += b12
       collective Tb13 += b13
       collective Tb14 += b14
       collective Tb15 += b15
       collective Tb16 += b16
       collective Tb17 += b17

       collective Tb22 += b22
       collective Tb23 += b23
       collective Tb24 += b24
       collective Tb25 += b25
       collective Tb26 += b26
       collective Tb27 += b27

       collective Tb33 += b33
       collective Tb34 += b34
       collective Tb35 += b35
       collective Tb36 += b36
       collective Tb37 += b37

       collective Tb44 += b44
       collective Tb45 += b45
       collective Tb46 += b46
       collective Tb47 += b47

       collective Tb55 += b55
       collective Tb56 += b56
       collective Tb57 += b57

       collective Tb66 += b66
       collective Tb67 += b67

       collective Tb77 += b77
#
       execute sip_barrier 
#
#
#      Now the unique elements of the 'B-matrix' have been computed and the array filled out.
#      --------------------------------------------------------------------------------------
#
#      Put the elements of the 'B-matrix', which have been computed as scalars into the
#      R-matrix.
#      --------------------------------------------------------------------------------
#
       execute diis_setup Tb11
       execute diis_setup Tb12
       execute diis_setup Tb13
       execute diis_setup Tb14
       execute diis_setup Tb15
       execute diis_setup Tb16
       execute diis_setup Tb17
       execute diis_setup Tb18
       execute diis_setup Tb19
       execute diis_setup Tb110 

       execute diis_setup Tb22
       execute diis_setup Tb23
       execute diis_setup Tb24
       execute diis_setup Tb25
       execute diis_setup Tb26
       execute diis_setup Tb27
       execute diis_setup Tb28
       execute diis_setup Tb29
       execute diis_setup Tb210 

       execute diis_setup Tb33
       execute diis_setup Tb34
       execute diis_setup Tb35
       execute diis_setup Tb36
       execute diis_setup Tb37
       execute diis_setup Tb38
       execute diis_setup Tb39
       execute diis_setup Tb310 

       execute diis_setup Tb44
       execute diis_setup Tb45
       execute diis_setup Tb46
       execute diis_setup Tb47
       execute diis_setup Tb48
       execute diis_setup Tb49
       execute diis_setup Tb410 

       execute diis_setup Tb55
       execute diis_setup Tb56
       execute diis_setup Tb57
       execute diis_setup Tb58
       execute diis_setup Tb59
       execute diis_setup Tb510 

       execute diis_setup Tb66
       execute diis_setup Tb67
       execute diis_setup Tb68
       execute diis_setup Tb69
       execute diis_setup Tb610 

       execute diis_setup Tb77
       execute diis_setup Tb78
       execute diis_setup Tb79
       execute diis_setup Tb710 

       execute diis_setup Tb88
       execute diis_setup Tb89
       execute diis_setup Tb810 

       execute diis_setup Tb99
       execute diis_setup Tb910 

       execute diis_setup Tb1010 
#
       execute compute_diis # --> New instruction
#
       c1 = Tb11
       c2 = Tb22
       c3 = Tb33
       c4 = Tb44
       c5 = Tb55
       c6 = Tb66  
       c7 = Tb77
#
       etemp  = c1 
       etemp += c2 
       etemp += c3 
       etemp += c4 
       etemp += c5 
       etemp += c6
       etemp += c7
#
       execute print_scalar c1
       execute print_scalar c2
       execute print_scalar c3
       execute print_scalar c4
       execute print_scalar c5
       execute print_scalar c6
       execute print_scalar c7
       execute print_scalar etemp  
       execute sip_barrier
#
#      Done computing the c-vector.
#      ----------------------------
#
#      Form the update Density matrix using the c-vector. 
#      -----------------------------------------------
#
       PARDO mu, nu 
#
           GET F1a(mu,nu) 
           GET F2a(mu,nu) 
           GET F3a(mu,nu) 
           GET F4a(mu,nu) 
           GET F5a(mu,nu) 
           GET F6a(mu,nu) 
           GET F7a(mu,nu) 
#
           t1xx(mu,nu)  = F1a(mu,nu) 
           t1xx(mu,nu) *= c1  
           txx(mu,nu)   = t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F2a(mu,nu) 
           t1xx(mu,nu) *= c2  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F3a(mu,nu) 
           t1xx(mu,nu) *= c3  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F4a(mu,nu) 
           t1xx(mu,nu) *= c4  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F5a(mu,nu) 
           t1xx(mu,nu) *= c5  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F6a(mu,nu) 
           t1xx(mu,nu) *= c6  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           t1xx(mu,nu)  = F7a(mu,nu) 
           t1xx(mu,nu) *= c7  
           txx(mu,nu)  += t1xx(mu,nu) 
#
           Fpq_a(mu,nu) = txx(mu,nu) 
#
       ENDPARDO mu, nu 
#
       execute sip_barrier 
#
#      Move histories 
#      -------------- 
#
#      2 --> 1 
#      ------- 
#
       PARDO mu, nu 
             GET F2a(mu,nu) 
             PUT F1a(mu,nu) = F2a(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO a, i 
             GET F2ai(a,i) 
             PUT F1ai(a,i) = F2ai(a,i)  
       ENDPARDO a,i  
#
       execute sip_barrier 
#
#      3 --> 2 
#      ------- 
#
       PARDO mu, nu 
             GET F3a(mu,nu) 
             PUT F2a(mu,nu) = F3a(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO a, i 
             GET F3ai(a,i) 
             PUT F2ai(a,i) = F3ai(a,i)  
       ENDPARDO a, i  
#
       execute sip_barrier 
#
#      4 --> 3 
#      ------- 
#
       PARDO mu, nu 
             GET F4a(mu,nu) 
             PUT F3a(mu,nu) = F4a(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO a, i 
             GET F4ai(a,i) 
             PUT F3ai(a,i) = F4ai(a,i)  
       ENDPARDO a, i  
#
       execute sip_barrier 
#
#      5 --> 4 
#      ------- 
#
       PARDO mu, nu 
             GET F5a(mu,nu) 
             PUT F4a(mu,nu) = F5a(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO a, i 
             GET F5ai(a,i) 
             PUT F4ai(a,i) = F5ai(a,i)  
       ENDPARDO a, i  
#
       execute sip_barrier 
#
#      6 --> 5 
#      ------- 
#
       PARDO mu, nu 
             GET F6a(mu,nu) 
             PUT F5a(mu,nu) = F6a(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO a, i 
             GET F6ai(a,i) 
             PUT F5ai(a,i) = F6ai(a,i)  
       ENDPARDO a, i  
#
       execute sip_barrier 
#
#      7 --> 6 
#      ------- 
#
       PARDO mu, nu 
             GET F7a(mu,nu) 
             PUT F6a(mu,nu) = F7a(mu,nu)  
       ENDPARDO mu, nu 
#
       PARDO a, i 
             GET F7ai(a,i) 
             PUT F6ai(a,i) = F7ai(a,i)  
       ENDPARDO a, i  
#
       execute sip_barrier 
#
#      Current --> 7 
#      ------------- 
#
       PARDO mu, nu 
             GET Fpq_a(mu,nu) 
             PUT F7a(mu,nu) = Fpq_a(mu,nu)  
       ENDPARDO mu, nu 
       execute sip_barrier 
#
       ENDPROC DIIS7    
#      -------------  
#
# ---------------------------------------------------------------------------- 
#
# ---------------------------------------------------------------------------- 
#
############################################################################## 
#
#                         START OF MAIN PROGRAM 
#
############################################################################## 
#
#     Define a few constants 
#     ---------------------- 
#
      ecrit  = scf_conv # Energy tolerance  
      etemp  = 1.0 
      etemp += damp  
      damp1  = 1.0/etemp         # 1/(1+damp)  
      execute print_scalar damp 
      execute print_scalar damp1
#
#     Create the one-particle arrays needed for the computation. 
#     ---------------------------------------------------------- 
#
#     Fock matrix
#     ----------- 
      CREATE Fpq_a  
#
#     New HF density 
#     -------------- 
#
      CREATE DHFa   
#
#     Old HF density 
#     -------------- 
#
      CREATE DHFa_old    
#
#     Orthonormalizing transformation coefficient
#     ------------------------------------------- 
#
      CREATE Qxx 
      execute sip_barrier 
#
#     Construct the initial guess of the Fock matrix. 
#     ----------------------------------------------- 
#
      CALL IGUESS  
#
#     execute sip_barrier 
#     execute list_to_blocks Fpq_a 
#     execute sip_barrier 
#     execute list_to_blocks Fpq_b 
#     execute sip_barrier 
#
      #execute sip_barrier
#
#     Construct the array S**(-1/2) 
#     ----------------------------- 
#
      CALL OVER_HALF 
      execute sip_barrier
#
#     Construct S^(-1/2) F S^(-1/2) 
#     ----------------------------- 
#
      CREATE FTpq_a  
      execute sip_barrier 
      CALL FOCK_TRANSPOSE 
      execute sip_barrier 
#
#     Diagonalize the transposed Fock matrix 
#     -------------------------------------- 
#
      CALL FOCK_DIAG 
#
#     Back transform the coefficient array 
#     ------------------------------------ 
#
      CREATE CBT_a 
      execute sip_barrier
      CALL   C_BTRAN 
      execute sip_barrier
#
#     Zero out the 'old' HF density 
#     ----------------------------- 
#
      CALL HFDENS_ZERO 
      execute sip_barrier
#
#     Compute the HF density 
#     ---------------------- 
#
      CALL HFDENS
      execute sip_barrier
#
#     Damp the HF density 
#     ------------------- 
#
#     CALL HF_DAMP 
#     execute sip_barrier
#
#     Compute the energy 
#     ------------------ 
#
      CALL HF_ENERGY 
      energy1 = energy 
      execute sip_barrier
#
#     Replace 'old' HF density by 'new' HF density 
#     -------------------------------------------- 
#
      CALL HFDENS_REPLACE 
#
#     Create history arrays 
#     --------------------- 
#
      CREATE Fai 
      CREATE F1ai 
      CREATE F2ai 
      CREATE F3ai 
      CREATE F4ai 
      CREATE F5ai 
      CREATE F6ai 
#
      CREATE F1a 
      CREATE F2a 
      CREATE F3a 
      CREATE F4a 
      CREATE F5a 
      CREATE F6a 
      execute sip_barrier
#
      DELETE FTpq_a  
      DELETE Fpq_a  
      DELETE CBT_a 
#
# Start iterations 
# ---------------- 
#
      DO kiter 
#
#        Create 1-particle arrays 
#        ------------------------ 
#
         CREATE Fpq_a 
         CREATE CBT_a 
         CREATE FTpq_a  
         execute sip_barrier
#
#        Construct the new Fock matrix 
#        -----------------------------
#
         CALL FOCK_MATRIX  
         execute sip_barrier 
#
         CALL HF_ENERGY 
         energy2 = energy 
         execute sip_barrier
#
#        Compute the energy 
#        ------------------ 
#
         CALL GEN_6HISTORY 
         execute sip_barrier 
#
         if kiter == 4 # scf_beg  
            damp   = 0.0    
            damp1  = 1.0    
#
#           Perform DIIS if kiter == 4 
#           -------------------------- 
#
            CALL DIIS2 
         endif 
#
         if kiter == 5 # scf_beg  
#
#           Perform DIIS if kiter == 5 
#           -------------------------- 
#
            CALL DIIS3 
         endif 
#
         if kiter == 6 # scf_beg  
#
#           Perform DIIS if kiter == 6 
#           -------------------------- 
#
            CALL DIIS4 
         endif 
#
         if kiter == 7 # scf_beg  
#
#           Perform DIIS if kiter >= 7 
#           -------------------------- 
#
            CALL DIIS5 
         endif 
#
         if kiter >= 8 # scf_beg  
#
#           Perform DIIS if kiter >= 7 
#           -------------------------- 
#
            CALL DIIS6 
            CALL MOVE6 
         endif 
#
         execute sip_barrier
#
#        Transpose the new Fock matrix 
#        -----------------------------
#
         CALL FOCK_TRANSPOSE 
         execute sip_barrier
#
#        Diagonalize the transposed Fock matrix 
#        -------------------------------------- 
#
         CALL FOCK_DIAG 
         execute sip_barrier
#
#        Back transform the coefficient array 
#        ------------------------------------ 
#
         CALL C_BTRAN 
         execute sip_barrier
#
         done = 0.0
         execute sip_barrier
#
#        Check on convergence --> largest HF density difference.
#        -------------------------------------------------------
#
         DO mu
         DO nu
#
#           Alpha component
#           ---------------
#
            GET           DHFa_old(mu,nu)
            GET           DHFa(mu,nu)
#
            Txx(mu,nu)  = DHFa(mu,nu)
            Txx(mu,nu) -= DHFa_old(mu,nu)

            execute check_dconf Txx donea
            if donea > done
               done = donea
            endif
#
         ENDDO nu
         ENDDO mu
#
         execute sip_barrier
#
         execute print_scalar done
#
#        Check on convergence using density difference.
#        ----------------------------------------------
#
         IF kiter > 1
            IF done < scf_conv
               DELETE FTpq_a
               DELETE CBT_a
               exit
            ENDIF
         ENDIF
#
#        Replace 'old' HF density by 'new' HF density 
#        -------------------------------------------- 
#
         CALL HFDENS_REPLACE 
         execute sip_barrier
#
#        Check on convergence.  
#        --------------------- 
#
#        IF energy2 < energy1  
#           ediff = energy1 -energy2  
#           IF ediff < ecrit
#              exit # kiter
#           ENDIF
#        ENDIF
#
#        IF energy2 > energy1  
#           ediff = energy2 - energy1  
#           IF ediff < ecrit
#              exit # kiter
#           ENDIF
#        ENDIF
#
#        Reset eold --> enew
#        -------------------
#
         energy1 = energy2  
#
#        Compute the HF density 
#        ---------------------- 
#
         CALL HFDENS
         execute sip_barrier
#
#        Delete one-particle arrays to be used in the next iteration. 
#        ------------------------------------------------------------ 
#
         if kiter < scf_iter
            DELETE Fpq_a 
         endif
         DELETE FTpq_a  
         DELETE CBT_a 
#
      ENDDO kiter 
#
      execute sip_barrier
      DELETE Qxx
      DELETE Fai
      DELETE F1ai
      DELETE F2ai
      DELETE F3ai
      DELETE F4ai
      DELETE F5ai
      DELETE F6ai
      DELETE F1a
      DELETE F2a
      DELETE F3a
      DELETE F4a
      DELETE F5a
      DELETE F6a
   
      CREATE FTa 
      execute sip_barrier 
      PARDO mu, nu 
            GET Fpq_a(mu,nu) 
            DO p 
               Txp(mu,p) = Fpq_a(mu,nu)*ca(nu,p) 
               DO p1 
                  Tpp(p1,p) = Txp(mu,p)*ca(mu,p1) 
                  PUT FTa(p1,p) += Tpp(p1,p) 
               ENDDO p1  
            ENDDO p 
      ENDPARDO mu, nu  
#     
      execute sip_barrier 
#
#     Put the final Fock arrays into predefined arrays 
#     ------------------------------------------------ 
#
      DO p 
      DO p1  
         GET FTa(p,p1) 
         Fock_a(p,p1) = FTa(p,p1) 
      ENDDO p1  
      ENDDO p 
#
#     Copy CA  --> CB, Focka --> Fockb.  This avoids possible errors
#     in setting the ACES2 REF parameter.  
#
      execute scf_rhf Fock_b cb
#
#     Compute final energies.
#
      scfeneg += energy2 
      totenerg = scfeneg
      execute sip_barrier
#
                           ENDSIAL SCF_RHF_DIIS         
#
###############################################################################
#
