 
                    SIAL SCF_TEST
#
      index   NbfnsA = 1, eavirtorb #norb
      index   NbfnsB = 1, ebvirtorb #norb

      aoindex mu     = 1, norb
      aoindex nu     = 1, norb
      aoindex lambda = 1, norb
      aoindex sigma  = 1, norb
#
      moaindex i = baocc, eaocc
      moaindex i1= baocc, eaocc
      moaindex i2= baocc, eaocc
      moaindex i3= baocc, eaocc
#
      moaindex a = bavirt, eavirt
      moaindex a1= bavirt, eavirt
      moaindex a2= bavirt, eavirt
      moaindex a3= bavirt, eavirt
#
      mobindex j = bbocc, ebocc
      mobindex j1= bbocc, ebocc
      mobindex j2= bbocc, ebocc
      mobindex j3= bbocc, ebocc
#
      mobindex b = bbvirt, ebvirt
      mobindex b1= bbvirt, ebvirt
      mobindex b2= bbvirt, ebvirt
      mobindex b3= bbvirt, ebvirt
#
      moaindex p = baocc, eavirt
      moaindex p1= baocc, eavirt
      moaindex p2= baocc, eavirt

      moaindex q = baocc, eavirt
      moaindex q1= baocc, eavirt
      moaindex q2= baocc, eavirt
      moaindex q3= baocc, eavirt

      Temp Txx(mu,nu)
      Temp T2xx(mu,nu)
      Temp TPxx(mu,nu)
      Temp T1xx(mu,nu)
      Temp TAxx(mu,sigma)
      Temp TBxx(mu,sigma)
      Temp Txp(mu,p)
      Temp Txi(mu,i)
      Temp T1xi(mu,i)
      Temp Txq(mu,q)
      Temp T1xp(mu,p)
      Temp T1xq(mu,q)
      Temp Tpq(mu,nu)
      Temp T1pq(mu,nu)
      Temp aoint(mu,nu,lambda,sigma)

      Static x1(mu,nu)
      Distributed OVLP_INV(mu,nu)
      Static OVLP(mu,nu)
      Static CA_TEMP(nu,p)
      Static A_OCC_NUMS(NbfnsA)
      Static FSpq_a(mu,nu)
      Static FSpq_b(mu,nu)

      Distributed OCA(nu,p)
      Distributed BCA(nu,p)
      Distributed QXX(mu,nu)
      Distributed Fpq_a(mu,nu)
      Distributed Fpq_b(mu,nu)
      Distributed FTpq_a(mu,nu)
      Distributed FTpq_b(mu,nu)
      Distributed CBT_a(mu,p)
      Distributed CBT_b(mu,q)
      Distributed DHFa(mu,nu)
      Distributed DHFb(mu,nu)


      scalar esum
      scalar esuma 
      scalar esumb
      scalar etemp
      scalar rank
      scalar energy
      scalar zero
      scalar tmp
      
      PROC OVER_HALF 
# ---------------------------------------------------------------------------- 
#
#      Diagonalize the overlap matrix, invert and take the square
#      root of the diagonal elements. 
#      -------------------------------------------------------------- 
#
# Save the overlap matrix for future purposes.
#
       execute get_my_rank rank 
       DO mu
       DO nu
             Txx(mu,nu)  = Oed_ovl(mu,nu)
             OVLP(mu,nu) = Txx(mu,nu)
       ENDDO nu
       ENDDO mu

       execute eig_sr_inv oed_ovl x1   
#bgn_debug
       esuma=0.0
       esumb=0.0
       ##execute sum_2d_array oed_ovl esuma
       #execute sum_2d_array x1 esumb
       execute print_scalar esuma
       execute print_scalar esumb
#end_debug

#bgn_debug
      esuma=0.0
      esumb=0.0
      do mu
      do nu
         etemp = oed_ovl(mu,nu) * oed_ovl(mu,nu)
         esuma += etemp
         etemp = x1(mu,nu) * x1(mu,nu)
         esumb += etemp
#         txx(mu,nu) = x1(mu,nu)
#         PUT OVLP_INV(mu,nu) = Txx(mu,nu)
      enddo nu
      enddo mu
      execute print_scalar esuma
      execute print_scalar esumb
#      execute sip_barrier 
#      
#end_debug
       
      
#      Form the Q-matrix --> U s**{-1/2) 
#      --------------------------------- 
#
       PARDO mu, nu  
#
          Txx(mu,nu) = 0.0 
#
          DO lambda 

             T2xx(mu,lambda) = x1(mu,lambda)
             TPXX(lambda,nu)  = oed_ovl(lambda,nu)

             T1xx(mu,nu)     = T2xx(mu,lambda) * TPXX(lambda,nu)
             Txx(mu,nu) += T1xx(mu,nu) 

          ENDDO lambda  
#
          PUT Qxx(mu,nu) = Txx(mu,nu)  
#
       ENDPARDO mu, nu  

#bgn_debug 
      execute sip_barrier 
      esum=0.0
      if rank==0.0
      do mu
      do nu
         get  Qxx(mu,nu)
         etemp = Qxx(mu,nu) * Qxx(mu,nu)
         esum += etemp
      enddo nu
      enddo mu
      endif 
      execute print_scalar esum
      do mu
      do nu
      esuma=0.0
      get  Qxx(mu,nu)
      #execute sum_2d_array Qxx esuma 
      execute print_scalar esuma
      enddo nu
      enddo mu
#end_debug
#
      ENDPROC OVER_HALF 

# ---------------------------------------------------------------------------- 
#
       PROC FOCK_TRANSPOSE 
#      ------------------- 
#
#      Form the transposed Fock matrix --> Q+ F Q 
#      ------------------------------------------ 
#

#bgn_debug
      esuma = 0.0
      DO mu
      DO nu 
         GET qxx(MU,NU)
         etemp = qxx(MU,NU) * qxx(MU,NU)
         esuma += etemp
      ENDDO nu 
      ENDDO mu
      execute print_scalar esuma 
#end_debug

       PARDO mu, sigma   
#
             TAxx(mu,sigma) = 0.0 
             TBxx(mu,sigma) = 0.0 
#
             DO lambda 
#
                GET Fpq_a(lambda,sigma) 
                GET Fpq_b(lambda,sigma) 
                GET Qxx(lambda,mu) 
#
                T1xx(mu,sigma)  = Qxx(lambda,mu)*Fpq_a(lambda,sigma)  
                TAxx(mu,sigma) += T1xx(mu,sigma) 
#
                T1xx(mu,sigma)  = Qxx(lambda,mu)*Fpq_b(lambda,sigma)  
                TBxx(mu,sigma) += T1xx(mu,sigma) 
#
             ENDDO lambda 
#
             DO nu 
#
                GET Qxx(sigma,nu) 
#
                T1xx(mu,nu) =        TAxx(mu,sigma)*Qxx(sigma,nu) 
                PUT FTpq_a(mu,nu) += T1xx(mu,nu) 
#
                T2xx(mu,nu)        = TBxx(mu,sigma)*Qxx(sigma,nu) 
                PUT FTpq_b(mu,nu) += T2xx(mu,nu) 
#
             ENDDO nu 
#
       ENDPARDO mu, sigma   
#bgn_debug
      execute sip_barrier
       if rank==0.0
       esuma = 0.0
       esumb = 0.0
       DO mu
       DO nu
          get Fpq_a(mu,nu)
          get Fpq_b(mu,nu)
          etemp  = Fpq_a(mu,nu) * Fpq_a(mu,nu)
          esuma += etemp
          etemp  = Fpq_b(mu,nu) * Fpq_b(mu,nu)
          esumb += etemp
       ENDDO nu
       ENDDO mu
       execute print_scalar esuma
       execute print_scalar esumb
       endif
       do mu
       do nu
       esuma = 0.0
       esumb = 0.0
       get Fpq_a(mu,nu)
       get Fpq_b(mu,nu)
       ##execute sum_2d_array Fpq_a esuma
       #execute sum_2d_array Fpq_b esumb
       execute print_scalar esuma
       execute print_scalar esumb
       enddo nu
       enddo mu
#bgn_debug

#
       ENDPROC FOCK_TRANSPOSE 
#      ---------------------- 
# ---------------------------------------------------------------------------- 
#
       PROC FOCK_DIAG  
#      -------------- 
#
#      First put the transposed Fock arrays into static arrays 
#      ------------------------------------------------------- 
#
       DO MU
       DO NU
          TXX(mu,nu) = 0.0
          FSpq_a(mu,nu) = TXX(mu,nu)
          FSpq_b(mu,nu) = TXX(mu,nu)
       ENDDO NU
       ENDDO MU
 
       DO mu   
       DO nu  
#
          GET             FTpq_a(mu,nu) 
          GET             FTpq_b(mu,nu)

          Txx(mu,nu)  =  FTpq_a(mu,nu)
          T1xx(mu,nu) = FTpq_b(mu,nu)
#
          FSpq_a(mu,nu) = Txx(mu,nu)
          FSpq_b(mu,nu) = T1xx(mu,nu)
#
       ENDDO nu  
       ENDDO mu   
       execute sip_barrier 
#bgn_debug
       esuma=0.0
       esumb=0.0
       #execute sum_2d_array FSpq_a esuma
       #execute sum_2d_array FSpq_b esumb
       execute print_scalar esuma
       execute print_scalar esumb
#end_debug

       execute eig FSpq_a ca
       execute sip_barrier 

execute get_my_rank rank
if rank == 0.0
    do mu
        do nu
       execute dump_amp FSpq_a(mu,nu)
        enddo nu
    enddo mu
endif
#bgn_debug
       esuma=0.0
       #execute sum_2d_array ca esuma
       execute print_scalar esuma
#end_debug
#
       ENDPROC FOCK_DIAG 
#      ----------------- 
# ---------------------------------------------------------------------------- 
#
       PROC C_BTRAN 
#      ------------ 
#
#      Transform the coefficient array back to the original basis 
#      ---------------------------------------------------------- 
#
       PARDO mu, p  
#
          Txp(mu,p) = 0.0 
#
          DO nu 
#
             GET          Qxx(mu,nu) 
             Txx(mu,nu) = QXX(mu,nu)
#
             T1xp(mu,p) = TXX(mu,nu)*ca(nu,p)   
             Txp(mu,p) += T1xp(mu,p) 
#
          ENDDO nu 
#
          PUT CBT_a(mu,p) = Txp(mu,p) 
#
       ENDPARDO mu, p  
#
#       PARDO mu, q
# 
#          Txq(mu,q) = 0.0 
#
#          DO nu 
#
#             GET          Qxx(mu,nu) 
#
#             T1xq(mu,q) = Qxx(mu,nu)*ca(nu,q)   
#             Txq(mu,q) += T1xq(mu,q) 
#
#          ENDDO nu 
#
#          PUT CBT_b(mu,q) = Txq(mu,q) 
#
#       ENDPARDO mu, q
       execute sip_barrier 
#
#      Put the transformed coefficients into static arrays 
#      --------------------------------------------------- 
#
       DO mu 
       DO p 
          GET        CBT_a(mu,p) 
          Txp(mu,p) = CBT_a(mu,p)
          ca(mu,p)  = Txp(mu,p)
       ENDDO p 
       ENDDO mu  
#bgn_debug
       esuma=0.0
       esumb=0.0
       #execute sum_2d_array Ca esuma
       execute print_scalar esuma
#end_debg
#
       ENDPROC C_BTRAN 
#      --------------- 
# -----------------------------------------------------------------------------
#
      PROC HFIDENS
#     ------------
#
#     Procedure which computes the HF density without Davidson damping. 
#     ----------------------------------------------------------------- 
#
      DO p
      DO nu
         Txp(nu,p)     = CA(nu,p)
         CA_TEMP(nu,p) = Txp(nu,p)
      ENDDO nu
      ENDDO p

      execute sip_barrier 

      DO p
      DO nu
         Txp(nu,p)     = CA_TEMP(nu,p)
         T1xp(nu,p)    = CA(nu,p)
         PUT OCA(nu,p) = Txp(nu,p)
         PUT BCA(nu,p) = T1xp(nu,p)
      ENDDO nu
      ENDDO p

      execute sip_barrier 

      PARDO mu, nu
#
#           alpha component
#           ---------------
#

            Tpq(mu,nu) = 0.0
#
            DO i
#               GET OCA(nu,p)
#               GET BCA(mu,p)
               Txi(nu,i)   = CA(nu,i)
               T1xi(mu,i)  = CA(mu,i)

#               Txp(nu,p)   = OCA(nu,p)
#               T1xp(mu,p)  = BCA(mu,p)
               T1pq(mu,nu) = Txi(nu,i) * T1xi(mu,i)
               Tpq(mu,nu) += T1pq(mu,nu)

            ENDDO i

            PUT Dhfa(mu,nu) = Tpq(mu,nu)
            PUT Dhfb(mu,nu) = Tpq(mu,nu)
#
      ENDPARDO mu, nu 
#
#bgn_debug
      execute sip_barrier 
      esuma = 0.0
      do mu
      do p
         
#         execute dump_amp CA(mu,p)
         tmp = Ca(mu,p) * Ca(mu,p)
         esuma += tmp
      enddo p
      enddo mu
      execute print_scalar esuma
      esuma = 0.0
      do mu
      do nu
         get Dhfa(mu,nu)
#         execute dump_amp Dhfa(mu,nu)
         tmp =  Dhfa(mu,nu) * Dhfa(mu,nu)
         esuma += tmp
      enddo nu
      enddo mu
      execute print_scalar esuma

#end_debug

      ENDPROC HFIDENS
#
# ---------------------------------------------------------------------------- 
#
#
       PROC HF_ENERGY  
#      -------------- 
#
#      The HF energy is computed from the HF density (DHFa(b)) and the 
#      Fock matrix (Fpq_a(b)). 
#      --------------------------------------------------------------- 
#
       energy = 0.0
       esum = 0.0 

       if rank == 0.0 

          DO mu  
          DO nu 
#
             GET Fpq_a(mu,nu)
             GET Fpq_b(mu,nu)
             GET DHFa(mu,nu)  
             GET DHFb(mu,nu) 
#
             Txx(mu,nu)   = 0.0 
             execute return_h1 txx  
#
             T1xx(mu,nu)  = Txx(mu,nu) 
             T1xx(mu,nu) += Fpq_a(mu,nu) 
#
             etemp        = T1xx(mu,nu)*DHFa(mu,nu)  
             esum        += etemp 
#
             T1xx(mu,nu)  = Txx(mu,nu) 
             T1xx(mu,nu) += Fpq_b(mu,nu) 
#
             etemp        = T1xx(mu,nu)*DHFb(mu,nu)  
             esum        += etemp 
#
          ENDDO nu 
          ENDDO mu 

       endif 


       execute sip_barrier 

       esum *= 0.5 
       collective energy += esum 
       energy += scfeneg 
       execute sip_barrier 
#
       execute print_scalar energy 
#
       ENDPROC HF_ENERGY   
#      ----------------- 
#
# ---------------------------------------------------------------------------- 
#
       PROC FOCK_MATRIX_FAST   
#      --------------------- 
#
#      The complete Fock matrix is constructed. Eight fold symmetry of the
#      two-electron integrals is incorporated. 
#      ------------------------------------------------------------------
#
#      Put the density into local arrays 
#      --------------------------------- 
#
#      Initialize the Fock matrix to the bare 1-electron hamiltonian.
#      -------------------------------------------------------------- 
#
       execute sip_barrier
       DO mu
       DO nu
#
          Txx(mu,nu)        = 0.0
          Fockrohf_a(mu,nu) = Txx(mu,nu)
          Fockrohf_b(mu,nu) = Txx(mu,nu)
       ENDDO nu
       ENDDO mu 

       execute sip_barrier
#
#      Add contributions containing two-particle integral contributions.
#      -----------------------------------------------------------------
#
############# CLASS 6  ############
##  Do four-center part (mu nu |la si)->(mu nu |si la ),(nu mu|la si),(nu mu|si la)
##                      (la si |mu nu),(si la |mu nu),(la si |nu mu),(si la |nu mu)
##
        PARDO mu, nu, lambda, sigma
##
                 WHERE mu      < nu
                 WHERE lambda  < sigma
                 WHERE mu     < lambda
                 WHERE nu     != sigma
                 WHERE nu     != lambda
                 WHERE mu     != sigma
##
                    execute compute_ubatch1 aoint(mu,nu,lambda,sigma)
##
        ENDPARDO mu, nu, lambda, sigma
#bgn_debug
#        CALL CHECK_FOCK
#end_debug
##
#
############ CLASS 3  ############
#  Do two-center part (mu mu |mu nu)->(mu nu |mu mu ),(mu mu|nu mu),(nu mu|mu mu)
#  Do three-center part (mu mu |nu lambda)->(mu mu |lambda nu ),(nu lambda|mu mu),(lambda nu|mu mu)
#
       PARDO mu, nu, lambda, sigma 
#
          WHERE mu == nu
          WHERE lambda  < sigma
#
                execute compute_ubatch2 aoint(mu,nu,lambda,sigma)
#
       ENDPARDO mu, nu, lambda, sigma 
#bgn_debug
#        CALL CHECK_FOCK
#end_debug
#
############ CLASS 5  ############
###################  CLASS A ##############
#  Do three-center part (mu nu |mu la)->(mu nu |la mu ),(nu mu|mu la),(nu mu|la mu)
#                       (mu la |mu nu),(la mu |mu nu ),(mu la |nu mu),(la mu |nu mu)
#
#
       PARDO mu, nu, lambda, sigma
                WHERE nu < sigma
                WHERE mu < nu
                WHERE lambda < sigma
                WHERE mu==lambda
#
                   execute compute_ubatch4 aoint(mu,nu,lambda,sigma)
#
       ENDPARDO mu, nu, lambda, sigma
#bgn_debug
#        CALL CHECK_FOCK
#end_debug

###################  CLASS B ##############
#  Do three-center part (mu nu |mu la)->(mu nu |la mu ),(nu mu|mu la),(nu mu|la mu)
#                       (mu la |mu nu),(la mu |mu nu ),(mu la |nu mu),(la mu |nu mu)
# 
      PARDO mu, nu, lambda, sigma 
                WHERE mu < nu
                WHERE lambda < sigma
                WHERE mu < sigma
                WHERE nu == lambda
#
                   execute compute_ubatch4 aoint(mu,nu,lambda,sigma)
#
       ENDPARDO mu, nu, lambda, sigma
#bgn_debug
#        CALL CHECK_FOCK
#end_debug
#
# 
###################  CLASS C ##############
#  Do three-center part (mu nu |mu la)->(mu nu |la mu ),(nu mu|mu la),(nu mu|la mu)
#                       (mu la |mu nu),(la mu |mu nu ),(mu la |nu mu),(la mu |nu mu)
#
       PARDO mu, nu, lambda, sigma
                WHERE mu < nu
                WHERE lambda < sigma
                WHERE mu < lambda
                WHERE nu == sigma
#
                   execute compute_ubatch4 aoint(mu,nu,lambda,sigma)
#
       ENDPARDO mu, nu, lambda, sigma
#bgn_debug
#        CALL CHECK_FOCK
#end_debug
#
############ CLASS 4  ############
#  Do two-center part (mu nu |mu nu)->(mu nu |nu mu ),(nu mu|mu nu),(nu mu|nu mu)
#
       PARDO mu, nu, lambda, sigma
                WHERE mu < nu
                WHERE lambda < sigma 
                WHERE nu == sigma
                WHERE mu == lambda
#
                   execute compute_ubatch8 aoint(mu,nu,lambda,sigma)
#
       ENDPARDO mu, nu, lambda, sigma
#bgn_debug
#        CALL CHECK_FOCK
#end_debug
#
############ CLASS 2  ############
#  Do two-center part (mu mu |nu nu)->(nu nu |mu mu )
#
       PARDO mu, nu, lambda, sigma
#
             WHERE mu < lambda
             WHERE mu == nu
             WHERE lambda == sigma
#
                   execute compute_ubatch7 aoint(mu,nu,lambda,sigma)
#
       ENDPARDO mu, nu, lambda, sigma 
#bgn_debug
#        CALL CHECK_FOCK
#end_debug
#
############ END CLASS 2  ############
#
############ CLASS 1  ############
#  Do one-center part (mu mu |mu mu)
#
       PARDO mu, nu, lambda, sigma
             WHERE nu == mu
             WHERE sigma == mu
             WHERE lambda == mu 
#
                   execute compute_ubatch6 aoint(mu,nu,lambda,sigma)
#
       ENDPARDO mu, nu, lambda, sigma
#bgn_debug
#        CALL CHECK_FOCK
#end_debug
#
       execute sip_barrier
#      
       DO mu
       DO nu
#         
          Txx(mu,nu)        = Fockrohf_a(mu,nu)
          PUT Fpq_a(mu,nu) += Txx(mu,nu)
#      
       ENDDO nu
       ENDDO mu 
#      
       DO mu
       DO nu
#         
          Txx(mu,nu)        = Fockrohf_b(mu,nu)
          PUT Fpq_b(mu,nu) += Txx(mu,nu)
#      
       ENDDO nu
       ENDDO mu 
#
#      DO mu   
#      DO nu   
#
#         PUT Fpq_a(mu,nu) += LFpq_a(mu,nu) 
#         PUT Fpq_b(mu,nu) += LFpq_b(mu,nu) 
#
#      ENDDO nu   
#      ENDDO mu    
#
       execute sip_barrier

       if rank == 0.0 
       DO mu    
       DO nu   

            Txx(mu,nu) = 0.0 
            execute return_h1 txx 
#
             PUT Fpq_a(mu,nu) += Txx(mu,nu) 
             PUT Fpq_b(mu,nu) += Txx(mu,nu) 
#
       ENDDO nu   
       ENDDO mu    
       endif 

#bgn_debug
       execute sip_barrier 
       if rank==0.0
       esuma = 0.0
       esumb = 0.0
       DO mu
       DO nu
          get Fpq_a(mu,nu)
          get Fpq_b(mu,nu)
          etemp  = Fpq_a(mu,nu) * Fpq_a(mu,nu)
          esuma += etemp
          etemp  = Fpq_b(mu,nu) * Fpq_b(mu,nu)
          esumb += etemp
       ENDDO nu
       ENDDO mu
       execute print_scalar esuma
       execute print_scalar esumb
       endif
#end_debug

#
       ENDPROC FOCK_MATRIX_FAST   
#      ------------------------ 
# ---------------------------------------------------------------------------- 

     create QXX
     create OVLP_INV
     create Fpq_a
     create Fpq_b
     create FTpq_a
     create FTpq_b
     create CBT_a
     create CBT_b
     create OCA
     create BCA
     create DHFA
     create DHFB
     execute sip_barrier 
    
     execute get_my_rank rank
     zero = 0.0
     execute print_scalar scfeneg
     execute print_scalar rank

     DO mu
     DO nu
     DO lambda
     DO sigma
        IF mu == lambda
        IF nu == sigma
           execute compute_aabb_batch aoint(mu,nu,lambda,sigma)
        ENDIF
        ENDIF
     ENDDO sigma
     ENDDO lambda
     ENDDO nu
     ENDDO mu
   
 
#     DO MU
#     DO P
#       Txp(mu,p) = 0.0
#       CA(mu,p)  = Txp(mu,p)
#     ENDDO P
#     ENDDO Mu
      do mu
      do nu
         Txx(mu,nu)  = 0.0
         x1(mu,nu) = Txx(mu,nu) 
     enddo nu
     enddo mu
     execute sip_barrier

     PARDO mu, nu
            Txx(mu,nu) = 0.0
            execute return_h1 Txx
            PUT Fpq_a(mu,nu) = Txx(mu,nu)
            PUT Fpq_b(mu,nu) = Txx(mu,nu)
     ENDPARDO mu, nu

     execute sip_barrier
     CALL OVER_HALF
     execute sip_barrier
     CALL FOCK_TRANSPOSE
     execute sip_barrier
     CALL FOCK_DIAG

     ENDSIAL SCF_TEST
